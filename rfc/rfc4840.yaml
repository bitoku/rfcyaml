- title: __initial_text__
  contents:
  - '           Multiple Encapsulation Methods Considered Harmful

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes architectural and operational issues that\n\
    \   arise from link-layer protocols supporting multiple Internet Protocol\n  \
    \ encapsulation methods.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. Ethernet Experience ........................................4\n    \
    \       1.2.1. IEEE 802.2/802.3 LLC Type 1 Encapsulation ...........6\n      \
    \     1.2.2. Trailer Encapsulation ...............................7\n      1.3.\
    \ PPP Experience ............................................10\n      1.4. Potential\
    \ Mitigations .....................................10\n   2. Evaluation of Arguments\
    \ for Multiple Encapsulations ............11\n      2.1. Efficiency ................................................11\n\
    \      2.2. Multicast/Broadcast .......................................12\n  \
    \    2.3. Multiple Uses .............................................13\n   3.\
    \ Additional Issues ..............................................15\n      3.1.\
    \ Generality ................................................15\n      3.2. Layer\
    \ Interdependence .....................................16\n      3.3. Inspection\
    \ of Payload Contents ............................17\n      3.4. Interoperability\
    \ Guidance .................................17\n      3.5. Service Consistency\
    \ .......................................19\n      3.6. Implementation Complexity\
    \ .................................19\n      3.7. Negotiation ...............................................19\n\
    \      3.8. Roaming ...................................................20\n  \
    \ 4. Security Considerations ........................................20\n   5.\
    \ Conclusion .....................................................21\n   6. References\
    \ .....................................................22\n      6.1. Normative\
    \ Reference .......................................22\n      6.2. Informative\
    \ References ....................................22\n   7. Acknowledgments ................................................25\n\
    \   Appendix A. IAB Members at the Time of This Writing ...............26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes architectural and operational issues\
    \ arising\n   from the use of multiple ways of encapsulating IP packets on the\
    \ same\n   link.\n   While typically a link-layer protocol supports only a single\
    \ Internet\n   Protocol (IP) encapsulation method, this is not always the case.\
    \  For\n   example, on the same cable it is possible to encapsulate an IPv4\n\
    \   packet using Ethernet [DIX] encapsulation as defined in \"A Standard\n   for\
    \ the Transmission of IP Datagrams over Ethernet Networks\"\n   [RFC894], the\
    \ IEEE 802.2/802.3 LLC [IEEE-802.3.2002] Type 1\n   encapsulation defined in \"\
    Two Methods For The Transmission of IP\n   Datagrams over IEEE 802.3 Networks\"\
    \ [RFC948], or the IEEE 802\n   [IEEE-802.1A.1990] encapsulation defined in \"\
    A Standard for the\n   Transmission of IP Datagrams over IEEE 802 Networks\" [RFC1042].\n\
    \   Historically, a further encapsulation method was used on some\n   Ethernet\
    \ systems as specified in \"Trailer Encapsulations\" [RFC893].\n   Similarly,\
    \ ATM (e.g., see [RFC2684]), the Point-to-Point Protocol\n   (PPP) [RFC1661],\
    \ and IEEE 802.16 [IEEE-802.16e.2005] also support\n   multiple encapsulation\
    \ mechanisms.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n   Broadcast domain\n        The set of all endpoints that\
    \ receive broadcast frames sent by\n        an endpoint in the set.\n   Classification\n\
    \        As defined in [IEEE-802.16e.2005], the process by which a Medium\n  \
    \      Access Control (MAC) Service Data Unit (SDU) is mapped into a\n       \
    \ particular transport connection for transmission between MAC\n        peers.\n\
    \   Connection Identifier (CID)\n        In [IEEE-802.16e.2005] the connection\
    \ identifier is a 16-bit\n        value that identifies a transport connection\
    \ or an uplink\n        (UL)/downlink (DL) pair of associated management connections.\
    \  A\n        connection is a unidirectional mapping between base station (BS)\n\
    \        and subscriber station (SS) MAC peers.  Each transport\n        connection\
    \ has a particular set of associated parameters\n        indicating characteristics\
    \ such as the ciphersuite and quality-\n        of-service.\n   Link\n       \
    \ A communication facility or medium over which nodes can\n        communicate\
    \ at the link layer, i.e., the layer immediately below\n        IP.\n   Link Layer\n\
    \        The conceptual layer of control or processing logic that is\n       \
    \ responsible for maintaining control of the link.  The link-layer\n        functions\
    \ provide an interface between the higher-layer logic\n        and the link. \
    \ The link layer is the layer immediately below IP.\n"
- title: 1.2.  Ethernet Experience
  contents:
  - "1.2.  Ethernet Experience\n   The fundamental issues with multiple encapsulation\
    \ methods on the\n   same link are described in [RFC1042] and \"Requirements for\
    \ Internet\n   Hosts -- Communication Layers\" [RFC1122].  This section summarizes\n\
    \   the concerns articulated in those documents and also describes the\n   limitations\
    \ of approaches suggested to mitigate the problems,\n   including encapsulation\
    \ negotiation and use of routers.\n   [RFC1042] described the potential issues\
    \ resulting from\n   contemporaneous use of Ethernet and IEEE 802.3 encapsulations\
    \ on the\n   same physical cable:\n      Interoperation with Ethernet\n      It\
    \ is possible to use the Ethernet link level protocol [DIX] on\n      the same\
    \ physical cable with the IEEE 802.3 link level protocol.\n      A computer interfaced\
    \ to a physical cable used in this way could\n      potentially read both Ethernet\
    \ and 802.3 packets from the network.\n      If a computer does read both types\
    \ of packets, it must keep track\n      of which link protocol was used with each\
    \ other computer on the\n      network and use the proper link protocol when sending\
    \ packets.\n      One should note that in such an environment, link level broadcast\n\
    \      packets will not reach all the computers attached to the network,\n   \
    \   but only those using the link level protocol used for the\n      broadcast.\n\
    \      Since it must be assumed that most computers will read and send\n     \
    \ using only one type of link protocol, it is recommended that if\n      such\
    \ an environment (a network with both link protocols) is\n      necessary, an\
    \ IP gateway be used as if there were two distinct\n      networks.\n      Note\
    \ that the MTU for the Ethernet allows a 1500 octet IP\n      datagram, with the\
    \ MTU for the 802.3 network allows only a 1492\n      octet IP datagram.\n   When\
    \ multiple IP encapsulation methods were supported on a given\n   link, all hosts\
    \ could not be assumed to support the same set of\n   encapsulation methods. \
    \ This in turn implied that the broadcast\n   domain might not include all hosts\
    \ on the link.  Where a single\n   encapsulation does not reach all hosts on the\
    \ link, a host needs to\n   determine the appropriate encapsulation prior to sending.\
    \  While a\n   host supporting reception of multiple encapsulations could keep\
    \ track\n   of the encapsulations it receives, this does not enable initiation\
    \ of\n   communication; supporting initiation requires a host to support\n   sending\
    \ of multiple encapsulations in order to determine which one to\n   use.  However,\
    \ requiring hosts to send and receive multiple\n   encapsulations is a potentially\
    \ onerous requirement.  [RFC1122],\n   Section 2.3.3, notes the difficulties with\
    \ this approach:\n      Furthermore, it is not useful or even possible for a dual-format\n\
    \      host to discover automatically which format to send, because of\n     \
    \ the problem of link-layer broadcasts.\n   To enable hosts that only support\
    \ sending and receiving of a single\n   encapsulation to communicate with each\
    \ other, a router can be\n   utilized to segregate the hosts by encapsulation.\
    \  Here only the\n   router needs to support sending and receiving of multiple\n\
    \   encapsulations.  This requires assigning a separate unicast prefix to\n  \
    \ each encapsulation, or else all hosts in the broadcast domain would\n   not\
    \ be reachable with a single encapsulation.\n   [RFC1122], Section 2.3.3, provided\
    \ guidance on encapsulation support:\n      Every Internet host connected to a\
    \ 10Mbps Ethernet cable:\n      o  MUST be able to send and receive packets using\
    \ RFC-894\n         encapsulation;\n      o  SHOULD be able to receive RFC-1042\
    \ packets, intermixed with\n         RFC-894 packets; and\n      o  MAY be able\
    \ to send packets using RFC-1042 encapsulation.\n   An Internet host that implements\
    \ sending both the RFC-894 and the\n   RFC-1042 encapsulation MUST provide a configuration\
    \ switch to select\n   which is sent, and this switch MUST default to RFC-894.\n\
    \   By making Ethernet encapsulation mandatory to implement for both send\n  \
    \ and receive, and also the default for sending, [RFC1122] recognized\n   Ethernet\
    \ as the predominant encapsulation, heading off potential\n   interoperability\
    \ problems.\n"
- title: 1.2.1.  IEEE 802.2/802.3 LLC Type 1 Encapsulation
  contents:
  - "1.2.1.  IEEE 802.2/802.3 LLC Type 1 Encapsulation\n   Prior to standardization\
    \ of the IEEE 802 encapsulation in [RFC1042],\n   an IEEE 802.2/802.3 LLC Type\
    \ 1 encapsulation was specified in\n   [RFC948], utilizing 6 in the Source Service\
    \ Access Point (SSAP) and\n   Destination Service Access Point (DSAP) fields of\
    \ the IEEE 802.2\n   header.  However, since the SSAP and DSAP fields are each\
    \ only a\n   single octet, and the Ethertype values for IP, ARP [RFC826], and\
    \ RARP\n   [RFC903] are greater than 1500, these values cannot be represented\
    \ in\n   the SSAP and DSAP fields.  As a result, the encapsulation described\n\
    \   in [RFC948] did not support protocols requiring distinct Ethertypes\n   such\
    \ as ARP or RARP, and implementations typically included support\n   for alternatives\
    \ to ARP such as the Probe [PROBE] protocol.  Support\n   for ARP, RARP and other\
    \ IP protocols utilizing distinct Ethertypes\n   was addressed in [RFC1042], which\
    \ obsoleted [RFC948]. [RFC1042]\n   utilized the Sub-Network Access Protocol (SNAP)\
    \ form of the IEEE\n   802.2 Logical Link Control (LLC) with the SSAP and DSAP\
    \ fields set to\n   170, including support for the Ethertype field.  As noted\
    \ in\n   \"Assigned Numbers\" [RFC1010]:\n      At an ad hoc special session on\
    \ \"IEEE 802 Networks and ARP\", held\n      during the TCP Vendors Workshop (August\
    \ 1986), an approach to a\n      consistent way to send DoD-IP datagrams and other\
    \ IP related\n      protocols on 802 networks was developed.\n      Due to some\
    \ evolution of the IEEE 802.2 standards and the need to\n      provide for a standard\
    \ way to do additional DoD-IP related\n      protocols (such as the Address Resolution\
    \ Protocol (ARP) on IEEE\n      802 network, the following new policy is established,\
    \ which will\n      replace the old policy (see RFC 960 and RFC 948 [108]).\n\
    \      The new policy is for the Internet community to use the IEEE 802.2\n  \
    \    encapsulation on 802.3, 802.4, and 802.5 networks by using the\n      SNAP\
    \ with an organization code indicating that the following 16\n      bits specify\
    \ the EtherType code (where IP = 2048 (0800 hex), see\n      Ethernet Numbers\
    \ of Interest).\n                                                            \
    \      Header\n       ...--------+--------+--------+\n        MAC Header|    \
    \  Length     |                    802.{3/4/5} MAC\n       ...--------+--------+--------+\n\
    \       +--------+--------+--------+\n       | Dsap=K1| Ssap=K1| control|    \
    \                        802.2 SAP\n       +--------+--------+--------+\n    \
    \   +--------+--------+---------+--------+--------+\n       |protocol id or org\
    \ code =K2|    Ether Type   |        802.2 SNAP\n       +--------+--------+---------+--------+--------+\n\
    \      The total length of the SAP Header and the SNAP header is\n      8-octets,\
    \ making the 802.2 protocol overhead come out on a nice\n      boundary.\n   \
    \   K1 is 170.  The IEEE likes to talk about things in little-endian\n      bit\
    \ transmission order and specifies this value as 01010101.  In\n      big-endian\
    \ order, as used in Internet specifications, this becomes\n      10101010 binary,\
    \ or AA hex, or 170 decimal.\n      K2 is 0 (zero).\n      The use of the IP LSAP\
    \ (K1 = 6) is to be phased out as quickly as\n      possible.\n   Many of the\
    \ issues involved in coexistence of the [RFC948] and\n   [RFC1042] encapsulations\
    \ are similar to those described in Section\n   1.2.  For example, due to use\
    \ of different SSAP/DSAP values, the\n   broadcast domain might not include all\
    \ hosts on the link, and a host\n   would need to determine the appropriate encapsulation\
    \ prior to\n   sending.  However, the lack of support for ARP within the [RFC948]\n\
    \   encapsulation created additional interoperability and implementation\n   issues.\
    \  For example, the lack of support for ARP in [RFC948] implied\n   that implementations\
    \ supporting both [RFC948] and [RFC894] or\n   [RFC1042] encapsulations would\
    \ need to implement both ARP and an\n   alternative address resolution mechanism\
    \ such as Probe.  Also, since\n   the address resolution mechanism for [RFC948]\
    \ implementations was not\n   standardized, interoperability problems would likely\
    \ have arisen had\n   [RFC948] been widely implemented.\n"
- title: 1.2.2.  Trailer Encapsulation
  contents:
  - "1.2.2.  Trailer Encapsulation\n   As noted in \"Trailer Encapsulations\" [RFC893],\
    \ trailer encapsulation\n   was an optimization developed to minimize memory-to-memory\
    \ copies on\n   reception.  By placing variable-length IP and transport headers\
    \ at\n   the end of the packet, page alignment of data could be more easily\n\
    \   maintained.  Trailers were implemented in 4.2 Berkeley System\n   Distribution\
    \ (BSD), among others.  While, in theory, trailer\n   encapsulation could have\
    \ been applied to the Ethernet [RFC894] or\n   IEEE 802 [RFC1042] encapsulations\
    \ (creating four potential\n   encapsulations of IP!), in practice, trailer encapsulation\
    \ was only\n   supported for Ethernet.  A separate Ethertype was utilized in order\n\
    \   to enable IP packets in trailer encapsulation to be distinguished\n   from\
    \ [RFC894] encapsulation.  Since the [RFC948] encapsulation did\n   not support\
    \ the Ethertype field (or ARP), this mechanism could not\n   have been used in\
    \ [RFC948] implementations.\n   [RFC1122], Section 2.3.1, described the issues\
    \ with trailer\n   encapsulation:\n      DISCUSSION\n         The trailer protocol\
    \ is a link-layer encapsulation technique\n         that rearranges the data contents\
    \ of packets sent on the\n         physical network.  In some cases, trailers\
    \ improve the\n         throughput of higher layer protocols by reducing the amount\
    \ of\n         data copying within the operating system.  Higher layer\n     \
    \    protocols are unaware of trailer use, but both the sending and\n        \
    \ receiving host MUST understand the protocol if it is used.\n         Improper\
    \ use of trailers can result in very confusing symptoms.\n         Only packets\
    \ with specific size attributes are encapsulated\n         using trailers, and\
    \ typically only a small fraction of the\n         packets being exchanged have\
    \ these attributes.  Thus, if a\n         system using trailers exchanges packets\
    \ with a system that does\n         not, some packets disappear into a black hole\
    \ while others are\n         delivered successfully.\n      IMPLEMENTATION:\n\
    \         On an Ethernet, packets encapsulated with trailers use a\n         distinct\
    \ Ethernet type [RFC893], and trailer negotiation is\n         performed at the\
    \ time that ARP is used to discover the link-\n         layer address of a destination\
    \ system.\n         Specifically, the ARP exchange is completed in the usual manner\n\
    \         using the normal IP protocol type, but a host that wants to\n      \
    \   speak trailers will send an additional \"trailer ARP reply\"\n         packet,\
    \ i.e., an ARP reply that specifies the trailer\n         encapsulation protocol\
    \ type but otherwise has the format of a\n         normal ARP reply.  If a host\
    \ configured to use trailers\n         receives a trailer ARP reply message from\
    \ a remote machine, it\n         can add that machine to the list of machines\
    \ that understand\n         trailers, e.g., by marking the corresponding entry\
    \ in the ARP\n         cache.\n         Hosts wishing to receive trailers send\
    \ trailer ARP replies\n         whenever they complete exchanges of normal ARP\
    \ messages for IP.\n         Thus, a host that received an ARP request for its\
    \ IP protocol\n         address would send a trailer ARP reply in addition to\
    \ the\n         normal IP ARP reply; a host that sent the IP ARP request would\n\
    \         send a trailer ARP reply when it received the corresponding IP\n   \
    \      ARP reply.  In this way, either the requesting or responding\n        \
    \ host in an IP ARP exchange may request that it receive\n         trailers.\n\
    \         This scheme, using extra trailer ARP reply packets rather than\n   \
    \      sending an ARP request for the trailer protocol type, was\n         designed\
    \ to avoid a continuous exchange of ARP packets with a\n         misbehaving host\
    \ that, contrary to any specification or common\n         sense, responded to\
    \ an ARP reply for trailers with another ARP\n         reply for IP.  This problem\
    \ is avoided by sending a trailer ARP\n         reply in response to an IP ARP\
    \ reply only when the IP ARP reply\n         answers an outstanding request; this\
    \ is true when the hardware\n         address for the host is still unknown when\
    \ the IP ARP reply is\n         received.  A trailer ARP reply may always be sent\
    \ along with an\n         IP ARP reply responding to an IP ARP request.\n   Since\
    \ trailer encapsulation negotiation depends on ARP, it can only\n   be used where\
    \ all hosts on the link are within the same broadcast\n   domain.  It was assumed\
    \ that all hosts supported sending and\n   receiving ARP packets in standard Ethernet\
    \ encapsulation [RFC894], so\n   that negotiation between Ethernet and IEEE 802\
    \ encapsulations was not\n   required, only negotiation between standard Ethernet\
    \ [RFC894] and\n   trailer [RFC893] encapsulation.  Had hosts supporting trailer\n\
    \   encapsulation also supported one or more IEEE 802 framing mechanisms,\n  \
    \ the negotiation would have been complicated still further.  For\n   example,\
    \ since [RFC948] implementations did not support the Ethertype\n   field or ARP,\
    \ the trailer negotiation mechanism could not have been\n   utilized, and additional\
    \ difficulty would have been encountered in\n   distinguishing trailer encapsulated\
    \ data frames from normally\n   encapsulated frames.\n   [RFC1122], Section 2.3.1,\
    \ provided the following guidance for use of\n   trailer encapsulation:\n    \
    \  The trailer protocol for link-layer encapsulation MAY be used, but\n      only\
    \ when it has been verified that both systems (host or gateway)\n      involved\
    \ in the link-layer communication implement trailers.  If\n      the system does\
    \ not dynamically negotiate use of the trailer\n      protocol on a per-destination\
    \ basis, the default configuration\n      MUST disable the protocol.\n   4.2BSD\
    \ did not support dynamic negotiation, only configuration of\n   trailer encapsulation\
    \ at boot time, and therefore [RFC1122] required\n   that the trailer encapsulation\
    \ be disabled by default on those\n   systems.\n"
- title: 1.3.  PPP Experience
  contents:
  - "1.3.  PPP Experience\n   PPP can support both encapsulation of IEEE 802 frames\
    \ as defined in\n   [RFC3518], as well as IPv4 and IPv6 [RFC2472] packets.  Multiple\n\
    \   compression schemes are also supported.\n   In addition to PPP Data Link Layer\
    \ (DLL) protocol numbers allocated\n   for IPv4 (0x0021), IPv6 (0x0057), and Bridging\
    \ PDU (0x0031), the\n   following codepoints have been assigned:\n   o  two for\
    \ RObust Header Compression (ROHC) [RFC3095]:\n      ROHC small-CID (0x0003) and\
    \ ROHC large-CID (0x0005)\n   o  two for Van Jacobson compression [RFC1144]:\n\
    \      Compressed TCP/IP (0x002d) and Uncompressed TCP/IP (002f)\n   o  one for\
    \ IPv6 Header Compression [RFC2507]: (0x004f)\n   o  nine for RTP IP Header Compression\
    \ [RFC3544]:\n      Full Header (0x0061), Compressed TCP (0x0063), Compressed\
    \ Non TCP\n      (0x0065), UDP 8 (0x0067), RTP 8 (0x0069), Compressed TCP No Delta\n\
    \      (0x2063), Context State (0x2065), UDP 16 (0x2067), and RTP 16\n      (0x2069)\n\
    \   Although PPP can encapsulate IP packets in multiple ways, typically\n   multiple\
    \ encapsulation schemes are not operational on the same link,\n   and therefore\
    \ the issues described in this document rarely arise.\n   For example, while PPP\
    \ can support both encapsulation of IEEE 802\n   frames as defined in [RFC3518],\
    \ as well as IPv4 and IPv6 [RFC2472]\n   packets, in practice, multiple encapsulation\
    \ mechanisms are not\n   operational on the same link.  Similarly, only a single\
    \ compression\n   scheme is typically negotiated for use on a link.\n"
- title: 1.4.  Potential Mitigations
  contents:
  - "1.4.  Potential Mitigations\n   In order to mitigate problems arising from multiple\
    \ encapsulation\n   methods, it may be possible to use switches [IEEE-802.1D.2004]\
    \ or\n   routers, or to attempt to negotiate the encapsulation method to be\n\
    \   used.  As described below, neither approach may be completely\n   satisfactory.\n\
    \   The use of switches or routers to enable communication between hosts\n   utilizing\
    \ multiple encapsulation methods is not a panacea.  If\n   separate unicast prefixes\
    \ are used for each encapsulation, then the\n   choice of encapsulation can be\
    \ determined from the routing table.  If\n   the same unicast prefix is used for\
    \ each encapsulation method, it is\n   necessary to keep state for each destination\
    \ host.  However, this may\n   not work in situations where hosts using different\
    \ encapsulations\n   respond to the same anycast address.\n   In situations where\
    \ multiple encapsulation methods are enabled on a\n   single link, negotiation\
    \ may be supported to allow hosts to determine\n   how to encapsulate a packet\
    \ for a particular destination host.\n   Negotiating the encapsulation above the\
    \ link layer is potentially\n   problematic since the negotiation itself may need\
    \ to be carried out\n   using multiple encapsulations.  In theory, it is possible\
    \ to\n   negotiate an encapsulation method by sending negotiation packets over\n\
    \   all encapsulation methods supported, and keeping state for each\n   destination\
    \ host.  However, if the encapsulation method must be\n   dynamically negotiated\
    \ for each new on-link destination,\n   communication to new destinations may\
    \ be delayed.  If most\n   communication is short, and the negotiation requires\
    \ an extra round\n   trip beyond link-layer address resolution, this can become\
    \ a\n   noticeable factor in performance.  Also, the negotiation may result\n\
    \   in consumption of additional bandwidth.\n"
- title: 2.  Evaluation of Arguments for Multiple Encapsulations
  contents:
  - "2.  Evaluation of Arguments for Multiple Encapsulations\n   There are several\
    \ reasons often given in support of multiple\n   encapsulation methods.  We discuss\
    \ each in turn, below.\n"
- title: 2.1.  Efficiency
  contents:
  - "2.1.  Efficiency\n   Claim: Multiple encapsulation methods allow for greater\
    \ efficiency.\n   For example, it has been argued that IEEE 802 or Ethernet\n\
    \   encapsulation of IP results in excessive overhead due to the size of\n   the\
    \ data frame headers, and that this can adversely affect\n   performance on wireless\
    \ networks, particularly in situations where\n   support of Voice over IP (VoIP)\
    \ is required.\n   Discussion: Even where these performance concerns are valid,\n\
    \   solutions exist that do not require defining multiple IP\n   encapsulation\
    \ methods.  For example, links may support Ethernet frame\n   compression so that\
    \ Ethernet Source and Destination Address fields\n   are not sent with every packet.\n\
    \   It is possible for link layers to negotiate compression without\n   requiring\
    \ higher-layer awareness; the Point-to-Point Protocol (PPP)\n   [RFC1661] is an\
    \ example.  \"The PPP Compression Control Protocol\n   (CCP)\" [RFC1962] enables\
    \ negotiation of data compression mechanisms,\n   and \"Robust Header Compression\
    \ (ROHC) over PPP\" [RFC3241] and \"IP\n   Header Compression over PPP\" [RFC3544]\
    \ enable negotiation of header\n   compression, without Internet-layer awareness.\
    \  Any frame can be\n   \"decompressed\" based on the content of the frame, and\
    \ prior state\n   based on previous control messages or data frames.  Use of\n\
    \   compression is a good way to solve the efficiency problem without\n   introducing\
    \ problems at higher layers.\n   There are also situations in which use of multiple\
    \ encapsulations can\n   degrade performance or result in packet loss.  The use\
    \ of multiple\n   encapsulation methods with differing Maximum Transfer Units\
    \ (MTUs)\n   can result in differing MTUs for on-link destinations.  If the link-\n\
    \   layer protocol does not provide per-destination MTUs to the IP layer,\n  \
    \ it will need to use a default MTU; to avoid fragmentation, this must\n   be\
    \ less than or equal to the minimum MTU of on-link destinations.  If\n   the default\
    \ MTU is too low, the full bandwidth may not be achievable.\n   If the default\
    \ MTU is too high, packet loss will result unless or\n   until IP Path MTU Discovery\
    \ is used to discover the correct MTU.\n   Recommendation: Where encapsulation\
    \ is an efficiency issue, use\n   header compression.  Where the encapsulation\
    \ method or the use of\n   compression must be negotiated, negotiation should\
    \ either be part of\n   bringing up the link, or be piggybacked in the link-layer\
    \ address\n   resolution exchange; only a single compression scheme should be\n\
    \   negotiated on a link.  Where the MTU may vary among destinations on\n   the\
    \ same link, the link-layer protocol should provide a per-\n   destination MTU\
    \ to IP.\n"
- title: 2.2.  Multicast/Broadcast
  contents:
  - "2.2.  Multicast/Broadcast\n   Claim: Support for Ethernet encapsulation requires\
    \ layer 2 support\n   for distribution of IP multicast/broadcast packets.  In\
    \ situations\n   where this is difficult, support for Ethernet is problematic\
    \ and\n   other encapsulations are necessary.\n   Discussion: Irrespective of\
    \ the encapsulation used, IP packets sent\n   to multicast (IPv4/IPv6) or broadcast\
    \ (IPv4) addresses need to reach\n   all potential on-link receivers.  Use of\
    \ alternative encapsulations\n   cannot remove this requirement, although there\
    \ is considerable\n   flexibility in how it can be met.  Non-Broadcast Multiple\
    \ Access\n   (NBMA) networks can still support the broadcast/multicast service\
    \ via\n   replication of unicast frames.\n   Techniques are also available for\
    \ improving the efficiency of IP\n   multicast/broadcast delivery in wireless\
    \ networks.  In order to be\n   receivable by any host within listening range,\
    \ an IP\n   multicast/broadcast packet sent as link-layer multicast/broadcast\n\
    \   over a wireless link needs to be sent at the lowest rate supported by\n  \
    \ listeners.  If the sender does not keep track of the rates negotiated\n   by\
    \ group listeners, by default, multicast/broadcast traffic is sent\n   at the\
    \ lowest supported rate, resulting in increased overhead.\n   However, a sender\
    \ can also deliver an IP multicast/broadcast packet\n   using unicast frame(s)\
    \ where this would be more efficient.  For\n   example, in IEEE 802.11, multicast/broadcast\
    \ traffic sent from the\n   Station (STA) to the Access Point (AP) is always sent\
    \ as unicast, and\n   the AP tracks the negotiated rate for each STA, so that\
    \ it can send\n   unicast frames at a rate appropriate for each station.\n   In\
    \ order to limit the propagation of link-scope multicast or\n   broadcast traffic,\
    \ it is possible to assign a separate prefix to each\n   host.\n   Unlike broadcasts,\
    \ which are received by all hosts on the link\n   regardless of the protocol they\
    \ are running, multicasts only need be\n   received by those hosts belonging to\
    \ the multicast group.  In wired\n   networks, it is possible to avoid forwarding\
    \ multicast traffic on\n   switch ports without group members, by snooping of\
    \ Internet Group\n   Management Protocol (IGMP) and Multicast Listener Discovery\
    \ (MLD)\n   traffic as described in \"Considerations for IGMP and MLD Snooping\n\
    \   Switches\" [RFC4541].\n   In wireless media where data rates to specific destinations\
    \ are\n   negotiated and may vary over a wide range, it may be more efficient\n\
    \   to send multiple frames via link-layer unicast than to send a single\n   multicast/broadcast\
    \ frame.  For example, in [IEEE-802.11.2003]\n   multicast/broadcast traffic from\
    \ the client station (STA) to the\n   Access Point (AP) is sent via link-layer\
    \ unicast.\n   Recommendation: Where support for link-layer multicast/broadcast\
    \ is\n   problematic, limit the propagation of link-scope multicast and\n   broadcast\
    \ traffic by assignment of separate prefixes to hosts.  In\n   some circumstances,\
    \ it may be more efficient to distribute\n   multicast/broadcast traffic as multiple\
    \ link-layer unicast frames.\n"
- title: 2.3.  Multiple Uses
  contents:
  - "2.3.  Multiple Uses\n   Claim: No single encapsulation is optimal for all purposes.\n\
    \   Therefore, where a link layer is utilized in disparate scenarios\n   (such\
    \ as both fixed and mobile deployments), multiple encapsulations\n   are a practical\
    \ requirement.\n   Discussion: \"Architectural Principles of the Internet\" [RFC1958],\n\
    \   point 3.2, states:\n      If there are several ways of doing the same thing,\
    \ choose one.  If\n      a previous design, in the Internet context or elsewhere,\
    \ has\n      successfully solved the same problem, choose the same solution\n\
    \      unless there is a good technical reason not to.  Duplication of\n     \
    \ the same protocol functionality should be avoided as far as\n      possible,\
    \ without of course using this argument to reject\n      improvements.\n   Existing\
    \ encapsulations have proven themselves capable of supporting\n   disparate usage\
    \ scenarios.  For example, the Point-to-Point Protocol\n   (PPP) has been utilized\
    \ by wireless link layers such as General\n   Packet Radio Service (GPRS), as\
    \ well as in wired networks in\n   applications such as \"PPP over SONET/SDH\"\
    \ [RFC2615].  PPP can even\n   support bridging, as described in \"Point-to-Point\
    \ Protocol (PPP)\n   Bridging Control Protocol (BCP)\" [RFC3518].\n   Similarly,\
    \ Ethernet encapsulation has been used in wired networks as\n   well as Wireless\
    \ Local Area Networks (WLANs) such as IEEE 802.11\n   [IEEE-802.11.2003].  Ethernet\
    \ can also support Virtual LANs (VLANs)\n   and Quality of Service (QoS) [IEEE-802.1Q.2003].\n\
    \   Therefore, disparate usage scenarios can be addressed by choosing a\n   single\
    \ encapsulation, rather than multiple encapsulations.  Where an\n   existing encapsulation\
    \ is suitable, this is preferable to creating a\n   new encapsulation.\n   Where\
    \ encapsulations other than IP over Point-to-Point Protocol (PPP)\n   [RFC1661],\
    \ Ethernet, or IEEE 802 are supported, difficulties in\n   operating system integration\
    \ can lead to interoperability problems.\n   In order to take advantage of operating\
    \ system support for IP\n   encapsulation over PPP, Ethernet, or IEEE 802, it\
    \ may be tempting for\n   a driver supporting an alternative encapsulation to\
    \ emulate PPP,\n   Ethernet, or IEEE 802 support.  Typically, PPP emulation requires\n\
    \   that the driver implement PPP, enabling translation of PPP control\n   and\
    \ data frames to the equivalent native facilities.  Similarly,\n   Ethernet or\
    \ IEEE 802 emulation typically requires that the driver\n   implement Dynamic\
    \ Host Configuration Protocol (DHCP) v4 or v6, Router\n   Solicitation/Router\
    \ Advertisement (RS/RA), Address Resolution\n   Protocol (ARP), or IPv6 Neighbor\
    \ Discovery (ND) in order to enable\n   translation of these frames to and from\
    \ native facilities.\n   Where drivers are implemented in kernel mode, the work\
    \ required to\n   provide faithful emulation may be substantial.  This creates\
    \ the\n   temptation to cut corners, potentially resulting in interoperability\n\
    \   problems.\n   For example, it might be tempting for driver implementations\
    \ to\n   neglect IPv6 support.  A driver emulating PPP might support only IP\n\
    \   Control Protocol (IPCP), but not IPCPv6; a driver emulating Ethernet\n   or\
    \ IEEE 802 might support only DHCPv4 and ARP, but not DHCPv6, RS/RA,\n   or ND.\
    \  As a result, an IPv6 host connecting to a network supporting\n   IPv6 might\
    \ find itself unable to use IPv6 due to lack of driver\n   support.\n   Recommendation:\
    \ Support a single existing encapsulation where\n   possible.  Emulation of PPP,\
    \ Ethernet, or IEEE 802 on top of\n   alternative encapsulations should be avoided.\n"
- title: 3.  Additional Issues
  contents:
  - "3.  Additional Issues\n   There are a number of additional issues arising from\
    \ use of multiple\n   encapsulation methods, as hinted at in Section 1.  We discuss\
    \ each of\n   these below.\n"
- title: 3.1.  Generality
  contents:
  - "3.1.  Generality\n   Link-layer protocols such as [IEEE-802.1A.1990] and [DIX]\
    \ inherently\n   support the ability to add support for a new packet type without\n\
    \   modification to the link-layer protocol.\n   IEEE 802.16 [IEEE-802.16.2004]\
    \ splits the Media Access Control (MAC)\n   layer into a number of sublayers.\
    \  For the uppermost of these, the\n   standard defines the concept of a service-specific\
    \ Convergence\n   Sublayer (CS).  The two underlying sublayers (the MAC Common\
    \ Part\n   Sublayer and the Security Sublayer) provide common services for all\n\
    \   instantiations of the CS.\n   While [IEEE-802.16.2004] defined support for\
    \ the Asynchronous\n   Transfer Mode (ATM) CS and the Packet CS for raw IPv4,\
    \ raw IPv6, and\n   Ethernet with a choice of six different classifiers,\n   [IEEE-802.16e.2005]\
    \ added support for raw and Ethernet-framed ROHC\n   Enhanced Compressed RTP (ECRTP)\
    \ compressed packets.  As a result,\n   [IEEE-802.16e.2005] defines the ATM CS\
    \ and multiple versions of the\n   Packet CS for the transmission of raw IPv4,\
    \ raw IPv6, 802.3/Ethernet,\n   802.1Q VLAN, IPv4 over 802.3/Ethernet, IPv6 over\
    \ 802.3/Ethernet, IPv4\n   over 802.1Q VLAN, IPv6 over 802.1Q VLAN, raw ROHC-compressed\
    \ packets,\n   raw ECRTP-compressed packets, ROHC-compressed packets over\n  \
    \ 802.3/Ethernet. and ECRTP-compressed packets over 802.3/Ethernet.\n   As noted\
    \ in [Generic], [IEEE-802.16.2004] appears to imply that the\n   standard will\
    \ need to be modified to support new packet types:\n      We are concerned that\
    \ the 802.16 protocol cannot easily be\n      extendable to transport new protocols\
    \ over the 802.16 air\n      interface.  It would appear that a Convergence Sublayer\
    \ is needed\n      for every type of protocol transported over the 802.16 MAC.\
    \  Every\n      time a new protocol type needs to be transported over the 802.16\n\
    \      air interface, the 802.16 standard needs to be modified to define\n   \
    \   a new CS type.  We need to have a generic Packet Convergence\n      Sublayer\
    \ that can support multi-protocols and which does not\n      require further modification\
    \ to the 802.16 standard to support new\n      protocols.  We believe that this\
    \ was the original intention of the\n      Packet CS.  Furthermore, we believe\
    \ it is difficult for the\n      industry to agree on a set of CS's that all devices\
    \ must implement\n      to claim \"compliance\".\n   The use of IP and/or upper-layer\
    \ protocol specific classification and\n   encapsulation methods, rather than\
    \ a 'neutral' general purpose\n   encapsulation, may give rise to a number of\
    \ undesirable effects\n   explored in the following subsections.\n   If the link\
    \ layer does not provide a general purpose encapsulation\n   method, deployment\
    \ of new IP and/or upper-layer protocols will be\n   dependent on deployment of\
    \ the corresponding new encapsulation\n   support in the link layer.\n   Even\
    \ if a single encapsulation method is used, problems can still\n   occur if demultiplexing\
    \ of ARP, IPv4, IPv6, and any other protocols\n   in use, is not supported at\
    \ the link layer.  While it is possible to\n   demultiplex such packets based\
    \ on the Version field (first four bits\n   on the packet), this assumes that\
    \ IPv4-only implementations will be\n   able to properly handle IPv6 packets.\
    \  As a result, a more robust\n   design is to demultiplex protocols in the link\
    \ layer, such as by\n   assigning a different protocol type, as is done in IEEE\
    \ 802 media\n   where a Type of 0x0800 is used for IPv4, and 0x86DD for IPv6.\n\
    \   Recommendations: Link-layer protocols should enable network packets\n   (IPv4,\
    \ IPv6, ARP, etc.) to be demultiplexed in the link layer.\n"
- title: 3.2.  Layer Interdependence
  contents:
  - "3.2.  Layer Interdependence\n   Within IEEE 802.16, the process by which frames\
    \ are selected for\n   transmission on a connection identifier (CID) is known\
    \ as\n   \"classification\".  Fields in the Ethernet, IP, and UDP/TCP headers\n\
    \   can be used for classification; for a particular CS, a defined subset\n  \
    \ of header fields may be applied for that purpose.\n   Utilizing IP and/or upper\
    \ layer headers in link-layer classification\n   will almost inevitably lead to\
    \ interdependencies between link-layer\n   and upper-layer specifications.  Although\
    \ this might appear to be\n   desirable in terms of providing a highly specific\
    \ (and hence\n   interoperable) mapping between the capabilities provided by the\
    \ link\n   layer (e.g., quality-of-service support) and those that are needed\
    \ by\n   upper layers, this sort of capability is probably better provided by\n\
    \   a more comprehensive service interface (Application Programming\n   Interface)\
    \ in conjunction with a single encapsulation mechanism.\n   IPv6, in particular,\
    \ provides an extensible header system.  An\n   upper-layer-specific classification\
    \ scheme would still have to\n   provide a degree of generality in order to cope\
    \ with future\n   extensions of IPv6 that might wish to make use of some of the\
    \ link\n   layer services already provided.\n   Recommendations: Upper-layer-specific\
    \ classification schemes should\n   be avoided.\n"
- title: 3.3.  Inspection of Payload Contents
  contents:
  - "3.3.  Inspection of Payload Contents\n   If a classification scheme utilizing\
    \ higher-layer headers proposes to\n   inspect the contents of the packet being\
    \ encapsulated (e.g., IEEE\n   802.16 IP CS mechanisms for determining the connection\
    \ identifier\n   (CID) to use to transmit a packet), the fields available for\n\
    \   inspection may be limited if the packet is compressed or encrypted\n   before\
    \ passing to the link layer.  This may prevent the link layer\n   from utilizing\
    \ existing compression mechanisms, such as Van Jacobson\n   Compression [RFC1144],\
    \ ROHC [RFC3095][RFC3759], Compressed RTP (CRTP)\n   [RFC2508], Enhanced Compressed\
    \ RTP (ECRTP) [RFC3545], or IP Header\n   Compression [RFC2507].\n   Recommendations:\
    \ Link-layer classification schemes should not rely on\n   the contents of higher-layer\
    \ headers.\n"
- title: 3.4.  Interoperability Guidance
  contents:
  - "3.4.  Interoperability Guidance\n   In situations where multiple encapsulation\
    \ methods are operational\n   and capable of carrying IP traffic, interoperability\
    \ problems are\n   possible in the absence of clear implementation guidelines.\
    \  For\n   example, there is no guarantee that other hosts on the link will\n\
    \   support the same set of encapsulation methods, or that if they do,\n   that\
    \ their routing tables will result in identical preferences.\n   In IEEE 802.16,\
    \ the Subscriber Station (SS) indicates the Convergence\n   Sublayers it supports\
    \ to the Base Station (BS), which selects from\n   the list one or more that it\
    \ will support on the link.  Therefore, it\n   is possible for multiple CSes to\
    \ be operational.\n   Note that IEEE 802.16 does not provide multiple encapsulation\
    \ methods\n   for the same kind of data payload; it defines exactly one\n   encapsulation\
    \ scheme for each data payload.  For example, there is\n   one way to encapsulate\
    \ a raw IPv4 packet into an IEEE 802.16 MAC\n   frame, one encapsulation scheme\
    \ for a raw IPv6 packet, etc.  There is\n   also one way to encapsulate an Ethernet\
    \ frame, even when there are\n   multiple possibilities for classifying an Ethernet\
    \ frame for\n   forwarding over a connection identifier (CID).  Since support\
    \ for\n   multiple CSes enables IEEE 802.16 to encapsulate layer 2 frames as\n\
    \   well as layer 3 packets, IP packets may be directly encapsulated in\n   IEEE\
    \ 802.16 MAC frames as well as framed with Ethernet headers in\n   IEEE 802.16\
    \ MAC frames.  Where CSes supporting both layer 2 frames as\n   well as layer\
    \ 3 packets are operational on the same link, a number of\n   issues may arise,\
    \ including:\n   Use of Address Resolution Protocol (ARP)\n      Where both IPv4\
    \ CS and Ethernet CS are operational on the same\n      link, it may not be obvious\
    \ how address resolution should be\n      implemented.  For example, should an\
    \ ARP frame be encapsulated\n      over the Ethernet CS, or should alternative\
    \ mechanisms be used for\n      address resolution, utilizing the IPv4 CS?\n \
    \  Data Frame Encapsulation\n      When sending an IP packet, which CS should\
    \ be used?  Where\n      multiple encapsulations are operational, multiple connection\n\
    \      identifiers (CIDs) will also be present.  The issue can therefore\n   \
    \   be treated as a multi-homing problem, with each CID constituting\n      its\
    \ own interface.  Since a given CID may have associated\n      bandwidth or quality-of-service\
    \ constraints, routing metrics could\n      be adjusted to take this into account,\
    \ allowing the routing layer\n      to choose based on which CID (and encapsulation)\
    \ appears more\n      attractive.\n   This could lead to interoperability problems\
    \ or routing asymmetry.\n   For example, consider the effects on IPv6 Neighbor\
    \ Discovery:\n   (a)  If hosts choose to send IPv6 Neighbor Discovery traffic\
    \ on\n        different CSes, it is possible that a host sending an IPv6\n   \
    \     Neighbor Discovery packet will not receive a reply, even though\n      \
    \  the target host is reachable over another CS.\n   (b)  Where hosts all support\
    \ the same set of CSes, but have different\n        routing preferences, it is\
    \ possible for a host to send an IPv6\n        Neighbor Discovery packet over\
    \ one CS and receive a reply over\n        another CS.\n   Recommendations: Given\
    \ these issues, it is strongly recommended that\n   only a single kind of CS supporting\
    \ a single encapsulation method\n   should be usable on a particular link.\n"
- title: 3.5.  Service Consistency
  contents:
  - "3.5.  Service Consistency\n   If a link-layer protocol provides multiple encapsulation\
    \ methods, the\n   services offered to the IP-layer and upper-layer protocols\
    \ may differ\n   qualitatively between the different encapsulation methods.  For\n\
    \   example, the 802.16 [IEEE-802.16.2004] link-layer protocol offers\n   both\
    \ 'native' encapsulation for raw IPv4 and IPv6 packets, and\n   Ethernet encapsulation.\
    \  In the raw case, the IP layer can be\n   directly mapped to the quality-of-service\
    \ (QoS) capabilities of the\n   IEEE 802.16 transmission channels, whereas using\
    \ the Ethernet\n   encapsulation, an IP-over-Ethernet CS has to be deployed to\n\
    \   circumvent the mapping of the IP QoS to the Ethernet header fields to\n  \
    \ avoid the limitations of Ethernet QoS.  Consequently, the service\n   offered\
    \ to an application depends on the classification method\n   employed and may\
    \ be inconsistent between sessions.  This may be\n   confusing for the user and\
    \ the application.\n   Recommendations: If multiple encapsulation methods for\
    \ IP packets on\n   a single link-layer technology are deemed to be necessary,\
    \ care\n   should be taken to match the services available between encapsulation\n\
    \   methods as closely as possible.\n"
- title: 3.6.  Implementation Complexity
  contents:
  - "3.6.  Implementation Complexity\n   Support of multiple encapsulation methods\
    \ results in additional\n   implementation complexity.  Lack of uniform encapsulation\
    \ support\n   also results in potential interoperability problems.  To avoid\n\
    \   interoperability issues, devices with limited resources may be\n   required\
    \ to implement multiple encapsulation mechanisms, which may\n   not be practical.\n\
    \   When encapsulation methods require hardware support, implementations\n   may\
    \ choose to support different encapsulation sets, resulting in\n   market fragmentation.\
    \  This can prevent users from benefiting from\n   economies of scale, precluding\
    \ some uses of the technology entirely.\n   Recommendations: Choose a single encapsulation\
    \ mechanism that is\n   mandatory to implement for both sending and receiving,\
    \ and make that\n   encapsulation mechanism the default for sending.\n"
- title: 3.7.  Negotiation
  contents:
  - "3.7.  Negotiation\n   The complexity of negotiation within ARP or IP can be reduced\
    \ by\n   performing encapsulation negotiation within the link layer.\n   However,\
    \ unless the link layer allows the negotiation of the\n   encapsulation between\
    \ any two hosts, interoperability problems can\n   still result if more than one\
    \ encapsulation is possible on a given\n   link.  In general, a host cannot assume\
    \ that all other hosts on a\n   link support the same set of encapsulation methods,\
    \ so that unless a\n   link-layer protocol only supports point-to-point communication,\n\
    \   negotiation of multiple potential encapsulation methods will be\n   problematic.\
    \  To avoid this problem, it is desirable for link-layer\n   encapsulation negotiation\
    \ to determine a single IP encapsulation, not\n   merely to indicate which encapsulation\
    \ methods are possible.\n   Recommendations: Encapsulation negotiation is best\
    \ handled in the\n   link layer.  In order to avoid dependencies on the data frame\n\
    \   encapsulation mechanism, it is preferable for the negotiation to be\n   carried\
    \ out using management frames, if they are supported.  If\n   multiple encapsulations\
    \ are required and negotiation is provided,\n   then the negotiation should result\
    \ in a single encapsulation method\n   being negotiated on the link.\n"
- title: 3.8.  Roaming
  contents:
  - "3.8.  Roaming\n   Where a mobile node roams between base stations or to a fixed\n\
    \   infrastructure, and the base stations and fixed infrastructure do not\n  \
    \ all support the same set of encapsulations, then it may be necessary\n   to\
    \ alter the encapsulation method, potentially in mid-conversation.\n   Even if\
    \ the change can be handled seamlessly at the link and IP layer\n   so that applications\
    \ are not affected, unless the services offered\n   over the different encapsulations\
    \ are equivalent (see Section 3.5),\n   the service experienced by the application\
    \ may change as the mobile\n   node crosses boundaries.  If the service is significantly\
    \ different,\n   it might even require 'in-flight' renegotiation, which most\n\
    \   applications are not equipped to manage.\n   Recommendations: Ensure uniformity\
    \ of the encapsulation set\n   (preferably only a single encapsulation) within\
    \ a given mobile\n   domain, between mobile domains, and between mobile domains\
    \ and fixed\n   infrastructure.  If a link layer protocol offers multiple\n  \
    \ encapsulation methods for IP packets, it is strongly recommended that\n   only\
    \ one of these encapsulation methods should be in use on any given\n   link or\
    \ within a single wireless transmission domain.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The use of multiple encapsulation methods does\
    \ not appear to have\n   significant security implications.\n   An attacker might\
    \ be able to utilize an encapsulation method that was\n   not in normal use on\
    \ a link to cause a denial-of-service attack,\n   which would exhaust the processing\
    \ resources of interfaces if packets\n   utilizing this encapsulation were passed\
    \ up the stack to any\n   significant degree before being discarded.\n   An attacker\
    \ might be able to force a more cumbersome encapsulation\n   method between two\
    \ endpoints, even when a lighter weight one is\n   available, hence forcing higher\
    \ resource consumption on the link and\n   within those endpoints, or causing\
    \ fragmentation.  Since IP fragments\n   are more difficult to classify than non-fragments,\
    \ this may result in\n   packet loss or may even expose security vulnerabilities\
    \ [WEP].\n   If different methods have different security properties, an attacker\n\
    \   might be able to force a less secure method as an elevation path to\n   get\
    \ access to some other resource or data.  Similarly, if one method\n   is rarely\
    \ used, that method is potentially more likely to have\n   exploitable implementation\
    \ bugs.\n   Since lower-layer classification methods may need to inspect fields\n\
    \   in the packet being encapsulated, this might deter the deployment of\n   end-to-end\
    \ security, which is undesirable.  Where encryption of upper\n   layer headers\
    \ (e.g., IPsec tunnel mode) is required, this may obscure\n   headers required\
    \ for classification.  As a result, it may be\n   necessary for all encrypted\
    \ traffic to flow over a single connection.\n"
- title: 5.  Conclusion
  contents:
  - "5.  Conclusion\n   The use of multiple encapsulation methods on the same link\
    \ is\n   problematic, as discussed above.\n   Although multiple IP encapsulation\
    \ methods were defined on Ethernet\n   cabling, recent implementations support\
    \ only the Ethernet\n   encapsulation of IPv4 defined in [RFC894].  In order to\
    \ avoid a\n   repeat of the experience with IPv4, for operation of IPv6 on IEEE\n\
    \   802.3 media, only the Ethernet encapsulation was defined in \"A Method\n \
    \  for the Transmission of IPv6 Packets over Ethernet Networks\"\n   [RFC1972],\
    \ later updated in [RFC2464].\n   In addition to the recommendations given earlier,\
    \ we give the\n   following general recommendations to avoid problems resulting\
    \ from\n   use of multiple IP encapsulation methods:\n      When developing standards\
    \ for encapsulating IP packets on a link-\n      layer technology, it is desirable\
    \ that only a single encapsulation\n      method should be standardized for each\
    \ link-layer technology.\n      If a link-layer protocol offers multiple encapsulation\
    \ methods for\n      IP packets, it is strongly recommended that only one of these\n\
    \      encapsulation methods should be in use within any given link.\n      Where\
    \ multiple encapsulation methods are supported on a link, a\n      single encapsulation\
    \ should be mandatory to implement for send and\n      receive.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative Reference
  contents:
  - "6.1.  Normative Reference\n   [RFC2119]           Bradner, S., \"Key words for\
    \ use in RFCs to\n                       Indicate Requirement Levels\", BCP 14,\
    \ RFC 2119,\n                       March 1997.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [DIX]               Digital Equipment Corporation,\
    \ Intel Corporation,\n                       and Xerox Corporation, \"The Ethernet\
    \ -- A Local\n                       Area Network: Data Link Layer and Physical\
    \ Layer\n                       (Version 2.0)\", November 1982.\n   [Generic]\
    \           Wang, L. et al, \"A Generic Packet Convergence\n                 \
    \      Sublayer (GPCS) for Supporting Multiple Protocols\n                   \
    \    over 802.16 Air Interface\", Submission to IEEE\n                       802.16g:\
    \ CB0216g_05_025r4.pdf, November 2005,\n                       <http://www.ieee802.org/16/netman/contrib/\n\
    \                       C80216g-05_025r4.pdf>.\n   [IEEE-802.1A.1990]  Institute\
    \ of Electrical and Electronics\n                       Engineers, \"Local Area\
    \ Networks and Metropolitan\n                       Area Networks:  Overview and\
    \ Architecture of\n                       Network Standards\", IEEE Standard 802.1A,\
    \ 1990.\n   [IEEE-802.1D.2004]  Institute of Electrical and Electronics\n    \
    \                   Engineers, \"Information technology -\n                  \
    \     Telecommunications and information exchange\n                       between\
    \ systems - Local area networks - Media\n                       access control\
    \ (MAC) bridges\", IEEE Standard\n                       802.1D, 2004.\n   [IEEE-802.1Q.2003]\
    \  IEEE Standards for Local and Metropolitan Area\n                       Networks:\
    \ Draft Standard for Virtual Bridged\n                       Local Area Networks,\
    \ P802.1Q-2003, January 2003.\n   [IEEE-802.3.2002]   Institute of Electrical\
    \ and Electronics\n                       Engineers, \"Carrier Sense Multiple\
    \ Access with\n                       Collision Detection (CSMA/CD) Access Method\
    \ and\n                       Physical Layer Specifications\", IEEE Standard\n\
    \                       802.3, 2002.\n   [IEEE-802.11.2003]  Institute of Electrical\
    \ and Electronics\n                       Engineers, \"Wireless LAN Medium Access\
    \ Control\n                       (MAC) and Physical Layer (PHY) Specifications\"\
    ,\n                       IEEE Standard 802.11, 2003.\n   [IEEE-802.16.2004] \
    \ Institute of Electrical and Electronics\n                       Engineers, \"\
    Information technology -\n                       Telecommunications and information\
    \ exchange\n                       between systems - Local and metropolitan area\n\
    \                       networks, Part 16: Air Interface for Fixed\n         \
    \              Broadband Wireless Access Systems\", IEEE Standard\n          \
    \             802.16-2004, October 2004.\n   [IEEE-802.16e.2005] Institute of\
    \ Electrical and Electronics\n                       Engineers, \"Information\
    \ technology -\n                       Telecommunications and information exchange\n\
    \                       between systems - Local and Metropolitan Area\n      \
    \                 Networks - Part 16: Air Interface for Fixed and\n          \
    \             Mobile Broadband Wireless Access Systems,\n                    \
    \   Amendment for Physical and Medium Access Control\n                       Layers\
    \ for Combined Fixed and Mobile Operation in\n                       Licensed\
    \ Bands\", IEEE P802.16e, September 2005.\n   [PROBE]             Hewlett Packard,\
    \ \"A Primer on HP Probe\",\n                       http://www.hp.com/rnd/support/manuals/pdf/\n\
    \                       hp_probe.pdf, July 1993.\n   [RFC826]            Plummer,\
    \ D., \"Ethernet Address Resolution\n                       Protocol:  Or converting\
    \ network protocol\n                       addresses to 48.bit Ethernet address\
    \ for\n                       transmission on Ethernet hardware\", STD 37, RFC\n\
    \                       826, November 1982.\n   [RFC893]            Leffler, S.\
    \ and M. Karels, \"Trailer\n                       encapsulations\", RFC 893,\
    \ April 1984.\n   [RFC894]            Hornig, C., \"A Standard for the Transmission\
    \ of\n                       IP Datagrams over Ethernet Networks\", STD 41, RFC\n\
    \                       894, April 1984.\n   [RFC903]            Finlayson, R.,\
    \ Mann, T., Mogul, J., and M.\n                       Theimer, \"A Reverse Address\
    \ Resolution Protocol\",\n                       STD 38, RFC 903, June 1984.\n\
    \   [RFC948]            Winston, I., \"Two Methods for the Transmission of\n \
    \                      IP Datagrams over IEEE 802.3 Networks\", RFC 948,\n   \
    \                    June 1985.\n   [RFC1010]           Reynolds, J. and J. Postel,\
    \ \"Assigned Numbers\",\n                       RFC 1010, May 1987.\n   [RFC1042]\
    \           Postel, J. and J. Reynolds, \"Standard for the\n                 \
    \      transmission of IP datagrams over IEEE 802\n                       networks\"\
    , STD 43, RFC 1042, February 1988.\n   [RFC1122]           Braden, R., \"Requirements\
    \ for Internet Hosts --\n                       Communication Layers\", STD 3,\
    \ RFC 1122, October\n                       1989.\n   [RFC1144]           Jacobson,\
    \ V., \"Compressing TCP/IP Headers for\n                       Low-Speed Serial\
    \ Links\", RFC 1144, February 1990.\n   [RFC1661]           Simpson, W., \"The\
    \ Point-to-Point Protocol (PPP)\",\n                       STD 51, RFC 1661, July\
    \ 1994.\n   [RFC1958]           Carpenter, B., \"Architectural Principles of the\n\
    \                       Internet\", RFC 1958, June 1996.\n   [RFC1962]       \
    \    Rand, D., \"The PPP Compression Control Protocol\n                      \
    \ (CCP)\", RFC 1962, June 1996.\n   [RFC1972]           Crawford, M., \"A Method\
    \ for the Transmission of\n                       IPv6 Packets over Ethernet Networks\"\
    , RFC 1972,\n                       August 1996.\n   [RFC2472]           Haskin,\
    \ D. and E. Allen, \"IP Version 6 over PPP\",\n                       RFC 2472,\
    \ December 1998.\n   [RFC2464]           Crawford, M., \"Transmission of IPv6\
    \ Packets over\n                       Ethernet Networks\", RFC 2464, December\
    \ 1998.\n   [RFC2507]           Degermark, M., Nordgren, B., and S. Pink, \"IP\n\
    \                       Header Compression\", RFC 2507, February 1999.\n   [RFC2508]\
    \           Casner, S. and V. Jacobson, \"Compressing\n                      \
    \ IP/UDP/RTP Headers for Low-Speed Serial Links\",\n                       RFC\
    \ 2508, February 1999.\n   [RFC2615]           Malis, A. and W. Simpson, \"PPP\
    \ over SONET/SDH\",\n                       RFC 2615, June 1999.\n   [RFC2684]\
    \           Grossman, D. and J. Heinanen, \"Multiprotocol\n                  \
    \     Encapsulation over ATM Adaptation Layer 5\", RFC\n                     \
    \  2684, September 1999.\n   [RFC3095]           Bormann, C., Burmeister, C.,\
    \ Degermark, M.,\n                       Fukushima, H., Hannu, H., Jonsson, L-E.,\n\
    \                       Hakenberg, R., Koren, T., Le, K., Liu, Z.,\n         \
    \              Martensson, A., Miyazaki, A., Svanbro, K.,\n                  \
    \     Wiebke, T., Yoshimura, T., and H. Zheng, \"RObust\n                    \
    \   Header Compression (ROHC):  Framework and four\n                       profiles:\
    \ RTP, UDP, ESP, and uncompressed\", RFC\n                       3095, July 2001.\n\
    \   [RFC3241]           Bormann, C., \"Robust Header Compression (ROHC)\n    \
    \                   over PPP\", RFC 3241, April 2002.\n   [RFC3518]          \
    \ Higashiyama, M., Baker, F., and T. Liao, \"Point-\n                       to-Point\
    \ Protocol (PPP) Bridging Control Protocol\n                       (BCP)\", RFC\
    \ 3518, April 2003.\n   [RFC3544]           Koren, T., Casner, S., and C. Bormann,\
    \ \"IP Header\n                       Compression over PPP\", RFC 3544, July 2003.\n\
    \   [RFC3545]           Koren, T., Casner, S., Geevarghese, J., Thompson,\n  \
    \                     B., and P. Ruddy, \"Enhanced Compressed RTP (CRTP)\n   \
    \                    for Links with High Delay, Packet Loss and\n            \
    \           Reordering\", RFC 3545, July 2003.\n   [RFC3759]           Jonsson,\
    \ L-E., \"RObust Header Compression (ROHC):\n                       Terminology\
    \ and Channel Mapping Examples\", RFC\n                       3759, April 2004.\n\
    \   [RFC4541]           Christensen, M., Kimball, K., and F. Solensky,\n     \
    \                  \"Considerations for Internet Group Management\n          \
    \             Protocol (IGMP) and Multicast Listener Discovery\n             \
    \          (MLD) Snooping Switches\", RFC 4541, May 2006.\n   [WEP]          \
    \     Bittau, A., Handley, M., and J. Lackey, \"The\n                       Final\
    \ Nail in WEP's Coffin\", Proceedings of the\n                       2006 IEEE\
    \ Symposium on Security and Privacy, pp.\n                       386-400.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors would like to acknowledge Jeff Mandin, Bob\
    \ Hinden, Jari\n   Arkko, Max Riegel, Alfred Hoenes, and Phil Roberts for contributions\n\
    \   to this document.\n"
- title: Appendix A.  IAB Members at the Time of This Writing
  contents:
  - "Appendix A.  IAB Members at the Time of This Writing\n   Bernard Aboba\n   Loa\
    \ Andersson\n   Brian Carpenter\n   Leslie Daigle\n   Elwyn Davies\n   Kevin Fall\n\
    \   Olaf Kolkman\n   Kurtis Lindqvist\n   David Meyer\n   David Oran\n   Eric\
    \ Rescorla\n   Dave Thaler\n   Lixia Zhang\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   EMail: bernarda@microsoft.com\n   Phone: +1 425\
    \ 706 6605\n   Fax:   +1 425 936 7329\n   Elwyn B. Davies\n   Consultant\n   Soham,\
    \ Cambs\n   UK\n   EMail: elwynd@dial.pipex.com\n   Phone: +44 7889 488 335\n\
    \   Dave Thaler\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA\
    \ 98052\n   EMail: dthaler@microsoft.com\n   Phone: +1 425 703 8835\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
