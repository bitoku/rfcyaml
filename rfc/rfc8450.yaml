- contents:
  - '         RTP Payload Format for VC-2 High Quality (HQ) Profile

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo describes an RTP payload format for the High Quality (HQ)\n
    \  profile of Society of Motion Picture and Television Engineers\n   Standard
    ST 2042-1, known as VC-2.  This document describes the\n   transport of HQ Profile
    VC-2 in RTP packets and has applications for\n   low-complexity, high-bandwidth
    streaming of both lossless and lossy\n   compressed video.\n   The HQ profile
    of VC-2 is intended for low-latency video compression\n   (with latency potentially
    on the order of lines of video) at high\n   data rates (with compression ratios
    on the order of 2:1 or 4:1).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8450.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Conventions, Definitions, and Acronyms  . . . . . . . .
    . . .   3\n   3.  Media Format Description  . . . . . . . . . . . . . . . . .
    .   3\n   4.  Payload Format  . . . . . . . . . . . . . . . . . . . . . . .   4\n
    \    4.1.  RTP Header Usage  . . . . . . . . . . . . . . . . . . . .  10\n     4.2.
    \ Payload Header  . . . . . . . . . . . . . . . . . . . . .  11\n     4.3.  The
    Choice of Parse Codes (Informative) . . . . . . . . .  13\n     4.4.  Stream Constraints
    \ . . . . . . . . . . . . . . . . . . .  14\n     4.5.  Payload Data  . . . .
    . . . . . . . . . . . . . . . . . .  15\n       4.5.1.  Reassembling the Data
    . . . . . . . . . . . . . . . .  16\n   5.  Forward Error Correction (FEC) Considerations
    . . . . . . . .  18\n   6.  Congestion Control Considerations . . . . . . . .
    . . . . . .  18\n   7.  Payload Format Parameters . . . . . . . . . . . . . .
    . . . .  19\n     7.1.  Media Type Definition . . . . . . . . . . . . . . . .
    . .  19\n     7.2.  Mapping to the Session Description Protocol (SDP) . . . .
    \ 21\n     7.3.  Offer/Answer Considerations . . . . . . . . . . . . . . .  21\n
    \  8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  21\n   9.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  21\n   10. References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  22\n     10.1.  Normative
    References . . . . . . . . . . . . . . . . . .  22\n     10.2.  Informative References
    . . . . . . . . . . . . . . . . .  23\n   Author's Address  . . . . . . . . .
    . . . . . . . . . . . . . . .  24\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo specifies an RTP payload format for the video
    coding\n   standard Society of Motion Picture and Television Engineers ST\n   2042-1:2017
    [VC2], also known as VC-2\n   The VC-2 codec is a wavelet-based codec intended
    primarily for\n   professional video use with high bit-rates and only low levels
    of\n   compression.  It has been designed to have a low level of complexity\n
    \  and potentially a very low latency through both encoder and decoder:\n   with
    some choices of parameters, this latency may be as low as a few\n   lines of video.\n
    \  The low level of complexity in the VC-2 codec allows for this low-\n   latency
    operation but also means that it lacks many of the more\n   powerful compression
    techniques used in other codecs.  As such, it is\n   suitable for low compression
    ratios that produce coded data rates\n   around half to a quarter of that of uncompressed
    video, at a similar\n   visual quality.\n   The primary use for VC-2 is likely
    to be in professional video\n   production environments.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions, Definitions, and Acronyms\n   The key words \"MUST\", \"MUST
    NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
    \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document
    are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and
    only when, they appear in all\n   capitals, as shown here.\n"
  title: 2.  Conventions, Definitions, and Acronyms
- contents:
  - "3.  Media Format Description\n   The VC-2 specification defines a VC-2 Stream
    as being composed of one\n   or more Sequences.  Each Sequence is independently
    decodable,\n   containing all of the needed parameters and metadata for configuring\n
    \  the decoder.\n   Each Sequence consists of a series of 13-octet Parse Info
    Headers and\n   variable-length Data Units.  The Sequence begins and ends with
    a\n   Parse Info Header, and each Data Unit is preceded by a Parse Info\n   Header.
    \ Data Units come in a variety of types, and the type of a\n   Data Unit is signaled
    in the preceding Parse Info Header.  The most\n   important types are the Sequence
    Header, which contains configuration\n   data needed by the decoder, and several
    types of Coded Picture, which\n   contain the coded data for the pictures themselves.
    \ Each picture\n   represents a frame in a progressively scanned video Sequence
    or a\n   field in an interlaced video Sequence.\n   The first Data Unit in a Sequence
    as produced by an encoder is always\n   a Sequence Header; however, Sequences
    can be joined in the middle, so\n   it should not be assumed that the first Data
    Unit received will\n   always be a Sequence Header.\n   The High Quality (HQ)
    profile for VC-2 restricts the types of Parse\n   Info Headers that may appear
    in the Sequence (and hence also the\n   types of Data Unit) to only:\n   o  Sequence
    Headers (which are always followed by a Data Unit),\n   o  High Quality Pictures
    (which are always followed by a Data Unit),\n   o  High Quality Fragments (which
    are always followed by a Data Unit),\n   o  Auxiliary Data (which are always followed
    by a Data Unit),\n   o  Padding Data (which are always followed by a Data Unit),
    and\n   o  End of Sequence (which are never followed by a Data Unit).\n   At the
    time of writing, there is no definition for the use of\n   Auxiliary Data in VC-2,
    and Padding Data is required to be ignored by\n   all receivers.\n   Each High
    Quality Picture Data Unit contains a set of parameters for\n   the picture followed
    by a series of Coded Slices, each representing a\n   rectangular region of the
    transformed picture.  Slices within a\n   picture may vary in coded length, but
    all represent the same shape\n   and size of rectangle in the picture.\n   Each
    High Quality Fragment Data Unit contains either a set of\n   parameters for a
    picture or a series of Coded Slices.  Fragments\n   carry the same data as pictures,
    but broken up into smaller units to\n   facilitate transmission via packet-based
    protocols such as RTP.\n   This payload format only makes use of Fragments, not
    pictures.\n"
  title: 3.  Media Format Description
- contents:
  - "4.  Payload Format\n   In this specification, each RTP packet is used to carry
    data\n   corresponding to a single Parse Info Header and its following Data\n
    \  Unit (if it has one).  A single packet MAY NOT contain data from more\n   than
    one Parse Info Header or Data Unit.  A single Parse Info Header\n   and Data Unit
    pair MUST NOT be split across more than one packet.\n   The sole exception to
    this rule is that an Auxiliary Data Unit MAY be\n   split between multiple packets,
    using the B and E flags to indicate\n   start and end.\n   This specification
    only covers the transport of Sequence Headers\n   (together with their accompanying
    Data Unit), High Quality Fragments\n   (together with their accompanying Data
    Unit), Auxiliary Data\n   (together with their accompanying Data Unit), and (optionally)
    End\n   Sequence Headers and Padding Data (for which no Data Unit it\n   carried).\n
    \  High Quality Pictures can be transported by converting them into an\n   equivalent
    set of High Quality Fragments.  The size of Fragments\n   should be chosen so
    as to fit within the MTU of the network in use.\n   For this reason, this document
    defines six types of RTP packets in a\n   VC-2 media stream:\n   o  a VC-2 Sequence
    Header (Figure 1) (see Section 11 of the VC-2\n      specification [VC2]),\n   o
    \ a Picture Fragment containing the VC-2 Transform Parameters for a\n      Picture
    (Figure 2) (see Section 14 of the VC-2 specification\n      [VC2]),\n   o  a Picture
    Fragment containing VC-2 Coded Slices (Figure 3) for a\n      picture (see Section
    14 of the VC-2 specification [VC2]),\n   o  the end of a VC-2 Sequence (Figure
    4) (see Section 10.5.2 of the\n      VC-2 specification [VC2]),\n   o  the contents
    of an Auxiliary Data Unit (Figure 5) (see\n      Section 10.4.4 of the VC-2 specification
    [VC2]), and\n   o  an indication of the presence of a padding Data Unit (Figure
    6)\n      (see Section 10.4.5 of the VC-2 specification [VC2]).\n   These six
    packet types can be distinguished by the fact that they use\n   different codes
    in the Parse Code (\"PC\") field, except for the two\n   types of Picture Fragment
    that use the same value in PC but have\n   different values in the \"No. of Slices\"
    field.\n   The options for PC codes are explained in more detail in Section 4.3.\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | V |P|X|   CC  |M|    PT       |       Sequence Number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |            contributing source (CSRC) identifiers             |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                 Optional Extension Header                     |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |   Extended Sequence Number    |    Reserved   |   PC = 0x00   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  .                                                               .\n   .               Variable-Length
    Coded Sequence Header           .\n   .                                                               .\n
    \  +---------------------------------------------------------------+\n             Figure
    1: RTP Payload Format for Sequence Header\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | V |P|X|   CC  |M|    PT       |       Sequence Number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |            contributing source (CSRC) identifiers             |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                 Optional Extension Header                     |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |   Extended Sequence Number    |  Reserved |I|F|   PC = 0xEC   |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                       Picture Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  |       Slice Prefix Bytes      |        Slice Size Scaler      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  |       Fragment Length         |         No. of Slices = 0     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  .                                                               .\n   .         Variable-Length
    Coded Transform Parameters            .\n   .                                                               .\n
    \  +---------------------------------------------------------------+\n      Figure
    2: RTP Payload Format for Transform Parameters Fragment\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | V |P|X|   CC  |M|    PT       |       Sequence Number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |            contributing source (CSRC) identifiers             |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                 Optional Extension Header                     |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |   Extended Sequence Number    |  Reserved |I|F|   PC = 0xEC   |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                       Picture Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  |       Slice Prefix Bytes      |        Slice Size Scaler      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  |       Fragment Length         |          No. of Slices        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  |        Slice Offset X         |         Slice Offset Y        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
    \  .                                                               .\n   .                          Coded
    Slices                         .\n   .                                                               .\n
    \  +---------------------------------------------------------------+\n        Figure
    3: RTP Payload Format for Fragment Containing Slices\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | V |P|X|   CC  |M|    PT       |       Sequence Number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |            contributing source (CSRC) identifiers             |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                 Optional Extension Header                     |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |   Extended Sequence Number    |    Reserved   |   PC = 0x10   |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \            Figure 4: RTP Payload Format for End of Sequence\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | V |P|X|   CC  |M|    PT       |       Sequence Number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |            contributing source (CSRC) identifiers             |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                 Optional Extension Header                     |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |   Extended Sequence Number    |B|E|  Reserved |   PC = 0x20   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Data Length                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  .                                                               .\n   .                      Uncoded
    Payload Data                     .\n   .                                                               .\n
    \  +---------------------------------------------------------------+\n              Figure
    5: RTP Payload Format for Auxiliary Data\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | V |P|X|   CC  |M|    PT       |       Sequence Number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |            contributing source (CSRC) identifiers             |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                 Optional Extension Header                     |\n   |                             ....
    \                             |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |   Extended Sequence Number    |B|E|  Reserved |   PC = 0x30   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                           Data Length                         |\n   +---------------------------------------------------------------+\n
    \              Figure 6: RTP Payload Format for Padding Data\n   All fields in
    the headers longer than a single bit are interpreted as\n   unsigned integers
    in network byte order.\n"
  - contents:
    - "4.1.  RTP Header Usage\n   The fields of the RTP header have the following
      additional notes on\n   their usage:\n   Marker Bit (M): 1 bit.  The marker
      bit MUST be set on any packet that\n         contains the final slice in a coded
      picture and MUST NOT be set\n         otherwise.\n   Payload Type (PT): 7 bits.
      \ A dynamically allocated payload type\n         field that designates the payload
      as VC-2-coded video.\n   Sequence Number: 16 bits.  Because the data rate of
      VC-2-coded\n         Streams can often be very high, in the order of gigabits
      rather\n         than megabits per second, the standard 16-bit RTP sequence\n
      \        number can cycle very quickly.  For this reason, the sequence\n         number
      is extended to 32 bits, and this field MUST hold the\n         low-order 16
      bits of this value.\n   Timestamp: 32 bits.  If the packet contains Transform
      Parameters or\n         Coded Slice data for a coded picture, then the timestamp\n
      \        corresponds to the sampling instant of the coded picture.  A\n         90kHz
      clock SHOULD be used.  A single RTP packet MUST NOT\n         contain coded
      data for more than one coded picture, so there is\n         no ambiguity here.\n
      \        A Sequence Header packet SHOULD have the same timestamp as the\n         picture
      that will follow it in the Stream.  An End of Sequence\n         packet SHOULD
      have the same timestamp as the previous picture\n         that appeared in the
      Stream.\n   The remaining RTP header fields are used as specified in RTP\n   [RFC3550].\n"
    title: 4.1.  RTP Header Usage
  - contents:
    - "4.2.  Payload Header\n   The fields of the extended headers are defined as
      follows:\n   Extended Sequence Number: 16 bits.  MUST contain the high-order
      16\n         bits of the 32-bit packet sequence number.  This is needed\n         since
      the high data rates of VC-2 Sequences mean that it is\n         highly likely
      that the 16-bit sequence number will roll over\n         too frequently to be
      of use for Stream synchronization.\n   B: 1 bit.  MUST be set to 1 if the packet
      contains the first byte of\n         an Auxiliary Data Unit and otherwise MUST
      be 0.  If the\n         recommendations in Section 4.4 (\"Stream Constraints\")
      are\n         followed, then every Auxiliary Data Unit will be small enough\n
      \        to fit in a single packet, and so this bit (where present) will\n         always
      be 1.\n   E: 1 bit.  MUST be set to 1 if the packet contains the final byte
      of\n         an Auxiliary Data Unit and otherwise MUST be 0.  If the\n         recommendations
      in Section 4.4 (\"Stream Constraints\") are\n         followed, then every Auxiliary
      Data Unit will be small enough\n         to fit in a single packet, and so this
      bit (where present) will\n         always be 1.\n   I: 1 bit.  MUST be set to
      1 if the packet contains coded picture\n         parameters or slice data from
      a field in an interlaced frame.\n         MUST be set to 0 if the packet contains
      data from any part of a\n         progressive frame.\n   F: 1 bit.  MUST be
      set to 1 if the packet contains coded picture\n         parameters or slice
      data from the second field of an interlaced\n         frame.  MUST be set to
      0 if the packet contains data from the\n         first field of an interlaced
      frame or any part of a progressive\n         frame.\n   Parse Code (PC): 8 bits.
      \ Contains a Parse Code that MUST be the\n         value indicated for the type
      of data in the packet.\n   Data Length: 32 bits.  For an auxiliary Data Unit,
      this contains the\n         number of bytes of data contained in the payload
      section of\n         this packet.  If the recommendations in Section 4.4 (\"Stream\n
      \        Constraints\") are followed, then no Auxiliary Data Unit will be\n
      \        large enough to cause a packet to exceed the MTU of the\n         network.\n
      \  Picture Number: 32 bits.  MUST contain the Picture Number for the\n         coded
      picture this packet contains data for, as described in\n         Section 12.1
      of the VC-2 specification [VC2].\n         The sender MUST send at least one
      transform-parameters packet\n         for each coded picture and MAY include
      more than one as long as\n         they contain identical data.  The sender
      MUST NOT send a packet\n         from a new picture until all the coded data
      from the current\n         picture has been sent.\n         If the receiver
      receives Coded Slices packets for a picture but\n         does not receive a
      Transform Parameters packet for that\n         picture, then this is an indication
      of either packet loss,\n         joining a Stream mid-picture, or a non-compliant
      transmitter.\n         In this case, the receiver MAY assume that the parameters
      are\n         unchanged since the last picture, or it MAY discard the\n         picture.
      \ Choosing between these two options is left up to the\n         implementation
      as it will be dependent on intended use.  The\n         former may result in
      malformed pictures, while the latter will\n         result in dropped frames.\n
      \  Slice Prefix Bytes: 16 bits.  MUST contain the Slice Prefix Bytes\n         value
      for the coded picture this packet contains data for, as\n         described
      in Section 12.3.4 of the VC-2 specification [VC2].\n         In the VC-2 specification,
      this value is not restricted to 16\n         bits, but the constraints on Streams
      specified in this document\n         (Section 4.4) do require this.\n   Slice
      Size Scaler: 16 bits.  MUST contain the Slice Size Scaler value\n         for
      the coded picture this packet contains data for, as\n         described in Section
      12.3.4 of the VC-2 specification [VC2].\n         In the VC-2 specification,
      this value is not restricted to 16\n         bits, but the constraints on Streams
      specified in this document\n         (Section 4.4) do require this.\n   Fragment
      Length: 16 bits.  MUST contain the number of bytes of data\n         contained
      in the coded payload section of this packet.\n   No. of Slices: 16 bits.  MUST
      contain the number of Coded Slices\n         contained in this packet, which
      MUST be 0 for a packet\n         containing Transform Parameters.  In a packet
      containing Coded\n         Slices, this number MUST be the number of whole slices\n
      \        contained in the packet, and the packet MUST NOT contain any\n         partial
      slices.\n   Slice Offset X: 16 bits.  MUST contain the X coordinate of the first\n
      \        slice in this packet, in slices, starting from the top left\n         corner
      of the picture.\n   Slice Offset Y: 16 bits.  MUST contain the Y coordinate
      of the first\n         slice in this packet, in slices, starting from the top
      left\n         corner of the picture.\n"
    title: 4.2.  Payload Header
  - contents:
    - "4.3.  The Choice of Parse Codes (Informative)\n   The \"PC\" field in the packets
      is used to carry the Parse Code, which\n   identifies the type of content in
      the packet.  This code matches the\n   value of the Parse Code used to identify
      each Data Unit in a VC-2\n   Stream, as defined in the VC-2 specification, and
      each packet\n   contains the entire Data Unit.\n   Figure 7 lists all of the
      Parse Codes currently allowed in a VC-2\n   Sequence.  The final column indicates
      whether the code in question\n   can be present in a Stream transmitted using
      this specification.\n   +----------+-----------+---------------------+---------------+\n
      \  | PC (hex) | Binary    | Description         | Valid         |\n   +----------+-----------+---------------------+---------------+\n
      \  | 0x00     | 0000 0000 | Sequence Header     | Yes           |\n   | 0x10
      \    | 0001 0000 | End of Sequence     | Yes           |\n   | 0x20     | 0010
      0000 | Auxiliary Data      | Yes           |\n   | 0x30     | 0011 0000 | Padding
      Data        | Yes           |\n   +----------+-----------+---------------------+---------------+\n
      \  | 0xC8     | 1100 1000 | LD Picture          | No            |\n   | 0xE8
      \    | 1110 1000 | HQ Picture          | No            |\n   | 0xEC     | 1110
      1100 | HQ Picture Fragment | Yes           |\n   +----------+-----------+---------------------+---------------+\n
      \                   Figure 7: Parse Codes and Meanings\n"
    title: 4.3.  The Choice of Parse Codes (Informative)
  - contents:
    - "4.4.  Stream Constraints\n   A Sequence needs to conform to certain constraints
      in order to be\n   transmissible with this specification.\n   o  The Sequence
      MUST NOT contain Parse Info Headers with a Parse Code\n      other than 0x00
      (Sequence Header), 0x10 (End of Sequence), 0x20\n      (Auxiliary Data), 0x30
      (Padding Data), or 0xEC (High Quality\n      Picture Fragment).  Some other
      Streams MAY be convertible to meet\n      this restriction (see below).\n   o
      \ Every High Quality Picture Fragment MUST be no longer than 65535\n      bytes.
      \ This can usually be ensured by splitting large Fragments\n      into several
      smaller Fragments, except in the case where an\n      individual slice is too
      large, in which case see the notes below\n      on conversion.\n   o  Informative
      note: this requirement ensures that every High Quality\n      Picture Fragment
      will always contain no more than 65535 slices.\n   o  Every High Quality Picture
      Fragment SHOULD be small enough that\n      the RTP packet carrying it will
      fit within the network MTU size.\n      This can usually be ensured by splitting
      large Fragments into\n      several smaller Fragments, except in the case where
      an individual\n      slice is too large, in which case see the notes below on\n
      \     conversion.\n   o  Every High Quality Picture Fragment MUST be encoded
      using values\n      for Slice Prefix Bytes and Slice Size Scaler no greater
      than\n      65535.\n   If a Sequence intended for transmission does not conform
      to these\n   restrictions, then it MAY be possible to simply convert it into
      a\n   form that does by splitting pictures and/or large Fragments into\n   suitably
      sized Fragments.  This can be done provided that the\n   following (weaker)
      constraints are met:\n   o  The Sequence does not contain Parse Info Headers
      with a Parse Code\n      other than 0x00 (Sequence Header), 0x10 (End of Sequence),
      0x20\n      (Auxiliary Data), 0x30 (Padding Data), 0xE8 (High Quality\n      Picture),
      or 0xEC (High Quality Picture Fragment).\n   o  None of the High Quality Pictures
      or High Quality Picture\n      Fragments contain slices that are individually
      longer than 65535\n      bytes.  Note: When this is the case, the values of
      Slice Prefix\n      Bytes and Slice Size Scaler will necessarily also be smaller
      than\n      65535.\n   o  None of the High Quality Pictures or High Quality
      Picture\n      Fragments contain slices that are individually so large that
      an\n      RTP packet carrying a Fragment containing that single slice will\n
      \     fit within the network MTU size.\n   It is not possible to send a Stream
      that does not meet the above\n   requirements via this mechanism unless the
      Stream is re-encoded by a\n   VC-2 Encoder so as to meet them.\n   In addition,
      every Auxiliary Data Unit SHOULD be small enough that a\n   single RTP packet
      carrying it will fit within the network MTU size.\n   Since there is currently
      no specification for the format of Auxiliary\n   Data in VC-2, the mechanism
      for ensuring this with an encoder\n   implementation that includes Auxiliary
      Data Units will be dependent\n   upon the implementation's use for them.\n   When
      encoding VC-2 video intended to be transported via RTP, a VC-2\n   profile and
      level that ensures these requirements are met SHOULD be\n   used.\n"
    title: 4.4.  Stream Constraints
  - contents:
    - "4.5.  Payload Data\n   For the Sequence Header packet type (PC = 0x00), the
      payload data\n   MUST be the coded Sequence Header exactly as it appears in
      the VC-2\n   Sequence.\n   For the Transform Parameters packet type (PC = 0xEC
      and No. of Slices\n   = 0), the payload data MUST be the variable-length coded
      Transform\n   Parameters.  This MUST NOT include the Fragment header (since
      all\n   data in the picture header is already included in the packet header).\n
      \  For the Auxiliary Data packet type (PC = 0x20), the payload data MUST\n   be
      a portion of the auxiliary data bytes contained in the Auxiliary\n   Data Unit
      being transmitted.  The B flag MUST be set on the packet\n   that contains the
      first byte, the E flag MUST be set on the packet\n   that contains the last
      byte, the bytes MUST be included in order, and\n   the packets MUST have contiguous
      sequence numbers.\n   For the Picture Fragment packet type (PC = 0xEC and No.
      of Slices >\n   0), the payload data MUST be a specified number of Coded Slices
      in\n   the same order that they appear in the VC-2 Stream.  Which slices\n   appear
      in the packet is identified using the Slice Offset X and Slice\n   Offset Y
      fields in the payload header.\n   For the End of Sequence packet type (PC =
      0x10), there is no payload\n   data.\n"
    - contents:
      - "4.5.1.  Reassembling the Data\n     0                   1                   2
        \                  3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
        5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |      0x42     |      0x42     |      0x43     |      0x44     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Parse Code   |                       Next Parse Offset\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                  |                       Prev Parse Offset\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                  |\n   +-+-+-+-+-+-+-+-+\n                     Figure 8:
        VC-2 Parse Info Header\n   To reassemble the data in the RTP packets into
        a valid VC-2 Sequence:\n   o  The receiver SHOULD take the data from each
        packet with a Parse\n      Code of 0x00 and prepend a valid VC-2 Parse Info
        Header (Figure 8)\n      with the same Parse Code (0x00).  The resulting Sequence
        Header\n      Parse Info Header and Data Unit MUST be included in the output\n
        \     stream before any coded pictures that followed the packet being\n      processed
        in the RTP stream, unless an identical Sequence Header\n      has already
        been included, and they MAY be repeated (with\n      appropriate modifications
        to the next and previous header offsets)\n      at any point that results
        in a valid VC-2 Stream.\n   o  The receiver SHOULD take the data from each
        packet with a Parse\n      Code of 0xEC and No. of Slices set to 0 (which
        together indicate\n      that this packet contains the Transform Parameters
        for a coded\n      picture) and prepend with the same Parse Code a valid VC-2
        Parse\n      Info Header (Figure 8) followed by the picture number, Fragment\n
        \     data length, and slice count (0).\n   o  The receiver SHOULD take the
        data from each packet with a Parse\n      Code of 0xEC and No. of Slices not
        set to 0 (which together\n      indicate that this packet contains Coded Slices)
        and prepend with\n      the same Parse Code a valid VC-2 Parse Info Header
        (Figure 8)\n      followed by the picture number, Fragment data length, slice
        count,\n      x offset and y offset taken from the packet header.\n   o  A
        receiver MAY combine all Fragment Data Units (with Parse Code\n      0xEC)
        and the same picture number into a single picture Data Unit\n      with Parse
        Code 0xE8.  If the Stream is required to comply with\n      major versions
        1 or 2 of the VC-2 specification, then this MUST be\n      done.\n   o  The
        receiver SHOULD take the data from each packet with a Parse\n      Code of
        0x20 and the B bit set and prepend a valid VC-2 Parse Info\n      Header (Figure
        8) with the Parse Code 0x20, and then take each\n      subsequent packet with
        Parse Code 0x20 without the B bit set and\n      append its payload to the
        growing Data Unit.  When all packets for\n      a particular Data Unit have
        been received, it SHOULD be included\n      in the output stream.  The final
        packet for a Data Unit will have\n      the E bit set.\n   o  Once a Data
        Unit has been assembled, whether a Sequence Header,\n      Coded Picture Fragment,
        Coded Picture, or Auxiliary Data Unit, the\n      next parse offset and previous
        parse offset values in its Parse\n      Info Header SHOULD be filled with
        the offset between the start of\n      the header and the start of the next
        or previous header.\n   o  An End of Sequence Parse Info Header MAY be inserted
        when a packet\n      with Parse Code set to 0x10 is encountered, or at any
        other time\n      that is allowed in a valid VC-2 Stream.  After an End of
        Sequence\n      Parse Info Header is included in the output stream, either
        the\n      Stream must end, or it MUST be followed by a Sequence Header\n
        \     indicating the start of a new Sequence.  The next parse offset of\n
        \     the End of Sequence header MUST be set to 0, and the previous\n      parse
        offset SHOULD be filled with the offset from the start of\n      the previous
        Parse Info Header in the Stream.\n   o  A Padding Data Parse Info Header MAY
        be inserted when a packet\n      with Parse Code set to 0x30 and the B bit
        set is encountered, or\n      at any other time that is allowed in a valid
        VC-2 Stream.  The\n      length of the accompanying Data Unit MAY have any
        value, and its\n      contents MUST be set to a series of zero bytes.  The
        next parse\n      offset and previous parse offset values in its Parse Info
        Header\n      SHOULD be filled with the offset between the start of the header\n
        \     and the start of the next or previous header.\n"
      title: 4.5.1.  Reassembling the Data
    title: 4.5.  Payload Data
  title: 4.  Payload Format
- contents:
  - "5.  Forward Error Correction (FEC) Considerations\n   VC-2 provides no underlying
    protection against data loss, so it may\n   be useful to employ Forward Error
    Correction to the Stream.  A\n   mechanism for doing this to a generic RTP stream
    is specified in RFC\n   5109 [RFC5109].  If making use of this mechanism to provide\n
    \  multilevel protection, then the packets SHOULD be assigned to layers\n   based
    upon their packet type, with the packet types being, in order\n   of importance:\n
    \  1.  Sequence Headers\n   2.  Fragments containing Transform Parameters\n   3.
    \ Fragments containing Coded Slices\n   4.  Auxiliary Data and end of Sequence\n
    \  5.  Padding\n   It is RECOMMENDED that if multilevel protection is to be used,
    then\n   one layer will protect all Sequence Header packets, and a second will\n
    \  protect Sequence Headers and all Fragments.  If desired, a third\n   layer
    MAY protect Auxiliary Data and End of Sequence packets.\n   Padding data SHOULD
    NOT be protected by FEC.\n"
  title: 5.  Forward Error Correction (FEC) Considerations
- contents:
  - "6.  Congestion Control Considerations\n   Congestion control for RTP SHALL be
    used in accordance with RFC 3550\n   [RFC3550] and any applicable RTP profile
    -- e.g., RFC 3551 [RFC3551].\n   An additional requirement if best-effort service
    is being used is:\n   users of this payload format MUST monitor packet loss to
    ensure that\n   the packet loss rate is within acceptable parameters.  Circuit\n
    \  Breakers [RFC8083] are an update to RTP [RFC3550] that defines\n   criteria
    for when one is required to stop sending RTP Packet Streams,\n   and applications
    implementing this standard MUST comply with it.  RFC\n   8085 [RFC8085] provides
    additional information on the best practices\n   for applying congestion control
    to UDP streams.\n   In particular, it should be noted that the expected data rate
    for RTP\n   sessions that use this profile is likely to be in the range of\n   gigabits
    per second.  If used on a closed network that has been\n   correctly provisioned
    for the expected data rates, this might not\n   pose a problem, but there is always
    the risk of data getting out onto\n   the open internet.\n"
  title: 6.  Congestion Control Considerations
- contents:
  - "7.  Payload Format Parameters\n   This RTP payload format is identified using
    the 'video/vc2' media\n   type, which is registered in accordance with RFC 4855
    [RFC4855],\n   using the template of RFC 6838 [RFC6838].\n"
  - contents:
    - "7.1.  Media Type Definition\n   Type name:\n      video\n   Subtype name:\n
      \     vc2\n   Required parameters:\n      rate: The RTP timestamp clock rate.
      \ Applications using this\n      payload format SHOULD use a value of 90000.\n
      \     profile: The VC-2 profile in use.  The only value currently\n      allowed
      is \"HQ\".\n   Optional parameters:\n      version: the VC-2 specification version
      in use.  The only\n      currently allowed value is \"3\" since all Sequences
      transported\n      using this mechanism will contain HQ Picture Fragment Data
      Units,\n      which the VC-2 specification [VC2] defines as requiring version
      3.\n      level: The VC-2 level in use.  Any integer may be used.\n   Encoding
      considerations:\n      This media type is framed and binary; see Section 4.8
      in RFC 6838\n      [RFC6838].\n   Security considerations:\n      Please see
      the security considerations in RFC 8450.\n   Interoperability considerations:
      N/A\n   Published specification:\n      RFC 8450\n   Applications that use this
      media type:\n      Video Communication.\n   Fragment identifier considerations:
      N/A\n   Additional information: N/A\n   Person & email address to contact for
      further information:\n      James P. Weaver <james.barrett@bbc.co.uk>\n   Intended
      usage:\n      COMMON\n   Restrictions on usage:\n      This media type depends
      on RTP framing and hence is only defined\n      for transfer via RTP [RFC3550].
      \ Transport within other framing\n      protocols is not defined at this time.\n
      \  Author:\n      James P. Weaver <james.barrett@bbc.co.uk>\n   Change controller:\n
      \     IETF PAYLOAD Working Group delegated from the IESG.\n   Provisional registration?
      (standards tree only):\n      No\n"
    title: 7.1.  Media Type Definition
  - contents:
    - "7.2.  Mapping to the Session Description Protocol (SDP)\n   The mapping of
      the above-defined payload format media type and its\n   parameters SHALL be
      done according to Section 3 of RFC 4855\n   [RFC4855].\n   o  The type name
      (\"video\") goes in SDP \"m=\" as the media name.\n   o  The subtype name (\"vc2\")
      goes in SDP \"a=rtpmap\" as the encoding\n      name, followed by a slash (\"/\")
      and the rate parameter.\n   o  The required parameter profile and the optional
      parameters version\n      and level, when present, are included in the \"a=fmtp\"
      attribute\n      line of SDP as a semicolon-separated list of parameter=value\n
      \     pairs.\n   Version and level SHALL be specified in decimal when present.\n
      \  For example, a sample SDP mapping for VC-2 could be as follows:\n             m=video
      30000 RTP/AVP 112\n             a=rtpmap:112 vc2/90000\n             a=fmtp:112
      profile=HQ;version=3;level=0\n   In this example, a dynamic payload type 112
      is used for vc-2 data.\n   The 90 kHz RTP timestamp rate is specified in the
      \"a=rtpmap\" line\n   after the subtype.  In the \"a=fmtp:\" line, profile HQ,
      version 3, and\n   level 0 (unknown or non-standard level) are specified.\n"
    title: 7.2.  Mapping to the Session Description Protocol (SDP)
  - contents:
    - "7.3.  Offer/Answer Considerations\n   All parameters are declarative.\n"
    title: 7.3.  Offer/Answer Considerations
  title: 7.  Payload Format Parameters
- contents:
  - "8.  IANA Considerations\n   IANA has registered 'video/vc2' as specified in Section
    7.1.  The\n   media type has been added to the IANA registry for \"RTP Payload\n
    \  Format Media Types\"\n   <https://www.iana.org/assignments/rtp-parameters>.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [RFC3550] and any applicable RTP profile such as\n
    \  RTP/AVP [RFC3551], RTP/AVPF [RFC4585], RTP/SAVP [RFC3711], or\n   RTP/SAVPF
    [RFC5124].  However, as \"Securing the RTP Framework: Why\n   RTP Does Not Mandate
    a Single Media Security Solution\" [RFC7202]\n   discusses, it is not an RTP payload
    format's responsibility to\n   discuss or mandate what solutions are used to meet
    the basic security\n   goals like confidentiality, integrity, and source authenticity
    for\n   RTP in general.  This responsibility lies with anyone using RTP in an\n
    \  application.  They can find guidance on available security mechanisms\n   and
    important considerations in \"Options for Securing RTP Sessions\"\n   [RFC7201].
    \ Applications SHOULD use one or more appropriate strong\n   security mechanisms.
    \ The rest of this section discusses the\n   security-impacting properties of
    the payload format itself.\n   This RTP payload format and its media decoder do
    not exhibit any\n   significant non-uniformity in the receiver-side computational\n
    \  complexity for packet processing and thus are unlikely to pose a\n   denial-of-service
    threat due to the receipt of pathological data.\n   Nor does the RTP payload format
    contain any active content.\n   To avoid buffer overruns when processing these
    packets, the receiver\n   MUST consider both the reported Fragment length and
    the actual\n   received size of a packet containing slice data.\n   In some cases,
    the transmitter may need to decode variable-length\n   coded headers in order
    to extract some data from the VC-2 bitstream\n   before assembling packets.  This
    process is potentially subject to\n   buffer overruns if not implemented carefully.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n
      \  [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n              Video
      Conferences with Minimal Control\", STD 65, RFC 3551,\n              DOI 10.17487/RFC3551,
      July 2003,\n              <https://www.rfc-editor.org/info/rfc3551>.\n   [RFC4855]
      \ Casner, S., \"Media Type Registration of RTP Payload\n              Formats\",
      RFC 4855, DOI 10.17487/RFC4855, February 2007,\n              <https://www.rfc-editor.org/info/rfc4855>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC8083]
      \ Perkins, C. and V. Singh, \"Multimedia Congestion Control:\n              Circuit
      Breakers for Unicast RTP Sessions\", RFC 8083,\n              DOI 10.17487/RFC8083,
      March 2017,\n              <https://www.rfc-editor.org/info/rfc8083>.\n   [RFC8085]
      \ Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n              Guidelines\",
      BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n              March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [VC2]      SMPTE, \"SMPTE Standard
      - VC-2 Video Compression\",\n              ST 2042-1:2017, DOI 10.5594/SMPTE.ST2042-1.2017,
      June\n              2017, <https://ieeexplore.ieee.org/servlet/\n              opac?punumber=7967894>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC3711]  Baugher, M., McGrew, D., Naslund,
      M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time Transport
      Protocol (SRTP)\",\n              RFC 3711, DOI 10.17487/RFC3711, March 2004,\n
      \             <https://www.rfc-editor.org/info/rfc3711>.\n   [RFC4585]  Ott,
      J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended
      RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based
      Feedback (RTP/AVPF)\", RFC 4585,\n              DOI 10.17487/RFC4585, July 2006,\n
      \             <https://www.rfc-editor.org/info/rfc4585>.\n   [RFC5109]  Li,
      A., Ed., \"RTP Payload Format for Generic Forward Error\n              Correction\",
      RFC 5109, DOI 10.17487/RFC5109, December\n              2007, <https://www.rfc-editor.org/info/rfc5109>.\n
      \  [RFC5124]  Ott, J. and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time
      Transport Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\",
      RFC 5124, DOI 10.17487/RFC5124, February\n              2008, <https://www.rfc-editor.org/info/rfc5124>.\n
      \  [RFC7201]  Westerlund, M. and C. Perkins, \"Options for Securing RTP\n              Sessions\",
      RFC 7201, DOI 10.17487/RFC7201, April 2014,\n              <https://www.rfc-editor.org/info/rfc7201>.\n
      \  [RFC7202]  Perkins, C. and M. Westerlund, \"Securing the RTP\n              Framework:
      Why RTP Does Not Mandate a Single Media\n              Security Solution\",
      RFC 7202, DOI 10.17487/RFC7202, April\n              2014, <https://www.rfc-editor.org/info/rfc7202>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Author's Address\n   James P. Weaver\n   BBC\n   Email: james.barrett@bbc.co.uk\n"
  title: Author's Address
