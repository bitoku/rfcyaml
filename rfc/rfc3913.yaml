- title: __initial_text__
  contents:
  - "               Border Gateway Multicast Protocol (BGMP):\n                  \
    \       Protocol Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Border Gateway Multicast Protocol (BGMP),\n\
    \   a protocol for inter-domain multicast routing.  BGMP builds shared\n   trees\
    \ for active multicast groups, and optionally allows receiver\n   domains to build\
    \ source-specific, inter-domain, distribution branches\n   where needed.  BGMP\
    \ natively supports \"source-specific multicast\"\n   (SSM).  To also support\
    \ \"any-source multicast\" (ASM), BGMP requires\n   that each multicast group\
    \ be associated with a single root (in BGMP\n   it is referred to as the root\
    \ domain).  It requires that different\n   ranges of the multicast address space\
    \ are associated (e.g., with\n   Unicast-Prefix-Based Multicast addressing) with\
    \ different domains.\n   Each of these domains then becomes the root of the shared\
    \ domain-\n   trees for all groups in its range.  Multicast participants will\n\
    \   generally receive better multicast service if the session initiator's\n  \
    \ address allocator selects addresses from its own domain's part of the\n   space,\
    \ thereby causing the root domain to be local to at least one of\n   the session\
    \ participants.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Purpose. . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology. . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Protocol Overview. . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n       3.1.  Design Rationale . . . . . . . . . . . . . . . . .\
    \ . . .  7\n   4.  Protocol Details . . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n       4.1.  Interaction with the EGP . . . . . . . . . . . . . . .\
    \ .  8\n       4.2.  Multicast Data Packet Processing . . . . . . . . . . . .\
    \  9\n       4.3.  BGMP processing of Join and Prune messages and\n          \
    \   notifications. . . . . . . . . . . . . . . . . . . . . . 10\n            \
    \ 4.3.1.  Receiving Joins. . . . . . . . . . . . . . . . . 10\n             4.3.2.\
    \  Receiving Prune Notifications. . . . . . . . . . 11\n             4.3.3.  Receiving\
    \ Route Change Notifications . . . . . . 12\n             4.3.4.  Receiving (S,G)\
    \ Poison-Reverse messages. . . . . 12\n       4.4.  Interaction with M-IGP components.\
    \ . . . . . . . . . . . 13\n             4.4.1.  Interaction with DVMRP and PIM-DM.\
    \ . . . . . . . 14\n             4.4.2.  Interaction with PIM-SM. . . . . . .\
    \ . . . . . . 15\n             4.4.3.  Interaction with CBT . . . . . . . . .\
    \ . . . . . 16\n             4.4.4.  Interaction with MOSPF . . . . . . . . .\
    \ . . . . 17\n       4.5.  Operation over Multi-access Networks . . . . . . .\
    \ . . . 17\n       4.6.  Interaction between (S,G) state and G-routes . . . .\
    \ . . 18\n   5.  Message Formats. . . . . . . . . . . . . . . . . . . . . . .\
    \ . 18\n       5.1.  Message Header Format. . . . . . . . . . . . . . . . . .\
    \ 19\n       5.2.  OPEN Message Format. . . . . . . . . . . . . . . . . . . 19\n\
    \       5.3.  UPDATE Message Format. . . . . . . . . . . . . . . . . . 23\n  \
    \     5.4.  Encoding examples. . . . . . . . . . . . . . . . . . . . 27\n    \
    \   5.5.  KEEPALIVE Message Format . . . . . . . . . . . . . . . . 27\n      \
    \ 5.6.  NOTIFICATION Message Format. . . . . . . . . . . . . . . 28\n   6.  BGMP\
    \ Error Handling. . . . . . . . . . . . . . . . . . . . . . 30\n       6.1.  Message\
    \ Header error handling. . . . . . . . . . . . . . 30\n       6.2.  OPEN message\
    \ error handling. . . . . . . . . . . . . . . 30\n       6.3.  UPDATE message\
    \ error handling. . . . . . . . . . . . . . 31\n       6.4.  NOTIFICATION message\
    \ error handling. . . . . . . . . . . 32\n       6.5.  Hold Timer Expired error\
    \ handling. . . . . . . . . . . . 32\n       6.6.  Finite State Machine error\
    \ handling. . . . . . . . . . . 32\n       6.7.  Cease. . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 32\n       6.8.  Connection collision detection\
    \ . . . . . . . . . . . . . 32\n   7.  BGMP Version Negotiation . . . . . . .\
    \ . . . . . . . . . . . . 33\n       7.1.  BGMP Capability Negotiation. . . .\
    \ . . . . . . . . . . . 34\n   8.  BGMP Finite State machine. . . . . . . . .\
    \ . . . . . . . . . . 34\n   9.  Security Considerations. . . . . . . . . . .\
    \ . . . . . . . . . 38\n   10. Acknowledgements . . . . . . . . . . . . . . .\
    \ . . . . . . . . 39\n   11. References . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 39\n       11.1. Normative References . . . . . . . . . . . .\
    \ . . . . . . 39\n       11.2. Informative References . . . . . . . . . . . .\
    \ . . . . . 40\n   Author's Address . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 40\n   Full Copyright Statement . . . . . . . . . . . . . . . . . .\
    \ . . . 41\n"
- title: 1.  Purpose
  contents:
  - "1.  Purpose\n   It has been suggested that inter-domain \"any-source\" multicast\
    \ is\n   better supported with a rendezvous mechanism whereby members receive\n\
    \   sources' data packets without any sort of global broadcast (e.g.,\n   MSDP\
    \ broadcasts source information, PIM-DM [PIMDM] and DVMRP [DVMRP]\n   broadcast\
    \ initial data packets, and MOSPF [MOSPF] broadcasts\n   membership information).\
    \  PIM-SM [PIMSM] and CBT [CBT] use a shared\n   group-tree, to which all members\
    \ join and thereby hear from all\n   sources (and to which non-members do not\
    \ join and thereby hear from\n   no sources).\n   This document describes BGMP,\
    \ a protocol for inter-domain multicast\n   routing.  BGMP natively supports \"\
    source-specific multicast\" (SSM).\n   To also support \"any-source multicast\"\
    \ (ASM), BGMP builds shared\n   trees for active multicast groups, and allows\
    \ domains to build\n   source-specific, inter-domain, distribution branches where\
    \ needed.\n   Building upon concepts from PIM-SM and CBT, BGMP requires that each\n\
    \   global multicast group be associated with a single root.  However, in\n  \
    \ BGMP, the root is an entire exchange or domain, rather than a single\n   router.\n\
    \   For non-source-specific groups, BGMP assumes that ranges of the\n   multicast\
    \ address space have been associated (e.g., with Unicast-\n   Prefix-Based Multicast\
    \ [V4PREFIX,V6PREFIX] addressing) with selected\n   domains.  Each such domain\
    \ then becomes the root of the shared\n   domain-trees for all groups in its range.\
    \  An address allocator will\n   generally achieve better distribution trees if\
    \ it takes its multicast\n   addresses from its own domain's part of the space,\
    \ thereby causing\n   the root domain to be local.\n   BGMP uses TCP as its transport\
    \ protocol.  This eliminates the need to\n   implement message fragmentation,\
    \ retransmission, acknowledgement, and\n   sequencing.  BGMP uses TCP port 264\
    \ for establishing its connections.\n   This port is distinct from BGP's port\
    \ to provide protocol\n   independence, and to facilitate distinguishing between\
    \ protocol\n   packets (e.g., by packet classifiers, diagnostic utilities, etc.)\n\
    \   Two BGMP peers form a TCP connection between one another, and\n   exchange\
    \ messages to open and confirm the connection parameters.\n   They then send incremental\
    \ Join/Prune Updates as group memberships\n   change.  BGMP does not require periodic\
    \ refresh of individual\n   entries.  KeepAlive messages are sent periodically\
    \ to ensure the\n   liveness of the connection.  Notification messages are sent\
    \ in\n   response to errors or special conditions.  If a connection encounters\n\
    \   an error condition, a notification message is sent and the connection\n  \
    \ is closed if the error is a fatal one.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses the following technical terms:\n   Domain:\n\
    \      A set of one or more contiguous links and zero or more routers\n      surrounded\
    \ by one or more multicast border routers.  Note that\n      this loose definition\
    \ of domain also applies to an external link\n      between two domains, as well\
    \ as an exchange.\n   Root Domain:\n      When constructing a shared tree of domains\
    \ for some group, one\n      domain will be the \"root\" of the tree.  The root\
    \ domain receives\n      data from each sender to the group, and functions as\
    \ a rendezvous\n      domain toward which member domains can send inter-domain\
    \ joins,\n      and to which sender domains can send data.\n   Multicast RIB:\n\
    \      The Routing Information Base, or routing table, used to calculate\n   \
    \   the \"next-hop\" towards a particular address for multicast traffic.\n   Multicast\
    \ IGP (M-IGP):\n      A generic term for any multicast routing protocol used for\
    \ tree\n      construction within a domain.  Typical examples of M-IGPs are:\n\
    \      PIM-SM, PIM-DM, DVMRP, MOSPF, and CBT.\n   EGP: A generic term for the\
    \ interdomain unicast routing protocol in\n      use.\n      Typically, this will\
    \ be some version of BGP which can support a\n      Multicast RIB, such as MBGP\
    \ [MBGP], containing both unicast and\n      multicast address prefixes.\n   Component:\n\
    \      The portion of a border router associated with (and logically\n      inside)\
    \ a particular domain that runs the multicast IGP (M-IGP)\n      for that domain,\
    \ if any.  Each border router thus has zero or more\n      components inside routing\
    \ domains.  In addition, each border\n      router with external links that do\
    \ not fall inside any routing\n      domain will have an inter-domain component\
    \ that runs BGMP.\n   External peer:\n      A border router in another multicast\
    \ AS (autonomous system, as\n      used in BGP), to which a BGMP TCP-connection\
    \ is open.  If BGP is\n      being used as the EGP, a separate \"eBGP\" TCP-connection\
    \ will also\n      be open to the same peer.\n   Internal peer:\n      Another\
    \ border router of the same multicast AS.  If BGP is being\n      used as the\
    \ EGP, the border router either speaks iBGP (\"internal\"\n      BGP) directly\
    \ to internal peers in a full mesh, or indirectly\n      through a route reflector\
    \ [REFLECT].\n   Next-hop peer:\n      The next-hop peer towards a given IP address\
    \ is the next EGP\n      router on the path to the given address, according to\
    \ multicast\n      RIB routes in the EGP's routing table (e.g., in MBGP, routes\
    \ whose\n      Subsequent Address Family Identifier field indicates that the\n\
    \      route is valid for multicast traffic).\n   target:\n      Either an EGP\
    \ peer, or an M-IGP component.\n   Tree State Table:\n      This is a table of\
    \ (S-prefix,G) and (*,G-prefix) entries that have\n      been explicitly joined\
    \ by a set of targets.  Each entry has, in\n      addition to the source and group\
    \ addresses and masks, a list of\n      targets that have explicitly requested\
    \ data (on behalf of directly\n      connected hosts or downstream routers). \
    \ (S,G) entries also have\n      an \"SPT\" bit.\n   The key words \"MUST\", \"\
    MUST NOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in this document are to\
    \ be interpreted as described in [RFC2119].\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   BGMP maintains group-prefix state in response to messages\
    \ from BGMP\n   peers and notifications from M-IGP components.  Group-shared trees\n\
    \   are rooted at the domain advertising the group prefix covering those\n   groups.\
    \  When a receiver joins a specific group address, the border\n   router towards\
    \ the root domain generates a group-specific Join\n   message, which is then forwarded\
    \ Border-Router-by-Border-Router\n   towards the root domain (see Figure 1). \
    \ BGMP Join and Prune messages\n   are sent over TCP connections between BGMP\
    \ peers, and BGMP protocol\n   state is refreshed by KEEPALIVE messages periodically\
    \ sent over TCP.\n   BGMP routers build group-specific bidirectional forwarding\
    \ state as\n   they process the BGMP Join messages.  Bidirectional forwarding\
    \ state\n   means that packets received from any target are forwarded to all\n\
    \   other targets in the target list without any RPF checks.  No group-\n   specific\
    \ state or traffic exists in parts of the network where there\n   are no members\
    \ of that group.\n   BGMP routers optionally build source-specific unidirectional\n\
    \   forwarding state, only where needed, to be compatible with source-\n   specific\
    \ trees (SPTs) used by some M-IGPs (e.g., DVMRP, PIM-DM, or\n   PIM-SM), or to\
    \ construct trees for source-specific groups.  A domain\n   that uses an SPT-based\
    \ M-IGP may need to inject multicast packets\n   from external sources via different\
    \ border routers (to be compatible\n   with the M-IGP RPF checks) which thus act\
    \ as \"surrogates\".  For\n   example, in the Transit_1 domain, data from Src_A\
    \ arrives at BR12,\n   but must be injected by BR11.  A surrogate router may create\
    \ a\n   source-specific BGMP branch if no shared tree state exists.  Note:\n \
    \  stub domains with a single border router, such as Rcvr_Stub_7 in\n   Figure\
    \ 1, receive all multicast data packets through that router, to\n   which all\
    \ RPF checks point.  Therefore, stub domains never build\n   source-specific state.\n\
    \             Root_Domain\n              [BR91]--------------------------\\\n\
    \                 |                            |\n              [BR32]       \
    \                  [BR41]\n             Transit_3                     Transit_4\n\
    \              [BR31]                      [BR42] [BR43]\n                 | \
    \                         |      |\n              [BR22]                     \
    \ [BR52] [BR53]\n             Transit_2                     Transit_5\n      \
    \        [BR21]                         [BR51]\n                 |           \
    \                 |\n              [BR12]                         [BR61]\n   \
    \          Transit_1[BR11]----------[BR62]Stub_6\n              [BR13]       \
    \                 (Src_A)\n                 |                          (Rcvr_D)\n\
    \       -------------------\n       |                 |\n    [BR71]          \
    \    [BR81]\n   Rcvr_Stub_7       Src_only_Stub_8\n   (Rcvr_C)             (Src_B)\n\
    \   Figure 1: Example inter-domain topology.  [BRxy] represents a BGMP\n   border\
    \ router.  Transit_X is a transit domain network.  *_Stub_X is a\n   stub domain\
    \ network.\n   Data packets are forwarded based on a combination of BGMP and M-IGP\n\
    \   rules.  The router forwards to a set of targets according to a\n   matching\
    \ (S,G) BGMP tree state entry if it exists.  If not found, the\n   router checks\
    \ for a matching (*,G) BGMP tree state entry.  If neither\n   is found, then the\
    \ packet is sent natively to the next-hop EGP peer\n   for G, according to the\
    \ Multicast RIB (for example, in the case of a\n   non-member sender such as Src_B\
    \ in Figure 1).  If a matching entry\n   was found, the packet is forwarded to\
    \ all other targets in the target\n   list.  In this way BGMP trees forward data\
    \ in a bidirectional manner.\n   If a target is an M-IGP component then forwarding\
    \ is subject to the\n   rules of that M-IGP protocol.\n"
- title: 3.1.  Design Rationale
  contents:
  - "3.1.  Design Rationale\n   Several other protocols, or protocol proposals, build\
    \ shared trees\n   within domains [PIMSM, CBT].  The design choices made for BGMP\
    \ result\n   from our focus on Inter-Domain multicast in particular.  The design\n\
    \   choices made by PIM-SM and CBT are better suited to the wide-area\n   intra-domain\
    \ case.  There are three major differences between BGMP\n   and other shared-tree\
    \ protocols:\n   (1) Unidirectional vs. Bidirectional trees\n   Bidirectional\
    \ trees (using bidirectional forwarding state as\n   described above) minimize\
    \ third party dependence which is essential\n   in the inter-domain context. \
    \ For example, in Figure 1, stub domains\n   7 and 8 would like to exchange multicast\
    \ packets without being\n   dependent on the quality of connectivity of the root\
    \ domain.\n   However, unidirectional shared trees (i.e., those using RPF checks)\n\
    \   have more aggressive loop prevention and share the same processing\n   rules\
    \ as source-specific entries which are inherently unidirectional.\n   The lack\
    \ of third party dependence concerns in the INTRA domain case\n   reduces the\
    \ incentive to employ bidirectional trees.  BGMP supports\n   bidirectional trees\
    \ because it has to, and because it can without\n   excessive cost.\n   (2) Source-specific\
    \ distribution trees/branches\n   In a departure from other shared tree protocols,\
    \ source-specific BGMP\n   state is built ONLY where (a) it is needed to pull\
    \ the multicast\n   traffic down to a BGMP router that has source-specific (S,G)\
    \ state,\n   and (b) that router is NOT already on the shared tree (i.e., has\
    \ no\n   (*,G) state), and (c) that router does not want to receive packets\n\
    \   via encapsulation from a router which is on the shared tree.  BGMP\n   provides\
    \ source-specific branches because most M-IGP protocols in use\n   today build\
    \ source-specific trees.  BGMP's source-specific branches\n   eliminate the unnecessary\
    \ overhead of encapsulations for high data\n   rate sources from the shared tree's\
    \ ingress router to the surrogate\n   injector (e.g., from BR12 to BR11 in Figure\
    \ 1).  Moreover, cases in\n   which shared paths are significantly longer than\
    \ SPT paths will also\n   benefit.\n   However, except for source-specific group\
    \ distribution trees, we do\n   not build source-specific inter-domain trees in\
    \ general because (a)\n   inter-domain connectivity is generally less rich than\
    \ intra-domain\n   connectivity, so shared distribution trees should have more\n\
    \   acceptable path length and traffic concentration properties in the\n   inter-domain\
    \ context, than in the intra-domain case, and (b) by\n   having the shared tree\
    \ state always take precedence over source-\n   specific tree state, we avoid\
    \ ambiguities that can otherwise arise.\n   In summary, BGMP trees are, in a sense,\
    \ a hybrid between PIM-SM and\n   CBT trees.\n   (3) Method of choosing root of\
    \ group shared tree\n   The choice of a group's shared-tree-root has implications\
    \ for\n   performance and policy.  In the intra-domain case it is sometimes\n\
    \   assumed that all potential shared-tree roots (RPs/Cores) within the\n   domain\
    \ are equally suited to be the root for a group that is\n   initiated within that\
    \ domain.  In the INTER-domain case, there is far\n   more opportunity for unacceptably\
    \ poor locality, and administrative\n   control of a group's shared-tree root.\
    \  Therefore in the intra-domain\n   case, other protocols sometimes treat all\
    \ candidate roots (RPs or\n   Cores) as equivalent and emphasize load sharing\
    \ and stability to\n   maximize performance.  In the Inter-Domain case, all roots\
    \ are not\n   equivalent, and we adopt an approach whereby a group's root domain\
    \ is\n   not random but is subject to administrative control.\n"
- title: 4.  Protocol Details
  contents:
  - "4.  Protocol Details\n   In this section, we describe the detailed protocol that\
    \ border\n   routers perform.  We assume that each border router conforms to the\n\
    \   component-based model described in [INTEROP], modulo one correction\n   to\
    \ section 3.2 (\"BGMP\" Dispatcher), as follows:\n   The iif owner of a (*,G)\
    \ entry is the component owning the next-hop\n   interface towards the nominal\
    \ root of G, in the multicast RIB.\n"
- title: 4.1.  Interaction with the EGP
  contents:
  - "4.1.  Interaction with the EGP\n   The fundamental requirements imposed by BGMP\
    \ are that:\n   (1)   For a given source-specific group and source, BGMP must\
    \ be able\n         to look up the next-hop towards the source in the Multicast\n\
    \         RIB, and\n   (2)   For a given non-source-specific group, BGMP will\
    \ map the group\n         address to a nominal \"root\" address, and must be able\
    \ to look\n         up the next-hop towards that address in the Multicast RIB.\n\
    \   BGMP determines the nominal \"root\" address as follows.  If the\n   multicast\
    \ address is a Unicast-Prefix-based Multicast address, then\n   the nominal root\
    \ address is the embedded unicast prefix, padded with\n   a suffix of 0 bits to\
    \ form a full address.\n   For example, if the IPv6 group address is\n   ff2e:0100:1234:5678:9abc:def0::123,\
    \ then the unicast prefix is\n   1234:5678:9abc:def0/64, and the nominal root\
    \ address would be\n   1234:5678:9abc:def0::.  (This address is in fact the subnet\
    \ router\n   anycast address [IPv6AA].)\n   Support for any-source-multicast using\
    \ any address other than a\n   Unicast-prefix-based Multicast Address is outside\
    \ the scope of this\n   document.\n"
- title: 4.2.  Multicast Data Packet Processing
  contents:
  - "4.2.  Multicast Data Packet Processing\n   For BGMP rules to be applied, an incoming\
    \ packet must first be\n   \"accepted\":\n   o  If the packet arrived on an interface\
    \ owned by an M-IGP, the M-IGP\n      component determines whether the packet\
    \ should be accepted or\n      dropped according to its rules.  If the packet\
    \ is accepted, the\n      packet is forwarded (or not forwarded) out any other\
    \ interfaces\n      owned by the same component, as specified by the M-IGP.\n\
    \   o  If the packet was received over a point-to-point interface owned\n    \
    \  by BGMP, the packet is accepted.\n   o  If the packet arrived on a multiaccess\
    \ network interface owned by\n      BGMP, the packet is accepted if it is receiving\
    \ data on a source-\n      specific branch, if it is the designated forwarder\
    \ for the longest\n      matching route for S, or for the longest matching route\
    \ for the\n      nominal root of G.\n   If the packet is accepted, then the router\
    \ checks the tree state\n   table for a matching (S,G) entry.  If one is found,\
    \ but the packet\n   was not received from the next hop target towards S (if the\
    \ entry's\n   SPT bit is True), or was not received from the next hop target\n\
    \   towards G (if the entry's SPT bit is False) then the packet is\n   dropped\
    \ and no further actions are taken.  If no (S,G) entry was\n   found, the router\
    \ then checks for a matching (*,G) entry.\n   If neither is found, then the packet\
    \ is forwarded towards the next-\n   hop peer for the nominal root of G, according\
    \ to the Multicast RIB.\n   If a matching entry was found, the packet is forwarded\
    \ to all other\n   targets in the target list.\n   Forwarding to a target which\
    \ is an M-IGP component means that the\n   packet is forwarded out any interfaces\
    \ owned by that component\n   according to that component's multicast forwarding\
    \ rules.\n"
- title: 4.3.  BGMP processing of Join and Prune messages and notifications
  contents:
  - '4.3.  BGMP processing of Join and Prune messages and notifications

    '
- title: 4.3.1.  Receiving Joins
  contents:
  - "4.3.1.  Receiving Joins\n   When the BGMP component receives a (*,G) or (S,G)\
    \ Join alert from\n   another component, or a BGMP (S,G) or (*,G) Join message\
    \ from an\n   external peer, it searches the tree state table for a matching entry.\n\
    \   If an entry is found, and that peer is already listed in the target\n   list,\
    \ then no further actions are taken.\n   Otherwise, if no (*,G) or (S,G) entry\
    \ was found, one is created.  In\n   the case of a (*,G), the target list is initialized\
    \ to contain the\n   next-hop peer towards the nominal root of G, if it is an\
    \ external\n   peer.  If the peer is internal, the target list is initialized\
    \ to\n   contain the M-IGP component owning the next-hop interface.  If there\n\
    \   is no next-hop peer (because the nominal root of G is inside the\n   domain),\
    \ then the target  list is initialized to contain the next-hop\n   component.\
    \  If an (S,G) entry exists for the same G for which the\n   (*,G) Join is being\
    \ processed, and the next-hop peers toward S and\n   the nominal root of G are\
    \ different, the BGMP router must first send\n   a (S,G) Prune message toward\
    \ the source and clear the SPT bit on the\n   (S,G) entry, before activating the\
    \ (*,G) entry.\n   When creating (S,G) state, if the source is internal to the\
    \ BGMP\n   speaker's domain, a \"Poison-Reverse\" bit (PR-bit) is set.  This bit\n\
    \   indicates that the router may receive packets matching (S,G) anyway\n   due\
    \ to the BGMP speaker being a member of a domain on the path\n   between S and\
    \ the root domain.  (Depending on the M-IGP protocol, it\n   may in fact receive\
    \ such packets anyway only if it is the best exit\n   for the nominal root of\
    \ G.)\n   The target from which the Join was received is then added to the\n \
    \  target list.  The router then looks up S or the nominal root of G in\n   the\
    \ Multicast RIB to find the next-hop EGP peer.  If the target list,\n   not including\
    \ the next-hop target towards G for a (*,G) entry,\n   becomes non-null as a result,\
    \ the next-hop EGP peer must be notified\n   as follows:\n   a) If the next-hop\
    \ peer towards the nominal root of G (for a (*,G)\n      entry) is an external\
    \ peer, a BGMP (*,G) Join message is unicast\n      to the external peer.  If\
    \ the next-hop peer towards S (for an\n      (S,G) entry) is an external peer,\
    \ and the router does NOT have any\n      active (*,G) state for that group address\
    \ G, a BGMP (S,G) Join\n      message is unicast to the external peer.  A BGMP\
    \ (S,G) Join\n      message is never sent to an external peer by a router that\
    \ also\n      contains active (*,G) state for the same group.  If the next-hop\n\
    \      peer towards S (for an (S,G entry) is an external peer and the\n      router\
    \ DOES have active (*,G) state for that group G, the SPT bit\n      is always\
    \ set to False.\n   b) If the next-hop peer is an internal peer, a (*,G) or (S,G)\
    \ Join\n      alert is sent to the M-IGP component owning the next-hop\n     \
    \ interface.\n   c) If there is no next-hop peer, a (*,G) or (S,G) Join alert\
    \ is sent\n      to the M-IGP component owning the next-hop interface.\n   Finally,\
    \ if an (S,G) Join is received from an internal peer, the peer\n   should be stored\
    \ with the M-IGP component target.  If (S,G) state\n   exists with the PR-bit\
    \ set, and the next-hop towards the nominal root\n   for G is through the M-IGP\
    \ component, an (S,G) Poison-Reverse message\n   is immediately sent to the internal\
    \ peer.\n   If an (S,G) Join is received from an external peer, and (S,G) state\n\
    \   exists with the PR-bit set, and the local BGMP speaker is the best\n   exit\
    \ for the nominal root of G, and the next-hop towards the nominal\n   root for\
    \ G is through the interface towards the external peer, an\n   (S,G) Poison-Reverse\
    \ message is immediately sent to the external\n   peer.\n"
- title: 4.3.2.  Receiving Prune Notifications
  contents:
  - "4.3.2.  Receiving Prune Notifications\n   When the BGMP component receives a\
    \ (*,G) or (S,G) Prune alert from\n   another component, or a BGMP (*,G) or (S,G)\
    \ Prune message from an\n   external peer, it searches the tree state table for\
    \ a matching entry.\n   If no (S,G) entry was found for an (S,G) Prune, but (*,G)\
    \ state\n   exists, an (S,G) entry is created, with the target list copied from\n\
    \   the (*,G) entry.  If no matching entry exists, or if the component or\n  \
    \ peer is not listed in the target list, no further actions are taken.\n   Otherwise,\
    \ the component or peer is removed from the target list.  If\n   the target list\
    \ becomes null as a result, the next-hop peer towards\n   the nominal root of\
    \ G (for a (*,G) entry), or towards S (for an (S,G)\n   entry if and only if the\
    \ BGMP router does NOT have any corresponding\n   (*,G) entry), must be notified\
    \ as follows.\n   a) If the peer is an external peer, a BGMP (*,G) or (S,G) Prune\n\
    \      message is unicast to it.\n   b) If the next-hop peer is an internal peer,\
    \ a (*,G) or (S,G) Prune\n      alert is sent to the M-IGP component owning the\
    \ next-hop\n      interface.\n   c) If there is no next-hop peer, a (*,G) or (S,G)\
    \ Prune alert is sent\n      to the M-IGP component owning the next-hop interface.\n"
- title: 4.3.3.  Receiving Route Change Notifications
  contents:
  - "4.3.3.  Receiving Route Change Notifications\n   When a border router receives\
    \ a route for a new prefix in the\n   multicast RIB, or a existing route for a\
    \ prefix is withdrawn, a route\n   change notification for that prefix must be\
    \ sent to the BGMP\n   component.  In addition, when the next hop peer (according\
    \ to the\n   multicast RIB) changes, a route change notification for that prefix\n\
    \   must be sent to the BGMP component.\n   In addition, in IPv4 (only), an internal\
    \ route for each class-D\n   prefix associated with the domain (if any) MUST be\
    \ injected into the\n   multicast RIB in the EGP by the domain's border routers.\n\
    \   When a route for a new group prefix is learned, or an existing route\n   for\
    \ a group prefix is withdrawn, or the next-hop peer for a group\n   prefix changes,\
    \ a BGMP router updates all affected (*,G) target\n   lists.  The router sends\
    \ a (*,G) Join to the new next-hop target, and\n   a (*,G) Prune to the old next-hop\
    \ target, as appropriate.  In\n   addition, if any (S,G) state exists with the\
    \ PR-bit set:\n   o  If the BGMP speaker has just become the best exit for the\
    \ nominal\n      root of G, an (S,G) Poison Reverse message with the PR-bit set\
    \ is\n      sent as noted below.\n   o  If the BGMP speaker was the best exit\
    \ for the nominal root of G\n      and is no longer, an (S,G) Poison Reverse message\
    \ with the PR-bit\n      clear is sent as noted below.\n   The (S,G) Poison-Reverse\
    \ messages are sent to all external peers on\n   the next-hop interface towards\
    \ the nominal root of G from which (S,G)\n   Joins have been received.\n   When\
    \ an existing route for a source prefix is withdrawn, or the\n   next-hop peer\
    \ for a source prefix changes, a BGMP router updates all\n   affected (S,G) target\
    \ lists.  The router sends a (S,G) Join to the\n   new next-hop target, and a\
    \ (S,G) Prune to the old next-hop target, as\n   appropriate.\n"
- title: 4.3.4.  Receiving (S,G) Poison-Reverse messages
  contents:
  - "4.3.4.  Receiving (S,G) Poison-Reverse messages\n   When a BGMP speaker receives\
    \ an (S,G) Poison-Reverse message from a\n   peer, it sets the PR-bit on the (S,G)\
    \ state to match the PR-bit in\n   the message, and looks up the next-hop towards\
    \ the nominal root of G.\n   If the next-hop target is an M-IGP component, it\
    \ forwards the (S,G)\n   Poison Reverse message to all internal peers of that\
    \ component from\n   which it has received (S,G) Joins.  If the next-hop target\
    \ is an\n   external peer on a given interface, it forwards the (S,G) Poison\n\
    \   Reverse message to all external peers on that interface.\n   When a BGMP speaker\
    \ receives an (S,G) Poison-Reverse message from an\n   external peer, with the\
    \ PR-bit set, and the speaker has received no\n   (S,G) Joins from any other peers\
    \ (e.g., only from the M-IGP, or has\n   (S,G) state due to encapsulation as described\
    \ in 5.4.1), it knows\n   that its own (S,G) Join is unnecessary, and should send\
    \ an (S,G)\n   Prune.\n   When a BGMP speaker receives an (S,G) Poison-Reverse\
    \ message from an\n   internal peer, with the PR-bit set, and the speaker is the\
    \ best exit\n   for the nominal root of G, and has (S,G) prune state, an (S,G)\
    \ Join\n   message is sent to cancel the prune state and the state is deleted.\n"
- title: 4.4.  Interaction with M-IGP components
  contents:
  - "4.4.  Interaction with M-IGP components\n   When an M-IGP component on a border\
    \ router first learns that there\n   are internally-reached members for a group\
    \ G (whose scope is larger\n   than that domain), a (*,G) Join alert is sent to\
    \ the BGMP component.\n   Similarly, when an M-IGP component on a border router\
    \ learns that\n   there are no longer internally-reached members for a group G\
    \ (whose\n   scope is larger than a single domain), a (*,G) Prune alert is sent\
    \ to\n   the BGMP component.\n   At any time, any M-IGP domain MAY decide to join\
    \ a source-specific\n   branch for some external source S and group G.  When the\
    \ M-IGP\n   component in the border router that is the next-hop router for a\n\
    \   particular source S learns that a receiver wishes to receive data\n   from\
    \ S on a source-specific path, an (S,G) Join alert is sent to the\n   BGMP component.\
    \  When it is learned that such receivers no longer\n   exist, an (S,G) Prune\
    \ alert is sent to the BGMP component.  Recall\n   that the BGMP component will\
    \ generate external source-specific Joins\n   only where the source-specific branch\
    \ does not coincide with the\n   shared tree distribution tree for that group.\n\
    \   Finally, we will require that the border router that is the next-hop\n   internal\
    \ peer for a particular address S or the nominal root of G be\n   able to forward\
    \ data for a matching tree state table entry to all\n   members within the domain.\
    \  This requirement has implications on\n   specific M-IGPs as follows.\n"
- title: 4.4.1.  Interaction with DVMRP and PIM-DM
  contents:
  - "4.4.1.  Interaction with DVMRP and PIM-DM\n   DVMRP and PIM-DM are both \"broadcast\
    \ and prune\" protocols in which\n   every data packet must pass an RPF check\
    \ against the packet's source\n   address, or be dropped.  If the border router\
    \ receiving packets from\n   an external source is the only BR to inject the route\
    \ for the source\n   into the domain, then there are no problems.  For example,\
    \ this will\n   always be true for stub domains with a single border router (see\n\
    \   Figure 1).  Otherwise, the border router receiving packets externally\n  \
    \ is responsible for encapsulating the data to any other border routers\n   that\
    \ must inject the data into the domain for RPF checks to succeed.\n   When an\
    \ intended border router injector for a source receives\n   encapsulated packets\
    \ from another border router in its domain, it\n   should create source-specific\
    \ (S,G) BGMP state.  Note that the border\n   router may be configured to do this\
    \ on a data-rate triggered basis so\n   that the state is not created for very\
    \ low data-rate/intermittent\n   sources.  If source-specific state is created,\
    \ then its incoming\n   interface points to the virtual encapsulation interface\
    \ from the\n   border router that forwarded the packet, and it has an SPT flag\
    \ that\n   is initialized to be False.\n   When the (S,G) BGMP state is created,\
    \ the BGMP component will in turn\n   send a BGMP (S,G) Join message to the next-hop\
    \ external peer towards\n   S if there is no (*,G) state for that same group,\
    \ G.  The (S,G) BGMP\n   state will have the SPT bit set to False if (*,G) BGMP\
    \ state is\n   present.\n   When the first data packet from S arrives from the\
    \ external peer and\n   matches on the BGMP (S,G) state, and IF there is no (*,G)\
    \ state, the\n   router sets the SPT flag to True, resets the incoming interface\
    \ to\n   point to the external peer, and sends a BGMP (S,G) Prune message to\n\
    \   the border router that was encapsulating the packets (e.g., in Figure\n  \
    \ 1, BR11 sends the (Src_A,G) Prune to BR12).  When the border router\n   with\
    \ (*,G) state receives the prune for (S,G), it then deletes that\n   border router\
    \ from its list of targets.\n   If the decapsulator receives a (S,G) Poison Reverse\
    \ message with the\n   PR-bit set, it will forward it to the encapsulator (which\
    \ may again\n   forward it up the shared tree according to normal BGMP rules),\
    \ and\n   both will delete their BGMP (S,G) state.\n   PIM-DM and DVMRP present\
    \ an additional problem, i.e., no protocol\n   mechanism exists for joining and\
    \ pruning entire groups; only joins\n   and prunes for individual sources are\
    \ available.  As a result, BGMP\n   does not currently support such protocols\
    \ being used in a transit\n   domain.\n"
- title: 4.4.2.  Interaction with PIM-SM
  contents:
  - "4.4.2.  Interaction with PIM-SM\n   Protocols such as PIM-SM build unidirectional\
    \ shared and source-\n   specific trees.  As with DVMRP and PIM-DM, every data\
    \ packet must\n   pass an RPF check against some group-specific or source-specific\n\
    \   address.\n   The fewest encapsulations/decapsulations will be done when the\n\
    \   intra-domain tree is rooted at the next-hop internal peer (which\n   becomes\
    \ the RP) towards the nominal root of G, since in general that\n   router will\
    \ receive the most packets from external sources.  To\n   achieve this, each BGMP\
    \ border router to a PIM-SM domain should send\n   Candidate-RP-Advertisements\
    \ within the domain for those groups for\n   which it is the shared-domain tree\
    \ ingress router.  When the border\n   router that is the RP for a group G receives\
    \ an external data packet,\n   it forwards the packet according to the M-IGP (i.e.,\
    \ PIM-SM) shared-\n   tree outgoing interface list.\n   Other border routers will\
    \ receive data packets from external sources\n   that are farther down the bidirectional\
    \ tree of domains.  When a\n   border router that is not the RP receives an external\
    \ packet for\n   which it does not have a source-specific entry, the border router\n\
    \   treats it like a local source by creating (S,G) state with a Register\n  \
    \ flag set, based on normal PIM-SM rules; the Border router then\n   encapsulates\
    \ the data packets in PIM-SM Registers and unicasts them\n   to the RP for the\
    \ group.  As explained above, the RP for the inter-\n   domain group will be one\
    \ of the other border routers of the domain.\n   If a source's data rate is high\
    \ enough, DRs within the PIM-SM domain\n   may switch to the shortest path tree.\
    \  If the shortest path to an\n   external source is via the group's ingress router\
    \ for the shared\n   tree, the new (S,G) state in the BGMP border router will\
    \ not cause\n   BGMP (S,G) Joins because that border router will already have\
    \ (*,G)\n   state.  If however, the shortest path to an external source is via\n\
    \   some other border router, that border router will create (S,G) BGMP\n   state\
    \ in response to the M-IGP (S,G) Join alert.  In this case,\n   because there\
    \ is no local (*,G) state to suppress it, the border\n   router will send a BGMP\
    \ (S,G) Join to the next-hop external peer\n   towards S, in order to pull the\
    \ data down directly.  (See BR11 in\n   Figure 1).  As in normal PIM-SM operation,\
    \ those PIM-SM routers that\n   have (*,G) and (S,G) state pointing to different\
    \ incoming interfaces\n   will prune that source off the shared tree.  Therefore,\
    \ all internal\n   interfaces may be eventually pruned off the internal shared\
    \ tree.\n   After the border router sends a BGMP (S,G) Join, if its (S,G) state\n\
    \   has the PR-bit clear, a (S,G) Poison-Reverse message (with the PR-bit\n  \
    \ clear) is sent to the ingress router for G.  The ingress router then\n   creates\
    \ (S,G) if it does not already exist, and removes the next hop\n   towards the\
    \ nominal root of G from the target list.\n   If the border router later receives\
    \ an (S,G) Poison-Reverse message\n   with the PR-bit set, the Poison-Reverse\
    \ message is forwarded to the\n   ingress router for G.  The best-exit router\
    \ then creates (S,G) state\n   if it does not already exist, and puts the next\
    \ hop towards the\n   nominal root of G in the target list if not already present.\n"
- title: 4.4.3.  Interaction with CBT
  contents:
  - "4.4.3.  Interaction with CBT\n   CBT builds bidirectional shared trees but must\
    \ address two points of\n   compatibility with BGMP.  First, CBT can not accommodate\
    \ more than\n   one border router injecting a packet.  Therefore, if a CBT domain\n\
    \   does have multiple external connections, the M-IGP components of the\n   border\
    \ routers are responsible for insuring that only one of them\n   will inject data\
    \ from any given source.\n   Second, CBT cannot process source-specific Joins\
    \ or Prunes.  Two\n   options thus exist for each CBT domain:\n   Option A:\n\
    \      The CBT component interprets a (S,G) Join alert as if it were an\n    \
    \  (*,G) Join alert, as described in [INTEROP].  That is, if it is\n      not\
    \ already on the core-tree for G, then it sends a CBT (*,G)\n      JOIN-REQUEST\
    \ message towards the core for G.  Similarly, when the\n      CBT component receives\
    \ an (S,G) Prune alert, and the child\n      interface list for a group is NULL,\
    \ then it sends a (*,G)\n      QUIT_NOTIFICATION towards the core for G.  This\
    \ option has the\n      disadvantage of pulling all data for the group G down\
    \ to the CBT\n      domain when no members exist.\n   Option B:\n      The CBT\
    \ domain does not propagate any routes to their external\n      peers for the\
    \ Multicast RIB unless it is known that no other path\n      exists to that prefix\
    \ (e.g., routes for prefixes internal to the\n      domain or in a singly-homed\
    \ customer's domain may be propagated).\n      This insures that source-specific\
    \ joins are never received unless\n      the source's data already passes through\
    \ the domain on the shared\n      tree, in which case the (S,G) Join need not\
    \ be propagated anyway.\n      BGMP border routers will only send source-specific\
    \ Joins or Prunes\n      to an external peer if that external peer advertises\
    \ source-\n      prefixes in the EGP.  If a BGMP-CBT border router does receive\
    \ an\n      (S,G) Join or Prune, that border router should ignore the message.\n\
    \   To minimize en/de-capsulations, CBTv2 BR's may follow the same scheme\n  \
    \ as described under PIM-SM above, in which Candidate-Core\n   advertisements\
    \ are sent for those groups for which it is the shared-\n   tree ingress router.\n"
- title: 4.4.4.  Interaction with MOSPF
  contents:
  - "4.4.4.  Interaction with MOSPF\n   As with CBTv2, MOSPF cannot process source-specific\
    \ Joins or Prunes,\n   and the same two options are available.  Therefore, an\
    \ MOSPF domain\n   may either:\n   Option A:\n      send a Group-Membership-LSA\
    \ for all of G in response to a (S,G)\n      Join alert, and \"prematurely age\"\
    \ it out (when no other downstream\n      members exist) in response to an (S,G)\
    \ Prune alert, OR\n   Option B:\n      not propagate any routes to their external\
    \ peers for the Multicast\n      RIB unless it is known that no other path exists\
    \ to that prefix\n      (e.g., routes for prefixes internal to the domain or in\
    \ a singly-\n      homed customer's domain may be propagated)\n"
- title: 4.5.  Operation over Multi-access Networks
  contents:
  - "4.5.  Operation over Multi-access Networks\n   Multiaccess links require special\
    \ handling to prevent duplicates.\n   The following mechanism enables BGMP to\
    \ operate over multiaccess\n   links which do not run an M-IGP.  This avoids broadcast-and-prune\n\
    \   behavior and does not require (S,G) state.\n   To elect a designated forwarder\
    \ per prefix, BGMP uses a FWDR_PREF\n   message to exchange \"forwarder preference\"\
    \ values for each prefix.\n   The peer with the highest forwarder preference becomes\
    \ the designated\n   forwarder, with ties broken by lowest BGMP Identifier.  The\n\
    \   designated forwarder is the router responsible for forwarding packets\n  \
    \ up the tree, and is the peer to which joins will be sent.\n   When BGMP first\
    \ learns that a route exists in the multicast RIB whose\n   next-hop interface\
    \ is NOT the multiaccess link, the BGMP router sends\n   a BGMP FWDR_PREF message\
    \ for the prefix, to all BGMP peers on the\n   LAN.  The FWDR_PREF message contains\
    \ a \"forwarder preference value\"\n   for the local router, and the same value\
    \ MUST be sent to all peers on\n   the LAN.  Likewise, when the prefix is no longer\
    \ reachable, a\n   FWDR_PREF of 0 is sent to all peers on the LAN.\n   Whenever\
    \ a BGMP router calculates the next-hop peer towards a\n   particular address,\
    \ and that peer is reached over a BGMP-owned\n   multiaccess LAN, the designated\
    \ forwarder is used instead.\n   When a BGMP router receives a FWDR_PREF message\
    \ from a peer, it looks\n   up the matching route in its multicast RIB, and calculates\
    \ the new\n   designated forwarder.  If the router has tree state entries whose\n\
    \   parent target was the old forwarder, it sends Joins to the new\n   forwarder\
    \ and Prunes to the old forwarder.\n   When a BGMP router which is NOT the designated\
    \ forwarder receives a\n   packet on the multiaccess link, it is silently dropped.\n\
    \   Finally, this mechanism prevents duplicates where full peering exists\n  \
    \ on a \"logical\" link.  Where full peering does not exist, steps must\n   be\
    \ taken (outside of BGMP) to present separate logical interfaces to\n   BGMP,\
    \ each of which is a link with full peering.  This might entail,\n   for example,\
    \ using different link-layer address mappings, doing\n   encapsulation, or changing\
    \ the physical media.\n"
- title: 4.6.  Interaction between (S,G) state and G-routes
  contents:
  - "4.6.  Interaction between (S,G) state and G-routes\n   As discussed earlier,\
    \ routers with (*,G) state will not propagate\n   (S,G) joins.  However, a special\
    \ case occurs when (S,G) state\n   coincides with the G-route (or route towards\
    \ the nominal root of G).\n   When this occurs, care must be taken so that the\
    \ data will reach the\n   root domain without causing duplicates or black holes.\
    \  For this\n   reason, (S,G) state on the path between the source and the root\n\
    \   domain is annotated as being \"poison-reversed\".  A PR-bit is kept for\n\
    \   this purpose, which is updated by (UN)POISON_REVERSE messages.\n   The PR-bit\
    \ indicates to BGMP nodes whether they need to forward\n   packets up towards\
    \ the root domain.  For example, in a case where an\n   (S,G) branch exists, a\
    \ transit domain may get packets along the (S,G)\n   branch, and needs to know\
    \ whether to (also) forward them up towards\n   the root domain.  If the domain\
    \ in question is on the path between S\n   and the root domain, then the answer\
    \ is yes (and the PR bit will be\n   set on the S,G state).  If the domain in\
    \ question is not on the path\n   between S and the root domain, then the answer\
    \ is no (and the PR bit\n   will be clear on the S,G state).\n"
- title: 5.  Message Formats
  contents:
  - "5.  Message Formats\n   This section describes message formats used by BGMP.\n\
    \   Messages are sent over a reliable transport protocol connection.  A\n   message\
    \ is processed only after it is entirely received.  The maximum\n   message size\
    \ is 4096 octets.  All implementations are required to\n   support this maximum\
    \ message size.\n   All fields labelled \"Reserved\" below must be transmitted\
    \ as 0, and\n   ignored upon receipt.\n"
- title: 5.1.  Message Header Format
  contents:
  - "5.1.  Message Header Format\n   Each message has a fixed-size (4-byte) header.\
    \  There may or may not\n   be a data portion following the header, depending\
    \ on the message\n   type.  The layout of these fields is shown below:\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Length               |      Type     |    Reserved   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:\n      This 2-octet unsigned integer indicates the total length of\
    \ the\n      message, including the header, in octets.  Thus, e.g., it allows\n\
    \      one to locate in the transport-level stream the start of the next\n   \
    \   message.  The value of the Length field must always be at least 4\n      and\
    \ no greater than 4096, and may be further constrained,\n      depending on the\
    \ message type.  No \"padding\" of extra data after\n      the message is allowed,\
    \ so the Length field must have the smallest\n      value required given the rest\
    \ of the message.\n   Type:\n      This 1-octet unsigned integer indicates the\
    \ type code of the\n      message.  The following type codes are defined:\n  \
    \       1 - OPEN\n         2 - UPDATE\n         3 - NOTIFICATION\n         4 -\
    \ KEEPALIVE\n"
- title: 5.2.  OPEN Message Format
  contents:
  - "5.2.  OPEN Message Format\n   After a transport protocol connection is established,\
    \ the first\n   message sent by each side is an OPEN message.  If the OPEN message\
    \ is\n   acceptable, a KEEPALIVE message confirming the OPEN is sent back.\n \
    \  Once the OPEN is confirmed, UPDATE, KEEPALIVE, and NOTIFICATION\n   messages\
    \ may be exchanged.\n   In addition to the fixed-size BGMP header, the OPEN message\
    \ contains\n   the following fields:\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version     | Rsvd| AddrFam |           Hold Time           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                BGMP Identifier (variable length)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                    (Optional Parameters)                    |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version:\n      This 1-octet unsigned integer indicates the protocol version\n\
    \      number of the message.  The current BGMP version number is 1.\n   AddrFam:\n\
    \      The IANA-assigned address family number of the BGMP Identifier.\n     \
    \ These include (among others):\n      Number    Description\n      ------   \
    \ -----------\n         1      IP (IP version 4)\n         2      IPv6 (IP version\
    \ 6)\n   Hold Time:\n      This 2-octet unsigned integer indicates the number\
    \ of seconds that\n      the sender proposes for the value of the Hold Timer.\
    \  Upon receipt\n      of an OPEN message, a BGMP speaker MUST calculate the value\
    \ of the\n      Hold Timer by using the smaller of its configured Hold Time and\n\
    \      the Hold Time received in the OPEN message.  The Hold Time MUST be\n  \
    \    either zero or at least three seconds.  An implementation may\n      reject\
    \ connections on the basis of the Hold Time.  The calculated\n      value indicates\
    \ the maximum number of seconds that may elapse\n      between the receipt of\
    \ successive KEEPALIVE, and/or UPDATE\n      messages by the sender.\n   BGMP\
    \ Identifier:\n      This 4-octet (for IPv4) or 16-octet (IPv6) unsigned integer\n\
    \      indicates the BGMP Identifier of the sender.  A given BGMP speaker\n  \
    \    sets the value of its BGMP Identifier to a globally-unique value\n      assigned\
    \ to that BGMP speaker (e.g., an IPv4 address).  The value\n      of the BGMP\
    \ Identifier is determined on startup and is the same\n      for every BGMP session\
    \ opened.\n   Optional Parameters:\n      This field may contain a list of optional\
    \ parameters, where each\n      parameter is encoded as a <Parameter Length, Parameter\
    \ Type,\n      Parameter Value> triplet.  The combined length of all optional\n\
    \      parameters can be derived from the Length field in the message\n      header.\n\
    \       0                   1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n\
    \      |  Parm. Type   | Parm. Length  |  Parameter Value (variable)\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n\
    \      Parameter Type is a one octet field that unambiguously identifies\n   \
    \   individual parameters.  Parameter Length is a one octet field that\n     \
    \ contains the length of the Parameter Value field in octets.\n      Parameter\
    \ Value is a variable length field that is interpreted\n      according to the\
    \ value of the Parameter Type field.\n      This document defines the following\
    \ Optional Parameters:\n   a) Authentication Information (Parameter Type 1): \
    \ This optional\n      parameter may be used to authenticate a BGMP peer.  The\
    \ Parameter\n      Value field contains a 1-octet Authentication Code followed\
    \ by a\n      variable length Authentication Data.\n       0 1 2 3 4 5 6 7 8\n\
    \      +-+-+-+-+-+-+-+-+\n      |  Auth. Code   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                     |\n      |      \
    \        Authentication Data                    |\n      |                   \
    \                                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Authentication Code:\n      This 1-octet unsigned integer indicates the authentication\n\
    \      mechanism being used.  Whenever an authentication mechanism is\n      specified\
    \ for use within BGMP, three things must be included in\n      the specification:\n\
    \      - the value of the Authentication Code which indicates use of the\n   \
    \   mechanism, and - the form and meaning of the Authentication Data.\n      Note\
    \ that a separate authentication mechanism may be used in\n      establishing\
    \ the transport level connection.\n   Authentication Data:\n      The form and\
    \ meaning of this field is a variable-length field\n      depend on the Authentication\
    \ Code.\n   The minimum length of the OPEN message is 12 octets (including\n \
    \  message header).\n   b) Capability Information (Parameter Type 2):  This is\
    \ an Optional\n      Parameter that is used by a BGMP-speaker to convey to its\
    \ peer the\n      list of capabilities supported by the speaker.  The parameter\n\
    \      contains one or more triples <Capability Code, Capability Length,\n   \
    \   Capability Value>, where each triple is encoded as shown below:\n      +------------------------------+\n\
    \      | Capability Code (1 octet)    |\n      +------------------------------+\n\
    \      | Capability Length (1 octet)  |\n      +------------------------------+\n\
    \      | Capability Value (variable)  |\n      +------------------------------+\n\
    \   Capability Code:\n      Capability Code is a one octet field that unambiguously\
    \ identifies\n      individual capabilities.\n   Capability Length:\n      Capability\
    \ Length is a one octet field that contains the length of\n      the Capability\
    \ Value field in octets.\n   Capability Value:\n      Capability Value is a variable\
    \ length field that is interpreted\n      according to the value of the Capability\
    \ Code field.\n   A particular capability, as identified by its Capability Code,\
    \ may\n   occur more than once within the Optional Parameter.\n   This document\
    \ reserves Capability Codes 128-255 for vendor-specific\n   applications.\n  \
    \ This document reserves value 0.\n   Capability Codes (other than those reserved\
    \ for vendor specific use)\n   are assigned only by the IETF consensus process\
    \ and IESG approval.\n"
- title: 5.3.  UPDATE Message Format
  contents:
  - "5.3.  UPDATE Message Format\n   UPDATE messages are used to transfer Join/Prune/FwdrPref\
    \ information\n   between BGMP peers.  The UPDATE message always includes the\
    \ fixed-\n   size BGMP header, and one or more attributes as described below.\n\
    \   The message format below allows compact encoding of (*,G) Joins and\n   Prunes,\
    \ while allowing the flexibility needed to do other updates\n   such as (S,G)\
    \ Joins and Prunes towards sources as well as on the\n   shared tree.  In the\
    \ discussion below, an Encoded-Address-Prefix is\n   of the form:\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                          \
    \                         +-+-+-+-+-+-+-+-+\n                                \
    \                   |EnTyp| AddrFam |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Address (variable length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Mask    (variable length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   EnTyp:\n     0 - All 1's Mask.  The Mask field is 0 bytes long.\n     1 -\
    \ Mask length included.  The Mask field is 4 bytes long, and\n         contains\
    \ the mask length, in bits.\n     2 - Full Mask included.  The Mask field is the\
    \ same length\n         as the Address field, and contains the full bitmask.\n\
    \   AddrFam:\n     The IANA-assigned address family number of the encoded prefix.\n\
    \   Address:\n     The address associated with the given prefix to be encoded.\
    \  The\n     length is determined based on the Address Family.\n   Mask:\n   \
    \  The mask associated with the given prefix.  The format (or absence)\n     of\
    \ this field is determined by the EnTyp field.\n   Each attribute is of the form:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |              Length           |     Type      |   Data ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   All attributes are 4-byte aligned.\n   Length:\n     The Length is the length\
    \ of the entire attribute, including the\n     length, type, and data fields.\
    \  If other attributes are nested\n     within the data field, the length includes\
    \ the size of all such\n     nested attributes.\n   Type:\n     Types 128-255\
    \ are reserved for \"optional\" attributes.  If a\n     required attribute is\
    \ unrecognized, a NOTIFICATION will be sent and\n     the connection will be closed\
    \ if the error is a fatal one.\n     Unrecognized optional attributes are simply\
    \ ignored.\n        0 - JOIN\n        1 - PRUNE\n        2 - GROUP\n        3\
    \ - SOURCE\n        4 - FWDR_PREF\n        5 - POISON_REVERSE\n   a) JOIN (Type\
    \ Code 0)\n   The JOIN attribute indicates that all GROUP or SOURCE options\n\
    \   nested immediately within the JOIN option should be joined.\n     0      \
    \             1                   2                   3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |              Length           |    Type=0     |   Reserved    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Nested Attributes ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   No JOIN, PRUNE, or FWDR_PREF attributes may be immediately nested\n   within\
    \ a JOIN attribute.\n   b) PRUNE (Type Code 1)\n   The PRUNE attribute indicates\
    \ that all GROUP or SOURCE attributes\n   nested immediately within the PRUNE\
    \ attribute should be pruned.\n     0                   1                   2\
    \                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |              Length           |    Type=1     |   Reserved    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Nested Attributes ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   No JOIN, PRUNE, or FWDR_PREF attributes may be immediately nested\n   within\
    \ a PRUNE attribute.\n   c) GROUP (Type Code 2)\n   The GROUP attribute identifies\
    \ a given group-prefix.  In addition,\n   any attributes nested immediately within\
    \ the GROUP attribute also\n   apply to the given group-prefix.\n    0       \
    \            1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Length           |    Type=2     |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n   |                                                      \
    \         |\n   |                   Encoded-Address-Prefix                   \
    \   |\n   |                                                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Nested\
    \ Attributes (optional) ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Encoded-Address-Prefix The multicast group prefix to be joined to\n      \
    \                    pruned, in the format described above.\n   Nested Attributes\
    \      No GROUP, SOURCE, or FWDR_PREF attributes may\n                       \
    \   be immediately nested within a GROUP\n                          attribute.\n\
    \   d) SOURCE (Type Code 3):\n   The SOURCE attribute identifies a given source-prefix.\
    \  In\n   addition, any attributes nested immediately within the SOURCE\n   attribute\
    \ also apply to the given source-prefix.\n   The SOURCE attribute has the following\
    \ format:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Length           |    Type=2     |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n   |                                                      \
    \         |\n   |                   Encoded-Address-Prefix                   \
    \   |\n   |                                                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Nested\
    \ Attributes (optional) ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Encoded-Address-Prefix  The Source-prefix in the format described\n      \
    \                     above.\n   Nested Attributes       No GROUP, SOURCE, or\
    \ FWDR_PREF attributes may\n                           be immediately nested within\
    \ a SOURCE\n                           attribute.\n   e) FWDR_PREF (Type Code\
    \ 4)\n   The FWDR_PREF attribute provides a forwarder preference value for\n \
    \  all GROUP or SOURCE attributes nested immediately within the\n   FWDR_PREF\
    \ attribute.  It is used by a BGMP speaker to inform other\n   BGMP speakers of\
    \ the originating speaker's degree of preference for\n   a given group or source\
    \ prefix.  Usage of this attribute is\n   described in 5.5.\n    0           \
    \        1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Length           |    Type=1     |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Preference Value                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Nested Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Preference Value    A 32-bit non-negative integer.\n   Nested Attributes \
    \  No JOIN, PRUNE, or FWDR_PREF attributes may be\n                       immediately\
    \ nested within a FWDR_PREF attribute.\n   e) POISON_REVERSE (Type Code 5)\n \
    \  The POISON_REVERSE attribute provides a \"poison-reverse\" (PR-bit)\n   value\
    \ for all SOURCE attributes nested immediately within the\n   POISON_REVERSE attribute.\
    \  It is used by a BGMP speaker to inform\n   other BGMP speakers from which it\
    \ has received (S,G) Joins that\n   they are on the path of domains between the\
    \ source and the root\n   domain.\n    0                   1                 \
    \  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Length           |    Type=1     |   Reserved  |P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Nested Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   P                   The PR-bit value.\n   Nested Attributes   No attributes\
    \ in the document other than SOURCE\n                       may be immediately\
    \ nested within a POISON_REVERSE\n                       attribute.\n"
- title: 5.4.  Encoding examples
  contents:
  - "5.4.  Encoding examples\n   Below are enumerated examples of how various updates\
    \ are built using\n   nested attributes, where A ( B ) denotes that attribute\
    \ B is nested\n   within attribute A.\n"
- title: '(*,G-prefix) Join: JOIN ( GROUP )'
  contents:
  - '(*,G-prefix) Join: JOIN ( GROUP )

    '
- title: '(*,G-prefix) Prune: PRUNE ( GROUP )'
  contents:
  - '(*,G-prefix) Prune: PRUNE ( GROUP )

    '
- title: '(S,G) Join towards S : GROUP ( JOIN ( SOURCE ) )'
  contents:
  - '(S,G) Join towards S : GROUP ( JOIN ( SOURCE ) )

    '
- title: '(S,G) Join cancelling prune towards root of G: GROUP ( JOIN ( SOURCE ) )'
  contents:
  - '(S,G) Join cancelling prune towards root of G: GROUP ( JOIN ( SOURCE ) )

    '
- title: '(S,G) Prune towards S: GROUP ( PRUNE ( SOURCE ) )'
  contents:
  - '(S,G) Prune towards S: GROUP ( PRUNE ( SOURCE ) )

    '
- title: '(S,G) Prune towards root of G: GROUP ( PRUNE ( SOURCE ) )'
  contents:
  - '(S,G) Prune towards root of G: GROUP ( PRUNE ( SOURCE ) )

    '
- title: 'Switch from (*,G) to (S,G): PRUNE ( GROUP ( JOIN ( SOURCE ) ) )'
  contents:
  - 'Switch from (*,G) to (S,G): PRUNE ( GROUP ( JOIN ( SOURCE ) ) )

    '
- title: 'Switch from (S,G) to (*,G): JOIN ( GROUP )'
  contents:
  - 'Switch from (S,G) to (*,G): JOIN ( GROUP )

    '
- title: 'Initial (*,G) Join with S pruned: JOIN ( GROUP ( PRUNE ( SOURCE ) ) )'
  contents:
  - 'Initial (*,G) Join with S pruned: JOIN ( GROUP ( PRUNE ( SOURCE ) ) )

    '
- title: 'Forwarder preference announcement for G-prefix: FWDR_PREF ( GROUP )'
  contents:
  - 'Forwarder preference announcement for G-prefix: FWDR_PREF ( GROUP )

    '
- title: 'Forwarder preference announcement for S-prefix: FWDR_PREF ( SOURCE )'
  contents:
  - 'Forwarder preference announcement for S-prefix: FWDR_PREF ( SOURCE )

    '
- title: 5.5.  KEEPALIVE Message Format
  contents:
  - "5.5.  KEEPALIVE Message Format\n   BGMP does not use any transport protocol-based\
    \ keep-alive mechanism\n   to determine if peers are reachable.  Instead, KEEPALIVE\
    \ messages are\n   exchanged between peers often enough as not to cause the Hold\
    \ Timer\n   to expire.  A reasonable maximum time between the last KEEPALIVE or\n\
    \   UPDATE message sent, and the time at which a KEEPALIVE message is\n   sent,\
    \ would be one third of the Hold Time interval.  KEEPALIVE\n   messages MUST NOT\
    \ be sent more frequently than one per second.  An\n   implementation MAY adjust\
    \ the rate at which it sends KEEPALIVE\n   messages as a function of the Hold\
    \ Time interval.\n   If the negotiated Hold Time interval is zero, then periodic\
    \ KEEPALIVE\n   messages MUST NOT be sent.\n   A KEEPALIVE message consists of\
    \ only a message header, and has a\n   length of 4 octets.\n"
- title: 5.6.  NOTIFICATION Message Format
  contents:
  - "5.6.  NOTIFICATION Message Format\n   A NOTIFICATION message is sent when an\
    \ error condition is detected.\n   The BGMP connection is closed immediately after\
    \ sending it if the\n   error is a fatal one.\n   In addition to the fixed-size\
    \ BGMP header, the NOTIFICATION message\n   contains the following fields:\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |O| Error code  | Error subcode |           Data                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   O-bit:\n      Open-bit.  If clear, the connection will be closed.  If set,\n\
    \      indicates the error is not fatal.\n   Error Code:\n      This 1-octet unsigned\
    \ integer indicates the type of NOTIFICATION.\n      The following Error Codes\
    \ have been defined:\n         Error Code       Symbolic Name               Reference\n\
    \           1         Message Header Error             Section 9.1\n         \
    \  2         OPEN Message Error               Section 9.2\n           3      \
    \   UPDATE Message Error             Section 9.3\n           4         Hold Timer\
    \ Expired               Section 9.5\n           5         Finite State Machine\
    \ Error       Section 9.6\n           6         Cease                        \
    \    Section 9.7\n   Error subcode:\n      This 1-octet unsigned integer provides\
    \ more specific information\n      about the nature of the reported error.  Each\
    \ Error Code may have\n      one or more Error Subcodes associated with it.  If\
    \ no appropriate\n      Error Subcode is defined, then a zero (Unspecific) value\
    \ is used\n      for the Error Subcode field.  The notation (MC) below indicates\n\
    \      the error is a fatal one and the O-bit must be clear.  Non-fatal\n    \
    \  subcodes SHOULD be sent with the O-bit set.\n      Message Header Error subcodes:\n\
    \                            2  - Bad Message Length (MC)\n                  \
    \          3  - Bad Message Type (MC)\n      OPEN Message Error subcodes:\n  \
    \                          1  - Unsupported Version (MC)\n                   \
    \         4  - Unsupported Optional Parameter\n                            5 \
    \ - Authentication Failure (MC)\n                            6  - Unacceptable\
    \ Hold Time (MC)\n                            7  - Unsupported Capability (MC)\n\
    \      UPDATE Message Error subcodes:\n                            1 - Malformed\
    \ Attribute List (MC)\n                            2 - Unrecognized Attribute\
    \ Type\n                            5 - Attribute Length Error (MC)\n        \
    \                   10 - Invalid Address\n                           11 - Invalid\
    \ Mask\n                           13 - Unrecognized Address Family\n   Data:\n\
    \      This variable-length field is used to diagnose the reason for the\n   \
    \   NOTIFICATION.  The contents of the Data field depend upon the\n      Error\
    \ Code and Error Subcode.  See Section 7 below for more\n      details.\n    \
    \  Note that the length of the Data field can be determined from the\n      message\
    \ Length field by the formula:\n         Message Length = 6 + Data Length\n  \
    \    The minimum length of the NOTIFICATION message is 6 octets\n      (including\
    \ message header).\n"
- title: 6.  BGMP Error Handling
  contents:
  - "6.  BGMP Error Handling\n   This section describes actions to be taken when errors\
    \ are detected\n   while processing BGMP messages.  BGMP Error Handling is similar\
    \ to\n   that of BGP [BGP].\n   When any of the conditions described here are\
    \ detected, a\n   NOTIFICATION message with the indicated Error Code, Error Subcode,\n\
    \   and Data fields is sent, and the BGMP connection is closed if the\n   error\
    \ is a fatal one.  If no Error Subcode is specified, then a zero\n   must be used.\n\
    \   The phrase \"the BGMP connection is closed\" means that the transport\n  \
    \ protocol connection has been closed and that all resources for that\n   BGMP\
    \ connection have been deallocated.  The remote peer is removed\n   from the target\
    \ list of all tree state entries.\n   Unless specified explicitly, the Data field\
    \ of the NOTIFICATION\n   message that is sent to indicate an error is empty.\n"
- title: 6.1.  Message Header error handling
  contents:
  - "6.1.  Message Header error handling\n   All errors detected while processing\
    \ the Message Header are indicated\n   by sending the NOTIFICATION message with\
    \ Error Code Message Header\n   Error.  The Error Subcode elaborates on the specific\
    \ nature of the\n   error.\n   If the Length field of the message header is less\
    \ than 4 or greater\n   than 4096, or if the Length field of an OPEN message is\
    \ less  than\n   the minimum length of the OPEN message, or if the Length field\
    \ of an\n   UPDATE message is less than the minimum length of the UPDATE message,\n\
    \   or if the Length field of a KEEPALIVE message is not equal to 4, then\n  \
    \ the Error Subcode is set to Bad Message Length.  The Data field\n   contains\
    \ the erroneous Length field.\n   If the Type field of the message header is not\
    \ recognized, then the\n   Error Subcode is set to Bad Message Type.  The Data\
    \ field contains\n   the erroneous Type field.\n"
- title: 6.2.  OPEN message error handling
  contents:
  - "6.2.  OPEN message error handling\n   All errors detected while processing the\
    \ OPEN message are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code OPEN Message\n   Error.  The Error Subcode elaborates on the specific nature\
    \ of the\n   error.\n   If the version number contained in the Version field of\
    \ the received\n   OPEN message is not supported, then the Error Subcode is set\
    \ to\n   Unsupported Version Number.  The Data field is a 2-octet unsigned\n \
    \  integer, which indicates the largest locally supported version number\n   less\
    \ than the version the remote BGMP peer bid (as indicated in the\n   received\
    \ OPEN message).\n   If the Hold Time field of the OPEN message is unacceptable,\
    \ then the\n   Error Subcode MUST be set to Unacceptable Hold Time.  An\n   implementation\
    \ MUST reject Hold Time values of one or two seconds.\n   An implementation MAY\
    \ reject any proposed Hold Time.  An\n   implementation which accepts a Hold Time\
    \ MUST use the negotiated\n   value for the Hold Time.\n   If one of the Optional\
    \ Parameters in the OPEN message is not\n   recognized, then the Error Subcode\
    \ is set to Unsupported Optional\n   Parameters.\n   If the OPEN message carries\
    \ Authentication Information (as an\n   Optional Parameter), then the corresponding\
    \ authentication procedure\n   is invoked.  If the authentication procedure (based\
    \ on Authentication\n   Code and Authentication Data) fails, then the Error Subcode\
    \ is set to\n   Authentication Failure.\n   If the OPEN message indicates that\
    \ the peer does not support a\n   capability which the receiver requires, the\
    \ receiver may send a\n   NOTIFICATION message to the peer, and terminate peering.\
    \  The Error\n   Subcode in the message is set to Unsupported Capability.  The\
    \ Data\n   field in the NOTIFICATION message lists the set of capabilities that\n\
    \   cause the speaker to send the message.  Each such capability is\n   encoded\
    \ the same way as it was encoded in the received OPEN message.\n"
- title: 6.3.  UPDATE message error handling
  contents:
  - "6.3.  UPDATE message error handling\n   All errors detected while processing\
    \ the UPDATE message are indicated\n   by sending the NOTIFICATION message with\
    \ Error Code UPDATE Message\n   Error.  The error subcode elaborates on the specific\
    \ nature of the\n   error.\n   If any recognized attribute has Attribute Length\
    \ that conflicts with\n   the expected length (based on the attribute type code),\
    \ then the\n   Error Subcode is set to Attribute Length Error.  The Data field\n\
    \   contains the erroneous attribute (type, length and value).\n   If the Encoded-Address-Prefix\
    \ field in some attribute is\n   syntactically incorrect, then the Error Subcode\
    \ is set to Invalid\n   Prefix Field.\n   If any other is encountered when processing\
    \ attributes (such as\n   invalid nestings), then the Error Subcode is set to\
    \ Malformed\n   Attribute List, and the problematic attribute is included in the\
    \ data\n   field.\n"
- title: 6.4.  NOTIFICATION message error handling
  contents:
  - "6.4.  NOTIFICATION message error handling\n   If a peer sends a NOTIFICATION\
    \ message, and there is an error in that\n   message, there is unfortunately no\
    \ means of reporting this error via\n   a subsequent NOTIFICATION message.  Any\
    \ such error, such as an\n   unrecognized Error Code or Error Subcode, should\
    \ be noticed, logged\n   locally, and brought to the attention of the administration\
    \ of the\n   peer.  The means to do this, however, lies outside the scope of this\n\
    \   document.\n"
- title: 6.5.  Hold Timer Expired error handling
  contents:
  - "6.5.  Hold Timer Expired error handling\n   If a system does not receive successive\
    \ KEEPALIVE and/or UPDATE\n   and/or NOTIFICATION messages within the period specified\
    \ in the Hold\n   Time field of the OPEN message, then the NOTIFICATION message\
    \ with\n   Hold Timer Expired Error Code must be sent and the BGMP connection\n\
    \   closed.\n"
- title: 6.6.  Finite State Machine error handling
  contents:
  - "6.6.  Finite State Machine error handling\n   Any error detected by the BGMP\
    \ Finite State Machine (e.g., receipt of\n   an unexpected event) is indicated\
    \ by sending the NOTIFICATION message\n   with Error Code Finite State Machine\
    \ Error.\n"
- title: 6.7.  Cease
  contents:
  - "6.7.  Cease\n   In absence of any fatal errors (that are indicated in this section),\n\
    \   a BGMP peer may choose at any given time to close its BGMP connection\n  \
    \ by sending the NOTIFICATION message with Error Code Cease.  However,\n   the\
    \ Cease NOTIFICATION message must not be used when a fatal error\n   indicated\
    \ by this section does exist.\n"
- title: 6.8.  Connection collision detection
  contents:
  - "6.8.  Connection collision detection\n   If a pair of BGMP speakers try simultaneously\
    \ to establish a TCP\n   connection to each other, then two parallel connections\
    \ between this\n   pair of speakers might well be formed.  We refer to this situation\
    \ as\n   connection collision.  Clearly, one of these connections must be\n  \
    \ closed.\n   Based on the value of the BGMP Identifier a convention is established\n\
    \   for detecting which BGMP connection is to be preserved when a\n   collision\
    \ does occur.  The convention is to compare the BGMP\n   Identifiers of the peers\
    \ involved in the collision and to retain only\n   the connection initiated by\
    \ the BGMP speaker with the higher-valued\n   BGMP Identifier.\n   Upon receipt\
    \ of an OPEN message, the local system must examine all of\n   its connections\
    \ that are in the OpenConfirm state.  A BGMP speaker\n   may also examine connections\
    \ in an OpenSent state if it knows the\n   BGMP Identifier of the peer by means\
    \ outside of the protocol.  If\n   among these connections there is a connection\
    \ to a remote BGMP\n   speaker whose BGMP Identifier equals the one in the OPEN\
    \ message,\n   then the local system performs the following collision resolution\n\
    \   procedure:\n   1. The BGMP Identifier of the local system is compared to the\
    \ BGMP\n      Identifier of the remote system (as specified in the OPEN\n    \
    \  message).\n   2. If the value of the local BGMP Identifier is less than the\
    \ remote\n      one, the local system closes BGMP connection that already exists\n\
    \      (the one that is already in the OpenConfirm state), and accepts\n     \
    \ BGMP connection initiated by the remote system.\n   3. Otherwise, the local\
    \ system closes newly created BGMP connection\n      (the one associated with\
    \ the newly received OPEN message), and\n      continues to use the existing one\
    \ (the one that is already in the\n      OpenConfirm state).\n   Comparing BGMP\
    \ Identifiers is done by treating them as (4-octet long)\n   unsigned integers.\n\
    \   A connection collision with an existing BGMP connection that is in\n   Established\
    \ states causes unconditional closing of the newly created\n   connection.  Note\
    \ that a connection collision cannot be detected with\n   connections that are\
    \ in Idle, or Connect, or Active states.\n   Closing the BGMP connection (that\
    \ results from the collision\n   resolution procedure) is accomplished by sending\
    \ the NOTIFICATION\n   message with the Error Code Cease.\n"
- title: 7.  BGMP Version Negotiation
  contents:
  - "7.  BGMP Version Negotiation\n   BGMP speakers may negotiate the version of the\
    \ protocol by making\n   multiple attempts to open a BGMP connection, starting\
    \ with the\n   highest version number each supports.  If an open attempt fails\
    \ with\n   an Error Code OPEN Message Error, and an Error Subcode Unsupported\n\
    \   Version Number, then the BGMP speaker has available the version\n   number\
    \ it tried, the version number its peer tried, the version\n   number passed by\
    \ its peer in the NOTIFICATION message, and the\n   version numbers that it supports.\
    \  If the two peers do support one or\n   more common versions, then this will\
    \ allow them to rapidly determine\n   the highest common version.  In order to\
    \ support BGMP version\n   negotiation, future versions of BGMP must retain the\
    \ format of the\n   OPEN and NOTIFICATION messages.\n"
- title: 7.1.  BGMP Capability Negotiation
  contents:
  - "7.1.  BGMP Capability Negotiation\n   When a BGMP speaker sends an OPEN message\
    \ to its BGMP peer, the\n   message may include an Optional Parameter, called\
    \ Capabilities.  The\n   parameter lists the capabilities supported by the speaker.\n\
    \   A BGMP speaker may use a particular capability when peering with\n   another\
    \ speaker only if both speakers support that capability.  A\n   BGMP speaker determines\
    \ the capabilities supported by its peer by\n   examining the list of capabilities\
    \ present in the Capabilities\n   Optional Parameter carried by the OPEN message\
    \ that the speaker\n   receives from the peer.\n"
- title: 8.  BGMP Finite State machine
  contents:
  - "8.  BGMP Finite State machine\n   This section specifies BGMP operation in terms\
    \ of a Finite State\n   Machine (FSM).  Following is a brief summary and overview\
    \ of BGMP\n   operations by state as determined by this FSM.\n   Initially BGMP\
    \ is in the Idle state.\n   Idle state:\n      In this state BGMP refuses all\
    \ incoming BGMP connections.  No\n      resources are allocated to the peer. \
    \ In response to the Start\n      event (initiated by either system or operator)\
    \ the local system\n      initializes all BGMP resources, starts the ConnectRetry\
    \ timer,\n      initiates a transport connection to the other BGMP peer, while\n\
    \      listening for a connection that may be initiated by the remote\n      BGMP\
    \ peer, and changes its state to Connect.  The exact value of\n      the ConnectRetry\
    \ timer is a local matter, but should be\n      sufficiently large to allow TCP\
    \ initialization.\n      If a BGMP speaker detects an error, it shuts down the\
    \ connection\n      and changes its state to Idle.  Getting out of the Idle state\n\
    \      requires generation of the Start event.  If such an event is\n      generated\
    \ automatically, then persistent BGMP errors may result in\n      persistent flapping\
    \ of the speaker.  To avoid such a condition it\n      is recommended that Start\
    \ events should not be generated\n      immediately for a peer that was previously\
    \ transitioned to Idle\n      due to an error.  For a peer that was previously\
    \ transitioned to\n      Idle due to an error, the time between consecutive generation\
    \ of\n      Start events, if such events are generated automatically, shall\n\
    \      exponentially increase.  The value of the initial timer shall be\n    \
    \  60 seconds.  The time shall be doubled for each consecutive retry.\n      Any\
    \ other event received in the Idle state is ignored.\n   Connect state:\n    \
    \  In this state BGMP is waiting for the transport protocol\n      connection\
    \ to be completed.\n      If the transport protocol connection succeeds, the local\
    \ system\n      clears the ConnectRetry timer, completes initialization, sends\
    \ an\n      OPEN message to its peer, and changes its state to OpenSent.  If\n\
    \      the transport protocol connect fails (e.g., retransmission\n      timeout),\
    \ the local system restarts the ConnectRetry timer,\n      continues to listen\
    \ for a connection that may be initiated by the\n      remote BGMP peer, and changes\
    \ its state to Active state.\n      In response to the ConnectRetry timer expired\
    \ event, the local\n      system restarts the ConnectRetry timer, initiates a\
    \ transport\n      connection to the other BGMP peer, continues to listen for\
    \ a\n      connection that may be initiated by the remote BGMP peer, and\n   \
    \   stays in the Connect state.\n      The Start event is ignored in the Connect\
    \ state.\n      In response to any other event (initiated by either system or\n\
    \      operator), the local system releases all BGMP resources associated\n  \
    \    with this connection and changes its state to Idle.\n   Active state:\n \
    \     In this state BGMP is trying to acquire a peer by listening for an\n   \
    \   incoming transport protocol connection.\n      If the transport protocol connection\
    \ succeeds, the local system\n      clears the ConnectRetry timer, completes initialization,\
    \ sends an\n      OPEN message to its peer, sets its Hold Timer to a large value,\n\
    \      and changes its state to OpenSent.  A Hold Timer value of 4\n      minutes\
    \ is suggested.\n      In response to the ConnectRetry timer expired event, the\
    \ local\n      system restarts the ConnectRetry timer, initiates a transport\n\
    \      connection to other BGMP peer, continues to listen for a\n      connection\
    \ that may be initiated by the remote BGMP peer, and\n      changes its state\
    \ to Connect.\n      If the local system detects that a remote peer is trying\
    \ to\n      establish BGMP connection to it, and the IP address of the remote\n\
    \      peer is not an expected one, the local system restarts the\n      ConnectRetry\
    \ timer, rejects the attempted connection, continues to\n      listen for a connection\
    \ that may be initiated by the remote BGMP\n      peer, and stays in the Active\
    \ state.\n      The Start event is ignored in the Active state.\n      In response\
    \ to any other event (initiated by either system or\n      operator), the local\
    \ system releases all BGMP resources associated\n      with this connection and\
    \ changes its state to Idle.\n   OpenSent state:\n      In this state BGMP waits\
    \ for an OPEN message from its peer.  When\n      an OPEN message is received,\
    \ all fields are checked for\n      correctness.  If the BGMP message header checking\
    \ or OPEN message\n      checking detects an error (see Section 6.2), or a connection\n\
    \      collision (see Section 6.8) the local system sends a NOTIFICATION\n   \
    \   message and changes its state to Idle.\n      If there are no errors in the\
    \ OPEN message, BGMP sends a KEEPALIVE\n      message and sets a KeepAlive timer.\
    \  The Hold Timer, which was\n      originally set to a large value (see above),\
    \ is replaced with the\n      negotiated Hold Time value (see section 4.2).  If\
    \ the negotiated\n      Hold Time value is zero, then the Hold Time timer and\
    \ KeepAlive\n      timers are not started.  If the configured remote Autonomous\n\
    \      System value for this peering is the same as the local Autonomous\n   \
    \   System number, then the connection is an \"internal\" connection;\n      otherwise,\
    \ it is \"external\".  Finally, the state is changed to\n      OpenConfirm.\n\
    \      If a disconnect notification is received from the underlying\n      transport\
    \ protocol, the local system closes the BGMP connection,\n      restarts the ConnectRetry\
    \ timer, while continue listening for\n      connection that may be initiated\
    \ by the remote BGMP peer, and goes\n      into the Active state.\n      If the\
    \ Hold Timer expires, the local system sends NOTIFICATION\n      message with\
    \ error code Hold Timer Expired and changes its state\n      to Idle.\n      In\
    \ response to the Stop event (initiated by either system or\n      operator) the\
    \ local system sends NOTIFICATION message with Error\n      Code Cease and changes\
    \ its state to Idle.\n      The Start event is ignored in the OpenSent state.\n\
    \      In response to any other event the local system sends NOTIFICATION\n  \
    \    message with Error Code Finite State Machine Error and changes its\n    \
    \  state to Idle.\n      Whenever BGMP changes its state from OpenSent to Idle,\
    \ it closes\n      the BGMP (and transport-level) connection and releases all\n\
    \      resources associated with that connection.\n   OpenConfirm state:\n   \
    \   In this state BGMP waits for a KEEPALIVE or NOTIFICATION message.\n      If\
    \ the local system receives a KEEPALIVE message, it changes its\n      state to\
    \ Established.\n      If the Hold Timer expires before a KEEPALIVE message is\
    \ received,\n      the local system sends NOTIFICATION message with error code\
    \ Hold\n      Timer Expired and changes its state to Idle.\n      If the local\
    \ system receives a NOTIFICATION message, it changes\n      its state to Idle.\n\
    \      If the KeepAlive timer expires, the local system sends a KEEPALIVE\n  \
    \    message and restarts its KeepAlive timer.\n      If a disconnect notification\
    \ is received from the underlying\n      transport protocol, the local system\
    \ changes its state to Idle.\n      In response to the Stop event (initiated by\
    \ either system or\n      operator) the local system sends NOTIFICATION message\
    \ with Error\n      Code Cease and changes its state to Idle.\n      The Start\
    \ event is ignored in the OpenConfirm state.\n      In response to any other event\
    \ the local system sends NOTIFICATION\n      message with Error Code Finite State\
    \ Machine Error and changes its\n      state to Idle.\n      Whenever BGMP changes\
    \ its state from OpenConfirm to Idle, it\n      closes the BGMP (and transport-level)\
    \ connection and releases all\n      resources associated with that connection.\n\
    \   Established state:\n      In the Established state BGMP can exchange UPDATE,\
    \ NOTIFICATION,\n      and KEEPALIVE messages with its peer.\n      If the local\
    \ system receives an UPDATE or KEEPALIVE message, it\n      restarts its Hold\
    \ Timer, if the negotiated Hold Time value is\n      non-zero.\n      If the local\
    \ system receives a NOTIFICATION message, it changes\n      its state to Idle.\n\
    \      If the local system receives an UPDATE message and the UPDATE\n      message\
    \ error handling procedure (see Section 6.3) detects an\n      error, the local\
    \ system sends a NOTIFICATION message and changes\n      its state to Idle.\n\
    \      If a disconnect notification is received from the underlying\n      transport\
    \ protocol, the local system changes its state to Idle.\n      If the Hold Timer\
    \ expires, the local system sends a NOTIFICATION\n      message with Error Code\
    \ Hold Timer Expired and changes its state\n      to Idle.\n      If the KeepAlive\
    \ timer expires, the local system sends a KEEPALIVE\n      message and restarts\
    \ its KeepAlive timer.\n      Each time the local system sends a KEEPALIVE or\
    \ UPDATE message, it\n      restarts its KeepAlive timer, unless the negotiated\
    \ Hold Time\n      value is zero.\n      In response to the Stop event (initiated\
    \ by either system or\n      operator), the local system sends a NOTIFICATION\
    \ message with\n      Error Code Cease and changes its state to Idle.\n      The\
    \ Start event is ignored in the Established state.\n      In response to any other\
    \ event, the local system sends\n      NOTIFICATION message with Error Code Finite\
    \ State Machine Error\n      and changes its state to Idle.\n      Whenever BGMP\
    \ changes its state from Established to Idle, it\n      closes the BGMP (and transport-level)\
    \ connection, releases all\n      resources associated with that connection, and\
    \ deletes all routes\n      derived from that connection.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   If a BGMP speaker accepts unauthorized or altered\
    \ BGMP messages,\n   denial of service due to excess bandwidth consumption or\
    \ lack of\n   multicast connectivity can result.  Authentication of BGMP messages\n\
    \   can protect against this behavior.\n   A BGMP implementation MUST implement\
    \ Keyed MD5 [RFC2385] to secure\n   control messages, and MUST be capable of interoperating\
    \ with peers\n   that do not support it.  However, if one side of the connection\
    \ is\n   configured with Keyed MD5 and the other side is not, the connection\n\
    \   SHOULD NOT be established.\n   This provides a weak security mechanism, as\
    \ it is still possible for\n   denial of service to occur as a result of messages\
    \ relayed through a\n   trusted peer.  However, this model is the same as the\
    \ currently\n   practiced security mechanism for BGP.  It is anticipated that\
    \ future\n   work will provide different stronger mechanisms for dealing with\n\
    \   these issues in routing protocols.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   In addition to the editor, the following individuals\
    \ have contributed\n   to the design of BGMP: Cengiz Alaettinoglu, Tony Ballardie,\
    \ Steve\n   Casner, Steve Deering, Deborah Estrin, Dino Farinacci, Bill Fenner,\n\
    \   Mark Handley, Ahmed Helmy, Van Jacobson, Dave Meyer, and Satish\n   Kumar.\n\
    \   This document is the product of the IETF BGMP Working Group with Dave\n  \
    \ Thaler as editor.\n   Rusty Eddy, Isidor Kouvelas, and Pavlin Radoslavov also\
    \ provided\n   valuable feedback on this document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [INTEROP]  Thaler, D., \"Interoperability Rules\
    \ for Multicast Routing\n              Protocols\", RFC 2715, October 1999.\n\
    \   [RFC2385]  Heffernan, A., \"Protection of BGP sessions via the TCP MD5\n \
    \             Signature Option\", RFC 2385, August 1998.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [V6PREFIX] Haberman, B. and D. Thaler, \"\
    Unicast-Prefix-based IPv6\n              Multicast Addresses\", RFC 3306, August\
    \ 2002.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [BGP]      Rekhter, Y. and T. Li, \"A Border\
    \ Gateway Protocol 4 (BGP-\n              4)\", RFC 1771, March 1995.\n   [MBGP]\
    \     Bates, T., Rekhter, Y., Chandra, R., and D. Katz,\n              \"Multiprotocol\
    \ Extensions for BGP-4\", RFC 2858, June 2000.\n   [CBT]      Ballardie, A., \"\
    Core Based Trees (CBT version 2) Multicast\n              Routing -- Protocol\
    \ Specification\", RFC 2189, September\n              1997.\n   [DVMRP]    Pusateri,\
    \ T., \"Distance Vector Multicast Routing\n              Protocol\", Work in Progress,\
    \ October 2003.\n   [IPv6AA]   Hinden, R. and S. Deering, \"Internet Protocol\
    \ Version 6\n              (IPv6) Addressing Architecture\", RFC 3513, April 2003.\n\
    \   [MOSPF]    Moy, J., \"Multicast Extensions to OSPF\", RFC 1584, March\n  \
    \            1994.\n   [PIMDM]    Adams, A., Nicholas, J. and W. Siadak, \"Protocol\n\
    \              Independent Multicast - Dense Mode (PIM-DM): Protocol\n       \
    \       Specification (Revised)\", Work in Progress, September\n             \
    \ 2003.\n   [PIMSM]    Estrin, D., Farinacci, D., Helmy, A., Thaler, D., Deering,\n\
    \              S., Handley, M., Jacobson, V., Liu, C., Sharma, P., and L.\n  \
    \            Wei, \"Protocol Independent Multicast-Sparse Mode (PIM-SM):\n   \
    \           Protocol Specification\", RFC 2362, June 1998.\n   [REFLECT]  Bates,\
    \ T. and R. Chandra, \"BGP Route Reflection: An\n              alternative to\
    \ full mesh IBGP\", RFC 1966, June 1996.\n   [V4PREFIX] Thaler, D., \"Unicast-Prefix-based\
    \ IPv4 Multicast\n              Addresses\", Work in Progress, August 2004.\n"
- title: Authors' Address
  contents:
  - "Authors' Address\n   Dave Thaler\n   Microsoft\n   One Microsoft Way\n   Redmond,\
    \ WA 98052\n   EMail: dthaler@microsoft.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
