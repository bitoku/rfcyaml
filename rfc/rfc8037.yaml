- title: __initial_text__
  contents:
  - "        CFRG Elliptic Curve Diffie-Hellman (ECDH) and Signatures\n          \
    \    in JSON Object Signing and Encryption (JOSE)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines how to use the Diffie-Hellman algorithms\n\
    \   \"X25519\" and \"X448\" as well as the signature algorithms \"Ed25519\" and\n\
    \   \"Ed448\" from the IRTF CFRG elliptic curves work in JSON Object\n   Signing\
    \ and Encryption (JOSE).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8037.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Key Type \"OKP\"  . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Algorithms  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Signatures  . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n       3.1.1.  Signing . . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n       3.1.2.  Verification  . . . . . . . . . . . . . . . . . . . .\
    \   4\n     3.2.  ECDH-ES . . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 4\n       3.2.1.  Performing the ECDH Operation . . . . . . . . . . . .   5\n\
    \   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   5\n  \
    \ 5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6\n   6.\
    \  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n     6.1.\
    \  Normative References  . . . . . . . . . . . . . . . . . .   8\n     6.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .   8\n   Appendix A.  Examples\
    \ . . . . . . . . . . . . . . . . . . . . . .   9\n     A.1.  Ed25519 Private\
    \ Key . . . . . . . . . . . . . . . . . . .   9\n     A.2.  Ed25519 Public Key\
    \  . . . . . . . . . . . . . . . . . . .   9\n     A.3.  JWK Thumbprint Canonicalization\
    \ . . . . . . . . . . . . .   9\n     A.4.  Ed25519 Signing . . . . . . . . .\
    \ . . . . . . . . . . . .  10\n     A.5.  Ed25519 Validation  . . . . . . . .\
    \ . . . . . . . . . . .  11\n     A.6.  ECDH-ES with X25519 . . . . . . . . .\
    \ . . . . . . . . . .  11\n     A.7.  ECDH-ES with X448 . . . . . . . . . . .\
    \ . . . . . . . . .  12\n   Acknowledgements  . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  14\n   Author's Address  . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet Research Task Force (IRTF) Crypto Forum Research\
    \ Group\n   (CFRG) selected new Diffie-Hellman algorithms (\"X25519\" and \"X448\"\
    ;\n   [RFC7748]) and signature algorithms (\"Ed25519\" and \"Ed448\";\n   [RFC8032])\
    \ for asymmetric key cryptography.  This document defines\n   how to use those\
    \ algorithms in JOSE in an interoperable manner.\n   This document defines the\
    \ conventions to use in the context of\n   [RFC7515], [RFC7516], and [RFC7517].\n\
    \   While the CFRG also defined two pairs of isogenous elliptic curves\n   that\
    \ underlie these algorithms, these curves are not directly\n   exposed, as the\
    \ algorithms laid on top are sufficient for the\n   purposes of JOSE and are much\
    \ easier to use.\n   All inputs to and outputs from the Elliptic Curve Diffie-Hellman\n\
    \   (ECDH) and signature functions are defined to be octet strings, with\n   the\
    \ exception of outputs of verification functions, which are\n   booleans.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   \"JWS Signing Input\" and \"JWS Signature\" are defined by [RFC7515].\n\
    \   \"Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static\"\n  \
    \ is defined by Section 4.6 of [RFC7518].\n   The JOSE key format (\"JSON Web\
    \ Key (JWK)\") is defined by [RFC7517]\n   and thumbprints for it (\"JSON Web\
    \ Key (JWK) Thumbprint\") in\n   [RFC7638].\n"
- title: 2.  Key Type "OKP"
  contents:
  - "2.  Key Type \"OKP\"\n   A new key type (kty) value \"OKP\" (Octet Key Pair)\
    \ is defined for\n   public key algorithms that use octet strings as private and\
    \ public\n   keys.  It has the following parameters:\n   o  The parameter \"kty\"\
    \ MUST be \"OKP\".\n   o  The parameter \"crv\" MUST be present and contain the\
    \ subtype of the\n      key (from the \"JSON Web Elliptic Curve\" registry).\n\
    \   o  The parameter \"x\" MUST be present and contain the public key\n      encoded\
    \ using the base64url [RFC4648] encoding.\n   o  The parameter \"d\" MUST be present\
    \ for private keys and contain the\n      private key encoded using the base64url\
    \ encoding.  This parameter\n      MUST NOT be present for public keys.\n   Note:\
    \ Do not assume that there is an underlying elliptic curve,\n   despite the existence\
    \ of the \"crv\" and \"x\" parameters.  (For\n   instance, this key type could\
    \ be extended to represent Diffie-Hellman\n   (DH) algorithms based on hyperelliptic\
    \ surfaces.)\n   When calculating JWK Thumbprints [RFC7638], the three public\
    \ key\n   fields are included in the hash input in lexicographic order: \"crv\"\
    ,\n   \"kty\", and \"x\".\n"
- title: 3.  Algorithms
  contents:
  - '3.  Algorithms

    '
- title: 3.1.  Signatures
  contents:
  - "3.1.  Signatures\n   For the purpose of using the Edwards-curve Digital Signature\n\
    \   Algorithm (EdDSA) for signing data using \"JSON Web Signature (JWS)\"\n  \
    \ [RFC7515], algorithm \"EdDSA\" is defined here, to be applied as the\n   value\
    \ of the \"alg\" parameter.\n   The following key subtypes are defined here for\
    \ use with EdDSA:\n      \"crv\"             EdDSA Variant\n      Ed25519    \
    \       Ed25519\n      Ed448             Ed448\n   The key type used with these\
    \ keys is \"OKP\" and the algorithm used for\n   signing is \"EdDSA\".  These\
    \ subtypes MUST NOT be used for Elliptic\n   Curve Diffie-Hellman Ephemeral Static\
    \ (ECDH-ES).\n   The EdDSA variant used is determined by the subtype of the key\n\
    \   (Ed25519 for \"Ed25519\" and Ed448 for \"Ed448\").\n"
- title: 3.1.1.  Signing
  contents:
  - "3.1.1.  Signing\n   Signing for these is performed by applying the signing algorithm\n\
    \   defined in [RFC8032] to the private key (as private key), public key\n   (as\
    \ public key), and the JWS Signing Input (as message).  The\n   resulting signature\
    \ is the JWS Signature.  All inputs and outputs are\n   octet strings.\n"
- title: 3.1.2.  Verification
  contents:
  - "3.1.2.  Verification\n   Verification is performed by applying the verification\
    \ algorithm\n   defined in [RFC8032] to the public key (as public key), the JWS\n\
    \   Signing Input (as message), and the JWS Signature (as signature).\n   All\
    \ inputs are octet strings.  If the algorithm accepts, the\n   signature is valid;\
    \ otherwise, the signature is invalid.\n"
- title: 3.2.  ECDH-ES
  contents:
  - "3.2.  ECDH-ES\n   The following key subtypes are defined here for purpose of\
    \ \"Key\n   Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static\"\n\
    \   (ECDH-ES):\n      \"crv\"             ECDH Function Applied\n      X25519\
    \            X25519\n      X448              X448\n   The key type used with these\
    \ keys is \"OKP\".  These subtypes MUST NOT\n   be used for signing.\n   Section\
    \ 4.6 of [RFC7518] defines the ECDH-ES algorithms\n   \"ECDH-ES+A128KW\", \"ECDH-ES+A192KW\"\
    , \"ECDH-ES+A256KW\", and \"ECDH-ES\".\n"
- title: 3.2.1.  Performing the ECDH Operation
  contents:
  - "3.2.1.  Performing the ECDH Operation\n   The \"x\" parameter of the \"epk\"\
    \ field is set as follows:\n   Apply the appropriate ECDH function to the ephemeral\
    \ private key (as\n   scalar input) and the standard base point (as u-coordinate\
    \ input).\n   The base64url encoding of the output is the value for the \"x\"\n\
    \   parameter of the \"epk\" field.  All inputs and outputs are octet\n   strings.\n\
    \   The Z value (raw key agreement output) for key agreement (to be used\n   in\
    \ subsequent Key Derivation Function (KDF) as per Section 4.6.2 of\n   [RFC7518])\
    \ is determined as follows:\n   Apply the appropriate ECDH function to the ephemeral\
    \ private key (as\n   scalar input) and receiver public key (as u-coordinate input).\
    \  The\n   output is the Z value.  All inputs and outputs are octet strings.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Security considerations from [RFC7748] and [RFC8032]\
    \ apply here.\n   Do not separate key material from information about what key\
    \ subtype\n   it is for.  When using keys, check that the algorithm is compatible\n\
    \   with the key subtype for the key.  To do otherwise opens the system\n   up\
    \ to attacks via mixing up algorithms.  It is particularly dangerous\n   to mix\
    \ up signature and Message Authentication Code (MAC) algorithms.\n   Although\
    \ for Ed25519 and Ed448, the signature binds the key used for\n   signing, do\
    \ not assume this, as there are many signature algorithms\n   that fail to make\
    \ such a binding.  If key-binding is desired, include\n   the key used for signing\
    \ either inside the JWS protected header or\n   the data to sign.\n   If key generation\
    \ or batch signature verification is performed, a\n   well-seeded cryptographic\
    \ random number generator is REQUIRED.\n   Signing and non-batch signature verification\
    \ are deterministic\n   operations and do not need random numbers of any kind.\n\
    \   The JSON Web Algorithm (JWA) ECDH-ES KDF construction does not mix\n   keys\
    \ into the final shared secret.  In key exchange, such mixing\n   could be a bad\
    \ mistake; whereas here either the receiver public key\n   has to be chosen maliciously\
    \ or the sender has to be malicious in\n   order to cause problems.  In either\
    \ case, all security evaporates.\n   The nominal security strengths of X25519\
    \ and X448 are ~126 and ~223\n   bits.  Therefore, using 256-bit symmetric encryption\
    \ (especially key\n   wrapping and encryption) with X448 is RECOMMENDED.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The following has been added to the \"JSON Web Key\
    \ Types\" registry:\n   o  \"kty\" Parameter Value: \"OKP\"\n   o  Key Type Description:\
    \ Octet string key pairs\n   o  JOSE Implementation Requirements: Optional\n \
    \  o  Change Controller: IESG\n   o  Specification Document(s): Section 2 of RFC\
    \ 8037\n   The following has been added to the \"JSON Web Key Parameters\"\n \
    \  registry:\n   o  Parameter Name: \"crv\"\n   o  Parameter Description: The\
    \ subtype of key pair\n   o  Parameter Information Class: Public\n   o  Used with\
    \ \"kty\" Value(s): \"OKP\"\n   o  Change Controller: IESG\n   o  Specification\
    \ Document(s): Section 2 of RFC 8037\n   o  Parameter Name: \"d\"\n   o  Parameter\
    \ Description: The private key\n   o  Parameter Information Class: Private\n \
    \  o  Used with \"kty\" Value(s): \"OKP\"\n   o  Change Controller: IESG\n   o\
    \  Specification Document(s): Section 2 of RFC 8037\n   o  Parameter Name: \"\
    x\"\n   o  Parameter Description: The public key\n   o  Parameter Information\
    \ Class: Public\n   o  Used with \"kty\" Value(s): \"OKP\"\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 2 of RFC 8037\n   The following\
    \ has been added to the \"JSON Web Signature and\n   Encryption Algorithms\" registry:\n\
    \   o  Algorithm Name: \"EdDSA\"\n   o  Algorithm Description: EdDSA signature\
    \ algorithms\n   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation\
    \ Requirements: Optional\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 3.1 of RFC 8037\n   o  Algorithm Analysis Documents(s): [RFC8032]\n\
    \   The following has been added to the \"JSON Web Key Elliptic Curve\"\n   registry:\n\
    \   o  Curve Name: \"Ed25519\"\n   o  Curve Description: Ed25519 signature algorithm\
    \ key pairs\n   o  JOSE Implementation Requirements: Optional\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 3.1 of RFC 8037\n   o  Curve\
    \ Name: \"Ed448\"\n   o  Curve Description: Ed448 signature algorithm key pairs\n\
    \   o  JOSE Implementation Requirements: Optional\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 3.1 of RFC 8037\n   o  Curve name: \"\
    X25519\"\n   o  Curve Description: X25519 function key pairs\n   o  JOSE Implementation\
    \ Requirements: Optional\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 3.2 of RFC 8037\n   o  Analysis Documents(s): [RFC7748]\n   o  Curve\
    \ Name: \"X448\"\n   o  Curve Description: X448 function key pairs\n   o  JOSE\
    \ Implementation Requirements: Optional\n   o  Change Controller: IESG\n   o \
    \ Specification Document(s): Section 3.2 of RFC 8037\n   o  Analysis Documents(s):\
    \ [RFC7748]\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC7515]  Jones, M., Bradley,\
    \ J., and N. Sakimura, \"JSON Web\n              Signature (JWS)\", RFC 7515,\
    \ DOI 10.17487/RFC7515, May\n              2015, <http://www.rfc-editor.org/info/rfc7515>.\n\
    \   [RFC7517]  Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n              DOI\
    \ 10.17487/RFC7517, May 2015,\n              <http://www.rfc-editor.org/info/rfc7517>.\n\
    \   [RFC7518]  Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n         \
    \     DOI 10.17487/RFC7518, May 2015,\n              <http://www.rfc-editor.org/info/rfc7518>.\n\
    \   [RFC7638]  Jones, M. and N. Sakimura, \"JSON Web Key (JWK)\n             \
    \ Thumbprint\", RFC 7638, DOI 10.17487/RFC7638, September\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7638>.\n   [RFC7748]  Langley, A., Hamburg,\
    \ M., and S. Turner, \"Elliptic Curves\n              for Security\", RFC 7748,\
    \ DOI 10.17487/RFC7748, January\n              2016, <http://www.rfc-editor.org/info/rfc7748>.\n\
    \   [RFC8032]  Josefsson, S. and I. Liusvaara, \"Edwards-Curve Digital\n     \
    \         Signature Algorithm (EdDSA)\", RFC 8032,\n              DOI 10.17487/RFC8032,\
    \ January 2017,\n              <http://www.rfc-editor.org/info/rfc8032>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC7516]  Jones, M. and J. Hildebrand, \"JSON\
    \ Web Encryption (JWE)\",\n              RFC 7516, DOI 10.17487/RFC7516, May 2015,\n\
    \              <http://www.rfc-editor.org/info/rfc7516>.\n"
- title: Appendix A.  Examples
  contents:
  - "Appendix A.  Examples\n   To the extent possible, these examples use material\
    \ taken from test\n   vectors of [RFC7748] and [RFC8032].\n"
- title: A.1.  Ed25519 Private Key
  contents:
  - "A.1.  Ed25519 Private Key\n   {\"kty\":\"OKP\",\"crv\":\"Ed25519\",\n   \"d\"\
    :\"nWGxne_9WmC6hEr0kuwsxERJxWl7MmkZcDusAxyuf2A\",\n   \"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\"\
    }\n   The hexadecimal dump of private key is:\n   9d 61 b1 9d ef fd 5a 60 ba 84\
    \ 4a f4 92 ec 2c c4\n   44 49 c5 69 7b 32 69 19 70 3b ac 03 1c ae 7f 60\n   And\
    \ of the public key is:\n   d7 5a 98 01 82 b1 0a b7 d5 4b fe d3 c9 64 07 3a\n\
    \   0e e1 72 f3 da a6 23 25 af 02 1a 68 f7 07 51 1a\n"
- title: A.2.  Ed25519 Public Key
  contents:
  - "A.2.  Ed25519 Public Key\n   This is the public part of the previous private\
    \ key (which just omits\n   \"d\"):\n   {\"kty\":\"OKP\",\"crv\":\"Ed25519\",\n\
    \   \"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\"}\n"
- title: A.3.  JWK Thumbprint Canonicalization
  contents:
  - "A.3.  JWK Thumbprint Canonicalization\n   The JWK Thumbprint canonicalization\
    \ of the two examples above (with a\n   linebreak inserted for formatting reasons)\
    \ is:\n   {\"crv\":\"Ed25519\",\"kty\":\"OKP\",\"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwI\n\
    \   aaPcHURo\"}\n   Which has the SHA-256 hash (in hexadecimal) of\n   90facafea9b1556698540f70c0117a22ea37bd5cf3ed3c47093c1707282b4b89,\n\
    \   which results in the base64url encoded JWK Thumbprint representation\n   of\
    \ \"kPrK_qmxVWaYVA9wwBF6Iuo3vVzz7TxHCTwXBygrS4k\".\n"
- title: A.4.  Ed25519 Signing
  contents:
  - "A.4.  Ed25519 Signing\n   The JWS protected header is:\n   {\"alg\":\"EdDSA\"\
    }\n   This has the base64url encoding of:\n   eyJhbGciOiJFZERTQSJ9\n   The payload\
    \ is (text):\n   Example of Ed25519 signing\n   This has the base64url encoding\
    \ of:\n   RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc\n   The JWS signing input is (a\
    \ concatenation of base64url encoding of\n   the (protected) header, a dot, and\
    \ base64url encoding of the payload)\n   is:\n   eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc\n\
    \   Applying the Ed25519 signing algorithm using the private key, public\n   key,\
    \ and the JWS signing input yields the signature (hex):\n   86 0c 98 d2 29 7f\
    \ 30 60 a3 3f 42 73 96 72 d6 1b\n   53 cf 3a de fe d3 d3 c6 72 f3 20 dc 02 1b\
    \ 41 1e\n   9d 59 b8 62 8d c3 51 e2 48 b8 8b 29 46 8e 0e 41\n   85 5b 0f b7 d8\
    \ 3b b1 5b e9 02 bf cc b8 cd 0a 02\n   Converting this to base64url yields:\n\
    \   hgyY0il_MGCjP0JzlnLWG1PPOt7-09PGcvMg3AIbQR6dWbhijcNR4ki4iylGjg5BhVsPt\n  \
    \ 9g7sVvpAr_MuM0KAg\n   So the compact serialization of the JWS is (a concatenation\
    \ of\n   signing input, a dot, and base64url encoding of the signature):\n   eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc.hgyY0il_MGCj\n\
    \   P0JzlnLWG1PPOt7-09PGcvMg3AIbQR6dWbhijcNR4ki4iylGjg5BhVsPt9g7sVvpAr_Mu\n  \
    \ M0KAg\n"
- title: A.5.  Ed25519 Validation
  contents:
  - "A.5.  Ed25519 Validation\n   The JWS from the example above is:\n   eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc.hgyY0il_MGCj\n\
    \   P0JzlnLWG1PPOt7-09PGcvMg3AIbQR6dWbhijcNR4ki4iylGjg5BhVsPt9g7sVvpAr_Mu\n  \
    \ M0KAg\n   This has 2 dots in it, so it might be valid a JWS.  Base64url\n  \
    \ decoding the protected header yields:\n   {\"alg\":\"EdDSA\"}\n   So this is\
    \ an EdDSA signature.  Now the key has: \"kty\":\"OKP\" and\n   \"crv\":\"Ed25519\"\
    , so the signature is Ed25519 signature.\n   The signing input is the part before\
    \ the second dot:\n   eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc\n\
    \   Applying the Ed25519 verification algorithm to the public key, JWS\n   signing\
    \ input, and the signature yields true.  So the signature is\n   valid.  The message\
    \ is the base64url decoding of the part between the\n   dots:\n   Example of Ed25519\
    \ Signing\n"
- title: A.6.  ECDH-ES with X25519
  contents:
  - "A.6.  ECDH-ES with X25519\n   The public key to encrypt to is:\n   {\"kty\":\"\
    OKP\",\"crv\":\"X25519\",\"kid\":\"Bob\",\n   \"x\":\"3p7bfXt9wbTTW2HC7OQ1Nz-DQ8hbeGdNrfx-FG-IK08\"\
    }\n   The public key from the target key is (hex):\n   de 9e db 7d 7b 7d c1 b4\
    \ d3 5b 61 c2 ec e4 35 37\n   3f 83 43 c8 5b 78 67 4d ad fc 7e 14 6f 88 2b 4f\n\
    \   The ephemeral secret happens to be (hex):\n   77 07 6d 0a 73 18 a5 7d 3c 16\
    \ c1 72 51 b2 66 45\n   df 4c 2f 87 eb c0 99 2a b1 77 fb a5 1d b9 2c 2a\n   So\
    \ the ephemeral public key is X25519(ephkey, G) (hex):\n   85 20 f0 09 89 30 a7\
    \ 54 74 8b 7d dc b4 3e f7 5a\n   0d bf 3a 0d 26 38 1a f4 eb a4 a9 8e aa 9b 4e\
    \ 6a\n   This is represented as the ephemeral public key value:\n   {\"kty\":\"\
    OKP\",\"crv\":\"X25519\",\n   \"x\":\"hSDwCYkwp1R0i33ctD73Wg2_Og0mOBr066SpjqqbTmo\"\
    }\n   So the protected header could be, for example:\n   {\"alg\":\"ECDH-ES+A128KW\"\
    ,\"epk\":{\"kty\":\"OKP\",\"crv\":\"X25519\",\n   \"x\":\"hSDwCYkwp1R0i33ctD73Wg2_Og0mOBr066SpjqqbTmo\"\
    },\n   \"enc\":\"A128GCM\",\"kid\":\"Bob\"}\n   And the sender computes the DH\
    \ Z value as X25519(ephkey, recv_pub)\n   (hex):\n   4a 5d 9d 5b a4 ce 2d e1 72\
    \ 8e 3b f4 80 35 0f 25\n   e0 7e 21 c9 47 d1 9e 33 76 f0 9b 3c 1e 16 17 42\n \
    \  The receiver computes the DH Z value as X25519(seckey, ephkey_pub)\n   (hex):\n\
    \   4a 5d 9d 5b a4 ce 2d e1 72 8e 3b f4 80 35 0f 25\n   e0 7e 21 c9 47 d1 9e 33\
    \ 76 f0 9b 3c 1e 16 17 42\n   This is the same as the sender's value (both sides\
    \ run this through\n   the KDF before using it as a direct encryption key or AES128-KW\
    \ key).\n"
- title: A.7.  ECDH-ES with X448
  contents:
  - "A.7.  ECDH-ES with X448\n   The public key to encrypt to (with a linebreak inserted\
    \ for\n   formatting reasons) is:\n   {\"kty\":\"OKP\",\"crv\":\"X448\",\"kid\"\
    :\"Dave\",\n   \"x\":\"PreoKbDNIPW8_AtZm2_sz22kYnEHvbDU80W0MCfYuXL8PjT7QjKhPKcG3LV67D2\n\
    \   uB73BxnvzNgk\"}\n   The public key from the target key is (hex):\n   3e b7\
    \ a8 29 b0 cd 20 f5 bc fc 0b 59 9b 6f ec cf\n   6d a4 62 71 07 bd b0 d4 f3 45\
    \ b4 30 27 d8 b9 72\n   fc 3e 34 fb 42 32 a1 3c a7 06 dc b5 7a ec 3d ae\n   07\
    \ bd c1 c6 7b f3 36 09\n   The ephemeral secret happens to be (hex):\n   9a 8f\
    \ 49 25 d1 51 9f 57 75 cf 46 b0 4b 58 00 d4\n   ee 9e e8 ba e8 bc 55 65 d4 98\
    \ c2 8d d9 c9 ba f5\n   74 a9 41 97 44 89 73 91 00 63 82 a6 f1 27 ab 1d\n   9a\
    \ c2 d8 c0 a5 98 72 6b\n   So the ephemeral public key is X448(ephkey, G) (hex):\n\
    \   9b 08 f7 cc 31 b7 e3 e6 7d 22 d5 ae a1 21 07 4a\n   27 3b d2 b8 3d e0 9c 63\
    \ fa a7 3d 2c 22 c5 d9 bb\n   c8 36 64 72 41 d9 53 d4 0c 5b 12 da 88 12 0d 53\n\
    \   17 7f 80 e5 32 c4 1f a0\n   This is packed into the ephemeral public key value\
    \ (a linebreak\n   inserted for formatting purposes):\n   {\"kty\":\"OKP\",\"\
    crv\":\"X448\",\n   \"x\":\"mwj3zDG34-Z9ItWuoSEHSic70rg94Jxj-qc9LCLF2bvINmRyQdlT1AxbEtqIEg1\n\
    \   TF3-A5TLEH6A\"}\n   So the protected header could be, for example (a linebreak\
    \ inserted\n   for formatting purposes):\n   {\"alg\":\"ECDH-ES+A256KW\",\"epk\"\
    :{\"kty\":\"OKP\",\"crv\":\"X448\",\n   \"x\":\"mwj3zDG34-Z9ItWuoSEHSic70rg94Jxj-qc9LCLF2bvINmRyQdlT1AxbEtqIEg1\n\
    \   TF3-A5TLEH6A\"},\"enc\":\"A256GCM\",\"kid\":\"Dave\"}\n   And the sender computes\
    \ the DH Z value as X448(ephkey,recv_pub)\n   (hex):\n   07 ff f4 18 1a c6 cc\
    \ 95 ec 1c 16 a9 4a 0f 74 d1\n   2d a2 32 ce 40 a7 75 52 28 1d 28 2b b6 0c 0b\
    \ 56\n   fd 24 64 c3 35 54 39 36 52 1c 24 40 30 85 d5 9a\n   44 9a 50 37 51 4a\
    \ 87 9d\n   The receiver computes the DH Z value as X448(seckey, ephkey_pub)\n\
    \   (hex):\n   07 ff f4 18 1a c6 cc 95 ec 1c 16 a9 4a 0f 74 d1\n   2d a2 32 ce\
    \ 40 a7 75 52 28 1d 28 2b b6 0c 0b 56\n   fd 24 64 c3 35 54 39 36 52 1c 24 40\
    \ 30 85 d5 9a\n   44 9a 50 37 51 4a 87 9d\n   This is the same as the sender's\
    \ value (both sides run this through\n   KDF before using it as the direct encryption\
    \ key or AES256-KW key).\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Michael B. Jones for his comments on an initial\
    \ draft of\n   this document and editorial help.\n   Thanks to Matt Miller for\
    \ some editorial help.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ilari Liusvaara\n   Independent\n   Email: ilariliusvaara@welho.com\n"
