- title: __initial_text__
  contents:
  - '                         The AES-CMAC Algorithm

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The National Institute of Standards and Technology (NIST) has\n\
    \   recently specified the Cipher-based Message Authentication Code\n   (CMAC),\
    \ which is equivalent to the One-Key CBC MAC1 (OMAC1) submitted\n   by Iwata and\
    \ Kurosawa.  This memo specifies an authentication\n   algorithm based on CMAC\
    \ with the 128-bit Advanced Encryption Standard\n   (AES).  This new authentication\
    \ algorithm is named AES-CMAC.  The\n   purpose of this document is to make the\
    \ AES-CMAC algorithm\n   conveniently available to the Internet Community.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Specification of AES-CMAC .......................................3\n  \
    \    2.1. Basic Definitions ..........................................3\n    \
    \  2.2. Overview ...................................................4\n      2.3.\
    \ Subkey Generation Algorithm ................................5\n      2.4. MAC\
    \ Generation Algorithm ...................................7\n      2.5. MAC Verification\
    \ Algorithm .................................9\n   3. Security Considerations\
    \ ........................................10\n   4. Test Vectors ...................................................11\n\
    \   5. Acknowledgement ................................................12\n  \
    \ 6. References .....................................................12\n    \
    \  6.1. Normative References ......................................12\n      6.2.\
    \ Informative References ....................................12\n   Appendix A.\
    \ Test Code .............................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The National Institute of Standards and Technology (NIST)\
    \ has\n   recently specified the Cipher-based Message Authentication Code\n  \
    \ (CMAC).  CMAC [NIST-CMAC] is a keyed hash function that is based on a\n   symmetric\
    \ key block cipher, such as the Advanced Encryption Standard\n   [NIST-AES]. \
    \ CMAC is equivalent to the One-Key CBC MAC1 (OMAC1)\n   submitted by Iwata and\
    \ Kurosawa [OMAC1a, OMAC1b].  OMAC1 is an\n   improvement of the eXtended Cipher\
    \ Block Chaining mode (XCBC)\n   submitted by Black and Rogaway [XCBCa, XCBCb],\
    \ which itself is an\n   improvement of the basic Cipher Block Chaining-Message\
    \ Authentication\n   Code (CBC-MAC).  XCBC efficiently addresses the security\
    \ deficiencies\n   of CBC-MAC, and OMAC1 efficiently reduces the key size of XCBC.\n\
    \   AES-CMAC provides stronger assurance of data integrity than a\n   checksum\
    \ or an error-detecting code.  The verification of a checksum\n   or an error-detecting\
    \ code detects only accidental modifications of\n   the data, while CMAC is designed\
    \ to detect intentional, unauthorized\n   modifications of the data, as well as\
    \ accidental modifications.\n   AES-CMAC achieves a security goal similar to that\
    \ of HMAC [RFC-HMAC].\n   Since AES-CMAC is based on a symmetric key block cipher,\
    \ AES, and\n   HMAC is based on a hash function, such as SHA-1, AES-CMAC is\n\
    \   appropriate for information systems in which AES is more readily\n   available\
    \ than a hash function.\n   This memo specifies the authentication algorithm based\
    \ on CMAC with\n   AES-128.  This new authentication algorithm is named AES-CMAC.\n"
- title: 2.  Specification of AES-CMAC
  contents:
  - '2.  Specification of AES-CMAC

    '
- title: 2.1.  Basic Definitions
  contents:
  - "2.1.  Basic Definitions\n   The following table describes the basic definitions\
    \ necessary to\n   explain the specification of AES-CMAC.\n   x || y         \
    \ Concatenation.\n                   x || y is the string x concatenated with\
    \ the string\n                   y.\n                   0000 || 1111 is 00001111.\n\
    \   x XOR y         Exclusive-OR operation.\n                   For two equal\
    \ length strings, x and y,\n                   x XOR y is their bit-wise exclusive-OR.\n\
    \   ceil(x)         Ceiling function.\n                   The smallest integer\
    \ no smaller than x.\n                   ceil(3.5) is 4.  ceil(5) is 5.\n   x\
    \ << 1          Left-shift of the string x by 1 bit.\n                   The most\
    \ significant bit disappears, and a zero\n                   comes into the least\
    \ significant bit.\n                   10010001 << 1 is 00100010.\n   0^n    \
    \         The string that consists of n zero-bits.\n                   0^3 means\
    \ 000 in binary format.\n                   10^4 means 10000 in binary format.\n\
    \                   10^i means 1 followed by i-times repeated\n              \
    \     zeros.\n   MSB(x)          The most-significant bit of the string x.\n \
    \                  MSB(10010000) means 1.\n   padding(x)      10^i padded output\
    \ of input x.\n                   It is described in detail in section 2.4.\n\
    \   Key             128-bit (16-octet) long key for AES-128.\n               \
    \    Denoted by K.\n   First subkey    128-bit (16-octet) long first subkey,\n\
    \                   derived through the subkey\n                   generation\
    \ algorithm from the key K.\n                   Denoted by K1.\n   Second subkey\
    \   128-bit (16-octet) long second subkey,\n                   derived through\
    \ the subkey\n                   generation algorithm from the key K.\n      \
    \             Denoted by K2.\n   Message         A message to be authenticated.\n\
    \                   Denoted by M.\n                   The message can be null,\
    \ which means that the length\n                   of M is 0.\n   Message length\
    \  The length of the message M in octets.\n                   Denoted by len.\n\
    \                   The minimum value of the length can be 0.  The\n         \
    \          maximum value of the length is not specified in\n                 \
    \  this document.\n   AES-128(K,M)    AES-128(K,M) is the 128-bit ciphertext of\
    \ AES-128\n                   for a 128-bit key, K, and a 128-bit message, M.\n\
    \   MAC             A 128-bit string that is the output of AES-CMAC.\n       \
    \            Denoted by T.\n                   Validating the MAC provides assurance\
    \ of the\n                   integrity and authenticity of the message from\n\
    \                   the source.\n   MAC length      By default, the length of\
    \ the output of AES-CMAC is\n                   128 bits.  It is possible to truncate\
    \ the MAC.\n                   The result of the truncation should be taken in\
    \ most\n                   significant bits first order.  The MAC length must\
    \ be\n                   specified before the communication starts, and\n    \
    \               it must not be changed during the lifetime of the\n          \
    \         key.\n"
- title: 2.2.  Overview
  contents:
  - "2.2.  Overview\n   AES-CMAC uses the Advanced Encryption Standard [NIST-AES]\
    \ as a\n   building block.  To generate a MAC, AES-CMAC takes a secret key, a\n\
    \   message of variable length, and the length of the message in octets\n   as\
    \ inputs and returns a fixed-bit string called a MAC.\n   The core of AES-CMAC\
    \ is the basic CBC-MAC.  For a message, M, to be\n   authenticated, the CBC-MAC\
    \ is applied to M.  There are two cases of\n   operation in CMAC.  Figure 2.1\
    \ illustrates the operation of CBC-MAC\n   in both cases.  If the size of the\
    \ input message block is equal to a\n   positive multiple of the block size (namely,\
    \ 128 bits), the last\n   block shall be exclusive-OR'ed with K1 before processing.\
    \  Otherwise,\n   the last block shall be padded with 10^i (notation is described\
    \ in\n   section 2.1) and exclusive-OR'ed with K2.  The result of the previous\n\
    \   process will be the input of the last encryption.  The output of\n   AES-CMAC\
    \ provides data integrity of the whole input message.\n +-----+     +-----+  \
    \   +-----+     +-----+     +-----+     +---+----+\n | M_1 |     | M_2 |     |\
    \ M_n |     | M_1 |     | M_2 |     |M_n|10^i|\n +-----+     +-----+     +-----+\
    \     +-----+     +-----+     +---+----+\n    |           |           |   +--+\
    \    |           |           |   +--+\n    |     +--->(+)    +--->(+)<-|K1|  \
    \  |     +--->(+)    +--->(+)<-|K2|\n    |     |     |     |     |   +--+    |\
    \     |     |     |     |   +--+\n +-----+  |  +-----+  |  +-----+     +-----+\
    \  |  +-----+  |  +-----+\n |AES_K|  |  |AES_K|  |  |AES_K|     |AES_K|  |  |AES_K|\
    \  |  |AES_K|\n +-----+  |  +-----+  |  +-----+     +-----+  |  +-----+  |  +-----+\n\
    \    |     |     |     |     |           |     |     |     |     |\n    +-----+\
    \     +-----+     |           +-----+     +-----+     |\n                    \
    \        |                                   |\n                         +-----+\
    \                              +-----+\n                         |  T  |     \
    \                         |  T  |\n                         +-----+          \
    \                    +-----+\n             (a) positive multiple block length\
    \         (b) otherwise\n          Figure 2.1.  Illustration of the two cases\
    \ of AES-CMAC\n   AES_K is AES-128 with key K.\n   The message M is divided into\
    \ blocks M_1,...,M_n,\n   where M_i is the i-th message block.\n   The length\
    \ of M_i is 128 bits for i = 1,...,n-1, and\n   the length of the last block,\
    \ M_n, is less than or equal to 128 bits.\n   K1 is the subkey for the case (a),\
    \ and\n   K2 is the subkey for the case (b).\n   K1 and K2 are generated by the\
    \ subkey generation algorithm\n   described in section 2.3.\n"
- title: 2.3.  Subkey Generation Algorithm
  contents:
  - "2.3.  Subkey Generation Algorithm\n   The subkey generation algorithm, Generate_Subkey(),\
    \ takes a secret\n   key, K, which is just the key for AES-128.\n   The outputs\
    \ of the subkey generation algorithm are two subkeys, K1\n   and K2.  We write\
    \ (K1,K2) := Generate_Subkey(K).\n   Subkeys K1 and K2 are used in both MAC generation\
    \ and MAC\n   verification algorithms.  K1 is used for the case where the length\
    \ of\n   the last block is equal to the block length.  K2 is used for the case\n\
    \   where the length of the last block is less than the block length.\n   Figure\
    \ 2.2 specifies the subkey generation algorithm.\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   +                    Algorithm Generate_Subkey                      +\n  \
    \ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   +\
    \                                                                   +\n   +  \
    \ Input    : K (128-bit key)                                      +\n   +   Output\
    \   : K1 (128-bit first subkey)                            +\n   +           \
    \   K2 (128-bit second subkey)                           +\n   +-------------------------------------------------------------------+\n\
    \   +                                                                   +\n  \
    \ +   Constants: const_Zero is 0x00000000000000000000000000000000     +\n   +\
    \              const_Rb   is 0x00000000000000000000000000000087     +\n   +  \
    \ Variables: L          for output of AES-128 applied to 0^128    +\n   +    \
    \                                                               +\n   +   Step\
    \ 1.  L := AES-128(K, const_Zero);                           +\n   +   Step 2.\
    \  if MSB(L) is equal to 0                                +\n   +            then\
    \    K1 := L << 1;                                  +\n   +            else  \
    \  K1 := (L << 1) XOR const_Rb;                   +\n   +   Step 3.  if MSB(K1)\
    \ is equal to 0                               +\n   +            then    K2 :=\
    \ K1 << 1;                                 +\n   +            else    K2 := (K1\
    \ << 1) XOR const_Rb;                  +\n   +   Step 4.  return K1, K2;     \
    \                                    +\n   +                                 \
    \                                  +\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \                Figure 2.2.  Algorithm Generate_Subkey\n   In step 1, AES-128\
    \ with key K is applied to an all-zero input block.\n   In step 2, K1 is derived\
    \ through the following operation:\n   If the most significant bit of L is equal\
    \ to 0, K1 is the left-shift\n   of L by 1 bit.\n   Otherwise, K1 is the exclusive-OR\
    \ of const_Rb and the left-shift of L\n   by 1 bit.\n   In step 3, K2 is derived\
    \ through the following operation:\n   If the most significant bit of K1 is equal\
    \ to 0, K2 is the left-shift\n   of K1 by 1 bit.\n   Otherwise, K2 is the exclusive-OR\
    \ of const_Rb and the left-shift of\n   K1 by 1 bit.\n   In step 4, (K1,K2) :=\
    \ Generate_Subkey(K) is returned.\n   The mathematical meaning of the procedures\
    \ in steps 2 and 3,\n   including const_Rb, can be found in [OMAC1a].\n"
- title: 2.4.  MAC Generation Algorithm
  contents:
  - "2.4.  MAC Generation Algorithm\n   The MAC generation algorithm, AES-CMAC(),\
    \ takes three inputs, a\n   secret key, a message, and the length of the message\
    \ in octets.  The\n   secret key, denoted by K, is just the key for AES-128. \
    \ The message\n   and its length in octets are denoted by M and len, respectively.\
    \  The\n   message M is denoted by the sequence of M_i, where M_i is the i-th\n\
    \   message block.  That is, if M consists of n blocks, then M is written\n  \
    \ as\n    -   M = M_1 || M_2 || ... || M_{n-1} || M_n\n   The length of M_i is\
    \ 128 bits for i = 1,...,n-1, and the length of\n   the last block M_n is less\
    \ than or equal to 128 bits.\n   The output of the MAC generation algorithm is\
    \ a 128-bit string,\n   called a MAC, which is used to validate the input message.\
    \  The MAC\n   is denoted by T, and we write T := AES-CMAC(K,M,len).  Validating\
    \ the\n   MAC provides assurance of the integrity and authenticity of the\n  \
    \ message from the source.\n   It is possible to truncate the MAC.  According\
    \ to [NIST-CMAC], at\n   least a 64-bit MAC should be used as protection against\
    \ guessing\n   attacks.  The result of truncation should be taken in most\n  \
    \ significant bits first order.\n   The block length of AES-128 is 128 bits (16\
    \ octets).  There is a\n   special treatment if the length of the message is not\
    \ a positive\n   multiple of the block length.  The special treatment is to pad\
    \ M with\n   the bit-string 10^i to adjust the length of the last block up to\
    \ the\n   block length.\n   For an input string x of r-octets, where 0 <= r <\
    \ 16, the padding\n   function, padding(x), is defined as follows:\n   -   padding(x)\
    \ = x || 10^i      where i is 128-8*r-1\n   That is, padding(x) is the concatenation\
    \ of x and a single '1',\n   followed by the minimum number of '0's, so that the\
    \ total length is\n   equal to 128 bits.\n   Figure 2.3 describes the MAC generation\
    \ algorithm.\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   +                   Algorithm AES-CMAC                              +\n  \
    \ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   +\
    \                                                                   +\n   +  \
    \ Input    : K    ( 128-bit key )                                 +\n   +    \
    \        : M    ( message to be authenticated )                 +\n   +      \
    \      : len  ( length of the message in octets )             +\n   +   Output\
    \   : T    ( message authentication code )                 +\n   +           \
    \                                                        +\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   +   Constants: const_Zero is 0x00000000000000000000000000000000     +\n  \
    \ +              const_Bsize is 16                                    +\n   +\
    \                                                                   +\n   +  \
    \ Variables: K1, K2 for 128-bit subkeys                           +\n   +    \
    \          M_i is the i-th block (i=1..ceil(len/const_Bsize))   +\n   +      \
    \        M_last is the last block xor-ed with K1 or K2        +\n   +        \
    \      n      for number of blocks to be processed          +\n   +          \
    \    r      for number of octets of last block            +\n   +            \
    \  flag   for denoting if last block is complete or not +\n   +              \
    \                                                     +\n   +   Step 1.  (K1,K2)\
    \ := Generate_Subkey(K);                         +\n   +   Step 2.  n := ceil(len/const_Bsize);\
    \                            +\n   +   Step 3.  if n = 0                     \
    \                          +\n   +            then                           \
    \                        +\n   +                 n := 1;                     \
    \                      +\n   +                 flag := false;                \
    \                    +\n   +            else                                 \
    \                  +\n   +                 if len mod const_Bsize is 0       \
    \                +\n   +                 then flag := true;                  \
    \              +\n   +                 else flag := false;                   \
    \            +\n   +                                                         \
    \          +\n   +   Step 4.  if flag is true                                \
    \        +\n   +            then M_last := M_n XOR K1;                       \
    \      +\n   +            else M_last := padding(M_n) XOR K2;                \
    \    +\n   +   Step 5.  X := const_Zero;                                     \
    \  +\n   +   Step 6.  for i := 1 to n-1 do                                   +\n\
    \   +                begin                                              +\n  \
    \ +                  Y := X XOR M_i;                                  +\n   +\
    \                  X := AES-128(K,Y);                               +\n   +  \
    \              end                                                +\n   +    \
    \        Y := M_last XOR X;                                     +\n   +      \
    \      T := AES-128(K,Y);                                     +\n   +   Step 7.\
    \  return T;                                              +\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \                      Figure 2.3.  Algorithm AES-CMAC\n   In step 1, subkeys\
    \ K1 and K2 are derived from K through the subkey\n   generation algorithm.\n\
    \   In step 2, the number of blocks, n, is calculated.  The number of\n   blocks\
    \ is the smallest integer value greater than or equal to the\n   quotient determined\
    \ by dividing the length parameter by the block\n   length, 16 octets.\n   In\
    \ step 3, the length of the input message is checked.  If the input\n   length\
    \ is 0 (null), the number of blocks to be processed shall be 1,\n   and the flag\
    \ shall be marked as not-complete-block (false).\n   Otherwise, if the last block\
    \ length is 128 bits, the flag is marked\n   as complete-block (true); else mark\
    \ the flag as not-complete-block\n   (false).\n   In step 4, M_last is calculated\
    \ by exclusive-OR'ing M_n and one of\n   the previously calculated subkeys.  If\
    \ the last block is a complete\n   block (true), then M_last is the exclusive-OR\
    \ of M_n and K1.\n   Otherwise, M_last is the exclusive-OR of padding(M_n) and\
    \ K2.\n   In step 5, the variable X is initialized.\n   In step 6, the basic CBC-MAC\
    \ is applied to M_1,...,M_{n-1},M_last.\n   In step 7, the 128-bit MAC, T := AES-CMAC(K,M,len),\
    \ is returned.\n   If necessary, the MAC is truncated before it is returned.\n"
- title: 2.5.  MAC Verification Algorithm
  contents:
  - "2.5.  MAC Verification Algorithm\n   The verification of the MAC is simply done\
    \ by a MAC recomputation.\n   We use the MAC generation algorithm, which is described\
    \ in section\n   2.4.\n   The MAC verification algorithm, Verify_MAC(), takes\
    \ four inputs, a\n   secret key, a message, the length of the message in octets,\
    \ and the\n   received MAC.  These are denoted by K, M, len, and T', respectively.\n\
    \   The output of the MAC verification algorithm is either INVALID or\n   VALID.\n\
    \   Figure 2.4 describes the MAC verification algorithm.\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   +                      Algorithm Verify_MAC                         +\n  \
    \ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   +\
    \                                                                   +\n   +  \
    \ Input    : K    ( 128-bit Key )                                 +\n   +    \
    \        : M    ( message to be verified )                      +\n   +      \
    \      : len  ( length of the message in octets )             +\n   +        \
    \    : T'   ( the received MAC to be verified )             +\n   +   Output \
    \  : INVALID or VALID                                     +\n   +            \
    \                                                       +\n   +-------------------------------------------------------------------+\n\
    \   +                                                                   +\n  \
    \ +   Step 1.  T* := AES-CMAC(K,M,len);                               +\n   +\
    \   Step 2.  if T* is equal to T'                                   +\n   +  \
    \          then                                                   +\n   +    \
    \             return VALID;                                     +\n   +      \
    \      else                                                   +\n   +        \
    \         return INVALID;                                   +\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \                    Figure 2.4.  Algorithm Verify_MAC\n   In step 1, T* is derived\
    \ from K, M, and len through the MAC\n   generation algorithm.\n   In step 2,\
    \ T* and T' are compared.  If T* is equal to T', then return\n   VALID; otherwise\
    \ return INVALID.\n   If the output is INVALID, then the message is definitely\
    \ not\n   authentic, i.e., it did not originate from a source that executed the\n\
    \   generation process on the message to produce the purported MAC.\n   If the\
    \ output is VALID, then the design of the AES-CMAC provides\n   assurance that\
    \ the message is authentic and, hence, was not corrupted\n   in transit; however,\
    \ this assurance, as for any MAC algorithm, is not\n   absolute.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   The security provided by AES-CMAC is built on\
    \ the strong\n   cryptographic algorithm AES.  However, as is true with any\n\
    \   cryptographic algorithm, part of its strength lies in the secret key,\n  \
    \ K, and the correctness of the implementation in all of the\n   participating\
    \ systems.  If the secret key is compromised or\n   inappropriately shared, it\
    \ guarantees neither authentication nor\n   integrity of message at all.  The\
    \ secret key shall be generated in a\n   way that meets the pseudo randomness\
    \ requirement of RFC 4086\n   [RFC4086] and should be kept safe.  If and only\
    \ if AES-CMAC is used\n   properly it provides the authentication and integrity\
    \ that meet the\n   best current practice of message authentication.\n"
- title: 4.  Test Vectors
  contents:
  - "4.  Test Vectors\n   The following test vectors are the same as those of [NIST-CMAC].\
    \  The\n   following vectors are also the output of the test program in Appendix\n\
    \   A.\n   --------------------------------------------------\n   Subkey Generation\n\
    \   K              2b7e1516 28aed2a6 abf71588 09cf4f3c\n   AES-128(key,0) 7df76b0c\
    \ 1ab899b3 3e42f047 b91b546f\n   K1             fbeed618 35713366 7c85e08f 7236a8de\n\
    \   K2             f7ddac30 6ae266cc f90bc11e e46d513b\n   --------------------------------------------------\n\
    \   --------------------------------------------------\n   Example 1: len = 0\n\
    \   M              <empty string>\n   AES-CMAC       bb1d6929 e9593728 7fa37d12\
    \ 9b756746\n   --------------------------------------------------\n   Example\
    \ 2: len = 16\n   M              6bc1bee2 2e409f96 e93d7e11 7393172a\n   AES-CMAC\
    \       070a16b4 6b4d4144 f79bdd9d d04a287c\n   --------------------------------------------------\n\
    \   Example 3: len = 40\n   M              6bc1bee2 2e409f96 e93d7e11 7393172a\n\
    \                  ae2d8a57 1e03ac9c 9eb76fac 45af8e51\n                  30c81c46\
    \ a35ce411\n   AES-CMAC       dfa66747 de9ae630 30ca3261 1497c827\n   --------------------------------------------------\n\
    \   Example 4: len = 64\n   M              6bc1bee2 2e409f96 e93d7e11 7393172a\n\
    \                  ae2d8a57 1e03ac9c 9eb76fac 45af8e51\n                  30c81c46\
    \ a35ce411 e5fbc119 1a0a52ef\n                  f69f2445 df4f9b17 ad2b417b e66c3710\n\
    \   AES-CMAC       51f0bebf 7e3b9d92 fc497417 79363cfe\n   --------------------------------------------------\n"
- title: 5.  Acknowledgement
  contents:
  - "5.  Acknowledgement\n   Portions of the text herein are borrowed from [NIST-CMAC].\
    \  We\n   appreciate the OMAC1 authors, the SP 800-38B author, and Russ Housley\n\
    \   for his useful comments and guidance, which have been incorporated\n   herein.\
    \  We also thank Alfred Hoenes for many useful comments.  This\n   memo was prepared\
    \ while Tetsu Iwata was at Ibaraki University, Japan.\n   We acknowledge the support\
    \ from the following grants:  Collaborative\n   Technology Alliance (CTA) from\
    \ US Army Research Laboratory, DAAD19-\n   01-2-0011; Presidential Award from\
    \ Army Research Office, W911NF-05-\n   1-0491; NSF CAREER ANI-0093187.  Results\
    \ do not reflect any position\n   of the funding agencies.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [NIST-CMAC] NIST, Special Publication 800-38B,\
    \ \"Recommendation for\n               Block Cipher Modes of Operation: The CMAC\
    \ Mode for\n               Authentication\", May 2005.\n   [NIST-AES]  NIST, FIPS\
    \ 197, \"Advanced Encryption Standard (AES)\",\n               November 2001.\n\
    \               http://csrc.nist.gov/publications/fips/fips197/fips-\n       \
    \        197.pdf\n   [RFC4086]   Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n\
    \               \"Randomness Requirements for Security\", BCP 106, RFC\n     \
    \          4086, June 2005.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC-HMAC]  Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC:\n               Keyed-Hashing for Message Authentication\"\
    , RFC 2104,\n               February 1997.\n   [OMAC1a]    Tetsu Iwata and Kaoru\
    \ Kurosawa, \"OMAC: One-Key CBC MAC\",\n               Fast Software Encryption,\
    \ FSE 2003, LNCS 2887, pp. 129-\n               153, Springer-Verlag, 2003.\n\
    \   [OMAC1b]    Tetsu Iwata and Kaoru Kurosawa, \"OMAC: One-Key CBC MAC\",\n \
    \              Submission to NIST, December 2002.  Available from the\n      \
    \         NIST modes of operation web site at\n               http://csrc.nist.gov/CryptoToolkit/modes/proposedmodes/\n\
    \               omac/omac-spec.pdf\n   [XCBCa]     John Black and Phillip Rogaway,\
    \ \"A Suggestion for\n               Handling Arbitrary-Length Messages with the\
    \ CBC MAC\",\n               NIST Second Modes of Operation Workshop, August 2001.\n\
    \               Available from the NIST modes of operation web site at\n     \
    \          http://csrc.nist.gov/CryptoToolkit/modes/proposedmodes/\n         \
    \      xcbc-mac/xcbc-mac-spec.pdf\n   [XCBCb]     John Black and Phillip Rogaway,\
    \ \"CBC MACs for Arbitrary-\n               Length Messages: The Three-Key Constructions\"\
    , Journal of\n               Cryptology, Vol. 18, No. 2, pp. 111-132, Springer-Verlag,\n\
    \               Spring 2005.\n"
- title: Appendix A.  Test Code
  contents:
  - "Appendix A.  Test Code\n  This C source is designed to generate the test vectors\
    \ that appear in\n  this memo to verify correctness of the algorithm.  The source\
    \ code is\n  not intended for use in commercial products.\n  /****************************************************************/\n\
    \  /* AES-CMAC with AES-128 bit                                    */\n  /* CMAC\
    \     Algorithm described in SP800-38B                    */\n  /* Author: Junhyuk\
    \ Song (junhyuk.song@samsung.com)              */\n  /*         Jicheol Lee  (jicheol.lee@samsung.com)\
    \               */\n  /****************************************************************/\n\
    \  #include <stdio.h>\n  /* For CMAC Calculation */\n  unsigned char const_Rb[16]\
    \ = {\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00,\
    \ 0x00, 0x00, 0x00, 0x00, 0x00, 0x87\n  };\n  unsigned char const_Zero[16] = {\n\
    \      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00,\
    \ 0x00, 0x00, 0x00, 0x00, 0x00\n  };\n  /* Basic Functions */\n  void xor_128(unsigned\
    \ char *a, unsigned char *b, unsigned char *out)\n  {\n      int i;\n      for\
    \ (i=0;i<16; i++)\n      {\n          out[i] = a[i] ^ b[i];\n      }\n  }\n  void\
    \ print_hex(char *str, unsigned char *buf, int len)\n  {\n      int     i;\n \
    \     for ( i=0; i<len; i++ ) {\n          if ( (i % 16) == 0 && i != 0 ) printf(str);\n\
    \          printf(\"%02x\", buf[i]);\n          if ( (i % 4) == 3 ) printf(\"\
    \ \");\n          if ( (i % 16) == 15 ) printf(\"\\n\");\n      }\n      if (\
    \ (i % 16) != 0 ) printf(\"\\n\");\n  }\n  void print128(unsigned char *bytes)\n\
    \  {\n      int         j;\n      for (j=0; j<16;j++) {\n          printf(\"%02x\"\
    ,bytes[j]);\n          if ( (j%4) == 3 ) printf(\" \");\n      }\n  }\n  void\
    \ print96(unsigned char *bytes)\n  {\n      int         j;\n      for (j=0; j<12;j++)\
    \ {\n          printf(\"%02x\",bytes[j]);\n          if ( (j%4) == 3 ) printf(\"\
    \ \");\n      }\n  }\n  /* AES-CMAC Generation Function */\n  void leftshift_onebit(unsigned\
    \ char *input,unsigned char *output)\n  {\n      int         i;\n      unsigned\
    \ char overflow = 0;\n      for ( i=15; i>=0; i-- ) {\n          output[i] = input[i]\
    \ << 1;\n          output[i] |= overflow;\n          overflow = (input[i] & 0x80)?1:0;\n\
    \      }\n      return;\n  }\n  void generate_subkey(unsigned char *key, unsigned\
    \ char *K1, unsigned\n                       char *K2)\n  {\n      unsigned char\
    \ L[16];\n      unsigned char Z[16];\n      unsigned char tmp[16];\n      int\
    \ i;\n      for ( i=0; i<16; i++ ) Z[i] = 0;\n      AES_128(key,Z,L);\n      if\
    \ ( (L[0] & 0x80) == 0 ) { /* If MSB(L) = 0, then K1 = L << 1 */\n          leftshift_onebit(L,K1);\n\
    \      } else {    /* Else K1 = ( L << 1 ) (+) Rb */\n          leftshift_onebit(L,tmp);\n\
    \          xor_128(tmp,const_Rb,K1);\n      }\n      if ( (K1[0] & 0x80) == 0\
    \ ) {\n          leftshift_onebit(K1,K2);\n      } else {\n          leftshift_onebit(K1,tmp);\n\
    \          xor_128(tmp,const_Rb,K2);\n      }\n      return;\n  }\n  void padding\
    \ ( unsigned char *lastb, unsigned char *pad, int length )\n  {\n      int   \
    \      j;\n      /* original last block */\n      for ( j=0; j<16; j++ ) {\n \
    \         if ( j < length ) {\n              pad[j] = lastb[j];\n          } else\
    \ if ( j == length ) {\n              pad[j] = 0x80;\n          } else {\n   \
    \           pad[j] = 0x00;\n          }\n      }\n  }\n  void AES_CMAC ( unsigned\
    \ char *key, unsigned char *input, int length,\n                  unsigned char\
    \ *mac )\n  {\n      unsigned char       X[16],Y[16], M_last[16], padded[16];\n\
    \      unsigned char       K1[16], K2[16];\n      int         n, i, flag;\n  \
    \    generate_subkey(key,K1,K2);\n      n = (length+15) / 16;       /* n is number\
    \ of rounds */\n      if ( n == 0 ) {\n          n = 1;\n          flag = 0;\n\
    \      } else {\n          if ( (length%16) == 0 ) { /* last block is a complete\
    \ block */\n              flag = 1;\n          } else { /* last block is not complete\
    \ block */\n              flag = 0;\n          }\n      }\n      if ( flag ) {\
    \ /* last block is complete block */\n          xor_128(&input[16*(n-1)],K1,M_last);\n\
    \      } else {\n          padding(&input[16*(n-1)],padded,length%16);\n     \
    \     xor_128(padded,K2,M_last);\n      }\n      for ( i=0; i<16; i++ ) X[i] =\
    \ 0;\n      for ( i=0; i<n-1; i++ ) {\n          xor_128(X,&input[16*i],Y); /*\
    \ Y := Mi (+) X  */\n          AES_128(key,Y,X);      /* X := AES-128(KEY, Y);\
    \ */\n      }\n      xor_128(X,M_last,Y);\n      AES_128(key,Y,X);\n      for\
    \ ( i=0; i<16; i++ ) {\n          mac[i] = X[i];\n      }\n  }\n  int main()\n\
    \  {\n      unsigned char L[16], K1[16], K2[16], T[16], TT[12];\n      unsigned\
    \ char M[64] = {\n          0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,\n\
    \          0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,\n          0xae, 0x2d,\
    \ 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,\n          0x9e, 0xb7, 0x6f, 0xac, 0x45,\
    \ 0xaf, 0x8e, 0x51,\n          0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,\n\
    \          0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,\n          0xf6, 0x9f,\
    \ 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,\n          0xad, 0x2b, 0x41, 0x7b, 0xe6,\
    \ 0x6c, 0x37, 0x10\n      };\n      unsigned char key[16] = {\n          0x2b,\
    \ 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,\n          0xab, 0xf7, 0x15, 0x88,\
    \ 0x09, 0xcf, 0x4f, 0x3c\n      };\n      printf(\"--------------------------------------------------\\\
    n\");\n      printf(\"K              \"); print128(key); printf(\"\\n\");\n  \
    \    printf(\"\\nSubkey Generation\\n\");\n      AES_128(key,const_Zero,L);\n\
    \      printf(\"AES_128(key,0) \"); print128(L); printf(\"\\n\");\n      generate_subkey(key,K1,K2);\n\
    \      printf(\"K1             \"); print128(K1); printf(\"\\n\");\n      printf(\"\
    K2             \"); print128(K2); printf(\"\\n\");\n      printf(\"\\nExample\
    \ 1: len = 0\\n\");\n      printf(\"M              \"); printf(\"<empty string>\\\
    n\");\n      AES_CMAC(key,M,0,T);\n      printf(\"AES_CMAC       \"); print128(T);\
    \ printf(\"\\n\");\n      printf(\"\\nExample 2: len = 16\\n\");\n      printf(\"\
    M              \"); print_hex(\"                \",M,16);\n      AES_CMAC(key,M,16,T);\n\
    \      printf(\"AES_CMAC       \"); print128(T); printf(\"\\n\");\n      printf(\"\
    \\nExample 3: len = 40\\n\");\n      printf(\"M              \"); print_hex(\"\
    \               \",M,40);\n      AES_CMAC(key,M,40,T);\n      printf(\"AES_CMAC\
    \       \"); print128(T); printf(\"\\n\");\n      printf(\"\\nExample 4: len =\
    \ 64\\n\");\n      printf(\"M              \"); print_hex(\"               \"\
    ,M,64);\n      AES_CMAC(key,M,64,T);\n      printf(\"AES_CMAC       \"); print128(T);\
    \ printf(\"\\n\");\n      printf(\"--------------------------------------------------\\\
    n\");\n      return 0;\n  }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n  Junhyuk Song\n  University of Washington\n  Samsung Electronics\n\
    \  Phone: (206) 853-5843\n  EMail: songlee@ee.washington.edu, junhyuk.song@samsung.com\n\
    \  Jicheol Lee\n  Samsung Electronics\n  Phone: +82-31-279-3605\n  EMail: jicheol.lee@samsung.com\n\
    \  Radha Poovendran\n  Network Security Lab\n  University of Washington\n  Phone:\
    \ (206) 221-6512\n  EMail: radha@ee.washington.edu\n  Tetsu Iwata\n  Nagoya University\n\
    \  EMail: iwata@cse.nagoya-u.ac.jp\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
