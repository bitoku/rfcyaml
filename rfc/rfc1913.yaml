- title: __initial_text__
  contents:
  - "               Architecture of the Whois++ Index Service\nStatus of this Memo\n\
    \   This document specifies an Internet standards track protocol for the\n   Internet\
    \ community, and requests discussion and suggestions for\n   improvements.  Please\
    \ refer to the current edition of the \"Internet\n   Official Protocol Standards\"\
    \ (STD 1) for the standardization state\n   and status of this protocol.  Distribution\
    \ of this memo is unlimited.\nAbstract\n   The authors describe an architecture\
    \ for indexing in distributed\n   databases, and apply this to the WHOIS++ protocol.\n\
    1. Purpose:\n   The WHOIS++ directory service [Deutsch, et al, 1995] is intended\
    \ to\n   provide a simple, extensible directory service predicated on a\n   template-based\
    \ information model and a flexible query language. This\n   document describes\
    \ a general architecture designed for indexing\n   distributed databases, and\
    \ then applys that architecture to link\n   together many of these WHOIS++ servers\
    \ into a distributed, searchable\n   wide area directory service.\n2. Scope:\n\
    \   This document details a distributed, easily maintained architecture\n   for\
    \ providing a unified index to a large number of distributed\n   WHOIS++ servers.\
    \ This architecture can be used with systems other\n   than WHOIS++ to provide\
    \ a distributed directory service which is also\n   searchable.\n3. Motivation\
    \ and Introduction:\n   It seems clear that with the vast amount of directory\
    \ information\n   potentially available on the Internet, it is simply not feasible\
    \ to\n   build a centralized directory to serve all this information. If we\n\
    \   are to distribute the directory service, the easiest (although not\n   necessarily\
    \ the best) way of building the directory service is to\n   build a hierarchy\
    \ of directory information collection agents. In this\n   architecture, a directory\
    \ query is delivered to a certain agent in\n   the tree, and then handed up or\
    \ down, as appropriate, so that the\n   query is delivered to the agent which\
    \ holds the information which\n   fills the query.  This approach has been tried\
    \ before, most notably\n   in some implementations of the X.500 standard. However,\
    \ there are\n   number of major flaws with the approach as it has been taken.\
    \ This\n   new Index Service is designed to fix these flaws.\n3.1. The search\
    \ problem\n   One of the primary assumptions made by recent implementations of\n\
    \   distributed directory services is that every entry resides in some\n   location\
    \ in a hierarchical name space. While this arrangement is\n   ideal for reading\
    \ the entry once one knows its location, it is not as\n   good when one is searching\
    \ for the location in the namespace of those\n   entries which meet some set of\
    \ criteria. If the only criteria we know\n   about a desired entry are items which\
    \ do not appear in the namespace,\n   we are forced to do a global query. Whenever\
    \ we issue a global query\n   (at the root of the namespace), or a query at the\
    \ top of a given\n   subtree in the namespace, that query is replicated to \"\
    all\" subtrees\n   of the starting point. The replication of the query to all\
    \ subtrees\n   is not necessarily a problem; queries are cheap. However, every\n\
    \   server to which the query has been replicated must process that\n   query,\
    \ even if it has no entries which match the specified criteria.\n   This part\
    \ of the global query processing is quite expensive. A poorly\n   designed namespace\
    \ or a thin namespace can cause the vast majority of\n   queries to be replicated\
    \ globally, but a very broad namespace can\n   cause its own navigation problems.\
    \ Because of these problems, search\n   has been turned off at high levels of\
    \ the X.500 namespace.\n3.2. The location problem\n   With global search turned\
    \ off, one must know in advance how the name\n   space is laid out so that one\
    \ can guide a query to a proper location.\n   Also, the layout of the namespace\
    \ then becomes critical to a user's\n   ability to find the desired information.\
    \ Thus there are endless\n   battles about how to lay out the name space to best\
    \ serve a given set\n   of users, and enormous headaches whenever it becomes apparent\
    \ that\n   the current namespace is unsuited to the current usages and must be\n\
    \   changed (as recently happened in X.500). Also, assuming one does\n   impose\
    \ multiple hierarchies on the entries through use of the\n   namespace, the mechanisms\
    \ to maintain these multiple hierarchies in\n   X.500 do not exist yet, and it\
    \ is possible to move entries out from\n   under their pointers.  Also, there\
    \ is as yet no agreement on how the\n   X.500 namespace should look even for the\
    \ White Pages types of\n   information that is currently installed in the X.500\
    \ pilot project.\n3.3. The Yellow Pages problem\n   Current implementations of\
    \ this hierarchical architecture have also\n   been unsuited to solving the Yellow\
    \ Pages problem; that is, the\n   problem of easily and flexibly building special-purpose\
    \ directories\n   (say of molecular biologists) and of automatically maintaining\
    \ these\n   directories once they have been built. In particular, the attributes\n\
    \   appropriate to the new directory must be built into the namespace\n   because\
    \ that is the only way to segregate related entries into a\n   place where they\
    \ can be found without a global search. Also, there is\n   a classification problem;\
    \ how does one adequately specify the proper\n   categories so that people other\
    \ than the creator of the directory can\n   find the correct subtree? Additionally,\
    \ there is the problem of\n   actually finding the data to put into the subtree;\
    \ if one must\n   traverse the hierarchy to find the data, we have to look globally\
    \ for\n   the proper entries.\n3.4. Solutions\n   The problems examined in this\
    \ section can be addressed by a\n   combination of two new techniques: directory\
    \ meshes and forward\n   knowledge.\n4. Directory meshes and forward knowledge\n\
    \   We'll hold off for a moment on describing the actual architecture\n   used\
    \ in our solution to these problems and concentrate on a high\n   level description\
    \ of what solutions are provided by our conceptual\n   approach. To begin with,\
    \ although every entry in WHOIS++ does indeed\n   have a unique identifier (resides\
    \ in a specific location in the\n   namespace) the navigational algorithms to\
    \ reach a specific entry do\n   not necessarily depend on the identifier the entry\
    \ has been assigned.\n   The Index Service gets around the namespace and hierarchy\
    \ problems by\n   creating a directory mesh on top of the entries.  Each layer\
    \ of the\n   mesh has a set of 'forward knowledge' which indicates the contents\
    \ of\n   the various servers at the next lower layer of the mesh. Thus when a\n\
    \   query is received by a server in a given layer of the mesh, it can\n   prune\
    \ the search tree and hand the query off to only those lower\n   level servers\
    \ which have indicated that they might be able to answer\n   it. Thus search becomes\
    \ feasible at all levels of the mesh. In the\n   current version of this architecture,\
    \ we have chosen a certain set of\n   information to hand up the mesh as forward\
    \ knowledge. This may or may\n   not be exactly the set of information required\
    \ to construct a truly\n   searchable directory, but the protocol itself doesn't\
    \ restrict the\n   types of information which can be handed around.\n   In addition,\
    \ the protocols designed to maintain the forward knowledge\n   will also work\
    \ perfectly well to provide replication of servers for\n   redundancy and robustness.\
    \ In this case, the forward knowledge handed\n   around by the protocols is the\
    \ entire database of entries held by the\n   replicated server.\n   Another benefit\
    \ provided by the mesh of index servers is that since\n   the entry identification\
    \ scheme has been decoupled from the\n   navigation service, multiple hierarchies\
    \ can be built and easily\n   maintained on top of the existing data. Also, the\
    \ user does not need\n   to know in advance where in the mesh the entry is contained.\n\
    \   Also, the Yellow Pages problem now becomes tractable, as the index\n   servers\
    \ can pick and choose between information proffered by a given\n   server; because\
    \ we have an architecture that allows for automatic\n   polling of data, special\
    \ purpose directories become easy to construct\n   and to maintain.\n5. Components\
    \ of the Index Service:\n5.1. WHOIS++ servers\n   The whois++ service is described\
    \ in [Deutsch, et al, 1995]. As that\n   service specifies only the query language,\
    \ the information model, and\n   the server responses, whois++ services can be\
    \ provided by a wide\n   variety of databases and directory services. However,\
    \ to participate\n   in the Index Service, that underlying database must also\
    \ be able to\n   generate a 'centroid', or some other type of forward knowledge,\
    \ for\n   the data it serves.\n5.2. Centroids as forward knowledge\n   The centroid\
    \ of a server is comprised of a list of the templates and\n   attributes used\
    \ by that server, and a word list for each attribute.\n   The word list for a\
    \ given attribute contains one occurrence of every\n   word which appears at least\
    \ once in that attribute in some record in\n   that server's data, and nothing\
    \ else.\n   A word is any token delimited by blank spaces, newlines, or the '@'\n\
    \   character, in the value of an attribute.\n   For example, if a whois++ server\
    \ contains exactly three records, as\n   follows:\n   Record 1               \
    \         Record 2\n   Template: User                  Template: User\n   First\
    \ Name: John                First Name: Joe\n   Last Name: Smith             \
    \   Last Name: Smith\n   Favourite Drink: Labatt Beer    Favourite Drink: Molson\
    \ Beer\n   Record 3\n   Template: Domain\n   Domain Name: foo.edu\n   Contact\
    \ Name: Mike Foobar\n   the centroid for this server would be\n   Template:  \
    \       User\n   First Name:       Joe\n                     John\n   Last Name:\
    \        Smith\n   Favourite Drink:  Beer\n                     Labatt\n     \
    \                Molson\n   Template:         Domain\n   Domain Name:      foo.edu\n\
    \   Contact Name:     Mike\n                     Foobar\n   It is this information\
    \ which is handed up the tree to provide forward\n   knowledge.  As we mention\
    \ above, this may not turn out to be the\n   ideal solution for forward knowledge,\
    \ and we suspect that there may\n   be a number of different sets of forward knowledge\
    \ used in the Index\n   Service. However, the directory architecture is in a very\
    \ real sense\n   independent of what types of forward knowledge are handed around,\
    \ and\n   it is entirely possible to build a unified directory which uses many\n\
    \   types of forward knowledge.\n5.3. Index servers and Index server Architecture\n\
    \   A whois++ index server collects and collates the centroids (or other\n   forward\
    \ knowledge) of either a number of whois++ servers or of a\n   number of other\
    \ index servers. An index server must be able to\n   generate a centroid for the\
    \ information it contains. In addition, an\n   index server can index any other\
    \ server it wishes, which allows one\n   base level server (or index server) to\
    \ participate in many\n   hierarchies in the directory mesh.\n5.3.1. Queries to\
    \ index servers\n   An index server will take a query in standard whois++ format,\
    \ search\n   its collections of centroids and other forward information, determine\n\
    \   which servers hold records which may fill that query, and then\n   notifies\
    \ the user's client of the next servers to contact to submit\n   the query (referral\
    \ in the X.500 model). An index server can also\n   contain primary data of its\
    \ own; and thus act a both an index server\n   and a base level server. In this\
    \ case, the index server's response to\n   a query may be a mix of records and\
    \ referral pointers.\n5.3.2. Index server distribution model and centroid propogation\n\
    \   The diagram on the next page illustrates how a mesh of index servers\n   might\
    \ be created for a set of whois++ servers. Although it looks like\n   a hierarchy,\
    \ the protocols allow (for example) server A to be indexed\n   by both server\
    \ D and by server H.\n     whois++               index                   index\n\
    \     servers               servers                 servers\n                \
    \           for                     for\n                           whois++  \
    \               lower-level\n                           servers              \
    \   index servers\n     _______\n    |       |\n    |   A   |__\n    |_______|\
    \  \\            _______\n                \\----------|       |\n     _______\
    \               |   D   |__             ______\n    |       |   /----------|_______|\
    \  \\           |      |\n    |   B   |__/                       \\----------|\
    \      |\n    |_______|                                     |  F   |\n       \
    \                                /----------|______|\n                       \
    \               /\n     _______                _______  /\n    |       |     \
    \         |       |-\n    |   C   |--------------|   E   |\n    |_______|    \
    \          |_______|-\n                                     \\\n             \
    \                         \\\n     _______                           \\      \
    \      ______\n    |       |                           \\----------|      |\n\
    \    |   G   |--------------------------------------|  H   |\n    |_______|  \
    \                                    |______|\n             Figure 1: Sample layout\
    \ of the Index Service mesh\n   In the portion of the index tree shown above,\
    \ whois++ servers A and B\n   hand their centroids up to index server D, whois++\
    \ server C hands its\n   centroid up to index server E, and index servers D and\
    \ E hand their\n   centroids up to index server F. Servers E and G also hand their\n\
    \   centroids up to H.\n   The number of levels of index servers, and the number\
    \ of index\n   servers at each level, will depend on the number of whois++ servers\n\
    \   deployed, and the response time of individual layers of the server\n   tree.\
    \ These numbers will have to be determined in the field.\n5.3.3. Centroid propogation\
    \ and changes to centroids\n   Centroid propogation is initiated by an authenticated\
    \ POLL command\n   (sec. 5.2).  The format of the POLL command allows the poller\
    \ to\n   request the centroid of any or all templates and attributes held by\n\
    \   the polled server. After the polled server has authenticated the\n   poller,\
    \ it determines which of the requested centroids the poller is\n   allowed to\
    \ request, and then issues a CENTROID-CHANGES report (sec.\n   5.3) to transmit\
    \ the data. When the poller receives the CENTROID-\n   CHANGES report, it can\
    \ authenticate the pollee to determine whether\n   to add the centroid changes\
    \ to its data. Additionally, if a given\n   pollee knows what pollers hold centroids\
    \ from the pollee, it can\n   signal to those pollers the fact that its centroid\
    \ has changed by\n   issuing a DATA-CHANGED command. The poller can then determine\
    \ if and\n   when to issue a new POLL request to get the updated information.\
    \ The\n   DATA-CHANGED command is included in this protocol to allow\n   'interactive'\
    \ updating of critical information.\n5.3.4. Centroid propogation and mesh traversal\n\
    \   When an index server issues a POLL request, it may indicate to the\n   polled\
    \ server what relationship it has to the polled. This\n   information can be used\
    \ to help traverse the directory mesh. Two\n   fields are specified in the current\
    \ proposal to transmit the\n   relationship information, although it is expected\
    \ that richer\n   relationship information will be shared in future revisions\
    \ of this\n   protocol.\n   One field used for this information is the Hierarchy\
    \ field, and can\n   take on three values. The first is 'topology', which indicates\
    \ that\n   the indexing server is at a higher level in the network topology\n\
    \   (e.g. indexes the whole regional ISP). The second is 'geographical',\n   which\
    \ indicates that the polling server covers a geographical area\n   subsuming the\
    \ pollee. The third is 'administrative', which indicates\n   that the indexing\
    \ server covers an administrative domain subsuming\n   the pollee.\n   The second\
    \ field used for this information is the Description field,\n   which contains\
    \ the DESCRIBE record of the polling server. This allows\n   users to obtain richer\
    \ metainformation for the directory mesh,\n   enabling them to expand queries\
    \ more effectively.\n5.3.5. Query handling and passing algorithms\n   When an\
    \ index server receives a query, it searches its collection of\n   centroids and\
    \ determines which servers hold records which may fill\n   that query. As whois++\
    \ becomes widely deployed, it is expected that\n   some index servers may specialize\
    \ in indexing certain whois++\n   templates or perhaps even certain fields within\
    \ those templates. If\n   an index server obtains a match with the query \"for\
    \ those template\n   fields and attributes the server indexes\", it is to be considered\
    \ a\n   match for the purpose of forwarding the query.\n5.3.5.1. Query referral\n\
    \   Query referral is the process of informing a client which servers to\n   contact\
    \ next to resolve a query.  The syntax for notifying a client\n   is outlined\
    \ in section 5.5.\n5.3.6 Loop control\n   Since there are no a priori restrictions\
    \ on which servers may poll\n   which other servers, and since a given server\
    \ may participate in many\n   sub-meshes, mechanisms must be installed to allow\
    \ the detection of\n   cycles in the polling relationships. This is accomplished\
    \ in the\n   current protocol by including a hop-count on polling relationships.\n\
    \   Each time a polled server generates forward information, it informs\n   the\
    \ polling server about its current hopcount, which is the maximum\n   of the hopcounts\
    \ of all the servers it polls, plus 1.  A base level\n   server (one which polls\
    \ no other servers) will have a hopcount of 0.\n   When a server decides to poll\
    \ a new server, if its hopcount goes up,\n   then it must information all the\
    \ other servers which poll it about\n   its new hopcount.  A maximum hopcount\
    \ (8 in the current version) will\n   help the servers detect polling loops.\n\
    \   A second approach to loop detection is to do all the work in the\n   client;\
    \ which would determine which new referrals have already\n   appeared in the referral\
    \ list, and then simply iterate the referral\n   process until there are no new\
    \ servers to ask.  An algorithm to\n   accomplish this in WHOIS++ is detailed\
    \ in [Faltstrom 95].\n6. Syntax for operations of the Index Service:\n   The syntax\
    \ for each protocol componenet is listed below. In addition,\n   each section\
    \ contains a listing of which of these attributes is\n   required and optional\
    \ for each of the componenet. All timestamps must\n   be in the format YYYYMMDDHHMM\
    \ and in GMT.\n6.1. Data changed syntax\n   The data changed template look like\
    \ this:\n# DATA-CHANGED\n Version-number: // version number of index service software,\
    \ used to\n                 // insure compatibility. Current value is 1.0\n Time-of-latest-centroid-change:\
    \ // time stamp of latest centroid\n                                 // change,\
    \ GMT\n Time-of-message-generation: // time when this message was generated,\n\
    \                             // GMT\n Server-handle: // IANA unique identifier\
    \ for this server\n Host-Name: // Host name of this server (current name)\n Host-Port:\
    \ // Port number of this server (current port)\n Best-time-to-poll: // For heavily\
    \ used servers, this will identify\n                    // when the server is\
    \ likely to be lightly\n                    // loaded so that response to the\
    \ poll will be\n                    //speedy, GMT\n Authentication-type: // Type\
    \ of authentication used by server, or NONE\n Authentication-data: // data for\
    \ authentication\n# END // This line must be used to terminate the data changed\n\
    \                 // message\nRequired/optional table\nVersion-Number  REQUIRED\n\
    Time-of-latest-centroid-change  REQUIRED\nTime-of-message-generation      REQUIRED\n\
    Server-handle   REQUIRED\nHost-Name       REQUIRED\nHost-Port       REQUIRED\n\
    Best-time-to-poll       OPTIONAL\nAuthentication-type     OPTIONAL\nAuthentication-data\
    \     OPTIONAL\n6.2. Polling syntax\n# POLL:\n Version-number: // version number\
    \ of poller's index software, used to\n                 // insure compatibility\n\
    \ Type-of-poll: // type of forward data requested. CENTROID or QUERY\n       \
    \        // are the only one currently defined\n Poll-scope: // Selects bounds\
    \ within which data will be returned.\n             // See note.\n Start-time:\
    \ // give me all the centroid changes starting at this\n             // time,\
    \ GMT\n End-time: // ending at this time, GMT\n Template: // a standard whois++\
    \ template name, or the keyword ALL,\n           // for a full update.\n Field:\
    \    // used to limit centroid update information to specific\n           // fields,\
    \ is either a specific field name, a list of field\n           // names, or the\
    \ keyword ALL\n Server-handle: // IANA unique identifier for the polling server.\n\
    \                // this handle may optionally be cached by the polled\n     \
    \           // server to announce future changes\n Host-Name: // Host name of\
    \ the polling server.\n Host-Port: // Port number of the polling server.\n Hierarchy:\
    \ // This field indicates the relationship which the poller\n              //\
    \ bears to the pollee. Typical values might include\n              // 'Topology',\
    \ 'Geographical\", or \"Administrative\"\n Description: // This field contains\
    \ the DESCRIBE record of the\n                // polling server\n Authentication-type:\
    \ // Type of authentication used by poller, or NONE\n Authentication-data: //\
    \ Data for authentication\n# END  // This line must by used to terminate the poll\
    \ message\n   Note: For poll type CENTROID, the allowable values for Poll Scope\
    \ are\n   FULL and RELATIVE. Support of the FULL value is required, this\n   provides\
    \ a complete listing of the centroid or other forward\n   information. RELATIVE\
    \ indicates that these are the relative changes\n   in the centroid since the\
    \ last report to the polling server.\n   For poll type QUERY, the allowable values\
    \ for Poll Scope are a blank\n   line, which indicates that all records are to\
    \ be returned, or a valid\n   WHOIS++ query, which indicates that just those records\
    \ which satisfy\n   the query are to be returned. N.B. Security considerations\
    \ may\n   require additional authentication for successful response to the\n \
    \  Blank Line Poll Scope. This value has been included for server\n   replication.\n\
    \   A polling server may wish to index different types of information\n   than\
    \ the polled server has collected. The POLLED-FOR command will\n   indicate which\
    \ servers the polled server has contacted.\nRequired/Optional Table\nVersion-Number\
    \  REQUIRED, value is 1.0\nType-Of-Poll    REQUIRED, values CENTROID and QUERY\
    \ are required\nPoll-scope      REQUIRED  If Type-of-poll is CENTROID, FULL is\
    \ required,\n                          RELATIVE is optional\n                \
    \          If Type-of-poll is QUERY, Blank line is\n                         \
    \ required, and WHOIS++-type queries are\n                          required\n\
    Start-time      OPTIONAL\nEnd-Time        OPTIONAL\nTemplate        REQUIRED\n\
    Field           REQUIRED\nServer-handle   REQUIRED\nHost-Name       REQUIRED\n\
    Host-Port       REQUIRED\nHierarchy       OPTIONAL\nDescription     OPTIONAL\n\
    Authentication-Type:    OPTIONAL\nAuthentication-data:    OPTIONAL\nExample of\
    \ a POLL command:\n# POLL:\n Version-number: 1.0\n Type-of-poll: CENTROID\n Poll-scope:\
    \ FULL\n Start-time: 199501281030+0100\n Template: ALL\n Field: ALL\n Server-handle:\
    \ BUNYIP01\n Host-Name: services.bunyip.com\n Host-Port: 7070\n Hierarchy: Geographical\n\
    \ # END\n6.3. Centroid change report\n   As the centroid change report contains\
    \ nested multiply-occuring\n   blocks, each multiply occurring block is surrounded\
    \ *in this paper*\n   by curly braces '{', '}'. These curly braces are NOT part\
    \ of the\n   syntax, they are for identification purposes only.\n   The syntax\
    \ of a Data: item is either a list of words, one word per\n   line, or the keyword:\n\
    \     ANY\n   The keyword ANY as the only item of a Data: list means that any\
    \ value\n   for this field should be treated as a hit by the indexing server.\n\
    \   The field Any-field: needs more explanation than can be given in the\n   body\
    \ of the syntax description below. It can take two values, True or\n   False.\
    \ If the value is True, the pollee is indicating that there are\n   fields in\
    \ this template which are not being exported to the polling\n   server, but wishes\
    \ to treat as a hit. Thus, when the polling server\n   gets a query which has\
    \ a term requesting a field not in this list for\n   this template, the polling\
    \ server will treat that term as a 'hit'.\n   If the value is False, the pollee\
    \ is indicating that there are no\n   other fields for this template which should\
    \ be treated as a hit. This\n   field is required because the basic model for\
    \ the WHOIS++ query\n   syntax requires that the results of each search term be\
    \ 'and'ed\n   together. This field allows polled servers to export data only for\n\
    \   non-sensitive fields, yet still get referrals of queries which\n   contain\
    \ sensitive terms.\n   IMPORTANT: The data listed in the centroid must be in the\
    \ ISO-8859-1\n   character set in this version of the indexing protocol. Use of\
    \ any\n   other character set is a violation of the protocol. Note that the\n\
    \   base-level server is also specified to use ISO-8859-1 [Deutsch, et\n   al,\
    \ 1995].\n# CENTROID-CHANGES\n Version-number: // version number of pollee's index\
    \ software, used to\n                 // insure compatibility\n Start-time: //\
    \ change list starting time, GMT\n End-time: // change list ending time, GMT\n\
    \ Server-handle: // IANA unique identifier of the responding server\n Case-sensitive:\
    \ // states whether data is case sensitive or case\n                 // insensitive.\
    \ values are TRUE or FALSE\n Authentication-type: // Type of authentication used\
    \ by pollee, or NONE\n Authentication-data: // Data for authentication\n Compression-type:\
    \ // Type of compression used on the data, or NONE\n Size-of-compressed-data:\
    \ // size of compressed data if compression\n                          // is used\n\
    \ Operation: // One of 3 keywords: ADD, DELETE, FULL\n            // ADD - add\
    \ these entries to the centroid for this server\n            // DELETE - delete\
    \ these entries from the centroid of this\n            // server\n           \
    \ // FULL - the full centroid as of end-time follows\n{ // The multiply occurring\
    \ template block starts here\n# BEGIN TEMPLATE\n Template: // a standard whois++\
    \ template name\n Any-field: // TRUE or FALSE. See beginning of 6.3 for explanation.\n\
    \ { // the template contains multiple field blocks\n# BEGIN FIELD\n Field: //\
    \ a field name within that template\n Data: // Either the keyword *ANY*, or\n\
    \       // the word list itself, one per line, cr/lf terminated,\n       // each\
    \ line starting with a dash character ('-').\n# END FIELD\n  } // the field ends\
    \ with END FIELD\n# END TEMPLATE\n} // the template block ends with END TEMPLATE\n\
    # END CENTROID-CHANGES // This line must be used to terminate the\n          \
    \               // centroid change report\n   For each template, all fields must\
    \ be listed, or queries will not be\n   referred correctly.\nRequired/Optional\
    \ table\nVersion-number  REQUIRED, value is 1.0\nStart-time      REQUIRED (even\
    \ if the centroid type is FULL)\nEnd-time        REQUIRED (even if the centroid\
    \ type is FULL)\nServer-handle   REQUIRED\nCase-Sensitive  OPTIONAL\nAuthentication-Type\
    \     OPTIONAL\nAuthentication-Data     OPTIONAL\nCompression-type        OPTIONAL\n\
    Size-of-compressed-data OPTIONAL (even if compression is used)\nOperation    \
    \ OPTIONAL, if used, upport for all three values is required\nTokenization-type\
    \       OPTIONAL\n#BEGIN TEMPLATE REQUIRED\nTemplate        REQUIRED\nAny-field\
    \       REQUIRED\n#BEGIN FIELD    REQUIRED\nField           REQUIRED\nData   \
    \         REQUIRED\n#END FIELD      REQUIRED\n#END TEMPLATE   REQUIRED\n#END CENTROID-CHANGES\
    \ REQUIRED\nExample:\n# CENTROID-CHANGES\n Version-number: 1.0\n Start-time: 197001010000\n\
    \ End-time: 199503012336\n Server-handle: BUNYIP01\n# BEGIN TEMPLATE\n Template:\
    \ USER\n Any-field: TRUE\n# BEGIN FIELD\n Field: Name\n Data: Patrik\n-Faltstrom\n\
    -Malin\n-Linnerborg\n#END FIELD\n#BEGIN FIELD\n Field: Email\n Data: paf@bunyip.com\n\
    -malin.linnerborg@paf.se\n# END FIELD\n# END TEMPLATE\n# END CENTROID-CHANGES\n\
    6.4 QUERY and POLLEES responses\n   The response to a QUERY command is done in\
    \ WHOIS++ format.\n6.5. Query referral\n   When referrals are included in the\
    \ body of a response to a query,\n   each referral is listed in a separate SERVER-TO-ASK\
    \ block as shown\n   below.\n# SERVER-TO-ASK\n Version-number: // version number\
    \ of index software, used to insure\n                 // compatibility\n Body-of-Query:\
    \ // the original query goes here\n Server-Handle: // WHOIS++ handle of the referred\
    \ server\n Host-Name: // DNS name or IP address of the referred server\n Port-Number:\
    \ // Port number to which to connect, if different from the\n                //\
    \ WHOIS++ port number\n# END\nRequired/Optional table\nVersion-number REQUIRED,\
    \ value should be 1.0\nBody-of-query OPTIONAL\nServer-Handle REQUIRED\nHost-Name\
    \ REQUIRED\nPort-Number OPTIONAL, must be used if different from port 63\nExample:\n\
    # SERVER-TO-ASK\n Version-Number: 1.0\n Server-Handle: SUNETSE01\n Host-Name:\
    \ sunic.sunet.se\n Port-Number: 63\n# END\n7: Reply Codes\n   In addition to the\
    \ reply codes listed in [Deutsch 95] for the basic\n   WHOIS++ client/server interaction,\
    \ the following reply codes are used\n   in version 1.0 of this protocol.\n113\
    \ Requested method not available      Unable to provide a requested\n        \
    \                                compression method. Contacted\n             \
    \                           server will send requested\n                     \
    \                   data in different format.\n227 Update request acknowledged\
    \         A DATA-CHANGED transmission\n                                      \
    \  has been accepted and logged\n                                        for further\
    \ action.\n503 Required attribute missing          A REQUIRED attribute is\n \
    \                                       missing in an interaction.\n504 Desired\
    \ server unreachable          The desired server is\n                        \
    \                unreachable.\n505 Desired server unavailable          The desired\
    \ server fails to\n                                        respond to requests,\
    \ but host\n                                        is still reachable.\n8. References\n\
    [Deutsch 95] Deutsch, et al., \"Architecture of the WHOIS++ service\",\n     \
    \        RFC 1835, August 1995.\n[Faltstrom 95] Faltstrom, P., et al., \"How to\
    \ Interact with a WHOIS++\n               Mesh, RFC 1914, February 1996.\n9. Security\
    \ Considerations\n   Security issues are not discussed in this memo.\n10. Authors'\
    \ Addresses\n   Chris Weider\n   Bunyip Information Systems, Inc.\n   310 St.\
    \ Catherine St. West\n   Montreal, PQ H2X 2A1\n   CANADA\n   Phone: +1-514-875-8611\n\
    \   Fax:   +1-514-875-6134\n   EMail: clw@bunyip.com\n   Jim Fullton\n   MCNC\
    \ Center for Communications\n   Post Office Box 12889\n   3021 Cornwallis Road\n\
    \   Research Triangle Park\n   North Carolina 27709-2889\n   Phone: 410-795-5422\n\
    \   Fax:   410-795-5422\n   EMail: fullton@cnidr.org\n   Simon Spero\n   EMail:\
    \ ses@eit.com\n"
