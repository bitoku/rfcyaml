- title: __initial_text__
  contents:
  - "                  End-to-End Session Identification in\n               IP-Based\
    \ Multimedia Communication Networks\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an end-to-end session identifier for use\
    \ in\n   IP-based multimedia communication systems that enables endpoints,\n \
    \  intermediary devices, and management systems to identify a session\n   end-to-end,\
    \ associate multiple endpoints with a given multipoint\n   conference, track communication\
    \ sessions when they are redirected,\n   and associate one or more media flows\
    \ with a given communication\n   session.  While the identifier is intended to\
    \ work across multiple\n   protocols, this document describes its usage in the\
    \ Session\n   Initiation Protocol (SIP).\n   This document also describes a backwards-compatibility\
    \ mechanism for\n   an existing session identifier implementation (RFC 7329) that\
    \ is\n   sufficiently different from the procedures defined in this document.\n\
    \   This document obsoletes RFC 7329.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7989.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions Used in This Document ...............................5\n  \
    \ 3. Session Identifier Definitions, Requirements, and Use Cases .....5\n   4.\
    \ Constructing and Conveying the Session Identifier ...............5\n      4.1.\
    \ Constructing the Session Identifier ........................5\n      4.2. Conveying\
    \ the Session Identifier ...........................6\n   5. The Session-ID Header\
    \ Field .....................................8\n   6. Endpoint Behavior ...............................................9\n\
    \   7. Processing by Intermediaries ...................................11\n  \
    \ 8. Handling of Remote UUID Changes ................................14\n   9.\
    \ Associating Endpoints in a Multipoint Conference ...............16\n   10. Examples\
    \ of Various Call Flow Operations ......................17\n      10.1. Basic\
    \ Call with Two UUIDs ................................18\n      10.2. Basic Call\
    \ Transfer Using REFER ..........................22\n      10.3. Basic Call Transfer\
    \ Using Re-INVITE ......................24\n      10.4. Single Focus Conferencing\
    \ ................................26\n      10.5. Single Focus Conferencing Using\
    \ a Web-Based\n            Conference Service .......................................28\n\
    \      10.6. Cascading Conference Bridges .............................30\n  \
    \         10.6.1. Establishing a Cascaded Conference ................30\n    \
    \       10.6.2. Calling Into Cascaded Conference Bridges ..........31\n      10.7.\
    \ Basic 3PCC for Two UAs ...................................33\n      10.8. Handling\
    \ in 100 Trying SIP Response and CANCEL Request ...33\n           10.8.1. Handling\
    \ in a 100 Trying SIP Response .............34\n           10.8.2. Handling a\
    \ CANCEL SIP Request .....................35\n      10.9. Out-of-Dialog REFER\
    \ Transaction ..........................36\n   11. Compatibility with a Previous\
    \ Implementation ..................37\n   12. Security and Privacy Considerations\
    \ ...........................39\n   13. IANA Considerations ...........................................40\n\
    \      13.1. Registration of the \"Session-ID\" Header Field ............40\n\
    \      13.2. Registration of the \"remote\" Parameter ...................40\n\
    \   14. References ....................................................41\n  \
    \    14.1. Normative References .....................................41\n    \
    \  14.2. Informative References ...................................42\n   Acknowledgements\
    \ ..................................................44\n   Dedication ........................................................44\n\
    \   Authors' Addresses ................................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IP-based multimedia communication systems, such as Session\
    \ Initiation\n   Protocol (SIP) [RFC3261] and [H.323], have the concept of a \"\
    call\n   identifier\" that is globally unique.  The identifier is intended to\n\
    \   represent an end-to-end communication session from the originating\n   device\
    \ to the terminating device.  Such an identifier is useful for\n   troubleshooting,\
    \ session tracking, and so forth.\n   For several reasons, however, the current\
    \ call identifiers defined in\n   SIP and H.323 are not suitable for end-to-end\
    \ session identification.\n   A fundamental issue in protocol interworking is\
    \ the fact that the\n   syntax for the call identifier in SIP and H.323 is different.\
    \  Thus,\n   if both protocols are used in a call, it is impossible to exchange\n\
    \   the call identifier end-to-end.\n   Another reason why the current call identifiers\
    \ are not suitable to\n   identify a session end-to-end is that, in real-world\
    \ deployments,\n   devices such as session border controllers [RFC7092] often\
    \ change the\n   session signaling, including the value of the call identifier,\
    \ as it\n   passes through the device.  While this is deliberate and useful, it\n\
    \   makes it very difficult to track a session end-to-end.\n   This document defines\
    \ a new identifier, referred to as the \"session\n   identifier\", that is intended\
    \ to overcome the issues that exist with\n   the currently defined call identifiers\
    \ used in SIP and other IP-based\n   communication systems.  The identifier defined\
    \ here has been adopted\n   by the ITU ([H.460.27]) for use in H.323-based systems,\
    \ allowing for\n   the ability to trace a session end-to-end for sessions traversing\n\
    \   both SIP and H.323-based systems.  This document defines its use in\n   SIP.\n\
    \   The procedures specified in this document attempt to comply with the\n   requirements\
    \ specified in [RFC7206].  The procedures also specify\n   capabilities not mentioned\
    \ in [RFC7206], shown in the call flows in\n   Section 10.  Additionally, this\
    \ specification attempts to account for\n   a previous, pre-standard version of\
    \ a SIP session identifier header\n   [RFC7329], specifying a backwards-compatibility\
    \ approach in\n   Section 11.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119] when they\n   appear in ALL CAPS.  These words may also appear\
    \ in this document in\n   lowercase, absent their normative meanings.\n   The\
    \ term \"session identifier\" refers to the value of the identifier,\n   whereas\
    \ \"Session-ID\" refers to the header field used to convey the\n   identifier.\
    \  The session identifier is a set of two Universally\n   Unique Identifiers (UUIDs)\
    \ and each element of that set is simply\n   referred to herein as a \"UUID\"\
    .\n   Throughout this document, the term \"endpoint\" refers to a SIP User\n \
    \  Agent (UA) that either initiates or terminates a SIP session, such as\n   a\
    \ user's mobile phone or a conference server, but excludes entities\n   such as\
    \ Back-to-Back User Agents (B2BUAs) that are generally located\n   along the call-signaling\
    \ path between endpoints.  The term\n   \"intermediary\" refers to any entity\
    \ along the call-signaling path\n   between the aforementioned endpoints, including\
    \ B2BUAs and SIP\n   proxies.  In certain scenarios, intermediaries are allowed\
    \ to\n   originate and terminate SIP messages without an endpoint being part\n\
    \   of the session or transaction.  An intermediary may be performing\n   interworking\
    \ between different protocols (e.g., SIP and H.323) that\n   support the session\
    \ identifier defined in this document.\n"
- title: 3.  Session Identifier Definitions, Requirements, and Use Cases
  contents:
  - "3.  Session Identifier Definitions, Requirements, and Use Cases\n   Requirements\
    \ and use cases for the end-to-end session identifier,\n   along with the definition\
    \ of \"session identifier\", \"communication\n   session\", and \"end-to-end\"\
    \ can be found in [RFC7206].  Throughout\n   this document, the term \"session\"\
    \ refers to a \"communication session\"\n   as defined in [RFC7206].\n   As mentioned\
    \ in Section 6.1 of [RFC7206], the ITU-T undertook a\n   parallel effort to define\
    \ compatible procedures for an H.323 session\n   identifier.  They are documented\
    \ in [H.460.27].\n"
- title: 4.  Constructing and Conveying the Session Identifier
  contents:
  - '4.  Constructing and Conveying the Session Identifier

    '
- title: 4.1.  Constructing the Session Identifier
  contents:
  - "4.1.  Constructing the Session Identifier\n   The session identifier comprises\
    \ two UUIDs [RFC4122], with each UUID\n   representing one of the endpoints participating\
    \ in the session.\n   The version number in the UUID indicates the manner in which\
    \ the UUID\n   is generated, such as using random values or using the Media Access\n\
    \   Control (MAC) address of the endpoint.  To satisfy the requirement\n   that\
    \ no user or device information be conveyed, endpoints MUST\n   generate version\
    \ 4 (random) or version 5 (SHA-1) UUIDs to address\n   privacy concerns related\
    \ to the use of MAC addresses in UUIDs.\n   When generating a version 5 UUID,\
    \ endpoints or intermediaries MUST\n   utilize the procedures defined in Section\
    \ 4.3 of [RFC4122] and employ\n   the following \"namespace ID\":\n       uuid_t\
    \ NameSpace_SessionID = {\n           /* a58587da-c93d-11e2-ae90-f4ea67801e29\
    \ */\n           0xa58587da,\n           0xc93d,\n           0x11e2,\n       \
    \    0xae, 0x90, 0xf4, 0xea, 0x67, 0x80, 0x1e, 0x29\n       };\n   Further, the\
    \ \"name\" to utilize for version 5 UUIDs is the\n   concatenation of the Call-ID\
    \ header-value and the \"tag\" parameter\n   that appears on the \"From\" or \"\
    To\" line associated with the device\n   for which the UUID is created.  Once\
    \ an endpoint generates a UUID for\n   a session, the UUID never changes, even\
    \ if values originally used as\n   input into its construction change over time.\n\
    \   Stateless intermediaries that insert a Session-ID header field into a\n  \
    \ SIP message on behalf of an endpoint MUST utilize version 5 UUIDs to\n   ensure\
    \ that UUIDs for the communication session are consistently\n   generated.  If\
    \ a stateless intermediary does not know the tag value\n   for the endpoint (e.g.,\
    \ a new INVITE request without a To: tag value\n   or an older SIP implementation\
    \ [RFC2543] that did not include a \"tag\"\n   parameter), the intermediary MUST\
    \ NOT attempt to generate a UUID for\n   that endpoint.  Note that, if an intermediary\
    \ is stateless and the\n   endpoint on one end of the call is replaced with another\
    \ endpoint due\n   to some service interaction, the values used to create the\
    \ UUID\n   should change and, if so, the intermediary will compute a different\n\
    \   UUID.\n"
- title: 4.2.  Conveying the Session Identifier
  contents:
  - "4.2.  Conveying the Session Identifier\n   The SIP User Agent (UA) initiating\
    \ a new session by transmitting a\n   SIP request (\"Alice\"), i.e., a User Agent\
    \ Client (UAC), MUST create a\n   new, previously unused UUID and transmit that\
    \ to the ultimate\n   destination UA (\"Bob\").  Likewise, the destination UA\
    \ (\"Bob\"), i.e.,\n   a User Agent Server (UAS), MUST create a new, previously\
    \ unused UUID\n   and transmit that to the first UA (\"Alice\").  These two distinct\n\
    \   UUIDs form what is referred to as the \"session identifier\" and is\n   represented\
    \ in this document in set notation of the form {A,B}, where\n   \"A\" is UUID\
    \ value created by UA \"Alice\" and \"B\" is the UUID value\n   created by UA\
    \ \"Bob\".  The session identifier {A,B} is equal to the\n   session identifier\
    \ {B,A}.  Section 6 describes how the UUIDs selected\n   by the source and destination\
    \ UAs persist for the duration of the\n   session.\n   In the case where only\
    \ one UUID is known, such as when a UA first\n   initiates a potentially dialog-initiating\
    \ SIP request, the session\n   identifier would be {A,N}, where \"A\" represents\
    \ the UUID value\n   transmitted by the UA \"Alice\", and \"N\" is what is referred\
    \ to as the\n   \"nil UUID\" [RFC4122] (see Section 5 of this document).\n   Since\
    \ SIP sessions are subject to any number of service interactions,\n   SIP INVITE\
    \ requests might be forked as sessions are established, and\n   since conferences\
    \ might be established or expanded with endpoints\n   calling in or the conference\
    \ focus calling out, the construction of\n   the session identifier as a set of\
    \ UUIDs is important.\n   To understand this better, consider that an endpoint\
    \ participating in\n   a communication session might be replaced with another,\
    \ such as the\n   case where two \"legs\" of a call are joined together by a Private\n\
    \   Branch Exchange (PBX).  Suppose \"Alice\" and \"Bob\" both call UA \"C\"\n\
    \   (\"Carol\").  There would be two distinctly identifiable session\n   identifiers,\
    \ namely {A,C} and {B,C}.  Then, suppose that \"Carol\" uses\n   a local PBX function\
    \ to join the call between herself and \"Alice\"\n   with the call between herself\
    \ and \"Bob\", resulting in a single\n   remaining call between \"Alice\" and\
    \ \"Bob\".  This merged call can be\n   identified using two UUID values assigned\
    \ by each entity in the\n   communication session, namely {A,B} in this example.\n\
    \   In the case of forking, \"Alice\" might send an INVITE request that\n   gets\
    \ forked to several different endpoints.  A means of identifying\n   each of these\
    \ separate communication sessions is needed; since each\n   of the destination\
    \ UAs will create its own UUID, each communication\n   session would be uniquely\
    \ identified by the values {A, B1}, {A, B2},\n   {A, B3}, and so on, where each\
    \ of the Bn values refers to the UUID\n   created by the different UAs to which\
    \ the SIP session is forked.\n   For conferencing scenarios, it is also useful\
    \ to have a two-part\n   session identifier where the conference focus specifies\
    \ the same UUID\n   for each conference participant.  This allows for correlation\
    \ among\n   the participants in a single conference.  For example, in a\n   conference\
    \ with three participants, the session identifiers might be\n   {A,M}, {B,M},\
    \ and {C,M}, where \"M\" is assigned by the conference\n   focus.  Only a conference\
    \ focus will purposely utilize the same UUID\n   for more than one SIP session\
    \ and, even then, such reuse MUST be\n   restricted to the participants in the\
    \ same conference.\n   How a device acting on session identifiers processes or\
    \ utilizes the\n   session identifier is outside the scope of this document. \
    \ However,\n   devices storing a session identifier in a log file SHOULD follow\
    \ the\n   security considerations outlined in [RFC6872].  Note that the primary\n\
    \   intent of a session identifier is for troubleshooting; therefore, it\n   should\
    \ be included in logs at rest that will be used for\n   troubleshooting purposes.\n"
- title: 5.  The Session-ID Header Field
  contents:
  - "5.  The Session-ID Header Field\n   This document replaces the definition of\
    \ the \"Session-ID\" token that\n   was added to the definition of the element\
    \ \"message-header\" in the\n   SIP message grammar by [RFC7329].  The Session-ID\
    \ header is a single-\n   instance header.\n   Each endpoint participating in\
    \ a communication session has a\n   distinct, preferably locally generated UUID\
    \ associated with it.  The\n   endpoint's UUID value remains unchanged throughout\
    \ the duration of\n   the communication session.  Multipoint conferences can bridge\n\
    \   sessions from multiple endpoints and impose unique requirements\n   defined\
    \ in Section 9.  An intermediary MAY generate a UUID on behalf\n   of an endpoint\
    \ that did not include a UUID of its own.\n   The UUID values for each endpoint\
    \ are inserted into the Session-ID\n   header field of all transmitted SIP messages.\
    \  The Session-ID header\n   field has the following ABNF [RFC5234] syntax:\n\
    \     session-id          = \"Session-ID\" HCOLON session-id-value\n     session-id-value\
    \    = local-uuid *(SEMI sess-id-param)\n     local-uuid          = sess-uuid\
    \ / nil\n     remote-uuid         = sess-uuid / nil\n     sess-uuid          \
    \ = 32(DIGIT / %x61-66)  ;32 chars of [0-9a-f]\n     sess-id-param       = remote-param\
    \ / generic-param\n     remote-param        = \"remote\" EQUAL remote-uuid\n \
    \    nil                 = 32(\"0\")\n   The productions \"SEMI\", \"EQUAL\",\
    \ and \"generic-param\" are defined in\n   [RFC3261].  The production DIGIT is\
    \ defined in [RFC5234].\n   The Session-ID header field MUST NOT have more than\
    \ one \"remote\"\n   parameter.  In the case where an entity compliant with this\n\
    \   specification is interworking with an entity that implemented a\n   session\
    \ identifier as defined in [RFC7329], the \"remote\" parameter\n   may be absent;\
    \ otherwise, the \"remote\" parameter MUST be present.\n   The details under which\
    \ those conditions apply are described in\n   Section 11.  Except for backwards\
    \ compatibility with [RFC7329], the\n   \"remote\" parameter MUST be present.\n\
    \   A special nil UUID value composed of 32 zeros is required in certain\n   situations.\
    \  A nil UUID is expected as the \"remote-uuid\" of every\n   initial standard\
    \ SIP request since the initiating endpoint would not\n   initially know the UUID\
    \ value of the remote endpoint.  This nil value\n   will get replaced by the ultimate\
    \ destination UAS when that UAS\n   generates a response message.  One caveat\
    \ is explained in Section 11\n   for a possible backwards-compatibility case.\
    \  A nil UUID value is\n   also returned by some intermediary devices that send\
    \ provisional or\n   other responses as the \"local-uuid\" component of the Session-ID\n\
    \   header field value, as described in Section 7.\n   The \"local-uuid\" in the\
    \ Session-ID header field represents the UUID\n   value of the endpoint transmitting\
    \ a message and the \"remote-uuid\" in\n   the Session-ID header field represents\
    \ the UUID of the endpoint's\n   peer.  For example, a Session-ID header field\
    \ might appear like this:\n     Session-ID: ab30317f1a784dc48ff824d0d3715d86;\n\
    \                 remote=47755a9de7794ba387653f2099600ef2\n   While this is the\
    \ general form of the Session-ID header field,\n   exceptions to syntax and procedures\
    \ are detailed in subsequent\n   sections.\n   The UUID values are presented as\
    \ strings of lowercase hexadecimal\n   characters, with the most significant octet\
    \ of the UUID appearing\n   first.\n"
- title: 6.  Endpoint Behavior
  contents:
  - "6.  Endpoint Behavior\n   To comply with this specification, endpoints (non-intermediaries)\n\
    \   MUST include a Session-ID header field value in all SIP messages\n   transmitted\
    \ as a part of a communication session.  The locally\n   generated UUID of the\
    \ transmitter of the message MUST appear in the\n   \"local-uuid\" portion of\
    \ the Session-ID header field value.  The UUID\n   of the peer device, if known,\
    \ MUST appear as the \"remote\" parameter\n   following the transmitter's UUID.\
    \  The nil UUID value MUST be used if\n   the peer device's UUID is not known.\n\
    \   Once an endpoint allocates a UUID value for a communication session,\n   the\
    \ endpoint originating the request MUST NOT change that UUID value\n   for the\
    \ duration of the session, including when:\n   o  communication attempts are retried\
    \ due to receipt of 4xx messages\n      or request timeouts;\n   o  the session\
    \ is redirected in response to a 3xx message;\n   o  a session is transferred\
    \ via a REFER message [RFC3515]; or\n   o  a SIP dialog is replaced via an INVITE\
    \ request with Replaces\n      [RFC3891].\n   An endpoint that receives a Session-ID\
    \ header field MUST take note of\n   any non-nil \"local-uuid\" value that it\
    \ receives and assume that is\n   the UUID of the peer endpoint within that communication\
    \ session.\n   Endpoints MUST include this received UUID value as the \"remote\"\
    \n   parameter when transmitting subsequent messages, making sure not to\n   change\
    \ this UUID value in the process of moving the value internally\n   from the \"\
    local-uuid\" field to the \"remote-uuid\" field.\n   If an endpoint receives a\
    \ 3xx message, a REFER that directs the\n   endpoint to a different peer, or an\
    \ INVITE request with Replaces that\n   also potentially results in communicating\
    \ with a new peer, the\n   endpoint MUST complete any message exchanges with its\
    \ current peer\n   using the existing session identifier, but it MUST NOT use\
    \ the\n   current peer's UUID value when sending the first message to what it\n\
    \   believes may be a new peer endpoint (even if the exchange results in\n   communicating\
    \ with the same physical or logical entity).  The\n   endpoint MUST retain its\
    \ own UUID value, however, as described above.\n   It should be noted that messages\
    \ received by an endpoint might\n   contain a \"local-uuid\" value that does not\
    \ match what the endpoint\n   expected its peer's UUID to be.  It is also possible\
    \ for an endpoint\n   to receive a \"remote-uuid\" value that does not match its\
    \ generated\n   UUID for the session.  Either might happen as a result of service\n\
    \   interactions by intermediaries and MUST NOT affect how the endpoint\n   processes\
    \ the session; however, the endpoint may log this event for\n   troubleshooting\
    \ purposes.\n   An endpoint MUST assume that the UUID value of the peer endpoint\
    \ may\n   change at any time due to service interactions.  Section 8 discusses\n\
    \   how endpoints must handle remote UUID changes.\n   It is also important to\
    \ note that if an intermediary in the network\n   forks a session, the endpoint\
    \ initiating a session may receive\n   multiple responses back from different\
    \ endpoints, each of which\n   contains a different UUID (\"local-uuid\") value.\
    \  Endpoints MUST\n   ensure that the correct UUID value is returned in the \"\
    remote\"\n   parameter when interacting with each endpoint.  The one exception\
    \ is\n   when the endpoint sends a CANCEL request, in which case the Session-\n\
    \   ID header field value MUST be identical to the Session-ID header\n   field\
    \ value sent in the original request.\n   If an endpoint receives a message that\
    \ does not contain a Session-ID\n   header field, that message must have no effect\
    \ on what the endpoint\n   believes is the UUID value of the remote endpoint.\
    \  That is, the\n   endpoint MUST NOT change the internally maintained \"remote-uuid\"\
    \n   value for the peer.\n   If an endpoint receives a SIP response with a non-nil\
    \ \"local-uuid\"\n   that is not 32 octets long, this response comes from a misbehaving\n\
    \   implementation, and its Session-ID header field MUST be discarded.\n   That\
    \ said, the response might still be valid according to the rules\n   within SIP\
    \ [RFC3261], and it SHOULD be checked further.\n   A Multipoint Control Unit (MCU)\
    \ is a special type of conferencing\n   endpoint and is discussed in Section 9.\n"
- title: 7.  Processing by Intermediaries
  contents:
  - "7.  Processing by Intermediaries\n   The following applies only to an intermediary\
    \ that wishes to comply\n   with this specification and does not impose a conformance\
    \ requirement\n   on intermediaries that elect not to provide any special treatment\
    \ for\n   the Session-ID header field.  Intermediaries that do not comply with\n\
    \   this specification might pass the header unchanged or drop it\n   entirely.\n\
    \   The Call-ID often reveals personal, device, domain, or other\n   sensitive\
    \ information associated with a user, which is one reason why\n   intermediaries,\
    \ such as session border controllers, sometimes alter\n   the Call-ID.  In order\
    \ to ensure the integrity of the end-to-end\n   session identifier, it is constructed\
    \ in a way that does not reveal\n   such information, removing the need for intermediaries\
    \ to alter it.\n   When an intermediary receives messages from one endpoint in\
    \ a\n   communication session that causes the transmission of one or more\n  \
    \ messages toward the second endpoint in a communication session, the\n   intermediary\
    \ MUST include the Session-ID header field in the\n   transmitted messages with\
    \ the same UUID values found in the received\n   message, except as outlined in\
    \ this section and in Section 8.\n   If the intermediary aggregates several responses\
    \ from different\n   endpoints, as described in Section 16.7 of [RFC3261], the\n\
    \   intermediary MUST set the local-uuid field to the nil UUID value when\n  \
    \ forwarding the aggregated response to the endpoint since the true\n   UUID value\
    \ of the peer is undetermined at that point.  Note that an\n   intermediary that\
    \ does not implement this specification might forward\n   a non-nil value, resulting\
    \ in the originating endpoint receiving\n   different UUID values in the responses.\
    \  It is possible for this to\n   result in the endpoint temporarily using the\
    \ wrong remote UUID.\n   Subsequent messages in the dialog should resolve the\
    \ temporary\n   mismatch as long as the endpoint follows the rules outlined in\n\
    \   Section 8 dealing with the handling of remote UUID changes.\n   Intermediary\
    \ devices that transfer a call, such as by joining\n   together two different\
    \ \"call legs\", MUST properly construct a\n   Session-ID header field that contains\
    \ the UUID values associated with\n   the endpoints involved in the joined session\
    \ and correct placement of\n   those values.  As described in Section 6, the endpoint\
    \ receiving a\n   message transmitted by the intermediary will assume that the\
    \ first\n   UUID value belongs to its peer endpoint.\n   If an intermediary receives\
    \ a SIP message without a Session-ID header\n   field or valid header field value\
    \ from an endpoint for which the\n   intermediary is not storing a \"remote-uuid\"\
    \ value, the intermediary\n   MAY assign a \"local-uuid\" value to represent that\
    \ endpoint and,\n   having done so, MUST insert that assigned value into all signaling\n\
    \   messages on behalf of the endpoint for that dialog.  In effect, the\n   intermediary\
    \ becomes dialog-stateful, and it MUST follow the endpoint\n   procedures in Section\
    \ 6 with respect to Session-ID header field value\n   treatment with itself acting\
    \ as the endpoint (for the purposes of the\n   Session-ID header field) for which\
    \ it inserted a component into the\n   Session-ID header field value.  If the\
    \ intermediary is aware of the\n   UUID value that identifies the endpoint to\
    \ which a message is\n   directed, it MUST insert that UUID value into the Session-ID\
    \ header\n   field value as the \"remote-uuid\" value.  If the intermediary is\n\
    \   unaware of the UUID value that identifies the receiving endpoint, it\n   MUST\
    \ use the nil UUID value as the \"remote-uuid\" value.\n   If an intermediary\
    \ receives a SIP message without a Session-ID header\n   field or a valid Session-ID\
    \ header field value from an endpoint for\n   which the intermediary has previously\
    \ received a Session-ID and is\n   storing a \"remote-uuid\" value for that endpoint,\
    \ the lack of a\n   Session-ID must have no effect on what the intermediary believes\
    \ is\n   the UUID value of the endpoint.  That is, the intermediary MUST NOT\n\
    \   change the internally maintained \"remote-uuid\" value for the peer.\n   When\
    \ an intermediary originates a response, such as a provisional\n   response or\
    \ a response to a CANCEL request, the \"remote-uuid\" field\n   will contain the\
    \ UUID value of the receiving endpoint.  When the UUID\n   of the peer endpoint\
    \ is known, the intermediary MUST insert the UUID\n   of the peer endpoint in\
    \ the \"local-uuid\" field of the header value.\n   Otherwise, the intermediary\
    \ MAY set the \"local-uuid\" field of the\n   header value to the \"nil\" UUID\
    \ value.\n   When an intermediary originates a request message without first\n\
    \   having received a SIP message that triggered the transmission of the\n   message\
    \ (e.g., sending a BYE message to terminate a call for policy\n   reasons), the\
    \ intermediary MUST, if it has knowledge of the UUID\n   values for the two communicating\
    \ endpoints, insert a Session-ID\n   header field with the \"remote-uuid\" field\
    \ of the header value set to\n   the UUID value of the receiving endpoint and\
    \ the \"local-uuid\" field\n   of the header value set to the UUID value of the\
    \ other endpoint.\n   When the intermediary does not have knowledge of the UUID\
    \ value of an\n   endpoint in the communication session, the intermediary SHOULD\
    \ set\n   the unknown UUID value(s) to the \"nil\" UUID value.  (If both are\n\
    \   unknown, the Session-ID header value SHOULD NOT be included at all,\n   since\
    \ it would have no practical value.)\n   With respect to the previous two paragraphs,\
    \ note that if an\n   intermediary transmits a \"nil\" UUID value, the receiving\
    \ endpoint\n   might use that value in subsequent messages it sends.  This\n \
    \  effectively violates the requirement of maintaining an end-to-end\n   session\
    \ identifier value for the communication session if a UUID for\n   the peer endpoint\
    \ had been previously conveyed.  Therefore, an\n   intermediary MUST only send\
    \ the \"nil\" UUID when the intermediary has\n   not communicated with the peer\
    \ endpoint to learn its UUID.  This\n   means that intermediaries SHOULD maintain\
    \ state related to the UUID\n   values for both ends of a communication session\
    \ if it intends to\n   originate messages (versus merely conveying messages).\
    \  An\n   intermediary that does not maintain this state and that originates a\n\
    \   message as described in the previous two paragraphs MUST NOT insert a\n  \
    \ Session-ID header field in order to avoid unintended, incorrect\n   reassignment\
    \ of a UUID value.\n   The Session-ID header field value included in a CANCEL\
    \ request MUST\n   be identical to the Session-ID header field value included\
    \ in the\n   corresponding request being cancelled.\n   If a SIP intermediary\
    \ initiates a dialog between two endpoints in a\n   third-party call control (3PCC\
    \ [RFC3725]) scenario, the initial\n   INVITE request will have a non-nil, locally\
    \ fabricated \"local-uuid\"\n   value; call this temporary UUID \"X\".  The request\
    \ will still have a\n   nil \"remote-uuid\" value; call this value \"N\".  The\
    \ SIP server MUST be\n   transaction-stateful.  The UUID pair in the INVITE request\
    \ will be\n   {X,N}.  A 1xx or 2xx response will have a UUID pair {A,X}.  This\n\
    \   transaction-stateful, dialog-initiating SIP server MUST replace its\n   own\
    \ UUID, i.e.,\"X\", with a nil UUID (i.e., {A,N}) in the INVITE\n   request sent\
    \ towards the other UAS as expected (see Section 10.7 for\n   an example).\n \
    \  Intermediaries that manipulate messages containing a Session-ID\n   header\
    \ field SHOULD be aware of what UUID values it last sent towards\n   an endpoint\
    \ and, following any kind of service interaction initiated\n   or affected by\
    \ the intermediary, what UUID values the receiving\n   endpoint should have knowledge\
    \ of to ensure that both endpoints in\n   the session have the correct and same\
    \ UUID values.  If an\n   intermediary can determine that an endpoint might not\
    \ have received a\n   current, correct Session-ID field, the intermediary SHOULD\
    \ attempt to\n   provide the correct Session-ID header field to the endpoint such\
    \ as\n   by sending a re-INVITE request.  Failure to take such measures may\n\
    \   make troubleshooting more difficult because of the mismatched\n   identifiers;\
    \ therefore, it is strongly advised that intermediaries\n   attempt to provide\
    \ the correct session identifier if able to do so.\n   If an intermediary receives\
    \ a SIP response with a non-nil \"local-\n   uuid\" that is not 32 octets long,\
    \ this response comes from a\n   misbehaving implementation, and its Session-ID\
    \ header field MUST be\n   discarded.  That said, the response might still be\
    \ valid according to\n   the rules within SIP [RFC3261], and it SHOULD be checked\
    \ further.\n   An intermediary MUST assume that the UUID value of session peers\
    \ may\n   change at any time due to service interactions and MAY itself change\n\
    \   UUID values for sessions under its control to ensure that end-to-end\n   session\
    \ identifiers are consistent for all participants in a session.\n   Section 8\
    \ discusses how intermediaries must handle remote UUID\n   changes if they maintain\
    \ state of the session identifier.\n   An intermediary may perform protocol interworking\
    \ between different\n   IP-based communications systems, e.g., interworking between\
    \ H.323 and\n   SIP.  If the intermediary supports the session identifier for\
    \ both\n   protocols for which it is interworking, it SHOULD pass the identifier\n\
    \   between the two call legs to maintain an end-to-end identifier,\n   regardless\
    \ of protocol.\n"
- title: 8.  Handling of Remote UUID Changes
  contents:
  - "8.  Handling of Remote UUID Changes\n   It is desirable to have all endpoints\
    \ and intermediaries involved in\n   a session agree upon the current session\
    \ identifier when these\n   changes occur.  Due to race conditions or certain\
    \ interworking\n   scenarios, it is not always possible to guarantee session identifier\n\
    \   consistency; however, in an attempt to ensure the highest likelihood\n   of\
    \ consistency, all endpoints and intermediaries involved in a\n   session MUST\
    \ accept a peer's new UUID under the following conditions:\n   o  When an endpoint\
    \ or intermediary receives a mid-dialog request\n      containing a new UUID from\
    \ a peer, all responses to that request\n      MUST contain the new UUID value\
    \ as the \"remote\" parameter unless a\n      subsequent successful transaction\
    \ (for example, an UPDATE)\n      contains a different UUID, in which case, the\
    \ newest UUID MUST be\n      used.\n   o  If an endpoint or intermediary sends\
    \ a successful (2xx) or\n      redirection (3xx) response to the request containing\
    \ the new UUID\n      value, the endpoint or intermediary MUST accept the peer's\
    \ UUID\n      and include this new UUID as the \"remote\" parameter for any\n\
    \      subsequent messages unless the UUID from a subsequent transaction\n   \
    \   has already been accepted.  The one exception is a CANCEL request,\n     \
    \ as outlined below.\n   o  If the endpoint or intermediary sends a failure (4xx,\
    \ 5xx, or 6xx)\n      response, it MUST NOT accept the new UUID value and any\
    \ subsequent\n      messages MUST contain the previously stored UUID value in\
    \ the\n      \"remote\" parameter for any subsequent message.  Note that the\n\
    \      failure response itself will contain the new UUID value from the\n    \
    \  request in the \"remote\" parameter.\n   o  When an endpoint or intermediary\
    \ receives an ACK for a successful\n      (2xx) or redirection (3xx) response\
    \ with a new UUID value, it MUST\n      accept the peer's new UUID value and include\
    \ this new UUID as the\n      \"remote\" parameter for any subsequent messages.\
    \  If the ACK is for\n      a failure (4xx, 5xx, or 6xx) response, the new value\
    \ MUST NOT be\n      used.\n   o  As stated in Sections 6 and 7, the Session-ID\
    \ header field value\n      included in a CANCEL request MUST be identical to\
    \ the Session-ID\n      header field value included in the corresponding INVITE\
    \ request.\n      Upon receiving a CANCEL request, an endpoint or intermediary\
    \ would\n      normally send a 487 Request Terminated response (see\n      Section\
    \ 15.1.2 of [RFC3261]) which, by the rules outlined above,\n      would result\
    \ in the endpoint or intermediary not storing any UUID\n      value contained\
    \ in the CANCEL request.  Section 3.8 of [RFC6141]\n      specifies conditions\
    \ where a CANCEL request can result in a 2xx\n      response.  Because a CANCEL\
    \ request is not passed end-to-end and\n      will always contain the UUID from\
    \ the original INVITE request,\n      retaining a new UUID value received in a\
    \ CANCEL request may result\n      in inconsistency with the Session-ID value\
    \ stored on the endpoints\n      and intermediaries involved in the session. \
    \ To avoid this\n      situation, an endpoint or intermediary MUST NOT accept\
    \ the new\n      UUID value received in a CANCEL request and any subsequent\n\
    \      messages MUST contain the previously stored UUID value in the\n      \"\
    remote\" parameter\".  Note that the response to the CANCEL request\n      will\
    \ contain the UUID value from the CANCEL request in the\n      \"remote\" parameter.\n\
    \   o  When an endpoint or intermediary receives a response containing a\n   \
    \   new UUID from a peer, the endpoint or intermediary MUST accept the\n     \
    \ new UUID as the peer's UUID and include this new UUID as the\n      \"remote\"\
    \ parameter for any subsequent messages.\n   When an intermediary accepts a new\
    \ UUID from a peer, the intermediary\n   SHOULD attempt to provide the correct\
    \ Session-ID header field to\n   other endpoints involved in the session, for\
    \ example, by sending a\n   re-INVITE request.  If an intermediary receives a\
    \ message with a\n   \"remote\" parameter in the session identifier that does\
    \ not match the\n   updated UUID, the intermediary MUST update the \"remote\"\
    \ parameter\n   with the latest stored UUID.\n   If an intermediary is performing\
    \ interworking between two different\n   protocols that both support the session\
    \ identifier defined in this\n   document (e.g., SIP to H.323), UUID changes SHOULD\
    \ be communicated\n   between protocols to maintain the end-to-end session identifier.\n"
- title: 9.  Associating Endpoints in a Multipoint Conference
  contents:
  - "9.  Associating Endpoints in a Multipoint Conference\n   Multipoint Control Units\
    \ (MCUs) group two or more sessions into a\n   single multipoint conference and\
    \ have a conference focus responsible\n   for maintaining the dialogs connected\
    \ to it [RFC4353].  MCUs,\n   including cascaded MCUs, MUST utilize the same UUID\
    \ value (\"local-\n   uuid\" portion of the Session-ID header field value) with\
    \ all\n   participants in the conference.  In so doing, each individual session\n\
    \   in the conference will have a unique session identifier (since each\n   endpoint\
    \ will create a unique UUID of its own), but will also have\n   one UUID in common\
    \ with all other participants in the conference.\n   When creating a cascaded\
    \ conference, an MCU MUST convey the UUID\n   value to be utilized for a conference\
    \ via the \"local-uuid\" portion of\n   the Session-ID header field value in an\
    \ INVITE request to a second\n   MCU when using SIP to establish the cascaded\
    \ conference.  A\n   conference bridge, or MCU, needs a way to identify itself\
    \ when\n   contacting another MCU.  [RFC4579] defines the \"isfocus\" Contact\n\
    \   header field value parameter just for this purpose.  The initial MCU\n   MUST\
    \ include the UUID of that particular conference in the \"local-\n   uuid\" of\
    \ an INVITE request to the other MCU(s) participating in that\n   conference.\
    \  Also included in this INVITE request is an \"isfocus\"\n   Contact header field\
    \ value parameter identifying that this INVITE\n   request is coming from an MCU,\
    \ and that this UUID is to be given out\n   in all responses from endpoints into\
    \ those MCUs participating in this\n   same conference.  This ensures that a single\
    \ UUID is common across\n   all participating MCUs of the same conference, but\
    \ that it is unique\n   between different conferences.\n   In the case where two\
    \ existing conferences are joined, there should\n   be a session between the two\
    \ MCUs where the session identifier is\n   comprised of the UUID values of the\
    \ two conferences.  This session\n   identifier can be used to correlate the sessions\
    \ between participants\n   in the joined conference.  This specification does\
    \ not impose any\n   additional requirements when two existing conferences are\
    \ joined.\n   Intermediary devices or network-diagnostic equipment might assume\n\
    \   that when they see two or more sessions with different session\n   identifiers\
    \ but with one UUID in common, the sessions are part of the\n   same conference.\
    \  However, the assumption that two sessions having\n   one common UUID being\
    \ part of the same conference is not always\n   correct.  In a SIP-forking scenario,\
    \ for example, there might also\n   exist what appears to be multiple sessions\
    \ with a shared UUID value;\n   this is intended.  The desire is to allow for\
    \ the association of\n   related sessions, regardless of whether a session is\
    \ forked or part\n   of a conference.\n"
- title: 10.  Examples of Various Call Flow Operations
  contents:
  - "10.  Examples of Various Call Flow Operations\n   Seeing something frequently\
    \ makes understanding easier.  With that in\n   mind, this section includes several\
    \ call flow examples with the\n   initial UUID and the complete session identifier\
    \ indicated per\n   message, as well as examples of when the session identifier\
    \ changes\n   according to the rules within this document during certain\n   operations/functions.\n\
    \   This section is for illustrative purposes only and is non-normative.\n   In\
    \ the following flows, \"RTP\" refers to the Real-time Transport\n   Protocol\
    \ [RFC3550].\n   In the examples in this section, \"N\" represents a nil UUID\
    \ and other\n   letters represent the unique UUID values corresponding to endpoints\n\
    \   or MCUs.\n"
- title: 10.1.  Basic Call with Two UUIDs
  contents:
  - "10.1.  Basic Call with Two UUIDs\n   Session-ID\n     ---     Alice         \
    \   B2BUA             Bob            Carol\n    {A,N}      |---INVITE F1--->|\
    \                |\n    {A,N}      |                |---INVITE F2--->|\n    {B,A}\
    \      |                |<---200 OK F3---|\n    {B,A}      |<---200 OK F4---|\
    \                |\n    {A,B}      |-----ACK F5---->|                |\n    {A,B}\
    \      |                |-----ACK F6---->|\n               |<==============RTP==============>|\n\
    \            Figure 1: Session-ID Creation When Alice Calls Bob\n   General operation\
    \ of this example:\n   o  UA-Alice populates the \"local-uuid\" portion of the\
    \ Session-ID\n      header field value.\n   o  UA-Alice sends its UUID in the\
    \ SIP INVITE request and populates\n      the \"remote\" parameter with a nil\
    \ value (32 zeros).\n   o  The B2BUA receives an INVITE request with both a \"\
    local-uuid\"\n      portion of the Session-ID header field value from UA-Alice\
    \ as well\n      as the nil \"remote-uuid\" value and transmits the INVITE request\n\
    \      towards UA-Bob with an unchanged Session-ID header field value.\n   o \
    \ UA-Bob receives the Session-ID and generates its \"local-uuid\"\n      portion\
    \ of the Session-ID header field value UUID to construct the\n      whole/complete\
    \ Session-ID header field value, at the same time\n      transferring UA-Alice's\
    \ UUID unchanged to the \"remote-uuid\"\n      portion of the Session-ID header\
    \ field value in the 200 OK SIP\n      response.\n   o  The B2BUA receives the\
    \ 200 OK response with a complete Session-ID\n      header field value from UA-Bob\
    \ and transmits the 200 OK response\n      towards UA-Alice with an unchanged\
    \ Session-ID header field value.\n   o  UA-Alice, upon reception of the 200 OK\
    \ from the B2BUA, transmits\n      the ACK towards the B2BUA.  The construction\
    \ of the Session-ID\n      header field in this ACK is that of UA-Alice's UUID\
    \ is the \"local-\n      uuid\", and UA-Bob's UUID populates the \"remote-uuid\"\
    \ portion of\n      the header-value.\n   o  The B2BUA receives the ACK with a\
    \ complete Session-ID header field\n      from UA-Alice and transmits the ACK\
    \ towards UA-Bob with an\n      unchanged Session-ID header field value.\n   Below\
    \ is a SIP message exchange illustrating proper use of the\n   Session-ID header\
    \ field.  For the sake of brevity, non-essential\n   headers and message bodies\
    \ are omitted.\n   F1 INVITE Alice -> B2BUA\n   INVITE sip:bob@biloxi.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP pc33.atlanta.example.com\n    ;branch=z9hG4bK776asdhds\n\
    \   Max-Forwards: 70\n   To: Bob <sip:bob@biloxi.example.com>\n   From: Alice\
    \ <sip:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710@pc33.atlanta.example.com\n\
    \   Session-ID: ab30317f1a784dc48ff824d0d3715d86\n    ;remote=00000000000000000000000000000000\n\
    \   CSeq: 314159 INVITE\n   Contact: <sip:alice@pc33.atlanta.example.com>\n  \
    \ Content-Type: application/sdp\n   Content-Length: 142\n   (Alice's SDP not shown)\n\
    \   F2 INVITE B2BUA -> Bob\n   INVITE sip:bob@192.168.10.20 SIP/2.0\n   Via: SIP/2.0/UDP\
    \ server10.biloxi.example.com\n    ;branch=z9hG4bK4b43c2ff8.1\n   Via: SIP/2.0/UDP\
    \ pc33.atlanta.example.com\n    ;branch=z9hG4bK776asdhds;received=10.1.3.33\n\
    \   Max-Forwards: 69\n   To: Bob <sip:bob@biloxi.example.com>\n   From: Alice\
    \ <sip:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710@pc33.atlanta.example.com\n\
    \   Session-ID: ab30317f1a784dc48ff824d0d3715d86\n    ;remote=00000000000000000000000000000000\n\
    \   CSeq: 314159 INVITE\n   Contact: <sip:alice@pc33.atlanta.example.com>\n  \
    \ Record-Route: <sip:server10.biloxi.example.com;lr>\n   Content-Type: application/sdp\n\
    \   Content-Length: 142\n   (Alice's SDP not shown)\n   F3 200 OK Bob -> B2BUA\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP server10.biloxi.example.com\n    ;branch=z9hG4bK4b43c2ff8.1;received=192.168.10.1\n\
    \   Via: SIP/2.0/UDP pc33.atlanta.example.com\n    ;branch=z9hG4bK776asdhds;received=10.1.3.33\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=a6c85cf\n   From: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n\
    \   Call-ID: a84b4c76e66710@pc33.atlanta.example.com\n   Session-ID: 47755a9de7794ba387653f2099600ef2\n\
    \    ;remote=ab30317f1a784dc48ff824d0d3715d86\n   CSeq: 314159 INVITE\n   Contact:\
    \ <sip:bob@192.168.10.20>\n   Record-Route: <sip:server10.biloxi.example.com;lr>\n\
    \   Content-Type: application/sdp\n   Content-Length: 131\n   (Bob's SDP not shown)\n\
    \   F4 200 OK B2BUA -> Alice\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP pc33.atlanta.example.com\n\
    \    ;branch=z9hG4bK776asdhds;received=10.1.3.33\n   To: Bob <sip:bob@biloxi.example.com>;tag=a6c85cf\n\
    \   From: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710@pc33.atlanta.example.com\n\
    \   Session-ID: 47755a9de7794ba387653f2099600ef2\n    ;remote=ab30317f1a784dc48ff824d0d3715d86\n\
    \   CSeq: 314159 INVITE\n   Contact: <sip:bob@192.168.10.20>\n   Record-Route:\
    \ <sip:server10.biloxi.example.com;lr>\n   Content-Type: application/sdp\n   Content-Length:\
    \ 131\n   (Bob's SDP not shown)\n   F5 ACK Alice -> B2BUA\n   ACK sip:bob@192.168.10.20\
    \ SIP/2.0\n   Via: SIP/2.0/UDP pc33.atlanta.example.com\n    ;branch=z9hG4bKnashds8\n\
    \   Route: <sip:server10.biloxi.example.com;lr>\n   Max-Forwards: 70\n   To: Bob\
    \ <sip:bob@biloxi.example.com>;tag=a6c85cf\n   From: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n\
    \   Call-ID: a84b4c76e66710@pc33.atlanta.example.com\n   Session-ID: ab30317f1a784dc48ff824d0d3715d86\n\
    \    ;remote=47755a9de7794ba387653f2099600ef2\n   CSeq: 314159 ACK\n   Content-Length:\
    \ 0\n   F6 ACK B2BUA -> Bob\n   ACK sip:bob@192.168.10.20 SIP/2.0\n   Via: SIP/2.0/UDP\
    \ server10.biloxi.example.com\n    ;branch=z9hG4bK4b43c2ff8.2\n   Via: SIP/2.0/UDP\
    \ pc33.atlanta.example.com\n    ;branch=z9hG4bKnashds8;received=10.1.3.33\n  \
    \ Max-Forwards: 70\n   To: Bob <sip:bob@biloxi.example.com>;tag=a6c85cf\n   From:\
    \ Alice <sip:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710@pc33.atlanta.example.com\n\
    \   Session-ID: ab30317f1a784dc48ff824d0d3715d86\n    ;remote=47755a9de7794ba387653f2099600ef2\n\
    \   CSeq: 314159 ACK\n   Content-Length: 0\n   The remaining examples in this\
    \ section do not display the complete\n   SIP message exchange.  Instead, they\
    \ simply use the set notation\n   described in Section 4.2 to show the session\
    \ identifier exchange\n   throughout the particular call flow being illustrated.\n"
- title: 10.2.  Basic Call Transfer Using REFER
  contents:
  - "10.2.  Basic Call Transfer Using REFER\n   From the example built within Section\
    \ 10.1, we proceed to this 'Basic\n   Call Transfer using REFER' example.  Note\
    \ that this is a mid-dialog\n   REFER in contrast with the out-of-dialog REFER\
    \ in Section 10.9.\n      Session-ID\n         ---     Alice            B2BUA\
    \             Bob            Carol\n                   |                |    \
    \            |               |\n                   |<==============RTP==============>|\
    \               |\n        {B,A}      |                |<---re-INVITE---|    \
    \           |\n        {B,A}      |<---re-INVITE---| (puts Alice on Hold)    \
    \       |\n        {A,B}      |-----200 OK---->|                |            \
    \   |\n        {A,B}      |                |-----200 OK---->|               |\n\
    \        {B,A}      |                |<-----ACK-------|               |\n    \
    \    {B,A}      |<-----ACK-------|                |               |\n        \
    \           |                |                |               |\n        {B,A}\
    \      |                |<----REFER------|               |\n        {B,A}    \
    \  |<----REFER------|                |               |\n        {A,B}      |-----200\
    \ OK---->|                |               |\n        {A,B}      |            \
    \    |-----200 OK---->|               |\n        {A,B}      |-----NOTIFY---->|\
    \                |               |\n        {A,B}      |                |-----NOTIFY---->|\
    \               |\n        {B,A}      |                |<----200 OK-----|    \
    \           |\n        {B,A}      |<----200 OK-----|                |        \
    \       |\n                   |                |                |            \
    \   |\n        {A,N}      |-----INVITE---->|                                |\n\
    \        {A,N}      |                |-----INVITE-------------------->|\n    \
    \    {C,A}      |                |<----200 OK---------------------|\n        {C,A}\
    \      |<----200 OK-----|                                |\n        {A,C}    \
    \  |------ACK------>|                                |\n        {A,C}      | \
    \               |------ACK---------------------->|\n                   |     \
    \           |                |               |\n                   |<======================RTP======================>|\n\
    \                   |                |                |               |\n    \
    \    {A,B}      |-----NOTIFY---->|                |               |\n        {A,B}\
    \      |                |-----NOTIFY---->|               |\n        {B,A}    \
    \  |                |<----200 OK-----|               |\n        {B,A}      |<----200\
    \ OK-----|                |               |\n        {B,A}      |            \
    \    |<-----BYE-------|               |\n        {B,A}      |<-----BYE-------|\
    \                |               |\n        {A,B}      |-----200 OK---->|    \
    \            |               |\n        {A,B}      |                |-----200\
    \ OK---->|               |\n                   |                |            \
    \    |               |\n                    Figure 2: Call Transfer Using REFER\n\
    \   General operation of this example:\n   Starting from the existing Alice/Bob\
    \ call described in Figure 1 of\n   this document, which established an existing\
    \ Session-ID header field\n   value:\n   o  UA-Bob requests Alice to call Carol,\
    \ using a REFER transaction, as\n      described in [RFC3515].  UA-Alice is initially\
    \ put on hold, then\n      told in the REFER who to contact with a new INVITE,\
    \ in this case\n      UA-Carol.  This Alice-to-Carol dialog will have a new Call-ID;\n\
    \      therefore, it requires a new Session-ID header field value.  The\n    \
    \  wrinkle here is we can, and will, use Alice's UUID from her\n      existing\
    \ dialog with Bob in the new INVITE request to Carol.\n   o  UA-Alice retains\
    \ her UUID from the Alice-to-Bob call {A} when\n      requesting a call with UA-Carol.\
    \  This is placed in the \"local-\n      uuid\" portion of the Session-ID header\
    \ field value, at the same\n      time inserting a nil \"remote-uuid\" value (because\
    \ Carol's UA has\n      not yet received the UUID value).  This same UUID traverses\
    \ the\n      B2BUA unchanged.\n   o  UA-Carol receives the INVITE request with\
    \ a session identifier\n      UUID {A,N}, replaces the \"A\" UUID value into the\
    \ \"remote-uuid\"\n      portion of the Session-ID header field value and creates\
    \ its own\n      UUID {C}, and places this value in the \"local-uuid\" portion\
    \ of the\n      Session-ID header field value, thereby removing the \"N\" (nil)\n\
    \      value altogether.  This combination forms a full session\n      identifier\
    \ {C,A} in the 200 OK to the INVITE.  This Session-ID\n      header field traverses\
    \ the B2BUA unchanged towards UA-Alice.\n   o  UA-Alice receives the 200 OK with\
    \ the session identifier {C,A} and\n      responds to UA-Carol with an ACK (just\
    \ as in Figure 1, this\n      switches the places of the two UUID fields), and\
    \ generates a\n      NOTIFY request to Bob with a session identifier {A,B} indicating\n\
    \      that the call transfer was successful.\n   o  It does not matter which\
    \ UA terminates the Alice-to-Bob call;\n      Figure 2 shows UA-Bob terminating\
    \ the call.\n"
- title: 10.3.  Basic Call Transfer Using Re-INVITE
  contents:
  - "10.3.  Basic Call Transfer Using Re-INVITE\n   From the example built within\
    \ Section 10.1, we proceed to this 'Basic\n   Call Transfer using re-INVITE' example.\n\
    \   Alice is talking to Bob.  Bob pushes a button on his phone to\n   transfer\
    \ Alice to Carol via the B2BUA (using re-INVITE).\n      Session-ID\n        \
    \ ---     Alice            B2BUA             Bob            Carol\n          \
    \         |                |                |               |\n              \
    \     |<==============RTP==============>|               |\n                  \
    \ |                |                |               |\n                   |  \
    \              | <--- (non-standard signaling)  |\n        {A,B}      |      \
    \          |---re-INVITE--->|               |\n        {B,A}      |          \
    \      |<-----200 OK----|               |\n        {A,B}      |              \
    \  |-----ACK------->|               |\n                   |                | \
    \               |               |\n        {A,N}      |                |-----INVITE-------------------->|\n\
    \        {C,A}      |                |<----200 OK---------------------|\n    \
    \    {A,C}      |                |------ACK---------------------->|\n        \
    \           |                |                |               |\n            \
    \       |<======================RTP======================>|\n                \
    \   |                |                |               |\n        {A,B}      |\
    \                |------BYE------>|               |\n        {B,A}      |    \
    \            |<----200 OK-----|               |\n                   |        \
    \        |                |               |\n        {C,A}      |<--re-INVITE----|\
    \                |               |\n        {A,C}      |----200 OK----->|    \
    \            |               |\n        {C,A}      |<-----ACK-------|        \
    \        |               |\n                   | (Suppose Alice modifies the session)\
    \            |\n        {A,C}      |---re-INVITE--->|                |       \
    \        |\n        {A,C}      |                |---re-INVITE------------------->|\n\
    \        {C,A}      |                |<---200 OK----------------------|\n    \
    \    {C,A}      |<---200 OK------|                |               |\n        {A,C}\
    \      |------ACK------>|                |               |\n        {A,C}    \
    \  |                |------ACK---------------------->|\n                   | \
    \               |                |               |\n                  Figure 3:\
    \ Call Transfer Using Re-INVITE\n   General operation of this example:\n   o \
    \ We assume the call between Alice and Bob from Section 10.1 is\n      operational\
    \ with session identifier {A,B}.\n   o  Bob uses non-standard signaling to the\
    \ B2BUA to initiate a call\n      transfer from Alice to Carol.  This could also\
    \ be initiated via a\n      REFER message from Bob, but the signaling that follows\
    \ might still\n      be similar to the above flow.  In either case, Alice is completely\n\
    \      unaware of the call transfer until a future point in time when\n      Alice\
    \ receives a message from Carol.\n   o  The B2BUA sends a re-INVITE request with\
    \ the session identifier\n      {\"local-uuid\" = \"A\", \"remote-uuid\" = \"\
    B\"} to renegotiate the\n      session with Bob.\n   o  The B2BUA sends a new\
    \ INVITE request with Alice's UUID {\"local-\n      uuid\" = \"A\"} to Carol.\n\
    \   o  Carol receives the INVITE request and accepts the request and adds\n  \
    \    her UUID {C} to the session identifier for this session {\"local-\n     \
    \ uuid\" = \"C\", \"remote-uuid\" = \"A\"}.\n   o  The B2BUA then terminates the\
    \ call to Bob with a BYE using the\n      session identifier {\"local-uuid\" =\
    \ \"A\", \"remote-uuid\" = \"B\"}.\n   o  The B2BUA sends a re-INVITE request\
    \ to Alice to update Alice's\n      view of the session identifier.\n   o  When\
    \ Alice later attempts to modify the session with a re-INVITE,\n      Alice will\
    \ send \"remote-uuid\" = \"C\" toward Carol because it had\n      previously received\
    \ the updated UUID in the re-INVITE request from\n      the B2BUA.  The B2BUA\
    \ maintains the session identifier {\"local-\n      uuid\" = \"A\", \"remote-uuid\"\
    \ = \"C\"}.  Carol replies with the \"local-\n      uuid\" = \"C\", \"remote-uuid\"\
    \ = \"A\" to reflect what was received in\n      the INVITE request (which Carol\
    \ already knew from previous\n      exchanges with the B2BUA).  Alice then includes\
    \ \"remote-uuid\" =\n      \"C\" in the subsequent ACK message.\n"
- title: 10.4.  Single Focus Conferencing
  contents:
  - "10.4.  Single Focus Conferencing\n   Multiple users call into a conference server\
    \ (for example, an MCU) to\n   attend one of many conferences hosted on or managed\
    \ by that server.\n   Each user has to identify which conference they want to\
    \ join, but\n   this information is not necessarily in the SIP messaging.  It\
    \ might\n   be done by having a dedicated address for the conference or via an\n\
    \   Interactive Voice Response (IVR), as assumed in this example and\n   depicted\
    \ with the use of M1, M2, and M3.  Each user in this example\n   goes through\
    \ a two-step process of signaling to gain entry onto their\n   conference call,\
    \ which the conference focus identifies as \"M\".\n      Session-ID          \
    \      Conference\n         ---     Alice            Focus             Bob   \
    \         Carol\n                   |                |                |      \
    \         |\n                   |                |                |          \
    \     |\n        {A,N}      |----INVITE----->|                |              \
    \ |\n        {M1,A}     |<---200 OK------|                |               |\n\
    \        {A,M1}     |-----ACK------->|                |               |\n    \
    \               |<====RTP=======>|                |               |\n        {M',A}\
    \     |<---re-INVITE---|                |               |\n        {A,M'}    \
    \ |-----200 OK---->|                |               |\n        {M',A}     |<-----ACK-------|\
    \                |               |\n                   |                |    \
    \            |               |\n                   |                |        \
    \        |               |\n        {B,N}      |                |<----INVITE-----|\
    \               |\n        {M2,B}     |                |-----200 OK---->|    \
    \           |\n        {B,M2}     |                |<-----ACK-------|        \
    \       |\n                   |                |<=====RTP======>|            \
    \   |\n        {M',B}     |                |---re-INVITE--->|               |\n\
    \        {B,M'}     |                |<----200 OK-----|               |\n    \
    \    {M',B}     |                |------ACK------>|               |\n        \
    \           |                |                |               |\n            \
    \       |                |                |               |\n        {C,N}   \
    \   |                |<--------------------INVITE-----|\n        {M3,C}     |\
    \                |---------------------200 OK---->|\n        {C,M3}     |    \
    \            |<---------------------ACK-------|\n                   |        \
    \        |<=====================RTP======>|\n        {M',C}     |            \
    \    |-------------------re-INVITE--->|\n        {C,M'}     |                |<--------------------200\
    \ OK-----|\n        {M',C}     |                |----------------------ACK------>|\n\
    \                 Figure 4: Single Focus Conference Bridge\n   General operation\
    \ of this example:\n   Alice calls into a conference server to attend a certain\
    \ conference.\n   This is a two-step operation since Alice cannot include the\n\
    \   conference ID at this time and/or any passcode in the INVITE request.\n  \
    \ The first step is Alice's UA calling another UA to participate in a\n   session.\
    \  This will appear to be similar as the call flow in Figure 1\n   (in Section\
    \ 10.1).  What is unique about this call is the second\n   step: the conference\
    \ server sends a re-INVITE request with its second\n   UUID, but maintaining the\
    \ UUID Alice sent in the first INVITE.  This\n   subsequent UUID from the conference\
    \ server will be the same for each\n   UA that calls into this conference server\
    \ participating in this same\n   conference bridge/call, which is generated once\
    \ Alice typically\n   authenticates and identifies which bridge she wants to participate\n\
    \   on.\n   o  Alice sends an INVITE request to the conference server with her\n\
    \      UUID {A} and a \"remote-uuid\" = \"N\".\n   o  The conference server responds\
    \ with a 200 OK response, which\n      replaces the \"N\" UUID with a temporary\
    \ UUID (\"M1\") as the \"local-\n      uuid\" and a \"remote-uuid\" = \"A\".\n\
    \   NOTE: this 'temporary' UUID is a real UUID; it is only temporary to\n   the\
    \ conference server because it knows that it is going to generate\n   another\
    \ UUID to replace the one just sent in the 200 OK response.\n   o  Once Alice,\
    \ the user, gains access to the IVR for this conference\n      server, she enters\
    \ a specific conference ID and whatever passcode\n      (if needed) to enter a\
    \ specific conference call.\n   o  Once the conference server is satisfied Alice\
    \ has identified which\n      conference she wants to attend (including any passcode\n\
    \      verification), the conference server re-INVITEs Alice to the\n      specific\
    \ conference and includes the Session-ID header field value\n      component \"\
    local-uuid\" = \"M'\" (and \"remote-uuid\" = \"A\") for that\n      conference.\
    \  All valid participants in the same conference will\n      receive this same\
    \ UUID for identification purposes and to better\n      enable monitoring and\
    \ tracking functions.\n   o  Bob goes through this two-step process of an INVITE\
    \ transaction,\n      followed by a re-INVITE transaction to get this same UUID\
    \ (\"M'\")\n      for the conference.\n   o  In this example, Carol (and each\
    \ additional user) goes through the\n      same procedures as Alice and Bob to\
    \ get on this same conference.\n"
- title: 10.5.  Single Focus Conferencing Using a Web-Based Conference Service
  contents:
  - "10.5.  Single Focus Conferencing Using a Web-Based Conference Service\n   Alice,\
    \ Bob, and Carol call into the same web-based conference.  Note\n   that this\
    \ is one of many ways of implementing this functionality, and\n   it should not\
    \ be construed as the preferred way of establishing a\n   web-based conference.\n\
    \      Session-ID                Conference\n         ---     Alice          \
    \  Focus             Bob            Carol\n                   |              \
    \  |                |               |\n                   |<** HTTPS *****>| \
    \               |               |\n                   |  Transaction   |     \
    \           |               |\n                   |                |         \
    \       |               |\n        {M,N}      |<----INVITE-----|             \
    \   |               |\n        {A,M}      |-----200 OK---->|                |\
    \               |\n        {M,A}      |<-----ACK-------|                |    \
    \           |\n                   |<=====RTP======>|                |        \
    \       |\n                   |                |                |            \
    \   |\n                   |                |<** HTTPS *****>|               |\n\
    \                   |                |  Transaction   |               |\n    \
    \               |                |                |               |\n        {M,N}\
    \      |                |-----INVITE---->|               |\n        {B,M}    \
    \  |                |<----200 OK-----|               |\n        {M,B}      | \
    \               |------ACK------>|               |\n                   |     \
    \           |<=====RTP======>|               |\n                   |         \
    \       |                |               |\n                   |             \
    \   |<****************** HTTPS *****>|\n                   |                |\
    \                   Transaction  |\n                   |                |    \
    \            |               |\n        {M,N}      |                |--------------------INVITE----->|\n\
    \        {C,M}      |                |<-------------------200 OK------|\n    \
    \    {M,C}      |                |---------------------ACK------->|\n        \
    \           |                |<====================RTP=======>|\n            \
    \    Figure 5: Single Focus Web-Based Conference\n   General operation of this\
    \ example:\n   o  Alice communicates with the web server that she wants to join\
    \ a\n      certain meeting by using a meeting number and including UA-Alice's\n\
    \      contact information (phone number, URI, and/or IP address, etc.)\n    \
    \  for each device she wants for this conference call.  For example,\n      the\
    \ audio and video (A/V) play-out devices could be separate\n      units.\n   o\
    \  The Conference Focus server sends the INVITE request (Session-ID\n      header\
    \ field value components \"local-uuid\" = \"M\" and a remote UUID\n      of \"\
    N\", where \"M\" equals the \"local-uuid\" for each participant on\n      this\
    \ conference bridge) to UA-Alice to start a session with that\n      server for\
    \ this A/V conference call.\n   o  Upon receiving the INVITE request from the\
    \ conference focus\n      server, Alice responds with a 200 OK.  Her UA moves\
    \ the \"local-\n      uuid\" unchanged into the \"remote-uuid\" field, generates\
    \ her own\n      UUID, and places that into the \"local-uuid\" field to complete\
    \ the\n      Session-ID construction.\n   o  Bob and Carol perform same function\
    \ to join this same A/V\n      conference call as Alice.\n"
- title: 10.6.  Cascading Conference Bridges
  contents:
  - '10.6.  Cascading Conference Bridges

    '
- title: 10.6.1.  Establishing a Cascaded Conference
  contents:
  - "10.6.1.  Establishing a Cascaded Conference\n   Expanding conferencing capabilities\
    \ requires cascading conference\n   bridges.  A conference bridge, or MCU, needs\
    \ a way to identify itself\n   when contacting another MCU.  [RFC4579] defines\
    \ the \"isfocus\" Contact\n   header field value parameter just for this purpose.\n\
    \      Session-ID\n         ---     MCU-1            MCU-2            MCU-3  \
    \         MCU-4\n                   |                |                |      \
    \         |\n        {M',N}     |----INVITE----->|                |          \
    \     |\n        {J,M'}     |<---200 OK------|                |              \
    \ |\n        {M',J}     |-----ACK------->|                |               |\n\
    \      Figure 6: MCUs Communicating Session Identifier UUID for Bridge\n   Regardless\
    \ of which MCU (1 or 2) a UA contacts for this conference,\n   once the above\
    \ exchange has been received and acknowledged, the UA\n   will get the same {M',N}\
    \ UUID pair from the MCU for the complete\n   session identifier.\n   A more complex\
    \ form would be a series of MCUs all being informed of\n   the same UUID to use\
    \ for a specific conference.  This series of MCUs\n   can be informed in one of\
    \ two ways:\n   o  All by one MCU (that initially generates the UUID for the\n\
    \      conference).\n   o  The MCU that generates the UUID informs one or several\
    \ MCUs of\n      this common UUID, and then they inform downstream MCUs of this\n\
    \      common UUID that each will be using for this one conference.\n      Session-ID\n\
    \         ---     MCU-1            MCU-2            MCU-3           MCU-4\n  \
    \                 |                |                |               |\n      \
    \  {M',N}     |----INVITE----->|                |               |\n        {J,M'}\
    \     |<---200 OK------|                |               |\n        {M',J}    \
    \ |-----ACK------->|                |               |\n                   |  \
    \              |                |               |\n        {M',N}     |---------------------INVITE----->|\
    \               |\n        {K,M'}     |<--------------------200 OK------|    \
    \           |\n        {M',K}     |----------------------ACK------->|        \
    \       |\n                   |                |                |            \
    \   |\n        {M',N}     |-------------------------------------INVITE----->|\n\
    \        {L,M'}     |<------------------------------------200 OK------|\n    \
    \    {M',L}     |--------------------------------------ACK------->|\n        \
    \                Figure 7: MCU Communicating\n               Session Identifier\
    \ UUID to More Than One MCU\n   General operation of this example:\n   o  The\
    \ MCU generating the session identifier UUID communicates this\n      in a separate\
    \ INVITE, having a Contact header with the \"isfocus\"\n      Contact header field\
    \ value parameter.  This will identify the MCU\n      as what [RFC4579] calls\
    \ a \"conference-aware\" SIP entity.\n   o  An MCU that receives this {M',N} UUID\
    \ pair in an inter-MCU\n      transaction can communicate the M' UUID in a manner\
    \ in which it\n      was received to construct a hierarchical cascade (though\
    \ this time\n      this second MCU would be the UAC MCU).\n   o  Once the conference\
    \ is terminated, the cascaded MCUs will receive\n      a BYE message to terminate\
    \ the cascade.\n"
- title: 10.6.2.  Calling Into Cascaded Conference Bridges
  contents:
  - "10.6.2.  Calling Into Cascaded Conference Bridges\n   Here is an example of how\
    \ a UA, Robert for example, calls into a\n   cascaded conference focus.  Because\
    \ MCU-1 has already contacted MCU-3\n   (the MCU where Robert is going to join\
    \ the conference), MCU-3 already\n   has the Session-ID (M') for this particular\
    \ conference call.\n      Session-ID\n         ---     MCU-1            MCU-2\
    \            MCU-3          Robert\n                   |                |    \
    \            |               |\n        {M',N}     |----INVITE----->|        \
    \        |               |\n        {J,M'}     |<---200 OK------|            \
    \    |               |\n        {M',J}     |-----ACK------->|                |\
    \               |\n                   |                |                |    \
    \           |\n        {M',N}     |---------------------INVITE----->|        \
    \       |\n        {K,M'}     |<--------------------200 OK------|            \
    \   |\n        {M',K}     |----------------------ACK------->|               |\n\
    \                   |                |                |               |\n    \
    \    {R,N}      |                |                |<---INVITE-----|\n        (M',R}\
    \     |                |                |----200 OK---->|\n        {R,M'}    \
    \ |                |                |<----ACK-------|\n              Figure 8:\
    \ A UA Calling Into a Cascaded MCU UUID\n   General operation of this example:\n\
    \   o  The UA, Robert in this case, INVITEs the MCU to join a particular\n   \
    \   conference call.  Robert's UA does not know anything about whether\n     \
    \ this is the main MCU of the conference call or a cascaded MCU.\n      Robert\
    \ likely does not know MCUs can be cascaded, he just wants to\n      join a particular\
    \ call.  As is the case with any standard\n      implementation, he includes a\
    \ nil \"remote-uuid\".\n   o  The cascaded MCU, upon receiving this INVITE request\
    \ from Robert,\n      replaces the nil UUID with the UUID value communicated from\
    \ MCU-1\n      for this conference call as the \"local-uuid\" in the SIP response,\n\
    \      thus moving Robert's UUID \"R\" to the \"remote-uuid\" value.\n   o  The\
    \ ACK has the Session-ID {R,M'}, completing the three-way\n      handshake for\
    \ this call establishment.  Robert has now joined the\n      conference call originated\
    \ from MCU-1.\n   o  Once the conference is terminated, the cascaded MCUs will\
    \ receive\n      a BYE message to terminate the cascade.\n"
- title: 10.7.  Basic 3PCC for Two UAs
  contents:
  - "10.7.  Basic 3PCC for Two UAs\n   An external entity sets up calls to both Alice\
    \ and Bob for them to\n   talk to each other.\n      Session-ID\n         ---\
    \     Alice            B2BUA             Bob            Carol\n              \
    \     |                |                |\n        {X,N}      |<----INVITE-----|\
    \                |\n        {A,X}      |-----200 OK---->|                |\n \
    \       {A,N}      |                |----INVITE----->|\n        {B,A}      | \
    \               |<---200 OK------|\n        {B,A}      |<-----ACK-------|    \
    \            |\n        {A,B}      |                |------ACK------>|\n     \
    \              |<==============RTP==============>|\n            Figure 9: 3PCC-Initiated\
    \ Call between Alice and Bob\n   General operation of this example:\n   o  Some\
    \ out-of-band procedure directs a B2BUA (or other SIP server)\n      to have Alice\
    \ and Bob talk to each other.  In this case, the SIP\n      server has to be transaction\
    \ stateful, if not dialog stateful.\n   o  The SIP server INVITEs Alice to a session\
    \ and uses a temporary\n      UUID {X} and a nil UUID pairing.\n   o  Alice receives\
    \ and accepts this call setup and replaces the nil\n      UUID with her UUID {A}\
    \ in the session identifier, now {A,X}.\n   o  The transaction-stateful SIP server\
    \ receives Alice's UUID {A} in\n      the local UUID portion and keeps it there;\
    \ and it discards its own\n      UUID {X}, replacing this with a nil UUID value\
    \ in the INVITE\n      request to Bob as if this came from Alice originally.\n\
    \   o  Bob receives and accepts this INVITE request and adds his own UUID\n  \
    \    {B} to the session identifier, now {B,A}, for the response.\n   o  The session\
    \ is established.\n"
- title: 10.8.  Handling in 100 Trying SIP Response and CANCEL Request
  contents:
  - "10.8.  Handling in 100 Trying SIP Response and CANCEL Request\n   The following\
    \ two subsections show examples of the session identifier\n   for a 100 Trying\
    \ response and a CANCEL request in a single call flow.\n"
- title: 10.8.1.  Handling in a 100 Trying SIP Response
  contents:
  - "10.8.1.  Handling in a 100 Trying SIP Response\n   The following 100 Trying response\
    \ is taken from [RFC5359],\n   Section 2.9 (\"Call Forwarding - No Answer\").\n\
    \    Session-ID   Alice         SIP Server        Bob-1            Bob-2\n   \
    \                |                |              |                |\n      {A,N}\
    \        |----INVITE----->|              |                |\n      {A,N}     \
    \   |                |---INVITE---->|                |\n      {N,A}        |<--100\
    \ Trying---|              |                |\n      {B1,A}       |           \
    \     |<-180 Ringing-|                |\n      {B1,A}       |<--180 Ringing--|\
    \              |                |\n                   |                |     \
    \         |                |\n                   |                *Request Timeout*\
    \               |\n                   |                |              |      \
    \          |\n      {A,N}        |                |---CANCEL---->|           \
    \     |\n      {B1,A}       |                |<--200 OK-----|                |\n\
    \      {B1,A}       |                |<---487-------|                |\n     \
    \ {A,B1}       |                |---- ACK ---->|                |\n          \
    \         |                |              |                |\n      {N,A}    \
    \    |<-181 Call Fwd--|              |                |\n                   |\
    \                |              |                |\n      {A,N}        |     \
    \           |------------------INVITE------>|\n      {B2,A}       |          \
    \      |<----------------180 Ringing---|\n      {B2,A}       |<-180 Ringing---|\
    \              |                |\n      {B2,A}       |                |<-----------------200\
    \ OK ------|\n      {B2,A}       |<--200 OK-------|              |           \
    \     |\n      {A,B2}       |----ACK-------->|              |                |\n\
    \      {A,B2}       |                |------------------ACK--------->|\n     \
    \              |                |              |                |\n          \
    \         |<=========== Both way RTP Established =========>|\n               \
    \    |                |              |                |\n      {A,B2}       |----BYE-------->|\
    \              |                |\n      {A,B2}       |                |--------------------BYE------->|\n\
    \      {B2,A}       |                |<------------------200 OK------|\n     \
    \ {B2,A}       |<--200 OK-------|              |                |\n          \
    \         |                |              |                |\n   Figure 10: Session\
    \ Identifier in the 100 Trying and CANCEL Messaging\n   Below is the explanatory\
    \ text from RFC 5359, Section 2.9, detailing\n   what the desired behavior is\
    \ in the above call flow (i.e., what the\n   call flow is attempting to achieve).\n\
    \      Bob wants calls to B1 forwarded to B2 if B1 is not answered\n      (information\
    \ is known to the SIP server).  Alice calls B1, and no\n      one answers.  The\
    \ SIP server then places the call to B2.\n   General operation of this example:\n\
    \   o  Alice generates an INVITE request because she wants to invite Bob\n   \
    \   to join her session.  She creates a UUID as described in\n      Section 10.1,\
    \ and she places that value in the \"local-uuid\" field\n      of the Session-ID\
    \ header field value.  Alice also generates a\n      \"remote-uuid\" of nil and\
    \ sends this along with the \"local-uuid\".\n   o  The SIP server (imagine this\
    \ is a B2BUA), upon receiving Alice's\n      INVITE request, generates the optional\
    \ provisional response 100\n      Trying.  Since the SIP server has no knowledge\
    \ of Bob's UUID for\n      his part of the session identifier value, it cannot\
    \ include his\n      \"local-uuid\".  Rather, any 100 Trying response includes\
    \ Alice's\n      UUID in the \"remote-uuid\" portion of the Session-ID header-value\n\
    \      with a nil \"local-uuid\" value in the response.  This is consistent\n\
    \      with what Alice's UA expects to receive in any SIP response\n      containing\
    \ this UUID.\n"
- title: 10.8.2.  Handling a CANCEL SIP Request
  contents:
  - "10.8.2.  Handling a CANCEL SIP Request\n   In the same call flow example as the\
    \ 100 Trying response is a CANCEL\n   request.  Please refer to Figure 10 for\
    \ the CANCEL request example.\n   General operation of this example:\n   o  In\
    \ Figure 10 above, Alice generates an INVITE request with her\n      UUID value\
    \ in the Session-ID header field.\n   o  Bob-1 responds to this INVITE request\
    \ with a 180 Ringing.  In that\n      response, he includes his UUID in the Session-ID\
    \ header field\n      value (i.e., {B1,A}); thus completing the Session-ID header\
    \ field\n      for this session, even though no final response has been generated\n\
    \      by any of Bob's UAs.\n   o  While this means that if the SIP server were\
    \ to generate a SIP\n      request within this session it could include the complete\n\
    \      SessionID, the server sends a CANCEL request and a CANCEL request\n   \
    \   always uses the same Session-ID header field as the original\n      INVITE\
    \ request.  Thus, the CANCEL request would have a session\n      identifier with\
    \ the \"local-uuid\" = \"A\", and the \"remote-uuid\" =\n      \"N\".\n   o  As\
    \ it happens with this CANCEL, the SIP server intends to invite\n      another\
    \ UA of Bob's (i.e., B2) for Alice to communicate with.\n   o  In this example\
    \ call flow, taken from RFC 5359, Section 2.9, a 181\n      Call is Being Forwarded\
    \ response is sent to Alice.  Since the SIP\n      server generated this SIP request,\
    \ and has no knowledge of Bob-2's\n      UUID value, it cannot include that value\
    \ in this 181.  Thus, and\n      for the exact reasons the 100 Trying including\
    \ the session\n      identifier value, only Alice's UUID is included in the remote-uuid\n\
    \      component of the Session-ID header field value, with a nil UUID\n     \
    \ present in the \"local-uuid\" component.\n"
- title: 10.9.  Out-of-Dialog REFER Transaction
  contents:
  - "10.9.  Out-of-Dialog REFER Transaction\n   The following call flow was extracted\
    \ from Section 6.1 of [RFC5589]\n   (\"Successful Transfer\"), with the only changes\
    \ being the names of the\n   UAs to maintain consistency within this document.\n\
    \         Alice is the transferee\n         Bob is the transferer\n         and\
    \ Carol is the transfer-target\n     Session-ID     Bob                 Alice\
    \                 Carol\n                     |                    |         \
    \            |\n        {A,N}        |<-----INVITE--------|                  \
    \   |\n        {B,A}        |------200 OK------->|                     |\n   \
    \     {A,B}        |<------ACK----------|                     |\n            \
    \         |                    |                     |\n        {B,A}        |--INVITE\
    \ {hold}---->|                     |\n        {A,B}        |<-200 OK------------|\
    \                     |\n        {B,A}        |--- ACK ----------->|         \
    \            |\n                     |                    |                  \
    \   |\n        {B,A}        |--REFER------------>|(Refer-To:Carol)     |\n   \
    \     {A,B}        |<-202 Accepted------|                     |\n            \
    \         |                    |                     |\n        {A,B}        |<NOTIFY\
    \ {100 Trying}|                     |\n        {B,A}        |-200 OK------------>|\
    \                     |\n                     |                    |         \
    \            |\n        {A,N}        |                    |--INVITE------------>|\n\
    \        {C,A}        |                    |<-200 OK-------------|\n        {A,C}\
    \        |                    |---ACK-------------->|\n                     |\
    \                    |                     |\n        {A,B}        |<--NOTIFY\
    \ {200 OK}--|                     |\n        {B,A}        |---200 OK---------->|\
    \                     |\n                     |                    |         \
    \            |\n        {B,A}        |--BYE-------------->|                  \
    \   |\n        {A,B}        |<-200 OK------------|                     |\n   \
    \     {C,A}        |                    |<------------BYE-----|\n        {A,C}\
    \        |                    |-------------200 OK->|\n                  Figure\
    \ 11: Out-Of-Dialog Call Transfer\n   General operation of this example:\n   o\
    \  Just as in Section 10.2, Figure 2, Alice invites Bob to a session,\n      and\
    \ Bob eventually transfers Alice to communicate with Carol.\n   o  What is different\
    \ about the call flow in Figure 11 is that Bob's\n      REFER is not in-dialog.\
    \  Even so, this is treated as part of the\n      same communication session and,\
    \ thus, the session identifier in\n      those messages is {A,B}.\n   o  Alice\
    \ will use her existing UUID and the nil UUID ({A,N}) in the\n      INVITE request\
    \ towards Carol (who generates UUID \"C\" for this\n      session), thus maintaining\
    \ the common UUID within the session\n      identifier for this new Alice-to-Carol\
    \ session.\n"
- title: 11.  Compatibility with a Previous Implementation
  contents:
  - "11.  Compatibility with a Previous Implementation\n   There is a much earlier\
    \ document that specifies the use of a Session-\n   ID header field (namely, [RFC7329])\
    \ that we will herewith attempt to\n   achieve backwards compatibility.  Neither\
    \ Session-ID header field has\n   any versioning information, so merely adding\
    \ that this document\n   describes \"version 2\" is insufficient.  This section\
    \ contains the set\n   of rules for compatibility between the two specifications.\
    \  Although\n   the previous version was never standardized, it has been heavily\n\
    \   implemented and adopted by other standards development organizations.\n  \
    \ For the purposes of this discussion, we will label the pre-standard\n   specification\
    \ of the Session-ID as the \"old\" version and this\n   specification as the \"\
    new\" version of the Session-ID.\n   The previous (i.e., \"old\") version only\
    \ has a single UUID value as a\n   Session-ID header field value, but has a generic-parameter\
    \ value that\n   can be of use.\n   In order to have an \"old\" version talk to\
    \ an \"old\" version\n   implementation, nothing needs to be done as far as the\
    \ IETF is\n   concerned.\n   In order to have a \"new\" version talk to a \"new\"\
    \ version\n   implementation, both implementations need to follow this document\
    \ (to\n   the letter) and everything should be just fine.\n   For this \"new\"\
    \ implementation to work with the \"old\" implementation\n   and an \"old\" implementation\
    \ to work with \"new\" implementations, there\n   needs to be a set of rules that\
    \ all \"new\" implementations MUST follow\n   if the \"new\" implementation will\
    \ be communicating with devices that\n   have implemented the \"old\" implementation.\n\
    \   o  Since no option tags or feature tags are to be used for\n      distinguishing\
    \ versions, the presence and order of any \"remote-\n      uuid\" value within\
    \ the Session-ID header field value is to be used\n      to distinguish implementation\
    \ versions.\n   o  If a SIP request has a \"remote-uuid\" value, this comes from\
    \ a\n      standard implementation, and not a pre-standard one.\n   o  If a SIP\
    \ request has no \"remote-uuid\" value, this comes from a\n      pre-standard\
    \ implementation, and not a standard one.  In this\n      case, one UUID is used\
    \ to identify this dialog, even if the\n      responder is a standard implementor\
    \ of this specification.\n   o  If a SIP response has a non-nil \"local-uuid\"\
    \ that is 32 octets\n      long and differs from the endpoint's own UUID value,\
    \ this response\n      comes from a standard implementation.\n   o  If a SIP response\
    \ arrives that has the same value of Session-ID\n      UUIDs in the same order\
    \ as was sent, this comes from a pre-\n      standard implementation and MUST\
    \ NOT be discarded even though the\n      \"remote-uuid\" may be nil.  In this\
    \ case, any new transaction\n      within this dialog MUST preserve the order\
    \ of the two UUIDs within\n      all Session-ID header fields, including the ACK,\
    \ until this dialog\n      is terminated.\n   o  If a SIP response only contains\
    \ the \"local-uuid\" that was sent\n      originally, this comes from a pre-standard\
    \ implementation and MUST\n      NOT be discarded for removing the nil \"remote-uuid\"\
    .  In this\n      case, all future transactions within this dialog MUST contain\
    \ only\n      the UUID received in the first SIP response.  Any new transaction\n\
    \      starting a new dialog from the standard Session-ID implementation\n   \
    \   MUST include a \"local-uuid\" and a nil \"remote-uuid\", even if that\n  \
    \    new dialog is between the same two UAs.\n   o  Standard implementations should\
    \ not expect pre-standard\n      implementations to be consistent in their implementation,\
    \ even\n      within the same dialog.  For example, perhaps the first, third,\n\
    \      and tenth responses contain a \"remote-uuid\", but all the others do\n\
    \      not.  This behavior MUST be allowed by implementations of this\n      specification.\n\
    \   o  The foregoing does not apply to other, presently unknown\n      parameters\
    \ that might be defined in the future.  They are ignored\n      for the purposes\
    \ of interoperability with previous\n      implementations.\n"
- title: 12.  Security and Privacy Considerations
  contents:
  - "12.  Security and Privacy Considerations\n   The session identifier MUST be constructed\
    \ in such a way that does\n   not convey any user or device information as outlined\
    \ in Section 4.1.\n   This ensures that the data contained in the session identifier\
    \ itself\n   does not convey user or device information; however, the session\n\
    \   identifier may reveal relationships between endpoints that might not\n   be\
    \ revealed by messages without a session identifier.\n   Section 4.2 requires\
    \ that a UA always generate a new, previously\n   unused UUID when transmitting\
    \ a request to initiate a new session.\n   This ensures that two unrelated sessions\
    \ originating from the same UA\n   will never have the same UUID value, thereby\
    \ removing the ability for\n   an attacker to use the session identifier to identify\
    \ the two\n   unrelated sessions as being associated with the same user.\n   Because\
    \ of the inherent property that session identifiers are\n   conveyed end-to-end\
    \ and remain unchanged by a UA for the duration of\n   a session, the session\
    \ identifier could be misused to discover\n   relationships between two or more\
    \ parties when multiple parties are\n   involved in the same session such as the\
    \ case of a redirect,\n   transfer, or conference.  For example, suppose that\
    \ Alice calls Bob\n   and Bob, via his PBX (acting as a B2BUA), forwards or transfers\
    \ the\n   call to Carol.  Without use of the session identifier, an\n   unauthorized\
    \ third party that is observing the communications between\n   Alice and Bob might\
    \ not know that Alice is actually communicating\n   with Carol.  If Alice, Bob,\
    \ and Carol include the session identifier\n   as a part of the signaling messages,\
    \ it is possible for the third\n   party to observe that the UA associated with\
    \ Bob changed to some\n   other UA.  If the third party also has access to signaling\
    \ messages\n   between Bob and Carol, the third party can then discover that Alice\n\
    \   is communicating with Carol.  This would be true even if all other\n   information\
    \ relating to the session is changed by the PBX, including\n   both signaling\
    \ information and media address information.  That said,\n   the session identifier\
    \ would not reveal the identity of Alice, Bob,\n   or Carol.  It would only reveal\
    \ the fact that those endpoints were\n   associated with the same session.\n \
    \  This document allows for additional parameters (generic-param) to be\n   included\
    \ in the Session-ID header.  This is done to allow for future\n   extensions while\
    \ preserving backward compatibility with this\n   document.  To protect privacy,\
    \ the data for any generic-param\n   included in the Session-ID header value MUST\
    \ NOT include any user or\n   device information.  Additionally, any information\
    \ conveyed through\n   an additional parameter MUST NOT persist beyond the current\
    \ session,\n   and therefore MUST NOT be reused between unrelated sessions.\n\
    \   Additional parameters MAY be used by future extensions of this\n   document\
    \ to correlate related communication sessions that cannot\n   already be correlated\
    \ by the procedures described in this document as\n   long as the requirements\
    \ regarding privacy and persistence defined\n   above are followed.\n   An intermediary\
    \ implementing a privacy service that provides user\n   privacy as per Section\
    \ 5.3 of [RFC3323] MAY choose to consider the\n   Session-ID header as being a\
    \ nonessential informational header with\n   the understanding that doing so will\
    \ impair the ability to use the\n   session identifier for troubleshooting purposes.\n"
- title: 13.  IANA Considerations
  contents:
  - '13.  IANA Considerations

    '
- title: 13.1.  Registration of the "Session-ID" Header Field
  contents:
  - "13.1.  Registration of the \"Session-ID\" Header Field\n   The following is the\
    \ registration for the Session-ID header field to\n   the \"Header Name\" registry\
    \ at\n   <http://www.iana.org/assignments/sip-parameters>:\n   RFC number: RFC\
    \ 7989\n   Header name: 'Session-ID'\n   Compact form: none\n   Note: This document\
    \ replaces the Session-ID header originally\n   registered via [RFC7329].\n"
- title: 13.2.  Registration of the "remote" Parameter
  contents:
  - "13.2.  Registration of the \"remote\" Parameter\n   The following parameter has\
    \ been added to the \"Header Field\n   Parameters and Parameter Values\" section\
    \ of the \"Session Initiation\n   Protocol (SIP) Parameters\" registry:\n    \
    \ +--------------+----------------+-------------------+-----------+\n     | Header\
    \ Field | Parameter Name | Predefined Values | Reference |\n     +--------------+----------------+-------------------+-----------+\n\
    \     |  Session-ID  |     remote     |         No        | [RFC7989] |\n    \
    \ +--------------+----------------+-------------------+-----------+\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3515]\
    \  Sparks, R., \"The Session Initiation Protocol (SIP) Refer\n              Method\"\
    , RFC 3515, DOI 10.17487/RFC3515, April 2003,\n              <http://www.rfc-editor.org/info/rfc3515>.\n\
    \   [RFC3891]  Mahy, R., Biggs, B., and R. Dean, \"The Session Initiation\n  \
    \            Protocol (SIP) \"Replaces\" Header\", RFC 3891,\n              DOI\
    \ 10.17487/RFC3891, September 2004,\n              <http://www.rfc-editor.org/info/rfc3891>.\n\
    \   [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n       \
    \       Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI\
    \ 10.17487/RFC4122, July 2005,\n              <http://www.rfc-editor.org/info/rfc4122>.\n\
    \   [RFC4579]  Johnston, A. and O. Levin, \"Session Initiation Protocol\n    \
    \          (SIP) Call Control - Conferencing for User Agents\",\n            \
    \  BCP 119, RFC 4579, DOI 10.17487/RFC4579, August 2006,\n              <http://www.rfc-editor.org/info/rfc4579>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7206]\
    \  Jones, P., Salgueiro, G., Polk, J., Liess, L., and H.\n              Kaplan,\
    \ \"Requirements for an End-to-End Session\n              Identification in IP-Based\
    \ Multimedia Communication\n              Networks\", RFC 7206, DOI 10.17487/RFC7206,\
    \ May 2014,\n              <http://www.rfc-editor.org/info/rfc7206>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [H.323]    International Telecommunications\
    \ Union, \"Packet-based\n              multimedia communications systems\", ITU-T\n\
    \              Recommendation H.323, December 2009.\n   [H.460.27] International\
    \ Telecommunications Union, \"End-to-End\n              Session Identifier for\
    \ H.323 Systems\", ITU-T\n              Recommendation H.460.27, November 2015.\n\
    \   [RFC2543]  Handley, M., Schulzrinne, H., Schooler, E., and J.\n          \
    \    Rosenberg, \"SIP: Session Initiation Protocol\", RFC 2543,\n            \
    \  DOI 10.17487/RFC2543, March 1999,\n              <http://www.rfc-editor.org/info/rfc2543>.\n\
    \   [RFC3323]  Peterson, J., \"A Privacy Mechanism for the Session\n         \
    \     Initiation Protocol (SIP)\", RFC 3323,\n              DOI 10.17487/RFC3323,\
    \ November 2002,\n              <http://www.rfc-editor.org/info/rfc3323>.\n  \
    \ [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n            \
    \  Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC3725]  Rosenberg, J., Peterson, J., Schulzrinne, H., and G.\n        \
    \      Camarillo, \"Best Current Practices for Third Party Call\n            \
    \  Control (3pcc) in the Session Initiation Protocol (SIP)\",\n              BCP\
    \ 85, RFC 3725, DOI 10.17487/RFC3725, April 2004,\n              <http://www.rfc-editor.org/info/rfc3725>.\n\
    \   [RFC4353]  Rosenberg, J., \"A Framework for Conferencing with the\n      \
    \        Session Initiation Protocol (SIP)\", RFC 4353,\n              DOI 10.17487/RFC4353,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4353>.\n  \
    \ [RFC5359]  Johnston, A., Ed., Sparks, R., Cunningham, C., Donovan,\n       \
    \       S., and K. Summers, \"Session Initiation Protocol Service\n          \
    \    Examples\", BCP 144, RFC 5359, DOI 10.17487/RFC5359,\n              October\
    \ 2008, <http://www.rfc-editor.org/info/rfc5359>.\n   [RFC5589]  Sparks, R., Johnston,\
    \ A., Ed., and D. Petrie, \"Session\n              Initiation Protocol (SIP) Call\
    \ Control - Transfer\",\n              BCP 149, RFC 5589, DOI 10.17487/RFC5589,\
    \ June 2009,\n              <http://www.rfc-editor.org/info/rfc5589>.\n   [RFC6141]\
    \  Camarillo, G., Ed., Holmberg, C., and Y. Gao, \"Re-INVITE\n              and\
    \ Target-Refresh Request Handling in the Session\n              Initiation Protocol\
    \ (SIP)\", RFC 6141,\n              DOI 10.17487/RFC6141, March 2011,\n      \
    \        <http://www.rfc-editor.org/info/rfc6141>.\n   [RFC6872]  Gurbani, V.,\
    \ Ed., Burger, E., Ed., Anjali, T., Abdelnur,\n              H., and O. Festor,\
    \ \"The Common Log Format (CLF) for the\n              Session Initiation Protocol\
    \ (SIP): Framework and\n              Information Model\", RFC 6872, DOI 10.17487/RFC6872,\n\
    \              February 2013, <http://www.rfc-editor.org/info/rfc6872>.\n   [RFC7092]\
    \  Kaplan, H. and V. Pascual, \"A Taxonomy of Session\n              Initiation\
    \ Protocol (SIP) Back-to-Back User Agents\",\n              RFC 7092, DOI 10.17487/RFC7092,\
    \ December 2013,\n              <http://www.rfc-editor.org/info/rfc7092>.\n  \
    \ [RFC7329]  Kaplan, H., \"A Session Identifier for the Session\n            \
    \  Initiation Protocol (SIP)\", RFC 7329,\n              DOI 10.17487/RFC7329,\
    \ August 2014,\n              <http://www.rfc-editor.org/info/rfc7329>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Robert Sparks, Hadriel Kaplan,\n\
    \   Christer Holmberg, Paul Kyzivat, Brett Tate, Keith Drage, Mary\n   Barnes,\
    \ Charles Eckel, Peter Dawes, Andrew Hutton, Arun Arunachalam,\n   Adam Gensler,\
    \ Roland Jesske, and Faisal Siyavudeen for their\n   invaluable comments during\
    \ the development of this document.\n"
- title: Dedication
  contents:
  - "Dedication\n   This document is dedicated to the memory of James Polk, a long-time\n\
    \   friend and colleague.  James made important contributions to this\n   specification,\
    \ including being one of its primary editors.  The IETF\n   global community mourns\
    \ his loss, and he will be missed dearly.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul E. Jones\n   Cisco Systems, Inc.\n   7025 Kit Creek\
    \ Rd.\n   Research Triangle Park, NC  27709\n   United States of America\n   Phone:\
    \ +1 919 476 2048\n   Email: paulej@packetizer.com\n   Gonzalo Salgueiro\n   Cisco\
    \ Systems, Inc.\n   7025 Kit Creek Rd.\n   Research Triangle Park, NC  27709\n\
    \   United States of America\n   Phone: +1 919 392 3266\n   Email: gsalguei@cisco.com\n\
    \   Chris Pearce\n   Cisco Systems, Inc.\n   2300 East President George Bush Highway\n\
    \   Richardson, TX  75082\n   United States of America\n   Phone: +1 972 813 5123\n\
    \   Email: chrep@cisco.com\n   Paul Giralt\n   Cisco Systems, Inc.\n   7025 Kit\
    \ Creek Rd.\n   Research Triangle Park, NC  27709\n   United States of America\n\
    \   Phone: +1 919 991 5644\n   Email: pgiralt@cisco.com\n"
