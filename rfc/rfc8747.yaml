- title: __initial_text__
  contents:
  - '      Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification describes how to declare in a CBOR Web Token\
    \ (CWT)\n   (which is defined by RFC 8392) that the presenter of the CWT\n   possesses\
    \ a particular proof-of-possession key.  Being able to prove\n   possession of\
    \ a key is also sometimes described as being the holder-\n   of-key.  This specification\
    \ provides equivalent functionality to\n   \"Proof-of-Possession Key Semantics\
    \ for JSON Web Tokens (JWTs)\" (RFC\n   7800) but using Concise Binary Object\
    \ Representation (CBOR) and CWTs\n   rather than JavaScript Object Notation (JSON)\
    \ and JSON Web Tokens\n   (JWTs).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8747.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Representations\
    \ for Proof-of-Possession Keys\n     3.1.  Confirmation Claim\n     3.2.  Representation\
    \ of an Asymmetric Proof-of-Possession Key\n     3.3.  Representation of an Encrypted\
    \ Symmetric\n           Proof-of-Possession Key\n     3.4.  Representation of\
    \ a Key ID for a Proof-of-Possession Key\n     3.5.  Specifics Intentionally Not\
    \ Specified\n   4.  Security Considerations\n   5.  Privacy Considerations\n \
    \  6.  Operational Considerations\n   7.  IANA Considerations\n     7.1.  CBOR\
    \ Web Token Claims Registration\n       7.1.1.  Registry Contents\n     7.2. \
    \ CWT Confirmation Methods Registry\n       7.2.1.  Registration Template\n  \
    \     7.2.2.  Initial Registry Contents\n   8.  References\n     8.1.  Normative\
    \ References\n     8.2.  Informative References\n   Acknowledgements\n   Authors'\
    \ Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification describes how a CBOR Web Token (CWT)\
    \ [RFC8392] can\n   declare that the presenter of the CWT possesses a particular\
    \ proof-\n   of-possession (PoP) key.  Proof of possession of a key is also\n\
    \   sometimes described as being the holder-of-key.  This specification\n   provides\
    \ equivalent functionality to \"Proof-of-Possession Key\n   Semantics for JSON\
    \ Web Tokens (JWTs)\" [RFC7800] but using Concise\n   Binary Object Representation\
    \ (CBOR) [RFC7049] and CWTs [RFC8392]\n   rather than JavaScript Object Notation\
    \ (JSON) [RFC8259] and JSON Web\n   Tokens (JWTs) [JWT].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n   This specification uses terms defined in the\
    \ CBOR Web Token (CWT)\n   [RFC8392], CBOR Object Signing and Encryption (COSE)\
    \ [RFC8152], and\n   Concise Binary Object Representation (CBOR) [RFC7049] specifications.\n\
    \   These terms are defined by this specification:\n   Issuer\n      Party that\
    \ creates the CWT and binds the claims about the subject\n      to the proof-of-possession\
    \ key.\n   Presenter\n      Party that proves possession of a private key (for\
    \ asymmetric key\n      cryptography) or secret key (for symmetric key cryptography)\
    \ to a\n      recipient of a CWT.\n      In the context of OAuth, this party is\
    \ also called the OAuth\n      Client.\n   Recipient\n      Party that receives\
    \ the CWT containing the proof-of-possession key\n      information from the presenter.\n\
    \      In the context of OAuth, this party is also called the OAuth\n      Resource\
    \ Server.\n   This specification provides examples in CBOR extended diagnostic\n\
    \   notation, as defined in Appendix G of [RFC8610].  The examples\n   include\
    \ line breaks for readability.\n"
- title: 3.  Representations for Proof-of-Possession Keys
  contents:
  - "3.  Representations for Proof-of-Possession Keys\n   By including a \"cnf\" (confirmation)\
    \ claim in a CWT, the issuer of the\n   CWT declares that the presenter possesses\
    \ a particular key and that\n   the recipient can cryptographically confirm that\
    \ the presenter has\n   possession of that key.  The value of the \"cnf\" claim\
    \ is a CBOR map\n   (which is defined in Section 2.1 of [RFC7049]) and the members\
    \ of\n   that map identify the proof-of-possession key.\n   The presenter can\
    \ be identified in one of several ways by the CWT,\n   depending upon the application\
    \ requirements.  For instance, some\n   applications may use the CWT \"sub\" (subject)\
    \ claim [RFC8392] to\n   identify the presenter.  Other applications may use the\
    \ \"iss\"\n   (issuer) claim [RFC8392] to identify the presenter.  In some\n \
    \  applications, the subject identifier might be relative to the issuer\n   identified\
    \ by the \"iss\" claim.  The actual mechanism used is\n   dependent upon the application.\
    \  The case in which the presenter is\n   the subject of the CWT is analogous\
    \ to Security Assertion Markup\n   Language (SAML) 2.0 [OASIS.saml-core-2.0-os]\
    \ SubjectConfirmation\n   usage.\n"
- title: 3.1.  Confirmation Claim
  contents:
  - "3.1.  Confirmation Claim\n   The \"cnf\" claim in the CWT is used to carry confirmation\
    \ methods.\n   Some of them use proof-of-possession keys, while others do not.\
    \  This\n   design is analogous to the SAML 2.0 [OASIS.saml-core-2.0-os]\n   SubjectConfirmation\
    \ element in which a number of different subject\n   confirmation methods can\
    \ be included (including proof-of-possession\n   key information).\n   The set\
    \ of confirmation members that a CWT must contain to be\n   considered valid is\
    \ context dependent and is outside the scope of\n   this specification.  Specific\
    \ applications of CWTs will require\n   implementations to understand and process\
    \ some confirmation members\n   in particular ways.  However, in the absence of\
    \ such requirements,\n   all confirmation members that are not understood by implementations\n\
    \   MUST be ignored.\n   Section 7.2 establishes the IANA \"CWT Confirmation Methods\"\
    \ registry\n   for CWT \"cnf\" member values and registers the members defined\
    \ by this\n   specification.  Other specifications can register other members\
    \ used\n   for confirmation, including other members for conveying proof-of-\n\
    \   possession keys using different key representations.\n   The \"cnf\" claim\
    \ value MUST represent only a single proof-of-\n   possession key.  At most one\
    \ of the \"COSE_Key\" and\n   \"Encrypted_COSE_Key\" confirmation values defined\
    \ in Table 1 may be\n   present.  Note that if an application needs to represent\
    \ multiple\n   proof-of-possession keys in the same CWT, one way for it to achieve\n\
    \   this is to use other claim names (in addition to \"cnf\") to hold the\n  \
    \ additional proof-of-possession key information.  These claims could\n   use\
    \ the same syntax and semantics as the \"cnf\" claim.  Those claims\n   would\
    \ be defined by applications or other specifications and could be\n   registered\
    \ in the IANA \"CBOR Web Token (CWT) Claims\" registry\n   [IANA.CWT.Claims].\n\
    \       | Name               | Key | Value type                    |\n       |\
    \ COSE_Key           | 1   | COSE_Key                      |\n       | Encrypted_COSE_Key\
    \ | 2   | COSE_Encrypt or COSE_Encrypt0 |\n       | kid                | 3   |\
    \ binary string                 |\n        Table 1: Summary of the \"cnf\" Names,\
    \ Keys, and Value Types\n"
- title: 3.2.  Representation of an Asymmetric Proof-of-Possession Key
  contents:
  - "3.2.  Representation of an Asymmetric Proof-of-Possession Key\n   When the key\
    \ held by the presenter is an asymmetric private key, the\n   \"COSE_Key\" member\
    \ is a COSE_Key [RFC8152] representing the\n   corresponding asymmetric public\
    \ key.  The following example\n   demonstrates such a declaration in the CWT Claims\
    \ Set of a CWT:\n    {\n    /iss/ 1 : \"coaps://server.example.com\",\n    /aud/\
    \ 3 : \"coaps://client.example.org\",\n    /exp/ 4 : 1879067471,\n    /cnf/ 8\
    \ :{\n      /COSE_Key/ 1 :{\n        /kty/ 1 : /EC2/ 2,\n        /crv/ -1 : /P-256/\
    \ 1,\n        /x/ -2 : h'd7cc072de2205bdc1537a543d53c60a6acb62eccd890c7fa27c9\n\
    \                   e354089bbe13',\n        /y/ -3 : h'f95e1d4b851a2cc80fff87d8e23f22afb725d535e515d020731e\n\
    \                   79a3b4e47120'\n       }\n     }\n   }\n   The COSE_Key MUST\
    \ contain the required key members for a COSE_Key of\n   that key type and MAY\
    \ contain other COSE_Key members, including the\n   \"kid\" (Key ID) member.\n\
    \   The \"COSE_Key\" member MAY also be used for a COSE_Key representing a\n \
    \  symmetric key, provided that the CWT is encrypted so that the key is\n   not\
    \ revealed to unintended parties.  The means of encrypting a CWT is\n   explained\
    \ in [RFC8392].  If the CWT is not encrypted, the symmetric\n   key MUST be encrypted\
    \ as described in Section 3.3.  This procedure is\n   equivalent to the one defined\
    \ in Section 3.3 of [RFC7800].\n"
- title: 3.3.  Representation of an Encrypted Symmetric Proof-of-Possession Key
  contents:
  - "3.3.  Representation of an Encrypted Symmetric Proof-of-Possession Key\n   When\
    \ the key held by the presenter is a symmetric key, the\n   \"Encrypted_COSE_Key\"\
    \ member is an encrypted COSE_Key [RFC8152]\n   representing the symmetric key\
    \ encrypted to a key known to the\n   recipient using COSE_Encrypt or COSE_Encrypt0.\n\
    \   The following example illustrates a symmetric key that could\n   subsequently\
    \ be encrypted for use in the \"Encrypted_COSE_Key\" member:\n   {\n    /kty/\
    \ 1 : /Symmetric/ 4,\n    /alg/ 3 : /HMAC 256-256/ 5,\n    /k/ -1 : h'6684523ab17337f173500e5728c628547cb37df\n\
    \               e68449c65f885d1b73b49eae1'\n   }\n   The COSE_Key representation\
    \ is used as the plaintext when encrypting\n   the key.\n   The following example\
    \ CWT Claims Set of a CWT illustrates the use of\n   an encrypted symmetric key\
    \ as the \"Encrypted_COSE_Key\" member value:\n   {\n    /iss/ 1 : \"coaps://server.example.com\"\
    ,\n    /sub/ 2 : \"24400320\",\n    /aud/ 3: \"s6BhdRkqt3\",\n    /exp/ 4 : 1311281970,\n\
    \    /iat/ 5 : 1311280970,\n    /cnf/ 8 : {\n    /Encrypted_COSE_Key/ 2 : [\n\
    \       /protected header/ h'A1010A' /{ \\alg\\ 1:10 \\AES-CCM-16-64-128\\}/,\n\
    \       /unprotected header/ { / iv / 5: h'636898994FF0EC7BFCF6D3F95B'},\n   \
    \    /ciphertext/  h'0573318A3573EB983E55A7C2F06CADD0796C9E584F1D0E3E\n      \
    \                 A8C5B052592A8B2694BE9654F0431F38D5BBC8049FA7F13F'\n      ]\n\
    \     }\n   }\n   The example above was generated with the key:\n   h'6162630405060708090a0b0c0d0e0f10'\n"
- title: 3.4.  Representation of a Key ID for a Proof-of-Possession Key
  contents:
  - "3.4.  Representation of a Key ID for a Proof-of-Possession Key\n   The proof-of-possession\
    \ key can also be identified using a Key ID\n   instead of communicating the actual\
    \ key, provided the recipient is\n   able to obtain the identified key using the\
    \ Key ID.  In this case,\n   the issuer of a CWT declares that the presenter possesses\
    \ a\n   particular key and that the recipient can cryptographically confirm\n\
    \   the presenter's proof of possession of the key by including a \"cnf\"\n  \
    \ claim in the CWT whose value is a CBOR map containing a \"kid\" member\n   identifying\
    \ the key.\n   The following example demonstrates such a declaration in the CWT\n\
    \   Claims Set of a CWT:\n   {\n    /iss/ 1 : \"coaps://as.example.com\",\n  \
    \  /aud/ 3 : \"coaps://resource.example.org\",\n    /exp/ 4 : 1361398824,\n  \
    \  /cnf/ 8 : {\n      /kid/ 3 : h'dfd1aa976d8d4575a0fe34b96de2bfad'\n     }\n\
    \   }\n   The content of the \"kid\" value is application specific.  For\n   instance,\
    \ some applications may choose to use a cryptographic hash of\n   the public key\
    \ value as the \"kid\" value.\n   Note that the use of a Key ID to identify a\
    \ proof-of-possession key\n   needs to be carefully circumscribed, as described\
    \ below and in\n   Section 6.  In cases where the Key ID is not a cryptographic\
    \ value\n   derived from the key or where not all of the parties involved are\n\
    \   validating the cryptographic derivation, implementers should expect\n   collisions\
    \ where different keys are assigned the same Key ID.\n   Recipients of a CWT with\
    \ a PoP key linked through only a Key ID\n   should be prepared to handle such\
    \ situations.\n   In the world of constrained Internet of Things (IoT) devices,\
    \ there\n   is frequently a restriction on the size of Key IDs, either because\
    \ of\n   table constraints or a desire to keep message sizes small.\n   Note that\
    \ the value of a Key ID for a specific key is not necessarily\n   the same for\
    \ different parties.  When sending a COSE encrypted\n   message with a shared\
    \ key, the Key ID may be different on both sides\n   of the conversation, with\
    \ the appropriate one being included in the\n   message based on the recipient\
    \ of the message.\n"
- title: 3.5.  Specifics Intentionally Not Specified
  contents:
  - "3.5.  Specifics Intentionally Not Specified\n   Proof of possession is often\
    \ demonstrated by having the presenter\n   sign a value determined by the recipient\
    \ using the key possessed by\n   the presenter.  This value is sometimes called\
    \ a \"nonce\" or a\n   \"challenge\".  There are, however, also other means to\
    \ demonstrate\n   freshness of the exchange and to link the proof-of-possession\
    \ key to\n   the participating parties, as demonstrated by various authentication\n\
    \   and key exchange protocols.\n   The means of communicating the nonce and the\
    \ nature of its contents\n   are intentionally not described in this specification,\
    \ as different\n   protocols will communicate this information in different ways.\n\
    \   Likewise, the means of communicating the signed nonce is also not\n   specified,\
    \ as this is also protocol specific.\n   Note that other means of proving possession\
    \ of the key exist, which\n   could be used in conjunction with a CWT's confirmation\
    \ key.\n   Applications making use of such alternate means are encouraged to\n\
    \   register them in the IANA \"CBOR Web Token (CWT) Confirmation Methods\"\n\
    \   registry established in Section 7.2.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   All the security considerations that are discussed\
    \ in [RFC8392] also\n   apply here.  In addition, proof of possession introduces\
    \ its own\n   unique security issues.  Possessing a key is only valuable if it\
    \ is\n   kept secret.  Appropriate means must be used to ensure that\n   unintended\
    \ parties do not learn private key or symmetric key values.\n   Applications utilizing\
    \ proof of possession SHOULD also utilize\n   audience restriction, as described\
    \ in Section 3.1.3 of [RFC8392],\n   because it provides additional protections.\
    \  Audience restriction can\n   be used by recipients to reject messages intended\
    \ for different\n   recipients.  (Of course, applications not using proof of possession\n\
    \   can also benefit from using audience restriction to reject messages\n   intended\
    \ for different recipients.)\n   CBOR Web Tokens with proof-of-possession keys\
    \ are used in context of\n   an architecture, such as the ACE OAuth Framework\
    \ [ACE-OAUTH], in\n   which protocols are used by a presenter to request these\
    \ tokens and\n   to subsequently use them with recipients.  Proof of possession\
    \ only\n   provides the intended security gains when the proof is known to be\n\
    \   current and not subject to replay attacks; security protocols using\n   mechanisms\
    \ such as nonces and timestamps can be used to avoid the\n   risk of replay when\
    \ performing proof of possession for a token.  Note\n   that a discussion of the\
    \ architecture or specific protocols that CWTs\n   with proof-of-possession keys\
    \ are used with is beyond the scope of\n   this specification.\n   As is the case\
    \ with other information included in a CWT, it is\n   necessary to apply data\
    \ origin authentication and integrity\n   protection (via a keyed message digest\
    \ or a digital signature).  Data\n   origin authentication ensures that the recipient\
    \ of the CWT learns\n   about the entity that created the CWT, since this will\
    \ be important\n   for any policy decisions.  Integrity protection prevents an\
    \ adversary\n   from changing any elements conveyed within the CWT payload.  Special\n\
    \   care has to be applied when carrying symmetric keys inside the CWT\n   since\
    \ those not only require integrity protection but also\n   confidentiality protection.\n\
    \   As described in Section 6 (Key Identification) and Appendix D (Notes\n   on\
    \ Key Selection) of [JWS], it is important to make explicit trust\n   decisions\
    \ about the keys.  Proof-of-possession signatures made with\n   keys not meeting\
    \ the application's trust criteria MUST NOT be relied\n   upon.\n"
- title: 5.  Privacy Considerations
  contents:
  - "5.  Privacy Considerations\n   A proof-of-possession key can be used as a correlation\
    \ handle if the\n   same key is used on multiple occasions.  Thus, for privacy\
    \ reasons,\n   it is recommended that different proof-of-possession keys be used\n\
    \   when interacting with different parties.\n"
- title: 6.  Operational Considerations
  contents:
  - "6.  Operational Considerations\n   The use of CWTs with proof-of-possession keys\
    \ requires additional\n   information to be shared between the involved parties\
    \ in order to\n   ensure correct processing.  The recipient needs to be able to\
    \ use\n   credentials to verify the authenticity and integrity of the CWT.\n \
    \  Furthermore, the recipient may need to be able to decrypt either the\n   whole\
    \ CWT or the encrypted parts thereof (see Section 3.3).  This\n   requires the\
    \ recipient to know information about the issuer.\n   Likewise, there needs to\
    \ be agreement between the issuer and the\n   recipient about the claims being\
    \ used (which is also true of CWTs in\n   general).\n   When an issuer creates\
    \ a CWT containing a Key ID claim, it needs to\n   make sure that it does not\
    \ issue another CWT with different claims\n   containing the same Key ID within\
    \ the lifetime of the CWTs, unless\n   intentionally desired.  Failure to do so\
    \ may allow one party to\n   impersonate another party, with the potential to\
    \ gain additional\n   privileges.  A case where such reuse of a Key ID would be\
    \ intentional\n   is when a presenter obtains a CWT with different claims (e.g.,\n\
    \   extended scope) for the same recipient but wants to continue using an\n  \
    \ existing security association (e.g., a DTLS session) bound to the key\n   identified\
    \ by the Key ID.  Likewise, if PoP keys are used for\n   multiple different kinds\
    \ of CWTs in an application and the PoP keys\n   are identified by Key IDs, care\
    \ must be taken to keep the keys for\n   the different kinds of CWTs segregated\
    \ so that an attacker cannot\n   cause the wrong PoP key to be used by using a\
    \ valid Key ID for the\n   wrong kind of CWT.  Using an audience restriction for\
    \ the CWT would\n   be one strategy to mitigate this risk.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The following registration procedure is used for\
    \ all the registries\n   established by this specification.\n   Values are registered\
    \ on a Specification Required [RFC8126] basis\n   after a three-week review period\
    \ on the <cwt-reg-review@ietf.org>\n   mailing list, on the advice of one or more\
    \ designated experts.\n   However, to allow for the allocation of values prior\
    \ to publication,\n   the designated experts may approve registration once they\
    \ are\n   satisfied that such a specification will be published.\n   Registration\
    \ requests sent to the mailing list for review should use\n   an appropriate subject\
    \ (e.g., \"Request to Register CWT Confirmation\n   Method: example\").  Registration\
    \ requests that are undetermined for a\n   period longer than 21 days can be brought\
    \ directly to IANA's\n   attention (using the iana@iana.org mailing list) for\
    \ resolution.\n   Designated experts should determine whether a registration request\n\
    \   contains enough information for the registry to be populated with the\n  \
    \ new values and whether the proposed new functionality already exists.\n   In\
    \ the case of an incomplete registration or an attempt to register\n   already\
    \ existing functionality, the designated experts should ask for\n   corrections\
    \ or reject the registration.\n   It is suggested that multiple designated experts\
    \ be appointed who are\n   able to represent the perspectives of different applications\
    \ using\n   this specification in order to enable broadly informed review of\n\
    \   registration decisions.  In cases where a registration decision could\n  \
    \ be perceived as creating a conflict of interest for a particular\n   expert,\
    \ that expert should defer to the judgment of the other\n   experts.\n"
- title: 7.1.  CBOR Web Token Claims Registration
  contents:
  - "7.1.  CBOR Web Token Claims Registration\n   This specification registers the\
    \ \"cnf\" claim in the IANA \"CBOR Web\n   Token (CWT) Claims\" registry [IANA.CWT.Claims],\
    \ established by\n   [RFC8392].\n"
- title: 7.1.1.  Registry Contents
  contents:
  - "7.1.1.  Registry Contents\n   *  Claim Name: \"cnf\"\n   *  Claim Description:\
    \ Confirmation\n   *  JWT Claim Name: \"cnf\"\n   *  Claim Key: 8\n   *  Claim\
    \ Value Type(s): map\n   *  Change Controller: IESG\n   *  Specification Document(s):\
    \ Section 3.1 of RFC 8747\n"
- title: 7.2.  CWT Confirmation Methods Registry
  contents:
  - "7.2.  CWT Confirmation Methods Registry\n   This specification establishes the\
    \ IANA \"CWT Confirmation Methods\"\n   registry for CWT \"cnf\" member values.\
    \  The registry records the\n   confirmation method member and a reference to\
    \ the specification that\n   defines it.\n"
- title: 7.2.1.  Registration Template
  contents:
  - "7.2.1.  Registration Template\n   Confirmation Method Name:\n      The human-readable\
    \ name requested (e.g., \"kid\").\n   Confirmation Method Description:\n     \
    \ Brief description of the confirmation method (e.g., \"Key\n      Identifier\"\
    ).\n   JWT Confirmation Method Name:\n      Claim Name of the equivalent JWT confirmation\
    \ method value, as\n      registered in the \"JSON Web Token Claims\" subregistry\
    \ in the \"JSON\n      Web Token (JWT)\" registry [IANA.JWT].  CWT claims should\
    \ normally\n      have a corresponding JWT claim.  If a corresponding JWT claim\n\
    \      would not make sense, the designated experts can choose to accept\n   \
    \   registrations for which the JWT Claim Name is listed as \"N/A\".\n   Confirmation\
    \ Key:\n      CBOR map key value for the confirmation method.\n   Confirmation\
    \ Value Type(s):\n      CBOR types that can be used for the confirmation method\
    \ value.\n   Change Controller:\n      For Standards Track RFCs, list the \"IESG\"\
    .  For others, give the\n      name of the responsible party.\n   Specification\
    \ Document(s):\n      Reference to the document or documents that specify the\
    \ parameter,\n      preferably including URIs that can be used to retrieve copies\
    \ of\n      the documents.  An indication of the relevant sections may also be\n\
    \      included but is not required.  Note that the designated experts\n     \
    \ and IANA must be able to obtain copies of the specification\n      document(s)\
    \ to perform their work.\n"
- title: 7.2.2.  Initial Registry Contents
  contents:
  - "7.2.2.  Initial Registry Contents\n   *  Confirmation Method Name: \"COSE_Key\"\
    \n   *  Confirmation Method Description: COSE_Key Representing Public Key\n  \
    \ *  JWT Confirmation Method Name: \"jwk\"\n   *  Confirmation Key: 1\n   *  Confirmation\
    \ Value Type(s): COSE_Key structure\n   *  Change Controller: IESG\n   *  Specification\
    \ Document(s): Section 3.2 of RFC 8747\n   *  Confirmation Method Name: \"Encrypted_COSE_Key\"\
    \n   *  Confirmation Method Description: Encrypted COSE_Key\n   *  JWT Confirmation\
    \ Method Name: \"jwe\"\n   *  Confirmation Key: 2\n   *  Confirmation Value Type(s):\
    \ COSE_Encrypt or COSE_Encrypt0\n      structure (with an optional corresponding\
    \ COSE_Encrypt or\n      COSE_Encrypt0 tag)\n   *  Change Controller: IESG\n \
    \  *  Specification Document(s): Section 3.3 of RFC 8747\n   *  Confirmation Method\
    \ Name: \"kid\"\n   *  Confirmation Method Description: Key Identifier\n   * \
    \ JWT Confirmation Method Name: \"kid\"\n   *  Confirmation Key: 3\n   *  Confirmation\
    \ Value Type(s): binary string\n   *  Change Controller: IESG\n   *  Specification\
    \ Document(s): Section 3.4 of RFC 8747\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IANA.CWT.Claims]\n              IANA, \"CBOR\
    \ Web Token Claims\",\n              <https://www.iana.org/assignments/cwt>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC7049]\
    \  Bormann, C. and P. Hoffman, \"Concise Binary Object\n              Representation\
    \ (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8152]  Schaad, J., \"CBOR Object Signing and Encryption (COSE)\",\n  \
    \            RFC 8152, DOI 10.17487/RFC8152, July 2017,\n              <https://www.rfc-editor.org/info/rfc8152>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8392]  Jones,\
    \ M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,\n              \"CBOR Web\
    \ Token (CWT)\", RFC 8392, DOI 10.17487/RFC8392,\n              May 2018, <https://www.rfc-editor.org/info/rfc8392>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ACE-OAUTH]\n              Seitz, L., Selander,\
    \ G., Wahlstroem, E., Erdtman, S., and\n              H. Tschofenig, \"Authentication\
    \ and Authorization for\n              Constrained Environments (ACE) using the\
    \ OAuth 2.0\n              Framework (ACE-OAuth)\", Work in Progress, Internet-Draft,\n\
    \              draft-ietf-ace-oauth-authz-21, 14 February 2019,\n            \
    \  <https://tools.ietf.org/html/draft-ietf-ace-oauth-authz-\n              21>.\n\
    \   [IANA.JWT] IANA, \"JSON Web Token (JWT)\",\n              <https://www.iana.org/assignments/jwt>.\n\
    \   [JWS]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n         \
    \     Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015,\
    \ <https://www.rfc-editor.org/info/rfc7515>.\n   [JWT]      Jones, M., Bradley,\
    \ J., and N. Sakimura, \"JSON Web Token\n              (JWT)\", RFC 7519, DOI\
    \ 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n\
    \   [OASIS.saml-core-2.0-os]\n              Cantor, S., Kemp, J., Philpott, R.,\
    \ and E. Maler,\n              \"Assertions and Protocol for the OASIS Security\
    \ Assertion\n              Markup Language (SAML) V2.0\", OASIS Standard saml-core-\n\
    \              2.0-os, March 2005, <https://docs.oasis-\n              open.org/security/saml/v2.0/saml-core-2.0-os.pdf>.\n\
    \   [RFC7800]  Jones, M., Bradley, J., and H. Tschofenig, \"Proof-of-\n      \
    \        Possession Key Semantics for JSON Web Tokens (JWTs)\",\n            \
    \  RFC 7800, DOI 10.17487/RFC7800, April 2016,\n              <https://www.rfc-editor.org/info/rfc7800>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n \
    \  [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, \"Concise Data\n     \
    \         Definition Language (CDDL): A Notational Convention to\n           \
    \   Express Concise Binary Object Representation (CBOR) and\n              JSON\
    \ Data Structures\", RFC 8610, DOI 10.17487/RFC8610,\n              June 2019,\
    \ <https://www.rfc-editor.org/info/rfc8610>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to the following people for their reviews of the\n\
    \   specification: Roman Danyliw, Christer Holmberg, Benjamin Kaduk,\n   Mirja\
    \ K\xFChlewind, Yoav Nir, Michael Richardson, Adam Roach, \xC9ric\n   Vyncke,\
    \ and Jim Schaad.\n   Ludwig Seitz and G\xF6ran Selander worked on this document\
    \ as part of\n   the CelticPlus projects CyberWI and CRITISEC, with funding from\n\
    \   Vinnova.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n\
    \   URI:   https://self-issued.info/\n   Ludwig Seitz\n   Combitech\n   Djaeknegatan\
    \ 31\n   SE-211 35 Malm\xF6\n   Sweden\n   Email: ludwig.seitz@combitech.se\n\
    \   G\xF6ran Selander\n   Ericsson AB\n   SE-164 80 Kista\n   Sweden\n   Email:\
    \ goran.selander@ericsson.com\n   Samuel Erdtman\n   Spotify\n   Email: erdtman@spotify.com\n\
    \   Hannes Tschofenig\n   Arm Ltd.\n   6060 Hall in Tirol\n"
