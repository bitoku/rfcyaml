- contents:
  - "                       Right-to-Left Scripts for\n         Internationalized
    Domain Names for Applications (IDNA)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The use of right-to-left scripts in Internationalized Domain Names\n
    \  (IDNs) has presented several challenges.  This memo provides a new\n   Bidi
    rule for Internationalized Domain Names for Applications (IDNA)\n   labels, based
    on the encountered problems with some scripts and some\n   shortcomings in the
    2003 IDNA Bidi criterion.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5893.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n     1.1.  Purpose and Applicability  . . . . . . . . . . . .
    . . . .  2\n     1.2.  Background and History . . . . . . . . . . . . . . . .
    . .  3\n     1.3.  Structure of the Rest of This Document . . . . . . . . . .
    \ 3\n     1.4.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  4\n
    \  2.  The Bidi Rule  . . . . . . . . . . . . . . . . . . . . . . . .  6\n   3.
    \ The Requirement Set for the Bidi Rule  . . . . . . . . . . . .  6\n   4.  Examples
    of Issues Found with RFC 3454 . . . . . . . . . . . .  9\n     4.1.  Dhivehi  .
    . . . . . . . . . . . . . . . . . . . . . . . .  9\n     4.2.  Yiddish  . . .
    . . . . . . . . . . . . . . . . . . . . . . 10\n     4.3.  Strings with Numbers
    . . . . . . . . . . . . . . . . . . . 12\n   5.  Troublesome Situations and Guidelines
    \ . . . . . . . . . . . . 12\n   6.  Other Issues in Need of Resolution . . .
    . . . . . . . . . . . 13\n   7.  Compatibility Considerations . . . . . . . .
    . . . . . . . . . 14\n     7.1.  Backwards Compatibility Considerations . . .
    . . . . . . . 14\n     7.2.  Forward Compatibility Considerations . . . . . .
    . . . . . 15\n   8.  Security Considerations  . . . . . . . . . . . . . . . .
    . . . 15\n   9.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . .
    . 16\n   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n
    \    10.1. Normative References . . . . . . . . . . . . . . . . . . . 16\n     10.2.
    Informative References . . . . . . . . . . . . . . . . . . 17\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Purpose and Applicability\n   The purpose of this document is to establish
      a rule that can be\n   applied to Internationalized Domain Name (IDN) labels
      in Unicode form\n   (U-labels) containing characters from scripts that are written
      from\n   right to left.  It is part of the revised IDNA protocol [RFC5891].\n
      \  When labels satisfy the rule, and when certain other conditions are\n   satisfied,
      there is only a minimal chance of these labels being\n   displayed in a confusing
      way by the Unicode bidirectional display\n   algorithm.\n   The other normative
      documents in the IDNA2008 document set establish\n   criteria for valid labels,
      including listing the permitted\n   characters.  This document establishes additional
      validity criteria\n   for labels in scripts normally written from right to left.\n
      \  This specification is not intended to place any requirements on\n   domain
      names that do not contain characters from such scripts.\n"
    title: 1.1.  Purpose and Applicability
  - contents:
    - "1.2.  Background and History\n   The \"Stringprep\" specification [RFC3454],
      part of IDNA2003, made the\n   following statement in its Section 6 on the Bidi
      algorithm:\n      3) If a string contains any RandALCat character, a RandALCat\n
      \     character MUST be the first character of the string, and a\n      RandALCat
      character MUST be the last character of the string.\n   (A RandALCat character
      is a character with unambiguously\n   right-to-left directionality.)\n   The
      reasoning behind this prohibition was to ensure that every\n   component of
      a displayed domain name has an unambiguously preferred\n   direction.  However,
      this made certain words in languages written\n   with right-to-left scripts
      invalid as IDN labels, and in at least one\n   case (Dhivehi) meant that all
      the words of an entire language were\n   forbidden as IDN labels.\n   This is
      illustrated below with examples taken from the Dhivehi and\n   Yiddish languages,
      as written with the Thaana and Hebrew scripts,\n   respectively.\n   RFC 3454
      did not explicitly state the requirement to be fulfilled.\n   Therefore, it
      is impossible to determine whether a simple relaxation\n   of the rule would
      continue to fulfill the requirement.\n   While this document specifies rules
      quite different from RFC 3454,\n   most reasonable labels that were allowed
      under RFC 3454 will also be\n   allowed under this specification (the most important
      example of\n   non-permitted labels being labels that mix Arabic and European
      digits\n   (AN and EN) inside an RTL label, and labels that use AN in an LTR\n
      \  label -- see Section 1.4 for terminology), so the operational impact\n   of
      using the new rule in the updated IDNA specification is limited.\n"
    title: 1.2.  Background and History
  - contents:
    - "1.3.  Structure of the Rest of This Document\n   Section 2 defines a rule,
      the \"Bidi rule\", which can be used on a\n   domain name label to check how
      safe it is to use in a domain name of\n   possibly mixed directionality.  The
      primary initial use of this rule\n   is as part of the IDNA2008 protocol [RFC5891].\n
      \  Section 3 sets out the requirements for defining the Bidi rule.\n   Section
      4 gives detailed examples that serve as justification for the\n   new rule.\n
      \  Section 5 to Section 8 describe various situations that can occur\n   when
      dealing with domain names with characters of different\n   directionality.\n
      \  Only Section 1.4 and Section 2 are normative.\n"
    title: 1.3.  Structure of the Rest of This Document
  - contents:
    - "1.4.  Terminology\n   The terminology used to describe IDNA concepts is defined
      in the\n   Definitions document [RFC5890].\n   The terminology used for the
      Bidi properties of Unicode characters is\n   taken from the Unicode Standard
      [Unicode52].\n   The Unicode Standard specifies a Bidi property for each character.\n
      \  That property controls the character's behavior in the Unicode\n   bidirectional
      algorithm [Unicode-UAX9].  For reference, here are the\n   values that the Unicode
      Bidi property can have:\n   o  L - Left to right - most letters in LTR scripts\n
      \  o  R - Right to left - most letters in non-Arabic RTL scripts\n   o  AL -
      Arabic letters - most letters in the Arabic script\n   o  EN - European Number
      (0-9, and Extended Arabic-Indic numbers)\n   o  ES - European Number Separator
      (+ and -)\n   o  ET - European Number Terminator (currency symbols, the hash
      sign,\n      the percent sign and so on)\n   o  AN - Arabic Number; this encompasses
      the Arabic-Indic numbers, but\n      not the Extended Arabic-Indic numbers\n
      \  o  CS - Common Number Separator (. , / : et al)\n   o  NSM - Nonspacing Mark
      - most combining accents\n   o  BN - Boundary Neutral - control characters (ZWNJ,
      ZWJ, and others)\n   o  B - Paragraph Separator\n   o  S - Segment Separator\n
      \  o  WS - Whitespace, including the SPACE character\n   o  ON - Other Neutrals,
      including @, &, parentheses, MIDDLE DOT\n   o  LRE, LRO, RLE, RLO, PDF - these
      are \"directional control\n      characters\" and are not used in IDNA labels.\n
      \  In this memo, we use \"network order\" to describe the sequence of\n   characters
      as transmitted on the wire or stored in a file; the terms\n   \"first\", \"next\",
      \"previous\", \"beginning\", \"end\", \"before\", and\n   \"after\" are used
      to refer to the relationship of characters and\n   labels in network order.\n
      \  We use \"display order\" to talk about the sequence of characters as\n   imaged
      on a display medium; the terms \"left\" and \"right\" are used to\n   refer
      to the relationship of characters and labels in display order.\n   Most of the
      time, the examples use the abbreviations for the Unicode\n   Bidi classes to
      denote the directionality of the characters; the\n   example string CS L consists
      of one character of class CS and one\n   character of class L.  In some examples,
      the convention that\n   uppercase characters are of class R or AL, and lowercase
      characters\n   are of class L is used -- thus, the example string ABC.abc would\n
      \  consist of three right-to-left characters and three left-to-right\n   characters.\n
      \  The directionality of such examples is determined by context -- for\n   instance,
      in the sentence \"ABC.abc is displayed as CBA.abc\", the\n   first example string
      is in network order, the second example string\n   is in display order.\n   The
      term \"paragraph\" is used in the sense of the Unicode Bidi\n   specification
      [Unicode-UAX9].  It means \"a block of text that has an\n   overall direction,
      either left to right or right to left\",\n   approximately; see the \"Unicode
      Bidirectional Algorithm\"\n   [Unicode-UAX9] for details.\n   \"RTL\" and \"LTR\"
      are abbreviations for \"right to left\" and \"left to\n   right\", respectively.\n
      \  An RTL label is a label that contains at least one character of type\n   R,
      AL, or AN.\n   An LTR label is any label that is not an RTL label.\n   A \"Bidi
      domain name\" is a domain name that contains at least one RTL\n   label.  (Note:
      This definition includes domain names containing only\n   dots and right-to-left
      characters.  Providing a separate category of\n   \"RTL domain names\" would
      not make this specification simpler, so it\n   has not been done.)\n"
    title: 1.4.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  The Bidi Rule\n   The following rule, consisting of six conditions, applies
    to labels\n   in Bidi domain names.  The requirements that this rule satisfies
    are\n   described in Section 3.  All of the conditions must be satisfied for\n
    \  the rule to be satisfied.\n   1.  The first character must be a character with
    Bidi property L, R,\n       or AL.  If it has the R or AL property, it is an RTL
    label; if it\n       has the L property, it is an LTR label.\n   2.  In an RTL
    label, only characters with the Bidi properties R, AL,\n       AN, EN, ES, CS,
    ET, ON, BN, or NSM are allowed.\n   3.  In an RTL label, the end of the label
    must be a character with\n       Bidi property R, AL, EN, or AN, followed by zero
    or more\n       characters with Bidi property NSM.\n   4.  In an RTL label, if
    an EN is present, no AN may be present, and\n       vice versa.\n   5.  In an
    LTR label, only characters with the Bidi properties L, EN,\n       ES, CS, ET,
    ON, BN, or NSM are allowed.\n   6.  In an LTR label, the end of the label must
    be a character with\n       Bidi property L or EN, followed by zero or more characters
    with\n       Bidi property NSM.\n   The following guarantees can be made based
    on the above:\n   o  In a domain name consisting of only labels that satisfy the
    rule,\n      the requirements of Section 3 are satisfied.  Note that even LTR\n
    \     labels and pure ASCII labels have to be tested.\n   o  In a domain name
    consisting of only LDH labels (as defined in the\n      Definitions document [RFC5890])
    and labels that satisfy the rule,\n      the requirements of Section 3 are satisfied
    as long as a label\n      that starts with an ASCII digit does not come after
    a\n      right-to-left label.\n   No guarantee is given for other combinations.\n"
  title: 2.  The Bidi Rule
- contents:
  - "3.  The Requirement Set for the Bidi Rule\n   This document, unlike RFC 3454
    [RFC3454], provides an explicit\n   justification for the Bidi rule, and states
    a set of requirements for\n   which it is possible to test whether or not the
    modified rule\n   fulfills the requirement.\n   All the text in this document
    assumes that text containing the labels\n   under consideration will be displayed
    using the Unicode bidirectional\n   algorithm [Unicode-UAX9].\n   The requirements
    proposed are these:\n   o  Label Uniqueness: No two labels, when presented in
    display order\n      in the same paragraph, should have the same sequence of characters\n
    \     without also having the same sequence of characters in network\n      order,
    both when the paragraph has LTR direction and when the\n      paragraph has RTL
    direction.  (This is the criterion that is\n      explicit in RFC 3454).  (Note
    that a label displayed in an RTL\n      paragraph may display the same as a different
    label displayed in\n      an LTR paragraph and still satisfy this criterion.)\n
    \  o  Character Grouping: When displaying a string of labels, using the\n      Unicode
    Bidi algorithm to reorder the characters for display, the\n      characters of
    each label should remain grouped between the\n      characters delimiting the
    labels, both when the string is embedded\n      in a paragraph with LTR direction
    and when it is embedded in a\n      paragraph with RTL direction.\n   Several
    stronger statements were considered and rejected, because\n   they seem to be
    impossible to fulfill within the constraints of the\n   Unicode bidirectional
    algorithm.  These include:\n   o  The appearance of a label should be unaffected
    by its embedding\n      context.  This proved impossible even for ASCII labels;
    the label\n      \"123-A\" will have a different display order in an RTL context
    than\n      in an LTR context.  (This particular example is, however,\n      disallowed
    anyway.)\n   o  The sequence of labels should be consistent with network order.\n
    \     This proved impossible -- a domain name consisting of the labels\n      (in
    network order) L1.R2.R3.L4 will be displayed as L1.R3.R2.L4 in\n      an LTR context.
    \ (In an RTL context, it will be displayed as\n      L4.R3.R2.L1).\n   o  No two
    domain names should be displayed the same, even under\n      differing directionality.
    \ This was shown to be unsound, since the\n      domain name (in network order)
    ABC.abc will have display order\n      CBA.abc in an LTR context and abc.CBA in
    an RTL context, while the\n      domain name (network) abc.ABC will have display
    order abc.CBA in\n      an LTR context and CBA.abc in an RTL context.\n   One
    possible requirement was thought to be problematic, but turned\n   out to be satisfied
    by a string that obeys the proposed rules:\n   o  The Character Grouping requirement
    should be satisfied when\n      directional controls (LRE, RLE, RLO, LRO, PDF)
    are used in the\n      same paragraph (outside of the labels).  Because these
    controls\n      affect presentation order in non-obvious ways, by affecting the\n
    \     \"sor\" and \"eor\" properties of the Unicode Bidi algorithm, the\n      conditions
    above require extra testing in order to figure out\n      whether or not they
    influence the display of the domain name.\n      Testing found that for the strings
    allowed under the rule\n      presented in this document, directional controls
    do not influence\n      the display of the domain name.\n   This is still not
    stated as a requirement, since it did not seem as\n   important as the stated
    requirements, but it is useful to know that\n   Bidi domain names where the labels
    satisfy the rule have this\n   property.\n   In the following descriptions, first-level
    bullets are used to\n   indicate rules or normative statements; second-level bullets
    are\n   commentary.\n   The Character Grouping requirement can be more formally
    stated as:\n   o  Let \"Delimiterchars\" be a set of characters with the Unicode
    Bidi\n      properties CS, WS, ON.  (These are commonly used to delimit labels\n
    \     -- both the FULL STOP and the space are included.  They are not\n      allowed
    in domain labels.)\n      *  ET, though it commonly occurs next to domain names
    in practice,\n         is problematic: the context R CS L EN ET (for instance
    A.a1%)\n         makes the label L EN not satisfy the character grouping\n         requirement.\n
    \     *  ES commonly occurs in labels as HYPHEN-MINUS, but could also be\n         used
    as a delimiter (for instance, the plus sign).  It is left\n         out here.\n
    \  o  Let \"unproblematic label\" be a label that either satisfies the\n      requirements
    or does not contain any character with the Bidi\n      properties R, AL, or AN
    and does not begin with a character with\n      the Bidi property EN.  (Informally,
    \"it does not start with a\n      number\".)\n   A label X satisfies the Character
    Grouping requirement when, for any\n   Delimiter Character D1 and D2, and for
    any label S1 and S2 that is an\n   unproblematic label or an empty string, the
    following holds true:\n   If the string formed by concatenating S1, D1, X, D2,
    and S2 is\n   reordered according to the Bidi algorithm, then all the characters
    of\n   X in the reordered string are between D1 and D2, and no other\n   characters
    are between D1 and D2, both if the overall paragraph\n   direction is LTR and
    if the overall paragraph direction is RTL.\n   Note that the definition is self-referential,
    since S1 and S2 are\n   constrained to be \"legal\" by this definition.  This
    makes testing\n   changes to proposed rules a little complex, but does not create\n
    \  problems for testing whether or not a given proposed rule satisfies\n   the
    criterion.\n   The \"zero-length\" case represents the case where a domain name
    is\n   next to something that isn't a domain name, separated by a delimiter\n
    \  character.\n   Note about the position of BN: The Unicode bidirectional algorithm\n
    \  specifies that a BN has an effect on the adjoining characters in\n   network
    order, not in display order, and are therefore treated as if\n   removed during
    Bidi processing ([Unicode-UAX9], Section 3.3.2, rule\n   X9 and Section 5.3).
    \ Therefore, the question of \"what position does\n   a BN have after reordering\"
    is not meaningful.  It has been ignored\n   while developing the rules here.\n
    \  The Label Uniqueness requirement can be formally stated as:\n   If two non-identical
    labels X and Y, embedded as for the test above,\n   displayed in paragraphs with
    the same directionality, are reordered\n   by the Bidi algorithm into the same
    sequence of code points, the\n   labels X and Y cannot both be legal.\n"
  title: 3.  The Requirement Set for the Bidi Rule
- contents:
  - '4.  Examples of Issues Found with RFC 3454

    '
  - contents:
    - "4.1.  Dhivehi\n   Dhivehi, the official language of the Maldives, is written
      with the\n   Thaana script.  This script displays some of the characteristics
      of\n   the Arabic script, including its directional properties, and the\n   indication
      of vowels by the diacritical marking of consonantal base\n   characters.  This
      marking is obligatory, and both two consecutive\n   vowels and syllable-final
      consonants are indicated with unvoiced\n   combining marks.  Every Dhivehi word
      therefore ends with a combining\n   mark.\n   The word for \"computer\", which
      is romanized as \"konpeetaru\", is\n   written with the following sequence of
      Unicode code points:\n      U+0786 THAANA LETTER KAAFU (AL)\n      U+07AE THAANA
      OBOFILI (NSM)\n      U+0782 THAANA LETTER NOONU (AL)\n      U+07B0 THAANA SUKUN
      (NSM)\n      U+0795 THAANA LETTER PAVIYANI (AL)\n      U+07A9 THAANA LETTER
      EEBEEFILI (AL)\n      U+0793 THAANA LETTER TAVIYANI (AL)\n      U+07A6 THAANA
      ABAFILI (NSM)\n      U+0783 THAANA LETTER RAA (AL)\n      U+07AA THAANA UBUFILI
      (NSM)\n   The directionality class of U+07AA in the Unicode database\n   [Unicode52]
      is NSM (Nonspacing Mark), which is not R or AL; a\n   conformant implementation
      of the IDNA2003 algorithm will say that\n   \"this is not in RandALCat\" and
      refuse to encode the string.\n"
    title: 4.1.  Dhivehi
  - contents:
    - "4.2.  Yiddish\n   Yiddish is one of several languages written with the Hebrew
      script\n   (others include Hebrew and Ladino).  This is basically a consonantal\n
      \  alphabet (also termed an \"abjad\"), but Yiddish is written using an\n   extended
      form that is fully vocalic.  The vowels are indicated in\n   several ways, one
      of which is by repurposing letters that are\n   consonants in Hebrew.  Other
      letters are used both as vowels and\n   consonants, with combining marks, called
      \"points\", used to\n   differentiate between them.  Finally, some base characters
      can\n   indicate several different vowels, which are also disambiguated by\n
      \  combining marks.  Pointed characters can appear in word-final\n   position
      and may therefore also be needed at the end of labels.  This\n   is not an invariable
      attribute of a Yiddish string and there is thus\n   greater latitude here than
      there is with Dhivehi.\n   The organization now known as the \"YIVO Institute
      for Jewish\n   Research\" developed orthographic rules for modern Standard Yiddish\n
      \  during the 1930s on the basis of work conducted in several venues\n   since
      earlier in that century.  These are given in, \"The Standardized\n   Yiddish
      Orthography: Rules of Yiddish Spelling\" [SYO], and are taken\n   as normatively
      descriptive of modern Standard Yiddish in any context\n   where that notion
      is deemed relevant.  They have been applied\n   exclusively in all formal Yiddish
      dictionaries published since their\n   establishment, and are similarly dominant
      in academic and\n   bibliographic regards.\n   It therefore appears appropriate
      for this repertoire also to be\n   supported fully by IDNA.  This presents no
      difficulty with characters\n   in initial and medial positions, but pointed
      characters are regularly\n   used in final position as well.  All of the characters
      in the SYO\n   repertoire appear in both marked and unmarked form with one\n
      \  exception: the HEBREW LETTER PE (U+05E4).  The SYO only permits this\n   with
      a HEBREW POINT DAGESH (U+05BC), providing the Yiddish equivalent\n   to the
      Latin letter \"p\", or a HEBREW POINT RAFE (U+05BF), equivalent\n   to the Latin
      letter \"f\".  There is, however, a separate unpointed\n   allograph, the HEBREW
      LETTER FINAL PE (U+05E3), for the latter\n   character when it appears in final
      position.  The constraint on the\n   use of the SYO repertoire resulting from
      the proscription of\n   combining marks at the end of RTL strings thus reduces
      to nothing\n   more, or less, than the equivalent of saying that a string of
      Latin\n   characters cannot end with the letter \"p\".  It must also be noted\n
      \  that the HEBREW LETTER PE with the HEBREW POINT DAGESH is\n   characteristic
      of almost all traditional Yiddish orthographies that\n   predate (or remain
      in use in parallel to) the SYO, being the first\n   pointed character to appear
      in any of them.\n   A more general instantiation of the basic problem can be
      seen in the\n   representation of the YIVO acronym.  This acronym is written
      with the\n   Hebrew letters YOD YOD HIRIQ VAV VAV ALEF QAMATS, where HIRIQ and\n
      \  QAMATS are combining points.  The Unicode code points are:\n      U+05D9
      HEBREW LETTER YOD (R)\n      U+05B4 HEBREW POINT HIRIQ (NSM)\n      U+05D5 HEBREW
      LETTER VAV (R)\n      U+05D0 HEBREW LETTER ALEF (R)\n      U+05B8 HEBREW POINT
      QAMATS (NSM)\n   The directionality class of U+05B8 HEBREW POINT QAMATS in the
      Unicode\n   database is NSM, which again causes the IDNA2003 algorithm to reject\n
      \  the string.\n   It may also be noted that all of the combined characters
      mentioned\n   above exist in precomposed form at separate positions in the Unicode\n
      \  chart.  However, by invoking Stringprep, the IDNA2003 algorithm also\n   rejects
      those code points, for reasons not discussed here.\n"
    title: 4.2.  Yiddish
  - contents:
    - "4.3.  Strings with Numbers\n   By requiring that the first or last character
      of a string be a member\n   of category R or AL, the Stringprep specification
      [RFC3454]\n   prohibited a string containing right-to-left characters from ending\n
      \  with a number.\n   Consider the strings ALEF 5 (HEBREW LETTER ALEF + DIGIT
      FIVE) and 5\n   ALEF.  Displayed in an LTR context, the first one will be displayed\n
      \  from left to right as 5 ALEF (with the 5 being considered right to\n   left
      because of the leading ALEF), while 5 ALEF will be displayed in\n   exactly
      the same order (5 taking the direction from context).\n   Clearly, only one
      of those should be permitted as a registered label,\n   but barring them both
      seems unnecessary.\n"
    title: 4.3.  Strings with Numbers
  title: 4.  Examples of Issues Found with RFC 3454
- contents:
  - "5.  Troublesome Situations and Guidelines\n   There are situations in which labels
    that satisfy the rule above will\n   be displayed in a surprising fashion.  The
    most important of these is\n   the case where a label ending in a character with
    Bidi property AL,\n   AN, or R occurs before a label beginning with a character
    of Bidi\n   property EN.  In that case, the number will appear to move into the\n
    \  label containing the right-to-left character, violating the Character\n   Grouping
    requirement.\n   If the label that occurs after the right-to-left label itself\n
    \  satisfies the Bidi criterion, the requirements will be satisfied in\n   all
    cases (this is the reason why the criterion talks about strings\n   containing
    L in some cases).  However, the IDNABIS WG concluded that\n   this could not be
    required for several reasons:\n   o  There is a large current deployment of ASCII
    domain names starting\n      with digits.  These cannot possibly be invalidated.\n
    \  o  Domain names are often constructed piecemeal, for instance, by\n      combining
    a string with the content of a search list.  This may\n      occur after IDNA
    processing, and thus in part of the code that is\n      not IDNA-aware, making
    detection of the undesirable combination\n      impossible.\n   o  Even if a label
    is registered under a \"safe\" label, there may be a\n      DNAME [RFC2672] with
    an \"unsafe\" label that points to the \"safe\"\n      label, thus creating seemingly
    valid names that would not satisfy\n      the criterion.\n   o  Wildcards create
    the odd situation where a label is \"valid\" (can\n      be looked up successfully)
    without the zone owner knowing that\n      this label exists.  So an owner of
    a zone whose name starts with a\n      digit and contains a wildcard has no way
    of controlling whether or\n      not names with RTL labels in them are looked
    up in his zone.\n   Rather than trying to suggest rules that disallow all such\n
    \  undesirable situations, this document merely warns about the\n   possibility,
    and leaves it to application developers to take whatever\n   measures they deem
    appropriate to avoid problematic situations.\n"
  title: 5.  Troublesome Situations and Guidelines
- contents:
  - "6.  Other Issues in Need of Resolution\n   This document concerns itself only
    with the rules that are needed\n   when dealing with domain names with characters
    that have differing\n   Bidi properties, and considers characters only in terms
    of their Bidi\n   properties.  All other issues with scripts that are written
    from\n   right to left must be considered in other contexts.\n   One such issue
    is the need to keep numbers separate.  Several scripts\n   are used with multiple
    sets of numbers -- most commonly they use\n   Latin numbers and a script-specific
    set of numbers, but in the case\n   of Arabic, there are two sets of \"Arabic-Indic\"
    digits involved.\n   The algorithm in this document disallows occurrences of AN-class\n
    \  characters (\"Arabic-Indic digits\", U+0660 to U+0669) together with\n   EN-class
    characters (which includes \"European\" digits, U+0030 to\n   U+0039 and \"extended
    Arabic-Indic digits\", U+06F0 to U+06F9), but\n   does not help in preventing
    the mixing of, for instance, Bengali\n   digits (U+09E6 to U+09EF) and Gujarati
    digits (U+0AE6 to U+0AEF),\n   both of which have Bidi class L.  A registry or
    script community that\n   wishes to create rules restricting the mixing of digits
    in a label\n   will be able to specify these restrictions at the registry level.\n
    \  Some rules are also specified at the protocol level.\n   Another set of issues
    concerns the proper display of IDNs with a\n   mixture of LTR and RTL labels,
    or only RTL labels.\n   It is unrealistic to expect that applications will display
    domain\n   names using embedded formatting codes between their labels (for one\n
    \  thing, no reliable algorithms for identifying domain names in running\n   text
    exist); thus, the display order will be determined by the Bidi\n   algorithm.
    \ Thus, a sequence (in network order) of R1.R2.ltr will be\n   displayed in the
    order 2R.1R.ltr in an LTR context, which might\n   surprise someone expecting
    to see labels displayed in hierarchical\n   order.  People used to working with
    text that mixes LTR and RTL\n   strings might not be so surprised by this.  Again,
    this memo does not\n   attempt to suggest a solution to this problem.\n"
  title: 6.  Other Issues in Need of Resolution
- contents:
  - '7.  Compatibility Considerations

    '
  - contents:
    - "7.1.  Backwards Compatibility Considerations\n   As with any change to an existing
      standard, it is important to\n   consider what happens with existing implementations
      when the change\n   is introduced.  Some troublesome cases include:\n   o  An
      old program used to input the newly allowed label.  If the old\n      program
      checks the input against RFC 3454, some labels will not be\n      allowed, and
      domain names containing those labels will remain\n      inaccessible.\n   o
      \ An old program is asked to display the newly allowed label, and\n      checks
      it against RFC 3454 before displaying.  The program will\n      perform some
      kind of fallback, most likely displaying the label in\n      A-label form.\n
      \  o  An old program tries to display the newly allowed label.  If the\n      old
      program has code for displaying the last character of a label\n      that is
      different from the code used to display the characters in\n      the middle
      of the label, the display may be inconsistent and cause\n      confusion.\n
      \  One particular example of the last case is if a program chooses to\n   examine
      the last character (in network order) of a string in order to\n   determine
      its directionality, rather than its first.  If it finds an\n   NSM character
      and tries to display the string as if it was a\n   left-to-right string, the
      resulting display may be interesting, but\n   not useful.\n   The editors believe
      that these cases will have a less harmful impact\n   in practice than continuing
      to deny the use of words from the\n   languages for which these strings are
      necessary as IDN labels.\n   This specification does not forbid using leading
      European digits in\n   ASCII-only labels, since this would conflict with a large
      installed\n   base of such labels, and would increase the scope of the\n   specification
      from RTL labels to all labels.  The harm resulting from\n   this limitation
      of scope is described in Section 5.  Registries and\n   private zone managers
      can check for this particular condition before\n   they allow registration of
      any RTL label.  Generally, it is best to\n   disallow registration of any right-to-left
      strings in a zone where\n   the label at the level above begins with a digit.\n"
    title: 7.1.  Backwards Compatibility Considerations
  - contents:
    - "7.2.  Forward Compatibility Considerations\n   This text is intentionally specified
      strictly in terms of the Unicode\n   Bidi properties.  The determination that
      the condition is sufficient\n   to fulfill the criteria depends on the Unicode
      Bidi algorithm; it is\n   unlikely that drastic changes will be made to this
      algorithm.\n   However, the determination of validity for any string depends
      on the\n   Unicode Bidi property values, which are not declared immutable by
      the\n   Unicode Consortium.  Furthermore, the behavior of the algorithm for\n
      \  any given character is likely to be linguistically and culturally\n   sensitive,
      so while it should occur rarely, it is possible that later\n   versions of the
      Unicode Standard may change the Bidi properties\n   assigned to certain Unicode
      characters.\n   This memo does not propose a solution for this problem.\n"
    title: 7.2.  Forward Compatibility Considerations
  title: 7.  Compatibility Considerations
- contents:
  - "8.  Security Considerations\n   The display behavior of mixed-direction text
    can be extremely\n   surprising to users who are not used to it; for instance,
    cut and\n   paste of a piece of text can cause the text to display differently
    at\n   the destination, if the destination is in another directionality\n   context,
    and adding a character in one place of a text can cause\n   characters some distance
    from the point of insertion to change their\n   display position.  This is, however,
    not a phenomenon unique to the\n   display of domain names.\n   The new IDNA protocol,
    and particularly these new Bidi rules, will\n   allow some strings to be used
    in IDNA contexts that are not allowed\n   today.  It is possible that differences
    in the interpretation of\n   labels between implementations of IDNA2003 and IDNA2008
    could pose a\n   security risk, but it is difficult to envision any specific\n
    \  instantiation of this.\n   Any rational attempt to compute, for instance, a
    hash over an\n   identifier processed by IDNA would use network order for its\n
    \  computation, and thus be unaffected by the new rules proposed here.\n   While
    it is not believed to pose a problem, if display routines had\n   been written
    with specific knowledge of the RFC 3454 IDNA\n   prohibitions, it is possible
    that the potential problems noted under\n   \"Backwards Compatibility Considerations\"
    could cause new kinds of\n   confusion.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgements\n   While the listed editors held the pen, this document
    represents the\n   joint work and conclusions of an ad hoc design team.  In addition
    to\n   the editors, this consisted of, in alphabetic order, Tina Dam, Patrik\n
    \  Faltstrom, and John Klensin.  Many further specific contributions and\n   helpful
    comments were received from the people listed below, and\n   others who have contributed
    to the development and use of the IDNA\n   protocols.\n   The particular formulation
    of the Bidi rule in Section 2 was\n   suggested by Matitiahu Allouche.\n   The
    team wishes, in particular, to thank Roozbeh Pournader for\n   calling its attention
    to the issue with the Thaana script, Paul\n   Hoffman for pointing out the need
    to be explicit about backwards\n   compatibility considerations, Ken Whistler
    for suggesting the basis\n   of the formalized \"Character Grouping\" requirement,
    Mark Davis for\n   commentary, Erik van der Poel for careful review, comments,
    and\n   verification of the rulesets, Marcos Sanz, Andrew Sullivan, and Pete\n
    \  Resnick for reviews, and Vint Cerf for chairing the working group and\n   contributing
    massively to getting the documents finished.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC5890]      Klensin, J., \"Internationalized
      Domain Names for\n                  Applications (IDNA): Definitions and Document\n
      \                 Framework\", RFC 5890, August 2010.\n   [Unicode-UAX9] The
      Unicode Consortium, \"Unicode Standard Annex #9:\n                  Unicode
      Bidirectional Algorithm\", September 2009,\n                  <http://www.unicode.org/reports/tr9/>.\n
      \  [Unicode52]    The Unicode Consortium.  The Unicode Standard, Version\n                  5.2.0,
      defined by: \"The Unicode Standard, Version\n                  5.2.0\", (Mountain
      View, CA: The Unicode Consortium,\n                  2009. ISBN 978-1-936213-00-9).\n
      \                 <http://www.unicode.org/versions/Unicode5.2.0/>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC2672]      Crawford, M., \"Non-Terminal
      DNS Name Redirection\",\n                  RFC 2672, August 1999.\n   [RFC3454]
      \     Hoffman, P. and M. Blanchet, \"Preparation of\n                  Internationalized
      Strings (\"stringprep\")\", RFC 3454,\n                  December 2002.\n   [RFC5891]
      \     Klensin, J., \"Internationalized Domain Names in\n                  Applications
      (IDNA): Protocol\", RFC 5891, August 2010.\n   [SYO]          \"The Standardized
      Yiddish Orthography: Rules of\n                  Yiddish Spelling, 6th ed.,
      New York, ISBN\n                  0-914512-25-0\", 1999.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Harald Tveit Alvestrand (editor)\n   Google\n   Beddingen
    10\n   Trondheim,   7014\n   Norway\n   EMail: harald@alvestrand.no\n   Cary Karp\n
    \  Swedish Museum of Natural History\n   Frescativ. 40\n   Stockholm,   10405\n
    \  Sweden\n   Phone: +46 8 5195 4055\n   Fax:\n   EMail: ck@nic.museum\n"
  title: Authors' Addresses
