- title: __initial_text__
  contents:
  - '                  ASCII Escaping of Unicode Characters

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   There are a number of circumstances in which an escape mechanism\
    \ is\n   needed in conjunction with a protocol to encode characters that\n   cannot\
    \ be represented or transmitted directly.  With ASCII coding,\n   the traditional\
    \ escape has been either the decimal or hexadecimal\n   numeric value of the character,\
    \ written in a variety of different\n   ways.  The move to Unicode, where characters\
    \ occupy two or more\n   octets and may be coded in several different forms, has\
    \ further\n   complicated the question of escapes.  This document discusses some\n\
    \   options now in use and discusses considerations for selecting one for\n  \
    \ use in new IETF protocols, and protocols that are now being\n   internationalized.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Context and Background . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Discussion List  . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   2.  Encodings that Represent Unicode Code Points: Code\n      \
    \ Position versus UTF-8 or UTF-16 Octets . . . . . . . . . . . .  4\n   3.  Referring\
    \ to Unicode Characters  . . . . . . . . . . . . . . .  5\n   4.  Syntax for Code\
    \ Point Escapes  . . . . . . . . . . . . . . . .  6\n   5.  Recommended Presentation\
    \ Variants for Unicode Code Point\n       Escapes  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  7\n     5.1.  Backslash-U with Delimiters  . . .\
    \ . . . . . . . . . . . .  7\n     5.2.  XML and HTML . . . . . . . . . . . .\
    \ . . . . . . . . . . .  7\n   6.  Forms that Are Normally Not Recommended  .\
    \ . . . . . . . . . .  8\n     6.1.  The C Programming Language: Backslash-U \
    \ . . . . . . . . .  8\n     6.2.  Perl: A Hexadecimal String . . . . . . . .\
    \ . . . . . . . .  8\n     6.3.  Java: Escaped UTF-16 . . . . . . . . . . . .\
    \ . . . . . . .  9\n   7.  Security Considerations  . . . . . . . . . . . . .\
    \ . . . . . .  9\n   8.  Acknowledgments  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  9\n   9.  References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 10\n     9.1.  Normative References . . . . . . . . . . . . . . . .\
    \ . . . 10\n     9.2.  Informative References . . . . . . . . . . . . . . . .\
    \ . . 10\n   Appendix A.  Formal Syntax for Forms Not Recommended . . . . . .\
    \ . 12\n     A.1.  The C Programming Language Form  . . . . . . . . . . . . .\
    \ 12\n     A.2.  Perl Form  . . . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \     A.3.  Java Form  . . . . . . . . . . . . . . . . . . . . . . . . 12\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Context and Background
  contents:
  - "1.1.  Context and Background\n   There are a number of circumstances in which\
    \ an escape mechanism is\n   needed in conjunction with a protocol to encode characters\
    \ that\n   cannot be represented or transmitted directly.  With ASCII [ASCII]\n\
    \   coding, the traditional escape has been either the decimal or\n   hexadecimal\
    \ numeric value of the character, written in a variety of\n   different ways.\
    \  For example, in different contexts, we have seen\n   %dNN or %NN for the decimal\
    \ form, %NN, %xNN, X'nn', and %X'NN' for\n   the hexadecimal form. \"%NN\" has\
    \ become popular in recent years to\n   represent a hexadecimal value without\
    \ further qualification, perhaps\n   as a consequence of its use in URLs and their\
    \ prevalence.  There are\n   even some applications around in which octal forms\
    \ are used and,\n   while they do not generalize well, the MIME Quoted-Printable\
    \ and\n   Encoded-word forms can be thought of as yet another set of escapes.\n\
    \   So, even for the fairly simple cases of ASCII and standard built by\n   extending\
    \ ASCII, such as the ISO 8859 family, we have been living\n   with several different\
    \ escaping forms, each the result of some\n   history.\n   When one moves to Unicode\
    \ [Unicode] [ISO10646], where characters\n   occupy two or more octets and may\
    \ be coded in several different\n   forms, the question of escapes becomes even\
    \ more complicated.\n   Unicode represents characters as code points: numeric\
    \ values from 0\n   to hex 10FFFF.  When referencing code points in flowing text,\
    \ they\n   are represented using the so-called \"U+\" notation, as values from\n\
    \   U+0000 to U+10FFFF.  When serialized into octets, these code points\n   can\
    \ be represented in different forms:\n   o  in UTF-8 with one to four octets [RFC3629]\n\
    \   o  in UTF-16 with two or four octets (or one or two seizets -- 16-bit\n  \
    \    units)\n   o  in UTF-32 with exactly four octets (or one 32-bit unit)\n \
    \  When escaping characters, we have seen fairly extensive use of\n   hexadecimal\
    \ representations of both the serialized forms and\n   variations on the U+ notation,\
    \ known as code point escapes.\n   In accordance with existing best-practices\
    \ recommendations [RFC2277],\n   new protocols that are required to carry textual\
    \ content for human\n   use SHOULD be designed in such a way that the full repertoire\
    \ of\n   Unicode characters may be represented in that text.\n   This document\
    \ proposes that existing protocols being\n   internationalized, and those that\
    \ need an escape mechanism, SHOULD\n   use some contextually appropriate variation\
    \ on references to code\n   points as described in Section 2 unless other considerations\
    \ outweigh\n   those described here.\n   This recommendation is not applicable\
    \ to protocols that already\n   accept native UTF-8 or some other encoding of\
    \ Unicode.  In general,\n   when protocols are internationalized, it is preferable\
    \ to accept\n   those forms rather than using escapes.  This recommendation applies\n\
    \   to cases, including transition arrangements, in which that is not\n   practical.\n\
    \   In addition to the protocol contexts addressed in this specification,\n  \
    \ escapes to represent Unicode characters also appear in presentations\n   to\
    \ users, i.e., in user interfaces (UI).  The formats specified in,\n   and the\
    \ reasoning of, this document may be applicable in UI contexts\n   as well, but\
    \ this is not a proposal to standardize UI or presentation\n   forms.\n   This\
    \ document does not make general recommendations for processing\n   Unicode strings\
    \ or for their contents.  It assumes that the strings\n   that one might want\
    \ to escape are valid and reasonable and that the\n   definition of \"valid and\
    \ reasonable\" is the province of other\n   documents.  Recommendations about\
    \ general treatment of Unicode\n   strings may be found in many places, including\
    \ the Unicode Standard\n   itself and the W3C Character Model [W3C-CharMod], as\
    \ well as specific\n   rules in individual protocols.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   Additional Unicode-specific terminology appears in [UnicodeGlossary],\n\
    \   but is not necessary for understanding this specification.\n"
- title: 1.3.  Discussion List
  contents:
  - "1.3.  Discussion List\n   Discussion of this document should be addressed to\
    \ the\n   discuss@apps.ietf.org mailing list.\n"
- title: '2.  Encodings that Represent Unicode Code Points: Code Position versus'
  contents:
  - "2.  Encodings that Represent Unicode Code Points: Code Position versus\n    UTF-8\
    \ or UTF-16 Octets\n   There are two major families of ways to escape Unicode\
    \ characters.\n   One uses the code point in some representation (see the next\n\
    \   section), the other encodes the octets of the UTF-8 encoding or some\n   other\
    \ encoding in some representation.  Some other options are\n   possible, but they\
    \ have been rare in practice.  This specification\n   recommends that, in the\
    \ absence of compelling reasons to do\n   otherwise, the Unicode code points SHOULD\
    \ be used rather than a\n   representation of UTF-8 (or UTF-16) octets.  There\
    \ are several\n   reasons for this, including:\n   o  One reason for the success\
    \ of many IETF protocols is that they use\n      human-interpretable text forms\
    \ to communicate, rather than\n      encodings that generally require computer\
    \ programs (or hand\n      simulation of algorithms) to decode.  This suggests\
    \ that the\n      presentation form should reference the Unicode tables for\n\
    \      characters and to do so as simply as possible.\n   o  Because of the nature\
    \ of UTF-8, for a human to interpret a decimal\n      or hexadecimal numeral representation\
    \ of UTF-8 octets requires one\n      or more decoding steps to determine a Unicode\
    \ code point that can\n      used to look up the character in a table.  That may\
    \ be appropriate\n      in some cases where the goal is really to represent the\
    \ UTF-8 form\n      but, in general, it just obscures desired information and\
    \ makes\n      errors more likely and debugging harder.\n   o  Except for characters\
    \ in the ASCII subset of Unicode (U+0000\n      through U+007F), the code point\
    \ form is generally more compact\n      than forms based on coding UTF-8 octets,\
    \ sometimes much more\n      compact.\n   The same considerations that apply to\
    \ representation of the octets of\n   UTF-8 encoding also apply to more compact\
    \ ACE encodings such as the\n   \"bootstring\" encoding [RFC3492] with or without\
    \ its \"Punycode\"\n   profile.\n   Similar considerations apply to UTF-16 encoding,\
    \ such as the \\uNNNN\n   form used in Java (See Section 6.3).  While those forms\
    \ are\n   equivalent to code point references for the Basic Multilingual Plane\n\
    \   (BMP, Plane 0), a two-stage decoding process is needed to handle\n   surrogates\
    \ to access higher planes.\n"
- title: 3.  Referring to Unicode Characters
  contents:
  - "3.  Referring to Unicode Characters\n   Regardless of what decisions are made\
    \ about escapes for Unicode\n   characters in protocol or similar contexts, text\
    \ referring to a\n   Unicode code point SHOULD use the U+NNNN[N[N]] syntax, as\
    \ specified\n   in the Unicode Standard, where the NNNN... string consists of\n\
    \   hexadecimal numbers.  Text actually containing a Unicode character\n   SHOULD\
    \ use a syntax more suitable for automated processing.\n"
- title: 4.  Syntax for Code Point Escapes
  contents:
  - "4.  Syntax for Code Point Escapes\n   There are many options for code point escapes,\
    \ some of which are\n   summarized below.  All are equivalent in content and semantics\
    \ -- the\n   differences lie in syntax.  The best choice of syntax for a\n   particular\
    \ protocol or other application depends on that application:\n   one form may\
    \ simply \"fit\" better in a given context than others.  It\n   is clear, however,\
    \ that hexadecimal values are preferable to other\n   alternatives: Systems based\
    \ on decimal or octal offsets SHOULD NOT be\n   used.\n   Since this specification\
    \ does not recommend one specific syntax,\n   protocol specifications that use\
    \ escapes MUST define the syntax they\n   are using, including any necessary escapes\
    \ to permit the escape\n   sequence to be used literally.\n   The application\
    \ designer selecting a format should consider at least\n   the following factors:\n\
    \   o  If similar or related protocols already use one form, it may be\n     \
    \ best to select that form for consistency and predictability.\n   o  A Unicode\
    \ code point can fall in the range from U+0000 to\n      U+10FFFF.  Different\
    \ escape systems may use four, five, six, or\n      eight hexadecimal digits.\
    \  To avoid clever syntax tricks and the\n      consequent risk of confusion and\
    \ errors, forms that use explicit\n      string delimiters are generally preferred\
    \ over other alternatives.\n      In many contexts, symmetric paired delimiters\
    \ are easier to\n      recognize and understand than visually unrelated ones.\n\
    \   o  Syntax forms starting in \"\\u\", without explicit delimiters, have\n \
    \     been used in several different escape systems, including the four\n    \
    \  or eight digit syntax of C [ISO-C] (see Section 6.1), the UTF-16\n      encoding\
    \ of Java [Java] (see Section 6.3), and some arrangements\n      that may follow\
    \ the \"\\u\" with four, five, or six digits.  The\n      possible confusion about\
    \ which option is actually being used may\n      argue against use of any of these\
    \ forms.\n   o  Forms that require decoding surrogate pairs share most of the\n\
    \      problems that appear with encoding of UTF-8 octets.  Internet\n      protocols\
    \ SHOULD NOT use surrogate pairs.\n"
- title: 5.  Recommended Presentation Variants for Unicode Code Point Escapes
  contents:
  - "5.  Recommended Presentation Variants for Unicode Code Point Escapes\n   There\
    \ are a number of different ways to represent a Unicode code\n   point position.\
    \  No one of them appears to be \"best\" for all\n   contexts.  In addition, when\
    \ an escape is needed for the escape\n   mechanism itself, the optimal one of\
    \ those might differ from one\n   context to another.\n   Some forms that are\
    \ in popular use and that might reasonably be\n   considered for use in a given\
    \ protocol are described below and\n   identified with a current-use context when\
    \ feasible.  The two in this\n   section are recommended for use in Internet Protocols.\
    \  Other popular\n   ones appear in Section 6 with some discussion of their disadvantages.\n"
- title: 5.1.  Backslash-U with Delimiters
  contents:
  - "5.1.  Backslash-U with Delimiters\n   One of the recommended forms is a variation\
    \ of the many forms that\n   start in \"\\u\" (See, e.g., Section 6.1, below>),\
    \ but uses explicit\n   delimiters for the reasons discussed elsewhere.\n   Specifically,\
    \ in ABNF [RFC5234],\n   EmbeddedUnicodeChar =  %x5C.75.27 4*6HEXDIG %x27\n  \
    \    ; starting with lowercase \"\\u\" and \"'\" and ending with \"'\".\n    \
    \  ; Note that the encodings are considered to be abstractions\n      ; for the\
    \ relevant characters, not designations of specific\n      ; octets.\n   HEXDIG\
    \ =  \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"\
    9\" /\n      \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n      ; effectively\
    \ identical with definition in RFC 5234.\n   Protocol designers of applications\
    \ using this form should specify a\n   way to escape the introducing backslash\
    \ (\"\\\"), if needed. \"\\\\\" is one\n   obvious possibility, but not the only\
    \ one.\n"
- title: 5.2.  XML and HTML
  contents:
  - "5.2.  XML and HTML\n   The other recommended form is the one used in XML.  It\
    \ uses the form\n   \"&#xNNNN;\".  Like the Perl form (Section 6.2), this form\
    \ has a clear\n   ending delimiter, reducing ambiguity.  HTML uses a similar form,\
    \ but\n   the semicolon may be omitted in some cases.  If that is done, the\n\
    \   advantages of the delimiter disappear so that the HTML form without\n   the\
    \ semicolon SHOULD NOT be used.  However, this format is often\n   considered\
    \ ugly and awkward outside of its native HTML, XML, and\n   similar contexts.\n\
    \   In ABNF:\n   EmbeddedUnicodeChar =   %x26.23.78 2*6HEXDIG %x3B\n      ; starts\
    \ with \"&#x\" and ends with \";\"\n   Note that a literal \"&\" can be expressed\
    \ by \"&#x26;\" when using this\n   style.\n"
- title: 6.  Forms that Are Normally Not Recommended
  contents:
  - '6.  Forms that Are Normally Not Recommended

    '
- title: '6.1.  The C Programming Language: Backslash-U'
  contents:
  - "6.1.  The C Programming Language: Backslash-U\n   The forms\n      \\UNNNNNNNN\
    \ (for any Unicode character) and\n      \\uNNNN (for Unicode characters in plane\
    \ 0)\n   are utilized in the C Programming Language [ISO-C] when an ASCII\n  \
    \ escape for embedded Unicode characters is needed.\n   There are disadvantages\
    \ of this form that may be significant.  First,\n   the use of a case variation\
    \ (between \"u\" for the four-digit form and\n   \"U\" for the eight-digit form)\
    \ may not seem natural in environments\n   where uppercase and lowercase characters\
    \ are generally considered\n   equivalent and might be confusing to people who\
    \ are not very familiar\n   with Latin-based alphabets (although those people\
    \ might have even\n   more trouble reading relevant English text and explanations).\n\
    \   Second, as discussed in Section 4, the very fact that there are\n   several\
    \ different conventions that start in \\u or \\U may become a\n   source of confusion\
    \ as people make incorrect assumptions about what\n   they are looking at.\n"
- title: '6.2.  Perl: A Hexadecimal String'
  contents:
  - "6.2.  Perl: A Hexadecimal String\n   Perl uses the form \\x{NNNN...}.  The advantage\
    \ of this form is that\n   there are explicit delimiters, resolving the issue\
    \ of having\n   variable-length strings or using the case-change mechanism of\
    \ the\n   proposed form to distinguish between Plane 0 and more general forms.\n\
    \   Some other programming languages would tend to favor X'NNNN...' forms\n  \
    \ for hexadecimal strings and perhaps U'NNNN...' for Unicode-specific\n   strings,\
    \ but those forms do not seem to be in use around the IETF.\n   Note that there\
    \ is a possible ambiguity in how two-character or low-\n   numbered sequences\
    \ in this notation are understood, i.e., that octets\n   in the range \\x(00)\
    \ through \\x(FF) may be construed as being in the\n   local character set, not\
    \ as Unicode code points.  Because of this\n   apparent ambiguity, and because\
    \ IETF documents do not contain\n   provision for pragmas (see [PERLUniIntro]\
    \ for more information about\n   the \"encoding\" pragma in Perl and other details),\
    \ the Perl forms\n   should be used with extreme caution, if at all.\n"
- title: '6.3.  Java: Escaped UTF-16'
  contents:
  - "6.3.  Java: Escaped UTF-16\n   Java [Java] uses the form \\uNNNN, but as a reference\
    \ to UTF-16\n   values, not to Unicode code points.  While it uses a syntax similar\n\
    \   to that described in Section 6.1, this relationship to UTF-16 makes\n   it,\
    \ in many respects, more similar to the encodings of UTF-8\n   discussed above\
    \ than to an escape that designates Unicode code\n   points.  Note that the UTF-16\
    \ form, and hence, the Java escape\n   notation, can represent characters outside\
    \ Plane 0 (i.e., above\n   U+FFFF) only by the use of surrogate pairs, raising\
    \ some of the same\n   issues as the use of UTF-8 octets discussed above.  For\
    \ characters in\n   Plane 0, the Java form is indistinguishable from the Plane\
    \ 0-only\n   form described in Section 6.1.  If only for that reason, it SHOULD\n\
    \   NOT be used as an escape except in those Java contexts in which it is\n  \
    \ natural.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document proposes a set of rules for encoding\
    \ Unicode characters\n   when other considerations do not apply.  Since all of\
    \ the recommended\n   encodings are unambiguous and normalization issues are not\
    \ involved,\n   it should not introduce any security issues that are not present\
    \ as a\n   result of simple use of non-ASCII characters, no matter how they are\n\
    \   encoded.  The mechanisms suggested should slightly lower the risks of\n  \
    \ confusing users with encoded characters by making the identity of the\n   characters\
    \ being used somewhat more obvious than some of the\n   alternatives.\n   An escape\
    \ mechanism such as the one specified in this document can\n   allow characters\
    \ to be represented in more than one way.  Where\n   software interprets the escaped\
    \ form, there is a risk that security\n   checks, and any necessary checks for,\
    \ e.g., minimal or normalized\n   forms, are done at the wrong point.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   This document was produced in response to a series of\
    \ discussions\n   within the IETF Applications Area and as part of work on email\n\
    \   internationalization and internationalized domain name updates.  It\n   is\
    \ a synthesis of a large number of discussions, the comments of the\n   participants\
    \ in which are gratefully acknowledged.  The help of Mark\n   Davis in constructing\
    \ a list of alternative presentations and\n   selecting among them was especially\
    \ important.\n   Tim Bray, Peter Constable, Stephane Bortzmeyer, Chris Newman,\
    \ Frank\n   Ellermann, Clive D.W. Feather, Philip Guenther, Bjoern Hoehrmann,\n\
    \   Simon Josefsson, Bill McQuillan, der Mouse, Phil Pennock, and Julian\n   Reschke\
    \ provided careful reading and some corrections and suggestions\n   on the various\
    \ working drafts that preceded this document.  Taken\n   together, their suggestions\
    \ motivated the significant revision of\n   this document and its recommendations\
    \ between version -00 and version\n   -01 and further improvements in the subsequent\
    \ versions.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ISO10646]         International Organization\
    \ for Standardization,\n                      \"Information Technology -- Universal\
    \ Multiple-\n                      Octet Coded Character Set (UCS)\", ISO/\n \
    \                     IEC 10646:2003, December 2003.\n   [RFC2119]          Bradner,\
    \ S., \"Key words for use in RFCs to\n                      Indicate Requirement\
    \ Levels\", BCP 14, RFC 2119,\n                      March 1997.\n   [RFC3629]\
    \          Yergeau, F., \"UTF-8, a transformation format of\n                \
    \      ISO 10646\", STD 63, RFC 3629, November 2003.\n   [RFC5234]          Crocker,\
    \ D. and P. Overell, \"Augmented BNF for\n                      Syntax Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n                      January 2008.\n   [Unicode]\
    \          The Unicode Consortium, \"The Unicode Standard,\n                 \
    \     Version 5.0\", 2006.\n                      (Addison-Wesley, 2006.  ISBN\
    \ 0-321-48091-0).\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ASCII]            American National Standards\
    \ Institute (formerly\n                      United States of America Standards\
    \ Institute),\n                      \"USA Code for Information Interchange\"\
    , ANSI X3.4-\n                      1968, 1968.\n                      ANSI X3.4-1968\
    \ has been replaced by newer versions\n                      with slight modifications,\
    \ but the 1968 version\n                      remains definitive for the Internet.\n\
    \   [ISO-C]            International Organization for Standardization,\n     \
    \                 \"Information technology --  Programming languages\n       \
    \               -- C\", ISO/IEC 9899:1999, 1999.\n   [Java]             Sun Microsystems,\
    \ Inc., \"Java Language\n                      Specification, Third Edition\"\
    , 2005, <http://\n                      java.sun.com/docs/books/jls/third_edition/html/\n\
    \                      lexical.html#95413p>.\n   [PERLUniIntro]     Hietaniemi,\
    \ J., \"perluniintro\", Perl\n                      documentation  5.8.8, 2002,\n\
    \                      <http://perldoc.perl.org/perluniintro.html>.\n   [RFC2277]\
    \          Alvestrand, H., \"IETF Policy on Character Sets and\n             \
    \         Languages\", BCP 18, RFC 2277, January 1998.\n   [RFC3492]         \
    \ Costello, A., \"Punycode: A Bootstring encoding of\n                      Unicode\
    \ for Internationalized Domain Names in\n                      Applications (IDNA)\"\
    , RFC 3492, March 2003.\n   [UnicodeGlossary]  The Unicode Consortium, \"Glossary\
    \ of Unicode\n                      Terms\", June 2007,\n                    \
    \  <http://www.unicode.org/glossary>.\n   [W3C-CharMod]      Duerst, M., \"Character\
    \ Model for the World Wide\n                      Web 1.0\", W3C Recommendation,\
    \ February 2005,\n                      <http://www.w3.org/TR/charmod/>.\n"
- title: Appendix A.  Formal Syntax for Forms Not Recommended
  contents:
  - "Appendix A.  Formal Syntax for Forms Not Recommended\n   While the syntax for\
    \ the escape forms that are not recommended above\n   (see Section 6) are not\
    \ given inline in the hope of discouraging\n   their use, they are provided in\
    \ this appendix in the hope that those\n   who choose to use them will do so consistently.\
    \  The reader is\n   cautioned that some of these forms are not defined precisely\
    \ in the\n   original specifications and that others have evolved over time in\n\
    \   ways that are not precisely consistent.  Consequently, these\n   definitions\
    \ are not normative and may not even precisely match\n   reasonable interpretations\
    \ of their sources.\n   The definition of \"HEXDIG\" for the forms that follow\
    \ appears in\n   Section 5.1.\n"
- title: A.1.  The C Programming Language Form
  contents:
  - "A.1.  The C Programming Language Form\n   Specifically, in ABNF [RFC5234],\n\
    \   EmbeddedUnicodeChar =  BMP-form / Full-form\n   BMP-form =  %x5C.75 4HEXDIG\
    \ ; starting with lowercase \"\\u\"\n      ; The encodings are considered to be\
    \ abstractions for the\n      ; relevant characters, not designations of specific\
    \ octets.\n   Full-form =  %x5C.55 8HEXDIG ; starting with uppercase \"\\U\"\n"
- title: A.2.  Perl Form
  contents:
  - "A.2.  Perl Form\n   EmbeddedUnicodeChar =   %x5C.78 \"{\" 2*6HEXDIG \"}\" ; starts\
    \ with \"\\x\"\n"
- title: A.3.  Java Form
  contents:
  - "A.3.  Java Form\n   EmbeddedUnicodeChar =   %x5C.7A 4HEXDIG ; starts with \"\\\
    u\"\n"
- title: Author's Address
  contents:
  - "Author's Address\n   John C Klensin\n   1770 Massachusetts Ave, #322\n   Cambridge,\
    \ MA  02140\n   USA\n   Phone: +1 617 245 1457\n   EMail: john-ietf@jck.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
