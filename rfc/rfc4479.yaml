- title: __initial_text__
  contents:
  - '                       A Data Model for Presence

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the underlying presence data model used by\n\
    \   Session Initiation Protocol (SIP) for Instant Messaging and Presence\n   Leveraging\
    \ Extensions (SIMPLE) presence agents.  The data model\n   provides guidance on\
    \ how to map various communications systems into\n   presence documents in a consistent\
    \ fashion.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Definitions .....................................................3\n  \
    \ 3. The Model .......................................................5\n    \
    \  3.1. Presentity URI .............................................6\n      3.2.\
    \ Person .....................................................7\n      3.3. Service\
    \ ....................................................8\n           3.3.1. Characteristics\
    \ .....................................9\n           3.3.2. Reach Information\
    \ ..................................10\n           3.3.3. Relative Information\
    \ ...............................13\n           3.3.4. Status .............................................13\n\
    \      3.4. Device ....................................................15\n  \
    \    3.5. Modeling Ambiguity ........................................17\n    \
    \  3.6. The Meaning of Nothing ....................................19\n      3.7.\
    \ Status vs. Characteristics ................................19\n      3.8. Presence\
    \ Document Properties ..............................20\n   4. Motivation for the\
    \ Model .......................................21\n   5. Encoding .......................................................22\n\
    \      5.1. XML Schemas ...............................................24\n  \
    \         5.1.1. Common Schema ......................................24\n    \
    \       5.1.2. Data Model .........................................25\n   6. Extending\
    \ the Presence Model ...................................26\n   7. Example Presence\
    \ Document ......................................26\n      7.1. Basic IM Client\
    \ ...........................................27\n   8. Security Considerations\
    \ ........................................29\n   9. Internationalization Considerations\
    \ ............................29\n   10. IANA Considerations ...........................................30\n\
    \      10.1. URN Sub-Namespace Registration ...........................30\n  \
    \    10.2. XML Schema Registrations .................................31\n    \
    \       10.2.1. Common Schema .....................................31\n      \
    \     10.2.2. Data Model ........................................31\n   11. Acknowledgements\
    \ ..............................................31\n   12. References ....................................................32\n\
    \      12.1. Normative References .....................................32\n  \
    \    12.2. Informative References ...................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Presence conveys the ability and willingness of a user to\
    \ communicate\n   across a set of devices.  RFC 2778 [10] defines a model and\n\
    \   terminology for describing systems that provide presence information.\n  \
    \ RFC 3863 [1] defines an XML [5] [6] [7] document format for\n   representing\
    \ presence information.  In these specifications, presence\n   information is\
    \ modeled as a series of tuples, each of which contains\n   a status, communications\
    \ address, and other markup.  However, neither\n   specification gives guidance\
    \ on exactly what a tuple is meant to\n   model, or how to map real-world communications\
    \ systems (and in\n   particular, those built around the Session Initiation Protocol\
    \ (SIP)\n   [11]) into a presence document.\n   In particular, several important\
    \ concepts are not clearly modeled or\n   well delineated by RFCs 2778 and 3863.\
    \  These are the following:\n   Service:  A communications service, such as instant\
    \ messaging (IM) or\n      telephony, is a system for interaction between users\
    \ that provides\n      certain modalities or content.\n   Device:  A communications\
    \ device is a physical component that a user\n      interacts with in order to\
    \ make or receive communications.\n      Examples are a phone, PDA, or PC.\n \
    \  Person:  A person is the end user, and for the purposes of presence,\n    \
    \  is characterized by states, such as \"busy\" or \"sad\", that impact\n    \
    \  their ability and willingness to communicate.\n   This specification defines\
    \ these concepts more fully by means of a\n   presence data model, and concretely\
    \ defines how to take real-world\n   systems and map them into presence documents\
    \ using that model.  This\n   data model is defined in terms of an extension to\
    \ RFC 3863.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [9].\n   This document makes use of many additional terms beyond those\
    \ defined\n   in RFC 2778 and RFC 3863.  These new terms are as follows:\n   Device:\
    \  A device models the physical environment in which services\n      manifest\
    \ themselves for users.  Devices have characteristics that\n      are useful in\
    \ allowing a user to make a choice about which\n      communications service to\
    \ use.\n   Service:  A service models a form of communication that can be used\n\
    \      to interact with the user.\n   Person:  A person models the human user\
    \ and their states that are\n      relevant to presence systems.\n   Occurrence:\
    \  A single description of a particular service, a\n      particular device, or\
    \ a person.  There may be multiple occurrences\n      for a particular service\
    \ or device, or multiple person occurrences\n      in a Presence Information Data\
    \ Format (PIDF) document, in cases\n      where there is ambiguity that is best\
    \ resolved by the watcher.\n   Presentity:  A presentity combines devices, services,\
    \ and person\n      information for a complete picture of a user's presence status\
    \ on\n      the network.\n   Presentity URI:  A URI that acts as a unique identifier\
    \ for a\n      presentity and provides a handle for obtaining presence\n     \
    \ information about that presentity.\n   Data Component:  One of the device, service,\
    \ or person parts of a\n      presence document.\n   Status:  Presence information\
    \ about a service, person, or device that\n      typically changes over time,\
    \ in contrast to characteristics, which\n      are generally static.\n   Characteristics:\
    \  Presence information about a service, person, or\n      device that is usually\
    \ fixed over time, and descriptive in nature.\n      Characteristics are useful\
    \ in providing context that identifies\n      the service or device as different\
    \ from another service or device.\n   Attribute:  A status or characteristic.\
    \  It represents a single piece\n      of presence information.\n   Presence Attribute:\
    \  A synonym for attribute.\n   Composition:  The act of combining a set of presence\
    \ and event data\n      about a presentity into a coherent picture of the state\
    \ of that\n      presentity.\n"
- title: 3.  The Model
  contents:
  - "3.  The Model\n    +----------------------------------------------------------------+\n\
    \    |                                                                |\n    |\
    \                       +----------------+                       |\n    |    \
    \                  +----------------+|                       |\n    |        \
    \              |                ||                       |\n    |            \
    \          |                ||                       |\n    |                \
    \      |     Person     ||                       |\n    |                    \
    \  |                ||\\                      |\n    |                     /|\
    \                |+ \\                     |\n    |                    / +----------------+\
    \   \\                    |\n    |                   /           |           \
    \ \\                   |\n    |                  /            |             \\\
    \                  |\n    |                 /             |              \\  \
    \               |\n    |                /              |               \\    \
    \            |\n    |               /               |                \\      \
    \         |\n    |              V                V                 V         \
    \     |\n    |  +----------------+   +----------------+   +----------------+ \
    \ |\n    | +----------------+|  +----------------+|  +----------------+|  |\n\
    \    | |                ||  |                ||  |                ||  |\n    |\
    \ |                ||  |                ||  |                ||  |\n    | |  \
    \  Service     ||  |    Service     ||  |    Service     ||  |\n    | |      \
    \          ||  |                ||  |                ||  |\n    | |          \
    \      |+  |                |+  |                |+  |\n    | +----------------+\
    \   +----------------+   +----------------+   |\n    |             \\        \
    \      /       \\                           |\n    |              \\         \
    \   /         \\                          |\n    |               \\          /\
    \           \\                         |\n    |                V        V    \
    \         V                        |\n    |          +----------------+      \
    \  +----------------+          |\n    |         +----------------+|       +----------------+|\
    \          |\n    |         |                ||       |                ||    \
    \      |\n    |         |                ||       |                ||        \
    \  |\n    |         |    Device      ||       |    Device      ||          |\n\
    \    |         |                ||       |                ||          |\n    |\
    \         |                |+       |                |+          |\n    |    \
    \     +----------------+        +----------------+           |\n    |        \
    \                                                        |\n    |            \
    \                                                    |\n    | Presentity (URI)\
    \                                               |\n    +----------------------------------------------------------------+\n\
    \                                 Figure 1\n   The data model for presence is\
    \ shown in Figure 1.  The model seeks to\n   describe the presentity, identified\
    \ by a presentity URI.  There are\n   three components in the model: the person,\
    \ the service, and the\n   device.  These three data components contain information\
    \ (called\n   attributes) that provide a description of some aspect of the service,\n\
    \   person, or device.  It is central to this model that each attribute\n   is\
    \ affiliated with the service, person, or device because they\n   describe that\
    \ service, presentity, or device.  This is in contrast to\n   a model whereby\
    \ the attributes are associated with the service,\n   presentity, or device because\
    \ they were reported by that service,\n   presentity, or device.  As an example,\
    \ if a cell phone reports that a\n   user is in a meeting, this would be done\
    \ by including an attribute as\n   part of the person information, indicating\
    \ a status of\n   \"in-a-meeting\".  The presence information may also include\n\
    \   information on the cell phone as a device.  However, even though it\n   is\
    \ the device that is reporting that the user is in a meeting, \"in a\n   meeting\"\
    \ is a fact that describes the human user, not their physical\n   device.  Consequently,\
    \ this attribute is placed in the person\n   component of the document.\n"
- title: 3.1.  Presentity URI
  contents:
  - "3.1.  Presentity URI\n   The identifier for the presentity is a URI.  For each\
    \ unique\n   presentity in the network, there is one or more presentity URIs.\
    \  A\n   presentity may have multiple URIs because they are identified by both\n\
    \   a URI from the Presence (pres) scheme [12] and a protocol-specific\n   URI,\
    \ such as a SIP URI [11] or an Extensible Messaging and Presence\n   Protocol\
    \ Internationalized Resource Identifier (XMPP IRI) [13].  Or,\n   it can be because\
    \ a user has several aliases in a domain, all of\n   which are equivalent identifiers\
    \ for the presentity.\n   When a document is constructed, the presentity URI is\
    \ ideally set to\n   the identifier used to request the document in the first\
    \ place.  For\n   example, if a document was requested through a SIP SUBSCRIBE\
    \ request,\n   the presentity URI would match the Request URI of the SUBSCRIBE\n\
    \   request.  This follows the principle of least surprise, since the\n   entity\
    \ requesting the document may not be aware of the other\n   identifiers for the\
    \ presentity.\n   Irrespective of the scheme from which the URI is taken, the\n\
    \   presentity URI is independent of any of the services or devices that\n   the\
    \ presentity possesses.  However, the URI is not just a name - it\n   represents\
    \ a resource that can be subscribed to, in order to find out\n   the status of\
    \ the user.  When the URI is a SIP URI, it will often be\n   the Address of Record\
    \ for the user, to which SIP calls can be\n   directed.  This equivalence is not\
    \ mandated by this specification,\n   but is a recommended configuration for easing\
    \ the burden of\n   remembering and storing identifiers for users.\n"
- title: 3.2.  Person
  contents:
  - "3.2.  Person\n   The person data component models information about the user\
    \ whom the\n   presence data is trying to describe.  This information consists\
    \ of\n   characteristics of the user, and their status.\n   Characteristics of\
    \ a person are the static information about a user\n   that does not change under\
    \ normal circumstances.  Such information\n   might include physical characteristics,\
    \ such as age and height.\n   Another example of a person characteristic is an\
    \ alias.  An alias is\n   a URI that identities the same user, but with a different\
    \ presentity\n   URI.  For example, a presentity \"sip:bob@example.com\" might\
    \ have a\n   presence document with a person component that indicates an alias\
    \ of\n   \"sip:robert@example.com\" and \"sip:r.smith@example.com\".\n   Status\
    \ information about a presentity represents the dynamic\n   information about\
    \ a user.  This typically consists of things the\n   *user* is doing, places the\
    \ *user* is at, feelings the *user* has,\n   and so on.  Examples of typical person\
    \ status are \"in a meeting\", \"on\n   the phone\", \"out to lunch\", \"happy\"\
    , and \"writing Internet Drafts\".\n   The line between static status information\
    \ and dynamic status\n   information is fuzzy, and it is not important that a\
    \ line be drawn.\n   The model does not differentiate in a syntactically or semantically\n\
    \   meaningful way between these two types of attributes.\n   In the model, there\
    \ can be only one person component per presentity.\n   In other words, the person\
    \ component models a single human being, and\n   includes characteristics and\
    \ statuses that are related to the\n   communication states for a single human\
    \ being.  Of course, the system\n   has no way to verify that the human described\
    \ by the person component\n   is actually a single human being, as opposed to\
    \ a group of users, or\n   even a dog for that matter.  As the saying goes, \"\
    on the Internet, no\n   one knows you are a dog\", and the same is true here.\
    \  The person\n   component is a facade for a single person; anything that can\
    \ be made\n   to look like a single person can be modeled with that facade.\n\
    \   As an example, consider the task of using a presence document to\n   describe\
    \ a customer support help desk.  The person component can be\n   considered to\
    \ be \"busy\" if none of the support staff are available,\n   and \"at lunch\"\
    \ if the help desk department has a group lunch\n   together.  The watcher that\
    \ receives the document will consider the\n   help desk to be a single person;\
    \ nothing in the document (except\n   perhaps the note element, should its value\
    \ be \"help desk\" or\n   something similar) conveys information that would indicate\
    \ that the\n   person in question is actually a help desk.\n   However, there\
    \ can be multiple occurrences of the person component.\n   This happens in cases\
    \ where the state of the person component is\n   ambiguous, as discussed in Section\
    \ 3.5.\n"
- title: 3.3.  Service
  contents:
  - "3.3.  Service\n   Each presentity has access to a number of services.  Each of\
    \ these\n   represents a point of reachability for communications that can be\n\
    \   used to interact with the user.  Examples of services are telephony\n   (that\
    \ is, traditional circuit-based telephone service), push-to-talk,\n   instant\
    \ messaging, Short Message Service (SMS), and Multimedia\n   Message Service (MMS).\n\
    \   It is difficult to give a precise definition for service.  One\n   reasonable\
    \ approach is to model each software or hardware agent in\n   the system as a\
    \ service.  If a user starts a softphone application on\n   their PC, then that\
    \ represents a service.  If a user has a videophone\n   device, then that represents\
    \ another service.  This is effectively a\n   physical view of services.  This\
    \ definition, however, starts to fall\n   apart when a service is spread across\
    \ multiple software agents or\n   devices.  For example, a SIP URI representing\
    \ an address-of-record\n   can be routed to a softphone or a videophone, or both.\
    \  In that case,\n   one might attempt instead to define a service based on its\
    \ address on\n   the network.  This definition also falls apart when modeling\
    \ devices\n   or applications that receive calls and dispatch them to different\n\
    \   \"helpers\" based on potentially complex logic.  For example, a\n   cellular\
    \ telephone might house multiple SIP applications, each of\n   which can \"register\"\
    \ different handlers based on the method or even\n   body type of the request.\
    \  Each of those applications or handlers can\n   rightfully be considered a service,\
    \ but it doesn't have an address on\n   the network distinct from the others.\n\
    \   Because of this inherent difficulty in precisely defining a service,\n   the\
    \ data model doesn't try to constrain what can be considered a\n   service.  Rather,\
    \ anything can be considered a service so long as it\n   exhibits a set of key\
    \ properties defined by this model.  In\n   particular, each service is associated\
    \ with characteristics that\n   identify the nature and capabilities of that service,\
    \ with reach\n   information that indicates how to connect to the service, with\
    \ status\n   information representing the state of that service, and relative\n\
    \   information that describes the ways in which that service relates to\n   others\
    \ associated with the presentity.\n   As a consequence, in this model, services\
    \ are not explicitly\n   enumerated.  There is no central registry where one finds\
    \ identifiers\n   for each service.  Consequently, each service does not have\
    \ a single\n   \"service\" attribute with values such as \"ptt\" or \"telephony\"\
    .  That\n   doesn't mean that these consolidated monikers aren't useful; indeed,\n\
    \   they represent an essential summary of what the service is.  Such\n   summarization\
    \ is useful in creating icons that allow a user to choose\n   one service over\
    \ another.  A watcher is free to create such\n   summarization information from\
    \ any of the information associated with\n   a service.  The reach information\
    \ often provides valuable information\n   for creating such a summarization. \
    \ Oftentimes, the scheme of the URI\n   is synonymous with the view of what a\
    \ service is.  An \"sms\" URI [14]\n   clearly indicates SMS, for example.  For\
    \ some URIs, there may be many\n   services available, for example, SIP or tel\
    \ [15], in which case the\n   scheme is less meaningful as a way of creating a\
    \ summary.  The reach\n   information could also indicate that certain application\
    \ software has\n   to be invoked (such as a videogame), in which case that aspect\
    \ of the\n   reach information would be useful for generating an iconic\n   representation\
    \ of the game.\n"
- title: 3.3.1.  Characteristics
  contents:
  - "3.3.1.  Characteristics\n   Each service is adorned with characteristics that\
    \ describe the nature\n   and capabilities of the service that will be experienced\
    \ when a\n   watcher invokes that URI.  The nature of a service is a set of\n\
    \   properties that are relatively static across communication sessions\n   established\
    \ to that service.  The nature of a service tends to be\n   descriptive.  Examples\
    \ of the nature of a service are that it\n   represents an interactive voice response\
    \ or voicemail server, that it\n   is an automaton, or that it is a telephony\
    \ service used for the\n   purposes of work.  Capabilities, on the other hand,\
    \ represent\n   properties that might be exhibited, and whether they are exhibited\n\
    \   depends on negotiation and other dynamic functions that take place\n   during\
    \ session establishment.  Examples of such capabilities are the\n   type of media\
    \ that might be used, the directionality of\n   communications that are permitted,\
    \ the SIP extensions supported, and\n   so on.  Capabilities can be very complex;\
    \ for example, RFC 2533 [16]\n   describes a model for representing capabilities\
    \ through N-ary boolean\n   functions.  It is difficult to differentiate a capability\
    \ with one\n   modality (e.g., this service only does voice) from a characteristic\n\
    \   that represents the nature of a service.  However, it is not\n   important\
    \ to do so.\n   Characteristics are important when multiple services are indicated.\n\
    \   That is because the purpose of listing multiple services in a\n   presence\
    \ document is to give the watcher a *choice*.  That is, the\n   presentity is\
    \ explicitly offering the watcher an opportunity to\n   contact them using a multiplicity\
    \ of different services.  To help the\n   watcher make a decision, the presence\
    \ document includes\n   characteristics of each service that help differentiate\
    \ the services\n   from each other and give the watcher the context in which to\
    \ make a\n   choice.\n   Because their purpose is primarily to facilitate choice,\
    \ capabilities\n   do not impose a requirement on the way in which a user reaches\
    \ that\n   service.  For example, if a presence document includes two services,\n\
    \   and one supports audio only while the other supports only video, this\n  \
    \ does not mean that, when contacting the first service, a user has to\n   offer\
    \ only an audio stream, or when contacting the second service, a\n   user has\
    \ to offer only a video stream.  A user can use local policy\n   at its discretion\
    \ in determining what capabilities or communications\n   modalities are offered\
    \ when they choose to connect with a service.\n   It is not necessary for a watcher\
    \ to add SIP caller preferences [2]\n   to request routing of the request to a\
    \ service with the\n   characteristics described in the presence document.\n \
    \  If, in order to reach a service, the user agent must generate a\n   request\
    \ that exhibits a particular capability or contains a specific\n   header, then\
    \ this is indicated separately in the reach information,\n   described below.\n\
    \   One important characteristic of each service is the list of devices\n   on\
    \ which that service executes.  Each device is identified uniquely\n   by a device\
    \ ID.  As such, the service characteristics can include a\n   list of device IDs.\
    \  A presence document might also contain\n   information on each device, but\
    \ this is a separate part of the\n   document.  Indeed, the information on each\
    \ device might not even be\n   present in the document.  In that case, the device\
    \ IDs listed for\n   each service are nothing more than correlation identifiers,\
    \ useful\n   for determining when two services run on the same device.  The\n\
    \   benefit of this model is that information on the devices can be\n   filtered\
    \ out of a presence document, yet the service information,\n   which includes\
    \ the device IDs, remains useful and meaningful.\n   It is perfectly valid for\
    \ a presence document to contain just a\n   single service.  This is permitted\
    \ even if the presentity actually\n   has multiple services at their disposal.\
    \  The lack of multiple\n   services in the document merely means that the presentity\
    \ is not\n   offering a choice to the watcher.  In such a case, the service\n\
    \   characteristics are less important, but may be helpful in allowing a\n   watcher\
    \ to decide if they wish to communicate at all.\n"
- title: 3.3.2.  Reach Information
  contents:
  - "3.3.2.  Reach Information\n   The reach information for a service provides the\
    \ instructions for the\n   recipient of a document on how to correctly contact\
    \ that service.\n   When a service is accessible over a communications network,\
    \ reach\n   information includes a URI that can be \"hit\" to access the service.\n\
    \   This URI is called the service URI.  However, some services are not\n   accessible\
    \ over a communications network (such as in-person\n   communications or a written\
    \ letter), and as such, may not utilize a\n   URI.\n   Even for services reachable\
    \ over a communications network, the URI\n   alone may not be sufficient.  For\
    \ example, two applications may be\n   running within a cellular telephone, both\
    \ of which are reachable\n   through the user's SIP Address of Record.  However,\
    \ one application\n   is launched when the INVITE request contains a body of a\
    \ particular\n   type, and the other is launched for other body types.  As another\n\
    \   example, a service may provide complex application logic that\n   operates\
    \ correctly only when contacted from matching application\n   software.  In such\
    \ a case, even though the communications between\n   instances utilizes a standard\
    \ protocol (such as SIP), the user\n   experience will not be correct unless the\
    \ applications are matched.\n   When the URI is not sufficient, additional attributes\
    \ of the service\n   can be present that define the instructions on how the service\
    \ is to\n   be reached.  These attributes must be understood for the service to\n\
    \   be utilized.  If a watcher receives a presence document containing\n   reach\
    \ information it does not understand, it should discard the\n   service information.\n\
    \   The reach information is an important part of the service.  When the\n   watcher\
    \ makes a decision about which service of the presentity they\n   wish to access,\
    \ the watcher utilizes the reach information for that\n   service.  For this reason,\
    \ each service has to have a unique set of\n   reach information.  If this was\
    \ not the case, the user would have no\n   way to choose between the services.\
    \  This means that the reach\n   information represents a unique identifier for\
    \ the service.  However,\n   a presence document can contain multiple occurrences\
    \ of a particular\n   service, each of which contains the same reach information,\
    \ but\n   differs in its occurrence identifier.  Multiple occurrences of a\n \
    \  service exist in a document when the state of the service is\n   ambiguous,\
    \ as discussed in Section 3.5.\n   Because the reach information serves as an\
    \ identifier for a service,\n   it also serves as a way to figure out whether\
    \ a communications\n   capability should be represented as one service or more.\
    \  Something\n   cannot be a service unless there is a way to reach it separately\
    \ from\n   another service.  As an example, consider a softphone application\n\
    \   that is capable of audio and video.  It is not possible to describe\n   this\
    \ softphone as two services - one capable of just audio, and one\n   capable of\
    \ just video.  That's because there is no way to reach the\n   video-only service;\
    \ for example, sending a SIP INVITE with just a\n   video stream doesn't suffice,\
    \ since one can always add the audio\n   stream later and it will work.  Video\
    \ and audio, in this case,\n   represent capabilities for a single service.\n\
    \   The reach information represents a weak form of contract; the\n   presentity\
    \ tells the watcher that, if the watcher utilizes the reach\n   information included\
    \ in the presence document, the watcher might be\n   connected to a service described\
    \ by the characteristics included in\n   the presence document.  It is important\
    \ to stress that this is not a\n   guarantee in any way.  It cannot be a guarantee\
    \ for two reasons.\n   First, the service in the document might actually be modelling\
    \ a\n   number of actual services used by the user, and it may not be\n   possible\
    \ to connect the watcher to a service with all of the\n   characteristics described\
    \ in the presence document.  Second, the\n   preferences of the presentity always\
    \ take precedence.  The caller\n   might ask to be connected to the video service,\
    \ but it is permissible\n   to connect them to a different service if that is\
    \ the wish of the\n   presentity.\n   This loose contract also provides some guidance\
    \ on the type of URI\n   that is most ideally suited for the service URI.  A URN\
    \ [3] can be\n   used as the service URI.  However, since a URN could be resolved\
    \ to\n   potentially any number of different URIs, the characteristics,\n   status,\
    \ and relative information need to be sensible for all of the\n   URIs that can\
    \ be resolved from the URN.  As the URN becomes\n   increasingly \"vague\" in\
    \ terms of the service it identifies, the\n   number of presence attributes that\
    \ can be included decreases\n   correspondingly.\n   The tel URI [11] shares similar\
    \ properties with a URN, and the same\n   considerations apply.  If, for example,\
    \ the telephone number exists\n   in ENUM [18] and multiple ENUM services are\
    \ defined, including voice\n   and messaging, it is likely that very little characteristic\n\
    \   information can be included in that service.  If, however, a tel URI\n   has\
    \ only a single ENUM service defined, and it refers to a telephone\n   service\
    \ on the Public Switched Telephone Network (PSTN), more can be\n   said about\
    \ its characteristics, status, and relative priority.\n   It is important to point\
    \ out that there can be a many-to-one mapping\n   of reach information to a service.\
    \  That is, a particular service can\n   potentially be reachable through an infinite\
    \ number of reach\n   information sets.  This is true even if the reach information\
    \ is just\n   the service URI; it is permissible for multiple service URIs to\
    \ reach\n   the same service.  Within any particular document, for a particular\n\
    \   service,  there will be a single service URI.  However, it is allowed\n  \
    \ and even valuable to provide different service URIs to different\n   watchers,\
    \ or to change the service URIs provided to a particular\n   watcher over time.\
    \  Doing so affords many benefits, in fact.  It can\n   allow the recipient of\
    \ a communications attempt to determine the\n   context for that attempt - that\
    \ the attempt was made as a result of\n   trying to reach a particular service\
    \ in a particular presence\n   document.  This can be used as a technique for\
    \ preventing\n   communications spam, for example [19].\n   It is also possible\
    \ for a presence document to contain a service that\n   has no reach information\
    \ at all.  In such a case, the presentity is\n   indicating that the service exists,\
    \ but is electing not to offer the\n   watcher the opportunity to connect to it.\
    \  One such example would be\n   to let a watcher know that a user has a telephony\
    \ service, and that\n   they are busy, but in order to avoid receipt of a call,\
    \ no reach\n   information is provided.\n   In an ideal system, the URI alone\
    \ would represent sufficient reach\n   information for each service.  A URI is\
    \ supposed to provide\n   sufficient context for reaching the resource associated\
    \ with the URI,\n   and thus in theory there is no need for additional context.\
    \  However,\n   sometimes, additional information is needed.  Since the reach\n\
    \   information has to be understood in order for the service to be\n   utilized,\
    \ reach information beyond the URI should be defined and used\n   sparingly. \
    \ Extensions to PIDF that define attributes that are reach\n   information should\
    \ clearly call those attributes out as such.\n"
- title: 3.3.3.  Relative Information
  contents:
  - "3.3.3.  Relative Information\n   Each service is also associated with a priority,\
    \ which represents the\n   preference that the user has for usage of one service\
    \ over another.\n   This does not mean that, when a watcher wishes to communicate\
    \ with\n   the presentity, that they should always use the service with the\n\
    \   highest priority.  If that were the case, there would be no point in\n   including\
    \ multiple services in the presence document.  Rather, the\n   priority says,\
    \ \"If you, the watcher, cannot decide which of these to\n   use, or if it is\
    \ not important to you, this is the order in which I\n   would like you to contact\
    \ me.  However, I am giving you a choice.\"\n   The priorities are relative to\
    \ each other, and have no meaning as\n   absolute numbers.  If there are two services,\
    \ and they have\n   priorities of 1 and .5, respectively, this is identical to\
    \ giving\n   them priorities of .2 and .1, respectively.\n"
- title: 3.3.4.  Status
  contents:
  - "3.3.4.  Status\n   Each service also has a status.  Status represents generally\
    \ dynamic\n   information about the availability of communications using that\n\
    \   service.  This is in contrast to characteristics, which describe\n   fairly\
    \ static properties of the various services.  The simplest form\n   of status\
    \ is the basic status, which is a binary indicator of\n   availability for communications\
    \ using that service.  It can have\n   values of either \"closed\" or \"open\"\
    .  \"Closed\" means that\n   communication to the service will, in all likelihood,\
    \ fail, will not\n   reach the intended party, or will not result in communications\
    \ as\n   described by the characteristics of the service.  As an example, if a\n\
    \   call is forwarded to voicemail if the user is busy or unavailable,\n   the\
    \ service is marked as \"closed\".  Similarly, a presentity may\n   include a\
    \ hotel phone number as a service URI.  After checkout, the\n   phone number will\
    \ still ring, but reach the chambermaid or the next\n   guest.  Thus, it would\
    \ be declared \"closed\" by that presentity.  As\n   another example, if a user\
    \ has a SIP URI as their service URI that\n   points to a SIP softphone application,\
    \ and the PC shuts down, calls\n   to that SIP URI will return a 480 response\
    \ code.  This service would\n   also be declared \"closed\".  \"Open\" implies\
    \ the opposite - that\n   communications to this service will likely succeed and\
    \ reach the\n   desired target.\n   It is also possible to have status information\
    \ that is dependent on\n   the characteristics of the communications session that\
    \ eventually\n   gets set up.  For example, a status attribute can be defined\
    \ that\n   indicates that a softphone service is available if instant messaging\n\
    \   is used, but unavailable if audio is used.\n   Other status information might\
    \ indicate more details on why the\n   service is available or unavailable.  For\
    \ example, a telephony\n   service might have additional status to indicate that\
    \ the user is on\n   the phone, or that the user is handling 3 calls for that\
    \ service.\n   Services inherently have a lot of dynamic state associated with\
    \ them.\n   For example, consider a wireless telephony service (i.e., a cell\n\
    \   phone).  There are many dynamic statuses of this service - whether or\n  \
    \ not the phone is registered, whether or not it is roaming, which\n   provider\
    \ it has roamed into, its signal strength, how many calls it\n   has, what the\
    \ state of those calls are, how long the user has been in\n   a call, and so on.\
    \  As another example, consider an IM service.  The\n   statuses in this service\
    \ include whether the user is registered, how\n   long they have been registered,\
    \ whether they have an IM conversation\n   in progress, how many IM conversations\
    \ are in progress, whether the\n   user is typing, to whom they are typing, and\
    \ so on.\n   However, not all of this dynamic state is appropriate to include\n\
    \   within a service data component of a presence document.  Information\n   is\
    \ included only when it has a bearing on helping the watcher decide\n   whether\
    \ to initiate communications with that service, or helping the\n   watcher decide\
    \ when to initiate it, if not now.  As an example,\n   whether a cell phone has\
    \ strong signal strength or just good signal\n   strength does not pass the litmus\
    \ test.  Knowing this is not likely\n   to have an impact on a decision to use\
    \ this service.\n"
- title: 3.4.  Device
  contents:
  - "3.4.  Device\n   Devices model the physical operating environment in which services\n\
    \   execute.  Examples of devices include cell phones, PCs, laptops,\n   PDAs,\
    \ consumer telephones, enterprise PBX extensions, and operator\n   dispatch consoles.\n\
    \   The mapping of services to devices are many to many.  A single\n   service\
    \ can execute in multiple devices.  Consider a SIP telephony\n   service.  Two\
    \ SIP phones can register against a single Address of\n   Record for this service.\
    \  As a result, the SIP service is associated\n   with two devices.  Similarly,\
    \ a single device can support a\n   multiplicity of services.  A cell phone can\
    \ support a SIP telephony\n   service, an SMS service, and an MMS service.  Similarly,\
    \ a PC can\n   support a SIP telephony service and a SIP videophone service.\n\
    \   Furthermore, a single device can support no services.  In such a\n   case,\
    \ the device has no useful presence information by itself.\n   However, when composed\
    \ with other documents that describe this same\n   device in relation to a service,\
    \ a richer presence document can be\n   created.  For example, consider a Radio\
    \ Frequency ID (RFID) tag as a\n   device.  This device does not execute any services.\
    \  However, as a\n   device, it has properties, such as location, and it may have\
    \ network\n   connectivity with which it can report its status and characteristics.\n\
    \   If a video telephone were to report that it was running a video\n   service,\
    \ and one of its properties was that it was tagged with that\n   RFID, a compositor\
    \ could combine the two documents together, and use\n   the location of the RFID\
    \ to say something about the location of the\n   video telephony device.\n   Devices\
    \ are identified with a device ID.  A device ID is a URI that\n   is a globally\
    \ and temporally unique identifier for the device.  In\n   particular, a device\
    \ ID is a URN.  The URN has to be unique across\n   all other devices for a particular\
    \ presentity.  However, it is also\n   highly desirable that it be persistent\
    \ across time, globally unique,\n   and computable in a fashion so that different\
    \ systems are likely to\n   refer to the device using the same ID.  With these\
    \ properties,\n   differing sources of presence information based on device status\
    \ can\n   be combined.  The last of these three properties - readily computable\n\
    \   - is particularly useful.  It allows for a compositor to combine\n   disparate\
    \ sources of information about a device, all linked by a\n   common device ID\
    \ that each source has independently used to identify\n   the device in question.\n\
    \   Unfortunately, due to the variety of different devices in existence,\n   it\
    \ is difficult for a single URN scheme to be used that will have\n   these properties.\
    \  It is anticipated that multiple schemes will be\n   defined, with different\
    \ ones appropriate for different types of\n   devices.  For cellular telephones,\
    \ the Electronic Serial Number\n   (ESN), for example, is a good identifier. \
    \ For IP devices, the MAC\n   address is another good one.  The MAC address has\
    \ the property of\n   being readily computable, but lacks persistence across time\
    \ (it would\n   change if the interface card on a device were to change).  In\
    \ any\n   case, neither of these are associated with URN schemes at this time.\n\
    \   In the interim, the Universally Unique IDentifier (UUID) URN [20] can\n  \
    \ be used.  For devices with a MAC address, version 1 UUIDs are\n   RECOMMENDED,\
    \ as they result in a time-based identifier that makes use\n   of the MAC address.\
    \  For devices without a MAC, a version 4 UUID is\n   RECOMMENDED.  This is a\
    \ purely random identifier, providing\n   uniqueness.  The UUID for a device would\
    \ typically be chosen at the\n   time of fabrication in the device, and then persisted\
    \ in the device\n   within flash or some other kind of non-volatile storage. \
    \ The UUID\n   URN has the properties of being globally and temporally unique,\
    \ but\n   because of its random component, it is not at all readily computable,\n\
    \   and therefore useless as a correlation ID with other presence sources\n  \
    \ on a network.  It is anticipated that future specifications will be\n   developed\
    \ that provide additional, superior device IDs.\n   Though each device is identified\
    \ by a unique device ID, there can be\n   multiple occurrences of a particular\
    \ device represented in a\n   document.  Each one will share the same device ID,\
    \ but differ in its\n   occurrence identifier.  Multiple occurrences of a device\
    \ exist in a\n   document when the state of the device is ambiguous, as discussed\
    \ in\n   Section 3.5.\n   Though this document does not mandate a particular implementation\n\
    \   approach, the device ID is most useful when all of the services on\n   the\
    \ device have a way to obtain the device ID and get the same value\n   for it.\
    \  This would argue for its placement as an operating system\n   feature.  Operating\
    \ system developers interested in implementing this\n   specification are encouraged\
    \ to provide APIs that allow applications\n   to obtain the device ID.  Absent\
    \ such APIs, applications that report\n   presence information about their devices\
    \ will have to generate their\n   own device IDs.  This leads to the possibility\
    \ that the applications\n   may choose different device IDs, using different algorithms\
    \ or data.\n   In the worst case, these may mean that two services that run on\
    \ the\n   same device, do not appear to.\n   Like services and person data components,\
    \ device data components have\n   generally static characteristics and generally\
    \ dynamic status.\n   Characteristics of a device include its physical dimensions\
    \ and\n   capabilities - the size of its display, the speed of its CPU, and the\n\
    \   amount of memory.  Status information includes dynamic information\n   about\
    \ the device.  This includes whether the device is powered on or\n   off, the\
    \ amount of battery power that remains in the device, the\n   geographic location\
    \ of the device, and so on.\n   The characteristics and status information reported\
    \ about a device\n   are for the purposes of choice - to allow the user to choose\
    \ the\n   service based on knowledge of what the device is.  The device\n   characteristics\
    \ and status cannot, in any reliable way, be used to\n   extract information about\
    \ the nature of the service that will be\n   received on the device.  For example,\
    \ if the device characteristics\n   include the speed of the CPU, and the speed\
    \ is sufficient to support\n   high-quality video compression, this cannot be\
    \ interpreted to mean\n   that video quality would be good for a video service\
    \ on that device.\n   Other constraints on the system may reduce the amount of\
    \ CPU\n   available to that service.  If there is a desire to indicate that\n\
    \   higher-quality video is available on a device, that should be done by\n  \
    \ including service characteristics that say just that.  The speed of\n   the\
    \ CPU might be useful in helping the watcher differentiate between\n   a device\
    \ that is a PC and one that is a cell phone, in the case where\n   the watcher\
    \ wishes to call the user's cell phone.\n   Similarly, if there is dynamic device\
    \ status (such as whether the\n   device is on or off), and this state impacts\
    \ the state of the\n   service, this is represented by adjusting the state of\
    \ the service.\n   Unless a consumer of a presence document has a priori knowledge\n\
    \   indicating otherwise (note that presence agents often do), the state\n   of\
    \ a device has no bearing on the state of the service.\n   Just like services,\
    \ there is no enumeration of device types - PCs,\n   PDAs, cell phones, etc. \
    \ Rather, the device is defined by its\n   characteristics, from which a watcher\
    \ can extrapolate whether the\n   device is a PDA, cell phone, or what have you.\n\
    \   It is important to point out that the device is a *model* of the\n   underlying\
    \ physical systems in which services execute.  There is\n   nothing that says\
    \ that this model cannot be used to talk about\n   systems where services run\
    \ in virtualized systems, rather than real\n   ones.  For example, if a PC is\
    \ executing a virtual machine and\n   running services within that virtual machine,\
    \ it is perfectly\n   acceptable to use this model to talk about that PC as being\
    \ composed\n   of two separate devices.\n"
- title: 3.5.  Modeling Ambiguity
  contents:
  - "3.5.  Modeling Ambiguity\n   Ambiguity is a reality of a presence system, and\
    \ it is explicitly\n   modeled by this specification.  Ambiguity exists when there\
    \ are\n   multiple pieces of information about a person, a particular device,\n\
    \   or a particular service.  This ambiguity naturally arises when\n   multiple\
    \ elements publish information about the person, a particular\n   service, or\
    \ a particular device.  In some cases, a compositor can\n   resolve the ambiguity\
    \ in an automated way, and combine the data about\n   the person, device, or service\
    \ into a single coherent description.\n   In other cases, it cannot, perhaps because\
    \ the compositor lacks the\n   ability to do so.\n   However, in many cases, the\
    \ resolution of this ambiguity is best left\n   to the watcher that consumes the\
    \ document.  This consumer could be an\n   application with more information than\
    \ the compositor, and thus be\n   able to do a better job of resolving the ambiguity.\
    \  Or, it may be\n   presented to the human user, and the human can often resolve\
    \ the\n   ambiguity.  Unsurprisingly, a human can often do this far better than\n\
    \   an automaton can.\n   To model ambiguity, the model allows each service, each\
    \ device, or\n   the person component to contain multiple occurrences.  Each\n\
    \   occurrence has a unique identifier, called the occurrence identifier.\n  \
    \ This identifier is unique across all other occurrence identifiers for\n   any\
    \ service, device, or person.  That is, its uniqueness is scoped\n   within all\
    \ of the services, devices, and person elements for a\n   particular presentity.\
    \  The identifier ideally persists over time,\n   since it serves as a valuable\
    \ handle for setting composition and\n   authorization policies.  Even if there\
    \ is a single occurrence for a\n   particular device, service, or person, the\
    \ occurrence has an\n   occurrence identifier.\n   The occurrence identifier is\
    \ not to be confused with the instance ID\n   defined in the SIP Outbound specification\
    \ [27].  A user agent\n   instance is best modeled as a service, and indeed, a\
    \ Globally\n   Routable User Agent URI (GRUU) [22], which is derived from the\n\
    \   instance ID, represents a reasonable choice for a service URI.\n   However,\
    \ if the status of such a UA instance could not be determined\n   unambiguously,\
    \ a presence document could include two or more\n   occurrences of the service\
    \ modeling that UA instance.  In such a\n   case, each occurrence has a unique\
    \ occurrence ID, but they share the\n   same service URI, and consequently, the\
    \ same instance ID.\n   When multiple occurrences exist in a document, it is important\
    \ that\n   some of the attributes of the device, service, or person help the\n\
    \   recipient resolve the ambiguity.  For humans, the note field and\n   timestamp\
    \ serve as valuable tools.  For an automaton, nearly any\n   attribute of the\
    \ device, service, or person can be used to resolve\n   the ambiguity.  The timestamp\
    \ in particular is very useful for both\n   humans and automatons.  As described\
    \ in RFC 3863 [1], the timestamp\n   provides the time of most recent change for\
    \ the tuple.  This\n   specification defines the timestamp for person and device\
    \ components\n   as well, with the same meaning.  Absent other information, the\n\
    \   person, device, or service that most recently changed can be used as\n   the\
    \ more reliable source of data.  However, such a resolution\n   algorithm is not\
    \ normatively required in any way.\n"
- title: 3.6.  The Meaning of Nothing
  contents:
  - "3.6.  The Meaning of Nothing\n   It is clear that the existence of a presence\
    \ attribute in a document\n   tells something to a watcher about the value of\
    \ that presence\n   attribute.  However, what does the absence of a presence attribute\n\
    \   say?  This data model follows the lead of RFC 3840 [17], which is\n   used\
    \ to define capabilities for SIP user agents.  In that\n   specification, if a\
    \ capability declaration omits a particular feature\n   tag, it means that the\
    \ agent is making no definitive statement either\n   way about whether this feature\
    \ tag is supported.  The same is true\n   here - the absence of a presence attribute\
    \ from a document means that\n   a watcher cannot make any definitive statement\
    \ about the value for\n   that presence attribute.  It may be absent because it\
    \ is being\n   withheld from the watcher, or it may be absent because that attribute\n\
    \   is not supported by the presentity's software.  Neither conclusion\n   can\
    \ be drawn.\n   Because the absence of a presence attribute conveys no information\n\
    \   whatsoever, presence documents achieve their maximum value when they\n   have\
    \ as many presence attributes as possible.  As such, it is\n   RECOMMENDED that\
    \ a presence document contain as many presence\n   attributes as the presentity\
    \ is willing to and able to provide to a\n   watcher.\n"
- title: 3.7.  Status vs. Characteristics
  contents:
  - "3.7.  Status vs. Characteristics\n   The data model tries to separate status\
    \ information from\n   characteristics, generally by defining status as a relatively\
    \ dynamic\n   state about a person, device, or service, whereas a characteristic\
    \ is\n   relatively static.  However, this distinction is often artificial.\n\
    \   Almost any characteristic can change over time, and sometimes\n   characteristics\
    \ can change relatively quickly.  As a result, the\n   distinction between status\
    \ and characteristics is merely a conceptual\n   one to facilitate understanding\
    \ about the different types of presence\n   information.  Nothing in a presence\
    \ document indicates whether an\n   element is a characteristic vs. a status,\
    \ and when a presence\n   attribute is defined, there is no need for it to be\
    \ declared one or\n   the other.  Presence documents allow any presence attribute,\
    \ whether\n   it can be thought of as a characteristic or a status, to change\
    \ at\n   any time.\n   Unfortunately, the original PIDF specification did have\
    \ a separate\n   part of a tuple for describing status, and the basic status was\n\
    \   defined to exist within that part of the tuple.  This specification\n   does\
    \ not change PIDF; however, all future presence attributes MUST be\n   defined\
    \ as children of the <tuple> and not the <status> element.\n   Furthermore, the\
    \ schemas defined here do not contain a <status>\n   element for either the <person>\
    \ or <device> elements.\n"
- title: 3.8.  Presence Document Properties
  contents:
  - "3.8.  Presence Document Properties\n   The overall presence document has several\
    \ important properties that\n   are essential to this model.\n   First, a presence\
    \ document has a concrete meaning independent of how\n   it is transported or\
    \ where it is found.  The semantics of a document\n   are the same regardless\
    \ of whether a document is published by a\n   presence user agent to its compositor,\
    \ or whether it is distributed\n   from a presence agent to watchers.  There are\
    \ no required or implied\n   behaviors for a recipient of a document.  Rather,\
    \ there are well-\n   defined semantics for the document itself, and a recipient\
    \ of a\n   document can take whatever actions it chooses based on those\n   semantics.\n\
    \   A corollary of this property is that presence systems are infinitely\n   composeable.\
    \  A presence user agent can publish a document to its\n   presence server.  That\
    \ presence server can compose it with other\n   documents, and place the result\
    \ in a notification to a watcher.  That\n   watcher can actually be another presence\
    \ agent, combining that\n   document with others it has received, and placing\
    \ those results in\n   yet another notify.\n   Yet another corollary of this property\
    \ is that implied behaviors in\n   reaction to the document cannot ever be assumed.\
    \  For example, just\n   because a service indicates that it supports audio does\
    \ not mean that\n   a watcher will offer audio in a communications attempt to\
    \ that\n   service.  If doing so is necessary to reach the service, this must\
    \ be\n   indicated explicitly through reach information.\n   It is also important\
    \ to understand that the role of the presence\n   document is to help a user make\
    \ a choice amongst a set of services,\n   and furthermore, to know ahead of time\
    \ with as much certainty as\n   possible whether a communications attempt will\
    \ succeed or fail.\n   Success is a combination of many factors: Does the watcher\
    \ understand\n   the service URI?  Can it act on all of the reach information?\
    \  Does\n   it support a subset of the capabilities associated with the service?\n\
    \   Does the person information indicate that the user is likely to\n   answer?\
    \  All of these checks should ideally be made before attempting\n   communication.\n\
    \   Because the presence document serves to help a user to choose and\n   establish\
    \ communications, the presentity URI - as the index to that\n   document - represents\
    \ a form of \"one-number\" communications.\n   Starting from this URI, all of\
    \ the communications modalities and\n   their URIs for a user can be discovered,\
    \ and then used to invoke a\n   particular communications service.  Rather than\
    \ having to give out a\n   separate phone number, email address, IM address, Voice\
    \ over Internet\n   Protocol (VoIP) address, and so on, the presentity URI can\
    \ be\n   provided, and all of the others can be learned from there.\n"
- title: 4.  Motivation for the Model
  contents:
  - "4.  Motivation for the Model\n   Presence is defined in [21] as the ability,\
    \ willingness, or desire to\n   communicate across a set of devices.  The core\
    \ of this definition is\n   the conveyance of information about the ability, willingness,\
    \ or\n   desire for communications.  Thus, the presence data model needs to be\n\
    \   tailored around conveying information that achieves this goal.\n   The person\
    \ data component is targeted at conveying willingness and\n   desire for communications.\
    \  It is used to represent information about\n   the users themselves that affects\
    \ willingness and desire to\n   communicate.  Whether I am in a meeting, whether\
    \ I am on the phone -\n   each of these says something about my willingness to\
    \ communicate, and\n   thus makes sense for inclusion in a presence document.\n\
    \   The service component of the data model aims to convey information on\n  \
    \ the ability to communicate.  The ability to communicate is defined by\n   the\
    \ services by which a user is reachable.  Thus, including them is\n   essential.\n\
    \   How do devices fit in?  For many users, devices represent the ability\n  \
    \ to communicate, not services.  Frequently, users make statements\n   like, \"\
    Call me on my cell phone\" or \"I'm at my desk\".  These are\n   statements for\
    \ preference for communications using a specific device,\n   as opposed to a service.\
    \  Thus, it is our expectation that users will\n   want to represent devices as\
    \ part of the presence data.\n   Furthermore, the concept of device adds the ability\
    \ to correlate\n   services together.  The device models the underlying platform\
    \ that\n   supports all of the services on the phone.  Its state therefore\n \
    \  impacts all services.  For example, if a presence server can\n   determine\
    \ that a cell phone is off, this says something about the\n   services that run\
    \ on that device: they are all not available.  Thus,\n   if services include indicators\
    \ about the devices on which they run,\n   device state can be obtained and thus\
    \ used to compute the state of\n   the services on the device.\n   The data model\
    \ tries hard to separate device, service, and person as\n   different concepts.\
    \  Part of this differentiation is that many\n   attributes will be applicable\
    \ to some of these, but not others.  For\n   example, geographic location is a\
    \ meaningful attribute of the person\n   (the user has a location) and of a device\
    \ (the device has a\n   location), but not of a service (services don't inherently\
    \ have\n   locations).  Based on this, geographic location information should\n\
    \   only appear as part of device or person, never service.  Furthermore,\n  \
    \ it is possible and meaningful for location information to be conveyed\n   for\
    \ both device and person, and for these locations to be different.\n   The fact\
    \ that the presence system might try to determine the location\n   of the person\
    \ by extrapolation from the location of one of the\n   devices is irrelevant from\
    \ a data modeling perspective.  Person\n   location and device location are not\
    \ the same thing.\n   [25] defines the <geopriv> XML element for conveying location\n\
    \   information, and indicates that it is carried as a child of the\n   <tuple>\
    \ element in a PIDF document. [25] was developed prior to this\n   specification,\
    \ and unfortunately, its recommendation to include\n   location objects underneath\
    \ <tuple> runs contrary to the\n   recommendations here.  As such, implementations\
    \ based on this\n   specification SHOULD include <geopriv> location objects as\
    \ part of\n   person and/or device components of the document, but SHOULD be\n\
    \   prepared to receive presence documents with that object as a child to\n  \
    \ <tuple>.  A <geopriv> location object would be included in a person\n   component\
    \ when the document means to convey the location of the user,\n   and within a\
    \ device component when it means to convey the location of\n   the device.\n"
- title: 5.  Encoding
  contents:
  - "5.  Encoding\n   Information represented according to the data model described\
    \ above\n   needs to be mapped into an on-the-wire format for transport and\n\
    \   storage.  The Presence Information Data Format [1] is used for\n   representation\
    \ of presence data.\n   The <presence> element contains the presence information\
    \ for the\n   presentity.  The \"entity\" attribute of this element contains the\n\
    \   presentity URI.\n   The existing <tuple> element in the PIDF document is used\
    \ to\n   represent the service.  This is consistent with the original intent\n\
    \   of RFC 2778 and RFC 3863, and achieves backward compatibility with\n   implementations\
    \ developed before the model described here was\n   complete.  The <contact> element\
    \ in the <tuple> element is used to\n   encode the service URI.  New presence\
    \ attributes, whether they\n   represent dynamic status or static characteristics,\
    \ appear directly\n   as children of <tuple>.  However, attributes defined prior\
    \ to\n   publication of this specification that were defined as children of\n\
    \   <status> (such as <basic>) remain as children of <status>, for\n   purposes\
    \ of backward compatibility.  Consequently, a presence\n   attribute describing\
    \ a service could appear as either a child of\n   <status> or directly as a child\
    \ of <tuple>, but never both.\n   The \"id\" attribute of the <tuple> element\
    \ conveys the service\n   occurrence.  Each <tuple> element with the same <contact>\
    \ URI\n   represents a different occurrence of a particular service.\n   This\
    \ specification introduces the <person> element, which can appear\n   as a child\
    \ to <presence>.  There can be zero or more occurrences of\n   this element per\
    \ document.  Each one has a mandatory \"id\" attribute,\n   which contains the\
    \ occurrence identifier for the person.  Each\n   <person> element contains any\
    \ number of elements that indicate status\n   and characteristic information.\
    \  This is followed by zero or more\n   optional <note> elements and an optional\
    \ <timestamp>.  Multiple\n   <note> elements would appear to convey the same note\
    \ in multiple\n   languages.\n   RFC 3863 defines a <note> element, zero or more\
    \ of which can be\n   present as a child to <presence>.  As it relates to the\
    \ model defined\n   here, these note elements, if present in a document, apply\
    \ to all\n   person occurrences that do not have any of their own <note> elements.\n\
    \   In other words, if a <person> element has one or more <note>\n   elements,\
    \ those are the <note> elements for that <person> element.\n   If a <person> element\
    \ does not have any of its own <note> elements,\n   the <note> elements that are\
    \ the direct children of <presence> are\n   the <note> elements for that <person>.\
    \  If there are no <note>\n   elements underneath the <person> element, and there\
    \ are no <note>\n   elements that are a direct child of <presence>, then that\
    \ <person>\n   element has no <note> elements.\n   This specification also introduces\
    \ the <device> element, which can\n   appear as a child to <presence>.  There\
    \ can be zero or more\n   occurrences of this element per document.  The <device>\
    \ element can\n   appear either before or after the <person> element; there are\
    \ no\n   constraints on order.  Each <device> element has a mandatory \"id\"\n\
    \   attribute, which contains the occurrence identifier for the device.\n   Like\
    \ <person>, <device> contains any number of elements that indicate\n   status\
    \ and characteristic information.  This is followed by\n   <deviceID>, which contains\
    \ the URN for the device ID for this device.\n   This is followed by zero or more\
    \ optional <note> elements and an\n   optional <timestamp>.  Multiple <note> elements\
    \ would appear to\n   convey the same note in multiple languages.\n   A client\
    \ that receives a PIDF document containing the <device> and\n   <person> elements,\
    \ but does not understand them (because it doesn't\n   implement this specification),\
    \ will ignore them.  Furthermore, since\n   the semantics of service as defined\
    \ here are aligned with the meaning\n   of a tuple as defined in RFC 2778 and\
    \ RFC 3863, documents\n   incorporating the concepts defined in this model are\
    \ compliant with\n   older implementations.\n   It's important to note that the\
    \ mapping of the presence data model\n   into a PIDF document is merely an exercise\
    \ in syntax.\n   Presence documents created according to this model MUST be valid,\n\
    \   with the following exception.  A compositor is permitted to create a\n   presence\
    \ document that it cannot fully validate but that otherwise\n   validates when\
    \ processed according to the lax processing rules\n   allowed by the schema of\
    \ the compositor.  However, it is not expected\n   that entities receiving these\
    \ documents would perform schema\n   validation; rather, they would merely access\
    \ the information from the\n   document in the places they were expecting it to\
    \ be.  Implementations\n   SHOULD be prepared to receive documents that are not\
    \ valid, and\n   extract whatever information from them that they can parse.\n"
- title: 5.1.  XML Schemas
  contents:
  - "5.1.  XML Schemas\n   The XML schemas are broken into a common schema, called\
    \ common-\n   schema.xsd, which contains common type definitions, and the rest\
    \ of\n   the data model, data-model.xsd.\n"
- title: 5.1.1.  Common Schema
  contents:
  - "5.1.1.  Common Schema\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema\
    \ xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    elementFormDefault=\"qualified\"\
    \ attributeFormDefault=\"unqualified\">\n    <xs:import namespace=\"http://www.w3.org/XML/1998/namespace\"\
    \n     schemaLocation=\"http://www.w3.org/2001/xml.xsd\"/>\n    <xs:simpleType\
    \ name=\"Timestamp_t\">\n     <xs:annotation>\n      <xs:documentation>Timestamp\
    \ type</xs:documentation>\n     </xs:annotation>\n     <xs:restriction base=\"\
    xs:dateTime\"/>\n    </xs:simpleType>\n    <xs:simpleType name=\"deviceID_t\"\
    >\n     <xs:annotation>\n      <xs:documentation>Device ID, a URN</xs:documentation>\n\
    \     </xs:annotation>\n     <xs:restriction base=\"xs:anyURI\"/>\n    </xs:simpleType>\n\
    \    <xs:complexType name=\"Note_t\">\n     <xs:annotation>\n      <xs:documentation>Note\
    \ type</xs:documentation>\n     </xs:annotation>\n     <xs:simpleContent>\n  \
    \    <xs:extension base=\"xs:string\">\n       <xs:attribute ref=\"xml:lang\"\
    />\n      </xs:extension>\n     </xs:simpleContent>\n    </xs:complexType>\n \
    \   <xs:attributeGroup name=\"fromUntil\">\n     <xs:attribute name=\"from\" type=\"\
    xs:dateTime\"/>\n     <xs:attribute name=\"until\" type=\"xs:dateTime\"/>\n  \
    \  </xs:attributeGroup>\n    <xs:complexType name=\"empty\"/>\n   </xs:schema>\n"
- title: 5.1.2.  Data Model
  contents:
  - "5.1.2.  Data Model\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema\
    \ targetNamespace=\"urn:ietf:params:xml:ns:pidf:data-model\"\n    xmlns:xs=\"\
    http://www.w3.org/2001/XMLSchema\"\n    xmlns=\"urn:ietf:params:xml:ns:pidf:data-model\"\
    \n    elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\">\n\
    \    <xs:include schemaLocation=\"common-schema.xsd\"/>\n    <xs:element name=\"\
    deviceID\" type=\"deviceID_t\">\n     <xs:annotation>\n      <xs:documentation>Device\
    \ ID, a URN</xs:documentation>\n     </xs:annotation>\n    </xs:element>\n   \
    \ <xs:element name=\"device\">\n     <xs:annotation>\n      <xs:documentation>Contains\
    \ information about the\n       device</xs:documentation>\n     </xs:annotation>\n\
    \     <xs:complexType>\n      <xs:sequence>\n       <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\
    \       <xs:element ref=\"deviceID\"/>\n       <xs:element name=\"note\" type=\"\
    Note_t\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"/>\n       <xs:element\
    \ name=\"timestamp\" type=\"Timestamp_t\" minOccurs=\"0\"/>\n      </xs:sequence>\n\
    \      <xs:attribute name=\"id\" type=\"xs:ID\" use=\"required\"/>\n     </xs:complexType>\n\
    \    </xs:element>\n    <xs:element name=\"person\">\n     <xs:annotation>\n \
    \     <xs:documentation>Contains information about the human\n       user</xs:documentation>\n\
    \     </xs:annotation>\n     <xs:complexType>\n      <xs:sequence>\n       <xs:any\
    \ namespace=\"##other\" processContents=\"lax\"\n        minOccurs=\"0\" maxOccurs=\"\
    unbounded\">\n        <xs:annotation>\n         <xs:documentation>Characteristic\
    \ and status\n          information</xs:documentation>\n        </xs:annotation>\n\
    \       </xs:any>\n       <xs:element name=\"note\" type=\"Note_t\" minOccurs=\"\
    0\"\n        maxOccurs=\"unbounded\"/>\n       <xs:element name=\"timestamp\"\
    \ type=\"Timestamp_t\" minOccurs=\"0\"/>\n      </xs:sequence>\n      <xs:attribute\
    \ name=\"id\" type=\"xs:ID\" use=\"required\"/>\n     </xs:complexType>\n    </xs:element>\n\
    \   </xs:schema>\n"
- title: 6.  Extending the Presence Model
  contents:
  - "6.  Extending the Presence Model\n   When new presence attributes are added,\
    \ any such extension has to\n   consider the following questions:\n   1.  Is the\
    \ new attribute applicable to person, service, or device\n       data components?\
    \  If it is applicable to more than one, what is\n       its meaning in each context?\
    \  An extension should strive to have\n       each attribute concisely defined\
    \ for each area of applicability,\n       so that a source can clearly determine\
    \ to which type of data\n       component it should be applied.\n   2.  Does it\
    \ belong in a new namespace, or an existing one?\n       Generally, new presence\
    \ attributes defined within the same\n       specification SHOULD belong to the\
    \ same namespace.  Presence\n       attributes defined in separate specifications,\
    \ but produced in a\n       coordinated way by a centralized administration, MAY\
    \ be placed in\n       the same namespace.  Doing so, however, requires the centralized\n\
    \       administration to ensure that there are no collisions of element\n   \
    \    names across those specifications.  Furthermore, if a new\n       extension\
    \ has elements meant to be placed as the children of\n       another element at\
    \ a point of extensibility defined by <any\n       namespace=\"##other\">, the\
    \ new extension MUST use a different\n       namespace than that of its parent\
    \ elements.\n   3.  Does the extension itself require extensibility?  If so, points\n\
    \       of extension MUST be defined in the schema, and SHOULD be done\n     \
    \  using the <any namespace=\"##other\"> construct.\n"
- title: 7.  Example Presence Document
  contents:
  - "7.  Example Presence Document\n   In this section, we give an example of a physical\
    \ system, present the\n   model of that system using the concepts described here,\
    \ and then show\n   the resulting presence document.  The example makes use of\
    \ presence\n   attributes defined in [23] and [24].\n"
- title: 7.1.  Basic IM Client
  contents:
  - "7.1.  Basic IM Client\n   In this scenario, a provider is offering a service\
    \ very similar to\n   the instant messaging services offered today by the public\
    \ providers\n   like AOL, Yahoo!, and MSN.  In this service, each user has a \"\
    screen\n   name\" that identifies the user in the service.  A single client,\n\
    \   generally a PC application, connects to the service at a time.  When\n   the\
    \ client connects, this fact is made available to other watchers of\n   that user\
    \ in the system.  The user has the ability to set a textual\n   note that describes\
    \ what they are doing, and this note is seen by the\n   watchers in the system.\
    \  The user can set one of several status\n   messages (busy, in a meeting, etc.),\
    \ which are pre-defined notes that\n   the system understands.  If a user does\
    \ not type anything on their\n   keyboard for some time, the user's status changes\
    \ to idle on the\n   screens of the various watchers of the system.  The system\
    \ also\n   indicates the amount of time that the user has been idle.\n   Whenever\
    \ a user is connected to the system, they are capable of\n   receiving instant\
    \ messages.  A user can set their status to\n   \"invisible\", which means that\
    \ they appear as offline to other users.\n   However, if an IM is sent to them,\
    \ it will still be delivered.\n   This system is modeled by representing each\
    \ presentity in the system\n   with three data components: a person component,\
    \ a service component,\n   and a device component.  The person component describes\
    \ the state of\n   the user, including the note and the pre-defined status messages.\n\
    \   These represent information about the human user, so they are\n   included\
    \ in the person component.  The service tuple represents the\n   IM service. \
    \ No characteristics are included.  The service URI\n   published by the client\
    \ is set to the client's Address of Record\n   (AOR).  The device component is\
    \ used to model the PC.  The device\n   component includes the <user-input> element\
    \ [23], since the idleness\n   refers to usage of the device, not the service.\n\
    \   The document published by the client would look like this:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\
    \n    xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\"\n    xmlns:rp=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    \n    xmlns:caps=\"urn:ietf:params:xml:ns:pidf:caps\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <tuple id=\"sg89ae\">\n     <status>\n      <basic>open</basic>\n     </status>\n\
    \     <dm:deviceID>mac:8asd7d7d70</dm:deviceID>\n     <caps:servcaps>\n      <caps:extensions>\n\
    \       <caps:supported>\n        <caps:pref/>\n       </caps:supported>\n   \
    \   </caps:extensions>\n      <caps:methods>\n       <caps:supported>\n      \
    \  <caps:MESSAGE/>\n        <caps:OPTIONS/>\n       </caps:supported>\n      </caps:methods>\n\
    \     </caps:servcaps>\n     <contact>sip:someone@example.com</contact>\n    </tuple>\n\
    \    <dm:person id=\"p1\">\n     <rp:activities>\n      <rp:on-the-phone/>\n \
    \    </rp:activities>\n    </dm:person>\n    <dm:device id=\"pc122\">\n     <rp:user-input>idle</rp:user-input>\n\
    \     <dm:deviceID>mac:8asd7d7d70</dm:deviceID>\n    </dm:device>\n   </presence>\n\
    \   It is worth commenting further on the value of having a separate\n   device\
    \ element just to convey the idle indicator.  The idle\n   indication of interest\
    \ is really an indicator that the device is\n   idle.  By making that explicit,\
    \ the idle indicator can be used by the\n   presence server to affect the state\
    \ of other services running on the\n   same device.  For example, let's say there\
    \ is a VoIP application\n   running on the same device.  This application reports\
    \ its presence\n   state separately, but indicates that it runs on the same device.\n\
    \   Since it has indicated that it runs on the same device, the presence\n   server\
    \ can use the status of the service to further refine the idle\n   indicator of\
    \ the device.  Specifically, if the user is using its VoIP\n   application, the\
    \ presence server knows that the device is in use,\n   even if the IM application\
    \ reports that the device is idle.\n   Typically, idleness is determined by lack\
    \ of keyboard or mouse input,\n   neither of which might be used during a VoIP\
    \ call.\n   In a more simplistic case, reporting the idle indicator as part of\n\
    \   the device status allows that indicator to be used for other services\n  \
    \ on the same device.  Taking, again, the example of the VoIP\n   application\
    \ on the same device, if the VoIP application does not\n   report any device information,\
    \ and a watcher is not provided\n   information on the IM service, the presence\
    \ document sent to the\n   watcher can include the device status.  Because of\
    \ the usage of the\n   device IDs and the device information, the presence server\
    \ can\n   correlate the device status as reported by the IM application with\n\
    \   the VoIP service, and use them together.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The presence information described by the model\
    \ defined here is very\n   sensitive.  It is for this reason that privacy filtering\
    \ plays a key\n   role in the processing of presence data.  Privacy filtering\
    \ is the\n   act of applying permissions to a presence document for the purposes\n\
    \   of removing information that a watcher is not authorized to see.  In\n   more\
    \ general terms, privacy filtering is a form of authorization.\n   Privacy filtering\
    \ can also ensure that a watcher cannot see any\n   presence data for a presentity,\
    \ and indeed, it can even ensure that\n   the presentity doesn't know that it\
    \ is being blocked.  The SIP\n   presence specifications (RFC 3856 [21]) require\
    \ that such\n   authorization processing be performed before divulging presence\n\
    \   information.  Specifications have also been defined for conveying\n   authorization\
    \ policies to presence servers [26].\n   Integrity of presence information is\
    \ also critical.  Modification of\n   presence data by an attacker can lead to\
    \ diverted communications, for\n   example.  Protocols used to transport presence\
    \ data, such as SIP for\n   presence, are used to provide necessary integrity\
    \ functions.\n"
- title: 9.  Internationalization Considerations
  contents:
  - "9.  Internationalization Considerations\n   This specification defines a data\
    \ model that contains mostly tokens\n   that are meant for consumption by programs,\
    \ not directly by humans.\n   Programs are expected to translate those tokens\
    \ into language-\n   appropriate text strings according to the preferences of\
    \ the watcher.\n   However, this specification defines a <note> element that can\
    \ contain\n   free text.  This element and other ones defined by extensions to\
    \ PIDF\n   that can contain free text SHOULD be labeled with the 'xml:lang'\n\
    \   attribute to indicate their language and script.  This specification\n   allows\
    \ multiple occurrences of the <note> element so that the\n   presentity can convey\
    \ the note in multiple scripts and languages.  If\n   no 'xml:lang' attribute\
    \ is provided, the default value is \"i-default\"\n   [8].\n   Since the presence\
    \ model is represented in XML, it provides native\n   support for encoding information\
    \ using the Unicode character set and\n   its more compact representations including\
    \ UTF-8.  Conformant XML\n   processors recognize both UTF-8 and UTF-16.  Though\
    \ XML includes\n   provisions to identify and use other character encodings through\
    \ use\n   of an \"encoding\" attribute in an <?xml?> declaration, use of UTF-8\
    \ is\n   RECOMMENDED in environments where parser encoding support\n   incompatibility\
    \ exists.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   There are several IANA considerations associated\
    \ with this\n   specification.\n"
- title: 10.1.  URN Sub-Namespace Registration
  contents:
  - "10.1.  URN Sub-Namespace Registration\n   This section registers a new XML namespace,\
    \ per the guidelines in [4]\n      URI: The URI for this namespace is\n      urn:ietf:params:xml:ns:pidf:data-model.\n\
    \      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),\n  \
    \    Jonathan Rosenberg (jdrosen@jdrosen.net).\n      XML:\n         BEGIN\n \
    \        <?xml version=\"1.0\"?>\n         <!DOCTYPE html PUBLIC \"-//W3C//DTD\
    \ XHTML Basic 1.0//EN\"\n           \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n         <html xmlns=\"http://www.w3.org/1999/xhtml\">\n         <head>\n \
    \          <meta http-equiv=\"content-type\"\n              content=\"text/html;charset=iso-8859-1\"\
    />\n           <title>A Data Model for Presence</title>\n         </head>\n  \
    \       <body>\n           <h1>Namespace for Presence Data Model</h1>\n      \
    \     <h2>urn:ietf:params:xml:ns:pidf:data-model</h2>\n           <p>See <a href=\"\
    http://www.rfc-editor.org/rfc/rfc4479.txt\">\n               RFC4479</a>.</p>\n\
    \         </body>\n         </html>\n         END\n"
- title: 10.2.  XML Schema Registrations
  contents:
  - "10.2.  XML Schema Registrations\n   This section registers two XML schemas per\
    \ the procedures in [4].\n"
- title: 10.2.1.  Common Schema
  contents:
  - "10.2.1.  Common Schema\n   URI: urn:ietf:params:xml:schema:pidf:common-schema.\n\
    \   Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),\n     \
    \ Jonathan Rosenberg (jdrosen@jdrosen.net).\n   The XML for this schema can be\
    \ found as the sole content of\n      Section 5.1.1.\n"
- title: 10.2.2.  Data Model
  contents:
  - "10.2.2.  Data Model\n   URI: urn:ietf:params:xml:schema:pidf:data-model.\n  \
    \ Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),\n      Jonathan\
    \ Rosenberg (jdrosen@jdrosen.net).\n   The XML for this schema can be found as\
    \ the sole content of\n      Section 5.1.2.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   This document is really a distillation of many ideas\
    \ discussed over a\n   long period of time.  These ideas were contributed by many\n\
    \   participants in the SIMPLE working group.  Aki Niemi, Paul Kyzivat,\n   Cullen\
    \ Jennings, Ben Campbell, Robert Sparks, Dean Willis, Adam\n   Roach, Hisham Khartabil,\
    \ and Jon Peterson contributed many of the\n   concepts that are described here.\
    \  Example presence documents came\n   from Robert Sparks' example presence documents\
    \ specification, and\n   ideas on defining services through characteristics, rather\
    \ than\n   enumeration, came from Adam Roach's service features document.  A\n\
    \   special thanks to Steve Donovan for discussions on the topics\n   discussed\
    \ here, and to Elwyn Davies for his final review of the\n   document.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [1]  Sugano, H., Fujimoto, S., Klyne, G., Bateman,\
    \ A., Carr, W., and\n        J. Peterson, \"Presence Information Data Format (PIDF)\"\
    , RFC\n        3863, August 2004.\n   [2]  Rosenberg, J., Schulzrinne, H., and\
    \ P. Kyzivat, \"Caller\n        Preferences for the Session Initiation Protocol\
    \ (SIP)\", RFC\n        3841, August 2004.\n   [3]  Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [4]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688, January\n\
    \        2004.\n   [5]  Yergeau, F., Paoli, J., Sperberg-McQueen, C., Bray, T.,\
    \ and E.\n        Maler, \"Extensible Markup Language (XML) 1.0 (Third Edition)\"\
    ,\n        W3C REC REC-xml-20040204, February 2004.\n   [6]  Maloney, M., Beech,\
    \ D., Thompson, H., and N. Mendelsohn, \"XML\n        Schema Part 1: Structures\
    \ Second Edition\", W3C REC REC-\n        xmlschema-1-20041028, October 2004.\n\
    \   [7]  Malhotra, A. and P. Biron, \"XML Schema Part 2: Datatypes Second\n  \
    \      Edition\", W3C REC REC-xmlschema-2-20041028, October 2004.\n   [8]  Alvestrand,\
    \ H., \"IETF Policy on Character Sets and Languages\",\n        BCP 18, RFC 2277,\
    \ January 1998.\n   [9]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [10]  Day, M., Rosenberg, J., and H. Sugano,\
    \ \"A Model for Presence\n         and Instant Messaging\", RFC 2778, February\
    \ 2000.\n   [11]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n\
    \         Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n   \
    \      Session Initiation Protocol\", RFC 3261, June 2002.\n   [12]  Peterson,\
    \ J., \"Common Profile for Presence (CPP)\", RFC 3859,\n         August 2004.\n\
    \   [13]  Saint-Andre, P., \"Internationalized Resource Identifiers (IRIs)\n \
    \        and Uniform Resource Identifiers (URIs) for the Extensible\n        \
    \ Messaging and Presence Protocol (XMPP)\", Work in Progress,\n         December\
    \ 2005.\n   [14]  Wilde, E. and A. Vaha-Sipila, \"URI Scheme for GSM Short Message\n\
    \         Service\", Work in Progress, February 2006.\n   [15]  Schulzrinne, H.,\
    \ \"The tel URI for Telephone Numbers\", RFC 3966,\n         December 2004.\n\
    \   [16]  Klyne, G., \"A Syntax for Describing Media Feature Sets\", RFC\n   \
    \      2533, March 1999.\n   [17]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\
    \ \"Indicating\n         User Agent Capabilities in the Session Initiation Protocol\n\
    \         (SIP)\", RFC 3840, August 2004.\n   [18]  Faltstrom, P. and M. Mealling,\
    \ \"The E.164 to Uniform Resource\n         Identifiers (URI) Dynamic Delegation\
    \ Discovery System (DDDS)\n         Application (ENUM)\", RFC 3761, April 2004.\n\
    \   [19]  Rosenberg, J., \"The Session Initiation Protocol (SIP) and\n       \
    \  Spam\", Work in Progress, March 2006.\n   [20]  Leach, P., Mealling, M., and\
    \ R. Salz, \"A Universally Unique\n         IDentifier (UUID) URN Namespace\"\
    , RFC 4122, July 2005.\n   [21]  Rosenberg, J., \"A Presence Event Package for\
    \ the Session\n         Initiation Protocol (SIP)\", RFC 3856, August 2004.\n\
    \   [22]  Rosenberg, J., \"Obtaining and Using Globally Routable User\n      \
    \   Agent (UA) URIs (GRUU) in the Session Initiation Protocol\n         (SIP)\"\
    , Work in Progress, October 2005.\n   [23]  Schulzrinne, H., \"RPID: Rich Presence\
    \ Extensions to the\n         Presence Information Data Format (PIDF)\", RFC 4480,\
    \ July 2006.\n   [24]  Lonnfors, M. and K. Kiss, \"Session Initiation Protocol\
    \ (SIP)\n         User Agent Capability Extension to Presence Information Data\n\
    \         Format (PIDF)\", Work in Progress, January 2006.\n   [25]  Peterson,\
    \ J., \"A Presence-based GEOPRIV Location Object\n         Format\", RFC 4119,\
    \ December 2005.\n   [26]  Rosenberg, J., \"Presence Authorization Rules\", Work\
    \ in\n         Progress, March 2006.\n   [27]  Jennings C. and R. Mahy, \"Managing\
    \ Client Initiated Connections\n         in the Session Initiation Protocol (SIP)\"\
    , Work in Progress,\n         March 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jonathan Rosenberg\n   Cisco Systems\n   600 Lanidex Plaza\n\
    \   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@cisco.com\n\
    \   URI:   http://www.jdrosen.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
