- title: __initial_text__
  contents:
  - '               PPP LZS-DCP Compression Protocol (LZS-DCP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.\n \
    \  The PPP Compression Control Protocol [2] provides a method to\n   negotiate\
    \ and utilize compression protocols over PPP encapsulated\n   links.\n   This\
    \ document describes the use of the Stac LZS data compression\n   algorithm for\
    \ compressing PPP encapsulated packets, using a DCP\n   header [6].  This protocol\
    \ is an enhanced version of the non-DCP\n   (Option 17) PPP Stac LZS compression\
    \ protocol [5], and will be\n   referred to as the LZS-DCP Compression Protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.     Introduction ..........................................\
    \    2\n        1.1       Licensing .......................................  \
    \  3\n        1.2       Specification of Requirements ...................    3\n\
    \        1.3       Terminology .....................................    3\n  \
    \   2.     LZS-DCP Packets .......................................    4\n    \
    \    2.1       Example LZS-DCP Packets .........................    5\n      \
    \  2.2       Padding .........................................    6\n        2.3\
    \       Reliabliity and Squencing .......................    6\n        2.4  \
    \     Data Expansion ..................................    6\n        2.5    \
    \   Packet Format ...................................    7\n           2.5.1 \
    \ PPP Protocol ....................................    7\n           2.5.2  DCP-Header\
    \ ......................................    8\n           2.5.3  History Number\
    \ ..................................    9\n           2.5.4  Sequence Number .................................\
    \    9\n           2.5.5  Data ............................................  \
    \ 10\n           2.5.6  Longitudinal Check Byte .........................   10\n\
    \           2.5.7  Compressed Data .................................   11\n  \
    \   3.     Sending Compressed Datagrams     .....................    11\n    \
    \    3.1       Transmitter Process .............................   11\n      \
    \  3.2       Receiver Process ................................   12\n        3.3\
    \       History Maintenance .............................   13\n        3.4  \
    \     Anti-Expansion Mechanism ........................   14\n        3.5    \
    \   History Resynchronization Mechanism .............   14\n     4.     Configuration\
    \ Option Format ...........................   15\n     SECURITY CONSIDERATIONS\
    \ ......................................   16\n     REFERENCES ...................................................\
    \   17\n     CHAIR'S ADDRESS ..............................................  \
    \ 17\n     AUTHORS' ADDRESSES ...........................................   18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Starting with a sliding window compression history, similar\
    \ to LZ1\n   [3], Stac Electronics developed a compression algorithm identified\
    \ as\n   Stac LZS.  A PPP Compression Protocol for this compression algorithm\n\
    \   was developed and published [5].  That protocol was taken as a basis\n   for\
    \ data compression work done in TIA for DSU/CSUs.  As a part of\n   that standardization\
    \ process, the concept of a portable Data\n   Compression Protocol (DCP) was introduced\
    \ [6].  The resulting\n   (pending) TIA/EIA-655 standard uses this LZS-DCP protocol,\
    \ which\n   ncorporates DCP into a PPP compression protocol for Stac LZS.  A very\n\
    \   similar protocol is currently out for ballot in the Frame Relay\n   Forum.\
    \  (It is identical except for the size of the history number\n   field.)\n  \
    \ This publication of the LZS-DCP compression protocol is in the\n   interest\
    \ of providing a common compression protocol for Stac-LZS, and\n   to provide\
    \ features that are not available with the LZS compression\n   protocol [5]. \
    \ Some of the differences between the LZS-DCP and LZS\n   (compression type 17)\
    \ protocols are as follows:\n        1) LZS-DCP provides an option which allows\
    \ packets containing\n           uncompressible data to be transferred without\
    \ requiring the\n           compression history to be cleared, potentially allowing\
    \ a\n           higher compression ratio.  A bit is included in the DCP\n    \
    \       header to indicate whether the packet contains compressed or\n       \
    \    uncompressed data.\n        2) LZS-DCP uses reset request and acknowledgment\
    \ bits in the DCP\n           header that is included on each packet rather than\
    \ using\n           CCP's reset request and acknowledge packets, which may result\n\
    \           in fewer discarded data packets during the REQ/ACK handshake.\n  \
    \      3) LZS-DCP allows simultaneous use of both sequence numbers and\n     \
    \      the LCB for compression error detection.\n   The Stac LZS compression algorithm\
    \ supports both single and multiple\n   compression histories.  A single compression\
    \ history will require the\n   minimum amount of memory to implement, but may\
    \ not provide as much\n   compression as a multiple history implementation.\n\
    \   Often, many streams of information are interleaved over the same\n   physical\
    \ link.  Each virtual connection will transmit data that is\n   independent of\
    \ other virtual connections.  Using multiple compression\n   histories can improve\
    \ the compression ratio of a communication link\n   by associating separate compression\
    \ histories with separate virtual\n   links of communication.\n"
- title: 1.1.  Licensing
  contents:
  - "1.1.  Licensing\n   Source and object licenses are available on a non-discriminatory\n\
    \   basis.  Hardware implementations are also available.  Contact Stac\n   Electronics\
    \ (hardware.sales@stac.com) for further information.\n"
- title: 1.2.  Specification of Requirements
  contents:
  - "1.2.  Specification of Requirements\n   In this document, several words are used\
    \ to signify the requirements\n   of the specification.  These words are often\
    \ capitalized.\n   MUST      This word, or the adjective \"required\", means that\
    \ the\n             definition is an absolute requirement of the specification.\n\
    \   MUST NOT  This phrase means that the definition is an absolute\n         \
    \    prohibition of the specification.\n   SHOULD    This word, or the adjective\
    \ \"recommended\", means that there\n             may exist valid reasons in particular\
    \ circumstances to\n             ignore this item, but the full implications MUST\
    \ be\n             understood and carefully weighed before choosing a\n      \
    \       different course.\n   MAY       This word, or the adjective \"optional\"\
    , means that this\n             item is one of an allowed set of alternatives.\
    \  An\n             implementation which does not include this option MUST be\n\
    \             prepared to interoperate with another implementation which\n   \
    \          does include the option.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This document frequently uses the following terms:\n  \
    \ datagram  The unit of transmission in the network layer (such as IP).\n    \
    \         A datagram may be encapsulated in one or more packets\n            \
    \ passed to the data link layer.\n   frame     The unit of transmission at the\
    \ data link layer.  A frame\n             may include a header and/or a trailer,\
    \ along with some\n             number of units of data.\n   packet    The basic\
    \ unit of encapsulation, which is passed across the\n             interface between\
    \ the network layer and the data link\n             layer.  A packet is usually\
    \ mapped to a frame; the\n             exceptions are when data link layer fragmentation\
    \ is being\n             performed, or when multiple packets are incorporated\
    \ into a\n             single frame.\n   peer      The other end of the point-to-point\
    \ link.\n   silently discard\n             This means the implementation discards\
    \ the packet without\n             further processing.  The implementation SHOULD\
    \ provide the\n             capability of logging the error, including the contents\
    \ of\n             the silently discarded packet, and SHOULD record the event\n\
    \             in a statistics counter.\n"
- title: 2.  LZS-DCP Packets
  contents:
  - "2.  LZS-DCP Packets\n   Before any LZS-DCP packets are communicated, PPP MUST\
    \ reach the\n   Network-Layer Protocol phase, and the CCP Control Protocol MUST\
    \ reach\n   the Opened state.\n   Exactly one LZS-DCP datagram is encapsulated\
    \ in the PPP Information\n   field, where the PPP Protocol field indicates type\
    \ hex 00FD\n   (compressed datagram) or type hex 00FB (Individual link compressed\n\
    \   datagram).  Type hex 00FD is used when compression is negotiated over\n  \
    \ a single physical link or when compression is negotiated over a\n   single bundle\
    \ consisting of multiple physical links.  Type hex 00FB\n   is used when compression\
    \ is negotiated separately over individual\n   physical links to the same destination.\
    \  For more information, please\n   refer to PPP Compression Control Protocol.\n\
    \   The maximum length of the LZS-DCP datagram transmitted over a PPP\n   link\
    \ is the same as the maximum length of the Information field of a\n   PPP encapsulated\
    \ packet.\n   Prior to compression, the uncompressed data begins with the PPP\n\
    \   Protocol ID Field.  Protocol-Field-Compression MAY be used on this\n   value,\
    \ if has been successfully negotiated for the link.\n   The PPP Protocol ID Field\
    \ is followed by the original Information\n   field. The length of the uncompressed\
    \ data field is limited only by\n   the allowed size of the compressed data field\
    \ and the higher protocol\n   layers.\n   PPP Link Control Protocol packets MUST\
    \ NOT be sent within LZS-DCP\n   packets.  PPP Network Control Protocol packets\
    \ MUST NOT be sent\n   within LZS-DCP packets.\n"
- title: 2.1.  Example LZS-DCP packets (shown using PPP in HDLC-like framing,
  contents:
  - "2.1.  Example LZS-DCP packets (shown using PPP in HDLC-like framing,\n      using\
    \ Address-and-Control-Field-Compression and Protocol-Field-\n      Compression.\
    \ - RFC 1662 )\n   Compressed Packet:\n        PPP |                         \
    \               | PPP\n        PID | HDR   SEQ           DATA           LCB |\
    \ FCS\n      +-----+-----+-----+---................---+-----+-----+\n      | F\
    \ D | C 0 | n n |   Compressed Data    | y y | z z |\n      +-----+-----+-----+---................---+-----+-----+\n\
    \                        /                      \\\n                       / \
    \     Compression       \\\n                      /      Transformation      \\\
    \n                     /                            \\\n                    /PPP\
    \                           \\\n                   / PID   PPP Information Field\
    \    \\\n                  +-----+----....................----+\n            \
    \      | x x | upper layer protocol data  |\n                  +-----+----....................----+\n\
    \   Uncompressed Packet\n        PPP |                                  | PPP\n\
    \        PID | HDR   SEQ           DATA         | FCS\n      +-----+-----+-----+---................---+-----+\n\
    \      | F D | 8 0 | n n |   Un-compressed Data | z z |\n      +-----+-----+-----+---................---+-----+\n\
    \                        /                      \\\n                       / \
    \                       \\\n                      /                          \\\
    \n                     /                            \\\n                    /PPP\
    \                           \\\n                   / PID   PPP Information Field\
    \    \\\n                  +-----+----....................----+\n            \
    \      | x x | upper layer protocol data  |\n                  +-----+----....................----+\n\
    \      where:  C0 and 80 are representative LZS-DCP headers; nn, xx, yy,\n   \
    \           and zz are values determined by the packet's context.\n"
- title: 2.2.  Padding
  contents:
  - "2.2.  Padding\n      PPP padding is not allowed in a LZS-DCP packet.  However,\
    \ on\n      compressed packets, padding may be accomplished by extending the\n\
    \      data field with zeros following the last compressed data octet\n      (see\
    \ Section 2.1.1).  This is referred to as LZS Padding.  The\n      LCB, if present,\
    \ MUST be the octet preceding the frame CRC.\n"
- title: 2.3.  Reliability and Sequencing
  contents:
  - "2.3.  Reliability and Sequencing\n      When no Compression History is kept,\
    \ the algorithm does not depend\n      on a reliable link, and does not require\
    \ that packets be delivered\n      in sequence.  However, per packet compression\
    \ results in a lower\n      compression ratio than it could be on a stream.\n\
    \      Some reasons for clearing the history on a per packet basis\n      include:\n\
    \      -  The link has a high error rate.\n      -  The resources of the transmitter\
    \ or receiver limit the ability\n         to maintain a compression history between\
    \ packets.\n      When one or more compression Histories are negotiated, the packet\n\
    \      sequence MUST be preserved within specific History Numbers.  There\n  \
    \    is no sequence requirement between different History Numbers.\n      When\
    \ using one or more compression histories, the implementation\n      MUST rely\
    \ on either a lower layer reliable link protocol (RFC\n      1663), use a technique\
    \ to keep the compressor and decompressor\n      histories in synchronization,\
    \ or both.  The LZS-DCP protocol\n      provides the Request-Req and Request-Ack\
    \ bits in the DCP header\n      for this purpose.  Since this synchronization\
    \ is done on a per\n      history basis, the history number fields are required\
    \ to be the\n      same size in both directions of the link.  Any data contained\
    \ in\n      the packet is processed after the signaling bits are processed.\n\
    \      The transmitter MAY clear a Compression History at any time.\n      The\
    \ transmitter MUST clear a history after a receiving a Reset-\n      Request for\
    \ a given History Number.\n"
- title: 2.4.  Data Expansion
  contents:
  - "2.4.  Data Expansion\n      The maximum expansion of Stac LZS is 12.5%.\n   \
    \   A Maximum Receive Unit (MRU) MAY be negotiated that is 12.5%\n      larger\
    \ than the size of a normal packet.  Then, packets can always\n      be sent compressed\
    \ regardless of expansion.\n      The transmitter MAY send an uncompressed LZS-DCP\
    \ packet at any\n      time, although the typical use of uncompressed LZS-DCP\
    \ packets is\n      as an anti-expansion mechanism.\n      When the expansion\
    \ plus compression header exceeds the size of the\n      peer's MRU for the link,\
    \ the data MUST be sent as an uncompressed\n      LZS-DCP packet.\n      An uncompressed\
    \ LZS-DCP packet is transmitted according to the\n      format shown in Section\
    \ 2.1, with the C/U bit set to 0\n      (Uncompressed-Data).  If the Configuration\
    \ Option Field 'Process\n      Mode', is set to a value of 1 (Process-Uncompressed),\
    \ uncompressed\n      LZS-DCP packets are processed by both the compressor and\
    \ the\n      decompressor, updating the histories of each. If the Process Mode\n\
    \      Field is set to a value of 0 (None), and the compressor has\n      modified\
    \ its history before sending the uncompressed packet, the\n      compressor history\
    \ MUST be clear.\n"
- title: 2.5.  Packet Format
  contents:
  - "2.5.  Packet Format\n   A summary of the LZS-DCP packet format is shown below.\
    \  The fields\n   are transmitted from left to right.\n    0                 \
    \  1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          PPP Protocol\
    \         |   DCP-Header  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       (History Number)        |  (Seq Num)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     (LCB) \
    \    |\n   +-+-+-+-+-+-+-+-+\n"
- title: 2.5.1.  PPP Protocol
  contents:
  - "2.5.1.  PPP Protocol\n      The PPP Protocol field is described in the Point-to-Point\
    \ Protocol\n      Encapsulation [1].\n      When the LZS-DCP compression protocol\
    \ is successfully negotiated\n      by the PPP Compression Control Protocol [2],\
    \ the value is 00FD or\n      00FB hex.  This value MAY be compressed when Protocol-Field-\n\
    \      Compression is negotiated.\n"
- title: 2.5.2.  DCP-Header
  contents:
  - "2.5.2.  DCP-Header\n      The DCP-Header is nominally one octet in length, but\
    \ may be\n      extended through the use of the extension bit.\n      The format\
    \ of the DCP-Header is as follows:\n         0     1     2     3     4     5 \
    \    6     7\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n      |\
    \  E  | C/U | R-A | R-R | Res | Res | Res | C/D |\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      E - Extension Bit\n         The E bit is the extension bit.  If set to\
    \ 0, it indicates that\n         another octet of the DCP-Header is present. \
    \ Currently, this\n         bit is always set to 1, since the DCP-Header field\
    \ is only one\n         octet long.\n      C/U - Compressed/Uncompressed Bit\n\
    \         The C/U indicates whether the data field contains compressed or\n  \
    \       uncompressed data.  A value of 1 indicates compressed data\n         (often\
    \ referred to as a compressed packet), and a value of 0\n         indicates uncompressed\
    \ data (or an uncompressed packet).\n      R-A - Reset-Ack\n         The R-A bit\
    \ is used to inform the decompressing peer that\n         the history buffer specified\
    \ by the history number in the\n         packet was in the cleared state just\
    \ before the data contained\n         in the packet was processed by the compression\
    \ transformation\n         (see section 3., Sending Compressed Datagrams).  This\
    \ bit MUST\n         be set to a value of \"1\" to indicate a Reset-Ack, and to\n\
    \         acknowledge a receive failure (R-R) (see section 3., Sending\n     \
    \    Compressed Datagrams).  This bit is specific to the history\n         number\
    \ of the packet containing it.\n      R-R - Reset-Request\n         The R-R bit\
    \ is used to request that the compressing peer\n         clear the history buffer\
    \ specified by the history number in the\n         packet.  This bit MUST be set\
    \ to a value of \"1\" to indicate a\n         Reset-Request, and to respond to\
    \ a receive failure (R-R) (see\n         section 3., Sending Compressed Datagrams).\
    \  This bit is\n         specific to the history number of the packet containing\
    \ it.\n      Res - Reserved\n         These bits are reserved and MUST be set\
    \ to 0\n      C/D - Control/Data\n         This bit is used by DCP to provide\
    \ in-band negotiation in\n         applications where out-of-band negotiation\
    \ methods are not\n         provided (i.e. Frame Relay).  Since CCP provides an\
    \ out of band\n         negotiating mechanism, this feature is not used in this\n\
    \         application.  All packets MUST set this bit to a value of 0,\n     \
    \    which signifies that the packet is a data packet.  (Packets\n         containing\
    \ only Reset- Requests are classified as data\n         packets.)\n"
- title: 2.5.3.  History Number
  contents:
  - "2.5.3.  History Number\n      The number of the compression history which was\
    \ used, ranging from\n      1 to the negotiated value in the History Count field.\n\
    \      If the negotiated History Count is less than 2, this field is\n      removed.\
    \  If the negotiated History Count is 2 or more, but less\n      than 256, this\
    \ field is 1 octet.  If 256 or more histories are\n      negotiated, this field\
    \ is 2 octets, most significant octet first.\n      If multiple histories are\
    \ used in one direction on a link, the\n      history number field MUST be present\
    \ on all packets in both\n      directions, and sized according to the largest\
    \ number of histories\n      in either direction.\n      If multiple histories\
    \ are used, this field MUST be present in\n      uncompressed as well as compressed\
    \ packets.\n"
- title: 2.5.4.  Sequence Number
  contents:
  - "2.5.4.  Sequence Number\n      The sequence number field is one octet in length.\
    \  When the check\n      mode field is set to the \"Sequence Number\" or \"Sequence\
    \ Number +\n      LCB\" options, the sequence number field MUST be present in\
    \ all\n      data compression packets that contain a data field.\n      The value\
    \ of the sequence number field (the sequence number of the\n      packet) MUST\
    \ begin with \"1\" and increment modulo 256 on successive\n      packets that\
    \ contain data fields.  This number is relative to the\n      history number used.\n\
    \      On receipt of a packet with the R-A bit set to \"0\", if the\n      sequence\
    \ number of the packet is any number other than (N+1) mod\n      256, where N\
    \ is the sequence number of the last packet received\n      for the same history,\
    \ or an initial value of \"0\", a receive\n      failure for that history has\
    \ occurred.  The receive failure MUST\n      be handled according to the synchronization\
    \ procedure in section\n      3.5.\n      The sequence number MUST NOT be reset\
    \ by the transmitter when a\n      packet containing a Reset-Ack is sent. The\
    \ decompressor MUST\n      resynchronize its sequence number reference for the\
    \ indicated\n      history when a packet containing a Reset-Ack is received.\n"
- title: 2.5.5.  Data
  contents:
  - "2.5.5.  Data\n      The data field MUST contain a single datagram in either compressed\n\
    \      or uncompressed form, depending on the state of the C/U bit in the\n  \
    \    Header.  This length of this field is always be an integer number\n     \
    \ of octets.  This field is required in all packets that do not have\n      the\
    \ R-R bit set to \"1\".\n      If the C/U bit is set to \"0\", the data field\
    \ contains the\n      uncompressed form of the datagram.\n      If the C/U bit\
    \ is set to \"1\", the form of the data field is one\n      block of compressed\
    \ data as defined in 3.2 of X3.241-1994, with\n      the following exceptions:\
    \  1) the end marker may be followed with\n      additional octets containing\
    \ only zeros;  2) if the final octet in\n      the block of compressed data has\
    \ a value of \"0\", then it MAY be\n      removed from the data field.\n     \
    \ There is only one end marker per block of compressed data.\n"
- title: 2.5.6.  Longitudinal Check Byte
  contents:
  - "2.5.6.  Longitudinal Check Byte\n      The LCB field is one octet in length,\
    \ and if present MUST be the\n      last octet in the data compression packet.\
    \  When the check-mode\n      field is set to \"LCB\" or \"Sequence Number + LCB\"\
    , this field MUST\n      be present in all packets where the data field contains\
    \ compressed\n      data.  This field MUST NOT be present in data compression\
    \ packets\n      where the data field contains uncompressed data.  This field\n\
    \      contains the result of the LCB calculation, in accordance with the\n  \
    \    following paragraph.\n      The LCB octet is the Exclusive-OR of FF(hex)\
    \ and each octet of the\n      uncompressed datagram (prior to the compression\
    \ transformation).\n      On receipt, the receiver computes the Exclusive-OR of\
    \ FF(hex) and\n      each octet of the decompressed packet.  If this value does\
    \ not\n      match the received LCB, then a receive failure for that history\n\
    \      has occurred.  The receive failure is handled according to the\n      history\
    \ synchronization procedure in section 3.5.\n"
- title: 2.5.7.  Compressed Data
  contents:
  - "2.5.7.  Compressed Data\n   The Stac LZS compression algorithm is Defined in\
    \ ANSI X3.241-1994\n   [7]. The format of the compressed data is repeated here\
    \ for\n   informational purposes ONLY.\n   <Compressed Stream> := [<Compressed\
    \ String>] <End Marker>\n   <Compressed String> := 0 <Raw Byte> | 1 <Compressed\
    \ Bytes>\n   <Raw Byte> := <b><b><b><b><b><b><b><b>          (8-bit byte)\n  \
    \ <Compressed Bytes> := <Offset> <Length>\n   <Offset> := 1 <b><b><b><b><b><b><b>\
    \ |           (7-bit offset)\n               0 <b><b><b><b><b><b><b><b><b><b><b>\
    \ (11-bit offset)\n   <End Marker> := 110000000\n   <b> := 1 | 0\n   <Length>\
    \ :=\n   00        = 2     1111 0110      = 14\n   01        = 3     1111 0111\
    \      = 15\n   10        = 4     1111 1000      = 16\n   1100      = 5     1111\
    \ 1001      = 17\n   1101      = 6     1111 1010      = 18\n   1110      = 7 \
    \    1111 1011      = 19\n   1111 0000 = 8     1111 1100      = 20\n   1111 0001\
    \ = 9     1111 1101      = 21\n   1111 0010 = 10    1111 1110      = 22\n   1111\
    \ 0011 = 11    1111 1111 0000 = 23\n   1111 0100 = 12    1111 1111 0001 = 24\n\
    \   1111 0101 = 13     ...\n"
- title: 3.  Sending Compressed Datagrams
  contents:
  - "3.  Sending Compressed Datagrams\n   The reliable and efficient transport of\
    \ datagrams on the data link\n   depends on the following processes.\n"
- title: 3.1.  Transmitter Process
  contents:
  - "3.1.  Transmitter Process\n      The compression operation results in either\
    \ compressed or\n      uncompressed data.  When a network datagram is received,\
    \ it is\n      assigned to a particular history buffer and processed according\
    \ to\n      ANSI X3.241-1994 to form compressed data or used as is to form\n \
    \     uncompressed data.  Prior to the compression operation, if a\n      Reset-Request\
    \ is outstanding for the history buffer to be used,\n      the buffer is cleared.\
    \  In performing the compression operation,\n      if the process mode field is\
    \ set to the value None (\"0\"), the\n      history MUST only be updated if the\
    \ result is compressed data.  If\n      process mode field is set to the value\
    \ Process-Uncompressed (\"1\"),\n      the history MUST be updated when either\
    \ compressed data or\n      uncompressed data is produced.  Uncompressed data\
    \ MAY be sent at\n      any time.  Uncompressed data MUST be sent if compression\
    \ causes\n      enough expansion to cause the data compression datagram size to\n\
    \      exceed the Information field's MRU.\n      If the Process Mode field is\
    \ set to the value None (\"0\") and the\n      compressor has modified the history\
    \ buffer before sending an\n      uncompressed datagram, the history buffer MUST\
    \ be cleared before\n      the next datagram is processed.\n      The output of\
    \ the compression operation is placed in the\n      information field of the datagram.\
    \  The C/U bit is set according\n      to whether the data field contains compressed\
    \ or uncompressed\n      data.  If the sequence number field is present according\
    \ the value\n      of the check mode field, the sequence number counter for the\n\
    \      applicable history number MUST be incremented and its value placed\n  \
    \    in the sequence number field.  If the data field contains\n      compressed\
    \ data, and Check Mode field is set accordingly, the LCB\n      field is present\
    \ and its value is computed as specified in section\n      2.2.6.\n      Upon\
    \ reception of a packet containing a Reset-Request, the\n      transmitting compressor\
    \ MUST be cleared to an initial state, which\n      includes clearing the history\
    \ buffer.  If the data field of the\n      packet containing the Reset-Request\
    \ contains data, it is delivered\n      to the local receiver as a normal data\
    \ packet.  In addition to the\n      reset of the compressor, a packet MUST be\
    \ transmitted with Reset-\n      Ack bit set to 1.  The data field of this packet\
    \ MUST be filled\n      with data.  If no data is ready for transmission, the\
    \ transmitter\n      MUST wait until data is ready before sending the Reset-Ack.\n\
    \      If the history buffer is in the clear state (the history buffer\n     \
    \ contains no data bytes) prior to performing the compression\n      operation,\
    \ the resulting compressed or uncompressed packet MUST be\n      sent with the\
    \ R-A bit set to \"1\".\n"
- title: 3.2.  Receiver Process
  contents:
  - "3.2.  Receiver Process\n      When a data compression datagram is received from\
    \ the peer, the\n      R-R and R-A bits MUST be checked.  If the R-R bit is set,\
    \ the\n      local compression engine MUST be signaled that a Reset-Request has\n\
    \      been received for the history specified by the history number\n      field.\
    \  If the R-A bit is set, any outstanding receive failure for\n      the specified\
    \ history MUST be cleared.  If no receive failure is\n      outstanding, and the\
    \ sequence number field is present, its value\n      checked. If a receive failure\
    \ has occurred, it MUST be handled\n      according to the history resynchronization\
    \ mechanism described\n      below, and the remainder of the datagram is discarded.\
    \  If no\n      receive failure is detected, the data is assigned to the indicated\n\
    \      decompression history buffer and processed according to process\n     \
    \ mode field and C/U bit.\n      If the C/U bit is set to \"1\", a single octet\
    \ containing the value\n      0x00 MUST be appended to the data field and the\
    \ resulting\n      compressed data block MUST be decompressed according to ANSI\n\
    \      X3.241-1994.  If the LCB field is present on the received\n      datagram,\
    \ an LCB for the uncompressed data MUST be computed and\n      checked against\
    \ the received LCB according to section 2.1.  If a\n      receive failure has\
    \ occurred, it MUST be handled according to the\n      History Resynchronization\
    \ Mechanism described below.\n      If the C/U bit is set to \"0\" and the process\
    \ mode field is set to\n      the value Process-Uncompressed (\"1\"), the specified\
    \ decompression\n      history buffer MUST be updated with the received uncompressed\n\
    \      data.\n      If the C/U bit is set to \"0\" and process mode field is set\
    \ to the\n      value None (\"0\"), the specified decompression history buffer\
    \ MUST\n      NOT be modified.\n      If the R-A bit is set to \"1\", the receiving\
    \ decompressor MAY be\n      reset to an initial state.  (However, due to the\
    \ characteristics\n      of the Stac LZS algorithm, a decompressor reset is not\
    \ required).\n      After reset, any compressed or uncompressed data contained\
    \ in the\n      packet is processed.\n      On the occurrence of a receive failure,\
    \ an implementation MUST\n      transmit a packet with the R-R bit set to \"1\"\
    \ (a Reset-Request)\n      and with the history number matching the history that\
    \ had the\n      failure.  The data field may be present if data is waiting to\
    \ be\n      transported for that history, or the R-R bit may be set in a\n   \
    \   packet transmitted without sequence number, data, or LCB fields.\n      Once\
    \ a receive failure has occurred, the data in any subsequent\n      packets received\
    \ for that history MUST be discarded until a packet\n      containing a Reset-Ack\
    \ is received.  It is the responsibility of\n      the receiver to ensure the\
    \ reliability of the reset request-\n      acknowledge mechanism.  This may require\
    \ the transmission of an\n      additional Reset-Request before a Reset-Ack will\
    \ be received.\n"
- title: 3.3.  History Maintenance
  contents:
  - "3.3.  History Maintenance\n      The History Count field determines the number\
    \ of history buffers\n      to be maintained for the compression protocol.  For\
    \ example, each\n      history buffer could represent a separate logical connection\n\
    \      between the data compression peers.  When maintaining a history,\n    \
    \  the peers MUST use link error detection and signaling to ensure\n      that\
    \ both the compressor and decompressor copies of each history\n      buffer are\
    \ always identical.\n      Setting the History Count field to the value \"0\"\
    \ indicates that\n      the compression is to be on a connectionless basis.  In\
    \ this case,\n      a single history buffer is used and MUST be cleared at the\n\
    \      beginning of every datagram.  The compressing entity MUST set the\n   \
    \   R-A bit on all outgoing datagrams.\n      When the History Count field is\
    \ set to the value \"1\", a single\n      history buffer is maintained by each\
    \ of the data compression\n      peers. (A single logical connection.)\n     \
    \ When the History Count field is set to a value greater than \"1\",\n      separate\
    \ history buffers, error detection states, and signaling\n      states are maintained\
    \ by the decompressing entity for each\n      history.  The compressing peer may\
    \ transmit data on any number of\n      separate histories, up to the value of\
    \ the History Count field.\n"
- title: 3.4.  Anti-Expansion Mechanism
  contents:
  - "3.4.  Anti-Expansion Mechanism\n      When one or more histories are negotiated\
    \ and the Process Mode\n      field is set to None (\"0\"), there are 2 options\
    \ on how to handle\n      packets that expand:\n         1) Send the expanded\
    \ data and keep the history, thus allowing\n            loss of current bandwidth\
    \ but preserving future bandwidth on\n            the link.\n         2) Send\
    \ the uncompressed data and clear the history, thus\n            conserving current\
    \ bandwidth, but allowing possible loss of\n            future bandwidth on the\
    \ link.\n      When 1 or more histories are negotiated and the Process Mode field\n\
    \      is set to Process-Uncompressed (\"1\"), there is an additional\n      option:\n\
    \         3) Send the uncompressed data and do not clear the compression\n   \
    \         history; the decompressor will update its history, thus\n          \
    \  conserving the current bandwidth and future bandwidth on the\n            link.\n"
- title: 3.5.  History Resynchronization Mechanism
  contents:
  - "3.5.  History Resynchronization Mechanism\n      The DCP-Header includes R-R\
    \ (Reset-Request) and R-A (Reset-Ack)\n      bits in order to provide a mechanism\
    \ for indicating a receiver\n      failure in one direction of a compressed link\
    \ without affecting\n      traffic in the other direction.  A receive failure\
    \ is determined\n      using the sequence number and/or LCB mechanism, according\
    \ to the\n      value of the check mode field.\n      Reset-Requests and Reset-Acks\
    \ are specific to the history number\n      of the packet containing them.\n \
    \     Reset-Request/Reset-Ack history synchronization signaling is\n      provided\
    \ to recover from a loss of synchronization between peers,\n      especially in\
    \ unreliable transport layers.  As with all\n      compression algorithms, the\
    \ decompressor can not recover from\n      dropped, erroneous, or mis-ordered\
    \ datagrams, and will propagate\n      errors catastrophically until both peers\
    \ are reset to an initial\n      state.\n      The LZS-DCP protocol provides a\
    \ means to detect these error\n      conditions: LCB for erroneous datagrams,\
    \ and sequence number for\n      dropped or mis-ordered datagrams.  There is a\
    \ means for correcting\n      a loss of synchronization: clear both the failing\
    \ compression and\n      decompression histories, and follow the transmitter and\
    \ receiver\n      processes in sections 3.1. and 3.2.\n"
- title: 4.  Configuration Option Format
  contents:
  - "4.  Configuration Option Format\n   The LZS-DCP Configuration Option negotiates\
    \ the use of LZS-DCP on the\n   link.  By default or ultimate disagreement, no\
    \ compression is used.\n   This Configuration Option is used in CCP, and can be\
    \ used in other\n   negotiation mechanisms [2].\n   All implementations MUST support\
    \ the default values.\n   A summary of the LZS-DCP Configuration Option format\
    \ is shown below.\n   The fields are transmitted from left to right.\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |        History Count          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Check Mode  | Process Mode  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      23\n   Length\n      6\n   History Count\n      The History Count\
    \ field is two octets, most significant octet\n      first, and specifies the\
    \ maximum number of Compression Histories.\n      The value 0 indicates that the\
    \ implementation expects the peer to\n      clear the Compression History at the\
    \ beginning of every packet.\n      If this value is selected, the transmitter\
    \ MUST set the Reset-Ack\n      bit of every packet that contains compressed data.\n\
    \      The value 1 is the default value and is used to indicate that only\n  \
    \    one history is maintained.\n      Other valid values range from 2 to 65535.\
    \  The peer is not\n      required to send as many histories as the implementation\
    \ indicates\n      that it can accept.  However, it should be noted that resources\n\
    \      are allocated in each peer to support the number of negotiated\n      histories\
    \ in this field.\n"
- title: Check Mode
  contents:
  - "Check Mode\n      The Check Mode indicates support of LCB and/or Sequence checking.\n\
    \      The use of check mode None (0) MUST NOT be used for history counts\n  \
    \    greater than zero.\n         0    None\n         1    LCB\n         2   \
    \ Sequence Number\n         3    Sequence Number + LCB (default)\n   Process Mode\n\
    \      The Process Mode specifies how uncompressed packets are handled.\n    \
    \  A value of None (0) indicates that uncompressed packets are not\n      processed\
    \ by the decompressor.  A value of Process-Uncompressed\n      (1) indicates that\
    \ uncompressed packets are processed by the\n      decompressor to update the\
    \ history.\n         0    None (default)\n         1    Process-Uncompressed\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document is based on, and uses much of the text of [5].\n"
- title: References
  contents:
  - "References\n   [1]    Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    , STD\n          51, RFC 1661, Daydreamer, July 1994.\n   [2]    Rand, D., \"\
    The PPP Compression Control Protocol (CCP)\", RFC\n          1962, June 1996.\n\
    \   [3]    Lempel, A., and J. Ziv, \"A Universal Algorithm for Sequential\n  \
    \        Data Compression\", IEEE Transactions On Information Theory,\n      \
    \    Vol. IT-23, No. 3, May 1977.\n   [4]    Rand, D., \"PPP Reliable Transmission\"\
    , RFC 1663, Novell, July\n          1994.\n   [5]    Friend, R., and W. Simpson,\
    \ \"PPP Stac LZS Compression\n          Protocol\", RFC 1974, August 1996.\n \
    \  [6]    Motorola Information Systems Group, \"Data Compression Protocol\n  \
    \        (DCP) Proposal\", TR-30.1 ad hoc contribution (email\n          reflector),\
    \ September 21, 1995.\n   [7]    ANSI X3.241-1994, \"American National Standard\
    \ Data Compression\n          Method, Adaptive Coding with Sliding Window of Information\n\
    \          Interchange\".\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Karl Fox\n   Ascend Communications\n   3518 Riverside Drive, Suite 101\n \
    \  Columbus, Ohio 43221\n   EMail: karl@ascend.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Questions about this memo can also be directed to:\n \
    \  Kevin Schneider\n   Adtran, Inc.\n   901 Explorer Blvd.\n   Huntsville, AL\
    \ 25806\n   Phone: (205) 971-8024\n   EMail: kschneider@adtran.com\n   Robert\
    \ Friend\n   Stac Technology\n   12636 High Bluff Drive\n   San Diego, CA 92130-2093\n\
    \   Phone: (619) 794-4542\n   EMail: rfriend@stac.com\n"
