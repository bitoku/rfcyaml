Abstract This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton Micali Signature (LMS) hash based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax.
The HSS/LMS algorithm is one form of hash based digital signature; it is described in RFC 8554.
This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton Micali Signature (LMS) hash based signature algorithm with the CBOR Object Signing and Encryption (COSE)
The LMS system provides a one time digital signature that is a variant of Merkle Tree Signatures (MTS).
The HSS is built on top of the LMS system to efficiently scale for a larger number of signatures.
The HSS/LMS algorithm is one form of a hash  based digital signature, and it is described in [HASHSIG].
The HSS/ LMS signature algorithm can only be used for a fixed number of signing operations.
The number of signing operations depends upon the size of the tree.
The HSS/LMS signature algorithm uses small public keys, and it has low computational cost; however, the signatures are quite large.
The HSS/LMS private key can be very small when the signer is willing to perform additional computation at signing time; alternatively, the private key can consume additional memory and provide a faster signing time.
The HSS/LMS signatures [HASHSIG] are currently defined to use exclusively SHA 256 [SHS].
Motivation Recent advances in cryptanalysis [BH2013] and progress in the development of quantum computers [NAS2019] pose a threat to widely deployed digital signature algorithms.
As a result, there is a need to prepare for a day that cryptosystems, such as RSA and DSA, that depend on discrete logarithm and factoring cannot be depended upon.
If large scale quantum computers are ever built, these computers will have more than a trivial number of quantum bits (qubits), and they will be able to break many of the public key cryptosystems currently in use.
A post quantum cryptosystem [PQC] is a system that is secure against such large scale quantum computers.
When it will be feasible to build such computers is open to conjecture; however, RSA [RFC8017], DSA [DSS], Elliptic Curve Digital Signature Algorithm (ECDSA) [DSS], and Edwards curve Digital Signature Algorithm (EdDSA)
[RFC8032] are all vulnerable if large scale quantum computers come to pass.
Since the HSS/LMS signature algorithm does not depend on the difficulty of discrete logarithm or factoring, the HSS/LMS signature algorithm is considered to be post quantum secure.
The use of HSS/ LMS hash based signatures to protect software update distribution will allow the deployment of future software that implements new cryptosystems.
By deploying HSS/LMS today, authentication and integrity protection of the future software can be provided, even if advances break current digital signature mechanisms.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
LMS Digital Signature Algorithm Overview
This specification makes use of the hash based signature algorithm specified in [HASHSIG], which is the Leighton and Micali adaptation [LM] of the original Lamport Diffie Winternitz Merkle one time signature system [M1979][M1987][M1989a][M1989b].
see Section 2.1    Leighton Micali Signature (LMS)   see Section 2.2    Leighton Micali
One time Signature (LM OTS)
As implied by the name, the hash based signature algorithm depends on a collision resistant hash function.
The hash based signature algorithm specified in [HASHSIG] currently makes use of the SHA 256 one way hash function [SHS], but it also establishes an IANA registry to permit the registration of additional one way hash functions in the future.
The hash based signature algorithm specified in [HASHSIG] uses a hierarchy of trees.
The N time Hierarchical Signature System (HSS) allows subordinate trees to be generated when needed by the signer.
Otherwise, generation of the entire tree might take weeks or longer.
An HSS signature, as specified in [HASHSIG], carries the number of signed public keys (Nspk), followed by that number of signed public keys, followed by the LMS signature, as described in Section 2.2.
The public key for the topmost LMS tree is the public key of the HSS system.
The LMS private key in the parent tree signs the LMS public key in the child tree, and the LMS private key in the bottom most tree signs the actual message.
The signature over the public key and the signature over the actual message are LMS signatures, as described in Section 2.2.
The elements of the HSS signature value for a stand alone tree (a top tree with no children) can be summarized as: u32str(0)
As defined in Section 3.3 of [HASHSIG], a signed public key is the lms signature over the public key followed by the public key itself.
Note that Nspk is the number of levels in the hierarchy of trees
Subordinate LMS trees are placed in the HSS structure, as discussed in Section 2.1.
Each tree in the hash based signature algorithm specified in [HASHSIG] uses the Leighton Micali Signature (LMS) system.
LMS systems have two parameters.
The first parameter is the height of the tree, h, which is the number of levels in the tree minus one.
The [HASHSIG] includes support for five values of this parameter: h 5, h 10, h 15, h 20, and h 25.
Note that there are 2^h leaves in the tree.
The second parameter is the number of bytes output by the hash function, m, which is the amount of data associated with each node in the tree.
The [HASHSIG] specification supports only SHA 256 with m 32.
An IANA registry is defined so that other hash functions could be used in the future.
The [HASHSIG] specification supports five tree sizes:
LMS SHA256 M32 H5    LMS SHA256
The [HASHSIG] specification establishes an IANA registry to permit the registration of additional hash functions and additional tree sizes in the future.
The [HASHSIG] specification defines the value I as the private key identifier, and the same I value is used for all computations with the same LMS tree.
The value I is also available in the public key.
In addition, the [HASHSIG] specification defines the value T[r] as the m byte string associated with the ith node in the LMS tree, and the nodes are indexed from 1 to 2^(h 1) 1.
Thus, T[1] is the m byte string associated with the root of the LMS tree.
The array of values contains the siblings of the nodes on the path from the leaf to the root but does not contain the nodes on the path itself.
The array for a tree with height h will have h values.
The first value is the sibling of the leaf, the next value is the sibling of the parent of the leaf, and so on up the path to the root.
The four elements of the LMS signature value can be summarized as: u32str(q)
One Time Signature (LM OTS)
The hash based signature algorithm depends on a one time signature method.
This specification makes use of the Leighton Micali One time Signature (LM OTS) Algorithm [HASHSIG].
An LM OTS has five parameters:
The number of bytes output by the hash function.
A preimage resistant hash function that accepts byte strings of any length and returns an n byte string.
The width in bits of the Winternitz coefficients.
[HASHSIG] supports four values for this parameter:
w 1, w 2, w 4, and w 8.
The number of n byte string elements that make up the LM OTS signature.
The number of left shift bits used in the checksum function, which is defined in Section 4.4 of [HASHSIG].
The values of p and ls are dependent on the choices of the parameters n and w, as described in Appendix B of [HASHSIG].
N32 W4    LMOTS SHA256 N32 W8
The [HASHSIG] specification establishes an IANA registry to permit the registration of additional hash functions and additional parameter sets in the future.
Signing involves the generation of C, which is an n byte random value.
Hash Based Signature Algorithm Identifiers
The CBOR Object Signing and Encryption (COSE)
[RFC8152] supports two signature algorithm schemes.
This specification makes use of the signature with appendix scheme for hash based signatures.
The signature value is a large byte string, as described in Section 2.
The byte string is designed for easy parsing.
The HSS, LMS, and LM OTS components of the signature value format include counters and type codes that indirectly provide all of the information that is needed to parse the byte string during signature validation.
If the 'alg' field is present, it MUST be 'HSS LMS'.
If the 'key ops' field is present, it MUST include 'sign' when creating a hash based signature.
If the 'key ops' field is present, it MUST include 'verify' when verifying a hash based signature.
If the 'kid' field is present, it MAY be used to identify the top of the HSS tree.
In [HASHSIG], this identifier is called 'I', and it is the 16 byte identifier of the LMS public key for the tree.
The security considerations from [RFC8152] and [HASHSIG] are relevant to implementations of this specification.
There are a number of security considerations that need to be taken into account by implementers of this specification.
Implementations MUST protect the private keys.
Compromise of the private keys may result in the ability to forge signatures.
Along with the private key, the implementation MUST keep track of which leaf nodes in the tree have been used.
Loss of integrity of this tracking data can cause a one time key to be used more than once.
As a result, when a private key and the tracking data are stored on nonvolatile media or in a virtual machine environment, failed writes, virtual machine snapshotting or cloning, and other operational concerns must be considered to ensure confidentiality and integrity.
When generating an LMS key pair, an implementation MUST generate each key pair independently of all other key pairs in the HSS tree.
An implementation MUST ensure that an LM OTS private key is used to generate a signature only one time and ensure that it cannot be used for any other purpose.
The generation of private keys relies on random numbers.
The use of inadequate pseudorandom number generators (PRNGs) to generate these values can result in little or no security.
An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities rather than brute  force searching the whole key space.
The generation of quality random numbers is difficult, and [RFC4086] offers important guidance in this area.
The generation of hash based signatures also depends on random numbers.
While the consequences of an inadequate PRNG to generate these values is much less severe than in the generation of private keys, the guidance in [RFC4086] remains important.
The public key for the hash based signature is the key at the root of Hierarchical Signature System (HSS).
In the absence of a public key infrastructure [RFC5280], this public key is a trust anchor, and the number of signatures that can be generated is bounded by the size of the overall HSS set of trees.
When all of the LM OTS signatures have been used to produce a signature, then the establishment of a new trust anchor is required.
To ensure that none of the tree nodes are used to generate more than one signature, the signer maintains state across different invocations of the signing algorithm.
Section 9.2 of [HASHSIG] offers some practical implementation approaches around this statefulness.
In some of these approaches, nodes are sacrificed to ensure that none are used more than once.
As a result, the total number of signatures that can be generated might be less than the overall HSS set of trees.
A COSE Key Type Parameter for encoding the HSS/LMS private key and the state about which tree nodes have been used is deliberately not defined.
It was not defined to avoid creating the ability to save the private key and state, generate one or more signatures, and then restore the private key and state.
Such a restoration operation provides disastrous opportunities for tree node reuse.
IANA Considerations IANA has added entries for the HSS/LMS hash based signature algorithm in the "COSE Algorithms" registry and added HSS/LMS hash based signature public keys in the "COSE Key Types" registry and the "COSE Key Type Parameters" registry.
The new entry in the "COSE Algorithms" registry [IANA] appears as follows:
Name:  HSS LMS Value:   46 Description:
HSS/LMS hash based digital signature
COSE Key Types Registry Entry
The new entry in the "COSE Key Types" registry [IANA] appears as follows:
Name:  HSS LMS Value:  5 Description:  Public key for HSS/LMS hash
COSE Key Type Parameters Registry Entry
The new entry in the "COSE Key Type Parameters" registry [IANA] appears as follows:
bstr Description:  Public key for HSS/LMS hash
RFC 8778 Appendix A.  Examples
This appendix provides a non normative example of a COSE full message signature and an example of a COSE Sign1 message.
This section is formatted according to the extended CBOR diagnostic format defined by [RFC8610].
The programs that were used to generate the examples can be found at <https://github.com/cose wg
Example COSE Full Message Signature
This section provides an example of a COSE full message signature.
The size of binary file is 2560 bytes.
af165339e6725dc4fc1e995521e1be8a566d59b57cd130903b42d07087d63646ef8f c1e9e9071bb67a123fdec3f37638cdaf0f4bf3084074069171c17885b9431ad908d3 6a6f8a826256d2aa34f8aa0731a357c060db8e80fefd61b1c323890e640633b98d17 5d4d6ebff800a71cfc864ec02837de9d0e079f0f400acafd56805cb273e631ba395d 23e86acf6eae63181a5afe1f0a361cbbd5fefeb7db0c95591ec3128e80dfbea9ca0f 89fc035d761c05d41e7a010892c42e8e2af62aa604f4e214c0bb08075481f9cc307a 555adf333b9424f209b89f161032e413b047ae5ab0aa15643bb4c643446d2c9829eb 256e7375ce9639047a24a44f4da446b7359556f3ab3484c56511c68a140dc0531f65
3105800d9f20990d4ebdc5ceea918d7ae95c0d7ec69a00d6a936b25fc19b9dfc5561 400f046191136c367038d6a9d0e0ae30dcdc4733712cbd5a2aee35315eff5c1a7e08 5b68c5cf0c64c495df2ca6f030db04480a2e11d4a0a0dbf29d9463d5b9e41e346e49 c894d5e43993c834c4746309c886d6131f2f92155ca1160bac9660802a947b5aba94 b35357d13fdf02d2aeabef568912f68ae5d3a60214f6d00c4dd9f0af09eb0bf961cd 9f27251d46899c28d87080ba2ead3e8193f51a789706ec32aacee9f4b14eeca91a25
This section provides an example of a COSE Sign1 message.
The size of binary file is 2552 bytes.
, / signature / h'00000000000000000000000391291de76ce6e24d1e2a9b60 266519bc8ce889f814deb0fc00edd3129de3ab9b9aa5b5ac783bdf0fe689f57fb204
cfee4fee3bfcf5ee5a5ad08b5b4f53bc93995f26cfe7c0c1c5ba2574c1f2d8470993 e8bd47ef9b9cf309ef895226e92be60683459009611defbb9a43217956a0ab2959bb da0feca39de37e7c4a6cd8a5314d6b02b377406d5a5e589e91feaa9f2e4ec1682ba1 f633c7784499323e40da651f71d3c19e38c634d898b0c508324c0bfcf7c5f0a8c014 b4af200a739f96cddba94daf86ce80c76158d4f5cf3cd2ba9f1393df47e556887f91
5f9d14e448e216f375e1f96a52d39619459b131026143e8809bad408f5ef66cd3da2 27431e68670c0b4b2c3801e1e9025b1ebed218e0956967158ccc274c704adcd8cc23 c149a89eda25478742dadc15f233844535e4021000b5d557313d4f271875680e6d5e 7f6681fdd19f8b9a748cabb2377aac1387fdb80e618eb7d69a368729ca9a092af91e be1c584c35fe62734d1d53d10b35dd02093a201c889ad37a558b610f1ab00179a11f 881600e944cedc47a7ae6d828009d7c61ffea9dd5aa5406408e2e85dc056e47b5758 9eaba18e792f4631af62d4588a1818167274273c69e7a0735be5dada7e224e3b178b 3b093212eb74e762f564a26d577aa22ebd8c7b4a999419908e2f2d9c8689dc923905
f1fd2818ae8e4b6f52f89beab6bfdd1ff1b7ecd573edff3703b800b5b2a206f451f1 bf2713b4ae9085bd7fe34ad4306a290e4cdb7817ee9ab7ccfb816d002b619f77d46d 7dd0f8eefe10f5c0f9723ffdb14ca75a185543770f41508b9983d5eed78225bc6e21 f876bfdd08fe8bc63e0cb253c7dfc67c330897c515244f3f631682f2141eba48ca86 dfff9206f78edcb9dec4b2371aeddbe141ef96a10957e29a94747c4438fb30b14d37
1dff4b91a4a9e3bf156a39a4660f98f06bf3f017686d9dfc362c948646b3c9848803 e6d9ba1f7d3967f709cddd35dc77d60356f0c36808900b491cb4ecbbabec128e7c81 a46e62a67b57640a0a78be1cbf7dd9d419a10cd8686d16621a80816bfdb5bdc56211 d72ca70b81f1117d129529a7570cf79cf52a7028a48538ecdd3b38d3d5d62d262465 95c4fb73a525a5ed2c30524ebb1d8cc82e0c19bc4977c6898ff95fd3d310b0bae716 96cef93c6a552456bf96e9d075e383bb7543c675842bafbfc7cdb88483b3276c29d4 f0a341c2d406e40d4653b7e4d045851acf6a0a0ea9c710b805cced4635ee8c107362 f0fc8d80c14d0ac49c516703d26d14752f34c1c0d2c4247581c18c2cf4de48e9ce94
