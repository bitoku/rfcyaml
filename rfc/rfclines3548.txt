Abstract This document describes the commonly used base 64, base 32, and base 16 encoding schemes.
It also discusses the use of line feeds in encoded data, use of padding in encoded data, use of non alphabet characters in encoded data, and use of different encoding alphabets.
Introduction Base encoding of data is used in many situations to store or transfer data in environments that, perhaps for legacy reasons, are restricted to only US ASCII [9] data.
Base encoding can also be used in new applications that do not have legacy restrictions, simply because it makes it possible to manipulate objects with text editors.
In the past, different applications have had different requirements and thus sometimes implemented base encodings in slightly different ways.
Today, protocol specifications sometimes use base encodings in general, and "base64" in particular, without a precise description or reference.
MIME [3] is often used as a reference for base64 without considering the consequences for line wrapping or non alphabet characters.
The purpose of this specification is to establish common alphabet and encoding considerations.
This will hopefully reduce ambiguity in other documents, leading to better interoperability.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [1].
Here we discuss the discrepancies between base encoding implementations in the past, and where appropriate, mandate a specific recommended behavior for the future.
Line feeds in encoded data MIME [3] is often used as a reference for base 64 encoding.
However, MIME does not define "base 64" per se, but rather a "base 64 Content Transfer Encoding" for use within MIME.
As such, MIME enforces a limit on line length of base 64 encoded data to 76 characters.
MIME inherits the encoding from PEM [2] stating it is "virtually identical", however PEM uses a line length of 64 characters.
The MIME and PEM limits are both due to limits within SMTP.
Implementations MUST NOT not add line feeds to base encoded data unless the specification referring to this document explicitly directs base encoders to add line feeds after a specific number of characters.
In the general case, when assumptions on size of transported data cannot be made, padding is required to yield correct decoded data.
Implementations MUST include appropriate pad characters at the end of encoded data unless the specification referring to this document explicitly states otherwise.
Interpretation of non alphabet characters in encoded data Base encodings use a specific, reduced, alphabet to encode binary data.
Non alphabet characters could exist within base encoded data, caused by data corruption or by design.
Non alphabet characters may be exploited as a "covert channel", where non protocol data can be sent for nefarious purposes.
Non alphabet characters might also be sent in order to exploit implementation errors leading to, e.g., buffer overflow attacks.
Implementations MUST reject the encoding if it contains characters outside the base alphabet when interpreting base encoded data, unless the specification referring to this document explicitly states otherwise.
Such specifications may, as MIME does, instead state that characters outside the base encoding alphabet should simply be ignored when interpreting data ("be liberal in what you accept").
Note that this means that any CRLF constitute "non alphabet characters" and are ignored.
Choosing the alphabet Different applications have different requirements on the characters in the alphabet.
Here are a few requirements that determine which alphabet should be used:
Characters "0", "O" are easily interchanged, as well "1", "
In the base32 alphabet below, where 0 (zero) and 1 (one) is not present, a decoder may interpret 0 as O, and 1 as I or L depending on case.
(However, by default it should not, see previous section.)
Encoded into structures that place other requirements.
For base 16 and base 32, this determines the use of upper  or lowercase alphabets.
There is no universally accepted alphabet that fulfills all the requirements.
In this document, we document and name some currently used alphabets.
The following description of base 64 is due to [2],
The Base 64 encoding is designed to represent arbitrary sequences of octets in a form that requires case sensitivity but need not be humanly readable.
A 65 character subset of US ASCII is used, enabling 6 bits to be represented per printable character.
The encoding process represents 24 bit groups of input bits as output strings of 4 encoded characters.
Proceeding from left to right, a 24 bit input group is formed by concatenating 3 8 bit input groups.
These 24 bits are then treated as 4 concatenated 6 bit groups, each of which is translated into a single digit in the base 64 alphabet.
Each 6 bit group is used as an index into an array of 64 printable characters.
The character referenced by the index is placed in the output string.
The Base 64 Alphabet Value Encoding  Value Encoding  Value Encoding
A full encoding quantum is always completed at the end of a quantity.
When fewer than 24 input bits are available in an input group, zero bits are added (on the right) to form an integral number of 6 bit groups.
Base 64 Encoding with URL and Filename Safe Alphabet
The Base 64 encoding with an URL and filename safe alphabet has been used in [8].
This encoding should not be regarded as the same as the "base64" encoding, and should not be referred to as only "base64".
Unless made clear, "base64" refer to the base 64 in the previous section.
This encoding is technically identical to the previous one, except for the 62:nd and 63:rd alphabet character, as indicated in table 2.
The "URL and Filename safe" Base 64 Alphabet Value Encoding  Value Encoding  Value Encoding
The following description of base 32 is due to [7] (with corrections).
The Base 32 encoding is designed to represent arbitrary sequences of octets in a form that needs to be case insensitive but need not be humanly readable.
A 33 character subset of US ASCII is used, enabling 5 bits to be represented per printable character.
The encoding process represents 40 bit groups of input bits as output strings of 8 encoded characters.
Proceeding from left to right, a 40 bit input group is formed by concatenating 5 8bit input groups.
These 40 bits are then treated as 8 concatenated 5 bit groups, each of which is translated into a single digit in the base 32 alphabet.
When encoding a bit stream via the base 32 encoding, the bit stream must be presumed to be ordered with the most significant bit first.
That is, the first bit in the stream will be the high order bit in the first 8bit byte, and the eighth bit will be the low order bit in the first 8bit byte, and so on.
Each 5 bit group is used as an index into an array of 32 printable characters.
The character referenced by the index is placed in the output string.
These characters, identified in Table 2, below, are selected from US ASCII digits and uppercase letters.
The Base 32 Alphabet Value Encoding  Value Encoding  Value Encoding
A full encoding quantum is always completed at the end of a body.
When fewer than 40 input bits are available in an input group, zero bits are added (on the right) to form an integral number of 5 bit groups.
The following description is original but analogous to previous descriptions.
Essentially, Base 16 encoding is the standard standard case insensitive hex encoding, and may be referred to as "base16" or "hex".
A 16 character subset of US ASCII is used, enabling 4 bits to be represented per printable character.
The encoding process represents 8 bit groups (octets) of input bits as output strings of 2 encoded characters.
Proceeding from left to right, a 8 bit input is taken from the input data.
These 8 bits are then treated as 2 concatenated 4 bit groups, each of which is translated into a single digit in the base 16 alphabet.
Each 4 bit group is used as an index into an array of 16 printable characters.
The character referenced by the index is placed in the output string.
The Base 16 Alphabet Value Encoding  Value Encoding  Value Encoding
Unlike base 32 and base 64, no special padding is necessary since a full code word is always available.
Illustrations and examples To translate between binary and a base encoding, the input is stored in a structure and the output is extracted.
The case for base 64 is displayed in the following figure, borrowed from [4].
7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0
5 4 3 2 1 0 5 4 3 2 1 0 5 4 3 2 1 0 5 4 3 2 1 0
The case for base 32 is shown in the following figure, borrowed from [6].
Each successive character in a base 32 value represents 5 successive bits of the underlying octet sequence.
Thus, each group of 8 characters represents a sequence of 5 octets (40 bits).
The following example of Base64 data is from [4].
11011001 11111110 6 bit:   000101
00000011 11011001 pad with 00 6 bit:   000101
11111011 10011100    00000011 pad with 0000 6 bit:   000101
Security Considerations When implementing Base encoding and decoding, care should be taken not to introduce vulnerabilities to buffer overflow attacks, or other attacks on the implementation.
A decoder should not break on invalid input including, e.g., embedded NUL characters (ASCII 0).
If non alphabet characters are ignored, instead of causing rejection of the entire encoding (as recommended), a covert channel that can be used to "leak" information is made possible.
The implications of this should be understood in applications that do not follow the recommended practice.
Similarly, when the base 16 and base 32 alphabets are handled case insensitively, alteration of case can be used to leak information.
Base encoding visually hides otherwise easily recognized information, such as passwords, but does not provide any computational confidentiality.
This has been known to cause security incidents when, e.g., a user reports details of a network protocol exchange (perhaps to illustrate some other problem) and accidentally reveals the password because she is unaware that the base encoding does not protect the password.
Editor's Address Simon Josefsson EMail: simon@josefsson.org
