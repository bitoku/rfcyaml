- title: __initial_text__
  contents:
  - '                    Enrollment over Secure Transport

    '
- title: Abstract
  contents:
  - "Abstract\n   This document profiles certificate enrollment for clients using\n\
    \   Certificate Management over CMS (CMC) messages over a secure\n   transport.\
    \  This profile, called Enrollment over Secure Transport\n   (EST), describes\
    \ a simple, yet functional, certificate management\n   protocol targeting Public\
    \ Key Infrastructure (PKI) clients that need\n   to acquire client certificates\
    \ and associated Certification Authority\n   (CA) certificates.  It also supports\
    \ client-generated public/private\n   key pairs as well as key pairs generated\
    \ by the CA.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7030.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. Operational Scenario Overviews ..................................5\n    \
    \  2.1. Obtaining CA Certificates ..................................6\n      2.2.\
    \ Initial Enrollment .........................................7\n           2.2.1.\
    \ Certificate TLS Authentication ......................8\n           2.2.2. Certificate-Less\
    \ TLS Authentication .................8\n           2.2.3. HTTP-Based Client Authentication\
    \ ....................8\n      2.3. Client Certificate Reissuance ..............................8\n\
    \      2.4. Server Key Generation ......................................9\n  \
    \    2.5. Full PKI Request Messages ..................................9\n    \
    \  2.6. Certificate Signing Request (CSR) Attributes Request .......9\n   3. Protocol\
    \ Design and Layering ...................................10\n      3.1. Application\
    \ Layer .........................................13\n      3.2. HTTP Layer ................................................14\n\
    \           3.2.1. HTTP Headers for Control ...........................15\n  \
    \         3.2.2. HTTP URIs for Control ..............................16\n    \
    \       3.2.3. HTTP-Based Client Authentication ...................17\n      \
    \     3.2.4. Message Types ......................................19\n      3.3.\
    \ TLS Layer .................................................20\n           3.3.1.\
    \ TLS-Based Server Authentication ....................20\n           3.3.2. TLS-Based\
    \ Client Authentication ....................21\n           3.3.3. Certificate-Less\
    \ TLS Mutual Authentication .........21\n      3.4. Proof-of-Possession .......................................22\n\
    \      3.5. Linking Identity and POP Information ......................22\n  \
    \    3.6. Server Authorization ......................................23\n    \
    \       3.6.1. Client Use of Explicit TA Database .................24\n      \
    \     3.6.2. Client Use of Implicit TA Database .................24\n      3.7.\
    \ Client Authorization ......................................24\n   4. Protocol\
    \ Exchange Details ......................................25\n      4.1. Distribution\
    \ of CA Certificates ...........................25\n           4.1.1. Bootstrap\
    \ Distribution of CA Certificates ..........25\n           4.1.2. CA Certificates\
    \ Request ............................26\n           4.1.3. CA Certificates Response\
    \ ...........................26\n      4.2. Client Certificate Request Functions\
    \ ......................27\n           4.2.1. Simple Enrollment of Clients .......................28\n\
    \           4.2.2. Simple Re-enrollment of Clients ....................29\n  \
    \         4.2.3. Simple Enroll and Re-enroll Response ...............29\n    \
    \  4.3. Full CMC ..................................................30\n      \
    \     4.3.1. Full CMC Request ...................................30\n        \
    \   4.3.2. Full CMC Response ..................................30\n      4.4.\
    \ Server-Side Key Generation ................................31\n           4.4.1.\
    \ Server-Side Key Generation Request .................32\n                  4.4.1.1.\
    \ Requests for Symmetric Key\n                           Encryption of the Private\
    \ Key .............32\n                  4.4.1.2. Requests for Asymmetric Encryption\n\
    \                           of the Private Key ........................33\n  \
    \         4.4.2. Server-Side Key Generation Response ................33\n    \
    \  4.5. CSR Attributes ............................................35\n      \
    \     4.5.1. CSR Attributes Request .............................35\n        \
    \   4.5.2. CSR Attributes Response ............................35\n   5. IANA\
    \ Considerations ............................................37\n   6. Security\
    \ Considerations ........................................39\n   7. References\
    \ .....................................................41\n      7.1. Normative\
    \ References ......................................41\n      7.2. Informative\
    \ References ....................................43\n   Appendix A. Operational\
    \ Scenario Example Messages .................45\n     A.1. Obtaining CA Certificates\
    \ ..................................45\n     A.2. CSR Attributes .............................................47\n\
    \     A.3. Enroll/Re-enroll ...........................................47\n  \
    \   A.4. Server Key Generation ......................................50\n   Appendix\
    \ B. Contributors and Acknowledgements .....................52\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document profiles certificate enrollment for clients\
    \ using\n   Certificate Management over CMS (CMC) [RFC5272] messages over a\n\
    \   secure transport.  Enrollment over Secure Transport (EST) describes\n   the\
    \ use of Transport Layer Security (TLS) 1.1 [RFC4346], 1.2\n   [RFC5246], or any\
    \ future version) and Hypertext Transfer Protocol\n   (HTTP) [RFC2616] to provide\
    \ an authenticated and authorized channel\n   for Simple Public Key Infrastructure\
    \ (PKI) Requests and Responses\n   [RFC5272].\n   Architecturally, the EST service\
    \ is located between a Certification\n   Authority (CA) and a client.  It performs\
    \ several functions\n   traditionally allocated to the Registration Authority\
    \ (RA) role in a\n   PKI.  The nature of communication between an EST server and\
    \ a CA is\n   not described in this document.\n   EST adopts the Certificate Management\
    \ Protocol (CMP) [RFC4210] model\n   for CA certificate rollover, but it does\
    \ not use the CMP message\n   syntax or protocol.  EST servers are extensible\
    \ in that new functions\n   may be defined to provide additional capabilities\
    \ not specified in\n   CMC [RFC5272], and this document defines two such extensions:\
    \ one for\n   requesting Certificate Signing Request attributes and another for\n\
    \   requesting server-generated keys.\n   EST specifies how to transfer messages\
    \ securely via HTTP over TLS\n   (HTTPS) [RFC2818], where the HTTP headers and\
    \ media types are used in\n   conjunction with TLS.  HTTPS operates over TCP;\
    \ this document does\n   not specify EST over HTTP/Datagram Transport Layer Security/User\n\
    \   Datagram Protocol (HTTP/DTLS/UDP).  With a suitable specification for\n  \
    \ combining HTTP, DTLS, and UDP, there are no EST requirements that\n   would\
    \ prevent it from working over such a stack.  Figure 1 shows how\n   the layers\
    \ build upon each other.\n   EST Layering:\n   Protocols:\n   +--------------------------------------------+\n\
    \   |                                            |\n   | EST request/response\
    \ messages              |\n   |                                            |\n\
    \   +--------------------------------------------+\n   |                     \
    \                       |\n   | HTTP for message transfer and signaling    |\n\
    \   |                                            |\n   +--------------------------------------------+\n\
    \   |                                            |\n   | TLS for transport security\
    \                 |\n   |                                            |\n   +--------------------------------------------+\n\
    \   |                                            |\n   | TCP for transport   \
    \                       |\n   |                                            |\n\
    \   +--------------------------------------------+\n                         \
    \        Figure 1\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   It is assumed that the reader is familiar\
    \ with the terms and concepts\n   described in Public Key Cryptography Standard\
    \ (PKCS) #10 [RFC2986],\n   HTTPS [RFC2818], CMP [RFC4210], CMC [RFC5272][RFC5273][RFC5274],\
    \ and\n   TLS [RFC4346].\n   In addition to the terms defined in the terminology\
    \ section of CMC\n   [RFC5272], the following terms are defined for clarity:\n\
    \   EST CA:  For certificate issuing services, the EST CA is reached\n      through\
    \ the EST server; the CA could be logically \"behind\" the EST\n      server or\
    \ embedded within it.\n   Third-Party Trust Anchor:  Any trust anchor (TA) that\
    \ is not\n      authoritative for the PKI hierarchy for which the EST server is\n\
    \      providing services.\n   Explicit Trust Anchor:  Any TA that is explicitly\
    \ configured on the\n      client or server for use during EST TLS authentication;\
    \ for\n      example, a TA that is manually configured on the EST client or\n\
    \      bootstrapped as described in Section 4.1.1.  (See more details in\n   \
    \   Sections 3.6 and 6.)\n   Implicit Trust Anchor:  Any third-party TA that is\
    \ available on the\n      client or server for use during TLS authentication but\
    \ is not\n      specifically indicated for use during EST TLS authentication;\
    \ for\n      example, TAs commonly used by web browsers to authenticate web\n\
    \      servers or TAs used by servers to authenticate manufacturer-\n      installed\
    \ client credentials (such as certificates populated into\n      cable modems\
    \ or routers in the factory).  The authorization model\n      for these TAs is\
    \ different from the authorization model for\n      Explicit Trust Anchors.  (See\
    \ more details in Sections 3.6.1,\n      3.6.2, and 6).\n   Certificate-Less TLS:\
    \  Certificate-less TLS cipher suites provide a\n      way to perform mutual authentication\
    \ in situations where neither\n      the client nor server have certificates or\
    \ are willing to use\n      them.  The credential used for authentication is a\
    \ word, phrase,\n      code, or key that is shared between the client and server.\
    \  The\n      credential must be uniquely shared between the client and server\n\
    \      in order to provide authentication of an individual client to an\n    \
    \  individual server.\n"
- title: 2.  Operational Scenario Overviews
  contents:
  - "2.  Operational Scenario Overviews\n   This section provides an informative overview\
    \ of the operational\n   scenarios to better introduce the reader to the protocol\
    \ discussion.\n   Both the EST clients and server are configured with information\
    \ that\n   provides the basis for mutual authentication and for authorization.\n\
    \   The specific initialization data depends on the methods available in\n   the\
    \ client and server, but it can include shared secrets, network\n   service names\
    \ and locations (e.g., a Uniform Resource Identifier\n   (URI) [RFC3986]), trust\
    \ anchor information (e.g., a CA certificate or\n   a hash of a TA's certificate),\
    \ and enrollment keys and certificates.\n   Depending on an enterprise's acquisition\
    \ and network management\n   practices, some initialization may be performed by\
    \ the vendor prior\n   to delivery of client hardware and software.  In that case,\
    \ the\n   client vendor may provide data, such as trust anchors, to the\n   enterprise\
    \ via a secure procedure.  The distribution of this initial\n   information is\
    \ out of scope.\n   Distribution of trust anchors and other certificates can be\
    \ effected\n   via the EST server.  However, nothing can be inferred about the\n\
    \   authenticity of this data until an out-of-band mechanism is used to\n   verify\
    \ them.\n   Sections 2.1-2.3 very closely mirror the text of the Scenarios\n \
    \  Appendix of [RFC6403] with such modifications as are appropriate for\n   this\
    \ profile.  Sections 2.1-2.6, below, enumerate the set of EST\n   functions (see\
    \ Figure 5) and provide an informative overview of EST's\n   capabilities.\n \
    \  The general client/server interaction proceeds as follows:\n      The client\
    \ initiates a TLS-secured HTTP session with an EST\n      server.\n      A specific\
    \ EST service is requested based on a portion of the URI\n      used for the session.\n\
    \      The client and server authenticate each other.\n      The client verifies\
    \ that the server is authorized to serve this\n      client.\n      The server\
    \ verifies that the client is authorized to make use of\n      this server and\
    \ the request that the client has made.\n      The server acts upon the client\
    \ request.\n"
- title: 2.1.  Obtaining CA Certificates
  contents:
  - "2.1.  Obtaining CA Certificates\n   The EST client can request a copy of the\
    \ current EST CA\n   certificate(s) from the EST server.  The EST client is assumed\
    \ to\n   perform this operation before performing other operations.\n   Throughout\
    \ this document we assume the EST CA has a certificate that\n   is used by the\
    \ client to verify signed objects issued by the CA,\n   e.g., certificates and\
    \ certificate revocation lists (CRLs), and that\n   a different certificate than\
    \ the one used to verify signatures on\n   certificates and CRLs is used when\
    \ EST protocol communication\n   requires additional encryption.\n   The EST client\
    \ authenticates and verifies the authorization scope of\n   the EST server when\
    \ requesting the current CA certificate(s).  As\n   detailed in Sections 3.3.1\
    \ and 3.3.3, available options include:\n   o  Verifying the EST server's HTTPS\
    \ URI against the EST server's\n      certificate using Implicit TAs (similar\
    \ to a common HTTPS\n      exchange).  This allows the EST server and client to\
    \ leverage\n      existing TAs that might be known to the EST client.\n   o  The\
    \ client can leverage a previously distributed trust anchor\n      specific to\
    \ the EST server.  This allows the EST client to use an\n      existing, potentially\
    \ older, CA certificate to request a current\n      CA certificate.\n   o  For\
    \ bootstrapping, the EST client can rely upon manual\n      authentication performed\
    \ by the end-user as detailed in\n      Section 4.1.1.\n   o  The client can leverage\
    \ the binding of a shared credential to a\n      specific EST server with a certificate-less\
    \ TLS cipher suite.\n   Client authentication is not required for this exchange,\
    \ so it is\n   trivially supported by the EST server.\n"
- title: 2.2.  Initial Enrollment
  contents:
  - "2.2.  Initial Enrollment\n   After authenticating an EST server and verifying\
    \ that it is\n   authorized to provide services to the client, an EST client can\n\
    \   acquire a certificate for itself by submitting an enrollment request\n   to\
    \ that server.\n   The EST server authenticates and authorizes the EST client\
    \ as\n   specified in Sections 3.3.2, 3.3.3, and 3.7.  The methods described\n\
    \   in the normative text that are discussed in this overview include:\n   o \
    \ TLS with a previously issued client certificate (e.g., an existing\n      certificate\
    \ issued by the EST CA);\n   o  TLS with a previously installed certificate (e.g.,\
    \ manufacturer-\n      installed certificate or a certificate issued by some other\n\
    \      party);\n   o  Certificate-less TLS (e.g., with a shared credential distributed\n\
    \      out-of-band);\n   o  HTTP-based with a username/password distributed out-of-band.\n"
- title: 2.2.1.  Certificate TLS Authentication
  contents:
  - "2.2.1.  Certificate TLS Authentication\n   If the EST client has a previously\
    \ installed certificate issued by a\n   third-party CA, this certificate can be\
    \ used to authenticate the\n   client's request for a certificate from the EST\
    \ server (if that CA is\n   recognized by the EST server).  An EST client responds\
    \ to the EST\n   server's TLS certificate request message with the existing\n\
    \   certificate already held by the client.  The EST server will verify\n   the\
    \ client's existing certificate and authorize the client's request\n   as described\
    \ in Section 3.3.2.\n"
- title: 2.2.2.  Certificate-Less TLS Authentication
  contents:
  - "2.2.2.  Certificate-Less TLS Authentication\n   The EST client and EST server\
    \ can be mutually authenticated using a\n   certificate-less TLS cipher suite\
    \ (see Section 3.3.3).\n"
- title: 2.2.3.  HTTP-Based Client Authentication
  contents:
  - "2.2.3.  HTTP-Based Client Authentication\n   The EST server can optionally also\
    \ request that the EST client submit\n   a username/password using the HTTP Basic\
    \ or Digest authentication\n   methods (see Section 3.2.3).  This approach is\
    \ desirable if the EST\n   client cannot be authenticated during the TLS handshake\
    \ (see\n   Section 3.3.2) or the EST server policy requires additional\n   authentication\
    \ information; see Section 3.2.3.  In all cases,\n   HTTP-based client authentication\
    \ is only to be performed over a\n   TLS-protected transport (see Section 3.3).\n"
- title: 2.3.  Client Certificate Reissuance
  contents:
  - "2.3.  Client Certificate Reissuance\n   An EST client can renew/rekey its existing\
    \ client certificate by\n   submitting a re-enrollment request to an EST server.\n\
    \   When the current EST client certificate can be used for TLS client\n   authentication\
    \ (Section 3.3.2), the client presents this certificate\n   to the EST server\
    \ for client authentication.  When the to be reissued\n   EST client certificate\
    \ cannot be used for TLS client authentication,\n   any of the authentication\
    \ methods used for initial enrollment can be\n   used.\n   For example, if the\
    \ client has an alternative certificate issued by\n   the EST CA that can be used\
    \ for TLS client authentication, then it\n   can be used.\n   The certificate\
    \ request message includes the same Subject and\n   SubjectAltName as the current\
    \ certificate.  Name changes are\n   requested as specified in Section 4.2.2.\n"
- title: 2.4.  Server Key Generation
  contents:
  - "2.4.  Server Key Generation\n   The EST client can request a server-generated\
    \ certificate and key\n   pair (see Section 4.4).\n"
- title: 2.5.  Full PKI Request Messages
  contents:
  - "2.5.  Full PKI Request Messages\n   Full PKI Request [RFC5272] messages can be\
    \ transported via EST using\n   the Full CMC Request function.  This affords access\
    \ to functions not\n   provided by the Simple Enrollment functions.  Full PKI\
    \ Request\n   messages are defined in Sections 3.2 and 4.2 of [RFC5272].  See\n\
    \   Section 4.3 for a discussion of how EST provides a transport for\n   these\
    \ messages.\n"
- title: 2.6.  Certificate Signing Request (CSR) Attributes Request
  contents:
  - "2.6.  Certificate Signing Request (CSR) Attributes Request\n   Prior to sending\
    \ an enrollment request to an EST server, an EST\n   client can query the EST\
    \ server for a set of additional attributes\n   that the client is requested to\
    \ use in a subsequent enrollment\n   request.\n   These attributes can provide\
    \ additional descriptive information that\n   the EST server cannot access itself,\
    \ such as the Media Access Control\n   (MAC) address of an interface of the EST\
    \ client.  Alternatively,\n   these attributes can indicate the kind of enrollment\
    \ request, such as\n   a specific elliptic curve or a specific hash function that\
    \ the client\n   is expected to use when generating the CSR.\n"
- title: 3.  Protocol Design and Layering
  contents:
  - "3.  Protocol Design and Layering\n   Figure 2 provides an expansion of Figure\
    \ 1, describing how the layers\n   are used.  Each aspect is described in more\
    \ detail in the sections\n   that follow.\n   EST Layering:\n   Protocols and\
    \ uses:\n   +----------------------------------------------------+\n   |     \
    \                                               |\n   | Message types:       \
    \                              |\n   |   - \"Simple PKI\" messages           \
    \               |\n   |     (incorporates proof-of-possession)             |\n\
    \   |   - CA certificate retrieval                       |\n   |   - \"Full PKI\"\
    \ messages (OPTIONAL)                 |\n   |     (incorporates proof-of-possession)\
    \             |\n   |   - CSR Attributes Request (OPTIONAL)              |\n \
    \  |   - Server-generated key request (OPTIONAL)        |\n   |              \
    \                                      |\n   +----------------------------------------------------+\n\
    \   |                                                    |\n   | HTTP:       \
    \                                       |\n   |   - HTTP headers and URIs for\
    \ control              |\n   |      - Content-Type headers specify message type\
    \   |\n   |      - Headers for control/error messages          |\n   |      -\
    \ URIs for selecting functions                |\n   |   - Basic or Digest authentication\
    \ (OPTIONAL)      |\n   |                                                    |\n\
    \   +----------------------------------------------------+\n   |             \
    \                                       |\n   | TLS for transport security:  \
    \                      |\n   |   - Authentication of the EST server          \
    \     |\n   |   - Authentication of the EST client (OPTIONAL)    |\n   |   - Provides\
    \ communications integrity              |\n   |     and confidentiality      \
    \                      |\n   |   - Supplies channel-binding [RFC5929] information\
    \ |\n   |     to link proof-of-identity with message-based   |\n   |     proof-of-possession\
    \ (OPTIONAL)                 |\n   |                                         \
    \           |\n   +----------------------------------------------------+\n   \
    \                              Figure 2\n   Specifying HTTPS as the secure transport\
    \ for enrollment messages\n   introduces two \"layers\" to communicate authentication\
    \ and control\n   messages: TLS and HTTP.\n   The TLS layer provides integrity\
    \ and confidentiality during\n   transport.  The proof-of-identity is supplied\
    \ by TLS handshake\n   authentication and optionally also by the HTTP layer headers.\
    \  The\n   message type and control/error messages are included in the HTTP\n\
    \   headers.\n   CMC ([RFC5272], Section 3.1) notes that \"the Simple PKI Request\
    \ MUST\n   NOT be used if a proof-of-identity needs to be included\".  Since the\n\
    \   TLS and HTTP layers can provide proof-of-identity for EST clients and\n  \
    \ servers, the Simple PKI message types are used.\n   The TLS layer certificate\
    \ exchange provides a method for authorizing\n   client enrollment requests using\
    \ existing certificates.  Such\n   certificates may have been issued by the CA\
    \ (from which the client is\n   requesting a certificate), or they may have been\
    \ issued under a\n   distinct PKI (e.g., an IEEE 802.1AR Initial Device Identifier\n\
    \   (IDevID) [IDevID] credential).\n   Proof-of-possession (POP) is a distinct\
    \ issue from proof-of-identity\n   and is included in the Simple PKI message type\
    \ as described in\n   Section 3.4.  A method of linking proof-of-identity and\n\
    \   proof-of-possession is described in Section 3.5.\n   This document also defines\
    \ transport for CMC [RFC5272] that complies\n   with the CMC Transport Protocols\
    \ [RFC5273].  CMC's POP and\n   proof-of-identity mechanisms are defined in CMC,\
    \ but the mechanisms\n   here can also be used in conjunction with those mechanisms\
    \ in \"Full\n   PKI\" messages.\n   During protocol exchanges, different certificates\
    \ can be used.  The\n   following table provides an informative overview.  End-entities\
    \ can\n   have one or more certificates of each type listed in Figure 3 and use\n\
    \   one or more trust anchor databases of each type listed in Figure 4.\n   Certificates\
    \ and their corresponding uses:\n   +--------------+--------------------+-------------------------------+\n\
    \   | Certificate  | Issuer             | Use and section references    |\n  \
    \ +==============+====================+===============================+\n   |\
    \ EST server   | The CA served by   | Presented by the EST server   |\n   | certificate\
    \  | the EST server     | during the TLS handshake.     |\n   |              |\
    \                    |                               |\n   |              |  \
    \                  | Section 3.3.1                 |\n   +--------------+--------------------+-------------------------------+\n\
    \   | EST server   | A CA               | Presented by the EST server   |\n  \
    \ | certificate  | authenticatable by | during the TLS handshake.     |\n   |\
    \              | a third-party TA,  |                               |\n   |  \
    \            | e.g., a web server | Section 3.3.1 and             |\n   |    \
    \          | CA                 | Security Considerations       |\n   +--------------+--------------------+-------------------------------+\n\
    \   | Third-party  | A CA               | Presented by the EST client   |\n  \
    \ | EST client   | authenticatable by | to the EST server by clients  |\n   |\
    \ certificate  | a third-party TA,  | that have not yet enrolled.   |\n   |  \
    \            | e.g., a device     |                               |\n   |    \
    \          | manufacturer       | Section 3.3.2                 |\n   +--------------+--------------------+-------------------------------+\n\
    \   | EST client   | The CA served by   | Presented to the EST server   |\n  \
    \ | certificate  | the EST server     | during future EST operations. |\n   |\
    \              |                    |                               |\n   |  \
    \            |                    | Section 3.3.2                 |\n   +--------------+--------------------+-------------------------------+\n\
    \   | End-entity   | The CA served by   | Clients can obtain certs      |\n  \
    \ | certificate  | the EST server     | that are intended for         |\n   |\
    \              |                    | non-EST uses.  This includes  |\n   |  \
    \            |                    | certs that cannot be used     |\n   |    \
    \          |                    | for EST operations.           |\n   |      \
    \        |                    |                               |\n   |        \
    \      |                    | Section 4.2.3                 |\n   +--------------+--------------------+-------------------------------+\n\
    \                                 Figure 3\n   Trust anchor databases and their\
    \ corresponding uses:\n   +--------------+----------------------------------------------------+\n\
    \   | TA database  | Use and section references                         |\n  \
    \ +==============+====================================================+\n   |\
    \ EST server   | EST servers use this TA database to authenticate   |\n   | Explicit\
    \     | certificates issued by the EST CA, including EST   |\n   | TA database\
    \  | client certificates during enroll/re-enroll        |\n   |              |\
    \ operations.                                        |\n   |              |  \
    \                                                  |\n   |              | Section\
    \ 3.3.2                                      |\n   +--------------+----------------------------------------------------+\n\
    \   | EST server   | EST servers use this TA database to authenticate   |\n  \
    \ | Implicit     | certificates issued by third-party TAs;            |\n   |\
    \ TA database  | e.g., EST client certificates issued by a device   |\n   |  \
    \            | manufacturer.                                      |\n   |    \
    \          | An Implicit TA database can be disabled.           |\n   |      \
    \        |                                                    |\n   |        \
    \      | Section 3.3.2                                      |\n   +--------------+----------------------------------------------------+\n\
    \   | EST client   | EST clients use this TA database to authenticate   |\n  \
    \ | Explicit     | certificates issued by the EST CA, including EST   |\n   |\
    \ TA database  | server certificates.                               |\n   |  \
    \            |                                                    |\n   |    \
    \          | Sections 3.1, 3.3.1, 3.6.1, and 4.1.1              |\n   +--------------+----------------------------------------------------+\n\
    \   | EST client   | EST clients use this TA database to                |\n  \
    \ | Implicit     | authenticate an EST server that uses an externally |\n   |\
    \ TA database  | issued certificate.                                |\n   |  \
    \            | An Implicit TA database can be disabled.           |\n   |    \
    \          |                                                    |\n   |      \
    \        | Sections 3.1, 3.3.1, 3.6.2, and                    |\n   |        \
    \      | Security Considerations                            |\n   +--------------+----------------------------------------------------+\n\
    \                                 Figure 4\n"
- title: 3.1.  Application Layer
  contents:
  - "3.1.  Application Layer\n   The EST client MUST be capable of generating and\
    \ parsing Simple PKI\n   messages (see Section 4.2).  Generating and parsing Full\
    \ PKI messages\n   is OPTIONAL (see Section 4.3).  The client MUST also be able\
    \ to\n   request CA certificates from the EST server and parse the returned\n\
    \   \"bag\" of certificates (see Section 4.1).  Requesting CSR attributes\n  \
    \ and parsing the returned list of attributes is OPTIONAL (see\n   Section 4.5).\n\
    \   Details of the EST client application configuration are out of scope\n   of\
    \ the protocol discussion but are necessary for understanding the\n   prerequisites\
    \ of initiating protocol operations.  The EST client is\n   RECOMMENDED to be\
    \ configured with TA databases for Section 3.3.1 or\n   with a secret key for\
    \ Section 3.3.3.  Implementations conforming to\n   this standard MUST provide\
    \ the ability to designate Explicit TAs.\n   For human usability reasons, a \"\
    fingerprint\" of an Explicit TA\n   database entry can be configured for bootstrapping\
    \ as discussed in\n   Section 4.1.1.  Configuration of an Implicit TA database,\
    \ perhaps by\n   its inclusion within the EST client distribution or available\
    \ from\n   the operating system, provides flexibility along with the caveats\n\
    \   detailed in Section 6.  Implementations conforming to this standard\n   MUST\
    \ provide the ability to disable use of any Implicit TA database.\n   The EST\
    \ client is configured with sufficient information to form the\n   EST server\
    \ URI.  This can be the full operation path segment (e.g.,\n   https://www.example.com/.well-known/est/\
    \ or\n   https://www.example.com/.well-known/est/arbitraryLabel1), or the EST\n\
    \   client can be configured with a tuple composed of the authority\n   portion\
    \ of the URI along with the OPTIONAL label (e.g.,\n   \"www.example.com:80\" and\
    \ \"arbitraryLabel1\") or just the authority\n   portion of the URI.\n"
- title: 3.2.  HTTP Layer
  contents:
  - "3.2.  HTTP Layer\n   HTTP is used to transfer EST messages.  URIs are defined\
    \ for handling\n   each media type (i.e., message type) as described in Section\
    \ 3.2.2.\n   HTTP is also used for client authentication services when TLS client\n\
    \   authentication is not available, due to the lack of a client\n   certificate\
    \ suitable for use by TLS (see Section 3.2.3).  HTTP\n   authentication can also\
    \ be used in addition to TLS client\n   authentication if the EST server wishes\
    \ additional authentication\n   information, as noted in Section 2.2.3.  Registered\
    \ media types are\n   used to convey EST messages as specified in Figure 6.\n\
    \   HTTP 1.1 [RFC2616] and above support persistent connections.  As\n   described\
    \ in Section 8.1 of RFC 2616, persistent connections may be\n   used to reduce\
    \ network and processing loads associated with multiple\n   HTTP requests.  EST\
    \ does not require or preclude persistent HTTP\n   connections.\n"
- title: 3.2.1.  HTTP Headers for Control
  contents:
  - "3.2.1.  HTTP Headers for Control\n   The HTTP Status value is used to communicate\
    \ success or failure of an\n   EST function.  HTTP authentication is used by a\
    \ client when requested\n   by the server.\n   The media types specified in the\
    \ HTTP Content-Type header indicate\n   which EST message is being transferred.\
    \  Media types used by EST are\n   specified in Section 3.2.4.\n   HTTP redirections\
    \ (3xx status codes) to the same web origin (see\n   [RFC6454]) SHOULD be handled\
    \ by the client without user input so long\n   as all applicable security checks\
    \ (Sections 3.3 and 3.6) have been\n   enforced on the initial connection.  The\
    \ client initiates a new TLS\n   connection and performs all applicable security\
    \ checks when\n   redirected to other web origin servers.  Redirections to other\
    \ web\n   origins require the EST client to obtain user input for non-GET or\n\
    \   HEAD requests as specified in [RFC2616].  Additionally, if the client\n  \
    \ has already generated a CSR that includes linking identity and POP\n   information\
    \ (Section 3.5), then the CSR will need to be recreated to\n   incorporate the\
    \ tls-unique from the new, redirected session.  Note:\n   the key pair need not\
    \ be regenerated.  These are processing and\n   interface burdens on the client.\
    \  EST server administrators are\n   advised to take this into consideration.\n"
- title: 3.2.2.  HTTP URIs for Control
  contents:
  - "3.2.2.  HTTP URIs for Control\n   The EST server MUST support the use of the\
    \ path-prefix of \"/.well-\n   known/\" as defined in [RFC5785] and the registered\
    \ name of \"est\".\n   Thus, a valid EST server URI path begins with\n   \"https://www.example.com/.well-known/est\"\
    .  Each EST operation is\n   indicated by a path-suffix that indicates the intended\
    \ operation:\n   Operations and their corresponding URIs:\n   +------------------------+-----------------+-------------------+\n\
    \   | Operation              |Operation path   | Details           |\n   +========================+=================+===================+\n\
    \   | Distribution of CA     | /cacerts        | Section 4.1       |\n   | Certificates\
    \ (MUST)    |                 |                   |\n   +------------------------+-----------------+-------------------+\n\
    \   | Enrollment of          | /simpleenroll   | Section 4.2       |\n   | Clients\
    \ (MUST)         |                 |                   |\n   +------------------------+-----------------+-------------------+\n\
    \   | Re-enrollment of       | /simplereenroll | Section 4.2.2     |\n   | Clients\
    \ (MUST)         |                 |                   |\n   +------------------------+-----------------+-------------------+\n\
    \   | Full CMC (OPTIONAL)    | /fullcmc        | Section 4.3       |\n   +------------------------+-----------------+-------------------+\n\
    \   | Server-Side Key        | /serverkeygen   | Section 4.4       |\n   | Generation\
    \ (OPTIONAL)  |                 |                   |\n   +------------------------+-----------------+-------------------+\n\
    \   | CSR Attributes         | /csrattrs       | Section 4.5       |\n   | (OPTIONAL)\
    \             |                 |                   |\n   +------------------------+-----------------+-------------------+\n\
    \                                 Figure 5\n   The operation path (Figure 5) is\
    \ appended to the path-prefix to form\n   the URI used with HTTP GET or POST to\
    \ perform the desired EST\n   operation.  An example valid URI absolute path for\
    \ the \"/cacerts\"\n   operation is \"/.well-known/est/cacerts\".  To retrieve\
    \ the CA's\n   certificates, the EST client would use the following HTTP\n   request-line:\n\
    \   GET /.well-known/est/cacerts HTTP/1.1\n   Likewise, to request a new certificate\
    \ in this example scheme, the\n   EST client would use the following request-line:\n\
    \   POST /.well-known/est/simpleenroll HTTP/1.1\n   The use of distinct operation\
    \ paths simplifies implementation for\n   servers that do not perform client authentication\
    \ when distributing\n   /cacerts responses.\n   An EST server MAY provide service\
    \ for multiple CAs as indicated by an\n   OPTIONAL additional path segment between\
    \ the registered application\n   name and the operation path.  To avoid conflict,\
    \ the CA label MUST\n   NOT be the same as any defined operation path segment.\
    \  The EST\n   server MUST provide services regardless of whether the additional\n\
    \   path segment is present.  The following are three example valid URIs:\n  \
    \ 1.  https://www.example.com/.well-known/est/cacerts\n   2.  https://www.example.com/.well-known/est/arbitraryLabel1/cacerts\n\
    \   3.  https://www.example.com/.well-known/est/arbitraryLabel2/cacerts\n   In\
    \ this specification, the distinction between enroll and renew/rekey\n   is explicitly\
    \ indicated by the HTTP URI.  When requesting /fullcmc\n   operations, CMC [RFC5272]\
    \ uses the same messages for certificate\n   renewal and certificate rekey.\n\
    \   An EST server can provide additional services using other URIs.\n"
- title: 3.2.3.  HTTP-Based Client Authentication
  contents:
  - "3.2.3.  HTTP-Based Client Authentication\n   The EST server MAY request HTTP-based\
    \ client authentication.  This\n   request can be in addition to successful TLS\
    \ client authentication\n   (Section 3.3.2) if EST server policy requires additional\n\
    \   authentication.  (For example, the EST server may require that an EST\n  \
    \ client \"knows\" a password in addition to \"having\" an existing client\n \
    \  certificate.)  Or, HTTP-based client authentication can be an EST\n   server\
    \ policy-specified fallback in situations where the EST client\n   did not successfully\
    \ complete the TLS client authentication.  (This\n   might arise if the EST client\
    \ is enrolling for the first time or if\n   the certificates available to an EST\
    \ client cannot be used for TLS\n   client authentication.)\n   HTTP Basic and\
    \ Digest authentication MUST only be performed over TLS\n   1.1 [RFC4346] or later\
    \ versions.  NULL and anon cipher suites MUST\n   NOT be used because they do\
    \ not provide confidentiality or support\n   mutual certificate-based or certificate-less\
    \ authentication,\n   respectively.  As specified in \"Certificate Management\
    \ over CMS\n   (CMC): Transport Protocols\" [RFC5273], the server \"MUST NOT assume\n\
    \   client support for any type of HTTP authentication such as cookies,\n   Basic\
    \ authentication, or Digest authentication\".  Clients SHOULD\n   support the\
    \ Basic and Digest authentication mechanism.\n   Servers that wish to use Basic\
    \ and Digest authentication reject the\n   HTTP request using the HTTP-defined\
    \ WWW-Authenticate response-header\n   ([RFC2616], Section 14.47).  The client\
    \ is expected to retry the\n   request, including the appropriate Authorization\
    \ Request header\n   ([RFC2617], Section 3.2.2), if the client is capable of using\
    \ the\n   Basic or Digest authentication.  If the client is not capable of\n \
    \  retrying the request or it is not capable of Basic or Digest\n   authentication,\
    \ then the client MUST terminate the connection.\n   A client MAY set the username\
    \ to the empty string (\"\") if it is\n   presenting a password that is not associated\
    \ with a username.\n   Support for HTTP-based client authentication has security\n\
    \   ramifications as discussed in Section 6.  The client MUST NOT respond\n  \
    \ to the server's HTTP authentication request unless the client has\n   authorized\
    \ the EST server (as per Section 3.6).\n"
- title: 3.2.4.  Message Types
  contents:
  - "3.2.4.  Message Types\n   This document uses existing media types for the messages\
    \ as specified\n   by FTP and HTTP [RFC2585], application/pkcs10 [RFC5967], and\
    \ CMC\n   [RFC5272].\n   For consistency with [RFC5273], each distinct EST message\
    \ type uses\n   an HTTP Content-Type header with a specific media type.\n   The\
    \ EST messages and their corresponding media types for each\n   operation are:\n\
    \   +--------------------+--------------------------+-------------------+\n  \
    \ | Message type       | Request media type       | Request section(s)|\n   |\
    \                    | Response media type(s)   | Response section  |\n   | (per\
    \ operation)    | Source(s) of types       |                   |\n   +====================+==========================+===================+\n\
    \   | Distribution of CA | N/A                      | Section 4.1       |\n  \
    \ | Certificates       | application/pkcs7-mime   | Section 4.1.1     |\n   |\
    \                    | [RFC5751]                |                   |\n   | /cacerts\
    \           |                          |                   |\n   +--------------------+--------------------------+-------------------+\n\
    \   | Client Certificate | application/pkcs10       | Sections 4.2/4.2.1|\n  \
    \ | Request Functions  | application/pkcs7-mime   | Section 4.2.2     |\n   |\
    \                    | [RFC5967] [RFC5751]      |                   |\n   | /simpleenroll\
    \      |                          |                   |\n   | /simplereenroll\
    \    |                          |                   |\n   +--------------------+--------------------------+-------------------+\n\
    \   | Full CMC           | application/pkcs7-mime   | Section 4.3.1     |\n  \
    \ |                    | application/pkcs7-mime   | Section 4.3.2     |\n   |\
    \ /fullcmc           | [RFC5751]                |                   |\n   +--------------------+--------------------------+-------------------+\n\
    \   | Server-Side Key    | application/pkcs10       | Section 4.4.1     |\n  \
    \ | Generation         | multipart/mixed          | Section 4.4.2     |\n   |\
    \                    | (application/pkcs7-mime &|                   |\n   |  \
    \                  | application/pkcs8)       |                   |\n   |    \
    \                | [RFC5967] [RFC5751]      |                   |\n   | /serverkeygen\
    \      | [RFC5958]                |                   |\n   +--------------------+--------------------------+-------------------+\n\
    \   | CSR Attributes     | N/A                      | Section 4.5.1     |\n  \
    \ |                    | application/csrattrs     | Section 4.5.2     |\n   |\
    \                    | (This document)          |                   |\n   | /csrattrs\
    \          |                          |                   |\n   +--------------------+--------------------------+-------------------+\n\
    \                                 Figure 6\n"
- title: 3.3.  TLS Layer
  contents:
  - "3.3.  TLS Layer\n   TLS provides authentication, which in turn enables authorization\n\
    \   decisions.  The EST server and EST client are responsible for\n   ensuring\
    \ that an acceptable cipher suite is negotiated and that\n   mutual authentication\
    \ has been performed.  TLS authentication is most\n   commonly enabled with the\
    \ use of certificates [RFC5280].\n   Alternately, certificate-less TLS authentication,\
    \ where neither the\n   client nor server present a certificate, is also an acceptable\
    \ method\n   for EST mutual authentication (Section 3.3.3).  The EST server MUST\n\
    \   be authenticated during the TLS handshake unless the client is\n   requesting\
    \ Bootstrap Distribution of CA certificates (Section 4.1.1)\n   or Full CMC (Section\
    \ 4.3).\n   HTTPS [RFC2818] specifies how HTTP messages are carried over TLS.\n\
    \   HTTPS MUST be used.  TLS 1.1 [RFC4346] (or a later version) MUST be\n   used\
    \ for all EST communications.  TLS session resumption [RFC5077]\n   SHOULD be\
    \ supported.\n   TLS channel-binding information can be inserted into a certificate\n\
    \   request, as detailed in Section 3.5, in order to provide the EST\n   server\
    \ with assurance that the authenticated TLS client has access to\n   the private\
    \ key for the certificate being requested.  The EST server\n   MUST implement\
    \ Section 3.5.\n"
- title: 3.3.1.  TLS-Based Server Authentication
  contents:
  - "3.3.1.  TLS-Based Server Authentication\n   TLS server authentication with certificates\
    \ MUST be supported.\n   The EST client authenticates the EST server as defined\
    \ for the cipher\n   suite negotiated.  The following text provides details assuming\
    \ a\n   certificate-based cipher suite, such as the TLS 1.1 [RFC4346]\n   mandatory\
    \ cipher suite (TLS_RSA_WITH_3DES_EDE_CBC_SHA).\n   Certificate validation MUST\
    \ be performed as per [RFC5280].  The EST\n   server certificate MUST conform\
    \ to the [RFC5280] certificate profile.\n   The client validates the TLS server\
    \ certificate using the EST client\n   Explicit and, if enabled, Implicit TA database(s).\
    \  The client MUST\n   maintain a distinction between the use of Explicit and\
    \ Implicit TA\n   databases during authentication in order to support proper\n\
    \   authorization.  The EST client MUST perform authorization checks as\n   specified\
    \ in Section 3.6.\n   If certificate validation fails, the client MAY follow the\
    \ procedure\n   outlined in Section 4.1.1 for Bootstrap Distribution of CA\n \
    \  certificates.\n"
- title: 3.3.2.  TLS-Based Client Authentication
  contents:
  - "3.3.2.  TLS-Based Client Authentication\n   TLS client authentication is the\
    \ RECOMMENDED method for identifying\n   EST clients.  HTTP-based client authentication\
    \ (Section 3.2.3) MAY be\n   used.\n   The EST server authenticates the EST client\
    \ as defined for the cipher\n   suite negotiated.  The following text provides\
    \ details assuming a\n   certificate-based cipher suite such as the TLS 1.1 [RFC4346]\n\
    \   mandatory cipher suite (TLS_RSA_WITH_3DES_EDE_CBC_SHA).  The EST\n   server\
    \ MUST support certificate-based client authentication.\n   Generally, the client\
    \ will use an existing certificate for renew or\n   rekey operations.  If the\
    \ certificate to be renewed or rekeyed is\n   appropriate for the negotiated cipher\
    \ suite, then the client MUST use\n   it for the TLS handshake, otherwise the\
    \ client SHOULD use an\n   alternate certificate that is suitable for the cipher\
    \ suite and\n   contains the same subject identity information.  When requesting\
    \ an\n   enroll operation, the client MAY use a client certificate issued by a\n\
    \   third party to authenticate itself.\n   Certificate validation MUST be performed\
    \ as per [RFC5280].  The EST\n   client certificate MUST conform to the [RFC5280]\
    \ certificate profile.\n   The server validates the TLS client certificate using\
    \ the EST server\n   Explicit and, if enabled, Implicit TA database(s).  The server\
    \ MUST\n   maintain a distinction between the use of Explicit and Implicit TA\n\
    \   databases during authentication in order to support proper\n   authorization.\n\
    \   The EST server MUST perform authorization checks as specified in\n   Section\
    \ 3.7.\n   If a client does not support TLS client authentication, then it MUST\n\
    \   support HTTP-based client authentication (Section 3.2.3) or\n   certificate-less\
    \ TLS authentication (Section 3.3.3).\n"
- title: 3.3.3.  Certificate-Less TLS Mutual Authentication
  contents:
  - "3.3.3.  Certificate-Less TLS Mutual Authentication\n   Certificate-less TLS cipher\
    \ suites provide a way to perform mutual\n   authentication in situations where\
    \ neither the client nor server have\n   certificates, do not desire to use certificates,\
    \ or do not have the\n   trust anchors necessary to verify a certificate.  The\
    \ client and\n   server MAY negotiate a certificate-less cipher suite for mutual\n\
    \   authentication.\n   When using certificate-less mutual authentication in TLS\
    \ for\n   enrollment, the cipher suite MUST be based on a protocol that is\n \
    \  resistant to dictionary attack and MUST be based on a zero knowledge\n   protocol.\
    \  Transport Layer Security-Secure Remote Password (TLS-SRP)\n   cipher suites,\
    \ i.e., those with _SRP_ in the name, listed in\n   Section 2.7 of [RFC5054] are\
    \ suitable for this purpose.  Section 6\n   lists the characteristics of a cipher\
    \ suite that are suitable for use\n   in certificate-less mutual authentication\
    \ for enrollment.\n   Successful authentication using a certificate-less cipher\
    \ suite\n   proves knowledge of a pre-shared secret that implicitly authorizes\
    \ a\n   peer in the exchange.\n"
- title: 3.4.  Proof-of-Possession
  contents:
  - "3.4.  Proof-of-Possession\n   As defined in Section 2.1 of CMC [RFC5272], proof-of-possession\
    \ (POP)\n   \"refers to a value that can be used to prove that the private key\n\
    \   corresponding to the public key is in the possession of and can be\n   used\
    \ by an end-entity\".\n   The signed enrollment request provides a signature-based\n\
    \   proof-of-possession.  The mechanism described in Section 3.5\n   strengthens\
    \ this by optionally including \"Direct\"-based\n   proof-of-possession [RFC5272]\
    \ by including TLS session-specific\n   information within the data covered by\
    \ the enrollment request\n   signature (thus linking the enrollment request to\
    \ the authenticated\n   end point of the TLS connection).\n"
- title: 3.5.  Linking Identity and POP Information
  contents:
  - "3.5.  Linking Identity and POP Information\n   Server policy will determine whether\
    \ clients are required to use the\n   mechanism specified in this section.  This\
    \ specification provides a\n   method of linking identity and proof-of-possession\
    \ by including\n   information specific to the current authenticated TLS session\
    \ within\n   the signed certification request.  The client can determine if the\n\
    \   server requires the linking of identity and POP by examining the CSR\n   Attributes\
    \ Response (see Section 4.5.2).  Regardless of the CSR\n   Attributes Response,\
    \ clients SHOULD link identity and POP by\n   embedding tls-unique information\
    \ in the certification request.  If\n   tls-unique information is included by\
    \ the client, the server MUST\n   verify it.  The EST server MAY reject requests\
    \ without tls-unique\n   information as indicated by server policy.\n   Linking\
    \ identity and proof-of-possession proves to the server that\n   the authenticated\
    \ TLS client has possession of the private key\n   associated with the certification\
    \ request, and that the client was\n   able to sign the certification request\
    \ after the TLS session was\n   established.  This is an alternative to the \"\
    Linking Identity and POP\n   Information\" method defined by Section 6 of [RFC5272]\
    \ that is\n   available if Full PKI messages are used.\n   The client generating\
    \ the CSR obtains the tls-unique value from the\n   TLS subsystem as described\
    \ in Channel Bindings for TLS [RFC5929].\n   The EST client operations between\
    \ obtaining the tls-unique value\n   through generation of the CSR that contains\
    \ the current tls-unique\n   value and the subsequent verification of this value\
    \ by the EST server\n   are the \"phases of the application protocol during which\
    \ application-\n   layer authentication occurs\"; these operations are protected\
    \ by the\n   synchronization interoperability mechanism described in the \"Channel\n\
    \   Bindings for TLS\" interoperability notes in Section 3.1 of [RFC5929].\n \
    \  When performing renegotiation, TLS \"secure_renegotiation\" [RFC5746]\n   MUST\
    \ be used.\n   The tls-unique value is base64 encoded as specified in Section\
    \ 4 of\n   [RFC4648], and the resulting string is placed in the certification\n\
    \   request challenge-password field ([RFC2985], Section 5.4.1).  The\n   challenge-password\
    \ field is limited to 255 bytes (Section 7.4.9 of\n   [RFC5246] indicates that\
    \ no existing cipher suite would result in an\n   issue with this limitation).\
    \  If the challenge-password attribute is\n   absent, the client did not include\
    \ the optional channel-binding\n   information (the presence of the challenge-password\
    \ attribute\n   indicates the inclusion of tls-unique information).\n   If the\
    \ EST server makes use of a back-end infrastructure for\n   processing, it is\
    \ RECOMMENDED that the results of this verification\n   be communicated.  (For\
    \ example, this communication might use the CMC\n   [RFC5272] \"RA POP Witness\
    \ Control\" in a CMC Full PKI Request message.\n   Or, an EST server might TLS-authenticate\
    \ an EST client as being a\n   trusted infrastructure element that does not forward\
    \ invalid\n   requests.  A detailed discussion of back-end processing is out of\n\
    \   scope.)\n   When rejecting requests, the EST server response is as described\
    \ for\n   all enroll responses (Section 4.2.3).  If a Full PKI Response is\n \
    \  included, the CMCFailInfo MUST be set to popFailed.  If a human-\n   readable\
    \ reject message is included, it SHOULD include an informative\n   text message\
    \ indicating that the linking of identity and POP\n   information is required.\n"
- title: 3.6.  Server Authorization
  contents:
  - "3.6.  Server Authorization\n   The client MUST check EST server authorization\
    \ before accepting any\n   server responses or responding to HTTP authentication\
    \ requests.\n   The EST client authorization method depends on which method was\
    \ used\n   to authenticate the server.  When the Explicit TA database is used\
    \ to\n   authenticate the EST server, then Section 3.6.1 applies.  When the\n\
    \   Implicit TA database is used to authenticate the EST server, then\n   Section\
    \ 3.6.2 applies.  Successful authentication using a\n   certificate-less cipher\
    \ suite implies authorization of the server.\n   The client MAY perform bootstrapping\
    \ as specified in Section 4.1.1\n   even if these checks fail.\n"
- title: 3.6.1.  Client Use of Explicit TA Database
  contents:
  - "3.6.1.  Client Use of Explicit TA Database\n   When the EST client Explicit TA\
    \ database is used to validate the EST\n   server certificate, the client MUST\
    \ check either the configured URI\n   or the most recent HTTP redirection URI\
    \ against the server's identity\n   according to the rules specified in [RFC6125],\
    \ Section 6.4, or the\n   EST server certificate MUST contain the id-kp-cmcRA\
    \ [RFC6402]\n   extended key usage extension.\n"
- title: 3.6.2.  Client Use of Implicit TA Database
  contents:
  - "3.6.2.  Client Use of Implicit TA Database\n   When the EST client Implicit TA\
    \ database is used to validate the EST\n   server certificate, the client MUST\
    \ check the configured URI and each\n   HTTP redirection URI according to the\
    \ rules specified in [RFC6125],\n   Section 6.4.  The provisioned URI or the most\
    \ recent HTTP redirection\n   URI provides the basis for authorization, and the\
    \ server's\n   authenticated identity confirms it is the authorized server.\n"
- title: 3.7.  Client Authorization
  contents:
  - "3.7.  Client Authorization\n   The decision to issue a certificate to a client\
    \ is always controlled\n   by local CA policy.  The EST server configuration reflects\
    \ this CA\n   policy.  This document does not specify any constraints on such\n\
    \   policy.  EST provides the EST server access to each client's\n   authenticated\
    \ identity -- e.g., the TLS client's certificate in\n   addition to any HTTP user\
    \ authentication credentials -- to help in\n   implementing such policy.\n   If\
    \ the client's certificate was issued by the EST CA, and it includes\n   the id-kp-cmcRA\
    \ [RFC6402] extended key usage extension, then the\n   client is a Registration\
    \ Authority (RA) as described in [RFC5272] and\n   [RFC6402].  In this case, the\
    \ EST server SHOULD apply authorization\n   policy consistent with an RA client.\
    \  For example, when handling\n   /simpleenroll requests, the EST server could\
    \ be configured to accept\n   POP linking information that does not match the\
    \ current TLS session\n   because the authenticated EST client RA has verified\
    \ this information\n   when acting as an EST server (as specified in Section 3.5).\
    \  More\n   specific RA mechanisms are available if the EST client uses /fullcmc\n\
    \   methods.\n"
- title: 4.  Protocol Exchange Details
  contents:
  - "4.  Protocol Exchange Details\n   Before processing a request, an EST server\
    \ determines if the client\n   is authorized to receive the requested services.\
    \  Likewise, the\n   client determines if it will make requests to the EST server.\
    \  These\n   authorization decisions are described in the next two sections.\n\
    \   Assuming that both sides of the exchange are authorized, then the\n   actual\
    \ operations are as described in subsequent sections.\n"
- title: 4.1.  Distribution of CA Certificates
  contents:
  - "4.1.  Distribution of CA Certificates\n   The EST client can request a copy of\
    \ the current CA certificates.\n   This function is generally performed before\
    \ other EST functions.\n"
- title: 4.1.1.  Bootstrap Distribution of CA Certificates
  contents:
  - "4.1.1.  Bootstrap Distribution of CA Certificates\n   It is possible that the\
    \ client was not configured with an Implicit TA\n   database that allows a bootstrap\
    \ installation of the Explicit TA\n   database as described in 4.1.3.  This section\
    \ describes an alternate\n   method by which minimally configured EST clients\
    \ can populate their\n   Explicit TA database.\n   If the EST client application\
    \ does not specify either an Explicit TA\n   database or an Implicit TA database,\
    \ then the initial TLS server\n   authentication and authorization will fail.\
    \  The client MAY\n   provisionally continue the TLS handshake to completion for\
    \ the\n   purposes of accessing the /cacerts or /fullcmc method.  If the EST\n\
    \   client continues with an unauthenticated connection, the client MUST\n   extract\
    \ the HTTP content data from the response (Sections 4.1.3 or\n   4.3.2) and engage\
    \ a human user to authorize the CA certificate using\n   out-of-band data such\
    \ as a CA certificate \"fingerprint\" (e.g., a\n   SHA-256 or SHA-512 [SHS] hash\
    \ on the whole CA certificate).  In a\n   /fullcmc response, it is the Publish\
    \ Trust Anchors control (CMC\n   [RFC5272], Section 6.15) within the Full PKI\
    \ Response that must be\n   accepted manually.  It is incumbent on the user to\
    \ properly verify\n   the TA information, or to provide the \"fingerprint\" data\
    \ during\n   configuration that is necessary to verify the TA information.\n \
    \  HTTP authentication requests MUST NOT be responded to if the server\n   has\
    \ not been authenticated as specified in Section 3.3.1 or if the\n   optional\
    \ certificate-less authentication is used as specified in\n   Section 3.3.3.\n\
    \   The EST client uses the /cacerts response to establish an Explicit\n   Trust\
    \ Anchor database for subsequent TLS authentication of the EST\n   server.  EST\
    \ clients MUST NOT engage in any other protocol exchange\n   until after the /cacerts\
    \ response has been accepted and a new TLS\n   session has been established (using\
    \ TLS certificate-based\n   authentication).\n"
- title: 4.1.2.  CA Certificates Request
  contents:
  - "4.1.2.  CA Certificates Request\n   EST clients request the EST CA TA database\
    \ information of the CA (in\n   the form of certificates) with an HTTPS GET message\
    \ using an\n   operation path of \"/cacerts\".  EST clients and servers MUST support\n\
    \   the /cacerts function.  Clients SHOULD request an up-to-date response\n  \
    \ before stored information has expired in order to ensure the EST CA\n   TA database\
    \ is up to date.\n   The EST server SHOULD NOT require client authentication or\n\
    \   authorization to reply to this request.\n   The client MUST authenticate the\
    \ EST server, as specified in\n   Section 3.3.1 if certificate-based authentication\
    \ is used or\n   Section 3.3.3 if the optional certificate-less authentication\
    \ is\n   used, and check the server's authorization as given in Section 3.6,\n\
    \   or follow the procedure outlined in Section 4.1.1.\n"
- title: 4.1.3.  CA Certificates Response
  contents:
  - "4.1.3.  CA Certificates Response\n   If successful, the server response MUST\
    \ have an HTTP 200 response\n   code.  Any other response code indicates an error\
    \ and the client MUST\n   abort the protocol.\n   A successful response MUST be\
    \ a certs-only CMC Simple PKI Response,\n   as defined in [RFC5272], containing\
    \ the certificates described in the\n   following paragraph.  The HTTP content-type\
    \ of\n   \"application/pkcs7-mime\" is used.  The Simple PKI Response is sent\n\
    \   with a Content-Transfer-Encoding of \"base64\" [RFC2045].\n   The EST server\
    \ MUST include the current root CA certificate in the\n   response.  The EST server\
    \ MUST include any additional certificates\n   the client would need to build\
    \ a chain from an EST CA-issued\n   certificate to the current EST CA TA.  For\
    \ example, if the EST CA is\n   a subordinate CA, then all the appropriate subordinate\
    \ CA\n   certificates necessary to build a chain to the root EST CA are\n   included\
    \ in the response.\n   The EST server SHOULD include the three \"Root CA Key Update\"\
    \n   certificates OldWithOld, OldWithNew, and NewWithOld in the response\n   chain.\
    \  These are defined in Section 4.4 of CMP [RFC4210].  The EST\n   client MUST\
    \ be able to handle these certificates in the response.\n   The EST CA's most\
    \ recent self-signed certificate (e.g., NewWithNew\n   certificate) is self-signed\
    \ and has the latest NotAfter date.  If the\n   EST server does not include these\
    \ in the response, then after the\n   current EST CA certificate expires, the\
    \ EST clients will need to be\n   reinitialized with the PKI using the Bootstrap\
    \ Distribution of CA\n   certificates (Section 4.1.1) method, which involves user\
    \ interaction.\n   After out-of-band validation occurs, all the other certificates\
    \ MUST\n   be validated using normal [RFC5280] certificate path validation\n \
    \  (using the most recent CA certificate as the TA) before they can be\n   used\
    \ to build certificate paths during certificate validation.\n   The EST client\
    \ MUST store the extracted EST CA certificate as an\n   Explicit TA database entry\
    \ for subsequent EST server authentication.\n   The EST client SHOULD disable\
    \ use of Implicit TA database entries for\n   this EST server now that an Explicit\
    \ TA database entry is available.\n   If the client disables the Implicit TA database,\
    \ and if the EST\n   server certificate was verified using an Implicit TA database\
    \ entry,\n   then the client MUST include the \"Trusted CA Indication\" extension\
    \ in\n   future TLS sessions [RFC6066].  This indicates to the server that\n \
    \  only an EST server certificate authenticatable by the Explicit TA\n   database\
    \ entry is now acceptable (otherwise, the EST server might\n   continue to use\
    \ a server certificate that is only verifiable by a now\n   disabled Implicit\
    \ TA).\n   The EST client SHOULD also make the CA Certificate response\n   information\
    \ available to the end-entity software for use when\n   validating peer certificates.\n"
- title: 4.2.  Client Certificate Request Functions
  contents:
  - "4.2.  Client Certificate Request Functions\n   EST clients request a certificate\
    \ from the EST server with an HTTPS\n   POST using the operation path value of\
    \ \"/simpleenroll\".  EST clients\n   request a renew/rekey of existing certificates\
    \ with an HTTP POST\n   using the operation path value of \"/simplereenroll\"\
    .  EST servers\n   MUST support the /simpleenroll and /simplereenroll functions.\n\
    \   It is RECOMMENDED that a client obtain the current CA certificates,\n   as\
    \ described in Section 4.1, before performing certificate request\n   functions.\
    \  This ensures that the client will be able to validate the\n   EST server certificate.\
    \  The client MUST authenticate the EST server\n   as specified in Section 3.3.1\
    \ if certificate-based authentication is\n   used or Section 3.3.3 if the optional\
    \ certificate-less authentication\n   is used.  The client MUST verify the authorization\
    \ of the EST server\n   as specified in Section 3.6.\n   The server MUST authenticate\
    \ the client as specified in Section 3.3.2\n   if certificate-based authentication\
    \ is used or Section 3.3.3 if the\n   optional certificate-less authentication\
    \ is used.  The server MUST\n   verify client authorization as specified in Section\
    \ 3.7.  The EST\n   server MUST check the tls-unique value, as described in Section\
    \ 3.5,\n   if one is submitted by the client.\n   The server MAY accept a certificate\
    \ request for manual authorization\n   checking by an administrator.  (Section\
    \ 4.2.3 describes the use of an\n   HTTP 202 response to the EST client if this\
    \ occurs.)\n"
- title: 4.2.1.  Simple Enrollment of Clients
  contents:
  - "4.2.1.  Simple Enrollment of Clients\n   When HTTPS POSTing to /simpleenroll,\
    \ the client MUST include a Simple\n   PKI Request as specified in CMC [RFC5272],\
    \ Section 3.1 (i.e., a PKCS\n   #10 Certification Request [RFC2986]).\n   The\
    \ Certification Signing Request (CSR) signature provides\n   proof-of-possession\
    \ of the client-possessed private key to the EST\n   server.  If the CSR KeyUsage\
    \ extension indicates that the private key\n   can be used to generate digital\
    \ signatures, then the client MUST\n   generate the CSR signature using the private\
    \ key.  If the key can be\n   used to generate digital signatures but the requested\
    \ CSR KeyUsage\n   extension prohibits generation of digital signatures, then\
    \ the CSR\n   signature MAY still be generated using the private key, but the\
    \ key\n   MUST NOT be used for any other signature operations (this is\n   consistent\
    \ with the recommendations concerning submission of\n   proof-of-possession to\
    \ an RA or CA as described in\n   [SP-800-57-Part-1]).  The use of /fullcmc operations\
    \ provides access\n   to more advanced proof-of-possession methods that are used\
    \ when the\n   key pair cannot be used for digital signature generation (see\n\
    \   Section 4.3).\n   The HTTP content-type of \"application/pkcs10\" is used\
    \ here.  The\n   format of the message is as specified in [RFC5967] with a Content-\n\
    \   Transfer-Encoding of \"base64\" [RFC2045].\n   If the EST client authenticated\
    \ using a previously installed\n   certificate issued by a third-party CA (see\
    \ Section 2.2.1), the\n   client MAY include the ChangeSubjectName attribute,\
    \ as defined in\n   [RFC6402], in the CSR to request that the subjectName and\n\
    \   SubjectAltName be changed in the new certificate.\n   The EST client MAY request\
    \ additional certificates even when using an\n   existing certificate in the TLS\
    \ client authentication.  For example,\n   the client can use an existing certificate\
    \ for TLS client\n   authentication when requesting a certificate that cannot\
    \ be used for\n   TLS client authentication.\n"
- title: 4.2.2.  Simple Re-enrollment of Clients
  contents:
  - "4.2.2.  Simple Re-enrollment of Clients\n   EST clients renew/rekey certificates\
    \ with an HTTPS POST using the\n   operation path value of \"/simplereenroll\"\
    .\n   A certificate request employs the same format as the \"simpleenroll\"\n\
    \   request, using the same HTTP content-type.  The request Subject field\n  \
    \ and SubjectAltName extension MUST be identical to the corresponding\n   fields\
    \ in the certificate being renewed/rekeyed.  The\n   ChangeSubjectName attribute,\
    \ as defined in [RFC6402], MAY be included\n   in the CSR to request that these\
    \ fields be changed in the new\n   certificate.\n   If the Subject Public Key\
    \ Info in the certification request is the\n   same as the current client certificate,\
    \ then the EST server renews\n   the client certificate.  If the public key information\
    \ in the\n   certification request is different than the current client\n   certificate,\
    \ then the EST server rekeys the client certificate.\n"
- title: 4.2.3.  Simple Enroll and Re-enroll Response
  contents:
  - "4.2.3.  Simple Enroll and Re-enroll Response\n   If the enrollment is successful,\
    \ the server response MUST contain an\n   HTTP 200 response code with a content-type\
    \ of\n   \"application/pkcs7-mime\".\n   A successful response MUST be a certs-only\
    \ CMC Simple PKI Response,\n   as defined in [RFC5272], containing only the certificate\
    \ that was\n   issued.  The HTTP content-type of \"application/pkcs7-mime\" with\
    \ an\n   smime-type parameter \"certs-only\" is used, as specified in [RFC5273].\n\
    \   The server MUST answer with a suitable 4xx or 5xx HTTP [RFC2616]\n   error\
    \ code when a problem occurs.  A Simple PKI Response with an HTTP\n   content-type\
    \ of \"application/pkcs7-mime\" (see Section 4.3.2) MAY be\n   included in the\
    \ response data to convey an error response.  If the\n   content-type is not set,\
    \ the response data MUST be a plaintext human-\n   readable error message containing\
    \ explanatory information describing\n   why the request was rejected (for example,\
    \ indicating that CSR\n   attributes are incomplete).\n   If the server responds\
    \ with an HTTP [RFC2616] 202, this indicates\n   that the request has been accepted\
    \ for processing but that a response\n   is not yet available.  The server MUST\
    \ include a Retry-After header\n   as defined for HTTP 503 responses.  The server\
    \ also MAY include\n   informative human-readable content.  The client MUST wait\
    \ at least\n   the specified \"retry-after\" time before repeating the same request.\n\
    \   The client repeats the initial enrollment request after the\n   appropriate\
    \ \"retry-after\" interval has expired.  The client SHOULD\n   log or inform the\
    \ end-user of this event.  The server is responsible\n   for maintaining all states\
    \ necessary to recognize and handle retry\n   operations as the client is stateless\
    \ in this regard; it simply sends\n   the same request repeatedly until it receives\
    \ a different response\n   code.  All other return codes are handled as specified\
    \ in HTTP\n   [RFC2616].\n   If the client closes the TLS connections while waiting\
    \ for the Retry-\n   After time to expire, then the client initiates a new TLS\
    \ connection\n   and performs all applicable security checks.  If the client has\n\
    \   already generated a CSR that includes linking identity and POP\n   information\
    \ (Section 3.5), then the CSR will need to be recreated to\n   incorporate the\
    \ tls-unique from the new, redirected session.  Note:\n   the key pair need not\
    \ be regenerated.  These are processing and\n   interface burdens on the client.\
    \  EST server administrators are\n   advised to take this into consideration.\n\
    \   The EST client MAY also make the certificate response, and associated\n  \
    \ private key, available to end-entity software for use as an\n   end-entity certificate.\n"
- title: 4.3.  Full CMC
  contents:
  - "4.3.  Full CMC\n   An EST client can request a certificate from an EST server\
    \ with an\n   HTTPS POST using the operation path value of \"/fullcmc\".  Support\
    \ for\n   the /fullcmc function is OPTIONAL for both clients and servers.\n"
- title: 4.3.1.  Full CMC Request
  contents:
  - "4.3.1.  Full CMC Request\n   If the HTTP POST to /fullcmc is not a valid Full\
    \ PKI Request, the\n   server MUST reject the message.  The HTTP content-type\
    \ used is\n   \"application/pkcs7-mime\" with an smime-type parameter \"CMC-request\"\
    ,\n   as specified in [RFC5273].  The body of the message is the binary\n   value\
    \ of the encoding of the PKI Request with a\n   Content-Transfer-Encoding of \"\
    base64\" [RFC2045].\n"
- title: 4.3.2.  Full CMC Response
  contents:
  - "4.3.2.  Full CMC Response\n   If the enrollment is successful, the server response\
    \ MUST include an\n   HTTP 200 response code with a content-type of\n   \"application/pkcs7-mime\"\
    \ as specified in [RFC5273].  The response\n   data includes either the Simple\
    \ PKI Response with an smime-type\n   parameter of \"certs-only\" or the Full\
    \ PKI Response with an smime-type\n   parameter \"CMC-response\", as specified\
    \ in Section 3.2.1 of [RFC5751].\n   The body of the message is the binary value\
    \ of the encoding of the\n   PKI Response with a Content-Transfer-Encoding of\
    \ \"base64\" [RFC2045].\n   When rejecting a request, the server MUST specify\
    \ either an HTTP 4xx\n   error or an HTTP 5xx error.  A CMC response with the\
    \ content-type of\n   \"application/pkcs7-mime\" MUST be included in the response\
    \ data for\n   any CMC error response.\n   All other return codes are handled\
    \ as specified in Section 4.2.3 or\n   HTTP [RFC2616].  For example, a client\
    \ interprets an HTTP 404 or 501\n   response to indicate that this service is\
    \ not implemented.\n"
- title: 4.4.  Server-Side Key Generation
  contents:
  - "4.4.  Server-Side Key Generation\n   An EST client may request a private key\
    \ and associated certificate\n   from an EST server using an HTTPS POST with an\
    \ operation path value\n   of \"/serverkeygen\".  Support for the /serverkeygen\
    \ function is\n   OPTIONAL.\n   A client MUST authenticate an EST server, as specified\
    \ in\n   Section 3.3.1 if certificate-based authentication is used or\n   Section\
    \ 3.3.3 if the optional certificate-less authentication is\n   used, and check\
    \ the server's authorization as given in Section 3.6.\n   The EST server MUST\
    \ authenticate the client, as specified in\n   Section 3.3.2 if certificate-based\
    \ authenticated is used or\n   Section 3.3.3 if the optional certificate-less\
    \ authentication is\n   used, and check the client's authorization as given in\
    \ Section 3.7.\n   The EST server applies whatever authorization or logic it chooses\
    \ to\n   determine if the private key and certificate should be provided.\n  \
    \ Cipher suites that have a NULL confidentiality algorithm MUST NOT be\n   used\
    \ as they will disclose the contents of an unprotected private\n   key.\n   Proper\
    \ random number and key generation [RFC4086] is a server\n   implementation responsibility,\
    \ and server archiving of generated keys\n   is determined by CA policy.  The\
    \ key pair and certificate are\n   transferred over the TLS session.  The cipher\
    \ suite used to return\n   the private key and certificate MUST offer confidentiality\n\
    \   commensurate with the private key being delivered to the client.\n   The EST\
    \ client MAY request additional certificates even when using an\n   existing certificate\
    \ in the TLS client authentication.  For example,\n   the client can use an existing\
    \ certificate for TLS client\n   authentication when requesting a certificate\
    \ that cannot be used for\n   TLS client authentication.\n"
- title: 4.4.1.  Server-Side Key Generation Request
  contents:
  - "4.4.1.  Server-Side Key Generation Request\n   The certificate request is HTTPS\
    \ POSTed and is the same format as for\n   the \"/simpleenroll\" and \"/simplereenroll\"\
    \ path extensions with the\n   same content-type and transfer encoding.\n   In\
    \ all respects, the server SHOULD treat the CSR as it would any\n   enroll or\
    \ re-enroll CSR; the only distinction here is that the server\n   MUST ignore\
    \ the public key values and signature in the CSR.  These\n   are included in the\
    \ request only to allow re-use of existing\n   codebases for generating and parsing\
    \ such requests.\n   If the client desires to receive the private key with encryption\
    \ that\n   exists outside of and in addition to that of the TLS transport used\n\
    \   by EST or if server policy requires that the key be delivered in such\n  \
    \ a form, the client MUST include an attribute in the CSR indicating\n   the encryption\
    \ key to be used.  Both symmetric and asymmetric\n   encryption are supported\
    \ as described in the following subsections.\n   The client MUST also include\
    \ an SMIMECapabilities attribute\n   ([RFC2633], Section 2.5) in the CSR to indicate\
    \ the key encipherment\n   algorithms the client is willing to use.\n   It is\
    \ strongly RECOMMENDED that the clients request that the returned\n   private\
    \ key be afforded the additional security of the Cryptographic\n   Message Syntax\
    \ (CMS) EnvelopedData in addition to the TLS-provided\n   security to protect\
    \ against unauthorized disclosure.\n"
- title: 4.4.1.1.  Requests for Symmetric Key Encryption of the Private Key
  contents:
  - "4.4.1.1.  Requests for Symmetric Key Encryption of the Private Key\n   To specify\
    \ a symmetric encryption key to be used to encrypt the\n   server-generated private\
    \ key, the client MUST include a\n   DecryptKeyIdentifier attribute (as defined\
    \ in Section 2.2.5 of\n   [RFC4108]) specifying the identifier of the secret key\
    \ to be used by\n   the server to encrypt the private key.  While that attribute\
    \ was\n   originally designated for specifying a firmware encryption key, it\n\
    \   exactly mirrors the requirements for specifying a secret key to\n   encrypt\
    \ a private key.  If the server does not have a secret key\n   matching the identifier\
    \ specified by the client, the request MUST be\n   terminated and an error returned\
    \ to the client.  Distribution of the\n   key specified by the DecryptKeyIdentifier\
    \ to the key generator and\n   the client is outside the scope of this document.\n"
- title: 4.4.1.2.  Requests for Asymmetric Encryption of the Private Key
  contents:
  - "4.4.1.2.  Requests for Asymmetric Encryption of the Private Key\n   To specify\
    \ an asymmetric encryption key to be used to encrypt the\n   server-generated\
    \ private key, the client MUST include an\n   AsymmetricDecryptKeyIdentifier attribute.\
    \  The\n   AsymmetricDecryptKeyIdentifier attribute is defined as:\n   id-aa-asymmDecryptKeyID\
    \ OBJECT IDENTIFIER ::= {\n       id-aa 54 }\n   The asymmetric-decrypt-key-identifier\
    \ attribute values have ASN.1\n   type AsymmetricDecryptKeyIdentifier (where ASN.1\
    \ is defined in\n   [X.680])::\n      AsymmetricDecryptKeyIdentifier ::= OCTET\
    \ STRING\n   If the server does not have a public key matching the identifier\n\
    \   specified by the client, the request MUST be terminated and an error\n   returned\
    \ to the client.  Distribution of the key specified by the\n   AsymmetricDecryptKeyIdentifier\
    \ to the key generator and the client is\n   outside the scope of this document.\
    \  If the key identified is bound\n   to an X.509 certificate, then the key MUST\
    \ either explicitly support\n   keyTransport or keyAgreement or its use MUST be\
    \ unrestricted.\n"
- title: 4.4.2.  Server-Side Key Generation Response
  contents:
  - "4.4.2.  Server-Side Key Generation Response\n   If the request is successful,\
    \ the server response MUST have an HTTP\n   200 response code with a content-type\
    \ of \"multipart/mixed\" consisting\n   of two parts: one part is the private\
    \ key data and the other part is\n   the certificate data.\n   The format in which\
    \ the private key data part is returned is\n   dependent on whether the private\
    \ key is being returned with\n   additional encryption on top of that provided\
    \ by TLS.\n   If additional encryption is not being employed, the private key\
    \ data\n   MUST be placed in an \"application/pkcs8\".  An \"application/pkcs8\"\
    \n   part consists of the base64-encoded DER-encoded [X.690]\n   PrivateKeyInfo\
    \ with a Content-Transfer-Encoding of \"base64\"\n   [RFC2045].\n   If additional\
    \ encryption is being employed, the private key is placed\n   inside of a CMS\
    \ SignedData.  The SignedData is signed by the party\n   that generated the private\
    \ key, which may or may not be the EST\n   server or the EST CA.  The SignedData\
    \ is further protected by placing\n   it inside of a CMS EnvelopedData, as described\
    \ in Section 4 of\n   [RFC5958].  The following list shows how the EncryptedData\
    \ is used,\n   depending on the type of protection key specified by the client.\n\
    \   o  If the client specified a symmetric encryption key to protect the\n   \
    \   server-generated private key, the EnvelopedData content is\n      encrypted\
    \ using the secret key identified in the request.  The\n      EnvelopedData RecipientInfo\
    \ field MUST indicate the key-encryption\n      kekri key management technique.\
    \  The values are as follows:\n      version is set to 4, key-encryption key identifier\
    \ (kekid) is set\n      to the value of the DecryptKeyIdentifier from Section\
    \ 4.4.1.1;\n      keyEncryptionAlgorithm is set to one of the key wrap algorithms\n\
    \      that the client included in the SMIMECapabilities accompanying the\n  \
    \    request; and encryptedKey is the encrypted key.\n   o  If the client specified\
    \ an asymmetric encryption key suitable for\n      key transport operations to\
    \ protect the server-generated private\n      key, the EnvelopedData content is\
    \ encrypted using a randomly\n      generated symmetric encryption key.  The cryptographic\
    \ strength of\n      the symmetric encryption key SHOULD be equivalent to the\
    \ client-\n      specified asymmetric key.  The EnvelopedData RecipientInfo field\n\
    \      MUST indicate the KeyTransRecipientInfo (ktri) key management\n      technique.\
    \  In KeyTransRecipientInfo, the RecipientIdentifier\n      (rid) is either the\
    \ subjectKeyIdentifier copied from the attribute\n      defined in Section 4.4.1.2\
    \ or the server determines an associated\n      issuerAndSerialNumber from the\
    \ attribute; version is derived from\n      the choice of rid [RFC5652], keyEncryptionAlgorithm\
    \ is set to one\n      of the key wrap algorithms that the client included in\
    \ the\n      SMIMECapabilities accompanying the request, and encryptedKey is\n\
    \      the encrypted key.\n   o  If the client specified an asymmetric encryption\
    \ key suitable for\n      key agreement operations to protect the server-generated\
    \ private\n      key, the EnvelopedData content is encrypted using a randomly\n\
    \      generated symmetric encryption key.  The cryptographic strength of\n  \
    \    the symmetric encryption key SHOULD be equivalent to the client-\n      specified\
    \ asymmetric key.  The EnvelopedData RecipientInfo field\n      MUST indicate\
    \ the KeyAgreeRecipientInfo (kari) key management\n      technique.  In the KeyAgreeRecipientInfo\
    \ type, version,\n      originator, and user keying material (ukm) are as in [RFC5652],\n\
    \      and keyEncryptionAlgorithm is set to one of the key wrap\n      algorithms\
    \ that the client included in the SMIMECapabilities\n      accompanying the request.\
    \  The recipient's key identifier is\n      either copied from the attribute defined\
    \ in Section 4.4.1.2 to\n      subjectKeyIdentifier or the server determines an\n\
    \      IssuerAndSerialNumber that corresponds to the value provided in\n     \
    \ the attribute.\n   In all three additional encryption cases, the EnvelopedData\
    \ is\n   returned in the response as an \"application/pkcs7-mime\" part with an\n\
    \   smime-type parameter of \"server-generated-key\" and a Content-\n   Transfer-Encoding\
    \ of \"base64\".\n   The certificate data part is an \"application/pkcs7-mime\"\
    \ and exactly\n   matches the certificate response to /simpleenroll.\n   When\
    \ rejecting a request, the server MUST specify either an HTTP 4xx\n   error or\
    \ an HTTP 5xx error.  If the content-type is not set, the\n   response data MUST\
    \ be a plaintext human-readable error message.\n"
- title: 4.5.  CSR Attributes
  contents:
  - "4.5.  CSR Attributes\n   CA policy may allow inclusion of client-provided attributes\
    \ in\n   certificates that it issues, and some of these attributes may\n   describe\
    \ information that is not available to the CA.  In addition, a\n   CA may desire\
    \ to certify a certain type of public key and a client\n   may not have a priori\
    \ knowledge of that fact.  Therefore, clients\n   SHOULD request a list of expected\
    \ attributes that are required, or\n   desired, by the CA in an enrollment request\
    \ or if dictated by local\n   policy.\n   The EST server SHOULD NOT require client\
    \ authentication or\n   authorization to reply to this request.\n   Requesting\
    \ CSR attributes is optional, but clients are advised that\n   CAs may refuse\
    \ enrollment requests that are not encoded according to\n   the CA's policy.\n"
- title: 4.5.1.  CSR Attributes Request
  contents:
  - "4.5.1.  CSR Attributes Request\n   The EST client requests a list of CA-desired\
    \ CSR attributes from the\n   CA by sending an HTTPS GET message to the EST server\
    \ with an\n   operations path of \"/csrattrs\".\n"
- title: 4.5.2.  CSR Attributes Response
  contents:
  - "4.5.2.  CSR Attributes Response\n   If locally configured policy for an authenticated\
    \ EST client\n   indicates a CSR Attributes Response is to be provided, the server\n\
    \   response MUST include an HTTP 200 response code.  An HTTP response\n   code\
    \ of 204 or 404 indicates that a CSR Attributes Response is not\n   available.\
    \  Regardless of the response code, the EST server and CA\n   MAY reject any subsequent\
    \ enrollment requests for any reason, e.g.,\n   incomplete CSR attributes in the\
    \ request.\n   Responses to attribute request messages MUST be encoded as the\n\
    \   content-type of \"application/csrattrs\" with a\n   Content-Transfer-Encoding\
    \ of \"base64\" [RFC2045].  The syntax for\n   application/csrattrs body is as\
    \ follows:\n   CsrAttrs ::= SEQUENCE SIZE (0..MAX) OF AttrOrOID\n   AttrOrOID\
    \ ::= CHOICE (oid OBJECT IDENTIFIER, attribute Attribute }\n   Attribute { ATTRIBUTE:IOSet\
    \ } ::= SEQUENCE {\n        type   ATTRIBUTE.&id({IOSet}),\n        values SET\
    \ SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type}) }\n   An EST server includes\
    \ zero or more OIDs or attributes [RFC2986] that\n   it requests the client to\
    \ use in the certification request.  The\n   client MUST ignore any OID or attribute\
    \ it does not recognize.  When\n   the server encodes CSR Attributes as an empty\
    \ SEQUENCE, it means that\n   the server has no specific additional information\
    \ it desires in a\n   client certification request (this is functionally equivalent\
    \ to an\n   HTTP response code of 204 or 404).\n   If the CA requires a particular\
    \ crypto system or use of a particular\n   signature scheme (e.g., certification\
    \ of a public key based on a\n   certain elliptic curve, or signing using a certain\
    \ hash algorithm) it\n   MUST provide that information in the CSR Attribute Response.\
    \  If an\n   EST server requires the linking of identity and POP information (see\n\
    \   Section 3.5), it MUST include the challengePassword OID in the CSR\n   Attributes\
    \ Response.\n   The structure of the CSR Attributes Response SHOULD, to the greatest\n\
    \   extent possible, reflect the structure of the CSR it is requesting.\n   Requests\
    \ to use a particular signature scheme (e.g. using a\n   particular hash function)\
    \ are represented as an OID to be reflected\n   in the SignatureAlgorithm of the\
    \ CSR.  Requests to use a particular\n   crypto system (e.g., certification of\
    \ a public key based on a certain\n   elliptic curve) are represented as an attribute,\
    \ to be reflected as\n   the AlgorithmIdentifier of the SubjectPublicKeyInfo,\
    \ with a type\n   indicating the algorithm and the values indicating the particular\n\
    \   parameters specific to the algorithm.  Requests for descriptive\n   information\
    \ from the client are made by an attribute, to be\n   represented as Attributes\
    \ of the CSR, with a type indicating the\n   [RFC2985] extensionRequest and the\
    \ values indicating the particular\n   attributes desired to be included in the\
    \ resulting certificate's\n   extensions.\n   The sequence is Distinguished Encoding\
    \ Rules (DER) encoded [X.690]\n   and then base64 encoded (Section 4 of [RFC4648]).\
    \  The resulting text\n   forms the application/csrattr body, without headers.\n\
    \   For example, if a CA requests a client to submit a certification\n   request\
    \ containing the challengePassword (indicating that linking of\n   identity and\
    \ POP information is requested; see Section 3.5), an\n   extensionRequest with\
    \ the Media Access Control (MAC) address\n   ([RFC2307]) of the client, and to\
    \ use the secp384r1 elliptic curve\n   and to sign with the SHA384 hash function.\
    \  Then, it takes the\n   following:\n         OID:        challengePassword (1.2.840.113549.1.9.7)\n\
    \         Attribute:  type = extensionRequest (1.2.840.113549.1.9.14)\n      \
    \               value = macAddress (1.3.6.1.1.1.1.22)\n         Attribute:  type\
    \ = id-ecPublicKey (1.2.840.10045.2.1)\n                     value = secp384r1\
    \ (1.3.132.0.34)\n         OID:        ecdsaWithSHA384 (1.2.840.10045.4.3.3)\n\
    \   and encodes them into an ASN.1 SEQUENCE to produce:\n       30 41 06 09 2a\
    \ 86 48 86 f7 0d 01 09 07 30 12 06 07 2a 86 48 ce 3d\n       02 01 31 07 06 05\
    \ 2b 81 04 00 22 30 16 06 09 2a 86 48 86 f7 0d 01\n       09 0e 31 09 06 07 2b\
    \ 06 01 01 01 01 16 06 08 2a 86 48 ce 3d 04 03\n       03\n   and then base64\
    \ encodes the resulting ASN.1 SEQUENCE to produce:\n       MEEGCSqGSIb3DQEJBzASBgcqhkjOPQIBMQcGBSuBBAAiMBYGCSqGSIb3DQEJDjEJ\n\
    \       BgcrBgEBAQEWBggqhkjOPQQDAw==\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   Section 4.4.1.2 defines an OID that has been registered\
    \ in an arc\n   delegated by the IANA to the PKIX working group.\n   IANA has\
    \ registered the following:\n   IANA updated the well-known URI registry with\
    \ the following filled-in\n   template from [RFC5785].\n      URI suffix: est\n\
    \      Change controller: IETF\n   IANA has updated the \"Application Media Types\"\
    \ registry with the\n   following filled-in templates from [RFC6838].\n   The\
    \ media subtype for CSR attributes in a CSR Attributes Response is\n   application/csrattrs.\n\
    \       Type name: application\n       Subtype name: csrattrs\n       Required\
    \ parameters: None\n       Optional parameters: None\n       Encoding considerations:\
    \ binary;\n       Security Considerations:\n         Clients request a list of\
    \ attributes that servers wish to be in\n         certification requests.  The\
    \ request/response is normally done\n         in a TLS-protected tunnel.\n   \
    \    Interoperability considerations: None\n       Published specification: This\
    \ memo.\n       Applications which use this media type: Enrollment over Secure\n\
    \       Transport (EST)\n       Additional information:\n         Magic number(s):\
    \ None\n         File extension: .csrattrs\n       Person & email address to contact\
    \ for further information:\n         Dan Harkins <dharkins@arubanetworks.com>\n\
    \       Restrictions on usage: None\n       Author: Dan Harkins <dharkins@arubanetworks.com>\n\
    \       Intended usage: COMMON\n       Change controller: The IESG <iesg@ietf.org>\n\
    \   The application/pkcs7-mime content-type defines the optional\n   \"smime-type\"\
    \ parameter [RFC5751] with a set of specific values.  This\n   document adds another\
    \ value, \"server-generated-key\", as the parameter\n   value for Server-side\
    \ Key Generation Response.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Support for Basic authentication, as specified\
    \ in HTTP [RFC2617],\n   allows the server access to a client's cleartext password.\
    \  This\n   provides support for legacy username/password databases but requires\n\
    \   exposing the plaintext password to the EST server.  Use of a PIN or\n   one-time\
    \ password can help mitigate such exposure, but it is\n   RECOMMENDED that EST\
    \ clients use such credentials only once to obtain\n   a client certificate (that\
    \ will be used during future interactions\n   with the EST server).\n   When a\
    \ client uses the Implicit TA database for certificate\n   validation (see Section\
    \ 3), then authorization proceeds as specified\n   in Section 3.6.2.  In this\
    \ situation, the client has validated the\n   server as being a responder that\
    \ is certified by a third party for\n   the URI configured, but it cannot verify\
    \ that the responder is\n   authorized to act as an RA for the PKI in which the\
    \ client is trying\n   to enroll.  Clients using an Implicit Trust Anchor database\
    \ are\n   RECOMMENDED to use only TLS-based client authentication (to prevent\n\
    \   exposing HTTP-based client authentication information).  It is\n   RECOMMENDED\
    \ that such clients include \"Linking Identity and POP\n   Information\" (Section\
    \ 3.5) in requests (to prevent such requests from\n   being forwarded to a real\
    \ EST server by a man in the middle).  It is\n   RECOMMENDED that the Implicit\
    \ Trust Anchor database used for EST\n   server authentication be carefully managed\
    \ to reduce the chance of a\n   third-party CA with poor certification practices\
    \ from being trusted.\n   Disabling the Implicit Trust Anchor database after successfully\n\
    \   receiving the Distribution of CA certificates response\n   (Section 4.1.3)\
    \ limits any vulnerability to the first TLS exchange.\n   Certificate-less TLS\
    \ cipher suites that maintain security and perform\n   the mutual authentication\
    \ necessary for enrollment have the following\n   properties:\n   o  the only\
    \ information leaked by an active attack is whether or not\n      a single guess\
    \ of the secret is correct.\n   o  any advantage an adversary gains is through\
    \ interaction and not\n      computation.\n   o  it is possible to perform countermeasures,\
    \ such as exponential\n      backoff after a certain number of failed attempts,\
    \ to frustrate\n      repeated active attacks.\n   Using a certificate-less cipher\
    \ suite that does not have the\n   properties listed above would render the results\
    \ of enrollment void\n   and potentially result in certificates being issued to\n\
    \   unauthenticated and/or unauthorized entities.\n   When using a certificate-less\
    \ TLS cipher suite, the shared secret\n   used for authentication and authorization\
    \ cannot be shared with an\n   entity that is not a party to the exchange: someone\
    \ other than the\n   client and the server.  Any additional sharing of secrets\
    \ voids the\n   security afforded by a certificate-less cipher suite.  Exposure\
    \ of a\n   shared secret used by a certificate-less cipher suite to a third\n\
    \   party enables client impersonation that can result in corruption of a\n  \
    \ client's trust anchor database.\n   TLS cipher suites that include \"_EXPORT_\"\
    \ and \"_DES_\" in their names\n   MUST NOT be used.  These ciphers do not offer\
    \ a sufficient level of\n   protection; 40-bit crypto in 2013 doesn't offer acceptable\n\
    \   protection, and the use of DES is deprecated.\n   As described in CMC, Section\
    \ 6.7 of [RFC5272], \"For keys that can be\n   used as signature keys, signing\
    \ the certification request with the\n   private key serves as a POP on that key\
    \ pair\".  The inclusion of tls-\n   unique within the certification request links\
    \ the proof-of-possession\n   to the TLS proof-of-identity by enforcing that the\
    \ POP operation\n   occurred while the TLS session was active.  This implies to\
    \ the\n   server that the authenticated client currently has access to the\n \
    \  private key.  If the authenticated client is known to have specific\n   capabilities,\
    \ such as hardware protection for authentication\n   credentials and key storage,\
    \ this implication is strengthened but not\n   proven.\n   The server-side key\
    \ generation method allows keys to be transported\n   over the TLS connection\
    \ to the client without any application-layer\n   protection.  The distribution\
    \ of private key material is inherently\n   risky.  Private key distribution uses\
    \ the encryption mode of the\n   negotiated TLS cipher suite.  Keys are not protected\
    \ by preferred key\n   wrapping methods such as AES Key Wrap [RFC3394] or as specified\
    \ in\n   [RFC5958] as encryption of the private key beyond that provided by\n\
    \   TLS is optional.  It is RECOMMENDED that EST servers not support this\n  \
    \ operation by default.  It is RECOMMENDED that clients not request\n   this service\
    \ unless there is a compelling operational benefit.  Use\n   of an Implicit Trust\
    \ Anchor database is NOT RECOMMENDED when\n   server-side key generation is employed.\
    \  The use of an encrypted CMS\n   Server-Side Key Generation Response is RECOMMENDED.\n\
    \   Regarding the CSR attributes that the CA may list for inclusion in an\n  \
    \ enrollment request, there are no real inherent security issues with\n   the\
    \ content being conveyed, but an adversary who is able to interpose\n   herself\
    \ into the conversation could exclude attributes that a server\n   may want, include\
    \ attributes that a server may not want, and render\n   meaningless other attributes\
    \ that a server may want.\n   ASN.1 encoding rules (e.g., DER and BER) have a\
    \ type-length-value\n   structure, and it is easy to construct malicious content\
    \ with invalid\n   length fields that can cause buffer overrun conditions.  ASN.1\n\
    \   encoding rules allow for arbitrary levels of nesting, which may make\n   it\
    \ possible to construct malicious content that will cause a stack\n   overflow.\
    \  Interpreters of ASN.1 structures should be aware of these\n   issues and should\
    \ take appropriate measures to guard against buffer\n   overflows and stack overruns\
    \ in particular, and malicious content in\n   general.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2585]  Housley, R. and P. Hoffman, \"\
    Internet X.509 Public Key\n              Infrastructure Operational Protocols:\
    \ FTP and HTTP\", RFC\n              2585, May 1999.\n   [RFC2616]  Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,\
    \ P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler,\
    \ J., Lawrence, S.,\n              Leach, P., Luotonen, A., and L. Stewart, \"\
    HTTP\n              Authentication: Basic and Digest Access Authentication\",\n\
    \              RFC 2617, June 1999.\n   [RFC2633]  Ramsdell, B., \"S/MIME Version\
    \ 3 Message Specification\",\n              RFC 2633, June 1999.\n   [RFC2986]\
    \  Nystrom, M. and B. Kaliski, \"PKCS #10: Certification\n              Request\
    \ Syntax Specification Version 1.7\", RFC 2986,\n              November 2000.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n       \
    \       3986, January 2005.\n   [RFC4086]  Eastlake, D., Schiller, J., and S.\
    \ Crocker, \"Randomness\n              Requirements for Security\", BCP 106, RFC\
    \ 4086, June 2005.\n   [RFC4108]  Housley, R., \"Using Cryptographic Message Syntax\
    \ (CMS) to\n              Protect Firmware Packages\", RFC 4108, August 2005.\n\
    \   [RFC4210]  Adams, C., Farrell, S., Kause, T., and T. Mononen,\n          \
    \    \"Internet X.509 Public Key Infrastructure Certificate\n              Management\
    \ Protocol (CMP)\", RFC 4210, September 2005.\n   [RFC4346]  Dierks, T. and E.\
    \ Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version\
    \ 1.1\", RFC 4346, April 2006.\n   [RFC4648]  Josefsson, S., \"The Base16, Base32,\
    \ and Base64 Data\n              Encodings\", RFC 4648, October 2006.\n   [RFC5077]\
    \  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n              \"Transport\
    \ Layer Security (TLS) Session Resumption without\n              Server-Side State\"\
    , RFC 5077, January 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August\
    \ 2008.\n   [RFC5272]  Schaad, J. and M. Myers, \"Certificate Management over\
    \ CMS\n              (CMC)\", RFC 5272, June 2008.\n   [RFC5273]  Schaad, J. and\
    \ M. Myers, \"Certificate Management over CMS\n              (CMC): Transport\
    \ Protocols\", RFC 5273, June 2008.\n   [RFC5274]  Schaad, J. and M. Myers, \"\
    Certificate Management Messages\n              over CMS (CMC): Compliance Requirements\"\
    , RFC 5274, June\n              2008.\n   [RFC5280]  Cooper, D., Santesson, S.,\
    \ Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5652]  Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652,\
    \ September 2009.\n   [RFC5746]  Rescorla, E., Ray, M., Dispensa, S., and N. Oskov,\n\
    \              \"Transport Layer Security (TLS) Renegotiation Indication\n   \
    \           Extension\", RFC 5746, February 2010.\n   [RFC5751]  Ramsdell, B.\
    \ and S. Turner, \"Secure/Multipurpose Internet\n              Mail Extensions\
    \ (S/MIME) Version 3.2 Message\n              Specification\", RFC 5751, January\
    \ 2010.\n   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n\
    \              Uniform Resource Identifiers (URIs)\", RFC 5785, April\n      \
    \        2010.\n   [RFC5929]  Altman, J., Williams, N., and L. Zhu, \"Channel\
    \ Bindings\n              for TLS\", RFC 5929, July 2010.\n   [RFC5958]  Turner,\
    \ S., \"Asymmetric Key Packages\", RFC 5958, August\n              2010.\n   [RFC6066]\
    \  Eastlake, D., \"Transport Layer Security (TLS) Extensions:\n              Extension\
    \ Definitions\", RFC 6066, January 2011.\n   [RFC6125]  Saint-Andre, P. and J.\
    \ Hodges, \"Representation and\n              Verification of Domain-Based Application\
    \ Service Identity\n              within Internet Public Key Infrastructure Using\
    \ X.509\n              (PKIX) Certificates in the Context of Transport Layer\n\
    \              Security (TLS)\", RFC 6125, March 2011.\n   [RFC6402]  Schaad,\
    \ J., \"Certificate Management over CMS (CMC)\n              Updates\", RFC 6402,\
    \ November 2011.\n   [RFC6454]  Barth, A., \"The Web Origin Concept\", RFC 6454,\
    \ December\n              2011.\n   [RFC6838]  Freed, N., Klensin, J., and T.\
    \ Hansen, \"Media Type\n              Specifications and Registration Procedures\"\
    , BCP 13, RFC\n              6838, January 2013.\n   [X.680]    ITU-T Recommendation\
    \ X.680 (2008) | ISO/IEC 8824-1:2008,\n              \"Abstract Syntax Notation\
    \ One (ASN.1): Specification of\n              basic notation\", November 2008,\n\
    \              <http://www.itu.int/rec/T-REC-X.680-200811-I/en>.\n   [X.690] \
    \   ITU-T Recommendation X.690 (2008) | ISO/IEC 8825-1:2008,\n              \"\
    ASN.1 encoding rules: Specification of Basic Encoding\n              Rules (BER),\
    \ Canonical Encoding Rules (CER) and\n              Distinguished Encoding Rules\
    \ (DER)\", November 2008,\n              <http://www.itu.int/rec/T-REC-X.690-200811-I/en>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IDevID]   IEEE Standards Association, \"IEEE\
    \ 802.1AR Secure Device\n              Identifier\", December 2009, <http://standards.ieee.org/\n\
    \              findstds/standard/802.1AR-2009.html>.\n   [RFC2307]  Howard, L.,\
    \ \"An Approach for Using LDAP as a Network\n              Information Service\"\
    , RFC 2307, March 1998.\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\
    \ May 2000.\n   [RFC2985]  Nystrom, M. and B. Kaliski, \"PKCS #9: Selected Object\n\
    \              Classes and Attribute Types Version 2.0\", RFC 2985,\n        \
    \      November 2000.\n   [RFC3394]  Schaad, J. and R. Housley, \"Advanced Encryption\
    \ Standard\n              (AES) Key Wrap Algorithm\", RFC 3394, September 2002.\n\
    \   [RFC5054]  Taylor, D., Wu, T., Mavrogiannopoulos, N., and T. Perrin,\n   \
    \           \"Using the Secure Remote Password (SRP) Protocol for TLS\n      \
    \        Authentication\", RFC 5054, November 2007.\n   [RFC5967]  Turner, S.,\
    \ \"The application/pkcs10 Media Type\", RFC 5967,\n              August 2010.\n\
    \   [RFC6403]  Zieglar, L., Turner, S., and M. Peck, \"Suite B Profile of\n  \
    \            Certificate Management over CMS\", RFC 6403, November 2011.\n   [SHS]\
    \      National Institute of Standards and Technology, \"Secure\n            \
    \  Hash Standard (SHS)\", Federal Information Processing\n              Standard\
    \ Publication 180-4, March 2012,\n              <http://csrc.nist.gov/publications/fips/\n\
    \              fips180-4/fips-180-4.pdf>.\n   [SP-800-57-Part-1]\n           \
    \   National Institute of Standards and Technology,\n              \"Recommendation\
    \ for Key Management - Part 1: General\n              (Revision 3)\", July 2012,\n\
    \              <http://csrc.nist.gov/publications/nistpubs/800-57/\n         \
    \     sp800-57_part1_rev3_general.pdf>.\n"
- title: Appendix A.  Operational Scenario Example Messages
  contents:
  - "Appendix A.  Operational Scenario Example Messages\n   (Informative)\n   This\
    \ section expands on the Operational Scenario Overviews by\n   providing detailed\
    \ examples of the messages at each TLS layer.\n"
- title: A.1.  Obtaining CA Certificates
  contents:
  - "A.1.  Obtaining CA Certificates\n   The following is an example of a valid /cacerts\
    \ exchange.\n   During the initial TLS handshake, the client can ignore the optional\n\
    \   server-generated \"certificate request\" and can instead proceed with\n  \
    \ the HTTP GET request:\n   GET /.well-known/est/cacerts HTTP/1.1\n   User-Agent:\
    \ curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenS\n   SL/1.0.1 zlib/1.2.3.4\
    \ libidn/1.23 librtmp/2.3\n   Host: 192.0.2.1:8085\n   Accept: */*\n   In response,\
    \ the server provides the current CA certificates:\n   HTTP/1.1 200 OK\n   Status:\
    \ 200 OK\n   Content-Type: application/pkcs7-mime\n   Content-Transfer-Encoding:\
    \ base64\n   Content-Length: 4246\n   MIIMOQYJKoZIhvcNAQcCoIIMKjCCDCYCAQExADALBgkqhkiG9w0BBwGgggwMMIIC\n\
    \   +zCCAeOgAwIBAgIJAJpY3nUZO3qcMA0GCSqGSIb3DQEBBQUAMBsxGTAXBgNVBAMT\n   EGVzdEV4YW1wbGVDQSBPd08wHhcNMTMwNTA5MDM1MzMxWhcNMTQwNTA5MDM1MzMx\n\
    \   WjAbMRkwFwYDVQQDExBlc3RFeGFtcGxlQ0EgT3dPMIIBIjANBgkqhkiG9w0BAQEF\n   AAOCAQ8AMIIBCgKCAQEAwDqpiHopaICubpRqbpEN7LqTIqWELFIA9qDDheHIKuyO\n\
    \   HW/ZAP7Rl4S5ZU6gaLW/ksseBUxdmox3KNyvtyjehIofTu28eZWhgy6/LCEGWR3P\n   K+fgPBA0l0JfJR/8oeXZa70oLVQc3hI4kCeqjFMs+biYH0vp/RluhftyZ5kzQyH1\n\
    \   EGsRkw1/qUKkTZ8PCF8VFlYfqmUoqsaRTyZbjII4J+Y6/jEG+p7QreW9zcz4sPe8\n   3c/uhwMLOWQkZtKsQtgo5CpfYMjuAmk4Q2joQq2vcxlc+WNKHf+wbrDb11ORZril\n\
    \   9ISlI94oumcRz3uBG1Yg7z83hdDfasmdfbp8gOSNFQIDAQABo0IwQDAPBgNVHRMB\n   Af8EBTADAQH/MB0GA1UdDgQWBBQITTKxMqATXrfc4ffpCIbt6Gsz0jAOBgNVHQ8B\n\
    \   Af8EBAMCAQYwDQYJKoZIhvcNAQEFBQADggEBACPnQPu5WReUGuCMS0nBOGa2tXh6\n   uZP4mS3J1qEfDePam/IiU9ssyYdcDwhVvKMoP4gI/yu4XFqhdpIoy/PyD4T15MT7\n\
    \   KADCxXkh5rM1IqMui7FvBKLWYGdy9sjEf90wAkBjHBe/TMO1NNw3uELyONSkHIvo\n   X0pu6aPmm/moIMyGi46niFse1iWlXXldGLkOQsh0e7U+wpBX07QpOr2KB2+Yf+uA\n\
    \   KY1SWzEG23bUxXlvcbUMgANDGj5r6z+niKL0VlApip/iCuVEEOcZ91UlmJjVLQWA\n   x6ie+v84oM+pIojiGM0C4XWcVlKKEgcMOsN3S4lvm8Ptpq0GLoIJY8NTD20wggMD\n\
    \   MIIB66ADAgECAgEBMA0GCSqGSIb3DQEBBQUAMBsxGTAXBgNVBAMTEGVzdEV4YW1w\n   bGVDQSBPd08wHhcNMTMwNTA5MDM1MzMyWhcNMTQwNTA5MDM1MzMyWjAbMRkwFwYD\n\
    \   VQQDExBlc3RFeGFtcGxlQ0EgTndPMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\n   CgKCAQEAnn3rZ3rMJHwf7MD9K4mubxHAvtdnrsQf5OfgtMhRIL4aePNhAdgPyj8C\n\
    \   loxOgD3UTV+dQ1ViOzVxPN7acikoOnkIdRpjpOpkyMo+KkvHMQXGnQTbsMAv1qWt\n   9S12DMpo0GOA1e4Ge3ud5YPOTR/q6PvjN51IEwYKksG7CglwZwB+5JbwhYr2D/0u\n\
    \   btGltriRVixPWrvt+wz/ITp5rcjh/8RS3LE8tQy3kTNhJF3Y/esR2sSgOiPNgIto\n   CATysbaINEPr4MemqML4tDpR/aG9y+8Qe7s1LyMFvDletp2mmBykAC/7nOat/pwU\n\
    \   lB0sN524D1XAgz8ZKvWrkh+ZaOr3hwIDAQABo1IwUDAOBgNVHQ8BAf8EBAMCBLAw\n   HQYDVR0OBBYEFLHEaeZbowSn2Jejizu/uWqyMkI8MB8GA1UdIwQYMBaAFAhNMrEy\n\
    \   oBNet9zh9+kIhu3oazPSMA0GCSqGSIb3DQEBBQUAA4IBAQCLDkL7aLNV6hSOkIqH\n   q+shV9YLO56/tj00vY/jV5skgDHk5d0B+OGortKVuGa57+v0avTrlJns3bNW8Ntv\n\
    \   zkDEhmd00Ak02aPsi4wRHLFgttUf9HdEHAuTkAESPTU43DiptjkfHhtBMfsFrCkd\n   sxWzCz+prDOMHYfUEkhRVV++1zyGEX6ov1Ap2IU2p3E+ASihL/amxTEQAsbwjUTI\n\
    \   R52zoL6nMPzpbKeZi2M0eEBVF8sDueA9Hjo6woLjgJqV0/yc5vC2HAxUOhx0cWTY\n   GcRBgL/yOyQLKiY5TKBH951OjQ4vhF2HmcoO7DkcNLYJOge16ssx4ogBHul20VgF\n\
    \   XJJjMIIDAzCCAeugAwIBAgIBAjANBgkqhkiG9w0BAQUFADAbMRkwFwYDVQQDExBl\n   c3RFeGFtcGxlQ0EgTndOMB4XDTEzMDUwOTAzNTMzMloXDTE0MDUwOTAzNTMzMlow\n\
    \   GzEZMBcGA1UEAxMQZXN0RXhhbXBsZUNBIE93TjCCASIwDQYJKoZIhvcNAQEBBQAD\n   ggEPADCCAQoCggEBAMA6qYh6KWiArm6Uam6RDey6kyKlhCxSAPagw4XhyCrsjh1v\n\
    \   2QD+0ZeEuWVOoGi1v5LLHgVMXZqMdyjcr7co3oSKH07tvHmVoYMuvywhBlkdzyvn\n   4DwQNJdCXyUf/KHl2Wu9KC1UHN4SOJAnqoxTLPm4mB9L6f0ZboX7cmeZM0Mh9RBr\n\
    \   EZMNf6lCpE2fDwhfFRZWH6plKKrGkU8mW4yCOCfmOv4xBvqe0K3lvc3M+LD3vN3P\n   7ocDCzlkJGbSrELYKOQqX2DI7gJpOENo6EKtr3MZXPljSh3/sG6w29dTkWa4pfSE\n\
    \   pSPeKLpnEc97gRtWIO8/N4XQ32rJnX26fIDkjRUCAwEAAaNSMFAwDgYDVR0PAQH/\n   BAQDAgSwMB0GA1UdDgQWBBQITTKxMqATXrfc4ffpCIbt6Gsz0jAfBgNVHSMEGDAW\n\
    \   gBSxxGnmW6MEp9iXo4s7v7lqsjJCPDANBgkqhkiG9w0BAQUFAAOCAQEALhDaE6Mp\n   BINBsJozdbXlijrWxL1CSv8f4GwpUFk3CgZjibt/qW9UoaNR4E58yRopuEhjwFZK\n\
    \   2w8YtRqx8IZoFhcoLkpBDfgLLwhoztzbYvOVKQMidjBlkBEVNR5MWdrs7F/AxWuy\n   iZ2+8AnR8GwqEIbCD0A7xIghmWEMh/BVI9C7GLqd6PxKrTAjuDfEpfdWhU/uYKmK\n\
    \   cL3XDbSwr30j2EQyaTV/3W0Tn2UfuxdwDQ4ZJs9G+Mw50s7AG6CpISyOIFmX6/bU\n   DpJXGLiLwfJ9C/aum9nylYuGCJ68BuTrCs9567KGfXEXI0mdFFCL7TaVR43kjsg3\n\
    \   c43kZ7369MeEZzCCAvswggHjoAMCAQICCQDprp3DmjOyETANBgkqhkiG9w0BAQUF\n   ADAbMRkwFwYDVQQDExBlc3RFeGFtcGxlQ0EgTndOMB4XDTEzMDUwOTAzNTMzMloX\n\
    \   DTE0MDUwOTAzNTMzMlowGzEZMBcGA1UEAxMQZXN0RXhhbXBsZUNBIE53TjCCASIw\n   DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ5962d6zCR8H+zA/SuJrm8RwL7X\n\
    \   Z67EH+Tn4LTIUSC+GnjzYQHYD8o/ApaMToA91E1fnUNVYjs1cTze2nIpKDp5CHUa\n   Y6TqZMjKPipLxzEFxp0E27DAL9alrfUtdgzKaNBjgNXuBnt7neWDzk0f6uj74zed\n\
    \   SBMGCpLBuwoJcGcAfuSW8IWK9g/9Lm7Rpba4kVYsT1q77fsM/yE6ea3I4f/EUtyx\n   PLUMt5EzYSRd2P3rEdrEoDojzYCLaAgE8rG2iDRD6+DHpqjC+LQ6Uf2hvcvvEHu7\n\
    \   NS8jBbw5XradppgcpAAv+5zmrf6cFJQdLDeduA9VwIM/GSr1q5IfmWjq94cCAwEA\n   AaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUscRp5lujBKfYl6OLO7+5\n\
    \   arIyQjwwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBBQUAA4IBAQBCz/CWdYvn\n   GM/SdCdEiom5A1VxaW8nKgCWg/EyWtAIiaHQuViB+jTUAE9lona2MbJoFHW8U5e8\n\
    \   9dCP0rJpA9UYXXhWvFQzd5ZWpms4wUYt1j3gqqd36KorJIAuPigVng13yKytxM7c\n   VmxQnh0aux3aEnEyRGAhGalHp0RaKdgPRzUaGtipJTNBkSV5S4kD4yDCPHMNbBu+\n\
    \   OcluerwEpbz6GvE7CpXl2jrTBZSqBsFelq0iz4kk9++9CnwZwrVgdzklhRfJ1Z4j\n   NkLruwbQ+o4NvBZsXiKxNfn3K2o3SK8AuaEyDWkq18+5rjcfprRO8x4YTW+6mXPq\n\
    \   jM0MAGNDEW+1oQAxAA==\n"
- title: A.2.  CSR Attributes
  contents:
  - "A.2.  CSR Attributes\n   The following is an example of a valid /csrattrs exchange.\
    \  During\n   this exchange, the EST client authenticates itself using an existing\n\
    \   certificate issued by the CA for which the EST server provides\n   services.\n\
    \   The initial TLS handshake is identical to the enrollment example\n   handshake.\
    \  The HTTP GET request:\n   GET /.well-known/est/csrattrs HTTP/1.1\n   User-Agent:\
    \ curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenS\n   SL/1.0.1 zlib/1.2.3.4\
    \ libidn/1.23 librtmp/2.3\n   Host: 192.0.2.1:8085\n   Accept: */*\n   In response,\
    \ the server provides suggested attributes that are\n   appropriate for the authenticated\
    \ client.  In this example, the EST\n   server also includes two example attributes\
    \ that the client would\n   ignore unless the attribute type is known to the client:\n\
    \   HTTP/1.1 200 OK\n   Status: 200 OK\n   Content-Type: application/csrattrs\n\
    \   Content-Transfer-Encoding: base64\n   Content-Length: 171\n   MHwGBysGAQEBARYwIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEG\n\
    \   CSqGSIb3DQEJBzAsBgOINwIxJQYDiDcDBgOINwQTGVBhcnNlIFNFVCBhcyAyLjk5\n   OS4yIGRhdGEGCSskAwMCCAEBCwYJYIZIAWUDBAIC\n"
- title: A.3.  Enroll/Re-enroll
  contents:
  - "A.3.  Enroll/Re-enroll\n   The following is an example of a valid /simpleenroll\
    \ exchange.  The\n   data messages for /simplereenroll are similar.\n   During\
    \ this exchange, the EST client uses an out-of-band distributed\n   username/password\
    \ to authenticate itself to the EST server.  This is\n   the normal HTTP WWW-Authenticate\
    \ behavior and is included here for\n   informative purposes.  When an existing\
    \ TLS client certificate is\n   used, the server might skip requesting the HTTP\
    \ WWW-Authenticate\n   header, such as during a /simplereenroll operation.\n \
    \  During the initial TLS handshake, the client can ignore the optional\n   server-generated\
    \ \"certificate request\" and can instead proceed with\n   the HTTP POST request.\
    \  In response to the initial HTTP POST attempt,\n   the server requests WWW-Authenticate\
    \ from the client (this might\n   occur even if the client used a client certificate,\
    \ as detailed in\n   the normative text above):\n   HTTP/1.1 401 Unauthorized\n\
    \   Content-Length: 0\n   WWW-Authenticate: Digest qop=\"auth\", realm=\"estrealm\"\
    ,\n   nonce=\"1368141352\"\n   In the subsequent HTTP POST, the username/password\
    \ is included, along\n   with the complete application/pkcs10 content:\n   POST\
    \ /.well-known/est/simpleenroll HTTP/1.1\n   Authorization: Digest username=\"\
    estuser\", realm=\"estrealm\", nonc\n   e=\"1368141352\", uri=\"/.well-known/est/simpleenroll\"\
    , cnonce=\"M\n   TYwMzg3\", nc=00000001, qop=\"auth\", response=\"144cc27f96046f1d70e\n\
    \   b16db20f75f22\"\n   Host: 192.0.2.1:8085\n   Accept: */*\n   Content-Type:\
    \ application/pkcs10\n   Content-Transfer-Encoding: base64\n   Content-Length:\
    \ 882\n   MIIChTCCAW0CAQAwHzEdMBsGA1UEAxMUZGVtb3N0ZXA0IDEzNjgxNDEzNTIwggEi\n \
    \  MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClNp+kdz+Nj8XpEp9kaumWxDZ3\n   eFYJpQKz9ddD5e5OzUeCm103ZIXQIxc0eVtMCatnRr3dnZRCAxGjwbqoB3eKt29/\n\
    \   XSQffVv+odbyw0WdkQOIbntCQry8YdcBZ+8LjI/N7M2krmjmoSLmLwU2V4aNKf0Y\n   MLR5Krmah3Ik31jmYCSvwTnv6mx6pr2pTJ82JavhTEIIt/fAYq1RYhkM1CXoBL+y\n\
    \   hEoDanN7TzC94skfS3VV+f53J9SkUxTYcy1Rw0k3VXfxWwy+cSKEPREl7I6k0YeK\n   tDEVAgBIEYM/L1S69RXTLujirwnqSRjOquzkAkD31BE961KZCxeYGrhxaR4PAgMB\n\
    \   AAGgITAfBgkqhkiG9w0BCQcxEhMQK3JyQ2lyLzcrRVl1NTBUNDANBgkqhkiG9w0B\n   AQUFAAOCAQEARBv0AJeXaHpl1MFIdzWqoi1dOCf6U+qaYWcBzpLADvJrPK1qx5pq\n\
    \   wXM830A1O+7RvrFv+nyd6VF2rl/MrNp+IsKuA9LYWIBjVe/LXoBO8dB/KxrYl16c\n   VUS+Yydi1m/a+DaftYSRGolMLtWeiqbc2SDBr2kHXW1TR130hIcpwmr29kC2Kzur\n\
    \   5thsuj276FGL1vPu0dRfGQfx4WWa9uAHBgz6tW37CepZsrUKe/0pfVhr2oHxApYh\n   cHGBQDQHVTFVjHccdUjAXicrtbsVhU5o1lPv7f4lEApv3SBQmJcaq5O832BzHw7n\n\
    \   PyMFcM15E9gtUVee5C62bVwuk/tbnGsbwQ==\n   The EST server uses the username/password\
    \ to perform\n   authentication/authorization and responds with the issued\n \
    \  certificate:\n   HTTP/1.1 200 OK\n   Status: 200 OK\n   Content-Type: application/pkcs7-mime;\
    \ smime-type=certs-only\n   Content-Transfer-Encoding: base64\n   Content-Length:\
    \ 1122\n   MIIDOAYJKoZIhvcNAQcCoIIDKTCCAyUCAQExADALBgkqhkiG9w0BBwGgggMLMIID\n\
    \   BzCCAe+gAwIBAgIBFTANBgkqhkiG9w0BAQUFADAbMRkwFwYDVQQDExBlc3RFeGFt\n   cGxlQ0EgTndOMB4XDTEzMDUwOTIzMTU1M1oXDTE0MDUwOTIzMTU1M1owHzEdMBsG\n\
    \   A1UEAxMUZGVtb3N0ZXA0IDEzNjgxNDEzNTIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n   DwAwggEKAoIBAQClNp+kdz+Nj8XpEp9kaumWxDZ3eFYJpQKz9ddD5e5OzUeCm103\n\
    \   ZIXQIxc0eVtMCatnRr3dnZRCAxGjwbqoB3eKt29/XSQffVv+odbyw0WdkQOIbntC\n   Qry8YdcBZ+8LjI/N7M2krmjmoSLmLwU2V4aNKf0YMLR5Krmah3Ik31jmYCSvwTnv\n\
    \   6mx6pr2pTJ82JavhTEIIt/fAYq1RYhkM1CXoBL+yhEoDanN7TzC94skfS3VV+f53\n   J9SkUxTYcy1Rw0k3VXfxWwy+cSKEPREl7I6k0YeKtDEVAgBIEYM/L1S69RXTLuji\n\
    \   rwnqSRjOquzkAkD31BE961KZCxeYGrhxaR4PAgMBAAGjUjBQMA4GA1UdDwEB/wQE\n   AwIEsDAdBgNVHQ4EFgQU/qDdB6ii6icQ8wGMXvy1jfE4xtUwHwYDVR0jBBgwFoAU\n\
    \   scRp5lujBKfYl6OLO7+5arIyQjwwDQYJKoZIhvcNAQEFBQADggEBACmxg1hvL6+7\n   a+lFTARoxainBx5gxdZ9omSb0L+qL+4PDvg/+KHzKsDnMCrcU6M4YP5n0EDKmGa6\n\
    \   4lY8fbET4tt7juJg6ixb95/760Th0vuctwkGr6+D6ETTfqyHnrbhX3lAhnB+0Ja7\n   o1gv4CWxh1I8aRaTXdpOHORvN0SMXdcrlCys2vrtOl+LjR2a3kajJO6eQ5leOdzF\n\
    \   QlZfOPhaLWen0e2BLNJI0vsC2Fa+2LMCnfC38XfGALa5A8e7fNHXWZBjXZLBCza3\n   rEs9Mlh2CjA/ocSC/WxmMvd+Eqnt/FpggRy+F8IZSRvBaRUCtGE1lgDmu6AFUxce\n\
    \   R4POrT2xz8ChADEA\n"
- title: A.4.  Server Key Generation
  contents:
  - "A.4.  Server Key Generation\n   The following is an example of a valid /serverkeygen\
    \ exchange.\n   During this exchange, the EST client authenticates itself using\
    \ an\n   existing certificate issued by the CA the EST server provides\n   services\
    \ for.\n   The initial TLS handshake is identical to the enrollment example\n\
    \   handshake.  An example HTTP POSTed message is:\n   POST /.well-known/est/serverkeygen\
    \ HTTP/1.1\n   Host: 192.0.2.1:8085\n   Accept: */*\n   Expect: 100-continue\n\
    \   Content-Type: application/pkcs10\n   Content-Transfer-Encoding: base64\n \
    \  Content-Length: 963\n   MIICwTCCAakCAQAwWzE+MDwGA1UEAxM1c2VydmVyS2V5R2VuIHJlcSBieSBjbGll\n\
    \   bnQgaW4gZGVtbyBzdGVwIDEyIDEzNjgxNDE5NTUxGTAXBgNVBAUTEFBJRDpXaWRn\n   ZXQgU046MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvE1/6m4A/\n\
    \   3/L32Suyzbf28LM9y8CQfp0aepa7o20BSfluvm8HXR44mlV+wpieM8H5n3Ub3RIo\n   RUun/FllIzK9uV7UrkqJ3Yzmq2NOoTd4C+OPsV/RPTu873dhFrssDk3P4NIphlSS\n\
    \   sSIkt5rhz7wYbCqCFR5Aphe/30Jx7D+xBI5Rs8e6vRS8IpuImh71BHiLfhq9AFhz\n   4ZJsOUSVpUmqUogFsM7SOQ6XI4dl+djhpjT+YTJ6hQ2PXrqdch3KsTQ8c6aKs+e2\n\
    \   5QJxh7O8JHVlPHo4YIxXtAYSutcbbTN5TXWFCWSrWDJ+zuMmk2yU+dio1oW7YR7V\n   ftAvazJ3laQbAgMBAAGgITAfBgkqhkiG9w0BCQcxEhMQZEZzQVhtSm5qb2tCdER2\n\
    \   cjANBgkqhkiG9w0BAQUFAAOCAQEAR+I0EQB+hSjrLCAjnVH6bZdHUNGszIdwx1iu\n   L4n+0XK3SfEzeOMkC4T74yFGKj3redS1Ht9atYUPb0D1Qi9Jf9Co8eLblo1l19A6\n\
    \   GaS798ofxIF0Pl0Dr6/GqjheqJEIbcDTAJq+kvDihyQ4GQnhosygIZHvKppQlebA\n   gvp2RJSnMroPCe6RgTU9E2fmI9rin/9PyXeWFF1namp+lYbTGwjv1aE1ikhjCLlH\n\
    \   veHhCdgOExPw+fqhKhHjp+0ZKBlo2bC3pqRWvDTiZuwt9UpFFfGtuxvpTp44oS/j\n   M/965hWIw/5dshY/wQjIfYs07bbq2ERbpJiw9bAQY34gyoVmEQ==\n\
    \   Because the DecryptKeyIdentifier attribute is not included in this\n   request,\
    \ the response does not include additional encryption beyond\n   the TLS session.\
    \  The EST server response is:\n   HTTP/1.1 200 OK\n   Status: 200 OK\n   Content-Type:\
    \ multipart/mixed ; boundary=estServerExampleBoundary\n   Content-Length: 3219\n\
    \   This is the preamble.  It is to be ignored, though it\n   is a handy place\
    \ for estServer to include an explanatory note,\n   including contact or support\
    \ information.\n   --estServerExampleBoundary\n   Content-Type: application/pkcs8\n\
    \   Content-Transfer-Encoding: base64\n   MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPwKtwJ7TjMgA+\n\
    \   Poj64V909ryql0foP1hU4Yq5y8/bOP5ZTe6ArgVhUye099Ac+dfdwpyP/DESiujU\n   F/dS62Vck3UWNbnw+4O38FUp0enLbbjSTud48KpEW6+FzkeuAanPGZMA1wKyrYy9\n\
    \   rD5tQOOJU/CBVhUrITyYLZNYUe4agbpcR0wMtrRr2E58Mu8wQ80ryk6nkL7COk5Z\n   IQdNRxldk7DFvpA85Yn1stumoGRtVLW51iXeTS1LtXwhuUb/j6Lds3vvAiJ2SiZ0\n\
    \   Y3rxPlnJVyFmR8Mf2TBOjzuFqva/VLD2ayQjgaGEjq2ZWHXelQAOZ6N3lrChojEK\n   FGq93yOhAgMBAAECggEBALQ5az/nYjd5x9Y3f7NMUffwl+jRRfMHCMTRx/u4AEAo\n\
    \   KBYm0hFVZZtxfM+z7xlD8G0Th6gs2hFA6gwcIlUPmiX+UaOLxht0xWaLGgYmcNAm\n   BiCDjLBQ7xRQCWtlcK9WCA5+HBWtcEy6244rXxh+IyWd6NT6bXC165AEcX87y/e3\n\
    \   JFJ7XFNeDP656s2DmxSCci+iDte6SaEm7sJvYGu16qevJeMThcQcC9/rJjXkvpGL\n   IKK2px5idad4Pb6+QHpqj3d4oM8djO6wYUvrH8XQLqAaF8Hd5lFWVU57nSYY+H79\n\
    \   GaNDTfRTUL6AXr7kmMsKVFOJ0JjZExUCVMZtGiqhB6UCgYEA639OtdWLZCzyZFMe\n   p7VlRddoz0VAtrU2dxnEb4cWD8Gerg8uNvp8OG84gH+6MbPwz4ZYWKCgDFqyrAlw\n\
    \   SF02n9Sovh93eoJ5latSbfeYUkLtB8L/HVk5/CBGEsV9MUkdMF0+B43YlhyEDyKW\n   fX2+0UeHLFgRrfpSzP2cXduEieMCgYEA4db/SIrwN2+g1Gjo3oE09kd89VGjVRer\n\
    \   srbcqc7DcPXP6Lw42sx96h4jVWWqHVo3DfwFBdUb1LH2cnVXQjgDUHdNdpl01cf/\n   BFYCFINi2qKMqiJYswkhYxZ1BLz/zuQTDbPFL2PgLniKFG2aFLrTS3S/tgeB5QwI\n\
    \   RPigH3kfI6sCgYAPqsCJyFMlrvfRRNZdQewi4VnPsEPF4/hjpAs1gD8vfSoZWlkw\n   vylUd9HCerzgYaA7rixieQ0sxTvtxhL6PXlM2NEBFQbV16hPFL6/IiG4F0u9oHNo\n\
    \   eG8rHtqKlSjnBn4yoYFm70Dhe7QtbZelcaAoPCH6CUHj2St5B8ZHWDtREQKBgHNp\n   wER+XIy4C2UByCANv9csaXulIOdXlXNbaCGPfOm5dWrm5ddLMf33MO9vaSRe+ku3\n\
    \   Q4nbgsGLwPp1ZQZ+QZNZpMi7W6306yp4GdAJ5Pb+oww/ST0VqW5OB7dILyK4A9S4\n   zkiNrf+Rsl8GM/vsDhc9rsuDwqofIAq/VHVBHNzJAoGBAOHQof5L6iGHOHcxLazx\n\
    \   4MGvRTpmzU/PX6Q3QxqpetEGFEDZAaL58L67SSS3fFBnKrVAidF6llC1bAH1aoRa\n   fYHUDi45xBoroy0hBwrnTKRxppua4UK75FUH5PPJfR6cCvw5stRkzIevTZHhozkX\n\
    \   pM7PYH/x4BiBmgQ3bhOqTp4H\n   --estServerExampleBoundary\n   Content-Type:\
    \ application/pkcs7-mime; smime-type=certs-only\n   Content-Transfer-Encoding:\
    \ base64\n   MIIDRQYJKoZIhvcNAQcCoIIDNjCCAzICAQExADALBgkqhkiG9w0BBwGgggMYMIID\n\
    \   FDCCAfygAwIBAgIBFjANBgkqhkiG9w0BAQUFADAbMRkwFwYDVQQDExBlc3RFeGFt\n   cGxlQ0EgTndOMB4XDTEzMDUwOTIzMjU1NloXDTE0MDUwOTIzMjU1NlowLDEqMCgG\n\
    \   A1UEAxMhc2VydmVyc2lkZSBrZXkgZ2VuZXJhdGVkIHJlc3BvbnNlMIIBIjANBgkq\n   hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz8CrcCe04zIAPj6I+uFfdPa8qpdH6D9Y\n\
    \   VOGKucvP2zj+WU3ugK4FYVMntPfQHPnX3cKcj/wxEoro1Bf3UutlXJN1FjW58PuD\n   t/BVKdHpy2240k7nePCqRFuvhc5HrgGpzxmTANcCsq2Mvaw+bUDjiVPwgVYVKyE8\n\
    \   mC2TWFHuGoG6XEdMDLa0a9hOfDLvMEPNK8pOp5C+wjpOWSEHTUcZXZOwxb6QPOWJ\n   9bLbpqBkbVS1udYl3k0tS7V8IblG/4+i3bN77wIidkomdGN68T5ZyVchZkfDH9kw\n\
    \   To87har2v1Sw9mskI4GhhI6tmVh13pUADmejd5awoaIxChRqvd8joQIDAQABo1Iw\n   UDAOBgNVHQ8BAf8EBAMCBLAwHQYDVR0OBBYEFKeZixu9F+appDX2SS5HaxmV6Jr4\n\
    \   MB8GA1UdIwQYMBaAFLHEaeZbowSn2Jejizu/uWqyMkI8MA0GCSqGSIb3DQEBBQUA\n   A4IBAQBHhLmRAKrnTapqqBObDM9IQDQPuwW+fW1gYwZKlSm/IWIwHEZL1igXhpjj\n\
    \   rf4xqpIkiJMmkaOeoXA8PFniX0/lZM9FQSM/j89CUf5dMoAqWj8s17xuXu9L/hVe\n   XjjXHsL40WuDG6tMPN9vcT8tE3ruor608MKSHFX/NEM6+AaNVSUPTmB33BgYB1Wa\n\
    \   E7pn3JMN6pjIxsHnF4pKi8qvoTSVVjaCEwUe8Q/fw1yvjoHoYJtyMn4v5Kb3Rt+m\n   s8Yie1tcfVQrjQutqr34/IJsKdPziZwi92KZa+1958A6M9O/p5OI0up9ZXKg2DEC\n\
    \   1O9qT0GyYJ6sxAyKiGTOxk6jMddDoQAxAA==\n   --estServerExampleBoundary--\n  \
    \ This is the epilogue.  It is also to be ignored.\n"
- title: Appendix B.  Contributors and Acknowledgements
  contents:
  - "Appendix B.  Contributors and Acknowledgements\n   The editors would like to\
    \ thank Stephen Kent, Vinod Arjun, Jan\n   Vilhuber, Sean Turner, Russ Housley,\
    \ and others for their feedback\n   and prototypes of early versions of this document.\
    \  Our thanks also\n   go the authors of [RFC6403], around whose document we structured\
    \ part\n   of this specification.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Max Pritikin (editor)\n   Cisco Systems, Inc.\n   510\
    \ McCarthy Drive\n   Milpitas, CA  95035\n   USA\n   EMail: pritikin@cisco.com\n\
    \   Peter E. Yee (editor)\n   AKAYLA, Inc.\n   7150 Moorland Drive\n   Clarksville,\
    \ MD  21029\n   USA\n   EMail: peter@akayla.com\n   Dan Harkins (editor)\n   Aruba\
    \ Networks\n   1322 Crossman Avenue\n   Sunnyvale, CA  94089-1113\n   USA\n  \
    \ EMail: dharkins@arubanetworks.com\n"
