- contents:
  - '        Clarifications and Extensions for the Bootstrap Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" for the standardization state and status\n   of this protocol.
    \ Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   Some aspects of the BOOTP protocol were rather loosely defined in
    its\n   original specification.  In particular, only a general description\n   was
    provided for the behavior of \"BOOTP relay agents\" (originally\n   called BOOTP
    forwarding agents\").  The client behavior description\n   also suffered in certain
    ways.  This memo attempts to clarify and\n   strengthen the specification in these
    areas.  Due to some errors\n   introduced into RFC 1532 in the editorial process,
    this memo is\n   reissued as RFC 1542.\n   In addition, new issues have arisen
    since the original specification\n   was written.  This memo also attempts to
    address some of these.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction.................................................
    \ 2\n   1.1 Requirements................................................  3\n
    \  1.2 Terminology.................................................  3\n   1.3
    Data Transmission Order.....................................  4\n   2. General
    Issues...............................................  5\n   2.1 General BOOTP
    Processing....................................  5\n   2.2 Definition of the 'flags'
    Field.............................  5\n   2.3 Bit Ordering of Hardware Addresses..........................
    \ 7\n   2.4 BOOTP Over IEEE 802.5 Token Ring Networks...................  8\n
    \  3. BOOTP Client Behavior........................................  9\n   3.1
    Client use of the 'flags' field.............................  9\n   3.1.1 The
    BROADCAST flag........................................  9\n   3.1.2 The remainder
    of the 'flags' field........................  9\n   3.2 Definition of the 'secs'
    field.............................. 10\n   3.3 Use of the 'ciaddr' and 'yiaddr'
    fields..................... 10\n   3.4 Interpretation of the 'giaddr' field........................
    11\n   3.5 Vendor information \"magic cookie\"........................... 12\n
    \  4. BOOTP Relay Agents........................................... 13\n   4.1
    General BOOTP Processing for Relay Agents................... 14\n   4.1.1 BOOTREQUEST
    Messages...................................... 14\n   4.1.2 BOOTREPLY Messages........................................
    17\n   5. BOOTP Server Behavior........................................ 18\n   5.1
    Reception of BOOTREQUEST Messages........................... 18\n   5.2 Use of
    the 'secs' field..................................... 19\n   5.3 Use of the 'ciaddr'
    field................................... 19\n   5.4 Strategy for Delivery of BOOTREPLY
    Messages................. 20\n   Acknowledgements................................................
    21\n   References...................................................... 22\n   Security
    Considerations......................................... 23\n   Author's Address................................................
    23\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   The Bootstrap Protocol (BOOTP) is a UDP/IP-based protocol
    which\n   allows a booting host to configure itself dynamically and without\n
    \  user supervision.  BOOTP provides a means to notify a host of its\n   assigned
    IP address, the IP address of a boot server host, and the\n   name of a file to
    be loaded into memory and executed [1].  Other\n   configuration information such
    as the local subnet mask, the local\n   time offset, the addresses of default
    routers, and the addresses of\n   various Internet servers can also be communicated
    to a host using\n   BOOTP [2].\n   Unfortunately, the original BOOTP specification
    [1] left some issues\n   of the protocol open to question.  The exact behavior
    of BOOTP relay\n   agents formerly called \"BOOTP forwarding agents\") was not
    clearly\n   specified.  Some parts of the overall protocol specification actually\n
    \  conflict, while other parts have been subject to misinterpretation,\n   indicating
    that clarification is needed.  This memo addresses these\n   problems.\n   Since
    the introduction of BOOTP, the IEEE 802.5 Token Ring Network\n   has been developed
    which presents a unique problem for BOOTP's\n   particular message-transfer paradigm.
    \ This memo also suggests a\n   solution for this problem.\n   NOTE: Unless otherwise
    specified in this document or a later\n   document, the information and requirements
    specified througout this\n   document also apply to extensions to BOOTP such as
    the Dynamic Host\n   Configuration Protocol (DHCP) [3].\n"
  - contents:
    - "1.1 Requirements\n   In this memo, the words that are used to define the significance
      of\n   particular requirements are capitalized.  These words are:\n      o \"MUST\"\n
      \       This word or the adjective \"REQUIRED\" means that the item\n        is
      an absolute requirement of the specification.\n      o \"MUST NOT\"\n        This
      phrase means that the item is an absolute prohibition\n        of the specification.\n
      \     o \"SHOULD\"\n        This word or the adjective \"RECOMMENDED\" means
      that there\n        may exist valid reasons in particular circumstances to\n
      \       ignore this item, but the full implications should be\n        understood
      and the case carefully weighed before choosing a\n        different course.\n
      \     o \"SHOULD NOT\"\n        This phrase means that there may exist valid
      reasons in\n        particular circumstances when the listed behavior is\n        acceptable
      or even useful, but the full implications should\n        be understood and
      the case carefully weighed before\n        implementing any behavior described
      with this label.\n      o \"MAY\"\n        This word or the adjective \"OPTIONAL\"
      means that this item\n        is truly optional.  One vendor may choose to include
      the\n        item because a particular marketplace requires it or\n        because
      it enhances the product, for example; another\n        vendor may omit the same
      item.\n"
    title: 1.1 Requirements
  - contents:
    - "1.2 Terminology\n   This memo uses the following terms:\n      BOOTREQUEST\n
      \        A BOOTREQUEST message is a BOOTP message sent from a BOOTP\n         client
      to a BOOTP server, requesting configuration information.\n      BOOTREPLY\n
      \        A BOOTREPLY message is a BOOTP message sent from a BOOTP server\n         to
      a BOOTP client, providing configuration information.\n      Silently discard\n
      \        This memo specifies several cases where a BOOTP entity is to\n         \"silently
      discard\" a received BOOTP message.  This means that\n         the entity is
      to discard the message without further\n         processing, and that the entity
      will not send any ICMP error\n         message as a result.  However, for diagnosis
      of problems, the\n         entity SHOULD provide the capability of logging the
      error,\n         including the contents of the silently-discarded message, and\n
      \        SHOULD record the event in a statistics counter.\n"
    title: 1.2 Terminology
  - contents:
    - "1.3 Data Transmission Order\n   The order of transmission of the header and
      data described in this\n   document is resolved to the octet level.  Whenever
      a diagram shows a\n   group of octets, the order of transmission of those octets
      is the\n   normal order in which they are read in English.  For example, in
      the\n   following diagram, the octets are transmitted in the order they are\n
      \  numbered.\n                     0                   1\n                     0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                    |       1       |       2       |\n                     +-------------------------------+\n
      \                    |       3       |       4       |\n                     +-------------------------------+\n
      \                    |       5       |       6       |\n                     +-------------------------------+\n
      \  Whenever an octet represents a numeric quantity, the leftmost bit in\n   the
      diagram is the high order or most significant bit.  That is, the\n   bit labeled
      0 is the most significant bit.  For example, the\n   following diagram represents
      the value 170 (decimal).\n                               0 1 2 3 4 5 6 7\n                              +-+-+-+-+-+-+-+-+\n
      \                             |1 0 1 0 1 0 1 0|\n                              +---------------+\n
      \  Similarly, whenever a multi-octet field represents a numeric quantity\n   the
      leftmost bit of the whole field is the most significant bit.\n   When a multi-octet
      quantity is transmitted the most significant octet\n   is transmitted first.\n"
    title: 1.3 Data Transmission Order
  title: 1. Introduction
- contents:
  - "2. General Issues\n   This section covers issues of general relevance to all
    BOOTP entities\n   (clients, servers, and relay agents).\n"
  - contents:
    - "2.1 General BOOTP Processing\n   The following consistency checks SHOULD be
      performed on BOOTP\n   messages:\n      o The IP Total Length and UDP Length
      must be large enough to\n        contain the minimal BOOTP header of 300 octets
      (in the UDP\n        data field) specified in [1].\n   NOTE: Future extensions
      to the BOOTP protocol may increase the size\n   of BOOTP messages.  Therefore,
      BOOTP messages which, according to the\n   IP Total Length and UDP Length fields,
      are larger than the minimum\n   size specified by [1] MUST also be accepted.\n
      \     o The 'op' (opcode) field of the message must contain either the\n        code
      for a BOOTREQUEST (1) or the code for a BOOTREPLY (2).\n   BOOTP messages not
      meeting these consistency checks MUST be silently\n   discarded.\n"
    title: 2.1 General BOOTP Processing
  - contents:
    - "2.2 Definition of the 'flags' Field\n   The standard BOOTP message format defined
      in [1] includes a two-octet\n   field located between the 'secs' field and the
      'ciaddr' field.  This\n   field is merely designated as \"unused\" and its contents
      left\n   unspecified, although Section 7.1 of [1] does offer the following\n
      \  suggestion:\n      \"Before setting up the packet for the first time, it
      is a good\n      idea to clear the entire packet buffer to all zeros; this will\n
      \     place all fields in their default state.\"\n      This memo hereby designates
      this two-octet field as the 'flags'\n      field.\n      This memo hereby defines
      the most significant bit of the 'flags'\n      field as the BROADCAST (B) flag.
      \ The semantics of this flag are\n      discussed in Sections 3.1.1 and 4.1.2
      of this memo.\n      The remaining bits of the 'flags' field are reserved for
      future\n      use.  They MUST be set to zero by clients and ignored by servers\n
      \     and relay agents.\n      The 'flags' field, then, appears as follows:\n
      \                    0                   1\n                     0 1 2 3 4 5
      6 7 8 9 0 1 2 3 4 5\n                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                    |B|             MBZ             |\n                     +-+-----------------------------+\n
      \  where:\n      B    BROADCAST flag (discussed in Sections 3.1.1 and 4.1.2)\n
      \     MBZ  MUST BE ZERO (reserved for future use)\n   The format of a BOOTP
      message is shown below.  The numbers in\n   parentheses indicate the size of
      each field in octets.\n   0                   1                   2                   3\n
      \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |\n   +---------------+---------------+---------------+---------------+\n
      \  |                            xid (4)                            |\n   +-------------------------------+-------------------------------+\n
      \  |           secs (2)            |           flags (2)           |\n   +-------------------------------+-------------------------------+\n
      \  |                           ciaddr (4)                          |\n   +---------------------------------------------------------------+\n
      \  |                           yiaddr (4)                          |\n   +---------------------------------------------------------------+\n
      \  |                           siaddr (4)                          |\n   +---------------------------------------------------------------+\n
      \  |                           giaddr (4)                          |\n   +---------------------------------------------------------------+\n
      \  |                                                               |\n   |                           chaddr
      (16)                         |\n   |                                                               |\n
      \  |                                                               |\n   +---------------------------------------------------------------+\n
      \  |                                                               |\n   |                           sname
      \ (64)                         |\n   +---------------------------------------------------------------+\n
      \  |                                                               |\n   |                           file
      \  (128)                        |\n   +---------------------------------------------------------------+\n
      \  |                                                               |\n   |                           vend
      \  (64)                         |\n   +---------------------------------------------------------------+\n"
    title: 2.2 Definition of the 'flags' Field
  - contents:
    - "2.3 Bit Ordering of Hardware Addresses\n   The bit ordering used for link-level
      hardware addresses in the\n   'chaddr' field SHOULD be the same as the ordering
      used for the ARP\n   protocol [4] on the client's link-level network (assuming
      ARP is\n   defined for that network).\n   The 'chaddr' field MUST be preserved
      as it was specified by the BOOTP\n   client.  A relay agent MUST NOT reverse
      the bit ordering of the\n   'chaddr' field even if it happens to be relaying
      a BOOTREQUEST\n   between two networks which use different bit orderings.\n
      \     DISCUSSION:\n         One of the primary reasons the 'chaddr' field exists
      is to\n         enable BOOTP servers and relay agents to communicate directly\n
      \        with clients without the use of broadcasts.  In practice, the\n         contents
      of the 'chaddr' field is often used to create an ARP-\n         cache entry
      in exactly the same way the normal ARP protocol\n         would have.  Clearly,
      interoperability can only be achieved if\n         a consistent interpretation
      of the 'chaddr' field is used.\n         As a practical example, this means
      that the bit ordering used\n         for the 'chaddr' field by a BOOTP client
      on an IEEE 802.5 Token\n         Ring network is the opposite of the bit ordering
      used by a\n         BOOTP client on a DIX ethernet network.\n"
    title: 2.3 Bit Ordering of Hardware Addresses
  - contents:
    - "2.4 BOOTP Over IEEE 802.5 Token Ring Networks\n   Special consideration of
      the client/server and client/relay agent\n   interactions must be given to IEEE
      802.5 networks because of non-\n   transparent bridging.\n   The client SHOULD
      send its broadcast BOOTREQUEST with an All Routes\n   Explorer RIF.  This will
      enable servers/relay agents to cache the\n   return route if they choose to
      do so.  For those server/relay agents\n   which cannot cache the return route
      (because they are stateless, for\n   example), the BOOTREPLY message SHOULD
      be sent to the client's\n   hardware address, as taken from the BOOTP message,
      with a Spanning\n   Tree Rooted RIF.  The actual bridge route will be recorded
      by the\n   client and server/relay agent by normal ARP processing code.\n      DISCUSSION:\n
      \        In the simplest case, an unbridged, single ring network, the\n         broadcast
      behavior of the BOOTP protocol is identical to that\n         of Ethernet networks.
      \ However, a BOOTP client cannot know, a\n         priori, that an 802.5 network
      is not bridged.  In fact, the\n         likelihood is that the server, or relay
      agent, will not know\n         either.\n         Of the four possible scenerios,
      only two are interesting: where\n         the assumption is that the 802.5 network
      is not bridged and it\n         is, and the assumption that the network is bridged
      and it is\n         not.  In the former case, the Routing Information Field
      (RIF)\n         will not be used; therefore, if the server/relay agent are on\n
      \        another segment of the ring, the client cannot reach it.  In\n         the
      latter case, the RIF field will be used, resulting in a few\n         extraneous
      bytes on the ring.  It is obvious that an almost\n         immeasurable inefficiency
      is to be preferred over a complete\n         failure to communicate.\n         Given
      that the assumption is that RIF fields will be needed, it\n         is necesary
      to determine the optimum method for the client to\n         reach the server/relay
      agent, and the optimum method for the\n         response to be returned.\n"
    title: 2.4 BOOTP Over IEEE 802.5 Token Ring Networks
  title: 2. General Issues
- contents:
  - "3. BOOTP Client Behavior\n   This section clarifies various issues regarding
    BOOTP client\n   behavior.\n"
  - contents:
    - '3.1 Client use of the ''flags'' field

      '
    - contents:
      - "3.1.1 The BROADCAST flag\n   Normally, BOOTP servers and relay agents attempt
        to deliver BOOTREPLY\n   messages directly to a client using unicast delivery.
        \ The IP\n   destination address (in the IP header) is set to the BOOTP 'yiaddr'\n
        \  address and the link-layer destination address is set to the BOOTP\n   'chaddr'
        address.  Unfortunately, some client implementations are\n   unable to receive
        such unicast IP datagrams until they know their own\n   IP address (thus we
        have a \"chicken and egg\" issue).  Often, however,\n   they can receive broadcast
        IP datagrams (those with a valid IP\n   broadcast address as the IP destination
        and the link-layer broadcast\n   address as the link-layer destination).\n
        \  If a client falls into this category, it SHOULD set (to 1) the\n   newly-defined
        BROADCAST flag in the 'flags' field of BOOTREPLY\n   messages it generates.
        \ This will provide a hint to BOOTP servers and\n   relay agents that they
        should attempt to broadcast their BOOTREPLY\n   messages to the client.\n
        \  If a client does not have this limitation (i.e., it is perfectly able\n
        \  to receive unicast BOOTREPLY messages), it SHOULD NOT set the\n   BROADCAST
        flag (i.e., it SHOULD clear the BROADCAST flag to 0).\n      DISCUSSION:\n
        \        This addition to the protocol is a workaround for old host\n         implementations.
        \ Such implementations SHOULD be modified so\n         that they may receive
        unicast BOOTREPLY messages, thus making\n         use of this workaround unnecessary.
        \ In general, the use of\n         this mechanism is discouraged.\n"
      title: 3.1.1 The BROADCAST flag
    - contents:
      - "3.1.2 The remainder of the 'flags' field\n   The remaining bits of the 'flags'
        field are reserved for future use.\n   A client MUST set these bits to zero
        in all BOOTREQUEST messages it\n   generates.  A client MUST ignore these
        bits in all BOOTREPLY messages\n   it receives.\n"
      title: 3.1.2 The remainder of the 'flags' field
    title: 3.1 Client use of the 'flags' field
  - contents:
    - "3.2 Definition of the 'secs' field\n   The 'secs' field of a BOOTREQUEST message
      SHOULD represent the\n   elapsed time, in seconds, since the client sent its
      first BOOTREQUEST\n   message.  Note that this implies that the 'secs' field
      of the first\n   BOOTREQUEST message SHOULD be set to zero.\n   Clients SHOULD
      NOT set the 'secs' field to a value which is constant\n   for all BOOTREQUEST
      messages.\n      DISCUSSION:\n         The original definition of the 'secs'
      field was vague.  It was\n         not clear whether it represented the time
      since the first\n         BOOTREQUEST message was sent or some other time period
      such as\n         the time since the client machine was powered-up.  This has\n
      \        limited its usefulness as a policy control mechanism for BOOTP\n         servers
      and relay agents.  Furthermore, certain client\n         implementations have
      been known to simply set this field to a\n         constant value or use incorrect
      byte-ordering.  Incorrect\n         byte-ordering usually makes it appear as
      if a client has been\n         waiting much longer than it really has, so a
      relay agent will\n         relay the BOOTREQUEST sooner than desired (usually\n
      \        immediately).  These implementation errors have further\n         undermined
      the usefulness of the 'secs' field.  These incorrect\n         implementations
      SHOULD be corrected.\n"
    title: 3.2 Definition of the 'secs' field
  - contents:
    - "3.3 Use of the 'ciaddr' and 'yiaddr' fields\n   If a BOOTP client does not
      know what IP address it should be using,\n   the client SHOULD set the 'ciaddr'
      field to 0.0.0.0.  If the client\n   has the ability to remember the last IP
      address it was assigned, or\n   it has been preconfigured with an IP address
      via some alternate\n   mechanism, the client MAY fill the 'ciaddr' field with
      that IP\n   address.  If the client does place a non-zero IP address in the\n
      \  'ciaddr' field, the client MUST be prepared to accept incoming\n   unicast
      datagrams addressed to that IP address and also answer ARP\n   requests for
      that IP address (if ARP is used on that network).\n   The BOOTP server is free
      to assign a different IP address (in the\n   'yiaddr' field) than the client
      expressed in 'ciaddr'.  The client\n   SHOULD adopt the IP address specified
      in 'yiaddr' and begin using it\n   as soon as possible.\n      DISCUSSION:\n
      \        There are various interpretations about the purpose of the\n         'ciaddr'
      field and, unfortunately, no agreement on a single\n         correct interpretation.
      \ One interpretation is that if a client\n         is willing to accept whatever
      IP address the BOOTP server\n         assigns to it, the client should always
      place 0.0.0.0 in the\n         'ciaddr' field, regardless of whether it knows
      its previously-\n         assigned address.  Conversely, if the client wishes
      to assert\n         that it must have a particular IP address (e.g., the IP
      address\n         was hand-configured by the host administrator and BOOTP is
      only\n         being used to obtain a boot file and/or information from the\n
      \        'vend' field), the client will then fill the 'ciaddr' field\n         with
      the desired IP address and ignore the IP address assigned\n         by the BOOTP
      server as indicated in the 'yiaddr' field.  An\n         alternate interpretation
      holds that the client always fills the\n         'ciaddr' field with its most
      recently-assigned IP address (if\n         known) even if that address may be
      incorrect.  Such a client\n         will still accept and use the address assigned
      by the BOOTP\n         server as indicated in the 'yiaddr' field.  The motivation
      for\n         this interpretation is to aid the server in identifying the\n
      \        client and/or in delivering the BOOTREPLY to the client.  Yet a\n         third
      (mis)interpretation allows the client to use 'ciaddr' to\n         express the
      client's desired IP address, even if the client has\n         never used that
      address before or is not currently using that\n         address.\n         The
      last interpretation is incorrect as it may prevent the\n         BOOTREPLY from
      reaching the client.  The server will usually\n         unicast the reply to
      the address given in 'ciaddr' but the\n         client may not be listening
      on that address yet, or the client\n         may be connected to an incorrect
      subnet such that normal IP\n         routing (correctly) routes the reply to
      a different subnet.\n         The second interpretation also suffers from the
      \"incorrect\n         subnet\" problem.\n         The first interpretation seems
      to be the safest and most likely\n         to promote interoperability.\n"
    title: 3.3 Use of the 'ciaddr' and 'yiaddr' fields
  - contents:
    - "3.4 Interpretation of the 'giaddr' field\n   The 'giaddr' field is rather poorly
      named.  It exists to facilitate\n   the transfer of BOOTREQUEST messages from
      a client, through BOOTP\n   relay agents, to servers on different networks than
      the client.\n   Similarly, it facilitates the delivery of BOOTREPLY messages
      from the\n   servers, through BOOTP relay agents, back to the client.  In no
      case\n   does it represent a general IP router to be used by the client.  A\n
      \  BOOTP client MUST set the 'giaddr' field to zero (0.0.0.0) in all\n   BOOTREQUEST
      messages it generates.\n   A BOOTP client MUST NOT interpret the 'giaddr' field
      of a BOOTREPLY\n   message to be the IP address of an IP router.  A BOOTP client
      SHOULD\n   completely ignore the contents of the 'giaddr' field in BOOTREPLY\n
      \  messages.\n      DISCUSSION:\n         The semantics of the 'giaddr' field
      were poorly defined.\n         Section 7.5 of [1] states:\n           \"If 'giaddr'
      (gateway address) is nonzero, then the packets\n           should be forwarded
      there first, in order to get to the\n           server.\"\n   In that sentence,
      \"get to\" refers to communication from the client to\n   the server subsequent
      to the BOOTP exchange, such as a TFTP session.\n   Unfortunately, the 'giaddr'
      field may contain the address of a BOOTP\n   relay agent that is not itself
      an IP router (according to [1],\n   Section 8, fifth paragraph), in which case,
      it will be useless as a\n   first-hop for TFTP packets sent to the server (since,
      by definition,\n   non-routers don't forward datagrams at the IP layer).\n   Although
      now prohibited by Section 4.1.1 of this memo, the 'giaddr'\n   field might contain
      a broadcast address according to Section 8, sixth\n   paragraph of [1].  Not
      only would such an address be useless as a\n   router address, it might also
      cause the client to ARP for the\n   broadcast address (since, if the client
      didn't receive a subnet mask\n   in the BOOTREPLY message, it would be unable
      to recognize a subnet\n   broadcast address).  This is clearly undesirable.\n
      \  To reach a non-local server, clients can obtain a first-hop router\n   address
      from the \"Gateway\" subfield of the \"Vendor Information\n   Extensions\" [2]
      (if present), or via the ICMP router discovery\n   protocol [5] or other similar
      mechanism.\n"
    title: 3.4 Interpretation of the 'giaddr' field
  - contents:
    - "3.5 Vendor information \"magic cookie\"\n   It is RECOMMENDED that a BOOTP
      client always fill the first four\n   octets of the 'vend' (vendor information)
      field of a BOOTREQUEST with\n   a four-octet identifier called a \"magic cookie.\"
      \ A BOOTP client\n   SHOULD do this even if it has no special information to
      communicate\n   to the BOOTP server using the 'vend' field.  This aids the BOOTP\n
      \  server in determining what vendor information format it should use in\n   its
      BOOTREPLY messages.\n   If a special vendor-specific magic cookie is not being
      used, a BOOTP\n   client SHOULD use the dotted decimal value 99.130.83.99 as
      specified\n   in [2].  In this case, if the client has no information to\n   communicate
      to the server, the octet immediately following the magic\n   cookie SHOULD be
      set to the \"End\" tag (255) and the remaining octets\n   of the 'vend' field
      SHOULD be set to zero.\n      DISCUSSION:\n         Sometimes different operating
      systems or networking packages\n         are run on the same machine at different
      times (or even at the\n         same time!).  Since the hardware address placed
      in the 'chaddr'\n         field will likely be the same, BOOTREQUESTs from completely\n
      \        different BOOTP clients on the same machine will likely be\n         difficult
      for a BOOTP server to differentiate.  If the client\n         includes a magic
      cookie in its BOOTREQUESTs, the server will at\n         least know what format
      the client expects and can understand in\n         corresponding BOOTREPLY messages.\n"
    title: 3.5 Vendor information "magic cookie"
  title: 3. BOOTP Client Behavior
- contents:
  - "4. BOOTP Relay Agents\n         In many cases, BOOTP clients and their associated
    BOOTP\n         server(s) do not reside on the same IP network or subnet.  In\n
    \        such cases, some kind of third-party agent is required to\n         transfer
    BOOTP messages between clients and servers.  Such an\n         agent was originally
    referred to as a \"BOOTP forwarding agent.\"\n         However, in order to avoid
    confusion with the IP forwarding\n         function of an IP router, the name
    \"BOOTP relay agent\" is\n         hereby adopted instead.\n      DISCUSSION:\n
    \        A BOOTP relay agent performs a task which is distinct from an\n         IP
    router's normal IP forwarding function.  While a router\n         normally switches
    IP datagrams between networks more-or-less\n         transparently, a BOOTP relay
    agent may more properly be thought\n         to receive BOOTP messages as a final
    destination and then\n         generate new BOOTP messages as a result.  It is
    incorrect for a\n         relay agent implementation to simply forward a BOOTP
    message\n         \"straight through like a regular packet.\"\n         This relay-agent
    functionality is most conveniently located in\n         the routers which interconnect
    the clients and servers, but may\n         alternatively be located in a host
    which is directly connected\n         to the client subnet.\n         Any Internet
    host or router which provides BOOTP relay-agent\n         capability MUST conform
    to the specifications in this memo.\n"
  - contents:
    - "4.1 General BOOTP Processing for Relay Agents\n   All locally delivered UDP
      messages whose UDP destination port number\n   is BOOTPS (67) are considered
      for special processing by the host or\n   router's logical BOOTP relay agent.\n
      \  In the case of a host, locally delivered datagrams are simply all\n   datagrams
      normally received by that host, i.e., broadcast and\n   multicast datagrams
      as well as unicast datagrams addressed to IP\n   addresses of that host.\n   In
      the case of a router, locally delivered datagrams are broadcast\n   and multicast
      datagrams as well as unicast datagrams addressed to IP\n   addresses of that
      router.  These are datagrams for which the router\n   should be considered an
      end destination as opposed to an intermediate\n   switching node.  Thus a unicast
      datagram with an IP destination not\n   matching any of the router's IP addresses
      is not considered for\n   processing by the router's logical BOOTP relay agent.\n
      \  Hosts and routers are usually required to silently discard incoming\n   datagrams
      containing illegal IP source addresses.  This is generally\n   known as \"Martian
      address filtering.\"  One of these illegal addresses\n   is 0.0.0.0 (or actually
      anything on network 0).  However, hosts or\n   routers which support a BOOTP
      relay agent MUST accept for local\n   delivery to the relay agent BOOTREQUEST
      messages whose IP source\n   address is 0.0.0.0.  BOOTREQUEST messages from
      legal IP source\n   addresses MUST also be accepted.\n   A relay agent MUST
      silently discard any received UDP messages whose\n   UDP destination port number
      is BOOTPC (68).\n      DISCUSSION:\n         There should be no need for a relay
      agent to process messages\n         addressed to the BOOTPC port.  Careful reading
      of the original\n         BOOTP specification [1] will show this.  Nevertheless,
      some\n         relay agent implementations incorrectly relay such messages.\n
      \  The consistency checks specified in Section 2.1 SHOULD be performed\n   by
      the relay agent.  BOOTP messages not meeting these consistency\n   checks MUST
      be silently discarded.\n"
    - contents:
      - "4.1.1 BOOTREQUEST Messages\n   Some configuration mechanism MUST exist to
        enable or disable the\n   relaying of BOOTREQUEST messages.  Relaying MUST
        be disabled by\n   default.\n   When the BOOTP relay agent receives a BOOTREQUEST
        message, it MAY use\n   the value of the 'secs' (seconds since client began
        booting) field of\n   the request as a factor in deciding whether to relay
        the request.  If\n   such a policy mechanism is implemented, its threshold
        SHOULD be\n   configurable.\n      DISCUSSION:\n         To date, this feature
        of the BOOTP protocol has not necessarily\n         been shown to be useful.
        \ See Section 3.2 for a discussion.\n   The relay agent MUST silently discard
        BOOTREQUEST messages whose\n   'hops' field exceeds the value 16.  A configuration
        option SHOULD be\n   provided to set this threshold to a smaller value if
        desired by the\n   network manager.  The default setting for a configurable
        threshold\n   SHOULD be 4.\n   If the relay agent does decide to relay the
        request, it MUST examine\n   the 'giaddr' (\"gateway\" IP address) field.
        \ If this field is zero,\n   the relay agent MUST fill this field with the
        IP address of the\n   interface on which the request was received.  If the
        interface has\n   more than one IP address logically associated with it, the
        relay\n   agent SHOULD choose one IP address associated with that interface
        and\n   use it consistently for all BOOTP messages it relays.  If the\n   'giaddr'
        field contains some non-zero value, the 'giaddr' field MUST\n   NOT be modified.
        \ The relay agent MUST NOT, under any circumstances,\n   fill the 'giaddr'
        field with a broadcast address as is suggested in\n   [1] (Section 8, sixth
        paragraph).\n   The value of the 'hops' field MUST be incremented.\n   All
        other BOOTP fields MUST be preserved intact.\n   At this point, the request
        is relayed to its new destination (or\n   destinations).  This destination
        MUST be configurable.  Further, this\n   destination configuration SHOULD
        be independent of the destination\n   configuration for any other so-called
        \"broadcast forwarders\" (e.g.,\n   for the UDP-based TFTP, DNS, Time, etc.
        \ protocols).\n      DISCUSSION:\n         The network manager may wish the
        relaying destination to be an\n         IP unicast, multicast, broadcast,
        or some combination.  A\n         configurable list of destination IP addresses
        provides good\n         flexibility.  More flexible configuration schemes
        are\n         encouraged.  For example, it may be desirable to send to the\n
        \        limited broadcast address (255.255.255.255) on specific\n         physical
        interfaces.  However, if the BOOTREQUEST message was\n         received as
        a broadcast, the relay agent MUST NOT rebroadcast\n         the BOOTREQUEST
        on the physical interface from whence it came.\n         A relay agent MUST
        use the same destination (or set of\n         destinations) for all BOOTREQUEST
        messages it relays from a\n         given client.\n      DISCUSSION:\n         At
        least one known relay agent implementation uses a round-\n         robin scheme
        to provide load balancing across multiple BOOTP\n         servers.  Each time
        it receives a new BOOTREQUEST message, it\n         relays the message to
        the next BOOTP server in a list of\n         servers.  Thus, with this relay
        agent, multiple consecutive\n         BOOTREQUEST messages from a given client
        will be delivered to\n         different servers.\n         Unfortunately,
        this well-intentioned scheme reacts badly with\n         DHCP [3] and perhaps
        other variations of the BOOTP protocol\n         which depend on multiple
        exchanges of BOOTREQUEST and BOOTREPLY\n         messages between clients
        and servers.  Therefore, all\n         BOOTREQUEST messages from a given client
        MUST be relayed to the\n         same destination (or set of destinations).\n
        \        One way to meet this requirement while providing some load-\n         balancing
        benefit is to hash the client's link-layer address\n         (or some other
        reliable client-identifying information) and use\n         the resulting hash
        value to select the appropriate relay\n         destination (or set of destinations).
        \ The simplest solution,\n         of course, is to not use a load-balancing
        scheme and just relay\n         ALL received BOOTREQUEST messages to the same
        destination (or\n         set of destinations).\n         When transmitting
        the request to its next destination, the\n         relay agent may set the
        IP Time-To-Live field to either the\n         default value for new datagrams
        originated by the relay agent,\n         or to the TTL of the original BOOTREQUEST
        decremented by (at\n         least) one.\n      DISCUSSION:\n         As an
        extra precaution against BOOTREQUEST loops, it is\n         preferable to
        use the decremented TTL from the original\n         BOOTREQUEST.  Unfortunately,
        this may be difficult to do in\n         some implementations.\n         If
        the BOOTREQUEST has a UDP checksum (i.e., the UDP checksum\n         is non-zero),
        the checksum must be recalculated before\n         transmitting the request.\n"
      title: 4.1.1 BOOTREQUEST Messages
    - contents:
      - "4.1.2 BOOTREPLY Messages\n   BOOTP relay agents relay BOOTREPLY messages
        only to BOOTP clients.\n   It is the responsibility of BOOTP servers to send
        BOOTREPLY messages\n   directly to the relay agent identified in the 'giaddr'
        field.\n   Therefore, a relay agent may assume that all BOOTREPLY messages
        it\n   receives are intended for BOOTP clients on its directly-connected\n
        \  networks.\n   When a relay agent receives a BOOTREPLY message, it should
        examine\n   the BOOTP 'giaddr', 'yiaddr', 'chaddr', 'htype', and 'hlen' fields.\n
        \  These fields should provide adequate information for the relay agent\n
        \  to deliver the BOOTREPLY message to the client.\n   The 'giaddr' field
        can be used to identify the logical interface from\n   which the reply must
        be sent (i.e., the host or router interface\n   connected to the same network
        as the BOOTP client).  If the content\n   of the 'giaddr' field does not match
        one of the relay agent's\n   directly-connected logical interfaces, the BOOTREPLY
        messsage MUST be\n   silently discarded.\n   The 'htype', 'hlen', and 'chaddr'
        fields supply the link-layer\n   hardware type, hardware address length, and
        hardware address of the\n   client as defined in the ARP protocol [4] and
        the Assigned Numbers\n   document [6].  The 'yiaddr' field is the IP address
        of the client, as\n   assigned by the BOOTP server.\n   The relay agent SHOULD
        examine the newly-defined BROADCAST flag (see\n   Sections 2.2 and 3.1.1 for
        more information).  If this flag is set to\n   1, the reply SHOULD be sent
        as an IP broadcast using the IP limited\n   broadcast address 255.255.255.255
        as the IP destination address and\n   the link-layer broadcast address as
        the link-layer destination\n   address.  If the BROADCAST flag is cleared
        (0), the reply SHOULD be\n   sent as an IP unicast to the IP address specified
        by the 'yiaddr'\n   field and the link-layer address specified in the 'chaddr'
        field.  If\n   unicasting is not possible, the reply MAY be sent as a broadcast,
        in\n   which case it SHOULD be sent to the link-layer broadcast address\n
        \  using the IP limited broadcast address 255.255.255.255 as the IP\n   destination
        address.\n      DISCUSSION:\n         The addition of the BROADCAST flag to
        the protocol is a\n         workaround to help promote interoperability with
        certain client\n         implementations.\n         Note that since the 'flags'
        field was previously defined in [1]\n         simply as an \"unused\" field,
        it is possible that old client or\n         server implementations may accidentally
        and unknowingly set the\n         new BROADCAST flag.  It is actually expected
        that such\n         implementations will be rare (most implementations seem
        to\n         zero-out this field), but interactions with such\n         implementations
        must nevertheless be considered.  If an old\n         client or server does
        set the BROADCAST flag to 1 incorrectly,\n         conforming relay agents
        will generate broadcast BOOTREPLY\n         messages to the corresponding
        client.  The BOOTREPLY messages\n         should still properly reach the
        client, at the cost of one\n         (otherwise unnecessary) additional broadcast.
        \ This, however,\n         is no worse than a server or relay agent which
        always\n         broadcasts its BOOTREPLY messages.\n         Older client
        or server implementations which accidentally set\n         the BROADCAST flag
        SHOULD be corrected to properly comply with\n         this newer specification.\n
        \        All BOOTP fields MUST be preserved intact.  The relay agent\n         MUST
        NOT modify any BOOTP field of the BOOTREPLY message when\n         relaying
        it to the client.\n         The reply MUST have its UDP destination port set
        to BOOTPC\n         (68).\n         If the BOOTREPLY has a UDP checksum (i.e.,
        the UDP checksum is\n         non-zero), the checksum must be recalculated
        before\n         transmitting the reply.\n"
      title: 4.1.2 BOOTREPLY Messages
    title: 4.1 General BOOTP Processing for Relay Agents
  title: 4. BOOTP Relay Agents
- contents:
  - "5. BOOTP Server Behavior\n   This section provides clarifications on the behavior
    of BOOTP\n   servers.\n"
  - contents:
    - "5.1 Reception of BOOTREQUEST Messages\n   All received UDP messages whose UDP
      destination port number is BOOTPS\n   (67) are considered for processing by
      the BOOTP server.\n   Hosts and routers are usually required to silently discard
      incoming\n   datagrams containing illegal IP source addresses.  This is generally\n
      \  known as \"Martian address filtering.\"  One of these illegal addresses\n
      \  is 0.0.0.0 (or actually anything on network 0).  However, hosts or\n   routers
      which support a BOOTP server MUST accept for local delivery\n   to the server
      BOOTREQUEST messages whose IP source address is\n   0.0.0.0.  BOOTREQUEST messages
      from legal IP source addresses MUST\n   also be accepted.\n   A BOOTP server
      MUST silently discard any received UDP messages whose\n   UDP destination port
      number is BOOTPC (68).\n      DISCUSSION:\n         There should be no need
      for a BOOTP server to process messages\n         addressed to the BOOTPC port.
      \ Careful reading of the original\n         BOOTP specification [1] will show
      this.\n         The consistency checks specified in Section 2.1 SHOULD be\n
      \        performed by the BOOTP server.  BOOTP messages not meeting\n         these
      consistency checks MUST be silently discarded.\n"
    title: 5.1 Reception of BOOTREQUEST Messages
  - contents:
    - "5.2 Use of the 'secs' field\n   When the BOOTP server receives a BOOTREQUEST
      message, it MAY use the\n   value of the 'secs' (seconds since client began
      booting) field of the\n   request as a factor in deciding whether and/or how
      to reply to the\n   request.\n      DISCUSSION:\n         To date, this feature
      of the BOOTP protocol has not necessarily\n         been shown to be useful.
      \ See Section 3.2 for a discussion.\n"
    title: 5.2 Use of the 'secs' field
  - contents:
    - "5.3 Use of the 'ciaddr' field\n   There have been various client interpretations
      of the 'ciaddr' field\n   for which Section 3.3 should be consulted.  A BOOTP
      server SHOULD be\n   prepared to deal with these varying interpretations.  In
      general, the\n   'ciaddr' field SHOULD NOT be trusted as a sole key in identifying
      a\n   client; the contents of the 'ciaddr', 'chaddr', 'htype', and 'hlen'\n
      \  fields, and probably other information (perhaps in the 'file' and\n   'vend'
      fields) SHOULD all be considered together in deciding how to\n   respond to
      a given client.\n   BOOTP servers SHOULD preserve the contents of the 'ciaddr'
      field in\n   BOOTREPLY messages; the contents of 'ciaddr' in a BOOTREPLY message\n
      \  SHOULD exactly match the contents of 'ciaddr' in the corresponding\n   BOOTREQUEST
      message.\n      DISCUSSION:\n         It has been suggested that a client may
      wish to use the\n         contents of 'ciaddr' to further verify that a particular\n
      \        BOOTREPLY message was indeed intended for it.\n"
    title: 5.3 Use of the 'ciaddr' field
  - contents:
    - "5.4 Strategy for Delivery of BOOTREPLY Messages\n   Once the BOOTP server has
      created an appropriate BOOTREPLY message,\n   that BOOTREPLY message must be
      properly delivered to the client.\n   The server SHOULD first check the 'ciaddr'
      field.  If the 'ciaddr'\n   field is non-zero, the BOOTREPLY message SHOULD
      be sent as an IP\n   unicast to the IP address identified in the 'ciaddr' field.
      \ The UDP\n   destination port MUST be set to BOOTPC (68).  However, the server\n
      \  MUST be aware of the problems identified in Section 3.3.  The server\n   MAY
      choose to ignore the 'ciaddr' field and act as if the 'ciaddr'\n   field contains
      0.0.0.0 (and thus continue with the rest of the\n   delivery algorithm below).\n
      \  The server SHOULD next check the 'giaddr' field.  If this field is\n   non-zero,
      the server SHOULD send the BOOTREPLY as an IP unicast to\n   the IP address
      identified in the 'giaddr' field.  The UDP destination\n   port MUST be set
      to BOOTPS (67).  This action will deliver the\n   BOOTREPLY message directly
      to the BOOTP relay agent closest to the\n   client; the relay agent will then
      perform the final delivery to the\n   client.  If the BOOTP server has prior
      knowledge that a particular\n   client cannot receive unicast BOOTREPLY messages
      (e.g., the network\n   manager has explicitly configured the server with such
      knowledge),\n   the server MAY set the newly-defined BROADCAST flag to indicate
      that\n   relay agents SHOULD broadcast the BOOTREPLY message to the client.\n
      \  Otherwise, the server MUST preserve the state of the BROADCAST flag\n   so
      that the relay agent can correctly act upon it.\n   If the 'giaddr' field is
      set to 0.0.0.0, then the client resides on\n   one of the same networks as the
      BOOTP server.  The server SHOULD\n   examine the newly-defined BROADCAST flag
      (see Sections 2.2, 3.1.1 and\n   4.1.2 for more information).  If this flag
      is set to 1 or the server\n   has prior knowledge that the client is unable
      to receive unicast\n   BOOTREPLY messages, the reply SHOULD be sent as an IP
      broadcast using\n   the IP limited broadcast address 255.255.255.255 as the
      IP\n   destination address and the link-layer broadcast address as the\n   link-layer
      destination address.  If the BROADCAST flag is cleared\n   (0), the reply SHOULD
      be sent as an IP unicast to the IP address\n   specified by the 'yiaddr' field
      and the link-layer address specified\n   in the 'chaddr' field.  If unicasting
      is not possible, the reply MAY\n   be sent as a broadcast in which case it SHOULD
      be sent to the link-\n   layer broadcast address using the IP limited broadcast
      address\n   255.255.255.255 as the IP destination address.  In any case, the
      UDP\n   destination port MUST be set to BOOTPC (68).\n      DISCUSSION:\n         The
      addition of the BROADCAST flag to the protocol is a\n         workaround to
      help promote interoperability with certain client\n         implementations.\n
      \        The following table summarizes server delivery decisions for\n         BOOTREPLY
      messages based upon information in BOOTREQUEST\n         messages:\n      BOOTREQUEST
      fields     BOOTREPLY values for UDP, IP, link-layer\n   +-----------------------+-----------------------------------------+\n
      \  | 'ciaddr'  'giaddr'  B | UDP dest     IP destination   link dest |\n   +-----------------------+-----------------------------------------+\n
      \  | non-zero     X      X | BOOTPC (68)  'ciaddr'         normal    |\n   |
      0.0.0.0   non-zero  X | BOOTPS (67)  'giaddr'         normal    |\n   | 0.0.0.0
      \  0.0.0.0   0 | BOOTPC (68)  'yiaddr'         'chaddr'  |\n   | 0.0.0.0   0.0.0.0
      \  1 | BOOTPC (68)  255.255.255.255  broadcast |\n   +-----------------------+-----------------------------------------+\n
      \       B = BROADCAST flag\n        X = Don't care\n   normal = determine from
      the given IP destination using normal\n            IP routing mechanisms and/or
      ARP as for any other\n            normal datagram\n"
    title: 5.4 Strategy for Delivery of BOOTREPLY Messages
  title: 5. BOOTP Server Behavior
- contents:
  - "Acknowledgements\n   The author would like to thank Gary Malkin for his contribution
    of\n   the \"BOOTP over IEEE 802.5 Token Ring Networks\" section, and Steve\n
    \  Deering for his observations on the problems associated with the\n   'giaddr'
    field.\n   Ralph Droms and the many members of the IETF Dynamic Host\n   Configuration
    and Router Requirements working groups provided ideas\n   for this memo as well
    as encouragement to write it.\n   Philip Almquist and David Piscitello offered
    many helpful suggestions\n   for improving the clarity, accuracy, and organization
    of this memo.\n   These contributions are graciously acknowledged.\n"
  title: Acknowledgements
- contents:
  - "References\n   [1] Croft, B., and J. Gilmore, \"Bootstrap Protocol (BOOTP)\",
    RFC 951,\n       Stanford University and Sun Microsystems, September 1985.\n   [2]
    Reynolds, J., \"BOOTP Vendor Information Extensions\", RFC 1497,\n       USC/Information
    Sciences Institute, August 1993.  This RFC is\n       occasionally reissued with
    a new number.  Please be sure to\n       consult the latest version.\n   [3] Droms,
    R., \"Dynamic Host Configuration Protocol\", RFC 1541,\n       Bucknell University,
    October 1993.\n   [4] Plummer, D., \"An Ethernet Address Resolution Protocol\",
    STD 37,\n       RFC 826, MIT, November 1982.\n   [5] Deering, S., \"ICMP Router
    Discovery Messages\", RFC 1256, Xerox\n       PARC, September 1991.\n   [6] Reynolds,
    J., and J. Postel, \"Assigned Numbers\", STD 2, RFC 1340,\n       USC/Information
    Sciences Institute, July, 1992.  This RFC is\n       periodically reissued with
    a new number.  Please be sure to\n       consult the latest version.\n"
  title: References
- contents:
  - "Security Considerations\n   There are many factors which make BOOTP in its current
    form quite\n   insecure.  BOOTP is built directly upon UDP and IP which are as
    yet\n   inherently insecure themselves.  Furthermore, BOOTP is generally\n   intended
    to make maintenance of remote and/or diskless hosts easier.\n   While perhaps
    not impossible, configuring such hosts with passwords or\n   keys may be difficult
    and inconvenient.  This makes it difficult to\n   provide any form of reasonable
    authentication between servers and\n   clients.\n   Unauthorized BOOTP servers
    may easily be set up.  Such servers can\n   then send false and potentially disruptive
    information to clients such\n   as incorrect or duplicate IP addresses, incorrect
    routing information\n   (including spoof routers, etc.), incorrect domain nameserver
    addresses\n   (such as spoof nameservers), and so on.  Clearly, once this \"seed\"\n
    \  mis-information is planted, an attacker can further compromise the\n   affected
    systems.\n   Unauthorized BOOTP relay agents may present some of the same problems\n
    \  as unauthorized BOOTP servers.\n   Malicious BOOTP clients could masquerade
    as legitimate clients and\n   retrieve information intended for those legitimate
    clients.  Where\n   dynamic allocation of resources is used, a malicious client
    could\n   claim all resources for itself, thereby denying resources to\n   legitimate
    clients.\n"
  title: Security Considerations
- contents:
  - "Author's Address\n   Walt Wimer\n   Network Development\n   Carnegie Mellon University\n
    \  5000 Forbes Avenue\n   Pittsburgh, PA  15213-3890\n   Phone: (412) 268-6252\n
    \  EMail:  Walter.Wimer@CMU.EDU\n"
  title: Author's Address
