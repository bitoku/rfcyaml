- title: __initial_text__
  contents:
  - "          Dacom 450/500 Facsimile Data Transcoding\n         A. Agarwal, M. J.\
    \ O'Connor and D. L. Mills\n                      2 November 1981\n1.  Introduction\n\
    \     As part of our effort in support of  the  DARPA  Internet  Program,\nsoftware\
    \  modules  to encode and decode facsimile data for the Dacom 450\nand 500 models\
    \ Computerfax facsimile  machines  have  been  constructed.\nThe  purpose of these\
    \ modules is to map the data representations used by\nthese machines to and from\
    \ bit-map  and  run-length  representations  in\nprograms  for editing, transmission\
    \ and archiving facsimile images.  The\nmodules are written in the PDP-11 MACRO-11\
    \ assembly language and can  be\nincorporated into programs for, among others,\
    \ the RT-11 operating system\nand the DCNET BOS or VOS operating systems.\n  \
    \   The first part of this report describes in  detail  the  Dacom  450\ndata\
    \ compression algorithm and is an update and correction to an earlier\nmemorandum\
    \ [2].  Following this, the encoding  and  decoding  algorithms\nare  described\
    \  along  with  the  supporting  programs and file formats.\nalgorithm.   Grateful\
    \  acknowledgment  is made to E.  A.  Poe of Rapicom\nfor his assistance in this\
    \ effort.\n     The second part of this report describes briefly the Dacom 500\
    \ data\ncompression  algorithm  as used by the INTELPOST electronic-mail network\n\
    under  development  by  the  US  Postal  Service  and  several   foreign\nadministrations.\
    \    These  machines  conform  to  the  CCITT  T.4  Draft\nRecommendation, described\
    \ in [5].  Supporting programs and file  formats\nare described.\n2.  Dacom 450\
    \ Data Compression Principles\n     The encoding algorithm for the Dacom 450 processes\
    \ lines scanned by\nthe  machine  to  produce a two-dimensional run-length code\
    \ described by\nWeber [1]; however,  this  article  contains  a  number  of  errors\
    \  and\nomissions,  many  of  which  were  discovered  only  after  considerable\n\
    analysis  and  experimentation  [2,3].   The  machine  operates  over  a\ncoordinate\
    \   space   of   l726   by  approximately  2200  pels  when  in\nhigh-resolution\
    \ (detail) mode.  In normal (quality)  mode  the  vertical\nresolution is halved,\
    \ so that about 1100 lines are transmitted, while in\nexpress mode about 733 lines\
    \ are transmitted (missed lines are filled in\non playback by replicating previous\
    \ lines).\n     Data are encoded  two  rows  at  a  time  using  a  two-dimensional\n\
    \                    |          |          |\n                ----+----------+----------+----\n\
    \                ... |  x(1,j)  | x(1,j+1) | ...\n                ----+----------+----------+----\n\
    \                ... |  x(2,j)  | x(2,j+1) | ...\n                ----+----------+----------+----\n\
    \                    |          |          |\n                      Direction\
    \ of scan ->\n               Figure 1. Data Representation\n     For each j the\
    \ vector (x(1,j),x(2,j)) represents  the  contents  of\nthe  jth  column, where\
    \ x(i,j) can take on values of zero (white) or one\n(black).  Each of the four\
    \ possible vectors ranging  over  these  values\nwill  be  called a state (Dacom\
    \ calls these \"modes\") with the succession\nof transitions between these states\
    \ determined by the picture content of\nthe  particular line-pair.  Scanning of\
    \ the line-pairs follows one after\nthe other with no special end-of-line code\
    \ in the data itself.  For  the\npurpose  of later discussion and comparison with\
    \ the published data, the\nfollowing conventions will be used (note: the pels\
    \ read top-bottom):\n                Pels    Vector  State\n                ---------------------\
    \   \n                W-W     (0,0)   0\n                B-W     (1,0)   1\n \
    \               W-B     (0,1)   2\n                B-B     (1,1)   3\n     The\
    \ algorithm used by Dacom to generate the transmitted data as the\ncolumns   are\
    \   scanned   can  be  described  as  the  non-deterministic\nfinite-state automaton\
    \ (nfsa) shown in Figure 2.  Conceptually, the nfsa\nstarts  at  the beginning\
    \ of a page in a designated state and at a point\njust after scanning the jth\
    \ column in the jth state.  It then scans  the\n(j + 1)th column and enters that\
    \ state while emitting the string of bits\nshown in the figure.\n     In the states\
    \ corresponding to  W-W  (0)  and  B-B  (3)  a  special\nrun-length  encoding\
    \  techniques is used.  There are two state variables\nassociated with each of\
    \  these  two  states,  one  variable  used  as  a\nrun-length  counter  and \
    \ the  other  the field length (in bits) of this\ncounter.  Upon each entry to\
    \ either of these two states the  counter  is\ninitialized  at  zero  and  counts\
    \ up for every additional column of the\nsame state.  At the end  of  the  run\
    \  the  value  of  this  counter  is\ntransmitted  extending  with high-order\
    \ zeros, if necessary, to fill the\nfield length specified.  If, however, the\
    \ counter equals 2**n - 1, where\nn  is the field length, then a sequence of n\
    \ one-bits is emitted and the\ncounter re-initialized at zero with a field length\
    \ of n + 1.   Thus,  if\nn = 3, a run length of three is transmitted as {010}\
    \ and a run length of\nseven as {110}, while a run length of eight as two words,\
    \ {111} followed\n                                 0100\n           .--------------------->----------------------------------.\n\
    \           |                                                        |\n     \
    \      |   .-----------------<------------------------------.   |\n          \
    \ |   |                1                               |   |\n           |   V\
    \                                                |   |\n     .--------------.\
    \                     .---------------.     |   |\n     |              |     \
    \                |               |     |   |\n     |              |        010\
    \          |               |     |   |\n  .->|      1       |-------------------->|\
    \       2       |->.  |   |\n  |  |              |                     |     \
    \          |  |  |   |\n 0|  |     B-W      |        101          |      W-B \
    \     |  |1 |   |\n  \\<-|              |<--------------------|              \
    \ |<-'  |   |\n     |              |                     |               |   \
    \  |   |\n     |              |               .---->|               |     |  \
    \ |\n     \\--------------'               |     \\---------------'     |   |\n\
    \         |   A                      |      |     |   A          |   |\n     \
    \    |   |     .--------->------'      |     |   |          |   |\n         |\
    \   |     |         1             |     |   |          |   |\n         |   | \
    \    |                       |     |   |          A   V\n         |   |     |\
    \                       |     |   |          |   |\n     0111|   |1    |     \
    \                  | 1000|   |1         |   |\n         |   |     |          \
    \             |     |   |          |   |\n         |   |     |               \
    \        |     |   |          |   |\n         |   |     |                    \
    \   |     |   |          |   |\n         |   |     |          1011         | \
    \    |   |          |   |\n         |   |     |    .-------<----------'     |\
    \   |          |   |\n         V   |     |    |                        V   | \
    \         |   |\n     .--------------.   |                 .---------------. \
    \    |   |\n     |              |<--'                 |               |     |\
    \   |\n     |              |        0            |               |     |   |\n\
    \     |      3       |<--------------------|       0       |-----'   |\n     |\
    \              |                     |               |         |\n     |     B-B\
    \      |                     |      W-W      |         |\n     |             \
    \ |-------------------->|               |<--------'\n     |              |   \
    \     0            |               |\n     |              |                  \
    \   |               |\n     \\--------------'                     \\---------------'\n\
    \         |    A                                 |    A\n         |    |     \
    \                            |    |\n         \\----'                        \
    \         \\----'\n          run                                    run\n    \
    \ Field-length values are constrained not to exceed  seven,  so  that\nruns  exceeding\
    \  l27 with n = 7 will be encoded as a separate 7-bit word\nof one-bits for each\
    \ run of l27  except  the  last,  which  must  always\ncontain  at  least one\
    \ zero-bit.  The field length n is decreased by one\nunder the following circumstances:\
    \ the current run has been encoded as a\nsingle  n-bit  field,  and for n in the\
    \ range four through seven the two\nhigh-order bits are zero or for n equal to\
    \ three the  single  high-order\nbit  is  zero.   The field length is not allowed\
    \ to be reduced below two\nbits.\n     The encoding algorithm starts in state\
    \ 0 with  both  field  lengths\nset to 7.\n2.1.  Dacom 450 Decoding Algorithm\n\
    \     For reasons of speed and simplicity it is desirable that the  Dacom\n450\
    \  decoding  algorithm  be  modeled  on  the  basis of a deterministic\nfinite-state\
    \ automaton (dfsa).  Using straightforward formal procedures,\nthe  dfsa  of Figure\
    \ 3 can be constructed.  This machine makes one state\ntransition for every bit,\
    \ except for the W-W (0)  and  B-B  (3)  states,\nwhich  must be treated specially\
    \ in any case.  The states are labeled in\nsuch a way as to correspond to those\
    \ of Figure  2  for  states  numbered\nfrom zero to three.\n     The decoded output\
    \ symbols, in this case the columns  corresponding\nto  each  of the states, are\
    \ represented by the states themselves.  Upon\nentry to state B-W (1) or W-B (2)\
    \ a run-length counter is initialized to\none.   Each  traversal  of a loop back\
    \ to the same state increments this\ncounter and, upon exit to any other state,\
    \ the  value  of  this  counter\nrepresents  the  number  of columns to be produced.\
    \  Upon entry to state\nW-W (0) or B-B (3) the run-length counter is initialized\
    \ to zero and the\nassociated   field-length   state  variable  n  established.\
    \   For  each\nsuccessive n bits of all-ones, the counter is increased by 2**n\
    \ - 1  and\nthen n itself increased by one, but not above seven.  If the next\
    \ n bits\nare not all ones, then the counter is increased by the value represented\n\
    \        .-----------.                     .-----------.\n  .-----|          \
    \ |                     |           |-----.\n  |     |     9     |           \
    \          |     6     |     |\n  |   .-|           |<--.             .-->|  \
    \         |-.   |\n  |   | \\-----------'    \\           /    \\-----------'\
    \ |   |\n 1|  0|                   \\         /                   |1  |0\n  |\
    \   |    .->Error        \\       /        Error<-.    |   |\n  |   |   0|   \
    \             \\     /                |1   |   |\n  |   | .-----------.      \
    \  \\   /        .-----------. |   |\n  | 1 | |           |         \\ /     \
    \    |           | | 0 |\n  | .---|     7     |          \\          |    10 \
    \    |---. |\n  | | | |           |         / \\         |           | | | |\n\
    \  | | | \\-----------'        /   \\        \\-----------' | | |\n  | | |   \
    \    A             /     \\             A       | | |\n  | | |       |       \
    \     /       \\            |       | | |\n  | | |      1|           /       \
    \  \\           |0      | | |\n  | | | .-----------.  0 /           \\ 1  .-----------.\
    \ | | |\n  | | | |           |---'             \\---|           | | | |\n  | |\
    \ | |     5     |                     |     8     | | | |\n  | | | |         \
    \  |                     |           | | | |\n  | | | \\-----------'         \
    \            \\-----------' | | |\n  | | |       A                           \
    \      A       | | |\n  | | |       |                                 |      \
    \ | | |\n  | | |      1|                                 |0      | | |\n  | |\
    \ | .-----------.                     .-----------. | | |\n  | | ->|         \
    \  |                     |           |<- | |\n  | |   |     1     |          \
    \           |     2     |   | |\n  | |   |    B-W    |<-----.       .----->| \
    \   W-B    |   | |\n  | |   \\-----------'      |       |      \\-----------'\
    \   | |\n  | |      |     A         |       |         A     |      | |\n  | |\
    \      |     |         |0     1|         |     |      | |\n  | |      \\-----'\
    \         |       |         \\-----'      | |\n  | |         0          .-----------.\
    \          0         | |\n  | |                    |           |             \
    \       | |\n  | |                    |     4     |                    | |\n \
    \ | |        RUN         |           |         RUN        | |\n  | |      .-----.\
    \       \\-----------'       .-----.      | |\n  | |      |     |         A  \
    \     A         |     |      | |\n  | |      |     V         |       |       \
    \  V     |      | |\n  | |   .-----------.   1  |       |  1   .-----------. \
    \  | |\n  | \\-->|           |------'   0   \\------|           |<--' |\n  | \
    \    |     3     |<--------------------|     0     |     |\n  \\---->|    B-B\
    \    |-------------------->|    W-W    |<----'\n2.2.  Formatting Considerations\n\
    \     Data are encoded for transmission  by  the  Dacom  450  in  585-bit\nframes,\
    \  consisting  of  a  24-bit  synchronization code, 37-bit leader,\n512-bit information\
    \ area and l2-bit checksum.  There are  two  kinds  of\nframes  distinguished\
    \  by leader format, one for setup or initialization\nand the other for the data\
    \ itself.  Serial binary image data are  placed\nin the data area of succeeding\
    \ data frames.\n     The header of each frame is shown in Figure 4.  The various\
    \  fields\nare defined in Table 1 following the Figure.\n   +-----------+--------+-------------------+----------+\n\
    \   | Sync Code | Leader |        Data       | CRC Code |\n   +-----------+--------+-------------------+----------+\n\
    \        24    /    37    \\       512             12\n     .-------'        \
    \    \\----------------------.\n    /                                        \
    \     \\\n   +-------+-------+-------+-------+-------+-------+\n   | Flags | Count\
    \ | X Pos | Black | White | State |\n   +-------+-------+-------+-------+-------+-------+\n\
    \   |   7    \\ 10      12       3       3       2\n   |         \\--------------------------.\n\
    \   |                                     \\\n   +-----+-----+------+-----+-------+-----+\n\
    \   | Seq | RUN | COFB | RPT | Spare | SUB |\n   +-----+-----+------+-----+-------+-----+\n\
    \             Table 1. Header Field Definitions \nField   Width   Function   \
    \             Setup   Data\n       (bits)                           Block   Block\n\
    -----------------------------------------------------\nSync Code  24   Synchronization\
    \         30474730 (octal)\nSeq         2   Sequence number         00      00,01,10,11\n\
    RUN         1   Initialize-start        0       1\nCOFB        1   Unknown   \
    \              0       0\nRPT         1   Unknown                 1       0\n\
    Spare       1   Unknown                 0       0\nSUB         1   Indicates setup\
    \ frame   1       0\nCount      10   Number of bits in data  All 1's\n       \
    \         field (0 - 512)\nX Pos      12   Current position on     All 1's\n \
    \               scan line (0 - 1725)\nBlack       3   Current black field    \
    \ All 1's\n                length (2 - 7)\nWhite       3   Current white field\
    \     All 1's\n                length (2 - 7)\nState       2   Current state (0\
    \ - 3)   All 1's\nData      512   Data (0 - 512 bits)\n     Setup frames have\
    \ additional information in  the  data  field;  the\nvarious fields and their\
    \ functions are described in Table 2.\n        Table 2. Field Definitions for\
    \ Setup Frame.\nField       Width       Function\n--------------------------------\n\
    Start bit       1       Always zero\nSpeed bit       1       Set if express mode\n\
    Detail bit      1       Set if detail mode (speed and detail\n               \
    \         bits both zero for quality mode)\n14 inch         1       Set if 14-inch\
    \ paper \n5 inch          1       Set if 5-inch inch paper (14-inch\n        \
    \                and 5-inch inch paper bits both zero\n                      \
    \  for 11-inch paper)\nPaper present   1       Set if paper present in scanner\n\
    Spare           5       Can have any value\nMulti-page      1       Set if multi-page\
    \ mode\n               20       All 0's\n              480       Alternate 1's\
    \ and 0's\n     The tailing setup frames differ from the leading setup frames\
    \  only\nin  bits  which  indicate  whether  the system is operating in single\
    \ or\nmultiple page mode and whether paper is present in the scanner.\n     All\
    \ n-bit numeric fields (except Seq) are transmitted by the  Dacom\n450  machine\
    \  least-significant-bit  (LSB)  first  (i.e.   Count, X Pos,\nBlack,  White,\
    \  State, CRC, and run length words  in  the  data  field).\nAll other fields\
    \ are transmitted left-most bit first.\n     There are a few important points\
    \ to be considered in regard to  the\nheader  of  a  data frame.  The header contains\
    \ enough information about\nthe state of the decoding algorithm to be able to\
    \  re-establish  correct\ndecoding  in  the  event  of  loss  or  mutilation of\
    \ a data frame.  The\ndecoding algorithm resets its state variables to  those\
    \  in  the  header\neach  time  it  begins  decoding  a  new  data  frame.   One\
    \ of the most\ndifficult problems encountered while constructing the decoding\
    \ algorithm\nfollow exactly that described in the previous section.\n     This\
    \ requirement for every data  frame  to  be  self-synchronizing,\nleads  to  a\
    \  few  subtleties in the encoding algorithm which seem quite\nnatural, but were\
    \ not very obvious in the beginning.\n1.  Transition bits(s) labeling the arcs\
    \ on the state transition diagram\n    in  Figure  2  are  not broken across frames.\
    \  Similarly, individual\n    run-length words are not broken across frames.\n\
    2.  If a frame ends with a transition, the  header  of  the  next  frame\n   \
    \ contains the state to which the transition is made.\n3.  If a frame ends with\
    \ a transition out of state  0  or  3,  then  the\n    transition  bit (0 or 1)\
    \ is inserted at the end of the current frame\n    (not at the beginning of the\
    \ next frame).\n4.  The field lengths for black and white runs  in  the  header\
    \  include\n    changes that may have been caused at the end of the previous frame.\n\
    5.  If a frame begins with a white  or  black  run,  then  this  run  is\n   \
    \ treated  (for  purpose of decreasing its field length) as if it were\n    the\
    \ beginning of a new run, since there is  no  information  in  the\n    header\
    \ to indicate otherwise.\n     The decoding algorithm is  initialized  at  the\
    \  first  data  frame\nreceived  after  the  sequence  of  setup  frames  at \
    \ the  beginning of\ntransmission.  The first data frame has a count of zero,\
    \  indicating  no\ndata  bits  are  in  the frame.  The second data frame begins\
    \ the actual\ndocument; however, its X position appears to be irrelevant.  Instead,\
    \ we\nassume the initial X position at this time is one pel to the left of the\n\
    right margin  (-l  mod  l726).   With  these  assumptions  succeeding  X\npositions\
    \ of the algorithm and the frame headers agree.\n2.3.  The Decoding Program\n\
    \     The decoding algorithm described above has been implemented in  the\nPDP-11\
    \  MACRO-11 assembly language for the RT-11 operating system.  This\nprogram contains\
    \ extensive features for selectively dumping  frames  and\ntracing  the operation\
    \ of the algorithm.  It is designed to operate on a\nfile containing the raw data\
    \ generated  by  the  machine  and  does  not\ndepend  upon  any  prior  reformatting\
    \  of  the  data.  However, it will\noperate also on files in the so-called UCL\
    \ format [4],  which  has  been\nadopted  as  the standard for use in the Internet\
    \ Program.  The existing\nDCNET supporting software for the Dacom 450  uses  the\
    \  UCL  format  and\noperates  normally  to  copy  data  directly between the\
    \ machine and the\nfile, with decoding operations done at a later time.  However,\
    \ there  is\nno  intrinsic factor, except processing-rate limitations, why input\
    \ data\ncould not be decoded directly from the machine.\nsynchronization  pattern\
    \  is  found,  the  header  and data portions are\nextracted  and  the  various\
    \  state  variable  checked  and  reset,   if\nnecessary.    Checksum   verification\
    \  is  performed  according  to  the\npolynomial 1 + x**3 + x**5 + x**7 + x**8\
    \ + x**12.  In the case of  setup\nframes  the  format  (detail, quality, express),\
    \ page length (14, 8-l/2,\n5-l/4) and multiple-page indicators are extracted from\
    \  the  data  area.\nFinally,  under  control  of  specified  options,  the  header\
    \  and data\nportions of the frame are printed with appropriate headings.\n  \
    \   The decoding algorithm itself is called for each  data  frame.   It\nproduces\
    \  an  output  consisting of a sequence of run-length pairs which\ncan be used\
    \ to form bit maps and  other  representations  of  the  data.\nOptionally, a\
    \ printed trace of the operations performed by the algorithm\ncan be produced.\n\
    2.4.  The Encoding Program\n     The encoding algorithm has been implemented in\
    \ the PDP-11  MACRO-11\nassembly  language  for the RT-11 operating system.  The\
    \ program accepts\nfacsimile data in 16-bit run-length format or bit-map format.\
    \  The input\ndata  would normally be in a file, possibly obtained by translating\
    \ some\nother representation (e.g., T.4 format) to run-length or bit-map format.\n\
    The  program  produces  an output consisting of data compressed in Dacom\n450\
    \ format and packed in 585-bit frames  along  with  the  corresponding\nheader\
    \ and checksum information.\n     The encoding program needs to be careful about\
    \ how  to  break  data\nacross  frames  and  how many bits of data to insert in\
    \ each frame.  The\nrules mentioned in section 2.2.  help to solve the first \
    \ problem.   The\nsecond  problem is a little less understood.  The problem arises\
    \ because\ndata bits are required by the printing mechanism at a constant rate,\
    \ but\nsuccessive  frames  transmitted  at  the line rate can contain different\n\
    amounts of decoded information, leading to  buffer  overrun  in  extreme\ncases.\n\
    \     In order to compensate for the rate mismatch,  it  has  been  found\nsufficient\
    \  to  control  the  size  of  the  data  portion  of the frame\naccording to\
    \ a simple set of empirical rules which produce results quite\nsimilar  to  the\
    \  scanner  iteslf.  According to these rules, a frame is\n\"full\" when it contains\
    \ more than 500 bits of  data  or  when  the  data\nrepresents more than 4800*X\
    \ pels (or columns) of information,\nwhere   X = 2 for transmission rate 2.4 kbs,\n\
    \        X = 1 for transmission rate 4.8 kbs,\n        X = 1/2 for transmission\
    \ rate 9.6 kbs.\n2.5.  Dacom 450 File Formats\n     Dacom 450 facsimile data is\
    \ ordinarily stored as an RT-11  file  in\nthe  so-called  UCL  format  [4]. \
    \ In this format, each 585-bit frame is\nend.  The command byte is coded as follows:\n\
    a.  56 (70 octal): The data field contains  a  setup  frame  (the  first\n   \
    \ record of the file).  The length byte is 76 (114 octal).\nb.  57 (71 octal):\
    \ The data field contains a data frame  (the  remaining\n    records  in  the\
    \  file  except the last one).  The length byte is 76\n    (114 octal).\nc.  58\
    \ (72 octal): End of file (the last frame of the file).   There  is\n    no data\
    \ field and the length byte is 2.\n2.6.  Run-Length and Bit-Map File Formats\n\
    \     The decode program produces 16-bit run length words as its  output.\nEach\
    \  run  is encoded in a 16-bit word, with white in positive and black\nin negative\
    \ two's complement values.  A zero word terminates each  line,\nwith the trailing\
    \ white run suppressed if present.  An all-white line is\nencoded as a single\
    \ run of length one followed by a zero word.  The file\nis terminated by a line\
    \ of length zero, that is, a single zero word.\n     Bit-map files consist of\
    \ a four-byte header followed by  the  data.\nThe  header  consists  of  two \
    \ 2-byte  quantities,  the  first of which\nrepresents the number of pels in a\
    \ line and the  second  the  number  of\nlines  in  the  page.   Each  scanning\
    \ line of data is represented in an\nintegral number of bytes,  the  last  byte\
    \  of  a  line  zero-filled  if\nnecessary.\n3.  Dacom 500 Data Compression Principles\n\
    \     The Dacom 500 machines are high-speed versions  of  the  Dacom  450\nmachines\
    \  and  operate  in  the  50-Kbps range using the T.4 compression\nalgorithm.\
    \  This algorithm, described in the [5], is  a  one-dimensional\none,  rather\
    \  than  the  two-dimensional  one  used in the Dacom 450 and\ndescribed in previous\
    \ sections.  Since this algorithm is well known  and\nthe  subject  of  an  international\
    \  standard,  it  will  not be further\ndiscussed here.\n3.1.  Dacom 500 Decoding\
    \ Algorithm\n     The decoding program has been implemented in  the  PDP-11  MACRO-11\n\
    assembly  language  for  the  DCNET  and  RT-11  operating  systems.  It\noperates\
    \ on a file containing  facsimile  data  encoded  using  the  T.4\nalgorithm and\
    \ produces a file in bit-map format.\n     The decoding program scans the input\
    \ data bit-by-bit and recognizes\nsequences  of  bits which form valid run-length\
    \ codes (see the tables in\n[5]).  The table of Huffman codes can be represented\
    \ as  a  binary  tree\nwith  the  values of the run lengths (e.g.  1, 2, 64, 1728,\
    \ etc.) at the\n     The tables for black and  white  run-length  codes  are \
    \ stored  as\nseparate  binary  trees in the decoding program.  The decoding algorithm\n\
    starts by initializing an accumulator at zero.  It then  begins  at  the\nroot\
    \  of  the  corresponding  tree and traverses the tree as it consumes\nbits one-by-one\
    \ from the input.  When a terminal node  is  reached,  the\nvalue  stored  at\
    \  that  node is added to the accumulator.  If a make-up\nnode is reached, the\
    \ value at that node is added to the accumulator  and\nthe  search  is  resumed\
    \  with  the  same tree to obtain the terminating\nvalue; otherwise, the accumulator\
    \ represents the current run length  and\nthe search resumes with the alternate\
    \ tree.\n3.2.  Dacom 500 Encoding Program\n     The encoding program is also implemented\
    \  in  the  PDP-11  MACRO-11\nassembly  language  for the DCNET and RT-11 operating\
    \ systems.  It scans\nthe bit-map input and encodes each run of  black  or  white\
    \  pels  by  a\nsimple  table  lookup  of  the  Huffman  codes.   It  operates\
    \ on a file\ncontaining facsimile data in bit-map format and produces a file \
    \ in  T.4\nformat.   The T.4 specifications [5] require a minimum transmission\
    \ time\nper scan line of 4.3 milliseconds, which at 50-Kbps corresponds  to  242\n\
    bits  (DATA bits plus any required FILL bits plus the EOL bits equal 242\nbits\
    \ minimum).\n3.3.  Dacom 500 File Formats\n     The file consists of a number\
    \ of  512-byte  blocks,  the  first  of\nwhich  is  the  header.  The header contains\
    \ a list of two-byte entries,\nthe first of which contains the number of pages\
    \ and  the  remaining  the\nlengths  (in  blocks) of each page in turn.  The remaining\
    \ blocks of the\nfile contain the data for each page in T.4 format.  The  data\
    \  for  each\npage   is   preceded   by  a  page-setup  command  and  succeeded\
    \  by  a\npage-end-of-record command, as transmitted by the Dacom 500.  The format\n\
    of  both  commands  consists  of  the 12-bit T.4 EOL code (000000000001)\nrepeated\
    \ six times and followed  by  a  special  4-bit  code  word  also\nrepeated  six\
    \  times.  The special code word consists of bits B1 through\nB4 as defined below.\n\
    B1: VERTICAL RESOLUTION\n    0 = 7.7 lines per millimeter\n    1 = future option,\
    \ not implemented \nB2: OUTPUT PAPER LENGTH\n    0 = short length (Letter size)\n\
    \    1 = long length (Legal size)\nB3: DOCUMENT IN SCANNER\n    0 = no document\
    \ present (end of page)\n3.4.  Comparison of Facsimile Formats and Transcoding\
    \ Speeds\n     Four different file formats are presently used in  our  system\
    \  for\nfacsimile  data  storage:  Dacom 450, Dacom 500 (T.4), 16-bit run-length\n\
    and bit-map.  The sizes of typical files (in megabits) in these  formats\nare\
    \ shown below for comparison.\n        File    Dacom   Dacom   16-bit\n      \
    \          450     500     run-length\n        ----------------------------------\n\
    \        PNGUIN  0.22    0.5     0.27\n        INTELP  0.62    0.77    3.3\n \
    \       PANDA   1.02    2.03    6.41\nThe file called PNGUIN is  a  block  drawing\
    \  of  dancing  penguins  and\nrepresents  a  \"small\"  file.   The  file  called\
    \  INTELP is a composite\nINTELPOST test image with text and graphics and  represents\
    \  a  \"medium\"\nfile.    Finally,  the  file  called  PANDA  is  a  half-tone\
    \  newspaper\nphotograph of a giant panda and represents a \"monster\" file  (this\
    \  file\nwas  recorded  on  the  Dacom 450 in quality mode and is therefore about\n\
    half the size it would be in detail mode).  The size of the bit-map file\nfor\
    \ all these images is 3.8 megabits.  \n     Figure 5 shows the file sizes (in\
    \ 512-byte blocks) and  transcoding\ntimes  (in  seconds)  for  the  INTELPOST\
    \ test page.  The file sizes are\nindicated on the boxes, while the transcoding\
    \ times are indicated on the\narrows.  All times were obtained on the LSI-11/23\
    \ processor.\n             193                      925\n        +-----------+\
    \     95     +-----------+\n        |           |----------->|           |\n \
    \       |    T.4    |            |  Bit-map  |\n        |           |<-----------|\
    \           |\n        +-----------+    165     +-----------+\n              \
    \                       A   |\n                          60         |   |\n  \
    \            .----------------------'   |110\n              |                \
    \          |\n              |                          V\n        +-----------+\
    \     89     +-----------+\n        |           |----------->|           |\n \
    \       |Run-length |            | Dacom 450 |\n        |           |<-----------|\
    \           |\n        +-----------+    153     +-----------+\n4.  References\n\
    1.  Weber, D.R.  An adaptive  run-length  encoding  algorithm.   ICC-75,\n   \
    \ IEEE, San Francisco, California, June 1975.\n2.  Palmer, L.C.  Final Report,\
    \ COMSAT Participation in the DARPA Packet\n    Satellite  Internetworking  and\
    \ Speech Applications Program.  COMSAT\n    Laboratories, July 1980.\n3.  Katz,\
    \ A.  Decoding Facsimile  Data  from  the  Rapicom  450.   DARPA\n    Network\
    \  Working  Group  Report  RFC-798,  USC/Information  Sciences\n    Institute,\
    \ September 1981.\n4.  Postel, J.  Rapicom 450  Facsimile  File  Formats.   DARPA\
    \   Network\n    Working Group Report RFC-769,   USC/Information  Sciences Institute,\n\
    \    September 1980.\n"
