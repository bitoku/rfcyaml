- title: __initial_text__
  contents:
  - '              A Distributed-Protocol Authentication Scheme

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   The purpose of this RFC is to focus discussion on authentication\n\
    \   problems in the Internet and possible methods of solution.  The\n   proposed\
    \ solutions this document are not intended as standards for\n   the Internet at\
    \ this time.  Rather, it is hoped that a general\n   consensus will emerge as\
    \ to the appropriate solution to\n   authentication problems, leading eventually\
    \ to the adoption of\n   standards.  Distribution of this memo is unlimited.\n"
- title: 1. Introduction and Overview
  contents:
  - "1. Introduction and Overview\n   This document suggests mediated access-control\
    \ and authentication\n   procedures suitable for those cases when an association\
    \ is to be set\n   up between multiple users belonging to different trust environments,\n\
    \   but running distributed protocols like the existing Exterior Gateway\n   Protocol\
    \ (EGP) [2], proposed Dissimilar Gateway Protocol (DGP) [3]\n   and similar protocols.\
    \ The proposed prcedures are evolved from those\n   described by Needham and Shroeder\
    \ [5], but specialized to the\n   distributed, multiple-user model typical of\
    \ these protocols.\n   The trust model and threat environment are identical to\
    \ that used by\n   Kent and others [1]. An association is defined as the end-to-end\n\
    \   network path between two users, where the users themselves are\n   secured,\
    \ but the path between them is not. The network may drop,\n   duplicate or deliver\
    \ messages with errors. In addition, it is\n   possible that a hostile user (host\
    \ or gateway) might intercept,\n   modify and retransmit messages. An association\
    \ is similar to the\n   traditional connection, but without the usual connection\
    \ requirements\n   for error-free delivery.  The users of the association are\
    \ sometimes\n   called associates.\n   The proposed procedures require each association\
    \ to be assigned a\n   random session key, which is provided by an authentication\
    \ server\n   called the Cookie Jar. The procedures are designed to permit only\n\
    \   those associations sanctioned by the Cookie Jar while operating over\n   arbitrary\
    \ network topologies, including non-secured networks and\n   broadcast-media networks,\
    \ and in the presence of hostile attackers.\n   However, it is not the intent\
    \ of these procedures to hide the data\n   (except for private keys) transmitted\
    \ via these networks, but only to\n   authenticate messages to avoid spoofing\
    \ and replay attacks.\n   The procedures are intended for distributed systems\
    \ where each user i\n   runs a common protocol automaton using private state variables\
    \ for\n   each of possibly several associations simultaneously, one for each\n\
    \   user j. An association is initiated by interrogating the Cookie Jar\n   for\
    \ a one-time key K(i,j), which is used to encrypt the checksum\n   which authenticates\
    \ messages exchanged between the users. The\n   initiator then communicates the\
    \ key to its associate as part of a\n   connection establishment procedure such\
    \ as described in [3].\n   The information being exchanged in this protocol model\
    \ is largely\n   intended to converge a distributed data base to specified (as\
    \ far as\n   practical) contents, and does not ordinarily require a reliable\n\
    \   distribution of event occurances, other than to speed the convergence\n  \
    \ process. Thus, the model is intrinsically resistant to message loss\n   or duplication.\
    \ Where important, sequence numbers are used to reduce\n   the impact of message\
    \ reordering. The model assumes that associations\n   between peers, once having\
    \ been sanctioned, are maintained\n   indefinitely.  The exception when an association\
    \ is broken may be due\n   to a crash, loss of connectivity or administrative\
    \ action such as\n   reconfiguration or rekeying. Finally, the rate of information\n\
    \   exchange is specifically designed to be much less than the nominal\n   capabilities\
    \ of the network, in order to keep overheads low.\n"
- title: 2. Procedures
  contents:
  - "2. Procedures\n   Each user i is assigned a public address A(i) and private key\
    \ K(i) by\n   an out-of-band procedure beyond the scope of this discussion. The\n\
    \   address can take many forms: an autonomous system identifier [2], an\n   Internet\
    \ address [6] or simply an arbitrary name. However, no matter\n   what form it\
    \ takes, every message is presumed to carry both the\n   sender and receiver addresses\
    \ in its header. Each address and its\n   access-control list is presumed available\
    \ in a public directory\n   accessable to all users, but the private key is known\
    \ only to the\n   user and Cookie Jar and is not disclosed in messages exchanged\n\
    \   between users or between users and the Cookie Jar.\n   An association between\
    \ i and j is identified by the bitstring\n   consisting of the catenation of the\
    \ addresses A(i) and A(j), together\n   with a one-time key K(i,j), in the form\
    \ [A(i),A(j),K(i,j)]. Note that\n   the reciprocal association [A(j),A(i),K(j,i)]\
    \ is distinguished only\n   by which associate calls the Cookie Jar first. It\
    \ is the intent in\n   the protocol model that all state variables and keys relevant\
    \ to a\n   previous association be erased when a new association is initiated\n\
    \   and no caching (as suggested in [5]) is allowed.\n   The one-time key K(i,j)\
    \ is generated by the Cookie Jar upon receipt\n   of a request from user i to\
    \ associate with user j. The Cookie Jar has\n   access to a private table of entries\
    \ in the form [A(i),K(i)], where i\n   ranges over the set of sanctioned users.\
    \ The public directory\n   includes for each A(i) a list L(i) = {j1, j2, ...}\
    \ of permitted\n   associates for i, which can be updated only by the Cookie Jar.\
    \ The\n   Cookie Jar first checks that the requested user j is in L(i), then\n\
    \   rolls a random number for K(i,j) and returns this to the requestor,\n   which\
    \ saves it and passes it along to its associate during the\n   connection establishment\
    \ procedure.\n   In the diagrams that follow all fields not specifically mentioned\
    \ are\n   unencrypted. While the natural implementation would include the\n  \
    \ address fields of the message header in the checksum, this raises\n   significant\
    \ difficulties, since they may be necessary to determine\n   the route through\
    \ the network itself. As will be evident below, even\n   if a perpetrator could\
    \ successfully tamper with the address fields in\n   order to cause messages to\
    \ be misdelivered, the result would not be a\n   useful association.\n   The checksum\
    \ field is computed by a algorithm using all the bits in\n   the message including\
    \ the address fields in the message header, then\n   is ordinarily encrypted along\
    \ with the sequence-number field by an\n   appropriate algorithm using the specified\
    \ key, so that the intended\n   receiver is assured only the intended sender could\
    \ have generated it.\n   In the Internet system, the natural choice for checksum\
    \ is the 16-\n   bit, ones-complement algorithm [6], while the natural choice\
    \ for\n   encryption is the DES algorithm [4] (see the discussion following for\n\
    \   further consideration on these points). The detailed procedures are\n   as\
    \ follows:\n      1. The requestor i rolls a random message ID I and sends it\
    \ and\n      the association specifier [A(i),A(j)] as a request to the Cookie\n\
    \      Jar. The message header includes the addresses [A(i),A(C)], where\n   \
    \   A(C) is the address of the Cookie Jar. The following schematic\n      illustrates\
    \ the result:\n      +-----------+-----------+\n      |   A(i)    |   A(C)   \
    \ |       message header\n      +-----------+-----------+\n      |     I     |\
    \ checksum  |       message ID\n      +-----------+-----------+\n      |   A(i)\
    \    |   A(j)    |       assoc specifier\n      +-----------+-----------+\n  \
    \    2. The Cookie Jar checks the access list to determine if the\n      association\
    \ [A(i),A(j)] is valid. If so, it rolls a random number\n      K(i,j) and constructs\
    \ the reply below. It checksums the message,\n      encrypts the j cookie field\
    \ with K(j), then encrypts it and the\n      other fields indicated with K(i)\
    \ and finally sends the reply:\n      +-----------+-----------+\n      |   A(C)\
    \    |   A(i)    |       message header\n      +-----------+-----------+\n   \
    \   |     I     | checksum  |       message ID (encrypt K(i))\n      +-----------+-----------+\n\
    \      |   K(i,j)  |                   i cookie (encrypt K(i))\n      +-----------+\n\
    \      |   K(i,j)  |                   j cookie (encrypt K(j)K(i))\n      +-----------+\n\
    \      3. Upon receipt of the reply the requestor i decrypts the\n      indicated\
    \ fields, saves the (encrypted) j cookie field and copies\n      the i cookie\
    \ field to the j cookie field, so that both cookie\n      fields are now the original\
    \ K(i,j) provided by the Cookie Jar.\n      Then it verifies the checksum and\
    \ matches the message ID with its\n      list of outstanding requests, retaining\
    \ K(i,j) for its own use. It\n      then rolls a random number X for the j cookie\
    \ field (to confuse\n      wiretappers) and another I' for the (initial) message\
    \ ID, then\n      recomputes the checksum.  Finally, it inserts the saved j cookie\n\
    \      field in the i cookie field, encrypts the message ID fields with\n    \
    \  K(i,j) and sends the following message to its associate:\n      +-----------+-----------+\n\
    \      |   A(i)    |   A(j)    |       message header\n      +-----------+-----------+\n\
    \      |     I'    | checksum  |       message ID (encrypt K(i,j))\n      +-----------+-----------+\n\
    \      |  K(i,j)   |                   i cookie (encrypt K(j))\n      +-----------+\n\
    \      |     X     |                   j cookie (noise)\n      +-----------+\n\
    \      4. Upon receipt of the above message the associate j decrypts the\n   \
    \   i cookie field, uses it to decrypt the message ID fields and\n      verifies\
    \ the checksum, retaining the I' and K(i,j) for later use.\n      Finally, it\
    \ rolls a random number J' as its own initial message\n      ID, inserts it and\
    \ the checksum in the confirm message, encrypts\n      the message ID fields with\
    \ K(i,j) and sends the message:\n      +-----------+-----------+\n      |   A(j)\
    \    |   A(i)    |       message header\n      +-----------+-----------+\n   \
    \   |     J'    | checksum  |       message ID (encrypt K(i,j))\n      +-----------+-----------+\n\
    \      5. Subsequent messages are all coded in the same way. As new data\n   \
    \   are generated the message ID is incremented, a new checksum\n      computed\
    \ and the message ID fields encrypted with K(i,j). The\n      receiver decrypts\
    \ the message ID fields with K(i,j) and discards\n      the message in case of\
    \ incorrect checksum or sequence number.\n"
- title: 3. Discussion
  contents:
  - "3. Discussion\n   Since the access lists are considered public read-only, there\
    \ is no\n   need to validate Cookie Jar requests. A perpetrator might intercept,\n\
    \   modify and replay portions of Cookie Jar replies or subsequent\n   messages\
    \ exchanged between the associates. However, presuming the\n   perpetrator does\
    \ not know the keys involved, tampered messages would\n   fail the checksum test\
    \ and be discarded.\n   The \"natural\" selection of Internet checksum algorithm\
    \ and DES\n   encryption should be reconsidered. The Internet checksum has several\n\
    \   well-known vulnerabilities, including invariance to word order and\n   byte\
    \ swap. In addition, the checksum field itself is only sixteen\n   bits wide,\
    \ so a determined perpetrator might be able to discover the\n   key simply by\
    \ examining all possible permutations of the checksum\n   field. However, the\
    \ procedures proposed herein are not intended to\n   compensate for weaknesses\
    \ of the checksum algorithm, since this\n   vulnerability exists whether authentication\
    \ is used or not. Also note\n   that the encrypted fields include the sequence\
    \ number as well as the\n   checksum. In EGP and the proposed DGP the sequence\
    \ number is a\n   sixteen-bit quantity and increments for each successive message,\n\
    \   which makes tampering even more difficult.\n   In the intended application\
    \ to EGP, DGP and similar protocols\n   associations may have an indefinite lifetime,\
    \ although messages may\n   be sent between associates on a relatively infrequent\
    \ basis.\n   Therefore, every association should be rekeyed occasionally, which\n\
    \   can be done by either associate simply by sending a new request to\n   the\
    \ Cookie Jar and following the above procedure. To protect against\n   stockpiling\
    \ private user keys, each user should be rekeyed\n   occasionally, which is equivalent\
    \ to changing passwords. The\n   mechanisms for doing this are beyond the scope\
    \ of this proposal.\n   It is a feature of this scheme that the private user keys\
    \ are not\n   disclosed, except to the Cookie Jar. This is why two cookies are\n\
    \   used, one for i, which only it can decrypt, and the other for j,\n   decrypted\
    \ first by i and then by j, which only then is valid. An\n   interceptor posing\
    \ as i and playing back the Cookie Jar reply to j\n   will be caught, since the\
    \ message will fail the checksum test. A\n   perpetrator with access to both the\
    \ Cookie Jar reply to i and the\n   subsequent message to j will see essentially\
    \ a random permutation of\n   all fields. In all except the first message to the\
    \ Cookie Jar, the\n   checksum field is encrypted, which makes it difficult to\
    \ recover the\n   original contents of the cookie fields before encryption by\n\
    \   exploiting the properties of the checksum algorithm itself.\n   The fact that\
    \ the addresses in the message headers are included in\n   the checksum protects\
    \ against playbacks with modified addresses.\n   However, it may still be possible\
    \ to destabilize an association by\n   playing back unmodified messages from prior\
    \ associations. There are\n   several possibilities:\n      1. Replays of the\
    \ Cookie Jar messages 1 and 2 are unlikely to\n      cause damage, since the requestor\
    \ matches both the addresses and\n      once-only sequence number with its list\
    \ of pending requests.\n      2. Replays of message 3 may cause user j to falsely\
    \ assume a new\n      association. User j will return message 4 encrypted with\
    \ the\n      assumed session key, which might be an old one or even a currently\n\
    \      valid one, but with invalid sequence number. Either way, user i\n     \
    \ will ignore message 4.\n      3. Replays of message 4 or subsequent messages\
    \ are unlikely to\n      cause damage, since the sequence check will eliminate\
    \ them.\n   The second point above represents an issue of legitimate concern,\n\
    \   since a determined attacker may stockpile message 3 interceptions and\n  \
    \ replay them at speed. While the attack is unlikely to succeed in\n   establishing\
    \ a working association, it might produce frequent\n   timeouts and result in\
    \ denial of service. In the Needham-Shroeder\n   scheme this problem is avoided\
    \ by requiring an additional challenge\n   involving a message sent by user j\
    \ and a reply sent by user i, which\n   amounts to a three-way handshake.\n  \
    \ However, even if a three-way handshake were used, the additional\n   protocol\
    \ overhead induced by a determined attacker may still result\n   in denial of\
    \ service; moreover, the protocol model is inherently\n   resistant to poor network\
    \ performance, which has the same performance\n   signature as the attacker. The\
    \ conclusion is that the additional\n   expense and overhead of a three-way handshake\
    \ is unjustified.\n"
- title: 4. Application to EGP and DGP
  contents:
  - "4. Application to EGP and DGP\n   This scheme can be incorporated in the Exterior\
    \ Gateway Protocol\n   (EGP) [2] and Dissimilar Gateway Protocol (DGP) [3] models\
    \ by adding\n   the fields above to the Request and Confirm messages in a\n  \
    \ straightforward way. An example of how this might be done is given in\n   [3].\
    \ In order to retain the correctness of the state machine, it is\n   convenient\
    \ to treat the Cookie Jar reply as a Start event, with the\n   understanding that\
    \ the Cookie Jar request represents an extrinsic\n   event which evokes that response.\n\
    \   The neighbor-acquisition strategy intended in the Dissimilar Gateway\n   Protocol\
    \ DGP follows the strategy in EGP. The stability of the EGP\n   state machine,\
    \ used with minor modifications by DGP, was verified by\n   state simulation and\
    \ discussed in an appendix to [2]. Either\n   associate can send a Request command\
    \ at any time, which causes both\n   the sender and the receiver to reinitialize\
    \ all state information and\n   send a Confirm response. In DGP the Request operation\
    \ involves the\n   Cookie Jar transaction (messages 1 and 2) and then the Request\n\
    \   command itself (message 3). In DGP the keys are reinitialized as well\n  \
    \ and each retransmission of a Request command is separately\n   authenticated.\n\
    \   In DGP the Request command (message 3) and all subsequent message\n   exchanges\
    \ assume the keys provided by the Cookie Jar. Use of any\n   other keys results\
    \ in checksum discrepancies and discarded messages.\n   Thus the sender knows\
    \ its command has been effected, at least at the\n   time the response was sent.\
    \ If either associate lost its state\n   variables after that time, it would ignore\
    \ subsequent messages and it\n   (or its associate) would eventually time out\
    \ and reinitiate the whole\n   procedure.\n   If both associates attempt to authenticate\
    \ at the same time, they may\n   wind up with the authentication sequences crossing\
    \ in the network.\n   Note that the Request message is self-authenticating, so\
    \ that if a\n   Request command is received by an associate before the Confirm\n\
    \   response to an earlier Request command sent by that associate, the\n   keys\
    \ would be reset.  Thus when the subsequent Confirm response does\n   arrive,\
    \ it will be disregarded and the Request command resent\n   following timeout.\
    \ The race that results can only be broken when, due\n   to staggered timeouts,\
    \ the sequences do not cross in the network.\n   This is a little more complicated\
    \ than EGP and does imply that more\n   attention must be paid to the timeouts.\n\
    \   A reliable dis-association is a slippery concept, as example TCP and\n   its\
    \ closing sequences. However, the protocol model here is much less\n   demanding.\
    \ The usual way an EGP association is dissolved is when one\n   associate sends\
    \ a Cease command to the other, which then sends a\n   Cease-ack response; however,\
    \ this is specifically assumed a non-\n   reliable transaction, with timeouts\
    \ specified to break retry loops.\n   In any case, a new Request command will\
    \ erase all history and result\n   in a new association as described above.\n\
    \   Other than the above, the only way to reliably dis-associate is by\n   timeout.\
    \ In this protocol model the associates engage in a\n   reachability protocol,\
    \ which requires each to send a message to the\n   other from time to time. Each\
    \ associate individually times out after\n   a period when no messages are heard\
    \ from the other.\n"
- title: 5. Acknowledgments
  contents:
  - "5. Acknowledgments\n   Dan Nessett and Phil Karn both provided valuable ideas\
    \ and comments\n   on early drafts of this report. Steve Kent and Dennis Perry\
    \ both\n   provided valuable advice on its review strategy.\n"
- title: 6. References
  contents:
  - "6. References\n   [1]  Kent, S.T., \"Encryption-Based Protection for Interactive\n\
    \        User/Computer Communication\", Proc. Fifth Data Communications\n    \
    \    Symposium, September 1977.\n   [2]  Mills, D.L., \"Exterior Gateway Protocol\
    \ Formal Specification\",\n        DARPA Network Working Group Report RFC-904,\
    \ M/A-COM Linkabit,\n        April 1984.\n   [3]  Mills, D.L., \"Dissimilar Gateway\
    \ Protocol Draft Specification\",\n        in preparation, University of Delaware.\n\
    \   [4]  National Bureau of Standards, \"Data Encryption Standard\",\n       \
    \ Federal Information Processing Standards Publication 46, January\n        1977.\n\
    \   [5]  Needham, R.M., and M.D. Schroeder, \"Using Encryption for\n        Authentication\
    \ in Large Networks of Computers\", Communications\n        of the ACM, Vol. 21,\
    \ No. 12, pp. 993-999, December 1978.\n   [6]  Postel, J., \"Internet Protocol\"\
    , DARPA Network Working Group\n        Report RFC-791, USC Information Sciences\
    \ Institute, September\n        1981.\n"
