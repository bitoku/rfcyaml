- title: __initial_text__
  contents:
  - '          Internet Printing Protocol/1.0: Model and Semantics

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document defines an Experimental protocol for the Internet\n\
    \   community.  The IESG expects that a revised version of this protocol\n   will\
    \ be published as Proposed Standard protocol.  The Proposed\n   Standard, when\
    \ published, is expected to change from the protocol\n   defined in this memo.\
    \  In particular, it is expected that the\n   standards-track version of the protocol\
    \ will incorporate strong\n   authentication and privacy features, and that an\
    \ \"ipp:\" URL type will\n   be defined which supports those security measures.\
    \  Other changes to\n   the protocol are also possible.  Implementors are warned\
    \ that future\n   versions of this protocol may not interoperate with the version\
    \ of\n   IPP defined in this document, or if they do interoperate, that some\n\
    \   protocol features may not be available.\n   The IESG encourages experimentation\
    \ with this protocol, especially in\n   combination with Transport Layer Security\
    \ (TLS) [RFC 2246], to help\n   determine how TLS may effectively be used as a\
    \ security layer for\n   IPP.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is one of a set of documents, which together describe\n\
    \   all aspects of a new Internet Printing Protocol (IPP).  IPP is an\n   application\
    \ level protocol that can be used for distributed printing\n   using Internet\
    \ tools and technologies.  This document describes a\n   simplified model consisting\
    \ of abstract objects, their attributes,\n   and their operations that is independent\
    \ of encoding and transport.\n   The model consists of a Printer and a Job object.\
    \  A Job optionally\n   supports multiple documents.  IPP 1.0 semantics allow\
    \ end-users and\n   operators to query printer capabilities, submit print jobs,\
    \ inquire\n   about the status of print jobs and printers, and cancel print jobs.\n\
    \   This document also addresses security, internationalization, and\n   directory\
    \ issues.\n   The full set of IPP documents includes:\n     Design Goals for an\
    \ Internet Printing Protocol [RFC2567]\n     Rationale for the Structure and Model\
    \ and Protocol for the Internet\n        Printing Protocol [RFC2568]\n     Internet\
    \ Printing Protocol/1.0: Model and Semantics (this document)\n     Internet Printing\
    \ Protocol/1.0: Encoding and Transport [RFC2565]\n     Internet Printing Protocol/1.0:\
    \ Implementer's Guide [ipp-iig]\n     Mapping between LPD and IPP Protocols [RFC2569]\n\
    \   The \"Design Goals for an Internet Printing Protocol\" document takes a\n\
    \   broad look at distributed printing functionality, and it enumerates\n   real-life\
    \ scenarios that help to clarify the features that need to be\n   included in\
    \ a printing protocol for the Internet.  It identifies\n   requirements for three\
    \ types of users: end users, operators, and\n   administrators.  It calls out\
    \ a subset of end user requirements that\n   are satisfied in IPP/1.0.  Operator\
    \ and administrator requirements\n   are out of scope for version 1.0.\n   The\
    \ \"Rationale for the Structure and Model and Protocol for the\n   Internet Printing\
    \ Protocol\" document describes IPP from a high level\n   view, defines a roadmap\
    \ for the various documents that form the suite\n   of IPP specifications, and\
    \ gives background and rationale for the\n   IETF working group's major decisions.\n\
    \   The \"Internet Printing Protocol/1.0: Encoding and Transport\" document\n\
    \   is a formal mapping of the abstract operations and attributes defined\n  \
    \ in the model document onto HTTP/1.1.  It defines the encoding rules\n   for\
    \ a new Internet media type called \"application/ipp\".\n   The \"Internet Printing\
    \ Protocol/1.0: Implementer's Guide\" document\n   gives insight and advice to\
    \ implementers of IPP clients and IPP\n   objects.  It is intended to help them\
    \ understand IPP/1.0 and some of\n   the considerations that may assist them in\
    \ the design of their client\n   and/or IPP object implementations.  For example,\
    \ a typical order of\n   processing requests is given, including error checking.\
    \  Motivation\n   for some of the specification decisions is also included.\n\
    \   The \"Mapping between LPD and IPP Protocols\" document gives some\n   advice\
    \ to implementers of gateways between IPP and LPD (Line Printer\n   Daemon) implementations.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction                                                        8
  contents:
  - "1. Introduction                                                        8\n 1.1\
    \   Simplified Printing Model                                       9\n"
- title: 2. IPP Objects                                                        11
  contents:
  - "2. IPP Objects                                                        11\n 2.1\
    \   Printer Object                                                 12\n 2.2  \
    \ Job Object                                                     14\n 2.3   Object\
    \ Relationships                                           14\n 2.4   Object Identity\
    \                                                15\n"
- title: 3. IPP Operations                                                     18
  contents:
  - "3. IPP Operations                                                     18\n 3.1\
    \   Common Semantics                                               19\n  3.1.1\
    \   Required Parameters                                         19\n  3.1.2  \
    \ Operation IDs and Request IDs                               20\n  3.1.3   Attributes\
    \                                                  20\n  3.1.4   Character Set\
    \ and Natural Language Operation Attributes     22\n   3.1.4.1  Request Operation\
    \ Attributes                              22\n   3.1.4.2  Response Operation Attributes\
    \                             26\n  3.1.5   Operation Targets                \
    \                           28\n  3.1.6   Operation Status Codes and Messages\
    \                         29\n  3.1.7   Versions                             \
    \                       30\n  3.1.8   Job Creation Operations                \
    \                     32\n 3.2   Printer Operations                          \
    \                   34\n  3.2.1   Print-Job Operation                        \
    \                 34\n   3.2.1.1  Print-Job Request                          \
    \               34\n   3.2.1.2  Print-Job Response                           \
    \             38\n  3.2.2   Print-URI Operation                              \
    \           41\n  3.2.3   Validate-Job Operation                             \
    \         42\n  3.2.4   Create-Job Operation                                 \
    \       42\n  3.2.5   Get-Printer-Attributes Operation                       \
    \     43\n   3.2.5.1  Get-Printer-Attributes Request                         \
    \   44\n   3.2.5.2  Get-Printer-Attributes Response                          \
    \ 46\n  3.2.6   Get-Jobs Operation                                          47\n\
    \   3.2.6.1  Get-Jobs Request                                          47\n  \
    \ 3.2.6.2  Get-Jobs Response                                         49\n 3.3\
    \   Job Operations                                                 50\n  3.3.1\
    \   Send-Document Operation                                     50\n   3.3.1.1\
    \  Send-Document Request                                     51\n   3.3.1.2  Send-Document\
    \ Response                                    53\n  3.3.2   Send-URI Operation\
    \                                          54\n  3.3.3   Cancel-Job Operation\
    \                                        54\n   3.3.3.1  Cancel-Job Request  \
    \                                      54\n   3.3.3.2  Cancel-Job Response   \
    \                                    55\n  3.3.4   Get-Job-Attributes Operation\
    \                                56\n   3.3.4.1  Get-Job-Attributes Request  \
    \                              57\n   3.3.4.2  Get-Job-Attributes Response   \
    \                            57\n"
- title: 4. Object Attributes                                                  58
  contents:
  - "4. Object Attributes                                                  58\n 4.1\
    \   Attribute Syntaxes                                             59\n  4.1.1\
    \   'text'                                                      60\n   4.1.1.1\
    \  'textWithoutLanguage'                                     61\n   4.1.1.2  'textWithLanguage'\
    \                                        61\n  4.1.2   'name'                \
    \                                      62\n   4.1.2.1  'nameWithoutLanguage' \
    \                                    62\n   4.1.2.2  'nameWithLanguage'      \
    \                                  63\n   4.1.2.3  Matching 'name' attribute values\
    \                          63\n  4.1.3   'keyword'                           \
    \                        64\n  4.1.4   'enum'                                \
    \                      65\n  4.1.5   'uri'                                   \
    \                    65\n  4.1.6   'uriScheme'                               \
    \                  65\n  4.1.7   'charset'                                   \
    \                66\n  4.1.8   'naturalLanguage'                             \
    \              67\n  4.1.9   'mimeMediaType'                                 \
    \            67\n  4.1.10  'octetString'                                     \
    \          69\n  4.1.11  'boolean'                                           \
    \        69\n  4.1.12  'integer'                                             \
    \      69\n  4.1.13  'rangeOfInteger'                                        \
    \    69\n  4.1.14  'dateTime'                                                \
    \  69\n  4.1.15  'resolution'                                                69\n\
    \  4.1.16  '1setOf  X'                                                 70\n 4.2\
    \   Job Template Attributes                                        70\n  4.2.1\
    \   job-priority (integer(1:100))                               74\n  4.2.2  \
    \ job-hold-until (type3 keyword | name (MAX))                 75\n  4.2.3   job-sheets\
    \ (type3 keyword | name(MAX))                      75\n  4.2.4   multiple-document-handling\
    \ (type2 keyword)                  76\n  4.2.5   copies (integer(1:MAX))     \
    \                                77\n  4.2.6   finishings (1setOf type2 enum)\
    \                              78\n  4.2.7   page-ranges (1setOf rangeOfInteger\
    \ (1:MAX))                 79\n  4.2.8   sides (type2 keyword)               \
    \                        80\n  4.2.9   number-up (integer(1:MAX))            \
    \                      80\n  4.2.10  orientation-requested (type2 enum)      \
    \                    81\n  4.2.11  media (type3 keyword | name(MAX))         \
    \                  82\n  4.2.12  printer-resolution (resolution)             \
    \                83\n  4.2.13  print-quality (type2 enum)                    \
    \              83\n 4.3   Job Description Attributes                         \
    \            84\n  4.3.1   job-uri (uri)                                     \
    \          85\n  4.3.2   job-id (integer(1:MAX))                             \
    \        85\n  4.3.3   job-printer-uri (uri)                                 \
    \      86\n  4.3.4   job-more-info (uri)                                     \
    \    86\n  4.3.5   job-name (name(MAX))                                      \
    \  86\n  4.3.6   job-originating-user-name (name(MAX))                       86\n\
    \  4.3.7   job-state (type1 enum)                                      87\n  4.3.8\
    \   job-state-reasons (1setOf  type2 keyword)                   90\n  4.3.9  \
    \ job-state-message (text(MAX))                               92\n  4.3.10  number-of-documents\
    \ (integer(0:MAX))                        93\n  4.3.11  output-device-assigned\
    \ (name(127))                          93\n  4.3.12  time-at-creation (integer(0:MAX))\
    \                           93\n  4.3.13  time-at-processing (integer(0:MAX))\
    \                         93\n  4.3.14  time-at-completed (integer(0:MAX))   \
    \                       94\n  4.3.15  number-of-intervening-jobs (integer(0:MAX))\
    \                 94\n  4.3.16  job-message-from-operator (text(127))        \
    \               94\n  4.3.17  job-k-octets (integer(0:MAX))                  \
    \             94\n  4.3.18  job-impressions (integer(0:MAX))                 \
    \           95\n  4.3.19  job-media-sheets (integer(0:MAX))                  \
    \         95\n  4.3.20  job-k-octets-processed (integer(0:MAX))              \
    \       96\n  4.3.21  job-impressions-completed (integer(0:MAX))             \
    \     96\n  4.3.22  job-media-sheets-completed (integer(0:MAX))              \
    \   96\n  4.3.23  attributes-charset (charset)                               \
    \ 97\n  4.3.24  attributes-natural-language (naturalLanguage)               97\n\
    \ 4.4   Printer Description Attributes                                 97\n  4.4.1\
    \   printer-uri-supported (1setOf uri)                          99\n  4.4.2  \
    \ uri-security-supported (1setOf type2 keyword)              100\n  4.4.3   printer-name\
    \ (name(127))                                   101\n  4.4.4   printer-location\
    \ (text(127))                               101\n  4.4.5   printer-info (text(127))\
    \                                   101\n  4.4.6   printer-more-info (uri)   \
    \                                 101\n  4.4.7   printer-driver-installer (uri)\
    \                             102\n  4.4.8   printer-make-and-model (text(127))\
    \                         102\n  4.4.9   printer-more-info-manufacturer (uri)\
    \                       102\n  4.4.10  printer-state (type1 enum)            \
    \                     102\n  4.4.11  printer-state-reasons (1setOf type2 keyword)\
    \               103\n  4.4.12  printer-state-message (text(MAX))             \
    \             106\n  4.4.13  operations-supported (1setOf type2 enum)        \
    \           106\n  4.4.14  charset-configured (charset)                      \
    \         107\n  4.4.15  charset-supported (1setOf charset)                  \
    \       107\n  4.4.16  natural-language-configured (naturalLanguage)         \
    \     107\n  4.4.17  generated-natural-language-supported(1setOf naturalLanguage108\n\
    \  4.4.18  document-format-default (mimeMediaType)                    108\n  4.4.19\
    \  document-format-supported (1setOf mimeMediaType)           108\n  4.4.20  printer-is-accepting-jobs\
    \ (boolean)                        109\n  4.4.21  queued-job-count (integer(0:MAX))\
    \                          109\n  4.4.22  printer-message-from-operator (text(127))\
    \                  109\n  4.4.23  color-supported (boolean)                  \
    \                109\n  4.4.24  reference-uri-schemes-supported (1setOf uriScheme)\
    \         109\n  4.4.25  pdl-override-supported (type2 keyword)              \
    \       110\n  4.4.26  printer-up-time (integer(1:MAX))                      \
    \     110\n  4.4.27  printer-current-time (dateTime)                         \
    \   111\n  4.4.28  multiple-operation-time-out (integer(1:MAX))              \
    \ 111\n  4.4.29  compression-supported (1setOf type3 keyword)               111\n\
    \  4.4.30  job-k-octets-supported (rangeOfInteger(0:MAX))             112\n  4.4.31\
    \  job-impressions-supported (rangeOfInteger(0:MAX))          112\n  4.4.32  job-media-sheets-supported\
    \ (rangeOfInteger(0:MAX))         112\n"
- title: 5. Conformance                                                       112
  contents:
  - "5. Conformance                                                       112\n 5.1\
    \   Client Conformance Requirements                               112\n 5.2  \
    \ IPP Object Conformance Requirements                           113\n  5.2.1 \
    \  Objects                                                    113\n  5.2.2   Operations\
    \                                                 113\n  5.2.3   IPP Object Attributes\
    \                                      114\n  5.2.4   Extensions             \
    \                                    114\n  5.2.5   Attribute Syntaxes       \
    \                                  115\n 5.3   Charset and Natural Language Requirements\
    \                     115\n 5.4   Security Conformance Requirements          \
    \                   115\n"
- title: 6. IANA Considerations (registered and private extensions)           116
  contents:
  - "6. IANA Considerations (registered and private extensions)           116\n 6.1\
    \   Typed 'keyword' and 'enum' Extensions                         116\n 6.2  \
    \ Attribute Extensibility                                       119\n 6.3   Attribute\
    \ Syntax Extensibility                                119\n 6.4   Operation Extensibility\
    \                                       120\n 6.5   Attribute Groups         \
    \                                     120\n 6.6   Status Code Extensibility  \
    \                                   120\n 6.7   Registration of MIME types/sub-types\
    \ for document-formats     121\n 6.8   Registration of charsets for use in 'charset'\
    \ attribute values121\n"
- title: 7. Internationalization Considerations                               121
  contents:
  - '7. Internationalization Considerations                               121

    '
- title: 8. Security Considerations                                           125
  contents:
  - "8. Security Considerations                                           125\n 8.1\
    \   Security Scenarios                                            126\n  8.1.1\
    \   Client and Server in the Same Security Domain              126\n  8.1.2  \
    \ Client and Server in Different Security Domains            126\n  8.1.3   Print\
    \ by Reference                                         127\n 8.2   URIs for SSL3\
    \ and non-SSL3 Access                             127\n 8.3   The \"requesting-user-name\"\
    \ (name(MAX)) Operation Attribute    127\n 8.4   Restricted Queries          \
    \                                  129\n 8.5   Queries on jobs submitted using\
    \ non-IPP protocols             129\n 8.6   IPP Security Application Profile for\
    \ SSL3                     130\n"
- title: 9. References                                                        131
  contents:
  - '9. References                                                        131

    '
- title: 10. Authors' Addresses                                               134
  contents:
  - '10. Authors'' Addresses                                               134

    '
- title: 11. Formats for IPP Registration Proposals                           136
  contents:
  - "11. Formats for IPP Registration Proposals                           136\n 11.1\
    \  Type2 keyword attribute values registration                   136\n 11.2  Type3\
    \ keyword attribute values registration                   137\n 11.3  Type2 enum\
    \ attribute values registration                      137\n 11.4  Type3 enum attribute\
    \ values registration                      137\n 11.5  Attribute registration\
    \                                        138\n 11.6  Attribute Syntax registration\
    \                                 138\n 11.7  Operation registration         \
    \                               139\n 11.8  Attribute Group registration     \
    \                             139\n 11.9  Status code registration           \
    \                           139\n"
- title: '12.APPENDIX A: Terminology                                           141'
  contents:
  - "12.APPENDIX A: Terminology                                           141\n 12.1\
    \  Conformance Terminology                                       141\n  12.1.1\
    \  NEED NOT                                                   141\n 12.2  Model\
    \ Terminology                                             141\n  12.2.1  Keyword\
    \                                                    141\n  12.2.2  Attributes\
    \                                                 141\n   12.2.2.1 Attribute Name\
    \                                           141\n   12.2.2.2 Attribute Group Name\
    \                                     142\n   12.2.2.3 Attribute Value       \
    \                                   142\n   12.2.2.4 Attribute Syntax        \
    \                                 142\n  12.2.3  Supports                    \
    \                               142\n  12.2.4  print-stream page             \
    \                             144\n  12.2.5  impression                      \
    \                           144\n"
- title: '13.APPENDIX B:  Status Codes and Suggested Status Code Messages      145'
  contents:
  - "13.APPENDIX B:  Status Codes and Suggested Status Code Messages      145\n 13.1\
    \  Status Codes                                                  146\n  13.1.1\
    \  Informational                                              146\n  13.1.2  Successful\
    \ Status Codes                                    146\n   13.1.2.1 successful-ok\
    \ (0x0000)                                   146\n   13.1.2.2 successful-ok-ignored-or-substituted-attributes\
    \ (0x0001) 146\n   13.1.2.3 successful-ok-conflicting-attributes (0x0002)    \
    \        147\n  13.1.3  Redirection Status Codes                             \
    \      147\n  13.1.4  Client Error Status Codes                              \
    \    147\n   13.1.4.1 client-error-bad-request (0x0400)                      \
    \  147\n   13.1.4.2 client-error-forbidden (0x0401)                          147\n\
    \   13.1.4.3 client-error-not-authenticated (0x0402)                  148\n  \
    \ 13.1.4.4 client-error-not-authorized (0x0403)                     148\n   13.1.4.5\
    \ client-error-not-possible (0x0404)                       148\n   13.1.4.6 client-error-timeout\
    \ (0x0405)                            148\n   13.1.4.7 client-error-not-found\
    \ (0x0406)                          149\n   13.1.4.8 client-error-gone (0x0407)\
    \                               149\n   13.1.4.9 client-error-request-entity-too-large\
    \ (0x0408)           149\n   13.1.4.10client-error-request-value-too-long (0x0409)\
    \             150\n   13.1.4.11client-error-document-format-not-supported (0x040A)\
    \      150\n   13.1.4.12client-error-attributes-or-values-not-supported (0x040B)\
    \ 150\n   13.1.4.13client-error-uri-scheme-not-supported (0x040C)           151\n\
    \   13.1.4.14client-error-charset-not-supported (0x040D)              151\n  \
    \ 13.1.4.15client-error-conflicting-attributes (0x040E)             151\n  13.1.5\
    \  Server Error Status Codes                                  151\n   13.1.5.1\
    \ server-error-internal-error (0x0500)                     151\n   13.1.5.2 server-error-operation-not-supported\
    \ (0x0501)            152\n   13.1.5.3 server-error-service-unavailable (0x0502)\
    \                152\n   13.1.5.4 server-error-version-not-supported (0x0503)\
    \              152\n   13.1.5.5 server-error-device-error (0x0504)           \
    \            152\n   13.1.5.6 server-error-temporary-error (0x0505)          \
    \          153\n   13.1.5.7 server-error-not-accepting-jobs (0x0506)         \
    \        153\n   13.1.5.8 server-error-busy (0x0507)                         \
    \      153\n   13.1.5.9 server-error-job-canceled (0x0508)                   \
    \    153\n 13.2  Status Codes for IPP Operations                             \
    \  153\n"
- title: '14.APPENDIX C:  "media" keyword values                               155'
  contents:
  - '14.APPENDIX C:  "media" keyword values                               155

    '
- title: '15.APPENDIX D: Processing IPP Attributes                             160'
  contents:
  - "15.APPENDIX D: Processing IPP Attributes                             160\n 15.1\
    \  Fidelity                                                      160\n 15.2  Page\
    \ Description Language (PDL) Override                      161\n 15.3  Using Job\
    \ Template Attributes During Document Processing.     163\n"
- title: '16.APPENDIX E: Generic Directory Schema                              166'
  contents:
  - '16.APPENDIX E: Generic Directory Schema                              166

    '
- title: '17.APPENDIX F: Change History for the Model and Semantics document   168'
  contents:
  - '17.APPENDIX F: Change History for the Model and Semantics document   168

    '
- title: 18.FULL COPYRIGHT STATEMENT                                          173
  contents:
  - '18.FULL COPYRIGHT STATEMENT                                          173

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Internet Printing Protocol (IPP) is an application level\
    \ protocol\n   that can be used for distributed printing using Internet tools\
    \ and\n   technologies.  IPP version 1.0 (IPP/1.0) focuses only on end user\n\
    \   functionality.  This document is just one of a suite of documents\n   that\
    \ fully define IPP.  The full set of IPP documents includes:\n     Design Goals\
    \ for an Internet Printing Protocol [RFC2567]\n     Rationale for the Structure\
    \ and Model and Protocol for the Internet\n        Printing Protocol [RFC2568]\n\
    \     Internet Printing Protocol/1.0: Model and Semantics (this document)\n  \
    \   Internet Printing Protocol/1.0: Encoding and Transport [RFC2565]\n     Internet\
    \ Printing Protocol/1.0: Implementer's Guide [ipp-iig]\n     Mapping between LPD\
    \ and IPP Protocols [RFC2569]\n   Anyone reading these documents for the first\
    \ time is strongly\n   encouraged to read the IPP documents in the above order.\n\
    \   This document is laid out as follows:\n     - The rest of Section 1 is an\
    \ introduction to the IPP simplified\n       model for distributed printing.\n\
    \     - Section 2 introduces the object types covered in the model with\n    \
    \   their basic behaviors, attributes, and interactions.\n     - Section 3 defines\
    \ the operations included in IPP/1.0.  IPP\n       operations are synchronous,\
    \ therefore, for each operation, there\n       is a both request and a response.\n\
    \     - Section 4 defines the attributes (and their syntaxes) that are\n     \
    \  used in the model.\n     - Sections 5 - 6 summarizes the implementation conformance\n\
    \       requirements for objects that support the protocol and IANA\n       considerations,\
    \ respectively.\n     - Sections 7 - 11 cover the Internationalization and Security\n\
    \       considerations as well as References, Author contact information,\n  \
    \     and Formats for Registration Proposals.\n     - Sections 12 - 14 are appendices\
    \ that cover Terminology, Status\n       Codes and Messages, and \"media\" keyword\
    \ values.\n             Note: This document uses terms such as \"attributes\"\
    ,\n             \"keywords\", and \"support\".  These terms have special\n   \
    \          meaning and are defined in the model terminology section\n        \
    \     12.2.  Capitalized terms, such as MUST, MUST NOT, REQUIRED,\n          \
    \   SHOULD, SHOULD NOT, MAY, NEED NOT, and OPTIONAL, have\n             special\
    \ meaning relating to conformance.  These terms are\n             defined in section\
    \ 12.1 on conformance terminology, most of\n             which is taken from RFC\
    \ 2119 [RFC2119].\n     - Section 15 is an appendix that helps to clarify the\
    \ effects of\n       interactions between related attributes and their values.\n\
    \     - Section 16 is an appendix that enumerates the subset of Printer\n    \
    \   attributes that form a generic directory schema.  These\n       attributes\
    \ are useful when registering a Printer so that a\n       client can find the\
    \ Printer not just by name, but by filtered\n       searches as well.\n     -\
    \ Section 17 is an appendix that provides a Change History\n       summarizing\
    \ the clarification and changes that might affect an\n       implementation since\
    \ the June 30, 1998 draft.\n"
- title: 1.1 Simplified Printing Model
  contents:
  - "1.1 Simplified Printing Model\n   In order to achieve its goal of realizing a\
    \ workable printing\n   protocol for the Internet, the Internet Printing Protocol\
    \ (IPP) is\n   based on a simplified printing model that abstracts the many\n\
    \   components of real world printing solutions.  The Internet is a\n   distributed\
    \ computing environment where requesters of print services\n   (clients, applications,\
    \ printer drivers, etc.) cooperate and interact\n   with print service providers.\
    \  This model and semantics document\n   describes a simple, abstract model for\
    \ IPP even though the underlying\n   configurations may be complex \"n-tier\"\
    \ client/server systems.  An\n   important simplifying step in the IPP model is\
    \ to expose only the key\n   objects and interfaces required for printing.  The\
    \ model described in\n   this model document does not include features, interfaces,\
    \ and\n   relationships that are beyond the scope of the first version of IPP\n\
    \   (IPP/1.0).  IPP/1.0 incorporates many of the relevant ideas and\n   lessons\
    \ learned from other specification and development efforts\n   [HTPP] [ISO10175]\
    \ [LDPA] [P1387.4] [PSIS] [RFC1179] [SWP].  IPP is\n   heavily influenced by the\
    \ printing model introduced in the Document\n   Printing Application (DPA) [ISO10175]\
    \ standard.  Although DPA\n   specifies both end user and administrative features,\
    \ IPP version 1.0\n   (IPP/1.0) focuses only on end user functionality.\n   The\
    \ IPP/1.0 model encapsulates the important components of\n   distributed printing\
    \ into two object types:\n     - Printer (Section 2.1)\n     - Job (Section 2.2)\n\
    \   Each object type has an associated set of operations (see section 3)\n   and\
    \ attributes (see section 4).\n   It is important, however, to understand that\
    \ in real system\n   implementations (which lie underneath the abstracted IPP/1.0\
    \ model),\n   there are other components of a print service which are not\n  \
    \ explicitly defined in the IPP/1.0 model. The following figure\n   illustrates\
    \ where IPP/1.0 fits with respect to these other\n   components.\n           \
    \                     +--------------+\n                                |  Application\
    \ |\n                      o         +. . . . . . . |\n                     \\\
    |/        |   Spooler    |\n                     / \\        +. . . . . . . |\
    \   +---------+\n                   End-User     | Print Driver |---|  File  \
    \ |\n         +-----------+ +-----+  +------+-------+   +----+----+\n        \
    \ |  Browser  | | GUI |         |                |\n         +-----+-----+ +--+--+\
    \         |                |\n               |          |            |       \
    \         |\n               |      +---+------------+---+            |\n   N \
    \  D   S   |      |      IPP Client    |------------+\n   O   I   E   |      +---------+----------+\n\
    \   T   R   C   |                |\n   I   E   U   |\n   F   C   R   --------------\
    \ Transport ------------------\n   I   T   I\n   C   O   T                   \
    \ |         --+\n   A   R   Y           +--------+--------+  |\n   T   Y     \
    \          |    IPP Server   |  |\n   I                   +--------+--------+\
    \  |\n   O                            |           |\n   N                   +-----------------+\
    \  | IPP Printer\n                       |  Print Service  |  |\n            \
    \           +-----------------+  |\n                                |        \
    \ --+\n                       +-----------------+\n                       | Output\
    \ Device(s)|\n                       +-----------------+\n   An IPP Printer object\
    \ encapsulates the functions normally associated\n   with physical output devices\
    \ along with the spooling, scheduling and\n   multiple device management functions\
    \ often associated with a print\n   server. Printer objects are optionally registered\
    \ as entries in a\n   directory where end users find and select them based on\
    \ some sort of\n   filtered and context based searching mechanism (see section\
    \ 16).  The\n   directory is used to store relatively static information about\
    \ the\n   Printer, allowing end users to search for and find Printers that\n \
    \  match their search criteria, for example: name, context, printer\n   capabilities,\
    \ etc.  The more dynamic information, such as state,\n   currently loaded and\
    \ ready media, number of jobs at the Printer,\n   errors, warnings, and so forth,\
    \ is directly associated with the\n   Printer object itself rather than with the\
    \ entry in the directory\n   which only represents the Printer object.\n   IPP\
    \ clients implement the IPP protocol on the client side and give\n   end users\
    \ (or programs running on behalf of end users) the ability to\n   query Printer\
    \ objects and submit and manage print jobs.  An IPP\n   server is just that part\
    \ of the Printer object that implements the\n   server-side protocol.  The rest\
    \ of the Printer object implements (or\n   gateways into) the application semantics\
    \ of the print service itself.\n   The Printer objects may be embedded in an output\
    \ device or may be\n   implemented on a host on the network that communicates\
    \ with an output\n   device.\n   When a job is submitted to the Printer object\
    \ and the Printer object\n   validates the attributes in the submission request,\
    \ the Printer\n   object creates a new Job object.  The end user then interacts\
    \ with\n   this new Job object to query its status and monitor the progress of\n\
    \   the job.  End users may also cancel the print job by using the Job\n   object's\
    \ Cancel-Job operation.  The notification service is out of\n   scope for IPP/1.0,\
    \ but using such a notification service, the end\n   user is able to register\
    \ for and receive Printer specific and Job\n   specific events.  An end user can\
    \ query the status of Printer objects\n   and can follow the progress of Job objects\
    \ by polling using the Get-\n   Printer-Attributes, Get-Jobs, and Get-Job-Attributes\
    \ operations.\n"
- title: 2. IPP Objects
  contents:
  - "2. IPP Objects\n   The IPP/1.0 model introduces objects of type Printer and Job.\
    \  Each\n   type of object models relevant aspects of a real-world entity such\
    \ as\n   a real printer or real print job.  Each object type is defined as a\n\
    \   set of possible attributes that may be supported by instances of that\n  \
    \ object type.  For each object (instance), the actual set of supported\n   attributes\
    \ and values describe a specific implementation.  The\n   object's attributes\
    \ and values describe its state, capabilities,\n   realizable features, job processing\
    \ functions, and default behaviors\n   and characteristics.  For example, the\
    \ Printer object type is defined\n   as a set of attributes that each Printer\
    \ object potentially supports.\n   In the same manner, the Job object type is\
    \ defined as a set of\n   attributes that are potentially supported by each Job\
    \ object.\n   Each attribute included in the set of attributes defining an object\n\
    \   type is labeled as:\n     - \"REQUIRED\": each object MUST support the attribute.\n\
    \     - \"OPTIONAL\": each object MAY support the attribute.\n   There is no such\
    \ similar labeling of attribute values.  However, if\n   an implementation supports\
    \ an attribute, it MUST support at least one\n   of the possible values for that\
    \ attribute.\n"
- title: 2.1 Printer Object
  contents:
  - "2.1 Printer Object\n   The major component of the IPP/1.0 model is the Printer\
    \ object.  A\n   Printer object implements the server-side of the IPP/1.0 protocol.\n\
    \   Using the protocol, end users may query the attributes of the Printer\n  \
    \ object and submit print jobs to the Printer object.  The actual\n   implementation\
    \ components behind the Printer abstraction may take on\n   different forms and\
    \ different configurations.  However, the model\n   abstraction allows the details\
    \ of the configuration of real\n   components to remain opaque to the end user.\
    \  Section 3 describes\n   each of the Printer operations in detail.\n   The capabilities\
    \ and state of a Printer object are described by its\n   attributes.  Printer\
    \ attributes are divided into two groups:\n     - \"job-template\" attributes:\
    \ These attributes describe supported\n       job processing capabilities and\
    \ defaults for the Printer object.\n       (See section 4.2)\n     - \"printer-description\"\
    \ attributes: These attributes describe the\n       Printer object's identification,\
    \ state, location, references to\n       other sources of information about the\
    \ Printer object, etc. (see\n       section 4.4)\n   Since a Printer object is\
    \ an abstraction of a generic document output\n   device and print service provider,\
    \ a Printer object could be used to\n   represent any real or virtual device with\
    \ semantics consistent with\n   the Printer object, such as a fax device, an imager,\
    \ or even a CD\n   writer.\n   Some examples of configurations supporting a Printer\
    \ object include:\n     1) An output device with no spooling capabilities\n  \
    \   2) An output device with a built-in spooler\n     3) A print server supporting\
    \ IPP with one or more associated output\n        devices\n        3a) The associated\
    \ output devices may or may not be capable of\n          spooling jobs\n     \
    \   3b) The associated output devices may or may not support IPP\n   The following\
    \ figures show some examples of how Printer objects can\n   be realized on top\
    \ of various distributed printing configurations.\n   The embedded case below\
    \ represents configurations 1 and 2. The hosted\n   and fan-out figures below\
    \ represent configurations 3a and 3b.\n   Legend:\n   ##### indicates a Printer\
    \ object which is\n         either embedded in an output device or is\n      \
    \   hosted in a server.  The Printer object\n         might or might not be capable\
    \ of queuing/spooling.\n   any   indicates any network protocol or direct\n  \
    \       connect, including IPP\n   embedded printer:\n                       \
    \                      output device\n                                       \
    \    +---------------+\n    O   +--------+                         |  ###########\
    \  |\n   /|\\  | client |------------IPP------------># Printer #  |\n   / \\ \
    \ +--------+                         |  # Object  #  |\n                     \
    \                      |  ###########  |\n                                   \
    \        +---------------+\n   hosted printer:\n                             \
    \              +---------------+\n    O   +--------+        ###########      |\
    \               |\n   /|\\  | client |--IPP--># Printer #-any->| output device\
    \ |\n   / \\  +--------+        # Object  #      |               |\n         \
    \                 ###########      +---------------+\n                       \
    \                     +---------------+\n   fan out:                         \
    \        |               |\n                                        +-->| output\
    \ device |\n                                    any/    |               |\n  \
    \  O   +--------+      ###########   /     +---------------+\n   /|\\  | client\
    \ |-IPP-># Printer #--*\n   / \\  +--------+      # Object  #   \\     +---------------+\n\
    \                        ########### any\\    |               |\n            \
    \                            +-->| output device |\n                         \
    \                   |               |\n                                      \
    \      +---------------+\n"
- title: 2.2 Job Object
  contents:
  - "2.2 Job Object\n   A Job object is used to model a print job.  A Job object contains\n\
    \   documents.  The information required to create a Job object is sent\n   in\
    \ a create request from the end user via an IPP Client to the\n   Printer object.\
    \  The Printer object validates the create request, and\n   if the Printer object\
    \ accepts the request, the Printer object creates\n   the new Job object.  Section\
    \ 3 describes each of the Job operations\n   in detail.\n   The characteristics\
    \ and state of a Job object are described by its\n   attributes.  Job attributes\
    \ are grouped into two groups as follows:\n     - \"job-template\" attributes:\
    \ These attributes can be supplied by\n       the client or end user and include\
    \ job processing instructions\n       which are intended to override any Printer\
    \ object defaults and/or\n       instructions embedded within the document data.\
    \ (See section 4.2)\n     - \"job-description\" attributes: These attributes describe\
    \ the Job\n       object's identification, state, size, etc. The client supplies\n\
    \       some of these attributes, and the Printer object generates others.\n \
    \      (See section 4.3)\n   An implementation MUST support at least one document\
    \ per Job object.\n   An implementation MAY support multiple documents per Job\
    \ object.  A\n   document is either:\n     - a stream of document data in a format\
    \ supported by the Printer\n       object (typically a Page Description Language\
    \ - PDL), or\n     - a reference to such a stream of document data\n   In IPP/1.0,\
    \ a document is not modeled as an IPP object, therefore it\n   has no object identifier\
    \ or associated attributes.  All job\n   processing instructions are modeled as\
    \ Job object attributes.  These\n   attributes are called Job Template attributes\
    \ and they apply equally\n   to all documents within a Job object.\n"
- title: 2.3 Object Relationships
  contents:
  - "2.3 Object Relationships\n   IPP objects have relationships that are maintained\
    \ persistently along\n   with the persistent storage of the object attributes.\n\
    \   A Printer object can represent either one or more physical output\n   devices\
    \ or a logical device which \"processes\" jobs but never actually\n   uses a physical\
    \ output device to put marks on paper.  Examples of\n   logical devices include\
    \ a Web page publisher or a gateway into an\n   online document archive or repository.\
    \  A Printer object contains\n   zero or more Job objects.\n   A Job object is\
    \ contained by exactly one Printer object, however the\n   identical document\
    \ data associated with a Job object could be sent to\n   either the same or a\
    \ different Printer object.  In this case, a\n   second Job object would be created\
    \ which would be almost identical to\n   the first Job object, however it would\
    \ have new (different) Job\n   object identifiers (see section 2.4).\n   A Job\
    \ object is either empty (before any documents have been added)\n   or contains\
    \ one or more documents.  If the contained document is a\n   stream of document\
    \ data, that stream can be contained in only one\n   document.  However, there\
    \ can be identical copies of the stream in\n   other documents in the same or\
    \ different Job objects.  If the\n   contained document is just a reference to\
    \ a stream of document data,\n   other documents (in the same or different Job\
    \ object(s)) may contain\n   the same reference.\n"
- title: 2.4 Object Identity
  contents:
  - "2.4 Object Identity\n   All Printer and Job objects are identified by a Uniform\
    \ Resource\n   Identifier (URI) [RFC2396] so that they can be persistently and\n\
    \   unambiguously referenced.  The notion of a URI is a useful concept,\n   however,\
    \ until the notion of URI is more stable (i.e., defined more\n   completely and\
    \ deployed more widely), it is expected that the URIs\n   used for IPP objects\
    \ will actually be URLs [RFC2396].  Since every\n   URL is a specialized form\
    \ of a URI, even though the more generic term\n   URI is used throughout the rest\
    \ of this document, its usage is\n   intended to cover the more specific notion\
    \ of URL as well.\n   An administrator configures Printer objects to either support\
    \ or not\n   support authentication and/or message privacy using SSL3 [SSL] (the\n\
    \   mechanism for security configuration is outside the scope of\n   IPP/1.0).\
    \  In some situations, both types of connections (both\n   authenticated and unauthenticated)\
    \ can be established using a single\n   communication channel that has some sort\
    \ of negotiation mechanism.\n   In other situations, multiple communication channels\
    \ are used, one\n   for each type of security configuration.  Section 8 provides\
    \ a full\n   description of all security considerations and configurations.\n\
    \   If a Printer object supports more than one communication channel,\n   some\
    \ or all of those channels might support and/or require different\n   security\
    \ mechanisms.  In such cases, an administrator could expose\n   the simultaneous\
    \ support for these multiple communication channels as\n   multiple URIs for a\
    \ single Printer object where each URI represents\n   one of the communication\
    \ channels to the Printer object. To support\n   this flexibility, the IPP Printer\
    \ object type defines a multi-valued\n   identification attribute called the \"\
    printer-uri-supported\"\n   attribute.  It MUST contain at least one URI.  It\
    \ MAY contain more\n   than one URI.  That is, every Printer object will have\
    \ at least one\n   URI that identifies at least one communication channel to the\
    \ Printer\n   object, but it may have more than one URI where each URI identifies\
    \ a\n   different communication channel to the Printer object.  The\n   \"printer-uri-supported\"\
    \ attribute has a companion attribute, the\n   \"uri-security-supported\" attribute,\
    \ that has the same cardinality as\n   \"printer-uri-supported\".  The purpose\
    \ of the \"uri-security-supported\"\n   attribute is to indicate the security\
    \ mechanisms (if any) used for\n   each URI listed in \"printer-uri-supported\"\
    .  These two attributes are\n   fully described in sections 4.4.1 and 4.4.2.\n\
    \   When a job is submitted to the Printer object via a create request,\n   the\
    \ client supplies only a single Printer object URI.  The client\n   supplied Printer\
    \ object URI MUST be one of the values in the\n   \"printer-uri-supported\" Printer\
    \ attribute.\n   Note:  IPP/1.0 does not specify how the client obtains the client\n\
    \   supplied URI, but it is RECOMMENDED that a Printer object be\n   registered\
    \ as an entry in a directory service.  End-users and\n   programs can then interrogate\
    \ the directory searching for Printers.\n   Section 16 defines a generic schema\
    \ for Printer object entries in the\n   directory service and describes how the\
    \ entry acts as a bridge to the\n   actual IPP Printer object.  The entry in the\
    \ directory that\n   represents the IPP Printer object includes the possibly many\
    \ URIs for\n   that Printer object as values in one its attributes.\n   When a\
    \ client submits a create request to the Printer object, the\n   Printer object\
    \ validates the request and creates a new Job object.\n   The Printer object assigns\
    \ the new Job object a URI which is stored\n   in the \"job-uri\" Job attribute.\
    \  This URI is then used by clients as\n   the target for subsequent Job operations.\
    \  The Printer object\n   generates a Job URI based on its configured security\
    \ policy and the\n   URI used by the client in the create request.\n   For example,\
    \ consider a Printer object that supports both a\n   communication channel secured\
    \ by the use of SSL3 (using HTTP over\n   SSL3 with an \"https\" schemed URI)\
    \ and another open communication\n   channel that is not secured with SSL3 (using\
    \ a simple \"http\" schemed\n   URI).  If a client were to submit a job using\
    \ the secure URI, the\n   Printer object would assign the new Job object a secure\
    \ URI as well.\n   If a client were to submit a job using the open-channel URI,\
    \ the\n   Printer would assign the new Job object an open-channel URI.\n   In\
    \ addition, the Printer object also populates the Job object's\n   \"job-printer-uri\"\
    \ attribute.  This is a reference back to the Printer\n   object that created\
    \ the Job object.  If a client only has access to a\n   Job object's \"job-uri\"\
    \ identifier, the client can query the Job's\n   \"job-printer-uri\" attribute\
    \ in order to determine which Printer\n   object created the Job object.  If the\
    \ Printer object supports more\n   than one URI, the Printer object picks the\
    \ one URI supplied by the\n   client when creating the job to build the value\
    \ for and to populate\n   the Job's \"job-printer-uri\" attribute.\n   Allowing\
    \ Job objects to have URIs allows for flexibility and\n   scalability.  For example,\
    \ in some implementations, the Printer\n   object might create Jobs that are processed\
    \ in the same local\n   environment as the Printer object itself.  In this case,\
    \ the Job URI\n   might just be a composition of the Printer's URI and some unique\n\
    \   component for the Job object, such as the unique 32-bit positive\n   integer\
    \ mentioned later in this paragraph.  In other implementations,\n   the Printer\
    \ object might be a central clearing-house for validating\n   all Job object creation\
    \ requests, but the Job object itself might be\n   created in some environment\
    \ that is remote from the Printer object.\n   In this case, the Job object's URI\
    \ may have no physical-location\n   relationship at all to the Printer object's\
    \ URI.  Again, the fact\n   that Job objects have URIs allows for flexibility\
    \ and scalability,\n   however, many existing printing systems have local models\
    \ or\n   interface constraints that force print jobs to be identified using\n\
    \   only a 32-bit positive integer rather than an independent URI.  This\n   numeric\
    \ Job ID is only unique within the context of the Printer\n   object to which\
    \ the create request was originally submitted.\n   Therefore, in order to allow\
    \ both types of client access to IPP Job\n   objects (either by Job URI or by\
    \ numeric Job ID), when the Printer\n   object successfully processes a create\
    \ request and creates a new Job\n   object, the Printer object MUST generate both\
    \ a Job URI and a Job ID.\n   The Job ID (stored in the \"job-id\" attribute)\
    \ only has meaning in the\n   context of the Printer object to which the create\
    \ request was\n   originally submitted. This requirement to support both Job URIs\
    \ and\n   Job IDs allows all types of clients to access Printer objects and Job\n\
    \   objects no matter the local constraints imposed on the client\n   implementation.\n\
    \   In addition to identifiers, Printer objects and Job objects have\n   names\
    \ (\"printer-name\" and \"job-name\").  An object name NEED NOT be\n   unique\
    \ across all instances of all objects. A Printer object's name\n   is chosen and\
    \ set by an administrator through some mechanism outside\n   the scope of IPP/1.0.\
    \  A Job object's name is optionally chosen and\n   supplied by the IPP client\
    \ submitting the job.  If the client does\n   not supply a Job object name, the\
    \ Printer object generates a name for\n   the new Job object.  In all cases, the\
    \ name only has local meaning.\n   To summarize:\n     - Each Printer object is\
    \ identified with one or more URIs.  The\n       Printer's \"printer-uri-supported\"\
    \ attribute contains the URI(s).\n     - The Printer object's \"uri-security-supported\"\
    \ attribute\n       identifies the communication channel security protocols that\
    \ may\n       or may not have been configured for the various Printer object\n\
    \       URIs (e.g., 'ssl3' or 'none').\n     - Each Job object is identified with\
    \ a Job URI.  The Job's \"job-uri\"\n       attribute contains the URI.\n    \
    \ - Each Job object is also identified with Job ID which is a 32-bit,\n      \
    \ positive integer.  The Job's \"job-id\" attribute contains the Job\n       ID.\
    \  The Job ID is only unique within the context of the Printer\n       object\
    \  which created the Job object.\n     - Each Job object has a \"job-printer-uri\"\
    \ attribute which contains\n       the URI of the Printer object that was used\
    \ to create the Job\n       object.  This attribute is used to determine the Printer\
    \ object\n       that created a Job object when given only the URI for the Job\n\
    \       object.  This linkage is necessary to determine the languages,\n     \
    \  charsets, and operations which are supported on that Job (the\n       basis\
    \ for such support comes from the creating Printer object).\n     - Each Printer\
    \ object has a name (which is not necessarily unique).\n       The administrator\
    \ chooses and sets this name through some\n       mechanism outside the scope\
    \ of IPP/1.0 itself.  The Printer\n       object's \"printer-name\" attribute\
    \ contains the name.\n     - Each Job object has a name (which is not necessarily\
    \ unique).  The\n       client optionally supplies this name in the create request.\
    \  If\n       the client does not supply this name, the Printer object generates\n\
    \       a name for the Job object. The Job object's \"job-name\" attribute\n \
    \      contains the name.\n"
- title: 3. IPP Operations
  contents:
  - "3. IPP Operations\n   IPP objects support operations.  An operation consists\
    \ of a request\n   and a response.  When a client communicates with an IPP object,\
    \ the\n   client issues an operation request to the URI for that object.\n   Operation\
    \ requests and responses have parameters that identify the\n   operation.  Operations\
    \ also have attributes that affect the run-time\n   characteristics of the operation\
    \ (the intended target, localization\n   information, etc.).  These operation-specific\
    \ attributes are called\n   operation attributes (as compared to object attributes\
    \ such as\n   Printer object attributes or Job object attributes).  Each request\n\
    \   carries along with it any operation attributes, object attributes,\n   and/or\
    \ document data required to perform the operation.  Each request\n   requires\
    \ a response from the object.  Each response indicates success\n   or failure\
    \ of the operation with a status code as a response\n   parameter.  The response\
    \ contains any operation attributes, object\n   attributes, and/or status messages\
    \ generated during the execution of\n   the operation request.\n   This section\
    \ describes the semantics of the IPP operations, both\n   requests and responses,\
    \ in terms of the parameters, attributes, and\n   other data associated with each\
    \ operation.\n   The IPP/1.0 Printer operations are:\n     Print-Job (section\
    \ 3.2.1)\n     Print-URI (section 3.2.2)\n     Validate-Job (section 3.2.3)\n\
    \     Create-Job (section 3.2.4)\n     Get-Printer-Attributes (section 3.2.5)\n\
    \     Get-Jobs (section 3.2.6)\n   The Job operations are:\n     Send-Document\
    \ (section 3.3.1)\n     Send-URI (section 3.3.2)\n     Cancel-Job (section 3.3.3)\n\
    \     Get-Job-Attributes (section 3.3.4)\n   The Send-Document and Send-URI Job\
    \ operations are used to add a new\n   document to an existing multi-document\
    \ Job object created using the\n   Create-Job operation.\n"
- title: 3.1 Common Semantics
  contents:
  - "3.1 Common Semantics\n   All IPP operations require some common parameters and\
    \ operation\n   attributes.  These common elements and their semantic characteristics\n\
    \   are defined and described in more detail in the following sections.\n"
- title: 3.1.1 Required Parameters
  contents:
  - "3.1.1 Required Parameters\n   Every operation request contains the following\
    \ REQUIRED parameters:\n     - a \"version-number\",\n     - an \"operation-id\"\
    ,\n     - a \"request-id\", and\n     - the attributes that are REQUIRED for that\
    \ type of request.\n   Every operation response contains the following REQUIRED\
    \ parameters:\n     - a \"version-number\",\n     - a \"status-code\",\n     -\
    \ the \"request-id\" that was supplied in the corresponding request,\n       \
    \ and\n     - the attributes that are REQUIRED for that type of response.\n  \
    \ The encoding and transport document [RFC2565] defines special rules\n   for\
    \ the encoding of these parameters.  All other operation elements\n   are represented\
    \ using the more generic encoding rules for attributes\n   and groups of attributes.\n"
- title: 3.1.2 Operation IDs and Request IDs
  contents:
  - "3.1.2 Operation IDs and Request IDs\n   Each IPP operation request includes an\
    \ identifying \"operation-id\"\n   value.  Valid values are defined in the \"\
    operations-supported\"\n   Printer attribute section (see section 4.4.13).  The\
    \ client specifies\n   which operation is being requested by supplying the correct\n\
    \   \"operation-id\" value.\n   In addition, every invocation of an operation\
    \ is identified by a\n   \"request-id\" value. For each request, the client chooses\
    \ the\n   \"request-id\" which MUST be an integer (possibly unique depending on\n\
    \   client requirements) in the range from 1 to 2**31 - 1 (inclusive).\n   This\
    \ \"request-id\" allows clients to manage multiple outstanding\n   requests. The\
    \ receiving IPP object copies all 32-bits of the client-\n   supplied \"request-id\"\
    \ attribute into the response so that the client\n   can match the response with\
    \ the correct outstanding request, even if\n   the \"request-id\" is out of range.\
    \  If the request is terminated\n   before the complete \"request-id\" is received,\
    \ the IPP object rejects\n   the request and returns a response with a \"request-id\"\
    \ of 0.\n   Note: In some cases, the transport protocol underneath IPP might be\
    \ a\n   connection oriented protocol that would make it impossible for a\n   client\
    \ to receive responses in any order other than the order in\n   which the corresponding\
    \ requests were sent.  In such cases, the\n   \"request-id\" attribute would not\
    \ be essential for correct protocol\n   operation.  However, in other mappings,\
    \ the operation responses can\n   come back in any order.  In these cases, the\
    \ \"request-id\" would be\n   essential.\n"
- title: 3.1.3 Attributes
  contents:
  - "3.1.3 Attributes\n   Operation requests and responses are both composed of groups\
    \ of\n   attributes and/or document data.  The attributes groups are:\n     -\
    \ Operation Attributes: These attributes are passed in the\n       operation and\
    \ affect the IPP object's behavior while processing\n       the operation request\
    \ and may affect other attributes or groups\n       of attributes.  Some operation\
    \ attributes describe the document\n       data associated with the print job\
    \ and are associated with new\n       Job objects, however most operation attributes\
    \ do not persist\n       beyond the life of the operation.  The description of\
    \ each\n       operation attribute includes conformance statements indicating\n\
    \       which operation attributes are REQUIRED and which are OPTIONAL\n     \
    \  for an IPP object to support and which attributes a client MUST\n       supply\
    \ in a request and an IPP object MUST supply in a response.\n     - Job Template\
    \ Attributes: These attributes affect the processing\n       of a job.  A client\
    \ OPTIONALLY supplies Job Template Attributes\n       in a create request, and\
    \ the receiving object MUST be prepared to\n       receive all supported attributes.\
    \  The Job object can later be\n       queried to find out what Job Template attributes\
    \ were originally\n       requested in the create request, and such attributes\
    \ are returned\n       in the response as Job Object Attributes.  The Printer\
    \ object can\n       be queried about its Job Template attributes to find out\
    \ what\n       type of job processing capabilities are supported and/or what the\n\
    \       default job processing behaviors are, though such attributes are\n   \
    \    returned in the response as Printer Object Attributes.  The\n       \"ipp-attribute-fidelity\"\
    \ operation attribute affects processing\n       of all client-supplied Job Template\
    \ attributes (see section 15\n       for a full description of \"ipp-attribute-fidelity\"\
    \ and its\n       relationship to other attributes).\n     - Job Object Attributes:\
    \ These attributes are returned in response\n       to a query operation directed\
    \ at a Job object.\n     - Printer Object Attributes: These attributes are returned\
    \ in\n       response to a query operation directed at a Printer object.\n   \
    \  - Unsupported Attributes: In a create request, the client supplies\n      \
    \ a set of Operation and Job Template attributes.  If any of these\n       attributes\
    \ or their values is unsupported by the Printer object,\n       the Printer object\
    \ returns the set of unsupported attributes in\n       the response.  Section\
    \ 15 gives a full description of how Job\n       Template attributes supplied\
    \ by the client in a create request\n       are processed by the Printer object\
    \ and how unsupported\n       attributes are returned to the client.  Because\
    \ of extensibility,\n       any IPP object might receive a request that contains\
    \ new or\n       unknown attributes or values for which it has no support. In\
    \ such\n       cases, the IPP object processes what it can and returns the\n \
    \      unsupported attributes in the response.\n   Later in this section, each\
    \ operation is formally defined by\n   identifying the allowed and expected groups\
    \ of attributes for each\n   request and response.  The model identifies a specific\
    \ order for each\n   group in each request or response, but the attributes within\
    \ each\n   group may be in any order, unless specified otherwise.\n   Each attribute\
    \ specification includes the attribute's name followed\n   by the name of its\
    \ attribute syntax(es) in parenthesizes.  In\n   addition, each 'integer' attribute\
    \ is followed by the allowed range\n   in parentheses, (m:n), for values of that\
    \ attribute.  Each 'text' or\n   'name' attribute is followed by the maximum size\
    \ in octets in\n   parentheses, (size), for values of that attribute. For more\
    \ details\n   on attribute syntax notation, see the descriptions of these\n  \
    \ attributes syntaxes in section 4.1.\n   Note: Document data included in the\
    \ operation is not strictly an\n   attribute, but it is treated as a special attribute\
    \ group for\n   ordering purposes.  The only operations that support supplying\
    \ the\n   document data within an operation request are Print-Job and Send-\n\
    \   Document.  There are no operation responses that include document\n   data.\n\
    \   Note: Some operations are REQUIRED for IPP objects to support; the\n   others\
    \ are OPTIONAL (see section 5.2.2).  Therefore, before using an\n   OPTIONAL operation,\
    \ a client SHOULD first use the REQUIRED Get-\n   Printer-Attributes operation\
    \ to query the Printer's \"operations-\n   supported\" attribute in order to determine\
    \ which OPTIONAL Printer and\n   Job operations are actually supported.  The client\
    \ SHOULD NOT use an\n   OPTIONAL operation that is not supported.  When an IPP\
    \ object\n   receives a request to perform an operation it does not support, it\n\
    \   returns the 'server-error-operation-not-supported' status code (see\n   section\
    \ 13.1.5.2).  An IPP object is non-conformant if it does not\n   support a REQUIRED\
    \ operation.\n"
- title: 3.1.4 Character Set and Natural Language Operation Attributes
  contents:
  - "3.1.4 Character Set and Natural Language Operation Attributes\n   Some Job and\
    \ Printer attributes have values that are text strings and\n   names intended\
    \ for human understanding rather than machine\n   understanding (see the 'text'\
    \ and 'name' attribute syntax\n   descriptions in section 4.1).  The following\
    \ sections describe two\n   special Operation Attributes called \"attributes-charset\"\
    \ and\n   \"attributes-natural-language\".  These attributes are always part of\n\
    \   the Operation Attributes group.  For most attribute groups, the order\n  \
    \ of the attributes within the group is not important.  However, for\n   these\
    \ two attributes within the Operation Attributes group, the order\n   is critical.\
    \  The \"attributes-charset\" attribute MUST be the first\n   attribute in the\
    \ group and the \"attributes-natural-language\"\n   attribute MUST be the second\
    \ attribute in the group.  In other words,\n   these attributes MUST be supplied\
    \ in every IPP request and response,\n   they MUST come first in the group, and\
    \ MUST come in the specified\n   order.  For job creation operations, the IPP\
    \ Printer implementation\n   saves these two attributes with the new Job object\
    \ as Job Description\n   attributes.  For the sake of brevity in this document,\
    \ these\n   operation attribute descriptions are not repeated with every\n   operation\
    \ request and response, but have a reference back to this\n   section instead.\n"
- title: 3.1.4.1 Request Operation Attributes
  contents:
  - "3.1.4.1 Request Operation Attributes\n   The client MUST supply and the Printer\
    \ object MUST support the\n   following REQUIRED operation attributes in every\
    \ IPP/1.0 operation\n   request:\n     \"attributes-charset\" (charset):\n   \
    \     This operation attribute identifies the charset (coded character\n     \
    \   set and encoding method) used by any 'text' and 'name'\n        attributes\
    \ that the client is supplying in this request.  It\n        also identifies the\
    \ charset that the Printer object MUST use (if\n        supported) for all 'text'\
    \ and 'name' attributes and status\n        messages that the Printer object returns\
    \ in the response to this\n        request. See Sections 4.1.1 and 4.1.2 for the\
    \ specification of\n        the 'text' and 'name' attribute syntaxes.\n      \
    \  All clients and IPP objects MUST support the 'utf-8' charset\n        [RFC2279]\
    \ and MAY support additional charsets provided that they\n        are registered\
    \ with IANA [IANA-CS].  If the Printer object does\n        not support the client\
    \ supplied charset value, the Printer\n        object MUST reject the request,\
    \ set the \"attributes-charset\" to\n        'utf-8' in the response, and return\
    \ the 'client-error-charset-\n        not-supported' status code and any 'text'\
    \ or 'name' attributes\n        using the 'utf-8' charset.  The Printer object\
    \ MUST indicate the\n        charset(s) supported as the values of the \"charset-supported\"\
    \n        Printer attribute (see Section 4.4.15), so that the client can\n   \
    \     query to determine which charset(s) are supported.\n        Note to client\
    \ implementers: Since IPP objects are only required\n        to support the 'utf-8'\
    \ charset, in order to maximize\n        interoperability with multiple IPP object\
    \ implementations, a\n        client may want to supply 'utf-8' in the \"attributes-charset\"\
    \n        operation attribute, even though the client is only passing and\n  \
    \      able to present a simpler charset, such as US-ASCII or ISO-\n        8859-1.\
    \  Then the client will have to filter out (or charset\n        convert) those\
    \ characters that are returned in the response that\n        it cannot present\
    \ to its user.  On the other hand, if both the\n        client and the IPP objects\
    \ also support a charset in common\n        besides utf-8, the client may want\
    \ to use that charset in order\n        to avoid charset conversion or data loss.\n\
    \        See the 'charset' attribute syntax description in Section 4.1.7\n   \
    \     for the syntax and semantic interpretation of the values of this\n     \
    \   attribute and for example values.\n     \"attributes-natural-language\" (naturalLanguage):\n\
    \        This operation attribute identifies the natural language used by\n  \
    \      any 'text' and 'name' attributes that the client is supplying in\n    \
    \    this request.  This attribute also identifies the natural\n        language\
    \ that the Printer object SHOULD use for all 'text' and '\n        name' attributes\
    \ and status messages that the Printer object\n        returns in the response\
    \ to this request.\n        There are no REQUIRED natural languages required for\
    \ the Printer\n        object to support.  However, the Printer object's \"generated-\n\
    \        natural-language-supported\" attribute identifies the natural\n     \
    \   languages supported by the Printer object and any contained Job\n        objects\
    \ for all text strings generated by the IPP object.  A\n        client MAY query\
    \ this attribute to determine which natural\n        language(s) are supported\
    \ for generated messages.\n        For any of the attributes for which the Printer\
    \ object generates\n        text, i.e., for the \"job-state-message\", \"printer-state-\n\
    \        message\", and status messages (see Section 3.1.6), the Printer\n   \
    \     object MUST be able to generate these text strings in any of its\n     \
    \   supported natural languages.  If the client requests a natural\n        language\
    \ that is not supported, the Printer object MUST return\n        these generated\
    \ messages in the Printer's configured natural\n        language as specified\
    \ by the Printer's \"natural-language-\n        configured\" attribute\" (see\
    \ Section 4.4.16).\n        For other 'text' and 'name' attributes supplied by\
    \ the client,\n        authentication system, operator, system administrator,\
    \ or\n        manufacturer (i.e., for \"job-originating-user-name\", \"printer-\n\
    \        name\" (name), \"printer-location\" (text), \"printer-info\" (text),\n\
    \        and \"printer-make-and-model\" (text)), the Printer object is only\n\
    \        required to support the configured natural language of the\n        Printer\
    \ identified by the Printer object's \"natural-language-\n        configured\"\
    \ attribute, though support of additional natural\n        languages for these\
    \ attributes is permitted.\n        For any 'text' or 'name' attribute in the\
    \ request that is in a\n        different natural language than the value supplied\
    \ in the\n        \"attributes-natural-language\" operation attribute, the client\n\
    \        MUST use the Natural Language Override mechanism (see sections\n    \
    \    4.1.1.2 and 4.1.2.2) for each such attribute value supplied.\n        The\
    \ client MAY use the Natural Language Override mechanism\n        redundantly,\
    \ i.e., use it even when the value is in the same\n        natural language as\
    \ the value supplied in the \"attributes-\n        natural-language\" operation\
    \ attribute of the request.\n        The IPP object MUST accept any natural language\
    \ and any Natural\n        Language Override, whether the IPP object supports\
    \ that natural\n        language or not (and independent of the value of the \"\
    ipp-\n        attribute-fidelity\" Operation attribute).  That is the IPP\n  \
    \      object accepts all client supplied values no matter what the\n        values\
    \ are in the Printer object's \"generated-natural-language-\n        supported\"\
    \ attribute.  That attribute, \"generated-natural-\n        language-supported\"\
    , only applies to generated messages,\n        not client supplied messages. \
    \ The IPP object MUST remember that\n        natural language for all client-supplied\
    \ attributes, and when\n        returning those attributes in response to a query,\
    \ the IPP\n        object MUST indicate that natural language.\n        Each value\
    \ whose attribute syntax type is 'text' or 'name' (see\n        sections 4.1.1\
    \ and 4.1.2) has an Associated Natural-Language.\n        This document does not\
    \ specify how this association is stored in\n        a Printer or Job object.\
    \  When such a value is encoded in a\n        request or response, the natural\
    \ language is either implicit or\n        explicit:\n             - In the implicit\
    \ case, the value contains only the\n               text/name value, and the language\
    \ is specified by the\n               \"attributes-natural-language\" operation\
    \ attribute in the\n               request or response (see sections 4.1.1.1\n\
    \               textWithoutLanguage and 4.1.2.1 nameWithoutLanguage).\n      \
    \       - In the explicit case (also known as the Natural-Language\n         \
    \      Override case), the value contains both the language and\n            \
    \   the text/name value (see sections 4.1.1.2\n               textWithLanguage\
    \ and 4.1.2.2 nameWithLanguage).\n        For example, the \"job-name\" attribute\
    \ MAY be supplied by the\n        client in a create request.  The text value\
    \ for this attribute\n        will be in the natural language identified by the\
    \ \"attribute-\n        natural-language\" attribute, or if different, as identified\
    \ by\n        the Natural Language Override mechanism.  If supplied, the IPP\n\
    \        object will use the value of the \"job-name\" attribute to\n        populate\
    \ the Job object's \"job-name\" attribute.  Whenever any\n        client queries\
    \ the Job object's \"job-name\" attribute, the IPP\n        object returns the\
    \ attribute as stored and uses the Natural\n        Language Override mechanism\
    \ to specify the natural language, if\n        it is different from that reported\
    \ in the \"attributes-natural-\n        language\" operation attribute of the\
    \ response.  The IPP object\n        MAY use the Natural Language Override mechanism\
    \ redundantly,\n        i.e., use it even when the value is in the same natural\
    \ language\n        as the value supplied in the \"attributes-natural-language\"\
    \n        operation attribute of the response.\n        An IPP object MUST NOT\
    \ reject a request based on a supplied\n        natural language in an \"attributes-natural-language\"\
    \ Operation\n        attribute or in any attribute that uses the Natural Language\n\
    \        Override.\n        See the 'naturalLanguage' attribute syntax description\
    \ in\n        section 4.1.8 for the syntax and semantic interpretation of the\n\
    \        values of this attribute and for example values.\n   Clients SHOULD NOT\
    \ supply 'text' or 'name' attributes that use an\n   illegal combination of natural\
    \ language and charset.  For example,\n   suppose a Printer object supports charsets\
    \ 'utf-8', 'iso-8859-1', and\n   'iso-8859-7'.  Suppose also, that it supports\
    \ natural languages 'en'\n   (English), 'fr' (French), and 'el' (Greek).  Although\
    \ the Printer\n   object supports the charset 'iso-8859-1' and natural language\
    \ 'el',\n   it probably does not support the combination of Greek text strings\n\
    \   using the 'iso-8859-1' charset.  The Printer object handles this\n   apparent\
    \ incompatibility differently depending on the context in\n   which it occurs:\n\
    \     - In a create request: If the client supplies a text or name\n       attribute\
    \ (for example, the \"job-name\" operation attribute) that\n       uses an apparently\
    \ incompatible combination, it is a client\n       choice that does not affect\
    \ the Printer object or its correct\n       operation.  Therefore, the Printer\
    \ object simply accepts the\n       client supplied value, stores it with the\
    \ Job object, and\n       responds back with the same combination whenever the\
    \ client (or\n       any client) queries for that attribute.\n     - In a query-type\
    \ operation, like Get-Printer-Attributes: If the\n       client requests an apparently\
    \ incompatible combination, the\n       Printer object responds (as described\
    \ in section 3.1.4.2) using\n       the Printer's configured natural language\
    \ rather than the natural\n       language requested by the client.\n   In either\
    \ case, the Printer object does not reject the request\n   because of the apparent\
    \ incompatibility.  The potential incompatible\n   combination of charset and\
    \ natural language can occur either at the\n   global operation level or at the\
    \ Natural Language Override\n   attribute-by-attribute level.  In addition, since\
    \ the response always\n   includes explicit charset and natural language information,\
    \ there is\n   never any question or ambiguity in how the client interprets the\n\
    \   response.\n"
- title: 3.1.4.2 Response Operation Attributes
  contents:
  - "3.1.4.2 Response Operation Attributes\n   The Printer object MUST supply and\
    \ the client MUST support the\n   following REQUIRED operation attributes in every\
    \ IPP/1.0 operation\n   response:\n     \"attributes-charset\" (charset):\n  \
    \      This operation attribute identifies the charset used by any '\n       \
    \ text' and 'name' attributes that the Printer object is returning\n        in\
    \ this response.  The value in this response MUST be the same\n        value as\
    \ the \"attributes-charset\" operation attribute supplied\n        by the client\
    \ in the request.  If this is not possible\n        (i.e., the charset requested\
    \ is not supported), the request\n        would have been rejected.  See \"attributes-charset\"\
    \ described in\n        Section 3.1.4.1 above.\n        If the Printer object\
    \ supports more than just the 'utf-8'\n        charset, the Printer object MUST\
    \ be able to code convert between\n        each of the charsets supported on a\
    \ highest fidelity possible\n        basis in order to return the 'text' and 'name'\
    \ attributes in the\n        charset requested by the client.  However, some information\
    \ loss\n        MAY occur during the charset conversion depending on the\n   \
    \     charsets involved.  For example, the Printer object may convert\n      \
    \  from a UTF-8 'a' to a US-ASCII 'a' (with no loss of\n        information),\
    \ from an ISO Latin 1 CAPITAL LETTER A WITH ACUTE\n        ACCENT to US-ASCII\
    \ 'A' (losing the accent), or from a UTF-8\n        Japanese Kanji character to\
    \ some ISO Latin 1 error character\n        indication such as '?', decimal code\
    \ equivalent, or to the\n        absence of a character, depending on implementation.\n\
    \        Note: Whether an implementation that supports more than one\n       \
    \ charset stores the data in the charset supplied by the client or\n        code\
    \ converts to one of the other supported charsets, depends on\n        implementation.\
    \  The strategy should try to minimize loss of\n        information during code\
    \ conversion.  On each response, such an\n        implementation converts from\
    \ its internal charset to that\n        requested.\n     \"attributes-natural-language\"\
    \ (naturalLanguage):\n        This operation attribute identifies the natural\
    \ language used by\n        any 'text' and 'name' attributes that the IPP object\
    \ is\n        returning in this response.  Unlike the \"attributes-charset\"\n\
    \        operation attribute, the IPP object NEED NOT return the same\n      \
    \  value as that supplied by the client in the request.  The IPP\n        object\
    \ MAY return the natural language of the Job object or the\n        Printer's\
    \ configured natural language as identified by the\n        Printer object's \"\
    natural-language-configured\" attribute, rather\n        than the natural language\
    \ supplied by the client.  For any '\n        text' or 'name' attribute or status\
    \ message in the response that\n        is in a different natural language than\
    \ the value returned in\n        the \"attributes-natural-language\" operation\
    \ attribute, the IPP\n        object MUST use the Natural Language Override mechanism\
    \ (see\n        sections 4.1.1.2 and 4.1.2.2) on each attribute value returned.\n\
    \        The IPP object MAY use the Natural Language Override mechanism\n    \
    \    redundantly, i.e., use it even when the value is in the same\n        natural\
    \ language as the value supplied in the \"attributes-\n        natural-language\"\
    \ operation attribute of the response.\n"
- title: 3.1.5 Operation Targets
  contents:
  - "3.1.5 Operation Targets\n   All IPP operations are directed at IPP objects. \
    \ For Printer\n   operations, the operation is always directed at a Printer object\n\
    \   using one of its URIs (i.e., one of the values in the Printer\n   object's\
    \ \"printer-uri-supported\" attribute).  Even if the Printer\n   object supports\
    \ more than one URI, the client supplies only one URI\n   as the target of the\
    \ operation.  The client identifies the target\n   object by supplying the correct\
    \ URI in the \"printer-uri (uri)\"\n   operation attribute.\n   For Job operations,\
    \ the operation is directed at either:\n     - The Job object itself using the\
    \ Job object's URI.  In this case,\n       the client identifies the target object\
    \ by supplying the correct\n       URI in the \"job-uri (uri)\" operation attribute.\n\
    \     - The Printer object that created the Job object using both the\n      \
    \ Printer objects URI and the Job object's Job ID.  Since the\n       Printer\
    \ object that created the Job object generated the Job ID,\n       it MUST be\
    \ able to correctly associate the client supplied Job ID\n       with the correct\
    \ Job object.  The client supplies the Printer\n       object's URI in the \"\
    printer-uri (uri)\" operation attribute and\n       the Job object's Job ID in\
    \ the \"job-id (integer(1:MAX))\"\n       operation attribute.\n   If the operation\
    \ is directed at the Job object directly using the Job\n   object's URI, the client\
    \ MUST NOT include the redundant \"job-id\"\n   operation attribute.\n   The operation\
    \ target attributes are REQUIRED operation attributes\n   that MUST be included\
    \ in every operation request.  Like the charset\n   and natural language attributes\
    \ (see section 3.1.4), the operation\n   target attributes are specially ordered\
    \ operation attributes.  In all\n   cases, the operation target attributes immediately\
    \ follow the\n   \"attributes-charset\" and \"attributes-natural-language\" attributes\n\
    \   within the operation attribute group, however the specific ordering\n   rules\
    \ are:\n     - In the case where there is only one operation target attribute\n\
    \       (i.e., either only the \"printer-uri\" attribute or only the \"job-\n\
    \       uri\" attribute), that attribute MUST be the third attribute in\n    \
    \   the operation attributes group.\n     - In the case where Job operations use\
    \ two operation target\n       attributes (i.e., the \"printer-uri\" and \"job-id\"\
    \ attributes), the\n       \"printer-uri\" attribute MUST be the third attribute\
    \ and the\n       \"job-id\" attribute MUST be the fourth attribute.\n   In all\
    \ cases, the target URIs contained within the body of IPP\n   operation requests\
    \ and responses must be in absolute format rather\n   than relative format (a\
    \ relative URL identifies a resource with the\n   scope of the HTTP server, but\
    \ does not include scheme, host or port).\n   The following rules apply to the\
    \ use of port numbers in URIs that\n   identify IPP objects:\n     1. If the URI\
    \ scheme allows the port number to be explicitly\n        included in the URI\
    \ string, and a port number is specified\n        within the URI, then that port\
    \ number MUST be used by the client\n        to contact the IPP object.\n    \
    \ 2. If the URI scheme allows the port number to be explicitly\n        included\
    \ in the URI string, and a port number is not specified\n        within the URI,\
    \ then default port number implied by that URI\n        scheme MUST be used by\
    \ the client to contact the IPP object.\n     3. If the URI scheme does not allow\
    \ an explicit port number to be\n        specified within the URI, then the default\
    \ port number implied\n        by that URI MUST be used by the client to contact\
    \ the IPP\n        object.\n   Note: The IPP encoding and transport document [RFC2565]\
    \ shows a\n   mapping of IPP onto HTTP/1.1 and defines a new default port number\n\
    \   for using IPP over HTTP/1.1.\n"
- title: 3.1.6 Operation Status Codes and Messages
  contents:
  - "3.1.6 Operation Status Codes and Messages\n   Every operation response includes\
    \ a REQUIRED \"status-code\" parameter\n   and an OPTIONAL \"status-message\"\
    \ operation attribute.  The \"status-\n   code\" provides information on the processing\
    \ of a request.  A\n   \"status-message\" attribute provides a short textual description\
    \ of\n   the status of the operation.  The status code is intended for use by\n\
    \   automata, and the status message is intended for the human end user.\n   If\
    \ a response does include a \"status-message\" attribute, an IPP\n   client NEED\
    \ NOT examine or display the message, however it SHOULD do\n   so in some implementation\
    \ specific manner.\n   The \"status-code\" value is a numeric value that has semantic\
    \ meaning.\n   The \"status-code\" syntax is similar to a \"type2 enum\" (see\
    \ section\n   4.1 on \"Attribute Syntaxes\") except that values can range only\
    \ from\n   0x0000 to 0x7FFF.  Section 13 describes the status codes, assigns the\n\
    \   numeric values, and suggests a corresponding status message for each\n   status\
    \ code.  The \"status-message\" attribute's syntax is \"text(255)\".\n   A client\
    \ implementation of IPP SHOULD convert status code values into\n   any localized\
    \ message that has semantic meaning to the end user.\n   If the Printer object\
    \ supports the \"status-message\" operation\n   attribute, the Printer object\
    \ MUST be able to generate this message\n   in any of the natural languages identified\
    \ by the Printer object's\n   \"generated-natural-language-supported\" attribute\
    \ (see the\n   \"attributes-natural-language\" operation attribute specified in\n\
    \   section 3.1.4.1).  As described in section 3.1.4.1 for any returned '\n  \
    \ text' attribute, if there is a choice for generating this message,\n   the Printer\
    \ object uses the natural language indicated by the value\n   of the \"attributes-natural-language\"\
    \ in the client request if\n   supported, otherwise the Printer object uses the\
    \ value in the Printer\n   object's own \"natural-language-configured\" attribute.\
    \  If the Printer\n   object supports the \"status-message\" operation attribute,\
    \ it SHOULD\n   use the REQUIRED 'utf-8' charset to return a status message for\
    \ the\n   following error status codes (see section 13): 'client-error-bad-\n\
    \   request', 'client-error-charset-not-supported', 'server-error-\n   internal-error',\
    \ 'server-error-operation-not-supported', and '\n   server-error-version-not-supported'.\
    \  In this case, it MUST set the\n   value of the \"attributes-charset\" operation\
    \ attribute to 'utf-8' in\n   the error response.\n"
- title: 3.1.7 Versions
  contents:
  - "3.1.7 Versions\n   Each operation request and response carries with it a \"version-\n\
    \   number\" parameter.  Each value of the \"version-number\" is in the form\n\
    \   \"X.Y\" where X is the major version number and Y is the minor version\n \
    \  number.  By including a version number in the client request, it\n   allows\
    \ the client  to identify which version of IPP it is interested\n   in using.\
    \  If the IPP object does not support that version, the\n   object responds with\
    \ a status code of 'server-error-version-not-\n   supported' along with the closest\
    \ version number that is supported\n   (see section 13.1.5.4).\n   There is no\
    \ version negotiation per se.  However, if after receiving\n   a 'server-error-version-not-supported'\
    \ status code from an IPP\n   object, there is nothing that prevents a client\
    \ from trying again\n   with a different version number. In order to conform to\
    \ IPP/1.0, an\n   implementation MUST support at least version '1.0'.\n   There\
    \ is only one notion of \"version number\" that covers both IPP\n   Model and\
    \ IPP Protocol changes. Thus the version number MUST change\n   when introducing\
    \ a new version of the Model and Semantics document\n   [RFC2566] or a new version\
    \ of the Encoding and Transport document\n   [RFC2565].\n   Changes to the major\
    \ version number indicate structural or syntactic\n   changes that make it impossible\
    \ for older version of IPP clients and\n   Printer objects to correctly parse\
    \ and process the new or changed\n   attributes, operations and responses.  If\
    \ the major version number\n   changes, the minor version numbers is set to zero.\
    \  As an example,\n   adding the \"ipp-attribute-fidelity\" attribute (if it had\
    \ not been\n   part of version '1.0'), would have required a change to the major\n\
    \   version number.  Items that might affect the changing of the major\n   version\
    \ number include any changes to the Model and Semantics\n   document [RFC2566]\
    \ or the Encoding and Transport [RFC2565] itself,\n   such as:\n     - reordering\
    \ of ordered attributes or attribute sets\n     - changes to the syntax of existing\
    \ attributes\n     - changing Operation or Job Template attributes from OPTIONAL\
    \ to\n       REQUIRED and vice versa\n     - adding REQUIRED (for an IPP object\
    \ to support) operation\n       attributes\n     - adding REQUIRED (for an IPP\
    \ object to support) operation\n       attribute groups\n     - adding values\
    \ to existing operation attributes\n     - adding REQUIRED operations\n   Changes\
    \ to the minor version number indicate the addition of new\n   features, attributes\
    \ and attribute values that may not be understood\n   by all IPP objects, but\
    \ which can be ignored if not understood.\n   Items that might affect the changing\
    \ of the minor version number\n   include any changes to the model objects and\
    \ attributes but not the\n   encoding and transport rules [RFC2565] (except adding\
    \ attribute\n   syntaxes).  Examples of such changes are:\n     - grouping all\
    \ extensions not included in a previous version into\n       a new version\n \
    \    - adding new attribute values\n     - adding new object attributes\n    \
    \ - adding OPTIONAL (for an IPP object to support) operation\n       attributes\
    \ (i.e., those attributes that an IPP object can ignore\n       without confusing\
    \ clients)\n     - adding OPTIONAL (for an IPP object to support) operation\n\
    \       attribute groups (i.e., those attributes that an IPP object can\n    \
    \   ignore without confusing clients)\n     - adding new attribute syntaxes\n\
    \     - adding OPTIONAL operations\n     - changing Job Description attributes\
    \ or Printer Description\n       attributes from OPTIONAL to REQUIRED or vice\
    \ versa.\n   The encoding of the \"operation-id\", the \"version-number\", the\n\
    \   \"status-code\", and the \"request-id\" MUST NOT change over any version\n\
    \   number (either major or minor).  This rule guarantees that all future\n  \
    \ versions will be backwards compatible with all previous versions (at\n   least\
    \ for checking the \"operation-id\", the \"version-number\", and the\n   \"request-id\"\
    ).  In addition, any protocol elements (attributes, error\n   codes, tags, etc.)\
    \ that are not carried forward from one version to\n   the next are deprecated\
    \ so that they can never be reused with new\n   semantics.\n   Implementations\
    \ that support a certain major version NEED NOT support\n   ALL previous versions.\
    \  As each new major version is defined (through\n   the release of a new specification),\
    \ that major version will specify\n   which previous major versions MUST be supported\
    \ in compliant\n   implementations.\n"
- title: 3.1.8 Job Creation Operations
  contents:
  - "3.1.8 Job Creation Operations\n   In order to \"submit a print job\" and create\
    \ a new Job object, a\n   client issues a create request.  A create request is\
    \ any one of\n   following three operation requests:\n     - The Print-Job Request:\
    \ A client that wants to submit a print job\n       with only a single document\
    \ uses the Print-Job operation.  The\n       operation allows for the client to\
    \ \"push\" the document data to\n       the Printer object by including the document\
    \ data in the request\n       itself.\n     - The Print-URI Request: A client\
    \ that wants to submit a print job\n       with only a single document (where\
    \ the Printer object \"pulls\" the\n       document data instead of the client\
    \ \"pushing\" the data to the\n       Printer object) uses the Print-URI operation.\
    \   In this case, the\n       client includes in the request only a URI reference\
    \ to the\n       document data (not the document data itself).\n     - The Create-Job\
    \ Request: A client that wants to submit a print job\n       with multiple documents\
    \ uses the Create-Job operation.  This\n       operation is followed by an arbitrary\
    \ number of Send-Document\n       and/or Send-URI operations (each creating another\
    \ document for\n       the newly create Job object).  The Send-Document operation\n\
    \       includes the document data in the request (the client \"pushes\"\n   \
    \    the document data to the printer), and the Send-URI operation\n       includes\
    \ only a URI reference to the document data in the request\n       (the Printer\
    \ \"pulls\" the document data from the referenced\n       location).  The last\
    \ Send-Document or Send-URI request for a\n       given Job object includes a\
    \ \"last-document\" operation attribute\n       set to 'true' indicating that\
    \ this is the last request.\n   Throughout this model specification, the term\
    \ \"create request\" is\n   used to refer to any of these three operation requests.\n\
    \   A Create-Job operation followed by only one Send-Document operation\n   is\
    \ semantically equivalent to a Print-Job operation, however, for\n   performance\
    \ reasons, the client SHOULD use the Print-Job operation\n   for all single document\
    \ jobs.  Also, Print-Job is a REQUIRED\n   operation (all implementations MUST\
    \ support it) whereas Create-Job is\n   an OPTIONAL operation, hence some implementations\
    \ might not support\n   it.\n   Job submission time is the point in time when\
    \ a client issues a\n   create request.  The initial state of every Job object\
    \ is the '\n   pending' or 'pending-held' state.  Later, the Printer object begins\n\
    \   processing the print job.  At this point in time, the Job object's\n   state\
    \ moves to 'processing'.  This is known as job processing time.\n   There are\
    \ validation checks that must be done at job submission time\n   and others that\
    \ must be performed at job processing time.\n   At job submission time and at\
    \ the time a Validate-Job operation is\n   received, the Printer MUST do the following:\n\
    \     1. Process the client supplied attributes and either accept or\n       \
    \ reject the request\n     2. Validate the syntax of and support for the scheme\
    \ of any client\n        supplied URI\n   At job submission time the Printer object\
    \ MUST validate whether or\n   not the supplied attributes, attribute syntaxes,\
    \ and values are\n   supported by matching them with the Printer object's corresponding\n\
    \   \"xxx-supported\" attributes.  See section 3.2.1.2 for details.  [ipp-\n \
    \  iig] presents suggested steps for an IPP object to either accept or\n   reject\
    \ any request and additional steps for processing create\n   requests.\n   At\
    \ job submission time the Printer object NEED NOT perform the\n   validation checks\
    \ reserved for job processing time such as:\n     1. Validating the document data\n\
    \     2. Validating the actual contents of any client supplied URI\n        (resolve\
    \ the reference and follow the link to the document data)\n   At job submission\
    \ time, these additional job processing time\n   validation checks are essentially\
    \ useless, since they require\n   actually parsing and interpreting the document\
    \ data, are not\n   guaranteed to be 100% accurate, and MUST be done, yet again,\
    \ at job\n   processing time.  Also, in the case of a URI, checking for\n   availability\
    \ at job submission time does not guarantee availability\n   at job processing\
    \ time.   In addition, at job processing time, the\n   Printer object might discover\
    \ any of the following conditions that\n   were not detectable at job submission\
    \ time:\n     - runtime errors in the document data,\n     - nested document data\
    \ that is in an unsupported format,\n     - the URI reference is no longer valid\
    \ (i.e., the server hosting\n       the document might be down), or\n     - any\
    \ other job processing error\n   At job processing time, since the Printer object\
    \ has already\n   responded with a successful status code in the response to the\
    \ create\n   request, if the Printer object detects an error, the Printer object\n\
    \   is unable to inform the end user of the error with an operation\n   status\
    \ code.   In this case, the Printer, depending on the error, can\n   set the \"\
    job-state\", \"job-state-reasons\", or \"job-state-message\"\n   attributes to\
    \ the appropriate value(s) so that later queries can\n   report the correct job\
    \ status.\n   Note: Asynchronous notification of events is outside the scope of\n\
    \   IPP/1.0.\n"
- title: 3.2 Printer Operations
  contents:
  - "3.2 Printer Operations\n   All Printer operations are directed at Printer objects.\
    \  A client\n   MUST always supply the \"printer-uri\" operation attribute in\
    \ order to\n   identify the correct target of the operation.\n"
- title: 3.2.1 Print-Job Operation
  contents:
  - "3.2.1 Print-Job Operation\n   This REQUIRED operation allows a client to submit\
    \ a print job with\n   only one document and supply the document data (rather\
    \ than just a\n   reference to the data).  See Section 15 for the suggested steps\
    \ for\n   processing create operations and their Operation and Job Template\n\
    \   attributes.\n"
- title: 3.2.1.1 Print-Job Request
  contents:
  - "3.2.1.1 Print-Job Request\n   The following groups of attributes are supplied\
    \ as part of the\n   Print-Job Request:\n   Group 1: Operation Attributes\n  \
    \   Natural Language and Character Set:\n        The \"attributes-charset\" and\
    \ \"attributes-natural-language\"\n        attributes as described in section\
    \ 3.1.4.1.  The Printer object\n        MUST copy these values to the corresponding\
    \ Job Description\n        attributes described in sections 4.3.23 and 4.3.24.\n\
    \     Target:\n        The \"printer-uri\" (uri) operation attribute which is\
    \ the target\n        for this operation as described in section 3.1.5.\n    \
    \ Requesting User Name:\n        The \"requesting-user-name\" (name(MAX)) attribute\
    \ SHOULD be\n        supplied by the client as described in section 8.3.\n   \
    \  \"job-name\" (name(MAX)):\n        The client OPTIONALLY supplies this attribute.\
    \  The Printer\n        object MUST support this attribute.  It contains the client\n\
    \        supplied Job name.  If this attribute is supplied by the client,\n  \
    \      its value is used for the \"job-name\" attribute of the newly\n       \
    \ created Job object.  The client MAY automatically include any\n        information\
    \ that will help the end-user distinguish amongst\n        his/her jobs, such\
    \ as the name of the application program along\n        with information from\
    \ the document, such as the document name,\n        document subject, or source\
    \ file name.  If this attribute is not\n        supplied by the client, the Printer\
    \ generates a name to use in\n        the \"job-name\" attribute of the newly\
    \ created Job object (see\n        Section 4.3.5).\n     \"ipp-attribute-fidelity\"\
    \ (boolean):\n        The client OPTIONALLY supplies this attribute.  The Printer\n\
    \        object MUST support this attribute.  The value 'true' indicates\n   \
    \     that total fidelity to client supplied Job Template attributes\n       \
    \ and values is required, else the Printer object MUST reject the\n        Print-Job\
    \ request.  The value 'false' indicates that a\n        reasonable attempt to\
    \ print the Job object is acceptable and the\n        Printer object MUST accept\
    \ the Print-job request. If not\n        supplied, the Printer object assumes\
    \ the value is 'false'.  All\n        Printer objects MUST support both types\
    \ of job processing.  See\n        section 15 for a full description of \"ipp-attribute-fidelity\"\
    \n        and its relationship to other attributes, especially the Printer\n \
    \       object's \"pdl-override-supported\" attribute.\n     \"document-name\"\
    \ (name(MAX)):\n        The client OPTIONALLY supplies this attribute.  The Printer\n\
    \        object MUST support this attribute.   It contains the client\n      \
    \  supplied document name.  The document name MAY be different than\n        the\
    \ Job name.  Typically, the client software automatically\n        supplies the\
    \ document name on behalf of the end user by using a\n        file name or an\
    \ application generated name.  If this attribute\n        is supplied, its value\
    \ can be used in a manner defined by each\n        implementation.  Examples include:\
    \ printed along with the Job\n        (job start sheet, page adornments, etc.),\
    \ used by accounting or\n        resource tracking management tools, or even stored\
    \ along with\n        the document as a document level attribute.  IPP/1.0 does\
    \ not\n        support the concept of document level attributes.\n     \"document-format\"\
    \ (mimeMediaType) :\n        The client OPTIONALLY supplies this attribute.  The\
    \ Printer\n        object MUST support this attribute.  The value of this attribute\n\
    \        identifies the format of the supplied document data.  If the\n      \
    \  client does not supply this attribute, the Printer object\n        assumes\
    \ that the document data is in the format defined by the\n        Printer object's\
    \ \"document-format-default\" attribute.  If the\n        client supplies this\
    \ attribute, but the value is not supported\n        by the Printer object, i.e.,\
    \ the value is not one of the values\n        of the Printer object's \"document-format-supported\"\
    \ attribute,\n        the Printer object MUST reject the request and return the\
    \ '\n        client-error-document-format-not-supported' status code.\n     \"\
    document-natural-language\" (naturalLanguage):\n        The client OPTIONALLY\
    \ supplies this attribute.  The Printer\n        object OPTIONALLY supports this\
    \ attribute. This attribute\n        specifies the natural language of the document\
    \ for those\n        document-formats that require a specification of the natural\n\
    \        language in order to image the document unambiguously. There are\n  \
    \      no particular values required for the Printer object to support.\n    \
    \ \"compression\" (type3 keyword)\n        The client OPTIONALLY supplies this\
    \ attribute.  The Printer\n        object OPTIONALLY supports this attribute and\
    \ the \"compression-\n        supported\" attribute (see section 4.4.29).  The\
    \ client supplied\n        \"compression\" operation attribute identifies the\
    \ compression\n        algorithm used on the document data.  If the client omits\
    \ this\n        attribute, the Printer object MUST assume that the data is not\n\
    \        compressed.  If the client supplies the attribute and the\n        Printer\
    \ object supports the attribute, the Printer object uses\n        the corresponding\
    \ decompression algorithm on the document data.\n        If the client supplies\
    \ this attribute, but the value is not\n        supported by the Printer object,\
    \ i.e., the value is not one of\n        the values of the Printer object's \"\
    compression-supported\"\n        attribute, the Printer object MUST copy the attribute\
    \ and its\n        value to the Unsupported Attributes response group, reject\
    \ the\n        request, and return the 'client-error-attributes-or-values-not-\n\
    \        supported' status code.\n     \"job-k-octets\" (integer(0:MAX))\n   \
    \     The client OPTIONALLY supplies this attribute.  The Printer\n        object\
    \ OPTIONALLY supports this attribute and the \"job-k-\n        octets-supported\"\
    \ attribute (see section 4.4.30).  The client\n        supplied \"job-k-octets\"\
    \ operation attribute identifies the total\n        size of the document(s) in\
    \ K octets being submitted (see section\n        4.3.17 for the complete semantics).\
    \  If the client supplies the\n        attribute and the Printer object supports\
    \ the attribute, the\n        value of the attribute is used to populate the Job\
    \ object's\n        \"job-k-octets\" Job Description attribute.\n        Note:\
    \ For this attribute and the following two attributes\n        (\"job-impressions\"\
    , and \"job-media-sheets\"), if the client\n        supplies the attribute, but\
    \ the Printer object does not support\n        the attribute, the Printer object\
    \ ignores the client-supplied\n        value.  If the client supplies the attribute\
    \ and the Printer\n        supports the attribute, and the value is within the\
    \ range of the\n        corresponding Printer object's \"xxx-supported\" attribute,\
    \ the\n        Printer object MUST use the value to populate the Job object's\n\
    \        \"xxx\" attribute.  If the client supplies the attribute and the\n  \
    \      Printer supports the attribute, but the value is outside the\n        range\
    \ of the corresponding Printer object's \"xxx-supported\"\n        attribute,\
    \ the Printer object MUST copy the attribute and its\n        value to the Unsupported\
    \ Attributes response group, reject the\n        request, and return the 'client-error-attributes-or-values-not-\n\
    \        supported' status code.  If the client does not supply the\n        attribute,\
    \ the Printer object MAY choose to populate the\n        corresponding Job object\
    \ attribute depending on whether the\n        Printer object supports the attribute\
    \ and is able to calculate\n        or discern the correct value.\n     \"job-impressions\"\
    \ (integer(0:MAX))\n        The client OPTIONALLY supplies this attribute.  The\
    \ Printer\n        object OPTIONALLY supports this attribute and the \"job-\n\
    \        impressions-supported\" attribute (see section 4.4.31).  The\n      \
    \  client supplied \"job-impressions\" operation attribute identifies\n      \
    \  the total size in number of impressions of the document(s) being\n        submitted\
    \ (see section 4.3.18 for the complete semantics).\n        See note under \"\
    job-k-octets\".\n     \"job-media-sheets\" (integer(0:MAX))\n        The client\
    \ OPTIONALLY supplies this attribute.  The Printer\n        object OPTIONALLY\
    \ supports this attribute and the \"job-media-\n        sheets-supported\" attribute\
    \ (see section 4.4.32).  The client\n        supplied \"job-media-sheets\" operation\
    \ attribute identifies the\n        total number of media sheets to be produced\
    \ for this job (see\n        section 4.3.19 for the complete semantics).\n   \
    \     See note under \"job-k-octets\".\n   Group 2: Job Template Attributes\n\
    \        The client OPTIONALLY supplies a set of Job Template attributes\n   \
    \     as defined in section 4.2.  If the client is not supplying any\n       \
    \ Job Template attributes in the request, the client SHOULD omit\n        Group\
    \ 2 rather than sending an empty group.  However, a Printer\n        object MUST\
    \ be able to accept an empty group.\n   Group 3: Document Content\n        The\
    \ client MUST supply the document data to be processed.\n   Note: In addition\
    \ to the MANDATORY parameters required for every\n   operation request, the simplest\
    \ Print-Job Request consists of just\n   the \"attributes-charset\" and \"attributes-natural-language\"\
    \ operation\n   attributes; the \"printer-uri\" target operation attribute; the\n\
    \   Document Content and nothing else.  In this simple case, the Printer\n   object:\n\
    \     - creates a new Job object (the Job object contains a single\n       document),\n\
    \     - stores a generated Job name in the \"job-name\" attribute in the\n   \
    \    natural language and charset requested (see Section 3.1.4.1) (if\n      \
    \ those are supported, otherwise using the Printer object's default\n       natural\
    \ language and charset), and\n     - at job processing time, uses its corresponding\
    \ default value\n       attributes for the supported Job Template attributes that\
    \ were\n       not supplied by the client as IPP attribute or embedded\n     \
    \  instructions in the document data.\n"
- title: 3.2.1.2 Print-Job Response
  contents:
  - "3.2.1.2 Print-Job Response\n       The Printer object MUST return to the client\
    \ the following sets\n       of attributes as part of the Print-Job Response:\n\
    \       Group 1: Operation Attributes\n     Status Message:\n        In addition\
    \ to the REQUIRED status code returned in every\n        response, the response\
    \ OPTIONALLY includes a \"status-message\"\n        (text) operation attribute\
    \ as described in sections 14 and\n        3.1.6.  If the client supplies unsupported\
    \ or conflicting Job\n        Template attributes or values, the Printer object\
    \ MUST reject or\n        accept the Print-Job request depending on the whether\
    \ the client\n        supplied a 'true' or 'false' value for the \"ipp-attribute-\n\
    \        fidelity\" operation attribute.  See the Implementer's Guide\n      \
    \  [ipp-iig] for a complete description of the suggested steps for\n        processing\
    \ a create request.\n     Natural Language and Character Set:\n        The \"\
    attributes-charset\" and \"attributes-natural-language\"\n        attributes as\
    \ described in section 3.1.4.2.\n   Group 2: Unsupported Attributes\n        This\
    \ is a set of Operation and Job Template attributes supplied\n        by the client\
    \ (in the request) that are not supported by the\n        Printer object or that\
    \ conflict with one another (see the\n        Implementer's Guide [ipp-iig]).\
    \  If the Printer object is not\n        returning any Unsupported Attributes\
    \ in the response, the\n        Printer object SHOULD omit Group 2 rather than\
    \ sending an empty\n        group.  However, a client MUST be able to accept an\
    \ empty group.\n        Unsupported attributes fall into three categories:\n \
    \       1. The Printer object does not support the supplied attribute\n      \
    \     (no matter what the attribute syntax or value).\n        2. The Printer\
    \ object does support the attribute, but does not\n           support some or\
    \ all of the particular attribute syntaxes or\n           values supplied by the\
    \ client (i.e., the Printer object does\n           not have those attribute syntaxes\
    \ or values in its\n           corresponding \"xxx-supported\" attribute).\n \
    \       3. The Printer object does support the attributes and values\n       \
    \    supplied, but the particular values are in conflict with one\n          \
    \ another, because they violate a constraint, such as not being\n           able\
    \ to staple transparencies.\n        In the case of an unsupported attribute name,\
    \ the Printer object\n        returns the client-supplied attribute with a substituted\
    \ \"out-\n        of-band\" value of 'unsupported' indicating no support for the\n\
    \        attribute itself (see the beginning of section 4.1).\n        In the\
    \ case of a supported attribute with one or more\n        unsupported attribute\
    \ syntaxes or values, the Printer object\n        simply returns the client-supplied\
    \ attribute with the\n        unsupported attribute syntaxes or values as supplied\
    \ by the\n        client.  This indicates support for the attribute, but no\n\
    \        support for that particular attribute syntax or value.  If the\n    \
    \    client supplies a multi-valued attribute with more than one\n        value\
    \ and the Printer object supports the attribute but only\n        supports a subset\
    \ of the client-supplied attribute syntaxes or\n        values, the Printer object\
    \ MUST return only those attribute\n        syntaxes or values that are unsupported.\n\
    \        In the case of two (or more) supported attribute values that are\n  \
    \      in conflict with one another (although each is supported\n        independently,\
    \ the values conflict when requested together\n        within the same job), the\
    \ Printer object MUST return all the\n        values that it ignores or substitutes\
    \ to resolve the conflict,\n        but not any of the values that it is still\
    \ using.  The choice\n        for exactly how to resolve the conflict is implementation\n\
    \        dependent.  See The Implementer's Guide [ipp-iig] for an\n        example.\n\
    \        In these three cases, the value of the \"ipp-attribute-fidelity\"\n \
    \       supplied by the client does not affect what the Printer object\n     \
    \   returns.  The value of \"ipp-attribute-fidelity\" only affects\n        whether\
    \ the Print-Job operation is accepted or rejected.  If the\n        job is accepted,\
    \ the client may query the job using the Get-\n        Job-Attributes operation\
    \ requesting the unsupported attributes\n        that were returned in the create\
    \ response to see which\n        attributes were ignored (not stored on the Job\
    \ object) and which\n        attributes were stored with other (substituted) values.\n\
    \   Group 3: Job Object Attributes\n     \"job-uri\" (uri):\n        The Printer\
    \ object MUST return the Job object's URI by returning\n        the contents of\
    \ the REQUIRED \"job-uri\" Job object attribute.\n        The client uses the\
    \ Job object's URI when directing operations\n        at the Job object.  The\
    \ Printer object always uses its\n        configured security policy when creating\
    \ the new URI.  However,\n        if the Printer object supports more than one\
    \ URI, the Printer\n        object also uses information about which URI was used\
    \ in the\n        Print-Job Request to generated the new URI so that the new URI\n\
    \        references the correct access channel.  In other words, if the\n    \
    \    Print-Job Request comes in over a secure channel, the Printer\n        object\
    \ MUST generate a Job URI that uses the secure channel as\n        well.\n   \
    \  \"job-id\" (integer(1:MAX)):\n        The Printer object MUST return the Job\
    \ object's Job ID by\n        returning the REQUIRED \"job-id\" Job object attribute.\
    \  The\n        client uses this \"job-id\" attribute in conjunction with the\n\
    \        \"printer-uri\" attribute used in the Print-Job Request when\n      \
    \  directing Job operations at the Printer object.\n     \"job-state\":\n    \
    \    The Printer object MUST return the Job object's REQUIRED \"job-\n       \
    \ state\" attribute. The value of this attribute (along with the\n        value\
    \ of the next attribute \"job-state-reasons\") is taken from a\n        \"snapshot\"\
    \ of the new Job object at some meaningful point in\n        time (implementation\
    \ defined) between when the Printer object\n        receives the Print-Job Request\
    \ and when the Printer object\n        returns the response.\n     \"job-state-reasons\"\
    :\n        The Printer object OPTIONALLY returns the Job object's OPTIONAL\n \
    \       \"job-state-reasons\" attribute.  If the Printer object supports\n   \
    \     this attribute then it MUST be returned in the response.  If\n        this\
    \ attribute is not returned in the response, the client can\n        assume that\
    \ the \"job-state-reasons\" attribute is not supported\n        and will not be\
    \ returned in a subsequent Job object query.\n     \"job-state-message\":\n  \
    \      The Printer object OPTIONALLY returns the Job object's OPTIONAL\n     \
    \   \"job-state-message\" attribute.  If the Printer object supports\n       \
    \ this attribute then it MUST be returned in the response.  If\n        this attribute\
    \ is not returned in the response, the client can\n        assume that the \"\
    job-state-message\" attribute is not supported\n        and will not be returned\
    \ in a subsequent Job object query.\n     \"number-of-intervening-jobs\":\n  \
    \      The Printer object OPTIONALLY returns the Job object's OPTIONAL\n     \
    \   \"number-of-intervening-jobs\" attribute.  If the Printer object\n       \
    \ supports this attribute then it MUST be returned in the\n        response. \
    \ If this attribute is not returned in the response,\n        the client can assume\
    \ that the \"number-of-intervening-jobs\"\n        attribute is not supported\
    \ and will not be returned in a\n        subsequent Job object query.\n      \
    \  Note: Since any printer state information which affects a job's\n        state\
    \ is reflected in the \"job-state\" and \"job-state-reasons\"\n        attributes,\
    \ it is sufficient to return only these attributes and\n        no specific printer\
    \ status attributes.\n   Note: In addition to the MANDATORY parameters required\
    \ for every\n   operation response, the simplest response consists of the just\
    \ the\n   \"attributes-charset\" and \"attributes-natural-language\" operation\n\
    \   attributes and the \"job-uri\", \"job-id\", and \"job-state\" Job Object\n\
    \   Attributes.  In this simplest case, the status code is \"successful-\n   ok\"\
    \ and there is no \"status-message\" operation attribute.\n"
- title: 3.2.2 Print-URI Operation
  contents:
  - "3.2.2 Print-URI Operation\n   This OPTIONAL operation is identical to the Print-Job\
    \ operation\n   (section 3.2.1) except that a client supplies a URI reference\
    \ to the\n   document data using the \"document-uri\" (uri) operation attribute\
    \ (in\n   Group 1) rather than including the document data itself.  Before\n \
    \  returning the response, the Printer MUST validate that the Printer\n   supports\
    \ the retrieval method (e.g., http, ftp, etc.) implied by the\n   URI, and MUST\
    \ check for valid URI syntax.  If the client-supplied URI\n   scheme is not supported,\
    \ i.e. the value is not in the Printer\n   object's \"referenced-uri-scheme-supported\"\
    \ attribute, the Printer\n   object MUST reject the request and return the 'client-error-uri-\n\
    \   scheme-not-supported' status code.  See The Implementer's Guide\n   [ipp-iig]\
    \ for suggested additional checks.  The Printer NEED NOT\n   follow the reference\
    \ and validate the contents of the reference.\n   If the Printer object supports\
    \ this operation, it MUST support the\n   \"reference-uri-schemes-supported\"\
    \ Printer attribute (see section\n   4.4.24).\n   It is up to the IPP object to\
    \ interpret the URI and subsequently\n   \"pull\" the document from the source\
    \ referenced by the URI string.\n"
- title: 3.2.3 Validate-Job Operation
  contents:
  - "3.2.3 Validate-Job Operation\n   This REQUIRED operation is similar to the Print-Job\
    \ operation\n   (section 3.2.1) except that a client supplies no document data\
    \ and\n   the Printer allocates no resources (i.e., it does not create a new\n\
    \   Job object).  This operation is used only to verify capabilities of a\n  \
    \ printer object against whatever attributes are supplied by the client\n   in\
    \ the Validate-Job request.  By using the Validate-Job operation a\n   client\
    \ can validate that an identical Print-Job operation (with the\n   document data)\
    \ would be accepted. The Validate-Job operation also\n   performs the same security\
    \ negotiation as the Print-Job operation\n   (see section 8), so that a client\
    \ can check that the client and\n   Printer object security requirements can be\
    \ met before performing a\n   Print-Job operation.\n   Note: The Validate-Job\
    \ operation does not accept a \"document-uri\"\n   attribute in order to allow\
    \ a client to check that the same Print-URI\n   operation will be accepted, since\
    \ the client doesn't send the data\n   with the Print-URI operation.  The client\
    \ SHOULD just issue the\n   Print-URI request.\n   The Printer object returns\
    \ the same status codes, Operation\n   Attributes (Group 1) and Unsupported Attributes\
    \ (Group 2) as the\n   Print-Job operation.  However, no Job Object Attributes\
    \ (Group 3) are\n   returned, since no Job object is created.\n"
- title: 3.2.4 Create-Job Operation
  contents:
  - "3.2.4 Create-Job Operation\n   This OPTIONAL operation is similar to the Print-Job\
    \ operation\n   (section 3.2.1) except that in the Create-Job request, a client\
    \ does\n   not supply document data or any reference to document data.  Also,\n\
    \   the client does not supply any of the \"document-name\", \"document-\n   format\"\
    , \"compression\", or \"document-natural-language\" operation\n   attributes.\
    \  This operation is followed by one or more Send-Document\n   or Send-URI operations.\
    \  In each of those operation requests, the\n   client OPTIONALLY supplies the\
    \ \"document-name\", \"document-format\",\n   and \"document-natural-language\"\
    \ attributes for each document in the\n   multi-document Job object.\n   If a\
    \ Printer object supports the Create-Job operation, it MUST also\n   support the\
    \ Send-Document operation and also MAY support the Send-URI\n   operation.\n \
    \  If the Printer object supports this operation, it MUST support the\n   \"multiple-operation-time-out\"\
    \ Printer attribute (see section 4.4.28).\n"
- title: 3.2.5 Get-Printer-Attributes Operation
  contents:
  - "3.2.5 Get-Printer-Attributes Operation\n   This REQUIRED operation allows a client\
    \ to request the values of the\n   attributes of a Printer object.   In the request,\
    \ the client supplies\n   the set of Printer attribute names and/or attribute\
    \ group names in\n   which the requester is interested.  In the response, the\
    \ Printer\n   object returns a corresponding attribute set with the appropriate\n\
    \   attribute values filled in.\n   For Printer objects, the possible names of\
    \ attribute groups are:\n     - 'job-template': all of the Job Template attributes\
    \ that apply to\n       a Printer object (the last two columns of the table in\
    \ Section\n       4.2).\n     - 'printer-description': the attributes specified\
    \ in Section 4.4.\n     - 'all': the special group 'all' that includes all supported\n\
    \       attributes.\n   Since a client MAY request specific attributes or named\
    \ groups, there\n   is a potential that there is some overlap.  For example, if\
    \ a client\n   requests, 'printer-name' and 'all', the client is actually requesting\n\
    \   the \"printer-name\" attribute twice: once by naming it explicitly, and\n\
    \   once by inclusion in the 'all' group.  In such cases, the Printer\n   object\
    \ NEED NOT return each attribute only once in the response even\n   if it is requested\
    \ multiple times.  The client SHOULD NOT request the\n   same attribute in multiple\
    \ ways.\n   It is NOT REQUIRED that a Printer object support all attributes\n\
    \   belonging to a group (since some attributes are OPTIONAL).  However,\n   it\
    \ is REQUIRED that each Printer object support all group names.\n"
- title: 3.2.5.1 Get-Printer-Attributes Request
  contents:
  - "3.2.5.1 Get-Printer-Attributes Request\n   The following sets of attributes are\
    \ part of the Get-Printer-\n   Attributes Request:\n   Group 1: Operation Attributes\n\
    \     Natural Language and Character Set:\n        attributes-charset\" and \"\
    attributes-natural-language\" butes as\n        described in section 3.1.4.1.\n\
    \     Target:\n        The \"printer-uri\" (uri) operation attribute which is\
    \ the target\n        for this operation as described in section 3.1.5.\n    \
    \ Requesting User Name:\n        The \"requesting-user-name\" (name(MAX)) attribute\
    \ SHOULD be\n        supplied by the client as described in section 8.3.\n   \
    \  \"requested-attributes\" (1setOf keyword) :\n        The client OPTIONALLY\
    \ supplies a set of attribute names and/or\n        attribute group names in whose\
    \ values the requester is\n        interested.  The Printer object MUST support\
    \ this attribute.  If\n        the client omits this attribute, the Printer MUST\
    \ respond as if\n        this attribute had been supplied with a value of 'all'.\n\
    \     \"document-format\" (mimeMediaType) :\n        The client OPTIONALLY supplies\
    \ this attribute.  The Printer\n        object MUST support this attribute.  This\
    \ attribute is useful\n        for a Printer object to determine the set of supported\
    \ attribute\n        values that relate to the requested document format.  The\n\
    \        Printer object MUST return the attributes and values that it\n      \
    \  uses to validate a job on a create or Validate-Job operation in\n        which\
    \ this document format is supplied. The Printer object\n        SHOULD return\
    \ only (1) those attributes that are supported for\n        the specified format\
    \ and (2) the attribute values that are\n        supported for the specified document\
    \ format.  By specifying the\n        document format, the client can get the\
    \ Printer object to\n        eliminate the attributes and values that are not\
    \ supported for a\n        specific document format.  For example, a Printer object\
    \ might\n        have multiple interpreters to support both '\n        application/postscript'\
    \ (for PostScript) and 'text/plain' (for\n        text) documents.  However, for\
    \ only one of those interpreters\n        might the Printer object be able to\
    \ support \"number-up\" with\n        values of '1', '2', and '4'.  For the other\
    \ interpreter it might\n        be able to only support \"number-up\" with a value\
    \ of '1'. Thus a\n        client can use the Get-Printer-Attributes operation\
    \ to obtain\n        the attributes and values that will be used to accept/reject\
    \ a\n        create job operation.\n        If the Printer object does not distinguish\
    \ between different\n        sets of supported values for each different document\
    \ format when\n        validating jobs in the create and Validate-Job operations,\
    \ it\n        MUST NOT distinguish between different document formats in the\n\
    \        Get-Printer-Attributes operation. If the Printer object does\n      \
    \  distinguish between different sets of supported values for each\n        different\
    \ document format specified by the client, this\n        specialization applies\
    \ only to the following Printer object\n        attributes:\n       - Printer\
    \ attributes that are Job Template attributes (\"xxx-\n          default\" \"\
    xxx-supported\", and \"xxx-ready\" in the Table in\n          Section 4.2),\n\
    \       - \"pdl-override-supported\",\n       - \"compression-supported\",\n \
    \      - \"job-k-octets-supported\",\n       - \"job-impressions-supported,\n\
    \       - \"job-media-sheets-supported\"\n       - \"printer-driver-installer\"\
    ,\n       - \"color-supported\", and\n       - \"reference-uri-schemes-supported\"\
    \n        The values of all other Printer object attributes (including\n     \
    \   \"document-format-supported\") remain invariant with respect to\n        the\
    \ client supplied document format (except for new Printer\n        description\
    \ attribute as registered according to section 6.2).\n        If the client omits\
    \ this \"document-format\" operation attribute,\n        the Printer object MUST\
    \ respond as if the attribute had been\n        supplied with the value of the\
    \ Printer object's \"document-\n        format-default\" attribute.  It is recommended\
    \ that the client\n        always supply a value for \"document-format\", since\
    \ the Printer\n        object's \"document-format-default\" may be 'application/octet-\n\
    \        stream', in which case the returned attributes and values are\n     \
    \   for the union of the document formats that the Printer can\n        automatically\
    \ sense.  For more details, see the description of\n        the 'mimeMediaType'\
    \ attribute syntax in section 4.1.9.\n        If the client supplies a value for\
    \ the \"document-format\"\n        Operation attribute that is not supported by\
    \ the Printer, i.e.,\n        is not among the values of the Printer object's\
    \ \"document-\n        format-supported\" attribute, the Printer object MUST reject\
    \ the\n        operation and return the 'client-error-document-format-not-\n \
    \       supported' status code.\n"
- title: 3.2.5.2 Get-Printer-Attributes Response
  contents:
  - "3.2.5.2 Get-Printer-Attributes Response\n   The Printer object returns the following\
    \ sets of attributes as part\n   of the Get-Printer-Attributes Response:\n   Group\
    \ 1: Operation Attributes\n     Status Message:\n        In addition to the REQUIRED\
    \ status code returned in every\n        response, the response OPTIONALLY includes\
    \ a \"status-message\"\n        (text) operation attribute as described in section\
    \ 3.1.6.\n     Natural Language and Character Set:\n        The \"attributes-charset\"\
    \ and \"attributes-natural-language\"\n        attributes as described in section\
    \ 3.1.4.2.\n   Group 2: Unsupported Attributes\n        This is a set of Operation\
    \ attributes supplied by the client (in\n        the request) that are not supported\
    \ by the Printer object or\n        that conflict with one another (see sections\
    \ 3.2.1.2 and 16).\n        The response NEED NOT contain the \"requested-attributes\"\
    \n        operation attribute with any supplied values (attribute\n        keywords)\
    \ that were requested by the client but are not\n        supported by the IPP\
    \ object.  If the Printer object is not\n        returning any Unsupported Attributes\
    \ in the response, the\n        Printer object SHOULD omit Group 2 rather than\
    \ sending an empty\n        group.  However, a client MUST be able to accept an\
    \ empty group.\n   Group 3: Printer Object Attributes\n        This is the set\
    \ of requested attributes and their current\n        values.  The Printer object\
    \ ignores (does not respond with) any\n        requested attribute which is not\
    \ supported.  The Printer object\n        MAY respond with a subset of the supported\
    \ attributes and\n        values, depending on the security policy in force. \
    \ However, the\n        Printer object MUST respond with the 'unknown' value for\
    \ any\n        supported attribute (including all REQUIRED attributes) for\n \
    \       which the Printer object does not know the value.  Also the\n        Printer\
    \ object MUST respond with the 'no-value' for any\n        supported attribute\
    \ (including all REQUIRED attributes) for\n        which the system administrator\
    \ has not configured a value.  See\n        the description of the \"out-of-band\"\
    \ values in the beginning of\n        Section 4.1.\n"
- title: 3.2.6 Get-Jobs Operation
  contents:
  - "3.2.6 Get-Jobs Operation\n   This REQUIRED operation allows a client to retrieve\
    \ the list of Job\n   objects belonging to the target Printer object.  The client\
    \ may also\n   supply a list of Job attribute names and/or attribute group names.\
    \  A\n   group of Job object attributes will be returned for each Job object\n\
    \   that is returned.\n   This operation is similar to the Get-Job-Attributes\
    \ operation, except\n   that this Get-Jobs operation returns attributes from possibly\
    \ more\n   than one object (see the description of Job attribute group names in\n\
    \   section 3.3.4).\n"
- title: 3.2.6.1 Get-Jobs Request
  contents:
  - "3.2.6.1 Get-Jobs Request\n   The client submits the Get-Jobs request to a Printer\
    \ object.\n   The following groups of attributes are part of the Get-Jobs Request:\n\
    \   Group 1: Operation Attributes\n     Natural Language and Character Set:\n\
    \        The \"attributes-charset\" and \"attributes-natural-language\"\n    \
    \    attributes as described in section 3.1.4.1.\n     Target:\n        The \"\
    printer-uri\" (uri) operation attribute which is the target\n        for this\
    \ operation as described in section 3.1.5.\n     Requesting User Name:\n     \
    \   The \"requesting-user-name\" (name(MAX)) attribute SHOULD be\n        supplied\
    \ by the client as described in section 8.3.\n     \"limit\" (integer(1:MAX)):\n\
    \        The client OPTIONALLY supplies this attribute.  The Printer\n       \
    \ object MUST support this attribute. It is an integer value that\n        indicates\
    \ a limit to the number of Job objects returned.  The\n        limit is a \"stateless\
    \ limit\" in that if the value supplied by\n        the client is 'N', then only\
    \ the first 'N' jobs are returned in\n        the Get-Jobs Response.  There is\
    \ no mechanism to allow for the\n        next 'M' jobs after the first 'N' jobs.\
    \  If the client does not\n        supply this attribute, the Printer object responds\
    \ with all\n        applicable jobs.\n     \"requested-attributes\" (1setOf keyword):\n\
    \        The client OPTIONALLY supplies this attribute.  The Printer\n       \
    \ object MUST support this attribute.  It is a set of Job\n        attribute names\
    \ and/or attribute groups names in whose values\n        the requester is interested.\
    \  This set of attributes is returned\n        for each Job object that is returned.\
    \  The allowed attribute\n        group names are the same as those defined in\
    \ the Get-Job-\n        Attributes operation in section 3.3.4.  If the client\
    \ does not\n        supply this attribute, the Printer MUST respond as if the\
    \ client\n        had supplied this attribute with two values:  'job-uri' and\
    \ '\n        job-id'.\n     \"which-jobs\" (type2 keyword):\n        The client\
    \ OPTIONALLY supplies this attribute.  The Printer\n        object MUST support\
    \ this attribute.  It indicates which Job\n        objects MUST be returned by\
    \ the Printer object. The values for\n        this attribute are:\n          'completed':\
    \ This includes any Job object whose state is\n             'completed', 'canceled',\
    \ or 'aborted'.\n          'not-completed': This includes any Job object whose\
    \ state is '\n             pending', 'processing', 'processing-stopped', or 'pending-\n\
    \             held'.\n        A Printer object MUST support both values.  However,\
    \ if the\n        mentation does not keep jobs in the 'completed', 'canceled',\
    \ '\n        aborted' states, then it returns no jobs when the 'completed'\n \
    \       value is supplied.\n        If a client supplies some other value, the\
    \ Printer object MUST\n        copy the attribute and the unsupported value to\
    \ the Unsupported\n        Attributes response group, reject the request, and\
    \ return the '\n        client-error-attributes-or-values-not-supported' status\
    \ code.\n        If the client does not supply this attribute, the Printer object\n\
    \        MUST respond as if the client had supplied the attribute with a\n   \
    \     value of 'not-completed'.\n     \"my-jobs\" (boolean):\n        The client\
    \ OPTIONALLY supplies this attribute.  The Printer\n        object MUST support\
    \ this attribute.  It indicates whether all\n        jobs or just the jobs submitted\
    \ by the requesting user of this\n        request  MUST be returned by the Printer\
    \ object.  If the client\n        does not supply this attribute, the Printer\
    \ object MUST respond\n        as if the client had supplied the attribute with\
    \ a value of '\n        false', i.e., all jobs.  The means for authenticating\
    \ the\n        requesting user and matching the jobs is described in section 8.\n"
- title: 3.2.6.2 Get-Jobs Response
  contents:
  - "3.2.6.2 Get-Jobs Response\n   The Printer object returns all of the Job objects\
    \ that match the\n   criteria as defined by the attribute values supplied by the\
    \ client in\n   the request.  It is possible that no Job objects are returned\
    \ since\n   there may literally be no Job objects at the Printer, or there may\
    \ be\n   no Job objects that match the criteria supplied by the client.  If\n\
    \   the client requests any Job attributes at all, there is a set of Job\n   Object\
    \ Attributes returned for each Job object.\n   Group 1: Operation Attributes\n\
    \     Status Message:\n        In addition to the REQUIRED status code returned\
    \ in every\n        response, the response OPTIONALLY includes a \"status-message\"\
    \n        (text) operation attribute as described in sections 14 and\n       \
    \ 3.1.6.\n     Natural Language and Character Set:\n        The \"attributes-charset\"\
    \ and \"attributes-natural-language\"\n        attributes as described in section\
    \ 3.1.4.2.\n   Group 2: Unsupported Attributes\n        This is a set of Operation\
    \ attributes supplied by the client (in\n        the request) that are not supported\
    \ by the Printer object or\n        that conflict with one another (see sections\
    \ 3.2.1.2 and the\n        Implementer's Guide [ipp-iig]).  The response NEED\
    \ NOT contain\n        the \"requested-attributes\" operation attribute with any\
    \ supplied\n        values (attribute keywords) that were requested by the client\n\
    \        but are not supported by the IPP object.  If the Printer object\n   \
    \     is not returning any Unsupported Attributes in the response, the\n     \
    \   Printer object SHOULD omit Group 2 rather than sending an empty\n        group.\
    \  However, a client MUST be able to accept an empty group.\n   Groups 3 to N:\
    \ Job Object Attributes\n        The Printer object responds with one set of Job\
    \ Object\n        Attributes for each returned Job object.  The Printer object\n\
    \        ignores (does not respond with) any requested attribute or value\n  \
    \      which is not supported or which is restricted by the security\n       \
    \ policy in force, including whether the requesting user is the\n        user\
    \ that submitted the job (job originating user) or not (see\n        section 8).\
    \  However, the Printer object MUST respond with the '\n        unknown' value\
    \ for any supported attribute (including all\n        REQUIRED attributes) for\
    \ which the Printer object does not know\n        the value, unless it would violate\
    \ the security policy.  See the\n        description of the \"out-of-band\" values\
    \ in the beginning of\n        Section 4.1.\n        Jobs are returned in the\
    \ following order:\n          - If the client requests all 'completed' Jobs (Jobs\
    \ in the '\n            completed', 'aborted', or 'canceled' states), then the\
    \ Jobs\n            are returned newest to oldest (with respect to actual\n  \
    \          completion time)\n          - If the client requests all 'not-completed'\
    \ Jobs (Jobs in the\n            'pending', 'processing', 'pending-held', and\
    \ 'processing-\n            stopped' states), then Jobs are returned in relative\n\
    \            chronological order of expected time to complete (based on\n    \
    \        whatever scheduling algorithm is configured for the Printer\n       \
    \     object).\n"
- title: 3.3 Job Operations
  contents:
  - "3.3 Job Operations\n   All Job operations are directed at Job objects.  A client\
    \ MUST always\n   supply some means of identifying the Job object in order to\
    \ identify\n   the correct target of the operation.  That job identification MAY\n\
    \   either be a single Job URI or a combination of a Printer URI with a\n   Job\
    \ ID.  The IPP object implementation MUST support both forms of\n   identification\
    \ for every job.\n"
- title: 3.3.1 Send-Document Operation
  contents:
  - "3.3.1 Send-Document Operation\n   This OPTIONAL operation allows a client to\
    \ create a multi-document\n   Job object that is initially \"empty\" (contains\
    \ no documents).  In the\n   Create-Job response, the Printer object returns the\
    \ Job object's URI\n   (the \"job-uri\" attribute) and the Job object's 32-bit\
    \ identifier (the\n   \"job-id\" attribute).  For each new document that the client\
    \ desires\n   to add, the client uses a Send-Document operation.  Each Send-\n\
    \   Document Request contains the entire stream of document data for one\n   document.\n\
    \   Since the Create-Job and the send operations (Send-Document or Send-\n   URI\
    \ operations) that follow could occur over an arbitrarily long\n   period of time\
    \ for a particular job, a client MUST send another send\n   operation within an\
    \ IPP Printer defined minimum time interval after\n   the receipt of the previous\
    \ request for the job.  If a Printer object\n   supports multiple document jobs,\
    \ the Printer object MUST support the\n   \"multiple-operation-time-out\" attribute\
    \ (see section 4.4.28).  This\n   attribute indicates the minimum number of seconds\
    \ the Printer object\n   will wait for the next send operation before taking some\
    \ recovery\n   action.\n   An IPP object MUST recover from an errant client that\
    \ does not supply\n   a send operation, sometime after the minimum time interval\
    \ specified\n   by the Printer object's \"multiple-operation-time-out\" attribute.\n\
    \   Such recovery MAY include any of the following or other recovery\n   actions:\n\
    \     1. Assume that the Job is an invalid job, start the process of\n       \
    \ changing the job state to 'aborted', add the 'aborted-by-system'\n        value\
    \ to the job's \"job-state-reasons\" attribute (see section\n        4.3.8), if\
    \ supported, and clean up all resources associated with\n        the Job.  In\
    \ this case, if another send operation is finally\n        received, the Printer\
    \ responds with an \"client-error-not-\n        possible\" or \"client-error-not-found\"\
    \ depending on whether or\n        not the Job object is still around when the\
    \ send operation\n        finally arrives.\n     2. Assume that the last send\
    \ operation received was in fact the\n        last document (as if the \"last-document\"\
    \ flag had been set to '\n        true'), close the Job object, and proceed to\
    \ process it (i.e.,\n        move the Job's state to 'pending').\n     3. Assume\
    \ that the last send operation received was in fact the\n        last document,\
    \ close the Job, but move it to the 'pending-held'\n        and add the 'submission-interrupted'\
    \ value to the job's \"job-\n        state-reasons\" attribute (see section 4.3.8),\
    \ if supported.\n        This action allows the user or an operator to determine\
    \ whether\n        to continue processing the Job by moving it back to the '\n\
    \        pending' state or to cancel the job.\n   Each implementation is free\
    \ to decide the \"best\" action to take\n   depending on local policy, whether\
    \ any documents have been added,\n   whether the implementation spools jobs or\
    \ not, and/or any other piece\n   of information available to it.  If the choice\
    \ is to abort the Job\n   object, it is possible that the Job object may already\
    \ have been\n   processed to the point that some media sheet pages have been printed.\n"
- title: 3.3.1.1 Send-Document Request
  contents:
  - "3.3.1.1 Send-Document Request\n   The following attribute sets are part of the\
    \ Send-Document Request:\n   Group 1: Operation Attributes\n     Natural Language\
    \ and Character Set:\n        The \"attributes-charset\" and \"attributes-natural-language\"\
    \n        attributes as described in section 3.1.4.1.\n     Target:\n        Either\
    \ (1) the \"printer-uri\" (uri) plus \"job-id\"\n        (integer(1:MAX))or (2)\
    \ the \"job-uri\" (uri) operation\n        attribute(s) which define the target\
    \ for this operation as\n        described in section 3.1.5.\n     Requesting\
    \ User Name:\n        \"requesting-user-name\" (name(MAX)) attribute SHOULD be\
    \ supplied\n        by the client as described in section 8.3.\n     \"document-name\"\
    \ (name(MAX)):\n        The client OPTIONALLY supplies this attribute.  The Printer\n\
    \        object MUST support this attribute.  It contains the client\n       \
    \ supplied document name.  The document name MAY be different than\n        the\
    \ Job name.  It might be helpful, but NEED NOT be unique\n        across multiple\
    \ documents in the same Job.  Typically, the\n        client software automatically\
    \ supplies the document name on\n        behalf of the end user by using a file\
    \ name or an application\n        generated name.  See the description of the\
    \ \"document-name\"\n        operation attribute in the Print-Job Request (section\
    \ 3.2.1.1)\n        for more information about this attribute\n   \"document-format\"\
    \ (mimeMediaType):\n        The client OPTIONALLY supplies this attribute.  The\
    \ Printer\n        object MUST support this attribute.  The value of this attribute\n\
    \        identifies the format of the supplied document data.  If the\n      \
    \  client does not supply this attribute, the Printer object\n        assumes\
    \ that the document data is in the format defined by the\n        Printer object's\
    \ \"document-format-default\" attribute.  If the\n        client supplies this\
    \ attribute, but the value is not supported\n        by the Printer object, i.e.,\
    \ the value is not one of the values\n        of the Printer object's \"document-format-supported\"\
    \ attribute,\n        the Printer object MUST reject the request and return the\
    \ '\n        client-error-document-format-not-supported' status code.\n     \"\
    document-natural-language\" (naturalLanguage):\n        The client OPTIONALLY\
    \ supplies this attribute.  The Printer\n        object OPTIONALLY supports this\
    \ attribute.  This attribute\n        specifies the natural language of the document\
    \ for those\n        document-formats that require a specification of the natural\n\
    \        language in order to image the document unambiguously.  There\n     \
    \   are no particular values required for the Printer object to\n        support.\n\
    \     \"compression\" (type3 keyword)\n        The client OPTIONALLY supplies\
    \ this attribute.  The Printer\n        object OPTIONALLY supports this attribute\
    \ and the \"compression-\n        supported\" attribute (see section 4.4.29).\
    \  The client supplied\n        \"compression\" operation attribute identifies\
    \ the compression\n        algorithm used on the document data.  If the client\
    \ omits this\n        attribute, the Printer object MUST assume that the data\
    \ is not\n        compressed.  If the client supplies the attribute and the\n\
    \        Printer object supports the attribute, the Printer object MUST\n    \
    \    use the corresponding decompression algorithm on the document\n        data.\
    \ If the client supplies this attribute, but the value is\n        not supported\
    \ by the Printer object, i.e., the value is not one\n        of the values of\
    \ the Printer object's \"compression-supported\"\n        attribute, the Printer\
    \ object MUST copy the attribute and its\n        value to the Unsupported Attributes\
    \ response group, reject the\n        request, and return the 'client-error-attributes-or-values-not-\n\
    \        supported' status code.\n     \"last-document\" (boolean):\n        The\
    \ client MUST supply this attribute.  The Printer object MUST\n        support\
    \ this attribute. It is a boolean flag that is set to '\n        true' if this\
    \ is the last document for the Job, 'false'\n        otherwise.\n   Group 2: Document\
    \ Content\n        The client MUST supply the document data if the \"last-document\"\
    \n        flag is set to 'false'.  However, since a client might not know\n  \
    \      that the previous document sent with a Send-Document (or Send-\n      \
    \  URI) operation was the last document (i.e., the \"last-document\"\n       \
    \ attribute was set to 'false'), it is legal to send a Send-\n        Document\
    \ request with no document data where the \"last-document\"\n        flag is set\
    \ to 'true'.  Such a request MUST NOT increment the\n        value of the Job\
    \ object's \"number-of-documents\" attribute, since\n        no real document\
    \ was added to the job.\n"
- title: 3.3.1.2 Send-Document Response
  contents:
  - "3.3.1.2 Send-Document Response\n   The following sets of attributes are part\
    \ of the Send-Document\n   Response:\n   Group 1: Operation Attributes\n     Status\
    \ Message:\n        In addition to the REQUIRED status code returned in every\n\
    \        response, the response OPTIONALLY includes a \"status-message\"\n   \
    \     (text) operation attribute as described in sections 14 and\n        3.1.6.\n\
    \     Natural Language and Character Set:\n        The \"attributes-charset\"\
    \ and \"attributes-natural-language\"\n        attributes as described in section\
    \ 3.1.4.2.\n   Group 2: Unsupported Attributes\n        This is a set of Operation\
    \ attributes supplied by the client (in\n        the request) that are not supported\
    \ by the Printer object or\n        that conflict with one another (see sections\
    \ 3.2.1.2 and the\n        Implementer's Guide [ipp-iig]).  If the Printer object\
    \ is not\n        returning any Unsupported Attributes in the response, the\n\
    \        Printer object SHOULD omit Group 2 rather than sending an empty\n   \
    \     group.  However, a client MUST be able to accept an empty group.\n   Group\
    \ 3: Job Object Attributes\n        This is the same set of attributes as described\
    \ in the Print-Job\n        response (see section 3.2.1.2).\n"
- title: 3.3.2 Send-URI Operation
  contents:
  - "3.3.2 Send-URI Operation\n   This OPTIONAL operation is identical to the Send-Document\
    \ operation\n   (see section 3.3.1) except that a client MUST supply a URI reference\n\
    \   (\"document-uri\" operation attribute) rather than the document data\n   itself.\
    \  If a Printer object supports this operation, clients can use\n   both Send-URI\
    \ or Send-Document operations to add new documents to an\n   existing multi-document\
    \ Job object.  However, if a client needs to\n   indicate that the previous Send-URI\
    \ or Send-Document was the last\n   document,  the client MUST use the Send-Document\
    \ operation with no\n   document data and the \"last-document\" flag set to 'true'\
    \ (rather than\n   using a Send-URI operation with no \"document-uri\" operation\n\
    \   attribute).\n   If a Printer object supports this operation, it MUST also\
    \ support the\n   Print-URI operation (see section 3.2.2).\n   The Printer object\
    \ MUST validate the syntax and URI scheme of the\n   supplied URI before returning\
    \ a response, just as in the Print-URI\n   operation.\n"
- title: 3.3.3 Cancel-Job Operation
  contents:
  - "3.3.3 Cancel-Job Operation\n   This REQUIRED operation allows a client to cancel\
    \ a Print Job from\n   the time the job is created up to the time it is completed,\
    \ canceled,\n   or aborted.  Since a Job might already be printing by the time\
    \ a\n   Cancel-Job is received, some media sheet pages might be printed\n   before\
    \ the job is actually terminated.\n"
- title: 3.3.3.1 Cancel-Job Request
  contents:
  - "3.3.3.1 Cancel-Job Request\n   The following groups of attributes are part of\
    \ the Cancel-Job\n   Request:\n   Group 1: Operation Attributes\n     Natural\
    \ Language and Character Set:\n        The \"attributes-charset\" and \"attributes-natural-language\"\
    \n        attributes as described in section 3.1.4.1.\n     Target:\n        Either\
    \ (1) the \"printer-uri\" (uri) plus \"job-id\"\n        (integer(1:MAX))or (2)\
    \ the \"job-uri\" (uri) operation\n        attribute(s) which define the target\
    \ for this operation as\n        described in section 3.1.5.\n     Requesting\
    \ User Name:\n        The \"requesting-user-name\" (name(MAX)) attribute SHOULD\
    \ be\n        supplied by the client as described in section 8.3.\n     \"message\"\
    \ (text(127)):\n        The client OPTIONALLY supplies this attribute.  The Printer\n\
    \        object OPTIONALLY supports this attribute. It is a message to\n     \
    \   the operator.  This \"message\" attribute is not the same as the\n       \
    \ \"job-message-from-operator\" attribute.  That attribute is used\n        to\
    \ report a message from the operator to the end user that\n        queries that\
    \ attribute.  This \"message\" operation attribute is\n        used to send a\
    \ message from the client to the operator along\n        with the operation request.\
    \  It is an implementation decision of\n        how or where to display this message\
    \ to the operator (if at\n        all).\n"
- title: 3.3.3.2 Cancel-Job Response
  contents:
  - "3.3.3.2 Cancel-Job Response\n   The following sets of attributes are part of\
    \ the Cancel-Job Response:\n   Group 1: Operation Attributes\n     Status Message:\n\
    \        In addition to the REQUIRED status code returned in every\n        response,\
    \ the response OPTIONALLY includes a \"status-message\"\n        (text) operation\
    \ attribute as described in sections 14 and\n        3.1.6.\n        If the job\
    \ is already in the 'completed', 'aborted', or '\n        canceled' state, or\
    \ the 'process-to-stop-point' value is set in\n        the Job's \"job-state-reasons\"\
    \ attribute, the Printer object MUST\n        reject the request and return the\
    \ 'client-error-not-possible'\n        error status code.\n     Natural Language\
    \ and Character Set:\n        The \"attributes-charset\" and \"attributes-natural-language\"\
    \n        attributes as described in section 3.1.4.2.\n   Group 2: Unsupported\
    \ Attributes\n        This is a set of Operation attributes supplied by the client\
    \ (in\n        the request) that are not supported by the Printer object or\n\
    \        that conflict with one another (see section 3.2.1.2 and the\n       \
    \ Implementer's Guide [ipp-iig]).  If the Printer object is not\n        returning\
    \ any Unsupported Attributes in the response, the\n        Printer object SHOULD\
    \ omit Group 2 rather than sending an empty\n        group.  However, a client\
    \ MUST be able to accept an empty group.\n   Once a successful response has been\
    \ sent, the implementation\n   guarantees that the Job will eventually end up\
    \ in the 'canceled'\n   state. Between the time of the Cancel-Job operation is\
    \ accepted and\n   when the job enters the 'canceled' job-state (see section 4.3.7),\
    \ the\n   \"job-state-reasons\" attribute SHOULD contain the 'processing-to-\n\
    \   stop-point' value which indicates to later queries that although the\n   Job\
    \ might still be 'processing', it will eventually end up in the '\n   canceled'\
    \ state, not the 'completed' state.\n"
- title: 3.3.4 Get-Job-Attributes Operation
  contents:
  - "3.3.4 Get-Job-Attributes Operation\n   This REQUIRED operation allows a client\
    \ to request the values of\n   attributes of a Job object and it is almost identical\
    \ to the Get-\n   Printer-Attributes operation (see section 3.2.5).  The only\n\
    \   differences are that the operation is directed at a Job object rather\n  \
    \ than a Printer object, there is no \"document-format\" operation\n   attribute\
    \ used when querying a Job object, and the returned attribute\n   group is a set\
    \ of Job object attributes rather than a set of Printer\n   object attributes.\n\
    \   For Jobs, the possible names of attribute groups are:\n     - 'job-template':\
    \ all of the Job Template attributes that apply to a\n       Job object (the first\
    \ column of the table in Section 4.2).\n     - 'job-description': all of the Job\
    \ Description attributes specified\n       in Section 4.3.\n     - 'all': the\
    \ special group 'all' that includes all supported\n       attributes.\n   Since\
    \ a client MAY request specific attributes or named groups, there\n   is a potential\
    \ that there is some overlap.  For example, if a client\n   requests, 'job-name'\
    \ and 'job-description', the client is actually\n   requesting the \"job-name\"\
    \ attribute once by naming it explicitly, and\n   once by inclusion in the 'job-description'\
    \ group.  In such cases, the\n   Printer object NEED NOT return the attribute\
    \ only once in the\n   response even if it is requested multiple times.  The client\
    \ SHOULD\n   NOT request the same attribute in multiple ways.\n   It is NOT REQUIRED\
    \ that a Job object support all attributes belonging\n   to a group (since some\
    \ attributes are OPTIONAL).  However it is\n   REQUIRED that each Job object support\
    \ all group names.\n"
- title: 3.3.4.1 Get-Job-Attributes Request
  contents:
  - "3.3.4.1 Get-Job-Attributes Request\n   The following groups of attributes are\
    \ part of the Get-Job-Attributes\n   Request when the request is directed at a\
    \ Job object:\n   Group 1: Operation Attributes\n     Natural Language and Character\
    \ Set:\n        The \"attributes-charset\" and \"attributes-natural-language\"\
    \n        attributes as described in section 3.1.4.1.\n     Target:\n        Either\
    \ (1) the \"printer-uri\" (uri) plus \"job-id\"\n        (integer(1:MAX)) or (2)\
    \ the \"job-uri\" (uri) operation\n        attribute(s) which define the target\
    \ for this operation as\n        described in section 3.1.5.\n     Requesting\
    \ User Name:\n        The \"requesting-user-name\" (name(MAX)) attribute SHOULD\
    \ be\n        supplied by the client as described in section 8.3.\n     \"requested-attributes\"\
    \ (1setOf keyword) :\n        The client OPTIONALLY supplies this attribute. \
    \ The IPP object\n        MUST support this attribute.   It is a set of attribute\
    \ names\n        and/or attribute group names in whose values the requester is\n\
    \        interested.  If the client omits this attribute, the IPP object\n   \
    \     MUST respond as if this attribute had been supplied with a value\n     \
    \   of 'all'.\n"
- title: 3.3.4.2 Get-Job-Attributes Response
  contents:
  - "3.3.4.2 Get-Job-Attributes Response\n   The Printer object returns the following\
    \ sets of attributes as part\n   of the Get-Job-Attributes Response:\n   Group\
    \ 1: Operation Attributes\n     Status Message:\n        In addition to the REQUIRED\
    \ status code returned in every\n        response, the response OPTIONALLY includes\
    \ a \"status-message\"\n        (text) operation attribute as described in sections\
    \ 14 and\n        3.1.6.\n     Natural Language and Character Set:\n        The\
    \ \"attributes-charset\" and \"attributes-natural-language\"\n        attributes\
    \ as described in section 3.1.4.2.  The \"attributes-\n        natural-language\"\
    \ MAY be the natural language of the Job object,\n        rather than the one\
    \ requested.\n   Group 2: Unsupported Attributes\n        This is a set of Operation\
    \ attributes supplied by the client (in\n        the request) that are not supported\
    \ by the Printer object or\n        that conflict with one another (see sections\
    \ 3.2.1.2 and the\n        Implementer's Guide [ipp-iig]).  The response NEED\
    \ NOT contain\n        the \"requested-attributes\" operation attribute with any\
    \ supplied\n        values (attribute keywords) that were requested by the client\n\
    \        but are not supported by the IPP object.  If the Printer object\n   \
    \     is not returning any Unsupported Attributes in the response, the\n     \
    \   Printer object SHOULD omit Group 2 rather than sending an empty\n        group.\
    \  However, a client MUST be able to accept an empty group.\n   Group 3: Job Object\
    \ Attributes\n        This is the set of requested attributes and their current\n\
    \        values.  The IPP object ignores (does not respond with) any\n       \
    \ requested attribute or value which is not supported or which is\n        restricted\
    \ by the security policy in force, including whether\n        the requesting user\
    \ is the user that submitted the job (job\n        originating user) or not (see\
    \ section 8).  However, the IPP\n        object MUST respond with the 'unknown'\
    \ value for any supported\n        attribute (including all RED butes) for which\
    \ the IPP object\n        does not know the value, s it would violate the security\
    \ policy.\n        See the description e \"out-of-band\" values in the beginning\
    \ of\n        Section 4.1.\n"
- title: 4. Object Attributes
  contents:
  - "4. Object Attributes\n   This section describes the attributes with their corresponding\n\
    \   attribute syntaxes and values that are part of the IPP model.  The\n   sections\
    \ below show the objects and their associated attributes which\n   are included\
    \ within the scope of this protocol.  Many of these\n   attributes are derived\
    \ from other relevant specifications:\n     - Document Printing Application (DPA)\
    \ [ISO10175]\n     - RFC 1759 Printer MIB [RFC1759]\n   Each attribute is uniquely\
    \ identified in this document using a\n   \"keyword\" (see section 12.2.1) which\
    \ is the name of the attribute.\n   The keyword is included in the section header\
    \ describing that\n   attribute.\n   Note: Not only are keywords used to identify\
    \ attributes, but one of\n   the attribute syntaxes described below is \"keyword\"\
    \ so that some\n   attributes have keyword values.  Therefore, these attributes\
    \ are\n   defined as having an attribute syntax that is a set of keywords.\n"
- title: 4.1 Attribute Syntaxes
  contents:
  - "4.1 Attribute Syntaxes\n   This section defines the basic attribute syntax types\
    \ that all clients\n   and IPP objects MUST be able to accept in responses and\
    \ accept in\n   requests, respectively.  Each attribute description in sections\
    \ 3 and\n   4 includes the name of attribute syntax(es) in the heading (in\n \
    \  parentheses).  A conforming implementation of an attribute MUST\n   include\
    \ the semantics of the attribute syntax(es) so identified.\n   Section 6.3 describes\
    \ how the protocol can be extended with new\n   attribute syntaxes.\n   The attribute\
    \ syntaxes are specified in the following sub-sections,\n   where the sub-section\
    \ heading is the keyword name of the attribute\n   syntax inside the single quotes.\
    \  In operation requests and responses\n   each attribute value MUST be represented\
    \ as one of the attribute\n   syntaxes specified in the sub-section heading for\
    \ the attribute.  In\n   addition, the value of an attribute in a response (but\
    \ not in a\n   request) MAY be one of the \"out-of-band\" values.  Standard\n\
    \   \"out-of-band\" values are:\n     'unknown': The attribute is supported by\
    \ the IPP object, but the\n        value is unknown to the IPP object for some\
    \ reason.\n     'unsupported': The attribute is unsupported by the IPP object.\
    \  This\n        value MUST be returned only as the value of an attribute in the\n\
    \        Unsupported Attributes Group.\n     'no-value': The attribute is supported\
    \ by the Printer object, but\n        the system administrator has not yet configured\
    \ a value.\n   The Encoding and Transport specification [RFC2565] defines mechanisms\n\
    \   for passing \"out-of-band\" values.  All attributes in a request MUST\n  \
    \ have one or more values as defined in Sections 4.2 to 4.4.  Thus\n   clients\
    \ MUST NOT supply attributes with \"out-of-band\" values.  All\n   attribute in\
    \ a response MUST have one or more values as defined in\n   Sections 4.2 to 4.4\
    \ or a single \"out-of-band\" value.\n   Most attributes are defined to have a\
    \ single attribute syntax.\n   However, a few attributes (e.g., \"job-sheet\"\
    , \"media\", \"job-hold-\n   until\") are defined to have several attribute syntaxes,\
    \ depending on\n   the value.  These multiple attribute syntaxes are separated\
    \ by the\n   \"|\" character in the sub-section heading to indicate the choice.\n\
    \   Since each value MUST be tagged as to its attribute syntax in the\n   protocol,\
    \ a single-valued attribute instance may have any one of its\n   attribute syntaxes\
    \ and a multi-valued attribute instance may have a\n   mixture of its defined\
    \ attribute syntaxes.\n"
- title: 4.1.1 'text'
  contents:
  - "4.1.1 'text'\n   A text attribute is an attribute whose value is a sequence of\
    \ zero or\n   more characters encoded in a maximum of 1023 ('MAX') octets.  MAX\
    \ is\n   the maximum length for each value of any text attribute.  However, if\n\
    \   an attribute will always contain values whose maximum length is much\n   less\
    \ than MAX, the definition of that attribute will include a\n   qualifier that\
    \ defines the maximum length for values of that\n   attribute.  For example: the\
    \ \"printer-location\" attribute is\n   specified as \"printer-location (text(127))\"\
    .  In this case, text\n   values for \"printer-location\" MUST NOT exceed 127\
    \ octets; if supplied\n   with a longer text string via some external interface\
    \ (other than the\n   protocol), implementations are free to truncate to this\
    \ shorter\n   length limitation.\n   In this specification, all text attributes\
    \ are defined using the '\n   text' syntax.  However, 'text' is used only for\
    \ brevity; the formal\n   interpretation of 'text' is: 'textWithoutLanguage |\n\
    \   textWithLanguage'.  That is, for any attribute defined in this\n   specification\
    \ using the 'text' attribute syntax, all IPP objects and\n   clients MUST support\
    \ both the 'textWithoutLanguage' and '\n   textWithLanguage' attribute syntaxes.\
    \  However, in actual usage and\n   protocol execution, objects and clients accept\
    \ and return only one of\n   the two syntax per attribute.  The syntax 'text'\
    \ never appears \"on-\n   the-wire\".\n   Both 'textWithoutLanguage' and 'textWithLanguage'\
    \ are needed to\n   support the real world needs of interoperability between sites\
    \ and\n   systems that use different natural languages as the basis for human\n\
    \   communication.  Generally, one natural language applies to all text\n   attributes\
    \ in a given request or response. The language is indicated\n   by the \"attributes-natural-language\"\
    \ operation attribute defined in\n   section 3.1.4 or \"attributes-natural-language\"\
    \ job attribute defined\n   in section 4.3.24, and there is no need to identify\
    \ the natural\n   language for each text string on a value-by-value basis.  In\
    \ these\n   cases, the attribute syntax 'textWithoutLanguage' is used for text\n\
    \   attributes.  In other cases, the client needs to supply or the\n   Printer\
    \ object needs to return a text value in a natural language\n   that is different\
    \ from the rest of the text values in the request or\n   response.  In these cases,\
    \ the client or Printer object uses the\n   attribute syntax 'textWithLanguage'\
    \ for text attributes (this is the\n   Natural Language Override mechanism described\
    \ in section 3.1.4).\n   The 'textWithoutLanguage' and 'textWithLanguage' attribute\
    \ syntaxes\n   are described in more detail in the following sections.\n"
- title: 4.1.1.1 'textWithoutLanguage'
  contents:
  - "4.1.1.1 'textWithoutLanguage'\n   The 'textWithoutLanguage' syntax indicates\
    \ a value that is sequence\n   of zero or more characters.  Text strings are encoded\
    \ using the rules\n   of some charset.  The Printer object MUST support the UTF-8\
    \ charset\n   [RFC2279] and MAY support additional charsets to represent 'text'\n\
    \   values, provided that the charsets are registered with IANA [IANA-\n   CS].\
    \  See Section 4.1.7 for the specification of the 'charset'\n   attribute syntax,\
    \ including restricted semantics and examples of\n   charsets.\n"
- title: 4.1.1.2 'textWithLanguage'
  contents:
  - "4.1.1.2 'textWithLanguage'\n   The 'textWithLanguage' attribute syntax is a compound\
    \ attribute\n   syntax consisting of two parts: a 'textWithoutLanguage' part plus\
    \ an\n   additional 'naturalLanguage' (see section 4.1.8) part that overrides\n\
    \   the natural language in force.  The 'naturalLanguage' part explicitly\n  \
    \ identifies the natural language that applies to the text part of that\n   value\
    \ and that value alone.  For any give text attribute, the '\n   textWithoutLanguage'\
    \ part is limited to the maximum length defined\n   for that attribute, but the\
    \ 'naturalLanguage' part is always limited\n   to 63 octets. Using the 'textWithLanguage'\
    \ attribute syntax rather\n   than the normal 'textWithoutLanguage' syntax is\
    \ the so-called Natural\n   Language Override mechanism and MUST be supported\
    \ by all IPP objects\n   and clients.\n   If the attribute is multi-valued (1setOf\
    \ text), then the '\n   textWithLanguage' attribute syntax MUST be used to explicitly\
    \ specify\n   each attribute value whose natural language needs to be overridden.\n\
    \   Other values in a multi-valued 'text' attribute in a request or a\n   response\
    \ revert to the natural language of the operation attribute.\n   In a create request,\
    \ the Printer object MUST accept and store with\n   the Job object any natural\
    \ language in the \"attributes-natural-\n   language\" operation attribute, whether\
    \ the Printer object supports\n   that natural language or not.  Furthermore,\
    \ the Printer object MUST\n   accept and store any 'textWithLanguage' attribute\
    \ value, whether the\n   Printer object supports that natural language or not.\
    \  These\n   requirements are independent of the value of the \"ipp-attribute-\n\
    \   fidelity\" operation attribute that the client MAY supply.\n   Example: If\
    \ the client supplies the \"attributes-natural-language\"\n   operation attribute\
    \ with the value: 'en' indicating English, but the\n   value of the \"job-name\"\
    \ attribute is in French, the client MUST use\n   the 'textWithLanguage' attribute\
    \ syntax with the following two\n   values:\n     'fr': Natural Language Override\
    \ indicating French\n     'Rapport Mensuel': the job name in French\n   See the\
    \ Encoding and Transport document [RFC2565] for a detailed\n   example of the\
    \ 'textWithLanguage' attribute syntax.\n"
- title: 4.1.2 'name'
  contents:
  - "4.1.2 'name'\n   This syntax type is used for user-friendly strings, such as\
    \ a Printer\n   name, that, for humans, are more meaningful than identifiers.\
    \  Names\n   are never translated from one natural language to another.  The '\n\
    \   name' attribute syntax is essentially the same as 'text', including\n   the\
    \ REQUIRED support of UTF-8 except that the sequence of characters\n   is limited\
    \ so that its encoded form MUST NOT exceed 255 (MAX) octets.\n   Also like 'text',\
    \ 'name' is really an abbreviated notation for either\n   'nameWithoutLanguage'\
    \ or 'nameWithLanguage'.  That is, all IPP\n   objects and clients MUST support\
    \ both the 'nameWithoutLanguage' and '\n   nameWithLanguage' attribute syntaxes.\
    \  However, in actual usage and\n   protocol execution, objects and clients accept\
    \ and return only one of\n   the two syntax per attribute.  The syntax 'name'\
    \ never appears \"on-\n   the-wire\".\n   Note: Only the 'text' and 'name' attribute\
    \ syntaxes permit the\n   Natural Language Override mechanism.\n   Some attributes\
    \ are defined as 'type3 keyword | name'.  These\n   attributes support values\
    \ that are either type3 keywords or names.\n   This dual-syntax mechanism enables\
    \ a site administrator to extend\n   these attributes to legally include values\
    \ that are locally defined\n   by the site administrator.  Such names are not\
    \ registered with IANA.\n"
- title: 4.1.2.1 'nameWithoutLanguage'
  contents:
  - "4.1.2.1 'nameWithoutLanguage'\n   The 'nameWithoutLanguage' syntax indicates\
    \ a value that is sequence\n   of zero or more characters so that its encoded\
    \ form does not exceed\n   MAX octets.\n"
- title: 4.1.2.2 'nameWithLanguage'
  contents:
  - "4.1.2.2 'nameWithLanguage'\n   The 'nameWithLanguage' attribute syntax is a compound\
    \ attribute\n   syntax consisting of two parts: a 'nameWithoutLanguage' part plus\
    \ an\n   additional 'naturalLanguage' (see section 4.1.8) part that overrides\n\
    \   the natural language in force.  The 'naturalLanguage' part explicitly\n  \
    \ identifies the natural language that applies to that name value and\n   that\
    \ name value alone.\n   The 'nameWithLanguage' attribute syntax behaves the same\
    \ as the '\n   textWithLanguage' syntax.  If a name is in a language that is\n\
    \   different than the rest of the object or operation, then this '\n   nameWithLanguage'\
    \ syntax is used rather than the generic '\n   nameWithoutLanguage' syntax.\n\
    \   Example: If the client supplies the \"attributes-natural-language\"\n   operation\
    \ attribute with the value: 'en' indicating English, but the\n   \"printer-name\"\
    \ attribute is in German, the client MUST use the '\n   nameWithLanguage' attribute\
    \ syntax as follows:\n     'de':  Natural Language Override indicating German\n\
    \     'Farbdrucker':  the Printer name in German\n"
- title: 4.1.2.3 Matching 'name' attribute values
  contents:
  - "4.1.2.3 Matching 'name' attribute values\n   For purposes of matching two 'name'\
    \ attribute values for equality,\n   such as in job validation (where a client-supplied\
    \ value for\n   attribute \"xxx\" is checked to see if the value is among the\
    \ values of\n   the Printer object's corresponding \"xxx-supported\" attribute),\
    \ the\n   following match rules apply:\n        1. 'keyword' values never match\
    \ 'name' values.\n        2. 'name' (nameWithoutLanguage and nameWithLanguage)\
    \ values\n        match if (1) the name parts match and (2) the Associated\n \
    \       Natural-Language parts (see section 3.1.4.1) match.  The\n        matching\
    \ rules are:\n             a. the name parts match if the two names are identical\n\
    \             character by character, except it is RECOMMENDED that case\n   \
    \          be ignored.  For example: 'Ajax-letter-head-white' MUST\n         \
    \    match 'Ajax-letter-head-white' and SHOULD match 'ajax-\n             letter-head-white'\
    \ and 'AJAX-LETTER-HEAD-WHITE'.\n             b. the Associated Natural-Language\
    \ parts match if the\n             shorter of the two meets the syntactic requirements\
    \ of RFC\n             1766 [RFC1766] and matches byte for byte with the longer.\n\
    \             For example, 'en' matches 'en', 'en-us' and 'en-gb', but\n     \
    \        matches neither 'fr' nor 'e'.\n"
- title: 4.1.3 'keyword'
  contents:
  - "4.1.3 'keyword'\n   The 'keyword' attribute syntax is a sequence of characters,\
    \ length: 1\n   to 255, containing only the US-ASCII [ASCII] encoded values for\n\
    \   lowercase letters (\"a\" - \"z\"), digits (\"0\" - \"9\"), hyphen (\"-\"),\
    \ dot\n   (\".\"), and underscore (\"_\").  The first character MUST be a lowercase\n\
    \   letter.  Furthermore, keywords MUST be in U.S. English.\n   This syntax type\
    \ is used for enumerating semantic identifiers of\n   entities in the abstract\
    \ protocol, i.e., entities identified in this\n   document.  Keywords are used\
    \ as attribute names or values of\n   attributes.  Unlike 'text' and 'name' attribute\
    \ values, 'keyword'\n   values MUST NOT use the Natural Language Override mechanism,\
    \ since\n   they MUST always be US-ASCII and U.S. English.\n   Keywords are for\
    \ use in the protocol.  A user interface will likely\n   provide a mapping between\
    \ protocol keywords and displayable user-\n   friendly words and phrases which\
    \ are localized to the natural\n   language of the user.  While the keywords specified\
    \ in this document\n   MAY be displayed to users whose natural language is U.S.\
    \ English,\n   they MAY be mapped to other U.S. English words for U.S. English\n\
    \   users, since the user interface is outside the scope of this\n   document.\n\
    \   In the definition for each attribute of this syntax type, the full\n   set\
    \ of defined keyword values for that attribute are listed.\n   When a keyword\
    \ is used to represent an attribute (its name), it MUST\n   be unique within the\
    \ full scope of all IPP objects and attributes.\n   When a keyword is used to\
    \ represent a value of an attribute, it MUST\n   be unique just within the scope\
    \ of that attribute.  That is, the same\n   keyword MUST NOT be used for two different\
    \ values within the same\n   attribute to mean two different semantic ideas. \
    \ However, the same\n   keyword MAY be used across two or more attributes, representing\n\
    \   different semantic ideas for each attribute.  Section 6.1 describes\n   how\
    \ the protocol can be extended with new keyword values.  Examples\n   of attribute\
    \ name keywords:\n     \"job-name\"\n     \"attributes-charset\"\n   Note:  This\
    \ document uses \"type1\", \"type2\", and \"type3\" prefixes to\n   the \"keyword\"\
    \ basic syntax to indicate different levels of review for\n   extensions (see\
    \ section 6.1).\n"
- title: 4.1.4 'enum'
  contents:
  - "4.1.4 'enum'\n   The 'enum' attribute syntax is an enumerated integer value that\
    \ is in\n   the range from 1 to 2**31 - 1 (MAX).   Each value has an associated\
    \ '\n   keyword' name.  In the definition for each attribute of this syntax\n\
    \   type, the full set of possible values for that attribute are listed.\n   This\
    \ syntax type is used for attributes for which there are enum\n   values assigned\
    \ by other standards, such as SNMP MIBs.  A number of\n   attribute enum values\
    \ in this specification are also used for\n   corresponding attributes in other\
    \ standards [RFC1759].  This syntax\n   type is not used for attributes to which\
    \ the system administrator may\n   assign values.  Section 6.1 describes how the\
    \ protocol can be\n   extended with new enum values.\n   Enum values are for use\
    \ in the protocol.  A user interface will\n   provide a mapping between protocol\
    \ enum values and displayable user-\n   friendly words and phrases which are localized\
    \ to the natural\n   language of the user.  While the enum symbols specified in\
    \ this\n   document MAY be displayed to users whose natural language is U.S.\n\
    \   English, they MAY be mapped to other U.S. English words for U.S.\n   English\
    \ users, since the user interface is outside the scope of this\n   document.\n\
    \   Note: SNMP MIBs use '2' for 'unknown' which corresponds to the IPP\n   \"\
    out-of-band\" value 'unknown'.  See the description of the \"out-of-\n   band\"\
    \ values at the beginning of Section 4.1.  Therefore, attributes\n   of type 'enum'\
    \ start at '3'.\n   Note:  This document uses \"type1\", \"type2\", and \"type3\"\
    \ prefixes to\n   the \"enum\" basic syntax to indicate different levels of review\
    \ for\n   extensions (see section 6.1).\n"
- title: 4.1.5 'uri'
  contents:
  - "4.1.5 'uri'\n   The 'uri' attribute syntax is any valid Uniform Resource Identifier\n\
    \   or URI [RFC2396].  Most often, URIs are simply Uniform Resource\n   Locators\
    \ or URLs.  The maximum length of URIs used as values of IPP\n   attributes is\
    \ 1023 octets.  Although most other IPP attribute syntax\n   types allow for only\
    \ lower-cased values, this attribute syntax type\n   conforms to the case-sensitive\
    \ and case-insensitive rules specified\n   in [RFC2396].\n"
- title: 4.1.6 'uriScheme'
  contents:
  - "4.1.6 'uriScheme'\n   The 'uriScheme' attribute syntax is a sequence of characters\n\
    \   representing a URI scheme according to RFC 2396 [RFC2396].  Though\n   RFC\
    \ 2396 requires that the values be case-insensitive, IPP requires\n   all lower\
    \ case values in IPP attributes to simplify comparing by IPP\n   clients and Printer\
    \ objects.  Standard values for this syntax type\n   are the following keywords:\n\
    \     'http':  for HTTP schemed URIs (e.g., \"http:...\")\n     'https':  for\
    \ use with HTTPS schemed URIs (e.g., \"https:...\")\n        (not on IETF standards\
    \ track)\n     'ftp': for FTP schemed URIs (e.g., \"ftp:...\")\n     'mailto':\
    \ for SMTP schemed URIs (e.g., \"mailto:...\")\n     'file': for file schemed\
    \ URIs (e.g., \"file:...\")\n   A Printer object MAY support any URI 'scheme'\
    \ that has been\n   registered with IANA [IANA-MT]. The maximum length of URI\
    \ 'scheme'\n   values used to represent IPP attribute values is 63 octets.\n"
- title: 4.1.7 'charset'
  contents:
  - "4.1.7 'charset'\n   The 'charset' attribute syntax is a standard identifier for\
    \ a\n   charset.  A charset is a coded character set and encoding scheme.\n  \
    \ Charsets are used for labeling certain document contents and 'text'\n   and\
    \ 'name' attribute values.  The syntax and semantics of this\n   attribute syntax\
    \ are specified in RFC 2046 [RFC2046] and contained in\n   the IANA character-set\
    \ Registry [IANA-CS] according to the IANA\n   procedures [RFC2278].  Though RFC\
    \ 2046 requires that the values be\n   case-insensitive US-ASCII, IPP requires\
    \ all lower case values in IPP\n   attributes to simplify comparing by IPP clients\
    \ and Printer objects.\n   When a character-set in the IANA registry has more\
    \ than one name\n   (alias), the name labeled as \"(preferred MIME name)\", if\
    \ present,\n   MUST be used.\n   The maximum length of 'charset' values used to\
    \ represent IPP\n   attribute values is 63 octets.\n   Some examples are:\n  \
    \   'utf-8':  ISO 10646 Universal Multiple-Octet Coded Character Set\n       \
    \ (UCS) represented as the UTF-8 [RFC2279] transfer encoding\n        scheme in\
    \ which US-ASCII is a subset charset.\n     'us-ascii':  7-bit American Standard\
    \ Code for Information\n        Interchange (ASCII), ANSI X3.4-1986 [ASCII]. \
    \ That standard\n        defines US-ASCII, but RFC 2045 [RFC2045] eliminates most\
    \ of the\n        control characters from conformant usage in MIME and IPP.\n\
    \     'iso-8859-1':  8-bit One-Byte Coded Character Set, Latin Alphabet\n    \
    \    Nr 1 [ISO8859-1].  That standard defines a coded character set\n        that\
    \ is used by Latin languages in the Western Hemisphere and\n        Western Europe.\
    \  US-ASCII is a subset charset.\n     'iso-10646-ucs-2':  ISO 10646 Universal\
    \ Multiple-Octet Coded\n        Character Set (UCS) represented as two octets\
    \ (UCS-2), with the\n        high order octet of each pair coming first (so-called\
    \ Big Endian\n        integer).\n   Some attribute descriptions MAY place additional\
    \ requirements on\n   charset values that may be used, such as REQUIRED values\
    \ that MUST be\n   supported or additional restrictions, such as requiring that\
    \ the\n   charset have US-ASCII as a subset charset.\n"
- title: 4.1.8 'naturalLanguage'
  contents:
  - "4.1.8 'naturalLanguage'\n   The 'naturalLanguage' attribute syntax is a standard\
    \ identifier for a\n   natural language and optionally a country.  The values\
    \ for this\n   syntax type are defined by RFC 1766 [RFC1766].  Though RFC 1766\n\
    \   requires that the values be case-insensitive US-ASCII, IPP requires\n   all\
    \ lower case to simplify comparing by IPP clients and Printer\n   objects.  Examples\
    \ include:\n     'en':  for English\n     'en-us': for US English\n     'fr':\
    \ for French\n     'de':  for German\n   The maximum length of 'naturalLanguage'\
    \ values used to represent IPP\n   attribute values is 63 octets.\n"
- title: 4.1.9 'mimeMediaType'
  contents:
  - "4.1.9 'mimeMediaType'\n   The 'mimeMediaType' attribute syntax is the Internet\
    \ Media Type\n   (sometimes called MIME type) as defined by RFC 2046 [RFC2046]\
    \ and\n   registered according to the procedures of RFC 2048 [RFC2048] for\n \
    \  identifying a document format.  The value MAY include a charset\n   parameter,\
    \ depending on the specification of the Media Type in the\n   IANA Registry [IANA-MT].\
    \  Although most other IPP syntax types allow\n   for only lower-cased values,\
    \ this syntax type allows for mixed-case\n   values which are case-insensitive.\n\
    \   Examples are:\n     'text/html': An HTML document\n     'text/plain': A plain\
    \ text document in US-ASCII (RFC 2046 indicates\n        that in the absence of\
    \ the charset parameter MUST mean US-ASCII\n        rather than simply unspecified)\
    \ [RFC2046].\n     'text/plain; charset=US-ASCII':  A plain text document in US-ASCII\n\
    \        [52, 56].\n     'text/plain; charset=ISO-8859-1':  A plain text document\
    \ in ISO\n        8859-1 (Latin 1) [ISO8859-1].\n     'text/plain; charset=utf-8':\
    \  A plain text document in ISO 10646\n        represented as UTF-8 [RFC2279]\n\
    \     'text/plain, charset=iso-10646-ucs-2':  A plain text document in\n     \
    \   ISO 10646 represented in two octets (UCS-2) [ISO10646-1]\n     'application/postscript':\
    \  A PostScript document [RFC2046]\n     'application/vnd.hp-PCL':  A PCL document\
    \ [IANA-MT] (charset escape\n        sequence embedded in the document data)\n\
    \     'application/octet-stream':  Auto-sense - see below\n   One special type\
    \ is 'application/octet-stream'.  If the Printer\n   object supports this value,\
    \ the Printer object MUST be capable of\n   auto-sensing the format of the document\
    \ data.  If the Printer\n   object's default value attribute \"document-format-default\"\
    \ is set to\n   'application/octet-stream', the Printer object not only supports\n\
    \   auto-sensing of the document format, but will depend on the result of\n  \
    \ applying its auto-sensing when the client does not supply the\n   \"document-format\"\
    \ attribute.  If the client supplies a document\n   format value, the Printer\
    \ MUST rely on the supplied attribute, rather\n   than trust its auto-sensing\
    \ algorithm.  To summarize:\n     1. If the client does not supply a document\
    \ format value, the\n        Printer MUST rely on its default value setting (which\
    \ may be '\n        application/octet-stream' indicating an auto-sensing mechanism).\n\
    \     2. If the client supplies a value other than 'application/octet-\n     \
    \   stream', the client is supplying valid information about the\n        format\
    \ of the document data and the Printer object MUST trust\n        the client supplied\
    \ value more than the outcome of applying an\n        automatic format detection\
    \ mechanism.  For example, the client\n        may be requesting the printing\
    \ of a PostScript file as a '\n        text/plain' document.  The Printer object\
    \ MUST print a text\n        representation of the PostScript commands rather\
    \ than interpret\n        the stream of PostScript commands and print the result.\n\
    \     3. If the client supplies a value of 'application/octet-stream',\n     \
    \   the client is indicating that the Printer object MUST use its\n        auto-sensing\
    \ mechanism on the client supplied document data\n        whether auto-sensing\
    \ is the Printer object's default or not.\n   Note:  Since the auto-sensing algorithm\
    \ is probabilistic, if the\n   client requests both auto-sensing (\"document-format\"\
    \ set to '\n   application/octet-stream') and true fidelity (\"ipp-attribute-\n\
    \   fidelity\" set to 'true'), the Printer object might not be able to\n   guarantee\
    \ exactly what the end user intended (the auto-sensing\n   algorithm might mistake\
    \ one document format for another ), but it is\n   able to guarantee that its\
    \ auto-sensing mechanism be used.\n   The maximum length of a 'mimeMediaType'\
    \ value to represent IPP\n   attribute values is 255 octets.\n"
- title: 4.1.10 'octetString'
  contents:
  - "4.1.10 'octetString'\n   The 'octetString' attribute syntax is a sequence of\
    \ octets encoded in\n   a maximum of 1023 octets which is indicated in sub-section\
    \ headers\n   using the notation: octetString(MAX).  This syntax type is used\
    \ for\n   opaque data.\n"
- title: 4.1.11 'boolean'
  contents:
  - "4.1.11 'boolean'\n   The 'boolean' attribute syntax has only two values:  'true'\
    \ and '\n   false'.\n"
- title: 4.1.12 'integer'
  contents:
  - "4.1.12 'integer'\n   The 'integer' attribute syntax is an integer value that\
    \ is in the\n   range from -2**31 (MIN) to 2**31 - 1 (MAX).  Each individual\n\
    \   attribute may specify the range constraint explicitly in sub-section\n   headers\
    \ if the range is different from the full range of possible\n   integer values.\
    \  For example:  job-priority (integer(1:100)) for the\n   \"job-priority\" attribute.\
    \  However, the enforcement of that\n   additional constraint is up to the IPP\
    \ objects, not the protocol.\n"
- title: 4.1.13 'rangeOfInteger'
  contents:
  - "4.1.13 'rangeOfInteger'\n   The 'rangeOfInteger' attribute syntax is an ordered\
    \ pair of integers\n   that defines an inclusive range of integer values.  The\
    \ first integer\n   specifies the lower bound and the second specifies the upper\
    \ bound.\n   If a range constraint is specified in the header description for\
    \ an\n   attribute in this document whose attribute syntax is 'rangeOfInteger'\n\
    \   (i.e., 'X:Y' indicating X as a minimum value and Y as a maximum\n   value),\
    \ then the constraint applies to both integers.\n"
- title: 4.1.14 'dateTime'
  contents:
  - "4.1.14 'dateTime'\n   The 'dateTime' attribute syntax is a standard, fixed length,\
    \ 11 octet\n   representation of the \"DateAndTime\" syntax as defined in RFC\
    \ 2579\n   [RFC2579].  RFC 2579 also identifies an 8 octet representation of a\n\
    \   \"DateAndTime\" value, but IPP objects MUST use the 11 octet\n   representation.\
    \  A user interface will provide a mapping between\n   protocol dateTime values\
    \ and displayable user-friendly words or\n   presentation values and phrases \
    \ which are localized to the natural\n   language and date format of the user.\n"
- title: 4.1.15 'resolution'
  contents:
  - "4.1.15 'resolution'\n   The 'resolution' attribute syntax specifies a two-dimensional\n\
    \   resolution in the indicated units.  It consists of 3 values: a cross\n   feed\
    \ direction resolution (positive integer value), a feed direction\n   resolution\
    \ (positive integer value), and a units value.  The\n   semantics of these three\
    \ components are taken from the Printer MIB\n   [RFC1759] suggested values.  That\
    \ is, the cross feed direction\n   component resolution component is the same\
    \ as the\n   prtMarkerAddressabilityXFeedDir object in the Printer MIB, the feed\n\
    \   direction component resolution component is the same as the\n   prtMarkerAddressabilityFeedDir\
    \ in the Printer MIB, and the units\n   component is the same as the prtMarkerAddressabilityUnit\
    \ object in\n   the Printer MIB (namely, '3' indicates dots per inch and '4'\n\
    \   indicates dots per centimeter).  All three values MUST be present\n   even\
    \ if the first two values are the same.  Example:  '300', '600', '\n   3' indicates\
    \ a 300 dpi cross-feed direction resolution, a 600 dpi\n   feed direction resolution,\
    \ since a '3' indicates dots per inch (dpi).\n"
- title: 4.1.16 '1setOf  X'
  contents:
  - "4.1.16 '1setOf  X'\n   The '1setOf  X' attribute syntax is 1 or more values of\
    \ attribute\n   syntax type X.  This syntax type is used for multi-valued attributes.\n\
    \   The syntax type is called '1setOf' rather than just 'setOf' as a\n   reminder\
    \ that the set of values MUST NOT be empty (i.e., a set of\n   size 0).  Sets\
    \ are normally unordered.  However each attribute\n   description of this type\
    \ may specify that the values MUST be in a\n   certain order for that attribute.\n"
- title: 4.2 Job Template Attributes
  contents:
  - "4.2 Job Template Attributes\n   Job Template attributes describe job processing\
    \ behavior.  Support\n   for Job Template attributes by a Printer object is OPTIONAL\
    \ (see\n   section 13.2.3 for a description of support for OPTIONAL attributes).\n\
    \   Also, clients OPTIONALLY supply Job Template attributes in create\n   requests.\n\
    \   Job Template attributes conform to the following rules.  For each Job\n  \
    \ Template attribute called \"xxx\":\n     1. If the Printer object supports \"\
    xxx\" then it MUST support both a\n        \"xxx-default\" attribute (unless there\
    \ is a \"No\" in the table\n        below) and a \"xxx-supported\" attribute.\
    \  If the Printer object\n        doesn't support \"xxx\", then it MUST support\
    \ neither an \"xxx-\n        default\" attribute nor an \"xxx-supported\" attribute,\
    \ and it MUST\n        treat an attribute \"xxx\" supplied by a client as unsupported.\n\
    \        An attribute \"xxx\" may be supported for some document formats\n   \
    \     and not supported for other document formats.  For example, it\n       \
    \ is expected that a Printer object would only support\n        \"orientation-requested\"\
    \ for some document formats (such as '\n        text/plain' or 'text/html') but\
    \ not others (such as '\n        application/postscript').\n     2. \"xxx\" is\
    \ OPTIONALLY supplied by the client in a create request.\n        If \"xxx\" is\
    \ supplied, the client is indicating a desired job\n        processing behavior\
    \ for this Job.  When \"xxx\" is not supplied,\n        the client is indicating\
    \ that the Printer object apply its\n        default job processing behavior at\
    \ job processing time if the\n        document content does not contain an embedded\
    \ instruction\n        indicating an xxx-related behavior.\n        Note: Since\
    \ an administrator MAY change the default value\n        attribute after a Job\
    \ object has been submitted but before it\n        has been processed, the default\
    \ value used by the Printer object\n        at job processing time may be different\
    \ that the default value\n        in effect at job submission time.\n     3. The\
    \ \"xxx-supported\" attribute is a Printer object attribute that\n        describes\
    \ which job processing behaviors are supported by that\n        Printer object.\
    \  A client can query the Printer object to find\n        out what xxx-related\
    \ behaviors are supported by inspecting the\n        returned values of the \"\
    xxx-supported\" attribute.\n        Note: The \"xxx\" in each \"xxx-supported\"\
    \ attribute name is\n        singular, even though an \"xxx-supported\" attribute\
    \ usually has\n        more than one value, such as \"job-sheet-supported\", unless\
    \ the\n        \"xxx\" Job Template attribute is plural, such as \"finishings\"\
    \ or\n        \"sides\".  In such cases the \"xxx-supported\" attribute names\
    \ are:\n        \"finishings-supported\" and \"sides-supported\".\n     4. The\
    \ \"xxx-default\" default value attribute describes what will be\n        done\
    \ at job processing time when no other job processing\n        information is\
    \ supplied by the client (either explicitly as an\n        IPP attribute in the\
    \ create request or implicitly as an embedded\n        instruction within the\
    \ document data).\n   If an application wishes to present an end user with a list\
    \ of\n   supported values from which to choose, the application SHOULD query\n\
    \   the Printer object for its supported value attributes.  The\n   application\
    \ SHOULD also query the default value attributes.  If the\n   application then\
    \ limits selectable values to only those value that\n   are supported, the application\
    \ can guarantee that the values supplied\n   by the client in the create request\
    \ all fall within the set of\n   supported values at the Printer.  When querying\
    \ the Printer, the\n   client MAY enumerate each attribute by name in the Get-Printer-\n\
    \   Attributes Request, or the client MAY just name the \"job-template\"\n   group\
    \ in order to get the complete set of supported attributes (both\n   supported\
    \ and default attributes).\n   The \"finishings\" attribute is an example of a\
    \ Job Template attribute.\n   It can take on a set of values such as 'staple',\
    \ 'punch', and/or '\n   cover'.  A client can query the Printer object for the\
    \ \"finishings-\n   supported\" attribute and the \"finishings-default\" attribute.\
    \  The\n   supported attribute contains a set of supported values.  The default\n\
    \   value attribute contains the finishing value(s) that will be used for\n  \
    \ a new Job if the client does not supply a \"finishings\" attribute in\n   the\
    \ create request and the document data does not contain any\n   corresponding\
    \ finishing instructions.  If the client does supply the\n   \"finishings\" attribute\
    \ in the create request, the IPP object\n   validates the value or values to make\
    \ sure that they are a subset of\n   the supported values identified in the Printer\
    \ object's \"finishings-\n   supported\" attribute.  See section 3.2.1.2.\n  \
    \ The table below summarizes the names and relationships for all Job\n   Template\
    \ attributes. The first column of the table (labeled \"Job\n   Attribute\") shows\
    \ the name and syntax for each Job Template attribute\n   in the Job object. These\
    \ are the attributes that can optionally be\n   supplied by the client in a create\
    \ request.   The last two columns\n   (labeled \"Printer: Default Value Attribute\"\
    \ and \"Printer: Supported\n   Values Attribute\") shows the name and syntax for\
    \ each Job Template\n   attribute in the Printer object (the default value attribute\
    \ and the\n   supported values attribute).  A \"No\" in the table means the Printer\n\
    \   MUST NOT support the attribute (that is, the attribute is simply not\n   applicable).\
    \  For brevity in the table, the 'text' and 'name' entries\n   do not show the\
    \ maximum length for each attribute.\n     +===================+======================+======================+\n\
    \     | Job Attribute     |Printer: Default Value|  Printer: Supported  |\n  \
    \   |                   |   Attribute          |   Values Attribute   |\n    \
    \ +===================+======================+======================+\n     |\
    \ job-priority      | job-priority-default |job-priority-supported|\n     | (integer\
    \ 1:100)   | (integer 1:100)      |(integer 1:100)       |\n     +-------------------+----------------------+----------------------+\n\
    \     | job-hold-until    | job-hold-until-      |job-hold-until-       |\n  \
    \   | (type3 keyword |  |  default             | supported            |\n    \
    \ |    name)          |  (type3 keyword |    |(1setOf               |\n     |\
    \                   |    name)             | type3 keyword | name)|\n     +-------------------+----------------------+----------------------+\n\
    \     | job-sheets        | job-sheets-default   |job-sheets-supported  |\n  \
    \   | (type3 keyword |  | (type3 keyword |     |(1setOf               |\n    \
    \ |    name)          |    name)             | type3 keyword | name)|\n     +-------------------+----------------------+----------------------+\n\
    \     |multiple-document- |multiple-document-    |multiple-document-    |\n  \
    \   | handling          | handling-default     |handling-supported    |\n    \
    \ | (type2 keyword)   | (type2 keyword)      |(1setOf type2 keyword)|\n     +-------------------+----------------------+----------------------+\n\
    \     +===================+======================+======================+\n  \
    \   | Job Attribute     |Printer: Default Value|  Printer: Supported  |\n    \
    \ |                   |   Attribute          |   Values Attribute   |\n     +===================+======================+======================+\n\
    \     | copies            | copies-default       | copies-supported     |\n  \
    \   | (integer (1:MAX)) | (integer (1:MAX))    | (rangeOfInteger      |\n    \
    \ |                   |                      |       (1:MAX))       |\n     +-------------------+----------------------+----------------------+\n\
    \     | finishings        | finishings-default   | finishings-supported |\n  \
    \   |(1setOf type2 enum)|(1setOf type2 enum)   |(1setOf type2 enum)   |\n    \
    \ +-------------------+----------------------+----------------------+\n     |\
    \ page-ranges       | No                   | page-ranges-         |\n     | (1setOf\
    \           |                      | supported (boolean)  |\n     |   rangeOfInteger\
    \  |                      |                      |\n     |        (1:MAX))   |\
    \                      |                      |\n     +-------------------+----------------------+----------------------+\n\
    \     | sides             | sides-default        | sides-supported      |\n  \
    \   | (type2 keyword)   | (type2 keyword)      |(1setOf type2 keyword)|\n    \
    \ +-------------------+----------------------+----------------------+\n     |\
    \ number-up         | number-up-default    | number-up-supported  |\n     | (integer\
    \ (1:MAX)) | (integer (1:MAX))    |(1setOf integer       |\n     |           \
    \        |                      | (1:MAX) |            |\n     |             \
    \      |                      |  rangeOfInteger      |\n     |               \
    \    |                      |   (1:MAX))           |\n     +-------------------+----------------------+----------------------+\n\
    \     | orientation-      |orientation-requested-|orientation-requested-|\n  \
    \   |  requested        |  default             |  supported           |\n    \
    \ |   (type2 enum)    |  (type2 enum)        |  (1setOf type2 enum) |\n     +-------------------+----------------------+----------------------+\n\
    \     | media             | media-default        | media-supported      |\n  \
    \   | (type3 keyword |  | (type3 keyword |     |(1setOf               |\n    \
    \ |    name)          |    name)             | type3 keyword | name)|\n     |\
    \                   |                      |                      |\n     |  \
    \                 |                      | media-ready          |\n     |    \
    \               |                      |(1setOf               |\n     |      \
    \             |                      | type3 keyword | name)|\n     +-------------------+----------------------+----------------------+\n\
    \     | printer-resolution| printer-resolution-  | printer-resolution-  |\n  \
    \   | (resolution)      |  default             | supported            |\n    \
    \ |                   | (resolution)         |(1setOf resolution)   |\n     +-------------------+----------------------+----------------------+\n\
    \     | print-quality     | print-quality-default| print-quality-       |\n  \
    \   | (type2 enum)      | (type2 enum)         | supported            |\n    \
    \ |                   |                      |(1setOf type2 enum)   |\n     +-------------------+----------------------+----------------------+\n"
- title: 4.2.1 job-priority (integer(1:100))
  contents:
  - "4.2.1 job-priority (integer(1:100))\n   This attribute specifies a priority for\
    \ scheduling the Job. A higher\n   value specifies a higher priority. The value\
    \ 1 indicates the lowest\n   possible priority. The value 100 indicates the highest\
    \ possible\n   priority.  Among those jobs that are ready to print, a Printer\
    \ MUST\n   print all jobs with a priority value of n before printing those with\n\
    \   a priority value of n-1 for all n.\n   If the Printer object supports this\
    \ attribute, it MUST always support\n   the full range from 1 to 100.  No administrative\
    \ restrictions are\n   permitted.  This way an end-user can always make full use\
    \ of the\n   entire range with any Printer object.  If privileged jobs are\n \
    \  implemented outside IPP/1.0, they MUST have priorities higher than\n   100,\
    \ rather than restricting the range available to end-users.\n   If the client\
    \ does not supply this attribute and this attribute is\n   supported by the Printer\
    \ object, the Printer object MUST use the\n   value of the Printer object's \"\
    job-priority-default\" at job\n   submission time (unlike most Job Template attributes\
    \ that are used if\n   necessary at job processing time).\n   The syntax for the\
    \ \"job-priority-supported\" is also integer(1:100).\n   This single integer value\
    \ indicates the number of priority levels\n   supported.  The Printer object MUST\
    \ take the value supplied by the\n   client and map it to the closest integer\
    \ in a sequence of n integers\n   values that are evenly distributed over the\
    \ range from 1 to 100 using\n   the formula:\n        roundToNearestInt((100x+50)/n)\n\
    \   where n is the value of \"job-priority-supported\" and x ranges from 0\n \
    \  through n-1.\n   For example, if n=1 the sequence of values is 50;  if n=2,\
    \ the\n   sequence of values is:  25 and 75;  if n = 3, the sequence of values\n\
    \   is:  17, 50 and 83;  if n = 10, the sequence of values is: 5, 15, 25,\n  \
    \ 35, 45, 55, 65, 75, 85, and 95;  if n = 100, the sequence of values\n   is:\
    \  1, 2, 3, .  100.\n   If the value of the Printer object's \"job-priority-supported\"\
    \ is 10\n   and the client supplies values in the range 1 to 10, the Printer\n\
    \   object maps them to 5, in the range 11 to 20, the Printer object maps\n  \
    \ them to 15, etc.\n"
- title: 4.2.2 job-hold-until (type3 keyword | name (MAX))
  contents:
  - "4.2.2 job-hold-until (type3 keyword | name (MAX))\n   This attribute specifies\
    \ the named time period during which the Job\n   MUST become a candidate for printing.\n\
    \   Standard keyword values for named time periods are:\n     'no-hold': immediately,\
    \ if there are not other reasons to hold the\n        job\n     'day-time': during\
    \ the day\n     'evening': evening\n     'night': night\n     'weekend': weekend\n\
    \     'second-shift': second-shift (after close of business)\n     'third-shift':\
    \ third-shift (after midnight)\n   An administrator MUST associate allowable print\
    \ times with a named\n   time period (by means outside IPP/1.0).  An administrator\
    \ is\n   encouraged to pick names that suggest the type of time period. An\n \
    \  administrator MAY define additional values using the 'name' or '\n   keyword'\
    \ attribute syntax, depending on implementation.\n   If the value of this attribute\
    \ specifies a time period that is in the\n   future, the Printer MUST add the\
    \ 'job-hold-until-specified' value to\n   the job's \"job-state-reasons\" attribute,\
    \ move the job to the '\n   pending-held' state, and MUST NOT schedule the job\
    \ for printing until\n   the specified time-period arrives.  When the specified\
    \ time period\n   arrives, the Printer MUST remove the 'job-hold-until-specified'\
    \ value\n   from the job's \"job-state-reason\" attribute and, if there are no\n\
    \   other job state reasons that keep the job in the 'pending-held'\n   state,\
    \ the Printer MUST consider the job as a candidate for\n   processing by moving\
    \ the job to the 'pending' state.\n   If this job attribute value is the named\
    \ value 'no-hold', or the\n   specified time period has already started, the job\
    \ MUST be a\n   candidate for processing immediately.\n   If the client does not\
    \ supply this attribute and this attribute is\n   supported by the Printer object,\
    \ the Printer object MUST use the\n   value of the Printer object's \"job-hold-until-default\"\
    \ at job\n   submission time (unlike most Job Template attributes that are used\
    \ if\n   necessary at job processing time).\n"
- title: 4.2.3 job-sheets (type3 keyword | name(MAX))
  contents:
  - "4.2.3 job-sheets (type3 keyword | name(MAX))\n   This attribute determines which\
    \ job start/end sheet(s), if any, MUST\n   be printed with a job.\n   Standard\
    \ keyword values are:\n     'none': no job sheet is printed\n     'standard':\
    \ one or more site specific standard job sheets are\n        printed, e.g. a single\
    \ start sheet or both start and end sheet\n        is printed\n   An administrator\
    \ MAY define additional values using the 'name' or '\n   keyword' attribute syntax,\
    \ depending on implementation.\n   Note: The effect of this attribute on jobs\
    \ with multiple documents\n   MAY be affected by the \"multiple-document-handling\"\
    \ job attribute\n   (section 4.2.4), depending on the job sheet semantics.\n"
- title: 4.2.4 multiple-document-handling (type2 keyword)
  contents:
  - "4.2.4 multiple-document-handling (type2 keyword)\n   This attribute is relevant\
    \ only if a job consists of two or more\n   documents. The attribute controls\
    \ finishing operations and the\n   placement of one or more print-stream pages\
    \ into impressions and onto\n   media sheets.  When the value of the \"copies\"\
    \ attribute exceeds 1, it\n   also controls the order in which the copies that\
    \ result from\n   processing the documents are produced. For the purposes of this\n\
    \   explanations, if \"a\" represents an instance of document data, then\n   the\
    \ result of processing the data in document \"a\" is a sequence of\n   media sheets\
    \ represented by \"a(*)\".\n   Standard keyword values are:\n     'single-document':\
    \ If a Job object has multiple documents, say, the\n        document data is called\
    \ a and b, then the result of processing\n        all the document data (a and\
    \ then b) MUST be treated as a single\n        sequence of media sheets for finishing\
    \ operations; that is,\n        finishing would be performed on the concatenation\
    \ of the\n        sequences a(*),b(*).  The Printer object MUST NOT force the\
    \ data\n        in each document instance to be formatted onto a new print-\n\
    \        stream page, nor to start a new impression on a new media sheet.\n  \
    \      If more than one copy is made, the ordering of the sets of media\n    \
    \    sheets resulting from processing the document data MUST be a(*),\n      \
    \  b(*), a(*), b(*), ..., and the Printer object MUST force each\n        copy\
    \ (a(*),b(*)) to start on a new media sheet.\n     'separate-documents-uncollated-copies':\
    \ If a Job object has\n        multiple documents, say, the document data is called\
    \ a and b,\n        then the result of processing the data in each document instance\n\
    \        MUST be treated as a single sequence of media sheets for\n        finishing\
    \ operations; that is, the sets a(*) and b(*) would each\n        be finished\
    \ separately. The Printer object MUST force each copy\n        of the result of\
    \ processing the data in a single document to\n        start on a new media sheet.\
    \ If more than one copy is made, the\n        ordering of the sets of media sheets\
    \ resulting from processing\n        the document data MUST be a(*), a(*), ...,\
    \ b(*), b(*) ... .\n     'separate-documents-collated-copies': If a Job object\
    \ has multiple\n        documents, say, the document data is called a and b, then\
    \ the\n        result of processing the data in each document instance MUST be\n\
    \        treated as a single sequence of media sheets for finishing\n        operations;\
    \ that is, the sets a(*) and b(*) would each be\n        finished separately.\
    \ The Printer object MUST force each copy of\n        the result of processing\
    \ the data in a single document to start\n        on a new media sheet.  If more\
    \ than one copy is made, the\n        ordering of the sets of media sheets resulting\
    \ from processing\n        the document data MUST be a(*), b(*), a(*), b(*), ...\
    \ .\n     'single-document-new-sheet':  Same as 'single-document', except\n  \
    \      that the Printer object MUST ensure that the first impression of\n    \
    \    each document instance in the job is placed on a new media\n        sheet.\
    \  This value allows multiple documents to be stapled\n        together with a\
    \ single staple where each document starts on a\n        new sheet.\n   The 'single-document'\
    \ value is the same as 'separate-documents-\n   collated-copies' with respect\
    \ to ordering of print-stream pages, but\n   not media sheet generation, since\
    \ 'single-document' will put the\n   first page of the next document on the back\
    \ side of a sheet if an odd\n   number of pages have been produced so far for\
    \ the job, while '\n   separate-documents-collated-copies' always forces the next\
    \ document\n   or document copy on to a new sheet.  In addition, if the \"finishings\"\
    \n   attribute specifies 'staple', then with 'single-document', documents\n  \
    \ a and b are stapled together as a single document with no regard to\n   new\
    \ sheets, with 'single-document-new-sheet', documents a and b are\n   stapled\
    \ together as a single document, but document b starts on a new\n   sheet, but\
    \ with 'separate-documents-uncollated-copies' and '\n   separate-documents-collated-copies',\
    \ documents a and b are stapled\n   separately.\n   Note: None of these values\
    \ provide means to produce uncollated sheets\n   within a document, i.e., where\
    \ multiple copies of sheet n are\n   produced before sheet n+1 of the same document.\n\
    \   The relationship of this attribute and the other attributes that\n   control\
    \ document processing is described in section 15.3.\n"
- title: 4.2.5 copies (integer(1:MAX))
  contents:
  - "4.2.5 copies (integer(1:MAX))\n   This attribute specifies the number of copies\
    \ to be printed.\n   On many devices the supported number of collated copies will\
    \ be\n   limited by the number of physical output bins on the device, and may\n\
    \   be different from the number of uncollated copies which can be\n   supported.\n\
    \   Note: The effect of this attribute on jobs with multiple documents is\n  \
    \ controlled by the \"multiple-document-handling\" job attribute (section\n  \
    \ 4.2.4) and the relationship of this attribute and the other\n   attributes that\
    \ control document processing is described in section\n   15.3.\n"
- title: 4.2.6 finishings (1setOf type2 enum)
  contents:
  - "4.2.6 finishings (1setOf type2 enum)\n   This attribute identifies the finishing\
    \ operations that the Printer\n   uses for each copy of each printed document\
    \ in the Job. For Jobs with\n   multiple documents, the \"multiple-document-handling\"\
    \ attribute\n   determines what constitutes a \"copy\" for purposes of finishing.\n\
    \   Standard enum values are:\n     Value  Symbolic Name and Description\n   \
    \  '3'    'none':  Perform no finishing\n     '4'    'staple':  Bind the document(s)\
    \ with one or more staples.\n                  The exact number and placement\
    \ of the staples is\n                  site-defined.\n     '5'    'punch':  This\
    \ value indicates that holes are required in\n                  the finished document.\
    \ The exact number and placement\n                  of the holes is site-defined\
    \  The punch specification\n                  MAY be satisfied (in a site- and\
    \ implementation-\n                  specific manner) either by drilling/punching,\
    \ or by\n                  substituting pre-drilled media.\n     '6'    'cover':\
    \  This value is specified when it is desired to\n                  select a non-printed\
    \ (or pre-printed) cover for the\n                  document.  This does not supplant\
    \ the specification of\n                  a printed cover (on cover stock medium)\
    \ by the\n                  document itself.\n     '7'    'bind':  This value\
    \ indicates that a binding is to be\n                  applied to the document;\
    \ the type and placement of the\n                  binding is site-defined.\"\n\
    \   Note: The effect of this attribute on jobs with multiple documents is\n  \
    \ controlled by the \"multiple-document-handling\" job attribute (section\n  \
    \ 4.2.4) and the relationship of this attribute and the other\n   attributes that\
    \ control document processing is described in section\n   15.3.\n   If the client\
    \ supplies a value of 'none' along with any other\n   combination of values, it\
    \ is the same as if only that other\n   combination of values had been supplied\
    \ (that is the 'none' value has\n   no effect).\n"
- title: 4.2.7 page-ranges (1setOf rangeOfInteger (1:MAX))
  contents:
  - "4.2.7 page-ranges (1setOf rangeOfInteger (1:MAX))\n   This attribute identifies\
    \ the range(s) of print-stream pages that the\n   Printer object uses for each\
    \ copy of each document which are to be\n   printed.  Nothing is printed for any\
    \ pages identified that do not\n   exist in the document(s).  Ranges MUST be in\
    \ ascending order, for\n   example: 1-3, 5-7, 15-19 and MUST NOT overlap, so that\
    \ a non-spooling\n   Printer object can process the job in a single pass.  If\
    \ the ranges\n   are not ascending or are overlapping, the IPP object MUST reject\
    \ the\n   request and return the 'client-error-bad-request' status code.  The\n\
    \   attribute is associated with print-stream pages not application-\n   numbered\
    \ pages (for example, the page numbers found in the headers\n   and or footers\
    \ for certain word processing applications).\n   For Jobs with multiple documents,\
    \ the \"multiple-document-handling\"\n   attribute determines what constitutes\
    \ a \"copy\" for purposes of the\n   specified page range(s).  When \"multiple-document-handling\"\
    \ is '\n   single-document', the Printer object MUST apply each supplied page\n\
    \   range once to the concatenation of the print-stream pages.  For\n   example,\
    \ if there are 8 documents of 10 pages each, the page-range '\n   41:60' prints\
    \ the pages in the 5th and 6th documents as a single\n   document and none of\
    \ the pages of the other documents are printed.\n   When \"multiple-document-handling\"\
    \ is 'separate-documents-uncollated-\n   copies' or 'separate-documents-collated-copies',\
    \ the Printer object\n   MUST apply each supplied page range repeatedly to each\
    \ document copy.\n   For the same job, the page-range '1:3, 10:10' would print\
    \ the first 3\n   pages and the 10th page of each of the 8 documents in the Job,\
    \ as 8\n   separate documents.\n   In most cases, the exact pages to be printed\
    \ will be generated by a\n   device driver and this attribute would not be required.\
    \  However,\n   when printing an archived document which has already been formatted,\n\
    \   the end user may elect to print just a subset of the pages contained\n   in\
    \ the document.  In this case, if page-range = n.m is specified, the\n   first\
    \ page to be printed will be page n. All subsequent pages of the\n   document\
    \ will be printed through and including page m.\n   \"page-ranges-supported\"\
    \ is a boolean value indicating whether or not\n   the printer is capable of supporting\
    \ the printing of page ranges.\n   This capability may differ from one PDL to\
    \ another. There is no\n   \"page-ranges-default\" attribute.  If the \"page-ranges\"\
    \ attribute is\n   not supplied by the client, all pages of the document will\
    \ be\n   printed.\n   Note: The effect of this attribute on jobs with multiple\
    \ documents is\n   controlled by the \"multiple-document-handling\" job attribute\
    \ (section\n   4.2.4) and the relationship of this attribute and the other\n \
    \  attributes that control document processing is described in section\n   15.3.\n"
- title: 4.2.8 sides (type2 keyword)
  contents:
  - "4.2.8 sides (type2 keyword)\n   This attribute specifies how print-stream pages\
    \ are to be imposed\n   upon the sides of an instance of a selected medium, i.e.,\
    \ an\n   impression.\n   The standard keyword values are:\n     'one-sided': imposes\
    \ each consecutive print-stream page upon the\n        same side of consecutive\
    \ media sheets.\n     'two-sided-long-edge': imposes each consecutive pair of\
    \ print-\n        stream pages upon front and back sides of consecutive media\n\
    \        sheets, such that the orientation of each pair of print-stream\n    \
    \    pages on the medium would be correct for the reader as if for\n        binding\
    \ on the long edge.  This imposition is sometimes called '\n        duplex' or\
    \ 'head-to-head'.\n     'two-sided-short-edge': imposes each consecutive pair\
    \ of print-\n        stream pages upon front and back sides of consecutive media\n\
    \        sheets, such that the orientation of each pair of print-stream\n    \
    \    pages on the medium would be correct for the reader as if for\n        binding\
    \ on the short edge.  This imposition is sometimes called\n        'tumble' or\
    \ 'head-to-toe'.\n   'two-sided-long-edge', 'two-sided-short-edge', 'tumble',\
    \ and 'duplex'\n   all work the same for portrait or landscape.  However 'head-to-toe'\n\
    \   is 'tumble' in portrait but 'duplex' in landscape.  'head-to-head'\n   also\
    \ switches between 'duplex' and 'tumble' when using portrait and\n   landscape\
    \ modes.\n   Note: The effect of this attribute on jobs with multiple documents\
    \ is\n   controlled by the \"multiple-document-handling\" job attribute (section\n\
    \   4.2.4) and the relationship of this attribute and the other\n   attributes\
    \ that control document processing is described in section\n   15.3.\n"
- title: 4.2.9 number-up (integer(1:MAX))
  contents:
  - "4.2.9 number-up (integer(1:MAX))\n   This attribute specifies the number of print-stream\
    \ pages to impose\n   upon a single side of an instance of a selected medium.\
    \  For example,\n   if the value is:\n     Value  Description\n     '1'    the\
    \ Printer MUST place one print-stream page on a single\n                  side\
    \ of an instance of the selected medium (MAY add\n                  some sort\
    \ of translation, scaling, or rotation).\n     '2'    the Printer MUST place two\
    \ print-stream pages on a single\n                  side of an instance of the\
    \ selected medium (MAY add\n                  some sort of translation, scaling,\
    \ or rotation).\n     '4'    the Printer MUST place four print-stream pages on\
    \ a single\n                  side of an instance of the selected medium (MAY\
    \ add\n                  some sort of translation, scaling, or rotation).\n  \
    \ This attribute primarily controls the translation, scaling and\n   rotation\
    \ of print-stream pages.\n   Note: The effect of this attribute on jobs with multiple\
    \ documents is\n   controlled by the \"multiple-document-handling\" job attribute\
    \ (section\n   4.2.4) and the relationship of this attribute and the other\n \
    \  attributes that control document processing is described in section\n   15.3.\n"
- title: 4.2.10 orientation-requested (type2 enum)
  contents:
  - "4.2.10 orientation-requested (type2 enum)\n   This attribute indicates the desired\
    \ orientation for printed print-\n   stream pages; it does not describe the orientation\
    \ of the client-\n   supplied print-stream pages.\n   For some document formats\
    \ (such as 'application/postscript'), the\n   desired orientation of the print-stream\
    \ pages is specified within the\n   document data.  This information is generated\
    \ by a device driver\n   prior to the submission of the print job.  Other document\
    \ formats\n   (such as 'text/plain') do not include the notion of desired\n  \
    \ orientation within the document data.  In the latter case it is\n   possible\
    \ for the Printer object to bind the desired orientation to\n   the document data\
    \ after it has been submitted.  It is expected that a\n   Printer object would\
    \ only support \"orientations-requested\" for some\n   document formats (e.g.,\
    \ 'text/plain' or 'text/html') but not others\n   (e.g., 'application/postscript').\
    \  This is no different than any\n   other Job Template attribute since section\
    \ 4.2, item 1, points out\n   that a Printer object may support or not support\
    \ any Job Template\n   attribute based on the document format supplied by the\
    \ client.\n   However, a special mention is made here since it is very likely\
    \ that\n   a Printer object will support \"orientation-requested\" for only a\n\
    \   subset of the supported document formats.\n   Standard enum values are:\n\
    \     Value  Symbolic Name and Description\n     '3'    'portrait':  The content\
    \ will be imaged across the short\n                  edge of the medium.\n   \
    \  '4'    'landscape':  The content will be imaged across the long\n         \
    \         edge of the medium.  Landscape is defined to be a\n                \
    \  rotation of the print-stream page to be imaged by +90\n                  degrees\
    \ with respect to the medium (i.e. anti-\n                  clockwise) from the\
    \ portrait orientation.  Note:  The\n                  +90 direction was chosen\
    \ because simple finishing on\n                  the long edge is the same edge\
    \ whether portrait or\n                  landscape\n     '5'    'reverse-landscape':\
    \  The content will be imaged across the\n                  long edge of the medium.\
    \  Reverse-landscape is defined\n                  to be a rotation of the print-stream\
    \ page to be imaged\n                  by - 90 degrees with respect to the medium\
    \ (i.e.\n                  clockwise) from the portrait orientation.  Note: The\
    \ '\n                  reverse-landscape' value was added because some\n     \
    \             applications rotate landscape -90 degrees from\n               \
    \   portrait, rather than +90 degrees.\n     '6'    'reverse-portrait':  The content\
    \ will be imaged across the\n                  short edge of the medium.  Reverse-portrait\
    \ is defined\n                  to be a rotation of the print-stream page to be\
    \ imaged\n                  by 180 degrees with respect to the medium from the\n\
    \                  portrait orientation.  Note: The 'reverse-portrait'\n     \
    \             value was added for use with the \"finishings\"\n              \
    \    attribute in cases where the opposite edge is desired\n                 \
    \ for finishing a portrait document on simple finishing\n                  devices\
    \ that have only one finishing position.  Thus a\n                  'text'/plain'\
    \ portrait document can be stapled \"on the\n                  right\" by a simple\
    \ finishing device as is common use\n                  with some middle eastern\
    \ languages such as Hebrew.\n   Note: The effect of this attribute on jobs with\
    \ multiple documents is\n   controlled by the \"multiple-document-handling\" job\
    \ attribute (section\n   4.2.4) and the relationship of this attribute and the\
    \ other\n   attributes that control document processing is described in section\n\
    \   15.3.\n"
- title: 4.2.11 media (type3 keyword | name(MAX))
  contents:
  - "4.2.11 media (type3 keyword | name(MAX))\n   This attribute identifies the medium\
    \ that the Printer uses for all\n   impressions of the Job.\n   The values for\
    \ \"media\" include medium-names, medium-sizes, input-\n   trays and electronic\
    \ forms so that one attribute specifies the media.\n   If a Printer object supports\
    \ a medium name as a value of this\n   attribute, such a medium name implicitly\
    \ selects an input-tray that\n   contains the specified medium.  If a Printer\
    \ object supports a medium\n   size as a value of this attribute, such a medium\
    \ size implicitly\n   selects a medium name that in turn implicitly selects an\
    \ input-tray\n   that contains the medium with the specified size.  If a Printer\n\
    \   object supports an input-tray as the value of this attribute, such an\n  \
    \ input-tray implicitly selects the medium that is in that input-tray\n   at the\
    \ time the job prints.  This case includes manual-feed input-\n   trays.  If a\
    \ Printer object supports an electronic form as the value\n   of this attribute,\
    \ such an electronic form implicitly selects a\n   medium-name that in turn implicitly\
    \ selects an input-tray that\n   contains the medium specified by the electronic\
    \ form.  The electronic\n   form also implicitly selects an image that the Printer\
    \ MUST merge\n   with the document data as its prints each page.\n   Standard\
    \ keyword values are (taken from ISO DPA and the Printer MIB)\n   and are listed\
    \ in section 14. An administrator MAY define additional\n   values using the 'name'\
    \ or 'keyword' attribute syntax, depending on\n   implementation.\n   There is\
    \ also an additional Printer attribute named \"media-ready\"\n   which differs\
    \ from \"media-supported\" in that legal values only\n   include the subset of\
    \ \"media-supported\" values that are physically\n   loaded and ready for printing\
    \ with no operator intervention required.\n   If an IPP object supports \"media-supported\"\
    , it NEED NOT support\n   \"media-ready\".\n   The relationship of this attribute\
    \ and the other attributes that\n   control document processing is described in\
    \ section 15.3.\n"
- title: 4.2.12 printer-resolution (resolution)
  contents:
  - "4.2.12 printer-resolution (resolution)\n   This attribute identifies the resolution\
    \ that Printer uses for the\n   Job.\n"
- title: 4.2.13 print-quality (type2 enum)
  contents:
  - "4.2.13 print-quality (type2 enum)\n   This attribute specifies the print quality\
    \ that the Printer uses for\n   the Job.\n   The standard enum values are:\n \
    \    Value  Symbolic Name and Description\n     '3'    'draft': lowest quality\
    \ available on the printer\n     '4'    'normal': normal or intermediate quality\
    \ on the printer\n     '5'    'high': highest quality available on the printer\n"
- title: 4.3 Job Description Attributes
  contents:
  - "4.3 Job Description Attributes\n   The attributes in this section form the attribute\
    \ group called \"job-\n   description\".  The following table summarizes these\
    \ attributes.  The\n   third column indicates whether the attribute is a REQUIRED\
    \ attribute\n   that MUST be supported by Printer objects.  If it is not indicated\
    \ as\n   REQUIRED, then it is OPTIONAL.  The maximum size in octets for 'text'\n\
    \   and 'name' attributes is indicated in parenthesizes.\n   +----------------------------+----------------------+----------------+\n\
    \   |      Attribute             |     Syntax           |   REQUIRED?    |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-uri                    | uri                  |  REQUIRED      |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-id                     | integer(1:MAX)       |  REQUIRED      |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-printer-uri            | uri                  |  REQUIRED      |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-more-info              | uri                  |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-name                   | name (MAX)           |  REQUIRED      |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-originating-user-name  | name (MAX)           |  REQUIRED      |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-state                  | type1 enum           |  REQUIRED      |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-state-reasons          | 1setOf type2 keyword |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-state-message          | text (MAX)           |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | number-of-documents        | integer (0:MAX)      |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | output-device-assigned     | name (127)           |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | time-at-creation           | integer (0:MAX)      |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | time-at-processing         | integer (0:MAX)      |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | time-at-completed          | integer (0:MAX)      |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | number-of-intervening-jobs | integer (0:MAX)      |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-message-from-operator  | text (127)           |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-k-octets               | integer (0:MAX)      |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-impressions            | integer (0:MAX)      |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ +----------------------------+----------------------+----------------+\n   |\
    \      Attribute             |     Syntax           |   REQUIRED?    |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-media-sheets           | integer (0:MAX)      |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-k-octets-processed     | integer (0:MAX)      |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | job-impressions-completed  | integer (0:MAX)      |                |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | job-media-sheets-completed | integer (0:MAX)      |                |\n   +----------------------------+----------------------+----------------+\n\
    \   | attributes-charset         | charset              |  REQUIRED      |\n \
    \  +----------------------------+----------------------+----------------+\n  \
    \ | attributes-natural-language| naturalLanguage      |  REQUIRED      |\n   +----------------------------+----------------------+----------------+\n"
- title: 4.3.1 job-uri (uri)
  contents:
  - "4.3.1 job-uri (uri)\n   This REQUIRED attribute contains the URI for the job.\
    \  The Printer\n   object, on receipt of a new job, generates a URI which identifies\
    \ the\n   new Job.  The Printer object returns the value of the \"job-uri\"\n\
    \   attribute as part of the response to a create request.  The precise\n   format\
    \ of a Job URI is implementation dependent.  If the Printer\n   object supports\
    \ more than one URI and there is some relationship\n   between the newly formed\
    \ Job URI and the Printer object's URI, the\n   Printer object uses the Printer\
    \ URI supplied by the client in the\n   create request.  For example, if the create\
    \ request comes in over a\n   secure channel, the new Job URI MUST use the same\
    \ secure channel.\n   This can be guaranteed because the Printer object is responsible\
    \ for\n   generating the Job URI and the Printer object is aware of its\n   security\
    \ configuration and policy as well as the Printer URI used in\n   the create request.\n\
    \   For a description of this attribute and its relationship to \"job-id\"\n \
    \  and \"job-printer-uri\" attribute, see the discussion in section 2.4 on\n \
    \  \"Object Identity\".\n"
- title: 4.3.2 job-id (integer(1:MAX))
  contents:
  - "4.3.2 job-id (integer(1:MAX))\n   This REQUIRED attribute contains the ID of\
    \ the job.  The Printer, on\n   receipt of a new job, generates an ID which identifies\
    \ the new Job on\n   that Printer.  The Printer returns the value of the \"job-id\"\
    \n   attribute as part of the response to a create request.  The 0 value\n   is\
    \ not included to allow for compatibility with SNMP index values\n   which also\
    \ cannot be 0.\n   For a description of this attribute and its relationship to\
    \ \"job-uri\"\n   and \"job-printer-uri\" attribute, see the discussion in section\
    \ 2.4 on\n   \"Object Identity\".\n"
- title: 4.3.3 job-printer-uri (uri)
  contents:
  - "4.3.3 job-printer-uri (uri)\n   This REQUIRED attribute identifies the Printer\
    \ object that created\n   this Job object.  When a Printer object creates a Job\
    \ object, it\n   populates this attribute with the Printer object URI that was\
    \ used in\n   the create request.  This attribute permits a client to identify\
    \ the\n   Printer object that created this Job object when only the Job\n   object's\
    \ URI is available to the client.  The client queries the\n   creating Printer\
    \ object to determine which languages, charsets,\n   operations, are supported\
    \ for this Job.\n   For a description of this attribute and its relationship to\
    \ \"job-uri\"\n   and \"job-id\" attribute, see the discussion in section 2.4\
    \ on \"Object\n   Identity\".\n"
- title: 4.3.4 job-more-info (uri)
  contents:
  - "4.3.4 job-more-info (uri)\n   Similar to \"printer-more-info\", this attribute\
    \ contains the URI\n   referencing some resource with more information about this\
    \ Job\n   object, perhaps an HTML page containing information about the Job.\n"
- title: 4.3.5 job-name (name(MAX))
  contents:
  - "4.3.5 job-name (name(MAX))\n   This REQUIRED attribute is the name of the job.\
    \  It is a name that is\n   more user friendly than the \"job-uri\" attribute\
    \ value.  It does not\n   need to be unique between Jobs.  The Job's \"job-name\"\
    \ attribute is\n   set to the value supplied by the client in the \"job-name\"\
    \ operation\n   attribute in the create request (see Section 3.2.1.1).   If, however,\n\
    \   the \"job-name\" operation attribute is not supplied by the client in\n  \
    \ the create request, the Printer object, on creation of the Job, MUST\n   generate\
    \ a name.  The printer SHOULD generate the value of the Job's\n   \"job-name\"\
    \ attribute from the first of the following sources that\n   produces a value:\
    \ 1) the \"document-name\" operation attribute of the\n   first (or only) document,\
    \ 2) the \"document-URI\" attribute of the\n   first (or only) document, or 3)\
    \ any other piece of Job specific\n   and/or Document Content information.\n"
- title: 4.3.6 job-originating-user-name (name(MAX))
  contents:
  - "4.3.6 job-originating-user-name (name(MAX))\n   This REQUIRED attribute contains\
    \ the name of the end user that\n   submitted the print job.  The Printer object\
    \ sets this attribute to\n   the most authenticated printable name that it can\
    \ obtain from the\n   authentication service over which the IPP operation was\
    \ received.\n   Only if such is not available, does the Printer object use the\
    \ value\n   supplied by the client in the \"requesting-user-name\" operation\n\
    \   attribute of the create operation (see Section 8).\n   Note:  The Printer\
    \ object needs to keep an internal originating user\n   id of some form, typically\
    \ as a credential of a principal, with the\n   Job object.  Since such an internal\
    \ attribute is implementation-\n   dependent and not of interest to clients, it\
    \ is not specified as a\n   Job Description attribute.  This originating user\
    \ id is used for\n   authorization checks (if any) on all subsequent operation.\n"
- title: 4.3.7 job-state (type1 enum)
  contents:
  - "4.3.7 job-state (type1 enum)\n   This REQUIRED attribute identifies the current\
    \ state of the job.\n   Even though the IPP protocol defines eight values for\
    \ job states,\n   implementations only need to support those states which are\n\
    \   appropriate for the particular implementation.  In other words, a\n   Printer\
    \ supports only those job states implemented by the output\n   device and available\
    \ to the Printer object implementation.\n   Standard enum values are:\n     Values\
    \ Symbolic Name and Description\n     '3'    'pending':  The job is a candidate\
    \ to start processing, but\n                  is not yet processing.\n     '4'\
    \    'pending-held':  The job is not a candidate for processing\n            \
    \      for any number of reasons but will return to the '\n                  pending'\
    \ state as soon as the reasons are no longer\n                  present.  The\
    \ job's \"job-state-reason\" attribute MUST\n                  indicate why the\
    \ job is no longer a candidate for\n                  processing.\n     '5'  \
    \  'processing':  One or more of:\n                  1.  the job is using, or\
    \ is attempting to use, one or\n                  more purely software processes\
    \ that are analyzing,\n                  creating, or interpreting a PDL, etc.,\n\
    \                  2.  the job is using, or is attempting to use, one or\n   \
    \               more hardware devices that are interpreting a PDL,\n         \
    \         making marks on a medium, and/or performing finishing,\n           \
    \       such as stapling, etc.,\n                  3. the Printer object has made\
    \ the job ready for\n                  printing, but the output device is not\
    \ yet printing\n                  it, either because the job hasn't reached the\
    \ output\n                  device or because the job is queued in the output\n\
    \                  device or some other spooler, awaiting the output\n       \
    \           device to print it.\n                  When the job is in the 'processing'\
    \ state, the entire\n                  job state includes the detailed status\
    \ represented in\n                  the printer's \"printer-state\", \"printer-state-\n\
    \                  reasons\", and \"printer-state-message\" attributes.\n    \
    \              Implementations MAY, though they NEED NOT,  include\n         \
    \         additional values in the job's \"job-state-reasons\"\n             \
    \     attribute to indicate the progress of the job, such as\n               \
    \   adding the 'job-printing' value to indicate when the\n                  output\
    \ device is actually making marks on paper and/or\n                  the 'processing-to-stop-point'\
    \ value to indicate that\n                  the IPP object is in the process of\
    \ canceling or\n                  aborting the job.  Most implementations won't\
    \ bother\n                  with this nuance.\n     '6'    'processing-stopped':\
    \  The job has stopped while processing\n                  for any number of reasons\
    \ and will return to the '\n                  processing' state as soon as the\
    \ reasons are no longer\n                  present.\n                  The job's\
    \ \"job-state-reason\" attribute MAY indicate\n                  why the job has\
    \ stopped processing.  For example, if\n                  the output device is\
    \ stopped, the 'printer-stopped'\n                  value MAY be included in the\
    \ job's \"job-state-reasons\"\n                  attribute.\n                \
    \  Note:  When an output device is stopped, the device\n                  usually\
    \ indicates its condition in human readable form\n                  locally at\
    \ the device.  A client can obtain more\n                  complete device status\
    \ remotely by querying the\n                  Printer object's \"printer-state\"\
    , \"printer-state-\n                  reasons\" and \"printer-state-message\"\
    \ attributes.\n     '7'    'canceled':  The job has been canceled by a Cancel-Job\n\
    \                  operation and the Printer object has completed\n          \
    \        canceling the job and all job status attributes have\n              \
    \    reached their final values for the job.  While the\n                  Printer\
    \ object is canceling the job, the job remains\n                  in its current\
    \ state, but the job's \"job-state-\n                  reasons\" attribute SHOULD\
    \ contain the 'processing-to-\n                  stop-point' value and one of\
    \ the 'canceled-by-user', '\n                  canceled-by-operator', or 'canceled-at-device'\
    \ value.\n                  When the job moves to the 'canceled' state, the '\n\
    \                  processing-to-stop-point' value, if present, MUST be\n    \
    \              removed, but the 'canceled-by-xxx', if present, MUST\n        \
    \          remain.\n     '8'    'aborted':  The job has been aborted by the system,\
    \ usually\n                  while the job was in the 'processing' or 'processing-\n\
    \                  stopped' state and the Printer has completed aborting\n   \
    \               the job and all job status attributes have reached\n         \
    \         their final values for the job.  While the Printer\n               \
    \   object is aborting the job, the job remains in its\n                  current\
    \ state, but the job's \"job-state-reasons\"\n                  attribute SHOULD\
    \ contain the 'processing-to-stop-\n                  point' and 'aborted-by-system'\
    \ values.  When the job\n                  moves to the 'aborted' state, the \
    \ 'processing-to-\n                  stop-point' value, if present, MUST be removed,\
    \ but\n                  the 'aborted-by-system' value, if present, MUST\n   \
    \               remain.\n     '9'    'completed':  The job has completed successfully\
    \ or with\n                  warnings or errors after processing and all of the\
    \ job\n                  media sheets have been successfully stacked in the\n\
    \                  appropriate output bin(s) and all job status\n            \
    \      attributes have reached their final values for the\n                  job.\
    \  The job's \"job-state-reasons\" attribute SHOULD\n                  contain\
    \ one of:  'completed-successfully', '\n                  completed-with-warnings',\
    \ or 'completed-with-errors'\n                  values.\n   The final value for\
    \ this attribute MUST be one of: 'completed', '\n   canceled', or 'aborted' before\
    \ the Printer removes the job\n   altogether.  The length of time that jobs remain\
    \ in the 'canceled', '\n   aborted', and 'completed' states depends on implementation.\n\
    \   The following figure shows the normal job state transitions.\n           \
    \                                           +----> canceled\n                \
    \                                     /\n       +----> pending --------> processing\
    \ ---------+------> completed\n       |         ^                   ^        \
    \       \\\n   --->+         |                   |                +----> aborted\n\
    \       |         v                   v               /\n       +----> pending-held\
    \    processing-stopped ---+\n   Normally a job progresses from left to right.\
    \  Other state\n   transitions are unlikely, but are not forbidden.  Not shown\
    \ are the\n   transitions to the 'canceled' state from the 'pending', 'pending-\n\
    \   held', and 'processing-stopped' states.\n   Jobs reach one of the three terminal\
    \ states: 'completed', 'canceled',\n   or 'aborted', after the jobs have completed\
    \ all activity, including\n   stacking output media, after the jobs have completed\
    \ all activity,\n   and all job status attributes have reached their final values\
    \ for the\n   job.\n   Note: As with all other IPP attributes, if the implementation\
    \ can not\n   determine the correct value for this attribute, it SHOULD respond\n\
    \   with the out-of-band value 'unknown' (see section 4.1) rather than\n   try\
    \ to guess at some possibly incorrect value and give the end user\n   the wrong\
    \ impression about the state of the Job object.  For example,\n   if the implementation\
    \ is just a gateway into some printing system\n   that does not provide detailed\
    \ status about the print job, the IPP\n   Job object's state might literally be\
    \ 'unknown'.\n"
- title: 4.3.8 job-state-reasons (1setOf  type2 keyword)
  contents:
  - "4.3.8 job-state-reasons (1setOf  type2 keyword)\n   This attribute provides additional\
    \ information about the job's\n   current state, i.e., information that augments\
    \ the value of the job's\n   \"job-state\" attribute.\n   Implementation of these\
    \ values is OPTIONAL, i.e., a Printer NEED NOT\n   implement them, even if (1)\
    \ the output device supports the\n   functionality represented by the reason and\
    \ (2) is available to the\n   Printer object implementation.  These values MAY\
    \ be used with any job\n   state or states for which the reason makes sense. \
    \ Furthermore, when\n   implemented, the Printer MUST return these values when\
    \ the reason\n   applies and MUST NOT return them when the reason no longer applies\n\
    \   whether the value of the Job's \"job-state\" attribute changed or not.\n \
    \  When the Job does not have any reasons for being in its current\n   state,\
    \ the value of the Job's \"job-state-reasons\" attribute MUST be '\n   none'.\n\
    \   Note: While values cannot be added to the 'job-state' attribute\n   without\
    \ impacting deployed clients that take actions upon receiving\n   \"job-state\"\
    \ values, it is the intent that additional \"job-state-\n   reasons\" values can\
    \ be defined and registered without impacting such\n   deployed clients.  In other\
    \ words, the \"job-state-reasons\" attribute\n   is intended to be extensible.\n\
    \   The following standard keyword values are defined.  For ease of\n   understanding,\
    \ the values are presented in the order in which the\n   reasons are likely to\
    \ occur (if implemented), starting with the '\n   job-incoming' value:\n     'none':\
    \  There are no reasons for the job's current state.\n     'job-incoming':  The\
    \ Create-Job operation has been accepted by the\n        Printer, but the Printer\
    \ is expecting additional Send-Document\n        and/or Send-URI operations and/or\
    \ is accessing/accepting\n        document data.\n     'submission-interrupted':\
    \  The job was not completely submitted for\n        some unforeseen reason, such\
    \ as: (1) the Printer has crashed\n        before the job was closed by the client,\
    \ (2) the Printer or the\n        document transfer method has crashed in some\
    \ non-recoverable way\n        before the document data was entirely transferred\
    \ to the\n        Printer, (3) the client crashed or failed to close the job\n\
    \        before the time-out period.  See section 4.4.28.\n     'job-outgoing':\
    \  The Printer is transmitting the job to the output\n        device.\n     'job-hold-until-specified':\
    \  The value of the job's \"job-hold-\n        until\" attribute was specified\
    \ with a time period that is still\n        in the future.  The job MUST NOT be\
    \ a candidate for processing\n        until this reason is removed and there are\
    \ no other reasons to\n        hold the job.\n     'resources-are-not-ready':\
    \  At least one of the resources needed by\n        the job, such as media, fonts,\
    \ resource objects, etc., is not\n        ready on any of the physical printer's\
    \ for which the job is a\n        candidate.  This condition MAY be detected when\
    \ the job is\n        accepted, or subsequently while the job is pending or\n\
    \        processing, depending on implementation.  The job may remain in\n   \
    \     its current state or be moved to the 'pending-held' state,\n        depending\
    \ on implementation and/or job scheduling policy.\n     'printer-stopped-partly':\
    \  The value of the Printer's \"printer-\n        state-reasons\" attribute contains\
    \ the value 'stopped-partly'.\n     'printer-stopped':  The value of the Printer's\
    \ \"printer-state\"\n        attribute is 'stopped'.\n     'job-interpreting':\
    \ Job is in the 'processing' state, but more\n        specifically, the Printer\
    \ is interpreting the document data.\n     'job-queued': Job is in the 'processing'\
    \ state, but more\n        specifically, the Printer has queued the document data.\n\
    \     'job-transforming': Job is in the 'processing' state, but more\n       \
    \ specifically, the Printer is interpreting document data and\n        producing\
    \ another electronic representation.\n     'job-printing':  The output device\
    \ is marking media. This value is\n        useful for Printers which spend a great\
    \ deal of time processing\n        (1) when no marking is happening and then want\
    \ to show that\n        marking is now happening or (2) when the job is in the\
    \ process\n        of being canceled or aborted while the job remains in the '\n\
    \        processing' state, but the marking has not yet stopped so that\n    \
    \    impression or sheet counts are still increasing for the job.\n     'job-canceled-by-user':\
    \  The job was canceled by the owner of the\n        job using the Cancel-Job\
    \ request, i.e., by a user whose\n        authenticated identity is the same as\
    \ the value of the\n        originating user that created the Job object, or by\
    \ some other\n        authorized end-user, such as a member of the job owner's\n\
    \        security group.\n     'job-canceled-by-operator':  The job was canceled\
    \ by the operator\n        using the Cancel-Job request, i.e., by a user who has\
    \ been\n        authenticated as having operator privileges (whether local or\n\
    \        remote).  If the security policy is to allow anyone to cancel\n     \
    \   anyone's job, then this value may be used when the job is\n        canceled\
    \ by other than the owner of the job.  For such a\n        security policy, in\
    \ effect, everyone is an operator as far as\n        canceling jobs with IPP is\
    \ concerned.\n     'job-canceled-at-device':  The job was canceled by an unidentified\n\
    \        local user, i.e., a user at a console at the device.\n     'aborted-by-system':\
    \  The job (1) is in the process of being\n        aborted, (2) has been aborted\
    \ by the system and placed in the '\n        aborted' state, or (3) has been aborted\
    \ by the system and placed\n        in the 'pending-held' state, so that a user\
    \ or operator can\n        manually try the job again.\n     'processing-to-stop-point':\
    \  The requester has issued a Cancel-Job\n        operation or the Printer object\
    \ has aborted the job, but is\n        still performing some actions on the job\
    \ until a specified stop\n        point occurs or job termination/cleanup is completed.\n\
    \        This reason is recommended to be used in conjunction with the '\n   \
    \     processing' job state to indicate that the Printer object is\n        still\
    \ performing some actions on the job while the job remains\n        in the 'processing'\
    \ state.  After all the job's job description\n        attributes have stopped\
    \ incrementing, the Printer object moves\n        the job from the 'processing'\
    \ state to the 'canceled' or '\n        aborted' job states.\n     'service-off-line':\
    \  The Printer is off-line and accepting no jobs.\n        All 'pending' jobs\
    \ are put into the 'pending-held' state.  This\n        situation could be true\
    \ if the service's or document transform's\n        input is impaired or broken.\n\
    \     'job-completed-successfully':  The job completed successfully.\n     'job-completed-with-warnings':\
    \  The job completed with warnings.\n     'job-completed-with-errors':  The job\
    \ completed with errors (and\n        possibly warnings too).\n"
- title: 4.3.9 job-state-message (text(MAX))
  contents:
  - "4.3.9 job-state-message (text(MAX))\n   This attribute specifies information\
    \ about the \"job-state\" and \"job-\n   state-reasons\" attributes in human readable\
    \ text.  If the Printer\n   object supports this attribute, the Printer object\
    \ MUST be able to\n   generate this message in any of the natural languages identified\
    \ by\n   the Printer's \"generated-natural-language-supported\" attribute (see\n\
    \   the \"attributes-natural-language\" operation attribute specified in\n   Section\
    \ 3.1.4.1).\n   Note:  the value SHOULD NOT contain additional information not\n\
    \   contained in the values of the \"job-state\" and \"job-states-reasons\"\n\
    \   attributes, such as interpreter error information.  Otherwise,\n   application\
    \ programs might attempt to parse the (localized text).\n   For such additional\
    \ information such as interpreter errors for\n   application program consumption,\
    \ a new attribute with keyword values,\n   needs to be developed and registered.\n"
- title: 4.3.10 number-of-documents (integer(0:MAX))
  contents:
  - "4.3.10 number-of-documents (integer(0:MAX))\n   This attribute indicates the\
    \ number of documents in the job, i.e.,\n   the number of Send-Document, Send-URI,\
    \ Print-Job, or Print-URI\n   operations that the Printer has accepted for this\
    \ job, regardless of\n   whether the document data has reached the Printer object\
    \ or not.\n   Implementations supporting the OPTIONAL Create-Job/Send-\n   Document/Send-URI\
    \ operations SHOULD support this attribute so that\n   clients can query the number\
    \ of documents in each job.\n"
- title: 4.3.11 output-device-assigned (name(127))
  contents:
  - "4.3.11 output-device-assigned (name(127))\n   This attribute identifies the output\
    \ device to which the Printer\n   object has assigned this job.  If an output\
    \ device implements an\n   embedded Printer object, the Printer object NEED NOT\
    \ set this\n   attribute.  If a print server implements a Printer object, the\
    \ value\n   MAY be empty (zero-length string) or not returned until the Printer\n\
    \   object assigns an output device to the job.  This attribute is\n   particularly\
    \ useful when a single Printer object support multiple\n   devices (so called\
    \ \"fan-out\").\n"
- title: 4.3.12 time-at-creation (integer(0:MAX))
  contents:
  - "4.3.12 time-at-creation (integer(0:MAX))\n   This attribute indicates the point\
    \ in time at which the Job object\n   was created.  In order to populate this\
    \ attribute, the Printer object\n   uses the value in its \"printer-up-time\"\
    \ attribute at the time the Job\n   object is created.\n"
- title: 4.3.13 time-at-processing (integer(0:MAX))
  contents:
  - "4.3.13 time-at-processing (integer(0:MAX))\n   This attribute indicates the point\
    \ in time at which the Job object\n   began processing.  In order to populate\
    \ this attribute, the Printer\n   object uses the value in its \"printer-up-time\"\
    \ attribute at the time\n   the Job object is moved into the 'processing' state\
    \ for the first\n   time.\n"
- title: 4.3.14 time-at-completed (integer(0:MAX))
  contents:
  - "4.3.14 time-at-completed (integer(0:MAX))\n   This attribute indicates the point\
    \ in time at which the Job object\n   completed (or was cancelled or aborted).\
    \  In order to populate this\n   attribute, the Printer object uses the value\
    \ in its \"printer-up-time\"\n   attribute at the time the Job object is moved\
    \ into the 'completed' or\n   'canceled' or 'aborted' state.\n"
- title: 4.3.15 number-of-intervening-jobs (integer(0:MAX))
  contents:
  - "4.3.15 number-of-intervening-jobs (integer(0:MAX))\n   This attribute indicates\
    \ the number of jobs that are \"ahead\" of this\n   job in the relative chronological\
    \ order of expected time to complete\n   (i.e., the current scheduled order).\
    \ For efficiency, it is only\n   necessary to calculate this value when an operation\
    \ is performed that\n   requests this attribute.\n"
- title: 4.3.16 job-message-from-operator (text(127))
  contents:
  - "4.3.16 job-message-from-operator (text(127))\n   This attribute provides a message\
    \ from an operator, system\n   administrator or \"intelligent\" process to indicate\
    \ to the end user\n   the reasons for modification or other management action\
    \ taken on a\n   job.\n"
- title: 4.3.17 job-k-octets (integer(0:MAX))
  contents:
  - "4.3.17 job-k-octets (integer(0:MAX))\n   This attribute specifies the total size\
    \ of the document(s) in K\n   octets, i.e., in units of 1024 octets requested\
    \ to be processed in\n   the job.  The value MUST be rounded up, so that a job\
    \ between 1 and\n   1024 octets MUST be indicated as being 1, 1025 to 2048 MUST\
    \ be 2,\n   etc.\n   This value MUST NOT include the multiplicative factors contributed\
    \ by\n   the number of copies specified by the \"copies\" attribute, independent\n\
    \   of whether the device can process multiple copies without making\n   multiple\
    \ passes over the job or document data and independent of\n   whether the output\
    \ is collated or not.  Thus the value is independent\n   of the implementation\
    \ and indicates the size of the document(s)\n   measured in K octets independent\
    \ of the number of copies.\n   This value MUST also not include the multiplicative\
    \ factor due to a\n   copies instruction embedded in the document data.  If the\
    \ document\n   data actually includes replications of the document data, this\
    \ value\n   will include such replication.  In other words, this value is always\n\
    \   the size of the source document data, rather than a measure of the\n   hardcopy\
    \ output to be produced.\n   Note: This attribute and the following two attributes\
    \ (\"job-\n   impressions\" and \"job-media-sheets\") are not intended to be counters;\n\
    \   they are intended to be useful routing and scheduling information if\n   known.\
    \  For these three attributes, the Printer object may try to\n   compute the value\
    \ if it is not supplied in the create request.  Even\n   if the client does supply\
    \ a value for these three attributes in the\n   create request, the Printer object\
    \ MAY choose to change the value if\n   the Printer object is able to compute\
    \ a value which is more accurate\n   than the client supplied value.  The Printer\
    \ object may be able to\n   determine the correct value for these three attributes\
    \ either right\n   at job submission time or at any later point in time.\n"
- title: 4.3.18 job-impressions (integer(0:MAX))
  contents:
  - "4.3.18 job-impressions (integer(0:MAX))\n   This attribute specifies the total\
    \ size in number of impressions of\n   the document(s) being submitted (see the\
    \ definition of impression in\n   section 13.2.5).\n   As with \"job-k-octets\"\
    , this value MUST NOT include the\n   multiplicative factors contributed by the\
    \ number of copies specified\n   by the \"copies\" attribute, independent of whether\
    \ the device can\n   process multiple copies without making multiple passes over\
    \ the job\n   or document data and independent of whether the output is collated\
    \ or\n   not.  Thus the value is independent of the implementation and\n   reflects\
    \ the size of the document(s) measured in impressions\n   independent of the number\
    \ of copies.\n   As with \"job-k-octets\", this value MUST also not include the\n\
    \   multiplicative factor due to a copies instruction embedded in the\n   document\
    \ data.  If the document data actually includes replications\n   of the document\
    \ data, this value will include such replication.  In\n   other words, this value\
    \ is always the number of impressions in the\n   source document data, rather\
    \ than a measure of the number of\n   impressions to be produced by the job.\n\
    \   See the Note in the \"job-k-octets\" attribute that also applies to\n   this\
    \ attribute.\n"
- title: 4.3.19 job-media-sheets (integer(0:MAX))
  contents:
  - "4.3.19 job-media-sheets (integer(0:MAX))\n   This attribute specifies the total\
    \ number of media sheets to be\n   produced for this job.\n   Unlike the \"job-k-octets\"\
    \ and the \"job-impressions\" attributes, this\n   value MUST include the multiplicative\
    \ factors contributed by the\n   number of copies specified by the \"copies\"\
    \ attribute and a 'number of\n   copies' instruction embedded in the document\
    \ data, if any.  This\n   difference allows the system administrator to control\
    \ the lower and\n   upper bounds of both (1) the size of the document(s) with\
    \ \"job-k-\n   octets-supported\" and \"job-impressions-supported\" and (2) the\
    \ size of\n   the job with \"job-media-sheets-supported\".\n   See the Note in\
    \ the \"job-k-octets\" attribute that also applies to\n   this attribute.\n"
- title: 4.3.20 job-k-octets-processed (integer(0:MAX))
  contents:
  - "4.3.20 job-k-octets-processed (integer(0:MAX))\n   This attribute specifies the\
    \ total number of octets processed in K\n   octets, i.e., in units of 1024 octets\
    \ so far.  The value MUST be\n   rounded up, so that a job between 1 and 1024\
    \ octets inclusive MUST be\n   indicated as being 1, 1025 to 2048 inclusive MUST\
    \ be 2, etc.\n   For implementations where multiple copies are produced by the\n\
    \   interpreter with only a single pass over the data, the final value\n   MUST\
    \ be equal to the value of the \"job-k-octets\" attribute.  For\n   implementations\
    \ where multiple copies are produced by the interpreter\n   by processing the\
    \ data for each copy, the final value MUST be a\n   multiple of the value of the\
    \ \"job-k-octets\" attribute.\n   Note: This attribute and the following two attributes\
    \ (\"job-\n   impressions-completed\" and \"job-sheets-completed\") are intended\
    \ to be\n   counters. That is, the value for a job that has not started\n   processing\
    \ MUST be 0.  When the job's \"job-state\" is 'processing' or\n   'processing-stopped',\
    \ this value is intended to contain the amount of\n   the job that has been processed\
    \ to the time at which the attributes\n   are requested.\n"
- title: 4.3.21 job-impressions-completed (integer(0:MAX))
  contents:
  - "4.3.21 job-impressions-completed (integer(0:MAX))\n   This job attribute specifies\
    \ the number of impressions completed for\n   the job so far.  For printing devices,\
    \ the impressions completed\n   includes interpreting, marking, and stacking the\
    \ output.\n   See the note in \"job-k-octets-processed\" which also applies to\
    \ this\n   attribute.\n"
- title: 4.3.22 job-media-sheets-completed (integer(0:MAX))
  contents:
  - "4.3.22 job-media-sheets-completed (integer(0:MAX))\n   This job attribute specifies\
    \ the media-sheets completed marking and\n   stacking for the entire job so far\
    \ whether those sheets have been\n   processed on one side or on both.\n   See\
    \ the note in \"job-k-octets-processed\" which also applies to this\n   attribute.\n"
- title: 4.3.23 attributes-charset (charset)
  contents:
  - "4.3.23 attributes-charset (charset)\n   This REQUIRED attribute is populated\
    \ using the value in the client\n   supplied \"attributes-charset\" attribute\
    \ in the create request.  It\n   identifies the charset (coded character set and\
    \ encoding method) used\n   by any Job attributes with attribute syntax 'text'\
    \ and 'name' that\n   were supplied by the client in the create request.  See\
    \ Section 3.1.4\n   for a complete description of the \"attributes-charset\" operation\n\
    \   attribute.\n   This attribute does not indicate the charset in which the 'text'\
    \ and\n   'name' values are stored internally in the Job object.  The internal\n\
    \   charset is implementation-defined.  The IPP object MUST convert from\n   whatever\
    \ the internal charset is to that being requested in an\n   operation as specified\
    \ in Section 3.1.4.\n"
- title: 4.3.24 attributes-natural-language (naturalLanguage)
  contents:
  - "4.3.24 attributes-natural-language (naturalLanguage)\n   This REQUIRED attribute\
    \ is populated using the value in the client\n   supplied \"attributes-natural-language\"\
    \ attribute in the create\n   request.  It identifies the natural language used\
    \ for any Job\n   attributes with attribute syntax 'text' and 'name' that were\
    \ supplied\n   by the client in the create request.  See Section 3.1.4 for a\n\
    \   complete description of the \"attributes-natural-language\" operation\n  \
    \ attribute.  See Sections 4.1.1.2 and 4.1.2.2 for how a Natural\n   Language\
    \ Override may be supplied explicitly for each 'text' and '\n   name' attribute\
    \ value that differs from the value identified by the\n   \"attributes-natural-language\"\
    \ attribute.\n"
- title: 4.4 Printer Description Attributes
  contents:
  - "4.4 Printer Description Attributes\n   These attributes form the attribute group\
    \ called \"printer-\n   description\".  The following table summarizes these attributes,\
    \ their\n   syntax, and whether or not they are REQUIRED for a Printer object\
    \ to\n   support.  If they are not indicated as REQUIRED, they are OPTIONAL.\n\
    \   The maximum size in octets for 'text' and 'name' attributes is\n   indicated\
    \ in parenthesizes.\n   Note: How these attributes are set by an Administrator\
    \ is outside the\n   scope of this specification.\n  +----------------------------+----------------------+----------------+\n\
    \  |      Attribute             |     Syntax           |   REQUIRED?    |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-uri-supported      | 1setOf uri           |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | uri-security-supported     | 1setOf type2 keyword |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-name               | name (127)           |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-location           | text (127)           |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-info               | text (127)           |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-more-info          | uri                  |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-driver-installer   | uri                  |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-make-and-model     | text (127)           |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-more-info-         | uri                  |                |\n  |\
    \ manufacturer               |                      |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-state              | type1 enum           |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-state-reasons      | 1setOf type2 keyword |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-state-message      | text (MAX)           |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | operations-supported       | 1setOf type2 enum    |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | charset-configured         | charset              |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | charset-supported          | 1setOf charset       |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | natural-language-configured| naturalLanguage      |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | generated-natural-language-| 1setOf               |  REQUIRED      |\n  |\
    \ supported                  |   naturalLanguage    |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | document-format-default    | mimeMediaType        |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | document-format-           | 1setOf               |  REQUIRED      |\n  |\
    \   supported                |   mimeMediaType      |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-is-accepting-jobs  | boolean              |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | queued-job-count           | integer (0:MAX)      |  RECOMMENDED   |\n  +----------------------------+----------------------+----------------+\n\
    \  +----------------------------+----------------------+----------------+\n  |\
    \      Attribute             |     Syntax           |   REQUIRED?    |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-message-from-      | text (127)           |                |\n  |\
    \ operator                   |                      |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | color-supported            | boolean              |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | reference-uri-schemes-     | 1setOf uriScheme     |                |\n  |\
    \   supported                |                      |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | pdl-override-supported     | type2 keyword        |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-up-time            | integer (1:MAX)      |  REQUIRED      |\n  +----------------------------+----------------------+----------------+\n\
    \  | printer-current-time       | dateTime             |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | multiple-operation-time-out| integer (1:MAX)      |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | compression-supported      | 1setOf type3 keyword |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | job-k-octets-supported     | rangeOfInteger       |                |\n  |\
    \                            |    (0:MAX)           |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | job-impressions-supported  | rangeOfInteger       |                |\n  |\
    \                            |    (0:MAX)           |                |\n  +----------------------------+----------------------+----------------+\n\
    \  | job-media-sheets-supported | rangeOfInteger       |                |\n  |\
    \                            |    (0:MAX)           |                |\n  +----------------------------+----------------------+----------------+\n"
- title: 4.4.1 printer-uri-supported (1setOf uri)
  contents:
  - "4.4.1 printer-uri-supported (1setOf uri)\n   This REQUIRED Printer attribute\
    \ contains at least one URI for the\n   Printer object.  It OPTIONALLY contains\
    \ more than one URI for the\n   Printer object.    An administrator determines\
    \ a Printer object's\n   URI(s) and configures this attribute to contain those\
    \ URIs by some\n   means outside the scope of IPP/1.0.  The precise format of\
    \ this URI\n   is implementation dependent and depends on the protocol.  See the\n\
    \   next section for a description \"uri-security-supported\" which is the\n \
    \  REQUIRED companion attribute to this \"printer-uri-supported\"\n   attribute.\
    \  See section 2.4 on Printer object identity and section\n   8.2 on security\
    \ and URIs for more information.\n"
- title: 4.4.2 uri-security-supported (1setOf type2 keyword)
  contents:
  - "4.4.2 uri-security-supported (1setOf type2 keyword)\n   This REQUIRED Printer\
    \ attribute MUST have the same cardinality\n   (contain the same number of values)\
    \ as the \"printer-uri-supported\"\n   attribute.  This attribute identifies the\
    \ security mechanisms used\n   for each URI listed in the \"printer-uri-supported\"\
    \ attribute.  The \"i\n   th\" value in \"uri-security-supported\" corresponds\
    \ to the \"i th\" value\n   in \"printer-uri-supported\" and it describes the\
    \ security mechanisms\n   used for accessing the Printer object via that URI.\
    \ The following\n   standard values are defined:\n     'none': There are no secure\
    \ communication channel protocols in use\n        for the given URI.\n     'ssl3':\
    \ SSL3 [SSL] is the secure communications channel protocol in\n        use for\
    \ the given URI.\n   Consider the following example.  For a single Printer object,\
    \ an\n   administrator configures the \"printer-uri-supported\" and \"uri-\n \
    \  security-supported\" attributes as follows:\n     \"printer-uri-supported\"\
    : 'http://acme.com/open-use-printer', '\n        http://acme.com/restricted-use-printer',\
    \ '\n        http://acme.com/private-printer'\n     \"uri-security-supported\"\
    : 'none', 'none', 'ssl3'\n   In this case, one Printer object has three URIs.\n\
    \     - For the first URI, 'http://acme.com/open-use-printer', the value\n   \
    \     'none' in \"uri-security-supported\" indicates that there is no\n      \
    \  secure channel protocol configured to run under HTTP.  The name\n        implies\
    \ that there is no Basic or Digest authentication being\n        used, but it\
    \ is up to the client to determine that while using\n        HTTP underneath the\
    \ IPP application protocol.\n     - For the second URI, 'http://acme.com/restricted-use-printer',\
    \ the\n        value 'none' in \"uri-security-supported\" indicates that there\
    \ is\n        no secure channel protocol configured to run under HTTP.  In\n \
    \       this case, although the name does imply that there is some sort\n    \
    \    of Basic or Digest authentication being used within HTTP, it is\n       \
    \ up to the client to determine that while using HTTP and by\n        processing\
    \ any '401 Unauthorized' HTTP error messages.\n     - For the third URI, 'http://acme.com/private-printer',\
    \ the value '\n        ssl3' in \"uri-security-supported\" indicates that SSL3\
    \ is being\n        used to secure the channel.  The client SHOULD be prepared\
    \ to\n        use SSL3 framing to negotiate an acceptable ciphersuite to use\n\
    \        while communicating with the Printer object.  In this case, the\n   \
    \     name implies the use of a secure communications channel, but the\n     \
    \   fact is made explicit by the presence of the 'ssl3' value in\n        \"uri-security-supported\"\
    .  The client does not need to resort to\n        understanding which security\
    \ it must use by following naming\n        conventions or by parsing the URI to\
    \ determine which security\n        mechanisms are implied.\n   It is expected\
    \ that many IPP Printer objects will be configured to\n   support only one channel\
    \ (either configured to use SSL3 access or\n   not), and will therefore only ever\
    \ have one URI listed in the\n   \"printer-uri-supported\" attribute.  No matter\
    \ the configuration of\n   the Printer object (whether it has only one URI or\
    \ more than one\n   URI), a client MUST supply only one URI in the target \"printer-uri\"\
    \n   operation attribute.\n"
- title: 4.4.3 printer-name (name(127))
  contents:
  - "4.4.3 printer-name (name(127))\n   This REQUIRED Printer attribute contains the\
    \ name of the Printer\n   object.  It is a name that is more end-user friendly\
    \ than a URI. An\n   administrator determines a printer's name and sets this attribute\
    \ to\n   that name. This name may be the last part of the printer's URI or it\n\
    \   may be unrelated.  In non-US-English locales, a name may contain\n   characters\
    \ that are not allowed in a URI.\n"
- title: 4.4.4 printer-location (text(127))
  contents:
  - "4.4.4 printer-location (text(127))\n   This Printer attribute identifies the\
    \ location of the device. This\n   could include things like: \"in Room 123A,\
    \ second floor of building\n   XYZ\".\n"
- title: 4.4.5 printer-info (text(127))
  contents:
  - "4.4.5 printer-info (text(127))\n   This Printer attribute identifies the descriptive\
    \ information about\n   this Printer object.  This could include things like:\
    \ \"This printer\n   can be used for printing color transparencies for HR presentations\"\
    ,\n   or \"Out of courtesy for others, please print only small (1-5 page)\n  \
    \ jobs at this printer\", or even \"This printer is going away on July 1,\n  \
    \ 1997, please find a new printer\".\n"
- title: 4.4.6 printer-more-info (uri)
  contents:
  - "4.4.6 printer-more-info (uri)\n   This Printer attribute contains a URI used\
    \ to obtain more information\n   about this specific Printer object.  For example,\
    \ this could be an\n   HTTP type URI referencing an HTML page accessible to a\
    \ Web Browser.\n   The information obtained from this URI is intended for end\
    \ user\n   consumption.  Features outside the scope of IPP can be accessed from\n\
    \   this URI.  The information is intended to be specific to this printer\n  \
    \ instance and site specific services (e.g. job pricing, services\n   offered,\
    \ end user assistance). The device manufacturer may initially\n   populate this\
    \ attribute.\n"
- title: 4.4.7 printer-driver-installer (uri)
  contents:
  - "4.4.7 printer-driver-installer (uri)\n   This Printer attribute contains a URI\
    \ to use to locate the driver\n   installer for this Printer object.   This attribute\
    \ is intended for\n   consumption by automata.  The mechanics of print driver\
    \ installation\n   is outside the scope of IPP.  The device manufacturer may initially\n\
    \   populate this attribute.\n"
- title: 4.4.8 printer-make-and-model (text(127))
  contents:
  - "4.4.8 printer-make-and-model (text(127))\n   This Printer attribute identifies\
    \ the make and model of the device.\n   The device manufacturer may initially\
    \ populate this attribute.\n"
- title: 4.4.9 printer-more-info-manufacturer (uri)
  contents:
  - "4.4.9 printer-more-info-manufacturer (uri)\n   This Printer attribute contains\
    \ a URI used to obtain more information\n   about this type of device.  The information\
    \ obtained from this URI is\n   intended for end user consumption.  Features outside\
    \ the scope of IPP\n   can be accessed from this URI (e.g., latest firmware, upgrades,\
    \ print\n   drivers, optional features available, details on color support). \
    \ The\n   information is intended to be germane to this printer without regard\n\
    \   to site specific modifications or services. The device manufacturer\n   may\
    \ initially populate this attribute.\n"
- title: 4.4.10 printer-state (type1 enum)
  contents:
  - "4.4.10 printer-state (type1 enum)\n   This REQUIRED Printer attribute identifies\
    \ the current state of the\n   device.  The \"printer-state reasons\" attribute\
    \ augments the\n   \"printer-state\" attribute to give more detailed information\
    \ about the\n   Printer in the given printer state.\n   A Printer object need\
    \ only update this attribute before responding to\n   an operation which requests\
    \ the attribute; the Printer object NEED\n   NOT update this attribute continually,\
    \ since asynchronous event\n   notification is not part of IPP/1.0.  A Printer\
    \ NEED NOT implement\n   all values if they are not applicable to a given implementation.\n\
    \   The following standard enum values are defined:\n     Value  Symbolic Name\
    \ and Description\n     '3'    'idle':  If a Printer receives a job (whose required\n\
    \                  resources are ready) while in this state, such a job\n    \
    \              MUST transit into the 'processing' state immediately.\n       \
    \           If the \"printer-state-reasons\" attribute contains any\n        \
    \          reasons, they MUST be reasons that would not prevent a\n          \
    \        job from transiting into the 'processing' state\n                  immediately,\
    \ e.g., 'toner-low'. Note: if a Printer\n                  controls more than\
    \ one output device, the above\n                  definition implies that a Printer\
    \ is 'idle' if at\n                  least one output device is idle.\n     '4'\
    \    'processing':  If a Printer receives a job (whose required\n            \
    \      resources are ready) while in this state, such a job\n                \
    \  MUST transit into the 'pending' state immediately.\n                  Such\
    \ a job MUST transit into the 'processing' state\n                  only after\
    \ jobs ahead of it complete.  If the\n                  \"printer-state-reasons\"\
    \ attribute contains any\n                  reasons, they MUST be reasons that\
    \ do not prevent the\n                  current job from printing, e.g.  'toner-low'.\
    \  Note:\n                  if a Printer controls more than one output device,\
    \ the\n                  above definition implies that a Printer is '\n      \
    \            processing' if at least one output device is\n                  processing,\
    \ and none is idle.\n     '5'    'stopped':  If a Printer receives a job (whose\
    \ required\n                  resources are ready) while in this state, such a\
    \ job\n                  MUST transit into the 'pending' state immediately.\n\
    \                  Such a job MUST transit into the 'processing' state\n     \
    \             only after some human fixes the problem that stopped\n         \
    \         the printer and after jobs ahead of it complete\n                  processing.\
    \  If supported, the \"printer-state-reasons\"\n                  attribute MUST\
    \ contain at least one reason, e.g. '\n                  media-jam', which prevents\
    \ it from either processing\n                  the current job or transitioning\
    \ a 'pending' job to\n                  the 'processing' state.\n            \
    \      Note: if a Printer controls more than one output\n                  device,\
    \ the above definition implies that a Printer is\n                  'stopped'\
    \ only if all output devices are stopped.\n                  Also, it is tempting\
    \ to define 'stopped' as when a\n                  sufficient number of output\
    \ devices are stopped and\n                  leave it to an implementation to\
    \ define the sufficient\n                  number.  But such a rule complicates\
    \ the definition of\n                  'stopped' and 'processing'. For example,\
    \ with this\n                  alternate definition of 'stopped', a job can move\
    \ from\n                  'pending' to 'processing' without human intervention,\n\
    \                  even though the Printer is stopped.\n"
- title: 4.4.11 printer-state-reasons (1setOf type2 keyword)
  contents:
  - "4.4.11 printer-state-reasons (1setOf type2 keyword)\n   This Printer attribute\
    \ supplies additional detail about the device's\n   state.\n   Each keyword value\
    \ MAY have a suffix to indicate its level of\n   severity.  The three levels are:\
    \ report (least severe), warning, and\n   error (most severe).\n     - '-report':\
    \  This suffix indicates that the reason is a \"report\".\n        An implementation\
    \ may choose to omit some or all reports. Some\n        reports specify finer\
    \ granularity about the printer state;\n        others serve as a precursor to\
    \ a warning. A report MUST contain\n        nothing that could affect the printed\
    \ output.\n     - '-warning': This suffix indicates that the reason is a \"warning\"\
    .\n        An implementation may choose to omit some or all warnings.\n      \
    \  Warnings serve as a precursor to an error. A warning MUST\n        contain\
    \ nothing that prevents a job from completing, though in\n        some cases the\
    \ output may be of lower quality.\n     - '-error': This suffix indicates that\
    \ the reason is an \"error\".\n        An implementation MUST include all errors.\
    \ If this attribute\n        contains one or more errors, printer MUST be in the\
    \ stopped\n        state.\n   If the implementation does not add any one of the\
    \ three suffixes, all\n   parties MUST assume that the reason is an \"error\"\
    .\n   If a Printer object controls more than one output device, each value\n \
    \  of this attribute MAY apply to one or more of the output devices.  An\n   error\
    \ on one output device that does not stop the Printer object as a\n   whole MAY\
    \ appear as a warning in the Printer's \"printer-state-reasons\n   attribute\"\
    .  If the \"printer-state\" for such a Printer has a value of\n   'stopped', then\
    \ there MUST be an error reason among the values in the\n   \"printer-state-reasons\"\
    \ attribute.\n   The following standard keyword values are defined:\n     'other':\
    \ The device has detected an error other than one listed in\n        this document.\n\
    \     'none': There are not reasons. This state reason is semantically\n     \
    \   equivalent to \"printer-state-reasons\" without any value.\n     'media-needed':\
    \ A tray has run out of media.\n     'media-jam': The device has a media jam.\n\
    \     'paused': Someone has paused the Printer object.  In this state, a\n   \
    \     Printer MUST NOT produce printed output, but it MUST perform\n        other\
    \ operations requested by a client.  If a Printer had been\n        printing a\
    \ job when the Printer was paused, the Printer MUST\n        resume printing that\
    \ job when the Printer is no longer paused\n        and leave no evidence in the\
    \ printed output of such a pause.\n     'shutdown': Someone has removed a Printer\
    \ object from service, and\n        the device may be powered down or physically\
    \ removed.  In this\n        state, a Printer object MUST NOT produce printed\
    \ output, and\n        unless the Printer object is realized by a print server\
    \ that is\n        still active, the Printer object MUST perform no other\n  \
    \      operations requested by a client, including returning this\n        value.\
    \ If a Printer object had been printing a job when it was\n        shutdown, the\
    \ Printer NEED NOT resume printing that job when the\n        Printer is no longer\
    \ shutdown. If the Printer resumes printing\n        such a job, it may leave\
    \ evidence in the printed output of such\n        a shutdown, e.g. the part printed\
    \ before the shutdown may be\n        printed a second time after the shutdown.\n\
    \     'connecting-to-device': The Printer object has scheduled a job on\n    \
    \    the output device and is in the process of connecting to a\n        shared\
    \ network output device (and might not be able to actually\n        start printing\
    \ the job for an arbitrarily long time depending on\n        the usage of the\
    \ output device by other servers on the network).\n     'timed-out': The server\
    \ was able to connect to the output device\n        (or is always connected),\
    \ but was unable to get a response from\n        the output device.\n     'stopping':\
    \ The Printer object is in the process of stopping the\n        device and will\
    \ be stopped in a while. When the device is\n        stopped, the Printer object\
    \ will change the Printer object's\n        state to 'stopped'.  The 'stopping-warning'\
    \ reason is never an\n        error, even for a Printer with a single output device.\
    \  When an\n        output-device ceases accepting jobs, the Printer will have\
    \ this\n        reason while the output device completes printing.\n     'stopped-partly':\
    \ When a Printer object controls more than one\n        output device, this reason\
    \ indicates that one or more output\n        devices are stopped.  If the reason\
    \ is a report, fewer than half\n        of the output devices are stopped.  If\
    \ the reason is a warning,\n        fewer than all of the output devices are stopped.\n\
    \     'toner-low': The device is low on toner.\n     'toner-empty': The device\
    \ is out of toner.\n     'spool-area-full': The limit of persistent storage allocated\
    \ for\n        spooling has been reached.\n     'cover-open': One or more covers\
    \ on the device are open.\n     'interlock-open': One or more interlock devices\
    \ on the printer are\n        unlocked.\n     'door-open': One or more doors on\
    \ the device are open.\n     'input-tray-missing': One or more input trays are\
    \ not in the\n        device.\n     'media-low': At least one input tray is low\
    \ on media.\n     'media-empty': At least one input tray is empty.\n     'output-tray-missing':\
    \ One or more output trays are not in the\n        device\n     'output-area-almost-full':\
    \ One or more output area is almost full\n        (e.g. tray, stacker, collator).\n\
    \     'output-area-full': One or more output area is full. (e.g. tray,\n     \
    \   stacker, collator)\n     'marker-supply-low': The device is low on at least\
    \ one marker\n        supply.  (e.g. toner, ink, ribbon)\n     'marker-supply-empty:\
    \ The device is out of at least one marker\n        supply. (e.g. toner, ink,\
    \ ribbon)\n     'marker-waste-almost-full': The device marker supply waste\n \
    \       receptacle is almost full.\n     'marker-waste-full': The device marker\
    \ supply waste receptacle is\n        full.\n     'fuser-over-temp': The fuser\
    \ temperature is above normal.\n     'fuser-under-temp': The fuser temperature\
    \ is below normal.\n     'opc-near-eol': The optical photo conductor is near end\
    \ of life.\n     'opc-life-over': The optical photo conductor is no longer\n \
    \       functioning.\n     'developer-low': The device is low on developer.\n\
    \     'developer-empty: The device is out of developer.\n     'interpreter-resource-unavailable':\
    \ An interpreter resource is\n        unavailable (i.e. font, form)\n"
- title: 4.4.12 printer-state-message (text(MAX))
  contents:
  - "4.4.12 printer-state-message (text(MAX))\n   This Printer attribute specifies\
    \ the additional information about the\n   printer state and printer state reasons\
    \ in human readable text.  If\n   the Printer object supports this attribute,\
    \ the Printer object MUST\n   be able to generate this message in any of the natural\
    \ languages\n   identified by the Printer's \"generated-natural-language-supported\"\
    \n   attribute (see the \"attributes-natural-language\" operation attribute\n\
    \   specified in Section 3.1.4.1).\n"
- title: 4.4.13 operations-supported (1setOf type2 enum)
  contents:
  - "4.4.13 operations-supported (1setOf type2 enum)\n   This REQUIRED Printer attribute\
    \ specifies the set of supported\n   operations for this Printer object and contained\
    \ Job objects.  All\n   32-bit enum values for this attribute MUST NOT exceed\
    \ 0x8FFF, since\n   these values are passed in two octets in each Protocol request\n\
    \   [RFC2565].\n   The following standard enum and \"operation-id\" (see section\
    \ 3.1.2)\n   values are defined:\n     Value               Operation Name\n  \
    \   -----------------   -------------------------------------\n     0x0000   \
    \           reserved, not used\n     0x0001              reserved, not used\n\
    \     0x0002              Print-Job\n     0x0003              Print-URI\n    \
    \ 0x0004              Validate-Job\n     0x0005              Create-Job\n    \
    \ 0x0006              Send-Document\n     0x0007              Send-URI\n     0x0008\
    \              Cancel-Job\n     0x0009              Get-Job-Attributes\n     0x000A\
    \              Get-Jobs\n     0x000B              Get-Printer-Attributes\n   \
    \  0x000C-0x3FFF       reserved for future operations\n     0x4000-0x8FFF    \
    \   reserved for private extensions\n   This allows for certain vendors to implement\
    \ private extensions that\n   are guaranteed to not conflict with future registered\
    \ extensions.\n   However, there is no guarantee that two or more private extensions\n\
    \   will not conflict.\n"
- title: 4.4.14 charset-configured (charset)
  contents:
  - "4.4.14 charset-configured (charset)\n   This REQUIRED Printer attribute identifies\
    \ the charset that the\n   Printer object has been configured to represent 'text'\
    \ and 'name'\n   Printer attributes that are set by the operator, system\n   administrator,\
    \ or manufacturer, i.e., for \"printer-name\" (name),\n   \"printer-location\"\
    \ (text), \"printer-info\" (text), and \"printer-make-\n   and-model\" (text).\
    \  Therefore, the value of the Printer object's\n   \"charset-configured\" attribute\
    \ MUST also be among the values of the\n   Printer object's \"charset-supported\"\
    \ attribute.\n"
- title: 4.4.15 charset-supported (1setOf charset)
  contents:
  - "4.4.15 charset-supported (1setOf charset)\n   This REQUIRED Printer attribute\
    \ identifies the set of charsets that\n   the Printer and contained Job objects\
    \ support in attributes with\n   attribute syntax 'text' and 'name'. At least\
    \ the value 'utf-8' MUST\n   be present, since IPP objects MUST support the UTF-8\
    \ [RFC2279]\n   charset.  If a Printer object supports a charset, it means that\
    \ for\n   all attributes of syntax 'text' and 'name' the IPP object MUST (1)\n\
    \   accept the charset in requests and return the charset in responses as\n  \
    \ needed.\n   If more charsets than UTF-8 are supported, the IPP object MUST\n\
    \   perform charset conversion between the charsets as described in\n   Section\
    \ 3.2.1.2.\n"
- title: 4.4.16 natural-language-configured (naturalLanguage)
  contents:
  - "4.4.16 natural-language-configured (naturalLanguage)\n   This REQUIRED Printer\
    \ attribute identifies the natural language that\n   the Printer object has been\
    \ configured to represent 'text' and 'name'\n   Printer attributes that are set\
    \ by the operator, system\n   administrator, or manufacturer, i.e., for \"printer-name\"\
    \ (name),\n   \"printer-location\" (text), \"printer-info\" (text), and \"printer-make-\n\
    \   and-model\" (text).  When returning these Printer attributes, the\n   Printer\
    \ object MAY return them in the configured natural language\n   specified by this\
    \ attribute, instead of the natural language\n   requested by the client in the\
    \ \"attributes-natural-language\"\n   operation attribute.  See Section 3.1.4.1\
    \ for the specification of\n   the OPTIONAL multiple natural language support.\
    \  Therefore, the value\n   of the Printer object's \"natural-language-configured\"\
    \ attribute MUST\n   also be among the values of the Printer object's \"generated-natural-\n\
    \   language-supported\" attribute.\n"
- title: 4.4.17 generated-natural-language-supported (1setOf naturalLanguage)
  contents:
  - "4.4.17 generated-natural-language-supported (1setOf naturalLanguage)\n   This\
    \ REQUIRED Printer attribute identifies the natural language(s)\n   that the Printer\
    \ object and contained Job objects support in\n   attributes with attribute syntax\
    \ 'text' and 'name'.  The natural\n   language(s) supported depends on implementation\
    \ and/or configuration.\n   Unlike charsets, IPP objects MUST accept requests\
    \ with any natural\n   language or any Natural Language Override whether the natural\n\
    \   language is supported or not.\n   If a Printer object supports a natural language,\
    \ it means that for\n   any of the attributes for which the Printer or Job object\
    \ generates\n   messages, i.e., for the \"job-state-message\" and \"printer-state-\n\
    \   message\" attributes and Operation Messages (see Section 3.1.5) in\n   operation\
    \ responses, the Printer and Job objects MUST be able to\n   generate messages\
    \ in any of the Printer's supported natural\n   languages.  See section 3.1.4\
    \ for the specification of 'text' and '\n   name' attributes in operation requests\
    \ and responses.\n   Note: A Printer object that supports multiple natural languages,\n\
    \   often has separate catalogs of messages, one for each natural\n   language\
    \ supported.\n"
- title: 4.4.18 document-format-default (mimeMediaType)
  contents:
  - "4.4.18 document-format-default (mimeMediaType)\n   This REQUIRED Printer attribute\
    \ identifies the document format that\n   the Printer object has been configured\
    \ to assume if the client does\n   not supply a \"document-format\" operation\
    \ attribute in any of the\n   operation requests that supply document data.  The\
    \ standard values\n   for this attribute are Internet Media types (sometimes called\
    \ MIME\n   types).  For further details see the description of the '\n   mimeMediaType'\
    \ attribute syntax in Section 4.1.9.\n"
- title: 4.4.19 document-format-supported (1setOf mimeMediaType)
  contents:
  - "4.4.19 document-format-supported (1setOf mimeMediaType)\n   This REQUIRED Printer\
    \ attribute identifies the set of document\n   formats that the Printer object\
    \ and contained Job objects can\n   support. For further details see the description\
    \ of the '\n   mimeMediaType' attribute syntax in Section 4.1.9.\n"
- title: 4.4.20 printer-is-accepting-jobs (boolean)
  contents:
  - "4.4.20 printer-is-accepting-jobs (boolean)\n   This REQUIRED Printer attribute\
    \ indicates whether the printer is\n   currently able to accept jobs, i.e., is\
    \ accepting Print-Job, Print-\n   URI, and Create-Job requests.  If the value\
    \ is 'true', the printer is\n   accepting jobs.  If the value is 'false', the\
    \ Printer object is\n   currently rejecting any jobs submitted to it.  In this\
    \ case, the\n   Printer object returns the 'server-error-not-accepting-jobs' status\n\
    \   code.\n   Note: This value is independent of the \"printer-state\" and \"\
    printer-\n   state-reasons\" attributes because its value does not affect the\n\
    \   current job; rather it affects future jobs.  This attribute may cause\n  \
    \ the Printer to reject jobs when the \"printer-state\" is 'idle' or it\n   may\
    \ cause the Printer object to accepts jobs when the \"printer-state\"\n   is 'stopped'.\n"
- title: 4.4.21 queued-job-count (integer(0:MAX))
  contents:
  - "4.4.21 queued-job-count (integer(0:MAX))\n   This RECOMMENDED Printer attribute\
    \ contains a count of the number of\n   jobs that are either 'pending', 'processing',\
    \ 'pending-held', or '\n   processing-stopped' and is set by the Printer object.\n"
- title: 4.4.22 printer-message-from-operator (text(127))
  contents:
  - "4.4.22 printer-message-from-operator (text(127))\n   This Printer attribute provides\
    \ a message from an operator, system\n   administrator or \"intelligent\" process\
    \ to indicate to the end user\n   information or status of the printer, such as\
    \ why it is unavailable\n   or when it is expected to be available.\n"
- title: 4.4.23 color-supported (boolean)
  contents:
  - "4.4.23 color-supported (boolean)\n   This Printer attribute identifies whether\
    \ the device is capable of\n   any type of color printing at all, including highlight\
    \ color.  All\n   document instructions having to do with color are embedded within\
    \ the\n   document PDL (none are external IPP attributes in IPP/1.0).\n   Note:\
    \  end-users are able to determine the nature and details of the\n   color support\
    \ by querying the \"printer-more-info-manufacturer\"\n   Printer attribute.\n"
- title: 4.4.24 reference-uri-schemes-supported (1setOf uriScheme)
  contents:
  - "4.4.24 reference-uri-schemes-supported (1setOf uriScheme)\n   This Printer attribute\
    \ specifies which URI schemes are supported for\n   use in the \"document-uri\"\
    \ operation attribute of the Print-URI or\n   Send-URI operation.  If a Printer\
    \ object supports these optional\n   operations, it MUST support the \"reference-uri-schemes-supported\"\
    \n   Printer attribute with at least the following schemed URI value:\n     'ftp':\
    \  The Printer object will use an FTP 'get' operation as\n        defined in RFC\
    \ 2228 [RFC2228] using FTP URLs as defined by\n        [RFC2396] and[RFC2316].\n\
    \   The Printer object MAY OPTIONALLY support other URI schemes (see\n   section\
    \ 4.1.6).\n"
- title: 4.4.25 pdl-override-supported (type2 keyword)
  contents:
  - "4.4.25 pdl-override-supported (type2 keyword)\n   This REQUIRED Printer attribute\
    \ expresses the ability for a\n   particular Printer implementation to either\
    \ attempt to override\n   document data instructions with IPP attributes or not.\n\
    \   This attribute takes on the following values:\n     - 'attempted': This value\
    \ indicates that the Printer object\n       attempts to make the IPP attribute\
    \ values take precedence over\n       embedded instructions in the document data,\
    \ however there is no\n       guarantee.\n     - 'not-attempted': This value indicates\
    \ that the Printer object\n       makes no attempt to make the IPP attribute values\
    \ take precedence\n       over embedded instructions in the document data.\n \
    \  Section 15 contains a full description of how this attribute\n   interacts\
    \ with and affects other IPP attributes, especially the\n   \"ipp-attribute-fidelity\"\
    \ attribute.\n"
- title: 4.4.26 printer-up-time (integer(1:MAX))
  contents:
  - "4.4.26 printer-up-time (integer(1:MAX))\n   This REQUIRED Printer attribute indicates\
    \ the amount of time (in\n   seconds) that this instance of this Printer implementation\
    \ has been\n   up and running.  This value is used to populate the Job attributes\n\
    \   \"time-at-creation\", \"time-at-processing\", and \"time-at-completed\".\n\
    \   These time values are all measured in seconds and all have meaning\n   only\
    \ relative to this attribute, \"printer-up-time\".  The value is a\n   monotonically\
    \ increasing value starting from 1 when the Printer\n   object is started-up (initialized,\
    \ booted, etc.).\n   If the Printer object goes down at some value 'n', and comes\
    \ back up,\n   the implementation MAY:\n     1. Know how long it has been down,\
    \ and resume at some value greater\n        than 'n', or\n     2. Restart from\
    \ 1.\n   In the first case, the Printer SHOULD not tweak any existing related\n\
    \   Job attributes (\"time-at-creation\", \"time-at-processing\", and \"time-\n\
    \   at-completed\").  In the second case, the Printer object SHOULD reset\n  \
    \ those attributes to 0.  If a client queries a time-related Job\n   attribute\
    \ and finds the value to be 0, the client MUST assume that\n   the Job was submitted\
    \ in some life other than the Printer's current\n   life.\n"
- title: 4.4.27 printer-current-time (dateTime)
  contents:
  - "4.4.27 printer-current-time (dateTime)\n   This Printer attribute indicates the\
    \ current absolute wall-clock\n   time.  If an implementation supports this attribute,\
    \ then a client\n   could calculate the absolute wall-clock time each Job's \"\
    time-at-\n   creation\", \"time-at-processing\", and \"time-at-completed\" attributes\n\
    \   by using both \"printer-up-time\" and this attribute, \"printer-\n   current-time\"\
    .  If an implementation does not support this attribute,\n   a client can only\
    \ calculate the relative time of certain events based\n   on the REQUIRED \"printer-up-time\"\
    \ attribute.\n"
- title: 4.4.28 multiple-operation-time-out (integer(1:MAX))
  contents:
  - "4.4.28 multiple-operation-time-out (integer(1:MAX))\n   This Printer attributes\
    \ identifies the minimum time (in seconds) that\n   the Printer object waits for\
    \ additional Send-Document or Send-URI\n   operations to follow a still-open multi-document\
    \ Job object before\n   taking  any recovery actions, such as the ones indicated\
    \ in section\n   3.3.1.\n   It is RECOMMENDED that vendors supply a value for\
    \ this attribute that\n   is between 60 and 240 seconds.  An implementation MAY\
    \ allow a system\n   administrator to set this attribute.  If so, the system administrator\n\
    \   MAY be able to set values outside this range.\n"
- title: 4.4.29 compression-supported (1setOf type3 keyword)
  contents:
  - "4.4.29 compression-supported (1setOf type3 keyword)\n   This Printer attribute\
    \ identifies the set of supported compression\n   algorithms for document data.\
    \  Compression only applies to the\n   document data; compression does not apply\
    \ to the encoding of the IPP\n   operation itself.  The supported values are used\
    \ to validate the\n   client supplied \"compression\" operation attributes in\
    \ Print-Job,\n   Send-Document, and Send-URI requests.\n   Standard values are\
    \ :\n     'none': no compression is used.\n     'deflate':  ZIP public domain\
    \ inflate/deflate) compression\n        technology\n     'gzip' GNU zip compression\
    \ technology described in RFC 1952\n        [RFC1952].\n     'compress': UNIX\
    \ compression technology\n"
- title: 4.4.30 job-k-octets-supported (rangeOfInteger(0:MAX))
  contents:
  - "4.4.30 job-k-octets-supported (rangeOfInteger(0:MAX))\n   This Printer attribute\
    \ specifies the upper and lower bounds of total\n   sizes of jobs in K octets,\
    \ i.e., in units of 1024 octets. The\n   supported values are used to validate\
    \ the client supplied \"job-k-\n   octets\" operation attributes in create requests.\
    \  The corresponding\n   job description attribute \"job-k-octets\" is defined\
    \ in section\n   4.3.17.\n   4.4.31 job-impressions-supported (rangeOfInteger(0:MAX))\n\
    \   This Printer attribute specifies the upper and lower bounds for the\n   number\
    \ of impressions per job. The supported values are used to\n   validate the client\
    \ supplied \"job-impressions\" operation attributes\n   in create requests.  The\
    \ corresponding job description attribute\n   \"job-impressions\" is defined in\
    \ section 4.3.18.\n"
- title: 4.4.32 job-media-sheets-supported (rangeOfInteger(0:MAX))
  contents:
  - "4.4.32 job-media-sheets-supported (rangeOfInteger(0:MAX))\n   This Printer attribute\
    \ specifies the upper and lower bounds for the\n   number of media sheets per\
    \ job. The supported values are used to\n   validate the client supplied \"job-media-sheets\"\
    \ operation attributes\n   in create requests.  The corresponding Job attribute\
    \ \"job-media-\n   sheets\" is defined in section 4.3.19.\n"
- title: 5. Conformance
  contents:
  - "5. Conformance\n   This section describes conformance issues and requirements.\
    \ This\n   document introduces model entities such as objects, operations,\n \
    \  attributes, attribute syntaxes, and attribute values.  These\n   conformance\
    \ sections describe the conformance requirements which\n   apply to these model\
    \ entities.\n"
- title: 5.1 Client Conformance Requirements
  contents:
  - "5.1 Client Conformance Requirements\n   A conforming client MUST support all\
    \ REQUIRED operations as defined\n   in this document.  For each attribute included\
    \ in an operation\n   request, a conforming client MUST supply a value whose type\
    \ and value\n   syntax conforms to the requirements of the Model document as\n\
    \   specified in Sections 3 and 4.  A conforming client MAY supply any\n   registered\
    \ extensions and/or private extensions in an operation\n   request, as long as\
    \ they meet the requirements in Section 6.\n   Otherwise, there are no conformance\
    \ requirements placed on the user\n   interfaces provided by IPP clients or their\
    \ applications.  For\n   example, one application might not allow an end user\
    \ to submit\n   multiple documents per job, while another does.  One application\n\
    \   might first query a Printer object in order to supply a graphical\n   user\
    \ interface (GUI) dialogue box with supported and default values\n   whereas a\
    \ different implementation might not.\n   When sending a request, an IPP client\
    \ NEED NOT supply any attributes\n   that are indicated as OPTIONALLY supplied\
    \ by the client.\n   A client MUST be able to accept any of the attribute syntaxes\
    \ defined\n   in Section 4.1, including their full range, that may be returned\
    \ to\n   it in a response from a Printer object.  In particular for each\n   attribute\
    \ that the client supports whose attribute syntax is 'text',\n   the client MUST\
    \ accept and process both the 'textWithoutLanguage' and\n   'textWithLanguage'\
    \ forms.  Similarly, for each attribute that the\n   client supports whose attribute\
    \ syntax is 'name', the client MUST\n   accept and process both the 'nameWithoutLanguage'\
    \ and '\n   nameWithLanguage' forms.  For presentation purposes, truncation of\n\
    \   long attribute values is not recommended.  A recommended approach\n   would\
    \ be for the client implementation to allow the user to scroll\n   through long\
    \ attribute values.\n   A query response may contain attribute groups, attributes,\
    \ and values\n   that the client does not expect.  Therefore, a client implementation\n\
    \   MUST gracefully handle such responses and not refuse to inter-operate\n  \
    \ with a conforming Printer that is returning extended registered or\n   private\
    \ attributes and/or attribute values that conform to Section 6.\n   Clients may\
    \ choose to ignore any parameters, attributes, or values\n   that they do not\
    \ understand.\n"
- title: 5.2 IPP Object Conformance Requirements
  contents:
  - "5.2 IPP Object Conformance Requirements\n   This section specifies the conformance\
    \ requirements for conforming\n   implementations with respect to objects, operations,\
    \ and attributes.\n"
- title: 5.2.1 Objects
  contents:
  - "5.2.1 Objects\n   Conforming implementations MUST implement all of the model\
    \ objects as\n   defined in this specification in the indicated sections:\n  \
    \   Section 2.1 - Printer Object\n     Section 2.2 - Job Object\n"
- title: 5.2.2 Operations
  contents:
  - "5.2.2 Operations\n   Conforming IPP object implementations MUST implement all\
    \ of the\n   REQUIRED model operations, including REQUIRED responses, as defined\n\
    \   in this specification in the indicated sections:\n     For a Printer object:\n\
    \        Print-Job (section 3.2.1)          REQUIRED\n        Print-URI (section\
    \ 3.2.2)          OPTIONAL\n        Validate-Job (section 3.2.3)       REQUIRED\n\
    \        Create-Job (section 3.2.4)         OPTIONAL\n        Get-Printer-Attributes\
    \ (section 3.2.5)  REQUIRED\n        Get-Jobs (section 3.2.6)           REQUIRED\n\
    \     For a Job object:\n        Send-Document (section 3.3.1)      OPTIONAL\n\
    \        Send-URI (section 3.3.2)           OPTIONAL\n        Cancel-Job (section\
    \ 3.3.3)         REQUIRED\n        Get-Job-Attributes (section 3.3.4) REQUIRED\n\
    \   Conforming IPP objects MUST support all REQUIRED operation attributes\n  \
    \ and all values of such attributes if so indicated in the description.\n   Conforming\
    \ IPP objects MUST ignore all unsupported or unknown\n   operation attributes\
    \ or operation attribute groups received in a\n   request, but MUST reject a request\
    \ that contains a supported\n   operation attribute that contains an unsupported\
    \ value.\n   The following section on object attributes specifies the support\n\
    \   required for object attributes.\n"
- title: 5.2.3 IPP Object Attributes
  contents:
  - "5.2.3 IPP Object Attributes\n   Conforming IPP objects MUST support all of the\
    \ REQUIRED object\n   attributes, as defined in this specification in the indicated\n\
    \   sections.\n   If an object supports an attribute, it MUST support only those\
    \ values\n   specified in this document or through the extension mechanism\n \
    \  described in section 5.2.4. It MAY support any non-empty subset of\n   these\
    \ values.  That is, it MUST support at least one of the specified\n   values and\
    \ at most all of them.\n"
- title: 5.2.4 Extensions
  contents:
  - "5.2.4 Extensions\n   A conforming IPP object MAY support registered extensions\
    \ and private\n   extensions, as long as they meet the requirements specified\
    \ in\n   Section 6.\n   For each attribute included in an operation response,\
    \ a conforming\n   IPP object MUST return a value whose type and value syntax\
    \ conforms\n   to the requirement of the Model document as specified in Sections\
    \ 3\n   and 4.\n"
- title: 5.2.5 Attribute Syntaxes
  contents:
  - "5.2.5 Attribute Syntaxes\n   An IPP object MUST be able to accept any of the\
    \ attribute syntaxes\n   defined in Section 4.1, including their full range, in\
    \ any operation\n   in which a client may supply attributes or the system administrator\n\
    \   may configure attributes (by means outside the scope of IPP/1.0).  In\n  \
    \ particular for each attribute that the IPP object supports whose\n   attribute\
    \ syntax is 'text', the IPP object MUST accept and process\n   both the 'textWithoutLanguage'\
    \ and 'textWithLanguage' forms.\n   Similarly, for each attribute that the IPP\
    \ object supports whose\n   attribute syntax is 'name', the IPP object MUST accept\
    \ and process\n   both the 'nameWithoutLanguage' and 'nameWithLanguage' forms.\n\
    \   Furthermore, an IPP object MUST return attributes to the client in\n   operation\
    \ responses that conform to the syntax specified in Section\n   4.1, including\
    \ their full range if supplied previously by a client.\n"
- title: 5.3 Charset and Natural Language Requirements
  contents:
  - "5.3 Charset and Natural Language Requirements\n   All clients and IPP objects\
    \ MUST support the 'utf-8' charset as\n   defined in section 4.1.7.\n   IPP objects\
    \ MUST be able to accept any client request which correctly\n   uses the \"attributes-natural-language\"\
    \ operation attribute or the\n   Natural Language Override mechanism on any individual\
    \ attribute\n   whether or not the natural language is supported by the IPP object.\n\
    \   If an IPP object supports a natural language, then it MUST be able to\n  \
    \ translate (perhaps by table lookup) all generated 'text' or 'name'\n   attribute\
    \ values into one of the supported languages (see section\n   3.1.4).  That is,\
    \ the IPP object that supports a natural language\n   NEED NOT be a general purpose\
    \ translator of any arbitrary 'text' or '\n   name' value supplied by the client\
    \ into that natural language.\n   However, the object MUST be able to translate\
    \ (automatically\n   generate) any of its own attribute values and messages into\
    \ that\n   natural language.\n"
- title: 5.4 Security Conformance Requirements
  contents:
  - "5.4 Security Conformance Requirements\n   Conforming IPP Printer objects MAY\
    \ support Secure Socket Layer\n   Version 3 (SSL3) [SSL] access, support access\
    \ without SSL3 or support\n   both means of access.\n   Conforming IPP clients\
    \ SHOULD support SSL3 access and non-SSL3\n   access.  Note: This client requirement\
    \ to support both means that\n   conforming IPP clients will be able to inter-operate\
    \ with any IPP\n   Printer object.\n   For a detailed discussion of security considerations\
    \ and the IPP\n   application security profile required for SSL3 support, see\
    \ section\n   8.\n"
- title: 6. IANA Considerations (registered and private extensions)
  contents:
  - "6. IANA Considerations (registered and private extensions)\n   This section describes\
    \ how IPP can be extended to allow the following\n   registered and private extensions\
    \ to IPP:\n     1. keyword attribute values\n     2. enum attribute values\n \
    \    3. attributes\n     4. attribute syntaxes\n     5. operations\n     6. attribute\
    \ groups\n     7. status codes\n   Extensions registered for use with IPP/1.0\
    \ are OPTIONAL for client\n   and IPP object conformance to the IPP/1.0 Model\
    \ specification.\n   These extension procedures are aligned with the guidelines\
    \ as set\n   forth by the IESG [RFC2434].  Section 11 describes how to propose\
    \ new\n   registrations for consideration.  IANA will reject registration\n  \
    \ proposals that leave out required information or do not follow the\n   appropriate\
    \ format described in Section 11.  IPP/1.0 may also be\n   extended by an appropriate\
    \ RFC that specifies any of the above\n   extensions.\n"
- title: 6.1 Typed 'keyword' and 'enum' Extensions
  contents:
  - "6.1 Typed 'keyword' and 'enum' Extensions\n   IPP allows for 'keyword' and 'enum'\
    \ extensions (see sections 4.1.2.3\n   and 4.1.4).  This document uses prefixes\
    \ to the 'keyword' and 'enum'\n   basic attribute syntax type in order to communicate\
    \ extra information\n   to the reader through its name. This extra information\
    \ is not\n   represented in the protocol because it is unimportant to a client\
    \ or\n   Printer object.  The list below describes the prefixes and their\n  \
    \ meaning.\n     \"type1\":  The IPP specification must be revised to add a new\n\
    \        keyword or a new enum.  No private keywords or enums are\n        allowed.\n\
    \     \"type2\":  Implementers can, at any time, add new keyword or enum\n   \
    \     values by proposing the complete specification to IANA:\n        iana@iana.org\n\
    \        IANA will forward the registration proposal to the IPP\n        Designated\
    \ Expert who will review the proposal with a mailing\n        list that the Designated\
    \ Expert keeps for this purpose.\n        Initially, that list will be the mailing\
    \ list used by the IPP\n        WG:\n             ipp@pwg.org\n        even after\
    \ the IPP WG is disbanded as permitted by [RFC2434].\n        The IPP Designated\
    \ Expert is appointed by the IESG Area Director\n        responsible for IPP,\
    \ according to [RFC2434].\n        When a type2 keyword or enum is approved, the\
    \ IPP Designated\n        Expert becomes the point of contact for any future maintenance\n\
    \        that might be required for that registration.\n     \"type3\":  Implementers\
    \ can, at any time, add new keyword and enum\n        values by submitting the\
    \ complete specification to IANA as for\n        type2 who will forward the proposal\
    \ to the IPP Designated\n        Expert.  While no additional technical review\
    \ is required, the\n        IPP Designated Expert may, at his/her discretion,\
    \ forward the\n        proposal to the same mailing list as for type2 registrations\
    \ for\n        advice and comment.\n        When a type3 keyword or enum is approved\
    \ by the IPP Designated\n        Expert, the original proposer becomes the point\
    \ of contact for\n        any future maintenance that might be required for that\n\
    \        registration.\n   For type2 and type3 keywords, the proposer includes\
    \ the name of the\n   keyword in the registration proposal and the name is part\
    \ of the\n   technical review.\n   After type2 and type3 enums specifications\
    \ are approved, the IPP\n   Designated Expert in consultation with IANA assigns\
    \ the next\n   available enum number for each enum value.\n   IANA will publish\
    \ approved type2 and type3 keyword and enum\n   attributes value registration\
    \ specifications in:\n        ftp.isi.edu/iana/assignments/ipp/attribute-values/xxx/yyy.txt\n\
    \   where xxx is the attribute name that specifies the initial values and\n  \
    \ yyy.txt is a descriptive file name that contains one or more enums or\n   keywords\
    \ approved at the same time.  For example, if several\n   additional enums for\
    \ stapling are approved for use with the\n   \"finishings\" attribute (and \"\
    finishings-default\" and \"finishings-\n   supported\" attributes), IANA will\
    \ publish the additional values in\n   the file:\n        ftp.isi.edu/iana/assignments/ipp/attribute-\n\
    \        values/finishings/stapling.txt\n   Note: Some attributes are defined\
    \ to be: 'type3 keywords' | 'name'\n   which allows for attribute values to be\
    \ extended by a site\n   administrator with administrator defined names.  Such\
    \ names are not\n   registered with IANA.\n   By definition, each of the three\
    \ types above assert some sort of\n   registry or review process in order for\
    \ extensions to be considered\n   valid.  Each higher numbered level (1, 2, 3)\
    \ tends to be decreasingly\n   less stringent than the previous level.   Therefore,\
    \ any typeN value\n   MAY be registered using a process for some typeM where M\
    \ is less than\n   N, however such registration is NOT REQUIRED.  For example,\
    \ a type3\n   value MAY be registered in a type 1 manner (by being included in\
    \ a\n   future version of an IPP specification), however, it is NOT REQUIRED.\n\
    \   This specification defines keyword and enum values for all of the\n   above\
    \ types, including type3 keywords.\n   For private (unregistered) keyword extensions,\
    \ implementers SHOULD\n   use keywords with a suitable distinguishing prefix,\
    \ such as \"xxx-\"\n   where xxx is the (lowercase) fully qualified company name\
    \ registered\n   with IANA for use in domain names [RFC1035].  For example, if\
    \ the\n   company XYZ Corp.  had obtained the domain name \"XYZ.com\", then a\n\
    \   private keyword 'abc' would be: 'xyz.com-abc'.\n   Note: RFC 1035 [RFC1035]\
    \ indicates that while upper and lower case\n   letters are allowed in domain\
    \ names, no significance is attached to\n   the case.  That is, two names with\
    \ the same spelling but different\n   case are to be treated as if identical.\
    \  Also, the labels in a domain\n   name must follow the rules for ARPANET host\
    \ names:  They must start\n   with a letter, end with a letter or digit, and have\
    \ as interior\n   characters only letters, digits, and hyphen.  Labels must be\
    \ 63\n   characters or less.  Labels are separated by the \".\" character.\n \
    \  For private (unregistered) enum extension, implementers MUST use\n   values\
    \ in the reserved integer range which is 2**30 to 2**31-1.\n"
- title: 6.2 Attribute Extensibility
  contents:
  - "6.2 Attribute Extensibility\n   Attribute names are type2 keywords.  Therefore,\
    \ new attributes may be\n   registered and have the same status as attributes\
    \ in this document by\n   following the type2 extension rules.  For private (unregistered)\n\
    \   attribute extensions, implementers SHOULD use keywords with a\n   suitable\
    \ distinguishing prefix as described in Section 6.1.\n   IANA will publish approved\
    \ attribute registration specifications as\n   separate files:\n        ftp.isi.edu/iana/assignments/ipp/attributes/xxx-yyy.txt\n\
    \   where \"xxx-yyy\" is the new attribute name.\n   If a new Printer object attribute\
    \ is defined and its values can be\n   affected by a specific document format,\
    \ its specification needs to\n   contain the following sentence:\n     \"The value\
    \ of this attribute returned in a Get-Printer-Attributes\n     response MAY depend\
    \ on the \"document-format\" attribute supplied\n     (see Section 3.2.5.1).\"\
    \n   If the specification does not, then its value in the Get-Printer-\n   Attributes\
    \ response MUST NOT depend on the \"document-format\" supplied\n   in the request.\
    \  When a new Job Template attribute is registered, the\n   value of the Printer\
    \ attributes MAY vary with \"document-format\"\n   supplied in the request without\
    \ the specification having to indicate\n   so.\n"
- title: 6.3 Attribute Syntax Extensibility
  contents:
  - "6.3 Attribute Syntax Extensibility\n   Attribute syntaxes are like type2 enums.\
    \  Therefore, new attribute\n   syntaxes may be registered and have the same status\
    \ as attribute\n   syntaxes in this document by following the type2 extension\
    \ rules\n   described in Section 6.1.  The value codes that identify each of the\n\
    \   attribute syntaxes are assigned in the Encoding and Transport\n   specification\
    \ [RFC2565], including a designated range for private,\n   experimental use.\n\
    \   For attribute syntaxes, the IPP Designated Expert in consultation\n   with\
    \ IANA assigns the next attribute syntax code in the appropriate\n   range as\
    \ specified in [RFC2565].  IANA will publish approved\n   attribute syntax registration\
    \ specifications as separate files:\n        ftp.isi.edu/iana/assignments/ipp/attribute-syntaxes/xxx-yyy.txt\n\
    \   where 'xxx-yyy' is the new attribute syntax name.\n"
- title: 6.4 Operation Extensibility
  contents:
  - "6.4 Operation Extensibility\n   Operations may also be registered following the\
    \ type2 procedures\n   described in Section 6.1, though major new operations will\
    \ usually be\n   done by a new standards track RFC that augments this document.\
    \  For\n   private (unregistered) operation extensions, implementers MUST use\n\
    \   the range for the \"operation-id\" in requests specified in Section\n   4.4.13\
    \ \"operations-supported\" Printer attribute.\n   For operations, the IPP Designated\
    \ Expert in consultation with IANA\n   assigns the next operation-id code as specified\
    \ in Section 4.4.13.\n   IANA will publish approved operation registration specifications\
    \ as\n   separate files:\n        ftp.isi.edu/iana/assignments/ipp/operations/Xxx-Yyy.txt\n\
    \   where \"Xxx-Yyy\" is the new operation name.\n"
- title: 6.5 Attribute Groups
  contents:
  - "6.5 Attribute Groups\n   Attribute groups passed in requests and responses may\
    \ be registered\n   following the type2 procedures described in Section 6.1. \
    \ The tags\n   that identify each of the attribute groups are assigned in [RFC2565].\n\
    \   For attribute groups, the IPP Designated Expert in consultation with\n   IANA\
    \ assigns the next attribute group tag code in the appropriate\n   range as specified\
    \ in [RFC2565].  IANA will publish approved\n   attribute group registration specifications\
    \ as separate files:\n        ftp.isi.edu/iana/assignments/ipp/attribute-group-tags/xxx-yyy-\n\
    \        tag.txt\n   where 'xxx-yyy-tag' is the new attribute group tag name.\n"
- title: 6.6 Status Code Extensibility
  contents:
  - "6.6 Status Code Extensibility\n   Operation status codes may also be registered\
    \ following the type2\n   procedures described in Section 6.1.  The values for\
    \ status codes are\n   allocated in ranges as specified in Section 13 for each\
    \ status code\n   class:\n     \"informational\" - Request received, continuing\
    \ process\n     \"successful\" - The action was successfully received, understood,\n\
    \        and accepted\n     \"redirection\" - Further action must be taken in\
    \ order to complete\n        the request\n     \"client-error\" - The request\
    \ contains bad syntax or cannot be\n        fulfilled\n     \"server-error\" -\
    \ The IPP object  failed to fulfill an apparently\n        valid request\n   For\
    \ private (unregistered) operation status code extensions,\n   implementers MUST\
    \ use the top of each range as specified in Section\n   13.\n   For operation\
    \ status codes, the IPP Designated Expert in consultation\n   with IANA assigns\
    \ the next status code in the appropriate class range\n   as specified in Section\
    \ 13.  IANA will publish approved status code\n   registration specifications\
    \ as separate files:\n        ftp.isi.edu/iana/assignments/ipp/status-codes/xxx-yyy.txt\n\
    \   where \"xxx-yyy\" is the new operation status code keyword.\n"
- title: 6.7 Registration of MIME types/sub-types for document-formats
  contents:
  - "6.7 Registration of MIME types/sub-types for document-formats\n   The \"document-format\"\
    \ attribute's syntax is 'mimeMediaType'.  This\n   means that valid values are\
    \ Internet Media Types (see Section 4.1.9).\n   RFC 2045 [RFC2045] defines the\
    \ syntax for valid Internet media types.\n   IANA is the registry for all Internet\
    \ media types.\n"
- title: 6.8 Registration of charsets for use in 'charset' attribute values
  contents:
  - "6.8 Registration of charsets for use in 'charset' attribute values\n   The \"\
    attributes-charset\" attribute's syntax is 'charset'.  This means\n   that valid\
    \ values are charsets names.  When a charset in the IANA\n   registry has more\
    \ than one name (alias), the name labeled as\n   \"(preferred MIME name)\", if\
    \ present, MUST be used (see Section\n   4.1.7).  IANA is the registry for charsets\
    \ following the procedures\n   of [RFC2278].\n"
- title: 7. Internationalization Considerations
  contents:
  - "7. Internationalization Considerations\n   Some of the attributes have values\
    \ that are text strings and names\n   which are intended for human understanding\
    \ rather than machine\n   understanding (see the 'text' and 'name' attribute syntaxes\
    \ in\n   Sections 4.1.1 and 4.1.2).\n   In each operation request, the client\n\
    \     - identifies the charset and natural language of the request which\n   \
    \    affects each supplied 'text' and 'name' attribute value, and\n     - requests\
    \ the charset and natural language for attributes returned\n       by the IPP\
    \ object in operation responses (as described in Section\n       3.1.4.1).\n \
    \  In addition, the client MAY separately and individually identify the\n   Natural\
    \ Language Override of a supplied 'text' or 'name' attribute\n   using the 'textWithLanguage'\
    \ and 'nameWithLanguage' technique\n   described section 4.1.1.2 and 4.1.2.2 respectively.\n\
    \   All IPP objects MUST support the UTF-8 [RFC2279] charset in all '\n   text'\
    \ and 'name' attributes supported.  If an IPP object supports\n   more than the\
    \ UTF-8 charset, the object MUST convert between them in\n   order to return the\
    \ requested charset to the client according to\n   Section 3.1.4.2.  If an IPP\
    \ object supports more than one natural\n   language, the object SHOULD return\
    \ 'text' and 'name' values in the\n   natural language requested where those values\
    \ are generated by the\n   Printer (see Section 3.1.4.1).\n   For Printers that\
    \ support multiple charsets and/or multiple natural\n   languages in 'text' and\
    \ 'name' attributes, different jobs may have\n   been submitted in differing charsets\
    \ and/or natural languages.  All\n   responses MUST be returned in the charset\
    \ requested by the client.\n   However, the Get-Jobs operation uses the 'textWithLanguage'\
    \ and '\n   nameWithLanguage' mechanism to identify the differing natural\n  \
    \ languages with each job attribute returned.\n   The Printer object also has\
    \ configured charset and natural language\n   attributes.   The client can query\
    \ the Printer object to determine\n   the list of charsets and natural languages\
    \ supported by the Printer\n   object and what the Printer object's configured\
    \ values are.  See the\n   \"charset-configured\", \"charset-supported\", \"natural-language-\n\
    \   configured\", and \"generated-natural-language-supported\" Printer\n   description\
    \ attributes for more details.\n   The \"charset-supported\" attributed identifies\
    \ the supported charsets.\n   If a charset is supported, the IPP object MUST be\
    \ capable of\n   converting to and from that charset into any other supported\
    \ charset.\n   In many cases, an IPP object will support only one charset and\
    \ it\n   MUST be the UTF-8 charset.\n   The \"charset-configured\" attribute identifies\
    \ the one supported\n   charset which is the native charset given the current\
    \ configuration\n   of the IPP object (administrator defined).\n   The \"generated-natural-language-supported\"\
    \ attribute identifies the\n   set of supported natural languages for generated\
    \ messages; it is not\n   related to the set of natural languages that must be\
    \ accepted for\n   client supplied 'text' and 'name' attributes.  For client supplied\
    \ '\n   text' and 'name' attributes, an IPP object MUST accept ALL supplied\n\
    \   natural languages.  Just because a Printer object is currently\n   configured\
    \ to support 'en-us' natural language does not mean that the\n   Printer object\
    \ should reject a job if the client supplies a job name\n   that is in 'fr-ca'.\n\
    \   The \"natural-language-configured\" attribute identifies the one\n   supported\
    \ natural language for generated messages which is the native\n   natural language\
    \ given the current configuration of the IPP object\n   (administrator defined).\n\
    \   Attributes of type 'text' and 'name' are populated from different\n   sources.\
    \  These attributes can be categorized into following groups\n   (depending on\
    \ the source of the attribute):\n     1. Some attributes are supplied by the client\
    \ (e.g., the client\n        supplied \"job-name\", \"document-name\", and \"\
    requesting-user-name\"\n        operation attributes along with the corresponding\
    \ Job object's\n        \"job-name\" and \"job-originating-user-name\" attributes).\
    \  The IPP\n        object MUST accept these attributes in any natural language\
    \ no\n        matter what the set of supported languages for generated\n     \
    \   messages\n     2. Some attributes are supplied by the system administrator\
    \ (e.g.,\n        the Printer object's \"printer-name\" and \"printer-location\"\
    \n        attributes).  These too can be in any natural language.  If the\n  \
    \      natural language for these attributes is different than what a\n      \
    \  client requests, then they must be reported using the Natural\n        Language\
    \ Override mechanism.\n     3. Some attributes are supplied by the device manufacturer\
    \ (e.g.,\n        the Printer object's \"printer-make-and-model\" attribute).\
    \  These\n        too can be in any natural language.  If the natural language\
    \ for\n        these attributes is different than what a client requests, then\n\
    \        they must be reported using the Natural Language Override\n        mechanism.\n\
    \     4. Some attributes are supplied by the operator (e.g., the Job\n       \
    \ object's \"job-message-from-operator\" attribute). These too can\n        be\
    \ in any natural language.  If the natural language for these\n        attributes\
    \ is different than what a client requests, then they\n        must be reported\
    \ using the Natural Language Override mechanism.\n     5. Some attributes are\
    \ generated by the IPP object (e.g., the Job\n        object's \"job-state-message\"\
    \ attribute, the Printer object's\n        \"printer-state-message\" attribute,\
    \ and the \"status-message\"\n        operation attribute).  These attributes\
    \ can only be in one of\n        the \"generated-natural-language-supported\"\
    \ natural languages.\n        If a client requests some natural language for these\
    \ attributes\n        other than one of the supported values, the IPP object SHOULD\n\
    \        respond using the value of the \"natural-language-configured\"\n    \
    \    attribute (using the Natural Language Override mechanism if\n        needed).\n\
    \   The 'text' and 'name' attributes specified in this version of this\n   document\
    \ (additional ones will be registered according to the\n   procedures in Section\
    \ 6) are:\n     Attributes                      Source\n     --------------------------\
    \      ----------\n     Operation Attributes\n        job-name (name)        \
    \       client\n        document-name (name)          client\n        requesting-user-name\
    \ (name)   client\n        status-message                Job or Printer object\n\
    \     Job Template Attributes:\n        job-hold-until)          client matches\
    \ administrator-configured\n            (keyword | name\n        job-hold-until-default\
    \   client matches administrator-configured\n            (keyword | name)\n  \
    \      job-hold-until-supported client matches administrator-configured\n    \
    \        (keyword | name)\n        job-sheets               client matches administrator-configured\n\
    \            (keyword | name)\n        job-sheets-default       client matches\
    \ administrator-configured\n            (keyword | name)\n        job-sheets-supported\
    \     client matches administrator-configured\n            (keyword | name)\n\
    \        media                    client matches administrator-configured\n  \
    \          (keyword | name)\n        media-default            client matches administrator-configured\n\
    \            (keyword | name)\n        media-supported          client matches\
    \ administrator-configured\n            (keyword | name)\n        media-ready\
    \              client matches administrator-configured\n            (keyword |\
    \ name)\n     Job Description Attributes:\n        job-name (name)           \
    \    client or Printer object\n        job-originating-user-name (name)   Printer\
    \ object\n        job-state-message (text)      Job or Printer object\n      \
    \  output-device-assigned (name(127)) administrator\n        job-message-from-operator\
    \ (text(127))   operator\n     Printer Description Attributes:\n        printer-name\
    \ (name(127))      administrator\n        printer-location (text(127))  administrator\n\
    \        printer-info (text(127))      administrator\n        printer-make-and-model\
    \ (text(127)) administrator or manufacturer\n        printer-state-message (text)\
    \  Printer object\n        printer-message-from-operator (text(127))    operator\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   Some IPP objects MAY be deployed over protocol\
    \ stacks that support\n   Secure Socket Layer Version 3 (SSL3) [SSL].  Note: \
    \ SSL3 is not an\n   IETF standards track specification.  Other IPP objects MAY\
    \ be\n   deployed over protocol stacks that do not support SSL3.  Some IPP\n \
    \  objects MAY be deployed over both types of protocol stacks.  Those\n   IPP\
    \ objects that support SSL3, are capable of supporting mutual\n   authentication\
    \ as well as privacy of messages via multiple encryption\n   schemes.  An important\
    \ point about security related information for\n   SSL3 access to an IPP object,\
    \ is that the security-related parameters\n   (authentication, encryption keys,\
    \ etc.) are \"out-of-band\" to the\n   actual IPP protocol.\n   An IPP object\
    \ that does not support SSL3 MAY elect to support a\n   transport layer that provides\
    \ other security mechanisms.  For\n   example, in a mapping of IPP over HTTP/1.1\
    \ [RFC2565], if the IPP\n   object does not support SSL3, HTTP still allows for\
    \ client\n   authentication using Digest Access Authentication (DAA) [RFC2069].\n\
    \   It is difficult to anticipate the security risks that might exist in\n   any\
    \ given IPP environment. For example, if IPP is used within a given\n   corporation\
    \ over a private network, the risks of exposing document\n   data may be low enough\
    \ that the corporation will choose not to use\n   encryption on that data.  However,\
    \ if the connection between the\n   client and the IPP object is over a public\
    \ network, the client may\n   wish to protect the content of the information during\
    \ transmission\n   through the network with encryption.\n   Furthermore, the value\
    \ of the information being printed may vary from\n   one IPP environment to the\
    \ next. Printing payroll checks, for\n   example, would have a different value\
    \ than printing public\n   information from a file.  There is also the possibly\
    \ of denial-of-\n   service attacks, but denial-of-service attacks against printing\n\
    \   resources are not well understood and there is no published\n   precedents\
    \ regarding this scenario.\n   Once the authenticated identity of the requester\
    \ has been supplied to\n   the IPP object, the object uses that identity to enforce\
    \ any\n   authorization policy that might be in place.  For example, one site's\n\
    \   policy might be that only the job owner is allowed to cancel a job.\n   The\
    \ details and mechanisms to set up a particular access control\n   policy are\
    \ not part of IPP/1.0, and must be established via some\n   other type of administrative\
    \ or access control framework.  However,\n   there are operation status codes\
    \ that allow an IPP server to return\n   information back to a client about any\
    \ potential access control\n   violations for an IPP object.\n   During a create\
    \ operation, the client's identity is recorded in the\n   Job object in an implementation-defined\
    \ attribute.  This information\n   can be used to verify a client's identity for\
    \ subsequent operations\n   on that Job object in order to enforce any access\
    \ control policy that\n   might be in effect.  See section 8.3 below for more\
    \ details.\n   Since the security levels or the specific threats that any given\
    \ IPP\n   system administrator may be concerned with cannot be anticipated, IPP\n\
    \   MUST be capable of operating with different security mechanisms and\n   security\
    \ policies as required by the individual installation.\n   Security policies might\
    \ vary from very strong, to very weak, to none\n   at all, and corresponding security\
    \ mechanisms will be required. SSL3\n   supports the type of negotiated levels\
    \ of security required by most,\n   if not all, potential IPP environments. IPP\
    \ environments that require\n   no security can elect to deploy IPP objects that\
    \ do not utilize the\n   optional SSL3 security mechanisms.\n"
- title: 8.1 Security Scenarios
  contents:
  - "8.1 Security Scenarios\n   The following sections describe specific security\
    \ attacks for IPP\n   environments.  Where examples are provided they should be\
    \ considered\n   illustrative of the environment and not an exhaustive set. Not\
    \ all of\n   these environments will necessarily be addressed in initial\n   implementations\
    \ of IPP.\n"
- title: 8.1.1 Client and Server in the Same Security Domain
  contents:
  - "8.1.1 Client and Server in the Same Security Domain\n   This environment is typical\
    \ of internal networks where traditional\n   office workers print the output of\
    \ personal productivity applications\n   on shared work-group printers, or where\
    \ batch applications print\n   their output on large production printers. Although\
    \ the identity of\n   the user may be trusted in this environment, a user might\
    \ want to\n   protect the content of a document against such attacks as\n   eavesdropping,\
    \ replaying or tampering.\n"
- title: 8.1.2 Client and Server in Different Security Domains
  contents:
  - "8.1.2 Client and Server in Different Security Domains\n   Examples of this environment\
    \ include printing a document created by\n   the client on a publicly available\
    \ printer, such as at a commercial\n   print shop; or printing a document remotely\
    \ on a business associate's\n   printer.  This latter operation is functionally\
    \ equivalent to sending\n   the document to the business associate as a facsimile.\
    \ Printing\n   sensitive information on a Printer in a different security domain\n\
    \   requires strong security measures. In this environment authentication\n  \
    \ of the printer is required as well as protection against unauthorized\n   use\
    \ of print resources. Since the document crosses security domains,\n   protection\
    \ against eavesdropping and document tampering are also\n   required. It will\
    \ also be important in this environment to protect\n   Printers against \"spamming\"\
    \ and malicious document content.\n"
- title: 8.1.3 Print by Reference
  contents:
  - "8.1.3 Print by Reference\n   When the document is not stored on the client, printing\
    \ can be done\n   by reference. That is, the print request can contain a reference,\
    \ or\n   pointer, to the document instead of the actual document itself.\n   Standard\
    \ methods currently do not exist for remote entities to\n   \"assume\" the credentials\
    \ of a client for forwarding requests to a 3rd\n   party. It is anticipated that\
    \ Print-By-Reference will be used to\n   access \"public\" documents and that\
    \ sophisticated methods for\n   authenticating \"proxies\" will not be specified\
    \ for version 1 of IPP.\n"
- title: 8.2 URIs for SSL3 and non-SSL3 Access
  contents:
  - "8.2 URIs for SSL3 and non-SSL3 Access\n   As described earlier, an IPP object\
    \ can support SSL3 access, non-SSL3\n   access, or both.  The \"printer-uri-supported\"\
    \ attribute contains the\n   Printer object's URI(s).  Its companion attribute,\
    \ \"uri-security-\n   supported\", identifies the security mechanism used for\
    \ each URI\n   listed in the \"printer-uri-supported\" attribute.  For each Printer\n\
    \   operation request, a client MUST supply only one URI in the\n   \"printer-uri\"\
    \ operation attribute.  In other words, even though the\n   Printer supports more\
    \ than one URI, the client only interacts with\n   the Printer object using one\
    \ if its URIs.  This duality is not needed\n   for Job objects, since the Printer\
    \ objects is the factory for Job\n   objects, and the Printer object will generate\
    \ the correct URI for new\n   Job objects depending on the Printer object's security\
    \ configuration.\n"
- title: 8.3 The "requesting-user-name" (name(MAX)) Operation Attribute
  contents:
  - "8.3 The \"requesting-user-name\" (name(MAX)) Operation Attribute\n   Each operation\
    \ MUST specify the user who is performing the operation\n   in both of the following\
    \ two ways:\n     1) via the REQUIRED \"requesting-user-name\" operation attribute\
    \ that\n        a client SHOULD supply in all operations. The client MUST obtain\n\
    \        the value for this attribute from an environmental or network\n     \
    \   login name for the user, rather than allowing the user to supply\n       \
    \ any value. If the client does not supply a value for\n        \"requesting-user-name\"\
    , the printer MUST assume that the client\n        is supplying some anonymous\
    \ name, such as \"anonymous\".\n     2) via an authentication mechanism of the\
    \ underlying transport\n        which may be configured to give no authentication\
    \ information.\n   There are six cases to consider:\n     a) the authentication\
    \ mechanism gives no information, and the\n        client doesn't specify  \"\
    requesting-user-name\".\n     b) the authentication mechanism gives no information,\
    \ but the\n        client specifies \"requesting-user-name\".\n     c) the authentication\
    \ mechanism specifies a user which has no human\n        readable representation,\
    \ and the client doesn't specify\n        \"requesting-user-name\".\n     d) the\
    \ authentication mechanism specifies a user which has no human\n        readable\
    \ representation, but the client specifies \"requesting-\n        user-name\"\
    .\n     e) the authentication mechanism specifies a user which has a human\n \
    \       readable representation. The Printer object ignores the\n        \"requesting-user-name\"\
    .\n     f) the authentication mechanism specifies a user who is trusted and\n\
    \        whose name means that the value of the \"requesting-user-name\",\n  \
    \      which MUST be present, is treated as the authenticated name.\n   Note:\
    \  Case \"f\" is intended for a tightly coupled gateway and server\n   to work\
    \ together so that the \"user\" name is able to be that of the\n   gateway client\
    \ and not that of the gateway.  Because most, if not\n   all, system vendors will\
    \ initially implement IPP via a gateway into\n   their existing print system,\
    \ this mechanism is necessary unless the\n   authentication mechanism allows a\
    \ gateway (client) to act on behalf\n   of some other client.\n   The user-name\
    \ has two forms:\n     - one that is human readable: it is held in the REQUIRED\
    \ \"job-\n       originating-user-name\" Job Description attribute which is set\n\
    \       during the job creation operations. It is used for presentation\n    \
    \   only, such as returning in queries or printing on start sheets\n     - one\
    \ for authorization: it is held in an undefined (by IPP) Job\n       object attribute\
    \ which is set by the job creation operation.  It\n       is used to authorize\
    \ other operations, such as Send-Document,\n       Send-URI, Cancel-Job, to determine\
    \ the user when the \"my-jobs\"\n       attribute is specified with Get-Jobs,\
    \ and to limit what\n       attributes and values to return with Get-Job-Attributes\
    \ and Get-\n       Jobs.\n   The human readable user name:\n     - is the value\
    \ of the \"requesting-user-name\" for cases b, d and f.\n     - comes from the\
    \ authentication mechanism for case e\n     - is some anonymous name, such as\
    \ \"anonymous\" for cases a and c.\n   The user name used for authorization:\n\
    \     - is the value of the \"requesting-user-name\" for cases b  and f.\n   \
    \  - comes from the authentication mechanism for cases c, d and  e\n     - is\
    \ some anonymous name, such as \"anonymous\" for case a.\n   The essence of these\
    \ rules for resolving conflicting sources of\n   user-names is that a printer\
    \ implementation is free to pick either\n   source as long as it achieves consistent\
    \ results.  That is, if a user\n   uses the same path for a series of requests,\
    \ the requests MUST appear\n   to come from the same user from the standpoint\
    \ of both the human-\n   readable user name and the user name for authorization.\
    \  This rule\n   MUST continue to apply even if a request could be authenticated\
    \ by\n   two or more mechanisms.  It doesn't matter which of  several\n   authentication\
    \ mechanisms a Printer uses as long as it achieves\n   consistent results.  If\
    \ a client uses more than one authentication\n   mechanism, it is recommended\
    \ that an administrator make all\n   credentials resolve to the same user and\
    \ user-name as much as\n   possible.\n"
- title: 8.4 Restricted Queries
  contents:
  - "8.4 Restricted Queries\n   In many IPP operations, a client supplies a list of\
    \ attributes to be\n   returned in the response.  For security reasons, an IPP\
    \ object may be\n   configured not to return all attributes (or all values) that\
    \ a client\n   requests.  The job attributes returned MAY depend on whether the\n\
    \   requesting user is the same as the user that submitted the job. The\n   IPP\
    \ object MAY even return none of the requested attributes. In such\n   cases,\
    \ the status returned is the same as if the object had returned\n   all requested\
    \ attributes.  The client cannot tell by such a response\n   whether the requested\
    \ attribute was present or absent on the object.\n"
- title: 8.5 Queries on jobs submitted using non-IPP protocols
  contents:
  - "8.5 Queries on jobs submitted using non-IPP protocols\n   If the device that\
    \ an IPP Printer is representing is able to accept\n   jobs using other job submission\
    \ protocols in addition to IPP, it is\n   RECOMMENDED that such an implementation\
    \ at least allow such \"foreign\"\n   jobs to be queried using Get-Jobs returning\
    \ \"job-id\" and \"job-uri\" as\n   'unknown'.  Such an implementation NEED NOT\
    \ support all of the same\n   IPP job attributes as for IPP jobs.  The IPP object\
    \ returns the '\n   unknown' out-of-band value for any requested attribute of\
    \ a foreign\n   job that is supported for IPP jobs, but not for foreign jobs.\n\
    \   It is further RECOMMENDED, that the IPP Printer generate \"job-id\" and\n\
    \   \"job-uri\" values for such \"foreign jobs\", if possible, so that they\n\
    \   may be targets of other IPP operations, such as Get-Job-Attributes\n   and\
    \ Cancel-Job.  Such an implementation also needs to deal with the\n   problem\
    \ of authentication of such foreign jobs.  One approach would\n   be to treat\
    \ all such foreign jobs as belonging to users other than\n   the user of the IPP\
    \ client.  Another approach would be for the\n   foreign job to belong to 'anonymous'.\
    \  Only if the IPP client has\n   been authenticated as an operator or administrator\
    \ of the IPP Printer\n   object, could the foreign jobs be queried by an IPP request.\n\
    \   Alternatively, if the security policy is to allow users to query\n   other\
    \ users' jobs, then the foreign jobs would also be visible to an\n   end-user\
    \ IPP client using Get-Jobs and Get-Job-Attributes.\n"
- title: 8.6 IPP Security Application Profile for SSL3
  contents:
  - "8.6 IPP Security Application Profile for SSL3\n   The IPP application profile\
    \ for SSL3 follows the \"Secure Socket\n   Layer\" requirement as documented in\
    \ the SSL3 specification [SSL].\n   For interoperability, the SSL3 cipher suites\
    \ are:\n        SSL_RSA_WITH_RC4_128_MD5\n        SSL_RSA_WITH_3DES_EDE_CBC_SHA\n\
    \        SSL_RSA_WITH_DES_CBC_SHA\n        SSL_RSA_EXPORT_WITH_RC4_40_MD5\n  \
    \      SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5\n        SSL_RSA_WITH_NULL_MD5\n   Client\
    \ implementations MUST NOT assume any other cipher suites are\n   supported by\
    \ an IPP Printer object.\n   If a conforming IPP object supports SSL3, it MUST\
    \ implement and\n   support the cipher suites listed above and MAY support additional\n\
    \   cipher suites.\n   A conforming IPP client SHOULD support SSL3 including the\
    \ cipher\n   suites listed above.  A conforming IPP client MAY support additional\n\
    \   cipher suites.\n   It is possible that due to certain government export restrictions\n\
    \   some non-compliant versions of this extension could be deployed.\n   Implementations\
    \ wishing to inter-operate with such non-compliant\n   versions MAY offer the\
    \ SSL_RSA_EXPORT_WITH_RC4_40_MD5 and\n   SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 mechanisms.\
    \  However, since 40 bit\n   ciphers are known to be vulnerable to attack by current\
    \ technology,\n   any client which actives a 40 bit cipher MUST NOT indicate to\
    \ the\n   user that the connection is completely secure from eavesdropping.\n"
- title: 9. References
  contents:
  - "9. References\n   [ASCII]      Coded Character Set - 7-bit American Standard\
    \ Code for\n                Information Interchange (ASCII), ANSI X3.4-1986. This\n\
    \                standard is the specification of the US-ASCII charset.\n   [HTPP]\
    \       J. Barnett, K. Carter, R. DeBry,  \"Initial Draft -\n                Hypertext\
    \ Printing Protocol - HTPP/1.0\", October 1996.\n                ftp://ftp.pwg.org/pub/pwg/ipp/historic/htpp/\n\
    \                overview.ps.gz\n   [IANA-CS]    IANA Registry of Coded Character\
    \ Sets:\n                ftp://ftp.isi.edu/in-notes/iana/assignments/character-\n\
    \                sets\n   [IANA-MT]    IANA Registry of Media Types:  ftp://ftp.isi.edu/in-\n\
    \                notes/iana/assignments/media-types/\n   [ipp-iig]    Hastings,\
    \ T. and C. Manros, \"Internet Printing\n                Protocol/1.0:  Implementer's\
    \ Guide\", Work in Progress.\n   [ISO10646-1] ISO/IEC 10646-1:1993, \"Information\
    \ technology --\n                Universal Multiple-Octet Coded Character Set\
    \ (UCS) -\n                Part 1: Architecture and Basic Multilingual Plane,\n\
    \                JTC1/SC2.\"\n   [ISO8859-1]  ISO/IEC 8859-1:1987, \"Information\
    \ technology -- 8-bit\n                One-Byte Coded Character Set - Part 1:\
    \ Latin Alphabet Nr\n                1\", 1987, JTC1/SC2.\n   [ISO10175]   ISO/IEC\
    \ 10175 Document Printing Application (DPA), June\n                1996.\n   [LDPA]\
    \ T. Hastings, S. Isaacson, M. MacKay, C. Manros, D. Taylor, P.\n            \
    \    Zehler, \"LDPA - Lightweight Document Printing\n                Application\"\
    , October 1996,\n                ftp://ftp.pwg.org/pub/pwg/ipp/historic/ldpa/ldpa8.pdf.gz\n\
    \   [P1387.4]    Kirk, M. (Editor), POSIX System Administration - Part 4:\n  \
    \              Printing Interfaces, POSIX 1387.4 D8, 1994.\n   [PSIS]       Herriot,\
    \ R. (editor), X/Open A Printing System\n                Interoperability Specification\
    \ (PSIS), August 1995.\n   [PWG]        Printer Working Group, http://www.pwg.org.\n\
    \   [RFC1035]    Mockapetris, P., \"DOMAIN NAMES - IMPLEMENTATION AND\n      \
    \          SPECIFICATION\", STD 13, RFC 1035, November 1987.\n   [RFC1759]   \
    \ Smith, R., Wright, F., Hastings, T., Zilles, S. and J.\n                Gyllenskog,\
    \ \"Printer MIB\", RFC 1759, March 1995.\n   [RFC1766]    Alvestrand, H., \"Tags\
    \ for the Identification of\n                Languages\", RFC 1766, March 1995.\n\
    \   [RFC1179]    McLaughlin, L. (Editor), \"Line Printer Daemon Protocol\",\n\
    \                RFC 1179, August 1990.\n   [RFC1952]    Deutsch, P., \"GZIP file\
    \ format specification version\n                4.3\", RFC 1952, May 1996.\n \
    \  [RFC2045]    Freed, N. and N. Borenstein, \" Multipurpose Internet\n      \
    \          Mail Extensions (MIME) Part One: Format of Internet\n             \
    \   Message Bodies\", RFC 2045, November 1996.\n   [RFC2046]    Freed, N. and\
    \ N. Borenstein, \"Multipurpose Internet Mail\n                Extensions (MIME)\
    \ Part Two: Media Types\", RFC 2046,\n                November 1996.\n   [RFC2048]\
    \    Freed, N., Klensin, J. and J. Postel, \"Multipurpose\n                Internet\
    \ Mail Extension (MIME) Part Four: Registration\n                Procedures\"\
    , RFC 2048, November 1996.\n   [RFC2068]    Fielding, R., Gettys, J., Mogul, J.,\
    \ Frystyk, H. AND T.\n                Berners-Lee, \"Hypertext Transfer Protocol\
    \ - HTTP/1.1\",\n                RFC 2068, January 1997.\n   [RFC2069]    Franks,\
    \ J., Hallam-Baker, P., Hostetler, J., Leach, P.,\n                Luotonen, A.,\
    \ Sink, E. and L. Stewart, \"An Extension to\n                HTTP: Digest Access\
    \ Authentication\", RFC 2069, January\n                1997.\n   [RFC2119]   \
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2228]    Horowitz, M. and S.\
    \ Lunt, \"FTP Security Extensions\", RFC\n                2228, October 1997.\n\
    \   [RFC2277]    Alvestrand, H., \"IETF Policy on Character Sets and\n       \
    \         Languages\" RFC 2277, January 1998.\n   [RFC2278]    Freed, N. and J.\
    \ Postel:  \"IANA Charset Registration\n                Procedures\", BCP 19,\
    \ RFC 2278, January 1998.\n   [RFC2279]    Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n                10646\", RFC 2279, January 1998.\n   [RFC2316]\
    \    Bellovin, S., \"Report of the IAB Security Architecture\n               \
    \ Workshop\", RFC 2316, April 1998.\n   [RFC2396]    Berners-Lee, T., Fielding,\
    \ R. and L. Masinter, \"Uniform\n                Resource Identifiers (URI): Generic\
    \ Syntax\", RFC 2396,\n                August 1998.\n   [RFC2434]    Narten, T.\
    \ and H. Alvestrand, \"Guidelines for Writing an\n                IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 2434,\n                October 1998.\n   [RFC2565]\
    \    Herriot, R., Butler, S., Moore, P. and R. Tuner\n                \"Internet\
    \ Printing Protocol/1.0: Encoding and\n                Transport\", RFC 2565,\
    \ April 1999.\n   [RFC2567]    Wright, D.,  \"Design Goals for an Internet Printing\n\
    \                Protocol\", RFC 2567, April 1999.\n   [RFC2568]    Zilles, S.,\
    \ \"Rationale for the Structure and Model and\n                Protocol for the\
    \ Internet Printing Protocol\", RFC 2568,\n                April 1999.\n   [RFC2569]\
    \    Herriot, R., Hastings, T., Jacobs, N. and J. Martin,\n                \"\
    Mapping between LPD and IPP Protocols\", RFC 2569, April\n                1999.\n\
    \   [RFC2579]    McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n         \
    \       \"Textual Conventions for SMIv2\", STD 58, RFC 2579, April\n         \
    \       1999.\n   [SSL]        Netscape, The SSL Protocol, Version 3, (Text version\n\
    \                3.02), November 1996.\n   [SWP]        P. Moore, B. Jahromi,\
    \ S. Butler, \"Simple Web Printing\n                SWP/1.0\", May 7, 1997,\n\
    \                ftp://ftp.pwg.org/pub/pwg/ipp/new_PRO/swp9705.pdf\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Scott A. Isaacson (Editor)\n   Novell, Inc.\n   122\
    \ E 1700 S\n   Provo, UT   84606\n   Phone: 801-861-7366\n   Fax:   801-861-2517\n\
    \   EMail: sisaacson@novell.com\n   Tom Hastings\n   Xerox Corporation\n   737\
    \ Hawaii St.\n   El Segundo, CA   90245\n   Phone: 310-333-6413\n   Fax:   310-333-5514\n\
    \   EMail: hastings@cp10.es.xerox.com\n   Robert Herriot\n   Xerox Corporation\n\
    \   3400 Hillview Ave., Bldg #1\n   Palo Alto, CA 94304\n   Phone: 650-813-7696\n\
    \   Fax:  650-813-6860\n   EMail: robert.herriot@pahv.xerox.com\n   Roger deBry\n\
    \   Utah Valley State College\n   Orem, UT 84058\n   Phone: (801) 222-8000\n \
    \  EMail: debryro@uvsc.edu\n   Patrick Powell\n   Astart Technologies\n   9475\
    \ Chesapeake Dr., Suite D\n   San Diego, CA  95123\n   Phone: (619) 874-6543\n\
    \   Fax: (619) 279-8424\n   EMail: papowell@astart.com\n   IPP Mailing List: \
    \ ipp@pwg.org\n   IPP Mailing List Subscription: ipp-request@pwg.org\n   IPP Web\
    \ Page:  http://www.pwg.org/ipp/\n   Implementers of this specification are encouraged\
    \ to join IPP Mailing\n   List in order to participate in any discussions of clarification\n\
    \   issues and review of registration proposals for additional attributes\n  \
    \ and values.\n   Other Participants:\n      Chuck Adams - Tektronix\n      Jeff\
    \ Barnett - IBM\n      Ron Bergman - Dataproducts Corp.\n      Sylvan Butler -\
    \ HP\n      Keith Carter - IBM Corporation\n      Jeff Copeland - QMS\n      Andy\
    \ Davidson - Tektronix\n      Mabry Dozier - QMS\n      Lee Farrell - Canon Information\
    \ Systems\n      Steve Gebert - IBM\n      Babek Jahromi - Microsoft\n      David\
    \ Kellerman - Northlake Software\n      Rick Landau - Digital\n      Greg LeClair\
    \ - Epson\n      Harry Lewis - IBM\n      Pete Loya - HP\n      Ray Lutz - Cognisys\n\
    \      Mike MacKay - Novell, Inc.\n      Daniel Manchala - Xerox\n      Carl-Uno\
    \ Manros - Xerox\n      Jay Martin - Underscore\n      Larry Masinter - Xerox\n\
    \      Stan McConnell - Xerox\n      Ira McDonald - High North Inc.\n      Paul\
    \ Moore - Microsoft\n      Tetsuya Morita - Ricoh\n      Yuichi Niwa - Ricoh\n\
    \      Pat Nogay - IBM\n      Ron Norton - Printronics\n      Bob Pentecost -\
    \ HP\n      Rob Rhoads - Intel\n      Xavier Riley - Xerox\n      David Roach\
    \ - Unisys\n      Stuart Rowley - Kyocera\n      Hiroyuki Sato - Canon\n     \
    \ Bob Setterbo - Adobe\n      Devon Taylor - Novell, Inc.\n      Mike Timperman\
    \ - Lexmark\n      Randy Turner - Sharp\n      Atsushi Yuki - Kyocera\n      Rick\
    \ Yardumian - Xerox\n      Lloyd Young - Lexmark\n      Bill Wagner - DPI\n  \
    \    Jim Walker - DAZEL\n      Chris Wellens - Interworking Labs\n      Rob Whittle\
    \ - Novell, Inc.\n      Don Wright - Lexmark\n      Peter Zehler - Xerox\n   \
    \   Steve Zilles - Adobe\n"
- title: 11. Formats for IPP Registration Proposals
  contents:
  - "11. Formats for IPP Registration Proposals\n   In order to propose an IPP extension\
    \ for registration, the proposer\n   must submit an application to IANA by email\
    \ to \"iana@iana.org\" or by\n   filling out the appropriate form on the IANA\
    \ web pages\n   (http://www.iana.org).  This section specifies the required\n\
    \   information and the formats for proposing registrations of extensions\n  \
    \ to IPP as provided in Section 6 for:\n     1. type2 'keyword' attribute values\n\
    \     2. type3 'keyword' attribute values\n     3. type2 'enum' attribute values\n\
    \     4. type3 'enum' attribute values\n     5. attributes\n     6. attribute\
    \ syntaxes\n     7. operations\n     8. status codes\n"
- title: 11.1 Type2 keyword attribute values registration
  contents:
  - "11.1 Type2 keyword attribute values registration\n   Type of registration:  type2\
    \ keyword attribute value\n   Name of attribute to which this keyword specification\
    \ is to be added:\n   Proposed keyword name of this keyword value:\n   Specification\
    \ of this keyword value (follow the style of IPP Model\n   Section 4.1.2.3):\n\
    \   Name of proposer:\n   Address of proposer:\n   Email address of proposer:\n\
    \   Note:  For type2 keywords, the Designated Expert will be the point of\n  \
    \ contact for the approved registration specification, if any\n   maintenance\
    \ of the registration specification is needed.\n"
- title: 11.2 Type3 keyword attribute values registration
  contents:
  - "11.2 Type3 keyword attribute values registration\n   Type of registration:  type3\
    \ keyword attribute value\n   Name of attribute to which this keyword specification\
    \ is to be added:\n   Proposed keyword name of this keyword value:\n   Specification\
    \ of this keyword value (follow the style of IPP Model\n   Section 4.1.2.3):\n\
    \   Name of proposer:\n   Address of proposer:\n   Email address of proposer:\n\
    \   Note:  For type3 keywords, the proposer will be the point of contact\n   for\
    \ the approved registration specification, if any maintenance of\n   the registration\
    \ specification is needed.\n"
- title: 11.3 Type2 enum attribute values registration
  contents:
  - "11.3 Type2 enum attribute values registration\n   Type of registration:  type2\
    \ enum attribute value\n   Name of attribute to which this enum specification\
    \ is to be added:\n   Keyword symbolic name of this enum value:\n   Numeric value\
    \ (to be assigned by the IPP Designated Expert in\n   consultation with IANA):\n\
    \   Specification of this enum value (follow the style of IPP Model\n   Section\
    \ 4.1.4):\n   Name of proposer:\n   Address of proposer:\n   Email address of\
    \ proposer:\n   Note:  For type2 enums, the Designated Expert will be the point\
    \ of\n   contact for the approved registration specification, if any\n   maintenance\
    \ of the registration specification is needed.\n"
- title: 11.4 Type3 enum attribute values registration
  contents:
  - "11.4 Type3 enum attribute values registration\n   Type of registration:  type3\
    \ enum attribute value\n   Name of attribute to which this enum specification\
    \ is to be added:\n   Keyword symbolic name of this enum value:\n   Numeric value\
    \ (to be assigned by the IPP Designated Expert in\n   consultation with IANA):\n\
    \   Specification of this enum value (follow the style of IPP Model\n   Section\
    \ 4.1.4):\n   Name of proposer:\n   Address of proposer:\n   Email address of\
    \ proposer:\n   Note:  For type3 enums, the proposer will be the point of contact\
    \ for\n   the approved registration specification, if any maintenance of the\n\
    \   registration specification is needed.\n"
- title: 11.5 Attribute registration
  contents:
  - "11.5 Attribute registration\n   Type of registration:  attribute\n   Proposed\
    \ keyword name of this attribute:\n   Types of attribute (Operation, Job Template,\
    \ Job Description,\n   Printer Description):\n   Operations to be used with if\
    \ the attribute is an operation\n   attribute:\n   Object (Job, Printer, etc.\
    \ if bound to an object):\n   Attribute syntax(es) (include 1setOf and range as\
    \ in Section 4.2):\n   If attribute syntax is 'keyword' or 'enum', is it type2\
    \ or type3:\n   If this is a Printer attribute, MAY the value returned depend\
    \ on\n   \"document-format\" (See Section 6.2):\n   If this is a Job Template\
    \ attribute, how does its specification\n   depend on the value of the \"multiple-document-handling\"\
    \ attribute:\n   Specification of this attribute (follow the style of IPP Model\n\
    \   Section 4.2):\n   Name of proposer:\n   Address of proposer:\n   Email address\
    \ of proposer:\n   Note:  For attributes, the IPP Designated Expert will be the\
    \ point of\n   contact for the approved registration specification, if any\n \
    \  maintenance of the registration specification is needed.\n"
- title: 11.6 Attribute Syntax registration
  contents:
  - "11.6 Attribute Syntax registration\n   Type of registration:  attribute syntax\n\
    \   Proposed name of this attribute syntax:\n   Type of attribute syntax (integer,\
    \ octetString, character-string,\n   see [RFC2565]):\n   Numeric value (to be\
    \ assigned by the IPP Designated Expert in\n   consultation with IANA):\n   Specification\
    \ of this attribute (follow the style of IPP Model\n   Section 4.1):\n   Name\
    \ of proposer:\n   Address of proposer:\n   Email address of proposer:\n   Note:\
    \  For attribute syntaxes, the IPP Designated Expert will be the\n   point of\
    \ contact for the approved registration specification, if any\n   maintenance\
    \ of the registration specification is needed.\n"
- title: 11.7 Operation registration
  contents:
  - "11.7 Operation registration\n   Type of registration:  operation\n   Proposed\
    \ name of this operation:\n   Numeric operation-id value (to be assigned by the\
    \ IPP Designated\n   Expert in consultation with IANA):\n   Object Target (Job,\
    \ Printer, etc. that operation is upon):\n   Specification of this attribute (follow\
    \ the style of IPP Model\n   Section 3):\n   Name of proposer:\n   Address of\
    \ proposer:\n   Email address of proposer:\n   Note:  For operations, the IPP\
    \ Designated Expert will be the point of\n   contact for the approved registration\
    \ specification, if any\n   maintenance of the registration specification is needed.\n"
- title: 11.8 Attribute Group registration
  contents:
  - "11.8 Attribute Group registration\n   Type of registration:  attribute group\n\
    \   Proposed name of this attribute group:\n   Numeric tag according to [RFC2565]\
    \ (to be assigned by the IPP\n   Designated Expert in consultation with IANA):\n\
    \   Operation requests and group number for each operation in which the\n   attribute\
    \ group occurs:\n   Operation responses and group number for each operation in\
    \ which the\n   attribute group occurs:\n   Specification of this attribute group\
    \ (follow the style of IPP Model\n   Section 3):\n   Name of proposer:\n   Address\
    \ of proposer:\n   Email address of proposer:\n   Note:  For attribute groups,\
    \ the IPP Designated Expert will be the\n   point of contact for the approved\
    \ registration specification, if any\n   maintenance of the registration specification\
    \ is needed.\n"
- title: 11.9 Status code registration
  contents:
  - "11.9 Status code registration\n   Type of registration:  status code\n   Keyword\
    \ symbolic name of this status code value:\n   Numeric value (to be assigned by\
    \ the IPP Designated Expert in\n   consultation with IANA):\n   Operations that\
    \ this status code may be used with:\n   Specification of this status code (follow\
    \ the style of IPP Model\n   Section 14 APPENDIX B:  Status Codes and Suggested\
    \ Status Code\n   Messages):\n   Name of proposer:\n   Address of proposer:\n\
    \   Email address of proposer:\n   Note:  For status codes, the Designated Expert\
    \ will be the point of\n   contact for the approved registration specification,\
    \ if any\n   maintenance of the registration specification is needed.\n"
- title: '12. APPENDIX A: Terminology'
  contents:
  - "12. APPENDIX A: Terminology\n   This specification uses the terminology defined\
    \ in this section.\n"
- title: 12.1 Conformance Terminology
  contents:
  - "12.1 Conformance Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and  \"OPTIONAL\"\
    \ in this document are to be\n   interpreted as described in RFC 2119 [RFC2119].\n"
- title: 12.1.1 NEED NOT
  contents:
  - "12.1.1 NEED NOT\n   This term is not included in RFC 2119.  The verb \"NEED NOT\"\
    \ indicates\n   an action that the subject of the sentence does not have to implement\n\
    \   in order to claim conformance to the standard.  The verb \"NEED NOT\"\n  \
    \ is used instead of \"MAY NOT\" since \"MAY NOT\" sounds like a\n   prohibition.\n"
- title: 12.2 Model Terminology
  contents:
  - '12.2 Model Terminology

    '
- title: 12.2.1 Keyword
  contents:
  - "12.2.1 Keyword\n   Keywords are used within this document as identifiers of semantic\n\
    \   entities within the abstract model (see section 4.1.2.3).  Attribute\n   names,\
    \ some attribute values, attribute syntaxes, and attribute group\n   names are\
    \ represented as keywords.\n"
- title: 12.2.2 Attributes
  contents:
  - "12.2.2 Attributes\n   An attribute is an item of information that is associated\
    \ with an\n   instance of an IPP object.  An attribute consists of an attribute\n\
    \   name and one or more attribute values.  Each attribute has a specific\n  \
    \ attribute syntax.  All object attributes are defined in section 4 and\n   all\
    \ operation attributes are defined in section 3.\n   Job Template Attributes are\
    \ described in section 4.2. The client\n   optionally supplies Job Template attributes\
    \ in a create request\n   (operation requests that create Job objects).  The Printer\
    \ object has\n   associated attributes which define supported and default values\
    \ for\n   the Printer.\n"
- title: 12.2.2.1 Attribute Name
  contents:
  - "12.2.2.1 Attribute Name\n   Each attribute is uniquely identified in this document\
    \ by its\n   attribute name.  An attribute name is a keyword.  The keyword\n \
    \  attribute name is given in the section header describing that\n   attribute.\
    \  In running text in this document, attribute names are\n   indicated inside\
    \ double quotation marks (\") where the quotation marks\n   are not part of the\
    \ keyword itself.\n"
- title: 12.2.2.2 Attribute Group Name
  contents:
  - "12.2.2.2 Attribute Group Name\n   Related attributes are grouped into named groups.\
    \  The name of the\n   group is a keyword.  The group name may be used in place\
    \ of naming\n   all the attributes in the group explicitly.  Attribute groups\
    \ are\n   defined in section 3.\n"
- title: 12.2.2.3 Attribute Value
  contents:
  - "12.2.2.3 Attribute Value\n   Each attribute has one or more values.  Attribute\
    \ values are\n   represented in the syntax type specified for that attribute.\
    \ In\n   running text in this document, attribute values are indicated inside\n\
    \   single quotation marks ('), whether their attribute syntax is\n   keyword,\
    \ integer, text, etc.  where the quotation marks are not part\n   of the value\
    \ itself.\n"
- title: 12.2.2.4 Attribute Syntax
  contents:
  - "12.2.2.4 Attribute Syntax\n   Each attribute is defined using an explicit syntax\
    \ type.  In this\n   document, each syntax type is defined as a keyword with specific\n\
    \   meaning.  The Encoding and Transport document [RFC2565] indicates the\n  \
    \ actual \"on-the-wire\" encoding rules for each syntax type.  Attribute\n   syntax\
    \ types are defined in section 4.1.\n"
- title: 12.2.3 Supports
  contents:
  - "12.2.3 Supports\n   By definition, a Printer object supports an attribute only\
    \ if that\n   Printer object responds with the corresponding attribute populated\n\
    \   with some value(s) in a response to a query for that attribute.  A\n   Printer\
    \ object supports an attribute value if the value is one of the\n   Printer object's\
    \ \"supported values\" attributes.  The device behind a\n   Printer object may\
    \ exhibit a behavior that corresponds to some IPP\n   attribute, but if the Printer\
    \ object, when queried for that\n   attribute, doesn't respond with the attribute,\
    \ then as far as IPP is\n   concerned, that implementation does not support that\
    \ feature. If the\n   Printer object's \"xxx-supported\" attribute is not populated\
    \ with a\n   particular value (even if that value is a legal value for that\n\
    \   attribute), then that Printer object does not support that particular\n  \
    \ value.\n   A conforming implementation MUST support all REQUIRED attributes.\n\
    \   However, even for REQUIRED attributes, conformance to IPP does not\n   mandate\
    \ that all implementations support all possible values\n   representing all possible\
    \ job processing behaviors and features.  For\n   example, if a given instance\
    \ of a Printer supports only certain\n   document formats, then that Printer responds\
    \ with the \"document-\n   format-supported\" attribute populated with a set of\
    \ values, possibly\n   only one, taken from the entire set of possible values\
    \ defined for\n   that attribute. This limited set of values represents the Printer's\n\
    \   set of supported document formats.  Supporting an attribute and some\n   set\
    \ of values for that attribute enables IPP end users to be aware of\n   and make\
    \ use of those features associated with that attribute and\n   those values. \
    \ If an implementation chooses to not support an\n   attribute or some specific\
    \ value, then IPP end users would have no\n   ability to make use of that feature\
    \ within the context of IPP itself.\n   However, due to existing practice and\
    \ legacy systems which are not\n   IPP aware, there might be some other mechanism\
    \ outside the scope of\n   IPP to control or request the \"unsupported\" feature\
    \ (such as embedded\n   instructions within the document data itself).\n   For\
    \ example, consider the \"finishings-supported\" attribute.\n     1) If a Printer\
    \ object is not physically capable of stapling, the\n        \"finishings-supported\"\
    \ attribute MUST NOT be populated with the\n        value of 'staple'.\n     2)\
    \ A Printer object is physically capable of stapling, however an\n        implementation\
    \ chooses not to support stapling in the IPP\n        \"finishings\" attribute.\
    \  In this case, 'staple' MUST NOT be a\n        value in the \"finishings-supported\"\
    \ Printer object attribute.\n        Without support for the value 'staple', an\
    \ IPP end user would\n        have no means within the protocol itself to request\
    \ that a Job\n        be stapled.  However, an existing document data formatter\
    \ might\n        be able to request that the document be stapled directly with\
    \ an\n        embedded instruction within the document data.  In this case,\n\
    \        the IPP implementation does not \"support\" stapling, however the\n \
    \       end user is still able to have some control over the stapling of\n   \
    \     the completed job.\n     3) A Printer object is physically capable of stapling,\
    \ and an\n        implementation chooses to support stapling in the IPP\n    \
    \    \"finishings\" attribute. In this case, 'staple' MUST be a value\n      \
    \  in the \"finishings-supported\" Printer object attribute. Doing\n        so,\
    \ would enable end users to be aware of and make use of the\n        stapling\
    \ feature using IPP attributes.\n   Even though support for Job Template attributes\
    \ by a Printer object\n   is OPTIONAL, it is RECOMMENDED that if the device behind\
    \ a Printer\n   object is capable of realizing any feature or function that\n\
    \   corresponds to an IPP attribute and some associated value, then that\n   implementation\
    \ SHOULD support that IPP attribute and value.\n   The set of values in any of\
    \ the supported value attributes is set\n   (populated) by some administrative\
    \ process or automatic sensing\n   mechanism that is outside the scope of IPP.\
    \  For administrative\n   policy and control reasons, an administrator may choose\
    \ to make only\n   a subset of possible values visible to the end user.  In this\
    \ case,\n   the real output device behind the IPP Printer abstraction may be\n\
    \   capable of a certain feature, however an administrator is specifying\n   that\
    \ access to that feature not be exposed to the end user through\n   the IPP protocol.\
    \  Also, since a Printer object may represent a\n   logical print device (not\
    \ just a physical device) the actual process\n   for supporting a value is undefined\
    \ and left up to the\n   implementation.  However, if a Printer object supports\
    \ a value, some\n   manual human action may be needed to realize the semantic\
    \ action\n   associated with the value, but no end user action is required.\n\
    \   For example, if one of the values in the \"finishings-supported\"\n   attribute\
    \ is 'staple', the actual process might be an automatic\n   staple action by a\
    \ physical device controlled by some command sent to\n   the device.  Or, the\
    \ actual process of stapling might be a manual\n   action by an operator at an\
    \ operator attended Printer object.\n   For another example of how supported attributes\
    \ function, consider a\n   system administrator who desires to control all print\
    \ jobs so that no\n   job sheets are printed in order to conserve paper.  To force\
    \ no job\n   sheets, the system administrator sets the only supported value for\n\
    \   the \"job-sheets-supported\" attribute to 'none'.  In this case, if a\n  \
    \ client requests anything except 'none', the create request is\n   rejected or\
    \ the \"job-sheets\" value is ignored (depending on the value\n   of \"ipp-attribute-fidelity\"\
    ).  To force the use of job start/end\n   sheets on all jobs, the administrator\
    \ does not include the value '\n   none' in the \"job-sheets-supported\" attribute.\
    \  In this case, if a\n   client requests 'none', the create request is rejected\
    \ or the \"job-\n   sheets\" value is ignored (again depending on the value of\
    \ \"ipp-\n   attribute-fidelity\").\n"
- title: 12.2.4 print-stream page
  contents:
  - "12.2.4 print-stream page\n   A \"print-stream page\" is a page according to the\
    \ definition of pages\n   in the language used to express the document data.\n"
- title: 12.2.5 impression
  contents:
  - "12.2.5 impression\n   An \"impression\" is the image (possibly many print-stream\
    \ pages in\n   different configurations) imposed onto a single media page.\n"
- title: '13. APPENDIX B:  Status Codes and Suggested Status Code Messages'
  contents:
  - "13. APPENDIX B:  Status Codes and Suggested Status Code Messages\n   This section\
    \ defines status code enum keywords and values that are\n   used to provide semantic\
    \ information on the results of an operation\n   request.  Each operation response\
    \ MUST include a status code.  The\n   response MAY also contain a status message\
    \ that provides a short\n   textual description of the status.  The status code\
    \ is intended for\n   use by automata, and the status message is intended for\
    \ the human end\n   user.  Since the status message is an OPTIONAL component of\
    \ the\n   operation response, an IPP application (i.e., a browser, GUI, print\n\
    \   driver or gateway) is NOT REQUIRED to examine or display the status\n   message,\
    \ since it MAY not be returned to the application.\n   The prefix of the status\
    \ keyword defines the class of response as\n   follows:\n     \"informational\"\
    \ - Request received, continuing process\n     \"successful\" - The action was\
    \ successfully received, understood,\n        and accepted\n     \"redirection\"\
    \ - Further action must be taken in order to complete\n        the request\n \
    \    \"client-error\" - The request contains bad syntax or cannot be\n       \
    \ fulfilled\n     \"server-error\" - The IPP object  failed to fulfill an apparently\n\
    \        valid request\n   As with type2 enums, IPP status codes are extensible.\
    \  IPP clients\n   are NOT REQUIRED to understand the meaning of all registered\
    \ status\n   codes, though such understanding is obviously desirable.  However,\n\
    \   IPP clients MUST understand the class of any status code, as\n   indicated\
    \ by the prefix, and treat any unrecognized response as being\n   equivalent to\
    \ the first status code of that class, with the exception\n   that an unrecognized\
    \ response MUST NOT be cached.  For example, if an\n   unrecognized status code\
    \ of \"client-error-xxx-yyy\" is received by the\n   client, it can safely assume\
    \ that there was something wrong with its\n   request and treat the response as\
    \ if it had received a \"client-\n   error-bad-request\" status code.  In such\
    \ cases, IPP applications\n   SHOULD present the OPTIONAL message (if present)\
    \ to the end user\n   since the message is likely to contain human readable information\n\
    \   which will help to explain the unusual status.  The name of the enum\n   is\
    \ the suggested status message for US English.\n   The status code values range\
    \ from 0x0000 to 0x7FFF.  The value ranges\n   for each status code class are\
    \ as follows:\n     \"successful\" - 0x0000 to 0x00FF\n     \"informational\"\
    \ - 0x0100 to 0x01FF\n     \"redirection\" - 0x0200 to 0x02FF\n     \"client-error\"\
    \ - 0x0400 to 0x04FF\n     \"server-error\" - 0x0500 to 0x05FF\n   The top half\
    \ (128 values) of each range (0x0n40 to 0x0nFF, for n = 0\n   to 5) is reserved\
    \ for private use within each status code class.\n   Values 0x0600 to 0x7FFF are\
    \ reserved for future assignment and MUST\n   NOT be used.\n"
- title: 13.1 Status Codes
  contents:
  - "13.1 Status Codes\n   Each status code is described below. Section 13.1.5.9 contains\
    \ a\n   table that indicates which status codes apply to which operations.\n \
    \  The Implementer's Guide [ipp-iig] describe the suggested steps for\n   processing\
    \ IPP attributes for all operations, including returning\n   status codes.\n"
- title: 13.1.1 Informational
  contents:
  - "13.1.1 Informational\n   This class of status code indicates a provisional response\
    \ and is to\n   be used for informational purposes only.\n   There are no status\
    \ codes defined in IPP/1.0 for this class of status\n   code.\n"
- title: 13.1.2 Successful Status Codes
  contents:
  - "13.1.2 Successful Status Codes\n   This class of status code indicates that the\
    \ client's request was\n   successfully received, understood, and accepted.\n"
- title: 13.1.2.1 successful-ok (0x0000)
  contents:
  - "13.1.2.1 successful-ok (0x0000)\n   The request has succeeded and no request\
    \ attributes were substituted\n   or ignored.  In the case of a response to a\
    \ create request, the '\n   successful-ok' status code indicates that the request\
    \ was\n   successfully received and validated, and that the Job object has been\n\
    \   created; it does not indicate that the job has been processed.  The\n   transition\
    \ of the Job object into the 'completed' state is the only\n   indicator that\
    \ the job has been printed.\n"
- title: 13.1.2.2 successful-ok-ignored-or-substituted-attributes (0x0001)
  contents:
  - "13.1.2.2 successful-ok-ignored-or-substituted-attributes (0x0001)\n   The request\
    \ has succeeded, but some supplied (1) attributes were\n   ignored or (2) unsupported\
    \ values were substituted with supported\n   values or were ignored in order to\
    \ perform the operation without\n   rejecting it.  Unsupported attributes, attribute\
    \ syntaxes, or values\n   MUST be returned in the Unsupported Attributes group\
    \ of the response\n   for all operations.  There is an exception to this rule\
    \ for the query\n   operations:  Get-Printer-Attributes, Get-Jobs, and Get-Job-Attributes\n\
    \   for the \"requested-attributes\" operation attribute only.  When the\n   supplied\
    \ values of the \"requested-attributes\" operation attribute are\n   requesting\
    \ attributes that are not supported, the IPP object MAY, but\n   is NOT REQUIRED\
    \ to, return the \"requested-attributes\" attribute in\n   the Unsupported Attribute\
    \ response group (with the unsupported values\n   only).  See section 3.2.1.2.\n"
- title: 13.1.2.3 successful-ok-conflicting-attributes (0x0002)
  contents:
  - "13.1.2.3 successful-ok-conflicting-attributes (0x0002)\n   The request has succeeded,\
    \ but some supplied attribute values\n   conflicted with the values of other supplied\
    \ attributes.  These\n   conflicting values were either (1) substituted with (supported)\n\
    \   values or (2) the attributes were removed in order to process the job\n  \
    \ without rejecting it.  Attributes or values which conflict with other\n   attributes\
    \ and have been substituted or ignored MUST be returned in\n   the Unsupported\
    \ Attributes group of the response for all operations\n   as supplied by the client.\
    \  See section 3.2.1.2.\n"
- title: 13.1.3 Redirection Status Codes
  contents:
  - "13.1.3 Redirection Status Codes\n   This class of status code indicates that\
    \ further action needs to be\n   taken to fulfill the request.\n   There are no\
    \ status codes defined in IPP/1.0 for this class of status\n   code.\n"
- title: 13.1.4 Client Error Status Codes
  contents:
  - "13.1.4 Client Error Status Codes\n   This class of status code is intended for\
    \ cases in which the client\n   seems to have erred.  The IPP object SHOULD return\
    \ a message\n   containing an explanation of the error situation and whether it\
    \ is a\n   temporary or permanent condition.\n"
- title: 13.1.4.1 client-error-bad-request (0x0400)
  contents:
  - "13.1.4.1 client-error-bad-request (0x0400)\n   The request could not be understood\
    \ by the IPP object due to\n   malformed syntax (such as the value of a fixed\
    \ length attribute whose\n   length does not match the prescribed length for that\
    \ attribute - see\n   the Implementer's Guide [ipp-iig] ).  The IPP application\
    \ SHOULD NOT\n   repeat the request without modifications.\n"
- title: 13.1.4.2 client-error-forbidden (0x0401)
  contents:
  - "13.1.4.2 client-error-forbidden (0x0401)\n   The IPP object understood the request,\
    \ but is refusing to fulfill it.\n   Additional authentication information or\
    \ authorization credentials\n   will not help and the request SHOULD NOT be repeated.\
    \  This status\n   code is commonly used when the IPP object does not wish to\
    \ reveal\n   exactly why the request has been refused or when no other response\
    \ is\n   applicable.\n"
- title: 13.1.4.3 client-error-not-authenticated (0x0402)
  contents:
  - "13.1.4.3 client-error-not-authenticated (0x0402)\n   The request requires user\
    \ authentication.  The IPP client may repeat\n   the request with suitable authentication\
    \ information. If the request\n   already included authentication information,\
    \ then this status code\n   indicates that authorization has been refused for\
    \ those credentials.\n   If this response contains the same challenge as the prior\
    \ response,\n   and the user agent has already attempted authentication at least\n\
    \   once, then the response message may contain relevant diagnostic\n   information.\
    \  This status codes reveals more information than\n   \"client-error-forbidden\"\
    .\n"
- title: 13.1.4.4 client-error-not-authorized (0x0403)
  contents:
  - "13.1.4.4 client-error-not-authorized (0x0403)\n   The requester is not authorized\
    \ to perform the request.  Additional\n   authentication information or authorization\
    \ credentials will not help\n   and the request SHOULD NOT be repeated.  This\
    \ status code is used\n   when the IPP object wishes to reveal that the authentication\n\
    \   information is understandable, however, the requester is explicitly\n   not\
    \ authorized to perform the request.  This status codes reveals\n   more information\
    \ than \"client-error-forbidden\" and \"client-error-\n   not-authenticated\"\
    .\n"
- title: 13.1.4.5 client-error-not-possible (0x0404)
  contents:
  - "13.1.4.5 client-error-not-possible (0x0404)\n   This status code is used when\
    \ the request is for something that can\n   not happen.  For example, there might\
    \ be a request to cancel a job\n   that has already been canceled or aborted by\
    \ the system.  The IPP\n   client SHOULD NOT repeat the request.\n"
- title: 13.1.4.6 client-error-timeout (0x0405)
  contents:
  - "13.1.4.6 client-error-timeout (0x0405)\n   The client did not produce a request\
    \ within the time that the IPP\n   object was prepared to wait.  For example,\
    \ a client issued a Create-\n   Job operation and then, after a long period of\
    \ time, issued a Send-\n   Document operation and this error status code was returned\
    \ in\n   response to the Send-Document request  (see section 3.3.1).  The IPP\n\
    \   object might have been forced to clean up resources that had been\n   held\
    \ for the waiting additional Documents.  The IPP object was forced\n   to close\
    \ the Job since the client took too long.  The client SHOULD\n   NOT repeat the\
    \ request without modifications.\n"
- title: 13.1.4.7 client-error-not-found (0x0406)
  contents:
  - "13.1.4.7 client-error-not-found (0x0406)\n   The IPP object has not found anything\
    \ matching the request URI.  No\n   indication is given of whether the condition\
    \ is temporary or\n   permanent.  For example, a client with an old reference\
    \ to a Job (a\n   URI) tries to cancel the Job, however in the mean time the Job\
    \ might\n   have been completed and all record of it at the Printer has been\n\
    \   deleted.  This status code, 'client-error-not-found' is returned\n   indicating\
    \ that the referenced Job can not be found.  This error\n   status code is also\
    \ used when a client supplies a URI as a reference\n   to the document data in\
    \ either a Print-URI or Send-URI operation, but\n   the document can not be found.\n\
    \   In practice, an IPP application should avoid a not found situation by\n  \
    \ first querying and presenting a list of valid Printer URIs and Job\n   URIs\
    \ to the end-user.\n"
- title: 13.1.4.8 client-error-gone (0x0407)
  contents:
  - "13.1.4.8 client-error-gone (0x0407)\n   The requested object is no longer available\
    \ and no forwarding address\n   is known.  This condition should be considered\
    \ permanent.  Clients\n   with link editing capabilities should delete references\
    \ to the\n   request URI after user approval.  If the IPP object does not know\
    \ or\n   has no facility to determine, whether or not the condition is\n   permanent,\
    \ the status code \"client-error-not-found\" should be used\n   instead.\n   This\
    \ response is primarily intended to assist the task of maintenance\n   by notifying\
    \ the recipient that the resource is intentionally\n   unavailable and that the\
    \ IPP object administrator desires that remote\n   links to that resource be removed.\
    \ It is not necessary to mark all\n   permanently unavailable resources as \"\
    gone\" or to keep the mark for\n   any length of time -- that is left to the discretion\
    \ of the IPP\n   object administrator.\n"
- title: 13.1.4.9 client-error-request-entity-too-large (0x0408)
  contents:
  - "13.1.4.9 client-error-request-entity-too-large (0x0408)\n   The IPP object is\
    \ refusing to process a request because the request\n   entity is larger than\
    \ the IPP object is willing or able to process.\n   An IPP Printer returns this\
    \ status code when it limits the size of\n   print jobs and it receives a print\
    \ job that exceeds that limit or\n   when the attributes are so many that their\
    \ encoding causes the\n   request entity to exceed IPP object capacity.\n"
- title: 13.1.4.10 client-error-request-value-too-long (0x0409)
  contents:
  - "13.1.4.10 client-error-request-value-too-long (0x0409)\n   The IPP object is\
    \ refusing to service the request because one or more\n   of the client-supplied\
    \ attributes has a variable length value that is\n   longer than the maximum length\
    \ specified for that attribute.  The IPP\n   object might not have sufficient\
    \ resources (memory, buffers, etc.) to\n   process (even temporarily), interpret,\
    \ and/or ignore a value larger\n   than the maximum length.  Another use of this\
    \ error code is when the\n   IPP object supports the processing of a large value\
    \ that is less than\n   the maximum length, but during the processing of the request\
    \ as a\n   whole, the object may pass the value onto some other system component\n\
    \   which is not able to accept the large value.  For more details, see\n   the\
    \ Implementer's Guide [ipp-iig] .\n   Note:  For attribute values that are URIs,\
    \ this rare condition is\n   only likely to occur when a client has improperly\
    \ submitted a request\n   with long query information (e.g. an IPP application\
    \ allows an end-\n   user to enter an invalid URI), when the client has descended\
    \ into a\n   URI \"black hole\" of redirection (e.g., a redirected URI prefix\
    \ that\n   points to a suffix of itself), or when the IPP object is under attack\n\
    \   by a client attempting to exploit security holes present in some IPP\n   objects\
    \ using fixed-length buffers for reading or manipulating the\n   Request-URI.\n"
- title: 13.1.4.11 client-error-document-format-not-supported (0x040A)
  contents:
  - "13.1.4.11 client-error-document-format-not-supported (0x040A)\n   The IPP object\
    \ is refusing to service the request because the\n   document data is in a format,\
    \ as specified in the \"document-format\"\n   operation attribute, that is not\
    \ supported by the Printer object.\n   This error is returned independent of the\
    \ client-supplied \"ipp-\n   attribute-fidelity\".  The Printer object MUST return\
    \ this status\n   code, even if there are other attributes that are not supported\
    \ as\n   well, since this error is a bigger problem than with Job Template\n \
    \  attributes.\n"
- title: 13.1.4.12 client-error-attributes-or-values-not-supported (0x040B)
  contents:
  - "13.1.4.12 client-error-attributes-or-values-not-supported (0x040B)\n   In a create\
    \ request, if the Printer object does not support one or\n   more attributes,\
    \ attribute syntaxes, or attribute values supplied in\n   the request and the\
    \ client supplied the \"ipp-attributes-fidelity\"\n   operation attribute with\
    \ the 'true' value, the Printer object MUST\n   return this status code.  For\
    \ example, if the request indicates '\n   iso-a4' media, but that media type is\
    \ not supported by the Printer\n   object.  Or, if the client supplies an optional\
    \ attribute and the\n   attribute itself is not even supported by the Printer.\
    \  If the \"ipp-\n   attribute-fidelity\" attribute is 'false', the Printer MUST\
    \ ignore or\n   substitute values for unsupported attributes and values rather\
    \ than\n   reject the request and return this status code.\n   For any operation\
    \ where a client requests attributes (such as a Get-\n   Jobs, Get-Printer-Attributes,\
    \ or Get-Job-Attributes operation), if\n   the IPP object does not support one\
    \ or more of the requested\n   attributes, the IPP object simply ignores the unsupported\
    \ requested\n   attributes and processes the request as if they had not been\n\
    \   supplied, rather than returning this status code.  In this case, the\n   IPP\
    \ object MUST return the 'successful-ok-ignored-or-substituted-\n   attributes'\
    \ status code and MAY return the unsupported attributes as\n   values of the \"\
    requested-attributes\" in the Unsupported Attributes\n   Group (see section 13.1.2.2).\n"
- title: 13.1.4.13 client-error-uri-scheme-not-supported (0x040C)
  contents:
  - "13.1.4.13 client-error-uri-scheme-not-supported (0x040C)\n   The type of the\
    \ client supplied URI in a Print-URI or a Send-URI\n   operation is not supported.\n"
- title: 13.1.4.14 client-error-charset-not-supported (0x040D)
  contents:
  - "13.1.4.14 client-error-charset-not-supported (0x040D)\n   For any operation,\
    \ if the IPP Printer does not support the charset\n   supplied by the client in\
    \ the \"attributes-charset\" operation\n   attribute, the Printer MUST reject\
    \ the operation and return this\n   status and any 'text' or 'name' attributes\
    \ using the 'utf-8' charset\n   (see Section 3.1.4.1).\n"
- title: 13.1.4.15 client-error-conflicting-attributes (0x040E)
  contents:
  - "13.1.4.15 client-error-conflicting-attributes (0x040E)\n   The request is rejected\
    \ because some attribute values conflicted with\n   the values of other attributes\
    \ which this specification does not\n   permit to be substituted or ignored.\n"
- title: 13.1.5 Server Error Status Codes
  contents:
  - "13.1.5 Server Error Status Codes\n   This class of status codes indicates cases\
    \ in which the IPP object is\n   aware that it has erred or is incapable of performing\
    \ the request.\n   The IPP object SHOULD include a message containing an explanation\
    \ of\n   the error situation, and whether it is a temporary or permanent\n   condition.\n"
- title: 13.1.5.1 server-error-internal-error (0x0500)
  contents:
  - "13.1.5.1 server-error-internal-error (0x0500)\n   The IPP object encountered\
    \ an unexpected condition that prevented it\n   from fulfilling the request. \
    \ This error status code differs from\n   \"server-error-temporary-error\" in\
    \ that it implies a more permanent\n   type of internal error.  It also differs\
    \ from \"server-error-device-\n   error\" in that it implies an unexpected condition\
    \ (unlike a paper-jam\n   or out-of-toner problem which is undesirable but expected).\
    \  This\n   error status code indicates that probably some knowledgeable human\n\
    \   intervention is required.\n"
- title: 13.1.5.2 server-error-operation-not-supported (0x0501)
  contents:
  - "13.1.5.2 server-error-operation-not-supported (0x0501)\n   The IPP object does\
    \ not support the functionality required to fulfill\n   the request. This is the\
    \ appropriate response when the IPP object\n   does not recognize an operation\
    \ or is not capable of supporting it.\n"
- title: 13.1.5.3 server-error-service-unavailable (0x0502)
  contents:
  - "13.1.5.3 server-error-service-unavailable (0x0502)\n   The IPP object is currently\
    \ unable to handle the request due to a\n   temporary overloading or maintenance\
    \ of the IPP object.  The\n   implication is that this is a temporary condition\
    \ which will be\n   alleviated after some delay. If known, the length of the delay\
    \ may be\n   indicated in the message.  If no delay is given, the IPP application\n\
    \   should handle the response as it would for a \"server-error-\n   temporary-error\"\
    \ response.  If the condition is more permanent, the\n   error status codes \"\
    client-error-gone\" or \"client-error-not-found\"\n   could be used.\n"
- title: 13.1.5.4 server-error-version-not-supported (0x0503)
  contents:
  - "13.1.5.4 server-error-version-not-supported (0x0503)\n   The IPP object does\
    \ not support, or refuses to support, the IPP\n   protocol version that was used\
    \ in the request message.  The IPP\n   object is indicating that it is unable\
    \ or unwilling to complete the\n   request using the same version as supplied\
    \ in the request other than\n   with this error message. The response should contain\
    \ a Message\n   describing why that version is not supported and what other versions\n\
    \   are supported by that IPP object.\n   A conforming IPP/1.0 client MUST specify\
    \ the valid version ('1.0') on\n   each request.  A conforming IPP/1.0 object\
    \ MUST NOT return this\n   status code to a conforming IPP/1.0 client.  An IPP\
    \ object MUST\n   return this status code to a non-conforming IPP client.  The\
    \ response\n   MUST identify in the \"version-number\" operation attribute the\
    \ closest\n   version number that the IPP object does support.\n"
- title: 13.1.5.5 server-error-device-error (0x0504)
  contents:
  - "13.1.5.5 server-error-device-error (0x0504)\n   A printer error, such as a paper\
    \ jam, occurs while the IPP object\n   processes a Print or Send operation.  The\
    \ response contains the true\n   Job Status (the values of the \"job-state\" and\
    \ \"job-state-reasons\"\n   attributes).  Additional information can be returned\
    \ in the optional\n   \"job-state-message\" attribute value or in the OPTIONAL\
    \ status message\n   that describes the error in more detail.  This error status\
    \ code is\n   only returned in situations where the Printer is unable to accept\
    \ the\n   create request because of such a device error.  For example, if the\n\
    \   Printer is unable to spool, and can only accept one job at a time,\n   the\
    \ reason it might reject a create request is that the printer\n   currently has\
    \ a paper jam.  In many cases however, where the Printer\n   object can accept\
    \ the request even though the Printer has some error\n   condition, the 'successful-ok'\
    \ status code will be returned.  In such\n   a case, the client would look at\
    \ the returned Job Object Attributes\n   or later query the Printer to determine\
    \ its state and state reasons.\n"
- title: 13.1.5.6 server-error-temporary-error (0x0505)
  contents:
  - "13.1.5.6 server-error-temporary-error (0x0505)\n   A temporary error such as\
    \ a buffer full write error, a memory\n   overflow (i.e. the document data exceeds\
    \ the memory of the Printer),\n   or a disk full condition, occurs while the IPP\
    \ Printer processes an\n   operation.  The client MAY try the unmodified request\
    \ again at some\n   later point in time with an expectation that the temporary\
    \ internal\n   error condition may have been cleared.  Alternatively, as an\n\
    \   implementation option, a Printer object MAY delay the response until\n   the\
    \ temporary condition is cleared so that no error is returned.\n"
- title: 13.1.5.7 server-error-not-accepting-jobs (0x0506)
  contents:
  - "13.1.5.7 server-error-not-accepting-jobs (0x0506)\n   A temporary error indicating\
    \ that the Printer is not currently\n   accepting jobs, because the administrator\
    \ has set the value of the\n   Printer's \"printer-is-not-accepting-jobs\" attribute\
    \ to 'false' (by\n   means outside of IPP/1.0).\n"
- title: 13.1.5.8 server-error-busy (0x0507)
  contents:
  - "13.1.5.8 server-error-busy (0x0507)\n   A temporary error indicating that the\
    \ Printer is too busy processing\n   jobs and/or other requests. The client SHOULD\
    \ try the unmodified\n   request again at some later point in time with an expectation\
    \ that\n   the temporary busy condition will have been cleared.\n"
- title: 13.1.5.9 server-error-job-canceled (0x0508)
  contents:
  - "13.1.5.9 server-error-job-canceled (0x0508)\n   An error indicating that the\
    \ job has been canceled by an operator or\n   the system while the client was\
    \ transmitting the data to the IPP\n   Printer.  If a job-id and job-uri had been\
    \ created, then they are\n   returned in the Print-Job, Send-Document, or Send-URI\
    \ response as\n   usual; otherwise, no job-id and job-uri are returned in the\
    \ response.\n"
- title: 13.2 Status Codes for IPP Operations
  contents:
  - "13.2 Status Codes for IPP Operations\n   PJ = Print-Job, PU = Print-URI, CJ =\
    \ Create-Job, SD = Send-Document\n   SU = Send-URI, V = Validate-Job, GA = Get-Job-Attributes\
    \ and\n   Get-Printer-Attributes, GJ = Get-Jobs, C = Cancel-Job\n            \
    \                                      IPP Operations\n   IPP Status Keyword \
    \                      PJ PU CJ SD SU V GA GJ C\n   ------------------       \
    \                -- -- -- -- -- - -- -- -\n   successful-ok                  \
    \          x  x  x  x  x  x x  x  x\n   successful-ok-ignored-or-substituted-\
    \    x  x  x  x  x  x x  x  x\n        attributes\n   successful-ok-conflicting-attributes\
    \     x  x  x  x  x  x x  x  x\n   client-error-bad-request                 x\
    \  x  x  x  x  x x  x  x\n   client-error-forbidden                   x  x  x\
    \  x  x  x x  x  x\n   client-error-not-authenticated           x  x  x  x  x\
    \  x x  x  x\n   client-error-not-authorized              x  x  x  x  x  x x \
    \ x  x\n   client-error-not-possible                x  x  x  x  x  x x  x  x\n\
    \   client-error-timeout                           x  x\n   client-error-not-found\
    \                   x  x  x  x  x  x x  x  x\n   client-error-gone           \
    \             x  x  x  x  x  x x  x  x\n   client-error-request-entity-too-large\
    \    x  x  x  x  x  x x  x  x\n   client-error-request-value-too-long      x \
    \ x  x  x  x  x x  x  x\n   client-error-document-format-not-        x  x    \
    \ x  x  x x\n        supported\n   client-error-attributes-or-values-not-   x\
    \  x  x  x  x  x x  x  x\n        supported\n   client-error-uri-scheme-not-supported\
    \       x        x\n   client-error-charset-not-supported       x  x  x  x  x\
    \  x x  x  x\n   client-error-conflicting-attributes      x  x  x  x  x  x x \
    \ x  x\n   server-error-internal-error              x  x  x  x  x  x x  x  x\n\
    \   server-error-operation-not-supported        x  x  x  x\n   server-error-service-unavailable\
    \         x  x  x  x  x  x x  x  x\n   server-error-version-not-supported    \
    \   x  x  x  x  x  x x  x  x\n   server-error-device-error                x  x\
    \  x  x  x\n   server-error-temporary-error             x  x  x  x  x\n   server-error-not-accepting-jobs\
    \          x  x  x        x\n   server-error-busy                        x  x\
    \  x  x  x  x x  x  x\n   server-error-job-canceled                x        x\n"
- title: '14. APPENDIX C:  "media" keyword values'
  contents:
  - "14. APPENDIX C:  \"media\" keyword values\n   Standard keyword values are taken\
    \ from several sources.\n   Standard values are defined (taken from DPA[ISO10175]\
    \ and the Printer\n   MIB[RFC1759]):\n     'default': The default medium for the\
    \ output device\n     'iso-a4-white': Specifies the ISO A4 white medium\n    \
    \ 'iso-a4-colored': Specifies the ISO A4 colored medium\n     'iso-a4-transparent'\
    \ Specifies the ISO A4 transparent medium\n     'iso-a3-white': Specifies the\
    \ ISO A3 white medium\n     'iso-a3-colored': Specifies the ISO A3 colored medium\n\
    \     'iso-a5-white': Specifies the ISO A5 white medium\n     'iso-a5-colored':\
    \ Specifies the ISO A5 colored medium\n     'iso-b4-white': Specifies the ISO\
    \ B4 white medium\n     'iso-b4-colored': Specifies the ISO B4 colored medium\n\
    \     'iso-b5-white': Specifies the ISO B5 white medium\n     'iso-b5-colored':\
    \ Specifies the ISO B5 colored medium\n     'jis-b4-white': Specifies the JIS\
    \ B4 white medium\n     'jis-b4-colored': Specifies the JIS B4 colored medium\n\
    \     'jis-b5-white': Specifies the JIS B5 white medium\n     'jis-b5-colored':\
    \ Specifies the JIS B5 colored medium\n   The following standard values are defined\
    \ for North American media:\n     'na-letter-white': Specifies the North American\
    \ letter white medium\n     'na-letter-colored': Specifies the North American\
    \ letter colored\n        medium\n     'na-letter-transparent': Specifies the\
    \ North American letter\n        transparent medium\n     'na-legal-white': Specifies\
    \ the North American legal white medium\n     'na-legal-colored': Specifies the\
    \ North American legal colored\n        medium\n   The following standard values\
    \ are defined for envelopes:\n     'iso-b4-envelope': Specifies the ISO B4 envelope\
    \ medium\n     'iso-b5-envelope': Specifies the ISO B5 envelope medium\n     'iso-c3-envelope':\
    \ Specifies the ISO C3 envelope medium\n     'iso-c4-envelope': Specifies the\
    \ ISO C4 envelope medium\n     'iso-c5-envelope': Specifies the ISO C5 envelope\
    \ medium\n     'iso-c6-envelope': Specifies the ISO C6 envelope medium\n     'iso-designated-long-envelope':\
    \ Specifies the ISO Designated Long\n        envelope medium\n     'na-10x13-envelope':\
    \ Specifies the North American 10x13 envelope\n        medium\n     'na-9x12-envelope':\
    \ Specifies the North American 9x12 envelope\n        medium\n     'monarch-envelope':\
    \ Specifies the Monarch envelope\n     'na-number-10-envelope': Specifies the\
    \ North American number 10\n        business envelope medium\n     'na-7x9-envelope':\
    \ Specifies the North American 7x9 inch envelope\n     'na-9x11-envelope': Specifies\
    \ the North American 9x11 inch envelope\n     'na-10x14-envelope': Specifies the\
    \ North American 10x14 inch\n        envelope\n     'na-number-9-envelope': Specifies\
    \ the North American number 9\n        business envelope\n     'na-6x9-envelope':\
    \ Specifies the North American 6x9 inch envelope\n     'na-10x15-envelope': Specifies\
    \ the North American 10x15 inch\n        envelope\n   The following standard values\
    \ are defined for the less commonly used\n   media (white-only):\n     'executive-white':\
    \ Specifies the white executive medium\n     'folio-white': Specifies the folio\
    \ white medium\n     'invoice-white': Specifies the white invoice medium\n   \
    \  'ledger-white': Specifies the white ledger medium\n     'quarto-white': Specified\
    \ the white quarto medium\n     'iso-a0-white': Specifies the ISO A0 white medium\n\
    \     'iso-a1-white': Specifies the ISO A1 white medium\n     'iso-a2-white':\
    \ Specifies the ISO A2 white medium\n     'iso-a6-white': Specifies the ISO A6\
    \ white medium\n     'iso-a7-white': Specifies the ISO A7 white medium\n     'iso-a8-white':\
    \ Specifies the ISO A8 white medium\n     'iso-a9-white': Specifies the ISO A9\
    \ white medium\n     'iso-10-white': Specifies the ISO A10 white medium\n    \
    \ 'iso-b0-white': Specifies the ISO B0 white medium\n     'iso-b1-white': Specifies\
    \ the ISO B1 white medium\n     'iso-b2-white': Specifies the ISO B2 white medium\n\
    \     'iso-b3-white': Specifies the ISO B3 white medium\n     'iso-b6-white':\
    \ Specifies the ISO B6 white medium\n     'iso-b7-white': Specifies the ISO B7\
    \ white medium\n     'iso-b8-white': Specifies the ISO B8 white medium\n     'iso-b9-white':\
    \ Specifies the ISO B9 white medium\n     'iso-b10-white': Specifies the ISO B10\
    \ white medium\n     'jis-b0-white': Specifies the JIS B0 white medium\n     'jis-b1-white':\
    \ Specifies the JIS B1 white medium\n     'jis-b2-white': Specifies the JIS B2\
    \ white medium\n     'jis-b3-white': Specifies the JIS B3 white medium\n     'jis-b6-white':\
    \ Specifies the JIS B6 white medium\n     'jis-b7-white': Specifies the JIS B7\
    \ white medium\n     'jis-b8-white': Specifies the JIS B8 white medium\n     'jis-b9-white':\
    \ Specifies the JIS B9 white medium\n     'jis-b10-white': Specifies the JIS B10\
    \ white medium\n   The following standard values are defined for engineering media:\n\
    \     'a': Specifies the engineering A size medium\n     'b': Specifies the engineering\
    \ B size medium\n     'c': Specifies the engineering C size medium\n     'd':\
    \ Specifies the engineering D size medium\n     'e': Specifies the engineering\
    \ E size medium\n   The following standard values are defined for input-trays\
    \ (from ISO\n   DPA and the Printer MIB):\n     'top': The top input tray in the\
    \ printer.\n     'middle': The middle input tray in the printer.\n     'bottom':\
    \ The bottom input tray in the printer.\n     'envelope': The envelope input tray\
    \ in the printer.\n     'manual': The manual feed input tray in the printer.\n\
    \     'large-capacity': The large capacity input tray in the printer.\n     'main':\
    \ The main input tray\n     'side': The side input tray\n   The following standard\
    \ values are defined for media sizes (from ISO\n   DPA):\n     'iso-a0': Specifies\
    \ the ISO A0 size: 841 mm by 1189 mm as defined\n        in ISO 216\n     'iso-a1':\
    \ Specifies the ISO A1 size: 594 mm by 841 mm as defined in\n        ISO 216\n\
    \     'iso-a2': Specifies the ISO A2 size: 420 mm by 594 mm as defined in\n  \
    \      ISO 216\n     'iso-a3': Specifies the ISO A3 size: 297 mm by 420 mm as\
    \ defined in\n        ISO 216\n     'iso-a4': Specifies the ISO A4 size: 210 mm\
    \ by 297 mm as defined in\n        ISO 216\n     'iso-a5': Specifies the ISO A5\
    \ size: 148 mm by 210 mm as defined in\n        ISO 216\n     'iso-a6': Specifies\
    \ the ISO A6 size: 105 mm by 148 mm as defined in\n        ISO 216\n     'iso-a7':\
    \ Specifies the ISO A7 size: 74 mm by 105 mm as defined in\n        ISO 216\n\
    \     'iso-a8': Specifies the ISO A8 size: 52 mm by 74 mm as defined in\n    \
    \    ISO 216\n     'iso-a9': Specifies the ISO A9 size: 37 mm by 52 mm as defined\
    \ in\n        ISO 216\n     'iso-a10': Specifies the ISO A10 size: 26 mm by 37\
    \ mm as defined in\n        ISO 216\n     'iso-b0': Specifies the ISO B0 size:\
    \ 1000 mm by 1414 mm as defined\n        in ISO 216\n     'iso-b1': Specifies\
    \ the ISO B1 size: 707 mm by 1000 mm as defined\n        in ISO 216\n     'iso-b2':\
    \ Specifies the ISO B2 size: 500 mm by 707 mm as defined in\n        ISO 216\n\
    \     'iso-b3': Specifies the ISO B3 size: 353 mm by 500 mm as defined in\n  \
    \      ISO 216\n     'iso-b4': Specifies the ISO B4 size: 250 mm by 353 mm as\
    \ defined in\n        ISO 216\n     'iso-b5': Specifies the ISO B5 size: 176 mm\
    \ by 250 mm as defined in\n        ISO 216\n     'iso-b6': Specifies the ISO B6\
    \ size: 125 mm by 176 mm as defined in\n        ISO 216\n     'iso-b7': Specifies\
    \ the ISO B7 size: 88 mm by 125 mm as defined in\n        ISO 216\n     'iso-b8':\
    \ Specifies the ISO B8 size: 62 mm by 88 mm as defined in\n        ISO 216\n \
    \    'iso-b9': Specifies the ISO B9 size: 44 mm by 62 mm as defined in\n     \
    \   ISO 216\n     'iso-b10': Specifies the ISO B10 size: 31 mm by 44 mm as defined\
    \ in\n        ISO 216\n     'na-letter': Specifies the North American letter size:\
    \ 8.5 inches by\n        11 inches\n     'na-legal': Specifies the North American\
    \ legal size: 8.5 inches by\n        14 inches\n     'executive': Specifies the\
    \ executive size (7.25 X 10.5 in)\n     'folio': Specifies the folio size (8.5\
    \ X 13 in)\n     'invoice': Specifies the invoice size (5.5 X 8.5 in)\n     'ledger':\
    \ Specifies the ledger size (11 X 17 in)\n     'quarto': Specifies the quarto\
    \ size (8.5 X 10.83 in)\n     'iso-c3': Specifies the ISO C3 size: 324 mm by 458\
    \ mm as defined in\n        ISO 269\n     'iso-c4': Specifies the ISO C4 size:\
    \ 229 mm by 324 mm as defined in\n        ISO 269\n     'iso-c5': Specifies the\
    \ ISO C5 size: 162 mm by 229 mm as defined in\n        ISO 269\n     'iso-c6':\
    \ Specifies the ISO C6 size: 114 mm by 162 mm as defined in\n        ISO 269\n\
    \     'iso-designated-long': Specifies the ISO Designated Long size: 110\n   \
    \     mm by 220 mm as defined in ISO 269\n     'na-10x13-envelope': Specifies\
    \ the North American 10x13 size: 10\n        inches by 13 inches\n     'na-9x12-envelope':\
    \ Specifies the North American 9x12 size: 9\n        inches by 12 inches\n   \
    \  'na-number-10-envelope': Specifies the North American number 10\n        business\
    \ envelope size: 4.125 inches by 9.5 inches\n     'na-7x9-envelope': Specifies\
    \ the North American 7x9 inch envelope\n        size\n     'na-9x11-envelope':\
    \ Specifies the North American 9x11 inch envelope\n        size\n     'na-10x14-envelope':\
    \ Specifies the North American 10x14 inch\n        envelope size\n     'na-number-9-envelope':\
    \ Specifies the North American number 9\n        business envelope size\n    \
    \ 'na-6x9-envelope': Specifies the North American 6x9 envelope size\n     'na-10x15-envelope':\
    \ Specifies the North American 10x15 envelope\n        size\n     'monarch-envelope':\
    \ Specifies the Monarch envelope size (3.87 x 7.5\n        in)\n     'jis-b0':\
    \ Specifies the JIS B0 size: 1030mm x 1456mm\n     'jis-b1': Specifies the JIS\
    \ B1 size: 728mm x 1030mm\n     'jis-b2': Specifies the JIS B2 size: 515mm x 728mm\n\
    \     'jis-b3': Specifies the JIS B3 size: 364mm x 515mm\n     'jis-b4': Specifies\
    \ the JIS B4 size: 257mm x 364mm\n     'jis-b5': Specifies the JIS B5 size: 182mm\
    \ x 257mm\n     'jis-b6': Specifies the JIS B6 size: 128mm x 182mm\n     'jis-b7':\
    \ Specifies the JIS B7 size: 91mm x 128mm\n     'jis-b8': Specifies the JIS B8\
    \ size: 64mm x 91mm\n     'jis-b9': Specifies the JIS B9 size: 45mm x 64mm\n \
    \    'jis-b10': Specifies the JIS B10 size: 32mm x 45mm\n"
- title: '15. APPENDIX D: Processing IPP Attributes'
  contents:
  - "15. APPENDIX D: Processing IPP Attributes\n   When submitting a print job to\
    \ a Printer object, the IPP model allows\n   a client to supply operation and\
    \ Job Template attributes along with\n   the document data.  These Job Template\
    \ attributes in the create\n   request affect the rendering, production and finishing\
    \ of the\n   documents in the job.  Similar types of instructions may also be\n\
    \   contained in the document to be printed, that is, embedded within the\n  \
    \ print data itself.  In addition, the Printer has a set of attributes\n   that\
    \ describe what rendering and finishing options which are\n   supported by that\
    \ Printer.  This model, which allows for flexibility\n   and power, also introduces\
    \ the potential that at job submission time,\n   these client-supplied attributes\
    \ may conflict with either:\n     - what the implementation is capable of realizing\
    \ (i.e., what the\n       Printer supports), as well as\n     - the instructions\
    \ embedded within the print data itself.\n   The following sections describe how\
    \ these two types of conflicts are\n   handled in the IPP model.\n"
- title: 15.1 Fidelity
  contents:
  - "15.1 Fidelity\n   If there is a conflict between what the client requests and\
    \ what a\n   Printer object supports, the client may request one of two possible\n\
    \   conflict handling mechanisms:\n     1) either reject the job since the job\
    \ can not be processed exactly\n        as specified, or\n     2) allow the Printer\
    \ to make any changes necessary to proceed with\n        processing the Job the\
    \ best it can.\n   In the first case the client is indicating to the Printer object:\n\
    \   \"Print the job exactly as specified with no exceptions, and if that\n   can't\
    \ be done, don't even bother printing the job at all.\" In the\n   second case,\
    \ the client is indicating to the Printer object: \"It is\n   more important to\
    \ make sure the job is printed rather than be\n   processed exactly as specified;\
    \ just make sure the job is printed\n   even if client supplied attributes need\
    \ to be changed or ignored.\"\n   The IPP model accounts for this situation by\
    \ introducing an \"ipp-\n   attribute-fidelity\" attribute.\n   In a create request,\
    \ \"ipp-attribute-fidelity\" is a boolean operation\n   attribute that is OPTIONALLY\
    \ supplied by the client.  The value '\n   true' indicates that total fidelity\
    \ to client supplied Job Template\n   attributes and values is required.  The\
    \ client is requesting that the\n   Job be printed exactly as specified, and if\
    \ that is not possible then\n   the job MUST be rejected rather than processed\
    \ incorrectly.  The\n   value 'false' indicates that a reasonable attempt to print\
    \ the Job is\n   acceptable.  If a Printer does not support some of the client\n\
    \   supplied Job Template attributes or values, the Printer MUST ignore\n   them\
    \ or substitute any supported value for unsupported values,\n   respectively.\
    \  The Printer may choose to substitute the default value\n   associated with\
    \ that attribute, or use some other supported value\n   that is similar to the\
    \ unsupported requested value.  For example, if\n   a client supplies a \"media\"\
    \ value of 'na-letter', the Printer may\n   choose to substitute 'iso-a4' rather\
    \ than a default value of '\n   envelope'. If the client does not supply the \"\
    ipp-attribute-fidelity\"\n   attribute, the Printer assumes a value of 'false'.\n\
    \   Each Printer implementation MUST support both types of \"fidelity\"\n   printing\
    \ (that is whether the client supplies a value of 'true' or '\n   false'):\n \
    \    - If the client supplies 'false' or does not supply the attribute,\n    \
    \   the Printer object MUST always accept the request by ignoring\n       unsupported\
    \ Job Template attributes and by substituting\n       unsupported values of supported\
    \ Job Template attributes with\n       supported values.\n     - If the client\
    \ supplies 'true', the Printer object MUST reject the\n       request if the client\
    \ supplies unsupported Job Template\n       attributes.\n   Since a client can\
    \ always query a Printer to find out exactly what is\n   and is not supported,\
    \ \"ipp-attribute-fidelity\" set to 'false' is\n   useful when:\n     1) The End-User\
    \ uses a command line interface to request attributes\n        that might not\
    \ be supported.\n     2) In a GUI context, if the End User expects the job might\
    \ be moved\n        to another printer and prefers a sub-optimal result to nothing\n\
    \        at all.\n     3) The End User just wants something reasonable in lieu\
    \ of nothing\n        at all.\n"
- title: 15.2 Page Description Language (PDL) Override
  contents:
  - "15.2 Page Description Language (PDL) Override\n   If there is a conflict between\
    \ the value of an IPP Job Template\n   attribute and a corresponding instruction\
    \ in the document data, the\n   value of the IPP attribute SHOULD take precedence\
    \ over the document\n   instruction.  Consider the case where a previously formatted\
    \ file of\n   document data is sent to an IPP Printer.  In this case, if the client\n\
    \   supplies any attributes at job submission time, the client desires\n   that\
    \ those attributes override the embedded instructions.  Consider\n   the case\
    \ were a previously formatted document has embedded in it\n   commands to load\
    \ 'iso-a4' media.  However, the document is passed to\n   an end user that only\
    \ has access to a printer with 'na-letter' media\n   loaded.  That end user most\
    \ likely wants to submit that document to\n   an IPP Printer with the \"media\"\
    \ Job Template attribute set to 'na-\n   letter'.  The job submission attribute\
    \ should take precedence over\n   the embedded PDL instruction.  However, until\
    \ companies that supply\n   document data interpreters allow a way for external\
    \ IPP attributes to\n   take precedence over embedded job production instructions,\
    \ a Printer\n   might not be able to support the semantics that IPP attributes\n\
    \   override the embedded instructions.\n   The IPP model accounts for this situation\
    \ by introducing a \"pdl-\n   override-supported\" attribute that describes the\
    \ Printer objects\n   capabilities to override instructions embedded in the PDL\
    \ data\n   stream.  The value of the \"pdl-override-supported\" attribute is\n\
    \   configured by means outside IPP/1.0.\n   This REQUIRED Printer attribute takes\
    \ on the following values:\n     - 'attempted': This value indicates that the\
    \ Printer object\n       attempts to make the IPP attribute values take precedence\
    \ over\n       embedded instructions in the document data, however there is no\n\
    \       guarantee.\n     - 'not-attempted': This value indicates that the Printer\
    \ object\n       makes no attempt to make the IPP attribute values take precedence\n\
    \       over embedded instructions in the document data.\n   At job processing\
    \ time, an implementation that supports the value of\n   'attempted' might do\
    \ one of several different actions:\n     1) Generate an output device specific\
    \ command sequence to realize\n        the feature represented by the IPP attribute\
    \ value.\n     2) Parse the document data itself and replace the conflicting\n\
    \        embedded instruction with a new embedded instruction that\n        matches\
    \ the intent of the IPP attribute value.\n     3) Indicate to the Printer that\
    \ external supplied attributes take\n        precedence over embedded instructions\
    \ and then pass the external\n        IPP attribute values to the document data\
    \ interpreter.\n     4) Anything else that allows for the semantics that IPP attributes\n\
    \        override embedded document data instructions.\n   Since 'attempted' does\
    \ not offer any type of guarantee, even though a\n   given Printer object might\
    \ not do a very \"good\" job of attempting to\n   ensure that IPP attributes take\
    \ a higher precedence over instructions\n   embedded in the document data, it\
    \ would still be a conforming\n   implementation.\n   At job processing time,\
    \ an implementation that supports the value of\n   'not-attempted' might do one\
    \ of the following actions:\n     1) Simply pre-pend the document data with the\
    \ PDL instruction that\n        corresponds to the client-supplied PDL attribute,\
    \ such that if\n        the document data also has the same PDL instruction, it\
    \ will\n        override what the Printer object pre-pended.  In other words,\n\
    \        this implementation is using the same implementation semantics\n    \
    \    for the client-supplied IPP attributes as for the Printer object\n      \
    \  defaults.\n     2) Parse the document data and replace the conflicting embedded\n\
    \        instruction with a new embedded instruction that approximates,\n    \
    \    but does not match, the semantic intent of the IPP attribute\n        value.\n\
    \   Note:  The \"ipp-attribute-fidelity\" attribute applies to the\n   Printer's\
    \ ability to either accept or reject other unsupported Job\n   Template attributes.\
    \  In other words, if \"ipp-attribute-fidelity\" is\n   set to 'true', a Job is\
    \ accepted if and only if the client supplied\n   Job Template attributes and\
    \ values are supported by the Printer.\n   Whether these attributes actually affect\
    \ the processing of the Job\n   when the document data contains embedded instructions\
    \ depends on the\n   ability of the Printer to override the instructions embedded\
    \ in the\n   document data with the semantics of the IPP attributes.  If the\n\
    \   document data attributes can be overridden (\"pdl-override-supported\"\n \
    \  set to 'attempted'), the Printer makes an attempt to use the IPP\n   attributes\
    \ when processing the Job. If the document data attributes\n   can not be overridden\
    \ (\"pdl-override-supported\" set to 'not-\n   attempted'), the Printer makes\
    \ no attempt to override the embedded\n   document data instructions with the\
    \ IPP attributes when processing\n   the Job, and hence, the IPP attributes may\
    \ fail to affect the Job\n   processing and output when the corresponding instruction\
    \ is embedded\n   in the document data.\n"
- title: 15.3 Using Job Template Attributes During Document Processing.
  contents:
  - "15.3 Using Job Template Attributes During Document Processing.\n   The Printer\
    \ object uses some of the Job object's Job Template\n   attributes during the\
    \ processing of the document data associated with\n   that job.  These include,\
    \ but are not limited to, \"orientation\",\n   \"number-up\", \"sides\", \"media\"\
    , and \"copies\".  The processing of each\n   document in a Job Object MUST follow\
    \ the steps below. These steps are\n   intended only to identify when and how\
    \ attributes are to be used in\n   processing document data and any alternative\
    \ steps that accomplishes\n   the same effect can be used to implement this specification.\n\
    \     1. Using the client supplied \"document-format\" attribute or some\n   \
    \     form of document format detection algorithm (if the value of\n        \"\
    document- format\" is not specific enough), determine whether or\n        not\
    \ the document data has already been formatted for printing.\n        If the document\
    \ data has been formatted, then go to step 2.\n        Otherwise, the document\
    \ data MUST be formatted. The formatting\n        detection algorithm is implementation\
    \ defined and is not\n        specified by this specification. The formatting\
    \ of the document\n        data uses the \"orientation-requested\" attribute to\
    \ determine how\n        the formatted print data should be placed on a print-stream\n\
    \        page, see section 4.2.10 for the details.\n     2. The document data\
    \ is in the form of a print-stream in a known\n        media type. The \"page-ranges\"\
    \ attribute is used to select, as\n        specified in section 4.2.7, a sub-sequence\
    \ of the pages in the\n        print-stream that are to be processed and images.\n\
    \     3. The input to this step is a sequence of print-stream pages. This\n  \
    \      step is controlled by the \"number-up\" attribute. If the value of\n  \
    \      \"number-up\" is N, then during the processing of the print-stream\n  \
    \      pages, each N print-stream pages are positioned, as specified in\n    \
    \    section 4.2.9, to create a single impression. If a given\n        document\
    \ does not have N more print-stream pages, then the\n        completion of the\
    \ impression is controlled by the \"multiple-\n        document-handling\" attribute\
    \ as described in section 4.2.4; when\n        the value of this attribute is\
    \ 'single-document' or 'single-\n        document-new-sheet', the print-stream\
    \ pages of document data\n        from subsequent documents is used to complete\
    \ the impression.\n        The size(scaling), position(translation) and rotation\
    \ of the\n        print-stream pages on the impression is implementation defined.\n\
    \        Note that during this process the print-stream pages may be\n       \
    \ rendered to a form suitable for placing on the impression; this\n        rendering\
    \ is controlled by the values of the \"printer-\n        resolution\" and \"print-\
    \ quality\" attributes as described in\n        sections 4.2.12 and 4.2.13. In\
    \ the case N=1, the impression is\n        nearly the same as the print-stream\
    \ page; the differences would\n        only be in the size, position and rotation\
    \ of the print-stream\n        page and/or any decoration, such as a frame to\
    \ the page, that is\n        added by the implementation.\n     4. The collection\
    \ of impressions is placed, in sequence, onto sides\n        of the media sheets.\
    \ This placement is controlled by the \"sides\"\n        attribute and the orientation\
    \ of the print-stream page, as\n        described in section 4.2.8. The orientation\
    \ of the print-stream\n        pages affects the orientation of the impression;\
    \ for example, if\n        \"number-up\" equals 2, then, typically, two portrait\
    \ print-stream\n        pages become one landscape impression. Note that the placement\n\
    \        of impressions onto media sheets is also controlled by the\n        \"\
    multiple-document-handling\" attribute as described in section\n        4.2.4.\n\
    \     5. The \"copies\" and \"multiple-document-handling\" attributes are\n  \
    \      used to determine how many copies of each media instance are\n        created\
    \ and in what order. See sections 4.2.5 and 4.2.4 for the\n        details.\n\
    \     6. When the correct number of copies are created, the media\n        instances\
    \ are finished according to the values of the\n        \"finishings\" attribute\
    \ as described in 4.2.6. Note that\n        sometimes finishing operations may\
    \ require manual intervention\n        to perform the finishing operations on\
    \ the copies, especially\n        uncollated copies. This specification allows\
    \ any or all of the\n        processing steps to be performed automatically or\
    \ manually at\n        the discretion of the Printer object.\n"
- title: '16. APPENDIX E: Generic Directory Schema'
  contents:
  - "16. APPENDIX E: Generic Directory Schema\n   This section defines a generic schema\
    \ for an entry in a directory\n   service.  A directory service is a means by\
    \ which service users can\n   locate service providers.  In IPP environments,\
    \ this means that IPP\n   Printers can be registered (either automatically or\
    \ with the help of\n   an administrator) as entries of type printer in the directory\
    \ using\n   an implementation specific mechanism such as entry attributes, entry\n\
    \   type fields, specific branches, etc.  IPP clients can search or\n   browse\
    \ for entries of type printer.  Clients use the directory\n   service to find\
    \ entries based on naming, organizational contexts, or\n   filtered searches on\
    \ attribute values of entries.  For example, a\n   client can find all printers\
    \ in the \"Local Department\" context.\n   Authentication and authorization are\
    \ also often part of a directory\n   service so that an administrator can place\
    \ limits on end users so\n   that they are only allowed to find entries to which\
    \ they have certain\n   access rights.  IPP itself does not require any specific\
    \ directory\n   service protocol or provider.\n   Note: Some directory implementations\
    \ allow for the notion of\n   \"aliasing\".  That is, one directory entry object\
    \ can appear as\n   multiple directory entry object with different names for each\
    \ object.\n   In each case, each alias refers to the same directory entry object\n\
    \   which refers to a single IPP Printer object.\n   The generic schema is a subset\
    \ of IPP Printer Job Template and\n   Printer Description attributes (sections\
    \ 4.2 and 4.4).  These\n   attributes are identified as either RECOMMENDED or\
    \ OPTIONAL for the\n   directory entry itself.  This conformance labeling is NOT\
    \ the same\n   conformance labeling applied to the attributes of IPP Printers\n\
    \   objects.  The conformance labeling in this Appendix is intended to\n   apply\
    \ to directory templates and to IPP Printer implementations that\n   subscribe\
    \ by adding one or more entries to a directory.  RECOMMENDED\n   attributes SHOULD\
    \ be associated with each directory entry.  OPTIONAL\n   attributes MAY be associated\
    \ with the directory entry (if known or\n   supported).  In addition, all directory\
    \ entry attributes SHOULD\n   reflect the current attribute values for the corresponding\
    \ Printer\n   object.\n   The names of attributes in directory schema and entries\
    \ SHOULD be the\n   same as the IPP Printer attribute names as shown.\n   In order\
    \ to bridge between the directory service and the IPP Printer\n   object, one\
    \ of the RECOMMENDED directory entry attributes is the\n   Printer object's \"\
    printer-uri-supported\" attribute.  The IPP client\n   queries the \"printer-uri-supported\"\
    \ attribute in the directory entry\n   and then addresses the IPP Printer object\
    \ using one of its URIs.  The\n   \"uri-security-supported\" attribute identifies\
    \ the protocol (if any)\n   used to secure a channel.\n   The following attributes\
    \ define the generic schema for directory\n   entries of type PRINTER:\n     printer-uri-supported\
    \           RECOMMENDED    Section 4.4.1\n     uri-security-supported        \
    \  RECOMMENDED    Section 4.4.2\n     printer-name                    RECOMMENDED\
    \    Section 4.4.3\n     printer-location                RECOMMENDED    Section\
    \ 4.4.4\n     printer-info                    OPTIONAL       Section 4.4.5\n \
    \    printer-more-info               OPTIONAL       Section 4.4.6\n     printer-make-and-model\
    \          RECOMMENDED    Section 4.4.8\n     charset-supported              \
    \ OPTIONAL       Section 4.4.15\n     generated-natural-language-\n        supported\
    \                    OPTIONAL       Section 4.4.17\n     document-format-supported\
    \       RECOMMENDED    Section 4.4.19\n     color-supported                 RECOMMENDED\
    \    Section 4.4.23\n     finishings-supported            OPTIONAL       Section\
    \ 4.2.6\n     number-up-supported             OPTIONAL       Section 4.2.7\n \
    \    sides-supported                 RECOMMENDED    Section 4.2.8\n     media-supported\
    \                 RECOMMENDED    Section 4.2.11\n     printer-resolution-supported\
    \    OPTIONAL       Section 4.2.12\n     print-quality-supported         OPTIONAL\
    \       Section 4.2.13\n"
- title: '17. APPENDIX F:  Change History for the IPP Model and Semantics document'
  contents:
  - "17. APPENDIX F:  Change History for the IPP Model and Semantics document\n  \
    \ The following substantive changes and major clarifications have been\n   made\
    \ to this document from the June 30, 1998 version based on the\n   interoperability\
    \ testing that took place September 23-25 1998 and\n   subsequent mailing list\
    \ and meeting discussions.  They are listed in\n   the order of occurrence in\
    \ the document.  These changes are the ones\n   that might affect implementations.\
    \  Clarifications that are unlikely\n   to affect implementations are not listed.\
    \  The issue numbers refer to\n   the IPP Issues List which is available in the\
    \ following directory:\n        ftp://ftp.pwg.org/pub/pwg/ipp/approved-clarifications/\n\
    \   Section   Description\n   global    Replaced TLS references with SSL3 references\
    \ as agreed with\n             our Area Director on 11/12/1998.\n   global   \
    \ Removed the indications that some of these IPP documents\n             are informational,\
    \ since the intent is now to publish all\n             IPP/1.0 documents as informational\
    \ as agreed with our Area\n             Director on 11/12/1998.\n   3.1.2,   \
    \ Clarify that the IPP object SHOULD NOT validate the\n   16.3.3    range of the\
    \ request-id being 1 to 2**31-1, but accepts\n   [now ipp- and returns any value.\
    \  Clients MUST still keep in the\n   iig]      range 1 to 2**31 though.  If the\
    \ request is terminated\n             before the complete \"request-id\" is received,\
    \ the IPP\n             object rejects the request and returns a response with\
    \ a\n             \"request-id\" of 0  (Issue 1.36).\n   3.1.4.1,  Clarified that\
    \ when a client submits a request in a\n   13.1.4.14 charset that is not supported,\
    \ the IPP object SHOULD\n             return any 'text' or 'name' attributes in\
    \ the 'utf-8'\n             charset, if it returns any, since clients and IPP\n\
    \             objects MUST support 'utf-8'.  (Issue 1.19)\n   3.1.4.1   Clarified\
    \ Section 3.1.4.1 Request Operation Attributes\n             that a client MAY\
    \ use the attribute level natural\n             language override (text/nameWithLanguage)\
    \ redundantly in\n             a request.  (Issue 1.46)\n   3.1.4.2   Clarified\
    \ Section 3.1.4.2 Response Operation Attributes\n             that an IPP object\
    \ MAY use the attribute level natural\n             language override (text/nameWithLanguage)\
    \ redundantly in\n             a response.  (Issue 1.46)\n   3.1.6     Clarified\
    \ section 3.1.6:  If the Printer object supports\n             the \"status-message\"\
    \ operation attribute, it NEED NOT\n             return a status message for the\
    \ following error status\n             codes:  'client-error-bad-request', 'client-error-\n\
    \             charset-not-supported', 'server-error-internal-error',\n       \
    \      'server-error-operation-not-supported', and 'server-\n             error-version-not-supported'.\n\
    \   3.2.1.1   Clarified that if a client is not supplying any Job\n          \
    \   Template attributes in a request, the client SHOULD omit\n             Group\
    \ 2 rather than sending an empty group.  However, a\n             Printer object\
    \ MUST be able to accept an empty group.\n             This makes [RFC2566] agree\
    \ with [RFC2565].  (Issue 1.16)\n   3.2.1.2,  Clarified that if an IPP object\
    \ is not returning any\n   3.2.5.2,  Unsupported Attributes in a response, the\
    \ IPP object\n   3.2.6.2,  SHOULD omit Group 2 rather than sending an empty group.\n\
    \   3.3.1.2,  However, a client MUST be able to accept an empty group.\n   3.3.3.2,\
    \  This makes [RFC2566] agree with [RFC2565].  (Issue 1.17)\n   3.3.4.2\n   3.2.1.2,\
    \  Clarified that an IPP object MUST treat an unsupported\n   13.1.2.2, attribute\
    \ syntax supplied in a request in the same way\n   13.1.4.12 as an unsupported\
    \ value.  The IPP object MUST return the\n             attribute, the attribute\
    \ syntax, and the value in the\n             Unsupported Attributes group.  (Issue\
    \ 1.26)\n   3.2.5.2,  Clarified for Get-Printer-Attributes, Get-Jobs, and Get-\n\
    \   3.2.6.2,  Job-Attributes that an IPP object MUST return\n   3.3.4.2,  'successful-ok-ignored-or-substituted-attributes'\
    \ (0x1),\n   13.1.2.1, rather than 'successful-ok' (0x0), when a client\n   13.1.2.2,\
    \ supplies unsupported attributes as values of the\n   13.1.4.12 'requested-attributes'\
    \ operation attribute.  (Issue\n             1.24)\n             Also clarified\
    \ that the response NEED NOT contain the\n             \"requested-attributes\"\
    \ operation attribute with any\n             supplied values (attribute keywords)\
    \ that were requested\n             by the client but are not supported by the\
    \ IPP object.\n             (Issue 1.18)\n   3.2.6.2   Deleted the job-level natural\
    \ language override (NLO)\n   4.1.1.2   from Section 3.2.6.2 Get-Jobs Response\
    \ so that all\n   4.3.24    operation responses are the same with respect to NLO.\n\
    \             (Issue 1.47)\n   3.3.1     Clarified that an IPP Printer that supports\
    \ the Create-\n             Job operation MUST handle the situation when a client\n\
    \             does not supply Send-Document or Send-URI operations\n         \
    \    within a one- to four-minute time period.  Also\n             clarified that\
    \ a client MUST send documents in a multi-\n             document job without\
    \ undue or unbounded delay.  (Issue\n             1.28)\n   3.3.3     Clarified\
    \ that the IPP object MUST reject a Cancel-Job\n             request if the job\
    \ is in 'completed', 'canceled', or\n             'aborted' job states.  (Issue\
    \ 1.12)\n   4.1.2.3   Added this new sub-section:  it specifies that\n       \
    \      nameWithoutLanguage plus the implicit natural language\n             matches\
    \ nameWithLanguage, if the values and natural\n             languages are the\
    \ same.  Also added that keyword never\n             matches nameWithLanguage\
    \ or nameWithoutLanguage.\n             Clarified that if both have countries,\
    \ that the\n             countries SHOULD match as well.  If either do not, then\n\
    \             the country field SHOULD be ignored.  (Issues 1.33 and\n       \
    \      1.34)\n   4.1.5     Clarified regarding the case-insensitivity of URLs\
    \ to\n             refer only to the RFCs that define them.  (Issue 1.10)\n  \
    \ 4.1.11    Clarified that 'boolean' is not a full-sized integer.\n          \
    \   (Issue 1.38)\n   4.1.15    Clarified that 'resolution' is not three full-sized\n\
    \             integers.  (Issue 1.20)\n   4.2.*     Clarified that standard values\
    \ are keywords or enums,\n             not names.  (Issue 1.49).\n   4.2.4   \
    \  Added the 'single-document-new-sheet' value to Section\n             4.2.4\
    \ multiple-document-handling.  (Issue 1.54)\n   4.4.18,   Clarified that the \"\
    document-format-default\" and\n   4.4.19    \"document-format-supported\" Printer\
    \ Description\n             attributes are REQUIRED to agree with the table. \
    \ (Issue\n             1.4)\n   4.4.21    Changed \"queued-job-count\" from OPTIONAL\
    \ to RECOMMENDED.\n             (Issue 1.14)\n   4.4.28    Clarified that the\
    \ implementation supplied value for the\n             \"multiple-operation-time-out\"\
    \ attribute SHOULD be\n             between 30 and 240 seconds, though the implementation\n\
    \             MAY allow the administrator to set values, and MAY allow\n     \
    \        values outside this range.  (Issue 1.28)\n   5.1,      Clarified Client\
    \ Conformance that if a client supports\n   5.2.5     an attribute of 'text' attribute\
    \ syntax, that it MUST\n             support both the textWithoutLanguage and\
    \ the\n             textWithLanguage forms.  Same for 'name' attribute\n     \
    \        syntax.  Same for an IPP object (Issue 1.48)\n   6.5,      Added new\
    \ section to allow Attribute Groups to be\n   12.8      registered as extensions\
    \ for being passed in operation\n             requests and responses.  (Issue\
    \ 1.25)\n   7.        Updated the table of text and name attributes to agree\n\
    \             with Section 4.2.\n   8.5       Added a new section RECOMMENDING\
    \ that the Get-Jobs\n             SHOULD return non-IPP jobs whether or not assigning\
    \ them\n             a job-id and job-uri.  Also RECOMMENDED generating, if\n\
    \             possible, job-id and job-uri and supporting other IPP\n        \
    \     operations on foreign jobs as an implementer option.\n             (Issue\
    \ 1.32)\n   9.        Updated document references.\n   13.1.4.14 Clarified 'client-error-charset-not-supported'\
    \ that\n             'utf-8' must be used for any 'text' or 'name' attributes\n\
    \             returned in the error response (Issue 1.19).\n   13.1.5.9  Added\
    \ a new error code 'server-error-job-canceled'\n             (0x0508) to be returned\
    \ if a job is canceled by another\n             client or aborted by the IPP object\
    \ while the first\n             client is still sending the document data.  (Issue\
    \ 1.29)\n   15.3,     Moved these sections recommending operation processing\n\
    \   15.4      steps to the new Implementer's Guide (informational).\n        \
    \     There indicated that all of the error checks are not\n             required,\
    \ so an IPP object MAY be forgiving and accept\n             non-conforming requests.\
    \  However, a conforming client\n             MUST supply requests that would\
    \ pass all of the error\n             checks indicated.  (Issue 1.21)\n   16 \
    \       Changed directory schema attributes from REQUIRED to\n             RECOMMENDED.\
    \  Changed some of the OPTIONAL to\n             RECOMMENDED to agree with the\
    \ SLP template.  Changed the\n             \"charset-supported\" and \"natural-language-supported\"\
    \n             from REQUIRED to OPTIONAL.  Recommended that the names\n      \
    \       be the same in a directory entry as the IPP attribute\n             names.\
    \ (Issue 1.53)\n"
- title: 18.  Full Copyright Statement
  contents:
  - "18.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
