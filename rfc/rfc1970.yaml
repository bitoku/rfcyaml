- title: __initial_text__
  contents:
  - '               Neighbor Discovery for IP Version 6 (IPv6)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Neighbor Discovery protocol for IP\n\
    \   Version 6.  IPv6 nodes on the same link use Neighbor Discovery to\n   discover\
    \ each other's presence, to determine each other's link-layer\n   addresses, to\
    \ find routers and to maintain reachability information\n   about the paths to\
    \ active neighbors.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n         4.6.4.  MTU............................................\
    \   31\n   5.  CONCEPTUAL MODEL OF A HOST...............................   32\n\
    \      5.1.  Conceptual Data Structures..........................   33\n     \
    \ 5.2.  Conceptual Sending Algorithm........................   35\n      5.3.\
    \  Garbage Collection and Timeout Requirements.........   36\n   6.  ROUTER AND\
    \ PREFIX DISCOVERY..............................   37\n      6.1.  Message Validation..................................\
    \   38\n         6.1.1.  Validation of Router Solicitation Messages.....   38\n\
    \         6.1.2.  Validation of Router Advertisement Messages....   38\n     \
    \ 6.2.  Router Specification................................   39\n         6.2.1.\
    \  Router Configuration Variables.................   39\n         6.2.2.  Becoming\
    \ An Advertising Interface..............   43\n         6.2.3.  Router Advertisement\
    \ Message Content...........   43\n         6.2.4.  Sending Unsolicited Router\
    \ Advertisements......   45\n         6.2.5.  Ceasing To Be An Advertising Interface.........\
    \   45\n         6.2.6.  Processing Router Solicitations................   46\n\
    \         6.2.7.  Router Advertisement Consistency...............   47\n     \
    \    6.2.8.  Link-local Address Change......................   48\n      6.3.\
    \  Host Specification..................................   48\n         6.3.1.\
    \  Host Configuration Variables...................   48\n         6.3.2.  Host\
    \ Variables.................................   48\n         6.3.3.  Interface\
    \ Initialization.......................   50\n         6.3.4.  Processing Received\
    \ Router Advertisements......   50\n         6.3.5.  Timing out Prefixes and Default\
    \ Routers........   52\n         6.3.6.  Default Router Selection.......................\
    \   53\n         6.3.7.  Sending Router Solicitations...................   54\n\
    \   7.  ADDRESS RESOLUTION AND NEIGHBOR UNREACHABILITY DETECTION.   55\n     \
    \ 7.1.  Message Validation..................................   55\n         7.1.1.\
    \  Validation of Neighbor Solicitations...........   55\n         7.1.2.  Validation\
    \ of Neighbor Advertisements..........   56\n      7.2.  Address Resolution..................................\
    \   57\n         7.2.1.  Interface Initialization.......................   57\n\
    \         7.2.2.  Sending Neighbor Solicitations.................   57\n     \
    \    7.2.3.  Receipt of Neighbor Solicitations..............   58\n         7.2.4.\
    \  Sending Solicited Neighbor Advertisements......   59\n         7.2.5.  Receipt\
    \ of Neighbor Advertisements.............   59\n         7.2.6.  Sending Unsolicited\
    \ Neighbor Advertisements....   61\n         7.2.7.  Anycast Neighbor Advertisements................\
    \   62\n         7.2.8.  Proxy Neighbor Advertisements..................   62\n\
    \      7.3.  Neighbor Unreachability Detection...................   63\n     \
    \    7.3.1.  Reachability Confirmation......................   63\n         7.3.2.\
    \  Neighbor Cache Entry States....................   64\n         7.3.3.  Node\
    \ Behavior..................................   66\n   8.  REDIRECT FUNCTION........................................\
    \   68\n      8.1.  Validation of Redirect Messages.....................   68\n\
    \      8.2.  Router Specification................................   69\n     \
    \ 8.3.  Host Specification..................................   70\n   9.  EXTENSIBILITY\
    \ - OPTION PROCESSING........................   71\n   10.  PROTOCOL CONSTANTS......................................\
    \   72\n   11.  SECURITY CONSIDERATIONS.................................   73\n\
    \   REFERENCES...................................................   75\n   AUTHORS'\
    \ ADDRESSES...........................................   76\n   APPENDIX A: MULTIHOMED\
    \ HOSTS.................................   77\n   APPENDIX B: FUTURE EXTENSIONS................................\
    \   78\n   APPENDIX C: STATE MACHINE FOR THE REACHABILITY STATE.........   78\n\
    \   APPENDIX D: IMPLEMENTATION ISSUES............................   80\n     \
    \ Appendix D.1: Reachability confirmations..................   80\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   This specification defines the Neighbor Discovery (ND) protocol\
    \ for\n   Internet Protocol Version 6 (IPv6).  Nodes (hosts and routers) use\n\
    \   Neighbor Discovery to determine the link-layer addresses for\n   neighbors\
    \ known to reside on attached links and to quickly purge\n   cached values that\
    \ become invalid.  Hosts also use Neighbor Discovery\n   to find neighboring routers\
    \ that are willing to forward packets on\n   their behalf.  Finally, nodes use\
    \ the protocol to actively keep track\n   of which neighbors are reachable and\
    \ which are not, and to detect\n   changed link-layer addresses.  When a router\
    \ or the path to a router\n   fails, a host actively searches for functioning\
    \ alternates.\n   Unless specified otherwise (in a document that covers operating\
    \ IP\n   over a particular link type) this document applies to all link types.\n\
    \   However, because ND uses link-layer multicast for some of its\n   services,\
    \ it is possible that on some link types (e.g., NBMA links)\n   alternative protocols\
    \ or mechanisms to implement those services will\n   be specified (in the appropriate\
    \ document covering the operation of\n   IP over a particular link type).  The\
    \ services described in this\n   document that are not directly dependent on multicast,\
    \ such as\n   Redirects, Next-hop determination, Neighbor Unreachability Detection,\n\
    \   etc., are expected to be provided as specified in this document.  The\n  \
    \ details of how one uses ND on NBMA links is an area for further\n   study.\n\
    \   The authors would like to acknowledge the contributions the IPNGWG\n   working\
    \ group and, in particular, (in alphabetical order) Ran\n   Atkinson, Jim Bound,\
    \ Scott Bradner, Alex Conta, Stephen Deering,\n   Francis Dupont, Robert Elz,\
    \ Robert Gilligan, Robert Hinden, Allison\n   Mankin, Dan McDonald, Charles Perkins,\
    \ Matt Thomas, and Susan\n   Thomson.\n"
- title: 2.  TERMINOLOGY
  contents:
  - '2.  TERMINOLOGY

    '
- title: 2.1.  General
  contents:
  - "2.1.  General\n   IP          - Internet Protocol Version 6.  The terms IPv4\
    \ and IPv6\n                 are used only in contexts where necessary to avoid\n\
    \                 ambiguity.\n   ICMP        - Internet Message Control Protocol\
    \ for the Internet\n                 Protocol Version 6.  The terms ICMPv4 and\
    \ ICMPv6 are\n                 used only in contexts where necessary to avoid\n\
    \                 ambiguity.\n   node        - a device that implements IP.\n\
    \   router      - a node that forwards IP packets not explicitly\n           \
    \      addressed to itself.\n   host        - any node that is not a router.\n\
    \   upper layer - a protocol layer immediately above IP.  Examples are\n     \
    \            transport protocols such as TCP and UDP, control\n              \
    \   protocols such as ICMP, routing protocols such as OSPF,\n                \
    \ and internet or lower-layer protocols being \"tunneled\"\n                 over\
    \ (i.e., encapsulated in) IP such as IPX, AppleTalk,\n                 or IP itself.\n\
    \   link        - a communication facility or medium over which nodes can\n  \
    \               communicate at the link layer, i.e., the layer\n             \
    \    immediately below IP.  Examples are Ethernets (simple\n                 or\
    \ bridged), PPP links, X.25, Frame Relay, or ATM\n                 networks as\
    \ well as internet (or higher) layer\n                 \"tunnels\", such as tunnels\
    \ over IPv4 or IPv6 itself.\n   interface   - a node's attachment to a link.\n\
    \   neighbors   - nodes attached to the same link.\n   address     - an IP-layer\
    \ identifier for an interface or a set of\n                 interfaces.\n   anycast\
    \ address\n               - an identifier for a set of interfaces (typically\n\
    \                 belonging to different nodes).  A packet sent to an\n      \
    \           anycast address is delivered to one of the interfaces\n          \
    \       identified by that address (the \"nearest\" one,\n                 according\
    \ to the routing protocol's measure of\n                 distance).  See [ADDR-ARCH].\n\
    \                 Note that an anycast address is syntactically\n            \
    \     indistinguishable from a unicast address.  Thus, nodes\n               \
    \  sending packets to anycast addresses don't generally\n                 know\
    \ that an anycast address is being used.  Throughout\n                 the rest\
    \ of this document, references to unicast\n                 addresses also apply\
    \ to anycast addresses in those\n                 cases where the node is unaware\
    \ that a unicast address\n                 is actually an anycast address.\n \
    \  prefix      - a bit string that consists of some number of initial\n      \
    \           bits of an address.\n   link-layer address\n               - a link-layer\
    \ identifier for an interface.  Examples\n                 include IEEE 802 addresses\
    \ for Ethernet links and E.164\n                 addresses for ISDN links.\n \
    \  on-link     - an address that is assigned to an interface on a\n          \
    \       specified link.  A node considers an address to be on-\n             \
    \    link if:\n                   - it is covered by one of the link's prefixes,\
    \ or\n                   - a neighboring router specifies the address as the\n\
    \                     target of a Redirect message, or\n                   - a\
    \ Neighbor Advertisement message is received for\n                     the (target)\
    \ address, or\n                   - any Neighbor Discovery message is received\
    \ from the\n                     address.\n   off-link    - the opposite of \"\
    on-link\"; an address that is not\n                 assigned to any interfaces\
    \ on the specified link.\n   longest prefix match\n               - The process\
    \ of determining which prefix (if any) in a\n                 set of prefixes\
    \ covers a target address.  A target\n                 address is covered by a\
    \ prefix if all of the bits in\n                 the prefix match the left-most\
    \ bits of the target\n                 address.  When multiple prefixes cover\
    \ an address, the\n                 longest prefix is the one that matches.\n\
    \   reachability\n               - whether or not the one-way \"forward\" path\
    \ to a neighbor\n                 is functioning properly.  In particular, whether\n\
    \                 packets sent to a neighbor are reaching the IP layer on\n  \
    \               the neighboring machine and are being processed\n            \
    \     properly by the receiving IP layer.  For neighboring\n                 routers,\
    \ reachability means that packets sent by a\n                 node's IP layer\
    \ are delivered to the router's IP layer,\n                 and the router is\
    \ indeed forwarding packets (i.e., it\n                 is configured as a router,\
    \ not a host).  For hosts,\n                 reachability means that packets sent\
    \ by a node's IP\n                 layer are delivered to the neighbor host's\
    \ IP layer.\n   packet      - an IP header plus payload.\n   link MTU    - the\
    \ maximum transmission unit, i.e., maximum packet\n                 size in octets,\
    \ that can be conveyed in one piece over\n                 a link.\n   target\
    \      - an address about which address resolution information\n             \
    \    is sought, or an address which is the new first-hop\n                 when\
    \ being redirected.\n   proxy       - a router that responds to Neighbor Discovery\
    \ query\n                 messages on behalf of another node.  A router acting\
    \ on\n                 behalf of a mobile node that has moved off-link could\n\
    \                 potentially act as a proxy for the mobile node.\n   ICMP destination\
    \ unreachable indication\n               - an error indication returned to the\
    \ original sender of\n                 a packet that cannot be delivered for the\
    \ reasons\n                 outlined in [ICMPv6].  If the error occurs on a node\n\
    \                 other than the node originating the packet, an ICMP\n      \
    \           error message is generated.  If the error occurs on the\n        \
    \         originating node, an implementation is not required to\n           \
    \      actually create and send an ICMP error packet to the\n                \
    \ source, as long as the upper-layer sender is notified\n                 through\
    \ an appropriate mechanism (e.g., return value\n                 from a procedure\
    \ call).  Note, however, that an\n                 implementation may find it\
    \ convenient in some cases to\n                 return errors to the sender by\
    \ taking the offending\n                 packet, generating an ICMP error message,\
    \ and then\n                 delivering it (locally) through the generic error\n\
    \                 handling routines.\n   random delay\n               - when sending\
    \ out messages, it is sometimes necessary to\n                 delay a transmission\
    \ for a random amount of time in\n                 order to prevent multiple nodes\
    \ from transmitting at\n                 exactly the same time, or to prevent\
    \ long-range\n                 periodic transmissions from synchronizing with\
    \ each\n                 other [SYNC].  When a random component is required, a\n\
    \                 node calculates the actual delay in such a way that the\n  \
    \               computed delay forms a uniformly-distributed random\n        \
    \         value that falls between the specified minimum and\n               \
    \  maximum delay times.  The implementor must take care to\n                 insure\
    \ that the granularity of the calculated random\n                 component and\
    \ the resolution of the timer used are both\n                 high enough to insure\
    \ that the probability of multiple\n                 nodes delaying the same amount\
    \ of time is small.\n   random delay seed\n               - If a pseudo-random\
    \ number generator is used in\n                 calculating a random delay component,\
    \ the generator\n                 should be initialized with a unique seed prior\
    \ to being\n                 used.  Note that it is not sufficient to use the\n\
    \                 interface token alone as the seed, since interface\n       \
    \          tokens will not always be unique.  To reduce the\n                \
    \ probability that duplicate interface tokens cause the\n                 same\
    \ seed to be used, the seed should be calculated\n                 from a variety\
    \ of input sources (e.g., machine\n                 components) that are likely\
    \ to be different even on\n                 identical \"boxes\".  For example,\
    \ the seed could be\n                 formed by combining the CPU's serial number\
    \ with an\n                 interface token.\n"
- title: 2.2.  Link Types
  contents:
  - "2.2.  Link Types\n   Different link layers have different properties.  The ones\
    \ of concern\n   to Neighbor Discovery are:\n   multicast      - a link that supports\
    \ a native mechanism at the link\n                    layer for sending packets\
    \ to all (i.e., broadcast)\n                    or a subset of all neighbors.\n\
    \   point-to-point - a link that connects exactly two interfaces.  A\n       \
    \             point-to-point link is assumed to have multicast\n             \
    \       capability and have a link-local address.\n   non-broadcast multi-access\
    \ (NBMA)\n                  - a link to which more than two interfaces can attach,\n\
    \                    but that does not support a native form of multicast\n  \
    \                  or broadcast (e.g., X.25, ATM, frame relay, etc.).\n      \
    \              Note that all link types (including NBMA) are\n               \
    \     expected to provide multicast service for IP (e.g.,\n                  \
    \  using multicast servers), but it is an issue for\n                    further\
    \ study whether ND should use such facilities\n                    or an alternate\
    \ mechanism that provides the\n                    equivalent ND services.\n \
    \  shared media   - a link that allows direct communication among a\n        \
    \            number of nodes, but attached nodes are configured\n            \
    \        in such a way that they do not have complete prefix\n               \
    \     information for all on-link destinations.  That is,\n                  \
    \  at the IP level, nodes on the same link may not know\n                    that\
    \ they are neighbors; by default, they\n                    communicate through\
    \ a router.  Examples are large\n                    (switched) public data networks\
    \ such as SMDS and B-\n                    ISDN.  Also known as \"large clouds\"\
    .  See [SH-\n                    MEDIA].\n   variable MTU   - a link that does\
    \ not have a well-defined MTU (e.g.,\n                    IEEE 802.5 token rings).\
    \  Many links (e.g.,\n                    Ethernet) have a standard MTU defined\
    \ by the link-\n                    layer protocol or by the specific document\n\
    \                    describing how to run IP over the link layer.\n   asymmetric\
    \ reachability\n                  - a link where non-reflexive and/or non-transitive\n\
    \                    reachability is part of normal operation.  (Non-\n      \
    \              reflexive reachability means packets from A reach B\n         \
    \           but packets from B don't reach A.  Non-transitive\n              \
    \      reachability means packets from A reach B, and\n                    packets\
    \ from B reach C, but packets from A don't\n                    reach C.)  Many\
    \ radio links exhibit these\n                    properties.\n"
- title: 2.3.  Addresses
  contents:
  - "2.3.  Addresses\n   Neighbor Discovery makes use of a number of different addresses\n\
    \   defined in [ADDR-ARCH], including:\n   all-nodes multicast address\n     \
    \          - the link-local scope address to reach all nodes.\n              \
    \   FF02::1\n   all-routers multicast address\n               - the link-local\
    \ scope address to reach all routers.\n                 FF02::2\n   solicited-node\
    \ multicast address\n               - a link-local scope multicast address that\
    \ is computed\n                 as a function of the solicited target's address.\
    \  The\n                 solicited-node multicast address is formed by taking\n\
    \                 the low-order 32 bits of the target IP address and\n       \
    \          appending those bits to the 96-bit prefix\n                 FF02:0:0:0:0:1\
    \ to produce a multicast address within\n                 the range FF02::1:0:0\
    \ to FF02::1:FFFF:FFFF.  For\n                 example, the solicited node multicast\
    \ address\n                 corresponding to the IP address 4037::01:800:200E:8C6C\n\
    \                 is FF02::1:200E:8C6C.  IP addresses that differ only in\n  \
    \               the high-order bits, e.g., due to multiple high-order\n      \
    \           prefixes associated with different providers, will map\n         \
    \        to the same solicited-node address thereby reducing the\n           \
    \      number of multicast addresses a node must join.\n   link-local address\n\
    \               - a unicast address having link-only scope that can be\n     \
    \            used to reach neighbors.  All interfaces on routers\n           \
    \      MUST have a link-local address.  Also, [ADDRCONF]\n                 requires\
    \ that interfaces on hosts have a link-local\n                 address.\n   unspecified\
    \ address\n               - a reserved address value that indicates the lack of\
    \ an\n                 address (e.g., the address is unknown).  It is never\n\
    \                 used as a destination address, but may be used as a\n      \
    \           source address if the sender does not (yet) know its\n           \
    \      own address (e.g., while verifying an address is unused\n             \
    \    during address autoconfiguration [ADDRCONF]).  The\n                 unspecified\
    \ address has a value of 0:0:0:0:0:0:0:0.\n"
- title: 2.4.  Requirements
  contents:
  - "2.4.  Requirements\n   Throughout this document, the words that are used to define\
    \ the\n   significance of the particular requirements are capitalized.  These\n\
    \   words are:\n   MUST\n        This word or the adjective \"REQUIRED\" means\
    \ that the item is an\n        absolute requirement of this specification.\n \
    \  MUST NOT\n        This phrase means the item is an absolute prohibition of\
    \ this\n        specification.\n   SHOULD\n        This word or the adjective\
    \ \"RECOMMENDED\" means that there may\n        exist valid reasons in particular\
    \ circumstances to ignore this\n        item, but the full implications should\
    \ be understood and the\n        case carefully weighed before choosing a different\
    \ course.\n   SHOULD NOT\n        This phrase means that there may exist valid\
    \ reasons in\n        particular circumstances when the listed behavior is acceptable\n\
    \        or even useful, but the full implications should be understood\n    \
    \    and the case carefully weighted before implementing any behavior\n      \
    \  described with this label.\n   MAY  This word or the adjective \"OPTIONAL\"\
    \ means that this item is\n        truly optional.  One vendor may choose to include\
    \ the item\n        because a particular marketplace requires it or because it\n\
    \        enhances the product, for example, another vendor may omit the\n    \
    \    same item.\n   This document also makes use of internal conceptual variables\
    \ to\n   describe protocol behavior and external variables that an\n   implementation\
    \ must allow system administrators to change.  The\n   specific variable names,\
    \ how their values change, and how their\n   settings influence protocol behavior\
    \ are provided to demonstrate\n   protocol behavior.  An implementation is not\
    \ required to have them in\n   the exact form described here, so long as its external\
    \ behavior is\n   consistent with that described in this document.\n"
- title: 3.  PROTOCOL OVERVIEW
  contents:
  - "3.  PROTOCOL OVERVIEW\n   This protocol solves a set of problems related to the\
    \ interaction\n   between nodes attached to the same link.  It defines mechanisms\
    \ for\n   solving each of the following problems:\n    Router Discovery: How hosts\
    \ locate routers that reside on an\n               attached link.\n    Prefix\
    \ Discovery: How hosts discover the set of address prefixes\n               that\
    \ define which destinations are on-link for an\n               attached link.\
    \  (Nodes use prefixes to distinguish\n               destinations that reside\
    \ on-link from those only\n               reachable through a router.)\n    Parameter\
    \ Discovery: How a node learns such link parameters as the\n               link\
    \ MTU or such Internet parameters as the hop limit\n               value to place\
    \ in outgoing packets.\n    Address Autoconfiguration: How nodes automatically\
    \ configure an\n               address for an interface.\n    Address resolution:\
    \ How nodes determine the link-layer address of an\n               on-link destination\
    \ (e.g., a neighbor) given only the\n               destination's IP address.\n\
    \    Next-hop determination: The algorithm for mapping an IP destination\n   \
    \            address into the IP address of the neighbor to which\n          \
    \     traffic for the destination should be sent.  The next-hop\n            \
    \   can be a router or the destination itself.\n    Neighbor Unreachability Detection:\
    \ How nodes determine that a\n               neighbor is no longer reachable.\
    \  For neighbors used as\n               routers, alternate default routers can\
    \ be tried.  For\n               both routers and hosts, address resolution can\
    \ be\n               performed again.\n    Duplicate Address Detection: How a\
    \ node determines that an address\n               it wishes to use is not already\
    \ in use by another node.\n    Redirect:  How a router informs a host of a better\
    \ first-hop node to\n               reach a particular destination.\n   Neighbor\
    \ Discovery defines five different ICMP packet types: A pair\n   of Router Solicitation\
    \ and Router Advertisement messages, a pair of\n   Neighbor Solicitation and Neighbor\
    \ Advertisements messages, and a\n   Redirect message.  The messages serve the\
    \ following purpose:\n    Router Solicitation: When an interface becomes enabled,\
    \ hosts may\n               send out Router Solicitations that request routers\
    \ to\n               generate Router Advertisements immediately rather than at\n\
    \               their next scheduled time.\n    Router Advertisement: Routers\
    \ advertise their presence together with\n               various link and Internet\
    \ parameters either periodically,\n               or in response to a Router Solicitation\
    \ message.  Router\n               Advertisements contain prefixes that are used\
    \ for on-link\n               determination and/or address configuration, a suggested\n\
    \               hop limit value, etc.\n    Neighbor Solicitation: Sent by a node\
    \ to determine the link-layer\n               address of a neighbor, or to verify\
    \ that a neighbor is\n               still reachable via a cached link-layer address.\n\
    \               Neighbor Solicitations are also used for Duplicate\n         \
    \      Address Detection.\n    Neighbor Advertisement: A response to a Neighbor\
    \ Solicitation\n               message.  A node may also send unsolicited Neighbor\n\
    \               Advertisements to announce a link-layer address change.\n    Redirect:\
    \  Used by routers to inform hosts of a better first hop for\n               a\
    \ destination.\n   On multicast-capable links, each router periodically multicasts\
    \ a\n   Router Advertisement packet announcing its availability.  A host\n   receives\
    \ Router Advertisements from all routers, building a list of\n   default routers.\
    \  Routers generate Router Advertisements frequently\n   enough that hosts will\
    \ learn of their presence within a few minutes,\n   but not frequently enough\
    \ to rely on an absence of advertisements to\n   detect router failure; a separate\
    \ Neighbor Unreachability Detection\n   algorithm provides failure detection.\n\
    \   Router Advertisements contain a list of prefixes used for on-link\n   determination\
    \ and/or autonomous address configuration; flags\n   associated with the prefixes\
    \ specify the intended uses of a\n   particular prefix.  Hosts use the advertised\
    \ on-link prefixes to\n   build and maintain a list that is used in deciding when\
    \ a packet's\n   destination is on-link or beyond a router.  Note that a destination\n\
    \   can be on-link even though it is not covered by any advertised on-\n   link\
    \ prefix.  In such cases a router can send a Redirect informing\n   the sender\
    \ that the destination is a neighbor.\n   Router Advertisements (and per-prefix\
    \ flags) allow routers to inform\n   hosts how to perform Address Autoconfiguration.\
    \  For example, routers\n   can specify whether hosts should use stateful (DHCPv6)\
    \ and/or\n   autonomous (stateless) address configuration.  The exact semantics\n\
    \   and usage of the address configuration-related information is\n   specified\
    \ in [ADDRCONF].\n   Router Advertisement messages also contain Internet parameters\
    \ such\n   as the hop limit that hosts should use in outgoing packets and,\n \
    \  optionally, link parameters such as the link MTU.  This facilitates\n   centralized\
    \ administration of critical parameters that can be set on\n   routers and automatically\
    \ propagated to all attached hosts.\n   Nodes accomplish address resolution by\
    \ multicasting a Neighbor\n   Solicitation that asks the target node to return\
    \ its link-layer\n   address.  Neighbor Solicitation messages are multicast to\
    \ the\n   solicited-node multicast address of the target address.  The target\n\
    \   returns its link-layer address in a unicast Neighbor Advertisement\n   message.\
    \  A single request-response pair of packets is sufficient for\n   both the initiator\
    \ and the target to resolve each other's link-layer\n   addresses; the initiator\
    \ includes its link-layer address in the\n   Neighbor Solicitation.\n   Neighbor\
    \ Solicitation messages can also be used to determine if more\n   than one node\
    \ has been assigned the same unicast address.  The use of\n   Neighbor Solicitation\
    \ messages for Duplicate Address Detection is\n   specified in [ADDRCONF].\n \
    \  Neighbor Unreachability Detection detects the failure of a neighbor\n   or\
    \ the failure of the forward path to the neighbor.  Doing so\n   requires positive\
    \ confirmation that packets sent to a neighbor are\n   actually reaching that\
    \ neighbor and being processed properly by its\n   IP layer.  Neighbor Unreachability\
    \ Detection uses confirmation from\n   two sources.  When possible, upper-layer\
    \ protocols provide a positive\n   confirmation that a connection is making \"\
    forward progress\", that is,\n   previously sent data is known to have been delivered\
    \ correctly (e.g.,\n   new acknowledgments were received recently).  When positive\n\
    \   confirmation is not forthcoming through such \"hints\", a node sends\n   unicast\
    \ Neighbor Solicitation messages that solicit Neighbor\n   Advertisements as reachability\
    \ confirmation from the next hop.  To\n   reduce unnecessary network traffic,\
    \ probe messages are only sent to\n   neighbors to which the node is actively\
    \ sending packets.\n   In addition to addressing the above general problems, Neighbor\n\
    \   Discovery also handles the following situations:\n     Link-layer address\
    \ change - A node that knows its link-layer\n          address has changed can\
    \ multicast a few (unsolicited) Neighbor\n          Advertisement packets to all\
    \ nodes to quickly update cached\n          link-layer addresses that have become\
    \ invalid.  Note that the\n          sending of unsolicited advertisements is\
    \ a performance\n          enhancement only (e.g., unreliable).  The Neighbor\n\
    \          Unreachability Detection algorithm ensures that all nodes will\n  \
    \        reliably discover the new address, though the delay may be\n        \
    \  somewhat longer.\n     Inbound load balancing - Nodes with replicated interfaces\
    \ may want\n          to load balance the reception of incoming packets across\n\
    \          multiple network interfaces on the same link.  Such nodes have\n  \
    \        multiple link-layer addresses assigned to the same interface.\n     \
    \     For example, a single network driver could represent multiple\n        \
    \  network interface cards as a single logical interface having\n          multiple\
    \ link-layer addresses.  Load balancing is handled by\n          allowing routers\
    \ to omit the source link-layer address from\n          Router Advertisement packets,\
    \ thereby forcing neighbors to use\n          Neighbor Solicitation messages to\
    \ learn link-layer addresses\n          of routers.  Returned Neighbor Advertisement\
    \ messages can then\n          contain link-layer addresses that differ depending\
    \ on who\n          issued the solicitation.\n     Anycast addresses - Anycast\
    \ addresses identify one of a set of\n          nodes providing an equivalent\
    \ service, and multiple nodes on\n          the same link may be configured to\
    \ recognize the same Anycast\n          address.  Neighbor Discovery handles anycasts\
    \ by having nodes\n          expect to receive multiple Neighbor Advertisements\
    \ for the\n          same target.  All advertisements for anycast addresses are\n\
    \          tagged as being non-Override advertisements.  This invokes\n      \
    \    specific rules to determine which of potentially multiple\n          advertisements\
    \ should be used.\n     Proxy advertisements - A router willing to accept packets\
    \ on behalf\n          of a target address that is unable to respond to Neighbor\n\
    \          Solicitations can issue non-Override Neighbor Advertisements.\n   \
    \       There is currently no specified use of proxy, but proxy\n          advertising\
    \ could potentially be used to handle cases like\n          mobile nodes that\
    \ have moved off-link.  However, it is not\n          intended as a general mechanism\
    \ to handle nodes that, e.g., do\n          not implement this protocol.\n"
- title: 3.1.  Comparison with IPv4
  contents:
  - "3.1.  Comparison with IPv4\n   The IPv6 Neighbor Discovery protocol corresponds\
    \ to a combination of\n   the IPv4 protocols ARP [ARP], ICMP Router Discovery\
    \ [RDISC], and ICMP\n   Redirect [ICMPv4].  In IPv4 there is no generally agreed\
    \ upon\n   protocol or mechanism for Neighbor Unreachability Detection, although\n\
    \   Hosts Requirements [HR-CL] does specify some possible algorithms for\n   Dead\
    \ Gateway Detection (a subset of the problems Neighbor\n   Unreachability Detection\
    \ tackles).\n   The Neighbor Discovery protocol provides a multitude of improvements\n\
    \   over the IPv4 set of protocols:\n     Router Discovery is part of the base\
    \ protocol set; there is no need\n     for hosts to \"snoop\" the routing protocols.\n\
    \     Router advertisements carry link-layer addresses; no additional\n     packet\
    \ exchange is needed to resolve the router's link-layer\n     address.\n     Router\
    \ advertisements carry prefixes for a link; there is no need\n     to have a separate\
    \ mechanism to configure the \"netmask\".\n     Router advertisements enable Address\
    \ Autoconfiguration.\n     Routers can advertise an MTU for hosts to use on the\
    \ link, ensuring\n     that all nodes use the same MTU value on links lacking\
    \ a well-\n     defined MTU.\n     Address resolution multicasts are \"spread\"\
    \ over 4 billion (2^32)\n     multicast addresses greatly reducing address resolution\
    \ related\n     interrupts on nodes other than the target.  Moreover, non-IPv6\n\
    \     machines should not be interrupted at all.\n     Redirects contain the link-layer\
    \ address of the new first hop;\n     separate address resolution is not needed\
    \ upon receiving a\n     redirect.\n     Multiple prefixes can be associated with\
    \ the same link.  By\n     default, hosts learn all on-link prefixes from Router\n\
    \     Advertisements.  However, routers may be configured to omit some or\n  \
    \   all prefixes from Router Advertisements.  In such cases hosts\n     assume\
    \ that destinations are off-link and send traffic to routers.\n     A router can\
    \ then issue redirects as appropriate.\n     Unlike IPv4, the recipient of an\
    \ IPv6 redirect assumes that the new\n     next-hop is on-link.  In IPv4, a host\
    \ ignores redirects specifying\n     a next-hop that is not on-link according\
    \ to the link's network\n     mask.  The IPv6 redirect mechanism is analogous\
    \ to the XRedirect\n     facility specified in [SH-MEDIA].  It is expected to\
    \ be useful on\n     non-broadcast and shared media links in which it is undesirable\
    \ or\n     not possible for nodes to know all prefixes for on-link\n     destinations.\n\
    \     Neighbor Unreachability Detection is part of the base significantly\n  \
    \   improving the robustness of packet delivery in the presence of\n     failing\
    \ routers, partially failing or partitioned links and nodes\n     that change\
    \ their link-layer addresses.  For instance, mobile nodes\n     can move off-link\
    \ without losing any connectivity due to stale ARP\n     caches.\n     Unlike\
    \ ARP, Neighbor Discovery detects half-link failures (using\n     Neighbor Unreachability\
    \ Detection) and avoids sending traffic to\n     neighbors with which two-way\
    \ connectivity is absent.\n     Unlike in IPv4 Router Discovery the Router Advertisement\
    \ messages\n     do not contain a preference field.  The preference field is not\n\
    \     needed to handle routers of different \"stability\"; the Neighbor\n    \
    \ Unreachability Detection will detect dead routers and switch to a\n     working\
    \ one.\n     The use of link-local addresses to uniquely identify routers (for\n\
    \     Router Advertisement and Redirect messages) makes it possible for\n    \
    \ hosts to maintain the router associations in the event of the site\n     renumbering\
    \ to use new global prefixes.\n     Using the Hop Limit equal to 255 trick Neighbor\
    \ Discovery is immune\n     to off-link senders that accidentally or intentionally\
    \ send ND\n     messages.  In IPv4 off-link senders can send both ICMP Redirects\n\
    \     and Router Advertisement messages.\n     Placing address resolution at the\
    \ ICMP layer makes the protocol\n     more media-independent than ARP and makes\
    \ it possible to use\n     standard IP authentication and security mechanisms\
    \ as appropriate\n     [IPv6-AUTH, IPv6-ESP].\n"
- title: 3.2.  Supported Link Types
  contents:
  - "3.2.  Supported Link Types\n   Neighbor Discovery supports links with different\
    \ properties.  In the\n   presence of certain properties only a subset of the\
    \ ND protocol\n   mechanisms are fully specified in this document:\n   point-to-point\
    \ - Neighbor Discovery handles such links just like\n                    multicast\
    \ links.  (Multicast can be trivially\n                    provided on point to\
    \ point links, and interfaces can\n                    be assigned link-local\
    \ addresses.)  Neighbor\n                    Discovery should be implemented as\
    \ described in this\n                    document.\n   multicast      - Neighbor\
    \ Discovery should be implemented as\n                    described in this document.\n\
    \   non-broadcast multiple access (NBMA)\n                  - Redirect, Neighbor\
    \ Unreachability Detection and\n                    next-hop determination should\
    \ be implemented as\n                    described in this document.  Address\
    \ resolution, and\n                    the mechanism for delivering Router Solicitations\n\
    \                    and Advertisements on NBMA links is not specified in\n  \
    \                  this document.  Note that if hosts support manual\n       \
    \             configuration of a list of default routers, hosts\n            \
    \        can dynamically acquire the link-layer addresses for\n              \
    \      their neighbors from Redirect messages.\n   shared media   - The Redirect\
    \ message is modeled after the XRedirect\n                    message in [SH-MEDIA]\
    \ in order to simplify use of\n                    the protocol on shared media\
    \ links.\n                    This specification does not address shared media\n\
    \                    issues that only relate to routers, such as:\n          \
    \           - How routers exchange reachability information on\n             \
    \          a shared media link.\n                     - How a router determines\
    \ the link-layer address of\n                       a host, which it needs to\
    \ send redirect messages\n                       to the host.\n              \
    \       - How a router determines that it is the first-hop\n                 \
    \      router for a received packet.\n                    The protocol is extensible\
    \ (through the definition\n                    of new options) so that other solutions\
    \ might be\n                    possible in the future.\n   variable MTU   - Neighbor\
    \ Discovery allows routers to specify a MTU\n                    for the link,\
    \ which all nodes then use.  All nodes\n                    on a link must use\
    \ the same MTU (or Maximum Receive\n                    Unit) in order for multicast\
    \ to work properly.\n                    Otherwise when multicasting a sender,\
    \ which can not\n                    know which nodes will receive the packet,\
    \ could not\n                    determine a minimum packet size all receivers\
    \ can\n                    process.\n   asymmetric reachability\n            \
    \      - Neighbor Discovery detects the absence of symmetric\n               \
    \     reachability; a node avoids paths to a neighbor with\n                 \
    \   which it does not have symmetric connectivity.\n                    The Neighbor\
    \ Unreachability Detection will typically\n                    identify such half-links\
    \ and the node will refrain\n                    from using them.\n          \
    \          The protocol can presumably be extended in the\n                  \
    \  future to find viable paths in environments that\n                    lack\
    \ reflexive and transitive connectivity.\n"
- title: 4.  MESSAGE FORMATS
  contents:
  - '4.  MESSAGE FORMATS

    '
- title: 4.1.  Router Solicitation Message Format
  contents:
  - "4.1.  Router Solicitation Message Format\n   Hosts send Router Solicitations\
    \ in order to prompt routers to\n   generate Router Advertisements quickly.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Code      |          Checksum             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          Reserved                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Options ...\n     +-+-+-+-+-+-+-+-+-+-+-+-\n"
- title: 'IP Fields:'
  contents:
  - "IP Fields:\n   Source Address\n                  An IP address assigned to the\
    \ sending interface, or\n                  the unspecified address if no address\
    \ is assigned to\n                  the sending interface.\n   Destination Address\n\
    \                  Typically the all-routers multicast address.\n   Hop Limit\
    \      255\n   Priority       15\n   Authentication Header\n                 \
    \ If a Security Association for the IP Authentication\n                  Header\
    \ exists between the sender and the destination\n                  address, then\
    \ the sender SHOULD include this header.\n"
- title: 'ICMP Fields:'
  contents:
  - "ICMP Fields:\n   Type           133\n   Code           0\n   Checksum       The\
    \ ICMP checksum.  See [ICMPv6].\n   Reserved       This field is unused.  It MUST\
    \ be initialized to zero\n                  by the sender and MUST be ignored\
    \ by the receiver.\n"
- title: 'Valid Options:'
  contents:
  - "Valid Options:\n   Source link-layer address\n                  The link-layer\
    \ address of the sender, if known.\n   Future versions of this protocol may define\
    \ new option types.\n   Receivers MUST silently ignore any options they do not\
    \ recognize and\n   continue processing the message.\n"
- title: 4.2.  Router Advertisement Message Format
  contents:
  - "4.2.  Router Advertisement Message Format\n   Routers send out Router Advertisement\
    \ message periodically, or in\n   response to a Router Solicitation.\n      0\
    \                   1                   2                   3\n      0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Code      |          Checksum             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Cur\
    \ Hop Limit |M|O|  Reserved |       Router Lifetime         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                         Reachable Time                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        Retrans Timer                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Options ...\n     +-+-+-+-+-+-+-+-+-+-+-+-\n"
- title: 'IP Fields:'
  contents:
  - "IP Fields:\n   Source Address\n                  MUST be the link-local address\
    \ assigned to the\n                  interface from which this message is sent.\n\
    \   Destination Address\n                  Typically the Source Address of an\
    \ invoking Router\n                  Solicitation or the all-nodes multicast address.\n\
    \   Hop Limit      255\n   Priority       15\n   Authentication Header\n     \
    \             If a Security Association for the IP Authentication\n          \
    \        Header exists between the sender and the destination\n              \
    \    address, then the sender SHOULD include this header.\n"
- title: 'ICMP Fields:'
  contents:
  - "ICMP Fields:\n   Type           134\n   Code           0\n   Checksum       The\
    \ ICMP checksum.  See [ICMPv6].\n   Cur Hop Limit  8-bit unsigned integer.  The\
    \ default value that should\n                  be placed in the Hop Count field\
    \ of the IP header for\n                  outgoing IP packets.  A value of zero\
    \ means\n                  unspecified (by this router).\n   M              1-bit\
    \ \"Managed address configuration\" flag.  When set,\n                  hosts\
    \ use the administered (stateful) protocol for\n                  address autoconfiguration\
    \ in addition to any addresses\n                  autoconfigured using stateless\
    \ address\n                  autoconfiguration.  The use of this flag is described\n\
    \                  in [ADDRCONF].\n   O              1-bit \"Other stateful configuration\"\
    \ flag.  When set,\n                  hosts use the administered (stateful) protocol\
    \ for\n                  autoconfiguration of other (non-address) information.\n\
    \                  The use of this flag is described in [ADDRCONF].\n   Reserved\
    \       A 6-bit unused field.  It MUST be initialized to zero\n              \
    \    by the sender and MUST be ignored by the receiver.\n   Router Lifetime\n\
    \                  16-bit unsigned integer.  The lifetime associated with\n  \
    \                the default router in units of seconds.  The maximum\n      \
    \            value corresponds to 18.2 hours.  A Lifetime of 0\n             \
    \     indicates that the router is not a default router and\n                \
    \  SHOULD NOT appear on the default router list.  The\n                  Router\
    \ Lifetime applies only to the router's\n                  usefulness as a default\
    \ router; it does not apply to\n                  information contained in other\
    \ message fields or\n                  options.  Options that need time limits\
    \ for their\n                  information include their own lifetime fields.\n\
    \   Reachable Time 32-bit unsigned integer.  The time, in milliseconds,\n    \
    \              that a node assumes a neighbor is reachable after\n           \
    \       having received a reachability confirmation.  Used by\n              \
    \    the Neighbor Unreachability Detection algorithm (see\n                  Section\
    \ 7.3).  A value of zero means unspecified (by\n                  this router).\n\
    \   Retrans Timer  32-bit unsigned integer.  The time, in milliseconds,\n    \
    \              between retransmitted Neighbor Solicitation messages.\n       \
    \           Used by address resolution and the Neighbor\n                  Unreachability\
    \ Detection algorithm (see Sections 7.2\n                  and 7.3).  A value\
    \ of zero means unspecified (by this\n                  router).\n"
- title: 'Possible options:'
  contents:
  - "Possible options:\n   Source link-layer address\n                  The link-layer\
    \ address of the interface from which the\n                  Router Advertisement\
    \ is sent.  Only used on link\n                  layers that have addresses. \
    \ A router MAY omit this\n                  option in order to enable inbound\
    \ load sharing across\n                  multiple link-layer addresses.\n   MTU\
    \            SHOULD be sent on links that have a variable MTU (as\n          \
    \        specified in the document that describes how to run IP\n            \
    \      over the particular link type).  MAY be sent on other\n               \
    \   links.\n   Prefix Information\n                  These options specify the\
    \ prefixes that are on-link\n                  and/or are used for address autoconfiguration.\
    \  A\n                  router SHOULD include all its on-link prefixes (except\n\
    \                  the link-local prefix) so that multihomed hosts have\n    \
    \              complete prefix information about on-link destinations\n      \
    \            for the links to which they attach.  If complete\n              \
    \    information is lacking, a multihomed host may not be\n                  able\
    \ to chose the correct outgoing interface when\n                  sending traffic\
    \ to its neighbors.\n   Future versions of this protocol may define new option\
    \ types.\n   Receivers MUST silently ignore any options they do not recognize\
    \ and\n   continue processing the message.\n"
- title: 4.3.  Neighbor Solicitation Message Format
  contents:
  - "4.3.  Neighbor Solicitation Message Format\n   Nodes send Neighbor Solicitations\
    \ to request the link-layer address\n   of a target node while also providing\
    \ their own link-layer address to\n   the target.  Neighbor Solicitations are\
    \ multicast when the node needs\n   to resolve an address and unicast when the\
    \ node seeks to verify the\n   reachability of a neighbor.\n      0          \
    \         1                   2                   3\n      0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Code      |          Checksum             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Reserved                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ +                                                               +\n     |  \
    \                                                             |\n     +      \
    \                 Target Address                          +\n     |          \
    \                                                     |\n     +              \
    \                                                 +\n     |                  \
    \                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Options ...\n     +-+-+-+-+-+-+-+-+-+-+-+-\n"
- title: 'IP Fields:'
  contents:
  - "IP Fields:\n   Source Address\n                  Either an address assigned to\
    \ the interface from which\n                  this message is sent or (if Duplicate\
    \ Address\n                  Detection is in progress [ADDRCONF]) the unspecified\n\
    \                  address.\n   Destination Address\n                  Either\
    \ the solicited-node multicast address\n                  corresponding to the\
    \ target address, or the target\n                  address.\n   Hop Limit    \
    \  255\n   Priority       15\n   Authentication Header\n                  If a\
    \ Security Association for the IP Authentication\n                  Header exists\
    \ between the sender and the destination\n                  address, then the\
    \ sender SHOULD include this header.\n"
- title: 'ICMP Fields:'
  contents:
  - "ICMP Fields:\n   Type           135\n   Code           0\n   Checksum       The\
    \ ICMP checksum.  See [ICMPv6].\n   Reserved       This field is unused.  It MUST\
    \ be initialized to zero\n                  by the sender and MUST be ignored\
    \ by the receiver.\n   Target Address\n                  The IP address of the\
    \ target of the solicitation.  It\n                  MUST NOT be a multicast address.\n"
- title: 'Possible options:'
  contents:
  - "Possible options:\n   Source link-layer address\n                  The link-layer\
    \ address for the sender.  On link layers\n                  that have addresses\
    \ this option MUST be included in\n                  multicast solicitations and\
    \ SHOULD be included in\n                  unicast solicitations.\n   Future versions\
    \ of this protocol may define new option types.\n   Receivers MUST silently ignore\
    \ any options they do not recognize and\n   continue processing the message.\n"
- title: 4.4.  Neighbor Advertisement Message Format
  contents:
  - "4.4.  Neighbor Advertisement Message Format\n   A node sends Neighbor Advertisements\
    \ in response to Neighbor\n   Solicitations and sends unsolicited Neighbor Advertisements\
    \ in order\n   to (unreliably) propagate new information quickly.\n      0   \
    \                1                   2                   3\n      0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Code      |          Checksum             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |R|S|O|\
    \                     Reserved                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ +                                                               +\n     |  \
    \                                                             |\n     +      \
    \                 Target Address                          +\n     |          \
    \                                                     |\n     +              \
    \                                                 +\n     |                  \
    \                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Options ...\n     +-+-+-+-+-+-+-+-+-+-+-+-\n"
- title: 'IP Fields:'
  contents:
  - "IP Fields:\n   Source Address\n                  An address assigned to the interface\
    \ from which the\n                  advertisement is sent.\n   Destination Address\n\
    \                  For solicited advertisements, the Source Address of an\n  \
    \                invoking Neighbor Solicitation or, if the\n                 \
    \ solicitation's Source Address is the unspecified\n                  address,\
    \ the all-nodes multicast address.\n                  For unsolicited advertisements\
    \ typically the all-nodes\n                  multicast address.\n   Hop Limit\
    \      255\n   Priority       15\n   Authentication Header\n                 \
    \ If a Security Association for the IP Authentication\n                  Header\
    \ exists between the sender and the destination\n                  address, then\
    \ the sender SHOULD include this header.\n"
- title: 'ICMP Fields:'
  contents:
  - "ICMP Fields:\n   Type           136\n   Code           0\n   Checksum       The\
    \ ICMP checksum.  See [ICMPv6].\n   R              Router flag.  When set, the\
    \ R-bit indicates that the\n                  sender is a router.  The R-bit is\
    \ used by Neighbor\n                  Unreachability Detection to detect a router\
    \ that\n                  changes to a host.\n   S              Solicited flag.\
    \  When set, the S-bit indicates that\n                  the advertisement was\
    \ sent in response to a Neighbor\n                  Solicitation from the Destination\
    \ address.  The S-bit\n                  is used as a reachability confirmation\
    \ for Neighbor\n                  Unreachability Detection.  It MUST NOT be set\
    \ in\n                  multicast advertisements or in unsolicited unicast\n \
    \                 advertisements.\n   O              Override flag.  When set,\
    \ the O-bit indicates that the\n                  advertisement should override\
    \ an existing cache entry\n                  and update the cached link-layer\
    \ address.  When it is\n                  not set the advertisement will not update\
    \ a cached\n                  link-layer address though it will update an existing\n\
    \                  Neighbor Cache entry for which no link-layer address\n    \
    \              is known.  It SHOULD NOT be set in solicited\n                \
    \  advertisements for anycast addresses and in solicited\n                  proxy\
    \ advertisements.  It SHOULD be set in other\n                  solicited advertisements\
    \ and in unsolicited\n                  advertisements.\n   Reserved       29-bit\
    \ unused field.  It MUST be initialized to zero\n                  by the sender\
    \ and MUST be ignored by the receiver.\n   Target Address\n                  For\
    \ solicited advertisements, the Target Address field\n                  in the\
    \ Neighbor Solicitation message that prompted\n                  this advertisement.\
    \  For an unsolicited advertisement,\n                  the address whose link-layer\
    \ address has changed.  The\n                  Target Address MUST NOT be a multicast\
    \ address.\n"
- title: 'Possible options:'
  contents:
  - "Possible options:\n   Target link-layer address\n                  The link-layer\
    \ address for the target, i.e., the\n                  sender of the advertisement.\
    \  MUST be included on link\n                  layers that have addresses.\n \
    \  Future versions of this protocol may define new option types.\n   Receivers\
    \ MUST silently ignore any options they do not recognize and\n   continue processing\
    \ the message.\n"
- title: 4.5.  Redirect Message Format
  contents:
  - "4.5.  Redirect Message Format\n   Routers send Redirect packets to inform a host\
    \ of a better first-hop\n   node on the path to a destination.  Hosts can be redirected\
    \ to a\n   better first-hop router but can also be informed by a redirect that\n\
    \   the destination is in fact a neighbor.  The latter is accomplished by\n  \
    \ setting the ICMP Target Address equal to the ICMP Destination\n   Address.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Code      |          Checksum             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Reserved                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ +                                                               +\n     |  \
    \                                                             |\n     +      \
    \                 Target Address                          +\n     |          \
    \                                                     |\n     +              \
    \                                                 +\n     |                  \
    \                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ +                                                               +\n     |  \
    \                                                             |\n     +      \
    \               Destination Address                       +\n     |          \
    \                                                     |\n     +              \
    \                                                 +\n     |                  \
    \                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Options ...\n     +-+-+-+-+-+-+-+-+-+-+-+-\n"
- title: 'IP Fields:'
  contents:
  - "IP Fields:\n   Source Address\n                  MUST be the link-local address\
    \ assigned to the\n                  interface from which this message is sent.\n\
    \   Destination Address\n                  The Source Address of the packet that\
    \ triggered the\n                  redirect.\n   Hop Limit      255\n   Priority\
    \       15\n   Authentication Header\n                  If a Security Association\
    \ for the IP Authentication\n                  Header exists between the sender\
    \ and the destination\n                  address, then the sender SHOULD include\
    \ this header.\n"
- title: 'ICMP Fields:'
  contents:
  - "ICMP Fields:\n   Type           137\n   Code           0\n   Checksum       The\
    \ ICMP checksum.  See [ICMPv6].\n   Reserved       This field is unused.  It MUST\
    \ be initialized to zero\n                  by the sender and MUST be ignored\
    \ by the receiver.\n   Target Address An IP address that is a better first hop\
    \ to use for\n                  the ICMP Destination Address.  When the target\
    \ is the\n                  actual endpoint of communication, i.e., the\n    \
    \              destination is a neighbor, the Target Address field\n         \
    \         MUST contain the same value as the ICMP Destination\n              \
    \    Address field.  Otherwise the target is a better\n                  first-hop\
    \ router and the Target Address MUST be the\n                  router's link-local\
    \ address so that hosts can uniquely\n                  identify routers.\n  \
    \ Destination Address\n                  The IP address of the destination which\
    \ is redirected\n                  to the target.\n"
- title: 'Possible options:'
  contents:
  - "Possible options:\n   Target link-layer address\n                  The link-layer\
    \ address for the target.  It SHOULD be\n                  included (if known).\
    \  Note that on NBMA links, hosts\n                  may rely on the presence\
    \ of the Target Link-Layer\n                  Address option in Redirect messages\
    \ as the means for\n                  determining the link-layer addresses of\
    \ neighbors.  In\n                  such cases, the option MUST be included in\
    \ Redirect\n                  messages.\n   Redirected Header\n              \
    \    As much as possible of the IP packet that triggered\n                  the\
    \ sending of the Redirect without making the\n                  redirect packet\
    \ exceed 576 octets.\n"
- title: 4.6.  Option Formats
  contents:
  - "4.6.  Option Formats\n   Neighbor Discovery messages include zero or more options,\
    \ some of\n   which may appear multiple times in the same message.  All options\
    \ are\n   of the form:\n      0                   1                   2      \
    \             3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |    Length     |              ...              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     ~  \
    \                            ...                              ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Fields:'
  contents:
  - "Fields:\n   Type           8-bit identifier of the type of option.  The options\n\
    \                  defined in this document are:\n                        Option\
    \ Name                             Type\n                     Source Link-Layer\
    \ Address                    1\n                     Target Link-Layer Address\
    \                    2\n                     Prefix Information              \
    \             3\n                     Redirected Header                      \
    \      4\n                     MTU                                          5\n\
    \   Length         8-bit unsigned integer.  The length of the option in\n    \
    \              units of 8 octets.  The value 0 is invalid.  Nodes\n          \
    \        MUST silently discard an ND packet that contains an\n               \
    \   option with length zero.\n"
- title: 4.6.1.  Source/Target Link-layer Address
  contents:
  - "4.6.1.  Source/Target Link-layer Address\n      0                   1       \
    \            2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |    Length     |    Link-Layer Address ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Fields:'
  contents:
  - "Fields:\n   Type\n                  1 for Source Link-layer Address\n       \
    \           2 for Target Link-layer Address\n   Length         The length of the\
    \ option in units of 8 octets.  For\n                  example, the length for\
    \ IEEE 802 addresses is 1\n                  [IPv6-ETHER].\n   Link-Layer Address\n\
    \                  The variable length link-layer address.\n                 \
    \ The content and format of this field (including byte\n                  and\
    \ bit ordering) is expected to be specified in\n                  specific documents\
    \ that describe how IPv6 operates\n                  over different link layers.\
    \  For instance, [IPv6-\n                  ETHER].\n"
- title: Description
  contents:
  - "Description\n                  The Source Link-Layer Address option contains\
    \ the\n                  link-layer address of the sender of the packet.  It is\n\
    \                  used in the Neighbor Solicitation, Router\n               \
    \   Solicitation, and Router Advertisement packets.\n                  The Target\
    \ Link-Layer Address option contains the\n                  link-layer address\
    \ of the target.  It is used in\n                  Neighbor Advertisement and\
    \ Redirect packets.\n                  These options MUST be silently ignored\
    \ for other\n                  Neighbor Discovery messages.\n"
- title: 4.6.2.  Prefix Information
  contents:
  - "4.6.2.  Prefix Information\n      0                   1                   2 \
    \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |    Length     | Prefix Length |L|A| Reserved1 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                       Valid Lifetime                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                       Preferred Lifetime                      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Reserved2                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ +                                                               +\n     |  \
    \                                                             |\n     +      \
    \                      Prefix                             +\n     |          \
    \                                                     |\n     +              \
    \                                                 +\n     |                  \
    \                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Fields:'
  contents:
  - "Fields:\n   Type           3\n   Length         4\n   Prefix Length  8-bit unsigned\
    \ integer.  The number of leading bits in\n                  the Prefix that are\
    \ valid.  The value ranges from 0 to\n                  128.\n   L           \
    \   1-bit on-link flag.  When set, indicates that this\n                  prefix\
    \ can be used for on-link determination.  When\n                  not set the\
    \ advertisement makes no statement about\n                  on-link or off-link\
    \ properties of the prefix.  For\n                  instance, the prefix might\
    \ be used for address\n                  configuration with some of the addresses\
    \ belonging to\n                  the prefix being on-link and others being off-link.\n\
    \   A              1-bit autonomous address-configuration flag.  When set\n  \
    \                indicates that this prefix can be used for autonomous\n     \
    \             address configuration as specified in [ADDRCONF].\n   Reserved1\
    \      6-bit unused field.  It MUST be initialized to zero by\n              \
    \    the sender and MUST be ignored by the receiver.\n   Valid Lifetime\n    \
    \              32-bit unsigned integer.  The length of time in\n             \
    \     seconds (relative to the time the packet is sent) that\n               \
    \   the prefix is valid for the purpose of on-link\n                  determination.\
    \  A value of all one bits (0xffffffff)\n                  represents infinity.\
    \  The Valid Lifetime is also used\n                  by [ADDRCONF].\n   Preferred\
    \ Lifetime\n                  32-bit unsigned integer.  The length of time in\n\
    \                  seconds (relative to the time the packet is sent) that\n  \
    \                addresses generated from the prefix via stateless\n         \
    \         address autoconfiguration remain preferred [ADDRCONF].\n           \
    \       A value of all one bits (0xffffffff) represents\n                  infinity.\
    \  See [ADDRCONF].\n   Reserved2      This field is unused.  It MUST be initialized\
    \ to zero\n                  by the sender and MUST be ignored by the receiver.\n\
    \   Prefix         An IP address or a prefix of an IP address.  The\n        \
    \          Prefix Length field contains the number of valid\n                \
    \  leading bits in the prefix.  The bits in the prefix\n                  after\
    \ the prefix length are reserved and MUST be\n                  initialized to\
    \ zero by the sender and ignored by the\n                  receiver.  A router\
    \ SHOULD NOT send a prefix option\n                  for the link-local prefix\
    \ and a host SHOULD ignore\n                  such a prefix option.\n"
- title: Description
  contents:
  - "Description\n                  The Prefix Information option provide hosts with\
    \ on-\n                  link prefixes and prefixes for Address\n            \
    \      Autoconfiguration.\n                  The Prefix Information option appears\
    \ in Router\n                  Advertisement packets and MUST be silently ignored\
    \ for\n                  other messages.\n"
- title: 4.6.3.  Redirected Header
  contents:
  - "4.6.3.  Redirected Header\n      0                   1                   2  \
    \                 3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |    Length     |            Reserved           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Reserved                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ ~                       IP header + data                        ~\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Fields:'
  contents:
  - "Fields:\n   Type           4\n   Length         The length of the option in units\
    \ of 8 octets.\n   Reserved       These fields are unused.  They MUST be initialized\
    \ to\n                  zero by the sender and MUST be ignored by the\n      \
    \            receiver.\n   IP header + data\n                  The original packet\
    \ truncated to ensure that the size\n                  of the redirect message\
    \ does not exceed 576 octets.\n"
- title: Description
  contents:
  - "Description\n                  The Redirected Header option is used in Redirect\n\
    \                  messages and contains all or part of the packet that\n    \
    \              is being redirected.\n                  This option MUST be silently\
    \ ignored for other\n                  Neighbor Discovery messages.\n"
- title: 4.6.4.  MTU
  contents:
  - "4.6.4.  MTU\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |     Type      |    Length     |           Reserved            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                              MTU                              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Fields:'
  contents:
  - "Fields:\n   Type           5\n   Length         1\n   Reserved       This field\
    \ is unused.  It MUST be initialized to zero\n                  by the sender\
    \ and MUST be ignored by the receiver.\n   MTU            32-bit unsigned integer.\
    \  The recommended MTU for the\n                  link.\n"
- title: Description
  contents:
  - "Description\n                  The MTU option is used in  Router Advertisement\n\
    \                  messages to insure that all nodes on a link use the\n     \
    \             same MTU value in those cases where the link MTU is\n          \
    \        not well known.\n                  This option MUST be silently ignored\
    \ for other\n                  Neighbor Discovery messages.\n                \
    \  In configurations in which heterogeneous technologies\n                  are\
    \ bridged together, the maximum supported MTU may\n                  differ from\
    \ one segment to another.  If the bridges do\n                  not generate ICMP\
    \ Packet Too Big messages,\n                  communicating nodes will be unable\
    \ to use Path MTU to\n                  dynamically determine the appropriate\
    \ MTU on a per-\n                  neighbor basis.  In such cases, routers use\
    \ the MTU\n                  option to specify an MTU value supported by all\n\
    \                  segments.\n"
- title: 5.  CONCEPTUAL MODEL OF A HOST
  contents:
  - "5.  CONCEPTUAL MODEL OF A HOST\n   This section describes a conceptual model\
    \ of one possible data\n   structure organization that hosts (and to some extent\
    \ routers) will\n   maintain in interacting with neighboring nodes.  The described\n\
    \   organization is provided to facilitate the explanation of how the\n   Neighbor\
    \ Discovery protocol should behave.  This document does not\n   mandate that implementations\
    \ adhere to this model as long as their\n   external behavior is consistent with\
    \ that described in this document.\n   This model is only concerned with the aspects\
    \ of host behavior\n   directly related to Neighbor Discovery.  In particular,\
    \ it does not\n   concern itself with such issues as source address selection\
    \ or the\n   selecting of an outgoing interface on a multihomed host.\n"
- title: 5.1.  Conceptual Data Structures
  contents:
  - "5.1.  Conceptual Data Structures\n   Hosts will need to maintain the following\
    \ pieces of information for\n   each interface:\n   Neighbor Cache\n         \
    \       - A set of entries about individual neighbors to which\n             \
    \     traffic has been sent recently.  Entries are keyed on\n                \
    \  the neighbor's on-link unicast IP address and contain\n                  such\
    \ information as its link-layer address, a flag\n                  indicating\
    \ whether the neighbor is a router or a host\n                  (called IsRouter\
    \ in this document), a pointer to any\n                  queued packets waiting\
    \ for address resolution to\n                  complete, etc.\n              \
    \    A Neighbor Cache entry also contains information used\n                 \
    \ by the Neighbor Unreachability Detection algorithm,\n                  including\
    \ the reachability state, the number of\n                  unanswered probes,\
    \ and the time the next Neighbor\n                  Unreachability Detection event\
    \ is scheduled to take\n                  place.\n   Destination Cache\n     \
    \           - A set of entries about destinations to which traffic\n         \
    \         has been sent recently.  The Destination Cache\n                  includes\
    \ both on-link and off-link destinations and\n                  provides a level\
    \ of indirection into the Neighbor\n                  Cache; the Destination Cache\
    \ maps a destination IP\n                  address to the IP address of the next-hop\
    \ neighbor.\n                  This cache is updated with information learned\
    \ from\n                  Redirect messages.  Implementations may find it\n  \
    \                convenient to store additional information not\n            \
    \      directly related to Neighbor Discovery in Destination\n               \
    \   Cache entries, such as the Path MTU (PMTU) and round\n                  trip\
    \ timers maintained by transport protocols.\n   Prefix List  - A list of the prefixes\
    \ that define a set of addresses\n                  that are on-link.  Prefix\
    \ List entries are created\n                  from information received in Router\
    \ Advertisements.\n                  Each entry has an associated invalidation\
    \ timer value\n                  (extracted from the advertisement) used to expire\n\
    \                  prefixes when they become invalid.  A special\n           \
    \       \"infinity\" timer value specifies that a prefix remains\n           \
    \       valid forever, unless a new (finite) value is received\n             \
    \     in a subsequent advertisement.\n                  The link-local prefix\
    \ is considered to be on the\n                  prefix list with an infinite invalidation\
    \ timer\n                  regardless of whether routers are advertising a prefix\n\
    \                  for it.  Received Router Advertisements SHOULD NOT\n      \
    \            modify the invalidation timer for the link-local\n              \
    \    prefix.\n   Default Router List\n                - A list of routers to which\
    \ packets may be sent.\n                  Router list entries point to entries\
    \ in the Neighbor\n                  Cache; the algorithm for selecting a default\
    \ router\n                  favors routers known to be reachable over those whose\n\
    \                  reachability is suspect.  Each entry also has an\n        \
    \          associated invalidation timer value (extracted from\n             \
    \     Router Advertisements) used to delete entries that are\n               \
    \   no longer advertised.\n   Note that the above conceptual data structures can\
    \ be implemented\n   using a variety of techniques.  One possible implementation\
    \ is to use\n   a single longest-match routing table for all of the above data\n\
    \   structures.  Regardless of the specific implementation, it is\n   critical\
    \ that the Neighbor Cache entry for a router is shared by all\n   Destination\
    \ Cache entries using that router in order to prevent\n   redundant Neighbor Unreachability\
    \ Detection probes.\n   Note also that other protocols (e.g. IPv6 Mobility) might\
    \ add\n   additional conceptual data structures.  An implementation is at\n  \
    \ liberty to implement such data structures in any way it pleases.  For\n   example,\
    \ an implementation could merge all conceptual data structures\n   into a single\
    \ routing table.\n   The Neighbor Cache contains information maintained by the\
    \ Neighbor\n   Unreachability Detection algorithm.  A key piece of information\
    \ is a\n   neighbor's reachability state, which is one of five possible values.\n\
    \   The following definitions are informal; precise definitions can be\n   found\
    \ in Section 7.3.2.\n   INCOMPLETE  Address resolution is in progress and the\
    \ link-layer\n               address of the neighbor has not yet been determined.\n\
    \   REACHABLE   Roughly speaking, the neighbor is known to have been\n       \
    \        reachable recently (within tens of seconds ago).\n   STALE       The\
    \ neighbor is no longer known to be reachable but until\n               traffic\
    \ is sent to the neighbor, no attempt should be\n               made to verify\
    \ its reachability.\n   DELAY       The neighbor is no longer known to be reachable,\
    \ and\n               traffic has recently be sent to the neighbor.  Rather\n\
    \               than probe the neighbor immediately, however, delay\n        \
    \       sending probes for a short while in order to give upper\n            \
    \   layer protocols a chance to provide reachability\n               confirmation.\n\
    \   PROBE       The neighbor is no longer known to be reachable, and\n       \
    \        unicast Neighbor Solicitation probes are being sent to\n            \
    \   verify reachability.\n"
- title: 5.2.  Conceptual Sending Algorithm
  contents:
  - "5.2.  Conceptual Sending Algorithm\n   When sending a packet to a destination,\
    \ a node uses a combination of\n   the Destination Cache, the Prefix List, and\
    \ the Default Router List\n   to determine the IP address of the appropriate next\
    \ hop, an operation\n   known as \"next-hop determination\".  Once the IP address\
    \ of the next\n   hop is known, the Neighbor Cache is consulted for link-layer\n\
    \   information about that neighbor.\n   Next-hop determination for a given unicast\
    \ destination operates as\n   follows.  The sender performs a longest prefix match\
    \ against the\n   Prefix List to determine whether the packet's destination is\
    \ on- or\n   off-link.  If the destination is on-link, the next-hop address is\
    \ the\n   same as the packet's destination address.  Otherwise, the sender\n \
    \  selects a router from the Default Router List (following the rules\n   described\
    \ in Section 6.3.6).  If the Default Router List is empty,\n   the sender assumes\
    \ that the destination is on-link.\n   For efficiency reasons, next-hop determination\
    \ is not performed on\n   every packet that is sent.  Instead, the results of\
    \ next-hop\n   determination computations are saved in the Destination Cache (which\n\
    \   also contains updates learned from Redirect messages).  When the\n   sending\
    \ node has a packet to send, it first examines the Destination\n   Cache.  If\
    \ no entry exists for the destination, next-hop\n   determination is invoked to\
    \ create a Destination Cache entry.\n   Once the IP address of the next-hop node\
    \ is known, the sender\n   examines the Neighbor Cache for link-layer information\
    \ about that\n   neighbor.  If no entry exists, the sender creates one, sets its\
    \ state\n   to INCOMPLETE, initiates Address Resolution, and then queues the data\n\
    \   packet pending completion of address resolution.  For multicast-\n   capable\
    \ interfaces Address Resolution consists of sending a Neighbor\n   Solicitation\
    \ message and waiting for a Neighbor Advertisement.  When\n   a Neighbor Advertisement\
    \ response is received, the link-layer\n   addresses is entered in the Neighbor\
    \ Cache entry and the queued\n   packet is transmitted.  The address resolution\
    \ mechanism is described\n   in detail in Section 7.2.\n   For multicast packets\
    \ the next-hop is always the (multicast)\n   destination address and is considered\
    \ to be on-link.  The procedure\n   for determining the link-layer address corresponding\
    \ to a given IP\n   multicast address can be found in a separate document that\
    \ covers\n   operating IP over a particular link type (e.g., [IPv6-ETHER]).\n\
    \   Each time a Neighbor Cache entry is accessed while transmitting a\n   unicast\
    \ packet, the sender checks Neighbor Unreachability Detection\n   related information\
    \ according to the Neighbor Unreachability\n   Detection algorithm (Section 7.3).\
    \  This unreachability check might\n   result in the sender transmitting a unicast\
    \ Neighbor Solicitation to\n   verify that the neighbor is still reachable.\n\
    \   Next-hop determination is done the first time traffic is sent to a\n   destination.\
    \  As long as subsequent communication to that destination\n   proceeds successfully,\
    \ the Destination Cache entry continues to be\n   used.  If at some point communication\
    \ ceases to proceed, as\n   determined by the Neighbor Unreachability Detection\
    \ algorithm, next-\n   hop determination may need to be performed again.  For\
    \ example,\n   traffic through a failed router should be switched to a working\n\
    \   router.  Likewise, it may be possible to reroute traffic destined for\n  \
    \ a mobile node to a \"mobility agent\".\n   Note that when a node redoes next-hop\
    \ determination there is no need\n   to discard the complete Destination Cache\
    \ entry.  In fact, it is\n   generally beneficial to retain such cached information\
    \ as the PMTU\n   and round trip timer values that may also be kept in the Destination\n\
    \   Cache entry.\n   Routers and multihomed hosts have multiple interfaces.  The\
    \ remainder\n   of this document assumes that all sent and received Neighbor\n\
    \   Discovery messages refer to the interface of appropriate context.\n   For\
    \ example, when responding to a Router Solicitation, the\n   corresponding Router\
    \ Advertisement is sent out the interface on which\n   the solicitation was received.\n"
- title: 5.3.  Garbage Collection and Timeout Requirements
  contents:
  - "5.3.  Garbage Collection and Timeout Requirements\n   The conceptual data structures\
    \ described above use different\n   mechanisms for discarding potentially stale\
    \ or unused information.\n   From the perspective of correctness there is no need\
    \ to periodically\n   purge Destination and Neighbor Cache entries.  Although\
    \ stale\n   information can potentially remain in the cache indefinitely, the\n\
    \   Neighbor Unreachability Detection algorithm ensures that stale\n   information\
    \ is purged quickly if it is actually being used.\n   To limit the storage needed\
    \ for the Destination and Neighbor Caches,\n   a node may need to garbage-collect\
    \ old entries.  However, care must\n   be taken to insure that sufficient space\
    \ is always present to hold\n   the working set of active entries.  A small cache\
    \ may result in an\n   excessive number of Neighbor Discovery messages if entries\
    \ are\n   discarded and rebuilt in quick succession.  Any LRU-based policy that\n\
    \   only reclaims entries that have not been used in some time (e.g., ten\n  \
    \ minutes or more) should be adequate for garbage-collecting unused\n   entries.\n\
    \   A node should retain entries in the Default Router List and the\n   Prefix\
    \ List until their lifetimes expire.  However, a node may\n   garbage collect\
    \ entries prematurely if it is low on memory.  If not\n   all routers are kept\
    \ on the Default Router list, a node should retain\n   at least two entries in\
    \ the Default Router List (and preferably more)\n   in order to maintain robust\
    \ connectivity for off-link destinations.\n   When removing an entry from the\
    \ Prefix List there is no need to purge\n   any entries from the Destination or\
    \ Neighbor Caches.  Neighbor\n   Unreachability Detection will efficiently purge\
    \ any entries in these\n   caches that have become invalid.  When removing an\
    \ entry from the\n   Default Router List, however, any entries in the Destination\
    \ Cache\n   that go through that router must perform next-hop determination again\n\
    \   to select a new default router.\n"
- title: 6.  ROUTER AND PREFIX DISCOVERY
  contents:
  - "6.  ROUTER AND PREFIX DISCOVERY\n   This section describes router and host behavior\
    \ related to the Router\n   Discovery portion of Neighbor Discovery.  Router Discovery\
    \ is used to\n   locate neighboring routers as well as learn prefixes and\n  \
    \ configuration parameters related to address autoconfiguration.\n   Prefix Discovery\
    \ is the process through which hosts learn the ranges\n   of IP addresses that\
    \ reside on-link and can be reached directly\n   without going through a router.\
    \  Routers send Router Advertisements\n   that indicate whether the sender is\
    \ willing to be a default router.\n   Router Advertisements also contain Prefix\
    \ Information options that\n   list the set of prefixes that identify on-link\
    \ IP addresses.\n   Stateless Address Autoconfiguration must also obtain subnet\
    \ prefixes\n   as part of configuring addresses.  Although the prefixes used for\n\
    \   address autoconfiguration are logically distinct from those used for\n   on-link\
    \ determination, autoconfiguration information is piggybacked\n   on Router Discovery\
    \ messages to reduce network traffic.  Indeed, the\n   same prefixes can be advertised\
    \ for on-link determination and address\n   autoconfiguration by specifying the\
    \ appropriate flags in the Prefix\n   Information options.  See [ADDRCONF] for\
    \ details on how\n   autoconfiguration information is processed.\n"
- title: 6.1.  Message Validation
  contents:
  - '6.1.  Message Validation

    '
- title: 6.1.1.  Validation of Router Solicitation Messages
  contents:
  - "6.1.1.  Validation of Router Solicitation Messages\n   Hosts MUST silently discard\
    \ any received Router Solicitation\n   Messages.\n   A router MUST silently discard\
    \ any received Router Solicitation\n   messages that do not satisfy all of the\
    \ following validity checks:\n   - The IP Hop Limit field has a value of 255,\
    \ i.e., the packet could\n     not possibly have been forwarded by a router.\n\
    \   - If the message includes an IP Authentication Header, the message\n     authenticates\
    \ correctly.\n   - ICMP Checksum is valid.\n   - ICMP Code is 0.\n   - ICMP length\
    \ (derived from the IP length) is 8 or more octets.\n   - All included options\
    \ have a length that is greater than zero.\n   The contents of the Reserved field,\
    \ and of any unrecognized options,\n   MUST be ignored.  Future, backward-compatible\
    \ changes to the protocol\n   may specify the contents of the Reserved field or\
    \ add new options;\n   backward-incompatible changes may use different Code values.\n\
    \   The contents of any defined options that are not specified to be used\n  \
    \ with Router Solicitation messages MUST be ignored and the packet\n   processed\
    \ as normal.  The only defined option that may appear is the\n   Source Link-Layer\
    \ Address option.\n   A solicitation that passes the validity checks is called\
    \ a \"valid\n   solicitation\".\n"
- title: 6.1.2.  Validation of Router Advertisement Messages
  contents:
  - "6.1.2.  Validation of Router Advertisement Messages\n   A node MUST silently\
    \ discard any received Router Advertisement\n   messages that do not satisfy all\
    \ of the following validity checks:\n   - IP Source Address is a link-local address.\
    \  Routers must use their\n     link-local address as the source for Router Advertisement\
    \ and\n     Redirect messages so that hosts can uniquely identify routers.\n \
    \  - The IP Hop Limit field has a value of 255, i.e., the packet could\n     not\
    \ possibly have been forwarded by a router.\n   - If the message includes an IP\
    \ Authentication Header, the message\n     authenticates correctly.\n   - ICMP\
    \ Checksum is valid.\n   - ICMP Code is 0.\n   - ICMP length (derived from the\
    \ IP length) is 16 or more octets.\n   - All included options have a length that\
    \ is greater than zero.\n   The contents of the Reserved field, and of any unrecognized\
    \ options,\n   MUST be ignored.  Future, backward-compatible changes to the protocol\n\
    \   may specify the contents of the Reserved field or add new options;\n   backward-incompatible\
    \ changes may use different Code values.\n   The contents of any defined options\
    \ that are not specified to be used\n   with Router Advertisement messages MUST\
    \ be ignored and the packet\n   processed as normal.  The only defined options\
    \ that may appear are\n   the Source Link-Layer Address, Prefix Information and\
    \ MTU options.\n   An advertisement that passes the validity checks is called\
    \ a \"valid\n   advertisement\".\n"
- title: 6.2.  Router Specification
  contents:
  - '6.2.  Router Specification

    '
- title: 6.2.1.  Router Configuration Variables
  contents:
  - "6.2.1.  Router Configuration Variables\n   A router MUST allow for the following\
    \ conceptual variables to be\n   configured by system management.  The specific\
    \ variable names are\n   used for demonstration purposes only, and an implementation\
    \ is not\n   required to have them, so long as its external behavior is consistent\n\
    \   with that described in this document.  Default values are specified\n   to\
    \ simplify configuration in common cases.\n   The default values for some of the\
    \ variables listed below may be\n   overridden by specific documents that describe\
    \ how IPv6 operates over\n   different link layers.  This rule simplifies the\
    \ configuration of\n   Neighbor Discovery over link types with widely differing\
    \ performance\n   characteristics.\n   For each multicast interface:\n     AdvSendAdvertisements\n\
    \                    A flag indicating whether or not the router sends\n     \
    \               periodic Router Advertisements and responds to\n             \
    \       Router Solicitations.\n                    Default: FALSE\n          \
    \          Note that AdvSendAdvertisements MUST be false by\n                \
    \    default so that a node will not accidentally start\n                    acting\
    \ as a router unless it is explicitly\n                    configured by system\
    \ management to send Router\n                    Advertisements.\n     MaxRtrAdvInterval\n\
    \                    The maximum time allowed between sending unsolicited\n  \
    \                  multicast Router Advertisements from the interface,\n     \
    \               in seconds.  MUST be no less than 4 seconds and no\n         \
    \           greater than 1800 seconds.\n                    Default: 600 seconds\n\
    \     MinRtrAdvInterval\n                    The minimum time allowed between\
    \ sending unsolicited\n                    multicast Router Advertisements from\
    \ the interface,\n                    in seconds.  MUST be no less than 3 seconds\
    \ and no\n                    greater than .75 * MaxRtrAdvInterval.\n        \
    \            Default: 0.33 * MaxRtrAdvInterval\n     AdvManagedFlag\n        \
    \            The true/false value to be placed in the \"Managed\n            \
    \        address configuration\" flag field in the Router\n                  \
    \  Advertisement.  See [ADDRCONF].\n                    Default: FALSE\n     AdvOtherConfigFlag\n\
    \                    The true/false value to be placed in the \"Other\n      \
    \              stateful configuration\" flag field in the Router\n           \
    \         Advertisement.  See [ADDRCONF].\n                    Default: FALSE\n\
    \     AdvLinkMTU     The value to be placed in MTU options sent by the\n     \
    \               router.  A value of zero indicates that no MTU\n             \
    \       options are sent.\n                    Default: 0\n     AdvReachableTime\n\
    \                    The value to be placed in the Reachable Time field\n    \
    \                in the Router Advertisement messages sent by the\n          \
    \          router.  The value zero means unspecified (by this\n              \
    \      router).  MUST be no greater than 3,600,000\n                    milliseconds\
    \ (1 hour).\n                    Default: 0\n     AdvRetransTimer\n          \
    \          The value to be placed in the Retrans Timer field in\n            \
    \        the Router Advertisement messages sent by the\n                    router.\
    \  The value zero means unspecified (by this\n                    router).\n \
    \                   Default: 0\n     AdvCurHopLimit\n                    The default\
    \ value to be placed in the Cur Hop Limit\n                    field in the Router\
    \ Advertisement messages sent by\n                    the router.  The value should\
    \ be set to that current\n                    diameter of the Internet.  The value\
    \ zero means\n                    unspecified (by this router).\n            \
    \        Default:  The value specified in the \"Assigned\n                   \
    \ Numbers\" RFC [ASSIGNED] that was in effect at the\n                    time\
    \ of implementation.\n     AdvDefaultLifetime\n                    The value to\
    \ be placed in the Router Lifetime field\n                    of Router Advertisements\
    \ sent from the interface, in\n                    seconds.  MUST be either zero\
    \ or between\n                    MaxRtrAdvInterval and 9000 seconds.  A value\
    \ of zero\n                    indicates that the router is not to be used as\
    \ a\n                    default router.\n                    Default: 3 * MaxRtrAdvInterval\n\
    \     AdvPrefixList\n                    A list of prefixes to be placed in Prefix\n\
    \                    Information options in Router Advertisement messages\n  \
    \                  sent from the interface.\n                    Default: all\
    \ prefixes that the router advertises via\n                    routing protocols\
    \ as being on-link for the interface\n                    from which the advertisement\
    \ is sent.  The link-\n                    local prefix SHOULD NOT be included\
    \ in the list of\n                    advertised prefixes.\n                 \
    \   Each prefix has an associated:\n                       AdvValidLifetime\n\
    \                            The value to be placed in the Valid Lifetime\n  \
    \                          in the Prefix Information option, in\n            \
    \                seconds.  The designated value of all 1's\n                 \
    \           (0xffffffff) represents infinity.\n                            Default:\
    \ infinity.\n                       AdvOnLinkFlag\n                          \
    \  The value to be placed in the on-link flag\n                            (\"\
    L-bit\") field in the Prefix Information\n                            option.\n\
    \                            Default: TRUE\n                    Automatic address\
    \ configuration [ADDRCONF] defines\n                    additional information\
    \ associated with each the\n                    prefixes:\n                  \
    \     AdvPreferredLifetime\n                            The value to be placed\
    \ in the Preferred\n                            Lifetime in the Prefix Information\
    \ option,\n                            in seconds.  The designated value of all\
    \ 1's\n                            (0xffffffff) represents infinity.  See\n  \
    \                          [ADDRCONF].\n                            Default: 604800\
    \ seconds (7 days)\n                       AdvAutonomousFlag\n               \
    \             The value to be placed in the Autonomous\n                     \
    \       Flag field in the Prefix Information option.\n                       \
    \     See [ADDRCONF].\n                            Default: TRUE\n   The above\
    \ variables contain information that is placed in outgoing\n   Router Advertisement\
    \ messages.  Hosts use the received information to\n   initialize a set of analogous\
    \ variables that control their external\n   behavior (see Section 6.3.2).  Some\
    \ of these host variables (e.g.,\n   CurHopLimit, RetransTimer, and ReachableTime)\
    \ apply to all nodes\n   including routers.  In practice, these variables may\
    \ not actually be\n   present on routers, since their contents can be derived\
    \ from the\n   variables described above.  However, external router behavior MUST\
    \ be\n   the same as host behavior with respect to these variables.  In\n   particular,\
    \ this includes the occasional randomization of the\n   ReachableTime value as\
    \ described in Section 6.3.2.\n   Protocol constants are defined in Section 10.\n"
- title: 6.2.2.  Becoming An Advertising Interface
  contents:
  - "6.2.2.  Becoming An Advertising Interface\n   The term \"advertising interface\"\
    \ refers to any functioning and\n   enabled multicast interface that has at least\
    \ one unicast IP address\n   assigned to it and whose corresponding AdvSendAdvertisements\
    \ flag is\n   TRUE.  A router MUST NOT send Router Advertisements out any interface\n\
    \   that is not an advertising interface.\n   An interface may become an advertising\
    \ interface at times other than\n   system startup.  For example:\n   - changing\
    \ the AdvSendAdvertisements flag on an enabled interface\n     from FALSE to TRUE,\
    \ or\n   - administratively enabling the interface, if it had been\n     administratively\
    \ disabled, and its AdvSendAdvertisements flag is\n     TRUE, or\n   - enabling\
    \ IP forwarding capability (i.e., changing the system from\n     being a host\
    \ to being a router), when the interface's\n     AdvSendAdvertisements flag is\
    \ TRUE.\n   A router MUST join the all-routers multicast address on an\n   advertising\
    \ interface.  Routers respond to Router Solicitations sent\n   to the all-routers\
    \ address and verify the consistency of Router\n   Advertisements sent by neighboring\
    \ routers.\n"
- title: 6.2.3.  Router Advertisement Message Content
  contents:
  - "6.2.3.  Router Advertisement Message Content\n   A router sends periodic as well\
    \ as solicited Router Advertisements\n   out its advertising interfaces.  Outgoing\
    \ Router Advertisements are\n   filled with the following values consistent with\
    \ the message format\n   given in Section 4.2:\n   - In the Router Lifetime field:\
    \ the interface's configured\n     AdvDefaultLifetime.\n   - In the M and O flags:\
    \ the interface's configured AdvManagedFlag and\n     AdvOtherConfigFlag, respectively.\
    \  See [ADDRCONF].\n   - In the Cur Hop Limit field: the interface's configured\
    \ CurHopLimit.\n   - In the Reachable Time field: the interface's configured\n\
    \     AdvReachableTime.\n   - In the Retrans Timer field: the interface's configured\n\
    \     AdvRetransTimer.\n   - In the options:\n        o Source Link-Layer Address\
    \ option: link-layer address of the\n          sending interface.  This option\
    \ MAY be omitted to facilitate\n          in-bound load balancing over replicated\
    \ interfaces.\n        o MTU option: the interface's configured AdvLinkMTU value\
    \ if the\n          value is non-zero.  If AdvLinkMTU is zero the MTU option is\n\
    \          not sent.\n        o Prefix Information options: one Prefix Information\
    \ option for\n          each prefix listed in AdvPrefixList with the option fields\
    \ set\n          from the information in the AdvPrefixList entry as follows:\n\
    \             - In the \"on-link\" flag: the entry's AdvOnLinkFlag.\n        \
    \     - In the Valid Lifetime field: the entry's\n               AdvValidLifetime.\n\
    \             - In the \"Autonomous address configuration\" flag: the\n      \
    \         entry's AdvAutonomousFlag.\n             - In the Preferred Lifetime\
    \ field: the entry's\n               AdvPreferredLifetime.\n   A router might\
    \ want to send Router Advertisements without advertising\n   itself as a default\
    \ router.  For instance, a router might advertise\n   prefixes for address autoconfiguration\
    \ while not wishing to forward\n   packets.  Such a router sets the Router Lifetime\
    \ field in outgoing\n   advertisements to zero.\n   A router MAY choose not to\
    \ include some or all options when sending\n   unsolicited Router Advertisements.\
    \  For example, if prefix lifetimes\n   are much longer than AdvDefaultLifetime,\
    \ including them every few\n   advertisements may be sufficient.  However, when\
    \ responding to a\n   Router Solicitation or while sending the first few initial\n\
    \   unsolicited advertisements, a router SHOULD include all options so\n   that\
    \ all information (e.g., prefixes) is propagated quickly during\n   system initialization.\n\
    \   If including all options causes the size of an advertisement to\n   exceed\
    \ the link MTU, multiple advertisements can be sent, each\n   containing a subset\
    \ of the options.\n"
- title: 6.2.4.  Sending Unsolicited Router Advertisements
  contents:
  - "6.2.4.  Sending Unsolicited Router Advertisements\n   A host MUST NOT send Router\
    \ Advertisement messages at any time.\n   Unsolicited Router Advertisements are\
    \ not strictly periodic: the\n   interval between subsequent transmissions is\
    \ randomized to reduce the\n   probability of synchronization with the advertisements\
    \ from other\n   routers on the same link [SYNC].  Each advertising interface\
    \ has its\n   own timer.  Whenever a multicast advertisement is sent from an\n\
    \   interface, the timer is reset to a uniformly-distributed random value\n  \
    \ between the interface's configured MinRtrAdvInterval and\n   MaxRtrAdvInterval;\
    \ expiration of the timer causes the next\n   advertisement to be sent and a new\
    \ random value to be chosen.\n   For the first few advertisements (up to\n   MAX_INITIAL_RTR_ADVERTISEMENTS)\
    \ sent from an interface when it\n   becomes an advertising interface, if the\
    \ randomly chosen interval is\n   greater than MAX_INITIAL_RTR_ADVERT_INTERVAL,\
    \ the timer SHOULD be set\n   to MAX_INITIAL_RTR_ADVERT_INTERVAL instead.  Using\
    \ a smaller interval\n   for the initial advertisements increases the likelihood\
    \ of a router\n   being discovered quickly when it first becomes available, in\
    \ the\n   presence of possible packet loss.\n   The information contained in Router\
    \ Advertisements may change through\n   actions of system management.  For instance,\
    \ the lifetime of\n   advertised prefixes may change, new prefixes could be added,\
    \ a router\n   could cease to be a router (i.e., switch from being a router to\
    \ being\n   a host), etc.  In such cases, the router MAY transmit up to\n   MAX_INITIAL_RTR_ADVERTISEMENTS\
    \ unsolicited advertisements, using the\n   same rules as when an interface becomes\
    \ an advertising interface.\n"
- title: 6.2.5.  Ceasing To Be An Advertising Interface
  contents:
  - "6.2.5.  Ceasing To Be An Advertising Interface\n   An interface may cease to\
    \ be an advertising interface, through\n   actions of system management such as:\n\
    \   - changing the AdvSendAdvertisements flag of an enabled interface\n     from\
    \ TRUE to FALSE, or\n   - administratively disabling the interface, or\n   - shutting\
    \ down the system.\n   In such cases the router SHOULD transmit one or more (but\
    \ not more\n   than MAX_FINAL_RTR_ADVERTISEMENTS) final multicast Router\n   Advertisements\
    \ on the interface with a Router Lifetime field of zero.\n   In the case of a\
    \ router becoming a host, the system SHOULD also\n   depart from the all-routers\
    \ IP multicast group on all interfaces on\n   which the router supports IP multicast\
    \ (whether or not they had been\n   advertising interfaces).  In addition, the\
    \ host MUST insure that\n   subsequent Neighbor Advertisement messages sent from\
    \ the interface\n   have the Router flag set to zero.\n   Note that system management\
    \ may disable a router's IP forwarding\n   capability (i.e., changing the system\
    \ from being a router to being a\n   host), a step that does not necessarily imply\
    \ that the router's\n   interfaces stop being advertising interfaces.  In such\
    \ cases,\n   subsequent Router Advertisements MUST set the Router Lifetime field\n\
    \   to zero.\n"
- title: 6.2.6.  Processing Router Solicitations
  contents:
  - "6.2.6.  Processing Router Solicitations\n   A host MUST silently discard any\
    \ received Router Solicitation\n   messages.\n   In addition to sending periodic,\
    \ unsolicited advertisements, a router\n   sends advertisements in response to\
    \ valid solicitations received on\n   an advertising interface.  A router MAY\
    \ choose to unicast the\n   response directly to the soliciting host's address\
    \ (if the\n   solicitation's source address is not the unspecified address), but\n\
    \   the usual case is to multicast the response to the all-nodes group.\n   In\
    \ the latter case, the interface's interval timer is reset to a new\n   random\
    \ value, as if an unsolicited advertisement had just been sent\n   (see Section\
    \ 6.2.4).\n   In all cases, Router Advertisements sent in response to a Router\n\
    \   Solicitation MUST be delayed by a random time between 0 and\n   MAX_RA_DELAY_TIME\
    \ seconds. (If a single advertisement is sent in\n   response to multiple solicitations,\
    \ the delay is relative to the\n   first solicitation.)  In addition, consecutive\
    \ Router Advertisements\n   sent to the all-nodes multicast address MUST be rate\
    \ limited to no\n   more than one advertisement every MIN_DELAY_BETWEEN_RAS seconds.\n\
    \   A router might process Router Solicitations as follows:\n - Upon receipt of\
    \ a Router Solicitation, compute a random delay within\n   the range 0 through\
    \ MAX_RA_DELAY_TIME.  If the computed value\n   corresponds to a time later than\
    \ the time the next multicast Router\n   Advertisement is scheduled to be sent,\
    \ ignore the random delay and\n   send the advertisement at the already-scheduled\
    \ time.\n - If the router sent a multicast Router Advertisement (solicited or\n\
    \   unsolicited) within the last MIN_DELAY_BETWEEN_RAS seconds, schedule\n   the\
    \ advertisement to be sent at a time corresponding to\n   MIN_DELAY_BETWEEN_RAS\
    \ plus the random value after the previous\n   advertisement was sent.  This ensures\
    \ that the multicast Router\n   Advertisements are rate limited.\n - Otherwise,\
    \ schedule the sending of a Router Advertisement at the time\n   given by the\
    \ random value.\n   Note that a router is permitted to send multicast Router\n\
    \   Advertisements more frequently than indicated by the\n   MinRtrAdvInterval\
    \ configuration variable so long as the more frequent\n   advertisements are responses\
    \ to Router Solicitations.  In all cases,\n   however, unsolicited multicast advertisements\
    \ MUST NOT be sent more\n   frequently than indicated by MinRtrAdvInterval.\n\
    \   When a router receives a Router Solicitation and the Source Address\n   is\
    \ not the unspecified address, it records that the source of the\n   packet is\
    \ a neighbor by creating or updating the Neighbor Cache\n   entry.  If the solicitation\
    \ contains a Source Link-Layer Address\n   option, and the router has a Neighbor\
    \ Cache entry for the neighbor,\n   the link-layer address SHOULD be updated in\
    \ the Neighbor Cache.  If a\n   Neighbor Cache entry is created for the source\
    \ its reachability state\n   MUST be set to STALE as specified in Section 7.3.3.\
    \  If a cache entry\n   already exists and is updated with a different link-layer\
    \ address the\n   reachability state MUST also be set to STALE.  In either case\
    \ the\n   entry's IsRouter flag SHOULD be set to false.\n   If the Source Address\
    \ is the unspecified address the router MUST NOT\n   create or update the Neighbor\
    \ Cache entry.\n"
- title: 6.2.7.  Router Advertisement Consistency
  contents:
  - "6.2.7.  Router Advertisement Consistency\n   Routers SHOULD inspect valid Router\
    \ Advertisements sent by other\n   routers and verify that the routers are advertising\
    \ consistent\n   information on a link.  Detected inconsistencies indicate that\
    \ one or\n   more routers might be misconfigured and SHOULD be logged to system\
    \ or\n   network management.  The minimum set of information to check\n   includes:\n\
    \ - Cur Hop Limit values (except for the unspecified value of zero).\n - Values\
    \ of the M or O flags.\n - Reachable Time values (except for the unspecified value\
    \ of zero).\n - Retrans Timer values (except for the unspecified value of zero).\n\
    \ - Values in the MTU options.\n - Preferred and Valid Lifetimes for the same\
    \ prefix.\n   Note that it is not an error for different routers to advertise\n\
    \   different sets of prefixes.  Also, some routers might leave some\n   fields\
    \ as unspecified, i.e., with the value zero, while other routers\n   specify values.\
    \  The logging of errors SHOULD be restricted to\n   conflicting information that\
    \ causes hosts to switch from one value to\n   another with each received advertisement.\n\
    \   Any other action on reception of Router Advertisement messages by a\n   router\
    \ is beyond the scope of this document.\n"
- title: 6.2.8.  Link-local Address Change
  contents:
  - "6.2.8.  Link-local Address Change\n   The link-local address on a router SHOULD\
    \ change rarely, if ever.\n   Nodes receiving Neighbor Discovery messages use\
    \ the source address to\n   identify the sender.  If multiple packets from the\
    \ same router\n   contain different source addresses, nodes will assume they come\
    \ from\n   different routers, leading to undesirable behavior.  For example, a\n\
    \   node will ignore Redirect messages that are believed to have been\n   sent\
    \ by a router other than the current first-hop router.  Thus the\n   source address\
    \ used in Router Advertisements sent by a particular\n   router must be identical\
    \ to the target address in a Redirect message\n   when redirecting to that router.\n\
    \   Using the link-local address to uniquely identify routers on the link\n  \
    \ has the benefit that the address a router is known by should not\n   change\
    \ when a site renumbers.\n   If a router changes the link-local address for one\
    \ of its interfaces,\n   it SHOULD inform hosts of this change.  The router SHOULD\
    \ multicast a\n   few Router Advertisements from the old link-local address with\
    \ the\n   Router Lifetime field set to zero and also multicast a few Router\n\
    \   Advertisements from the new link-local address.  The overall effect\n   should\
    \ be the same as if one interface ceases being an advertising\n   interface, and\
    \ a different one starts being an advertising interface.\n"
- title: 6.3.  Host Specification
  contents:
  - '6.3.  Host Specification

    '
- title: 6.3.1.  Host Configuration Variables
  contents:
  - "6.3.1.  Host Configuration Variables\n   None.\n"
- title: 6.3.2.  Host Variables
  contents:
  - "6.3.2.  Host Variables\n   A host maintains certain Neighbor Discovery related\
    \ variables in\n   addition to the data structures defined in Section 5.1.  The\
    \ specific\n   variable names are used for demonstration purposes only, and an\n\
    \   implementation is not required to have them, so long as its external\n   behavior\
    \ is consistent with that described in this document.\n   These variables have\
    \ default values that are overridden by\n   information received in Router Advertisement\
    \ messages.  The default\n   values are used when there is no router on the link\
    \ or when all\n   received Router Advertisements have left a particular value\n\
    \   unspecified.\n   The default values in this specification may be overridden\
    \ by\n   specific documents that describe how IP operates over different link\n\
    \   layers.  This rule allows Neighbor Discovery to operate over links\n   with\
    \ widely varying performance characteristics.\n   For each interface:\n     LinkMTU\
    \        The MTU of the link.\n                    Default: The valued defined\
    \ in the specific document\n                    that describes how IPv6 operates\
    \ over the particular\n                    link layer (e.g., [IPv6-ETHER]).\n\
    \     CurHopLimit    The default hop limit to be used when sending\n         \
    \           (unicast) IP packets.\n                    Default: The value specified\
    \ in the \"Assigned\n                    Numbers\" RFC [ASSIGNED] that was in\
    \ effect at the\n                    time of implementation.\n     BaseReachableTime\n\
    \                    A base value used for computing the random\n            \
    \        ReachableTime value.\n                    Default: REACHABLE_TIME milliseconds.\n\
    \     ReachableTime  The time a neighbor is considered reachable after\n     \
    \               receiving a reachability confirmation.\n                    This\
    \ value should be a uniformly-distributed random\n                    value between\
    \ MIN_RANDOM_FACTOR and\n                    MAX_RANDOM_FACTOR times BaseReachableTime\n\
    \                    milliseconds.  A new random value should be\n           \
    \         calculated when BaseReachableTime changes (due to\n                \
    \    Router Advertisements) or at least every few hours\n                    even\
    \ if no Router Advertisements are received.\n     RetransTimer   The time between\
    \ retransmissions of Neighbor\n                    Solicitation messages to a\
    \ neighbor when resolving\n                    the address or when probing the\
    \ reachability of a\n                    neighbor.\n                    Default:\
    \ RETRANS_TIMER milliseconds\n"
- title: 6.3.3.  Interface Initialization
  contents:
  - "6.3.3.  Interface Initialization\n   The host joins the all-nodes multicast address\
    \ on all multicast-\n   capable interfaces.\n"
- title: 6.3.4.  Processing Received Router Advertisements
  contents:
  - "6.3.4.  Processing Received Router Advertisements\n   When multiple routers are\
    \ present, the information advertised\n   collectively by all routers may be a\
    \ superset of the information\n   contained in a single Router Advertisement.\
    \  Moreover, information\n   may also be obtained through other dynamic means,\
    \ such as stateful\n   autoconfiguration.  Hosts accept the union of all received\n\
    \   information; the receipt of a Router Advertisement MUST NOT\n   invalidate\
    \ all information received in a previous advertisement or\n   from another source.\
    \  However, when received information for a\n   specific parameter (e.g., Link\
    \ MTU) or option (e.g., Lifetime on a\n   specific Prefix) differs from information\
    \ received earlier, and the\n   parameter/option can only have one value, the\
    \ most recently-received\n   information is considered authoritative.\n   Some\
    \ Router Advertisement fields (e.g., Cur Hop Limit, Reachable Time\n   and Retrans\
    \ Timer) may contain a value denoting unspecified.  In such\n   cases, the parameter\
    \ should be ignored and the host should continue\n   using whatever value it is\
    \ already using.  In particular, a host MUST\n   NOT interpret the unspecified\
    \ value as meaning change back to the\n   default value that was in use before\
    \ the first Router Advertisement\n   was received.  This rule prevents hosts from\
    \ continually changing an\n   internal variable when one router advertises a specific\
    \ value, but\n   other routers advertise the unspecified value.\n   On receipt\
    \ of a valid Router Advertisement, a host extracts the\n   source address of the\
    \ packet and does the following:\n   - If the address is not already present in\
    \ the host's Default Router\n     List, and the advertisement's Router Lifetime\
    \ is non-zero, create a\n     new entry in the list, and initialize its invalidation\
    \ timer value\n     from the advertisement's Router Lifetime field.\n   - If the\
    \ address is already present in the host's Default Router List\n     as a result\
    \ of a previously-received advertisement, reset its\n     invalidation timer to\
    \ the Router Lifetime value in the newly-\n     received advertisement.\n   -\
    \ If the address is already present in the host's Default Router List\n     and\
    \ the received Router Lifetime value is zero, immediately time-\n     out the\
    \ entry as specified in Section 6.3.5.\n   To limit the storage needed for the\
    \ Default Router List, a host MAY\n   choose not to store all of the router addresses\
    \ discovered via\n   advertisements.  However, a host MUST retain at least two\
    \ router\n   addresses and SHOULD retain more.  Default router selections are\
    \ made\n   whenever communication to a destination appears to be failing.  Thus,\n\
    \   the more routers on the list, the more likely an alternative working\n   router\
    \ can be found quickly (e.g., without having to wait for the\n   next advertisement\
    \ to arrive).\n   If the received Cur Hop Limit value is non-zero the host SHOULD\
    \ set\n   its CurHopLimit variable to the received value.\n   If the received\
    \ Reachable Time value is non-zero the host SHOULD set\n   its BaseReachableTime\
    \ variable to the received value.  If the new\n   value differs from the previous\
    \ value, the host SHOULD recompute a\n   new random ReachableTime value.  ReachableTime\
    \ is computed as a\n   uniformly-distributed random value between MIN_RANDOM_FACTOR\
    \ and\n   MAX_RANDOM_FACTOR times the BaseReachableTime.  Using a random\n   component\
    \ eliminates the possibility Neighbor Unreachability\n   Detection messages synchronize\
    \ with each other.\n   In most cases, the advertised Reachable Time value will\
    \ be the same\n   in consecutive Router Advertisements and a host's BaseReachableTime\n\
    \   rarely changes.  In such cases, an implementation SHOULD insure that\n   a\
    \ new random value gets recomputed at least once every few hours.\n   The RetransTimer\
    \ variable SHOULD be copied from the Retrans Timer\n   field, if the received\
    \ value is non-zero.\n   After extracting information from the fixed part of the\
    \ Router\n   Advertisement message, the advertisement is scanned for valid\n \
    \  options.  If the advertisement contains a Source Link-Layer Address\n   option\
    \ the link-layer address SHOULD be recorded in the Neighbor\n   Cache entry for\
    \ the router (creating an entry if necessary) and the\n   IsRouter flag in the\
    \ Neighbor Cache entry MUST be set to true.  The\n   IsRouter flag is used by\
    \ Neighbor Unreachability Detection to\n   determine when a router changes to\
    \ being a host (i.e., no longer\n   capable of forwarding packets).  If a Neighbor\
    \ Cache entry is created\n   for the router its reachability state MUST be set\
    \ to STALE as\n   specified in Section 7.3.3.  If a cache entry already exists\
    \ and is\n   updated with a different link-layer address the reachability state\n\
    \   MUST also be set to STALE.\n   If the MTU option is present, hosts SHOULD\
    \ copy the option's value\n   into LinkMTU if the value does not exceed the default\
    \ LinkMTU value\n   specified in the link type specific document (e.g., [IPv6-ETHER]).\n\
    \   Prefix Information options that have the \"on-link\" (L) flag set\n   indicate\
    \ a prefix identifying a range of addresses that should be\n   considered on-link.\
    \  Note, however, that a Prefix Information option\n   with the on-link flag set\
    \ to zero conveys no information concerning\n   on-link determination and MUST\
    \ NOT be interpreted to mean that\n   addresses covered by the prefix are off-link.\
    \  The default behavior\n   (see Section 5.2) when no information is known about\
    \ an address is to\n   send the packets to a default router and the reception\
    \ of a Prefix\n   Information option with the \"on-link \" (L) flag set to zero\
    \ does not\n   change this behavior.  The reasons for an address being treated\
    \ as\n   on-link is specified in the definition of \"on-link\" in Section 2.1.\n\
    \   Prefixes with the on-link flag set to zero would normally have the\n   autonomous\
    \ flag set and be used by [ADDRCONF].\n   For each Prefix Information option with\
    \ the on-link flag set, a host\n   does the following:\n   - If the prefix is\
    \ the link-local prefix, silently ignore the Prefix\n     Information option.\n\
    \   - If the prefix is not already present in the Prefix List, and the\n     Prefix\
    \ Information option's Valid Lifetime field is non-zero,\n     create a new entry\
    \ for the prefix and initialize its invalidation\n     timer to the Valid Lifetime\
    \ value in the Prefix Information option.\n   - If the prefix is already present\
    \ in the host's Prefix List as the\n     result of a previously-received advertisement,\
    \ reset its\n     invalidation timer to the Valid Lifetime value in the Prefix\n\
    \     Information option.  If the new Lifetime value is zero, time-out\n     the\
    \ prefix immediately (see Section 6.3.5).\n   - If the Prefix Information option's\
    \ Valid Lifetime field is zero,\n     and the prefix is not present in the host's\
    \ Prefix List, silently\n     ignore the option.\n   Note: Implementations can\
    \ choose to process the on-link aspects of\n   the prefixes separately from the\
    \ address autoconfiguration aspects of\n   the prefixes by, e.g., passing a copy\
    \ of each valid Router\n   Advertisement message to both an \"on-link\" and an\
    \ \"addrconf\"\n   function.  Each function can then operate independently on\
    \ the\n   prefixes that have the appropriate flag set.\n"
- title: 6.3.5.  Timing out Prefixes and Default Routers
  contents:
  - "6.3.5.  Timing out Prefixes and Default Routers\n   Whenever the invalidation\
    \ timer expires for a Prefix List entry, that\n   entry is discarded.  No existing\
    \ Destination Cache entries need be\n   updated, however.  Should a reachability\
    \ problem arise with an\n   existing Neighbor Cache entry, Neighbor Unreachability\
    \ Detection will\n   perform any needed recovery.\n   Whenever the Lifetime of\
    \ an entry in the Default Router List expires,\n   that entry is discarded.  When\
    \ removing a router from the Default\n   Router list, the node MUST update the\
    \ Destination Cache in such a way\n   that all entries using the router perform\
    \ next-hop determination\n   again rather than continue sending traffic to the\
    \ (deleted) router.\n"
- title: 6.3.6.  Default Router Selection
  contents:
  - "6.3.6.  Default Router Selection\n   The algorithm for selecting a router depends\
    \ in part on whether or\n   not a router is known to be reachable.  The exact\
    \ details of how a\n   node keeps track of a neighbor's reachability state are\
    \ covered in\n   Section 7.3.  The algorithm for selecting a default router is\
    \ invoked\n   during next-hop determination when no Destination Cache entry exists\n\
    \   for an off-link destination or when communication through an existing\n  \
    \ router appears to be failing.  Under normal conditions, a router\n   would be\
    \ selected the first time traffic is sent to a destination,\n   with subsequent\
    \ traffic for that destination using the same router as\n   indicated in the Destination\
    \ Cache modulo any changes to the\n   Destination Cache caused by Redirect messages.\n\
    \   The policy for selecting routers from the Default Router List is as\n   follows:\n\
    \  1) Routers that are reachable or probably reachable (i.e., in any\n     state\
    \ other than INCOMPLETE) SHOULD be preferred over routers whose\n     reachability\
    \ is unknown or suspect (i.e., in the INCOMPLETE state,\n     or for which no\
    \ Neighbor Cache entry exists).  An implementation\n     may choose to always\
    \ return the same router or cycle through the\n     router list in a round-robin\
    \ fashion as long as it always returns a\n     reachable or a probably reachable\
    \ router when one is available.\n  2) When no routers on the list are known to\
    \ be reachable or probably\n     reachable, routers SHOULD be selected in a round-robin\
    \ fashion, so\n     that subsequent requests for a default router do not return\
    \ the\n     same router until all other routers have been selected.\n     Cycling\
    \ through the router list in this case ensures that all\n     available routers\
    \ are actively probed by the Neighbor\n     Unreachability Detection algorithm.\
    \  A request for a default router\n     is made in conjunction with the sending\
    \ of a packet to a router,\n     and the selected router will be probed for reachability\
    \ as a side\n     effect.\n  3) If the Default Router List is empty, assume that\
    \ all destinations\n     are on-link as specified in Section 5.2.\n"
- title: 6.3.7.  Sending Router Solicitations
  contents:
  - "6.3.7.  Sending Router Solicitations\n   When an interface becomes enabled, a\
    \ host may be unwilling to wait\n   for the next unsolicited Router Advertisement\
    \ to locate default\n   routers or learn prefixes.  To obtain Router Advertisements\
    \ quickly,\n   a host SHOULD transmit up to MAX_RTR_SOLICITATIONS Router\n   Solicitation\
    \ messages each separated by at least\n   RTR_SOLICITATION_INTERVAL seconds. \
    \ Router Solicitations may be sent\n   after any of the following events:\n  \
    \ - The interface is initialized at system startup time.\n   - The interface is\
    \ reinitialized after a temporary interface failure\n     or after being temporarily\
    \ disabled by system management.\n   - The system changes from being a router\
    \ to being a host, by having\n     its IP forwarding capability turned off by\
    \ system management.\n   - The host attaches to a link for the first time.\n \
    \  - The host re-attaches to a link after being detached for some time.\n   A\
    \ host sends Router Solicitations to the all-routers multicast\n   address.  The\
    \ IP source address is set to either one of the\n   interface's unicast addresses\
    \ or the unspecified address.  The Source\n   Link-Layer Address option SHOULD\
    \ be set to the host's link-layer\n   address, if the IP source address is a unicast\
    \ address.\n   Before a host sends an initial solicitation, it SHOULD delay the\n\
    \   transmission for a random amount of time between 0 and\n   MAX_RTR_SOLICITATION_DELAY.\
    \  This serves to alleviate congestion when\n   many hosts start up on a link\
    \ at the same time, such as might happen\n   after recovery from a power failure.\
    \  If a host has already performed\n   a random delay since the interface became\
    \ (re)enabled (e.g., as part\n   of Duplicate Address Detection [ADDRCONF]) there\
    \ is no need to delay\n   again before sending the first Router Solicitation message.\n\
    \   Once the host sends a Router Solicitation, and receives a valid\n   Router\
    \ Advertisement with a non-zero Router Lifetime, the host MUST\n   desist from\
    \ sending additional solicitations on that interface, until\n   the next time\
    \ one of the above events occurs.  Moreover, a host\n   SHOULD send at least one\
    \ solicitation in the case where an\n   advertisement is received prior to having\
    \ sent a solicitation.\n   Unsolicited Router Advertisements may be incomplete\
    \ (see Section\n   6.2.3); solicited advertisements are expected to contain complete\n\
    \   information.\n   If a host sends MAX_RTR_SOLICITATIONS solicitations, and\
    \ receives no\n   Router Advertisements after having waited MAX_RTR_SOLICITATION_DELAY\n\
    \   seconds after sending the last solicitation, the host concludes that\n   there\
    \ are no routers on the link for the purpose of [ADDRCONF].\n   However, the host\
    \ continues to receive and process Router\n   Advertisements messages in the event\
    \ that routers appear on the link.\n"
- title: 7.  ADDRESS RESOLUTION AND NEIGHBOR UNREACHABILITY DETECTION
  contents:
  - "7.  ADDRESS RESOLUTION AND NEIGHBOR UNREACHABILITY DETECTION\n   This section\
    \ describes the functions related to Neighbor Solicitation\n   and Neighbor Advertisement\
    \ messages and includes descriptions of\n   address resolution and the Neighbor\
    \ Unreachability Detection\n   algorithm.\n   Neighbor Solicitation and Advertisement\
    \ messages are also used for\n   Duplicate Address Detection as specified by [ADDRCONF].\
    \  In\n   particular, Duplicate Address Detection sends Neighbor Solicitation\n\
    \   messages with an unspecified source address targeting its own\n   \"tentative\"\
    \ address.  Such messages trigger nodes already using the\n   address to respond\
    \ with a multicast Neighbor Advertisement indicating\n   that the address is in\
    \ use.\n"
- title: 7.1.  Message Validation
  contents:
  - '7.1.  Message Validation

    '
- title: 7.1.1.  Validation of Neighbor Solicitations
  contents:
  - "7.1.1.  Validation of Neighbor Solicitations\n   A node MUST silently discard\
    \ any received Neighbor Solicitation\n   messages that do not satisfy all of the\
    \ following validity checks:\n   - The IP Hop Limit field has a value of 255,\
    \ i.e., the packet could\n     not possibly have been forwarded by a router.\n\
    \   - If the message includes an IP Authentication Header, the message\n     authenticates\
    \ correctly.\n   - ICMP Checksum is valid.\n   - ICMP Code is 0.\n   - ICMP length\
    \ (derived from the IP length) is 24 or more octets.\n   - Target Address is not\
    \ a multicast address.\n   - All included options have a length that is greater\
    \ than zero.\n   The contents of the Reserved field, and of any unrecognized options,\n\
    \   MUST be ignored.  Future, backward-compatible changes to the protocol\n  \
    \ may specify the contents of the Reserved field or add new options;\n   backward-incompatible\
    \ changes may use different Code values.\n   The contents of any defined options\
    \ that are not specified to be used\n   with Neighbor Solicitation messages MUST\
    \ be ignored and the packet\n   processed as normal.  The only defined option\
    \ that may appear is the\n   Source Link-Layer Address option.\n   A Neighbor\
    \ Solicitation that passes the validity checks is called a\n   \"valid solicitation\"\
    .\n"
- title: 7.1.2.  Validation of Neighbor Advertisements
  contents:
  - "7.1.2.  Validation of Neighbor Advertisements\n   A node MUST silently discard\
    \ any received Neighbor Advertisement\n   messages that do not satisfy all of\
    \ the following validity checks:\n   - The IP Hop Limit field has a value of 255,\
    \ i.e., the packet could\n     not possibly have been forwarded by a router.\n\
    \   - If the message includes an IP Authentication Header, the message\n     authenticates\
    \ correctly.\n   - ICMP Checksum is valid.\n   - ICMP Code is 0.\n   - ICMP length\
    \ (derived from the IP length) is 24 or more octets.\n   - Target Address is not\
    \ a multicast address.\n   - If the IP Destination Address is a multicast address\
    \ the Solicited\n     flag is zero.\n   - All included options have a length that\
    \ is greater than zero.\n   The contents of the Reserved field, and of any unrecognized\
    \ options,\n   MUST be ignored.  Future, backward-compatible changes to the protocol\n\
    \   may specify the contents of the Reserved field or add new options;\n   backward-incompatible\
    \ changes may use different Code values.\n   The contents of any defined options\
    \ that are not specified to be used\n   with Neighbor Advertisement messages MUST\
    \ be ignored and the packet\n   processed as normal.  The only defined option\
    \ that may appear is the\n   Target Link-Layer Address option.\n   A Neighbor\
    \ Advertisements that passes the validity checks is called a\n   \"valid advertisement\"\
    .\n"
- title: 7.2.  Address Resolution
  contents:
  - "7.2.  Address Resolution\n   Address resolution is the process through which\
    \ a node determines the\n   link-layer address of a neighbor given only its IP\
    \ address.  Address\n   resolution is performed only on addresses that are determined\
    \ to be\n   on-link and for which the sender does not know the corresponding\n\
    \   link-layer address.  Address resolution is never performed on\n   multicast\
    \ addresses.\n"
- title: 7.2.1.  Interface Initialization
  contents:
  - "7.2.1.  Interface Initialization\n   When a multicast-capable interface becomes\
    \ enabled the node MUST join\n   the all-nodes multicast address on that interface,\
    \ as well as the\n   solicited-node multicast address corresponding to each of\
    \ the IP\n   addresses assigned to the interface.\n   The set of addresses assigned\
    \ to an interface may change over time.\n   New addresses might be added and old\
    \ addresses might be removed\n   [ADDRCONF].  In such cases the node MUST join\
    \ and leave the\n   solicited-node multicast address corresponding to the new\
    \ and old\n   addresses, respectively.  Note that multiple unicast addresses may\n\
    \   map into the same solicited-node multicast address; a node MUST NOT\n   leave\
    \ the solicited-node multicast group until all assigned addresses\n   corresponding\
    \ to that multicast address have been removed.\n"
- title: 7.2.2.  Sending Neighbor Solicitations
  contents:
  - "7.2.2.  Sending Neighbor Solicitations\n   When a node has a unicast packet to\
    \ send to a neighbor, but does not\n   know the neighbor's link-layer address,\
    \ it performs address\n   resolution.  For multicast-capable interfaces this entails\
    \ creating a\n   Neighbor Cache entry in the INCOMPLETE state and transmitting\
    \ a\n   Neighbor Solicitation message targeted at the neighbor.  The\n   solicitation\
    \ is sent to the solicited-node multicast address\n   corresponding to the target\
    \ address.\n   If the source address of the packet prompting the solicitation\
    \ is the\n   same as one of the addresses assigned to the outgoing interface,\
    \ that\n   address SHOULD be placed in the IP Source Address of the outgoing\n\
    \   solicitation.  Otherwise, any one of the addresses assigned to the\n   interface\
    \ should be used.  Using the prompting packet's source\n   address when possible\
    \ insures that the recipient of the Neighbor\n   Solicitation installs in its\
    \ Neighbor Cache the IP address that is\n   highly likely to be used in subsequent\
    \ return traffic belonging to\n   the prompting packet's \"connection\".\n   If\
    \ the solicitation is being sent to a solicited-node multicast\n   address, the\
    \ sender MUST include its link-layer address (if it has\n   one) as a Source Link-Layer\
    \ Address option.  Otherwise, the sender\n   SHOULD include its link-layer address\
    \ (if it has one) as a Source\n   Link-Layer Address option.  Including the source\
    \ link-layer address\n   in a multicast solicitation is required to give the target\
    \ an address\n   to which it can send the Neighbor Advertisement.\n   While waiting\
    \ for address resolution to complete, the sender MUST,\n   for each neighbor,\
    \ retain a small queue of packets waiting for\n   address resolution to complete.\
    \  The queue MUST hold at least one\n   packet, and MAY contain more.  However,\
    \ the number of queued packets\n   per neighbor SHOULD be limited to some small\
    \ value.  When a queue\n   overflows, the new arrival SHOULD replace the oldest\
    \ entry.  Once\n   address resolution completes, the node transmits any queued\
    \ packets.\n   While awaiting a response, the sender SHOULD retransmit Neighbor\n\
    \   Solicitation messages approximately every RetransTimer milliseconds,\n   even\
    \ in the absence of additional traffic to the neighbor.\n   Retransmissions MUST\
    \ be rate-limited to at most one solicitation per\n   neighbor every RetransTimer\
    \ milliseconds.\n   If no Neighbor Advertisement is received after MAX_MULTICAST_SOLICIT\n\
    \   solicitations, address resolution has failed.  The sender MUST return\n  \
    \ ICMP destination unreachable indications with code 3 (Address\n   Unreachable)\
    \ for each packet queued awaiting address resolution.\n"
- title: 7.2.3.  Receipt of Neighbor Solicitations
  contents:
  - "7.2.3.  Receipt of Neighbor Solicitations\n   A valid Neighbor Solicitation where\
    \ the Target Address is not a\n   unicast or anycast address assigned to the receiving\
    \ interface, and\n   the Target Address is not a \"tentative\" address on which\
    \ Duplicate\n   Address Detection is being performed [ADDRCONF] MUST be silently\n\
    \   ignored.  If the Target Address is tentative, the Neighbor\n   Solicitation\
    \ should be processed as described in [ADDRCONF].\n   Upon receipt of a valid\
    \ Neighbor Solicitation targeted at the node,\n   the recipient SHOULD update\
    \ the Neighbor Cache entry for the IP\n   Source Address of the solicitation if\
    \ the Source Address is not the\n   unspecified address.  If an entry does not\
    \ already exist, the node\n   SHOULD create a new one and set its reachability\
    \ state to STALE as\n   specified in Section 7.3.3.  If a cache entry already\
    \ exists and is\n   updated with a different link-layer address its reachability\
    \ state\n   MUST be set to STALE.  If the solicitation contains a Source Link-\n\
    \   Layer Address option, the entry's cached link-layer address should be\n  \
    \ replaced with the one in the solicitation.\n   If the Source Address is the\
    \ unspecified address the node MUST NOT\n   create or update the Neighbor Cache\
    \ entry.\n   After any updates to the Neighbor Cache, the node sends a Neighbor\n\
    \   Advertisement response as described in the next section.\n"
- title: 7.2.4.  Sending Solicited Neighbor Advertisements
  contents:
  - "7.2.4.  Sending Solicited Neighbor Advertisements\n   A node sends a Neighbor\
    \ Advertisement in response to a valid Neighbor\n   Solicitation targeting one\
    \ of the node's assigned addresses.  The\n   Target Address of the advertisement\
    \ is copied from the Target Address\n   of the solicitation.  If the solicitation's\
    \ IP Destination Address is\n   a unicast or anycast address, the Target Link-Layer\
    \ Address option\n   SHOULD NOT be included; the neighboring node's cached value\
    \ must\n   already be current in order for the solicitation to have been\n   received.\
    \  If the solicitation's IP Destination Address is a\n   solicited-node multicast\
    \ address, the Target Link-Layer option MUST\n   be included in the advertisement.\
    \  If the node is a router, it MUST\n   set the Router flag to one; otherwise\
    \ it MUST set the flag to zero.\n   If the Target Address is either an anycast\
    \ address or a unicast\n   address for which the node is providing proxy service,\
    \ or the Target\n   Link-Layer Address option is not included in the outgoing\n\
    \   advertisement, the Override flag SHOULD be set to zero.  Otherwise,\n   it\
    \ SHOULD be set to one.  Proper setting of the Override flag insures\n   that\
    \ nodes give preference to non-proxy advertisements, even when\n   received after\
    \ proxy advertisements, but that the first advertisement\n   for an anycast address\
    \ \"wins\".\n   If the source of the solicitation is the unspecified address,\
    \ the\n   node MUST set the Solicited flag to zero and multicast the\n   advertisement\
    \ to the all-nodes address.  Otherwise, the node MUST set\n   the Solicited flag\
    \ to one and unicast the advertisement to the Source\n   Address of the solicitation.\n\
    \   If the Target Address is an anycast address the sender SHOULD delay\n   sending\
    \ a response for a random time between 0 and\n   MAX_ANYCAST_DELAY_TIME seconds.\n"
- title: 7.2.5.  Receipt of Neighbor Advertisements
  contents:
  - "7.2.5.  Receipt of Neighbor Advertisements\n   When a valid Neighbor Advertisement\
    \ is received (either solicited or\n   unsolicited), the Neighbor Cache is searched\
    \ for the target's entry.\n   If no entry exists, the advertisement SHOULD be\
    \ silently discarded.\n   There is no need to create an entry in this case, since\
    \ the recipient\n   has apparently not initiated any communication with the target.\n\
    \   Once the appropriate Neighbor Cache entry has been located, the\n   specific\
    \ actions taken depend on the state of the Neighbor Cache\n   entry and the flags\
    \ in the advertisement.  If the entry is in an\n   INCOMPLETE state (i.e., no\
    \ link-layer address is cached for the\n   target) the received advertisement\
    \ updates the entry.  If a cached\n   link-layer address is already present, however,\
    \ a node might choose\n   to ignore the received advertisement and continue using\
    \ the cached\n   link-layer address.\n   If the target's Neighbor Cache entry\
    \ is in the INCOMPLETE state, the\n   receiving node records the link-layer address\
    \ in the Neighbor Cache\n   entry and sends any packets queued for the neighbor\
    \ awaiting address\n   resolution.  If the Solicited flag is set, the reachability\
    \ state for\n   the neighbor MUST be set to REACHABLE; otherwise it MUST be set\
    \ to\n   STALE. (A more detailed explanation of reachability state is\n   described\
    \ in Section 7.3.3).  The Override flag is ignored if the\n   entry is in the\
    \ INCOMPLETE state.\n   If the target's Neighbor Cache entry is in any state other\
    \ than\n   INCOMPLETE when the advertisement is received, the advertisement's\n\
    \   Override flag's setting determines whether the Target Link-Layer\n   Address\
    \ option (if present) replaces the cached address.  If the\n   Override flag is\
    \ set, the receiving node MUST install the link-layer\n   address in its cache;\
    \ if the flag is zero, the receiving node MUST\n   NOT install the link-layer\
    \ address in its cache.  An advertisement's\n   sender sets the Override flag\
    \ when it wants its Target Link-Layer\n   Address option to replace the cached\
    \ value in Neighbor Cache entries,\n   regardless of their current contents.\n\
    \   If the target's Neighbor Cache entry is in any state other than\n   INCOMPLETE\
    \ when the advertisement is received, the advertisement's\n   Solicited flag setting\
    \ determines what the entry's new state should\n   be.  If the Solicited flag\
    \ is set, the entry's state MUST be set to\n   REACHABLE; if the flag is zero,\
    \ the entry's state MUST be set to\n   STALE.  An advertisement's Solicited flag\
    \ should only be set if the\n   advertisement is a response to a Neighbor Solicitation.\
    \  Because\n   Neighbor Unreachability Solicitations are sent to the cached link-\n\
    \   layer address, a receipt of a solicited advertisement indicates that\n   the\
    \ forward path is working.  Receipt of an unsolicited\n   advertisement, however,\
    \ suggests that a neighbor has urgent\n   information to announce (e.g., a changed\
    \ link-layer address).\n   Regardless of whether or not the new link-layer address\
    \ is installed\n   in the cache, a node should verify the reachability of the\
    \ path it is\n   currently using when it sends the next packet, so that it quickly\n\
    \   finds a working path if the existing path has failed (e.g., as would\n   be\
    \ the case if the unsolicited Neighbor Advertisement is sent to\n   announce a\
    \ link-layer address change).\n   In those cases where the cached link-layer address\
    \ is updated, the\n   receiving node MUST examine the Router flag in the received\n\
    \   advertisement and update the IsRouter flag in the Neighbor Cache\n   entry\
    \ to reflect whether the node is a host or router.  In those\n   cases where the\
    \ neighbor was previously used as a router, but the\n   advertisement's Router\
    \ flag is now set to zero, the node MUST remove\n   that router from the Default\
    \ Router List and update the Destination\n   Cache entries for all destinations\
    \ using that neighbor as a router as\n   specified in Section 7.3.3.\n"
- title: 7.2.6.  Sending Unsolicited Neighbor Advertisements
  contents:
  - "7.2.6.  Sending Unsolicited Neighbor Advertisements\n   In some cases a node\
    \ may be able to determine that its link-layer\n   address has changed (e.g.,\
    \ hot-swap of an interface card) and may\n   wish to inform its neighbors of the\
    \ new link-layer address quickly.\n   In such cases a node MAY send up to MAX_NEIGHBOR_ADVERTISEMENT\n\
    \   unsolicited Neighbor Advertisement messages to the all-nodes\n   multicast\
    \ address.  These advertisements MUST be separated by at\n   least RetransTimer\
    \ seconds.\n   The Target Address field in the unsolicited advertisement is set\
    \ to\n   an IP address of the interface, and the Target Link-Layer Address\n \
    \  option is filled with the new link-layer address.  The Solicited flag\n   MUST\
    \ be set to zero, in order to avoid confusing the Neighbor\n   Unreachability\
    \ Detection algorithm.  If the node is a router, it MUST\n   set the Router flag\
    \ to one; otherwise it MUST set it to zero.  The\n   Override flag MAY be set\
    \ to either zero or one.  In either case,\n   neighboring nodes will immediately\
    \ change the state of their Neighbor\n   Cache entries for the Target Address\
    \ to STALE, prompting them to\n   verify the path for reachability.  If the Override\
    \ flag is set to\n   one, neighboring nodes will install the new link-layer address\
    \ in\n   their caches.  Otherwise, they will ignore the new link-layer\n   address,\
    \ choosing instead to probe the cached address.\n   A node that has multiple IP\
    \ addresses assigned to an interface MAY\n   multicast a separate Neighbor Advertisement\
    \ for each address.  In\n   such a case the node SHOULD introduce a small delay\
    \ between the\n   sending of each advertisement to reduce the probability of the\n\
    \   advertisements being lost due to congestion.\n   A proxy MAY multicast Neighbor\
    \ Advertisements when its link-layer\n   address changes or when it is configured\
    \ (by system management or\n   other mechanisms) to proxy for an address.  If\
    \ there are multiple\n   nodes that are providing proxy services for the same\
    \ set of addresses\n   the proxies SHOULD provide a mechanism that prevents multiple\
    \ proxies\n   from multicasting advertisements for any one address, in order to\n\
    \   reduce the risk of excessive multicast traffic.\n   Also, a node belonging\
    \ to an anycast address MAY multicast\n   unsolicited Neighbor Advertisements\
    \ for the anycast address when the\n   node's link- layer address changes.\n \
    \  Note that because unsolicited Neighbor Advertisements do not reliably\n   update\
    \ caches in all nodes (the advertisements might not be received\n   by all nodes),\
    \ they should only be viewed as a performance\n   optimization to quickly update\
    \ the caches in most neighbors.  The\n   Neighbor Unreachability Detection algorithm\
    \ ensures that all nodes\n   obtain a reachable link-layer address, though the\
    \ delay may be\n   slightly longer.\n"
- title: 7.2.7.  Anycast Neighbor Advertisements
  contents:
  - "7.2.7.  Anycast Neighbor Advertisements\n   From the perspective of Neighbor\
    \ Discovery, anycast addresses are\n   treated just like unicast addresses in\
    \ most cases.  Because an\n   anycast address is syntactically the same as a unicast\
    \ address, nodes\n   performing address resolution or Neighbor Unreachability\
    \ Detection on\n   an anycast address treat it as if it were a unicast address.\
    \  No\n   special processing takes place.\n   Nodes that have an anycast address\
    \ assigned to an interface treat\n   them exactly the same as if they were unicast\
    \ addresses with two\n   exceptions.  First, Neighbor Advertisements sent in response\
    \ to a\n   Neighbor Solicitation SHOULD be delayed by a random time between 0\n\
    \   and MAX_ANYCAST_DELAY_TIME to reduce the probability of network\n   congestion.\
    \  Second, the Override flag in Neighbor Advertisements\n   SHOULD be set to 0,\
    \ so that when multiple advertisements are\n   received, the first received advertisement\
    \ is used rather than the\n   most recently received advertisement.\n   As with\
    \ unicast addresses, Neighbor Unreachability Detection ensures\n   that a node\
    \ quickly detects when the current binding for an anycast\n   address becomes\
    \ invalid.\n"
- title: 7.2.8.  Proxy Neighbor Advertisements
  contents:
  - "7.2.8.  Proxy Neighbor Advertisements\n   Under limited circumstances, a router\
    \ MAY proxy for one or more other\n   nodes, that is, through Neighbor Advertisements\
    \ indicate that it is\n   willing to accept packets not explicitly addressed to\
    \ itself.  For\n   example, a router might accept packets on behalf of a mobile\
    \ node\n   that has moved off-link.  The mechanisms used by proxy are identical\n\
    \   to the mechanisms used with anycast addresses.\n   A proxy MUST join the solicited-node\
    \ multicast address(es) that\n   correspond to the IP address(es) assigned to\
    \ the node for which it is\n   proxying.\n   All solicited proxy Neighbor Advertisement\
    \ messages MUST have the\n   Override flag set to zero.  This ensures that if\
    \ the node itself is\n   present on the link its Neighbor Advertisement (with\
    \ the Override\n   flag set to one) will take precedence of any advertisement\
    \ received\n   from a proxy.  A proxy MAY send unsolicited advertisements with\
    \ the\n   Override flag set to one as specified in Section 7.2.6, but doing so\n\
    \   may cause the proxy advertisement to override a valid entry created\n   by\
    \ the node itself.\n   Finally, when sending a proxy advertisement in response\
    \ to a Neighbor\n   Solicitation, the sender should delay its response by a random\
    \ time\n   between 0 and MAX_ANYCAST_DELAY_TIME seconds.\n"
- title: 7.3.  Neighbor Unreachability Detection
  contents:
  - "7.3.  Neighbor Unreachability Detection\n   Communication to or through a neighbor\
    \ may fail for numerous reasons\n   at any time, including hardware failure, hot-swap\
    \ of an interface\n   card, etc.  If the destination has failed, no recovery is\
    \ possible\n   and communication fails.  On the other hand, if it is the path\
    \ that\n   has failed, recovery may be possible.  Thus, a node actively tracks\n\
    \   the reachability \"state\" for the neighbors to which it is sending\n   packets.\n\
    \   Neighbor Unreachability Detection is used for all paths between hosts\n  \
    \ and neighboring nodes, including host-to-host, host-to-router, and\n   router-to-host\
    \ communication.  Neighbor Unreachability Detection may\n   also be used between\
    \ routers, but is not required if an equivalent\n   mechanism is available, for\
    \ example, as part of the routing\n   protocols.\n   When a path to a neighbor\
    \ appears to be failing, the specific\n   recovery procedure depends on how the\
    \ neighbor is being used.  If the\n   neighbor is the ultimate destination, for\
    \ example, address resolution\n   should be performed again.  If the neighbor\
    \ is a router, however,\n   attempting to switch to another router would be appropriate.\
    \  The\n   specific recovery that takes place is covered under next-hop\n   determination;\
    \ Neighbor Unreachability Detection signals the need for\n   next-hop determination\
    \ by deleting a Neighbor Cache entry.\n   Neighbor Unreachability Detection is\
    \ performed only for neighbors to\n   which unicast packets are sent; it is not\
    \ used when sending to\n   multicast addresses.\n"
- title: 7.3.1.  Reachability Confirmation
  contents:
  - "7.3.1.  Reachability Confirmation\n   A neighbor is considered reachable if the\
    \ node has recently received\n   a confirmation that packets sent recently to\
    \ the neighbor were\n   received by its IP layer.  Positive confirmation can be\
    \ gathered in\n   two ways: hints from upper layer protocols that indicate a connection\n\
    \   is making \"forward progress\", or receipt of a Neighbor Advertisement\n \
    \  message that is a response to a Neighbor Solicitation message.\n   A connection\
    \ makes \"forward progress\" if the packets received from a\n   remote peer can\
    \ only be arriving if recent packets sent to that peer\n   are actually reaching\
    \ it.  In TCP, for example, receipt of a (new)\n   acknowledgement indicates that\
    \ previously sent data reached the peer.\n   Likewise, the arrival of new (non-duplicate)\
    \ data indicates that\n   earlier acknowledgements are being delivered to the\
    \ remote peer.  If\n   packets are reaching the peer, they must also be reaching\
    \ the\n   sender's next-hop neighbor; thus \"forward progress\" is a confirmation\n\
    \   that the next-hop neighbor is reachable.  For off-link destinations,\n   forward\
    \ progress implies that the first-hop router is reachable.\n   When available,\
    \ this upper-layer information SHOULD be used.\n   In some cases (e.g., UDP-based\
    \ protocols and routers forwarding\n   packets to hosts) such reachability information\
    \ may not be readily\n   available from upper-layer protocols.  When no hints\
    \ are available\n   and a node is sending packets to a neighbor, the node actively\
    \ probes\n   the neighbor using unicast Neighbor Solicitation messages to verify\n\
    \   that the forward path is still working.\n   The receipt of a solicited Neighbor\
    \ Advertisement serves as\n   reachability confirmation, since advertisements\
    \ with the Solicited\n   flag set to one are sent only in response to a Neighbor\
    \ Solicitation.\n   Receipt of other Neighbor Discovery messages such as Router\n\
    \   Advertisements and Neighbor Advertisement with the Solicited flag set\n  \
    \ to zero MUST NOT be treated as a reachability confirmation.  Receipt\n   of\
    \ unsolicited messages only confirm the one-way path from the sender\n   to the\
    \ recipient node.  In contrast, Neighbor Unreachability\n   Detection requires\
    \ that a node keep track of the reachability of the\n   forward path to a neighbor\
    \ from the its perspective, not the\n   neighbor's perspective.  Note that receipt\
    \ of a solicited\n   advertisement indicates that a path is working in both directions.\n\
    \   The solicitation must have reached the neighbor, prompting it to\n   generate\
    \ an advertisement.  Likewise, receipt of an advertisement\n   indicates that\
    \ the path from the sender to the recipient is working.\n   However, the latter\
    \ fact is known only to the recipient; the\n   advertisement's sender has no direct\
    \ way of knowing that the\n   advertisement it sent actually reached a neighbor.\
    \  From the\n   perspective of Neighbor Unreachability Detection, only the\n \
    \  reachability of the forward path is of interest.\n"
- title: 7.3.2.  Neighbor Cache Entry States
  contents:
  - "7.3.2.  Neighbor Cache Entry States\n   A Neighbor Cache entry can be in one\
    \ of five states:\n   INCOMPLETE  Address resolution is being performed on the\
    \ entry.\n               Specifically, a Neighbor Solicitation has been sent to\n\
    \               the solicited-node multicast address of the target, but\n    \
    \           the corresponding Neighbor Advertisement has not yet been\n      \
    \         received.\n   REACHABLE   Positive confirmation was received within\
    \ the last\n               ReachableTime milliseconds that the forward path to\
    \ the\n               neighbor was functioning properly.  While REACHABLE, no\n\
    \               special action takes place as packets are sent.\n   STALE    \
    \   More than ReachableTime milliseconds have elapsed since\n               the\
    \ last positive confirmation was received that the\n               forward path\
    \ was functioning properly.  While stale, no\n               action takes place\
    \ until a packet is sent.\n               The STALE state is entered upon receiving\
    \ an unsolicited\n               Neighbor Discovery message that updates the cached\
    \ link-\n               layer address.  Receipt of such a message does not\n \
    \              confirm reachability, and entering the STALE state\n          \
    \     insures reachability is verified quickly if the entry is\n             \
    \  actually being used.  However, reachability is not\n               actually\
    \ verified until the entry is actually used.\n   DELAY       More than ReachableTime\
    \ milliseconds have elapsed since\n               the last positive confirmation\
    \ was received that the\n               forward path was functioning properly,\
    \ and a packet was\n               sent within the last DELAY_FIRST_PROBE_TIME\
    \ seconds.  If\n               no reachability confirmation is received within\n\
    \               DELAY_FIRST_PROBE_TIME seconds of entering the DELAY\n       \
    \        state, send a Neighbor Solicitation and change the state\n          \
    \     to PROBE.\n               The DELAY state is an optimization that gives\
    \ upper-layer\n               protocols additional time to provide reachability\n\
    \               confirmation in those cases where ReachableTime\n            \
    \   milliseconds have passed since the last confirmation due\n               to\
    \ lack of recent traffic.  Without this optimization the\n               opening\
    \ of a TCP connection after a traffic lull would\n               initiate probes\
    \ even though the subsequent three-way\n               handshake would provide\
    \ a reachability confirmation\n               almost immediately.\n   PROBE  \
    \     A reachability confirmation is actively sought by\n               retransmitting\
    \ Neighbor Solicitations every RetransTimer\n               milliseconds until\
    \ a reachability confirmation is\n               received.\n"
- title: 7.3.3.  Node Behavior
  contents:
  - "7.3.3.  Node Behavior\n   Neighbor Unreachability Detection operates in parallel\
    \ with the\n   sending of packets to a neighbor.  While reasserting a neighbor's\n\
    \   reachability, a node continues sending packets to that neighbor using\n  \
    \ the cached link-layer address.  If no traffic is sent to a neighbor,\n   no\
    \ probes are sent.\n   When a node needs to perform address resolution on a neighboring\n\
    \   address, it creates an entry in the INCOMPLETE state and initiates\n   address\
    \ resolution as specified in Section 7.2.  If address\n   resolution fails, the\
    \ entry SHOULD be deleted, so that subsequent\n   traffic to that neighbor invokes\
    \ the next-hop determination procedure\n   again.  Invoking next-hop determination\
    \ at this point insures that\n   alternate default routers are tried.\n   When\
    \ a reachability confirmation is received (either through upper-\n   layer advice\
    \ or a solicited Neighbor Advertisement) an entry's state\n   changes to REACHABLE.\
    \  The one exception is that upper-layer advice\n   has no effect on entries in\
    \ the INCOMPLETE state (e.g., for which no\n   link-layer address is cached).\n\
    \   When ReachableTime milliseconds have passed since receipt of the last\n  \
    \ reachability confirmation for a neighbor, the Neighbor Cache entry's\n   state\
    \ changes from REACHABLE to STALE.\n      Note: An implementation may actually\
    \ defer changing the state from\n      REACHABLE to STALE until a packet is sent\
    \ to the neighbor, i.e.,\n      there need not be an explicit timeout event associated\
    \ with the\n      expiration of ReachableTime.\n   The first time a node sends\
    \ a packet to a neighbor whose entry is\n   STALE, the sender changes the state\
    \ to DELAY and a sets a timer to\n   expire in DELAY_FIRST_PROBE_TIME seconds.\
    \  If the entry is still in\n   the DELAY state when the timer expires, the entry's\
    \ state changes to\n   PROBE.  If reachability confirmation is received, the entry's\
    \ state\n   changes to REACHABLE.\n   Upon entering the PROBE state, a node sends\
    \ a unicast Neighbor\n   Solicitation message to the neighbor using the cached\
    \ link-layer\n   address.  While in the PROBE state, a node retransmits Neighbor\n\
    \   Solicitation messages every RetransTimer milliseconds until\n   reachability\
    \ confirmation is obtained.  Probes are retransmitted even\n   if no additional\
    \ packets are sent to the neighbor.  If no response is\n   received after waiting\
    \ RetransTimer milliseconds after sending the\n   MAX_UNICAST_SOLICIT solicitations,\
    \ retransmissions cease and the\n   entry SHOULD be deleted.  Subsequent traffic\
    \ to that neighbor will\n   recreate the entry and performs address resolution\
    \ again.\n   Note that all Neighbor Solicitations are rate-limited on a per-\n\
    \   neighbor basis.  A node MUST NOT send Neighbor Solicitations to the\n   same\
    \ neighbor more frequently than once every RetransTimer\n   milliseconds.\n  \
    \ A Neighbor Cache entry enters the STALE state when created as a\n   result of\
    \ receiving packets other than solicited Neighbor\n   Advertisements (i.e., Router\
    \ Solicitations, Router Advertisements,\n   Redirects, and Neighbor Solicitations).\
    \  These packets contain the\n   link-layer address of either the sender or, in\
    \ the case of Redirect,\n   the redirection target.  However, receipt of these\
    \ link-layer\n   addresses does not confirm reachability of the forward-direction\
    \ path\n   to that node.  Placing a newly created Neighbor Cache entry for which\n\
    \   the link-layer address is known in the STALE state provides assurance\n  \
    \ that path failures are detected quickly.  In addition, should a\n   cached link-layer\
    \ address be modified due to receiving one of the\n   above messages the state\
    \ SHOULD also be set to STALE to provide\n   prompt verification that the path\
    \ to the new link-layer address is\n   working.\n   To properly detect the case\
    \ where a router switches from being a\n   router to being a host (e.g., if its\
    \ IP forwarding capability is\n   turned off by system management), a node MUST\
    \ compare the Router flag\n   field in all received Neighbor Advertisement messages\
    \ with the\n   IsRouter flag recorded in the Neighbor Cache entry.  When a node\n\
    \   detects that a neighbor has changed from being a router to being a\n   host,\
    \ the node MUST remove that router from the Default Router List\n   and update\
    \ the Destination Cache as described in Section 6.3.5.  Note\n   that a router\
    \ may not be listed in the Default Router List, even\n   though a Destination\
    \ Cache entry is using it (e.g., a host was\n   redirected to it).  In such cases,\
    \ all Destination Cache entries that\n   reference the (former) router must perform\
    \ next-hop determination\n   again before using the entry.\n   In some cases,\
    \ link-specific information may indicate that a path to\n   a neighbor has failed\
    \ (e.g., the resetting of a virtual circuit).  In\n   such cases, link-specific\
    \ information may be used to purge Neighbor\n   Cache entries before the Neighbor\
    \ Unreachability Detection would do\n   so.  However, link-specific information\
    \ MUST NOT be used to confirm\n   the reachability of a neighbor; such information\
    \ does not provide\n   end-to-end confirmation between neighboring IP layers.\n"
- title: 8.  REDIRECT FUNCTION
  contents:
  - "8.  REDIRECT FUNCTION\n   This section describes the functions related to the\
    \ sending and\n   processing of Redirect messages.\n   Redirect messages are sent\
    \ by routers to redirect a host to a better\n   first-hop router for a specific\
    \ destination or to inform hosts that a\n   destination is in fact a neighbor\
    \ (i.e., on-link).  The latter is\n   accomplished by having the ICMP Target Address\
    \ be equal to the ICMP\n   Destination Address.\n   A router MUST be able to determine\
    \ the link-local address for each of\n   its neighboring routers in order to ensure\
    \ that the target address in\n   a Redirect message identifies the neighbor router\
    \ by its link-local\n   address.  For static routing this requirement implies\
    \ that the next-\n   hop router's address should be specified using the link-local\
    \ address\n   of the router.  For dynamic routing this requirement implies that\
    \ all\n   IPv6 routing protocols must somehow exchange the link-local addresses\n\
    \   of neighboring routers.\n"
- title: 8.1.  Validation of Redirect Messages
  contents:
  - "8.1.  Validation of Redirect Messages\n   A host MUST silently discard any received\
    \ Redirect message that does\n   not satisfy all of the following validity checks:\n\
    \   - IP Source Address is a link-local address.  Routers must use their\n   \
    \  link-local address as the source for Router Advertisement and\n     Redirect\
    \ messages so that hosts can uniquely identify routers.\n   - The IP Hop Limit\
    \ field has a value of 255, i.e., the packet could\n     not possibly have been\
    \ forwarded by a router.\n   - If the message includes an IP Authentication Header,\
    \ the message\n     authenticates correctly.\n   - ICMP Checksum is valid.\n \
    \  - ICMP Code is 0.\n   - ICMP length (derived from the IP length) is 40 or more\
    \ octets.\n   - The IP source address of the Redirect is the same as the current\n\
    \     first-hop router for the specified ICMP Destination Address.\n   - The ICMP\
    \ Destination Address field in the redirect message does not\n     contain a multicast\
    \ address.\n   - The ICMP Target Address is either a link-local address (when\n\
    \     redirected to a router) or the same as the ICMP Destination Address\n  \
    \   (when redirected to the on-link destination).\n   - All included options have\
    \ a length that is greater than zero.\n   The contents of the Reserved field,\
    \ and of any unrecognized options\n   MUST be ignored.  Future, backward-compatible\
    \ changes to the protocol\n   may specify the contents of the Reserved field or\
    \ add new options;\n   backward-incompatible changes may use different Code values.\n\
    \   The contents of any defined options that are not specified to be used\n  \
    \ with Redirect messages MUST be ignored and the packet processed as\n   normal.\
    \  The only defined options that may appear are the Target\n   Link-Layer Address\
    \ option and the Redirected Header option.\n   A host MUST NOT consider a redirect\
    \ invalid just because the Target\n   Address of the redirect is not covered under\
    \ one of the link's\n   prefixes.  Part of the semantics of the Redirect message\
    \ is that the\n   Target Address is on-link.\n   A redirect that passes the validity\
    \ checks is called a \"valid\n   redirect\".\n"
- title: 8.2.  Router Specification
  contents:
  - "8.2.  Router Specification\n   A router SHOULD send a redirect message, subject\
    \ to rate limiting,\n   whenever it forwards a packet that is not explicitly addressed\
    \ to\n   itself (i.e. a packet that is not source routed through the router)\n\
    \   in which:\n   - the Source Address field of the packet identifies a neighbor,\
    \ and\n   - the router determines that a better first-hop node resides on the\n\
    \     same link as the sending node for the Destination Address of the\n     packet\
    \ being forwarded, and\n   - the Destination Address of the packet is not a multicast\
    \ address,\n     and\n   The transmitted redirect packet contains, consistent\
    \ with the message\n   format given in Section 4.5:\n   - In the Target Address\
    \ field: the address to which subsequent\n     packets for the destination SHOULD\
    \ be sent.  If the target is a\n     router, that router's link-local address\
    \ MUST be used.  If the\n     target is a host the target address field MUST be\
    \ set to the same\n     value as the Destination Address field.\n   - In the Destination\
    \ Address field: the destination address of the\n     invoking IP packet.\n  \
    \ - In the options:\n        o Target Link-Layer Address option: link-layer address\
    \ of the\n          target, if known.\n        o Redirected Header: as much of\
    \ the forwarded packet as can fit\n          without the redirect packet exceeding\
    \ 576 octets in size.\n   A router MUST limit the rate at which Redirect messages\
    \ are sent, in\n   order to limit the bandwidth and processing costs incurred\
    \ by the\n   Redirect messages when the source does not correctly respond to the\n\
    \   Redirects, or the source chooses to ignore unauthenticated Redirect\n   messages.\
    \  More details on the rate-limiting of ICMP error messages\n   can be found in\
    \ [ICMPv6].\n   A router MUST NOT update its routing tables upon receipt of a\n\
    \   Redirect.\n"
- title: 8.3.  Host Specification
  contents:
  - "8.3.  Host Specification\n   A host receiving a valid redirect SHOULD update\
    \ its Destination Cache\n   accordingly so that subsequent traffic goes to the\
    \ specified target.\n   If no Destination Cache entry exists for the destination,\
    \ an\n   implementation SHOULD create such an entry.\n   If the redirect contains\
    \ a Target Link-Layer Address option the host\n   either creates or updates the\
    \ Neighbor Cache entry for the target.\n   In both cases the cached link-layer\
    \ address is copied from the Target\n   Link-Layer Address option.  If a Neighbor\
    \ Cache entry is created for\n   the target its reachability state MUST be set\
    \ to STALE as specified\n   in Section 7.3.3.  If a cache entry already existed\
    \ and it is updated\n   with a different link-layer address its reachability state\
    \ MUST also\n   be set to STALE.\n   In addition, if the Target Address is the\
    \ same as the Destination\n   Address, the host MUST treat the destination as\
    \ on-link and set the\n   IsRouter field in the corresponding Neighbor Cache entry\
    \ to FALSE.\n   Otherwise it MUST set IsRouter to true.\n   Redirect messages\
    \ apply to all flows that are being sent to a given\n   destination.  That is,\
    \ upon receipt of a Redirect for a Destination\n   Address, all Destination Cache\
    \ entries to that address should be\n   updated to use the specified next-hop,\
    \ regardless of the contents of\n   the Flow Label field that appears in the Redirected\
    \ Header option.\n   A host MAY have a configuration switch that can be set to\
    \ make it\n   ignore a Redirect message that does not have an IP Authentication\n\
    \   header.\n   A host MUST NOT send Redirect messages.\n"
- title: 9.  EXTENSIBILITY - OPTION PROCESSING
  contents:
  - "9.  EXTENSIBILITY - OPTION PROCESSING\n   Options provide a mechanism for encoding\
    \ variable length fields,\n   fields that may appear multiple times in the same\
    \ packet, or\n   information that may not appear in all packets.  Options can\
    \ also be\n   used to add additional functionality to future versions of ND.\n\
    \   In order to ensure that future extensions properly coexist with\n   current\
    \ implementations, all nodes MUST silently ignore any options\n   they do not\
    \ recognize in received ND packets and continue processing\n   the packet.  All\
    \ options specified in this document MUST be\n   recognized.  A node MUST NOT\
    \ ignore valid options just because the ND\n   message contains unrecognized ones.\n\
    \   The current set of options is defined in such a way that receivers\n   can\
    \ process multiple options in the same packet independently of each\n   other.\
    \  In order to maintain these properties future options SHOULD\n   follow the\
    \ simple rule:\n      The option MUST NOT depend on the presence or absence of\
    \ any other\n      options.  The semantics of an option should depend only on\
    \ the\n      information in the fixed part of the ND packet and on the\n     \
    \ information contained in the option itself.\n   Adhering to the above rule has\
    \ the following benefits:\n  1) Receivers can process options independently of\
    \ one another.  For\n     example, an implementation can choose to process the\
    \ Prefix\n     Information option contained in a Router Advertisement message\
    \ in a\n     user-space process while the link-layer address option in the same\n\
    \     message is processed by routines in the kernel.\n  2) Should the number\
    \ of options cause a packet to exceed a link's MTU,\n     multiple packets can\
    \ carry subsets of the options without any\n     change in semantics.\n  3) Senders\
    \ MAY send a subset of options in different packets.  For\n     instance, if a\
    \ prefix's Valid and Preferred Lifetime are high\n     enough, it might not be\
    \ necessary to include the Prefix Information\n     option in every Router Advertisement.\
    \  In addition, different\n     routers might send different sets of options.\
    \  Thus, a receiver\n     MUST NOT associate any action with the absence of an\
    \ option in a\n     particular packet.  This protocol specifies that receivers\
    \ should\n     only act on the expiration of timers and on the information that\
    \ is\n     received in the packets.\n   Options in Neighbor Discovery packets\
    \ can appear in any order;\n   receivers MUST be prepared to process them independently\
    \ of their\n   order.  There can also be multiple instances of the same option\
    \ in a\n   message (e.g., Prefix Information options).\n   If the number of included\
    \ options in a Router Advertisement causes\n   the advertisement's size to exceed\
    \ the link MTU, the router can send\n   multiple separate advertisements each\
    \ containing a subset of the\n   options.\n   The amount of data to include in\
    \ the Redirected Header option MUST be\n   limited so that the entire redirect\
    \ packet does not exceed 576\n   octets.\n   All options are a multiple of 8 octets\
    \ of length, ensuring\n   appropriate alignment without any \"pad\" options. \
    \ The fields in the\n   options (as well as the fields in ND packets) are defined\
    \ to align on\n   their natural boundaries (e.g., a 16-bit field is aligned on\
    \ a 16-bit\n   boundary) with the exception of the 128-bit IP addresses/prefixes,\n\
    \   which are aligned on a 64-bit boundary.  The link-layer address field\n  \
    \ contains an uninterpreted octet string; it is aligned on an 8-bit\n   boundary.\n\
    \   The size of an ND packet including the IP header is limited to the\n   link\
    \ MTU (which is at least 576 octets).  When adding options to an\n   ND packet\
    \ a node MUST NOT exceed the link MTU.\n   Future versions of this protocol may\
    \ define new option types.\n   Receivers MUST silently ignore any options they\
    \ do not recognize and\n   continue processing the message.\n"
- title: 10.  PROTOCOL CONSTANTS
  contents:
  - '10.  PROTOCOL CONSTANTS

    '
- title: 'Router constants:'
  contents:
  - "Router constants:\n         MAX_INITIAL_RTR_ADVERT_INTERVAL  16 seconds\n   \
    \      MAX_INITIAL_RTR_ADVERTISEMENTS    3 transmissions\n         MAX_FINAL_RTR_ADVERTISEMENTS\
    \      3 transmissions\n         MIN_DELAY_BETWEEN_RAS             3 seconds\n\
    \         MAX_RA_DELAY_TIME                 .5 seconds\n"
- title: 'Host constants:'
  contents:
  - "Host constants:\n         MAX_RTR_SOLICITATION_DELAY        1 second\n      \
    \   RTR_SOLICITATION_INTERVAL         4 seconds\n         MAX_RTR_SOLICITATIONS\
    \             3 transmissions\n"
- title: 'Node constants:'
  contents:
  - "Node constants:\n         MAX_MULTICAST_SOLICIT             3 transmissions\n\
    \         MAX_UNICAST_SOLICIT               3 transmissions\n         MAX_ANYCAST_DELAY_TIME\
    \            1 second\n         MAX_NEIGHBOR_ADVERTISEMENT        3 transmissions\n\
    \         REACHABLE_TIME               30,000 milliseconds\n         RETRANS_TIMER\
    \                 1,000 milliseconds\n         DELAY_FIRST_PROBE_TIME        \
    \    5 seconds\n         MIN_RANDOM_FACTOR                 .5\n         MAX_RANDOM_FACTOR\
    \                 1.5\n   Additional protocol constants are defined with the message\
    \ formats in\n   Section 4.\n   All protocol constants are subject to change in\
    \ future revisions of\n   the protocol.\n   The constants in this specification\
    \ may be overridden by specific\n   documents that describe how IPv6 operates\
    \ over different link layers.\n   This rule allows Neighbor Discovery to operate\
    \ over links with widely\n   varying performance characteristics.\n"
- title: 11.  SECURITY CONSIDERATIONS
  contents:
  - "11.  SECURITY CONSIDERATIONS\n   Neighbor Discovery is subject to attacks that\
    \ cause IP packets to\n   flow to unexpected places.  Such attacks can be used\
    \ to cause denial\n   of service but also allow nodes to intercept and optionally\
    \ modify\n   packets destined for other nodes.\n   The protocol reduces the exposure\
    \ to such threats in the absence of\n   authentication by ignoring ND packets\
    \ received from off-link senders.\n   The Hop Limit field of all received packets\
    \ is verified to contain\n   255, the maximum legal value.  Because routers decrement\
    \ the Hop\n   Limit on all packets they forward, received packets containing a\
    \ Hop\n   Limit of 255 must have originated from a neighbor.\n   The trust model\
    \ for redirects is the same as in IPv4.  A redirect is\n   accepted only if received\
    \ from the same router that is currently\n   being used for that destination.\
    \  It is natural to trust the routers\n   on the link.  If a host has been redirected\
    \ to another node (i.e.,\n   the destination is on-link) there is no way to prevent\
    \ the target\n   from issuing another redirect to some other destination.  However,\n\
    \   this exposure is no worse than it was; the target host, once\n   subverted,\
    \ could always act as a hidden router to forward traffic\n   elsewhere.\n   The\
    \ protocol contains no mechanism to determine which neighbors are\n   authorized\
    \ to send a particular type of message e.g.  Router\n   Advertisements; any neighbor,\
    \ presumably even in the presence of\n   authentication, can send Router Advertisement\
    \ messages thereby being\n   able to cause denial of service.  Furthermore, any\
    \ neighbor can send\n   proxy Neighbor Advertisements as well as unsolicited Neighbor\n\
    \   Advertisements as a potential denial of service attack.\n   Neighbor Discovery\
    \ protocol packet exchanges can be authenticated\n   using the IP Authentication\
    \ Header [IPv6-AUTH].  A node SHOULD\n   include an Authentication Header when\
    \ sending Neighbor Discovery\n   packets if a security association for use with\
    \ the IP Authentication\n   Header exists for the destination address.  The security\
    \ associations\n   may have been created through manual configuration or through\
    \ the\n   operation of some key management protocol.\n   Received Authentication\
    \ Headers in Neighbor Discovery packets MUST be\n   verified for correctness and\
    \ packets with incorrect authentication\n   MUST be ignored.\n   It SHOULD be\
    \ possible for the system administrator to configure a\n   node to ignore any\
    \ Neighbor Discovery messages that are not\n   authenticated using either the\
    \ Authentication Header or Encapsulating\n   Security Payload.  The configuration\
    \ technique for this MUST be\n   documented.  Such a switch SHOULD default to\
    \ allowing unauthenticated\n   messages.\n   Confidentiality issues are addressed\
    \ by the IP Security Architecture\n   and the IP Encapsulating Security Payload\
    \ documents [IPv6-SA, IPv6-\n   ESP].\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n  [ADDRCONF] Thomson, S., and T. Narten, \"IPv6 Address\n       \
    \   Autoconfiguration\", RFC 1971, August 1996.\n  [ADDR-ARCH] Deering, S., and\
    \ R. Hinden, Editors, \"IP Version 6\n          Addressing Architecture\", RFC\
    \ 1884, January 1996.\n  [ANYCST] Partridge, C., Mendez, T., and W. Milliken,\
    \ \"Host\n          Anycasting Service\", RFC 1546, November 1993.\n  [ARP] Plummer,\
    \ D., \"An Ethernet Address Resolution Protocol\", STD\n          37, RFC 826,\
    \ November 1982.\n  [HR-CL] Braden, R., Editor, \"Requirements for Internet Hosts\
    \ --\n          Communication Layers\", STD 3, RFC 1122, October 1989.\n  [ICMPv4]\
    \ Postel, J., \"Internet Control Message Protocol\", STD 5, RFC\n          792,\
    \ September 1981.\n  [ICMPv6] Conta, A., and S. Deering, \"Internet Control Message\n\
    \          Protocol (ICMPv6) for the Internet Protocol Version 6\n          (IPv6)\"\
    , RFC 1885, January 1996.\n  [IPv6] Deering, S., and R. Hinden, Editors, \"Internet\
    \ Protocol,\n          Version 6 (IPv6) Specification\", RFC 1883, January, 1996.\n\
    \  [IPv6-ETHER] Crawford, M., \"A Method for the Transmission of IPv6\n      \
    \    Packets over Ethernet Networks\", RFC 1972, August 1996.\n  [IPv6-SA] Atkinson,\
    \ R., \"Security Architecture for the Internet\n          Protocol\", RFC 1825,\
    \ August 1995.\n  [IPv6-AUTH] Atkinson, R., \"IP Authentication Header\", RFC\
    \ 1826,\n          August 1995.\n  [IPv6-ESP] Atkinson, R., \"IP Encapsulating\
    \ Security Payload (ESP)\",\n          RFC 1827, August 1995.\n  [RDISC] Deering,\
    \ S., \"ICMP Router Discovery Messages\", RFC 1256,\n          September 1991.\n\
    \  [SH-MEDIA] Braden, R., Postel, J., and Y. Rekhter, \"Internet\n          Architecture\
    \ Extensions for Shared Media\", RFC 1620, May\n          1994.\n  [ASSIGNED]\
    \ Reynolds, J., and J. Postel, \"ASSIGNED NUMBERS\", STD 2,\n          RFC 1700,\
    \ October 1994.\n  [SYNC] S. Floyd, V. Jacobsen, \"The Synchronization of Periodic\
    \ Routing\n          Messages\", IEEE/ACM Transactions on Networking, April 1994.\n\
    \          ftp://ftp.ee.lbl.gov/papers/sync_94.ps.Z\n"
- title: AUTHORS' ADDRESSES
  contents:
  - "AUTHORS' ADDRESSES\n     Erik Nordmark                Thomas Narten\n     Sun\
    \ Microsystems, Inc.       IBM Corporation\n     2550 Garcia Ave             \
    \ P.O. Box 12195\n     Mt. View, CA 94041           Research Triangle Park, NC\
    \ 27709-2195\n     USA                          USA\n     Phone: +1 415 786 5166\
    \       Phone: +1 919 254 7798\n     Fax:   +1 415 786 5896       Fax:   +1 919\
    \ 254 4027\n     EMail: nordmark@sun.com      EMail: narten@vnet.ibm.com\n   \
    \  William Allen Simpson\n     Daydreamer\n     Computer Systems Consulting Services\n\
    \     1384 Fontaine\n     Madison Heights, Michigan  48071\n     USA\n     EMail:\
    \ Bill.Simpson@um.cc.umich.edu\n            bsimpson@MorningStar.com\n"
- title: 'APPENDIX A: MULTIHOMED HOSTS'
  contents:
  - "APPENDIX A: MULTIHOMED HOSTS\n   There are a number of complicating issues that\
    \ arise when Neighbor\n   Discovery is used by hosts that have multiple interfaces.\
    \  This\n   section does not attempt to define the proper operation of multihomed\n\
    \   hosts with regard to Neighbor Discovery.  Rather, it identifies\n   issues\
    \ that require further study.  Implementors are encouraged to\n   experiment with\
    \ various approaches to making Neighbor Discovery work\n   on multihomed hosts\
    \ and to report their experiences.\n   If a multihomed host receives Router Advertisements\
    \ on all of its\n   interfaces, it will (probably) have learned on-link prefixes\
    \ for the\n   addresses residing on each link.  When a packet must be sent through\n\
    \   a router, however, selecting the \"wrong\" router can result in a\n   suboptimal\
    \ or non-functioning path.  There are number of issues to\n   consider:\n  1)\
    \ In order for a router to send a redirect, it must determine that\n     the packet\
    \ it is forwarding originates from a neighbor.  The\n     standard test for this\
    \ case is to compare the source address of the\n     packet to the list of on-link\
    \ prefixes associated with the\n     interface on which the packet was received.\
    \  If the originating\n     host is multihomed, however, the source address it\
    \ uses may belong\n     to an interface other than the interface from which it\
    \ was sent.\n     In such cases, a router will not send redirects, and suboptimal\n\
    \     routing is likely.  In order to be redirected, the sending host\n     must\
    \ always send packets out the interface corresponding to the\n     outgoing packet's\
    \ source address.  Note that this issue never\n     arises with non-multihomed\
    \ hosts; they only have one interface.\n  2) If the selected first-hop router\
    \ does not have a route at all for\n     the destination, it will be unable to\
    \ deliver the packet.  However,\n     the destination may be reachable through\
    \ a router on one of the\n     other interfaces.  Neighbor Discovery does not\
    \ address this\n     scenario; it does not arise in the non-multihomed case.\n\
    \  3) Even if the first-hop router does have a route for a destination,\n    \
    \ there may be a better route via another interface.  No mechanism\n     exists\
    \ for the multihomed host to detect this situation.\n   If a multihomed host fails\
    \ to receive Router Advertisements on one or\n   more of its interfaces, it will\
    \ not know (in the absence of\n   configured information) which destinations are\
    \ on-link on the\n   affected interface(s).  This leads to a number of problems:\n\
    \  1) If no Router Advertisement is received on any interfaces, a\n     multihomed\
    \ host will have no way of knowing which interface to send\n     packets out on,\
    \ even for on-link destinations.  Under similar\n     conditions in the non-multihomed\
    \ host case, a node treats all\n     destinations as residing on-link, and communication\
    \ proceeds.  In\n     the multihomed case, however, additional information is\
    \ needed to\n     select the proper outgoing interface.  Alternatively, a node\
    \ could\n     attempt to perform address resolution on all interfaces, a step\n\
    \     involving significant complexity that is not present in the non-\n     multihomed\
    \ host case.\n  2) If Router Advertisements are received on some, but not all\n\
    \     interfaces, a multihomed host could choose to only send packets out\n  \
    \   on the interfaces on which it has received Router Advertisements.\n     A\
    \ key assumption made here, however, is that routers on those other\n     interfaces\
    \ will be able to route packets to the ultimate\n     destination, even when those\
    \ destinations reside on the subnet to\n     which the sender connects, but has\
    \ no on-link prefix information.\n     Should the assumption be false, communication\
    \ would fail.  Even if\n     the assumption holds, packets will traverse a sub-optimal\
    \ path.\n"
- title: 'APPENDIX B: FUTURE EXTENSIONS'
  contents:
  - 'APPENDIX B: FUTURE EXTENSIONS

    '
- title: 'Possible extensions for future study are:'
  contents:
  - "Possible extensions for future study are:\n o Using dynamic timers to be able\
    \ to adapt to links with widely varying\n   delay.  Measuring round trip times,\
    \ however, requires acknowledgments\n   and sequence numbers in order to match\
    \ received Neighbor\n   Advertisements with the actual Neighbor Solicitation that\
    \ triggered\n   the advertisement.  Implementors wishing to experiment with such\
    \ a\n   facility could do so in a backwards-compatible way by defining a new\n\
    \   option carrying the necessary information.  Nodes not understanding\n   the\
    \ option would simply ignore it.\n o Adding capabilities to facilitate the operation\
    \ over links that\n   currently require hosts to register with an address resolution\n\
    \   server.  This could for instance enable routers to ask hosts to send\n   them\
    \ periodic unsolicited advertisements.  Once again this can be\n   added using\
    \ a new option sent in the Router Advertisements.\n o Adding additional procedures\
    \ for links where asymmetric and non-\n   transitive reachability is part of normal\
    \ operations.  Such\n   procedures might allow hosts and routers to find usable\
    \ paths on,\n   e.g., radio links.\n"
- title: 'APPENDIX C: STATE MACHINE FOR THE REACHABILITY STATE'
  contents:
  - "APPENDIX C: STATE MACHINE FOR THE REACHABILITY STATE\n   This appendix contains\
    \ a summary of the rules specified in Sections\n   7.2 and 7.3.  This document\
    \ does not mandate that implementations\n   adhere to this model as long as their\
    \ external behavior is consistent\n   with that described in this document.\n\
    \   When performing address resolution and Neighbor Unreachability\n   Detection\
    \ the following state transitions apply using the conceptual\n   model:\n"
- title: State           Event                   Action                New state
  contents:
  - 'State           Event                   Action                New state

    '
- title: '-               Packet to send.         Create entry.         INCOMPLETE'
  contents:
  - "-               Packet to send.         Create entry.         INCOMPLETE\n  \
    \                                      Send multicast NS.\n                  \
    \                      Start retransmit timer\n"
- title: INCOMPLETE      Retransmit timeout,     Retransmit NS         INCOMPLETE
  contents:
  - "INCOMPLETE      Retransmit timeout,     Retransmit NS         INCOMPLETE\n  \
    \              less than N             Start retransmit timer\n              \
    \  retransmissions.\n"
- title: INCOMPLETE      Retransmit timeout,     Discard entry         -
  contents:
  - "INCOMPLETE      Retransmit timeout,     Discard entry         -\n           \
    \     N or more               Send ICMP error\n                retransmissions.\n"
- title: INCOMPLETE      NA, Solicited=0,        Record link-layer     STALE
  contents:
  - "INCOMPLETE      NA, Solicited=0,        Record link-layer     STALE\n       \
    \         Override=any            address.  Send queued\n                    \
    \                    packets.\n"
- title: INCOMPLETE      NA, Solicited=1,        Record link-layer     REACHABLE
  contents:
  - "INCOMPLETE      NA, Solicited=1,        Record link-layer     REACHABLE\n   \
    \             Override=any            address.  Send queued\n                \
    \                        packets.\n"
- title: '!INCOMPLETE     NA, Solicited=1,        -                     REACHABLE'
  contents:
  - "!INCOMPLETE     NA, Solicited=1,        -                     REACHABLE\n   \
    \             Override=0\n"
- title: '!INCOMPLETE     NA, Solicited=1,        Record link-layer     REACHABLE'
  contents:
  - "!INCOMPLETE     NA, Solicited=1,        Record link-layer     REACHABLE\n   \
    \             Override=1              address.\n"
- title: '!INCOMPLETE     NA, Solicited=0,        -                     STALE'
  contents:
  - "!INCOMPLETE     NA, Solicited=0,        -                     STALE\n       \
    \         Override=0\n"
- title: '!INCOMPLETE     NA, Solicited=0,        Record link-layer     STALE'
  contents:
  - "!INCOMPLETE     NA, Solicited=0,        Record link-layer     STALE\n       \
    \         Override=1              address.\n"
- title: '!INCOMPLETE     upper-layer reachability  -                   REACHABLE'
  contents:
  - "!INCOMPLETE     upper-layer reachability  -                   REACHABLE\n   \
    \             confirmation\n"
- title: REACHABLE       timeout, more than      -                     STALE
  contents:
  - "REACHABLE       timeout, more than      -                     STALE\n       \
    \         N seconds since\n                reachability confirm.\n"
- title: STALE           Sending packet          Start delay timer     DELAY
  contents:
  - 'STALE           Sending packet          Start delay timer     DELAY

    '
- title: DELAY           Delay timeout           Send unicast NS probe PROBE
  contents:
  - "DELAY           Delay timeout           Send unicast NS probe PROBE\n       \
    \                                 Start retransmit timer\n"
- title: PROBE           Retransmit timeout,     Retransmit NS         PROBE
  contents:
  - "PROBE           Retransmit timeout,     Retransmit NS         PROBE\n       \
    \         less than N\n                retransmissions.\n"
- title: PROBE           Retransmit timeout,     Discard entry         -
  contents:
  - "PROBE           Retransmit timeout,     Discard entry         -\n           \
    \     N or more\n                retransmissions.\n   The state transitions for\
    \ receiving unsolicited information other\n   than Neighbor Advertisement messages\
    \ apply to either the source of\n   the packet (for Neighbor Solicitation, Router\
    \ Solicitation, and\n   Router Advertisement messages) or the target address (for\
    \ Redirect\n   messages) as follows:\n"
- title: State           Event                   Action                New state
  contents:
  - 'State           Event                   Action                New state

    '
- title: '-               NS, RS, RA, Redirect    Create entry.         STALE'
  contents:
  - '-               NS, RS, RA, Redirect    Create entry.         STALE

    '
- title: INCOMPLETE      NS, RS, RA, Redirect    Record link-layer     STALE
  contents:
  - "INCOMPLETE      NS, RS, RA, Redirect    Record link-layer     STALE\n       \
    \                                 address.  Send queued\n                    \
    \                    packets.\n"
- title: '!INCOMPLETE     NS, RS, RA, Redirect    Update link-layer     STALE'
  contents:
  - "!INCOMPLETE     NS, RS, RA, Redirect    Update link-layer     STALE\n       \
    \         Different link-layer    address\n                address than cached.\n"
- title: '!INCOMPLETE     NS, RS, RA, Redirect    -                     unchanged'
  contents:
  - "!INCOMPLETE     NS, RS, RA, Redirect    -                     unchanged\n   \
    \             Same link-layer\n                address as cached.\n"
- title: 'APPENDIX D: IMPLEMENTATION ISSUES'
  contents:
  - 'APPENDIX D: IMPLEMENTATION ISSUES

    '
- title: 'Appendix D.1: Reachability confirmations'
  contents:
  - "Appendix D.1: Reachability confirmations\n   Neighbor Unreachability Detection\
    \ requires explicit confirmation that\n   a forward-path is functioning properly.\
    \  To avoid the need for\n   Neighbor Solicitation probe messages, upper layer\
    \ protocols should\n   provide such an indication when the cost of doing so is\
    \ small.\n   Reliable connection-oriented protocols such as TCP are generally\n\
    \   aware when the forward-path is working.  When TCP sends (or receives)\n  \
    \ data, for instance, it updates its window sequence numbers, sets and\n   cancels\
    \ retransmit timers, etc.  Specific scenarios that usually\n   indicate a properly\
    \ functioning forward-path include:\n"
- title: '- Receipt of an acknowledgement that covers a sequence number (e.g.,'
  contents:
  - "- Receipt of an acknowledgement that covers a sequence number (e.g.,\n   data)\
    \ not previously acknowledged indicates that the forward path was\n   working\
    \ at the time the data was sent.\n"
- title: '- Completion of the initial three-way handshake is a special case of the'
  contents:
  - "- Completion of the initial three-way handshake is a special case of the\n  \
    \ previous rule; although no data is sent during the handshake, the SYN\n   flags\
    \ are counted as data from the sequence number perspective.  This\n   applies\
    \ to both the SYN+ACK for the active open the ACK of that\n   packet on the passively\
    \ opening peer.\n"
- title: '- Receipt of new data (i.e., data not previously received) indicates'
  contents:
  - "- Receipt of new data (i.e., data not previously received) indicates\n   that\
    \ the forward-path was working at the time an acknowledgement was\n   sent that\
    \ advanced the peer's send window that allowed the new data\n   to be sent.\n\
    \   To minimize the cost of communicating reachability information\n   between\
    \ the TCP and IP layers, an implementation may wish to rate-\n   limit the reachability\
    \ confirmations its sends IP.  One possibility\n   is to process reachability\
    \ only every few packets.  For example, one\n   might update reachability information\
    \ once per round trip time, if an\n   implementation only has one round trip timer\
    \ per connection.  For\n   those implementations that cache Destination Cache\
    \ entries within\n   control blocks, it may be possible to update the Neighbor\
    \ Cache entry\n   directly (i.e., without an expensive lookup) once the TCP packet\
    \ has\n   been demultiplexed to its corresponding control block.  For other\n\
    \   implementation it may be possible to piggyback the reachability\n   confirmation\
    \ on the next packet submitted to IP assuming that the\n   implementation guards\
    \ against the piggybacked confirmation becoming\n   stale when no packets are\
    \ sent to IP for an extended period of time.\n   TCP must also guard against thinking\
    \ \"stale\" information indicates\n   current reachability.  For example, new\
    \ data received 30 minutes\n   after a window has opened up does not constitute\
    \ a confirmation that\n   the path is currently working.  In merely indicates\
    \ that 30 minutes\n   ago the window update reached the peer i.e. the path was\
    \ working at\n   that point in time.  An implementation must also take into account\n\
    \   TCP zero-window probes that are sent even if the path is broken and\n   the\
    \ window update did not reach the peer.\n   For UDP based applications (RPC, DNS)\
    \ it is relatively simple to make\n   the client send reachability confirmations\
    \ when the response packet\n   is received.  It is more difficult and in some\
    \ cases impossible for\n   the server to generate such confirmations since there\
    \ is no flow\n   control, i.e., the server can not determine whether a received\n\
    \   request indicates that a previous response reached the client.\n   Note that\
    \ an implementation can not use negative upper-layer advise\n   as a replacement\
    \ for the Neighbor Unreachability Detection algorithm.\n   Negative advise (e.g.\
    \ from TCP when there are excessive\n   retransmissions) could serve as a hint\
    \ that the forward path from the\n   sender of the data might not be working.\
    \  But it would fail to detect\n   when the path from the receiver of the data\
    \ is not functioning\n   causing, none of the acknowledgement packets to reach\
    \ the\n   dgement\n"
