- title: __initial_text__
  contents:
  - '       Internet Message Access Protocol (IMAP) CATENATE Extension

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The CATENATE extension to the Internet Message Access Protocol (IMAP)\n\
    \   extends the APPEND command to allow clients to create messages on the\n  \
    \ IMAP server that may contain a combination of new data along with\n   parts\
    \ of (or entire) messages already on the server.  Using this\n   extension, the\
    \ client can catenate parts of an already existing\n   message onto a new message\
    \ without having to first download the data\n   and then upload it back to the\
    \ server.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The CATENATE extension to the Internet Message Access Protocol\
    \ (IMAP)\n   [1] allows the client to create a message on the server that can\n\
    \   include the text of messages (or parts of messages) that already\n   exist\
    \ on the server without having to FETCH them and APPEND them back\n   to the server.\
    \  The CATENATE extension extends the APPEND command so\n   that, instead of a\
    \ single message literal, the command can take as\n   arguments any combination\
    \ of message literals (as described in IMAP\n   [1]) and message URLs (as described\
    \ in the IMAP URL Scheme [2]\n   specification).  The server takes all the pieces\
    \ and catenates them\n   into the output message.  The CATENATE extension can\
    \ also coexist\n   with the MULTIAPPEND extension [3] to APPEND multiple messages\
    \ in a\n   single command.\n   There are some obvious uses for the CATENATE extension.\
    \  The\n   motivating use case was to provide a way for a resource-constrained\n\
    \   client to compose a message for subsequent submission that contains\n   data\
    \ that already exists in that client's IMAP store.  Because the\n   client does\
    \ not have to download and re-upload potentially large\n   message parts, bandwidth\
    \ and processing limitations do not have as\n   much impact.  In addition, since\
    \ the client can create a message in\n   its own IMAP store, the command also\
    \ addresses the desire of the\n   client to archive a copy of a sent message without\
    \ having to upload\n   the message twice.  (Mechanisms for sending the message\
    \ are outside\n   the scope of this document.)\n   The extended APPEND command\
    \ can also be used to copy parts of a\n   message to another mailbox for archival\
    \ purposes while getting rid of\n   undesired parts.  In environments where server\
    \ storage is limited, a\n   client could get rid of large message parts by copying\
    \ over only the\n   necessary parts and then deleting the original message.  The\n\
    \   mechanism could also be used to add data to a message (such as\n   prepending\
    \ message header fields) or to include other data by making\n   a copy of the\
    \ original and catenating the new data.\n"
- title: 2.  The CATENATE Capability
  contents:
  - "2.  The CATENATE Capability\n   A server that supports this extension returns\
    \ \"CATENATE\" as one of\n   the responses to the CAPABILITY command.\n"
- title: 3.  The APPEND Command
  contents:
  - "3.  The APPEND Command\n   Arguments:  mailbox name\n               (The following\
    \ can be repeated in the presence of the\n               MULTIAPPEND extension\
    \ [3])\n               OPTIONAL flag parenthesized list\n               OPTIONAL\
    \ date/time string\n               a single message literal or one or more message\
    \ parts to\n               catenate, specified as:\n                         \
    \  message literal\n                           or\n                          \
    \ message (or message part) URL\n   Responses:  OPTIONAL NO responses: BADURL,\
    \ TOOBIG\n   Result:     OK -  append completed\n               NO -  append error:\
    \ can't append to that mailbox, error\n                     in flags or date/time\
    \ or message text, or can't\n                     fetch that data\n          \
    \     BAD - command unknown or arguments invalid\n   The APPEND command concatenates\
    \ all the message parts and appends\n   them as a new message to the end of the\
    \ specified mailbox.  The\n   parenthesized flag list and date/time string set\
    \ the flags and the\n   internal date, respectively, as described in IMAP [1].\
    \  The\n   subsequent command parameters specify the message parts that are\n\
    \   appended sequentially to the output message.\n   If the original form of APPEND\
    \ is used, a message literal follows the\n   optional flag list and date/time\
    \ string, which is appended as\n   described in IMAP [1].  If the extended form\
    \ is used, \"CATENATE\" and\n   a parenthesized list of message literals and message\
    \ URLs follows,\n   each of which is appended to the new message.  If a message\
    \ literal\n   is specified (indicated by \"TEXT\"), the octets following the count\n\
    \   are appended.  If a message URL is specified (indicated by \"URL\"),\n   the\
    \ octets of the body part pointed to by that URL are appended, as\n   if the literal\
    \ returned in a FETCH BODY response were put in place of\n   the message part\
    \ specifier.  The APPEND command does not cause the\n   \\Seen flag to be set\
    \ for any catenated body part.  The APPEND command\n   does not change the selected\
    \ mailbox.\n   In the extended APPEND command, the string following \"URL\" is\
    \ an IMAP\n   URL [2] and is interpreted according to the rules of [2].  The\n\
    \   present document only describes the behavior of the command using\n   IMAP\
    \ URLs that refer to specific messages or message parts on the\n   current IMAP\
    \ server from the current authenticated IMAP session.\n   Because of that, only\
    \ relative IMAP message or message part URLs\n   (i.e., those having no scheme\
    \ or <iserver>) are used.  The base URL\n   for evaluating the relative URL is\
    \ considered \"imap://user@server/\",\n   where \"user\" is the user name of the\
    \ currently authenticated user and\n   \"server\" is the domain name of the current\
    \ server.  When in the\n   selected state, the base URL is considered\n   \"imap://user@server/mailbox\"\
    , where \"mailbox\" is the encoded name of\n   the currently selected mailbox.\
    \  Additionally, since the APPEND\n   command is valid in the authenticated state\
    \ of an IMAP session, no\n   further LOGIN or AUTHENTICATE command is performed\
    \ for URLs specified\n   in the extended APPEND command.\n      Note: Use of an\
    \ absolute IMAP URL or any URL that refers to\n      anything other than a message\
    \ or message part from the current\n      authenticated IMAP session is outside\
    \ the scope of this document\n      and would require an extension to this specification,\
    \ and a server\n      implementing only this specification would return NO to\
    \ such a\n      request.\n   The client is responsible for making sure that the\
    \ catenated message\n   is in the format of an Internet Message Format (RFC 2822)\
    \ [4] or\n   Multipurpose Internet Mail Extension (MIME) [5] message.  In\n  \
    \ particular, when a URL is catenated, the server copies octets,\n   unchanged,\
    \ from the indicated message or message part to the\n   catenated message.  It\
    \ does no data conversion (e.g., MIME transfer\n   encodings) nor any verification\
    \ that the data is appropriate for the\n   MIME part of the message into which\
    \ it is inserted.  The client is\n   also responsible for inserting appropriate\
    \ MIME boundaries between\n   body parts, and writing MIME Content-Type and Content-Transfer-\n\
    \   Encoding lines as needed in the appropriate places.\n   Responses behave just\
    \ as the original APPEND command described in\n   IMAP [1].  If the server implements\
    \ the IMAP UIDPLUS extension [6],\n   it will also return an APPENDUID response\
    \ code in the tagged OK\n   response.  Two response codes are provided in Section\
    \ 4 that can be\n   used in the tagged NO response if the APPEND command fails.\n"
- title: 4.  Response Codes
  contents:
  - "4.  Response Codes\n   When a APPEND command fails, it may return a response\
    \ code that\n   describes a reason for the failure.\n"
- title: 4.1.  BADURL Response
  contents:
  - "4.1.  BADURL Response\n   The BADURL response code is returned if the APPEND\
    \ fails to process\n   one of the specified URLs.  Possible reasons for this are\
    \ bad URL\n   syntax, unrecognized URL schema, invalid message UID, or invalid\
    \ body\n   part.  The BADURL response code contains the first URL specified as\
    \ a\n   parameter to the APPEND command that has caused the operation to\n   fail.\n"
- title: 4.2.  TOOBIG Response
  contents:
  - "4.2.  TOOBIG Response\n   The TOOBIG response code is returned if the resulting\
    \ message will\n   exceed the 4-GB IMAP message limit.  This might happen, for\
    \ example,\n   if the client specifies 3 URLs for 2-GB messages.  Note that even\
    \ if\n   the server doesn't return TOOBIG, it still has to be defensive\n   against\
    \ misbehaving or malicious clients that try to construct a\n   message over the\
    \ 4-GB limit.  The server may also wish to return the\n   TOOBIG response code\
    \ if the resulting message exceeds a server-\n   specific message size limit.\n"
- title: 5.  Formal Syntax
  contents:
  - "5.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) [7] notation.  Elements not defined here can be found in\n   the\
    \ formal syntax of the ABNF [7], IMAP [1], and IMAP ABNF extensions\n   [8] specifications.\
    \  Note that capability and resp-text-code are\n   extended from the IMAP [1]\
    \ specification and append-data is extended\n   from the IMAP ABNF extensions\
    \ [8] specification.\n   append-data =/ \"CATENATE\" SP \"(\" cat-part *(SP cat-part)\
    \ \")\"\n   cat-part = text-literal / url\n   text-literal = \"TEXT\" SP literal\n\
    \   url = \"URL\" SP astring\n   resp-text-code =/ toobig-response-code / badurl-response-code\n\
    \   toobig-response-code = \"TOOBIG\"\n   badurl-response-code = \"BADURL\" SP\
    \ url-resp-text\n   url-resp-text = 1*(%x01-09 /\n                      %x0B-0C\
    \ /\n                      %x0E-5B /\n                      %x5D-FE) ; Any TEXT-CHAR\
    \ except \"]\"\n   capability =/ \"CATENATE\"\n   The astring in the definition\
    \ of url and the url-resp-text in the\n   definition of badurl-response-code each\
    \ contain an imapurl as defined\n   by [2].\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Thanks to the members of the LEMONADE working group\
    \ for their input.\n   Special thanks to Alexey Melnikov for the examples.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The CATENATE extension does not raise any security\
    \ considerations\n   that are not present for the base protocol or in the use\
    \ of IMAP\n   URLs, and these issues are discussed in the IMAP [1] and IMAP URL\
    \ [2]\n   documents.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IMAP4 capabilities are registered by publishing a\
    \ standards track or\n   IESG approved experimental RFC.  The registry is currently\
    \ located at\n   <http://www.iana.org/assignments/imap4-capabilities>.  This document\n\
    \   defines the CATENATE IMAP capability.  The IANA has added this\n   capability\
    \ to the registry.\n"
- title: Appendix A.  Examples
  contents:
  - "Appendix A.  Examples\n   Lines not starting with \"C: \" or \"S: \" are continuations\
    \ of the\n   previous lines.\n   The original message in examples 1 and 2 below\
    \ (UID = 20) has the\n   following structure:\n      multipart/mixed MIME message\
    \ with two body parts:\n      1.  text/plain\n      2.  application/x-zip-compressed\n\
    \   Example 1: The following example demonstrates how a CATENATE client\n   can\
    \ replace an attachment in a draft message, without the need to\n   download it\
    \ to the client and upload it back.\n   C: A003 APPEND Drafts (\\Seen \\Draft\
    \ $MDNSent) CATENATE\n    (URL \"/Drafts;UIDVALIDITY=385759045/;UID=20/;section=HEADER\"\
    \n    TEXT {42}\n   S: + Ready for literal data\n   C:\n   C: --------------030308070208000400050907\n\
    \   C:  URL \"/Drafts;UIDVALIDITY=385759045/;UID=20/;section=1.MIME\"\n    URL\
    \ \"/Drafts;UIDVALIDITY=385759045/;UID=20/;section=1\" TEXT {42}\n   S: + Ready\
    \ for literal data\n   C:\n   C: --------------030308070208000400050907\n   C:\
    \  URL \"/Drafts;UIDVALIDITY=385759045/;UID=30\" TEXT {44}\n   S: + Ready for\
    \ literal data\n   C:\n   C: --------------030308070208000400050907--\n   C: )\n\
    \   S: A003 OK catenate append completed\n   Example 2: The following example\
    \ demonstrates how the CATENATE\n   extension can be used to replace edited text\
    \ in a draft message, as\n   well as header fields for the top level message part\
    \ (e.g., Subject\n   has changed).  The previous version of the draft is marked\
    \ as\n   \\Deleted.  Note that the server also supports the UIDPLUS extension,\n\
    \   so the APPENDUID response code is returned in the successful OK\n   response\
    \ to the APPEND command.\n   C: A003 APPEND Drafts (\\Seen \\Draft $MDNSent) CATENATE\
    \ (TEXT {738}\n   S: + Ready for literal data\n   C: Return-Path: <bar@example.org>\n\
    \   C: Received: from [127.0.0.2]\n   C:           by rufus.example.org via TCP\
    \ (internal) with ESMTPA;\n   C:           Thu, 11 Nov 2004 16:57:07 +0000\n \
    \  C: Message-ID: <419399E1.6000505@example.org>\n   C: Date: Thu, 12 Nov 2004\
    \ 16:57:05 +0000\n   C: From: Bob Ar <bar@example.org>\n   C: X-Accept-Language:\
    \ en-us, en\n   C: MIME-Version: 1.0\n   C: To: foo@example.net\n   C: Subject:\
    \ About our holiday trip\n   C: Content-Type: multipart/mixed;\n   C:        \
    \       boundary=\"------------030308070208000400050907\"\n   C:\n   C: --------------030308070208000400050907\n\
    \   C: Content-Type: text/plain; charset=us-ascii; format=flowed\n   C: Content-Transfer-Encoding:\
    \ 7bit\n   C:\n   C: Our travel agent has sent the updated schedule.\n   C:\n\
    \   C: Cheers,\n   C: Bob\n   C: --------------030308070208000400050907\n   C:\
    \  URL \"/Drafts;UIDVALIDITY=385759045/;UID=20/;Section=2.MIME\"\n    URL \"/Drafts;UIDVALIDITY=385759045/;UID=20/;Section=2\"\
    \ TEXT {44}\n   S: + Ready for literal data\n   C:\n   C: --------------030308070208000400050907--\n\
    \   C: )\n   S: A003 OK [APPENDUID 385759045 45] append Completed\n   C: A004\
    \ UID STORE 20 +FLAGS.SILENT (\\Deleted)\n   S: A004 OK STORE completed\n   Example\
    \ 3: The following example demonstrates how the CATENATE\n   extension can be\
    \ used to strip attachments.  Below, a PowerPoint\n   attachment was replaced\
    \ by a small text part explaining that the\n   attachment was stripped.\n   C:\
    \ A003 APPEND Drafts (\\Seen \\Draft $MDNSent) CATENATE\n    (URL \"/Drafts;UIDVALIDITY=385759045/;UID=21/;section=HEADER\"\
    \n    TEXT {42}\n   S: + Ready for literal data\n   C:\n   C: --------------030308070208000400050903\n\
    \   C:  URL \"/Drafts;UIDVALIDITY=385759045/;UID=21/;section=1.MIME\"\n    URL\
    \ \"/Drafts;UIDVALIDITY=385759045/;UID=21/;section=1\" TEXT {255}\n   S: + Ready\
    \ for literal data\n   C:\n   C: --------------030308070208000400050903\n   C:\
    \ Content-type: text/plain; charset=\"us-ascii\"\n   C: Content-transfer-encoding:\
    \ 7bit\n   C:\n   C: This body part contained a Power Point presentation that\
    \ was\n   C: deleted upon your request.\n   C: --------------030308070208000400050903--\n\
    \   C: )\n   S: A003 OK append Completed\n   Example 4: The following example\
    \ demonstrates a failed APPEND\n   command.  The server returns the BADURL response\
    \ code to indicate\n   that one of the provided URLs is invalid.  This example\
    \ also\n   demonstrates how the CATENATE extension can be used to construct a\n\
    \   digest of several messages.\n   C: A003 APPEND Sent (\\Seen $MDNSent) CATENATE\
    \ (TEXT {541}\n   S: + Ready for literal data\n   C: Return-Path: <foo@example.org>\n\
    \   C: Received: from [127.0.0.2]\n   C:           by rufus.example.org via TCP\
    \ (internal) with ESMTPA;\n   C:           Thu, 11 Nov 2004 16:57:07 +0000\n \
    \  C: Message-ID: <419399E1.6000505@example.org>\n   C: Date: Thu, 21 Nov 2004\
    \ 16:57:05 +0000\n   C: From: Farren Oo <foo@example.org>\n   C: X-Accept-Language:\
    \ en-us, en\n   C: MIME-Version: 1.0\n   C: To: bar@example.org\n   C: Subject:\
    \ Digest of the mailing list for today\n   C: Content-Type: multipart/digest;\n\
    \   C:               boundary=\"------------030308070208000400050904\"\n   C:\n\
    \   C: --------------030308070208000400050904\n   C:  URL \"/INBOX;UIDVALIDITY=785799047/;UID=11467\"\
    \ TEXT {42}\n   S: + Ready for literal data\n   C:\n   C: --------------030308070208000400050904\n\
    \   C:  URL \"/INBOX;UIDVALIDITY=785799047/;UID=113330/;section=1.5.9\"\n    TEXT\
    \ {42}\n   S: + Ready for literal data\n   C:\n   C: --------------030308070208000400050904\n\
    \   C:  URL \"/INBOX;UIDVALIDITY=785799047/;UID=11916\" TEXT {44}\n   S: + Ready\
    \ for literal data\n   C:\n   C: --------------030308070208000400050904--\n  \
    \ C: )\n   S: A003 NO [BADURL \"/INBOX;UIDVALIDITY=785799047/;UID=113330;\n  \
    \ section=1.5.9\"] CATENATE append has failed, one message expunged\n   Note that\
    \ the server could have validated the URLs as they were\n   received and therefore\
    \ could have returned the tagged NO response\n   with BADURL response-code in\
    \ place of any continuation request after\n   the URL was received.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [1]  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL\
    \ - VERSION 4rev1\",\n        RFC 3501, March 2003.\n   [2]  Newman, C., \"IMAP\
    \ URL Scheme\", RFC 2192, September 1997.\n   [3]  Crispin, M., \"Internet Message\
    \ Access Protocol (IMAP) -\n        MULTIAPPEND Extension\", RFC 3502, March 2003.\n\
    \   [4]  Resnick, P., \"Internet Message Format\", RFC 2822, April 2001.\n   [5]\
    \  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions\
    \ (MIME) Part One: Format of Internet Message Bodies\",\n        RFC 2045, November\
    \ 1996.\n   [6]  Crispin, M., \"Internet Message Access Protocol (IMAP) - UIDPLUS\n\
    \        extension\", RFC 4315, December 2005.\n   [7]  Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [8]  Melnikov, A. and C. Daboo, \"Collected Extensions to IMAP4 ABNF\"\
    ,\n        RFC 4466, April 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter W. Resnick\n   QUALCOMM Incorporated\n   5775 Morehouse\
    \ Drive\n   San Diego, CA  92121-1714\n   US\n   Phone: +1 858 651 4478\n   EMail:\
    \ presnick@qualcomm.com\n   URI:   http://www.qualcomm.com/~presnick/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
