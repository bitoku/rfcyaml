- contents:
  - "                 Security Mechanism Agreement for the\n                   Session
    Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines new functionality for negotiating the security\n
    \  mechanisms used between a Session Initiation Protocol (SIP) user\n   agent
    and its next-hop SIP entity.  This new functionality\n   supplements the existing
    methods of choosing security mechanisms\n   between SIP entities.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . 2\n      1.1   Motivations . . . . . . . . . . . . . . . . . . . . .
    . 2\n      1.2  Design Goals . . . . . . . . . . . . . . . . . . . . . . 3\n      1.3
    \ Conventions  . . . . . . . . . . . . . . . . . . . . . . 3\n   2.  Solution
    . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n      2.1   Overview of
    Operation . . . . . . . . . . . . . . . . . 3\n      2.2  Syntax . . . . . . .
    . . . . . . . . . . . . . . . . . . 4\n      2.3  Protocol Operation . . . . .
    . . . . . . . . . . . . . . 6\n         2.3.1 Client Initiated . . . . . . . .
    . . . . . . . . . . 6\n         2.3.2 Server Initiated . . . . . . . . . . . .
    . . . . . . 8\n      2.4  Security Mechanism Initiation. . . . . . . . . . . .
    . . 9\n      2.5  Duration of Security Associations. . . . . . . . . . . .10\n
    \     2.6  Summary of Header Field Use. . . . . . . . . . . . . . .10\n   3.  Backwards
    Compatibility  . . . . . . . . . . . . . . . . . .11\n   4.  Examples . . . .
    . . . . . . . . . . . . . . . . . . . . . .12\n      4.1  Client Initiated . .
    . . . . . . . . . . . . . . . . . .12\n      4.2  Server Initiated . . . . . .
    . . . . . . . . . . . . . .14\n   5.  Security Considerations  . . . . . . . .
    . . . . . . . . . .15\n   6.  IANA Considerations. . . . . . . . . . . . . . .
    . . . . . .17\n      6.1  Registration Information . . . . . . . . . . . . . .
    . .17\n      6.2  Registration Template. . . . . . . . . . . . . . . . . .18\n
    \     6.3  Header Field Names . . . . . . . . . . . . . . . . . . .18\n      6.4
    \ Response Codes . . . . . . . . . . . . . . . . . . . . .18\n      6.5  Option
    Tags. . . . . . . . . . . . . . . . . . . . . . .19\n   7.  Contributors . . .
    . . . . . . . . . . . . . . . . . . . . .19\n   8.  Acknowledgements . . . . .
    . . . . . . . . . . . . . . . . .19\n   9.  Normative References . . . . . . .
    . . . . . . . . . . . . .19\n   10. Informative References .  . . . . . . . .
    . . . . . . . . . 20\n   A.  Syntax of ipsec-3gpp . . . . . . . . . . . . . .
    . . . . . .21\n   Authors' Addresses . . . . . . . . . . . . . . . . . . . . .
    . .23\n   Full Copyright Statement . . . . . . . . . . . . . . . . . . . .24\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   Traditionally, security protocols have included facilities
    to agree\n   on the used mechanisms, algorithms, and other security parameters.\n
    \  This is to add flexibility, since different mechanisms are usually\n   suitable
    to different scenarios.  Also, the evolution of security\n   mechanisms often
    introduces new algorithms, or uncovers problems in\n   existing ones, making negotiation
    of mechanisms a necessity.\n   The purpose of this specification is to define
    negotiation\n   functionality for the Session Initiation Protocol (SIP) [1].  This\n
    \  negotiation is intended to work only between a UA and its first-hop\n   SIP
    entity.\n"
  - contents:
    - "1.1 Motivations\n   Without a secured method to choose between security mechanisms
      and/or\n   their parameters, SIP is vulnerable to certain attacks.\n   Authentication
      and integrity protection using multiple alternative\n   methods and algorithms
      is vulnerable to Man-in-the-Middle (MitM)\n   attacks (e.g., see [4]).\n   It
      is also hard or sometimes even impossible to know whether a\n   specific security
      mechanism is truly unavailable to a SIP peer\n   entity, or if in fact a MitM
      attack is in action.\n   In certain small networks these issues are not very
      relevant, as the\n   administrators of such networks can deploy appropriate
      software\n   versions and set up policies for using exactly the right type of\n
      \  security.  However, SIP is also expected to be deployed to hundreds\n   of
      millions of small devices with little or no possibilities for\n   coordinated
      security policies, let alone software upgrades, which\n   necessitates the need
      for the negotiation functionality to be\n   available from the very beginning
      of deployment (e.g., see [11]).\n"
    title: 1.1 Motivations
  - contents:
    - "1.2 Design Goals\n   1. The entities involved in the security agreement process
      need to\n      find out exactly which security mechanisms to apply, preferably\n
      \     without excessive additional roundtrips.\n   2. The selection of security
      mechanisms itself needs to be secure.\n      Traditionally, all security protocols
      use a secure form of\n      negotiation.  For instance, after establishing mutual
      keys through\n      Diffie-Hellman, IKE sends hashes of the previously sent
      data\n      including the offered crypto mechanisms [8].  This allows the\n
      \     peers to detect if the initial, unprotected offers were tampered\n      with.\n
      \  3. The entities involved in the security agreement process need to be\n      able
      to indicate success or failure of the security agreement\n      process.\n   4.
      The security agreement process should not introduce any additional\n      state
      to be maintained by the involved entities.\n"
    title: 1.2 Design Goals
  - contents:
    - "1.3 Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP
      14, RFC 2119 [9].\n"
    title: 1.3 Conventions
  title: 1. Introduction
- contents:
  - '2. Solution

    '
  - contents:
    - "2.1 Overview of Operation\n   The message flow below illustrates how the mechanism
      defined in this\n   document works:\n             1. Client ----------client
      list---------> Server\n             2. Client <---------server list----------
      Server\n             3. Client ------(turn on security)------- Server\n             4.
      Client ----------server list---------> Server\n             5. Client <---------ok
      or error---------- Server\n                Figure 1: Security agreement message
      flow.\n   Step 1:  Clients wishing to use this specification can send a list
      of\n      their supported security mechanisms along the first request to the\n
      \     server.\n   Step 2:  Servers wishing to use this specification can challenge
      the\n      client to perform the security agreement procedure.  The security\n
      \     mechanisms and parameters supported by the server are sent along\n      in
      this challenge.\n   Step 3:  The client then proceeds to select the highest-preference\n
      \     security mechanism they have in common and to turn on the selected\n      security.\n
      \  Step 4:  The client contacts the server again, now using the selected\n      security
      mechanism.  The server's list of supported security\n      mechanisms is returned
      as a response to the challenge.\n   Step 5:  The server verifies its own list
      of security mechanisms in\n      order to ensure that the original list had
      not been modified.\n   This procedure is stateless for servers (unless the used
      security\n   mechanisms require the server to keep some state).\n   The client
      and the server lists are both static (i.e., they do not\n   and cannot change
      based on the input from the other side).  Nodes\n   may, however, maintain several
      static lists, one for each interface,\n   for example.\n   Between Steps 1 and
      2, the server may set up a non-self-describing\n   security mechanism if necessary.
      \ Note that with this type of\n   security mechanisms, the server is necessarily
      stateful.  The client\n   would set up the non-self-describing security mechanism
      between Steps\n   2 and 4.\n"
    title: 2.1 Overview of Operation
  - contents:
    - "2.2 Syntax\n   We define three new SIP header fields, namely Security-Client,\n
      \  Security-Server and Security-Verify.  The notation used in the\n   Augmented
      BNF definitions for the syntax elements in this section is\n   as used in SIP
      [1], and any elements not defined in this section are\n   as defined in SIP
      and the documents to which it refers:\n      security-client  = \"Security-Client\"
      HCOLON\n                         sec-mechanism *(COMMA sec-mechanism)\n      security-server
      \ = \"Security-Server\" HCOLON\n                         sec-mechanism *(COMMA
      sec-mechanism)\n      security-verify  = \"Security-Verify\" HCOLON\n                         sec-mechanism
      *(COMMA sec-mechanism)\n      sec-mechanism    = mechanism-name *(SEMI mech-parameters)\n
      \     mechanism-name   = ( \"digest\" / \"tls\" / \"ipsec-ike\" /\n                          \"ipsec-man\"
      / token )\n      mech-parameters  = ( preference / digest-algorithm /\n                           digest-qop
      / digest-verify / extension )\n      preference       = \"q\" EQUAL qvalue\n
      \     qvalue           = ( \"0\" [ \".\" 0*3DIGIT ] )\n                          /
      ( \"1\" [ \".\" 0*3(\"0\") ] )\n      digest-algorithm = \"d-alg\" EQUAL token\n
      \     digest-qop       = \"d-qop\" EQUAL token\n      digest-verify    = \"d-ver\"
      EQUAL LDQUOT 32LHEX RDQUOT\n      extension        = generic-param\n   Note
      that qvalue is already defined in the SIP BNF [1].  We have\n   copied its definitions
      here for completeness.\n   The parameters described by the BNF above have the
      following\n   semantics:\n      Mechanism-name\n         This token identifies
      the security mechanism supported by the\n         client, when it appears in
      a Security-Client header field; or\n         by the server, when it appears
      in a Security-Server or in a\n         Security-Verify header field.  The mechanism-name
      tokens are\n         registered with the IANA.  This specification defines four\n
      \        values:\n         *  \"tls\" for TLS [3].\n         *  \"digest\" for
      HTTP Digest [4].\n         *  \"ipsec-ike\" for IPsec with IKE [2].\n         *
      \ \"ipsec-man\" for manually keyed IPsec without IKE.\n      Preference\n         The
      \"q\" value indicates a relative preference for the\n         particular mechanism.
      \ The higher the value the more preferred\n         the mechanism is.  All the
      security mechanisms MUST have\n         different \"q\" values.  It is an error
      to provide two mechanisms\n         with the same \"q\" value.\n      Digest-algorithm\n
      \        This optional parameter is defined here only for HTTP Digest\n         [4]
      in order to prevent the bidding-down attack for the HTTP\n         Digest algorithm
      parameter.  The content of the field may have\n         same values as defined
      in [4] for the \"algorithm\" field.\n      Digest-qop\n         This optional
      parameter is defined here only for HTTP Digest\n         [4] in order to prevent
      the bidding-down attack for the HTTP\n         Digest qop parameter.  The content
      of the field may have same\n         values as defined in [4] for the \"qop\"
      field.\n      Digest-verify\n         This optional parameter is defined here
      only for HTTP Digest\n         [4] in order to prevent the bidding-down attack
      for the SIP\n         security mechanism agreement (this document).  The content
      of\n         the field is counted exactly the same way as \"request-digest\"\n
      \        in [4] except that the Security-Server header field is included\n         in
      the A2 parameter.  If the \"qop\" directive's value is \"auth\"\n         or
      is unspecified, then A2 is:\n            A2 = Method \":\" digest-uri-value
      \":\" security-server\n            If the \"qop\" value is \"auth-int\", then
      A2 is:\n            A2 = Method \":\" digest-uri-value \":\" H(entity-body)
      \":\"\n            security-server\n         All linear white spaces in the
      Security-Server header field\n         MUST be replaced by a single SP before
      calculating or\n         interpreting the digest-verify parameter.  Method,
      digest-uri-\n         value, entity-body, and any other HTTP Digest parameter
      are as\n         specified in [4].\n   Note that this specification does not
      introduce any extension or\n   change to HTTP Digest [4].  This specification
      only re-uses the\n   existing HTTP Digest mechanisms to protect the negotiation
      of\n   security mechanisms between SIP entities.\n"
    title: 2.2 Syntax
  - contents:
    - "2.3 Protocol Operation\n   This section deals with the protocol details involved
      in the\n   negotiation between a SIP UA and its next-hop SIP entity.  Throughout\n
      \  the text the next-hop SIP entity is referred to as the first-hop\n   proxy
      or outbound proxy.  However, the reader should bear in mind\n   that a user
      agent server can also be the next-hop for a user agent\n   client.\n"
    - contents:
      - "2.3.1 Client Initiated\n   If a client ends up using TLS to contact the server
        because it has\n   followed the rules specified in [5], the client MUST NOT
        use the\n   security agreement procedure of this specification.  If a client
        ends\n   up using non-TLS connections because of the rules in [5], the client\n
        \  MAY use the security agreement of this specification to detect DNS\n   spoofing,
        or to negotiate some other security than TLS.\n   A client wishing to use
        the security agreement of this specification\n   MUST add a Security-Client
        header field to a request addressed to its\n   first-hop proxy (i.e., the
        destination of the request is the first-\n   hop proxy).  This header field
        contains a list of all the security\n   mechanisms that the client supports.
        \ The client SHOULD NOT add\n   preference parameters to this list.  The client
        MUST add both a\n   Require and Proxy-Require header field with the value
        \"sec-agree\" to\n   its request.\n   The contents of the Security-Client
        header field may be used by the\n   server to include any necessary information
        in its response.\n   A server receiving an unprotected request that contains
        a Require or\n   Proxy-Require header field with the value \"sec-agree\" MUST
        respond to\n   the client with a 494 (Security Agreement Required) response.
        \ The\n   server MUST add a Security-Server header field to this response\n
        \  listing the security mechanisms that the server supports.  The server\n
        \  MUST add its list to the response even if there are no common\n   security
        mechanisms in the client's and server's lists.  The server's\n   list MUST
        NOT depend on the contents of the client's list.\n   The server MUST compare
        the list received in the Security-Client\n   header field with the list to
        be sent in the Security-Server header\n   field.  When the client receives
        this response, it will choose the\n   common security mechanism with the highest
        \"q\" value.  Therefore, the\n   server MUST add the necessary information
        so that the client can\n   initiate that mechanism (e.g., a Proxy-Authenticate
        header field for\n   HTTP Digest).\n   When the client receives a response
        with a Security-Server header\n   field, it MUST choose the security mechanism
        in the server's list\n   with the highest \"q\" value among all the mechanisms
        that are known to\n   the client.  Then, it MUST initiate that particular
        security\n   mechanism as described in Section 3.5.  This initiation may be\n
        \  carried out without involving any SIP message exchange (e.g.,\n   establishing
        a TLS connection).\n   If an attacker modified the Security-Client header
        field in the\n   request, the server may not include in its response the information\n
        \  needed to establish the common security mechanism with the highest\n   preference
        value (e.g., the Proxy-Authenticate header field is\n   missing).  A client
        detecting such a lack of information in the\n   response MUST consider the
        current security agreement process\n   aborted, and MAY try to start it again
        by sending a new request with\n   a Security-Client header field as described
        above.\n   All the subsequent SIP requests sent by the client to that server\n
        \  SHOULD make use of the security mechanism initiated in the previous\n   step.
        \ These requests MUST contain a Security-Verify header field\n   that mirrors
        the server's list received previously in the Security-\n   Server header field.
        \ These requests MUST also have both a Require\n   and Proxy-Require header
        fields with the value \"sec-agree\".\n   The server MUST check that the security
        mechanisms listed in the\n   Security-Verify header field of incoming requests
        correspond to its\n   static list of supported security mechanisms.\n      Note
        that, following the standard SIP header field comparison\n      rules defined
        in [1], both lists have to contain the same security\n      mechanisms in
        the same order to be considered equivalent.  In\n      addition, for each
        particular security mechanism, its parameters\n      in both lists need to
        have the same values.\n   The server can proceed processing a particular request
        if, and only\n   if, the list was not modified.  If modification of the list
        is\n   detected, the server MUST respond to the client with a 494 (Security\n
        \  Agreement Required) response.  This response MUST include the\n   server's
        unmodified list of supported security mechanisms.  If the\n   list was not
        modified, and the server is a proxy, it MUST remove the\n   \"sec-agree\"
        value from both the Require and Proxy-Require header\n   fields, and then
        remove the header fields if no values remain.\n   Once the security has been
        negotiated between two SIP entities, the\n   same SIP entities MAY use the
        same security when communicating with\n   each other in different SIP roles.
        \ For example, if a UAC and its\n   outbound proxy negotiate some security,
        they may try to use the same\n   security for incoming requests (i.e., the
        UA will be acting as a\n   UAS).\n   The user of a UA SHOULD be informed about
        the results of the security\n   mechanism agreement.  The user MAY decline
        to accept a particular\n   security mechanism, and abort further SIP communications
        with the\n   peer.\n"
      title: 2.3.1 Client Initiated
    - contents:
      - "2.3.2 Server Initiated\n   A server decides to use the security agreement
        described in this\n   document based on local policy.  If a server receives
        a request from\n   the network interface that is configured to use this mechanism,
        it\n   must check that the request has only one Via entry.  If there are\n
        \  several Via entries, the server is not the first-hop SIP entity, and\n
        \  it MUST NOT use this mechanism.  For such a request, the server must\n
        \  return a 502 (Bad Gateway) response.\n   A server that decides to use this
        agreement mechanism MUST challenge\n   unprotected requests with one Via entry
        regardless of the presence or\n   the absence of any Require, Proxy-Require
        or Supported header fields\n   in incoming requests.\n   A server that by
        policy requires the use of this specification and\n   receives a request that
        does not have the sec-agree option tag in a\n   Require, Proxy-Require or
        Supported header field MUST return a 421\n   (Extension Required) response.
        \ If the request had the sec-agree\n   option tag in a Supported header field,
        it MUST return a 494\n   (Security Agreement Required) response.  In both
        situation the server\n   MUST also include in the response a Security-Server
        header field\n   listing its capabilities and a Require header field with
        an option-\n   tag \"sec-agree\" in it.  The server MUST also add necessary\n
        \  information so that the client can initiate the preferred security\n   mechanism
        (e.g., a Proxy-Authenticate header field for HTTP Digest).\n   Clients that
        support the extension defined in this document SHOULD\n   add a Supported
        header field with a value of \"sec-agree\".\n"
      title: 2.3.2 Server Initiated
    title: 2.3 Protocol Operation
  - contents:
    - "2.4 Security Mechanism Initiation\n   Once the client chooses a security mechanism
      from the list received\n   in the Security-Server header field from the server,
      it initiates\n   that mechanism.  Different mechanisms require different initiation\n
      \  procedures.\n   If \"tls\" is chosen, the client uses the procedures of Section
      8.1.2\n   of [1] to determine the URI to be used as an input to the DNS\n   procedures
      of [5].  However, if the URI is a SIP URI, it MUST treat\n   the scheme as if
      it were sips, not sip.  If the URI scheme is not\n   sip, the request MUST be
      sent using TLS.\n   If \"digest\" is chosen, the 494 (Security Agreement Required)
      response\n   will contain an HTTP Digest authentication challenge.  The client\n
      \  MUST use the algorithm and qop parameters in the Security-Server\n   header
      field to replace the same parameters in the HTTP Digest\n   challenge.  The
      client MUST also use the digest-verify parameter in\n   the Security-Verify
      header field to protect the Security-Server\n   header field as specified in
      2.2.\n   To use \"ipsec-ike\", the client attempts to establish an IKE\n   connection
      to the host part of the Request-URI in the first request\n   to the server.
      \ If the IKE connection attempt fails, the agreement\n   procedure MUST be considered
      to have failed, and MUST be terminated.\n   Note that \"ipsec-man\" will only
      work if the communicating SIP\n   entities know which keys and other parameters
      to use.  It is outside\n   the scope of this specification to describe how this
      information can\n   be made known to the peers.  All rules for minimum implementations,\n
      \  such as mandatory-to-implement algorithms, apply as defined in [2],\n   [6],
      and [7].\n   In both IPsec-based mechanisms, it is expected that appropriate\n
      \  policy entries for protecting SIP have been configured or will be\n   created
      before attempting to use the security agreement procedure,\n   and that SIP
      communications use port numbers and addresses according\n   to these policy
      entries.  It is outside the scope of this\n   specification to describe how
      this information can be made known to\n   the peers, but it would typically
      be configured at the same time as\n   the IKE credentials or manual SAs have
      been entered.\n"
    title: 2.4 Security Mechanism Initiation
  - contents:
    - "2.5 Duration of Security Associations\n   Once a security mechanism has been
      negotiated, both the server and\n   the client need to know until when it can
      be used.  All the\n   mechanisms described in this document have a different
      way of\n   signaling the end of a security association.  When TLS is used, the\n
      \  termination of the connection indicates that a new negotiation is\n   needed.
      \ IKE negotiates the duration of a security association.  If\n   the credentials
      provided by a client using digest are no longer\n   valid, the server will re-challenge
      the client.  It is assumed that\n   when IPsec-man is used, the same out-of-band
      mechanism used to\n   distribute keys is used to define the duration of the
      security\n   association.\n"
    title: 2.5 Duration of Security Associations
  - contents:
    - "2.6 Summary of Header Field Use\n   The header fields defined in this document
      may be used to negotiate\n   the security mechanisms between a UAC and other
      SIP entities\n   including UAS, proxy, and registrar.  Information about the
      use of\n   headers in relation to SIP methods and proxy processing is summarized\n
      \  in Table 1.\n   Header field           where        proxy ACK BYE CAN INV
      OPT REG\n   _________________________________________________________________\n
      \  Security-Client          R           ard   -   o   -   o   o   o\n   Security-Server
      \      421,494              -   o   -   o   o   o\n   Security-Verify          R
      \          ard   -   o   -   o   o   o\n   Header field           where        proxy
      SUB NOT PRK IFO UPD MSG\n   _________________________________________________________________\n
      \  Security-Client          R           ard   o   o   -   o   o   o\n   Security-Server
      \      421,494              o   o   -   o   o   o\n   Security-Verify          R
      \          ard   o   o   -   o   o   o\n                     Table 1: Summary
      of Header Usage.\n   The \"where\" column describes the request and response
      types in which\n   the header field may be used.  The header may not appear
      in other\n   types of SIP messages.  Values in the where column are:\n   *  R:
      Header field may appear in requests.\n   *  421, 494: A numerical value indicates
      response codes with which\n      the header field can be used.\n   The \"proxy\"
      column describes the operations a proxy may perform on a\n   header field:\n
      \  *  a: A proxy can add or concatenate the header field if not present.\n   *
      \ r: A proxy must be able to read the header field, and thus this\n      header
      field cannot be encrypted.\n   *  d: A proxy can delete a header field value.\n
      \  The next six columns relate to the presence of a header field in a\n   method:\n
      \  *  o: The header field is optional.\n"
    title: 2.6 Summary of Header Field Use
  title: 2. Solution
- contents:
  - "3. Backwards Compatibility\n   The use of this extension in a network interface
    is a matter of local\n   policy.  Different network interfaces may follow different
    policies,\n   and consequently the use of this extension may be situational by\n
    \  nature.  UA and server implementations MUST be configurable to\n   operate
    with or without this extension.\n   A server that is configured to use this mechanism,
    may also accept\n   requests from clients that use TLS based on the rules defined
    in [5].\n   Requests from clients that do not support this extension, and do not\n
    \  support TLS, can not be accepted.  This obviously breaks\n   interoperability
    with some SIP clients.  Therefore, this extension\n   should be used in environments
    where it is somehow ensured that every\n   client implements this extension or
    is able to use TLS.  This\n   extension may also be used in environments where
    insecure\n   communication is not acceptable if the option of not being able to\n
    \  communicate is also accepted.\n"
  title: 3. Backwards Compatibility
- contents:
  - "4. Examples\n   The following examples illustrate the use of the mechanism defined\n
    \  above.\n"
  - contents:
    - "4.1 Client Initiated\n   A UA negotiates the security mechanism to be used
      with its outbound\n   proxy without knowing beforehand which mechanisms the
      proxy supports.\n   The OPTIONS method can be used here to request the security\n
      \  capabilities of the proxy.  In this way, the security can be\n   initiated
      even before the first INVITE is sent via the proxy.\n             UAC                 Proxy
      \              UAS\n              |                    |                  |\n
      \             |----(1) OPTIONS---->|                  |\n              |                    |
      \                 |\n              |<-----(2) 494-------|                  |\n
      \             |                    |                  |\n              |<=======TLS========>|
      \                 |\n              |                    |                  |\n
      \             |----(3) INVITE----->|                  |\n              |                    |----(4)
      INVITE--->|\n              |                    |                  |\n              |
      \                   |<---(5) 200 OK----|\n              |<---(6) 200 OK------|
      \                 |\n              |                    |                  |\n
      \             |------(7) ACK------>|                  |\n              |                    |-----(8)
      ACK----->|\n              |                    |                  |\n              |
      \                   |                  |\n              |                    |
      \                 |\n              |                    |                  |\n
      \             Figure 2: Negotiation Initiated by the Client.\n   The UAC sends
      an OPTIONS request to its outbound proxy, indicating at\n   the same time that
      it is able to negotiate security mechanisms and\n   that it supports TLS and
      HTTP Digest (1).\n   The outbound proxy responds to the UAC with its own list
      of security\n   mechanisms - IPsec and TLS (2).  The only common security mechanism\n
      \  is TLS, so they establish a TLS connection between them.  When the\n   connection
      is successfully established, the UAC sends an INVITE\n   request over the TLS
      connection just established (3).  This INVITE\n   contains the server's security
      list.  The server verifies it, and\n   since it matches its static list, it
      processes the INVITE and\n   forwards it to the next hop.\n   If this example
      was run without Security-Server header in Step 2, the\n   UAC would not know
      what kind of security the other one supports, and\n   would be forced to error-prone
      trials.\n   More seriously, if the Security-Verify was omitted in Step 3, the\n
      \  whole process would be prone for MitM attacks.  An attacker could\n   spoof
      \"ICMP Port Unreachable\" message on the trials, or remove the\n   stronger
      security option from the header in Step 1, therefore\n   substantially reducing
      the security.\n   (1) OPTIONS sip:proxy.example.com SIP/2.0\n       Security-Client:
      tls\n       Security-Client: digest\n       Require: sec-agree\n       Proxy-Require:
      sec-agree\n   (2) SIP/2.0 494 Security Agreement Required\n       Security-Server:
      ipsec-ike;q=0.1\n       Security-Server: tls;q=0.2\n   (3) INVITE sip:proxy.example.com
      SIP/2.0\n       Security-Verify: ipsec-ike;q=0.1\n       Security-Verify: tls;q=0.2\n
      \      Route: sip:callee@domain.com\n       Require: sec-agree\n       Proxy-Require:
      sec-agree\n   The 200 OK response (6) for the INVITE and the ACK (7) are also
      sent\n   over the TLS connection.  The ACK will contain the same Security-\n
      \  Verify header field as the INVITE (3).\n"
    title: 4.1 Client Initiated
  - contents:
    - "4.2 Server Initiated\n   In this example of Figure 3 the client sends an INVITE
      towards the\n   callee using an outbound proxy.  This INVITE does not contain
      any\n   Require header field.\n            UAC                 Proxy               UAS\n
      \            |                    |                  |\n             |-----(1)
      INVITE---->|                  |\n             |                    |                  |\n
      \            |<-----(2) 421-------|                  |\n             |                    |
      \                 |\n             |------(3) ACK------>|                  |\n
      \            |                    |                  |\n             |<=======IKE========>|
      \                 |\n             |                    |                  |\n
      \            |-----(4) INVITE---->|                  |\n             |                    |----(5)
      INVITE--->|\n             |                    |                  |\n             |
      \                   |<---(6) 200 OK----|\n             |<----(7) 200 OK-----|
      \                 |\n             |                    |                  |\n
      \            |------(8) ACK------>|                  |\n             |                    |-----(9)
      ACK----->|\n             |                    |                  |\n             |
      \                   |                  |\n             Figure 3: Server Initiated
      Security Negotiation.\n   The proxy, following its local policy, does not accept
      the INVITE.\n   It returns a 421 (Extension Required) with a Security-Server
      header\n   field that lists IPsec-IKE and TLS.  Since the UAC supports IPsec-IKE\n
      \  it performs the key exchange and establishes a security association\n   with
      the proxy.\n   The second INVITE (4) and the ACK (8) contain a Security-Verify\n
      \  header field that mirrors the Security-Server header field received\n   in
      the 421.  The INVITE (4), the 200 OK (7) and the ACK (8) are sent\n   using
      the security association that has been established.\n      (1) INVITE sip:uas.example.com
      SIP/2.0\n      (2) SIP/2.0 421 Extension Required\n          Security-Server:
      ipsec-ike;q=0.1\n          Security-Server: tls;q=0.2\n      (4) INVITE sip:uas.example.com
      SIP/2.0\n          Security-Verify: ipsec-ike;q=0.1\n          Security-Verify:
      tls;q=0.2\n"
    title: 4.2 Server Initiated
  title: 4. Examples
- contents:
  - "5. Security Considerations\n   This specification is about making it possible
    to select between\n   various SIP security mechanisms in a secure manner.  In
    particular,\n   the method presented herein allow current networks using, for\n
    \  instance, HTTP Digest, to be securely upgraded to, for instance,\n   IPsec
    without requiring a simultaneous modification in all equipment.\n   The method
    presented in this specification is secure only if the\n   weakest proposed mechanism
    offers at least integrity and replay\n   protection for the Security-Verify header
    field.\n   The security implications of this are subtle, but do have a\n   fundamental
    importance in building large networks that change over\n   time.  Given that the
    hashes are produced also using algorithms\n   agreed in the first unprotected
    messages, one could ask what the\n   difference in security really is.  Assuming
    integrity protection is\n   mandatory and only secure algorithms are used, we
    still need to\n   prevent MitM attackers from modifying other parameters, such
    as\n   whether encryption is provided or not.  Let us first assume two peers\n
    \  capable of using both strong and weak security.  If the initial\n   offers
    are not protected in any way, any attacker can easily\n   \"downgrade\" the offers
    by removing the strong options.  This would\n   force the two peers to use weak
    security between them.  But if the\n   offers are protected in some way -- such
    as by hashing, or repeating\n   them later when the selected security is really
    on -- the situation\n   is different.  It would not be sufficient for the attacker
    to modify\n   a single message.  Instead, the attacker would have to modify both\n
    \  the offer message, as well as the message that contains the hash/\n   repetition.
    \ More importantly, the attacker would have to forge the\n   weak security that
    is present in the second message, and would have\n   to do so in real time between
    the sent offers and the later messages.\n   Otherwise, the peers would notice
    that the hash is incorrect.  If the\n   attacker is able to break the weak security,
    the security method\n   and/or the algorithm should not be used.\n   In conclusion,
    the security difference is making a trivial attack\n   possible versus demanding
    the attacker to break algorithms.  An\n   example of where this has a serious
    consequence is when a network is\n   first deployed with integrity protection
    (such as HTTP Digest [4]),\n   and then later new devices are added that support
    also encryption\n   (such as TLS [3]).  In this situation, an insecure negotiation\n
    \  procedure allows attackers to trivially force even new devices to use\n   only
    integrity protection.\n   Possible attacks against the security agreement include:\n
    \  1. Attackers could try to modify the server's list of security\n      mechanisms
    in the first response.  This would be revealed to the\n      server when the client
    returns the received list using the\n      security.\n   2. Attackers could also
    try to modify the repeated list in the second\n      request from the client.
    \ However, if the selected security\n      mechanism uses encryption this may
    not be possible, and if it uses\n      integrity protection any modifications
    will be detected by the\n      server.\n   3. Attackers could try to modify the
    client's list of security\n      mechanisms in the first message.  The client
    selects the security\n      mechanism based on its own knowledge of its own capabilities
    and\n      the server's list, hence the client's choice would be unaffected\n
    \     by any such modification.  However, the server's choice could\n      still
    be affected as described below:\n      *  If the modification affected the server's
    choice, the server\n         and client would end up choosing different security
    mechanisms\n         in Step 3 or 4 of Figure 1.  Since they would be unable to\n
    \        communicate to each other, this would be detected as a\n         potential
    attack.  The client would either retry or give up in\n         this situation.\n
    \     *  If the modification did not affect the server's choice, there's\n         no
    effect.\n   4. Finally, attackers may also try to reply old security agreement\n
    \     messages.  Each security mechanism must provide replay protection.\n      In
    particular, HTTP Digest implementations should carefully\n      utilize existing
    reply protection options such as including a\n      time-stamp to the nonce parameter,
    and using nonce counters [4].\n   All clients that implement this specification
    MUST select HTTP\n   Digest, TLS, IPsec, or any stronger method for the protection
    of the\n   second request.\n"
  title: 5. Security Considerations
- contents:
  - "6. IANA Considerations\n   This specification defines a new mechanism-name namespace
    in Section\n   2.2 which requires a central coordinating body.  The body responsible\n
    \  for this coordination is the Internet Assigned Numbers Authority\n   (IANA).\n
    \  This document defines four mechanism-names to be initially\n   registered,
    namely \"digest\", \"tls\", \"ipsec-ike\", and \"ipsec-man\".  In\n   addition
    to these mechanism-names, \"ipsec-3gpp\" mechanism-name is\n   also registered
    (see Appendix A).  Following the policies outlined in\n   [10], further mechanism-names
    are allocated based on IETF Consensus.\n   Registrations with the IANA MUST include
    the mechanism-name token\n   being registered, and a pointer to a published RFC
    describing the\n   details of the corresponding security mechanism.\n"
  - contents:
    - "6.1 Registration Information\n   IANA registers new mechanism-names at\n   http://www.iana.org/assignments/sip-parameters
      under \"Security\n   Mechanism Names\".  As this document specifies five mechanism-names,\n
      \  the initial IANA registration for mechanism-names will contain the\n   information
      shown in Table 2.  It also demonstrates the type of\n   information maintained
      by the IANA.\n      Mechanism Name                         Reference\n      --------------
      \                        ---------\n      digest                                 [RFC3329]\n
      \     tls                                    [RFC3329]\n      ipsec-ike                              [RFC3329]\n
      \     ipsec-man                              [RFC3329]\n      ipsec-3gpp                             [RFC3329]\n
      \              Table 2: Initial IANA registration.\n"
    title: 6.1 Registration Information
  - contents:
    - "6.2 Registration Template\n      To: ietf-sip-sec-agree-mechanism-name@iana.org\n
      \     Subject: Registration of a new SIP Security Agreement mechanism\n      Mechanism
      Name:\n         (Token value conforming to the syntax described in\n         Section
      2.2.)\n      Published Specification(s):\n         (Descriptions of new SIP
      Security Agreement mechanisms\n         require a published RFC.)\n"
    title: 6.2 Registration Template
  - contents:
    - "6.3 Header Field Names\n   This specification registers three new header fields,
      namely\n   Security-Client, Security-Server and Security-Verify.  These headers\n
      \  are defined by the following information, which has been included in\n   the
      sub-registry for SIP headers under\n   http://www.iana.org/assignments/sip-parameters.\n
      \     Header Name:    Security-Client\n      Compact Form:   (none)\n      Header
      Name:    Security-Server\n      Compact Form:   (none)\n      Header Name:    Security-Verify\n
      \     Compact Form:   (none)\n"
    title: 6.3 Header Field Names
  - contents:
    - "6.4 Response Codes\n   This specification registers a new response code, namely
      494\n   (Security Agreement Required).  The response code is defined by the\n
      \  following information, which has been included to the sub-registry\n   for
      SIP methods and response-codes under\n   http://www.iana.org/assignments/sip-parameters.\n
      \     Response Code Number:     494\n      Default Reason Phrase:    Security
      Agreement Required\n"
    title: 6.4 Response Codes
  - contents:
    - "6.5 Option Tags\n   This specification defines a new option tag, namely sec-agree.
      \ The\n   option tag is defined by the following information, which has been\n
      \  included in the sub-registry for option tags under\n   http://www.iana.org/assignments/sip-parameters.\n
      \  Name:         sec-agree\n   Description:  This option tag indicates support
      for the Security\n                 Agreement mechanism.  When used in the Require,
      or\n                 Proxy-Require headers, it indicates that proxy servers\n
      \                are required to use the Security Agreement mechanism.\n                 When
      used in the Supported header, it indicates that\n                 the User Agent
      Client supports the Security Agreement\n                 mechanism.  When used
      in the Require header in the 494\n                 (Security Agreement Required)
      or 421 (Extension\n                 Required) responses, it indicates that the
      User Agent\n                 Client must use the Security Agreement Mechanism.\n"
    title: 6.5 Option Tags
  title: 6. IANA Considerations
- contents:
  - "7. Contributors\n   Sanjoy Sen and Lee Valerius from Nortel Networks have contributed
    to\n   the document.\n"
  title: 7. Contributors
- contents:
  - "8. Acknowledgements\n   In addition to the contributors, the authors wish to
    thank Allison\n   Mankin, Rolf Blom, James Undery, Jonathan Rosenberg, Hugh Shieh,\n
    \  Gunther Horn, Krister Boman, David Castellanos-Zamora, Miguel Garcia,\n   Valtteri
    Niemi, Martin Euchner, Eric Rescorla and members of the 3GPP\n   SA3 group for
    interesting discussions in this problem space.\n"
  title: 8. Acknowledgements
- contents:
  - "9. Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,
    G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M. and E. Schooler,
    \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]   Kent,
    S. and R. Atkinson, \"Security Architecture for the\n         Internet Protocol\",
    RFC 2401, November 1998.\n   [3]   Dierks, T. and C. Allen, P. Kocher, \"The TLS
    Protocol Version\n         1.0\", RFC 2246, January 1999.\n   [4]   Franks, J.,
    Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n         Leach, P., Luotonen,
    A. and L. Stewart, \"HTTP Authentication:\n         Basic and Digest Access Authentication\",
    RFC 2617, June 1999.\n   [5]   Rosenberg, J. and H. Schulzrinne, \"Session Initiation
    Protocol\n         (SIP): Locating SIP Servers\", RFC 3263, June 2002.\n   [6]
    \  Kent, S. and R. Atkinson, \"IP Authentication Header\", RFC 2402,\n         November
    1998.\n   [7]   Kent, S. and R. Atkinson, \"IP Encapsulating Security Payload\n
    \        (ESP)\", RFC 2406, November 1998.\n   [8]   Harkins, D. and D. Carrel,
    \"The Internet Key Exchange (IKE)\",\n         RFC 2409, November 1998.\n   [9]
    \  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n         Levels\",
    BCP 14, RFC 2119, March 1997.\n   [10]  Narten, T. and H. Alvestrand, \"Guidelines
    for Writing an IANA\n         Considerations Section in RFCs\", BCP 26, RFC 2434,
    October\n         1998.\n"
  title: 9. Normative References
- contents:
  - "10. Informative References\n   [11]  Garcia-Martin, M., \"3rd-Generation Partnership
    Project (3GPP)\n         Release 5 requirements on the  Session Initiation Protocol\n
    \        (SIP)\", Work in Progress.\n   [12]  3rd Generation Partnership Project,
    \"Access security for IP-\n         based services, Release 5\", TS 33.203 v5.3.0,
    September 2002.\n   [13]  Madson, C. and R. Glenn, \"The Use of HMAC-MD5-96 within
    ESP and\n         AH\", RFC 2403, November 1998.\n   [14]  Madson, C. and R. Glenn,
    \"The Use of HMAC-SHA-1-96 within ESP\n         and AH\", RFC 2404, November 1998.\n
    \  [15]  Pereira, R. and R. Adams, \"The ESP CBC-Mode Cipher Algorithms\",\n         RFC
    2451, November 1998.\n"
  title: 10. Informative References
- contents:
  - "Appendix A. Syntax of ipsec-3gpp\n   This appendix extends the security agreement
    framework described in\n   this document with a new security mechanism: \"ipsec-3gpp\".
    \ This\n   security mechanism and its associated parameters are used in the 3GPP\n
    \  IP Multimedia Subsystem [12].  The Augmented BNF definitions below\n   follow
    the syntax of SIP [1].\n      mechanism-name   = ( \"ipsec-3gpp\" )\n      mech-parameters
    \   = ( algorithm / protocol /mode /\n                             encrypt-algorithm
    / spi /\n                             port1 / port2 )\n      algorithm          =
    \"alg\" EQUAL ( \"hmac-md5-96\" /\n                                         \"hmac-sha-1-96\"
    )\n      protocol           = \"prot\" EQUAL ( \"ah\" / \"esp\" )\n      mode
    \              = \"mod\" EQUAL ( \"trans\" / \"tun\" )\n      encrypt-algorithm
    \ = \"ealg\" EQUAL ( \"des-ede3-cbc\" / \"null\" )\n      spi                =
    \"spi\" EQUAL spivalue\n      spivalue           = 10DIGIT; 0 to 4294967295\n
    \     port1              = \"port1\" EQUAL port\n      port2              = \"port2\"
    EQUAL port\n      port               = 1*DIGIT\n   The parameters described by
    the BNF above have the following\n   semantics:\n      Algorithm\n         This
    parameter defines the used authentication algorithm.  It\n         may have a
    value of \"hmac-md5-96\" for HMAC-MD5-96 [13], or\n         \"hmac-sha-1-96\"
    for HMAC-SHA-1-96 [14].  The algorithm\n         parameter is mandatory.\n      Protocol\n
    \        This parameter defines the IPsec protocol.  It may have a value\n         of
    \"ah\" for AH [6], or \"esp\" for ESP [7].  If no Protocol\n         parameter
    is present, the protocol will be ESP by default.\n      Mode\n         This parameter
    defines the mode in which the IPsec protocol is\n         used.  It may have a
    value of \"trans\" for transport mode, or a\n         value of \"tun\" for tunneling
    mode.  If no Mode parameter is\n         present the IPsec protocol is used in
    transport mode.\n      Encrypt-algorithm\n         This parameter defines the
    used encryption algorithm.  It may\n         have a value of \"des-ede3-cbc\"
    for 3DES [15], or \"null\" for no\n         encryption.  If no Encrypt-algorithm
    parameter is present,\n         encryption is not used.\n      Spi\n         Defines
    the SPI number used for inbound messages.\n      Port1\n         Defines the destination
    port number for inbound messages that\n         are protected.\n      Port2\n
    \        Defines the source port number for outbound messages that are\n         protected.
    \ Port 2 is optional.\n   The communicating SIP entities need to know beforehand
    which keys to\n   use.  It is also assumed that the underlying IPsec implementation\n
    \  supports selectors that allow all transport protocols supported by\n   SIP
    to be protected with a single SA.  The duration of security\n   association is
    the same as in the expiration interval of the\n   corresponding registration binding.\n"
  title: Appendix A. Syntax of ipsec-3gpp
- contents:
  - "Authors' Addresses\n   Jari Arkko\n   Ericsson\n   Jorvas, FIN  02420\n   Finland\n
    \  Phone: +358 40 507 9256\n   EMail: jari.arkko@ericsson.com\n   Vesa Torvinen\n
    \  Ericsson\n   Joukahaisenkatu 1\n   Turku, FIN  20520\n   Finland\n   Phone:
    +358 40 723 0822\n   EMail: vesa.torvinen@ericsson.fi\n   Gonzalo Camarillo\n
    \  Advanced Signalling Research Lab.\n   Ericsson\n   FIN-02420 Jorvas\n   Finland\n
    \  Phone: +358 40 702 3535\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Aki Niemi\n
    \  NOKIA Corporation\n   P.O.Box 321, FIN 00380\n   Finland\n   Phone: +358 50
    389 1644\n   EMail: aki.niemi@nokia.com\n   Tao Haukka\n   Nokia Corporation\n
    \  P.O. Box 50\n   FIN - 90570 Oulu\n   Finland\n   Phone: +358 40 517 0079\n
    \  EMail: tao.haukka@nokia.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
