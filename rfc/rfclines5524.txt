Abstract The URLFETCH command defined as part of URLAUTH provides a mechanism for third parties to gain access to data held within messages in a user's private store; however, this data is sent verbatim, which is not suitable for a number of applications.
This memo specifies a method for obtaining data in forms suitable for non mail applications.
Although [URLAUTH] provides a URLFETCH command that can be used to dereference a URL and return the body part data, it does so by returning the encoded form, without sufficient metadata to decode.
This is suitable for use in mail applications such as [BURL], where the encoded form is suitable, but not where access to the actual content is required, such as in [STREAMING].
This memo specifies a mechanism that returns additional metadata about the part, such as its [MEDIATYPE] type, as well as removes any content transfer encoding that was used on the body part.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Protocol examples are line wrapped for clarity.
Implementors should note these notations are for editorial clarity only.
This extension is available in any IMAP server implementation that includes URLAUTH BINARY within its capability string.
Such servers accept additional, per URL parameters to the URLFETCH command and will provide, upon request, specific data for each URL dereferenced.
The URLFETCH command is extended by the provision of optional parameters.
The extended URLFETCH command is distinct by enclosing each URL and associated parameters in a parenthesized list.
Cases where there is an absence of any parameters or where the URL is sent unenclosed cause the command to behave precisely as specified in [URLAUTH].
Similarly, if the URL is invalid, the command will behave precisely as specified in [URLAUTH] and return a simple NIL.
Available parameters are: BODYPARTSTRUCTURE Provide a BODYPARTSTRUCTURE.
BODYPARTSTRUCTURE is defined in [CONVERT] and provides metadata useful for processing applications, such as the type of data.
BINARY Provide the data without any Content Transfer Encoding.
In particular, this means that the data MAY contain NUL octets and not be formed from textual lines.
Data containing NUL octets MUST be transferred using the literal8 syntax defined in [BINARY].
BODY Provide the data as is.
This will provide the same data as the unextended [URLAUTH] as a metadata item.
Metadata items MUST NOT appear more than once per URL requested, and clients MUST NOT request both BINARY and BODY.
In order to carry any requested metadata and provide additional information to the consumer, the URLFETCH response is similarly extended.
Following the URL itself, servers will include a series of parenthesized metadata elements.
Defined metadata elements are as follows:
The BODYPARTSTRUCTURE provides information about the data contained in the response, as it has been returned.
It will reflect any conversions or decoding that have taken place.
In particular, this will show an identity encoding if BINARY is also requested.
The BINARY item provides the content, without any content transfer encoding applied.
If this is not possible (for example, the content transfer encoding is unknown to the server), then this MAY contain NIL.
Servers MUST understand all identity content transfer encodings defined in [MIME], as well as the transformation encodings "Base64" [BASE64] and "Quoted Printable" [MIME].
The BODY item provides the content as found in the message, with any content transfer encoding still applied.
Requesting only the BODY will provide equivalent functionality to the unextended [URLAUTH], however, using the extended syntax described herein.
Note that unlike [CONVERT], BODYPARTSTRUCTURE is not appended with the part specifier, as this is implicit in the URL.
A client requests the data with no content transfer encoding.
A001 URLFETCH  ("imap://joe@example.com/INBOX/;uid 20/; section 1.2;urlauth anonymous:
"imap://joe@example.com/INBOX/;uid 20/; section 1.2;urlauth anonymous:internal:
Si vis pacem, para bellum.
A001 OK URLFETCH completed Note that the data here does not contain a NUL octet;
A client again requests data with no content transfer encoding, but this time requests the body structure.
A001 URLFETCH  ("imap://joe@example.com/INBOX/;uid 20/; section 1.3;urlauth anonymous:internal: ae354a473744909de610943775f92038" BINARY BODYPARTSTRUCTURE)
"imap://joe@example.com/INBOX/;uid 20/; section 1.3;urlauth anonymous:internal: ae354a473744909de610943775f92038" (BODYPARTSTRUCTURE ("IMAGE" "PNG" ()
(BINARY ~{123} S: [123 octets of data, some of which is NUL])
A001 OK URLFETCH completed A client requests only the body structure.
A001 URLFETCH  ("imap://joe@example.com/INBOX/;uid 20/; section 1.3;urlauth anonymous:internal
A001 OK URLFETCH completed A client requests the body structure and the original content.
A001 URLFETCH  ("imap://joe@example.com/INBOX/;uid 20/; section 1.3;urlauth anonymous:internal: ae354a473744909de610943775f92038" BODYPARTSTRUCTURE BODY)
(BODY {164} S: [164 octets of base64 encoded data])
A001 OK URLFETCH completed Some parts cannot be decoded, so the server will provide the BODYPARTSTRUCTURE of the part as is and provide NIL for the binary content:
A001 URLFETCH ("imap://joe@example.com/INBOX/;uid 20/; section 1.4;urlauth anonymous:internal: 87ecbd02095b815e699503fc20d869c8" BODYPARTSTRUCTURE BINARY)
"imap://joe@example.com/INBOX/;uid 20/; section 1.4;urlauth anonymous:internal: 87ecbd02095b815e699503fc20d869c8" (BODYPARTSTRUCTURE ("IMAGE" "PNG" ()
A001 OK URLFETCH completed If a part simply doesn't exist, however, or the URI is invalid for some other reason, then NIL is returned instead of metadata
A001 URLFETCH ("imap://joe@example.com/INBOX/;uid 20/; section 200;urlauth anonymous:
A001 OK URLFETCH completed 5.
This formal syntax uses ABNF as specified in [ABNF], and includes productions defined in [URLAUTH], [BINARY], and [IMAP].
full SP nstring ; If client issues url fetch simple, server MUST respond with ; urldata simple.
; Otherwise, content SHOULD use nstring.
; On decoding error, NIL should be used.
IANA Considerations IMAP4 capabilities are registered by publishing a Standards Track or IESG approved Experimental RFC.
This document defines the URLFETCH BINARY IMAP capability.
IANA has added it to the registry accordingly.
Security Considerations Implementors are directed to the security considerations within [IMAP], [URLAUTH], and [BINARY].
The ability of the holder of a URL to be able to fetch metadata about the content pointed to by the URL as well as the content itself allows a potential attacker to discover more about the content than was previously possible, including its original filename and user  supplied description.
The additional value of this information to an attacker is marginal, and applies only to those URLs for which the attacker does not have direct access, such as those produced by [URLAUTH].
Implementors are therefore directed to the security considerations present in [URLAUTH].
