- title: __initial_text__
  contents:
  - "    A Network Address Translator (NAT) Traversal Mechanism for Media\n      \
    \   Controlled by the Real-Time Streaming Protocol (RTSP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a solution for Network Address Translation\n\
    \   (NAT) traversal for datagram-based media streams set up and\n   controlled\
    \ with the Real-Time Streaming Protocol version 2 (RTSP\n   2.0).  It uses Interactive\
    \ Connectivity Establishment (ICE) adapted\n   to use RTSP as a signaling channel,\
    \ defining the necessary RTSP\n   extensions and procedures.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7825.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Key Words .......................................................4\n  \
    \ 3. Solution Overview ...............................................4\n   4.\
    \ RTSP Extensions .................................................6\n      4.1.\
    \ ICE Transport Lower Layer ..................................6\n      4.2. ICE\
    \ Candidate Transport Header Parameter ...................8\n      4.3. ICE Password\
    \ and Username Transport Header Parameters .....11\n      4.4. ICE Feature Tag\
    \ ...........................................11\n      4.5. Status Codes ..............................................12\n\
    \           4.5.1. 150 Server still working on ICE\n                  connectivity\
    \ checks ................................12\n           4.5.2. 480 ICE Connectivity\
    \ check failure .................12\n      4.6. New Reason for PLAY_NOTIFY ................................12\n\
    \      4.7. Server-Side SDP Attribute for ICE Support .................13\n  \
    \ 5. ICE-RTSP .......................................................13\n    \
    \  5.1. ICE Features Not Required .................................13\n      \
    \     5.1.1. ICE-Lite ...........................................13\n        \
    \   5.1.2. ICE-Mismatch .......................................13\n          \
    \ 5.1.3. ICE Remote Candidate Transport Header Parameter ....14\n      5.2. High-Reachability\
    \ Configuration ...........................14\n   6. Detailed Solution ..............................................14\n\
    \      6.1. Session Description and RTSP DESCRIBE (Optional) ..........14\n  \
    \    6.2. Setting Up the Media Streams ..............................15\n    \
    \  6.3. RTSP SETUP Request ........................................16\n      6.4.\
    \ Gathering Candidates ......................................16\n      6.5. RTSP\
    \ Server Response ......................................17\n      6.6. Server-to-Client\
    \ ICE Connectivity Checks ..................18\n      6.7. Client-to-Server ICE\
    \ Connectivity Check ...................19\n      6.8. Client Connectivity Checks\
    \ Complete .......................20\n      6.9. Server Connectivity Checks Complete\
    \ .......................20\n      6.10. Freeing Candidates .......................................20\n\
    \      6.11. Steady State .............................................21\n  \
    \    6.12. Re-SETUP .................................................21\n    \
    \  6.13. Server-Side Changes after Steady State ...................22\n   7. ICE\
    \ and Proxies ................................................24\n      7.1. Media-Handling\
    \ Proxies ....................................24\n      7.2. Signaling-Only Proxies\
    \ ....................................25\n      7.3. Non-supporting Proxies ....................................25\n\
    \   8. RTP and RTCP Multiplexing ......................................26\n  \
    \ 9. Fallback and Using Partial ICE Functionality to Improve\n      NAT/Firewall\
    \ Traversal .........................................27\n   10. IANA Considerations\
    \ ...........................................28\n      10.1. RTSP Feature Tags\
    \ ........................................28\n      10.2. Transport Protocol Identifiers\
    \ ...........................28\n      10.3. RTSP Transport Parameters ................................29\n\
    \      10.4. RTSP Status Codes ........................................29\n  \
    \    10.5. Notify-Reason Value ......................................29\n    \
    \  10.6. SDP Attribute ............................................29\n   11.\
    \ Security Considerations .......................................30\n      11.1.\
    \ ICE and RTSP .............................................30\n      11.2. Logging\
    \ ..................................................30\n   12. References ....................................................31\n\
    \      12.1. Normative References .....................................31\n  \
    \    12.2. Informative References ...................................32\n   Acknowledgments\
    \ ...................................................33\n   Authors' Addresses\
    \ ................................................33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   \"Real Time Streaming Protocol (RTSP)\" [RFC2326] and RTSP\
    \ 2.0\n   [RFC7826] are protocols used to set up and control one or more media\n\
    \   streams delivering media to receivers.  It is RTSP's functionality of\n  \
    \ setting up media streams that causes serious issues with Network\n   Address\
    \ Translators (NATs) [RFC3022] unless extra provisions are made\n   by the protocol.\
    \  Thus, there is a need for a NAT traversal mechanism\n   for the media setup\
    \ using RTSP.\n   RTSP 1.0 [RFC2326] has suffered from the lack of a standardized\
    \ NAT\n   traversal mechanism for a long time; however, due to quality of the\n\
    \   RTSP 1.0 specification, the work was difficult to specify in an\n   interoperable\
    \ fashion.  This document is therefore built on the\n   specification of RTSP\
    \ 2.0 [RFC7826].  RTSP 2.0 is similar to RTSP 1.0\n   in many respects, but, significantly\
    \ for this work, it contains a\n   well-defined extension mechanism that allows\
    \ a NAT traversal\n   extension to be defined that is backwards compatible with\
    \ RTSP 2.0\n   peers not supporting the extension.  This extension mechanism was\
    \ not\n   possible in RTSP 1.0 as it would break RTSP 1.0 syntax and cause\n \
    \  compatibility issues.\n   There have been a number of suggested ways of resolving\
    \ the NAT\n   traversal of media for RTSP, most of which are already used in\n\
    \   implementations.  The evaluation of these NAT-traversal solutions in\n   [RFC7604]\
    \ has shown that there are many issues to consider.  After\n   extensive evaluation,\
    \ a mechanism based on Interactive Connectivity\n   Establishment (ICE) [RFC5245]\
    \ was selected.  There were mainly two\n   reasons: the mechanism supports RTSP\
    \ servers behind NATs and the\n   mechanism mitigates the security threat of using\
    \ RTSP servers as\n   Distributed Denial-of-Service (DDoS) attack tools.\n   This\
    \ document specifies an ICE-based solution that is optimized for\n   media delivery\
    \ from server to client.  If future extensions are\n   specified for other delivery\
    \ modes than \"PLAY\", then the\n   optimizations in regard to when PLAY requests\
    \ are sent needs to be\n   reconsidered.\n   The NAT problem for RTSP signaling\
    \ traffic is a less prevalent\n   problem than the NAT problem for RTSP media\
    \ streams.  Consequently,\n   the former is left for future study.\n   The ICE\
    \ usage defined in this specification is called \"ICE-RTSP\" and\n   does not\
    \ match the full ICE for SIP/SDP (Session Description\n   Protocol) or ICE-Lite\
    \ as defined in the ICE specification [RFC5245].\n   ICE-RTSP is tailored to the\
    \ needs of RTSP and is slightly simpler\n   than ICE-Full for both clients and\
    \ servers.\n"
- title: 2.  Key Words
  contents:
  - "2.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in RFC\n   2119 [RFC2119].\n"
- title: 3.  Solution Overview
  contents:
  - "3.  Solution Overview\n   This overview assumes that the reader has some familiarity\
    \ with how\n   ICE [RFC5245] in the context of \"SIP: Session Initiation Protocol\"\
    \n   [RFC3261] and \"An Offer/Answer Model with the Session Description\n   Protocol\
    \ (SDP)\" [RFC3264] works, as it primarily points out how the\n   different ICE\
    \ steps are accomplished in RTSP.\n   1.   The RTSP server should indicate it\
    \ has support for ICE via a new\n        SDP [RFC4566] attribute (\"a=rtsp-ice-d-m\"\
    ) in, for example, the\n        SDP returned in the RTSP DESCRIBE message.  This\
    \ allows RTSP\n        clients to only perform the new ICE exchanges with servers\
    \ that\n        support ICE.  If RTSP DESCRIBE is used, the normal capability\n\
    \        determination mechanism should also be used, i.e., Supported\n      \
    \  header with a new ICE feature tag.  Note: both mechanisms should\n        be\
    \ supported, as there are various use cases where only one of\n        them is\
    \ used.\n   2.   The RTSP client reviews the session description returned, for\n\
    \        example by an RTSP DESCRIBE message, to determine what media\n      \
    \  streams need to be set up.  For each of these media streams\n        where\
    \ the transport protocol supports connectivity checks based\n        on Session\
    \ Traversal Utilities for (NAT) (STUN) [RFC5389], the\n        client gathers\
    \ candidate addresses.  See Section 4.1.1 in ICE\n        [RFC5245].  The client\
    \ then runs a STUN server on each of the\n        local candidate's transport\
    \ addresses it has gathered.\n   3.   The RTSP client sends SETUP requests containing\
    \ a transport\n        specification with a lower layer indicating ICE and a new\
    \ RTSP\n        Transport header parameter \"candidates\" listing the ICE\n  \
    \      candidates for each media stream.\n   4.   After receiving the list of\
    \ candidates from a client, the RTSP\n        server gathers its own candidates.\
    \  If the server is not behind\n        a NAT, then a single candidate per address\
    \ family (e.g., IPv4\n        and IPv6), media stream, and media component tuple\
    \ can be\n        included to reduce the number of combinations and speed up the\n\
    \        completion.\n   5.   The server sets up the media and, if successful,\
    \ responds to the\n        SETUP request with a 200 OK response.  In that response,\
    \ the\n        server selects the transport specification using ICE and\n    \
    \    includes its candidates in the candidates parameter.\n   6.   The server\
    \ starts the connectivity checks following the\n        procedures described in\
    \ Sections 5.7 and 5.8 of ICE [RFC5245].\n        If the server is not behind\
    \ a NAT and uses a public IP address\n        with a single candidate per (media\
    \ stream, component, address\n        family) tuple, then the server may be configured\
    \ to not initiate\n        connectivity checks.\n   7.   The client receives the\
    \ SETUP response and learns the candidate\n        addresses to use for the connectivity\
    \ checks and then initiates\n        its connectivity check, following the procedures\
    \ in Section 6 of\n        ICE [RFC5245].\n   8.   When a connectivity check from\
    \ the client reaches the server, it\n        will result in a triggered check\
    \ from the server.  This is why\n        servers not behind a NAT can wait until\
    \ this triggered check to\n        send out any checks for itself, so saving resources\
    \ and\n        mitigating the DDoS potential from server-initiated connectivity\n\
    \        checks.\n   9.   When the client has concluded its connectivity checks,\
    \ including\n        nominating candidates, and has correspondingly received the\n\
    \        server connectivity checks on the nominated candidates for all\n    \
    \    mandatory components of all media streams, it can issue a PLAY\n        request.\
    \  If the connectivity checks have not concluded\n        successfully, then the\
    \ client may send a new SETUP request if it\n        has any new information or\
    \ believes the server may be able to do\n        more that can result in successful\
    \ checks.\n   10.  When the RTSP server receives a PLAY request, it checks to\
    \ see\n        that the connectivity checks have concluded successfully, and\n\
    \        only then can it play the stream.  If there is a problem with\n     \
    \   the checks, then the server sends either a 150 (Server still\n        working\
    \ on ICE connectivity checks) response to show that it is\n        still working\
    \ on the connectivity checks, or a 480 (ICE\n        Connectivity check failure)\
    \ response to indicate a failure of\n        the checks.  If the checks are successful,\
    \ then the server sends\n        a 200 OK response and starts delivering media.\n\
    \   The client and server may release unused candidates when the ICE\n   processing\
    \ has concluded, a single candidate per component has been\n   nominated, and\
    \ a PLAY response has been received (client) or sent\n   (server).\n   The client\
    \ needs to continue to use STUN as a keep-alive mechanism\n   for the used candidate\
    \ pairs to keep their NAT bindings current.\n   RTSP servers behind NATs will\
    \ also need to send keep-alive messages\n   when not sending media.  This is important\
    \ since RTSP media sessions\n   often contain only media traffic from the server\
    \ to the client so the\n   bindings in the NAT need to be refreshed by client-to-server\
    \ traffic\n   provided by the STUN keep-alive.\n"
- title: 4.  RTSP Extensions
  contents:
  - "4.  RTSP Extensions\n   This section defines the necessary RTSP extensions for\
    \ performing ICE\n   with RTSP.  Note that these extensions are based on the SDP\n\
    \   attributes in the ICE specification unless expressly indicated\n   otherwise.\n"
- title: 4.1.  ICE Transport Lower Layer
  contents:
  - "4.1.  ICE Transport Lower Layer\n   A new lower layer \"D-ICE\" for transport\
    \ specifications is defined.\n   This lower layer is datagram clean except that\
    \ the protocol used must\n   be possible to demultiplex from STUN messages (see\
    \ STUN [RFC5389]).\n   By \"datagram clean\" we mean that it has to be capable\
    \ of describing\n   the length of the datagram, transport that datagram (as a\
    \ binary\n   chunk of data), and provide it at the receiving side as one single\n\
    \   item.  This lower layer can be any transport type defined for ICE\n   that\
    \ does provide datagram transport capabilities.  UDP-based\n   transport candidates\
    \ are defined in ICE [RFC5245] and MUST be\n   supported.  It is OPTIONAL to also\
    \ support TCP-based candidates as\n   defined by \"TCP Candidates with Interactive\
    \ Connectivity\n   Establishment (ICE)\" [RFC6544].  The TCP-based candidate fulfills\
    \ the\n   requirements on providing datagram transport and can thus be used in\n\
    \   combination with RTP.  Additional transport types for candidates may\n   be\
    \ defined in the future.\n   This lower layer uses ICE to determine which of the\
    \ different\n   candidates shall be used and then, when the ICE processing has\n\
    \   concluded, uses the selected candidate to transport the datagrams\n   over\
    \ this transport.\n   This lower-layer transport can be combined with all upper-layer\
    \ media\n   transport protocols that are possible to demultiplex with STUN and\n\
    \   that use datagrams.  This specification defines the following\n   combinations:\n\
    \   o  RTP/AVP/D-ICE\n   o  RTP/AVPF/D-ICE\n   o  RTP/SAVP/D-ICE\n   o  RTP/SAVPF/D-ICE\n\
    \   This list can be extended with more transport specifications after\n   having\
    \ performed the evaluation that they are compatible with D-ICE\n   as lower layer.\
    \  The registration is required to follow the registry\n   rules for the Transport\
    \ Protocol Identifier (see Section 22.13.1 of\n   [RFC7826]).\n   The lower-layer\
    \ \"D-ICE\" has the following rules for the inclusion of\n   the RTSP Transport\
    \ header (Section 18.54 of RTSP 2.0 [RFC7826])\n   parameters:\n   unicast:  ICE\
    \ only supports unicast operations; thus, it is REQUIRED\n      that one include\
    \ the unicast indicator parameter (see\n      Section 18.54 in RTSP 2.0 [RFC7826]).\n\
    \   candidates:  The \"candidates\" parameter SHALL be included as it\n      specifies\
    \ at least one candidate with which to try to establish a\n      working transport\
    \ path.\n   dest_addr:  This parameter MUST NOT be included since \"candidates\"\
    \ is\n      used instead to provide the necessary address information.\n   ICE-Password:\
    \  This parameter SHALL be included (see Section 4.2).\n   ICE-ufrag:  This parameter\
    \ SHALL be included (see Section 4.2).\n"
- title: 4.2.  ICE Candidate Transport Header Parameter
  contents:
  - "4.2.  ICE Candidate Transport Header Parameter\n   This section defines a new\
    \ RTSP transport parameter for carrying ICE\n   candidates related to the transport\
    \ specification they appear within,\n   which may then be validated with an end-to-end\
    \ connectivity check\n   using STUN [RFC5389].  Transport parameters may only\
    \ occur once in\n   each transport specification.  For transport specifications\
    \ using\n   \"D-ICE\" as lower layer, this parameter MUST be present.  The\n \
    \  parameter can contain one or more ICE candidates.  In the SETUP\n   response,\
    \ there is only a single transport specification; if that\n   uses the \"D-ICE\"\
    \ lower layer, this parameter MUST be present and\n   include the server-side\
    \ candidates.\n   The ABNF [RFC5234] for these transport header parameters are:\n\
    \   trns-parameter = <Defined in Section 20.2.3 of [RFC7826]>\n   trns-parameter\
    \ =/ SEMI ice-trn-par\n   ice-trn-par    = \"candidates\" EQUAL DQUOTE SWS ice-candidate\n\
    \                                       *(SEMI ice-candidate) SWS DQUOTE\n   ice-candidate\
    \  = foundation SP\n                    component-id SP\n                    transport\
    \ SP\n                    priority SP\n                    connection-address\
    \ SP\n                    port SP\n                    cand-type\n           \
    \         [SP rel-addr]\n                    [SP rel-port]\n                 \
    \   [SP tcp-type-ext] ; Mandatory if transport = TCP\n                    *(SP\
    \ extension-att-name SP extension-att-value)\n   foundation            = <See\
    \ Section 15.1 of [RFC5245]>\n   component-id          = <See Section 15.1 of\
    \ [RFC5245]>\n   transport             = <See Section 15.1 of [RFC5245]>\n   priority\
    \              = <See Section 15.1 of [RFC5245]>\n   cand-type             = <See\
    \ Section 15.1 of [RFC5245]>\n   rel-addr              = <See Section 15.1 of\
    \ [RFC5245]>\n   rel-port              = <See Section 15.1 of [RFC5245]>\n   tcp-type-ext\
    \          = <See Section 4.5 of [RFC6544]>\n   extension-att-name    = <See Section\
    \ 15.1 of [RFC5245]>\n   extension-att-value   = <See Section 15.1 of [RFC5245]>\n\
    \   connection-address    = <See [RFC4566]>\n   port                  = <See [RFC4566]>\n\
    \   EQUAL                 = <Defined in [RFC7826]>\n   DQUOTE                =\
    \ <Defined in [RFC7826]>\n   SWS                   = <Defined in [RFC7826]>\n\
    \   SEMI                  = <Defined in [RFC7826]>\n   SP                    =\
    \ <Defined in [RFC7826]>\n   <connection-address>:  is the unicast IP address\
    \ of the candidate,\n      allowing for IPv4 addresses, IPv6 addresses, and Fully\
    \ Qualified\n      Domain Names (FQDNs), taken from SDP [RFC4566].  Note, this\n\
    \      context MUST have a unicast address for this parameter, even\n      though\
    \ a multicast address would be syntactically valid.  The\n      connection address\
    \ SHOULD use the same format (explicit IP or\n      FQDN) as in the dest_addr\
    \ parameter used in the transport\n      specification that express any fallback.\
    \  An IP address is\n      preferred for simplicity, but both an IP Address and\
    \ FQDN can be\n      used.  In the FQDN case, when receiving a SETUP request or\n\
    \      response containing an FQDN in an ice-candidate parameter, the\n      FQDN\
    \ is looked up in the DNS first using a AAAA record (assuming\n      the agent\
    \ supports IPv6), and if no result is found or the agent\n      only supports\
    \ IPv4, using an A record.  If the DNS query returns\n      more than one IP address,\
    \ one is chosen, and then used for the\n      remainder of ICE processing, which\
    \ in RTSP is subsequent RTSP\n      SETUPs for the same RTSP session.\n   <port>:\
    \  is the port of the candidate; the syntax is defined by SDP\n      [RFC4566].\n\
    \   <transport>:   indicates the transport protocol for the candidate.\n     \
    \ The ICE specification defines UDP.  \"TCP Candidates with\n      Interactive\
    \ Connectivity Establishment (ICE)\" [RFC6544] defines\n      how TCP is used\
    \ as candidates.  Additional extensibility is\n      provided to allow for future\
    \ transport protocols to be used with\n      ICE, such as the Datagram Congestion\
    \ Control Protocol (DCCP)\n      [RFC4340].\n   <foundation>:   is an identifier\
    \ that is equivalent for two\n      candidates that are of the same type, share\
    \ the same base IP\n      address, and come from the same STUN server.  It is\
    \ composed of\n      one to thirty two <ice-char>.  The foundation is used to\
    \ optimize\n      ICE performance in the Frozen algorithm (as described in\n \
    \     [RFC5245]).\n   <component-id>:  identifies the specific component of the\
    \ media\n      stream for which this is a candidate and is a positive integer\n\
    \      belonging to the range 1-256.  It MUST start at 1 and MUST\n      increment\
    \ by 1 for each component of a particular media stream.\n      For media streams\
    \ based on RTP, candidates for the actual RTP\n      media MUST have a component\
    \ ID of 1, and candidates for RTCP MUST\n      have a component ID of 2 unless\
    \ RTP and RTCP Multiplexing\n      (Section 8) is used, in which case the second\
    \ component is omitted\n      and RTP and RTCP are both transported over the first\
    \ component.\n      Other types of media streams that require multiple components\
    \ MUST\n      develop specifications that define the mapping of components to\n\
    \      component IDs.  See Section 14 in [RFC5245] for additional\n      discussion\
    \ on extending ICE to new media streams.\n   <priority>:  is a positive integer\
    \ in the range 1 to (2**31 - 1).\n   <cand-type>:  encodes the type of candidate.\
    \  The ICE specification\n      defines the values \"host\", \"srflx\", \"prflx\"\
    , and \"relay\" for host,\n      server-reflexive, peer-reflexive, and relayed\
    \ candidates,\n      respectively.  The set of candidate types is extensible for\
    \ the\n      future.\n   <rel-addr> and <rel-port>:  convey transport addresses\
    \ related to the\n      candidate, useful for diagnostics and other purposes.\
    \ <rel-addr>\n      and <rel-port> MUST be present for server-reflexive, peer-\n\
    \      reflexive, and relayed candidates.  If a candidate is server- or\n    \
    \  peer-reflexive, <rel-addr> and <rel-port> are equal to the base\n      for\
    \ that server- or peer-reflexive candidate.  If the candidate is\n      relayed,\
    \ <rel-addr> and <rel-port> are equal to the mapped address\n      in the TURN\
    \ Allocate Response that provided the client with that\n      relayed candidate\
    \ (see Appendix B.3 of ICE [RFC5245] for a\n      discussion of its purpose).\
    \  If the candidate is a host candidate,\n      <rel-addr> and <rel-port> MUST\
    \ be omitted.\n   <tcp-type-ext>:  conveys the candidate's connection type (active,\n\
    \      passive, or simultaneous-open (S-O)) for TCP-based candidates.\n      This\
    \ MUST be included for candidates that have <transport> set to\n      TCP and\
    \ MUST NOT be included for other transport types, including\n      UDP.\n   <extension-att-name>\
    \ and <extension-att-value>:  These are prototypes\n      for future extensions\
    \ of the candidate line.  The ABNF for these\n      allows any 8-bit value except\
    \ NUL, CR, or LF.  However, the\n      extensions will occur within a structured\
    \ line that uses the\n      DQUOTE, SEMI, SWS, and SP ABNF constructs as delimiters;\
    \ thus,\n      those delimiter characters MUST be escaped if they would occur\n\
    \      within an extension-att-name or extension-att-value.  The escape\n    \
    \  mechanism that MUST be used is the Percent-Encoding defined in\n      Section\
    \ 2.1 of [RFC3986].  This mechanism is selected as it needs\n      to be supported\
    \ in an RTSP implementation to deal with URIs\n      anyway.  The byte values\
    \ (in hex) that MUST be escaped are the\n      following: 0x09, 0x20, 0x22, 0x25,\
    \ and 0x3B.\n"
- title: 4.3.  ICE Password and Username Transport Header Parameters
  contents:
  - "4.3.  ICE Password and Username Transport Header Parameters\n   The ICE password\
    \ and username for each agent need to be transported\n   using RTSP.  For that\
    \ purpose, new Transport header parameters are\n   defined (see Section 18.54\
    \ of [RFC7826].\n   There MUST be an \"ICE-Password\" and \"ICE-ufrag\" parameter\
    \ for each\n   media stream.  The ICE-ufrag and ICE-Password parameter values\
    \ MUST\n   be chosen randomly at the beginning of a session.  The ICE-ufrag\n\
    \   value MUST contain at least 24 bits of randomness, and the ICE-\n   Password\
    \ value MUST contain at least 128 bits of randomness.  This\n   means that the\
    \ ICE-ufrag value will be at least 4 characters long,\n   and the ICE-Password\
    \ value at least 22 characters long, since the\n   grammar for these attributes\
    \ allows for 6 bits of randomness per\n   character.  The values MAY be longer\
    \ than 4 and 22 characters\n   respectively, of course, up to 256 characters.\
    \  The upper limit\n   allows for buffer sizing in implementations.  Its large\
    \ upper limit\n   allows for increased amounts of randomness to be added over\
    \ time.\n   The ABNF [RFC5234] for these parameters is:\n   trns-parameter   =/\
    \ SEMI ice-password-par\n   trns-parameter   =/ SEMI ice-ufrag-par\n   ice-password-par\
    \ = \"ICE-Password\" EQUAL DQUOTE password DQUOTE\n   ice-ufrag-par    = \"ICE-ufrag\"\
    \ EQUAL DQUOTE ufrag DQUOTE\n   password         = <Defined in [RFC5245], Section\
    \ 15.4>\n   ufrag            = <Defined in [RFC5245], Section 15.4>\n   EQUAL\
    \            = <Defined in [RFC7826]>\n   SEMI             = <Defined in [RFC7826]>\n\
    \   DQUOTE           = <Defined in [RFC7826]>\n"
- title: 4.4.  ICE Feature Tag
  contents:
  - "4.4.  ICE Feature Tag\n   A feature tag is defined for use in the RTSP capabilities\
    \ mechanism\n   for ICE support of media transport using datagrams: \"setup.ice-d-m\"\
    .\n   This feature tag indicates that one supports all the mandatory\n   functions\
    \ of this specification.  It is applicable to all types of\n   RTSP agents: clients,\
    \ servers, and proxies.\n   The RTSP client SHOULD send the feature tag \"setup.ice-d-m\"\
    \ in the\n   Supported header in all SETUP requests that contain the \"D-ICE\"\
    \n   lower-layer transport.  Note, this is not a \"MUST\" as an RTSP client\n\
    \   can always attempt to perform a SETUP using ICE to see if it\n   functions\
    \ or fails.  However, including the feature tag in the\n   Supported header ensures\
    \ that proxies supporting this specification\n   explicitly indicate such support;\
    \ see Section 7.\n"
- title: 4.5.  Status Codes
  contents:
  - "4.5.  Status Codes\n   For ICE, there are two new RTSP response codes to indicate\
    \ progress\n   and errors.\n   +------+----------------------------------------------+-------------+\n\
    \   | Code | Description                                  | Method      |\n  \
    \ +------+----------------------------------------------+-------------+\n   |\
    \ 150  | Server still working on ICE connectivity     | PLAY        |\n   |  \
    \    | checks                                       |             |\n   |    \
    \  |                                              |             |\n   | 480  |\
    \ ICE Connectivity check failure               | PLAY, SETUP |\n   +------+----------------------------------------------+-------------+\n\
    \        Table 1: New Status Codes and Their Usage with RTSP Methods\n"
- title: 4.5.1.  150 Server still working on ICE connectivity checks
  contents:
  - "4.5.1.  150 Server still working on ICE connectivity checks\n   The 150 response\
    \ code indicates that ICE connectivity checks are\n   still in progress and haven't\
    \ concluded.  This response SHALL be sent\n   within 200 milliseconds of receiving\
    \ a PLAY request that currently\n   can't be fulfilled because ICE connectivity\
    \ checks are still running.\n   A client can expect network delays between the\
    \ server and client\n   resulting in a response longer than 200 milliseconds.\
    \  Subsequently,\n   every 3 seconds after the previous one was sent, a 150 reply\
    \ SHALL be\n   sent until the ICE connectivity checks conclude either successfully\n\
    \   or in failure, and a final response for the request can be provided.\n"
- title: 4.5.2.  480 ICE Connectivity check failure
  contents:
  - "4.5.2.  480 ICE Connectivity check failure\n   The 480 client error response\
    \ code is used in cases when the request\n   can't be fulfilled due to a failure\
    \ in the ICE processing, such as\n   all the connectivity checks have timed out.\
    \  This error message can\n   appear either in response to a SETUP request to\
    \ indicate that no\n   candidate pair can be constructed or in response to a PLAY\
    \ request to\n   indicate that the server's connectivity checks resulted in failure.\n"
- title: 4.6.  New Reason for PLAY_NOTIFY
  contents:
  - "4.6.  New Reason for PLAY_NOTIFY\n   A new value used in the PLAY_NOTIFY methods\
    \ Notify-Reason header is\n   defined: \"ice-restart\".  This reason indicates\
    \ that an ICE restart\n   needs to happen on the identified resource and session.\n\
    \   Notify-Reas-val =/ \"ice-restart\"\n"
- title: 4.7.  Server-Side SDP Attribute for ICE Support
  contents:
  - "4.7.  Server-Side SDP Attribute for ICE Support\n   If the server supports the\
    \ media NAT traversal for RTSP-controlled\n   sessions as described in this RFC,\
    \ then the server SHOULD include the\n   \"a=rtsp-ice-d-m\" SDP attribute in any\
    \ SDP (if used) describing\n   content served by the server.  This is a session-level-only\n\
    \   attribute; see [RFC4566].\n   The ABNF [RFC5234] for the \"rtsp-ice-d-m\"\
    \ attribute is:\n   rtsp-ice-d-m-attr = \"a=\" \"rtsp-ice-d-m\"\n"
- title: 5.  ICE-RTSP
  contents:
  - "5.  ICE-RTSP\n   This section discusses differences between the regular ICE usage\n\
    \   defined in [RFC5245] and ICE-RTSP.  The reasons for the differences\n   relate\
    \ to the clearer client/server roles that RTSP provides and how\n   the RTSP session\
    \ establishment signaling occurs within RTSP compared\n   to SIP/SDP offer/answer.\n"
- title: 5.1.  ICE Features Not Required
  contents:
  - "5.1.  ICE Features Not Required\n   A number of ICE signaling features are not\
    \ needed with RTSP and are\n   discussed below.\n"
- title: 5.1.1.  ICE-Lite
  contents:
  - "5.1.1.  ICE-Lite\n   The ICE-Lite attribute SHALL NOT be used in the context\
    \ of RTSP.  The\n   ICE specification describes two implementations of ICE: Full\
    \ and\n   Lite, where hosts that are not behind a NAT are allowed to implement\n\
    \   only Lite.  For RTSP, the Lite implementation is insufficient because\n  \
    \ it does not cause the media server to send a connectivity check,\n   which is\
    \ used to protect against making the RTSP server a denial-of-\n   service tool.\n"
- title: 5.1.2.  ICE-Mismatch
  contents:
  - "5.1.2.  ICE-Mismatch\n   The ice-mismatch parameter indicates that the offer\
    \ arrived with a\n   default destination for a media component that didn't have\
    \ a\n   corresponding candidate attribute.  This is not needed for RTSP as\n \
    \  the ICE-based lower-layer transport specification either is supported\n   or\
    \ another alternative transport is used.  This is always explicitly\n   indicated\
    \ in the SETUP request and response.\n"
- title: 5.1.3.  ICE Remote Candidate Transport Header Parameter
  contents:
  - "5.1.3.  ICE Remote Candidate Transport Header Parameter\n   The Remote candidate\
    \ attribute is not needed for RTSP for the\n   following reasons.  Each SETUP\
    \ request results in an independent ICE\n   processing chain that either fails\
    \ or results in nominating a single\n   candidate pair to use.  If a new SETUP\
    \ request for the same media is\n   sent, it needs to use a new username fragment\
    \ and password to avoid\n   any race conditions or uncertainty about to which\
    \ round of processing\n   the STUN requests relate.\n"
- title: 5.2.  High-Reachability Configuration
  contents:
  - "5.2.  High-Reachability Configuration\n   ICE-RTSP contains a high-reachability\
    \ configuration when the RTSP\n   servers are not behind NATs.  Please note that\
    \ \"not behind NATs\" may\n   apply in some special cases also for RTSP servers\
    \ behind NATs given\n   that they are in an address space that has reachability\
    \ for all the\n   RTSP clients intended to able to reach the server.  The high-\n\
    \   reachability configuration is similar to ICE-Lite as it allows for\n   some\
    \ reduction in the server's burden.  However, due to the need to\n   still verify\
    \ that the client is actually present and wants to receive\n   the media stream,\
    \ the server must also initiate binding requests and\n   await binding responses.\
    \  The reduction for the high-reachability\n   configuration of ICE-RTSP is that\
    \ they don't need to initiate their\n   own checks and instead rely on triggered\
    \ checks for verification.\n   This also removes a denial-of-service threat where\
    \ an RTSP SETUP\n   request will trigger large amount of STUN connectivity checks\
    \ towards\n   provided candidate addresses.\n"
- title: 6.  Detailed Solution
  contents:
  - "6.  Detailed Solution\n   This section describes, in detail, how the interaction\
    \ and flow of\n   ICE works with RTSP messages.\n"
- title: 6.1.  Session Description and RTSP DESCRIBE (Optional)
  contents:
  - "6.1.  Session Description and RTSP DESCRIBE (Optional)\n   The RTSP server is\
    \ RECOMMENDED to indicate it has support for ICE by\n   sending the \"a=rtsp-ice-d-m\"\
    \ SDP attribute in the response to the\n   RTSP DESCRIBE message if SDP is used.\
    \  This allows RTSP clients to\n   only send the new ICE exchanges with servers\
    \ that support ICE thereby\n   limiting the overhead on current non-ICE supporting\
    \ RTSP servers.\n   When not using RTSP DESCRIBE, it is still RECOMMENDED to use\
    \ the SDP\n   attribute for the session description.\n   A client can also use\
    \ the DESCRIBE request to determine explicitly if\n   both server and any proxies\
    \ support ICE.  The client includes the\n   Supported header with its supported\
    \ feature tags, including\n   \"setup.ice-d-m\".  Upon seeing the Supported header,\
    \ any proxy will\n   include the Proxy-Supported header with the feature tags\
    \ it supports.\n   The server will echo back the Proxy-Supported header and its\
    \ own\n   version of the Supported header so enabling a client to determine\n\
    \   whether or not all involved parties support ICE.  Note that even if a\n  \
    \ proxy is present in the chain that doesn't indicate support for ICE,\n   it\
    \ may still work (see Section 7).\n   For example:\n        C->S: DESCRIBE rtsp://server.example.com/fizzle/foo\
    \ RTSP/2.0\n              CSeq: 312\n              User-Agent: PhonyClient 1.2\n\
    \              Accept: application/sdp, application/example\n              Supported:\
    \ setup.ice-d-m, setup.rtp.rtcp.mux\n        S->C: RTSP/2.0 200 OK\n         \
    \     CSeq: 312\n              Date: 23 Jan 1997 15:35:06 GMT\n              Server:\
    \ PhonyServer 1.1\n              Content-Type: application/sdp\n             \
    \ Content-Length: 367\n              Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n\
    \              v=0\n              o=mhandley 2890844526 2890842807 IN IP4 192.0.2.46\n\
    \              s=SDP Seminar\n              i=A Seminar on the session description\
    \ protocol\n              u=http://www.example.com/lectures/sdp.ps\n         \
    \     e=seminar@example.com (Seminar Management)\n              t=2873397496 2873404696\n\
    \              a=recvonly\n              a=rtsp-ice-d-m\n              a=control:\
    \ *\n              m=audio 3456 RTP/AVP 0\n              a=control: /audio\n \
    \             m=video 2232 RTP/AVP 31\n              a=control: /video\n"
- title: 6.2.  Setting Up the Media Streams
  contents:
  - "6.2.  Setting Up the Media Streams\n   The RTSP client reviews the session description\
    \ returned, for\n   example, by an RTSP DESCRIBE message, to determine what media\n\
    \   resources need to be set up.  For each of these media streams where\n   the\
    \ transport protocol supports ICE connectivity checks, the client\n   SHALL gather\
    \ candidate addresses for UDP transport as described in\n   Section 4.1.1 in ICE\
    \ [RFC5245] according to standard ICE rather than\n   the ICE-Lite implementation\
    \ and according to Section 5 of ICE TCP\n   [RFC6544] for TCP-based candidates.\n"
- title: 6.3.  RTSP SETUP Request
  contents:
  - "6.3.  RTSP SETUP Request\n   The RTSP client will then send at least one SETUP\
    \ request per media\n   stream to establish the media streams required for the\
    \ desired\n   session.  For each media stream where it desires to use ICE, it\
    \ MUST\n   include a transport specification with \"D-ICE\" as the lower layer,\n\
    \   and each media stream SHALL have its own unique combination of ICE\n   candidates\
    \ and ICE-ufrag.  This transport specification SHOULD be\n   placed first in the\
    \ list to give it highest priority.  It is\n   RECOMMENDED that additional transport\
    \ specifications be provided as a\n   fallback in case of proxies that do not\
    \ support ICE.  The RTSP client\n   will be initiating and thus the controlling\
    \ party in the ICE\n   processing.  For example (note that some lines are broken\
    \ in\n   contradiction with the defined syntax due to space restrictions in\n\
    \   the documenting format):\n   C->S: SETUP rtsp://server.example.com/fizzle/foo/audio\
    \ RTSP/2.0\n         CSeq: 313\n         Transport: RTP/AVP/D-ICE; unicast; ICE-ufrag=8hhY;\n\
    \                   ICE-Password=asd88fgpdd777uzjYhagZg; candidates=\"\n     \
    \              1 1 UDP 2130706431 10.0.1.17 8998 typ host;\n                 \
    \  2 1 UDP 1694498815 192.0.2.3 45664 typ srflx\n                            raddr\
    \ 10.0.1.17 rport 8998\"; RTCP-mux,\n                RTP/AVP/UDP; unicast; dest_addr=\"\
    :6970\"/\":6971\",\n                RTP/AVP/TCP; unicast;interleaved=0-1\n   \
    \      Accept-Ranges: NPT, UTC\n         User-Agent: PhonyClient/1.2\n       \
    \  Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n"
- title: 6.4.  Gathering Candidates
  contents:
  - "6.4.  Gathering Candidates\n   Upon receiving a SETUP request, the server can\
    \ determine what media\n   resource should be delivered and which transport alternatives\
    \ the\n   client supports.  If one based on D-ICE is on the list of supported\n\
    \   transports and preferred among the supported, the below applies.\n   The transport\
    \ specification will indicate which media protocol is to\n   be used and, based\
    \ on this and the client's candidates, the server\n   determines the protocol\
    \ and if it supports ICE with that protocol.\n   The server SHALL then gather\
    \ its UDP candidates according to\n   Section 4.1.1 in ICE [RFC5245] and any TCP-based\
    \ ones according to\n   Section 5 of ICE TCP [RFC6544].\n   Servers that have\
    \ an address that is generally reachable by any\n   client within the address\
    \ scope the server intends to serve MAY be\n   specially configured (high-reachability\
    \ configuration).  This special\n   configuration has the goal of reducing the\
    \ server-side candidate to\n   preferably a single one per (address family, media\
    \ stream, media\n   component) tuple.  Instead of gathering all possible addresses\n\
    \   including relayed and server-reflexive addresses, the server uses a\n   single\
    \ address per address family that the server knows should be\n   reachable by\
    \ a client behind one or more NATs.  The reason for this\n   special configuration\
    \ is twofold: Firstly, it reduces the load on the\n   server in address gathering\
    \ and in ICE processing during the\n   connectivity checks.  Secondly, it will\
    \ reduce the number of\n   permutations for candidate pairs significantly thus\
    \ potentially\n   speeding up the conclusion of the ICE processing.  However,\
    \ note that\n   using this option on a server that doesn't fulfill the requirement\
    \ of\n   being reachable is counterproductive, and it is important that this\n\
    \   is correctly configured.\n   The above general consideration for servers applies\
    \ also for TCP-\n   based candidates.  A general implementation should support\
    \ several\n   candidate collection techniques and connection types.  For TCP-based\n\
    \   candidates, a high-reachability configured server is recommended to\n   only\
    \ offer Host candidates.  In addition to passive connection types,\n   the server\
    \ can select to provide active or S-O connection types to\n   match the client's\
    \ candidates.\n"
- title: 6.5.  RTSP Server Response
  contents:
  - "6.5.  RTSP Server Response\n   The server determines if the SETUP request is\
    \ successful and, if so,\n   returns a 200 OK response; otherwise, it returns\
    \ an error code.  At\n   that point, the server, having selected a transport specification\n\
    \   using the \"D-ICE\" lower layer, will need to include that transport\n   specification\
    \ in the response message.  The transport specification\n   SHALL include the\
    \ candidates gathered in Section 6.4 in the\n   \"candidates\" transport header\
    \ parameter as well as the server's ICE\n   username fragment and password.  In\
    \ the case that there are no valid\n   candidate pairs with the combination of\
    \ the client and server\n   candidates, a 480 (ICE Connectivity check failure)\
    \ error response\n   SHALL be returned, which MUST include the server's candidates.\
    \  The\n   return of a 480 error may allow both the server and client to release\n\
    \   their candidates; see Section 6.10.\n   Below is an example of a successful\
    \ response to the request in\n   Section 6.3.\n   S->C: RTSP/2.0 200 OK\n    \
    \     CSeq: 313\n         Session: 12345678\n         Transport: RTP/AVP/D-ICE;\
    \ unicast; RTCP-mux; ICE-ufrag=MkQ3;\n                   ICE-Password=pos12Dgp9FcAjpq82ppaF;\
    \ candidates=\"\n                    1 1 UDP 2130706431 192.0.2.56 50234 typ host\"\
    \n         Accept-Ranges: NPT\n         Date: 23 Jan 1997 15:35:06 GMT\n     \
    \    Server: PhonyServer 1.1\n         Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n"
- title: 6.6.  Server-to-Client ICE Connectivity Checks
  contents:
  - "6.6.  Server-to-Client ICE Connectivity Checks\n   The server SHALL start the\
    \ connectivity checks following the\n   procedures described in Sections 5.7 and\
    \ 5.8 of ICE [RFC5245] unless\n   it is configured to use the high-reachability\
    \ option.  If it is, then\n   it MAY suppress its own checks until the server's\
    \ checks are\n   triggered by the client's connectivity checks.\n   Please note\
    \ that Section 5.8 of ICE [RFC5245] does specify that the\n   initiation of the\
    \ checks are paced and new ones are only started\n   every Ta milliseconds.  The\
    \ motivation for this is documented in\n   Appendix B.1 of ICE [RFC5245] as for\
    \ SIP/SDP all media streams within\n   an offer/answer dialog are running using\
    \ the same queue.  To ensure\n   the same behavior with RTSP, the server SHALL\
    \ use a single pacer\n   queue for all media streams within each RTSP session.\n\
    \   The values for the pacing of STUN and TURN transactions Ta and RTO\n   can\
    \ be configured but have the same minimum values defined in the ICE\n   specification.\n\
    \   When a connectivity check from the client reaches the server, it will\n  \
    \ result in a triggered check from the server as specified in\n   Section 7.2.1.4\
    \ of ICE [RFC5245].  This is why servers with a high-\n   reachability address\
    \ can wait until this triggered check to send out\n   any checks for itself, so\
    \ saving resources and mitigating the DDoS\n   potential.\n"
- title: 6.7.  Client-to-Server ICE Connectivity Check
  contents:
  - "6.7.  Client-to-Server ICE Connectivity Check\n   The client receives the SETUP\
    \ response and learns the candidate\n   addresses to use for the connectivity\
    \ checks.  The client SHALL\n   initiate its connectivity check(s), following\
    \ the procedures in\n   Section 6 of ICE [RFC5245].  The pacing of STUN transactions\n\
    \   (Appendix B.1 of [RFC5245]) SHALL be used across all media streams\n   that\
    \ are part of the same RTSP session.\n   Aggressive nomination SHOULD be used\
    \ with RTSP during initial SETUP\n   for a resource.  This doesn't have all the\
    \ negative impact that it\n   has in offer/answer as media playing only starts\
    \ after issuing a PLAY\n   request.  Thus, the issue with a change of the media\
    \ path being used\n   for delivery can be avoided by not issuing a PLAY request\
    \ while STUN\n   connectivity checks are still outstanding.  Aggressive nomination\
    \ can\n   result in multiple candidate pairs having their nominated flag set,\n\
    \   but according to Section 8.1.1.2 of ICE [RFC5245], when the PLAY\n   request\
    \ is sent, the media will arrive on the pair with the highest\n   priority.  Note,\
    \ different media resources may still end up with\n   different foundations.\n\
    \   The above does not change ICE and its handling of aggressive\n   nomination.\
    \  When using aggressive nomination, a higher-priority\n   candidate pair with\
    \ an outstanding connectivity check message can\n   move into the Succeeded state\
    \ and the candidate pair will have its\n   Nominated flag set.  This results in\
    \ the higher-priority candidate\n   pair being used instead of the previous pair,\
    \ which is also in the\n   Succeeded state.\n   To avoid this occurring during\
    \ actual media transport, the RTSP\n   client can add additional logic when the\
    \ ICE processing overall is\n   completed to indicate if there are still higher-priority\
    \ connectivity\n   checks outstanding.  If some check is still outstanding, the\n\
    \   implementation can choose to wait until some additional timeout is\n   triggered\
    \ or the outstanding checks complete before progressing with\n   a PLAY request.\
    \  An alternative is to accept the risk for a path\n   change during media delivery\
    \ and start playing immediately.\n   RTSP clients that want to ensure that each\
    \ media resource uses the\n   same path can use regular nomination where both\
    \ 1) the ICE processing\n   completion criteria and 2) which media streams are\
    \ nominated for use\n   can be controlled.  This does not affect the RTSP server,\
    \ as its role\n   is the one of being controlled.\n"
- title: 6.8.  Client Connectivity Checks Complete
  contents:
  - "6.8.  Client Connectivity Checks Complete\n   When the client has concluded all\
    \ of its connectivity checks and has\n   nominated its desired candidate pair\
    \ for a particular media stream,\n   it MAY issue a PLAY request for that stream.\
    \  Note that due to the\n   aggressive nomination, there is a risk that any outstanding\
    \ check may\n   nominate another pair than what was already nominated.  The candidate\n\
    \   pair with the highest priority will be used for the media.  If the\n   client\
    \ has locally determined that its checks have failed, it may try\n   providing\
    \ an extended set of candidates and update the server\n   candidate list by issuing\
    \ a new SETUP request for the media stream.\n   If the client concluded its connectivity\
    \ checks successfully and\n   therefore sent a PLAY request but the server cannot\
    \ conclude\n   successfully, the server will respond with a 480 (ICE Connectivity\n\
    \   check failure) error response.  Upon receiving the 480 (ICE\n   Connectivity\
    \ check failure) response, the client may send a new SETUP\n   request assuming\
    \ it has any new information that can be included in\n   the candidate list. \
    \ If the server is still performing the checks\n   when receiving the PLAY request,\
    \ it will respond with a 150 (Server\n   still working on ICE connectivity checks)\
    \ response to indicate this.\n"
- title: 6.9.  Server Connectivity Checks Complete
  contents:
  - "6.9.  Server Connectivity Checks Complete\n   When the RTSP server receives a\
    \ PLAY request, it checks to see that\n   the connectivity checks have concluded\
    \ successfully and only then\n   will it play the stream.  If the PLAY request\
    \ is for a particular\n   media stream, the server only needs to check that the\
    \ connectivity\n   checks for that stream completed successfully.  If the server\
    \ has not\n   concluded its connectivity checks, the server indicates that by\n\
    \   sending the 150 (Server still working on ICE connectivity checks)\n   (Section\
    \ 4.5.1).  If there is a problem with the checks, then the\n   server sends a\
    \ 480 response to indicate a failure of the checks.  If\n   the checks are successful,\
    \ then the server sends a 200 OK response\n   and starts delivering media.\n"
- title: 6.10.  Freeing Candidates
  contents:
  - "6.10.  Freeing Candidates\n   Both server and client MAY free their non-selected\
    \ candidates as soon\n   as a 200 OK response has been issued/received for the\
    \ PLAY request\n   and no outstanding connectivity checks exist.\n   Clients and\
    \ servers MAY free all their gathered candidates after\n   having received or\
    \ sent, respectively, a 480 response to a SETUP\n   request.  Clients will likely\
    \ free their candidates first after\n   having tried any additional actions that\
    \ may resolve the issue, e.g.,\n   verifying the address gathering, or use additional\
    \ STUN or TURN\n   servers.  Thus, a server will have to weigh the cost of doing\
    \ address\n   gathering versus maintaining the gathered address for some time\
    \ to\n   allow any new SETUP request to be issued by the client.\n   If the 480\
    \ response is sent in response to a PLAY request, the server\n   MUST NOT free\
    \ its gathered candidates.  Instead, it will have to wait\n   for additional actions\
    \ from the client or terminate the RTSP session\n   due to inactivity.\n"
- title: 6.11.  Steady State
  contents:
  - "6.11.  Steady State\n   The client and server SHALL use STUN to send keep-alive\
    \ messages for\n   the nominated candidate pair(s) following the rules of Section\
    \ 10 of\n   ICE [RFC5245].  This is important, as normally RTSP play mode\n  \
    \ sessions only contain traffic from the server to the client so the\n   bindings\
    \ in the NAT need to be refreshed by the client-to-server\n   traffic provided\
    \ by the STUN keep-alive.\n"
- title: 6.12.  Re-SETUP
  contents:
  - "6.12.  Re-SETUP\n   A client that decides to change any parameters related to\
    \ the media\n   stream setup will send a new SETUP request.  In this new SETUP\n\
    \   request, the client MAY include a new different ICE username fragment\n  \
    \ and password to use in the ICE processing.  The new ICE username and\n   password\
    \ SHALL cause the ICE processing to start from the beginning\n   again, i.e.,\
    \ an ICE restart (Section 9.1.1.1 of [RFC5245]).  The\n   client SHALL in case\
    \ of ICE restart, gather candidates and include\n   the candidates in the transport\
    \ specification for D-ICE.\n   ICE restarts may be triggered due to changes of\
    \ client or server\n   attachment to the network, such as changes to the media\
    \ streams\n   destination or source address or port.  Most RTSP parameter changes\n\
    \   would not require an ICE restart, but would use existing mechanisms\n   in\
    \ RTSP to indicate from what point in the RTP stream they apply.\n   These include\
    \ the following: performing a pause prior to the\n   parameter change and then\
    \ resume; assuming the server supports using\n   SETUP during the PLAY state;\
    \ or using the RTP-Info header\n   (Section 18.45 of [RFC7826]) to indicate from\
    \ where in the media\n   stream the change shall apply.\n   Even if the server\
    \ does not normally support SETUP during PLAY state,\n   it SHALL support SETUP\
    \ requests in PLAY state for the purpose of\n   changing only the ICE parameters,\
    \ which are ICE-Password, ICE-ufrag,\n   and the content of ICE candidates.\n\
    \   If the RTSP session is in playing state at the time of sending the\n   SETUP\
    \ request requiring ICE restart, then the ICE connectivity checks\n   SHALL use\
    \ Regular nomination.  Any ongoing media delivery continues\n   on the previously\
    \ nominated candidate pairs until the new pairs have\n   been nominated for the\
    \ individual media stream.  Once the nomination\n   of the new candidate pair\
    \ has completed, all unused candidates may be\n   released.  If the ICE processing\
    \ fails and no new candidate pairs are\n   nominated for use, then the media stream\
    \ MAY continue to use the\n   previously nominated candidate pairs while they\
    \ still function.  If\n   they appear to fail to transport media packets anymore,\
    \ then the\n   client can select between two actions: attempting any actions that\n\
    \   might make ICE work or terminating the RTSP session.  Firstly, it can\n  \
    \ attempt any actions available that might make ICE work, like trying\n   another\
    \ STUN/TURN server or changing the transport parameters.  In\n   that case, the\
    \ client modifies the RTSP session, and if ICE is still\n   to be used, the client\
    \ restarts ICE once more.  Secondly, if the\n   client is unable to modify the\
    \ transport or ICE parameters, it MUST\n   NOT restart the ICE processing, and\
    \ it SHOULD terminate the RTSP\n   session.\n"
- title: 6.13.  Server-Side Changes after Steady State
  contents:
  - "6.13.  Server-Side Changes after Steady State\n   A server may require an ICE\
    \ restart because of server-side load\n   balancing or a failure resulting in\
    \ an IP address and a port number\n   change.  In that case, the server SHALL\
    \ use the PLAY_NOTIFY method to\n   inform the client (Section 13.5 [RFC7826])\
    \ with a new Notify-Reason\n   header: ice-restart.  The server will identify\
    \ if the change is for a\n   single media or for the complete session by including\
    \ the\n   corresponding URI in the PLAY_NOTIFY request.\n   Upon receiving and\
    \ responding to this PLAY_NOTIFY with an ice-restart\n   reason, the client SHALL\
    \ gather new ICE candidates and send SETUP\n   requests for each media stream\
    \ part of the session.  The server\n   provides its candidates in the SETUP response\
    \ the same way as for the\n   first time ICE processing.  Both server and client\
    \ SHALL provide new\n   ICE usernames and passwords.  The client MAY issue the\
    \ SETUP request\n   while the session is in PLAYING state.\n   If the RTSP session\
    \ is in PLAYING state when the client issues the\n   SETUP request, the client\
    \ SHALL use Regular nomination.  If not, the\n   client will use the same procedures\
    \ as for when first creating the\n   session.\n   Note that for each media stream\
    \ keep-alive messages on the previous\n   set of candidate pairs SHOULD continue\
    \ until new candidate pairs have\n   been nominated.  After having nominated a\
    \ new set of candidate pairs,\n   the client may continue to receive media for\
    \ some additional time.\n   Even if the server stops delivering media over that\
    \ candidate pair at\n   the time of nomination, media may arrive for up to one\
    \ maximum\n   segment lifetime as defined in TCP (2 minutes).  Unfortunately,\
    \ if\n   the RTSP server is divided into a separate controller and media\n   stream,\
    \ a failure may result in continued media delivery for a longer\n   time than\
    \ the maximum segment lifetime, thus source filtering is\n   RECOMMENDED.\n  \
    \ For example:\n   S->C: PLAY_NOTIFY rtsp://example.com/fizzle/foo RTSP/2.0\n\
    \         CSeq: 854\n         Notify-Reason: ice-restart\n         Session: uZ3ci0K+Ld\n\
    \         Server: PhonyServer 1.1\n   C->S: RTSP/2.0 200 OK\n         CSeq: 854\n\
    \         User-Agent: PhonyClient/1.2\n   C->S: SETUP rtsp://server.example.com/fizzle/foo/audio\
    \ RTSP/2.0\n         CSeq: 314\n         Session: uZ3ci0K+Ld\n         Transport:\
    \ RTP/AVP/D-ICE; unicast; ICE-ufrag=Kl1C;\n                    ICE-Password=H4sICGjBsEcCA3Rlc3RzLX;\
    \ candidates=\"\n                    1 1 UDP 2130706431 10.0.1.17 8998 typ host;\n\
    \                    2 1 UDP 1694498815 192.0.2.3 51456 typ srflx\n          \
    \                  raddr 10.0.1.17 rport 9002\"; RTCP-mux,\n                 \
    \   RTP/AVP/UDP; unicast; dest_addr=\":6970\"/\":6971\",\n                   \
    \ RTP/AVP/TCP; unicast;interleaved=0-1\n         Accept-Ranges: NPT, UTC\n   \
    \      Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n         User-Agent: PhonyClient/1.2\n\
    \   C->S: SETUP rtsp://server.example.com/fizzle/foo/video RTSP/2.0\n        \
    \ CSeq: 315\n         Session: uZ3ci0K+Ld\n         Transport: RTP/AVP/D-ICE;\
    \ unicast; ICE-ufrag=hZv9;\n                    ICE-Password=JAhA9myMHETTFNCrPtg+kJ;\
    \ candidates=\"\n                    1 1 UDP 2130706431 10.0.1.17 9000 typ host;\n\
    \                    2 1 UDP 1694498815 192.0.2.3 51576 typ srflx\n          \
    \                  raddr 10.0.1.17 rport 9000\"; RTCP-mux,\n                 \
    \   RTP/AVP/UDP; unicast; dest_addr=\":6972\"/\":6973\",\n                   \
    \ RTP/AVP/TCP; unicast;interleaved=0-1\n         Accept-Ranges: NPT, UTC\n   \
    \      Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n         User-Agent: PhonyClient/1.2\n\
    \   S->C: RTSP/2.0 200 OK\n         CSeq: 314\n         Session: uZ3ci0K+Ld\n\
    \         Transport: RTP/AVP/D-ICE; unicast; RTCP-mux; ICE-ufrag=CbDm;\n     \
    \               ICE-Password=OfdXHws9XX0eBr6j2zz9Ak; candidates=\"\n         \
    \           1 1 UDP 2130706431 192.0.2.56 50234 typ host\"\n         Accept-Ranges:\
    \ NPT\n         Date: 11 March 2011 13:17:46 GMT\n         Server: PhonyServer\
    \ 1.1\n         Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n   S->C: RTSP/2.0\
    \ 200 OK\n         CSeq: 315\n         Session: uZ3ci0K+Ld\n         Transport:\
    \ RTP/AVP/D-ICE; unicast; RTCP-mux; ICE-ufrag=jigs;\n                    ICE-Password=Dgx6fPj2lsa2WI8b7oJ7+s;\
    \ candidates=\"\n                    1 1 UDP 2130706431 192.0.2.56 47233 typ host\"\
    \n         Accept-Ranges: NPT\n         Date: 11 March 2011 13:17:47 GMT\n   \
    \      Server: PhonyServer 1.1\n         Supported: setup.ice-d-m, setup.rtp.rtcp.mux\n"
- title: 7.  ICE and Proxies
  contents:
  - "7.  ICE and Proxies\n   RTSP allows for proxies that can be of two fundamental\
    \ types\n   depending on whether or not they relay and potentially cache the\n\
    \   media.  Their differing impact on the RTSP NAT traversal solution,\n   including\
    \ backwards compatibility, is explained below.\n"
- title: 7.1.  Media-Handling Proxies
  contents:
  - "7.1.  Media-Handling Proxies\n   An RTSP proxy that relays or caches the media\
    \ stream for a particular\n   media session can be considered to split the media\
    \ transport into two\n   parts: firstly, a media transport between the server\
    \ and the proxy\n   according to the proxy's need, and, secondly, delivery from\
    \ the proxy\n   to the client.  This split means that the NAT traversal solution\
    \ will\n   be run on each individual media leg according to need.\n   It is RECOMMENDED\
    \ that any media-handling proxy support the media NAT\n   traversal defined within\
    \ this specification.  This is for two\n   reasons: firstly, to enable clients\
    \ to perform NAT traversal for the\n   media between the proxy and itself and\
    \ secondly to allow the proxy to\n   be topology independent to support performing\
    \ NAT traversal (to the\n   server) for clients not capable of NAT traversal present\
    \ in the same\n   address domain as the proxy.\n   For a proxy to support the\
    \ media NAT traversal defined in this\n   specification, a proxy will need to\
    \ implement the solution fully and\n   be able to act as both a controlling and\
    \ a controlled ICE peer.  The\n   proxy also SHALL include the \"setup.ice-d-m\"\
    \ feature tag in any\n   applicable capability negotiation headers, such as Proxy-Supported.\n"
- title: 7.2.  Signaling-Only Proxies
  contents:
  - "7.2.  Signaling-Only Proxies\n   A signaling-only proxy handles only the RTSP\
    \ signaling and does not\n   have the media relayed through proxy functions. \
    \ This type of proxy\n   is not likely to work unless the media NAT traversal\
    \ solution is in\n   place between the client and the server, because the DoS\
    \ protection\n   measures, as discussed in Section 21.2.1 of RTSP 2.0 [RFC7826],\n\
    \   usually prevent media delivery to addresses other than from where the\n  \
    \ RTSP signaling arrives at the server.\n   The solution for the signaling-only\
    \ proxy is that it must forward the\n   RTSP SETUP requests including any transport\
    \ specification with the\n   \"D-ICE\" lower layer and the related transport parameters.\
    \  A proxy\n   supporting this functionality SHALL indicate its capability by\
    \ always\n   including the \"setup.ice-d-m\" feature tag in the Proxy-Supported\n\
    \   header in any SETUP request or response.\n"
- title: 7.3.  Non-supporting Proxies
  contents:
  - "7.3.  Non-supporting Proxies\n   A media-handling proxy that doesn't support\
    \ the ICE media NAT\n   traversal specified here is assumed to remove the transport\n\
    \   specification and use any of the lower prioritized transport\n   specifications\
    \ if provided by the requester.  The specification of\n   such a non-ICE transport\
    \ enables the negotiation to complete,\n   although with a less preferred method\
    \ since a NAT between the proxy\n   and the client may result in failure of the\
    \ media path.\n   A non-media-handling proxy is expected to ignore and simply\
    \ forward\n   all unknown transport specifications.  However, this can only be\n\
    \   guaranteed for proxies following the RTSP 2.0 specification\n   [RFC7826].\n\
    \   The usage of the \"setup.ice-d-m\" feature tag in the Proxy-Require\n   header\
    \ is NOT RECOMMENDED because it can have contradictory results.\n   For a proxy\
    \ that does not support ICE but is media handling, the\n   inclusion of the feature\
    \ tag will result in aborting the setup and\n   indicating that it isn't supported,\
    \ which is desirable if providing\n   other fallbacks or other transport configurations\
    \ to handle the\n   situation is wanted.  For non-ICE-supporting non-media-handling\n\
    \   proxies, the result will be aborting the setup.  However, the setup\n   might\
    \ have worked if the feature tag wasn't present in the Proxy-\n   Require header.\
    \  This variance in results is the reason we don't\n   recommend the usage of\
    \ the Proxy-Require header.  Instead, we\n   recommend the usage of the Supported\
    \ header to force proxies to\n   include the feature tags for the intersection\
    \ of what the proxy chain\n   supports in the Proxy-Supported header.  This will\
    \ provide a positive\n   indication when all proxies in the chain between the\
    \ client and\n   server support the functionality.\n   If a proxy doesn't support\
    \ the \"setup.ice-d-m\" feature, but that\n   proxy is not a media-handling proxy,\
    \ the ICE-based setup could still\n   work, since such a proxy may do pass through\
    \ on any transport\n   parameters.  Unfortunately ,the Proxy-Require and Proxy-Supported\n\
    \   RTSP headers failed to provide that information.  The only way of\n   finding\
    \ whether or not this is the case is to try perform a SETUP\n   including a Transport\
    \ header with transport specifications using ICE.\n"
- title: 8.  RTP and RTCP Multiplexing
  contents:
  - "8.  RTP and RTCP Multiplexing\n   \"Multiplexing RTP Data and Control Packets\
    \ on a Single Port\"\n   [RFC5761] specifies how and when RTP and RTCP can be\
    \ multiplexed on\n   the same port.  This multiplexing is beneficial when combined\
    \ with\n   ICE for RTSP as it makes RTP and RTCP need only a single component\n\
    \   per media stream instead of two, so reducing the load on the\n   connectivity\
    \ checks.  For details on how to negotiate RTP and RTCP\n   multiplexing, see\
    \ Appendix C of RTSP 2.0 [RFC7826].\n   Multiplexing RTP and RTCP has the benefit\
    \ that it avoids the need for\n   handling two components per media stream when\
    \ RTP is used as the\n   media transport protocol.  This eliminates at least one\
    \ STUN check\n   per media stream and will also reduce the time needed to complete\
    \ the\n   ICE processing by at least the time it takes to pace out the\n   additional\
    \ STUN checks of up to one complete round-trip time for a\n   single media stream.\
    \  In addition to the protocol performance\n   improvements, the server and client-side\
    \ complexities are reduced as\n   multiplexing halves the total number of STUN\
    \ instances and holding\n   the associated state.  Multiplexing will also reduce\
    \ the combinations\n   and length of the list of possible candidates.\n   The\
    \ implementation of RTP and RTCP multiplexing is additional work\n   required\
    \ for this solution.  However, when implementing the ICE\n   solution, a server\
    \ or client will need to implement a demultiplexer\n   between the STUN and RTP\
    \ or RTCP packets below the RTP/RTCP\n   implementation anyway, so the additional\
    \ work of one new\n   demultiplexing point directly connected to the STUN and\
    \ RTP/RTCP\n   seems small relative to the benefits provided.\n   Due to the benefits\
    \ mentioned above, RTSP servers and clients that\n   support \"D-ICE\" lower-layer\
    \ transport in combination with RTP SHALL\n   also implement and use RTP and RTCP\
    \ multiplexing as specified in\n   Appendix C.1.6.4 of [RFC7826] and [RFC5761].\n"
- title: 9.  Fallback and Using Partial ICE Functionality to Improve NAT/Firewall
  contents:
  - "9.  Fallback and Using Partial ICE Functionality to Improve NAT/Firewall\n  \
    \  Traversal\n   The need for fallback from ICE in RTSP should be less than for\
    \ SIP\n   using ICE in SDP offer/answer where a default destination candidate\n\
    \   is very important to enable interworking with non-ICE capable\n   endpoints.\
    \  In RTSP, capability determination for ICE can happen\n   prior to the RTSP\
    \ SETUP request.  This means a client should normally\n   not need to include\
    \ fallback alternatives when offering ICE, as the\n   capability for ICE will\
    \ already be determined.  However, as described\n   in this section, clients may\
    \ wish to use part of the ICE\n   functionality to improve NAT/firewall traversal\
    \ where the server is\n   not ICE capable.\n   Section 4.1.4 of the ICE [RFC5245]\
    \ specification does recommend that\n   the default destination, i.e., what is\
    \ used as fallback if the peer\n   isn't ICE capable, is a candidate of relayed\
    \ type to maximize the\n   likelihood of successful transport of media.  This\
    \ is based on the\n   peer in SIP using SDP offer/answer is almost as likely as\
    \ the RTSP\n   client to be behind a NAT.  For RTSP, the deployment of servers\
    \ is\n   much more heavily weighted towards deployment with public\n   reachability.\
    \  In fact, since publicly reachable servers behind NAT\n   either need to support\
    \ ICE or have static configurations that allow\n   traversal, one can assume that\
    \ the server will have a public address\n   or support ICE.  Thus, the selection\
    \ of the default destination\n   address for RTSP can be differently prioritized.\n\
    \   As an ICE-enabled client behind a NAT needs to be configured with a\n   STUN\
    \ server address to be able to gather candidates successfully,\n   this can be\
    \ used to derive a server reflexive candidate for the\n   client's port.  How\
    \ useful this is for a NATed RTSP client as a\n   default candidate depends on\
    \ the properties of the NAT.  As long as\n   the NAT uses an address-independent\
    \ mapping, then using a STUN-\n   derived reflexive candidate is likely to be\
    \ successful.  However,\n   this is brittle in several ways, and the main reason\
    \ why the original\n   specification of STUN [RFC3489] and direct usage for NAT\
    \ traversal\n   was obsoleted.  First, if the NAT's behavior is attempted to be\n\
    \   determined using STUN as described in [RFC3489], the determined\n   behavior\
    \ might not be representative of the behavior encountered in\n   another mapping.\
    \  Secondly, filter state towards the ports used by\n   the server needs to be\
    \ established.  This requires that the server\n   actually includes both address\
    \ and ports in its response to the SETUP\n   request.  Thirdly, messages need\
    \ to be sent to these ports for keep-\n   alive at a regular interval.  How a\
    \ server reacts to such unsolicited\n   traffic is unknown.  This brittleness\
    \ may be accepted in fallback due\n   to lack of support on the server side.\n\
    \   To maximize the likelihood that an RTSP client is capable of\n   receiving\
    \ media, a relay-based address should be chosen as the\n   default fallback address.\
    \  However, for RTSP clients lacking a relay\n   server, such as a TURN server,\
    \ or where usage of such a server has\n   significant cost associated with it,\
    \ the usage of a STUN-derived\n   server reflexive address as client default has\
    \ a reasonable\n   likelihood of functioning and may be used as an alternative.\n\
    \   Fallback addresses need to be provided in their own transport\n   specification\
    \ using a specifier that does not include the D-ICE\n   lower-layer transport.\
    \  Instead, the selected protocol, e.g., UDP,\n   needs to be explicitly or implicitly\
    \ indicated.  Secondly, the\n   selected default candidate needs to be included\
    \ in the SETUP request.\n   If this candidate is server reflexive or relayed,\
    \ the aspect of keep-\n   alive needs to be ensured.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   Per this document, registrations have been made\
    \ in a number of\n   registries, both for RTSP and SDP.  For all the below registrations,\n\
    \   the contact person on behalf of the IETF WG MMUSIC is Magnus\n   Westerlund\
    \ <magnus.westerlund@ericsson.com>.\n"
- title: 10.1.  RTSP Feature Tags
  contents:
  - "10.1.  RTSP Feature Tags\n   Per this document, one RTSP 2.0 feature tag has\
    \ been registered in\n   the \"RTSP 2.0 Feature-tags\" registry.\n   setup.ice-d-m:\
    \  A feature tag representing the support of the ICE-\n      based establishment\
    \ of datagram media transport that is capable of\n      transport establishment\
    \ through NAT and firewalls.  This feature\n      tag applies to clients, servers,\
    \ and proxies and indicates support\n      of all the mandatory functions of this\
    \ specification.\n"
- title: 10.2.  Transport Protocol Identifiers
  contents:
  - "10.2.  Transport Protocol Identifiers\n   Per this document, a number of transport\
    \ protocol combinations have\n   been registered in the RTSP 2.0 \"Transport Protocol\
    \ Identifiers\"\n   registry:\n   RTP/AVP/D-ICE:  RTP using the AVP profile over\
    \ an ICE-established\n      datagram flow.\n   RTP/AVPF/D-ICE:  RTP using the\
    \ AVPF profile over an ICE-established\n      datagram flow.\n   RTP/SAVP/D-ICE:\
    \  RTP using the SAVP profile over an ICE-established\n      datagram flow.\n\
    \   RTP/SAVPF/D-ICE:  RTP using the SAVPF profile over an ICE-established\n  \
    \    datagram flow.\n"
- title: 10.3.  RTSP Transport Parameters
  contents:
  - "10.3.  RTSP Transport Parameters\n   Per this document, three transport parameters\
    \ have been registered in\n   the RTSP 2.0's \"Transport Parameters\" registry.\n\
    \   candidates:  Listing the properties of one or more ICE candidates.\n     \
    \ See Section 4.2.\n   ICE-Password:  The ICE password used to authenticate the\
    \ STUN binding\n      request in the ICE connectivity checks.  See Section 4.3.\n\
    \   ICE-ufrag:  The ICE username fragment used to authenticate the STUN\n    \
    \  binding requests in the ICE connectivity checks.  See Section 4.3.\n"
- title: 10.4.  RTSP Status Codes
  contents:
  - "10.4.  RTSP Status Codes\n   Per this document, two assignments have been made\
    \ in the \"RTSP 2.0\n   Status Codes\" registry.  See Section 4.5.\n"
- title: 10.5.  Notify-Reason Value
  contents:
  - "10.5.  Notify-Reason Value\n   Per this document, one assignment has been made\
    \ in the RTSP 2.0\n   Notify-Reason header value registry.  The defined value\
    \ is:\n   ice-restart:  This Notify-Reason value allows the server to notify\n\
    \      the client about the need for an ICE restart.  See Section 4.6.\n"
- title: 10.6.  SDP Attribute
  contents:
  - "10.6.  SDP Attribute\n   One SDP attribute has been registered:\n      SDP Attribute\
    \ (\"att-field\"):\n        Attribute name:     rtsp-ice-d-m\n        Long form:\
    \          ICE for RTSP datagram media NAT traversal\n        Type of attribute:\
    \  Session-level only\n        Subject to charset: No\n        Purpose:      \
    \      RFC 7825, Section 4.7\n        Values:             No values defined\n\
    \        Contact:            Magnus Westerlund\n                            Email:\
    \ magnus.westerlund@ericsson.com\n                            Phone: +46 10 714\
    \ 82 87\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   ICE [RFC5245] and ICE TCP [RFC6544] provide\
    \ an extensive discussion\n   on security considerations that apply here as well.\n"
- title: 11.1.  ICE and RTSP
  contents:
  - "11.1.  ICE and RTSP\n   A long-standing risk with transmitting a packet stream\
    \ over UDP is\n   that the host may not be interested in receiving the stream.\
    \  On\n   today's Internet, many hosts are behind NATs or operate host\n   firewalls\
    \ that do not respond to unsolicited packets with an ICMP\n   port unreachable\
    \ error.  Thus, an attacker can construct RTSP SETUP\n   requests with a victim's\
    \ IP address and cause a flood of media\n   packets to be sent to a victim.  The\
    \ addition of ICE, as described in\n   this document, provides protection from\
    \ the attack described above.\n   By performing the ICE connectivity check, the\
    \ media server receives\n   confirmation that the RTSP client wants the media.\
    \  While this\n   protection could also be implemented by requiring the IP addresses\
    \ in\n   the SDP match the IP address of the RTSP signaling packet, such a\n \
    \  mechanism does not protect other hosts with the same IP address (such\n   as\
    \ behind the same NAT), and such a mechanism would prohibit\n   separating the\
    \ RTSP controller from the media play-out device (e.g.,\n   an IP-enabled remote\
    \ control and an IP-enabled television); it also\n   forces RTSP proxies to relay\
    \ the media streams through them, even if\n   they would otherwise be only signaling\
    \ proxies.\n   To protect against attacks on ICE based on signaling information,\n\
    \   RTSP signaling SHOULD be protected using TLS to prevent eavesdropping\n  \
    \ and modification of information.\n   The STUN amplification attack described\
    \ in Section 18.5.2 in ICE\n   [RFC5245] needs consideration.  Servers that are\
    \ able to run\n   according to the high-reachability option have good mitigation\
    \ of\n   this attack as they only send connectivity checks towards an address\n\
    \   and port pair from which they have received an incoming connectivity\n   check.\
    \  This means an attacker requires both the capability to spoof\n   source addresses\
    \ and to signal the RTSP server a set of ICE\n   candidates.  Independently, an\
    \ ICE agent needs to implement the\n   mitigation to reduce the volume of the\
    \ amplification attack as\n   described in the ICE specification.\n"
- title: 11.2.  Logging
  contents:
  - "11.2.  Logging\n   The logging of NAT translations is helpful to analysts, particularly\n\
    \   in enterprises, who need to be able to map sessions when\n   investigating\
    \ possible issues where the NAT happens.  When using\n   logging on the public\
    \ Internet, it is possible that the logs are\n   large and privacy invasive, so\
    \ procedures for log flushing and\n   privacy protection SHALL be in place.  Care\
    \ should be taken in the\n   protection of these logs and consideration taken\
    \ to log integrity,\n   privacy protection, and purging logs (retention policies,\
    \ etc.).\n   Also, logging of connection errors and other messages established\
    \ by\n   this document can be important.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n   \
    \           Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n        \
    \      July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n   [RFC5234]  Crocker,\
    \ D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n\
    \              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5245]  Rosenberg,\
    \ J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol\
    \ for Network Address Translator (NAT)\n              Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n              DOI 10.17487/RFC5245, April 2010,\n  \
    \            <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5389]  Rosenberg,\
    \ J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session Traversal\
    \ Utilities for NAT (STUN)\", RFC 5389,\n              DOI 10.17487/RFC5389, October\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n   [RFC5761]\
    \  Perkins, C. and M. Westerlund, \"Multiplexing RTP Data and\n              Control\
    \ Packets on a Single Port\", RFC 5761,\n              DOI 10.17487/RFC5761, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5761>.\n   [RFC6544]\
    \  Rosenberg, J., Keranen, A., Lowekamp, B., and A. Roach,\n              \"TCP\
    \ Candidates with Interactive Connectivity\n              Establishment (ICE)\"\
    , RFC 6544, DOI 10.17487/RFC6544,\n              March 2012, <http://www.rfc-editor.org/info/rfc6544>.\n\
    \   [RFC7826]  Schulzrinne, H., Rao, A., Lanphier, R., Westerlund, M.,\n     \
    \         and M. Stiemerling, Ed., \"Real-Time Streaming Protocol\n          \
    \    Version 2.0\", RFC 7826, DOI 10.17487/RFC7826, December\n              2016,\
    \ <http://www.rfc-editor.org/info/rfc7826>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC2326]  Schulzrinne, H., Rao, A., and R.\
    \ Lanphier, \"Real Time\n              Streaming Protocol (RTSP)\", RFC 2326,\n\
    \              DOI 10.17487/RFC2326, April 1998,\n              <http://www.rfc-editor.org/info/rfc2326>.\n\
    \   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n      \
    \        Address Translator (Traditional NAT)\", RFC 3022,\n              DOI\
    \ 10.17487/RFC3022, January 2001,\n              <http://www.rfc-editor.org/info/rfc3022>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3264]\
    \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with\
    \ Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n   [RFC3489]\
    \  Rosenberg, J., Weinberger, J., Huitema, C., and R. Mahy,\n              \"\
    STUN - Simple Traversal of User Datagram Protocol (UDP)\n              Through\
    \ Network Address Translators (NATs)\", RFC 3489,\n              DOI 10.17487/RFC3489,\
    \ March 2003,\n              <http://www.rfc-editor.org/info/rfc3489>.\n   [RFC4340]\
    \  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n              Congestion\
    \ Control Protocol (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340, March\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4340>.\n   [RFC7604]\
    \  Westerlund, M. and T. Zeng, \"Comparison of Different NAT\n              Traversal\
    \ Techniques for Media Controlled by the Real-Time\n              Streaming Protocol\
    \ (RTSP)\", RFC 7604,\n              DOI 10.17487/RFC7604, September 2015,\n \
    \             <http://www.rfc-editor.org/info/rfc7604>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank: Remi Denis-Courmont for\
    \ suggesting\n   the method of integrating ICE in RTSP signaling, Dan Wing for\
    \ help\n   with the security section and numerous other issues, Ari Keranen for\n\
    \   review of the document and its ICE details, and Flemming Andreasen\n   and\
    \ Alissa Cooper for a thorough review.  In addition, Bill Atwood\n   has provided\
    \ comments and suggestions for improvements.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jeff Goldberg\n   Cisco\n   32 Hamelacha St.\n   South\
    \ Netanya  42504\n   Israel\n   Phone: +972 9 8927222\n   Email: jgoldber@cisco.com\n\
    \   Magnus Westerlund\n   Ericsson\n   Farogatan 6\n   Stockholm  SE-164 80\n\
    \   Sweden\n   Phone: +46 8 719 0000\n   Email: magnus.westerlund@ericsson.com\n\
    \   Thomas Zeng\n   Nextwave Wireless, Inc.\n   12670 High Bluff Drive\n   San\
    \ Diego, CA  92130\n   United States of America\n   Phone: +1 858 480 3100\n \
    \  Email: thomas.zeng@gmail.com\n"
