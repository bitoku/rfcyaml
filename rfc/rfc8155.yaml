- title: __initial_text__
  contents:
  - '     Traversal Using Relays around NAT (TURN) Server Auto Discovery

    '
- title: Abstract
  contents:
  - "Abstract\n   Current Traversal Using Relays around NAT (TURN) server discovery\n\
    \   mechanisms are relatively static and limited to explicit\n   configuration.\
    \  These are usually under the administrative control of\n   the application or\
    \ TURN service provider, and not the enterprise,\n   ISP, or the network in which\
    \ the client is located.  Enterprises and\n   ISPs wishing to provide their own\
    \ TURN servers need auto-discovery\n   mechanisms that a TURN client could use\
    \ with minimal or no\n   configuration.  This document describes three such mechanisms\
    \ for\n   TURN server discovery.\n   This document updates RFC 5766 to relax the\
    \ requirement for mutual\n   authentication in certain cases.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8155.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Discovery Procedure . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Discovery Using Service Resolution  . . . . . . . . . . .\
    \ . .   5\n     4.1.  Retrieving Domain Name  . . . . . . . . . . . . . . . .\
    \ .   5\n       4.1.1.  DHCP  . . . . . . . . . . . . . . . . . . . . . . . .\
    \   5\n       4.1.2.  From Own Identity . . . . . . . . . . . . . . . . . .  \
    \ 6\n     4.2.  Resolution  . . . . . . . . . . . . . . . . . . . . . . .   6\n\
    \   5.  DNS Service Discovery . . . . . . . . . . . . . . . . . . . .   6\n  \
    \   5.1.  mDNS  . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n   6.\
    \  Discovery Using Anycast . . . . . . . . . . . . . . . . . . .   7\n   7.  Deployment\
    \ Considerations . . . . . . . . . . . . . . . . . .   8\n     7.1.  Mobility\
    \ and Changing IP Addresses  . . . . . . . . . . .   8\n     7.2.  Recursively\
    \ Encapsulated TURN . . . . . . . . . . . . . .   8\n   8.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .   9\n     8.1.  IPv4 Anycast  . .\
    \ . . . . . . . . . . . . . . . . . . . .   9\n     8.2.  IPv6 Anycast  . . .\
    \ . . . . . . . . . . . . . . . . . . .   9\n   9.  Security Considerations .\
    \ . . . . . . . . . . . . . . . . . .  10\n     9.1.  Service Resolution  . .\
    \ . . . . . . . . . . . . . . . . .  12\n     9.2.  DNS Service Discovery . .\
    \ . . . . . . . . . . . . . . . .  12\n     9.3.  Anycast . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  13\n   10. References  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  13\n     10.1.  Normative References . . . . .\
    \ . . . . . . . . . . . . .  13\n     10.2.  Informative References . . . . .\
    \ . . . . . . . . . . . .  15\n   Acknowledgements  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  16\n   Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TURN [RFC5766] is a protocol that is often used to improve\
    \ the\n   connectivity of Peer-to-Peer (P2P) applications (as defined in\n   Section\
    \ 2.7 of [RFC5128]).  TURN allows a connection to be\n   established when one\
    \ or both sides are incapable of a direct P2P\n   connection.  It is an important\
    \ building block for interactive, real-\n   time communication using audio, video,\
    \ collaboration, etc.\n   While TURN services are extensively used today, the\
    \ means to\n   automatically discover TURN servers do not exist.  TURN clients\
    \ are\n   usually explicitly configured with a well-known TURN server.  To\n \
    \  allow TURN applications to operate seamlessly across different types\n   of\
    \ networks and encourage the use of TURN without the need for manual\n   configuration,\
    \ it is important that there exist an auto-discovery\n   mechanism for TURN services.\
    \  Web Real-Time Communication (WebRTC)\n   [WebRTC-Overview] usages and related\
    \ extensions, which are mostly\n   based on web applications, need TURN server\
    \ discovery mechanisms.\n   This document describes three discovery mechanisms,\
    \ so as to maximize\n   the opportunity for discovery, based on the network in\
    \ which the TURN\n   client finds itself.  The three discovery mechanisms are:\n\
    \   o  A resolution mechanism based on Straightforward-Naming Authority\n    \
    \  Pointer (S-NAPTR) resource records in the Domain Name System\n      (DNS).\
    \  [RFC5928] describes details on retrieving a list of server\n      transport\
    \ addresses from the DNS that can be used to create a TURN\n      allocation.\n\
    \   o  DNS Service Discovery.\n   o  A mechanism based on an anycast address for\
    \ TURN.\n   In general, if a client wishes to communicate using one of its\n \
    \  interfaces using a specific IP address family, it SHOULD query the\n   TURN\
    \ server(s) that has been discovered for that specific interface\n   and address\
    \ family.  How to select an interface and IP address family\n   is out of the\
    \ scope of this document.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 3.  Discovery Procedure
  contents:
  - "3.  Discovery Procedure\n   TURN clients, by default, discover TURN server(s)\
    \ by means of local\n   or manual TURN configuration (i.e., TURN servers configured\
    \ at the\n   system level).  Configuration discovered from an application, e.g.,\
    \ a\n   JavaScript-specified TURN server for Web Real-Time Communication\n   (WebRTC)\
    \ [WebRTC-Overview] usages and related extensions, is\n   considered a local configuration.\
    \  An implementation may give the\n   user an opportunity (e.g., by means of configuration\
    \ file options or\n   menu items) to specify a TURN server for each address family.\
    \  A\n   client can choose auto-discovery in the absence of local\n   configuration,\
    \ if local configuration doesn't work or in addition to\n   local configuration.\
    \  This document does not offer a recommendation\n   on server selection.\n  \
    \ A TURN client that implements the auto-discovery algorithm, to\n   discover\
    \ TURN servers in the attached network, uses the following\n   mechanisms for\
    \ discovery:\n   o  Service Resolution: The TURN client attempts to perform TURN\n\
    \      service resolution using the host's DNS domain.\n   o  DNS SD: DNS Service\
    \ Discovery.\n   o  Anycast: Send TURN Allocation request to the assigned TURN\
    \ anycast\n      request for each combination of interface and address family.\n\
    \   Not all TURN servers may be discovered using NAPTR records or DNS SD.\n  \
    \ Similarly, not all TURN servers may support anycast.  For best\n   results,\
    \ a client SHOULD implement all the discovery mechanisms\n   described above.\n\
    \   The document does not prescribe a strict order that a client must\n   follow\
    \ for discovery.  An implementation may choose to perform all\n   the above steps\
    \ in parallel for discovery OR choose to follow any\n   desired order and stop\
    \ the discovery procedure if a mechanism\n   succeeds.\n   On hosts with more\
    \ than one interface or address family (IPv4/v6),\n   the TURN server discovery\
    \ procedure has to be performed for each\n   combination of interface and address\
    \ family.  A client MAY choose to\n   perform the discovery procedure only for\
    \ a desired interface/address\n   combination if the client does not wish to discover\
    \ a TURN server for\n   all combinations of interface and address family.\n"
- title: 4.  Discovery Using Service Resolution
  contents:
  - "4.  Discovery Using Service Resolution\n   This mechanism is performed in two\
    \ steps:\n   1.  A DNS domain name is retrieved for each combination of interface\n\
    \       and address family.\n   2.  Retrieved DNS domain names are then used for\
    \ S-NAPTR lookups as\n       per [RFC5928].  Further DNS lookups may be necessary\
    \ to determine\n       TURN server IP address(es).\n"
- title: 4.1.  Retrieving Domain Name
  contents:
  - "4.1.  Retrieving Domain Name\n   A client has to determine the domain in which\
    \ it is located.  The\n   following sections provide two possible mechanisms to\
    \ learn the\n   domain name, but other means of retrieving domain names may be\
    \ used,\n   which are outside the scope of this document, e.g., local\n   configuration.\n\
    \   Implementations may allow the user to specify a default name that is\n   used\
    \ if no specific name has been configured.\n"
- title: 4.1.1.  DHCP
  contents:
  - "4.1.1.  DHCP\n   DHCP can be used to determine the domain name related to an\n\
    \   interface's point of network attachment.  Network operators may\n   provide\
    \ the domain name to be used for service discovery within an\n   access network\
    \ using DHCP.  Sections 3.2 and 3.3 of [RFC5986] define\n   DHCP IPv4 and IPv6\
    \ access network domain name options,\n   OPTION_V4_ACCESS_DOMAIN and OPTION_V6_ACCESS_DOMAIN\
    \ respectively, to\n   identify a domain name that is suitable for service discovery\
    \ within\n   the access network.\n   For IPv4, the discovery procedure MUST request\
    \ the access network\n   domain name option in a Parameter Request List option,\
    \ as described\n   in [RFC2131].  [RFC2132] defines the DHCP IPv4 domain name\
    \ option;\n   while this option is less suitable, a client MAY request it if the\n\
    \   access network domain name defined in [RFC5986] is not available.\n   For\
    \ IPv6, the discovery procedure MUST request the access network\n   domain name\
    \ option in an Options Request Option (ORO) within an\n   Information-request\
    \ message, as described in [RFC3315].\n   If neither option can be retrieved,\
    \ the procedure fails for this\n   interface.  If a result can be retrieved, it\
    \ will be used as an input\n   for S-NAPTR resolution.\n"
- title: 4.1.2.  From Own Identity
  contents:
  - "4.1.2.  From Own Identity\n   For a TURN client with an understanding of the\
    \ protocol mechanics of\n   calling applications, the client may wish to extract\
    \ the domain name\n   from its own identity, i.e, the canonical identifier used\
    \ to reach\n   the user.\n   Example:\n   SIP      : 'sip:alice@example.com'\n\
    \   Bare JID : 'alice@example.com'\n   email    : 'alice@example.com'\n   'example.com'\
    \ is retrieved from the above examples.\n   A client may support multiple users,\
    \ potentially with different\n   domains, or a single user utilizing different\
    \ domains for different\n   services.  The means to choose and extract the domain\
    \ name may be\n   different based on the type of identifier, service being used,\
    \ etc.,\n   which are outside the scope of this document.\n"
- title: 4.2.  Resolution
  contents:
  - "4.2.  Resolution\n   Once the TURN discovery procedure has retrieved domain names,\
    \ the\n   resolution mechanism described in [RFC5928] is followed.  An S-NAPTR\n\
    \   lookup with the 'RELAY' application service and the desired protocol\n   tag\
    \ is made to obtain the information necessary to connect to the\n   authoritative\
    \ TURN server within the given domain.\n   If no TURN-specific S-NAPTR records\
    \ can be retrieved, the discovery\n   procedure fails for this domain name (and\
    \ the corresponding interface\n   and IP protocol version).  If more domain names\
    \ are known, the\n   discovery procedure may perform the corresponding S-NAPTR\
    \ lookups\n   immediately.  However, before retrying a lookup that has failed,\
    \ a\n   client must wait a time period that is appropriate for the\n   encountered\
    \ error (NXDOMAIN, timeout, etc.).\n"
- title: 5.  DNS Service Discovery
  contents:
  - "5.  DNS Service Discovery\n   DNS-based Service Discovery (DNS-SD) [RFC6763]\
    \ and Multicast DNS\n   (mDNS) [RFC6762] provide generic solutions for discovering\
    \ services\n   available in a local network.  DNS-SD/mDNS define a set of naming\n\
    \   rules for certain DNS record types that they use for advertising and\n   discovering\
    \ services.\n   Section 4.1 of [RFC6763] specifies that a service instance name\
    \ in\n   DNS-SD has the following structure:\n   <Instance> . <Service> . <Domain>\n\
    \   The <Domain> portion specifies the DNS sub-domain where the service\n   instance\
    \ is registered.  It may be \"local.\", indicating the mDNS\n   local domain,\
    \ or it may be a conventional domain name such as\n   \"example.com.\".  The <Service>\
    \ portion of the TURN service instance\n   name MUST be \"_turn._udp\" or \"_turn._tcp\"\
    \ or \"_turns._udp\" or\n   \"_turns._tcp\", as introduced in [RFC5766].\n"
- title: 5.1.  mDNS
  contents:
  - "5.1.  mDNS\n   A TURN client can proactively discover TURN servers being advertised\n\
    \   in the site by multicasting a PTR query to one or all of the\n   following:\n\
    \   o  \"_turn._udp.local.\"\n   o  \"_turn._tcp.local\"\n   o  \"_turns._udp.local.\"\
    \n   o  \"_turns._tcp.local\"\n   A TURN server can send out gratuitous multicast\
    \ DNS answer packets\n   whenever it starts up, wakes from sleep, or detects a\
    \ change in\n   network configuration.  TURN clients receive these gratuitous\
    \ packets\n   and cache information contained in it.\n"
- title: 6.  Discovery Using Anycast
  contents:
  - "6.  Discovery Using Anycast\n   IP anycast can also be used for TURN service\
    \ discovery.  A packet\n   sent to an anycast address is delivered to the \"topologically\n\
    \   nearest\" network interface with the anycast address.  Using the TURN\n  \
    \ anycast address, the only two things that need to be deployed in the\n   network\
    \ for discovery are the two things that actually use TURN.\n   When a client requires\
    \ TURN services, it sends a TURN Allocation\n   request to the assigned anycast\
    \ address.  A TURN anycast server\n   performs checks 1 through 7 discussed in\
    \ Section 6.2 of [RFC5766].\n   If all checks pass, the TURN anycast server MUST\
    \ respond with a 300\n   (Try Alternate) error as described in Section 2.9 of\
    \ [RFC5766]; the\n   response contains the TURN unicast address in the ALTERNATE-SERVER\n\
    \   attribute.  For subsequent communication with the TURN server, the\n   client\
    \ uses the responding server's unicast address.  This has to be\n   done because\
    \ two packets addressed to an anycast address may reach\n   two different anycast\
    \ servers.  The client, thus, also needs to\n   ensure that the initial request\
    \ fits in a single packet.  An\n   implementation may choose to send out every\
    \ new TURN Allocation\n   request to the anycast address to discover the closest\
    \ and the most\n   optimal unicast address for the TURN server.\n"
- title: 7.  Deployment Considerations
  contents:
  - '7.  Deployment Considerations

    '
- title: 7.1.  Mobility and Changing IP Addresses
  contents:
  - "7.1.  Mobility and Changing IP Addresses\n   A change of IP address on an interface\
    \ may invalidate the result of\n   the TURN server discovery procedure.  For instance,\
    \ if the IP address\n   assigned to a mobile host changes due to host mobility,\
    \ it may be\n   required to re-run the TURN server discovery procedure without\n\
    \   relying on earlier gained information.  New requests should be made\n   to\
    \ the newly learned TURN servers that were learned after TURN the\n   discovery\
    \ was re-run.  However, if an earlier learned TURN server is\n   still accessible\
    \ using the new IP address, procedures described for\n   mobility using TURN defined\
    \ in [RFC8016] can be used for ongoing\n   streams.\n"
- title: 7.2.  Recursively Encapsulated TURN
  contents:
  - "7.2.  Recursively Encapsulated TURN\n   WebRTC endpoints SHOULD treat any TURN\
    \ server discovered through the\n   mechanisms described in this specification\
    \ as an enterprise/gateway\n   or access network server, in accordance with Recursively\
    \ Encapsulated\n   TURN [RETURN].\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  IPv4 Anycast
  contents:
  - "8.1.  IPv4 Anycast\n   IANA has assigned a single IPv4 address from the 192.0.0.0/24\
    \ prefix\n   and registered it in the \"IANA IPv4 Special-Purpose Address Registry\"\
    \n   [RFC6890].\n    +----------------------+-------------------------------------------+\n\
    \    | Attribute            | Value                                     |\n  \
    \  +----------------------+-------------------------------------------+\n    |\
    \ Address Block        | 192.0.0.10/32                             |\n    | Name\
    \                 | Traversal Using Relays around NAT Anycast |\n    | RFC   \
    \               | RFC 8155                                  |\n    | Allocation\
    \ Date      | 2017-02                                   |\n    | Termination Date\
    \     | N/A                                       |\n    | Source            \
    \   | True                                      |\n    | Destination         \
    \ | True                                      |\n    | Forwardable          |\
    \ True                                      |\n    | Global               | True\
    \                                      |\n    | Reserved-by-Protocol | False \
    \                                    |\n    +----------------------+-------------------------------------------+\n"
- title: 8.2.  IPv6 Anycast
  contents:
  - "8.2.  IPv6 Anycast\n   IANA has assigned a single IPv6 address from the 2001:0000::/23\n\
    \   prefix and registered it in the \"IANA IPv6 Special-Purpose Address\n   Registry\"\
    \ [RFC6890].\n    +----------------------+-------------------------------------------+\n\
    \    | Attribute            | Value                                     |\n  \
    \  +----------------------+-------------------------------------------+\n    |\
    \ Address Block        | 2001:1::2/128                             |\n    | Name\
    \                 | Traversal Using Relays around NAT Anycast |\n    | RFC   \
    \               | RFC 8155                                  |\n    | Allocation\
    \ Date      | 2017-02                                   |\n    | Termination Date\
    \     | N/A                                       |\n    | Source            \
    \   | True                                      |\n    | Destination         \
    \ | True                                      |\n    | Forwardable          |\
    \ True                                      |\n    | Global               | True\
    \                                      |\n    | Reserved-by-Protocol | False \
    \                                    |\n    +----------------------+-------------------------------------------+\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Use of Session Traversal Utilities for NAT (STUN)\
    \ [RFC5389]\n   authentication is OPTIONAL for TURN servers provided by the local\n\
    \   network or by the access network.  A network-provided TURN server MAY\n  \
    \ be configured to accept Allocation requests without STUN\n   authentication,\
    \ and a TURN client MAY be configured to accept\n   Allocation success responses\
    \ without STUN authentication from a\n   network-provided TURN server.\n   Making\
    \ STUN authentication optional is a downgrade of a MUST level\n   requirement\
    \ defined in [RFC5766].  The downgrade allows TURN servers\n   provided by the\
    \ local or access network to accept Allocation requests\n   from new and/or guest\
    \ users in the network who do not necessarily\n   possess long term credentials\
    \ for STUN authentication.  The intention\n   in such deployments is to provide\
    \ TURN services to all users in the\n   local or access network.  However, this\
    \ opens up a TURN server to a\n   variety of attacks described in Section 17 of\
    \ [RFC5766].  A TURN\n   server in such cases must be configured to only process\
    \ STUN requests\n   from the trusted local network or subscribers of the access\
    \ network.\n   Operational measures must be taken in order to protect the TURN\n\
    \   server; some of these measures include, but are not limited to,\n   access\
    \ control by means of access lists, firewalls, subscriber quota\n   limits, ingress\
    \ filtering, etc.\n   A TURN client in the absence of the STUN long-term credential\n\
    \   mechanism [RFC5389] or the STUN Extension for Third-Party\n   Authorization\
    \ [RFC7635] MUST use (D)TLS unless it trusts the network\n   infrastructure to\
    \ defend against attacks discussed in [RFC5766].  It\n   is RECOMMENDED that the\
    \ TURN client use one of the following\n   techniques with (D)TLS to validate\
    \ the TURN server:\n   o  For certificate-based authentication, a pre-populated\
    \ trust anchor\n      store [RFC6024] allows a TURN client to perform path validation\n\
    \      for the server certificate obtained during the (D)TLS handshake.\n    \
    \  If the client used a domain name to discover the TURN server, that\n      domain\
    \ name also provides a mechanism for validation of the TURN\n      server.  The\
    \ client MUST use the rules and guidelines given in\n      Section 6 of [RFC6125]\
    \ to validate the TURN server identity.\n   o  Certification authorities that\
    \ issue TURN server certificates\n      SHOULD support the CN-ID, DNS-ID, SRV-ID,\
    \ and URI-ID identifier\n      types.  TURN service providers SHOULD prefer the\
    \ use of DNS-ID,\n      SRV-ID, and URI-ID over CN-ID identifier types in certificate\n\
    \      requests (as described in Section 2.3 from [RFC6125]) and the\n      wildcard\
    \ character '*' SHOULD NOT be included in the presented\n      identifier.\n \
    \  o  For TURN servers that don't have a certificate trust chain (e.g.,\n    \
    \  because they are on a home network or a corporate network), a\n      configured\
    \ list of TURN servers can contain the Subject Public Key\n      Info (SPKI) fingerprint\
    \ of the TURN servers.  The public key is\n      used for the same reasons HTTP\
    \ pinning [RFC7469] uses the public\n      key.\n   o  Raw public key-based authentication,\
    \ as defined in [RFC7250],\n      could also be used to authenticate a TURN server.\n\
    \   An auto-discovered TURN server is considered to be only as trusted as\n  \
    \ the path between the client and the TURN server.  In order to safely\n   use\
    \ auto-discovered TURN servers for sessions with 'strict privacy'\n   requirements,\
    \ the user needs to be able to define privacy criteria\n   (e.g., a trusted list\
    \ of servers, networks, or domains) that are\n   considered acceptable for such\
    \ traffic.  Any discovered TURN server\n   outside the criteria is considered\
    \ untrusted and therefore MUST NOT\n   be used for privacy-sensitive communication.\n\
    \   In some auto-discovery scenarios, it might not be possible for the\n   TURN\
    \ client to use (D)TLS authentication to validate the TURN server.\n   However,\
    \ fallback to clear text in such cases could leave the TURN\n   client open to\
    \ on-path injection of spoofed TURN messages.  A TURN\n   client could fall back\
    \ to encryption-only (D)TLS when (D)TLS\n   authentication is not available but\
    \ MUST NOT fall back without\n   explicit administrator choice.  Another reason\
    \ to fall back to\n   encryption-only is for privacy, which is analogous to SMTP\n\
    \   opportunistic encryption [RFC7435] where one does not require privacy\n  \
    \ but one desires privacy when possible.\n   In order to allow the TURN client\
    \ to fall back to (D)TLS as described\n   above, a TURN server that does not require\
    \ either STUN long-term\n   authentication [RFC5389] or STUN Extension for Third\
    \ Party\n   Authorization [RFC7635] MUST support (D)TLS and, if the network\n\
    \   infrastructure is capable of defending against attacks discussed in\n   [RFC5766],\
    \ then the TURN server MAY allow fallback to clear text.\n   A TURN client could\
    \ fall back to clear text if it does not support\n   unauthenticated (D)TLS but\
    \ MUST NOT fall back without explicit\n   administrator choice.  Fallback to clear\
    \ text is NOT RECOMMENDED\n   because it makes the client more susceptible to\
    \ man-in-the-middle\n   attacks and on-path packet injection.\n"
- title: 9.1.  Service Resolution
  contents:
  - "9.1.  Service Resolution\n   The primary attack against the methods described\
    \ in this document is\n   one that would lead to impersonation of a TURN server.\
    \  An attacker\n   could attempt to compromise the S-NAPTR resolution.  Security\n\
    \   considerations described in [RFC5928] are applicable here as well.\n   In\
    \ addition to considerations related to S-NAPTR, it is important to\n   recognize\
    \ that the output of this is entirely dependent on its input.\n   An attacker\
    \ who can control the domain name can also control the\n   final result.  Because\
    \ more than one method can be used to determine\n   the domain name, a host implementation\
    \ needs to consider attacks\n   against each of the methods that are used.\n \
    \  If DHCP is used, the integrity of DHCP options is limited by the\n   security\
    \ of the channel over which they are provided.  Physical\n   security and separation\
    \ of DHCP messages from other packets are\n   commonplace methods that can reduce\
    \ the possibility of attack within\n   an access network; alternatively, DHCP\
    \ authentication [RFC3188] can\n   provide a degree of protection against modification.\
    \  When using DHCP\n   discovery, clients are encouraged to use unicast DHCP INFORM\
    \ queries\n   instead of broadcast queries, which are more easily spoofed in\n\
    \   insecure networks.\n"
- title: 9.2.  DNS Service Discovery
  contents:
  - "9.2.  DNS Service Discovery\n   Since DNS-SD is just a specification for how\
    \ to name and use records\n   in the existing DNS system, it has no specific additional\
    \ security\n   requirements over and above those that already apply to DNS queries\n\
    \   and DNS updates.  For DNS queries, DNS Security Extensions (DNSSEC)\n   [RFC4033]\
    \ should be used where the authenticity of information is\n   important.  For\
    \ DNS updates, secure updates [RFC2136] [RFC3007]\n   should generally be used\
    \ to control which clients have permission to\n   update DNS records.\n   For\
    \ mDNS, in addition to what has been described above, a principal\n   security\
    \ threat is a security threat inherent to IP multicast routing\n   and any application\
    \ that runs on it.  A rogue system can advertise\n   that it is a TURN server.\
    \  Discovery of such rogue systems as TURN\n   servers, in itself, is not a security\
    \ threat if there is a means for\n   the TURN client to authenticate and authorize\
    \ the discovered TURN\n   servers.\n"
- title: 9.3.  Anycast
  contents:
  - "9.3.  Anycast\n   In a network without any TURN server that is aware of the TURN\n\
    \   anycast address, outgoing TURN requests could leak out onto the\n   external\
    \ Internet, possibly revealing information.\n   Using an IANA-assigned well-known\
    \ TURN anycast address enables border\n   gateways to block such outgoing packets.\
    \  In the default-free zone,\n   routers should be configured to drop such packets.\
    \  Such\n   configuration can occur naturally via BGP messages advertising that\n\
    \   no route exists to said address.\n   Sensitive clients that do not wish to\
    \ leak information about their\n   presence can set an IP TTL on their TURN requests\
    \ that limits how far\n   they can travel into the public Internet.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n         \
    \     RFC 2131, DOI 10.17487/RFC2131, March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n\
    \   [RFC2132]  Alexander, S. and R. Droms, \"DHCP Options and BOOTP Vendor\n \
    \             Extensions\", RFC 2132, DOI 10.17487/RFC2132, March 1997,\n    \
    \          <http://www.rfc-editor.org/info/rfc2132>.\n   [RFC2136]  Vixie, P.,\
    \ Ed., Thomson, S., Rekhter, Y., and J. Bound,\n              \"Dynamic Updates\
    \ in the Domain Name System (DNS UPDATE)\",\n              RFC 2136, DOI 10.17487/RFC2136,\
    \ April 1997,\n              <http://www.rfc-editor.org/info/rfc2136>.\n   [RFC3007]\
    \  Wellington, B., \"Secure Domain Name System (DNS) Dynamic\n              Update\"\
    , RFC 3007, DOI 10.17487/RFC3007, November 2000,\n              <http://www.rfc-editor.org/info/rfc3007>.\n\
    \   [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n    \
    \          C., and M. Carney, \"Dynamic Host Configuration Protocol\n        \
    \      for IPv6 (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n           \
    \   2003, <http://www.rfc-editor.org/info/rfc3315>.\n   [RFC4033]  Arends, R.,\
    \ Austein, R., Larson, M., Massey, D., and S.\n              Rose, \"DNS Security\
    \ Introduction and Requirements\",\n              RFC 4033, DOI 10.17487/RFC4033,\
    \ March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n   [RFC5389]\
    \  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session\
    \ Traversal Utilities for NAT (STUN)\", RFC 5389,\n              DOI 10.17487/RFC5389,\
    \ October 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n   [RFC5766]\
    \  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n             \
    \ Relays around NAT (TURN): Relay Extensions to Session\n              Traversal\
    \ Utilities for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5766>.\n   [RFC5928]\
    \  Petit-Huguenin, M., \"Traversal Using Relays around NAT\n              (TURN)\
    \ Resolution Mechanism\", RFC 5928,\n              DOI 10.17487/RFC5928, August\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5928>.\n   [RFC5986]\
    \  Thomson, M. and J. Winterbottom, \"Discovering the Local\n              Location\
    \ Information Server (LIS)\", RFC 5986,\n              DOI 10.17487/RFC5986, September\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5986>.\n   [RFC6024]\
    \  Reddy, R. and C. Wallace, \"Trust Anchor Management\n              Requirements\"\
    , RFC 6024, DOI 10.17487/RFC6024, October\n              2010, <http://www.rfc-editor.org/info/rfc6024>.\n\
    \   [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n  \
    \            DOI 10.17487/RFC6762, February 2013,\n              <http://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <http://www.rfc-editor.org/info/rfc6763>.\n   [RFC6890]  Cotton, M., Vegoda,\
    \ L., Bonica, R., Ed., and B. Haberman,\n              \"Special-Purpose IP Address\
    \ Registries\", BCP 153,\n              RFC 6890, DOI 10.17487/RFC6890, April\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6890>.\n   [RFC7250]\
    \  Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,\n              Weiler,\
    \ S., and T. Kivinen, \"Using Raw Public Keys in\n              Transport Layer\
    \ Security (TLS) and Datagram Transport\n              Layer Security (DTLS)\"\
    , RFC 7250, DOI 10.17487/RFC7250,\n              June 2014, <http://www.rfc-editor.org/info/rfc7250>.\n\
    \   [RFC7635]  Reddy, T., Patil, P., Ravindranath, R., and J. Uberti,\n      \
    \        \"Session Traversal Utilities for NAT (STUN) Extension for\n        \
    \      Third-Party Authorization\", RFC 7635,\n              DOI 10.17487/RFC7635,\
    \ August 2015,\n              <http://www.rfc-editor.org/info/rfc7635>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RETURN]   Schwartz, B. and J. Uberti, \"Recursively\
    \ Encapsulated TURN\n              (RETURN) for Connectivity and Privacy in WebRTC\"\
    , Work in\n              Progress, draft-ietf-rtcweb-return-02, March 2017.\n\
    \   [RFC3188]  Hakala, J., \"Using National Bibliography Numbers as\n        \
    \      Uniform Resource Names\", RFC 3188, DOI 10.17487/RFC3188,\n           \
    \   October 2001, <http://www.rfc-editor.org/info/rfc3188>.\n   [RFC5128]  Srisuresh,\
    \ P., Ford, B., and D. Kegel, \"State of Peer-to-\n              Peer (P2P) Communication\
    \ across Network Address\n              Translators (NATs)\", RFC 5128, DOI 10.17487/RFC5128,\
    \ March\n              2008, <http://www.rfc-editor.org/info/rfc5128>.\n   [RFC6125]\
    \  Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification\
    \ of Domain-Based Application Service Identity\n              within Internet\
    \ Public Key Infrastructure Using X.509\n              (PKIX) Certificates in\
    \ the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI\
    \ 10.17487/RFC6125, March\n              2011, <http://www.rfc-editor.org/info/rfc6125>.\n\
    \   [RFC7435]  Dukhovni, V., \"Opportunistic Security: Some Protection\n     \
    \         Most of the Time\", RFC 7435, DOI 10.17487/RFC7435,\n              December\
    \ 2014, <http://www.rfc-editor.org/info/rfc7435>.\n   [RFC7469]  Evans, C., Palmer,\
    \ C., and R. Sleevi, \"Public Key Pinning\n              Extension for HTTP\"\
    , RFC 7469, DOI 10.17487/RFC7469, April\n              2015, <http://www.rfc-editor.org/info/rfc7469>.\n\
    \   [RFC8016]  Reddy, T., Wing, D., Patil, P., and P. Martinsen,\n           \
    \   \"Mobility with Traversal Using Relays around NAT (TURN)\",\n            \
    \  RFC 8016, DOI 10.17487/RFC8016, November 2016,\n              <http://www.rfc-editor.org/info/rfc8016>.\n\
    \   [WebRTC-Overview]\n              Alvestrand, H., \"Overview: Real Time Protocols\
    \ for\n              Browser-based Applications\", Work in Progress,\n       \
    \       draft-ietf-rtcweb-overview-18, March 2017.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Simon Perrault, Paul Kyzivat,\
    \ Troy\n   Shields, Eduardo Gueiros, Ted Hardie, Bernard Aboba, Karl Stahl,\n\
    \   Brian Weis, Ralph Dromes, Ben Campbell, Suresh Krishnan, and Brandon\n   Williams\
    \ for their review and valuable comments.  Thanks to Adam\n   Roach for his detailed\
    \ review and suggesting DNS Service Discovery as\n   an additional discovery mechanism.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Prashanth Patil\n   Cisco Systems, Inc.\n   Email: praspati@cisco.com\n\
    \   Tirumaleswar Reddy\n   Cisco Systems, Inc.\n   Cessna Business Park, Varthur\
    \ Hobli\n   Sarjapur Marathalli Outer Ring Road\n   Bangalore, Karnataka  560103\n\
    \   India\n   Email: tireddy@cisco.com\n   Dan Wing\n   United States America\n\
    \   Email: dwing-ietf@fuggles.com\n"
