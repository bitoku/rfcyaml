- title: __initial_text__
  contents:
  - "            Test Cases for HMAC-RIPEMD160 and HMAC-RIPEMD128\nStatus of this\
    \ Memo\n   This memo provides information for the Internet community.  It does\n\
    \   not specify an Internet standard of any kind.  Distribution of this\n   memo\
    \ is unlimited.\nCopyright Notice\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\nAbstract\n   This document provides two sets of test\
    \ cases for HMAC-RIPEMD160 and\n   HMAC-RIPEMD128, respectively. HMAC-RIPEMD160\
    \ and HMAC-RIPEMD128 are\n   two constructs of the HMAC [HMAC] message authentication\
    \ function\n   using the RIPEMD-160 and RIPEMD-128 [RIPE] hash functions. The\
    \ test\n   cases and results provided in this document are meant to be used as\
    \ a\n   conformance test for HMAC-RIPEMD160 and HMAC-RIPEMD128\n   implementations.\n\
    1. Introduction\n   The general method for constructing a HMAC message authentication\n\
    \   function using a particular hash function is described in section 2\n   of\
    \ [HMAC].\n   In sections 2 and 3 test cases for HMAC-RIPEMD160 and HMAC-RIPEMD128,\n\
    \   respectively are provided. Each case includes the key, the data, and\n   the\
    \ result.  The values of keys and data are either hexadecimal\n   numbers (prefixed\
    \ by \"0x\") or ASCII character strings in double\n   quotes. If a value is an\
    \ ASCII character string, then the HMAC\n   computation for the corresponding\
    \ test case DOES NOT include the\n   trailing null character ('\\0') in the string.\n\
    \   The C source code of the functions used to generate HMAC-RIPEMD160\n   and\
    \ HMAC-RIPEMD128 results is listed in the Appendix. Please Note\n   that the functions\
    \ provided are implemented in such a way as to be\n   simple and easy to understand\
    \ as a result they are not optimized in\n   any way. The C source code for computing\
    \ HMAC-MD5 can be found in\n   [MD5].\n2. Test Cases for HMAC-RIPEMD160\ntest_case\
    \ =         1\nkey =               0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n\
    key_len =           20\ndata =              \"Hi There\"\ndata_len =         \
    \ 8\ndigest =            0x24cb4bd67d20fc1a5d2ed7732dcc39377f0a5668\ntest_case\
    \ =         2\nkey =               \"Jefe\"\nkey_len =           4\ndata =   \
    \           \"what do ya want for nothing?\"\ndata_len =          28\ndigest =\
    \            0xdda6c0213a485a9e24f4742064a7f033b43c4069\ntest_case =         3\n\
    key =               0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nkey_len =    \
    \       20\ndata =              0xdd repeated 50 times\ndata_len =          50\n\
    digest =            0xb0b105360de759960ab4f35298e116e295d8e7c1\ntest_case =  \
    \       4\nkey =               0x0102030405060708090a0b0c0d0e0f10111213141516171819\n\
    key_len =           25\ndata =              0xcd repeated 50 times\ndata_len =\
    \          50\ndigest =            0xd5ca862f4d21d5e610e18b4cf1beb97a4365ecf4\n\
    test_case =         5\nkey =               0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c\n\
    key_len =           20\ndata =              \"Test With Truncation\"\ndata_len\
    \ =          20\ndigest =            0x7619693978f91d90539ae786500ff3d8e0518e39\n\
    digest-96 =         0x7619693978f91d90539ae786\ntest_case =         6\nkey = \
    \              0xaa repeated 80 times\nkey_len =           80\ndata =        \
    \      \"Test Using Larger Than Block-Size Key - Hash Key\n                  \
    \  First\"\ndata_len =          54\ndigest =            0x6466ca07ac5eac29e1bd523e5ada7605b791fd8b\n\
    test_case =         7\nkey =               0xaa repeated 80 times\nkey_len = \
    \          80\ndata =              \"Test Using Larger Than Block-Size Key and\
    \ Larger\n                    Than One Block-Size Data\"\ndata_len =         \
    \ 73\ndigest =            0x69ea60798d71616cce5fd0871e23754cd75d5a0a\n3. Test\
    \ Cases for HMAC-RIPEMD128\ntest_case =         1\nkey =               0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n\
    key_len =           16\ndata =              \"Hi There\"\ndata_len =         \
    \ 8\ndigest =            0xfbf61f9492aa4bbf81c172e84e0734db\ntest_case =     \
    \    2\nkey =               \"Jefe\"\nkey_len =           4\ndata =          \
    \    \"what do ya want for nothing?\"\ndata_len =          28\ndigest =      \
    \      0x875f828862b6b334b427c55f9f7ff09b\ntest_case =         3\nkey =      \
    \         0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nkey_len =           16\ndata = \
    \             0xdd repeated 50 times\ndata_len =          50\ndigest =       \
    \     0x09f0b2846d2f543da363cbec8d62a38d\ntest_case =         4\nkey =       \
    \        0x0102030405060708090a0b0c0d0e0f10111213141516171819\nkey_len =     \
    \      25\ndata =              0xcd repeated 50 times\ndata_len =          50\n\
    digest =            0xbdbbd7cf03e44b5aa60af815be4d2294\ntest_case =         5\n\
    key =               0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c\nkey_len =           16\n\
    data =              \"Test With Truncation\"\ndata_len =          20\ndigest =\
    \            0xe79808f24b25fd031c155f0d551d9a3a\ndigest-96 =         0xe79808f24b25fd031c155f0d\n\
    test_case =         6\nkey =               0xaa repeated 80 times\nkey_len = \
    \          80\ndata =              \"Test Using Larger Than Block-Size Key - Hash\
    \ Key\n                    First\"\ndata_len =          54\ndigest =         \
    \   0xdc732928de98104a1f59d373c150acbb\ntest_case =         7\nkey =         \
    \      0xaa repeated 80 times\nkey_len =           80\ndata =              \"\
    Test Using Larger Than Block-Size Key and Larger\n                    Than One\
    \ Block-Size Data\"\ndata_len =          73\ndigest =            0x5c6bec96793e16d40690c237635f30c5\n\
    4. Security Considerations\n   This document raises no security issues.  Discussion\
    \ on the strength\n   of the HMAC construction can be found in [HMAC].\nReferences\n\
    \   [HMAC]    Krawczyk, H., Bellare, M., and R. Canetti,\n             \"HMAC:\
    \ Keyed-Hashing for Message Authentication\", RFC 2104,\n             February\
    \ 1997.\n   [MD5]     Rivest, R., \"The MD5 Message-Digest Algorithm\",\n    \
    \         RFC 1321, April 1992.\n   [OG]      Oehler, M., and R. Glenn,\n    \
    \         \"HMAC-MD5 IP Authentication with Replay Prevention\", RFC\n       \
    \      2085, February 1997\n   [CG]      Chang, S., and R. Glenn,\n          \
    \   \"Test Cases for HMAC-MD5 and HMAC-SHA-1\", RFC 2202,\n             September\
    \ 1997.\n   [RIPE]    Dobbertin, H., Bosselaers A., and Preneel, B.\n        \
    \     \"RIPEMD-160: A Strengthened Version of RIPEMD\" April 1996\nAuthor's Address\n\
    \   Justin S. Kapp\n   Reaper Technologies\n   The Post Office, Dunsop Bridge\n\
    \   Clitheroe, Lancashire.\n   BB7 3BB.  United Kingdom\n   EMail: skapp@reapertech.com\n\
    Appendix\n   This code which implements HMAC-RIPEMD160 using an existing RIPEMD-\n\
    \   160 library.  It assumes that the RIPEMD-160 library has similar\n   API's\
    \ as those of the MD5 code described in RFC 1321.  The code for\n   HMAC-MD5,\
    \ is similar, this HMAC-MD5 code is also listed in RFC 2104.\n   To adapt this\
    \ example to produce the HMAC-RIPEMD128 then replace each\n   occurance of 'RMD160'\
    \ with 'RMD128'.\n#ifndef RMD160_DIGESTSIZE\n#define RMD160_DIGESTSIZE  20\n#endif\n\
    #ifndef RMD128_DIGESTSIZE\n#define RMD128_DIGESTSIZE  16\n#endif\n/*  HMAC_RMD160\
    \ implements HMAC-RIPEMD160 */\nvoid HMAC_RMD160(input, len, key, keylen, digest)\n\
    unsigned char *input;                       /* pointer to data stream */\nint\
    \ len;                                     /* length of data stream */\nunsigned\
    \ char *key;                  /* pointer to authentication key */\nint keylen;\
    \                           /* length of authentication key */\nunsigned char\
    \ *digest;                        /* resulting MAC digest */\n{\n    RMD160_CTX\
    \ context;\n    unsigned char k_ipad[65];  /* inner padding - key XORd with ipad\
    \ */\n    unsigned char k_opad[65];  /* outer padding - key XORd with opad */\n\
    \    unsigned char tk[RMD160_DIGESTSIZE];\n    int i;\n    /* if key is longer\
    \ than 64 bytes reset it to key=SHA1(key) */\n    if (keylen > 64) {\n       \
    \ RMD160_CTX      tctx;\n        RMD160Init(&tctx);\n        RMD160Update(&tctx,\
    \ key, keylen);\n        RMD160Final(tk, &tctx);\n        key = tk;\n        keylen\
    \ = RMD160_DIGESTSIZE;\n    }\n        /* The HMAC_SHA1 transform looks like:\n\
    \           RMD160(K XOR opad, RMD160(K XOR ipad, text))\n           where K is\
    \ an n byte key\n           ipad is the byte 0x36 repeated 64 times\n        \
    \   opad is the byte 0x5c repeated 64 times\n           and text is the data being\
    \ protected */\n        /* start out by storing key in pads */\n    memset(k_ipad,\
    \ 0x36, sizeof(k_ipad));\n    memset(k_opad, 0x5c, sizeof(k_opad));\n        /*\
    \ XOR key with ipad and opad values */\n    for (i=0; i<keylen; i++) {\n     \
    \   k_ipad[i] ^= key[i];\n        k_opad[i] ^= key[i];\n    }\n        /* perform\
    \ inner RIPEMD-160 */\n    RMD160Init(&context);           /* init context for\
    \ 1st pass */\n    RMD160Update(&context, k_ipad, 64);  /* start with inner pad\
    \ */\n    RMD160Update(&context, input, len); /* then text of datagram */\n  \
    \  RMD160Final(digest, &context);         /* finish up 1st pass */\n        /*\
    \ perform outer RIPEMD-160 */\n    RMD160Init(&context);           /* init context\
    \ for 2nd pass */\n    RMD160Update(&context, k_opad, 64);  /* start with outer\
    \ pad */\n    /* then results of 1st hash */\n    RMD160Update(&context, digest,\
    \ RMD160_DIGESTSIZE);\n    RMD160Final(digest, &context);         /* finish up\
    \ 2nd pass */\n    memset(k_ipad, 0x00, sizeof(k_ipad));\n    memset(k_opad, 0x00,\
    \ sizeof(k_opad));\n}\nFull Copyright Statement\n   Copyright (C) The Internet\
    \ Society (1998).  All Rights Reserved.\n   This document and translations of\
    \ it may be copied and furnished to\n   others, and derivative works that comment\
    \ on or otherwise explain it\n   or assist in its implementation may be prepared,\
    \ copied, published\n   and distributed, in whole or in part, without restriction\
    \ of any\n   kind, provided that the above copyright notice and this paragraph\
    \ are\n   included on all such copies and derivative works.  However, this\n \
    \  document itself may not be modified in any way, such as by removing\n   the\
    \ copyright notice or references to the Internet Society or other\n   Internet\
    \ organizations, except as needed for the purpose of\n   developing Internet standards\
    \ in which case the procedures for\n   copyrights defined in the Internet Standards\
    \ process must be\n   followed, or as required to translate it into languages\
    \ other than\n   English.\n   The limited permissions granted above are perpetual\
    \ and will not be\n   revoked by the Internet Society or its successors or assigns.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
