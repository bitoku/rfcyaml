- title: __initial_text__
  contents:
  - "                   HMAC-Authenticated Diffie-Hellman\n                 for Multimedia\
    \ Internet KEYing (MIKEY)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a lightweight point-to-point key management\n\
    \   protocol variant for the multimedia Internet keying (MIKEY) protocol\n   MIKEY,\
    \ as defined in RFC 3830.  In particular, this variant deploys\n   the classic\
    \ Diffie-Hellman key agreement protocol for key\n   establishment featuring perfect\
    \ forward secrecy in conjunction with a\n   keyed hash message authentication\
    \ code for achieving mutual\n   authentication and message integrity of the key\
    \ management messages\n   exchanged.  This protocol addresses the security and\
    \ performance\n   constraints of multimedia key management in MIKEY.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Definitions ................................................5\n  \
    \    1.2. Abbreviations ..............................................6\n    \
    \  1.3. Conventions Used in This Document ..........................7\n   2. Scenario\
    \ ........................................................7\n      2.1. Applicability\
    \ ..............................................7\n      2.2. Relation to GKMARCH\
    \ ........................................8\n   3. DHHMAC Security Protocol ........................................8\n\
    \      3.1. TGK Re-keying .............................................10\n  \
    \ 4. DHHMAC Payload Formats .........................................10\n    \
    \  4.1.  Common Header Payload (HDR) ..............................11\n      4.2.\
    \ Key Data Transport Payload (KEMAC) ........................12\n      4.3. ID\
    \ Payload (ID) ...........................................12\n      4.4. General\
    \ Extension Payload .................................12\n   5. Security Considerations\
    \ ........................................13\n      5.1. Security Environment\
    \ ......................................13\n      5.2. Threat Model ..............................................13\n\
    \      5.3. Security Features and Properties ..........................15\n  \
    \    5.4. Assumptions ...............................................19\n    \
    \  5.5. Residual Risk .............................................20\n      5.6.\
    \ Authorization and Trust Model .............................21\n   6. Acknowledgments\
    \ ................................................21\n   7. IANA Considerations\
    \ ............................................22\n   8. References .....................................................22\n\
    \      8.1. Normative References ......................................22\n  \
    \    8.2. Informative References ....................................22\n   Appendix\
    \ A. Usage of MIKEY-DHHMAC in H.235 ........................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There is work done in IETF to develop key management schemes.\
    \  For\n   example, IKE [12] is a widely accepted unicast scheme for IPsec, and\n\
    \   the MSEC WG is developing other schemes, addressed to group\n   communication\
    \ [17], [18].  For reasons discussed below, there is,\n   however, a need for\
    \ a scheme with low latency, suitable for demanding\n   cases such as real-time\
    \ data over heterogeneous networks and small\n   interactive groups.\n   As pointed\
    \ out in MIKEY (see [2]), secure real-time multimedia\n   applications demand\
    \ a particular adequate lightweight key management\n   scheme that takes care\
    \ to establish dynamic session keys securely and\n   efficiently in a conversational\
    \ multimedia scenario.\n   In general, MIKEY scenarios cover peer-to-peer, simple\
    \ one-to-many,\n   and small-sized groups.  MIKEY in particular describes three\
    \ key\n   management schemes for the peer-to-peer case that all finish their\n\
    \   task within one roundtrip:\n   -  a symmetric key distribution protocol (MIKEY-PS)\
    \ based on pre-\n      shared master keys\n   -  a public-key encryption-based\
    \ key distribution protocol (MIKEY-PK\n      and reverse-mode MIKEY-RSA-R [33])\
    \ assuming a public-key\n      infrastructure with RSA-based (Rivest, Shamir and\
    \ Adleman)\n      private/public keys and digital certificates\n   -  a Diffie-Hellman\
    \ key agreement protocol (MIKEY-DHSIGN) deploying\n      digital signatures and\
    \ certificates.\n   All of these three key management protocols are designed so\
    \ that they\n   complete their work within just one roundtrip.  This requires\n\
    \   depending on loosely synchronized clocks and deploying timestamps\n   within\
    \ the key management protocols.\n   However, it is known [6] that each of the\
    \ three key management\n   schemes has its subtle constraints and limitations:\n\
    \   -  The symmetric key distribution protocol (MIKEY-PS) is simple to\n     \
    \ implement; however, it was not intended to scale to support any\n      configurations\
    \ beyond peer-to-peer, simple one-to-many, and\n      small-size (interactive)\
    \ groups, due to the need for mutually\n      pre-assigned shared master secrets.\n\
    \      Moreover, the security provided does not achieve the property of\n    \
    \  perfect forward secrecy; i.e., compromise of the shared master\n      secret\
    \ would render past and even future session keys susceptible\n      to compromise.\n\
    \      Further, the generation of the session key happens just at the\n      initiator.\
    \  Thus, the responder has to fully trust the initiator\n      to choose a good\
    \ and secure session secret; the responder is able\n      neither to participate\
    \ in the key generation nor to influence that\n      process.  This is considered\
    \ a specific limitation in less trusted\n      environments.\n   -  The public-key\
    \ encryption scheme (MIKEY-PK and MIKEY-RSA-R [33])\n      depends upon a public-key\
    \ infrastructure that certifies the\n      private-public keys by issuing and\
    \ maintaining digital\n      certificates.  While such key management schemes\
    \ provide full\n      scalability in large networked configurations, public-key\n\
    \      infrastructures are still not widely available, and, in general,\n    \
    \  implementations are significantly more complex.\n      Further, additional\
    \ roundtrips and computational processing might\n      be necessary for each end\
    \ system in order to ascertain\n      verification of the digital certificates.\
    \  For example, typical\n      operations in the context of a public-key infrastructure\
    \ may\n      involve extra network communication handshakes with the public-key\n\
    \      infrastructure and with certification authorities and may\n      typically\
    \ involve additional processing steps in the end systems.\n      These operations\
    \ would include validating digital certificates\n      (RFC 3029, [24]), ascertaining\
    \ the revocation status of digital\n      certificates (RFC 2560, [23]), asserting\
    \ certificate policies,\n      construction of certification path(s) ([26]), requesting\
    \ and\n      obtaining necessary certificates (RFC 2511, [25]), and management\n\
    \      of certificates for such purposes ([22]).  Such steps and tasks\n     \
    \ all result in further delay of the key agreement or key\n      establishment\
    \ phase among the end systems, which negatively\n      affects setup time.  Any\
    \ extra PKI handshakes and processing are\n      not in the scope of MIKEY, and\
    \ since this document only deploys\n      symmetric security mechanisms, aspects\
    \ of PKI, digital\n      certificates, and related processing are not further\
    \ covered in\n      this document.\n      Finally, as in the symmetric case, the\
    \ responder depends\n      completely upon the initiator's choosing good and secure\
    \ session\n      keys.\n   -  The third MIKEY-DHSIGN key management protocol deploys\
    \ the\n      Diffie-Hellman key agreement scheme and authenticates the exchange\n\
    \      of the Diffie-Hellman half-keys in each direction by using a\n      digital\
    \ signature.  This approach has the same advantages and\n      deficiencies as\
    \ described in the previous section in terms of a\n      public-key infrastructure.\n\
    \      However, the Diffie-Hellman key agreement protocol is known for\n     \
    \ its subtle security strengths in that it is able to provide full\n      perfect\
    \ forward secrecy (PFS) and further have to both parties\n      actively involved\
    \ in session key generation.  This special\n      security property (despite the\
    \ somewhat higher computational\n      costs) makes Diffie-Hellman techniques\
    \ attractive in practice.\n   In order to overcome some of the limitations as\
    \ outlined above, a\n   special need has been recognized for another efficient\
    \ key agreement\n   protocol variant in MIKEY.  This protocol variant aims to\
    \ provide the\n   capability of perfect forward secrecy as part of a key agreement\
    \ with\n   low latency without dependency on a public-key infrastructure.\n  \
    \ This document describes a fourth lightweight key management scheme\n   for MIKEY\
    \ that could somehow be seen as a synergetic optimization\n   between the pre-shared\
    \ key distribution scheme and the Diffie-Hellman\n   key agreement.\n   The idea\
    \ of the protocol in this document is to apply the Diffie-\n   Hellman key agreement,\
    \ but rather than deploy a digital signature for\n   authenticity of the exchanged\
    \ keying material, it instead uses a\n   keyed-hash for symmetrically pre-assigned\
    \ shared secrets.  This\n   combination of security mechanisms is called the HMAC-authenticated\n\
    \   Diffie-Hellman (DH) key agreement for MIKEY (DHHMAC).\n   The DHHMAC variant\
    \ closely follows the design and philosophy of MIKEY\n   and reuses MIKEY protocol\
    \ payload components and MIKEY mechanisms to\n   its maximum benefit and for best\
    \ compatibility.\n   Like the MIKEY Diffie-Hellman protocol, DHHMAC does not scale\
    \ beyond\n   a point-to-point constellation; thus, both MIKEY Diffie-Hellman\n\
    \   protocols do not support group-based keying for any group size larger\n  \
    \ than two entities.\n"
- title: 1.1.  Definitions
  contents:
  - "1.1.  Definitions\n   The definitions and notations in this document are aligned\
    \ with\n   MIKEY; see [2] sections 1.3 - 1.4.\n   All large integer computations\
    \ in this document should be understood\n   as being mod p within some fixed group\
    \ G for some large prime p; see\n   [2] section 3.3.  However, the DHHMAC protocol\
    \ is also applicable\n   generally to other appropriate finite, cyclical groups\
    \ as well.\n   It is assumed that a pre-shared key s is known by both entities\n\
    \   (initiator and responder).  The authentication key auth_key is\n   derived\
    \ from the pre-shared secret s using the pseudo-random function\n   PRF; see [2]\
    \ sections 4.1.3 and 4.1.5.\n   In this text, [X] represents an optional piece\
    \ of information.\n   Generally throughout the text, X SHOULD be present unless\
    \ certain\n   circumstances MAY allow X to be optional and not to be present,\n\
    \   thereby potentially resulting in weaker security.  Likewise, [X, Y]\n   represents\
    \ an optional compound piece of information where the pieces\n   X and Y either\
    \ SHOULD both be present or MAY optionally both be\n   absent.  {X} denotes zero\
    \ or more occurrences of X.\n"
- title: 1.2.  Abbreviations
  contents:
  - "1.2.  Abbreviations\n   auth_key        Pre-shared authentication key, PRF-derived\
    \ from\n                   pre-shared key s.\n   DH              Diffie-Hellman\n\
    \   DHi             Public Diffie-Hellman half key g^(xi) of the\n           \
    \        Initiator\n   DHr             Public Diffie-Hellman half key g^(xr) of\
    \ the\n                   Responder\n   DHHMAC          HMAC-authenticated Diffie-Hellman\n\
    \   DoS             Denial-of-service\n   G               Diffie-Hellman group\n\
    \   HDR             MIKEY common header payload\n   HMAC            Keyed Hash\
    \ Message Authentication Code\n   HMAC-SHA1       HMAC using SHA1 as hash function\
    \ (160-bit result)\n   IDi             Identity of initiator\n   IDr         \
    \    Identity of receiver\n   IKE             Internet Key Exchange\n   IPsec\
    \           Internet Protocol Security\n   MIKEY           Multimedia Internet\
    \ KEYing\n   MIKEY-DHHMAC    MIKEY Diffie-Hellman key management protocol using\n\
    \                   HMAC\n   MIKEY-DHSIGN    MIKEY Diffie-Hellman key agreement\
    \ protocol\n   MIKEY-PK        MIKEY public-key encryption-based key distribution\n\
    \                   protocol\n   MIKEY-PS        MIKEY pre-shared key distribution\
    \ protocol\n   p               Diffie-Hellman prime modulus\n   PKI          \
    \   Public-key Infrastructure\n   PRF             MIKEY pseudo-random function\
    \ (see [2] section\n                   4.1.3)\n   RSA             Rivest, Shamir,\
    \ and Adleman\n   s               Pre-shared key\n   SDP             Session Description\
    \ Protocol\n   SOI             Son-of-IKE, IKEv2\n   SP              MIKEY Security\
    \ Policy (Parameter) Payload\n   T               Timestamp\n   TEK           \
    \  Traffic Encryption Key\n   TGK             MIKEY TEK Generation Key, as the\
    \ common Diffie-\n                   Hellman shared secret\n   TLS           \
    \  Transport Layer Security\n   xi              Secret, (pseudo) random Diffie-Hellman\
    \ key of the\n                   Initiator\n   xr              Secret, (pseudo)\
    \ random Diffie-Hellman key of the\n                   Responder\n"
- title: 1.3.  Conventions Used in This Document
  contents:
  - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [1].\n"
- title: 2.  Scenario
  contents:
  - "2.  Scenario\n   The HMAC-authenticated Diffie-Hellman key agreement protocol\
    \ (DHHMAC)\n   for MIKEY addresses the same scenarios and scope as the other three\n\
    \   key management schemes in MIKEY address.\n   DHHMAC is applicable in a peer-to-peer\
    \ group where no access to a\n   public-key infrastructure can be assumed to be\
    \ available.  Rather,\n   pre- shared master secrets are assumed to be available\
    \ among the\n   entities in such an environment.\n   In a pair-wise group, it\
    \ is assumed that each client will be setting\n   up a session key for its outgoing\
    \ links with its peer using the DH-\n   MAC key agreement protocol.\n   As is\
    \ the case for the other three MIKEY key management protocols,\n   DHHMAC assumes,\
    \ at least, loosely synchronized clocks among the\n   entities in the small group.\n\
    \   To synchronize the clocks in a secure manner, some operational or\n   procedural\
    \ means are recommended.  MIKEY-DHHMAC does not define any\n   secure time synchronization\
    \ measures; however, sections 5.4 and 9.3\n   of [2] provide implementation guidance\
    \ on clock synchronization and\n   timestamps.\n"
- title: 2.1.  Applicability
  contents:
  - "2.1.  Applicability\n   MIKEY-DHHMAC and the other MIKEY key management protocols\
    \ are\n   intended for application-level key management and are optimized for\n\
    \   multimedia applications with real-time session setup and session\n   management\
    \ constraints.\n   As the MIKEY-DHHMAC key management protocol terminates in one\n\
    \   roundtrip, DHHMAC is applicable for integration into two-way\n   handshake\
    \ session or call signaling protocols such as\n   a) SIP [13] and SDP, where the\
    \ encoded MIKEY messages are\n      encapsulated and transported in SDP containers\
    \ of the SDP\n      offer/answer see RFC 3264 [27]) handshake, as described in\
    \ [4];\n      and\n   b) H.323 (see [15]), where the encoded MIKEY messages are\
    \ transported\n      in the H.225.0 fast start call signaling handshake.  Appendix\
    \ A\n      outlines the usage of MIKEY-DHHMAC within H.235.\n   MIKEY-DHHMAC is\
    \ offered as an option to the other MIKEY key\n   management variants (MIKEY-pre-shared,\
    \ MIKEY-public-key and MIKEY-\n   DH-SIGN) for all those cases where DHHMAC has\
    \ its particular\n   strengths (see section 5).\n"
- title: 2.2.  Relation to GKMARCH
  contents:
  - "2.2.  Relation to GKMARCH\n   The Group key management architecture (GKMARCH)\
    \ [19] describes a\n   generic architecture for multicast security group key management\n\
    \   protocols.  In the context of this architecture, MIKEY-DHHMAC may\n   operate\
    \ as a registration protocol; see also [2] section 2.4.  The\n   main entities\
    \ involved in the architecture are a group controller/key\n   server (GCKS), the\
    \ receiver(s), and the sender(s).  Due to the pair-\n   wise nature of the Diffie-Hellman\
    \ operation and the 1-roundtrip\n   constraint, usage of MIKEY-DHHMAC rules out\
    \ any deployment as a group\n   key management protocol with more than two group\
    \ entities.  Only the\n   degenerate case with two peers is possible where, for\
    \ example, the\n   responder acts as the group controller.\n   Note that MIKEY\
    \ does not provide re-keying in the GKMARCH sense, only\n   updating of the keys\
    \ by normal unicast messages.\n"
- title: 3.  DHHMAC Security Protocol
  contents:
  - "3.  DHHMAC Security Protocol\n   The following figure defines the security protocol\
    \ for DHHMAC:\n               Initiator                        Responder\n   I_message\
    \ = HDR, T, RAND, [IDi], IDr,\n               {SP}, DHi, KEMAC\n             \
    \       ----------------------->   R_message = HDR, T,\n                     \
    \                           [IDr], IDi, DHr,\n                               \
    \                 DHi, KEMAC\n                    <----------------------\n  \
    \    Figure 1: HMAC-authenticated Diffie-Hellman key-based exchange,\n       \
    \ where xi and xr are (pseudo) randomly chosen, respectively,\n              \
    \      by the initiator and the responder.\n   The DHHMAC key exchange SHALL be\
    \ done according to Figure 1.  The\n   initiator chooses a (pseudo) random value,\
    \ xi, and sends an HMACed\n   message including g^(xi) and a timestamp to the\
    \ responder.  It is\n   recommended that the initiator SHOULD always include the\
    \ identity\n   payloads IDi and IDr within the I_message; unless the receiver\
    \ can\n   defer the initiator's identity by some other means, IDi MAY\n   optionally\
    \ be omitted.  The initiator SHALL always include the\n   recipient's identity.\n\
    \   The group parameters (e.g., the group G) are a set of parameters\n   chosen\
    \ by the initiator.  Note that like in the MIKEY protocol, both\n   sender and\
    \ receiver explicitly transmit the Diffie-Hellman group G\n   within the Diffie-Hellman\
    \ payload DHi or DHr through an encoding\n   (e.g., OAKLEY group numbering; see\
    \ [2] section 6.4).  The actual\n   group parameters g and p, however, are not\
    \ explicitly transmitted but\n   can be deduced from the Diffie-Hellman group\
    \ G.  The responder\n   chooses a (pseudo) random positive integer, xr, and sends\
    \ an HMACed\n   message including g^(xr) and the timestamp to the initiator. \
    \ The\n   responder SHALL always include the initiator's identity IDi\n   regardless\
    \ of whether the I_message conveyed any IDi.  It is\n   RECOMMENDED that the responder\
    \ SHOULD always include the identity\n   payload IDr within the R_message; unless\
    \ the initiator can defer the\n   responder's identity by some other means, IDr\
    \ MAY optionally be left\n   out.\n   Both parties then calculate the TGK as g^(xi\
    \ * xr).\n   The HMAC authentication provides authentication of the DH half-keys\n\
    \   and is necessary to avoid man-in-the-middle attacks.\n   This approach is\
    \ less expensive than digitally signed Diffie-Hellman\n   in that both sides compute\
    \ one exponentiation and one HMAC first,\n   then one HMAC verification, and finally\
    \ another Diffie-Hellman\n   exponentiation.\n   With off-line pre-computation,\
    \ the initial Diffie-Hellman half-key\n   MAY be computed before the key management\
    \ transaction and thereby MAY\n   further reduce the overall roundtrip delay,\
    \ as well as the risk of\n   denial-of-service attacks.\n   Processing of the\
    \ TGK SHALL be accomplished as described in MIKEY [2]\n   section 4.\n   The computed\
    \ HMAC result SHALL be conveyed in the KEMAC payload field\n   where the MAC fields\
    \ holds the HMAC result.  The HMAC SHALL be\n   computed over the entire message,\
    \ excluding the MAC field using\n   auth_key; see also section 4.2.\n"
- title: 3.1.  TGK Re-keying
  contents:
  - "3.1.  TGK Re-keying\n   TGK re-keying for DHHMAC generally proceeds as described\
    \ in [2]\n   section 4.5.  Specifically, Figure 2 provides the message exchange\n\
    \   for the DHHMAC update message.\n               Initiator                 \
    \       Responder\n   I_message = HDR, T, [IDi], IDr,\n               {SP}, [DHi],\
    \ KEMAC\n                    ----------------------->   R_message = HDR, T,\n\
    \                                                [IDr], IDi,\n               \
    \                                 [DHr, DHi], KEMAC\n                    <----------------------\n\
    \                      Figure 2: DHHMAC update message\n   TGK re-keying supports\
    \ two procedures:\n   a) True re-keying by exchanging new and fresh Diffie-Hellman\
    \ half-\n      keys.  For this, the initiator SHALL provide a new, fresh DHi,\
    \ and\n      the responder SHALL respond with a new, fresh DHr and the received\n\
    \      DHi.\n   b) Non-key related information update without including any Diffie-\n\
    \      Hellman half-keys in the exchange.  Such a transaction does not\n     \
    \ change the actual TGK but updates other information such as\n      security\
    \ policy parameters.  To update the non-key related\n      information only, [DHi]\
    \ and [DHr, DHi] SHALL be left out.\n"
- title: 4.  DHHMAC Payload Formats
  contents:
  - "4.  DHHMAC Payload Formats\n   This section specifies the payload formats and\
    \ data type values for\n   DHHMAC; see also [2] section 6, for a definition of\
    \ the MIKEY\n   payloads.\n   This document does not define new payload formats\
    \ but re-uses MIKEY\n   payloads for DHHMAC as referenced:\n   * Common header\
    \ payload (HDR); see section 4.1 and [2] section 6.1.\n   * SRTP ID sub-payload;\
    \ see [2] section 6.1.1.\n   * Key data transport payload (KEMAC); see section\
    \ 4.2 and [2] section\n     6.2.\n   * DH data payload; see [2] section 6.4.\n\
    \   * Timestamp payload; see [2] section 6.6.\n   * ID payload; [2] section 6.7.\n\
    \   * Security Policy payload (SP); see [2] section 6.10.\n   * RAND payload (RAND);\
    \ see [2] section 6.11.\n   * Error payload (ERR); see [2] section 6.12.\n   *\
    \ General Extension Payload; see [2] section 6.15.\n"
- title: 4.1.  Common Header Payload (HDR)
  contents:
  - "4.1.  Common Header Payload (HDR)\n   Referring to [2] section 6.1, the following\
    \ data types SHALL be used\n   for DHHMAC:\n      Data type     | Value | Comment\n\
    \   -------------------------------------------------------------\n      DHHMAC\
    \ init   |     7 | Initiator's DHHMAC exchange message\n      DHHMAC resp   |\
    \     8 | Responder's DHHMAC exchange message\n      Error         |     6 | Error\
    \ message; see [2] section 6.12\n                                Table 4.1.a\n\
    \   Note: A responder is able to recognize the MIKEY DHHMAC protocol by\n   evaluating\
    \ the data type field as 7 or 8.  This is how the responder\n   can differentiate\
    \ between MIKEY and MIKEY DHHMAC.\n   The next payload field SHALL be one of the\
    \ following values:\n   Next payload| Value |       Section\n   ----------------------------------------------------------------\n\
    \   Last payload|     0 | -\n   KEMAC       |     1 | section 4.2 and [2] section\
    \ 6.2\n   DH          |     3 | [2] section 6.4\n   T           |     5 | [2]\
    \ section 6.6\n   ID          |     6 | [2] section 6.7\n   SP          |    10\
    \ | [2] section 6.10\n   RAND        |    11 | [2] section 6.11\n   ERR      \
    \   |    12 | [2] section 6.12\n   General Ext.|    21 | [2] section 6.15\n  \
    \                              Table 4.1.b\n   Other defined next payload values\
    \ defined in [2] SHALL not be applied\n   to DHHMAC.\n   In case of a decoding\
    \ error or of a failed HMAC authentication\n   verification, the responder SHALL\
    \ apply the Error payload data type.\n"
- title: 4.2.  Key Data Transport Payload (KEMAC)
  contents:
  - "4.2.  Key Data Transport Payload (KEMAC)\n   DHHMAC SHALL apply this payload\
    \ for conveying the HMAC result along\n   with the indicated authentication algorithm.\
    \  When used in\n   conjunction with DHHMAC, KEMAC SHALL not convey any encrypted\
    \ data;\n   thus, Encr alg SHALL be set to 2 (NULL), Encr data len SHALL be set\n\
    \   to 0, and Encr data SHALL be left empty.  The AES key wrap method\n   (see\
    \ [16]) SHALL not be applied for DHHMAC.\n   For DHHMAC, this key data transport\
    \ payload SHALL be the last payload\n   in the message.  Note that the Next payload\
    \ field SHALL be set to\n   Last payload.  The HMAC is then calculated over the\
    \ entire MIKEY\n   message, excluding the MAC field using auth_key as described\
    \ in [2]\n   section 5.2, and then stored within the MAC field.\n      MAC alg\
    \       | Value |           Comments\n   ------------------------------------------------------------------\n\
    \      HMAC-SHA-1    |     0 | Mandatory, Default (see [3])\n      NULL      \
    \    |     1 | Very restricted use; see\n                            | [2] section\
    \ 4.2.4\n                                Table 4.2.a\n   HMAC-SHA-1 is the default\
    \ hash function that MUST be implemented as\n   part of the DHHMAC.  The length\
    \ of the HMAC-SHA-1 result is 160 bits.\n"
- title: 4.3.  ID Payload (ID)
  contents:
  - "4.3.  ID Payload (ID)\n   For DHHMAC, this payload SHALL only hold a non-certificate-based\n\
    \   identity.\n"
- title: 4.4.  General Extension Payload
  contents:
  - "4.4.  General Extension Payload\n   For DHHMAC, to avoid bidding-down attacks,\
    \ this payload SHALL list\n   all key management protocol identifiers of a surrounding\n\
    \   encapsulation protocol, such as SDP [4].  The General Extension\n   Payload\
    \ SHALL be integrity protected with the HMAC using the shared\n   secret.\n  \
    \ Type      | Value | Comments\n   SDP IDs   |     1 | List of SDP key management\
    \ IDs (allocated for\n                       use in [4]); see also [2] section\
    \ 6.15.\n                                Table 4.4.a\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document addresses key management security\
    \ issues throughout.\n   For a comprehensive explanation of MIKEY security considerations,\n\
    \   please refer to MIKEY [2] section 9.\n   In addition, this document addresses\
    \ security issues according to\n   [7], where the following security considerations\
    \ apply in particular\n   to this document:\n"
- title: 5.1.  Security Environment
  contents:
  - "5.1.  Security Environment\n   The DHHMAC security protocol described in this\
    \ document focuses\n   primarily on communication security; i.e., the security\
    \ issues\n   concerned with the MIKEY DHHMAC protocol.  Nevertheless, some system\n\
    \   security issues are also of interest that are not explicitly defined\n   by\
    \ the DHHMAC protocol, but that should be provided locally in\n   practice.\n\
    \   The system that runs the DHHMAC protocol entity SHALL provide the\n   capability\
    \ to generate (pseudo) random numbers as input to the\n   Diffie-Hellman operation\
    \ (see [8]).  Furthermore, the system SHALL be\n   capable of storing the generated\
    \ (pseudo) random data, secret data,\n   keys, and other secret security parameters\
    \ securely (i.e.,\n   confidential and safe from unauthorized tampering).\n"
- title: 5.2.  Threat Model
  contents:
  - "5.2.  Threat Model\n   The threat model, to which this document adheres, covers\
    \ the issues\n   of end-to-end security in the Internet generally, without ruling\
    \ out\n   the possibility that MIKEY DHHMAC can be deployed in a corporate,\n\
    \   closed IP environment.  This also includes the possibility that MIKEY\n  \
    \ DHHMAC can be deployed on a hop-by-hop basis with some intermediate\n   trusted\
    \ \"MIKEY DHHMAC proxies\" involved.\n   Since DHHMAC is a key management protocol,\
    \ the following security\n   threats are of concern:\n   * Unauthorized interception\
    \ of plain TGKs: For DHHMAC, this threat\n     does not occur since the TGK is\
    \ not actually transmitted on the\n     wire (not even in encrypted fashion).\n\
    \   * Eavesdropping of other, transmitted keying information: DHHMAC\n     protocol\
    \ does not explicitly transmit the TGK at all.  Instead, by\n     using the Diffie-Hellman\
    \ \"encryption\" operation, which conceals the\n     secret (pseudo) random values,\
    \ only partial information (i.e., the\n     DH half-key) for construction of the\
    \ TGK is transmitted.  It is\n     fundamentally assumed that availability of\
    \ such Diffie-Hellman\n     half-keys to an eavesdropper does not result in any\
    \ substantial\n     security risk; see 5.4.  Furthermore, the DHHMAC carries other\
    \ data\n     such as timestamps, (pseudo) random values, identification\n    \
    \ information or security policy parameters; eavesdropping of any\n     such data\
    \ is not considered to yield any significant security risk.\n   * Masquerade of\
    \ either entity: This security threat must be avoided,\n     and if a masquerade\
    \ attack would be attempted, appropriate\n     detection means must be in place.\
    \  DHHMAC addresses this threat by\n     providing mutual peer entity authentication.\n\
    \   * Man-in-the-middle attacks: Such attacks threaten the security of\n     exchanged,\
    \ non-authenticated messages.  Man-in-the-middle attacks\n     usually come with\
    \ masquerade and or loss of message integrity (see\n     below).  Man-in-the-middle\
    \ attacks must be avoided and, if present\n     or attempted, must be detected\
    \ appropriately.  DHHMAC addresses\n     this threat by providing mutual peer\
    \ entity authentication and\n     message integrity.\n   * Loss of integrity:\
    \ This security threat relates to unauthorized\n     replay, deletion, insertion,\
    \ and manipulation of messages.\n     Although any such attacks cannot be avoided,\
    \ they must at least be\n     detected.  DHHMAC addresses this threat by providing\
    \ message\n     integrity.\n   * Bidding-down attacks: When multiple key management\
    \ protocols, each\n     of a distinct security level, are offered (such as those\
    \ made\n     possible by SDP [4]), avoiding bidding-down attacks is of concern.\n\
    \     DHHMAC addresses this threat by reusing the MIKEY General Extension\n  \
    \   Payload mechanism, where all key management protocol identifiers\n     are\
    \ to be listed within the MIKEY General Extension Payload.\n   Some potential\
    \ threats are not within the scope of this threat model:\n   * Passive and off-line\
    \ cryptanalysis of the Diffie-Hellman algorithm:\n     Under certain reasonable\
    \ assumptions (see 5.4, below), it is widely\n     believed that DHHMAC is sufficiently\
    \ secure and that such attacks\n     are infeasible, although the possibility\
    \ of a successful attack\n     cannot be ruled out.\n   * Non-repudiation of the\
    \ receipt or of the origin of the message:\n     These are not requirements within\
    \ the context of DHHMAC in this\n     environment, and thus related countermeasures\
    \ are not provided at\n     all.\n   * Denial-of-service or distributed denial-of-service\
    \ attacks: Some\n     considerations are given on some of those attacks, but DHHMAC\
    \ does\n     not claim to provide full countermeasure against any of those\n \
    \    attacks.  For example, stressing the availability of the entities\n     is\
    \ not thwarted by means of the key management protocol; some other\n     local\
    \ countermeasures should be applied.  Further, some DoS attacks\n     are not\
    \ countered, such as interception of a valid DH- request and\n     its massive\
    \ instant duplication.  Such attacks might at least be\n     countered partially\
    \ by some local means that are outside the scope\n     of this document.\n   *\
    \ Identity protection: Like MIKEY, identity protection is not a major\n     design\
    \ requirement for MIKEY-DHHMAC, either; see [2].  No security\n     protocol is\
    \ known so far that is able to provide the objectives of\n     DHHMAC as stated\
    \ in section 5.3, including identity protection\n     within just a single roundtrip.\
    \  MIKEY-DHHMAC trades identity\n     protection for better security for the keying\
    \ material and shorter\n     roundtrip time.  Thus, MIKEY-DHHMAC does not provide\
    \ identity\n     protection on its own but may inherit such property from a security\n\
    \     protocol underneath that actually features identity protection.\n     The\
    \ DHHMAC security protocol (see section 3) and the TGK re-keying\n     security\
    \ protocol (see section 3.1) provide the option not to\n     supply identity information.\
    \  This option is only applicable if\n     some other means are available to supply\
    \ trustworthy identity\n     information; e.g., by relying on secured links underneath\
    \ MIKEY\n     that supply trustworthy identity information some other way.\n \
    \    However, it is understood that without identity information, the\n     MIKEY\
    \ key management security protocols might be subject to\n     security weaknesses\
    \ such as masquerade, impersonation, and\n     reflection attacks, particularly\
    \ in end-to-end scenarios where no\n     other secure means of assured identity\
    \ information are provided.\n     Leaving identity fields optional (if doing so\
    \ is possible) thus\n     should not be seen as a privacy method, either, but\
    \ rather as a\n     protocol optimization feature.\n"
- title: 5.3.  Security Features and Properties
  contents:
  - "5.3.  Security Features and Properties\n   With the security threats in mind,\
    \ this document provides the\n   following security features and yields the following\
    \ properties:\n   * Secure key agreement with the establishment of a TGK at both\
    \ peers:\n     This is achieved using an authenticated Diffie-Hellman key\n  \
    \   management protocol.\n   * Peer-entity authentication (mutual): This authentication\n\
    \     corroborates that the host/user is authentic in that possession of\n   \
    \  a pre-assigned secret key is proven using keyed HMAC.\n     Authentication\
    \ occurs on the request and on the response message;\n     thus authentication\
    \ is mutual.\n     The HMAC computation corroborates for authentication and message\n\
    \     integrity of the exchanged Diffie-Hellman half-keys and associated\n   \
    \  messages.  The authentication is absolutely necessary in order to\n     avoid\
    \ man-in-the-middle attacks on the exchanged messages in\n     transit and, in\
    \ particular, on the otherwise non-authenticated\n     exchanged Diffie-Hellman\
    \ half-keys.\n     Note: This document does not address issues regarding\n   \
    \  authorization; this feature is not provided explicitly.  However,\n     DHHMAC\
    \ authentication means support and facilitate realization of\n     authorization\
    \ means (local issue).\n   * Cryptographic integrity check: The cryptographic\
    \ integrity check is\n     achieved using a message digest (keyed HMAC).  It includes\
    \ the\n     exchanged Diffie-Hellman half-keys but covers the other parts of\n\
    \     the exchanged message as well.  Both mutual peer entity\n     authentication\
    \ and message integrity provide effective\n     countermeasures against man-in-the-middle\
    \ attacks.\n     The initiator may deploy a local timer that fires when the awaited\n\
    \     response message did not arrive in a timely manner.  This is\n     intended\
    \ to detect deletion of entire messages.\n   * Replay protection of the messages\
    \ is achieved using embedded\n     timestamps: In order to detect replayed messages,\
    \ it is essential\n     that the clocks among initiator and sender be roughly\
    \ synchronized.\n     The reader is referred to [2] section 5.4, and [2] section\
    \ 9.3,\n     which provide further considerations and give guidance on clock\n\
    \     synchronization and timestamp usage.  Should the clock\n     synchronization\
    \ be lost, end systems cannot detect replayed\n     messages anymore, and the\
    \ end systems cannot securely establish\n     keying material.  This may result\
    \ in a denial-of-service; see [2]\n     section 9.5.\n   * Limited DoS protection:\
    \ Rapid checking of the message digest allows\n     verifying the authenticity\
    \ and integrity of a message before\n     launching CPU intensive Diffie-Hellman\
    \ operations or starting other\n     resource consuming tasks.  This protects\
    \ against some denial-of-\n     service attacks: malicious modification of messages\
    \ and spam\n     attacks with (replayed or masqueraded) messages.  DHHMAC probably\n\
    \     does not explicitly counter sophisticated distributed, large-scale\n   \
    \  denial-of-service attacks that compromise system availability, for\n     example.\
    \  Some DoS protection is provided by inclusion of the\n     initiator's identity\
    \ payload in the I_message.  This allows the\n     recipient to filter out those\
    \ (replayed) I_messages that are not\n     targeted for him and to avoid creating\
    \ unnecessary MIKEY sessions.\n   * Perfect-forward secrecy (PFS): Other than\
    \ the MIKEY pre-shared and\n     public-key-based key distribution protocols,\
    \ the Diffie-Hellman key\n     agreement protocol features a security property\
    \ called perfect\n     forward secrecy.  That is, even if the long-term pre-shared\
    \ key is\n     compromised at some point in time, this does not compromise past\
    \ or\n     future session keys.\n     Neither the MIKEY pre-shared nor the MIKEY\
    \ public-key protocol\n     variants are able to provide the security property\
    \ of perfect-\n     forward secrecy.  Thus, none of the other MIKEY protocols\
    \ is able\n     to substitute the Diffie-Hellman PFS property.\n     As such,\
    \ DHHMAC and digitally signed DH provide a far superior\n     security level to\
    \ that of the pre-shared or public-key-based key\n     distribution protocol in\
    \ that respect.\n   * Fair, mutual key contribution: The Diffie-Hellman key management\n\
    \     protocol is not a strict key distribution protocol per se, in which\n  \
    \   the initiator distributes a key to its peers.  Actually, both\n     parties\
    \ involved in the protocol exchange are able to contribute to\n     the common\
    \ Diffie-Hellman TEK traffic generating key equally.  This\n     reduces the risk\
    \ of either party cheating or unintentionally\n     generating a weak session\
    \ key.  This makes the DHHMAC a fair key\n     agreement protocol.  One may view\
    \ this property as an additional\n     distributed security measure that increases\
    \ security robustness\n     over that of the case where all the security depends\
    \ just on the\n     proper implementation of a single entity.\n     For Diffie-Hellman\
    \ key agreement to be secure, each party SHALL\n     generate its xi or xr values\
    \ using a strong, unpredictable pseudo-\n     random generator if a source of\
    \ true randomness is not available.\n     Further, these values xi or xr SHALL\
    \ be kept private.  It is\n     RECOMMENDED that these secret values be destroyed\
    \ once the common\n     Diffie-Hellman shared secret key has been established.\n\
    \   * Efficiency and performance: Like the MIKEY-public key protocol, the\n  \
    \   MIKEY DHHMAC key agreement protocol securely establishes a TGK\n     within\
    \ just one roundtrip.  Other existing key management\n     techniques, such as\
    \ IPsec-IKE [12], IPsec-IKEv2 [14], TLS [11], and\n     other schemes, are not\
    \ deemed adequate in addressing those real-\n     time and security requirements\
    \ sufficiently; they all use more than\n     a single roundtrip.  All the MIKEY\
    \ key management protocols are\n     able to complete their task of security policy\
    \ parameter\n     negotiation, including key-agreement or key distribution, in\
    \ one\n     roundtrip.  However, the MIKEY pre-shared and MIKEY public-key\n \
    \    protocol are both able to complete their task even in a half-\n     roundtrip\
    \ when the confirmation messages are omitted.\n     Using HMAC in conjunction\
    \ with a strong one-way hash function (such\n     as SHA1) may be achieved more\
    \ efficiently in software than\n     expensive public-key operations.  This yields\
    \ a particular\n     performance benefit of DHHMAC over signed DH or the public-key\n\
    \     encryption protocol.\n     If a very high security level is desired for\
    \ long-term secrecy of\n     the negotiated Diffie-Hellman shared secret, longer\
    \ hash values may\n     be deployed, such as SHA256, SHA384, or SHA512 provide,\
    \ possibly in\n     conjunction with stronger Diffie-Hellman groups.  This is\
    \ left as\n     for further study.\n     For the sake of improved performance\
    \ and reduced roundtrip delay,\n     either party may  pre-compute its public\
    \ Diffie-Hellman half-key\n     off-line.\n     On the other side and under reasonable\
    \ conditions, DHHMAC consumes\n     more CPU cycles than the MIKEY pre-shared\
    \ key distribution\n     protocol.  The same might hold true quite likely for\
    \ the MIKEY\n     public-key distribution protocol (depending on choice of the\n\
    \     private and public key lengths).  As such, it can be said that\n     DHHMAC\
    \ provides sound performance when compared with the other\n     MIKEY protocol\
    \ variants.\n     The use of optional identity information (with the constraints\n\
    \     stated in section 5.2) and optional Diffie-Hellman half-key fields\n   \
    \  provides a means to increase performance and shorten the consumed\n     network\
    \ bandwidth.\n   * Security infrastructure: This document describes the HMAC-\n\
    \     authenticated Diffie-Hellman key agreement protocol, which\n     completely\
    \ avoids digital signatures and the associated public-key\n     infrastructure,\
    \ as would be necessary for the X.509 RSA public-\n     key-based key distribution\
    \ protocol or the digitally signed\n     Diffie-Hellman key agreement protocol\
    \ as described in MIKEY.\n     Public-key infrastructures may not always be available\
    \ in certain\n     environments, nor may they be deemed adequate for real-time\n\
    \     multimedia applications when additional steps are taken for\n     certificate\
    \ validation and certificate revocation methods with\n     additional roundtrips\
    \ into account.\n     DHHMAC does not depend on PKI, nor do implementations require\
    \ PKI\n     standards.  Thus, it is believed to be much simpler than the more\n\
    \     complex PKI facilities.\n     DHHMAC is particularly attractive in those\
    \ environments where\n     provisioning of a pre-shared key has already been accomplished.\n\
    \   * NAT-friendliness: DHHMAC is able to operate smoothly through\n     firewall/NAT\
    \ devices as long as the protected identity information\n     of the end entity\
    \ is not an IP/transport address.\n   * Scalability: Like the MIKEY signed Diffie-Hellman\
    \ protocol, DHHMAC\n     does not scale to any larger configurations beyond peer-to-peer\n\
    \     groups.\n"
- title: 5.4.  Assumptions
  contents:
  - "5.4.  Assumptions\n   This document states a couple of assumptions upon which\
    \ the security\n   of DHHMAC significantly depends.  The following conditions\
    \ are\n   assumed:\n   * The parameters xi, xr, s, and auth_key are to be kept\
    \ secret.\n   * The pre-shared key s has sufficient entropy and cannot be\n  \
    \   effectively guessed.\n   * The pseudo-random function (PRF) is secure, yields\
    \ the pseudo-\n     random property, and maintains the entropy.\n   * A sufficiently\
    \ large and secure Diffie-Hellman group is applied.\n   * The Diffie-Hellman assumption\
    \ holds saying basically that even with\n     knowledge of the exchanged Diffie-Hellman\
    \ half-keys and knowledge\n     of the Diffie-Hellman group, it is infeasible\
    \ to compute the TGK or\n     to derive the secret parameters xi or xr.  The latter\
    \ is also\n     called the discrete logarithm assumption.  Please see [6], [9],\
    \ or\n     [10] for more background information regarding the Diffie-Hellman\n\
    \     problem and its computational complexity assumptions.\n   * The hash function\
    \ (SHA1) is secure; i.e., it is computationally\n     infeasible to find a message\
    \ that corresponds to a given message\n     digest, or to find two different messages\
    \ that produce the same\n     message digest.\n   * The HMAC algorithm is secure\
    \ and does not leak the auth_key.  In\n     particular, the security depends on\
    \ the message authentication\n     property of the compression function of the\
    \ hash function H when it\n     is applied to single blocks (see [5]).\n   * A\
    \ source capable of producing sufficiently many bits of (pseudo)\n     randomness\
    \ is available.\n   * The system upon which DHHMAC runs is sufficiently secure.\n"
- title: 5.5.  Residual Risk
  contents:
  - "5.5.  Residual Risk\n   Although these detailed assumptions are non-negligible,\
    \ security\n   experts generally believe that all these assumptions are reasonable\n\
    \   and that the assumptions made can be fulfilled in practice with\n   little\
    \ or no expenses.\n   The mathematical and cryptographic assumptions of the properties\
    \ of\n   the PRF, the Diffie-Hellman algorithm (discrete log-assumption), the\n\
    \   HMAC algorithm, and the SHA1 algorithms have been neither proven nor\n   disproven\
    \ at this time.\n   Thus, a certain residual risk remains, which might threaten\
    \ the\n   overall security at some unforeseeable time in the future.\n   The DHHMAC\
    \ would be compromised as soon as any of the listed\n   assumptions no longer\
    \ hold.\n   The Diffie-Hellman mechanism is a generic security technique that\
    \ is\n   not only applicable to groups of prime order or of characteristic\n \
    \  two.  This is because of the fundamental mathematical assumption that\n   the\
    \ discrete logarithm problem is also a very hard one in general\n   groups.  This\
    \ enables Diffie-Hellman to be deployed also for GF(p)*,\n   for sub-groups of\
    \ sufficient size, and for groups upon elliptic\n   curves.  RSA does not allow\
    \ such generalization, as the core\n   mathematical problem is a different one\
    \ (large integer\n   factorization).\n   RSA asymmetric keys tend to become increasingly\
    \ lengthy (1536 bits\n   and more) and thus very computationally intensive.  Nevertheless,\n\
    \   Elliptic Curve Diffie-Hellman (ECDH) allows key lengths to be cut\n   down\
    \ substantially (say 170 bits or more) while maintaining at least\n   the security\
    \ level and providing even more significant performance\n   benefits in practice.\
    \  Moreover, it is believed that elliptic-curve\n   techniques provide much better\
    \ protection against side channel\n   attacks due to the inherent redundancy in\
    \ the projective coordinates.\n   For all these reasons, one may view elliptic-curve-based\
    \ Diffie-\n   Hellman as being more \"future-proof\" and robust against potential\n\
    \   threats than RSA is.  Note that Elliptic Curve Diffie-Hellman\n   variants\
    \ of MIKEY are defined in [31].\n   HMAC-SHA1 is a key security mechanism within\
    \ DHHMAC on which the\n   overall security of MIKEY DHHMAC depends.  MIKEY DHHMAC\
    \ uses HMAC-\n   SHA1 in combination with the classic Diffie-Hellman key agreement\n\
    \   scheme.  HMAC-SHA1 is a keyed one-way hash function that involves a\n   secret\
    \ in its computation.  DHHMAC applies HMAC-SHA1 for protection\n   of the MIKEY\
    \ payload.  Likewise, the pseudo-random function PRF\n   within MIKEY [2] uses\
    \ the HMAC-SHA1 mechanism as a key derivation\n   function.  While certain attacks\
    \ have been reported against SHA1 and\n   MD5 (see [29]), with current knowledge\
    \ (see [29], [30]), no attacks\n   have been reported against the HMAC-SHA1 security\
    \ mechanism.  In\n   fact, [32] proves that HMAC possesses the property of a pseudo-random\n\
    \   function PRF assuming solely that the (SHA1) hash function is a\n   pseudo-random\
    \ function. [32] also provides evidence that HMAC is\n   robust against collision\
    \ attacks on the underlying hash function.  It\n   is believed that MIKEY DHHMAC\
    \ should be considered secure enough for\n   the time being.  Thus, there is no\
    \ need to change the underlying\n   security mechanism within the MIKEY DHHMAC\
    \ protocol.\n   It is not recommended to deploy DHHMAC for any other use than\
    \ that\n   depicted in section 2.  Any misapplication might lead to unknown,\n\
    \   undefined properties.\n"
- title: 5.6.  Authorization and Trust Model
  contents:
  - "5.6.  Authorization and Trust Model\n   Basically, similar remarks on authorization\
    \ as those stated in [2]\n   section 4.3.2 hold also for DHHMAC.  However, as\
    \ noted before, this\n   key management protocol does not serve full groups.\n\
    \   One may view the pre-established shared secret as yielding some pre-\n   established\
    \ trust relationship between the initiator and the\n   responder.  This results\
    \ in a much simpler trust model for DHHMAC\n   than would be the case for some\
    \ generic group key management protocol\n   and potential group entities without\
    \ any pre-defined trust\n   relationship.  In conjunction with the assumption\
    \ of a shared key,\n   the common group controller simplifies the communication\
    \ setup of the\n   entities.\n   One may view the pre-established trust relationship\
    \ through the pre-\n   shared secret as some means for pre-granted, implied authorization.\n\
    \   This document does not define any particular authorization means but\n   leaves\
    \ this subject to the application.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   This document incorporates kindly, valuable review feedback\
    \ from\n   Steffen Fries, Hannes Tschofenig, Fredrick Lindholm, Mary Barnes, and\n\
    \   Russell Housley and general feedback by the MSEC WG.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not define its own new name spaces\
    \ for DHHMAC,\n   beyond the IANA name spaces that have been assigned for MIKEY;\
    \ see\n   [2] sections 10 and 10.1 and IANA MIKEY payload name spaces [37].\n\
    \   In order to align Table 4.1.a with Table 6.1.a in [2], IANA is\n   requested\
    \ to add the following entries to their MIKEY Payload Name\n   Space:\n   Data\
    \ Type        Value  Reference\n   ---------------  -----  ---------\n   DHHMAC\
    \ init          7  RFC 4650\n   DHHMAC resp          8  RFC 4650\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Arkko, J., Carrara, E., Lindholm, F., Naslund, M., and K.\n        \
    \ Norrman, \"MIKEY: Multimedia Internet KEYing\", RFC 3830, August\n         2004.\n\
    \   [3]   NIST, FIBS-PUB 180-2, \"Secure Hash Standard\", April 1995,\n      \
    \   http://csrc.nist.gov/publications/fips/fips180-2/\n         fips180-2withchangenotice.pdf.\n\
    \   [4]   Arkko, J., Lindholm, F., Naslund, M., Norrman, K., and E.\n        \
    \ Carrara, \"Key Management Extensions for Session Description\n         Protocol\
    \ (SDP) and Real Time Streaming Protocol (RTSP)\", RFC\n         4567, July 2006.\n\
    \   [5]   Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing\n \
    \        for Message Authentication\", RFC 2104, February 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [6]   A.J. Menezes, P. van Oorschot, S. A. Vanstone:\
    \ \"Handbook of\n         Applied Cryptography\", CRC Press 1996.\n   [7]   Rescorla,\
    \ E. and B. Korver, \"Guidelines for Writing RFC Text on\n         Security Considerations\"\
    , BCP 72, RFC 3552, July 2003.\n   [8]   Eastlake 3rd, D., Crocker, S., and J.\
    \ Schiller, \"Randomness\n         Recommendations for Security\", RFC 1750, December\
    \ 1994.\n   [9]   Ueli M. Maurer, S. Wolf: \"The Diffie-Hellman Protocol\",\n\
    \         Designs, Codes, and Cryptography, Special Issue Public Key\n       \
    \  Cryptography, Kluwer Academic Publishers, vol. 19, pp. 147-171,\n         2000.\n\
    \         ftp://ftp.inf.ethz.ch/pub/crypto/publications/MauWol00c.ps.\n   [10]\
    \  Discrete Logarithms and the Diffie-Hellman Protocol,\n         http://www.crypto.ethz.ch/research/ntc/dldh/.\n\
    \   [11]  Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS)\n \
    \        Protocol Version 1.1\", RFC 4346, April 2006.\n   [12]  Harkins, D. and\
    \ D. Carrel, \"The Internet Key Exchange (IKE)\",\n         RFC 2409, November\
    \ 1998.\n   [13]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n\
    \         Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n   \
    \      Session Initiation Protocol\", RFC 3261, June 2002.\n   [14]  Kaufman,\
    \ C., \"Internet Key Exchange (IKEv2) Protocol\", RFC\n         4306, December\
    \ 2005.\n   [15]  ITU-T Recommendation H.235.7: \" H.323 Security framework: Usage\n\
    \         of the MIKEY Key Management Protocol for the Secure Real Time\n    \
    \     Transport Protocol (SRTP) within H.235\"; 9/2005.\n   [16]  Schaad, J. and\
    \ R. Housley, \"Advanced Encryption Standard (AES)\n         Key Wrap Algorithm\"\
    , RFC 3394, September 2002.\n   [17]  Baugher, M., Weis, B., Hardjono, T., and\
    \ H. Harney, \"The Group\n         Domain of Interpretation\", RFC 3547, July\
    \ 2003.\n   [18]  Harney, H., Meth, U., Colegrove, A., and G. Gross, \"GSAKMP:\n\
    \         Group Secure Association Key Management Protocol\", RFC 4535,\n    \
    \     June 2006.\n   [19]  Baugher, M., Canetti, R., Dondeti, L., and F. Lindholm,\n\
    \         \"Multicast Security (MSEC) Group Key Management Architecture\",\n \
    \        RFC 4046, April 2005.\n   [20]  Baugher, M., McGrew, D., Naslund, M.,\
    \ Carrara, E., and K.\n         Norrman, \"The Secure Real-time Transport Protocol\
    \ (SRTP)\", RFC\n         3711, March 2004.\n   [21]  ITU-T Recommendation H.235.0,\
    \ \" H.323 Security framework:\n         Security framework for H-series (H.323\
    \ and other H.245 based)\n         multimedia systems\", (09/2005).\n   [22] \
    \ Adams, C., Farrell, S., Kause, T., and T. Mononen, \"Internet\n         X.509\
    \ Public Key Infrastructure Certificate Management Protocol\n         (CMP)\"\
    , RFC 4210, September 2005.\n   [23]  Myers, M., Ankney, R., Malpani, A., Galperin,\
    \ S., and C. Adams,\n         \"X.509 Internet Public Key Infrastructure Online\
    \ Certificate\n         Status Protocol - OCSP\", RFC 2560, June 1999.\n   [24]\
    \  Adams, C., Sylvester, P., Zolotarev, M., and R. Zuccherato,\n         \"Internet\
    \ X.509 Public Key Infrastructure Data Validation and\n         Certification\
    \ Server Protocols\", RFC 3029, February 2001.\n   [25]  Schaad, J., \"Internet\
    \ X.509 Public Key Infrastructure\n         Certificate Request Message Format\
    \ (CRMF)\", RFC 4211, September\n         2005.\n   [26]  Cooper, M., Dzambasow,\
    \ Y., Hesse, P., Joseph, S., and R.\n         Nicholas, \"Internet X.509 Public\
    \ Key Infrastructure:\n         Certification Path Building\", RFC 4158, September\
    \ 2005.\n   [27]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n\
    \         Session Description Protocol (SDP)\", RFC 3264, June 2002.\n   [37]\
    \  IANA MIKEY Payload Name Spaces per RFC 3830, see\n         http://www.iana.org/assignments/mikey-payloads.\n\
    \   [29]  Hoffman, P. and B. Schneier, \"Attacks on Cryptographic Hashes\n   \
    \      in Internet Protocols\", RFC 4270, November 2005.\n   [30]  Bellovin, S.M.\
    \ and E.K. Rescorla: \"Deploying a New Hash\n         Algorithm\", October 2005,\n\
    \         http://www.cs.columbia.edu/~smb/papers/new-hash.pdf.\n   [31]  Milne,\
    \ A., Blaser, M., Brown, D., and L. Dondetti, \"ECC\n         Algorithms For MIKEY\"\
    , Work in Progress, June 2005.\n   [32]  Bellare, M.: \"New Proofs for NMAC and\
    \ HMAC: Security Without\n         Collision-Resistance\", http://eprint.iacr.org/2006/043.pdf,\n\
    \         November 2005.\n   [33]  Ignjatic, D., Dondeti, L., Audet, F., and P.\
    \ Lin, \"An\n         additional mode of key Distribution in MIKEY: MIKEY-RSA-R\"\
    ,\n         Work in Progress, August 2006.\n"
- title: Appendix A.  Usage of MIKEY-DHHMAC in H.235
  contents:
  - "Appendix A.  Usage of MIKEY-DHHMAC in H.235\n   This appendix provides informative\
    \ overview how MIKEY-DHHMAC can be\n   applied in some H.323-based multimedia\
    \ environments.  Generally,\n   MIKEY is applicable for multimedia applications\
    \ including IP\n   telephony.  [15] describes various use cases of the MIKEY key\n\
    \   management protocols (MIKEY-PS, MIKEY-PK, MIKEY-DHSIGN and MIKEY-\n   DHHMAC)\
    \ with the purpose to establish TGK keying material among H.323\n   endpoints.\
    \  The TGKs are then used for media encryption by applying\n   SRTP [20].  Addressed\
    \ scenarios include point-to-point with one or\n   more intermediate gatekeepers\
    \ (trusted or partially trusted) in\n   between.\n   One particular use case addresses\
    \ MIKEY-DHHMAC to establish a media\n   connection from an endpoint B calling\
    \ (through a gatekeeper) to\n   another endpoint A that is located within that\
    \ same gatekeeper zone.\n   While EP-A and EP-B typically do not share any auth_key\
    \ a priori,\n   some separate protocol exchange means are achieved outside the\
    \ actual\n   call setup procedure to establish an auth_key for the time while\n\
    \   endpoints are being registered with the gatekeeper; such protocols\n   exist\
    \ [15] but are not shown in this document.  The auth_key between\n   the endpoints\
    \ is being used to authenticate and integrity protect the\n   MIKEY-DHHMAC messages.\n\
    \   To establish a call, it is assumed that endpoint B has obtained\n   permission\
    \ from the gatekeeper (not shown).  Endpoint B as the caller\n   builds the MIKEY-DHHMAC\
    \ I_message (see section 3) and sends the\n   I_message encapsulated within the\
    \ H.323-SETUP to endpoint A.  A\n   routing gatekeeper (GK) would forward this\
    \ message to endpoint B; in\n   case of a non-routing gatekeeper, endpoint B sends\
    \ the SETUP directly\n   to endpoint A.  In either case, H.323 inherent security\
    \ mechanisms\n   [21] are applied to protect the (encapsulation) message during\n\
    \   transfer.  This is not depicted here.  The receiving endpoint A is\n   able\
    \ to verify the conveyed I_message and can compute a TGK.\n   Assuming that endpoint\
    \ A would accept the call, EP-A then builds the\n   MIKEY-DHHMAC R_message and\
    \ sends the response as part of the\n   CallProceeding-to-Connect message back\
    \ to the calling endpoint B\n   (possibly through a routing gatekeeper).  Endpoint\
    \ B processes the\n   conveyed R_message to compute the same TGK as the called\
    \ endpoint A.\n   1.) EP-B -> (GK) -> EP-A: SETUP(I_fwd_message [, I_rev_message])\n\
    \   2.) EP-A -> (GK) -> EP-B: CallProceeding-to-CONNECT(R_fwd_message\n      \
    \ [, R_rev_message])\n   Notes: If it is necessary to establish directional TGKs\
    \ for full-\n          duplex links in both directions B->A and A->B, then the\n\
    \          calling endpoint B instantiates the DHHMAC protocol twice:\n      \
    \    once in the direction B->A using I_fwd_message and another run\n        \
    \  in parallel in the direction A->B using I_rev_message.  In\n          that\
    \ case, two MIKEY-DHHMAC I_messages are encapsulated within\n          SETUP (I_fwd_message\
    \ and I_rev_message) and two MIKEY-DHHMAC\n          R_messages (R_fwd_message\
    \ and R_rev_message) are encapsulated\n          within CallProceeding-to-CONNECT.\
    \  The I_rev_message\n          corresponds with the I_fwd_message.  Alternatively,\
    \ the called\n          endpoint A may instantiate the DHHMAC protocol in a separate\n\
    \          run with endpoint B (not shown); however, this requires a\n       \
    \   third handshake to complete.\n          For more details on how the MIKEY\
    \ protocols may be deployed\n          with H.235, please refer to [15].\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Martin Euchner\n   Hofmannstr. 51\n   81359 Munich, Germany\n\
    \   Phone: +49 89 722 55790\n   Fax:   +49 89 722 62366\n   EMail: martin_euchner@hotmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
