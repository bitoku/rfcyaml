- title: __initial_text__
  contents:
  - '                 Service Templates and Service: Schemes

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The \"service:\" URL scheme name is used to define URLs (called\n\
    \   \"service: URLs\" in this document) that are primarily intended to be\n  \
    \ used by the Service Location Protocol in order to distribute service\n   access\
    \ information.  These schemes provide an extensible framework\n   for client-based\
    \ network software to obtain configuration information\n   required to make use\
    \ of network services.  When registering a\n   service: URL, the URL is accompanied\
    \ by a set of well-defined\n   attributes which define the service.  These attributes\
    \ convey\n   configuration information to client software, or service\n   characteristics\
    \ meaningful to end users.\n   This document describes a formal procedure for\
    \ defining and\n   standardizing new service types and attributes for use with\
    \ the\n   \"service:\" scheme.  The formal descriptions of service types and\n\
    \   attributes are templates that are human and machine understandable.\n   They\
    \ SHOULD be used by administrative tools to parse service\n   registration information\
    \ and by client applications to provide\n   localized translations of service\
    \ attribute strings.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1. Introduction                                      \
    \              2\n        1.1. Terminology  . . . . . . . . . . . . . . . . .\
    \ . . . .    3\n        1.2. Service Location Protocol  . . . . . . . . . . .\
    \ . . .    5\n              1.2.1. Compatibility with SLPv1 . . . . . . . . .\
    \ . .    5\n    2. Service URL Syntax and Semantics                          \
    \      5\n        2.1. Service URL Syntax   . . . . . . . . . . . . . . . . .\
    \    5\n        2.2. Service URL Semantics  . . . . . . . . . . . . . . . .  \
    \  8\n        2.3. Use of service: URLs   . . . . . . . . . . . . . . . .    9\n\
    \        2.4. Specifying the Service Type-Specific URL Syntax. . . .   10\n  \
    \      2.5. Accommodating Abstract Service Types   . . . . . . . .   10\n    \
    \          2.5.1. Advertising Abstract Service Types . . . . . .   11\n    3.\
    \ Syntax and Semantics of Service Type Specifications            12\n        3.1.\
    \ Syntax of Service Type Templates   . . . . . . . . . .   12\n        3.2. Semantics\
    \ of Service Type Templates. . . . . . . . . .   15\n              3.2.1. Definition\
    \ of a Service Template . . . . . . .   15\n              3.2.2. Service Type\
    \ . . . . . . . . . . . . . . . . .   16\n              3.2.3. Version Number\
    \ . . . . . . . . . . . . . . . .   16\n              3.2.4. Description  . .\
    \ . . . . . . . . . . . . . . .   16\n              3.2.5. Syntax of the Service\
    \ Type-specific URL Part .   17\n              3.2.6. Attribute Definition   .\
    \ . . . . . . . . . . .   17\n    4. A Process For Standardizing New Service Types\
    \                  21\n    5. IANA Considerations                            \
    \                22\n    6. Internationalization Considerations              \
    \              24\n        6.1. Language Identification and Translation. . . .\
    \ . . . .   24\n    7. Security Considerations                               \
    \         25\n    A. Service Template Examples                               \
    \       26\n        A.1. FOO . . . . . . . . . . . . . . . . . .. . . . . . .\
    \ .   26\n        A.2. Abstract Service Type:  Net-Transducer . . . . . . . .\
    \   28\n        A.3. Concrete Service Type:  Net-Transducer:Thermometer . .  \
    \ 29\n        A.4. service: URLs and SLP  . . . . . . . . . . . . . . . .   30\n\
    \    B. Acknowledgments                                                30\n  \
    \  C. References                                                     31\n    D.\
    \ Authors' Addresses                                             32\n    E. Full\
    \ Copyright Statement                                       33\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes a URL scheme, called service: URL,\
    \ which\n   defines network access information for network services using a\n\
    \   formal notation.  In addition it describes how to define a set of\n   attributes\
    \ to associate with a service: URL. These attributes will\n   allow end users\
    \ and programs to select between network services of\n   the same type that have\
    \ different capabilities.  The attributes are\n   defined in a template document\
    \ that is readable by people and\n   machines.\n   A client uses attributes to\
    \ select a particular service.  Service\n   selection occurs by obtaining the\
    \ service: URL that offers the right\n   configuration for the client.  Service\
    \ type templates define the\n   syntax of service: URLs for a particular service\
    \ type, as well as the\n   attributes which accompany a service: URL in a service\
    \ registration.\n   Templates are used for the following distinct purposes:\n\
    \    1. Standardization\n       The template is reviewed before it is standardized.\
    \  Once it is\n       standardized, all versions of the template are archived\
    \ by IANA.\n    2. Service Registration\n       Servers making use of the Service\
    \ Location Protocol [10] register\n       themselves and their attributes.  They\
    \ use the templates to\n       generate the service registrations.  In registering,\
    \ the service\n       must use the specified values for its attributes.\n    3.\
    \ Client presentation of Service Information\n       Client applications may display\
    \ service information.  The\n       template provides type information and explanatory\
    \ text which may\n       be helpful in producing user interfaces.\n    4. Internationalization\n\
    \       Entities with access to the template for a given service type in\n   \
    \    two different languages may translate between the two languages.\n      \
    \ A service may register itself in more than one language using\n       templates,\
    \ though it has been configured by an operator who\n       registered service\
    \ attributes in a single language.\n   All grammar encoding follows the Augmented\
    \ BNF (ABNF) [8] for syntax\n   specifications.\n"
- title: 1.1. Terminology
  contents:
  - "1.1. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119  [6].\n   The following terminology is used for describing service: URLs.\n\
    \      service scheme\n         A URL scheme whose name starts with the string\
    \ \"service:\" and\n         is followed by the service type name, constructed\
    \ according to\n         the rules in this document.\n      service: URL\n   \
    \      A URL constructed according to the service scheme definition.\n       \
    \  It typically provides at least the following:  The name of an\n         access\
    \ protocol, and an address locating this service.  The\n         service: URL\
    \ may include url path information specific to the\n         type of service,\
    \ as well as attribute information encoded\n         according to the URL grammar.\
    \  The service: URL is used by the\n         Service Location Protocol to register\
    \ and discover the location\n         of services.  It may be used by other protocols\
    \ and in\n         documents as well.\n      service type\n         A name identifying\
    \ the semantics by which the remainder of the\n         service: URL is to be\
    \ understood.  It may denote either a\n         particular network protocol, or\
    \ an abstract service associated\n         with a variety of protocols.  If the\
    \ service type denotes a\n         particular protocol, then the service type\
    \ name SHOULD either\n         be assigned the name of a particular well known\
    \ port [2] by\n         convention or be the Assigned Numbers name for the service\
    \ [1].\n      abstract service type\n         A service type name which is associated\
    \ with a variety of\n         different protocols.  An example is given in Section\
    \ A.\n         Section 2 discusses various ways that abstract types can be\n \
    \        accommodated.\n      service registration\n         A service: URL and\
    \ optionally a set of attributes comprise a\n         service registration.  This\
    \ registration is made by or on\n         behalf of a given service.  The URL\
    \ syntax and attributes must\n         conform to the service template for the\
    \ registered service.\n      service template\n         A formal description of\
    \ the service attributes and service\n         scheme associated with a particular\
    \ service type.\n"
- title: 1.2. Service Location Protocol
  contents:
  - "1.2. Service Location Protocol\n   The Service Location Protocol version 2 [10]\
    \ allows service: URLs to\n   be registered and discovered, though service: URLs\
    \ may be also used\n   in other contexts.\n   Client applications discover service\
    \ registrations by issuing queries\n   for services of a particular type, specifying\
    \ the attributes of the\n   service: URLs to return.  Clients retrieve the attributes\
    \ of a\n   particular service by supplying its service: URL. Attributes for all\n\
    \   service registrations of a particular type can also be retrieved.\n   Services\
    \ may register themselves, or registrations may be made on\n   their behalf. \
    \ These registrations contain a service: URL, and\n   possibly attributes and\
    \ digital signatures.\n"
- title: 1.2.1. Compatibility with SLPv1
  contents:
  - "1.2.1. Compatibility with SLPv1\n   This document adopts the encoding conventions\
    \ of SLPv2.\n   Compatibility with SLPv1 [[15]] is possible, if the following\n\
    \   conventions are observed:\n    1. Abstract service types must not be used.\
    \  SLPv2 specifies the\n       use of Service URLs with abstract service types.\
    \  SLPv1 does not\n       support them.  Thus, a service template which is to\
    \ serve both\n       SLPv1 and SLPv2 must not use abstract service types.\n  \
    \  2. The syntax for representing opaque values in this document is\n       consistent\
    \ with SLPv2.  The syntax must be converted for use with\n       SLPv1.  Instead\
    \ of a sequence of \"\\FF\" then \"\\\" HEXDIG HEXDIG for\n       each byte in\
    \ the opaque value, SLPv1 uses radix-64 notation.\n    3. Escape characters are\
    \ significantly differently in SLPv1 and\n       SLPv2.  Instead of using escaped\
    \ byte notation for escaped\n       characters, SLPv1 uses the HTML convention\
    \ `&' `#' 1*DIGIT `;'.\n"
- title: 2. Service URL Syntax and Semantics
  contents:
  - "2. Service URL Syntax and Semantics\n   This section describes the syntax and\
    \ semantics of service: URLs.\n"
- title: 2.1. Service URL Syntax
  contents:
  - "2.1. Service URL Syntax\n   The syntax of the service: URL MUST conform to an\
    \ 'absolute URI' as\n   defined by [5].  The syntax of a service:  URL differs\
    \ enough from a\n   'generic URI' that it is best to treat it as an opaque URI\
    \ unless a\n   specific parser for the service:  URL is available.\n   All service:\
    \  URLs have the same syntax up to the 'url-part' The\n   syntax for a service\
    \ URL depends on the service type following the\n   service scheme.  All service:\
    \  URLs have a service access point\n   portion, indicating the address of the\
    \ service to access.\n   The syntax for the <sap> field depends upon the service\
    \ type\n   definition.  The <sap> field is the service access point, and\n   describes\
    \ how to access the service.  In addition, although both\n   upper case and lower\
    \ case characters are recognized in the <service-\n   type> field for convenience,\
    \ the name is case-folded into lower case.\n   Service types are therefore not\
    \ distinguished on the basis of case,\n   so, for example, \"http\" and \"HTTP\"\
    \ designate the same service type.\n   This is consistent with general URL practice,\
    \ as outlined in [5].\n   The ABNF for a service: URL is:\n      service: URL\
    \    =   \"service:\" service-type \":\" sap\n      service-type    =   abstract-type\
    \ \":\" url-scheme / concrete-type\n      abstract-type   =   type-name [ \".\"\
    \ naming-auth ]\n      concrete-type   =   protocol [ \".\" naming-auth ]\n  \
    \    type-name       =   resname\n      naming-auth     =   resname\n      url-scheme\
    \      =   resname\n                          ; A recognized URL scheme name,\
    \ standardized\n                          ; either through common practice or\
    \ through\n                          ; approval of a standards body.\n      resname\
    \         =   ALPHA [ 1*(ALPHA / DIGIT / \"+\" / \"-\") ]\n      sap         \
    \    =   site [url-part]\n      site            =   ipsite / atsite / ipxsite\n\
    \      ipsite          =   \"//\" [ [ user \"@\" ] hostport ]\n      hostport\
    \        =   host [ \":\" port ]\n      host            =   hostname / hostnumber\n\
    \      hostname        =   *( domainlabel \".\" ) toplabel\n      alphanum   \
    \     =   ALPHA / DIGIT\n      domainlabel     =   alphanum / alphanum *[alphanum\
    \ / \"-\"] alphanum\n      toplabel        =   ALPHA / ALPHA *[ alphanum / \"\
    -\" ] alphanum\n      hostnumber      =   ipv4-number\n      ipv4-number     =\
    \   1*3DIGIT 3(\".\" 1*3DIGIT)\n      port            =   1*DIGIT\n          \
    \                ; A port number must be included if the\n                   \
    \       ; protocol field does not have an IANA\n                          ; assigned\
    \ port number.\n      user            =   *[ uchar / \";\" / \"+\" / \"&\" / \"\
    =\" ]\n      ipxsite         =   \"/ipx/\" ipx-net \":\" ipx-node \":\" ipx-socket\n\
    \      ipx-net         =   8 HEXDIGIT\n      ipx-node        =   12 HEXDIGIT\n\
    \      ipx-socket      =   4 HEXDIGIT\n      atsite          =   \"/at/\" at-object\
    \ \":\" at-type \"\" at-zone\n      at-object       =   1*31apple-char\n     \
    \ at-type         =   1*31apple-char\n      at-zone         =   1*31apple-char\n\
    \      apple-char      =   ALPHA / DIGIT / safe / escaped\n                  \
    \    =   ; AppleAscii [7] values that are not\n                      =   ; from\
    \ the restricted range must be escaped.\n                      =   ; NOTE: The\
    \ escaped values do NOT correspond\n                      =   ; to UTF-8 values\
    \ here:  They are AppleAscii\n                      =   ; bytes.\n      url-part\
    \        =   [ url-path ] [ attr-list ]\n      url-path        =   1 * ( \"/\"\
    \ *xchar )\n                          ; Each service type must define its\n  \
    \                        ; own syntax consistent\n                          ;\
    \ with [5].\n      attr-list       =   1 * ( \";\" attr-asgn )\n      attr-asgn\
    \       =   attr-id / attr-id \"=\" attr-value\n      safe            =   \"$\"\
    \ / \"-\" / \"_\" / \".\" / \"~\"\n      extra           =   \"!\" / \"*\" / \"\
    '\" / \"(\" / \")\" / \",\" / \"+\"\n      uchar           =   unreserved / escaped\n\
    \      xchar           =   unreserved / reserved / escaped\n      escaped    \
    \     =   1*(`\\' HEXDIG HEXDIG)\n      reserved        =   \";\" / \"/\" / \"\
    ?\" / \":\" / \"@\" / \"&\" / \"=\" / \"+\"\n      unreserved      =   ALPHA /\
    \ DIGIT / safe / extra\n   IPX addresses [14] are composed of a network, node\
    \ and socket number.\n   The IPX network number is a four-byte number, in network\
    \ order and\n   expressed in hexadecimal, that signifies an IPX subnet.  The node\n\
    \   element represents a network interface card.  It is a six-byte\n   number,\
    \ expressed in hexadecimal, that is usually the same as the\n   node ID of the\
    \ interface card.  The socket element represents a\n   specific service access\
    \ point, given an IPX network and node.  IPX\n   sockets are analogous to TCP/IP\
    \ ports, and are not to be confused\n   with Berkeley sockets.\n   AppleTalk addresses\
    \ [9] are composed of an object, type and zone.\n   The object is a human readable\
    \ string.  The type is an identifier,\n   not intended for human readability.\
    \  The zone refers to the AppleTalk\n   Zone name, which is also human readable.\
    \  The characters composing\n   these names are drawn from the AppleAscii character\
    \ set [7].  Thus,\n   they do not equate to escaped ASCII or UTF-8 characters.\
    \  The\n   characters \"=\" and \"*\" are reserved and may not be included in\
    \ the\n   names even in binary form.\n   In cases besides the AppleTalk grammar,\
    \ some characters must be\n   escaped before use.  To escape any character, precede\
    \ the two digits\n   indicating its ASCII value by '%'.\n"
- title: 2.2. Service URL Semantics
  contents:
  - "2.2. Service URL Semantics\n   The service scheme-specific information following\
    \ the \"service:\"  URL\n   scheme identifier provides information necessary to\
    \ access the\n   service.  As described in the previous subsection, the form of\
    \ a\n   service: URL is as follows:\n      service: URL = \"service:\" service-type\
    \ \":\" site url-path\n   where <site> has one of the following forms could refer\
    \ to an\n   <ipsite>, <ipxsite> or <atsite> if the service URL locates to an IP,\n\
    \   IPX or AppleTalk service access point, respectively.\n   As discussed in Section\
    \ 1, the <service-type> can be either a\n   concrete protocol name, or an abstract\
    \ type name.\n   The <ipsite> field is typically either a domain name (DNS) or\
    \ an IP\n   network protocol address for the service, and possibly a port number.\n\
    \   Note that use of DNS hostnames is preferred for ease of renumbering.\n   The\
    \ <site> field can be null if other information in the service URL\n   or service\
    \ attributes is sufficient to use the service.\n   The <sap> field allows more\
    \ information to be provided (by way of\n   <url-path> and <attr-list>) that can\
    \ uniquely locate the service or\n   resource if the <site> is not sufficient\
    \ for that purpose.  For IP\n   addresses, the <site> field begins with \"//\"\
    .  Other address families\n   supported are IPX [14] and AppleTalk [9].\n   An\
    \ <attr-list> field appears at the end of the <url-part> field, but\n   is never\
    \ required to exist in any service location registration.\n   The <attr-list>\
    \ field is composed of a list of semicolon (\";\")\n   separated attribute assignments\
    \ of the form:\n      attr-id \"=\" attr-value\n   or for keyword attributes:\n\
    \      attr-id\n   Attributes are part of service: URLs when the attributes are\
    \ required\n   to access a particular service.  For instance, an ACAP [13] service\n\
    \   might require that the client authenticate with it through Kerberos.\n   Including\
    \ an attribute in the service registration allows the ACAP\n   client to make\
    \ use of the correct SASL [11] authentication mechanism.\n   The ACAP server's\
    \ registration might look like:\n      service:acap://some.where.net;authentication=KERBEROSV4\n\
    \   Note that there can be other attributes of an ACAP server which are\n   not\
    \ appropriate to include in the URL. For instance, the list of\n   users who have\
    \ access to the server is useful for selecting an ACAP\n   server, but is not\
    \ required for a client to use the registered\n   service.\n   Attributes associated\
    \ with the service: URL are not typically\n   included in the service: URL. They\
    \ are stored and retrieved using\n   other mechanisms.  The service: URL is uniquely\
    \ identified with a\n   particular service agent or resource, and is used when\
    \ registering or\n   requesting the attribute information.  The Service Location\
    \ Protocol\n   specifies how such information is registered by network services\
    \ and\n   obtained by client software.\n"
- title: '2.3. Use of service: URLs'
  contents:
  - "2.3. Use of service: URLs\n   The service: URL is intended to allow arbitrary\
    \ client/server and\n   peer to peer systems to make use of a standardized dynamic\
    \ service\n   access point discovery mechanism.\n   It is intended that service:\
    \ URLs be selected according to the\n   suitability of associated attributes.\
    \  A client application can\n   obtain the URLs of several services of the same\
    \ type and distinguish\n   the most preferable among them by means of their attributes.\
    \  The\n   client uses the service: URL to communicate directly to a service.\n\
    \   Attributes are specified with a formal service template syntax\n   described\
    \ in Section 3.  If a service: URL registration includes\n   attributes, the registering\
    \ agent SHOULD also keep track of the\n   attributes which characterize the service.\n\
    \   Registrations can be checked against the formal attribute\n   specification\
    \ defined in the template by the client or agent\n   representing the client.\
    \  Service registration are typically done\n   using the Service Location Protocol\
    \ [10] (SLP). SLP provides a\n   mechanism for service: URLs to be obtained dynamically,\
    \ according to\n   the service's attributes.\n   It is also possible to obtain\
    \ service: URLs from documents and using\n   other protocols.  In this case, the\
    \ URL may not be accompanied by the\n   service attributes.  The context in which\
    \ the URL appears should make\n   it clear, if possible, when the service is appropriate\
    \ to use.  For\n   example, in a mail message, a service might be recommended\
    \ for use\n   when the user is in a branch office.  Or, an HTML document might\n\
    \   include a service: URL as a pointer to a service, describing in text\n   what\
    \ the service does and who is authorized to use it.\n"
- title: 2.4. Specifying the Service Type-Specific URL Syntax
  contents:
  - "2.4. Specifying the Service Type-Specific URL Syntax\n   When a service type\
    \ is specified, the specification includes the\n   definition of the syntax for\
    \ all URLs that are registered by services\n   of that particular type.  For instance,\
    \ the \"lpr\" service type may be\n   defined with service: URLs in the following\
    \ form:\n      service:printer:lpr://<address of printer>/<queue name>\n   The\
    \ section of the URL after the address of the printer:\n      \"/\" <queue name>\n\
    \   is specific to the lpr service type and corresponds to the <url-path>\n  \
    \ field of the general service: URL syntax.  This part is specified\n   when the\
    \ lpr service type is specified.\n"
- title: 2.5. Accommodating Abstract Service Types
  contents:
  - "2.5. Accommodating Abstract Service Types\n   An abstract service type is a service\
    \ type that can be implemented by\n   a variety of different service agents.\n\
    \   In order to register a service: URL for an abstract service type the\n   'abstract-type'\
    \ grammar rule described in section 3.1 is used.  This\n   will result in a URL\
    \ which includes enough information to use the\n   service, namely, the protocol,\
    \ address and path information.  Unlike\n   'concrete' service: URLs, however,\
    \ the service type is not enough to\n   determine the service access.  Rather,\
    \ an abstract service type\n   denotes a class of service types.  The following\
    \ subsection discusses\n   this point in more detail.\n   Concrete service templates\
    \ inherit all attributes defined in the\n   abstract service template from which\
    \ the concrete service template\n   was derived.  Attribute defined in the abstract\
    \ service template MUST\n   not be defined in the concrete service template as\
    \ well.  This\n   simplifies interpretation of templates.\n   For example, if\
    \ an abstract service template for service type '\n   Abstract' defines an attribute\
    \ FOO, all concrete service templates\n   derived from the abstract service template,\
    \ such as '\n   Abstract:Concrete' will implicitly include the definition of\n\
    \   attribute FOO. This derived template MUST NOT redefine FOO, according\n  \
    \ to the rule above.\n   A further example is described in Section A.\n"
- title: 2.5.1. Advertising Abstract Service Types
  contents:
  - "2.5.1. Advertising Abstract Service Types\n   Some services may make use of several\
    \ protocols that are in common\n   use and are distinct services in their own\
    \ right.  In these cases an\n   abstract service type is appropriate.  What is\
    \ essential is that all\n   the required information for the service is clearly\
    \ defined.\n   For example, suppose a network service is being developed for\n\
    \   dynamically loading device drivers.  The client requires the\n   following\
    \ three pieces of information before it can successfully load\n   and instantiate\
    \ the driver:\n    1. The protocol used to load the driver code, for example,\
    \ \"ftp\",\n       \"http\" or \"tftp\"\n    2. A pathname identifying where the\
    \ driver code is located, for\n       example \"/systemhost/drivers/diskdrivers.drv\"\
    ,\n    3. The name of the driver, for example, \"scsi\".\n   The temptation is\
    \ to form the first two items into a URL and embed\n   that into a service: URL.\
    \ As an example which should be avoided,\n      service:ftp:/x3.bean.org/drivers/diskdrivers.drv;driver=scsi\n\
    \   is a service: URL which seems to indicate where to obtain the driver.\n  \
    \ Rather, an abstract service-type SHOULD be used.  The service type is\n   not\
    \ \"ftp\", as the example indicates.  Rather, it is \"device-drivers\".\n   The\
    \ service: URL that should be used, consistent with the rules in\n   section [6],\
    \ is the following:\n      service:device-drivers:ftp://x3.bean.org/drivers/diskdrivers.drv;\n\
    \      driver=scsi;platform=sys3.2-rs3000\n   Other URLs for the same service\
    \ using other protocols are also\n   supported, as in:\n      service:device-drivers:tftp://x2.bean.org/vol3/disk/drivers.drv;\n\
    \      driver=scsi;platform=sys3.2-rs3000\n      service:device-drivers:http://www.bean.org/drivers/drivpak.drv;\n\
    \      driver=scsi;platform=sys3.2-rs3000\n   Using SLP, a search for the service\
    \ type \"device-drivers\" may return\n   all of the three URLs listed above. \
    \ The client selects the most\n   appropriate access protocol for the desired\
    \ resource.\n   The fundamental requirement is that the abstract service type\
    \ MUST be\n   well specified.  This requirement is imposed so that program code\
    \ or\n   human users have enough information to access the service.  In every\n\
    \   case, a well-specified abstract type will include either an access\n   protocol\
    \ and a network address where the service is available, or an\n   embedded URL\
    \ for a standardized URL scheme that describes how to\n   access the service.\
    \  In the example above, there are three further\n   requirements:  A URL path\
    \ is included for access protocols indicating\n   the document to download, and\
    \ two attributes are included to\n   characterize the driver.\n"
- title: 3. Syntax and Semantics of Service Type Specifications
  contents:
  - "3. Syntax and Semantics of Service Type Specifications\n   Service type specifications\
    \ are documents in a formal syntax defining\n   properties important to service\
    \ registration.  These properties are:\n    1. General information on the service\
    \ type specification itself,\n    2. The syntax of the service type-specific part\
    \ of the service URL,\n    3. The definition of attributes associated with a service.\n\
    \   The service type specification document is the service type template.\n  \
    \ The following subsections describe the syntax and semantics of\n   service type\
    \ templates.\n"
- title: 3.1. Syntax of Service Type Templates
  contents:
  - "3.1. Syntax of Service Type Templates\n   Service template documents are encoded\
    \ in a simple form.  They may be\n   translated into any language or character\
    \ set, but the template used\n   for standardization MUST be encoded in the 0x00-0x7F\
    \ subrange of\n   UTF-8 [16] (which corresponds to ASCII character encoding) and\
    \ be in\n   English.\n   A template document begins with a block of text assigning\
    \ values to\n   five document identification items.  The five identification items\n\
    \   can appear in any order within the block, but conventionally the\n   \"template-type\"\
    \ item, which assigns the service type name, occurs at\n   the very top of the\
    \ document in order to provide context for the rest\n   of the document.  The\
    \ attribute definition item occurs after the\n   document identification items.\n\
    \   All items end with a blank line.  The reserved characters are \";\",\n   \"\
    %\", \"=\", \",\", \"#\", LF, and CR. Reserved characters MUST be escaped.\n \
    \  The escape sequence is the same as described in [5].\n   The service template\
    \ is encoded in a UTF-8 character set, but\n   submitted as a part of an work\
    \ in progress, which is encoded in ASCII\n   characters.  All characters which\
    \ are outside of the ASCII range MUST\n   be escaped using the `\\' HEXDIG HEXDIG\
    \ syntax.  For example, the\n   letter e accent aigue would be represented as\
    \ \"\\c3\\a9\".\n   Unfortunately, this will detract from the readability of the\
    \ service\n   template in the service template submission.  Hopefully some public\n\
    \   domain tools will emerge for translating escaped UTF-8 characters\n   into\
    \ humanly readable ones.\n   Values in value lists are separated by commas.  A\
    \ value list is\n   terminated by a newline not preceded by a comma.  If the newline\
    \ is\n   preceded by a comma, the value list is interpreted to continue onto\n\
    \   the next line.\n   Attribute identifiers, attribute type names, and flags\
    \ are all case\n   insensitive.  For ease of presentation, upper and lower case\n\
    \   characters can be used to represent these in the template document.\n   Newlines\
    \ are significant in the grammar.  They delimit one item from\n   another, as\
    \ well as separating parts of items internally.\n   String values are considered\
    \ to be a sequence of non-whitespace\n   tokens potentially with embedded whitespace,\
    \ separated from each\n   other by whitespace.  Commas delimit lists of strings.\
    \  String values\n   are trimmed so as to reduce any sequence of white space interior\
    \ to a\n   string to a single white space.  Preceding or trailing white space\
    \ is\n   removed.  For example:\n         \" some value , another example \"\n\
    \      is trimmed to\n         \"some value\" and \"another example\".\n   Note\
    \ that there can be no ambiguity in string tokenization because\n   values in\
    \ value lists are separated by a comma.  String tokens are\n   not delimited by\
    \ double quotes (\") as is usually the case with\n   programming languages.\n\
    \   Attribute tags and values are useful for directory look-up.  In this\n   case,\
    \ decoding of character escapes and trimming white space MUST be\n   performed\
    \ before string matching.  In addition, string matching\n   SHOULD be case insensitive.\n\
    \   Templates obey the following ABNF [8] grammar:\n      template      =  tem-attrs\
    \ attr-defs\n      tem-attrs     =  schemetype schemevers schemetext schemeurl\n\
    \      schemetype    =  \"template-type=\" scheme term\n      schemevers    =\
    \  \"template-version=\" version-no term\n      schemetext    =  \"template-description=\"\
    \ newline desc term\n      schemeurl     =  \"template-url-syntax=\" newline url-bnf\
    \ term\n      url-bnf       =  *[ com-chars ]\n                       ; An ABNF\
    \ describing the <url-path> production\n                       ; in the service:\
    \ URL grammar of Section 2.1.\n      scheme        =  service-type [ \".\" naming-auth\
    \ ]\n      service-type  =  scheme-name\n      naming-auth   =  scheme-name\n\
    \      scheme-name   =  ALPHA [1*schemechar] [ \".\" 1*schemechar ]\n      schemechar\
    \    =  ALPHA / DIGIT / \"-\" / \"+\" /\n      version-no    =  1*DIGIT \".\"\
    \ 1*DIGIT\n      langtag       =  1*8ALPHA [\"-\" 1*8ALPHA]\n                \
    \       ; See [3]\n      desc          =  *[ com-chars ]\n                   \
    \    ; A block of free-form text for reading by\n                       ; people\
    \ describing the service in a short,\n                       ; informative manner.\n\
    \      term          =  newline newline\n      attr-defs     =  *( attr-def /\
    \ keydef )\n      attr-def      =  id \"=\" attrtail\n      keydef        =  id\
    \ \"=\" \"keyword\" newline [help-text] newline\n      attrtail      =  type flags\
    \ newline [value-list] [help-text]\n                       [value-list] newline\n\
    \      id            =  1*attrchar\n      type          =  \"string\" / \"integer\"\
    \ / \"boolean\" / \"opaque\"\n      flags         =  [\"m\"/\"M\"] [\"l\"/\"L\"\
    ] [\"o\"/\"O\"] [\"x\"/\"X\"]\n      value-list    =  value newline / value \"\
    ,\" value-list /\n                       value \",\" newline value-list\n    \
    \  help-text     =  1*( \"#\" help-line )\n                       ; A block of\
    \ free-form text for reading by\n                       ; people describing the\
    \ attribute and\n                       ; its values.\n      help-line     = \
    \ *[ com-chars ] newline\n      attrchar      =  schemechar / \":\" / \"_\" /\
    \ \"$\" / \"~\" / \"@\" / \".\" /\n                       \"|\" / \"<\" / \">\"\
    \ / \"*\" / \"&\"\n      value         =  string / integer / boolean / opaque\n\
    \      string        =  safe-char *[safe-char / white-sp] safe-char\n      integer\
    \       =  [ \"+\" | \"-\" ] 1*DIGIT\n      boolean       =  \"true\" / \"false\"\
    \n      opaque        =  \"\\FF\" 1*( \"\\\" HEXDIG HEXDIG)\n                \
    \       ; Each byte of opaque value is hex encoded.\n                       ;\
    \ The format corresponds to [10].\n                       ; Newlines are ignored\
    \ in decoding opaque\n                       ; values.\n      com-chars     =\
    \  safe-char / white-sp / \",\" / \";\"/ \"%\"\n      safe-char     =  attrchar\
    \ / escaped / \" \" / \"!\" / '\"' / \"'\" /\n                       \"|\" / \"\
    (\" / \")\" / \"+\" / \"-\" / \".\" / \":\" /\n                       \"=\" /\
    \ \"?\" / \"[\" / \"]\" / \"{\" / \"/\" / \"{\" /\n                       \"$\"\
    \n                       ; All UTF-8 printable characters are\n              \
    \         ; included except \",\", \"%\", \";\", and \"#\".\n      escaped   \
    \    =  1*(`\\' HEXDIG HEXDIG)\n      white-sp      =  SPACE / HT\n      newline\
    \       =  CR / ( CR LF )\n"
- title: 3.2. Semantics of Service Type Templates
  contents:
  - "3.2. Semantics of Service Type Templates\n   The service type template defines\
    \ the service attributes and service:\n   URL syntax for a particular service\
    \ type.  The attribute definition\n   includes the attribute type, default values,\
    \ allowed values and other\n   information.\n   Note that the 'template-type',\
    \ 'template-version', 'template-\n   description' and 'template-url-syntax' have\
    \ all been defined as\n   attributes.  These attributes MAY accompany any service\
    \ registration\n   using SLPv2.\n"
- title: 3.2.1. Definition of a Service Template
  contents:
  - "3.2.1. Definition of a Service Template\n   There are four items included in\
    \ the service template.  The semantics\n   of each item is summarized below.\n\
    \    -  template-type\n       The scheme name of the service scheme.  The scheme\
    \ name consists\n       of the service type name and an optional naming authority\
    \ name,\n       separated from the service type name by a period.  See 3.2.2 for\n\
    \       the conventions governing service type names.\n    -  template-version\n\
    \       The version number of the service type specification.\n    -  template-description\n\
    \       A description of the service suitable for inclusion in text read\n   \
    \    by people.\n    -  template-url-syntax\n       The syntax of the service\
    \ type-specific URL part of the service:\n       URL.\n    -  attribute definitions\n\
    \       A collection of zero or more definitions for attributes\n       associated\
    \ with the service in service registrations.\n   Each of the following subsections\
    \ deals with one of these items.\n"
- title: 3.2.2. Service Type
  contents:
  - "3.2.2. Service Type\n   The service scheme consists of the service type name\
    \ and an optional\n   naming authority name separated from the service type name\
    \ by a\n   period.  The service scheme is a string that is appended to the '\n\
    \   service:'  URL scheme identifier, and is the value of the \"template-\n  \
    \ type\" item in the template document.  If the naming authority name is\n   absent\
    \ it is assumed to be IANA.\n"
- title: 3.2.3. Version Number
  contents:
  - "3.2.3. Version Number\n   The version number of the service type template is\
    \ the value of the\n   \"template-version\" item.  A draft proposal starts at\
    \ 0.0, and the\n   minor number increments once per revision.  A standardized\
    \ template\n   starts at 1.0.  Additions of optional attributes add one to the\
    \ minor\n   number, and additions of required attributes, changes of definition,\n\
    \   or removal of attributes add one to the major number.  The intent is\n   that\
    \ an old service template still accurately, if incompletely,\n   defines the attributes\
    \ of a service registration if the template only\n   differs from the registration\
    \ in its minor version.  See Section 4\n   for more detail on how to use the template-version\
    \ attribute.\n"
- title: 3.2.4. Description
  contents:
  - "3.2.4. Description\n   The description is a block of text readable by people\
    \ in the language\n   of the template and is the value of the \"template-description\"\
    \ item.\n   It should be sufficient to identify the service to human readers and\n\
    \   provide a short, informative description of what the service does.\n   If\
    \ the service type corresponds to a particular protocol, the\n   protocol specification\
    \ must be cited here.  The protocol need not be\n   a standardized protocol. \
    \ The template might refer to a proprietary\n   specification, and refer the reader\
    \ of the template to a contact\n   person for further information.\n"
- title: 3.2.5. Syntax of the Service Type-specific URL Part
  contents:
  - "3.2.5. Syntax of the Service Type-specific URL Part\n   The syntax of the service\
    \ type-specific part of the service:  URL is\n   provided in the template document\
    \ as the value of the \"template-url-\n   syntax\" item.  The <url-path> field\
    \ of the service:  URL is designed\n   to provide additional information to locate\
    \ a service when the\n   <addr-spec> field is not sufficient.  The <url-path>\
    \ field\n   distinguishes URLs of a particular service type from those of another\n\
    \   service type.  For instance, in the case of the lpr service type, the\n  \
    \ <url-path> may be defined so that it must include the queue name, but\n   other\
    \ service types may not require this information.\n   The syntax for the <url-path>\
    \ field MUST accompany the definition of\n   a new service type, unless the URL\
    \ scheme has already been\n   standardized and is not a service: URL. The syntax\
    \ is included in the\n   template document as an ABNF [8] following the rules\
    \ for URL syntax\n   described in [5].  There is no requirement for a service\
    \ scheme to\n   support a <url-path>.  The <url-path> field can be very simple,\
    \ or\n   even omitted.  If the URL scheme has already been standardized, the\n\
    \   \"template-url-syntax\" item SHOULD include a reference to the\n   appropriate\
    \ standardization documents.  Abstract service types may\n   defer this field\
    \ to the template documents describing their concrete\n   instances.\n"
- title: 3.2.6. Attribute Definition
  contents:
  - "3.2.6. Attribute Definition\n   The bulk of the template is typically devoted\
    \ to defining service\n   type-specific attributes.  An attribute definition precisely\n\
    \   specifies the attribute's type, other restrictions on the attribute\n   (whether\
    \ it is multi-valued, optional, etc), some text readable by\n   people describing\
    \ the attribute, and lists of default and allowed\n   values.  The only required\
    \ information is the attribute's type, the\n   rest are optional.  Registration,\
    \ deregistration and the use of\n   attributes in queries can be accomplished\
    \ using the Service Location\n   Protocol [10] or other means, and discussion\
    \ of this is beyond the\n   scope of the document.\n   Attributes are used to\
    \ convey information about a given service for\n   purposes of differentiating\
    \ different services of the same type.\n   They convey information to be used\
    \ in the selection of a particular\n   service to establish communicate with,\
    \ either through a program\n   offering a human interface or programmatically.\
    \  Attributes can be\n   encoded in different character sets and in different\
    \ languages.  The\n   procedure for doing this is described in Section 6.\n  \
    \ An attribute definition begins with the specification of the\n   attribute's\
    \ identifier and ends with a single empty line.  Attributes\n   definitions have\
    \ five components (in order of appearance in a\n   definition):\n    1. An attribute\
    \ identifier which acts as the name of the attribute,\n    2. Attribute descriptors\
    \ (type and flags),\n    3. An optional list of values which are assigned to the\
    \ attribute by\n       default,\n    4. An optional block of text readable by\
    \ people providing a short,\n       informative description of the attribute,\n\
    \    5. An optional list of allowed values which restrict the value or\n     \
    \  values the attribute can take on.\n"
- title: 3.2.6.1. The Attribute Identifier
  contents:
  - "3.2.6.1. The Attribute Identifier\n   An attribute definition starts with the\
    \ specification of the\n   attribute's identifier.  The attribute's identifier\
    \ functions as the\n   name of the attribute.  Note that the characters used to\
    \ compose an\n   attribute identifier are restricted to those characters considered\n\
    \   unrestricted for inclusion in a URL according to [5].  The reason is\n   that\
    \ services can display prominent attributes in their service:  URL\n   registrations.\
    \  Each attribute identifier must be unique in the\n   template.  Since identifiers\
    \ are case folded, upper case and lower\n   case characters are the same.\n"
- title: 3.2.6.2. The Attribute Type
  contents:
  - "3.2.6.2. The Attribute Type\n   Attributes can have one of five different types:\
    \  string, integer,\n   boolean, opaque, or keyword.  The attribute's type specification\
    \ is\n   separated from the attribute's identifier by an equal sign (\"=\") and\n\
    \   follows the equal sign on the same line.  The string, signed integer,\n  \
    \ and boolean types have the standard programming language or database\n   semantics.\
    \  Integers are restricted to those signed values that can\n   be represented\
    \ in 32 bits.  The character set used to represent\n   strings is not specified\
    \ at the time the template is defined, but\n   rather is determined by the service\
    \ registration.  Booleans have the\n   standard syntax.  Opaques are byte escaped\
    \ values that can be used to\n   represent any other kind of data.  Keywords are\
    \ attributes that have\n   no characteristics other than their existence (and\
    \ possibly the\n   descriptive text in their definition).\n   Keyword and boolean\
    \ attributes impose restrictions on the following\n   parts of the attribute definition.\
    \  Keyword attribute definitions\n   MUST have no flag information following the\
    \ type definition, nor any\n   default or allowed values list.  Boolean attributes\
    \ are single value\n   only, i.e., multi-valued boolean attributes are not allowed.\n"
- title: 3.2.6.3. Attribute Flags
  contents:
  - "3.2.6.3. Attribute Flags\n   Flags determine other characteristics of an attribute.\
    \  With the\n   exception of keyword attributes, which may not have any flags,\
    \ flags\n   follow the attribute type on the same line as the attribute\n   identifier,\
    \ and are separated from each other by whitespace.  Flags\n   may appear in any\
    \ order after the attribute type.  Other information\n   must not follow the flags,\
    \ and only one flag identifier of a\n   particular flag type is allowed per attribute\
    \ definition.\n   The semantics of the flags are as follows:\n    -  o or O\n\
    \       Indicates that the attribute is optional.  If this flag is\n       missing,\
    \ the attribute is required in every service registration.\n    -  m or M\n  \
    \     Indicates that the attribute can take on multiple values.  If\n       this\
    \ flag is present, every value in a multi-valued attribute\n       has the same\
    \ type as the type specified in the type part of the\n       attribute definition.\
    \  Boolean attributes must not include this\n       flag.\n    -  l or L\n   \
    \    Indicates that attribute is literal, i.e.  is not meant to be\n       translated\
    \ into other languages.  If this flag is present, the\n       attribute is not\
    \ considered to be readable by people and should\n       not be translated when\
    \ the template is translated.  See Section 6\n       for more information about\
    \ translation.\n    -  x or X\n       Indicates that clients SHOULD include the\
    \ indicated attribute\n       in requests for services.  Neglecting to include\
    \ this attribute\n       will not sufficiently differentiate the service.  If\
    \ services are\n       obtained without selecting this attribute they will quite\
    \ likely\n       be useless to the client.\n   The values for multivalued attributes\
    \ are an unordered set.\n   Deletions of individual values from a multivalued\
    \ attribute are not\n   supported, and deletion of the attribute causes the entire\
    \ set of\n   values to be removed.\n"
- title: 3.2.6.4. Default Value or List
  contents:
  - "3.2.6.4. Default Value or List\n   If the attribute definition includes a default\
    \ value or, in the case\n   of multivalued attributes, a default values list,\
    \ it begins on the\n   second line of the attribute definition and continues over\
    \ the\n   following lines until a line ends without a comma.  As a consequence,\n\
    \   newlines cannot be embedded in values unless escaped.  See Section\n   2.1.\n\
    \   Particular attribute types and definitions restrict the default\n   values\
    \ list.  Keyword attributes must not have a list of defaults.\n   If an optional\
    \ attribute's definition has an allowed values list,\n   then a default value\
    \ or list is not optional but required.  The\n   motivation for this is that defining\
    \ an attribute with an allowed\n   values list is meant to restrict the values\
    \ the attribute can take\n   on, and requiring a default value or list assures\
    \ that the default\n   value is a member of the given set of allowed values.\n\
    \   The default value or list indicates what values the attribute is\n   given\
    \ if no values are assigned to the attribute when a service is\n   registered.\
    \  If an optional attribute's definition includes no\n   default value or list,\
    \ the following defaults are assigned:\n    1. String values are assigned the\
    \ empty string,\n    2. Integer values are assigned zero,\n    3. Boolean values\
    \ are assigned false,\n    4. Opaque values are assigned a byte array containing\
    \ no values,\n    5. Multi-valued attributes are initialized with a single value.\n\
    \   For purposes of translating nonliteral attributes, the default values\n  \
    \ list is taken to be an ordered set, and translations MUST maintain\n   that\
    \ order.\n"
- title: 3.2.6.5. Descriptive Text
  contents:
  - "3.2.6.5. Descriptive Text\n   Immediately after the default values list, if any,\
    \ a block of\n   descriptive text SHOULD be included in the attribute definition.\n\
    \   This text is meant to be readable by people, and should include a\n   short,\
    \ informative description of the attribute.  It may also provide\n   additional\
    \ information, such as a description of the allowed values.\n   This text is primarily\
    \ designed for display by interactive browsing\n   tools.  The descriptive text\
    \ is set off from the surrounding\n   definition by a crosshatch character (\"\
    #\") at the beginning of the\n   line.  The text should not, however, be treated\
    \ as a comment by\n   parsing and other tools, since it is an integral part of\
    \ the\n   attribute definition.  Within the block of descriptive text, the text\n\
    \   is transferred verbatim, including indentation and line breaks, so\n   any\
    \ formatting is preserved.\n"
- title: 3.2.6.6. Allowed Values List
  contents:
  - "3.2.6.6. Allowed Values List\n   Finally, the attribute definition concludes\
    \ with an optional allowed\n   values list.  The allowed values list, if any,\
    \ follows the\n   descriptive text, or, if the descriptive text is absent, the\
    \ initial\n   values list.  The syntax of the allowed values list is identical\
    \ to\n   that of the initial values list.  The allowed values list is also\n \
    \  terminated by a line that does not end in a comma.  If the allowed\n   values\
    \ list is present, assignment to attributes is restricted to\n   members of the\
    \ list.\n   As with the default values list, the allowed values list is also\n\
    \   considered to be an ordered set for purposes of translation.\n"
- title: 3.2.6.7. Conclusion of An Attribute Definition
  contents:
  - "3.2.6.7. Conclusion of An Attribute Definition\n   An attribute definition concludes\
    \ with a single empty line.\n"
- title: 4. A Process For Standardizing New Service Types
  contents:
  - "4. A Process For Standardizing New Service Types\n   New service types can be\
    \ suggested simply by providing a service type\n   template and a short description\
    \ about how to use the service.  The\n   template MUST have its \"template-version\"\
    \ template attribute set to\n   0.0.\n   MAJOR revision numbers come before the\
    \ '.', MINOR revision numbers\n   come after the '.'.\n   The minor version number\
    \ increments once with each change until it\n   achieves 1.0.  There is no guarantee\
    \ any version of the service\n   template is backward compatible before it reaches\
    \ 1.0.\n   Once a service template has reached 1.0, the definition is \"frozen\"\
    \n   for that version.  New templates must be defined, of course, to\n   refine\
    \ that definition, but the following rules must be followed:\n   A MINOR revision\
    \ number signifies the introduction of a compatible\n   change.  A MAJOR revision\
    \ number signifies the introduction of an\n   incompatible change.  This is formalized\
    \ by the following rules:\n    -  Any new optional attribute defined for the template\
    \ increases\n       the minor version number by one.  All other attributes for\
    \ the\n       version must continue to be supported as before.  A client which\n\
    \       supports 1.x can still use later versions of 1.y (where x<y) as\n    \
    \   it ignores attributes it doesn't know about.\n    -  Adding a required attribute,\
    \ removing support for an attribute\n       or changing definition of an attribute\
    \ requires changing the\n       major version number of a service template.  A\
    \ client application\n       may be unable to make use of this information, or\
    \ it may need\n       to obtain the most recent service template to help the user\n\
    \       interpret the service information.\n   The template is submitted to a\
    \ special mailing list, see section 5.\n   This document must include a 'template\
    \ begins here' and 'template\n   ends here' marking, in text, so that it is trivial\
    \ to cut and paste\n   the template from the submission.\n   The list will be\
    \ available at svrloc-list@iana.org.  Ideally, experts\n   in the implementation\
    \ and deployment of the particular protocol are\n   consulted so as to add or\
    \ delete attributes or change their\n   definition to make the template as useful\
    \ as possible.  The mailing\n   list will be maintained even when the SVRLOC WG\
    \ goes dormant for the\n   purpose of discussing service templates.\n   All published\
    \ versions of the template must be available on-line,\n   including obsolete ones.\n\
    \   Once consensus is achieved, the template should be reissued with\n   possible\
    \ corrections, having its Version number set to 1.0.\n   Templates with version\
    \ numbers below 1.0 are not submitted to the\n   IANA. From that point onwards,\
    \ templates are submitted.  See Section\n   5 for details on how templates are\
    \ submitted to an IANA registry of\n   templates.\n"
- title: 5. IANA Considerations
  contents:
  - "5. IANA Considerations\n   It is the responsibility of the IESG (e.g., Applications\
    \ Area\n   director) to appoint a Designated Expert (see [12].)  Anyone may ask\n\
    \   for clarification of a service template.  This is to solicit input\n   from\
    \ the concerned community.  It is up to the appointed reviewer to\n   determine\
    \ whether clarification requests are satisfied.  It is the\n   reviewer's responsibility\
    \ to see that all reasonable clarification\n   requests are met before the template\
    \ is submitted for inclusion in\n   the IANA registry.\n   When the reviewer has\
    \ determined that the template submission is\n   ready, he or she will submit\
    \ the template to the IANA for inclusion\n   in a registry.  Mailing list participants\
    \ supply input to the process\n   but do not make the decision whether to accept\
    \ a service template.\n   If a dispute arises over the decisions made by the reviewer,\
    \ the\n   matter may be appealed according to normal IETF procedure as\n   described\
    \ for the Standards Track process.\n   The IANA will maintain a mail forwarding\
    \ alias for the work of this\n   list, so that \"svrloc-list@iana.org\" points\
    \ to a mail server supplied\n   by a volunteer organization.\n   The service template\
    \ submission MUST be of the form:\n      Name of submitter:\n      Language of\
    \ service template:\n      Security Considerations:\n      Template Text:\n  \
    \    ----------------------template begins here-----------------------\n     \
    \                               . . .\n      -----------------------template ends\
    \ here------------------------\n   The service template file has a naming convention:\n\
    \   <service-type> \".\" <version-no> \".\" <langtag>\n   Each of these fields\
    \ are defined in Section 2.  They correspond to\n   the values of the template\
    \ fields \"type\", \"template-version\".  The\n   files for the example templates\
    \ in this document (see Section A) are\n   called:\n       \"foo.0.0.en\",\n \
    \      \"Net-Transducer.0.0.en\",\n       \"Net-Transducer:Thermometer.0.0.de\"\
    \ and\n       \"Net-Transducer:Thermomoter.0.0.en\".\n   The reviewer will ensure\
    \ that the template submission to IANA has the\n   correct form and required fields.\n\
    \   No service type template will be accepted for inclusion in the\n   service\
    \ template registry unless the submission includes a security\n   considerations\
    \ section and contact information for the template\n   document author.\n   The\
    \ IANA will maintain a registry containing both the service type\n   templates,\
    \ and the template description document containing the\n   service type template,\
    \ including all previous versions.  The IANA\n   will receive notice to include\
    \ a service template in the registry\n   by email from the reviewer.  This message\
    \ will include the service\n   template itself, which is to be registered.\n \
    \  Neither the reviewer nor the IANA will take any position on claims of\n   copyright\
    \ or trademark issues with regard to templates.\n"
- title: 6. Internationalization Considerations
  contents:
  - "6. Internationalization Considerations\n   The service: URL must be encoded using\
    \ the rules set forth in [5].\n   The character set encoding is limited to specific\
    \ ranges within the\n   US-ASCII character set [4].\n   The template is encoded\
    \ in UTF-8 characters.\n"
- title: 6.1. Language Identification and Translation
  contents:
  - "6.1. Language Identification and Translation\n   The language used in attribute\
    \ strings should be identified supplying\n   a Language Tag [3] in the Service\
    \ Template submission (see Section\n   5).\n   A program can translate a service\
    \ registration from one language to\n   another provided it has both the template\
    \ of the language for the\n   registration and the template of the desired target\
    \ language.  All\n   standardized attributes are in the same order in both templates.\
    \  All\n   non-arbitrary strings, including the descriptive help text, is\n  \
    \ directly translatable from one language to another.  Non-literal\n   attribute\
    \ definitions, attribute identifiers, attribute type names,\n   attribute flags,\
    \ and the boolean constants \"true\" and \"false\" are\n   never translated. \
    \ Translation of attribute identifiers is prohibited\n   because, as with domain\
    \ names, they can potentially be part of a\n   service: URL and therefore their\
    \ character set is restricted.  In\n   addition, as with variable identifiers\
    \ in programming languages, they\n   could become embedded into program code.\n\
    \   All strings used in attribute values are assumed translatable unless\n   explicitly\
    \ defined as being literal, so that best effort translation\n   (see below) does\
    \ not modify strings which are meant to be interpreted\n   by a program, not a\
    \ person.\n   An example of a translated service template is included in Section\
    \ A.\n   There are two ways to go about translation:  standardization and best\n\
    \   effort.\n   When the service type is standardized, more than one document\
    \ can be\n   submitted for review.  One service type description is approved as\
    \ a\n   master, so that when a service type template is updated in one\n   language,\
    \ all the translations (at least eventually) reflect the same\n   semantics.\n\
    \   If no document exists describing the standard translation of the\n   service\
    \ type, a 'best effort' translation for strings should be done.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Service type templates provide information that\
    \ is used to interpret\n   information obtained by the Service Location Protocol.\
    \  If these\n   templates are modified or false templates are distributed, services\n\
    \   may not correctly register themselves, or clients might not be able\n   to\
    \ interpret service information.\n   The service: URLs themselves specify the\
    \ service access point and\n   protocol for a particular service type.  These\
    \ service: URLs could be\n   distributed and indicate the location of a service\
    \ other than that\n   normally want to used.  The Service Location Protocol [10]\n\
    \   distributes service: URLs and has an authentication mechanism that\n   allows\
    \ service: URLs of registered services to be signed and for the\n   signatures\
    \ to be verified by clients.\n   Each Service Template will include a security\
    \ considerations section\n   which will describe security issues with using the\
    \ service scheme for\n   the specific Service Type.\n"
- title: A. Service Template Examples
  contents:
  - "A. Service Template Examples\n   The text in the template example sections is\
    \ to be taken as being a\n   single file.  They are completely fictitious (ie.\
    \  the examples do\n   not represent real services).\n   The FOO example shows\
    \ how to use service templates for an application\n   that has very few attributes.\
    \  Clients request the FOO server where\n   their user data is located by including\
    \ their user name as the value\n   of the user attribute.\n   The Net-Transducer\
    \ example shows how abstract service types are\n   defined and how a corresponding\
    \ concrete instance is defined.  A\n   system might support any of several NetTransducer\
    \ services.  Here we\n   give only one concrete instance of the abstract type.\n\
    \   It is not necessary to register concrete templates for an abstract\n   service\
    \ type if the abstract service type template is completely\n   clear as to what\
    \ possible values can be used as a concrete type, and\n   what their interpretation\
    \ is.\n"
- title: A.1. FOO
  contents:
  - "A.1. FOO\n   The FOO service template submission example follows:\n  Name of\
    \ submitter: \"Erik Guttman\" <Erik.Guttman@sun.com>\n  Language of service template:\
    \ en\n  Security Considerations:\n    If the USER and GROUPS attributes are included\
    \ a\n    possibility exists that the list of identities for users or groups\n\
    \    can be discovered. This information would otherwise be difficult\n    to\
    \ discover.\n  Template Text:\n  -------------------------template begins here-----------------------\n\
    \  template-type=FOO\n  template-version=0.0\n  template-description=\n    The\
    \ FOO service URL provides the location of an FOO service.\n  template-url-syntax=\n\
    \    url-path= ; There is no URL path defined for a FOO URL.\n  users= string\
    \ M L O\n  # The list of all users which the FOO server supports.\n  groups= string\
    \ M L O\n  # The list of all groups which the FOO server supports.\n  --------------------------template\
    \ ends here------------------------\n   This template could be internationalized\
    \ by registering another\n   version, say in German:\n  Name of submitter: \"\
    Erik Guttman\" <Erik.Guttman@sun.com>\n  Language of service template: de\n  Security\
    \ Considerations:\n    Wenn die USER und GROUPS Eigenschaften inbegriffen sind,\n\
    \    besteht die Moeglichkeit, dass die Liste der Identitaeten\n    von Benutzern\
    \ oder Gruppen endeckt werden kann.  Diese\n    Information wurde unter anderen\
    \ Umstaenden schwierig zu\n    entdecken sein.\n  Template Text:\n  -------------------------template\
    \ begins here-----------------------\n  template-type=FOO\n  template-version=0.0\n\
    \  template-description=\n    Der FOO Service URL zeigt die Stelle von einem Foo\
    \ Service an.\n  template-url-syntax=\n    url-path= ; Es gibt keinen fuer den\
    \ FOO URL definierten Pfad.\n  users= string M L O\n  # Die Liste aller Users,\
    \ die der FOO Server unterstuetzt.\n  groups= string M L O\n  # Die Liste aller\
    \ Gruppen, die der FOO Server unterstuetzt.\n  --------------------------template\
    \ ends here------------------------\n   Note that the attribute tags are not translated.\
    \  If translations\n   are desired, the suggested convention for doing so is to\
    \ define a\n   separate attribute called localize-<tag> for each attribute tag\
    \ which\n   is to be localized.  This will aid in displaying the attribute tags\n\
    \   in a human interface.\n   For example, in this case above, the following two\
    \ attributes could\n   be defined:\n  localize-users= string\n  Benutzer\n  localize-groups=\
    \ string\n  Gruppen\n   The attributes (in SLPv2 attribute list format) for a\
    \ service\n   registration of a FOO service based on this template, in German,\n\
    \   could be:\n  (users=Hans,Fritz),(groups=Verwaltung,Finanzbuchhaltung),\n \
    \ (template-type=FOO),(template-version=0.0),(template-description=\n    Der FOO\
    \ Service URL zeigt die Stelle von einem Foo Service an.),\n  (template-url-syntax=\
    \ \\OD url-path= ; Es gibt kein fuer den FOO\n   URL definiert Pfad. \\OD),(localize-users=Benutzer),\n\
    \  (localize-groups=Gruppen)\n   Anyone obtaining these attributes could display\
    \ \"Benutzer=Hans,Fritz\"\n   in a human interface using the included information.\
    \  Note that the\n   template attributes have been included in this registration.\
    \  This is\n   OPTIONAL, but makes it possible to discover which template was\
    \ used\n   to register the service.\n"
- title: 'A.2. Abstract Service Type:  Net-Transducer'
  contents:
  - "A.2. Abstract Service Type:  Net-Transducer\n   An example submission of an abstract\
    \ service type template is:\n  Name of submitter: \"Erik Guttman\" <Erik.Guttman@sun.com>\n\
    \  Language of service template: en\n  Security Considerations:\n    See the security\
    \ considerations of the concrete service types.\n  Template Text:\n  -------------------------template\
    \ begins here-----------------------\n  template-type=Net-Transducer\n  template-version=0.0\n\
    \  template-description=\n    This is an abstract service type.  The purpose of\
    \ the Net-\n    Transducer service type is to organize into a single category\n\
    \    all network enabled Transducers which have certain properties.\n  template-url-syntax=\n\
    \    url-path=  ;  Depends on the concrete service type.\n               ;  See\
    \ these templates.\n  sample-units= string L\n  # The units of sample that the\
    \ Transducer provides, for instance\n  # C (degrees Celsius), V (Volts), kg (Kilograms),\
    \ etc.\n  sample-resolution= string L\n  # The resolution of the Transducer. \
    \ For instance, 10^-3 means\n  # that the Transducer has resolution to 0.001 unit.\n\
    \  sample-rate= integer L\n  # The speed at which samples are obtained per second.\
    \  For\n  # instance 1000 means that one sample is obtained every millisecond.\n\
    \  --------------------------template ends here------------------------\n"
- title: 'A.3. Concrete Service Type:  Net-Transducer:Thermometer'
  contents:
  - "A.3. Concrete Service Type:  Net-Transducer:Thermometer\n   This is another service\
    \ template submission example, supplying a\n   concrete service type corresponding\
    \ to the abstract template above.\n  Name of submitter: \"Erik Guttman\" <Erik.Guttman@sun.com>\n\
    \  Language of service template: en\n  Security Considerations:\n    There is\
    \ no authentication of the Transducer output.  Thus,\n    the Thermometer output\
    \ could easily be spoofed.\n  Template Text:\n  -------------------------template\
    \ begins here-----------------------\n  template-type=service:Net-Transducer:Thermometer\n\
    \  template-version=0.0\n  template-description=\n    The Thermometer is a Net-Transducer\
    \ capable of reading temperature.\n    The data is read by opening a TCP connection\
    \ to one of the ports\n    in the service URL and reading an ASCII string until\
    \ an NULL\n    character is encountered.  The client may continue reading data\
    \ at\n    no faster than the sample-rate, or close the connection.\n  template-url-syntax=\n\
    \    url-path     = \"ports=\" ports-list\n    port-list    = port / port \",\"\
    \ ports\n    port         = 1*DIGIT\n                   ; See the Service URL\
    \ <port> production rule.\n                   ; These are the ports connections\
    \ can be made on.\n  location-description=string\n  # The location where the Thermometer\
    \ is located.\n  operator=string O\n  # The operator to contact to have the Thermometer\
    \ serviced.\n  --------------------------template ends here------------------------\n"
- title: 'A.4. service: URLs and SLP'
  contents:
  - "A.4. service: URLs and SLP\n   A user with an FOO enabled calendar application\
    \ should not be\n   bothered with knowing the address of their FOO server.  The\
    \ calendar\n   client program can use SLP to obtain the FOO service:  URL\n  \
    \ automatically, say 'service:foo://server1.nosuch.org', by issuing a\n   Service\
    \ Request.  In the event that this FOO server failed, the\n   Calendar client\
    \ can issue the same service request again to find the\n   backup FOO server,\
    \ say 'service:foo://server2.nosuch.org'.  In both\n   cases, the service: URL\
    \ conforms to the FOO service template as do\n   the associated attributes (user\
    \ and group.)\n   A network thermometer based on the above template could be advertised\n\
    \   with the SLPv2 attribute list:\n   URL        = service:net-transducer:thermometer://v33.test/ports=3211\n\
    \   Attributes = (location-description=Missile bay 32),\n    (operator=Joe Agent),\
    \ (sample-units=C),\n    (sample-resolution=10^-1),(sample-rate=10),\n    (template-type=service:net-transducer:thermometer),\n\
    \    (template-version=0.0),(template-description=\n     The Thermometer is a\
    \ Net-Transducer capable of reading temperature.\n     The data is read by opening\
    \ a TCP connection to one of the ports\n     in the service URL and reading an\
    \ ASCII string until an NULL\n     character is encountered.  The client may continue\
    \ reading data at\n     no faster than the sample-rate, or close the connection.),\n\
    \    (template-url-syntax= \\0D \"ports=\" port-list \\OD\n     port-list = port\
    \ / port \",\" ports \\OD\n     port = 1*DIGIT \\OD\n     ; See the Service URL\
    \ <port> production rule. \\OD\n     ; These are the ports connections can be\
    \ made on.\\OD)\n   This might be very useful for a technician who wanted to find\
    \ a\n   Thermometers in Missile bay 32, for example.\n   Note that the template\
    \ attributes are advertised.  The\n   template-url-syntax value requires explicit\
    \ escaped CR characters so\n   that the ABNF syntax is correct.\n"
- title: B. Acknowledgments
  contents:
  - "B. Acknowledgments\n   Thanks to Michael Day and Leland Wallace for assisting\
    \ with the IPX\n   and AppleTalk address syntax portions.  Ryan Moats provided\
    \ valuable\n   feedback throughout the writing of this document.\n"
- title: C. References
  contents:
  - "C. References\n    [1] Protocol and service names, October 1994.\n        ftp://ftp.isi.edu/in-notes/iana/assignments/service-names.\n\
    \    [2] Port numbers, July 1997.\n        ftp://ftp.isi.edu/in-notes/iana/assignments/port-numbers.\n\
    \    [3] Alvestrand, H., \"Tags for the Identification of Languages\",\n     \
    \   RFC 1766, March 1995.\n    [4] ANSI.  Coded Character Set -- 7-bit American\
    \ Standard code for\n        Information Interchange.  X3.4-1986, 1986.\n    [5]\
    \ Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform\n        Resource Identifiers\
    \ (URI): Generic Syntax\", RFC 2396,\n        August 1998.\n    [6] Bradner, S.,\
    \ \"Key Words for Use in RFCs to Indicate\n        Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n    [7] Apple Computer.  Inside Macintosh.  Addison-Wesley,\
    \ 1993.\n    [8] Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n    \
    \    Specifications: ABNF\", RFC 2234, November 1997.\n    [9] S. Gursharan, R.\
    \ Andrews, and A. Oppenheimer.  Inside AppleTalk.\n        Addison-Wesley, 1990.\n\
    \   [10] Guttman, E., Perkins, C., Veizades, J. and M. Day, \"Service\n      \
    \  Location Protocol Version 2\", RFC 2608, June 1999.\n   [11] Myers, J., \"\
    Simple Authentication and Security Layer (SASL)\",\n        RFC 2222, October\
    \ 1997.\n   [12] Narten, T. and H. Alvestrand, \"Guidelines for Writing\n    \
    \    an IANA Considerations Section in RFCs, BCP 26, RFC 2434,\n        October\
    \ 1998\n   [13] Newman C. and J. Myers, \"ACAP -- Application Configuration\n\
    \        Access Protocol\", RFC 2244, November 1997.\n   [14] Inc Novell.  IPX\
    \ RIP and SAP Router Specification.  Part Number\n        107-000029-001, Version\
    \ 1.30, May 1996.\n   [15] Veizades, J., Guttman, E., Perkins, C. and S. Kaplan,\
    \ \"Service\n        Location Protocol\", RFC 2165, July 1997.\n   [16] Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO 10646\",\n        RFC 2279, January\
    \ 1998.\n"
- title: D. Authors' Addresses
  contents:
  - "D. Authors' Addresses\n   Questions about this memo can be directed to:\n   Erik\
    \ Guttman\n   Sun Microsystems\n   Bahnstr.  2\n   74915 Waibstadt\n   Germany\n\
    \   Phone: +49 7263 911484\n   Fax:   +1 650 786 5992\n   EMail: erik.guttman@sun.com\n\
    \   Charles E. Perkins\n   Sun Microsystems\n   15 Network Circle\n   Menlo Park,\
    \ CA  94303\n   USA\n   Phone: +1 650 786 6464\n   Fas:   +1 650 786 6445\n  \
    \ EMail: cperkins@sun.com\n   James Kempf\n   Sun Microsystems\n   15 Network\
    \ Circle\n   Menlo Park, CA  94303\n   USA\n   Phone: +1 650 786 5890\n   Fax:\
    \   +1 650 786 6445\n   EMail: james.kempf@sun.com\n"
- title: E. Full Copyright Statement
  contents:
  - "E. Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\"\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
