- title: __initial_text__
  contents:
  - '           A Protocol for Provisioning Resource Certificates

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a framework for certificate management\n \
    \  interactions between an Internet Number Resource issuer (\"issuer\")\n   and\
    \ an Internet Number Resource recipient (\"subject\") through the\n   specification\
    \ of a protocol for interaction between the two parties.\n   The protocol supports\
    \ the transmission of requests from the subject,\n   and corresponding responses\
    \ from the issuer encompassing the actions\n   of certificate issuance, certificate\
    \ revocation, and certificate\n   status information reports.  This protocol is\
    \ intended to be limited\n   to the application of Internet Number Resource Certificate\
    \ management\n   and is not intended to be used as part of a more general certificate\n\
    \   management framework.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6492.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Scope ...........................................................4\n   3.\
    \ Protocol Specification ..........................................4\n      3.1.\
    \ CMS Profile ................................................5\n           3.1.1.\
    \ SignedData Content Type .............................5\n           3.1.2. CMS\
    \ Object Validation ..............................10\n           3.1.3. ASN.1\
    \ Specification of the CMS Signed Object .......12\n      3.2. Common Message\
    \ Format .....................................14\n      3.3. Control - Resource\
    \ Class Query ............................16\n           3.3.1. Resource Class\
    \ List Query ..........................16\n           3.3.2. Resource Class List\
    \ Response .......................17\n      3.4. CA - Certificate Issuance .................................21\n\
    \           3.4.1. Certificate Issuance Request .......................21\n  \
    \         3.4.2. Certificate Issuance Response ......................24\n    \
    \  3.5. Certificate Revocation ....................................24\n      \
    \     3.5.1. Certificate Revocation Request .....................25\n        \
    \   3.5.2. Certificate Revocation Response ....................26\n      3.6.\
    \ Request-Not-Performed Response ............................26\n      3.7. XML\
    \ Schema ................................................27\n   4. Security Considerations\
    \ ........................................29\n   5. IANA Considerations ............................................30\n\
    \      5.1. application/rpki-updown ...................................30\n  \
    \ 6. Acknowledgements ...............................................30\n   7.\
    \ References .....................................................31\n      7.1.\
    \ Normative References ......................................31\n      7.2. Informative\
    \ References ....................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a framework for certificate management\n\
    \   interactions between an Internet Number Resource issuer (\"issuer\")\n   and\
    \ an Internet Number Resource recipient (\"subject\") through the\n   specification\
    \ of a protocol for interaction between the two parties.\n   The protocol supports\
    \ the transmission of requests from the subject,\n   and corresponding responses\
    \ from the issuer encompassing the actions\n   of certificate issuance, certificate\
    \ revocation, and certificate\n   status information reports.  This protocol is\
    \ intended to be limited\n   to the application of Internet Number Resource certificate\
    \ management\n   and is not intended to be used as part of a more general certificate\n\
    \   management framework.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   Terms used in this document are:\n   \"Internet Number\
    \ Resource\"  (or \"resource\") used in the context of\n      this document to\
    \ refer to Autonomous System (AS) numbers, IP\n      version 4 addresses, and\
    \ IP version 6 addresses.\n   \"issuer\"  used in the context of this document\
    \ as an entity\n      undertaking the role of resource issuer.  An \"issuer\"\
    \ is a\n      Certification Authority (CA), and can issue resource certificates.\n\
    \   \"subject\"  used in the context of this document as an entity\n      undertaking\
    \ the role of resource recipient who is the subject of a\n      resource certificate.\
    \  A \"subject\" may be issued with a CA-enabled\n      certificate, allowing\
    \ the entity to also assume the role of an\n      \"issuer\".\n   \"resource class\"\
    \  a resource class refers to a collection of\n      resources that can be certified\
    \ in a single resource certificate\n      by an issuer.\n   \"server\"  in the\
    \ context of this client/server protocol\n      specification, the issuer assumes\
    \ the role of the \"server\".\n   \"client\"  in the context of this client/server\
    \ protocol\n      specification, the subject assumes the role of the \"client\"\
    .\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  Scope
  contents:
  - "2.  Scope\n   This Resource Public Key Infrastructure (RPKI) certificate\n  \
    \ provisioning protocol defines a basic set of interactions that allow\n   a subject\
    \ to request certificate issuance, revocation, and status\n   information from\
    \ the issuer, and for an issuer to maintain an issued\n   certificate set that\
    \ is aligned to the allocation records relating to\n   each subject.  The issuer's\
    \ resource allocation database is the\n   authoritative source of what resource\
    \ allocations the issuer may\n   certify for a subject.\n   A resource recipient\
    \ (subject) may also undertake the role of a\n   resource issuer (issuer).\n \
    \  This protocol specification does not encompass:\n   o  signing of objects with\
    \ keys that are certified by resource\n      certificates, nor the issuance of\
    \ end-entity certificates.\n   o  the specification of interaction with the issuer's\
    \ resource\n      allocation database, nor the specification of a protocol to\
    \ manage\n      the publication repository.\n   o  the interactions between client\
    \ and server that establish\n      identities, or the exchange of the certificates\
    \ and validation\n      Public Key Infrastructure (PKI) contexts used in the Cryptographic\n\
    \      Message Syntax (CMS) [RFC5652] message exchange.\n   o  the interactions\
    \ between client and server that allow respective\n      local CMS signing time\
    \ values to be reset to mutually recognized\n      values.\n"
- title: 3.  Protocol Specification
  contents:
  - "3.  Protocol Specification\n   This RPKI certificate provisioning protocol is\
    \ expressed as a simple\n   request/response interaction, where the client passes\
    \ a request to\n   the server, and the server generates a corresponding response.\n\
    \   The protocol is implemented as an exchange of messages.\n   Messages are passed\
    \ over an HTTP [RFC2616] end-to-end connection.  A\n   message exchange commences\
    \ with the client initiating an HTTP POST\n   with content type of \"application/rpki-updown\"\
    \ and the message object\n   as the body.  The server's response is similarly\
    \ an HTTP response,\n   with the message object carried as the body of the response\
    \ and with\n   a response content type of \"application/rpki-updown\".  The content\
    \ of\n   the POST and the server's response are \"well-formed\" CMS [RFC5652]\n\
    \   objects, encoded using the Distinguished Encoding Rules (DER) for\n   ASN.1\
    \ [X.509-88], formatted in accordance with the CMS profile\n   specified in the\
    \ following section.  CMS is used as the signing\n   format to sign the message\
    \ object.  The CMS message includes an end-\n   entity (EE) certificate that is\
    \ to be used to validate the CMS\n   digital signature  (see Section 3.1.1.4);\
    \ the certificate chain that\n   is used to validate the EE certificate MAY be\
    \ included in the CMS\n   message, and if it is not present it is assumed to have\
    \ been\n   communicated between the two entities, through mechanisms not defined\n\
    \   in this specification.\n   The protocol's request/response interaction is\
    \ assumed to be\n   reliable, in that all requests MUST generate a matching response.\n\
    \   The protocol requires sequential operation for each distinct client,\n   where\
    \ the server MUST NOT accept a client's request unless it has\n   generated and\
    \ sent a response to the client's previous request.\n   Attempts by the client\
    \ to initiate multiple requests in parallel\n   (i.e., multiple concurrent requests\
    \ with a common sender attribute\n   (see Section 3.2) in the request) MUST be\
    \ detected by the server and\n   rejected with an error response (i.e., an error\
    \ code 1101 response).\n"
- title: 3.1.  CMS Profile
  contents:
  - "3.1.  CMS Profile\n   The format of the CMS object is:\n         ContentInfo\
    \ ::= SEQUENCE {\n           contentType ContentType,\n           content [0]\
    \ EXPLICIT ANY DEFINED BY contentType }\n         ContentType ::= OBJECT IDENTIFIER\n\
    \   The content-type is the signed-data type of id-data, namely\n   id-signedData,\
    \ OID = 1.2.840.113549.1.7.2.  [RFC5652]\n"
- title: 3.1.1.  SignedData Content Type
  contents:
  - "3.1.1.  SignedData Content Type\n   According to the CMS standard [RFC5652],\
    \ signed-data content types\n   are the ASN.1 type SignedData:\n    SignedData\
    \ ::= SEQUENCE {\n        version CMSVersion,\n        digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \        encapContentInfo EncapsulatedContentInfo,\n        certificates [0] IMPLICIT\
    \ CertificateSet OPTIONAL,\n        crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\n\
    \        signerInfos SignerInfos }\n      DigestAlgorithmIdentifiers ::= SET OF\
    \ DigestAlgorithmIdentifier\n      SignerInfos ::= SET OF SignerInfo\n   Additionally,\
    \ the SignerInfos set MUST contain only a single\n   SignerInfo object.\n"
- title: 3.1.1.1.  version
  contents:
  - "3.1.1.1.  version\n   The version is the syntax version number.  It MUST be 3,\n\
    \   corresponding to the signerInfo structure having version number 3.\n"
- title: 3.1.1.2.  digestAlgorithms
  contents:
  - "3.1.1.2.  digestAlgorithms\n   The digestAlgorithms set contains the Object Identifiers\
    \ (OID)s of\n   the digest algorithm(s) used in signing the encapsulated content.\n\
    \   This set MUST contain exactly one digest algorithm OID, and the OID\n   MUST\
    \ be selected from those specified in [RFC6485].\n"
- title: 3.1.1.3.  encapContentInfo
  contents:
  - "3.1.1.3.  encapContentInfo\n   encapContentInfo is the signed content, consisting\
    \ of a content type\n   identifier and the content itself.  The encapContentInfo\
    \ represents\n   the payload of the RPKI certificate provisioning protocol.\n\
    \   EncapsulatedContentInfo ::= SEQUENCE {\n      eContentType ContentType,\n\
    \      eContent [0] EXPLICIT OCTET STRING OPTIONAL }\n   ContentType ::= OBJECT\
    \ IDENTIFIER\n"
- title: 3.1.1.3.1.  eContentType
  contents:
  - "3.1.1.3.1.  eContentType\n   The eContentType for the RPKI Protocol Message object\
    \ is defined as\n   id-ct-xml, and has the numerical value of 1.2.840.113549.1.9.16.1.28.\n\
    \      id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n      \
    \                          rsadsi(113549) pkcs(1) pkcs9(9) 16 }\n      id-ct OBJECT\
    \ IDENTIFIER ::= { id-smime 1 }\n      id-ct-xml OBJECT IDENTIFIER ::= { id-ct\
    \ 28 }\n"
- title: 3.1.1.3.2.  eContent
  contents:
  - "3.1.1.3.2.  eContent\n   The content of an RPKI XML Protocol Object consists\
    \ of a single\n   protocol message, structured according to a defined XML schema,\
    \ as\n   defined in subsequent sections of this document.  The eContent field\n\
    \   of the CMS object is formally defined using ASN.1 as:\n      RPKIXMLProtocolObject\
    \ ::= OCTET STRING -- XML encoded message\n"
- title: 3.1.1.4.  certificates
  contents:
  - "3.1.1.4.  certificates\n   This field MUST be present and MUST contain the single\
    \ EE certificate\n   of the key pair whose private key value was used to sign\
    \ the CMS.\n   This MUST NOT be an RPKI certificate, and SHOULD be a certificate\n\
    \   that is recognized to attest to the identity of the party that\n   created\
    \ the CMS object.\n   This field MAY contain CA certificates that a relying party\
    \ MAY use\n   to validate the EE certificate.\n"
- title: 3.1.1.5.  crls
  contents:
  - "3.1.1.5.  crls\n   This field MUST be present.  The contents of the field are\
    \ specified\n   in [RFC5652].  The current Certificate Revocation List (CRL) issued\n\
    \   by the same CA that issued the EE certificate of the key pair whose\n   private\
    \ key value was used to sign the CMS MUST be present in this\n   field.  This\
    \ field MAY contain CRLs issued by other CAs covering CA\n   certificates included\
    \ in the certificates field of the CMS object\n   (see Section 3.1.1.4).  This\
    \ field MUST NOT contain any other CRLs.\n"
- title: 3.1.1.6.  SignerInfo
  contents:
  - "3.1.1.6.  SignerInfo\n   SignerInfo is defined in CMS as:\n   SignerInfo ::=\
    \ SEQUENCE {\n     version CMSVersion,\n     sid SignerIdentifier,\n     digestAlgorithm\
    \ DigestAlgorithmIdentifier,\n     signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\n\
    \     signatureAlgorithm SignatureAlgorithmIdentifier,\n     signature SignatureValue,\n\
    \     unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\n"
- title: 3.1.1.6.1.  version
  contents:
  - "3.1.1.6.1.  version\n   The version number MUST be 3, corresponding with the\
    \ choice of\n   SubjectKeyIdentifier for the sid.\n"
- title: 3.1.1.6.2.  sid
  contents:
  - "3.1.1.6.2.  sid\n   The sid is defined as:\n   SignerIdentifier ::= CHOICE {\n\
    \     issuerAndSerialNumber IssuerAndSerialNumber,\n     subjectKeyIdentifier\
    \ [0] SubjectKeyIdentifier }\n   In this profile, the sid MUST be the SubjectKeyIdentifier\
    \ that\n   appears in the EE certificate carried in the CMS certificates field.\n"
- title: 3.1.1.6.3.  digestAlgorithm
  contents:
  - "3.1.1.6.3.  digestAlgorithm\n   The digestAlgorithm MUST consist of the OID of\
    \ a digest algorithm\n   that conforms to the RPKI Algorithms and Key Size Profile\n\
    \   specification [RFC6485].\n"
- title: 3.1.1.6.4.  signedAttrs
  contents:
  - "3.1.1.6.4.  signedAttrs\n   The signedAttrs field is defined as:\n      SignedAttributes\
    \ ::= SET SIZE (1..MAX) OF Attribute\n      UnsignedAttributes ::= SET SIZE (1..MAX)\
    \ OF Attribute\n      Attribute ::= SEQUENCE {\n        attrType OBJECT IDENTIFIER,\n\
    \        attrValues SET OF AttributeValue }\n      AttributeValue ::= ANY\n  \
    \ The signedAttr element MUST be present and MUST include the content-\n   type\
    \ and message-digest attributes [RFC5652].  If either the signing-\n   time [RFC5652]\
    \ attribute or the binary-signing-time attribute\n   [RFC6019], or both attributes,\
    \ are present, they MUST also be\n   included as the SignedAttributes.  Other\
    \ signed attributes MUST NOT\n   be included.\n   The signedAttr MUST include\
    \ only a single instance of any particular\n   attribute.  Additionally, even\
    \ though the syntax allows for a SET OF\n   AttributeValue, in this profile, the\
    \ attrValues MUST consist of only\n   a single AttributeValue.\n"
- title: 3.1.1.6.4.1.  Content-Type Attribute
  contents:
  - "3.1.1.6.4.1.  Content-Type Attribute\n   The content-type attribute MUST be present.\
    \  The attrType OID for the\n   content-type attribute is 1.2.840.113549.1.9.3.\n\
    \      id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n        \
    \  us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }\n      ContentType ::= OBJECT IDENTIFIER\n\
    \   The attrValues for the content-type attribute MUST match the\n   eContentType\
    \ in the EncapsulatedContentInfo.  This OID value is\n   defined as id-ct-xml\
    \ and has the numerical value of\n   1.2.840.113549.1.9.16.1.28.\n"
- title: 3.1.1.6.4.2.  Message-Digest Attribute
  contents:
  - "3.1.1.6.4.2.  Message-Digest Attribute\n   The message-digest attribute MUST\
    \ be present.  The attrType OID for\n   the message-digest attribute is 1.2.840.113549.1.9.4.\n\
    \      id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n      \
    \    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4 }\n      MessageDigest ::= OCTET\
    \ STRING\n   The attrValues for the message-digest attribute contains the output\n\
    \   of the digest algorithm applied to the content being signed, as\n   specified\
    \ in Section 5.4 of [RFC5652].\n"
- title: 3.1.1.6.4.3.  Signing-Time Attribute
  contents:
  - "3.1.1.6.4.3.  Signing-Time Attribute\n   The signing-time attribute MAY be present.\
    \  The attrType OID for the\n   signing-time attribute is 1.2.840.113549.1.9.5.\n\
    \      id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n        \
    \  us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }\n      SigningTime ::= Time\n \
    \     Time ::= CHOICE {\n        utcTime UTCTime,\n        generalizedTime GeneralizedTime\
    \ }\n   The signing-time attribute specifies the time, based on the local\n  \
    \ system clock, when the digital signature was applied to the content.\n   Guidelines\
    \ regarding the use of UTCTime and GeneralizedTime in the\n   signing-time attribute\
    \ can be found in Section 11.3 of [RFC5652].\n   Either one of the signing-time\
    \ attribute or the binary-signing-time\n   attribute, or both attributes, MUST\
    \ be present.  If both the signing-\n   time and binary-signing-time attributes\
    \ are present, they MUST both\n   represent the same underlying time value.\n"
- title: 3.1.1.6.4.4.  Binary-Signing-Time Attribute
  contents:
  - "3.1.1.6.4.4.  Binary-Signing-Time Attribute\n   The binary-signing-time attribute\
    \ MAY be present.  The attrType OID\n   for the binary-signing-time attribute\
    \ is 1.2.840.113549.1.9.16.2.46.\n      id-aa-binarySigningTime OBJECT IDENTIFIER\
    \ ::= { iso(1)\n          member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n\
    \          smime(16) aa(2) 46 }\n      BinarySigningTime ::= BinaryTime\n    \
    \  BinaryTime ::= INTEGER (0..MAX)\n   The binary-signing-time attribute specifies\
    \ the time, based on the\n   local system clock, when the digital signature was\
    \ applied to the\n   content.  The precise definition of the binary-signing-time\
    \ attribute\n   can be found at [RFC6019].\n   Either one of the signing-time\
    \ or the binary-signing-time attributes,\n   or both attributes, MUST be present.\
    \  If both the signing-time and\n   binary-signing-time attributes are present,\
    \ they MUST both represent\n   the same underlying time value.\n"
- title: 3.1.1.6.5.  signatureAlgorithm Attribute
  contents:
  - "3.1.1.6.5.  signatureAlgorithm Attribute\n   The signatureAlgorithm MUST conform\
    \ to the RPKI Algorithms and Key\n   Size Profile specification [RFC6485].\n"
- title: 3.1.1.6.6.  signature Attribute
  contents:
  - "3.1.1.6.6.  signature Attribute\n   The signature value is defined as:\n    \
    \   SignatureValue ::= OCTET STRING\n   The signature characteristics are defined\
    \ by the digest and signature\n   algorithms.\n"
- title: 3.1.1.6.7.  UnsignedAttributes Attribute
  contents:
  - "3.1.1.6.7.  UnsignedAttributes Attribute\n   unsignedAttrs MUST be omitted.\n"
- title: 3.1.2.  CMS Object Validation
  contents:
  - "3.1.2.  CMS Object Validation\n   Before a recipient of a CMS signed object can\
    \ use the content of the\n   object, the recipient MUST validate the signed object\
    \ by verifying\n   that all of the following conditions hold.  A recipient may\
    \ perform\n   these checks in any order.\n   1.  The CMS object is well formed,\
    \ such that the signed object syntax\n       complies with this specification.\
    \  In particular, that each of\n       the following is true:\n       a.  The\
    \ content-type of the CMS object is SignedData (OID\n           1.2.840.113549.1.7.2)\n\
    \       b.  The version of the SignedData object is 3.\n       c.  The certificates\
    \ field in the SignedData object is present\n           and contains one EE certificate,\
    \ the SubjectKeyIdentifier\n           field of which matches the sid field of\
    \ the SignerInfo\n           object.\n       d.  The crls field in the SignedData\
    \ object is present.\n       e.  The version of the SignerInfo is 3.\n       f.\
    \  The signedAttrs field in the SignerInfo object is present and\n           contains\
    \ one each of the content-type attribute (OID\n           1.2.840.113549.1.9.3),\
    \ the message-digest attribute (OID\n           1.2.840.113549.1.9.4), and either\
    \ or both of a single\n           instance of the signing-time attribute (OID\n\
    \           1.2.840.113549.1.9.5) and the binary-signing-time attribute\n    \
    \       (OID 1.2.840.113549.1.9.16.2.46), and no other attributes.\n       g.\
    \  The eContentType in the EncapsulatedContentInfo is an OID\n           that\
    \ matches the attrValue in the content-type attribute and\n           has the\
    \ attrValue of id-ct-xml.\n       h.  The unsignedAttrs field in the SignerInfo\
    \ object is omitted.\n       i.  If both the signing-time attribute and the binary-signing-\n\
    \           time attribute are present, then their values represent the\n    \
    \       same time.\n       j.  The digestAlgorithm in the SignedData and SignerInfo\
    \ objects\n           conforms to the RPKI Algorithms and Key Size Profile\n \
    \          specification [RFC6485].\n       k.  The signatureAlgorithm in the\
    \ SignerInfo object conforms to\n           the RPKI Algorithms and Key Size Profile\
    \ specification\n           [RFC6485].\n       l.  The signed object is DER encoded.\n\
    \   2.  The public key of the EE certificate (contained within the CMS\n     \
    \  signed-data object) can be used to successfully verify the\n       signature\
    \ on the signed object.\n   3.  The EE certificate (contained within the CMS signed-data\
    \ object)\n       is a valid EE certificate.  In particular, there exists a valid\n\
    \       certification path from a trust anchor selected by the recipient\n   \
    \    to this EE certificate.\n   4.  At the current time, the EE certificate is\
    \ not revoked.  This can\n       be determined by confirming that the CRL contained\
    \ in the crls\n       field of the CMS signed data object is a current valid CRL,\n\
    \       issued by the same CA that issued the EE certificate, and the CRL\n  \
    \     does not list the serial number of the EE certificate.\n   5.  The time\
    \ represented by the signing-time attribute or the binary-\n       signing-time\
    \ attribute is greater than or equal to the time value\n       passed in previously\
    \ valid CMS objects that were passed from the\n       same originator to this\
    \ recipient.  This signing time value MAY\n       lie within the Validity Time\
    \ of the EE certificate, but the EE\n       certificate SHOULD NOT be considered\
    \ invalid if this is not the\n       case when all other checks listed here are\
    \ passed.\n"
- title: 3.1.3.  ASN.1 Specification of the CMS Signed Object
  contents:
  - "3.1.3.  ASN.1 Specification of the CMS Signed Object\n   The following is the\
    \ ASN.1 specification of the CMS signed object\n   used by the RPKI provisioning\
    \ protocol.\n      ContentInfo ::= SEQUENCE {\n        contentType ContentType,\n\
    \        content [0] EXPLICIT ANY DEFINED BY contentType }\n      ContentType\
    \ ::= OBJECT IDENTIFIER\n      id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\
    \ us(840)\n                                rsadsi(113549) pkcs(1) pkcs9(9) 16\
    \ }\n      id-ct OBJECT IDENTIFIER ::= { id-smime 1 }\n      id-ct-xml OBJECT\
    \ IDENTIFIER ::= { id-ct 28 }\n      RPKIXMLProtocolObject ::= OCTET STRING --\
    \ XML encoded message\n      id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \                         us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n      SignedData\
    \ ::= SEQUENCE {\n        version CMSVersion,\n        digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \        encapContentInfo EncapsulatedContentInfo,\n        certificates [0] IMPLICIT\
    \ CertificateSet OPTIONAL,\n        crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\n\
    \        signerInfos SignerInfos }\n      DigestAlgorithmIdentifiers ::= SET OF\
    \ DigestAlgorithmIdentifier\n      SignerInfos ::= SET OF SignerInfo\n      SignerInfo\
    \ ::= SEQUENCE {\n        version CMSVersion,\n        sid SignerIdentifier,\n\
    \        digestAlgorithm DigestAlgorithmIdentifier,\n        signedAttrs [0] IMPLICIT\
    \ SignedAttributes OPTIONAL,\n        signatureAlgorithm SignatureAlgorithmIdentifier,\n\
    \        signature SignatureValue,\n        unsignedAttrs [1] IMPLICIT UnsignedAttributes\
    \ OPTIONAL }\n      SignerIdentifier ::= CHOICE {\n        issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n        subjectKeyIdentifier [0] SubjectKeyIdentifier\
    \ }\n      SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\n      Attribute\
    \ ::= SEQUENCE {\n      attrType OBJECT IDENTIFIER,\n      attrValues SET OF AttributeValue\
    \ }\n      AttributeValue ::= ANY\n      SignatureValue ::= OCTET STRING\n   \
    \   id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840)\
    \ rsadsi(113549) pkcs(1) pkcs9(9) 3 }\n      ContentType ::= OBJECT IDENTIFIER\n\
    \      id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n      \
    \    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4 }\n      MessageDigest ::= OCTET\
    \ STRING\n      id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }\n      SigningTime ::=\
    \ Time\n      Time ::= CHOICE {\n        utcTime UTCTime,\n        generalizedTime\
    \ GeneralizedTime }\n      id-aa-binarySigningTime OBJECT IDENTIFIER ::= { iso(1)\n\
    \          member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n          smime(16)\
    \ aa(2) 46 }\n      BinarySigningTime ::= BinaryTime\n      BinaryTime ::= INTEGER\
    \ (0..MAX)\n"
- title: 3.2.  Common Message Format
  contents:
  - "3.2.  Common Message Format\n   The XML template for all messages is informally\
    \ described as follows\n   (the RELAX NG compact form schema that formally describes\
    \ the\n   protocol message objects is contained in Section 3.7):\n   ---------------------------------------------------------------\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <message xmlns=\"http://www.apnic.net/specs/rescerts/up-down/\"\
    \n            version=\"1\"\n            sender=\"sender name\"\n            recipient=\"\
    recipient name\"\n            type=\"message type\">\n   [payload]\n   </message>\n\
    \   ---------------------------------------------------------------\n   version:\n\
    \      the value of this attribute is the version of this protocol.  This\n  \
    \    document describes version 1.\n   sender:\n      the value of this attribute\
    \ is the agreed name of the message\n      sender, as determined between the client\
    \ and the server by prior\n      arrangement.\n   recipient:\n      the value\
    \ of this attribute is the agreed name of the message\n      recipient, as determined\
    \ between the client and the server by\n      prior arrangement.\n   type:\n \
    \     the possible values of this attribute are \"list\", \"list_response\",\n\
    \      \"issue\", \"issue_response\", \"revoke\", \"revoke_response\", and\n \
    \     \"error_response\".\n   Conforming parsers MUST reject any document with\
    \ a version number\n   they do not understand or with any elements or attributes\
    \ they do not\n   understand.  Servers must generate an error response when receiving\n\
    \   such a request.  Clients should generate an error when receiving such\n  \
    \ a response.\n   The encapsulated content of the CMS wrapping is an XML document.\
    \  The\n   remainder of this protocol specification omits this CMS wrapper and\n\
    \   only discusses the XML document.\n   Messages are checked using the following\
    \ tests:\n   1.  Check that the CMS is well-formed (see test 1 of Section 3.1.2).\n\
    \   2.  Check that the XML is well-formed.\n   3.  Check that the XML sender and\
    \ recipient attributes reference a\n       known client and this server's system\
    \ respectively for a query,\n       and the previously addressed server and this\
    \ client for a\n       response.\n   4.  Verify the digital signature using the\
    \ public key provided in the\n       certificate carried in the CMS wrapper (see\
    \ test 2 of Section\n       3.1.2).\n   5.  Validate the CMS-provided certificate\
    \ using the PKI that has been\n       determined by prior arrangement between\
    \ the client and server\n       (see test 3 of Section 3.1.2).\n   6.  Check that\
    \ the signing time of the CMS is equal to or greater\n       than the signing\
    \ time provided in the most recent previous\n       message that this recipient\
    \ has received from this sender (see\n       test 4 of Section 3.1.2).\n   7.\
    \  Check that the value of the version number of the message is 1.\n   These checks\
    \ SHOULD be applied in the order specified here.\n   Any errors encountered while\
    \ checking items 1 through 7 MUST cause a\n   server to generate an \"HTTP 400\
    \ Bad Request\" response to the HTTP\n   POST operation.  An error in step 7 MUST\
    \ cause the server to generate\n   a \"Request-Not-Performed\" error response.\
    \  Any errors encountered in\n   these tests by a client SHOULD cause the client\
    \ to generate an error.\n   A server MAY perform flow control on the rate of processed\
    \ requests.\n   Requests not processed due to such a flow control constraint MAY\n\
    \   cause the server to generate an \"HTTP 503 Service Unavailable\"\n   response.\
    \  An HTTP 503 response MAY include an HTTP Retry-After:\n   header as a hint\
    \ to the client.\n"
- title: 3.3.  Control - Resource Class Query
  contents:
  - "3.3.  Control - Resource Class Query\n   This query is used for a client to query\
    \ a server for a list of all\n   resources that have been allocated or assigned\
    \ by the server to the\n   client.  In addition, the server's response will contain\
    \ a copy of\n   the current certificates issued by the server's CA where this\
    \ client\n   is the certificate's subject.\n"
- title: 3.3.1.  Resource Class List Query
  contents:
  - "3.3.1.  Resource Class List Query\n   The value of the message \"type\" message\
    \ attribute for this query is:\n    type=\"list\"\n    ---------------------------------------------------------------\n\
    \    Payload:\n    [No message payload is defined for this query]\n    ---------------------------------------------------------------\n"
- title: 3.3.2.  Resource Class List Response
  contents:
  - "3.3.2.  Resource Class List Response\n   The value of the message \"type\" element\
    \ for this response is:\n      type=\"list_response\"\n   ---------------------------------------------------------------\n\
    \   Payload:\n    <class class_name=\"class name\"\n        cert_url=\"url\"\n\
    \        resource_set_as=\"as resource set\"\n        resource_set_ipv4=\"ipv4\
    \ resource set\"\n        resource_set_ipv6=\"ipv6 resource set\"\n        resource_set_notafter=\"\
    datetime\"\n        suggested_sia_head=\"[directory uri]\" >\n        <certificate\
    \ cert_url=\"url\"\n            req_resource_set_as=\"as resource set\"\n    \
    \        req_resource_set_ipv4=\"ipv4 resource set\"\n            req_resource_set_ipv6=\"\
    ipv6 resource set\" >\n        [certificate]\n        </certificate>\n       \
    \ ...\n        (repeated for each current certificate where the client\n     \
    \    is the certificate's subject)\n        <issuer>[issuer's certificate]</issuer>\n\
    \        </class>\n    ...\n    (repeated for each of the issuer's resource class\
    \ where the\n     client has been allocated resources)\n   ---------------------------------------------------------------\n\
    \   Where the client has been allocated resources from multiple resource\n   classes,\
    \ the response MUST contain multiple class elements that\n   correspond to the\
    \ complete set of the issuer's resource classes where\n   the client holds allocated\
    \ resources.  Those issuer's resource\n   classes where the client holds no allocated\
    \ resources MUST NOT be\n   included in the response.\n   Where the issuer has\
    \ issued multiple certificates in a resource class\n   signed with different keys\
    \ (as may occur during a staged issuer-key\n   rollover), only the most recent\
    \ certificate issued with the currently\n   \"active\" issuer's key is to be listed\
    \ in the response.\n   Each \"class\" element describes a set of resources that\
    \ are certified\n   within the scope of a single certificate, referring to a single\n\
    \   resource class with a common validation path.\n   class_name:\n      the value\
    \ of this attribute is the issuer-assigned name of the\n      issuer's resource\
    \ class.\n   cert_url:\n      in the context of a class element, the value of\
    \ this attribute is\n      a pointer to the issuer's CA certificate (i.e., a reference\
    \ to the\n      immediate superior certificate, being the CA-enabled certificate\n\
    \      where the issuer is the certificate's subject).  Its value is a\n     \
    \ comma-separated list of URIs, of which at least one MUST be an\n      rsync\
    \ URI [RFC5781].  Any comma values within a URI MUST be\n      escaped (\"%2C\"\
    ).  The ordering of the list may be interpreted by\n      the client as a relative\
    \ preference for access methods as\n      expressed by the publisher of this certificate.\n\
    \   resource_set_as:\n      in the context of a class element, the value of this\
    \ attribute is\n      the set of AS numbers and AS number ranges that the issuer\
    \ has\n      allocated to the client within the scope of this resource class,\n\
    \      presented in ASCII as a comma-separated list.  The list elements\n    \
    \  are decimal integer values and ranges of decimal integers\n      specified\
    \ by the lowest and highest values of the range with a\n      hyphen delimiter,\
    \ using the canonical order as described in\n      [RFC3779], without leading\
    \ zeros, and with no white space or\n      punctuation other than the comma and\
    \ the hyphen range designator\n      (e.g., resource_set_as=\"123,456-789,123456\"\
    ).  If there are no AS\n      numbers in this resource class, then the empty AS\
    \ set is\n      represented by a null string value (\"\") for this attribute.\n\
    \   resource_set_ipv4:\n      in the context of a class element, the value of\
    \ this attribute is\n      the set of IPv4 addresses that the issuer has allocated\
    \ to the\n      client within the scope of this resource class.  The value is\n\
    \      presented in ASCII as a comma-separated list of elements.  Each\n     \
    \ element is either an address prefix using the notation of <dotted\n      quad>/mask\
    \ length, or a range specified as the lowest and highest\n      values of the\
    \ range in dotted quad notation with a hyphen\n      delimiter.  The list is presented\
    \ in canonical order, as described\n      in [RFC3779].  The dotted quad notation\
    \ is without leading zeros,\n      and the list contains no white space or punctuation\
    \ other than the\n      period, forward slash, hyphen, and comma (e.g.,\n    \
    \  resource_set_ipv4=\"192.0.2.0/26,192.0.2.66-192.0.2.76\").  If there\n    \
    \  are no IPv4 addresses in this resource class, the empty IPv4\n      address\
    \ set is represented by a null string value (\"\") for this\n      attribute.\n\
    \   resource_set_ipv6:\n      in the context of a class element, the value of\
    \ this attribute is\n      the set of IPv6 addresses that the issuer has allocated\
    \ to the\n      client within the scope of this resource class.  The value is\n\
    \      presented in ASCII as a comma-separated list of elements.  Each\n     \
    \ element is either an address prefix using the notation of <hex\n      nibble\
    \ sequence>/mask length, or a range specified as lowest and\n      highest values\
    \ of the range in hex nibble notation with a hyphen\n      delimiter.  Trailing\
    \ zero nibbles are truncated and represented by\n      '::'.  The list is presented\
    \ in canonical order, as described in\n      [RFC3779].  The hex nibble sequence\
    \ notation is without leading\n      zeros, and the list contains no white space\
    \ or punctuation other\n      than the colon, forward slash, hyphen, and comma,\
    \ and conforms to\n      the canonical format of [RFC5952] (e.g.,\n      resource_set_ipv6=\"\
    2001:db8::/48,2001:db8:2::-2001:db8:5::\").  The\n      XML Schema data type is\n\
    \      \"http://www.w3.org/TR/xmlschema-2/#hexBinary\" and the value is\n    \
    \  case insensitive, with the canonical form being lower case.  If\n      there\
    \ are no IPv6 addresses in this resource class, the empty IPv6\n      address\
    \ set is represented by a null string value (\"\") for this\n      attribute.\n\
    \   resource_set_notafter:\n      The value of this attribute specifies the date/time\
    \ that would be\n      set in the Validity notAfter field in any new certificate\
    \ issued\n      for this particular client within the scope of this resource\n\
    \      class, should the client request a new certificate.  The time\n      format\
    \ used for the value of this attribute is specified as\n      defined in ISO 8601\
    \ [ISO.8601:2004], and MUST use UTC time\n      represented as YYYY-MM-DDThh:mm:ssZ\
    \ (e.g., 2007-11-29T04:40:00Z).\n      If the client's certificate has a validity\
    \ notAfter time that is\n      different from this time, then the client SHOULD\
    \ request a new\n      certificate to be issued for this resource class.\n   suggested_sia_head:\
    \  (OPTIONAL)\n      If this field is present, then its value is a directory URI\
    \ that\n      indicates a repository publication point that the server has made\n\
    \      available to the client to use for the client's collection of\n      published\
    \ products.  This specification does not encompass the\n      protocols that the\
    \ client may use with the operator of the\n      repository publication point\
    \ in order to publish objects at this\n      publication point.\n   [issuer's\
    \ certificate]\n      value is the Base64 encoding of the DER-encoded issuer's\
    \ CA\n      certificate (the CA-enabled certificate where the issuer is the\n\
    \      certificate's subject).\n      Each certificate element describes the most\
    \ recently issued\n      current certificate where the certificate's subject refers\
    \ to the\n      client for each active client key pair.  A \"current\" certificate\n\
    \      is a non-expired, non-revoked certificate.  If no current\n      certificate\
    \ has been issued, then no certificate element is to be\n      included in the\
    \ response.\n   cert_url:\n      in the context of a certificate element, this\
    \ is a pointer to the\n      location where the certificate issuer has published\
    \ this\n      certificate.  This field is the issuer's suggestion for the\n  \
    \    Authority Information Access (AIA) field for the subject to use in\n    \
    \  subordinate certificates that are issued by the subject.\n      According to\
    \ the Resource Certificate Profile [RFC6487], the AIA\n      field is a non-empty\
    \ (contains a minimum of 1 element) list of\n      URI's, one of which MUST be\
    \ an rsync URI [RFC5781].  The order of\n      URI's in the AIA field may be interpreted\
    \ as the publisher's\n      relative preference for access methods for this certificate.\
    \  The\n      cert_url conforms to this AIA specification.  Its value is a\n \
    \     comma-separated list of URIs, one of which MUST be an rsync URI.\n     \
    \ Any comma values within a URI MUST be escaped (\"%2C\").\n   req_resource_set_as:\n\
    \      the set of AS numbers that were specified in the corresponding\n      original\
    \ certificate request that defined the maximal requested\n      span of the certified\
    \ AS number set, following the syntax\n      described above.  If this attribute\
    \ was present in the certificate\n      request, then the attribute MUST be present\
    \ in this response;\n      otherwise, it MUST NOT be present.\n   req_resource_set_ipv4:\n\
    \      the set of IPv4 addresses that were specified in the corresponding\n  \
    \    original certificate request that defined the maximal requested\n      span\
    \ of the certified IPv4 address set, following the syntax\n      described above.\
    \  If this attribute was present in the certificate\n      request, then the attribute\
    \ MUST be present in this response;\n      otherwise, it MUST NOT be present.\n\
    \   req_resource_set_ipv6:\n      the set of IPv6 addresses that were specified\
    \ in the corresponding\n      original certificate request that defined the maximal\
    \ requested\n      span of the certified IPv6 address set, following the syntax\n\
    \      described above.  If this attribute was present in the certificate\n  \
    \    request, then the attribute MUST be present in this response;\n      otherwise,\
    \ it MUST NOT be present.\n   [certificate]\n      value is the Base64 encoding\
    \ of the DER-encoded certificate.\n"
- title: 3.4.  CA - Certificate Issuance
  contents:
  - "3.4.  CA - Certificate Issuance\n   This query is used by the client to request\
    \ the server's CA to issue\n   a resource certificate for the resources that have\
    \ been allocated or\n   assigned to the client.  If the request can be successfully\n\
    \   processed, then the server's response includes the issued\n   certificate.\n"
- title: 3.4.1.  Certificate Issuance Request
  contents:
  - "3.4.1.  Certificate Issuance Request\n   The value of the message \"type\" element\
    \ for this request is:\n      type=\"issue\"\n   ---------------------------------------------------------------\n\
    \   Payload:\n   <request\n           class_name=\"class name\"\n           req_resource_set_as=\"\
    as resource set\"\n           req_resource_set_ipv4=\"ipv4 resource set\"\n  \
    \         req_resource_set_ipv6=\"ipv6 resource set\">\n           [Certificate\
    \ request]\n            </request>\n   ---------------------------------------------------------------\n\
    \   The client MUST use different key pairs for each distinct resource\n   class.\n\
    \   The req_resource_set attributes are optional in the request.\n   If none of\
    \ the req_resource_set attributes are specified, then the\n   request signifies\
    \ that the complete set of all resources that match\n   the client's current resource\
    \ allocation is to be included in the\n   issued certificate.\n   If any of the\
    \ req_resource_set attributes are specified in the\n   request, then any missing\
    \ req_resource_set attributes are to be\n   interpreted as specifying the complete\
    \ set of the corresponding\n   resource type that match the client's current resource\
    \ allocation are\n   to be included in the issued certificate.\n   If the value\
    \ of any included req_resource_set attributes is the null\n   value (\"\"), then\
    \ this indicates that no resources of that resource\n   type are to be included\
    \ in the issued certificate.\n   The requested resource set values are held as\
    \ a local record by the\n   issuer against the resource class and the client's\
    \ public key.  Any\n   subsequent Certificate Issuance Requests that specify the\
    \ same\n   resource class and the same client's public key will (re)set the\n\
    \   issuer's local record of the requested resource sets to the most\n   recently\
    \ specified values.\n   class_name:\n      value is the server's identifier of\
    \ a resource class.\n   req_resource_set_as:  (OPTIONAL)\n      the set of AS\
    \ numbers that define the maximal requested span of\n      the certified AS number\
    \ set, formatted as per the resource_set_as\n      attribute of the resource class\
    \ list response.\n   req_resource_set_ipv4:  (OPTIONAL)\n      the set of IPv4\
    \ addresses that define the maximal requested span\n      of the certified IPv4\
    \ address set, formatted as per the\n      resource_set_ipv4 attribute of the\
    \ resource class list response.\n   req_resource_set_ipv6:  (OPTIONAL)\n     \
    \ the set of IPv6 addresses that define the maximal requested span\n      of the\
    \ certified IPv6 address set, formatted as per the\n      resource_set_ipv6 attribute\
    \ of the resource class list response.\n   [Certificate request]\n      value\
    \ is the certificate request.  This is a Base64 encoded DER\n      version of\
    \ a request formatted using PKCS#10 [RFC2986].  The\n      certificate request\
    \ is signed using the private key part of the\n      key pair whose public part\
    \ is the subject key value in the\n      certification request.  The signing algorithm\
    \ is specified in\n      [RFC6485].  (This signature component is intended to\
    \ demonstrate\n      proof of possession of the private key.)\n   The response\
    \ to this request is a Certificate Issuance Response if\n   the request can be\
    \ processed online.  If the request cannot be\n   undertaken immediately, then\
    \ the server MUST respond with a \"Request-\n   Not-Performed\" message, using\
    \ the appropriate error code:\n   o  If the resource class is not defined by the\
    \ server, then the\n      server MUST return error code 1201.\n   o  If the client\
    \ holds no resources in a defined resource class, then\n      the server MUST\
    \ return error code 1202 and not proceed with the\n      request.\n   o  If the\
    \ certificate request payload is badly formed, then the\n      server MUST return\
    \ error code 1203.\n   o  If the public key used in the certificate request implies\
    \ that the\n      client is attempting to use identical key pairs for multiple\n\
    \      resource classes, then the server MUST respond with a 1204 error\n    \
    \  code.\n   o  If the certificate issuer uses an off-line process to undertake\n\
    \      certificate issuance, and the server cannot directly respond to\n     \
    \ the certificate issuance request with an issued certificate, then\n      the\
    \ certificate issuer MUST respond to the first instance of this\n      request\
    \ with an error code 1104 to indicate that the request is\n      being processed\
    \ asynchronously.  Subsequent repetitions of this\n      request while the off-line\
    \ actions are being undertaken SHOULD\n      cause a response with error code\
    \ 1101.  In this context, where\n      off-line processes are invoked for certificate\
    \ issuance, if the\n      certificate issuer determines in processing the request\
    \ that the\n      issued certificate would be identical in all respects to the\
    \ most\n      recently issued certificate for this client, other than the\n  \
    \    certificate's serial number, were the certificate to be issued,\n      the\
    \ issuer may choose to respond with the most recently issued\n      certificate\
    \ and not initiate an off-line certificate issuance\n      request.\n   Note that\
    \ a client, when receiving a 1104 response to a certificate\n   issuance request,\
    \ MAY periodically resubmit the request, in which\n   case the client MUST receive\
    \ an error code 1101 response while the\n   request is being processed, and a\
    \ Certificate Issuance Response when\n   the certificate issuance process has\
    \ completed.  In such\n   circumstances, a client SHOULD limit the frequency of\
    \ such repeated\n   requests to no more than 1 request in each 24-hour interval.\n"
- title: 3.4.2.  Certificate Issuance Response
  contents:
  - "3.4.2.  Certificate Issuance Response\n   The value of the message \"type\" element\
    \ for this response is:\n      type=\"issue_response\"\n   ---------------------------------------------------------------\n\
    \      Payload:\n       <class class_name=\"class name\"\n              cert_url=\"\
    url\"\n              resource_set_as=\"as resource set\"\n              resource_set_ipv4=\"\
    ipv4 resource set\"\n              resource_set_ipv6=\"ipv6 resource set\" >\n\
    \               <certificate cert_url=\"url\"\n                     req_resource_set_as=\"\
    as resource set\"\n                     req_resource_set_ipv4=\"ipv4 resource\
    \ set\"\n                     req_resource_set_ipv6=\"ipv6 resource set\" >\n\
    \               [certificate]\n               </certificate>\n               <issuer>[issuer's\
    \ certificate]</issuer>\n             </class>\n      ---------------------------------------------------------------\n\
    \   If the certificate issuer determines that the issued certificate\n   would\
    \ be identical in all respects to the most recently issued\n   certificate for\
    \ this client, other than the certificate's serial\n   number, were the certificate\
    \ to be issued, the issuer may choose to\n   respond with the most recently issued\
    \ certificate and not issue a new\n   certificate for this request.\n   The definition\
    \ of the attributes and syntax of the values is the same\n   as the resource class\
    \ list response, but the response only references\n   the (single) named resource\
    \ class, and the (single) certificate\n   issued against the client's public key\
    \ as provided in the\n   corresponding certificate request.\n"
- title: 3.5.  Certificate Revocation
  contents:
  - "3.5.  Certificate Revocation\n   This request 'retires' a client's key pair by\
    \ requesting that the\n   server's CA revoke all certificates for this client\
    \ (i.e., where this\n   client is the subject) that contain the matching public\
    \ key, within\n   the scope of a named resource class.  Individual certificates\
    \ cannot\n   be revoked within the scope of this protocol.\n"
- title: 3.5.1.  Certificate Revocation Request
  contents:
  - "3.5.1.  Certificate Revocation Request\n   The value of the message \"type\"\
    \ element for this request is:\n      type=\"revoke\"\n   ---------------------------------------------------------------\n\
    \     Payload:\n     <key class_name=\"class name\"\n          ski=\"[encoded\
    \ hash of the subject public key]\" />\n   ---------------------------------------------------------------\n\
    \   This command directs the server's CA to immediately mark all issued\n   valid\
    \ certificates issued by this issuer within the named resource\n   class with\
    \ this client's subject name and the provided SKI value to\n   be marked as revoked,\
    \ causing the issued certificates to be withdrawn\n   from the publication repository\
    \ and to be listed in the server's\n   subsequent CRLs within this resource class.\
    \  The issuer MUST ensure\n   that all certificates to be revoked were issued\
    \ with the requesting\n   client as the certificate's subject.\n   class_name:\n\
    \      value is the issuer-assigned name of the issuer's resource class.\n   \
    \   ski:\n      value is the encoded hash of the client's public key that is to\
    \ be\n      revoked.  The algorithm for the encoding is to generate the\n    \
    \  160-bit SHA-1 hash of the client's public key, as defined in\n      method\
    \ (1) of Section 4.2.1.2 of [RFC5280], and encode this value\n      using the\
    \ Base 64 encoding with URL and Filename Safe Alphabet, as\n      defined in Section\
    \ 5 of [RFC4648].\n"
- title: 3.5.2.  Certificate Revocation Response
  contents:
  - "3.5.2.  Certificate Revocation Response\n   The value of the message \"type\"\
    \ element for this response is:\n      type=\"revoke_response\"\n   ---------------------------------------------------------------\n\
    \      Payload:\n      <key class_name=\"class name\"\n        ski=\"[encoded\
    \ hash of the subject public key]\" />\n   ---------------------------------------------------------------\n\
    \   class_name:\n      value is the issuer-assigned name of the server's resource\
    \ class.\n   ski:\n      value is the encoded hash of the client's public key\
    \ that is to be\n      revoked.  The algorithm for the encoding is to generate\
    \ the\n      160-bit SHA-1 hash of the client's public key, as defined in\n  \
    \    method (1) of Section 4.2.1.2 of [RFC5280], and encode this value\n     \
    \ using the Base 64 encoding with URL and Filename Safe Alphabet, as\n      defined\
    \ in Section 5 of [RFC4648].\n"
- title: 3.6.  Request-Not-Performed Response
  contents:
  - "3.6.  Request-Not-Performed Response\n   The value of the message \"type\" element\
    \ for this response is:\n      type=\"error_response\"\n   ---------------------------------------------------------------\n\
    \      Payload:\n      <status>[Code]</status>\n      <description xml:lang=\"\
    en-US\">[Readable text]</description>\n   ---------------------------------------------------------------\n\
    \   All states where an error response if to be generated, either due to\n   detected\
    \ errors or inconsistencies in the content of the request or\n   server-side states\
    \ that prevent the request being performed, generate\n   a Request-Not-Performed\
    \ response.\n   description:\n      value is a text field.  This element MAY be\
    \ present.  It's value\n      has no defined meaning within the scope of this\
    \ protocol, and\n      implementations may assume that some form of human-readable\
    \ text\n      may be used here.  If the HTTP request that triggered this error\n\
    \      response includes an Accept-Language header as defined in Section\n   \
    \   14.4 of the HTTP/1.1 specification [RFC2616], then the server MAY\n      include\
    \ a second description element using the highest ranked\n      preferred language\
    \ of the client.  The en-US description MUST\n      always be included if the\
    \ element is present.\n   The error code set is:\n         Code Value   Description\n\
    \         1101         already processing request\n         1102         version\
    \ number error\n         1103         unrecognized request type\n         1104\
    \         request scheduled for processing\n         1201         request - no\
    \ such resource class\n         1202         request - no resources allocated\
    \ in resource class\n         1203         request - badly formed certificate\
    \ request\n         1204         request - already used key in request\n     \
    \    1301         revoke - no such resource class\n         1302         revoke\
    \ - no such key\n         2001         Internal Server Error - Request not performed\n"
- title: 3.7.  XML Schema
  contents:
  - "3.7.  XML Schema\n   The following is a RELAX NG compact form schema describing\
    \ version 1\n   of this protocol.\n      Note: As discussed in [XML], \"the namespace\
    \ name, to serve its\n      intended purpose, SHOULD have the characteristics\
    \ of uniqueness\n      and persistence.  It is not a goal that it be directly\
    \ usable for\n      retrieval of a schema (if any exists)\".\n   default namespace\
    \ = \"http://www.apnic.net/specs/rescerts/up-down/\"\n   grammar {\n      resource_set_as\
    \ = xsd:string {  maxLength=\"512000\"\n                                     \
    \ pattern=\"[\\-,0-9]*\" }\n      resource_set_ip4 = xsd:string { maxLength=\"\
    512000\"\n                                      pattern=\"[\\-,/.0-9]*\" }\n \
    \     resource_set_ip6 = xsd:string { maxLength=\"512000\"\n                 \
    \                     pattern=\"[\\-,/:0-9a-fA-F]*\" }\n      class_name = xsd:token\
    \ { minLength=\"1\" maxLength=\"1024\" }\n      ski = xsd:token { minLength=\"\
    27\" maxLength=\"1024\" }\n      label = xsd:token { minLength=\"1\" maxLength=\"\
    1024\" }\n      cert_url = xsd:string { minLength=\"10\" maxLength=\"4096\" }\n\
    \      base64_binary = xsd:base64Binary { minLength=\"4\"\n                  \
    \                       maxLength=\"512000\" }\n      start = element message\
    \ {\n        attribute version { xsd:positiveInteger {\n                     \
    \                        maxInclusive=\"1\" } },\n        attribute sender { label\
    \ },\n        attribute recipient { label },\n        payload\n      }\n     \
    \ payload |= attribute type { \"list\" }, list_request\n      payload |= attribute\
    \ type { \"list_response\"}, list_response\n      payload |= attribute type {\
    \ \"issue\" }, issue_request\n      payload |= attribute type { \"issue_response\"\
    }, issue_response\n      payload |= attribute type { \"revoke\" }, revoke_request\n\
    \      payload |= attribute type { \"revoke_response\"}, revoke_response\n   \
    \   payload |= attribute type { \"error_response\"}, error_response\n      list_request\
    \ = empty\n      list_response = class*\n      class = element class {\n     \
    \   attribute class_name { class_name },\n        attribute cert_url { cert_url\
    \ },\n        attribute resource_set_as { resource_set_as },\n        attribute\
    \ resource_set_ipv4 { resource_set_ip4 },\n        attribute resource_set_ipv6\
    \ { resource_set_ip6 },\n        attribute resource_set_notafter { xsd:dateTime\
    \ },\n        attribute suggested_sia_head { xsd:anyURI { maxLength=\"1024\"\n\
    \                                              pattern=\"rsync://.+\"} }?,\n \
    \       element certificate {\n          attribute cert_url { cert_url },\n  \
    \        attribute req_resource_set_as { resource_set_as }?,\n          attribute\
    \ req_resource_set_ipv4 { resource_set_ip4 }?,\n          attribute req_resource_set_ipv6\
    \ { resource_set_ip6 }?,\n          base64_binary\n        }*,\n        element\
    \ issuer { base64_binary }\n      }\n      issue_request = element request {\n\
    \        attribute class_name { class_name },\n        attribute req_resource_set_as\
    \ { resource_set_as }?,\n        attribute req_resource_set_ipv4 { resource_set_ip4\
    \ }?,\n        attribute req_resource_set_ipv6 { resource_set_ip6 }?,\n      \
    \  base64_binary\n      }\n      issue_response = class\n      revoke_request\
    \ = revocation\n      revoke_response = revocation\n      revocation = element\
    \ key {\n        attribute class_name { class_name },\n        attribute ski {\
    \ ski }\n      }\n      error_response =\n        element status { xsd:positiveInteger\
    \ { maxInclusive=\"9999\" } },\n        element description { attribute xml:lang\
    \ { xsd:language },\n                                  xsd:string { maxLength=\"\
    1024\" } }*\n      }\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This protocol supports the maintenance of resource\
    \ certificates that\n   the issuer issues for a subject in certifying resources\
    \ that have\n   been allocated or assigned by the issuer to the subject [RFC6480].\n\
    \   This protocol assumes that the issuer and subject are known to each\n   other\
    \ and have exchanged credentials so as to support the mutual\n   recognition of\
    \ the digital signatures used to sign the CMS messages.\n   The mechanisms used\
    \ to perform the associated credential exchange are\n   not described in this\
    \ specification.\n   The protocol is a minimal query/response protocol that imposes\
    \ strict\n   serialization on each query/response transaction, reducing the\n\
    \   potential for the subject and the issuer to lose synchronization over\n  \
    \ the issued certificate state.\n   Validation of protocol objects (Section 3.1.2)\
    \ requires that the CMS\n   signing-time value be greater than or equal to the\
    \ time value passed\n   in the previously valid protocol objects that were passed\
    \ from the\n   same originator to the same recipient.  If a party inadvertently\n\
    \   sends a valid message (protocol object) with a signing time in the\n   future,\
    \ then subsequent messages from the party in the same\n   client/server context\
    \ can use signing-time value consistent with this\n   validation constraint, such\
    \ that the signing times contained in\n   subsequent messages are greater than\
    \ or equal to the signing-time\n   value of the previous valid message.  (Note\
    \ that it is not a\n   normative requirement that the signing time be precisely\
    \ aligned to a\n   time of day clock, thus permitting arbitrarily large clock\
    \ skew\n   values in the context of this protocol message exchange.)  If the\n\
    \   client and server wish to reset the signing time to a mutually agreed\n  \
    \ value, then, (as noted in Section 2) the interactions between the\n   client\
    \ and the server to achieve this outcome are not encompassed in\n   this protocol.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has registered the following media type:\n \
    \  application/rpki-updown\n"
- title: 5.1.  application/rpki-updown
  contents:
  - "5.1.  application/rpki-updown\n   Type name:  application\n   Subtype name: \
    \ rpki-updown\n   Required parameters:  None\n   Optional parameters:  None\n\
    \   Encoding considerations:  binary\n   Security considerations:  Carries an\
    \ RPKI Provisioning Protocol\n      Message, as defined in this document.\n  \
    \ Interoperability considerations:  None\n   Published specification:  This document\n\
    \   Applications that use this media type:  HTTP [RFC5652]\n   Additional information:\n\
    \      Magic number(s):  None\n      File extension(s):\n      Macintosh File\
    \ Type Code(s):\n   Person & email address to contact for further information:\n\
    \      Geoff Huston <gih@apnic.net>\n   Intended usage:  COMMON\n   Restrictions\
    \ on usage:  Only to be used as an RPKI Provisioning\n      Protocol message object\
    \ type, as defined in this document.\n   Author:  Geoff Huston <gih@apnic.net>\n\
    \   Change controller:  Geoff Huston <gih@apnic.net>\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to acknowledge the valued contributions\
    \ from\n   Russ Housley, Steve Kent, Randy Bush, George Michaelson, Robert\n \
    \  Kisteleki, Tim Bruijnzeels, and Carsten Bormann in the preparation of\n   the\
    \ protocol described in this document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [ISO.8601:2004]\n              ISO, \"ISO 8601:2004\
    \ Representation of dates and Times\",\n              2004.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul,\
    \ J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC2986]  Nystrom, M. and B. Kaliski, \"PKCS #10: Certification\n       \
    \       Request Syntax Specification Version 1.7\", RFC 2986,\n              November\
    \ 2000.\n   [RFC3779]  Lynn, C., Kent, S., and K. Seo, \"X.509 Extensions for\
    \ IP\n              Addresses and AS Identifiers\", RFC 3779, June 2004.\n   [RFC4648]\
    \  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\"\
    , RFC 4648, October 2006.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S.,\
    \ Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public\
    \ Key\n              Infrastructure Certificate and Certificate Revocation List\n\
    \              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5652]  Housley, R.,\
    \ \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652, September\
    \ 2009.\n   [RFC5781]  Weiler, S., Ward, D., and R. Housley, \"The rsync URI\n\
    \              Scheme\", RFC 5781, February 2010.\n   [RFC5952]  Kawamura, S.\
    \ and M. Kawashima, \"A Recommendation for IPv6\n              Address Text Representation\"\
    , RFC 5952, August 2010.\n   [RFC6019]  Housley, R., \"BinaryTime: An Alternate\
    \ Format for\n              Representing Date and Time in ASN.1\", RFC 6019, September\n\
    \              2010.\n   [RFC6485]  Huston, G., \"The Profile for Algorithms and\
    \ Key Sizes for\n              Use in the Resource Public Key Infrastructure (RPKI)\"\
    , RFC\n              6485, February 2012.\n   [X.509-88] CCITT, \"Recommendation\
    \ X.509: The Directory-\n              Authentication Framework\", 1988.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC6480]  Lepinski, M. and S. Kent, \"An Infrastructure\
    \ to Support\n              Secure Internet Routing\", RFC 6480, February 2012.\n\
    \   [RFC6487]  Huston, G., Michaelson, G., and R. Loomans, \"A Profile for\n \
    \             X.509 PKIX Resource Certificates\", RFC 6487, February\n       \
    \       2012.\n   [XML]      Bray, T., Hollander, D., Layman, A., Tobin, R., and\
    \ H.\n              Thompson, \"Namespaces in XML 1.0 (Third Edition)\", World\n\
    \              Wide Web Consortium Recommendation REC-xml-names-20091208,\n  \
    \            December 2009, <http://www.w3.org/TR/2009/REC-xml-\n            \
    \  names-20091208/>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Geoff Huston\n   APNIC\n   EMail: gih@apnic.net\n   URI:\
    \   http://www.apnic.net\n   Robert Loomans\n   APNIC\n   EMail: robertl@apnic.net\n\
    \   URI:   http://www.apnic.net\n   Byron Ellacott\n   APNIC\n   EMail: bje@apnic.net\n\
    \   URI:   http://www.apnic.net\n   Rob Austein\n   Internet Systems Consortium\n\
    \   EMail: sra@hactrn.net\n"
