- title: __initial_text__
  contents:
  - '                         Entity MIB (Version 4)

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it describes managed objects used for managing\n   multiple logical\
    \ and physical entities managed by a single Simple\n   Network Management Protocol\
    \ (SNMP) agent.  This document specifies\n   version 4 of the Entity MIB.  This\
    \ memo obsoletes version 3 of the\n   Entity MIB module published as RFC 4133.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6933.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. The SNMP Management Framework ...................................3\n\
    \   2. Overview ........................................................3\n  \
    \    2.1. Terms ......................................................5\n    \
    \  2.2. Relationship to Community Strings ..........................6\n      2.3.\
    \ Relationship to SNMP Contexts ..............................6\n      2.4. Relationship\
    \ to Proxy Mechanisms ...........................6\n      2.5. Relationship to\
    \ a Chassis MIB ..............................7\n      2.6. Relationship to the\
    \ Interfaces MIB .........................7\n      2.7. Relationship to the Other\
    \ MIB Modules ......................7\n      2.8. Relationship to Naming Scopes\
    \ ..............................7\n      2.9. Multiple Instances of the Entity\
    \ MIB .......................8\n      2.10. Re-Configuration of Entities ..............................9\n\
    \      2.11. Textual Convention Change .................................9\n  \
    \    2.12. MIB Structure .............................................9\n    \
    \       2.12.1. entityPhysical Group ..............................10\n      \
    \     2.12.2. entityLogical Group ...............................12\n        \
    \   2.12.3. entityMapping Group ...............................12\n          \
    \ 2.12.4. entityGeneral Group ...............................13\n           2.12.5.\
    \ entityNotifications Group .........................13\n      2.13. Multiple\
    \ Agents ..........................................13\n      2.14. Changes Since\
    \ RFC 2037 ...................................14\n           2.14.1. Textual Conventions\
    \ ...............................14\n           2.14.2. New entPhysicalTable Objects\
    \ ......................14\n           2.14.3. New entLogicalTable Objects .......................14\n\
    \           2.14.4. Bug Fixes .........................................14\n  \
    \    2.15. Changes Since RFC 2737 ...................................15\n    \
    \       2.15.1. Textual Conventions ...............................15\n      \
    \     2.15.2. New Objects .......................................15\n        \
    \   2.15.3. Bug Fixes .........................................15\n      2.16.\
    \ Changes Since RFC 4133 ...................................15\n           2.16.1.\
    \ MIB Module Addition ...............................15\n           2.16.2. Modification\
    \ to Some of the MIB Objects ...........15\n           2.16.3. New TC for Universally\
    \ Unique Identifier ..........16\n   3. MIB Definitions ................................................16\n\
    \      3.1. ENTITY-MIB ................................................16\n  \
    \    3.2. IANA-ENTITY-MIB ...........................................50\n    \
    \  3.3. UUID-TC-MIB ...............................................53\n   4. Usage\
    \ Examples .................................................55\n      4.1. Router/Bridge\
    \ .............................................55\n      4.2. Repeaters .................................................62\n\
    \      4.3. EMAN Example ..............................................69\n  \
    \ 5. Security Considerations ........................................70\n   6.\
    \ IANA Considerations ............................................72\n   7. Acknowledgements\
    \ ...............................................73\n   8. References .....................................................73\n\
    \      8.1. Normative References ......................................73\n  \
    \    8.2. Informative References ....................................74\n"
- title: 1.  The SNMP Management Framework
  contents:
  - "1.  The SNMP Management Framework\n   For a detailed overview of the documents\
    \ that describe the current\n   Internet-Standard Management Framework, please\
    \ refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed\
    \ via a virtual information store, termed\n   the Management Information Base\
    \ or MIB.  MIB objects are generally\n   accessed through the Simple Network Management\
    \ Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined\
    \ in the\n   Structure of Management Information (SMI).  This memo specifies a\
    \ MIB\n   module that is compliant to the SMIv2, which is described in STD 58,\n\
    \   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\"\
    , and\n   \"OPTIONAL\" in this document are to be interpreted as described in\
    \ RFC\n   2119 [RFC2119].\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   There is a need for a standardized way of representing a single\n\
    \   agent, which supports multiple instances of one MIB module.  This is\n   presently\
    \ true for at least 3 standard MIB modules and is likely to\n   become true for\
    \ more and more MIB modules as time passes.  For\n   example:\n   - multiple instances\
    \ of a bridge supported within a single device\n     that has a single agent;\n\
    \   - multiple repeaters supported by a single agent; and\n   - multiple OSPF\
    \ backbone areas, each operating as part of its own\n     Autonomous System and\
    \ each identified by the same area-id (e.g.,\n     0.0.0.0), supported inside\
    \ a single router with one agent.\n   The single agent present in each of these\
    \ cases implies a\n   relationship binds these entities.  Effectively, there is\
    \ some\n   \"overall\" physical entity that houses the sum of the things managed\n\
    \   by that one agent, i.e., there are multiple \"logical\" entities within\n\
    \   a single physical entity.  Sometimes, the overall physical entity\n   contains\
    \ multiple (smaller) physical entities, and each logical\n   entity is associated\
    \ with a particular physical entity.  Sometimes,\n   the overall physical entity\
    \ is a \"compound\" of multiple physical\n   entities (e.g., a stack of stackable\
    \ hubs).\n   What is needed is a way to determine exactly which logical entities\n\
    \   are managed by the agent (with some version of SNMP) in order to\n   communicate\
    \ with the agent about a particular logical entity.  When\n   different logical\
    \ entities are associated with different physical\n   entities within the overall\
    \ physical entity, it is also useful to be\n   able to use this information to\
    \ distinguish between logical entities.\n   In these situations, there is no need\
    \ for varbinds for multiple\n   logical entities to be referenced in the same\
    \ SNMP message (although\n   that might be useful in the future).  Rather, it\
    \ is sufficient, and\n   in some situations preferable, to have the context/community\
    \ in the\n   message identify the logical entity to which the varbinds apply.\n\
    \   Version 2 of this MIB addresses new requirements that have emerged\n   since\
    \ the publication of the first Entity MIB [RFC2037].  There is a\n   need for\
    \ a standardized way of providing non-volatile,\n   administratively assigned\
    \ identifiers for physical components\n   represented with the Entity MIB.  There\
    \ is also a need to align the\n   Entity MIB with the SNMPv3 administrative framework\
    \ (STD 62,\n   [RFC3411]).  Implementation experience has shown that additional\n\
    \   physical component attributes are also desirable.\n   Version 3 of this MIB\
    \ addresses new requirements that have emerged\n   since the publication of the\
    \ second Entity MIB [RFC2737].  There is a\n   need to identify physical entities\
    \ that are central processing units\n   (CPUs) and a need to provide a Textual\
    \ Convention (TC) that\n   identifies an entPhysicalIndex value or zero, where\
    \ the value zero\n   has application-specific semantics.  Two new objects have\
    \ been added\n   to the entPhysicalTable to identify the manufacturing date and\n\
    \   provide additional URIs for a particular physical entity.\n   Version 4 of\
    \ this MIB addresses new requirements that have emerged\n   since the publication\
    \ of the third version of the Entity MIB\n   [RFC4133].  There is a need to add\
    \ new enumerated values for entity\n   physical classes, a need to provide identification\
    \ information for\n   physical entities using a Universally Unique Identifier\
    \ (UUID)\n   format, and a need to have compliant implementations of the Entity\n\
    \   MIB with a smaller subsets of MIB objects for devices with\n   constrained\
    \ resources.\n   The PhysicalClass TEXTUAL-CONVENTION was deprecated, and a new\n\
    \   IANAPhysicalClass TC (maintained by IANA) was created.  A new TC,\n   UUIDorZero,\
    \ was created to represent a UUID, and a new MIB object was\n   added to the entPhysicalTable\
    \ to identify an entity.  A new\n   compliance statement, entity4CRCompliance,\
    \ has been added for\n   possible implementation of a selected subset of MIB objects\
    \ by\n   entities with constrained resources.\n"
- title: 2.1.  Terms
  contents:
  - "2.1.  Terms\n   The following terms are used throughout this document:\n   -\
    \ Naming Scope\n     A \"naming scope\" represents the set of information that\
    \ may be\n     potentially accessed through a single SNMP operation.  All\n  \
    \   instances within the naming scope share the same unique identifier\n     space.\
    \  For SNMPv1, a naming scope is identified by the value of\n     the associated\
    \ entLogicalCommunity instance.  For SNMPv3, the term\n     \"context\" is used\
    \ instead of \"naming scope\".  The complete\n     definition of an SNMP context\
    \ can be found in Section 3.3.1 of RFC\n     3411 [RFC3411].\n   - Multi-Scoped\
    \ Object\n     A MIB object for which identical instance values identify different\n\
    \     managed information in different naming scopes is called a \"multi-\n  \
    \   scoped\" MIB object.\n   - Single-Scoped Object\n     A MIB object for which\
    \ identical instance values identify the same\n     managed information in different\
    \ naming scopes is called a \"single-\n     scoped\" MIB object.\n   - Logical\
    \ Entity\n     A managed system contains one or more \"logical entities\", each\n\
    \     represented by at most one instantiation of each of a particular\n     set\
    \ of MIB objects.  A set of management functions is associated\n     with each\
    \ logical entity.  Examples of logical entities include\n     routers, bridges,\
    \ print-servers, etc.\n   - Physical Entity\n     A \"physical entity\" or \"\
    physical component\" represents an\n     identifiable physical resource within\
    \ a managed system.  Zero or\n     more logical entities may utilize a physical\
    \ resource at any given\n     time.  Determining which physical components are\
    \ represented by an\n     agent in the EntPhysicalTable is an implementation-specific\
    \ matter.\n     Typically, physical resources (e.g., communications ports,\n \
    \    backplanes, sensors, daughter-cards, power supplies, and the\n     overall\
    \ chassis), which can be managed via functions associated\n     with one or more\
    \ logical entities, are included in the MIB.\n   - Containment Tree\n     Each\
    \ physical component may be modeled as 'contained' within\n     another physical\
    \ component.  A \"containment-tree\" is the conceptual\n     sequence of entPhysicalIndex\
    \ values that uniquely specifies the\n     exact physical location of a physical\
    \ component within the managed\n     system.  It is generated by 'following and\
    \ recording' each\n     entPhysicalContainedIn instance 'up the tree towards the\
    \ root'\n     until a value of zero, indicating no further containment, is found.\n"
- title: 2.2.  Relationship to Community Strings
  contents:
  - "2.2.  Relationship to Community Strings\n   For community-based SNMP, differentiating\
    \ logical entities is one\n   (but not the only) purpose of the community string\
    \ [RFC1157].  This\n   is accommodated by representing each community string as\
    \ a logical\n   entity.\n   Note that different logical entities may share the\
    \ same naming scope\n   and, therefore, the same values of entLogicalCommunity.\
    \  This is\n   possible, providing they have no need for the same instance of\
    \ a MIB\n   object to represent different managed information.\n"
- title: 2.3.  Relationship to SNMP Contexts
  contents:
  - "2.3.  Relationship to SNMP Contexts\n   Version 2 of the Entity MIB contains\
    \ support for associating SNMPv3\n   contexts with logical entities.  Two new\
    \ MIB objects, defining an\n   SnmpEngineID and ContextName pair, are used together\
    \ to identify an\n   SNMP context associated with a logical entity.  This context\
    \ can be\n   used (in conjunction with the entLogicalTAddress and\n   entLogicalTDomain\
    \ MIB objects) to send SNMPv3 messages on behalf of a\n   particular logical entity.\n"
- title: 2.4.  Relationship to Proxy Mechanisms
  contents:
  - "2.4.  Relationship to Proxy Mechanisms\n   The Entity MIB is designed to allow\
    \ functional component discovery.\n   The administrative relationships between\
    \ different logical entities\n   are not visible in any Entity MIB tables.  A\
    \ Network Management\n   System (NMS) cannot determine whether MIB instances in\
    \ different\n   naming scopes are realized locally or remotely (e.g., via some\
    \ proxy\n   mechanism) by examining any particular Entity MIB objects.\n   The\
    \ management of administrative framework functions is not an\n   explicit goal\
    \ of the Entity MIB WG at this time.  This new area of\n   functionality may be\
    \ revisited after some operational experience with\n   the Entity MIB is gained.\n\
    \   Note that for community-based versions of SNMP, a network\n   administrator\
    \ will likely be able to associate community strings with\n   naming scopes that\
    \ have proprietary mechanisms, as a matter of\n   configuration.  There are no\
    \ mechanisms for managing naming scopes\n   defined in this MIB.\n"
- title: 2.5.  Relationship to a Chassis MIB
  contents:
  - "2.5.  Relationship to a Chassis MIB\n   Some readers may recall that a previous\
    \ IETF working group attempted\n   to define a Chassis MIB.  No consensus was\
    \ reached by that working\n   group, possibly because its scope was too broad.\
    \  As such, it is not\n   the purpose of the ENTITY-MIB module to be a \"Chassis\
    \ MIB\n   replacement\", nor is it within the scope of the ENTITY-MIB module to\n\
    \   contain all the information that might be necessary to manage a\n   \"chassis\"\
    .  On the other hand, the entities represented by an\n   implementation of the\
    \ ENTITY-MIB module might well be contained in a\n   chassis.\n"
- title: 2.6.  Relationship to the Interfaces MIB
  contents:
  - "2.6.  Relationship to the Interfaces MIB\n   The Entity MIB contains a mapping\
    \ table identifying physical\n   components that have 'external values' (e.g.,\
    \ ifIndex) associated\n   with them within a given naming scope.  This table can\
    \ be used to\n   identify the physical location of each interface in the ifTable\n\
    \   [RFC2863].  Because ifIndex values in different contexts are not\n   related\
    \ to one another, the interface-to-physical-component\n   associations are relative\
    \ to the same logical entity within the\n   agent.\n   The Entity MIB also contains\
    \ entPhysicalName and entPhysicalAlias\n   objects, which approximate the semantics\
    \ of the ifName and ifAlias\n   objects (respectively) from the Interfaces MIB\
    \ [RFC2863] for all\n   types of physical components.\n"
- title: 2.7.  Relationship to the Other MIB Modules
  contents:
  - "2.7.  Relationship to the Other MIB Modules\n   The Entity MIB contains a mapping\
    \ table identifying physical\n   components that have identifiers from other standard\
    \ MIB modules\n   associated with them.  For example, this table can be used along\
    \ with\n   the physical mapping table to identify the physical location of each\n\
    \   repeater port in the rptrPortTable or each interface in the ifTable.\n"
- title: 2.8.  Relationship to Naming Scopes
  contents:
  - "2.8.  Relationship to Naming Scopes\n   There is some question as to which MIB\
    \ objects may be returned within\n   a given naming scope.  MIB objects that are\
    \ not multi-scoped within a\n   managed system are likely to ignore context information\
    \ in\n   implementation.  In such a case, it is likely such objects will be\n\
    \   returned in all naming scopes (e.g., not just the 'default' naming\n   scope\
    \ or the SNMPv3 default context).\n   For example, a community string used to\
    \ access the management\n   information for logical device 'bridge2' may allow\
    \ access to all the\n   non-bridge-related objects in the 'default' naming scope,\
    \ as well as\n   a second instance of the Bridge MIB [RFC4188].\n   The isolation\
    \ of single-scoped MIB objects by the agent is an\n   implementation-specific\
    \ matter.  An agent may wish to limit the\n   objects returned in a particular\
    \ naming scope to only the multi-\n   scoped objects in that naming scope (e.g.,\
    \ system group and the\n   Bridge MIB).  In this case, all single-scoped management\
    \ information\n   would belong to a common naming scope (e.g., 'default'), which\
    \ itself\n   may contain some multi-scoped objects (e.g., system group).\n"
- title: 2.9.  Multiple Instances of the Entity MIB
  contents:
  - "2.9.  Multiple Instances of the Entity MIB\n   It is possible that more than\
    \ one agent may exist in a managed\n   system.  In such cases, multiple instances\
    \ of the Entity MIB\n   (representing the same managed objects) may be available\
    \ to an NMS.\n   In order to reduce complexity for agent implementation, multiple\n\
    \   instances of the Entity MIB are not required to be equivalent or even\n  \
    \ consistent.  An NMS may be able to 'align' instances returned by\n   different\
    \ agents by examining the columns of each table, but vendor-\n   specific identifiers\
    \ and (especially) index values are likely to be\n   different.  Each agent may\
    \ be managing different subsets of the\n   entire chassis as well.\n   When all\
    \ of a physically modular device is represented by a single\n   agent, the entry\
    \ (for which entPhysicalContainedIn has the value\n   zero) would likely have\
    \ 'chassis' as the value of its\n   entPhysicalClass.  Alternatively, for an agent\
    \ on a module where the\n   agent represents only the physical entities on that\
    \ module (not those\n   on other modules), the entry (for which entPhysicalContainedIn\
    \ has\n   the value zero) would likely have 'module' as the value of its\n   entPhysicalClass.\n\
    \   An agent implementation of the entLogicalTable is not required to\n   contain\
    \ information about logical entities managed primarily by other\n   agents.  That\
    \ is, the entLogicalTAddress and entLogicalTDomain\n   objects in the entLogicalTable\
    \ are provided to support a historical\n   multiplexing mechanism, not to identify\
    \ other SNMP agents.\n   Note that the Entity MIB is a single-scoped MIB, in the\
    \ event an\n   agent represents the MIB in different naming scopes.\n"
- title: 2.10.  Re-Configuration of Entities
  contents:
  - "2.10.  Re-Configuration of Entities\n   Most of the MIB objects defined in this\
    \ MIB have, at most, a read-\n   only MAX-ACCESS clause.  This is a conscious\
    \ decision by the working\n   group to limit this MIB's scope.  The second version\
    \ of the Entity\n   MIB allows a network administrator to configure some common\n\
    \   attributes of physical components.\n"
- title: 2.11.  Textual Convention Change
  contents:
  - "2.11.  Textual Convention Change\n   Version 1 of the Entity MIB contains three\
    \ MIB objects defined with\n   the (now obsolete) DisplayString TEXTUAL-CONVENTION.\
    \  In version 2 of\n   the Entity MIB, the syntax for these objects has been updated\
    \ to use\n   the (now preferred) SnmpAdminString TEXTUAL-CONVENTION.\n   The ENTMIB\
    \ working group (which was in charge of the document at that\n   point) realized\
    \ that this change is not strictly supported by SMIv2.\n   In their judgment,\
    \ the alternative of deprecating the old objects and\n   defining new objects\
    \ would have had a more adverse impact on backward\n   compatibility and interoperability,\
    \ given the particular semantics of\n   these objects.\n"
- title: 2.12.  MIB Structure
  contents:
  - "2.12.  MIB Structure\n   The Entity MIB contains five groups of MIB objects:\n\
    \   - entityPhysical group\n     Describes the physical entities managed by a\
    \ single agent.\n   - entityLogical group\n     Describes the logical entities\
    \ managed by a single agent.\n   - entityMapping group\n     Describes the associations\
    \ between the physical entities, logical\n     entities, interfaces, and non-interface\
    \ ports managed by a single\n     agent.\n   - entityGeneral group\n     Describes\
    \ general system attributes shared by potentially all types\n     of entities\
    \ managed by a single agent.\n   - entityNotifications group\n     Contains status\
    \ indication notifications.\n"
- title: 2.12.1.  entityPhysical Group
  contents:
  - "2.12.1.  entityPhysical Group\n   This group contains a single table to identify\
    \ physical system\n   components, called the entPhysicalTable.\n   The entPhysicalTable\
    \ contains one row per physical entity and must\n   always contain at least one\
    \ row for an \"overall\" physical entity,\n   which should have an entPhysicalClass\
    \ value of 'stack(11)',\n   'chassis(3)', or 'module(9)'.\n   Each row is indexed\
    \ by an arbitrary, small integer and contains a\n   description and type of the\
    \ physical entity.  It also optionally\n   contains the index number of another\
    \ entPhysicalEntry, indicating a\n   containment relationship between the two.\n\
    \   Version 2 of the Entity MIB provides additional MIB objects for each\n   physical\
    \ entity.  Some common read-only attributes have been added,\n   as well as three\
    \ writable string objects.\n   - entPhysicalAlias\n     This string can be used\
    \ by an NMS as a non-volatile identifier for\n     the physical component.  Maintaining\
    \ a non-volatile string for\n     every physical component represented in the\
    \ entPhysicalTable can be\n     costly and unnecessary.  An agent may algorithmically\
    \ generate\n     entPhysicalAlias strings for particular entries (e.g., based\
    \ on the\n     entPhysicalClass value).\n   - entPhysicalAssetID\n     This string\
    \ is provided to store a user-specific asset identifier\n     for removable physical\
    \ components.  In order to reduce the non-\n     volatile storage needed by a\
    \ particular agent, a network\n     administrator should only assign asset identifiers\
    \ to physical\n     entities that are field-replaceable (i.e., not permanently\n\
    \     contained within another physical entity).\n   - entPhysicalSerialNum\n\
    \     This string is provided to store a vendor-specific serial number\n     string\
    \ for physical components.  This writable object is used when\n     an agent cannot\
    \ identify the serial numbers of all installed\n     physical entities and a network\
    \ administrator wishes to configure\n     the non-volatile serial number strings\
    \ manually (via an NMS\n     application).\n   Version 3 of the Entity MIB provides\
    \ two additional MIB objects for\n   each physical entity:\n   - entPhysicalMfgDate\n\
    \     This object contains the date of manufacturing of the managed\n     entity.\
    \  If the manufacturing date is unknown or not supported the\n     object is not\
    \ instantiated.  The special value '0000000000000000'H\n     may also be returned\
    \ in this case.\n   - entPhysicalUris\n     This object provides additional identification\
    \ information about\n     the physical entity.\n     This object contains one\
    \ or more Uniform Resource Identifiers\n     (URIs); therefore, the syntax of\
    \ this object must conform to\n     [RFC3986], Section 3.  Uniform Resource Names\
    \ (URNs) [RFC3406] are\n     resource identifiers with the specific requirements\
    \ for enabling\n     location-independent identification of a resource, as well\
    \ as\n     longevity of reference.  URNs are part of the larger URI family\n \
    \    with the specific goal of providing persistent naming of resources.\n   \
    \  URI schemes and URN namespaces are registered by IANA (see\n     http://www.iana.org/assignments/uri-schemes\
    \ and\n     http://www.iana.org/assignments/urn-namespaces).\n     For example,\
    \ the entPhysicalUris object may be used to encode a URI\n     containing a Common\
    \ Language Equipment Identifier (CLEI) URN for\n     the managed physical entity.\
    \  The URN namespace for CLEIs is\n     defined in [RFC4152], and the CLEI format\
    \ is defined in [T1.213]\n     and [T1.213a].  For example, an entPhysicalUris\
    \ instance may have\n     the value of:\n        URN:CLEI:D4CE18B7AA\n     [RFC3986]\
    \ and [RFC4152] identify this as a URI in the CLEI URN\n     namespace.  The specific\
    \ CLEI code, D4CE18B7AA, is based on the\n     example provided in [T1.213a].\n\
    \     Multiple URIs may be present and are separated by white space\n     characters.\
    \  Leading and trailing white space characters are\n     ignored.\n     If no\
    \ additional identification information is known about the\n     physical entity\
    \ or supported, the object is not instantiated.\n     Version 4 of the Entity\
    \ MIB module provides an additional MIB\n     object for each physical entity.\n\
    \   - entPhysicalUUID\n     This object provides an unique identification about\
    \ the physical\n     entity.  This object contains a globally unique identifier\
    \ for the\n     physical entity with the format defined in RFC 4122 [RFC4122].\n\
    \     To support the existing implementations of ENTITY-MIB version 3\n     [RFC4133],\
    \ entPhysicalUris object should be used to store the UUID\n     value of the physical\
    \ entity as well in URN format.  This\n     duplication of information enables\
    \ backward compatibility.  Note\n     that entPhysicalUris allows write access\
    \ while entPhysicalUUID is\n     read-only.\n"
- title: 2.12.2.  entityLogical Group
  contents:
  - "2.12.2.  entityLogical Group\n   This group contains a single table to identify\
    \ logical entities,\n   called the entLogicalTable.\n   The entLogicalTable contains\
    \ one row per logical entity.  Each row is\n   indexed by an arbitrary, small\
    \ integer and contains a name,\n   description, and type of the logical entity.\
    \  It also contains\n   information to allow access to the MIB information for\
    \ the logical\n   entity.  This includes SNMP versions that use a community name\
    \ (with\n   some form of implied context representation) and SNMP versions that\n\
    \   use the SNMP ARCH [RFC3411] method of context identification.\n   If an agent\
    \ represents multiple logical entities with this MIB, then\n   this group must\
    \ be implemented for all logical entities known to the\n   agent.\n   If an agent\
    \ represents a single logical entity, or multiple logical\n   entities within\
    \ a single naming scope, then implementation of this\n   group may be omitted\
    \ by the agent.\n"
- title: 2.12.3.  entityMapping Group
  contents:
  - "2.12.3.  entityMapping Group\n   This group contains three tables to identify\
    \ associations between\n   different system components.\n   - entLPMappingTable\n\
    \     This table contains mappings between entLogicalIndex values\n     (logical\
    \ entities) and entPhysicalIndex values (the physical\n     components supporting\
    \ that entity).  A logical entity can map to\n     more than one physical component,\
    \ and more than one logical entity\n     can map to (share) the same physical\
    \ component.  If an agent\n     represents a single logical entity, or multiple\
    \ logical entities\n     within a single naming scope, then implementation of\
    \ this table may\n     be omitted by the agent.\n   - entAliasMappingTable\n \
    \    This table contains mappings between entLogicalIndex,\n     entPhysicalIndex\
    \ pairs, and 'alias' object identifier values.  This\n     allows resources managed\
    \ with other MIB modules (e.g., repeater\n     ports, bridge ports, physical and\
    \ logical interfaces) to be\n     identified in the physical entity hierarchy.\
    \  Note that each alias\n     identifier is only relevant in a particular naming\
    \ scope.  If an\n     agent represents a single logical entity, or multiple logical\n\
    \     entities within a single naming scope, then implementation of this\n   \
    \  table may be omitted by the agent.\n   - entPhysicalContainsTable\n     This\
    \ table contains simple mappings between entPhysicalContainedIn\n     values for\
    \ each container/'containee' relationship in the managed\n     system.  The indexing\
    \ of this table allows an NMS to quickly\n     discover the entPhysicalIndex values\
    \ for all children of a given\n     physical entity.\n"
- title: 2.12.4.  entityGeneral Group
  contents:
  - "2.12.4.  entityGeneral Group\n   This group contains general information relating\
    \ to the other object\n   groups.\n   At this time, the entGeneral group contains\
    \ a single scalar object\n   (entLastChangeTime), which represents the value of\
    \ sysUpTime when any\n   part of the Entity MIB configuration last changed.\n"
- title: 2.12.5.  entityNotifications Group
  contents:
  - "2.12.5.  entityNotifications Group\n   This group contains notification definitions\
    \ relating to the overall\n   status of the Entity MIB instantiation.\n"
- title: 2.13.  Multiple Agents
  contents:
  - "2.13.  Multiple Agents\n   Even though a primary motivation for this MIB is to\
    \ represent the\n   multiple logical entities supported by a single agent, another\n\
    \   motivation is to represent multiple logical entities supported by\n   multiple\
    \ agents (in the same \"overall\" physical entity).  Indeed, it\n   is implicit\
    \ in the SNMP architecture that the number of agents is\n   transparent to a network\
    \ management station.\n   However, there is no agreement at this time as to the\
    \ degree of\n   cooperation that should be expected for agent implementations.\n\
    \   Therefore, multiple agents within the same managed system are free to\n  \
    \ implement the Entity MIB independently.  (For more information, refer\n   to\
    \ Section 2.9, \"Multiple Instances of the Entity MIB\".)\n"
- title: 2.14.  Changes Since RFC 2037
  contents:
  - '2.14.  Changes Since RFC 2037

    '
- title: 2.14.1.  Textual Conventions
  contents:
  - "2.14.1.  Textual Conventions\n   The PhysicalClass TC text has been clarified,\
    \ and a new enumeration\n   to support 'stackable' components has been added.\
    \  The\n   SnmpEngineIdOrNone TC has been added to support SNMPv3.\n"
- title: 2.14.2.  New entPhysicalTable Objects
  contents:
  - "2.14.2.  New entPhysicalTable Objects\n   The entPhysicalHardwareRev, entPhysicalFirmwareRev,\
    \ and\n   entPhysicalSoftwareRev objects have been added for revision\n   identification.\n\
    \   The entPhysicalSerialNum, entPhysicalMfgName, entPhysicalModelName,\n   and\
    \ entPhysicalIsFRU objects have been added for better vendor\n   identification\
    \ for physical components.  In the event the agent\n   cannot identify this information,\
    \ the entPhysicalSerialNum object can\n   be set by a management station.\n  \
    \ The entPhysicalAlias and entPhysicalAssetID objects have been added\n   for\
    \ better user component identification.  These objects are intended\n   to be\
    \ set by a management station and preserved by the agent across\n   restarts.\n"
- title: 2.14.3.  New entLogicalTable Objects
  contents:
  - "2.14.3.  New entLogicalTable Objects\n   The entLogicalContextEngineID and entLogicalContextName\
    \ objects have\n   been added to provide an SNMP context for SNMPv3 access on\
    \ behalf of\n   a logical entity.\n"
- title: 2.14.4.  Bug Fixes
  contents:
  - "2.14.4.  Bug Fixes\n   A bug was fixed in the entLogicalCommunity object.  The\
    \ subrange was\n   incorrect (1..255) and is now correct (0..255).  The description\n\
    \   clause has also been clarified.  This object is now deprecated.\n   The entLastChangeTime\
    \ object description has been changed to\n   generalize the events that cause\
    \ an update to the last change\n   timestamp.\n   The syntax was changed from\
    \ DisplayString to SnmpAdminString for the\n   entPhysicalDescr, entPhysicalName,\
    \ and entLogicalDescr objects.\n"
- title: 2.15.  Changes Since RFC 2737
  contents:
  - '2.15.  Changes Since RFC 2737

    '
- title: 2.15.1.  Textual Conventions
  contents:
  - "2.15.1.  Textual Conventions\n   The PhysicalIndexOrZero TC has been added to\
    \ allow objects to\n   reference an entPhysicalIndex value or zero.  The PhysicalClass\
    \ TC\n   has been extended to support a new enumeration for central processing\n\
    \   units.\n"
- title: 2.15.2.  New Objects
  contents:
  - "2.15.2.  New Objects\n   The entPhysicalMfgDate object has been added to the\
    \ entPhysicalTable\n   to provide the date of manufacturing of the managed entity.\n\
    \   The entPhysicalUris object has been added to the entPhysicalTable to\n   provide\
    \ additional identification information about the physical\n   entity, such as\
    \ a Common Language Equipment Identifier (CLEI) URN.\n"
- title: 2.15.3.  Bug Fixes
  contents:
  - "2.15.3.  Bug Fixes\n   The syntax was changed from INTEGER to Integer32 for the\n\
    \   entPhysicalParentRelPos, entLogicalIndex, and\n   entAliasLogicalIndexOrZero\
    \ objects, and from INTEGER to\n   PhysicalIndexOrZero for the entPhysicalContainedIn\
    \ object.\n"
- title: 2.16.  Changes Since RFC 4133
  contents:
  - '2.16.  Changes Since RFC 4133

    '
- title: 2.16.1.  MIB Module Addition
  contents:
  - "2.16.1.  MIB Module Addition\n   Over time, there may be the need to add new\
    \ enumerated values to the\n   PhysicalClass TEXTUAL-CONVENTION.  To allow for\
    \ such additions\n   without requiring re-issuing of this MIB module, a new MIB\
    \ module\n   called IANA-ENTITY-MIB that provides the IANA-maintained TEXTUAL-\n\
    \   CONVENTION IANAPhysicalClass has been created.  The PhysicalClass TC\n   has\
    \ been deprecated.\n"
- title: 2.16.2.  Modification to Some of the MIB Objects
  contents:
  - "2.16.2.  Modification to Some of the MIB Objects\n   A new MIB object has been\
    \ added to the entPhysicalTable,\n   entPhysicalUUID.  In comparison to entPhysicalUris,\
    \ the new object is\n   read-only and restricted to a fixed size to allow only\
    \ for RFC 4122\n   [RFC4122] compliant values.  The PhysicalClass TEXTUAL-CONVENTION\
    \ was\n   deprecated, and a new IANAPhysicalClass TC (maintained by IANA) has\n\
    \   been created.\n   Two new MODULE-COMPLIANCE modules have been created:\n \
    \  entity4Compliance for full compliance with version 4 of the Entity\n   MIB,\
    \ and entity4CRCompliance for devices with constrained resources\n   like batteries\
    \ that might require a limited number of objects to be\n   supported (entPhysicalClass,\
    \ entPhysicalName, and entPhysicalUUID).\n"
- title: 2.16.3.  New TC for Universally Unique Identifier
  contents:
  - "2.16.3.  New TC for Universally Unique Identifier\n   A new TEXTUAL-CONVENTION,\
    \ UUIDorZero, was created to represent a\n   Universally Unique Identifier (UUID)\
    \ with a syntax that conforms to\n   [RFC4122], Section 4.1.  Defining it as a\
    \ TC will allow for future\n   reuse in other MIB modules that will import the\
    \ TC.  This Textual\n   Convention is included in the UUID-TC-MIB module.\n"
- title: 3.  MIB Definitions
  contents:
  - '3.  MIB Definitions

    '
- title: 3.1. ENTITY-MIB
  contents:
  - '3.1. ENTITY-MIB

    '
- title: ENTITY-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'ENTITY-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, mib-2, NOTIFICATION-TYPE,\n    Integer32\n\
    \        FROM SNMPv2-SMI                       -- RFC 2578\n    TDomain, TAddress,\
    \ TEXTUAL-CONVENTION,\n    AutonomousType, RowPointer, TimeStamp, TruthValue,\n\
    \    DateAndTime\n        FROM SNMPv2-TC                        -- RFC 2579\n\
    \    MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP\n        FROM SNMPv2-CONF\
    \                      -- RFC 2580\n    SnmpAdminString\n        FROM SNMP-FRAMEWORK-MIB\
    \               -- RFC 3411\n    UUIDorZero\n        FROM UUID-TC-MIB        \
    \              -- RFC 6933\n    IANAPhysicalClass\n        FROM IANA-ENTITY-MIB;\
    \                 -- RFC 6933\n"
- title: entityMIB MODULE-IDENTITY
  contents:
  - "entityMIB MODULE-IDENTITY\n    LAST-UPDATED \"201304050000Z\"      -- April 5,\
    \ 2013\n    ORGANIZATION \"IETF Energy Management Working Group\"\n    CONTACT-INFO\n\
    \            \"WG Email: eman@ietf.org\n            Mailing list subscription\
    \ info:\n            http://www.ietf.org/mailman/listinfo/eman\n            Andy\
    \ Bierman\n            YumaWorks, Inc.\n            274 Redwood Shores Parkway,\
    \ #133\n            Redwood City, CA 94065\n            USA\n            Phone:\
    \ +1 408-716-0466\n            Email: andy@yumaworks.com\n            Dan Romascanu\n\
    \            Avaya\n            Park Atidim, Bldg. #3\n            Tel Aviv, 61581\n\
    \            Israel\n            Phone: +972-3-6458414\n            Email: dromasca@avaya.com\n\
    \            Juergen Quittek\n            NEC Europe Ltd.\n            Network\
    \ Research Division\n            Kurfuersten-Anlage 36\n            Heidelberg\
    \  69115\n            Germany\n            Phone: +49 6221 4342-115\n        \
    \    Email: quittek@neclab.eu\n            Mouli Chandramouli\n            Cisco\
    \ Systems, Inc.\n            Sarjapur Outer Ring Road\n            Bangalore 560103\n\
    \            India\n            Phone: +91 80 4429 2409\n            Email: moulchan@cisco.com\"\
    \n    DESCRIPTION\n            \"The MIB module for representing multiple logical\n\
    \            entities supported by a single SNMP agent.\n            Copyright\
    \ (c) 2013 IETF Trust and the persons identified\n            as authors of the\
    \ code.  All rights reserved.\n            Redistribution and use in source and\
    \ binary forms, with\n            or without modification, is permitted pursuant\
    \ to, and\n            subject to the license terms contained in, the Simplified\n\
    \            BSD License set forth in Section 4.c of the IETF Trust's\n      \
    \      Legal Provisions Relating to IETF Documents\n            (http://trustee.ietf.org/license-info).\"\
    \n    REVISION        \"201304050000Z\"      -- April 5, 2013\n    DESCRIPTION\n\
    \            \"Entity MIB (Version 4).\n            This revision obsoletes RFC\
    \ 4133.\n            - Creation of a new MIB module, IANA-ENTITY-MIB, which\n\
    \            makes the PhysicalIndex TC an IANA-maintained TEXTUAL-\n        \
    \    CONVENTION.  IANAPhysicalClass is now imported\n            from the IANA-ENTITY-MIB.\n\
    \            - Addition of a new MIB object to the entPhysicalTable,\n       \
    \     entPhysicalUUID.  UUIDorZero is imported from the\n            UUID-TC-MIB.\n\
    \            - Addition of two new MODULE-COMPLIANCE modules-\n            entity4Compliance\
    \ and entity4CRCompliance.\n            This version is published as RFC 6933.\"\
    \n    REVISION        \"200508100000Z\"\n    DESCRIPTION\n            \"Initial\
    \ Version of Entity MIB (Version 3).\n             This revision obsoletes RFC\
    \ 2737.\n             Additions:\n               - cpu(12) enumeration added to\
    \ IANAPhysicalClass TC\n               - DISPLAY-HINT clause to PhysicalIndex\
    \ TC\n               - PhysicalIndexOrZero TC\n               - entPhysicalMfgDate\
    \ object\n               - entPhysicalUris object\n             Changes:\n   \
    \            - entPhysicalContainedIn SYNTAX changed from\n                 INTEGER\
    \ to PhysicalIndexOrZero\n             This version was published as RFC 4133.\"\
    \n    REVISION        \"199912070000Z\"\n    DESCRIPTION\n            \"Initial\
    \ Version of Entity MIB (Version 2).\n             This revision obsoletes RFC\
    \ 2037.\n             This version was published as RFC 2737.\"\n    REVISION\
    \        \"199610310000Z\"\n    DESCRIPTION\n            \"Initial version (version\
    \ 1), published as\n             RFC 2037.\"\n    ::= { mib-2 47 }\n"
- title: entityMIBObjects OBJECT IDENTIFIER ::= { entityMIB 1 }
  contents:
  - 'entityMIBObjects OBJECT IDENTIFIER ::= { entityMIB 1 }

    '
- title: -- MIB contains four groups
  contents:
  - '-- MIB contains four groups

    '
- title: entityPhysical OBJECT IDENTIFIER ::= { entityMIBObjects 1 }
  contents:
  - 'entityPhysical OBJECT IDENTIFIER ::= { entityMIBObjects 1 }

    '
- title: entityLogical  OBJECT IDENTIFIER ::= { entityMIBObjects 2 }
  contents:
  - 'entityLogical  OBJECT IDENTIFIER ::= { entityMIBObjects 2 }

    '
- title: entityMapping  OBJECT IDENTIFIER ::= { entityMIBObjects 3 }
  contents:
  - 'entityMapping  OBJECT IDENTIFIER ::= { entityMIBObjects 3 }

    '
- title: entityGeneral  OBJECT IDENTIFIER ::= { entityMIBObjects 4 }
  contents:
  - 'entityGeneral  OBJECT IDENTIFIER ::= { entityMIBObjects 4 }

    '
- title: -- Textual Conventions
  contents:
  - '-- Textual Conventions

    '
- title: PhysicalIndex ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalIndex ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT      \"d\"\n    STATUS\
    \            current\n    DESCRIPTION\n            \"An arbitrary value that uniquely\
    \ identifies the physical\n            entity.  The value should be a small positive\
    \ integer.\n            Index values for different physical entities are not\n\
    \            necessarily contiguous.\"\n    SYNTAX Integer32 (1..2147483647)\n"
- title: PhysicalIndexOrZero ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalIndexOrZero ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT      \"d\"\n   \
    \ STATUS            current\n    DESCRIPTION\n            \"This TEXTUAL-CONVENTION\
    \ is an extension of the\n            PhysicalIndex convention, which defines\
    \ a greater than zero\n            value used to identify a physical entity. \
    \ This extension\n            permits the additional value of zero.  The semantics\
    \ of the\n            value zero are object-specific and must, therefore, be\n\
    \            defined as part of the description of any object that uses\n    \
    \        this syntax.  Examples of the usage of this extension are\n         \
    \   situations where none or all physical entities need to be\n            referenced.\"\
    \n    SYNTAX Integer32 (0..2147483647)\n"
- title: SnmpEngineIdOrNone ::= TEXTUAL-CONVENTION
  contents:
  - "SnmpEngineIdOrNone ::= TEXTUAL-CONVENTION\n    STATUS            current\n  \
    \  DESCRIPTION\n            \"A specially formatted SnmpEngineID string for use\
    \ with the\n            Entity MIB.\n            If an instance of an object of\
    \ SYNTAX SnmpEngineIdOrNone has\n            a non-zero length, then the object\
    \ encoding and semantics\n            are defined by the SnmpEngineID TEXTUAL-CONVENTION\
    \ (see STD\n            62, RFC 3411).\n            If an instance of an object\
    \ of SYNTAX SnmpEngineIdOrNone\n            contains a zero-length string, then\
    \ no appropriate\n            SnmpEngineID is associated with the logical entity\
    \ (i.e.,\n            SNMPv3 is not supported).\"\n    SYNTAX OCTET STRING (SIZE(0..32))\
    \ -- empty string or SnmpEngineID\n"
- title: PhysicalClass ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalClass ::= TEXTUAL-CONVENTION\n    STATUS            deprecated\n    DESCRIPTION\n\
    \            \"Starting with version 4 of the ENTITY-MIB, this TC is\n       \
    \     deprecated, and the usage of the IANAPhysicalClass TC from\n           \
    \ the IANA-ENTITY-MIB is recommended instead.\n            An enumerated value\
    \ that provides an indication of the\n            general hardware type of a particular\
    \ physical entity.\n            There are no restrictions as to the number of\n\
    \            entPhysicalEntries of each entPhysicalClass, which must be\n    \
    \        instantiated by an agent.\n            The enumeration 'other' is applicable\
    \ if the physical entity\n            class is known but does not match any of\
    \ the supported\n            values.\n            The enumeration 'unknown' is\
    \ applicable if the physical\n            entity class is unknown to the agent.\n\
    \            The enumeration 'chassis' is applicable if the physical\n       \
    \     entity class is an overall container for networking\n            equipment.\
    \  Any class of physical entity, except a stack,\n            may be contained\
    \ within a chassis; a chassis may only\n            be contained within a stack.\n\
    \            The enumeration 'backplane' is applicable if the physical\n     \
    \       entity class is some sort of device for aggregating and\n            forwarding\
    \ networking traffic, such as a shared backplane in\n            a modular ethernet\
    \ switch.  Note that an agent may model a\n            backplane as a single physical\
    \ entity, which is actually\n            implemented as multiple discrete physical\
    \ components (within\n            a chassis or stack).\n            The enumeration\
    \ 'container' is applicable if the physical\n            entity class is capable\
    \ of containing one or more removable\n            physical entities, possibly\
    \ of different types.  For\n            example, each (empty or full) slot in\
    \ a chassis will be\n            modeled as a container.  Note that all removable\
    \ physical\n            entities should be modeled within a container entity,\
    \ such\n            as field-replaceable modules, fans, or power supplies.  Note\n\
    \            that all known containers should be modeled by the agent,\n     \
    \       including empty containers.\n            The enumeration 'powerSupply'\
    \ is applicable if the physical\n            entity class is a power-supplying\
    \ component.\n            The enumeration 'fan' is applicable if the physical\
    \ entity\n            class is a fan or other heat-reduction component.\n    \
    \        The enumeration 'sensor' is applicable if the physical\n            entity\
    \ class is some sort of sensor, such as a temperature\n            sensor within\
    \ a router chassis.\n            The enumeration 'module' is applicable if the\
    \ physical\n            entity class is some sort of self-contained sub-system.\
    \  If\n            the enumeration 'module' is removable, then it should be\n\
    \            modeled within a container entity; otherwise, it should be\n    \
    \        modeled directly within another physical entity (e.g., a\n          \
    \  chassis or another module).\n            The enumeration 'port' is applicable\
    \ if the physical entity\n            class is some sort of networking port capable\
    \ of receiving\n            and/or transmitting networking traffic.\n        \
    \    The enumeration 'stack' is applicable if the physical entity\n          \
    \  class is some sort of super-container (possibly virtual)\n            intended\
    \ to group together multiple chassis entities.  A\n            stack may be realized\
    \ by a 'virtual' cable, a real\n            interconnect cable, attached to multiple\
    \ chassis, or may in\n            fact be comprised of multiple interconnect cables.\
    \  A stack\n            should not be modeled within any other physical entities,\n\
    \            but a stack may be contained within another stack.  Only\n      \
    \      chassis entities should be contained within a stack.\n            The enumeration\
    \ 'cpu' is applicable if the physical entity\n            class is some sort of\
    \ central processing unit.\"\n    SYNTAX      INTEGER  {\n       other(1),\n \
    \      unknown(2),\n       chassis(3),\n       backplane(4),\n       container(5),\
    \     -- e.g., chassis slot or daughter-card holder\n       powerSupply(6),\n\
    \       fan(7),\n       sensor(8),\n       module(9),        -- e.g., plug-in\
    \ card or daughter-card\n       port(10),\n       stack(11),        -- e.g., stack\
    \ of multiple chassis entities\n       cpu(12)\n    }\n"
- title: --           The Physical Entity Table
  contents:
  - '--           The Physical Entity Table

    '
- title: entPhysicalTable OBJECT-TYPE
  contents:
  - "entPhysicalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntPhysicalEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains one row per physical entity.  There is\n    \
    \        always at least one row for an 'overall' physical entity.\"\n    ::=\
    \ { entityPhysical 1 }\n"
- title: entPhysicalEntry       OBJECT-TYPE
  contents:
  - "entPhysicalEntry       OBJECT-TYPE\n    SYNTAX      EntPhysicalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular physical entity.\n            Each entry provides objects\
    \ (entPhysicalDescr,\n            entPhysicalVendorType, and entPhysicalClass)\
    \ to help an NMS\n            identify and characterize the entry and objects\n\
    \            (entPhysicalContainedIn and entPhysicalParentRelPos) to help\n  \
    \          an NMS relate the particular entry to other entries in this\n     \
    \       table.\"\n    INDEX   { entPhysicalIndex }\n    ::= { entPhysicalTable\
    \ 1 }\n"
- title: EntPhysicalEntry ::= SEQUENCE {
  contents:
  - "EntPhysicalEntry ::= SEQUENCE {\n      entPhysicalIndex          PhysicalIndex,\n\
    \      entPhysicalDescr          SnmpAdminString,\n      entPhysicalVendorType\
    \     AutonomousType,\n      entPhysicalContainedIn    PhysicalIndexOrZero,\n\
    \      entPhysicalClass          IANAPhysicalClass,\n      entPhysicalParentRelPos\
    \   Integer32,\n      entPhysicalName           SnmpAdminString,\n      entPhysicalHardwareRev\
    \    SnmpAdminString,\n      entPhysicalFirmwareRev    SnmpAdminString,\n    \
    \  entPhysicalSoftwareRev    SnmpAdminString,\n      entPhysicalSerialNum    \
    \  SnmpAdminString,\n      entPhysicalMfgName        SnmpAdminString,\n      entPhysicalModelName\
    \      SnmpAdminString,\n      entPhysicalAlias          SnmpAdminString,\n  \
    \    entPhysicalAssetID        SnmpAdminString,\n      entPhysicalIsFRU      \
    \    TruthValue,\n      entPhysicalMfgDate        DateAndTime,\n      entPhysicalUris\
    \           OCTET STRING,\n      entPhysicalUUID           UUIDorZero\n"
- title: '}'
  contents:
  - '}

    '
- title: entPhysicalIndex    OBJECT-TYPE
  contents:
  - "entPhysicalIndex    OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ index for this entry.\"\n    ::= { entPhysicalEntry 1 }\n"
- title: entPhysicalDescr OBJECT-TYPE
  contents:
  - "entPhysicalDescr OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"A textual\
    \ description of physical entity.  This object\n            should contain a string\
    \ that identifies the manufacturer's\n            name for the physical entity\
    \ and should be set to a\n            distinct value for each version or model\
    \ of the physical\n            entity.\"\n    ::= { entPhysicalEntry 2 }\n"
- title: entPhysicalVendorType OBJECT-TYPE
  contents:
  - "entPhysicalVendorType OBJECT-TYPE\n    SYNTAX      AutonomousType\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"An indication\
    \ of the vendor-specific hardware type of the\n            physical entity.  Note\
    \ that this is different from the\n            definition of MIB-II's sysObjectID.\n\
    \            An agent should set this object to an enterprise-specific\n     \
    \       registration identifier value indicating the specific\n            equipment\
    \ type in detail.  The associated instance of\n            entPhysicalClass is\
    \ used to indicate the general type of\n            hardware device.\n       \
    \     If no vendor-specific registration identifier exists for\n            this\
    \ physical entity, or the value is unknown by this agent,\n            then the\
    \ value { 0 0 } is returned.\"\n    ::= { entPhysicalEntry 3 }\n"
- title: entPhysicalContainedIn OBJECT-TYPE
  contents:
  - "entPhysicalContainedIn OBJECT-TYPE\n    SYNTAX      PhysicalIndexOrZero\n   \
    \ MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n          \
    \  \"The value of entPhysicalIndex for the physical entity that\n            'contains'\
    \ this physical entity.  A value of zero indicates\n            this physical\
    \ entity is not contained in any other physical\n            entity.  Note that\
    \ the set of 'containment' relationships\n            define a strict hierarchy;\
    \ that is, recursion is not\n            allowed.\n            In the event that\
    \ a physical entity is contained by more\n            than one physical entity\
    \ (e.g., double-wide modules), this\n            object should identify the containing\
    \ entity with the lowest\n            value of entPhysicalIndex.\"\n    ::= {\
    \ entPhysicalEntry 4 }\n"
- title: entPhysicalClass OBJECT-TYPE
  contents:
  - "entPhysicalClass OBJECT-TYPE\n    SYNTAX      IANAPhysicalClass\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"An indication\
    \ of the general hardware type of the physical\n            entity.\n        \
    \    An agent should set this object to the standard enumeration\n           \
    \ value that most accurately indicates the general class of\n            the physical\
    \ entity, or the primary class if there is more\n            than one entity.\n\
    \            If no appropriate standard registration identifier exists\n     \
    \       for this physical entity, then the value 'other(1)' is\n            returned.\
    \  If the value is unknown by this agent, then the\n            value 'unknown(2)'\
    \ is returned.\"\n    ::= { entPhysicalEntry 5 }\n"
- title: entPhysicalParentRelPos OBJECT-TYPE
  contents:
  - "entPhysicalParentRelPos OBJECT-TYPE\n    SYNTAX      Integer32 (-1..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"An indication of the relative position of this 'child'\n            component\
    \ among all its 'sibling' components.  Sibling\n            components are defined\
    \ as entPhysicalEntries that share the\n            same instance values of each\
    \ of the entPhysicalContainedIn\n            and entPhysicalClass objects.\n \
    \           An NMS can use this object to identify the relative ordering\n   \
    \         for all sibling components of a particular parent\n            (identified\
    \ by the entPhysicalContainedIn instance in each\n            sibling entry).\n\
    \            If possible, this value should match any external labeling\n    \
    \        of the physical component.  For example, for a container\n          \
    \  (e.g., card slot) labeled as 'slot #3',\n            entPhysicalParentRelPos\
    \ should have the value '3'.  Note\n            that the entPhysicalEntry for\
    \ the module plugged in slot 3\n            should have an entPhysicalParentRelPos\
    \ value of '1'.\n            If the physical position of this component does not\
    \ match\n            any external numbering or clearly visible ordering, then\n\
    \            user documentation or other external reference material\n       \
    \     should be used to determine the parent-relative position.\n            If\
    \ this is not possible, then the agent should assign a\n            consistent\
    \ (but possibly arbitrary) ordering to a given set\n            of 'sibling' components,\
    \ perhaps based on internal\n            representation of the components.\n \
    \           If the agent cannot determine the parent-relative position\n     \
    \       for some reason, or if the associated value of\n            entPhysicalContainedIn\
    \ is '0', then the value '-1' is\n            returned.  Otherwise, a non-negative\
    \ integer is returned,\n            indicating the parent-relative position of\
    \ this physical\n            entity.\n            Parent-relative ordering normally\
    \ starts from '1' and\n            continues to 'N', where 'N' represents the\
    \ highest\n            positioned child entity.  However, if the physical entities\n\
    \            (e.g., slots) are labeled from a starting position of zero,\n   \
    \         then the first sibling should be associated with an\n            entPhysicalParentRelPos\
    \ value of '0'.  Note that this\n            ordering may be sparse or dense,\
    \ depending on agent\n            implementation.\n            The actual values\
    \ returned are not globally meaningful, as\n            each 'parent' component\
    \ may use different numbering\n            algorithms.  The ordering is only meaningful\
    \ among siblings\n            of the same parent component.\n            The agent\
    \ should retain parent-relative position values\n            across reboots, either\
    \ through algorithmic assignment or use\n            of non-volatile storage.\"\
    \n    ::= { entPhysicalEntry 6 }\n"
- title: entPhysicalName OBJECT-TYPE
  contents:
  - "entPhysicalName OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The textual\
    \ name of the physical entity.  The value of this\n            object should be\
    \ the name of the component as assigned by\n            the local device and should\
    \ be suitable for use in commands\n            entered at the device's 'console'.\
    \  This might be a text\n            name (e.g., 'console') or a simple component\
    \ number (e.g.,\n            port or module number, such as '1'), depending on\
    \ the\n            physical component naming syntax of the device.\n         \
    \   If there is no local name, or if this object is otherwise\n            not\
    \ applicable, then this object contains a zero-length\n            string.\n \
    \           Note that the value of entPhysicalName for two physical\n        \
    \    entities will be the same in the event that the console\n            interface\
    \ does not distinguish between them, e.g., slot-1\n            and the card in\
    \ slot-1.\"\n    ::= { entPhysicalEntry 7 }\n"
- title: entPhysicalHardwareRev    OBJECT-TYPE
  contents:
  - "entPhysicalHardwareRev    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ hardware revision string for the\n            physical entity.  The preferred\
    \ value is the hardware\n            revision identifier actually printed on the\
    \ component itself\n            (if present).\n            Note that if revision\
    \ information is stored internally in a\n            non-printable (e.g., binary)\
    \ format, then the agent must\n            convert such information to a printable\
    \ format in an\n            implementation-specific manner.\n            If no\
    \ specific hardware revision string is associated with\n            the physical\
    \ component, or if this information is unknown to\n            the agent, then\
    \ this object will contain a zero-length\n            string.\"\n    ::= { entPhysicalEntry\
    \ 8 }\n"
- title: entPhysicalFirmwareRev    OBJECT-TYPE
  contents:
  - "entPhysicalFirmwareRev    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ firmware revision string for the\n            physical entity.\n           \
    \ Note that if revision information is stored internally in a\n            non-printable\
    \ (e.g., binary) format, then the agent must\n            convert such information\
    \ to a printable format in an\n            implementation-specific manner.\n \
    \           If no specific firmware programs are associated with the\n       \
    \     physical component, or if this information is unknown to the\n         \
    \   agent, then this object will contain a zero-length string.\"\n    ::= { entPhysicalEntry\
    \ 9 }\n"
- title: entPhysicalSoftwareRev    OBJECT-TYPE
  contents:
  - "entPhysicalSoftwareRev    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ software revision string for the\n            physical entity.\n           \
    \ Note that if revision information is stored internally in a\n            non-printable\
    \ (e.g., binary) format, then the agent must\n            convert such information\
    \ to a printable format in an\n            implementation-specific manner.\n \
    \           If no specific software programs are associated with the\n       \
    \     physical component, or if this information is unknown to the\n         \
    \   agent, then this object will contain a zero-length string.\"\n    ::= { entPhysicalEntry\
    \ 10 }\n"
- title: entPhysicalSerialNum   OBJECT-TYPE
  contents:
  - "entPhysicalSerialNum   OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \      \"The vendor-specific serial number string for the physical\n         \
    \   entity.  The preferred value is the serial number string\n            actually\
    \ printed on the component itself (if present).\n            On the first instantiation\
    \ of a physical entity, the value\n            of entPhysicalSerialNum associated\
    \ with that entity is set\n            to the correct vendor-assigned serial number,\
    \ if this\n            information is available to the agent.  If a serial number\n\
    \            is unknown or non-existent, the entPhysicalSerialNum will be\n  \
    \          set to a zero-length string instead.\n            Note that implementations\
    \ that can correctly identify the\n            serial numbers of all installed\
    \ physical entities do not\n            need to provide write access to the entPhysicalSerialNum\n\
    \            object.  Agents that cannot provide non-volatile storage\n      \
    \      for the entPhysicalSerialNum strings are not required to\n            implement\
    \ write access for this object.\n            Not every physical component will\
    \ have a serial number, or\n            even need one.  Physical entities for\
    \ which the associated\n            value of the entPhysicalIsFRU object is equal\
    \ to 'false(2)'\n            (e.g., the repeater ports within a repeater module)\
    \ do not\n            need their own unique serial numbers.  An agent does not\n\
    \            have to provide write access for such entities and may\n        \
    \    return a zero-length string.\n            If write access is implemented\
    \ for an instance of\n            entPhysicalSerialNum and a value is written\
    \ into the\n            instance, the agent must retain the supplied value in\
    \ the\n            entPhysicalSerialNum instance (associated with the same\n \
    \           physical entity) for as long as that entity remains\n            instantiated.\
    \  This includes instantiations across all\n            re-initializations/reboots\
    \ of the network management system,\n            including those resulting in\
    \ a change of the physical\n            entity's entPhysicalIndex value.\"\n \
    \   ::= { entPhysicalEntry 11 }\n"
- title: entPhysicalMfgName   OBJECT-TYPE
  contents:
  - "entPhysicalMfgName   OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The name\
    \ of the manufacturer of this physical component.\n            The preferred value\
    \ is the manufacturer name string actually\n            printed on the component\
    \ itself (if present).\n            Note that comparisons between instances of\
    \ the\n            entPhysicalModelName, entPhysicalFirmwareRev,\n           \
    \ entPhysicalSoftwareRev, and the entPhysicalSerialNum\n            objects are\
    \ only meaningful amongst entPhysicalEntries with\n            the same value\
    \ of entPhysicalMfgName.\n            If the manufacturer name string associated\
    \ with the physical\n            component is unknown to the agent, then this\
    \ object will\n            contain a zero-length string.\"\n    ::= { entPhysicalEntry\
    \ 12 }\n"
- title: entPhysicalModelName   OBJECT-TYPE
  contents:
  - "entPhysicalModelName   OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ model name identifier string associated\n            with this physical component.\
    \  The preferred value is the\n            customer-visible part number, which\
    \ may be printed on the\n            component itself.\n            If the model\
    \ name string associated with the physical\n            component is unknown to\
    \ the agent, then this object will\n            contain a zero-length string.\"\
    \n    ::= { entPhysicalEntry 13 }\n"
- title: entPhysicalAlias    OBJECT-TYPE
  contents:
  - "entPhysicalAlias    OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \      \"This object is an 'alias' name for the physical entity, as\n        \
    \    specified by a network manager, and provides a non-volatile\n           \
    \ 'handle' for the physical entity.\n            On the first instantiation of\
    \ a physical entity, the value\n            of entPhysicalAlias associated with\
    \ that entity is set to\n            the zero-length string.  However, the agent\
    \ may set the\n            value to a locally unique default value, instead of\
    \ a\n            zero-length string.\n            If write access is implemented\
    \ for an instance of\n            entPhysicalAlias and a value is written into\
    \ the instance,\n            the agent must retain the supplied value in the\n\
    \            entPhysicalAlias instance (associated with the same physical\n  \
    \          entity) for as long as that entity remains instantiated.\n        \
    \    This includes instantiations across all\n            re-initializations/reboots\
    \ of the network management system,\n            including those resulting in\
    \ a change of the physical\n            entity's entPhysicalIndex value.\"\n \
    \   ::= { entPhysicalEntry 14 }\n"
- title: entPhysicalAssetID OBJECT-TYPE
  contents:
  - "entPhysicalAssetID OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \      \"This object is a user-assigned asset tracking identifier\n          \
    \  (as specified by a network manager) for the physical entity\n            and\
    \ provides non-volatile storage of this information.\n            On the first\
    \ instantiation of a physical entity, the value\n            of entPhysicalAssetID\
    \ associated with that entity is set to\n            the zero-length string.\n\
    \            Not every physical component will have an asset tracking\n      \
    \      identifier or even need one.  Physical entities for which\n           \
    \ the associated value of the entPhysicalIsFRU object is equal\n            to\
    \ 'false(2)' (e.g., the repeater ports within a repeater\n            module)\
    \ do not need their own unique asset tracking\n            identifier.  An agent\
    \ does not have to provide write access\n            for such entities and may\
    \ instead return a zero-length\n            string.\n            If write access\
    \ is implemented for an instance of\n            entPhysicalAssetID and a value\
    \ is written into the\n            instance, the agent must retain the supplied\
    \ value in the\n            entPhysicalAssetID instance (associated with the same\n\
    \            physical entity) for as long as that entity remains\n           \
    \ instantiated.  This includes instantiations across all\n            re-initializations/reboots\
    \ of the network management system,\n            including those resulting in\
    \ a change of the physical\n            entity's entPhysicalIndex value.\n   \
    \         If no asset tracking information is associated with the\n          \
    \  physical component, then this object will contain a\n            zero-length\
    \ string.\"\n    ::= { entPhysicalEntry 15 }\n"
- title: entPhysicalIsFRU OBJECT-TYPE
  contents:
  - "entPhysicalIsFRU OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"This object indicates\
    \ whether or not this physical entity\n            is considered a 'field replaceable\
    \ unit' by the vendor.\n            If this object contains the value 'true(1)',\
    \ then this\n            entPhysicalEntry identifies a field replaceable unit.\
    \  For\n            all entPhysicalEntries that represent components\n       \
    \     permanently contained within a field replaceable unit, the\n           \
    \ value 'false(2)' should be returned for this object.\"\n    ::= { entPhysicalEntry\
    \ 16 }\n"
- title: entPhysicalMfgDate  OBJECT-TYPE
  contents:
  - "entPhysicalMfgDate  OBJECT-TYPE\n    SYNTAX      DateAndTime\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"This object\
    \ contains the date of manufacturing of the\n            managed entity.  If the\
    \ manufacturing date is unknown or\n            not supported, the object is not\
    \ instantiated.  The special\n            value '0000000000000000'H may also be\
    \ returned in this\n            case.\"\n    ::= { entPhysicalEntry 17 }\n"
- title: entPhysicalUris OBJECT-TYPE
  contents:
  - "entPhysicalUris OBJECT-TYPE\n    SYNTAX      OCTET STRING\n    MAX-ACCESS  read-write\n\
    \    STATUS      current\n    DESCRIPTION\n            \"This object contains\
    \ identification\n            information about the physical entity.  The object\n\
    \            contains URIs; therefore, the syntax of this object\n           \
    \ must conform to RFC 3986, Section 3.\n            Multiple URIs may be present\
    \ and are separated by white\n            space characters.  Leading and trailing\
    \ white space\n            characters are ignored.\n            If no URI identification\
    \ information is known\n            about the physical entity, the object is not\n\
    \            instantiated.  A zero-length octet string may also be\n         \
    \   returned in this case.\"\n    REFERENCE\n            \"RFC 3986, Uniform Resource\
    \ Identifiers (URI): Generic\n            Syntax, Section 2, August 1998.\"\n\
    \    ::= { entPhysicalEntry 18 }\n"
- title: entPhysicalUUID OBJECT-TYPE
  contents:
  - "entPhysicalUUID OBJECT-TYPE\n    SYNTAX      UUIDorZero\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"This object contains\
    \ identification information\n            about the physical entity.  The object\
    \ contains a\n            Universally Unique Identifier, the syntax of this object\n\
    \            must conform to RFC 4122, Section 4.1.\n            A zero-length\
    \ octet string is returned if no UUID\n            information is known.\"\n \
    \   REFERENCE\n            \"RFC 4122, A Universally Unique IDentifier (UUID)\
    \ URN\n            Namespace, Section 4.1, July 2005.\"\n    ::= { entPhysicalEntry\
    \ 19 }\n"
- title: --           The Logical Entity Table
  contents:
  - '--           The Logical Entity Table

    '
- title: entLogicalTable OBJECT-TYPE
  contents:
  - "entLogicalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntLogicalEntry\n  \
    \  MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n    \
    \        \"This table contains one row per logical entity.  For agents\n     \
    \       that implement more than one naming scope, at least one\n            entry\
    \ must exist.  Agents that instantiate all MIB objects\n            within a single\
    \ naming scope are not required to implement\n            this table.\"\n    ::=\
    \ { entityLogical 1 }\n"
- title: entLogicalEntry       OBJECT-TYPE
  contents:
  - "entLogicalEntry       OBJECT-TYPE\n    SYNTAX      EntLogicalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular logical entity.  Entities\n            may be managed by\
    \ this agent or other SNMP agents (possibly)\n            in the same chassis.\"\
    \n    INDEX       { entLogicalIndex }\n    ::= { entLogicalTable 1 }\n"
- title: EntLogicalEntry ::= SEQUENCE {
  contents:
  - "EntLogicalEntry ::= SEQUENCE {\n      entLogicalIndex            Integer32,\n\
    \      entLogicalDescr            SnmpAdminString,\n      entLogicalType     \
    \        AutonomousType,\n      entLogicalCommunity        OCTET STRING,\n   \
    \   entLogicalTAddress         TAddress,\n      entLogicalTDomain          TDomain,\n\
    \      entLogicalContextEngineID  SnmpEngineIdOrNone,\n      entLogicalContextName\
    \      SnmpAdminString\n"
- title: '}'
  contents:
  - '}

    '
- title: entLogicalIndex OBJECT-TYPE
  contents:
  - "entLogicalIndex OBJECT-TYPE\n    SYNTAX      Integer32 (1..2147483647)\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ value of this object uniquely identifies the logical\n            entity.  The\
    \ value should be a small positive integer; index\n            values for different\
    \ logical entities are not necessarily\n            contiguous.\"\n    ::= { entLogicalEntry\
    \ 1 }\n"
- title: entLogicalDescr OBJECT-TYPE
  contents:
  - "entLogicalDescr OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"A textual\
    \ description of the logical entity.  This object\n            should contain\
    \ a string that identifies the manufacturer's\n            name for the logical\
    \ entity and should be set to a distinct\n            value for each version of\
    \ the logical entity.\"\n    ::= { entLogicalEntry 2 }\n"
- title: entLogicalType OBJECT-TYPE
  contents:
  - "entLogicalType OBJECT-TYPE\n    SYNTAX      AutonomousType\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"An indication of the\
    \ type of logical entity.  This will\n            typically be the OBJECT IDENTIFIER\
    \ name of the node in the\n            SMI's naming hierarchy that represents\
    \ the major MIB\n            module, or the majority of the MIB modules, supported\
    \ by the\n            logical entity.  For example:\n               a logical\
    \ entity of a regular host/router -> mib-2\n               a logical entity of\
    \ a 802.1d bridge -> dot1dBridge\n               a logical entity of a 802.3 repeater\
    \ -> snmpDot3RptrMgmt\n            If an appropriate node in the SMI's naming\
    \ hierarchy cannot\n            be identified, the value 'mib-2' should be used.\"\
    \n    ::= { entLogicalEntry 3 }\n"
- title: entLogicalCommunity OBJECT-TYPE
  contents:
  - "entLogicalCommunity OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (0..255))\n\
    \    MAX-ACCESS  read-only\n    STATUS      deprecated\n    DESCRIPTION\n    \
    \        \"An SNMPv1 or SNMPv2c community string, which can be used to\n     \
    \       access detailed management information for this logical\n            entity.\
    \  The agent should allow read access with this\n            community string\
    \ (to an appropriate subset of all managed\n            objects) and may also\
    \ return a community string based on the\n            privileges of the request\
    \ used to read this object.  Note\n            that an agent may return a community\
    \ string with read-only\n            privileges, even if this object is accessed\
    \ with a\n            read-write community string.  However, the agent must take\n\
    \            care not to return a community string that allows more\n        \
    \    privileges than the community string used to access this\n            object.\n\
    \            A compliant SNMP agent may wish to conserve naming scopes by\n  \
    \          representing multiple logical entities in a single 'default'\n    \
    \        naming scope.  This is possible when the logical entities,\n        \
    \    represented by the same value of entLogicalCommunity, have\n            no\
    \ object instances in common.  For example, 'bridge1' and\n            'repeater1'\
    \ may be part of the main naming scope, but at\n            least one additional\
    \ community string is needed to represent\n            'bridge2' and 'repeater2'.\n\
    \            Logical entities 'bridge1' and 'repeater1' would be\n           \
    \ represented by sysOREntries associated with the 'default'\n            naming\
    \ scope.\n            For agents not accessible via SNMPv1 or SNMPv2c, the value\n\
    \            of this object is the empty string.  This object may also\n     \
    \       contain an empty string if a community string has not yet\n          \
    \  been assigned by the agent or if no community string with\n            suitable\
    \ access rights can be returned for a particular SNMP\n            request.\n\
    \            Note that this object is deprecated.  Agents that implement\n   \
    \         SNMPv3 access should use the entLogicalContextEngineID and\n       \
    \     entLogicalContextName objects to identify the context\n            associated\
    \ with each logical entity.  SNMPv3 agents may\n            return a zero-length\
    \ string for this object or may continue\n            to return a community string\
    \ (e.g., tri-lingual agent\n            support).\"\n    ::= { entLogicalEntry\
    \ 4 }\n"
- title: entLogicalTAddress OBJECT-TYPE
  contents:
  - "entLogicalTAddress OBJECT-TYPE\n    SYNTAX      TAddress\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The transport service\
    \ address by which the logical entity\n            receives network management\
    \ traffic, formatted according to\n            the corresponding value of entLogicalTDomain.\n\
    \            For snmpUDPDomain, a TAddress is 6 octets long: the initial\n   \
    \         4 octets contain the IP-address in network-byte order, and\n       \
    \     the last 2 contain the UDP port in network-byte order.\n            Consult\
    \ RFC 3417 for further information on snmpUDPDomain.\"\n    REFERENCE\n      \
    \      \"Transport Mappings for the Simple Network Management\n            Protocol\
    \ (SNMP), STD 62, RFC 3417.\"\n    ::= { entLogicalEntry 5 }\n"
- title: entLogicalTDomain OBJECT-TYPE
  contents:
  - "entLogicalTDomain OBJECT-TYPE\n    SYNTAX      TDomain\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"Indicates the kind of\
    \ transport service by which the\n            logical entity receives network\
    \ management traffic.\n            Possible values for this object are presently\
    \ found in\n            RFC 3417.\"\n    REFERENCE\n            \"Transport Mappings\
    \ for the Simple Network Management\n            Protocol (SNMP), STD 62, RFC\
    \ 3417.\"\n    ::= { entLogicalEntry 6 }\n"
- title: entLogicalContextEngineID    OBJECT-TYPE
  contents:
  - "entLogicalContextEngineID    OBJECT-TYPE\n    SYNTAX      SnmpEngineIdOrNone\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"The authoritative contextEngineID that can be used to send\n         \
    \   an SNMP message concerning information held by this logical\n            entity\
    \ to the address specified by the associated\n            'entLogicalTAddress/entLogicalTDomain'\
    \ pair.\n            This object, together with the associated\n            entLogicalContextName\
    \ object, defines the context associated\n            with a particular logical\
    \ entity and allows access to SNMP\n            engines identified by a contextEngineID\
    \ and contextName\n            pair.\n            If no value has been configured\
    \ by the agent, a zero-length\n            string is returned, or the agent may\
    \ choose not to\n            instantiate this object at all.\"\n    ::= { entLogicalEntry\
    \ 7 }\n"
- title: entLogicalContextName    OBJECT-TYPE
  contents:
  - "entLogicalContextName    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The contextName\
    \ that can be used to send an SNMP message\n            concerning information\
    \ held by this logical entity to the\n            address specified by the associated\n\
    \            'entLogicalTAddress/entLogicalTDomain' pair.\n            This object,\
    \ together with the associated\n            entLogicalContextEngineID object,\
    \ defines the context\n            associated with a particular logical entity\
    \ and allows\n            access to SNMP engines identified by a contextEngineID\
    \ and\n            contextName pair.\n            If no value has been configured\
    \ by the agent, a zero-length\n            string is returned, or the agent may\
    \ choose not to\n            instantiate this object at all.\"\n    ::= { entLogicalEntry\
    \ 8 }\n"
- title: entLPMappingTable OBJECT-TYPE
  contents:
  - "entLPMappingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntLPMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains zero or more rows of logical entity to\n    \
    \        physical equipment associations.  For each logical entity\n         \
    \   known by this agent, there are zero or more mappings to the\n            physical\
    \ resources, which are used to realize that logical\n            entity.\n   \
    \         An agent should limit the number and nature of entries in\n        \
    \    this table such that only meaningful and non-redundant\n            information\
    \ is returned.  For example, in a system that\n            contains a single power\
    \ supply, mappings between logical\n            entities and the power supply\
    \ are not useful and should not\n            be included.\n            Also, only\
    \ the most appropriate physical component, which is\n            closest to the\
    \ root of a particular containment tree, should\n            be identified in\
    \ an entLPMapping entry.\n            For example, suppose a bridge is realized\
    \ on a particular\n            module, and all ports on that module are ports\
    \ on this\n            bridge.  A mapping between the bridge and the module would\n\
    \            be useful, but additional mappings between the bridge and\n     \
    \       each of the ports on that module would be redundant (because\n       \
    \     the entPhysicalContainedIn hierarchy can provide the same\n            information).\
    \  On the other hand, if more than one bridge\n            were utilizing ports\
    \ on this module, then mappings between\n            each bridge and the ports\
    \ it used would be appropriate.\n            Also, in the case of a single backplane\
    \ repeater, a mapping\n            for the backplane to the single repeater entity\
    \ is not\n            necessary.\"\n    ::= { entityMapping 1 }\n"
- title: entLPMappingEntry       OBJECT-TYPE
  contents:
  - "entLPMappingEntry       OBJECT-TYPE\n    SYNTAX      EntLPMappingEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular logical-entity-to-physical-\n            equipment association.\
    \  Note that the nature of the\n            association is not specifically identified\
    \ in this entry.\n            It is expected that sufficient information exists\
    \ in the\n            MIB modules used to manage a particular logical entity to\n\
    \            infer how physical component information is utilized.\"\n    INDEX\
    \       { entLogicalIndex, entLPPhysicalIndex }\n    ::= { entLPMappingTable 1\
    \ }\n"
- title: EntLPMappingEntry ::= SEQUENCE {
  contents:
  - "EntLPMappingEntry ::= SEQUENCE {\n      entLPPhysicalIndex         PhysicalIndex\n"
- title: '}'
  contents:
  - '}

    '
- title: entLPPhysicalIndex OBJECT-TYPE
  contents:
  - "entLPPhysicalIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of this object identifies the index value of a\n            particular entPhysicalEntry\
    \ associated with the indicated\n            entLogicalEntity.\"\n    ::= { entLPMappingEntry\
    \ 1 }\n"
- title: -- logical entity/component to alias table
  contents:
  - '-- logical entity/component to alias table

    '
- title: entAliasMappingTable OBJECT-TYPE
  contents:
  - "entAliasMappingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntAliasMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains zero or more rows, representing\n           \
    \ mappings of logical entities and physical components to\n            external\
    \ MIB identifiers.  Each physical port in the system\n            may be associated\
    \ with a mapping to an external identifier,\n            which itself is associated\
    \ with a particular logical\n            entity's naming scope.  A 'wildcard'\
    \ mechanism is provided\n            to indicate that an identifier is associated\
    \ with more than\n            one logical entity.\"\n    ::= { entityMapping 2\
    \ }\n"
- title: entAliasMappingEntry       OBJECT-TYPE
  contents:
  - "entAliasMappingEntry       OBJECT-TYPE\n    SYNTAX      EntAliasMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"Information about a particular binding between a\n            logical\
    \ entity/physical component pair and an external\n            identifier.  Each\
    \ logical entity/physical component pair\n            may be associated with one\
    \ alias mapping.\n            The logical entity index may also be used as\n \
    \           a 'wildcard' (refer to the entAliasLogicalIndexOrZero object\n   \
    \         DESCRIPTION clause for details.)\n            Note that only entPhysicalIndex\
    \ values that represent\n            physical ports (i.e., associated entPhysicalClass\
    \ value is\n            'port(10)') are permitted to exist in this table.\"\n\
    \    INDEX { entPhysicalIndex, entAliasLogicalIndexOrZero }\n    ::= { entAliasMappingTable\
    \ 1 }\n"
- title: EntAliasMappingEntry ::= SEQUENCE {
  contents:
  - "EntAliasMappingEntry ::= SEQUENCE {\n      entAliasLogicalIndexOrZero       \
    \ Integer32,\n      entAliasMappingIdentifier         RowPointer\n"
- title: '}'
  contents:
  - '}

    '
- title: entAliasLogicalIndexOrZero OBJECT-TYPE
  contents:
  - "entAliasLogicalIndexOrZero OBJECT-TYPE\n    SYNTAX      Integer32 (0..2147483647)\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"The value of this object identifies the logical entity\n        \
    \    that defines the naming scope for the associated instance\n            of\
    \ the entAliasMappingIdentifier object.\n            If this object has a non-zero\
    \ value, then it identifies the\n            logical entity named by the same\
    \ value of entLogicalIndex.\n            If this object has a value of zero, then\
    \ the mapping between\n            the physical component and the alias identifier\
    \ for this\n            entAliasMapping entry is associated with all unspecified\n\
    \            logical entities.  That is, a value of zero (the default\n      \
    \      mapping) identifies any logical entity that does not have\n           \
    \ an explicit entry in this table for a particular\n            entPhysicalIndex/entAliasMappingIdentifier\
    \ pair.\n            For example, to indicate that a particular interface (e.g.,\n\
    \            physical component 33) is identified by the same value of\n     \
    \       ifIndex for all logical entities, the following instance\n           \
    \ might exist:\n                    entAliasMappingIdentifier.33.0 = ifIndex.5\n\
    \            In the event an entPhysicalEntry is associated differently\n    \
    \        for some logical entities, additional entAliasMapping\n            entries\
    \ may exist, e.g.:\n                    entAliasMappingIdentifier.33.0 = ifIndex.6\n\
    \                    entAliasMappingIdentifier.33.4 =  ifIndex.1\n           \
    \         entAliasMappingIdentifier.33.5 =  ifIndex.1\n                    entAliasMappingIdentifier.33.10\
    \ = ifIndex.12\n            Note that entries with non-zero entAliasLogicalIndexOrZero\n\
    \            index values have precedence over zero-indexed entries.  In\n   \
    \         this example, all logical entities except 4, 5, and 10\n           \
    \ associate physical entity 33 with ifIndex.6.\"\n    ::= { entAliasMappingEntry\
    \ 1 }\n"
- title: entAliasMappingIdentifier OBJECT-TYPE
  contents:
  - "entAliasMappingIdentifier OBJECT-TYPE\n    SYNTAX      RowPointer\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of this object identifies a particular conceptual\n            row associated\
    \ with the indicated entPhysicalIndex and\n            entLogicalIndex pair.\n\
    \            Because only physical ports are modeled in this table, only\n   \
    \         entries that represent interfaces or ports are allowed.  If\n      \
    \      an ifEntry exists on behalf of a particular physical port,\n          \
    \  then this object should identify the associated ifEntry.\n            For repeater\
    \ ports, the appropriate row in the\n            'rptrPortGroupTable' should be\
    \ identified instead.\n            For example, suppose a physical port was represented\
    \ by\n            entPhysicalEntry.3, entLogicalEntry.15 existed for a\n     \
    \       repeater, and entLogicalEntry.22 existed for a bridge.  Then\n       \
    \     there might be two related instances of\n            entAliasMappingIdentifier:\n\
    \               entAliasMappingIdentifier.3.15 == rptrPortGroupIndex.5.2\n   \
    \            entAliasMappingIdentifier.3.22 == ifIndex.17\n            It is possible\
    \ that other mappings (besides interfaces and\n            repeater ports) may\
    \ be defined in the future, as required.\n            Bridge ports are identified\
    \ by examining the Bridge MIB and\n            appropriate ifEntries associated\
    \ with each 'dot1dBasePort'\n            and are thus not represented in this\
    \ table.\"\n    ::= { entAliasMappingEntry 2 }\n"
- title: -- physical mapping table
  contents:
  - '-- physical mapping table

    '
- title: entPhysicalContainsTable OBJECT-TYPE
  contents:
  - "entPhysicalContainsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntPhysicalContainsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"A table that exposes the container/'containee'\n            relationships\
    \ between physical entities.  This table\n            provides all the information\
    \ found by constructing the\n            virtual containment tree for a given\
    \ entPhysicalTable, but\n            in a more direct format.\n            In\
    \ the event a physical entity is contained by more than one\n            other\
    \ physical entity (e.g., double-wide modules), this\n            table should\
    \ include these additional mappings, which cannot\n            be represented\
    \ in the entPhysicalTable virtual containment\n            tree.\"\n    ::= {\
    \ entityMapping 3 }\n"
- title: entPhysicalContainsEntry OBJECT-TYPE
  contents:
  - "entPhysicalContainsEntry OBJECT-TYPE\n    SYNTAX      EntPhysicalContainsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"A single container/'containee' relationship.\"\n    INDEX       {\
    \ entPhysicalIndex, entPhysicalChildIndex }\n    ::= { entPhysicalContainsTable\
    \ 1 }\n"
- title: EntPhysicalContainsEntry ::= SEQUENCE {
  contents:
  - "EntPhysicalContainsEntry ::= SEQUENCE {\n      entPhysicalChildIndex     PhysicalIndex\n"
- title: '}'
  contents:
  - '}

    '
- title: entPhysicalChildIndex OBJECT-TYPE
  contents:
  - "entPhysicalChildIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of entPhysicalIndex for the contained physical\n            entity.\"\n    ::=\
    \ { entPhysicalContainsEntry 1 }\n"
- title: -- last change time stamp for the whole MIB
  contents:
  - '-- last change time stamp for the whole MIB

    '
- title: entLastChangeTime OBJECT-TYPE
  contents:
  - "entLastChangeTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The value of sysUpTime\
    \ at the time a conceptual row is\n            created, modified, or deleted in\
    \ any of these tables:\n                    - entPhysicalTable\n             \
    \       - entLogicalTable\n                    - entLPMappingTable\n         \
    \           - entAliasMappingTable\n                    - entPhysicalContainsTable\n\
    \            \"\n    ::= { entityGeneral 1 }\n"
- title: -- Entity MIB Trap Definitions
  contents:
  - '-- Entity MIB Trap Definitions

    '
- title: entityMIBTraps      OBJECT IDENTIFIER ::= { entityMIB 2 }
  contents:
  - 'entityMIBTraps      OBJECT IDENTIFIER ::= { entityMIB 2 }

    '
- title: entityMIBTrapPrefix OBJECT IDENTIFIER ::= { entityMIBTraps 0 }
  contents:
  - 'entityMIBTrapPrefix OBJECT IDENTIFIER ::= { entityMIBTraps 0 }

    '
- title: entConfigChange NOTIFICATION-TYPE
  contents:
  - "entConfigChange NOTIFICATION-TYPE\n    STATUS             current\n    DESCRIPTION\n\
    \            \"An entConfigChange notification is generated when the value\n \
    \           of entLastChangeTime changes.  It can be utilized by an NMS\n    \
    \        to trigger logical/physical entity table maintenance polls.\n       \
    \     An agent should not generate more than one entConfigChange\n           \
    \ 'notification-event' in a given time interval (five seconds\n            is\
    \ the suggested default).  A 'notification-event' is the\n            transmission\
    \ of a single trap or inform PDU to a list of\n            notification destinations.\n\
    \            If additional configuration changes occur within the\n          \
    \  throttling period, then notification-events for these\n            changes\
    \ should be suppressed by the agent until the current\n            throttling\
    \ period expires.  At the end of a throttling\n            period, one notification-event\
    \ should be generated if any\n            configuration changes occurred since\
    \ the start of the\n            throttling period.  In such a case, another throttling\n\
    \            period is started right away.\n            An NMS should periodically\
    \ check the value of\n            entLastChangeTime to detect any missed entConfigChange\n\
    \            notification-events, e.g., due to throttling or transmission\n  \
    \          loss.\"\n   ::= { entityMIBTrapPrefix 1 }\n"
- title: -- conformance information
  contents:
  - '-- conformance information

    '
- title: entityConformance OBJECT IDENTIFIER ::= { entityMIB 3 }
  contents:
  - 'entityConformance OBJECT IDENTIFIER ::= { entityMIB 3 }

    '
- title: entityCompliances OBJECT IDENTIFIER ::= { entityConformance 1 }
  contents:
  - 'entityCompliances OBJECT IDENTIFIER ::= { entityConformance 1 }

    '
- title: entityGroups      OBJECT IDENTIFIER ::= { entityConformance 2 }
  contents:
  - 'entityGroups      OBJECT IDENTIFIER ::= { entityConformance 2 }

    '
- title: -- compliance statements
  contents:
  - '-- compliance statements

    '
- title: entityCompliance MODULE-COMPLIANCE
  contents:
  - "entityCompliance MODULE-COMPLIANCE\n    STATUS  deprecated\n    DESCRIPTION\n\
    \            \"The compliance statement for SNMP entities that implement\n   \
    \         version 1 of the Entity MIB.\"\n    MODULE  -- this module\n       \
    \ MANDATORY-GROUPS {\n                           entityPhysicalGroup,\n      \
    \                     entityLogicalGroup,\n                           entityMappingGroup,\n\
    \                           entityGeneralGroup,\n                           entityNotificationsGroup\n\
    \        }\n    ::= { entityCompliances 1 }\n"
- title: entity2Compliance MODULE-COMPLIANCE
  contents:
  - "entity2Compliance MODULE-COMPLIANCE\n    STATUS  deprecated\n    DESCRIPTION\n\
    \            \"The compliance statement for SNMP entities that implement\n   \
    \         version 2 of the Entity MIB.\"\n    MODULE  -- this module\n       \
    \ MANDATORY-GROUPS {\n                           entityPhysicalGroup,\n      \
    \                     entityPhysical2Group,\n                           entityGeneralGroup,\n\
    \                           entityNotificationsGroup\n        }\n        GROUP\
    \ entityLogical2Group\n        DESCRIPTION\n            \"Implementation of this\
    \ group is not mandatory for agents\n            that model all MIB object instances\
    \ within a single naming\n            scope.\"\n        GROUP entityMappingGroup\n\
    \        DESCRIPTION\n            \"Implementation of the entPhysicalContainsTable\
    \ is mandatory\n            for all agents.  Implementation of the entLPMappingTable\
    \ and\n            entAliasMappingTables are not mandatory for agents that\n \
    \           model all MIB object instances within a single naming scope.\n   \
    \         Note that the entAliasMappingTable may be useful for all\n         \
    \   agents; however, implementation of the entityLogicalGroup or\n           \
    \ entityLogical2Group is required to support this table.\"\n        OBJECT entPhysicalSerialNum\n\
    \        MIN-ACCESS   not-accessible\n        DESCRIPTION\n            \"Read\
    \ and write access is not required for agents that\n            cannot identify\
    \ serial number information for physical\n            entities and/or cannot provide\
    \ non-volatile storage for\n            NMS-assigned serial numbers.\n       \
    \     Write access is not required for agents that can identify\n            serial\
    \ number information for physical entities but cannot\n            provide non-volatile\
    \ storage for NMS-assigned serial\n            numbers.\n            Write access\
    \ is not required for physical entities for which\n            the associated\
    \ value of the entPhysicalIsFRU object is equal\n            to 'false(2)'.\"\n\
    \        OBJECT entPhysicalAlias\n        MIN-ACCESS   read-only\n        DESCRIPTION\n\
    \            \"Write access is required only if the associated\n            entPhysicalClass\
    \ value is equal to 'chassis(3)'.\"\n        OBJECT entPhysicalAssetID\n     \
    \   MIN-ACCESS   not-accessible\n        DESCRIPTION\n            \"Read and write\
    \ access is not required for agents that\n            cannot provide non-volatile\
    \ storage for NMS-assigned asset\n            identifiers.\n            Write\
    \ access is not required for physical entities for which\n            the associated\
    \ value of the entPhysicalIsFRU object is equal\n            to 'false(2)'.\"\n\
    \        OBJECT entPhysicalClass\n        SYNTAX INTEGER {\n            other(1),\n\
    \            unknown(2),\n            chassis(3),\n            backplane(4),\n\
    \            container(5),\n            powerSupply(6),\n            fan(7),\n\
    \            sensor(8),\n            module(9),\n            port(10),\n     \
    \       stack(11)\n        }\n        DESCRIPTION\n            \"Implementation\
    \ of the 'cpu(12)' enumeration is not\n            required.\"\n    ::= { entityCompliances\
    \ 2 }\n"
- title: entity3Compliance MODULE-COMPLIANCE
  contents:
  - "entity3Compliance MODULE-COMPLIANCE\n    STATUS  deprecated\n    DESCRIPTION\n\
    \            \"The compliance statement for SNMP entities that implement\n   \
    \         version 3 of the Entity MIB.\"\n    MODULE  -- this module\n       \
    \ MANDATORY-GROUPS {\n                           entityPhysicalGroup,\n      \
    \                     entityPhysical2Group,\n                           entityPhysical3Group,\n\
    \                           entityGeneralGroup,\n                           entityNotificationsGroup\n\
    \        }\n        GROUP entityLogical2Group\n        DESCRIPTION\n         \
    \   \"Implementation of this group is not mandatory for agents\n            that\
    \ model all MIB object instances within a single naming\n            scope.\"\n\
    \        GROUP entityMappingGroup\n        DESCRIPTION\n            \"Implementation\
    \ of the entPhysicalContainsTable is mandatory\n            for all agents.  Implementation\
    \ of the entLPMappingTable and\n            entAliasMappingTables are not mandatory\
    \ for agents that\n            model all MIB object instances within a single\
    \ naming scope.\n            Note that the entAliasMappingTable may be useful\
    \ for all\n            agents; however, implementation of the entityLogicalGroup\
    \ or\n            entityLogical2Group is required to support this table.\"\n \
    \       OBJECT entPhysicalSerialNum\n        MIN-ACCESS   not-accessible\n   \
    \     DESCRIPTION\n            \"Read and write access is not required for agents\
    \ that\n            cannot identify serial number information for physical\n \
    \           entities and/or cannot provide non-volatile storage for\n        \
    \    NMS-assigned serial numbers.\n            Write access is not required for\
    \ agents that can identify\n            serial number information for physical\
    \ entities but cannot\n            provide non-volatile storage for NMS-assigned\
    \ serial\n            numbers.\n            Write access is not required for physical\
    \ entities for\n            which the associated value of the entPhysicalIsFRU\
    \ object\n            is equal to 'false(2)'.\"\n        OBJECT entPhysicalAlias\n\
    \        MIN-ACCESS   read-only\n        DESCRIPTION\n            \"Write access\
    \ is required only if the associated\n            entPhysicalClass value is equal\
    \ to 'chassis(3)'.\"\n        OBJECT entPhysicalAssetID\n        MIN-ACCESS  \
    \ not-accessible\n        DESCRIPTION\n            \"Read and write access is\
    \ not required for agents that\n            cannot provide non-volatile storage\
    \ for NMS-assigned asset\n            identifiers.\n            Write access is\
    \ not required for physical entities for which\n            the associated value\
    \ of entPhysicalIsFRU is equal to\n            'false(2)'.\"\n    ::= { entityCompliances\
    \ 3 }\n"
- title: entity4Compliance MODULE-COMPLIANCE
  contents:
  - "entity4Compliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n \
    \           \"The compliance statement for SNMP entities that implement\n    \
    \        the full version 4 (full compliance) of the Entity MIB.\"\n    MODULE\
    \  -- this module\n        MANDATORY-GROUPS {\n                           entityPhysicalGroup,\n\
    \                           entityPhysical2Group,\n                          \
    \ entityPhysical3Group,\n                           entityGeneralGroup,\n    \
    \                       entityNotificationsGroup,\n                          \
    \ entityPhysical4Group\n        }\n        GROUP entityLogical2Group\n       \
    \ DESCRIPTION\n            \"Implementation of this group is not mandatory for\
    \ agents\n            that model all MIB object instances within a single naming\n\
    \            scope.\"\n        GROUP entityMappingGroup\n        DESCRIPTION\n\
    \            \"Implementation of the entPhysicalContainsTable is mandatory\n \
    \           for all agents.  Implementation of the entLPMappingTable and\n   \
    \         entAliasMappingTables are not mandatory for agents that\n          \
    \  model all MIB object instances within a single naming scope.\n            Note\
    \ that the entAliasMappingTable may be useful for all\n            agents; however,\
    \ implementation of the entityLogicalGroup or\n            entityLogical2Group\
    \ is required to support this table.\"\n        OBJECT entPhysicalSerialNum\n\
    \        MIN-ACCESS   not-accessible\n        DESCRIPTION\n            \"Read\
    \ and write access is not required for agents that\n            cannot identify\
    \ serial number information for physical\n            entities and/or cannot provide\
    \ non-volatile storage for\n            NMS-assigned serial numbers.\n       \
    \     Write access is not required for agents that can identify\n            serial\
    \ number information for physical entities but cannot\n            provide non-volatile\
    \ storage for NMS-assigned serial\n            numbers.\n            Write access\
    \ is not required for physical entities for\n            which the associated\
    \ value of the entPhysicalIsFRU object\n            is equal to 'false(2)'.\"\n\
    \        OBJECT entPhysicalAlias\n        MIN-ACCESS   read-only\n        DESCRIPTION\n\
    \            \"Write access is required only if the associated\n            entPhysicalClass\
    \ value is equal to 'chassis(3)'.\"\n        OBJECT entPhysicalAssetID\n     \
    \   MIN-ACCESS   not-accessible\n        DESCRIPTION\n            \"Read and write\
    \ access is not required for agents that\n            cannot provide non-volatile\
    \ storage for NMS-assigned asset\n            identifiers.\n            Write\
    \ access is not required for physical entities for which\n            the associated\
    \ value of entPhysicalIsFRU is equal to\n            'false(2)'.\"\n    ::= {\
    \ entityCompliances 4 }\n"
- title: entity4CRCompliance MODULE-COMPLIANCE
  contents:
  - "entity4CRCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The compliance statement for SNMP entities that implement\n   \
    \         version 4 of the Entity MIB on devices with constrained\n          \
    \  resources.\"\n    MODULE  -- this module\n        MANDATORY-GROUPS {\n    \
    \                       entityPhysicalCRGroup,\n                           entityPhysical4Group\n\
    \        }\n    ::= { entityCompliances 5 }\n"
- title: -- MIB groupings
  contents:
  - '-- MIB groupings

    '
- title: entityPhysicalGroup    OBJECT-GROUP
  contents:
  - "entityPhysicalGroup    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalDescr,\n\
    \              entPhysicalVendorType,\n              entPhysicalContainedIn,\n\
    \              entPhysicalClass,\n              entPhysicalParentRelPos,\n   \
    \           entPhysicalName\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects used to represent physical\n        \
    \    system components for which a single agent provides\n            management\
    \ information.\"\n    ::= { entityGroups 1 }\n"
- title: entityLogicalGroup    OBJECT-GROUP
  contents:
  - "entityLogicalGroup    OBJECT-GROUP\n    OBJECTS {\n              entLogicalDescr,\n\
    \              entLogicalType,\n              entLogicalCommunity,\n         \
    \     entLogicalTAddress,\n              entLogicalTDomain\n            }\n  \
    \  STATUS  deprecated\n    DESCRIPTION\n            \"The collection of objects\
    \ used to represent the list of\n            logical entities for which a single\
    \ agent provides\n            management information.\"\n    ::= { entityGroups\
    \ 2 }\n"
- title: entityMappingGroup    OBJECT-GROUP
  contents:
  - "entityMappingGroup    OBJECT-GROUP\n    OBJECTS {\n              entLPPhysicalIndex,\n\
    \              entAliasMappingIdentifier,\n              entPhysicalChildIndex\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects used to represent the\n            associations between multiple\
    \ logical entities, physical\n            components, interfaces, and port identifiers\
    \ for which a\n            single agent provides management information.\"\n \
    \   ::= { entityGroups 3 }\n"
- title: entityGeneralGroup    OBJECT-GROUP
  contents:
  - "entityGeneralGroup    OBJECT-GROUP\n    OBJECTS {\n              entLastChangeTime\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects used to represent general entity\n            information for which\
    \ a single agent provides management\n            information.\"\n    ::= { entityGroups\
    \ 4 }\n"
- title: entityNotificationsGroup NOTIFICATION-GROUP
  contents:
  - "entityNotificationsGroup NOTIFICATION-GROUP\n    NOTIFICATIONS { entConfigChange\
    \ }\n    STATUS        current\n    DESCRIPTION\n            \"The collection\
    \ of notifications used to indicate Entity MIB\n            data consistency and\
    \ general status information.\"\n    ::= { entityGroups 5 }\n"
- title: entityPhysical2Group    OBJECT-GROUP
  contents:
  - "entityPhysical2Group    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalHardwareRev,\n\
    \              entPhysicalFirmwareRev,\n              entPhysicalSoftwareRev,\n\
    \              entPhysicalSerialNum,\n              entPhysicalMfgName,\n    \
    \          entPhysicalModelName,\n              entPhysicalAlias,\n          \
    \    entPhysicalAssetID,\n              entPhysicalIsFRU\n            }\n    STATUS\
    \  current\n    DESCRIPTION\n            \"The collection of objects used to represent\
    \ physical\n            system components for which a single agent provides\n\
    \            management information.  This group augments the objects\n      \
    \      contained in the entityPhysicalGroup.\"\n    ::= { entityGroups 6 }\n"
- title: entityLogical2Group    OBJECT-GROUP
  contents:
  - "entityLogical2Group    OBJECT-GROUP\n    OBJECTS {\n              entLogicalDescr,\n\
    \              entLogicalType,\n              entLogicalTAddress,\n          \
    \    entLogicalTDomain,\n              entLogicalContextEngineID,\n          \
    \    entLogicalContextName\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects used to represent the\n            list\
    \ of logical entities for which a single SNMP entity\n            provides management\
    \ information.\"\n    ::= { entityGroups 7 }\n"
- title: entityPhysical3Group    OBJECT-GROUP
  contents:
  - "entityPhysical3Group    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalMfgDate,\n\
    \              entPhysicalUris\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects used to represent physical\n        \
    \    system components for which a single agent provides\n            management\
    \ information.  This group augments the objects\n            contained in the\
    \ entityPhysicalGroup.\"\n    ::= { entityGroups 8 }\n"
- title: entityPhysical4Group    OBJECT-GROUP
  contents:
  - "entityPhysical4Group    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalUUID\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects used to represent physical\n            system components for which\
    \ a single agent provides\n            management information.  This group augments\
    \ the objects\n            contained in the entityPhysicalGroup and\n        \
    \    entityPhysicalCRGroup.\"\n    ::= { entityGroups 9 }\n"
- title: entityPhysicalCRGroup    OBJECT-GROUP
  contents:
  - "entityPhysicalCRGroup    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalClass,\n\
    \              entPhysicalName\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects used to represent physical\n        \
    \    system components for constrained resourced devices,\n            for which\
    \ a single agent provides management\n            information.\"\n    ::= { entityGroups\
    \ 10 }\n"
- title: END
  contents:
  - 'END

    '
- title: 3.2. IANA-ENTITY-MIB
  contents:
  - "3.2. IANA-ENTITY-MIB\n   IANA-ENTITY-MIB DEFINITIONS ::= BEGIN\n        IMPORTS\n\
    \          MODULE-IDENTITY, mib-2\n            FROM SNMPv2-SMI             --\
    \ RFC 2578\n          TEXTUAL-CONVENTION\n            FROM SNMPv2-TC         \
    \     -- RFC 2579\n          ;\n        ianaEntityMIB MODULE-IDENTITY\n      \
    \    LAST-UPDATED \"201304050000Z\"  -- April 5, 2013\n          ORGANIZATION\
    \ \"IANA\"\n          CONTACT-INFO\n                       \"Internet Assigned\
    \ Numbers Authority\n                        Postal: ICANN\n                 \
    \               12025 Waterfront Drive, Suite 300\n                          \
    \      Los Angeles, CA 90094-2536\n                        Phone: +1-310-301-5800\n\
    \                        EMail: iana@iana.org\"\n          DESCRIPTION\n     \
    \       \"This MIB module defines a TEXTUAL-CONVENTION that provides\n       \
    \     an indication of the general hardware type of a particular\n           \
    \ physical entity.\n            Copyright (c) 2013 IETF Trust and the persons\
    \ identified as\n            authors of the code.  All rights reserved.\n    \
    \        Redistribution and use in source and binary forms, with or\n        \
    \    without modification, is permitted pursuant to, and subject\n           \
    \ to the license terms contained in, the Simplified BSD\n            License set\
    \ forth in Section 4.c of the IETF Trust's Legal\n            Provisions Relating\
    \ to IETF Documents\n            (http://trustee.ietf.org/license-info).\n   \
    \         The initial version of this MIB module was published in\n          \
    \  RFC 6933; for full legal notices see the RFC itself.\"\n          REVISION\
    \     \"201304050000Z\"  -- April 5, 2013\n          DESCRIPTION  \"Initial version\
    \ of this MIB as published in\n                        RFC 6933.\"\n         \
    \ ::= { mib-2 216 }\n        -- Textual Conventions\n   IANAPhysicalClass ::=\
    \ TEXTUAL-CONVENTION\n       STATUS            current\n       DESCRIPTION\n \
    \              \"An enumerated value that provides an indication of the\n    \
    \           general hardware type of a particular physical entity.\n         \
    \      There are no restrictions as to the number of\n               entPhysicalEntries\
    \ of each entPhysicalClass, which must\n               be instantiated by an agent.\n\
    \               The enumeration 'other' is applicable if the physical\n      \
    \         entity class is known but does not match any of the\n              \
    \ supported values.\n               The enumeration 'unknown' is applicable if\
    \ the physical\n               entity class is unknown to the agent.\n       \
    \        The enumeration 'chassis' is applicable if the physical\n           \
    \    entity class is an overall container for networking\n               equipment.\
    \  Any class of physical entity, except a stack,\n               may be contained\
    \ within a chassis; a chassis may only\n               be contained within a stack.\n\
    \               The enumeration 'backplane' is applicable if the physical\n  \
    \             entity class is some sort of device for aggregating and\n      \
    \         forwarding networking traffic, such as a shared\n               backplane\
    \ in a modular ethernet switch.  Note that an\n               agent may model\
    \ a backplane as a single physical entity,\n               which is actually implemented\
    \ as multiple discrete\n               physical components (within a chassis or\
    \ stack).\n               The enumeration 'container' is applicable if the\n \
    \              physical entity class is capable of containing one or\n       \
    \        more removable physical entities, possibly of different\n           \
    \    types.  For example, each (empty or full) slot in a\n               chassis\
    \ will be modeled as a container.  Note that all\n               removable physical\
    \ entities should be modeled within\n               a container entity, such as\
    \ field-replaceable modules,\n               fans, or power supplies.  Note that\
    \ all known containers\n               should be modeled by the agent, including\
    \ empty\n               containers.\n               The enumeration 'powerSupply'\
    \ is applicable if the\n               physical entity class is a power-supplying\
    \ component.\n               The enumeration 'fan' is applicable if the physical\n\
    \               entity class is a fan or other heat-reduction component.\n   \
    \            The enumeration 'sensor' is applicable if the physical\n        \
    \       entity class is some sort of sensor, such as a\n               temperature\
    \ sensor within a router chassis.\n               The enumeration 'module' is\
    \ applicable if the physical\n               entity class is some sort of self-contained\
    \ sub-system.\n               If the enumeration 'module' is removable, then it\
    \ should\n               be modeled within a container entity; otherwise, it\n\
    \               should be modeled directly within another physical\n         \
    \      entity (e.g., a chassis or another module).\n               The enumeration\
    \ 'port' is applicable if the physical\n               entity class is some sort\
    \ of networking port, capable\n               of receiving and/or transmitting\
    \ networking traffic.\n               The enumeration 'stack' is applicable if\
    \ the physical\n               entity class is some sort of super-container (possibly\n\
    \               virtual) intended to group together multiple chassis\n       \
    \        entities.  A stack may be realized by a 'virtual' cable,\n          \
    \     a real interconnect cable attached to multiple chassis,\n              \
    \ or multiple interconnect cables.  A stack should not be\n               modeled\
    \ within any other physical entities, but a stack\n               may be contained\
    \ within another stack.  Only chassis\n               entities should be contained\
    \ within a stack.\n               The enumeration 'cpu' is applicable if the physical\n\
    \               entity class is some sort of central processing unit.\n      \
    \         The enumeration 'energyObject' is applicable if the\n              \
    \ physical entity is some sort of energy object, i.e.,\n               a piece\
    \ of equipment that is part of or attached to\n               a communications\
    \ network that is monitored, controlled,\n               or aids in the management\
    \ of another device for Energy\n               Management.\n               The\
    \ enumeration 'battery' is applicable if the physical\n               entity class\
    \ is some sort of battery.\"\n       SYNTAX      INTEGER  {\n          other(1),\n\
    \          unknown(2),\n          chassis(3),\n          backplane(4),\n     \
    \     container(5), -- e.g., chassis slot or daughter-card holder\n          powerSupply(6),\n\
    \          fan(7),\n          sensor(8),\n          module(9),        -- e.g.,\
    \ plug-in card or daughter-card\n          port(10),\n          stack(11),   \
    \     -- e.g., stack of multiple chassis entities\n          cpu(12),\n      \
    \    energyObject(13),\n          battery (14)\n       }\n   END\n"
- title: 3.3. UUID-TC-MIB
  contents:
  - "3.3. UUID-TC-MIB\n   UUID-TC-MIB DEFINITIONS ::= BEGIN\n        IMPORTS\n   \
    \       MODULE-IDENTITY, mib-2\n            FROM SNMPv2-SMI             -- RFC\
    \ 2578\n          TEXTUAL-CONVENTION\n            FROM SNMPv2-TC             \
    \ -- RFC 2579\n          ;\n        uuidTCMIB MODULE-IDENTITY\n          LAST-UPDATED\
    \ \"201304050000Z\"  -- April 5, 2013\n          ORGANIZATION \"IETF Energy Management\
    \ Working Group\"\n          CONTACT-INFO \"WG Email: eman@ietf.org\n        \
    \                Mailing list subscription info:\n                        http://www.ietf.org/mailman/listinfo/eman\n\
    \                        Dan Romascanu\n                        Avaya\n      \
    \                  Park Atidim, Bldg. #3\n                        Tel Aviv, 61581\n\
    \                        Israel\n                        Phone: +972-3-6458414\n\
    \                        Email: dromasca@avaya.com\n                        Juergen\
    \ Quittek\n                        NEC Europe Ltd.\n                        Network\
    \ Research Division\n                        Kurfuersten-Anlage 36\n         \
    \               Heidelberg  69115\n                        Germany\n         \
    \               Phone: +49 6221 4342-115\n                        Email: quittek@neclab.eu\n\
    \                        Mouli Chandramouli\n                        Cisco Systems,\
    \ Inc.\n                        Sarjapur Outer Ring Road\n                   \
    \     Bangalore 560103\n                        India\n                      \
    \  Phone: +91 80 4429 2409\n                        Email: moulchan@cisco.com\"\
    \n          DESCRIPTION\n                     \"This MIB module defines TEXTUAL-CONVENTIONs\n\
    \                      representing Universally Unique IDentifiers\n         \
    \             (UUIDs).\n                      Copyright (c) 2013 IETF Trust and\
    \ the persons\n                      identified as authors of the code.  All rights\n\
    \                      reserved.\n                      Redistribution and use\
    \ in source and binary forms,\n                      with or without modification,\
    \ is permitted\n                      pursuant to, and subject to the license\
    \ terms\n                      contained in, the Simplified BSD License set forth\n\
    \                      in Section 4.c of the IETF Trust's Legal\n            \
    \          Provisions Relating to IETF Documents\n                      (http://trustee.ietf.org/license-info).\"\
    \n          REVISION     \"201304050000Z\"  -- April 5, 2013\n          DESCRIPTION\
    \  \"Initial version of this MIB as published in\n                        RFC\
    \ 6933.\"\n          ::= { mib-2 217 }\n        -- Textual Conventions\n   UUID\
    \ ::= TEXTUAL-CONVENTION\n       DISPLAY-HINT    \"4x-2x-2x-1x1x-6x\"\n      \
    \ STATUS          current\n       DESCRIPTION\n            \"Universally Unique\
    \ Identifier information.  The syntax must\n             conform to RFC 4122,\
    \ Section 4.1.\"\n           SYNTAX      OCTET STRING (SIZE (16))\n   UUIDorZero\
    \ ::= TEXTUAL-CONVENTION\n       DISPLAY-HINT    \"4x-2x-2x-1x1x-6x\"\n      \
    \ STATUS          current\n       DESCRIPTION\n            \"Universally Unique\
    \ Identifier information.  The syntax must\n             conform to RFC 4122,\
    \ Section 4.1.\n             The semantics of the value zero-length OCTET STRING\
    \ are\n             object-specific and must therefore be defined as part of\n\
    \             the description of any object that uses this syntax.\"\n       \
    \    SYNTAX      OCTET STRING (SIZE (0|16))\n   END\n"
- title: 4.  Usage Examples
  contents:
  - "4.  Usage Examples\n   The following sections iterate the instance values for\
    \ two example\n   networking devices.  These examples are kept simple to make\
    \ them\n   more understandable.  Auxiliary components such as fans, sensors,\n\
    \   empty slots, and sub-modules are not shown but might be modeled in\n   real\
    \ implementations.\n"
- title: 4.1.  Router/Bridge
  contents:
  - "4.1.  Router/Bridge\n   The first example is a router containing two slots. \
    \ Each slot\n   contains a 3-port router/bridge module.  Each port is represented\n\
    \   in the ifTable.  There are two logical instances of OSPF running and\n   two\
    \ logical bridges:\n    Physical entities -- entPhysicalTable:\n       1 Field-replaceable\
    \ physical chassis:\n         entPhysicalDescr.1 ==             'Acme Chassis\
    \ Model 100'\n         entPhysicalVendorType.1 ==        acmeProducts.chassisTypes.1\n\
    \         entPhysicalContainedIn.1 ==       0\n         entPhysicalClass.1 ==\
    \             chassis(3)\n         entPhysicalParentRelPos.1 ==      0\n     \
    \    entPhysicalName.1 ==              '100-A'\n         entPhysicalHardwareRev.1\
    \ ==       'A(1.00.02)'\n         entPhysicalSoftwareRev.1 ==       ''\n     \
    \    entPhysicalFirmwareRev.1 ==       ''\n         entPhysicalSerialNum.1 ==\
    \         'C100076544'\n         entPhysicalMfgName.1 ==           'Acme'\n  \
    \       entPhysicalModelName.1 ==         '100'\n         entPhysicalAlias.1 ==\
    \             'cl-SJ17-3-006:rack1:rtr-U3'\n         entPhysicalAssetID.1 == \
    \          '0007372293'\n         entPhysicalIsFRU.1 ==             true(1)\n\
    \         entPhysicalMfgDate.1 ==           '2002-5-26,13:30:30.0,-4:0'\n    \
    \     entPhysicalUris.1 ==              'URN:CLEI:CNME120ARA'\n       2 slots\
    \ within the chassis:\n         entPhysicalDescr.2 ==             'Acme Chassis\
    \ Slot Type AA'\n         entPhysicalVendorType.2  ==       acmeProducts.slotTypes.1\n\
    \         entPhysicalContainedIn.2 ==       1\n         entPhysicalClass.2 ==\
    \             container(5)\n         entPhysicalParentRelPos.2 ==      1\n   \
    \      entPhysicalName.2 ==              'S1'\n         entPhysicalHardwareRev.2\
    \ ==       'B(1.00.01)'\n         entPhysicalSoftwareRev.2 ==       ''\n     \
    \    entPhysicalFirmwareRev.2 ==       ''\n         entPhysicalSerialNum.2 ==\
    \         ''\n         entPhysicalMfgName.2 ==           'Acme'\n         entPhysicalModelName.2\
    \ ==         'AA'\n         entPhysicalAlias.2 ==             ''\n         entPhysicalAssetID.2\
    \ ==           ''\n         entPhysicalIsFRU.2 ==             false(2)\n     \
    \    entPhysicalMfgDate.2 ==           '2002-7-26,12:22:12.0,-4:0'\n         entPhysicalUris.2\
    \ ==              'URN:CLEI:CNME123ARA'\n         entPhysicalDescr.3 ==      \
    \       'Acme Chassis Slot Type AA'\n         entPhysicalVendorType.3 =      \
    \   acmeProducts.slotTypes.1\n         entPhysicalContainedIn.3 ==       1\n \
    \        entPhysicalClass.3 ==             container(5)\n         entPhysicalParentRelPos.3\
    \ ==      2\n         entPhysicalName.3 ==              'S2'\n         entPhysicalHardwareRev.3\
    \ ==       '1.00.07'\n         entPhysicalSoftwareRev.3 ==       ''\n        \
    \ entPhysicalFirmwareRev.3 ==       ''\n         entPhysicalSerialNum.3 ==   \
    \      ''\n         entPhysicalMfgName.3 ==           'Acme'\n         entPhysicalModelName.3\
    \ ==         'AA'\n         entPhysicalAlias.3 ==             ''\n         entPhysicalAssetID.3\
    \ ==           ''\n         entPhysicalIsFRU.3 ==             false(2)\n     \
    \    entPhysicalMfgDate.3 ==           '2002-7-26,12:12:12.0,-4:0'\n         entPhysicalUris.3\
    \ ==              'URN:CLEI:CNME123ARA'\n       2 Field-replaceable modules:\n\
    \       Slot 1 contains a module with 3 ports:\n         entPhysicalDescr.4 ==\
    \             'Acme Router-100'\n         entPhysicalVendorType.4  ==       acmeProducts.moduleTypes.14\n\
    \         entPhysicalContainedIn.4 ==       2\n         entPhysicalClass.4 ==\
    \             module(9)\n         entPhysicalParentRelPos.4 ==      1\n      \
    \   entPhysicalName.4 ==              'M1'\n         entPhysicalHardwareRev.4\
    \ ==       '1.00.07'\n         entPhysicalSoftwareRev.4 ==       '1.4.1'\n   \
    \      entPhysicalFirmwareRev.4 ==       'A(1.1)'\n         entPhysicalSerialNum.4\
    \ ==         'C100087363'\n         entPhysicalMfgName.4 ==           'Acme'\n\
    \         entPhysicalModelName.4 ==         'R100-FE'\n         entPhysicalAlias.4\
    \ ==             'rtr-U3:m1:SJ17-3-eng'\n         entPhysicalAssetID.4 ==    \
    \       '0007372462'\n         entPhysicalIsFRU.4 ==             true(1)\n   \
    \      entPhysicalMfgDate.4 ==           '2003-7-18,13:30:30.0,-4:0'\n       \
    \  entPhysicalUris.4 ==              'URN:CLEI:CNRU123CAA'\n         entPhysicalDescr.5\
    \ ==             'Acme Ethernet-100 Port'\n         entPhysicalVendorType.5  ==\
    \       acmeProducts.portTypes.2\n         entPhysicalContainedIn.5 ==       4\n\
    \         entPhysicalClass.5 ==             port(10)\n         entPhysicalParentRelPos.5\
    \ ==      1\n         entPhysicalName.5 ==              'P1'\n         entPhysicalHardwareRev.5\
    \ ==       'G(1.02)'\n         entPhysicalSoftwareRev.5 ==       ''\n        \
    \ entPhysicalFirmwareRev.5 ==       '1.1'\n         entPhysicalSerialNum.5 ==\
    \         ''\n         entPhysicalMfgName.5 ==           'Acme'\n         entPhysicalModelName.5\
    \ ==         'FE-100'\n         entPhysicalAlias.5 ==             ''\n       \
    \  entPhysicalAssetID.5 ==           ''\n         entPhysicalIsFRU.5 ==      \
    \       false(2)\n         entPhysicalMfgDate.5 ==           '2003-7-18,14:20:22.0,-4:0'\n\
    \         entPhysicalUris.5 ==              'URN:CLEI:CNMES23ARA'\n         entPhysicalDescr.6\
    \ ==             'Acme Ethernet-100 Port'\n         entPhysicalVendorType.6  ==\
    \       acmeProducts.portTypes.2\n         entPhysicalContainedIn.6 ==       4\n\
    \         entPhysicalClass.6 ==             port(10)\n         entPhysicalParentRelPos.6\
    \ ==      2\n         entPhysicalName.6 ==              'P2'\n         entPhysicalHardwareRev.6\
    \ ==       'G(1.02)'\n         entPhysicalSoftwareRev.6 ==       ''\n        \
    \ entPhysicalFirmwareRev.6 ==       '1.1'\n         entPhysicalSerialNum.6 ==\
    \         ''\n         entPhysicalMfgName.6 ==           'Acme'\n         entPhysicalModelName.6\
    \ ==         'FE-100'\n         entPhysicalAlias.6 ==             ''\n       \
    \  entPhysicalAssetID.6 ==           ''\n         entPhysicalIsFRU.6 ==      \
    \       false(2)\n         entPhysicalMfgDate.6 ==           '2003-7-19,10:15:15.0,-4:0'\n\
    \         entPhysicalUris.6 ==              'URN:CLEI:CNMES23ARA'\n         entPhysicalDescr.7\
    \ ==             'Acme Router-100 FDDI-Port'\n         entPhysicalVendorType.7\
    \  ==       acmeProducts.portTypes.3\n         entPhysicalContainedIn.7 ==   \
    \    4\n         entPhysicalClass.7 ==             port(10)\n         entPhysicalParentRelPos.7\
    \ ==      3\n         entPhysicalName.7 ==              'P3'\n         entPhysicalHardwareRev.7\
    \ ==       'B(1.03)'\n         entPhysicalSoftwareRev.7 ==       '2.5.1'\n   \
    \      entPhysicalFirmwareRev.7 ==       '2.5F'\n         entPhysicalSerialNum.7\
    \ ==         ''\n         entPhysicalMfgName.7 ==           'Acme'\n         entPhysicalModelName.7\
    \ ==         'FDDI-100'\n         entPhysicalAlias.7 ==             ''\n     \
    \    entPhysicalAssetID.7 ==           ''\n         entPhysicalIsFRU.7 ==    \
    \         false(2)\n      Slot 2 contains another 3-port module:\n         entPhysicalDescr.8\
    \ ==             'Acme Router-100 Comm Module'\n         entPhysicalVendorType.8\
    \  ==       acmeProducts.moduleTypes.15\n         entPhysicalContainedIn.8 ==\
    \       3\n         entPhysicalClass.8 ==             module(9)\n         entPhysicalParentRelPos.8\
    \ ==      1\n         entPhysicalName.8 ==              'M2'\n         entPhysicalHardwareRev.8\
    \ ==       '2.01.00'\n         entPhysicalSoftwareRev.8 ==       '3.0.7'\n   \
    \      entPhysicalFirmwareRev.8 ==       'A(1.2)'\n         entPhysicalSerialNum.8\
    \ ==         'C100098732'\n         entPhysicalMfgName.8 ==           'Acme'\n\
    \         entPhysicalModelName.8 ==         'C100'\n         entPhysicalAlias.8\
    \ ==             'rtr-U3:m2:SJ17-2-eng'\n         entPhysicalAssetID.8 ==    \
    \       '0007373982'\n         entPhysicalIsFRU.8 ==             true(1)\n   \
    \      entPhysicalMfgDate.8 ==           '2002-5-26,13:30:15.0,-4:0'\n       \
    \  entPhysicalUris.8 ==              'URN:CLEI:CNRT321MAA'\n         entPhysicalDescr.9\
    \ ==             'Acme Fddi-100 Port'\n         entPhysicalVendorType.9 ==   \
    \     acmeProducts.portTypes.5\n         entPhysicalContainedIn.9 ==       8\n\
    \         entPhysicalClass.9 ==             port(10)\n         entPhysicalParentRelPos.9\
    \ ==      1\n         entPhysicalName.9 ==              'FDDI Primary'\n     \
    \    entPhysicalHardwareRev.9 ==       'CC(1.07)'\n         entPhysicalSoftwareRev.9\
    \ ==       '2.0.34'\n         entPhysicalFirmwareRev.9 ==       '1.1'\n      \
    \   entPhysicalSerialNum.9 ==         ''\n         entPhysicalMfgName.9 ==   \
    \        'Acme'\n         entPhysicalModelName.9 ==         'FDDI-100'\n     \
    \    entPhysicalAlias.9 ==             ''\n         entPhysicalAssetID.9 ==  \
    \         ''\n         entPhysicalIsFRU.9 ==             false(2)\n         entPhysicalDescr.10\
    \ ==            'Acme Ethernet-100 Port'\n         entPhysicalVendorType.10 ==\
    \       acmeProducts.portTypes.2\n         entPhysicalContainedIn.10 ==      8\n\
    \         entPhysicalClass.10 ==            port(10)\n         entPhysicalParentRelPos.10\
    \ ==     2\n         entPhysicalName.10 ==             'Ethernet A'\n        \
    \ entPhysicalHardwareRev.10 ==      'G(1.04)'\n         entPhysicalSoftwareRev.10\
    \ ==      ''\n         entPhysicalFirmwareRev.10 ==      '1.3'\n         entPhysicalSerialNum.10\
    \ ==        ''\n         entPhysicalMfgName.10 ==          'Acme'\n         entPhysicalModelName.10\
    \ ==        'FE-100'\n         entPhysicalAlias.10 ==            ''\n        \
    \ entPhysicalAssetID.10 ==          ''\n         entPhysicalIsFRU.10 ==      \
    \      false(2)\n         entPhysicalMfgDate.10 ==          '2002-7-26,13:30:15.0,-4:0'\n\
    \         entPhysicalUris.10 ==             'URN:CLEI:CNMES23ARA'\n         entPhysicalDescr.11\
    \ ==            'Acme Ethernet-100 Port'\n         entPhysicalVendorType.11 ==\
    \       acmeProducts.portTypes.2\n         entPhysicalContainedIn.11 ==      8\n\
    \         entPhysicalClass.11 ==            port(10)\n         entPhysicalParentRelPos.11\
    \ ==     3\n         entPhysicalName.11 ==             'Ethernet B'\n        \
    \ entPhysicalHardwareRev.11 ==      'G(1.04)'\n         entPhysicalSoftwareRev.11\
    \ ==      ''\n         entPhysicalFirmwareRev.11 ==      '1.3'\n         entPhysicalSerialNum.11\
    \ ==        ''\n         entPhysicalMfgName.11 ==          'Acme'\n         entPhysicalModelName.11\
    \ ==        'FE-100'\n         entPhysicalAlias.11 ==            ''\n        \
    \ entPhysicalAssetID.11 ==          ''\n         entPhysicalIsFRU.11 ==      \
    \      false(2)\n         entPhysicalMfgDate.11 ==          '2002-8-16,15:35:15.0,-4:0'\n\
    \         entPhysicalUris.11 ==             'URN:CLEI:CNMES23ARA'\n      Logical\
    \ entities -- entLogicalTable; no SNMPv3 support\n       2 OSPF instances:\n \
    \        entLogicalDescr.1 ==              'Acme OSPF v1.1'\n         entLogicalType.1\
    \ ==               ospf\n         entLogicalCommunity.1 ==          'public-ospf1'\n\
    \         entLogicalTAddress.1 ==           192.0.2.1:161\n         entLogicalTDomain.1\
    \ ==            snmpUDPDomain\n         entLogicalContextEngineID.1 ==    ''\n\
    \         entLogicalContextName.1 ==        ''\n         entLogicalDescr.2 ==\
    \              'Acme OSPF v1.1'\n         entLogicalType.2 ==               ospf\n\
    \         entLogicalCommunity.2 ==          'public-ospf2'\n         entLogicalTAddress.2\
    \ ==           192.0.2.1:161\n         entLogicalTDomain.2 ==            snmpUDPDomain\n\
    \         entLogicalContextEngineID.2 ==    ''\n         entLogicalContextName.2\
    \ ==        ''\n       2 logical bridges:\n         entLogicalDescr.3 ==     \
    \         'Acme Bridge v2.1.1'\n         entLogicalType.3  ==              dot1dBridge\n\
    \         entLogicalCommunity.3 ==          'public-bridge1'\n         entLogicalTAddress.3\
    \ ==           192.0.2.1:161\n         entLogicalTDomain.3 ==            snmpUDPDomain\n\
    \         entLogicalContextEngineID.3 ==    ''\n         entLogicalContextName.3\
    \ ==        ''\n         entLogicalDescr.4 ==              'Acme Bridge v2.1.1'\n\
    \         entLogicalType.4 ==               dot1dBridge\n         entLogicalCommunity.4\
    \ ==          'public-bridge2'\n         entLogicalTAddress.4 ==           192.0.2.1:161\n\
    \         entLogicalTDomain.4 ==            snmpUDPDomain\n         entLogicalContextEngineID.4\
    \ ==    ''\n         entLogicalContextName.4 ==        ''\n   Logical to Physical\
    \ Mappings:\n     1st OSPF instance: uses module 1-port 1\n         entLPPhysicalIndex.1.5\
    \ ==         5\n     2nd OSPF instance: uses module 2-port 1\n         entLPPhysicalIndex.2.9\
    \ ==         9\n     1st bridge group: uses module 1, all ports\n     Note that\
    \ these mappings are included in the table because\n     another logical entity\
    \ (1st OSPF) utilizes one of the\n     ports.  If this were not the case, then\
    \ a single mapping\n     to the module (e.g., entLPPhysicalIndex.3.4) would be\n\
    \     present instead.\n         entLPPhysicalIndex.3.5 ==         5\n       \
    \  entLPPhysicalIndex.3.6 ==         6\n         entLPPhysicalIndex.3.7 ==   \
    \      7\n     2nd bridge group: uses module 2, all ports\n         entLPPhysicalIndex.4.9\
    \  ==        9\n         entLPPhysicalIndex.4.10 ==        10\n         entLPPhysicalIndex.4.11\
    \ ==        11\n   Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:\n\
    \     Example 1: ifIndex values are global to all logical entities\n         entAliasMappingIdentifier.5.0\
    \ ==  ifIndex.1\n         entAliasMappingIdentifier.6.0 ==  ifIndex.2\n      \
    \   entAliasMappingIdentifier.7.0 ==  ifIndex.3\n         entAliasMappingIdentifier.9.0\
    \ ==  ifIndex.4\n         entAliasMappingIdentifier.10.0 == ifIndex.5\n      \
    \   entAliasMappingIdentifier.11.0 == ifIndex.6\n     Example 2: ifIndex values\
    \ are not shared by all logical entities;\n            (Bridge-1 uses ifIndex\
    \ values 101 - 103 and Bridge-2 uses\n            ifIndex values 204-206.)\n \
    \           entAliasMappingIdentifier.5.0 ==  ifIndex.1\n            entAliasMappingIdentifier.5.3\
    \ ==  ifIndex.101\n            entAliasMappingIdentifier.6.0 ==  ifIndex.2\n \
    \           entAliasMappingIdentifier.6.3 ==  ifIndex.102\n            entAliasMappingIdentifier.7.0\
    \ ==  ifIndex.3\n            entAliasMappingIdentifier.7.3 ==  ifIndex.103\n \
    \           entAliasMappingIdentifier.9.0 ==  ifIndex.4\n            entAliasMappingIdentifier.9.4\
    \ ==  ifIndex.204\n            entAliasMappingIdentifier.10.0 == ifIndex.5\n \
    \           entAliasMappingIdentifier.10.4 == ifIndex.205\n            entAliasMappingIdentifier.11.0\
    \ == ifIndex.6\n            entAliasMappingIdentifier.11.4 == ifIndex.206\n  \
    \ Physical Containment Tree -- entPhysicalContainsTable\n     chassis has two\
    \ containers:\n         entPhysicalChildIndex.1.2 ==      2\n         entPhysicalChildIndex.1.3\
    \ ==      3\n     container 1 has a module:\n         entPhysicalChildIndex.2.4\
    \ ==      4\n     container 2 has a module:\n         entPhysicalChildIndex.3.8\
    \ ==      8\n     module 1 has 3 ports:\n         entPhysicalChildIndex.4.5 ==\
    \      5\n         entPhysicalChildIndex.4.6 ==      6\n         entPhysicalChildIndex.4.7\
    \ ==      7\n     module 2 has 3 ports:\n         entPhysicalChildIndex.8.9 ==\
    \      9\n         entPhysicalChildIndex.8.10 ==     10\n         entPhysicalChildIndex.8.11\
    \ ==     11\n"
- title: 4.2.  Repeaters
  contents:
  - "4.2.  Repeaters\n   The second example is a 3-slot hub with 2 backplane ethernet\n\
    \   segments.  Slot three is empty, and the remaining slots contain\n   ethernet\
    \ repeater modules.\n   Note that this example assumes an older Repeater MIB implementation\n\
    \   [RFC1516] rather than the new Repeater MIB [RFC2108].  The new\n   version\
    \ contains an object called 'rptrPortRptrId', which should be\n   used to identify\
    \ repeater port groupings, rather than using community\n   strings or contexts.\n\
    \   Physical entities -- entPhysicalTable:\n      1 Field-replaceable physical\
    \ chassis:\n         entPhysicalDescr.1 ==       'Acme Chassis Model 110'\n  \
    \       entPhysicalVendorType.1 ==  acmeProducts.chassisTypes.2\n         entPhysicalContainedIn.1\
    \ == 0\n         entPhysicalClass.1 ==       chassis(3)\n         entPhysicalParentRelPos.1\
    \ ==0\n         entPhysicalName.1 ==        '110-B'\n         entPhysicalHardwareRev.1\
    \ == 'A(1.02.00)'\n         entPhysicalSoftwareRev.1 == ''\n         entPhysicalFirmwareRev.1\
    \ == ''\n         entPhysicalSerialNum.1 ==   'C100079294'\n         entPhysicalMfgName.1\
    \ ==     'Acme'\n         entPhysicalModelName.1 ==   '110'\n         entPhysicalAlias.1\
    \ ==       'bldg09:floor1:rptr18:0067eea0229f'\n         entPhysicalAssetID.1\
    \ ==     '0007386327'\n         entPhysicalIsFRU.1 ==       true(1)\n      2 Chassis\
    \ Ethernet Backplanes:\n         entPhysicalDescr.2 ==          'Acme Ethernet\
    \ Backplane Type A'\n         entPhysicalVendorType.2 ==     acmeProducts.backplaneTypes.1\n\
    \         entPhysicalContainedIn.2 ==    1\n         entPhysicalClass.2 ==   \
    \       backplane(4)\n         entPhysicalParentRelPos.2 ==   1\n         entPhysicalName.2\
    \ ==           'B1'\n         entPhysicalHardwareRev.2 ==    'A(2.04.01)'\n  \
    \       entPhysicalSoftwareRev.2 ==    ''\n         entPhysicalFirmwareRev.2 ==\
    \    ''\n         entPhysicalSerialNum.2 ==      ''\n         entPhysicalMfgName.2\
    \ ==        'Acme'\n         entPhysicalModelName.2 ==      'BK-A'\n         entPhysicalAlias.2\
    \ ==          ''\n         entPhysicalAssetID.2 ==        ''\n         entPhysicalIsFRU.2\
    \ ==          false(2)\n         entPhysicalDescr.3 ==          'Acme Ethernet\
    \ Backplane Type A'\n         entPhysicalVendorType.3  ==    acmeProducts.backplaneTypes.1\n\
    \         entPhysicalContainedIn.3 ==    1\n         entPhysicalClass.3 ==   \
    \       backplane(4)\n         entPhysicalParentRelPos.3 ==   2\n         entPhysicalName.3\
    \ ==           'B2'\n         entPhysicalHardwareRev.3 ==    'A(2.04.01)'\n  \
    \       entPhysicalSoftwareRev.3 ==    ''\n         entPhysicalFirmwareRev.3 ==\
    \    ''\n         entPhysicalSerialNum.3 ==      ''\n         entPhysicalMfgName.3\
    \ ==        'Acme'\n         entPhysicalModelName.3 ==      'BK-A'\n         entPhysicalAlias.3\
    \ ==          ''\n         entPhysicalAssetID.3 ==        ''\n         entPhysicalIsFRU.3\
    \ ==          false(2)\n      3 slots within the chassis:\n         entPhysicalDescr.4\
    \ ==          'Acme Hub Slot Type RB'\n         entPhysicalVendorType.4  ==  \
    \  acmeProducts.slotTypes.5\n         entPhysicalContainedIn.4 ==    1\n     \
    \    entPhysicalClass.4 ==          container(5)\n         entPhysicalParentRelPos.4\
    \ ==   1\n         entPhysicalName.4 ==           'Slot 1'\n         entPhysicalHardwareRev.4\
    \ ==    'B(1.00.03)'\n         entPhysicalSoftwareRev.4 ==    ''\n         entPhysicalFirmwareRev.4\
    \ ==    ''\n         entPhysicalSerialNum.4 ==      ''\n         entPhysicalMfgName.4\
    \ ==        'Acme'\n         entPhysicalModelName.4 ==      'RB'\n         entPhysicalAlias.4\
    \ ==          ''\n         entPhysicalAssetID.4 ==        ''\n         entPhysicalIsFRU.4\
    \ ==          false(2)\n         entPhysicalDescr.5 ==          'Acme Hub Slot\
    \ Type RB'\n         entPhysicalVendorType.5  ==    acmeProducts.slotTypes.5\n\
    \         entPhysicalContainedIn.5 ==    1\n         entPhysicalClass.5 ==   \
    \       container(5)\n         entPhysicalParentRelPos.5 ==   2\n         entPhysicalName.5\
    \ ==           'Slot 2'\n         entPhysicalHardwareRev.5 ==    'B(1.00.03)'\n\
    \         entPhysicalSoftwareRev.5 ==    ''\n         entPhysicalFirmwareRev.5\
    \ ==    ''\n         entPhysicalSerialNum.5 ==      ''\n         entPhysicalMfgName.5\
    \ ==        'Acme'\n         entPhysicalModelName.5 ==      'RB'\n         entPhysicalAlias.5\
    \ ==          ''\n         entPhysicalAssetID.5 ==        ''\n         entPhysicalIsFRU.5\
    \ ==          false(2)\n         entPhysicalDescr.6 ==          'Acme Hub Slot\
    \ Type RB'\n         entPhysicalVendorType.6  ==    acmeProducts.slotTypes.5\n\
    \         entPhysicalContainedIn.6 ==    1\n         entPhysicalClass.6 ==   \
    \       container(5)\n         entPhysicalParentRelPos.6 ==   3\n         entPhysicalName.6\
    \ ==           'Slot 3'\n         entPhysicalHardwareRev.6 ==    'B(1.00.03)'\n\
    \         entPhysicalSoftwareRev.6 ==    ''\n         entPhysicalFirmwareRev.6\
    \ ==    ''\n         entPhysicalSerialNum.6 ==      ''\n         entPhysicalMfgName.6\
    \ ==        'Acme'\n         entPhysicalModelName.6 ==      'RB'\n         entPhysicalAlias.6\
    \ ==          ''\n         entPhysicalAssetID.6 ==        ''\n         entPhysicalIsFRU.6\
    \ ==          false(2)\n      Slot 1 contains a plug-in module with 4 10-BaseT\
    \ ports:\n         entPhysicalDescr.7  ==         'Acme 10Base-T Module 114'\n\
    \         entPhysicalVendorType.7 ==     acmeProducts.moduleTypes.32\n       \
    \  entPhysicalContainedIn.7  ==   4\n         entPhysicalClass.7 ==          module(9)\n\
    \         entPhysicalParentRelPos.7 ==   1\n         entPhysicalName.7 ==    \
    \       'M1'\n         entPhysicalHardwareRev.7 ==    'A(1.02.01)'\n         entPhysicalSoftwareRev.7\
    \ ==    '1.7.2'\n         entPhysicalFirmwareRev.7 ==    'A(1.5)'\n         entPhysicalSerialNum.7\
    \ ==      'C100096244'\n         entPhysicalMfgName.7 ==        'Acme'\n     \
    \    entPhysicalModelName.7 =       '114'\n         entPhysicalAlias.7 ==    \
    \      'bldg09:floor1:eng'\n         entPhysicalAssetID.7 ==        '0007962951'\n\
    \         entPhysicalIsFRU.7 ==          true(1)\n         entPhysicalDescr.8\
    \ ==          'Acme 10Base-T Port RB'\n         entPhysicalVendorType.8 ==   \
    \  acmeProducts.portTypes.10\n         entPhysicalContainedIn.8  ==   7\n    \
    \     entPhysicalClass.8 ==          port(10)\n         entPhysicalParentRelPos.8\
    \ ==   1\n         entPhysicalName.8 ==           'Ethernet-A'\n         entPhysicalHardwareRev.8\
    \ ==    'A(1.04F)'\n         entPhysicalSoftwareRev.8 ==    ''\n         entPhysicalFirmwareRev.8\
    \ ==    '1.4'\n         entPhysicalSerialNum.8 ==      ''\n         entPhysicalMfgName.8\
    \ ==        'Acme'\n         entPhysicalModelName.8 ==      'RB'\n         entPhysicalAlias.8\
    \ ==          ''\n         entPhysicalAssetID.8 ==        ''\n         entPhysicalIsFRU.8\
    \ ==          false(2)\n         entPhysicalDescr.9  ==         'Acme 10Base-T\
    \ Port RB'\n         entPhysicalVendorType.9 ==     acmeProducts.portTypes.10\n\
    \         entPhysicalContainedIn.9 ==    7\n         entPhysicalClass.9 ==   \
    \       port(10)\n         entPhysicalParentRelPos.9 ==   2\n         entPhysicalName.9\
    \ ==           'Ethernet-B'\n         entPhysicalHardwareRev.9 ==    'A(1.04F)'\n\
    \         entPhysicalSoftwareRev.9 ==    ''\n         entPhysicalFirmwareRev.9\
    \ ==    '1.4'\n         entPhysicalSerialNum.9 ==      ''\n         entPhysicalMfgName.9\
    \ ==        'Acme'\n         entPhysicalModelName.9 =       'RB'\n         entPhysicalAlias.9\
    \ ==          ''\n         entPhysicalAssetID.9 ==        ''\n         entPhysicalIsFRU.9\
    \ ==          false(2)\n         entPhysicalDescr.10 ==         'Acme 10Base-T\
    \ Port RB'\n         entPhysicalVendorType.10 ==    acmeProducts.portTypes.10\n\
    \         entPhysicalContainedIn.10 ==   7\n         entPhysicalClass.10 ==  \
    \       port(10)\n         entPhysicalParentRelPos.10 ==  3\n         entPhysicalName.10\
    \ ==          'Ethernet-C'\n         entPhysicalHardwareRev.10 ==   'B(1.02.07)'\n\
    \         entPhysicalSoftwareRev.10 ==   ''\n         entPhysicalFirmwareRev.10\
    \ ==   '1.4'\n         entPhysicalSerialNum.10 ==     ''\n         entPhysicalMfgName.10\
    \ ==       'Acme'\n         entPhysicalModelName.10 ==     'RB'\n         entPhysicalAlias.10\
    \ ==         ''\n         entPhysicalAssetID.10 ==       ''\n         entPhysicalIsFRU.10\
    \ ==         false(2)\n         entPhysicalDescr.11 ==         'Acme 10Base-T\
    \ Port RB'\n         entPhysicalVendorType.11  ==   acmeProducts.portTypes.10\n\
    \         entPhysicalContainedIn.11 ==   7\n         entPhysicalClass.11 ==  \
    \       port(10)\n         entPhysicalParentRelPos.11 ==  4\n         entPhysicalName.11\
    \ ==          'Ethernet-D'\n         entPhysicalHardwareRev.11 ==   'B(1.02.07)'\n\
    \         entPhysicalSoftwareRev.11 ==   ''\n         entPhysicalFirmwareRev.11\
    \ ==   '1.4'\n         entPhysicalSerialNum.11 ==     ''\n         entPhysicalMfgName.11\
    \ ==       'Acme'\n         entPhysicalModelName.11 ==     'RB'\n         entPhysicalAlias.11\
    \ ==         ''\n         entPhysicalAssetID.11 ==       ''\n         entPhysicalIsFRU.11\
    \ ==         false(2)\n      Slot 2 contains another ethernet module with 2 ports.\n\
    \         entPhysicalDescr.12 ==         'Acme 10Base-T Module Model 4'\n    \
    \     entPhysicalVendorType.12 ==    acmeProducts.moduleTypes.30\n         entPhysicalContainedIn.12\
    \ =    5\n         entPhysicalClass.12 ==         module(9)\n         entPhysicalParentRelPos.12\
    \ ==  1\n         entPhysicalName.12 ==          'M2'\n         entPhysicalHardwareRev.12\
    \ ==   'A(1.01.07)'\n         entPhysicalSoftwareRev.12 ==   '1.8.4'\n       \
    \  entPhysicalFirmwareRev.12 ==   'A(1.8)'\n         entPhysicalSerialNum.12 ==\
    \     'C100102384'\n         entPhysicalMfgName.12 ==       'Acme'\n         entPhysicalModelName.12\
    \ ==     '4'\n         entPhysicalAlias.12 ==         'bldg09:floor1:devtest'\n\
    \         entPhysicalAssetID.12 ==       '0007968462'\n         entPhysicalIsFRU.12\
    \ ==         true(1)\n         entPhysicalDescr.13 ==         'Acme 802.3 AUI\
    \ Port'\n         entPhysicalVendorType.13  ==   acmeProducts.portTypes.11\n \
    \        entPhysicalContainedIn.13 ==   12\n         entPhysicalClass.13 ==  \
    \       port(10)\n         entPhysicalParentRelPos.13 ==  1\n         entPhysicalName.13\
    \ ==          'AUI'\n         entPhysicalHardwareRev.13 ==   'A(1.06F)'\n    \
    \     entPhysicalSoftwareRev.13 ==   ''\n         entPhysicalFirmwareRev.13 ==\
    \   '1.5'\n         entPhysicalSerialNum.13 ==     ''\n         entPhysicalMfgName.13\
    \ ==       'Acme'\n         entPhysicalModelName.13 ==     ''\n         entPhysicalAlias.13\
    \ ==         ''\n         entPhysicalAssetID.13 ==       ''\n         entPhysicalIsFRU.13\
    \ ==         false(2)\n         entPhysicalDescr.14 ==         'Acme 10Base-T\
    \ Port RD'\n         entPhysicalVendorType.14  ==   acmeProducts.portTypes.14\n\
    \         entPhysicalContainedIn.14 ==   12\n         entPhysicalClass.14 == \
    \        port(10)\n         entPhysicalParentRelPos.14 ==  2\n         entPhysicalName.14\
    \ ==          'E2'\n         entPhysicalHardwareRev.14 ==   'B(1.01.02)'\n   \
    \      entPhysicalSoftwareRev.14 ==   ''\n         entPhysicalFirmwareRev.14 ==\
    \   '2.1'\n         entPhysicalSerialNum.14 ==     ''\n         entPhysicalMfgName.14\
    \ ==       'Acme'\n         entPhysicalModelName.14 ==     ''\n         entPhysicalAlias.14\
    \ ==         ''\n         entPhysicalAssetID.14 ==       ''\n         entPhysicalIsFRU.14\
    \ ==         false(2)\n   Logical entities -- entLogicalTable; with SNMPv3 support\n\
    \      Repeater 1--comprised of any ports attached to backplane 1\n         entLogicalDescr.1\
    \ ==           'Acme repeater v3.1'\n         entLogicalType.1  ==           snmpDot3RptrMgt\n\
    \         entLogicalCommunity.1          'public-repeater1'\n         entLogicalTAddress.1\
    \ ==        192.0.2.1:161\n         entLogicalTDomain.1 ==         snmpUDPDomain\n\
    \         entLogicalContextEngineID.1 == '80000777017c7d7e7f'H\n         entLogicalContextName.1\
    \ ==     'repeater1'\n      Repeater 2--comprised of any ports attached to backplane\
    \ 2:\n         entLogicalDescr.2 ==           'Acme repeater v3.1'\n         entLogicalType.2\
    \  ==           snmpDot3RptrMgt\n         entLogicalCommunity.2 ==       'public-repeater2'\n\
    \         entLogicalTAddress.2 ==        192.0.2.1:161\n         entLogicalTDomain.2\
    \ ==         snmpUDPDomain\n         entLogicalContextEngineID.2 == '80000777017c7d7e7f'H\n\
    \         entLogicalContextName.2 ==     'repeater2'\n   Logical to Physical Mappings\
    \ -- entLPMappingTable:\n     repeater1 uses backplane 1, slot 1-ports 1 & 2,\
    \ slot 2-port 1\n      Note that a mapping to the module is not included,\n  \
    \    because this example represents a port-switchable hub.\n      Even though\
    \ all ports on the module could belong to the\n      same repeater as a matter\
    \ of configuration, the LP port\n      mappings should not be replaced dynamically\
    \ with a single\n      mapping for the module (e.g., entLPPhysicalIndex.1.7).\n\
    \      If all ports on the module shared a single backplane connection,\n    \
    \  then a single mapping for the module would be more appropriate.\n        entLPPhysicalIndex.1.2\
    \ ==       2\n        entLPPhysicalIndex.1.8 ==       8\n        entLPPhysicalIndex.1.9\
    \ ==       9\n        entLPPhysicalIndex.1.13 ==      13\n     repeater2 uses\
    \ backplane 2, slot 1-ports 3 & 4, slot 2-port 2\n         entLPPhysicalIndex.2.3\
    \ ==      3\n         entLPPhysicalIndex.2.10 ==     10\n         entLPPhysicalIndex.2.11\
    \ ==     11\n         entLPPhysicalIndex.2.14 ==     14\n   Physical to Logical\
    \ to MIB Alias Mappings -- entAliasMappingTable:\n     Repeater Port Identifier\
    \ values are shared by both repeaters:\n         entAliasMappingIdentifier.8.0\
    \ ==      rptrPortGroupIndex.1.1\n         entAliasMappingIdentifier.9.0 ==  \
    \    rptrPortGroupIndex.1.2\n         entAliasMappingIdentifier.10.0 ==     rptrPortGroupIndex.1.3\n\
    \         entAliasMappingIdentifier.11.0 ==     rptrPortGroupIndex.1.4\n     \
    \    entAliasMappingIdentifier.13.0 ==     rptrPortGroupIndex.2.1\n         entAliasMappingIdentifier.14.0\
    \ ==     rptrPortGroupIndex.2.2\n   Physical Containment Tree -- entPhysicalContainsTable\n\
    \     chassis has two backplanes and three containers:\n         entPhysicalChildIndex.1.2\
    \ ==   2\n         entPhysicalChildIndex.1.3 ==   3\n         entPhysicalChildIndex.1.4\
    \ ==   4\n         entPhysicalChildIndex.1.5 ==   5\n         entPhysicalChildIndex.1.6\
    \ ==   6\n     container 1 has a module:\n         entPhysicalChildIndex.4.7 ==\
    \   7\n     container 2 has a module\n         entPhysicalChildIndex.5.12 == \
    \ 12\n    Note that in this example, container 3 is empty.\n     module 1 has\
    \ 4 ports:\n         entPhysicalChildIndex.7.8 ==   8\n         entPhysicalChildIndex.7.9\
    \ ==   9\n         entPhysicalChildIndex.7.10 ==  10\n         entPhysicalChildIndex.7.11\
    \ ==  11\n     module 2 has 2 ports:\n         entPhysicalChildIndex.12.13 ==\
    \ 13\n         entPhysicalChildIndex.12.14 == 14\n"
- title: 4.3.  EMAN Example
  contents:
  - "4.3.  EMAN Example\n   As an example, to illustrate the use of the MIB objects\
    \ introduced\n   with Energy Management (EMAN) applications, consider a router\
    \ that\n   has 16 slots with line cards.  An example of the entPhysicalTable is\n\
    \   given for 3 components of the router, a chassis, a slot, and a line\n   card\
    \ in that slot.  The chassis contains the slot, and the slot\n   contains the\
    \ line card.\n       entPhysicalDescr.1 == 'ACME Series 16 Slots'\n       entPhysicalVendorType.1\
    \ == acmeProducts.chassisTypes.1\n       entPhysicalContainedIn.1 == 0\n     \
    \  entPhysicalClass.1 == chassis(3)\n       entPhysicalParentRelPos.1 == -1\n\
    \       entPhysicalName.1 == 'Router 0 Chassis'\n       entPhysicalHardwareRev.1\
    \ == ''\n       entPhysicalSoftwareRev.1 == ''\n       entPhysicalFirmwareRev.1\
    \ == ''\n       entPhysicalSerialNum.1 == 'abcd1234'\n       entPhysicalMfgName.1\
    \ == 'ACME'\n       entPhysicalModelName.1 == 'ACME-16-LCC'\n       entPhysicalAlias.1\
    \ == ''\n       entPhysicalAssetID.1 == ''\n       entPhysicalIsFRU.1 == true(1)\n\
    \       entPhysicalMfgDate.1 == '2008-7-28,13:30:30.0,-4:0'\n       entPhysicalUris.1\
    \ == 'urn:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'\n       entPhysicalUUID.1 == 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'\n\
    \       entPhysicalDescr.2 == 'ACME Line Card Slot'\n       entPhysicalVendorType.2\
    \ == acmeProducts.slotTypes.1\n       entPhysicalContainedIn.2 == 1\n       entPhysicalClass.2\
    \ = container(5)\n       entPhysicalParentRelPos.2 == 6\n       entPhysicalName.2\
    \ == 'Slot 6'\n       entPhysicalHardwareRev.2 == ''\n       entPhysicalFirmwareRev.2\
    \ == ''\n       entPhysicalSoftwareRev.2 == ''\n       entPhysicalSerialNum.2\
    \ ==   ''\n       entPhysicalMfgName.2 ==     'ACME'\n       entPhysicalModelName.2\
    \ ==   ''\n       entPhysicalAlias.2 ==   ''\n       entPhysicalAssetID.2 == ''\n\
    \       entPhysicalIsFRU.2 == false(2)\n       entPhysicalUris.2 == ''urn:7dc53df5-703e-49b3-8670-b1c468f47f1f'\n\
    \       entPhysicalUUID.2 == '7dc53df5-703e-49b3-8670-b1c468f47f1f'\n       entPhysicalDescr.4\
    \ == 'ACME Series1 Line Card'\n       entPhysicalVendorType.4 == acmeProducts.moduleTypes.14\n\
    \       entPhysicalContainedIn.4 == 2\n       entPhysicalClass.4 == module(9)\n\
    \       entPhysicalParentRelPos.4 == 0\n       entPhysicalName.4 == 'Series1 Linecard'\n\
    \       entPhysicalHardwareRev.4 == ''\n       entPhysicalFirmwareRev.4 == ''\n\
    \       entPhysicalSoftwareRev.4 == ''\n       entPhysicalSerialNum.4 ==   ''\n\
    \       entPhysicalMfgName.4 == 'ACME'\n       entPhysicalModelName.4 == ''\n\
    \       entPhysicalAlias.4 == ''\n       entPhysicalAssetID.4 == ''\n       entPhysicalIsFRU.4\
    \ == true(1)\n       entPhysicalUris.4 ==  'urn:01c47915-4777-11d8-bc70-0090272ff725'\n\
    \       entPhysicalUUID.4 == '01c47915-4777-11d8-bc70-0090272ff725'\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are a number of management objects defined\
    \ in these MIB modules\n   with a MAX-ACCESS clause of read-write and/or read-create.\
    \  Such\n   objects may be considered sensitive or vulnerable in some network\n\
    \   environments.  The support for SET operations in a non-secure\n   environment\
    \ without proper protection can have a negative effect on\n   network operations.\
    \  These are the tables and objects and their\n   sensitivity/vulnerability:\n\
    \      entPhysicalSerialNum\n      entPhysicalAlias\n      entPhysicalAssetID\n\
    \      entPhysicalUris\n   These objects contain information about the physical\
    \ entities within\n   a managed system, which may be used to identify the serial\
    \ number,\n   identification of assets and managed components, and handling of\
    \ the\n   managed objects.  Their mis-configuration or disclosure may reveal\n\
    \   sensitive information on assets, perturb the management of entities,\n   or\
    \ cause privacy issues if they allow tracking of values that are\n   personally\
    \ identifying.\n   Some of the readable objects in these MIB modules (i.e., objects\
    \ with\n   a MAX-ACCESS other than not-accessible) may be considered sensitive\n\
    \   or vulnerable in some network environments.  It is thus important to\n   control\
    \ even GET and/or NOTIFY access to these objects and possibly\n   to even encrypt\
    \ the values of these objects when sending them over\n   the network via SNMP.\
    \  These are the tables and objects and their\n   sensitivity/vulnerability:\n\
    \      entPhysicalDescr\n      entPhysicalVendorType\n      entPhysicalHardwareRev\n\
    \      entPhysicalFirmwareRev\n      entPhysicalSoftwareRev\n      entPhysicalMfgName\n\
    \      entPhysicalModelName\n      entPhysicalUUID\n   These objects expose information\
    \ about the physical entities within a\n   managed system, which may be used to\
    \ identify the vendor, model,\n   version, and specific device-identification\
    \ information of each\n   system component.\n      entLogicalDescr\n      entLogicalType\n\
    \   These objects expose the type of logical entities present in the\n   managed\
    \ system.\n      entLogicalCommunity\n   This object exposes community names associated\
    \ with particular\n   logical entities within the system.\n      entLogicalTAddress\n\
    \      entLogicalTDomain\n   These objects expose network addresses that can be\
    \ used to\n   communicate with an SNMP agent on behalf of particular logical\n\
    \   entities within the system.\n      entLogicalContextEngineID\n      entLogicalContextName\n\
    \   These objects identify the authoritative SNMP engine that contains\n   information\
    \ on behalf of particular logical entities within the\n   system.\n   SNMP versions\
    \ prior to SNMPv3 did not include adequate security.\n   Even if the network itself\
    \ is secure (for example by using IPsec),\n   there is no control as to who on\
    \ the secure network is allowed to\n   access and GET/SET (read/change/create/delete)\
    \ the objects in these\n   MIB modules.\n   Implementations SHOULD provide the\
    \ security features described by the\n   SNMPv3 framework (see [RFC3410]), and\
    \ implementations claiming\n   compliance to the SNMPv3 standard MUST include\
    \ full support for\n   authentication and privacy via the User-based Security\
    \ Model (USM)\n   [RFC3414] with the AES cipher algorithm [RFC3826].  Implementations\n\
    \   MAY also provide support for the Transport Security Model (TSM)\n   [RFC5591]\
    \ in combination with a secure transport such as SSH\n   [RFC5592] or TLS/DTLS\
    \ [RFC6353].\n   Further, deployment of SNMP versions prior to SNMPv3 is NOT\n\
    \   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable\
    \ cryptographic security.  It is then a customer/operator\n   responsibility to\
    \ ensure that the SNMP entity giving access to an\n   instance of these MIB modules\
    \ is properly configured to give access\n   to the objects only to those principals\
    \ (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)\
    \ them.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document defines the first version of the IANA-maintained\n\
    \   IANA-ENTITY-MIB module, which allows new physical classes to be added\n  \
    \ to the enumeration in IANAPhysicalClass.  An Expert Review, as\n   defined in\
    \ RFC 5226 [RFC5226], is REQUIRED for each modification.\n   The MIB module in\
    \ this document uses the following IANA-assigned\n   OBJECT IDENTIFIER values\
    \ recorded in the SMI Numbers registry:\n              Descriptor        OBJECT\
    \ IDENTIFIER value\n              ----------        -----------------------\n\
    \              entityMIB          { mib-2 47 }\n   IANA has allocated two OBJECT\
    \ IDENTIFIERS under mib-2 for:\n              Descriptor        OBJECT IDENTIFIER\
    \ value\n              ----------        -----------------------\n           \
    \   ianaEntityMIB      { mib-2 216 }\n              uuidTCMIB          { mib-2\
    \ 217 }\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The first three versions of RFCs on the ENTITY MIB modules\
    \ were\n   authored by A. Bierman and K. McCloghrie.  The authors would like to\n\
    \   thank A. Bierman and K. McCloghrie for the earlier versions of the\n   ENTITY\
    \ MIB.\n   The motivation for the extension to RFC 4133 stems from the\n   requirements\
    \ of the EMAN WG of the IETF.\n   The authors also thank Juergen Schoenwaelder\
    \ for his review and\n   comments for improving this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2578]     McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n\
    \                 \"Structure of Management Information Version 2\n          \
    \       (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [RFC2579]     McCloghrie,\
    \ K., Ed., Perkins, D., Ed., and J.\n                 Schoenwaelder, Ed., \"Textual\
    \ Conventions for SMIv2\",\n                 STD 58, RFC 2579, April 1999.\n \
    \  [RFC2580]     McCloghrie, K., Ed., Perkins, D., Ed., and J.\n             \
    \    Schoenwaelder, Ed., \"Conformance Statements for SMIv2\",\n             \
    \    STD 58, RFC 2580, April 1999.\n   [RFC3411]     Harrington, D., Presuhn,\
    \ R., and B. Wijnen, \"An\n                 Architecture for Describing Simple\
    \ Network Management\n                 Protocol (SNMP) Management Frameworks\"\
    , STD 62, RFC\n                 3411, December 2002.\n   [RFC3414]     Blumenthal,\
    \ U. and B. Wijnen, \"User-based Security\n                 Model (USM) for version\
    \ 3 of the Simple Network\n                 Management Protocol (SNMPv3)\", STD\
    \ 62, RFC 3414,\n                 December 2002.\n   [RFC3826]     Blumenthal,\
    \ U., Maino, F., and K. McCloghrie, \"The\n                 Advanced Encryption\
    \ Standard (AES) Cipher Algorithm in\n                 the SNMP User-based Security\
    \ Model\", RFC 3826, June\n                 2004.\n   [RFC3986]     Berners-Lee,\
    \ T., Fielding, R., and L. Masinter,\n                 \"Uniform Resource Identifier\
    \ (URI): Generic Syntax\",\n                 STD 66, RFC 3986, January 2005.\n\
    \   [RFC4122]     Leach, P., Mealling, M., and R. Salz, \"A Universally\n    \
    \             Unique IDentifier (UUID) URN Namespace\", RFC 4122, July\n     \
    \            2005.\n   [RFC5226]     Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing\n                 an IANA Considerations Section in RFCs\", BCP\
    \ 26, RFC\n                 5226, May 2008.\n   [RFC5591]     Harrington, D. and\
    \ W. Hardaker, \"Transport Security\n                 Model for the Simple Network\
    \ Management Protocol\n                 (SNMP)\", RFC 5591, June 2009.\n   [RFC5592]\
    \     Harrington, D., Salowey, J., and W. Hardaker, \"Secure\n               \
    \  Shell Transport Model for the Simple Network Management\n                 Protocol\
    \ (SNMP)\", RFC 5592, June 2009.\n   [RFC6353]     Hardaker, W., \"Transport Layer\
    \ Security (TLS) Transport\n                 Model for the Simple Network Management\
    \ Protocol\n                 (SNMP)\", RFC 6353, July 2011.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC1157]     Case, J., Fedor, M., Schoffstall,\
    \ M., and J. Davin,\n                 \"Simple Network Management Protocol (SNMP)\"\
    , RFC 1157,\n                 May 1990.\n   [RFC1516]     McMaster, D. and K.\
    \ McCloghrie, \"Definitions of Managed\n                 Objects for IEEE 802.3\
    \ Repeater Devices\", RFC 1516,\n                 September 1993.\n   [RFC2108]\
    \     de Graaf, K., Romascanu, D., McMaster, D., and K.\n                 McCloghrie,\
    \ \"Definitions of Managed Objects for IEEE\n                 802.3 Repeater Devices\
    \ using SMIv2\", RFC 2108, February\n                 1997.\n   [RFC2037]    \
    \ McCloghrie, K. and A. Bierman, \"Entity MIB using\n                 SMIv2\"\
    , RFC 2037, October 1996.\n   [RFC2737]     McCloghrie, K. and A. Bierman, \"\
    Entity MIB (Version\n                 2)\", RFC 2737, December 1999.\n   [RFC2863]\
    \     McCloghrie, K. and F. Kastenholz, \"The Interfaces Group\n             \
    \    MIB\", RFC 2863, June 2000.\n   [RFC3406]     Daigle, L., van Gulik, D.,\
    \ Iannella, R., and P.\n                 Faltstrom, \"Uniform Resource Names (URN)\
    \ Namespace\n                 Definition Mechanisms\", BCP 66, RFC 3406, October\
    \ 2002.\n   [RFC3410]     Case, J., Mundy, R., Partain, D., and B. Stewart,\n\
    \                 \"Introduction and Applicability Statements for\n          \
    \       Internet-Standard Management Framework\", RFC 3410,\n                \
    \ December 2002.\n   [RFC4133]     Bierman, A. and K. McCloghrie, \"Entity MIB\
    \ (Version\n                 3)\", RFC 4133, August 2005.\n   [RFC4152]     Tesink,\
    \ K. and R. Fox, \"A Uniform Resource Name (URN)\n                 Namespace for\
    \ the Common Language Equipment Identifier\n                 (CLEI) Code\", RFC\
    \ 4152, August 2005.\n   [RFC4188]     Norseth, K., Ed., and E. Bell, Ed., \"\
    Definitions of\n                 Managed Objects for Bridges\", RFC 4188, September\
    \ 2005.\n   [T1.213]      ATIS T1.213-2001, \"Coded Identification of Equipment\n\
    \                 Entities in the North American Telecommunications\n        \
    \         System for Information Exchange\", 2001, <www.ansi.org>.\n   [T1.213a]\
    \     ATIS T1.213a, \"Supplement to T1.213-2001, Coded\n                 Identification\
    \ of Equipment Entities in the North\n                 American Telecommunications\
    \ System for Information\n                 Exchange, to Correct the Representation\
    \ of the Basic\n                 Code in Figure B.1\", 2001, <www.ansi.org>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks, Inc.\n   274 Redwood Shores\
    \ Parkway, #133\n   Redwood City, CA 94065\n   USA\n   Phone: +1 408-716-0466\n\
    \   EMail: andy@yumaworks.com\n   Dan Romascanu\n   Avaya\n   Park Atidim, Bldg.\
    \ #3\n   Tel Aviv, 61581\n   Israel\n   Phone: +972-3-6458414\n   EMail: dromasca@avaya.com\n\
    \   Juergen Quittek\n   NEC Europe Ltd.\n   Network Research Division\n   Kurfuersten-Anlage\
    \ 36\n   Heidelberg  69115\n   Germany\n   Phone: +49 6221 4342-115\n   EMail:\
    \ quittek@neclab.eu\n   Mouli Chandramouli\n   Cisco Systems, Inc.\n   Sarjapur\
    \ Outer Ring Road\n   Bangalore 560103\n   India\n   Phone: +91 80 4429 2409\n\
    \   EMail: moulchan@cisco.com\n"
