- title: __initial_text__
  contents:
  - '                       Report on MD5 Performance

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   MD5 is an authentication algorithm, which has been proposed as the\n\
    \   default authentication option in IPv6.  When enabled, the MD5\n   algorithm\
    \ operates over the entire data packet, including header.\n   This RFC addresses\
    \ how fast MD5 can be implemented in software and\n   hardware, and whether it\
    \ supports currently available IP bandwidth.\n   MD5 can be implemented in existing\
    \ hardware technology at 256 Mbps,\n   and in software at 87 Mbps.  These rates\
    \ cannot support current IP\n   rates, e.g., 100 Mbps TCP and 130 Mbps UDP over\
    \ ATM.  If MD5 cannot\n   support existing network bandwidth using existing technology,\
    \ it will\n   not scale as network speeds increase in the future.  This RFC is\n\
    \   intended to alert the IP community about the performance limitations\n   of\
    \ MD5, and to suggest that alternatives be considered for use in\n   high speed\
    \ IP implementations.\n"
- title: Introduction
  contents:
  - "Introduction\n   MD5 is an authentication algorithm, which has been proposed\
    \ as one\n   authentication option in IPv6 [1].  RFC 1321 describes the MD5\n\
    \   algorithm and gives a reference implementation [3].  When enabled,\n   the\
    \ MD5 algorithm operates over the entire data packet, including\n   header (with\
    \ dummy values for volatile fields).  This RFC addresses\n   how fast MD5 can\
    \ be implemented in software and hardware, and whether\n   it supports currently\
    \ available IP bandwidth.\n   This RFC considers the general issue of checksumming\
    \ and security at\n   high speed in IPv6.  IPv6 has no header checksum (which\
    \ IPv4 has\n   [5]), but proposes an authentication digest over the entire body\
    \ of\n   the packet (including header where volatile fields are zeroed) [1].\n\
    \   This RFC specifically addresses the performance of that\n   authentication\
    \ mechanism.\n"
- title: Measurements
  contents:
  - "Measurements\n   The performance of MD5 was measured.  The code was an optimized\n\
    \   version of the MD5 reference implementation from the RFC [3], and is\n   available\
    \ for anonymous FTP [7].  The following are the results of\n   the performance\
    \ test \"md5 -t\", modified to prohibit on-chip caching\n   of the data block:\n\
    \        87 Mbps    DEC Alpha (190 Mhz)\n        33 Mbps    HP 9000/720\n    \
    \    48 Mbps    IBM RS/6000 7006 (PPC 601 @80 Mhz)\n        31 Mbps    Intel i486/66\
    \ NetBSD\n        44 Mbps    Intel Pentium/90 NeXTStep\n        52 Mbps    SGI/IP-20\
    \ IRIX 5.2\n        37 Mbps    Sun SPARC-10/51, SPARC-20/50 SunOS 4.1.3\n    \
    \    57 Mbps    Sun SPARC-20/71 SunOS 4.1.3\n   These rates do not keep up with\
    \ currently available IP bandwidth,\n   e.g., 100 Mbps TCP and 130 Mbps UDP over\
    \ a Fore SBA-200 ATM host\n   interface in a Sun SPARC-20/71.\n   Values as high\
    \ as 100 Mbps have been reported for the DEC Alpha (190\n   Mhz).  These values\
    \ reflect on-chip caching of the data.  It is not\n   clear at this time whether\
    \ in-memory, off-chip cache, or on-chip\n   cache performance measures are more\
    \ relevant to IP performance.\n"
- title: Analysis of the MD5 Algorithm
  contents:
  - "Analysis of the MD5 Algorithm\n   The MD5 algorithm is a block-chained hashing\
    \ algorithm.  The first\n   block is hashed with an initial seed, resulting in\
    \ a hash.  The hash\n   is summed with the seed, and that result becomes the seed\
    \ for the\n   next block.  When the last block is computed, it's \"next-seed'\
    \ value\n   becomes the hash for the entire stream. Thus, the seed for block\n\
    \   depends on both the hash and the seed of its preceding block.  As a\n   result,\
    \ blocks cannot be hashed in parallel.\n   Each 16-word (64-byte) block is hashed\
    \ via 64 basic steps, using a\n   4-word intermediate hash, and collapsing the\
    \ intermediate hash at the\n   end.  The 64 steps are 16 groups of 4 steps, one\
    \ step per\n   intermediate hash word.  This RFC uses the following notation (as\n\
    \   from RFC-1321 [3]):\n        A,B,C,D         intermediate hash words\n   \
    \     X[i]            input data block\n        T[i]            sine table lookup\n\
    \        << i            rotate i bits\n        F               logical functions\
    \ of 3 args\n   The subscripts to X, I, and << are fixed for each step, and are\n\
    \   omitted here.  There are four different logical functions, also\n   omitted.\
    \  Each 4-step group looks like:\n        A = B + ((A + F(B,C,D) + X[i] + T[i])\
    \ << i)\n        D = A + ((D + F(A,B,C) + X[i] + T[i]) << i)\n        C = D +\
    \ ((C + F(D,A,B) + X[i] + T[i]) << i)\n        B = C + ((B + F(C,D,A) + X[i] +\
    \ T[i]) << i)\n   Note that this has the general form shown below. Due to the\n\
    \   complexity of the function 'f', these equations cannot be transformed\n  \
    \ into a less serial set.\n        A = f(D); B = f(A); C = f(B); D = f(C)\n  \
    \ Each steps is composed of two table lookups, one rotation, a 3-\n   component\
    \ logical operation, and 4 additions.  The best\n   parallelization possible leaves\
    \ F(x,y,z) to the last step, waiting as\n   long as possible for the result from\
    \ the previous step.  The\n   resulting tree is shown below.\n     (t0) B* C \
    \ C  D      X   T\n          |  |  |  |      |   |\n          |  |  |  |     \
    \ |   |\n           \\/    \\/        \\ /\n      t1   op    op   A     +    \
    \                           X   T\n            \\    /    \\    /            \
    \                    |   |\n             \\  /      \\  /                    \
    \             |   |\n              \\/        \\/                            \
    \       \\ /\n      t2      op        +             (t0) B* C  C  D   A     +\n\
    \               \\       /                   |  |  |  |    \\    /\n         \
    \        \\   /                      \\ |  | /      \\  /\n                  \\\
    \ /                         \\\\//         \\/\n      t3           +         \
    \          t1      op          +\n                   |                       \
    \     \\         /\n                   |                              \\     /\n\
    \                   |                                \\ /\n      t4          \
    \ <<      B*          t2            +       B*\n                    \\     / \
    \                          \\     /\n                     \\   /             \
    \                <<  /\n                      \\ /                           \
    \    \\ /\n      t5               +               t3                +\n      \
    \                 |                                 |\n                      \
    \ |                                 |\n                       |              \
    \                   |\n                       A**                            \
    \   A**\n            Binary operation tree             Optimized hardware tree\n\
    \   This diagram assumes that each operation takes one unit time.  The\n   tree\
    \ shows the items that depend on the previous step as B*, and the\n   item that\
    \ the next step depends on as A**.  Sequences of the binary\n   operation tree\
    \ cannot be overlapped, but the optimized hardware tree\n   can (by one time step).\n\
    \   There are 4 steps processed per word of input, ignoring inter-block\n   processing.\
    \  The speed of the overall algorithm depends on how fast\n   we can process these\
    \ 4 steps, vs.  the bandwidth of one word of input\n   being processed.\n   The\
    \ binary tree takes 5 time units per step of the algorithm, and\n   permits at\
    \ best 3-way parallelism (at time t1).  In software, this\n   means it takes 5\
    \ * 4 = 20 instructions per word input.  A computer\n   capable of M MIPS can\
    \ support a data bandwidth of M/20 * 32 Mbps,\n   i.e., bits per second equal\
    \ to 1.6x its MIPS rate.  Therefore, a 100\n   MIPS machine can support a 160\
    \ Mbps stream.\n        Parallel software rate in Mbps = 1.6 * MIPS rate\n   This\
    \ assumes that register reads and writes are overlapped with\n   computation entirely.\
    \  Without any parallelism, there are 8\n   operations per step, and 4 steps per\
    \ word, so 32 operations per word,\n   i.e., the data rate in Mbps would be identical\
    \ to the MIPS rate:\n        Serial software rate in Mbps = MIPS rate\n   Predictions\
    \ using SpecInt92 numbers as MIPS estimators can be\n   compared with measured\
    \ rates [2]:\n     Spec-    Predicted      MD5\n     Int92   Upper-Bound   Measured\
    \      Machine\n   ------------------------------------------------------------\n\
    \     122       122-195     87 Mbps    DEC Alpha (190 Mhz)\n      48        48-\
    \ 77     33 Mbps    HP 9000/720\n      88        88-141     48 Mbps    IBM RS/6000\
    \ 7006 (PPC 601 @80 Mhz)\n      32        32- 51     31 Mbps    Intel i486/33\
    \ NetBSD\n      90        90-144     44 Mbps    Intel Pentium/90 NeXTStep\n  \
    \    90        90-144     52 Mbps    SGI/IP-20 IRIX 5.2\n      65        65-104\
    \     37 Mbps    Sun SPARC-10/51 SunOS 4.1.3\n     126       126-202     57 Mbps\
    \    Sun SPARC-20/71 SunOS 4.1.3\n   The hardware rate takes 3 time units per\
    \ step, i.e.  3 * 4 = 12 time\n   units per word of input.  Hardware capable of\
    \ doing an operation\n   (e.g., 32-bit addition) in N nanoseconds can support\
    \ a data bandwidth\n   of 32/12/N bps, i.e., 2/3N bps.\n        Hardware rate\
    \ in Mbps = 8/3N * 1,000\n   For CMOS, an operation (32-bit addition, including\
    \ register retrieval\n   and storage) costs about 5.2 ns (2.6 ns per add, 2 ns\
    \ for latching)\n   [6].  There are 6 clocks through the most highly-parallelized\n\
    \   implementation, resulting in 31.2 ns per 32-bit word, or 256 Mbps\n   [6].\
    \  This will not keep pace with existing hardware, which is\n   capable of link\
    \ speeds in excess of 622 Mbps (ATM).\n   By comparison, IPv4 uses the Internet\
    \ Checksum [5].  This checksum\n   can be performed in 32-bit-wide units in excess\
    \ of 1 Gbps in an\n   existing, low-cost PLD.  The checksum can also be parallelized\
    \ by\n   computing partial sums and reducing the result.\n"
- title: One Proposed Solution
  contents:
  - "One Proposed Solution\n   There are several ways to increase the performance\
    \ of the IPv6\n   authentication mechanism.  One is to increase the hardware\n\
    \   performance of MD5 by slightly modifying the algorithm, the other is\n   to\
    \ propose a replacement algorithm.  This RFC discusses briefly the\n   modification\
    \ of MD5 for high-speed hardware implementation.\n   Alternate algorithms, capable\
    \ of 3.5x the speed of MD5, have been\n   discussed elsewhere [6].\n   MD5 uses\
    \ block chaining to ensure sensitivity to block order.  Block\n   chaining also\
    \ prevents arbitrary parallelism, which can be as much a\n   benefit to the spoofer\
    \ as to the user.  MD5 can be slightly altered\n   to accommodate a higher bandwidth\
    \ data rate.  There should be a\n   predetermined finite number of blocks processed\
    \ from independent\n   seeds, such that the I-th block is part of the \"I mod\
    \ K\"-th chain.\n   The resulting K digests themselves form a message, which can\
    \ be MD5-\n   encoded using a single-block algorithm. This idea was proposed\n\
    \   independently by the author and by Burt Kaliski of RSA.\n   The goal is to\
    \ support finite parallelism to provide adequate\n   bandwidth at current processing\
    \ rates, without providing arbitrary\n   power for spoofing.  It would require\
    \ further analysis to ensure that\n   it provides an adequate level of security.\n\
    \   For current technology and network bandwidth, a minimum of 4-way\n   parallel\
    \ chaining would suffice, and 16-way chaining would be\n   preferable.  This would\
    \ support network bandwidth of 1 Gbps with 4-\n   way chaining, in CMOS hardware.\
    \  The chaining parallelism should be a\n   multiple of 4-way, to generate a complete\
    \ block of digests (4 words\n   per digest, 16 words per block).  This modification\
    \ is believed to\n   achieve the goals of MD5, without the penalties of implementation\
    \ of\n   the current MD5 algorithm.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document addresses a mechanism for providing\
    \ security in\n   IPv6.  MD5 is the proposed default optional authentication mechanism\n\
    \   for IPv6 traffic.  This RFC specifically addresses the concern that\n   security\
    \ mechanisms such as MD5 that cannot support high bandwidth\n   with available\
    \ hardware will compromise their deployment, and\n   ultimately, the security\
    \ of the systems they are intended to\n   maintain.\n   The IPv6 requirements\
    \ document emphasizes that IPv6 implementations\n   should not compromise performance,\
    \ compared to IPv4.  This is\n   presumably despite IPv6's increased functionality.\
    \  \"Required\n   optional\" components of IPv6 should be held to this same standard.\n\
    \   MD5 compromises performance, and so its use as a required default\n   option\
    \ in IPv6 should be reconsidered.\n   The use of MD5 as the default to the required\
    \ authentication option\n   may compromise security in high-bandwidth systems,\
    \ because enabling\n   the option causes performance degradation, defeating its\
    \ inclusion as\n   an IPv6 option.  As a result, the authentication option may\
    \ be\n   disabled entirely.\n   It is important to the use of authentication in\
    \ high-performance\n   systems that an alternative mechanism be available in IPv6\
    \ from the\n   outset.  This may require the specification of multiple \"required\"\
    \n   authentication algorithms - one that's slower but believed strong,\n   and\
    \ one that's faster but may inspire somewhat less confidence.\n"
- title: Conclusions
  contents:
  - "Conclusions\n   MD5 cannot be implemented in existing technology at rates in\
    \ excess\n   of 256 Mbps in hardware, or 86 Mbps in software.  MD5 is a proposed\n\
    \   authentication option in IPv6, a protocol that should support\n   existing\
    \ networking technology, which is capable of 130 Mbps UDP.\n   As a result, MD5\
    \ cannot be used to support IP authentication in\n   existing networks at existing\
    \ rates.  Although MD5 will support\n   higher bandwidth in the future due to\
    \ technological advances, these\n   will be offset by similar advances in networking.\
    \  If MD5 cannot\n   support existing network bandwidth using existing technology,\
    \ it will\n   not be able to scale as network speeds increase in the future. \
    \ This\n   RFC proposes that MD5 be modified to support a 16-way block chaining,\n\
    \   in order to allow existing technology (CMOS hardware) to support\n   existing\
    \ networking rates (1 Gbps).  It further proposes that\n   alternatives to MD5\
    \ be considered for use in high-speed networks.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to thank Steve Kent at BBN, Burt Kaliski,\n\
    \   Victor Chang, and Steve Burnett at RSA, Ran Atkinson at the NRL, and\n   the\
    \ HPCC Division at ISI for reviewing the contents of this document.\n   Burt independently\
    \ suggested the block-parallel modification proposed\n   here.\n"
- title: References
  contents:
  - "References\n   [1] Atkinson, R., \"IPv6 Authentication Header\", Work in Progress,\n\
    \       Naval Research Lab, February 1995.\n   [2] DiMarco, J., \"Spec Benchmark\
    \ table, V.  4.12\",\n       <ftp://ftp.cfd.toronto.edu/pub/spectable>.\n   [3]\
    \ Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC1321, MIT LCS\n       &\
    \ RSA Data Security, Inc., April 1992.\n   [4] Partridge, C., and F. Kastenholz,\
    \ \"Technical Criteria for\n       Choosing IP The Next Generation (IPng)\", RFC\
    \ 1726, BBN Systems\n       and Technologies, FTP Software, December 1994.\n \
    \  [5] Postel, J., \"Internet Protocol - DARPA Internet Program Protocol\n   \
    \    Specification,\" STD 5, RFC 791, USC/Information Sciences\n       Institute,\
    \ September 1981.\n   [6] Touch, J., \"Performance Analysis fo MD5,\" to appear\
    \ in ACM\n       Sigcomm '95, Boston.\n   [7] Touch, J., Optimized MD5 software,\
    \ <ftp://ftp.isi.edu/pub/hpcc-\n       papers/touch/md5-opt.tar>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Joe Touch\n   Information Sciences Institute\n   University\
    \ of Southern California\n   4676 Admiralty Way\n   Marina del Rey, CA 90292-6695\n\
    \   USA\n   Phone: +1 310-822-1511 x151\n   Fax:   +1 310-823-6714\n   URL:  \
    \ ftp://ftp.isi.edu/pub/hpcc-papers/touch\n   EMail: touch@isi.edu\n"
