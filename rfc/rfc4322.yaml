- title: __initial_text__
  contents:
  - '     Opportunistic Encryption using the Internet Key Exchange (IKE)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes opportunistic encryption (OE) as designed\
    \ and\n   implemented by the Linux FreeS/WAN project.  OE uses the Internet Key\n\
    \   Exchange (IKE) and IPsec protocols.  The objective is to allow\n   encryption\
    \ for secure communication without any pre-arrangement\n   specific to the pair\
    \ of systems involved.  DNS is used to distribute\n   the public keys of each\
    \ system involved.  This is resistant to\n   passive attacks.  The use of DNS\
    \ Security (DNSSEC) secures this\n   system against active attackers as well.\n\
    \   As a result, the administrative overhead is reduced from the square\n   of\
    \ the number of systems to a linear dependence, and it becomes\n   possible to\
    \ make secure communication the default even when the\n   partner is not known\
    \ in advance.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Motivation .................................................3\n  \
    \    1.2. Encryption Regimes .........................................4\n    \
    \  1.3. Peer Authentication in Opportunistic Encryption ............4\n      1.4.\
    \ Use of RFC 2119 Terms ......................................5\n   2. Overview\
    \ ........................................................6\n      2.1. Reference\
    \ Diagram ..........................................6\n      2.2. Terminology\
    \ ................................................6\n      2.3. Model of Operation\
    \ .........................................8\n   3. Protocol Specification ..........................................9\n\
    \      3.1. Forwarding Plane State Machine .............................9\n  \
    \    3.2. Keying Daemon -- Initiator ................................12\n    \
    \  3.3. Keying Daemon -- Responder ................................20\n      3.4.\
    \ Renewal and Teardown ......................................22\n   4. Impacts\
    \ on IKE .................................................24\n      4.1. ISAKMP/IKE\
    \ Protocol .......................................24\n      4.2. Gateway Discovery\
    \ Process .................................24\n      4.3. Self Identification\
    \ .......................................24\n      4.4. Public Key Retrieval Process\
    \ ..............................25\n      4.5. Interactions with DNSSEC ..................................25\n\
    \      4.6. Required Proposal Types ...................................25\n  \
    \ 5. DNS Issues .....................................................26\n    \
    \  5.1. Use of KEY Record .........................................26\n      5.2.\
    \ Use of TXT Delegation Record ..............................27\n      5.3. Use\
    \ of FQDN IDs ...........................................29\n      5.4. Key Roll-Over\
    \ .............................................29\n   6. Network Address Translation\
    \ Interaction ........................30\n      6.1. Co-Located NAT/NAPT .......................................30\n\
    \      6.2. Security Gateway behind a NAT/NAPT ........................30\n  \
    \    6.3. End System behind a NAT/NAPT ..............................31\n   7.\
    \ Host Implementations ...........................................31\n   8. Multi-Homing\
    \ ...................................................31\n   9. Failure Modes ..................................................33\n\
    \      9.1. DNS Failures ..............................................33\n  \
    \    9.2. DNS Configured, IKE Failures ..............................33\n    \
    \  9.3. System Reboots ............................................34\n   10.\
    \ Unresolved Issues .............................................34\n      10.1.\
    \ Control of Reverse DNS ...................................34\n   11. Examples\
    \ ......................................................34\n      11.1. Clear-Text\
    \ Usage (Permit Policy) .........................34\n      11.2. Opportunistic\
    \ Encryption .................................36\n   12. Security Considerations\
    \ .......................................39\n      12.1. Configured versus Opportunistic\
    \ Tunnels ..................39\n      12.2. Firewalls versus Opportunistic Tunnels\
    \ ...................40\n      12.3. Denial of Service ........................................41\n\
    \   13. Acknowledgements ..............................................41\n  \
    \ 14. References ....................................................41\n    \
    \  14.1. Normative References .....................................41\n      14.2.\
    \ Informative References ...................................42\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   The objective of opportunistic encryption is to allow encryption\n\
    \   without any pre-arrangement specific to the pair of systems involved.\n  \
    \ Each system administrator adds public key information to DNS records\n   to\
    \ support opportunistic encryption and then enables this feature in\n   the nodes'\
    \ IPsec stack.  Once this is done, any two such nodes can\n   communicate securely.\n\
    \   This document describes opportunistic encryption as designed and\n   implemented\
    \ by the Linux FreeS/WAN project in revisions up and\n   including 2.00.  Note\
    \ that 2.01 and beyond implements [RFC3445] in a\n   backward compatible way.\
    \  A future document [IPSECKEY] will describe\n   a variation that complies with\
    \ RFC 3445.  For project information,\n   see http://www.freeswan.org.\n   The\
    \ Internet Architecture Board (IAB) and Internet Engineering\n   Steering Group\
    \ (IESG) have taken a strong stand that the Internet\n   should use powerful encryption\
    \ to provide security and privacy\n   [RFC1984].  The Linux FreeS/WAN project\
    \ attempts to provide a\n   practical means to implement this policy.\n   The\
    \ project uses the IPsec, ISAKMP/IKE, DNS, and DNSSEC protocols\n   because they\
    \ are standardized, widely available, and can often be\n   deployed very easily\
    \ without changing hardware or software, or\n   retraining users.\n   The extensions\
    \ to support opportunistic encryption are simple.  No\n   changes to any on-the-wire\
    \ formats are needed.  The only changes are\n   to the policy decision making\
    \ system.  This means that opportunistic\n   encryption can be implemented with\
    \ very minimal changes to an\n   existing IPsec implementation.\n   Opportunistic\
    \ encryption creates a \"fax effect\".  The proliferation\n   of the fax machine\
    \ was possible because it did not require that\n   everyone buy one overnight.\
    \  Instead, as each person installed one,\n   the value of having one increased\
    \ because there were more people that\n   could receive faxes.  Once opportunistic\
    \ encryption is installed, it\n   automatically recognizes other boxes using opportunistic\
    \ encryption,\n   without any further configuration by the network administrator.\
    \  So,\n   as opportunistic encryption software is installed on more boxes, its\n\
    \   value as a tool increases.\n   This document describes the infrastructure\
    \ to permit deployment of\n   Opportunistic Encryption.\n   The term S/WAN is\
    \ a trademark of RSA Data Systems, and is used with\n   permission by this project.\n"
- title: 1.2.  Encryption Regimes
  contents:
  - "1.2.  Encryption Regimes\n   To aid in understanding the relationship between\
    \ security processing\n   and IPsec, we divide policies controlling network traffic\
    \ into four\n   categories.  The traffic is categorized by destination address\
    \ using\n   longest prefix match.  Therefore, each category is enumerated by a\n\
    \   set of network prefixes.  The categories are mutually exclusive; a\n   particular\
    \ prefix should only occur in one category.\n   * Deny: network prefixes to which\
    \ traffic is always forbidden.\n   * Permit: network prefixes to which traffic\
    \ in the clear is\n     permitted.\n   * Opportunistic tunnel: network prefixes\
    \ to which traffic is\n     encrypted if possible, when it otherwise might be\
    \ sent in the\n     clear.\n   * Configured tunnel: network prefixes to which\
    \ traffic must be\n     encrypted, and traffic in the clear is never permitted.\
    \  A\n     traditionally defined Virtual Private Network (VPN) is a form of\n\
    \     configured tunnel.\n   Traditional firewall devices handle the first two\
    \ categories.  No\n   authentication is required.  The permit policy is currently\
    \ the\n   default on the Internet.\n   This document describes the third category:\
    \ opportunistic tunnel,\n   which is proposed as the new default for the Internet.\n\
    \   Category four's policy is a very strict \"encrypt it or drop it\"\n   policy,\
    \ which requires authentication of the endpoints.  As the\n   number of endpoints\
    \ is typically bounded and is typically under a\n   single authority, arranging\
    \ for distribution of authentication\n   material, while difficult, does not require\
    \ any new technology.  The\n   mechanism described here, however, does provides\
    \ an additional way to\n   distribute the authentication materials; it is a public\
    \ key method\n   that does not require deployment of an X.509 based infrastructure.\n"
- title: 1.3.  Peer Authentication in Opportunistic Encryption
  contents:
  - "1.3.  Peer Authentication in Opportunistic Encryption\n   Opportunistic encryption\
    \ creates tunnels between nodes that are\n   essentially strangers.  This is done\
    \ without any prior bilateral\n   arrangement.  Therefore, there is the difficult\
    \ question of how one\n   knows to whom one is talking.\n   One possible answer\
    \ is that since no useful authentication can be\n   done, none should be tried.\
    \  This mode of operation is named\n   \"anonymous encryption\".  An active man-in-the-middle\
    \ attack can be\n   used to thwart the privacy of this type of communication.\
    \  Without\n   peer authentication, there is no way to prevent this kind of attack.\n\
    \   Although it is a useful mode, anonymous encryption is not the goal of\n  \
    \ this project.  Simpler methods are available that can achieve\n   anonymous\
    \ encryption only, but authentication of the peer is a\n   desirable goal.  Authentication\
    \ of the peer is achieved through key\n   distribution in DNS, leveraging upon\
    \ the authentication of the DNS in\n   DNSSEC.\n   Peers are, therefore, authenticated\
    \ with DNSSEC when available.\n   Local policy determines how much trust to extend\
    \ when DNSSEC is not\n   available.\n   An essential premise of building private\
    \ connections with strangers\n   is that datagrams received through opportunistic\
    \ tunnels are no more\n   special than datagrams that arrive in the clear.  Unlike\
    \ in a VPN,\n   these datagrams should not be given any special exceptions when\
    \ it\n   comes to auditing, further authentication, or firewalling.\n   When initiating\
    \ outbound opportunistic encryption, local\n   configuration determines what happens\
    \ if tunnel setup fails.  The\n   packet may go out in the clear, or it may be\
    \ dropped.\n"
- title: 1.4.  Use of RFC 2119 Terms
  contents:
  - "1.4.  Use of RFC 2119 Terms\n   The keywords MUST, MUST NOT, REQUIRED, SHALL,\
    \ SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they\
    \ appear in this\n   document, are to be interpreted as described in [RFC2119]\n"
- title: 2.  Overview
  contents:
  - '2.  Overview

    '
- title: 2.1.  Reference Diagram
  contents:
  - "2.1.  Reference Diagram\n   The following network diagram is used in the rest\
    \ of this document as\n   the canonical diagram:\n                           \
    \   [Q]  [R]\n                               .    .              AS2\n      [A]----+----[SG-A].......+....+.......[SG-B]-------[B]\n\
    \             |                 ......\n         AS1 |                 ..PI..\n\
    \             |                 ......\n      [D]----+----[SG-D].......+....+.......[C]\
    \ AS3\n                    Figure 1: Reference Network Diagram\n   In this diagram,\
    \ there are four end-nodes: A, B, C, and D.  There are\n   three security gateways,\
    \ SG-A, SG-B, SG-D.  A, D, SG-A, and SG-D are\n   part of the same administrative\
    \ authority, AS1.  SG-A and SG-D are on\n   two different exit paths from organization\
    \ 1.  SG-B and B are part of\n   an independent organization, AS2.  Nodes Q and\
    \ R are nodes on the\n   Internet.  PI is the Public Internet (\"The Wild\").\n"
- title: 2.2.  Terminology
  contents:
  - "2.2.  Terminology\n   Note: The network numbers used in this document are for\
    \ illustrative\n   purposes only.  This document could not use the reserved example\n\
    \   network numbers of [RFC3330] because multiple address ranges were\n   needed.\n\
    \   The following terminology is used in this document:\n   Security gateway (or\
    \ simply gateway): a system that performs IPsec\n      tunnel mode encapsulation/decapsulation.\
    \  [SG-x] in the diagram.\n   Alice: node [A] in the diagram.  When an IP address\
    \ is needed, this\n      is 192.1.0.65.\n   Bob: node [B] in the diagram.  When\
    \ an IP address is needed, this is\n      192.2.0.66.\n   Carol: node [C] in the\
    \ diagram.  When an IP address is needed, this\n      is 192.1.1.67.\n   Dave:\
    \ node [D] in the diagram.  When an IP address is needed, this is\n      192.3.0.68.\n\
    \   SG-A: Alice's security gateway.  Internally it is 192.1.0.1,\n      externally\
    \ it is 192.1.1.4.\n   SG-B: Bob's security gateway.  Internally it is 192.2.0.1,\
    \ externally\n      it is 192.1.1.5.\n   SG-D: Dave's security gateway.  Also\
    \ Alice's backup security gateway.\n      Internally it is 192.3.0.1, externally\
    \ it is 192.1.1.6.\n   Configured tunnel: a tunnel that is directly and deliberately\
    \ hand-\n      configured on participating gateways.  Configured tunnels are\n\
    \      typically given a higher level of trust than opportunistic\n      tunnels.\n\
    \   Road warrior tunnel: a configured tunnel connecting one node with a\n    \
    \  fixed IP address and one node with a variable IP address.  A road\n      warrior\
    \ (RW) connection must be initiated by the variable node,\n      since the fixed\
    \ node cannot know the current address for the road\n      warrior.\n   Anonymous\
    \ encryption: the process of encrypting a session without any\n      knowledge\
    \ of who the other parties are.  No authentication of\n      identities is done.\n\
    \   Opportunistic encryption: the process of encrypting a session with\n     \
    \ authenticated knowledge of who the other party is without\n      prearrangement.\n\
    \   Lifetime: the period in seconds (bytes or datagrams) for which a\n      security\
    \ association will remain alive before rekeying is needed.\n   Lifespan: the effective\
    \ time for which a security association remains\n      useful.  A security association\
    \ with a lifespan shorter than its\n      lifetime would be removed when no longer\
    \ needed.  A security\n      association with a lifespan longer than its lifetime\
    \ would need to\n      be re-keyed one or more times.\n   Phase 1 SA: an ISAKMP/IKE\
    \ security association sometimes referred to\n      as a keying channel.\n   Phase\
    \ 2 SA: an IPsec security association.\n   Tunnel: another term for a set of phase\
    \ 2 SA (one in each direction).\n   NAT: Network Address Translation (see [RFC2663]).\n\
    \   NAPT: Network Address and Port Translation (see [RFC2663]).\n   AS: an autonomous\
    \ system.\n   FQDN: Fully-Qualified Domain Name\n   Default-free zone: a set of\
    \ routers that maintain a complete set of\n      routes to all currently reachable\
    \ destinations.  Having such a\n      list, these routers never make use of a\
    \ default route.  A datagram\n      with a destination address not matching any\
    \ route will be dropped\n      by such a router.\n"
- title: 2.3.  Model of Operation
  contents:
  - "2.3.  Model of Operation\n   The opportunistic encryption security gateway (OE\
    \ gateway) is a\n   regular gateway node, as described in [RFC0791] section 2.4\
    \ and\n   [RFC1812], with the additional capabilities described here and in\n\
    \   [RFC2401].  The algorithm described here provides a way to determine,\n  \
    \ for each datagram, whether or not to encrypt and tunnel the datagram.\n   Two\
    \ important things that must be determined are whether or not to\n   encrypt and\
    \ tunnel and, if so, the destination address or name of the\n   tunnel endpoint\
    \ that should be used.\n"
- title: 2.3.1.  Tunnel Authorization
  contents:
  - "2.3.1.  Tunnel Authorization\n   The OE gateway determines whether or not to\
    \ create a tunnel based on\n   the destination address of each packet.  Upon receiving\
    \ a packet with\n   a destination address not recently seen, the OE gateway performs\
    \ a\n   lookup in DNS for an authorization resource record (see Section 5.2).\n\
    \   The record is located using the IP address to perform a search in the\n  \
    \ in-addr.arpa (IPv4) or ip6.arpa (IPv6) maps.  If an authorization\n   record\
    \ is found, the OE gateway interprets this as a request for a\n   tunnel to be\
    \ formed.\n"
- title: 2.3.2.  Tunnel Endpoint Discovery
  contents:
  - "2.3.2.  Tunnel Endpoint Discovery\n   The authorization resource record also\
    \ provides the address or name\n   of the tunnel endpoint that should be used.\n\
    \   The record may also provide the public RSA key of the tunnel end\n   point\
    \ itself.  This is provided for efficiency only.  If the public\n   RSA key is\
    \ not present, the OE gateway performs a second lookup to\n   find a KEY resource\
    \ record for the endpoint address or name.\n   Origin and integrity protection\
    \ of the resource records is provided\n   by DNSSEC (see [RFC4033]).  Section\
    \ 3.2.4.1 documents an optional\n   restriction on the tunnel endpoint if DNSSEC\
    \ signatures are not\n   available for the relevant records.\n"
- title: 2.3.3.  Caching of Authorization Results
  contents:
  - "2.3.3.  Caching of Authorization Results\n   The OE gateway maintains a cache,\
    \ in the forwarding plane, of\n   source/destination pairs for which opportunistic\
    \ encryption has been\n   attempted.  This cache maintains a record of whether\
    \ or not OE was\n   successful so that subsequent datagrams can be forwarded properly\n\
    \   without additional delay.\n   Successful negotiation of OE instantiates a\
    \ new security association.\n   Failure to negotiate OE results in creation of\
    \ a forwarding policy\n   entry either to deny or permit transmission in the clear\
    \ future\n   datagrams.  This negative cache is necessary to avoid the possibly\n\
    \   lengthy process of repeatedly looking up the same information.\n   The cache\
    \ is timed out periodically, as described in Section 3.4.\n   This removes entries\
    \ that are no longer being used and permits the\n   discovery of changes in authorization\
    \ policy.\n"
- title: 3.  Protocol Specification
  contents:
  - "3.  Protocol Specification\n   The OE gateway is modeled to have a forwarding\
    \ plane and a control\n   plane.  A control channel, such as PF_KEY [RFC2367],\
    \ connects the two\n   planes.\n   The forwarding plane performs per-datagram\
    \ operations.  The control\n   plane contains a keying daemon, such as ISAKMP/IKE,\
    \ and performs all\n   authorization, peer authentication, and key derivation\
    \ functions.\n"
- title: 3.1.  Forwarding Plane State Machine
  contents:
  - "3.1.  Forwarding Plane State Machine\n   Let the OE gateway maintain a collection\
    \ of objects -- a superset of\n   the security policy database (SPD) specified\
    \ in [RFC2401].  For each\n   combination of source and destination address, an\
    \ SPD object exists\n   in one of five following states.  Prior to forwarding\
    \ each datagram,\n   the responder uses the source and destination addresses to\
    \ pick an\n   entry from the SPD.  The SPD then determines if and how the packet\
    \ is\n   forwarded.\n         .--------------.\n         | nonexistent  |\n  \
    \       |    policy    |\n         `--------------'\n                |\n     \
    \           | PF_ACQUIRE\n                |\n                |<---------.\n  \
    \              V          | new packet\n         .--------------.  | (maybe resend\
    \ PF_ACQUIRE)\n         |  hold policy |--'\n         |              |--.\n  \
    \       `--------------'   \\  pass\n            |        |       \\ msg    .---------.\n\
    \            |        |        \\       V         | forward\n            |   \
    \     |         .-------------.  | packet\n     create |        |         | pass\
    \ policy |--'\n     IPsec  |        |         `-------------'\n     SA     | \
    \       |\n            |         \\\n            |          \\\n            V\
    \           \\ deny\n      .---------.        \\ msg\n      | encrypt |      \
    \   \\\n      | policy  |          \\         ,---------.\n      `---------' \
    \          \\        |         | discard\n                             \\    \
    \   V         | packet\n                              .-------------.  |\n   \
    \                           | deny policy |--'\n                             \
    \ `-------------'\n"
- title: 3.1.1.  Nonexistent Policy
  contents:
  - "3.1.1.  Nonexistent Policy\n   If the gateway does not find an entry, then this\
    \ policy applies.  The\n   gateway creates an entry with an initial state of \"\
    hold policy\" and\n   requests keying material from the keying daemon.  The gateway\
    \ does\n   not forward the datagram; rather, it SHOULD attach the datagram to\n\
    \   the SPD entry as the \"first\" datagram and retain it for eventual\n   transmission\
    \ in a new state.\n"
- title: 3.1.2.  Hold Policy
  contents:
  - "3.1.2.  Hold Policy\n   The gateway requests keying material.  If the interface\
    \ to the keying\n   system is lossy (PF_KEY, for instance, can be), the implementation\n\
    \   SHOULD include a mechanism to retransmit the keying request at a rate\n  \
    \ limited to less than 1 request per second.  The gateway does not\n   forward\
    \ the datagram.  The gateway SHOULD attach the datagram to the\n   SPD entry as\
    \ the \"last\" datagram, where it is retained for eventual\n   transmission. \
    \ If there is a datagram already stored in this way,\n   then that already-stored\
    \ datagram is discarded.\n   The rationale behind saving the \"first\" and \"\
    last\" datagrams are as\n   follows: The \"first\" datagram is probably a TCP\
    \ SYN packet.  Once\n   there is keying established, the gateway will release\
    \ this datagram,\n   avoiding the need for the endpoint to retransmit the datagram.\
    \  In\n   the case where the connection was not a TCP connection, but was\n  \
    \ instead a streaming protocol or a DNS request, the \"last\" datagram\n   that\
    \ was retained is likely the most recent data.  The difference\n   between \"\
    first\" and \"last\" may also help the endpoints determine\n   which data was\
    \ dropped while negotiation took place.\n"
- title: 3.1.3.  Pass-Through Policy
  contents:
  - "3.1.3.  Pass-Through Policy\n   The gateway forwards the datagram using the normal\
    \ forwarding table.\n   The gateway enters this state only by command from the\
    \ keying daemon,\n   and upon entering this state, also forwards the \"first\"\
    \ and \"last\"\n   datagrams.\n"
- title: 3.1.4.  Deny Policy
  contents:
  - "3.1.4.  Deny Policy\n   The gateway discards the datagram.  The gateway enters\
    \ this state\n   only by command from the keying daemon, and upon entering this\
    \ state,\n   discards the \"first\" and \"last\" datagrams.  An implementation\
    \ MAY\n   provide the administrator with a control to determine if further\n \
    \  datagrams cause ICMP messages to be generated (i.e., ICMP Destination\n   Unreachable,\
    \ Communication Administratively Prohibited.  type=3,\n   code=13).\n"
- title: 3.1.5.  Encrypt Policy
  contents:
  - "3.1.5.  Encrypt Policy\n   The gateway encrypts the datagram using the indicated\
    \ security\n   association database (SAD) entry.  The gateway enters this state\
    \ only\n   by command from the keying daemon, and upon entering this state,\n\
    \   releases and forwards the \"first\" and \"last\" datagrams using the new\n\
    \   encrypt policy.\n   If the associated SAD entry expires because of byte, packet\
    \ or time\n   limits, then the entry returns to the Hold policy, and an expire\n\
    \   message is sent to the keying daemon.\n   All states may be created directly\
    \ by the keying daemon while acting\n   as a gateway.\n"
- title: 3.2.  Keying Daemon -- Initiator
  contents:
  - "3.2.  Keying Daemon -- Initiator\n   Let the keying daemon maintain a collection\
    \ of objects.  Let them be\n   called \"connections\" or \"conn\"s.  There are\
    \ two categories of\n   connection objects: classes and instances.  A class represents\
    \ an\n   abstract policy (i.e., what could be).  An instance represents an\n \
    \  actual connection (i.e., what is running at the time).\n   Let there be two\
    \ further subtypes of connections: keying channels\n   (Phase 1 SAs) and data\
    \ channels (Phase 2 SAs).  Each data channel\n   object may have a corresponding\
    \ SPD and SAD entry maintained by the\n   datagram state machine.\n   For the\
    \ purposes of opportunistic encryption, there MUST, at least,\n   be connection\
    \ classes known as \"deny\", \"always-clear-text\", \"OE-\n   permissive\", and\
    \ \"OE-paranoid\".  The latter two connection classes\n   define a set of destination\
    \ prefixes for which opportunistic\n   encryption will be attempted.  The administrator\
    \ MAY set policy\n   options in a number of additional places.  An implementation\
    \ MAY\n   create additional connection classes to further refine these\n   policies.\n\
    \   The simplest system may need only the \"OE-permissive\" connection, and\n\
    \   would list its own (single) IP address as the source address of this\n   policy\
    \ and the wild-card address 0.0.0.0/0 as the destination IPv4\n   address.  That\
    \ is, the simplest policy is to try opportunistic\n   encryption with all destinations.\n\
    \   This simplest policy SHOULD be offered as a preconfigured default.\n   The\
    \ distinction between permissive and paranoid Opportunistic\n   Encryption (\"\
    OE-paranoid\" below) use will become clear in the state\n   transition differences.\n\
    \   In brief, an OE-permissive policy means to permit traffic to flow in\n   the\
    \ clear when there is a failure to find and/or use the encryption\n   keys.  OE-permissive\
    \ permits the network to function, even if in an\n   insecure manner.\n   On failure,\
    \ a paranoid OE (\"OE-paranoid\") will install a drop policy.\n   OE-paranoid\
    \ permits traffic to flow only when appropriate security is\n   available.\n \
    \  In this description of the keying machine's state transitions, the\n   states\
    \ associated with the keying system itself are omitted because\n   they are best\
    \ documented in the keying system ([RFC2407], [RFC2408],\n   and [RFC2409] for\
    \ ISAKMP/IKE), and the details are keying system\n   specific.  Opportunistic\
    \ encryption is not dependent upon any\n   specific keying protocol, but this\
    \ document does provide requirements\n   for those using ISAKMP/IKE to assure\
    \ that implementations inter-\n   operate.\n   The state transitions that may\
    \ be involved in communicating with the\n   forwarding plane are omitted.  PF_KEY\
    \ and similar protocols have\n   their own set of states required for message\
    \ sends and completion\n   notifications.\n   Finally, the retransmits and recursive\
    \ lookups that are normal for\n   DNS are not included in this description of\
    \ the state machine.\n                         |\n                         | PF_ACQUIRE\n\
    \                         |\n                         V\n                 .---------------.\n\
    \                 |  nonexistent  |\n                 |  connection   |\n    \
    \             `---------------'\n                  |      |      |\n         \
    \  send   ,      |      \\\n expired   pass  /       |       \\ send\n conn. \
    \    msg  /        |        \\ deny\n   ^           /         |         \\ msg\n\
    \   |          V          | do       \\\n .---------------.       | DNS      \
    \ \\   .---------------.\n |  clear-text   |       | lookup     `->|     deny\
    \      |--->expired\n |  connection   |       | for           |  connection  \
    \ |  connection\n `---------------'       | destination   `---------------'\n\
    \    ^ ^                  |                   ^\n    | | no record        |  \
    \                 |\n    | | OE-permissive    V                   | no record\n\
    \    | |            .---------------.         | OE-paranoid\n    | `------------|\
    \  potential OE |---------'\n    |              |  connection   |         ^\n\
    \    |              `---------------'         |\n    |                    |  \
    \                 |\n    |                    | got TXT record    | DNSSEC failure\n\
    \    |                    | reply             |\n    |                    V  \
    \                 | wrong\n    |              .---------------.         | failure\n\
    \    |              |  authenticate |---------'\n    |              | & parse\
    \ TXT RR|         ^\n    | repeated     `---------------'         |\n    | ICMP\
    \               |                   |\n    | failures           | initiate IKE\
    \ to   |\n    | (short timeout)    | responder         |\n    |              \
    \      V                   |\n    | phase-2      .---------------.         | failure\n\
    \    | failure      |   pending     |---------'\n    | (normal      |     OE \
    \       |         ^\n    |  timeout)    |               |invalid  | phase-2 fail\
    \ (normal\n    |              |               |<--.SPI  |               timeout)\n\
    \    |              |               |   |     | ICMP failures (short\n    |  \
    \            | +=======+     |---'     |                timeout)\n    |      \
    \        | |  IKE  |     |   ^     |\n    `----------------| states|---------------'\n\
    \                   | +=======+     |   |\n                   `---------------'\
    \   |\n                         | IPsec SA    | invalid SPI\n                \
    \         | established |\n                         V             | rekey time\n\
    \                   .--------------.    |\n                   |   keyed      |<---|------------------------------.\n\
    \                   |  connection  |----'                              |\n   \
    \                `--------------'                                   |\n      \
    \                   | timer                                      |\n         \
    \                |                                            |\n            \
    \             V                                            |\n               \
    \    .--------------.     connection still active       |\n   clear-text----->|\
    \   expired    |-----------------------------------'\n         deny----->|  connection\
    \  |\n                   `--------------'\n                         | dead connection\
    \ - deleted\n                         V\n"
- title: 3.2.1.  Nonexistent Connection
  contents:
  - "3.2.1.  Nonexistent Connection\n   There is no connection instance for a given\
    \ source/destination\n   address pair.  Upon receipt of a request for keying material\
    \ for this\n   source/destination pair, the initiator searches through the\n \
    \  connection classes to determine the most appropriate policy.  Upon\n   determining\
    \ an appropriate connection class, an instance object is\n   created of that type.\
    \  Both of the OE types result in a potential OE\n   connection.\n   Failure to\
    \ find an appropriate connection class results in an\n   administrator-defined\
    \ default.\n   In each case, when the initiator finds an appropriate class for\
    \ the\n   new flow, an instance connection is made of the class that matched.\n"
- title: 3.2.2.  Clear-Text Connection
  contents:
  - "3.2.2.  Clear-Text Connection\n   The nonexistent connection makes a transition\
    \ to this state when an\n   always-clear-text class is instantiated, or when an\
    \ OE-permissive\n   connection fails.  During the transition, the initiator creates\
    \ a\n   pass-through policy object in the forwarding plane for the\n   appropriate\
    \ flow.\n   Timing out is the only way to leave this state (see Section 3.2.7).\n"
- title: 3.2.3.  Deny Connection
  contents:
  - "3.2.3.  Deny Connection\n   The empty connection makes a transition to this state\
    \ when a deny\n   class is instantiated, or when an OE-paranoid connection fails.\n\
    \   During the transition, the initiator creates a deny policy object in\n   the\
    \ forwarding plane for the appropriate flow.\n   Timing out is the only way to\
    \ leave this state (see Section 3.2.7).\n"
- title: 3.2.4.  Potential OE Connection
  contents:
  - "3.2.4.  Potential OE Connection\n   The empty connection makes a transition to\
    \ this state when one of\n   either OE class is instantiated.  During the transition\
    \ to this\n   state, the initiator creates a hold policy object in the forwarding\n\
    \   plane for the appropriate flow.\n   In addition, when making a transition\
    \ into this state, DNS lookup is\n   done in the reverse-map for a TXT delegation\
    \ resource record (see\n   Section 5.2).  The lookup key is the destination address\
    \ of the flow.\n   There are three ways to exit this state:\n   1.  DNS lookup\
    \ finds a TXT delegation resource record.\n   2.  DNS lookup does not find a TXT\
    \ delegation resource record.\n   3.  DNS lookup times out.\n   Based upon the\
    \ results of the DNS lookup, the potential OE connection\n   makes a transition\
    \ to the pending OE connection state.  The\n   conditions for a successful DNS\
    \ look are:\n   1.  DNS finds an appropriate resource record.\n   2.  It is properly\
    \ formatted according to Section 5.2.\n   3.  If DNSSEC is enabled, then the signature\
    \ has been vouched for.\n   Note that if the initiator does not find the public\
    \ key present in\n   the TXT delegation record, then the public key must be looked\
    \ up as a\n   sub-state.  Only successful completion of all the DNS lookups is\n\
    \   considered a success.\n   If DNS lookup does not find a resource record or\
    \ if DNS times out,\n   then the initiator considers the receiver not OE capable.\
    \  If this is\n   an OE-paranoid instance, then the potential OE connection makes\
    \ a\n   transition to the deny connection state.  If this is an OE-permissive\n\
    \   instance, then the potential OE connection makes a transition to the\n   clear-text\
    \ connection state.\n   If the initiator finds a resource record, but it is not\
    \ properly\n   formatted, or if DNSSEC is enabled and reports a failure to\n \
    \  authenticate, then the potential OE connection makes a transition to\n   the\
    \ deny connection state.  This action SHOULD be logged.  If the\n   administrator\
    \ wishes to override this transition between states, then\n   an always-clear\
    \ class can be installed for this flow.  An\n   implementation MAY make this situation\
    \ a new class.\n"
- title: 3.2.4.1.  Restriction on Unauthenticated TXT Delegation Records
  contents:
  - "3.2.4.1.  Restriction on Unauthenticated TXT Delegation Records\n   An implementation\
    \ SHOULD also provide an additional administrative\n   control on delegation records\
    \ and DNSSEC.  This control would apply\n   to delegation records (the TXT records\
    \ in the reverse-map) that are\n   not protected by DNSSEC.  Records of this type\
    \ are only permitted to\n   delegate to their own address as a gateway.  When\
    \ this option is\n   enabled, an active attack on DNS will be unable to redirect\
    \ packets\n   to other than the original destination.\n"
- title: 3.2.5.  Pending OE Connection
  contents:
  - "3.2.5.  Pending OE Connection\n   The potential OE connection makes a transition\
    \ to this state when the\n   initiator determines that all the information required\
    \ from the DNS\n   lookup is present.  Upon entering this state, the initiator\
    \ attempts\n   to initiate keying to the gateway provided.\n   Exit from this\
    \ state occurs with either a successfully created IPsec\n   SA or a failure of\
    \ some kind.  Successful SA creation results in a\n   transition to the key connection\
    \ state.\n   Three failures have caused significant problems.  They are clearly\n\
    \   not the only possible failures from keying.\n   Note that if there are multiple\
    \ gateways available in the TXT\n   delegation records, then a failure can only\
    \ be declared after all of\n   them have been tried.  Further, creation of a phase\
    \ 1 SA does not\n   constitute success.  A set of phase 2 SAs (a tunnel) is considered\n\
    \   success.\n   The first failure occurs when an ICMP port unreachable is\n \
    \  consistently received without any other communication, or when there\n   is\
    \ silence from the remote end.  This usually means that either the\n   gateway\
    \ is not alive, or the keying daemon is not functional.  For an\n   OE-permissive\
    \ connection, the initiator makes a transition to the\n   clear-text connection,\
    \ but with a low lifespan.  For an OE-\n   pessimistic connection, the initiator\
    \ makes a transition to the deny\n   connection again with a low lifespan.  The\
    \ lifespan in both cases is\n   kept low because the remote gateway may be in\
    \ the process of\n   rebooting or be otherwise temporarily unavailable.\n   The\
    \ length of time to wait for the remote keying daemon to wake up is\n   a matter\
    \ of some debate.  If there is a routing failure, 5 minutes is\n   usually long\
    \ enough for the network to re-converge.  Many systems can\n   reboot in that\
    \ amount of time as well.  However, 5 minutes is far too\n   long for most users\
    \ to wait to hear that they can not connect using\n   OE.  Implementations SHOULD\
    \ make this a tunable parameter.\n   The second failure occurs after a phase 1\
    \ SA has been created, but\n   there is either no response to the phase 2 proposal,\
    \ or the initiator\n   receives a negative notify (the notify must be authenticated).\
    \  The\n   remote gateway is not prepared to do OE at this time.  As before, the\n\
    \   initiator makes a transition to the clear-text or the deny connection\n  \
    \ based upon connection class, but this time with a normal lifespan.\n   The third\
    \ failure occurs when there is signature failure while\n   authenticating the\
    \ remote gateway.  This can occur when there has\n   been a key roll-over, but\
    \ DNS has not caught up.  In this case again,\n   the initiator makes a transition\
    \ to the clear-text or the deny\n   connection based upon the connection class.\
    \  However, the lifespan\n   depends upon the remaining time to live in the DNS.\
    \  (Note that\n   DNSSEC signed resource records have a different expiry time\
    \ from\n   non-signed records.)\n"
- title: 3.2.6.  Keyed Connection
  contents:
  - "3.2.6.  Keyed Connection\n   The pending OE connection makes a transition to\
    \ this state when\n   session keying material (the phase 2 SAs) is derived.  The\
    \ initiator\n   creates an encrypt policy in the forwarding plane for this flow.\n\
    \   There are three ways to exit this state.  The first is by receipt of\n   an\
    \ authenticated delete message (via the keying channel) from the\n   peer.  This\
    \ is normal teardown and results in a transition to the\n   expired connection\
    \ state.\n   The second exit is by expiry of the forwarding plane keying material.\n\
    \   This starts a re-key operation with a transition back to pending OE\n   connection.\
    \  In general, the soft expiry occurs with sufficient time\n   left to continue\
    \ using the keys.  A re-key can fail, which may result\n   in the connection failing\
    \ to clear-text or deny as appropriate.  In\n   the event of a failure, the forwarding\
    \ plane policy does not change\n   until the phase 2 SA (IPsec SA) reaches its\
    \ hard expiry.\n   The third exit is in response to a negotiation from a remote\
    \ gateway.\n   If the forwarding plane signals the control plane that it has\n\
    \   received an unknown SPI from the remote gateway, or an ICMP is\n   received\
    \ from the remote gateway indicating an unknown SPI, the\n   initiator should\
    \ consider that the remote gateway has rebooted or\n   restarted.  Since these\
    \ indications are easily forged, the\n   implementation must exercise care.  The\
    \ initiator should make a\n   cautious (rate-limited) attempt to re-key the connection.\n"
- title: 3.2.7.  Expiring Connection
  contents:
  - "3.2.7.  Expiring Connection\n   The initiator will periodically place each of\
    \ the deny, clear-text,\n   and keyed connections into this sub-state.  See Section\
    \ 3.4 for more\n   details of how often this occurs.  The initiator queries the\n\
    \   forwarding plane for last use time of the appropriate policy.  If the\n  \
    \ last use time is relatively recent, then the connection returns to\n   the previous\
    \ deny, clear-text or keyed connection state.  If not,\n   then the connection\
    \ enters the expired connection state.\n   The DNS query and answer that lead\
    \ to the expiring connection state\n   are also examined.  The DNS query may become\
    \ stale.  (A negative,\n   i.e., no such record, answer is valid for the period\
    \ of time given by\n   the MINIMUM field in an attached SOA record.  See [RFC1034]\
    \ section\n   4.3.4.)  If the DNS query is stale, then a new query is made.  If\
    \ the\n   results change, then the connection makes a transition to a new state\n\
    \   as described in potential OE connection state.\n   Note that when considering\
    \ how stale a connection is, both outgoing\n   SPD and incoming SAD must be queried\
    \ as some flows may be\n   unidirectional for some time.\n   Also note that the\
    \ policy at the forwarding plane is not updated\n   unless there is a conclusion\
    \ that there should be a change.\n"
- title: 3.2.8.  Expired Connection
  contents:
  - "3.2.8.  Expired Connection\n   Entry to this state occurs when no datagrams have\
    \ been forwarded\n   recently via the appropriate SPD and SAD objects.  The objects\
    \ in the\n   forwarding plane are removed (logging any final byte and packet\n\
    \   counts, if appropriate) and the connection instance in the keying\n   plane\
    \ is deleted.\n   The initiator sends an ISAKMP/IKE delete to clean up the phase\
    \ 2 SAs\n   as described in Section 3.4.\n   Whether or not to delete the phase\
    \ 1 SAs at this time is left as a\n   local implementation issue.  Implementations\
    \ that do delete the phase\n   1 SAs MUST send authenticated delete messages to\
    \ indicate that they\n   are doing so.  There is an advantage to keeping the phase\
    \ 1 SAs until\n   they expire: they may prove useful again in the near future.\n"
- title: 3.3.  Keying Daemon -- Responder
  contents:
  - "3.3.  Keying Daemon -- Responder\n   The responder has a set of objects identical\
    \ to those of the\n   initiator.\n   The responder receives an invitation to create\
    \ a keying channel from\n   an initiator.\n                   |\n            \
    \       | IKE main mode\n                   |  phase 1\n                   V\n\
    \           .-----------------.\n           | unauthenticated |\n           |\
    \     OE peer     |\n           `-----------------'\n                   |\n  \
    \                 | lookup KEY RR in in-addr.arpa\n                   |      \
    \       (if ID_IPV4_ADDR)\n                   | lookup KEY RR in forward\n   \
    \                |             (if ID_FQDN)\n                   V\n          \
    \ .-----------------.  RR not found\n           |   received DNS  |--------------->\
    \ log failure\n           |     reply       |\n           `----+--------+---'\n\
    \             phase 2 |        \\      misformatted\n            proposal |  \
    \       `------------------> log failure\n                     V\n           .----------------.\n\
    \           |  authenticated |  identical initiator\n           |     OE peer\
    \    |--------------------> initiator\n           `----------------'  connection\
    \ found    state machine\n                 |\n                 | look for TXT\
    \ record for initiator\n                 |\n                 V\n           .---------------.\n\
    \           |  authorized   |---------------------> log failure\n           |\
    \    OE peer    |\n           `---------------'\n                 |\n        \
    \         |\n                 V\n            potential OE\n            connection\
    \ in\n            initiator state\n               machine\n"
- title: 3.3.1.  Unauthenticated OE Peer
  contents:
  - "3.3.1.  Unauthenticated OE Peer\n   Upon entering this state, the responder starts\
    \ a DNS lookup for a KEY\n   record for the initiator.  The responder looks in\
    \ the reverse-map for\n   a KEY record for the initiator if the initiator has\
    \ offered an\n   ID_IPV4_ADDR, and in the forward map if the initiator has offered\
    \ an\n   ID_FQDN type.  (See [RFC2407] section 4.6.2.1.)\n   The responder exits\
    \ this state upon successful receipt of a KEY from\n   DNS, and use of the key\
    \ to verify the signature of the initiator.\n   Successful authentication of the\
    \ peer results in a transition to the\n   authenticated OE Peer state.\n   Note\
    \ that the unauthenticated OE peer state generally occurs in the\n   middle of\
    \ the key negotiation protocol.  It is really a form of\n   pseudo-state.\n"
- title: 3.3.2.  Authenticated OE Peer
  contents:
  - "3.3.2.  Authenticated OE Peer\n   The peer will eventually propose one or more\
    \ phase 2 SAs.  The\n   responder uses the source and destination address in the\
    \ proposal to\n   finish instantiating the connection state using the connection\
    \ class\n   table.  The responder MUST search for an identical connection object\n\
    \   at this point.\n   If an identical connection is found, then the responder\
    \ deletes the\n   old instance, and the new object makes a transition to the pending\
    \ OE\n   connection state.  This means that new ISAKMP connections with a\n  \
    \ given peer will always use the latest instance, which is the correct\n   one\
    \ if the peer has rebooted in the interim.\n   If an identical connection is not\
    \ found, then the responder makes the\n   transition according to the rules given\
    \ for the initiator: it\n   installs appropriate policy: clear, drop, or OE.\n\
    \   If OE, and the phase 2 ID (source IP) is different than the phase 1\n   ID,\
    \ then additional authorization is required.  A TXT record\n   associated with\
    \ the proposed phase 2 source IP is requested.  This is\n   used to confirm authorization\
    \ for the phase 1 identity to encrypt on\n   behalf of the phase 2.  Successful\
    \ retrieval results in a transition\n   to \"Authorized OE Peer\".\n   Note that\
    \ if the initiator is in OE-paranoid mode and the responder\n   is in either always-clear-text\
    \ or deny, then no communication is\n   possible according to policy.  An implementation\
    \ is permitted to\n   create new types of policies such as \"accept OE but do\
    \ not initiate\n   it\".  This is a local matter.\n"
- title: 3.3.3.  Authorized OE Peer
  contents:
  - "3.3.3.  Authorized OE Peer\n   This state is entered from the Authenticated OE\
    \ Peer state, upon\n   successful retrieval of the TXT record.  The contents of\
    \ the record\n   are confirmed -- any failures lead to errors, as indicated in\
    \ Section\n   3.2.4.\n"
- title: 3.4.  Renewal and Teardown
  contents:
  - '3.4.  Renewal and Teardown

    '
- title: 3.4.1.  Aging
  contents:
  - "3.4.1.  Aging\n   A potentially unlimited number of tunnels may exist.  In practice,\n\
    \   only a few tunnels are used during a period of time.  Unused tunnels\n   MUST,\
    \ therefore, be torn down.  Detecting when tunnels are no longer\n   in use is\
    \ the subject of this section.\n   There are two methods for removing tunnels:\
    \ explicit deletion or\n   expiry.\n   Explicit deletion requires an IKE delete\
    \ message.  The deletes MUST\n   be authenticated, so both ends of the tunnel\
    \ must maintain the keying\n   channel (phase 1 ISAKMP SA).  An implementation\
    \ that refuses to\n   either maintain or recreate the keying channel SA will be\
    \ unable to\n   use this method.\n   The tunnel expiry method simply allows the\
    \ IKE daemon to expire\n   normally without attempting to re-key it.\n   Regardless\
    \ of which method is used to remove tunnels, the\n   implementation MUST use a\
    \ method to determine if the tunnel is still\n   in use.  The specifics are a\
    \ local matter, but the FreeS/WAN project\n   uses the following criteria.  These\
    \ criteria are currently\n   implemented in the key management daemon, but could\
    \ also be\n   implemented at the SPD layer using an idle timer.\n   Set a short\
    \ initial (soft) lifespan of 1 minute since many net flows\n   last only a few\
    \ seconds.\n   At the end of the lifespan, check to see if the tunnel was used\
    \ by\n   traffic in either direction during the last 30 seconds.  If so,\n   assign\
    \ a longer tentative lifespan of 20 minutes, after which, look\n   again.  If\
    \ the tunnel is not in use, then close the tunnel.\n   The expiring state in the\
    \ key management system (see Section 3.2.7)\n   implements these timeouts.  The\
    \ timer above may be in the forwarding\n   plane, but then it must be resettable.\n\
    \   The tentative lifespan is independent of re-keying; it is just the\n   time\
    \ when the tunnel's future is next considered.  (The term lifespan\n   is used\
    \ here rather than lifetime for this reason.)  Unlike re-\n   keying, this tunnel\
    \ use check is not costly and should happen\n   reasonably frequently.\n   A multi-step\
    \ back-off algorithm is not considered worth the effort\n   here.\n   If the security\
    \ gateway and the client host are the same, and not a\n   Bump-in-the-Stack or\
    \ Bump-in-the-Wire implementation, tunnel teardown\n   decisions MAY pay attention\
    \ to TCP connection status as reported by\n   the local TCP layer.  A still-open\
    \ TCP connection is almost a\n   guarantee that more traffic is expected.  Closing\
    \ of the only TCP\n   connection through a tunnel is a strong hint that no more\
    \ traffic is\n   expected.\n"
- title: 3.4.2.  Teardown and Cleanup
  contents:
  - "3.4.2.  Teardown and Cleanup\n   Teardown should always be coordinated between\
    \ the two ends of the\n   tunnel by interpreting and sending delete notifications.\
    \  There is a\n   detailed sub-state in the expired connection state of the key\
    \ manager\n   that relates to retransmits of the delete notifications, but this\
    \ is\n   considered to be a keying system detail.\n   On receiving a delete for\
    \ the outbound SAs of a tunnel (or some\n   subset of them), tear down the inbound\
    \ ones also and notify the\n   remote end with a delete.  If the local system\
    \ receives a delete for\n   a tunnel that is no longer in existence, then two\
    \ delete messages\n   have crossed paths.  Ignore the delete.  The operation has\
    \ already\n   been completed.  Do not generate any messages in this situation.\n\
    \   Tunnels are to be considered as bidirectional entities, even though\n   the\
    \ low-level protocols don't treat them this way.\n   When the deletion is initiated\
    \ locally, rather than as a response to\n   a received delete, send a delete for\
    \ (all) the inbound SAs of a\n   tunnel.  If the local system does not receive\
    \ a responding delete for\n   the outbound SAs, try re-sending the original delete.\
    \  Three tries\n   spaced 10 seconds apart seems a reasonable level of effort.\
    \  A\n   failure of the other end to respond after 3 attempts indicates that\n\
    \   the possibility of further communication is unlikely.  Remove the\n   outgoing\
    \ SAs.  (The remote system may be a mobile node that is no\n   longer present\
    \ or powered on.)\n   After re-keying, transmission should switch to using the\
    \ new outgoing\n   SAs (ISAKMP or IPsec) immediately, and the old leftover outgoing\
    \ SAs\n   should be cleared out promptly (delete should be sent for the\n   outgoing\
    \ SAs) rather than waiting for them to expire.  This reduces\n   clutter and minimizes\
    \ confusion for the operator doing diagnostics.\n"
- title: 4.  Impacts on IKE
  contents:
  - '4.  Impacts on IKE

    '
- title: 4.1.  ISAKMP/IKE Protocol
  contents:
  - "4.1.  ISAKMP/IKE Protocol\n   The IKE wire protocol needs no modifications. \
    \ The major changes are\n   implementation issues relating to how the proposals\
    \ are interpreted,\n   and from whom they may come.\n   As opportunistic encryption\
    \ is designed to be useful between peers\n   without prior operator configuration,\
    \ an IKE daemon must be prepared\n   to negotiate phase 1 SAs with any node. \
    \ This may require a large\n   amount of resources to maintain cookie state, as\
    \ well as large\n   amounts of entropy for nonces, cookies, and so on.\n   The\
    \ major changes to support opportunistic encryption are at the IKE\n   daemon\
    \ level.  These changes relate to handling of key acquisition\n   requests, lookup\
    \ of public keys and TXT records, and interactions\n   with firewalls and other\
    \ security facilities that may be co-resident\n   on the same gateway.\n"
- title: 4.2.  Gateway Discovery Process
  contents:
  - "4.2.  Gateway Discovery Process\n   In a typical configured tunnel, the address\
    \ of SG-B is provided via\n   configuration.  Furthermore, the mapping of an SPD\
    \ entry to a gateway\n   is typically a 1:1 mapping.  When the 0.0.0.0/0 SPD entry\
    \ technique\n   is used, then the mapping to a gateway is determined by the reverse\n\
    \   DNS records.\n   The need to do a DNS lookup and wait for a reply will typically\n\
    \   introduce a new state and a new event source (DNS replies) to IKE.\n   Although\
    \ a synchronous DNS request can be implemented for proof of\n   concept, experience\
    \ is that it can cause very high latencies when a\n   queue of queries must all\
    \ timeout in series.\n   Use of an asynchronous DNS lookup will also permit overlap\
    \ of DNS\n   lookups with some of the protocol steps.\n"
- title: 4.3.  Self Identification
  contents:
  - "4.3.  Self Identification\n   SG-A will have to establish its identity.  Use\
    \ an IPv4 (IPv6) ID in\n   phase 1.\n   There are many situations where the administrator\
    \ of SG-A may not be\n   able to control the reverse DNS records for SG-A's public\
    \ IP address.\n   Typical situations include dialup connections and most residential-\n\
    \   type broadband Internet access (ADSL, cable-modem) connections.  In\n   these\
    \ situations, a fully qualified domain name that is under the\n   control of SG-A's\
    \ administrator may be used when acting as an\n   initiator only.  The FQDN ID\
    \ should be used in phase 1.  See Section\n   5.3 for more details and restrictions.\n"
- title: 4.4.  Public Key Retrieval Process
  contents:
  - "4.4.  Public Key Retrieval Process\n   Upon receipt of a phase 1 SA proposal\
    \ with either an IPv4 (IPv6) ID\n   or an FQDN ID, an IKE daemon needs to examine\
    \ local caches and\n   configuration files to determine if this is part of a configured\n\
    \   tunnel.  If no configured tunnels are found, then the implementation\n   should\
    \ attempt to retrieve a KEY record from the reverse DNS in the\n   case of an\
    \ IPv4/IPv6 ID, or from the forward DNS in the case of FQDN\n   ID.\n   It is\
    \ reasonable that if other non-local sources of policy are used\n   (COPS, LDAP),\
    \ they be consulted concurrently, but that some clear\n   ordering of policy be\
    \ provided.  Note that due to variances in\n   latency, implementations must wait\
    \ for positive or negative replies\n   from all sources of policy before making\
    \ any decisions.\n"
- title: 4.5.  Interactions with DNSSEC
  contents:
  - "4.5.  Interactions with DNSSEC\n   The implementation described (FreeS/WAN 1.98)\
    \ neither uses DNSSEC\n   directly to explicitly verify the authenticity of zone\
    \ information,\n   nor uses the NSEC records to provide authentication of the\
    \ absence of\n   a TXT or KEY record.  Rather, this implementation uses a trusted\
    \ path\n   to a DNSSEC-capable caching resolver.\n   To distinguish between an\
    \ authenticated and an unauthenticated DNS\n   resource record, a stub resolver\
    \ capable of returning DNSSEC\n   information MUST be used.\n"
- title: 4.6.  Required Proposal Types
  contents:
  - '4.6.  Required Proposal Types

    '
- title: 4.6.1.  Phase 1 Parameters
  contents:
  - "4.6.1.  Phase 1 Parameters\n   Main mode MUST be used.\n   The initiator MUST\
    \ offer at least one proposal using some combination\n   of: 3DES, HMAC-MD5 or\
    \ HMAC-SHA1, DH group 2 or 5.  Group 5 SHOULD be\n   proposed first.  (See [RFC3526])\n\
    \   The initiator MAY offer additional proposals, but the cipher MUST not\n  \
    \ be weaker than 3DES.  The initiator SHOULD limit the number of\n   proposals\
    \ such that the IKE datagrams do not need to be fragmented.\n   The responder\
    \ MUST accept one of the proposals.  If any configuration\n   of the responder\
    \ is required, then the responder is not acting in an\n   opportunistic way.\n\
    \   The initiator SHOULD use an ID_IPV4_ADDR (ID_IPV6_ADDR for IPv6) of\n   the\
    \ external interface of the initiator for phase 1.  (There is an\n   exception,\
    \ see Section 5.3.)  The authentication method MUST be RSA\n   public key signatures.\
    \  The RSA key for the initiator SHOULD be\n   placed into a DNS KEY record in\
    \ the reverse space of the initiator\n   (i.e., using in-addr.arpa or ip6.arpa).\n"
- title: 4.6.2.  Phase 2 Parameters
  contents:
  - "4.6.2.  Phase 2 Parameters\n   The initiator MUST propose a tunnel between the\
    \ ultimate sender\n   (\"Alice\" or \"A\") and ultimate recipient (\"Bob\" or\
    \ \"B\") using 3DES-CBC\n   mode, MD5, or SHA1 authentication.  Perfect Forward\
    \ Secrecy MUST be\n   specified.\n   Tunnel mode MUST be used.\n   Identities\
    \ MUST be ID_IPV4_ADDR_SUBNET with the mask being /32.\n   Authorization for the\
    \ initiator to act on Alice's behalf is\n   determined by looking for a TXT record\
    \ in the reverse-map at Alice's\n   IP address.\n   Compression SHOULD NOT be\
    \ mandatory.  It MAY be offered as an option.\n"
- title: 5.  DNS Issues
  contents:
  - '5.  DNS Issues

    '
- title: 5.1.  Use of KEY Record
  contents:
  - "5.1.  Use of KEY Record\n   In order to establish their own identities, security\
    \ gateways SHOULD\n   publish their public keys in their reverse DNS via DNSSEC's\
    \ KEY\n   record.  See section 3 of RFC 2535 [RFC2535].\n   For example:\n   KEY\
    \ 0x4200 4 1 AQNJjkKlIk9...nYyUkKK8\n   0x4200: The flag bits, indicating that\
    \ this key is prohibited for\n      confidentiality use (it authenticates the\
    \ peer only, a separate\n      Diffie-Hellman exchange is used for confidentiality),\
    \ and that\n      this key is associated with the non-zone entity whose name is\
    \ the\n      RR owner name.  No other flags are set.\n   4: This indicates that\
    \ this key is for use by IPsec.\n   1: An RSA key is present.\n   AQNJjkKlIk9...nYyUkKK8:\
    \ The public key of the host as described in\n      [RFC3110].\n   Use of several\
    \ KEY records allows for key roll-over.  The SIG Payload\n   in IKE phase 1 SHOULD\
    \ be accepted if the public key, given by any KEY\n   RR, validates it.\n"
- title: 5.2.  Use of TXT Delegation Record
  contents:
  - "5.2.  Use of TXT Delegation Record\n   If, for example, machine Alice wishes\
    \ SG-A to act on her behalf, then\n   she publishes a TXT record to provide authorization\
    \ for SG-A to act\n   on Alice's behalf.  This is done similarly for Bob and SG-B.\n\
    \   These records are located in the reverse DNS (in-addr.arpa or\n   ip6.arpa)\
    \ for their respective IP addresses.  The reverse DNS SHOULD\n   be secured by\
    \ DNSSEC.  DNSSEC is required to defend against active\n   attacks.\n   If Alice's\
    \ address is P.Q.R.S, then she can authorize another node to\n   act on her behalf\
    \ by publishing records at:\n      S.R.Q.P.in-addr.arpa\n   The contents of the\
    \ resource record are expected to be a string that\n   uses the following syntax,\
    \ as suggested in RFC1464 [RFC1464].  (Note\n   that the reply to query may include\
    \ other TXT resource records used\n   by other applications.)\n      X-IPsec-Server(P)=A.B.C.D\
    \ public-key\n               Figure 2: Format of reverse delegation record\n \
    \  P: Specifies a precedence for this record.  This is similar to MX\n      record\
    \ preferences.  Lower numbers have stronger preference.\n   A.B.C.D: Specifies\
    \ the IP address of the Security Gateway for this\n      client machine.\n   public-key:\
    \ Is the encoded RSA Public key of the Security Gateway.\n      The public-key\
    \ is provided here to avoid a second DNS lookup.  If\n      this field is absent,\
    \ then a KEY resource record should be looked\n      up in the reverse-map of\
    \ A.B.C.D.  The key is transmitted in\n      base64 format.\n   The fields of\
    \ the record MUST be separated by whitespace.  This MAY\n   be: space, tab, newline,\
    \ or carriage return.  A space is preferred.\n   In the case where Alice is located\
    \ at a public address behind a\n   security gateway that has no fixed address\
    \ (or no control over its\n   reverse-map), then Alice may delegate to a public\
    \ key by domain name.\n      X-IPsec-Server(P)=@FQDN public-key\n       Figure\
    \ 3: Format of reverse delegation record (FQDN version)\n   P: Is as above.\n\
    \   FQDN: Specifies the FQDN that the Security Gateway will identify\n      itself\
    \ with.\n   public-key: Is the encoded RSA Public key of the Security Gateway.\n\
    \   If there is more than one such TXT record with strongest (lowest\n   numbered)\
    \ precedence, one Security Gateway is picked arbitrarily from\n   those specified\
    \ in the strongest-preference records.\n"
- title: 5.2.1.  Long TXT Records
  contents:
  - "5.2.1.  Long TXT Records\n   When packed into wire-format, TXT records that are\
    \ longer than 255\n   characters are divided into smaller <character-strings>.\
    \  (See\n   [RFC1035] section 3.3 and 3.3.14.)  These MUST be reassembled into\
    \ a\n   single string for processing.  Whitespace characters in the base64\n \
    \  encoding are to be ignored.\n"
- title: 5.2.2.  Choice of TXT Record
  contents:
  - "5.2.2.  Choice of TXT Record\n   It has been suggested to use the KEY, OPT, CERT,\
    \ or KX records\n   instead of a TXT record.  None is satisfactory.\n   The KEY\
    \ RR has a protocol field that could be used to indicate a new\n   protocol, and\
    \ an algorithm field that could be used to indicate\n   different contents in\
    \ the key data.  However, the KEY record is\n   clearly not intended for storing\
    \ what are really authorizations, it\n   is just for identities.  Other uses have\
    \ been discouraged.\n   OPT resource records, as defined in [RFC2671], are not\
    \ intended to be\n   used for storage of information.  They are not to be loaded,\
    \ cached\n   or forwarded.  They are, therefore, inappropriate for use here.\n\
    \   CERT records [RFC2538] can encode almost any set of information.  A\n   custom\
    \ type code could be used permitting any suitable encoding to be\n   stored, not\
    \ just X.509.  According to the RFC, the certificate RRs\n   are to be signed\
    \ internally, which may add undesirable and\n   unnecessary bulk.  Larger DNS\
    \ records may require TCP instead of UDP\n   transfers.\n   At the time of protocol\
    \ design, the CERT RR was not widely deployed\n   and could not be counted upon.\
    \  Use of CERT records will be\n   investigated, and may be proposed in a future\
    \ revision of this\n   document.\n   KX records are ideally suited for use instead\
    \ of TXT records, but had\n   not been deployed at the time of implementation.\n"
- title: 5.3.  Use of FQDN IDs
  contents:
  - "5.3.  Use of FQDN IDs\n   Unfortunately, not every administrator has control\
    \ over the contents\n   of the reverse-map.  Where the initiator (SG-A) has no\
    \ suitable\n   reverse-map, the authorization record present in the reverse-map\
    \ of\n   Alice may refer to a FQDN instead of an IP address.\n   In this case,\
    \ the client's TXT record gives the fully qualified\n   domain name (FQDN) in\
    \ place of its security gateway's IP address.\n   The initiator should use the\
    \ ID_FQDN ID-payload in phase 1.  A\n   forward lookup for a KEY record on the\
    \ FQDN must yield the\n   initiator's public key.\n   This method can also be\
    \ used when the external address of SG-A is\n   dynamic.\n   If SG-A is acting\
    \ on behalf of Alice, then Alice must still delegate\n   authority for SG-A to\
    \ do so in her reverse-map.  When Alice and SG-A\n   are one and the same (i.e.,\
    \ Alice is acting as an end-node) then\n   there is no need for this when initiating\
    \ only.\n   However, Alice must still delegate to herself if she wishes others\
    \ to\n   initiate OE to her.  See Figure 3.\n"
- title: 5.4.  Key Roll-Over
  contents:
  - "5.4.  Key Roll-Over\n   Good cryptographic hygiene says that one should replace\n\
    \   public/private key pairs periodically.  Some administrators may wish\n   to\
    \ do this as often as daily.  Typical DNS propagation delays are\n   determined\
    \ by the SOA Resource Record MINIMUM parameter, which\n   controls how long DNS\
    \ replies may be cached.  For reasonable\n   operation of DNS servers, administrators\
    \ usually want this value to\n   be at least several hours, sometimes as a long\
    \ as a day.  This\n   presents a problem: a new key MUST not be used prior to\
    \ its\n   propagation through DNS.\n   This problem is dealt with by having the\
    \ Security Gateway generate a\n   new public/private key pair, at least MINIMUM\
    \ seconds in advance of\n   using it.  It then adds this key to the DNS (both\
    \ as a second KEY\n   record and in additional TXT delegation records) at key\
    \ generation\n   time.  Note: only one key is allowed in each TXT record.\n  \
    \ When authenticating, all gateways MUST have available all public keys\n   that\
    \ are found in DNS for this entity.  This permits the\n   authenticating end to\
    \ check both the key for \"today\" and the key for\n   \"tomorrow\".  Note that\
    \ it is the end which is creating the signature\n   (possesses the private key)\
    \ that determines which key is to be used.\n"
- title: 6.  Network Address Translation Interaction
  contents:
  - "6.  Network Address Translation Interaction\n   There are no fundamentally new\
    \ issues for implementing opportunistic\n   encryption in the presence of network\
    \ address translation.  Rather,\n   there are only the regular IPsec issues with\
    \ NAT traversal.\n   There are several situations to consider for NAT.\n"
- title: 6.1.  Co-Located NAT/NAPT
  contents:
  - "6.1.  Co-Located NAT/NAPT\n   If a security gateway is also performing network\
    \ address translation\n   on behalf of an end-system, then the packet should be\
    \ translated\n   prior to being subjected to opportunistic encryption.  This is\
    \ in\n   contrast to typically configured tunnels, which often exist to bridge\n\
    \   islands of private network address space.  The security gateway will\n   use\
    \ the translated source address for phase 2, and so the responding\n   security\
    \ gateway will look up that address to confirm SG-A's\n   authorization.\n   In\
    \ the case of NAT (1:1), the address space into which the\n   translation is done\
    \ MUST be globally unique, and control over the\n   reverse-map is assumed.  Placing\
    \ of TXT records is possible.\n   In the case of NAPT (m:1), the address will\
    \ be the security gateway\n   itself.  The ability to get KEY and TXT records\
    \ in place will again\n   depend upon whether or not there is administrative control\
    \ over the\n   reverse-map.  This is identical to situations involving a single\
    \ host\n   acting on behalf of itself.  For initiators (but not responders), an\n\
    \   FQDN-style ID can be used to get around a lack of a reverse-map.\n"
- title: 6.2.  Security Gateway behind a NAT/NAPT
  contents:
  - "6.2.  Security Gateway behind a NAT/NAPT\n   If there is a NAT or NAPT between\
    \ the security gateways, then normal\n   IPsec NAT traversal problems occur. \
    \ In addition to the transport\n   problem, which may be solved by other mechanisms,\
    \ there is the issue\n   of what phase 1 and phase 2 IDs to use.  While FQDN could\
    \ be used\n   during phase 1 for the security gateway, there is no appropriate\
    \ ID\n   for phase 2.  Due to the NAT, the end systems live in different IP\n\
    \   address spaces.\n"
- title: 6.3.  End System behind a NAT/NAPT
  contents:
  - "6.3.  End System behind a NAT/NAPT\n   If the end system is behind a NAT (perhaps\
    \ SG-B), then there is, in\n   fact, no way for another end system to address\
    \ a packet to this end\n   system.  Not only is opportunistic encryption impossible,\
    \ but it is\n   also impossible for any communication to be initiated to the end\n\
    \   system.  It may be possible for this end system to initiate such\n   communication.\
    \  This creates an asymmetry, but this is common for\n   NAPT.\n"
- title: 7.  Host Implementations
  contents:
  - "7.  Host Implementations\n   When Alice and SG-A are components of the same system,\
    \ they are\n   considered to be a host implementation.  The packet sequence scenario\n\
    \   remains unchanged.\n   Components marked Alice are the upper layers (TCP,\
    \ UDP, the\n   application), and SG-A is the IP layer.\n   Note that tunnel mode\
    \ is still required.\n   As Alice and SG-A are acting on behalf of themselves,\
    \ no TXT based\n   delegation record is necessary for Alice to initiate.  She\
    \ can rely\n   on FQDN in a forward map.  This is particularly attractive to mobile\n\
    \   nodes such as notebook computers at conferences.  To respond,\n   Alice/SG-A\
    \ will still need an entry in Alice's reverse-map.\n"
- title: 8.  Multi-Homing
  contents:
  - "8.  Multi-Homing\n   If there are multiple paths between Alice and Bob (as illustrated\
    \ in\n   the diagram with SG-D), then additional DNS records are required to\n\
    \   establish authorization.\n   In Figure 1, Alice has two ways to exit her network:\
    \ SG-A and SG-D.\n   Previously, SG-D has been ignored.  Postulate that there\
    \ are routers\n   between Alice and her set of security gateways (denoted by the\
    \ +\n   signs and the marking of an autonomous system number for Alice's\n   network).\
    \  Datagrams may, therefore, travel to either SG-A or SG-D en\n   route to Bob.\n\
    \   As long as all network connections are in good order, it does not\n   matter\
    \ how datagrams exit Alice's network.  When they reach either\n   security gateway,\
    \ the security gateway will find the TXT delegation\n   record in Bob's reverse-map,\
    \ and establish an SA with SG-B.\n   SG-B has no problem establishing that either\
    \ of SG-A or SG-D may\n   speak for Alice, because Alice has published two equally\
    \ weighted TXT\n   delegation records:\n      X-IPsec-Server(10)=192.1.1.5 AQMM...3s1Q==\n\
    \      X-IPsec-Server(10)=192.1.1.6 AAJN...j8r9==\n          Figure 4: Multiple\
    \ gateway delegation example for Alice\n   Alice's routers can now do any kind\
    \ of load sharing needed.  Both\n   SG-A and SG-D send datagrams addressed to\
    \ Bob through their tunnel to\n   SG-B.\n   Alice's use of non-equal weight delegation\
    \ records to show preference\n   of one gateway over another, has relevance only\
    \ when SG-B is\n   initiating to Alice.\n   If the precedences are the same, then\
    \ SG-B has a more difficult time.\n   It must decide which of the two tunnels\
    \ to use.  SG-B has no\n   information about which link is less loaded, nor which\
    \ security\n   gateway has more cryptographic resources available.  SG-B, in fact,\n\
    \   has no knowledge of whether both gateways are even reachable.\n   The Public\
    \ Internet's default-free zone may well know a good route to\n   Alice, but the\
    \ datagrams that SG-B creates must be addressed to\n   either SG-A or SG-D; they\
    \ can not be addressed to Alice directly.\n   SG-B may make a number of choices:\n\
    \   1.  It can ignore the problem and round robin among the tunnels.\n       This\
    \ causes losses during times when one or the other security\n       gateway is\
    \ unreachable.  If this worries Alice, she can change\n       the weights in her\
    \ TXT delegation records.\n   2.  It can send to the gateway from which it most\
    \ recently received\n       datagrams.  This assumes that routing and reachability\
    \ are\n       symmetrical.\n   3.  It can listen to BGP information from the Internet\
    \ to decide\n       which system is currently up.  This is clearly much more\n\
    \       complicated, but if SG-B is already participating in the BGP\n       peering\
    \ system to announce Bob, the results data may already be\n       available to\
    \ it.\n   4.  It can refuse to negotiate the second tunnel.  (It is unclear\n\
    \       whether or not this is even an option.)\n   5.  It can silently replace\
    \ the outgoing portion of the first tunnel\n       with the second one while still\
    \ retaining the incoming portions\n       of both.  Thus, SG-B can accept datagrams\
    \ from either SG-A or\n       SG-D, but send only to the gateway that most recently\
    \ re-keyed\n       with it.\n   Local policy determines which choice SG-B makes.\
    \  Note that even if\n   SG-B has perfect knowledge about the reachability of\
    \ SG-A and SG-D,\n   Alice may not be reachable from either of these security\
    \ gateways\n   because of internal reachability issues.\n   FreeS/WAN implements\
    \ option 5.  Implementing a different option is\n   being considered.  The multi-homing\
    \ aspects of OE are not well\n   developed and may be the subject of a future\
    \ document.\n"
- title: 9.  Failure Modes
  contents:
  - '9.  Failure Modes

    '
- title: 9.1.  DNS Failures
  contents:
  - "9.1.  DNS Failures\n   If a DNS server fails to respond, local policy decides\
    \ whether or not\n   to permit communication in the clear as embodied in the connection\n\
    \   classes in Section 3.2.  It is easy to mount a denial of service\n   attack\
    \ on the DNS server responsible for a particular network's\n   reverse-map.  Such\
    \ an attack may cause all communication with that\n   network to go in the clear\
    \ if the policy is permissive, or fail\n   completely if the policy is paranoid.\
    \  Please note that this is an\n   active attack.\n   There are still many networks\
    \ that do not have properly configured\n   reverse-maps.  Further, if the policy\
    \ is not to communicate, the\n   above denial of service attack isolates the target\
    \ network.\n   Therefore, the decision of whether or not to permit communication\
    \ in\n   the clear MUST be a matter of local policy.\n"
- title: 9.2.  DNS Configured, IKE Failures
  contents:
  - "9.2.  DNS Configured, IKE Failures\n   DNS records claim that opportunistic encryption\
    \ should occur, but the\n   target gateway either does not respond on port 500,\
    \ or refuses the\n   proposal.  This may be because of a crash or reboot, a faulty\n\
    \   configuration, or a firewall filtering port 500.\n   The receipt of ICMP port,\
    \ host or network unreachable messages\n   indicates a potential problem, but\
    \ MUST NOT cause communication to\n   fail immediately.  ICMP messages are easily\
    \ forged by attackers.  If\n   such a forgery caused immediate failure, then an\
    \ active attacker\n   could easily prevent any encryption from ever occurring,\
    \ possibly\n   preventing all communication.\n   In these situations a log should\
    \ be produced and local policy should\n   dictate if communication is then permitted\
    \ in the clear.\n"
- title: 9.3.  System Reboots
  contents:
  - "9.3.  System Reboots\n   Tunnels sometimes go down because the remote end crashes,\n\
    \   disconnects, or has a network link break.  In general there is no\n   notification\
    \ of this.  Even in the event of a crash and successful\n   reboot, other SGs\
    \ don't hear about it unless the rebooted SG has\n   specific reason to talk to\
    \ them immediately.  Over-quick response to\n   temporary network outages is undesirable.\
    \  Note that a tunnel can be\n   torn down and then re-established without any\
    \ effect visible to the\n   user except a pause in traffic.  On the other hand,\
    \ if one end\n   reboots, the other end can't get datagrams to it at all (except\
    \ via\n   IKE) until the situation is noticed.  So a bias toward quick response\n\
    \   is appropriate, even at the cost of occasional false alarms.\n   A mechanism\
    \ for recovery after reboot is a topic of current research\n   and is not specified\
    \ in this document.\n   A deliberate shutdown should include an attempt, using\
    \ delete\n   messages, to notify all other SGs currently connected by phase 1\
    \ SAs\n   that communication is about to fail.  Again, a remote SG will assume\n\
    \   this is a teardown.  Attempts by the remote SGs to negotiate new\n   tunnels\
    \ as replacements should be ignored.  When possible, SGs should\n   attempt to\
    \ preserve information about currently-connected SGs in\n   non-volatile storage,\
    \ so that after a crash, an Initial-Contact can\n   be sent to previous partners\
    \ to indicate loss of all previously\n   established connections.\n"
- title: 10.  Unresolved Issues
  contents:
  - '10.  Unresolved Issues

    '
- title: 10.1.  Control of Reverse DNS
  contents:
  - "10.1.  Control of Reverse DNS\n   The method of obtaining information by reverse\
    \ DNS lookup causes\n   problems for people who cannot control their reverse DNS\
    \ bindings.\n   This is an unresolved problem in this version, and is out of scope.\n"
- title: 11.  Examples
  contents:
  - '11.  Examples

    '
- title: 11.1.  Clear-Text Usage (Permit Policy)
  contents:
  - "11.1.  Clear-Text Usage (Permit Policy)\n   Two example scenarios follow.  In\
    \ the first example, GW-A (Gateway A)\n   and GW-B (Gateway B) have always-clear-text\
    \ policies, and in the\n   second example they have an OE policy.  The clear-text\
    \ policy serves\n   as a reference for what occurs in TCP/IP in the absence of\n\
    \   Opportunistic Encryption.\n   Alice wants to communicate with Bob.  Perhaps\
    \ she wants to retrieve a\n   web page from Bob's web server.  In the absence\
    \ of opportunistic\n   encryptors, the following events occur:\n     Alice   \
    \      SG-A       DNS       SG-B           Bob\n      Human or application\n \
    \     'clicks' with a name.\n      (1)\n       ------(2)-------------->\n    \
    \   Application looks up\n       name in DNS to get\n       IP address.\n    \
    \   <-----(3)---------------\n       Resolver returns \"A\" RR\n       to application\
    \ with IP\n       address.\n      (4)\n      Application starts a TCP session\n\
    \      or UDP session and OS sends\n      first datagram\n     Alice         SG-A\
    \       DNS       SG-B           Bob\n          ----(5)----->\n          Datagram\
    \ is seen at first gateway\n          from Alice (SG-A).\n                   \
    \   ----------(6)------>\n                      Datagram traverses\n         \
    \             network.\n                                          ------(7)----->\n\
    \                                          Datagram arrives\n                \
    \                          at Bob, is provided\n                             \
    \             to TCP.\n                                         <------(8)------\n\
    \                                          A reply is sent.\n                \
    \      <----------(9)------\n                      Datagram traverses\n      \
    \                network.\n       <----(10)-----\n       Alice receives\n    \
    \   answer.\n     Alice         SG-A       DNS       SG-B           Bob\n    \
    \  (11)----------->\n       A second exchange\n       occurs.\n              \
    \        ----------(12)----->\n                                          -------------->\n\
    \                                         <---------------\n                 \
    \     <-------------------\n       <-------------\n                Figure 5: Timing\
    \ of regular transaction\n"
- title: 11.2.  Opportunistic Encryption
  contents:
  - "11.2.  Opportunistic Encryption\n   In the presence of properly configured opportunistic\
    \ encryptors, the\n   event list is extended.  Only changes are annotated.\n \
    \  The following symbols are used in the time-sequence diagram:\n   -  A single\
    \ dash represents clear-text datagrams.\n   =  An equals sign represents phase\
    \ 2 (IPsec) cipher-text datagrams.\n   ~  A single tilde represents clear-text\
    \ phase 1 datagrams.\n   #  A hash sign represents phase 1 (IKE) cipher-text datagrams.\n\
    \     Alice          SG-A      DNS       SG-B           Bob\n      (1)\n     \
    \  ------(2)-------------->\n       <-----(3)---------------\n      (4)----(5)----->+\n\
    \                     ----(5B)->\n                     <---(5C)--\n          \
    \           ~~~~~~~~~~~~~(5D)~~~>\n                     <~~~~~~~~~~~~(5E)~~~~\n\
    \                     ~~~~~~~~~~~~~(5F)~~~>\n                     <~~~~~~~~~~~~(5G)~~~~\n\
    \                     #############(5H)###>\n                              <----(5I)---\n\
    \                              -----(5J)-->\n                     <############(5K)####\n\
    \                     #############(5L)###>\n                              <----(5M)---\n\
    \                              -----(5N)-->\n                     <############(5O)####\n\
    \                     #############(5P)###>\n                      ============(6)====>\n\
    \                                          ------(7)----->\n                 \
    \                        <------(8)------\n                     <==========(9)======\n\
    \       <-----(10)----\n      (11)----------->\n                      ==========(12)=====>\n\
    \                                          -------------->\n                 \
    \                        <---------------\n                      <===================\n\
    \       <-------------\n         Figure 6: Timing of opportunistic encryption\
    \ transaction\n   For the purposes of this section, we will describe only the\
    \ changes\n   that occur between Figure 5 and Figure 6.  This corresponds to time\n\
    \   points 5, 6, 7, 9, and 10 on the list above.\n   At point (5), SG-A intercepts\
    \ the datagram because this\n   source/destination pair lacks a policy (the nonexistent\
    \ policy\n   state).  SG-A creates a hold policy, and buffers the datagram.  SG-A\n\
    \   requests keys from the keying daemon.\n   (5B) DNS query for TXT record.\n\
    \   (5C) DNS response for TXT record.\n   (5D) Initial IKE message to responder.\n\
    \   (5E) Message 2 of phase 1 exchange.\n        SG-B receives the message.  A\
    \ new connection instance is created\n        in the unauthenticated OE peer state.\n\
    \   (5F) Message 3 of phase 1 exchange.\n        SG-A sends a Diffie-Hellman exponent.\
    \  This is an internal state\n        of the keying daemon.\n   (5G) Message 4\
    \ of phase 1 exchange.\n        SG-B responds with a Diffie-Hellman exponent.\
    \  This is an\n        internal state of the keying protocol.\n   (5H) Message\
    \ 5 of phase 1 exchange.\n        SG-A uses the phase 1 SA to send its identity\
    \ under encryption.\n        The choice of identity is discussed in Section 4.6.1.\
    \  This is\n        an internal state of the keying protocol.\n   (5I) Responder\
    \ lookup of initiator key.  SG-B asks DNS for the public\n        key of the initiator.\
    \  DNS looks for a KEY record by IP address\n        in the reverse-map.  That\
    \ is, a KEY resource record is queried\n        for 4.1.1.192.in-addr.arpa (recall\
    \ that SG-A's external address\n        is 192.1.1.4).  SG-B uses the resulting\
    \ public key to\n        authenticate the initiator.  See Section 5.1 for further\n\
    \        details.\n   (5J) DNS replies with public key of initiator.\n       \
    \ Upon successfully authenticating the peer, the connection\n        instance\
    \ makes a transition to authenticated OE peer on SG-B.\n        The format of\
    \ the TXT record returned is described in\n        Section 5.2.\n        Responder\
    \ replies with ID and authentication.\n        SG-B sends its ID along with authentication\
    \ material, completing\n        the phase 1 negotiation.\n   (5L) IKE phase 2\
    \ negotiation.\n        Having established mutually agreeable authentications\
    \ (via KEY)\n        and authorizations (via TXT), SG-A proposes to create an\
    \ IPsec\n        tunnel for datagrams transiting from Alice to Bob.  This tunnel\n\
    \        is established only for the Alice/Bob combination, not for any\n    \
    \    subnets that may be behind SG-A and SG-B.\n   (5M) Authorization for SG-A\
    \ to speak for Alice.\n        While the identity of SG-A has been established,\
    \ its authority\n        to speak for Alice has not yet been confirmed.  SG-B\
    \ does a\n        reverse lookup on Alice's address for a TXT record.\n   (5N)\
    \ Responder determines initiator's authority.\n        A TXT record is returned.\
    \  It confirms that SG-A is authorized\n        to speak for Alice.\n        Upon\
    \ receiving this specific proposal, SG-B's connection\n        instance makes\
    \ a transition into the potential OE connection\n        state.  SG-B may already\
    \ have an instance, and the check is made\n        as described above.\n   (5O)\
    \ Responder agrees to proposal.\n        SG-B, satisfied that SG-A is authorized,\
    \ proceeds with the\n        phase 2 exchange.\n        The responder MUST setup\
    \ the inbound IPsec SAs before sending\n        its reply.\n   (5P) Final acknowledgement\
    \ from initiator.\n        The initiator agrees with the responder's choice of\
    \ proposal and\n        sets up the tunnel.  The initiator sets up the inbound\
    \ and\n        outbound IPsec SAs.\n        Upon receipt of this message, the\
    \ responder may now setup the\n        outbound IPsec SAs.\n   (6)  IPsec succeeds\
    \ and sets up a tunnel for communication between\n        Alice and Bob.\n   \
    \   SG-A sends the datagram saved at step (5) through the newly\n      created\
    \ tunnel to SG-B, where it gets decrypted and forwarded.\n      Bob receives it\
    \ at (7) and replies at (8).  SG-B already has a\n      tunnel up with G1 and\
    \ uses it.  At (9), SG-B has already\n      established an SPD entry mapping Bob->Alice\
    \ via a tunnel, so this\n      tunnel is simply applied.  The datagram is encrypted\
    \ to SG-A,\n      decrypted by SG-A, and passed to Alice at (10).\n"
- title: 12.  Security Considerations
  contents:
  - '12.  Security Considerations

    '
- title: 12.1.  Configured versus Opportunistic Tunnels
  contents:
  - "12.1.  Configured versus Opportunistic Tunnels\n   Configured tunnels are setup\
    \ using bilateral mechanisms: exchanging\n   public keys (raw RSA, DSA, PKIX),\
    \ pre-shared secrets, or by\n   referencing keys that are in known places (distinguished\
    \ name from\n   LDAP, DNS).  These keys are then used to configure a specific\
    \ tunnel.\n   A pre-configured tunnel may be on all the time, or may be keyed\
    \ only\n   when needed.  The endpoints of the tunnel are not necessarily static;\n\
    \   many mobile applications (road warrior) are considered to be\n   configured\
    \ tunnels.\n   The primary characteristic is that configured tunnels are assigned\n\
    \   specific security properties.  They may be trusted in different ways\n   relating\
    \ to exceptions to firewall rules, exceptions to NAT\n   processing, and to bandwidth\
    \ or other quality of service\n   restrictions.\n   Opportunistic tunnels are\
    \ not inherently trusted in any strong way.\n   They are created without prior\
    \ arrangement.  As the two parties are\n   strangers, there MUST be no confusion\
    \ of datagrams that arrive from\n   opportunistic peers and those that arrive\
    \ from configured tunnels.  A\n   security gateway MUST take care that an opportunistic\
    \ peer cannot\n   impersonate a configured peer.\n   Ingress filtering MUST be\
    \ used to make sure that only datagrams\n   authorized by negotiation (and the\
    \ concomitant authentication and\n   authorization) are accepted from a tunnel.\
    \  This is to prevent one\n   peer from impersonating another.\n   An implementation\
    \ suggestion is to treat opportunistic tunnel\n   datagrams as if they arrive\
    \ on a logical interface distinct from\n   other configured tunnels.  As the number\
    \ of opportunistic tunnels\n   that may be created automatically on a system is\
    \ potentially very\n   high, careful attention to scaling should be taken into\
    \ account.\n   As with any IKE negotiation, opportunistic encryption cannot be\n\
    \   secure without authentication.  Opportunistic encryption relies on\n   DNS\
    \ for its authentication information and, therefore, cannot be\n   fully secure\
    \ without a secure DNS.  Without secure DNS, opportunistic\n   encryption can\
    \ protect against passive eavesdropping but not against\n   active man-in-the-middle\
    \ attacks.\n"
- title: 12.2.  Firewalls versus Opportunistic Tunnels
  contents:
  - "12.2.  Firewalls versus Opportunistic Tunnels\n   Typical usage of per datagram\
    \ access control lists is to implement\n   various kinds of security gateways.\
    \  These are typically called\n   \"firewalls\".\n   Typical usage of a virtual\
    \ private network (VPN) within a firewall is\n   to bypass all or part of the\
    \ access controls between two networks.\n   Additional trust (as outlined in the\
    \ previous section) is given to\n   datagrams that arrive in the VPN.\n   Datagrams\
    \ that arrive via opportunistically configured tunnels MUST\n   not be trusted.\
    \  Any security policy that would apply to a datagram\n   arriving in the clear\
    \ SHOULD also be applied to datagrams arriving\n   opportunistically.\n"
- title: 12.3.  Denial of Service
  contents:
  - "12.3.  Denial of Service\n   There are several different forms of denial of service\
    \ that an\n   implementor should be concerned with.  Most of these problems are\n\
    \   shared with security gateways that have large numbers of mobile peers\n  \
    \ (road warriors).\n   The design of ISAKMP/IKE, and its use of cookies, defend\
    \ against many\n   kinds of denial of service.  Opportunism changes the assumption\
    \ that\n   if the phase 1 (ISAKMP) SA is authenticated, that it was worthwhile\n\
    \   creating.  Because the gateway will communicate with any machine, it\n   is\
    \ possible to form phase 1 SAs with any machine on the Internet.\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   Substantive portions of this document are based upon\
    \ previous work by\n   Henry Spencer.  [OEspec]\n   Thanks to Tero Kivinen, Sandy\
    \ Harris, Wes Hardarker, Robert\n   Moskowitz, Jakob Schlyter, Bill Sommerfeld,\
    \ John Gilmore, and John\n   Denker for their comments and constructive criticism.\n\
    \   Sandra Hoffman and Bill Dickie did the detailed proof reading and\n   editing.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names -\
    \ implementation and\n              specification\", STD 13, RFC 1035, November\
    \ 1987.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2401]\
    \  Kent, S. and R. Atkinson, \"Security Architecture for the\n              Internet\
    \ Protocol\", RFC 2401, November 1998.\n   [RFC2407]  Piper, D., \"The Internet\
    \ IP Security Domain of\n              Interpretation for ISAKMP\", RFC 2407,\
    \ November 1998.\n   [RFC2408]  Maughan, D., Schneider, M., and M. Schertler,\
    \ \"Internet\n              Security Association and key Management Protocol\n\
    \              (ISAKMP)\", RFC 2408, November 1998.\n   [RFC2409]  Harkins, D.\
    \ and D. Carrel, \"The Internet key Exchange\n              (IKE)\", RFC 2409,\
    \ November 1998.\n   [RFC2535]  Eastlake, D., \"Domain Name System Security Extensions\"\
    ,\n              RFC 2535, March 1999.\n   [RFC3110]  Eastlake, D., \"RSA/SHA-1\
    \ SIGs and RSA KEYs in the Domain\n              Name System (DNS)\", RFC 3110,\
    \ May 2001.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [IPSECKEY] Richardson, M., \"A Method for Storing\
    \ IPsec keying\n              Material in DNS\", RFC 4025, March 2005.\n   [OEspec]\
    \   H. Spencer and Redelmeier, D., \"Opportunistic Encryption\",\n           \
    \   paper, http://www.freeswan.org/\n              oeid/opportunism-spec.txt,\
    \ May 2001.\n   [RFC0791]  Postel, J., \"Internet Protocol\", STD 5, RFC 791,\
    \ September\n              1981.\n   [RFC1034]  Mockapetris, P., \"Domain names\
    \ - concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n\
    \   [RFC1464]  Rosenbaum, R., \"Using the Domain Name System To Store\n      \
    \        Arbitrary String Attributes\", RFC 1464, May 1993.\n   [RFC1812]  Baker,\
    \ F., \"Requirements for IP Version 4 Routers\", RFC\n              1812, June\
    \ 1995.\n   [RFC1984]  IAB, IESG, Carpenter, B., and F. Baker, \"IAB and IESG\n\
    \              Statement on Cryptographic Technology and the Internet\",\n   \
    \           RFC 1984, August 1996.\n   [RFC2367]  McDonald, D., Metz, C. and B.\
    \ Phan, \"PF_KEY Key Management\n              API, Version 2\", RFC 2367, July\
    \ 1998.\n   [RFC2538]  Eastlake, D. and O. Gudmundsson, \"Storing Certificates\
    \ in\n              the Domain Name System (DNS)\", RFC 2538, March 1999.\n  \
    \ [RFC2663]  Srisuresh, P. and M. Holdrege, \"IP Network Address\n           \
    \   Translator (NAT) Terminology and Considerations\", RFC\n              2663,\
    \ August 1999.\n   [RFC2671]  Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\"\
    , RFC\n              2671, August 1999.\n   [RFC3330]  IANA, \"Special-Use IPv4\
    \ Addresses\", RFC 3330, September\n              2002.\n   [RFC3445]  Massey,\
    \ D. and S. Rose, \"Limiting the Scope of the KEY\n              Resource Record\
    \ (RR)\", RFC 3445, December 2002.\n   [RFC3526]  Kivinen, T. and M. Kojo, \"\
    More Modular Exponential (MODP)\n              Diffie-Hellman groups for Internet\
    \ Key Exchange (IKE)\",\n              RFC 3526, May 2003.\n   [RFC4033]  Arends,\
    \ R., Austein, R., Larson, M., Massey, D., and S.\n              Rose, \"DNS Security\
    \ Introduction and Requirements\", RFC\n              4033, March 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael C. Richardson\n   Sandelman Software Works\n \
    \  470 Dawson Avenue\n   Ottawa, ON  K1Z 5V7\n   CA\n   EMail: mcr@sandelman.ottawa.on.ca\n\
    \   URI:   http://www.sandelman.ottawa.on.ca/\n   D. Hugh Redelmeier\n   Mimosa\
    \ Systems Inc.\n   29 Donino Avenue\n   Toronto, ON  M4N 2W6\n   CA\n   EMail:\
    \ hugh@mimosa.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
