- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          E. Kline
  contents:
  - "Independent Submission                                          E. Kline\n  \
    \          A Format for Self-Published IP Geolocation Feeds\n"
- title: Abstract
  contents:
  - "Abstract\n   This document records a format whereby a network operator can publish\n\
    \   a mapping of IP address prefixes to simplified geolocation\n   information,\
    \ colloquially termed a \"geolocation feed\".  Interested\n   parties can poll\
    \ and parse these feeds to update or merge with other\n   geolocation data sources\
    \ and procedures.  This format intentionally\n   only allows specifying coarse-level\
    \ location.\n   Some technical organizations operating networks that move from\
    \ one\n   conference location to the next have already experimentally published\n\
    \   small geolocation feeds.\n   This document describes a currently deployed\
    \ format.  At least one\n   consumer (Google) has incorporated these feeds into\
    \ a geolocation\n   data pipeline, and a significant number of ISPs are using\
    \ it to\n   inform them where their prefixes should be geolocated.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8805.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Motivation\n     1.2.  Requirements\
    \ Notation\n     1.3.  Assumptions about Publication\n   2.  Self-Published IP\
    \ Geolocation Feeds\n     2.1.  Specification\n       2.1.1.  Geolocation Feed\
    \ Individual Entry Fields\n         2.1.1.1.  IP Prefix\n         2.1.1.2.  Alpha2code\
    \ (Previously: 'country')\n         2.1.1.3.  Region\n         2.1.1.4.  City\n\
    \         2.1.1.5.  Postal Code\n       2.1.2.  Prefixes with No Geolocation Information\n\
    \       2.1.3.  Additional Parsing Requirements\n     2.2.  Examples\n   3.  Consuming\
    \ Self-Published IP Geolocation Feeds\n     3.1.  Feed Integrity\n     3.2.  Verification\
    \ of Authority\n     3.3.  Verification of Accuracy\n     3.4.  Refreshing Feed\
    \ Information\n   4.  Privacy Considerations\n   5.  Relation to Other Work\n\
    \   6.  Security Considerations\n   7.  Planned Future Work\n   8.  Finding Self-Published\
    \ IP Geolocation Feeds\n     8.1.  Ad Hoc 'Well-Known' URIs\n     8.2.  Other\
    \ Mechanisms\n   9.  IANA Considerations\n   10. References\n     10.1.  Normative\
    \ References\n     10.2.  Informative References\n   Appendix A.  Sample Python\
    \ Validation Code\n   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   Providers of services over the Internet have grown to depend\
    \ on best-\n   effort geolocation information to improve the user experience.\n\
    \   Locality information can aid in directing traffic to the nearest\n   serving\
    \ location, inferring likely native language, and providing\n   additional context\
    \ for services involving search queries.\n   When an ISP, for example, changes\
    \ the location where an IP prefix is\n   deployed, services that make use of geolocation\
    \ information may begin\n   to suffer degraded performance.  This can lead to\
    \ customer\n   complaints, possibly to the ISP directly.  Dissemination of correct\n\
    \   geolocation data is complicated by the lack of any centralized means\n   to\
    \ coordinate and communicate geolocation information to all\n   interested consumers\
    \ of the data.\n   This document records a format whereby a network operator (an\
    \ ISP, an\n   enterprise, or any organization that deems the geolocation of its\
    \ IP\n   prefixes to be of concern) can publish a mapping of IP address\n   prefixes\
    \ to simplified geolocation information, colloquially termed a\n   \"geolocation\
    \ feed\".  Interested parties can poll and parse these\n   feeds to update or\
    \ merge with other geolocation data sources and\n   procedures.\n   This document\
    \ describes a currently deployed format.  At least one\n   consumer (Google) has\
    \ incorporated these feeds into a geolocation\n   data pipeline, and a significant\
    \ number of ISPs are using it to\n   inform them where their prefixes should be\
    \ geolocated.\n"
- title: 1.2.  Requirements Notation
  contents:
  - "1.2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   As this is an informational document\
    \ about a data format and set of\n   operational practices presently in use, requirements\
    \ notation\n   captures the design goals of the authors and implementors.\n"
- title: 1.3.  Assumptions about Publication
  contents:
  - "1.3.  Assumptions about Publication\n   This document describes both a format\
    \ and a mechanism for publishing\n   data, with the assumption that the network\
    \ operator to whom\n   operational responsibility has been delegated for any published\
    \ data\n   wishes it to be public.  Any privacy risk is bounded by the format,\n\
    \   and feed publishers MAY omit prefixes or any location field\n   associated\
    \ with a given prefix to further protect privacy (see\n   Section 2.1 for details\
    \ about which fields exactly may be omitted).\n   Feed publishers assume the responsibility\
    \ of determining which data\n   should be made public.\n   This document does\
    \ not incorporate a mechanism to communicate\n   acceptable use policies for self-published\
    \ data.  Publication itself\n   is inferred as a desire by the publisher for the\
    \ data to be usefully\n   consumed, similar to the publication of information\
    \ like host names,\n   cryptographic keys, and Sender Policy Framework (SPF) records\n\
    \   [RFC7208] in the DNS.\n"
- title: 2.  Self-Published IP Geolocation Feeds
  contents:
  - "2.  Self-Published IP Geolocation Feeds\n   The format described here was developed\
    \ to address the need of\n   network operators to rapidly and usefully share geolocation\n\
    \   information changes.  Originally, there arose a specific case where\n   regional\
    \ operators found it desirable to publish location changes\n   rather than wait\
    \ for geolocation algorithms to \"learn\" about them.\n   Later, technical conferences\
    \ that frequently use the same network\n   prefixes advertised from different\
    \ conference locations experimented\n   by publishing geolocation feeds updated\
    \ in advance of network\n   location changes in order to better serve conference\
    \ attendees.\n   At its simplest, the mechanism consists of a network operator\n\
    \   publishing a file (the \"geolocation feed\") that contains several text\n\
    \   entries, one per line.  Each entry is keyed by a unique (within the\n   feed)\
    \ IP prefix (or single IP address) followed by a sequence of\n   network locality\
    \ attributes to be ascribed to the given prefix.\n"
- title: 2.1.  Specification
  contents:
  - "2.1.  Specification\n   For operational simplicity, every feed should contain\
    \ data about all\n   IP addresses the provider wants to publish.  Alternatives,\
    \ like\n   publishing only entries for IP addresses whose geolocation data has\n\
    \   changed or differ from current observed geolocation behavior \"at\n   large\"\
    , are likely to be too operationally complex.\n   Feeds MUST use UTF-8 [RFC3629]\
    \ character encoding.  Lines are\n   delimited by a line break (CRLF) (as specified\
    \ in [RFC4180]), and\n   blank lines are ignored.  Text from a '#' character to\
    \ the end of the\n   current line is treated as a comment only and is similarly\
    \ ignored\n   (note that this does not strictly follow [RFC4180], which has no\n\
    \   support for comments).\n   Feed lines that are not comments MUST be formatted\
    \ as comma-separated\n   values (CSV), as described in [RFC4180].  Each feed entry\
    \ is a text\n   line of the form:\n   ip_prefix,alpha2code,region,city,postal_code\n\
    \   The IP prefix field is REQUIRED, all others are OPTIONAL (can be\n   empty),\
    \ though the requisite minimum number of commas SHOULD be\n   present.\n"
- title: 2.1.1.  Geolocation Feed Individual Entry Fields
  contents:
  - '2.1.1.  Geolocation Feed Individual Entry Fields

    '
- title: 2.1.1.1.  IP Prefix
  contents:
  - "2.1.1.1.  IP Prefix\n   REQUIRED: Each IP prefix field MUST be either a single\
    \ IP address or\n   an IP prefix in Classless Inter-Domain Routing (CIDR) notation\
    \ in\n   conformance with Section 3.1 of [RFC4632] for IPv4 or Section 2.3 of\n\
    \   [RFC4291] for IPv6.\n   Examples include \"192.0.2.1\" and \"192.0.2.0/24\"\
    \ for IPv4 and\n   \"2001:db8::1\" and \"2001:db8::/32\" for IPv6.\n"
- title: '2.1.1.2.  Alpha2code (Previously: ''country'')'
  contents:
  - "2.1.1.2.  Alpha2code (Previously: 'country')\n   OPTIONAL: The alpha2code field,\
    \ if non-empty, MUST be a 2-letter ISO\n   country code conforming to ISO 3166-1\
    \ alpha 2 [ISO.3166.1alpha2].\n   Parsers SHOULD treat this field case-insensitively.\n\
    \   Earlier versions of this document called this field \"country\", and it\n\
    \   may still be referred to as such in existing tools/interfaces.\n   Parsers\
    \ MAY additionally support other 2-letter codes outside the ISO\n   3166-1 alpha\
    \ 2 codes, such as the 2-letter codes from the\n   \"Exceptionally reserved codes\"\
    \ [ISO-GLOSSARY] set.\n   Examples include \"US\" for the United States, \"JP\"\
    \ for Japan, and \"PL\"\n   for Poland.\n"
- title: 2.1.1.3.  Region
  contents:
  - "2.1.1.3.  Region\n   OPTIONAL: The region field, if non-empty, MUST be an ISO\
    \ region code\n   conforming to ISO 3166-2 [ISO.3166.2].  Parsers SHOULD treat\
    \ this\n   field case-insensitively.\n   Examples include \"ID-RI\" for the Riau\
    \ province of Indonesia and \"NG-\n   RI\" for the Rivers province in Nigeria.\n"
- title: 2.1.1.4.  City
  contents:
  - "2.1.1.4.  City\n   OPTIONAL: The city field, if non-empty, SHOULD be free UTF-8\
    \ text,\n   excluding the comma (',') character.\n   Examples include \"Dublin\"\
    , \"New York\", and \"Sao Paulo\" (specifically\n   \"S\" followed by 0xc3, 0xa3,\
    \ and \"o Paulo\").\n"
- title: 2.1.1.5.  Postal Code
  contents:
  - "2.1.1.5.  Postal Code\n   OPTIONAL, DEPRECATED: The postal code field, if non-empty,\
    \ SHOULD be\n   free UTF-8 text, excluding the comma (',') character.  The use\
    \ of\n   this field is deprecated; consumers of feeds should be able to parse\n\
    \   feeds containing these fields, but new feeds SHOULD NOT include this\n   field\
    \ due to the granularity of this information.  See Section 4 for\n   additional\
    \ discussion.\n   Examples include \"106-6126\" (in Minato ward, Tokyo, Japan).\n"
- title: 2.1.2.  Prefixes with No Geolocation Information
  contents:
  - "2.1.2.  Prefixes with No Geolocation Information\n   Feed publishers may indicate\
    \ that some IP prefixes should not have\n   any associated geolocation information.\
    \  It may be that some prefixes\n   under their administrative control are reserved,\
    \ not yet allocated or\n   deployed, or in the process of being redeployed elsewhere\
    \ and\n   existing geolocation information can, from the perspective of the\n\
    \   publisher, safely be discarded.\n   This special case can be indicated by\
    \ explicitly leaving blank all\n   fields that specify any degree of geolocation\
    \ information.  For\n   example:\n   192.0.2.0/24,,,,\n   2001:db8:1::/48,,,,\n\
    \   2001:db8:2::/48,,,,\n   Historically, the user-assigned alpha2code identifier\
    \ of \"ZZ\" has\n   been used for this same purpose.  This is not necessarily\
    \ preferred,\n   and no specific interpretation of any of the other user-assigned\n\
    \   alpha2code codes is currently defined.\n"
- title: 2.1.3.  Additional Parsing Requirements
  contents:
  - "2.1.3.  Additional Parsing Requirements\n   Feed entries that do not have an\
    \ IP address or prefix field or have\n   an IP address or prefix field that fails\
    \ to parse correctly MUST be\n   discarded.\n   While publishers SHOULD follow\
    \ [RFC5952] for IPv6 prefix fields,\n   consumers MUST nevertheless accept all\
    \ valid string representations.\n   Duplicate IP address or prefix entries MUST\
    \ be considered an error,\n   and consumer implementations SHOULD log the repeated\
    \ entries for\n   further administrative review.  Publishers SHOULD take measures\
    \ to\n   ensure there is one and only one entry per IP address and prefix.\n \
    \  Multiple entries that constitute nested prefixes are permitted.\n   Consumers\
    \ SHOULD consider the entry with the longest matching prefix\n   (i.e., the \"\
    most specific\") to be the best matching entry for a given\n   IP address.\n \
    \  Feed entries with non-empty optional fields that fail to parse,\n   either\
    \ in part or in full, SHOULD be discarded.  It is RECOMMENDED\n   that they also\
    \ be logged for further administrative review.\n   For compatibility with future\
    \ additional fields, a parser MUST ignore\n   any fields beyond those it expects.\
    \  The data from fields that are\n   expected and that parse successfully MUST\
    \ still be considered valid.\n   Per Section 7, no extensions to this format are\
    \ in use nor are any\n   anticipated.\n"
- title: 2.2.  Examples
  contents:
  - "2.2.  Examples\n   Example entries using different IP address formats and describing\n\
    \   locations at alpha2code (\"country code\"), region, and city\n   granularity\
    \ level, respectively:\n   192.0.2.0/25,US,US-AL,,\n   192.0.2.5,US,US-AL,Alabaster,\n\
    \   192.0.2.128/25,PL,PL-MZ,,\n   2001:db8::/32,PL,,,\n   2001:db8:cafe::/48,PL,PL-MZ,,\n\
    \   The IETF network publishes geolocation information for the meeting\n   prefixes,\
    \ and generally just comment out the last meeting information\n   and append the\
    \ new meeting information.  The [GEO_IETF], at the time\n   of this writing, contains:\n\
    \   # IETF106 (Singapore) - November 2019 - Singapore, SG\n   130.129.0.0/16,SG,SG-01,Singapore,\n\
    \   2001:df8::/32,SG,SG-01,Singapore,\n   31.133.128.0/18,SG,SG-01,Singapore,\n\
    \   31.130.224.0/20,SG,SG-01,Singapore,\n   2001:67c:1230::/46,SG,SG-01,Singapore,\n\
    \   2001:67c:370::/48,SG,SG-01,Singapore,\n   Experimentally, RIPE has published\
    \ geolocation information for their\n   conference network prefixes, which change\
    \ location in accordance with\n   each new event.  [GEO_RIPE_NCC], at the time\
    \ of writing, contains:\n   193.0.24.0/21,NL,NL-ZH,Rotterdam,\n   2001:67c:64::/48,NL,NL-ZH,Rotterdam,\n\
    \   Similarly, ICANN has published geolocation information for their\n   portable\
    \ conference network prefixes.  [GEO_ICANN], at the time of\n   writing, contains:\n\
    \   199.91.192.0/21,MA,MA-07,Marrakech\n   2620:f:8000::/48,MA,MA-07,Marrakech\n\
    \   A longer example is the [GEO_Google] Google Corp Geofeed, which lists\n  \
    \ the geolocation information for Google corporate offices.\n   At the time of\
    \ writing, Google processes approximately 400 feeds\n   comprising more than 750,000\
    \ IPv4 and IPv6 prefixes.\n"
- title: 3.  Consuming Self-Published IP Geolocation Feeds
  contents:
  - "3.  Consuming Self-Published IP Geolocation Feeds\n   Consumers MAY treat published\
    \ feed data as a hint only and MAY choose\n   to prefer other sources of geolocation\
    \ information for any given IP\n   prefix.  Regardless of a consumer's stance\
    \ with respect to a given\n   published feed, there are some points of note for\
    \ sensibly and\n   effectively consuming published feeds.\n"
- title: 3.1.  Feed Integrity
  contents:
  - "3.1.  Feed Integrity\n   The integrity of published information SHOULD be protected\
    \ by\n   securing the means of publication, for example, by using HTTP over\n\
    \   TLS [RFC2818].  Whenever possible, consumers SHOULD prefer retrieving\n  \
    \ geolocation feeds in a manner that guarantees integrity of the feed.\n"
- title: 3.2.  Verification of Authority
  contents:
  - "3.2.  Verification of Authority\n   Consumers of self-published IP geolocation\
    \ feeds SHOULD perform some\n   form of verification that the publisher is in\
    \ fact authoritative for\n   the addresses in the feed.  The actual means of verification\
    \ is\n   likely dependent upon the way in which the feed is discovered.  Ad\n\
    \   hoc shared URIs, for example, will likely require an ad hoc\n   verification\
    \ process.  Future automated means of feed discovery\n   SHOULD have an accompanying\
    \ automated means of verification.\n   A consumer should only trust geolocation\
    \ information for IP addresses\n   or prefixes for which the publisher has been\
    \ verified as\n   administratively authoritative.  All other geolocation feed\
    \ entries\n   should be ignored and logged for further administrative review.\n"
- title: 3.3.  Verification of Accuracy
  contents:
  - "3.3.  Verification of Accuracy\n   Errors and inaccuracies may occur at many\
    \ levels, and publication and\n   consumption of geolocation data are no exceptions.\
    \  To the extent\n   practical, consumers SHOULD take steps to verify the accuracy\
    \ of\n   published locality.  Verification methodology, resolution of\n   discrepancies,\
    \ and preference for alternative sources of data are\n   left to the discretion\
    \ of the feed consumer.\n   Consumers SHOULD decide on discrepancy thresholds\
    \ and SHOULD flag,\n   for administrative review, feed entries that exceed set\
    \ thresholds.\n"
- title: 3.4.  Refreshing Feed Information
  contents:
  - "3.4.  Refreshing Feed Information\n   As a publisher can change geolocation data\
    \ at any time and without\n   notification, consumers SHOULD implement mechanisms\
    \ to periodically\n   refresh local copies of feed data.  In the absence of any\
    \ other\n   refresh timing information, it is recommended that consumers SHOULD\n\
    \   refresh feeds no less often than weekly and no more often than is\n   likely\
    \ to cause issues to the publisher.\n   For feeds available via HTTPS (or HTTP),\
    \ the publisher MAY\n   communicate refresh timing information by means of the\
    \ standard HTTP\n   expiration model ([RFC7234]).  Specifically, publishers can\
    \ include\n   either an Expires header (Section 5.3 of [RFC7234]) or a Cache-\n\
    \   Control header (Section 5.2 of [RFC7234]) specifying the max-age.\n   Where\
    \ practical, consumers SHOULD refresh feed information before the\n   expiry time\
    \ is reached.\n"
- title: 4.  Privacy Considerations
  contents:
  - "4.  Privacy Considerations\n   Publishers of geolocation feeds are advised to\
    \ have fully considered\n   any and all privacy implications of the disclosure\
    \ of such\n   information for the users of the described networks prior to\n \
    \  publication.  A thorough comprehension of the security considerations\n   (Section\
    \ 13 of [RFC6772]) of a chosen geolocation policy is highly\n   recommended, including\
    \ an understanding of some of the limitations of\n   information obscurity (Section\
    \ 13.5 of [RFC6772]) (see also\n   [RFC6772]).\n   As noted in Section 2.1, each\
    \ location field in an entry is optional,\n   in order to support expressing only\
    \ the level of specificity that the\n   publisher has deemed acceptable.  There\
    \ is no requirement that the\n   level of specificity be consistent across all\
    \ entries within a feed.\n   In particular, the Postal Code field (Section 2.1.1.5)\
    \ can provide\n   very specific geolocation, sometimes within a building.  Such\n\
    \   specific Postal Code values MUST NOT be published in geofeeds without\n  \
    \ the express consent of the parties being located.\n   Operators who publish\
    \ geolocation information are strongly encouraged\n   to inform affected users/customers\
    \ of this fact and of the potential\n   privacy-related consequences and trade-offs.\n"
- title: 5.  Relation to Other Work
  contents:
  - "5.  Relation to Other Work\n   While not originally done in conjunction with\
    \ the GEOPRIV Working\n   Group [GEOPRIV], Richard Barnes observed that this work\
    \ is\n   nevertheless consistent with that which the group has defined, both\n\
    \   for address format and for privacy.  The data elements in geolocation\n  \
    \ feeds are equivalent to the following XML structure ([RFC5139]\n   [W3C.REC-xml-20081126]):\n\
    \   <civicAddress>\n     <country>country</country>\n     <A1>region</A1>\n  \
    \   <A2>city</A2>\n     <PC>postal_code</PC>\n   </civicAddress>\n   Providing\
    \ geolocation information to this granularity is equivalent\n   to the following\
    \ privacy policy (the definition of the 'building'\n   Section 6.5.1 of [RFC6772]\
    \ level of disclosure):\n   <ruleset>\n     <rule>\n       <conditions/>\n   \
    \    <actions/>\n       <transformations>\n         <provide-location profile=\"\
    civic-transformation\">\n           <provide-civic>building</provide-civic>\n\
    \         </provide-location>\n       </transformations>\n     </rule>\n   </ruleset>\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   As there is no true security in the obscurity\
    \ of the location of any\n   given IP address, self-publication of this data fundamentally\
    \ opens\n   no new attack vectors.  For publishers, self-published data may\n\
    \   increase the ease with which such location data might be exploited\n   (it\
    \ can, for example, make easy the discovery of prefixes populated\n   with customers\
    \ as distinct from prefixes not generally in use).\n   For consumers, feed retrieval\
    \ processes may receive input from\n   potentially hostile sources (e.g., in the\
    \ event of hijacked traffic).\n   As such, proper input validation and defense\
    \ measures MUST be taken\n   (see the discussion in Section 3.1).\n   Similarly,\
    \ consumers who do not perform sufficient verification of\n   published data bear\
    \ the same risks as from other forms of geolocation\n   configuration errors (see\
    \ the discussion in Sections 3.2 and 3.3).\n   Validation of a feed's contents\
    \ includes verifying that the publisher\n   is authoritative for the IP prefixes\
    \ included in the feed.  Failure\n   to verify IP prefix authority would, for\
    \ example, allow ISP Bob to\n   make geolocation statements about IP space held\
    \ by ISP Alice.  At\n   this time, only out-of-band verification methods are implemented\n\
    \   (i.e., an ISP's feed may be verified against publicly available IP\n   allocation\
    \ data).\n"
- title: 7.  Planned Future Work
  contents:
  - "7.  Planned Future Work\n   In order to more flexibly support future extensions,\
    \ use of a more\n   expressive feed format has been suggested.  Use of JavaScript\
    \ Object\n   Notation (JSON) [RFC8259], specifically, has been discussed.\n  \
    \ However, at the time of writing, no such specification nor\n   implementation\
    \ exists.  Nevertheless, work on extensions is deferred\n   until a more suitable\
    \ format has been selected.\n   The authors are planning on writing a document\
    \ describing such a new\n   format.  This document describes a currently deployed\
    \ and used\n   format.  Given the extremely limited extensibility of the present\n\
    \   format no extensions to it are anticipated.  Extensibility\n   requirements\
    \ are instead expected to be integral to the development\n   of a new format.\n"
- title: 8.  Finding Self-Published IP Geolocation Feeds
  contents:
  - "8.  Finding Self-Published IP Geolocation Feeds\n   The issue of finding, and\
    \ later verifying, geolocation feeds is not\n   formally specified in this document.\
    \  At this time, only ad hoc feed\n   discovery and verification has a modicum\
    \ of established practice (see\n   below); discussion of other mechanisms has\
    \ been removed for clarity.\n"
- title: 8.1.  Ad Hoc 'Well-Known' URIs
  contents:
  - "8.1.  Ad Hoc 'Well-Known' URIs\n   To date, geolocation feeds have been shared\
    \ informally in the form of\n   HTTPS URIs exchanged in email threads.  Three\
    \ example URIs\n   ([GEO_IETF], [GEO_RIPE_NCC], and [GEO_ICANN]) describe networks\
    \ that\n   change locations periodically, the operators and operational\n   practices\
    \ of which are well known within their respective technical\n   communities.\n\
    \   The contents of the feeds are verified by a similarly ad hoc process,\n  \
    \ including:\n   *  personal knowledge of the parties involved in the exchange\
    \ and\n   *  comparison of feed-advertised prefixes with the BGP-advertised\n\
    \      prefixes of Autonomous System Numbers known to be operated by the\n   \
    \   publishers.\n   Ad hoc mechanisms, while useful for early experimentation\
    \ by\n   producers and consumers, are unlikely to be adequate for long-term,\n\
    \   widespread use by multiple parties.  Future versions of any such\n   self-published\
    \ geolocation feed mechanism SHOULD address scalability\n   concerns by defining\
    \ a means for automated discovery and verification\n   of operational authority\
    \ of advertised prefixes.\n"
- title: 8.2.  Other Mechanisms
  contents:
  - "8.2.  Other Mechanisms\n   Previous versions of this document referenced use\
    \ of the WHOIS\n   service [RFC3912] operated by Regional Internet Registries\
    \ (RIRs), as\n   well as possible DNS-based schemes to discover and validate geofeeds.\n\
    \   To the authors' knowledge, support for such mechanisms has never been\n  \
    \ implemented, and this speculative text has been removed to avoid\n   ambiguity.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [ISO.3166.1alpha2]\n              ISO, \"ISO\
    \ 3166-1 decoding table\",\n              <http://www.iso.org/iso/home/standards/country_codes/iso-\n\
    \              3166-1_decoding_table.htm>.\n   [ISO.3166.2]\n              ISO,\
    \ \"ISO 3166-2:2007\",\n              <http://www.iso.org/iso/home/standards/\n\
    \              country_codes.htm#2012_iso3166-2>.\n   [RFC2119]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629]  Yergeau, F.,\
    \ \"UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC\
    \ 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC4180]  Shafranovich, Y., \"Common Format and MIME Type for Comma-\n  \
    \            Separated Values (CSV) Files\", RFC 4180,\n              DOI 10.17487/RFC4180,\
    \ October 2005,\n              <https://www.rfc-editor.org/info/rfc4180>.\n  \
    \ [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n          \
    \    Architecture\", RFC 4291, DOI 10.17487/RFC4291, February\n              2006,\
    \ <https://www.rfc-editor.org/info/rfc4291>.\n   [RFC4632]  Fuller, V. and T.\
    \ Li, \"Classless Inter-domain Routing\n              (CIDR): The Internet Address\
    \ Assignment and Aggregation\n              Plan\", BCP 122, RFC 4632, DOI 10.17487/RFC4632,\
    \ August\n              2006, <https://www.rfc-editor.org/info/rfc4632>.\n   [RFC5952]\
    \  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address\
    \ Text Representation\", RFC 5952,\n              DOI 10.17487/RFC5952, August\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5952>.\n   [RFC7234]\
    \  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,\
    \ \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,\
    \ DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [W3C.REC-xml-20081126]\n\
    \              Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n   \
    \           F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n      \
    \        Edition)\", World Wide Web Consortium Recommendation REC-\n         \
    \     xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [GEOPRIV]  IETF, \"Geographic Location/Privacy\
    \ (geopriv)\",\n              <http://datatracker.ietf.org/wg/geopriv/>.\n   [GEO_Google]\n\
    \              Google, LLC, \"Google Corp Geofeed\",\n              <https://www.gstatic.com/geofeed/corp_external>.\n\
    \   [GEO_ICANN]\n              ICANN, \"ICANN Meeting Geolocation Data\",\n  \
    \            <https://meeting-services.icann.org/geo/google.csv>.\n   [GEO_IETF]\
    \ Kumari, W., \"IETF Meeting Network Geolocation Data\",\n              <https://noc.ietf.org/geo/google.csv>.\n\
    \   [GEO_RIPE_NCC]\n              Schepers, M., \"RIPE NCC Meeting Geolocation\
    \ Data\",\n              <https://meetings.ripe.net/geo/google.csv>.\n   [IPADDR_PY]\n\
    \              Shields, M. and P. Moody, \"Google's Python IP address\n      \
    \        manipulation library\",\n              <http://code.google.com/p/ipaddr-py/>.\n\
    \   [ISO-GLOSSARY]\n              ISO, \"Glossary for ISO 3166\",\n          \
    \    <https://www.iso.org/glossary-for-iso-3166.html>.\n   [RFC2818]  Rescorla,\
    \ E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n\
    \              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC3912]  Daigle,\
    \ L., \"WHOIS Protocol Specification\", RFC 3912,\n              DOI 10.17487/RFC3912,\
    \ September 2004,\n              <https://www.rfc-editor.org/info/rfc3912>.\n\
    \   [RFC5139]  Thomson, M. and J. Winterbottom, \"Revised Civic Location\n   \
    \           Format for Presence Information Data Format Location\n           \
    \   Object (PIDF-LO)\", RFC 5139, DOI 10.17487/RFC5139,\n              February\
    \ 2008, <https://www.rfc-editor.org/info/rfc5139>.\n   [RFC6772]  Schulzrinne,\
    \ H., Ed., Tschofenig, H., Ed., Cuellar, J.,\n              Polk, J., Morris,\
    \ J., and M. Thomson, \"Geolocation Policy:\n              A Document Format for\
    \ Expressing Privacy Preferences for\n              Location Information\", RFC\
    \ 6772, DOI 10.17487/RFC6772,\n              January 2013, <https://www.rfc-editor.org/info/rfc6772>.\n\
    \   [RFC7208]  Kitterman, S., \"Sender Policy Framework (SPF) for\n          \
    \    Authorizing Use of Domains in Email, Version 1\", RFC 7208,\n           \
    \   DOI 10.17487/RFC7208, April 2014,\n              <https://www.rfc-editor.org/info/rfc7208>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n"
- title: Appendix A.  Sample Python Validation Code
  contents:
  - "Appendix A.  Sample Python Validation Code\n   Included here is a simple format\
    \ validator in Python for self-\n   published ipgeo feeds.  This tool reads CSV\
    \ data in the self-\n   published ipgeo feed format from the standard input and\
    \ performs\n   basic validation.  It is intended for use by feed publishers before\n\
    \   launching a feed.  Note that this validator does not verify the\n   uniqueness\
    \ of every IP prefix entry within the feed as a whole but\n   only verifies the\
    \ syntax of each single line from within the feed.  A\n   complete validator MUST\
    \ also ensure IP prefix uniqueness.\n   The main source file \"ipgeo_feed_validator.py\"\
    \ follows.  It requires\n   use of the open source ipaddr Python library for IP\
    \ address and CIDR\n   parsing and validation [IPADDR_PY].\n   <CODE BEGINS>\n\
    \   #!/usr/bin/python\n   #\n   # Copyright (c) 2012 IETF Trust and the persons\
    \ identified as\n   # authors of the code.  All rights reserved.  Redistribution\
    \ and use\n   # in source and binary forms, with or without modification, is\n\
    \   # permitted pursuant to, and subject to the license terms contained\n   #\
    \ in, the Simplified BSD License set forth in Section 4.c of the\n   # IETF Trust's\
    \ Legal Provisions Relating to IETF\n   # Documents (http://trustee.ietf.org/license-info).\n\
    \   \"\"\"Simple format validator for self-published ipgeo feeds.\n   This tool\
    \ reads CSV data in the self-published ipgeo feed format\n   from the standard\
    \ input and performs basic validation.  It is\n   intended for use by feed publishers\
    \ before launching a feed.\n   \"\"\"\n   import csv\n   import ipaddr\n   import\
    \ re\n   import sys\n   class IPGeoFeedValidator(object):\n     def __init__(self):\n\
    \       self.prefixes = {}\n       self.line_number = 0\n       self.output_log\
    \ = {}\n       self.SetOutputStream(sys.stderr)\n     def Validate(self, feed):\n\
    \       \"\"\"Check validity of an IPGeo feed.\n       Args:\n         feed: iterable\
    \ with feed lines\n       \"\"\"\n       for line in feed:\n         self._ValidateLine(line)\n\
    \     def SetOutputStream(self, logfile):\n       \"\"\"Controls where the output\
    \ messages go do (STDERR by default).\n       Use None to disable logging.\n \
    \      Args:\n         logfile: a file object (e.g., sys.stdout) or None.\n  \
    \     \"\"\"\n       self.output_stream = logfile\n     def CountErrors(self,\
    \ severity):\n       \"\"\"How many ERRORs or WARNINGs were generated.\"\"\"\n\
    \       return len(self.output_log.get(severity, []))\n     def _ValidateLine(self,\
    \ line):\n       line = line.rstrip('\\r\\n')\n       self.line_number += 1\n\
    \       self.line = line.split('#')[0]\n       self.is_correct_line = True\n \
    \      if self._ShouldIgnoreLine(line):\n         return\n       fields = [field\
    \ for field in csv.reader([line])][0]\n       self._ValidateFields(fields)\n \
    \      self._FlushOutputStream()\n     def _ShouldIgnoreLine(self, line):\n  \
    \     line = line.strip()\n       if line.startswith('#'):\n         return True\n\
    \       return len(line) == 0\n     def _ValidateFields(self, fields):\n     \
    \  assert(len(fields) > 0)\n       is_correct = self._IsIPAddressOrPrefixCorrect(fields[0])\n\
    \       if len(fields) > 1:\n         if not self._IsAlpha2CodeCorrect(fields[1]):\n\
    \           is_correct = False\n       if len(fields) > 2 and not self._IsRegionCodeCorrect(fields[2]):\n\
    \         is_correct = False\n       if len(fields) != 5:\n         self._ReportWarning('5\
    \ fields were expected (got %d).'\n                             % len(fields))\n\
    \     def _IsIPAddressOrPrefixCorrect(self, field):\n       if '/' in field:\n\
    \         return self._IsCIDRCorrect(field)\n       return self._IsIPAddressCorrect(field)\n\
    \     def _IsCIDRCorrect(self, cidr):\n       try:\n         ipprefix = ipaddr.IPNetwork(cidr)\n\
    \         if ipprefix.network._ip != ipprefix._ip:\n           self._ReportError('Incorrect\
    \ IP Network.')\n           return False\n         if ipprefix.is_private:\n \
    \          self._ReportError('IP Address must not be private.')\n           return\
    \ False\n       except:\n         self._ReportError('Incorrect IP Network.')\n\
    \         return False\n       return True\n     def _IsIPAddressCorrect(self,\
    \ ipaddress):\n       try:\n         ip = ipaddr.IPAddress(ipaddress)\n      \
    \ except:\n         self._ReportError('Incorrect IP Address.')\n         return\
    \ False\n       if ip.is_private:\n         self._ReportError('IP Address must\
    \ not be private.')\n         return False\n       return True\n     def _IsAlpha2CodeCorrect(self,\
    \ alpha2code):\n       if len(alpha2code) == 0:\n         return True\n      \
    \ if len(alpha2code) != 2 or not alpha2code.isalpha():\n         self._ReportError(\n\
    \             'Alpha 2 code must be in the ISO 3166-1 alpha 2 format.')\n    \
    \     return False\n       return True\n     def _IsRegionCodeCorrect(self, region_code):\n\
    \       if len(region_code) == 0:\n         return True\n       if '-' not in\
    \ region_code:\n         self._ReportError('Region code must be in ISO 3166-2\
    \ format.')\n         return False\n       parts = region_code.split('-')\n  \
    \     if not self._IsAlpha2CodeCorrect(parts[0]):\n         return False\n   \
    \    return True\n     def _ReportError(self, message):\n       self._ReportWithSeverity('ERROR',\
    \ message)\n     def _ReportWarning(self, message):\n       self._ReportWithSeverity('WARNING',\
    \ message)\n     def _ReportWithSeverity(self, severity, message):\n       self.is_correct_line\
    \ = False\n       output_line = '%s: %s\\n' % (severity, message)\n       if severity\
    \ not in self.output_log:\n         self.output_log[severity] = []\n       self.output_log[severity].append(output_line)\n\
    \       if self.output_stream is not None:\n         self.output_stream.write(output_line)\n\
    \     def _FlushOutputStream(self):\n       if self.is_correct_line: return\n\
    \       if self.output_stream is None: return\n       self.output_stream.write('line\
    \ %d: %s\\n\\n'\n   def main():\n      feed_validator = IPGeoFeedValidator()\n\
    \      feed_validator.Validate(sys.stdin)\n      if feed_validator.CountErrors('ERROR'):\n\
    \        sys.exit(1)\n   if __name__ == '__main__':\n     main()\n   <CODE ENDS>\n\
    \   A unit test file, \"ipgeo_feed_validator_test.py\" is provided as well.\n\
    \   It provides basic test coverage of the code above, though does not\n   test\
    \ correct handling of non-ASCII UTF-8 strings.\n   <CODE BEGINS>\n   #!/usr/bin/python\n\
    \   #\n   # Copyright (c) 2012 IETF Trust and the persons identified as\n   #\
    \ authors of the code.  All rights reserved.  Redistribution and use\n   # in\
    \ source and binary forms, with or without modification, is\n   # permitted pursuant\
    \ to, and subject to the license terms contained\n   # in, the Simplified BSD\
    \ License set forth in Section 4.c of the\n   # IETF Trust's Legal Provisions\
    \ Relating to IETF\n   # Documents (http://trustee.ietf.org/license-info).\n \
    \  import sys\n   from ipgeo_feed_validator import IPGeoFeedValidator\n   class\
    \ IPGeoFeedValidatorTest(object):\n     def __init__(self):\n       self.validator\
    \ = IPGeoFeedValidator()\n       self.validator.SetOutputStream(None)\n      \
    \ self.successes = 0\n       self.failures = 0\n     def Run(self):\n       self.TestFeedLine('#\
    \ asdf', 0, 0)\n       self.TestFeedLine('   ', 0, 0)\n       self.TestFeedLine('',\
    \ 0, 0)\n       self.TestFeedLine('asdf', 1, 1)\n       self.TestFeedLine('asdf,US,,,',\
    \ 1, 0)\n       self.TestFeedLine('aaaa::,US,,,', 0, 0)\n       self.TestFeedLine('zzzz::,US',\
    \ 1, 1)\n       self.TestFeedLine(',US,,,', 1, 0)\n       self.TestFeedLine('55.66.77',\
    \ 1, 1)\n       self.TestFeedLine('55.66.77.888', 1, 1)\n       self.TestFeedLine('55.66.77.asdf',\
    \ 1, 1)\n       self.TestFeedLine('2001:db8:cafe::/48,PL,PL-MZ,,02-784', 0, 0)\n\
    \       self.TestFeedLine('2001:db8:cafe::/48', 0, 1)\n       self.TestFeedLine('55.66.77.88,PL',\
    \ 0, 1)\n       self.TestFeedLine('55.66.77.88,PL,,,', 0, 0)\n       self.TestFeedLine('55.66.77.88,,,,',\
    \ 0, 0)\n       self.TestFeedLine('55.66.77.88,ZZ,,,', 0, 0)\n       self.TestFeedLine('55.66.77.88,US,,,',\
    \ 0, 0)\n       self.TestFeedLine('55.66.77.88,USA,,,', 1, 0)\n       self.TestFeedLine('55.66.77.88,99,,,',\
    \ 1, 0)\n       self.TestFeedLine('55.66.77.88,US,US-CA,,', 0, 0)\n       self.TestFeedLine('55.66.77.88,US,USA-CA,,',\
    \ 1, 0)\n       self.TestFeedLine('55.66.77.88,USA,USA-CA,,', 2, 0)\n       self.TestFeedLine('55.66.77.88,US,US-CA,Mountain\
    \ View,', 0, 0)\n       self.TestFeedLine('55.66.77.88,US,US-CA,Mountain View,94043',\n\
    \                         0, 0)\n       self.TestFeedLine('55.66.77.88,US,US-CA,Mountain\
    \ View,94043,'\n                         '1600 Ampthitheatre Parkway', 0, 1)\n\
    \       self.TestFeedLine('55.66.77.0/24,US,,,', 0, 0)\n       self.TestFeedLine('55.66.77.88/24,US,,,',\
    \ 1, 0)\n       self.TestFeedLine('55.66.77.88/32,US,,,', 0, 0)\n       self.TestFeedLine('55.66.77/24,US,,,',\
    \ 1, 0)\n       self.TestFeedLine('55.66.77.0/35,US,,,', 1, 0)\n       self.TestFeedLine('172.15.30.1,US,,,',\
    \ 0, 0)\n       self.TestFeedLine('172.28.30.1,US,,,', 1, 0)\n       self.TestFeedLine('192.167.100.1,US,,,',\
    \ 0, 0)\n       self.TestFeedLine('192.168.100.1,US,,,', 1, 0)\n       self.TestFeedLine('10.0.5.9,US,,,',\
    \ 1, 0)\n       self.TestFeedLine('10.0.5.0/24,US,,,', 1, 0)\n       self.TestFeedLine('fc00::/48,PL,,,',\
    \ 1, 0)\n       self.TestFeedLine('fe00::/48,PL,,,', 0, 0)\n       print ('%d\
    \ tests passed, %d failed'\n         % (self.successes, self.failures))\n    \
    \ def IsOutputLogCorrectAtSeverity(self, severity,\n       expected_msg_count):\n\
    \       msg_count = self.validator.CountErrors(severity)\n       if msg_count\
    \ != expected_msg_count:\n         print ('TEST FAILED: %s\\nexpected %d %s[s],\
    \ observed %d\\n%s\\n'\n            % (self.validator.line, expected_msg_count,\
    \ severity,\n              msg_count,\n             str(self.validator.output_log[severity])))\n\
    \         return False\n       return True\n     def IsOutputLogCorrect(self,\
    \ new_errors, new_warnings):\n       retval = True\n       if not self.IsOutputLogCorrectAtSeverity('ERROR',\
    \ new_errors):\n         retval = False\n       if not self.IsOutputLogCorrectAtSeverity('WARNING',\n\
    \         retval = False\n       return retval\n     def TestFeedLine(self, line,\
    \ warning_count, error_count):\n       self.validator.output_log['WARNING'] =\
    \ []\n       self.validator.output_log['ERROR'] = []\n       self.validator._ValidateLine(line)\n\
    \       if not self.IsOutputLogCorrect(warning_count, error_count):\n        \
    \ self.failures += 1\n         return False\n       self.successes += 1\n    \
    \   return True\n   if __name__ == '__main__':\n     IPGeoFeedValidatorTest().Run()\n\
    \   <CODE ENDS>\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to express their gratitude to reviewers\
    \ and\n   early implementors, including but not limited to Mikael Abrahamsson,\n\
    \   Andrew Alston, Ray Bellis, John Bond, Alissa Cooper, Andras Erdei,\n   Stephen\
    \ Farrell, Marco Hogewoning, Mike Joseph, Maciej Kuzniar,\n   George Michaelson,\
    \ Menno Schepers, Justyna Sidorska, Pim van Pelt,\n   and Bjoern A. Zeeb.\n  \
    \ In particular, Richard L. Barnes and Andy Newton contributed\n   substantial\
    \ review, text, and advice.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Erik Kline\n   Loon LLC\n   1600 Amphitheatre Parkway\n\
    \   Mountain View, CA 94043\n   United States of America\n   Email: ek@loon.com\n\
    \   Krzysztof Duleba\n   Google\n   1600 Amphitheatre Parkway\n   Mountain View,\
    \ CA 94043\n   United States of America\n   Email: kduleba@google.com\n   Zoltan\
    \ Szamonek\n   Google Switzerland GmbH\n   Brandschenkestrasse 110\n   CH-8002\
    \ Z\xFCrich\n   Switzerland\n   Email: zszami@google.com\n   Stefan Moser\n  \
    \ Google Switzerland GmbH\n   Brandschenkestrasse 110\n   CH-8002 Z\xFCrich\n\
    \   Switzerland\n   Email: smoser@google.com\n   Warren Kumari\n   Google\n  \
    \ 1600 Amphitheatre Parkway\n   Mountain View, CA 94043\n"
