- title: __initial_text__
  contents:
  - "              Dynamic Host Configuration Protocol (DHCP):\n                 \
    \   IPv4 and IPv6 Dual-Stack Issues\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   A node may have support for communications using IPv4 and/or IPv6\n\
    \   protocols.  Such a node may wish to obtain IPv4 and/or IPv6\n   configuration\
    \ settings via the Dynamic Host Configuration Protocol\n   (DHCP).  The original\
    \ version of DHCP (RFC 2131) designed for IPv4\n   has now been complemented by\
    \ a new DHCPv6 (RFC 3315) for IPv6.  This\n   document describes issues identified\
    \ with dual IP version DHCP\n   interactions, the most important aspect of which\
    \ is how to handle\n   potential problems in clients processing configuration\
    \ information\n   received from both DHCPv4 and DHCPv6 servers.  The document\
    \ makes a\n   recommendation on the general strategy on how best to handle such\n\
    \   issues and identifies future work to be undertaken.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Configuration Scenarios .........................................3\n  \
    \ 3. Dual-Stack Issues ...............................................4\n    \
    \  3.1. Handling Multiple Responses ................................4\n      3.2.\
    \ Different Administrative Management ........................5\n      3.3. Multiple\
    \ Interfaces ........................................5\n      3.4. DNS Load Balancing\
    \ .........................................5\n      3.5. DNS Search Path Issues\
    \ .....................................5\n      3.6. Protocol Startup Sequence\
    \ ..................................6\n      3.7. DHCP Option Variations .....................................6\n\
    \      3.8. Security Issues ............................................6\n  \
    \ 4. Potential Solutions .............................................7\n    \
    \  4.1. Separate DHCP Servers ......................................7\n      4.2.\
    \ Single DHCPv6 Server .......................................8\n      4.3. Optimising\
    \ for Failure with Lists of Addresses .............9\n      4.4. Administrative\
    \ and Other Areas ............................10\n   5. Summary ........................................................10\n\
    \   6. Security Considerations ........................................12\n  \
    \ 7. Acknowledgements ...............................................12\n   8.\
    \ Informative References .........................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The original specification of the Dynamic Host Configuration\
    \ Protocol\n   (DHCP) was made with only IPv4 in mind.  That specification has\
    \ been\n   subsequently revised, up to the latest version of DHCP [1].  With the\n\
    \   arrival of IPv6, a new DHCP specification for IPv6 has been designed\n   and\
    \ published as DHCPv6 [4].\n   These protocols allow nodes to communicate via\
    \ IPv4 or IPv6\n   (respectively) to retrieve configuration settings for operation\
    \ in a\n   managed environment.  While an IPv6 node may acquire address-related\n\
    \   configuration settings via IPv6 stateless address autoconfiguration\n   [2],\
    \ such a node may wish to use stateless DHCPv6 [5] for other\n   administratively\
    \ configured options, such as DNS or NTP.\n   In early IPv6 deployments, a dual-stack\
    \ mode of operation is\n   typically used.  There will thus be nodes that require\
    \ both IPv4 and\n   IPv6 configuration settings.  This document discusses issues\
    \ with\n   obtaining such settings in a dual-stack environment.\n   There is a\
    \ general multihoming issue to be solved for DHCP.  A host\n   might simultaneously\
    \ be connected to multiple networks managed by\n   multiple parties.  Also, IPv4\
    \ and IPv6 might be managed by separate\n   parties.  While these issues are touched\
    \ on in this document, here we\n   focus on the specific issues for operating\
    \ DHCP in a mixed (typically\n   dual-stack) IPv4 and IPv6 environment within\
    \ a single administrative\n   domain.\n   In this document, we refer to a \"DHCP\
    \ server\" as a server\n   implementing the original DHCP [1], and a \"DHCPv6\
    \ server\" as a server\n   implementing DHCPv6 [4] or its stateless subset [5].\n"
- title: 2.  Configuration Scenarios
  contents:
  - "2.  Configuration Scenarios\n   For a node in an IPv4-only or IPv6-only environment,\
    \ the choice of\n   DHCP server is a straightforward one; a DHCP server for IPv4,\
    \ or a\n   DHCPv6 server for IPv6.\n   In a dual-stack environment a node in a\
    \ managed environment will need\n   to obtain both IPv4 and IPv6 configuration\
    \ settings, such as the\n   following:\n   o  IPv4 address\n   o  IPv6 address\n\
    \   o  NTP server\n   o  DNS server\n   o  NIS server\n   o  DNS search path\n\
    \   While the format of address settings will be IP specific, the node\n   may\
    \ equally well acquire IPv4 or IPv6 addresses for some settings,\n   such as for\
    \ DNS or NTP, if those services are available via IPv4 or\n   IPv6 transport.\
    \  Currently, a DHCP server returns IPv4 data, while a\n   DHCPv6 server returns\
    \ IPv6 data.\n   It is worth noting that in an IPv4 environment, with a DHCP server,\n\
    \   the choice of whether to use DHCP is made by the node.  In an IPv6\n   environment,\
    \ the use of the managed and other bits in the Router\n   Advertisement can offer\
    \ a hint to the node whether or not to use full\n   DHCPv6 or its stateless variant.\
    \  It is perhaps not clear whether a\n   dual-stack node should do DHCP for IPv4\
    \ if Managed and OtherConfig\n   flags in the Router Advertisement are both off;\
    \ it seems most\n   appropriate that the decision to use DHCP for IPv4 or not\
    \ should be\n   as if the host were IPv4-only.\n"
- title: 3.  Dual-Stack Issues
  contents:
  - "3.  Dual-Stack Issues\n   In this section, we list issues that have been raised\
    \ to date,\n   related to dual-stack DHCP operation.\n   It has been noted from\
    \ comments that the first four, and possibly\n   five, subsections here may also\
    \ be viewed as multihoming issues.\n"
- title: 3.1.  Handling Multiple Responses
  contents:
  - "3.1.  Handling Multiple Responses\n   The general question is how to handle configuration\
    \ information that\n   may be gathered from multiple sources.  Where those sources\
    \ are DHCP\n   and DHCPv6 servers (which may be two physical nodes or two servers\n\
    \   running on the same node) the client node needs to know whether to\n   use\
    \ the most recent data, or whether to perform some merger or union\n   of the\
    \ responses by certain rules.  A method for merging lists of\n   addresses, for\
    \ options that carry such information, may also be\n   required.  A node may choose\
    \ to ask a DHCPv6 server and only use a\n   DHCP server if no response is received.\n\
    \   Merging is possible, but is likely to be complex.  There could be\n   some\
    \ priority, so that if both DHCP and DHCPv6 servers offer a value,\n   only one\
    \ is used.  Or the node could choose to store and use both, in\n   some order\
    \ of its choosing.  Merging issues are further discussed\n   later in this document.\n\
    \   A node may also obtain information from other sources, such as a\n   manual\
    \ configuration file (for example, /etc/resolv.conf for DNS data\n   on many UNIX\
    \ systems).  A node configured manually to use an IPv6 DNS\n   server may lose\
    \ that configuration if it is in a dual-stack\n   environment and uses DHCP to\
    \ obtain IPv4 settings; the new IPv4\n   settings from the DHCP response may then\
    \ overwrite the manual IPv6\n   DNS setting.\n"
- title: 3.2.  Different Administrative Management
  contents:
  - "3.2.  Different Administrative Management\n   In some deployments, the IPv4 and\
    \ IPv6 services may not be\n   administered by the same organisation or people,\
    \ such as in a\n   community wireless environment.  This poses problems for consistency\n\
    \   of data offered by either DHCP version.\n   There may also be different connectivity\
    \ for the protocols, and the\n   client may gain advantage from knowing which\
    \ 'administrative domain'\n   is supplying which information.  A client may need\
    \ to use different\n   received information depending on which connectivity is\
    \ being used.\n   In the example of the community wireless environment, the question\
    \ of\n   which connectivity is 'better' is a separate issue.\n"
- title: 3.3.  Multiple Interfaces
  contents:
  - "3.3.  Multiple Interfaces\n   A node may have multiple interfaces and run IPv4\
    \ and IPv6 on\n   different interfaces.  A question then is whether the settings\
    \ are\n   per interface or per node.\n   Per-interface settings can be complex\
    \ because a client node needs to\n   know which interface system settings, like\
    \ NTP server, came from.\n   And it may not be apparent which setting should be\
    \ used if, for\n   example, an NTP server option is received on multiple interfaces,\n\
    \   potentially over different protocols.\n"
- title: 3.4.  DNS Load Balancing
  contents:
  - "3.4.  DNS Load Balancing\n   In some cases it is preferable to list DNS server\
    \ information in an\n   ordered way per node for load balancing, giving different\
    \ responses\n   to different clients.  Responses from different DHCP and DHCPv6\n\
    \   servers may make such configuration problematic, if the knowledge of\n   the\
    \ load balancing is not available to both servers.\n"
- title: 3.5.  DNS Search Path Issues
  contents:
  - "3.5.  DNS Search Path Issues\n   The DNS search path may vary for administrative\
    \ reasons.  For\n   example, a site under the domain example.com may choose to\
    \ place an\n   early IPv6 deployment under the subdomain ipv6.example.com, until\
    \ it\n   is confident of offering a full dual-stack service under its main\n \
    \  domain.  The subtlety here is that the DNS search path then affects\n   the\
    \ choice of protocol used, such as IPv6 for nodes in\n   ipv6.example.com.\n"
- title: 3.6.  Protocol Startup Sequence
  contents:
  - "3.6.  Protocol Startup Sequence\n   In the dual-stack environment, one needs\
    \ to consider what happens if,\n   for example, the IPv6 interface (transport)\
    \ is started after DHCPv4\n   was used to configure the client.  Should the client\
    \ then simply\n   discard the current IPv4 information, or merge it with a subsequent\n\
    \   IPv6 response?  It may also be possible that one protocol is shut\n   down\
    \ or started while the system is running.  There are similarities\n   here to\
    \ issues when DHCP renewals have information that may appear\n   that previously\
    \ was not available (or no longer carry information\n   that has been removed).\n"
- title: 3.7.  DHCP Option Variations
  contents:
  - "3.7.  DHCP Option Variations\n   Some options in DHCP are not available in DHCPv6\
    \ and vice versa.\n   Some IP-version limitations naturally apply; for example,\
    \ only IPv6\n   addresses can be in an IPv6 NTP option.  The DHCP and DHCPv6 option\n\
    \   numbers may be different.\n   Some sites may choose to use IPv4-mapped addresses\
    \ in DHCPv6-based\n   options.  The merits and drawbacks of such an approach need\n\
    \   discussion.\n   A site administrator may wish to configure all their dual-stack\
    \ nodes\n   with (say) two NTP servers, one of which has an IPv4 address, the\n\
    \   other an IPv6 address.  In this case, it may be desirable for an NTP\n   option\
    \ to carry a list of addresses, where some may be IPv4 and some\n   may be IPv6.\
    \  In general one could consider having DHCPv6 options\n   that can carry a mix\
    \ of IPv4 and IPv6 addresses.\n"
- title: 3.8.  Security Issues
  contents:
  - "3.8.  Security Issues\n   This document does not introduce any new security issues\
    \ per se.  A\n   detailed analysis of DHCP and DHCPv6 security is out of scope\
    \ for\n   this document.\n   While there is a specification for authentication\
    \ for DHCP messages\n   [3], the standard seems to have very few, if any, implementations.\n\
    \   Thus DHCP and DHCPv6 servers are still liable to be spoofed.  Adding\n   an\
    \ additional protocol may give an extra avenue for attack, should an\n   attacker\
    \ perhaps spoof a DHCPv6 server but not a DHCP server.\n"
- title: 4.  Potential Solutions
  contents:
  - "4.  Potential Solutions\n   Here we discuss the two broad solution strategies\
    \ proposed within the\n   IETF dhc WG.  The first is to run separate DHCP and\
    \ DHCPv6 servers\n   (with the client merging information received from both where\n\
    \   necessary, or perhaps choosing to query a particular version first).\n   The\
    \ second is to run only a DHCPv6 server and relay IPv4\n   configuration information\
    \ within (new) IPv4 configuration options.\n"
- title: 4.1.  Separate DHCP Servers
  contents:
  - "4.1.  Separate DHCP Servers\n   One solution is to run separate DHCP and DHCPv6\
    \ servers.  These may\n   or may not be run on the same physical node.  The information\
    \ served\n   from the DHCP servers could be generated from a single database\n\
    \   instance for consistency.  One might have a single server instance\n   supporting\
    \ both DHCPv4 and DHCPv6 protocols.\n   In this approach, some best practice guidance\
    \ is required for how\n   multiple responses are handled or merged.  Administrators\
    \ have the\n   onus to maintain consistency (for example, scripts may generate\n\
    \   common DHCP and DHCPv6 configuration files).\n   In some cases, inconsistencies\
    \ may not matter.  In a simple case, an\n   NTP server will give the same time\
    \ whether accessed by IPv4 or IPv6.\n   Even if different recursive DNS servers\
    \ are offered via DHCP or\n   DHCPv6, then those name servers should provide the\
    \ same response to a\n   given query.  In cases where sites may be operating a\
    \ 'two-faced\n   DNS', this will still hold true if the node is on the same\n\
    \   topological point on the network from an IPv4 or IPv6 perspective.\n   The\
    \ order of DNS servers in a node's configuration is not important,\n   unless\
    \ DNS load balancing is required.\n   In other cases, inconsistencies may be an\
    \ issue; for example, where\n   lists of values are returned, an algorithm is\
    \ needed for list merger\n   (e.g., \"alternate, DHCPv6 first\").  Or there may\
    \ be incompatible\n   configuration values where, for example, DHCPv6 supplies\
    \ domain names\n   (such the SMTP or POP servers) whereas DHCPv4 provides only\
    \ IPv4\n   addresses.\n   In the case of separate servers, there are some options,\
    \ like DNS\n   search path, that aren't used in a specific IP protocol context.\n\
    \   The multiple server approach will have some simplifications.  The\n   DHCPv4\
    \ and DHCPv6 servers may provide the same value for a particular\n   parameter,\
    \ in which case there is no conflict.  In some cases, the\n   value may be different,\
    \ but the effect should be the same (such as an\n   NTP server).  The crux of\
    \ the issue is to identify where differences\n   may occur and where these differences\
    \ will have an impact on node\n   behaviour.\n   One possible solution is to have\
    \ per-host preferences, or an ordered\n   list of preferences, for example, \"\
    use manually configured\", \"prefer\n   DHCPv4\", or \"prefer DHCPv6\", assuming\
    \ the host can act based upon\n   which protocol is used.  It is then up to the\
    \ site administrator to\n   ensure that values returned from either DHCP are consistent\
    \ (a\n   principle that extends if other methods are used, such as NIS or\n  \
    \ Service Location Protocol (SLP)).\n"
- title: 4.2.  Single DHCPv6 Server
  contents:
  - "4.2.  Single DHCPv6 Server\n   There is an argument for not having to configure\
    \ and operate both\n   DHCP and DHCPv6 servers in a dual-stack site environment.\
    \  The use of\n   both servers may also lead to some redundancy in the information\n\
    \   served.  Thus, one solution may be to modify DHCPv6 to be able to\n   return\
    \ IPv4 information.  This solution is hinted at in the DHCPv6\n   [4] specification:\
    \ \"If there is sufficient interest and demand,\n   integration can be specified\
    \ in a document that extends DHCPv6 to\n   carry IPv4 addresses and configuration\
    \ information.\"  This solution\n   may allow DHCP for IPv4 to be completely replaced\
    \ by DHCPv6 with\n   additional IPv4 information options, for dual-stack nodes.\n\
    \   A general argument is that which DHCP protocol is used (whether it's\n   over\
    \ IPv4 or IPv6) shouldn't affect what kind of addresses you can\n   get configured\
    \ with it, and that simplicity and predictability come\n   from using a single\
    \ server over a single transport.  IPv4-capable\n   hosts will likely remain for\
    \ at least 10 years, probably much longer;\n   do we want dual-stack hosts (which\
    \ will become the norm) to do both\n   DHCPv4 and DHCPv6 forever while dual-stack?\
    \  If you need both servers\n   to configure interfaces with addresses, and get\
    \ other configurations,\n   then you rely on two separate protocols to work (servers\
    \ and relays,\n   etc.) in order for the host to behave correctly.\n   This approach\
    \ may require the listing of a mix of IPv4 and IPv6\n   addresses for an option.\
    \  This could then be considered when new IPv6\n   options are introduced.  There\
    \ could be just two options needed, one\n   new option for the address delegation,\
    \ and one for doing\n   encapsulation.\n   Also, there are a number of paradigms\
    \ in DHCPv6 that we miss in\n   DHCPv4.  An example is movement away from using\
    \ MAC addresses for\n   per-host address assignment and instead using DHCP Unique\
    \ Identifier\n   (DUIDs) or Identity Association Identifiers (IAIDs).  As stated\
    \ in\n   Section 9 of RFC3315, DHCPv6 servers use DUIDs to identify clients\n\
    \   for the selection of configuration parameters and in the association\n   of\
    \ IAs with clients.  DHCPv6 clients use DUIDs to identify a server\n   in messages\
    \ where a server needs to be identified.  However, in this\n   particular example,\
    \ the new DHCPv6 functionality has recently been\n   retrofitted to IPv4 via a\
    \ specification for DUIDs for DHCPv4 [6].\n   However, there are a number of potential\
    \ problems with this approach:\n   o  IPv4-only nodes would not have any DHCP\
    \ service available to them;\n      such an approach is only possible in a fully\
    \ dual-stack\n      environment.\n   o  The client node may then be IPv6-only\
    \ and receive IPv4\n      configuration settings that it does not want or be able\
    \ to handle\n      meaningfully.\n   o  The DHCPv4 servers need to be configured\
    \ anyway to support IPv4-\n      only hosts, so there is still duplication of\
    \ information.\n   o  What happens if there are DHCPv6 servers that don't return\
    \ IPv4\n      information?  Does this mean the client can't run IPv4 (since it\n\
    \      won't do DHCPv4)?\n   o  If IPv4 information is served from a DHCPv6 server\
    \ as well as an\n      IPv4 DHCP server, IPv4 address space will need to be allocated\
    \ to\n      both servers, fragmenting the potentially precious IPv4 global\n \
    \     address resource for the site.\n"
- title: 4.3.  Optimising for Failure with Lists of Addresses
  contents:
  - "4.3.  Optimising for Failure with Lists of Addresses\n   There is a generic issue\
    \ with any option that includes a list of\n   addresses of servers (such as DNS\
    \ server addresses).  The list is\n   offered to cater for resilience, such as\
    \ whether the listed server\n   itself fails or connectivity to the server fails.\
    \  If the client does\n   not know the cause of failure, its optimal strategy\
    \ is to try a\n   different server, via a different protocol.  The problem today\
    \ is\n   that the IPv4 list is returned via DHCPv4, and the IPv6 list via\n  \
    \ DHCPv6; the client really has no way to \"try a different server\",\n   since\
    \ that information is lost by the protocol, even though it may be\n   known by\
    \ the server.\n   Just putting merging heuristics in the client cannot provide\
    \ the best\n   behaviour, since information is lost.  By comparison, if IPv4-mapped\n\
    \   addresses were included in the DHCPv6 option along with IPv6\n   addresses,\
    \ the DHCP server can give an intelligent order that takes\n   into account which\
    \ addresses are of the same DNS/whatever server.\n   IPv6-only clients have to\
    \ know to discard the IPv4-mapped addresses\n   in this solution, and it's much\
    \ easier to solve this in the combined-\n   DHCP-server case than in the two-server\
    \ case.\n   One can argue that this is only an optimisation, and in many cases\n\
    \   the list has only two elements, so the \"next\" choice is forced.\n   However,\
    \ this particular issue highlights the subtleties of merging\n   responses from\
    \ separate servers.\n"
- title: 4.4.  Administrative and Other Areas
  contents:
  - "4.4.  Administrative and Other Areas\n   There are also administrative issues\
    \ or best practice that could be\n   promoted.  For example, it may be recommended\
    \ that sites do not split\n   their DNS name space for IPv6-specific testbeds.\n\
    \   It may be worth considering whether separate manual configuration\n   files\
    \ should be kept for IPv4 and IPv6 settings, such as separate\n   /etc/resolv.conf\
    \ files for DNS settings on UNIX systems.  However,\n   this seems a complex solution.\
    \  The problem should be better solved\n   by other, more generalised methods.\n\
    \   It may be important at times to be able to distinguish DHCP client\n   and\
    \ server identities.  DHCPv6 introduces the idea of a DHCP Unique\n   Identifier\
    \ (DUID).  The DUID concept has also been retrofitted to\n   DHCPv4 [6], and thus\
    \ it may form the basis of part of the solution\n   space for the problem at hand.\n\
    \   Some differences in DHCP and DHCPv6 may not be reconciled, but may\n   not\
    \ need to be, such as different ways to assign addresses by DUID in\n   DHCPv6,\
    \ or the lack of a comparable option in both DHCP versions.\n"
- title: 5.  Summary
  contents:
  - "5.  Summary\n   There are a number of issues in the operation of DHCP and DHCPv6\n\
    \   servers for nodes in dual-stack environments that should be\n   clarified.\
    \  While some differences in the protocols may not be\n   reconciled, there may\
    \ not be a need to do so.  However, with DHCPv6\n   deployment growing, there\
    \ is an operational requirement to determine\n   best practice for DHCP server\
    \ provision in dual-stack environments,\n   which may or may not imply additional\
    \ protocol requirements.  The\n   principal choice is whether separate DHCP and\
    \ DHCPv6 services should\n   be maintained by a site, or whether DHCPv6 should\
    \ be extended to\n   carry IPv4 configuration settings for dual-stack nodes.\n\
    \   It can certainly be argued that until a site is completely dual-\n   stack,\
    \ an IPv4 DHCP service will always be required (for example,\n   while there are\
    \ still legacy printers, IP webcams, or other devices\n   that still configure\
    \ via DHCPv4), and a single IPv6 transport DHCP\n   server offering configuration\
    \ information for both protocols will\n   then not be sufficient.  In that case,\
    \ IPv4 DHCP is required, and\n   thus there\n   is a good rationale for focusing\
    \ effort on how to combine the\n   information received from separate IPv4 DHCP\
    \ and (stateless) DHCPv6\n   servers.\n   In theory, it should be relatively straightforward\
    \ to write a\n   configuration manager that would accept a single configuration\n\
    \   specification from the service manager and distribute the correct\n   (and\
    \ consistent) configurations to the DHCPv4 and DHCPv6 servers\n   (whether on\
    \ the same host or not).  In this case, maintaining\n   coordinated configurations\
    \ in two servers is an interface issue, not\n   a protocol issue.  The question\
    \ then is whether the client has all\n   the information it needs to make reasonable\
    \ choices.  We are aware of\n   one implementation of separate DHCPv4 and DHCPv6\
    \ clients that is\n   using a preference option for assisting client-side merging\
    \ of the\n   received information.\n   Another issue for discussion is whether\
    \ a combined DHCP service only\n   available over IPv6 transport is a desirable\
    \ longer-term goal for\n   networks containing only dual-stack or IPv6-only nodes\
    \ (or IPv4-only\n   nodes where DHCPv4 is not needed).  The transition to the\
    \ long-term\n   position may easily take more than 10 years.\n   Upon reflection\
    \ on the above observations, the dhc WG reached a\n   strong consensus to adopt\
    \ the two-server approach (separate DHCP and\n   DHCPv6 servers), rather than\
    \ have a combined single server returning\n   IPv4 information over IPv6.  The\
    \ two servers may be co-located on a\n   single node and may have consistent configuration\
    \ information\n   generated from a single asset database.\n   It should be noted\
    \ that deployment experience of DHCPv6 is still in\n   its infancy; thus, a full\
    \ understanding of the issues may only\n   develop over time, but we feel we have\
    \ reached the best consensus\n   given the current status.  Future work is now\
    \ required to determine\n   best practice for merging information from multiple\
    \ servers,\n   including merger of lists of addresses where options carry such\n\
    \   information.\n   As a footnote, we note that this work has overlap with multihoming\n\
    \   and multi-interface configuration issues.  It is also interwoven with\n  \
    \ the Detecting Network Attachment area, for example, where a node may\n   move\
    \ from an IPv4-only network to a dual-stack network, or vice\n   versa.  Both\
    \ aspects may be best abstracted for discussion and\n   progression in the respective\
    \ IETF multi6, shim6, and dna WGs, in\n   parallel with the two-server progression\
    \ in the dhc WG.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   There are no security considerations in this\
    \ problem statement per\n   se, as it does not propose a new protocol.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors thank the following people for input to\
    \ this document:\n   Bernie Volz, AK Vijayabhaskar, Ted Lemon, Ralph Droms, Robert\
    \ Elz,\n   Changming Liu, Margaret Wasserman, Dave Thaler, Mark Hollinger, and\n\
    \   Greg Daley.  The document may not necessarily fully reflect the views\n  \
    \ of each of these individuals.\n   The authors would also like to thank colleagues\
    \ on the 6NET project\n   for contributions to this document.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [1]  Droms, R., \"Dynamic Host Configuration Protocol\"\
    , RFC 2131,\n        March 1997.\n   [2]  Thomson, S. and T. Narten, \"IPv6 Stateless\
    \ Address\n        Autoconfiguration\", RFC 2462, December 1998.\n   [3]  Droms,\
    \ R. and W. Arbaugh, \"Authentication for DHCP Messages\",\n        RFC 3118,\
    \ June 2001.\n   [4]  Droms, R., Bound, J., Volz, B., Lemon, T., Perkins, C.,\
    \ and M.\n        Carney, \"Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\"\
    ,\n        RFC 3315, July 2003.\n   [5]  Droms, R., \"Stateless Dynamic Host Configuration\
    \ Protocol (DHCP)\n        Service for IPv6\", RFC 3736, April 2004.\n   [6] \
    \ Lemon, T. and B. Sommerfeld, \"Node-specific Client Identifiers\n        for\
    \ Dynamic Host Configuration Protocol Version Four (DHCPv4)\",\n        RFC 4361,\
    \ February 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tim Chown\n   University of Southampton\n   School of\
    \ Electronics and Computer Science\n   Southampton, Hampshire  SO17 1BJ\n   United\
    \ Kingdom\n   EMail: tjc@ecs.soton.ac.uk\n   Stig Venaas\n   UNINETT\n   Trondheim\
    \  NO 7465\n   Norway\n   EMail: venaas@uninett.no\n   Christian Strauf\n   Clausthal\
    \ University of Technology\n   Erzstr. 51\n   Clausthal-Zellerfeld  D-38678\n\
    \   Germany\n   EMail: strauf@rz.tu-clausthal.de\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
