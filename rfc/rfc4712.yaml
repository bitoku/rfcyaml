- contents:
  - "    Transport Mappings for Real-time Application Quality-of-Service\n              Monitoring
    (RAQMON) Protocol Data Unit (PDU)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo specifies two transport mappings of the Real-Time\n   Application
    Quality-of-Service Monitoring (RAQMON) information model\n   defined in RFC 4710
    using TCP as a native transport and the Simple\n   Network Management Protocol
    (SNMP) to carry the RAQMON information\n   from a RAQMON Data Source (RDS) to
    a RAQMON Report Collector (RRC).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Transporting RAQMON Protocol Data Units .........................3\n      2.1.
    TCP as an RDS/RRC Network Transport Protocol ...............3\n           2.1.1.
    The RAQMON PDU ......................................5\n           2.1.2. The
    BASIC Part of the RAQMON Protocol Data Unit .....7\n           2.1.3. APP Part
    of the RAQMON Protocol Data Unit ..........14\n           2.1.4. Byte Order, Alignment,
    and Time Format of\n                  RAQMON PDUs ........................................15\n
    \     2.2. Securing RAQMON Session ...................................15\n           2.2.1.
    Sequencing of the Start TLS Operation ..............18\n           2.2.2. Closing
    a TLS Connection ...........................21\n      2.3. SNMP Notifications
    as an RDS/RRC Network Transport\n           Protocol ..................................................22\n
    \  3. IANA Considerations ............................................38\n   4.
    Congestion-Safe RAQMON Operation ...............................38\n   5. Acknowledgements
    ...............................................39\n   6. Security Considerations
    ........................................39\n      6.1. Usage of TLS with RAQMON
    ..................................41\n           6.1.1. Confidentiality & Message
    Integrity ................41\n           6.1.2. TLS CipherSuites ...................................41\n
    \          6.1.3. RAQMON Authorization State .........................42\n   7.
    References .....................................................43\n      7.1.
    Normative References ......................................43\n      7.2. Informative
    References ....................................44\n   Appendix A. Pseudocode ............................................46\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Real-Time Application QoS Monitoring (RAQMON) Framework,
    as\n   outlined by [RFC4710], extends the Remote Monitoring family of\n   protocols
    (RMON) by defining entities such as RAQMON Data Sources\n   RDS) and RAQMON Report
    Collectors (RRC) to perform various\n   application monitoring in real time.  [RFC4710]
    defines the relevant\n   metrics for RAQMON monitoring carried by the common protocol
    data\n   unit (PDU) used between a RDS and RRC to report QoS statistics.  This\n
    \  memo contains a syntactical description of the RAQMON PDU structure.\n   The
    following sections of this memo contain detailed specifications\n   for the usage
    of TCP and SNMP to carry RAQMON information.\n   The key words \"MUST\", \"MUST
    NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
    \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
    as described in [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Transporting RAQMON Protocol Data Units\n   The RAQMON Protocol Data Unit
    (PDU) utilizes a common data format\n   understood by the RDS and the RRC.  A
    RAQMON PDU does not transport\n   application data but rather occupies the place
    of a payload\n   specification at the application layer of the protocol stack.
    \ As\n   part of the specification, this memo also specifies the usage of TCP\n
    \  and SNMP as underlying transport protocols to carry RAQMON PDUs\n   between
    RDSs and RRCs.  While two transport protocol choices have\n   been provided as
    options to chose from for RDS implementers, RRCs\n   MUST implement the TCP transport
    and MAY implement the SNMP\n   transport.\n"
  - contents:
    - "2.1.  TCP as an RDS/RRC Network Transport Protocol\n   A transport binding
      using TCP is included within the RAQMON\n   specification to facilitate reporting
      from various types of embedded\n   devices that run applications such as Voice
      over IP, Voice over\n   Wi-Fi, Fax over IP, Video over IP, Instant Messaging
      (IM), E-mail,\n   software download applications, e-business style transactions,
      web\n   access from wired or wireless computing devices etc.  For many of\n
      \  these devices, PDUs and a TCP-based transport fit the deployment\n   needs.\n
      \  The RAQMON transport requirements for end-to-end congestion control\n   and
      reliability are inherently built into TCP as a transport protocol\n   [RFC793].\n
      \  To use TCP to transport RAQMON PDUs, it is sufficient to send the\n   PDUs
      as TCP data.  As each PDU carries its length, the receiver can\n   determine
      the PDU boundaries.\n   The following section details the RAQMON PDU specifications.
      \ Though\n   transmitted as one Protocol Data Unit, a RAQMON PDU is functionally\n
      \  divided into two different parts: the BASIC part and application\n   extensions
      required for vendor-specific extension [RFC4710].  Both\n   functional parts
      follow a field carrying a SMI Network Management\n   Private Enterprise code
      currently maintained by IANA\n   http://www.iana.org/assignments/enterprise-numbers,
      which is used to\n   identify the organization that defined the information
      carried in the\n   PDU.\n   A RAQMON PDU in the current version is marked as
      PDU Type (PDT) = 1.\n   The parameters carried by RAQMON PDUs are shown in Figure
      1 and are\n   defined in section 5 of [RFC4710].\n   Vendors MUST use the BASIC
      part of the PDU to report parameters pre-\n   listed here in the specification
      for interoperability, as opposed to\n   using the application-specific portion.
      \ Vendors MAY also use\n   application-specific extensions to convey application-,
      vendor-, or\n   device-specific parameters not included in the BASIC part of
      the\n   specification and explicitly publish such data externally to attain\n
      \  extended interoperability.\n"
    - contents:
      - "2.1.1.  The RAQMON PDU\n   0                   1                   2                   3\n
        \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |PDT = 1  |B|  T  |P|S|R|  RC   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            DSRC                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  SMI Enterprise Code = 0      |Report Type = 0|     RC_N      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |flag\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
        \                  Data Source Address {DA}                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                    Receiver's Address (RA)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               NTP Timestamp, most significant word            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               NTP Timestamp, least significant word           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Length       |   Application Name (AN)  ...                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Length       |   Data Source Name (DN)  ...                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Length       |    Receiver's Name (RN)  ...                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Length       |    Session State          ...                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Session Duration                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              Round-Trip End-to-End Network Delay              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              One-Way End-to-End Network Delay                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      Cumulative Packet Loss                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              Cumulative Application Packet Discard            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              Total # Application Packets sent                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |             Total # Application Packets received              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               Total # Application Octets sent                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |             Total # Application Octets received               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Data Source Device Port Used  |  Receiver Device Port Used    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    S_Layer2   |   S_Layer3    |   S_Layer2    |   S_Layer3    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |Source Payload |Receiver       | CPU           | Memory        |\n   |Type
        \          |Payload Type   | Utilization   | Utilization   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    Session Setup Delay        |     Application Delay         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | IP Packet Delay Variation     |   Inter arrival Jitter        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Packet Discrd |  Packet loss  |         Padding               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                  SMI Enterprise Code = \"xxx\"                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Report Type = \"yyy\"       | Length of Application Part    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               application/vendor specific extension           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...............                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...............                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...............                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                  SMI Enterprise Code = \"abc\"                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Report Type = \"zzz\"       | Length of Application Part    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               application/vendor specific extension           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            ...............                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 1: RAQMON Protocol Data Unit\n"
      title: 2.1.1.  The RAQMON PDU
    - contents:
      - "2.1.2.  The BASIC Part of the RAQMON Protocol Data Unit\n   A RAQMON PDU
        must contain the following BASIC part fields at all\n   times:\n   PDU type
        (PDT): 5 bits - This indicates the type of RAQMON PDU being\n      sent.  PDT
        = 1 is used for the current RAQMON PDU version defined\n      in this document.\n
        \  basic (B): 1 bit - While set to 1, the basic flag indicates that the\n
        \     PDU has BASIC part of the RAQMON PDU.  A value of zero is\n      considered
        valid and indicates a RAQMON NULL PDU.\n   trailer (T): 3 bits - Total number
        of Application-Specific Extensions\n      that follow the BASIC part of RAQMON
        PDU.  A value of zero is\n      considered valid as many times as there is
        no application-\n      specific information to add to the basic information.\n
        \  padding (P): 1 bit - If the padding bit is set, the BASIC part of the\n
        \     RAQMON PDU contains some additional padding octets at the end of\n      the
        BASIC part of the PDU that are not part of the monitoring\n      information.
        \ Padding may be needed in some cases, as reporting is\n      based on the
        intent of a RDS to report certain parameters.  Also,\n      some parameters
        may be reported only once at the beginning of the\n      reporting session,
        e.g., Data Source Name, Receiver Name, payload\n      type, etc.  Actual padding
        at the end of the BASIC part of the PDU\n      is 0, 8, 16, or 24 bits to
        make the length of the BASIC part of\n      the PDU a multiple of 32 bits\n
        \  Source IP version Flag (S): 1 bit - While set to 1, the source IP\n      version
        flag indicates that the Source IP address contained in the\n      PDU is an
        IPv6 address.\n   Receiver IP version Flag (R): 1 bit - While set to 1, the
        receiver IP\n      version flag indicates that the receiver IP address contained
        in\n      the PDU is an IPv6 address.\n   record count (RC): 4 bits - Total
        number of application records\n      contained in the BASIC part of the PDU.
        \ A value of zero is\n      considered valid but useless, with the exception
        of the case of a\n      NULL PDU indicating the end of a RDS reporting session.\n
        \  length: 16 bits (unsigned integer) - The length of the BASIC part of\n
        \     the RAQMON PDU in units of 32-bit words minus one; this count\n      includes
        the header and any padding.\n   DSRC: 32 bits - Data Source identifier represents
        a unique RAQMON\n      reporting session descriptor that points to a specific
        reporting\n      session between RDS and RRC.  Uniqueness of DSRC is valid
        only\n      within a reporting session.  DSRC values should be randomly\n
        \     generated using vendor-chosen algorithms for each communication\n      session.
        \ It is not sufficient to obtain a DSRC simply by calling\n      random()
        without carefully initializing the state.  One could use\n      an algorithm
        like the one defined in Appendix A.6 in [RFC3550] to\n      create a DSRC.
        \ Depending on the choice of algorithm, there is a\n      finite probability
        that two DSRCs from two different RDSs may be\n      the same.  To further
        reduce the probability that two RDSs pick\n      the same DSRC for two different
        reporting sessions, it is\n      recommended that an RRC use parameters like
        Data Source Address\n      (DA), Data Source Name (DN), and layer 2 Media
        Access Control\n      (MAC) Address in the PDU in conjunction with a DSRC
        value.  It is\n      not mandatory for RDSs to send parameters like Data Source
        Address\n      (DA), Data Source Name (DN), and MAC Address in every PDU sent
        to\n      RRC, but occasionally sending these parameters will reduce the\n
        \     probability of DSRC collision drastically.  However, this will\n      cause
        an additional overhead per PDU.\n      A value of zero for basic (B) bit and
        trailer (T) bits constitutes\n      a RAQMON NULL PDU (i.e., nothing to report).
        \ RDSs MUST send a\n      RAQMON NULL PDU to RRC to indicate the end of the
        RDS reporting\n      session.  A NULL PDU ends with the DSRC field.\n   SMI
        Enterprise Code: 16 bits.  A value of SMI Enterprise Code = 0 is\n      used
        to indicate the RMON-WG-compliant BASIC part of the RAQMON\n      PDU format.\n
        \  Report Type: 8 bits - These bits are reserved by the IETF RMON\n      Working
        Group.  A value of 0 within SMI Enterprise Code = 0 is\n      used for the
        version of the PDU defined by this document.\n      The BASIC part of each
        RAQMON PDU consists of Record Count Number\n      (RC_N) and RAQMON Parameter
        Presence Flags (RPPF) to indicate the\n      presence of appropriate RAQMON
        parameters within a record, as\n      defined in Table 1.\n   RC_N: 8 bits
        - The Record Count number indicates a sub-session within\n      a communication
        session.  A value of zero is a valid record\n      number.  The maximum number
        of records that can be described in\n      one RAQMON Packet is 256.\n   RAQMON
        Parameter Presence Flags (RPPF): 32 bits\n      Each of these flags, while
        set, represents that this RAQMON PDU\n      contains corresponding parameters
        as specified in Table 1.\n   +----------------+--------------------------------------------------+\n
        \  |  Bit Sequence  |    Presence/Absence of corresponding Parameter   |\n
        \  |     Number     |              within this RAQMON PDU              |\n
        \  +----------------+--------------------------------------------------+\n
        \  |        0       |             Data Source Address (DA)             |\n
        \  |                |                                                  |\n
        \  |        1       |               Receiver Address (RA)              |\n
        \  |                |                                                  |\n
        \  |        2       |                   NTP Timestamp                  |\n
        \  |                |                                                  |\n
        \  |        3       |                 Application Name                 |\n
        \  |                |                                                  |\n
        \  |        4       |               Data Source Name (DN)              |\n
        \  |                |                                                  |\n
        \  |        5       |                Receiver Name (RN)                |\n
        \  |                |                                                  |\n
        \  |        6       |               Session Setup Status               |\n
        \  |                |                                                  |\n
        \  |        7       |                 Session Duration                 |\n
        \  |                |                                                  |\n
        \  |        8       |       Round-Trip End-to-End Net Delay (RTT)      |\n
        \  |                |                                                  |\n
        \  |        9       |      One-Way End-to-End Network Delay (OWD)      |\n
        \  |                |                                                  |\n
        \  |       10       |              Cumulative Packets Loss             |\n
        \  |                |                                                  |\n
        \  |       11       |            Cumulative Packets Discards           |\n
        \  |                |                                                  |\n
        \  |       12       |         Total number of App Packets sent         |\n
        \  |                |                                                  |\n
        \  |       13       |       Total number of App Packets received       |\n
        \  |                |                                                  |\n
        \  |       14       |          Total number of App Octets sent         |\n
        \  |                |                                                  |\n
        \  |       15       |        Total number of App Octets received       |\n
        \  |                |                                                  |\n
        \  |       16       |           Data Source Device Port Used           |\n
        \  |                |                                                  |\n
        \  |       17       |             Receiver Device Port Used            |\n
        \  |                |                                                  |\n
        \  |       18       |              Source Layer 2 Priority             |\n
        \  |                |                                                  |\n
        \  |       19       |              Source Layer 3 Priority             |\n
        \  |                |                                                  |\n
        \  |       20       |           Destination Layer 2 Priority           |\n
        \  |                |                                                  |\n
        \  |       21       |           Destination Layer 3 Priority           |\n
        \  |                |                                                  |\n
        \  |       22       |                Source Payload Type               |\n
        \  |                |                                                  |\n
        \  |       23       |               Receiver Payload Type              |\n
        \  |                |                                                  |\n
        \  |       24       |                  CPU Utilization                 |\n
        \  |                |                                                  |\n
        \  |       25       |                Memory Utilization                |\n
        \  |                |                                                  |\n
        \  |       26       |                Session Setup Delay               |\n
        \  |                |                                                  |\n
        \  |       27       |                 Application Delay                |\n
        \  |                |                                                  |\n
        \  |       28       |             IP Packet Delay Variation            |\n
        \  |                |                                                  |\n
        \  |       29       |               Inter arrival Jitter               |\n
        \  |                |                                                  |\n
        \  |       30       |           Packet Discard (in fraction)           |\n
        \  |                |                                                  |\n
        \  |       31       |             Packet Loss (in fraction)            |\n
        \  +----------------+--------------------------------------------------+\n
        \            Table 1: RAQMON Parameters and Corresponding RPPF\n   Data Source
        Address (DA): 32 bits or 160 bits in binary\n      representation - This parameter
        is defined in section 5.1 of\n      [RFC4710].  IPv6 addresses are incorporated
        in Data Source Address\n      by setting the source IP version flag (S bit)
        of the RAQMON PDU\n      header to 1.\n   Receiver Address (RA): 32 bits or
        160 bits - This parameter is\n      defined in section 5.2 of [RFC4710].  It
        follows the exact same\n      syntax as Data Source Address but is used to
        indicate a Receiver\n      Address.  IPv6 addresses are incorporated in Receiver
        Address by\n      setting the receiver IP version flag (R bit) of the RAQMON
        PDU\n      header to 1.\n   Session Setup Date/Time (NTP timestamp): 64 bits
        - This parameter is\n      defined in section 5.7 of [RFC4710] and represented
        using the\n      timestamp format of the Network Time Protocol (NTP), which
        is in\n      seconds [RFC1305].  The full resolution NTP timestamp is a 64-bit\n
        \     unsigned fixed-point number with the integer part in the first 32\n
        \     bits and the fractional part in the last 32 bits.\n   Application Name:
        This parameter is defined in section 5.32 of\n      [RFC4710].  The Application
        Name field starts with an 8-bit octet\n      count describing the length of
        the text followed by the text\n      itself using UTF-8 encoding.  Application
        Name field is a multiple\n      of 32 bits, and padding will be used if necessary.\n
        \     A Data Source that does not support NTP SHOULD set the appropriate\n
        \     RAQMON flag to 0 to avoid wasting 64 bits in the PDU.  Since the\n      NTP
        time stamp is intended to provide the setup Date/Time of a\n      session,
        it is RECOMMENDED that the NTP Timestamp be used only in\n      the first
        RAQMON PDU after sub-session RC_N setup is completed, in\n      order to use
        network resources efficiently.\n   Data Source Name (DN): Defined in section
        5.3 of [RFC4710].  The Data\n      Source Name field starts with an 8-bit
        octet count describing the\n      length of the text followed by the text
        itself.  Padding is used\n      to ensure that the length and text encoding
        occupy a multiple of\n      32 bits in the DN field of the PDU.  The text
        MUST NOT be longer\n      than 255 octets.  The text is encoded according
        to the UTF-8\n      encoding specified in [RFC3629].  Applications SHOULD
        instruct\n      RDSs to send out the Data Source Name infrequently to ensure\n
        \     efficient usage of network resources as this parameter is expected\n
        \     to remain constant for the duration of the reporting session.\n   Receiver
        Name (RN): This metric is defined in section 5.4 of\n      [RFC4710].  Like
        Data Source Name, the Receiver Name field starts\n      with an 8-bit octet
        count describing the length of the text,\n      followed by the text itself.
        \ The Receiver Name, including the\n      length field encoding, is a multiple
        of 32 bits and follows the\n      same padding rules as applied to the Data
        Source Name.  Since the\n      Receiver Name is expected to remain constant
        during the entire\n      reporting session, this information SHOULD be sent
        out\n      occasionally over random time intervals to maximize success of\n
        \     reaching a RRC and also conserve network bandwidth.\n   Session Setup
        Status: The Session (sub-session) Setup Status is\n      defined in section
        5.10 of [RFC4710].  This field starts with an\n      8-bit length field followed
        by the text itself.  Session Setup\n      Status is a multiple of 32 bits.\n
        \  Session Duration: 32 bits - The Session (sub-session) Duration metric\n
        \     is defined in section 5.9 of [RFC4710].  Session Duration is an\n      unsigned
        integer expressed in seconds.\n   Round-Trip End-to-End Network Delay: 32
        bits - The Round-Trip End-\n      to-End Network Delay is defined in section
        5.11 of [RFC4710].\n      This field represents the Round-Trip End-to-End
        Delay of sub-\n      session RC_N, which is an unsigned integer expressed
        in\n      milliseconds.\n   One-Way End-to-End Network Delay: 32 bits - The
        One-Way End-to-End\n      Network Delay is defined in section 5.12 of [RFC4710].
        \ This field\n      represents the One-Way End-to-End Delay of sub-session
        RC_N, which\n      is an unsigned integer expressed in milliseconds.\n   Cumulative
        Application Packet Loss: 32 bits - This parameter is\n      defined in section
        5.20 of [RFC4710] as an unsigned integer,\n      representing the total number
        of packets from sub-session RC_N\n      that have been lost while this RAQMON
        PDU was generated.\n   Cumulative Application Packet Discards: 32 bits - This
        parameter is\n      defined in section 5.22 of [RFC4710] as an unsigned integer\n
        \     representing the total number of packets from sub-session RC_N\n      that
        have been discarded while this RAQMON PDU was generated.\n   Total number
        of Application Packets sent: 32 bits - This parameter is\n      defined in
        section 5.17 of [RFC4710] as an unsigned integer,\n      representing the
        total number of packets transmitted within sub-\n      session RC_N by the
        sender.\n   Total number of Application Packets received: 32 bits - This\n
        \     parameter is defined in section 5.16 of [RFC4710] and is\n      represented
        as an unsigned integer representing the total number\n      of packets transmitted
        within sub-session RC_N by the receiver.\n   Total number of Application Octets
        sent: 32 bits - This parameter is\n      defined in section 5.19 of [RFC4710]
        as an unsigned integer,\n      representing the total number of payload octets
        (i.e., not\n      including header or padding) transmitted in packets by the
        sender\n      within sub-session RC_N.\n   Total number of Application Octets
        received: 32 bits - This parameter\n      is defined in section 5.18 of [RFC4710]
        as an unsigned integer\n      representing the total number of payload octets
        (i.e., not\n      including header or padding) transmitted in packets by the\n
        \     receiver within sub-session RC_N.\n   Data Source Device Port Used:
        16 bits - This parameter is defined in\n      section 5.5 of [RFC4710] and
        describes the port number used by the\n      Data Source as used by the application
        in RC_N session while this\n      RAQMON PDU was generated.\n   Receiver Device
        Port Used: 16 bits - This parameter is defined in\n      section 5.6 of [RFC4710]
        and describes the receiver port used by\n      the application to communicate
        to the receiver.  It follows same\n      syntax as Source Device Port Used.\n
        \  S_Layer2: 8 bits - This parameter, defined in section 5.26 of\n      [RFC4710],
        is associated to the source's IEEE 802.1D [IEEE802.1D]\n      priority tagging
        of traffic in the communication sub-session RC_N.\n      Since IEEE 802.1
        priority tags are 3 bits long, the first 3 bits\n      of this parameter represent
        the IEEE 802.1 tag value, and the last\n      5 bits are padded to 0.\n   S_Layer3:
        8 bits - This parameter, defined in section 5.27 of\n      [RFC4710], represents
        the layer 3 QoS marking used to send packets\n      to the receiver by this
        data source during sub-session RC_N.\n   D_Layer2: 8 bits - This parameter,
        defined in section 5.28 of\n      [RFC4710], represents layer 2 IEEE 802.1D
        priority tags used by\n      the receiver to send packets to the data source
        during sub-session\n      RC_N session if the Data Source can learn such information.
        \ Since\n      IEEE 802.1 priority tags are 3 bits long, the first 3 bits
        of this\n      parameter represent the IEEE 802.1 priority tag value, and
        the\n      last 5 bits are padded to 0.\n   D_Layer3: 8 bits - This parameter
        is defined in section 5.29 of\n      [RFC4710] and represents the layer 3
        QoS marking used by the\n      receiver to send packets to the data source
        during sub-session\n      RC_N, if the Data Source can learn such information.\n
        \  Source Payload Type: 8 bits - This parameter is defined in section\n      5.24
        of [RFC4710] and specifies the payload type of the data\n      source of the
        communication sub-session RC_N as defined in\n      [RFC3551].\n   Receiver
        Payload Type: 8 bits - This parameter is defined in section\n      5.25 of
        [RFC4710] and specifies the receiver payload type of the\n      communication
        sub-session RC_N as defined in [RFC3551].\n   CPU Utilization: 8 bits - This
        parameter, defined in section 5.30 of\n      [RFC4710], represents the percentage
        of CPU used during session\n      RC_N from the last report until the time
        this RAQMON PDU was\n      generated.  The CPU Utilization is expressed in
        percents in the\n      range 0 to 100.  The value should indicate not only
        CPU\n      utilization associated to a session RC_N but also actual CPU\n
        \     Utilization, to indicate a snapshot of the CPU utilization of the\n
        \     host running the RDS while session RC_N in progress.\n   Memory Utilization:
        8 bits - This parameter, defined in section 5.31\n      of [RFC4710], represents
        the percentage of total memory used\n      during session RC_N up until the
        time this RAQMON PDU was\n      generated.  The memory utilization is expressed
        in percents 0 to\n      100.  The Memory Utilization value should indicate
        not only the\n      memory utilization associated to a session RC_N but the
        total\n      memory utilization, to indicate a snapshot of end-device memory\n
        \     utilization while session RC_N is in progress.\n   Session Setup Delay:
        16 bits - The Session (sub-session) Setup Delay\n      metric is defined in
        section 5.8 of [RFC4710] and expressed in\n      milliseconds.\n   Application
        Delay: 16 bits - The Application Delay is defined in\n      section 5.13 of
        [RFC4710] and is represented as an unsigned\n      integer expressed in milliseconds.\n
        \  IP Packet Delay Variation: 16 bits - The IP Packet Delay Variation is\n
        \     defined in section 5.15 of [RFC4710] and is represented as an\n      unsigned
        integer expressed in milliseconds.\n   Inter-Arrival Jitter: 16 bits - The
        Inter-Arrival Jitter is defined\n      in section 5.14 of [RFC4710] and is
        represented as an unsigned\n      integer expressed in milliseconds.\n   Packet
        Discard in Fraction: 8 bits - This parameter is defined in\n      section
        5.23 of [RFC4710] and is expressed as a fixed-point number\n      with the
        binary point at the left edge of the field.  (That is\n      equivalent to
        taking the integer part after multiplying the\n      discard fraction by 256.)
        \ This metric is defined to be the number\n      of packets discarded, divided
        by the total number of packets.\n   Packet Loss in Fraction: 8 bits - This
        parameter is defined in\n      section 5.21 of [RFC4710] and is expressed
        as a fixed-point\n      number, with the binary point at the left edge of
        the field.  The\n      metric is defined to be the number of packets lost
        divided by the\n      number of packets expected.  The value is calculated
        by dividing\n      the total number of packets lost (after the effects of
        applying\n      any error protection, such as Forward Error Correction (FEC))
        by\n      the total number of packets expected, multiplying the result of\n
        \     the division by 256, limiting the maximum value to 255 (to avoid\n      overflow),
        and taking the integer part.\n   padding: 0, 8, 16, or 24 bits - If the padding
        bit (P) is set, then\n      this field may be present.  The actual padding
        at the end of the\n      BASIC part of the PDU is 0, 8, 16, or 24 bits to
        make the length\n      of the BASIC part of the PDU a multiple of 32 bits.\n"
      title: 2.1.2.  The BASIC Part of the RAQMON Protocol Data Unit
    - contents:
      - "2.1.3.  APP Part of the RAQMON Protocol Data Unit\n   The APP part of the
        RAQMON PDU is intended to accommodate extensions\n   for new applications
        in a modular manner and without requiring a PDU\n   type value registration.\n
        \  Vendors may design and publish application-specific extensions.  Any\n
        \  RAQMON-compliant RRC MUST be able to recognize vendors' SMI\n   Enterprise
        Codes and MUST recognize the presence of application-\n   specific extensions
        identified by using Report Type fields.  As\n   represented in Figure 1, the
        Report Type and Application Length\n   fields are always located at a fixed
        offset relative to the start of\n   the extension fields.  There is no need
        for the RRC to understand the\n   semantics of the enterprise-specific parts
        of the PDU.\n   SMI Enterprise Code: 32 bits - Vendors and application developers\n
        \     should fill in appropriate SMI Enterprise IDs available at\n      http://www.iana.org/assignments/enterprise-numbers.
        \ A non-zero\n      SMI Enterprise Code indicates a vendor- or application-specific\n
        \     extension.\n      RAQMON PDUs are capable of carrying multiple Application
        Parts\n      within a PDU.\n   Report Type: 16 bits - Vendors and application
        developers should fill\n      in the appropriate report type within a specified
        SMI Enterprise\n      Code.  It is RECOMMENDED that vendors publish application-specific\n
        \     extensions and maintain such report types for better\n      interoperability.\n
        \  Length of the Application Part: 16 bits (unsigned integer) - The\n      length
        of the Application Part of the RAQMON PDU in 32-bit words\n      minus one,
        which includes the header of the Application Part.\n   Application-dependent
        data: variable length - Application/\n      vendor-dependent data is defined
        by the application developers.\n      It is interpreted by the vendor-specific
        application and not by\n      the RRC itself.  Its length must be a multiple
        of 32 bits and will\n      be padded if necessary.\n"
      title: 2.1.3.  APP Part of the RAQMON Protocol Data Unit
    - contents:
      - "2.1.4.  Byte Order, Alignment, and Time Format of RAQMON PDUs\n   All integer
        fields are carried in network byte order, that is, most\n   significant byte
        (octet) first.  This byte order is commonly known as\n   big-endian.  The
        transmission order is described in detail in\n   [RFC791].  Unless otherwise
        noted, numeric constants are in decimal\n   (base 10).\n   All header data
        is aligned to its natural length, i.e., 16-bit fields\n   are aligned on even
        offsets, 32-bit fields are aligned at offsets\n   divisible by four, etc.
        \ Octets designated as padding have the value\n   zero.\n"
      title: 2.1.4.  Byte Order, Alignment, and Time Format of RAQMON PDUs
    title: 2.1.  TCP as an RDS/RRC Network Transport Protocol
  - contents:
    - "2.2.  Securing RAQMON Session\n   The RAQMON session, initiated over TCP transport,
      between an RDS and\n   an RRC carries monitoring information from an RDS client
      to the RRC,\n   the collector.  The RRC distinguishes between clients based
      on\n   various identifiers used by the RDS to identify itself to the RRC\n   (Data
      Source Address and Data Source Name) and the RRC (Receiver's\n   Address and
      Receiver's Name).\n   In order to ensure integrity of the claimed identities
      of RDS and RRC\n   to each other, authentication services are required.\n   Subsequently,
      where protection from unauthorized modification and\n   unauthorized disclosure
      of RAQMON data in transit from RDS to RRC is\n   needed, data confidentiality
      and message integrity services will be\n   required.  In order to prevent monitoring-misinformation
      due to\n   session-recording and replay by unauthorized sources, replay\n   protection
      services may be required.\n   TLS provides, at the transport layer, the required
      authentication\n   services through the handshake protocol and subsequent data\n
      \  confidentiality, message integrity, and replay protection of the\n   application
      protocol using a ciphersuite negotiated during\n   authentication.\n   The RDS
      client authenticates the RRC in session.  The RRC optionally\n   authenticates
      the RDS.\n   0                   1                   2                   3\n
      \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |PDT = 1  |B|  T  |P|S|R|  RC   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                            DSRC                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  SMI Enterprise Code = 0      |Report Type =  |     RC_N      |\n   |                               |
      \       TLS_REQ|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \               Figure 2: RAQMON StartTLS Request - TLS_REQ\n   The protection
      of a RAQMON session starts with the RDS client's\n   StartTLS request upon successful
      establishment of the TCP session.\n   The RDS sends the StartTLS request by
      transmitting the TLS_REQ PDU as\n   in Figure 2.  This PDU is distinguished
      by TLS_REQ Report Type.\n   Following this request, the client MUST NOT send
      any PDUs on this\n   connection until it receives a StartTLS response.\n   Other
      fields of the PDU are as specified in Figure 1.\n   The flags field do not carry
      any significance and exist for\n   compatibility with the generic RAQMON PDU.
      \ The flags field in this\n   version MUST be ignored.\n   When a StartTLS request
      is made, the target server, RRC, MUST return\n   a RAQMON PDU containing a StartTLS
      response, TLS_RESP.  A RAQMON\n   TLS_RESP is defined as follows:\n   0                   1
      \                  2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
      6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |PDT = 1  |B|  T  |P|S|R|  RC   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                            DSRC                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  SMI Enterprise Code = 0      |Report Type =  |     Result    |\n   |                               |
      \      TLS_RESP|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              Figure 3: RAQMON StartTLS Response - TLS_RESP\n   The RRC responds
      to the StartTLS request by transmitting the TLS_RESP\n   PDU as in Figure 3.
      \ This PDU is distinguished by TLS_RESP Report\n   Type.\n   The Result field
      is an octet containing the result of the request.\n   This field can carry one
      of the following values:\n   +-------+------------------+----------------------------------------+\n
      \  | Value |     Mnemonic     |                 Result                 |\n   +-------+------------------+----------------------------------------+\n
      \  |   0   |        OK        |   Success.  The server is willing and  |\n   |
      \      |                  |         able to negotiate TLS.         |\n   |   1
      \  |      OP_ERR      |   Sequencing Error (e.g., TLS already  |\n   |       |
      \                 |              established).             |\n   |   2   |     PROTO_ERR
      \   |   TLS not supported or incorrect PDU   |\n   |       |                  |
      \                format.                |\n   |   3   |      UNAVAIL     |    TLS
      service problem or RRC server   |\n   |       |                  |               going
      down.              |\n   |   4   |     CONF_REQD    |    Confidentiality Service
      Required.   |\n   |       |                  |                                        |\n
      \  |   5   | STRONG_AUTH_REQD |      Strong Authentication Service     |\n   |
      \      |                  |                Required.               |\n   |   6
      \  |     REFERRAL     |   Referral to a RRC Server supporting  |\n   |       |
      \                 |                  TLS.                  |\n   +-------+------------------+----------------------------------------+\n
      \                                 Table 2\n   Other fields of the PDU are as
      specified in Figure 1.\n   The server MUST return OP_ERR if the client violates
      any of the\n   StartTLS operation sequencing requirements described in the section\n
      \  below.\n   If the server does not support TLS (whether by design or by current\n
      \  configuration), it MUST set the resultCode to PROTO_ERR or to\n   REFERRAL.
      \ The server MUST include an actual referral value in the\n   RAQMON REFER field
      if it returns a resultCode of referral.  The\n   client's current session is
      unaffected if the server does not support\n   TLS.  The client MAY proceed with
      RAQMON session, or it MAY close the\n   connection.\n   The server MUST return
      UNAVAIL if it supports TLS but cannot\n   establish a TLS connection for some
      reason, e.g., if the certificate\n   server not responding, if it cannot contact
      its TLS implementation,\n   or if the server is in process of shutting down.
      \ The client MAY\n   retry the StartTLS operation, MAY proceed with RAQMON session,
      or MAY\n   close the connection.\n"
    - contents:
      - "2.2.1.  Sequencing of the Start TLS Operation\n   This section describes
        the overall procedures clients and servers\n   MUST follow for TLS establishment.
        \ These procedures take into\n   consideration various aspects of the overall
        security of the RAQMON\n   connection including discovery of resulting security
        level.\n"
      - contents:
        - "2.2.1.1.  Requesting to Start TLS on a RAQMON Association\n   The client
          MAY send the StartTLS request at any time after\n   establishing an RAQMON
          (TCP) connection, except that in the following\n   cases the client MUST
          NOT send a StartTLS request:\n   o  if TLS is currently established on the
          connection, or\n   o  if RAQMON traffic is in progress on the connection.\n
          \  The result of violating any of these requirements is a Result of\n   OP_ERR,
          as described above in Table 2.\n   If the client did not establish a TLS
          connection before sending any\n   other requests, and the server requires
          the client to establish a TLS\n   connection before performing a particular
          request, the server MUST\n   reject that request with a CONF_REQD or STRONG_AUTH_REQD
          result.  The\n   client MAY send a Start TLS extended request, or it MAY
          choose to\n   close the connection.\n"
        title: 2.2.1.1.  Requesting to Start TLS on a RAQMON Association
      - contents:
        - "2.2.1.2.  Starting TLS\n   The server will return an extended response
          with the resultCode of\n   success if it is willing and able to negotiate
          TLS.  It will return\n   other resultCodes, documented above, if it is unable.\n
          \  In the successful case, the client, which has ceased to transfer\n   RAQMON
          PDUs on the connection, MUST either begin a TLS negotiation or\n   close
          the connection.  The client will send PDUs in the TLS Record\n   Protocol
          directly over the underlying transport connection to the\n   server to initiate
          TLS negotiation [TLS].\n"
        title: 2.2.1.2.  Starting TLS
      - contents:
        - "2.2.1.3.  TLS Version Negotiation\n   Negotiating the version of TLS or
          SSL to be used is a part of the TLS\n   Handshake Protocol, as documented
          in [TLS].  The reader is referred\n   to that document for details.\n"
        title: 2.2.1.3.  TLS Version Negotiation
      - contents:
        - "2.2.1.4.  Discovery of Resultant Security Level\n   After a TLS connection
          is established on a RAQMON connection, both\n   parties MUST individually
          decide whether or not to continue based on\n   the security assurance level
          achieved.  Ascertaining the TLS\n   connection's assurance level is implementation
          dependent and is\n   accomplished by communicating with one's respective
          local TLS\n   implementation.\n   If the client or server decides that the
          level of authentication or\n   confidentiality is not high enough for it
          to continue, it SHOULD\n   gracefully close the TLS connection immediately
          after the TLS\n   negotiation has completed Section 2.2.2.1.\n   The client
          MAY attempt to Start TLS again, MAY disconnect, or MAY\n   proceed to send
          RAQMON session data, if RRC policy permits.\n"
        title: 2.2.1.4.  Discovery of Resultant Security Level
      - contents:
        - "2.2.1.5.  Server Identity Check\n   The client MUST check its understanding
          of the server's hostname\n   against the server's identity as presented
          in the server's\n   Certificate message, in order to prevent man-in-the-middle
          attacks.\n   Matching is performed according to these rules:\n   o  The
          client MUST use the server dnsNAME in the subjectAltName field\n      to
          validate the server certificate presented.  The server dnsName\n      MUST
          be part of subjectAltName of the server.\n   o  Matching is case-insensitive.\n
          \  o  The \"*\" wildcard character is allowed.  If present, it applies\n
          \     only to the left-most name component.\n      For example, *.example.com
          would match a.example.com,\n      b.example.com, etc., but not example.com.
          \ If more than one\n      identity of a given type is present in the certificate
          (e.g., more\n      than one dNSName name), a match in any one of the set
          is\n      considered acceptable.\n   If the hostname does not match the
          dNSName-based identity in the\n   certificate per the above check, automated
          clients SHOULD close the\n   connection, returning and/or logging an error
          indicating that the\n   server's identity is suspect.\n   Beyond the server
          identity checks described in this section, clients\n   SHOULD be prepared
          to do further checking to ensure that the server\n   is authorized to provide
          the service it is observed to provide.  The\n   client MAY need to make
          use of local policy information.\n   We also refer readers to similar guidelines
          as applied for LDAP over\n   TLS [RFC4513].\n"
        title: 2.2.1.5.  Server Identity Check
      - contents:
        - "2.2.1.6.  Client Identity Check\n   Anonymous TLS authentication helps
          establish a TLS RAQMON session\n   that offers\n   o  server-authentication
          in course of TLS establishment and\n   o  confidentiality and replay protection
          of RAQMON traffic, but\n   o  no protection against man-in-the-middle attacks
          during session\n      establishment and\n   o  no protection from spoofing
          attacks by unauthorized clients.\n   The server MUST authenticate the RDS
          client when deployment is\n   susceptible to the above threats.  This is
          done by requiring client\n   authentication during TLS session establishment.\n
          \  In the TLS negotiation, the server MUST request a certificate.  The\n
          \  client will provide its certificate to the server and MUST perform a\n
          \  private-key-based encryption, proving it has the private key\n   associated
          with the certificate.\n   As deployments will require protection of sensitive
          data in transit,\n   the client and server MUST negotiate a ciphersuite
          that contains a\n   bulk encryption algorithm of appropriate strength.\n
          \  The server MUST verify that the client's certificate is valid.  The\n
          \  server will normally check that the certificate is issued by a known\n
          \  CA, and that none of the certificates on the client's certificate\n   chain
          are invalid or revoked.  There are several procedures by which\n   the server
          can perform these checks.\n   The server validates the certificate by the
          Distinguished Name of the\n   RDS client entity in the Subject field of
          the certificate.\n   A corresponding set of guidelines will apply to use
          of TLS-PSK modes\n   [TLS-PSK] using pre-shared keys instead of client certificates.\n"
        title: 2.2.1.6.  Client Identity Check
      - contents:
        - "2.2.1.7.  Refresh of Server Capabilities Information\n   The client MUST
          refresh any cached server capabilities information\n   upon TLS session
          establishment, such as prior RRC state related to a\n   previous RAQMON
          session based on another DSRC.  This is necessary to\n   protect against
          active-intermediary attacks, which may have altered\n   any server capabilities
          information retrieved prior to TLS\n   establishment.  The server MAY advertise
          different capabilities after\n   TLS establishment.\n"
        title: 2.2.1.7.  Refresh of Server Capabilities Information
      title: 2.2.1.  Sequencing of the Start TLS Operation
    - contents:
      - '2.2.2.  Closing a TLS Connection

        '
      - contents:
        - "2.2.2.1.  Graceful Closure\n   Either the client or server MAY terminate
          the TLS connection on an\n   RAQMON session by sending a TLS closure alert.
          \ This will leave the\n   RAQMON connection intact.\n   Before closing a
          TLS connection, the client MUST wait for any\n   outstanding RAQMON transmissions
          to complete.  This happens naturally\n   when the RAQMON client is single-threaded
          and synchronous.\n   After the initiator of a close has sent a closure alert,
          it MUST\n   discard any TLS messages until it has received an alert from
          the\n   other party.  It will cease to send TLS Record Protocol PDUs and,\n
          \  following the receipt of the alert, MAY send and receive RAQMON PDUs.\n
          \  The other party, if it receives a closure alert, MUST immediately\n   transmit
          a TLS closure alert.  It will subsequently cease to send TLS\n   Record
          Protocol PDUs and MAY send and receive RAQMON PDUs.\n"
        title: 2.2.2.1.  Graceful Closure
      - contents:
        - "2.2.2.2.  Abrupt Closure\n   Either the client or server MAY abruptly close
          the entire RAQMON\n   session and any TLS connection established on it by
          dropping the\n   underlying TCP connection.  It MAY be possible for RRC
          to send RDS a\n   disconnection notification, which allows the client to
          know that the\n   disconnection is not due to network failure.  However,
          this message\n   is not defined in this version.\n"
        title: 2.2.2.2.  Abrupt Closure
      title: 2.2.2.  Closing a TLS Connection
    title: 2.2.  Securing RAQMON Session
  - contents:
    - "2.3.  SNMP Notifications as an RDS/RRC Network Transport Protocol\n   It was
      an inherent objective of the RAQMON Framework to re-use\n   existing application-level
      transport protocols to maximize the usage\n   of existing installations as well
      as to avoid transport-protocol-\n   level complexities in the design process.
      \ Choice of SNMP as a means\n   to transport RAQMON PDU was motivated by the
      intent of using existing\n   installed devices implementing SNMP agents as RAQMON
      Data Sources\n   (RDSs).\n   There are some potential problems with the usage
      of SNMP as a\n   transport mapping protocol:\n   o  The potential of congestion
      is higher than with the TCP transport,\n      because of the usage of UDP at
      the transport layer.\n   o  The encoding of the information is less efficient,
      and this\n      results in bigger message size, which again may negatively impact\n
      \     congestion conditions and memory size requirements in the devices.\n   In
      order to avoid these potential problems, the following\n   recommendations are
      made:\n   o  Usage of the TCP transport is RECOMMENDED in deployment over the\n
      \     SNMP transport wherever available for a pair of RDS/RRC.\n   o  The usage
      of Inform PDUs is RECOMMENDED.\n   o  The usage of Traps PDU is NOT RECOMMENDED.\n
      \  o  It is RECOMMENDED that information carried by notifications be\n      maintained
      within the limits of the MTU size in order to avoid\n      fragmentation.\n
      \  If SNMP is chosen as a mechanism to transport RAQMON PDUs, the\n   following
      specification applies to RAQMON-related usage of SNMP:\n   o  RDSs implement
      the capability of embedding RAQMON parameters in\n      SNMP Notifications,
      re-using well-known SNMP mechanisms to report\n      RAQMON Statistics.  The
      RAQMON RDS MIB module, as specified in\n      2.1.1, MUST be used in order to
      map the RAQMON PDUs onto the SNMP\n      Notifications transport.\n   o  Since
      RDSs are not computationally rich, and in order to keep the\n      RDS realization
      as lightweight as possible, RDSs MAY fail to\n      respond to SNMP requests
      like GET, SET, etc., with the exception\n      of the GET and SET commands required
      to implement the User-Based\n      Security Model (USM) defined by [RFC3414].\n
      \  o  In order to meet congestion safety requirements, SNMP INFORM PDUs\n      SHOULD
      be used.  In case INFORM PDUs are used, RDSs MUST process\n      the SNMP INFORM
      responses from RRCs and MUST serialize the PDU\n      transmission rate, i.e.,
      limit the number of PDUS sent in a\n      specific time interval.\n   o  Standard
      UDP port 162 SHOULD be used for SNMP Notifications.\n"
    - contents:
      - "2.3.1.  Encoding RAQMON Using the RAQMON RDS MIB Module\n   The RAQMON RDS
        MIB module is used to map RAQMON PDUs onto SNMP\n   Notifications for transport
        purposes.  The MIB module defines the\n   objects needed for mapping the BASIC
        part of RAQMON PDU, defined in\n   [RFC4710], as well as the Notifications
        themselves.  In order to\n   incorporate any application-specific extensions
        in the Application\n   (APP) part of RAQMON PDU, as defined in [RFC4710],
        additional\n   variable bindings MAY be included in RAQMON notifications as\n
        \  described in the MIB module.\n   For a detailed overview of the documents
        that describe the current\n   Internet-Standard Management Framework, please
        refer to section 7 of\n   [RFC3410].\n   Managed objects are accessed via
        a virtual information store, termed\n   the Management Information Base or
        MIB.  MIB objects are generally\n   accessed through the Simple Network Management
        Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
        in the\n   Structure of Management Information (SMI).  This memo specifies
        a MIB\n   module that is compliant to the SMIv2, which is described in STD
        58,\n   [RFC2578], STD 58, [RFC2579] and STD 58, [RFC2580].\n   The following
        MIB module IMPORTS definitions from the following:\n            SNMPv2-SMI
        [RFC2578]\n            SNMPv2-TC [RFC2579]\n            SNMPv2-CONF [RFC2580]\n
        \           RMON-MIB [RFC2819]\n            DIFFSERV-DSCP-TC [RFC3289]\n            SNMP-FRAMEWORK-MIB
        [RFC3411]\n            INET-ADDRESS-MIB [RFC4001]\n   It also uses REFERENCE
        clauses to refer to [RFC4710].\n   RAQMON-RDS-MIB DEFINITIONS ::= BEGIN\n
        \     IMPORTS\n          MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,\n
        \         Counter32, Unsigned32\n              FROM SNMPv2-SMI\n          DateAndTime\n
        \             FROM SNMPv2-TC\n          rmon\n              FROM RMON-MIB\n
        \         SnmpAdminString\n              FROM SNMP-FRAMEWORK-MIB\n          InetAddressType,
        InetAddress, InetPortNumber\n              FROM INET-ADDRESS-MIB\n          Dscp\n
        \             FROM DIFFSERV-DSCP-TC\n          MODULE-COMPLIANCE, OBJECT-GROUP,
        NOTIFICATION-GROUP\n              FROM SNMPv2-CONF;\n      raqmonDsMIB MODULE-IDENTITY\n
        \         LAST-UPDATED \"200610100000Z\"      -- October 10, 2006\n          ORGANIZATION
        \"RMON Working Group\"\n          CONTACT-INFO\n              \"WG EMail:
        rmonmib@ietf.org\n               Subscribe: rmonmib-request@ietf.org\n               MIB
        Editor:\n               Eugene Golovinsky\n               Postal: BMC Software,
        Inc.\n                       2101 CityWest Boulevard,\n                       Houston,
        TX, 77094\n                       USA\n               Tel:    +713-918-1816\n
        \              Email:  egolovin@bmc.com\n              \"\n          DESCRIPTION\n
        \             \"This is the RAQMON Data Source notification MIB Module.\n
        \              It provides a mapping of RAQMON PDUs to SNMP\n               notifications.\n
        \              Ds stands for data source.\n               Note that all of
        the object types defined in this module\n               are accessible-for-notify
        and would consequently not be\n               available to a browser using
        simple Get, GetNext, or\n               GetBulk requests.\n               Copyright
        (c) The Internet Society (2006).\n               This version of this MIB
        module is part of RFC 4712;\n               See the RFC itself for full legal
        notices.\"\n          REVISION      \"200610100000Z\"     -- October 10, 2006\n
        \         DESCRIPTION\n              \"Initial version, published as RFC 4712.\"\n
        \                ::= { rmon 32 }\n   -- This OID allocation conforms to [RFC3737]\n
        \     raqmonDsNotifications OBJECT IDENTIFIER ::= { raqmonDsMIB 0 }\n      raqmonDsMIBObjects
        OBJECT IDENTIFIER ::= { raqmonDsMIB 1 }\n      raqmonDsConformance OBJECT
        IDENTIFIER ::= { raqmonDsMIB 2 }\n      raqmonDsNotificationTable OBJECT-TYPE\n
        \         SYNTAX SEQUENCE OF RaqmonDsNotificationEntry\n          MAX-ACCESS
        not-accessible\n          STATUS     current\n          DESCRIPTION\n              \"This
        conceptual table provides the SNMP mapping of\n               the RAQMON BASIC
        PDU.  It is indexed by the RAQMON\n               Data Source, sub-session,
        and address of the peer\n               entity.\n               Note that
        there is no concern about the indexation of\n               this table exceeding
        the limits defined by RFC 2578\n               Section 3.5.  According to
        [RFC4710], Section 5.1,\n               only IPv4 and IPv6 addresses can be
        reported as\n               participant addresses.\"\n          ::= { raqmonDsMIBObjects
        1 }\n      raqmonDsNotificationEntry OBJECT-TYPE\n          SYNTAX     RaqmonDsNotificationEntry\n
        \         MAX-ACCESS not-accessible\n          STATUS     current\n          DESCRIPTION\n
        \             \"The entry (row) is not retrievable and is not kept by\n               RDSs.
        \ It serves data organization purposes only.\"\n          INDEX { raqmonDsDSRC,
        raqmonDsRCN, raqmonDsPeerAddrType,\n                  raqmonDsPeerAddr }\n
        \         ::= { raqmonDsNotificationTable 1 }\n      RaqmonDsNotificationEntry
        ::= SEQUENCE {\n              raqmonDsDSRC                      Unsigned32,\n
        \             raqmonDsRCN                       Unsigned32,\n              raqmonDsPeerAddrType
        \             InetAddressType,\n              raqmonDsPeerAddr                  InetAddress,\n
        \             raqmonDsAppName                   SnmpAdminString,\n              raqmonDsDataSourceDevicePort
        \     InetPortNumber,\n              raqmonDsReceiverDevicePort        InetPortNumber,\n
        \             raqmonDsSessionSetupDateTime      DateAndTime,\n              raqmonDsSessionSetupDelay
        \        Unsigned32,\n              raqmonDsSessionDuration           Unsigned32,\n
        \             raqmonDsSessionSetupStatus        SnmpAdminString,\n              raqmonDsRoundTripEndToEndNetDelay
        Unsigned32,\n              raqmonDsOneWayEndToEndNetDelay    Unsigned32,\n
        \             raqmonDsApplicationDelay          Unsigned32,\n              raqmonDsInterArrivalJitter
        \       Unsigned32,\n              raqmonDsIPPacketDelayVariation    Unsigned32,\n
        \             raqmonDsTotalPacketsReceived      Counter32,\n              raqmonDsTotalPacketsSent
        \         Counter32,\n              raqmonDsTotalOctetsReceived       Counter32,\n
        \             raqmonDsTotalOctetsSent           Counter32,\n              raqmonDsCumulativePacketLoss
        \     Counter32,\n              raqmonDsPacketLossFraction        Unsigned32,\n
        \             raqmonDsCumulativeDiscards        Counter32,\n              raqmonDsDiscardsFraction
        \         Unsigned32,\n              raqmonDsSourcePayloadType         Unsigned32,\n
        \             raqmonDsReceiverPayloadType       Unsigned32,\n              raqmonDsSourceLayer2Priority
        \     Unsigned32,\n              raqmonDsSourceDscp                Dscp,\n
        \             raqmonDsDestinationLayer2Priority Unsigned32,\n              raqmonDsDestinationDscp
        \          Dscp,\n              raqmonDsCpuUtilization            Unsigned32,\n
        \             raqmonDsMemoryUtilization         Unsigned32 }\n      raqmonDsDSRC
        OBJECT-TYPE\n          SYNTAX     Unsigned32\n          MAX-ACCESS not-accessible\n
        \         STATUS     current\n          DESCRIPTION\n              \"Data
        Source identifier represents a unique session\n               descriptor that
        points to a specific session\n               between communicating entities.
        \ Identifiers unique for\n               sessions conducted between two entities
        are\n               generated by the communicating entities.  Zero is a\n
        \              valid value, with no special semantics.\"\n          ::= {
        raqmonDsNotificationEntry 1 }\n      raqmonDsRCN OBJECT-TYPE\n           SYNTAX
        \     Unsigned32 (0..15)\n           MAX-ACCESS  not-accessible\n           STATUS
        \     current\n           DESCRIPTION\n               \"The Record Count Number
        indicates a sub-session\n                within a communication session.  A
        maximum number of 16\n                sub-sessions are supported; this limitation
        is\n                dictated by reasons of compatibility with other\n                transport
        protocols.\"\n           ::= { raqmonDsNotificationEntry 2 }\n      raqmonDsPeerAddrType
        OBJECT-TYPE\n          SYNTAX InetAddressType\n          MAX-ACCESS not-accessible\n
        \         STATUS current\n          DESCRIPTION\n              \"The type
        of the Internet address of the peer participant\n               for this session.\"\n
        \         REFERENCE\n              \"Section 5.2 of [RFC4710]\"\n          ::=
        { raqmonDsNotificationEntry 3 }\n      raqmonDsPeerAddr OBJECT-TYPE\n          SYNTAX
        InetAddress\n          MAX-ACCESS not-accessible\n          STATUS current\n
        \         DESCRIPTION\n              \"The Internet Address of the peer participant
        for this\n               session.\"\n          REFERENCE\n              \"Section
        5.2 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 4 }\n      raqmonDsAppName
        \ OBJECT-TYPE\n          SYNTAX     SnmpAdminString\n          MAX-ACCESS
        accessible-for-notify\n          STATUS     current\n          DESCRIPTION\n
        \             \"This is a text string giving the name and possibly the\n               version
        of the application associated with that session,\n               e.g., 'XYZ
        VoIP Agent 1.2'.\"\n          REFERENCE\n              \"Section 5.28 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry 5 }\n      raqmonDsDataSourceDevicePort
        OBJECT-TYPE\n          SYNTAX     InetPortNumber\n          MAX-ACCESS accessible-for-notify\n
        \         STATUS     current\n          DESCRIPTION\n              \"The port
        number from which data for this session was sent\n               by the Data
        Source device.\"\n          REFERENCE\n              \"Section 5.5 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry 6 }\n      raqmonDsReceiverDevicePort
        OBJECT-TYPE\n          SYNTAX     InetPortNumber\n          MAX-ACCESS accessible-for-notify\n
        \         STATUS     current\n          DESCRIPTION\n              \"The port
        number where the data for this session was\n               received.\"\n          REFERENCE\n
        \             \"Section 5.6 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        7 }\n      raqmonDsSessionSetupDateTime OBJECT-TYPE\n          SYNTAX     DateAndTime\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The time when session was initiated.\"\n
        \         REFERENCE\n              \"Section 5.7 of [RFC4710]\"\n      ::=
        { raqmonDsNotificationEntry 8 }\n      raqmonDsSessionSetupDelay OBJECT-TYPE\n
        \         SYNTAX     Unsigned32 (0..65535)\n          UNITS      \"milliseconds\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"Session setup time.\"\n          REFERENCE\n
        \             \"Section 5.8 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        9 }\n      raqmonDsSessionDuration OBJECT-TYPE\n          SYNTAX     Unsigned32\n
        \         UNITS      \"seconds\"\n          MAX-ACCESS accessible-for-notify\n
        \         STATUS     current\n          DESCRIPTION\n              \"Session
        duration, including setup time.  The SYNTAX of\n               this object
        allows expression of the duration of sessions\n               that do not
        exceed 4660 hours and 20 minutes.\"\n          REFERENCE\n              \"Section
        5.9 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 10 }\n      raqmonDsSessionSetupStatus
        OBJECT-TYPE\n          SYNTAX     SnmpAdminString\n          MAX-ACCESS accessible-for-notify\n
        \         STATUS     current\n          DESCRIPTION\n              \"Describes
        appropriate communication session states, e.g.,\n               Call Established
        successfully, RSVP reservation\n               failed, etc.\"\n          REFERENCE\n
        \             \"Section 5.10 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        11 }\n      raqmonDsRoundTripEndToEndNetDelay OBJECT-TYPE\n          SYNTAX
        \    Unsigned32\n          UNITS      \"milliseconds\"\n          MAX-ACCESS
        accessible-for-notify\n          STATUS     current\n          DESCRIPTION\n
        \             \"Most recent available information about the\n               round-trip
        end-to-end network delay.\"\n          REFERENCE\n              \"Section
        5.11 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry  12}\n      raqmonDsOneWayEndToEndNetDelay
        OBJECT-TYPE\n          SYNTAX     Unsigned32\n          UNITS      \"milliseconds\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"Most recent available information about
        the\n               one-way end-to-end network delay.\"\n          REFERENCE\n
        \             \"Section 5.12 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        \ 13}\n      raqmonDsApplicationDelay OBJECT-TYPE\n          SYNTAX     Unsigned32
        \ (0..65535)\n          UNITS      \"milliseconds\"\n          MAX-ACCESS
        accessible-for-notify\n          STATUS     current\n          DESCRIPTION\n
        \             \"Most recent available information about the\n               application
        delay.\"\n          REFERENCE\n              \"Section 5.13 of [RFC4710\"\n
        \         ::= { raqmonDsNotificationEntry  14}\n      raqmonDsInterArrivalJitter
        OBJECT-TYPE\n          SYNTAX     Unsigned32  (0..65535)\n          UNITS
        \     \"milliseconds\"\n          MAX-ACCESS accessible-for-notify\n          STATUS
        \    current\n          DESCRIPTION\n              \"An estimate of the inter-arrival
        jitter.\"\n          REFERENCE\n              \"Section 5.14 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry  15}\n      raqmonDsIPPacketDelayVariation
        OBJECT-TYPE\n          SYNTAX     Unsigned32  (0..65535)\n          UNITS
        \     \"milliseconds\"\n          MAX-ACCESS accessible-for-notify\n          STATUS
        \    current\n          DESCRIPTION\n              \"An estimate of the inter-arrival
        delay variation.\"\n          REFERENCE\n              \"Section 5.15 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry  16}\n      raqmonDsTotalPacketsReceived
        OBJECT-TYPE\n          SYNTAX     Counter32\n          UNITS     \"packets\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The number of packets transmitted within
        a communication\n               session by the receiver since the start of
        the session.\"\n          REFERENCE\n              \"Section 5.16 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry 17 }\n      raqmonDsTotalPacketsSent
        OBJECT-TYPE\n          SYNTAX     Counter32\n          UNITS     \"packets\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The number of packets transmitted within
        a communication\n               session by the sender since the start of the
        session.\"\n          REFERENCE\n              \"Section 5.17 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry 18 }\n      raqmonDsTotalOctetsReceived
        OBJECT-TYPE\n          SYNTAX     Counter32\n          UNITS      \"octets\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The total number of payload octets
        (i.e., not including\n               header or padding octets) transmitted
        in packets by the\n               receiver within a communication session
        since the start\n               of the session.\"\n          REFERENCE\n              \"Section
        5.18 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 19 }\n      raqmonDsTotalOctetsSent
        OBJECT-TYPE\n          SYNTAX     Counter32\n          UNITS      \"octets\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The number of payload octets (i.e.,
        not including headers\n               or padding) transmitted in packets by
        the sender within\n               a communication sub-session since the start
        of the\n               session.\"\n          REFERENCE\n              \"Section
        5.19 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 20 }\n      raqmonDsCumulativePacketLoss
        OBJECT-TYPE\n          SYNTAX     Counter32\n          UNITS      \"packets\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The number of packets from this session
        whose loss\n               had been detected since the start of the session.\"\n
        \         REFERENCE\n              \"Section 5.20 of [RFC4710]\"\n          ::=
        { raqmonDsNotificationEntry 21 }\n      raqmonDsPacketLossFraction OBJECT-TYPE\n
        \         SYNTAX     Unsigned32 (0..100)\n          UNITS      \"percentage
        of packets sent\"\n          MAX-ACCESS accessible-for-notify\n          STATUS
        \    current\n          DESCRIPTION\n              \"The percentage of lost
        packets with respect to the\n               overall packets sent.  This is
        defined to be 100 times\n               the number of packets lost divided
        by the number of\n               packets expected.\"\n          REFERENCE\n
        \             \"Section 5.21 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        22 }\n      raqmonDsCumulativeDiscards OBJECT-TYPE\n          SYNTAX     Counter32\n
        \         UNITS      \"packets\"\n          MAX-ACCESS accessible-for-notify\n
        \         STATUS     current\n          DESCRIPTION\n              \"The number
        of packet discards detected since the\n               start of the session.\"\n
        \         REFERENCE\n              \"Section 5.22 of [RFC4710]\"\n          ::=
        { raqmonDsNotificationEntry 23 }\n      raqmonDsDiscardsFraction OBJECT-TYPE\n
        \         SYNTAX     Unsigned32 (0..100)\n          UNITS      \"percentage
        of packets sent\"\n          MAX-ACCESS accessible-for-notify\n          STATUS
        \    current\n          DESCRIPTION\n              \"The percentage of discards
        with respect to the overall\n               packets sent.  This is defined
        to be 100 times the number\n               of discards divided by the number
        of packets expected.\"\n          REFERENCE\n              \"Section 5.23
        of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 24 }\n      raqmonDsSourcePayloadType
        OBJECT-TYPE\n          SYNTAX     Unsigned32 (0..127)\n          MAX-ACCESS
        accessible-for-notify\n          STATUS     current\n          DESCRIPTION\n
        \             \"The payload type of the packet sent by this RDS.\"\n          REFERENCE\n
        \             \"RFC 1890, Section 5.24 of [RFC4710] \"\n          ::= { raqmonDsNotificationEntry
        25 }\n      raqmonDsReceiverPayloadType OBJECT-TYPE\n          SYNTAX     Unsigned32
        (0..127)\n          MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"The payload type of the packet received
        by this RDS.\"\n          REFERENCE\n              \"RFC 1890, Section 5.25
        of [RFC4710] \"\n      ::= { raqmonDsNotificationEntry 26 }\n      raqmonDsSourceLayer2Priority
        OBJECT-TYPE\n          SYNTAX     Unsigned32 (0..7)\n          MAX-ACCESS
        accessible-for-notify\n          STATUS     current\n          DESCRIPTION\n
        \             \"Source Layer 2 priority used by the data source to send\n
        \              packets to the receiver by this data source during this\n               communication
        session.\"\n          REFERENCE\n              \"Section 5.26 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry 27 }\n      raqmonDsSourceDscp OBJECT-TYPE\n
        \         SYNTAX     Dscp\n          MAX-ACCESS accessible-for-notify\n          STATUS
        \    current\n          DESCRIPTION\n              \"Layer 3 TOS/DSCP values
        used by the Data Source to\n               prioritize traffic sent.\"\n          REFERENCE\n
        \             \"Section 5.27 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        28 }\n      raqmonDsDestinationLayer2Priority OBJECT-TYPE\n          SYNTAX
        \    Unsigned32 (0..7)\n          MAX-ACCESS accessible-for-notify\n          STATUS
        \    current\n          DESCRIPTION\n              \"Destination Layer 2 priority.
        \ This is the priority used\n               by the peer communicating entity
        to send packets to the\n               data source.\"\n          REFERENCE\n
        \             \"Section 5.28 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry
        29 }\n      raqmonDsDestinationDscp OBJECT-TYPE\n          SYNTAX     Dscp\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"Layer 3 TOS/DSCP values used by the\n
        \              peer communicating entity to prioritize traffic\n               sent
        to the source.\"\n          REFERENCE\n              \"Section 5.29 of [RFC4710]\"\n
        \         ::= { raqmonDsNotificationEntry 30 }\n      raqmonDsCpuUtilization
        OBJECT-TYPE\n          SYNTAX     Unsigned32 (0..100)\n          UNITS      \"percent\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"Latest available information about
        the total CPU\n               utilization.\"\n          REFERENCE\n              \"Section
        5.30 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 31 }\n      raqmonDsMemoryUtilization
        OBJECT-TYPE\n          SYNTAX     Unsigned32 (0..100)\n          UNITS      \"percent\"\n
        \         MAX-ACCESS accessible-for-notify\n          STATUS     current\n
        \         DESCRIPTION\n              \"Latest available information about
        the total memory\n               utilization.\"\n          REFERENCE\n              \"Section
        5.31 of [RFC4710]\"\n          ::= { raqmonDsNotificationEntry 32 }\n      --
        definitions of the notifications\n      --\n      -- raqmonDsAppName is the
        only object that MUST be sent by an\n      -- RDS every time the static notification
        is generated.\n      -- raqmonDsTotalPacketsReceived is the only object that
        MUST be\n      -- sent by an RD every time the dynamic notification is generated.\n
        \     -- Other objects from the raqmonDsNotificationTable may be\n      --
        included in the variable binding list.  Specifically, a raqmon\n      -- notification
        will include MIB objects that provide information\n      -- about metrics
        that characterize the application session\n         raqmonDsStaticNotification
        NOTIFICATION-TYPE\n          OBJECTS { raqmonDsAppName }\n          STATUS
        current\n          DESCRIPTION\n              \"This notification maps the
        static parameters in the\n               BASIC RAQMON PDU onto an SNMP transport.\n
        \              This notification is expected to be sent once per\n               session,
        or when a new sub-session is initiated.\n               The following objects
        MAY be carried by the\n               raqmonDsStaticNotification:\n               raqmonDsDataSourceDevicePort,\n
        \              raqmonDsReceiverDevicePort,\n               raqmonDsSessionSetupDateTime,\n
        \              raqmonDsSessionSetupDelay,\n               raqmonDsSessionDuration,\n
        \              raqmonDsSourcePayloadType,\n               raqmonDsReceiverPayloadType,\n
        \              raqmonDsSourceLayer2Priority,\n               raqmonDsSourceDscp,\n
        \              raqmonDsDestinationLayer2Priority,\n               raqmonDsDestinationDscp\n
        \              It is RECOMMENDED to keep the size of a notification\n               within
        the MTU size limits in order to avoid\n               fragmentation.\"\n          ::=
        { raqmonDsNotifications  1 }\n      raqmonDsDynamicNotification NOTIFICATION-TYPE\n
        \         OBJECTS { raqmonDsTotalPacketsReceived }\n          STATUS current\n
        \         DESCRIPTION\n              \"This notification maps the dynamic
        parameters in the\n               BASIC RAQMON PDU onto an SNMP transport.\n
        \              The following objects MAY be carried by the\n               raqmonDsDynamicNotification:\n
        \              raqmonDsRoundTripEndToEndNetDelay,\n               raqmonDsOneWayEndToEndNetDelay,\n
        \              raqmonDsApplicationDelay,\n               raqmonDsInterArrivalJitter,\n
        \              raqmonDsIPPacketDelayVariation,\n               raqmonDsTotalPacketsSent,\n
        \              raqmonDsTotalOctetsReceived,\n               raqmonDsTotalOctetsSent,\n
        \              raqmonDsCumulativePacketLoss,\n               raqmonDsPacketLossFraction,\n
        \              raqmonDsCumulativeDiscards,\n               raqmonDsDiscardsFraction,\n
        \              raqmonDsCpuUtilization,\n               raqmonDsMemoryUtilization\n
        \              It is RECOMMENDED to keep the size of a notification\n               within
        the MTU size limits in order to avoid\n               fragmentation.\"\n          ::=
        { raqmonDsNotifications  2 }\n      raqmonDsByeNotification NOTIFICATION-TYPE\n
        \         OBJECTS { raqmonDsAppName }\n          STATUS current\n          DESCRIPTION\n
        \             \"The BYE Notification.  This Notification is the\n               equivalent
        of the RAQMON NULL PDU, which signals the\n               end of a RAQMON
        session.\"\n          ::= { raqmonDsNotifications  3 }\n      --\n      --
        conformance information\n      raqmonDsCompliance OBJECT IDENTIFIER ::=\n
        \                                          { raqmonDsConformance 1 }\n      raqmonDsGroups
        OBJECT IDENTIFIER ::= { raqmonDsConformance 2 }\n   raqmonDsBasicCompliance
        MODULE-COMPLIANCE\n           STATUS current\n           DESCRIPTION\n              \"The
        compliance statement for SNMP entities that\n               implement this
        MIB module.\n               There are a number of INDEX objects that cannot
        be\n               represented in the form of OBJECT clauses in SMIv2, but\n
        \              for which we have the following compliance requirements,\n
        \              expressed in OBJECT clause form in this description\n               clause:\n
        \              -- OBJECT      raqmonDsPeerAddrType\n               -- SYNTAX
        \     InetAddressType { ipv4(1), ipv6(2) }\n               -- DESCRIPTION\n
        \              --     This MIB requires support for only global IPv4\n               --
        \    and IPv6 address types.\n               --\n               -- OBJECT
        \     raqmonDsPeerAddr\n               -- SYNTAX      InetAddress (SIZE(4|16))\n
        \              -- DESCRIPTION\n               --     This MIB requires support
        for only global IPv4\n               --     and IPv6 address types.\n               --\n
        \             \"\n           MODULE  -- this module\n               MANDATORY-GROUPS
        { raqmonDsNotificationGroup,\n                                  raqmonDsPayloadGroup
        }\n           ::= { raqmonDsCompliance 1 }\n      raqmonDsNotificationGroup
        NOTIFICATION-GROUP\n          NOTIFICATIONS { raqmonDsStaticNotification,\n
        \                         raqmonDsDynamicNotification,\n                          raqmonDsByeNotification
        }\n          STATUS current\n          DESCRIPTION\n              \"Standard
        RAQMON Data Source Notification group.\"\n          ::= { raqmonDsGroups 1
        }\n      raqmonDsPayloadGroup OBJECT-GROUP\n          OBJECTS { raqmonDsAppName,\n
        \                   raqmonDsDataSourceDevicePort,\n                    raqmonDsReceiverDevicePort,\n
        \                   raqmonDsSessionSetupDateTime,\n                    raqmonDsSessionSetupDelay,\n
        \                   raqmonDsSessionDuration,\n                    raqmonDsSessionSetupStatus,\n
        \                   raqmonDsRoundTripEndToEndNetDelay,\n                    raqmonDsOneWayEndToEndNetDelay,\n
        \                   raqmonDsApplicationDelay,\n                    raqmonDsInterArrivalJitter,\n
        \                   raqmonDsIPPacketDelayVariation,\n                    raqmonDsTotalPacketsReceived,\n
        \                   raqmonDsTotalPacketsSent,\n                    raqmonDsTotalOctetsReceived,\n
        \                   raqmonDsTotalOctetsSent,\n                    raqmonDsCumulativePacketLoss,\n
        \                   raqmonDsPacketLossFraction,\n                    raqmonDsCumulativeDiscards,\n
        \                   raqmonDsDiscardsFraction,\n                    raqmonDsSourcePayloadType,\n
        \                   raqmonDsReceiverPayloadType,\n                    raqmonDsSourceLayer2Priority,\n
        \                   raqmonDsSourceDscp,\n                    raqmonDsDestinationLayer2Priority,\n
        \                   raqmonDsDestinationDscp,\n                    raqmonDsCpuUtilization,\n
        \                   raqmonDsMemoryUtilization }\n          STATUS current\n
        \         DESCRIPTION\n              \"Standard RAQMON Data Source payload
        MIB objects group.\"\n          ::= { raqmonDsGroups 2 }\n      END\n"
      title: 2.3.1.  Encoding RAQMON Using the RAQMON RDS MIB Module
    title: 2.3.  SNMP Notifications as an RDS/RRC Network Transport Protocol
  title: 2.  Transporting RAQMON Protocol Data Units
- contents:
  - "3.  IANA Considerations\n   Applications using the RAQMON Framework require a
    single fixed port.\n   Port number 7744 is registered with IANA for use as the
    default port\n   for RAQMON PDUs over TCP.  Hosts that run multiple applications
    may\n   use this port as an indication to have used RAQMON or provision a\n   separate
    TCP port as part of provisioning RAQMON RDS and RAQMON\n   Collector.\n   The
    particular port number was chosen to lie in the range above 5000\n   to accommodate
    port number allocation practice within the Unix\n   operating system, where privileged
    processes can only use port\n   numbers below 1024 and port numbers between 1024
    and 5000 are\n   automatically assigned by the operating systems.\n   The OID
    assignment for the raqmonDsMIB MODULE-IDENTITY is made\n   according to [RFC3737],
    and there is no need for any IANA action on\n   this respect.\n"
  title: 3.  IANA Considerations
- contents:
  - "4.  Congestion-Safe RAQMON Operation\n   As outlined in earlier sections, the
    TCP congestion control mechanism\n   provides inherent congestion safety features
    when TCP is implemented\n   as transport to carry RAQMON PDU.\n   To ensure congestion
    safety, clearly the best thing to do is to use a\n   congestion-safe transport
    protocol such as TCP.  If this is not\n   feasible, it may be necessary to fall
    back to UDP since SNMP over UDP\n   is a widely deployed transport protocol.\n
    \  When SNMP is chosen as RAQMON PDU Transport, implementers MUST follow\n   section
    3 of [RFC4710], which outlines measures that MUST be taken to\n   use RAQMON in
    a congestion-safe manner.  Congestion safety\n   requirements in section 3 of
    [RFC4710] would ensure that a RAQMON\n   implementation using SNMP over UDP does
    not lead to congestion under\n   heavy network load.\n"
  title: 4.  Congestion-Safe RAQMON Operation
- contents:
  - "5.  Acknowledgements\n   The authors would like to thank Bill Walker and Joseph
    Mastroguilio\n   from Avaya and Bin Hu from Motorola for their discussions.  The\n
    \  authors would also like to extend special thanks to Randy Presuhn,\n   who
    reviewed this document for spelling and formatting purposes, and\n   who provided
    a deep review of the technical content.  We also would\n   like to thank Bert
    Wijnen for the permanent coaching during the\n   evolution of this document and
    the detailed review of its final\n   versions.  The Security Considerations section
    was reviewed by Sam\n   Hartman and Kurt D. Zeilenga and almost completely re-written
    by\n   Mahalingam Mani.\n"
  title: 5.  Acknowledgements
- contents:
  - "6.  Security Considerations\n   [RFC4710] outlines a threat model associated
    with RAQMON and security\n   considerations to be taken into account in the RAQMON
    specification\n   to mitigate against those threats.  It is imperative that RAQMON
    PDU\n   implementations be able to provide the following protection\n   mechanisms
    in order to attain end-to-end security:\n   1.  Authentication: The RRC SHOULD
    be able to verify that a RAQMON\n       report was originated by the RDS claiming
    to have sent it.  At\n       minimum, an RDS/RRC pair MUST use a digest-based
    authentication\n       procedure to authenticate, like the one defined in [RFC1321].\n
    \  2.  Privacy: RAQMON information includes identification of the\n       parties
    participating in a communication session.  RAQMON\n       deployments SHOULD be
    able to provide protection from\n       eavesdropping, and to prevent an unauthorized
    third party from\n       gathering potentially sensitive information.  This can
    be\n       achieved by using secure transport protocols supporting\n       confidentiality
    based on encryption technologies such as DES\n       (Data Encryption Standard),
    [3DES], and AES (Advanced Encryption\n       Standard) [AES].\n   3.  Protection
    from DoS attacks directed at the RRC: RDSs send RAQMON\n       reports as a side
    effect of external events (for example, receipt\n       of a phone call).  An
    attacker can try to overwhelm the RRC (or\n       the network) by initiating a
    large number of events in order to\n       swamp the RRC with excessive numbers
    of RAQMON PDUs.\n       To prevent DoS attacks against the RRC, the RDS will send
    the\n       first report for a session only after the session has been\n       established,
    so that the session set-up process is not affected.\n   4.  NAT and Firewall Friendly
    Design: The presence of IP addresses\n       and TCP/UDP port information in RAQMON
    PDUs may be NAT-\n       unfriendly.  Where NAT-friendliness is a requirement,
    the RDS MAY\n       omit IP address information from the RAQMON PDU.  Another
    way to\n       avoid this problem is by using NAT-Aware Application Layer\n       Gateways
    (ALGs) to ensure that correct IP addresses appear in\n       RAQMON PDUs.\n   For
    the usage of TCP, TLS MUST be used to provide transport layer\n   security.  Section
    6.1 describes the usage of TLS with RAQMON.\n   This memo also defines the RAQMON-RDS-MIB
    module with the purpose of\n   mapping the RAQMON PDUs into SNMP Notifications.
    \ To attain end-to-\n   end security, the following measures have been taken in
    the RAQMON-\n   RDS-MIB module design:\n   There are no management objects defined
    in this MIB module that have\n   a MAX-ACCESS clause of read-write and/or read-create.
    \ Consequently,\n   if this MIB module is implemented correctly, there is no risk
    that an\n   intruder can alter or create any management objects of this MIB\n
    \  module via direct SNMP SET operations.\n   Some of the readable objects in
    this MIB module (i.e., objects with a\n   MAX-ACCESS other than not-accessible)
    may be considered sensitive or\n   vulnerable in some network environments.  It
    is thus important to\n   control even GET and/or NOTIFY access to these objects
    and possibly\n   to even encrypt the values of these objects when sending them
    over\n   the network via SNMP.  These are the tables and objects and their\n   sensitivity/vulnerability:\n
    \  raqmonDsNotificationTable\n   The objects in this table contain user session
    information, and their\n   disclosure may be sensitive in some environments.\n
    \  SNMP versions prior to SNMPv3 did not include adequate security.\n   Even if
    the network itself is secure (for example by using IPsec),\n   even then, there
    is no control as to who on the secure network is\n   allowed to access and GET/SET
    (read/change/create/delete) the objects\n   in this MIB module.\n   It is RECOMMENDED
    that implementers consider the security features as\n   provided by the SNMPv3
    framework (see [RFC3410], section 8),\n   including full support for the SNMPv3
    cryptographic mechanisms (for\n   authentication and confidentiality).\n   It
    is a customer/operator responsibility to ensure that the SNMP\n   entity giving
    access to an instance of this MIB module is properly\n   configured to give access
    to the objects only to those principals\n   (users) that have legitimate rights
    to indeed GET or SET\n   (change/create/delete) them.\n"
  - contents:
    - '6.1.  Usage of TLS with RAQMON

      '
    - contents:
      - "6.1.1.  Confidentiality & Message Integrity\n   The subsequently authorized
        RAQMON data flow itself is protected by\n   the same TLS security association
        that protects the client-side\n   exchange.  This standard TLS channel is
        now bound to the server\n   through the above client-side authentication.
        \ The session itself is\n   identified by the tuple {RDS ip-address:RDS_port
        / RRC ip-address:\n   RRC port}.\n"
      title: 6.1.1.  Confidentiality & Message Integrity
    - contents:
      - "6.1.2.  TLS CipherSuites\n   Several issues should be considered when selecting
        TLS ciphersuites\n   that are appropriate for use in a given circumstance.
        \ These issues\n   include the following:\n   The ciphersuite's ability to
        provide adequate confidentiality\n   protection for passwords and other data
        sent over the transport\n   connection.  Client and server implementers should
        recognize that\n   some TLS ciphersuites provide no confidentiality protection,
        while\n   other ciphersuites that do provide confidentiality protection may
        be\n   vulnerable to being cracked using brute force methods, especially in\n
        \  light of ever-increasing CPU speeds that reduce the time needed to\n   successfully
        mount such attacks.\n   Client and server implementers should carefully consider
        the value of\n   the password or data being protected versus the level of\n
        \  confidentiality protection provided by the ciphersuite to ensure that\n
        \  the level of protection afforded by the ciphersuite is appropriate.\n   The
        ciphersuite's vulnerability (or lack thereof) to man-in-the-\n   middle attacks.
        \ Ciphersuites vulnerable to man-in-the-middle attacks\n   SHOULD NOT be used
        to protect passwords or sensitive data, unless the\n   network configuration
        is such that the danger of a man-in-the-middle\n   attack is negligible.\n
        \  After a TLS negotiation (either initial or subsequent) is completed,\n
        \  both protocol peers should independently verify that the security\n   services
        provided by the negotiated ciphersuite are adequate for the\n   intended use
        of the RAQMON session.  If not, the TLS layer should be\n   closed.\n   Spoofing
        Attacks: When anonymous TLS alone is negotiated without\n   client authentication,
        the client's identity is never established.\n   This easily allows any end-entity
        to establish a TLS-secured RAQMON\n   connection to the RRC.  This not only
        offers an opportunity to spoof\n   legitimate RDS clients and hence compromise
        the integrity of RRC\n   monitoring data, but also opens the RRC up to unauthorized
        clients\n   posing as genuine RDS entities to launch a DoS by flooding data.\n
        \  RAQMON deployment policy MUST consider requiring RDS client\n   authentication
        during TLS session establishment, especially when RDS\n   clients communicate
        across unprotected internet.\n   Insider attacks: Even client-authenticated
        TLS connections are open\n   to spoofing attacks by one trusted client on
        another.  Validation of\n   RDS source address against RDS TLS-session source
        address SHOULD be\n   performed to detect such attempts.\n"
      title: 6.1.2.  TLS CipherSuites
    - contents:
      - "6.1.3.  RAQMON Authorization State\n   Every RAQMON session (between RDS
        and RRC) has an associated\n   authorization state.  This state is comprised
        of numerous factors\n   such as what (if any) authorization state has been
        established, how\n   it was established, and what security services are in
        place.  Some\n   factors may be determined and/or affected by protocol events
        (e.g.,\n   StartTLS, or TLS closure), and some factors may be determined by\n
        \  external events (e.g., time of day or server load).\n   While it is often
        convenient to view authorization state in\n   simplistic terms (as we often
        do in this technical specification)\n   such as \"an anonymous state\", it
        is noted that authorization systems\n   in RAQMON implementations commonly
        involve many factors that\n   interrelate.\n   Authorization in RAQMON is
        a local matter.  One of the key factors in\n   making authorization decisions
        is authorization identity.  The\n   initial session establishment defined
        in Section 2.2 allows\n   information to be exchanged between the client and
        server to\n   establish an authorization identity for the RAQMON session.
        \ The RRC\n   is not to allow any RDS-transactions-related traffic through
        for\n   processing until the client authentication is complete, unless\n   anonymous
        authentication mode is negotiated.\n   Upon initial establishment of the RAQMON
        session, the session has an\n   anonymous authorization identity.  Among other
        things, this implies\n   that the client need not send a TLSStartRequired
        in the first PDU of\n   the RAQMON message.  The client may send any operation
        request prior\n   to binding RDS to any authentication, and the RRC MUST treat
        it as if\n   it had been performed after an anonymous RAQMON session start.\n
        \  The RDS automatically is placed in an unauthorized state upon RRC\n   sending
        a TLSstart request to the RRC.\n   It is noted that other events both internal
        and external to RAQMON\n   may result in the authentication and authorization
        states being moved\n   to an anonymous one.  For instance, the establishment,
        change, or\n   closure of data security services may result in a move to an\n
        \  anonymous state, or the user's credential information (e.g.,\n   certificate)
        may have expired.  The former is an example of an event\n   internal to RAQMON,
        whereas the latter is an example of an event\n   external to RAQMON.\n"
      title: 6.1.3.  RAQMON Authorization State
    title: 6.1.  Usage of TLS with RAQMON
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2578]     McCloghrie, K., Perkins, D., Schoenwaelder, J.,
      Case,\n                 J., Rose, M., and S. Waldbusser, \"Structure of\n                 Management
      Information Version 2 (SMIv2)\", STD 58,\n                 RFC 2578, April 1999.\n
      \  [RFC2579]     McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\n                 J.,
      Rose, M., and S. Waldbusser, \"Textual Conventions\n                 for SMIv2\",
      STD 58, RFC 2579, April 1999.\n   [RFC2580]     McCloghrie, K., Perkins, D.,
      Schoenwaelder, J., Case,\n                 J., Rose, M., and S. Waldbusser,
      \"Conformance\n                 Statements for SMIv2\", STD 58, RFC 2580, April
      1999.\n   [RFC2819]     Waldbusser, S., \"Remote Network Monitoring Management\n
      \                Information Base\", STD 59, RFC 2819, May 2000.\n   [RFC3289]
      \    Baker, F., Chan, K., and A. Smith, \"Management\n                 Information
      Base for the Differentiated Services\n                 Architecture\", RFC 3289,
      May 2002.\n   [RFC3411]     Harrington, D., Preshun, R., and B. Wijnen, \"An\n
      \                Architecture for Describing Simple Network Management\n                 Protocol
      (SNMP) Management Frameworks\", STD 62,\n                 RFC 3411, December
      2002.\n   [RFC4001]     Daniele, M., Haberman, B., Routhier, S., and J.\n                 Schoenwalder,
      \"Textual Conventions for Internet Network\n                 Addresses\", RFC
      4001, February 2005.\n   [RFC791]      Postel, J., \"Internet Protocol\", STD
      5, RFC 791,\n                 September 1981.\n   [RFC793]      Postel, J.,
      \"Transmission Control Protocol\", STD 7,\n                 RFC 793, September
      1981.\n   [RFC4710]     Siddiqui, A., Romascanu, D., and E. Golovinsky, \"Real-\n
      \                time Application Quality-of-Service Monitoring\n                 (RAQMON)\",
      RFC 4710, October 2006.\n   [TLS]         Dierks, T. and E. Rescorla, \"The
      Transport Layer\n                 Security (TLS) Protocol Version 1.1\", RFC
      4346, April\n                 2006.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [3DES]        Americation National Standards
      Institute, \"Triple Data\n                 Encryption Algorithm Modes of Operation\",
      ANSI\n                 X9.52-1998.\n   [AES]         Federal Information Processing
      Standard (FIPS),\n                 \"Specifications for the ADVANCED ENCRYPTION\n
      \                STANDARD(AES)\", Publication 197, November 2001.\n   [IEEE802.1D]
      \ \"Information technology-Telecommunications and\n                 information
      exchange between systems--Local and\n                 metropolitan area networks-Common
      Specification\n                 a--Media access control (MAC) bridges:15802-3:\n
      \                1998(ISO/IEC)\", [ANSI/IEEE Std 802.1D Edition], 1998.\n   [RFC1305]
      \    Mills, D., \"Network Time Protocol Version 3\", RFC 1305,\n                 March
      1992.\n   [RFC1321]     Rivest, R., \"Message Digest Algorithm MD5\", RFC 1321,\n
      \                April 1992.\n   [RFC3410]     Case, J., Mundy, R., Partain,
      D., and B. Stewart,\n                 \"Introduction and Applicability Statements
      for\n                 Internet-Standard Management Framework\", RFC 3410,\n
      \                December 2002.\n   [RFC3414]     Blumenthal, U. and B. Wijnen,
      \"User-based Security\n                 Model (USM) for version 3 of the Simple
      Network\n                 Management Protocol (SNMPv3)\", RFC 3414, December
      2002.\n   [RFC3550]     Schulzrinne, H., Casner, S., Frederick, R., and V.\n
      \                Jacobson, \"RTP: A Transport Protocol for Real-Time\n                 Applications\",
      RFC 3550, July 2003.\n   [RFC3551]     Schulzrinne, H. and S. Casner, \"RTP
      Profile for Audio\n                 and Video Conferences with Minimal Control\",
      STD 65,\n                 RFC 3551, July 2003.\n   [RFC3629]     Yergeau, F.,
      \"UTF-8, a transformation format of ISO\n                 10646\", STD 63, RFC
      3629, November 2003.\n   [RFC3737]     Wijnen, B. and A. Bierman, \"IANA Guidelines
      for the\n                 Registry of Remote Monitoring (RMON) MIB modules\",\n
      \                RFC 3737, April 2004.\n   [RFC4513]     Harrison, R., \"Lightweight
      Directory Access Protocol\n                 (LDAP): Authentication Methods and
      Security\n                 Mechanisms\", RFC 4513, June 2006.\n   [TLS-PSK]
      \    Eronen, P. and H. Tschofenig, \"Pre-Shared Key\n                 Ciphersuites
      for Transport Layer Security (TLS)\",\n                 RFC 4279, December 2005.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Pseudocode\n   The implementation notes included in Appendix are
    for informational\n   purposes only and are meant to clarify the RAQMON specification.\n
    \  Pseudocode for RDS & RRC\n   We provide examples of pseudocode for aspects
    of RDS and RRC.  There\n   may be other implementation methods that are faster
    in particular\n   operating environments or have other advantages.\n     RDS:\n
    \            when (session starts} {\n               report.identifier = session.endpoints,
    session.starttime;\n               report.timestamp = 0;\n               while
    (session in progress) {\n                 wait interval;\n                 report.statistics
    = update statistics;\n                 report.curtimestamp += interval;\n                 if
    encryption required\n                    report_data = encrypt(report, encrypt
    parameters);\n                 else\n                    report_data = report;\n
    \                   raqmon_pdu = header, report_data;\n                 send raqmon-pdu;\n
    \              }\n             }\n     RRC:\n             listen on raqmon port\n
    \            when ( raqmon_pdu received ) {\n                 decrypt raqmon_pdu.data
    if needed\n                 if report.identifier in database\n                    if
    report.current_time_stamp > last update\n                       update session
    statistics from report.statistics\n                    else\n                       discard
    report\n              }\n"
  title: Appendix A.  Pseudocode
- contents:
  - "Authors' Addresses\n   Anwar Siddiqui\n   Avaya\n   307 Middletown Lincroft Road\n
    \  Lincroft, NJ  80302\n   USA\n   Phone: +1 732 852-3200\n   EMail: anwars@avaya.com\n
    \  Dan Romascanu\n   Avaya\n   Atidim Technology Park, Bldg #3\n   Tel Aviv,   61131\n
    \  Israel\n   Phone: +972-3-645-8414\n   EMail: dromasca@avaya.com\n   Eugene
    Golovinsky\n   Alert Logic\n   Phone: +1 713 918-1816\n   EMail: gene@alertlogic.net\n
    \  Mahfuzur Rahman\n   Samsung Information Systems America\n   75 West Plumeria
    Drive\n   San Jose, CA  95134\n   USA\n   Phone: +1 408 544-5559\n   Yongbum Yong
    Kim\n   Broadcom\n   3151 Zanker Road\n   San Jose, CA  95134\n   USA\n   Phone:
    +1 408 501-7800\n   EMail: ybkim@broadcom.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
