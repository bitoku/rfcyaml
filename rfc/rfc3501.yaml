- title: __initial_text__
  contents:
  - '            INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Message Access Protocol, Version 4rev1 (IMAP4rev1)\n\
    \   allows a client to access and manipulate electronic mail messages on\n   a\
    \ server.  IMAP4rev1 permits manipulation of mailboxes (remote\n   message folders)\
    \ in a way that is functionally equivalent to local\n   folders.  IMAP4rev1 also\
    \ provides the capability for an offline\n   client to resynchronize with the\
    \ server.\n   IMAP4rev1 includes operations for creating, deleting, and renaming\n\
    \   mailboxes, checking for new messages, permanently removing messages,\n   setting\
    \ and clearing flags, RFC 2822 and RFC 2045 parsing, searching,\n   and selective\
    \ fetching of message attributes, texts, and portions\n   thereof.  Messages in\
    \ IMAP4rev1 are accessed by the use of numbers.\n   These numbers are either message\
    \ sequence numbers or unique\n   identifiers.\n   IMAP4rev1 supports a single\
    \ server.  A mechanism for accessing\n   configuration information to support\
    \ multiple IMAP4rev1 servers is\n   discussed in RFC 2244.\n   IMAP4rev1 does\
    \ not specify a means of posting mail; this function is\n   handled by a mail\
    \ transfer protocol such as RFC 2821.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   IMAP4rev1 Protocol Specification ................................\
    \  4\n   1.      How to Read This Document ...............................  4\n\
    \   1.1.    Organization of This Document ...........................  4\n   1.2.\
    \    Conventions Used in This Document .......................  4\n   1.3.   \
    \ Special Notes to Implementors ...........................  5\n   2.      Protocol\
    \ Overview .......................................  6\n   2.1.    Link Level ..............................................\
    \  6\n   2.2.    Commands and Responses ..................................  6\n\
    \   2.2.1.  Client Protocol Sender and Server Protocol Receiver .....  6\n   2.2.2.\
    \  Server Protocol Sender and Client Protocol Receiver .....  7\n   2.3.    Message\
    \ Attributes ......................................  8\n   2.3.1.  Message Numbers\
    \ .........................................  8\n   2.3.1.1.        Unique Identifier\
    \ (UID) Message Attribute .......  8\n   2.3.1.2.        Message Sequence Number\
    \ Message Attribute ....... 10\n   2.3.2.  Flags Message Attribute .................................\
    \ 11\n   2.3.3.  Internal Date Message Attribute ......................... 12\n\
    \   2.3.4.  [RFC-2822] Size Message Attribute ....................... 12\n   2.3.5.\
    \  Envelope Structure Message Attribute .................... 12\n   2.3.6.  Body\
    \ Structure Message Attribute ........................ 12\n   2.4.    Message\
    \ Texts ........................................... 13\n   3.      State and Flow\
    \ Diagram .................................. 13\n   3.1.    Not Authenticated\
    \ State ................................. 13\n   3.2.    Authenticated State .....................................\
    \ 13\n   3.3.    Selected State .......................................... 13\n\
    \   3.4.    Logout State ............................................ 14\n   4.\
    \      Data Formats ............................................ 16\n   4.1. \
    \   Atom .................................................... 16\n   4.2.    Number\
    \ .................................................. 16\n   4.3.    String ..................................................\
    \ 16\n   4.3.1.  8-bit and Binary Strings ................................ 17\n\
    \   4.4.    Parenthesized List ...................................... 17\n   4.5.\
    \    NIL ..................................................... 17\n   5.     \
    \ Operational Considerations .............................. 18\n   5.1.    Mailbox\
    \ Naming .......................................... 18\n   5.1.1.  Mailbox Hierarchy\
    \ Naming ................................ 19\n   5.1.2.  Mailbox Namespace Naming\
    \ Convention ..................... 19\n   5.1.3.  Mailbox International Naming\
    \ Convention ................. 19\n   5.2.    Mailbox Size and Message Status\
    \ Updates ................. 21\n   5.3.    Response when no Command in Progress\
    \ .................... 21\n   5.4.    Autologout Timer ........................................\
    \ 22\n   5.5.    Multiple Commands in Progress ........................... 22\n\
    \   6.      Client Commands ........................................  23\n   6.1.\
    \    Client Commands - Any State ............................  24\n   6.1.1. \
    \ CAPABILITY Command .....................................  24\n   6.1.2.  NOOP\
    \ Command ...........................................  25\n   6.1.3.  LOGOUT Command\
    \ .........................................  26\n   6.2.    Client Commands -\
    \ Not Authenticated State ..............  26\n   6.2.1.  STARTTLS Command .......................................\
    \  27\n   6.2.2.  AUTHENTICATE Command ...................................  28\n\
    \   6.2.3.  LOGIN Command ..........................................  30\n   6.3.\
    \    Client Commands - Authenticated State ..................  31\n   6.3.1. \
    \ SELECT Command .........................................  32\n   6.3.2.  EXAMINE\
    \ Command ........................................  34\n   6.3.3.  CREATE Command\
    \ .........................................  34\n   6.3.4.  DELETE Command .........................................\
    \  35\n   6.3.5.  RENAME Command .........................................  37\n\
    \   6.3.6.  SUBSCRIBE Command ......................................  39\n   6.3.7.\
    \  UNSUBSCRIBE Command ....................................  39\n   6.3.8.  LIST\
    \ Command ...........................................  40\n   6.3.9.  LSUB Command\
    \ ...........................................  43\n   6.3.10. STATUS Command .........................................\
    \  44\n   6.3.11. APPEND Command .........................................  46\n\
    \   6.4.    Client Commands - Selected State .......................  47\n   6.4.1.\
    \  CHECK Command ..........................................  47\n   6.4.2.  CLOSE\
    \ Command ..........................................  48\n   6.4.3.  EXPUNGE Command\
    \ ........................................  49\n   6.4.4.  SEARCH Command .........................................\
    \  49\n   6.4.5.  FETCH Command ..........................................  54\n\
    \   6.4.6.  STORE Command ..........................................  58\n   6.4.7.\
    \  COPY Command ...........................................  59\n   6.4.8.  UID\
    \ Command ............................................  60\n   6.5.    Client\
    \ Commands - Experimental/Expansion ...............  62\n   6.5.1.  X<atom> Command\
    \ ........................................  62\n   7.      Server Responses .......................................\
    \  62\n   7.1.    Server Responses - Status Responses ....................  63\n\
    \   7.1.1.  OK Response ............................................  65\n   7.1.2.\
    \  NO Response ............................................  66\n   7.1.3.  BAD\
    \ Response ...........................................  66\n   7.1.4.  PREAUTH\
    \ Response .......................................  67\n   7.1.5.  BYE Response\
    \ ...........................................  67\n   7.2.    Server Responses\
    \ - Server and Mailbox Status ...........  68\n   7.2.1.  CAPABILITY Response\
    \ ....................................  68\n   7.2.2.  LIST Response ..........................................\
    \  69\n   7.2.3.  LSUB Response ..........................................  70\n\
    \   7.2.4   STATUS Response ........................................  70\n   7.2.5.\
    \  SEARCH Response ........................................  71\n   7.2.6.  FLAGS\
    \ Response .........................................  71\n   7.3.    Server Responses\
    \ - Mailbox Size ........................  71\n   7.3.1.  EXISTS Response ........................................\
    \  71\n   7.3.2.  RECENT Response ........................................  72\n\
    \   7.4.    Server Responses - Message Status ......................  72\n   7.4.1.\
    \  EXPUNGE Response .......................................  72\n   7.4.2.  FETCH\
    \ Response .........................................  73\n   7.5.    Server Responses\
    \ - Command Continuation Request ........  79\n   8.      Sample IMAP4rev1 connection\
    \ ............................  80\n   9.      Formal Syntax ..........................................\
    \  81\n   10.     Author's Note ..........................................  92\n\
    \   11.     Security Considerations ................................  92\n   11.1.\
    \   STARTTLS Security Considerations .......................  92\n   11.2.   Other\
    \ Security Considerations ..........................  93\n   12.     IANA Considerations\
    \ ....................................  94\n   Appendices .....................................................\
    \  95\n   A.      References .............................................  95\n\
    \   B.      Changes from RFC 2060 ..................................  97\n   C.\
    \      Key Word Index ......................................... 103\n   Author's\
    \ Address ............................................... 107\n   Full Copyright\
    \ Statement ....................................... 108\n"
- title: IMAP4rev1 Protocol Specification
  contents:
  - 'IMAP4rev1 Protocol Specification

    '
- title: 1.      How to Read This Document
  contents:
  - '1.      How to Read This Document

    '
- title: 1.1.    Organization of This Document
  contents:
  - "1.1.    Organization of This Document\n   This document is written from the point\
    \ of view of the implementor of\n   an IMAP4rev1 client or server.  Beyond the\
    \ protocol overview in\n   section 2, it is not optimized for someone trying to\
    \ understand the\n   operation of the protocol.  The material in sections 3 through\
    \ 5\n   provides the general context and definitions with which IMAP4rev1\n  \
    \ operates.\n   Sections 6, 7, and 9 describe the IMAP commands, responses, and\n\
    \   syntax, respectively.  The relationships among these are such that it\n  \
    \ is almost impossible to understand any of them separately.  In\n   particular,\
    \ do not attempt to deduce command syntax from the command\n   section alone;\
    \ instead refer to the Formal Syntax section.\n"
- title: 1.2.    Conventions Used in This Document
  contents:
  - "1.2.    Conventions Used in This Document\n   \"Conventions\" are basic principles\
    \ or procedures.  Document\n   conventions are noted in this section.\n   In examples,\
    \ \"C:\" and \"S:\" indicate lines sent by the client and\n   server respectively.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"MAY\", and \"OPTIONAL\" in this document are\
    \ to\n   be interpreted as described in [KEYWORDS].\n   The word \"can\" (not\
    \ \"may\") is used to refer to a possible\n   circumstance or situation, as opposed\
    \ to an optional facility of the\n   protocol.\n   \"User\" is used to refer to\
    \ a human user, whereas \"client\" refers to\n   the software being run by the\
    \ user.\n   \"Connection\" refers to the entire sequence of client/server\n  \
    \ interaction from the initial establishment of the network connection\n   until\
    \ its termination.\n   \"Session\" refers to the sequence of client/server interaction\
    \ from\n   the time that a mailbox is selected (SELECT or EXAMINE command) until\n\
    \   the time that selection ends (SELECT or EXAMINE of another mailbox,\n   CLOSE\
    \ command, or connection termination).\n   Characters are 7-bit US-ASCII unless\
    \ otherwise specified.  Other\n   character sets are indicated using a \"CHARSET\"\
    , as described in\n   [MIME-IMT] and defined in [CHARSET].  CHARSETs have important\n\
    \   additional semantics in addition to defining character set; refer to\n   these\
    \ documents for more detail.\n   There are several protocol conventions in IMAP.\
    \  These refer to\n   aspects of the specification which are not strictly part\
    \ of the IMAP\n   protocol, but reflect generally-accepted practice.  Implementations\n\
    \   need to be aware of these conventions, and avoid conflicts whether or\n  \
    \ not they implement the convention.  For example, \"&\" may not be used\n   as\
    \ a hierarchy delimiter since it conflicts with the Mailbox\n   International\
    \ Naming Convention, and other uses of \"&\" in mailbox\n   names are impacted\
    \ as well.\n"
- title: 1.3.    Special Notes to Implementors
  contents:
  - "1.3.    Special Notes to Implementors\n   Implementors of the IMAP protocol are\
    \ strongly encouraged to read the\n   IMAP implementation recommendations document\
    \ [IMAP-IMPLEMENTATION] in\n   conjunction with this document, to help understand\
    \ the intricacies of\n   this protocol and how best to build an interoperable\
    \ product.\n   IMAP4rev1 is designed to be upwards compatible from the [IMAP2]\
    \ and\n   unpublished IMAP2bis protocols.  IMAP4rev1 is largely compatible with\n\
    \   the IMAP4 protocol described in RFC 1730; the exception being in\n   certain\
    \ facilities added in RFC 1730 that proved problematic and were\n   subsequently\
    \ removed.  In the course of the evolution of IMAP4rev1,\n   some aspects in the\
    \ earlier protocols have become obsolete.  Obsolete\n   commands, responses, and\
    \ data formats which an IMAP4rev1\n   implementation can encounter when used with\
    \ an earlier implementation\n   are described in [IMAP-OBSOLETE].\n   Other compatibility\
    \ issues with IMAP2bis, the most common variant of\n   the earlier protocol, are\
    \ discussed in [IMAP-COMPAT].  A full\n   discussion of compatibility issues with\
    \ rare (and presumed extinct)\n   variants of [IMAP2] is in [IMAP-HISTORICAL];\
    \ this document is\n   primarily of historical interest.\n   IMAP was originally\
    \ developed for the older [RFC-822] standard, and\n   as a consequence several\
    \ fetch items in IMAP incorporate \"RFC822\" in\n   their name.  With the exception\
    \ of RFC822.SIZE, there are more modern\n   replacements; for example, the modern\
    \ version of RFC822.HEADER is\n   BODY.PEEK[HEADER].  In all cases, \"RFC822\"\
    \ should be interpreted as a\n   reference to the updated [RFC-2822] standard.\n"
- title: 2.      Protocol Overview
  contents:
  - '2.      Protocol Overview

    '
- title: 2.1.    Link Level
  contents:
  - "2.1.    Link Level\n   The IMAP4rev1 protocol assumes a reliable data stream\
    \ such as that\n   provided by TCP.  When TCP is used, an IMAP4rev1 server listens\
    \ on\n   port 143.\n"
- title: 2.2.    Commands and Responses
  contents:
  - "2.2.    Commands and Responses\n   An IMAP4rev1 connection consists of the establishment\
    \ of a\n   client/server network connection, an initial greeting from the\n  \
    \ server, and client/server interactions.  These client/server\n   interactions\
    \ consist of a client command, server data, and a server\n   completion result\
    \ response.\n   All interactions transmitted by client and server are in the form\
    \ of\n   lines, that is, strings that end with a CRLF.  The protocol receiver\n\
    \   of an IMAP4rev1 client or server is either reading a line, or is\n   reading\
    \ a sequence of octets with a known count followed by a line.\n"
- title: 2.2.1.  Client Protocol Sender and Server Protocol Receiver
  contents:
  - "2.2.1.  Client Protocol Sender and Server Protocol Receiver\n   The client command\
    \ begins an operation.  Each client command is\n   prefixed with an identifier\
    \ (typically a short alphanumeric string,\n   e.g., A0001, A0002, etc.) called\
    \ a \"tag\".  A different tag is\n   generated by the client for each command.\n\
    \   Clients MUST follow the syntax outlined in this specification\n   strictly.\
    \  It is a syntax error to send a command with missing or\n   extraneous spaces\
    \ or arguments.\n   There are two cases in which a line from the client does not\n\
    \   represent a complete command.  In one case, a command argument is\n   quoted\
    \ with an octet count (see the description of literal in String\n   under Data\
    \ Formats); in the other case, the command arguments require\n   server feedback\
    \ (see the AUTHENTICATE command).  In either case, the\n   server sends a command\
    \ continuation request response if it is ready\n   for the octets (if appropriate)\
    \ and the remainder of the command.\n   This response is prefixed with the token\
    \ \"+\".\n        Note: If instead, the server detected an error in the\n    \
    \    command, it sends a BAD completion response with a tag\n        matching\
    \ the command (as described below) to reject the\n        command and prevent\
    \ the client from sending any more of the\n        command.\n        It is also\
    \ possible for the server to send a completion\n        response for some other\
    \ command (if multiple commands are\n        in progress), or untagged data. \
    \ In either case, the\n        command continuation request is still pending;\
    \ the client\n        takes the appropriate action for the response, and reads\n\
    \        another response from the server.  In all cases, the client\n       \
    \ MUST send a complete command (including receiving all\n        command continuation\
    \ request responses and command\n        continuations for the command) before\
    \ initiating a new\n        command.\n   The protocol receiver of an IMAP4rev1\
    \ server reads a command line\n   from the client, parses the command and its\
    \ arguments, and transmits\n   server data and a server command completion result\
    \ response.\n"
- title: 2.2.2.  Server Protocol Sender and Client Protocol Receiver
  contents:
  - "2.2.2.  Server Protocol Sender and Client Protocol Receiver\n   Data transmitted\
    \ by the server to the client and status responses\n   that do not indicate command\
    \ completion are prefixed with the token\n   \"*\", and are called untagged responses.\n\
    \   Server data MAY be sent as a result of a client command, or MAY be\n   sent\
    \ unilaterally by the server.  There is no syntactic difference\n   between server\
    \ data that resulted from a specific command and server\n   data that were sent\
    \ unilaterally.\n   The server completion result response indicates the success\
    \ or\n   failure of the operation.  It is tagged with the same tag as the\n  \
    \ client command which began the operation.  Thus, if more than one\n   command\
    \ is in progress, the tag in a server completion response\n   identifies the command\
    \ to which the response applies.  There are\n   three possible server completion\
    \ responses: OK (indicating success),\n   NO (indicating failure), or BAD (indicating\
    \ a protocol error such as\n   unrecognized command or command syntax error).\n\
    \   Servers SHOULD enforce the syntax outlined in this specification\n   strictly.\
    \  Any client command with a protocol syntax error, including\n   (but not limited\
    \ to) missing or extraneous spaces or arguments,\n   SHOULD be rejected, and the\
    \ client given a BAD server completion\n   response.\n   The protocol receiver\
    \ of an IMAP4rev1 client reads a response line\n   from the server.  It then takes\
    \ action on the response based upon the\n   first token of the response, which\
    \ can be a tag, a \"*\", or a \"+\".\n   A client MUST be prepared to accept any\
    \ server response at all times.\n   This includes server data that was not requested.\
    \  Server data SHOULD\n   be recorded, so that the client can reference its recorded\
    \ copy\n   rather than sending a command to the server to request the data.  In\n\
    \   the case of certain server data, the data MUST be recorded.\n   This topic\
    \ is discussed in greater detail in the Server Responses\n   section.\n"
- title: 2.3.    Message Attributes
  contents:
  - "2.3.    Message Attributes\n   In addition to message text, each message has\
    \ several attributes\n   associated with it.  These attributes can be retrieved\
    \ individually\n   or in conjunction with other attributes or message texts.\n"
- title: 2.3.1.  Message Numbers
  contents:
  - "2.3.1.  Message Numbers\n   Messages in IMAP4rev1 are accessed by one of two\
    \ numbers; the unique\n   identifier or the message sequence number.\n"
- title: 2.3.1.1.        Unique Identifier (UID) Message Attribute
  contents:
  - "2.3.1.1.        Unique Identifier (UID) Message Attribute\n   A 32-bit value\
    \ assigned to each message, which when used with the\n   unique identifier validity\
    \ value (see below) forms a 64-bit value\n   that MUST NOT refer to any other\
    \ message in the mailbox or any\n   subsequent mailbox with the same name forever.\
    \  Unique identifiers\n   are assigned in a strictly ascending fashion in the\
    \ mailbox; as each\n   message is added to the mailbox it is assigned a higher\
    \ UID than the\n   message(s) which were added previously.  Unlike message sequence\n\
    \   numbers, unique identifiers are not necessarily contiguous.\n   The unique\
    \ identifier of a message MUST NOT change during the\n   session, and SHOULD NOT\
    \ change between sessions.  Any change of\n   unique identifiers between sessions\
    \ MUST be detectable using the\n   UIDVALIDITY mechanism discussed below.  Persistent\
    \ unique identifiers\n   are required for a client to resynchronize its state\
    \ from a previous\n   session with the server (e.g., disconnected or offline access\n\
    \   clients); this is discussed further in [IMAP-DISC].\n   Associated with every\
    \ mailbox are two values which aid in unique\n   identifier handling: the next\
    \ unique identifier value and the unique\n   identifier validity value.\n   The\
    \ next unique identifier value is the predicted value that will be\n   assigned\
    \ to a new message in the mailbox.  Unless the unique\n   identifier validity\
    \ also changes (see below), the next unique\n   identifier value MUST have the\
    \ following two characteristics.  First,\n   the next unique identifier value\
    \ MUST NOT change unless new messages\n   are added to the mailbox; and second,\
    \ the next unique identifier\n   value MUST change whenever new messages are added\
    \ to the mailbox,\n   even if those new messages are subsequently expunged.\n\
    \        Note: The next unique identifier value is intended to\n        provide\
    \ a means for a client to determine whether any\n        messages have been delivered\
    \ to the mailbox since the\n        previous time it checked this value.  It is\
    \ not intended to\n        provide any guarantee that any message will have this\n\
    \        unique identifier.  A client can only assume, at the time\n        that\
    \ it obtains the next unique identifier value, that\n        messages arriving\
    \ after that time will have a UID greater\n        than or equal to that value.\n\
    \   The unique identifier validity value is sent in a UIDVALIDITY\n   response\
    \ code in an OK untagged response at mailbox selection time.\n   If unique identifiers\
    \ from an earlier session fail to persist in this\n   session, the unique identifier\
    \ validity value MUST be greater than\n   the one used in the earlier session.\n\
    \        Note: Ideally, unique identifiers SHOULD persist at all\n        times.\
    \  Although this specification recognizes that failure\n        to persist can\
    \ be unavoidable in certain server\n        environments, it STRONGLY ENCOURAGES\
    \ message store\n        implementation techniques that avoid this problem.  For\n\
    \        example:\n         1) Unique identifiers MUST be strictly ascending in\
    \ the\n            mailbox at all times.  If the physical message store is\n \
    \           re-ordered by a non-IMAP agent, this requires that the\n         \
    \   unique identifiers in the mailbox be regenerated, since\n            the former\
    \ unique identifiers are no longer strictly\n            ascending as a result\
    \ of the re-ordering.\n         2) If the message store has no mechanism to store\
    \ unique\n            identifiers, it must regenerate unique identifiers at\n\
    \            each session, and each session must have a unique\n            UIDVALIDITY\
    \ value.\n         3) If the mailbox is deleted and a new mailbox with the\n \
    \           same name is created at a later date, the server must\n          \
    \  either keep track of unique identifiers from the\n            previous instance\
    \ of the mailbox, or it must assign a\n            new UIDVALIDITY value to the\
    \ new instance of the\n            mailbox.  A good UIDVALIDITY value to use in\
    \ this case\n            is a 32-bit representation of the creation date/time\
    \ of\n            the mailbox.  It is alright to use a constant such as\n    \
    \        1, but only if it guaranteed that unique identifiers\n            will\
    \ never be reused, even in the case of a mailbox\n            being deleted (or\
    \ renamed) and a new mailbox by the\n            same name created at some future\
    \ time.\n         4) The combination of mailbox name, UIDVALIDITY, and UID\n \
    \           must refer to a single immutable message on that server\n        \
    \    forever.  In particular, the internal date, [RFC-2822]\n            size,\
    \ envelope, body structure, and message texts\n            (RFC822, RFC822.HEADER,\
    \ RFC822.TEXT, and all BODY[...]\n            fetch data items) must never change.\
    \  This does not\n            include message numbers, nor does it include attributes\n\
    \            that can be set by a STORE command (e.g., FLAGS).\n"
- title: 2.3.1.2.        Message Sequence Number Message Attribute
  contents:
  - "2.3.1.2.        Message Sequence Number Message Attribute\n   A relative position\
    \ from 1 to the number of messages in the mailbox.\n   This position MUST be ordered\
    \ by ascending unique identifier.  As\n   each new message is added, it is assigned\
    \ a message sequence number\n   that is 1 higher than the number of messages in\
    \ the mailbox before\n   that new message was added.\n   Message sequence numbers\
    \ can be reassigned during the session.  For\n   example, when a message is permanently\
    \ removed (expunged) from the\n   mailbox, the message sequence number for all\
    \ subsequent messages is\n   decremented.  The number of messages in the mailbox\
    \ is also\n   decremented.  Similarly, a new message can be assigned a message\n\
    \   sequence number that was once held by some other message prior to an\n   expunge.\n\
    \   In addition to accessing messages by relative position in the\n   mailbox,\
    \ message sequence numbers can be used in mathematical\n   calculations.  For\
    \ example, if an untagged \"11 EXISTS\" is received,\n   and previously an untagged\
    \ \"8 EXISTS\" was received, three new\n   messages have arrived with message\
    \ sequence numbers of 9, 10, and 11.\n   Another example, if message 287 in a\
    \ 523 message mailbox has UID\n   12345, there are exactly 286 messages which\
    \ have lesser UIDs and 236\n   messages which have greater UIDs.\n"
- title: 2.3.2.  Flags Message Attribute
  contents:
  - "2.3.2.  Flags Message Attribute\n   A list of zero or more named tokens associated\
    \ with the message.  A\n   flag is set by its addition to this list, and is cleared\
    \ by its\n   removal.  There are two types of flags in IMAP4rev1.  A flag of\n\
    \   either type can be permanent or session-only.\n   A system flag is a flag\
    \ name that is pre-defined in this\n   specification.  All system flags begin\
    \ with \"\\\".  Certain system\n   flags (\\Deleted and \\Seen) have special semantics\
    \ described\n   elsewhere.  The currently-defined system flags are:\n        \\\
    Seen\n           Message has been read\n        \\Answered\n           Message\
    \ has been answered\n        \\Flagged\n           Message is \"flagged\" for\
    \ urgent/special attention\n        \\Deleted\n           Message is \"deleted\"\
    \ for removal by later EXPUNGE\n        \\Draft\n           Message has not completed\
    \ composition (marked as a draft).\n        \\Recent\n           Message is \"\
    recently\" arrived in this mailbox.  This session\n           is the first session\
    \ to have been notified about this\n           message; if the session is read-write,\
    \ subsequent sessions\n           will not see \\Recent set for this message.\
    \  This flag can not\n           be altered by the client.\n           If it is\
    \ not possible to determine whether or not this\n           session is the first\
    \ session to be notified about a message,\n           then that message SHOULD\
    \ be considered recent.\n           If multiple connections have the same mailbox\
    \ selected\n           simultaneously, it is undefined which of these connections\n\
    \           will see newly-arrived messages with \\Recent set and which\n    \
    \       will see it without \\Recent set.\n   A keyword is defined by the server\
    \ implementation.  Keywords do not\n   begin with \"\\\".  Servers MAY permit\
    \ the client to define new keywords\n   in the mailbox (see the description of\
    \ the PERMANENTFLAGS response\n   code for more information).\n   A flag can be\
    \ permanent or session-only on a per-flag basis.\n   Permanent flags are those\
    \ which the client can add or remove from the\n   message flags permanently; that\
    \ is, concurrent and subsequent\n   sessions will see any change in permanent\
    \ flags.  Changes to session\n   flags are valid only in that session.\n     \
    \   Note: The \\Recent system flag is a special case of a\n        session flag.\
    \  \\Recent can not be used as an argument in a\n        STORE or APPEND command,\
    \ and thus can not be changed at\n        all.\n"
- title: 2.3.3.  Internal Date Message Attribute
  contents:
  - "2.3.3.  Internal Date Message Attribute\n   The internal date and time of the\
    \ message on the server.  This\n   is not the date and time in the [RFC-2822]\
    \ header, but rather a\n   date and time which reflects when the message was received.\
    \  In\n   the case of messages delivered via [SMTP], this SHOULD be the\n   date\
    \ and time of final delivery of the message as defined by\n   [SMTP].  In the\
    \ case of messages delivered by the IMAP4rev1 COPY\n   command, this SHOULD be\
    \ the internal date and time of the source\n   message.  In the case of messages\
    \ delivered by the IMAP4rev1\n   APPEND command, this SHOULD be the date and time\
    \ as specified in\n   the APPEND command description.  All other cases are\n \
    \  implementation defined.\n"
- title: 2.3.4.  [RFC-2822] Size Message Attribute
  contents:
  - "2.3.4.  [RFC-2822] Size Message Attribute\n   The number of octets in the message,\
    \ as expressed in [RFC-2822]\n   format.\n"
- title: 2.3.5.  Envelope Structure Message Attribute
  contents:
  - "2.3.5.  Envelope Structure Message Attribute\n   A parsed representation of the\
    \ [RFC-2822] header of the message.\n   Note that the IMAP Envelope structure\
    \ is not the same as an\n   [SMTP] envelope.\n"
- title: 2.3.6.  Body Structure Message Attribute
  contents:
  - "2.3.6.  Body Structure Message Attribute\n   A parsed representation of the [MIME-IMB]\
    \ body structure\n   information of the message.\n"
- title: 2.4.    Message Texts
  contents:
  - "2.4.    Message Texts\n   In addition to being able to fetch the full [RFC-2822]\
    \ text of a\n   message, IMAP4rev1 permits the fetching of portions of the full\n\
    \   message text.  Specifically, it is possible to fetch the\n   [RFC-2822] message\
    \ header, [RFC-2822] message body, a [MIME-IMB]\n   body part, or a [MIME-IMB]\
    \ header.\n"
- title: 3.      State and Flow Diagram
  contents:
  - "3.      State and Flow Diagram\n   Once the connection between client and server\
    \ is established, an\n   IMAP4rev1 connection is in one of four states.  The initial\n\
    \   state is identified in the server greeting.  Most commands are\n   only valid\
    \ in certain states.  It is a protocol error for the\n   client to attempt a command\
    \ while the connection is in an\n   inappropriate state, and the server will respond\
    \ with a BAD or\n   NO (depending upon server implementation) command completion\n\
    \   result.\n"
- title: 3.1.    Not Authenticated State
  contents:
  - "3.1.    Not Authenticated State\n   In the not authenticated state, the client\
    \ MUST supply\n   authentication credentials before most commands will be\n  \
    \ permitted.  This state is entered when a connection starts\n   unless the connection\
    \ has been pre-authenticated.\n"
- title: 3.2.    Authenticated State
  contents:
  - "3.2.    Authenticated State\n   In the authenticated state, the client is authenticated\
    \ and MUST\n   select a mailbox to access before commands that affect messages\n\
    \   will be permitted.  This state is entered when a\n   pre-authenticated connection\
    \ starts, when acceptable\n   authentication credentials have been provided, after\
    \ an error in\n   selecting a mailbox, or after a successful CLOSE command.\n"
- title: 3.3.    Selected State
  contents:
  - "3.3.    Selected State\n   In a selected state, a mailbox has been selected to\
    \ access.\n   This state is entered when a mailbox has been successfully\n   selected.\n"
- title: 3.4.    Logout State
  contents:
  - "3.4.    Logout State\n   In the logout state, the connection is being terminated.\
    \  This\n   state can be entered as a result of a client request (via the\n  \
    \ LOGOUT command) or by unilateral action on the part of either\n   the client\
    \ or server.\n   If the client requests the logout state, the server MUST send\
    \ an\n   untagged BYE response and a tagged OK response to the LOGOUT\n   command\
    \ before the server closes the connection; and the client\n   MUST read the tagged\
    \ OK response to the LOGOUT command before\n   the client closes the connection.\n\
    \   A server MUST NOT unilaterally close the connection without\n   sending an\
    \ untagged BYE response that contains the reason for\n   having done so.  A client\
    \ SHOULD NOT unilaterally close the\n   connection, and instead SHOULD issue a\
    \ LOGOUT command.  If the\n   server detects that the client has unilaterally\
    \ closed the\n   connection, the server MAY omit the untagged BYE response and\n\
    \   simply close its connection.\n                   +----------------------+\n\
    \                   |connection established|\n                   +----------------------+\n\
    \                              ||\n                              \\/\n       \
    \     +--------------------------------------+\n            |          server\
    \ greeting             |\n            +--------------------------------------+\n\
    \                      || (1)       || (2)        || (3)\n                   \
    \   \\/           ||            ||\n            +-----------------+    ||    \
    \        ||\n            |Not Authenticated|    ||            ||\n           \
    \ +-----------------+    ||            ||\n             || (7)   || (4)      \
    \ ||            ||\n             ||       \\/           \\/            ||\n  \
    \           ||     +----------------+           ||\n             ||     | Authenticated\
    \  |<=++       ||\n             ||     +----------------+  ||       ||\n     \
    \        ||       || (7)   || (5)   || (6)   ||\n             ||       ||    \
    \   \\/       ||       ||\n             ||       ||    +--------+  ||       ||\n\
    \             ||       ||    |Selected|==++       ||\n             ||       ||\
    \    +--------+           ||\n             ||       ||       || (7)          \
    \  ||\n             \\/       \\/       \\/                \\/\n            +--------------------------------------+\n\
    \            |               Logout                 |\n            +--------------------------------------+\n\
    \                              ||\n                              \\/\n       \
    \         +-------------------------------+\n                |both sides close\
    \ the connection|\n                +-------------------------------+\n       \
    \  (1) connection without pre-authentication (OK greeting)\n         (2) pre-authenticated\
    \ connection (PREAUTH greeting)\n         (3) rejected connection (BYE greeting)\n\
    \         (4) successful LOGIN or AUTHENTICATE command\n         (5) successful\
    \ SELECT or EXAMINE command\n         (6) CLOSE command, or failed SELECT or EXAMINE\
    \ command\n         (7) LOGOUT command, server shutdown, or connection closed\n"
- title: 4.      Data Formats
  contents:
  - "4.      Data Formats\n   IMAP4rev1 uses textual commands and responses.  Data\
    \ in\n   IMAP4rev1 can be in one of several forms: atom, number, string,\n   parenthesized\
    \ list, or NIL.  Note that a particular data item\n   may take more than one form;\
    \ for example, a data item defined as\n   using \"astring\" syntax may be either\
    \ an atom or a string.\n"
- title: 4.1.    Atom
  contents:
  - "4.1.    Atom\n   An atom consists of one or more non-special characters.\n"
- title: 4.2.    Number
  contents:
  - "4.2.    Number\n   A number consists of one or more digit characters, and\n \
    \  represents a numeric value.\n"
- title: 4.3.    String
  contents:
  - "4.3.    String\n   A string is in one of two forms: either literal or quoted\n\
    \   string.  The literal form is the general form of string.  The\n   quoted string\
    \ form is an alternative that avoids the overhead of\n   processing a literal\
    \ at the cost of limitations of characters\n   which may be used.\n   A literal\
    \ is a sequence of zero or more octets (including CR and\n   LF), prefix-quoted\
    \ with an octet count in the form of an open\n   brace (\"{\"), the number of\
    \ octets, close brace (\"}\"), and CRLF.\n   In the case of literals transmitted\
    \ from server to client, the\n   CRLF is immediately followed by the octet data.\
    \  In the case of\n   literals transmitted from client to server, the client MUST\
    \ wait\n   to receive a command continuation request (described later in\n   this\
    \ document) before sending the octet data (and the remainder\n   of the command).\n\
    \   A quoted string is a sequence of zero or more 7-bit characters,\n   excluding\
    \ CR and LF, with double quote (<\">) characters at each\n   end.\n   The empty\
    \ string is represented as either \"\" (a quoted string\n   with zero characters\
    \ between double quotes) or as {0} followed\n   by CRLF (a literal with an octet\
    \ count of 0).\n     Note: Even if the octet count is 0, a client transmitting\
    \ a\n     literal MUST wait to receive a command continuation request.\n"
- title: 4.3.1.  8-bit and Binary Strings
  contents:
  - "4.3.1.  8-bit and Binary Strings\n   8-bit textual and binary mail is supported\
    \ through the use of a\n   [MIME-IMB] content transfer encoding.  IMAP4rev1 implementations\
    \ MAY\n   transmit 8-bit or multi-octet characters in literals, but SHOULD do\n\
    \   so only when the [CHARSET] is identified.\n   Although a BINARY body encoding\
    \ is defined, unencoded binary strings\n   are not permitted.  A \"binary string\"\
    \ is any string with NUL\n   characters.  Implementations MUST encode binary data\
    \ into a textual\n   form, such as BASE64, before transmitting the data.  A string\
    \ with an\n   excessive amount of CTL characters MAY also be considered to be\n\
    \   binary.\n"
- title: 4.4.    Parenthesized List
  contents:
  - "4.4.    Parenthesized List\n   Data structures are represented as a \"parenthesized\
    \ list\"; a sequence\n   of data items, delimited by space, and bounded at each\
    \ end by\n   parentheses.  A parenthesized list can contain other parenthesized\n\
    \   lists, using multiple levels of parentheses to indicate nesting.\n   The empty\
    \ list is represented as () -- a parenthesized list with no\n   members.\n"
- title: 4.5.    NIL
  contents:
  - "4.5.    NIL\n   The special form \"NIL\" represents the non-existence of a particular\n\
    \   data item that is represented as a string or parenthesized list, as\n   distinct\
    \ from the empty string \"\" or the empty parenthesized list ().\n        Note:\
    \ NIL is never used for any data item which takes the\n        form of an atom.\
    \  For example, a mailbox name of \"NIL\" is a\n        mailbox named NIL as opposed\
    \ to a non-existent mailbox\n        name.  This is because mailbox uses \"astring\"\
    \ syntax which\n        is an atom or a string.  Conversely, an addr-name of NIL\
    \ is\n        a non-existent personal name, because addr-name uses\n        \"\
    nstring\" syntax which is NIL or a string, but never an\n        atom.\n"
- title: 5.      Operational Considerations
  contents:
  - "5.      Operational Considerations\n   The following rules are listed here to\
    \ ensure that all IMAP4rev1\n   implementations interoperate properly.\n"
- title: 5.1.    Mailbox Naming
  contents:
  - "5.1.    Mailbox Naming\n   Mailbox names are 7-bit.  Client implementations MUST\
    \ NOT attempt to\n   create 8-bit mailbox names, and SHOULD interpret any 8-bit\
    \ mailbox\n   names returned by LIST or LSUB as UTF-8.  Server implementations\n\
    \   SHOULD prohibit the creation of 8-bit mailbox names, and SHOULD NOT\n   return\
    \ 8-bit mailbox names in LIST or LSUB.  See section 5.1.3 for\n   more information\
    \ on how to represent non-ASCII mailbox names.\n        Note: 8-bit mailbox names\
    \ were undefined in earlier\n        versions of this protocol.  Some sites used\
    \ a local 8-bit\n        character set to represent non-ASCII mailbox names. \
    \ Such\n        usage is not interoperable, and is now formally deprecated.\n\
    \   The case-insensitive mailbox name INBOX is a special name reserved to\n  \
    \ mean \"the primary mailbox for this user on this server\".  The\n   interpretation\
    \ of all other names is implementation-dependent.\n   In particular, this specification\
    \ takes no position on case\n   sensitivity in non-INBOX mailbox names.  Some\
    \ server implementations\n   are fully case-sensitive; others preserve case of\
    \ a newly-created\n   name but otherwise are case-insensitive; and yet others\
    \ coerce names\n   to a particular case.  Client implementations MUST interact\
    \ with any\n   of these.  If a server implementation interprets non-INBOX mailbox\n\
    \   names as case-insensitive, it MUST treat names using the\n   international\
    \ naming convention specially as described in section\n   5.1.3.\n   There are\
    \ certain client considerations when creating a new mailbox\n   name:\n   1) \
    \   Any character which is one of the atom-specials (see the Formal\n        \
    \ Syntax) will require that the mailbox name be represented as a\n         quoted\
    \ string or literal.\n   2)    CTL and other non-graphic characters are difficult\
    \ to represent\n         in a user interface and are best avoided.\n   3)    Although\
    \ the list-wildcard characters (\"%\" and \"*\") are valid\n         in a mailbox\
    \ name, it is difficult to use such mailbox names\n         with the LIST and\
    \ LSUB commands due to the conflict with\n         wildcard interpretation.\n\
    \   4)    Usually, a character (determined by the server implementation)\n   \
    \      is reserved to delimit levels of hierarchy.\n   5)    Two characters, \"\
    #\" and \"&\", have meanings by convention, and\n         should be avoided except\
    \ when used in that convention.\n"
- title: 5.1.1.  Mailbox Hierarchy Naming
  contents:
  - "5.1.1.  Mailbox Hierarchy Naming\n   If it is desired to export hierarchical\
    \ mailbox names, mailbox names\n   MUST be left-to-right hierarchical using a\
    \ single character to\n   separate levels of hierarchy.  The same hierarchy separator\
    \ character\n   is used for all levels of hierarchy within a single name.\n"
- title: 5.1.2.  Mailbox Namespace Naming Convention
  contents:
  - "5.1.2.  Mailbox Namespace Naming Convention\n   By convention, the first hierarchical\
    \ element of any mailbox name\n   which begins with \"#\" identifies the \"namespace\"\
    \ of the remainder of\n   the name.  This makes it possible to disambiguate between\
    \ different\n   types of mailbox stores, each of which have their own namespaces.\n\
    \        For example, implementations which offer access to USENET\n        newsgroups\
    \ MAY use the \"#news\" namespace to partition the\n        USENET newsgroup namespace\
    \ from that of other mailboxes.\n        Thus, the comp.mail.misc newsgroup would\
    \ have a mailbox\n        name of \"#news.comp.mail.misc\", and the name\n   \
    \     \"comp.mail.misc\" can refer to a different object (e.g., a\n        user's\
    \ private mailbox).\n"
- title: 5.1.3.  Mailbox International Naming Convention
  contents:
  - "5.1.3.  Mailbox International Naming Convention\n   By convention, international\
    \ mailbox names in IMAP4rev1 are specified\n   using a modified version of the\
    \ UTF-7 encoding described in [UTF-7].\n   Modified UTF-7 may also be usable in\
    \ servers that implement an\n   earlier version of this protocol.\n   In modified\
    \ UTF-7, printable US-ASCII characters, except for \"&\",\n   represent themselves;\
    \ that is, characters with octet values 0x20-0x25\n   and 0x27-0x7e.  The character\
    \ \"&\" (0x26) is represented by the\n   two-octet sequence \"&-\".\n   All other\
    \ characters (octet values 0x00-0x1f and 0x7f-0xff) are\n   represented in modified\
    \ BASE64, with a further modification from\n   [UTF-7] that \",\" is used instead\
    \ of \"/\".  Modified BASE64 MUST NOT be\n   used to represent any printing US-ASCII\
    \ character which can represent\n   itself.\n   \"&\" is used to shift to modified\
    \ BASE64 and \"-\" to shift back to\n   US-ASCII.  There is no implicit shift\
    \ from BASE64 to US-ASCII, and\n   null shifts (\"-&\" while in BASE64; note that\
    \ \"&-\" while in US-ASCII\n   means \"&\") are not permitted.  However, all names\
    \ start in US-ASCII,\n   and MUST end in US-ASCII; that is, a name that ends with\
    \ a non-ASCII\n   ISO-10646 character MUST end with a \"-\").\n   The purpose\
    \ of these modifications is to correct the following\n   problems with UTF-7:\n\
    \      1) UTF-7 uses the \"+\" character for shifting; this conflicts with\n \
    \        the common use of \"+\" in mailbox names, in particular USENET\n    \
    \     newsgroup names.\n      2) UTF-7's encoding is BASE64 which uses the \"\
    /\" character; this\n         conflicts with the use of \"/\" as a popular hierarchy\
    \ delimiter.\n      3) UTF-7 prohibits the unencoded usage of \"\\\"; this conflicts\
    \ with\n         the use of \"\\\" as a popular hierarchy delimiter.\n      4)\
    \ UTF-7 prohibits the unencoded usage of \"~\"; this conflicts with\n        \
    \ the use of \"~\" in some servers as a home directory indicator.\n      5) UTF-7\
    \ permits multiple alternate forms to represent the same\n         string; in\
    \ particular, printable US-ASCII characters can be\n         represented in encoded\
    \ form.\n      Although modified UTF-7 is a convention, it establishes certain\n\
    \      requirements on server handling of any mailbox name with an\n      embedded\
    \ \"&\" character.  In particular, server implementations\n      MUST preserve\
    \ the exact form of the modified BASE64 portion of a\n      modified UTF-7 name\
    \ and treat that text as case-sensitive, even if\n      names are otherwise case-insensitive\
    \ or case-folded.\n      Server implementations SHOULD verify that any mailbox\
    \ name with an\n      embedded \"&\" character, used as an argument to CREATE,\
    \ is: in the\n      correctly modified UTF-7 syntax, has no superfluous shifts,\
    \ and\n      has no encoding in modified BASE64 of any printing US-ASCII\n   \
    \   character which can represent itself.  However, client\n      implementations\
    \ MUST NOT depend upon the server doing this, and\n      SHOULD NOT attempt to\
    \ create a mailbox name with an embedded \"&\"\n      character unless it complies\
    \ with the modified UTF-7 syntax.\n      Server implementations which export a\
    \ mail store that does not\n      follow the modified UTF-7 convention MUST convert\
    \ to modified\n      UTF-7 any mailbox name that contains either non-ASCII characters\n\
    \      or the \"&\" character.\n           For example, here is a mailbox name\
    \ which mixes English,\n           Chinese, and Japanese text:\n           ~peter/mail/&U,BTFw-/&ZeVnLIqe-\n\
    \           For example, the string \"&Jjo!\" is not a valid mailbox\n       \
    \    name because it does not contain a shift to US-ASCII\n           before the\
    \ \"!\".  The correct form is \"&Jjo-!\".  The\n           string \"&U,BTFw-&ZeVnLIqe-\"\
    \ is not permitted because it\n           contains a superfluous shift.  The correct\
    \ form is\n           \"&U,BTF2XlZyyKng-\".\n"
- title: 5.2.    Mailbox Size and Message Status Updates
  contents:
  - "5.2.    Mailbox Size and Message Status Updates\n   At any time, a server can\
    \ send data that the client did not request.\n   Sometimes, such behavior is REQUIRED.\
    \  For example, agents other than\n   the server MAY add messages to the mailbox\
    \ (e.g., new message\n   delivery), change the flags of the messages in the mailbox\
    \ (e.g.,\n   simultaneous access to the same mailbox by multiple agents), or even\n\
    \   remove messages from the mailbox.  A server MUST send mailbox size\n   updates\
    \ automatically if a mailbox size change is observed during the\n   processing\
    \ of a command.  A server SHOULD send message flag updates\n   automatically,\
    \ without requiring the client to request such updates\n   explicitly.\n   Special\
    \ rules exist for server notification of a client about the\n   removal of messages\
    \ to prevent synchronization errors; see the\n   description of the EXPUNGE response\
    \ for more detail.  In particular,\n   it is NOT permitted to send an EXISTS response\
    \ that would reduce the\n   number of messages in the mailbox; only the EXPUNGE\
    \ response can do\n   this.\n   Regardless of what implementation decisions a\
    \ client makes on\n   remembering data from the server, a client implementation\
    \ MUST record\n   mailbox size updates.  It MUST NOT assume that any command after\
    \ the\n   initial mailbox selection will return the size of the mailbox.\n"
- title: 5.3.    Response when no Command in Progress
  contents:
  - "5.3.    Response when no Command in Progress\n   Server implementations are permitted\
    \ to send an untagged response\n   (except for EXPUNGE) while there is no command\
    \ in progress.  Server\n   implementations that send such responses MUST deal\
    \ with flow control\n   considerations.  Specifically, they MUST either (1) verify\
    \ that the\n   size of the data does not exceed the underlying transport's available\n\
    \   window size, or (2) use non-blocking writes.\n"
- title: 5.4.    Autologout Timer
  contents:
  - "5.4.    Autologout Timer\n   If a server has an inactivity autologout timer,\
    \ the duration of that\n   timer MUST be at least 30 minutes.  The receipt of\
    \ ANY command from\n   the client during that interval SHOULD suffice to reset\
    \ the\n   autologout timer.\n"
- title: 5.5.    Multiple Commands in Progress
  contents:
  - "5.5.    Multiple Commands in Progress\n   The client MAY send another command\
    \ without waiting for the\n   completion result response of a command, subject\
    \ to ambiguity rules\n   (see below) and flow control constraints on the underlying\
    \ data\n   stream.  Similarly, a server MAY begin processing another command\n\
    \   before processing the current command to completion, subject to\n   ambiguity\
    \ rules.  However, any command continuation request responses\n   and command\
    \ continuations MUST be negotiated before any subsequent\n   command is initiated.\n\
    \   The exception is if an ambiguity would result because of a command\n   that\
    \ would affect the results of other commands.  Clients MUST NOT\n   send multiple\
    \ commands without waiting if an ambiguity would result.\n   If the server detects\
    \ a possible ambiguity, it MUST execute commands\n   to completion in the order\
    \ given by the client.\n   The most obvious example of ambiguity is when a command\
    \ would affect\n   the results of another command, e.g., a FETCH of a message's\
    \ flags\n   and a STORE of that same message's flags.\n   A non-obvious ambiguity\
    \ occurs with commands that permit an untagged\n   EXPUNGE response (commands\
    \ other than FETCH, STORE, and SEARCH),\n   since an untagged EXPUNGE response\
    \ can invalidate sequence numbers in\n   a subsequent command.  This is not a\
    \ problem for FETCH, STORE, or\n   SEARCH commands because servers are prohibited\
    \ from sending EXPUNGE\n   responses while any of those commands are in progress.\
    \  Therefore, if\n   the client sends any command other than FETCH, STORE, or\
    \ SEARCH, it\n   MUST wait for the completion result response before sending a\
    \ command\n   with message sequence numbers.\n        Note: UID FETCH, UID STORE,\
    \ and UID SEARCH are different\n        commands from FETCH, STORE, and SEARCH.\
    \  If the client\n        sends a UID command, it must wait for a completion result\n\
    \        response before sending a command with message sequence\n        numbers.\n\
    \   For example, the following non-waiting command sequences are invalid:\n  \
    \    FETCH + NOOP + STORE\n      STORE + COPY + FETCH\n      COPY + COPY\n   \
    \   CHECK + FETCH\n   The following are examples of valid non-waiting command\
    \ sequences:\n      FETCH + STORE + SEARCH + CHECK\n      STORE + COPY + EXPUNGE\n\
    \      UID SEARCH + UID SEARCH may be valid or invalid as a non-waiting\n    \
    \  command sequence, depending upon whether or not the second UID\n      SEARCH\
    \ contains message sequence numbers.\n"
- title: 6.      Client Commands
  contents:
  - "6.      Client Commands\n   IMAP4rev1 commands are described in this section.\
    \  Commands are\n   organized by the state in which the command is permitted.\
    \  Commands\n   which are permitted in multiple states are listed in the minimum\n\
    \   permitted state (for example, commands valid in authenticated and\n   selected\
    \ state are listed in the authenticated state commands).\n   Command arguments,\
    \ identified by \"Arguments:\" in the command\n   descriptions below, are described\
    \ by function, not by syntax.  The\n   precise syntax of command arguments is\
    \ described in the Formal Syntax\n   section.\n   Some commands cause specific\
    \ server responses to be returned; these\n   are identified by \"Responses:\"\
    \ in the command descriptions below.\n   See the response descriptions in the\
    \ Responses section for\n   information on these responses, and the Formal Syntax\
    \ section for the\n   precise syntax of these responses.  It is possible for server\
    \ data to\n   be transmitted as a result of any command.  Thus, commands that\
    \ do\n   not specifically require server data specify \"no specific responses\n\
    \   for this command\" instead of \"none\".\n   The \"Result:\" in the command\
    \ description refers to the possible\n   tagged status responses to a command,\
    \ and any special interpretation\n   of these status responses.\n   The state\
    \ of a connection is only changed by successful commands\n   which are documented\
    \ as changing state.  A rejected command (BAD\n   response) never changes the\
    \ state of the connection or of the\n   selected mailbox.  A failed command (NO\
    \ response) generally does not\n   change the state of the connection or of the\
    \ selected mailbox; the\n   exception being the SELECT and EXAMINE commands.\n"
- title: 6.1.    Client Commands - Any State
  contents:
  - "6.1.    Client Commands - Any State\n   The following commands are valid in any\
    \ state: CAPABILITY, NOOP, and\n   LOGOUT.\n"
- title: 6.1.1.  CAPABILITY Command
  contents:
  - "6.1.1.  CAPABILITY Command\n   Arguments:  none\n   Responses:  REQUIRED untagged\
    \ response: CAPABILITY\n   Result:     OK - capability completed\n           \
    \    BAD - command unknown or arguments invalid\n      The CAPABILITY command\
    \ requests a listing of capabilities that the\n      server supports.  The server\
    \ MUST send a single untagged\n      CAPABILITY response with \"IMAP4rev1\" as\
    \ one of the listed\n      capabilities before the (tagged) OK response.\n   \
    \   A capability name which begins with \"AUTH=\" indicates that the\n      server\
    \ supports that particular authentication mechanism.  All\n      such names are,\
    \ by definition, part of this specification.  For\n      example, the authorization\
    \ capability for an experimental\n      \"blurdybloop\" authenticator would be\
    \ \"AUTH=XBLURDYBLOOP\" and not\n      \"XAUTH=BLURDYBLOOP\" or \"XAUTH=XBLURDYBLOOP\"\
    .\n      Other capability names refer to extensions, revisions, or\n      amendments\
    \ to this specification.  See the documentation of the\n      CAPABILITY response\
    \ for additional information.  No capabilities,\n      beyond the base IMAP4rev1\
    \ set defined in this specification, are\n      enabled without explicit client\
    \ action to invoke the capability.\n      Client and server implementations MUST\
    \ implement the STARTTLS,\n      LOGINDISABLED, and AUTH=PLAIN (described in [IMAP-TLS])\n\
    \      capabilities.  See the Security Considerations section for\n      important\
    \ information.\n      See the section entitled \"Client Commands -\n      Experimental/Expansion\"\
    \ for information about the form of site or\n      implementation-specific capabilities.\n\
    \   Example:    C: abcd CAPABILITY\n               S: * CAPABILITY IMAP4rev1 STARTTLS\
    \ AUTH=GSSAPI\n               LOGINDISABLED\n               S: abcd OK CAPABILITY\
    \ completed\n               C: efgh STARTTLS\n               S: efgh OK STARTLS\
    \ completed\n               <TLS negotiation, further commands are under [TLS]\
    \ layer>\n               C: ijkl CAPABILITY\n               S: * CAPABILITY IMAP4rev1\
    \ AUTH=GSSAPI AUTH=PLAIN\n               S: ijkl OK CAPABILITY completed\n"
- title: 6.1.2.  NOOP Command
  contents:
  - "6.1.2.  NOOP Command\n   Arguments:  none\n   Responses:  no specific responses\
    \ for this command (but see below)\n   Result:     OK - noop completed\n     \
    \          BAD - command unknown or arguments invalid\n      The NOOP command\
    \ always succeeds.  It does nothing.\n      Since any command can return a status\
    \ update as untagged data, the\n      NOOP command can be used as a periodic poll\
    \ for new messages or\n      message status updates during a period of inactivity\
    \ (this is the\n      preferred method to do this).  The NOOP command can also\
    \ be used\n      to reset any inactivity autologout timer on the server.\n   Example:\
    \    C: a002 NOOP\n               S: a002 OK NOOP completed\n                \
    \  . . .\n               C: a047 NOOP\n               S: * 22 EXPUNGE\n      \
    \         S: * 23 EXISTS\n               S: * 3 RECENT\n               S: * 14\
    \ FETCH (FLAGS (\\Seen \\Deleted))\n               S: a047 OK NOOP completed\n"
- title: 6.1.3.  LOGOUT Command
  contents:
  - "6.1.3.  LOGOUT Command\n   Arguments:  none\n   Responses:  REQUIRED untagged\
    \ response: BYE\n   Result:     OK - logout completed\n               BAD - command\
    \ unknown or arguments invalid\n      The LOGOUT command informs the server that\
    \ the client is done with\n      the connection.  The server MUST send a BYE untagged\
    \ response\n      before the (tagged) OK response, and then close the network\n\
    \      connection.\n   Example:    C: A023 LOGOUT\n               S: * BYE IMAP4rev1\
    \ Server logging out\n               S: A023 OK LOGOUT completed\n           \
    \    (Server and client then close the connection)\n"
- title: 6.2.    Client Commands - Not Authenticated State
  contents:
  - "6.2.    Client Commands - Not Authenticated State\n   In the not authenticated\
    \ state, the AUTHENTICATE or LOGIN command\n   establishes authentication and\
    \ enters the authenticated state.  The\n   AUTHENTICATE command provides a general\
    \ mechanism for a variety of\n   authentication techniques, privacy protection,\
    \ and integrity\n   checking; whereas the LOGIN command uses a traditional user\
    \ name and\n   plaintext password pair and has no means of establishing privacy\n\
    \   protection or integrity checking.\n   The STARTTLS command is an alternate\
    \ form of establishing session\n   privacy protection and integrity checking,\
    \ but does not establish\n   authentication or enter the authenticated state.\n\
    \   Server implementations MAY allow access to certain mailboxes without\n   establishing\
    \ authentication.  This can be done by means of the\n   ANONYMOUS [SASL] authenticator\
    \ described in [ANONYMOUS].  An older\n   convention is a LOGIN command using\
    \ the userid \"anonymous\"; in this\n   case, a password is required although\
    \ the server may choose to accept\n   any password.  The restrictions placed on\
    \ anonymous users are\n   implementation-dependent.\n   Once authenticated (including\
    \ as anonymous), it is not possible to\n   re-enter not authenticated state.\n\
    \   In addition to the universal commands (CAPABILITY, NOOP, and LOGOUT),\n  \
    \ the following commands are valid in the not authenticated state:\n   STARTTLS,\
    \ AUTHENTICATE and LOGIN.  See the Security Considerations\n   section for important\
    \ information about these commands.\n"
- title: 6.2.1.  STARTTLS Command
  contents:
  - "6.2.1.  STARTTLS Command\n   Arguments:  none\n   Responses:  no specific response\
    \ for this command\n   Result:     OK - starttls completed, begin TLS negotiation\n\
    \               BAD - command unknown or arguments invalid\n      A [TLS] negotiation\
    \ begins immediately after the CRLF at the end\n      of the tagged OK response\
    \ from the server.  Once a client issues a\n      STARTTLS command, it MUST NOT\
    \ issue further commands until a\n      server response is seen and the [TLS]\
    \ negotiation is complete.\n      The server remains in the non-authenticated\
    \ state, even if client\n      credentials are supplied during the [TLS] negotiation.\
    \  This does\n      not preclude an authentication mechanism such as EXTERNAL\
    \ (defined\n      in [SASL]) from using client identity determined by the [TLS]\n\
    \      negotiation.\n      Once [TLS] has been started, the client MUST discard\
    \ cached\n      information about server capabilities and SHOULD re-issue the\n\
    \      CAPABILITY command.  This is necessary to protect against man-in-\n   \
    \   the-middle attacks which alter the capabilities list prior to\n      STARTTLS.\
    \  The server MAY advertise different capabilities after\n      STARTTLS.\n  \
    \ Example:    C: a001 CAPABILITY\n               S: * CAPABILITY IMAP4rev1 STARTTLS\
    \ LOGINDISABLED\n               S: a001 OK CAPABILITY completed\n            \
    \   C: a002 STARTTLS\n               S: a002 OK Begin TLS negotiation now\n  \
    \             <TLS negotiation, further commands are under [TLS] layer>\n    \
    \           C: a003 CAPABILITY\n               S: * CAPABILITY IMAP4rev1 AUTH=PLAIN\n\
    \               S: a003 OK CAPABILITY completed\n               C: a004 LOGIN\
    \ joe password\n               S: a004 OK LOGIN completed\n"
- title: 6.2.2.  AUTHENTICATE Command
  contents:
  - "6.2.2.  AUTHENTICATE Command\n   Arguments:  authentication mechanism name\n\
    \   Responses:  continuation data can be requested\n   Result:     OK - authenticate\
    \ completed, now in authenticated state\n               NO - authenticate failure:\
    \ unsupported authentication\n                    mechanism, credentials rejected\n\
    \               BAD - command unknown or arguments invalid,\n                \
    \    authentication exchange cancelled\n      The AUTHENTICATE command indicates\
    \ a [SASL] authentication\n      mechanism to the server.  If the server supports\
    \ the requested\n      authentication mechanism, it performs an authentication\
    \ protocol\n      exchange to authenticate and identify the client.  It MAY also\n\
    \      negotiate an OPTIONAL security layer for subsequent protocol\n      interactions.\
    \  If the requested authentication mechanism is not\n      supported, the server\
    \ SHOULD reject the AUTHENTICATE command by\n      sending a tagged NO response.\n\
    \      The AUTHENTICATE command does not support the optional \"initial\n    \
    \  response\" feature of [SASL].  Section 5.1 of [SASL] specifies how\n      to\
    \ handle an authentication mechanism which uses an initial\n      response.\n\
    \      The service name specified by this protocol's profile of [SASL] is\n  \
    \    \"imap\".\n      The authentication protocol exchange consists of a series\
    \ of\n      server challenges and client responses that are specific to the\n\
    \      authentication mechanism.  A server challenge consists of a\n      command\
    \ continuation request response with the \"+\" token followed\n      by a BASE64\
    \ encoded string.  The client response consists of a\n      single line consisting\
    \ of a BASE64 encoded string.  If the client\n      wishes to cancel an authentication\
    \ exchange, it issues a line\n      consisting of a single \"*\".  If the server\
    \ receives such a\n      response, it MUST reject the AUTHENTICATE command by\
    \ sending a\n      tagged BAD response.\n      If a security layer is negotiated\
    \ through the [SASL]\n      authentication exchange, it takes effect immediately\
    \ following the\n      CRLF that concludes the authentication exchange for the\
    \ client,\n      and the CRLF of the tagged OK response for the server.\n    \
    \  While client and server implementations MUST implement the\n      AUTHENTICATE\
    \ command itself, it is not required to implement any\n      authentication mechanisms\
    \ other than the PLAIN mechanism described\n      in [IMAP-TLS].  Also, an authentication\
    \ mechanism is not required\n      to support any security layers.\n         \
    \  Note: a server implementation MUST implement a\n           configuration in\
    \ which it does NOT permit any plaintext\n           password mechanisms, unless\
    \ either the STARTTLS command\n           has been negotiated or some other mechanism\
    \ that\n           protects the session from password snooping has been\n    \
    \       provided.  Server sites SHOULD NOT use any configuration\n           which\
    \ permits a plaintext password mechanism without\n           such a protection\
    \ mechanism against password snooping.\n           Client and server implementations\
    \ SHOULD implement\n           additional [SASL] mechanisms that do not use plaintext\n\
    \           passwords, such the GSSAPI mechanism described in [SASL]\n       \
    \    and/or the [DIGEST-MD5] mechanism.\n      Servers and clients can support\
    \ multiple authentication\n      mechanisms.  The server SHOULD list its supported\
    \ authentication\n      mechanisms in the response to the CAPABILITY command so\
    \ that the\n      client knows which authentication mechanisms to use.\n     \
    \ A server MAY include a CAPABILITY response code in the tagged OK\n      response\
    \ of a successful AUTHENTICATE command in order to send\n      capabilities automatically.\
    \  It is unnecessary for a client to\n      send a separate CAPABILITY command\
    \ if it recognizes these\n      automatic capabilities.  This should only be done\
    \ if a security\n      layer was not negotiated by the AUTHENTICATE command, because\
    \ the\n      tagged OK response as part of an AUTHENTICATE command is not\n  \
    \    protected by encryption/integrity checking.  [SASL] requires the\n      client\
    \ to re-issue a CAPABILITY command in this case.\n      If an AUTHENTICATE command\
    \ fails with a NO response, the client\n      MAY try another authentication mechanism\
    \ by issuing another\n      AUTHENTICATE command.  It MAY also attempt to authenticate\
    \ by\n      using the LOGIN command (see section 6.2.3 for more detail).  In\n\
    \      other words, the client MAY request authentication types in\n      decreasing\
    \ order of preference, with the LOGIN command as a last\n      resort.\n     \
    \ The authorization identity passed from the client to the server\n      during\
    \ the authentication exchange is interpreted by the server as\n      the user\
    \ name whose privileges the client is requesting.\n   Example:    S: * OK IMAP4rev1\
    \ Server\n               C: A001 AUTHENTICATE GSSAPI\n               S: +\n  \
    \             C: YIIB+wYJKoZIhvcSAQICAQBuggHqMIIB5qADAgEFoQMCAQ6iBw\n        \
    \          MFACAAAACjggEmYYIBIjCCAR6gAwIBBaESGxB1Lndhc2hpbmd0\n              \
    \    b24uZWR1oi0wK6ADAgEDoSQwIhsEaW1hcBsac2hpdmFtcy5jYW\n                  Mud2FzaGluZ3Rvbi5lZHWjgdMwgdCgAwIBAaEDAgEDooHDBIHA\n\
    \                  cS1GSa5b+fXnPZNmXB9SjL8Ollj2SKyb+3S0iXMljen/jNkpJX\n      \
    \            AleKTz6BQPzj8duz8EtoOuNfKgweViyn/9B9bccy1uuAE2HI0y\n            \
    \      C/PHXNNU9ZrBziJ8Lm0tTNc98kUpjXnHZhsMcz5Mx2GR6dGknb\n                  I0iaGcRerMUsWOuBmKKKRmVMMdR9T3EZdpqsBd7jZCNMWotjhi\n\
    \                  vd5zovQlFqQ2Wjc2+y46vKP/iXxWIuQJuDiisyXF0Y8+5GTpAL\n      \
    \            pHDc1/pIGmMIGjoAMCAQGigZsEgZg2on5mSuxoDHEA1w9bcW9n\n            \
    \      FdFxDKpdrQhVGVRDIzcCMCTzvUboqb5KjY1NJKJsfjRQiBYBdE\n                  NKfzK+g5DlV8nrw81uOcP8NOQCLR5XkoMHC0Dr/80ziQzbNqhx\n\
    \                  O6652Npft0LQwJvenwDI13YxpwOdMXzkWZN/XrEqOWp6GCgXTB\n      \
    \            vCyLWLlWnbaUkZdEYbKHBPjd8t/1x5Yg==\n               S: + YGgGCSqGSIb3EgECAgIAb1kwV6ADAgEFoQMCAQ+iSzBJoAMC\n\
    \                  AQGiQgRAtHTEuOP2BXb9sBYFR4SJlDZxmg39IxmRBOhXRKdDA0\n      \
    \            uHTCOT9Bq3OsUTXUlk0CsFLoa8j+gvGDlgHuqzWHPSQg==\n               C:\n\
    \               S: + YDMGCSqGSIb3EgECAgIBAAD/////6jcyG4GE3KkTzBeBiVHe\n      \
    \            ceP2CWY0SR0fAQAgAAQEBAQ=\n               C: YDMGCSqGSIb3EgECAgIBAAD/////3LQBHXTpFfZgrejpLlLImP\n\
    \                  wkhbfa2QteAQAgAG1yYwE=\n               S: A001 OK GSSAPI authentication\
    \ successful\n        Note: The line breaks within server challenges and client\n\
    \        responses are for editorial clarity and are not in real\n        authenticators.\n"
- title: 6.2.3.  LOGIN Command
  contents:
  - "6.2.3.  LOGIN Command\n   Arguments:  user name\n               password\n  \
    \ Responses:  no specific responses for this command\n   Result:     OK - login\
    \ completed, now in authenticated state\n               NO - login failure: user\
    \ name or password rejected\n               BAD - command unknown or arguments\
    \ invalid\n      The LOGIN command identifies the client to the server and carries\n\
    \      the plaintext password authenticating this user.\n      A server MAY include\
    \ a CAPABILITY response code in the tagged OK\n      response to a successful\
    \ LOGIN command in order to send\n      capabilities automatically.  It is unnecessary\
    \ for a client to\n      send a separate CAPABILITY command if it recognizes these\n\
    \      automatic capabilities.\n   Example:    C: a001 LOGIN SMITH SESAME\n  \
    \             S: a001 OK LOGIN completed\n        Note: Use of the LOGIN command\
    \ over an insecure network\n        (such as the Internet) is a security risk,\
    \ because anyone\n        monitoring network traffic can obtain plaintext passwords.\n\
    \        The LOGIN command SHOULD NOT be used except as a last\n        resort,\
    \ and it is recommended that client implementations\n        have a means to disable\
    \ any automatic use of the LOGIN\n        command.\n        Unless either the\
    \ STARTTLS command has been negotiated or\n        some other mechanism that protects\
    \ the session from\n        password snooping has been provided, a server\n  \
    \      implementation MUST implement a configuration in which it\n        advertises\
    \ the LOGINDISABLED capability and does NOT permit\n        the LOGIN command.\
    \  Server sites SHOULD NOT use any\n        configuration which permits the LOGIN\
    \ command without such\n        a protection mechanism against password snooping.\
    \  A client\n        implementation MUST NOT send a LOGIN command if the\n   \
    \     LOGINDISABLED capability is advertised.\n"
- title: 6.3.    Client Commands - Authenticated State
  contents:
  - "6.3.    Client Commands - Authenticated State\n   In the authenticated state,\
    \ commands that manipulate mailboxes as\n   atomic entities are permitted.  Of\
    \ these commands, the SELECT and\n   EXAMINE commands will select a mailbox for\
    \ access and enter the\n   selected state.\n   In addition to the universal commands\
    \ (CAPABILITY, NOOP, and LOGOUT),\n   the following commands are valid in the\
    \ authenticated state: SELECT,\n   EXAMINE, CREATE, DELETE, RENAME, SUBSCRIBE,\
    \ UNSUBSCRIBE, LIST, LSUB,\n   STATUS, and APPEND.\n"
- title: 6.3.1.  SELECT Command
  contents:
  - "6.3.1.  SELECT Command\n   Arguments:  mailbox name\n   Responses:  REQUIRED\
    \ untagged responses: FLAGS, EXISTS, RECENT\n               REQUIRED OK untagged\
    \ responses:  UNSEEN,  PERMANENTFLAGS,\n               UIDNEXT, UIDVALIDITY\n\
    \   Result:     OK - select completed, now in selected state\n               NO\
    \ - select failure, now in authenticated state: no\n                    such mailbox,\
    \ can't access mailbox\n               BAD - command unknown or arguments invalid\n\
    \      The SELECT command selects a mailbox so that messages in the\n      mailbox\
    \ can be accessed.  Before returning an OK to the client,\n      the server MUST\
    \ send the following untagged data to the client.\n      Note that earlier versions\
    \ of this protocol only required the\n      FLAGS, EXISTS, and RECENT untagged\
    \ data; consequently, client\n      implementations SHOULD implement default behavior\
    \ for missing data\n      as discussed with the individual item.\n         FLAGS\
    \       Defined flags in the mailbox.  See the description\n                 \
    \    of the FLAGS response for more detail.\n         <n> EXISTS  The number of\
    \ messages in the mailbox.  See the\n                     description of the EXISTS\
    \ response for more detail.\n         <n> RECENT  The number of messages with\
    \ the \\Recent flag set.\n                     See the description of the RECENT\
    \ response for more\n                     detail.\n         OK [UNSEEN <n>]\n\
    \                     The message sequence number of the first unseen\n      \
    \               message in the mailbox.  If this is missing, the\n           \
    \          client can not make any assumptions about the first\n             \
    \        unseen message in the mailbox, and needs to issue a\n               \
    \      SEARCH command if it wants to find it.\n         OK [PERMANENTFLAGS (<list\
    \ of flags>)]\n                     A list of message flags that the client can\
    \ change\n                     permanently.  If this is missing, the client should\n\
    \                     assume that all flags can be changed permanently.\n    \
    \     OK [UIDNEXT <n>]\n                     The next unique identifier value.\
    \  Refer to section\n                     2.3.1.1 for more information.  If this\
    \ is missing,\n                     the client can not make any assumptions about\
    \ the\n                     next unique identifier value.\n         OK [UIDVALIDITY\
    \ <n>]\n                     The unique identifier validity value.  Refer to\n\
    \                     section 2.3.1.1 for more information.  If this is\n    \
    \                 missing, the server does not support unique\n              \
    \       identifiers.\n      Only one mailbox can be selected at a time in a connection;\n\
    \      simultaneous access to multiple mailboxes requires multiple\n      connections.\
    \  The SELECT command automatically deselects any\n      currently selected mailbox\
    \ before attempting the new selection.\n      Consequently, if a mailbox is selected\
    \ and a SELECT command that\n      fails is attempted, no mailbox is selected.\n\
    \      If the client is permitted to modify the mailbox, the server\n      SHOULD\
    \ prefix the text of the tagged OK response with the\n      \"[READ-WRITE]\" response\
    \ code.\n      If the client is not permitted to modify the mailbox but is\n \
    \     permitted read access, the mailbox is selected as read-only, and\n     \
    \ the server MUST prefix the text of the tagged OK response to\n      SELECT with\
    \ the \"[READ-ONLY]\" response code.  Read-only access\n      through SELECT differs\
    \ from the EXAMINE command in that certain\n      read-only mailboxes MAY permit\
    \ the change of permanent state on a\n      per-user (as opposed to global) basis.\
    \  Netnews messages marked in\n      a server-based .newsrc file are an example\
    \ of such per-user\n      permanent state that can be modified with read-only\
    \ mailboxes.\n   Example:    C: A142 SELECT INBOX\n               S: * 172 EXISTS\n\
    \               S: * 1 RECENT\n               S: * OK [UNSEEN 12] Message 12 is\
    \ first unseen\n               S: * OK [UIDVALIDITY 3857529045] UIDs valid\n \
    \              S: * OK [UIDNEXT 4392] Predicted next UID\n               S: *\
    \ FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n               S: * OK\
    \ [PERMANENTFLAGS (\\Deleted \\Seen \\*)] Limited\n               S: A142 OK [READ-WRITE]\
    \ SELECT completed\n"
- title: 6.3.2.  EXAMINE Command
  contents:
  - "6.3.2.  EXAMINE Command\n   Arguments:  mailbox name\n   Responses:  REQUIRED\
    \ untagged responses: FLAGS, EXISTS, RECENT\n               REQUIRED OK untagged\
    \ responses:  UNSEEN,  PERMANENTFLAGS,\n               UIDNEXT, UIDVALIDITY\n\
    \   Result:     OK - examine completed, now in selected state\n              \
    \ NO - examine failure, now in authenticated state: no\n                    such\
    \ mailbox, can't access mailbox\n               BAD - command unknown or arguments\
    \ invalid\n      The EXAMINE command is identical to SELECT and returns the same\n\
    \      output; however, the selected mailbox is identified as read-only.\n   \
    \   No changes to the permanent state of the mailbox, including\n      per-user\
    \ state, are permitted; in particular, EXAMINE MUST NOT\n      cause messages\
    \ to lose the \\Recent flag.\n      The text of the tagged OK response to the\
    \ EXAMINE command MUST\n      begin with the \"[READ-ONLY]\" response code.\n\
    \   Example:    C: A932 EXAMINE blurdybloop\n               S: * 17 EXISTS\n \
    \              S: * 2 RECENT\n               S: * OK [UNSEEN 8] Message 8 is first\
    \ unseen\n               S: * OK [UIDVALIDITY 3857529045] UIDs valid\n       \
    \        S: * OK [UIDNEXT 4392] Predicted next UID\n               S: * FLAGS\
    \ (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n               S: * OK [PERMANENTFLAGS\
    \ ()] No permanent flags permitted\n               S: A932 OK [READ-ONLY] EXAMINE\
    \ completed\n"
- title: 6.3.3.  CREATE Command
  contents:
  - "6.3.3.  CREATE Command\n   Arguments:  mailbox name\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - create completed\n         \
    \      NO - create failure: can't create mailbox with that name\n            \
    \   BAD - command unknown or arguments invalid\n      The CREATE command creates\
    \ a mailbox with the given name.  An OK\n      response is returned only if a\
    \ new mailbox with that name has been\n      created.  It is an error to attempt\
    \ to create INBOX or a mailbox\n      with a name that refers to an extant mailbox.\
    \  Any error in\n      creation will return a tagged NO response.\n      If the\
    \ mailbox name is suffixed with the server's hierarchy\n      separator character\
    \ (as returned from the server by a LIST\n      command), this is a declaration\
    \ that the client intends to create\n      mailbox names under this name in the\
    \ hierarchy.  Server\n      implementations that do not require this declaration\
    \ MUST ignore\n      the declaration.  In any case, the name created is without\
    \ the\n      trailing hierarchy delimiter.\n      If the server's hierarchy separator\
    \ character appears elsewhere in\n      the name, the server SHOULD create any\
    \ superior hierarchical names\n      that are needed for the CREATE command to\
    \ be successfully\n      completed.  In other words, an attempt to create \"foo/bar/zap\"\
    \ on\n      a server in which \"/\" is the hierarchy separator character SHOULD\n\
    \      create foo/ and foo/bar/ if they do not already exist.\n      If a new\
    \ mailbox is created with the same name as a mailbox which\n      was deleted,\
    \ its unique identifiers MUST be greater than any\n      unique identifiers used\
    \ in the previous incarnation of the mailbox\n      UNLESS the new incarnation\
    \ has a different unique identifier\n      validity value.  See the description\
    \ of the UID command for more\n      detail.\n   Example:    C: A003 CREATE owatagusiam/\n\
    \               S: A003 OK CREATE completed\n               C: A004 CREATE owatagusiam/blurdybloop\n\
    \               S: A004 OK CREATE completed\n        Note: The interpretation\
    \ of this example depends on whether\n        \"/\" was returned as the hierarchy\
    \ separator from LIST.  If\n        \"/\" is the hierarchy separator, a new level\
    \ of hierarchy\n        named \"owatagusiam\" with a member called \"blurdybloop\"\
    \ is\n        created.  Otherwise, two mailboxes at the same hierarchy\n     \
    \   level are created.\n"
- title: 6.3.4.  DELETE Command
  contents:
  - "6.3.4.  DELETE Command\n   Arguments:  mailbox name\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - delete completed\n         \
    \      NO - delete failure: can't delete mailbox with that name\n            \
    \   BAD - command unknown or arguments invalid\n      The DELETE command permanently\
    \ removes the mailbox with the given\n      name.  A tagged OK response is returned\
    \ only if the mailbox has\n      been deleted.  It is an error to attempt to delete\
    \ INBOX or a\n      mailbox name that does not exist.\n      The DELETE command\
    \ MUST NOT remove inferior hierarchical names.\n      For example, if a mailbox\
    \ \"foo\" has an inferior \"foo.bar\"\n      (assuming \".\" is the hierarchy\
    \ delimiter character), removing\n      \"foo\" MUST NOT remove \"foo.bar\". \
    \ It is an error to attempt to\n      delete a name that has inferior hierarchical\
    \ names and also has\n      the \\Noselect mailbox name attribute (see the description\
    \ of the\n      LIST response for more details).\n      It is permitted to delete\
    \ a name that has inferior hierarchical\n      names and does not have the \\\
    Noselect mailbox name attribute.  In\n      this case, all messages in that mailbox\
    \ are removed, and the name\n      will acquire the \\Noselect mailbox name attribute.\n\
    \      The value of the highest-used unique identifier of the deleted\n      mailbox\
    \ MUST be preserved so that a new mailbox created with the\n      same name will\
    \ not reuse the identifiers of the former\n      incarnation, UNLESS the new incarnation\
    \ has a different unique\n      identifier validity value.  See the description\
    \ of the UID command\n      for more detail.\n   Examples:   C: A682 LIST \"\"\
    \ *\n               S: * LIST () \"/\" blurdybloop\n               S: * LIST (\\\
    Noselect) \"/\" foo\n               S: * LIST () \"/\" foo/bar\n             \
    \  S: A682 OK LIST completed\n               C: A683 DELETE blurdybloop\n    \
    \           S: A683 OK DELETE completed\n               C: A684 DELETE foo\n \
    \              S: A684 NO Name \"foo\" has inferior hierarchical names\n     \
    \          C: A685 DELETE foo/bar\n               S: A685 OK DELETE Completed\n\
    \               C: A686 LIST \"\" *\n               S: * LIST (\\Noselect) \"\
    /\" foo\n               S: A686 OK LIST completed\n               C: A687 DELETE\
    \ foo\n               S: A687 OK DELETE Completed\n               C: A82 LIST\
    \ \"\" *\n               S: * LIST () \".\" blurdybloop\n               S: * LIST\
    \ () \".\" foo\n               S: * LIST () \".\" foo.bar\n               S: A82\
    \ OK LIST completed\n               C: A83 DELETE blurdybloop\n              \
    \ S: A83 OK DELETE completed\n               C: A84 DELETE foo\n             \
    \  S: A84 OK DELETE Completed\n               C: A85 LIST \"\" *\n           \
    \    S: * LIST () \".\" foo.bar\n               S: A85 OK LIST completed\n   \
    \            C: A86 LIST \"\" %\n               S: * LIST (\\Noselect) \".\" foo\n\
    \               S: A86 OK LIST completed\n"
- title: 6.3.5.  RENAME Command
  contents:
  - "6.3.5.  RENAME Command\n   Arguments:  existing mailbox name\n              \
    \ new mailbox name\n   Responses:  no specific responses for this command\n  \
    \ Result:     OK - rename completed\n               NO - rename failure: can't\
    \ rename mailbox with that name,\n                    can't rename to mailbox\
    \ with that name\n               BAD - command unknown or arguments invalid\n\
    \      The RENAME command changes the name of a mailbox.  A tagged OK\n      response\
    \ is returned only if the mailbox has been renamed.  It is\n      an error to\
    \ attempt to rename from a mailbox name that does not\n      exist or to a mailbox\
    \ name that already exists.  Any error in\n      renaming will return a tagged\
    \ NO response.\n      If the name has inferior hierarchical names, then the inferior\n\
    \      hierarchical names MUST also be renamed.  For example, a rename of\n  \
    \    \"foo\" to \"zap\" will rename \"foo/bar\" (assuming \"/\" is the\n     \
    \ hierarchy delimiter character) to \"zap/bar\".\n      If the server's hierarchy\
    \ separator character appears in the name,\n      the server SHOULD create any\
    \ superior hierarchical names that are\n      needed for the RENAME command to\
    \ complete successfully.  In other\n      words, an attempt to rename \"foo/bar/zap\"\
    \ to baz/rag/zowie on a\n      server in which \"/\" is the hierarchy separator\
    \ character SHOULD\n      create baz/ and baz/rag/ if they do not already exist.\n\
    \      The value of the highest-used unique identifier of the old mailbox\n  \
    \    name MUST be preserved so that a new mailbox created with the same\n    \
    \  name will not reuse the identifiers of the former incarnation,\n      UNLESS\
    \ the new incarnation has a different unique identifier\n      validity value.\
    \  See the description of the UID command for more\n      detail.\n      Renaming\
    \ INBOX is permitted, and has special behavior.  It moves\n      all messages\
    \ in INBOX to a new mailbox with the given name,\n      leaving INBOX empty. \
    \ If the server implementation supports\n      inferior hierarchical names of\
    \ INBOX, these are unaffected by a\n      rename of INBOX.\n   Examples:   C:\
    \ A682 LIST \"\" *\n               S: * LIST () \"/\" blurdybloop\n          \
    \     S: * LIST (\\Noselect) \"/\" foo\n               S: * LIST () \"/\" foo/bar\n\
    \               S: A682 OK LIST completed\n               C: A683 RENAME blurdybloop\
    \ sarasoop\n               S: A683 OK RENAME completed\n               C: A684\
    \ RENAME foo zowie\n               S: A684 OK RENAME Completed\n             \
    \  C: A685 LIST \"\" *\n               S: * LIST () \"/\" sarasoop\n         \
    \      S: * LIST (\\Noselect) \"/\" zowie\n               S: * LIST () \"/\" zowie/bar\n\
    \               S: A685 OK LIST completed\n               C: Z432 LIST \"\" *\n\
    \               S: * LIST () \".\" INBOX\n               S: * LIST () \".\" INBOX.bar\n\
    \               S: Z432 OK LIST completed\n               C: Z433 RENAME INBOX\
    \ old-mail\n               S: Z433 OK RENAME completed\n               C: Z434\
    \ LIST \"\" *\n               S: * LIST () \".\" INBOX\n               S: * LIST\
    \ () \".\" INBOX.bar\n               S: * LIST () \".\" old-mail\n           \
    \    S: Z434 OK LIST completed\n"
- title: 6.3.6.  SUBSCRIBE Command
  contents:
  - "6.3.6.  SUBSCRIBE Command\n   Arguments:  mailbox\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - subscribe completed\n      \
    \         NO - subscribe failure: can't subscribe to that name\n             \
    \  BAD - command unknown or arguments invalid\n      The SUBSCRIBE command adds\
    \ the specified mailbox name to the\n      server's set of \"active\" or \"subscribed\"\
    \ mailboxes as returned by\n      the LSUB command.  This command returns a tagged\
    \ OK response only\n      if the subscription is successful.\n      A server MAY\
    \ validate the mailbox argument to SUBSCRIBE to verify\n      that it exists.\
    \  However, it MUST NOT unilaterally remove an\n      existing mailbox name from\
    \ the subscription list even if a mailbox\n      by that name no longer exists.\n\
    \           Note: This requirement is because a server site can\n           choose\
    \ to routinely remove a mailbox with a well-known\n           name (e.g., \"system-alerts\"\
    ) after its contents expire,\n           with the intention of recreating it when\
    \ new contents\n           are appropriate.\n   Example:    C: A002 SUBSCRIBE\
    \ #news.comp.mail.mime\n               S: A002 OK SUBSCRIBE completed\n"
- title: 6.3.7.  UNSUBSCRIBE Command
  contents:
  - "6.3.7.  UNSUBSCRIBE Command\n   Arguments:  mailbox name\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - unsubscribe completed\n    \
    \           NO - unsubscribe failure: can't unsubscribe that name\n          \
    \     BAD - command unknown or arguments invalid\n      The UNSUBSCRIBE command\
    \ removes the specified mailbox name from\n      the server's set of \"active\"\
    \ or \"subscribed\" mailboxes as returned\n      by the LSUB command.  This command\
    \ returns a tagged OK response\n      only if the unsubscription is successful.\n\
    \   Example:    C: A002 UNSUBSCRIBE #news.comp.mail.mime\n               S: A002\
    \ OK UNSUBSCRIBE completed\n"
- title: 6.3.8.  LIST Command
  contents:
  - "6.3.8.  LIST Command\n   Arguments:  reference name\n               mailbox name\
    \ with possible wildcards\n   Responses:  untagged responses: LIST\n   Result:\
    \     OK - list completed\n               NO - list failure: can't list that reference\
    \ or name\n               BAD - command unknown or arguments invalid\n      The\
    \ LIST command returns a subset of names from the complete set\n      of all names\
    \ available to the client.  Zero or more untagged LIST\n      replies are returned,\
    \ containing the name attributes, hierarchy\n      delimiter, and name; see the\
    \ description of the LIST reply for\n      more detail.\n      The LIST command\
    \ SHOULD return its data quickly, without undue\n      delay.  For example, it\
    \ SHOULD NOT go to excess trouble to\n      calculate the \\Marked or \\Unmarked\
    \ status or perform other\n      processing; if each name requires 1 second of\
    \ processing, then a\n      list of 1200 names would take 20 minutes!\n      An\
    \ empty (\"\" string) reference name argument indicates that the\n      mailbox\
    \ name is interpreted as by SELECT.  The returned mailbox\n      names MUST match\
    \ the supplied mailbox name pattern.  A non-empty\n      reference name argument\
    \ is the name of a mailbox or a level of\n      mailbox hierarchy, and indicates\
    \ the context in which the mailbox\n      name is interpreted.\n      An empty\
    \ (\"\" string) mailbox name argument is a special request to\n      return the\
    \ hierarchy delimiter and the root name of the name given\n      in the reference.\
    \  The value returned as the root MAY be the empty\n      string if the reference\
    \ is non-rooted or is an empty string.  In\n      all cases, a hierarchy delimiter\
    \ (or NIL if there is no hierarchy)\n      is returned.  This permits a client\
    \ to get the hierarchy delimiter\n      (or find out that the mailbox names are\
    \ flat) even when no\n      mailboxes by that name currently exist.\n      The\
    \ reference and mailbox name arguments are interpreted into a\n      canonical\
    \ form that represents an unambiguous left-to-right\n      hierarchy.  The returned\
    \ mailbox names will be in the interpreted\n      form.\n           Note: The\
    \ interpretation of the reference argument is\n           implementation-defined.\
    \  It depends upon whether the\n           server implementation has a concept\
    \ of the \"current\n           working directory\" and leading \"break out characters\"\
    ,\n           which override the current working directory.\n           For example,\
    \ on a server which exports a UNIX or NT\n           filesystem, the reference\
    \ argument contains the current\n           working directory, and the mailbox\
    \ name argument would\n           contain the name as interpreted in the current\
    \ working\n           directory.\n           If a server implementation has no\
    \ concept of break out\n           characters, the canonical form is normally\
    \ the reference\n           name appended with the mailbox name.  Note that if\
    \ the\n           server implements the namespace convention (section\n      \
    \     5.1.2), \"#\" is a break out character and must be treated\n           as\
    \ such.\n           If the reference argument is not a level of mailbox\n    \
    \       hierarchy (that is, it is a \\NoInferiors name), and/or\n           the\
    \ reference argument does not end with the hierarchy\n           delimiter, it\
    \ is implementation-dependent how this is\n           interpreted.  For example,\
    \ a reference of \"foo/bar\" and\n           mailbox name of \"rag/baz\" could\
    \ be interpreted as\n           \"foo/bar/rag/baz\", \"foo/barrag/baz\", or \"\
    foo/rag/baz\".\n           A client SHOULD NOT use such a reference argument except\n\
    \           at the explicit request of the user.  A hierarchical\n           browser\
    \ MUST NOT make any assumptions about server\n           interpretation of the\
    \ reference unless the reference is\n           a level of mailbox hierarchy AND\
    \ ends with the hierarchy\n           delimiter.\n      Any part of the reference\
    \ argument that is included in the\n      interpreted form SHOULD prefix the interpreted\
    \ form.  It SHOULD\n      also be in the same form as the reference name argument.\
    \  This\n      rule permits the client to determine if the returned mailbox name\n\
    \      is in the context of the reference argument, or if something about\n  \
    \    the mailbox argument overrode the reference argument.  Without\n      this\
    \ rule, the client would have to have knowledge of the server's\n      naming\
    \ semantics including what characters are \"breakouts\" that\n      override a\
    \ naming context.\n           For example, here are some examples of how references\n\
    \           and mailbox names might be interpreted on a UNIX-based\n         \
    \  server:\n               Reference     Mailbox Name  Interpretation\n      \
    \         ------------  ------------  --------------\n               ~smith/Mail/\
    \  foo.*         ~smith/Mail/foo.*\n               archive/      %           \
    \  archive/%\n               #news.        comp.mail.*   #news.comp.mail.*\n \
    \              ~smith/Mail/  /usr/doc/foo  /usr/doc/foo\n               archive/\
    \      ~fred/Mail/*  ~fred/Mail/*\n           The first three examples demonstrate\
    \ interpretations in\n           the context of the reference argument.  Note\
    \ that\n           \"~smith/Mail\" SHOULD NOT be transformed into something\n\
    \           like \"/u2/users/smith/Mail\", or it would be impossible\n       \
    \    for the client to determine that the interpretation was\n           in the\
    \ context of the reference.\n      The character \"*\" is a wildcard, and matches\
    \ zero or more\n      characters at this position.  The character \"%\" is similar\
    \ to \"*\",\n      but it does not match a hierarchy delimiter.  If the \"%\"\
    \ wildcard\n      is the last character of a mailbox name argument, matching levels\n\
    \      of hierarchy are also returned.  If these levels of hierarchy are\n   \
    \   not also selectable mailboxes, they are returned with the\n      \\Noselect\
    \ mailbox name attribute (see the description of the LIST\n      response for\
    \ more details).\n      Server implementations are permitted to \"hide\" otherwise\n\
    \      accessible mailboxes from the wildcard characters, by preventing\n    \
    \  certain characters or names from matching a wildcard in certain\n      situations.\
    \  For example, a UNIX-based server might restrict the\n      interpretation of\
    \ \"*\" so that an initial \"/\" character does not\n      match.\n      The special\
    \ name INBOX is included in the output from LIST, if\n      INBOX is supported\
    \ by this server for this user and if the\n      uppercase string \"INBOX\" matches\
    \ the interpreted reference and\n      mailbox name arguments with wildcards as\
    \ described above.  The\n      criteria for omitting INBOX is whether SELECT INBOX\
    \ will return\n      failure; it is not relevant whether the user's real INBOX\
    \ resides\n      on this or some other server.\n   Example:    C: A101 LIST \"\
    \" \"\"\n               S: * LIST (\\Noselect) \"/\" \"\"\n               S: A101\
    \ OK LIST Completed\n               C: A102 LIST #news.comp.mail.misc \"\"\n \
    \              S: * LIST (\\Noselect) \".\" #news.\n               S: A102 OK\
    \ LIST Completed\n               C: A103 LIST /usr/staff/jones \"\"\n        \
    \       S: * LIST (\\Noselect) \"/\" /\n               S: A103 OK LIST Completed\n\
    \               C: A202 LIST ~/Mail/ %\n               S: * LIST (\\Noselect)\
    \ \"/\" ~/Mail/foo\n               S: * LIST () \"/\" ~/Mail/meetings\n      \
    \         S: A202 OK LIST completed\n"
- title: 6.3.9.  LSUB Command
  contents:
  - "6.3.9.  LSUB Command\n   Arguments:  reference name\n               mailbox name\
    \ with possible wildcards\n   Responses:  untagged responses: LSUB\n   Result:\
    \     OK - lsub completed\n               NO - lsub failure: can't list that reference\
    \ or name\n               BAD - command unknown or arguments invalid\n      The\
    \ LSUB command returns a subset of names from the set of names\n      that the\
    \ user has declared as being \"active\" or \"subscribed\".\n      Zero or more\
    \ untagged LSUB replies are returned.  The arguments to\n      LSUB are in the\
    \ same form as those for LIST.\n      The returned untagged LSUB response MAY\
    \ contain different mailbox\n      flags from a LIST untagged response.  If this\
    \ should happen, the\n      flags in the untagged LIST are considered more authoritative.\n\
    \      A special situation occurs when using LSUB with the % wildcard.\n     \
    \ Consider what happens if \"foo/bar\" (with a hierarchy delimiter of\n      \"\
    /\") is subscribed but \"foo\" is not.  A \"%\" wildcard to LSUB must\n      return\
    \ foo, not foo/bar, in the LSUB response, and it MUST be\n      flagged with the\
    \ \\Noselect attribute.\n      The server MUST NOT unilaterally remove an existing\
    \ mailbox name\n      from the subscription list even if a mailbox by that name\
    \ no\n      longer exists.\n   Example:    C: A002 LSUB \"#news.\" \"comp.mail.*\"\
    \n               S: * LSUB () \".\" #news.comp.mail.mime\n               S: *\
    \ LSUB () \".\" #news.comp.mail.misc\n               S: A002 OK LSUB completed\n\
    \               C: A003 LSUB \"#news.\" \"comp.%\"\n               S: * LSUB (\\\
    NoSelect) \".\" #news.comp.mail\n               S: A003 OK LSUB completed\n"
- title: 6.3.10. STATUS Command
  contents:
  - "6.3.10. STATUS Command\n   Arguments:  mailbox name\n               status data\
    \ item names\n   Responses:  untagged responses: STATUS\n   Result:     OK - status\
    \ completed\n               NO - status failure: no status for that name\n   \
    \            BAD - command unknown or arguments invalid\n      The STATUS command\
    \ requests the status of the indicated mailbox.\n      It does not change the\
    \ currently selected mailbox, nor does it\n      affect the state of any messages\
    \ in the queried mailbox (in\n      particular, STATUS MUST NOT cause messages\
    \ to lose the \\Recent\n      flag).\n      The STATUS command provides an alternative\
    \ to opening a second\n      IMAP4rev1 connection and doing an EXAMINE command\
    \ on a mailbox to\n      query that mailbox's status without deselecting the current\n\
    \      mailbox in the first IMAP4rev1 connection.\n      Unlike the LIST command,\
    \ the STATUS command is not guaranteed to\n      be fast in its response.  Under\
    \ certain circumstances, it can be\n      quite slow.  In some implementations,\
    \ the server is obliged to\n      open the mailbox read-only internally to obtain\
    \ certain status\n      information.  Also unlike the LIST command, the STATUS\
    \ command\n      does not accept wildcards.\n           Note: The STATUS command\
    \ is intended to access the\n           status of mailboxes other than the currently\
    \ selected\n           mailbox.  Because the STATUS command can cause the\n  \
    \         mailbox to be opened internally, and because this\n           information\
    \ is available by other means on the selected\n           mailbox, the STATUS\
    \ command SHOULD NOT be used on the\n           currently selected mailbox.\n\
    \           The STATUS command MUST NOT be used as a \"check for new\n       \
    \    messages in the selected mailbox\" operation (refer to\n           sections\
    \ 7, 7.3.1, and 7.3.2 for more information about\n           the proper method\
    \ for new message checking).\n           Because the STATUS command is not guaranteed\
    \ to be fast\n           in its results, clients SHOULD NOT expect to be able\
    \ to\n           issue many consecutive STATUS commands and obtain\n         \
    \  reasonable performance.\n      The currently defined status data items that\
    \ can be requested are:\n      MESSAGES\n         The number of messages in the\
    \ mailbox.\n      RECENT\n         The number of messages with the \\Recent flag\
    \ set.\n      UIDNEXT\n         The next unique identifier value of the mailbox.\
    \  Refer to\n         section 2.3.1.1 for more information.\n      UIDVALIDITY\n\
    \         The unique identifier validity value of the mailbox.  Refer to\n   \
    \      section 2.3.1.1 for more information.\n      UNSEEN\n         The number\
    \ of messages which do not have the \\Seen flag set.\n   Example:    C: A042 STATUS\
    \ blurdybloop (UIDNEXT MESSAGES)\n               S: * STATUS blurdybloop (MESSAGES\
    \ 231 UIDNEXT 44292)\n               S: A042 OK STATUS completed\n"
- title: 6.3.11. APPEND Command
  contents:
  - "6.3.11. APPEND Command\n   Arguments:  mailbox name\n               OPTIONAL\
    \ flag parenthesized list\n               OPTIONAL date/time string\n        \
    \       message literal\n   Responses:  no specific responses for this command\n\
    \   Result:     OK - append completed\n               NO - append error: can't\
    \ append to that mailbox, error\n                    in flags or date/time or\
    \ message text\n               BAD - command unknown or arguments invalid\n  \
    \    The APPEND command appends the literal argument as a new message\n      to\
    \ the end of the specified destination mailbox.  This argument\n      SHOULD be\
    \ in the format of an [RFC-2822] message.  8-bit\n      characters are permitted\
    \ in the message.  A server implementation\n      that is unable to preserve 8-bit\
    \ data properly MUST be able to\n      reversibly convert 8-bit APPEND data to\
    \ 7-bit using a [MIME-IMB]\n      content transfer encoding.\n           Note:\
    \ There MAY be exceptions, e.g., draft messages, in\n           which required\
    \ [RFC-2822] header lines are omitted in\n           the message literal argument\
    \ to APPEND.  The full\n           implications of doing so MUST be understood\
    \ and\n           carefully weighed.\n      If a flag parenthesized list is specified,\
    \ the flags SHOULD be set\n      in the resulting message; otherwise, the flag\
    \ list of the\n      resulting message is set to empty by default.  In either\
    \ case, the\n      Recent flag is also set.\n      If a date-time is specified,\
    \ the internal date SHOULD be set in\n      the resulting message; otherwise,\
    \ the internal date of the\n      resulting message is set to the current date\
    \ and time by default.\n      If the append is unsuccessful for any reason, the\
    \ mailbox MUST be\n      restored to its state before the APPEND attempt; no partial\n\
    \      appending is permitted.\n      If the destination mailbox does not exist,\
    \ a server MUST return an\n      error, and MUST NOT automatically create the\
    \ mailbox.  Unless it\n      is certain that the destination mailbox can not be\
    \ created, the\n      server MUST send the response code \"[TRYCREATE]\" as the\
    \ prefix of\n      the text of the tagged NO response.  This gives a hint to the\n\
    \      client that it can attempt a CREATE command and retry the APPEND\n    \
    \  if the CREATE is successful.\n      If the mailbox is currently selected, the\
    \ normal new message\n      actions SHOULD occur.  Specifically, the server SHOULD\
    \ notify the\n      client immediately via an untagged EXISTS response.  If the\
    \ server\n      does not do so, the client MAY issue a NOOP command (or failing\n\
    \      that, a CHECK command) after one or more APPEND commands.\n   Example:\
    \    C: A003 APPEND saved-messages (\\Seen) {310}\n               S: + Ready for\
    \ literal data\n               C: Date: Mon, 7 Feb 1994 21:52:25 -0800 (PST)\n\
    \               C: From: Fred Foobar <foobar@Blurdybloop.COM>\n              \
    \ C: Subject: afternoon meeting\n               C: To: mooch@owatagu.siam.edu\n\
    \               C: Message-Id: <B27397-0100000@Blurdybloop.COM>\n            \
    \   C: MIME-Version: 1.0\n               C: Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n\
    \               C:\n               C: Hello Joe, do you think we can meet at 3:30\
    \ tomorrow?\n               C:\n               S: A003 OK APPEND completed\n \
    \       Note: The APPEND command is not used for message delivery,\n        because\
    \ it does not provide a mechanism to transfer [SMTP]\n        envelope information.\n"
- title: 6.4.    Client Commands - Selected State
  contents:
  - "6.4.    Client Commands - Selected State\n   In the selected state, commands\
    \ that manipulate messages in a mailbox\n   are permitted.\n   In addition to\
    \ the universal commands (CAPABILITY, NOOP, and LOGOUT),\n   and the authenticated\
    \ state commands (SELECT, EXAMINE, CREATE,\n   DELETE, RENAME, SUBSCRIBE, UNSUBSCRIBE,\
    \ LIST, LSUB, STATUS, and\n   APPEND), the following commands are valid in the\
    \ selected state:\n   CHECK, CLOSE, EXPUNGE, SEARCH, FETCH, STORE, COPY, and UID.\n"
- title: 6.4.1.  CHECK Command
  contents:
  - "6.4.1.  CHECK Command\n   Arguments:  none\n   Responses:  no specific responses\
    \ for this command\n   Result:     OK - check completed\n               BAD -\
    \ command unknown or arguments invalid\n      The CHECK command requests a checkpoint\
    \ of the currently selected\n      mailbox.  A checkpoint refers to any implementation-dependent\n\
    \      housekeeping associated with the mailbox (e.g., resolving the\n      server's\
    \ in-memory state of the mailbox with the state on its\n      disk) that is not\
    \ normally executed as part of each command.  A\n      checkpoint MAY take a non-instantaneous\
    \ amount of real time to\n      complete.  If a server implementation has no such\
    \ housekeeping\n      considerations, CHECK is equivalent to NOOP.\n      There\
    \ is no guarantee that an EXISTS untagged response will happen\n      as a result\
    \ of CHECK.  NOOP, not CHECK, SHOULD be used for new\n      message polling.\n\
    \   Example:    C: FXXZ CHECK\n               S: FXXZ OK CHECK Completed\n"
- title: 6.4.2.  CLOSE Command
  contents:
  - "6.4.2.  CLOSE Command\n   Arguments:  none\n   Responses:  no specific responses\
    \ for this command\n   Result:     OK - close completed, now in authenticated\
    \ state\n               BAD - command unknown or arguments invalid\n      The\
    \ CLOSE command permanently removes all messages that have the\n      \\Deleted\
    \ flag set from the currently selected mailbox, and returns\n      to the authenticated\
    \ state from the selected state.  No untagged\n      EXPUNGE responses are sent.\n\
    \      No messages are removed, and no error is given, if the mailbox is\n   \
    \   selected by an EXAMINE command or is otherwise selected read-only.\n     \
    \ Even if a mailbox is selected, a SELECT, EXAMINE, or LOGOUT\n      command MAY\
    \ be issued without previously issuing a CLOSE command.\n      The SELECT, EXAMINE,\
    \ and LOGOUT commands implicitly close the\n      currently selected mailbox without\
    \ doing an expunge.  However,\n      when many messages are deleted, a CLOSE-LOGOUT\
    \ or CLOSE-SELECT\n      sequence is considerably faster than an EXPUNGE-LOGOUT\
    \ or\n      EXPUNGE-SELECT because no untagged EXPUNGE responses (which the\n\
    \      client would probably ignore) are sent.\n   Example:    C: A341 CLOSE\n\
    \               S: A341 OK CLOSE completed\n"
- title: 6.4.3.  EXPUNGE Command
  contents:
  - "6.4.3.  EXPUNGE Command\n   Arguments:  none\n   Responses:  untagged responses:\
    \ EXPUNGE\n   Result:     OK - expunge completed\n               NO - expunge\
    \ failure: can't expunge (e.g., permission\n                    denied)\n    \
    \           BAD - command unknown or arguments invalid\n      The EXPUNGE command\
    \ permanently removes all messages that have the\n      \\Deleted flag set from\
    \ the currently selected mailbox.  Before\n      returning an OK to the client,\
    \ an untagged EXPUNGE response is\n      sent for each message that is removed.\n\
    \   Example:    C: A202 EXPUNGE\n               S: * 3 EXPUNGE\n             \
    \  S: * 3 EXPUNGE\n               S: * 5 EXPUNGE\n               S: * 8 EXPUNGE\n\
    \               S: A202 OK EXPUNGE completed\n        Note: In this example, messages\
    \ 3, 4, 7, and 11 had the\n        \\Deleted flag set.  See the description of\
    \ the EXPUNGE\n        response for further explanation.\n"
- title: 6.4.4.  SEARCH Command
  contents:
  - "6.4.4.  SEARCH Command\n   Arguments:  OPTIONAL [CHARSET] specification\n   \
    \            searching criteria (one or more)\n   Responses:  REQUIRED untagged\
    \ response: SEARCH\n   Result:     OK - search completed\n               NO -\
    \ search error: can't search that [CHARSET] or\n                    criteria\n\
    \               BAD - command unknown or arguments invalid\n      The SEARCH command\
    \ searches the mailbox for messages that match\n      the given searching criteria.\
    \  Searching criteria consist of one\n      or more search keys.  The untagged\
    \ SEARCH response from the server\n      contains a listing of message sequence\
    \ numbers corresponding to\n      those messages that match the searching criteria.\n\
    \      When multiple keys are specified, the result is the intersection\n    \
    \  (AND function) of all the messages that match those keys.  For\n      example,\
    \ the criteria DELETED FROM \"SMITH\" SINCE 1-Feb-1994 refers\n      to all deleted\
    \ messages from Smith that were placed in the mailbox\n      since February 1,\
    \ 1994.  A search key can also be a parenthesized\n      list of one or more search\
    \ keys (e.g., for use with the OR and NOT\n      keys).\n      Server implementations\
    \ MAY exclude [MIME-IMB] body parts with\n      terminal content media types other\
    \ than TEXT and MESSAGE from\n      consideration in SEARCH matching.\n      The\
    \ OPTIONAL [CHARSET] specification consists of the word\n      \"CHARSET\" followed\
    \ by a registered [CHARSET].  It indicates the\n      [CHARSET] of the strings\
    \ that appear in the search criteria.\n      [MIME-IMB] content transfer encodings,\
    \ and [MIME-HDRS] strings in\n      [RFC-2822]/[MIME-IMB] headers, MUST be decoded\
    \ before comparing\n      text in a [CHARSET] other than US-ASCII.  US-ASCII MUST\
    \ be\n      supported; other [CHARSET]s MAY be supported.\n      If the server\
    \ does not support the specified [CHARSET], it MUST\n      return a tagged NO\
    \ response (not a BAD).  This response SHOULD\n      contain the BADCHARSET response\
    \ code, which MAY list the\n      [CHARSET]s supported by the server.\n      In\
    \ all search keys that use strings, a message matches the key if\n      the string\
    \ is a substring of the field.  The matching is\n      case-insensitive.\n   \
    \   The defined search keys are as follows.  Refer to the Formal\n      Syntax\
    \ section for the precise syntactic definitions of the\n      arguments.\n   \
    \   <sequence set>\n         Messages with message sequence numbers corresponding\
    \ to the\n         specified message sequence number set.\n      ALL\n       \
    \  All messages in the mailbox; the default initial key for\n         ANDing.\n\
    \      ANSWERED\n         Messages with the \\Answered flag set.\n      BCC <string>\n\
    \         Messages that contain the specified string in the envelope\n       \
    \  structure's BCC field.\n      BEFORE <date>\n         Messages whose internal\
    \ date (disregarding time and timezone)\n         is earlier than the specified\
    \ date.\n      BODY <string>\n         Messages that contain the specified string\
    \ in the body of the\n         message.\n      CC <string>\n         Messages\
    \ that contain the specified string in the envelope\n         structure's CC field.\n\
    \      DELETED\n         Messages with the \\Deleted flag set.\n      DRAFT\n\
    \         Messages with the \\Draft flag set.\n      FLAGGED\n         Messages\
    \ with the \\Flagged flag set.\n      FROM <string>\n         Messages that contain\
    \ the specified string in the envelope\n         structure's FROM field.\n   \
    \   HEADER <field-name> <string>\n         Messages that have a header with the\
    \ specified field-name (as\n         defined in [RFC-2822]) and that contains\
    \ the specified string\n         in the text of the header (what comes after the\
    \ colon).  If the\n         string to search is zero-length, this matches all\
    \ messages that\n         have a header line with the specified field-name regardless\
    \ of\n         the contents.\n      KEYWORD <flag>\n         Messages with the\
    \ specified keyword flag set.\n      LARGER <n>\n         Messages with an [RFC-2822]\
    \ size larger than the specified\n         number of octets.\n      NEW\n    \
    \     Messages that have the \\Recent flag set but not the \\Seen flag.\n    \
    \     This is functionally equivalent to \"(RECENT UNSEEN)\".\n      NOT <search-key>\n\
    \         Messages that do not match the specified search key.\n      OLD\n  \
    \       Messages that do not have the \\Recent flag set.  This is\n         functionally\
    \ equivalent to \"NOT RECENT\" (as opposed to \"NOT\n         NEW\").\n      ON\
    \ <date>\n         Messages whose internal date (disregarding time and timezone)\n\
    \         is within the specified date.\n      OR <search-key1> <search-key2>\n\
    \         Messages that match either search key.\n      RECENT\n         Messages\
    \ that have the \\Recent flag set.\n      SEEN\n         Messages that have the\
    \ \\Seen flag set.\n      SENTBEFORE <date>\n         Messages whose [RFC-2822]\
    \ Date: header (disregarding time and\n         timezone) is earlier than the\
    \ specified date.\n      SENTON <date>\n         Messages whose [RFC-2822] Date:\
    \ header (disregarding time and\n         timezone) is within the specified date.\n\
    \      SENTSINCE <date>\n         Messages whose [RFC-2822] Date: header (disregarding\
    \ time and\n         timezone) is within or later than the specified date.\n \
    \     SINCE <date>\n         Messages whose internal date (disregarding time and\
    \ timezone)\n         is within or later than the specified date.\n      SMALLER\
    \ <n>\n         Messages with an [RFC-2822] size smaller than the specified\n\
    \         number of octets.\n      SUBJECT <string>\n         Messages that contain\
    \ the specified string in the envelope\n         structure's SUBJECT field.\n\
    \      TEXT <string>\n         Messages that contain the specified string in the\
    \ header or\n         body of the message.\n      TO <string>\n         Messages\
    \ that contain the specified string in the envelope\n         structure's TO field.\n\
    \      UID <sequence set>\n         Messages with unique identifiers corresponding\
    \ to the specified\n         unique identifier set.  Sequence set ranges are permitted.\n\
    \      UNANSWERED\n         Messages that do not have the \\Answered flag set.\n\
    \      UNDELETED\n         Messages that do not have the \\Deleted flag set.\n\
    \      UNDRAFT\n         Messages that do not have the \\Draft flag set.\n   \
    \   UNFLAGGED\n         Messages that do not have the \\Flagged flag set.\n  \
    \    UNKEYWORD <flag>\n         Messages that do not have the specified keyword\
    \ flag set.\n      UNSEEN\n         Messages that do not have the \\Seen flag\
    \ set.\n   Example:    C: A282 SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM \"Smith\"\
    \n               S: * SEARCH 2 84 882\n               S: A282 OK SEARCH completed\n\
    \               C: A283 SEARCH TEXT \"string not in mailbox\"\n              \
    \ S: * SEARCH\n               S: A283 OK SEARCH completed\n               C: A284\
    \ SEARCH CHARSET UTF-8 TEXT {6}\n               C: XXXXXX\n               S: *\
    \ SEARCH 43\n               S: A284 OK SEARCH completed\n        Note: Since this\
    \ document is restricted to 7-bit ASCII\n        text, it is not possible to show\
    \ actual UTF-8 data.  The\n        \"XXXXXX\" is a placeholder for what would\
    \ be 6 octets of\n        8-bit data in an actual transaction.\n"
- title: 6.4.5.  FETCH Command
  contents:
  - "6.4.5.  FETCH Command\n   Arguments:  sequence set\n               message data\
    \ item names or macro\n   Responses:  untagged responses: FETCH\n   Result:  \
    \   OK - fetch completed\n               NO - fetch error: can't fetch that data\n\
    \               BAD - command unknown or arguments invalid\n      The FETCH command\
    \ retrieves data associated with a message in the\n      mailbox.  The data items\
    \ to be fetched can be either a single atom\n      or a parenthesized list.\n\
    \      Most data items, identified in the formal syntax under the\n      msg-att-static\
    \ rule, are static and MUST NOT change for any\n      particular message.  Other\
    \ data items, identified in the formal\n      syntax under the msg-att-dynamic\
    \ rule, MAY change, either as a\n      result of a STORE command or due to external\
    \ events.\n           For example, if a client receives an ENVELOPE for a\n  \
    \         message when it already knows the envelope, it can\n           safely\
    \ ignore the newly transmitted envelope.\n      There are three macros which specify\
    \ commonly-used sets of data\n      items, and can be used instead of data items.\
    \  A macro must be\n      used by itself, and not in conjunction with other macros\
    \ or data\n      items.\n      ALL\n         Macro equivalent to: (FLAGS INTERNALDATE\
    \ RFC822.SIZE ENVELOPE)\n      FAST\n         Macro equivalent to: (FLAGS INTERNALDATE\
    \ RFC822.SIZE)\n      FULL\n         Macro equivalent to: (FLAGS INTERNALDATE\
    \ RFC822.SIZE ENVELOPE\n         BODY)\n      The currently defined data items\
    \ that can be fetched are:\n      BODY\n         Non-extensible form of BODYSTRUCTURE.\n\
    \      BODY[<section>]<<partial>>\n         The text of a particular body section.\
    \  The section\n         specification is a set of zero or more part specifiers\n\
    \         delimited by periods.  A part specifier is either a part number\n  \
    \       or one of the following: HEADER, HEADER.FIELDS,\n         HEADER.FIELDS.NOT,\
    \ MIME, and TEXT.  An empty section\n         specification refers to the entire\
    \ message, including the\n         header.\n         Every message has at least\
    \ one part number.  Non-[MIME-IMB]\n         messages, and non-multipart [MIME-IMB]\
    \ messages with no\n         encapsulated message, only have a part 1.\n     \
    \    Multipart messages are assigned consecutive part numbers, as\n         they\
    \ occur in the message.  If a particular part is of type\n         message or\
    \ multipart, its parts MUST be indicated by a period\n         followed by the\
    \ part number within that nested multipart part.\n         A part of type MESSAGE/RFC822\
    \ also has nested part numbers,\n         referring to parts of the MESSAGE part's\
    \ body.\n         The HEADER, HEADER.FIELDS, HEADER.FIELDS.NOT, and TEXT part\n\
    \         specifiers can be the sole part specifier or can be prefixed by\n  \
    \       one or more numeric part specifiers, provided that the numeric\n     \
    \    part specifier refers to a part of type MESSAGE/RFC822.  The\n         MIME\
    \ part specifier MUST be prefixed by one or more numeric\n         part specifiers.\n\
    \         The HEADER, HEADER.FIELDS, and HEADER.FIELDS.NOT part\n         specifiers\
    \ refer to the [RFC-2822] header of the message or of\n         an encapsulated\
    \ [MIME-IMT] MESSAGE/RFC822 message.\n         HEADER.FIELDS and HEADER.FIELDS.NOT\
    \ are followed by a list of\n         field-name (as defined in [RFC-2822]) names,\
    \ and return a\n         subset of the header.  The subset returned by HEADER.FIELDS\n\
    \         contains only those header fields with a field-name that\n         matches\
    \ one of the names in the list; similarly, the subset\n         returned by HEADER.FIELDS.NOT\
    \ contains only the header fields\n         with a non-matching field-name.  The\
    \ field-matching is\n         case-insensitive but otherwise exact.  Subsetting\
    \ does not\n         exclude the [RFC-2822] delimiting blank line between the\
    \ header\n         and the body; the blank line is included in all header fetches,\n\
    \         except in the case of a message which has no body and no blank\n   \
    \      line.\n         The MIME part specifier refers to the [MIME-IMB] header\
    \ for\n         this part.\n         The TEXT part specifier refers to the text\
    \ body of the message,\n         omitting the [RFC-2822] header.\n           \
    \ Here is an example of a complex message with some of its\n            part specifiers:\n\
    \       HEADER     ([RFC-2822] header of the message)\n       TEXT       ([RFC-2822]\
    \ text body of the message) MULTIPART/MIXED\n       1          TEXT/PLAIN\n  \
    \     2          APPLICATION/OCTET-STREAM\n       3          MESSAGE/RFC822\n\
    \       3.HEADER   ([RFC-2822] header of the message)\n       3.TEXT     ([RFC-2822]\
    \ text body of the message) MULTIPART/MIXED\n       3.1        TEXT/PLAIN\n  \
    \     3.2        APPLICATION/OCTET-STREAM\n       4          MULTIPART/MIXED\n\
    \       4.1        IMAGE/GIF\n       4.1.MIME   ([MIME-IMB] header for the IMAGE/GIF)\n\
    \       4.2        MESSAGE/RFC822\n       4.2.HEADER ([RFC-2822] header of the\
    \ message)\n       4.2.TEXT   ([RFC-2822] text body of the message) MULTIPART/MIXED\n\
    \       4.2.1      TEXT/PLAIN\n       4.2.2      MULTIPART/ALTERNATIVE\n     \
    \  4.2.2.1    TEXT/PLAIN\n       4.2.2.2    TEXT/RICHTEXT\n         It is possible\
    \ to fetch a substring of the designated text.\n         This is done by appending\
    \ an open angle bracket (\"<\"), the\n         octet position of the first desired\
    \ octet, a period, the\n         maximum number of octets desired, and a close\
    \ angle bracket\n         (\">\") to the part specifier.  If the starting octet\
    \ is beyond\n         the end of the text, an empty string is returned.\n    \
    \     Any partial fetch that attempts to read beyond the end of the\n        \
    \ text is truncated as appropriate.  A partial fetch that starts\n         at\
    \ octet 0 is returned as a partial fetch, even if this\n         truncation happened.\n\
    \            Note: This means that BODY[]<0.2048> of a 1500-octet message\n  \
    \          will return BODY[]<0> with a literal of size 1500, not\n          \
    \  BODY[].\n            Note: A substring fetch of a HEADER.FIELDS or\n      \
    \      HEADER.FIELDS.NOT part specifier is calculated after\n            subsetting\
    \ the header.\n         The \\Seen flag is implicitly set; if this causes the\
    \ flags to\n         change, they SHOULD be included as part of the FETCH responses.\n\
    \      BODY.PEEK[<section>]<<partial>>\n         An alternate form of BODY[<section>]\
    \ that does not implicitly\n         set the \\Seen flag.\n      BODYSTRUCTURE\n\
    \         The [MIME-IMB] body structure of the message.  This is computed\n  \
    \       by the server by parsing the [MIME-IMB] header fields in the\n       \
    \  [RFC-2822] header and [MIME-IMB] headers.\n      ENVELOPE\n         The envelope\
    \ structure of the message.  This is computed by the\n         server by parsing\
    \ the [RFC-2822] header into the component\n         parts, defaulting various\
    \ fields as necessary.\n      FLAGS\n         The flags that are set for this\
    \ message.\n      INTERNALDATE\n         The internal date of the message.\n \
    \     RFC822\n         Functionally equivalent to BODY[], differing in the syntax\
    \ of\n         the resulting untagged FETCH data (RFC822 is returned).\n     \
    \ RFC822.HEADER\n         Functionally equivalent to BODY.PEEK[HEADER], differing\
    \ in the\n         syntax of the resulting untagged FETCH data (RFC822.HEADER\
    \ is\n         returned).\n      RFC822.SIZE\n         The [RFC-2822] size of\
    \ the message.\n      RFC822.TEXT\n         Functionally equivalent to BODY[TEXT],\
    \ differing in the syntax\n         of the resulting untagged FETCH data (RFC822.TEXT\
    \ is returned).\n      UID\n         The unique identifier for the message.\n\
    \   Example:    C: A654 FETCH 2:4 (FLAGS BODY[HEADER.FIELDS (DATE FROM)])\n  \
    \             S: * 2 FETCH ....\n               S: * 3 FETCH ....\n          \
    \     S: * 4 FETCH ....\n               S: A654 OK FETCH completed\n"
- title: 6.4.6.  STORE Command
  contents:
  - "6.4.6.  STORE Command\n   Arguments:  sequence set\n               message data\
    \ item name\n               value for message data item\n   Responses:  untagged\
    \ responses: FETCH\n   Result:     OK - store completed\n               NO - store\
    \ error: can't store that data\n               BAD - command unknown or arguments\
    \ invalid\n      The STORE command alters data associated with a message in the\n\
    \      mailbox.  Normally, STORE will return the updated value of the\n      data\
    \ with an untagged FETCH response.  A suffix of \".SILENT\" in\n      the data\
    \ item name prevents the untagged FETCH, and the server\n      SHOULD assume that\
    \ the client has determined the updated value\n      itself or does not care about\
    \ the updated value.\n           Note: Regardless of whether or not the \".SILENT\"\
    \ suffix\n           was used, the server SHOULD send an untagged FETCH\n    \
    \       response if a change to a message's flags from an\n           external\
    \ source is observed.  The intent is that the\n           status of the flags\
    \ is determinate without a race\n           condition.\n      The currently defined\
    \ data items that can be stored are:\n      FLAGS <flag list>\n         Replace\
    \ the flags for the message (other than \\Recent) with the\n         argument.\
    \  The new value of the flags is returned as if a FETCH\n         of those flags\
    \ was done.\n      FLAGS.SILENT <flag list>\n         Equivalent to FLAGS, but\
    \ without returning a new value.\n      +FLAGS <flag list>\n         Add the argument\
    \ to the flags for the message.  The new value\n         of the flags is returned\
    \ as if a FETCH of those flags was done.\n      +FLAGS.SILENT <flag list>\n  \
    \       Equivalent to +FLAGS, but without returning a new value.\n      -FLAGS\
    \ <flag list>\n         Remove the argument from the flags for the message.  The\
    \ new\n         value of the flags is returned as if a FETCH of those flags was\n\
    \         done.\n      -FLAGS.SILENT <flag list>\n         Equivalent to -FLAGS,\
    \ but without returning a new value.\n   Example:    C: A003 STORE 2:4 +FLAGS\
    \ (\\Deleted)\n               S: * 2 FETCH (FLAGS (\\Deleted \\Seen))\n      \
    \         S: * 3 FETCH (FLAGS (\\Deleted))\n               S: * 4 FETCH (FLAGS\
    \ (\\Deleted \\Flagged \\Seen))\n               S: A003 OK STORE completed\n"
- title: 6.4.7.  COPY Command
  contents:
  - "6.4.7.  COPY Command\n   Arguments:  sequence set\n               mailbox name\n\
    \   Responses:  no specific responses for this command\n   Result:     OK - copy\
    \ completed\n               NO - copy error: can't copy those messages or to that\n\
    \                    name\n               BAD - command unknown or arguments invalid\n\
    \      The COPY command copies the specified message(s) to the end of the\n  \
    \    specified destination mailbox.  The flags and internal date of the\n    \
    \  message(s) SHOULD be preserved, and the Recent flag SHOULD be set,\n      in\
    \ the copy.\n      If the destination mailbox does not exist, a server SHOULD\
    \ return\n      an error.  It SHOULD NOT automatically create the mailbox.  Unless\n\
    \      it is certain that the destination mailbox can not be created, the\n  \
    \    server MUST send the response code \"[TRYCREATE]\" as the prefix of\n   \
    \   the text of the tagged NO response.  This gives a hint to the\n      client\
    \ that it can attempt a CREATE command and retry the COPY if\n      the CREATE\
    \ is successful.\n      If the COPY command is unsuccessful for any reason, server\n\
    \      implementations MUST restore the destination mailbox to its state\n   \
    \   before the COPY attempt.\n   Example:    C: A003 COPY 2:4 MEETING\n      \
    \         S: A003 OK COPY completed\n"
- title: 6.4.8.  UID Command
  contents:
  - "6.4.8.  UID Command\n   Arguments:  command name\n               command arguments\n\
    \   Responses:  untagged responses: FETCH, SEARCH\n   Result:     OK - UID command\
    \ completed\n               NO - UID command error\n               BAD - command\
    \ unknown or arguments invalid\n      The UID command has two forms.  In the first\
    \ form, it takes as its\n      arguments a COPY, FETCH, or STORE command with\
    \ arguments\n      appropriate for the associated command.  However, the numbers\
    \ in\n      the sequence set argument are unique identifiers instead of\n    \
    \  message sequence numbers.  Sequence set ranges are permitted, but\n      there\
    \ is no guarantee that unique identifiers will be contiguous.\n      A non-existent\
    \ unique identifier is ignored without any error\n      message generated.  Thus,\
    \ it is possible for a UID FETCH command\n      to return an OK without any data\
    \ or a UID COPY or UID STORE to\n      return an OK without performing any operations.\n\
    \      In the second form, the UID command takes a SEARCH command with\n     \
    \ SEARCH command arguments.  The interpretation of the arguments is\n      the\
    \ same as with SEARCH; however, the numbers returned in a SEARCH\n      response\
    \ for a UID SEARCH command are unique identifiers instead\n      of message sequence\
    \ numbers.  For example, the command UID SEARCH\n      1:100 UID 443:557 returns\
    \ the unique identifiers corresponding to\n      the intersection of two sequence\
    \ sets, the message sequence number\n      range 1:100 and the UID range 443:557.\n\
    \           Note: in the above example, the UID range 443:557\n           appears.\
    \  The same comment about a non-existent unique\n           identifier being ignored\
    \ without any error message also\n           applies here.  Hence, even if neither\
    \ UID 443 or 557\n           exist, this range is valid and would include an existing\n\
    \           UID 495.\n           Also note that a UID range of 559:* always includes\
    \ the\n           UID of the last message in the mailbox, even if 559 is\n   \
    \        higher than any assigned UID value.  This is because the\n          \
    \ contents of a range are independent of the order of the\n           range endpoints.\
    \  Thus, any UID range with * as one of\n           the endpoints indicates at\
    \ least one message (the\n           message with the highest numbered UID), unless\
    \ the\n           mailbox is empty.\n      The number after the \"*\" in an untagged\
    \ FETCH response is always a\n      message sequence number, not a unique identifier,\
    \ even for a UID\n      command response.  However, server implementations MUST\
    \ implicitly\n      include the UID message data item as part of any FETCH response\n\
    \      caused by a UID command, regardless of whether a UID was specified\n  \
    \    as a message data item to the FETCH.\n      Note: The rule about including\
    \ the UID message data item as part\n      of a FETCH response primarily applies\
    \ to the UID FETCH and UID\n      STORE commands, including a UID FETCH command\
    \ that does not\n      include UID as a message data item.  Although it is unlikely\
    \ that\n      the other UID commands will cause an untagged FETCH, this rule\n\
    \      applies to these commands as well.\n   Example:    C: A999 UID FETCH 4827313:4828442\
    \ FLAGS\n               S: * 23 FETCH (FLAGS (\\Seen) UID 4827313)\n         \
    \      S: * 24 FETCH (FLAGS (\\Seen) UID 4827943)\n               S: * 25 FETCH\
    \ (FLAGS (\\Seen) UID 4828442)\n               S: A999 OK UID FETCH completed\n"
- title: 6.5.    Client Commands - Experimental/Expansion
  contents:
  - '6.5.    Client Commands - Experimental/Expansion

    '
- title: 6.5.1.  X<atom> Command
  contents:
  - "6.5.1.  X<atom> Command\n   Arguments:  implementation defined\n   Responses:\
    \  implementation defined\n   Result:     OK - command completed\n           \
    \    NO - failure\n               BAD - command unknown or arguments invalid\n\
    \      Any command prefixed with an X is an experimental command.\n      Commands\
    \ which are not part of this specification, a standard or\n      standards-track\
    \ revision of this specification, or an\n      IESG-approved experimental protocol,\
    \ MUST use the X prefix.\n      Any added untagged responses issued by an experimental\
    \ command\n      MUST also be prefixed with an X.  Server implementations MUST\
    \ NOT\n      send any such untagged responses, unless the client requested it\n\
    \      by issuing the associated experimental command.\n   Example:    C: a441\
    \ CAPABILITY\n               S: * CAPABILITY IMAP4rev1 XPIG-LATIN\n          \
    \     S: a441 OK CAPABILITY completed\n               C: A442 XPIG-LATIN\n   \
    \            S: * XPIG-LATIN ow-nay eaking-spay ig-pay atin-lay\n            \
    \   S: A442 OK XPIG-LATIN ompleted-cay\n"
- title: 7.      Server Responses
  contents:
  - "7.      Server Responses\n   Server responses are in three forms: status responses,\
    \ server data,\n   and command continuation request.  The information contained\
    \ in a\n   server response, identified by \"Contents:\" in the response\n   descriptions\
    \ below, is described by function, not by syntax.  The\n   precise syntax of server\
    \ responses is described in the Formal Syntax\n   section.\n   The client MUST\
    \ be prepared to accept any response at all times.\n   Status responses can be\
    \ tagged or untagged.  Tagged status responses\n   indicate the completion result\
    \ (OK, NO, or BAD status) of a client\n   command, and have a tag matching the\
    \ command.\n   Some status responses, and all server data, are untagged.  An\n\
    \   untagged response is indicated by the token \"*\" instead of a tag.\n   Untagged\
    \ status responses indicate server greeting, or server status\n   that does not\
    \ indicate the completion of a command (for example, an\n   impending system shutdown\
    \ alert).  For historical reasons, untagged\n   server data responses are also\
    \ called \"unsolicited data\", although\n   strictly speaking, only unilateral\
    \ server data is truly\n   \"unsolicited\".\n   Certain server data MUST be recorded\
    \ by the client when it is\n   received; this is noted in the description of that\
    \ data.  Such data\n   conveys critical information which affects the interpretation\
    \ of all\n   subsequent commands and responses (e.g., updates reflecting the\n\
    \   creation or destruction of messages).\n   Other server data SHOULD be recorded\
    \ for later reference; if the\n   client does not need to record the data, or\
    \ if recording the data has\n   no obvious purpose (e.g., a SEARCH response when\
    \ no SEARCH command is\n   in progress), the data SHOULD be ignored.\n   An example\
    \ of unilateral untagged server data occurs when the IMAP\n   connection is in\
    \ the selected state.  In the selected state, the\n   server checks the mailbox\
    \ for new messages as part of command\n   execution.  Normally, this is part of\
    \ the execution of every command;\n   hence, a NOOP command suffices to check\
    \ for new messages.  If new\n   messages are found, the server sends untagged\
    \ EXISTS and RECENT\n   responses reflecting the new size of the mailbox.  Server\n\
    \   implementations that offer multiple simultaneous access to the same\n   mailbox\
    \ SHOULD also send appropriate unilateral untagged FETCH and\n   EXPUNGE responses\
    \ if another agent changes the state of any message\n   flags or expunges any\
    \ messages.\n   Command continuation request responses use the token \"+\" instead\
    \ of a\n   tag.  These responses are sent by the server to indicate acceptance\n\
    \   of an incomplete client command and readiness for the remainder of\n   the\
    \ command.\n"
- title: 7.1.    Server Responses - Status Responses
  contents:
  - "7.1.    Server Responses - Status Responses\n   Status responses are OK, NO,\
    \ BAD, PREAUTH and BYE.  OK, NO, and BAD\n   can be tagged or untagged.  PREAUTH\
    \ and BYE are always untagged.\n   Status responses MAY include an OPTIONAL \"\
    response code\".  A response\n   code consists of data inside square brackets\
    \ in the form of an atom,\n   possibly followed by a space and arguments.  The\
    \ response code\n   contains additional information or status codes for client\
    \ software\n   beyond the OK/NO/BAD condition, and are defined when there is a\n\
    \   specific action that a client can take based upon the additional\n   information.\n\
    \   The currently defined response codes are:\n      ALERT\n         The human-readable\
    \ text contains a special alert that MUST be\n         presented to the user in\
    \ a fashion that calls the user's\n         attention to the message.\n      BADCHARSET\n\
    \         Optionally followed by a parenthesized list of charsets.  A\n      \
    \   SEARCH failed because the given charset is not supported by\n         this\
    \ implementation.  If the optional list of charsets is\n         given, this lists\
    \ the charsets that are supported by this\n         implementation.\n      CAPABILITY\n\
    \         Followed by a list of capabilities.  This can appear in the\n      \
    \   initial OK or PREAUTH response to transmit an initial\n         capabilities\
    \ list.  This makes it unnecessary for a client to\n         send a separate CAPABILITY\
    \ command if it recognizes this\n         response.\n      PARSE\n         The\
    \ human-readable text represents an error in parsing the\n         [RFC-2822]\
    \ header or [MIME-IMB] headers of a message in the\n         mailbox.\n      PERMANENTFLAGS\n\
    \         Followed by a parenthesized list of flags, indicates which of\n    \
    \     the known flags the client can change permanently.  Any flags\n        \
    \ that are in the FLAGS untagged response, but not the\n         PERMANENTFLAGS\
    \ list, can not be set permanently.  If the client\n         attempts to STORE\
    \ a flag that is not in the PERMANENTFLAGS\n         list, the server will either\
    \ ignore the change or store the\n         state change for the remainder of the\
    \ current session only.\n         The PERMANENTFLAGS list can also include the\
    \ special flag \\*,\n         which indicates that it is possible to create new\
    \ keywords by\n         attempting to store those flags in the mailbox.\n    \
    \  READ-ONLY\n         The mailbox is selected read-only, or its access while\
    \ selected\n         has changed from read-write to read-only.\n      READ-WRITE\n\
    \         The mailbox is selected read-write, or its access while\n         selected\
    \ has changed from read-only to read-write.\n      TRYCREATE\n         An APPEND\
    \ or COPY attempt is failing because the target mailbox\n         does not exist\
    \ (as opposed to some other reason).  This is a\n         hint to the client that\
    \ the operation can succeed if the\n         mailbox is first created by the CREATE\
    \ command.\n      UIDNEXT\n         Followed by a decimal number, indicates the\
    \ next unique\n         identifier value.  Refer to section 2.3.1.1 for more\n\
    \         information.\n      UIDVALIDITY\n         Followed by a decimal number,\
    \ indicates the unique identifier\n         validity value.  Refer to section\
    \ 2.3.1.1 for more information.\n      UNSEEN\n         Followed by a decimal\
    \ number, indicates the number of the first\n         message without the \\Seen\
    \ flag set.\n      Additional response codes defined by particular client or server\n\
    \      implementations SHOULD be prefixed with an \"X\" until they are\n     \
    \ added to a revision of this protocol.  Client implementations\n      SHOULD\
    \ ignore response codes that they do not recognize.\n"
- title: 7.1.1.  OK Response
  contents:
  - "7.1.1.  OK Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The OK response indicates an information message from the server.\n\
    \      When tagged, it indicates successful completion of the associated\n   \
    \   command.  The human-readable text MAY be presented to the user as\n      an\
    \ information message.  The untagged form indicates an\n      information-only\
    \ message; the nature of the information MAY be\n      indicated by a response\
    \ code.\n      The untagged form is also used as one of three possible greetings\n\
    \      at connection startup.  It indicates that the connection is not\n     \
    \ yet authenticated and that a LOGIN command is needed.\n   Example:    S: * OK\
    \ IMAP4rev1 server ready\n               C: A001 LOGIN fred blurdybloop\n    \
    \           S: * OK [ALERT] System shutdown in 10 minutes\n               S: A001\
    \ OK LOGIN Completed\n"
- title: 7.1.2.  NO Response
  contents:
  - "7.1.2.  NO Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The NO response indicates an operational error message from the\n\
    \      server.  When tagged, it indicates unsuccessful completion of the\n   \
    \   associated command.  The untagged form indicates a warning; the\n      command\
    \ can still complete successfully.  The human-readable text\n      describes the\
    \ condition.\n   Example:    C: A222 COPY 1:2 owatagusiam\n               S: *\
    \ NO Disk is 98% full, please delete unnecessary data\n               S: A222\
    \ OK COPY completed\n               C: A223 COPY 3:200 blurdybloop\n         \
    \      S: * NO Disk is 98% full, please delete unnecessary data\n            \
    \   S: * NO Disk is 99% full, please delete unnecessary data\n               S:\
    \ A223 NO COPY failed: disk is full\n"
- title: 7.1.3.  BAD Response
  contents:
  - "7.1.3.  BAD Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The BAD response indicates an error message from the server.  When\n\
    \      tagged, it reports a protocol-level error in the client's command;\n  \
    \    the tag indicates the command that caused the error.  The untagged\n    \
    \  form indicates a protocol-level error for which the associated\n      command\
    \ can not be determined; it can also indicate an internal\n      server failure.\
    \  The human-readable text describes the condition.\n   Example:    C: ...very\
    \ long command line...\n               S: * BAD Command line too long\n      \
    \         C: ...empty line...\n               S: * BAD Empty command line\n  \
    \             C: A443 EXPUNGE\n               S: * BAD Disk crash, attempting\
    \ salvage to a new disk!\n               S: * OK Salvage successful, no data lost\n\
    \               S: A443 OK Expunge completed\n"
- title: 7.1.4.  PREAUTH Response
  contents:
  - "7.1.4.  PREAUTH Response\n   Contents:   OPTIONAL response code\n           \
    \    human-readable text\n      The PREAUTH response is always untagged, and is\
    \ one of three\n      possible greetings at connection startup.  It indicates\
    \ that the\n      connection has already been authenticated by external means;\
    \ thus\n      no LOGIN command is needed.\n   Example:    S: * PREAUTH IMAP4rev1\
    \ server logged in as Smith\n"
- title: 7.1.5.  BYE Response
  contents:
  - "7.1.5.  BYE Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The BYE response is always untagged, and indicates that the server\n\
    \      is about to close the connection.  The human-readable text MAY be\n   \
    \   displayed to the user in a status report by the client.  The BYE\n      response\
    \ is sent under one of four conditions:\n         1) as part of a normal logout\
    \ sequence.  The server will close\n            the connection after sending the\
    \ tagged OK response to the\n            LOGOUT command.\n         2) as a panic\
    \ shutdown announcement.  The server closes the\n            connection immediately.\n\
    \         3) as an announcement of an inactivity autologout.  The server\n   \
    \         closes the connection immediately.\n         4) as one of three possible\
    \ greetings at connection startup,\n            indicating that the server is\
    \ not willing to accept a\n            connection from this client.  The server\
    \ closes the\n            connection immediately.\n      The difference between\
    \ a BYE that occurs as part of a normal\n      LOGOUT sequence (the first case)\
    \ and a BYE that occurs because of\n      a failure (the other three cases) is\
    \ that the connection closes\n      immediately in the failure case.  In all cases\
    \ the client SHOULD\n      continue to read response data from the server until\
    \ the\n      connection is closed; this will ensure that any pending untagged\n\
    \      or completion responses are read and processed.\n   Example:    S: * BYE\
    \ Autologout; idle for too long\n"
- title: 7.2.    Server Responses - Server and Mailbox Status
  contents:
  - "7.2.    Server Responses - Server and Mailbox Status\n   These responses are\
    \ always untagged.  This is how server and mailbox\n   status data are transmitted\
    \ from the server to the client.  Many of\n   these responses typically result\
    \ from a command with the same name.\n"
- title: 7.2.1.  CAPABILITY Response
  contents:
  - "7.2.1.  CAPABILITY Response\n   Contents:   capability listing\n      The CAPABILITY\
    \ response occurs as a result of a CAPABILITY\n      command.  The capability\
    \ listing contains a space-separated\n      listing of capability names that the\
    \ server supports.  The\n      capability listing MUST include the atom \"IMAP4rev1\"\
    .\n      In addition, client and server implementations MUST implement the\n \
    \     STARTTLS, LOGINDISABLED, and AUTH=PLAIN (described in [IMAP-TLS])\n    \
    \  capabilities.  See the Security Considerations section for\n      important\
    \ information.\n      A capability name which begins with \"AUTH=\" indicates\
    \ that the\n      server supports that particular authentication mechanism.\n\
    \      The LOGINDISABLED capability indicates that the LOGIN command is\n    \
    \  disabled, and that the server will respond with a tagged NO\n      response\
    \ to any attempt to use the LOGIN command even if the user\n      name and password\
    \ are valid.  An IMAP client MUST NOT issue the\n      LOGIN command if the server\
    \ advertises the LOGINDISABLED\n      capability.\n      Other capability names\
    \ indicate that the server supports an\n      extension, revision, or amendment\
    \ to the IMAP4rev1 protocol.\n      Server responses MUST conform to this document\
    \ until the client\n      issues a command that uses the associated capability.\n\
    \      Capability names MUST either begin with \"X\" or be standard or\n     \
    \ standards-track IMAP4rev1 extensions, revisions, or amendments\n      registered\
    \ with IANA.  A server MUST NOT offer unregistered or\n      non-standard capability\
    \ names, unless such names are prefixed with\n      an \"X\".\n      Client implementations\
    \ SHOULD NOT require any capability name\n      other than \"IMAP4rev1\", and\
    \ MUST ignore any unknown capability\n      names.\n      A server MAY send capabilities\
    \ automatically, by using the\n      CAPABILITY response code in the initial PREAUTH\
    \ or OK responses,\n      and by sending an updated CAPABILITY response code in\
    \ the tagged\n      OK response as part of a successful authentication.  It is\n\
    \      unnecessary for a client to send a separate CAPABILITY command if\n   \
    \   it recognizes these automatic capabilities.\n   Example:    S: * CAPABILITY\
    \ IMAP4rev1 STARTTLS AUTH=GSSAPI XPIG-LATIN\n"
- title: 7.2.2.  LIST Response
  contents:
  - "7.2.2.  LIST Response\n   Contents:   name attributes\n               hierarchy\
    \ delimiter\n               name\n      The LIST response occurs as a result of\
    \ a LIST command.  It\n      returns a single name that matches the LIST specification.\
    \  There\n      can be multiple LIST responses for a single LIST command.\n  \
    \    Four name attributes are defined:\n      \\Noinferiors\n         It is not\
    \ possible for any child levels of hierarchy to exist\n         under this name;\
    \ no child levels exist now and none can be\n         created in the future.\n\
    \      \\Noselect\n         It is not possible to use this name as a selectable\
    \ mailbox.\n      \\Marked\n         The mailbox has been marked \"interesting\"\
    \ by the server; the\n         mailbox probably contains messages that have been\
    \ added since\n         the last time the mailbox was selected.\n      \\Unmarked\n\
    \         The mailbox does not contain any additional messages since the\n   \
    \      last time the mailbox was selected.\n      If it is not feasible for the\
    \ server to determine whether or not\n      the mailbox is \"interesting\", or\
    \ if the name is a \\Noselect name,\n      the server SHOULD NOT send either \\\
    Marked or \\Unmarked.\n      The hierarchy delimiter is a character used to delimit\
    \ levels of\n      hierarchy in a mailbox name.  A client can use it to create\
    \ child\n      mailboxes, and to search higher or lower levels of naming\n   \
    \   hierarchy.  All children of a top-level hierarchy node MUST use\n      the\
    \ same separator character.  A NIL hierarchy delimiter means\n      that no hierarchy\
    \ exists; the name is a \"flat\" name.\n      The name represents an unambiguous\
    \ left-to-right hierarchy, and\n      MUST be valid for use as a reference in\
    \ LIST and LSUB commands.\n      Unless \\Noselect is indicated, the name MUST\
    \ also be valid as an\n      argument for commands, such as SELECT, that accept\
    \ mailbox names.\n   Example:    S: * LIST (\\Noselect) \"/\" ~/Mail/foo\n"
- title: 7.2.3.  LSUB Response
  contents:
  - "7.2.3.  LSUB Response\n   Contents:   name attributes\n               hierarchy\
    \ delimiter\n               name\n      The LSUB response occurs as a result of\
    \ an LSUB command.  It\n      returns a single name that matches the LSUB specification.\
    \  There\n      can be multiple LSUB responses for a single LSUB command.  The\n\
    \      data is identical in format to the LIST response.\n   Example:    S: *\
    \ LSUB () \".\" #news.comp.mail.misc\n"
- title: 7.2.4   STATUS Response
  contents:
  - "7.2.4   STATUS Response\n   Contents:   name\n               status parenthesized\
    \ list\n      The STATUS response occurs as a result of an STATUS command.  It\n\
    \      returns the mailbox name that matches the STATUS specification and\n  \
    \    the requested mailbox status information.\n   Example:    S: * STATUS blurdybloop\
    \ (MESSAGES 231 UIDNEXT 44292)\n"
- title: 7.2.5.  SEARCH Response
  contents:
  - "7.2.5.  SEARCH Response\n   Contents:   zero or more numbers\n      The SEARCH\
    \ response occurs as a result of a SEARCH or UID SEARCH\n      command.  The number(s)\
    \ refer to those messages that match the\n      search criteria.  For SEARCH,\
    \ these are message sequence numbers;\n      for UID SEARCH, these are unique\
    \ identifiers.  Each number is\n      delimited by a space.\n   Example:    S:\
    \ * SEARCH 2 3 6\n"
- title: 7.2.6.  FLAGS Response
  contents:
  - "7.2.6.  FLAGS Response\n   Contents:   flag parenthesized list\n      The FLAGS\
    \ response occurs as a result of a SELECT or EXAMINE\n      command.  The flag\
    \ parenthesized list identifies the flags (at a\n      minimum, the system-defined\
    \ flags) that are applicable for this\n      mailbox.  Flags other than the system\
    \ flags can also exist,\n      depending on server implementation.\n      The\
    \ update from the FLAGS response MUST be recorded by the client.\n   Example:\
    \    S: * FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n"
- title: 7.3.    Server Responses - Mailbox Size
  contents:
  - "7.3.    Server Responses - Mailbox Size\n   These responses are always untagged.\
    \  This is how changes in the size\n   of the mailbox are transmitted from the\
    \ server to the client.\n   Immediately following the \"*\" token is a number\
    \ that represents a\n   message count.\n"
- title: 7.3.1.  EXISTS Response
  contents:
  - "7.3.1.  EXISTS Response\n   Contents:   none\n      The EXISTS response reports\
    \ the number of messages in the mailbox.\n      This response occurs as a result\
    \ of a SELECT or EXAMINE command,\n      and if the size of the mailbox changes\
    \ (e.g., new messages).\n      The update from the EXISTS response MUST be recorded\
    \ by the\n      client.\n   Example:    S: * 23 EXISTS\n"
- title: 7.3.2.  RECENT Response
  contents:
  - "7.3.2.  RECENT Response\n   Contents:   none\n      The RECENT response reports\
    \ the number of messages with the\n      \\Recent flag set.  This response occurs\
    \ as a result of a SELECT or\n      EXAMINE command, and if the size of the mailbox\
    \ changes (e.g., new\n      messages).\n           Note: It is not guaranteed\
    \ that the message sequence\n           numbers of recent messages will be a contiguous\
    \ range of\n           the highest n messages in the mailbox (where n is the\n\
    \           value reported by the RECENT response).  Examples of\n           situations\
    \ in which this is not the case are: multiple\n           clients having the same\
    \ mailbox open (the first session\n           to be notified will see it as recent,\
    \ others will\n           probably see it as non-recent), and when the mailbox\
    \ is\n           re-ordered by a non-IMAP agent.\n           The only reliable\
    \ way to identify recent messages is to\n           look at message flags to see\
    \ which have the \\Recent flag\n           set, or to do a SEARCH RECENT.\n  \
    \    The update from the RECENT response MUST be recorded by the\n      client.\n\
    \   Example:    S: * 5 RECENT\n"
- title: 7.4.    Server Responses - Message Status
  contents:
  - "7.4.    Server Responses - Message Status\n   These responses are always untagged.\
    \  This is how message data are\n   transmitted from the server to the client,\
    \ often as a result of a\n   command with the same name.  Immediately following\
    \ the \"*\" token is a\n   number that represents a message sequence number.\n"
- title: 7.4.1.  EXPUNGE Response
  contents:
  - "7.4.1.  EXPUNGE Response\n   Contents:   none\n      The EXPUNGE response reports\
    \ that the specified message sequence\n      number has been permanently removed\
    \ from the mailbox.  The message\n      sequence number for each successive message\
    \ in the mailbox is\n      immediately decremented by 1, and this decrement is\
    \ reflected in\n      message sequence numbers in subsequent responses (including\
    \ other\n      untagged EXPUNGE responses).\n      The EXPUNGE response also decrements\
    \ the number of messages in the\n      mailbox; it is not necessary to send an\
    \ EXISTS response with the\n      new value.\n      As a result of the immediate\
    \ decrement rule, message sequence\n      numbers that appear in a set of successive\
    \ EXPUNGE responses\n      depend upon whether the messages are removed starting\
    \ from lower\n      numbers to higher numbers, or from higher numbers to lower\n\
    \      numbers.  For example, if the last 5 messages in a 9-message\n      mailbox\
    \ are expunged, a \"lower to higher\" server will send five\n      untagged EXPUNGE\
    \ responses for message sequence number 5, whereas\n      a \"higher to lower\
    \ server\" will send successive untagged EXPUNGE\n      responses for message\
    \ sequence numbers 9, 8, 7, 6, and 5.\n      An EXPUNGE response MUST NOT be sent\
    \ when no command is in\n      progress, nor while responding to a FETCH, STORE,\
    \ or SEARCH\n      command.  This rule is necessary to prevent a loss of\n   \
    \   synchronization of message sequence numbers between client and\n      server.\
    \  A command is not \"in progress\" until the complete command\n      has been\
    \ received; in particular, a command is not \"in progress\"\n      during the\
    \ negotiation of command continuation.\n           Note: UID FETCH, UID STORE,\
    \ and UID SEARCH are different\n           commands from FETCH, STORE, and SEARCH.\
    \  An EXPUNGE\n           response MAY be sent during a UID command.\n      The\
    \ update from the EXPUNGE response MUST be recorded by the\n      client.\n  \
    \ Example:    S: * 44 EXPUNGE\n"
- title: 7.4.2.  FETCH Response
  contents:
  - "7.4.2.  FETCH Response\n   Contents:   message data\n      The FETCH response\
    \ returns data about a message to the client.\n      The data are pairs of data\
    \ item names and their values in\n      parentheses.  This response occurs as\
    \ the result of a FETCH or\n      STORE command, as well as by unilateral server\
    \ decision (e.g.,\n      flag updates).\n      The current data items are:\n \
    \     BODY\n         A form of BODYSTRUCTURE without extension data.\n      BODY[<section>]<<origin\
    \ octet>>\n         A string expressing the body contents of the specified section.\n\
    \         The string SHOULD be interpreted by the client according to the\n  \
    \       content transfer encoding, body type, and subtype.\n         If the origin\
    \ octet is specified, this string is a substring of\n         the entire body\
    \ contents, starting at that origin octet.  This\n         means that BODY[]<0>\
    \ MAY be truncated, but BODY[] is NEVER\n         truncated.\n            Note:\
    \ The origin octet facility MUST NOT be used by a server\n            in a FETCH\
    \ response unless the client specifically requested\n            it by means of\
    \ a FETCH of a BODY[<section>]<<partial>> data\n            item.\n         8-bit\
    \ textual data is permitted if a [CHARSET] identifier is\n         part of the\
    \ body parameter parenthesized list for this section.\n         Note that headers\
    \ (part specifiers HEADER or MIME, or the\n         header portion of a MESSAGE/RFC822\
    \ part), MUST be 7-bit; 8-bit\n         characters are not permitted in headers.\
    \  Note also that the\n         [RFC-2822] delimiting blank line between the header\
    \ and the\n         body is not affected by header line subsetting; the blank\
    \ line\n         is always included as part of header data, except in the case\n\
    \         of a message which has no body and no blank line.\n         Non-textual\
    \ data such as binary data MUST be transfer encoded\n         into a textual form,\
    \ such as BASE64, prior to being sent to the\n         client.  To derive the\
    \ original binary data, the client MUST\n         decode the transfer encoded\
    \ string.\n      BODYSTRUCTURE\n         A parenthesized list that describes the\
    \ [MIME-IMB] body\n         structure of a message.  This is computed by the server\
    \ by\n         parsing the [MIME-IMB] header fields, defaulting various fields\n\
    \         as necessary.\n         For example, a simple text message of 48 lines\
    \ and 2279 octets\n         can have a body structure of: (\"TEXT\" \"PLAIN\"\
    \ (\"CHARSET\"\n         \"US-ASCII\") NIL NIL \"7BIT\" 2279 48)\n         Multiple\
    \ parts are indicated by parenthesis nesting.  Instead\n         of a body type\
    \ as the first element of the parenthesized list,\n         there is a sequence\
    \ of one or more nested body structures.  The\n         second element of the\
    \ parenthesized list is the multipart\n         subtype (mixed, digest, parallel,\
    \ alternative, etc.).\n         For example, a two part message consisting of\
    \ a text and a\n         BASE64-encoded text attachment can have a body structure\
    \ of:\n         ((\"TEXT\" \"PLAIN\" (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\"\
    \ 1152\n         23)(\"TEXT\" \"PLAIN\" (\"CHARSET\" \"US-ASCII\" \"NAME\" \"\
    cc.diff\")\n         \"<960723163407.20117h@cac.washington.edu>\" \"Compiler diff\"\
    \n         \"BASE64\" 4554 73) \"MIXED\")\n         Extension data follows the\
    \ multipart subtype.  Extension data\n         is never returned with the BODY\
    \ fetch, but can be returned with\n         a BODYSTRUCTURE fetch.  Extension\
    \ data, if present, MUST be in\n         the defined order.  The extension data\
    \ of a multipart body part\n         are in the following order:\n         body\
    \ parameter parenthesized list\n            A parenthesized list of attribute/value\
    \ pairs [e.g., (\"foo\"\n            \"bar\" \"baz\" \"rag\") where \"bar\" is\
    \ the value of \"foo\", and\n            \"rag\" is the value of \"baz\"] as defined\
    \ in [MIME-IMB].\n         body disposition\n            A parenthesized list,\
    \ consisting of a disposition type\n            string, followed by a parenthesized\
    \ list of disposition\n            attribute/value pairs as defined in [DISPOSITION].\n\
    \         body language\n            A string or parenthesized list giving the\
    \ body language\n            value as defined in [LANGUAGE-TAGS].\n         body\
    \ location\n            A string list giving the body content URI as defined in\n\
    \            [LOCATION].\n         Any following extension data are not yet defined\
    \ in this\n         version of the protocol.  Such extension data can consist\
    \ of\n         zero or more NILs, strings, numbers, or potentially nested\n  \
    \       parenthesized lists of such data.  Client implementations that\n     \
    \    do a BODYSTRUCTURE fetch MUST be prepared to accept such\n         extension\
    \ data.  Server implementations MUST NOT send such\n         extension data until\
    \ it has been defined by a revision of this\n         protocol.\n         The\
    \ basic fields of a non-multipart body part are in the\n         following order:\n\
    \         body type\n            A string giving the content media type name as\
    \ defined in\n            [MIME-IMB].\n         body subtype\n            A string\
    \ giving the content subtype name as defined in\n            [MIME-IMB].\n   \
    \      body parameter parenthesized list\n            A parenthesized list of\
    \ attribute/value pairs [e.g., (\"foo\"\n            \"bar\" \"baz\" \"rag\")\
    \ where \"bar\" is the value of \"foo\" and\n            \"rag\" is the value\
    \ of \"baz\"] as defined in [MIME-IMB].\n         body id\n            A string\
    \ giving the content id as defined in [MIME-IMB].\n         body description\n\
    \            A string giving the content description as defined in\n         \
    \   [MIME-IMB].\n         body encoding\n            A string giving the content\
    \ transfer encoding as defined in\n            [MIME-IMB].\n         body size\n\
    \            A number giving the size of the body in octets.  Note that\n    \
    \        this size is the size in its transfer encoding and not the\n        \
    \    resulting size after any decoding.\n         A body type of type MESSAGE\
    \ and subtype RFC822 contains,\n         immediately after the basic fields, the\
    \ envelope structure,\n         body structure, and size in text lines of the\
    \ encapsulated\n         message.\n         A body type of type TEXT contains,\
    \ immediately after the basic\n         fields, the size of the body in text lines.\
    \  Note that this\n         size is the size in its content transfer encoding\
    \ and not the\n         resulting size after any decoding.\n         Extension\
    \ data follows the basic fields and the type-specific\n         fields listed\
    \ above.  Extension data is never returned with the\n         BODY fetch, but\
    \ can be returned with a BODYSTRUCTURE fetch.\n         Extension data, if present,\
    \ MUST be in the defined order.\n         The extension data of a non-multipart\
    \ body part are in the\n         following order:\n         body MD5\n       \
    \     A string giving the body MD5 value as defined in [MD5].\n         body disposition\n\
    \            A parenthesized list with the same content and function as\n    \
    \        the body disposition for a multipart body part.\n         body language\n\
    \            A string or parenthesized list giving the body language\n       \
    \     value as defined in [LANGUAGE-TAGS].\n         body location\n         \
    \   A string list giving the body content URI as defined in\n            [LOCATION].\n\
    \         Any following extension data are not yet defined in this\n         version\
    \ of the protocol, and would be as described above under\n         multipart extension\
    \ data.\n      ENVELOPE\n         A parenthesized list that describes the envelope\
    \ structure of a\n         message.  This is computed by the server by parsing\
    \ the\n         [RFC-2822] header into the component parts, defaulting various\n\
    \         fields as necessary.\n         The fields of the envelope structure\
    \ are in the following\n         order: date, subject, from, sender, reply-to,\
    \ to, cc, bcc,\n         in-reply-to, and message-id.  The date, subject, in-reply-to,\n\
    \         and message-id fields are strings.  The from, sender, reply-to,\n  \
    \       to, cc, and bcc fields are parenthesized lists of address\n         structures.\n\
    \         An address structure is a parenthesized list that describes an\n   \
    \      electronic mail address.  The fields of an address structure\n        \
    \ are in the following order: personal name, [SMTP]\n         at-domain-list (source\
    \ route), mailbox name, and host name.\n         [RFC-2822] group syntax is indicated\
    \ by a special form of\n         address structure in which the host name field\
    \ is NIL.  If the\n         mailbox name field is also NIL, this is an end of\
    \ group marker\n         (semi-colon in RFC 822 syntax).  If the mailbox name\
    \ field is\n         non-NIL, this is a start of group marker, and the mailbox\
    \ name\n         field holds the group name phrase.\n         If the Date, Subject,\
    \ In-Reply-To, and Message-ID header lines\n         are absent in the [RFC-2822]\
    \ header, the corresponding member\n         of the envelope is NIL; if these\
    \ header lines are present but\n         empty the corresponding member of the\
    \ envelope is the empty\n         string.\n            Note: some servers may\
    \ return a NIL envelope member in the\n            \"present but empty\" case.\
    \  Clients SHOULD treat NIL and\n            empty string as identical.\n    \
    \        Note: [RFC-2822] requires that all messages have a valid\n          \
    \  Date header.  Therefore, the date member in the envelope can\n            not\
    \ be NIL or the empty string.\n            Note: [RFC-2822] requires that the\
    \ In-Reply-To and\n            Message-ID headers, if present, have non-empty\
    \ content.\n            Therefore, the in-reply-to and message-id members in the\n\
    \            envelope can not be the empty string.\n         If the From, To,\
    \ cc, and bcc header lines are absent in the\n         [RFC-2822] header, or are\
    \ present but empty, the corresponding\n         member of the envelope is NIL.\n\
    \         If the Sender or Reply-To lines are absent in the [RFC-2822]\n     \
    \    header, or are present but empty, the server sets the\n         corresponding\
    \ member of the envelope to be the same value as\n         the from member (the\
    \ client is not expected to know to do\n         this).\n            Note: [RFC-2822]\
    \ requires that all messages have a valid\n            From header.  Therefore,\
    \ the from, sender, and reply-to\n            members in the envelope can not\
    \ be NIL.\n      FLAGS\n         A parenthesized list of flags that are set for\
    \ this message.\n      INTERNALDATE\n         A string representing the internal\
    \ date of the message.\n      RFC822\n         Equivalent to BODY[].\n      RFC822.HEADER\n\
    \         Equivalent to BODY[HEADER].  Note that this did not result in\n    \
    \     \\Seen being set, because RFC822.HEADER response data occurs as\n      \
    \   a result of a FETCH of RFC822.HEADER.  BODY[HEADER] response\n         data\
    \ occurs as a result of a FETCH of BODY[HEADER] (which sets\n         \\Seen)\
    \ or BODY.PEEK[HEADER] (which does not set \\Seen).\n      RFC822.SIZE\n     \
    \    A number expressing the [RFC-2822] size of the message.\n      RFC822.TEXT\n\
    \         Equivalent to BODY[TEXT].\n      UID\n         A number expressing the\
    \ unique identifier of the message.\n   Example:    S: * 23 FETCH (FLAGS (\\Seen)\
    \ RFC822.SIZE 44827)\n"
- title: 7.5.    Server Responses - Command Continuation Request
  contents:
  - "7.5.    Server Responses - Command Continuation Request\n   The command continuation\
    \ request response is indicated by a \"+\" token\n   instead of a tag.  This form\
    \ of response indicates that the server is\n   ready to accept the continuation\
    \ of a command from the client.  The\n   remainder of this response is a line\
    \ of text.\n   This response is used in the AUTHENTICATE command to transmit server\n\
    \   data to the client, and request additional client data.  This\n   response\
    \ is also used if an argument to any command is a literal.\n   The client is not\
    \ permitted to send the octets of the literal unless\n   the server indicates\
    \ that it is expected.  This permits the server to\n   process commands and reject\
    \ errors on a line-by-line basis.  The\n   remainder of the command, including\
    \ the CRLF that terminates a\n   command, follows the octets of the literal. \
    \ If there are any\n   additional command arguments, the literal octets are followed\
    \ by a\n   space and those arguments.\n   Example:    C: A001 LOGIN {11}\n   \
    \            S: + Ready for additional command text\n               C: FRED FOOBAR\
    \ {7}\n               S: + Ready for additional command text\n               C:\
    \ fat man\n               S: A001 OK LOGIN completed\n               C: A044 BLURDYBLOOP\
    \ {102856}\n               S: A044 BAD No such command as \"BLURDYBLOOP\"\n"
- title: 8.      Sample IMAP4rev1 connection
  contents:
  - "8.      Sample IMAP4rev1 connection\n   The following is a transcript of an IMAP4rev1\
    \ connection.  A long\n   line in this sample is broken for editorial clarity.\n"
- title: 'S:   * OK IMAP4rev1 Service Ready'
  contents:
  - 'S:   * OK IMAP4rev1 Service Ready

    '
- title: 'C:   a001 login mrc secret'
  contents:
  - 'C:   a001 login mrc secret

    '
- title: 'S:   a001 OK LOGIN completed'
  contents:
  - 'S:   a001 OK LOGIN completed

    '
- title: 'C:   a002 select inbox'
  contents:
  - 'C:   a002 select inbox

    '
- title: 'S:   * 18 EXISTS'
  contents:
  - 'S:   * 18 EXISTS

    '
- title: 'S:   * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)'
  contents:
  - 'S:   * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)

    '
- title: 'S:   * 2 RECENT'
  contents:
  - 'S:   * 2 RECENT

    '
- title: 'S:   * OK [UNSEEN 17] Message 17 is the first unseen message'
  contents:
  - 'S:   * OK [UNSEEN 17] Message 17 is the first unseen message

    '
- title: 'S:   * OK [UIDVALIDITY 3857529045] UIDs valid'
  contents:
  - 'S:   * OK [UIDVALIDITY 3857529045] UIDs valid

    '
- title: 'S:   a002 OK [READ-WRITE] SELECT completed'
  contents:
  - 'S:   a002 OK [READ-WRITE] SELECT completed

    '
- title: 'C:   a003 fetch 12 full'
  contents:
  - 'C:   a003 fetch 12 full

    '
- title: 'S:   * 12 FETCH (FLAGS (\Seen) INTERNALDATE "17-Jul-1996 02:44:25 -0700"'
  contents:
  - "S:   * 12 FETCH (FLAGS (\\Seen) INTERNALDATE \"17-Jul-1996 02:44:25 -0700\"\n\
    \      RFC822.SIZE 4286 ENVELOPE (\"Wed, 17 Jul 1996 02:23:25 -0700 (PDT)\"\n\
    \      \"IMAP4rev1 WG mtg summary and minutes\"\n      ((\"Terry Gray\" NIL \"\
    gray\" \"cac.washington.edu\"))\n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\"\
    ))\n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\"))\n      ((NIL\
    \ NIL \"imap\" \"cac.washington.edu\"))\n      ((NIL NIL \"minutes\" \"CNRI.Reston.VA.US\"\
    )\n      (\"John Klensin\" NIL \"KLENSIN\" \"MIT.EDU\")) NIL NIL\n      \"<B27397-0100000@cac.washington.edu>\"\
    )\n       BODY (\"TEXT\" \"PLAIN\" (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\"\
    \ 3028\n       92))\n"
- title: 'S:    a003 OK FETCH completed'
  contents:
  - 'S:    a003 OK FETCH completed

    '
- title: 'C:    a004 fetch 12 body[header]'
  contents:
  - 'C:    a004 fetch 12 body[header]

    '
- title: 'S:    * 12 FETCH (BODY[HEADER] {342}'
  contents:
  - 'S:    * 12 FETCH (BODY[HEADER] {342}

    '
- title: 'S:    Date: Wed, 17 Jul 1996 02:23:25 -0700 (PDT)'
  contents:
  - 'S:    Date: Wed, 17 Jul 1996 02:23:25 -0700 (PDT)

    '
- title: 'S:    From: Terry Gray <gray@cac.washington.edu>'
  contents:
  - 'S:    From: Terry Gray <gray@cac.washington.edu>

    '
- title: 'S:    Subject: IMAP4rev1 WG mtg summary and minutes'
  contents:
  - 'S:    Subject: IMAP4rev1 WG mtg summary and minutes

    '
- title: 'S:    To: imap@cac.washington.edu'
  contents:
  - 'S:    To: imap@cac.washington.edu

    '
- title: 'S:    cc: minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@MIT.EDU>'
  contents:
  - 'S:    cc: minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@MIT.EDU>

    '
- title: 'S:    Message-Id: <B27397-0100000@cac.washington.edu>'
  contents:
  - 'S:    Message-Id: <B27397-0100000@cac.washington.edu>

    '
- title: 'S:    MIME-Version: 1.0'
  contents:
  - 'S:    MIME-Version: 1.0

    '
- title: 'S:    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII'
  contents:
  - 'S:    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII

    '
- title: 'S:'
  contents:
  - 'S:

    '
- title: 'S:    )'
  contents:
  - 'S:    )

    '
- title: 'S:    a004 OK FETCH completed'
  contents:
  - 'S:    a004 OK FETCH completed

    '
- title: 'C:    a005 store 12 +flags \deleted'
  contents:
  - 'C:    a005 store 12 +flags \deleted

    '
- title: 'S:    * 12 FETCH (FLAGS (\Seen \Deleted))'
  contents:
  - 'S:    * 12 FETCH (FLAGS (\Seen \Deleted))

    '
- title: 'S:    a005 OK +FLAGS completed'
  contents:
  - 'S:    a005 OK +FLAGS completed

    '
- title: 'C:    a006 logout'
  contents:
  - 'C:    a006 logout

    '
- title: 'S:    * BYE IMAP4rev1 server terminating connection'
  contents:
  - 'S:    * BYE IMAP4rev1 server terminating connection

    '
- title: 'S:    a006 OK LOGOUT completed'
  contents:
  - 'S:    a006 OK LOGOUT completed

    '
- title: 9.      Formal Syntax
  contents:
  - "9.      Formal Syntax\n   The following syntax specification uses the Augmented\
    \ Backus-Naur\n   Form (ABNF) notation as specified in [ABNF].\n   In the case\
    \ of alternative or optional rules in which a later rule\n   overlaps an earlier\
    \ rule, the rule which is listed earlier MUST take\n   priority.  For example,\
    \ \"\\Seen\" when parsed as a flag is the \\Seen\n   flag name and not a flag-extension,\
    \ even though \"\\Seen\" can be parsed\n   as a flag-extension.  Some, but not\
    \ all, instances of this rule are\n   noted below.\n        Note: [ABNF] rules\
    \ MUST be followed strictly; in\n        particular:\n        (1) Except as noted\
    \ otherwise, all alphabetic characters\n        are case-insensitive.  The use\
    \ of upper or lower case\n        characters to define token strings is for editorial\
    \ clarity\n        only.  Implementations MUST accept these strings in a\n   \
    \     case-insensitive fashion.\n        (2) In all cases, SP refers to exactly\
    \ one space.  It is\n        NOT permitted to substitute TAB, insert additional\
    \ spaces,\n        or otherwise treat SP as being equivalent to LWSP.\n      \
    \  (3) The ASCII NUL character, %x00, MUST NOT be used at any\n        time.\n"
- title: address         = "(" addr-name SP addr-adl SP addr-mailbox SP
  contents:
  - "address         = \"(\" addr-name SP addr-adl SP addr-mailbox SP\n          \
    \        addr-host \")\"\n"
- title: addr-adl        = nstring
  contents:
  - "addr-adl        = nstring\n                    ; Holds route from [RFC-2822]\
    \ route-addr if\n                    ; non-NIL\n"
- title: addr-host       = nstring
  contents:
  - "addr-host       = nstring\n                    ; NIL indicates [RFC-2822] group\
    \ syntax.\n                    ; Otherwise, holds [RFC-2822] domain name\n"
- title: addr-mailbox    = nstring
  contents:
  - "addr-mailbox    = nstring\n                    ; NIL indicates end of [RFC-2822]\
    \ group; if\n                    ; non-NIL and addr-host is NIL, holds\n     \
    \               ; [RFC-2822] group name.\n                    ; Otherwise, holds\
    \ [RFC-2822] local-part\n                    ; after removing [RFC-2822] quoting\n"
- title: addr-name       = nstring
  contents:
  - "addr-name       = nstring\n                    ; If non-NIL, holds phrase from\
    \ [RFC-2822]\n                    ; mailbox after removing [RFC-2822] quoting\n"
- title: append          = "APPEND" SP mailbox [SP flag-list] [SP date-time] SP
  contents:
  - "append          = \"APPEND\" SP mailbox [SP flag-list] [SP date-time] SP\n  \
    \                literal\n"
- title: astring         = 1*ASTRING-CHAR / string
  contents:
  - 'astring         = 1*ASTRING-CHAR / string

    '
- title: ASTRING-CHAR   = ATOM-CHAR / resp-specials
  contents:
  - 'ASTRING-CHAR   = ATOM-CHAR / resp-specials

    '
- title: atom            = 1*ATOM-CHAR
  contents:
  - 'atom            = 1*ATOM-CHAR

    '
- title: ATOM-CHAR       = <any CHAR except atom-specials>
  contents:
  - 'ATOM-CHAR       = <any CHAR except atom-specials>

    '
- title: atom-specials   = "(" / ")" / "{" / SP / CTL / list-wildcards /
  contents:
  - "atom-specials   = \"(\" / \")\" / \"{\" / SP / CTL / list-wildcards /\n     \
    \             quoted-specials / resp-specials\n"
- title: authenticate    = "AUTHENTICATE" SP auth-type *(CRLF base64)
  contents:
  - 'authenticate    = "AUTHENTICATE" SP auth-type *(CRLF base64)

    '
- title: auth-type       = atom
  contents:
  - "auth-type       = atom\n                    ; Defined by [SASL]\n"
- title: base64          = *(4base64-char) [base64-terminal]
  contents:
  - 'base64          = *(4base64-char) [base64-terminal]

    '
- title: base64-char     = ALPHA / DIGIT / "+" / "/"
  contents:
  - "base64-char     = ALPHA / DIGIT / \"+\" / \"/\"\n                    ; Case-sensitive\n"
- title: base64-terminal = (2base64-char "==") / (3base64-char "=")
  contents:
  - 'base64-terminal = (2base64-char "==") / (3base64-char "=")

    '
- title: body            = "(" (body-type-1part / body-type-mpart) ")"
  contents:
  - 'body            = "(" (body-type-1part / body-type-mpart) ")"

    '
- title: body-extension  = nstring / number /
  contents:
  - "body-extension  = nstring / number /\n                   \"(\" body-extension\
    \ *(SP body-extension) \")\"\n                    ; Future expansion.  Client\
    \ implementations\n                    ; MUST accept body-extension fields.  Server\n\
    \                    ; implementations MUST NOT generate\n                   \
    \ ; body-extension fields except as defined by\n                    ; future standard\
    \ or standards-track\n                    ; revisions of this specification.\n"
- title: body-ext-1part  = body-fld-md5 [SP body-fld-dsp [SP body-fld-lang
  contents:
  - "body-ext-1part  = body-fld-md5 [SP body-fld-dsp [SP body-fld-lang\n         \
    \         [SP body-fld-loc *(SP body-extension)]]]\n                    ; MUST\
    \ NOT be returned on non-extensible\n                    ; \"BODY\" fetch\n"
- title: body-ext-mpart  = body-fld-param [SP body-fld-dsp [SP body-fld-lang
  contents:
  - "body-ext-mpart  = body-fld-param [SP body-fld-dsp [SP body-fld-lang\n       \
    \           [SP body-fld-loc *(SP body-extension)]]]\n                    ; MUST\
    \ NOT be returned on non-extensible\n                    ; \"BODY\" fetch\n"
- title: body-fields     = body-fld-param SP body-fld-id SP body-fld-desc SP
  contents:
  - "body-fields     = body-fld-param SP body-fld-id SP body-fld-desc SP\n       \
    \           body-fld-enc SP body-fld-octets\n"
- title: body-fld-desc   = nstring
  contents:
  - 'body-fld-desc   = nstring

    '
- title: body-fld-dsp    = "(" string SP body-fld-param ")" / nil
  contents:
  - 'body-fld-dsp    = "(" string SP body-fld-param ")" / nil

    '
- title: body-fld-enc    = (DQUOTE ("7BIT" / "8BIT" / "BINARY" / "BASE64"/
  contents:
  - "body-fld-enc    = (DQUOTE (\"7BIT\" / \"8BIT\" / \"BINARY\" / \"BASE64\"/\n \
    \                 \"QUOTED-PRINTABLE\") DQUOTE) / string\n"
- title: body-fld-id     = nstring
  contents:
  - 'body-fld-id     = nstring

    '
- title: body-fld-lang   = nstring / "(" string *(SP string) ")"
  contents:
  - 'body-fld-lang   = nstring / "(" string *(SP string) ")"

    '
- title: body-fld-loc    = nstring
  contents:
  - 'body-fld-loc    = nstring

    '
- title: body-fld-lines  = number
  contents:
  - 'body-fld-lines  = number

    '
- title: body-fld-md5    = nstring
  contents:
  - 'body-fld-md5    = nstring

    '
- title: body-fld-octets = number
  contents:
  - 'body-fld-octets = number

    '
- title: body-fld-param  = "(" string SP string *(SP string SP string) ")" / nil
  contents:
  - 'body-fld-param  = "(" string SP string *(SP string SP string) ")" / nil

    '
- title: body-type-1part = (body-type-basic / body-type-msg / body-type-text)
  contents:
  - "body-type-1part = (body-type-basic / body-type-msg / body-type-text)\n      \
    \            [SP body-ext-1part]\n"
- title: body-type-basic = media-basic SP body-fields
  contents:
  - "body-type-basic = media-basic SP body-fields\n                    ; MESSAGE subtype\
    \ MUST NOT be \"RFC822\"\n"
- title: body-type-mpart = 1*body SP media-subtype
  contents:
  - "body-type-mpart = 1*body SP media-subtype\n                  [SP body-ext-mpart]\n"
- title: body-type-msg   = media-message SP body-fields SP envelope
  contents:
  - "body-type-msg   = media-message SP body-fields SP envelope\n                \
    \  SP body SP body-fld-lines\n"
- title: body-type-text  = media-text SP body-fields SP body-fld-lines
  contents:
  - 'body-type-text  = media-text SP body-fields SP body-fld-lines

    '
- title: capability      = ("AUTH=" auth-type) / atom
  contents:
  - "capability      = (\"AUTH=\" auth-type) / atom\n                    ; New capabilities\
    \ MUST begin with \"X\" or be\n                    ; registered with IANA as standard\
    \ or\n                    ; standards-track\n"
- title: capability-data = "CAPABILITY" *(SP capability) SP "IMAP4rev1"
  contents:
  - "capability-data = \"CAPABILITY\" *(SP capability) SP \"IMAP4rev1\"\n        \
    \          *(SP capability)\n                    ; Servers MUST implement the\
    \ STARTTLS, AUTH=PLAIN,\n                    ; and LOGINDISABLED capabilities\n\
    \                    ; Servers which offer RFC 1730 compatibility MUST\n     \
    \               ; list \"IMAP4\" as the first capability.\n"
- title: CHAR8           = %x01-ff
  contents:
  - "CHAR8           = %x01-ff\n                    ; any OCTET except NUL, %x00\n"
- title: command         = tag SP (command-any / command-auth / command-nonauth /
  contents:
  - "command         = tag SP (command-any / command-auth / command-nonauth /\n  \
    \                command-select) CRLF\n                    ; Modal based on state\n"
- title: command-any     = "CAPABILITY" / "LOGOUT" / "NOOP" / x-command
  contents:
  - "command-any     = \"CAPABILITY\" / \"LOGOUT\" / \"NOOP\" / x-command\n      \
    \              ; Valid in all states\n"
- title: command-auth    = append / create / delete / examine / list / lsub /
  contents:
  - "command-auth    = append / create / delete / examine / list / lsub /\n      \
    \            rename / select / status / subscribe / unsubscribe\n            \
    \        ; Valid only in Authenticated or Selected state\n"
- title: command-nonauth = login / authenticate / "STARTTLS"
  contents:
  - "command-nonauth = login / authenticate / \"STARTTLS\"\n                    ;\
    \ Valid only when in Not Authenticated state\n"
- title: command-select  = "CHECK" / "CLOSE" / "EXPUNGE" / copy / fetch / store /
  contents:
  - "command-select  = \"CHECK\" / \"CLOSE\" / \"EXPUNGE\" / copy / fetch / store\
    \ /\n                  uid / search\n                    ; Valid only when in\
    \ Selected state\n"
- title: continue-req    = "+" SP (resp-text / base64) CRLF
  contents:
  - 'continue-req    = "+" SP (resp-text / base64) CRLF

    '
- title: copy            = "COPY" SP sequence-set SP mailbox
  contents:
  - 'copy            = "COPY" SP sequence-set SP mailbox

    '
- title: create          = "CREATE" SP mailbox
  contents:
  - "create          = \"CREATE\" SP mailbox\n                    ; Use of INBOX gives\
    \ a NO error\n"
- title: date            = date-text / DQUOTE date-text DQUOTE
  contents:
  - 'date            = date-text / DQUOTE date-text DQUOTE

    '
- title: date-day        = 1*2DIGIT
  contents:
  - "date-day        = 1*2DIGIT\n                    ; Day of month\n"
- title: date-day-fixed  = (SP DIGIT) / 2DIGIT
  contents:
  - "date-day-fixed  = (SP DIGIT) / 2DIGIT\n                    ; Fixed-format version\
    \ of date-day\n"
- title: date-month      = "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" /
  contents:
  - "date-month      = \"Jan\" / \"Feb\" / \"Mar\" / \"Apr\" / \"May\" / \"Jun\" /\n\
    \                  \"Jul\" / \"Aug\" / \"Sep\" / \"Oct\" / \"Nov\" / \"Dec\"\n"
- title: date-text       = date-day "-" date-month "-" date-year
  contents:
  - 'date-text       = date-day "-" date-month "-" date-year

    '
- title: date-year       = 4DIGIT
  contents:
  - 'date-year       = 4DIGIT

    '
- title: date-time       = DQUOTE date-day-fixed "-" date-month "-" date-year
  contents:
  - "date-time       = DQUOTE date-day-fixed \"-\" date-month \"-\" date-year\n  \
    \                SP time SP zone DQUOTE\n"
- title: delete          = "DELETE" SP mailbox
  contents:
  - "delete          = \"DELETE\" SP mailbox\n                    ; Use of INBOX gives\
    \ a NO error\n"
- title: digit-nz        = %x31-39
  contents:
  - "digit-nz        = %x31-39\n                    ; 1-9\n"
- title: envelope        = "(" env-date SP env-subject SP env-from SP
  contents:
  - "envelope        = \"(\" env-date SP env-subject SP env-from SP\n            \
    \      env-sender SP env-reply-to SP env-to SP env-cc SP\n                  env-bcc\
    \ SP env-in-reply-to SP env-message-id \")\"\n"
- title: env-bcc         = "(" 1*address ")" / nil
  contents:
  - 'env-bcc         = "(" 1*address ")" / nil

    '
- title: env-cc          = "(" 1*address ")" / nil
  contents:
  - 'env-cc          = "(" 1*address ")" / nil

    '
- title: env-date        = nstring
  contents:
  - 'env-date        = nstring

    '
- title: env-from        = "(" 1*address ")" / nil
  contents:
  - 'env-from        = "(" 1*address ")" / nil

    '
- title: env-in-reply-to = nstring
  contents:
  - 'env-in-reply-to = nstring

    '
- title: env-message-id  = nstring
  contents:
  - 'env-message-id  = nstring

    '
- title: env-reply-to    = "(" 1*address ")" / nil
  contents:
  - 'env-reply-to    = "(" 1*address ")" / nil

    '
- title: env-sender      = "(" 1*address ")" / nil
  contents:
  - 'env-sender      = "(" 1*address ")" / nil

    '
- title: env-subject     = nstring
  contents:
  - 'env-subject     = nstring

    '
- title: env-to          = "(" 1*address ")" / nil
  contents:
  - 'env-to          = "(" 1*address ")" / nil

    '
- title: examine         = "EXAMINE" SP mailbox
  contents:
  - 'examine         = "EXAMINE" SP mailbox

    '
- title: fetch           = "FETCH" SP sequence-set SP ("ALL" / "FULL" / "FAST" /
  contents:
  - "fetch           = \"FETCH\" SP sequence-set SP (\"ALL\" / \"FULL\" / \"FAST\"\
    \ /\n                  fetch-att / \"(\" fetch-att *(SP fetch-att) \")\")\n"
- title: fetch-att       = "ENVELOPE" / "FLAGS" / "INTERNALDATE" /
  contents:
  - "fetch-att       = \"ENVELOPE\" / \"FLAGS\" / \"INTERNALDATE\" /\n           \
    \       \"RFC822\" [\".HEADER\" / \".SIZE\" / \".TEXT\"] /\n                 \
    \ \"BODY\" [\"STRUCTURE\"] / \"UID\" /\n                  \"BODY\" section [\"\
    <\" number \".\" nz-number \">\"] /\n                  \"BODY.PEEK\" section [\"\
    <\" number \".\" nz-number \">\"]\n"
- title: flag            = "\Answered" / "\Flagged" / "\Deleted" /
  contents:
  - "flag            = \"\\Answered\" / \"\\Flagged\" / \"\\Deleted\" /\n        \
    \          \"\\Seen\" / \"\\Draft\" / flag-keyword / flag-extension\n        \
    \            ; Does not include \"\\Recent\"\n"
- title: flag-extension  = "\" atom
  contents:
  - "flag-extension  = \"\\\" atom\n                    ; Future expansion.  Client\
    \ implementations\n                    ; MUST accept flag-extension flags.  Server\n\
    \                    ; implementations MUST NOT generate\n                   \
    \ ; flag-extension flags except as defined by\n                    ; future standard\
    \ or standards-track\n                    ; revisions of this specification.\n"
- title: flag-fetch      = flag / "\Recent"
  contents:
  - 'flag-fetch      = flag / "\Recent"

    '
- title: flag-keyword    = atom
  contents:
  - 'flag-keyword    = atom

    '
- title: flag-list       = "(" [flag *(SP flag)] ")"
  contents:
  - 'flag-list       = "(" [flag *(SP flag)] ")"

    '
- title: flag-perm       = flag / "\*"
  contents:
  - 'flag-perm       = flag / "\*"

    '
- title: greeting        = "*" SP (resp-cond-auth / resp-cond-bye) CRLF
  contents:
  - 'greeting        = "*" SP (resp-cond-auth / resp-cond-bye) CRLF

    '
- title: header-fld-name = astring
  contents:
  - 'header-fld-name = astring

    '
- title: header-list     = "(" header-fld-name *(SP header-fld-name) ")"
  contents:
  - 'header-list     = "(" header-fld-name *(SP header-fld-name) ")"

    '
- title: list            = "LIST" SP mailbox SP list-mailbox
  contents:
  - 'list            = "LIST" SP mailbox SP list-mailbox

    '
- title: list-mailbox    = 1*list-char / string
  contents:
  - 'list-mailbox    = 1*list-char / string

    '
- title: list-char       = ATOM-CHAR / list-wildcards / resp-specials
  contents:
  - 'list-char       = ATOM-CHAR / list-wildcards / resp-specials

    '
- title: list-wildcards  = "%" / "*"
  contents:
  - 'list-wildcards  = "%" / "*"

    '
- title: literal         = "{" number "}" CRLF *CHAR8
  contents:
  - "literal         = \"{\" number \"}\" CRLF *CHAR8\n                    ; Number\
    \ represents the number of CHAR8s\n"
- title: login           = "LOGIN" SP userid SP password
  contents:
  - 'login           = "LOGIN" SP userid SP password

    '
- title: lsub            = "LSUB" SP mailbox SP list-mailbox
  contents:
  - 'lsub            = "LSUB" SP mailbox SP list-mailbox

    '
- title: mailbox         = "INBOX" / astring
  contents:
  - "mailbox         = \"INBOX\" / astring\n                    ; INBOX is case-insensitive.\
    \  All case variants of\n                    ; INBOX (e.g., \"iNbOx\") MUST be\
    \ interpreted as INBOX\n                    ; not as an astring.  An astring which\
    \ consists of\n                    ; the case-insensitive sequence \"I\" \"N\"\
    \ \"B\" \"O\" \"X\"\n                    ; is considered to be INBOX and not an\
    \ astring.\n                    ;  Refer to section 5.1 for further\n        \
    \            ; semantic details of mailbox names.\n"
- title: mailbox-data    =  "FLAGS" SP flag-list / "LIST" SP mailbox-list /
  contents:
  - "mailbox-data    =  \"FLAGS\" SP flag-list / \"LIST\" SP mailbox-list /\n    \
    \               \"LSUB\" SP mailbox-list / \"SEARCH\" *(SP nz-number) /\n    \
    \               \"STATUS\" SP mailbox SP \"(\" [status-att-list] \")\" /\n   \
    \                number SP \"EXISTS\" / number SP \"RECENT\"\n"
- title: mailbox-list    = "(" [mbx-list-flags] ")" SP
  contents:
  - "mailbox-list    = \"(\" [mbx-list-flags] \")\" SP\n                   (DQUOTE\
    \ QUOTED-CHAR DQUOTE / nil) SP mailbox\n"
- title: mbx-list-flags  = *(mbx-list-oflag SP) mbx-list-sflag
  contents:
  - "mbx-list-flags  = *(mbx-list-oflag SP) mbx-list-sflag\n                  *(SP\
    \ mbx-list-oflag) /\n                  mbx-list-oflag *(SP mbx-list-oflag)\n"
- title: mbx-list-oflag  = "\Noinferiors" / flag-extension
  contents:
  - "mbx-list-oflag  = \"\\Noinferiors\" / flag-extension\n                    ; Other\
    \ flags; multiple possible per LIST response\n"
- title: mbx-list-sflag  = "\Noselect" / "\Marked" / "\Unmarked"
  contents:
  - "mbx-list-sflag  = \"\\Noselect\" / \"\\Marked\" / \"\\Unmarked\"\n          \
    \          ; Selectability flags; only one per LIST response\n"
- title: media-basic     = ((DQUOTE ("APPLICATION" / "AUDIO" / "IMAGE" /
  contents:
  - "media-basic     = ((DQUOTE (\"APPLICATION\" / \"AUDIO\" / \"IMAGE\" /\n     \
    \             \"MESSAGE\" / \"VIDEO\") DQUOTE) / string) SP\n                \
    \  media-subtype\n                    ; Defined in [MIME-IMT]\n"
- title: media-message   = DQUOTE "MESSAGE" DQUOTE SP DQUOTE "RFC822" DQUOTE
  contents:
  - "media-message   = DQUOTE \"MESSAGE\" DQUOTE SP DQUOTE \"RFC822\" DQUOTE\n   \
    \                 ; Defined in [MIME-IMT]\n"
- title: media-subtype   = string
  contents:
  - "media-subtype   = string\n                    ; Defined in [MIME-IMT]\n"
- title: media-text      = DQUOTE "TEXT" DQUOTE SP media-subtype
  contents:
  - "media-text      = DQUOTE \"TEXT\" DQUOTE SP media-subtype\n                 \
    \   ; Defined in [MIME-IMT]\n"
- title: message-data    = nz-number SP ("EXPUNGE" / ("FETCH" SP msg-att))
  contents:
  - 'message-data    = nz-number SP ("EXPUNGE" / ("FETCH" SP msg-att))

    '
- title: msg-att         = "(" (msg-att-dynamic / msg-att-static)
  contents:
  - "msg-att         = \"(\" (msg-att-dynamic / msg-att-static)\n                \
    \   *(SP (msg-att-dynamic / msg-att-static)) \")\"\n"
- title: msg-att-dynamic = "FLAGS" SP "(" [flag-fetch *(SP flag-fetch)] ")"
  contents:
  - "msg-att-dynamic = \"FLAGS\" SP \"(\" [flag-fetch *(SP flag-fetch)] \")\"\n  \
    \                  ; MAY change for a message\n"
- title: msg-att-static  = "ENVELOPE" SP envelope / "INTERNALDATE" SP date-time /
  contents:
  - "msg-att-static  = \"ENVELOPE\" SP envelope / \"INTERNALDATE\" SP date-time /\n\
    \                  \"RFC822\" [\".HEADER\" / \".TEXT\"] SP nstring /\n       \
    \           \"RFC822.SIZE\" SP number /\n                  \"BODY\" [\"STRUCTURE\"\
    ] SP body /\n                  \"BODY\" section [\"<\" number \">\"] SP nstring\
    \ /\n                  \"UID\" SP uniqueid\n                    ; MUST NOT change\
    \ for a message\n"
- title: nil             = "NIL"
  contents:
  - 'nil             = "NIL"

    '
- title: nstring         = string / nil
  contents:
  - 'nstring         = string / nil

    '
- title: number          = 1*DIGIT
  contents:
  - "number          = 1*DIGIT\n                    ; Unsigned 32-bit integer\n  \
    \                  ; (0 <= n < 4,294,967,296)\n"
- title: nz-number       = digit-nz *DIGIT
  contents:
  - "nz-number       = digit-nz *DIGIT\n                    ; Non-zero unsigned 32-bit\
    \ integer\n                    ; (0 < n < 4,294,967,296)\n"
- title: password        = astring
  contents:
  - 'password        = astring

    '
- title: quoted          = DQUOTE *QUOTED-CHAR DQUOTE
  contents:
  - 'quoted          = DQUOTE *QUOTED-CHAR DQUOTE

    '
- title: QUOTED-CHAR     = <any TEXT-CHAR except quoted-specials> /
  contents:
  - "QUOTED-CHAR     = <any TEXT-CHAR except quoted-specials> /\n                \
    \  \"\\\" quoted-specials\n"
- title: quoted-specials = DQUOTE / "\"
  contents:
  - 'quoted-specials = DQUOTE / "\"

    '
- title: rename          = "RENAME" SP mailbox SP mailbox
  contents:
  - "rename          = \"RENAME\" SP mailbox SP mailbox\n                    ; Use\
    \ of INBOX as a destination gives a NO error\n"
- title: response        = *(continue-req / response-data) response-done
  contents:
  - 'response        = *(continue-req / response-data) response-done

    '
- title: response-data   = "*" SP (resp-cond-state / resp-cond-bye /
  contents:
  - "response-data   = \"*\" SP (resp-cond-state / resp-cond-bye /\n             \
    \     mailbox-data / message-data / capability-data) CRLF\n"
- title: response-done   = response-tagged / response-fatal
  contents:
  - 'response-done   = response-tagged / response-fatal

    '
- title: response-fatal  = "*" SP resp-cond-bye CRLF
  contents:
  - "response-fatal  = \"*\" SP resp-cond-bye CRLF\n                    ; Server closes\
    \ connection immediately\n"
- title: response-tagged = tag SP resp-cond-state CRLF
  contents:
  - 'response-tagged = tag SP resp-cond-state CRLF

    '
- title: resp-cond-auth  = ("OK" / "PREAUTH") SP resp-text
  contents:
  - "resp-cond-auth  = (\"OK\" / \"PREAUTH\") SP resp-text\n                    ;\
    \ Authentication condition\n"
- title: resp-cond-bye   = "BYE" SP resp-text
  contents:
  - 'resp-cond-bye   = "BYE" SP resp-text

    '
- title: resp-cond-state = ("OK" / "NO" / "BAD") SP resp-text
  contents:
  - "resp-cond-state = (\"OK\" / \"NO\" / \"BAD\") SP resp-text\n                \
    \    ; Status condition\n"
- title: resp-specials   = "]"
  contents:
  - 'resp-specials   = "]"

    '
- title: resp-text       = ["[" resp-text-code "]" SP] text
  contents:
  - 'resp-text       = ["[" resp-text-code "]" SP] text

    '
- title: resp-text-code  = "ALERT" /
  contents:
  - "resp-text-code  = \"ALERT\" /\n                  \"BADCHARSET\" [SP \"(\" astring\
    \ *(SP astring) \")\" ] /\n                  capability-data / \"PARSE\" /\n \
    \                 \"PERMANENTFLAGS\" SP \"(\"\n                  [flag-perm *(SP\
    \ flag-perm)] \")\" /\n                  \"READ-ONLY\" / \"READ-WRITE\" / \"TRYCREATE\"\
    \ /\n                  \"UIDNEXT\" SP nz-number / \"UIDVALIDITY\" SP nz-number\
    \ /\n                  \"UNSEEN\" SP nz-number /\n                  atom [SP 1*<any\
    \ TEXT-CHAR except \"]\">]\n"
- title: search          = "SEARCH" [SP "CHARSET" SP astring] 1*(SP search-key)
  contents:
  - "search          = \"SEARCH\" [SP \"CHARSET\" SP astring] 1*(SP search-key)\n\
    \                    ; CHARSET argument to MUST be registered with IANA\n"
- title: search-key      = "ALL" / "ANSWERED" / "BCC" SP astring /
  contents:
  - "search-key      = \"ALL\" / \"ANSWERED\" / \"BCC\" SP astring /\n           \
    \       \"BEFORE\" SP date / \"BODY\" SP astring /\n                  \"CC\" SP\
    \ astring / \"DELETED\" / \"FLAGGED\" /\n                  \"FROM\" SP astring\
    \ / \"KEYWORD\" SP flag-keyword /\n                  \"NEW\" / \"OLD\" / \"ON\"\
    \ SP date / \"RECENT\" / \"SEEN\" /\n                  \"SINCE\" SP date / \"\
    SUBJECT\" SP astring /\n                  \"TEXT\" SP astring / \"TO\" SP astring\
    \ /\n                  \"UNANSWERED\" / \"UNDELETED\" / \"UNFLAGGED\" /\n    \
    \              \"UNKEYWORD\" SP flag-keyword / \"UNSEEN\" /\n                \
    \    ; Above this line were in [IMAP2]\n                  \"DRAFT\" / \"HEADER\"\
    \ SP header-fld-name SP astring /\n                  \"LARGER\" SP number / \"\
    NOT\" SP search-key /\n                  \"OR\" SP search-key SP search-key /\n\
    \                  \"SENTBEFORE\" SP date / \"SENTON\" SP date /\n           \
    \       \"SENTSINCE\" SP date / \"SMALLER\" SP number /\n                  \"\
    UID\" SP sequence-set / \"UNDRAFT\" / sequence-set /\n                  \"(\"\
    \ search-key *(SP search-key) \")\"\n"
- title: section         = "[" [section-spec] "]"
  contents:
  - 'section         = "[" [section-spec] "]"

    '
- title: section-msgtext = "HEADER" / "HEADER.FIELDS" [".NOT"] SP header-list /
  contents:
  - "section-msgtext = \"HEADER\" / \"HEADER.FIELDS\" [\".NOT\"] SP header-list /\n\
    \                  \"TEXT\"\n                    ; top-level or MESSAGE/RFC822\
    \ part\n"
- title: section-part    = nz-number *("." nz-number)
  contents:
  - "section-part    = nz-number *(\".\" nz-number)\n                    ; body part\
    \ nesting\n"
- title: section-spec    = section-msgtext / (section-part ["." section-text])
  contents:
  - 'section-spec    = section-msgtext / (section-part ["." section-text])

    '
- title: section-text    = section-msgtext / "MIME"
  contents:
  - "section-text    = section-msgtext / \"MIME\"\n                    ; text other\
    \ than actual body part (headers, etc.)\n"
- title: select          = "SELECT" SP mailbox
  contents:
  - 'select          = "SELECT" SP mailbox

    '
- title: seq-number      = nz-number / "*"
  contents:
  - "seq-number      = nz-number / \"*\"\n                    ; message sequence number\
    \ (COPY, FETCH, STORE\n                    ; commands) or unique identifier (UID\
    \ COPY,\n                    ; UID FETCH, UID STORE commands).\n             \
    \       ; * represents the largest number in use.  In\n                    ; the\
    \ case of message sequence numbers, it is\n                    ; the number of\
    \ messages in a non-empty mailbox.\n                    ; In the case of unique\
    \ identifiers, it is the\n                    ; unique identifier of the last\
    \ message in the\n                    ; mailbox or, if the mailbox is empty, the\n\
    \                    ; mailbox's current UIDNEXT value.\n                    ;\
    \ The server should respond with a tagged BAD\n                    ; response\
    \ to a command that uses a message\n                    ; sequence number greater\
    \ than the number of\n                    ; messages in the selected mailbox.\
    \  This\n                    ; includes \"*\" if the selected mailbox is empty.\n"
- title: seq-range       = seq-number ":" seq-number
  contents:
  - "seq-range       = seq-number \":\" seq-number\n                    ; two seq-number\
    \ values and all values between\n                    ; these two regardless of\
    \ order.\n                    ; Example: 2:4 and 4:2 are equivalent and indicate\n\
    \                    ; values 2, 3, and 4.\n                    ; Example: a unique\
    \ identifier sequence range of\n                    ; 3291:* includes the UID\
    \ of the last message in\n                    ; the mailbox, even if that value\
    \ is less than 3291.\n"
- title: sequence-set    = (seq-number / seq-range) *("," sequence-set)
  contents:
  - "sequence-set    = (seq-number / seq-range) *(\",\" sequence-set)\n          \
    \          ; set of seq-number values, regardless of order.\n                \
    \    ; Servers MAY coalesce overlaps and/or execute the\n                    ;\
    \ sequence in any order.\n                    ; Example: a message sequence number\
    \ set of\n                    ; 2,4:7,9,12:* for a mailbox with 15 messages is\n\
    \                    ; equivalent to 2,4,5,6,7,9,12,13,14,15\n               \
    \     ; Example: a message sequence number set of *:4,5:7\n                  \
    \  ; for a mailbox with 10 messages is equivalent to\n                    ; 10,9,8,7,6,5,4,5,6,7\
    \ and MAY be reordered and\n                    ; overlap coalesced to be 4,5,6,7,8,9,10.\n"
- title: status          = "STATUS" SP mailbox SP
  contents:
  - "status          = \"STATUS\" SP mailbox SP\n                  \"(\" status-att\
    \ *(SP status-att) \")\"\n"
- title: status-att      = "MESSAGES" / "RECENT" / "UIDNEXT" / "UIDVALIDITY" /
  contents:
  - "status-att      = \"MESSAGES\" / \"RECENT\" / \"UIDNEXT\" / \"UIDVALIDITY\" /\n\
    \                  \"UNSEEN\"\n"
- title: status-att-list =  status-att SP number *(SP status-att SP number)
  contents:
  - 'status-att-list =  status-att SP number *(SP status-att SP number)

    '
- title: store           = "STORE" SP sequence-set SP store-att-flags
  contents:
  - 'store           = "STORE" SP sequence-set SP store-att-flags

    '
- title: store-att-flags = (["+" / "-"] "FLAGS" [".SILENT"]) SP
  contents:
  - "store-att-flags = ([\"+\" / \"-\"] \"FLAGS\" [\".SILENT\"]) SP\n            \
    \      (flag-list / (flag *(SP flag)))\n"
- title: string          = quoted / literal
  contents:
  - 'string          = quoted / literal

    '
- title: subscribe       = "SUBSCRIBE" SP mailbox
  contents:
  - 'subscribe       = "SUBSCRIBE" SP mailbox

    '
- title: tag             = 1*<any ASTRING-CHAR except "+">
  contents:
  - 'tag             = 1*<any ASTRING-CHAR except "+">

    '
- title: text            = 1*TEXT-CHAR
  contents:
  - 'text            = 1*TEXT-CHAR

    '
- title: TEXT-CHAR       = <any CHAR except CR and LF>
  contents:
  - 'TEXT-CHAR       = <any CHAR except CR and LF>

    '
- title: time            = 2DIGIT ":" 2DIGIT ":" 2DIGIT
  contents:
  - "time            = 2DIGIT \":\" 2DIGIT \":\" 2DIGIT\n                    ; Hours\
    \ minutes seconds\n"
- title: uid             = "UID" SP (copy / fetch / search / store)
  contents:
  - "uid             = \"UID\" SP (copy / fetch / search / store)\n              \
    \      ; Unique identifiers used instead of message\n                    ; sequence\
    \ numbers\n"
- title: uniqueid        = nz-number
  contents:
  - "uniqueid        = nz-number\n                    ; Strictly ascending\n"
- title: unsubscribe     = "UNSUBSCRIBE" SP mailbox
  contents:
  - 'unsubscribe     = "UNSUBSCRIBE" SP mailbox

    '
- title: userid          = astring
  contents:
  - 'userid          = astring

    '
- title: x-command       = "X" atom <experimental command arguments>
  contents:
  - 'x-command       = "X" atom <experimental command arguments>

    '
- title: zone            = ("+" / "-") 4DIGIT
  contents:
  - "zone            = (\"+\" / \"-\") 4DIGIT\n                    ; Signed four-digit\
    \ value of hhmm representing\n                    ; hours and minutes east of\
    \ Greenwich (that is,\n                    ; the amount that the given time differs\
    \ from\n                    ; Universal Time).  Subtracting the timezone\n   \
    \                 ; from the given time will give the UT form.\n             \
    \       ; The Universal Time zone is \"+0000\".\n"
- title: 10.     Author's Note
  contents:
  - "10.     Author's Note\n   This document is a revision or rewrite of earlier documents,\
    \ and\n   supercedes the protocol specification in those documents: RFC 2060,\n\
    \   RFC 1730, unpublished IMAP2bis.TXT document, RFC 1176, and RFC 1064.\n"
- title: 11.     Security Considerations
  contents:
  - "11.     Security Considerations\n   IMAP4rev1 protocol transactions, including\
    \ electronic mail data, are\n   sent in the clear over the network unless protection\
    \ from snooping is\n   negotiated.  This can be accomplished either by the use\
    \ of STARTTLS,\n   negotiated privacy protection in the AUTHENTICATE command,\
    \ or some\n   other protection mechanism.\n"
- title: 11.1.   STARTTLS Security Considerations
  contents:
  - "11.1.   STARTTLS Security Considerations\n   The specification of the STARTTLS\
    \ command and LOGINDISABLED\n   capability in this document replaces that in [IMAP-TLS].\
    \  [IMAP-TLS]\n   remains normative for the PLAIN [SASL] authenticator.\n   IMAP\
    \ client and server implementations MUST implement the\n   TLS_RSA_WITH_RC4_128_MD5\
    \ [TLS] cipher suite, and SHOULD implement the\n   TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\
    \ [TLS] cipher suite.  This is\n   important as it assures that any two compliant\
    \ implementations can be\n   configured to interoperate.  All other cipher suites\
    \ are OPTIONAL.\n   Note that this is a change from section 2.1 of [IMAP-TLS].\n\
    \   During the [TLS] negotiation, the client MUST check its understanding\n  \
    \ of the server hostname against the server's identity as presented in\n   the\
    \ server Certificate message, in order to prevent man-in-the-middle\n   attacks.\
    \  If the match fails, the client SHOULD either ask for\n   explicit user confirmation,\
    \ or terminate the connection and indicate\n   that the server's identity is suspect.\
    \  Matching is performed\n   according to these rules:\n        The client MUST\
    \ use the server hostname it used to open the\n        connection as the value\
    \ to compare against the server name\n        as expressed in the server certificate.\
    \  The client MUST\n        NOT use any form of the server hostname derived from\
    \ an\n        insecure remote source (e.g., insecure DNS lookup).  CNAME\n   \
    \     canonicalization is not done.\n        If a subjectAltName extension of\
    \ type dNSName is present in\n        the certificate, it SHOULD be used as the\
    \ source of the\n        server's identity.\n        Matching is case-insensitive.\n\
    \        A \"*\" wildcard character MAY be used as the left-most name\n      \
    \  component in the certificate.  For example, *.example.com\n        would match\
    \ a.example.com, foo.example.com, etc. but would\n        not match example.com.\n\
    \        If the certificate contains multiple names (e.g., more than\n       \
    \ one dNSName field), then a match with any one of the fields\n        is considered\
    \ acceptable.\n   Both the client and server MUST check the result of the STARTTLS\n\
    \   command and subsequent [TLS] negotiation to see whether acceptable\n   authentication\
    \ or privacy was achieved.\n"
- title: 11.2.   Other Security Considerations
  contents:
  - "11.2.   Other Security Considerations\n   A server error message for an AUTHENTICATE\
    \ command which fails due to\n   invalid credentials SHOULD NOT detail why the\
    \ credentials are\n   invalid.\n   Use of the LOGIN command sends passwords in\
    \ the clear.  This can be\n   avoided by using the AUTHENTICATE command with a\
    \ [SASL] mechanism\n   that does not use plaintext passwords, by first negotiating\n\
    \   encryption via STARTTLS or some other protection mechanism.\n   A server implementation\
    \ MUST implement a configuration that, at the\n   time of authentication, requires:\n\
    \      (1) The STARTTLS command has been negotiated.\n   OR\n      (2) Some other\
    \ mechanism that protects the session from password\n      snooping has been provided.\n\
    \   OR\n      (3) The following measures are in place:\n         (a) The LOGINDISABLED\
    \ capability is advertised, and [SASL]\n         mechanisms (such as PLAIN) using\
    \ plaintext passwords are NOT\n         advertised in the CAPABILITY list.\n \
    \     AND\n         (b) The LOGIN command returns an error even if the password\
    \ is\n         correct.\n      AND\n         (c) The AUTHENTICATE command returns\
    \ an error with all [SASL]\n         mechanisms that use plaintext passwords,\
    \ even if the password\n         is correct.\n   A server error message for a\
    \ failing LOGIN command SHOULD NOT specify\n   that the user name, as opposed\
    \ to the password, is invalid.\n   A server SHOULD have mechanisms in place to\
    \ limit or delay failed\n   AUTHENTICATE/LOGIN attempts.\n   Additional security\
    \ considerations are discussed in the section\n   discussing the AUTHENTICATE\
    \ and LOGIN commands.\n"
- title: 12.     IANA Considerations
  contents:
  - "12.     IANA Considerations\n   IMAP4 capabilities are registered by publishing\
    \ a standards track or\n   IESG approved experimental RFC.  The registry is currently\
    \ located\n   at:\n        http://www.iana.org/assignments/imap4-capabilities\n\
    \   As this specification revises the STARTTLS and LOGINDISABLED\n   extensions\
    \ previously defined in [IMAP-TLS], the registry will be\n   updated accordingly.\n"
- title: Appendices
  contents:
  - 'Appendices

    '
- title: A.      Normative References
  contents:
  - "A.      Normative References\n   The following documents contain definitions\
    \ or specifications that\n   are necessary to understand this document properly:\n\
    \   [ABNF]                Crocker, D. and P. Overell, \"Augmented BNF for\n  \
    \                       Syntax Specifications: ABNF\", RFC 2234,\n           \
    \              November 1997.\n   [ANONYMOUS]           Newman, C., \"Anonymous\
    \ SASL Mechanism\", RFC\n                         2245, November 1997.\n   [CHARSET]\
    \             Freed, N. and J. Postel, \"IANA Character Set\n                \
    \         Registration Procedures\", RFC 2978, October\n                     \
    \    2000.\n   [DIGEST-MD5]          Leach, P. and C. Newman, \"Using Digest\n\
    \                         Authentication as a SASL Mechanism\", RFC 2831,\n  \
    \                       May 2000.\n   [DISPOSITION]         Troost, R., Dorner,\
    \ S. and K. Moore,\n                         \"Communicating Presentation Information\
    \ in\n                         Internet Messages: The Content-Disposition\n  \
    \                       Header\", RFC 2183, August 1997.\n   [IMAP-TLS]      \
    \      Newman, C., \"Using TLS with IMAP, POP3 and\n                         ACAP\"\
    , RFC 2595, June 1999.\n   [KEYWORDS]            Bradner, S., \"Key words for\
    \ use in RFCs to\n                         Indicate Requirement Levels\", BCP\
    \ 14, RFC 2119,\n                         March 1997.\n   [LANGUAGE-TAGS]    \
    \   Alvestrand, H., \"Tags for the Identification of\n                       \
    \  Languages\", BCP 47, RFC 3066, January 2001.\n   [LOCATION]            Palme,\
    \ J., Hopmann, A. and N. Shelness, \"MIME\n                         Encapsulation\
    \ of Aggregate Documents, such as\n                         HTML (MHTML)\", RFC\
    \ 2557, March 1999.\n   [MD5]                 Myers, J. and M. Rose, \"The Content-MD5\
    \ Header\n                         Field\", RFC 1864, October 1995.\n   [MIME-HDRS]\
    \           Moore, K., \"MIME (Multipurpose Internet Mail\n                  \
    \       Extensions) Part Three: Message Header\n                         Extensions\
    \ for Non-ASCII Text\", RFC 2047,\n                         November 1996.\n \
    \  [MIME-IMB]            Freed, N. and N. Borenstein, \"MIME\n               \
    \          (Multipurpose Internet Mail Extensions) Part\n                    \
    \     One: Format of Internet Message Bodies\", RFC\n                        \
    \ 2045, November 1996.\n   [MIME-IMT]            Freed, N. and N. Borenstein,\
    \ \"MIME\n                         (Multipurpose Internet Mail Extensions) Part\n\
    \                         Two: Media Types\", RFC 2046, November 1996.\n   [RFC-2822]\
    \            Resnick, P., \"Internet Message Format\", RFC\n                 \
    \        2822, April 2001.\n   [SASL]                Myers, J., \"Simple Authentication\
    \ and Security\n                         Layer (SASL)\", RFC 2222, October 1997.\n\
    \   [TLS]                 Dierks, T. and C. Allen, \"The TLS Protocol\n      \
    \                   Version 1.0\", RFC 2246, January 1999.\n   [UTF-7]       \
    \        Goldsmith, D. and M. Davis, \"UTF-7: A Mail-Safe\n                  \
    \       Transformation Format of Unicode\", RFC 2152,\n                      \
    \   May 1997.\n   The following documents describe quality-of-implementation issues\n\
    \   that should be carefully considered when implementing this protocol:\n   [IMAP-IMPLEMENTATION]\
    \ Leiba, B., \"IMAP Implementation\n                         Recommendations\"\
    , RFC 2683, September 1999.\n   [IMAP-MULTIACCESS]    Gahrns, M., \"IMAP4 Multi-Accessed\
    \ Mailbox\n                         Practice\", RFC 2180, July 1997.\n"
- title: A.1     Informative References
  contents:
  - "A.1     Informative References\n   The following documents describe related protocols:\n\
    \   [IMAP-DISC]           Austein, R., \"Synchronization Operations for\n    \
    \                     Disconnected IMAP4 Clients\", Work in Progress.\n   [IMAP-MODEL]\
    \          Crispin, M., \"Distributed Electronic Mail\n                      \
    \   Models in IMAP4\", RFC 1733, December 1994.\n   [ACAP]                Newman,\
    \ C. and J. Myers, \"ACAP -- Application\n                         Configuration\
    \ Access Protocol\", RFC 2244,\n                         November 1997.\n   [SMTP]\
    \                Klensin, J., \"Simple Mail Transfer Protocol\",\n           \
    \              STD 10, RFC 2821, April 2001.\n   The following documents are historical\
    \ or describe historical aspects\n   of this protocol:\n   [IMAP-COMPAT]     \
    \    Crispin, M., \"IMAP4 Compatibility with\n                         IMAP2bis\"\
    , RFC 2061, December 1996.\n   [IMAP-HISTORICAL]     Crispin, M., \"IMAP4 Compatibility\
    \ with IMAP2\n                         and IMAP2bis\", RFC 1732, December 1994.\n\
    \   [IMAP-OBSOLETE]       Crispin, M., \"Internet Message Access Protocol\n  \
    \                       - Obsolete Syntax\", RFC 2062, December 1996.\n   [IMAP2]\
    \               Crispin, M., \"Interactive Mail Access Protocol\n            \
    \             - Version 2\", RFC 1176, August 1990.\n   [RFC-822]            \
    \ Crocker, D., \"Standard for the Format of ARPA\n                         Internet\
    \ Text Messages\", STD 11, RFC 822,\n                         August 1982.\n \
    \  [RFC-821]             Postel, J., \"Simple Mail Transfer Protocol\",\n    \
    \                     STD 10, RFC 821, August 1982.\n"
- title: B.      Changes from RFC 2060
  contents:
  - "B.      Changes from RFC 2060\n   1) Clarify description of unique identifiers\
    \ and their semantics.\n   2) Fix the SELECT description to clarify that UIDVALIDITY\
    \ is required\n   in the SELECT and EXAMINE responses.\n   3) Added an example\
    \ of a failing search.\n   4) Correct store-att-flags: \"#flag\" should be \"\
    1#flag\".\n   5) Made search and section rules clearer.\n   6) Correct the STORE\
    \ example.\n   7) Correct \"BASE645\" misspelling.\n   8) Remove extraneous close\
    \ parenthesis in example of two-part message\n   with text and BASE64 attachment.\n\
    \   9) Remove obsolete \"MAILBOX\" response from mailbox-data.\n   10) A spurious\
    \ \"<\" in the rule for mailbox-data was removed.\n   11) Add CRLF to continue-req.\n\
    \   12) Specifically exclude \"]\" from the atom in resp-text-code.\n   13) Clarify\
    \ that clients and servers should adhere strictly to the\n   protocol syntax.\n\
    \   14) Emphasize in 5.2 that EXISTS can not be used to shrink a mailbox.\n  \
    \ 15) Add NEWNAME to resp-text-code.\n   16) Clarify that the empty string, not\
    \ NIL, is used as arguments to\n   LIST.\n   17) Clarify that NIL can be returned\
    \ as a hierarchy delimiter for the\n   empty string mailbox name argument if the\
    \ mailbox namespace is flat.\n   18) Clarify that addr-mailbox and addr-name have\
    \ RFC-2822 quoting\n   removed.\n   19) Update UTF-7 reference.\n   20) Fix example\
    \ in 6.3.11.\n   21) Clarify that non-existent UIDs are ignored.\n   22) Update\
    \ DISPOSITION reference.\n   23) Expand state diagram.\n   24) Clarify that partial\
    \ fetch responses are only returned in\n   response to a partial fetch command.\n\
    \   25) Add UIDNEXT response code.  Correct UIDVALIDITY definition\n   reference.\n\
    \   26) Further clarification of \"can\" vs. \"MAY\".\n   27) Reference RFC-2119.\n\
    \   28) Clarify that superfluous shifts are not permitted in modified\n   UTF-7.\n\
    \   29) Clarify that there are no implicit shifts in modified UTF-7.\n   30) Clarify\
    \ that \"INBOX\" in a mailbox name is always INBOX, even if\n   it is given as\
    \ a string.\n   31) Add missing open parenthesis in media-basic grammar rule.\n\
    \   32) Correct attribute syntax in mailbox-data.\n   33) Add UIDNEXT to EXAMINE\
    \ responses.\n   34) Clarify UNSEEN, PERMANENTFLAGS, UIDVALIDITY, and UIDNEXT\n\
    \   responses in SELECT and EXAMINE.  They are required now, but weren't\n   in\
    \ older versions.\n   35) Update references with RFC numbers.\n   36) Flush text-mime2.\n\
    \   37) Clarify that modified UTF-7 names must be case-sensitive and that\n  \
    \ violating the convention should be avoided.\n   38) Correct UID FETCH example.\n\
    \   39) Clarify UID FETCH, UID STORE, and UID SEARCH vs. untagged EXPUNGE\n  \
    \ responses.\n   40) Clarify the use of the word \"convention\".\n   41) Clarify\
    \ that a command is not \"in progress\" until it has been\n   fully received (specifically,\
    \ that a command is not \"in progress\"\n   during command continuation negotiation).\n\
    \   42) Clarify envelope defaulting.\n   43) Clarify that SP means one and only\
    \ one space character.\n   44) Forbid silly states in LIST response.\n   45) Clarify\
    \ that the ENVELOPE, INTERNALDATE, RFC822*, BODY*, and UID\n   for a message is\
    \ static.\n   46) Add BADCHARSET response code.\n   47) Update formal syntax to\
    \ [ABNF] conventions.\n   48) Clarify trailing hierarchy delimiter in CREATE semantics.\n\
    \   49) Clarify that the \"blank line\" is the [RFC-2822] delimiting blank\n \
    \  line.\n   50) Clarify that RENAME should also create hierarchy as needed for\n\
    \   the command to complete.\n   51) Fix body-ext-mpart to not require language\
    \ if disposition\n   present.\n   52) Clarify the RFC822.HEADER response.\n  \
    \ 53) Correct missing space after charset astring in search.\n   54) Correct missing\
    \ quote for BADCHARSET in resp-text-code.\n   55) Clarify that ALL, FAST, and\
    \ FULL preclude any other data items\n   appearing.\n   56) Clarify semantics\
    \ of reference argument in LIST.\n   57) Clarify that a null string for SEARCH\
    \ HEADER X-FOO means any\n   message with a header line with a field-name of X-FOO\
    \ regardless of\n   the text of the header.\n   58) Specifically reserve 8-bit\
    \ mailbox names for future use as UTF-8.\n   59) It is not an error for the client\
    \ to store a flag that is not in\n   the PERMANENTFLAGS list; however, the server\
    \ will either ignore the\n   change or make the change in the session only.\n\
    \   60) Correct/clarify the text regarding superfluous shifts.\n   61) Correct\
    \ typographic errors in the \"Changes\" section.\n   62) Clarify that STATUS must\
    \ not be used to check for new messages in\n   the selected mailbox\n   63) Clarify\
    \ LSUB behavior with \"%\" wildcard.\n   64) Change AUTHORIZATION to AUTHENTICATE\
    \ in section 7.5.\n   65) Clarify description of multipart body type.\n   66)\
    \ Clarify that STORE FLAGS does not affect \\Recent.\n   67) Change \"west\" to\
    \ \"east\" in description of timezone.\n   68) Clarify that commands which break\
    \ command pipelining must wait\n   for a completion result response.\n   69) Clarify\
    \ that EXAMINE does not affect \\Recent.\n   70) Make description of MIME structure\
    \ consistent.\n   71) Clarify that date searches disregard the time and timezone\
    \ of the\n   INTERNALDATE or Date: header.  In other words, \"ON 13-APR-2000\"\
    \ means\n   messages with an INTERNALDATE text which starts with \"13-APR-2000\"\
    ,\n   even if timezone differential from the local timezone is sufficient\n  \
    \ to move that INTERNALDATE into the previous or next day.\n   72) Clarify that\
    \ the header fetches don't add a blank line if one\n   isn't in the [RFC-2822]\
    \ message.\n   73) Clarify (in discussion of UIDs) that messages are immutable.\n\
    \   74) Add an example of CHARSET searching.\n   75) Clarify in SEARCH that keywords\
    \ are a type of flag.\n   76) Clarify the mandatory nature of the SELECT data\
    \ responses.\n   77) Add optional CAPABILITY response code in the initial OK or\n\
    \   PREAUTH.\n   78) Add note that server can send an untagged CAPABILITY command\
    \ as\n   part of the responses to AUTHENTICATE and LOGIN.\n   79) Remove statement\
    \ about it being unnecessary to issue a CAPABILITY\n   command more than once\
    \ in a connection.  That statement is no longer\n   true.\n   80) Clarify that\
    \ untagged EXPUNGE decrements the number of messages\n   in the mailbox.\n   81)\
    \ Fix definition of \"body\" (concatenation has tighter binding than\n   alternation).\n\
    \   82) Add a new \"Special Notes to Implementors\" section with reference\n \
    \  to [IMAP-IMPLEMENTATION].\n   83) Clarify that an untagged CAPABILITY response\
    \ to an AUTHENTICATE\n   command should only be done if a security layer was not\
    \ negotiated.\n   84) Change the definition of atom to exclude \"]\".  Update\
    \ astring to\n   include \"]\" for compatibility with the past.  Remove resp-text-atom.\n\
    \   85) Remove NEWNAME.  It can't work because mailbox names can be\n   literals\
    \ and can include \"]\".  Functionality can be addressed via\n   referrals.\n\
    \   86) Move modified UTF-7 rationale in order to have more logical\n   paragraph\
    \ flow.\n   87) Clarify UID uniqueness guarantees with the use of MUST.\n   88)\
    \ Note that clients should read response data until the connection\n   is closed\
    \ instead of immediately closing on a BYE.\n   89) Change RFC-822 references to\
    \ RFC-2822.\n   90) Clarify that RFC-2822 should be followed instead of RFC-822.\n\
    \   91) Change recommendation of optional automatic capabilities in LOGIN\n  \
    \ and AUTHENTICATE to use the CAPABILITY response code in the tagged\n   OK. \
    \ This is more interoperable than an unsolicited untagged\n   CAPABILITY response.\n\
    \   92) STARTTLS and AUTH=PLAIN are mandatory to implement; add\n   recommendations\
    \ for other [SASL] mechanisms.\n   93) Clarify that a \"connection\" (as opposed\
    \ to \"server\" or \"command\")\n   is in one of the four states.\n   94) Clarify\
    \ that a failed or rejected command does not change state.\n   95) Split references\
    \ between normative and informative.\n   96) Discuss authentication failure issues\
    \ in security section.\n   97) Clarify that a data item is not necessarily of\
    \ only one data\n   type.\n   98) Clarify that sequence ranges are independent\
    \ of order.\n   99) Change an example to clarify that superfluous shifts in\n\
    \   Modified-UTF7 can not be fixed just by omitting the shift.  The\n   entire\
    \ string must be recalculated.\n   100) Change Envelope Structure definition since\
    \ [RFC-2822] uses\n   \"envelope\" to refer to the [SMTP] envelope and not the\
    \ envelope data\n   that appears in the [RFC-2822] header.\n   101) Expand on\
    \ RFC822.HEADER response data vs. BODY[HEADER].\n   102) Clarify Logout state\
    \ semantics, change ASCII art.\n   103) Security changes to comply with IESG requirements.\n\
    \   104) Add definition for body URI.\n   105) Break sequence range definition\
    \ into three rules, with rewritten\n   descriptions for each.\n   106) Move STARTTLS\
    \ and LOGINDISABLED here from [IMAP-TLS].\n   107) Add IANA Considerations section.\n\
    \   108) Clarify valid client assumptions for new message UIDs vs.\n   UIDNEXT.\n\
    \   109) Clarify that changes to permanentflags affect concurrent\n   sessions\
    \ as well as subsequent sessions.\n   110) Clarify that authenticated state can\
    \ be entered by the CLOSE\n   command.\n   111) Emphasize that SELECT and EXAMINE\
    \ are the exceptions to the rule\n   that a failing command does not change state.\n\
    \   112) Clarify that newly-appended messages have the Recent flag set.\n   113)\
    \ Clarify that newly-copied messages SHOULD have the Recent flag\n   set.\n  \
    \ 114) Clarify that UID commands always return the UID in FETCH\n   responses.\n"
- title: C.      Key Word Index
  contents:
  - "C.      Key Word Index\n       +FLAGS <flag list> (store command data item) ...............\
    \   59\n       +FLAGS.SILENT <flag list> (store command data item) ........  \
    \ 59\n       -FLAGS <flag list> (store command data item) ...............   59\n\
    \       -FLAGS.SILENT <flag list> (store command data item) ........   59\n  \
    \     ALERT (response code) ......................................   64\n    \
    \   ALL (fetch item) ...........................................   55\n      \
    \ ALL (search key) ...........................................   50\n       ANSWERED\
    \ (search key) ......................................   50\n       APPEND (command)\
    \ ...........................................   45\n       AUTHENTICATE (command)\
    \ .....................................   27\n       BAD (response) .............................................\
    \   66\n       BADCHARSET (response code) .................................  \
    \ 64\n       BCC <string> (search key) ..................................   51\n\
    \       BEFORE <date> (search key) .................................   51\n  \
    \     BODY (fetch item) ..........................................   55\n    \
    \   BODY (fetch result) ........................................   73\n      \
    \ BODY <string> (search key) .................................   51\n       BODY.PEEK[<section>]<<partial>>\
    \ (fetch item) ...............   57\n       BODYSTRUCTURE (fetch item) .................................\
    \   57\n       BODYSTRUCTURE (fetch result) ...............................  \
    \ 74\n       BODY[<section>]<<origin octet>> (fetch result) .............   74\n\
    \       BODY[<section>]<<partial>> (fetch item) ....................   55\n  \
    \     BYE (response) .............................................   67\n    \
    \   Body Structure (message attribute) .........................   12\n      \
    \ CAPABILITY (command) .......................................   24\n       CAPABILITY\
    \ (response code) .................................   64\n       CAPABILITY (response)\
    \ ......................................   68\n       CC <string> (search key)\
    \ ...................................   51\n       CHECK (command) ............................................\
    \   47\n       CLOSE (command) ............................................  \
    \ 48\n       COPY (command) .............................................   59\n\
    \       CREATE (command) ...........................................   34\n  \
    \     DELETE (command) ...........................................   35\n    \
    \   DELETED (search key) .......................................   51\n      \
    \ DRAFT (search key) .........................................   51\n       ENVELOPE\
    \ (fetch item) ......................................   57\n       ENVELOPE (fetch\
    \ result) ....................................   77\n       EXAMINE (command)\
    \ ..........................................   33\n       EXISTS (response) ..........................................\
    \   71\n       EXPUNGE (command) ..........................................  \
    \ 48\n       EXPUNGE (response) .........................................   72\n\
    \       Envelope Structure (message attribute) .....................   12\n  \
    \     FAST (fetch item) ..........................................   55\n    \
    \   FETCH (command) ............................................   54\n      \
    \ FETCH (response) ...........................................   73\n       FLAGGED\
    \ (search key) .......................................   51\n       FLAGS (fetch\
    \ item) .........................................   57\n       FLAGS (fetch result)\
    \ .......................................   78\n       FLAGS (response) ...........................................\
    \   71\n       FLAGS <flag list> (store command data item) ................  \
    \ 59\n       FLAGS.SILENT <flag list> (store command data item) .........   59\n\
    \       FROM <string> (search key) .................................   51\n  \
    \     FULL (fetch item) ..........................................   55\n    \
    \   Flags (message attribute) ..................................   11\n      \
    \ HEADER (part specifier) ....................................   55\n       HEADER\
    \ <field-name> <string> (search key) ..................   51\n       HEADER.FIELDS\
    \ <header-list> (part specifier) ...............   55\n       HEADER.FIELDS.NOT\
    \ <header-list> (part specifier) ...........   55\n       INTERNALDATE (fetch\
    \ item) ..................................   57\n       INTERNALDATE (fetch result)\
    \ ................................   78\n       Internal Date (message attribute)\
    \ ..........................   12\n       KEYWORD <flag> (search key) ................................\
    \   51\n       Keyword (type of flag) .....................................  \
    \ 11\n       LARGER <n> (search key) ....................................   51\n\
    \       LIST (command) .............................................   40\n  \
    \     LIST (response) ............................................   69\n    \
    \   LOGIN (command) ............................................   30\n      \
    \ LOGOUT (command) ...........................................   25\n       LSUB\
    \ (command) .............................................   43\n       LSUB (response)\
    \ ............................................   70\n       MAY (specification\
    \ requirement term) .......................    4\n       MESSAGES (status item)\
    \ .....................................   45\n       MIME (part specifier) ......................................\
    \   56\n       MUST (specification requirement term) ......................  \
    \  4\n       MUST NOT (specification requirement term) ..................    4\n\
    \       Message Sequence Number (message attribute) ................   10\n  \
    \     NEW (search key) ...........................................   51\n    \
    \   NO (response) ..............................................   66\n      \
    \ NOOP (command) .............................................   25\n       NOT\
    \ <search-key> (search key) ..............................   52\n       OK (response)\
    \ ..............................................   65\n       OLD (search key)\
    \ ...........................................   52\n       ON <date> (search key)\
    \ .....................................   52\n       OPTIONAL (specification requirement\
    \ term) ..................    4\n       OR <search-key1> <search-key2> (search\
    \ key) ................   52\n       PARSE (response code) ......................................\
    \   64\n       PERMANENTFLAGS (response code) .............................  \
    \ 64\n       PREAUTH (response) .........................................   67\n\
    \       Permanent Flag (class of flag) .............................   12\n  \
    \     READ-ONLY (response code) ..................................   65\n    \
    \   READ-WRITE (response code) .................................   65\n      \
    \ RECENT (response) ..........................................   72\n       RECENT\
    \ (search key) ........................................   52\n       RECENT (status\
    \ item) .......................................   45\n       RENAME (command)\
    \ ...........................................   37\n       REQUIRED (specification\
    \ requirement term) ..................    4\n       RFC822 (fetch item) ........................................\
    \   57\n       RFC822 (fetch result) ......................................  \
    \ 78\n       RFC822.HEADER (fetch item) .................................   57\n\
    \       RFC822.HEADER (fetch result) ...............................   78\n  \
    \     RFC822.SIZE (fetch item) ...................................   57\n    \
    \   RFC822.SIZE (fetch result) .................................   78\n      \
    \ RFC822.TEXT (fetch item) ...................................   58\n       RFC822.TEXT\
    \ (fetch result) .................................   79\n       SEARCH (command)\
    \ ...........................................   49\n       SEARCH (response) ..........................................\
    \   71\n       SEEN (search key) ..........................................  \
    \ 52\n       SELECT (command) ...........................................   31\n\
    \       SENTBEFORE <date> (search key) .............................   52\n  \
    \     SENTON <date> (search key) .................................   52\n    \
    \   SENTSINCE <date> (search key) ..............................   52\n      \
    \ SHOULD (specification requirement term) ....................    4\n       SHOULD\
    \ NOT (specification requirement term) ................    4\n       SINCE <date>\
    \ (search key) ..................................   52\n       SMALLER <n> (search\
    \ key) ...................................   52\n       STARTTLS (command) .........................................\
    \   27\n       STATUS (command) ...........................................  \
    \ 44\n       STATUS (response) ..........................................   70\n\
    \       STORE (command) ............................................   58\n  \
    \     SUBJECT <string> (search key) ..............................   53\n    \
    \   SUBSCRIBE (command) ........................................   38\n      \
    \ Session Flag (class of flag) ...............................   12\n       System\
    \ Flag (type of flag) .................................   11\n       TEXT (part\
    \ specifier) ......................................   56\n       TEXT <string>\
    \ (search key) .................................   53\n       TO <string> (search\
    \ key) ...................................   53\n       TRYCREATE (response code)\
    \ ..................................   65\n       UID (command) ..............................................\
    \   60\n       UID (fetch item) ...........................................  \
    \ 58\n       UID (fetch result) .........................................   79\n\
    \       UID <sequence set> (search key) ............................   53\n  \
    \     UIDNEXT (response code) ....................................   65\n    \
    \   UIDNEXT (status item) ......................................   45\n      \
    \ UIDVALIDITY (response code) ................................   65\n       UIDVALIDITY\
    \ (status item) ..................................   45\n       UNANSWERED (search\
    \ key) ....................................   53\n       UNDELETED (search key)\
    \ .....................................   53\n       UNDRAFT (search key) .......................................\
    \   53\n       UNFLAGGED (search key) .....................................  \
    \ 53\n       UNKEYWORD <flag> (search key) ..............................   53\n\
    \       UNSEEN (response code) .....................................   65\n  \
    \     UNSEEN (search key) ........................................   53\n    \
    \   UNSEEN (status item) .......................................   45\n      \
    \ UNSUBSCRIBE (command) ......................................   39\n       Unique\
    \ Identifier (UID) (message attribute) ................    8\n       X<atom> (command)\
    \ ..........................................   62\n       [RFC-2822] Size (message\
    \ attribute) ........................   12\n       \\Answered (system flag) ....................................\
    \   11\n       \\Deleted (system flag) ..................................... \
    \  11\n       \\Draft (system flag) .......................................  \
    \ 11\n       \\Flagged (system flag) .....................................   11\n\
    \       \\Marked (mailbox name attribute) ...........................   69\n \
    \      \\Noinferiors (mailbox name attribute) ......................   69\n  \
    \     \\Noselect (mailbox name attribute) .........................   69\n   \
    \    \\Recent (system flag) ......................................   11\n    \
    \   \\Seen (system flag) ........................................   11\n     \
    \  \\Unmarked (mailbox name attribute) .........................   69\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark R. Crispin\n   Networks and Distributed Computing\n\
    \   University of Washington\n   4545 15th Avenue NE\n   Seattle, WA  98105-4527\n\
    \   Phone: (206) 543-5762\n   EMail: MRC@CAC.Washington.EDU\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.  v\
    \ This\n   document and the information contained herein is provided on an \"\
    AS\n   IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK\n\
    \   FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n  \
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL\n   NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY\n   OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
