- title: __initial_text__
  contents:
  - '           RTP Payload Format for MPEG-4 Audio/Visual Streams

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes Real-Time Transport Protocol (RTP) payload\n\
    \   formats for carrying each of MPEG-4 Audio and MPEG-4 Visual\n   bitstreams\
    \ without using MPEG-4 Systems.  For the purpose of directly\n   mapping MPEG-4\
    \ Audio/Visual bitstreams onto RTP packets, it provides\n   specifications for\
    \ the use of RTP header fields and also specifies\n   fragmentation rules.  It\
    \ also provides specifications for\n   Multipurpose Internet Mail Extensions (MIME)\
    \ type registrations and\n   the use of Session Description Protocol (SDP).\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The RTP payload formats described in this document specify\
    \ how MPEG-4\n   Audio [3][5] and MPEG-4 Visual streams [2][4] are to be fragmented\n\
    \   and mapped directly onto RTP packets.\n   These RTP payload formats enable\
    \ transport of MPEG-4 Audio/Visual\n   streams without using the synchronization\
    \ and stream management\n   functionality of MPEG-4 Systems [6].  Such RTP payload\
    \ formats will\n   be used in systems that have intrinsic stream management\n\
    \   functionality and thus require no such functionality from MPEG-4\n   Systems.\
    \  H.323 terminals are an example of such systems, where\n   MPEG-4 Audio/Visual\
    \ streams are not managed by MPEG-4 Systems Object\n   Descriptors but by H.245.\
    \  The streams are directly mapped onto RTP\n   packets without using MPEG-4 Systems\
    \ Sync Layer.  Other examples are\n   SIP and RTSP where MIME and SDP are used.\
    \  MIME types and SDP usages\n   of the RTP payload formats described in this\
    \ document are defined to\n   directly specify the attribute of Audio/Visual streams\
    \ (e.g., media\n   type, packetization format and codec configuration) without\
    \ using\n   MPEG-4 Systems.  The obvious benefit is that these MPEG-4\n   Audio/Visual\
    \ RTP payload formats can be handled in an unified way\n   together with those\
    \ formats defined for non-MPEG-4 codecs.  The\n   disadvantage is that interoperability\
    \ with environments using MPEG-4\n   Systems may be difficult, other payload formats\
    \ may be better suited\n   to those applications.\n   The semantics of RTP headers\
    \ in such cases need to be clearly\n   defined, including the association with\
    \ MPEG-4 Audio/Visual data\n   elements.  In addition, it is beneficial to define\
    \ the fragmentation\n   rules of RTP packets for MPEG-4 Video streams so as to\
    \ enhance error\n   resiliency by utilizing the error resilience tools provided\
    \ inside\n   the MPEG-4 Video stream.\n"
- title: 1.1 MPEG-4 Visual RTP payload format
  contents:
  - "1.1 MPEG-4 Visual RTP payload format\n   MPEG-4 Visual is a visual coding standard\
    \ with many new features:\n   high coding efficiency; high error resiliency; multiple,\
    \ arbitrary\n   shape object-based coding; etc. [2].  It covers a wide range of\n\
    \   bitrates from scores of Kbps to several Mbps.  It also covers a wide\n   variety\
    \ of networks, ranging from those guaranteed to be almost\n   error-free to mobile\
    \ networks with high error rates.\n   With respect to the fragmentation rules\
    \ for an MPEG-4 Visual\n   bitstream defined in this document, since MPEG-4 Visual\
    \ is used for a\n   wide variety of networks, it is desirable not to apply too\
    \ much\n   restriction on fragmentation, and a fragmentation rule such as \"a\n\
    \   single video packet shall always be mapped on a single RTP packet\"\n   may\
    \ be inappropriate.  On the other hand, careless, media unaware\n   fragmentation\
    \ may cause degradation in error resiliency and bandwidth\n   efficiency.  The\
    \ fragmentation rules described in this document are\n   flexible but manage to\
    \ define the minimum rules for preventing\n   meaningless fragmentation while\
    \ utilizing the error resilience\n   functionalities of MPEG-4 Visual.\n   The\
    \ fragmentation rule recommends not to map more than one VOP in an\n   RTP packet\
    \ so that the RTP timestamp uniquely indicates the VOP time\n   framing.  On the\
    \ other hand, MPEG-4 video may generate VOPs of very\n   small size, in cases\
    \ with an empty VOP (vop_coded=0) containing only\n   VOP header or an arbitrary\
    \ shaped VOP with a small number of coding\n   blocks.  To reduce the overhead\
    \ for such cases, the fragmentation\n   rule permits concatenating multiple VOPs\
    \ in an RTP packet.  (See\n   fragmentation rule (4) in section 3.2 and marker\
    \ bit and timestamp in\n   section 3.1.)\n   While the additional media specific\
    \ RTP header defined for such video\n   coding tools as H.261 or MPEG-1/2 is effective\
    \ in helping to recover\n   picture headers corrupted by packet losses, MPEG-4\
    \ Visual has already\n   error resilience functionalities for recovering corrupt\
    \ headers, and\n   these can be used on RTP/IP networks as well as on other networks\n\
    \   (H.223/mobile, MPEG-2/TS, etc.).  Therefore, no extra RTP header\n   fields\
    \ are defined in this MPEG-4 Visual RTP payload format.\n"
- title: 1.2 MPEG-4 Audio RTP payload format
  contents:
  - "1.2 MPEG-4 Audio RTP payload format\n   MPEG-4 Audio is a new kind of audio standard\
    \ that integrates many\n   different types of audio coding tools.  Low-overhead\
    \ MPEG-4 Audio\n   Transport Multiplex (LATM) manages the sequences of audio data\
    \ with\n   relatively small overhead.  In audio-only applications, then, it is\n\
    \   desirable for LATM-based MPEG-4 Audio bitstreams to be directly\n   mapped\
    \ onto the RTP packets without using MPEG-4 Systems.\n   While LATM has several\
    \ multiplexing features as follows;\n   -  Carrying configuration information\
    \ with audio data,\n   -  Concatenation of multiple audio frames in one audio\
    \ stream,\n   -  Multiplexing multiple objects (programs),\n   -  Multiplexing\
    \ scalable layers,\n   in RTP transmission there is no need for the last two features.\n\
    \   Therefore, these two features MUST NOT be used in applications based\n   on\
    \ RTP packetization specified by this document.  Since LATM has been\n   developed\
    \ for only natural audio coding tools, i.e., not for\n   synthesis tools, it seems\
    \ difficult to transmit Structured Audio (SA)\n   data and Text to Speech Interface\
    \ (TTSI) data by LATM.  Therefore, SA\n   data and TTSI data MUST NOT be transported\
    \ by the RTP packetization\n   in this document.\n   For transmission of scalable\
    \ streams, audio data of each layer SHOULD\n   be packetized onto different RTP\
    \ packets allowing for the different\n   layers to be treated differently at the\
    \ IP level, for example via\n   some means of differentiated service.  On the\
    \ other hand, all\n   configuration data of the scalable streams are contained\
    \ in one LATM\n   configuration data \"StreamMuxConfig\" and every scalable layer\
    \ shares\n   the StreamMuxConfig.  The mapping between each layer and its\n  \
    \ configuration data is achieved by LATM header information attached to\n   the\
    \ audio data.  In order to indicate the dependency information of\n   the scalable\
    \ streams, a restriction is applied to the dynamic\n   assignment rule of payload\
    \ type (PT) values (see section 4.2).\n   For MPEG-4 Audio coding tools, as is\
    \ true for other audio coders, if\n   the payload is a single audio frame, packet\
    \ loss will not impair the\n   decodability of adjacent packets.  Therefore, the\
    \ additional media\n   specific header for recovering errors will not be required\
    \ for MPEG-4\n   Audio.  Existing RTP protection mechanisms, such as Generic Forward\n\
    \   Error Correction (RFC 2733) and Redundant Audio Data (RFC 2198), MAY\n   be\
    \ applied to improve error resiliency.\n"
- title: 2. Conventions used in this document
  contents:
  - "2. Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC-2119 [7].\n"
- title: 3. RTP Packetization of MPEG-4 Visual bitstream
  contents:
  - "3. RTP Packetization of MPEG-4 Visual bitstream\n   This section specifies RTP\
    \ packetization rules for MPEG-4 Visual\n   content.  An MPEG-4 Visual bitstream\
    \ is mapped directly onto RTP\n   packets without the addition of extra header\
    \ fields or any removal of\n   Visual syntax elements.  The Combined Configuration/Elementary\
    \ stream\n   mode MUST be used so that configuration information will be carried\n\
    \   to the same RTP port as the elementary stream.  (see 6.2.1 \"Start\n   codes\"\
    \ of ISO/IEC 14496-2 [2][9][4]) The configuration information\n   MAY additionally\
    \ be specified by some out-of-band means.  If needed\n   for an H.323 terminal,\
    \ H.245 codepoint\n   \"decoderConfigurationInformation\" MUST be used for this\
    \ purpose.  If\n   needed by systems using MIME content type and SDP parameters,\
    \ e.g.,\n   SIP and RTSP, the optional parameter \"config\" MUST be used to specify\n\
    \   the configuration information (see 5.1 and 5.2).\n   When the short video\
    \ header mode is used, the RTP payload format for\n   H.263 SHOULD be used (the\
    \ format defined in RFC 2429 is RECOMMENDED,\n   but the RFC 2190 format MAY be\
    \ used for compatibility with older\n   implementations).\n"
- title: 0                   1                   2                   3
  contents:
  - '0                   1                   2                   3

    '
- title: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  contents:
  - '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|V=2|P|X|  CC   |M|     PT      |       sequence number         | RTP'
  contents:
  - '|V=2|P|X|  CC   |M|     PT      |       sequence number         | RTP

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                           timestamp                           | Header'
  contents:
  - '|                           timestamp                           | Header

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|           synchronization source (SSRC) identifier            |'
  contents:
  - '|           synchronization source (SSRC) identifier            |

    '
- title: +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  contents:
  - '+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

    '
- title: '|            contributing source (CSRC) identifiers             |'
  contents:
  - '|            contributing source (CSRC) identifiers             |

    '
- title: '|                             ....                              |'
  contents:
  - '|                             ....                              |

    '
- title: +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  contents:
  - '+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

    '
- title: '|                                                               | RTP'
  contents:
  - '|                                                               | RTP

    '
- title: '|       MPEG-4 Visual stream (byte aligned)                     | Pay-'
  contents:
  - '|       MPEG-4 Visual stream (byte aligned)                     | Pay-

    '
- title: '|                                                               | load'
  contents:
  - '|                                                               | load

    '
- title: '|                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+'
  contents:
  - '|                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                               :...OPTIONAL RTP padding        |'
  contents:
  - '|                               :...OPTIONAL RTP padding        |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     Figure\
    \ 1 - An RTP packet for MPEG-4 Visual stream\n"
- title: 3.1 Use of RTP header fields for MPEG-4 Visual
  contents:
  - "3.1 Use of RTP header fields for MPEG-4 Visual\n   Payload Type (PT): The assignment\
    \ of an RTP payload type for this new\n   packet format is outside the scope of\
    \ this document, and will not be\n   specified here.  It is expected that the\
    \ RTP profile for a particular\n   class of applications will assign a payload\
    \ type for this encoding,\n   or if that is not done then a payload type in the\
    \ dynamic range SHALL\n   be chosen by means of an out of band signaling protocol\
    \ (e.g., H.245,\n   SIP, etc).\n   Extension (X) bit: Defined by the RTP profile\
    \ used.\n   Sequence Number: Incremented by one for each RTP data packet sent,\n\
    \   starting, for security reasons, with a random initial value.\n   Marker (M)\
    \ bit: The marker bit is set to one to indicate the last RTP\n   packet (or only\
    \ RTP packet) of a VOP.  When multiple VOPs are carried\n   in the same RTP packet,\
    \ the marker bit is set to one.\n   Timestamp: The timestamp indicates the sampling\
    \ instance of the VOP\n   contained in the RTP packet.  A constant offset, which\
    \ is random, is\n   added for security reasons.\n   -  When multiple VOPs are\
    \ carried in the same RTP packet, the\n      timestamp indicates the earliest\
    \ of the VOP times within the VOPs\n      carried in the RTP packet.  Timestamp\
    \ information of the rest of\n      the VOPs are derived from the timestamp fields\
    \ in the VOP header\n      (modulo_time_base and vop_time_increment).\n   -  If\
    \ the RTP packet contains only configuration information and/or\n      Group_of_VideoObjectPlane()\
    \ fields, the timestamp of the next VOP\n      in the coding order is used.\n\
    \   -  If the RTP packet contains only visual_object_sequence_end_code\n     \
    \ information, the timestamp of the immediately preceding VOP in the\n      coding\
    \ order is used.\n   The resolution of the timestamp is set to its default value\
    \ of 90kHz,\n   unless specified by an out-of-band means (e.g., SDP parameter\
    \ or MIME\n   parameter as defined in section 5).\n   Other header fields are\
    \ used as described in RFC 1889 [8].\n"
- title: 3.2 Fragmentation of MPEG-4 Visual bitstream
  contents:
  - "3.2 Fragmentation of MPEG-4 Visual bitstream\n   A fragmented MPEG-4 Visual bitstream\
    \ is mapped directly onto the RTP\n   payload without any addition of extra header\
    \ fields or any removal of\n   Visual syntax elements.  The Combined Configuration/Elementary\n\
    \   streams mode is used.  The following rules apply for the\n   fragmentation.\n\
    \   In the following, header means one of the following:\n   -  Configuration\
    \ information (Visual Object Sequence Header, Visual\n      Object Header and\
    \ Video Object Layer Header)\n   -  visual_object_sequence_end_code\n   -  The\
    \ header of the entry point function for an elementary stream\n      (Group_of_VideoObjectPlane()\
    \ or the header of VideoObjectPlane(),\n      video_plane_with_short_header(),\
    \ MeshObject() or FaceObject())\n   -  The video packet header (video_packet_header()\
    \ excluding\n      next_resync_marker())\n   -  The header of gob_layer()\n  \
    \    See 6.2.1 \"Start codes\" of ISO/IEC 14496-2 [2][9][4] for the\n      definition\
    \ of the configuration information and the entry point\n      functions.\n   (1)\
    \ Configuration information and Group_of_VideoObjectPlane() fields\n   SHALL be\
    \ placed at the beginning of the RTP payload (just after the\n   RTP header) or\
    \ just after the header of the syntactically upper layer\n   function.\n   (2)\
    \ If one or more headers exist in the RTP payload, the RTP payload\n   SHALL begin\
    \ with the header of the syntactically highest function.\n   Note: The visual_object_sequence_end_code\
    \ is regarded as the lowest\n   function.\n   (3) A header SHALL NOT be split\
    \ into a plurality of RTP packets.\n   (4) Different VOPs SHOULD be fragmented\
    \ into different RTP packets so\n   that one RTP packet consists of the data bytes\
    \ associated with a\n   unique VOP time instance (that is indicated in the timestamp\
    \ field in\n   the RTP packet header), with the exception that multiple consecutive\n\
    \   VOPs MAY be carried within one RTP packet in the decoding order if\n   the\
    \ size of the VOPs is small.\n   Note: When multiple VOPs are carried in one RTP\
    \ payload, the\n   timestamp of the VOPs after the first one may be calculated\
    \ by the\n   decoder.  This operation is necessary only for RTP packets in which\n\
    \   the marker bit equals to one and the beginning of RTP payload\n   corresponds\
    \ to a start code. (See timestamp and marker bit in section\n   3.1.)\n   (5)\
    \ It is RECOMMENDED that a single video packet is sent as a single\n   RTP packet.\
    \  The size of a video packet SHOULD be adjusted in such a\n   way that the resulting\
    \ RTP packet is not larger than the path-MTU.\n   Note: Rule (5) does not apply\
    \ when the video packet is disabled by\n   the coder configuration (by setting\
    \ resync_marker_disable in the VOL\n   header to 1), or in coding tools where\
    \ the video packet is not\n   supported.  In this case, a VOP MAY be split at\
    \ arbitrary byte-\n   positions.\n   The video packet starts with the VOP header\
    \ or the video packet\n   header, followed by motion_shape_texture(), and ends\
    \ with\n   next_resync_marker() or next_start_code().\n"
- title: 3.3 Examples of packetized MPEG-4 Visual bitstream
  contents:
  - "3.3 Examples of packetized MPEG-4 Visual bitstream\n   Figure 2 shows examples\
    \ of RTP packets generated based on the\n   criteria described in 3.2\n   (a)\
    \ is an example of the first RTP packet or the random access point\n   of an MPEG-4\
    \ Visual bitstream containing the configuration\n   information.  According to\
    \ criterion (1), the Visual Object Sequence\n   Header(VS header) is placed at\
    \ the beginning of the RTP payload,\n   preceding the Visual Object Header and\
    \ the Video Object Layer\n   Header(VO header, VOL header).  Since the fragmentation\
    \ rule defined\n   in 3.2 guarantees that the configuration information, starting\
    \ with\n   visual_object_sequence_start_code, is always placed at the beginning\n\
    \   of the RTP payload, RTP receivers can detect the random access point\n   by\
    \ checking if the first 32-bit field of the RTP payload is\n   visual_object_sequence_start_code.\n\
    \   (b) is another example of the RTP packet containing the configuration\n  \
    \ information.  It differs from example (a) in that the RTP packet also\n   contains\
    \ a video packet in the VOP following the configuration\n   information.  Since\
    \ the length of the configuration information is\n   relatively short (typically\
    \ scores of bytes) and an RTP packet\n   containing only the configuration information\
    \ may thus increase the\n   overhead, the configuration information and the immediately\
    \ following\n   GOV and/or (a part of) VOP can be packetized into a single RTP\
    \ packet\n   as in this example.\n   (c) is an example of an RTP packet that contains\n\
    \   Group_of_VideoObjectPlane(GOV).  Following criterion (1), the GOV is\n   placed\
    \ at the beginning of the RTP payload.  It would be a waste of\n   RTP/IP header\
    \ overhead to generate an RTP packet containing only a\n   GOV whose length is\
    \ 7 bytes.  Therefore, (a part of) the following\n   VOP can be placed in the\
    \ same RTP packet as shown in (c).\n   (d) is an example of the case where one\
    \ video packet is packetized\n   into one RTP packet.  When the packet-loss rate\
    \ of the underlying\n   network is high, this kind of packetization is recommended.\
    \  Even\n   when the RTP packet containing the VOP header is discarded by a\n\
    \   packet loss, the other RTP packets can be decoded by using the\n   HEC(Header\
    \ Extension Code) information in the video packet header.\n   No extra RTP header\
    \ field is necessary.\n   (e) is an example of the case where more than one video\
    \ packet is\n   packetized into one RTP packet.  This kind of packetization is\n\
    \   effective to save the overhead of RTP/IP headers when the bit-rate of\n  \
    \ the underlying network is low.  However, it will decrease the\n   packet-loss\
    \ resiliency because multiple video packets are discarded\n   by a single RTP\
    \ packet loss.  The optimal number of video packets in\n   an RTP packet and the\
    \ length of the RTP packet can be determined\n   considering the packet-loss rate\
    \ and the bit-rate of the underlying\n   network.\n   (f) is an example of the\
    \ case when the video packet is disabled by\n   setting resync_marker_disable\
    \ in the VOL header to 1.  In this case,\n   a VOP may be split into a plurality\
    \ of RTP packets at arbitrary\n   byte-positions.  For example, it is possible\
    \ to split a VOP into\n   fixed-length packets.  This kind of coder configuration\
    \ and RTP\n   packet fragmentation may be used when the underlying network is\n\
    \   guaranteed to be error-free.  On the other hand, it is not\n   recommended\
    \ to use it in error-prone environment since it provides\n   only poor packet\
    \ loss resiliency.\n   Figure 3 shows examples of RTP packets prohibited by the\
    \ criteria of\n   3.2.\n   Fragmentation of a header into multiple RTP packets,\
    \ as in (a), will\n   not only increase the overhead of RTP/IP headers but also\
    \ decrease\n   the error resiliency.  Therefore, it is prohibited by the criterion\n\
    \   (3).\n   When concatenating more than one video packets into an RTP packet,\n\
    \   VOP header or video_packet_header() shall not be placed in the middle\n  \
    \ of the RTP payload.  The packetization as in (b) is not allowed by\n   criterion\
    \ (2) due to the aspect of the error resiliency.  Comparing\n   this example with\
    \ Figure 2(d), although two video packets are mapped\n   onto two RTP packets\
    \ in both cases, the packet-loss resiliency is not\n   identical.  Namely, if\
    \ the second RTP packet is lost, both video\n   packets 1 and 2 are lost in the\
    \ case of Figure 3(b) whereas only\n   video packet 2 is lost in the case of Figure\
    \ 2(d).\n    +------+------+------+------+\n"
- title: (a) | RTP  |  VS  |  VO  | VOL  |
  contents:
  - "(a) | RTP  |  VS  |  VO  | VOL  |\n    |header|header|header|header|\n    +------+------+------+------+\n\
    \    +------+------+------+------+------------+\n"
- title: (b) | RTP  |  VS  |  VO  | VOL  |Video Packet|
  contents:
  - "(b) | RTP  |  VS  |  VO  | VOL  |Video Packet|\n    |header|header|header|header|\
    \            |\n    +------+------+------+------+------------+\n    +------+-----+------------------+\n"
- title: (c) | RTP  | GOV |Video Object Plane|
  contents:
  - "(c) | RTP  | GOV |Video Object Plane|\n    |header|     |                  |\n\
    \    +------+-----+------------------+\n    +------+------+------------+  +------+------+------------+\n"
- title: (d) | RTP  | VOP  |Video Packet|  | RTP  |  VP  |Video Packet|
  contents:
  - "(d) | RTP  | VOP  |Video Packet|  | RTP  |  VP  |Video Packet|\n    |header|header|\
    \    (1)     |  |header|header|    (2)     |\n    +------+------+------------+\
    \  +------+------+------------+\n    +------+------+------------+------+------------+------+------------+\n"
- title: (e) | RTP  |  VP  |Video Packet|  VP  |Video Packet|  VP  |Video Packet|
  contents:
  - "(e) | RTP  |  VP  |Video Packet|  VP  |Video Packet|  VP  |Video Packet|\n  \
    \  |header|header|     (1)    |header|    (2)     |header|    (3)     |\n    +------+------+------------+------+------------+------+------------+\n\
    \    +------+------+------------+  +------+------------+\n"
- title: (f) | RTP  | VOP  |VOP fragment|  | RTP  |VOP fragment|
  contents:
  - "(f) | RTP  | VOP  |VOP fragment|  | RTP  |VOP fragment|\n    |header|header|\
    \    (1)     |  |header|    (2)     | ___\n    +------+------+------------+  +------+------------+\n\
    \     Figure 2 - Examples of RTP packetized MPEG-4 Visual bitstream\n    +------+-------------+\
    \  +------+------------+------------+\n"
- title: (a) | RTP  |First half of|  | RTP  |Last half of|Video Packet|
  contents:
  - "(a) | RTP  |First half of|  | RTP  |Last half of|Video Packet|\n    |header|\
    \  VP header  |  |header|  VP header |            |\n    +------+-------------+\
    \  +------+------------+------------+\n    +------+------+----------+  +------+---------+------+------------+\n"
- title: (b) | RTP  | VOP  |First half|  | RTP  |Last half|  VP  |Video Packet|
  contents:
  - "(b) | RTP  | VOP  |First half|  | RTP  |Last half|  VP  |Video Packet|\n    |header|header|\
    \ of VP(1) |  |header| of VP(1)|header|    (2)     |\n    +------+------+----------+\
    \  +------+---------+------+------------+\n   Figure 3 - Examples of prohibited\
    \ RTP packetization for MPEG-4 Visual\n   bitstream\n"
- title: 4. RTP Packetization of MPEG-4 Audio bitstream
  contents:
  - "4. RTP Packetization of MPEG-4 Audio bitstream\n   This section specifies RTP\
    \ packetization rules for MPEG-4 Audio\n   bitstreams.  MPEG-4 Audio streams MUST\
    \ be formatted by LATM (Low-\n   overhead MPEG-4 Audio Transport Multiplex) tool\
    \ [5], and the LATM-\n   based streams are then mapped onto RTP packets as described\
    \ the three\n   sections below.\n"
- title: 4.1 RTP Packet Format
  contents:
  - "4.1 RTP Packet Format\n   LATM-based streams consist of a sequence of audioMuxElements\
    \ that\n   include one or more audio frames.  A complete audioMuxElement or a\n\
    \   part of one SHALL be mapped directly onto an RTP payload without any\n   removal\
    \ of audioMuxElement syntax elements (see Figure 4).  The first\n   byte of each\
    \ audioMuxElement SHALL be located at the first payload\n   location in an RTP\
    \ packet.\n"
- title: 0                   1                   2                   3
  contents:
  - '0                   1                   2                   3

    '
- title: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  contents:
  - '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|V=2|P|X|  CC   |M|     PT      |       sequence number         |RTP'
  contents:
  - '|V=2|P|X|  CC   |M|     PT      |       sequence number         |RTP

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                           timestamp                           |Header'
  contents:
  - '|                           timestamp                           |Header

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|           synchronization source (SSRC) identifier            |'
  contents:
  - '|           synchronization source (SSRC) identifier            |

    '
- title: +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  contents:
  - '+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

    '
- title: '|            contributing source (CSRC) identifiers             |'
  contents:
  - '|            contributing source (CSRC) identifiers             |

    '
- title: '|                             ....                              |'
  contents:
  - '|                             ....                              |

    '
- title: +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  contents:
  - '+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

    '
- title: '|                                                               |RTP'
  contents:
  - '|                                                               |RTP

    '
- title: ':                 audioMuxElement (byte aligned)                :Payload'
  contents:
  - ':                 audioMuxElement (byte aligned)                :Payload

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: '|                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+'
  contents:
  - '|                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                               :...OPTIONAL RTP padding        |'
  contents:
  - '|                               :...OPTIONAL RTP padding        |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         \
    \    Figure 4 - An RTP packet for MPEG-4 Audio\n   In order to decode the audioMuxElement,\
    \ the following\n   muxConfigPresent information is required to be indicated by\
    \ an out-\n   of-band means.  When SDP is utilized for this indication, MIME\n\
    \   parameter \"cpresent\" corresponds to the muxConfigPresent information\n \
    \  (see section 5.3).\n   muxConfigPresent: If this value is set to 1 (in-band\
    \ mode), the\n   audioMuxElement SHALL include an indication bit \"useSameStreamMux\"\
    \n   and MAY include the configuration information for audio compression\n   \"\
    StreamMuxConfig\".  The useSameStreamMux bit indicates whether the\n   StreamMuxConfig\
    \ element in the previous frame is applied in the\n   current frame.  If the useSameStreamMux\
    \ bit indicates to use the\n   StreamMuxConfig from the previous frame, but if\
    \ the previous frame\n   has been lost, the current frame may not be decodable.\
    \  Therefore, in\n   case of in-band mode, the StreamMuxConfig element SHOULD\
    \ be\n   transmitted repeatedly depending on the network condition.  On the\n\
    \   other hand, if muxConfigPresent is set to 0 (out-band mode), the\n   StreamMuxConfig\
    \ element is required to be transmitted by an out-of-\n   band means.  In case\
    \ of SDP, MIME parameter \"config\" is utilized (see\n   section 5.3).\n"
- title: 4.2 Use of RTP Header Fields for MPEG-4 Audio
  contents:
  - "4.2 Use of RTP Header Fields for MPEG-4 Audio\n   Payload Type (PT): The assignment\
    \ of an RTP payload type for this new\n   packet format is outside the scope of\
    \ this document, and will not be\n   specified here.  It is expected that the\
    \ RTP profile for a particular\n   class of applications will assign a payload\
    \ type for this encoding,\n   or if that is not done then a payload type in the\
    \ dynamic range shall\n   be chosen by means of an out of band signaling protocol\
    \ (e.g., H.245,\n   SIP, etc).  In the dynamic assignment of RTP payload types\
    \ for\n   scalable streams, a different value SHOULD be assigned to each layer.\n\
    \   The assigned values SHOULD be in order of enhance layer dependency,\n   where\
    \ the base layer has the smallest value.\n   Marker (M) bit: The marker bit indicates\
    \ audioMuxElement boundaries.\n   It is set to one to indicate that the RTP packet\
    \ contains a complete\n   audioMuxElement or the last fragment of an audioMuxElement.\n\
    \   Timestamp: The timestamp indicates the sampling instance of the first\n  \
    \ audio frame contained in the RTP packet.  Timestamps are recommended\n   to\
    \ start at a random value for security reasons.\n   Unless specified by an out-of-band\
    \ means, the resolution of the\n   timestamp is set to its default value of 90\
    \ kHz.\n   Sequence Number: Incremented by one for each RTP packet sent,\n   starting,\
    \ for security reasons, with a random value.\n   Other header fields are used\
    \ as described in RFC 1889 [8].\n"
- title: 4.3 Fragmentation of MPEG-4 Audio bitstream
  contents:
  - "4.3 Fragmentation of MPEG-4 Audio bitstream\n   It is RECOMMENDED to put one\
    \ audioMuxElement in each RTP packet.  If\n   the size of an audioMuxElement can\
    \ be kept small enough that the size\n   of the RTP packet containing it does\
    \ not exceed the size of the\n   path-MTU, this will be no problem.  If it cannot,\
    \ the audioMuxElement\n   MAY be fragmented and spread across multiple packets.\n"
- title: 5. MIME type registration for MPEG-4 Audio/Visual streams
  contents:
  - "5. MIME type registration for MPEG-4 Audio/Visual streams\n   The following sections\
    \ describe the MIME type registrations for\n   MPEG-4 Audio/Visual streams.  MIME\
    \ type registration and SDP usage\n   for the MPEG-4 Visual stream are described\
    \ in Sections 5.1 and 5.2,\n   respectively, while MIME type registration and\
    \ SDP usage for MPEG-4\n   Audio stream are described in Sections 5.3 and 5.4,\
    \ respectively.\n"
- title: 5.1 MIME type registration for MPEG-4 Visual
  contents:
  - "5.1 MIME type registration for MPEG-4 Visual\n   MIME media type name: video\n\
    \   MIME subtype name: MP4V-ES\n   Required parameters: none\n   Optional parameters:\n\
    \      rate: This parameter is used only for RTP transport.  It indicates\n  \
    \    the resolution of the timestamp field in the RTP header.  If this\n     \
    \ parameter is not specified, its default value of 90000 (90kHz) is\n      used.\n\
    \      profile-level-id: A decimal representation of MPEG-4 Visual\n      Profile\
    \ and Level indication value (profile_and_level_indication)\n      defined in\
    \ Table G-1 of ISO/IEC 14496-2 [2][4].  This parameter\n      MAY be used in the\
    \ capability exchange or session setup procedure\n      to indicate MPEG-4 Visual\
    \ Profile and Level combination of which\n      the MPEG-4 Visual codec is capable.\
    \  If this parameter is not\n      specified by the procedure, its default value\
    \ of 1 (Simple\n      Profile/Level 1) is used.\n      config: This parameter\
    \ SHALL be used to indicate the configuration\n      of the corresponding MPEG-4\
    \ Visual bitstream.  It SHALL NOT be\n      used to indicate the codec capability\
    \ in the capability exchange\n      procedure.  It is a hexadecimal representation\
    \ of an octet string\n      that expresses the MPEG-4 Visual configuration information,\
    \ as\n      defined in subclause 6.2.1 Start codes of ISO/IEC14496-2\n      [2][4][9].\
    \  The configuration information is mapped onto the octet\n      string in an\
    \ MSB-first basis.  The first bit of the configuration\n      information SHALL\
    \ be located at the MSB of the first octet.  The\n      configuration information\
    \ indicated by this parameter SHALL be the\n      same as the configuration information\
    \ in the corresponding MPEG-4\n      Visual stream, except for first_half_vbv_occupancy\
    \ and\n      latter_half_vbv_occupancy, if exist, which may vary in the\n    \
    \  repeated configuration information inside an MPEG-4 Visual stream\n      (See\
    \ 6.2.1 Start codes of ISO/IEC14496-2).\n      Example usages for these parameters\
    \ are:\n        -  MPEG-4 Visual Simple Profile/Level 1:\n            Content-type:\
    \ video/mp4v-es; profile-level-id=1\n        -  MPEG-4 Visual Core Profile/Level\
    \ 2:\n            Content-type: video/mp4v-es; profile-level-id=34\n        -\
    \  MPEG-4 Visual Advanced Real Time Simple Profile/Level 1:\n            Content-type:\
    \ video/mp4v-es; profile-level-id=145\n   Published specification:\n      The\
    \ specifications for MPEG-4 Visual streams are presented in\n      ISO/IEC 14469-2\
    \ [2][4][9].  The RTP payload format is described in\n      RFC 3016.\n   Encoding\
    \ considerations:\n      Video bitstreams MUST be generated according to MPEG-4\
    \ Visual\n      specifications (ISO/IEC 14496-2).  A video bitstream is binary\n\
    \      data and MUST be encoded for non-binary transport (for Email, the\n   \
    \   Base64 encoding is sufficient).  This type is also defined for\n      transfer\
    \ via RTP.  The RTP packets MUST be packetized according to\n      the MPEG-4\
    \ Visual RTP payload format defined in RFC 3016.\n   Security considerations:\n\
    \      See section 6 of RFC 3016.\n   Interoperability considerations:\n     \
    \ MPEG-4 Visual provides a large and rich set of tools for the\n      coding of\
    \ visual objects.  For effective implementation of the\n      standard, subsets\
    \ of the MPEG-4 Visual tool sets have been\n      provided for use in specific\
    \ applications.  These subsets, called\n      'Profiles', limit the size of the\
    \ tool set a decoder is required\n      to implement.  In order to restrict computational\
    \ complexity, one\n      or more Levels are set for each Profile.  A Profile@Level\n\
    \      combination allows:\n      o a codec builder to implement only the subset\
    \ of the standard he\n      needs, while maintaining interworking with other MPEG-4\
    \ devices\n      included in the same combination, and\n      o checking whether\
    \ MPEG-4 devices comply with the standard ('\n      conformance testing').\n \
    \     The visual stream SHALL be compliant with the MPEG-4 Visual\n      Profile@Level\
    \ specified by the parameter \"profile-level-id\".\n      Interoperability between\
    \ a sender and a receiver may be achieved\n      by specifying the parameter \"\
    profile-level-id\" in MIME content, or\n      by arranging in the capability exchange/announcement\
    \ procedure to\n      set this parameter mutually to the same value.\n   Applications\
    \ which use this media type:\n      Audio and visual streaming and conferencing\
    \ tools, Internet\n      messaging and Email applications.\n   Additional information:\
    \ none\n   Person & email address to contact for further information:\n      The\
    \ authors of RFC 3016.  (See section 8.)\n   Intended usage: COMMON\n   Author/Change\
    \ controller:\n      The authors of RFC 3016.  (See section 8.)\n"
- title: 5.2 SDP usage of MPEG-4 Visual
  contents:
  - "5.2 SDP usage of MPEG-4 Visual\n   The MIME media type video/MP4V-ES string is\
    \ mapped to fields in the\n   Session Description Protocol (SDP), RFC 2327, as\
    \ follows:\n   o  The MIME type (video) goes in SDP \"m=\" as the media name.\n\
    \   o  The MIME subtype (MP4V-ES) goes in SDP \"a=rtpmap\" as the encoding\n \
    \     name.\n   o  The optional parameter \"rate\" goes in \"a=rtpmap\" as the\
    \ clock\n      rate.\n   o  The optional parameter \"profile-level-id\" and \"\
    config\" go in the\n      \"a=fmtp\" line to indicate the coder capability and\
    \ configuration,\n      respectively.  These parameters are expressed as a MIME\
    \ media type\n      string, in the form of as a semicolon separated list of\n\
    \      parameter=value pairs.\n   The following are some examples of media representation\
    \ in SDP:\n"
- title: Simple Profile/Level 1, rate=90000(90kHz), "profile-level-id" and
  contents:
  - 'Simple Profile/Level 1, rate=90000(90kHz), "profile-level-id" and

    '
- title: '"config" are present in "a=fmtp" line:'
  contents:
  - "\"config\" are present in \"a=fmtp\" line:\n  m=video 49170/2 RTP/AVP 98\n  a=rtpmap:98\
    \ MP4V-ES/90000\n  a=fmtp:98 profile-level-id=1;config=000001B001000001B509000001000000012\n\
    \     0008440FA282C2090A21F\n"
- title: Core Profile/Level 2, rate=90000(90kHz), "profile-level-id" is present in
  contents:
  - 'Core Profile/Level 2, rate=90000(90kHz), "profile-level-id" is present in

    '
- title: '"a=fmtp" line:'
  contents:
  - "\"a=fmtp\" line:\n  m=video 49170/2 RTP/AVP 98\n  a=rtpmap:98 MP4V-ES/90000\n\
    \  a=fmtp:98 profile-level-id=34\n"
- title: Advance Real Time Simple Profile/Level 1, rate=90000(90kHz),
  contents:
  - 'Advance Real Time Simple Profile/Level 1, rate=90000(90kHz),

    '
- title: '"profile-level-id" is present in "a=fmtp" line:'
  contents:
  - "\"profile-level-id\" is present in \"a=fmtp\" line:\n  m=video 49170/2 RTP/AVP\
    \ 98\n  a=rtpmap:98 MP4V-ES/90000\n  a=fmtp:98 profile-level-id=145\n"
- title: 5.3 MIME type registration of MPEG-4 Audio
  contents:
  - "5.3 MIME type registration of MPEG-4 Audio\n   MIME media type name: audio\n\
    \   MIME subtype name: MP4A-LATM\n   Required parameters:\n      rate: the rate\
    \ parameter indicates the RTP time stamp clock rate.\n      The default value\
    \ is 90000.  Other rates MAY be specified only if\n      they are set to the same\
    \ value as the audio sampling rate (number\n      of samples per second).\n  \
    \ Optional parameters:\n      profile-level-id: a decimal representation of MPEG-4\
    \ Audio Profile\n      Level indication value defined in ISO/IEC 14496-1 ([6]\
    \ and its\n      amendments).  This parameter indicates which MPEG-4 Audio tool\n\
    \      subsets the decoder is capable of using.  If this parameter is not\n  \
    \    specified in the capability exchange or session setup procedure,\n      its\
    \ default value of 30 (Natural Audio Profile/Level 1) is used.\n      object:\
    \ a decimal representation of the MPEG-4 Audio Object Type\n      value defined\
    \ in ISO/IEC 14496-3 [5].  This parameter specifies\n      the tool to be used\
    \ by the coder.  It CAN be used to limit the\n      capability within the specified\
    \ \"profile-level-id\".\n      bitrate: the data rate for the audio bit stream.\n\
    \      cpresent: a boolean parameter indicates whether audio payload\n      configuration\
    \ data has been multiplexed into an RTP payload (see\n      section 4.1).  A 0\
    \ indicates the configuration data has not been\n      multiplexed into an RTP\
    \ payload, a 1 indicates that it has.  The\n      default if the parameter is\
    \ omitted is 1.\n      config: a hexadecimal representation of an octet string\
    \ that\n      expresses the audio payload configuration data \"StreamMuxConfig\"\
    ,\n      as defined in ISO/IEC 14496-3 [5] (see section 4.1).\n      Configuration\
    \ data is mapped onto the octet string in an MSB-first\n      basis.  The first\
    \ bit of the configuration data SHALL be located\n      at the MSB of the first\
    \ octet.  In the last octet, zero-padding\n      bits, if necessary, SHALL follow\
    \ the configuration data.\n      ptime: RECOMMENDED duration of each packet in\
    \ milliseconds.\n   Published specification:\n      Payload format specifications\
    \ are described in this document.\n      Encoding specifications are provided\
    \ in ISO/IEC 14496-3 [3][5].\n   Encoding considerations:\n      This type is\
    \ only defined for transfer via RTP.\n   Security considerations:\n      See Section\
    \ 6 of RFC 3016.\n   Interoperability considerations:\n      MPEG-4 Audio provides\
    \ a large and rich set of tools for the coding\n      of audio objects.  For effective\
    \ implementation of the standard,\n      subsets of the MPEG-4 Audio tool sets\
    \ similar to those used in\n      MPEG-4 Visual have been provided (see section\
    \ 5.1).\n      The audio stream SHALL be compliant with the MPEG-4 Audio\n   \
    \   Profile@Level specified by the parameter \"profile-level-id\".\n      Interoperability\
    \ between a sender and a receiver may be achieved\n      by specifying the parameter\
    \ \"profile-level-id\" in MIME content, or\n      by arranging in the capability\
    \ exchange procedure to set this\n      parameter mutually to the same value.\
    \  Furthermore, the \"object\"\n      parameter can be used to limit the capability\
    \ within the specified\n      Profile@Level in capability exchange.\n   Applications\
    \ which use this media type:\n      Audio and video streaming and conferencing\
    \ tools.\n   Additional information: none\n   Personal & email address to contact\
    \ for further information:\n      See Section 8 of RFC 3016.\n   Intended usage:\
    \ COMMON\n   Author/Change controller:\n      See Section 8 of RFC 3016.\n"
- title: 5.4 SDP usage of MPEG-4 Audio
  contents:
  - "5.4 SDP usage of MPEG-4 Audio\n   The MIME media type audio/MP4A-LATM string\
    \ is mapped to fields in the\n   Session Description Protocol (SDP), RFC 2327,\
    \ as follows:\n   o  The MIME type (audio) goes in SDP \"m=\" as the media name.\n\
    \   o  The MIME subtype (MP4A-LATM) goes in SDP \"a=rtpmap\" as the\n      encoding\
    \ name.\n   o  The required parameter \"rate\" goes in \"a=rtpmap\" as the clock\n\
    \      rate.\n   o  The optional parameter \"ptime\" goes in SDP \"a=ptime\" attribute.\n\
    \   o  The optional parameter \"profile-level-id\" goes in the \"a=fmtp\"\n  \
    \    line to indicate the coder capability.  The \"object\" parameter\n      goes\
    \ in the \"a=fmtp\" attribute.  The payload-format-specific\n      parameters\n\
    \      \"bitrate\", \"cpresent\" and \"config\" go in the \"a=fmtp\" line.  These\n\
    \      parameters are expressed as a MIME media type string, in the form\n   \
    \   of as a semicolon separated list of parameter=value pairs.\n   The following\
    \ are some examples of the media representation in SDP:\n"
- title: For 6 kb/s CELP bitstreams (with an audio sampling rate of 8 kHz),
  contents:
  - "For 6 kb/s CELP bitstreams (with an audio sampling rate of 8 kHz),\n  m=audio\
    \ 49230 RTP/AVP 96\n  a=rtpmap:96 MP4A-LATM/8000\n  a=fmtp:96 profile-level-id=9;object=8;cpresent=0;config=9128B1071070\n\
    \  a=ptime:20\n   For 64 kb/s AAC LC stereo bitstreams (with an audio sampling\
    \ rate of\n   24 kHz),\n      m=audio 49230 RTP/AVP 96\n      a=rtpmap:96 MP4A-LATM/24000\n\
    \      a=fmtp:96 profile-level-id=1; bitrate=64000; cpresent=0;\n      config=9122620000\n\
    \   In the above two examples, audio configuration data is not\n   multiplexed\
    \ into the RTP payload and is described only in SDP.\n   Furthermore, the \"clock\
    \ rate\" is set to the audio sampling rate.\n   If the clock rate has been set\
    \ to its default value and it is\n   necessary to obtain the audio sampling rate,\
    \ this can be done by\n   parsing the \"config\" parameter (see the following\
    \ example).\n      m=audio 49230 RTP/AVP 96\n      a=rtpmap:96 MP4A-LATM/90000\n\
    \      a=fmtp:96 object=8; cpresent=0; config=9128B1071070\n   The following example\
    \ shows that the audio configuration data appears\n   in the RTP payload.\n  \
    \    m=audio 49230 RTP/AVP 96\n      a=rtpmap:96 MP4A-LATM/90000\n      a=fmtp:96\
    \ object=2; cpresent=1\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   RTP packets using the payload format defined in\
    \ this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [8].  This implies that confidentiality of the\
    \ media\n   streams is achieved by encryption.  Because the data compression used\n\
    \   with this payload format is applied end-to-end, encryption may be\n   performed\
    \ on the compressed data so there is no conflict between the\n   two operations.\n\
    \   The complete MPEG-4 system allows for transport of a wide range of\n   content,\
    \ including Java applets (MPEG-J) and scripts.  Since this\n   payload format\
    \ is restricted to audio and video streams, it is not\n   possible to transport\
    \ such active content in this format.\n"
- title: 7. References
  contents:
  - "7. References\n   1  Bradner, S., \"The Internet Standards Process -- Revision\
    \ 3\", BCP\n      9, RFC 2026, October 1996.\n   2  ISO/IEC 14496-2:1999, \"Information\
    \ technology - Coding of audio-\n      visual objects - Part2: Visual\".\n   3\
    \  ISO/IEC 14496-3:1999, \"Information technology - Coding of audio-\n      visual\
    \ objects - Part3: Audio\".\n   4  ISO/IEC 14496-2:1999/Amd.1:2000, \"Information\
    \ technology - Coding\n      of audio-visual objects - Part 2: Visual, Amendment\
    \ 1: Visual\n      extensions\".\n   5  ISO/IEC 14496-3:1999/Amd.1:2000, \"Information\
    \ technology - Coding\n      of audio-visual objects - Part3: Audio, Amendment\
    \ 1: Audio\n      extensions\".\n   6  ISO/IEC 14496-1:1999, \"Information technology\
    \ - Coding of audio-\n      visual objects - Part1: Systems\".\n   7  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n      Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   8  Schulzrinne, H., Casner, S., Frederick, R.\
    \ and V. Jacobson \"RTP: A\n      Transport Protocol for Real Time Applications\"\
    , RFC 1889, January\n      1996.\n   9  ISO/IEC 14496-2:1999/Cor.1:2000, \"Information\
    \ technology - Coding\n      of audio-visual objects - Part2: Visual, Technical\
    \ corrigendum 1\".\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Yoshihiro Kikuchi\n   Toshiba corporation\n   1, Komukai\
    \ Toshiba-cho, Saiwai-ku, Kawasaki, 212-8582, Japan\n   EMail: yoshihiro.kikuchi@toshiba.co.jp\n\
    \   Yoshinori Matsui\n   Matsushita Electric Industrial Co., LTD.\n   1006, Kadoma,\
    \ Kadoma-shi, Osaka, Japan\n   EMail: matsui@drl.mei.co.jp\n   Toshiyuki Nomura\n\
    \   NEC Corporation\n   4-1-1,Miyazaki,Miyamae-ku,Kawasaki,JAPAN\n   EMail: t-nomura@ccm.cl.nec.co.jp\n\
    \   Shigeru Fukunaga\n   Oki Electric Industry Co., Ltd.\n   1-2-27 Shiromi, Chuo-ku,\
    \ Osaka 540-6025 Japan.\n   EMail: fukunaga444@oki.co.jp\n   Hideaki Kimata\n\
    \   Nippon Telegraph and Telephone Corporation\n   1-1, Hikari-no-oka, Yokosuka-shi,\
    \ Kanagawa, Japan\n   EMail: kimata@nttvdt.hil.ntt.co.jp\n"
- title: 9. Full Copyright Statement
  contents:
  - "9. Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
