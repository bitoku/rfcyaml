- title: __initial_text__
  contents:
  - '   A Presence Event Package for the Session Initiation Protocol (SIP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the usage of the Session Initiation Protocol\n\
    \   (SIP) for subscriptions and notifications of presence.  Presence is\n   defined\
    \ as the willingness and ability of a user to communicate with\n   other users\
    \ on the network.  Historically, presence has been limited\n   to \"on-line\"\
    \ and \"off-line\" indicators; the notion of presence here\n   is broader.  Subscriptions\
    \ and notifications of presence are\n   supported by defining an event package\
    \ within the general SIP event\n   notification framework.  This protocol is also\
    \ compliant with the\n   Common Presence Profile (CPP) framework.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       6.8.  Subscriber Processing of NOTIFY Requests ..............\
    \  13\n       6.9.  Handling of Forked Requests ...........................  13\n\
    \       6.10. Rate of Notifications .................................  14\n  \
    \     6.11. State Agents ..........................................  14\n    \
    \         6.11.1. Aggregation, Authentication, and Authorization.  14\n      \
    \       6.11.2. Migration .....................................  15\n   7.  Learning\
    \ Presence State .....................................  16\n       7.1.  Co-location\
    \ ...........................................  16\n       7.2.  REGISTER ..............................................\
    \  16\n       7.3.  Uploading Presence Documents ..........................  17\n\
    \   8.  Example Message Flow ........................................  17\n  \
    \ 9.  Security Considerations .....................................  20\n    \
    \   9.1.  Confidentiality .......................................  20\n      \
    \ 9.2.  Message Integrity and Authenticity ....................  21\n       9.3.\
    \  Outbound Authentication ...............................  22\n       9.4.  Replay\
    \ Prevention .....................................  22\n       9.5.  Denial of\
    \ Service Attacks Against Third Parties .......  22\n       9.6.  Denial Of Service\
    \ Attacks Against Servers .............  23\n   10. IANA Considerations .........................................\
    \  23\n   11. Contributors ................................................  24\n\
    \   12. Acknowledgements ............................................  25\n  \
    \ 13. Normative References ........................................  25\n   14.\
    \ Informative References ......................................  26\n   15. Author's\
    \ Address ............................................  26\n   16. Full Copyright\
    \ Statement ....................................  27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Presence, also known as presence information, conveys the\
    \ ability and\n   willingness of a user to communicate across a set of devices.\
    \  RFC\n   2778 [10] defines a model and terminology for describing systems that\n\
    \   provide presence information.  In that model, a presence service is a\n  \
    \ system that accepts, stores, and distributes presence information to\n   interested\
    \ parties, called watchers.  A presence protocol is a\n   protocol for providing\
    \ a presence service over the Internet or any IP\n   network.\n   This document\
    \ proposes the usage of the Session Initiation Protocol\n   (SIP) [1] as a presence\
    \ protocol.  This is accomplished through a\n   concrete instantiation of the\
    \ general event notification framework\n   defined for SIP [2], and as such, makes\
    \ use of the SUBSCRIBE and\n   NOTIFY methods defined there.  Specifically, this\
    \ document defines an\n   event package, as described in RFC 3265 [2].  SIP is\
    \ particularly\n   well suited as a presence protocol.  SIP location services\
    \ already\n   contain presence information, in the form of registrations.\n  \
    \ Furthermore, SIP networks are capable of routing requests from any\n   user\
    \ on the network to the server that holds the registration state\n   for a user.\
    \  As this state is a key component of user presence, those\n   SIP networks can\
    \ allow SUBSCRIBE requests to be routed to the same\n   server.  This means that\
    \ SIP networks can be reused to establish\n   global connectivity for presence\
    \ subscriptions and notifications.\n   This event package is based on the concept\
    \ of a presence agent, which\n   is a new logical entity that is capable of accepting\
    \ subscriptions,\n   storing subscription state, and generating notifications\
    \ when there\n   are changes in presence.  The entity is defined as a logical\
    \ one,\n   since it is generally co-resident with another entity.\n   This event\
    \ package is also compliant with the Common Presence Profile\n   (CPP) framework\
    \ that has been defined in [3].  This allows SIP for\n   presence to easily interwork\
    \ with other presence systems compliant to\n   CPP.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [4] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   This document uses the terms as defined in RFC 2778 [10].\n\
    \   Additionally, the following terms are defined and/or additionally\n   clarified:\n\
    \      Presence User Agent (PUA): A Presence User Agent manipulates\n        \
    \ presence information for a presentity.  This manipulation can\n         be the\
    \ side effect of some other action (such as sending a SIP\n         REGISTER request\
    \ to add a new Contact) or can be done\n         explicitly through the publication\
    \ of presence documents.  We\n         explicitly allow multiple PUAs per presentity.\
    \  This means that\n         a user can have many devices (such as a cell phone\
    \ and Personal\n         Digital Assistant (PDA)), each of which is independently\n\
    \         generating a component of the overall presence information for\n   \
    \      a presentity.  PUAs push data into the presence system, but are\n     \
    \    outside of it, in that they do not receive SUBSCRIBE messages\n         or\
    \ send NOTIFY messages.\n      Presence Agent (PA): A presence agent is a SIP\
    \ user agent which is\n         capable of receiving SUBSCRIBE requests, responding\
    \ to them,\n         and generating notifications of changes in presence state.\
    \  A\n         presence agent must have knowledge of the presence state of a\n\
    \         presentity.  This means that it must have access to presence\n     \
    \    data manipulated by PUAs for the presentity.  One way to do\n         this\
    \ is by co-locating the PA with the proxy/registrar.\n         Another way is\
    \ to co-locate it with the presence user agent of\n         the presentity.  However,\
    \ these are not the only ways, and this\n         specification makes no recommendations\
    \ about where the PA\n         function should be located.  A PA is always addressable\
    \ with a\n         SIP URI that uniquely identifies the presentity (i.e.,\n  \
    \       sip:joe@example.com).  There can be multiple PAs for a\n         particular\
    \ presentity, each of which handles some subset of the\n         total subscriptions\
    \ currently active for the presentity.  A PA\n         is also a notifier (defined\
    \ in RFC 3265 [2]) that supports the\n         presence event package.\n     \
    \ Presence Server: A presence server is a physical entity that can\n         act\
    \ as either a presence agent or as a proxy server for\n         SUBSCRIBE requests.\
    \  When acting as a PA, it is aware of the\n         presence information of the\
    \ presentity through some protocol\n         means.  When acting as a proxy, the\
    \ SUBSCRIBE requests are\n         proxied to another entity that may act as a\
    \ PA.\n      Edge Presence Server: An edge presence server is a presence agent\n\
    \         that is co-located with a PUA.  It is aware of the presence\n      \
    \   information of the presentity because it is co-located with the\n        \
    \ entity that manipulates this presence information.\n"
- title: 4.  Overview of Operation
  contents:
  - "4.  Overview of Operation\n   In this section, we present an overview of the\
    \ operation of this\n   event package.  The overview describes behavior that is\
    \ documented in\n   part here, in part within the SIP event framework [2], and\
    \ in part in\n   the SIP specification [1], in order to provide clarity on this\n\
    \   package for readers only casually familiar with those specifications.\n  \
    \ However, the detailed semantics of this package require the reader to\n   be\
    \ familiar with SIP events and the SIP specification itself.\n   When an entity,\
    \ the subscriber, wishes to learn about presence\n   information from some user,\
    \ it creates a SUBSCRIBE request.  This\n   request identifies the desired presentity\
    \ in the Request-URI, using a\n   SIP URI, SIPS URI [1] or a presence (pres) URI\
    \ [3].  The SUBSCRIBE\n   request is carried along SIP proxies as any other SIP\
    \ request would\n   be.  In most cases, it eventually arrives at a presence server,\
    \ which\n   can either generate a response to the request (in which case it acts\n\
    \   as the presence agent for the presentity), or proxy it on to an edge\n   presence\
    \ server.  If the edge presence server handles the\n   subscription, it is acting\
    \ as the presence agent for the presentity.\n   The decision at a presence server\
    \ about whether to proxy or terminate\n   the SUBSCRIBE is a local matter; however,\
    \ we describe one way to\n   effect such a configuration, using REGISTER.\n  \
    \ The presence agent (whether in the presence server or edge presence\n   server)\
    \ first authenticates the subscription, then authorizes it.\n   The means for\
    \ authorization are outside the scope of this protocol,\n   and we expect that\
    \ many mechanisms will be used.  If authorized, a\n   200 OK response is returned.\
    \  If authorization could not be obtained\n   at this time, the subscription is\
    \ considered \"pending\", and a 202\n   response is returned.  In both cases,\
    \ the PA sends an immediate\n   NOTIFY message containing the state of the presentity\
    \ and of the\n   subscription.  The presentity state may be bogus in the case\
    \ of a\n   pending subscription, indicating offline no matter what the actual\n\
    \   state of the presentity, for example.  This is to protect the privacy\n  \
    \ of the presentity, who may not want to reveal that they have not\n   provided\
    \ authorization for the subscriber.  As the state of the\n   presentity changes,\
    \ the PA generates NOTIFYs containing those state\n   changes to all subscribers\
    \ with authorized subscriptions.  Changes in\n   the state of the subscription\
    \ itself can also trigger NOTIFY\n   requests; that state is carried in the Subscription-State\
    \ header\n   field of the NOTIFY, and would typically indicate whether the\n \
    \  subscription is active or pending.\n   The SUBSCRIBE message establishes a\
    \ \"dialog\" with the presence agent.\n   A dialog is defined in RFC 3261 [1],\
    \ and it represents the SIP state\n   between a pair of entities to facilitate\
    \ peer-to-peer message\n   exchanges.  This state includes the sequence numbers\
    \ for messages in\n   both directions (SUBSCRIBE from the subscriber, NOTIFY from\
    \ the\n   presence agent), in addition to a route set and remote target URI.\n\
    \   The route set is a list of SIP (or SIPS) URIs which identify SIP\n   proxy\
    \ servers that are to be visited along the path of SUBSCRIBE\n   refreshes or\
    \ NOTIFY requests.  The remote target URI is the SIP or\n   SIPS URI that identifies\
    \ the target of the message - the subscriber,\n   in the case of NOTIFY, or the\
    \ presence agent, in the case of a\n   SUBSCRIBE refresh.\n   SIP provides a procedure\
    \ called record-routing that allows for proxy\n   servers to request to be on\
    \ the path of NOTIFY messages and SUBSCRIBE\n   refreshes.  This is accomplished\
    \ by inserting a URI into the\n   Record-Route header field in the initial SUBSCRIBE\
    \ request.\n   The subscription persists for a duration that is negotiated as\
    \ part\n   of the initial SUBSCRIBE.  The subscriber will need to refresh the\n\
    \   subscription before its expiration, if they wish to retain the\n   subscription.\
    \  This is accomplished by sending a SUBSCRIBE refresh\n   within the same dialog\
    \ established by the initial SUBSCRIBE.  This\n   SUBSCRIBE is nearly identical\
    \ to the initial one, but contains a tag\n   in the To header field, a higher\
    \ CSeq header field value, and\n   possibly a set of Route header field values\
    \ that identify the path of\n   proxies the request is to take.\n   The subscriber\
    \ can terminate the subscription by sending a SUBSCRIBE,\n   within the dialog,\
    \ with an Expires header field (which indicates\n   duration of the subscription)\
    \ value of zero.  This causes an\n   immediate termination of the subscription.\
    \  A NOTIFY request is then\n   generated by the presence agent with the most\
    \ recent state.  In fact,\n   behavior of the presence agent for handling a SUBSCRIBE\
    \ request with\n   Expires of zero is no different than for any other expiration\
    \ value;\n   pending or authorized SUBSCRIBE requests result in a triggered NOTIFY\n\
    \   with the current presentity and subscription state.\n   The presence agent\
    \ can terminate the subscription at any time.  To do\n   so, it sends a NOTIFY\
    \ request with a Subscription-State header field\n   indicating that the subscription\
    \ has been terminated.  A reason\n   parameter can be supplied which provides\
    \ the reason.\n   It is also possible to fetch the current presence state, resulting\
    \ in\n   a one-time notification containing the current state.  This is\n   accomplished\
    \ by sending a SUBSCRIBE request with an immediate\n   expiration.\n"
- title: 5.  Usage of Presence URIs
  contents:
  - "5.  Usage of Presence URIs\n   A presentity is identified in the most general\
    \ way through a presence\n   URI [3], which is of the form pres:user@domain. \
    \ These URIs are\n   resolved to protocol specific URIs, such as the SIP or SIPS\
    \ URI,\n   through domain-specific mapping policies maintained on a server.\n\
    \   It is very possible that a user will have both a SIP (and/or SIPS)\n   URI\
    \ and a pres URI to identify both themself and other users.  This\n   leads to\
    \ questions about how these URI relate and which are to be\n   used.\n   In some\
    \ instances, a user starts with one URI format, such as the\n   pres URI, and\
    \ learns a URI in a different format through some\n   protocol means.  As an example,\
    \ a SUBSCRIBE request sent to a pres\n   URI will result in learning a SIP or\
    \ SIPS URI for the presentity from\n   the Contact header field of the 200 OK\
    \ to the SUBSCRIBE request.  As\n   another example, a DNS mechanism might be\
    \ defined that would allow\n   lookup of a pres URI to obtain a SIP or SIPS URI.\
    \  In cases where one\n   URI is learned from another through protocol means,\
    \ those means will\n   often provide some kind of scoping that limit the lifetime\
    \ of the\n   learned URI.  DNS, for example, provides a TTL which would limit\
    \ the\n   scope of the URI.  These scopes are very useful to avoid stale or\n\
    \   conflicting URIs for identifying the same resource.  To ensure that a\n  \
    \ user can always determine whether a learned URI is still valid, it is\n   RECOMMENDED\
    \ that systems which provide lookup services for presence\n   URIs have some kind\
    \ of scoping mechanism.\n   If a subscriber is only aware of the protocol-independent\
    \ pres URI\n   for a presentity, it follows the procedures defined in [5].  These\n\
    \   procedures will result in the placement of the pres URI in the\n   Request-URI\
    \ of the SIP request, followed by the usage of the DNS\n   procedures defined\
    \ in [5] to determine the host to send the SIP\n   request to.  Of course, a local\
    \ outbound proxy may alternatively be\n   used, as specified in RFC 3261 [1].\
    \  If the subscriber is aware of\n   both the protocol-independent pres URI and\
    \ the SIP or SIPS URI for\n   the same presentity, and both are valid (as discussed\
    \ above) it\n   SHOULD use the pres URI format.  Of course, if the subscriber\
    \ only\n   knows the SIP URI for the presentity, that URI is used, and standard\n\
    \   RFC 3261 processing will occur. When the pres URI is used, any\n   proxies\
    \ along the path of the SUBSCRIBE request which do not\n   understand the URI\
    \ scheme will reject the request.  As such, it is\n   expected that many systems\
    \ will be initially deployed that only\n   provide users with a SIP URI.\n   SUBSCRIBE\
    \ messages also contain logical identifiers that define the\n   originator and\
    \ recipient of the subscription (the To and From header\n   fields).  These headers\
    \ can take either a pres or SIP URI.  When the\n   subscriber is aware of both\
    \ a pres and SIP URI for its own identity,\n   it SHOULD use the pres URI in the\
    \ From header field.  Similarly, when\n   the subscriber is aware of both a pres\
    \ and a SIP URI for the desired\n   presentity, it SHOULD use the pres URI in\
    \ the To header field.\n   The usage of the pres URI instead of the SIP URI within\
    \ the SIP\n   message supports interoperability through gateways to other\n  \
    \ CPP-compliant systems.  It provides a protocol-independent form of\n   identification\
    \ which can be passed between systems.  Without such an\n   identity, gateways\
    \ would be forced to map SIP URIs into the\n   addressing format of other protocols.\
    \  Generally, this is done by\n   converting the SIP URI to the form <foreign-protocol-scheme>:<encoded\n\
    \   SIP URI>@<gateway>.  This is commonly done in email systems, and has\n   many\
    \ known problems.  The usage of the pres URI is a SHOULD, and not\n   a MUST,\
    \ to allow for cases where it is known that there are no\n   gateways present,\
    \ or where the usage of the pres URI will cause\n   interoperability problems\
    \ with SIP components that do not support the\n   pres URI.\n   The Contact, Record-Route\
    \ and Route fields do not identify logical\n   entities, but rather concrete ones\
    \ used for SIP messaging.  SIP [1]\n   specifies rules for their construction.\n"
- title: 6.  Presence Event Package
  contents:
  - "6.  Presence Event Package\n   The SIP event framework [2] defines a SIP extension\
    \ for subscribing\n   to, and receiving notifications of, events.  It leaves the\
    \ definition\n   of many aspects of these events to concrete extensions, known\
    \ as\n   event packages.  This document qualifies as an event package.  This\n\
    \   section fills in the information required for all event packages by\n   RFC\
    \ 3265 [2].\n"
- title: 6.1.  Package Name
  contents:
  - "6.1.  Package Name\n   The name of this package is \"presence\".  As specified\
    \ in RFC 3265\n   [2], this value appears in the Event header field present in\n\
    \   SUBSCRIBE and NOTIFY requests.\n   Example:\n   Event: presence\n"
- title: 6.2.  Event Package Parameters
  contents:
  - "6.2.  Event Package Parameters\n   The SIP event framework allows event packages\
    \ to define additional\n   parameters carried in the Event header field.  This\
    \ package,\n   presence, does not define any additional parameters.\n"
- title: 6.3.  SUBSCRIBE Bodies
  contents:
  - "6.3.  SUBSCRIBE Bodies\n   A SUBSCRIBE request MAY contain a body.  The purpose\
    \ of the body\n   depends on its type.  Subscriptions will normally not contain\
    \ bodies.\n   The Request-URI, which identifies the presentity, combined with\
    \ the\n   event package name, is sufficient for presence.\n   One type of body\
    \ that can be included in a SUBSCRIBE request is a\n   filter document.  These\
    \ filters request that only certain presence\n   events generate notifications,\
    \ or would ask for a restriction on the\n   set of data returned in NOTIFY requests.\
    \  For example, a presence\n   filter might specify that the notifications should\
    \ only be generated\n   when the status of the user's instant inbox [10] changes.\
    \  It might\n   also say that the content of these notifications should only contain\n\
    \   the status of the instant inbox.  Filter documents are not specified\n   in\
    \ this document, and at the time of writing, are expected to be the\n   subject\
    \ of future standardization activity.\n   Honoring of these filters is at the\
    \ policy discretion of the PA.\n   If the SUBSCRIBE request does not contain a\
    \ filter, this tells the PA\n   that no filter is to be applied.  The PA SHOULD\
    \ send NOTIFY requests\n   at the discretion of its own policy.\n"
- title: 6.4.  Subscription Duration
  contents:
  - "6.4.  Subscription Duration\n   User presence changes as a result of many events.\
    \  Some examples are:\n         o Turning on and off of a cell phone\n       \
    \  o Modifying the registration from a softphone\n         o Changing the status\
    \ on an instant messaging tool\n   These events are usually triggered by human\
    \ intervention, and occur\n   with a frequency on the order of seconds to hours.\
    \  As such,\n   subscriptions should have an expiration in the middle of this\
    \ range,\n   which is roughly one hour.  Therefore, the default expiration time\n\
    \   for subscriptions within this package is 3600 seconds.  As per RFC\n   3265\
    \ [2], the subscriber MAY specify an alternate expiration in the\n   Expires header\
    \ field.\n"
- title: 6.5.  NOTIFY Bodies
  contents:
  - "6.5.  NOTIFY Bodies\n   As described in RFC 3265 [2], the NOTIFY message will\
    \ contain bodies\n   that describe the state of the subscribed resource.  This\
    \ body is in\n   a format listed in the Accept header field of the SUBSCRIBE,\
    \ or a\n   package-specific default if the Accept header field was omitted from\n\
    \   the SUBSCRIBE.\n   In this event package, the body of the notification contains\
    \ a\n   presence document.  This document describes the presence of the\n   presentity\
    \ that was subscribed to.  All subscribers and notifiers\n   MUST support the\
    \ \"application/pidf+xml\" presence data format\n   described in [6].  The subscribe\
    \ request MAY contain an Accept header\n   field.  If no such header field is\
    \ present, it has a default value of\n   \"application/pidf+xml\".  If the header\
    \ field is present, it MUST\n   include \"application/pidf+xml\", and MAY include\
    \ any other types\n   capable of representing user presence.\n"
- title: 6.6.  Notifier Processing of SUBSCRIBE Requests
  contents:
  - "6.6.  Notifier Processing of SUBSCRIBE Requests\n   Based on the proxy routing\
    \ procedures defined in the SIP\n   specification, the SUBSCRIBE request will\
    \ arrive at a presence agent\n   (PA).  This subsection defines package-specific\
    \ processing at the PA\n   of a SUBSCRIBE request.  General processing rules for\
    \ requests are\n   covered in Section 8.2 of RFC 3261 [1], in addition to general\n\
    \   SUBSCRIBE processing in RFC 3265 [2].\n   User presence is highly sensitive\
    \ information.  Because the\n   implications of divulging presence information\
    \ can be severe, strong\n   requirements are imposed on the PA regarding subscription\
    \ processing,\n   especially related to authentication and authorization.\n"
- title: 6.6.1.  Authentication
  contents:
  - "6.6.1.  Authentication\n   A presence agent MUST authenticate all subscription\
    \ requests.  This\n   authentication can be done using any of the mechanisms defined\
    \ in RFC\n   3261 [1].  Note that digest is mandatory to implement, as specified\n\
    \   in RFC 3261.\n   In single-domain systems, where the subscribers all have\
    \ shared\n   secrets with the PA, the combination of digest authentication over\n\
    \   Transport Layer Security (TLS) [7] provides a secure and workable\n   solution\
    \ for authentication.  This use case is described in Section\n   26.3.2.1 of RFC\
    \ 3261 [1].\n   In inter-domain scenarios, establishing an authenticated identity\
    \ of\n   the subscriber is harder.  It is anticipated that authentication will\n\
    \   often be established through transitive trust.  SIP mechanisms for\n   network\
    \ asserted identity can be applied to establish the identity of\n   the subscriber\
    \ [11].\n   A presentity MAY choose to represent itself with a SIPS URI.  By\n\
    \   \"represent itself\", it means that the user represented by the\n   presentity\
    \ hands out, on business cards, web pages, and so on, a SIPS\n   URI for their\
    \ presentity.  The semantics associated with this URI, as\n   described in RFC\
    \ 3261 [1], require TLS usage on each hop between the\n   subscriber and the server\
    \ in the domain of the URI.  This provides\n   additional assurances (but no absolute\
    \ guarantees) that identity has\n   been verified at each hop.\n   Another mechanism\
    \ for authentication is S/MIME.  Its usage with SIP\n   is described fully in\
    \ RFC 3261 [1].  It provides an end-to-end\n   authentication mechanism that can\
    \ be used for a PA to establish the\n   identity of the subscriber.\n"
- title: 6.6.2.  Authorization
  contents:
  - "6.6.2.  Authorization\n   Once authenticated, the PA makes an authorization decision.\
    \  A PA\n   MUST NOT accept a subscription unless authorization has been provided\n\
    \   by the presentity.  The means by which authorization are provided are\n  \
    \ outside the scope of this document.  Authorization may have been\n   provided\
    \ ahead of time through access lists, perhaps specified in a\n   web page.  Authorization\
    \ may have been provided by means of uploading\n   of some kind of standardized\
    \ access control list document.  Back end\n   authorization servers, such as a\
    \ DIAMETER [12] server, can also be\n   used.  It is also useful to be able to\
    \ query the user for\n   authorization following the receipt of a subscription\
    \ request for\n   which no authorization information has been provided.  The\n\
    \   \"watcherinfo\" event template package for SIP [8] defines a means by\n  \
    \ which a presentity can become aware that a user has attempted to\n   subscribe\
    \ to it, so that it can then provide an authorization\n   decision.\n   Authorization\
    \ decisions can be very complex.  Ultimately, all\n   authorization decisions\
    \ can be mapped into one of three states:\n   rejected, successful, and pending.\
    \  Any subscription for which the\n   client is authorized to receive information\
    \ about some subset of\n   presence state at some points in time is a successful\
    \ subscription.\n   Any subscription for which the client will never receive any\n\
    \   information about any subset of the presence state is a rejected\n   subscription.\
    \  Any subscription for which it is not yet known whether\n   it is successful\
    \ or rejected is pending.  Generally, a pending\n   subscription occurs when the\
    \ server cannot obtain authorization at\n   the time of the subscription, but\
    \ may be able to do so at a later\n   time, perhaps when the presentity becomes\
    \ available.\n   The appropriate response codes for conveying a successful, rejected,\n\
    \   or pending subscription (200, 403 or 603, and 202, respectively) are\n   described\
    \ in RFC 3265 [2].\n   If the resource is not in a meaningful state, RFC 3265\
    \ [2] allows the\n   body of the initial NOTIFY to be empty.  In the case of presence,\n\
    \   that NOTIFY MAY contain a presence document.  This document would\n   indicate\
    \ whatever presence state the subscriber has been authorized\n   to see; it is\
    \ interpreted by the subscriber as the current presence\n   state of the presentity.\
    \  For pending subscriptions, the state of the\n   presentity SHOULD include some\
    \ kind of textual note that indicates a\n   pending status.\n   Polite blocking,\
    \ as described in [13], is possible by generating a\n   200 OK to the subscription\
    \ even though it has been rejected (or\n   marked pending).  Of course, an immediate\
    \ NOTIFY will still be sent.\n   The contents of the presence document in such\
    \ a NOTIFY are at the\n   discretion of the implementor, but SHOULD be constructed\
    \ in such a\n   way as to not reveal to the subscriber that their request has\n\
    \   actually been blocked.  Typically, this is done by indicating\n   \"offline\"\
    \ or equivalent status for a single contact address.\n"
- title: 6.7.  Notifier Generation of NOTIFY Requests
  contents:
  - "6.7.  Notifier Generation of NOTIFY Requests\n   RFC 3265 details the formatting\
    \ and structure of NOTIFY messages.\n   However, packages are mandated to provide\
    \ detailed information on\n   when to send a NOTIFY, how to compute the state\
    \ of the resource, how\n   to generate neutral or fake state information, and\
    \ whether state\n   information is complete or partial.  This section describes\
    \ those\n   details for the presence event package.\n   A PA MAY send a NOTIFY\
    \ at any time.  Typically, it will send one when\n   the state of the presentity\
    \ changes.  The NOTIFY request MAY contain\n   a body indicating the state of\
    \ the presentity.  The times at which\n   the NOTIFY is sent for a particular\
    \ subscriber, and the contents of\n   the body within that notification, are subject\
    \ to any rules specified\n   by the authorization policy that governs the subscription.\
    \  This\n   protocol in no way limits the scope of such policies.  As a baseline,\n\
    \   a reasonable policy is to generate notifications when the state of\n   any\
    \ of the presence tuples changes.  These notifications would\n   contain the complete\
    \ and current presence state of the presentity as\n   known to the presence agent.\
    \  Future extensions can be defined that\n   allow a subscriber to request that\
    \ the notifications contain changes\n   in presence information only, rather than\
    \ complete state.\n   In the case of a pending subscription, when final authorization\
    \ is\n   determined, a NOTIFY can be sent.  If the result of the authorization\n\
    \   decision was success, a NOTIFY SHOULD be sent and SHOULD contain a\n   presence\
    \ document with the current state of the presentity.  If the\n   subscription\
    \ is rejected, a NOTIFY MAY be sent.  As described in RFC\n   3265 [2], the Subscription-State\
    \ header field indicates the state of\n   the subscription.\n   The body of the\
    \ NOTIFY MUST be sent using one of the types listed in\n   the Accept header field\
    \ in the most recent SUBSCRIBE request, or\n   using the type \"application/pidf+xml\"\
    \ if no Accept header field was\n   present.\n   The means by which the PA learns\
    \ the state of the presentity are also\n   outside the scope of this recommendation.\
    \  Registrations can provide\n   a component of the presentity state.  However,\
    \ the means by which a\n   PA uses registrations to construct a presence document\
    \ are an\n   implementation choice.  If a PUA wishes to explicitly inform the\n\
    \   presence agent of its presence state, it should explicitly publish\n   the\
    \ presence document (or its piece of it) rather than attempting to\n   manipulate\
    \ their registrations to achieve the desired result.\n   For reasons of privacy,\
    \ it will frequently be necessary to encrypt\n   the contents of the notifications.\
    \  This can be accomplished using\n   S/MIME.  The encryption can be performed\
    \ using the key of the\n   subscriber as identified in the From field of the SUBSCRIBE\
    \ request.\n   Similarly, integrity of the notifications is important to\n   subscribers.\
    \  As such, the contents of the notifications MAY provide\n   authentication and\
    \ message integrity using S/MIME.  Since the NOTIFY\n   is generated by the presence\
    \ server, which may not have access to the\n   key of the user represented by\
    \ the presentity, it will frequently be\n   the case that the NOTIFY is signed\
    \ by a third party.  It is\n   RECOMMENDED that the signature be by an authority\
    \ over the domain of\n   the presentity.  In other words, for a user pres:user@example.com,\n\
    \   the signator of the NOTIFY SHOULD be the authority for example.com.\n"
- title: 6.8.  Subscriber Processing of NOTIFY Requests
  contents:
  - "6.8.  Subscriber Processing of NOTIFY Requests\n   RFC 3265 [2] leaves it to\
    \ event packages to describe the process\n   followed by the subscriber upon receipt\
    \ of a NOTIFY request,\n   including any logic required to form a coherent resource\
    \ state.\n   In this specification, each NOTIFY contains either no presence\n\
    \   document, or a document representing the complete and coherent state\n   of\
    \ the presentity.  Within a dialog, the presence document in the\n   NOTIFY request\
    \ with the highest CSeq header field value is the\n   current one.  When no document\
    \ is present in that NOTIFY, the\n   presence document present in the NOTIFY with\
    \ the next highest CSeq\n   value is used.  Extensions which specify the use of\
    \ partial state for\n   presentities will need to dictate how coherent state is\
    \ achieved.\n"
- title: 6.9.  Handling of Forked Requests
  contents:
  - "6.9.  Handling of Forked Requests\n   RFC 3265 [2] requires each package to describe\
    \ handling of forked\n   SUBSCRIBE requests.\n   This specification only allows\
    \ a single dialog to be constructed as a\n   result of emitting an initial SUBSCRIBE\
    \ request.  This guarantees\n   that only a single PA is generating notifications\
    \ for a particular\n   subscription to a particular presentity.  The result of\
    \ this is that\n   a presentity can have multiple PAs active, but these should\
    \ be\n   homogeneous, so that each can generate the same set of notifications\n\
    \   for the presentity.  Supporting heterogeneous PAs, each of which\n   generates\
    \ notifications for a subset of the presence data, is complex\n   and difficult\
    \ to manage.  Doing so would require the subscriber to\n   act as the aggregator\
    \ for presence data.  This aggregation function\n   can only reasonably be performed\
    \ by agents representing the\n   presentity.  Therefore, if aggregation is needed,\
    \ it MUST be done in\n   a PA representing the presentity.\n   Section 4.4.9 of\
    \ RFC 3265 [2] describes the processing that is\n   required to guarantee the\
    \ creation of a single dialog in response to\n   a SUBSCRIBE request.\n"
- title: 6.10.  Rate of Notifications
  contents:
  - "6.10.  Rate of Notifications\n   RFC 3265 [2] requires each package to specify\
    \ the maximum rate at\n   which notifications can be sent.\n   A PA SHOULD NOT\
    \ generate notifications for a single presentity at a\n   rate of more than once\
    \ every five seconds.\n"
- title: 6.11.  State Agents
  contents:
  - "6.11.  State Agents\n   RFC 3265 [2] requires each package to consider the role\
    \ of state\n   agents in the package, and if they are used, to specify how\n \
    \  authentication and authorization are done.\n   State agents are core to this\
    \ package.  Whenever the PA is not\n   co-located with the PUA for the presentity,\
    \ the PA is acting as a\n   state agent.  It collects presence state from the\
    \ PUA, and aggregates\n   it into a presence document.  Because there can be multiple\
    \ PUA, a\n   centralized state agent is needed to perform this aggregation.  That\n\
    \   is why state agents are fundamental to presence.  Indeed, they have a\n  \
    \ specific term that describes them - a presence server.\n"
- title: 6.11.1.  Aggregation, Authentication, and Authorization
  contents:
  - "6.11.1.  Aggregation, Authentication, and Authorization\n   The means by which\
    \ aggregation is done in the state agent is purely a\n   matter of policy.  The\
    \ policy will typically combine the desires of\n   the presentity along with the\
    \ desires of the provider.  This document\n   in no way restricts the set of policies\
    \ which may be applied.\n   However, there is clearly a need for the state agent\
    \ to have access\n   to the state of the presentity.  This state is manipulated\
    \ by the\n   PUA.  One way in which the state agent can obtain this state is to\n\
    \   subscribe to it.  As a result, if there were 5 PUA manipulating\n   presence\
    \ state for a single presentity, the state agent would\n   generate 5 subscriptions,\
    \ one to each PUA.  For this mechanism to be\n   effective, all PUA SHOULD be\
    \ capable of acting as a PA for the state\n   that they manipulate, and that they\
    \ authorize subscriptions that can\n   be authenticated as coming from the domain\
    \ of the presentity.\n   The usage of state agents does not significantly alter\
    \ the way in\n   which authentication is done by the PA.  Any of the SIP\n   authentication\
    \ mechanisms can be used by a state agent.  However,\n   digest authentication\
    \ will require the state agent to be aware of the\n   shared secret between the\
    \ presentity and the subscriber.  This will\n   require some means to securely\
    \ transfer the shared secrets from the\n   presentity to the state agent.\n  \
    \ The usage of state agents does, however, have a significant impact on\n   authorization.\
    \  As stated in Section 6.6, a PA is required to\n   authorize all subscriptions.\
    \  If no explicit authorization policy has\n   been defined, the PA will need\
    \ to query the user for authorization.\n   In a presence edge server (where the\
    \ PUA is co-located with the PUA),\n   this is trivially accomplished.  However,\
    \ when state agents are used\n   (i.e., a presence server), a means is needed\
    \ to alert the user that\n   an authorization decision is required.  This is the\
    \ reason for the\n   watcherinfo event template-package [8].  All state agents\
    \ SHOULD\n   support the watcherinfo template-package.\n"
- title: 6.11.2.  Migration
  contents:
  - "6.11.2.  Migration\n   On occasion, it makes sense for the PA function to migrate\
    \ from one\n   server to another.  For example, for reasons of scale, the PA\n\
    \   function may reside in the presence server when the PUA is not\n   running,\
    \ but when the PUA connects to the network, the PA migrates\n   subscriptions\
    \ to it in order to reduce state in the network.  The\n   mechanism for accomplishing\
    \ the migration is described in Section\n   3.3.5 of RFC 3265 [2].  However, packages\
    \ need to define under what\n   conditions such a migration would take place.\n\
    \   A PA MAY choose to migrate subscriptions at any time, through\n   configuration,\
    \ or through dynamic means.  The REGISTER request\n   provides one dynamic means\
    \ for a presence server to discover that the\n   function can migrate to a PUA.\
    \  Specifically, if a PUA wishes to\n   indicate support for the PA function,\
    \ it SHOULD use the callee\n   capabilities specification [9] to indicate that\
    \ it supports the\n   SUBSCRIBE request method and the presence event package.\
    \  The\n   combination of these two define a PA.  Of course, a presence server\n\
    \   can always attempt a migration without these explicit hints.  If it\n   fails\
    \ with either a 405 or 489 response code, the server knows that\n   the PUA does\
    \ not support the PA function.  In this case, the server\n   itself will need\
    \ to act as a PA for that subscription request.  Once\n   such a failure has occurred,\
    \ the server SHOULD NOT attempt further\n   migrations to that PUA for the duration\
    \ of its registration.\n   However, to avoid the extra traffic generated by these\
    \ failed\n   requests, a presence server SHOULD support the callee capabilities\n\
    \   extension.\n   Furthermore, indication of support for the SUBSCRIBE request\
    \ and the\n   presence event package is not sufficient for migration of\n   subscriptions.\
    \  A PA SHOULD NOT migrate the subscription if it is\n   composing aggregated\
    \ presence documents received from multiple PUA.\n"
- title: 7.  Learning Presence State
  contents:
  - "7.  Learning Presence State\n   Presence information can be obtained by the PA\
    \ in many ways.  No\n   specific mechanism is mandated by this specification.\
    \  This section\n   overviews some of the options, for informational purposes\
    \ only.\n"
- title: 7.1.  Co-location
  contents:
  - "7.1.  Co-location\n   When the PA function is co-located with the PUA, presence\
    \ is known\n   directly by the PA.\n"
- title: 7.2.  REGISTER
  contents:
  - "7.2.  REGISTER\n   A UA uses the SIP REGISTER method to inform the SIP network\
    \ of its\n   current communications addresses (i.e., Contact addresses).  Multiple\n\
    \   UA can independently register Contact addresses for the same\n   address-of-record.\
    \  This registration state represents an important\n   piece of the overall presence\
    \ information for a presentity.  It is an\n   indication of basic reachability\
    \ for communications.\n   Usage of REGISTER information to construct presence\
    \ is only possible\n   if the PA has access to the registration database, and\
    \ can be\n   informed of changes to that database.  One way to accomplish that\
    \ is\n   to co-locate the PA with the registrar.\n   The means by which registration\
    \ state is converted into presence\n   state is a matter of local policy, and\
    \ beyond the scope of this\n   specification.  However, some general guidelines\
    \ can be provided.\n   The address-of-record in the registration (the To header\
    \ field)\n   identifies the presentity.  Each registered Contact header field\n\
    \   identifies a point of communications for that presentity, which can\n   be\
    \ modeled using a tuple.  Note that the contact address in the tuple\n   need\
    \ not be the same as the registered contact address.  Using an\n   address-of-record\
    \ instead allows subsequent communications from a\n   watcher to pass through\
    \ proxies.  This is useful for policy\n   processing on behalf of the presentity\
    \ and the provider.\n   A PUA that uses registrations to manipulate presence state\
    \ SHOULD\n   make use of the SIP callee capabilities extension [9].  This allows\n\
    \   the PUA to provide the PA with richer information about itself.  For\n   example,\
    \ the presence of the methods parameter listing the method\n   \"MESSAGE\" indicates\
    \ support for instant messaging.\n   The q values from the Contact header field\
    \ [1] can be used to\n   establish relative priorities amongst the various communications\n\
    \   addresses in the Contact header fields.\n   The usage of registrations to\
    \ obtain presence information increases\n   the requirements for authenticity\
    \ and integrity of registrations.\n   Therefore, REGISTER requests used by presence\
    \ user agents MUST be\n   authenticated.\n"
- title: 7.3.  Uploading Presence Documents
  contents:
  - "7.3.  Uploading Presence Documents\n   If a means exists to upload presence documents\
    \ from PUA to the PA,\n   the PA can act as an aggregator and redistributor of\
    \ those documents.\n   The PA, in this case, would take the presence documents\
    \ received from\n   each PUA for the same presentity, and merge the tuples across\
    \ all of\n   those PUA into a single presence document.  Typically, this\n   aggregation\
    \ would be accomplished through administrator or user\n   defined policies about\
    \ how the aggregation should be done.\n   The specific means by which a presence\
    \ document is uploaded to a\n   presence agent are outside the scope of this specification.\
    \  When a\n   PUA wishes to have direct manipulation of the presence that is\n\
    \   distributed to subscribers, direct uploading of presence documents is\n  \
    \ RECOMMENDED.\n"
- title: 8.  Example Message Flow
  contents:
  - "8.  Example Message Flow\n   This message flow illustrates how the presence server\
    \ can be\n   responsible for sending notifications for a presentity.  This flow\n\
    \   assumes that the watcher has previously been authorized to subscribe\n   to\
    \ this resource at the server.\n   In this flow, the PUA informs the server about\
    \ the updated presence\n   information through some non-SIP means.\n   When the\
    \ value of the Content-Length header field is \"...\" this means\n   that the\
    \ value should be whatever the computed length of the body is.\n   Watcher   \
    \          Server                 PUA\n      | F1 SUBSCRIBE      |           \
    \         |\n      |------------------>|                    |\n      | F2 200\
    \ OK         |                    |\n      |<------------------|             \
    \       |\n      | F3 NOTIFY         |                    |\n      |<------------------|\
    \                    |\n      | F4 200 OK         |                    |\n   \
    \   |------------------>|                    |\n      |                   |  \
    \                  |\n      |                   |   Update presence  |\n     \
    \ |                   |<------------------ |\n      |                   |    \
    \                |\n      | F5 NOTIFY         |                    |\n      |<------------------|\
    \                    |\n      | F6 200 OK         |                    |\n   \
    \   |------------------>|                    |\n   Message Details\n   F1 SUBSCRIBE\
    \   watcher->example.com server\n      SUBSCRIBE sip:resource@example.com SIP/2.0\n\
    \      Via: SIP/2.0/TCP watcherhost.example.com;branch=z9hG4bKnashds7\n      To:\
    \ <sip:resource@example.com>\n      From: <sip:user@example.com>;tag=xfg9\n  \
    \    Call-ID: 2010@watcherhost.example.com\n      CSeq: 17766 SUBSCRIBE\n    \
    \  Max-Forwards: 70\n      Event: presence\n      Accept: application/pidf+xml\n\
    \      Contact: <sip:user@watcherhost.example.com>\n      Expires: 600\n     \
    \ Content-Length: 0\n   F2 200 OK   example.com server->watcher\n      SIP/2.0\
    \ 200 OK\n      Via: SIP/2.0/TCP watcherhost.example.com;branch=z9hG4bKnashds7\n\
    \        ;received=192.0.2.1\n      To: <sip:resource@example.com>;tag=ffd2\n\
    \      From: <sip:user@example.com>;tag=xfg9\n      Call-ID: 2010@watcherhost.example.com\n\
    \      CSeq: 17766 SUBSCRIBE\n      Expires: 600\n      Contact: sip:server.example.com\n\
    \      Content-Length: 0\n   F3 NOTIFY  example.com server-> watcher\n      NOTIFY\
    \ sip:user@watcherhost.example.com SIP/2.0\n      Via: SIP/2.0/TCP server.example.com;branch=z9hG4bKna998sk\n\
    \      From: <sip:resource@example.com>;tag=ffd2\n      To: <sip:user@example.com>;tag=xfg9\n\
    \      Call-ID: 2010@watcherhost.example.com\n      Event: presence\n      Subscription-State:\
    \ active;expires=599\n      Max-Forwards: 70\n      CSeq: 8775 NOTIFY\n      Contact:\
    \ sip:server.example.com\n      Content-Type: application/pidf+xml\n      Content-Length:\
    \ ...\n      [PIDF Document]\n   F4 200 OK watcher-> example.com server\n    \
    \  SIP/2.0 200 OK\n      Via: SIP/2.0/TCP server.example.com;branch=z9hG4bKna998sk\n\
    \        ;received=192.0.2.2\n      From: <sip:resource@example.com>;tag=ffd2\n\
    \      To: <sip:user@example.com>;tag=xfg9\n      Call-ID: 2010@watcherhost.example.com\n\
    \      CSeq: 8775 NOTIFY\n      Content-Length: 0\n   F5 NOTIFY example.com server\
    \ -> watcher\n      NOTIFY sip:user@watcherhost.example.com SIP/2.0\n      Via:\
    \ SIP/2.0/TCP server.example.com;branch=z9hG4bKna998sl\n      From: <sip:resource@example.com>;tag=ffd2\n\
    \      To: <sip:user@example.com>;tag=xfg9\n      Call-ID: 2010@watcherhost.example.com\n\
    \      CSeq: 8776 NOTIFY\n      Event: presence\n      Subscription-State: active;expires=543\n\
    \      Max-Forwards: 70\n      Contact: sip:server.example.com\n      Content-Type:\
    \ application/pidf+xml\n      Content-Length: ...\n      [New PIDF Document]\n\
    \   F6 200 OK\n      SIP/2.0 200 OK\n      Via: SIP/2.0/TCP server.example.com;branch=z9hG4bKna998sl\n\
    \       ;received=192.0.2.2\n      From: <sip:resource@example.com>;tag=ffd2\n\
    \      To: <sip:user@example.com>;tag=xfg9\n      Call-ID: 2010@watcherhost.example.com\n\
    \      CSeq: 8776 NOTIFY\n      Content-Length: 0\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   There are numerous security considerations for\
    \ presence.  RFC 2779\n   [13] outlines many of them, and they are discussed above.\
    \  This\n   section considers them issue by issue.\n"
- title: 9.1.  Confidentiality
  contents:
  - "9.1.  Confidentiality\n   Confidentiality encompasses many aspects of a presence\
    \ system:\n      o  Subscribers may not want to reveal the fact that they have\n\
    \         subscribed to certain users\n      o  Users may not want to reveal that\
    \ they have accepted\n         subscriptions from certain users\n      o  Notifications\
    \ (and fetch results) may contain sensitive data\n         which should not be\
    \ revealed to anyone but the subscriber\n   Confidentiality is provided through\
    \ a combination of hop-by-hop\n   encryption and end-to-end encryption.  The hop-by-hop\
    \ mechanisms\n   provide scalable confidentiality services, disable attacks involving\n\
    \   traffic analysis, and hide all aspects of presence messages.\n   However,\
    \ they operate based on transitivity of trust, and they cause\n   message content\
    \ to be revealed to proxies.  The end-to-end mechanisms\n   do not require transitivity\
    \ of trust, and reveal information only to\n   the desired recipient.  However,\
    \ end-to-end encryption cannot hide\n   all information, and is susceptible to\
    \ traffic analysis.  Strong\n   end-to-end authentication and encryption can be\
    \ done using public\n   keys, and end-to-end encryption can be done using private\
    \ keys [14].\n   Both hop-by-hop and end-to-end mechanisms will likely be needed\
    \ for\n   complete privacy services.\n   SIP allows any hop by hop encryption\
    \ scheme, but TLS is mandatory to\n   implement for servers.  Therefore, it is\
    \ RECOMMENDED that TLS [7] be\n   used between elements to provide this function.\
    \  The details for\n   usage of TLS for server-to-server and client-to-server\
    \ security are\n   detailed in Section 26.3.2 of RFC 3261 [1].\n   SIP encryption,\
    \ using S/MIME, MAY be used end-to-end for the\n   transmission of both SUBSCRIBE\
    \ and NOTIFY requests.\n"
- title: 9.2.  Message Integrity and Authenticity
  contents:
  - "9.2.  Message Integrity and Authenticity\n   It is important for the message\
    \ recipient to ensure that the message\n   contents are actually what was sent\
    \ by the originator, and that the\n   recipient of the message be able to determine\
    \ who the originator\n   really is.  This applies to both requests and responses\
    \ of SUBSCRIBE\n   and NOTIFY.  NOTIFY requests are particularly important.  Without\n\
    \   authentication and integrity, presence documents could be forged or\n   modified,\
    \ fooling the watcher into believing incorrect presence\n   information.\n   RFC\
    \ 3261 provides many mechanisms to provide these features.  In\n   order for the\
    \ PA to authenticate the watcher, it MAY use HTTP Digest\n   (Section 22 of RFC\
    \ 3261).  As a result, all watchers MUST support\n   HTTP Digest.  This is a redundant\
    \ requirement, however, since all SIP\n   user agents are mandated to support\
    \ it by RFC 3261.  To provide\n   authenticity and integrity services, a watcher\
    \ MAY use the SIPS\n   scheme when subscribing to the presentity.  To support\
    \ this, all PA\n   MUST support TLS and SIPS as if they were a proxy (see Section\
    \ 26.3.1\n   of RFC 3261).\n   Furthermore, SMIME MAY be used for integrity and\
    \ authenticity of\n   SUBSCRIBE and NOTIFY requests.  This is described in Section\
    \ 23 of\n   RFC 3261.\n"
- title: 9.3.  Outbound Authentication
  contents:
  - "9.3.  Outbound Authentication\n   When local proxies are used for transmission\
    \ of outbound messages,\n   proxy authentication is RECOMMENDED.  This is useful\
    \ to verify the\n   identity of the originator, and prevent spoofing and spamming\
    \ at the\n   originating network.\n"
- title: 9.4.  Replay Prevention
  contents:
  - "9.4.  Replay Prevention\n   Replay attacks can be used by an attacker to fool\
    \ a watcher into\n   believing an outdated presence state for a presentity.  For\
    \ example,\n   a document describing a presentity as being \"offline\" can be\n\
    \   replayed, fooling watchers into thinking that the user is never\n   online.\
    \  This may effectively block communications with the\n   presentity.\n   SIP\
    \ S/MIME can provide message integrity and authentication over SIP\n   request\
    \ bodies.  Watchers and PAs MAY implement S/MIME signatures to\n   prevent these\
    \ replay attacks.  When it is used for that purpose, the\n   presence document\
    \ carried in the NOTIFY request MUST contain a\n   timestamp.  In the case of\
    \ PIDF, this is accomplished using the\n   timestamp element, as described in\
    \ Section 6 of [6].  Tuples whose\n   timestamp is older than the timestamp of\
    \ the most recently received\n   presence document SHOULD be considered stale,\
    \ and discarded.\n   Finally, HTTP digest authentication (which MUST be implemented\
    \ by\n   watchers and PAs) MAY be used to prevent replay attacks, when there\n\
    \   is a shared secret between the PA and the watcher.  In such a case,\n   the\
    \ watcher can challenge the NOTIFY requests with the auth-int\n   quality of protection.\n"
- title: 9.5.  Denial of Service Attacks Against Third Parties
  contents:
  - "9.5.  Denial of Service Attacks Against Third Parties\n   Denial of Service (DOS)\
    \ attacks are a critical problem for an open,\n   inter-domain, presence protocol.\
    \  Unfortunately, presence is a good\n   candidate for Distributed DoS (DDOS)\
    \ attacks because of its\n   amplification properties.  A single SUBSCRIBE message\
    \ could generate\n   a nearly unending stream of notifications, so long as a suitably\n\
    \   dynamic source of presence data can be found.  Thus, a simple way to\n   launch\
    \ an attack against a target is to send subscriptions to a large\n   number of\
    \ users, and in the Contact header field (which is where\n   notifications are\
    \ sent), place the address of the target.  RFC 3265\n   provides some mechanisms\
    \ to mitigate these attacks [2].  If a NOTIFY\n   is not acknowledged or was not\
    \ wanted, the subscription that\n   generated it is removed.  This eliminates\
    \ the amplification\n   properties of providing false Contact addresses.\n   Authentication\
    \ and authorization at the PA can also prevent these\n   attacks.  Typically,\
    \ authorization policy will not allow\n   subscriptions from unknown watchers.\
    \  If the attacks are launched\n   from watchers unknown to the presentity (a\
    \ common case), the attacks\n   are mitigated.\n"
- title: 9.6.  Denial Of Service Attacks Against Servers
  contents:
  - "9.6.  Denial Of Service Attacks Against Servers\n   Denial of service attacks\
    \ can also be launched against a presence\n   agent itself, in order to disrupt\
    \ service to a community of users.\n   SIP itself, along with RFC 3265 [2], describes\
    \ several mechanisms to\n   mitigate these attacks.\n   A server can prevent SYN-attack\
    \ style attacks through a four-way\n   handshake using digest authentication [1].\
    \  Even if the server does\n   not have a shared secret with the client, it can\
    \ verify the source IP\n   address of the request using the \"anonymous\" user\
    \ mechanism described\n   in Section 22.1 of RFC 3261 [1].  SIP also allows a\
    \ server to\n   instruct a client to back-off from sending it requests, using\
    \ the 503\n   response code (Section 21.5.4 of RFC 3261 [1]).  This can be used\
    \ to\n   fend off floods of SUBSCRIBE requests launched as a result of a\n   distributed\
    \ denial of service attack.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This specification registers an event package, based\
    \ on the\n   registration procedures defined in RFC 3265 [2].  The following is\n\
    \   the information required for such a registration:\n        Package Name: presence\n\
    \        Package or Template-Package: This is a package.\n        Published Document:\
    \ RFC 3856\n        Person to Contact: Jonathan Rosenberg, jdrosen@jdrosen.net.\n"
- title: 11.  Contributors
  contents:
  - "11.  Contributors\n   The following individuals were part of the initial team\
    \ that worked\n   through the technical design of this specification:\n   Jonathan\
    \ Lennox\n   Columbia University\n   M/S 0401\n   1214 Amsterdam Ave.\n   New\
    \ York, NY 10027-7003\n   EMail: lennox@cs.columbia.edu\n   Robert Sparks\n  \
    \ dynamicsoft\n   5100 Tennyson Parkway\n   Suite 1200\n   Plano, Texas 75024\n\
    \   EMail: rsparks@dynamicsoft.com\n   Ben Campbell\n   EMail: ben@nostrum.com\n\
    \   Dean Willis\n   dynamicsoft\n   5100 Tennyson Parkway\n   Suite 1200\n   Plano,\
    \ Texas 75024\n   EMail: dwillis@dynamicsoft.com\n   Henning Schulzrinne\n   Columbia\
    \ University\n   M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY 10027-7003\n\
    \   EMail: schulzrinne@cs.columbia.edu\n   Christian Huitema\n   Microsoft Corporation\n\
    \   One Microsoft Way\n   Redmond, WA 98052-6399\n   EMail: huitema@microsoft.com\n\
    \   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond,\
    \ WA 98052-6399\n   EMail: bernarda@microsoft.com\n   David Gurle\n   Reuters\
    \ Corporation\n   EMail: David.Gurle@reuters.com\n   David Oran\n   Cisco Systems\n\
    \   170 West Tasman Dr.\n   San Jose, CA 95134\n   EMail: oran@cisco.com\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   We would like to thank Rick Workman, Adam Roach, Sean\
    \ Olson, Billy\n   Biggs, Stuart Barkley, Mauricio Arango, Richard Shockey, Jorgen\n\
    \   Bjorkner, Henry Sinnreich, Ronald Akers, Paul Kyzivat, Ya-Ching Tan,\n   Patrik\
    \ Faltstrom, Allison Mankin and Hisham Khartabil for their\n   comments and support\
    \ of this specification.\n"
- title: 13.  Normative References
  contents:
  - "13.  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ H., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Roach, A., \"Session Initiation Protocol (SIP)-Specific Event\n        Notification\"\
    , RFC 3265, June 2002.\n   [3]  Peterson, J., \"Common Profile for Presence (CPP)\"\
    , RFC 3859,\n        August 2004.\n   [4]  Bradner, S., \"Key Words for Use in\
    \ RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [5]  Peterson, J., \"Address Resolution for Instant Messaging and\n      \
    \  Presence\", RFC 3861, August 2004.\n   [6]  Sugano, H., Fujimoto, S., Klyne,\
    \ G., Bateman, A., Carr, W., and\n        J. Peterson, \"Presence Information\
    \ Data Format (PIDF)\", RFC\n        3863, August 2004.\n   [7]  Dierks, T. and\
    \ C. Allen, \"The TLS Protocol Version 1.0\", RFC\n        2246, January 1999.\n\
    \   [8]  Rosenberg, J., \"A Watcher Information Event Template-Package for\n \
    \       the Session Initiation Protocol (SIP)\", RFC 3857, August 2004.\n   [9]\
    \  Schulzrinne, H. Rosenberg, J., and P. Kyzivat, \"Indicating User\n        Agent\
    \ Capabilities in the Session Initiation Protocol (SIP)\",\n        RFC 3840,\
    \ August 2004.\n"
- title: 14.  Informative References
  contents:
  - "14.  Informative References\n   [10] Day, M., Rosenberg, J., and H. Sugano, \"\
    A Model for Presence and\n        Instant Messaging\", RFC 2778, February 2000.\n\
    \   [11] Peterson, J., \"Enhancements for Authenticated Identity\n        Management\
    \ in the Session Initiation Protocol (SIP)\", Work in\n        Progress, May 2004.\n\
    \   [12] Calhoun, P., Loughney, J., Guttman, E., Zorn, G., and J. Arkko,\n   \
    \     \"Diameter Base Protocol\", RFC 3588, September 2003.\n   [13] Day, M.,\
    \ Aggarwal, S., Mohr, G., and J. Vincent, \"Instant\n        Messaging / Presence\
    \ Protocol Requirements\", RFC 2779, February\n        2000.\n   [14] Gutmann,\
    \ P., \"Password-Based Encryption for CMS\", RFC 3211,\n        December 2001.\n"
- title: 15.  Author's Address
  contents:
  - "15.  Author's Address\n   Jonathan Rosenberg\n   dynamicsoft\n   600 Lanidex\
    \ Plaza\n   Parsippany, NJ 07054\n   EMail: jdrosen@dynamicsoft.com\n"
- title: 16.  Full Copyright Statement
  contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
