- contents:
  - "                    Versioning Extensions to WebDAV\n               (Web Distributed
    Authoring and Versioning)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies a set of methods, headers, and resource
    types\n   that define the WebDAV (Web Distributed Authoring and Versioning)\n
    \  versioning extensions to the HTTP/1.1 protocol.  WebDAV versioning\n   will
    minimize the complexity of clients that are capable of\n   interoperating with
    a variety of versioning repository managers, to\n   facilitate widespread deployment
    of applications capable of utilizing\n   the WebDAV Versioning services.  WebDAV
    versioning includes automatic\n   versioning for versioning-unaware clients, version
    history\n   management, workspace management, baseline management, activity\n
    \  management, and URL namespace versioning.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1 Introduction....................................................
    \ 6\n   1.1 Relationship to WebDAV........................................  7\n
    \  1.2 Notational Conventions........................................  8\n   1.3
    Terms.........................................................  8\n   1.4 Property
    Values............................................... 11\n    1.4.1 Initial Property
    Value..................................... 11\n    1.4.2 Protected Property Value...................................
    12\n    1.4.3 Computed Property Value.................................... 12\n
    \   1.4.4 Boolean Property Value..................................... 12\n    1.4.5
    DAV:href Property Value.................................... 12\n   1.5 DAV Namespace
    XML Elements.................................... 12\n   1.6 Method Preconditions
    and Postconditions....................... 12\n    1.6.1 Example - CHECKOUT request.................................
    13\n   1.7 Clarification of COPY Semantics with Overwrite:T.............. 13\n
    \  1.8 Versioning Methods and Write Locks............................ 14\n   2
    Basic Versioning Features....................................... 14\n   2.1 Basic
    Versioning Packages..................................... 14\n   2.2 Basic Versioning
    Semantics.................................... 16\n    2.2.1 Creating a Version-Controlled
    Resource..................... 16\n    2.2.2 Modifying a Version-Controlled Resource....................
    17\n    2.2.3 Reporting.................................................. 19\n
    \  3 Version-Control Feature......................................... 20\n   3.1
    Additional Resource Properties................................ 20\n    3.1.1 DAV:comment................................................
    20\n    3.1.2 DAV:creator-displayname.................................... 20\n
    \   3.1.3 DAV:supported-method-set (protected)....................... 20\n    3.1.4
    DAV:supported-live-property-set (protected)................ 21\n    3.1.5 DAV:supported-report-set
    (protected)....................... 21\n   3.2 Version-Controlled Resource Properties........................
    21\n    3.2.1 DAV:checked-in (protected)................................. 21\n
    \   3.2.2 DAV:auto-version........................................... 22\n   3.3
    Checked-Out Resource Properties............................... 22\n    3.3.1 DAV:checked-out
    (protected)................................ 23\n    3.3.2 DAV:predecessor-set........................................
    23\n   3.4 Version Properties............................................ 23\n
    \   3.4.1 DAV:predecessor-set (protected)............................ 23\n    3.4.2
    DAV:successor-set (computed)............................... 23\n    3.4.3 DAV:checkout-set
    (computed)................................ 23\n    3.4.4 DAV:version-name (protected)...............................
    24\n   3.5 VERSION-CONTROL Method........................................ 24\n
    \   3.5.1 Example - VERSION-CONTROL.................................. 25\n   3.6
    REPORT Method................................................. 25\n   3.7 DAV:version-tree
    Report....................................... 26\n    3.7.1 Example - DAV:version-tree
    Report.......................... 27\n   3.8 DAV:expand-property Report....................................
    29\n    3.8.1 Example - DAV:expand-property.............................. 30\n
    \  3.9 Additional OPTIONS Semantics.................................. 31\n   3.10
    Additional PUT Semantics..................................... 31\n   3.11 Additional
    PROPFIND Semantics................................ 32\n   3.12 Additional PROPPATCH
    Semantics............................... 33\n   3.13 Additional DELETE Semantics..................................
    33\n   3.14 Additional COPY Semantics.................................... 34\n
    \  3.15 Additional MOVE Semantics.................................... 34\n   3.16
    Additional UNLOCK Semantics.................................. 35\n   4 Checkout-In-Place
    Feature....................................... 35\n   4.1 Additional Version Properties.................................
    35\n    4.1.1 DAV:checkout-fork.......................................... 36\n
    \   4.1.2 DAV:checkin-fork........................................... 36\n   4.2
    Checked-Out Resource Properties............................... 36\n    4.2.1 DAV:checkout-fork..........................................
    36\n    4.2.2 DAV:checkin-fork........................................... 37\n
    \  4.3 CHECKOUT Method............................................... 37\n    4.3.1
    Example - CHECKOUT......................................... 38\n   4.4 CHECKIN
    Method................................................ 38\n    4.4.1 Example -
    CHECKIN.......................................... 40\n   4.5 UNCHECKOUT Method.............................................
    40\n    4.5.1 Example - UNCHECKOUT....................................... 41\n
    \  4.6 Additional OPTIONS Semantics.................................. 42\n   5
    Version-History Feature......................................... 42\n   5.1 Version
    History Properties.................................... 42\n    5.1.1 DAV:version-set
    (protected)................................ 42\n    5.1.2 DAV:root-version (computed)................................
    42\n   5.2 Additional Version-Controlled Resource Properties............. 42\n
    \   5.2.1 DAV:version-history (computed)............................. 43\n   5.3
    Additional Version Properties................................. 43\n    5.3.1 DAV:version-history
    (computed)............................. 43\n   5.4 DAV:locate-by-history Report..................................
    43\n    5.4.1 Example - DAV:locate-by-history Report..................... 44\n
    \  5.5 Additional OPTIONS Semantics.................................. 45\n   5.6
    Additional DELETE Semantics................................... 46\n   5.7 Additional
    COPY Semantics..................................... 46\n   5.8 Additional MOVE
    Semantics..................................... 46\n   5.9 Additional VERSION-CONTROL
    Semantics.......................... 46\n   5.10 Additional CHECKIN Semantics.................................
    47\n   6 Workspace Feature............................................... 47\n
    \  6.1 Workspace Properties.......................................... 48\n    6.1.1
    DAV:workspace-checkout-set (computed)...................... 48\n   6.2 Additional
    Resource Properties................................ 48\n    6.2.1 DAV:workspace
    (protected).................................. 48\n   6.3 MKWORKSPACE Method............................................
    48\n    6.3.1 Example - MKWORKSPACE...................................... 49\n
    \  6.4 Additional OPTIONS Semantics.................................. 49\n    6.4.1
    Example - OPTIONS.......................................... 51\n   6.5 Additional
    DELETE Semantics................................... 51\n   6.6 Additional MOVE
    Semantics..................................... 52\n   6.7 Additional VERSION-CONTROL
    Semantics.......................... 52\n    6.7.1 Example - VERSION-CONTROL..................................
    53\n   7 Update Feature.................................................. 53\n
    \  7.1 UPDATE Method................................................. 53\n    7.1.1
    Example - UPDATE........................................... 55\n   7.2 Additional
    OPTIONS Semantics.................................. 55\n   8 Label Feature...................................................
    56\n   8.1 Additional Version Properties................................. 56\n
    \   8.1.1 DAV:label-name-set (protected)............................. 56\n   8.2
    LABEL Method.................................................. 56\n    8.2.1 Example
    - Setting a label.................................. 58\n   8.3 Label Header..................................................
    58\n   8.4 Additional OPTIONS Semantics.................................. 59\n
    \  8.5 Additional GET Semantics...................................... 59\n   8.6
    Additional PROPFIND Semantics................................. 59\n   8.7 Additional
    COPY Semantics..................................... 60\n   8.8 Additional CHECKOUT
    Semantics................................. 60\n   8.9 Additional UPDATE Semantics...................................
    61\n   9 Working-Resource Feature........................................ 62\n
    \  9.1 Additional Version Properties................................. 62\n    9.1.1
    DAV:checkout-fork.......................................... 62\n    9.1.2 DAV:checkin-fork...........................................
    63\n   9.2 Working Resource Properties................................... 63\n
    \   9.2.1 DAV:auto-update (protected)................................ 63\n    9.2.2
    DAV:checkout-fork.......................................... 63\n    9.2.3 DAV:checkin-fork...........................................
    63\n   9.3 CHECKOUT Method (applied to a version)........................ 63\n
    \   9.3.1 Example - CHECKOUT of a version............................ 65\n   9.4
    CHECKIN Method (applied to a working resource)................ 65\n    9.4.1 Example
    - CHECKIN of a working resource.................... 66\n   9.5 Additional OPTIONS
    Semantics.................................. 67\n   9.6 Additional COPY Semantics.....................................
    67\n   9.7 Additional MOVE Semantics..................................... 67\n
    \  10  Advanced Versioning Features.................................. 67\n   10.1
    Advanced Versioning Packages................................. 68\n   10.2 Advanced
    Versioning Terms.................................... 68\n   11  MERGE Feature.................................................
    70\n   11.1 Additional Checked-Out Resource Properties................... 70\n
    \   11.1.1 DAV:merge-set............................................. 70\n    11.1.2
    DAV:auto-merge-set........................................ 71\n   11.2 MERGE Method.................................................
    71\n    11.2.1 Example - MERGE........................................... 74\n
    \  11.3 DAV:merge-preview Report..................................... 75\n    11.3.1
    Example - DAV:merge-preview Report........................ 76\n   11.4 Additional
    OPTIONS Semantics................................. 77\n   11.5 Additional DELETE
    Semantics.................................. 77\n   11.6 Additional CHECKIN Semantics.................................
    77\n   12  Baseline Feature.............................................. 77\n
    \  12.1 Version-Controlled Configuration Properties.................. 78\n    12.1.1
    DAV:baseline-controlled-collection (protected)............ 78\n   12.2 Checked-Out
    Configuration Properties......................... 78\n    12.2.1 DAV:subbaseline-set.......................................
    78\n   12.3 Baseline Properties.......................................... 78\n
    \   12.3.1 DAV:baseline-collection (protected)....................... 79\n    12.3.2
    DAV:subbaseline-set (protected)........................... 79\n   12.4 Additional
    Resource Properties............................... 79\n    12.4.1 DAV:version-controlled-configuration
    (computed)........... 79\n   12.5 Additional Workspace Properties..............................
    80\n    12.5.1 DAV:baseline-controlled-collection-set (computed)......... 80\n
    \  12.6 BASELINE-CONTROL Method...................................... 80\n    12.6.1
    Example - BASELINE-CONTROL................................ 82\n   12.7 DAV:compare-baseline
    Report.................................. 84\n    12.7.1 Example - DAV:compare-baseline
    Report..................... 85\n   12.8 Additional OPTIONS Semantics.................................
    86\n   12.9 Additional MKCOL Semantics................................... 86\n
    \  12.10 Additional COPY Semantics................................... 86\n   12.11
    Additional CHECKOUT Semantics............................... 86\n   12.12 Additional
    CHECKIN Semantics................................ 86\n   12.13 Additional UPDATE
    Semantics................................. 87\n   12.14 Additional MERGE Semantics..................................
    89\n   13  Activity Feature.............................................. 90\n
    \  13.1 Activity Properties.......................................... 91\n    13.1.1
    DAV:activity-version-set (computed)....................... 91\n    13.1.2 DAV:activity-checkout-set
    (computed)...................... 92\n    13.1.3 DAV:subactivity-set.......................................
    92\n    13.1.4 DAV:current-workspace-set (computed)...................... 92\n
    \  13.2 Additional Version Properties................................ 92\n    13.2.1
    DAV:activity-set.......................................... 93\n   13.3 Additional
    Checked-Out Resource Properties................... 93\n    13.3.1 DAV:unreserved............................................
    93\n    13.3.2 DAV:activity-set.......................................... 93\n
    \  13.4 Additional Workspace Properties.............................. 93\n    13.4.1
    DAV:current-activity-set.................................. 94\n   13.5 MKACTIVITY
    Method............................................ 94\n    13.5.1 Example - MKACTIVITY......................................
    95\n   13.6 DAV:latest-activity-version Report........................... 95\n
    \  13.7 Additional OPTIONS Semantics................................. 96\n   13.8
    Additional DELETE Semantics.................................. 96\n   13.9 Additional
    MOVE Semantics.................................... 97\n   13.10 Additional CHECKOUT
    Semantics............................... 97\n    13.10.1 Example - CHECKOUT with
    an activity...................... 98\n   13.11 Additional CHECKIN Semantics................................
    99\n   13.12 Additional MERGE Semantics.................................. 99\n
    \  14  Version-Controlled-Collection Feature.........................100\n   14.1
    Version-Controlled Collection Properties.....................102\n    14.1.1 DAV:eclipsed-set
    (computed)...............................102\n   14.2 Collection Version Properties................................103\n
    \   14.2.1 DAV:version-controlled-binding-set (protected)............103\n   14.3
    Additional OPTIONS Semantics.................................103\n   14.4 Additional
    DELETE Semantics..................................103\n   14.5 Additional MKCOL
    Semantics...................................104\n   14.6 Additional COPY Semantics....................................104\n
    \  14.7 Additional MOVE Semantics....................................104\n   14.8
    Additional VERSION-CONTROL Semantics.........................104\n   14.9 Additional
    CHECKOUT Semantics................................105\n   14.10 Additional CHECKIN
    Semantics................................105\n   14.11 Additional UPDATE and MERGE
    Semantics.......................106\n   15  Internationalization Considerations...........................106\n
    \  16  Security Considerations.......................................107\n   16.1
    Auditing and Traceability....................................107\n   16.2 Increased
    Need for Access Control............................108\n   16.3 Security Through
    Obscurity...................................108\n   16.4 Denial of Service............................................108\n
    \  17  IANA Considerations...........................................109\n   18
    \ Intellectual Property.........................................109\n   19  Acknowledgements..............................................109\n
    \  20  References....................................................110\n   Appendix
    A - Resource Classification..............................111\n   A.1 DeltaV-Compliant
    Unmapped URL.................................111\n   A.2 DeltaV-Compliant Resource.....................................111\n
    \  A.3 DeltaV-Compliant Collection...................................112\n   A.4
    Versionable Resource..........................................112\n   A.5 Version-Controlled
    Resource...................................112\n   A.6 Version.......................................................113\n
    \  A.7 Checked-In Version-Controlled Resource........................113\n   A.8
    Checked-Out Resource..........................................113\n   A.9 Checked-Out
    Version-Controlled Resource.......................114\n   A.10 Working Resource.............................................114\n
    \  A.11 Version History..............................................114\n   A.12
    Workspace....................................................115\n   A.13 Activity.....................................................115\n
    \  A.14 Version-Controlled Collection................................115\n   A.15
    Collection Version...........................................115\n   A.16 Version-Controlled
    Configuration.............................116\n   A.17 Baseline.....................................................116\n
    \  A.18 Checked-Out Version-Controlled Configuration.................116\n   Authors'
    Addresses................................................117\n   Full Copyright
    Statement..........................................118\n"
  title: Table of Contents
- contents:
  - "1  Introduction\n   This document specifies a set of methods, headers, and properties\n
    \  that define the WebDAV (Web Distributed Authoring and Versioning)\n   versioning
    extensions to the HTTP/1.1 protocol.  Versioning is\n   concerned with tracking
    and accessing the history of important states\n   of a web resource, such as a
    standalone web page.  The benefits of\n   versioning in the context of the worldwide
    web include:\n   -  A resource has an explicit history and a persistent identity\n
    \     across the various states it has had during the course of that\n      history.
    \ It allows browsing through past and alternative versions\n      of a resource.
    \ Frequently the modification and authorship history\n      of a resource is critical
    information in itself.\n   -  Resource states (versions) are given stable names
    that can support\n      externally stored links for annotation and link server
    support.\n      Both annotation and link servers frequently need to store stable\n
    \     references to portions of resources that are not under their\n      direct
    control.  By providing stable states of resources, version\n      control systems
    allow not only stable pointers into those\n      resources, but also well defined
    methods to determine the\n      relationships of those states of a resource.\n
    \  WebDAV Versioning defines both basic and advanced versioning\n   functionality.\n
    \  Basic versioning allows users to:\n   -  Put a resource under version control\n
    \  -  Determine whether a resource is under version control\n   -  Determine whether
    a resource update will automatically be captured\n      as a new version\n   -
    \ Create and access distinct versions of a resource\n   Advanced versioning provides
    additional functionality for parallel\n   development and configuration management
    of sets of web resources.\n   This document will first define the properties and
    method semantics\n   for the basic versioning features, and then define the additional\n
    \  properties and method semantics for the advanced versioning features.\n   An
    implementer that is only interested in basic versioning should\n   skip the advanced
    versioning sections (Section 10 to Section 14).\n"
  - contents:
    - "1.1 Relationship to WebDAV\n   To maximize interoperability and the use of
      existing protocol\n   functionality, versioning support is designed as extensions
      to the\n   WebDAV protocol [RFC2518], which itself is an extension to the HTTP\n
      \  protocol [RFC2616].  All method marshalling and postconditions\n   defined
      by RFC 2518 and RFC 2616 continue to hold, to ensure that\n   versioning unaware
      clients can interoperate successfully with\n   versioning servers.  Although
      the versioning extensions are designed\n   to be orthogonal to most aspects
      of the WebDAV and HTTP protocols, a\n   clarification to RFC 2518 is required
      for effective interoperable\n   versioning.  This clarification is described
      in Section 1.7.\n"
    title: 1.1 Relationship to WebDAV
  - contents:
    - "1.2 Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119.\n   The term \"protected\" is placed in parentheses following the\n
      \  definition of a protected property (see Section 1.4.2).\n   The term \"computed\"
      is placed in parentheses following the definition\n   of a computed property
      (see Section 1.4.3).\n   When an XML element type in the \"DAV:\" namespace
      is referenced in\n   this document outside of the context of an XML fragment,
      the string\n   \"DAV:\" will be prefixed to the element type.\n   When a method
      is defined in this document, a list of preconditions\n   and postconditions
      will be defined for that method.  If the semantics\n   of an existing method
      is being extended, a list of additional\n   preconditions and postconditions
      will be defined.  A precondition or\n   postcondition is prefixed by a parenthesized
      XML element type that\n   identifies that precondition or postcondition (see
      Section 1.6).\n"
    title: 1.2 Notational Conventions
  - contents:
    - "1.3 Terms\n   This document uses the terms defined in RFC 2616, in RFC 2518,
      and in\n   this section.  Section 2.2 defines the semantic versioning model\n
      \  underlying this terminology.\n   Version Control, Checked-In, Checked-Out\n
      \     \"Version control\" is a set of constraints on how a resource can be\n
      \     updated.  A resource under version control is either in a\n      \"checked-in\"
      or \"checked-out\" state, and the version control\n      constraints apply only
      while the resource is in the checked-in\n      state.\n   Versionable Resource\n
      \     A \"versionable resource\" is a resource that can be put under\n      version
      control.\n   Version-Controlled Resource\n      When a versionable resource
      is put under version control, it\n      becomes a \"version-controlled resource\".
      \ A version-controlled\n      resource can be \"checked out\" to allow modification
      of its content\n      or dead properties by standard HTTP and WebDAV methods.\n
      \  Checked-Out Resource\n      A \"checked-out resource\" is a resource under
      version control that\n      is in the checked-out state.\n   Version Resource\n
      \     A \"version resource\", or simply \"version\", is a resource that\n      contains
      a copy of a particular state (content and dead\n      properties) of a version-controlled
      resource.  A version is\n      created by \"checking in\" a checked-out resource.
      \ The server\n      allocates a distinct new URL for each new version, and this
      URL\n      will never be used to identify any resource other than that\n      version.
      \ The content and dead properties of a version never\n      change.\n   Version
      History Resource\n      A \"version history resource\", or simply \"version
      history\", is a\n      resource that contains all the versions of a particular
      version-\n      controlled resource.\n   Version Name\n      A \"version name\"
      is a string chosen by the server to distinguish\n      one version of a version
      history from the other versions of that\n      version history.  Versions from
      different version histories may\n      have the same version name.\n   Predecessor,
      Successor, Ancestor, Descendant\n      When a version-controlled resource is
      checked out and then\n      subsequently checked in, the version that was checked
      out becomes\n      a \"predecessor\" of the version created by the checkin.
      \ A client\n      can specify multiple predecessors for a new version if the
      new\n      version is logically a merge of those predecessors.  When a\n      version
      is connected to another version by traversing one or more\n      predecessor
      relations, it is called an \"ancestor\" of that version.\n      The inverse
      of the predecessor and ancestor relations are the\n      \"successor\" and \"descendant\"
      relations.  Therefore, if X is a\n      predecessor of Y, then Y is a successor
      of X, and if X is an\n      ancestor of Y, then Y is a descendant of X.\n   Root
      Version Resource\n      The \"root version resource\", or simply \"root version\",
      is the\n      version in a version history that is an ancestor of every other\n
      \     version in that version history.\n   Workspace Resource\n      A \"workspace
      resource\", or simply \"workspace\", is a collection\n      that contains at
      most one version-controlled resource for a given\n      version history (see
      Section 6).\n   Working Resource\n      A \"working resource\" is a checked-out
      resource created by the\n      server at a server-defined URL when a version
      (instead of a\n      version-controlled resource) is checked out.  Unlike a
      checked-out\n      version-controlled resource, a working resource is deleted
      when it\n      is checked in.\n   Fork, Merge\n      When a second successor
      is added to a version, this creates a\n      \"fork\" in the version history.
      \ When a version is created with\n      multiple predecessors, this creates
      a \"merge\" in the version\n      history.  A server may restrict the version
      history to be linear\n      (with no forks or merges), but an interoperable
      versioning client\n      should be prepared to deal with both forks and merges
      in the\n      version history.\n   The following diagram illustrates several
      of the previous\n   definitions.  Each box represents a version and each line
      between two\n   boxes represents a predecessor/successor relationship.  For
      example,\n   it shows V3 is a predecessor of V5, V7 is a successor of V5, V1
      is an\n   ancestor of V4, and V7 is a descendant of V4.  It also shows that\n
      \  there is a fork at version V2 and a merge at version V7.\n                       History
      of foo.html\n                               +---+\n         Root Version ------->
      |   | V1\n                               +---+           ^\n                                 |
      \            |\n                                 |             |\n                               +---+
      \          |\n         Version Name ----> V2 |   |           | Ancestor\n                               +---+
      \          |\n                               /    \\          |\n                              /
      \     \\         |\n                         +---+       +---+\n                         |
      \  | V3    |   | V4\n                      ^  +---+       +---+\n                      |
      \   |           |       |\n         Predecessor  |    |           |       |\n
      \                        +---+       +---+     |\n                         |
      \  | V5    |   | V6  | Descendant\n                         +---+       +---+
      \    |\n         Successor    |       \\      /         |\n                      |
      \       \\    /          |\n                      v        +---+           v\n
      \                              |   | V7\n                               +---+\n
      \  Label\n      A \"label\" is a name that can be used to select a version from
      a\n      version history.  A label can be assigned by either a client or\n      the
      server.  The same label can be used in different version\n      histories.\n"
    title: 1.3 Terms
  - contents:
    - '1.4 Property Values

      '
    - contents:
      - "1.4.1 Initial Property Value\n   Unless an initial value of a property of
        a given type is defined by\n   this document, the initial value of a property
        of that type is\n   implementation dependent.\n"
      title: 1.4.1 Initial Property Value
    - contents:
      - "1.4.2 Protected Property Value\n   When a property of a specific kind of
        resource is \"protected\", the\n   property value cannot be updated on that
        kind of resource except by a\n   method explicitly defined as updating that
        specific property.  In\n   particular, a protected property cannot be updated
        with a PROPPATCH\n   request.  Note that a given property can be protected
        on one kind of\n   resource, but not protected on another kind of resource.\n"
      title: 1.4.2 Protected Property Value
    - contents:
      - "1.4.3 Computed Property Value\n   When a property is \"computed\", its value
        is defined in terms of a\n   computation based on the content and other properties
        of that\n   resource, or even of some other resource.  When the semantics
        of a\n   method is defined in this document, the effect of that method on\n
        \  non-computed properties will be specified; the effect of that method\n
        \  on computed properties will not be specified, but can be inferred\n   from
        the computation defined for those properties.  A computed\n   property is
        always a protected property.\n"
      title: 1.4.3 Computed Property Value
    - contents:
      - "1.4.4 Boolean Property Value\n   Some properties take a Boolean value of
        either \"false\" or \"true\".\n"
      title: 1.4.4 Boolean Property Value
    - contents:
      - "1.4.5 DAV:href Property Value\n   The DAV:href XML element is defined in
        RFC 2518, Section 12.3.\n"
      title: 1.4.5 DAV:href Property Value
    title: 1.4 Property Values
  - contents:
    - "1.5 DAV Namespace XML Elements in Request and Response Bodies\n   Although
      WebDAV request and response bodies can be extended by\n   arbitrary XML elements,
      which can be ignored by the message\n   recipient, an XML element in the DAV
      namespace MUST NOT be used in\n   the request or response body of a versioning
      method unless that XML\n   element is explicitly defined in an IETF RFC.\n"
    title: 1.5 DAV Namespace XML Elements in Request and Response Bodies
  - contents:
    - "1.6 Method Preconditions and Postconditions\n   A \"precondition\" of a method
      describes the state of the server that\n   must be true for that method to be
      performed.  A \"postcondition\" of a\n   method describes the state of the server
      that must be true after that\n   method has been completed.  If a method precondition
      or postcondition\n   for a request is not satisfied, the response status of
      the request\n   MUST be either 403 (Forbidden) if the request should not be
      repeated\n   because it will always fail, or 409 (Conflict) if it is expected
      that\n   the user might be able to resolve the conflict and resubmit the\n   request.\n
      \  In order to allow better client handling of 403 and 409 responses, a\n   distinct
      XML element type is associated with each method precondition\n   and postcondition
      of a request.  When a particular precondition is\n   not satisfied or a particular
      postcondition cannot be achieved, the\n   appropriate XML element MUST be returned
      as the child of a top-level\n   DAV:error element in the response body, unless
      otherwise negotiated\n   by the request.  In a 207 Multi-Status response, the
      DAV:error\n   element would appear in the appropriate DAV:responsedescription\n
      \  element.\n"
    - contents:
      - "1.6.1 Example - CHECKOUT request with DAV:must-be-checked-in response\n   >>REQUEST\n
        \    CHECKOUT /foo.html HTTP/1.1\n     Host: www.webdav.org\n   >>RESPONSE\n
        \    HTTP/1.1 409 Conflict\n     Content-Type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:error xmlns:D=\"DAV:\">\n       <D:must-be-checked-in/>\n     </D:error>\n
        \  In this example, the request to CHECKOUT /foo.html fails because\n   /foo.html
        is not checked in.\n"
      title: 1.6.1 Example - CHECKOUT request with DAV:must-be-checked-in response
    title: 1.6 Method Preconditions and Postconditions
  - contents:
    - "1.7 Clarification of COPY Semantics with Overwrite:T\n   RFC 2518, Section
      8.8.4 states:\n   \"If a resource exists at the destination and the Overwrite
      header is\n   \"T\" then prior to performing the copy the server MUST perform
      a\n   DELETE with \"Depth: infinity\" on the destination resource.\"\n   The
      purpose of this sentence is to ensure that following a COPY, all\n   destination
      resources have the same content and dead properties as\n   the corresponding
      resources identified by the request-URL (where a\n   resource with a given name
      relative to the Destination URL\n   \"corresponds\" to a resource with the same
      name relative to the\n   request-URL).  If at the time of the request, there
      already is a\n   resource at the destination that has the same resource type
      as the\n   corresponding resource at the request-URL, that resource MUST NOT
      be\n   deleted, but MUST be updated to have the content and dead properties\n
      \  of its corresponding member.  If a client wishes all resources at the\n   destination
      to be deleted prior to the COPY, it MUST explicitly issue\n   a DELETE request.\n
      \  The difference between updating a resource and replacing a resource\n   with
      a new resource is especially important when resource history is\n   being maintained
      (the former adds to an existing history, while the\n   latter creates a new
      history).  In addition, locking and access\n   control constraints might allow
      you to update a resource, but not\n   allow you to delete it and create a new
      one in its place.\n   Note that this clarification does not apply to a MOVE
      request.  A\n   MOVE request with Overwrite:T MUST perform the DELETE with\n
      \  \"Depth:infinity\" on the destination resource prior to performing the\n
      \  MOVE.\n"
    title: 1.7 Clarification of COPY Semantics with Overwrite:T
  - contents:
    - "1.8 Versioning Methods and Write Locks\n   If a write-locked resource has a
      non-computed property defined by\n   this document, the property value MUST
      NOT be changed by a request\n   unless the appropriate lock token is included
      in the request.  Since\n   every method introduced in this document other than
      REPORT modifies\n   at least one property defined by this document, every versioning\n
      \  method other than REPORT is affected by a write lock.  In particular,\n   the
      method MUST fail with a 423 (Locked) status if the resource is\n   write-locked
      and the appropriate token is not specified in an If\n   request header.\n"
    title: 1.8 Versioning Methods and Write Locks
  title: 1  Introduction
- contents:
  - "2  Basic Versioning Features\n   Each basic versioning feature defines extensions
    to existing HTTP and\n   WebDAV methods, as well as new resource types, live properties,
    and\n   methods.\n"
  - contents:
    - "2.1 Basic Versioning Packages\n   A server MAY support any combination of versioning
      features.\n   However, in order to minimize the complexity of a WebDAV basic\n
      \  versioning client, a WebDAV basic versioning server SHOULD support\n   one
      of the following three \"packages\" (feature sets):\n   -  Core-Versioning Package:
      version-control\n   -  Basic-Server-Workspace Package: version-control, workspace,\n
      \     version-history, checkout\n   -  Basic-Client-Workspace Package: version-control,
      working-\n      resource, update, label\n   The core-versioning package supports
      linear versioning by both\n   versioning-aware and versioning-unaware clients.
      \ A versioning-aware\n   client can use reports and properties to access previous
      versions of\n   a version-controlled resource.\n   The basic workspace packages
      support parallel development of\n   version-controlled resources.  Each client
      has its own configuration\n   of the shared version-controlled resources, and
      can make changes to\n   its configuration without disturbing that of another
      client.\n   In the basic-server-workspace package, all persistent state is\n
      \  maintained on the server.  Each client has its own workspace resource\n   allocated
      on the server, where each workspace identifies a\n   configuration of the shared
      version-controlled resources.  Each\n   client makes changes to its workspace,
      and can transfer changes when\n   appropriate from one workspace to another.
      \ The server workspace\n   package is appropriate for clients with no local
      persistent state, or\n   for clients that wish to expose their working configurations
      to other\n   clients.\n   In the basic-client-workspace package, each client
      maintains in local\n   persistent storage the state for its configuration of
      the shared\n   version-controlled resources.  When a client is ready to make
      its\n   changes visible to other clients, it allocates a set of \"working\n
      \  resources\" on the server, updates the content and dead properties of\n   these
      working resources, and then uses the set of working resources\n   to update
      the version-controlled resources.  The working resources\n   are used, instead
      of directly updating the version-controlled\n   resources, so that sets of consistent
      updates can be prepared in\n   parallel by multiple clients.  Also, a working
      resource allows a\n   client to prepare a single update that requires multiple
      server\n   requests (e.g. updating both the content and dead properties of a\n
      \  resource requires both a PUT and a PROPPATCH).  The client workspace\n   package
      simplifies the server implementation by requiring each client\n   to maintain
      its own namespace, but this requires that the clients\n   have local persistent
      state, and does not allow clients to expose\n   their working configurations
      to other clients.\n   A server that supports both basic workspace packages will\n
      \  interoperate with all basic versioning clients.\n"
    title: 2.1 Basic Versioning Packages
  - contents:
    - '2.2 Basic Versioning Semantics

      '
    - contents:
      - "2.2.1 Creating a Version-Controlled Resource\n   In order to track the history
        of the content and dead properties of a\n   versionable resource, a user can
        put the resource under version\n   control with a VERSION-CONTROL request.
        \ A VERSION-CONTROL request\n   performs three distinct operations:\n   1)
        It creates a new \"version history resource\".  In basic versioning,\n      a
        version history resource is not assigned a URL, and hence is not\n      visible
        in the http scheme URL space.  However, when the version-\n      history feature
        (see Section 5) is supported, this changes, and\n      each version history
        resource is assigned a new distinct and\n      unique server-defined URL.\n
        \  2) It creates a new \"version resource\" and adds it to the new version\n
        \     history resource.  The body and dead properties of the new version\n
        \     resource are a copy of those of the versionable resource.\n      The
        server assigns the new version resource a new distinct and\n      unique URL.\n
        \  3) It converts the versionable resource into a \"version-controlled\n      resource\".
        \ The version-controlled resource continues to be\n      identified by the
        same URL that identified it as a versionable\n      resource.  As part of
        this conversion, it adds a DAV:checked-in\n      property, whose value contains
        the URL of the new version\n      resource.\n   Note that a versionable resource
        and a version-controlled resource\n   are not new types of resources (i.e.
        they introduce no new\n   DAV:resourcetype), but rather they are any type
        of resource that\n   supports the methods and live properties defined for
        them in this\n   document, in addition to all the methods and live properties
        implied\n   by their DAV:resourcetype.  For example, a collection (whose\n
        \  DAV:resourcetype is DAV:collection) is a versionable resource if it\n   supports
        the VERSION-CONTROL method, and is a version-controlled\n   resource if it
        supports the version-controlled resource methods and\n   live properties.\n
        \  In the following example, foo.html is a versionable resource that is\n
        \  put under version control.  After the VERSION-CONTROL request\n   succeeds,
        there are two additional resources: a new version history\n   resource and
        a new version resource in that version history.  The\n   versionable resource
        is converted into a version-controlled resource,\n   whose DAV:checked-in
        property identifies the new version resource.\n   The content and dead properties
        of a resource are represented by the\n   symbol appearing inside the box for
        that resource (e.g., \"S1\" in the\n   following example).\n            ===VERSION-CONTROL==>\n
        \                     |                       +----+ version\n                      |
        \  version-            |    | history\n         versionable  |   controlled
        \         +----+ resource\n         resource     |   resource              |\n
        \        /foo.html    |   /foo.html             |\n                      |
        \                        v\n           +----+     |     +----+ checked-in
        +----+ version\n           | S1 |     |     | S1 |----------->| S1 | resource\n
        \          +----+     |     +----+            +----+ /his/73/ver/1\n   Thus,
        whereas before the VERSION-CONTROL request there was only one,\n   non-version-controlled
        resource, after VERSION-CONTROL there are\n   three separate, distinct resources,
        each containing its own state and\n   properties: the version-controlled resource,
        the version resource,\n   and the version history resource.  Since the version-controlled\n
        \  resource and the version resource are separate, distinct resources,\n   when
        a method is applied to a version-controlled resource, it is only\n   applied
        to that version-controlled resource, and is not applied to\n   the version
        resource that is currently identified by the\n   DAV:checked-in property of
        that version-controlled resource.\n   Although the content and dead properties
        of a checked-in version-\n   controlled resource are required to be the same
        as those of its\n   current DAV:checked-in version, its live properties may
        differ.  An\n   implementation may optimize storage by retrieving the content
        and\n   dead properties of a checked-in version-controlled resource from its\n
        \  current DAV:checked-in version rather than storing them in the\n   version-controlled
        resource, but this is just an implementation\n   optimization.\n   Normally,
        a resource is placed under version control with an explicit\n   VERSION-CONTROL
        request.  A server MAY automatically place every new\n   versionable resource
        under version control.  In this case, the\n   resulting state on the server
        MUST be the same as if the client had\n   explicitly applied a VERSION-CONTROL
        request to the versionable\n   resource.\n"
      title: 2.2.1 Creating a Version-Controlled Resource
    - contents:
      - "2.2.2 Modifying a Version-Controlled Resource\n   In order to use methods
        like PUT and PROPPATCH to directly modify the\n   content or dead properties
        of a version-controlled resource, the\n   version-controlled resource must
        first be checked out.  When the\n   checked-out resource is checked in, a
        new version is created in the\n   version history of that version-controlled
        resource.  The version\n   that was checked out is remembered as the predecessor
        of the new\n   version.\n   The DAV:auto-version property (see Sections 3.2.2)
        of a checked-in\n   version-controlled resource determines how it responds
        to a method\n   that attempts to modify its content or dead properties.  Possible\n
        \  responses include:\n   -  Fail the request.  The resource requires an explicit
        CHECKOUT\n      request for it to be modified (see Sections 4 and 9.2.1).\n
        \  -  Automatically checkout the resource, perform the modification, and\n
        \     automatically checkin the resource.  This ensures that every state\n
        \     of the resource is tracked by the server, but can result in an\n      excessive
        number of versions being created.\n   -  Automatically checkout the resource,
        perform the modification, and\n      then if the resource is not write-locked,
        automatically checkin\n      the resource.  If the resource is write-locked,
        it remains\n      checked-out until the write-lock is removed (either explicitly\n
        \     through a subsequent UNLOCK request or implicitly through a time-\n
        \     out of the write-lock).  This helps a locking client avoid the\n      proliferation
        of versions, while still allowing a non-locking\n      client to update the
        resource.\n   -  Automatically checkout the resource, perform the modification,
        and\n      then leave the resource checked out.  If the resource is write-\n
        \     locked, it will be automatically checked in when the write-lock is\n
        \     removed, but an explicit CHECKIN operation (see Section 4.4) is\n      required
        for a non-write-locked resource.  This minimizes the\n      number of new
        versions that will be created by a versioning\n      unaware client, but only
        a versioning aware client can create new\n      versions of a non-write-locked
        resource.\n   -  Fail the request unless the resource is write-locked.  If
        it is\n      write-locked, automatically checkout the resource and perform
        the\n      modification.  The resource is automatically checked in when the\n
        \     write-lock is removed.  This minimizes the number of new versions\n
        \     that will be created by a versioning unaware client, but never\n      automatically
        checks out a resource that will not subsequently be\n      automatically checked
        in.\n   The following diagram illustrates the effect of the checkout/checkin\n
        \  process on a version-controlled resource and its version history.\n   The
        symbol inside a box (S1, S2, S3) represents the current content\n   and dead
        properties of the resource represented by that box.  The\n   symbol next to
        a box (V1, V2, V3) represents the URL for that\n   resource.\n              ===checkout==>
        \    ===PUT==>     ===checkin==>\n           /foo.html (version-controlled
        resource)\n            +----+    |    +----+    |    +----+    |    +----+\n
        \           | S2 |    |    | S2 |    |    | S3 |    |    | S3 |\n            +----+
        \   |    +----+    |    +----+    |    +----+\n         Checked-In=V2|Checked-Out=V2|Checked-Out=V2|Checked-In=V3\n
        \          /his/73 (version history for /foo.html)\n           +----+     |
        \  +----+     |   +----+     |   +----+\n           | S1 | V1  |   | S1 |
        V1  |   | S1 | V1  |   | S1 | V1\n           +----+     |   +----+     |   +----+
        \    |   +----+\n              |       |      |       |      |       |      |\n
        \             |       |      |       |      |       |      |\n           +----+
        \    |   +----+     |   +----+     |   +----+\n           | S2 | V2  |   |
        S2 | V2  |   | S2 | V2  |   | S2 | V2\n           +----+     |   +----+     |
        \  +----+     |   +----+\n                      |              |              |
        \     |\n                      |              |              |      |\n                      |
        \             |              |   +----+\n                      |              |
        \             |   | S3 | V3\n                      |              |              |
        \  +----+\n   Note that a version captures only a defined subset of the state
        of a\n   resource.  In particular, a version of a basic resource captures
        its\n   content and dead properties, but not its live properties.\n"
      title: 2.2.2 Modifying a Version-Controlled Resource
    - contents:
      - "2.2.3 Reporting\n   Some versioning information about a resource requires
        that parameters\n   be specified along with that request for information.
        \ Included in\n   basic versioning is the required support for an extensible
        reporting\n   mechanism, which includes a REPORT method as well as a live
        property\n   for determining what reports are supported by a particular resource.\n
        \  The REPORT method is required by versioning, but it can be used in\n   non-versioning
        WebDAV extensions.\n   To allow a client to query the properties of all versions
        in the\n   version history of a specified version-controlled resource, basic\n
        \  versioning provides the DAV:version-tree report (see Section 3.7).  A\n
        \  more powerful version history reporting mechanism is provided by\n   applying
        the DAV:expand-property report (see Section 3.8) to a\n   version history
        resource (see Section 5).\n"
      title: 2.2.3 Reporting
    title: 2.2 Basic Versioning Semantics
  title: 2  Basic Versioning Features
- contents:
  - "3  Version-Control Feature\n   The version-control feature provides support for
    putting a resource\n   under version control, creating an associated version-controlled\n
    \  resource and version history resource as described in Section 2.2.1.\n   A
    server indicates that it supports the version-control feature by\n   including
    the string \"version-control\" as a field in the DAV header\n   in the response
    to an OPTIONS request.  The version-control feature\n   MUST be supported if any
    other versioning feature is supported.\n"
  - contents:
    - "3.1 Additional Resource Properties\n   The version-control feature introduces
      the following REQUIRED\n   properties for any WebDAV resource.\n"
    - contents:
      - "3.1.1 DAV:comment\n   This property is used to track a brief comment about
        a resource that\n   is suitable for presentation to a user.  The DAV:comment
        of a version\n   can be used to indicate why that version was created.\n   <!ELEMENT
        comment (#PCDATA)>\n   PCDATA value: string\n"
      title: 3.1.1 DAV:comment
    - contents:
      - "3.1.2 DAV:creator-displayname\n   This property contains a description of
        the creator of the resource\n   that is suitable for presentation to a user.
        \ The DAV:creator-\n   displayname of a version can be used to indicate who
        created that\n   version.\n   <!ELEMENT creator-displayname (#PCDATA)>\n   PCDATA
        value: string\n"
      title: 3.1.2 DAV:creator-displayname
    - contents:
      - "3.1.3 DAV:supported-method-set (protected)\n   This property identifies the
        methods that are supported by the\n   resource.  A method is supported by
        a resource if there is some state\n   of that resource for which an application
        of that method will\n   successfully satisfy all postconditions of that method,
        including any\n   additional postconditions added by the features supported
        by that\n   resource.\n   <!ELEMENT supported-method-set (supported-method*)>\n
        \  <!ELEMENT supported-method ANY>\n   <!ATTLIST supported-method name NMTOKEN
        #REQUIRED>\n   name value: a method name\n"
      title: 3.1.3 DAV:supported-method-set (protected)
    - contents:
      - "3.1.4 DAV:supported-live-property-set (protected)\n   This property identifies
        the live properties that are supported by\n   the resource.  A live property
        is supported by a resource if that\n   property has the semantics defined
        for that property.  The value of\n   this property MUST identify all live
        properties defined by this\n   document that are supported by the resource,
        and SHOULD identify all\n   live properties that are supported by the resource.\n
        \  <!ELEMENT supported-live-property-set (supported-live-property*)>\n   <!ELEMENT
        supported-live-property name>\n   <!ELEMENT prop ANY>\n   ANY value: a property
        element type\n"
      title: 3.1.4 DAV:supported-live-property-set (protected)
    - contents:
      - "3.1.5 DAV:supported-report-set (protected)\n   This property identifies the
        reports that are supported by the\n   resource.\n   <!ELEMENT supported-report-set
        (supported-report*)>\n   <!ELEMENT supported-report report>\n   <!ELEMENT
        report ANY>\n   ANY value: a report element type\n"
      title: 3.1.5 DAV:supported-report-set (protected)
    title: 3.1 Additional Resource Properties
  - contents:
    - "3.2 Version-Controlled Resource Properties\n   The version-control feature
      introduces the following REQUIRED\n   properties for a version-controlled resource.\n"
    - contents:
      - "3.2.1 DAV:checked-in (protected)\n   This property appears on a checked-in
        version-controlled resource,\n   and identifies a version that has the same
        content and dead\n   properties as the version-controlled resource.  This
        property is\n   removed when the resource is checked out, and then added back\n
        \  (identifying a new version) when the resource is checked back in.\n   <!ELEMENT
        checked-in (href)>\n"
      title: 3.2.1 DAV:checked-in (protected)
    - contents:
      - "3.2.2 DAV:auto-version\n   If the DAV:auto-version value is DAV:checkout-checkin,
        when a\n   modification request (such as PUT/PROPPATCH) is applied to a\n
        \  checked-in version-controlled resource, the request is automatically\n
        \  preceded by a checkout and followed by a checkin operation.\n   If the
        DAV:auto-version value is DAV:checkout-unlocked-checkin, when\n   a modification
        request is applied to a checked-in version-controlled\n   resource, the request
        is automatically preceded by a checkout\n   operation.  If the resource is
        not write-locked, the request is\n   automatically followed by a checkin operation.\n
        \  If the DAV:auto-version value is DAV:checkout, when a modification\n   request
        is applied to a checked-in version-controlled resource, the\n   request is
        automatically preceded by a checkout operation.\n   If the DAV:auto-version
        value is DAV:locked-checkout, when a\n   modification request is applied to
        a write-locked checked-in\n   version-controlled resource, the request is
        automatically preceded by\n   a checkout operation.\n   If an update to a
        write-locked checked-in resource is automatically\n   preceded by a checkout
        of that resource, the checkout is associated\n   with the write lock.  When
        this write lock is removed (e.g. from an\n   UNLOCK or a lock timeout), if
        the resource has not yet been checked\n   in, the removal of the write lock
        is automatically preceded by a\n   checkin operation.\n   A server MAY refuse
        to allow the value of the DAV:auto-version\n   property to be modified, or
        MAY only support values from a subset of\n   the valid values.\n   <!ELEMENT
        auto-version (checkout-checkin | checkout-unlocked-checkin\n     | checkout
        | locked-checkout)? >\n   <!ELEMENT checkout-checkin EMPTY>\n   <!ELEMENT
        checkout-unlocked-checkin EMPTY>\n   <!ELEMENT checkout EMPTY>\n   <!ELEMENT
        locked-checkout EMPTY>\n"
      title: 3.2.2 DAV:auto-version
    title: 3.2 Version-Controlled Resource Properties
  - contents:
    - "3.3 Checked-Out Resource Properties\n   The version-control feature introduces
      the following REQUIRED\n   properties for a checked-out resource.\n"
    - contents:
      - "3.3.1 DAV:checked-out (protected)\n   This property identifies the version
        that was identified by the\n   DAV:checked-in property at the time the resource
        was checked out.\n   This property is removed when the resource is checked
        in.\n   <!ELEMENT checked-out (href)>\n"
      title: 3.3.1 DAV:checked-out (protected)
    - contents:
      - "3.3.2 DAV:predecessor-set\n   This property determines the DAV:predecessor-set
        property of the\n   version that results from checking in this resource.\n
        \  A server MAY reject attempts to modify the DAV:predecessor-set of a\n   version-controlled
        resource.\n   <!ELEMENT predecessor-set (href+)>\n"
      title: 3.3.2 DAV:predecessor-set
    title: 3.3 Checked-Out Resource Properties
  - contents:
    - "3.4 Version Properties\n   The version-control feature introduces the following
      REQUIRED\n   properties for a version.\n"
    - contents:
      - "3.4.1 DAV:predecessor-set (protected)\n   This property identifies each predecessor
        of this version.  Except\n   for the root version, which has no predecessors,
        each version has at\n   least one predecessor.\n   <!ELEMENT predecessor-set
        (href*)>\n"
      title: 3.4.1 DAV:predecessor-set (protected)
    - contents:
      - "3.4.2 DAV:successor-set (computed)\n   This property identifies each version
        whose DAV:predecessor-set\n   identifies this version.\n   <!ELEMENT successor-set
        (href*)>\n"
      title: 3.4.2 DAV:successor-set (computed)
    - contents:
      - "3.4.3 DAV:checkout-set (computed)\n   This property identifies each checked-out
        resource whose\n   DAV:checked-out property identifies this version.\n   <!ELEMENT
        checkout-set (href*)>\n"
      title: 3.4.3 DAV:checkout-set (computed)
    - contents:
      - "3.4.4 DAV:version-name (protected)\n   This property contains a server-defined
        string that is different for\n   each version in a given version history.
        \ This string is intended for\n   display for a user, unlike the URL of a
        version, which is normally\n   only used by a client and not displayed for
        a user.\n   <!ELEMENT version-name (#PCDATA)>\n   PCDATA value: string\n"
      title: 3.4.4 DAV:version-name (protected)
    title: 3.4 Version Properties
  - contents:
    - "3.5 VERSION-CONTROL Method\n   A VERSION-CONTROL request can be used to create
      a version-controlled\n   resource at the request-URL.  It can be applied to
      a versionable\n   resource or to a version-controlled resource.\n   If the request-URL
      identifies a versionable resource, a new version\n   history resource is created,
      a new version is created whose content\n   and dead properties are copied from
      the versionable resource, and the\n   resource is given a DAV:checked-in property
      that is initialized to\n   identify this new version.\n   If the request-URL
      identifies a version-controlled resource, the\n   resource just remains under
      version-control.  This allows a client to\n   be unaware of whether or not a
      server automatically puts a resource\n   under version control when it is created.\n
      \  If a VERSION-CONTROL request fails, the server state preceding the\n   request
      MUST be restored.\n   Marshalling:\n      If a request body is included, it
      MUST be a DAV:version-control\n      XML element.\n      <!ELEMENT version-control
      ANY>\n      If a response body for a successful request is included, it MUST\n
      \     be a DAV:version-control-response XML element.  Note that this\n      document
      does not define any elements for the VERSION-CONTROL\n      response body, but
      the DAV:version-control-response element is\n      defined to ensure interoperability
      between future extensions that\n      do define elements for the VERSION-CONTROL
      response body.\n      <!ELEMENT version-control-response ANY>\n   Postconditions:\n
      \     (DAV:put-under-version-control): If the request-URL identified a\n      versionable
      resource at the time of the request, the request MUST\n      have created a
      new version history and MUST have created a new\n      version resource in that
      version history.  The resource MUST have\n      a DAV:checked-in property that
      identifies the new version.  The\n      content, dead properties, and DAV:resourcetype
      of the new version\n      MUST be the same as those of the resource.  Note that
      an\n      implementation can choose to locate the version history and\n      version
      resources anywhere that it wishes.  In particular, it\n      could locate them
      on the same host and server as the version-\n      controlled resource, on a
      different virtual host maintained by the\n      same server, on the same host
      maintained by a different server, or\n      on a different host maintained by
      a different server.\n      (DAV:must-not-change-existing-checked-in-out): If
      the request-URL\n      identified a resource already under version control at
      the time of\n      the request, the request MUST NOT change the DAV:checked-in
      or\n      DAV:checked-out property of that version-controlled resource.\n"
    - contents:
      - "3.5.1 Example - VERSION-CONTROL\n   >>REQUEST\n     VERSION-CONTROL /foo.html
        HTTP/1.1\n     Host: www.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n
        \    HTTP/1.1 200 OK\n   In this example, /foo.html is put under version control.
        \ A new\n   version history is created for it, and a new version is created
        that\n   has a copy of the content and dead properties of /foo.html.  The\n
        \  DAV:checked-in property of /foo.html identifies this new version.\n"
      title: 3.5.1 Example - VERSION-CONTROL
    title: 3.5 VERSION-CONTROL Method
  - contents:
    - "3.6 REPORT Method\n   A REPORT request is an extensible mechanism for obtaining
      information\n   about a resource.  Unlike a resource property, which has a single\n
      \  value, the value of a report can depend on additional information\n   specified
      in the REPORT request body and in the REPORT request\n   headers.\n   Marshalling:\n
      \     The body of a REPORT request specifies which report is being\n      requested,
      as well as any additional information that will be used\n      to customize
      the report.\n      The request MAY include a Depth header.  If no Depth header
      is\n      included, Depth:0 is assumed.\n      The response body for a successful
      request MUST contain the\n      requested report.\n      If a Depth request
      header is included, the response MUST be a 207\n      Multi-Status.  The request
      MUST be applied separately to the\n      collection itself and to all members
      of the collection that\n      satisfy the Depth value.  The DAV:prop element
      of a DAV:response\n      for a given resource MUST contain the requested report
      for that\n      resource.\n   Preconditions:\n      (DAV:supported-report):
      The specified report MUST be supported by\n      the resource identified by
      the request-URL.\n   Postconditions:\n      (DAV:no-modification): The REPORT
      method MUST NOT have changed the\n      content or dead properties of any resource.\n"
    title: 3.6 REPORT Method
  - contents:
    - "3.7 DAV:version-tree Report\n   The DAV:version-tree report describes the requested
      properties of all\n   the versions in the version history of a version.  If
      the report is\n   requested for a version-controlled resource, it is redirected
      to its\n   DAV:checked-in or DAV:checked-out version.\n   The DAV:version-tree
      report MUST be supported by all version\n   resources and all version-controlled
      resources.\n   Marshalling:\n      The request body MUST be a DAV:version-tree
      XML element.\n      <!ELEMENT version-tree ANY>\n      ANY value: a sequence
      of zero or more elements, with at most one\n      DAV:prop element.\n      prop:
      see RFC 2518, Section 12.11\n      The response body for a successful request
      MUST be a\n      DAV:multistatus XML element.\n      multistatus: see RFC 2518,
      Section 12.9\n      The response body for a successful DAV:version-tree REPORT
      request\n      MUST contain a DAV:response element for each version in the\n
      \     version history of the version identified by the request-URL.\n"
    - contents:
      - "3.7.1 Example - DAV:version-tree Report\n   The version history drawn below
        would produce the following version\n   tree report.\n                        foo.html
        History\n                             +---+\n                             |
        \  | V1\n                             +---+\n                            /
        \    \\\n                           /       \\\n                       +---+
        \      +---+\n                       |   | V2    |   | V2.1.1\n                       +---+
        \      +---+\n   >>REQUEST\n     REPORT /foo.html HTTP/1.1\n     Host: www.webdav.org\n
        \    Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n
        \    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:version-tree xmlns:D=\"DAV:\">\n
        \      <D:prop>\n         <D:version-name/>\n         <D:creator-displayname/>\n
        \        <D:successor-set/>\n       </D:prop>\n     </D:version-tree>\n   >>RESPONSE\n
        \    HTTP/1.1 207 Multi-Status\n     Content-Type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:multistatus xmlns:D=\"DAV:\">\n       <D:response>\n         <D:href>http://repo.webdav.org/his/23/ver/V1</D:href>\n
        \        <D:propstat>\n           <D:prop>\n             <D:version-name>V1</D:version-name>\n
        \            <D:creator-displayname>Fred</D:creator-displayname>\n             <D:successor-set>\n
        \              <D:href>http://repo.webdav.org/his/23/ver/V2</D:href>\n               <D:href>http://repo.webdav.org/his/23/ver/V2.1.1</D:href>\n
        \            </D:successor-set>\n           </D:prop>\n           <D:status>HTTP/1.1
        200 OK</D:status>\n         </D:propstat>\n       </D:response>\n       <D:response>\n
        \        <D:href>http://repo.webdav.org/his/23/ver/V2</D:href>\n         <D:propstat>\n
        \          <D:prop>\n             <D:version-name>V2</D:version-name>\n             <D:creator-displayname>Fred</D:creator-displayname>\n
        \            <D:successor-set/>\n           </D:prop>\n           <D:status>HTTP/1.1
        200 OK</D:status>\n         </D:propstat>\n       </D:response>\n       <D:response>\n
        \        <D:href>http://repo.webdav.org/his/23/ver/V2.1.1</D:href>\n         <D:propstat>\n
        \          <D:prop>\n             <D:version-name>V2.1.1</D:version-name>\n
        \            <D:creator-displayname>Sally</D:creator-displayname>\n             <D:successor-set/>\n
        \          </D:prop>\n           <D:status>HTTP/1.1 200 OK</D:status>\n         </D:propstat>\n
        \      </D:response>\n     </D:multistatus>\n"
      title: 3.7.1 Example - DAV:version-tree Report
    title: 3.7 DAV:version-tree Report
  - contents:
    - "3.8 DAV:expand-property Report\n   Many property values are defined as a DAV:href,
      or a set of DAV:href\n   elements.  The DAV:expand-property report provides
      a mechanism for\n   retrieving in one request the properties from the resources\n
      \  identified by those DAV:href elements.  This report not only\n   decreases
      the number of requests required, but also allows the server\n   to minimize
      the number of separate read transactions required on the\n   underlying versioning
      store.\n   The DAV:expand-property report SHOULD be supported by all resources\n
      \  that support the REPORT method.\n   Marshalling:\n      The request body
      MUST be a DAV:expand-property XML element.\n      <!ELEMENT expand-property
      (property*)>\n      <!ELEMENT property (property*)>\n      <!ATTLIST property
      name NMTOKEN #REQUIRED>\n      name value: a property element type\n      <!ATTLIST
      property namespace NMTOKEN \"DAV:\">\n      namespace value: an XML namespace\n
      \     The response body for a successful request MUST be a\n      DAV:multistatus
      XML element.\n      multistatus: see RFC 2518, Section 12.9\n      The properties
      reported in the DAV:prop elements of the\n      DAV:multistatus element MUST
      be those identified by the\n      DAV:property elements in the DAV:expand-property
      element.  If\n      there are DAV:property elements nested within a DAV:property\n
      \     element, then every DAV:href in the value of the corresponding\n      property
      is replaced by a DAV:response element whose DAV:prop\n      elements report
      the values of the properties identified by the\n      nested DAV:property elements.
      \ The nested DAV:property elements\n      can in turn contain DAV:property elements,
      so that multiple levels\n      of DAV:href expansion can be requested.\n      Note
      that a validating parser MUST be aware that the DAV:expand-\n      property
      report effectively modifies the DTD of every property by\n      replacing every
      occurrence of \"href\" in the DTD with \"href |\n      response\".\n"
    - contents:
      - "3.8.1 Example - DAV:expand-property\n   This example describes how to query
        a version-controlled resource to\n   determine the DAV:creator-display-name
        and DAV:activity-set of every\n   version in the version history of that version-controlled
        resource.\n   This example assumes that the server supports the version-history\n
        \  feature (see Section 5).\n   >>REQUEST\n     REPORT /foo.html HTTP/1.1\n
        \    Host: www.webdav.org\n     Content-Type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:expand-property xmlns:D=\"DAV:\">\n       <D:property name=\"version-history\">\n
        \        <D:property name=\"version-set\">\n           <D:property name=\"creator-displayname\"/>\n
        \          <D:property name=\"activity-set\"/>\n         </D:property>\n       </D:property>\n
        \    </D:expand-property>\n   >>RESPONSE\n     HTTP/1.1 207 Multi-Status\n
        \    Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n
        \    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:multistatus xmlns:D=\"DAV:\">\n
        \      <D:response>\n         <D:href>http://www.webdav.org/foo.html</D:href>\n
        \        <D:propstat>\n           <D:prop>\n             <D:version-history>\n
        \              <D:response>\n                 <D:href>http://repo.webdav.org/his/23</D:href>\n
        \                <D:propstat>\n                   <D:prop>\n                     <D:version-set>\n
        \                      <D:response>\n   <D:href>http://repo.webdav.org/his/23/ver/1</D:href>\n
        \                        <D:propstat>\n                           <D:prop>\n
        \  <D:creator-displayname>Fred</D:creator-displayname>\n                             <D:activity-set>
        <D:href>\n                               http://www.webdav.org/ws/dev/sally\n
        \                            </D:href> </D:activity-set> </D:prop>\n                           <D:status>HTTP/1.1
        200 OK</D:status>\n                         </D:propstat> </D:response>\n
        \                      <D:response>\n   <D:href>http://repo.webdav.org/his/23/ver/2</D:href>\n
        \                        <D:propstat>\n                           <D:prop>\n
        \  <D:creator-displayname>Sally</D:creator-displayname>\n                             <D:activity-set>\n
        \  <D:href>http://repo.webdav.org/act/add-refresh-cmd</D:href>\n                             </D:activity-set>
        </D:prop>\n                           <D:status>HTTP/1.1 200 OK</D:status>\n
        \                        </D:propstat> </D:response>\n                     </D:version-set>
        </D:prop>\n                   <D:status>HTTP/1.1 200 OK</D:status>\n                 </D:propstat>
        </D:response>\n             </D:version-history> </D:prop>\n           <D:status>HTTP/1.1
        200 OK</D:status>\n         </D:propstat> </D:response>\n     </D:multistatus>\n
        \  In this example, the DAV:creator-displayname and DAV:activity-set\n   properties
        of the versions in the DAV:version-set of the\n   DAV:version-history of http://www.webdav.org/foo.html
        are reported.\n"
      title: 3.8.1 Example - DAV:expand-property
    title: 3.8 DAV:expand-property Report
  - contents:
    - "3.9 Additional OPTIONS Semantics\n   If the server supports the version-control
      feature, it MUST include\n   \"version-control\" as a field in the DAV response
      header from an\n   OPTIONS request on any resource that supports any versioning\n
      \  properties, reports, or methods.\n"
    title: 3.9 Additional OPTIONS Semantics
  - contents:
    - "3.10 Additional PUT Semantics\n   Additional Preconditions:\n      (DAV:cannot-modify-version-controlled-content):
      If the request-URL\n      identifies a resource with a DAV:checked-in property,
      the request\n      MUST fail unless DAV:auto-version semantics will automatically\n
      \     check out the resource.\n      (DAV:cannot-modify-version): If the request-URL
      identifies a\n      version, the request MUST fail.\n      If the request creates
      a new resource that is automatically placed\n      under version control, all
      preconditions for VERSION-CONTROL apply\n      to the request.\n   Additional
      Postconditions:\n      (DAV:auto-checkout): If the resource was a checked-in
      version-\n      controlled resource whose DAV:auto-version property indicates
      it\n      should be automatically checked out but not automatically checked\n
      \     in for a modification request, then the server MUST have\n      automatically
      checked out the resource prior to executing the\n      request.  In particular,
      the value of the DAV:checked-out property\n      of the resource MUST be that
      of the DAV:checked-in property prior\n      to the request, the DAV:checked-in
      property MUST have been\n      removed, and the DAV:predecessor-set property
      MUST be initialized\n      to be the same as the DAV:checked-out property.  If
      any part of\n      the checkout/update sequence failed, the status from the
      failed\n      part of the request MUST be returned, and the server state\n      preceding
      the request sequence MUST be restored.\n      (DAV:auto-checkout-checkin): If
      the resource was a checked-in\n      version-controlled resource whose DAV:auto-version
      property\n      indicates it should be automatically checked out and automatically\n
      \     checked in for a modification request, then the server MUST have\n      automatically
      checked out the resource prior to executing the\n      request and automatically
      checked it in after the request.  In\n      particular, the DAV:checked-in property
      of the resource MUST\n      identify a new version whose content and dead properties
      are the\n      same as those of the resource.  The DAV:predecessor-set of the
      new\n      version MUST identify the version identified by the DAV:checked-in\n
      \     property prior to the request.  If any part of the\n      checkout/update/checkin
      sequence failed, the status from the\n      failed part of the request MUST
      be returned, and the server state\n      preceding the request sequence MUST
      be restored.\n      If the request creates a new resource, the new resource
      MAY have\n      automatically been placed under version control, and all\n      postconditions
      for VERSION-CONTROL apply to the request.\n"
    title: 3.10 Additional PUT Semantics
  - contents:
    - "3.11 Additional PROPFIND Semantics\n   A DAV:allprop PROPFIND request SHOULD
      NOT return any of the\n   properties defined by this document.  This allows
      a versioning server\n   to perform efficiently when a naive client, which does
      not understand\n   the cost of asking a server to compute all possible live
      properties,\n   issues a DAV:allprop PROPFIND request.\n   Additional Preconditions:\n
      \     (DAV:supported-live-property): If the request attempts to access a\n      property
      defined by this document, the semantics of that property\n      MUST be supported
      by the server.\n"
    title: 3.11 Additional PROPFIND Semantics
  - contents:
    - "3.12 Additional PROPPATCH Semantics\n   Additional Preconditions:\n      (DAV:cannot-modify-version-controlled-property):
      If the request\n      attempts to modify a dead property, same semantics as
      PUT (see\n      Section 3.10).\n      (DAV:cannot-modify-version): If the request
      attempts to modify a\n      dead property, same semantics as PUT (see Section
      3.10).\n      (DAV:cannot-modify-protected-property): An attempt to modify a\n
      \     property that is defined by this document, as being protected for\n      that
      kind of resource, MUST fail.\n      (DAV:supported-live-property): An attempt
      to modify a property\n      defined by this document, but whose semantics are
      not enforced by\n      the server, MUST fail.  This helps ensure that a client
      will be\n      notified when it is trying to use a property whose semantics
      are\n      not supported by the server.\n   Additional Postconditions:\n      (DAV:auto-checkout):
      If the request modified a dead property, same\n      semantics as PUT (see Section
      3.10).\n      (DAV:auto-checkout-checkin): If the request modified a dead\n
      \     property, same semantics as PUT (see Section 3.10).\n"
    title: 3.12 Additional PROPPATCH Semantics
  - contents:
    - "3.13 Additional DELETE Semantics\n   Additional Preconditions:\n      (DAV:no-version-delete):
      A server MAY fail an attempt to DELETE a\n      version.\n   Additional Postconditions:\n
      \     (DAV:update-predecessor-set): If a version was deleted, the server\n      MUST
      have replaced any reference to that version in a\n      DAV:predecessor-set
      by a copy of the DAV:predecessor-set of the\n      deleted version.\n"
    title: 3.13 Additional DELETE Semantics
  - contents:
    - "3.14 Additional COPY Semantics\n   Additional Preconditions:\n      If the
      request creates a new resource that is automatically placed\n      under version
      control, all preconditions for VERSION-CONTROL apply\n      to the request.\n
      \  Additional Postconditions:\n      (DAV:must-not-copy-versioning-property):
      A property defined by\n      this document MUST NOT have been copied to the
      new resource\n      created by this request, but instead that property of the
      new\n      resource MUST have the default initial value it would have had if\n
      \     the new resource had been created by a non-versioning method such\n      as
      PUT or a MKCOL.\n      (DAV:auto-checkout): If the destination is a version-controlled\n
      \     resource, same semantics as PUT (see Section 3.10).\n      (DAV:auto-checkout-checkin):
      If the destination is a version-\n      controlled resource, same semantics
      as PUT (see Section 3.10).\n      (DAV:copy-creates-new-resource): If the source
      of a COPY is a\n      version-controlled resource or version, and if there is
      no\n      resource at the destination of the COPY, then the COPY creates a\n
      \     new non-version-controlled resource at the destination of the\n      COPY.
      \ The new resource MAY automatically be put under version\n      control, but
      the resulting version-controlled resource MUST be\n      associated with a new
      version history created for that new\n      version-controlled resource, and
      all postconditions for\n      VERSION-CONTROL apply to the request.\n"
    title: 3.14 Additional COPY Semantics
  - contents:
    - "3.15 Additional MOVE Semantics\n   Additional Preconditions:\n      (DAV:cannot-rename-version):
      If the request-URL identifies a\n      version, the request MUST fail.\n   Additional
      Postconditions:\n      (DAV:preserve-versioning-properties): When a resource
      is moved\n      from a source URL to a destination URL, a property defined by
      this\n      document MUST have the same value at the destination URL as it had\n
      \     at the source URL.\n"
    title: 3.15 Additional MOVE Semantics
  - contents:
    - "3.16 Additional UNLOCK Semantics\n   Note that these semantics apply both to
      an explicit UNLOCK request,\n   as well as to the removal of a lock because
      of a lock timeout.  If a\n   precondition or postcondition cannot be satisfied,
      the lock timeout\n   MUST NOT occur.\n   Additional Preconditions:\n      (DAV:version-history-is-tree):
      If the request-URL identifies a\n      checked-out version-controlled resource
      that will be automatically\n      checked in when the lock is removed, then
      the versions identified\n      by the DAV:predecessor-set of the checked-out
      resource MUST be\n      descendants of the root version of the version history
      for the\n      DAV:checked-out version.\n   Additional Postconditions:\n      (DAV:auto-checkin):
      If the request-URL identified a checked-out\n      version-controlled resource
      that had been automatically checked\n      out because of its DAV:auto-version
      property, the request MUST\n      have created a new version in the version
      history of the\n      DAV:checked-out version.  The request MUST have allocated
      a URL\n      for the version that MUST NOT have previously identified any other\n
      \     resource, and MUST NOT ever identify a resource other than this\n      version.
      \ The content, dead properties, DAV:resourcetype, and\n      DAV:predecessor-set
      of the new version MUST be copied from the\n      checked-out resource.  The
      DAV:version-name of the new version\n      MUST be set to a server-defined value
      distinct from all other\n      DAV:version-name values of other versions in
      the same version\n      history.  The request MUST have removed the DAV:checked-out\n
      \     property of the version-controlled resource, and MUST have added a\n      DAV:checked-in
      property that identifies the new version.\n"
    title: 3.16 Additional UNLOCK Semantics
  title: 3  Version-Control Feature
- contents:
  - "4  CHECKOUT-IN-PLACE FEATURE\n   With the version-control feature, WebDAV locking
    can be used to avoid\n   the proliferation of versions that would result if every
    modification\n   to a version-controlled resource produced a new version.  The\n
    \  checkout-in-place feature provides an alternative mechanism that\n   allows
    a client to explicitly check out and check in a resource to\n   create a new version.\n"
  - contents:
    - "4.1 Additional Version Properties\n   The checkout-in-place feature introduces
      the following REQUIRED\n   properties for a version.\n"
    - contents:
      - "4.1.1 DAV:checkout-fork\n   This property controls the behavior of CHECKOUT
        when a version\n   already is checked out or has a successor.  If the DAV:checkout-fork\n
        \  of a version is DAV:forbidden, a CHECKOUT request MUST fail if it\n   would
        result in that version appearing in the DAV:predecessor-set or\n   DAV:checked-out
        property of more than one version or checked-out\n   resource.  If DAV:checkout-fork
        is DAV:discouraged, such a CHECKOUT\n   request MUST fail unless DAV:fork-ok
        is specified in the CHECKOUT\n   request body.\n   A server MAY reject attempts
        to modify the DAV:checkout-fork of a\n   version.\n   <!ELEMENT checkout-fork
        ANY>\n   ANY value: A sequence of elements with at most one DAV:discouraged\n
        \  or DAV:forbidden element.\n   <!ELEMENT discouraged EMPTY>\n   <!ELEMENT
        forbidden EMPTY>\n"
      title: 4.1.1 DAV:checkout-fork
    - contents:
      - "4.1.2 DAV:checkin-fork\n   This property controls the behavior of CHECKIN
        when a version already\n   has a successor.  If the DAV:checkin-fork of a
        version is\n   DAV:forbidden, a CHECKIN request MUST fail if it would result
        in that\n   version appearing in the DAV:predecessor-set of more than one\n
        \  version.  If DAV:checkin-fork is DAV:discouraged, such a CHECKIN\n   request
        MUST fail unless DAV:fork-ok is specified in the CHECKIN\n   request body.\n
        \  A server MAY reject attempts to modify the DAV:checkout-fork of a\n   version.\n
        \  <!ELEMENT checkin-fork ANY>\n   ANY value: A sequence of elements with
        at most one DAV:discouraged\n   or DAV:forbidden element.\n   <!ELEMENT discouraged
        EMPTY>\n   <!ELEMENT forbidden EMPTY>\n"
      title: 4.1.2 DAV:checkin-fork
    title: 4.1 Additional Version Properties
  - contents:
    - "4.2 Checked-Out Resource Properties\n   The checkout-in-place feature introduces
      the following REQUIRED\n   properties for a checked-out resource.\n"
    - contents:
      - "4.2.1 DAV:checkout-fork\n   This property determines the DAV:checkout-fork
        property of the\n   version that results from checking in this resource.\n"
      title: 4.2.1 DAV:checkout-fork
    - contents:
      - "4.2.2 DAV:checkin-fork\n   This property determines the DAV:checkin-fork
        property of the version\n   that results from checking in this resource.\n"
      title: 4.2.2 DAV:checkin-fork
    title: 4.2 Checked-Out Resource Properties
  - contents:
    - "4.3 CHECKOUT Method (applied to a version-controlled resource)\n   A CHECKOUT
      request can be applied to a checked-in version-controlled\n   resource to allow
      modifications to the content and dead properties of\n   that version-controlled
      resource.\n   If a CHECKOUT request fails, the server state preceding the request\n
      \  MUST be restored.\n   Marshalling:\n      If a request body is included,
      it MUST be a DAV:checkout XML\n      element.\n      <!ELEMENT checkout ANY>\n
      \     ANY value: A sequence of elements with at most one DAV:fork-ok\n      element.\n
      \     <!ELEMENT fork-ok EMPTY>\n      If a response body for a successful request
      is included, it MUST\n      be a DAV:checkout-response XML element.\n      <!ELEMENT
      checkout-response ANY>\n      The response MUST include a Cache-Control:no-cache
      header.\n   Preconditions:\n      (DAV:must-be-checked-in): If a version-controlled
      resource is\n      being checked out, it MUST have a DAV:checked-in property.\n
      \     (DAV:checkout-of-version-with-descendant-is-forbidden): If the\n      DAV:checkout-fork
      property of the version being checked out is\n      DAV:forbidden, the request
      MUST fail if a version identifies that\n      version in its DAV:predecessor-set.\n
      \     (DAV:checkout-of-version-with-descendant-is-discouraged): If the\n      DAV:checkout-fork
      property of the version being checked out is\n      DAV:discouraged, the request
      MUST fail if a version identifies\n      that version in its DAV:predecessor-set
      unless DAV:fork-ok is\n      specified in the request body.\n      (DAV:checkout-of-checked-out-version-is-forbidden):
      If the\n      DAV:checkout-fork property of the version being checked out is\n
      \     DAV:forbidden, the request MUST fail if a checked-out resource\n      identifies
      that version in its DAV:checked-out property.\n      (DAV:checkout-of-checked-out-version-is-discouraged):
      If the\n      DAV:checkout-fork property of the version being checked out is\n
      \     DAV:discouraged, the request MUST fail if a checked-out resource\n      identifies
      that version in its DAV:checked-out property unless\n      DAV:fork-ok is specified
      in the request body.\n   Postconditions:\n      (DAV:is-checked-out): The checked-out
      resource MUST have a\n      DAV:checked-out property that identifies the DAV:checked-in\n
      \     version preceding the checkout.  The version-controlled resource\n      MUST
      NOT have a DAV:checked-in property.\n      (DAV:initialize-predecessor-set):
      The DAV:predecessor-set property\n      of the checked-out resource MUST be
      initialized to be the\n      DAV:checked-out version.\n"
    - contents:
      - "4.3.1 Example - CHECKOUT of a version-controlled resource\n   >>REQUEST\n
        \    CHECKOUT /foo.html HTTP/1.1\n     Host: www.webdav.org\n     Content-Length:
        0\n   >>RESPONSE\n     HTTP/1.1 200 OK\n     Cache-Control: no-cache\n   In
        this example, the version-controlled resource /foo.html is checked\n   out.\n"
      title: 4.3.1 Example - CHECKOUT of a version-controlled resource
    title: 4.3 CHECKOUT Method (applied to a version-controlled resource)
  - contents:
    - "4.4 CHECKIN Method (applied to a version-controlled resource)\n   A CHECKIN
      request can be applied to a checked-out version-controlled\n   resource to produce
      a new version whose content and dead properties\n   are copied from the checked-out
      resource.\n   If a CHECKIN request fails, the server state preceding the request\n
      \  MUST be restored.\n   Marshalling:\n      If a request body is included,
      it MUST be a DAV:checkin XML\n      element.\n      <!ELEMENT checkin ANY>\n
      \     ANY value: A sequence of elements with at most one\n      DAV:keep-checked-out
      element and at most one DAV:fork-ok element.\n      <!ELEMENT keep-checked-out
      EMPTY>\n      <!ELEMENT fork-ok EMPTY>\n      If a response body for a successful
      request is included, it MUST\n      be a DAV:checkin-response XML element.\n
      \     <!ELEMENT checkin-response ANY>\n      The response MUST include a Cache-Control:no-cache
      header.\n   Preconditions:\n      (DAV:must-be-checked-out): The request-URL
      MUST identify a\n      resource with a DAV:checked-out property.\n      (DAV:version-history-is-tree)
      The versions identified by the\n      DAV:predecessor-set of the checked-out
      resource MUST be\n      descendants of the root version of the version history
      for the\n      DAV:checked-out version.\n      (DAV:checkin-fork-forbidden):
      A CHECKIN request MUST fail if it\n      would cause a version whose DAV:checkin-fork
      is DAV:forbidden to\n      appear in the DAV:predecessor-set of more than one
      version.\n      (DAV:checkin-fork-discouraged): A CHECKIN request MUST fail
      if it\n      would cause a version whose DAV:checkin-fork is DAV:discouraged
      to\n      appear in the DAV:predecessor-set of more than one version, unless\n
      \     DAV:fork-ok is specified in the request body.\n   Postconditions:\n      (DAV:create-version):
      The request MUST have created a new version\n      in the version history of
      the DAV:checked-out version.  The\n      request MUST have allocated a distinct
      new URL for the new\n      version, and that URL MUST NOT ever identify any
      resource other\n      than that version. The URL for the new version MUST be
      returned in\n      a Location response header.\n      (DAV:initialize-version-content-and-properties):
      The content, dead\n      properties, DAV:resourcetype, and DAV:predecessor-set
      of the new\n      version MUST be copied from the checked-out resource.  The\n
      \     DAV:version-name of the new version MUST be set to a server-\n      defined
      value distinct from all other DAV:version-name values of\n      other versions
      in the same version history.\n      (DAV:checked-in): If the request-URL identifies
      a version-\n      controlled resource and DAV:keep-checked-out is not specified
      in\n      the request body, the DAV:checked-out property of the version-\n      controlled
      resource MUST have been removed and a DAV:checked-in\n      property that identifies
      the new version MUST have been added.\n      (DAV:keep-checked-out): If DAV:keep-checked-out
      is specified in\n      the request body, the DAV:checked-out property of the
      checked-out\n      resource MUST have been updated to identify the new version.\n"
    - contents:
      - "4.4.1 Example - CHECKIN\n   >>REQUEST\n     CHECKIN /foo.html HTTP/1.1\n
        \    Host: www.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n     HTTP/1.1
        201 Created\n     Location: http://repo.webdav.org/his/23/ver/32\n     Cache-Control:
        no-cache\n   In this example, version-controlled resource /foo.html is checked
        in,\n   and a new version is created at http://repo.webdav.org/his/23/ver/32.\n"
      title: 4.4.1 Example - CHECKIN
    title: 4.4 CHECKIN Method (applied to a version-controlled resource)
  - contents:
    - "4.5 UNCHECKOUT Method\n   An UNCHECKOUT request can be applied to a checked-out
      version-\n   controlled resource to cancel the CHECKOUT and restore the pre-\n
      \  CHECKOUT state of the version-controlled resource.\n   If an UNCHECKOUT request
      fails, the server MUST undo any partial\n   effects of the UNCHECKOUT request.\n
      \  Marshalling:\n      If a request body is included, it MUST be a DAV:uncheckout
      XML\n      element.\n      <!ELEMENT uncheckout ANY>\n      If a response body
      for a successful request is included, it MUST\n      be a DAV:uncheckout-response
      XML element.\n      <!ELEMENT uncheckout-response ANY>\n      The response MUST
      include a Cache-Control:no-cache header.\n   Preconditions:\n      (DAV:must-be-checked-out-version-controlled-resource):
      The\n      request-URL MUST identify a version-controlled resource with a\n
      \     DAV:checked-out property.\n   Postconditions:\n      (DAV:cancel-checked-out):
      The value of the DAV:checked-in property\n      is that of the DAV:checked-out
      property prior to the request, and\n      the DAV:checked-out property has been
      removed.\n      (DAV:restore-content-and-dead-properties): The content and dead\n
      \     properties of the version-controlled resource are copies of its\n      DAV:checked-in
      version.\n"
    - contents:
      - "4.5.1 Example - UNCHECKOUT\n   >>REQUEST\n     UNCHECKOUT /foo.html HTTP/1.1\n
        \    Host: www.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n     HTTP/1.1
        200 OK\n     Cache-Control: no-cache\n   In this example, the content and
        dead properties of the version-\n   controlled resource identified by http://www.webdav.org/foo.html
        are\n   restored to their values preceding the most recent CHECKOUT of that\n
        \  version-controlled resource.\n"
      title: 4.5.1 Example - UNCHECKOUT
    title: 4.5 UNCHECKOUT Method
  - contents:
    - "4.6 Additional OPTIONS Semantics\n   If a server supports the checkout-in-place
      feature, it MUST include\n   \"checkout-in-place\" as a field in the DAV response
      header from an\n   OPTIONS request on any resource that supports any versioning\n
      \  properties, reports, or methods.\n"
    title: 4.6 Additional OPTIONS Semantics
  title: 4  CHECKOUT-IN-PLACE FEATURE
- contents:
  - "5  Version-History Feature\n   It is often useful to have access to a version
    history even after all\n   version-controlled resources for that version history
    have been\n   deleted.  A server can provide this functionality by supporting\n
    \  version history resources.  A version history resource is a resource\n   that
    exists in a server defined namespace and therefore is unaffected\n   by any deletion
    or movement of version-controlled resources.  A\n   version history resource is
    an appropriate place to add a property\n   that logically applies to all states
    of a resource.  The DAV:expand-\n   property report (see Section 3.8) can be applied
    to the DAV:version-\n   set of a version history resource to provide a variety
    of useful\n   reports on all versions in that version history.\n"
  - contents:
    - "5.1 Version History Properties\n   The DAV:resourcetype of a version history
      MUST be DAV:version-\n   history.\n   The version-history feature introduces
      the following REQUIRED\n   properties for a version history.\n"
    - contents:
      - "5.1.1 DAV:version-set (protected)\n   This property identifies each version
        of this version history.\n   <!ELEMENT version-set (href+)>\n"
      title: 5.1.1 DAV:version-set (protected)
    - contents:
      - "5.1.2 DAV:root-version (computed)\n   This property identifies the root version
        of this version history.\n   <!ELEMENT root-version (href)>\n"
      title: 5.1.2 DAV:root-version (computed)
    title: 5.1 Version History Properties
  - contents:
    - "5.2 Additional Version-Controlled Resource Properties\n   The version-history
      feature introduces the following REQUIRED\n   property for a version-controlled
      resource.\n"
    - contents:
      - "5.2.1 DAV:version-history (computed)\n   This property identifies the version
        history resource for the\n   DAV:checked-in or DAV:checked-out version of
        this version-controlled\n   resource.\n   <!ELEMENT version-history (href)>\n"
      title: 5.2.1 DAV:version-history (computed)
    title: 5.2 Additional Version-Controlled Resource Properties
  - contents:
    - "5.3 Additional Version Properties\n   The version-history feature introduces
      the following REQUIRED\n   property for a version.\n"
    - contents:
      - "5.3.1 DAV:version-history (computed)\n   This property identifies the version
        history that contains this\n   version.\n   <!ELEMENT version-history (href)>\n"
      title: 5.3.1 DAV:version-history (computed)
    title: 5.3 Additional Version Properties
  - contents:
    - "5.4 DAV:locate-by-history Report\n   Many properties identify a version from
      some version history.  It is\n   often useful to be able to efficiently locate
      a version-controlled\n   resource for that version history.  The DAV:locate-by-history
      report\n   can be applied to a collection to locate the collection member that\n
      \  is a version-controlled resource for a specified version history\n   resource.\n
      \  Marshalling:\n      The request body MUST be a DAV:locate-by-history XML
      element.\n      <!ELEMENT locate-by-history (version-history-set, prop)>\n      <!ELEMENT
      version-history-set (href+)>\n      prop: see RFC 2518, Section 12.11\n      The
      response body for a successful request MUST be a\n      DAV:multistatus XML
      element containing every version-controlled\n      resource that is a member
      of the collection identified by the\n      request-URL, and whose DAV:version-history
      property identifies one\n      of the version history resources identified by
      the request body.\n      The DAV:prop element in the request body identifies
      which\n      properties should be reported in the DAV:prop elements in the\n
      \     response body.\n   Preconditions:\n      (DAV:must-be-version-history):
      Each member of the DAV:version-\n      history-set element in the request body
      MUST identify a version\n      history resource.\n"
    - contents:
      - "5.4.1 Example - DAV:locate-by-history Report\n   >>REQUEST\n     REPORT /ws/public
        HTTP/1.1\n     Host: www.webdav.org\n     Content-Type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:locate-by-history xmlns:D=\"DAV:\">\n       <D:version-history-set>\n
        \        <D:href>http://repo.webdav.org/his/23</D:href>\n         <D:href>http://repo.webdav.org/his/84</D:href>\n
        \        <D:href>http://repo.webdav.org/his/129</D:href>\n       <D:version-history-set/>\n
        \      <D:prop>\n         </D:version-history>\n       </D:prop>\n     </D:locate-by-history>\n
        \  >>RESPONSE\n     HTTP/1.1 207 Multi-Status\n     Content-Type: text/xml;
        charset=\"utf-8\"\n     Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\"
        ?>\n     <D:multistatus xmlns:D=\"DAV:\">\n       <D:response>\n         <D:href>http://www.webdav.org/ws/public/x/test.html</D:href>\n
        \        <D:propstat>\n           <D:prop>\n             <D:version-history>\n
        \              <D:href>http://repo.webdav.org/his/23</D:href>\n             </D:version-history>\n
        \          </D:prop>\n           <D:status>HTTP/1.1 200 OK</D:status>\n         </D:propstat>\n
        \      </D:response>\n     </D:multistatus>\n   In this example, there is
        only one version-controlled member of\n   /ws/public that is a version-controlled
        resource for one of the three\n   specified version history resources.  In
        particular,\n   /ws/public/x/test.html is the version-controlled resource
        for\n   http://repo.webdav.org/his/23.\n"
      title: 5.4.1 Example - DAV:locate-by-history Report
    title: 5.4 DAV:locate-by-history Report
  - contents:
    - "5.5 Additional OPTIONS Semantics\n   If the server supports the version-history
      feature, it MUST include\n   \"version-history\" as a field in the DAV response
      header from an\n   OPTIONS request on any resource that supports any versioning\n
      \  properties, reports, or methods.\n   A DAV:version-history-collection-set
      element MAY be included in the\n   request body to identify collections that
      may contain version history\n   resources.\n   Additional Marshalling:\n      If
      an XML request body is included, it MUST be a DAV:options XML\n      element.\n
      \     <!ELEMENT options ANY>\n      ANY value: A sequence of elements with at
      most one\n      DAV:version-history-collection-set element.\n      If an XML
      response body for a successful request is included, it\n      MUST be a DAV:options-response
      XML element.\n      <!ELEMENT options-response ANY>\n      ANY value: A sequence
      of elements with at most one\n      DAV:version-history-collection-set element.\n
      \     <!ELEMENT version-history-collection-set (href*)>\n      If DAV:version-history-collection-set
      is included in the request\n      body, the response body for a successful request
      MUST contain a\n      DAV:version-history-collection-set element identifying
      collections\n      that may contain version histories.  An identified collection
      MAY\n      be the root collection of a tree of collections, all of which may\n
      \     contain version histories.  Since different servers can control\n      different
      parts of the URL namespace, different resources on the\n      same host MAY
      have different DAV:version-history-collection-set\n      values.  The identified
      collections MAY be located on different\n      hosts from the resource.\n"
    title: 5.5 Additional OPTIONS Semantics
  - contents:
    - "5.6 Additional DELETE Semantics\n   Additional Postconditions:\n      (DAV:delete-version-set):
      If the request deleted a version\n      history, the request MUST have deleted
      all versions in the\n      DAV:version-set of that version history, and MUST
      have satisfied\n      the postconditions for version deletion (see Section 3.13).\n
      \     (DAV:version-history-has-root): If the request deleted the root\n      version
      of a version history, the request MUST have updated the\n      DAV:root-version
      of the version history to refer to another\n      version that is an ancestor
      of all other remaining versions in\n      that version history.  A result of
      this postcondition is that\n      every version history will have at least one
      version, and the only\n      way to delete all versions is to delete the version
      history\n      resource.\n"
    title: 5.6 Additional DELETE Semantics
  - contents:
    - "5.7 Additional COPY Semantics\n   Additional Preconditions:\n      (DAV:cannot-copy-history):
      If the request-URL identifies a version\n      history, the request MUST fail.
      \ In order to create another\n      version history whose versions have the
      same content and dead\n      properties, the appropriate sequence of VERSION-CONTROL,
      CHECKOUT,\n      PUT, PROPPATCH, and CHECKIN requests must be made.\n"
    title: 5.7 Additional COPY Semantics
  - contents:
    - "5.8 Additional MOVE Semantics\n   Additional Preconditions:\n      (DAV:cannot-rename-history):
      If the request-URL identifies a\n      version history, the request MUST fail.\n"
    title: 5.8 Additional MOVE Semantics
  - contents:
    - "5.9 Additional VERSION-CONTROL Semantics\n   Additional Postconditions:\n      (DAV:new-version-history):
      If the request created a new version\n      history, the request MUST have allocated
      a new server-defined URL\n      for that version history that MUST NOT have
      previously identified\n      any other resource, and MUST NOT ever identify
      a resource other\n      than this version history.\n"
    title: 5.9 Additional VERSION-CONTROL Semantics
  - contents:
    - "5.10 Additional CHECKIN Semantics\n   Additional Postconditions:\n      (DAV:add-to-history):
      A URL for the new version resource MUST have\n      been added to the DAV:version-set
      of the version history of the\n      DAV:checked-out version.\n"
    title: 5.10 Additional CHECKIN Semantics
  title: 5  Version-History Feature
- contents:
  - "6  Workspace Feature\n   In order to allow multiple users to work concurrently
    on adding\n   versions to the same version history, it is necessary to allocate
    on\n   the server multiple checked-out resources for the same version\n   history.
    \ Even if only one user is making changes to a resource, that\n   user will sometimes
    wish to create a \"private\" version, and then to\n   expose that version at a
    later time.  One way to provide this\n   functionality depends on the client keeping
    track of its current set\n   of checked-out resources.  This is the working-resource
    feature\n   defined in Section 8.  The other way to provide this functionality\n
    \  avoids the need for persistent state on the client, and instead has\n   the
    server maintain a human meaningful namespace for related sets of\n   checked-out
    resources.  This is the workspace feature defined in this\n   section.\n   The
    workspace feature introduces a \"workspace resource\".  A workspace\n   resource
    is a collection whose members are related version-controlled\n   and non-version-controlled
    resources.  Multiple workspaces may be\n   used to expose different versions and
    configurations of a set of\n   version-controlled resources concurrently.  In
    order to make changes\n   to a version-controlled resource in one workspace visible
    in another\n   workspace, that version-controlled resource must be checked in,
    and\n   then the corresponding version-controlled resource in the other\n   workspace
    can be updated to display the content and dead properties\n   of the new version.\n
    \  In order to ensure unambiguous merging (see Section 11) and\n   baselining
    (see Section 12) semantics, a workspace may contain at\n   most one version-controlled
    resource for a given version history.\n   This is required for unambiguous merging
    because the MERGE method\n   must identify which version-controlled resource is
    to be the merge\n   target of a given version.  This is required for unambiguous\n
    \  baselining because a baseline can only select one version for a given\n   version-controlled
    resource.\n   Initially, an empty workspace can be created.  Non-version-controlled\n
    \  resources can then be added to the workspace with standard WebDAV\n   requests
    such as PUT and MKCOL.  Version-controlled resources can be\n   added to the workspace
    with VERSION-CONTROL requests.  If the\n   baseline feature is supported, collections
    in the workspace can be\n   placed under baseline control, and then initialized
    by existing\n   baselines.\n"
  - contents:
    - "6.1 Workspace Properties\n   The workspace feature introduces the following
      REQUIRED property for\n   a workspace.\n"
    - contents:
      - "6.1.1 DAV:workspace-checkout-set (computed)\n   This property identifies
        each checked-out resource whose\n   DAV:workspace property identifies this
        workspace.\n   <!ELEMENT workspace-checkout-set (href*)>\n"
      title: 6.1.1 DAV:workspace-checkout-set (computed)
    title: 6.1 Workspace Properties
  - contents:
    - "6.2 Additional Resource Properties\n   The workspace feature introduces the
      following REQUIRED property for\n   a WebDAV resource.\n"
    - contents:
      - "6.2.1 DAV:workspace (protected)\n   The DAV:workspace property of a workspace
        resource MUST identify\n   itself.  The DAV:workspace property of any other
        type of resource\n   MUST be the same as the DAV:workspace of its parent collection.\n
        \  <!ELEMENT workspace (href)>\n"
      title: 6.2.1 DAV:workspace (protected)
    title: 6.2 Additional Resource Properties
  - contents:
    - "6.3 MKWORKSPACE Method\n   A MKWORKSPACE request creates a new workspace resource.
      \ A server MAY\n   restrict workspace creation to particular collections, but
      a client\n   can determine the location of these collections from a\n   DAV:workspace-collection-set
      OPTIONS request (see Section 6.4).\n   If a MKWORKSPACE request fails, the server
      state preceding the\n   request MUST be restored.\n   Marshalling:\n      If
      a request body is included, it MUST be a DAV:mkworkspace XML\n      element.\n
      \     <!ELEMENT mkworkspace ANY>\n      If a response body for a successful
      request is included, it MUST\n      be a DAV:mkworkspace-response XML element.\n
      \     <!ELEMENT mkworkspace-response ANY>\n      The response MUST include a
      Cache-Control:no-cache header.\n   Preconditions:\n      (DAV:resource-must-be-null):
      A resource MUST NOT exist at the\n      request-URL.\n      (DAV:workspace-location-ok):
      The request-URL MUST identify a\n      location where a workspace can be created.\n
      \  Postconditions:\n      (DAV:initialize-workspace): A new workspace exists
      at the\n      request-URL.  The DAV:resourcetype of the workspace MUST be\n
      \     DAV:collection.  The DAV:workspace of the workspace MUST identify\n      the
      workspace.\n"
    - contents:
      - "6.3.1 Example - MKWORKSPACE\n   >>REQUEST\n     MKWORKSPACE /ws/public HTTP/1.1\n
        \    Host: www.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n     HTTP/1.1
        201 Created\n     Cache-Control: no-cache\n   In this example, a new workspace
        is created at\n   http://www.webdav.org/ws/public.\n"
      title: 6.3.1 Example - MKWORKSPACE
    title: 6.3 MKWORKSPACE Method
  - contents:
    - "6.4 Additional OPTIONS Semantics\n   If a server supports the workspace feature,
      it MUST include\n   \"workspace\" as a field in the DAV response header from
      an OPTIONS\n   request on any resource that supports any versioning properties,\n
      \  reports, or methods.\n   If a server supports the workspace feature, it MUST
      also support the\n   checkout-in-place feature and the version-history feature.\n
      \  A DAV:workspace-collection-set element MAY be included in the request\n   body
      to identify collections that may contain workspace resources.\n   Additional
      Marshalling:\n      If an XML request body is included, it MUST be a DAV:options
      XML\n      element.\n      <!ELEMENT options ANY>\n      ANY value: A sequence
      of elements with at most one\n      DAV:workspace-collection-set element.\n
      \     If an XML response body for a successful request is included, it\n      MUST
      be a DAV:options-response XML element.\n      <!ELEMENT options-response ANY>\n
      \     ANY value: A sequence of elements with at most one\n      DAV:workspace-collection-set
      element.\n      <!ELEMENT workspace-collection-set (href*)>\n      If DAV:workspace-collection-set
      is included in the request body,\n      the response body for a successful request
      MUST contain a\n      DAV:workspace-collection-set element identifying collections
      that\n      may contain workspaces.  An identified collection MAY be the root\n
      \     collection of a tree of collections, all of which may contain\n      workspaces.
      \ Since different servers can control different parts\n      of the URL namespace,
      different resources on the same host MAY\n      have different DAV:workspace-collection-set
      values.  The\n      identified collections MAY be located on different hosts
      from the\n      resource.\n"
    - contents:
      - "6.4.1 Example - OPTIONS\n   >>REQUEST\n     OPTIONS /doc HTTP/1.1\n     Host:
        www.webdav.org\n     Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length:
        xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:options xmlns:D=\"DAV:\">\n
        \      <D:version-history-collection-set/>\n       <D:workspace-collection-set/>\n
        \    </D:options>\n   >>RESPONSE\n     HTTP/1.1 200 OK\n     DAV: 1\n     DAV:
        version-control,checkout-in-place,version-history,workspace\n     Content-Type:
        text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n     <?xml version=\"1.0\"
        encoding=\"utf-8\" ?>\n     <D:options-response xmlns:D=\"DAV:\">\n       <D:version-history-collection-set>\n
        \        <D:href>http://repo.webdav.org/his</D:href>\n       </D:version-history-collection-set>\n
        \      <D:workspace-collection-set>\n         <D:href>http://www.webdav.org/public/ws</D:href>\n
        \        <D:href>http://www.webdav.org/private/ws</D:href>\n       </D:workspace-collection-set>\n
        \    </D:options-response>\n   In this example, the server indicates that
        it provides Class 1 DAV\n   support and basic-server-workspace versioning
        support.  In addition,\n   the server indicates the requested locations of
        the version history\n   resources and the workspace resources.\n"
      title: 6.4.1 Example - OPTIONS
    title: 6.4 Additional OPTIONS Semantics
  - contents:
    - "6.5 Additional DELETE Semantics\n   Additional Postconditions:\n      (DAV:delete-workspace-members):
      If a workspace is deleted, any\n      resource that identifies that workspace
      in its DAV:workspace\n      property MUST be deleted.\n"
    title: 6.5 Additional DELETE Semantics
  - contents:
    - "6.6 Additional MOVE Semantics\n   Additional Postconditions:\n      (DAV:workspace-member-moved):
      If the request-URL did not identify\n      a workspace, the DAV:workspace of
      the destination MUST have been\n      updated to have the same value as the
      DAV:workspace of the parent\n      collection of the destination.\n      (DAV:workspace-moved):
      If the request-URL identified a workspace,\n      any reference to that workspace
      in a DAV:workspace property MUST\n      have been updated to refer to the new
      location of that workspace.\n"
    title: 6.6 Additional MOVE Semantics
  - contents:
    - "6.7 Additional VERSION-CONTROL Semantics\n   A VERSION-CONTROL request can
      be used to create a new version-\n   controlled resource for an existing version
      history.  This allows the\n   creation of version-controlled resources for the
      same version history\n   in multiple workspaces.\n   Additional Marshalling:\n
      \     <!ELEMENT version-control ANY>\n      ANY value: A sequence of elements
      with at most one DAV:version\n      element.\n      <!ELEMENT version (href)>\n
      \  Additional Preconditions:\n      (DAV:cannot-add-to-existing-history): If
      the DAV:version-control\n      request body element contains a DAV:version element,
      the request-\n      URL MUST NOT identify a resource.\n      (DAV:must-be-version):
      The DAV:href of the DAV:version element\n      MUST identify a version.\n      (DAV:one-version-controlled-resource-per-history-per-workspace):\n
      \     If the DAV:version-control request body specifies a version, and\n      if
      the request-URL is a member of a workspace, then there MUST NOT\n      already
      be a version-controlled member of that workspace whose\n      DAV:checked-in
      or DAV:checked-out property identifies any version\n      from the version history
      of the version specified in the request\n      body.\n   Additional Postconditions:\n
      \     (DAV:new-version-controlled-resource): If the request-URL did NOT\n      identify
      a resource, a new version-controlled resource exists at\n      the request-URL
      whose content and dead properties are initialized\n      by those of the version
      in the request body, and whose\n      DAV:checked-in property identifies that
      version.\n"
    - contents:
      - "6.7.1 Example - VERSION-CONTROL (using an existing version history)\n   >>REQUEST\n
        \    VERSION-CONTROL /ws/public/bar.html HTTP/1.1\n     Host: www.webdav.org\n
        \    Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n
        \    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:version-control
        xmlns:D=\"DAV:\">\n       <D:version>\n         <D:href>http://repo.webdav.org/his/12/ver/V3</D:href>\n
        \      </D:version>\n     </D:version-control>\n   >>RESPONSE\n     HTTP/1.1
        201 Created\n     Cache-Control: no-cache\n   In this example, a new version-controlled
        resource is created at\n   /ws/public/bar.html.  The content and dead properties
        of the new\n   version-controlled resource are initialized to be the same
        as those\n   of the version identified by http://repo.webdav.org/his/12/ver/V3.\n"
      title: 6.7.1 Example - VERSION-CONTROL (using an existing version history)
    title: 6.7 Additional VERSION-CONTROL Semantics
  title: 6  Workspace Feature
- contents:
  - "7  UPDATE Feature\n   The update feature provides a mechanism for changing the
    state of a\n   checked-in version-controlled resource to be that of another version\n
    \  from the version history of that resource.\n"
  - contents:
    - "7.1 UPDATE Method\n   The UPDATE method modifies the content and dead properties
      of a\n   checked-in version-controlled resource (the \"update target\") to be\n
      \  those of a specified version (the \"update source\") from the version\n   history
      of that version-controlled resource.\n   The response to an UPDATE request identifies
      the resources modified\n   by the request, so that a client can efficiently
      update any cached\n   state it is maintaining.  Extensions to the UPDATE method
      allow\n   multiple resources to be modified from a single UPDATE request (see\n
      \  Section 12.13).\n   Marshalling:\n      The request body MUST be a DAV:update
      element.\n      <!ELEMENT update ANY>\n      ANY value: A sequence of elements
      with at most one DAV:version\n      element and at most one DAV:prop element.\n
      \     <!ELEMENT version (href)>\n      prop: see RFC 2518, Section 12.11\n      The
      response for a successful request MUST be a 207 Multi-Status,\n      where the
      DAV:multistatus XML element in the response body\n      identifies all resources
      that have been modified by the request.\n      multistatus: see RFC 2518, Section
      12.9\n      The response MUST include a Cache-Control:no-cache header.\n   Postconditions:\n
      \     (DAV:update-content-and-properties): If the DAV:version element in\n      the
      request body identified a version that is in the same version\n      history
      as the DAV:checked-in version of a version-controlled\n      resource identified
      by the request-URL, then the content and dead\n      properties of that version-controlled
      resource MUST be the same as\n      those of the version specified by the DAV:version
      element, and the\n      DAV:checked-in property of the version-controlled resource
      MUST\n      identify that version.  The request-URL MUST appear in a\n      DAV:response
      element in the response body.\n      (DAV:report-properties): If DAV:prop is
      specified in the request\n      body, the properties specified in the DAV:prop
      element MUST be\n      reported in the DAV:response elements in the response
      body.\n"
    - contents:
      - "7.1.1 Example - UPDATE\n   >>REQUEST\n     UPDATE /foo.html HTTP/1.1\n     Host:
        www.webdav.org\n     Content-type: text/xml; charset=\"utf-8\"\n     Content-Length:
        xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:update xmlns:D=\"DAV:\">\n
        \      <D:version>\n         <D:href>http://repo.webdav.org/his/23/ver/33</D:href>\n
        \      </D:version>\n     </D:update>\n   >>RESPONSE\n     HTTP/1.1 207 Multi-Status\n
        \    Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n
        \    Cache-Control: no-cache\n     <?xml version=\"1.0\" encoding=\"utf-8\"
        ?>\n     <D:multistatus xmlns:D=\"DAV:\">\n       <D:response>\n         <D:href>http://www.webdav.org/foo.html</D:href>\n
        \        <D:status>HTTP/1.1 200 OK</D:status>\n       </D:response>\n   In
        this example, the content and dead properties of\n   http://repo.webdav.org/his/23/ver/33
        are copied to the version-\n   controlled resource /foo.html, and the DAV:checked-in
        property of\n   /foo.html is updated to refer to\n   http://repo.webdav.org/his/23/ver/33.\n"
      title: 7.1.1 Example - UPDATE
    title: 7.1 UPDATE Method
  - contents:
    - "7.2 Additional OPTIONS Semantics\n   If the server supports the update feature,
      it MUST include \"update\"\n   as a field in the DAV response header from an
      OPTIONS request on any\n   resource that supports any versioning properties,
      reports, or\n   methods.\n"
    title: 7.2 Additional OPTIONS Semantics
  title: 7  UPDATE Feature
- contents:
  - "8  Label Feature\n   A version \"label\" is a string that distinguishes one version
    in a\n   version history from all other versions in that version history.  A\n
    \  label can automatically be assigned by a server, or it can be\n   assigned
    by a client in order to provide a meaningful name for that\n   version.  A given
    version label can be assigned to at most one\n   version of a given version history,
    but client assigned labels can be\n   reassigned to another version at any time.
    \ Note that although a\n   given label can be applied to at most one version from
    the same\n   version history, the same label can be applied to versions from\n
    \  different version histories.\n   For certain methods, if the request-URL identifies
    a version-\n   controlled resource, a label can be specified in a Label request\n
    \  header (see Section 8.3) to cause the method to be applied to the\n   version
    selected by that label from the version history of that\n   version-controlled
    resource.\n"
  - contents:
    - "8.1 Additional Version Properties\n   The label feature introduces the following
      REQUIRED property for a\n   version.\n"
    - contents:
      - "8.1.1 DAV:label-name-set (protected)\n   This property contains the labels
        that currently select this version.\n   <!ELEMENT label-name-set (label-name*)>\n
        \  <!ELEMENT label-name (#PCDATA)>\n   PCDATA value: string\n"
      title: 8.1.1 DAV:label-name-set (protected)
    title: 8.1 Additional Version Properties
  - contents:
    - "8.2 LABEL Method\n   A LABEL request can be applied to a version to modify
      the labels that\n   select that version.  The case of a label name MUST be preserved
      when\n   it is stored and retrieved.  When comparing two label names to decide\n
      \  if they match or not, a server SHOULD use a case-sensitive URL-\n   escaped
      UTF-8 encoded comparison of the two label names.\n   If a LABEL request is applied
      to a checked in version-controlled\n   resource, the operation MUST be applied
      to the DAV:checked-in version\n   of that version-controlled resource.\n   Marshalling:\n
      \     The request body MUST be a DAV:label element.\n      <!ELEMENT label ANY>\n
      \     ANY value: A sequence of elements with at most one DAV:add,\n      DAV:set,
      or DAV:remove element.\n      <!ELEMENT add (label-name)>\n      <!ELEMENT set
      (label-name)>\n      <!ELEMENT remove (label-name)>\n      <!ELEMENT label-name
      (#PCDATA)>\n      PCDATA value: string\n      The request MAY include a Label
      header.\n      The request MAY include a Depth header.  If no Depth header is\n
      \     included, Depth:0 is assumed.  Standard depth semantics apply, and\n      the
      request is applied to the collection identified by the\n      request-URL and
      to all members of the collection that satisfy the\n      Depth value.  If a
      Depth header is included and the request fails\n      on any resource, the response
      MUST be a 207 Multi-Status that\n      identifies all resources for which the
      request has failed.\n      If a response body for a successful request is included,
      it MUST\n      be a DAV:label-response XML element.\n      <!ELEMENT label-response
      ANY>\n      The response MUST include a Cache-Control:no-cache header.\n   Preconditions:\n
      \     (DAV:must-be-checked-in): If the request-URL identifies a\n      version-controlled
      resource, the version-controlled resource MUST\n      be checked in.\n      (DAV:must-select-version-in-history):
      If a Label request header is\n      included and the request-URL identifies
      a version-controlled\n      resource, the specified label MUST select a version
      in the version\n      history of the version-controlled resource.\n      (DAV:add-must-be-new-label):
      If DAV:add is specified in the\n      request body, the specified label MUST
      NOT appear in the\n      DAV:label-name-set of any version in the version history
      of that\n      version-controlled resource.\n      (DAV:label-must-exist): If
      DAV:remove is specified in the request\n      body, the specified label MUST
      appear in the DAV:label-name-set of\n      that version.\n   Postconditions:\n
      \     (DAV:add-or-set-label): If DAV:add or DAV:set is specified in the\n      request
      body, the specified label MUST appear in the DAV:label-\n      name-set of the
      specified version, and MUST NOT appear in the\n      DAV:label-name-set of any
      other version in the version history of\n      that version.\n      (DAV:remove-label):
      If DAV:remove is specified in the request\n      body, the specified label MUST
      NOT appear in the DAV:label-name-\n      set of any version in the version history
      of that version.\n"
    - contents:
      - "8.2.1 Example - Setting a label\n   >>REQUEST\n     LABEL /foo.html HTTP/1.1\n
        \    Host: www.webdav.org\n     Content-type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:label xmlns:D=\"DAV:\">\n       <D:set>\n         <D:label-name>default</D:label-name>\n
        \      </D:set>\n     </D:label>\n   >>RESPONSE\n     HTTP/1.1 200 OK\n     Cache-Control:
        no-cache\n   In this example, the label \"default\" is applied to the DAV:checked-in\n
        \  version of /foo.html.\n"
      title: 8.2.1 Example - Setting a label
    title: 8.2 LABEL Method
  - contents:
    - "8.3 Label Header\n   For certain methods (e.g. GET, PROPFIND), if the request-URL\n
      \  identifies a version-controlled resource, a label can be specified in\n   a
      Label request header to cause the method to be applied to the\n   version selected
      by that label from the version history of that\n   version-controlled resource.\n
      \  The value of a label header is the name of a label, encoded using\n   URL-escaped
      UTF-8.  For example, the label \"release B.3\" is\n   identified by the following
      header:\n     Label: release%20B.3\n   A Label header MUST have no effect on
      a request whose request-URL\n   does not identify a version-controlled resource.
      \ In particular, it\n   MUST have no effect on a request whose request-URL identifies
      a\n   version or a version history.\n   A server MUST return an HTTP-1.1 Vary
      header containing Label in a\n   successful response to a cacheable request
      (e.g., GET) that includes\n   a Label header.\n"
    title: 8.3 Label Header
  - contents:
    - "8.4 Additional OPTIONS Semantics\n   If the server supports the label feature,
      it MUST include \"label\" as\n   a field in the DAV response header from an
      OPTIONS request on any\n   resource that supports any versioning properties,
      reports, or\n   methods.\n"
    title: 8.4 Additional OPTIONS Semantics
  - contents:
    - "8.5 Additional GET Semantics\n   Additional Marshalling:\n      The request
      MAY include a Label header.\n   Additional Preconditions:\n      (DAV:must-select-version-in-history):
      If a Label request header is\n      included and the request-URL identifies
      a version-controlled\n      resource, the specified label MUST select a version
      in the version\n      history of the version-controlled resource.\n   Additional
      Postconditions:\n      (DAV:apply-request-to-labeled-version): If the request-URL\n
      \     identifies a version-controlled resource and a Label request\n      header
      is included, the response MUST contain the content of the\n      specified version
      rather than that of the version-controlled\n      resource.\n"
    title: 8.5 Additional GET Semantics
  - contents:
    - "8.6 Additional PROPFIND Semantics\n   Additional Marshalling:\n      The request
      MAY include a Label header.\n   Additional Preconditions:\n      (DAV:must-select-version-in-history):
      If a Label request header is\n      included and the request-URL identifies
      a version-controlled\n      resource, the specified label MUST select a version
      in the version\n      history of the version-controlled resource.\n   Additional
      Postconditions:\n      (DAV:apply-request-to-labeled-version): If the request-URL\n
      \     identifies a version-controlled resource and a Label request\n      header
      is included, the response MUST contain the properties of\n      the specified
      version rather than that of the version-controlled\n      resource.\n"
    title: 8.6 Additional PROPFIND Semantics
  - contents:
    - "8.7 Additional COPY Semantics\n   Additional Marshalling:\n      The request
      MAY include a Label header.\n   Additional Preconditions:\n      (DAV:must-select-version-in-history):
      If a Label request header is\n      included and the request-URL identifies
      a version-controlled\n      resource, the specified label MUST select a version
      in the version\n      history of the version-controlled resource.\n   Additional
      Postconditions:\n      (DAV:apply-request-to-labeled-version): If the request-URL\n
      \     identifies a version-controlled resource and a Label request\n      header
      is included, the request MUST have copied the properties\n      and content
      of the specified version rather than that of the\n      version-controlled resource.\n"
    title: 8.7 Additional COPY Semantics
  - contents:
    - "8.8 Additional CHECKOUT Semantics\n   If the server supports the working-resource
      option, a LABEL header\n   may be included to check out the version selected
      by the specified\n   label.\n   Additional Marshalling:\n      The request MAY
      include a Label header.\n   Additional Preconditions:\n      (DAV:must-select-version-in-history):
      If a Label request header is\n      included and the request-URL identifies
      a version-controlled\n      resource, the specified label MUST select a version
      in the version\n      history of the version-controlled resource.\n      (DAV:must-not-have-label-and-apply-to-version):
      If a Label request\n      header is included, the request body MUST NOT contain
      a\n      DAV:apply-to-version element.\n   Additional Postconditions:\n      (DAV:apply-request-to-labeled-version):
      If the request-URL\n      identifies a checked-in version-controlled resource,
      and a Label\n      request header is included, the CHECKOUT MUST have been applied
      to\n      the version selected by the specified label, and not to the\n      version-controlled
      resource itself.\n"
    title: 8.8 Additional CHECKOUT Semantics
  - contents:
    - "8.9 Additional UPDATE Semantics\n   If the request body of an UPDATE request
      contains a DAV:label-name\n   element, the update target is the resource identified
      by the\n   request-URL, and the update source is the version selected by the\n
      \  specified label from the version history of the update target.\n   Additional
      Marshalling:\n      <!ELEMENT update ANY>\n      ANY value: A sequence of elements
      with at most one DAV:label-name\n      or DAV:version element (but not both).\n
      \     <!ELEMENT label-name (#PCDATA)>\n      PCDATA value: string\n      The
      request MAY include a Depth header.  If no Depth header is\n      included,
      Depth:0 is assumed.  Standard depth semantics apply, and\n      the request
      is applied to the collection identified by the\n      request-URL and to all
      members of the collection that satisfy the\n      Depth value.  If a Depth header
      is included and the request fails\n      on any resource, the response MUST
      be a 207 Multi-Status that\n      identifies all resources for which the request
      has failed.\n   Additional Preconditions:\n      (DAV:must-select-version-in-history):
      If the request includes a\n      DAV:label-name element in the request body,
      the label MUST select\n      a version in the version history of the version-controlled\n
      \     resource identified by the request-URL.\n      (DAV:depth-update): If
      the request includes a Depth header,\n      standard depth semantics apply,
      and the request is applied to the\n      collection identified by the request-URL
      and to all members of the\n      collection that satisfy the Depth value.  The
      request MUST be\n      applied to a collection before being applied to any members
      of\n      that collection, since an update of a version-controlled\n      collection
      might change the membership of that collection.\n   Additional Postconditions:\n
      \     (DAV:apply-request-to-labeled-version): If a DAV:label-name\n      element
      appears in the request body, the content and dead\n      properties of the version-controlled
      resource must have been\n      updated to be those of the version selected by
      that label.\n"
    title: 8.9 Additional UPDATE Semantics
  title: 8  Label Feature
- contents:
  - "9  Working-Resource Feature\n   The working-resource feature provides an alternative
    to the workspace\n   feature for supporting parallel development.  Unlike the
    workspace\n   feature, where the desired configuration of versions and checked-out\n
    \  resources is maintained on the server, the working-resource feature\n   maintains
    the configuration on the client.  This simplifies the\n   server implementation,
    but does not allow a user to access the\n   configuration from clients in different
    physical locations, such as\n   from another office, from home, or while traveling.
    \ Another\n   difference is that the workspace feature isolates clients from a\n
    \  logical change that involves renaming shared resources, until that\n   logical
    change is complete and tested; with the working resource\n   feature, all clients
    use a common set of shared version-controlled\n   resources and every client sees
    the result of a MOVE as soon as it\n   occurs.\n   If a server supports the working-resource
    feature but not the\n   checkout-in-place feature, a CHECKOUT request can only
    be used to\n   create a working resource, and cannot be used to check out a\n
    \  version-controlled resource.  If a server supports the checkout-in-\n   place
    feature, but not the working-resource feature, a CHECKOUT can\n   only be used
    to change the state of a version-controlled resource\n   from checked-in to checked-out.\n"
  - contents:
    - "9.1 Additional Version Properties\n   The working-resource feature introduces
      the following REQUIRED\n   properties for a version.\n"
    - contents:
      - "9.1.1 DAV:checkout-fork\n   This property is defined in Section 4.1.1.\n"
      title: 9.1.1 DAV:checkout-fork
    - contents:
      - "9.1.2 DAV:checkin-fork\n   This property is defined in Section 4.1.2.\n"
      title: 9.1.2 DAV:checkin-fork
    title: 9.1 Additional Version Properties
  - contents:
    - "9.2 Working Resource Properties\n   The working-resource feature introduces
      the following REQUIRED\n   properties for a working resource.  Since a working
      resource is a\n   checked-out resource, it also has any property defined in
      this\n   document for a checked-out resource.\n"
    - contents:
      - "9.2.1 DAV:auto-update (protected)\n   This property identifies the version-controlled
        resource that will be\n   updated when the working resource is checked in.\n
        \  <!ELEMENT auto-update (href)>\n"
      title: 9.2.1 DAV:auto-update (protected)
    - contents:
      - "9.2.2 DAV:checkout-fork\n   This property is defined in Section 4.2.1.\n"
      title: 9.2.2 DAV:checkout-fork
    - contents:
      - "9.2.3 DAV:checkin-fork\n   This property is defined in Section 4.2.2.\n"
      title: 9.2.3 DAV:checkin-fork
    title: 9.2 Working Resource Properties
  - contents:
    - "9.3 CHECKOUT Method (applied to a version)\n   A CHECKOUT request can be applied
      to a version to create a new\n   working resource.  The content and dead properties
      of the working\n   resource are a copy of the version that was checked out.\n
      \  Marshalling:\n      If a request body is included, it MUST be a DAV:checkout
      XML\n      element.\n      <!ELEMENT checkout ANY>\n      ANY value: A sequence
      of elements with at most one DAV:apply-to-\n      version and at most one DAV:fork-ok
      element.\n      <!ELEMENT apply-to-version EMPTY>\n      <!ELEMENT fork-ok EMPTY>\n
      \     If a response body for a successful request is included,\n      it MUST
      be a DAV:checkout-response XML element.\n      <!ELEMENT checkout-response ANY>\n
      \     The response MUST include a Location header.\n      The response MUST
      include a Cache-Control:no-cache header.\n   Preconditions:\n      (DAV:checkout-of-version-with-descendant-is-forbidden):
      See\n      Section 4.3.\n      (DAV:checkout-of-version-with-descendant-is-discouraged):
      See\n      Section 4.3.\n      (DAV:checkout-of-checked-out-version-is-forbidden):
      See Section\n      4.3.\n      (DAV:checkout-of-checked-out-version-is-discouraged):
      See Section\n      4.3.\n   Postconditions:\n      (DAV:create-working-resource):
      If the request-URL identified a\n      version, the Location response header
      MUST contain the URL of a\n      new working resource.  The DAV:checked-out
      property of the new\n      working resource MUST identify the version that was
      checked out.\n      The content and dead properties of the working resource
      MUST be\n      copies of the content and dead properties of the DAV:checked-out\n
      \     version.  The DAV:predecessor-set property of the working resource\n      MUST
      be initialized to be the version identified by the request-\n      URL.  The
      DAV:auto-update property of the working resource MUST\n      NOT exist.\n      (DAV:create-working-resource-from-checked-in-version):
      If the\n      request-URL identified a version-controlled resource, and\n      DAV:apply-to-version
      is specified in the request body, the\n      CHECKOUT is applied to the DAV:checked-in
      version of the version-\n      controlled resource, and not the version-controlled
      resource\n      itself.  A new working resource is created and the version-\n
      \     controlled resource remains checked-in.  The DAV:auto-update\n      property
      of the working resource MUST identify the version-\n      controlled resource.\n"
    - contents:
      - "9.3.1 Example - CHECKOUT of a version\n   >>REQUEST\n     CHECKOUT /his/12/ver/V3
        HTTP/1.1\n     Host: repo.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n
        \    HTTP/1.1 201 Created\n     Location: http://repo.webdav.org/wr/157\n
        \    Cache-Control: no-cache\n   In this example, the version identified by\n
        \  http://repo.webdav.org/his/12/ver/V3 is checked out, and the new\n   working
        resource is located at http://repo.webdav.org/wr/157.\n"
      title: 9.3.1 Example - CHECKOUT of a version
    title: 9.3 CHECKOUT Method (applied to a version)
  - contents:
    - "9.4 CHECKIN Method (applied to a working resource)\n   A CHECKIN request can
      be applied to a working resource to produce a\n   new version whose content
      and dead properties are a copy of those of\n   the working resource.  If the
      DAV:auto-update property of the working\n   resource was set because the working
      resource was created by applying\n   a CHECKOUT with the DAV:apply-to-version
      flag to a version-controlled\n   resource, the CHECKIN request will also update
      the content and dead\n   properties of that version-controlled resource to be
      those of the new\n   version.\n   Marshalling:\n      If a request body is included,
      it MUST be a DAV:checkin XML\n      element.\n      <!ELEMENT checkin ANY>\n
      \     ANY value: A sequence of elements with at most one DAV:fork-ok\n      element.\n
      \     <!ELEMENT fork-ok EMPTY>\n      If a response body for a successful request
      is included, it MUST\n      be a DAV:checkin-response XML element.\n      <!ELEMENT
      checkin-response ANY>\n      The response MUST include a Cache-Control:no-cache
      header.\n   Preconditions:\n      (DAV:must-be-checked-out): See Section 4.4.\n
      \     (DAV:version-history-is-tree) See Section 4.4.\n      (DAV:checkin-fork-forbidden):
      See Section 4.4.\n      (DAV:checkin-fork-discouraged): See Section 4.4.\n      (DAV:no-overwrite-by-auto-update):
      If the DAV:auto-update property\n      for the checked-out resource identifies
      a version-controlled\n      resource, at least one of the versions identified
      by the\n      DAV:predecessor-set property of the checked-out resource MUST\n
      \     identify a version that is either the same as or a descendant of\n      the
      version identified by the DAV:checked-in property of that\n      version-controlled
      resource.\n   Postconditions:\n      (DAV:create-version): See Section 4.4.\n
      \     (DAV:initialize-version-content-and-properties): See Section 4.4.\n      (DAV:auto-update):
      If the DAV:auto-update property of the\n      checked-out resource identified
      a version-controlled resource, an\n      UPDATE request with the new version
      MUST have been applied to that\n      version-controlled resource.\n      (DAV:delete-working-resource):
      If the request-URL identifies a\n      working resource and if DAV:keep-checked-out
      is not specified in\n      the request body, the working resource is deleted.\n"
    - contents:
      - "9.4.1 Example - CHECKIN of a working resource\n   >>REQUEST\n     CHECKIN
        /wr/157 HTTP/1.1\n     Host: repo.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n
        \    HTTP/1.1 201 Created\n     Location: http://repo.webdav.org/his/23/ver/15\n
        \    Cache-Control: no-cache\n   In this example, the working resource /wr/157
        checked in, and a new\n   version is created at http://repo.webdav.org/his/23/ver/15.\n"
      title: 9.4.1 Example - CHECKIN of a working resource
    title: 9.4 CHECKIN Method (applied to a working resource)
  - contents:
    - "9.5 Additional OPTIONS Semantics\n   If the server supports the working-resource
      feature, it MUST include\n   \"working-resource\" as a field in the DAV response
      header from an\n   OPTIONS request on any resource that supports any versioning\n
      \  properties, reports, or methods.\n"
    title: 9.5 Additional OPTIONS Semantics
  - contents:
    - "9.6 Additional COPY Semantics\n   Additional Postconditions:\n      (DAV:copy-creates-new-resource):
      The result of copying a working\n      resource is a new non-version-controlled
      resource at the\n      destination of the COPY.  The new resource MAY automatically
      be\n      put under version control, but the resulting version-controlled\n
      \     resource MUST be associated with a new version history created for\n      that
      new version-controlled resource.\n"
    title: 9.6 Additional COPY Semantics
  - contents:
    - "9.7 Additional MOVE Semantics\n   Additional Preconditions:\n      (DAV:cannot-rename-working-resource):
      If the request-URL\n      identifies a working resource, the request MUST fail.\n
      \  Additional Postconditions:\n      (DAV:update-auto-update): If the request-URL
      identified a\n      version-controlled resource, any DAV:auto-update properties
      that\n      identified that version-controlled resource MUST have been updated\n
      \     to contain the new location of that version-controlled resource.\n"
    title: 9.7 Additional MOVE Semantics
  title: 9  Working-Resource Feature
- contents:
  - "10 Advanced Versioning Features\n   Advanced versioning addresses the problems
    of parallel development\n   and configuration management of multiple sets of interrelated\n
    \  resources.  Traditionally, artifacts of software development,\n   including
    requirements, design documents, code, and test cases, have\n   been a focus of
    configuration management.  Web sites, comprising\n   multiple inter-linked resources
    (HTML, graphics, sound, CGI, and\n   others), are another class of complex information
    artifacts that\n   benefit from the application of configuration management.  The\n
    \  advanced versioning capabilities for coordinating concurrent change\n   provide
    the infrastructure for efficient and controlled management of\n   large evolving
    web sites.\n"
  - contents:
    - "10.1 Advanced Versioning Packages\n   Although a server MAY support any combination
      of advanced versioning\n   features, in order to minimize the complexity of
      a WebDAV advanced\n   versioning client, a WebDAV advanced versioning server
      SHOULD support\n   one of the following packages:\n   Advanced-Server-Workspace
      Package: basic-server-workspace package\n   plus all advanced features\n   Advanced-Client-Workspace
      Package: basic-client-workspace package\n   plus all advanced features\n   The
      advanced-server-workspace package supports advanced versioning\n   capabilities
      for a client with no persistent state.  The advanced-\n   client-workspace package
      supports advanced versioning capabilities\n   for a client that maintains configuration
      state on the client.  A\n   server that supports both advanced workspace packages
      will\n   interoperate with all versioning clients.\n"
    title: 10.1 Advanced Versioning Packages
  - contents:
    - "10.2 Advanced Versioning Terms\n   The following additional terms are used
      by the advanced versioning\n   features.\n   Collection\n      A \"collection\"
      is a resource whose state consists of not only\n      content and properties,
      but also a set of named \"bindings\", where\n      a binding identifies what
      RFC 2518 calls an \"internal member\" of\n      the collection.  Note that a
      binding is not a resource, but rather\n      is a part of the state of a collection
      that defines a mapping from\n      a binding name (a URL segment) to a resource
      (an internal member\n      of the collection).\n   Collection Version Resource\n
      \     A \"collection version resource\", or simply \"collection version\",\n
      \     captures the dead properties of a version-controlled collection,\n      as
      well as the names of its version-controlled bindings (see\n      Section 14).
      \ A version-controlled binding is a binding to a\n      version-controlled resource.
      \ If the checkout-in-place feature is\n      supported, a collection version
      can be created by checking out and\n      then checking in a version-controlled
      collection.  If the\n      working-resource feature is supported, a collection
      version can be\n      created by checking out a collection version (to create
      a \"working\n      collection\") and then checking in the working collection.\n
      \  Configuration\n      A \"configuration\" is a set of resources that consists
      of a root\n      collection and all members (not just internal members) of that\n
      \     root collection that are not members of another configuration.\n      The
      root collection is called the \"configuration root\", and the\n      members
      of this set are called the \"members of the configuration\".\n      Note that
      a collection (which is a single resource) is very\n      different from a configuration
      (which is a set of resources).\n   Baseline Resource\n      A \"baseline resource\",
      or simply \"baseline\", of a collection is a\n      version of the configuration
      that is rooted at that collection\n      (see Section 12).  In particular, a
      baseline captures the\n      DAV:checked-in version of every version-controlled
      member of that\n      configuration.  Note that a collection version (which
      captures the\n      state of a single resource) is very different from a collection\n
      \     baseline (which captures the state of a set of resources).\n   Baseline-Controlled
      Collection\n      A \"baseline-controlled collection\" is a collection from
      which\n      baselines can be created (see Section 12).\n   Version-Controlled
      Configuration Resource\n      A \"version-controlled configuration resource\",
      or simply\n      \"version-controlled configuration\", is a special kind of
      version-\n      controlled resource that is associated with a baseline-controlled\n
      \     collection, and is used to create and access baselines of that\n      collection
      (see Section 12).  When a collection is both version-\n      controlled and
      baseline-controlled, a client can create a new\n      version of the collection
      by checking out and checking in that\n      collection, and it can create a
      new baseline of that collection by\n      checking out and checking in the version-controlled
      configuration\n      of that collection.\n   Activity Resource\n      An \"activity
      resource\", or simply \"activity\", is a resource that\n      selects a set
      of versions that correspond to a single logical\n      change, where the versions
      selected from a given version history\n      form a single line of descent through
      that version history (see\n      Section 13).\n"
    title: 10.2 Advanced Versioning Terms
  title: 10 Advanced Versioning Features
- contents:
  - "11 Merge Feature\n   When a user wants to accept the changes (new versions) created
    by\n   someone else, it is important not just to update the version-\n   controlled
    resources in the user's workspace with those new versions,\n   since this could
    result in \"backing out\" changes the user has made to\n   those version-controlled
    resources.  Instead, the versions created in\n   another workspace should be \"merged\"
    into the user's version-\n   controlled resources.\n   The version history of
    a version-controlled resource provides the\n   information needed to determine
    the result of the merge.  In\n   particular, the merge should select whichever
    version is later in the\n   line of descent from the root version.  In case the
    versions to be\n   merged are on different lines of descent (neither version is
    a\n   descendant of the other), neither version should be selected, but\n   instead,
    a new version should be created that contains the logical\n   merge of the content
    and dead properties of those versions.  The\n   MERGE request can be used to check
    out each version-controlled\n   resource that requires such a merge, and set the
    DAV:merge-set\n   property of each checked-out resource to identify the version
    to be\n   merged.  The user is responsible for modifying the content and dead\n
    \  properties of the checked-out resource so that it represents the\n   logical
    merge of that version, and then adding that version to the\n   DAV:predecessor-set
    of the checked-out resource.\n   If the server is capable of automatically performing
    the merge, it\n   MAY update the content, dead properties, and DAV:predecessor-set
    of\n   the checked-out resource itself.  Before checking in the\n   automatically
    merged resource, the user is responsible for verifying\n   that the automatic
    merge is correct.\n"
  - contents:
    - "11.1 Additional Checked-Out Resource Properties\n   The merge feature introduces
      the following REQUIRED properties for a\n   checked-out resource.\n"
    - contents:
      - "11.1.1 DAV:merge-set\n   This property identifies each version that is to
        be merged into this\n   checked-out resource.\n   <!ELEMENT merge-set (href*)>\n"
      title: 11.1.1 DAV:merge-set
    - contents:
      - "11.1.2 DAV:auto-merge-set\n   This property identifies each version that
        the server has merged into\n   this checked-out resource.  The client should
        confirm that the merge\n   has been performed correctly before moving a URL
        from the DAV:auto-\n   merge-set to the DAV:predecessor-set of a checked-out
        resource.\n   <!ELEMENT auto-merge-set (href*)>\n"
      title: 11.1.2 DAV:auto-merge-set
    title: 11.1 Additional Checked-Out Resource Properties
  - contents:
    - "11.2 MERGE Method\n   The MERGE method performs the logical merge of a specified
      version\n   (the \"merge source\") into a specified version-controlled resource\n
      \  (the \"merge target\").  If the merge source is neither an ancestor nor\n
      \  a descendant of the DAV:checked-in or DAV:checked-out version of the\n   merge
      target, the MERGE checks out the merge target (if it is not\n   already checked
      out) and adds the URL of the merge source to the\n   DAV:merge-set of the merge
      target.  It is then the client's\n   responsibility to update the content and
      dead properties of the\n   checked-out merge target so that it reflects the
      logical merge of the\n   merge source into the current state of the merge target.
      \ The client\n   indicates that it has completed the update of the merge target,
      by\n   deleting the merge source URL from the DAV:merge-set of the checked-\n
      \  out merge target, and adding it to the DAV:predecessor-set.  As an\n   error
      check for a client forgetting to complete a merge, the server\n   MUST fail
      an attempt to CHECKIN a version-controlled resource with a\n   non-empty DAV:merge-set.\n
      \  When a server has the ability to automatically update the content and\n   dead
      properties of the merge target to reflect the logical merge of\n   the merge
      source, it may do so unless DAV:no-auto-merge is specified\n   in the MERGE
      request body.  In order to notify the client that a\n   merge source has been
      automatically merged, the MERGE request MUST\n   add the URL of the auto-merged
      source to the DAV:auto-merge-set\n   property of the merge target, and not to
      the DAV:merge-set property.\n   The client indicates that it has verified that
      the auto-merge is\n   valid, by deleting the merge source URL from the DAV:auto-merge-set,\n
      \  and adding it to the DAV:predecessor-set.\n   Multiple merge sources can
      be specified in a single MERGE request.\n   The set of merge sources for a MERGE
      request is determined from the\n   DAV:source element of the MERGE request body
      as follows:\n   -  If DAV:source identifies a version, that version is a merge\n
      \     source.\n   -  If DAV:source identifies a version-controlled resource,
      the\n      DAV:checked-in version of that version-controlled resource is a\n
      \     merge source.\n   -  If DAV:source identifies a collection, the DAV:checked-in
      version\n      of each version-controlled resource that is a member of that\n
      \     collection is a merge source.\n   The request-URL identifies the set of
      possible merge targets.  If the\n   request-URL identifies a collection, any
      member of the configuration\n   rooted at the request-URL is a possible merge
      target.  The merge\n   target of a particular merge source is the version-controlled
      or\n   checked-out resource whose DAV:checked-in or DAV:checked-out version\n
      \  is from the same version history as the merge source.  If a merge\n   source
      has no merge target, that merge source is ignored.\n   The MERGE response identifies
      the resources that a client must modify\n   to complete the merge. It also identifies
      the resources modified by\n   the request, so that a client can efficiently
      update any cached state\n   it is maintaining.\n   Marshalling:\n      The request
      body MUST be a DAV:merge element.\n      The set of merge sources is determined
      by the DAV:source element\n      in the request body.\n      <!ELEMENT merge
      ANY>\n      ANY value: A sequence of elements with one DAV:source element, at\n
      \     most one DAV:no-auto-merge element, at most one DAV:no-checkout\n      element,
      at most one DAV:prop element, and any legal set of\n      elements that can
      occur in a DAV:checkout element.\n      <!ELEMENT source (href+)>\n      <!ELEMENT
      no-auto-merge EMPTY>\n      <!ELEMENT no-checkout EMPTY>\n      prop: see RFC
      2518, Section 12.11\n      The response for a successful request MUST be a 207
      Multi-Status,\n      where the DAV:multistatus XML element in the response body\n
      \     identifies all resources that have been modified by the request.\n      multistatus:
      see RFC 2518, Section 12.9\n      The response to a successful request MUST
      include a Location\n      header containing the URL for the new version created
      by the\n      checkin.\n      The response MUST include a Cache-Control:no-cache
      header.\n   Preconditions:\n      (DAV:cannot-merge-checked-out-resource): The
      DAV:source element\n      MUST NOT identify a checked-out resource.  If the
      DAV:source\n      element identifies a collection, the collection MUST NOT have
      a\n      member that is a checked-out resource.\n      (DAV:checkout-not-allowed):
      If DAV:no-checkout is specified in the\n      request body, it MUST be possible
      to perform the merge without\n      checking out any of the merge targets.\n
      \     All preconditions of the CHECKOUT operation apply to the checkouts\n      performed
      by the request.\n   Postconditions:\n      (DAV:ancestor-version): If a merge
      target is a version-controlled\n      or checked-out resource whose DAV:checked-in
      version or\n      DAV:checked-out version is the merge source or is a descendant
      of\n      the merge source, the merge target MUST NOT have been modified by\n
      \     the MERGE.\n      (DAV:descendant-version): If the merge target was a
      checked-in\n      version-controlled resource whose DAV:checked-in version was
      an\n      ancestor of the merge source, an UPDATE operation MUST have been\n
      \     applied to the merge target to set its content and dead properties\n      to
      be those of the merge source.  If the UPDATE method is not\n      supported,
      the merge target MUST have been checked out, the\n      content and dead properties
      of the merge target MUST have been set\n      to those of the merge source,
      and the merge source MUST have been\n      added to the DAV:auto-merge-set of
      the merge target.  The merge\n      target MUST appear in a DAV:response XML
      element in the response\n      body.\n      (DAV:checked-out-for-merge): If
      the merge target was a checked-in\n      version-controlled resource whose DAV:checked-in
      version was\n      neither a descendant nor an ancestor of the merge source,
      a\n      CHECKOUT MUST have been applied to the merge target.  All XML\n      elements
      in the DAV:merge XML element that could appear in a\n      DAV:checkout XML
      element MUST have been used as arguments to the\n      CHECKOUT request.  The
      merge target MUST appear in a DAV:response\n      XML element in the response
      body.\n      (DAV:update-merge-set): If the DAV:checked-out version of the\n
      \     merge target is neither equal to nor a descendant of the merge\n      source,
      the merge source MUST be added to either the DAV:merge-set\n      or the DAV:auto-merge-set
      of the merge target.  The merge target\n      MUST appear in a DAV:response
      XML element in the response body.\n      If a merge source has been added to
      the DAV:auto-merge-set, the\n      content and dead properties of the merge
      target MUST have been\n      modified by the server to reflect the result of
      a logical merge of\n      the merge source and the merge target.  If a merge
      source has been\n      added to the DAV:merge-set, the content and dead properties
      of the\n      merge target MUST NOT have been modified by the server.  If\n
      \     DAV:no-auto-merge is specified in the request body, the merge\n      source
      MUST NOT have been added to the DAV:auto-merge-set.\n      (DAV:report-properties):
      If DAV:prop is specified in the request\n      body, the properties specified
      in the DAV:prop element MUST be\n      reported in the DAV:response elements
      in the response body.\n"
    - contents:
      - "11.2.1 Example - MERGE\n   >>REQUEST\n     MERGE /ws/public HTTP/1.1\n     Host:
        www.webdav.org\n     Content-type: text/xml; charset=\"utf-8\"\n     Content-Length:
        xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:merge xmlns:D=\"DAV:\">\n
        \      <D:source>\n         <D:href>http://www.webdav.org/ws/dev/sally</D:href>\n
        \      </D:source>\n     </D:merge>\n   >>RESPONSE\n     HTTP/1.1 207 Multi-Status\n
        \    Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n
        \    Cache-Control: no-cache\n     <?xml version=\"1.0\" encoding=\"utf-8\"
        ?>\n     <D:multistatus xmlns:D=\"DAV:\">\n       <D:response>\n   <D:href>http://www.webdav.org/ws/public/src/parse.c</D:href>\n
        \  <D:status>HTTP/1.1 200 OK</D:status>\n       </D:response>\n       <D:response>\n
        \  <D:href>http://www.webdav.org/ws/public/doc/parse.html</D:href>\n   <D:status>HTTP/1.1
        200 OK</D:status>\n       </D:response>\n     </D:multistatus>\n   In this
        example, the DAV:checked-in versions from the workspace\n   http://www.webdav.org/ws/dev/sally
        are merged into the version-\n   controlled resources in the workspace\n   http://www.webdav.org/ws/public.
        \ The resources\n   /ws/public/src/parse.c and /ws/public/doc/parse.html were
        modified by\n   the request.\n"
      title: 11.2.1 Example - MERGE
    title: 11.2 MERGE Method
  - contents:
    - "11.3 DAV:merge-preview Report\n   A merge preview describes the changes that
      would result if the\n   versions specified by the DAV:source element in the
      request body were\n   to be merged into the resource identified by the request-URL\n
      \  (commonly, a collection).\n   Marshalling:\n      The request body MUST be
      a DAV:merge-preview XML element.\n      <!ELEMENT merge-preview (source)>\n
      \     <!ELEMENT source (href)>\n      The response body for a successful request
      MUST be a\n      DAV:merge-preview-report XML element.\n      <!ELEMENT merge-preview-report\n
      \      (update-preview | conflict-preview | ignore-preview)*>\n      A DAV:update-preview
      element identifies a merge target whose\n      DAV:checked-in property would
      change as a result of the MERGE, and\n      identifies the merge source for
      that merge target.\n      <!ELEMENT update-preview (target, version)>\n      <!ELEMENT
      target (href)>\n      <!ELEMENT version (href)>\n      A DAV:conflict-preview
      element identifies a merge target that\n      requires a merge.\n      <!ELEMENT
      conflict-preview (target, common-ancestor, version)>\n      A DAV:common-ancestor
      element identifies the version that is a\n      common ancestor of both the
      merge source and the DAV:checked-in or\n      DAV:checked-out version of the
      merge target.\n      <!ELEMENT common-ancestor (href)>\n      A DAV:ignore-preview
      element identifies a version that has no\n      merge target and therefore would
      be ignored by the merge.\n      <!ELEMENT ignore-preview (version)>\n"
    - contents:
      - "11.3.1 Example - DAV:merge-preview Report\n   >>REQUEST\n     REPORT /ws/public
        HTTP/1.1\n     Host: www.webdav.org\n     Content-type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:merge-preview xmlns:D=\"DAV:\">\n       <D:source>\n         <D:href>http://www.webdav.org/ws/dev/fred</D:href>\n
        \      </D:source>\n     </D:merge-preview>\n   >>RESPONSE\n     HTTP/1.1
        200 OK\n     Content-Type: text/xml; charset=\"utf-8\"\n     Content-Length:
        xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n     <D:merge-preview-report
        xmlns:D=\"DAV:\">\n       <D:conflict-preview>\n         <D:target>\n           <D:href>http://www.webdav.org/ws/public/foo.html</D:href>\n
        \        </D:target>\n         <D:common-ancestor>\n           <D:href>http://repo.webdav.org/his/23/ver/18</D:href>\n
        \        </D:common-ancestor>\n         <D:version>\n           <D:href>http://repo.webdav.org/his/23/ver/42</D:href>\n
        \        </D:version>\n       </D:conflict-preview>\n       <D:update-preview>\n
        \        <D:target>\n           <D:href>http://www.webdav.org/ws/public/bar.html</D:href>\n
        \        </D:target>\n         <D:version>\n           <D:href>http://www.repo/his/42/ver/3</D:href>\n
        \        </D:version>\n       </D:update-preview>\n     </D:merge-preview-report>\n
        \  In this example, the merge preview report indicates that version\n   /his/23/ver/42
        would be merged in /ws/public/foo.html, and version\n   /his/42/ver/3 would
        update /ws/public/bar.html if the workspace\n   http://www.webdav.org/ws/dev/fred
        was merged into the workspace\n   http://www.webdav.org/ws/public.\n"
      title: 11.3.1 Example - DAV:merge-preview Report
    title: 11.3 DAV:merge-preview Report
  - contents:
    - "11.4 Additional OPTIONS Semantics\n   If the server supports the merge feature,
      it MUST include \"merge\" as\n   a field in the DAV response header from an
      OPTIONS request on any\n   resource that supports any versioning properties,
      reports, or\n   methods.\n"
    title: 11.4 Additional OPTIONS Semantics
  - contents:
    - "11.5 Additional DELETE Semantics\n   Additional Postconditions:\n      (DAV:delete-version-reference):
      If a version is deleted, any\n      reference to that version in a DAV:merge-set
      or DAV:auto-merge-set\n      property MUST be removed.\n"
    title: 11.5 Additional DELETE Semantics
  - contents:
    - "11.6 Additional CHECKIN Semantics\n   Additional Preconditions:\n      (DAV:merge-must-be-complete):
      The DAV:merge-set and DAV:auto-\n      merge-set of the checked-out resource
      MUST be empty or not exist.\n"
    title: 11.6 Additional CHECKIN Semantics
  title: 11 Merge Feature
- contents:
  - "12 Baseline Feature\n   A configuration is a set of resources that consists of
    a root\n   collection and all members of that root collection except those\n   resources
    that are members of another configuration.  A configuration\n   that contains
    a large number of resources can consume a large amount\n   of space on a server.
    \ This can make it prohibitively expensive to\n   remember the state of an existing
    configuration by creating a\n   Depth:infinity copy of its root collection.\n
    \  A baseline is a version resource that captures the state of each\n   version-controlled
    member of a configuration.  A baseline history is\n   a version history whose
    versions are baselines.  New baselines are\n   created by checking out and then
    checking in a special kind of\n   version-controlled resource called a version-controlled\n
    \  configuration.\n   A collection that is under baseline control is called a
    baseline-\n   controlled collection.  In order to allow efficient baseline\n   implementation,
    the state of a baseline of a collection is limited to\n   be a set of versions
    and their names relative to the collection, and\n   the operations on a baseline
    are limited to the creation of a\n   baseline from a collection, and restoring
    or merging the baseline\n   back into a collection.  A server MAY automatically
    put a collection\n   under baseline control when it is created, or a client can
    use the\n   BASELINE-CONTROL method to put a specified collection under baseline\n
    \  control.\n   As a configuration gets large, it is often useful to break it
    up into\n   a set of smaller configurations that form the logical \"components\"
    of\n   that configuration.  In order to capture the fact that a baseline of\n
    \  a configuration is logically extended by a component configuration\n   baseline,
    the component configuration baseline is captured as a\n   \"subbaseline\" of the
    baseline.\n   The root collection of a configuration is unconstrained with respect\n
    \  to its relationship to the root collection of any of its components.\n   In
    particular, the root collection of a configuration can have a\n   member that
    is the root collection of one of its components (e.g.,\n   configuration /sys/x
    can have a component /sys/x/foo), can be a\n   member of the root collection of
    one of its components (e.g.,\n   configuration /sys/y/z can have a component /sys/y),
    or neither\n   (e.g., configuration /sys/x can have a component /comp/bar).\n"
  - contents:
    - "12.1 Version-Controlled Configuration Properties\n   Since a version-controlled
      configuration is a version-controlled\n   resource, it has all the properties
      of a version-controlled resource.\n   In addition, the baseline feature introduces
      the following REQUIRED\n   property for a version-controlled configuration.\n"
    - contents:
      - "12.1.1 DAV:baseline-controlled-collection (protected)\n   This property identifies
        the collection that contains the version-\n   controlled resources whose DAV:checked-in
        versions are being tracked\n   by this version-controlled configuration.  The
        DAV:version-\n   controlled-configuration of the DAV:baseline-controlled-collection
        of\n   a version-controlled configuration MUST identify that version-\n   controlled
        configuration.\n   <!ELEMENT baseline-controlled-collection (href)>\n"
      title: 12.1.1 DAV:baseline-controlled-collection (protected)
    title: 12.1 Version-Controlled Configuration Properties
  - contents:
    - "12.2 Checked-Out Configuration Properties\n   Since a checked-out configuration
      is a checked-out resource, it has\n   all the properties of a checked-out resource.
      \ In addition, the\n   baseline feature introduces the following REQUIRED property
      for a\n   checked-out configuration.\n"
    - contents:
      - "12.2.1 DAV:subbaseline-set\n   This property determines the DAV:subbaseline-set
        property of the\n   baseline that results from checking in this resource.\n
        \  A server MAY reject attempts to modify the DAV:subbaseline-set of a\n   checked-out
        configuration.\n   <!ELEMENT subbaseline-set (href*)>\n"
      title: 12.2.1 DAV:subbaseline-set
    title: 12.2 Checked-Out Configuration Properties
  - contents:
    - "12.3 Baseline Properties\n   The DAV:resourcetype of a baseline MUST be DAV:baseline.
      \ Since a\n   baseline is a version resource, it has all the properties of a\n
      \  version resource.  In addition, the baseline feature introduces the\n   following
      REQUIRED properties for a baseline.\n"
    - contents:
      - "12.3.1 DAV:baseline-collection (protected)\n   This property contains a server-defined
        URL for a collection, where\n   each member of this collection MUST either
        be a version-controlled\n   resource with the same DAV:checked-in version
        and relative name as a\n   version-controlled member of the baseline-controlled
        collection at\n   the time the baseline was created, or be a collection needed
        to\n   provide the relative name for a version-controlled resource.\n   <!ELEMENT
        baseline-collection (href)>\n"
      title: 12.3.1 DAV:baseline-collection (protected)
    - contents:
      - "12.3.2 DAV:subbaseline-set (protected)\n   The URLs in the DAV:subbaseline-set
        property MUST identify a set of\n   other baselines.  The subbaselines of
        a baseline are the baselines\n   identified by its DAV:subbaseline-set and
        all subbaselines of the\n   baselines identified by its DAV:subbaseline-set.\n
        \  <!ELEMENT subbaseline-set (href*)>\n"
      title: 12.3.2 DAV:subbaseline-set (protected)
    title: 12.3 Baseline Properties
  - contents:
    - "12.4 Additional Resource Properties\n   The baseline feature introduces the
      following REQUIRED property for a\n   resource.\n"
    - contents:
      - "12.4.1 DAV:version-controlled-configuration (computed)\n   If the resource
        is a member of a version-controlled configuration\n   (i.e. the resource is
        a collection under baseline control or is a\n   member of a collection under
        baseline control), this property\n   identifies that version-controlled configuration.\n
        \  <!ELEMENT version-controlled-configuration (href)>\n"
      title: 12.4.1 DAV:version-controlled-configuration (computed)
    title: 12.4 Additional Resource Properties
  - contents:
    - "12.5 Additional Workspace Properties\n   The baseline feature introduces the
      following REQUIRED property for a\n   workspace.\n"
    - contents:
      - "12.5.1 DAV:baseline-controlled-collection-set (computed)\n   This property
        identifies each member of the workspace that is a\n   collection under baseline
        control (as well as the workspace itself,\n   if it is under baseline control).\n
        \  <!ELEMENT baseline-controlled-collection-set (href*)>\n"
      title: 12.5.1 DAV:baseline-controlled-collection-set (computed)
    title: 12.5 Additional Workspace Properties
  - contents:
    - "12.6 BASELINE-CONTROL Method\n   A collection can be placed under baseline
      control with a\n   BASELINE-CONTROL request.  When a collection is placed under
      baseline\n   control, the DAV:version-controlled-configuration property of the\n
      \  collection is set to identify a new version-controlled configuration.\n   This
      version-controlled configuration can be checked out and then\n   checked in
      to create a new baseline for that collection.\n   If a baseline is specified
      in the request body, the DAV:checked-in\n   version of the new version-controlled
      configuration will be that\n   baseline, and the collection is initialized to
      contain version-\n   controlled members whose DAV:checked-in versions and relative
      names\n   are determined by the specified baseline.\n   If no baseline is specified,
      a new baseline history is created\n   containing a baseline that captures the
      state of the version-\n   controlled members of the collection, and the DAV:checked-in
      version\n   of the version-controlled configuration will be that baseline.\n
      \  Marshalling:\n      If a request body is included, it MUST be a DAV:baseline-control\n
      \     XML element.\n      <!ELEMENT baseline-control ANY>\n      ANY value:
      A sequence of elements with at most one DAV:baseline\n      element.\n      <!ELEMENT
      baseline (href)>\n      If a response body for a successful request is included,
      it MUST\n      be a DAV:baseline-control-response XML element.\n      <!ELEMENT
      baseline-control-response ANY>\n      The response MUST include a Cache-Control:no-cache
      header.\n   Preconditions:\n      (DAV:version-controlled-configuration-must-not-exist):
      The\n      DAV:version-controlled-configuration property of the collection\n
      \     identified by the request-URL MUST not exist.\n      (DAV:must-be-baseline):
      The DAV:href of the DAV:baseline element\n      in the request body MUST identify
      a baseline.\n      (DAV:must-have-no-version-controlled-members): If a DAV:baseline\n
      \     element is specified in the request body, the collection\n      identified
      by the request-URL MUST have no version-controlled\n      members.\n      (DAV:one-baseline-controlled-collection-per-history-per-\n
      \     workspace):  If the request-URL identifies a workspace or a member\n      of
      a workspace, and if a baseline is specified in a DAV:baseline\n      element
      in the request body, then there MUST NOT be another\n      collection in that
      workspace whose DAV:version-controlled-\n      configuration property identifies
      a version-controlled\n      configuration for the baseline history of that baseline.\n
      \  Postconditions:\n      (DAV:create-version-controlled-configuration): A new
      version-\n      controlled configuration is created, whose DAV:baseline-\n      controlled-collection
      property identifies the collection.\n      (DAV:reference-version-controlled-configuration):
      The\n      DAV:version-controlled-configuration of the collection identifies\n
      \     the new version-controlled configuration.\n      (DAV:select-existing-baseline):
      If the request body specifies a\n      baseline, the DAV:checked-in property
      of the new version-\n      controlled configuration MUST have been set to identify
      this\n      baseline.  A version-controlled member of the collection will be\n
      \     created for each version in the baseline, where the version-\n      controlled
      member will have the content and dead properties of\n      that version, and
      will have the same name relative to the\n      collection as the corresponding
      version-controlled resource had\n      when the baseline was created.  Any nested
      collections that are\n      needed to provide the appropriate name for a version-controlled\n
      \     member will be created.\n      (DAV:create-new-baseline): If no baseline
      is specified in the\n      request body, the request MUST have created a new
      baseline history\n      at a server-defined URL, and MUST have created a new
      baseline in\n      that baseline history.  The DAV:baseline-collection of the
      new\n      baseline MUST identify a collection whose members have the same\n
      \     relative name and DAV:checked-in version as the version-controlled\n      members
      of the request collection.  The DAV:checked-in property of\n      the new version-controlled
      configuration MUST identify the new\n      baseline.\n"
    - contents:
      - "12.6.1 Example - BASELINE-CONTROL\n   >>REQUEST\n     BASELINE-CONTROL /src
        HTTP/1.1\n     Host: www.webdav.org\n     Content-Type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:baseline-control xmlns:D=\"DAV:\">\n       <D:href>http://www.webdav.org/repo/blh/13/ver/8</D:href>\n
        \    </D:baseline-control>\n   >>RESPONSE\n     HTTP/1.1 200 OK\n     Cache-Control:
        no-cache\n     Content-Length: 0\n   In this example, the collection /src
        is placed under baseline\n   control, and is populated with members from an
        existing baseline.  A\n   new version-controlled configuration (/repo/vcc/128)
        is created and\n   associated with /src, and /src is initialized with version-controlled\n
        \  members whose DAV:checked-in versions are those selected by the\n   DAV:baseline-collection
        (/repo/bc/15) of the specified baseline\n   (/repo/blh/13/ver/8).  The following
        diagram illustrates the\n   resulting state on the server.\n         +-------------------------------------+\n
        \        |Baseline-Controlled Collection       |<------+\n         |/src                                 |
        \      |\n         |-------------------------------------|       |\n         |DAV:version-controlled-configuration
        +---+   |\n         +-------------------------------------+   |   |\n                                                   |
        \  |\n                                                   |   |\n         +-------------------------------------+
        \  |   |\n         |Version-Controlled Configuration     |<--+   |\n         |/repo/vcc/128
        \                       |       |\n         |-------------------------------------|
        \      |\n         |DAV:baseline-controlled-collection   +-------+\n         |-------------------------------------|\n
        \        |DAV:checked-in                       +-------+\n         +-------------------------------------+
        \      |\n         |DAV:version-history                  +---+   |\n         +-------------------------------------+
        \  |   |\n                                                   |   |\n                                                   |
        \  |\n         +------------------------+                |   |\n         |Baseline
        History        |<---------------+   |\n         |/repo/blh/13            |
        \                   |\n         |------------------------+                    |\n
        \        |DAV:version-set         +----------------+   |\n         +------------------------+
        \   |   |   |   |   |\n                                       v   |   v   v
        \  |\n                                           |           |\n         +------------------------+
        \       |           |\n         |Baseline                |<-------+-----------+\n
        \        |/repo/blh/13/ver/8      |\n         |------------------------+     +--------------+\n
        \        |DAV:baseline-collection +---->|Collection    |\n         +------------------------+
        \    |/repo/bc/15   |\n                                        +--------------+\n
        \  In order to create new baselines of /src, /repo/vcc/128 can be\n   checked
        out, new versions can be created or selected by the version-\n   controlled
        members of /src, and then /repo/vcc/128 can be checked in\n   to capture the
        current state of those version-controlled members.\n"
      title: 12.6.1 Example - BASELINE-CONTROL
    title: 12.6 BASELINE-CONTROL Method
  - contents:
    - "12.7 DAV:compare-baseline Report\n   A DAV:compare-baseline report contains
      the differences between the\n   baseline identified by the request-URL (the
      \"request baseline\") and\n   the baseline specified in the request body (the
      \"compare baseline\").\n   Marshalling:\n      The request body MUST be a DAV:compare-baseline
      XML element.\n      <!ELEMENT compare-baseline (href)>\n      The response body
      for a successful request MUST be a DAV:compare-\n      baseline-report XML element.\n
      \     <!ELEMENT compare-baseline-report\n       (added-version | deleted-version
      | changed-version)*>\n      A DAV:added-version element identifies a version
      that is the\n      DAV:checked-in version of a member of the DAV:baseline-collection\n
      \     of the compare baseline, but no version in the version history of\n      that
      version is the DAV:checked-in version of a member of the\n      DAV:baseline-collection
      of the request baseline.\n      <!ELEMENT added-version (href)>\n      A DAV:deleted-version
      element identifies a version that is the\n      DAV:checked-in version of a
      member of the DAV:baseline-collection\n      of the request baseline, but no
      version in the version history of\n      that version is the DAV:checked-in
      version of a member of the\n      DAV:baseline-collection of the compare baseline.\n
      \     <!ELEMENT deleted-version (href)>\n      A DAV:changed-version element
      identifies two different versions\n      from the same version history that
      are the DAV:checked-in version\n      of the DAV:baseline-collection of the
      request baseline and the\n      compare baseline, respectively.\n      <!ELEMENT
      changed-version (href, href)>\n   Preconditions:\n      (DAV:must-be-baseline):
      The DAV:href in the request body MUST\n      identify a baseline.\n      (DAV:baselines-from-same-history):
      A server MAY require that the\n      baselines being compared be from the same
      baseline history.\n"
    - contents:
      - "12.7.1 Example - DAV:compare-baseline Report\n   >>REQUEST\n     REPORT /bl-his/12/bl/14
        HTTP/1.1\n     Host: repo.webdav.com\n     Content-Type: text/xml; charset=\"utf-8\"\n
        \    Content-Length: xxxx\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n
        \    <D:compare-baseline xmlns:D=\"DAV:\">\n       <D:href>http://repo.webdav.org/bl-his/12/bl/15</D:href>\n
        \    </D:compare-baseline>\n   >>RESPONSE\n     HTTP/1.1 200 OK\n     Content-Type:
        text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n     <?xml version=\"1.0\"
        encoding=\"utf-8\" ?>\n     <D:compare-baseline-report xmlns:D=\"DAV:\">\n
        \      <D:added-version>\n         <D:href>http://repo.webdav.org/his/23/ver/8</D:href>\n
        \      </D:added-version>\n       <D:changed-version>\n         <D:href>http://repo.webdav.org/his/29/ver/12</D:href>\n
        \        <D:href>http://repo.webdav.org/his/29/ver/19</D:href>\n       </D:changed-version>\n
        \      <D:deleted-version>\n         <D:href>http://repo.webdav.org/his/12/ver/4</D:href>\n
        \      </D:deleted-version>\n     </D:compare-baseline-report>\n   In this
        example, the differences between baseline 14 and baseline 15\n   of http://repo.webdav.org/bl-his/12
        are identified.\n"
      title: 12.7.1 Example - DAV:compare-baseline Report
    title: 12.7 DAV:compare-baseline Report
  - contents:
    - "12.8 Additional OPTIONS Semantics\n   If a server supports the baseline feature,
      it MUST include \"baseline\"\n   as a field in the DAV response header from
      an OPTIONS request on any\n   resource that supports any versioning properties,
      reports, or\n   methods.\n"
    title: 12.8 Additional OPTIONS Semantics
  - contents:
    - "12.9 Additional MKCOL Semantics\n   Additional Postconditions:\n      If a
      server automatically puts a newly created collection under\n      baseline control,
      all postconditions for BASELINE-CONTROL apply to\n      the MKCOL.\n"
    title: 12.9 Additional MKCOL Semantics
  - contents:
    - "12.10 Additional COPY Semantics\n   Additional Postconditions:\n      If the
      request creates a new collection at the Destination, and a\n      server automatically
      puts a newly created collection under\n      baseline control, all postconditions
      for BASELINE-CONTROL apply to\n      the COPY.\n"
    title: 12.10 Additional COPY Semantics
  - contents:
    - "12.11 Additional CHECKOUT Semantics\n   Additional Preconditions:\n      (DAV:must-not-update-baseline-collection):
      If the request-URL\n      identifies a member of the configuration rooted at
      the\n      DAV:baseline-collection of a baseline, the request MUST fail.\n"
    title: 12.11 Additional CHECKOUT Semantics
  - contents:
    - "12.12 Additional CHECKIN Semantics\n   Additional Preconditions:\n      (DAV:no-checked-out-baseline-controlled-collection-members):
      If\n      the request-URL identifies a version-controlled configuration, all\n
      \     version-controlled members of the DAV:baseline-controlled-\n      collection
      of the version-controlled configuration MUST be\n      checked-in.\n      (DAV:one-version-per-history-per-baseline):
      If the request-URL\n      identifies a version-controlled configuration, the
      set of versions\n      selected by that version-controlled configuration MUST
      contain at\n      most one version from any version history, where a version
      is\n      selected by a version-controlled configuration if the version is\n
      \     identified by the DAV:checked-in property of any member of the\n      configuration
      rooted at the DAV:baseline-controlled collection of\n      that version-controlled
      configuration, or is identified by the\n      DAV:checked-in property of any
      member of the configuration rooted\n      at the DAV:baseline-collection of
      any subbaseline of that\n      version-controlled configuration.\n      (DAV:cannot-modify-version-controlled-configuration):
      If the\n      request-URL identifies a version-controlled member of a baseline-\n
      \     controlled collection whose version-controlled configuration is\n      checked-in,
      the request MUST fail unless the DAV:auto-version\n      property of the version-controlled
      configuration will\n      automatically check out that version-controlled configuration
      when\n      it is modified.\n   Additional Postconditions:\n      (DAV:create-baseline-collection):
      If the request-URL identifies a\n      version-controlled configuration, the
      DAV:baseline-collection of\n      the new baseline identifies a collection whose
      members have the\n      same relative name and DAV:checked-in version as the
      members of\n      the DAV:baseline-controlled-collection of the version-controlled\n
      \     configuration at the time of the request.\n      (DAV:modify-configuration):
      If the request-URL identifies a\n      version-controlled member of a baseline-controlled
      collection,\n      this is a modification to the version-controlled configuration
      of\n      that baseline-controlled collection, and standard auto-versioning\n
      \     semantics apply.\n"
    title: 12.12 Additional CHECKIN Semantics
  - contents:
    - "12.13 Additional UPDATE Semantics\n   Additional Preconditions:\n      (DAV:baseline-controlled-members-must-be-checked-in):
      If the\n      request-URL identifies a version-controlled configuration, then\n
      \     all version-controlled members of the DAV:baseline-controlled-\n      collection
      of that version-controlled configuration MUST be\n      checked-in.\n      (DAV:must-not-update-baseline-collection):
      If the request-URL\n      identifies a member of the configuration rooted at
      the\n      DAV:baseline-collection of a baseline, the request MUST fail.\n      (DAV:cannot-modify-version-controlled-configuration):
      If the\n      request updates the DAV:checked-in property of any version-\n
      \     controlled member of a baseline-controlled collection whose\n      version-controlled
      configuration is checked-in, the request MUST\n      fail unless the DAV:auto-version
      property of the version-\n      controlled configuration will automatically
      check out that\n      version-controlled configuration when it is modified.\n
      \  Additional Postconditions:\n      (DAV:set-baseline-controlled-collection-members):
      If the request\n      updated the DAV:checked-in property of a version-controlled\n
      \     configuration, then the version-controlled members of the\n      DAV:baseline-controlled-collection
      of that version-controlled\n      configuration MUST have been updated so that
      they have the same\n      relative name, content, and dead properties as the
      members of the\n      DAV:baseline-collection of the baseline.  In particular:\n
      \     -  A version-controlled member for a given version history MUST\n         have
      been deleted if there is no version-controlled member for\n         that version
      history in the DAV:baseline-collection of the\n         baseline.\n      -  A
      version-controlled member for a given version history MUST\n         have been
      renamed if its name relative to the baseline-\n         controlled collection
      is different from that of the version-\n         controlled member for that
      version history in the\n         DAV:baseline-collection of the baseline.\n
      \     -  A new version-controlled member MUST have been created for each\n         member
      of the DAV:baseline-collection of the baseline for which\n         there is
      no corresponding version-controlled member in the\n         baseline-controlled
      collection.\n      -  An UPDATE request MUST have been applied to each version-\n
      \        controlled member for a given version history whose\n         DAV:checked-in
      version is not the same as that of the version-\n         controlled member
      for that version history in the\n         DAV:baseline-collection of the baseline.\n
      \     (DAV:update-subbaselines): If the request updated a version-\n      controlled
      configuration whose DAV:baseline-controlled-collection\n      contains a baseline-controlled
      member for one of the subbaselines\n      of the request baseline, then the
      DAV:checked-in property of the\n      version-controlled configuration of that
      baseline-controlled\n      member MUST have been updated to be that subbaseline.
      \ If the\n      request updated a version-controlled configuration whose\n      DAV:baseline-controlled-collection
      is a member of a workspace that\n      contains a baseline-controlled member
      for one of the subbaselines\n      of the request baseline, then the DAV:checked-in
      property of the\n      version-controlled configuration of that baseline-controlled\n
      \     member MUST have been updated to be that subbaseline.\n      (DAV:modify-configuration):
      If the request updated the\n      DAV:checked-in property of any version-controlled
      member of a\n      baseline-controlled collection, and if this DAV:checked-in\n
      \     property differs from the DAV:checked-in property of the\n      corresponding
      version-controlled member of the DAV:baseline-\n      collection of the DAV:checked-in
      baseline of the DAV:version-\n      controlled-configuration of the baseline-controlled
      collection,\n      then this is a modification to that version-controlled\n
      \     configuration, and standard auto-versioning semantics apply.\n"
    title: 12.13 Additional UPDATE Semantics
  - contents:
    - "12.14 Additional MERGE Semantics\n   If the merge source is a baseline, the
      merge target is a version-\n   controlled configuration for the baseline history
      of that baseline,\n   where the baseline-controlled collection of that version-controlled\n
      \  configuration is a member of the collection identified by the\n   request-URL.\n
      \  Additional Preconditions:\n      (DAV:must-not-update-baseline-collection):
      Same semantics as\n      UPDATE (see Section 12.13).\n      (DAV:cannot-modify-version-controlled-configuration):
      Same\n      semantics as UPDATE (see Section 12.13).\n   Additional Postconditions:\n
      \     (DAV:merge-baseline): If the merge target is a version-controlled\n      configuration
      whose DAV:checked-out baseline is not a descendant\n      of the merge baseline,
      then the merge baseline MUST have been\n      added to the DAV:auto-merge-set
      of a version-controlled\n      configuration.  The DAV:checked-in version of
      each member of the\n      DAV:baseline-collection of that baseline MUST have
      been merged\n      into the DAV:baseline-controlled-collection of that version-\n
      \     controlled configuration.\n      (DAV:merge-subbaselines): If the merge
      target is a version-\n      controlled configuration whose DAV:baseline-controlled-collection\n
      \     contains a baseline-controlled member for one of the subbaselines\n      of
      the merge baseline, then that subbaseline MUST have been merged\n      into
      the version-controlled configuration of that baseline-\n      controlled member.
      \ If the merge target is a version-controlled\n      configuration whose DAV:baseline-controlled-collection
      is a member\n      of a workspace that contains a baseline-controlled member
      for one\n      of the subbaselines of the merge baseline, then that subbaseline\n
      \     MUST have been merged into the version-controlled configuration of\n      that
      baseline-controlled member.\n      (DAV:set-baseline-controlled-collection-members):
      Same semantics\n      as UPDATE (see Section 12.13).\n      (DAV:modify-configuration):
      Same semantics as UPDATE (see Section\n      12.13).\n"
    title: 12.14 Additional MERGE Semantics
  title: 12 Baseline Feature
- contents:
  - "13 Activity Feature\n   An activity is a resource that selects a set of versions
    that are on\n   a single \"line of descent\", where a line of descent is a sequence
    of\n   versions connected by successor relationships.  If an activity\n   selects
    versions from multiple version histories, the versions\n   selected in each version
    history must be on a single line of descent.\n   A common problem that motivates
    the use of activities is that it is\n   often desirable to perform several different
    logical changes in a\n   single workspace, and then selectively merge a subset
    of those\n   logical changes to other workspaces.  An activity can be used to\n
    \  represent a single logical change, where an activity tracks all the\n   resources
    that were modified to effect that single logical change.\n   When a version-controlled
    resource is checked out, the user specifies\n   which activity should be associated
    with a new version that will be\n   created when that version-controlled resource
    is checked in.  It is\n   then possible to select a particular logical change
    for merging into\n   another workspace, by specifying the appropriate activity
    in a MERGE\n   request.\n   Another common problem is that although a version-controlled
    resource\n   may need to have multiple lines of descent, all work done by members\n
    \  of a given team must be on a single line of descent (to avoid merging\n   between
    team members).  An activity resource provides the mechanism\n   for addressing
    this problem.  When a version-controlled resource is\n   checked out, a client
    can request that an existing activity be used\n   or that a new activity be created.
    \ Activity semantics then ensure\n   that all versions in a given version history
    that are associated with\n   an activity are on a single line of descent.  If
    all members of a\n   team share a common activity (or sub-activities of a common\n
    \  activity), then all changes made by members of that team will be on a\n   single
    line of descent.\n   The following diagram illustrates activities.  Version V5
    is the\n   latest version of foo.html selected by activity Act-2, and version
    V8\n   is the latest version of bar.html selected by activity Act-2.\n                  foo.html
    History       bar.html History\n                        +---+                  +---+\n
    \                  Act-1|   |V1           Act-1|   |V6\n                        +---+
    \                 +---+\n                          |                      |\n
    \                         |                      |\n                        +---+
    \                 +---+\n                   Act-1|   |V2           Act-2|   |V7\n
    \                       +---+                  +---+\n                       /
    \    \\                   |\n                      /       \\                  |\n
    \                +---+         +---+           +---+\n            Act-1|   |V3
    \ Act-2|   |V4    Act-2|   |V8\n                 +---+         +---+           +---+\n
    \                                |               |\n                                 |
    \              |\n                               +---+           +---+\n                          Act-2|
    \  |V5    Act-3|   |V9\n                               +---+           +---+\n
    \  Activities appear under a variety of names in existing versioning\n   systems.
    \ When an activity is used to capture a logical change, it is\n   commonly called
    a \"change set\".  When an activity is used to capture\n   a line of descent,
    it is commonly called a \"branch\".  When a system\n   supports both branches
    and change sets, it is often useful to require\n   that a particular change set
    occur on a particular branch.  This\n   relationship can be captured by making
    the change set activity be a\n   \"subactivity\" of the branch activity.\n"
  - contents:
    - "13.1 Activity Properties\n   The DAV:resourcetype of an activity MUST be DAV:activity.\n
      \  The activity feature introduces the following REQUIRED properties for\n   an
      activity.\n"
    - contents:
      - "13.1.1 DAV:activity-version-set (computed)\n   This property identifies each
        version whose DAV:activity-set property\n   identifies this activity.  Multiple
        versions of a single version\n   history can be selected by an activity's
        DAV:activity-version-set\n   property, but all DAV:activity-version-set versions
        from a given\n   version history must be on a single line of descent from
        the root\n   version of that version history.\n   <!ELEMENT activity-version-set
        (href*)>\n"
      title: 13.1.1 DAV:activity-version-set (computed)
    - contents:
      - "13.1.2 DAV:activity-checkout-set (computed)\n   This property identifies
        each checked-out resource whose\n   DAV:activity-set identifies this activity.\n
        \  <!ELEMENT activity-checkout-set (href*)>\n"
      title: 13.1.2 DAV:activity-checkout-set (computed)
    - contents:
      - "13.1.3 DAV:subactivity-set\n   This property identifies each activity that
        forms a part of the\n   logical change being captured by this activity.  An
        activity behaves\n   as if its DAV:activity-version-set is extended by the
        DAV:activity-\n   version-set of each activity identified in the DAV:subactivity-set.\n
        \  In particular, the versions in this extended set MUST be on a single\n
        \  line of descent, and when an activity selects a version for merging,\n
        \  the latest version in this extended set is the one that will be\n   merged.\n
        \  A server MAY reject attempts to modify the DAV:subactivity-set of an\n
        \  activity.\n   <!ELEMENT subactivity-set (href*)>\n"
      title: 13.1.3 DAV:subactivity-set
    - contents:
      - "13.1.4 DAV:current-workspace-set (computed)\n   This property identifies
        each workspace whose DAV:current-activity-\n   set identifies this activity.\n
        \  <!ELEMENT current-workspace-set (href*)>\n"
      title: 13.1.4 DAV:current-workspace-set (computed)
    title: 13.1 Activity Properties
  - contents:
    - "13.2 Additional Version Properties\n   The activity feature introduces the
      following REQUIRED property for a\n   version.\n"
    - contents:
      - "13.2.1 DAV:activity-set\n   This property identifies the activities that
        determine to which\n   logical changes this version contributes, and on which
        lines of\n   descent this version appears.  A server MAY restrict the\n   DAV:activity-set
        to identify a single activity.  A server MAY refuse\n   to allow the value
        of the DAV:activity-set property of a version to\n   be modified.\n   <!ELEMENT
        activity-set (href*)>\n"
      title: 13.2.1 DAV:activity-set
    title: 13.2 Additional Version Properties
  - contents:
    - "13.3 Additional Checked-Out Resource Properties\n   The activity feature introduces
      the following REQUIRED properties for\n   a checked-out resource.\n"
    - contents:
      - "13.3.1 DAV:unreserved\n   This property of a checked-out resource indicates
        whether the\n   DAV:activity-set of another checked-out resource associated
        with the\n   version history of this version-controlled resource can have
        an\n   activity that is in the DAV:activity-set property of this checked-out\n
        \  resource.\n   A result of the requirement that an activity must form a
        single line\n   of descent through a given version history is that if multiple\n
        \  checked-out resources for a given version history are checked out\n   unreserved
        into a single activity, only the first CHECKIN will\n   succeed.  Before another
        of these checked-out resources can be\n   checked in, the user will first
        have to merge into that checked-out\n   resource the latest version selected
        by that activity from that\n   version history, and then modify the DAV:predecessor-set
        of that\n   checked-out resource to identify that version.\n   <!ELEMENT unreserved
        (#PCDATA)>\n   PCDATA value: boolean\n"
      title: 13.3.1 DAV:unreserved
    - contents:
      - "13.3.2 DAV:activity-set\n   This property of a checked-out resource determines
        the DAV:activity-\n   set property of the version that results from checking
        in this\n   resource.\n"
      title: 13.3.2 DAV:activity-set
    title: 13.3 Additional Checked-Out Resource Properties
  - contents:
    - "13.4 Additional Workspace Properties\n   The activity feature introduces the
      following REQUIRED property for a\n   workspace.\n"
    - contents:
      - "13.4.1 DAV:current-activity-set\n   This property identifies the activities
        that currently are being\n   performed in this workspace.  When a member of
        this workspace is\n   checked out, if no activity is specified in the checkout
        request, the\n   DAV:current-activity-set will be used.  This allows an activity-\n
        \  unaware client to update a workspace in which activity tracking is\n   required.
        \ The DAV:current-activity-set MAY be restricted to identify\n   at most one
        activity.\n   <!ELEMENT current-activity-set (href*)>\n"
      title: 13.4.1 DAV:current-activity-set
    title: 13.4 Additional Workspace Properties
  - contents:
    - "13.5 MKACTIVITY Method\n   A MKACTIVITY request creates a new activity resource.
      \ A server MAY\n   restrict activity creation to particular collections, but
      a client\n   can determine the location of these collections from a DAV:activity-\n
      \  collection-set OPTIONS request.\n   Marshalling:\n      If a request body
      is included, it MUST be a DAV:mkactivity XML\n      element.\n      <!ELEMENT
      mkactivity ANY>\n      If a response body for a successful request is included,
      it MUST\n      be a DAV:mkactivity-response XML element.\n      <!ELEMENT mkactivity-response
      ANY>\n      The response MUST include a Cache-Control:no-cache header.\n   Preconditions:\n
      \     (DAV:resource-must-be-null): A resource MUST NOT exist at the\n      request-URL.\n
      \     (DAV:activity-location-ok): The request-URL MUST identify a\n      location
      where an activity can be created.\n   Postconditions:\n      (DAV:initialize-activity):
      A new activity exists at the request-\n      URL.  The DAV:resourcetype of the
      activity MUST be DAV:activity.\n"
    - contents:
      - "13.5.1 Example - MKACTIVITY\n   >>REQUEST\n     MKACTIVITY /act/test-23 HTTP/1.1\n
        \    Host: repo.webdav.org\n     Content-Length: 0\n   >>RESPONSE\n     HTTP/1.1
        201 Created\n     Cache-Control: no-cache\n   In this example, a new activity
        is created at\n   http://repo.webdav.org/act/test-23.\n"
      title: 13.5.1 Example - MKACTIVITY
    title: 13.5 MKACTIVITY Method
  - contents:
    - "13.6 DAV:latest-activity-version Report\n   The DAV:latest-activity-version
      report can be applied to a version\n   history to identify the latest version
      that is selected from that\n   version history by a given activity.\n   Marshalling:\n
      \     The request body MUST be a DAV:latest-activity-version XML\n      element.\n
      \     <!ELEMENT latest-activity-version (href)>\n      The response body for
      a successful request MUST be a DAV:latest-\n      activity-version-report XML
      element.\n      <!ELEMENT latest-activity-version-report (href)>\n      The
      DAV:href of the response body MUST identify the version of the\n      given
      version history that is a member of the DAV:activity-\n      version-set of
      the given activity and has no descendant that is a\n      member of the DAV:activity-version-set
      of that activity.\n   Preconditions:\n      (DAV:must-be-activity): The DAV:href
      in the request body MUST\n      identify an activity.\n"
    title: 13.6 DAV:latest-activity-version Report
  - contents:
    - "13.7 Additional OPTIONS Semantics\n   If the server supports the activity feature,
      it MUST include\n   \"activity\" as a field in the DAV response header from
      an OPTIONS\n   request on any resource that supports any versioning properties,\n
      \  reports, or methods.\n   A DAV:activity-collection-set element MAY be included
      in the request\n   body to identify collections that may contain activity resources.\n
      \  Additional Marshalling:\n      If an XML request body is included, it MUST
      be a DAV:options XML\n      element.\n      <!ELEMENT options ANY>\n      ANY
      value: A sequence of elements with at most one\n      DAV:activity-collection-set
      element.\n      If an XML response body for a successful request is included,
      it\n      MUST be a DAV:options-response XML element.\n      <!ELEMENT options-response
      ANY>\n      ANY value: A sequence of elements with at most one\n      DAV:activity-collection-set
      element.\n      <!ELEMENT activity-collection-set (href*)>\n      If DAV:activity-collection-set
      is included in the request body,\n      the response body for a successful request
      MUST contain a\n      DAV:activity-collection-set element identifying collections
      that\n      may contain activities.  An identified collection MAY be the root\n
      \     collection of a tree of collections, all of which may contain\n      activities.
      \ Since different servers can control different parts\n      of the URL namespace,
      different resources on the same host MAY\n      have different DAV:activity-collection-set
      values.  The identified\n      collections MAY be located on different hosts
      from the resource.\n"
    title: 13.7 Additional OPTIONS Semantics
  - contents:
    - "13.8 Additional DELETE Semantics\n   Additional Postconditions:\n      (DAV:delete-activity-reference):
      If an activity is deleted, any\n      reference to that activity in a DAV:activity-set,\n
      \     DAV:subactivity-set, or DAV:current-activity-set MUST be removed.\n"
    title: 13.8 Additional DELETE Semantics
  - contents:
    - "13.9 Additional MOVE Semantics\n   Additional Postconditions:\n      (DAV:update-checked-out-reference):
      If a checked-out resource is\n      moved, any reference to that resource in
      a DAV:activity-checkout-\n      set property MUST be updated to refer to the
      new location of that\n      resource.\n      (DAV:update-activity-reference):
      If the request-URL identifies an\n      activity, any reference to that activity
      in a DAV:activity-set,\n      DAV:subactivity-set, or DAV:current-activity-set
      MUST be updated\n      to refer to the new location of that activity.\n      (DAV:update-workspace-reference):
      If the request-URL identifies a\n      workspace, any reference to that workspace
      in a DAV:current-\n      workspace-set property MUST be updated to refer to
      the new\n      location of that workspace.\n"
    title: 13.9 Additional MOVE Semantics
  - contents:
    - "13.10 Additional CHECKOUT Semantics\n   A CHECKOUT request MAY specify the
      DAV:activity-set for the checked-\n   out resource.\n   Additional Marshalling:\n
      \     <!ELEMENT checkout ANY> ANY value: A sequence of elements with at\n      most
      one DAV:activity-set and at most one DAV:unreserved.\n      <!ELEMENT activity-set
      (href+ | new)>\n      <!ELEMENT new EMPTY>\n      <!ELEMENT unreserved EMPTY>\n
      \  Additional Preconditions:\n      (DAV:one-checkout-per-activity-per-history):
      If there is a request\n      activity set, unless DAV:unreserved is specified,
      another checkout\n      from a version of that version history MUST NOT select
      an activity\n      in that activity set.\n      (DAV:linear-activity): If there
      is a request activity set, unless\n      DAV:unreserved is specified, the selected
      version MUST be a\n      descendant of all other versions of that version history
      that\n      select that activity.\n   Additional Postconditions:\n      (DAV:initialize-activity-set):
      The DAV:activity-set of the\n      checked-out resource is set as follows:\n
      \     -  If DAV:new is specified as the DAV:activity-set in the request\n         body,
      then a new activity created by the server is used.\n      -  Otherwise, if activities
      are specified in the request body,\n         then those activities are used.\n
      \     -  Otherwise, if the version-controlled resource is a member of a\n         workspace
      and the DAV:current-activity-set of the workspace is\n         set, then those
      activities are used.\n      -  Otherwise, the DAV:activity-set of the DAV:checked-out
      version\n         is used.\n      (DAV:initialize-unreserved): If DAV:unreserved
      was specified in\n      the request body, then the DAV:unreserved property of
      the\n      checked-out resource MUST be \"true\".\n"
    - contents:
      - "13.10.1 Example - CHECKOUT with an activity\n   >>REQUEST\n     CHECKOUT
        /ws/public/foo.html HTTP/1.1\n     Host: www.webdav.org\n     Content-Type:
        text/xml; charset=\"utf-8\"\n     Content-Length: xxxx\n     <?xml version=\"1.0\"
        encoding=\"utf-8\" ?>\n     <D:checkout xmlns:D=\"DAV:\">\n       <D:activity-set>\n
        \        <D:href>http://repo.webdav.org/act/fix-bug-23</D:href>\n       </D:activity-set>\n
        \    </D:checkout>\n   >>RESPONSE\n     HTTP/1.1 200 OK\n     Cache-Control:
        no-cache\n   In this example, the CHECKOUT is being performed in the\n   http://repo.webdav.org/act/fix-bug-23
        activity.\n"
      title: 13.10.1 Example - CHECKOUT with an activity
    title: 13.10 Additional CHECKOUT Semantics
  - contents:
    - "13.11 Additional CHECKIN Semantics\n   Additional Preconditions:\n      (DAV:linear-activity):
      Any version which is in the version history\n      of the checked-out resource
      and whose DAV:activity-set identifies\n      an activity from the DAV:activity-set
      of the checked-out resource\n      MUST be an ancestor of the checked-out resource.\n
      \     (DAV:atomic-activity-checkin): If the request-URL identifies an\n      activity,
      the server MAY fail the request if any of the checked-\n      out resources
      in the DAV:activity-checkout-set of either that\n      activity or any subactivity
      of that activity cannot be checked in.\n   Additional Postconditions:\n      (DAV:initialize-activity-set):
      The DAV:activity-set of the new\n      version MUST have been initialized to
      be the same as the\n      DAV:activity-set of the checked-out resource.\n      (DAV:activity-checkin):
      If the request-URL identified an activity,\n      the server MUST have successfully
      applied the CHECKIN request to\n      each checked-out resource in the DAV:activity-checkout-set
      of both\n      that activity and any subactivity of that activity.\n"
    title: 13.11 Additional CHECKIN Semantics
  - contents:
    - "13.12 Additional MERGE Semantics\n   If the DAV:source element of the request
      body identifies an activity,\n   then for each version history containing a
      version selected by that\n   activity, the latest version selected by that activity
      is a merge\n   source.  Note that the versions selected by an activity are the\n
      \  versions in its DAV:activity-version-set unioned with the versions\n   selected
      by the activities in its DAV:subactivity-set.\n   Additional Marshalling:\n
      \     <!ELEMENT checkin-activity EMPTY>\n   Additional Postconditions:\n      (DAV:checkin-activity):
      If DAV:checkin-activity is specified in\n      the request body, and if the
      DAV:source element in the request\n      body identifies an activity, a CHECKIN
      request MUST have been\n      successfully applied to that activity before the
      merge sources\n      were determined.\n"
    title: 13.12 Additional MERGE Semantics
  title: 13 Activity Feature
- contents:
  - "14 Version-Controlled-Collection Feature\n   As with any versionable resource,
    when a collection is put under\n   version control, a version history resource
    is created to contain\n   versions for that version-controlled collection.  In
    order to\n   preserve standard versioning semantics (a version of a collection\n
    \  should not be modifiable), a collection version only records\n   information
    about the version-controlled bindings of that collection.\n   In order to cleanly
    separate a modification to the namespace from a\n   modification to content or
    dead properties, a version of a collection\n   has no members, but instead records
    in its DAV:version-controlled-\n   binding-set property the binding name and version
    history resource of\n   each version-controlled internal member of that collection.
    \ If,\n   instead, a collection version contained bindings to other versions,\n
    \  creating a new version of a resource would require creating a new\n   version
    of all the collection versions that contain that resource,\n   which would cause
    activities to become entangled.  For example,\n   suppose a \"feature-12\" activity
    created a new version of /x/y/a.html.\n   If a collection version contained bindings
    to versions of its\n   members, a new version of /x/y would have to be created
    to contain\n   the new version of /x/y/a.html, and a new version of /x would have
    to\n   be created to contain the new version of /x/y.  Now suppose a\n   \"bugfix-47\"
    activity created a new version of /x/z/b.html.  Again, a\n   new version of /x/z
    and a new version of /x would have to be created\n   to contain the new version
    of /x/y/b.html.  But now it is impossible\n   to merge just \"bugfix-47\" into
    another workspace without \"feature-\n   12\", because the version of /x that
    contains the desired version of\n   /x/z/b.html also contains version of /x/y/a.html
    created for\n   \"feature-12\".  If, instead, a collection version just records
    the\n   binding name and version history resource of each version-controlled\n
    \  internal member, changing the version selected by a member of that\n   collection
    would not require a new version of the collection.  The\n   new version is still
    in the same version history so no new collection\n   version is required, and
    \"feature-12\" and \"bugfix-47\" would not\n   become entangled.\n   In the following
    example, there are three version histories, named\n   VH14, VH19, and VH24, where
    VH14 contains versions of a collection.\n   The version-controlled collection
    /x has version V2 of version\n   history VH14 as its DAV:checked-in version.  Since
    V2 has recorded\n   two version controlled bindings, one with binding name \"a\"
    to version\n   history VH19, and the other with binding name \"b\" to version
    history\n   VH24, /x MUST have two version-controlled bindings, one named \"a\"
    to\n   a version-controlled resource for history VH19, and the other named\n   \"b\"
    to a version-controlled resource for history VH24.  The version-\n   controlled
    resource /x/a currently has V4 of VH19 as its\n   DAV:checked-in version, while
    /x/b has V8 of VH24 as its\n   DAV:checked-in version.\n                                                          VH19\n
    \                                                      +---------+\n                                                       |
    +---+   |\n                                                       | |   |V4 |\n
    \                                                      | +---+   |\n                                                       |
    \  |     |\n                                                       |   |     |\n
    \                                                      | +---+   |\n                                                       |
    |   |V5 |\n                                            VH14       | +---+   |\n
    \                                       +---------+    |   |     |\n                                        |
    +---+   |    |   |     |\n               a  +---+                 | |   |V1 |
    \   | +---+   |\n             ---->|   |checked-in=V4    | +---+   | a  | |   |V6
    |\n            /     +---+                 |   |   ------>| +---+   |\n           /
    \                           |   |  /  |    +---------+\n      +---+                             |
    +---+   |\n   /x |   |checked-in=V2                | |   |V2 |\n      +---+                             |
    +---+   |       VH24\n           \\                            |   |  \\  | b
    \ +---------+\n            \\  b  +---+                 |   |   ------>| +---+
    \  |\n             ---->|   |checked-in=V8    | +---+   |    | |   |V7 |\n                  +---+
    \                | |   |V3 |    | +---+   |\n                                        |
    +---+   |    |   |     |\n                                        +---------+
    \   |   |     |\n                                                       | +---+
    \  |\n                                                       | |   |V8 |\n                                                       |
    +---+   |\n                                                       |   |     |\n
    \                                                      |   |     |\n                                                       |
    +---+   |\n                                                       | |   |V9 |\n
    \                                                      | +---+   |\n                                                       +---------+\n
    \  For any request (e.g., DELETE, MOVE, COPY) that modifies a version-\n   controlled
    binding of a checked-in version-controlled collection, the\n   request MUST fail
    unless the version-controlled collection has a\n   DAV:auto-version property that
    will automatically check out the\n   version-controlled collection when it is
    modified.\n   Although a collection version only records the version-controlled\n
    \  bindings of a collection, a version-controlled collection MAY contain\n   both
    version-controlled and non-version-controlled bindings.  Non-\n   version-controlled
    bindings are not under version control, and\n   therefore can be added or deleted
    without checking out the version-\n   controlled collection.\n   Note that a collection
    version captures only a defined subset of the\n   state of a collection.  In particular,
    a version of a collection\n   captures its dead properties and its bindings to
    version-controlled\n   resources, but not its live properties or bindings to non-version-\n
    \  controlled resources.\n   When a server supports the working-resource feature,
    a client can\n   check out a collection version to create a working collection.\n
    \  Unlike a version-controlled collection, which contains bindings to\n   version-controlled
    resources and non-version-controlled resources, a\n   working collection contains
    bindings to version history resources and\n   non-version-controlled resources.
    \ In particular, a working\n   collection is initialized to contain bindings to
    the version history\n   resources specified by the DAV:version-controlled-binding-set
    of the\n   checked out collection version.  The members of a working collection\n
    \  can then be deleted or moved to another working collection.  Non-\n   version-controlled
    resources can be added to a working collection\n   with methods such as PUT, COPY,
    and MKCOL.  When a working collection\n   is checked in, a VERSION-CONTROL request
    is automatically applied to\n   every non-version-controlled member of the working
    collection, and\n   each non-version-controlled member is replaced by its newly
    created\n   version history.  The DAV:version-controlled-binding-set of the new\n
    \  version resulting from checking in a working collection contains the\n   binding
    name and version history URL for each member of the working\n   collection.\n"
  - contents:
    - "14.1 Version-Controlled Collection Properties\n   A version-controlled collection
      has all the properties of a\n   collection and of a version-controlled resource.
      \ In addition, the\n   version-controlled-collection feature introduces the
      following\n   REQUIRED property for a version-controlled collection.\n"
    - contents:
      - "14.1.1 DAV:eclipsed-set (computed)\n   This property identifies the non-version-controlled
        internal members\n   of the collection that currently are eclipsing a version-controlled\n
        \  internal member of the collection.\n   !ELEMENT eclipsed-set (binding-name*)>\n
        \  <!ELEMENT binding-name (#PCDATA)>\n   PCDATA value: URL segment\n   An
        UPDATE or MERGE request can give a version-controlled collection a\n   version-controlled
        internal member that has the same name as an\n   existing non-version-controlled
        internal member.  In this case, the\n   non-version-controlled internal member
        takes precedence and is said\n   to \"eclipse\" the new versioned-controlled
        internal member.  If the\n   non-version-controlled internal member is removed
        (e.g., by a DELETE\n   or MOVE), the version-controlled internal member is
        exposed.\n"
      title: 14.1.1 DAV:eclipsed-set (computed)
    title: 14.1 Version-Controlled Collection Properties
  - contents:
    - "14.2 Collection Version Properties\n   A collection version has all the properties
      of a version.  In\n   addition, the version-controlled-collection feature introduces
      the\n   following REQUIRED property for a collection version.\n"
    - contents:
      - "14.2.1 DAV:version-controlled-binding-set (protected)\n   This property captures
        the name and version-history of each version-\n   controlled internal member
        of a collection.\n   <!ELEMENT version-controlled-binding-set\n    (version-controlled-binding*)>\n
        \  <!ELEMENT version-controlled-binding\n    (binding-name, version-history)>\n
        \  <!ELEMENT binding-name (#PCDATA)>\n   PCDATA value: URL segment\n   <!ELEMENT
        version-history (href)>\n"
      title: 14.2.1 DAV:version-controlled-binding-set (protected)
    title: 14.2 Collection Version Properties
  - contents:
    - "14.3 Additional OPTIONS Semantics\n   If the server supports the version-controlled-collection
      feature, it\n   MUST include \"version-controlled-collection\" as a field in
      the DAV\n   response header from an OPTIONS request on any resource that supports\n
      \  any versioning properties, reports, or methods.\n"
    title: 14.3 Additional OPTIONS Semantics
  - contents:
    - "14.4 Additional DELETE Semantics\n   Additional Preconditions:\n      (DAV:cannot-modify-checked-in-parent):
      If the request-URL\n      identifies a version-controlled resource, the DELETE
      MUST fail\n      when the collection containing the version-controlled resource
      is\n      a checked-in version-controlled collection, unless DAV:auto-\n      version
      semantics will automatically check out the version-\n      controlled collection.\n"
    title: 14.4 Additional DELETE Semantics
  - contents:
    - "14.5 Additional MKCOL Semantics\n   Additional Preconditions:\n      If the
      request creates a new resource that is automatically placed\n      under version
      control, all preconditions for VERSION-CONTROL apply\n      to the request.\n
      \  Additional Postconditions:\n      If the new collection is automatically
      put under version control,\n      all postconditions for VERSION-CONTROL apply
      to the request.\n"
    title: 14.5 Additional MKCOL Semantics
  - contents:
    - "14.6 Additional COPY Semantics\n   Additional Preconditions:\n      (DAV:cannot-copy-collection-version):
      If the source of the request\n      is a collection version, the request MUST
      fail.\n"
    title: 14.6 Additional COPY Semantics
  - contents:
    - "14.7 Additional MOVE Semantics\n   Additional Preconditions:\n      (DAV:cannot-modify-checked-in-parent):
      If the source of the\n      request is a version-controlled resource, the request
      MUST fail\n      when the collection containing the source is a checked-in\n
      \     version-controlled collection, unless DAV:auto-version semantics\n      will
      automatically check out that version-controlled collection.\n      (DAV:cannot-modify-destination-checked-in-parent):
      If the source\n      of the request is a version-controlled resource, the request
      MUST\n      fail when the collection containing the destination is a checked-\n
      \     in version-controlled collection, unless DAV:auto-version\n      semantics
      will automatically check out that version-controlled\n      collection.\n"
    title: 14.7 Additional MOVE Semantics
  - contents:
    - "14.8 Additional VERSION-CONTROL Semantics\n   Additional Preconditions:\n      (DAV:cannot-modify-checked-in-parent):
      If the parent of the\n      request-URL is a checked-in version-controlled collection,
      the\n      request MUST fail unless DAV:auto-version semantics will\n      automatically
      check out that version-controlled collection.\n   Additional Postconditions:\n
      \     (DAV:new-version-controlled-collection): If the request body\n      identified
      a collection version, the collection at the request-URL\n      MUST contain
      a version-controlled internal member for each\n      DAV:version-controlled-binding
      specified in the DAV:version-\n      controlled-binding-set of the collection
      version, where the name\n      and DAV:version-history of the internal member
      MUST be the\n      DAV:binding-name and the DAV:version-history specified by
      the\n      DAV:version-controlled-binding.  If the internal member is a\n      member
      of a workspace, and there is another member of the\n      workspace for the
      same version history, those two members MUST\n      identify the same version-controlled
      resource; otherwise, a\n      VERSION-CONTROL request with a server selected
      version of the\n      version history MUST have been applied to the URL for
      that\n      internal member.\n"
    title: 14.8 Additional VERSION-CONTROL Semantics
  - contents:
    - "14.9 Additional CHECKOUT Semantics\n   Additional Postconditions:\n      (DAV:initialize-version-history-bindings):
      If the request has been\n      applied to a collection version, the new working
      collection MUST\n      be initialized to contain a binding to each of the history\n
      \     resources identified in the DAV:version-controlled-binding-set of\n      that
      collection version.\n"
    title: 14.9 Additional CHECKOUT Semantics
  - contents:
    - "14.10 Additional CHECKIN Semantics\n   Additional Postconditions:\n      (DAV:initialize-version-controlled-bindings):
      If the request-URL\n      identified a version-controlled collection, then the
      DAV:version-\n      controlled-binding-set of the new collection version MUST
      contain\n      a DAV:version-controlled-binding that identifies the binding
      name\n      and version history for each version-controlled binding of the\n
      \     version- controlled collection.\n      (DAV:version-control-working-collection-members):
      If the request-\n      URL identified a working collection, a VERSION-CONTROL
      request\n      MUST have been automatically applied to every non-version-\n
      \     controlled member of the working collection, and each non-\n      version-controlled
      member MUST have been replaced by its newly\n      created version history.
      \ If a working collection member was a\n      non-version-controlled collection,
      every member of the non-\n      version-controlled collection MUST have been
      placed under version\n      control before the non-version-controlled collection
      was placed\n      under version control.  The DAV:version-controlled-binding-set
      of\n      the new collection version MUST contain a DAV:version-controlled-\n
      \     binding that identifies the binding name and the version history\n      URL
      for each member of the working collection.\n"
    title: 14.10 Additional CHECKIN Semantics
  - contents:
    - "14.11 Additional UPDATE and MERGE Semantics\n   Additional Postconditions:\n
      \     (DAV:update-version-controlled-collection-members): If the request\n      modified
      the DAV:checked-in version of a version-controlled\n      collection, then the
      version-controlled members of that version-\n      controlled collection MUST
      have been updated.  In particular:\n      -  A version-controlled internal member
      MUST have been deleted if\n         its version history is not identified by
      the DAV:version-\n         controlled-binding-set of the new DAV:checked-in
      version.\n      -  A version-controlled internal member for a given version\n
      \        history MUST have been renamed if its binding name differs from\n         the
      DAV:binding-name for that version history in the\n         DAV:version-controlled-binding-set
      of the new DAV:checked-in\n         version.\n      -  A new version-controlled
      internal member MUST have been created\n         when a version history is identified
      by the DAV:version-\n         controlled-binding-set of the DAV:checked-in version,
      but there\n         was no member of the version-controlled collection for that\n
      \        version history.  If a new version-controlled member is in a\n         workspace
      that already has a version-controlled resource for\n         that version history,
      then the new version-controlled member\n         MUST be just a binding (i.e.,
      another name for) that existing\n         version-controlled resource.  Otherwise,
      the content and dead\n         properties of the new version-controlled member
      MUST have been\n         initialized to be those of the version specified for
      that\n         version history by the request.  If no version is specified for\n
      \        that version history by the request, the version selected is\n         server
      defined.\n"
    title: 14.11 Additional UPDATE and MERGE Semantics
  title: 14 Version-Controlled-Collection Feature
- contents:
  - "15 Internationalization Considerations\n   This specification has been designed
    to be compliant with the IETF\n   Policy on Character Sets and Languages [RFC2277].
    \ Specifically,\n   where human-readable strings exist in the protocol, either
    their\n   charset is explicitly stated, or XML mechanisms are used to specify\n
    \  the charset used.  Additionally, these human-readable strings all\n   have
    the ability to express the natural language of the string.\n   Most of the human-readable
    strings in this protocol appear in\n   properties, such as DAV:creator-displayname.
    \ As defined by RFC 2518,\n   properties have their values marshaled as XML.  XML
    has explicit\n   provisions for character set tagging and encoding, and requires
    that\n   XML processors read XML elements encoded, at minimum, using the UTF-8\n
    \  [RFC2279] encoding of the ISO 10646 multilingual plane.  The charset\n   parameter
    of the Content-Type header, together with the XML\n   \"encoding\" attribute,
    provide charset identification information for\n   MIME and XML processors.  Proper
    use of the charset header with XML\n   is described in RFC 3023.  XML also provides
    a language tagging\n   capability for specifying the language of the contents
    of a\n   particular XML element.  XML uses either IANA registered language\n   tags
    (see RFC 3066) or ISO 639 language tags in the \"xml:lang\"\n   attribute of an
    XML element to identify the language of its content\n   and attributes.\n   DeltaV
    applications, since they build upon WebDAV, are subject to the\n   internationalization
    requirements specified in RFC 2518, Section 16.\n   In brief, these requirements
    mandate the use of XML character set\n   tagging, character set encoding, and
    language tagging capabilities.\n   Additionally, they strongly recommend reading
    RFC 3023 for\n   instruction on the use of MIME media types for XML transport
    and the\n   use of the charset header.\n   Within this specification, a label
    is a human-readable string that is\n   marshaled in the Label header and as XML
    in request entity bodies.\n   When used in the Label header, the value of the
    label is URL-escaped\n   and encoded using UTF-8.\n"
  title: 15 Internationalization Considerations
- contents:
  - "16 Security Considerations\n   All of the security considerations of WebDAV discussed
    in RFC 2518,\n   Section 17 also apply to WebDAV versioning.  Some aspects of
    the\n   versioning protocol help address security risks introduced by WebDAV,\n
    \  but other aspects can increase these security risks.  These issues\n   are
    detailed below.\n"
  - contents:
    - "16.1 Auditing and Traceability\n   WebDAV increases the ease with which a remote
      client can modify\n   resources on a web site, but this also increases the risk
      of\n   important information being overwritten and lost, either through user\n
      \  error or user maliciousness.  The use of WebDAV versioning can help\n   address
      this problem by guaranteeing that previous information is\n   saved in the form
      of immutable versions, and therefore is easily\n   available for retrieval or
      restoration.  In addition, the version\n   history provides a log of when changes
      were made, and by whom.  When\n   requests are appropriately authenticated,
      the history mechanism\n   provides a clear audit trail for changes to web resources.
      \ This can\n   often significantly improve the ability to identify the source
      of the\n   security problem, and thereby help guard against it in the future.\n"
    title: 16.1 Auditing and Traceability
  - contents:
    - "16.2 Increased Need for Access Control\n   WebDAV versioning provides a variety
      of links between related pieces\n   of information.  This can increase the risk
      that authentication or\n   authorization errors allow a client to locate sensitive
      information.\n   For example, if version history is not appropriately protected
      by\n   access control, a client can use the version history of a public\n   resource
      to identify later versions of that resource that the user\n   intended to keep
      private.  This increases the need for reliable\n   authentication and accurate
      authorization.\n   A WebDAV versioning client should be designed to handle a
      mixture of\n   200 (OK) and 403 (Forbidden) responses on attempts to access
      the\n   properties and reports that are supported by a resource.  For\n   example,
      a particular user may be authorized to access the content\n   and dead properties
      of a version-controlled resource, but not be\n   authorized to access the DAV:checked-in,
      DAV:checked-out, or\n   DAV:version-history properties of that resource.\n"
    title: 16.2 Increased Need for Access Control
  - contents:
    - "16.3 Security Through Obscurity\n   While it is acknowledged that \"obscurity\"
      is not an effective means\n   of security, it is often a good technique to keep
      honest people\n   honest.  Within this protocol, version URLs, version history
      URLs,\n   and working resource URLs are generated by the server and can be\n
      \  properly obfuscated so as not to draw attention to them.  For\n   example,
      a version of \"http://foobar.com/reviews/salaries.html\" might\n   be assigned
      a URL such as \"http://foobar.com/repo/4934943\".\n"
    title: 16.3 Security Through Obscurity
  - contents:
    - "16.4 Denial of Service\n   The auto-versioning mechanism provided by WebDAV
      can result in a\n   large number of resources being created on the server, since
      each\n   update to a resource could potentially result in the creation of a\n
      \  new version resource.  This increases the risk of a denial of service\n   attack
      that exhausts the storage capability of a server.  This risk\n   is especially
      significant because it can be an unintentional result\n   of something like
      an aggressive auto-save feature provided by an\n   editing client.  A server
      can decrease this risk by using delta\n   storage techniques to minimize the
      cost of additional versions, and\n   by limiting auto-versioning to a locking
      client, and thereby\n   decreasing the number of inadvertent version creations.\n"
    title: 16.4 Denial of Service
  title: 16 Security Considerations
- contents:
  - "17 IANA Considerations\n   This document uses the namespace defined by RFC 2518
    for XML\n   elements.  All other IANA considerations from RFC 2518 are also\n
    \  applicable to WebDAV Versioning.\n"
  title: 17 IANA Considerations
- contents:
  - "18 Intellectual Property\n   The following notice is copied from RFC 2026, Section
    10.4, and\n   describes the position of the IETF concerning intellectual property\n
    \  claims made against this document.\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use other technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   procedures of the
    IETF with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementers or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights that may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 18 Intellectual Property
- contents:
  - "19 Acknowledgements\n   This protocol is the collaborative product of the authors
    and the\n   rest of the DeltaV design team: Boris Bokowski, Bruce Cragun\n   (Novell),
    Jim Doubek (Macromedia), David Durand (INSO), Lisa\n   Dusseault (Xythos), Chuck
    Fay (FileNet), Yaron Goland, Mark Hale\n   (Interwoven), Henry Harbury (Merant),
    James Hunt, Jeff McAffer (OTI),\n   Peter Raymond (Merant), Juergen Reuter, Edgar
    Schwarz (Marconi), Eric\n   Sedlar (Oracle), Bradley Sergeant, Greg Stein, and
    John Vasta\n   (Rational).  We would like to acknowledge the foundation laid for
    us\n   by the authors of the WebDAV and HTTP protocols upon which this\n   protocol
    is layered, and the invaluable feedback from the WebDAV and\n   DeltaV working
    groups.\n"
  title: 19 Acknowledgements
- contents:
  - "20 References\n   [ISO639]  ISO, \"Code for the representation of names of languages\",\n
    \            ISO 639:1988, 1998.\n   [RFC2026] Bradner, S., \"The Internet Standards
    Process -- Revision\n             3\", BCP 9, RFC 2026, October 1996.\n   [RFC2119]
    Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2277] Alvestrand, H., \"IETF Policy
    on Character Sets and\n             Languages\", BCP 18, RFC 2277, January 1998.\n
    \  [RFC2279] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",\n             RFC
    2279, January 1998.\n   [RFC2396] Berners-Lee, T., Fielding, R. and L. Masinter,
    \"Uniform\n             Resource Identifiers (URI): Generic Syntax\", RFC 2396,\n
    \            August 1998.\n   [RFC2518] Goland, Y., Whitehead, E., Faizi, A.,
    Carter, S. and D.\n             Jensen, \"HTTP Extensions for Distributed Authoring
    -\n             WEBDAV\", RFC 2518, February 1999.\n   [RFC2616] Fielding, R.,
    Gettys, J., Mogul, J., Frystyk, H., Masinter,\n             L., Leach, P. and
    T.Berners-Lee, \"Hypertext Transfer\n             Protocol -- HTTP/1.1\", RFC
    2616, June 1999.\n   [RFC3023] Murata, M., St.Laurent, S. and D. Kohn, \"XML Media
    Types\",\n             RFC 3023, January 2001.\n   [RFC3066] Alvestrand, H., \"Tags
    for the Identification of Languages\",\n             BCP 47, RFC 3066, January
    2001.\n"
  title: 20 References
- contents:
  - "Appendix A - Resource Classification\n   This document introduces several different
    kinds of versioning\n   resources, such as version-controlled resources, versions,
    checked-\n   out resources, and version history resources.  As clients discover\n
    \  resources on a server, they may find it useful to classify those\n   resources
    (for example, to make UI decisions on choice of icon and\n   menu options).\n
    \  Clients should classify a resource by examining the values of the\n   DAV:supported-method-set
    (see Section 3.1.3) and DAV:supported-live-\n   property-set (see Section 3.1.4)
    properties of that resource.\n   The following list shows the supported live properties
    and methods\n   for each kind of versioning resource.  Where an optional feature\n
    \  introduces a new kind of versioning resource, that feature is noted\n   in
    parentheses following the name of that kind of versioning\n   resource.  If a
    live property or method is optional for a kind of\n   versioning resource, the
    feature that introduces that live property\n   or method is noted in parentheses
    following the live property or\n   method name.\n"
  - contents:
    - "A.1 DeltaV-Compliant Unmapped URL (a URL that identifies no resource)\n   Supported
      methods:\n   -  PUT [RFC2616]\n   -  MKCOL [RFC2518]\n   -  MKACTIVITY (activity)\n
      \  -  VERSION-CONTROL (workspace)\n   -  MKWORKSPACE (workspace)\n"
    title: A.1 DeltaV-Compliant Unmapped URL (a URL that identifies no resource)
  - contents:
    - "A.2 DeltaV-Compliant Resource\n   Supported live properties:\n   -  DAV:comment\n
      \  -  DAV:creator-displayname\n   -  DAV:supported-method-set\n   -  DAV:supported-live-property-set\n
      \  -  DAV:supported-report-set\n   -  all properties defined in WebDAV [RFC2518].\n
      \  Supported methods:\n   -  REPORT\n   -  all methods defined in WebDAV [RFC2518]\n
      \  -  all methods defined in HTTP/1.1 [RFC2616].\n"
    title: A.2 DeltaV-Compliant Resource
  - contents:
    - "A.3 DeltaV-Compliant Collection\n   Supported live properties:\n   -  all DeltaV-compliant
      resource properties.\n   Supported methods:\n   -  BASELINE-CONTROL (baseline)\n
      \  -  all DeltaV-compliant resource methods.\n"
    title: A.3 DeltaV-Compliant Collection
  - contents:
    - "A.4 Versionable Resource\n   Supported live properties:\n   -  DAV:workspace
      (workspace)\n   -  DAV:version-controlled-configuration (baseline)\n   -  all
      DeltaV-compliant resource properties.\n   Supported methods:\n   -  VERSION-CONTROL\n
      \  -  all DeltaV-compliant resource methods.\n"
    title: A.4 Versionable Resource
  - contents:
    - "A.5 Version-Controlled Resource\n   Supported live properties:\n   -  DAV:auto-version\n
      \  -  DAV:version-history  (version-history)\n   -  DAV:workspace (workspace)\n
      \  -  DAV:version-controlled-configuration (baseline)\n   -  all DeltaV-compliant
      resource properties.\n   Supported methods:\n   -  VERSION-CONTROL\n   -  MERGE
      (merge)\n   -  all DeltaV-compliant resource methods.\n"
    title: A.5 Version-Controlled Resource
  - contents:
    - "A.6 Version\n   Supported live properties:\n   -  DAV:predecessor-set\n   -
      \ DAV:successor-set\n   -  DAV:checkout-set\n   -  DAV:version-name\n   -  DAV:checkout-fork
      (in-place-checkout or working resource)\n   -  DAV:checkin-fork (in-place-checkout
      or working resource)\n   -  DAV:version-history  (version-history)\n   -  DAV:label-name-set
      (label)\n   -  DAV:activity-set (activity)\n   -  all DeltaV-compliant resource
      properties.\n   Supported methods:\n   -  LABEL (label)\n   -  CHECKOUT (working-resource)\n
      \  -  all DeltaV-compliant resource methods.\n"
    title: A.6 Version
  - contents:
    - "A.7 Checked-In Version-Controlled Resource\n   Supported live properties:\n
      \  -  DAV:checked-in\n   -  all version-controlled resource properties.\n   Supported
      methods:\n   -  CHECKOUT (checkout-in-place)\n   -  UPDATE (update)\n   -  all
      version-controlled resource methods.\n"
    title: A.7 Checked-In Version-Controlled Resource
  - contents:
    - "A.8 Checked-Out Resource\n   Supported live properties:\n   -  DAV:checked-out\n
      \  -  DAV:predecessor-set\n   -  DAV:checkout-fork (in-place-checkout or working
      resource)\n   -  DAV:checkin-fork (in-place-checkout or working resource)\n
      \  -  DAV:merge-set (merge)\n   -  DAV:auto-merge-set (merge)\n   -  DAV:unreserved
      (activity)\n   -  DAV:activity-set (activity)\n   Supported methods:\n   -  CHECKIN
      (checkout-in-place or working-resource)\n   -  all DeltaV-compliant resource
      methods.\n"
    title: A.8 Checked-Out Resource
  - contents:
    - "A.9 Checked-Out Version-Controlled Resource (checkout-in-place)\n   Supported
      live properties:\n   -  all version-controlled resource properties.\n   -  all
      checked-out resource properties.\n   Supported methods:\n   -  UNCHECKOUT\n
      \  -  all version-controlled resource methods.\n   -  all checked-out resource
      methods.\n"
    title: A.9 Checked-Out Version-Controlled Resource (checkout-in-place)
  - contents:
    - "A.10 Working Resource (working-resource)\n   Supported live properties:\n   -
      \ all DeltaV-compliant resource properties\n   -  all checked-out resource properties\n
      \  -  DAV:auto-update.\n   Supported methods:\n   -  all checked-out resource
      methods.\n"
    title: A.10 Working Resource (working-resource)
  - contents:
    - "A.11 Version History (version-history)\n   Supported live properties:\n   -
      \ DAV:version-set\n   -  DAV:root-version\n   -  all DeltaV-compliant resource
      properties.\n   Supported methods:\n   -  all DeltaV-compliant resource methods.\n"
    title: A.11 Version History (version-history)
  - contents:
    - "A.12 Workspace (workspace)\n   Supported live properties:\n   -  DAV:workspace-checkout-set\n
      \  -  DAV:baseline-controlled-collection-set (baseline)\n   -  DAV:current-activity-set
      (activity)\n   -  all DeltaV-compliant collection properties.\n   Supported
      methods:\n   -  all DeltaV-compliant collection methods.\n"
    title: A.12 Workspace (workspace)
  - contents:
    - "A.13 Activity (activity)\n   Supported live properties:\n   -  DAV:activity-version-set\n
      \  -  DAV:activity-checkout-set\n   -  DAV:subactivity-set\n   -  DAV:current-workspace-set\n
      \  -  all DeltaV-compliant resource properties.\n   Supported methods:\n   -
      \ all DeltaV-compliant resource methods.\n"
    title: A.13 Activity (activity)
  - contents:
    - "A.14 Version-Controlled Collection (version-controlled-collection)\n   Supported
      live properties:\n   -  DAV:eclipsed-set\n   -  all version-controlled resource
      properties.\n   Supported methods:\n   -  all version-controlled resource methods.\n"
    title: A.14 Version-Controlled Collection (version-controlled-collection)
  - contents:
    - "A.15 Collection Version (version-controlled-collection)\n   Supported live
      properties:\n   -  DAV:version-controlled-binding-set\n   -  all version properties.\n
      \  Supported methods:\n   -  all version methods.\n"
    title: A.15 Collection Version (version-controlled-collection)
  - contents:
    - "A.16 Version-Controlled Configuration (baseline)\n   Supported live properties:\n
      \  -  DAV:baseline-controlled-collection\n   -  all version-controlled resource
      properties.\n   Supported methods:\n   -  all version-controlled resource methods.\n"
    title: A.16 Version-Controlled Configuration (baseline)
  - contents:
    - "A.17 Baseline (baseline)\n   Supported live properties:\n   -  DAV:baseline-collection\n
      \  -  DAV:subbaseline-set\n   -  all version properties.\n   Supported methods:\n
      \  -  all version methods.\n"
    title: A.17 Baseline (baseline)
  - contents:
    - "A.18 Checked-Out Version-Controlled Configuration (baseline)\n   Supported
      live properties:\n   -  DAV:subbaseline-set\n   -  all version-controlled configuration
      properties.\n   Supported methods:\n   -  all version-controlled configuration
      methods.\n"
    title: A.18 Checked-Out Version-Controlled Configuration (baseline)
  title: Appendix A - Resource Classification
- contents:
  - "Authors' Addresses\n   Geoffrey Clemm\n   Rational Software\n   20 Maguire Road,
    Lexington, MA 02421\n   EMail: geoffrey.clemm@rational.com\n   Jim Amsden\n   IBM\n
    \  3039 Cornwallis, Research Triangle Park, NC 27709\n   EMail: jamsden@us.ibm.com\n
    \  Tim Ellison\n   IBM\n   Hursley Park, Winchester, UK S021 2JN\n   EMail: tim_ellison@uk.ibm.com\n
    \  Christopher Kaler\n   Microsoft\n   One Microsoft Way, Redmond, WA 90852\n
    \  EMail: ckaler@microsoft.com\n   Jim Whitehead\n   UC Santa Cruz, Dept. of Computer
    Science\n   1156 High Street, Santa Cruz, CA 95064\n   EMail: ejw@cse.ucsc.edu\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
