- title: __initial_text__
  contents:
  - '         Triggered Extensions to RIP to Support Demand Circuits

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a modification which can be applied to\n \
    \  Bellman-Ford (distance vector) algorithm information broadcasting\n   protocols\
    \ - for example IP RIP, Netware RIP or Netware SAP - which\n   makes it feasible\
    \ to run them on connection oriented Public Data\n   Networks.\n   This proposal\
    \ has a number of efficiency advantages over the Demand\n   RIP proposal (RFC\
    \ 1582).\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank Richard Edmonstone of Shiva, Joahanna\n\
    \   Kruger of Xyplex, Steve Waters of DEC and Guenter Roeck of Conware\n   for\
    \ many comments and suggestions which improved this effort.\n"
- title: Conventions
  contents:
  - "Conventions\n   The following language conventions are used in the items of\n\
    \   specification in this document:\n   o  MUST -- the item is an absolute requirement\
    \ of the specification.\n      MUST is only used where it is actually required\
    \ for\n      interoperation, not to try to impose a particular method on\n   \
    \   implementors where not required for interoperability.\n   o  SHOULD -- the\
    \ item should be followed for all but exceptional\n      circumstances.\n   o\
    \  MAY or optional -- the item is truly optional and may be followed\n      or\
    \ ignored according to the needs of the implementor.\n      The words \"should\"\
    \ and \"may\" are also used, in lower case, in\n      their more ordinary senses.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ...........................................\
    \  2\n   2. Overview ...............................................  3\n   3.\
    \ The Routing Database ...................................  5\n       3.1. Presumption\
    \ of Reachability ......................  6\n       3.2. Alternative Routes ...............................\
    \  6\n       3.3. Split Horizon with Poisoned Reverse ..............  7\n    \
    \   3.4. Managing Updates .................................  7\n       3.5. Retransmissions\
    \ ..................................  7\n   4. New Packet Types .......................................\
    \  8\n       4.1. Update Request (9) ...............................  9\n    \
    \   4.2. Update Response (10) .............................  9\n       4.3. Update\
    \ Acknowledge (11) .......................... 10\n   5. Packet Formats .........................................\
    \ 10\n       5.1. Update Header .................................... 10\n    \
    \   5.2. IP Routing Information Protocol Version 1 ........ 11\n       5.3. IP\
    \ Routing Information Protocol Version 2 ........ 11\n       5.4. Netware Routing\
    \ Information Protocol ............. 12\n       5.5. Netware Service Advertising\
    \ Protocol ............. 12\n   6. Timers .................................................\
    \ 17\n       6.1. Database Timer ................................... 17\n    \
    \   6.2. Hold Down Timer .................................. 17\n       6.3. Retransmission\
    \ Timer ............................. 18\n       6.4. Over-subscription Timer\
    \ .......................... 18\n   7. Security Considerations ................................\
    \ 19\n   Appendix A - Implementation Suggestion .................... 20\n   References\
    \ ................................................ 21\n   Authors' Addresses ........................................\
    \ 22\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Routers are used on connection oriented networks, such as\
    \ X.25 packet\n   switched networks and ISDN networks, to allow potential connectivity\n\
    \   to a large number of remote destinations.  Circuits on the Wide Area\n   Network\
    \ (WAN) are established on demand and are relinquished when the\n   traffic subsides.\
    \  Depending on the application, the connection\n   between any two sites for\
    \ user data might actually be short and\n   relatively infrequent.\n   Periodic\
    \ broadcasting by Bellman-Ford (distance vector) algorithm\n   information broadcasting\
    \ protocols IP RIP [1], IP RIP V2 [2] or\n   Netware RIP and SAP [3] generally\
    \ prevents WAN circuits from being\n   closed.  Even on fixed point-to-point links\
    \ the overhead of periodic\n   transmission of RIP - and even more so SAP broadcasts\
    \ - can seriously\n   interrupt normal data transfer simply through the quantity\
    \ of\n   information which hits the line every 30 or 60 seconds.\n   To overcome\
    \ these limitations, this specification modifies the\n   distance vector protocols\
    \ so as to send information on the WAN only\n   when there has been an update\
    \ to the routing database OR a change in\n   the reachability of a next hop router\
    \ is indicated by the task which\n   manages connections on the WAN.\n   Because\
    \ datagrams are not guaranteed to get through on all WAN media,\n   an acknowledgement\
    \ and retransmission system is required to provide\n   reliability.\n   The protocols\
    \ run unmodified on Local Area Networks (LANs) and so\n   interoperate transparently\
    \ with implementations adhering to the\n   original specifications.\n   This proposal\
    \ differs from Demand RIP [4] conceptually as follows:\n   o  If a router has\
    \ exchanged all routing information with its partner\n      and some routing information\
    \ subsequently changes only the changed\n      information is sent to the partner.\n\
    \   o  The receiver of routes is able to apply all changes immediately\n     \
    \ upon receiving information from a partner.\n   These differences lead to further\
    \ reduced routing traffic and also\n   require less memory than Demand RIP [4].\
    \  Demand RIP also has an\n   upper limit of 255 fragments in an update which\
    \ is lifted in\n   Triggered RIP (which does not use fragmentation).\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   Multiprotocol routers are used on connection oriented Wide Area\n\
    \   Networks (WANs), such as X.25 packet switched networks and ISDN\n   networks,\
    \ to interconnect LANs.  By using the multiplexing properties\n   of the underlying\
    \ WAN technology, several LANs can be interconnected\n   simultaneously through\
    \ a single physical interface on the router.\n   A circuit manager provides an\
    \ interface between the connectionless\n   network layers, IP and IPX, and the\
    \ connection oriented WAN, X.25,\n   ISDN etc.  Figure 1 shows a schematic representative\
    \ stack showing\n   the relationship between routing protocols, the network layers,\
    \ the\n   circuit manager and the connection oriented WAN.\n             --------------\
    \           ---------  ---------\n             |    RIP     |           |  RIP\
    \  |  |  SAP  |\n             --------------           ---------  ---------\n\
    \                   |                      |          |\n             --------------\
    \               |          |\n             |    UDP     |               |    \
    \      |\n             --------------               |          |\n           \
    \        |                      |          |\n             --------------    \
    \         ----------------\n             |    IP      |             |     IPX\
    \      |\n             --------------             ----------------\n         \
    \          |                           |\n             -------------------------------------------\n\
    \             |             Circuit Manager             |\n             -------------------------------------------\n\
    \                              ||||||||||\n                              ||||||||||\n\
    \                      ---------------------------\n                      |  \
    \ Connection Oriented   |\n                      |        WAN stack        |\n\
    \                      ---------------------------\n      A WAN circuit manager\
    \ will  support  a  variety  of  network\n      layer protocols,  on its upper\
    \ interface.  On its lower interface,\n      it may support one or more subnetworks.\
    \  A subnetwork may support\n      a number of Virtual Circuits.\n           \
    \ Figure 1.   Representative Multiprotocol Router stack\n   The router has a translation\
    \ table which relates the network layer\n   address of the next hop router to\
    \ the physical address used to\n   establish a Virtual Circuit (VC) to it.\n \
    \  The circuit manager takes datagrams from the connectionless network\n   layer\
    \ protocols and (if one is not currently available) opens a VC to\n   the next\
    \ hop router.  A VC can carry all traffic between two end-\n   point routers for\
    \ a given network layer protocol (or with appropriate\n   encapsulation all network\
    \ layer protocols).  An idle timer (or some\n   other mechanism) is used to close\
    \ the VC when the datagrams stop\n   arriving at the circuit manager.\n   If the\
    \ circuit manager has data to forward (whether user data OR a\n   routing update)\
    \ and fails to obtain a VC it informs the routing\n   application that the destination\
    \ is unreachable (circuit down).  The\n   circuit manager is then expected to\
    \ perform whatever is necessary to\n   recover the link.   Once successful, it\
    \ informs the routing\n   application (circuit up).\n   In Triggered RIP, routing\
    \ updates are only transmitted on the WAN\n   when required:\n   1  When a specific\
    \ request for a routing update has been received.\n   2  When the routing database\
    \ is modified by new information from\n      another interface.\n   3  When the\
    \ circuit manager indicates that a destination has changed\n      from an unreachable\
    \ (circuit down) to a reachable (circuit up)\n      state.\n   4  And also when\
    \ a unit is first powered on to ensure that at least\n      one update is sent.\
    \  This can be thought of as a transition from\n      circuit down to circuit\
    \ up.  It MAY contain no routes or services,\n      and is used to flush routes\
    \ or services from the peer's database.\n   In cases 1,3 and 4 the full contents\
    \ of the database is sent.  In\n   case 2 only the latest changes are sent.\n\
    \   Because of the inherent unreliability of a datagram based system,\n   both\
    \ routing requests and routing responses require acknowledgement,\n   and retransmission\
    \ in the event of NOT receiving an acknowledgement.\n"
- title: 3. The Routing Database
  contents:
  - "3. The Routing Database\n   Entries in the routing database can either be permanent\
    \ or temporary.\n   Entries learned from broadcasts on LANs are temporary. They\
    \ will\n   expire if not periodically refreshed by further broadcasts.\n   Entries\
    \ learned from a triggered response on the WAN are 'permanent'.\n   They MUST\
    \ not time out in the normal course of events.  Certain\n   events can cause these\
    \ routes to time out.\n"
- title: 3.1 Presumption of Reachability
  contents:
  - "3.1 Presumption of Reachability\n   If a routing update is received from a next\
    \ hop router on the WAN,\n   entries in the update are thereafter always considered\
    \ to be\n   reachable, unless proven otherwise:\n   o  If in the normal course\
    \ of routing datagrams, the circuit manager\n      fails to establish a connection\
    \ to the next hop router, it\n      notifies the routing application that the\
    \ next hop router is not\n      reachable through an internal circuit down message.\n\
    \      The database entries are first marked as temporary and aged\n      normally;\
    \ Some implementations may choose to omit this initial\n      aging step.  The\
    \ routing application then marks the appropriate\n      database entries as unreachable\
    \ for a hold down period (the normal\n      120 second RIP hold down timer).\n\
    \   o  If the circuit manager is subsequently able to establish a\n      connection\
    \ to the next hop router, it will notify the routing\n      application that the\
    \ next hop router is reachable through an\n      internal circuit up message.\n\
    \      The routing application will then exchange messages with the next\n   \
    \   hop router so as to re-prime their respective routing databases\n      with\
    \ up-to-date information.\n   The next hop router may also be marked as unreachable\
    \ if an excessive\n   number of retransmissions of an update go unacknowledged\
    \ (see section\n   6.3).\n   Handling of circuit up and circuit down messages\
    \ requires that the\n   circuit manager takes responsibility for establishing\
    \ (or re-\n   establishing) the connection in the event of a next hop router\n\
    \   becoming unreachable.  A description of the processes the circuit\n   manager\
    \ adopts to perform this task is outside the scope of this\n   document.\n"
- title: 3.2 Alternative Routes
  contents:
  - "3.2 Alternative Routes\n   A requirement of using Triggered RIP for propagating\
    \ routing\n   information is that NO routing information ever gets LOST or\n \
    \  DISCARDED.  This means that all alternative routes SHOULD be\n   retained.\n\
    \   It MAY be possible to operate with a sub-set of all alternative\n   routes,\
    \ but this adds complexity to the protocol - which is NOT\n   covered in this\
    \ document.\n"
- title: 3.3 Split Horizon with Poisoned Reverse
  contents:
  - "3.3 Split Horizon with Poisoned Reverse\n   The rules for Split Horizon with\
    \ Poisoned Reverse MUST be used to\n   determine whether and/or how a route is\
    \ advertised on an interface\n   running this protocol.\n   Split Horizon consists\
    \ of omitting routes learned from a peer when\n   sending updates back to that\
    \ peer.  With Poisoned Reverse instead of\n   omitting those routes, they are\
    \ advertised as unreachable (setting\n   the metric to infinity).\n   A route\
    \ is only poisoned if it is the best route (rather than an\n   inferior alternative\
    \ route) in the database.\n   Poison Reverse is necessary because a router may\
    \ be advertising a\n   route to a network to its partner and then later learn\
    \ a better route\n   for the same network from the partner.  Without Poison Reverse\
    \ the\n   partner will not know to discard the inferior route learned from the\n\
    \   first router.\n"
- title: 3.4 Managing Routing Updates
  contents:
  - "3.4 Managing Routing Updates\n   The routing database SHOULD be considered to\
    \ be a sequence of\n   elements ordered by the time it was last updated.  If there\
    \ is a\n   change in the best route (i.e. a new route is added or a route's\n\
    \   metric has changed), the route is reordered and given a new highest\n   sequence\
    \ number.\n   Sending updates to a peer consists of running through the database\n\
    \   from the oldest entry to the newest entry.  Once an entry has been\n   sent\
    \ and acknowledged it is generally never resent.  As new routing\n   information\
    \ arrives, only the new information is sent.\n"
- title: 3.5 Retransmissions
  contents:
  - "3.5 Retransmissions\n   Handling retransmission of updates is simplest if updates\
    \ are\n   restricted to never having more than one un-acknowledged update\n  \
    \ outstanding - \"one packet in flight\".  A copy of the update packet\n   can\
    \ be kept and retransmitted until acknowledged - and then\n   subsequent update\
    \ packets are sent in turn until the full database\n   (to date) has been sent\
    \ and acknowledged.\n   Things become more complicated if several packets are\
    \ sent in quick\n   succession without waiting for an acknowledgements between\
    \ packets -\n   \"several packets in flight\":\n   o  If packets arrive out of\
    \ order they could corrupt the peer's\n      database.  If the underlying datalink\
    \ layer bundles several VCs,\n      it MUST guarantee to NOT reorder datagrams.\n\
    \   o  If the elements making up a packet requiring retransmission change\n  \
    \    because of an alteration in the database, stale incorrect\n      information\
    \ could be sent (again new information could overtake\n      old information).\n\
    \   To guard against this when 'retransmitting' a packet when the\n   database\
    \ is in flux the packet MUST be re-created from the database\n   to contain only\
    \ the subset of routes which currently apply.  And if\n   none of the routes still\
    \ apply, nothing will be 'retransmitted'.\n   For simplicity of implementation\
    \ we would advise having only one\n   packet in flight.  However if the 'round\
    \ trip' for a response and\n   acknowledgement is quite long this could significantly\
    \ delay large\n   updates.  See Appendix A for an understanding of the additional\n\
    \   complexity of managing several packets in flight.\n"
- title: 4. New Packet Types
  contents:
  - "4. New Packet Types\n   To support triggered updates, three new packet types\
    \ MUST be\n   supported.  For IP RIP Version 1 [1] and IP RIP Version 2 [2] these\n\
    \   are identified by the Command Field values shown:\n      o  9 - Update Request\n\
    \      o  10 - Update Response\n      o  11 - Update Acknowledge\n   For Netware\
    \ RIP and SAP [3] the equivalent Field to distinguish\n   between packet types\
    \ is called Operation and these take the same\n   values.\n   These Command and\
    \ Operation types require the addition of a 4 octet\n   Update header.  All three\
    \ packet types contain a Version, which MUST\n   be 1.  Update Response and Update\
    \ Acknowledge also have a Sequence\n   Number and a Flush Flag.\n"
- title: 4.1 Update Request
  contents:
  - "4.1 Update Request\n   The Update Request has the Command/Operation value 9.\n\
    \   It is a request to the peer system to send ALL appropriate elements\n   in\
    \ its routing database.  It is retransmitted at periodic intervals\n   (every\
    \ 5 seconds) until an Update Response message is received with\n   the Flush flag\
    \ set.\n   An Update Request is transmitted in the following circumstances:\n\
    \   o  Firstly when the router is powered on.\n   o  Secondly when the circuit\
    \ manager indicates a destination has been\n      in an unreachable (circuit down)\
    \ state and changes to a reachable\n      (circuit up) state.\n   An Update Request\
    \ may also be sent at other times to compensate for\n   discarding non-optimal\
    \ routing information or if an Update Response\n   continues to be unacknowledged\
    \ (see section 6.3).\n"
- title: 4.2 Update Response
  contents:
  - "4.2 Update Response\n   The Update Response has the Command/Operation value 10.\n\
    \   It is a message containing zero or more routes in an update.  It is\n   retransmitted\
    \ at periodic intervals until an Update Acknowledge is\n   received.\n   An Update\
    \ Response message MUST be sent:\n   o  In response to an Update Request.  The\
    \ Update Response MUST have\n      the Flush flag set.  Other Update Responses\
    \ should NOT be sent\n      until an Update Acknowledge has been received acknowledging\
    \ the\n      Flush flag.\n      The remainder of the database MUST then be sent\
    \ as a series of\n      Update Responses with the Flush flag NOT set.\n   o  An\
    \ Update Response with the Flush flag set MUST also be sent at\n      power on\
    \ to flush the peer's routing table learned from a previous\n      incarnation.\
    \  This Update Response SHOULD NOT contain any routes.\n      This avoids any\
    \ possibility of an acknowledgement being received\n      to a response sent BEFORE\
    \ the unit was restarted causing confusion\n      about which routes are being\
    \ acknowledged.\n   Update Response messages continue to be sent any time there\
    \ is fresh\n   routing information to be propagated.\n   Each new Update Response\
    \ is given a different Sequence Number.  The\n   Sequence Number only has 'meaning'\
    \ to the sender of the Update\n   Response.  The same Update Response sent to\
    \ different peers MAY have\n   a different Sequence Number.\n   An Update Response\
    \ packet with the Flush flag set MUST be sent to a\n   peer:\n      o  At power\
    \ on.\n      o  In response to an Update Request packet.\n      o  After transitioning\
    \ from a circuit down to a circuit up state.\n   After sending an Update Flush,\
    \ the full database MUST be sent\n   subsequently.\n"
- title: 4.3 Update Acknowledge
  contents:
  - "4.3 Update Acknowledge\n   The Update Acknowledge has the Command/Operation value\
    \ 11.\n   It is a message sent in response to every Update Response packet\n \
    \  received.  If the Update Response packet has the flush flag set then\n   so\
    \ should the Update Acknowledge packet.\n"
- title: 5. Packet Formats
  contents:
  - '5. Packet Formats

    '
- title: 5.1 Update Header
  contents:
  - "5.1 Update Header\n   To support the mechanism outlined in this proposal the\
    \ packet format\n   for RIP Version 1 [1], RIP Version 2 [2] and Netware RIP and\
    \ SAP [3]\n   are modified to include an additional small header when using\n\
    \   Commands Update Request (9), Update Response (10) and Update\n   Acknowledge\
    \ (11).  Commands are called Operations in Netware.\n   Update Request (9):\n\
    \     0                   1                   2                   3 3\n     0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Version (1)  |               must be zero (3)                |\n    \
    \ +-------------------------------+-------------------------------+\n     Update\
    \ Response (10) and Update Acknowledge (11):\n     0                   1     \
    \              2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Version (1)  |   Flush (1)   |     Sequence Number (2)       |\n    \
    \ +-------------------------------+-------------------------------+\n     Four\
    \ octet Update headers, with each  tick  mark  representing  one\n     bit.  All\
    \ fields are coded in network byte order (big-endian).\n                     \
    \    Figure 2.   Update Headers.\n   Version MUST be 1 in all headers.  Any packets\
    \ received for a\n   different Version MUST be silently discarded.\n   The Sequence\
    \ Number MUST be incremented every time a new Update\n   Response packet is sent\
    \ on the WAN.  The Sequence Number is unchanged\n   for retransmissions.  The\
    \ Sequence Number wraps round at 65535.\n   Flush is set to 1 in an Update Response\
    \ if the peer is required to\n   start timing out its entries - otherwise it is\
    \ set to zero.  Any\n   other values MUST be silently discarded.\n   The peer\
    \ returns an Update Acknowledge containing the same Sequence\n   Number and Flush.\n"
- title: 5.2 IP Routing Information Protocol Version 1
  contents:
  - "5.2 IP Routing Information Protocol Version 1\n   IP RIP [1] is a UDP-based protocol\
    \ which generally sends and receives\n   datagrams on UDP port number 520.\n \
    \  To support the mechanism outlined in this proposal the packet format\n   for\
    \ RIP Version 1 [1] is modified when using Commands Update Request\n   (9), Update\
    \ Response (10) and Update Acknowledge (11).  See Figure 3.\n"
- title: 5.3 IP Routing Information Protocol Version 2
  contents:
  - "5.3 IP Routing Information Protocol Version 2\n   IP RIP Version 2 [2] is an\
    \ enhancement to IP RIP Version 1 which\n   allows RIP updates to include subnetting\
    \ information.\n   To support the mechanism outlined in this proposal the packet\
    \ format\n   for RIP Version 2 [2] is modified when using Commands Update Request\n\
    \   (9), Update Response (10) and Update Acknowledge (11).  See Figure 4.\n"
- title: 5.4 Netware Routing Information Protocol
  contents:
  - "5.4 Netware Routing Information Protocol\n   Netware [3] supports a mechanism\
    \ that allows routers on an\n   internetwork to exchange routing information using\
    \ the Routing\n   Information Protocol (RIP) which runs over the Internetwork\
    \ Packet\n   Exchange (IPX) protocol using socket number 453h.\n   To support\
    \ the mechanism outlined in this proposal the packet format\n   for Novell RIP\
    \ [3] is modified when using Operations Update Request\n   (9), Update Response\
    \ (10) and Update Acknowledge (11).  See Figure 5.\n"
- title: 5.5 Netware Service Advertising Protocol
  contents:
  - "5.5 Netware Service Advertising Protocol\n   Netware [3] also supports a mechanism\
    \ that allows servers on an\n   internetwork to advertise their services by name\
    \ and type using the\n   Service Advertising Protocol (SAP) which runs over the\
    \ Internetwork\n   Packet Exchange (IPX) protocol using socket number 452h.  SAP\n\
    \   operates on similar principals to running RIP.  Routers act as SAP\n   agents,\
    \ collecting service information from different networks and\n   relay it to interested\
    \ parties.\n   To support the mechanism outlined in this proposal the packet format\n\
    \   for Novell SAP [3] is modified when using Operations Update Request\n   (9),\
    \ Update Response (10) and Update Acknowledge (11).  See Figure 6.\n     0   \
    \                1                   2                   3 3\n     0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Command (1)   | RIP Version (1)|     must be zero (2)         |\n    \
    \ +---------------+---------------+-------------------------------+\n     0  \
    \                 1                   2                   3 3\n     0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Update Header (4)                         |\n    \
    \ +-------------------------------+-------------------------------+\n     Update\
    \ Response then has up to 25 routing entries (each 20 octets):\n     0       \
    \            1                   2                   3 3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Address Family Identifier (2) |      must be zero (2)         |\n    \
    \ +-------------------------------+-------------------------------+\n     |  \
    \                       IP address (4)                        |\n     +---------------------------------------------------------------+\n\
    \     |                         must be zero (4)                      |\n    \
    \ +---------------------------------------------------------------+\n     |  \
    \                       must be zero (4)                      |\n     +---------------------------------------------------------------+\n\
    \     |                         Metric (4)                            |\n    \
    \ +---------------------------------------------------------------+\n        \
    \                             .\n                                     .\n    \
    \ The format of an IP RIP datagram in octets,  with  each  tick  mark\n     representing\
    \  one  bit.  All fields are coded in network byte order\n     (big-endian).\n\
    \     The four octets of the Update header are included in Update Request\n  \
    \   (Command  9),  Update  Response  (10)  and  Update Acknowledge (11)\n    \
    \ packets.  They are not present in packet types in the original  RIP\n     Version\
    \ 1 specification.\n                  Figure 3.   IP RIP Version 1 packet format\n\
    \     0                   1                   2                   3 3\n     0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Command (1)   |RIP Version (1)|      must be zero (2)         |\n    \
    \ +---------------+---------------+-------------------------------+\n     0  \
    \                 1                   2                   3 3\n     0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Update Header (4)                         |\n    \
    \ +-------------------------------+-------------------------------+\n     Update\
    \ Response then has up to 25 routing entries (each 20 octets):\n     0       \
    \            1                   2                   3 3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Address Family Identifier (2) |        Route Tag (2)          |\n    \
    \ +-------------------------------+-------------------------------+\n     |  \
    \                       IP address (4)                        |\n     +---------------------------------------------------------------+\n\
    \     |                         Subnet Mask (4)                       |\n    \
    \ +---------------------------------------------------------------+\n     |  \
    \                       Next Hop (4) - must be zero           |\n     +---------------------------------------------------------------+\n\
    \     |                         Metric (4)                            |\n    \
    \ +---------------------------------------------------------------+\n        \
    \                             .\n                                     .\n    \
    \ The format of an IP RIP Version 2 datagram  in  octets,  with  each\n     tick\
    \  mark  representing  one bit.  All fields are coded in network\n     byte order\
    \ (big-endian).\n     The four octets of the Update header are included in Update\
    \ Request\n     (Command  9),  Update  Response  (10)  and  Update Acknowledge\
    \ (11)\n     Packets.  They are not present in packet types in the original  RIP\n\
    \     Version 2 specification.\n     Next Hop MUST be zero, since Triggered RIP\
    \ can NOT advertise routes\n     on behalf of other WAN routers.\n     If authentication\
    \ is used it immediately follows the Update header.\n                  Figure\
    \ 4.   IP RIP Version 2 packet format\n     0                   1         1\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       Operation (2)           |\n     +---------------+---------------+\n\
    \     0                   1                   2                   3 3\n     0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Update Header (4)                         |\n    \
    \ +-------------------------------+-------------------------------+\n     Update\
    \ Response then has up to 50 routing entries (each 8 octets):\n     0        \
    \           1                   2                   3 3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                       Network Number (4)                      |\n    \
    \ +---------------------------------------------------------------+\n     |  \
    \     Number of Hops (2)      |      Number of Ticks (2)      |\n     +---------------------------------------------------------------+\n\
    \                                     .\n                                    \
    \ .\n     The format of a Netware RIP datagram in octets, with each tick mark\n\
    \     representing  one  bit.  All fields are coded in network byte order\n  \
    \   (big-endian).\n     The four octets of the Update header are included in Update\
    \ Request\n     (Operation  9),  Update  Response  (10) and Update Acknowledge\
    \ (11)\n     packets.  They are not present in  packet  types  in  the  original\n\
    \     Novell RIP specification.\n                    Figure 5.   Netware RIP packet\
    \ format\n     0                   1         1\n     0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |       Operation (2)  \
    \         |\n     +---------------+---------------+\n     0                  \
    \ 1                   2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Update Header (4)                         |\n    \
    \ +-------------------------------+-------------------------------+\n     Update\
    \ Response then has up to 8 service entries (each 64 octets):\n     0        \
    \           1                   2                   3 3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |        Service Type (2)       |                               |\n    \
    \ +-------------------------------+                               |\n     |  \
    \                     Service Name (48)                       |\n     |      \
    \                      .                                  |\n                \
    \                  .\n                                  .  +-------------------------------+\n\
    \     |                            .  | Network Address (4)           |\n    \
    \ +-------------------------------+-------------------------------+\n     |  Network\
    \ Address (cont)       |                               |\n     +-------------------------------+\
    \                               |\n     |                        Node Address\
    \ (6)                       |\n     +-------------------------------+-------------------------------+\n\
    \     |      Socket Address (2)       |       Hops to Server (2)      |\n    \
    \ +-------------------------------+-------------------------------+\n        \
    \                             .\n                                     .\n    \
    \ The format of a Netware SAP datagram in octets, with each tick mark\n     representing\
    \  one  bit.  All fields are coded in network byte order\n     (big-endian).\n\
    \     The four octets of the Update header are included in Update Request\n  \
    \   (Operation  9),  Update  Response  (10) and Update Acknowledge (11)\n    \
    \ packets.  They are not present in  packet  types  in  the  original\n     Novell\
    \ SAP specification.\n                    Figure 6.   Netware SAP packet format\n"
- title: 6. Timers
  contents:
  - "6. Timers\n   Three timers are supported to handle the triggered update mechanism:\n\
    \   o  Database timer.\n   o  Hold down timer.\n   o  Retransmission timer.\n\
    \   An optional over-subscription timer MAY also be supported.\n"
- title: 6.1 Database Timer
  contents:
  - "6.1 Database Timer\n   Routes learned by an Update Response are normally considered\
    \ to be\n   permanent.\n   When an Update Response with the Flush flag set is\
    \ received, all\n   routes learned from that next hop router should start timing\
    \ out as\n   if they had (just) been learned from a conventional Response (Command\n\
    \   2).\n   Namely each route exists while the database entry timer (usually 180\n\
    \   seconds) is running and is advertised on other interfaces as if still\n  \
    \ present.  The route is then advertised as unreachable while a further\n   hold\
    \ down timer is allowed to expire.\n"
- title: 6.2 Hold down Timer
  contents:
  - "6.2 Hold down Timer\n   A hold down timer of 120 seconds is started on a route:\n\
    \   o  When the database timer for the route expires.\n   o  When a formerly reachable\
    \ route changes to unreachable in an\n      incoming response.\n   o  When a circuit\
    \ down is received from the circuit manager.\n   While the hold down timer is\
    \ running routes are advertised as\n   unreachable on other interfaces.\n   When\
    \ the hold down timer expires the route MAY be deleted from the\n   database PROVIDING\
    \ its unreachability has been successfully\n   propagated to all WAN destinations,\
    \ or the remaining WAN destinations\n   are in a circuit down state.  If a route\
    \ can not be deleted when the\n   hold-down timer expires, it MAY subsequently\
    \ be deleted when each and\n   every peer is either up-to-date or is in a circuit\
    \ down state.\n   If the hold down timer is already running it is NOT reset by\
    \ any\n   events which would start the hold down timer.\n"
- title: 6.3 Retransmission Timer
  contents:
  - "6.3 Retransmission Timer\n   The routing task runs a retransmission timer:\n\
    \   o  An Update Request packet is retransmitted periodically until an\n     \
    \ Update Flush packet is received.  An Update Flush packet is an\n      Update\
    \ Response packet with the Flush field set.  It need not\n      contain routes.\n\
    \   o  An Update Response packet is retransmitted periodically until an\n    \
    \  Update Acknowledge packet is received containing the same Sequence\n      Number.\n\
    \   With call set up time on the WAN being of the order of a second, a\n   value\
    \ of 5 seconds for the retransmission timer is appropriate.\n   To prevent against\
    \ failures in the circuit manager a limit SHOULD be\n   placed on the number of\
    \ retransmissions. If no response has been\n   received after a configurable length\
    \ of time (say 180 seconds) routes\n   via the next hop router are marked as unreachable,\
    \ the hold down\n   timer is started and the entry is advertised as unreachable\
    \ on other\n   interfaces.\n   The next hop router may then be polled with Update\
    \ Requests at a\n   reduced frequency.  A suitable poll interval would be of the\
    \ order of\n   minutes rather than seconds.  Alternatively an Update Request could\n\
    \   be initiated by administrative action.  When a response is received\n   the\
    \ routers should perform a complete exchange of routing\n   information.\n"
- title: 6.4 Over-subscription Timer
  contents:
  - "6.4 Over-subscription Timer\n   Over-subscription is where there are more next\
    \ hop routers to send\n   updates to on the WAN than there are channels.  For\
    \ example 3 next\n   hop routers accessed by an ISDN Basic Rate Interface (BRI)\
    \ which can\n   only support 2 calls simultaneously.\n   To avoid route oscillation\
    \ routes may NOT be marked unreachable\n   immediately on receiving a circuit\
    \ down message from the circuit\n   manager.  A timeout MAY be used to delay marking\
    \ the routes\n   unreachable for sufficiently long to allow the calls to 'time\n\
    \   division multiplex' over the available channels.  A timeout as long\n   as\
    \ the regular 180 second RIP route timeout MAY be suitable.  In\n   general the\
    \ greater the over-subscription, the longer the time out\n   should be.\n   Implementations\
    \ wishing to support over-subscription may implement\n   the delay within the\
    \ circuit manager or within the routing\n   application.\n   If the delay is implemented\
    \ within the routing application the\n   routing entries MUST NOT start timing\
    \ out during  the delay.  This\n   allows the circuit up message to be ignored\
    \ if the timeout after\n   receiving the circuit down has still to expire.  This\
    \ avoids any\n   confusion if the peer had previously issued a Route Flush command\
    \ and\n   was part way through an update.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   The circuit manager is required to be provided\
    \ with a list of\n   physical addresses to enable it to establish a call to the\
    \ next hop\n   router.  The circuit manager SHOULD only allow incoming calls to\
    \ be\n   accepted from the same well defined list of routers.\n   Elsewhere in\
    \ the system there will be a set of logical address and\n   physical address tuples\
    \ to enable the network protocols to run over\n   the correct circuit.  This may\
    \ be a lookup table, or in some\n   instances there may be an algorithmic conversion\
    \ between the two\n   addresses.\n   The routing (or service advertising) task\
    \ MUST be provided with a\n   list of logical addresses to which triggered updates\
    \ are to be sent\n   on the WAN.  The list MAY be a subset of the list of next\
    \ hop routers\n   maintained by the circuit manager.\n   RIP Version 2 also allows\
    \ further authentication of Triggered RIP\n   packets.\n"
- title: Appendix A - Implementation Suggestion
  contents:
  - "Appendix A - Implementation Suggestion\n   This section suggests how the database\
    \ might be structured to handle\n   Triggered RIP.\n   Each entry in the database\
    \ is given a unique route number.  Every\n   time a best route to a network changes,\
    \ a global route number is\n   incremented and the changed route is given the\
    \ new route number.\n   Note that this route number is completely internal to\
    \ the router and\n   has no bearing on the Sequence Number sent in Update Responses\
    \ sent\n   to the peer.\n   The route number size should be large enough so as\
    \ not to wrap round\n   - or the routes can be renumbered before it becomes a\
    \ problem.  Re-\n   numbering requires that the database environment is stable\
    \ (No Update\n   Responses are queued awaiting Acknowledgement)\n   Is is probably\
    \ easier to manage the routes if they are also chained\n   together using a pointer\
    \ to a later (and possibly also a pointer to\n   an earlier) entry which reflect\
    \ the route number/age.\n   Performing a complete update then consists of running\
    \ though the\n   routes from the oldest to the latest and sending them out in\
    \ Update\n   Responses.  Subsequent changes to the database are treated as sending\n\
    \   out only the changed entries (from the previous latest to the new\n   latest).\n\
    \   When allowing for several packets in flight care must be taken with\n   retransmissions.\
    \  An Update Response 'retransmission' MAY be\n   different from the original.\
    \  When transmitting a sequence of Update\n   Responses each Response packet contains\
    \ a number of routes which is a\n"
- title: represented by a series of routes with consecutive route numbers.
  contents:
  - "represented by a series of routes with consecutive route numbers.\n   Consider\
    \ sending three Update Responses with Sequence numbers 10,11\n   and 12 each containing\
    \ 10 routes:\n   Sequence Number    Routes represented by Route Numbers\n    \
    \     10           101, 102, 103, 104, 105, 106, 107, 108, 109, 110\n        \
    \ 11           111, 112, 113, 114, 115, 116, 117, 118, 119, 120\n         12 \
    \          121, 122, 123, 124, 125, 126, 127, 128, 129, 130\n   If these Update\
    \ Responses are NOT acknowledged, but in the meantime\n   the routing database\
    \ has changed and the routes represented by route\n   numbers 104, 112 - 116 and\
    \ 127 have changed and been assigned new\n   route numbers 131 - 137, the retransmission\
    \ will look like:\n           Sequence Number    Routes represented by Route Numbers\n\
    \            10           101, 102, 103, 105, 106, 107, 108, 109, 110\n      \
    \      11           111, 117, 118, 119, 120\n            12           121, 122,\
    \ 123, 124, 125, 126, 128, 129, 130\n            13           131, 132, 133, 134,\
    \ 135, 136, 137\n      To perform a retransmission it is VERY IMPORTANT that the\n\
    \      retransmission contains only the SUB-SET of route numbers which\n     \
    \ currently apply.  If there are NO suitable routes to send, it is not\n     \
    \ necessary to send an empty retransmission.\n   An alternative 'retransmission'\
    \ strategy is to always use different\n   sequence numbers when resending updates.\
    \  Consider transmitting\n   packets with sequence numbers 10 through 20 - and\
    \ responses are\n   received from all packets except those with sequence numbers\
    \ 14 and\n   17.  In this case only the data in packets 10 through 13 can be\n\
    \   considered to be acknowledged.  The data from packet 14 onwards MUST\n   be\
    \ re-sent and given new sequence numbers starting at 21.\n"
- title: References
  contents:
  - "References\n   [1]  Hedrick. C., \"Routing Information Protocol\", RFC 1058,\
    \ Rutgers\n        University, June 1988.\n   [2]  Malkin. G., \"RIP Version 2\
    \ - Carrying Additional Information\",\n        RFC 1723, Xylogics, November 1994.\n\
    \   [3]  Novell Incorporated., \"IPX Router Specification\", Version 1.20,\n \
    \       October 1993.\n   [4]  Meyer. G., \"Extensions to RIP to Support Demand\
    \ Circuits\",\n        Spider Systems, February 1994.\n"
- title: 'Authors''  Address:'
  contents:
  - "Authors'  Address:\n   Gerry Meyer\n   Shiva\n   Stanwell Street\n   Edinburgh\
    \ EH6 5NG\n   Scotland, UK\n   Phone: (UK) 131 554 9424\n   Fax:   (UK) 131 467\
    \ 7749\n   Email: gerry@europe.shiva.com\n   Steve Sherry\n   Xyplex\n   295 Foster\
    \ St.\n   Littleton, MA 01460\n   Phone: (US) 508 952 4745\n   Fax:   (US) 508\
    \ 952 4887\n   Email: shs@xyplex.com\n"
