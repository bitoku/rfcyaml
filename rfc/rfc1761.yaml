- title: __initial_text__
  contents:
  - '               Snoop Version 2 Packet Capture File Format

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This paper describes the file format used by \"snoop\", a packet\n\
    \   monitoring and capture program developed by Sun.  This paper is\n   provided\
    \ so that people can write compatible programs to generate and\n   interpret snoop\
    \ packet capture files.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The availability of tools to capture, display and interpret\
    \ packets\n   traversing a network has proven extremely useful in debugging\n\
    \   networking problems.  The ability to capture packets and store them\n   for\
    \ later analysis allows one to de-couple the tasks of collecting\n   information\
    \ about a network problem and analysing that information.\n   The \"snoop\" program,\
    \ developed by Sun, has the ability to capture\n   packets and store them in a\
    \ file, and can interpret the packets\n   stored in capture files.  This RFC describes\
    \ the file format that the\n   snoop program uses to store captured packets. \
    \ This paper was written\n   so that others may write programs to interpret the\
    \ capture files\n   generated by snoop, or create capture files that can be interpreted\n\
    \   by snoop.\n"
- title: 2.  File Format
  contents:
  - "2.  File Format\n   The snoop packet capture file is an array of octets structured\
    \ as\n   follows:\n        +------------------------+\n        |             \
    \           |\n        |      File Header       |\n        |                 \
    \       |\n        +------------------------+\n        |                     \
    \   |\n        |     Packet Record      |\n        ~        Number 1        ~\n\
    \        |                        |\n        +------------------------+\n    \
    \    .                        .\n        .                        .\n        .\
    \                        .\n        +------------------------+\n        |    \
    \                    |\n        |     Packet Record      |\n        ~        Number\
    \ N        ~\n        |                        |\n        +------------------------+\n\
    \   The File Header is a fixed-length field containing general\n   information\
    \ about the packet file and the format of the packet\n   records it contains.\
    \  One or more variable-length Packet Record\n   fields follow the File Header\
    \ field.  Each Packet Record field holds\n   the data of one captured packet.\n"
- title: 3. File Header
  contents:
  - "3. File Header\n   The structure of the File Header is as follows:\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    +\
    \                     Identification Pattern                    +\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       Version Number = 2                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                         Datalink Type                         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Identification Pattern:\n                A 64-bit (8 octet) pattern used\
    \ to identify the file as\n                a snoop packet capture file.  The Identification\
    \ Pattern\n                consists of the 8 hexadecimal octets:\n           \
    \             73 6E 6F 6F 70 00 00 00\n                This is the ASCII string\
    \ \"snoop\" followed by three null\n                octets.\n        Version Number:\n\
    \                A 32-bit (4 octet) unsigned integer value representing\n    \
    \            the version of the packet capture file being used.  This\n      \
    \          document describes version number 2.  (Version number 1\n         \
    \       was used in early implementations and is now obsolete.)\n        Datalink\
    \ Type:\n                A 32-bit (4 octet) field identifying the type of\n  \
    \              datalink header used in the packet records that follow.\n     \
    \           The datalink type codes are listed in the table below:\n         \
    \       Datalink Type           Code\n                -------------          \
    \ ----\n                IEEE 802.3              0\n                IEEE 802.4\
    \ Token Bus    1\n                IEEE 802.5 Token Ring   2\n                IEEE\
    \ 802.6 Metro Net    3\n                Ethernet                4\n          \
    \      HDLC                    5\n                Character Synchronous   6\n\
    \                IBM Channel-to-Channel  7\n                FDDI             \
    \       8\n                Other                   9\n                Unassigned\
    \              10 - 4294967295\n"
- title: 4. Packet Record Format
  contents:
  - "4. Packet Record Format\n   Each packet record holds a partial or complete copy\
    \ of one packet as\n   well as some descriptive information about that packet.\
    \  The packet\n   may be truncated in order to limit the amount of data to be\
    \ stored in\n   the packet file.  In addition, the packet record may be padded\
    \ in\n   order for it to align on a convenient machine-dependent boundary.\n \
    \  Each packet record holds 24 octets of descriptive information about\n   the\
    \ packet, followed by the packet data, which is variable-length,\n   and an optional\
    \ pad field.  The descriptive information is structured\n   as six 32-bit (4-octet)\
    \ integer values.\n   The structure of the packet record is as follows:\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Original Length                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Included Length                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                      Packet Record Length                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Cumulative Drops                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       Timestamp Seconds                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Timestamp Microseconds                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                                                               .\n    .     \
    \                     Packet Data                          .\n    .          \
    \                                                     .\n    +               \
    \                                +- - - - - - - -+\n    |                    \
    \                           |     Pad       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Original Length\n                32-bit unsigned integer representing\
    \ the length in\n                octets of the captured packet as received via\
    \ a network.\n        Included Length\n                32-bit unsigned integer\
    \ representing the length of the\n                Packet Data field.  This is\
    \ the number of octets of the\n                captured packet that are included\
    \ in this packet record.\n                If the received packet was truncated,\
    \ the Included\n                Length field will be less than the Original Length\n\
    \                field.\n        Packet Record Length\n                32-bit\
    \ unsigned integer representing the total length of\n                this packet\
    \ record in octets.  This includes the 24\n                octets of descriptive\
    \ information, the length of the\n                Packet Data field, and the length\
    \ of the Pad field.\n        Cumulative Drops\n                32-bit unsigned\
    \ integer representing the number of\n                packets that were lost by\
    \ the system that created the\n                packet file between the first packet\
    \ record in the\n                file and this one.  Packets may be lost because\
    \ of\n                insufficient resources in the capturing system, or for\n\
    \                other reasons.  Note: some implementations lack the\n       \
    \         ability to count dropped packets.  Those\n                implementations\
    \ may set the cumulative drops value to\n                zero.\n        Timestamp\
    \ Seconds\n                32-bit unsigned integer representing the time, in\n\
    \                seconds since January 1, 1970, when the packet arrived.\n   \
    \     Timestamp Microseconds\n                32-bit unsigned integer representing\
    \ microsecond\n                resolution of packet arrival time.\n        Packet\
    \ Data\n                Variable-length field holding the packet that was\n  \
    \              captured, beginning with its datalink header.  The\n          \
    \      Datalink Type field of the file header can be used to\n               \
    \ determine how to decode the datalink header.  The length\n                of\
    \ the Packet Data field is given in the Included Length\n                field.\n\
    \        Pad\n                Variable-length field holding zero or more octets\
    \ that\n                pads the packet record out to a convenient boundary.\n"
- title: 5.  Data Format
  contents:
  - "5.  Data Format\n   All integer values are stored in \"big-endian\" order, with\
    \ the high-\n   order bits first.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brent Callaghan\n   Sun Microsystems, Inc.\n   2550 Garcia\
    \ Avenue\n   Mailstop UMTV05-44\n   Mountain View, CA 94043-1100\n   Phone: 1-415-336-1051\n\
    \   EMail: brent.callaghan@eng.sun.com\n   Robert E. Gilligan\n   Sun Microsystems,\
    \ Inc.\n   2550 Garcia Avenue\n   Mailstop UMTV05-44\n   Mountain View, CA 94043-1100\n\
    \   Phone: 1-415-336-1012\n   EMail: bob.gilligan@eng.sun.com\n"
