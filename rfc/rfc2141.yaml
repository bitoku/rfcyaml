- title: __initial_text__
  contents:
  - '                               URN Syntax

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Uniform Resource Names (URNs) are intended to serve as persistent,\n\
    \   location-independent, resource identifiers. This document sets\n   forward\
    \ the canonical syntax for URNs.  A discussion of both existing\n   legacy and\
    \ new namespaces and requirements for URN presentation and\n   transmission are\
    \ presented.  Finally, there is a discussion of URN\n   equivalence and how to\
    \ determine it.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Uniform Resource Names (URNs) are intended to serve as persistent,\n\
    \   location-independent, resource identifiers and are designed to make\n   it\
    \ easy to map other namespaces (which share the properties of URNs)\n   into URN-space.\
    \ Therefore, the URN syntax provides a means to encode\n   character data in a\
    \ form that can be sent in existing protocols,\n   transcribed on most keyboards,\
    \ etc.\n"
- title: 2. Syntax
  contents:
  - "2. Syntax\n   All URNs have the following syntax (phrases enclosed in quotes\
    \ are\n   REQUIRED):\n                     <URN> ::= \"urn:\" <NID> \":\" <NSS>\n\
    \   where <NID> is the Namespace Identifier, and <NSS> is the Namespace\n   Specific\
    \ String.  The leading \"urn:\" sequence is case-insensitive.\n   The Namespace\
    \ ID determines the _syntactic_ interpretation of the\n   Namespace Specific String\
    \ (as discussed in [1]).\n   RFC 1630 [2] and RFC 1737 [3] each presents additional\
    \ considerations\n   for URN encoding, which have implications as far as limiting\
    \ syntax.\n   On the other hand, the requirement to support existing legacy naming\n\
    \   systems has the effect of broadening syntax.  Thus, we discuss the\n   acceptable\
    \ syntax for both the Namespace Identifier and the Namespace\n   Specific String\
    \ separately.\n"
- title: 2.1 Namespace Identifier Syntax
  contents:
  - "2.1 Namespace Identifier Syntax\n   The following is the syntax for the Namespace\
    \ Identifier. To (a) be\n   consistent with all potential resolution schemes and\
    \ (b) not put any\n   undue constraints on any potential resolution scheme, the\
    \ syntax for\n   the Namespace Identifier is:\n   <NID>         ::= <let-num>\
    \ [ 1,31<let-num-hyp> ]\n   <let-num-hyp> ::= <upper> | <lower> | <number> | \"\
    -\"\n   <let-num>     ::= <upper> | <lower> | <number>\n   <upper>       ::= \"\
    A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" |\n              \
    \       \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" |\n    \
    \                 \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\"\
    \ |\n                     \"Y\" | \"Z\"\n   <lower>       ::= \"a\" | \"b\" |\
    \ \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" |\n                     \"i\"\
    \ | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" |\n                \
    \     \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" |\n      \
    \               \"y\" | \"z\"\n   <number>      ::= \"0\" | \"1\" | \"2\" | \"\
    3\" | \"4\" | \"5\" | \"6\" | \"7\" |\n                     \"8\" | \"9\"\n  \
    \ This is slightly more restrictive that what is stated in [4] (which\n   allows\
    \ the characters \".\" and \"+\").  Further, the Namespace\n   Identifier is case\
    \ insensitive, so that \"ISBN\" and \"isbn\" refer to\n   the same namespace.\n\
    \   To avoid confusion with the \"urn:\" identifier, the NID \"urn\" is\n   reserved\
    \ and MUST NOT be used.\n"
- title: 2.2 Namespace Specific String Syntax
  contents:
  - "2.2 Namespace Specific String Syntax\n   As required by RFC 1737, there is a\
    \ single canonical representation\n   of the NSS portion of an URN.   The format\
    \ of this single canonical\n   form follows:\n   <NSS>         ::= 1*<URN chars>\n\
    \   <URN chars>   ::= <trans> | \"%\" <hex> <hex>\n   <trans>       ::= <upper>\
    \ | <lower> | <number> | <other> | <reserved>\n   <hex>         ::= <number> |\
    \ \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" |\n                     \"a\"\
    \ | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n   <other>       ::= \"(\" | \")\"\
    \ | \"+\" | \",\" | \"-\" | \".\" |\n                     \":\" | \"=\" | \"@\"\
    \ | \";\" | \"$\" |\n                     \"_\" | \"!\" | \"*\" | \"'\"\n   Depending\
    \ on the rules governing a namespace, valid identifiers in a\n   namespace might\
    \ contain characters that are not members of the URN\n   character set above (<URN\
    \ chars>).  Such strings MUST be translated\n   into canonical NSS format before\
    \ using them as protocol elements or\n   otherwise passing them on to other applications.\
    \ Translation is done\n   by encoding each character outside the URN character\
    \ set as a\n   sequence of one to six octets using UTF-8 encoding [5], and the\n\
    \   encoding of each of those octets as \"%\" followed by two characters\n   from\
    \ the <hex> character set above. The two characters give the\n   hexadecimal representation\
    \ of that octet.\n"
- title: 2.3 Reserved characters
  contents:
  - "2.3 Reserved characters\n   The remaining character set left to be discussed\
    \ above is the\n   reserved character set, which contains various characters reserved\n\
    \   from normal use.  The reserved character set follows, with a\n   discussion\
    \ on the specifics of why each character is reserved.\n   The reserved character\
    \ set is:\n   <reserved>    ::= '%\" | \"/\" | \"?\" | \"#\"\n"
- title: 2.3.1 The "%" character
  contents:
  - "2.3.1 The \"%\" character\n   The \"%\" character is reserved in the URN syntax\
    \ for introducing the\n   escape sequence for an octet.  Literal use of the \"\
    %\" character in a\n   namespace must be encoded using \"%25\" in URNs for that\
    \ namespace.\n   The presence of an \"%\" character in an URN MUST be followed\
    \ by two\n   characters from the <hex> character set.\n   Namespaces MAY designate\
    \ one or more characters from the URN\n   character set as having special meaning\
    \ for that namespace.  If the\n   namespace also uses that character in a literal\
    \ sense as well, the\n   character used in a literal sense MUST be encoded with\
    \ \"%\" followed\n   by the hexadecimal representation of that octet.  Further,\
    \ a\n   character MUST NOT be \"%\"-encoded if the character is not a reserved\n\
    \   character.  Therefore, the process of registering a namespace\n   identifier\
    \ shall include publication of a definition of which\n   characters have a special\
    \ meaning to that namespace.\n"
- title: 2.3.2 The other reserved characters
  contents:
  - "2.3.2 The other reserved characters\n   RFC 1630 [2] reserves the characters\
    \ \"/\", \"?\", and \"#\" for particular\n   purposes. The URN-WG has not yet\
    \ debated the applicability and\n   precise semantics of those purposes as applied\
    \ to URNs. Therefore,\n   these characters are RESERVED for future developments.\
    \  Namespace\n   developers SHOULD NOT use these characters in unencoded form,\
    \ but\n   rather use the appropriate %-encoding for each character.\n"
- title: 2.4 Excluded characters
  contents:
  - "2.4 Excluded characters\n   The following list is included only for the sake\
    \ of completeness.\n   Any octets/characters on this list are explicitly NOT part\
    \ of the URN\n   character set, and if used in an URN, MUST be %encoded:\n   <excluded>\
    \ ::= octets 1-32 (1-20 hex) | \"\\\" | \"\"\" | \"&\" | \"<\"\n             \
    \     | \">\" | \"[\" | \"]\" | \"^\" | \"`\" | \"{\" | \"|\" | \"}\" | \"~\"\n\
    \                  | octets 127-255 (7F-FF hex)\n   In addition, octet 0 (0 hex)\
    \ should NEVER be used, in either\n   unencoded or %-encoded form.\n   An URN\
    \ ends when an octet/character from the excluded character set\n   (<excluded>)\
    \ is encountered.  The character from the excluded\n   character set is NOT part\
    \ of the URN.\n"
- title: 3. Support of existing legacy naming systems and new naming systems
  contents:
  - "3. Support of existing legacy naming systems and new naming systems\n   Any namespace\
    \ (existing or newly-devised) that is proposed as an\n   URN-namespace and fulfills\
    \ the criteria of URN-namespaces MUST be\n   expressed in this syntax.  If names\
    \ in these namespaces contain\n   characters other than those defined for the\
    \ URN character set, they\n   MUST be translated into canonical form as discussed\
    \ in section 2.2.\n"
- title: 4. URN presentation and transport
  contents:
  - "4. URN presentation and transport\n   The URN syntax defines the canonical format\
    \ for URNs and all URN\n   transport and interchanges MUST take place in this\
    \ format. Further,\n   all URN-aware applications MUST offer the option of displaying\
    \ URNs\n   in this canonical form to allow for direct transcription (for example\n\
    \   by cut and paste techniques).  Such applications MAY support display\n   of\
    \ URNs in a more human-friendly form and may use a character set\n   that includes\
    \ characters that aren't permitted in URN syntax as\n   defined in this RFC (that\
    \ is, they may replace %-notation by\n   characters in some extended character\
    \ set in display to humans).\n"
- title: 5. Lexical Equivalence in URNs
  contents:
  - "5. Lexical Equivalence in URNs\n   For various purposes such as caching, it's\
    \ often desirable to\n   determine if two URNs are the same without resolving\
    \ them. The\n   general purpose means of doing so is by testing for \"lexical\n\
    \   equivalence\" as defined below.\n   Two URNs are lexically equivalent if they\
    \ are octet-by-octet equal\n   after the following preprocessing:\n          \
    \ 1. normalize the case of the leading \"urn:\" token\n           2. normalize\
    \ the case of the NID\n           3. normalizing the case of any %-escaping\n\
    \   Note that %-escaping MUST NOT be removed.\n   Some namespaces may define additional\
    \ lexical equivalences, such as\n   case-insensitivity of the NSS (or parts thereof).\
    \  Additional lexical\n   equivalences MUST be documented as part of namespace\
    \ registration,\n   MUST always have the effect of eliminating some of the false\n\
    \   negatives obtained by the procedure above, and MUST NEVER say that\n   two\
    \ URNs are not equivalent if the procedure above says they are\n   equivalent.\n"
- title: 6. Examples of lexical equivalence
  contents:
  - "6. Examples of lexical equivalence\n   The following URN comparisons highlight\
    \ the lexical equivalence\n   definitions:\n           1- URN:foo:a123,456\n \
    \          2- urn:foo:a123,456\n           3- urn:FOO:a123,456\n           4-\
    \ urn:foo:A123,456\n           5- urn:foo:a123%2C456\n           6- URN:FOO:a123%2c456\n\
    \   URNs 1, 2, and 3 are all lexically equivalent.  URN 4 is not\n   lexically\
    \ equivalent any of the other URNs of the above set.  URNs 5\n   and 6 are only\
    \ lexically equivalent to each other.\n"
- title: 7. Functional Equivalence in URNs
  contents:
  - "7. Functional Equivalence in URNs\n   Functional equivalence is determined by\
    \ practice within a given\n   namespace and managed by resolvers for that namespeace.\
    \ Thus, it is\n   beyond the scope of this document.  Namespace registration must\n\
    \   include guidance on how to determine functional equivalence for that\n   namespace,\
    \ i.e. when two URNs are the identical within a namespace.\n"
- title: 8. Security considerations
  contents:
  - "8. Security considerations\n   This document specifies the syntax for URNs. \
    \ While some namespaces\n   resolvers may assign special meaning to certain of\
    \ the characters of\n   the Namespace Specific String, any security consideration\
    \ resulting\n   from such assignment are outside the scope of this document. \
    \ It is\n   strongly recommended that the process of registering a namespace\n\
    \   identifier include any such considerations.\n"
- title: 9. Acknowledgments
  contents:
  - "9. Acknowledgments\n   Thanks to various members of the URN working group for\
    \ comments on\n   earlier drafts of this document.  This document is partially\n\
    \   supported by the National Science Foundation, Cooperative Agreement\n   NCR-9218179.\n"
- title: 10. References
  contents:
  - "10. References\n   Request For Comments (RFC) and Internet Draft documents are\
    \ available\n   from <URL:ftp://ftp.internic.net> and numerous mirror sites.\n\
    \   [1]         Sollins, K. R., \"Requirements and a Framework for\n         \
    \      URN Resolution Systems,\" Work in Progress.\n   [2]         Berners-Lee,\
    \ T., \"Universal Resource Identifiers in\n               WWW,\" RFC 1630, June\
    \ 1994.\n   [3]         Sollins, K. and L. Masinter,  \"Functional Requirements\n\
    \               for Uniform Resource Names,\" RFC 1737.\n               December\
    \ 1994.\n   [4]         Berners-Lee, T., R. Fielding, L. Masinter, \"Uniform\n\
    \               Resource Locators (URL),\"  Work in Progress.\n   [5]        \
    \ Appendix A.2 of The Unicode Consortium, \"The\n               Unicode Standard,\
    \ Version 2.0\", Addison-Wesley\n               Developers Press, 1996.  ISBN\
    \ 0-201-48345-9.\n"
- title: 11. Editor's address
  contents:
  - "11. Editor's address\n      Ryan Moats\n      AT&T\n      15621 Drexel Circle\n\
    \      Omaha, NE 68135-2358\n      USA\n      Phone:  +1 402 894-9456\n      EMail:\
    \  jayhawk@ds.internic.net\n"
- title: Appendix A. Handling of URNs by URL resolvers/browsers.
  contents:
  - "Appendix A. Handling of URNs by URL resolvers/browsers.\n   The URN syntax has\
    \ been defined so that URNs can be used in places\n   where URLs are expected.\
    \  A resolver that conforms to the current URL\n   syntax specification [3] will\
    \ extract a scheme value of \"urn:\" rather\n   than a scheme value of \"urn:<nid>\"\
    .\n   An URN MUST be considered an opaque URL by URL resolvers and passed\n  \
    \ (with the \"urn:\" tag) to an URN resolver for resolution.  The URN\n   resolver\
    \ can either be an external resolver that the URL resolver\n   knows of, or it\
    \ can be functionality built-in to the URL resolver.\n   To avoid confusion of\
    \ users, an URL browser SHOULD display the\n   complete URN (including the \"\
    urn:\" tag) to ensure that there is no\n   confusion between URN namespace identifiers\
    \ and URL scheme\n   identifiers.\n"
