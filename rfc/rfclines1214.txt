Abstract This RFC documents a MIB for use with CMIP, either over pure OSI stacks or with the CMIP over TCP specification.
It redefines objects comprised by the second revision of the Management Information Base for Network Management of TCP/IP based internets: MIB II so as to conform to the OSI structure of management information.
This document is a product of the IETF OIM working group.
This memo defines the management information base (MIB) for use with the OSI network management protocol in TCP/IP based internets.
It formats the Management Information Base (MIB II) in OSI templates and adds variables necessary for use with the OSI management protocol.
Together with internet memos that define agreements for using the OSI management protocol to manage TCP/IP internets (RFC 1189) [3], the management information base: MIB II, and OSI standards defining the structure of management information (ISO/IEC DIS 10165) [4,5,6]
, these documents provide an OSI compatible architecture and system for managing TCP/IP based internets and in particular the Internet community.
This OSI version of the MIB specification is an incremental refinement of MIB II.
It has been designed according to the following policy:  first, maintain compatibility with MIB II by including objects in MIB II without changes to their registered identifiers, syntax, and behaviour;
second, format the MIB II using the OSI structure of information defined templates;  third, add attributes necessary for identification using the OSI management protocol;  fourth, identify object instances in a manner which is compatible with development of a common application programming interface for both CMIP and SNMP;  and finally, define notifications (events), including those defined by SNMP (RFC 1157) [14], deemed necessary for management.
It is expected that the MIB will grow over time to accommodate the changing needs of the Internet.
As reported in RFC 1109, Report of the Second Ad Hoc Network Management Review Group [13], the requirements for SNMP and OSI frameworks were more different than anticipated.
Therefore, the requirement for compatibility between the SMI/MIB for both frameworks was suspended.
This action allowed both frameworks to independently define the MIB according to their SMI requirements and views of management.
The SNMP response included development of MIB II.
The OSI response is this document which builds on the excellent work done in MIB II, and adds to it attributes necessary to map into the OSI SMI.
The OIM network management framework consists of: Open Systems Interconnection Structure of Management Information: Parts 1 4, ISO/IEC DIS 10165
[4,5,6], with slight modifications to maintain compatibility with RFC 1155 [11];  OSI Internet Management: Management Information Base, this memo; and the OSI Common Management Information Service (CMIS) [7] and  Common Management Information Protocol (CMIP)
Additions to MIB II Additions to MIB II fall into the following categories: the addition of the managed object class "top" from which all object classes are derived; additions for object instance identification purposes according to the OSI SMI;  additions for generation of asynchronous events; the addition of name bindings which  define the binding between objects in the containment (naming) hierarchy; and the addition of proposed changes to RFC 1158 that are expected to be accepted by the IETF [16].
2.1 Structure of the OIM Subtree
The oim subtree structure is defined below.
Note that the "cmot" subtree has been relabeled to "oim".
The OSI defined managed object class "top" [5], as defined by OSI, has been added to the MIB.
This managed object class is the root of the inheritance hierarchy.
The class "top" contains attributes that are inherited by all objects in the MIB.
Pending the progression of ISO/IEC DIS 10165 to an International Standard status, "top" and its associated attributes are registered in Appendix 3.
2.3 Additions for Object Instance Identification
The conventions for identifying objects in the OIM MIB II for use with CMIP are defined below.
The distinguished name of an object shall consist of a sequence of relative distinguished names, one for each object on the containment path from the root to the object.
Each relative distinguished name shall contain exactly one attribute, the "naming" attribute for the corresponding class, as specified by a NAME BINDING template.
The CMIP ObjectInstance shall be encoded using the distinguishedName choice.
Object classes for which there is only a single instance normally implemented in a managed system, other than the "system" managed object class, shall use an empty string for their naming attribute value, i.e., a string of length zero.
The format of the naming attribute for the "system" managed object class and object classes which normally have multiple instances, e.g., table entries, are defined in the attribute templates for the naming attributes of those classes.
The formats for naming attributes of table entries are compatible with instance identification conventions used by SNMP, thereby facilitating the development of a common application programming interface that may interface to either protocol.
The naming attributes for each OIM MIB II managed object class listed in section 5 may be determined by reference to the NAME BINDING templates listed in section 8.
The naming attribute definitions can be found in the alphabetical listing of all attributes in section 6.
The following attributes have been defined for MIB II object classes for purposes of object instance identification.
2.4 Events Events have been defined in accordance with the OSI SMI.
These events include those defined for SNMP.
The OSI SMI requires that events (notifications) are part of a specific managed object class definition.
Accordingly the SNMP defined events have been assigned to specific objects within the MIB.
The OSI SMI requires that object classes be bound into the containment hierarchy for purposes of naming.
The binding must specify for the managed object class: a)
the object which is superior to it in the containment hierarchy; and b) an attribute in the managed object class that is used to distinguish instances of the object at a given level in the containment hierarchy.
The containment tree begins with "root".
Agents in managed systems will consider root to be immediately above the "system" object in the containment hierarchy.
They may ignore any relative distinguished names that precede the relative distinguished name for "system".
The name bindings for objects in the OIM MIB II are specified in section 8.
2.6  Changes from RFC 1158
The proposed successor to RFC 1158 [16] contains several minor additions that have been incorporated into this document.
The sysLocation attribute of the system managed object class is changed to GET REPLACE.
The ipRouteMetric5 and ipRouteInfo attributes are added to the ipRouteEntry managed object class.
The textual descriptor of the snmpEnableAuthTraps is changed to snmpEnableAuthenTraps.
The PhysAddress textual convention is introduced to represent media addresses.
The definition of sysServices is clarified.
New ifType values (29 32) are defined.
In addition, the textual descriptor for the DS1 and E1 interface types is corrected.
The definition of ipForwarding is clarified.
The definition of ipRouteType is clarified.
The tcpConnState attribute is now GET REPLACE, to support deletion of the TCB associated with a TCP connection.
The definition of this object is clarified to explain this usage.
The definition of egpNeighEventTrigger is clarified.
The definition of several of the variables in the new snmp group are clarified.
In addition, the snmpInBadTypes and snmpOutReadOnlys objects are no longer present.
(However, the object identifiers associated with those objects are reserved to prevent future use.)
The definition of snmpInReadOnlys is clarified.
The ipRoutingDiscards attribute is added to the ip object.
The optional use of an implementation dependent, small positive integer is disallowed when identifying instances of the IP address and routing tables.
The format of OSI templates is defined in ISO/IEC DIS 10165 4 [6], Open Systems Interconnection Structure of Management Information Part 4
: Guidelines for Managed Object Definition.
The template definitions relevant to this document are included in Appendix 1. 4.
The Internet SMI objects are recast into OSI template form using the following conventions:
MIB II groups become OSI object classes, except for the "at" group which has no attributes.
Tables become OSI object classes.
Table entries become OSI object classes.
All other object types become OSI attributes and are assigned to object classes according to their association in MIB II.
The templates for the OIM MIB II object classes are listed in alphabetical order below.
atEntry  MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY atEntryPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES atEntryId
; CHARACTERIZED BY egpPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES
;;; REGISTERED AS  { mib 8}; egpNeighEntry MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY egpNeighEntryPkg PACKAGE   see
; REGISTERED AS  { egpNeighTable 1}; egpNeighTable MANAGED OBJECT CLASS DERIVED FROM   top; CHARACTERIZED BY egpNeighTablePkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES egpNeighTableId
GET;;; REGISTERED AS  { egp 5}; icmp MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY icmpPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES icmpId GET, icmpInMsgs
icmpOutTimestampReps GET, icmpOutAddrMasks    GET, icmpOutAddrMaskReps GET;;; REGISTERED AS  { mib 5}; ifEntry   MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY ifEntryPkg PACKAGE   see MIB II [16] for
REGISTERED AS  { ifTable 1}; ifTable MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY ifTablePkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES
;;; REGISTERED AS  { interface 2}; interfaces MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY interfacesPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES ifId
MANAGED OBJECT CLASS DERIVED FROM  top
GET REPLACE;;; REGISTERED AS  { ipNetToMediaTable 1}; ipNetToMediaTable
MANAGED OBJECT CLASS DERIVED FROM  top
; CHARACTERIZED BY ipNetToMediaTablePkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES ipNetToMediaTableId
;;; REGISTERED AS  { ip 22}; ipRouteEntry MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY ipRouteEntryPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES ipRouteEntryId
NOTIFICATIONS snmpAuthentFailureEvent;;; REGISTERED AS  {mib 11}; system MANAGED OBJECT CLASS DERIVED FROM top; CHARACTERIZED BY systemPkg PACKAGE
SEE MIB II [16] for attribute semantics ATTRIBUTES sysDescr
MAJOR HEALTH WARNING sysName is the   naming attribute and should not be   modified via remote management without   coordinated local system changes sysLocation
GET;;; REGISTERED AS { mib 6}; tcpConnEntry MANAGED OBJECT CLASS DERIVED FROM  top; CHARACTERIZED BY tcpConnEntryPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES tcpConnId
GET REPLACE, tcpConnLocalAddress GET, tcpConnLocalPort
GET;;; REGISTERED AS { tcp 13 }; udp MANAGED OBJECT CLASS DERIVED FROM   top; CHARACTERIZED BY udpPkg PACKAGE   see MIB II [16] for attribute semantics ATTRIBUTES udpId
Attribute Definitions Attribute templates for the attributes referenced in the managed object class templates of section 5 are listed here in alphabetical order.
atEntryId ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
<address>, where <index is the decimal   representation of atIfIndex and <address
The "1" subidentifier   indicates that the address is an IP address.
REGISTERED AS {attributes 3}; atIfIndex ATTRIBUTE WITH ATTRIBUTE SYNTAX
This attribute identifies the instance of   the address table  which is being used.
An empty string is used for a single   instance.
REGISTERED AS {attributes 2}; egpAs   ATTRIBUTE WITH ATTRIBUTE SYNTAX
An empty string is used for a single instance.
egpNeighAddr encoded in "dot notation".
REGISTERED AS {attributes 22}; egpNeighEventTrigger    ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
; egpNeighInMsgs  ATTRIBUTE WITH ATTRIBUTE
This attribute uniquely identifies the   egp neighbor table
An empty string is used for a single instance.
REGISTERED AS {attributes 17}; egpOutErrors ATTRIBUTE WITH ATTRIBUTE
This attribute uniquely identifies the   ICMP object instance
An empty string is used for a single instance.
REGISTERED AS {attributes 9}; icmpInAddrMaskReps ATTRIBUTE WITH ATTRIBUTE
; icmpOutTimestamps ATTRIBUTE WITH ATTRIBUTE
The decimal representation of ifIndex.
An empty string is used for a single instance.
REGISTERED AS {attributes 23}; ifIndex    ATTRIBUTE WITH ATTRIBUTE
; ifInOctets ATTRIBUTE WITH ATTRIBUTE
This attribute provides a unique id
which identifies the address table.
An empty string is used for a single instance.
REGISTERED AS {attributes 5}; ipAdEntAddr ATTRIBUTE WITH ATTRIBUTE
This attribute uniquely identifies the ip address   table entry.
REGISTERED AS {attributes 19}; ipDefaultTTL
An empty string is used for a single instance REGISTERED AS {attributes 4}; ipInAddrErrors ATTRIBUTE WITH ATTRIBUTE
where <interface> is the   decimal representation of ipNetToMediaIfIndex and   <address
REGISTERED AS {attributes 8}; ipNetToMediaIfIndex ATTRIBUTE WITH ATTRIBUTE SYNTAX    OIM Module.
3}; ipNetToMediaPhysAddress ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
2}; ipNetToMediaTableId  ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
This is the distinguishing attribute for the   Ip Net to Media Table.
An empty string is used for a single instance.
REGISTERED AS {attributes 7}; ipNetToMediaType ATTRIBUTE WITH ATTRIBUTE
4}; ipOutDiscards ATTRIBUTE WITH ATTRIBUTE SYNTAX
; ipReasmReqds ATTRIBUTE WITH ATTRIBUTE
; ipReasmTimeout ATTRIBUTE WITH ATTRIBUTE
This attribute identifies the ip route table entry.
The format is <dest>, where <dest> is   ipRouteDest represented in "dot notation.
REGISTERED AS {attributes 20}; ipRouteIfIndex ATTRIBUTE WITH ATTRIBUTE SYNTAX
ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
id which identifies the   Ip Routing Table instance.
An empty string is used for a single instance.
REGISTERED AS {attributes 6}; snmpEnableAuthenTraps   ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.SnmpEnableAuthenTraps
An empty string is used for a single instance.
REGISTERED AS {system 5}; sysObjectId
> is the decimal representation of   tcpConnLocalPort,
<raddr> is the "dot notation" representation of   tcpConnRemAddress, and  <rport
> is the decimal representation of   tcpConnRemPort.
REGISTERED AS {attributes 12}; tcpConnLocalAddress ATTRIBUTE WITH ATTRIBUTE
tcpConnState ATTRIBUTE WITH ATTRIBUTE SYNTAX  OIM Module.
This attribute defines a unique index of   tcpConnEntry in the TCP Connection Table
An empty string is used for a single instance.
REGISTERED AS {attributes 11}; tcpCurrEstab ATTRIBUTE WITH ATTRIBUTE
This attribute uniquely identified a tcp   object instance
An empty string is used for a single instance.
REGISTERED AS {attributes 10}; tcpInErrs ATTRIBUTE WITH ATTRIBUTE
tcpRtoAlgorithm ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
<address>, where <port> is the decimal   representation of udpLocalPort and <address
This attribute provides a unique id to   identify the UDP entity.
An empty string is used for a single instance.
REGISTERED AS {attributes 13}; udpInDatagrams ATTRIBUTE WITH ATTRIBUTE
udpLocalPort ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
ATTRIBUTE WITH ATTRIBUTE SYNTAX OIM Module.
This attribute defines a unique id   for the UDP Listener Table
An empty string is used for a single instance.
REGISTERED AS {attributes 14}; 6.
Notifications Notification templates for the notifications referenced in the managed object class templates of section 5 are listed here in alphabetical order.
coldStartEvent NOTIFICATION   clause 4.1.6.1 of RFC1157
emitted by system MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo REGISTERED AS {events 0}; egpNeighborLossEvent NOTIFICATION   clause 4.1.6.6 of RFC1157   with generic trap   5
The first VarBindList element   contains the name and value of the   egpNeighAddr of the affected   neighbor.
emitted by egpNeighEntry MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo; REGISTERED AS {events 5}; linkDownEvent NOTIFICATION   clause 4.1.6.3 of RFC1157
emitted by ifEntry   with generic trap   2 MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo; REGISTERED AS {events 2}; linkUpEvent NOTIFICATION   clause 4.1.6.4 of RFC1157
emitted by ifEntry   with generic trap   3 MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo; REGISTERED AS {events 3};
emitted by snmp MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo; REGISTERED AS {events 4};
entSpecificEvent NOTIFICATION   clause 4.1.6.7 of RFC1157
emitted by system MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo; REGISTERED AS {events 6}; warmStartEvent NOTIFICATION   clause 4.1.6.2 of RFC1157
emitted by system MODE    NON CONFIRMED; WITH INFORMATION SYNTAX OIM Module.
SnmpTrapInfo; REGISTERED AS {events 1}; 7.
The Containment Hierarchy Name Binding templates that define the containment hierarchy for the OIM MIB II are listed here in alphabetical order.
The containment hierarchy within a managed system begins at the "system" managed object.
NAMED BY SUPERIOR OBJECT CLASS
interfaces; WITH ATTRIBUTE   ifTableId; REGISTERED AS { nameForms 2}; ip nf  NAME
nf  NAME BINDING SUBORDINATE OBJECT
; NAMED BY SUPERIOR OBJECT
nf  NAME BINDING SUBORDINATE OBJECT
The ASN.1 syntax referenced by the attribute templates in section 6 are either defined in RFC1065 SMI, the Attribute ASN1Module of ISO/IEC DIS 10165 2, or in the OIM Module defined in this section.
This module includes some syntax definitions taken from the RFC1158 since they were not included in that document inside an ASN.1 module and hence could not be externally referenced.
Everything IMPORTS ObjectClass, ObjectInstance FROM CMIP 1{joint iso ccitt ms(9)
DisplayString is restricted to the NVT ASCII character set as   defined in pages 10 11 of RFC 854 "TELNET Protocol   Specification", May 1983 [15].
the event NetworkAddress, generic trap INTEGER {coldStart (0), warmStart (1), linkDown (2), linkUp (3), authenticationFailure (4),
END Appendix 1:  Notational Tools for Managed Object Definition
This section provides descriptions of the notational tools used to define the templates defined in this memorandum.
The text is excerpted and paraphrased from reference 6.
Only the templates used in this document are included here.
For a complete description of the notational tools specified for OSI management, see reference 6.
A1.1 Overview of Notational Tools
The "Templates" defined in this clause provide a common set of tools and a common format for the representation of the various aspects of a managed object class definition and its associated naming structure.
Formal definitions of each template will be found in clauses A1.3
A1.11 inclusive; the syntactic conventions used in these formal definitions are specified in clause A1.2.
Examples of the use of these tools may be found in Annex A (of 10165 4).
The structure and behaviour of a managed object class is primarily defined by means of the Managed Object Class Template.
This template identifies the inheritance relationships that exist between the class and other managed object classes, the packages of class specific behaviour, the attributes that are associated with the class, the notifications that the class may issue and the operations that may be performed upon the class.
In order to allow re use of parts of this specification in the specification of other managed object classes, additional templates are defined to provide for the specification of attributes (individual and group), behaviour, actions, notifications and conditional packages.
These other templates are "called up" by the Managed Object Class template by means of the referencing mechanism defined in clause A1.2; this mechanism allows references to be made in one standard to specifications that are contained in other standards, hence allowing "generic" specifications to be made available for use in managed object class definitions in addition to local specifications.
Templates may also be included "in line" if so desired.
The naming of a managed object class is defined by means of the Name Binding template.
This template identifies the managed object class being named and defines the relative distinguished name that will be used to name instances of the class in the context of a particular superior class.
This template also provides for the specification of relationships that exist between two object classes as a consequence of a particular name binding.
A1.2 Conventions Used in Template Definitions
If any such supporting syntactic definitions are required in order to complete the template definition, these appear following the keywords "supporting productions" at the end of the template definition.
Each instance of use of a template therefore declares a template  label by which that instance may be referenced from other templates, and if the REGISTERED AS clause is present, assigns a value of an ASN.1 OBJECT IDENTIFIER under which the instance has been registered; Semicolons are used to mark the end of each distinct element in the template.
In an instance of use of the template, any text inserted between a semicolon and the next valid keyword is assumed to be a comment; The notation used for representing object identifiers is the normal notation defined in ASN.1 for object identifier values; i.e., the production: object identifier  <
ASN.l ObjectIdentifierValue notation> is assumed to be a supporting production for all template definitions in this document; Further definitions, such as the nature of the element definitions, follow the syntactic definition of the template; Template labels shall be unique within the standard or document in which they are declared.
Where a template label is declared in document A and referenced in document B, the reference in document B shall be prefixed by the globally unique name of document A.
In the case of documents named by an internationally recognized naming authority such as [CCITT ISO/IEC], the registered name of the document shall be used as the identifier, such as [Recommendation X.722 ISO/IEC 10165 4].
Where a globally unique name is not already available, it is permissible to assign the value of an OBJECT IDENTIFIER to the referenced document, and use this value as a globally unique document name.
For example, the following template label: "ISO/IEC 10165/4":exampleObjectClass constitutes a globally unique label for the definition of exampleObjectClass contained in Annex A of 10165 4.
Label references that are not prefixed by a document identifier are assumed to refer to labels declared in the document in which the reference appears.
Whenever a template label is present in a template as a pointer to another template, it may be replaced by the entire text of the referenced template itself (including the template's label).
The Managed Object Class template forms the basis of the formal definition of a managed object.
Elements in the template allow the class to be placed at the appropriate node of the inheritance tree, the various attributes of the class to be specified, and the behaviour of the class to be defined.
The major elements of the definition are: Inheritance.
Each managed object class defines the superclass(es) from which it has been derived.
All characteristics of the superclass(es) are inherited by the subclass; the subclass definition may add to these characteristics (refinement) but may not remove any characteristics of the superclass.
Ultimately, all classes are subclasses of TOP; Allomorphs.
If the class supports allomorphism, the set of classes that are legitimate allomorphic views of the class must be defined.
These classes must all be superclasses of the class being defined; Mandatory Packages.
The managed object class definition includes the packages of behaviour, attributes, operations and notifications that provide a complete specification of the behaviour that is common to all instances of the class; Conditional Packages.
The managed object class definition includes the specification of packages of behaviour, attributes, operations and notifications that are present or absent in instances of that class as a consequence of a specified condition; Note: Attributes, Operations and Notifications that form part of a class definition may only be omitted from an instance of that class if they are defined as features of a Conditional Package and are omitted in accordance with the condition defined for that package.
The managed object class definition must include a class name which may be used to refer to the class in CMIP.
This is achieved by registration of an Object Identifier value which corresponds to the class.
A1.3.2 Template Structure <class label>
REGISTERED AS < object identifier>; A1.3.3 Supporting Definitions DERIVED FROM <class label>[,<class label>]
The DERIVED FROM clause shall be present in all managed object class definitions other than "top".
It is therefore the case that "top" is a superclass of all classes other than itself.
The class label identifies a managed object class from which the managed object class has been derived; i.e., a managed object class which is one of the object class's parents in the inheritance hierarchy.
As multiple inheritance is permitted, a managed object class may have one or more parent classes.
The process of inheritance (specialization) requires all the characteristics of the superclass(es) other than DERIVED FROM and ALLOMORPHIC SET to be included in the definition of the subclass.
If it is intended that the subclass be allomorphic, the definition of the subclass shall include a ALLOMORPHIC SET clause that explicitly defines the set of classes that the subclass is allomorphic to.
Where multiple inheritance results in the same element definition being multiply imported (as could happen, for example, if two parent superclasses contain the same attribute), the subclass is assumed to contain a single copy of the definition concerned.
Characteristics that are inherited from a superclass shall not be repeated in the documentation of the subclass unless one of the techniques described in ISO/IEC 10165 4 for extending or modifying an element of the superclass is being used.
The DERIVED FROM clause is therefore presumed to automatically import all inheritable elements of definition from the superclass definition(s).
There may be augmented or modified by elements defined within the CHARACTERISED BY, CONDITIONAL PACKAGES, and PARAMETER constructs.
ALLOMORPHIC SET <class label>[,<class label>]
The Allomorphic Set allows a set of superclasses to be identified that are "backwards compatible" with the managed object class.
Thus, if managed object class A identifies classes B and C as members of its allomorphic set, it is possible to operate on an instance of class A as if it were an instance of class B or C.
The definition of allomorphic forms allows, for example, the definition of enhanced versions of a managed object class that are backwards compatible with previous versions.
The class label shall identify the class label of a managed object class definition that is a superclass of the managed object class that is being defined.
CHARACTERIZED BY <package label>[,<package label]
This construct, if present, allows one or more mandatory packages of behaviour, attributes, operations, and notifications to be included in the managed object class definition, in addition to those that are present as a result of the Derived From construct.
CONDITIONAL PACKAGES <package label>  PRESENT
if one or more conditional packages are to be included in the managed object class definition.
The package label identifies the package definition that is applicable.
The condition definition is a description of the condition that, if true, requires that the package be included in an instance of the class.
The condition shall refer to a documented feature of the definition of the underlying resource or a related standard which is permitted to be present or absent in an implementation.
If present, this construct permits the definition of parameters to be included in the object class definition in addition to any inherited parameters.
The object identifier value provides a globally unique identifier for the object class definition.
This value is used in the management protocol when it is necessary to identify the object class.
This template allows a package of behaviour definitions, attributes, operations and notifications to be defined for subsequent insertion into a managed object class template under the Characterized By and Conditional Packages constructs.
The major elements of the definition are: Behaviour.
The managed object class definition provides a complete specification of the behaviour of the object.
This includes: The effect of the Operations upon the managed object; Any constraints that are placed on operations in order to satisfy consistency rules, and in particular, the rules under which Creation and Deletion of managed objects may be performed and the consequences of these operations; A specification of how instances of a managed object class interact with each other, related, managed objects of the same or different classes.
A complete definition of any other aspects of the behaviour of the managed object class.
The set of attributes that the package contains must be defined; Operations and Notifications.
The package definition specifies which notifications instances of the class that make use of this package shall be able to generate, which operations instance of the class shall be capable of performing, and in the case of attribute related operations, which attributes shall be available to be operated upon.
The operations identified in the package definition are the operation types defined in the Information Model
In the case of Actions and Notifications, further definitions are required in order to characterise their functionality, as described in clauses A1.10, A1.11.
The create and delete operations are defined as part of the Name Binding template described in clause A1.6, a creation and deletion of an object is closely bound to the containment relationship between superior and subordinate objects, rather than to all instances of a managed object class.
Template Structure < package label
[REGISTERED AS < object identifier>]; supporting productions propertylist   [REPLACE WITH DEFAULT]
[DEFAULT VALUE < value definition > ]
[PERMITTED VALUES <value set syntax label>]
Behaviour Definitions allow the behaviour (semantics) of the managed object class to be completely described.
These definitions relate the external view of the object (its operations and notifications) to its internal operation.
The definition label identifies an instance of use of the Behaviour template.
It should not be assumed that the behaviour defined by this clause is testable using existing conformance test technology.
This allows attributes to be included in the package definition.
The propertylist that follows each attribute label defines the set of operations that may be performed on the managed object with reference to the attribute, and defines any default, permitted or required value(s) associated with the attribute.
The Replace With Default property is included if the property has a default value that may be set by means of the Replace With Default Value operation.
The value definition used to specify the default value
shall be a value reference name, using the Externaltypereference notation defined in ISO 8824.
If the PERMITTED VALUES property is present, the value set  syntax  label specifies any restrictions on the possible values that the attribute may take.
The value set syntax label shall be a type reference name, using the ExternaltypeReference notation defined in ISO 8824.
The form of the specification referenced shall be a subtype of the attribute syntax type, defined using the ASN.1 subtype notation.
Note:  The Permitted Values construct is required only in attribute definitions where it is necessary to specify a restriction on the value set permitted by the specification of the Attribute Syntax, e.g., when modifying an existing attribute specification.
If the REQUIRED VALUES property is present, the value set  syntax  label specifies any restrictions on the possible values that the attribute may take.
The value set syntax label shall be a type reference name, using the ExternaltypeReference notation defined in ISO 8824.
The form of the specification referenced shall be a subtype of the attribute syntax type, defined using the ASN.1 subtype notation.
This property defines the value set required for conformance.
The parameter labels allow parameters to be associated with the operations permitted on the attribute.
ATTRIBUTE GROUPS <group label> [<attribute label>]
[,<group label> [<attribute label>] ]
This allows a set of attributes groups to be identified as part of the package.
The original definition of an attribute group may be extended by the addition of further attribute labels.
If present, the action labels identify the set of action definitions that are included in the package.
The behaviour definitions shall specify the effect of these Actions upon managed objects.
The parameter labels allow parameters to be associated with the Action.
Present if any Notifications are included in the package.
The notification labels identify the Notification definitions that are applicable.
The behaviour definitions shall specify the circumstances under which those Notifications are generated by a managed object.
The parameter labels allow parameters to be associated with the Notification.
The object identifier value, if present, provides a globally unique identifier for the package definition, and registers the groupings of behaviour definitions, attributes, attribute groups, actions and notifications that the package defines.
This value is required in cases where the package is referenced by a conditional packages construct in an object class template and the package contains a behaviour construct or more than one element, in which case the value of the object identifier is included in the conditional packages attribute of any instances of the object class that are created with the package present.
This template permits the specification and registration of parameter syntaxes and associated behaviour that may be associated with particular operations and notifications within the managed object class and conditional package templates defined in clauses A1.3 and A1.4.
This mechanism is not used in the OIM MIB II.
This template allows alternative naming structures to be defined for managed objects of a given managed object class by means of name bindings.
The name binding allows an attribute to be selected as the naming attribute for a given subordinate class/superior class pair.
The attribute selected must be an attribute of the subordinate object that is present in all instances of the specified managed object class.
This attribute is used for the purpose of constructing the relative distinguished name (RDN) of subordinate objects of that class.
An RDN is constructed from the OBJECT IDENTIFIER assigned to that attribute type and the value of the instance of the attribute.
The Distinguished Name of the subordinate object is obtained by appending its RDN to the Distinguished Name of its superior object.
Name bindings are not considered to be part of the definition of either of the managed object classes that they reference.
A given managed object class may have more than one name binding associated with it.
The set of name bindings defines the set of possible naming relationships with superior managed objects and the set of managed object classes from which subordinate object classes may be instantiated.
Name Bindings may be specified for a managed object class subsequent to the specification of the managed object class itself.
A1.6.2  Template Structure <name binding label>
NAME BINDING SUBORDINATE OBJECT CLASS <class label>;
This defines the managed object class being named.
The name of an instance of the subordinate managed object class is constructed by concatenating the distinguished name of the superior managed object class with the relative distinguished name of the subordinate managed object class.
NAMED BY SUPERIOR OBJECT CLASS <class label
This defines a managed object class that may contain instances of the subordinate managed object class.
This defines the attribute that shall be used, in the context of this name binding, to construct the relative distinguished name for the subordinate managed object class.
Values of this attribute shall be represented by single valued data types, complying with the restrictions specified in ISO 10165 1;  if no naturally suitable attribute is available for use as a naming attribute, object designers are encouraged to provide a naming attribute of type Graphic String.
If present, this clause permits any behavioural impact imposed as a consequence of the name binding to be defined.
The behaviour  definition label identifies the constraint definition concerned; the constraint is therefore expressed using the behaviour template.
The create modifier values specify the options available on creation.
The permitted create  modifiers are as follows: with reference object.
If present, a reference object may be specified on creation as a source of default values and to specify choice of Conditional Packages; with automatic  instance  naming.
If present, the CREATE request may omit to specify the instance name of the new object instance.
The behaviour definitions shall specify what course of action is taken when there is a choice of Name Forms that may be applied to the new object instance.
If neither create modifier is specified, the instance name and all necessary default values shall be specified in the CREATE request.
The parameter labels allows parameters to be associated with the CREATE operation.
DELETE <delete modifier> [<parameter label>]  Present if it is permitted to delete instances of the managed object class referenced by the SUBORDINATE OBJECT CLASS construct in the context of this name binding.
The delete  modifier indicates the behaviour of a managed object of that class if the managed object is deleted.
The permitted delete modifiers are: only if no contained objects.
If specified, any contained managed objects must be explicitly deleted prior to deletion of the containing managed object, i.e., a DELETE request will cause an error if there are contained managed objects; delete contained objects.
If specified, a DELETE request applied to an instance of the managed object class has the effect of deleting contained objects also.
If there are constraints on deletion relative to other relationships or conditions, these are specified as part of the behaviour of the managed object class.
The parameter labels allows parameters to be associated with the DELETE operation.
A1.7 Attribute Template A1.7.1  Overview
This template is used to define individual attribute types.
These definitions may be further combined by the Attribute Group template where attribute groups are required.
The major elements of the definition are: Derivation.
The definition of an attribute type may modify or constrain the definition of another attribute type.
The definition of an attribute type must include the definition of the syntax that will be used to convey values of the attribute in CMIP.
This definition is achieved by means of a reference to an ASN.l Type Definition.
The definition of an attribute syntax indicates whether the attribute value is a single or set valued attribute type.
If the base type is SET OF, the attribute is a set valued type, otherwise it is a single valued type; Value Matching.
The definition of an attribute type may include the valid ways in which the value of an instance of the type may be tested, i.e., whether the attribute may be tested for equality, magnitude, etc..
Value matching on some attribute types may require the specification of how a matching rule is defined to operate, as part of the attribute's behaviour definition.
The absence of any matching rules in the attribute definition implies that matching of values is undefined; Behaviour.
The attribute definition may include definition of attribute specific behaviour; i.e., behaviour that applies to an attribute type regardless of which managed object class
contains instances of tho attribute type; Attribute type name.
An Object Identifier value shall be allocated to each attribute that is to be included in the definition of a managed object class.
This value is used in CMIP to identify the attribute.
Set Intersection derived from construct   DERIVED FROM  <attribute label >
; with attribute syntax construct   WITH ATTRIBUTE SYNTAX <syntax label>
; A1.7.3 Supporting Definitions DERIVED FROM <attribute label>
If this element is present, the attribute definition takes as a starting point all aspects of the definition referenced by attribute label, including any that it may in turn have derived from other attribute definitions.
The rules for interpreting the effect of presence of any of the other elements of the attribute template under these circumstances are as follows:
WITH ATTRIBUTE SYNTAX is not permitted to be present.
The attribute syntax shall be the attribute syntax of the attribute from which this attribute has been derived.
; MATCHES FOR: The resultant set of matching rules shall be the logical OR of the matching rules specified by this construct with any derived matching rules; BEHAVIOUR is assumed to extend any derived behaviour definitions; REGISTERED AS is assumed to replace any registration derived from other definitions.
The definition of an attribute based on an existing attribute definition; The addition of further constraints to an existing attribute definition.
WITH ATTRIBUTE SYNTAX <syntax label>
This element, present only if the DERIVED FROM construct is absent, identifies the ASN.1 data type that describes how instances of the attribute value are carried in protocol.
The syntax label shall be an ASN.l Externaltypereference.
The ASN.1 data type also defines the data type of the attribute itself.
If the base type of the syntax is set of, the attribute is a set valued attribute.
All other ASN.l data types, including set, sequence of, and sequence type, define single valued attribute types.
This element defines the types of test that may be applied to a value of the attribute as part of a Filter operation.
Matching for the presence of an attribute is implicitly permitted for all attributes.
For all other types of matching, if this clause is not present, matching is undefined and is therefore not permitted on the attribute.
If present, the attribute value may be tested for equality against a given value; Ordering.
If present, the attribute value may be tested against a given value in order to determine which has the greater value; Substrings.
If present, the attribute value may be tested against a given substring value in order to determine its presence or absence in the attribute value; Set Comparison.
If present, the attribute value may be tested against a given value in order to determine set equality or subset/superset relationships between the values; Set Intersection.
If present, the attribute value may be tested against a given value in order to determine the presence or absence of a non null set intersection between the two values.
Any behaviour that is generic to this attribute type may be defined by means of this behaviour clause.
The behaviour definition shall include any additional specification that is required in order to define how the chosen set of matching rules are applied to the attribute definition.
Behaviour that is specific to the managed object class is defined in the behaviour clause of the managed object class template.
It should not be assumed that the behaviour defined by this clause is testable using existing conformance test technology.
If present, the object identifier provides a globally unique identifier for the attribute definition;
this includes all elements referenced either directly, or indirectly by the Derived From, With Attribute Syntax, Matches For and Behaviour constructs, where present.
This value is used in the management protocol when it is necessary to identify the attribute type.
If this construct is omitted, the attribute definition shall not be referenced in a managed object class definition without further constraints being applied in another attribute definition.
This template is used to define the behaviour and syntax associated with a particular Notification type.
The main features of the definition are as follows: Behaviour.
The definition of a Notification type must specify the circumstances under which a notification of the type is generated; Mode of operation.
The definition of a notification type shall indicate whether the notification may be confirmed, unconfirmed or both; Syntax Definitions.
The definition of the Notification type must specify any syntax that will be used to convey the CMIS Event Information and Event Reply parameters in CMIP.
These syntaxes are defined by means of ASN.1 data types.
The template also permits the allocation of attribute values to fields in the syntax; Notification naming.
The value of the Object Identifier associated with the Notification definition is used to identify the Event type in CMIP.
[WITH INFORMATION SYNTAX <syntax label>
[WITH REPLY SYNTAX <syntax label>;] REGISTERED AS <object identifier>; supporting productions confirmation mode
Supporting Definitions BEHAVIOUR <behaviour definition label
This defines the behaviour of the notification, the data that must be specified with the notification, the results that the notification may generate and their meaning.
The behaviour  definition label references a behaviour description defined by use of the Behaviour Template.
It should not be assumed that the behaviour defined by this clause is testable using existing conformance test technology.
This defines the allowable mode of operation of the notification type, as follows:
The notification type shall operate in the confirmed mode only; NON CONFIRMED:
The notification type shall operate in the non confirmed mode only; CONFIRMED AND NON CONFIRMED:
The notification type may operate in either confirmed mode or non confirmed mode.
The parameter labels allow parameters to be associated with with the behaviour of the attribute type.
The syntax  label shall be a type reference name, using the Externaltypereference notation defined in ISO 8824.
If absent, there is no information associated with the notification invocation.
If the AND ATTRIBUTE IDS option is used, the field  name label shall be a label defined within the abstract syntax referenced by the syntax that appears in the construct.
The data type that is labeled by the field name is used to carry values of the attribute referenced by attribute label.
The ASN.1 data type of the attribute shall be the same as the data type referenced by field name.
WITH REPLY SYNTAX <syntax label> If a syntax label is present, this identifies the ASN.1 data type that describes the structure of the notification reply that is carried in management protocol.
The syntax label shall be a type reference name, using the Externaltypereference notation defined in ISO 8824.
If absent, there is no information associated with the notification reply.
Internet SMI Object Type Macros atEntryId
read only STATUS  mandatory DESCRIPTION "
<index>.1.<address>, where <index is the decimal representation of atIfIndex and <address
The 1 is a subidentifier indicating that an IP address follows. "
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION "
egpNeighAddr encoded in dot notation."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
"The decimal representation of ifIndex."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
"ipAdEntAddr encoded in dot notation."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
{ attributes 4} ipNetToMediaEntryId OBJECT TYPE SYNTAX
read only STATUS  mandatory DESCRIPTION "
interface>.<address>, where <interface> is the decimal representation of
ipNetToMediaIndex and <address> is ipNetToMediaNetAddress in dot notation."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
"<dest> , where <dest> is ipRouteDest represented in dot notation."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION "
<lport> is the decimal representation of tcpConnLocalPort,
<raddr> is the dot notation representation of tcpConnRemAddress, and <rport
> is the decimal representation of tcpConnRemPort."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION "
<address>, where <index> is the decimal representation of atIfIndex and <address
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
However, pending progression of that document to an International Standard, the object class "top" and its associated attributes have been registered here under the oim registration arc.
CLASS CHARACTERIZED BY topPackage PACKAGE BEHAVIOUR DEFINITIONS topBehaviour
This is the top level of managed object class hierarchy and
every other managed object class is a specialization of either this generic class (top) or a specialization of a subclass of top.; allomorphs ATTRIBUTE WITH ATTRIBUTE SYNTAX Top Syntax.
Allomorphs;   A set of allormorphic superclass identifiers MATCHES FOR  Set Comparison, Set Intersection; REGISTERED AS {attributes 30};
name ATTRIBUTE WITH ATTRIBUTE SYNTAX InformationFramework.
RelativeDistinguishedName;   defined in Directory standards MATCHES FOR Equality;
REGISTERED AS {attributes 31}; nameBindings ATTRIBUTE WITH ATTRIBUTE SYNTAX Top Syntax.
A set of valid namebindings for this object.
; MATCHES FOR Equality, Ordering; REGISTERED AS {attributes 33}; packages ATTRIBUTE WITH ATTRIBUTE SYNTAX Top Syntax.
The set of optional packages defined for the   class that are included in this instantiation of   the object.
MATCHES FOR Set Comparison, Set Intersection; REGISTERED AS {attributes 34}; Top Syntax {iso(1) org(3) dod(6)
BEGIN   from ISO/IEC DIS 10165 2:
Definition of Management Information Allomorphs ::
[1] INTEGER } END Security Considerations Security issues are not discussed in this memo.
