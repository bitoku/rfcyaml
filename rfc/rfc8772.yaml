- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                             S. Hu
  contents:
  - 'Independent Submission                                             S. Hu

    '
- title: The China Mobile, Huawei, and ZTE Broadband Network Gateway (BNG) Simple
  contents:
  - "The China Mobile, Huawei, and ZTE Broadband Network Gateway (BNG) Simple\n  \
    \        Control and User Plane Separation Protocol (S-CUSP)\n"
- title: Abstract
  contents:
  - "Abstract\n   A Broadband Network Gateway (BNG) in a fixed wireline access network\n\
    \   is an Ethernet-centric IP edge router and the aggregation point for\n   subscriber\
    \ traffic.  Control and User Plane Separation (CUPS) for\n   such a BNG improves\
    \ flexibility and scalability but requires various\n   communication between the\
    \ User Plane (UP) and the Control Plane (CP).\n   China Mobile, Huawei Technologies,\
    \ and ZTE have developed a simple\n   CUPS control channel protocol to support\
    \ such communication: the\n   Simple Control and User Plane Separation Protocol\
    \ (S-CUSP).  S-CUSP\n   is defined in this document.\n   This document is not\
    \ an IETF standard and does not have IETF\n   consensus.  S-CUSP is presented\
    \ here to make its specification\n   conveniently available to the Internet community\
    \ to enable diagnosis\n   and interoperability.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8772.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n     2.1.  Implementation\
    \ Requirement Keywords\n     2.2.  Terms\n   3.  BNG CUPS Overview\n     3.1.\
    \  BNG CUPS Motivation\n     3.2.  BNG CUPS Architecture Overview\n     3.3. \
    \ BNG CUPS Interfaces\n       3.3.1.  Service Interface (Si)\n       3.3.2.  Control\
    \ Interface (Ci)\n       3.3.3.  Management Interface (Mi)\n     3.4.  BNG CUPS\
    \ Procedure Overview\n   4.  S-CUSP Protocol Overview\n     4.1.  Control Channel\
    \ Procedures\n       4.1.1.  S-CUSP Session Establishment\n       4.1.2.  Keepalive\
    \ Timer and DeadTimer\n     4.2.  Node Procedures\n       4.2.1.  UP Resource\
    \ Report\n       4.2.2.  Update BAS Function on Access Interface\n       4.2.3.\
    \  Update Network Routing\n       4.2.4.  CGN Public IP Address Allocation\n \
    \      4.2.5.  Data Synchronization between the CP and UP\n     4.3.  Subscriber\
    \ Session Procedures\n       4.3.1.  Create Subscriber Session\n       4.3.2.\
    \  Update Subscriber Session\n       4.3.3.  Delete Subscriber Session\n     \
    \  4.3.4.  Subscriber Session Events Report\n   5.  S-CUSP Call Flows\n     5.1.\
    \  IPoE\n       5.1.1.  DHCPv4 Access\n       5.1.2.  DHCPv6 Access\n       5.1.3.\
    \  IPv6 Stateless Address Autoconfiguration (SLAAC) Access\n       5.1.4.  DHCPv6\
    \ and SLAAC Access\n       5.1.5.  DHCP Dual-Stack Access\n       5.1.6.  L2 Static\
    \ Subscriber Access\n     5.2.  PPPoE\n       5.2.1.  IPv4 PPPoE Access\n    \
    \   5.2.2.  IPv6 PPPoE Access\n       5.2.3.  PPPoE Dual-Stack Access\n     5.3.\
    \  WLAN Access\n     5.4.  L2TP\n       5.4.1.  L2TP LAC Access\n       5.4.2.\
    \  L2TP LNS IPv4 Access\n       5.4.3.  L2TP LNS IPv6 Access\n     5.5.  CGN (Carrier\
    \ Grade NAT)\n     5.6.  L3 Leased Line Access\n       5.6.1.  Web Authentication\n\
    \       5.6.2.  User Traffic Trigger\n     5.7.  Multicast Service Access\n  \
    \ 6.  S-CUSP Message Formats\n     6.1.  Common Message Header\n     6.2.  Control\
    \ Messages\n       6.2.1.  Hello Message\n       6.2.2.  Keepalive Message\n \
    \      6.2.3.  Sync_Request Message\n       6.2.4.  Sync_Begin Message\n     \
    \  6.2.5.  Sync_Data Message\n       6.2.6.  Sync_End Message\n       6.2.7. \
    \ Update_Request Message\n       6.2.8.  Update_Response Message\n     6.3.  Event\
    \ Message\n     6.4.  Report Message\n     6.5.  CGN Messages\n       6.5.1. \
    \ Addr_Allocation_Req Message\n       6.5.2.  Addr_Allocation_Ack Message\n  \
    \     6.5.3.  Addr_Renew_Req Message\n       6.5.4.  Addr_Renew_Ack Message\n\
    \       6.5.5.  Addr_Release_Req Message\n       6.5.6.  Addr_Release_Ack Message\n\
    \     6.6.  Vendor Message\n     6.7.  Error Message\n   7.  S-CUSP TLVs and Sub-TLVs\n\
    \     7.1.  Common TLV Header\n     7.2.  Basic Data Fields\n     7.3.  Sub-TLV\
    \ Format and Sub-TLVs\n       7.3.1.  Name Sub-TLVs\n       7.3.2.  Ingress-CAR\
    \ Sub-TLV\n       7.3.3.  Egress-CAR Sub-TLV\n       7.3.4.  If-Desc Sub-TLV\n\
    \       7.3.5.  IPv6 Address List Sub-TLV\n       7.3.6.  Vendor Sub-TLV\n   \
    \  7.4.  Hello TLV\n     7.5.  Keepalive TLV\n     7.6.  Error Information TLV\n\
    \     7.7.  BAS Function TLV\n     7.8.  Routing TLVs\n       7.8.1.  IPv4 Routing\
    \ TLV\n       7.8.2.  IPv6 Routing TLV\n     7.9.  Subscriber TLVs\n       7.9.1.\
    \  Basic Subscriber TLV\n       7.9.2.  PPP Subscriber TLV\n       7.9.3.  IPv4\
    \ Subscriber TLV\n       7.9.4.  IPv6 Subscriber TLV\n       7.9.5.  IPv4 Static\
    \ Subscriber Detect TLV\n       7.9.6.  IPv6 Static Subscriber Detect TLV\n  \
    \     7.9.7.  L2TP-LAC Subscriber TLV\n       7.9.8.  L2TP-LNS Subscriber TLV\n\
    \       7.9.9.  L2TP-LAC Tunnel TLV\n       7.9.10. L2TP-LNS Tunnel TLV\n    \
    \   7.9.11. Update Response TLV\n       7.9.12. Subscriber Policy TLV\n      \
    \ 7.9.13. Subscriber CGN Port Range TLV\n     7.10. Device Status TLVs\n     \
    \  7.10.1.  Interface Status TLV\n       7.10.2.  Board Status TLV\n     7.11.\
    \ CGN TLVs\n       7.11.1.  Address Allocation Request TLV\n       7.11.2.  Address\
    \ Allocation Response TLV\n       7.11.3.  Address Renewal Request TLV\n     \
    \  7.11.4.  Address Renewal Response TLV\n       7.11.5.  Address Release Request\
    \ TLV\n       7.11.6.  Address Release Response TLV\n     7.12. Event TLVs\n \
    \      7.12.1.  Subscriber Traffic Statistics TLV\n       7.12.2.  Subscriber\
    \ Detection Result TLV\n     7.13. Vendor TLV\n   8.  Tables of S-CUSP Codepoints\n\
    \     8.1.  Message Types\n     8.2.  TLV Types\n     8.3.  TLV Operation Codes\n\
    \     8.4.  Sub-TLV Types\n     8.5.  Error Codes\n     8.6.  If-Type Values\n\
    \     8.7.  Access-Mode Values\n     8.8.  Access Method Bits\n     8.9.  Route-Type\
    \ Values\n     8.10. Access-Type Values\n   9.  IANA Considerations\n   10. Security\
    \ Considerations\n   11. References\n     11.1.  Normative References\n     11.2.\
    \  Informative References\n   Acknowledgements\n   Contributors\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A Broadband Network Gateway (BNG) in a fixed wireline access\
    \ network\n   is an Ethernet-centric IP edge router and the aggregation point\
    \ for\n   subscriber traffic.  To provide centralized session management,\n  \
    \ flexible address allocation, high scalability for subscriber\n   management\
    \ capacity, and cost-efficient redundancy, the CU-separated\n   (CP/UP-separated)\
    \ BNG framework is described in a technical report\n   [TR-384] from the Broadband\
    \ Forum (BBF).  The CU-separated service\n   CP, which is responsible for user\
    \ access authentication and setting\n   forwarding entries in UPs, can be virtualized\
    \ and centralized.  The\n   routing control and forwarding plane, i.e., the BNG\
    \ UP (local), can\n   be distributed across the infrastructure.  Other structures\
    \ can also\n   be supported, such as the CP and UP being virtual or both being\n\
    \   physical.\n   Note: In this document, the terms \"user\" and \"subscriber\"\
    \ are used\n   interchangeably.\n   This document specifies the Simple CU Separation\
    \ Protocol (S-CUSP)\n   for communications over the BNG control channel between\
    \ a BNG CP and\n   a set of UPs.  S-CUSP is designed to be flexible and extensible\
    \ so as\n   to allow for easy addition of messages and data items, should further\n\
    \   requirements be expressed in the future.\n   This document is not an IETF\
    \ standard and does not have IETF\n   consensus.  S-CUSP was designed by China\
    \ Mobile, Huawei Technologies,\n   and ZTE.  It is presented here to make the\
    \ S-CUSP specification\n   conveniently available to the Internet community to\
    \ enable diagnosis\n   and interoperability.\n   At the time of writing this document,\
    \ the BBF is working to produce\n   [WT-459], which will describe an architecture\
    \ and requirements for a\n   CP and UP separation of a disaggregated BNG.  Future\
    \ work may attempt\n   to show how the protocol described in this document addresses\
    \ those\n   requirements and may modify this specification to handle unaddressed\n\
    \   requirements.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This section specifies implementation requirement keywords\
    \ and terms\n   used in this document.  S-CUSP messages are described in this\n\
    \   document using Routing Backus-Naur Form (RBNF) as defined in\n   [RFC5511].\n"
- title: 2.1.  Implementation Requirement Keywords
  contents:
  - "2.1.  Implementation Requirement Keywords\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this\
    \ document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]\
    \ when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 2.2.  Terms
  contents:
  - "2.2.  Terms\n   This section specifies terms used in this document.\n   AAA:\
    \         Authentication Authorization Accounting.\n   ACK:         Acknowledgement\
    \ message.\n   BAS:         Broadband Access Server, also known as a BBRAS, BNG,\
    \ or\n                BRAS.\n   BNG:         Broadband Network Gateway.  A BNG\
    \ (or Broadband Remote\n                Access Server (BRAS)) routes traffic to\
    \ and from\n                broadband remote access devices such as digital\n\
    \                subscriber line access multiplexers (DSLAM) on an\n         \
    \       Internet Service Provider's (ISP) network.  BNG / BRAS\n             \
    \   can also be referred to as a BAS or BBRAS.\n   BRAS:        Broadband Remote\
    \ Access Server, also known as a BAS,\n                BBRAS, or BNG.\n   CAR:\
    \         Committed Access Rate.\n   CBS:         Committed Burst Size.\n   CGN:\
    \         Carrier Grade NAT.\n   Ci:          Control Interface.\n   CIR:    \
    \     Committed Information Rate.\n   CoA:         Change of Authorization.\n\
    \   CP:          Control Plane.  CP is a user control management\n           \
    \     component that supports the management of the UP's\n                resources\
    \ such as the user entry and forwarding policy.\n   CU:          Control Plane\
    \ / User Plane.\n   CUSP:        Control and User Plane Separation Protocol.\n\
    \   DEI:         Drop Eligibility Indicator as defined in [802.1Q].  A\n     \
    \           bit in a VLAN tag after the priority and before the VLAN\n       \
    \         ID.  (This bit was formerly the CFI (Canonical Format\n            \
    \    Indicator).)\n   DHCP:        Dynamic Host Configuration Protocol [RFC2131].\n\
    \   dial-up:     This refers to the initial connection messages when a\n     \
    \           new subscriber appears.  The name is left over from when\n       \
    \         subscribers literally dialed up on a modem-equipped\n              \
    \  phone line but herein is applied to other initial\n                connection\
    \ techniques.  Initial connection is frequently\n                indicated by\
    \ the receipt of packets over PPPoE [RFC2516]\n                or IPoE.\n   EMS:\
    \         Element Management System.\n   IPoE:        IP over Ethernet.\n   L2TP:\
    \        Layer 2 Tunneling Protocol [RFC2661].\n   LAC:         L2TP Access Concentrator.\n\
    \   LNS:         L2TP Network Server.\n   MAC:         48-bit Media Access Control\
    \ address [RFC7042].\n   MANO:        Management and Orchestration.\n   Mi:  \
    \        Management Interface.\n   MSS:         Maximum Segment Size.\n   MRU:\
    \         Maximum Receive Unit.\n   NAT:         Network Address Translation [RFC3022].\n\
    \   ND:          Neighbor Discovery.\n   NFV:         Network Function Virtualization.\n\
    \   NFVI:        NFV Infrastructure.\n   PBS:         Peak Burst Size.\n   PD:\
    \          Prefix Delegation.\n   PIR:         Peak Information Rate.\n   PPP:\
    \         Point-to-Point Protocol [RFC1661].\n   PPPoE:       PPP over Ethernet\
    \ [RFC2516].\n   RBNF:        Routing Backus-Naur Form [RFC5511].\n   RG:    \
    \      Residential Gateway.\n   S-CUSP:      Simple Control and User Plane Separation\
    \ Protocol.\n   Subscriber:  The remote user gaining network accesses via a BNG.\n\
    \   Si:          Service Interface.\n   TLV:         Type-Length-Value.  See Sections\
    \ 7.1 and 7.3.\n   UP:          User Plane.  UP is a network edge and user policy\n\
    \                implementation component.  The traditional router's\n       \
    \         control plane and forwarding plane are both preserved on\n         \
    \       BNG devices in the form of a user plane.\n   URPF:        Unicast Reverse\
    \ Path Forwarding.\n   User:        Equivalent to \"customer\" or \"subscriber\"\
    .\n   VRF:         Virtual Routing and Forwarding.\n"
- title: 3.  BNG CUPS Overview
  contents:
  - '3.  BNG CUPS Overview

    '
- title: 3.1.  BNG CUPS Motivation
  contents:
  - "3.1.  BNG CUPS Motivation\n   The rapid development of new services, such as\
    \ 4K TV, Internet of\n   Things (IoT), etc., and increasing numbers of home broadband\
    \ service\n   users present some new challenges for BNGs such as:\n   Low resource\
    \ utilization:  The traditional BNG acts as both a gateway\n      for user access\
    \ authentication and accounting and also an IP\n      network's Layer 3 edge.\
    \  The mutually affecting nature of the\n      tightly coupled control plane and\
    \ forwarding plane makes it\n      difficult to achieve the maximum performance\
    \ of either plane.\n   Complex management and maintenance:  Due to the large numbers\
    \ of\n      traditional BNGs, configuring each device in a network is very\n \
    \     tedious when deploying global service policies.  As the network\n      expands\
    \ and new services are introduced, this deployment mode will\n      cease to be\
    \ feasible as it is unable to manage services\n      effectively and to rectify\
    \ faults rapidly.\n   Slow service provisioning:  The coupling of the CP and the\
    \ forwarding\n      plane, in addition to being a distributed network control\n\
    \      mechanism, means that any new technology has to rely heavily on\n     \
    \ the existing network devices.\n   The framework for a cloud-based BNG with CU\
    \ separation to address\n   these challenges for fixed networks is described in\
    \ [TR-384].  The\n   main idea of CU separation is to extract and centralize the\
    \ user\n   management functions of multiple BNG devices, forming a unified and\n\
    \   centralized CP.  The traditional router's CP and forwarding plane are\n  \
    \ both preserved on BNG devices in the form of a UP.\n"
- title: 3.2.  BNG CUPS Architecture Overview
  contents:
  - "3.2.  BNG CUPS Architecture Overview\n   The functions in a traditional BNG can\
    \ be divided into two parts: (1)\n   the user access management function and (2)\
    \ the routing function.\n   The user access management function can be deployed\
    \ as a centralized\n   module or device, called the BNG Control Plane (BNG-CP).\
    \  The routing\n   function, which includes routing control and the forwarding\
    \ engine,\n   can be deployed in the form of the BNG User Plane (BNG-UP).\n  \
    \ Figure 1 shows the architecture of a CU-separated BNG:\n    |        Neighboring\
    \ policy and resource management systems        |\n    |   | AAA Server  |   |DHCP\
    \ Server|   |   EMS   |   |   MANO   |   |\n    |                       CU-separated\
    \ BNG system                    |\n    | |   | Address  |  |Subscriber| | AAA\
    \  ||Access||    UP     |   | |\n    | |   |management|  |management| |      ||\
    \ mgt  ||management |   | |\n    | |  | Routing control  |     |      |  | Routing\
    \ control  |    |  |\n    | |  |Forwarding engine |     |      |  |Forwarding\
    \ engine |    |  |\n    | |  +------------------+  UP |      |  +------------------+\
    \  UP|  |\n                Figure 1: Architecture of a CU-Separated BNG\n   As\
    \ shown in Figure 1, the BNG-CP could be virtualized and\n   centralized, which\
    \ provides benefits such as centralized session\n   management, flexible address\
    \ allocation, high scalability for\n   subscriber management capacity, cost-efficient\
    \ redundancy, etc.  The\n   functional components inside the BNG-CP can be implemented\
    \ as Virtual\n   Network Functions (VNFs) and hosted in an NFVI.\n   The UP management\
    \ module in the BNG-CP centrally manages the\n   distributed BNG-UPs (e.g., load\
    \ balancing), as well as the setup,\n   deletion, and maintenance of channels\
    \ between CPs and UPs.  Other\n   modules in the BNG-CP, such as address management,\
    \ AAA, etc., are\n   responsible for the connection with external subsystems in\
    \ order to\n   fulfill those services.  Note that the UP SHOULD support both\n\
    \   physical and virtual network functions.  For example, network\n   functions\
    \ related to BNG-UP L3 forwarding can be disaggregated and\n   distributed across\
    \ the physical infrastructure, and the other CP\n   management functions in the\
    \ CU-separated BNG can be moved into the\n   NFVI for virtualization [TR-384].\n\
    \   The details of the CU-separated BNG's function components are as\n   follows:\n\
    \   The CP is responsible for the following:\n   *  Address management: Unified\
    \ address pool management and CGN\n      subscriber address traceability management.\n\
    \   *  AAA: This component performs Authentication, Authorization, and\n     \
    \ Accounting, together with RADIUS/Diameter.  The BNG communicates\n      with\
    \ the AAA server to check whether the subscriber who sent an\n      access request\
    \ has network access authority.  Once the subscriber\n      goes online, this\
    \ component (together with the Service Control\n      component) implements accounting,\
    \ data capacity limitation, and\n      QoS enforcement policies.\n   *  Subscriber\
    \ management: User entry management and forwarding policy\n      management.\n\
    \   *  Access management: Process user dial-up packets, such as PPPoE,\n     \
    \ DHCP, L2TP, etc.\n   *  UP management: Management of UP interface status and\
    \ the setup,\n      deletion, and maintenance of channels between CP and UP.\n\
    \   The UP is responsible for the following:\n   *  Routing control functions:\
    \ Responsible for instantiating routing\n      forwarding plane (e.g., routing,\
    \ multicast, MPLS, etc.).\n   *  Routing and service forwarding plane functions:\
    \ Responsibilities\n      include traffic forwarding, QoS, and traffic statistics\n\
    \      collection.\n   *  Subscriber detection: Responsible for detecting whether\
    \ a\n      subscriber is still online.\n"
- title: 3.3.  BNG CUPS Interfaces
  contents:
  - "3.3.  BNG CUPS Interfaces\n   The three interfaces defined below support the\
    \ communication between\n   the CP and UP.  These are referred to as the Service\
    \ Interface (Si),\n   Control Interface (Ci), and Management Interface (Mi) as\
    \ shown in\n   Figure 2.\n             |               BNG-CP              |\n\
    \     1. Service |   2. Control | 3. Management|\n      Interface |    Interface\
    \ |    Interface |\n           (Si) |         (Ci) |         (Mi) |\n        \
    \        |           ___|___           |\n                |       ___(       )___\
    \       |\n               _|______(               )______|_\n             (  \
    \       Network/Internet         )\n              (________                 ________)\n\
    \                |      (___         ___)      |\n                |          (_______)\
    \          |\n             |               BNG-UP              |\n           Figure\
    \ 2: Interfaces between the CP and UP of the BNG\n"
- title: 3.3.1.  Service Interface (Si)
  contents:
  - "3.3.1.  Service Interface (Si)\n   For a traditional BNG (without CU separation),\
    \ the user dial-up\n   signals are terminated and processed by the CP of a BNG.\
    \  When the CP\n   and UP of a BNG are separated, there needs to be a way to relay\
    \ these\n   signals between the CP and the UP.\n   The Si is used to establish\
    \ tunnels between the CP and UP.  The\n   tunnels are responsible for relaying\
    \ the PPPoE-, IPoE-, and L2TP-\n   related control packets that are received from\
    \ a Residential Gateway\n   (RG) over those tunnels.  An appropriate tunnel type\
    \ is Virtual\n   eXtensible Local Area Network (VXLAN) [RFC7348].\n   The detailed\
    \ definition of Si is out of scope for this document.\n"
- title: 3.3.2.  Control Interface (Ci)
  contents:
  - "3.3.2.  Control Interface (Ci)\n   The CP uses the Ci to deliver subscriber session\
    \ states, network\n   routing entries, etc., to the UP (see Section 6.2.7).  The\
    \ UP uses\n   this interface to report subscriber service statistics, subscriber\n\
    \   detection results, etc., to the CP (see Sections 6.3 and 6.4).  A\n   carrying\
    \ protocol for this interface is specified in this document.\n"
- title: 3.3.3.  Management Interface (Mi)
  contents:
  - "3.3.3.  Management Interface (Mi)\n   The Network Configuration Protocol (NETCONF)\
    \ [RFC6241] is the\n   protocol used on the Mi between a CP and UP.  It is used\
    \ to configure\n   the parameters of the Ci, Si, access interfaces, and QoS/ACL\n\
    \   Templates.  It is expected that implementations will make use of\n   existing\
    \ YANG models where possible but that new YANG models specific\n   to S-CUSP will\
    \ need to be defined.  The definitions of the parameters\n   that can be configured\
    \ are out of scope for this document.\n"
- title: 3.4.  BNG CUPS Procedure Overview
  contents:
  - "3.4.  BNG CUPS Procedure Overview\n   The following numbered sequences (Figure\
    \ 3) give a high-level view of\n   the main BNG CUPS procedures.\n      RG   \
    \           UP                      CP              AAA\n      |             \
    \  |Establish S-CUSP Channel|               |\n      |              1|<---------------------->|\
    \               |\n      |               | Report board interface |          \
    \     |\n      |               |      information       |               |\n  \
    \    |              2|------to CP via Ci----->|               |\n      |     \
    \          |  Update BAS function   |               |\n      |              3|\
    \    request/response    |               |\n      |               |<-----on UP\
    \ via Ci----->|               |\n      |               | Update network routing\
    \ |               |\n      |               |    request/response    |        \
    \       |\n      |              4|<------- via Ci-------->|               |\n\
    \      |  Online Req   |                        |               |\n   5.1|-------------->|\
    \                        |               |\n      |               | Relay the\
    \ Online Req   |               |\n      |            5.2|-----to CP via Si------>|\
    \ Authentication|\n      |               | Send the Online Rep    |          \
    \     |\n      |            5.4|<----to UP via Si-------|               |\n  \
    \    |               | Create subscriber      |               |\n      |     \
    \          |    session on UP       |               |\n      |            5.5|<--------via\
    \ Ci-------->|               |\n      |  Online Rep   |                      \
    \  |               |\n   5.6|<--------------|                        |       \
    \        |\n      |               | Update session on UP   |               |\n\
    \      |            6.2|<--------via Ci-------->|               |\n      |  Offline\
    \ Req  |                     6.3|-------------->|\n   7.1|-------------->|   \
    \                     |               |\n      |               | Relay the Offline\
    \ Req  |               |\n      |            7.2|------to CP via Si----->|   \
    \            |\n      |               | Send the Offline Rep   |             \
    \  |\n      |            7.3|<-----to UP via Si------|               |\n     \
    \ |  Offline Rep  |                        |               |\n   7.4|<--------------|\
    \                        |               |\n      |               | Delete session\
    \ on UP   |               |\n      |            7.5|<--------via Ci-------->|\
    \               |\n      |               |      Event report      |          \
    \     |\n      |              8|---------via Ci-------->|               |\n  \
    \    |               | Data synchronization   |               |\n      |     \
    \         9|<--------via Ci-------->|               |\n      |               |\
    \ CGN address allocation |               |\n      |             10|<--------via\
    \ Ci-------->|               |\n                   Figure 3: BNG CUPS Procedures\
    \ Overview\n   (1)   S-CUSP session establishment: This is the first step of the\
    \ BNG\n         CUPS procedures.  Once the Ci parameters are configured on a\n\
    \         UP, it will start to set up S-CUSP sessions with the specified\n   \
    \      CPs.  The detailed definition of S-CUSP session establishment\n       \
    \  can be found in Section 4.1.1.\n   (2)   Board and interface report: Once the\
    \ S-CUSP session is\n         established between the UP and a CP, the UP will\
    \ report status\n         information on the boards and subscriber-facing interfaces\
    \ of\n         this UP to the CP.  A board can also be called a Line/Service\n\
    \         Process Unit (LPU/SPU) card.  The subscriber-facing interfaces\n   \
    \      refer to the interfaces that connect the access network nodes\n       \
    \  (e.g., Optical Line Terminal (OLT), DSLAM, etc.).  The CP can\n         use\
    \ this information to enable the Broadband Access Server\n         (BAS) function\
    \ (e.g., IPoE, PPPoE, etc.) on the specified\n         interfaces.  See Sections\
    \ 4.2.1 and 7.10 for more details on\n         resource reporting.\n   (3)   BAS\
    \ function enable: To enable the BAS function on the\n         specified interfaces\
    \ of a UP.\n   (4)   Subscriber network route advertisement: The CP will allocate\n\
    \         one or more IP address blocks to a UP.  Each address block\n       \
    \  contains a series of IP addresses.  Those IP addresses will be\n         allocated\
    \ to subscribers who are dialing up from the UP.  To\n         enable other nodes\
    \ in the network to learn how to reach the\n         subscribers, the CP needs\
    \ to notify the UP to advertise to the\n         network the routes that can reach\
    \ those IP addresses.\n   (5)   5.1-5.6 is a complete call flow of a subscriber\
    \ dial-up (as\n         defined in Section 4.3.1) process.  When a UP receives\
    \ a dial-\n         up request, it will relay the request packet to a CP through\n\
    \         the Si.  The CP will parse the request.  If everything is OK,\n    \
    \     it will send an authentication request to the AAA server to\n         authenticate\
    \ the subscriber.  Once the subscriber passes the\n         authentication, the\
    \ AAA server will return a positive response\n         to the CP.  Then the CP\
    \ will send the dial-up response packet\n         to the UP, and the UP will forward\
    \ the response packet to the\n         subscriber (RG).  At the same time, the\
    \ CP will create a\n         subscriber session on the UP, enabling the subscriber\
    \ to access\n         the network.  For different access types, the process may\
    \ be a\n         bit different, but the high-level process is similar.  For each\n\
    \         access type, the detailed process can be found in Section 5.\n   (6)\
    \   6.1-6.3 is the sequence when updating an existing subscriber\n         session.\
    \  The AAA server initiates a Change of Authorization\n         (CoA) and sends\
    \ the CoA to the CP.  The CP will then update the\n         session according\
    \ to the CoA.  See Section 4.3.2 for more\n         detail on CP messages updating\
    \ UP tables.\n   (7)   7.1-7.5 is the sequence for deleting an existing subscriber\n\
    \         session.  When a UP receives an Offline Request, it will relay\n   \
    \      the request to a CP through the Si.  The CP will send back a\n        \
    \ response to the UP through the Si.  The UP will then forward\n         the Offline\
    \ Response to the subscriber.  Then the CP will\n         delete the session on\
    \ the UP through the Ci.\n   (8)   Event reports include the following two parts\
    \ (more detail can\n         be found in Section 4.3.4).  Both are reported using\
    \ the Event\n         message:\n            8.1.  Subscriber Traffic Statistics\
    \ Report\n            8.2.  Subscriber Detection Result Report\n   (9)   Data\
    \ synchronization: See Section 4.2.5 for more detail on CP\n         and UP synchronization.\n\
    \   (10)  CGN address allocation: See Section 4.2.4 for more detail on\n     \
    \    CGN address allocation.\n"
- title: 4.  S-CUSP Protocol Overview
  contents:
  - '4.  S-CUSP Protocol Overview

    '
- title: 4.1.  Control Channel Procedures
  contents:
  - '4.1.  Control Channel Procedures

    '
- title: 4.1.1.  S-CUSP Session Establishment
  contents:
  - "4.1.1.  S-CUSP Session Establishment\n   A UP is associated with a CP and is\
    \ controlled by that CP.  In the\n   case of a hot-standby or cold-standby, a\
    \ UP is associated with two\n   CPs: the master CP and standby CP.  The association\
    \ between a UP and\n   its CPs is implemented by dynamic configuration.\n   Once\
    \ a UP knows its CPs, the UP starts to establish S-CUSP sessions\n   with those\
    \ CPs, as shown in Figure 4.\n                    UP                         \
    \      CP\n                    |   TCP Session Establishment     |\n         \
    \           |   Hello (version, capability)   |\n                    |   Hello\
    \ (version, capability)   |\n                   Figure 4: S-CUSP Session Establishment\n\
    \   The S-CUSP session establishment consists of two successive steps:\n   (1)\
    \  Establishment of a TCP connection (3-way handshake) [RFC793]\n        between\
    \ the CP and the UP using a configured port from the\n        dynamic port range\
    \ (49152-65535).\n   (2)  Establishment of an S-CUSP session over the TCP connection.\n\
    \   Once the TCP connection is established, the CP and the UP initialize\n   the\
    \ S-CUSP session, during which the version and Keepalive timers are\n   negotiated.\n\
    \   The version information (Hello TLV, see Section 7.4) is carried\n   within\
    \ Hello messages (see Section 6.2.1).  A CP can support multiple\n   versions,\
    \ but a UP can only support one version; thus the version\n   negotiation is based\
    \ on whether a version can be supported by both\n   the CP and the UP.  If a CP\
    \ or UP receives a Hello message that does\n   not indicate a version supported\
    \ by both, it responds with a Hello\n   message containing an Error Information\
    \ TLV to notify the peer of the\n   Version-Mismatch error, and the session establishment\
    \ phase fails.\n   Keepalive negotiation is performed by carrying a Keepalive\
    \ TLV in the\n   Hello message.  The Keepalive TLV includes a Keepalive timer\
    \ and\n   DeadTimer field.  The CP and UP have to agree on the Keepalive Timer\n\
    \   and DeadTimer.  Otherwise, a subsequent Hello message with an Error\n   Information\
    \ TLV will be sent to its peer, and the session\n   establishment phase fails.\n\
    \   The S-CUSP session establishment phase fails if the CP or UP disagree\n  \
    \ on the version and keepalive parameters or if one of the CP or UP\n   does not\
    \ answer after the expiration of the Establishment timer.\n   When the S-CUSP\
    \ session establishment fails, the TCP connection is\n   promptly closed.  Successive\
    \ retries are permitted, but an\n   implementation SHOULD make use of an exponential\
    \ backoff session\n   establishment retry procedure.\n   The S-CUSP session timer\
    \ values that need to be configured are\n   summarized in Table 1.\n        |\
    \ Timer Name          | Range in Seconds | Default Value |\n        | Establishment\
    \ Timer | 1-32767          | 45            |\n        | Keepalive Timer     |\
    \ 0-255            | 30            |\n        | DeadTimer           | 1-32767\
    \          | 4 * Keepalive |\n                      Table 1: S-CUSP Session Timers\n"
- title: 4.1.2.  Keepalive Timer and DeadTimer
  contents:
  - "4.1.2.  Keepalive Timer and DeadTimer\n   Once an S-CUSP session has been established,\
    \ a UP or CP may want to\n   know that its S-CUSP peer is still connected.\n \
    \  Each end of an S-CUSP session runs a Keepalive timer.  It restarts\n   the\
    \ timer every time it sends a message on the session.  When the\n   timer expires,\
    \ it sends a Keepalive message.  Thus, a message is\n   transmitted at least as\
    \ often as the value to which the Keepalive\n   timer is reset, unless, as explained\
    \ below, that value is the special\n   value zero.\n   Each end of an S-CUSP session\
    \ also runs a DeadTimer and restarts that\n   DeadTimer whenever a message is\
    \ received on the session.  If the\n   DeadTimer expires at an end of the session,\
    \ that end declares the\n   session dead and the session will be closed, unless\
    \ their DeadTimer\n   is set to the special value zero, in which case the session\
    \ will not\n   time out.\n   The minimum value of the Keepalive timer is 1 second,\
    \ and it is\n   specified in units of 1 second.  The RECOMMENDED default value\
    \ is 30\n   seconds.  The recommended default for the DeadTimer is four times\
    \ the\n   value of the Keepalive timer used by the remote peer.  As above, the\n\
    \   timers may be disabled by setting them to zero.\n   The Keepalive timer and\
    \ DeadTimer are negotiated through the\n   Keepalive TLV carried in the Hello\
    \ message.\n"
- title: 4.2.  Node Procedures
  contents:
  - '4.2.  Node Procedures

    '
- title: 4.2.1.  UP Resource Report
  contents:
  - "4.2.1.  UP Resource Report\n   Once an S-CUSP session has been established between\
    \ a CP and a UP,\n   the UP reports the state information of the boards and access-facing\n\
    \   interfaces on the UP to the CP, as shown in Figure 5.  Report\n   messages\
    \ are unacknowledged and are assumed to be delivered because\n   the session runs\
    \ over TCP.\n   The CP can use that information to activate/enable the BAS functions\n\
    \   (e.g., IPoE, PPPoE, etc.) on the specified interfaces.\n   In addition, the\
    \ UP resource report may trigger a UP warm-standby\n   process.  In the case of\
    \ warm-standby, a failure on a UP may trigger\n   the CP to start a warm-standby\
    \ process, by moving the online\n   subscriber sessions to a standby UP and then\
    \ directing the affected\n   subscribers to access the Internet through the standby\
    \ UP.\n                        UP                      CP\n                  \
    \      |  Report Board Status   |\n                        |------to CP via Ci----->|\n\
    \                        | Report Interface Status|\n                        |------to\
    \ CP via Ci----->|\n                  Figure 5: UP Board and Interface Report\n\
    \   Board status information is carried in the Board Status TLV\n   (Section 7.10.2),\
    \ and interface status information is carried in the\n   Interface Status TLV\
    \ (Section 7.10.1).  Both Board Status and\n   Interface Status TLVs are carried\
    \ in the Report message\n   (Section 6.4).\n"
- title: 4.2.2.  Update BAS Function on Access Interface
  contents:
  - "4.2.2.  Update BAS Function on Access Interface\n   Once the CP collects the\
    \ interface status of a UP, it will\n   activate/deactivate/modify the BAS functions\
    \ on specified interfaces\n   through the Update_Request and Update_Response message\
    \ exchanges\n   (Section 6.2), carrying the BAS Function TLV (Section 7.7).\n\
    \                        UP                       CP\n                       \
    \ |   Update BAS Function   |\n                        |<-----on UP via Ci-------|\n\
    \                        |   Update BAS Function   |\n                       \
    \ |------on UP via Ci------>|\n                       Figure 6: Update BAS Function\n"
- title: 4.2.3.  Update Network Routing
  contents:
  - "4.2.3.  Update Network Routing\n   The CP will allocate one or more address blocks\
    \ to a UP.  Each\n   address block contains a series of IP addresses.  Those IP\
    \ addresses\n   will be assigned to subscribers who are dialing up to the UP.\
    \  To\n   enable the other nodes in the network to learn how to reach the\n  \
    \ subscribers, the CP needs to install the routes on the UP and notify\n   the\
    \ UP to advertise the routes to the network.\n                        UP     \
    \                  CP\n                        | Subscriber network route|\n \
    \                       |      update request     |\n                        |\
    \ Subscriber network route|\n                        |      update response  \
    \  |\n                      Figure 7: Update Network Routing\n   The Update_Request\
    \ and Update_Response message exchanges, carrying\n   the IPv4/IPv6 Routing TLVs\
    \ (Section 7.8), update the subscriber's\n   network routing information.\n"
- title: 4.2.4.  CGN Public IP Address Allocation
  contents:
  - "4.2.4.  CGN Public IP Address Allocation\n   The following sequences (Figure\
    \ 8) describe the procedures related to\n   CGN address management.  Three independent\
    \ procedures are defined:\n   one each for CGN address allocation request/response,\
    \ CGN address\n   renewal request/response, and CGN address release request/response.\n\
    \   CGN address allocation/renew/release procedures are designed for the\n   case\
    \ where the CGN function is running on the UP.  The UP has to map\n   the subscriber\
    \ private IP addresses to public IP addresses, and such\n   mapping is performed\
    \ by the UP locally when a subscriber dials up.\n   That means the UP has to ask\
    \ for public IPv4 address blocks for CGN\n   subscribers from the CP.\n   In addition,\
    \ when a public IP address is allocated to a UP, there\n   will be a lease time\
    \ (e.g., one day).  Before the lease time expires,\n   the UP can ask for renewal\
    \ of the IP address lease from the CP.  It\n   is achieved by the exchange of\
    \ the Addr_Renew_Req and Addr_Renew_Ack\n   messages.\n   If the public IP address\
    \ will not be used anymore, the UP SHOULD\n   release the address by sending an\
    \ Addr_Release_Req message to the CP.\n   If the CP wishes to withdraw addresses\
    \ that it has previously leased\n   to a UP, it uses the same procedures as above.\
    \  The Oper code (see\n   Section 7.1) in the IPv4/IPv6 Routing TLV (see Section\
    \ 7.8)\n   determines whether the request is an update or withdraw.\n   The relevant\
    \ messages are defined in Section 6.5.\n                    UP               \
    \        CP\n                    | CGN Address Allocation  |\n               \
    \     |         Request         |\n                 1.1|-------- via Ci--------->|\n\
    \                    | CGN Address Allocation  |\n                    |      \
    \   Response        |\n                 1.2|<------- via Ci----------|\n     \
    \               | CGN Address Renew       |\n                    |         Request\
    \         |\n                 2.1|-------- via Ci--------->|\n               \
    \     | CGN Address Renew       |\n                    |         Response    \
    \    |\n                 2.2|<------- via Ci----------|\n                    |\
    \ CGN Address Release     |\n                    |         Request         |\n\
    \                 3.1|-------- via Ci--------->|\n                    | CGN Address\
    \ Release     |\n                    |         Response        |\n           \
    \      3.3|<------- via Ci----------|\n                 Figure 8: CGN Public IP\
    \ Address Allocation\n"
- title: 4.2.5.  Data Synchronization between the CP and UP
  contents:
  - "4.2.5.  Data Synchronization between the CP and UP\n   For a CU-separated BNG,\
    \ the UP will continue to function using the\n   state that has been installed\
    \ in it even if the CP fails or the\n   session between the UP and CP fails.\n\
    \   Under some circumstances, it is necessary to synchronize state\n   between\
    \ the CP and UP, for example, if a CP fails and the UP is\n   switched to a different\
    \ CP.\n   Synchronization includes two directions.  One direction is from UP to\n\
    \   CP; in that case, the synchronization information is mainly about the\n  \
    \ board/interface status of the UP.  The other direction is from CP to\n   UP;\
    \ in that case, the subscriber sessions, subscriber network routes,\n   L2TP tunnels,\
    \ etc., will be synchronized to the UP.\n   The synchronization is triggered by\
    \ a Sync_Request message, to which\n   the receiver will (1) reply with a Sync_Begin\
    \ message to notify the\n   requester that synchronization will begin and (2)\
    \ then start the\n   synchronization using the Sync_Data message.  When synchronization\n\
    \   finishes, a Sync_End message will be sent.\n   Figure 9 shows the process\
    \ of data synchronization between a UP and a\n   CP.\n                       \
    \ UP                       CP\n                        | Synchronization Request\
    \ |\n                        | Synchronization Begin   |\n                   \
    \     | Board/Interface Report  |\n                        | Synchronization End\
    \     |\n                       1) Synchronization from UP to CP\n           \
    \             UP                       CP\n                        | Synchronization\
    \ Request |\n                        | Synchronization Begin   |\n           \
    \             |      Synchronizes       |\n                        |Subscriber\
    \ Session States|\n                        |  Network Route Entries  |\n     \
    \                   | Synchronization End     |\n                       2) Synchronization\
    \ from CP to UP\n                       Figure 9: Data Synchronization\n"
- title: 4.3.  Subscriber Session Procedures
  contents:
  - "4.3.  Subscriber Session Procedures\n   A subscriber session consists of a set\
    \ of forwarding states,\n   policies, and security rules that are applied to the\
    \ subscriber.  It\n   is used for forwarding subscriber traffic in a UP.  To initialize\
    \ a\n   session on a UP, a collection of hardware resources (e.g., NP, TCAM,\n\
    \   etc.) has to be allocated to a session on a UP as part of its\n   initiation.\n\
    \   Procedures related to subscriber sessions include subscriber session\n   creation,\
    \ update, deletion, and statistics reporting.  The following\n   subsections give\
    \ a high-level view of the procedures.\n"
- title: 4.3.1.  Create Subscriber Session
  contents:
  - "4.3.1.  Create Subscriber Session\n   The sequence below (Figure 10) describes\
    \ the DHCP IPv4 dial-up\n   process.  It is an example that shows how a subscriber\
    \ session is\n   created.  (An example for IPv6 appears in Section 5.1.2.)\n \
    \       RG              UP                       CP             AAA\n        |\
    \ Online Request|                        |               |\n       1|-------------->|\
    \                        |               |\n        |               |Relay the\
    \ Online Request|               |\n        |              2|-----to CP via Si------>|\
    \ Authentication|\n        |               |  Create Subscriber     |        \
    \       |\n        |               |   Session Request      |               |\n\
    \        |              4|<--------via Ci---------|               |\n        |\
    \               |  Create Subscriber     |               |\n        |        \
    \       |   Session Response     |               |\n        |              5|---------via\
    \ Ci-------->|               |\n        |               |  Send Online Response\
    \  |               |\n        |              7|<----to UP via Si-------|     \
    \          |\n        |Online Response|                        |             \
    \  |\n       8|<--------------|                        |               |\n   \
    \               Figure 10: Creating a Subscriber Session\n   The request starts\
    \ from an Online Request message (step 1) from the\n   RG (for example, a DHCP\
    \ Discovery packet).  When the UP receives the\n   Online Request from the RG,\
    \ it will tunnel the Online Request to the\n   CP through the Si (step 2).  A\
    \ tunneling technology implements the\n   Si.\n   When the CP receives the Online\
    \ Request from the UP, it will send an\n   authentication request to the AAA server\
    \ to authenticate and\n   authorize the subscriber (step 3).  When a positive\
    \ reply is received\n   from the AAA server, the CP starts to create a subscriber\
    \ session for\n   the request.  Relevant resources (e.g., IP address, bandwidth,\
    \ etc.)\n   will be allocated to the subscriber.  Policies and security rules\n\
    \   will be generated for the subscriber.  Then the CP sends a request to\n  \
    \ create a session to the UP through the Ci (step 4), and a response is\n   expected\
    \ from the UP to confirm the creation (step 5).\n   Finally, the CP will notify\
    \ the AAA server to start accounting (step\n   6).  At the same time, an Online\
    \ Response message (for example, a\n   DHCP Ack packet) will be sent to the UP\
    \ through the Si (step 7).  The\n   UP will then forward the Online Response to\
    \ the RG (step 8).\n   That completes the subscriber activation process.\n"
- title: 4.3.2.  Update Subscriber Session
  contents:
  - "4.3.2.  Update Subscriber Session\n   The following numbered sequence (Figure\
    \ 11) shows the process of\n   updating the subscriber session.\n            \
    \   UP                       CP             AAA\n               | Session Update\
    \ Request |               |\n              2|<--------via Ci---------|       \
    \        |\n               | Session Update Response|               |\n      \
    \        3|---------via Ci-------->|               |\n                  Figure\
    \ 11: Updating a Subscriber Session\n   When a subscriber session has been created\
    \ on a UP, there may be\n   requirements to update the session with new parameters\
    \ (e.g.,\n   bandwidth, QoS, policies, etc.).\n   This procedure is triggered\
    \ by a Change of Authorization (CoA)\n   request message sent by the AAA server.\
    \  The CP will update the\n   session on the UP according to the new parameters\
    \ through the Ci.\n"
- title: 4.3.3.  Delete Subscriber Session
  contents:
  - "4.3.3.  Delete Subscriber Session\n   The call flow below shows how S-CUSP deals\
    \ with a subscriber Offline\n   Request.\n              RG               UP  \
    \                     CP\n               |Offline Request |                  \
    \      |\n              1|--------------->|                        |\n       \
    \        |               2|------to CP via Si----->|\n               |       \
    \        3|<-----to UP via Si------|\n               |Offline Response|      \
    \                  |\n              4|<---------------|                      \
    \  |\n                  Figure 12: Deleting a Subscriber Session\n   Similar to\
    \ the session creation process, when a UP receives an\n   Offline Request from\
    \ an RG, it will tunnel the request to a CP\n   through the Si.\n   When the CP\
    \ receives the Offline Request, it will withdraw/release\n   the resources (e.g.,\
    \ IP address, bandwidth) that have been allocated\n   to the subscriber.  It then\
    \ sends a reply to the UP through the Si,\n   and the UP will forward the reply\
    \ to the RG.  At the same time, it\n   will delete all the status of the session\
    \ on the UP through the Ci.\n"
- title: 4.3.4.  Subscriber Session Events Report
  contents:
  - "4.3.4.  Subscriber Session Events Report\n                        UP        \
    \               CP\n                        | Statistic/Detect Report|\n     \
    \                     Figure 13: Events Report\n   When a session is created on\
    \ a UP, the UP will periodically report\n   statistics information and subscriber\
    \ detection results of the\n   session to the CP.\n"
- title: 5.  S-CUSP Call Flows
  contents:
  - "5.  S-CUSP Call Flows\n   The subsections below give an overview of various \"\
    dial-up\"\n   interactions over the Si followed by an overview of the setting\
    \ of\n   information in the UP by the CP using S-CUSP over the Ci.\n   S-CUSP\
    \ messages are described in this document using Routing Backus\n   Naur Form (RBNF)\
    \ as defined in [RFC5511].\n"
- title: 5.1.  IPoE
  contents:
  - '5.1.  IPoE

    '
- title: 5.1.1.  DHCPv4 Access
  contents:
  - "5.1.1.  DHCPv4 Access\n   The following sequence (Figure 14) shows detailed procedures\
    \ for\n   DHCPv4 access.\n        RG              UP                       CP\
    \             AAA\n        | DHCP Discovery|                        |        \
    \       |\n       1|-------------->|                        |               |\n\
    \        |               |Relay the DHCP Discovery|               |\n        |\
    \              2|-----to CP via Si------>|      AAA      |\n        |        \
    \       |  Send the DHCP Offer   |               |\n        |              4|<----to\
    \ UP via Si-------|               |\n        |  DHCP Offer   |               \
    \         |               |\n       5|<--------------|                       \
    \ |               |\n        |  DHCP Request |                        |      \
    \         |\n       6|-------------->|                        |              \
    \ |\n        |               | Relay the DHCP Request |               |\n    \
    \    |              7|-----to CP via Si------>|               |\n        |   \
    \            |  Create Subscriber     |               |\n        |           \
    \    |   Session Request      |               |\n        |              8|<--------via\
    \ Ci---------|               |\n        |               |  Create Subscriber \
    \    |               |\n        |               |   Session Response     |   \
    \            |\n        |              9|---------via Ci-------->|           \
    \    |\n        |               |  Send DHCP ACK         |               |\n \
    \       |             11|<----to UP via Si-------|               |\n        |\
    \  DHCP ACK     |                        |               |\n      12|<--------------|\
    \                        |               |\n                          Figure 14:\
    \ DHCPv4 Access\n   S-CUSP implements steps 8 and 9.\n   After a subscriber is\
    \ authenticated and authorized by the AAA server,\n   the CP creates a new subscriber\
    \ session on the UP.  This is achieved\n   by sending an Update_Request message\
    \ to the UP.\n   The format of the Update_Request message is shown as follows\
    \ using\n   RBNF:\n   <Update_Request Message> ::= <Common Header>\n         \
    \            <Basic Subscriber TLV>\n                     <IPv4 Subscriber TLV>\n\
    \                     <IPv4 Routing TLV>\n                     [<Subscriber Policy\
    \ TLV>]\n   The UP will reply with an Update_Response message.  The format of\
    \ the\n   Update_Response message is as follows:\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n           \
    \         [<Subscriber CGN Port Range TLV>]\n"
- title: 5.1.2.  DHCPv6 Access
  contents:
  - "5.1.2.  DHCPv6 Access\n   The following sequence (Figure 15) shows detailed procedures\
    \ for\n   DHCPv6 access.\n        RG              UP                       CP\
    \             AAA\n        |  Solicit      |                        |        \
    \       |\n       1|-------------->|                        |               |\n\
    \        |               |  Relay the Solicit     |               |\n        |\
    \              2|-----to CP via Si------>|      AAA      |\n        |        \
    \       |  Send the Advertise    |               |\n        |              4|<----to\
    \ UP via Si-------|               |\n        |  Advertise    |               \
    \         |               |\n       5|<--------------|                       \
    \ |               |\n        |  Request      |                        |      \
    \         |\n       6|-------------->|                        |              \
    \ |\n        |               |  Relay the Request     |               |\n    \
    \    |              7|-----to CP via Si------>|               |\n        |   \
    \            |  Create Subscriber     |               |\n        |           \
    \    |   Session Request      |               |\n        |              8|<--------via\
    \ Ci-------->|               |\n        |               |  Create Subscriber \
    \    |               |\n        |               |   Session Response     |   \
    \            |\n        |              9|---------via Ci-------->|           \
    \    |\n        |               |  Send Reply            |               |\n \
    \       |             11|<----to UP via Si-------|               |\n        |\
    \  Reply        |                        |               |\n      12|<--------------|\
    \                        |               |\n                          Figure 15:\
    \ DHCPv6 Access\n   Steps 1-7 are a standard DHCP IPv6 access process.  The subscriber\n\
    \   creation is triggered by a DHCP IPv6 request message.  When this\n   message\
    \ is received, it means that the subscriber has passed the AAA\n   authentication\
    \ and authorization.  Then the CP will create a\n   subscriber session on the\
    \ UP.  This is achieved by sending an\n   Update_Request message to the UP (step\
    \ 8).\n   The format of the Update_Request message is as follows:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <Basic Subscriber TLV>\n\
    \                     <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   The UP will reply with\
    \ an Update_Response message (step 9).  The\n   format of the Update_Response\
    \ message is as follows:\n   <Update_Response Message> ::= <Common Header>\n \
    \                   <Update Response TLV>\n"
- title: 5.1.3.  IPv6 Stateless Address Autoconfiguration (SLAAC) Access
  contents:
  - "5.1.3.  IPv6 Stateless Address Autoconfiguration (SLAAC) Access\n   The following\
    \ flow (Figure 16) shows the IPv6 SLAAC access process.\n        RG          \
    \    UP                       CP             AAA\n        |      RS       |  \
    \                      |               |\n       1|-------------->|          \
    \              |               |\n        |               |  Relay the Router\
    \      |               |\n        |               |    Solicit (RS)        | \
    \              |\n        |              2|-----to CP via Si------>|      AAA\
    \      |\n        |               |  Create Subscriber     |               |\n\
    \        |               |   Session Request      |               |\n        |\
    \              4|<--------via Ci---------|               |\n        |        \
    \       |  Create Subscriber     |               |\n        |               |\
    \   Session Response     |               |\n        |              5|---------via\
    \ Ci-------->|               |\n        |               |  Send Router Advertise\
    \ |               |\n        |              6|<----to UP via Si-------|      \
    \         |\n        |      RA       |                        |              \
    \ |\n       7|<--------------|                        |               |\n    \
    \    |      NS       |                        |               |\n       8|-------------->|\
    \                        |               |\n        |               |  Relay the\
    \ Neighbor    |               |\n        |               |     Solicit (NS)  \
    \     |               |\n        |              9|-----to CP via Si------>|  \
    \             |\n        |               |  Send a Neighbor       |          \
    \     |\n        |               |     Advertise (NA)     |               |\n\
    \        |             11|<----to UP via Si-------|               |\n        |\
    \      NA       |                        |               |\n      12|<--------------|\
    \                        |               |\n                        Figure 16:\
    \ IPv6 SLAAC Access\n   It starts with a Router Solicit (RS) request from an RG\
    \ that is\n   tunneled to the CP by the UP.  After the AAA authentication and\n\
    \   authorization, the CP will create a subscriber session on the UP.\n   This\
    \ is achieved by sending an Update_Request message to the UP (step\n   4).\n \
    \  The format of the Update_Request message is as follows:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <Basic Subscriber TLV>\n\
    \                     <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   The UP will reply with\
    \ an Update_Response message (step 5).  The\n   format of the Update_Response\
    \ message is as follows:\n   <Update_Response Message> ::= <Common Header>\n \
    \                   <Update Response TLV>\n"
- title: 5.1.4.  DHCPv6 and SLAAC Access
  contents:
  - "5.1.4.  DHCPv6 and SLAAC Access\n   The following call flow (Figure 17) shows\
    \ the DHCP IPv6 and SLAAC\n   access process.\n        RG              UP    \
    \                   CP             AAA\n        |      RS       |            \
    \            |               |\n       1|-------------->|                    \
    \    |               |\n        |               |  Relay the RS          |   \
    \            |\n        |              2|-----to CP via Si------>|      AAA  \
    \    |\n        |               |  Create Subscriber     |               |\n \
    \       |               |   Session Request      |               |\n        |\
    \              4|<--------via Ci---------|               |\n        |        \
    \       |  Create Subscriber     |               |\n        |               |\
    \   Session Response     |               |\n        |              5|---------via\
    \ Ci-------->|               |\n        |               |  Send RA           \
    \    |               |\n        |              6|<----to UP via Si-------|   \
    \            |\n        |      RA       |                        |           \
    \    |\n       7|<--------------|                        |               |\n \
    \       |DHCPv6 Solicit |                        |               |\n       8|-------------->|\
    \                        |               |\n        |               |  Relay DHCPv6\
    \ Solicit  |               |\n        |              9|-----to CP via Si------>|\
    \               |\n        |               |  Update Subscriber     |        \
    \       |\n        |               |   Session Request      |               |\n\
    \        |             10|<--------via Ci---------|               |\n        |\
    \               |  Update Subscriber     |               |\n        |        \
    \       |   Session Response     |               |\n        |             11|---------via\
    \ Ci-------->|               |\n        |               |  Send DHCPv6 Reply \
    \    |               |\n        |             13|<----to UP via Si-------|   \
    \            |\n        | DHCPv6 Reply  |                        |           \
    \    |\n      14|<--------------|                        |               |\n \
    \                    Figure 17: DHCPv6 and SLAAC Access\n   When a subscriber\
    \ passes AAA authentication, the CP will create a\n   subscriber session on the\
    \ UP.  This is achieved by sending an\n   Update_Request message to the UP (step\
    \ 4).\n   <Update_Request Message> ::= <Common Header>\n                     <Basic\
    \ Subscriber TLV>\n                     <IPv6 Subscriber TLV>\n              \
    \       <IPv6 Routing TLV>\n                     [<Subscriber Policy TLV>]\n \
    \  The UP will reply with an Update_Response message (step 5).  The\n   format\
    \ of the Update_Response is as follows:\n   <Update_Response Message> ::= <Common\
    \ Header>\n                    <Update Response TLV>\n   After receiving a DHCPv6\
    \ Solicit, the CP will update the subscriber\n   session by sending an Update_Request\
    \ message with new parameters to\n   the UP (step 10).\n   The format of the Update_Request\
    \ message is as follows:\n   <Update_Request Message> ::= <Common Header>\n  \
    \                   <Basic Subscriber TLV>\n                     <IPv6 Subscriber\
    \ TLV>\n                     <IPv6 Routing TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   The UP will reply with an Update_Response message (step 11).\
    \  The\n   format of the Update_Response is as follows:\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n"
- title: 5.1.5.  DHCP Dual-Stack Access
  contents:
  - "5.1.5.  DHCP Dual-Stack Access\n   The following sequence (Figure 18) is a combination\
    \ of DHCP IPv4 and\n   DHCP IPv6 access processes.\n        RG              UP\
    \                       CP             AAA\n        | DHCP Discovery|        \
    \                |               |\n       1|-------------->|                \
    \        |               |\n        |               |Relay the DHCP Discovery|\
    \               |\n        |              2|-----to CP via Si------>|     AAA\
    \       |\n        |               |  Send the DHCP Offer   |               |\n\
    \        |              4|<----to UP via Si-------|               |\n        |\
    \  DHCP Offer   |                        |               |\n       5|<--------------|\
    \                        |               |\n        |  DHCP Request |        \
    \                |               |\n       6|-------------->|                \
    \        |               |\n        |               |  Relay the DHCP Request|\
    \               |\n        |              7|-----to CP via Si------>|        \
    \       |\n        |               |  Create Subscriber     |               |\n\
    \        |               |   Session Request      |               |\n        |\
    \              8|<--------via Ci-------->|               |\n        |        \
    \       |  Create Subscriber     |               |\n        |               |\
    \   Session Response     |               |\n        |              9|---------via\
    \ Ci-------->|               |\n        |               |  Send DHCP ACK     \
    \    |               |\n        |             11|<----to UP via Si-------|   \
    \            |\n        |  DHCP ACK     |                        |           \
    \    |\n      12|<--------------|                        |               |\n \
    \       |      RS       |                        |               |\n      13|-------------->|\
    \                        |               |\n        |               |  Relay the\
    \ RS          |               |\n        |             14|-----to CP via Si------>|\
    \      AAA      |\n        |               |  Create Subscriber     |        \
    \       |\n        |               |   Session Request      |               |\n\
    \        |             16|<--------via Ci---------|               |\n        |\
    \               |  Create Subscriber     |               |\n        |        \
    \       |   Session Response     |               |\n        |             17|---------via\
    \ Ci-------->|               |\n        |               |  Send the RA       \
    \    |               |\n        |             18|<----to UP via Si-------|   \
    \            |\n        |      RA       |                        |           \
    \    |\n      19|<--------------|                        |               |\n \
    \       |DHCPv6 Solicit |                        |               |\n      20|-------------->|\
    \                        |               |\n        |               |  Relay DHCPv6\
    \ Solicit  |               |\n        |             21|-----to CP via Si------>|\
    \               |\n        |               |  Update Subscriber     |        \
    \       |\n        |               |   Session Request      |               |\n\
    \        |             22|<--------via Ci---------|               |\n        |\
    \               |  Update Subscriber     |               |\n        |        \
    \       |   Session Response     |               |\n        |             23|---------via\
    \ Ci-------->|               |\n        |               |  Send DHCPv6 Reply \
    \    |               |\n        |             25|<----to UP via Si-------|   \
    \            |\n        | DHCPv6 Reply  |                        |           \
    \    |\n      26|<--------------|                        |               |\n \
    \                    Figure 18: DHCP Dual-Stack Access\n   The DHCP dual-stack\
    \ access includes three sets of Update_Request/\n   Update_Response exchanges\
    \ to create/update a DHCPv4/v6 subscriber\n   session.\n   (1)  Create a DHCPv4\
    \ session (steps 8 and 9):\n      <Update_Request Message> ::= <Common Header>\n\
    \                        <Basic Subscriber TLV>\n                        <IPv4\
    \ Subscriber TLV>\n                        <IPv4 Routing TLV>\n              \
    \          [<Subscriber Policy TLV>]\n      <Update_Response Message> ::= <Common\
    \ Header>\n                       <Update Response TLV>\n                    \
    \   [<Subscriber CGN Port Range TLV>]\n   (2)  Create a DHCPv6 session (steps\
    \ 16 and 17):\n      <Update_Request Message> ::= <Common Header>\n          \
    \              <Basic Subscriber TLV>\n                        <IPv6 Subscriber\
    \ TLV>\n                        <IPv6 Routing TLV>\n                        [<Subscriber\
    \ Policy TLV>]\n      <Update_Response Message> ::= <Common Header>\n        \
    \               <Update Response TLV>\n   (3)  Update DHCPv6 session (steps 22\
    \ and 23):\n      <Update_Request Message> ::= <Common Header>\n             \
    \           <Basic Subscriber TLV>\n                        <IPv6 Subscriber TLV>\n\
    \                        <IPv6 Routing TLV>\n                        [<Subscriber\
    \ Policy TLV>]\n      <Update_Response Message> ::= <Common Header>\n        \
    \               <Update Response TLV>\n"
- title: 5.1.6.  L2 Static Subscriber Access
  contents:
  - "5.1.6.  L2 Static Subscriber Access\n   L2 static subscriber access processes\
    \ are as follows:\n        RG              UP                      CP        \
    \      AAA\n        |               |    Static Subscriber   |               |\n\
    \        |               |     Detection Req.     |               |\n        |\
    \              1|<-----to UP via Ci------|               |\n        |        \
    \       |    Static Subscriber   |               |\n        |               |\
    \     Detection Rep.     |               |\n        |              2|------to\
    \ UP via Ci----->|               |\n        |  ARP/ND(REQ)  |                \
    \        |               |\n     3.1|<--------------|                        |\
    \               |\n        |  ARP/ND(ACK)  |                        |        \
    \       |\n     3.2|-------------->|                        |               |\n\
    \        |               |  Relay the ARP/ND      |               |\n        |\
    \            3.3|-----to CP via Si------>|       AAA     |\n        |        \
    \       |  Create Subscriber     |               |\n        |               |\
    \   Session Request      |               |\n        |            3.5|<--------via\
    \ Ci---------|               |\n        |               |  Create Subscriber \
    \    |               |\n        |               |   Session Response     |   \
    \            |\n        |            3.6|---------via Ci-------->|           \
    \    |\n        |  ARP/ND(REQ)  |                        |               |\n \
    \    4.1|-------------->|                        |               |\n        |\
    \               |  Relay the ARP/ND      |               |\n        |        \
    \    4.2|-----to CP via Si------>|      AAA      |\n        |               |\
    \  Create Subscriber     |               |\n        |               |   Session\
    \ Request      |               |\n        |            4.4|<--------via Ci---------|\
    \               |\n        |               |  Create Subscriber     |        \
    \       |\n        |               |   Session Response     |               |\n\
    \        |            4.5|---------via Ci-------->|               |\n        |\
    \  ARP/ND(ACK)  |                        |               |\n     4.6|<--------------|\
    \                        |               |\n        |   IP Traffic  |        \
    \                |               |\n     5.1|-------------->|                \
    \        |               |\n        |               |  Relay the IP Traffic  |\
    \               |\n        |            5.2|-----to CP via Si------>|      AAA\
    \      |\n        |               |  Create Subscriber     |               |\n\
    \        |               |   Session Request      |               |\n        |\
    \            5.4|<--------via Ci-------->|               |\n        |        \
    \       |  Create Subscriber     |               |\n        |               |\
    \   Session Response     |               |\n        |            5.5|---------via\
    \ Ci-------->|               |\n        |  ARP/ND(REQ)  |                    \
    \    |               |\n     5.6|<--------------|                        |   \
    \            |\n        |  ARP/ND(ACK)  |                        |           \
    \    |\n     5.7|-------------->|                        |               |\n \
    \                  Figure 19: L2 Static Subscriber Access\n   For L2 static subscriber\
    \ access, the process starts with a CP\n   installing a static subscriber detection\
    \ list on a UP.  The list\n   determines which subscribers will be detected. \
    \ That is implemented\n   by exchanging Update_Request and Update_Response messages\
    \ between CP\n   and UP.  The formats of the messages are as follows:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <IPv4 Static Subscriber Detect\
    \ TLVs>\n                     <IPv6 Static Subscriber Detect TLVs>\n   <Update_Response\
    \ Message> ::= <Common Header>\n                    <Update Response TLV>\n  \
    \ For L2 static subscriber access, there are three ways to trigger the\n   access\
    \ process:\n   (1)  Triggered by UP (steps 3.1-3.6): This assumes that the UP\
    \ knows\n        the IP address, the access interface, and the VLAN of the RG.\n\
    \        The UP will actively trigger the access flow by sending an ARP/\n   \
    \     ND packet to the RG.  If the RG is online, it will reply with an\n     \
    \   ARP/ND to the UP.  The UP will tunnel the ARP/ND to the CP\n        through\
    \ the Si.  The CP then triggers the authentication\n        process.  If the authentication\
    \ result is positive, the CP will\n        create a corresponding subscriber session\
    \ on the UP.\n   (2)  Triggered by RG ARP/ND (steps 4.1-4.6): Most of the process\
    \ is\n        the same as option 1 (triggered by UP).  The difference is that\n\
    \        the RG will actively send the ARP/ND to trigger the process.\n   (3)\
    \  Triggered by RG IP traffic (steps 5.1-5.7): This is for the case\n        where\
    \ the RG has the ARP/ND information, but the subscriber\n        session on the\
    \ UP is lost (e.g., due to failure on the UP or the\n        UP restarting). \
    \ That means the RG may keep sending IP packets\n        to the UP.  The packets\
    \ will trigger the UP to start a new\n        access process.\n   From a subscriber\
    \ session point of view, the procedures and the\n   message formats for the three\
    \ cases above are the same, as follows.\n   IPv4 Case:\n   <Update_Request Message>\
    \ ::= <Common Header>\n                     <Basic Subscriber TLV>\n         \
    \            <IPv4 Subscriber TLV>\n                     <IPv4 Routing TLV>\n\
    \                     [<Subscriber Policy TLV>]\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n           \
    \         [<Subscriber CGN Port Range TLV>]\n   IPv6 Case:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <Basic Subscriber TLV>\n\
    \                     <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n"
- title: 5.2.  PPPoE
  contents:
  - '5.2.  PPPoE

    '
- title: 5.2.1.  IPv4 PPPoE Access
  contents:
  - "5.2.1.  IPv4 PPPoE Access\n   Figure 20 shows the IPv4 PPPoE access call flow.\n\
    \        RG              UP                      CP              AAA\n       \
    \ |  PPPoE Disc   |        PPPoE Disc      |               |\n       1|<------------->|<---------via\
    \ Si------->|               |\n        |  PPP LCP      |        PPP LCP      \
    \   |               |\n       2|<------------->|<---------via Si------->|    \
    \           |\n        |  PPP PAP/CHAP |        PPP PAP/CHAP    |    Req/Rep \
    \   |\n       3|<------------->|<---------via Si------->|<------------->|\n  \
    \      |  PPP IPCP     |        PPP IPCP        |               |\n       4|<------------->|<---------via\
    \ Si------->|               |\n        |               |  Create Subscriber  \
    \   |               |\n        |               |   Session Request      |    \
    \           |\n        |              5|<--------via Ci---------|            \
    \   |\n        |               |  Create Subscriber     |               |\n  \
    \      |               |   Session Response     |               |\n        | \
    \             6|---------via Ci-------->|               |\n                  \
    \      Figure 20: IPv4 PPPoE Access\n   In the above sequence, steps 1-4 are the\
    \ standard PPPoE call flow.\n   The UP is responsible for redirecting the PPPoE\
    \ control packets to\n   the CP or RG.  The PPPoE control packets are transmitted\
    \ between the\n   CP and UP through the Si.\n   After the PPPoE call flow, if\
    \ the subscriber passed the AAA\n   authentication and authorization, the CP will\
    \ create a corresponding\n   session on the UP through the Ci.  The formats of\
    \ the messages are as\n   follows:\n   <Update_Request Message> ::= <Common Header>\n\
    \                     <Basic Subscriber TLV>\n                     <PPP Subscriber\
    \ TLV>\n                     <IPv4 Subscriber TLV>\n                     <IPv4\
    \ Routing TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response\
    \ Message> ::= <Common Header>\n                    <Update Response TLV>\n  \
    \                  [<Subscriber CGN Port Range TLV>]\n"
- title: 5.2.2.  IPv6 PPPoE Access
  contents:
  - "5.2.2.  IPv6 PPPoE Access\n   Figure 21 describes the IPv6 PPPoE access call\
    \ flow.\n        RG              UP                      CP              AAA\n\
    \        |  PPPoE Disc   |        PPPoE Disc      |               |\n       1|<------------->|<--------via\
    \ Si-------->|               |\n        |  PPP LCP      |        PPP LCP     \
    \    |               |\n       2|<------------->|<---------via Si------->|   \
    \            |\n        |  PPP PAP/CHAP |        PPP PAP/CHAP    |    Req/Rep\
    \    |\n       3|<------------->|<---------via Si------->|<------------->|\n \
    \       |  PPP IP6CP    |        PPP IP6CP       |               |\n       4|<------------->|<---------via\
    \ Si------->|               |\n        |               |  Create Subscriber  \
    \   |               |\n        |               |   Session Request      |    \
    \           |\n        |              5|<--------via Ci---------|            \
    \   |\n        |               |  Create Subscriber     |               |\n  \
    \      |               |   Session Response     |               |\n        | \
    \             6|---------via Ci-------->|               |\n        | ND Negotiation|\
    \        ND Negotiation  |               |\n       7|<------------->|<---------via\
    \ Si------->|               |\n        |               |  Update Subscriber  \
    \   |               |\n        |               |   Session Request      |    \
    \           |\n        |              8|<--------via Ci---------|            \
    \   |\n        |               |  Update Subscriber     |               |\n  \
    \      |               |   Session Response     |               |\n        | \
    \             9|---------via Ci-------->|               |\n        |    DHCPv6\
    \     |        DHCPv6          |               |\n        |  Negotiation  |  \
    \    Negotiation       |               |\n      7'|<------------->|<---------via\
    \ Si------->|               |\n        |               |  Update Subscriber  \
    \   |               |\n        |               |   Session Request      |    \
    \           |\n        |             8'|<---------via Ci--------|            \
    \   |\n        |               |  Update Subscriber     |               |\n  \
    \      |               |   Session Response     |               |\n        | \
    \            9'|---------via Ci-------->|               |\n                  \
    \      Figure 21: IPv6 PPPoE Access\n   From the above sequence, steps 1-4 are\
    \ the standard PPPoE call flow.\n   The UP is responsible for redirecting the\
    \ PPPoE control packets to\n   the CP or RG.  The PPPoE control packets are transmitted\
    \ between the\n   CP and UP through the Si.\n   After the PPPoE call flow, if\
    \ the subscriber passed the AAA\n   authentication and authorization, the CP will\
    \ create a corresponding\n   session on the UP through the Ci.  The formats of\
    \ the messages are as\n   follows:\n   <Update_Request Message> ::= <Common Header>\n\
    \                     <Basic Subscriber TLV>\n                     <PPP Subscriber\
    \ TLV>\n                     <IPv6 Subscriber TLV>\n                     <IPv6\
    \ Routing TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response\
    \ Message> ::= <Common Header>\n                    <Update Response TLV>\n  \
    \ Then, the RG will initialize an ND/DHCPv6 negotiation process with\n   the CP\
    \ (see steps 7 and 7'); after that, it will trigger an update\n   (steps 8-9 and\
    \ 8'-9') to the subscriber session.  The formats of the\n   update messages are\
    \ as follows:\n   <Update_Request Message> ::= <Common Header>\n             \
    \        <Basic Subscriber TLV>\n                     <PPP Subscriber TLV>\n \
    \                    <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n"
- title: 5.2.3.  PPPoE Dual-Stack Access
  contents:
  - "5.2.3.  PPPoE Dual-Stack Access\n   Figure 22 shows a combination of IPv4 and\
    \ IPv6 PPPoE access call\n   flows.\n        RG              UP              \
    \        CP              AAA\n        |PPPoE Discovery|      PPPoE Discovery \
    \  |               |\n       1|<------------->|<---------via Si------->|     \
    \          |\n        |  PPP LCP      |        PPP LCP         |             \
    \  |\n       2|<------------->|<---------via Si------->|               |\n   \
    \     |  PPP PAP/CHAP |        PPP PAP/CHAP    |    Req/Rep    |\n       3|<------------->|<---------via\
    \ Si------->|<------------->|\n        |  PPP IPCP     |        PPP IPCP     \
    \   |               |\n       4|<------------->|<---------via Si------->|    \
    \           |\n        |               |  Create v4 Subscriber  |            \
    \   |\n        |               |   Session Request      |               |\n  \
    \      |              5|<--------via Ci---------|               |\n        | \
    \              |  Create v4 Subscriber  |               |\n        |         \
    \      |   Session Response     |               |\n        |              6|---------via\
    \ Ci-------->|               |\n        |  PPP IP6CP    |        PPP IP6CP   \
    \    |               |\n      4'|<------------->|<---------via Si------->|   \
    \            |\n        |               |  Create V6 Subscriber  |           \
    \    |\n        |               |   Session Request      |               |\n \
    \       |             5'|<--------via Ci---------|               |\n        |\
    \               |  Create v6 Subscriber  |               |\n        |        \
    \       |   Session Response     |               |\n        |             6'|---------via\
    \ Ci-------->|               |\n        | ND Negotiation|     ND Negotiation \
    \    |               |\n       8|<------------->|<---------via Si------->|   \
    \            |\n        |               |  Update v6 Subscriber  |           \
    \    |\n        |               |   Session Request      |               |\n \
    \       |              9|<---------via Ci--------|               |\n        |\
    \               |  Update v6 Subscriber  |               |\n        |        \
    \       |   Session Response     |               |\n        |             10|---------via\
    \ Ci-------->|               |\n        |    DHCPv6     |        DHCPv6      \
    \    |               |\n        |  Negotiation  |      Negotiation       |   \
    \            |\n      8'|<------------->|<---------via Si------->|           \
    \    |\n        |               |  Update v6 Subscriber  |               |\n \
    \       |               |   Session Request      |               |\n        |\
    \             9'|<--------via Ci---------|               |\n        |        \
    \       |  Update v6 Subscriber  |               |\n        |               |\
    \   Session Response     |               |\n        |            10'|---------via\
    \ Ci-------->|               |\n                     Figure 22: PPPoE Dual-Stack\
    \ Access\n   PPPoE dual stack is a combination of IPv4 PPPoE and IPv6 PPPoE\n\
    \   access.  The process is as above.  The formats of the messages are as\n  \
    \ follows:\n   (1)  Create an IPv4 PPPoE subscriber session (steps 5-6):\n   \
    \   <Update_Request Message> ::= <Common Header>\n                        <Basic\
    \ Subscriber TLV>\n                        <PPP Subscriber TLV>\n            \
    \            <IPv4 Subscriber TLV>\n                        <IPv4 Routing TLV>\n\
    \                        [<Subscriber Policy TLV>]\n      <Update_Response Message>\
    \ ::= <Common Header>\n                       <Update Response TLV>\n        \
    \               [<Subscriber CGN Port Range TLV>]\n   (2)  Create an IPv6 PPPoE\
    \ subscriber session (steps 5'-6'):\n      <Update_Request Message> ::= <Common\
    \ Header>\n                        <Basic Subscriber TLV>\n                  \
    \      <PPP Subscriber TLV>\n                        <IPv6 Subscriber TLV>\n \
    \                       <IPv6 Routing TLV>\n                        [<Subscriber\
    \ Policy TLV>]\n      <Update_Response Message> ::= <Common Header>\n        \
    \               <Update Response TLV>\n   (3)  Update the IPv6 PPPoE subscriber\
    \ session (steps 9-10 and 9'-\n        10'):\n      <Update_Request Message> ::=\
    \ <Common Header>\n                        <Basic Subscriber TLV>\n          \
    \              <PPP Subscriber TLV>\n                        <IPv6 Subscriber\
    \ TLV>\n                        <IPv6 Routing TLV>\n                        [<Subscriber\
    \ Policy TLV>]\n      <Update_Response Message> ::= <Common Header>\n        \
    \               <Update Response TLV>\n"
- title: 5.3.  WLAN Access
  contents:
  - "5.3.  WLAN Access\n   Figure 23 shows the WLAN access call flow.\n        RG\
    \            UP              CP         AAA      Web Server\n        |    DHCP\
    \     |                |          |           |\n        |  Discovery  |     \
    \           |          |           |\n       1|------------>|                |\
    \          |           |\n        |             | DHCP Discovery |          |\
    \           |\n        |            2|-----via Si---->|   AAA    |           |\n\
    \        |             |   DHCP Offer   |<-------->|           |\n        |  \
    \          3|<----via Si-----|          |           |\n        |  DHCP Offer |\
    \                |          |           |\n       4|<------------|           \
    \     |          |           |\n        | DHCP Request|                |     \
    \     |           |\n       5|------------>|                |          |     \
    \      |\n        |             |  DHCP Request  |          |           |\n  \
    \      |            6|-----via Si---->|          |           |\n        |    \
    \         | Create Session |          |           |\n        |             | \
    \   Request     |          |           |\n        |            7|<----via Ci-----|\
    \          |           |\n        |             | Create Session |          |\
    \           |\n        |             |    Response    |          |           |\n\
    \        |            8|----via Ci----->|          |           |\n        |  \
    \           |  DHCP ACK      |          |           |\n        |            9|<----via\
    \ Si-----|          |           |\n        |  DHCP ACK   |                |  \
    \        |           |\n      10|<------------|                |          |  \
    \         |\n        | Subscriber  |                |          |           |\n\
    \        | HTTP Traffic|                |          |           |\n      11|------------>|-->\
    \             |          |           |\n        |             |  | Web URL   \
    \  |          |           |\n        |  Traffic    |  | Redirect    |        \
    \  |           |\n        | Redirection |  |             |          |        \
    \   |\n      12|<------------|<-+             |          |           |\n     \
    \ 13|-----------------Redirect to Web Server------------->|\n      14|<----------------Push\
    \ HTTP Log-in Page---------------|\n      15|-----------------User Authentication---------------->|\n\
    \        |             | Update Session |          |           |\n        |  \
    \           |    Request     |          |           |\n        |           18|<----via\
    \ Ci-----|          |           |\n        |             | Update Session |  \
    \        |           |\n        |             |    Response    |          |  \
    \         |\n        |           19|-----via Ci---->|          |           |\n\
    \                           Figure 23: WLAN Access\n   WLAN access starts with\
    \ the DHCP dial-up process (steps 1-6).  After\n   that, the CP will create a\
    \ subscriber session on the UP (steps 7-8).\n   The formats of the session creation\
    \ messages are as follows:\n   IPv4 Case:\n   <Update_Request Message> ::= <Common\
    \ Header>\n                     <Basic Subscriber TLV>\n                     <IPv4\
    \ Subscriber TLV>\n                     <IPv4 Routing TLV>\n                 \
    \    [<Subscriber Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n\
    \                    <Update Response TLV>\n                    [<Subscriber CGN\
    \ Port Range TLV>]\n   IPv6 Case:\n   <Update_Request Message> ::= <Common Header>\n\
    \                     <Basic Subscriber TLV>\n                     <IPv6 Subscriber\
    \ TLV>\n                     <IPv6 Routing TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n           \
    \         <Update Response TLV>\n   After step 10, the RG will be allocated an\
    \ IP address, and its first\n   HTTP packet will be redirected to a web server\
    \ for subscriber\n   authentication (steps 11-17).  After the web authentication,\
    \ if the\n   result is positive, the CP will update the subscriber session by\n\
    \   using the following message exchanges:\n   IPv4 Case:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <Basic Subscriber TLV>\n\
    \                     <IPv4 Subscriber TLV>\n                     <IPv4 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n           \
    \         [<Subscriber CGN Port Range TLV>]\n   IPv6 Case:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <Basic Subscriber TLV>\n\
    \                     <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n"
- title: 5.4.  L2TP
  contents:
  - '5.4.  L2TP

    '
- title: 5.4.1.  L2TP LAC Access
  contents:
  - "5.4.1.  L2TP LAC Access\n        RG         UP(LAC)      CP(LAC)     AAA    \
    \    LNS\n        |    PPPoE   |    PPPoE     |        |          |\n        |\
    \  Discovery |   Discovery  |        |          |\n       1|<---------->|<---via\
    \ Si--->|        |          |\n        |  PPP LCP   |   PPP LCP    |        |\
    \          |\n       2|<---------->|<---via Si--->|        |          |\n    \
    \    |PPP PAP/CHAP| PPP PAP/CHAP | Req/Rep|          |\n       3|<---------->|<---via\
    \ Si--->|<------>|          |\n        |  PPP IPCP  |  PPP IPCP    |        |\
    \          |\n       4|<---------->|<---via Si--->|        |          |\n    \
    \    |            | L2TP Tunnel  |        |          |\n        |            |\
    \ Negotiation  |        |          |\n        |            |   SCCRQ/     |  \
    \      |          |\n        |            |   SCCRP/     |        |          |\n\
    \        |            |   SCCCN      |        |          |\n        |        \
    \   5|<---via Si--->|        |          |\n        |            | || Forward \
    \                      |\n        |            | L2TP Session |        |     \
    \     |\n        |            | Negotiation  |        |          |\n        |\
    \            |    ICRQ/     |        |          |\n        |            |    ICRP/\
    \     |        |          |\n        |            |    ICCN      |        |  \
    \        |\n        |           6|<---via Si--->|        |          |\n      \
    \  |            | || Forward                       |\n        |            | \
    \   Create    |         |         |\n        |            |  Subscriber  |   \
    \      |         |\n        |            |  Session Req |         |         |\n\
    \        |           7|<---via Ci----|         |         |\n        |        \
    \    |    Create    |         |         |\n        |            |  Subscriber\
    \  |         |         |\n        |            |  Session Rep |         |    \
    \     |\n        |           8|----via Ci--->|         |         |\n        |\
    \         PAP/CHAP (Triggered by LNS)           |\n       9|<-----------------via\
    \ Routing----------------->|\n                         Figure 24: L2TP LAC Access\n\
    \   Steps 1-4 are a standard PPPoE access process.  After that, the LAC-\n   CP\
    \ starts to negotiate an L2TP session and tunnel with the LNS.\n   After the negotiation,\
    \ the CP will create an L2TP LAC subscriber\n   session on the UP through the\
    \ following messages:\n   <Update_Request Message> ::= <Common Header>\n     \
    \                <Basic Subscriber TLV>\n                     <L2TP-LAC Subscriber\
    \ TLV>\n                     <L2TP-LAC Tunnel TLV>\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n"
- title: 5.4.2.  L2TP LNS IPv4 Access
  contents:
  - "5.4.2.  L2TP LNS IPv4 Access\n        RG          LAC            UP(LNS)  AAA\
    \      CP(LNS)\n        |    PPPoE   |              |        |          |\n  \
    \      |  Discovery |              |        |          |\n       1|<---------->|\
    \              |        |          |\n        |  PPP LCP   |              |  \
    \      |          |\n       2|<---------->|                       |          |\n\
    \        |PPP PAP/CHAP|        Req/Rep        |          |\n       3|<---------->|<--------------------->|\
    \          |\n        |            | L2TP Tunnel  |     L2TP Tunnel   |\n    \
    \    |            | Negotiation  |     Negotiation   |\n        |            |\
    \   SCCRQ/     |       SCCRQ/      |\n        |            |   SCCRP/     |  \
    \     SCCRP/      |\n        |            |   SCCCN      |       SCCCN       |\n\
    \        |           4|<------------>|<------via Si----->|\n        |        \
    \    | L2TP Session |     L2TP Session  |\n        |            | Negotiation\
    \  |     Negotiation   |\n        |            |    ICRQ/     |        ICRQ/ \
    \     |\n        |            |    ICRP/     |        ICRP/      |\n        |\
    \            |    ICCN      |        ICCN       |\n        |           5|<------------>|<------via\
    \ Si----->|\n        |          PAP/CHAP (Triggered by LNS)          |\n     \
    \  8|<--------------------------------------------->|\n        |             \
    \      PPP IPCP                    |\n      10|<--------------------------------------------->|\n\
    \                      Figure 25: L2TP LNS IPv4 Access\n   In this case, the BNG\
    \ is running as an LNS and separated into LNS-CP\n   and LNS-UP.  Steps 1-5 finish\
    \ the normal L2TP dial-up process.  When\n   the L2TP session and tunnel negotiations\
    \ are finished, the LNS-CP\n   will create an L2TP LNS subscriber session on the\
    \ LNS-UP.  The format\n   of the messages is as follows:\n   <Update_Request Message>\
    \ ::= <Common Header>\n                     <L2TP-LNS Subscriber TLV>\n      \
    \               <Basic Subscriber TLV>\n                     <PPP Subscriber TLV>\n\
    \                     <IPv4 Subscriber TLV>\n                     <IPv4 Routing\
    \ TLV>\n                     <L2TP-LNS Tunnel TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n           \
    \         <Update Response TLV>\n                    [<Subscriber CGN Port Range\
    \ TLV>]\n   After that, the LNS-CP will trigger a AAA authentication.  If the\n\
    \   authentication result is positive, a PPP IP Control Protocol (IPCP)\n   process\
    \ will follow, and then the CP will update the session with the\n   following\
    \ message exchanges:\n   <Update_Request Message> ::= <Common Header>\n      \
    \               <L2TP-LNS Subscriber TLV>\n                     <Basic Subscriber\
    \ TLV>\n                     <PPP Subscriber TLV>\n                     <IPv4\
    \ Subscriber TLV>\n                     <IPv4 Routing TLV>\n                 \
    \    <L2TP-LNS Tunnel TLV>\n                     [<Subscriber Policy TLV>]\n \
    \  <Update_Response Message> ::= <Common Header>\n                    <Update\
    \ Response TLV>\n                    [<Subscriber CGN Port Range TLV>]\n"
- title: 5.4.3.  L2TP LNS IPv6 Access
  contents:
  - "5.4.3.  L2TP LNS IPv6 Access\n        RG          LAC          UP(LNS)    AAA\
    \      CP(LNS)\n        |    PPPoE   |              |        |          |\n  \
    \      |  Discovery |              |        |          |\n       1|<---------->|\
    \              |        |          |\n        |  PPP LCP   |              |  \
    \      |          |\n       2|<---------->|                       |          |\n\
    \        |PPP PAP/CHAP|        Req/Rep        |          |\n       3|<---------->|<--------------------->|\
    \          |\n        |            | L2TP Tunnel  |     L2TP Tunnel   |\n    \
    \    |            | Negotiation  |     Negotiation   |\n        |            |\
    \   SCCRQ/     |       SCCRQ/      |\n        |            |   SCCRP/     |  \
    \     SCCRP/      |\n        |            |   SCCCN      |       SCCCN       |\n\
    \        |           4|<------------>|<------via Si----->|\n        |        \
    \    | L2TP Session |     L2TP Session  |\n        |            | Negotiation\
    \  |     Negotiation   |\n        |            |    ICRQ/     |        ICRQ/ \
    \     |\n        |            |    ICRP/     |        ICRP/      |\n        |\
    \            |    ICCN      |        ICCN       |\n        |           5|<------------>|<------via\
    \ Si----->|\n        |          PAP/CHAP (Triggered by LNS)          |\n     \
    \  8|<--------------------------------------------->|\n        |             \
    \      PPP IP6CP                   |\n      10|<--------------------------------------------->|\n\
    \        |       ND Negotiation      |   ND Negotiation  |\n      13|<------------------------->|<-----via\
    \ Si------>|\n                      Figure 26: L2TP LNS IPv6 Access\n   Steps\
    \ 1-12 are the same as L2TP LNS IPv4 access.  Steps 1-5 finish\n   the normal\
    \ L2TP dial-up process.  When the L2TP session and tunnel\n   negotiations are\
    \ finished, the LNS-CP will create an L2TP LNS\n   subscriber session on the LNS-UP.\
    \  The format of the messages is as\n   follows:\n   <Update_Request Message>\
    \ ::= <Common Header>\n                     <L2TP-LNS Subscriber TLV>\n      \
    \               <Basic Subscriber TLV>\n                     <PPP Subscriber TLV>\n\
    \                     <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     <L2TP-LNS Tunnel TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n           \
    \         <Update Response TLV>\n   After that, the LNS-CP will trigger a AAA\
    \ authentication.  If the\n   authentication result is positive, a PPP IP6CP process\
    \ will follow,\n   and then the CP will update the session with the following\
    \ message\n   exchanges:\n   <Update_Request Message> ::= <Common Header>\n  \
    \                   <L2TP-LNS Subscriber TLV>\n                     <Basic Subscriber\
    \ TLV>\n                     <PPP Subscriber TLV>\n                     <IPv6\
    \ Subscriber TLV>\n                     <IPv6 Routing TLV>\n                 \
    \    <L2TP-LNS Tunnel TLV>\n                     [<Subscriber Policy TLV>]\n \
    \  <Update_Response Message> ::= <Common Header>\n                    <Update\
    \ Response TLV>\n   Then, an ND negotiation will be triggered by the RG.  After\
    \ the ND\n   negotiation, the CP will update the session with the following\n\
    \   message exchanges:\n   <Update_Request Message> ::= <Common Header>\n    \
    \                 <L2TP-LAC Subscriber TLV>\n                     <Basic Subscriber\
    \ TLV>\n                     <PPP Subscriber TLV>\n                     <IPv6\
    \ Subscriber TLV>\n                     <IPv6 Routing TLV>\n                 \
    \    <L2TP-LNS Tunnel TLV>\n                     [<Subscriber Policy TLV>]\n \
    \  <Update_Response Message> ::= <Common Header>\n                    <Update\
    \ Response TLV>\n"
- title: 5.5.  CGN (Carrier Grade NAT)
  contents:
  - "5.5.  CGN (Carrier Grade NAT)\n          RG              UP                 \
    \      CP             AAA\n          |               |  Public Address Block \
    \ |               |\n          |               |   Allocation Request   |    \
    \           |\n          |              1|<--------via Ci-------->|          \
    \     |\n          |               |  Public Address Block  |               |\n\
    \          |               |   Allocation Reply     |               |\n      \
    \    |              2|---------via Ci-------->|               |\n          | \
    \  Subscriber  |                        |               |\n          | Access\
    \ Request|        Subscriber      |               |\n         3|-------------->|\
    \      Access Request    |               |\n          |              4|----------via\
    \ Si------->|               |\n          |  Subscriber   |      Access Reply \
    \    5|<------------->|\n          | Access Reply 6|<---------via Si--------|\
    \               |\n         7|<--------------|                        |      \
    \         |\n          |               |  Create Subscriber     |            \
    \   |\n          |               |   Session Request      |               |\n\
    \          |              8|<--------via Ci---------|               |\n      \
    \    |               |  Create Subscriber     |               |\n          | \
    \              |   Session Response     |               |\n          |       \
    \        | (with NAT information) |               |\n          |             \
    \ 9|---------via Ci-------->|               |\n                           Figure\
    \ 27: CGN Access\n   The first steps allocate one or more CGN address blocks to\
    \ the UP\n   (steps 1-2).  This is achieved by the following message exchanges\n\
    \   between CP and UP:\n   <Addr_Allocation_Req Message> ::= <Common Header>\n\
    \                     <Address Allocation Request TLV>\n   <Addr_Allocation_Ack\
    \ Message> ::= <Common Header>\n                    <Address Allocation Response\
    \ TLV>\n   Steps 3-9 show the general dial-up process in the case of CGN mode.\n\
    \   The specific processes (e.g., IPoE, PPPoE, L2TP, etc.) are defined in\n  \
    \ above sections.\n   If a subscriber is a CGN subscriber, once the subscriber\
    \ session is\n   created/updated, the UP will report the NAT information to the\
    \ CP.\n   This is achieved by carrying the Subscriber CGN Port Range TLV in the\n\
    \   Update_Response message.\n"
- title: 5.6.  L3 Leased Line Access
  contents:
  - '5.6.  L3 Leased Line Access

    '
- title: 5.6.1.  Web Authentication
  contents:
  - "5.6.1.  Web Authentication\n        RG            UP              CP        \
    \ AAA      Web Server\n        | User traffic|                |          |   \
    \        |\n       1|------------>|                |          |           |\n\
    \        |             | User traffic   |          |           |\n        |  \
    \          2|-----via Si---->|    AAA   |           |\n        |             |\
    \ Create Session |          |           |\n        |             |    Request\
    \     |          |           |\n        |            4|<----via Ci-----|     \
    \     |           |\n        |             | Create Session |          |     \
    \      |\n        |             |    Response    |          |           |\n  \
    \      |            5|----via Ci----->|          |           |\n        | HTTP\
    \ traffic|                |          |           |\n       6|------------>|  \
    \              |          |           |\n        | Redirect to |             \
    \   |          |           |\n        |   Web URL   |                |       \
    \   |           |\n       7|<------------|                |          |       \
    \    |\n       8|-----------------Redirected to Web Server----------->|\n    \
    \   9|<----------------Push HTTP Log-in Page---------------|\n      10|-----------------User\
    \ Authentication---------------->|\n        |             | Update Session | \
    \         |           |\n        |             |    Request     |          | \
    \          |\n        |           13|<----via Ci-----|          |           |\n\
    \        |             | Update Session |          |           |\n        |  \
    \           |    Response    |          |           |\n        |           14|----via\
    \ Ci----->|          |           |\n         Figure 28: Web Authentication-Based\
    \ L3 Leased Line Access\n   In this case, IP traffic from the RG will trigger\
    \ the CP to\n   authenticate the RG by checking the source IP and the exchanges\
    \ with\n   the AAA server.  Once the RG has passed the authentication, the CP\n\
    \   will create a corresponding subscriber session on the UP through the\n   following\
    \ message exchanges:\n   IPv4 Case:\n   <Update_Request Message> ::= <Common Header>\n\
    \                     <Basic Subscriber TLV>\n                     <IPv4 Subscriber\
    \ TLV>\n                     <IPv4 Routing TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n           \
    \         <Update Response TLV>\n                    [<Subscriber CGN Port Range\
    \ TLV>]\n   IPv6 Case:\n   <Update_Request Message> ::= <Common Header>\n    \
    \                 <Basic Subscriber TLV>\n                     <IPv6 Subscriber\
    \ TLV>\n                     <IPv6 Routing TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n           \
    \         <Update Response TLV>\n   Then, the HTTP traffic from the RG will be\
    \ redirected to a web server\n   to finish the web authentication.  Once the web\
    \ authentication is\n   passed, the CP will trigger another AAA authentication.\
    \  After the\n   AAA authentication, the CP will update the session with the following\n\
    \   message exchanges:\n   IPv4 Case:\n   <Update_Request Message> ::= <Common\
    \ Header>\n                     <Basic Subscriber TLV>\n                     <IPv4\
    \ Subscriber TLV>\n                     <IPv4 Routing TLV>\n                 \
    \    [<Subscriber Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n\
    \                    <Update Response TLV>\n                    [<Subscriber CGN\
    \ Port Range TLV>]\n   IPv6 Case:\n   <Update_Request Message> ::= <Common Header>\n\
    \                     <Basic Subscriber TLV>\n                     <IPv6 Subscriber\
    \ TLV>\n                     <IPv6 Routing TLV>\n                     [<Subscriber\
    \ Policy TLV>]\n   <Update_Response Message> ::= <Common Header>\n           \
    \         <Update Response TLV>\n"
- title: 5.6.2.  User Traffic Trigger
  contents:
  - "5.6.2.  User Traffic Trigger\n        RG            UP              CP      \
    \   AAA\n        |             |   L3 access    |          |\n        |      \
    \       |  control list  |          |\n        |            1|<----via Ci-----|\
    \          |\n        |    User     |                |          |\n        | \
    \  traffic   |                |          |\n       2|------------>|          \
    \      |          |\n        |             |  User traffic  |          |\n   \
    \     |            3|-----via Si---->|          |\n        |             | Create\
    \ Session |          |\n        |             |    Request     |          |\n\
    \        |            5|<----via Ci-----|          |\n        |             |\
    \ Create Session |          |\n        |             |    Response    |      \
    \    |\n        |            6|----via Ci----->|          |\n          Figure\
    \ 29: User Traffic Triggered L3 Leased Line Access\n   In this case, the CP must\
    \ install on the UP an access control list,\n   which is used by the UP to determine\
    \ whether or not an RG is legal.\n   If the traffic is from a legal RG, it will\
    \ be redirected to the CP\n   though the Si.  The CP will trigger a AAA interchange\
    \ with the AAA\n   server.  After that, the CP will create a corresponding subscriber\n\
    \   session on the UP with the following message exchanges:\n   IPv4 Case:\n \
    \  <Update_Request Message> ::= <Common Header>\n                     <Basic Subscriber\
    \ TLV>\n                     <IPv4 Subscriber TLV>\n                     <IPv4\
    \ Routing TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response\
    \ Message> ::= <Common Header>\n                    <Update Response TLV>\n  \
    \                  [<Subscriber CGN Port Range TLV>]\n   IPv6 Case:\n   <Update_Request\
    \ Message> ::= <Common Header>\n                     <Basic Subscriber TLV>\n\
    \                     <IPv6 Subscriber TLV>\n                     <IPv6 Routing\
    \ TLV>\n                     [<Subscriber Policy TLV>]\n   <Update_Response Message>\
    \ ::= <Common Header>\n                    <Update Response TLV>\n"
- title: 5.7.  Multicast Service Access
  contents:
  - "5.7.  Multicast Service Access\n              RG            UP              CP\
    \         AAA\n              | User Access |  User Access   |   AAA    |\n   \
    \           |   Request   |    Request     |  Req/Rep |\n             1|<----------->|<----via\
    \ Si---->|<-------->|\n              |             | Create Session |        \
    \  |\n              |            2|<----via Ci---->|          |\n            \
    \  |             | Create Session |          |\n              |            3|----via\
    \ Ci----->|          |\n              |  Multicast  |                |       \
    \   |\n              | negotiation |                |          |\n           \
    \  4|<----------->|                |          |\n                        Figure\
    \ 30: Multicast Access\n   Multicast access starts with a user access request\
    \ from the RG.  The\n   request will be redirected to the CP by the Si.  A follow-up\
    \ AAA\n   interchange between the CP and the AAA server will be triggered.\n \
    \  After the authentication, the CP will create a multicast subscriber\n   session\
    \ on the UP through the following messages:\n   IPv4 Case, there will be a Multicast-ProfileV4\
    \ sub-TLV present in the\n   Subscriber Policy TLV:\n   <Update_Request Message>\
    \ ::= <Common Header>\n                  <Basic Subscriber TLV>\n            \
    \      <IPv4 Subscriber TLV>\n                  <IPv4 Routing TLV>\n         \
    \         <Subscriber Policy TLV>\n   <Update_Response Message> ::= <Common Header>\n\
    \                 <Update Response TLV>\n                 [<Subscriber CGN Port\
    \ Range TLV>]\n   IPv6 Case, there will be a Multicast-ProfileV6 sub-TLV present\
    \ in the\n   Subscriber Policy TLV:\n   <Update_Request Message> ::= <Common Header>\n\
    \                  <Basic Subscriber TLV>\n                  <IPv6 Subscriber\
    \ TLV>\n                  <IPv6 Routing TLV>\n                  <Subscriber Policy\
    \ TLV>\n   <Update_Response Message> ::= <Common Header>\n                 <Update\
    \ Response TLV>\n"
- title: 6.  S-CUSP Message Formats
  contents:
  - "6.  S-CUSP Message Formats\n   An S-CUSP message consists of a common header\
    \ followed by a variable-\n   length body consisting entirely of TLVs.  Receiving\
    \ an S-CUSP message\n   with an unknown message type or missing mandatory TLV\
    \ MUST trigger an\n   Error message (see Section 6.7) or a Response message with\
    \ an Error\n   Information TLV (see Section 7.6).\n   Conversely, if a TLV is\
    \ optional, the TLV may or may not be present.\n   Optional TLVs are indicated\
    \ in the message formats shown in this\n   document by being enclosed in square\
    \ brackets.\n   This section specifies the format of the common S-CUSP message\
    \ header\n   and lists the defined messages.\n   Network byte order is used for\
    \ all multi-byte fields.\n"
- title: 6.1.  Common Message Header
  contents:
  - "6.1.  Common Message Header\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      |  Ver  |  Resv | Message-Type  |        Message-Length\
    \         |\n      |            Reserved           |        Transaction-ID   \
    \      |\n                  Figure 31: S-CUSP Message Common Header\n   Ver (4\
    \ bits):  The major version of the protocol.  This document\n      specifies version\
    \ 1.  Different major versions of the protocol may\n      have significantly different\
    \ message structures and formats except\n      that the Ver field will always\
    \ be in the same place at the\n      beginning of each message.  A successful\
    \ S-CUSP session depends on\n      the CP and the UP both using the same major\
    \ version of the\n      protocol.\n   Resv (4 bits):  Reserved.  MUST be sent\
    \ as zero and ignored on\n      receipt.\n   Message-Type (8 bits):  The set of\
    \ message types specified in this\n      document is listed in Section 8.1.\n\
    \   Message-Length (16 bits):  Total length of the S-CUSP message\n      including\
    \ the common header, expressed in number of bytes as an\n      unsigned integer.\n\
    \   Transaction-ID (16 bits):  This field is used to identify requests.\n    \
    \  It is echoed back in any corresponding ACK/Response/Error message.\n      It\
    \ is RECOMMENDED that a monotonically increasing value be used in\n      successive\
    \ messages and that the value wraps back to zero after\n      0xFFFF.  The content\
    \ of this field is an opaque value that the\n      receiver MUST NOT use for any\
    \ purpose except to echo back in a\n      corresponding response and, optionally,\
    \ for logging.\n"
- title: 6.2.  Control Messages
  contents:
  - "6.2.  Control Messages\n   This document defines the following control messages:\n\
    \      | Type | Name            | Notes and TLVs that can be carried |\n     \
    \ | 1    | Hello           | Hello TLV, Keepalive TLV           |\n      | 2 \
    \   | Keepalive       | A common header with the Keepalive |\n      | 3    | Sync_Request\
    \    | Synchronization request            |\n      | 4    | Sync_Begin      |\
    \ Synchronization starts             |\n      | 5    | Sync_Data       | Synchronization\
    \ data: TLVs         |\n      | 6    | Sync_End        | End synchronization \
    \               |\n      | 7    | Update_Request  | TLVs specified in Sections\
    \ 7.6-7.9 |\n      | 8    | Update_Response | TLVs specified in Sections 7.6-7.9\
    \ |\n                         Table 2: Control Messages\n"
- title: 6.2.1.  Hello Message
  contents:
  - "6.2.1.  Hello Message\n   The Hello message is used for S-CUSP session establishment\
    \ and\n   version negotiation.  The details of S-CUSP session establishment and\n\
    \   version negotiation can be found in Section 4.1.1.\n   The format of the Hello\
    \ message is as follows:\n   <Hello Message> ::= <Common Header>\n           \
    \             <Hello TLV>\n                        <Keepalive TLV>\n         \
    \               [<Error Information TLV>]\n   The return code and negotiation\
    \ result will be carried in the Error\n   Information TLV.  They are listed as\
    \ follows:\n   0:  Success.  Version negotiation success.\n   1:  Failure.  Malformed\
    \ message received.\n   2:  TLV-Unknown.  One or more of the TLVs was not understood.\n\
    \   1001:  Version-Mismatch.  The version negotiation fails.  The S-CUSP\n   \
    \   session establishment phase fails.\n   1002:  Keepalive Error.  The keepalive\
    \ negotiation fails.  The S-CUSP\n      session establishment phase fails.\n \
    \  1003:  Timer Expires.  The establishment timer expired.  Session\n      establishment\
    \ phase fails.\n"
- title: 6.2.2.  Keepalive Message
  contents:
  - "6.2.2.  Keepalive Message\n   Each end of an S-CUSP session periodically sends\
    \ a Keepalive message.\n   It is used to detect whether the peer end is still\
    \ alive.  The\n   Keepalive procedures are defined in Section 4.1.2.\n   The format\
    \ of the Keepalive message is as follows:\n   <Keepalive Message> ::= <Common\
    \ Header>\n"
- title: 6.2.3.  Sync_Request Message
  contents:
  - "6.2.3.  Sync_Request Message\n   The Sync_Request message is used to request\
    \ synchronization from an\n   S-CUSP peer.  Both CP and UP can request their peer\
    \ to synchronize\n   data.\n   The format of the Sync_Request message is as follows:\n\
    \   <Sync_Request Message> ::= <Common Header>\n   A Sync_Request message may\
    \ result in a Sync_Begin message from its\n   peer.  The Sync_Begin message is\
    \ defined in Section 6.2.4.\n"
- title: 6.2.4.  Sync_Begin Message
  contents:
  - "6.2.4.  Sync_Begin Message\n   The Sync_Begin message is a reply to a Sync_Request\
    \ message.  It is\n   used to notify the synchronization requester whether the\n\
    \   synchronization can be started.\n   The format of the Sync_Begin message is\
    \ as follows:\n   <Sync_Begin Message> ::= <Common Header>\n                 \
    \          <Error Information TLV>\n   The return codes are carried in the Error\
    \ Information TLV.  The codes\n   are listed below:\n   0:  Success.  Be ready\
    \ to synchronize.\n   1:  Failure.  Malformed message received.\n   2:  TLV-Unknown.\
    \  One or more of the TLVs was not understood.\n   2001:  Synch-NoReady.  The\
    \ data to be synchronized is not ready.\n   2002:  Synch-Unsupport.  The data\
    \ synchronization is not supported.\n"
- title: 6.2.5.  Sync_Data Message
  contents:
  - "6.2.5.  Sync_Data Message\n   The Sync_Data message is used to send data being\
    \ synchronized between\n   the CP and UP.  The Sync_Data message has the same\
    \ function and\n   format as the Update_Request message.  The difference is that\
    \ there\n   is no ACK for a Sync_Data message.  An error caused by the Sync_Data\n\
    \   message will result in a Sync_End message.\n   There are two scenarios:\n\
    \   *  Synchronization from UP to CP: Synchronize the resource data to\n     \
    \ CP.\n            <Sync_Data Message> ::= <Common Header>\n   *  Synchronization\
    \ from CP to UP: Synchronize all subscriber sessions\n      to the UP.  The Subscriber\
    \ TLVs carried are those appearing in\n      Section 7.9.  As for which TLVs should\
    \ be carried, it depends on\n      the specific session data to be synchronized.\
    \  The process is\n      equivalent to the creation of a particular session. \
    \ Refer to\n      Section 5 to see more details.\n            <Sync_Data Message>\
    \ ::= <Common Header>\n"
- title: 6.2.6.  Sync_End Message
  contents:
  - "6.2.6.  Sync_End Message\n   The Sync_End message is used to indicate the end\
    \ of a synchronization\n   process.  The format of a Sync_End message is as follows:\n\
    \   <Sync_End Message> ::= <Common Header>\n                           <Error\
    \ Information TLV>\n   The return/error codes are listed as follows:\n   0:  Success.\
    \  Synchronization finished.\n   1:  Failure.  Malformed message received.\n \
    \  2:  TLV-Unknown.  One or more of the TLVs was not understood.\n"
- title: 6.2.7.  Update_Request Message
  contents:
  - "6.2.7.  Update_Request Message\n   The Update_Request message is a multipurpose\
    \ message; it can be used\n   to create, update, and delete subscriber sessions\
    \ on a UP.\n   For session operations, the specific operation is controlled by\
    \ the\n   Oper field of the carried TLVs.  As defined in Section 7.1, the Oper\n\
    \   field can be set to either Update or Delete when a TLV is carried in\n   an\
    \ Update_Request message.\n   When the Oper field is set to Update, it means to\
    \ create or update a\n   subscriber session.  If the Oper field is set to Delete,\
    \ it is a\n   request to delete a corresponding session.\n   The format of the\
    \ Update_Request message is as follows:\n   <Update_Request Message> ::= <Common\
    \ Header>\n                           [<IPv4 Routing TLV>]\n                 \
    \          [<IPv6 Routing TLV>]\n                           [<Subscriber TLVs>]\n\
    \   Where the Subscriber TLVs are those appearing in Section 7.9.  Each\n   Update_Request\
    \ message will result in an Update_Response message,\n   which is defined in Section\
    \ 6.2.8.\n"
- title: 6.2.8.  Update_Response Message
  contents:
  - "6.2.8.  Update_Response Message\n   The Update_Response message is a response\
    \ to an Update_Request\n   message.  It is used to confirm the update request\
    \ (or reject it in\n   the case of an error).  The format of an Update_Response\
    \ message is\n   as follows:\n   <Update_Response Message> ::= <Common Header>\n\
    \                           [<Subscriber CGN Port Range TLV>]\n              \
    \             <Error Information TLV>\n   The return/error codes are carried in\
    \ the Error Information TLV.\n   They are listed as follows:\n   0:  Success.\n\
    \   1:  Failure.  Malformed message received.\n   2:  TLV-Unknown.  One or more\
    \ of the TLVs was not understood.\n   3001:  Pool-Mismatch.  The corresponding\
    \ address pool cannot be\n      found.\n   3002:  Pool-Full.  The address pool\
    \ is fully allocated, and no\n      address segment is available.\n   3003:  Subnet-Mismatch.\
    \  The address pool subnet cannot be found.\n   3004:  Subnet-Conflict.  Subnets\
    \ in the address pool have been\n      classified into other clients.\n   4001:\
    \  Update-Fail-No-Res. The forwarding table fails to be delivered\n      because\
    \ the forwarding resources are insufficient.\n   4002:  QoS-Update-Success.  The\
    \ QoS policy takes effect.\n   4003:  QoS-Update-Sq-Fail.  Failed to process the\
    \ queue in the QoS\n      policy.\n   4004:  QoS-Update-CAR-Fail.  Processing\
    \ of the CAR in the QoS policy\n      fails.\n   4005:  Statistic-Fail-No-Res.\
    \ Statistics processing failed due to\n      insufficient statistics resources.\n"
- title: 6.3.  Event Message
  contents:
  - "6.3.  Event Message\n   The Event message is used to report subscriber session\
    \ traffic\n   statistics and detection information.  The format of the Event\n\
    \   message is as follows:\n   <Event Message> ::= <Common Header>\n         \
    \                  [<Subscriber Traffic Statistics Report TLV>]\n            \
    \               [<Subscriber Detection Result Report TLV>]\n"
- title: 6.4.  Report Message
  contents:
  - "6.4.  Report Message\n   The Report message is used to report board and interface\
    \ status on a\n   UP.  The format of the Report message is as follows:\n   <Report\
    \ Message> ::= <Common Header>\n                           [<Board Status TLVs>]\n\
    \                           [<Interface Status TLVs>]\n"
- title: 6.5.  CGN Messages
  contents:
  - "6.5.  CGN Messages\n   This document defines the following resource allocation\
    \ messages:\n       | Type | Message Name        | TLV that is carried       \
    \  |\n       | 200  | Addr_Allocation_Req | Address Allocation Request  |\n  \
    \     | 201  | Addr_Allocation_Ack | Address Allocation Response |\n       | 202\
    \  | Addr_Renew_Req      | Address Renewal Request     |\n       | 203  | Addr_Renew_Ack\
    \      | Address Renewal Response    |\n       | 204  | Addr_Release_Req    |\
    \ Address Release Request     |\n       | 205  | Addr_Release_Ack    | Address\
    \ Release Response    |\n                  Table 3: Resource Allocation Messages\n"
- title: 6.5.1.  Addr_Allocation_Req Message
  contents:
  - "6.5.1.  Addr_Allocation_Req Message\n   The Addr_Allocation_Req message is used\
    \ to request CGN address\n   allocation.  The format of the Addr_Allocation_Req\
    \ message is as\n   follows:\n   <Addr_Allocation_Req Message> ::= <Common Header>\n\
    \                           <Address Allocation Request TLV>\n"
- title: 6.5.2.  Addr_Allocation_Ack Message
  contents:
  - "6.5.2.  Addr_Allocation_Ack Message\n   The Addr_Allocation_Ack message is a\
    \ response to an\n   Addr_Allocation_Req message.  The format of the Addr_Allocation_Ack\n\
    \   message is as follows:\n   <Addr_Allocation_Ack Message> ::= <Common Header>\n\
    \                           <Address Allocation Response TLV>\n"
- title: 6.5.3.  Addr_Renew_Req Message
  contents:
  - "6.5.3.  Addr_Renew_Req Message\n   The Addr_Renew_Req message is used to request\
    \ address renewal.  The\n   format of the Addr_Renew_Req message is as follows:\n\
    \   <Addr_Renew_Req Message> ::= <Common Header>\n                           <Address\
    \ Renewal Request TLV>\n"
- title: 6.5.4.  Addr_Renew_Ack Message
  contents:
  - "6.5.4.  Addr_Renew_Ack Message\n   The Addr_Renew_Ack message is a response to\
    \ an Addr_Renew_Req\n   message.  The format of the Addr_Renew_Req message is\
    \ as follows:\n   <Addr_Renew_Ack Message> ::= <Common Header>\n             \
    \              <Address Renewal Response TLV>\n"
- title: 6.5.5.  Addr_Release_Req Message
  contents:
  - "6.5.5.  Addr_Release_Req Message\n   The Addr_Release_Req message is used to\
    \ request address release.  The\n   format of the Addr_Release_Req message is\
    \ as follows:\n   <Addr_Release_Req Message> ::= <Common Header>\n           \
    \                <Address Release Request TLV>\n"
- title: 6.5.6.  Addr_Release_Ack Message
  contents:
  - "6.5.6.  Addr_Release_Ack Message\n   The Addr_Release_Ack message is a response\
    \ to an Addr_Release_Req\n   message.  The format of the Addr_Release_Ack message\
    \ is as follows:\n   <Addr_Release_Ack Message> ::= <Common Header>\n        \
    \                   <Address Release Response TLV>\n"
- title: 6.6.  Vendor Message
  contents:
  - "6.6.  Vendor Message\n   The Vendor message, in conjunction with the Vendor TLV\
    \ and Vendor\n   sub-TLV, can be used by vendors to extend S-CUSP.  The Message-Type\n\
    \   is 11.  If the receiver does not recognize the message, an Error\n   message\
    \ will be returned to the sender.\n   The format of the Vendor message is as follows:\n\
    \   <Vendor Message> ::= <Common Header>\n                        <Vendor TLV>\n\
    \                        [<any other TLVs as specified by the vendor>]\n"
- title: 6.7.  Error Message
  contents:
  - "6.7.  Error Message\n   The Error message is defined to return some critical\
    \ error\n   information to the sender.  If a receiver does not support the type\n\
    \   of the received message, it MUST return an Error message to the\n   sender.\n\
    \   The format of the Error message is as below:\n   <Error Message> ::= <Common\
    \ Header>\n                       <Error Information TLV>\n"
- title: 7.  S-CUSP TLVs and Sub-TLVs
  contents:
  - "7.  S-CUSP TLVs and Sub-TLVs\n   This section specifies the following:\n   *\
    \  The format of the TLVs that appear in S-CUSP messages,\n   *  The format of\
    \ the sub-TLVs that appear within the values of some\n      TLVs, and\n   *  The\
    \ format of some basic data fields that appear within TLVs or\n      sub-TLVs.\n\
    \   See Section 8 for a list of all defined TLVs and sub-TLVs.\n"
- title: 7.1.  Common TLV Header
  contents:
  - "7.1.  Common TLV Header\n   S-CUSP messages consist of the common header specified\
    \ in Section 6.1\n   followed by TLVs formatted as specified in this section.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      | Oper\
    \  |      TLV-Type         |       TLV-Length              |\n               \
    \         Figure 32: Common TLV Header\n   Oper (4 bits):  For Message-Types that\
    \ specify an operation on a data\n      set, the Oper field is interpreted as\
    \ Update, Delete, or Reserved\n      as specified in Section 8.3.  For all other\
    \ Message-Types, the\n      Oper field MUST be sent as zero and ignored on receipt.\n\
    \   TLV-Type (12 bits):  The type of a TLV.  TLV-Type specifies the\n      interpretation\
    \ and format of the Value field of the TLV.  See\n      Section 8.2.\n   TLV-Length\
    \ (2 bytes):  The length of the Value portion of the TLV in\n      bytes as an\
    \ unsigned integer.\n   Value (variable length):  This is the portion of the TLV\
    \ whose size\n      is given by TLV-Length.  It consists of fields, frequently\
    \ using\n      one of the basic data field types (see Section 7.2) and sub-TLVs\n\
    \      (see Section 7.3).\n"
- title: 7.2.  Basic Data Fields
  contents:
  - "7.2.  Basic Data Fields\n   This section specifies the binary format of several\
    \ standard basic\n   data fields that are used within other data structures in\
    \ this\n   specification.\n   STRING:  0 to 255 octets.  Will be encoded as a\
    \ sub-TLV (see\n      Section 7.3) to provide the length.  The use of this data\
    \ type in\n      S-CUSP is to provide convenient labels for use by network\n \
    \     operators in configuring and debugging their networks and\n      interpreting\
    \ S-CUSP messages.  Subscribers will not normally see\n      these labels.  They\
    \ are normally interpreted as ASCII [RFC20].\n   MAC-Addr:  6 octets.  Ethernet\
    \ MAC address [RFC7042].\n   IPv4-Address:  8 octets. 4 octets of the IPv4 address\
    \ value followed\n      by a 4-octet address mask in the format XXX.XXX.XXX.XXX.\n\
    \   IPv6-Address:  20 octets. 16 octets of the IPv6 address followed by a\n  \
    \    4-octet integer n in the range of 0 to 128, which gives the\n      address\
    \ mask as the one's complement of 2**(128-n) - 1.\n   VLAN ID:  2 octets.  As\
    \ follows [802.1Q]:\n             0                   1\n             0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n            | PRI |D|      VLAN-ID          |\n   \
    \   PRI:  Priority.  Default value 7.\n      D:  Drop Eligibility Indicator (DEI).\
    \  Default value 0.\n      VLAN-ID:  Unsigned integer in the range 1-4094. (0\
    \ and 4095 are\n         not valid VLAN IDs [802.1Q].)\n"
- title: 7.3.  Sub-TLV Format and Sub-TLVs
  contents:
  - "7.3.  Sub-TLV Format and Sub-TLVs\n   In some cases, the Value portion of a TLV,\
    \ as specified in\n   Section 7.1, can contain one or more sub-TLVs formatted\
    \ as follows:\n       0                   1                   2              \
    \     3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      |              Type             |          Length               |\n\
    \      |                        Value                                  |\n   \
    \                      Figure 33: Sub-TLV Header\n   Type (2 bytes):  The type\
    \ of a sub-TLV.  The Type field specifies the\n      interpretation and format\
    \ of the Value field of the TLV.  Sub-TLV\n      type values have the same meaning\
    \ regardless of the TLV type of\n      the TLV within which the sub-TLV occurs.\
    \  See Section 8.4.\n   Length (2 bytes):  The length of the Value portion of\
    \ the sub-TLV in\n      bytes as an unsigned integer.\n   Value (variable length):\
    \  This is the Value portion of the sub-TLV\n      whose size is given by Length.\n\
    \   The sub-TLVs currently specified are defined in the following\n   subsections.\n"
- title: 7.3.1.  Name Sub-TLVs
  contents:
  - "7.3.1.  Name Sub-TLVs\n   This document defines the following name sub-TLVs that\
    \ are used to\n   carry the name of the corresponding object.  The length of each\
    \ of\n   these sub-TLVs is variable from 1 to 255 octets.  The value is of\n \
    \  type STRING padded with zero octets to a length in octets that is an\n   integer\
    \ multiple of 4.\n    | Type | Sub-TLV Name        | Meaning                 \
    \           |\n    | 1    | VRF-Name            | The name of a VRF          \
    \        |\n    | 2    | Ingress-QoS-Profile | The name of an ingress QoS profile\
    \ |\n    | 3    | Egress-QoS-Profile  | The name of an egress QoS profile  |\n\
    \    | 4    | User-ACL-Policy     | The name of an ACL policy          |\n   \
    \ | 5    | Multicast-ProfileV4 | The name of an IPv4 multicast      |\n    | 6\
    \    | Multicast-ProfileV6 | The name of an IPv6 multicast      |\n    | 9   \
    \ | NAT-Instance        | The name of a NAT instance         |\n    | 10   | Pool-Name\
    \           | The name of an address pool        |\n                         \
    \  Table 4: Name Sub-TLVs\n"
- title: 7.3.2.  Ingress-CAR Sub-TLV
  contents:
  - "7.3.2.  Ingress-CAR Sub-TLV\n   The Ingress-CAR sub-TLV indicates the authorized\
    \ upstream Committed\n   Access Rate (CAR) parameters.  The sub-TLV type of the\
    \ Ingress-CAR\n   sub-TLV is 7.  The sub-TLV length is 16.  The format is as shown\
    \ in\n   Figure 34.\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      |                  CIR (Committed Information Rate)         \
    \    |\n      |                  PIR (Peak Information Rate)                 \
    \ |\n      |                  CBS (Committed Burst Size)                   |\n\
    \      |                  PBS (Peak Burst Size)                        |\n   \
    \                    Figure 34: Ingress-CAR Sub-TLV\n   Where:\n      CIR (4 bytes):\
    \  Guaranteed rate in bits/second.\n      PIR (4 bytes):  Burst rate in bits/second.\n\
    \      CBS (4 bytes):  The token bucket in bytes.\n      PBS (4 bytes):  Burst\
    \ token bucket in bytes.\n   These fields are unsigned integers.  More details\
    \ about CIR, PIR,\n   CBS, and PBS can be found in [RFC2698].\n"
- title: 7.3.3.  Egress-CAR Sub-TLV
  contents:
  - "7.3.3.  Egress-CAR Sub-TLV\n   The Egress-CAR sub-TLV indicates the authorized\
    \ downstream Committed\n   Access Rate (CAR) parameters.  The sub-TLV type of\
    \ the Egress-CAR\n   sub-TLV is 8.  Its sub-TLV length is 16 octets.  The format\
    \ of the\n   value part is as defined below.\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                  CIR (Committed Information\
    \ Rate)             |\n      |                  PIR (Peak Information Rate)  \
    \                |\n      |                  CBS (Committed Burst Size)      \
    \             |\n      |                  PBS (Peak Burst Size)              \
    \          |\n                       Figure 35: Egress-CAR Sub-TLV\n   Where:\n\
    \      CIR (4 bytes):  Guaranteed rate in bits/second.\n      PIR (4 bytes): \
    \ Burst rate in bits/second.\n      CBS (4 bytes):  The token bucket in bytes.\n\
    \      PBS (4 bytes):  Burst token bucket in bytes.\n   These fields are unsigned\
    \ integers.  More details about CIR, PIR,\n   CBS, and PBS can be found in [RFC2698].\n"
- title: 7.3.4.  If-Desc Sub-TLV
  contents:
  - "7.3.4.  If-Desc Sub-TLV\n   The If-Desc sub-TLV is defined to designate an interface.\
    \  It is an\n   optional sub-TLV that may be carried in those TLVs that have an\
    \ If-\n   Index or Out-If-Index field.  The If-Desc sub-TLV is used as a\n   locally\
    \ unique identifier within a BNG.\n   The sub-TLV type is 11.  The sub-TLV length\
    \ is 12 octets.  The format\n   depends on the If-Type (Section 8.6).  The format\
    \ of the value part\n   is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   |  If-Type (1-5)|    Chassis    |             Slot \
    \             |\n   |           Sub-Slot            |            Port Number \
    \       |\n   |                         Sub-Port Number                      \
    \ |\n                    If-Desc Sub-TLV (Physical Port)\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   | If-Type (6-7) |                Reserved\
    \                       |\n   |                         Sub-Port Number      \
    \                 |\n                     If-Desc Sub-TLV (Virtual Port)\n   \
    \                  Figure 36: If-Desc Sub-TLV Formats\n   Where:\n      If-Type:\
    \  8 bits in length.  The value of this field indicates the\n         type of\
    \ an interface.  The If-Type values defined in this\n         document are listed\
    \ in Section 8.6.\n      Chassis (8 bits):  Identifies the chassis that the interface\n\
    \         belongs to.\n      Slot (16 bits):  Identifies the slot that the interface\
    \ belongs\n         to.\n      Sub-Slot (16 bits):  Identifies the sub-slot the\
    \ interface belongs\n         to.\n      Port Number (16 bits):  An identifier\
    \ of a physical port/interface\n         (e.g., If-Type: 1-5).  It is locally\
    \ significant within the\n         slot/sub-slot.\n      Sub-Port Number (32 bits):\
    \  An identifier of the sub-port.\n         Locally significant within its \"\
    parent\" port (physical or\n         virtual).\n      Logic-ID (32 bits):  An\
    \ identifier of a virtual interface (e.g.,\n         If-Type: 6-7).\n"
- title: 7.3.5.  IPv6 Address List Sub-TLV
  contents:
  - "7.3.5.  IPv6 Address List Sub-TLV\n   The IPv6 Address List sub-TLV is used to\
    \ convey one or more IPv6\n   addresses.  It is carried in the IPv6 Subscriber\
    \ TLV.  The sub-TLV\n   type is 12.  The sub-TLV length is variable.\n   The format\
    \ of the value part of the IPv6 Address List sub-TLV is as\n   follows:\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      ~       \
    \                 IPv6 Address                           ~\n      ~          \
    \              IPv6 Address                           ~\n      ~             \
    \           IPv6 Address                           ~\n                    Figure\
    \ 37: IPv6 Address List Sub-TLV\n   Where:\n      IPv6 Address (IPv6-Address):\
    \  Each IP Address is of type IP-\n         Address and carries an IPv6 address\
    \ and length.\n"
- title: 7.3.6.  Vendor Sub-TLV
  contents:
  - "7.3.6.  Vendor Sub-TLV\n   The Vendor sub-TLV is intended to be used inside the\
    \ Value portion of\n   the Vendor TLV (Section 7.13).  It provides a Sub-Type\
    \ that\n   effectively extends the sub-TLV type in the sub-TLV header and\n  \
    \ provides for versioning of Vendor sub-TLVs.\n   The value part of the Vendor\
    \ sub-TLV is formatted as follows:\n       0                   1             \
    \      2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      |           Sub-Type            |       Sub-Type-Version\
    \        |\n      ~             Value (other as specified by vendor)         \
    \     ~\n                         Figure 38: Vendor Sub-TLV\n   Where:\n     \
    \ Sub-TLV type:  13.\n      Sub-TLV length:  Variable.\n      Vendor-ID (4 bytes):\
    \  Vendor ID as defined in RADIUS [RFC2865].\n      Sub-Type (2 bytes):  Used\
    \ by the vendor to distinguish multiple\n         different sub-TLVs.\n      Sub-Type-Version\
    \ (2 bytes):  Used by the vendor to distinguish\n         different versions of\
    \ a vendor-defined sub-TLV Sub-Type.\n      Value:  As specified by the vendor.\n\
    \   Since vendor code will be handling the sub-TLV after the Vendor-ID\n   field\
    \ is recognized, the remainder of the sub-TLV can be organized\n   however the\
    \ vendor wants.  But it desirable for a vendor to be able\n   to define multiple\
    \ different Vendor sub-TLVs and to keep track of\n   different versions of its\
    \ vendor-defined sub-TLVs.  Thus, it is\n   RECOMMENDED that the vendor assign\
    \ a Sub-Type value for each of that\n   vendor's sub-TLVs that is different from\
    \ other Sub-Type values that\n   vendor has used.  Also, when modifying a vendor-defined\
    \ sub-TLV in a\n   way potentially incompatible with a previous definition, the\
    \ vendor\n   SHOULD increase the value it is using in the Sub-Type-Version field.\n"
- title: 7.4.  Hello TLV
  contents:
  - "7.4.  Hello TLV\n   The Hello TLV is defined to be carried in the Hello message\
    \ for\n   version and capabilities negotiation.  It indicates the S-CUSP sub-\n\
    \   version and capabilities supported.  The format of the value part of\n   the\
    \ Hello TLV is as follows:\n       0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n                            Figure 39: Hello TLV\n   Where:\n\
    \      TLV type:  100.\n      TLV length:  12 octets.\n      VerSupported:  32\
    \ bits in length.  It is a bit map of the Sub-\n         Versions of S-CUSP that\
    \ the sender supports.  This document\n         specifies Sub-Version zero of\
    \ Major Version 1, that is, Version\n         1.0.  The VerSupported field MUST\
    \ be nonzero.  The VerSupported\n         bits are numbered from 0 as the most\
    \ significant bit.  Bit 0\n         indicates support of Sub-Version zero, bit\
    \ 1 indicates support\n         of Sub-Version one, etc.\n      Vendor-ID:  4\
    \ bytes in length.  Vendor ID, as defined in RADIUS\n         [RFC2865].\n   \
    \   Capabilities:  32 bits in length.  Flags that indicate the support\n     \
    \    of particular capabilities by the sender of the Hello.  No\n         capabilities\
    \ are defined in this document, so implementations\n         of the version specified\
    \ herein will set this field to zero.\n         The Capabilities field of the\
    \ Hello TLV MUST be checked before\n         any other TLVs in the Hello because\
    \ capabilities defined in the\n         future might extend existing TLVs or permit\
    \ new TLVs.\n   After the exchange of Hello messages, the CP and UP each perform\
    \ a\n   logical AND of the Sub-Version supported by the CP and the UP and\n  \
    \ separately perform a logical AND of the Capabilities field for the CP\n   and\
    \ the UP.\n   If the result of the AND of the Sub-Versions supported is zero,\
    \ then\n   no session can be established, and the connection is torn down.  If\n\
    \   the result of the AND of the Sub-Versions supported is nonzero, then\n   the\
    \ session uses the highest Sub-Version supported by both the CP and\n   UP.\n\
    \   For example, if one side supports Sub-Versions 1, 3, 4, and 5\n   (VerSupported\
    \ = 0x5C000000) and the other side supports 2, 3, and 4\n   (VerSupported = 0x38000000),\
    \ then 3 and 4 are the Sub-Versions in\n   common, and 4 is the highest Sub-Version\
    \ supported by both sides.  So\n   Sub-Version 4 is used for the session that\
    \ has been negotiated.\n   The result of the logical AND of the Capabilities bits\
    \ will show what\n   additional capabilities both sides support.  If this result\
    \ is zero,\n   there are no such capabilities, so none can be used during the\n\
    \   session.  If this result is nonzero, it shows the additional\n   capabilities\
    \ that can be used during the session.  The CP and the UP\n   MUST NOT use a capability\
    \ unless both advertise support.\n"
- title: 7.5.  Keepalive TLV
  contents:
  - "7.5.  Keepalive TLV\n   The Keepalive TLV is carried in the Hello message.  It\
    \ provides\n   timing information for this feature.  The format of the value part\
    \ of\n   the Keepalive TLV is as follows:\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |   Keepalive   | DeadTimer     |     \
    \       Reserved           |\n                          Figure 40: Keepalive TLV\n\
    \   Where:\n      TLV type:  102.\n      TLV length:  4 octets.\n      Keepalive\
    \ (8 bits):  Indicates the maximum interval (in seconds)\n         between two\
    \ consecutive S-CUSP messages sent by the sender of\n         the message containing\
    \ this TLV as an unsigned integer.  The\n         minimum value for the Keepalive\
    \ field is 1 second.  When set to\n         0, once the session is established,\
    \ no further Keepalive\n         messages are sent to the remote peer.  A RECOMMENDED\
    \ value for\n         the Keepalive frequency is 30 seconds.\n      DeadTimer\
    \ (8 bits in length):  Specifies the amount of time as an\n         unsigned integer\
    \ number of seconds, after the expiration of\n         which, the S-CUSP peer\
    \ can declare the session with the sender\n         of the Hello message to be\
    \ down if no S-CUSP message has been\n         received.  The DeadTimer SHOULD\
    \ be set to 0 and MUST be ignored\n         if the Keepalive is set to 0.  A RECOMMENDED\
    \ value for the\n         DeadTimer is 4 times the value of the Keepalive.\n \
    \     Reserved:  The Reserved bits MUST be sent as zero and ignored on\n     \
    \    receipt.\n"
- title: 7.6.  Error Information TLV
  contents:
  - "7.6.  Error Information TLV\n   The Error Information TLV is a common TLV that\
    \ can be used in many\n   responses (e.g., Update_Response message) and ACK messages\
    \ (e.g.,\n   Addr_Allocation_Ack message).  It is used to convey the information\n\
    \   about an error in the received S-CUSP message.  The format of the\n   value\
    \ part of the Error Information TLV is as follows:\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      | Message-Type  |  Reserved   \
    \          |  TLV-Type             |\n                      Figure 41: Error Information\
    \ TLV\n   Where:\n      TLV type:  101.\n      TLV length:  8 octets.\n      Message-Type\
    \ (1 byte):  This parameter is the message type of the\n         message containing\
    \ an error.\n      Reserved (1 byte):  MUST be sent as zero and ignored on receipt.\n\
    \      TLV-Type (2 bytes):  Indicates which TLV caused the error.\n      Error\
    \ Code:  4 bytes in length.  Indicate the specific Error Code\n         (see Section\
    \ 8.5).\n"
- title: 7.7.  BAS Function TLV
  contents:
  - "7.7.  BAS Function TLV\n   The BAS Function TLV is used by a CP to control the\
    \ access mode,\n   authentication methods, and other related functions of an interface\n\
    \   on a UP.\n   The format of the BAS Function TLV value part is as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |  Access-Mode\
    \  |  Auth-Method4 |  Auth-Method6 |    Reserved   |\n                       \
    \ Figure 42: BAS Function TLV\n   Where:\n      TLV type:  1.\n      TLV length:\
    \  Variable.\n      If-Index:  4 bytes in length, a unique identifier of an interface\n\
    \         of a BNG.\n      Access-Mode:  1 byte in length.  It indicates the access\
    \ mode of\n         the interface.  The defined values are listed in Section 8.7.\n\
    \      Auth-Method4:  1 byte in length.  It indicates the authentication\n   \
    \      on this interface for the IPv4 scenario.  This field is defined\n     \
    \    as a bitmap.  The bits defined in this document are listed in\n         Section\
    \ 8.8.  Other bits are reserved and MUST be sent as zero\n         and ignored\
    \ on receipt.\n      Auth-Method6:  1 byte in length.  It indicates the authentication\n\
    \         on this interface for the IPv6 scenario.  This field is defined\n  \
    \       as a bitmap.  The bits defined in this document are listed in\n      \
    \   Section 8.8.  Other bits are reserved and MUST be sent as zero\n         and\
    \ ignored on receipt.\n      Sub-TLVs:  The IF-Desc sub-TLV can be carried.\n\
    \         If-Desc sub-TLV:  Carries the interface information.\n      Flags: \
    \ The Flags field is defined as follows:\n       0                   1       \
    \            2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                MBZ                    \
    \        |Y|X|P|I|N|A|S|F|\n                         Figure 43: Interface Flags\n\
    \   Where:\n      F (IPv4 Trigger) bit:  Indicates whether IPv4 packets can trigger\n\
    \         a subscriber to go online.\n         1:  Enabled.\n         0:  Disabled.\n\
    \      S (IPv6 Trigger) bit:  Indicates whether IPv6 packets can trigger\n   \
    \      a subscriber to go online.\n         1:  Enabled.\n         0:  Disabled.\n\
    \      A (ARP Trigger) bit:  Indicates whether ARP packets can trigger a\n   \
    \      subscriber to go online.\n         1:  Enabled.\n         0:  Disabled.\n\
    \      N (ND Trigger) bit:  Indicates whether ND packets can trigger a\n     \
    \    subscriber to go online.\n         1:  Enabled.\n         0:  Disabled.\n\
    \      I (IPoE-Flow-Check):  Used for UP detection.\n         1:  Enable traffic\
    \ detection.\n         0:  Disable traffic detection.\n      P (PPP-Flow-Check)\
    \ bit:  Used for UP detection.\n         1:  Enable traffic detection.\n     \
    \    0:  Disable traffic detection.\n      X (ARP-Proxy) bit:  Indicates whether\
    \ ARP proxy is enabled on the\n         interface.\n         1:  The interface\
    \ is enabled with ARP proxy and can process ARP\n            requests across different\
    \ network ports and VLANs.\n         0:  The ARP proxy is not enabled on the interface\
    \ and only the\n            ARP requests of the same network port and VLAN are\n\
    \            processed.\n      Y (ND-Proxy) bit:  Indicates whether ND proxy is\
    \ enabled on the\n         interface.\n         1:  The interface is enabled with\
    \ ND proxy and can process ND\n            requests across different network ports\
    \ and VLANs.\n         0:  The ND proxy is not enabled on the interface and only\
    \ the\n            ND requests of the same network port and VLAN are processed.\n\
    \      MBZ:  Reserved bits that MUST be sent as zero and ignored on\n        \
    \ receipt.\n"
- title: 7.8.  Routing TLVs
  contents:
  - "7.8.  Routing TLVs\n   Typically, after an S-CUSP session is established between\
    \ a UP and a\n   CP, the CP will allocate one or more blocks of IP addresses to\
    \ the\n   UP.  Those IP addresses will be allocated to subscribers who will\n\
    \   dial-up (as defined in Section 4.3.1) to the UP.  To make sure that\n   other\
    \ nodes within the network learn how to reach those IP addresses,\n   the CP needs\
    \ to install one or more routes that can reach those IP\n   addresses on the UP\
    \ and notify the UP to advertise the routes to the\n   network.\n   The Routing\
    \ TLVs are used by a CP to notify a UP of the updates to\n   network routing information.\
    \  They can be carried in the\n   Update_Request message and Sync_Data message.\n"
- title: 7.8.1.  IPv4 Routing TLV
  contents:
  - "7.8.1.  IPv4 Routing TLV\n   The IPv4 Routing TLV is used to carry information\
    \ related to IPv4\n   network routing.\n   The format of the TLV value part is\
    \ as below:\n       0                   1                   2                \
    \   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      |        Route-Type             |          Reserved           |A|\n   \
    \                     Figure 44: IPv4 Routing TLV\n   Where:\n      TLV type:\
    \  7.\n      TLV length:  Variable.\n      User-ID:  4 bytes in length.  This\
    \ field carries the user\n         identifier.  It is filled with all Fs when\
    \ a non-user route is\n         delivered to the UP.\n      Dest-Address (IPv4-Address\
    \ type):  Identifies the destination\n         address.\n      Next-Hop (IPv4-Address\
    \ type):  Identifies the next-hop address.\n      Out-If-Index (4 bytes):  Indicates\
    \ the interface index.\n      Cost (4 bytes):  The cost value of the route.\n\
    \      Tag (4 bytes):  The tag value of the route.\n      Route-Type (2 bytes):\
    \  The value of this field indicates the route\n         type.  The values defined\
    \ in this document are listed in\n         Section 8.9.\n      Advertise-Flag:\
    \  1 bit shown as \"A\" in the figure above\n         (Figure 44).  Indicates\
    \ whether the UP should advertise the\n         route.  The following flag values\
    \ are defined:\n         0:  Not advertised.\n         1:  Advertised.\n     \
    \ Sub-TLVs:  The VRF-Name and/or If-Desc sub-TLVs can be carried.\n         VRF-Name\
    \ sub-TLV:  Indicates which VRF the route belongs to.\n         If-Desc sub-TLV:\
    \  Carries the interface information.\n      Reserved:  The Reserved field MUST\
    \ be sent as zero and ignored on\n         receipt.\n"
- title: 7.8.2.  IPv6 Routing TLV
  contents:
  - "7.8.2.  IPv6 Routing TLV\n   The IPv6 Routing TLV is used to carry IPv6 network\
    \ routing\n   information.\n   The format of the value part of this TLV is as\
    \ follows:\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      |        Route-Type             |          Reserved           |A|\n   \
    \                     Figure 45: IPv6 Routing TLV\n   Where:\n      TLV type:\
    \  8.\n      TLV length:  Variable.\n      User-ID:  4 bytes in length.  This\
    \ field carries the user\n         identifier.  This field is filled with all\
    \ Fs when a non-user\n         route is delivered to the UP.\n      IPv6 Dest-Address\
    \ (IPv6-Address type):  Identifies the destination\n         address.\n      IPv6\
    \ Next-Hop (IPv6-Address type):  Identifies the next-hop\n         address.\n\
    \      Out-If-Index (4 bytes):  Indicates the interface index.\n      Cost (4\
    \ bytes):  This is the cost value of the route.\n      Tag (4 bytes):  The tag\
    \ value of the route.\n      Route-Type (2 bytes):  The value of this field indicates\
    \ the route\n         type.  The values defined in this document are listed in\n\
    \         Section 8.9.\n      Advertise-Flag:  1 bit shown as \"A\" in the figure\
    \ above\n         (Figure 45).  Indicates whether the UP should advertise the\n\
    \         route.  The following flags are defined:\n         0:  Not advertised.\n\
    \         1:  Advertised.\n      Sub-TLVs:  The If-Desc and VRF-Name sub-TLVs\
    \ can be carried.\n         VRF-Name sub-TLV:  Indicates the VRF to which the\
    \ subscriber\n            belongs.\n         If-Desc sub-TLV:  Carries the interface\
    \ information.\n      Reserved:  The Reserved field MUST be sent as zero and ignored\
    \ on\n         receipt.\n"
- title: 7.9.  Subscriber TLVs
  contents:
  - "7.9.  Subscriber TLVs\n   The Subscriber TLVs are defined for a CP to send the\
    \ basic\n   information about a user to a UP.\n"
- title: 7.9.1.  Basic Subscriber TLV
  contents:
  - "7.9.1.  Basic Subscriber TLV\n   The Basic Subscriber TLV is used to carry the\
    \ common information for\n   all kinds of access subscribers.  It is carried in\
    \ an Update_Request\n   message.\n   The format of the Basic Subscriber TLV value\
    \ part is as follows:\n       0                   1                   2      \
    \             3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      |        User-MAC (cont.)       |   Oper-ID     |    Reserved\
    \   |\n      | Access-Type   |Sub-Access-Type|  Account-Type | Address Family|\n\
    \      |               C-VID           |          P-VID                |\n   \
    \   |               Detect-Times    |          Detect-Interval      |\n      \
    \                Figure 46: Basic Subscriber TLV\n   Where:\n      TLV type: \
    \ 2.\n      TLV length:  Variable.\n      User-ID (4 bytes):  The identifier of\
    \ a subscriber.\n      Session-ID (4 bytes):  Session ID of a PPPoE subscriber.\
    \  The\n         value zero identifies a non-PPPoE subscriber.\n      User-MAC\
    \ (MAC-Addr type):  The MAC address of a subscriber.\n      Oper-ID (1 byte):\
    \  Indicates the ID of an operation performed by a\n         user.  This field\
    \ is carried in the response from the UP.\n      Reserved (1 byte):  MUST be sent\
    \ as zero and ignored on receipt.\n      Access-Type (1 byte):  Indicates the\
    \ type of subscriber access.\n         Values defined in this document are listed\
    \ in Section 8.10.\n      Sub-Access-Type (1 byte):  Indicates whether PPP termination\
    \ or\n         PPP relay is used.\n         0:  Reserved.\n         1:  PPP Relay\
    \ (for LAC).\n         2:  PPP termination (for LNS).\n      Account-Type (1 byte):\
    \  Indicates whether traffic statistics are\n         collected independently.\n\
    \         0:  Collects statistics on IPv4 and IPv6 traffic of terminals\n    \
    \        independently.\n         1:  Collects statistics on IPv4 and IPv6 traffic\
    \ of terminals.\n      Address Family (1 byte):  The type of IP address.\n   \
    \      1:  IPv4.\n         2:  IPv6.\n         3:  Dual stack.\n      C-VID (VLAN-ID):\
    \  Indicates the inner VLAN ID.  The value 0\n         indicates that the VLAN\
    \ ID is invalid.  The default value of\n         PRI is 7, the value of DEI is\
    \ 0, and the value of VID is\n         1-4094.  The PRI value can also be obtained\
    \ by parsing terminal\n         packets.\n      P-VID (VLAN-ID):  Indicates the\
    \ outer VLAN ID.  The value 0\n         indicates that the VLAN ID is invalid.\
    \  The format is the same\n         as that for C-VID.\n      Detect-Times (2\
    \ bytes):  Number of detection timeout times.  The\n         value 0 indicates\
    \ that no detection is performed.\n      Detect-Interval (2 bytes):  Detection\
    \ interval in seconds.\n      If-Index (4 bytes):  Interface index.\n      Sub-TLVs:\
    \  The VRF-Name sub-TLV and If-Desc sub-TLV can be\n         carried.\n      \
    \   VRF-Name sub-TLV:  Indicates the VRF to which the subscriber\n           \
    \ belongs.\n         If-Desc sub-TLV:  Carries the interface information.\n  \
    \    Reserved:  The Reserved field MUST be sent as zero and ignored on\n     \
    \    receipt.\n"
- title: 7.9.2.  PPP Subscriber TLV
  contents:
  - "7.9.2.  PPP Subscriber TLV\n   The PPP Subscriber TLV is defined to carry PPP\
    \ information of a user\n   from a CP to a UP.  It will be carried in an Update_Request\
    \ message\n   when PPPoE or L2TP access is used.\n   The format of the TLV value\
    \ part is as follows:\n       0                   1                   2      \
    \             3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      |        MSS-Value              |        Reserved         \
    \    |M|\n      |        MRU                    |        Reserved            \
    \   |\n                       Figure 47: PPP Subscriber TLV\n   Where:\n     \
    \ TLV type:  3.\n      TLV length:  12 octets.\n      User-ID (4 bytes):  The\
    \ identifier of a subscriber.\n      MSS-Value (2 bytes):  Indicates the MSS value\
    \ (in bytes).\n      MSS-Enable (M) (1 bit):  Indicates whether the MSS is enabled.\n\
    \         0:  Disabled.\n         1:  Enabled.\n      MRU (2 bytes):  PPPoE local\
    \ MRU (in bytes).\n      Magic-Number (4 bytes):  Local magic number in PPP negotiation\n\
    \         packets.\n      Peer-Magic-Number (4 bytes):  Remote peer magic number.\n\
    \      Reserved:  The Reserved fields MUST be sent as zero and ignored on\n  \
    \       receipt.\n"
- title: 7.9.3.  IPv4 Subscriber TLV
  contents:
  - "7.9.3.  IPv4 Subscriber TLV\n   The IPv4 Subscriber TLV is defined to carry IPv4-related\
    \ information\n   for a BNG user.  It will be carried in an Update_Request message\
    \ when\n   IPv4 IPoE or PPPoE access is used.\n   The format of the TLV value\
    \ part is as follows:\n       0                   1                   2      \
    \             3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      |          MTU                  |   Reserved            |U|E|W|P|\n\
    \                       Figure 48: IPv4 Subscriber TLV\n   Where:\n      TLV type:\
    \  4.\n      TLV length:  Variable.\n      User-ID (4 bytes):  The identifier\
    \ of a subscriber.\n      User-IPv4 (IPv4-Address):  The IPv4 address of the subscriber.\n\
    \      Gateway-IPv4 (IPv4-Address):  The gateway address of the\n         subscriber.\n\
    \      Portal-Force (P) (1 bit):  Push advertisement.\n         0:  Off.\n   \
    \      1:  On.\n      Web-Force (W) (1 bit):  Push IPv4 Web.\n         0:  Off.\n\
    \         1:  On.\n      Echo-Enable (E) (1 bit):  UP returns ARP Req or PPP Echo.\n\
    \         0:  Off.\n         1:  On.\n      IPv4-URPF (U) (1 bit):  User Unicast\
    \ Reverse Path Forwarding\n         (URPF) flag.\n         0:  Off.\n        \
    \ 1:  On.\n      MTU (2 bytes):  MTU value.  The default value is 1500.\n    \
    \  VRF-Name Sub-TLV:  Indicates the subscriber belongs to which VRF.\n      Reserved:\
    \  The Reserved field MUST be sent as zero and ignored on\n         receipt.\n"
- title: 7.9.4.  IPv6 Subscriber TLV
  contents:
  - "7.9.4.  IPv6 Subscriber TLV\n   The IPv6 Subscriber TLV is defined to carry IPv6-related\
    \ information\n   for a BNG user.  It will be carried in an Update_Request message\
    \ when\n   IPv6 IPoE or PPPoE access is used.\n   The format of the TLV value\
    \ part is as follows:\n       0                   1                   2      \
    \             3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      ~           User PD-Address (IPv6 Address List Sub-TLV)   \
    \      ~\n      ~        Gateway ND-Address (IPv6 Address List Sub-TLV)      \
    \   ~\n      |          MTU                  |   Reserved            |U|E|W|P|\n\
    \      ~                    VRF Name Sub-TLV (optional)                ~\n   \
    \                    Figure 49: IPv6 Subscriber TLV\n   Where:\n      TLV type:\
    \  5.\n      TLV length:  Variable.\n      User-ID (4 bytes):  The identifier\
    \ of a subscriber.\n      User PD-Addresses (IPv6 Address List):  Carries a list\
    \ of Prefix\n         Delegation (PD) addresses of the subscriber.\n      User\
    \ ND-Addresses (IPv6 Address List):  Carries a list of Neighbor\n         Discovery\
    \ (ND) addresses of the subscriber.\n      User Link-Local-Address (IPv6-Address):\
    \  The link-local address of\n         the subscriber.\n      IPv6 Interface ID\
    \ (8 bytes):  The identifier of an IPv6 interface.\n      Portal-Force 1 bit (P):\
    \  Push advertisement.\n         0:  Off.\n         1:  On.\n      Web-Force 1\
    \ bit (W):  Push IPv6 Web.\n         0:  Off.\n         1:  On.\n      Echo-Enable\
    \ 1 bit (E):  The UP returns ARP Req or PPP Echo.\n         0:  Off.\n       \
    \  1:  On.\n      IPv6-URPF 1 bit (U):  User Reverse Path Forwarding (URPF) flag.\n\
    \         0:  Off.\n         1:  On.\n      MTU (2 bytes):  The MTU value.  The\
    \ default value is 1500.\n      VRF-Name Sub-TLV:  Indicates the VRF to which\
    \ the subscriber\n         belongs.\n      Reserved:  The Reserved field MUST\
    \ be sent as zero and ignored on\n         receipt.\n"
- title: 7.9.5.  IPv4 Static Subscriber Detect TLV
  contents:
  - "7.9.5.  IPv4 Static Subscriber Detect TLV\n   The IPv4 Static Subscriber Detect\
    \ TLV is defined to carry\n   IPv4-related information for a static access subscriber.\
    \  It will be\n   carried in an Update_Request message when IPv4 static access\
    \ on a UP\n   needs to be enabled.\n   The format of the TLV value part is as\
    \ follows:\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      |           C-VID               |           P-VID               |\n   \
    \   |        User-MAC (cont.)       |           Reserved            |\n      ~\
    \                       Sub-TLVs (optional)                     ~\n          \
    \         Figure 50: IPv4 Static Subscriber TLV\n   Where:\n      TLV type:  9.\n\
    \      TLV length:  Variable.\n      If-Index (4 bytes):  The interface index\
    \ of the interface from\n         which the subscriber will dial-up.\n      C-VID\
    \ (VLAN-ID):  Indicates the inner VLAN ID.  The value 0\n         indicates that\
    \ the VLAN ID is invalid.  A valid value is\n         1-4094.\n      P-VID (VLAN-ID):\
    \  Indicates the outer VLAN ID.  The value 0\n         indicates that the VLAN\
    \ ID is invalid.  The format is the same\n         as that of the C-VID.  A valid\
    \ value is 1-4094.\n      User Address (IPv4-Addr):  The user's IPv4 address.\n\
    \      Gateway Address (IPv4-Addr):  The gateway's IPv4 address.\n      User-MAC\
    \ (MAC-Addr type):  The MAC address of the subscriber.\n      Sub-TLVs:  The VRF-Name\
    \ and If-Desc sub-TLVs may be carried.\n         VRF-Name sub-TLV:  Indicates\
    \ the VRF to which the subscriber\n            belongs.\n         If-Desc sub-TLV:\
    \  Carries the interface information.\n      Reserved:  The Reserved field MUST\
    \ be sent as zero and ignored on\n         receipt.\n"
- title: 7.9.6.  IPv6 Static Subscriber Detect TLV
  contents:
  - "7.9.6.  IPv6 Static Subscriber Detect TLV\n   The IPv6 Static Subscriber Detect\
    \ TLV is defined to carry\n   IPv6-related information for a static access subscriber.\
    \  It will be\n   carried in an Update_Request message when needed to enable IPv6\n\
    \   static subscriber detection on a UP.\n   The format of the TLV value part\
    \ is as follows:\n       0                   1                   2           \
    \        3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      |           C-VID               |           P-VID               |\n\
    \      |        User-MAC (cont.)       |           Reserved            |\n   \
    \   ~                        Sub-TLVs (optional)                     ~\n     \
    \           Figure 51: IPv6 Static Subscriber Detect TLV\n   Where:\n      TLV\
    \ type:  10.\n      TLV length:  Variable.\n      If-Index (4 bytes):  The interface\
    \ index of the interface from\n         which the subscriber will dial-up.\n \
    \     C-VID (VLAN-ID):  Indicates the inner VLAN ID.  The value 0\n         indicates\
    \ that the VLAN ID is invalid.  A valid value is\n         1-4094.\n      P-VID\
    \ (VLAN-ID):  Indicates the outer VLAN ID.  The value 0\n         indicates that\
    \ the VLAN ID is invalid.  The format is the same\n         as that the of C-VID.\
    \  A valid value is 1-4094.\n      User Address (IPv6-Address type):  The subscriber's\
    \ IPv6 address.\n      Gateway Address (IPv6-Address type):  The gateway's IPv6\
    \ Address.\n      User-MAC (MAC-Addr type):  The MAC address of the subscriber.\n\
    \      Sub-TLVs:  VRF-Name and If-Desc sub-TLVs may be carried\n         VRF-Name\
    \ sub-TLV:  Indicates the VRF to which the subscriber\n            belongs.\n\
    \         If-Desc sub-TLV:  Carries the interface information.\n      Reserved:\
    \  The Reserved field MUST be sent as zero and ignored on\n         receipt.\n"
- title: 7.9.7.  L2TP-LAC Subscriber TLV
  contents:
  - "7.9.7.  L2TP-LAC Subscriber TLV\n   The L2TP-LAC Subscriber TLV is defined to\
    \ carry the related\n   information for an L2TP LAC access subscriber.  It will\
    \ be carried in\n   an Update_Request message when L2TP LAC access is used.\n\
    \   The format of the TLV value part is as follows:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |      Local-Tunnel-ID      \
    \    |     Local-Session-ID          |\n      |      Remote-Tunnel-ID        \
    \ |     Remote-Session-ID         |\n                     Figure 52: L2TP-LAC\
    \ Subscriber TLV\n   Where:\n      TLV type:  11.\n      TLV length:  12 octets.\n\
    \      User-ID (4 bytes):  The identifier of a user/subscriber.\n      Local-Tunnel-ID\
    \ (2 bytes):  The local ID of the L2TP tunnel.\n      Local-Session-ID (2 bytes):\
    \  The local session ID with the L2TP\n         tunnel.\n      Remote-Tunnel-ID\
    \ (2 bytes):  The identifier of the L2TP tunnel at\n         the remote endpoint.\n\
    \      Remote-Session-ID (2 bytes):  The session ID of the L2TP tunnel at\n  \
    \       the remote endpoint.\n"
- title: 7.9.8.  L2TP-LNS Subscriber TLV
  contents:
  - "7.9.8.  L2TP-LNS Subscriber TLV\n   The L2TP-LNS Subscriber TLV is defined to\
    \ carry the related\n   information for a L2TP LNS access subscriber.  It will\
    \ be carried in\n   an Update_Request message when L2TP LNS access is used.\n\
    \   The format of the TLV value part is as follows:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |      Local-Tunnel-ID      \
    \    |     Local-Session-ID          |\n      |      Remote-Tunnel-ID        \
    \ |     Remote-Session-ID         |\n                     Figure 53: L2TP-LNS\
    \ Subscriber TLV\n   Where:\n      TLV type:  12.\n      TLV length:  12 octets.\n\
    \      User-ID (4 bytes):  The identifier of a user/subscriber.\n      Local-Tunnel-ID\
    \ (2 bytes):  The local ID of the L2TP tunnel.\n      Local-Session-ID (2 bytes):\
    \  The local session ID with the L2TP\n         tunnel.\n      Remote-Tunnel-ID\
    \ (2 bytes):  The identifier of the L2TP tunnel at\n         the remote endpoint.\n\
    \      Remote-Session-ID (2 bytes):  The session ID of the L2TP tunnel at\n  \
    \       the remote endpoint.\n"
- title: 7.9.9.  L2TP-LAC Tunnel TLV
  contents:
  - "7.9.9.  L2TP-LAC Tunnel TLV\n   The L2TP-LAC Tunnel TLV is defined to carry information\
    \ related to\n   the L2TP LAC tunnel.  It will be carried in the Update_Request\n\
    \   message when L2TP LAC access is used.\n   The format of the TLV value part\
    \ is as follows:\n       0                   1                   2           \
    \        3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      |       Local-Tunnel-ID         |       Remote-Tunnel-ID        |\n\
    \      |           Source-Port         |           Dest-Port           |\n   \
    \                    Figure 54: L2TP-LAC Tunnel TLV\n   Where:\n      TLV type:\
    \  13.\n      TLV length:  Variable.\n      Local-Tunnel-ID (2 bytes):  The local\
    \ ID of the L2TP tunnel.\n      Remote-Tunnel-ID (2 bytes):  The remote ID of\
    \ the L2TP tunnel.\n      Source-Port (2 bytes):  The source UDP port number of\
    \ an L2TP\n         subscriber.\n      Dest-Port (2 bytes):  The destination UDP\
    \ port number of an L2TP\n         subscriber.\n      Source-IP (IPv4/v6):  The\
    \ source IP address of the tunnel.\n      Dest-IP (IPv4/v6):  The destination\
    \ IP address of the tunnel.\n      VRF-Name Sub-TLV:  The VRF name to which the\
    \ L2TP subscriber\n         tunnel belongs.\n"
- title: 7.9.10.  L2TP-LNS Tunnel TLV
  contents:
  - "7.9.10.  L2TP-LNS Tunnel TLV\n   The L2TP-LNS Tunnel TLV is defined to carry\
    \ information related to\n   the L2TP LNS tunnel.  It will be carried in the Update_Request\n\
    \   message when L2TP LNS access is used.\n   The format of the TLV value part\
    \ is as follows:\n       0                   1                   2           \
    \        3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      |        Local-Tunnel-ID        |       Remote-Tunnel-ID        |\n\
    \      |        Source-Port            |         Dest-Port             |\n   \
    \   ~                       Source-IP                               ~\n      ~\
    \                       Dest-IP                                 ~\n      ~   \
    \                    VRF-Name Sub-TLV                        ~\n             \
    \          Figure 55: L2TP-LNS Tunnel TLV\n   Where:\n      TLV type:  14.\n \
    \     TLV length:  Variable.\n      Local-Tunnel-ID (2 bytes):  The local ID of\
    \ the L2TP tunnel.\n      Remote-Tunnel-ID (2 bytes):  The remote ID of the L2TP\
    \ tunnel.\n      Source-Port (2 bytes):  The source UDP port number of an L2TP\n\
    \         subscriber.\n      Dest-Port (2 bytes):  The destination UDP port number\
    \ of an L2TP\n         subscriber.\n      Source-IP (IPv4/v6):  The source IP\
    \ address of the tunnel.\n      Dest-IP (IPv4/v6):  The destination IP address\
    \ of the tunnel.\n      VRF-Name Sub-TLV:  The VRF name to which the L2TP subscriber\n\
    \         tunnel belongs.\n"
- title: 7.9.11.  Update Response TLV
  contents:
  - "7.9.11.  Update Response TLV\n   The Update Response TLV is used to return the\
    \ operation result of an\n   update request.  It is carried in the Update_Response\
    \ message as a\n   response to the Update_Request message.\n   The format of the\
    \ value part of the Update Response TLV is as\n   follows:\n        0        \
    \           1                   2                   3\n        0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       | User-Trans-ID |  \
    \ Oper-Code   |   Oper-Result |  Reserved     |\n                       Figure\
    \ 56: Update Response TLV\n   Where:\n      TLV type:  302.\n      TLV length:\
    \  12.\n      User-ID (4 bytes):  A unique identifier of a user/subscriber.\n\
    \      User-Trans-ID (1 byte):  In the case of dual-stack access or when\n   \
    \      modifying a session, User-Trans-ID is used to identify a user\n       \
    \  operation transaction.  It is used by the CP to correlate a\n         response\
    \ to a specific request.\n      Oper-Code (1 byte):  Operation code.\n       \
    \  1:  Update.\n         2:  Delete.\n      Oper-Result (1 byte):  Operation Result.\n\
    \         0:  Success.\n         Others:  Failure.\n      Error-Code (4 bytes):\
    \  Operation failure cause code.  For details,\n         see Section 8.5.\n  \
    \    Reserved:  The Reserved field MUST be sent as zero and ignored on\n     \
    \    receipt.\n"
- title: 7.9.12.  Subscriber Policy TLV
  contents:
  - "7.9.12.  Subscriber Policy TLV\n   The Subscriber Policy TLV is used to carry\
    \ the policies that will be\n   applied to a subscriber.  It is carried in the\
    \ Update_Request\n   message.\n   The format of the TLV value part is as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |   I-Priority\
    \  |   E-Priority  |   Reserved                    |\n                      Figure\
    \ 57: Subscriber Policy TLV\n   Where:\n      TLV type:  6.\n      TLV length:\
    \  Variable.\n      User-ID (4 bytes):  The identifier of a user/subscriber.\n\
    \      Ingress-Priority (1 byte):  Indicates the upstream priority.  The\n   \
    \      value range is 0~7.\n      Egress-Priority (1 byte):  Indicates the downstream\
    \ priority.  The\n         value range is 0~7.\n      Sub-TLVs:  The sub-TLVs\
    \ that are present can occur in any order.\n         Ingress-CAR sub-TLV:  Upstream\
    \ CAR.\n         Egress-CAR sub-TLV:  Downstream CAR.\n         Ingress-QoS-Profile\
    \ sub-TLV:  Indicates the name of the QoS-\n            Profile that is the profile\
    \ in the upstream direction.\n         Egress-QoS-Profile sub-TLV:  Indicates\
    \ the name of the QoS-\n            Profile that is the profile in the downstream\
    \ direction.\n         User-ACL-Policy sub-TLV:  All ACL user policies, including\n\
    \            v4ACLIN, v4ACLOUT, v6ACLIN, v6ACLOUT, v4WEBACL, v6WEBACL,\n     \
    \       v4SpecialACL, and v6SpecialACL.\n         Multicast-Profile4 sub-TLV:\
    \  IPv4 multicast policy name.\n         Multicast-Profile6 sub-TLV:  IPv6 multicast\
    \ policy name.\n         NAT-Instance sub-TLV:  Indicates the instance ID of a\
    \ NAT user.\n      Reserved:  The Reserved field MUST be sent as zero and ignored\
    \ on\n         receipt.\n"
- title: 7.9.13.  Subscriber CGN Port Range TLV
  contents:
  - "7.9.13.  Subscriber CGN Port Range TLV\n   The Subscriber CGN Port Range TLV\
    \ is used to carry the NAT public\n   address and port range.  It will be carried\
    \ in the Update_Response\n   message when CGN is used.\n   The format of the value\
    \ part of this TLV is as follows:\n       0                   1              \
    \     2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      |           NAT-Port-Start      |          NAT-Port-End\
    \         |\n                  Figure 58: Subscriber CGN Port Range TLV\n   Where:\n\
    \      TLV type:  15.\n      TLV length:  12 octets.\n      User-ID (4 bytes):\
    \  The identifier of a user/subscriber.\n      NAT-Port-Start (2 bytes):  The\
    \ start port number.\n      NAT-Port-End (2 bytes):  The end port number.\n  \
    \    NAT-Address (4 bytes):  The NAT public network address.\n"
- title: 7.10.  Device Status TLVs
  contents:
  - "7.10.  Device Status TLVs\n   The TLVs in this section are for reporting interface\
    \ and board-level\n   information from the UP to the CP.\n"
- title: 7.10.1.  Interface Status TLV
  contents:
  - "7.10.1.  Interface Status TLV\n   The Interface Status TLV is used to carry the\
    \ status information of\n   an interface on a UP.  It is carried in a Report message.\n\
    \   The format of the value part of this TLV is as follows:\n       0        \
    \           1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |   MAC-Address (lower\
    \ part)    |   Phy-State   |   Reserved    |\n                      Figure 59:\
    \ Interface Status TLV\n   Where:\n      TLV type:  200.\n      TLV length:  Variable.\n\
    \      If-Index (4 bytes):  Indicates the interface index.\n      MAC-Address\
    \ (MAC-Addr type):  Interface MAC address.\n      Phy-State (1 byte):  Physical\
    \ status of the interface.\n         0:  Down.\n         1:  Up.\n      MTU (4\
    \ bytes):  Interface MTU value.\n      Sub-TLVs:  The If-Desc and VRF-Name sub-TLVs\
    \ can be carried.\n      Reserved:  The Reserved field MUST be sent as zero and\
    \ ignored on\n         receipt.\n"
- title: 7.10.2.  Board Status TLV
  contents:
  - "7.10.2.  Board Status TLV\n   The Board Status TLV is used to carry the status\
    \ information of a\n   board on an UP.  It is carried in a Report message.\n \
    \  The format of the value part of the Board Status TLV is as follows:\n     \
    \  0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |   Board-Type\
    \  | Board-State   |   Reserved    |   Chassis     |\n      |               Slot\
    \            |           Sub-Slot            |\n                        Figure\
    \ 60: Board Status TLV\n   Where:\n      TLV type:  201.\n      TLV length:  8\
    \ octets.\n      Chassis (1 byte):  The chassis number of the board.\n      Slot\
    \ (16 bits):  The slot number of the board.\n      Sub-Slot (16 bits):  The sub-slot\
    \ number of the board.\n      Board-Type (1 byte):  The type of board used.\n\
    \         1:  CGN Service Process Unit (SPU) board.\n         2:  Line Process\
    \ Unit (LPU) board.\n      Board-State (1 byte):  Indicates whether there are\
    \ issues with the\n         board.\n         0:  Normal.\n         1:  Abnormal.\n\
    \      Reserved:  The Reserved field MUST be sent as zero and ignored on\n   \
    \      receipt.\n"
- title: 7.11.  CGN TLVs
  contents:
  - '7.11.  CGN TLVs

    '
- title: 7.11.1.  Address Allocation Request TLV
  contents:
  - "7.11.1.  Address Allocation Request TLV\n   The Address Allocation Request TLV\
    \ is used to request address\n   allocation from the CP.  A Pool-Name sub-TLV\
    \ is carried to indicate\n   from which address pool to allocate addresses.  The\
    \ Address\n   Allocation Request TLV is carried in the Addr_Allocation_Req message.\n\
    \   The format of the value part of this TLV is as follows:\n       0        \
    \           1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                 Figure 61:\
    \ Address Allocation Request TLV\n   Where:\n      TLV type:  400.\n      TLV\
    \ length:  Variable.\n      Pool-Name sub-TLV:  Indicates from which address pool\
    \ to allocate\n         address.\n"
- title: 7.11.2.  Address Allocation Response TLV
  contents:
  - "7.11.2.  Address Allocation Response TLV\n   The Address Allocation Response\
    \ TLV is used to return the address\n   allocation result; it is carried in the\
    \ Addr_Allocation_Ack message.\n   The value part of the Address Allocation Response\
    \ TLV is formatted as\n   follows:\n       0                   1             \
    \      2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      |                        Lease Time           \
    \                  |\n      |                        Client-IP               \
    \               |\n      |                        Client-IP (cont.)          \
    \            |\n      |                        Error-Code                    \
    \         |\n      ~                        Pool-Name Sub-TLV                \
    \      ~\n                 Figure 62: Address Allocation Response TLV\n   Where:\n\
    \      TLV type:  401.\n      TLV length:  Variable.\n      Lease Time (4 bytes):\
    \  Duration of address lease in seconds.\n      Client-IP (IPv4-Address type):\
    \  The allocated IPv4 address and\n         mask.\n      Error-Code (4 bytes):\
    \  Indicates success or an error.\n         0:  Success.\n         1:  Failure.\n\
    \         3001:  Pool-Mismatch.  The corresponding address pool cannot be\n  \
    \          found.\n         3002:  Pool-Full.  The address pool is fully allocated,\
    \ and no\n            address segment is available.\n      Pool-Name sub-TLV:\
    \  Indicates from which address pool the address\n         is allocated.\n"
- title: 7.11.3.  Address Renewal Request TLV
  contents:
  - "7.11.3.  Address Renewal Request TLV\n   The Address Renewal Request TLV is used\
    \ to request address renewal\n   from the CP.  It is carried in the Addr_Renew_Req\
    \ message.\n   The format of this TLV value is as follows:\n       0         \
    \          1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                     Client-IP\
    \                                 |\n      |                     Client-IP (cont.)\
    \                         |\n      ~                     Pool-Name Sub-TLV   \
    \                      ~\n                   Figure 63: Address Renewal Request\
    \ TLV\n   Where:\n      TLV type:  402.\n      TLV length:  Variable.\n      Client-IP\
    \ (IPv4-Address type):  The IPv4 address and mask to be\n         renewed.\n \
    \     Pool-Name sub-TLV:  Indicates from which address pool to renew the\n   \
    \      address.\n"
- title: 7.11.4.  Address Renewal Response TLV
  contents:
  - "7.11.4.  Address Renewal Response TLV\n   The Address Renewal Response TLV is\
    \ used to return the address\n   renewal result.  It is carried in the Addr_Renew_Ack\
    \ message.\n   The format of this TLV value is as follows:\n       0         \
    \          1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                     Client-IP\
    \                                 |\n      |                     Client-IP (cont.)\
    \                         |\n      |                     Error-Code          \
    \                      |\n      ~                     Pool-Name Sub-TLV      \
    \                   ~\n                  Figure 64: Address Renewal Response TLV\n\
    \   Where:\n      TLV type:  403.\n      TLV length:  Variable.\n      Client-IP\
    \ (IPv4-Address type):  The renewed IPv4 address and mask.\n      Error-Code (4\
    \ bytes):  Indicates success or an error:\n         0:  Success.\n         1:\
    \  Failure.\n         3001:  Pool-Mismatch.  The corresponding address pool cannot\
    \ be\n            found.\n         3002:  Pool-Full.  The address pool is fully\
    \ allocated, and no\n            address segment is available.\n         3003:\
    \  Subnet-Mismatch.  The address pool subnet cannot be\n            found.\n \
    \        3004:  Subnet-Conflict.  Subnets in the address pool have been\n    \
    \        assigned to other clients.\n      Pool-Name sub-TLV:  Indicates from\
    \ which address pool to renew the\n         address.\n"
- title: 7.11.5.  Address Release Request TLV
  contents:
  - "7.11.5.  Address Release Request TLV\n   The Address Release Request TLV is used\
    \ to release an IPv4 address.\n   It is carried in the Addr_Release_Req message.\n\
    \   The value part of this TLV is formatted as follows:\n       0            \
    \       1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                     Client-IP\
    \                                 |\n      |                     Client-IP (cont.)\
    \                         |\n      ~                     Pool-Name sub-TLV   \
    \                      ~\n                   Figure 65: Address Release Request\
    \ TLV\n   Where:\n      TLV type:  404.\n      TLV length:  Variable.\n      Client-IP\
    \ (IPv4-Address type):  The IPv4 address and mask to be\n         released.\n\
    \      Pool-Name sub-TLV:  Indicates from which address pool to release\n    \
    \     the address.\n"
- title: 7.11.6.  Address Release Response TLV
  contents:
  - "7.11.6.  Address Release Response TLV\n   The Address Release Response TLV is\
    \ used to return the address\n   release result.  It is carried in the Addr_Release_Ack\
    \ message.\n   The format of the value part of this TLV is as follows:\n     \
    \  0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |         \
    \            Client-IP                                 |\n      |            \
    \         Client-IP (cont.)                         |\n      |               \
    \      Error-Code                                |\n      ~                  \
    \   Pool-Name sub-TLV                         ~\n                  Figure 66:\
    \ Address Release Response TLV\n   Where:\n      TLV type:  405.\n      TLV length:\
    \  Variable.\n      Client-IP (IPv4-Address type):  The released IPv4 address\
    \ and\n         mask.\n      Error-Code (4 bytes):  Indicates success or an error.\n\
    \         0:  Success.  Address release success.\n         1:  Failure.  Address\
    \ release failed.\n         3001:  Pool-Mismatch.  The corresponding address pool\
    \ cannot be\n            found.\n         3003:  Subnet-Mismatch.  The address\
    \ cannot be found.\n         3004:  Subnet-Conflict.  The address has been allocated\
    \ to\n            another subscriber.\n      Pool-Name sub-TLV:  Indicates from\
    \ which address pool to release\n         the address.\n"
- title: 7.12.  Event TLVs
  contents:
  - '7.12.  Event TLVs

    '
- title: 7.12.1.  Subscriber Traffic Statistics TLV
  contents:
  - "7.12.1.  Subscriber Traffic Statistics TLV\n   The Subscriber Traffic Statistics\
    \ TLV is used to return the traffic\n   statistics of a user/subscriber.  The\
    \ format of the value part of\n   this TLV is as follows:\n       0          \
    \         1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                User-ID\
    \                                        |\n      |                Statistics-Type\
    \                                |\n      |                Ingress Packets (upper\
    \ part)                   |\n      |                Ingress Packets (lower part)\
    \                   |\n      |                Ingress Bytes (upper part)     \
    \                |\n      |                Ingress Bytes (lower part)        \
    \             |\n      |                Ingress Loss Packets (upper part)    \
    \          |\n      |                Ingress Loss Packets (lower part)       \
    \       |\n      |                Ingress Loss Bytes (upper part)            \
    \    |\n      |                Ingress Loss Bytes (lower part)               \
    \ |\n      |                Egress Packets (upper part)                    |\n\
    \      |                Egress Packets (lower part)                    |\n   \
    \   |                Egress Bytes (upper part)                      |\n      |\
    \                Egress Bytes (lower part)                      |\n      |   \
    \             Egress Loss Packets (upper part)               |\n      |      \
    \          Egress Loss Packets (lower part)               |\n      |         \
    \       Egress Loss Bytes (upper part)                 |\n      |            \
    \    Egress Loss Bytes (lower part)                 |\n                Figure\
    \ 67: Subscriber Traffic Statistics TLV\n   Where:\n      TLV type:  300.\n  \
    \    TLV length:  72 octets.\n      User-ID (4 bytes):  The subscriber identifier.\n\
    \      Statistics-Type (4 bytes):  Traffic type.  It can be one of the\n     \
    \    following options:\n         0:  IPv4 traffic.\n         1:  IPv6 traffic.\n\
    \         2:  Dual-stack traffic.\n      Ingress Packets (8 bytes):  The number\
    \ of the packets in the\n         upstream direction.\n      Ingress Bytes (8\
    \ bytes):  The bytes of the upstream traffic.\n      Ingress Loss Packets (8 bytes):\
    \  The number of the lost packets in\n         the upstream direction.\n     \
    \ Ingress Loss Bytes (8 bytes):  The bytes of the lost upstream\n         packets.\n\
    \      Egress Packets (8 bytes):  The number of the packets in the\n         downstream\
    \ direction.\n      Egress Bytes (8 bytes):  The bytes of the downstream traffic.\n\
    \      Egress Loss Packets (8 bytes):  The number of the lost packets in\n   \
    \      the downstream direction.\n      Egress Loss Bytes (8 bytes):  The bytes\
    \ of the lost downstream\n         packets.\n"
- title: 7.12.2.  Subscriber Detection Result TLV
  contents:
  - "7.12.2.  Subscriber Detection Result TLV\n   The Subscriber Detection Result\
    \ TLV is used to return the detection\n   result of a subscriber.  Subscriber\
    \ detection is a function to detect\n   whether or not a subscriber is online.\
    \  The result can be used by the\n   CP to determine how to deal with the subscriber\
    \ session (e.g., delete\n   the session if detection failed).\n   The format of\
    \ this TLV value part is as follows:\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      | Detect-Type   | Detect-Result |          Reserved\
    \             |\n                 Figure 68: Subscriber Detection Result TLV\n\
    \   Where:\n      TLV type:  301.\n      TLV length:  8 octets.\n      User-ID\
    \ (4 bytes):  The subscriber identifier.\n      Detect-Type (1 byte):  Type of\
    \ traffic detected.\n         0:  IPv4 detection.\n         1:  IPv6 detection.\n\
    \         2:  PPP detection.\n      Detect-Result (1 byte):  Indicates whether\
    \ the detection was\n         successful.\n         0:  Indicates that the detection\
    \ is successful.\n         1:  Detection failure.  The UP needs to report only\
    \ when the\n            detection fails.\n      Reserved:  The Reserved field\
    \ MUST be sent as zero and ignored on\n         receipt.\n"
- title: 7.13.  Vendor TLV
  contents:
  - "7.13.  Vendor TLV\n   The Vendor TLV occurs as the first TLV in the Vendor message\n\
    \   (Section 6.6).  It provides a Sub-Type that effectively extends the\n   message\
    \ type in the message header, provides for versioning of vendor\n   TLVs, and\
    \ can accommodate sub-TLVs.\n   The value part of the Vendor TLV is formatted\
    \ as follows:\n       0                   1                   2              \
    \     3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      |           Sub-Type            |       Sub-Type-Version        |\n\
    \      ~                      Sub-TLVs (optional)                      ~\n   \
    \                        Figure 69: Vendor TLV\n   Where:\n      TLV type:  1024.\n\
    \      TLV length:  Variable.\n      Vendor-ID (4 bytes):  Vendor ID as defined\
    \ in RADIUS [RFC2865].\n      Sub-Type (2 bytes):  Used by the vendor to distinguish\
    \ multiple\n         different vendor messages.\n      Sub-Type-Version (2 bytes):\
    \  Used by the vendor to distinguish\n         different versions of a vendor-defined\
    \ message Sub-Type.\n      Sub-TLVs (variable):  Sub-TLVs as specified by the\
    \ vendor.\n   Since vendor code will be handling the TLV after the Vendor-ID field\n\
    \   is recognized, the remainder of the TLV values can be organized\n   however\
    \ the vendor wants.  But it is desirable for a vendor to be\n   able to define\
    \ multiple different vendor messages and to keep track\n   of different versions\
    \ of its vendor-defined messages.  Thus, it is\n   RECOMMENDED that the vendor\
    \ assign a Sub-Type value for each vendor\n   message that it defines different\
    \ from other Sub-Type values that\n   vendor has used.  Also, when modifying a\
    \ vendor-defined message in a\n   way potentially incompatible with a previous\
    \ definition, the vendor\n   SHOULD increase the value it is using in the Sub-Type-Version\
    \ field.\n"
- title: 8.  Tables of S-CUSP Codepoints
  contents:
  - "8.  Tables of S-CUSP Codepoints\n   This section provides tables of the S-CUSP\
    \ codepoints, particularly\n   message types, TLV types, TLV operation codes,\
    \ sub-TLV types, and\n   error codes.  In most cases, references are provided\
    \ to relevant\n   sections elsewhere in this document.\n"
- title: 8.1.  Message Types
  contents:
  - "8.1.  Message Types\n       | Type    | Name                | Section of This\
    \ Document |\n       | 0       | Reserved            |                       \
    \   |\n       | 1       | Hello               | 6.2.1                    |\n \
    \      | 2       | Keepalive           | 6.2.2                    |\n       |\
    \ 3       | Sync_Request        | 6.2.3                    |\n       | 4     \
    \  | Sync_Begin          | 6.2.4                    |\n       | 5       | Sync_Data\
    \           | 6.2.5                    |\n       | 6       | Sync_End        \
    \    | 6.2.6                    |\n       | 7       | Update_Request      | 6.2.7\
    \                    |\n       | 8       | Update_Response     | 6.2.8       \
    \             |\n       | 9       | Report              | 6.4                \
    \      |\n       | 10      | Event               | 6.3                      |\n\
    \       | 11      | Vendor              | 6.6                      |\n       |\
    \ 12      | Error               | 6.7                      |\n       | 13-199\
    \  | Unassigned          |                          |\n       | 200     | Addr_Allocation_Req\
    \ | 6.5.1                    |\n       | 201     | Addr_Allocation_Ack | 6.5.2\
    \                    |\n       | 202     | Addr_Renew_Req      | 6.5.3       \
    \             |\n       | 203     | Addr_Renew_Ack      | 6.5.4              \
    \      |\n       | 204     | Addr_Release_Req    | 6.5.5                    |\n\
    \       | 205     | Addr_Release_Ack    | 6.5.6                    |\n       |\
    \ 206-254 | Unassigned          |                          |\n       | 255   \
    \  | Reserved            |                          |\n                      \
    \    Table 5: Message Types\n"
- title: 8.2.  TLV Types
  contents:
  - "8.2.  TLV Types\n      | Type      | Name        | Usage Description        \
    \         |\n      | 0         | Reserved    | -                             \
    \    |\n      | 1         | BAS         | Carries the BNG access functions  |\n\
    \      |           | Function    | to be enabled or disabled on      |\n     \
    \ | 2         | Basic       | Carries the basic information     |\n      |   \
    \        | Subscriber  | about a BNG subscriber.           |\n      | 3      \
    \   | PPP         | Carries the PPP information about |\n      |           | Subscriber\
    \  | a BNG subscriber.                 |\n      | 4         | IPv4        | Carries\
    \ the IPv4 address of a BNG |\n      |           | Subscriber  | subscriber. \
    \                      |\n      | 5         | IPv6        | Carries the IPv6 address\
    \ of a BNG |\n      |           | Subscriber  | subscriber.                  \
    \     |\n      | 6         | Subscriber  | Carries the policy information    |\n\
    \      |           | Policy      | applied to a BNG subscriber.      |\n     \
    \ | 7         | IPv4        | Carries the IPv4 network routing  |\n      |   \
    \        | Routing     | information.                      |\n      | 8      \
    \   | IPv6        | Carries the IPv6 network routing  |\n      |           | Routing\
    \     | information.                      |\n      | 9         | IPv4 Static |\
    \ Carries the IPv4 static           |\n      |           | Subscriber  | subscriber\
    \ detect information.    |\n      |           | Detect      |                \
    \                   |\n      | 10        | IPv6 Static | Carries the IPv6 static\
    \           |\n      |           | Subscriber  | subscriber detect information.\
    \    |\n      |           | Detect      |                                   |\n\
    \      | 11        | L2TP-LAC    | Carries the L2TP LAC subscriber   |\n     \
    \ |           | Subscriber  | information.                      |\n      | 12\
    \        | L2TP-LNS    | Carries the L2TP LNS subscriber   |\n      |        \
    \   | Subscriber  | information.                      |\n      | 13        | L2TP-LAC\
    \    | Carries the L2TP LAC tunnel       |\n      |           | Tunnel      |\
    \ subscriber information.           |\n      | 14        | L2TP-LNS    | Carries\
    \ the L2TP LNS tunnel       |\n      |           | Tunnel      | subscriber information.\
    \           |\n      | 15        | Subscriber  | Carries the public IPv4 address\
    \   |\n      |           | CGN Port    | and related port range of a BNG   |\n\
    \      |           | Range       | subscriber.                       |\n     \
    \ | 16-99     | Unassigned  | -                                 |\n      | 100\
    \       | Hello       | Used for version and Keepalive    |\n      | 101     \
    \  | Error       | Carried in the Ack of the control |\n      |           | Information\
    \ | message.  Carries the processing  |\n      | 102       | Keepalive   | Carried\
    \ in the Hello message for  |\n      | 103-199   | Unassigned  | -           \
    \                      |\n      | 200       | Interface   | Interfaces status\
    \ reported by the |\n      |           | Status      | UP including physical interfaces,\
    \ |\n      | 201       | Board       | Board information reported by the |\n \
    \     |           | Status      | UP including the board type and   |\n      |\
    \ 202-299   | Unassigned  | -                                 |\n      | 300 \
    \      | Subscriber  | User traffic statistics.          |\n      |          \
    \ | Traffic     |                                   |\n      |           | Statistics\
    \  |                                   |\n      | 301       | Subscriber  | User\
    \ detection information.       |\n      |           | Detection   |          \
    \                         |\n      |           | Result      |               \
    \                    |\n      | 302       | Update      | The processing result\
    \ of a        |\n      |           | Response    | subscriber session update.\
    \        |\n      | 303-299   | Unassigned  | -                              \
    \   |\n      | 400       | Address     | Request address allocation.       |\n\
    \      |           | Allocation  |                                   |\n     \
    \ |           | Request     |                                   |\n      | 401\
    \       | Address     | Address allocation response.      |\n      |         \
    \  | Allocation  |                                   |\n      |           | Response\
    \    |                                   |\n      | 402       | Address     |\
    \ Request for address lease         |\n      |           | Renewal     | renewal.\
    \                          |\n      |           | Request     |              \
    \                     |\n      | 403       | Address     | Response to a request\
    \ for         |\n      |           | Renewal     | extending an IP address lease.\
    \    |\n      |           | Response    |                                   |\n\
    \      | 404       | Address     | Request to release the address.   |\n     \
    \ |           | Release     |                                   |\n      |   \
    \        | Request     |                                   |\n      | 405    \
    \   | Address     | Ack of a message releasing an IP  |\n      |           | Release\
    \     | address.                          |\n      |           | Response    |\
    \                                   |\n      | 406-1023  | Unassigned  | -   \
    \                              |\n      | 1024      | Vendor      | As implemented\
    \ by the vendor.     |\n      | 1039-4095 | Unassigned  | -                  \
    \               |\n                             Table 6: TLV Types\n"
- title: 8.3.  TLV Operation Codes
  contents:
  - "8.3.  TLV Operation Codes\n   TLV operation codes appear in the Oper field in\
    \ the header of some\n   TLVs.  See Section 7.1.\n                           |\
    \ Code | Operation  |\n                           | 0    | Reserved   |\n    \
    \                       | 1    | Update     |\n                           | 2\
    \    | Delete     |\n                           | 3-15 | Unassigned |\n      \
    \                     Table 7: TLV Operation\n"
- title: 8.4.  Sub-TLV Types
  contents:
  - "8.4.  Sub-TLV Types\n   See Section 7.3.\n       | Type     | Name          \
    \      | Section of This Document |\n       | 0        | Reserved            |\
    \                          |\n       | 1        | VRF Name            | 7.3.1\
    \                    |\n       | 2        | Ingress-QoS-Profile | 7.3.1      \
    \              |\n       | 3        | Egress-QoS-Profile  | 7.3.1            \
    \        |\n       | 4        | User-ACL-Policy     | 7.3.1                  \
    \  |\n       | 5        | Multicast-ProfileV4 | 7.3.1                    |\n \
    \      | 6        | Multicast-ProfileV6 | 7.3.1                    |\n       |\
    \ 7        | Ingress-CAR         | 7.3.2                    |\n       | 8    \
    \    | Egress-CAR          | 7.3.3                    |\n       | 9        | NAT-Instance\
    \        | 7.3.1                    |\n       | 10       | Pool-Name         \
    \  | 7.3.1                    |\n       | 11       | If-Desc             | 7.3.4\
    \                    |\n       | 12       | IPv6-Address List   | 7.3.5      \
    \              |\n       | 13       | Vendor              | 7.3.6            \
    \        |\n       | 12-64534 | Unassigned          |                        \
    \  |\n       | 65535    | Reserved            |                          |\n \
    \                          Table 8: Sub-TLV Types\n"
- title: 8.5.  Error Codes
  contents:
  - "8.5.  Error Codes\n   | Value           | Name                  | Remarks   \
    \              |\n   | 0               | Success               | Success     \
    \            |\n   | 1               | Failure               | Malformed message\
    \       |\n   | 2               | TLV-Unknown           | One or more of the \
    \     |\n   | 3               | TLV-Length            | The TLV length is    \
    \   |\n   | 4-999           | Unassigned            | Unassigned basic       \
    \ |\n   | 1000            | Reserved              |                         |\n\
    \   | 1001            | Version-Mismatch      | The version             |\n  \
    \ | 1002            | Keepalive Error       | The keepalive           |\n   |\
    \ 1003            | Timer Expires         | The establishment       |\n   | 1004-1999\
    \       | Unassigned            | Unassigned error        |\n   | 2000       \
    \     | Reserved              |                         |\n   | 2001         \
    \   | Synch-NoReady         | The data to be          |\n   | 2002           \
    \ | Synch-Unsupport       | The request for         |\n   | 2003-2999       |\
    \ Unassigned            | Unassigned data         |\n   | 3000            | Reserved\
    \              |                         |\n   | 3001            | Pool-Mismatch\
    \         | The corresponding       |\n   | 3002            | Pool-Full      \
    \       | The address pool is     |\n   | 3003            | Subnet-Mismatch  \
    \     | The address pool        |\n   | 3004            | Subnet-Conflict    \
    \   | Subnets in the          |\n   | 3005-3999       | Unassigned           \
    \ | Unassigned error        |\n   | 4000            | Reserved              |\
    \                         |\n   | 4001            | Update-Fail-No-Res    | The\
    \ forwarding table    |\n   | 4002            | QoS-Update-Success    | The QoS\
    \ policy takes    |\n   | 4003            | QoS-Update-Sq-Fail    | Failed to\
    \ process       |\n   | 4004            | QoS-Update-CAR-Fail   | Processing of\
    \ the       |\n   | 4005            | Statistic-Fail-No-Res | Statistics     \
    \         |\n   | 4006-4999       | Unassigned            | Unassigned       \
    \       |\n   | 5000-4294967295 | Reserved              |                    \
    \     |\n                            Table 9: Error Codes\n"
- title: 8.6.  If-Type Values
  contents:
  - "8.6.  If-Type Values\n   Defined values of the If-Type field in the If-Desc sub-TLV\
    \ (see\n   Section 7.3.4) are as follows:\n                      | Value | Meaning\
    \            |\n                      | 0     | Reserved           |\n       \
    \               | 1     | Fast Ethernet (FE) |\n                      | 2    \
    \ | GE                 |\n                      | 3     | 10GE               |\n\
    \                      | 4     | 100GE              |\n                      |\
    \ 5     | Eth-Trunk          |\n                      | 6     | Tunnel       \
    \      |\n                      | 7     | VE                 |\n             \
    \         | 8-254 | Unassigned         |\n                      | 255   | Reserved\
    \           |\n                         Table 10: If-Type Values\n"
- title: 8.7.  Access-Mode Values
  contents:
  - "8.7.  Access-Mode Values\n   Defined values of the Access-Mode field in the BAS\
    \ Function TLV (see\n   Section 7.7) are as follows:\n                      |\
    \ Value | Meaning             |\n                      | 0     | Layer 2 subscriber\
    \  |\n                      | 1     | Layer 3 subscriber  |\n                \
    \      | 2     | Layer 2 leased line |\n                      | 3     | Layer\
    \ 3 leased line |\n                      | 4-254 | Unassigned          |\n   \
    \                   | 255   | Reserved            |\n                        Table\
    \ 11: Access-Mode Values\n"
- title: 8.8.  Access Method Bits
  contents:
  - "8.8.  Access Method Bits\n   Defined values of the Auth-Method4 and Auth-Method6\
    \ fields in the BAS\n   Function TLV (see Section 7.7) are defined as bit fields\
    \ as follows:\n                    | Bit  | Meaning                 |\n      \
    \              | 0x01 | PPPoE authentication    |\n                    | 0x02\
    \ | DOT1X authentication    |\n                    | 0x04 | Web authentication\
    \      |\n                    | 0x08 | Web fast authentication |\n           \
    \         | 0x10 | Binding authentication  |\n                    | 0x20 | Reserved\
    \                |\n                    | 0x40 | Reserved                |\n \
    \                   | 0x80 | Reserved                |\n                     \
    \ Table 12: Auth-Method4 Values\n                    | Bit  | Meaning        \
    \         |\n                    | 0x01 | PPPoE authentication    |\n        \
    \            | 0x02 | DOT1X authentication    |\n                    | 0x04 |\
    \ Web authentication      |\n                    | 0x08 | Web fast authentication\
    \ |\n                    | 0x10 | Binding authentication  |\n                \
    \    | 0x20 | Reserved                |\n                    | 0x40 | Reserved\
    \                |\n                    | 0x80 | Reserved                |\n \
    \                     Table 13: Auth-Method6 Values\n"
- title: 8.9.  Route-Type Values
  contents:
  - "8.9.  Route-Type Values\n   Values of the Route-Type field in the IPv4 and IPv6\
    \ Routing TLVs (see\n   Sections 7.8.1 and 7.8.2) defined in this document are\
    \ as follows:\n               | Value   | Meaning                         |\n\
    \               | 0       | User host route                 |\n              \
    \ | 1       | Radius authorization FrameRoute |\n               | 2       | Network\
    \ segment route           |\n               | 3       | Gateway route        \
    \           |\n               | 4       | Radius authorized IP route      |\n\
    \               | 5       | L2TP LNS side user route        |\n              \
    \ | 6-65534 | Unassigned                      |\n               | 65535   | Reserved\
    \                        |\n                        Table 14: Route-Type Values\n"
- title: 8.10.  Access-Type Values
  contents:
  - "8.10.  Access-Type Values\n   Values of the Access-Type field in the Basic Subscriber\
    \ TLV (see\n   Section 7.9.1) defined in this document are as follows:\n   | Value\
    \  | Meaning                                                 |\n   | 0      |\
    \ Reserved                                                |\n   | 1      | PPP\
    \ access (PPP [RFC1661])                              |\n   | 2      | PPP over\
    \ Ethernet over ATM access (PPPoEoA)             |\n   | 3      | PPP over ATM\
    \ access (PPPoA [RFC3336])                   |\n   | 4      | PPP over Ethernet\
    \ access (PPPoE [RFC2516])              |\n   | 5      | PPPoE over VLAN access\
    \ (PPPoEoVLAN [RFC2516])           |\n   | 6      | PPP over LNS access (PPPoLNS)\
    \                           |\n   | 7      | IP over Ethernet DHCP access (IPoE_DHCP)\
    \                |\n   | 8      | IP over Ethernet EAP authentication access (IPoE_EAP)\
    \   |\n   | 9      | IP over Ethernet Layer 3 access (IPoE_L3)               |\n\
    \   | 10     | IP over Ethernet Layer 2 Static access (IPoE_L2_STATIC) |\n   |\
    \ 11     | Layer 2 Leased Line access (L2_Leased_Line)             |\n   | 12\
    \     | Layer 2 VPN Leased Line access (L2VPN_Leased_Line)      |\n   | 13   \
    \  | Layer 3 Leased Line access (L3_Leased_Line)             |\n   | 14     |\
    \ Layer 2 Leased line Sub-User access                     |\n   |        | (L2_Leased_Line_SUB_USER)\
    \                               |\n   | 15     | L2TP LAC tunnel access (L2TP_LAC)\
    \                       |\n   | 16     | L2TP LNS tunnel access (L2TP_LNS)   \
    \                    |\n   | 17-254 | Unassigned                             \
    \                 |\n   | 255    | Reserved                                  \
    \              |\n                       Table 15: Access-Type Values\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The Service, Control, and Management Interfaces\
    \ between the CP and UP\n   might be across the general Internet or other hostile\
    \ environment.\n   The ability of an adversary to block or corrupt messages or\
    \ introduce\n   spurious messages on any one or more of these interfaces would\
    \ give\n   the adversary the ability to stop subscribers from accessing network\n\
    \   services, disrupt existing subscriber sessions, divert traffic, mess\n   up\
    \ accounting statistics, and generally cause havoc.  Damage would\n   not necessarily\
    \ be limited to one or a few subscribers but could\n   disrupt routing or deny\
    \ service to one or more instances of the CP or\n   otherwise cause extensive\
    \ interference.  If the adversary knows the\n   details of the UP equipment and\
    \ its forwarding rule capabilities, the\n   adversary may be able to cause a copy\
    \ of most or all user data to be\n   sent to an address of the adversary's choosing,\
    \ thus enabling\n   eavesdropping.\n   Thus, appropriate protections MUST be implemented\
    \ to provide\n   integrity, authenticity, and secrecy of traffic over those\n\
    \   interfaces.  Whether such protection is used is the decision of the\n   network\
    \ operator.  See [RFC6241] for Mi/NETCONF security.  Security\n   on the Si is\
    \ dependent on the tunneling protocol used, which is out\n   of scope for this\
    \ document.  Security for the Ci, over which S-CUSP\n   flows, is further discussed\
    \ below.\n   S-CUSP messages do not provide security.  Thus, if these messages\
    \ are\n   exchanged in an environment where security is a concern, that\n   security\
    \ MUST be provided by another protocol such as TLS 1.3\n   [RFC8446] or IPsec.\
    \  TLS 1.3 is the mandatory-to-implement protocol\n   for interoperability.  The\
    \ use of a particular security protocol on\n   the Ci is determined by configuration.\
    \  Such security protocols need\n   not always be used, and lesser security precautions\
    \ might be\n   appropriate because, in some cases, the communication between the\
    \ CP\n   and UP is in a benign environment.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC20]    Cerf, V., \"ASCII format for network\
    \ interchange\", STD 80,\n              RFC 20, DOI 10.17487/RFC0020, October\
    \ 1969,\n              <https://www.rfc-editor.org/info/rfc20>.\n   [RFC793] \
    \  Postel, J., \"Transmission Control Protocol\", STD 7,\n              RFC 793,\
    \ DOI 10.17487/RFC0793, September 1981,\n              <https://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2661]\
    \  Townsley, W., Valencia, A., Rubens, A., Pall, G., Zorn,\n              G.,\
    \ and B. Palter, \"Layer Two Tunneling Protocol \"L2TP\"\",\n              RFC\
    \ 2661, DOI 10.17487/RFC2661, August 1999,\n              <https://www.rfc-editor.org/info/rfc2661>.\n\
    \   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n        \
    \      \"Remote Authentication Dial In User Service (RADIUS)\",\n            \
    \  RFC 2865, DOI 10.17487/RFC2865, June 2000,\n              <https://www.rfc-editor.org/info/rfc2865>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [802.1Q]   IEEE, \"IEEE Standard for Local\
    \ and metropolitan area\n              networks--Bridges and Bridged Networks\"\
    , IEEE 802.1Q-2018,\n              DOI 10.1109/IEEESTD.2018.8403927, July 2018,\n\
    \              <https://doi.org/10.1109/IEEESTD.2018.8403927>.\n   [RFC1661] \
    \ Simpson, W., Ed., \"The Point-to-Point Protocol (PPP)\",\n              STD\
    \ 51, RFC 1661, DOI 10.17487/RFC1661, July 1994,\n              <https://www.rfc-editor.org/info/rfc1661>.\n\
    \   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n         \
    \     RFC 2131, DOI 10.17487/RFC2131, March 1997,\n              <https://www.rfc-editor.org/info/rfc2131>.\n\
    \   [RFC2516]  Mamakos, L., Lidl, K., Evarts, J., Carrel, D., Simone, D.,\n  \
    \            and R. Wheeler, \"A Method for Transmitting PPP Over\n          \
    \    Ethernet (PPPoE)\", RFC 2516, DOI 10.17487/RFC2516,\n              February\
    \ 1999, <https://www.rfc-editor.org/info/rfc2516>.\n   [RFC2698]  Heinanen, J.\
    \ and R. Guerin, \"A Two Rate Three Color\n              Marker\", RFC 2698, DOI\
    \ 10.17487/RFC2698, September 1999,\n              <https://www.rfc-editor.org/info/rfc2698>.\n\
    \   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n      \
    \        Address Translator (Traditional NAT)\", RFC 3022,\n              DOI\
    \ 10.17487/RFC3022, January 2001,\n              <https://www.rfc-editor.org/info/rfc3022>.\n\
    \   [RFC3336]  Thompson, B., Koren, T., and B. Buffam, \"PPP Over\n          \
    \    Asynchronous Transfer Mode Adaptation Layer 2 (AAL2)\",\n              RFC\
    \ 3336, DOI 10.17487/RFC3336, December 2002,\n              <https://www.rfc-editor.org/info/rfc3336>.\n\
    \   [RFC5511]  Farrel, A., \"Routing Backus-Naur Form (RBNF): A Syntax\n     \
    \         Used to Form Encoding Rules in Various Routing Protocol\n          \
    \    Specifications\", RFC 5511, DOI 10.17487/RFC5511, April\n              2009,\
    \ <https://www.rfc-editor.org/info/rfc5511>.\n   [RFC7042]  Eastlake 3rd, D. and\
    \ J. Abley, \"IANA Considerations and\n              IETF Protocol and Documentation\
    \ Usage for IEEE 802\n              Parameters\", BCP 141, RFC 7042, DOI 10.17487/RFC7042,\n\
    \              October 2013, <https://www.rfc-editor.org/info/rfc7042>.\n   [RFC7348]\
    \  Mahalingam, M., Dutt, D., Duda, K., Agarwal, P., Kreeger,\n              L.,\
    \ Sridhar, T., Bursell, M., and C. Wright, \"Virtual\n              eXtensible\
    \ Local Area Network (VXLAN): A Framework for\n              Overlaying Virtualized\
    \ Layer 2 Networks over Layer 3\n              Networks\", RFC 7348, DOI 10.17487/RFC7348,\
    \ August 2014,\n              <https://www.rfc-editor.org/info/rfc7348>.\n   [RFC8446]\
    \  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n             \
    \ Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n\
    \   [TR-384]   Broadband Forum, \"Cloud Central Office Reference\n           \
    \   Architectural Framework\", BBF TR-384, January 2018.\n   [WT-459]   Broadband\
    \ Forum, \"Control and User Plane Separation for a\n              Disaggregated\
    \ BNG\", BBF WT-459, 2019.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The helpful comments and suggestions from the following\
    \ individuals\n   are hereby acknowledged:\n   *  Loa Andersson\n   *  Greg Mirsky\n"
- title: Contributors
  contents:
  - "Contributors\n   Zhenqiang Li\n   China Mobile\n   32 Xuanwumen West Ave\n  \
    \ Xicheng District\n   Beijing\n   100053\n   China\n   Email: lizhenqiang@chinamobile.com\n\
    \   Mach(Guoyi) Chen\n   Huawei Technologies\n   Huawei Bldg., No. 156 Beiqing\
    \ Road\n   Beijing\n   100095\n   China\n   Email: mach.chen@huawei.com\n   Zhouyi\
    \ Yu\n   Huawei Technologies\n   Email: yuzhouyi@huawei.com\n   Chengguang Niu\n\
    \   Huawei Technologies\n   Email: chengguang.niu@huawei.com\n   Zitao Wang\n\
    \   Huawei Technologies\n   Email: wangzitao@huawei.com\n   Jun Song\n   Huawei\
    \ Technologies\n   Email: song.jun@huawei.com\n   Dan Meng\n   H3C Technologies\n\
    \   No. 1 Lixing Center\n   No. 8 Guangxun South Street\n   Chaoyang District\n\
    \   Beijing\n   100102\n   China\n   Email: mengdan@h3c.com\n   Hanlei Liu\n \
    \  H3C Technologies\n   No. 1 Lixing Center\n   No. 8 Guangxun South Street\n\
    \   Chaoyang District\n   Beijing\n   100102\n   China\n   Email: hanlei_liu@h3c.com\n\
    \   Victor Lopez\n   Telefonica\n   Spain\n   Email: victor.lopezalvarez@telefonica.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Shujun Hu\n   China Mobile\n   32 Xuanwumen West Ave\n\
    \   Xicheng District\n   Beijing\n   100053\n   China\n   Email: hushujun@chinamobile.com\n\
    \   Donald Eastlake 3rd\n   Futurewei Technologies\n   2386 Panoramic Circle\n\
    \   Apopka, FL 32703\n   United States of America\n   Phone: +1-508-333-2270\n\
    \   Email: d3e3e3@gmail.com\n   Fengwei Qin\n   China Mobile\n   32 Xuanwumen\
    \ West Ave\n   Xicheng District\n   Beijing\n   100053\n   China\n   Email: qinfengwei@chinamobile.com\n\
    \   Tee Mong Chua\n   Singapore Telecommunications Limited\n   31 Exeter Road,\
    \ #05-04 Comcentre Podium Block\n   SINGAPORE 239732\n   Singapore\n   Email:\
    \ teemong@singtel.com\n   Daniel Huang\n"
