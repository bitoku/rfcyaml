- title: __initial_text__
  contents:
  - "         Structure and Identification of Management Information\n           \
    \            for TCP/IP-based Internets\n                           Table of Contents\n"
- title: 1. Status of this Memo .............................................  1
  contents:
  - '1. Status of this Memo .............................................  1

    '
- title: 2. Introduction ....................................................  2
  contents:
  - '2. Introduction ....................................................  2

    '
- title: 3. Structure and Identification of Management Information...........  4
  contents:
  - '3. Structure and Identification of Management Information...........  4

    '
- title: 3.1 Names ..........................................................  4
  contents:
  - '3.1 Names ..........................................................  4

    '
- title: 3.1.1 Directory ....................................................  5
  contents:
  - '3.1.1 Directory ....................................................  5

    '
- title: 3.1.2 Mgmt .........................................................  6
  contents:
  - '3.1.2 Mgmt .........................................................  6

    '
- title: 3.1.3 Experimental .................................................  6
  contents:
  - '3.1.3 Experimental .................................................  6

    '
- title: 3.1.4 Private ......................................................  7
  contents:
  - '3.1.4 Private ......................................................  7

    '
- title: 3.2 Syntax .........................................................  7
  contents:
  - '3.2 Syntax .........................................................  7

    '
- title: 3.2.1 Primitive Types ..............................................  7
  contents:
  - '3.2.1 Primitive Types ..............................................  7

    '
- title: 3.2.1.1 Guidelines for Enumerated INTEGERs .........................  7
  contents:
  - '3.2.1.1 Guidelines for Enumerated INTEGERs .........................  7

    '
- title: 3.2.2 Constructor Types ............................................  8
  contents:
  - '3.2.2 Constructor Types ............................................  8

    '
- title: 3.2.3 Defined Types ................................................  8
  contents:
  - '3.2.3 Defined Types ................................................  8

    '
- title: 3.2.3.1 NetworkAddress .............................................  8
  contents:
  - '3.2.3.1 NetworkAddress .............................................  8

    '
- title: 3.2.3.2 IpAddress ..................................................  8
  contents:
  - '3.2.3.2 IpAddress ..................................................  8

    '
- title: 3.2.3.3 Counter ....................................................  8
  contents:
  - '3.2.3.3 Counter ....................................................  8

    '
- title: 3.2.3.4 Gauge ......................................................  9
  contents:
  - '3.2.3.4 Gauge ......................................................  9

    '
- title: 3.2.3.5 TimeTicks ..................................................  9
  contents:
  - '3.2.3.5 TimeTicks ..................................................  9

    '
- title: 3.2.3.6 Opaque .....................................................  9
  contents:
  - '3.2.3.6 Opaque .....................................................  9

    '
- title: 3.3 Encodings ......................................................  9
  contents:
  - '3.3 Encodings ......................................................  9

    '
- title: 4. Managed Objects ................................................. 10
  contents:
  - '4. Managed Objects ................................................. 10

    '
- title: 4.1 Guidelines for Object Names .................................... 10
  contents:
  - '4.1 Guidelines for Object Names .................................... 10

    '
- title: 4.2 Object Types and Instances ..................................... 10
  contents:
  - '4.2 Object Types and Instances ..................................... 10

    '
- title: 4.3 Macros for Managed Objects ..................................... 14
  contents:
  - '4.3 Macros for Managed Objects ..................................... 14

    '
- title: 5. Extensions to the MIB ........................................... 16
  contents:
  - '5. Extensions to the MIB ........................................... 16

    '
- title: 6. Definitions ..................................................... 17
  contents:
  - '6. Definitions ..................................................... 17

    '
- title: 7. Acknowledgements ................................................ 20
  contents:
  - '7. Acknowledgements ................................................ 20

    '
- title: 8. References ...................................................... 21
  contents:
  - '8. References ...................................................... 21

    '
- title: 9. Security Considerations.......................................... 21
  contents:
  - '9. Security Considerations.......................................... 21

    '
- title: 10. Authors' Addresses.............................................. 22
  contents:
  - '10. Authors'' Addresses.............................................. 22

    '
- title: 1.  Status of this Memo
  contents:
  - "1.  Status of this Memo\n   This RFC is a re-release of RFC 1065, with a changed\
    \ \"Status of this\n   Memo\", plus a few minor typographical corrections.  The\
    \ technical\n   content of the document is unchanged from RFC 1065.\n   This memo\
    \ provides the common definitions for the structure and\n   identification of\
    \ management information for TCP/IP-based internets.\n   In particular, together\
    \ with its companion memos which describe the\n   management information base\
    \ along with the network management\n   protocol, these documents provide a simple,\
    \ workable architecture and\n   system for managing TCP/IP-based internets and\
    \ in particular, the\n   Internet.\n   This memo specifies a Standard Protocol\
    \ for the Internet community.\n   Its status is \"Recommended\".  TCP/IP implementations\
    \ in the Internet\n   which are network manageable are expected to adopt and implement\
    \ this\n   specification.\n   The Internet Activities Board recommends that all\
    \ IP and TCP\n   implementations be network manageable.  This implies implementation\n\
    \   of the Internet MIB (RFC-1156) and at least one of the two\n   recommended\
    \ management protocols SNMP (RFC-1157) or CMOT (RFC-1095).\n   It should be noted\
    \ that, at this time, SNMP is a full Internet\n   standard and CMOT is a draft\
    \ standard.  See also the Host and Gateway\n   Requirements RFCs for more specific\
    \ information on the applicability\n   of this standard.\n   Please refer to the\
    \ latest edition of the \"IAB Official Protocol\n   Standards\" RFC for current\
    \ information on the state and status of\n   standard Internet protocols.\n  \
    \ Distribution of this memo is unlimited.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   This memo describes the common structures and identification\
    \ scheme\n   for the definition of management information used in managing\n \
    \  TCP/IP-based internets.  Included are descriptions of an object\n   information\
    \ model for network management along with a set of generic\n   types used to describe\
    \ management information.  Formal descriptions\n   of the structure are given\
    \ using Abstract Syntax Notation One (ASN.1)\n   [1].\n   This memo is largely\
    \ concerned with organizational concerns and\n   administrative policy:  it neither\
    \ specifies the objects which are\n   managed, nor the protocols used to manage\
    \ those objects.  These\n   concerns are addressed by two companion memos:  one\
    \ describing the\n   Management Information Base (MIB) [2], and the other describing\
    \ the\n   Simple Network Management Protocol (SNMP) [3].\n   This memo is based\
    \ in part on the work of the Internet Engineering\n   Task Force, particularly\
    \ the working note titled \"Structure and\n   Identification of Management Information\
    \ for the Internet\" [4].  This\n   memo uses a skeletal structure derived from\
    \ that note, but differs in\n   one very significant way:  that note focuses entirely\
    \ on the use of\n   OSI-style network management.  As such, it is not suitable\
    \ for use\n   with SNMP.\n   This memo attempts to achieve two goals:  simplicity\
    \ and\n   extensibility.  Both are motivated by a common concern:  although the\n\
    \   management of TCP/IP-based internets has been a topic of study for\n   some\
    \ time, the authors do not feel that the depth and breadth of such\n   understanding\
    \ is complete.  More bluntly, we feel that previous\n   experiences, while giving\
    \ the community insight, are hardly\n   conclusive.  By fostering a simple SMI,\
    \ the minimal number of\n   constraints are imposed on future potential approaches;\
    \ further, by\n   fostering an extensible SMI, the maximal number of potential\n\
    \   approaches are available for experimentation.\n   It is believed that this\
    \ memo and its two companions comply with the\n   guidelines set forth in RFC\
    \ 1052, \"IAB Recommendations for the\n   Development of Internet Network Management\
    \ Standards\" [5] and RFC\n   1109, \"Report of the Second Ad Hoc Network Management\
    \ Review Group\"\n   [6].  In particular, we feel that this memo, along with the\
    \ memo\n   describing the management information base, provide a solid basis for\n\
    \   network management of the Internet.\n"
- title: 3.  Structure and Identification of Management Information
  contents:
  - "3.  Structure and Identification of Management Information\n   Managed objects\
    \ are accessed via a virtual information store, termed\n   the Management Information\
    \ Base or MIB.  Objects in the MIB are\n   defined using Abstract Syntax Notation\
    \ One (ASN.1) [1].\n   Each type of object (termed an object type) has a name,\
    \ a syntax, and\n   an encoding.  The name is represented uniquely as an OBJECT\n\
    \   IDENTIFIER.  An OBJECT IDENTIFIER is an administratively assigned\n   name.\
    \  The administrative policies used for assigning names are\n   discussed later\
    \ in this memo.\n   The syntax for an object type defines the abstract data structure\n\
    \   corresponding to that object type.  For example, the structure of a\n   given\
    \ object type might be an INTEGER or OCTET STRING.  Although in\n   general, we\
    \ should permit any ASN.1 construct to be available for use\n   in defining the\
    \ syntax of an object type, this memo purposely\n   restricts the ASN.1 constructs\
    \ which may be used.  These restrictions\n   are made solely for the sake of simplicity.\n\
    \   The encoding of an object type is simply how instances of that object\n  \
    \ type are represented using the object's type syntax.  Implicitly tied\n   to\
    \ the notion of an object's syntax and encoding is how the object is\n   represented\
    \ when being transmitted on the network.  This memo\n   specifies the use of the\
    \ basic encoding rules of ASN.1 [7].\n   It is beyond the scope of this memo to\
    \ define either the MIB used for\n   network management or the network management\
    \ protocol.  As mentioned\n   earlier, these tasks are left to companion memos.\
    \  This memo attempts\n   to minimize the restrictions placed upon its companions\
    \ so as to\n   maximize generality.  However, in some cases, restrictions have\
    \ been\n   made (e.g., the syntax which may be used when defining object types\n\
    \   in the MIB) in order to encourage a particular style of management.\n   Future\
    \ editions of this memo may remove these restrictions.\n"
- title: 3.1.  Names
  contents:
  - "3.1.  Names\n   Names are used to identify managed objects.  This memo specifies\n\
    \   names which are hierarchical in nature.  The OBJECT IDENTIFIER\n   concept\
    \ is used to model this notion.  An OBJECT IDENTIFIER can be\n   used for purposes\
    \ other than naming managed object types; for\n   example, each international\
    \ standard has an OBJECT IDENTIFIER\n   assigned to it for the purposes of identification.\
    \  In short, OBJECT\n   IDENTIFIERs are a means for identifying some object, regardless\
    \ of\n   the semantics associated with the object (e.g., a network object, a\n\
    \   standards document, etc.)\n   An OBJECT IDENTIFIER is a sequence of integers\
    \ which traverse a\n   global tree.  The tree consists of a root connected to\
    \ a number of\n   labeled nodes via edges.  Each node may, in turn, have children\
    \ of\n   its own which are labeled.  In this case, we may term the node a\n  \
    \ subtree.  This process may continue to an arbitrary level of depth.\n   Central\
    \ to the notion of the OBJECT IDENTIFIER is the understanding\n   that administrative\
    \ control of the meanings assigned to the nodes may\n   be delegated as one traverses\
    \ the tree.  A label is a pairing of a\n   brief textual description and an integer.\n\
    \   The root node itself is unlabeled, but has at least three children\n   directly\
    \ under it:  one node is administered by the International\n   Organization for\
    \ Standardization, with label iso(1); another is\n   administrated by the International\
    \ Telegraph and Telephone\n   Consultative Committee, with label ccitt(0); and\
    \ the third is jointly\n   administered by the ISO and the CCITT, joint-iso-ccitt(2).\n\
    \   Under the iso(1) node, the ISO has designated one subtree for use by\n   other\
    \ (inter)national organizations, org(3).  Of the children nodes\n   present, two\
    \ have been assigned to the U.S. National Institutes of\n   Standards and Technology.\
    \  One of these subtrees has been transferred\n   by the NIST to the U.S. Department\
    \ of Defense, dod(6).\n   As of this writing, the DoD has not indicated how it\
    \ will manage its\n   subtree of OBJECT IDENTIFIERs.  This memo assumes that DoD\
    \ will\n   allocate a node to the Internet community, to be administered by the\n\
    \   Internet Activities Board (IAB) as follows:\n      internet    OBJECT IDENTIFIER\
    \ ::= { iso org(3) dod(6) 1 }\n   That is, the Internet subtree of OBJECT IDENTIFIERs\
    \ starts with the\n   prefix:\n      1.3.6.1.\n   This memo, as a standard approved\
    \ by the IAB, now specifies the\n   policy under which this subtree of OBJECT\
    \ IDENTIFIERs is\n   administered.  Initially, four nodes are present:\n     \
    \ directory     OBJECT IDENTIFIER ::= { internet 1 }\n      mgmt          OBJECT\
    \ IDENTIFIER ::= { internet 2 }\n      experimental  OBJECT IDENTIFIER ::= { internet\
    \ 3 }\n      private       OBJECT IDENTIFIER ::= { internet 4 }\n"
- title: 3.1.1.  Directory
  contents:
  - "3.1.1.  Directory\n   The directory(1) subtree is reserved for use with a future\
    \ memo that\n   discusses how the OSI Directory may be used in the Internet.\n"
- title: 3.1.2.  Mgmt
  contents:
  - "3.1.2.  Mgmt\n   The mgmt(2) subtree is used to identify objects which are defined\
    \ in\n   IAB-approved documents.  Administration of the mgmt(2) subtree is\n \
    \  delegated by the IAB to the Internet Assigned Numbers Authority for\n   the\
    \ Internet.  As RFCs which define new versions of the Internet-\n   standard Management\
    \ Information Base are approved, they are assigned\n   an OBJECT IDENTIFIER by\
    \ the Internet Assigned Numbers Authority for\n   identifying the objects defined\
    \ by that memo.\n   For example, the RFC which defines the initial Internet standard\
    \ MIB\n   would be assigned management document number 1.  This RFC would use\n\
    \   the OBJECT IDENTIFIER\n      { mgmt 1 }\n   or\n      1.3.6.1.2.1\n   in defining\
    \ the Internet-standard MIB.\n   The generation of new versions of the Internet-standard\
    \ MIB is a\n   rigorous process.  Section 5 of this memo describes the rules used\n\
    \   when a new version is defined.\n"
- title: 3.1.3.  Experimental
  contents:
  - "3.1.3.  Experimental\n   The experimental(3) subtree is used to identify objects\
    \ used in\n   Internet experiments.  Administration of the experimental(3) subtree\n\
    \   is delegated by the IAB to the Internet Assigned Numbers Authority of\n  \
    \ the Internet.\n   For example, an experimenter might received number 17, and\
    \ would have\n   available the OBJECT IDENTIFIER\n      { experimental 17 }\n\
    \   or\n      1.3.6.1.3.17\n   for use.\n   As a part of the assignment process,\
    \ the Internet Assigned Numbers\n   Authority may make requirements as to how\
    \ that subtree is used.\n"
- title: 3.1.4.  Private
  contents:
  - "3.1.4.  Private\n   The private(4) subtree is used to identify objects defined\n\
    \   unilaterally.  Administration of the private(4) subtree is delegated\n   by\
    \ the IAB to the Internet Assigned Numbers Authority for the\n   Internet.  Initially,\
    \ this subtree has at least one child:\n      enterprises   OBJECT IDENTIFIER\
    \ ::= { private 1 }\n   The enterprises(1) subtree is used, among other things,\
    \ to permit\n   parties providing networking subsystems to register models of\
    \ their\n   products.\n   Upon receiving a subtree, the enterprise may, for example,\
    \ define new\n   MIB objects in this subtree.  In addition, it is strongly recommended\n\
    \   that the enterprise will also register its networking subsystems\n   under\
    \ this subtree, in order to provide an unambiguous identification\n   mechanism\
    \ for use in management protocols.  For example, if the\n   \"Flintstones, Inc.\"\
    \  enterprise produced networking subsystems, then\n   they could request a node\
    \ under the enterprises subtree from the\n   Internet Assigned Numbers Authority.\
    \  Such a node might be numbered:\n      1.3.6.1.4.1.42\n   The \"Flintstones,\
    \ Inc.\" enterprise might then register their \"Fred\n   Router\" under the name\
    \ of:\n      1.3.6.1.4.1.42.1.1\n"
- title: 3.2.  Syntax
  contents:
  - "3.2.  Syntax\n   Syntax is used to define the structure corresponding to object\
    \ types.\n   ASN.1 constructs are used to define this structure, although the\
    \ full\n   generality of ASN.1 is not permitted.\n   The ASN.1 type ObjectSyntax\
    \ defines the different syntaxes which may\n   be used in defining an object type.\n"
- title: 3.2.1.  Primitive Types
  contents:
  - "3.2.1.  Primitive Types\n   Only the ASN.1 primitive types INTEGER, OCTET STRING,\
    \ OBJECT\n   IDENTIFIER, and NULL are permitted.  These are sometimes referred\
    \ to\n   as non-aggregate types.\n"
- title: 3.2.1.1.  Guidelines for Enumerated INTEGERs
  contents:
  - "3.2.1.1.  Guidelines for Enumerated INTEGERs\n   If an enumerated INTEGER is\
    \ listed as an object type, then a named-\n   number having the value 0 shall\
    \ not be present in the list of\n   enumerations.  Use of this value is prohibited.\n"
- title: 3.2.2.  Constructor Types
  contents:
  - "3.2.2.  Constructor Types\n   The ASN.1 constructor type SEQUENCE is permitted,\
    \ providing that it\n   is used to generate either lists or tables.\n   For lists,\
    \ the syntax takes the form:\n      SEQUENCE { <type1>, ..., <typeN> }\n   where\
    \ each <type> resolves to one of the ASN.1 primitive types listed\n   above. \
    \ Further, these ASN.1 types are always present (the DEFAULT\n   and OPTIONAL\
    \ clauses do not appear in the SEQUENCE definition).\n   For tables, the syntax\
    \ takes the form:\n      SEQUENCE OF <entry>\n   where <entry> resolves to a list\
    \ constructor.\n   Lists and tables are sometimes referred to as aggregate types.\n"
- title: 3.2.3.  Defined Types
  contents:
  - "3.2.3.  Defined Types\n   In addition, new application-wide types may be defined,\
    \ so long as\n   they resolve into an IMPLICITly defined ASN.1 primitive type,\
    \ list,\n   table, or some other application-wide type.  Initially, few\n   application-wide\
    \ types are defined.  Future memos will no doubt\n   define others once a consensus\
    \ is reached.\n"
- title: 3.2.3.1.  NetworkAddress
  contents:
  - "3.2.3.1.  NetworkAddress\n   This CHOICE represents an address from one of possibly\
    \ several\n   protocol families.  Currently, only one protocol family, the Internet\n\
    \   family, is present in this CHOICE.\n"
- title: 3.2.3.2.  IpAddress
  contents:
  - "3.2.3.2.  IpAddress\n   This application-wide type represents a 32-bit internet\
    \ address.  It\n   is represented as an OCTET STRING of length 4, in network byte-order.\n\
    \   When this ASN.1 type is encoded using the ASN.1 basic encoding rules,\n  \
    \ only the primitive encoding form shall be used.\n"
- title: 3.2.3.3.  Counter
  contents:
  - "3.2.3.3.  Counter\n   This application-wide type represents a non-negative integer\
    \ which\n   monotonically increases until it reaches a maximum value, when it\n\
    \   wraps around and starts increasing again from zero.  This memo\n   specifies\
    \ a maximum value of 2^32-1 (4294967295 decimal) for\n   counters.\n"
- title: 3.2.3.4.  Gauge
  contents:
  - "3.2.3.4.  Gauge\n   This application-wide type represents a non-negative integer,\
    \ which\n   may increase or decrease, but which latches at a maximum value.  This\n\
    \   memo specifies a maximum value of 2^32-1 (4294967295 decimal) for\n   gauges.\n"
- title: 3.2.3.5.  TimeTicks
  contents:
  - "3.2.3.5.  TimeTicks\n   This application-wide type represents a non-negative\
    \ integer which\n   counts the time in hundredths of a second since some epoch.\
    \  When\n   object types are defined in the MIB which use this ASN.1 type, the\n\
    \   description of the object type identifies the reference epoch.\n"
- title: 3.2.3.6.  Opaque
  contents:
  - "3.2.3.6.  Opaque\n   This application-wide type supports the capability to pass\
    \ arbitrary\n   ASN.1 syntax.  A value is encoded using the ASN.1 basic rules\
    \ into a\n   string of octets.  This, in turn, is encoded as an OCTET STRING,\
    \ in\n   effect \"double-wrapping\" the original ASN.1 value.\n   Note that a\
    \ conforming implementation need only be able to accept and\n   recognize opaquely-encoded\
    \ data.  It need not be able to unwrap the\n   data and then interpret its contents.\n\
    \   Further note that by use of the ASN.1 EXTERNAL type, encodings other\n   than\
    \ ASN.1 may be used in opaquely-encoded data.\n"
- title: 3.3.  Encodings
  contents:
  - "3.3.  Encodings\n   Once an instance of an object type has been identified, its\
    \ value may\n   be transmitted by applying the basic encoding rules of ASN.1 to\
    \ the\n   syntax for the object type.\n"
- title: 4.  Managed Objects
  contents:
  - "4.  Managed Objects\n   Although it is not the purpose of this memo to define\
    \ objects in the\n   MIB, this memo specifies a format to be used by other memos\
    \ which\n   define these objects.\n   An object type definition consists of five\
    \ fields:\n   OBJECT:\n   -------\n      A textual name, termed the OBJECT DESCRIPTOR,\
    \ for the object type,\n      along with its corresponding OBJECT IDENTIFIER.\n\
    \   Syntax:\n      The abstract syntax for the object type.  This must resolve\
    \ to an\n      instance of the ASN.1 type ObjectSyntax (defined below).\n   Definition:\n\
    \      A textual description of the semantics of the object type.\n      Implementations\
    \ should ensure that their instance of the object\n      fulfills this definition\
    \ since this MIB is intended for use in\n      multi-vendor environments.  As\
    \ such it is vital that objects have\n      consistent meaning across all machines.\n\
    \   Access:\n      One of read-only, read-write, write-only, or not-accessible.\n\
    \   Status:\n      One of mandatory, optional, or obsolete.\n   Future memos may\
    \ also specify other fields for the objects which they\n   define.\n"
- title: 4.1.  Guidelines for Object Names
  contents:
  - "4.1.  Guidelines for Object Names\n   No object type in the Internet-Standard\
    \ MIB shall use a sub-\n   identifier of 0 in its name.  This value is reserved\
    \ for use with\n   future extensions.\n   Each OBJECT DESCRIPTOR corresponding\
    \ to an object type in the\n   internet-standard MIB shall be a unique, but mnemonic,\
    \ printable\n   string.  This promotes a common language for humans to use when\n\
    \   discussing the MIB and also facilitates simple table mappings for\n   user\
    \ interfaces.\n"
- title: 4.2.  Object Types and Instances
  contents:
  - "4.2.  Object Types and Instances\n   An object type is a definition of a kind\
    \ of managed object; it is\n   declarative in nature.  In contrast, an object\
    \ instance is an\n   instantiation of an object type which has been bound to a\
    \ value.  For\n   example, the notion of an entry in a routing table might be\
    \ defined\n   in the MIB.  Such a notion corresponds to an object type; individual\n\
    \   entries in a particular routing table which exist at some time are\n   object\
    \ instances of that object type.\n   A collection of object types is defined in\
    \ the MIB.  Each such\n   subject type is uniquely named by its OBJECT IDENTIFIER\
    \ and also has\n   a textual name, which is its OBJECT DESCRIPTOR.  The means\
    \ whereby\n   object instances are referenced is not defined in the MIB.  Reference\n\
    \   to object instances is achieved by a protocol-specific mechanism:  it\n  \
    \ is the responsibility of each management protocol adhering to the SMI\n   to\
    \ define this mechanism.\n   An object type may be defined in the MIB such that\
    \ an instance of\n   that object type represents an aggregation of information\
    \ also\n   represented by instances of some number of \"subordinate\" object\n\
    \   types.  For example, suppose the following object types are defined\n   in\
    \ the MIB:\n   OBJECT:\n   -------\n      atIndex { atEntry 1 }\n   Syntax:\n\
    \      INTEGER\n   Definition:\n      The interface number for the physical address.\n\
    \   Access:\n      read-write.\n   Status:\n      mandatory.\n   OBJECT:\n   -------\n\
    \      atPhysAddress { atEntry 2 }\n   Syntax:\n      OCTET STRING\n   Definition:\n\
    \      The media-dependent physical address.\n   Access:\n      read-write.\n\
    \   Status:\n      mandatory.\n   OBJECT:\n   -------\n      atNetAddress { atEntry\
    \ 3 }\n   Syntax:\n      NetworkAddress\n   Definition:\n      The network address\
    \ corresponding to the media-dependent physical\n      address.\n   Access:\n\
    \      read-write.\n   Status:\n      mandatory.\n   Then, a fourth object type\
    \ might also be defined in the MIB:\n   OBJECT:\n   -------\n      atEntry { atTable\
    \ 1 }\n   Syntax:\n      AtEntry ::= SEQUENCE {\n            atIndex\n       \
    \     INTEGER,\n            atPhysAddress\n            OCTET STRING,\n       \
    \     atNetAddress\n            NetworkAddress\n            }\n   Definition:\n\
    \      An entry in the address translation table.\n   Access:\n      read-write.\n\
    \   Status:\n      mandatory.\n   Each instance of this object type comprises\
    \ information represented\n   by instances of the former three object types. \
    \ An object type\n   defined in this way is called a list.\n   Similarly, tables\
    \ can be formed by aggregations of a list type.  For\n   example, a fifth object\
    \ type might also be defined in the MIB:\n   OBJECT:\n   ------\n      atTable\
    \ { at 1 }\n   Syntax:\n      SEQUENCE OF AtEntry\n   Definition:\n      The address\
    \ translation table.\n   Access:\n      read-write.\n   Status:\n      mandatory.\n\
    \   such that each instance of the atTable object comprises information\n   represented\
    \ by the set of atEntry object types that collectively\n   constitute a given\
    \ atTable object instance, that is, a given address\n   translation table.\n \
    \  Consider how one might refer to a simple object within a table.\n   Continuing\
    \ with the previous example, one might name the object type\n      { atPhysAddress\
    \ }\n   and specify, using a protocol-specific mechanism, the object instance\n\
    \      { atNetAddress } = { internet \"10.0.0.52\" }\n   This pairing of object\
    \ type and object instance would refer to all\n   instances of atPhysAddress which\
    \ are part of any entry in some\n   address translation table for which the associated\
    \ atNetAddress value\n   is { internet \"10.0.0.52\" }.\n   To continue with this\
    \ example, consider how one might refer to an\n   aggregate object (list) within\
    \ a table.  Naming the object type\n      { atEntry }\n   and specifying, using\
    \ a protocol-specific mechanism, the object\n   instance\n      { atNetAddress\
    \ } = { internet \"10.0.0.52\" }\n   refers to all instances of entries in the\
    \ table for which the\n   associated atNetAddress value is { internet \"10.0.0.52\"\
    \ }.\n   Each management protocol must provide a mechanism for accessing\n   simple\
    \ (non-aggregate) object types.  Each management protocol\n   specifies whether\
    \ or not it supports access to aggregate object\n   types.  Further, the protocol\
    \ must specify which instances are\n   \"returned\" when an object type/instance\
    \ pairing refers to more than\n   one instance of a type.\n   To afford support\
    \ for a variety of management protocols, all\n   information by which instances\
    \ of a given object type may be usefully\n   distinguished, one from another,\
    \ is represented by instances of\n   object types defined in the MIB.\n"
- title: 4.3.  Macros for Managed Objects
  contents:
  - "4.3.  Macros for Managed Objects\n   In order to facilitate the use of tools\
    \ for processing the definition\n   of the MIB, the OBJECT-TYPE macro may be used.\
    \  This macro permits\n   the key aspects of an object type to be represented\
    \ in a formal way.\n      OBJECT-TYPE MACRO ::=\n      BEGIN\n          TYPE NOTATION\
    \ ::= \"SYNTAX\" type (TYPE ObjectSyntax)\n                            \"ACCESS\"\
    \ Access\n                            \"STATUS\" Status\n          VALUE NOTATION\
    \ ::= value (VALUE ObjectName)\n          Access ::= \"read-only\"\n         \
    \                 | \"read-write\"\n                          | \"write-only\"\
    \n                          | \"not-accessible\"\n          Status ::= \"mandatory\"\
    \n                          | \"optional\"\n                          | \"obsolete\"\
    \n          END\n   Given the object types defined earlier, we might imagine the\n\
    \   following definitions being present in the MIB:\n                  atIndex\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-write\n                          STATUS  mandatory\n    \
    \                      ::= { atEntry 1 }\n                  atPhysAddress OBJECT-TYPE\n\
    \                          SYNTAX  OCTET STRING\n                          ACCESS\
    \  read-write\n                          STATUS  mandatory\n                 \
    \         ::= { atEntry 2 }\n                  atNetAddress OBJECT-TYPE\n    \
    \                      SYNTAX  NetworkAddress\n                          ACCESS\
    \  read-write\n                          STATUS  mandatory\n                 \
    \         ::= { atEntry 3 }\n                  atEntry OBJECT-TYPE\n         \
    \                 SYNTAX  AtEntry\n                          ACCESS  read-write\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ atTable 1 }\n                  atTable OBJECT-TYPE\n                       \
    \   SYNTAX  SEQUENCE OF AtEntry\n                          ACCESS  read-write\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ at 1 }\n                  AtEntry ::= SEQUENCE {\n                      atIndex\n\
    \                          INTEGER,\n                      atPhysAddress\n   \
    \                       OCTET STRING,\n                      atNetAddress\n  \
    \                        NetworkAddress\n                  }\n   The first five\
    \ definitions describe object types, relating, for\n   example, the OBJECT DESCRIPTOR\
    \ atIndex to the OBJECT IDENTIFIER {\n   atEntry 1 }.  In addition, the syntax\
    \ of this object is defined\n   (INTEGER) along with the access permitted (read-write)\
    \ and status\n   (mandatory).  The sixth definition describes an ASN.1 type called\n\
    \   AtEntry.\n"
- title: 5.  Extensions to the MIB
  contents:
  - "5.  Extensions to the MIB\n   Every Internet-standard MIB document obsoletes\
    \ all previous such\n   documents.  The portion of a name, termed the tail, following\
    \ the\n   OBJECT IDENTIFIER\n      { mgmt version-number }\n   used to name objects\
    \ shall remain unchanged between versions.  New\n   versions may:\n      (1) declare\
    \ old object types obsolete (if necessary), but not\n      delete their names;\n\
    \      (2) augment the definition of an object type corresponding to a\n     \
    \ list by appending non-aggregate object types to the object types\n      in the\
    \ list; or,\n      (3) define entirely new object types.\n   New versions may\
    \ not:\n      (1) change the semantics of any previously defined object without\n\
    \      changing the name of that object.\n   These rules are important because\
    \ they admit easier support for\n   multiple versions of the Internet-standard\
    \ MIB.  In particular, the\n   semantics associated with the tail of a name remain\
    \ constant\n   throughout different versions of the MIB.  Because multiple versions\n\
    \   of the MIB may thus coincide in \"tail-space,\" implementations\n   supporting\
    \ multiple versions of the MIB can be vastly simplified.\n   However, as a consequence,\
    \ a management agent might return an\n   instance corresponding to a superset\
    \ of the expected object type.\n   Following the principle of robustness, in this\
    \ exceptional case, a\n   manager should ignore any additional information beyond\
    \ the\n   definition of the expected object type.  However, the robustness\n \
    \  principle requires that one exercise care with respect to control\n   actions:\
    \  if an instance does not have the same syntax as its\n   expected object type,\
    \ then those control actions must fail.  In both\n   the monitoring and control\
    \ cases, the name of an object returned by\n   an operation must be identical\
    \ to the name requested by an operation.\n"
- title: 6.  Definitions
  contents:
  - "6.  Definitions\n           RFC1155-SMI DEFINITIONS ::= BEGIN\n           EXPORTS\
    \ -- EVERYTHING\n                   internet, directory, mgmt,\n             \
    \      experimental, private, enterprises,\n                   OBJECT-TYPE, ObjectName,\
    \ ObjectSyntax, SimpleSyntax,\n                   ApplicationSyntax, NetworkAddress,\
    \ IpAddress,\n                   Counter, Gauge, TimeTicks, Opaque;\n        \
    \    -- the path to the root\n            internet      OBJECT IDENTIFIER ::=\
    \ { iso org(3) dod(6) 1 }\n            directory     OBJECT IDENTIFIER ::= { internet\
    \ 1 }\n            mgmt          OBJECT IDENTIFIER ::= { internet 2 }\n      \
    \      experimental  OBJECT IDENTIFIER ::= { internet 3 }\n            private\
    \       OBJECT IDENTIFIER ::= { internet 4 }\n            enterprises   OBJECT\
    \ IDENTIFIER ::= { private 1 }\n            -- definition of object types\n  \
    \          OBJECT-TYPE MACRO ::=\n            BEGIN\n                TYPE NOTATION\
    \ ::= \"SYNTAX\" type (TYPE ObjectSyntax)\n                                  \"\
    ACCESS\" Access\n                                  \"STATUS\" Status\n       \
    \         VALUE NOTATION ::= value (VALUE ObjectName)\n                Access\
    \ ::= \"read-only\"\n                                | \"read-write\"\n      \
    \                          | \"write-only\"\n                                |\
    \ \"not-accessible\"\n                Status ::= \"mandatory\"\n             \
    \                   | \"optional\"\n                                | \"obsolete\"\
    \n            END\n               -- names of objects in the MIB\n           \
    \    ObjectName ::=\n                   OBJECT IDENTIFIER\n               -- syntax\
    \ of objects in the MIB\n               ObjectSyntax ::=\n                   CHOICE\
    \ {\n                       simple\n                           SimpleSyntax,\n\
    \               -- note that simple SEQUENCEs are not directly\n             \
    \  -- mentioned here to keep things simple (i.e.,\n               -- prevent mis-use).\
    \  However, application-wide\n               -- types which are IMPLICITly encoded\
    \ simple\n               -- SEQUENCEs may appear in the following CHOICE\n   \
    \                    application-wide\n                           ApplicationSyntax\n\
    \                   }\n                  SimpleSyntax ::=\n                  \
    \    CHOICE {\n                          number\n                            \
    \  INTEGER,\n                          string\n                              OCTET\
    \ STRING,\n                          object\n                              OBJECT\
    \ IDENTIFIER,\n                          empty\n                             \
    \ NULL\n                      }\n                  ApplicationSyntax ::=\n   \
    \                   CHOICE {\n                          address\n            \
    \                  NetworkAddress,\n                          counter\n      \
    \                        Counter,\n                          gauge\n         \
    \                     Gauge,\n                          ticks\n              \
    \                TimeTicks,\n                          arbitrary\n           \
    \                   Opaque\n                  -- other application-wide types,\
    \ as they are\n                  -- defined, will be added here\n            \
    \          }\n                  -- application-wide types\n                  NetworkAddress\
    \ ::=\n                      CHOICE {\n                          internet\n  \
    \                            IpAddress\n                      }\n            \
    \      IpAddress ::=\n                      [APPLICATION 0]          -- in network-byte\
    \ order\n                          IMPLICIT OCTET STRING (SIZE (4))\n        \
    \          Counter ::=\n                      [APPLICATION 1]\n              \
    \            IMPLICIT INTEGER (0..4294967295)\n                  Gauge ::=\n \
    \                     [APPLICATION 2]\n                          IMPLICIT INTEGER\
    \ (0..4294967295)\n                  TimeTicks ::=\n                      [APPLICATION\
    \ 3]\n                          IMPLICIT INTEGER (0..4294967295)\n           \
    \       Opaque ::=\n                      [APPLICATION 4]          -- arbitrary\
    \ ASN.1 value,\n                          IMPLICIT OCTET STRING   --   \"double-wrapped\"\
    \n                  END\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This memo was influenced by three sets of contributors\
    \ to earlier\n   drafts:\n   First, Lee Labarre of the MITRE Corporation, who\
    \ as author of the\n   NETMAN SMI [4], presented the basic roadmap for the SMI.\n\
    \   Second, several individuals who provided valuable comments on this\n   memo\
    \ prior to its initial distribution:\n         James R. Davin, Proteon\n     \
    \    Mark S. Fedor, NYSERNet\n         Craig Partridge, BBN Laboratories\n   \
    \      Martin Lee Schoffstall, Rensselaer Polytechnic Institute\n         Wengyik\
    \ Yeong, NYSERNet\n   Third, the IETF MIB working group:\n         Karl Auerbach,\
    \ Epilogue Technology\n         K. Ramesh Babu, Excelan\n         Lawrence Besaw,\
    \ Hewlett-Packard\n         Jeffrey D. Case, University of Tennessee at Knoxville\n\
    \         James R. Davin, Proteon\n         Mark S. Fedor, NYSERNet\n        \
    \ Robb Foster, BBN\n         Phill Gross, The MITRE Corporation\n         Bent\
    \ Torp Jensen, Convergent Technology\n         Lee Labarre, The MITRE Corporation\n\
    \         Dan Lynch, Advanced Computing Environments\n         Keith McCloghrie,\
    \ The Wollongong Group\n         Dave Mackie, 3Com/Bridge\n         Craig Partridge,\
    \ BBN (chair)\n         Jim Robertson, 3Com/Bridge\n         Marshall T. Rose,\
    \ The Wollongong Group\n         Greg Satz, cisco\n         Martin Lee Schoffstall,\
    \ Rensselaer Polytechnic Institute\n         Lou Steinberg, IBM\n         Dean\
    \ Throop, Data General\n         Unni Warrier, Unisys\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1] Information processing systems - Open Systems Interconnection,\n\
    \       \"Specification of Abstract Syntax Notation One (ASN.1)\",\n       International\
    \ Organization for Standardization, International\n       Standard 8824, December\
    \ 1987.\n   [2] McCloghrie K., and M. Rose, \"Management Information Base for\n\
    \       Network Management of TCP/IP-based Internets\", RFC 1156,\n       Performance\
    \ Systems International and Hughes LAN Systems, May\n       1990.\n   [3] Case,\
    \ J., M. Fedor, M. Schoffstall, and J. Davin, The Simple\n       Network Management\
    \ Protocol\", RFC 1157, University of Tennessee\n       at Knoxville, Performance\
    \ Systems International, Performance\n       Systems International, and the MIT\
    \ Laboratory for Computer\n       Science, May 1990.\n   [4] LaBarre, L., \"Structure\
    \ and Identification of Management\n       Information for the Internet\", Internet\
    \ Engineering Task Force\n       working note, Network Information Center, SRI\
    \ International,\n       Menlo Park, California, April 1988.\n   [5] Cerf, V.,\
    \ \"IAB Recommendations for the Development of Internet\n       Network Management\
    \ Standards\", RFC 1052, IAB, April 1988.\n   [6] Cerf, V., \"Report of the Second\
    \ Ad Hoc Network Management Review\n       Group\", RFC 1109, IAB, August 1989.\n\
    \   [7] Information processing systems - Open Systems Interconnection,\n     \
    \  \"Specification of Basic Encoding Rules for Abstract Notation One\n       (ASN.1)\"\
    , International Organization for Standardization,\n       International Standard\
    \ 8825, December 1987.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marshall T. Rose\n   PSI, Inc.\n   PSI California Office\n\
    \   P.O. Box 391776\n   Mountain View, CA 94039\n   Phone: (415) 961-3380\n  \
    \ EMail: mrose@PSI.COM\n   Keith McCloghrie\n   The Wollongong Group\n   1129\
    \ San Antonio Road\n   Palo Alto, CA 04303\n   Phone: (415) 962-7160\n   EMail:\
    \ sytek!kzm@HPLABS.HP.COM\n"
