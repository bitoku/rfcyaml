- contents:
  - '   Simplified Local Internet Number Resource Management with the RPKI

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Resource Public Key Infrastructure (RPKI) is a global\n   authorization
    infrastructure that allows the holder of Internet\n   Number Resources (INRs)
    to make verifiable statements about those\n   resources.  Network operators, e.g.,
    Internet Service Providers\n   (ISPs), can use the RPKI to validate BGP route
    origin assertions.\n   ISPs can also use the RPKI to validate the path of a BGP
    route.\n   However, ISPs may want to establish a local view of exceptions to the\n
    \  RPKI data in the form of local filters and additions.  The mechanisms\n   described
    in this document provide a simple way to enable INR holders\n   to establish a
    local, customized view of the RPKI, overriding global\n   RPKI repository data
    as needed.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8416.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n   2.
    RP with SLURM ...................................................4\n   3. SLURM
    Files and Mechanisms ......................................5\n      3.1. Use of
    JSON ................................................5\n      3.2. SLURM File
    Overview ........................................5\n      3.3. Validation Output
    Filters ..................................6\n           3.3.1. Validated ROA Prefix
    Filters ........................6\n           3.3.2. BGPsec Assertion Filters
    ............................7\n      3.4. Locally Added Assertions ...................................9\n
    \          3.4.1. ROA Prefix Assertions ...............................9\n           3.4.2.
    BGPsec Assertions ..................................10\n      3.5. Example of
    a SLURM File with Filters and Assertions .......11\n   4. SLURM File Configuration
    .......................................13\n      4.1. SLURM File Atomicity ......................................13\n
    \     4.2. Multiple SLURM Files ......................................13\n   5.
    IANA Considerations ............................................14\n   6. Security
    Considerations ........................................14\n   7. References .....................................................14\n
    \     7.1. Normative References ......................................14\n      7.2.
    Informative References ....................................16\n   Acknowledgments
    ...................................................17\n   Authors' Addresses ................................................17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Resource Public Key Infrastructure (RPKI) is a global\n
    \  authorization infrastructure that allows the holder of Internet\n   Number
    Resources (INRs) to make verifiable statements about those\n   resources.  For
    example, the holder of a block of IP(v4 or v6)\n   addresses can issue a Route
    Origin Authorization (ROA) [RFC6482] to\n   authorize an Autonomous System (AS)
    to originate routes for that\n   block.  Internet Service Providers (ISPs) can
    then use the RPKI to\n   validate BGP routes.  (Validation of the origin of a
    route is\n   described in [RFC6811], and validation of the path of a route is\n
    \  described in [RFC8205].)\n   However, an RPKI Relying Party (RP) may want to
    override some of the\n   information expressed via configured Trust Anchors (TAs)
    and the\n   certificates downloaded from the RPKI repository system.  For\n   instance,
    [RFC6491] recommends the creation of ROAs that would\n   invalidate public routes
    for reserved and unallocated address space,\n   yet some ISPs might like to use
    BGP and the RPKI with private address\n   space (see [RFC1918], [RFC4193], and
    [RFC6598]) or private AS numbers\n   (see [RFC1930] and [RFC6996]).  Local use
    of private address space\n   and/or AS numbers is consistent with the RFCs cited
    above, but such\n   use cannot be verified by the global RPKI.  This motivates
    creation\n   of mechanisms that enable a network operator to publish, at its\n
    \  discretion, an exception to the RPKI in the form of filters and\n   additions
    (for its own use and that of its customers).  Additionally,\n   a network operator
    might wish to make use of a local override\n   capability to protect routes from
    adverse actions [RFC8211], until\n   the results of such actions have been addressed.
    \ The mechanisms\n   developed to provide this capability to network operators
    are hereby\n   called \"Simplified Local Internet Number Resource Management with
    the\n   RPKI (SLURM)\".\n   SLURM allows an operator to create a local view of
    the global RPKI by\n   generating sets of assertions.  For origin validation [RFC6811],
    an\n   assertion is a tuple of {IP prefix, prefix length, maximum length,\n   Autonomous
    System Number (ASN)} as used by the RPKI-Router protocol,\n   version 0 [RFC6810]
    and version 1 [RFC8210].  For BGPsec [RFC8205],\n   an assertion is a tuple of
    {ASN, subject key identifier, router\n   public key} as used by version 1 of the
    RPKI-Router protocol.  (For\n   the remainder of this document, these assertions
    are called \"ROA\n   Prefix Assertions\" and \"BGPsec Assertions\", respectively.)\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  RP with SLURM\n   SLURM provides a simple way to enable an RP to establish
    a local,\n   customized view of the RPKI, overriding RPKI repository data if\n
    \  needed.  To that end, an RP with SLURM filters out (i.e., removes\n   from
    consideration for routing decisions) any assertions in the RPKI\n   that are overridden
    by local ROA Prefix Assertions and BGPsec\n   Assertions.\n   In general, the
    primary output of an RP is the data it sends to\n   routers over the RPKI-Router
    protocol [RFC8210].  The RPKI-Router\n   protocol enables routers to query an
    RP for all assertions it knows\n   about (Reset Query) or for an update of only
    the changes in\n   assertions (Serial Query).  The mechanisms specified in this
    document\n   are to be applied to the result set for a Reset Query and to both
    the\n   old and new sets that are compared for a Serial Query.  RP software\n
    \  may modify other forms of output in comparable ways, but that is\n   outside
    the scope of this document.\n   +--------------+   +---------------------------+
    \  +------------+\n   |              |   |                           |   |            |\n
    \  | Repositories +--->Local cache of RPKI objects+---> Validation |\n   |              |
    \  |                           |   |            |\n   +--------------+   +---------------------------+
    \  +-----+------+\n                                                            |\n
    \         +-------------------------------------------------+\n          |\n   +------v-------+
    \  +------------+   +-----------+   +-------------+\n   |              |   |            |
    \  |           |   |             |\n   |    SLURM     +--->   SLURM    +--->RPKI-Router+--->
    BGP Speakers|\n   |   Filters    |   | Assertions |   | Protocol  |   |             |\n
    \  +--------------+   +------------+   +-----------+   +-------------+\n                Figure
    1: SLURM's Position in the RP Stack\n"
  title: 2.  RP with SLURM
- contents:
  - '3.  SLURM Files and Mechanisms

    '
  - contents:
    - "3.1.  Use of JSON\n   SLURM filters and assertions are specified in JSON format
      [RFC8259].\n   JSON members that are not defined here MUST NOT be used in SLURM\n
      \  files.  An RP MUST consider any deviations from the specifications to\n   be
      errors.  Future additions to the specifications in this document\n   MUST use
      an incremented value for the \"slurmVersion\" member.\n"
    title: 3.1.  Use of JSON
  - contents:
    - "3.2.  SLURM File Overview\n   A SLURM file consists of a single JSON object
      containing the\n   following members:\n   o  A \"slurmVersion\" member that
      MUST be set to 1, encoded as a number\n   o  A \"validationOutputFilters\" member
      (Section 3.3), whose value is\n      an object.  The object MUST contain exactly
      two members:\n      *  A \"prefixFilters\" member, whose value is described
      in\n         Section 3.3.1.\n      *  A \"bgpsecFilters\" member, whose value
      is described in\n         Section 3.3.2.\n   o  A \"locallyAddedAssertions\"
      member (Section 3.4), whose value is an\n      object.  The object MUST contain
      exactly two members:\n      *  A \"prefixAssertions\" member, whose value is
      described in\n         Section 3.4.1.\n      *  A \"bgpsecAssertions\" member,
      whose value is described in\n         Section 3.4.2.\n   In the envisioned typical
      use case, an RP uses both Validation Output\n   Filters and Locally Added Assertions.
      \ In this case, the resulting\n   assertions MUST be the same as if output filtering
      were performed\n   before locally adding assertions; that is, Locally Added
      Assertions\n   MUST NOT be removed by output filtering.\n   The following JSON
      structure with JSON members represents a SLURM\n   file that has no filters
      or assertions:\n   {\n     \"slurmVersion\": 1,\n     \"validationOutputFilters\":
      {\n       \"prefixFilters\": [],\n       \"bgpsecFilters\": []\n     },\n     \"locallyAddedAssertions\":
      {\n       \"prefixAssertions\": [],\n       \"bgpsecAssertions\": []\n     }\n
      \  }\n                        Figure 2: Empty SLURM File\n"
    title: 3.2.  SLURM File Overview
  - contents:
    - '3.3.  Validation Output Filters

      '
    - contents:
      - "3.3.1.  Validated ROA Prefix Filters\n   The RP can configure zero or more
        Validated ROA Prefix Filters\n   (\"Prefix Filters\" for short).  Each Prefix
        Filter can contain either\n   an IPv4 or IPv6 prefix and/or an ASN.  It is
        RECOMMENDED that an\n   explanatory comment is included with each Prefix Filter
        so that it\n   can be shown to users of the RP software.\n   The above is
        expressed as a value of the \"prefixFilters\" member, as\n   an array of zero
        or more objects.  Each object MUST contain either 1)\n   one of the following
        members or 2) one of each of the following\n   members.\n   o  A \"prefix\"
        member, whose value is a string representing either an\n      IPv4 prefix
        (see Section 3.1 of [RFC4632]) or an IPv6 prefix (see\n      [RFC5952]).\n
        \  o  An \"asn\" member, whose value is a number.\n   In addition, each object
        MAY contain one optional \"comment\" member,\n   whose value is a string.\n
        \  The following example JSON structure represents a \"prefixFilters\"\n   member
        with an array of example objects for each use case listed\n   above:\n           \"prefixFilters\":
        [\n             {\n               \"prefix\": \"192.0.2.0/24\",\n               \"comment\":
        \"All VRPs encompassed by prefix\"\n             },\n             {\n               \"asn\":
        64496,\n               \"comment\": \"All VRPs matching ASN\"\n             },\n
        \            {\n               \"prefix\": \"198.51.100.0/24\",\n               \"asn\":
        64497,\n               \"comment\": \"All VRPs encompassed by prefix, matching
        ASN\"\n             }\n           ]\n                    Figure 3: \"prefixFilters\"
        Examples\n   Any Validated ROA Payload (VRP) [RFC6811] that matches any configured\n
        \  Prefix Filter MUST be removed from the RP's output.\n   A VRP is considered
        to match with a Prefix Filter if one of the\n   following cases applies:\n
        \  1.  If the Prefix Filter only contains an IPv4 or IPv6 prefix, the\n       VRP
        is considered to match the filter if the VRP prefix is equal\n       to or
        covered by the Prefix Filter prefix.\n   2.  If the Prefix Filter only contains
        an ASN, the VRP is considered\n       to match the filter if the VRP ASN matches
        the Prefix Filter ASN.\n   3.  If the Prefix Filter contains both an IPv4
        or IPv6 prefix and an\n       ASN, the VRP is considered to match if the VRP
        prefix is equal to\n       or covered by the Prefix Filter prefix and the
        VRP ASN matches\n       the Prefix Filter ASN.\n"
      title: 3.3.1.  Validated ROA Prefix Filters
    - contents:
      - "3.3.2.  BGPsec Assertion Filters\n   The RP can configure zero or more BGPsec
        Assertion Filters (\"BGPsec\n   Filters\" for short).  Each BGPsec Filter
        can contain an ASN and/or\n   the Base64 [RFC4648] encoding of a Router Subject
        Key Identifier\n   (SKI), as described in [RFC8209] and [RFC6487].  It is
        RECOMMENDED\n   that an explanatory comment is also included with each BGPsec
        Filter,\n   so that it can be shown to users of the RP software.\n   The above
        is expressed as a value of the \"bgpsecFilters\" member, as\n   an array of
        zero or more objects.  Each object MUST contain one of\n   either, or one
        each of both following members:\n   o  An \"asn\" member, whose value is a
        number\n   o  An \"SKI\" member, whose value is the Base64 encoding without\n
        \     trailing '=' (Section 5 of [RFC4648]) of the certificate's Subject\n
        \     Key Identifier as described in Section 4.8.2 of [RFC6487].  (This\n
        \     is the value of the ASN.1 OCTET STRING without the ASN.1 tag or\n      length
        fields.)\n   In addition, each object MAY contain one optional \"comment\"
        member,\n   whose value is a string.\n   The following example JSON structure
        represents a \"bgpsecFilters\"\n   member with an array of example objects
        for each use case listed\n   above:\n           \"bgpsecFilters\": [\n             {\n
        \              \"asn\": 64496,\n               \"comment\": \"All keys for
        ASN\"\n             },\n             {\n               \"SKI\": \"<Base 64
        of some SKI>\",\n               \"comment\": \"Key matching Router SKI\"\n
        \            },\n             {\n               \"asn\": 64497,\n               \"SKI\":
        \"<Base 64 of some SKI>\",\n               \"comment\": \"Key for ASN 64497
        matching Router SKI\"\n             }\n           ]\n                    Figure
        4: \"bgpsecFilters\" Examples\n   Any BGPsec Assertion that matches any configured
        BGPsec Filter MUST\n   be removed from the RP's output.  A BGPsec Assertion
        is considered to\n   match with a BGPsec Filter if one of the following cases
        applies:\n   1.  If the BGPsec Filter only contains an ASN, a BGPsec Assertion
        is\n       considered to match if the Assertion ASN matches the Filter ASN.\n
        \  2.  If the BGPsec Filter only contains an SKI, a BGPsec Assertion is\n
        \      considered to match if the Assertion Router SKI matches the\n       Filter
        SKI.\n   3.  If the BGPsec Filter contains both an ASN and a Router SKI, then\n
        \      a BGPsec Assertion is considered to match if both the Assertion\n       ASN
        matches the Filter ASN and the Assertion Router SKI matches\n       the Filter
        SKI.\n"
      title: 3.3.2.  BGPsec Assertion Filters
    title: 3.3.  Validation Output Filters
  - contents:
    - '3.4.  Locally Added Assertions

      '
    - contents:
      - "3.4.1.  ROA Prefix Assertions\n   Each RP is locally configured with a (possibly
        empty) array of ROA\n   Prefix Assertions (\"Prefix Assertions\" for short).
        \ Each ROA Prefix\n   Assertion MUST contain an IPv4 or IPv6 prefix and an
        ASN.  It MAY\n   include a value for the maximum length.  It is RECOMMENDED
        that an\n   explanatory comment is also included with each so that it can
        be\n   shown to users of the RP software.\n   The above is expressed as a
        value of the \"prefixAssertions\" member,\n   as an array of zero or more
        objects.  Each object MUST contain one of\n   each of the following members:\n
        \  o  A \"prefix\" member, whose value is a string representing either an\n
        \     IPv4 prefix (see Section 3.1 of [RFC4632]) or an IPv6 prefix (see\n
        \     [RFC5952]).\n   o  An \"asn\" member, whose value is a number.\n   In
        addition, each object MAY contain one of each of the following\n   members:\n
        \  o  A \"maxPrefixLength\" member, whose value is a number.\n   o  A \"comment\"
        member, whose value is a string.\n   The following example JSON structure
        represents a \"prefixAssertions\"\n   member with an array of example objects
        for each use case listed\n   above:\n     \"prefixAssertions\": [\n       {\n
        \        \"asn\": 64496,\n         \"prefix\": \"198.51.100.0/24\",\n         \"comment\":
        \"My other important route\"\n       },\n       {\n         \"asn\": 64496,\n
        \        \"prefix\": \"2001:DB8::/32\",\n         \"maxPrefixLength\": 48,\n
        \        \"comment\": \"My other important de-aggregated routes\"\n       }\n
        \    ]\n                   Figure 5: \"prefixAssertions\" Examples\n   Note
        that the combination of the prefix, ASN, and optional maximum\n   length describes
        a VRP as described in [RFC6811].  The RP MUST add\n   all Prefix Assertions
        found this way to the VRP found through RPKI\n   validation and ensure that
        it sends the complete set of Protocol Data\n   Units (PDUs), excluding duplicates
        when using the RPKI-Router\n   protocol (see Sections 5.6 and 5.7 of [RFC8210]).\n"
      title: 3.4.1.  ROA Prefix Assertions
    - contents:
      - "3.4.2.  BGPsec Assertions\n   Each RP is locally configured with a (possibly
        empty) array of BGPsec\n   Assertions.  Each BGPsec Assertion MUST contain
        an AS number, a\n   Router SKI, and the router public key.  It is RECOMMENDED
        that an\n   explanatory comment is also included so that it can be shown to
        users\n   of the RP software.\n   The above is expressed as a value of the
        \"bgpsecAssertions\" member,\n   as an array of zero or more objects.  Each
        object MUST contain one\n   each of all of the following members:\n   o  An
        \"asn\" member, whose value is a number.\n   o  An \"SKI\" member, whose value
        is the Base64 encoding without\n      trailing '=' (Section 5 of [RFC4648])
        of the certificate's Subject\n      Key Identifier as described in Section
        4.8.2 of [RFC6487] (This is\n      the value of the ASN.1 OCTET STRING without
        the ASN.1 tag or\n      length fields.)\n   o  A \"routerPublicKey\" member,
        whose value is the Base64 encoding\n      without trailing '=' (Section 5
        of [RFC4648]) of the equivalent to\n      the subjectPublicKeyInfo value of
        the router certificate's public\n      key, as described in [RFC8208].  This
        is the full ASN.1 DER\n      encoding of the subjectPublicKeyInfo, including
        the ASN.1 tag and\n      length values of the subjectPublicKeyInfo SEQUENCE.\n
        \  The following example JSON structure represents a \"bgpsecAssertions\"\n
        \  member with one object as described above:\n     \"bgpsecAssertions\":
        [\n       {\n         \"asn\": 64496,\n         \"SKI\": \"<some base64 SKI>\",\n
        \        \"routerPublicKey\": \"<some base64 public key>\",\n         \"comment\":
        \"My known key for my important ASN\"\n       }\n     ]\n                   Figure
        6: \"bgpsecAssertions\" Examples\n   Note that a \"bgpsecAssertions\" member
        matches the syntax of the\n   Router Key PDU described in Section 5.10 of
        [RFC8210].  Relying\n   Parties MUST add any \"bgpsecAssertions\" member thus
        found to the set\n   of Router Key PDUs, excluding duplicates, when using
        the RPKI-Router\n   protocol [RFC8210].\n"
      title: 3.4.2.  BGPsec Assertions
    title: 3.4.  Locally Added Assertions
  - contents:
    - "3.5.  Example of a SLURM File with Filters and Assertions\n   The following
      JSON structure represents an example of a SLURM file\n   that uses all the elements
      described in the previous sections:\n     {\n       \"slurmVersion\": 1,\n       \"validationOutputFilters\":
      {\n         \"prefixFilters\": [\n           {\n             \"prefix\": \"192.0.2.0/24\",\n
      \            \"comment\": \"All VRPs encompassed by prefix\"\n           },\n
      \          {\n             \"asn\": 64496,\n             \"comment\": \"All
      VRPs matching ASN\"\n           },\n           {\n             \"prefix\": \"198.51.100.0/24\",\n
      \            \"asn\": 64497,\n             \"comment\": \"All VRPs encompassed
      by prefix, matching ASN\"\n           }\n         ],\n         \"bgpsecFilters\":
      [\n           {\n             \"asn\": 64496,\n             \"comment\": \"All
      keys for ASN\"\n           },\n           {\n             \"SKI\": \"Zm9v\",\n
      \            \"comment\": \"Key matching Router SKI\"\n           },\n           {\n
      \            \"asn\": 64497,\n             \"SKI\": \"YmFy\",\n             \"comment\":
      \"Key for ASN 64497 matching Router SKI\"\n           }\n         ]\n       },\n
      \      \"locallyAddedAssertions\": {\n         \"prefixAssertions\": [\n           {\n
      \            \"asn\": 64496,\n             \"prefix\": \"198.51.100.0/24\",\n
      \            \"comment\": \"My other important route\"\n           },\n           {\n
      \            \"asn\": 64496,\n             \"prefix\": \"2001:DB8::/32\",\n
      \            \"maxPrefixLength\": 48,\n             \"comment\": \"My other
      important de-aggregated routes\"\n           }\n         ],\n         \"bgpsecAssertions\":
      [\n           {\n             \"asn\": 64496,\n             \"comment\" : \"My
      known key for my important ASN\",\n             \"SKI\": \"<some base64 SKI>\",\n
      \            \"routerPublicKey\": \"<some base64 public key>\"\n           }\n
      \        ]\n       }\n     }\n                   Figure 7: Example of Full SLURM
      File\n"
    title: 3.5.  Example of a SLURM File with Filters and Assertions
  title: 3.  SLURM Files and Mechanisms
- contents:
  - '4.  SLURM File Configuration

    '
  - contents:
    - "4.1.  SLURM File Atomicity\n   To ensure local consistency, the effect of SLURM
      MUST be atomic.\n   That is, the output of the RP either MUST be the same as
      if a SLURM\n   file were not used or MUST reflect the entire SLURM configuration.\n
      \  For an example of why this is required, consider the case of two\n   local
      routes for the same prefix but different origin ASNs.  Both\n   routes are configured
      with Locally Added Assertions.  If neither\n   addition occurs, then both routes
      could be in the NotFound state\n   [RFC6811].  If both additions occur, then
      both routes would be in the\n   Valid state.  However, if one addition occurs
      and the other does not,\n   then one could be Invalid while the other is Valid.\n"
    title: 4.1.  SLURM File Atomicity
  - contents:
    - "4.2.  Multiple SLURM Files\n   An implementation MAY support the concurrent
      use of multiple SLURM\n   files.  In this case, the resulting inputs to Validation
      Output\n   Filters and Locally Added Assertions are the respective unions of
      the\n   inputs from each file.  The envisioned typical use case for multiple\n
      \  files is when the files have distinct scopes.  For instance,\n   operators
      of two distinct networks may resort to one RP system to\n   frame routing decisions.
      \ As such, they probably deliver SLURM files\n   to this RP independently.  Before
      an RP configures SLURM files from\n   different sources, it MUST make sure there
      is no internal conflict\n   among the INR assertions in these SLURM files.  To
      do so, the RP\n   SHOULD check the entries of each SLURM file with regard to
      overlaps\n   of the INR assertions and report errors to the sources that created\n
      \  the SLURM files in question.  The RP gets multiple SLURM files as a\n   set,
      and the whole set MUST be rejected in case of any overlaps among\n   the SLURM
      files.\n   If a problem is detected with the INR assertions in these SLURM\n
      \  files, the RP MUST NOT use them and SHOULD issue a warning as error\n   report
      in the following cases:\n   1.  There may be conflicting changes to ROA Prefix
      Assertions if an\n       IP address X and distinct SLURM files Y and Z exist
      such that X\n       is contained by any prefix in any \"prefixAssertions\" or\n
      \      \"prefixFilters\" in file Y and X is contained by any prefix in any\n
      \      \"prefixAssertions\" or \"prefixFilters\" in file Z.\n   2.  There may
      be conflicting changes to BGPsec Assertions if an ASN X\n       and distinct
      SLURM files Y and Z exist such that X is used in any\n       \"bgpsecAssertions\"
      or \"bgpsecFilters\" in file Y and X is used in\n       any \"bgpsecAssertions\"
      or \"bgpsecFilters\" in file Z.\n"
    title: 4.2.  Multiple SLURM Files
  title: 4.  SLURM File Configuration
- contents:
  - "5.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The mechanisms described in this document provide
    a network operator\n   with additional ways to control use of RPKI data while
    preserving\n   autonomy in address space and ASN management.  These mechanisms
    are\n   only applied locally; they do not influence how other network\n   operators
    interpret RPKI data.  Nonetheless, care should be taken in\n   how these mechanisms
    are employed.  Note that it also is possible to\n   use SLURM to (locally) manipulate
    assertions about non-private INRs,\n   e.g., allocated address space that is globally
    routed.  For example,\n   a SLURM file may be used to override RPKI data that
    a network\n   operator believes has been corrupted by an adverse action.  Network\n
    \  operators who elect to use SLURM in this fashion should use extreme\n   caution.\n
    \  The goal of the mechanisms described in this document is to enable an\n   RP
    to create its own view of the RPKI, which is intrinsically a\n   security function.
    \ An RP using a SLURM file is trusting the\n   assertions made in that file.  Errors
    in the SLURM file used by an RP\n   can undermine the security offered to that
    RP by the RPKI.  A SLURM\n   file could declare as invalid ROAs that would otherwise
    be valid, and\n   vice versa.  As a result, an RP MUST carefully consider the
    security\n   implications of the SLURM file being used, especially if the file
    is\n   provided by a third party.\n   Additionally, each RP using SLURM MUST ensure
    the authenticity and\n   integrity of any SLURM file that it uses.  Initially,
    the SLURM file\n   may be preconfigured out of band, but if the RP updates its
    SLURM\n   file over the network, it MUST verify the authenticity and integrity\n
    \  of the updated SLURM file.  The mechanism to update the SLURM file to\n   guarantee
    authenticity and integrity is out of the scope of this\n   document.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4632]  Fuller, V. and T. Li, \"Classless Inter-domain Routing\n              (CIDR):
      The Internet Address Assignment and Aggregation\n              Plan\", BCP 122,
      RFC 4632, DOI 10.17487/RFC4632, August\n              2006, <https://www.rfc-editor.org/info/rfc4632>.\n
      \  [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address
      Text Representation\", RFC 5952,\n              DOI 10.17487/RFC5952, August
      2010,\n              <https://www.rfc-editor.org/info/rfc5952>.\n   [RFC6487]
      \ Huston, G., Michaelson, G., and R. Loomans, \"A Profile for\n              X.509
      PKIX Resource Certificates\", RFC 6487,\n              DOI 10.17487/RFC6487,
      February 2012,\n              <https://www.rfc-editor.org/info/rfc6487>.\n   [RFC6811]
      \ Mohapatra, P., Scudder, J., Ward, D., Bush, R., and R.\n              Austein,
      \"BGP Prefix Origin Validation\", RFC 6811,\n              DOI 10.17487/RFC6811,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6811>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8205]  Lepinski, M., Ed.
      and K. Sriram, Ed., \"BGPsec Protocol\n              Specification\", RFC 8205,
      DOI 10.17487/RFC8205, September\n              2017, <https://www.rfc-editor.org/info/rfc8205>.\n
      \  [RFC8208]  Turner, S. and O. Borchert, \"BGPsec Algorithms, Key\n              Formats,
      and Signature Formats\", RFC 8208,\n              DOI 10.17487/RFC8208, September
      2017,\n              <https://www.rfc-editor.org/info/rfc8208>.\n   [RFC8209]
      \ Reynolds, M., Turner, S., and S. Kent, \"A Profile for\n              BGPsec
      Router Certificates, Certificate Revocation Lists,\n              and Certification
      Requests\", RFC 8209,\n              DOI 10.17487/RFC8209, September 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8209>.\n   [RFC8259]  Bray,
      T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8259>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg,
      D., de Groot, G.,\n              and E. Lear, \"Address Allocation for Private
      Internets\",\n              BCP 5, RFC 1918, DOI 10.17487/RFC1918, February
      1996,\n              <https://www.rfc-editor.org/info/rfc1918>.\n   [RFC1930]
      \ Hawkinson, J. and T. Bates, \"Guidelines for creation,\n              selection,
      and registration of an Autonomous System (AS)\",\n              BCP 6, RFC 1930,
      DOI 10.17487/RFC1930, March 1996,\n              <https://www.rfc-editor.org/info/rfc1930>.\n
      \  [RFC4193]  Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n              Addresses\",
      RFC 4193, DOI 10.17487/RFC4193, October 2005,\n              <https://www.rfc-editor.org/info/rfc4193>.\n
      \  [RFC6482]  Lepinski, M., Kent, S., and D. Kong, \"A Profile for Route\n              Origin
      Authorizations (ROAs)\", RFC 6482,\n              DOI 10.17487/RFC6482, February
      2012,\n              <https://www.rfc-editor.org/info/rfc6482>.\n   [RFC6491]
      \ Manderson, T., Vegoda, L., and S. Kent, \"Resource Public\n              Key
      Infrastructure (RPKI) Objects Issued by IANA\",\n              RFC 6491, DOI
      10.17487/RFC6491, February 2012,\n              <https://www.rfc-editor.org/info/rfc6491>.\n
      \  [RFC6598]  Weil, J., Kuarsingh, V., Donley, C., Liljenstolpe, C., and\n              M.
      Azinger, \"IANA-Reserved IPv4 Prefix for Shared Address\n              Space\",
      BCP 153, RFC 6598, DOI 10.17487/RFC6598, April\n              2012, <https://www.rfc-editor.org/info/rfc6598>.\n
      \  [RFC6810]  Bush, R. and R. Austein, \"The Resource Public Key\n              Infrastructure
      (RPKI) to Router Protocol\", RFC 6810,\n              DOI 10.17487/RFC6810,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6810>.\n   [RFC6996]
      \ Mitchell, J., \"Autonomous System (AS) Reservation for\n              Private
      Use\", BCP 6, RFC 6996, DOI 10.17487/RFC6996, July\n              2013, <https://www.rfc-editor.org/info/rfc6996>.\n
      \  [RFC8210]  Bush, R. and R. Austein, \"The Resource Public Key\n              Infrastructure
      (RPKI) to Router Protocol, Version 1\",\n              RFC 8210, DOI 10.17487/RFC8210,
      September 2017,\n              <https://www.rfc-editor.org/info/rfc8210>.\n
      \  [RFC8211]  Kent, S. and D. Ma, \"Adverse Actions by a Certification\n              Authority
      (CA) or Repository Manager in the Resource\n              Public Key Infrastructure
      (RPKI)\", RFC 8211,\n              DOI 10.17487/RFC8211, September 2017,\n              <https://www.rfc-editor.org/info/rfc8211>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   The authors would like to thank Stephen Kent for his guidance
    and\n   detailed reviews of this document.  The authors would also like to\n   thank
    Richard Hansen for his careful reviews and Hui Zou and Chunlin\n   An for their
    editorial assistance.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Di Ma\n   ZDNS\n   4 South 4th St. Zhongguancun\n   Haidian,
    Beijing  100190\n   China\n   Email: madi@zdns.cn\n   David Mandelberg\n   Unaffiliated\n
    \  Email: david@mandelberg.org\n   URI:   https://david.mandelberg.org\n   Tim
    Bruijnzeels\n   NLnet Labs\n   Science Park 400\n   Amsterdam  1098 XH\n   The
    Netherlands\n   Email: tim@nlnetlabs.nl\n"
  title: Authors' Addresses
