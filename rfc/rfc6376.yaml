- title: __initial_text__
  contents:
  - '              DomainKeys Identified Mail (DKIM) Signatures

    '
- title: Abstract
  contents:
  - "Abstract\n   DomainKeys Identified Mail (DKIM) permits a person, role, or\n \
    \  organization that owns the signing domain to claim some\n   responsibility\
    \ for a message by associating the domain with the\n   message.  This can be an\
    \ author's organization, an operational relay,\n   or one of their agents.  DKIM\
    \ separates the question of the identity\n   of the Signer of the message from\
    \ the purported author of the\n   message.  Assertion of responsibility is validated\
    \ through a\n   cryptographic signature and by querying the Signer's domain directly\n\
    \   to retrieve the appropriate public key.  Message transit from author\n   to\
    \ recipient is through relays that typically make no substantive\n   change to\
    \ the message content and thus preserve the DKIM signature.\n   This memo obsoletes\
    \ RFC 4871 and RFC 5672.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6376.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  DKIM Architecture Documents  . . . . . . . . . .\
    \ . . . . .  5\n     1.2.  Signing Identity . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     1.3.  Scalability  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n     1.4.  Simple Key Management  . . . . . . . . . . . . . . . .\
    \ . .  6\n     1.5.  Data Integrity . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   2.  Terminology and Definitions  . . . . . . . . . . . . . . . . .\
    \  6\n     2.1.  Signers  . . . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     2.2.  Verifiers  . . . . . . . . . . . . . . . . . . . . . . . .  7\n  \
    \   2.3.  Identity . . . . . . . . . . . . . . . . . . . . . . . . .  7\n    \
    \ 2.4.  Identifier . . . . . . . . . . . . . . . . . . . . . . . .  7\n     2.5.\
    \  Signing Domain Identifier (SDID) . . . . . . . . . . . . .  7\n     2.6.  Agent\
    \ or User Identifier (AUID)  . . . . . . . . . . . . .  7\n     2.7.  Identity\
    \ Assessor  . . . . . . . . . . . . . . . . . . . .  7\n     2.8.  Whitespace\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  8\n     2.9.  Imported ABNF\
    \ Tokens . . . . . . . . . . . . . . . . . . .  8\n     2.10. Common ABNF Tokens\
    \ . . . . . . . . . . . . . . . . . . . .  9\n     2.11. DKIM-Quoted-Printable\
    \  . . . . . . . . . . . . . . . . . .  9\n   3.  Protocol Elements  . . . . .\
    \ . . . . . . . . . . . . . . . . . 10\n     3.1.  Selectors  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 10\n     3.2.  Tag=Value Lists  . . . . . .\
    \ . . . . . . . . . . . . . . . 12\n     3.3.  Signing and Verification Algorithms\
    \  . . . . . . . . . . . 13\n     3.4.  Canonicalization . . . . . . . . . . .\
    \ . . . . . . . . . . 14\n     3.5.  The DKIM-Signature Header Field  . . . .\
    \ . . . . . . . . . 18\n     3.6.  Key Management and Representation  . . . .\
    \ . . . . . . . . 26\n     3.7.  Computing the Message Hashes . . . . . . . .\
    \ . . . . . . . 29\n     3.8.  Input Requirements . . . . . . . . . . . . . .\
    \ . . . . . . 32\n     3.9.  Output Requirements  . . . . . . . . . . . . . .\
    \ . . . . . 32\n     3.10. Signing by Parent Domains  . . . . . . . . . . . .\
    \ . . . . 33\n     3.11. Relationship between SDID and AUID . . . . . . . . .\
    \ . . . 33\n   4.  Semantics of Multiple Signatures . . . . . . . . . . . . .\
    \ . . 34\n     4.1.  Example Scenarios  . . . . . . . . . . . . . . . . . . .\
    \ . 34\n     4.2.  Interpretation . . . . . . . . . . . . . . . . . . . . . .\
    \ 35\n   5.  Signer Actions . . . . . . . . . . . . . . . . . . . . . . . . 36\n\
    \     5.1.  Determine Whether the Email Should Be Signed and by\n           Whom\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n     5.2.  Select\
    \ a Private Key and Corresponding Selector\n           Information  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 37\n     5.3.  Normalize the Message to\
    \ Prevent Transport Conversions . . 37\n     5.4.  Determine the Header Fields\
    \ to Sign  . . . . . . . . . . . 38\n     5.5.  Compute the Message Hash and Signature\
    \ . . . . . . . . . . 43\n     5.6.  Insert the DKIM-Signature Header Field .\
    \ . . . . . . . . . 43\n   6.  Verifier Actions . . . . . . . . . . . . . . .\
    \ . . . . . . . . 43\n     6.1.  Extract Signatures from the Message  . . . .\
    \ . . . . . . . 44\n     6.2.  Communicate Verification Results . . . . . . .\
    \ . . . . . . 49\n     6.3.  Interpret Results/Apply Local Policy . . . . . .\
    \ . . . . . 50\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . .\
    \ . . . . 51\n     7.1.  Email Authentication Methods Registry  . . . . . . .\
    \ . . . 51\n     7.2.  DKIM-Signature Tag Specifications  . . . . . . . . . .\
    \ . . 51\n     7.3.  DKIM-Signature Query Method Registry . . . . . . . . . .\
    \ . 52\n     7.4.  DKIM-Signature Canonicalization Registry . . . . . . . . .\
    \ 52\n     7.5.  _domainkey DNS TXT Resource Record Tag Specifications  . . 53\n\
    \     7.6.  DKIM Key Type Registry . . . . . . . . . . . . . . . . . . 53\n  \
    \   7.7.  DKIM Hash Algorithms Registry  . . . . . . . . . . . . . . 54\n    \
    \ 7.8.  DKIM Service Types Registry  . . . . . . . . . . . . . . . 54\n     7.9.\
    \  DKIM Selector Flags Registry . . . . . . . . . . . . . . . 55\n     7.10. DKIM-Signature\
    \ Header Field  . . . . . . . . . . . . . . . 55\n   8.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 55\n     8.1.  ASCII Art Attacks  . .\
    \ . . . . . . . . . . . . . . . . . . 55\n     8.2.  Misuse of Body Length Limits\
    \ (\"l=\" Tag)  . . . . . . . . . 55\n     8.3.  Misappropriated Private Key \
    \ . . . . . . . . . . . . . . . 56\n     8.4.  Key Server Denial-of-Service Attacks\
    \ . . . . . . . . . . . 56\n     8.5.  Attacks against the DNS  . . . . . . .\
    \ . . . . . . . . . . 57\n     8.6.  Replay/Spam Attacks  . . . . . . . . . .\
    \ . . . . . . . . . 57\n     8.7.  Limits on Revoking Keys  . . . . . . . . .\
    \ . . . . . . . . 58\n     8.8.  Intentionally Malformed Key Records  . . . .\
    \ . . . . . . . 58\n     8.9.  Intentionally Malformed DKIM-Signature Header Fields\
    \ . . . 58\n     8.10. Information Leakage  . . . . . . . . . . . . . . . . .\
    \ . . 58\n     8.11. Remote Timing Attacks  . . . . . . . . . . . . . . . . .\
    \ . 59\n     8.12. Reordered Header Fields  . . . . . . . . . . . . . . . . .\
    \ 59\n     8.13. RSA Attacks  . . . . . . . . . . . . . . . . . . . . . . . 59\n\
    \     8.14. Inappropriate Signing by Parent Domains  . . . . . . . . . 59\n  \
    \   8.15. Attacks Involving Extra Header Fields  . . . . . . . . . . 60\n   9.\
    \  References . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n     9.1.\
    \  Normative References . . . . . . . . . . . . . . . . . . . 61\n     9.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 62\n   Appendix A.  Example of\
    \ Use (INFORMATIVE)  . . . . . . . . . . . . 64\n     A.1.  The User Composes\
    \ an Email . . . . . . . . . . . . . . . . 64\n     A.2.  The Email is Signed\
    \  . . . . . . . . . . . . . . . . . . . 65\n     A.3.  The Email Signature is\
    \ Verified  . . . . . . . . . . . . . 66\n   Appendix B.  Usage Examples (INFORMATIVE)\
    \  . . . . . . . . . . . . 67\n     B.1.  Alternate Submission Scenarios . . .\
    \ . . . . . . . . . . . 67\n     B.2.  Alternate Delivery Scenarios . . . . .\
    \ . . . . . . . . . . 69\n   Appendix C.  Creating a Public Key (INFORMATIVE)\
    \ . . . . . . . . . 71\n     C.1.  Compatibility with DomainKeys Key Records \
    \ . . . . . . . . 72\n     C.2.  RFC 4871 Compatibility . . . . . . . . . . .\
    \ . . . . . . . 73\n   Appendix D.  MUA Considerations (INFORMATIVE)  . . . .\
    \ . . . . . . 73\n   Appendix E.  Changes since RFC 4871  . . . . . . . . . .\
    \ . . . . . 73\n   Appendix F.  Acknowledgments . . . . . . . . . . . . . . .\
    \ . . . . 75\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   DomainKeys Identified Mail (DKIM) permits a person, role,\
    \ or\n   organization to claim some responsibility for a message by\n   associating\
    \ a domain name [RFC1034] with the message [RFC5322], which\n   they are authorized\
    \ to use.  This can be an author's organization, an\n   operational relay, or\
    \ one of their agents.  Assertion of\n   responsibility is validated through a\
    \ cryptographic signature and by\n   querying the Signer's domain directly to\
    \ retrieve the appropriate\n   public key.  Message transit from author to recipient\
    \ is through\n   relays that typically make no substantive change to the message\n\
    \   content and thus preserve the DKIM signature.  A message can contain\n   multiple\
    \ signatures, from the same or different organizations\n   involved with the message.\n\
    \   The approach taken by DKIM differs from previous approaches to\n   message\
    \ signing (e.g., Secure/Multipurpose Internet Mail Extensions\n   (S/MIME) [RFC5751],\
    \ OpenPGP [RFC4880]) in that:\n   o  the message signature is written as a message\
    \ header field so that\n      neither human recipients nor existing MUA (Mail\
    \ User Agent)\n      software is confused by signature-related content appearing\
    \ in the\n      message body;\n   o  there is no dependency on public- and private-key\
    \ pairs being\n      issued by well-known, trusted certificate authorities;\n\
    \   o  there is no dependency on the deployment of any new Internet\n      protocols\
    \ or services for public-key distribution or revocation;\n   o  signature verification\
    \ failure does not force rejection of the\n      message;\n   o  no attempt is\
    \ made to include encryption as part of the mechanism;\n      and\n   o  message\
    \ archiving is not a design goal.\n   DKIM:\n   o  is compatible with the existing\
    \ email infrastructure and\n      transparent to the fullest extent possible;\n\
    \   o  requires minimal new infrastructure;\n   o  can be implemented independently\
    \ of clients in order to reduce\n      deployment time;\n   o  can be deployed\
    \ incrementally; and\n   o  allows delegation of signing to third parties.\n"
- title: 1.1.  DKIM Architecture Documents
  contents:
  - "1.1.  DKIM Architecture Documents\n   Readers are advised to be familiar with\
    \ the material in [RFC4686],\n   [RFC5585], and [RFC5863], which provide the background\
    \ for the\n   development of DKIM, an overview of the service, and deployment\
    \ and\n   operations guidance and advice, respectively.\n"
- title: 1.2.  Signing Identity
  contents:
  - "1.2.  Signing Identity\n   DKIM separates the question of the identity of the\
    \ Signer of the\n   message from the purported author of the message.  In particular,\
    \ a\n   signature includes the identity of the Signer.  Verifiers can use the\n\
    \   signing information to decide how they want to process the message.\n   The\
    \ signing identity is included as part of the signature header\n   field.\n  \
    \    INFORMATIVE RATIONALE: The signing identity specified by a DKIM\n      signature\
    \ is not required to match an address in any particular\n      header field because\
    \ of the broad methods of interpretation by\n      recipient mail systems, including\
    \ MUAs.\n"
- title: 1.3.  Scalability
  contents:
  - "1.3.  Scalability\n   DKIM is designed to support the extreme scalability requirements\
    \ that\n   characterize the email identification problem.  There are many\n  \
    \ millions of domains and a much larger number of individual addresses.\n   DKIM\
    \ seeks to preserve the positive aspects of the current email\n   infrastructure,\
    \ such as the ability for anyone to communicate with\n   anyone else without introduction.\n"
- title: 1.4.  Simple Key Management
  contents:
  - "1.4.  Simple Key Management\n   DKIM differs from traditional hierarchical public-key\
    \ systems in that\n   no certificate authority infrastructure is required; the\
    \ Verifier\n   requests the public key from a repository in the domain of the\n\
    \   claimed Signer directly rather than from a third party.\n   The DNS is proposed\
    \ as the initial mechanism for the public keys.\n   Thus, DKIM currently depends\
    \ on DNS administration and the security\n   of the DNS system.  DKIM is designed\
    \ to be extensible to other key\n   fetching services as they become available.\n"
- title: 1.5.  Data Integrity
  contents:
  - "1.5.  Data Integrity\n   A DKIM signature associates the \"d=\" name with the\
    \ computed hash of\n   some or all of the message (see Section 3.7) in order to\
    \ prevent the\n   reuse of the signature with different messages.  Verifying the\n\
    \   signature asserts that the hashed content has not changed since it\n   was\
    \ signed and asserts nothing else about \"protecting\" the end-to-end\n   integrity\
    \ of the message.\n"
- title: 2.  Terminology and Definitions
  contents:
  - "2.  Terminology and Definitions\n   This section defines terms used in the rest\
    \ of the document.\n   DKIM is designed to operate within the Internet Mail service,\
    \ as\n   defined in [RFC5598].  Basic email terminology is taken from that\n \
    \  specification.\n   Syntax descriptions use Augmented BNF (ABNF) [RFC5234].\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\"\
    , and\n   \"OPTIONAL\" in this document are to be interpreted as described in\n\
    \   [RFC2119].  These words take their normative meanings only when they\n   are\
    \ presented in ALL UPPERCASE.\n"
- title: 2.1.  Signers
  contents:
  - "2.1.  Signers\n   Elements in the mail system that sign messages on behalf of\
    \ a domain\n   are referred to as Signers.  These may be MUAs (Mail User Agents),\n\
    \   MSAs (Mail Submission Agents), MTAs (Mail Transfer Agents), or other\n   agents\
    \ such as mailing list exploders.  In general, any Signer will\n   be involved\
    \ in the injection of a message into the message system in\n   some way.  The\
    \ key issue is that a message must be signed before it\n   leaves the administrative\
    \ domain of the Signer.\n"
- title: 2.2.  Verifiers
  contents:
  - "2.2.  Verifiers\n   Elements in the mail system that verify signatures are referred\
    \ to as\n   Verifiers.  These may be MTAs, Mail Delivery Agents (MDAs), or MUAs.\n\
    \   In most cases, it is expected that Verifiers will be close to an end\n   user\
    \ (reader) of the message or some consuming agent such as a\n   mailing list exploder.\n"
- title: 2.3.  Identity
  contents:
  - "2.3.  Identity\n   A person, role, or organization.  In the context of DKIM,\
    \ examples\n   include the author, the author's organization, an ISP along the\n\
    \   handling path, an independent trust assessment service, and a mailing\n  \
    \ list operator.\n"
- title: 2.4.  Identifier
  contents:
  - "2.4.  Identifier\n   A label that refers to an identity.\n"
- title: 2.5.  Signing Domain Identifier (SDID)
  contents:
  - "2.5.  Signing Domain Identifier (SDID)\n   A single domain name that is the mandatory\
    \ payload output of DKIM and\n   that refers to the identity claiming some responsibility\
    \ for the\n   message by signing it.  It is specified in Section 3.5.\n"
- title: 2.6.  Agent or User Identifier (AUID)
  contents:
  - "2.6.  Agent or User Identifier (AUID)\n   A single identifier that refers to\
    \ the agent or user on behalf of\n   whom the Signing Domain Identifier (SDID)\
    \ has taken responsibility.\n   The AUID comprises a domain name and an optional\
    \ <local-part>.  The\n   domain name is the same as that used for the SDID or\
    \ is a subdomain\n   of it.  For DKIM processing, the domain name portion of the\
    \ AUID has\n   only basic domain name semantics; any possible owner-specific\n\
    \   semantics are outside the scope of DKIM.  It is specified in\n   Section 3.5.\n\
    \   Note that acceptable values for the AUID may be constrained via a\n   flag\
    \ in the public-key record.  (See Section 3.6.1.)\n"
- title: 2.7.  Identity Assessor
  contents:
  - "2.7.  Identity Assessor\n   An element in the mail system that consumes DKIM's\
    \ payload, which is\n   the responsible Signing Domain Identifier (SDID).  The\
    \ Identity\n   Assessor is dedicated to the assessment of the delivered identifier.\n\
    \   Other DKIM (and non-DKIM) values can also be used by the Identity\n   Assessor\
    \ (if they are available) to provide a more general message\n   evaluation filtering\
    \ engine.  However, this additional activity is\n   outside the scope of this\
    \ specification.\n"
- title: 2.8.  Whitespace
  contents:
  - "2.8.  Whitespace\n   There are three forms of whitespace:\n   o  WSP represents\
    \ simple whitespace, i.e., a space or a tab character\n      (formal definition\
    \ in [RFC5234]).\n   o  LWSP is linear whitespace, defined as WSP plus CRLF (formal\n\
    \      definition in [RFC5234]).\n   o  FWS is folding whitespace.  It allows\
    \ multiple lines separated by\n      CRLF followed by at least one whitespace,\
    \ to be joined.\n   The formal ABNF for these are (WSP and LWSP are given for\
    \ information\n   only):\n   WSP =   SP / HTAB\n   LWSP =  *(WSP / CRLF WSP)\n\
    \   FWS =   [*WSP CRLF] 1*WSP\n   The definition of FWS is identical to that in\
    \ [RFC5322] except for\n   the exclusion of obs-FWS.\n"
- title: 2.9.  Imported ABNF Tokens
  contents:
  - "2.9.  Imported ABNF Tokens\n   The following tokens are imported from other RFCs\
    \ as noted.  Those\n   RFCs should be considered definitive.\n   The following\
    \ tokens are imported from [RFC5321]:\n   o  \"local-part\" (implementation warning:\
    \ this permits quoted strings)\n   o  \"sub-domain\"\n   The following tokens\
    \ are imported from [RFC5322]:\n   o  \"field-name\" (name of a header field)\n\
    \   o  \"dot-atom-text\" (in the local-part of an email address)\n   The following\
    \ tokens are imported from [RFC2045]:\n   o  \"qp-section\" (a single line of\
    \ quoted-printable-encoded text)\n   o  \"hex-octet\" (a quoted-printable encoded\
    \ octet)\n      INFORMATIVE NOTE: Be aware that the ABNF in [RFC2045] does not\n\
    \      obey the rules of [RFC5234] and must be interpreted accordingly,\n    \
    \  particularly as regards case folding.\n   Other tokens not defined herein are\
    \ imported from [RFC5234].  These\n   are intuitive primitives such as SP, HTAB,\
    \ WSP, ALPHA, DIGIT, CRLF,\n   etc.\n"
- title: 2.10.  Common ABNF Tokens
  contents:
  - "2.10.  Common ABNF Tokens\n   The following ABNF tokens are used elsewhere in\
    \ this document:\n   hyphenated-word =  ALPHA [ *(ALPHA / DIGIT / \"-\") (ALPHA\
    \ / DIGIT) ]\n   ALPHADIGITPS    =  (ALPHA / DIGIT / \"+\" / \"/\")\n   base64string\
    \    =  ALPHADIGITPS *([FWS] ALPHADIGITPS)\n                      [ [FWS] \"=\"\
    \ [ [FWS] \"=\" ] ]\n   hdr-name        =  field-name\n   qp-hdr-value    =  dkim-quoted-printable\
    \    ; with \"|\" encoded\n"
- title: 2.11.  DKIM-Quoted-Printable
  contents:
  - "2.11.  DKIM-Quoted-Printable\n   The DKIM-Quoted-Printable encoding syntax resembles\
    \ that described in\n   Quoted-Printable [RFC2045], Section 6.7: any character\
    \ MAY be encoded\n   as an \"=\" followed by two hexadecimal digits from the alphabet\n\
    \   \"0123456789ABCDEF\" (no lowercase characters permitted) representing\n  \
    \ the hexadecimal-encoded integer value of that character.  All control\n   characters\
    \ (those with values < %x20), 8-bit characters (values >\n   %x7F), and the characters\
    \ DEL (%x7F), SPACE (%x20), and semicolon\n   (\";\", %x3B) MUST be encoded. \
    \ Note that all whitespace, including\n   SPACE, CR, and LF characters, MUST be\
    \ encoded.  After encoding, FWS\n   MAY be added at arbitrary locations in order\
    \ to avoid excessively\n   long lines; such whitespace is NOT part of the value,\
    \ and MUST be\n   removed before decoding.  Use of characters not listed as \"\
    mail-safe\"\n   in [RFC2049] is NOT RECOMMENDED.\n   ABNF:\n   dkim-quoted-printable\
    \ =  *(FWS / hex-octet / dkim-safe-char)\n                               ; hex-octet\
    \ is from RFC2045\n   dkim-safe-char        =  %x21-3A / %x3C / %x3E-7E\n    \
    \                           ; '!' - ':', '<', '>' - '~'\n      INFORMATIVE NOTE:\
    \ DKIM-Quoted-Printable differs from Quoted-\n      Printable as defined in [RFC2045]\
    \ in several important ways:\n      1.  Whitespace in the input text, including\
    \ CR and LF, must be\n          encoded.  [RFC2045] does not require such encoding,\
    \ and does\n          not permit encoding of CR or LF characters that are part\
    \ of a\n          CRLF line break.\n      2.  Whitespace in the encoded text is\
    \ ignored.  This is to allow\n          tags encoded using DKIM-Quoted-Printable\
    \ to be wrapped as\n          needed.  In particular, [RFC2045] requires that\
    \ line breaks in\n          the input be represented as physical line breaks;\
    \ that is not\n          the case here.\n      3.  The \"soft line break\" syntax\
    \ (\"=\" as the last non-whitespace\n          character on the line) does not\
    \ apply.\n      4.  DKIM-Quoted-Printable does not require that encoded lines\
    \ be\n          no more than 76 characters long (although there may be other\n\
    \          requirements depending on the context in which the encoded\n      \
    \    text is being used).\n"
- title: 3.  Protocol Elements
  contents:
  - "3.  Protocol Elements\n   Protocol Elements are conceptual parts of the protocol\
    \ that are not\n   specific to either Signers or Verifiers.  The protocol descriptions\n\
    \   for Signers and Verifiers are described in later sections (\"Signer\n   Actions\"\
    \ (Section 5) and \"Verifier Actions\" (Section 6)).  NOTE: This\n   section must\
    \ be read in the context of those sections.\n"
- title: 3.1.  Selectors
  contents:
  - "3.1.  Selectors\n   To support multiple concurrent public keys per signing domain,\
    \ the\n   key namespace is subdivided using \"selectors\".  For example,\n   selectors\
    \ might indicate the names of office locations (e.g.,\n   \"sanfrancisco\", \"\
    coolumbeach\", and \"reykjavik\"), the signing date\n   (e.g., \"january2005\"\
    , \"february2005\", etc.), or even an individual\n   user.\n   Selectors are needed\
    \ to support some important use cases.  For\n   example:\n   o  Domains that want\
    \ to delegate signing capability for a specific\n      address for a given duration\
    \ to a partner, such as an advertising\n      provider or other outsourced function.\n\
    \   o  Domains that want to allow frequent travelers to send messages\n      locally\
    \ without the need to connect with a particular MSA.\n   o  \"Affinity\" domains\
    \ (e.g., college alumni associations) that\n      provide forwarding of incoming\
    \ mail, but that do not operate a\n      mail submission agent for outgoing mail.\n\
    \   Periods are allowed in selectors and are component separators.  When\n   keys\
    \ are retrieved from the DNS, periods in selectors define DNS\n   label boundaries\
    \ in a manner similar to the conventional use in\n   domain names.  Selector components\
    \ might be used to combine dates\n   with locations, for example, \"march2005.reykjavik\"\
    .  In a DNS\n   implementation, this can be used to allow delegation of a portion\
    \ of\n   the selector namespace.\n   ABNF:\n   selector =   sub-domain *( \".\"\
    \ sub-domain )\n   The number of public keys and corresponding selectors for each\
    \ domain\n   is determined by the domain owner.  Many domain owners will be\n\
    \   satisfied with just one selector, whereas administratively\n   distributed\
    \ organizations can choose to manage disparate selectors\n   and key pairs in\
    \ different regions or on different email servers.\n   Beyond administrative convenience,\
    \ selectors make it possible to\n   seamlessly replace public keys on a routine\
    \ basis.  If a domain\n   wishes to change from using a public key associated\
    \ with selector\n   \"january2005\" to a public key associated with selector\n\
    \   \"february2005\", it merely makes sure that both public keys are\n   advertised\
    \ in the public-key repository concurrently for the\n   transition period during\
    \ which email may be in transit prior to\n   verification.  At the start of the\
    \ transition period, the outbound\n   email servers are configured to sign with\
    \ the \"february2005\" private\n   key.  At the end of the transition period,\
    \ the \"january2005\" public\n   key is removed from the public-key repository.\n\
    \      INFORMATIVE NOTE: A key may also be revoked as described below.\n     \
    \ The distinction between revoking and removing a key selector\n      record is\
    \ subtle.  When phasing out keys as described above, a\n      signing domain would\
    \ probably simply remove the key record after\n      the transition period.  However,\
    \ a signing domain could elect to\n      revoke the key (but maintain the key\
    \ record) for a further period.\n      There is no defined semantic difference\
    \ between a revoked key and\n      a removed key.\n   While some domains may wish\
    \ to make selector values well-known,\n   others will want to take care not to\
    \ allocate selector names in a way\n   that allows harvesting of data by outside\
    \ parties.  For example, if\n   per-user keys are issued, the domain owner will\
    \ need to decide\n   whether to associate this selector directly with the name\
    \ of a\n   registered end user or make it some unassociated random value, such\n\
    \   as a fingerprint of the public key.\n      INFORMATIVE OPERATIONS NOTE: Reusing\
    \ a selector with a new key\n      (for example, changing the key associated with\
    \ a user's name)\n      makes it impossible to tell the difference between a message\
    \ that\n      didn't verify because the key is no longer valid and a message\n\
    \      that is actually forged.  For this reason, Signers are ill-advised\n  \
    \    to reuse selectors for new keys.  A better strategy is to assign\n      new\
    \ keys to new selectors.\n"
- title: 3.2.  Tag=Value Lists
  contents:
  - "3.2.  Tag=Value Lists\n   DKIM uses a simple \"tag=value\" syntax in several\
    \ contexts, including\n   in messages and domain signature records.\n   Values\
    \ are a series of strings containing either plain text, \"base64\"\n   text (as\
    \ defined in [RFC2045], Section 6.8), \"qp-section\" (ibid,\n   Section 6.7),\
    \ or \"dkim-quoted-printable\" (as defined in\n   Section 2.11).  The name of\
    \ the tag will determine the encoding of\n   each value.  Unencoded semicolon\
    \ (\";\") characters MUST NOT occur in\n   the tag value, since that separates\
    \ tag-specs.\n      INFORMATIVE IMPLEMENTATION NOTE: Although the \"plain text\"\
    \ defined\n      below (as \"tag-value\") only includes 7-bit characters, an\n\
    \      implementation that wished to anticipate future standards would be\n  \
    \    advised not to preclude the use of UTF-8-encoded ([RFC3629]) text\n     \
    \ in tag=value lists.\n   Formally, the ABNF syntax rules are as follows:\n  \
    \ tag-list  =  tag-spec *( \";\" tag-spec ) [ \";\" ]\n   tag-spec  =  [FWS] tag-name\
    \ [FWS] \"=\" [FWS] tag-value [FWS]\n   tag-name  =  ALPHA *ALNUMPUNC\n   tag-value\
    \ =  [ tval *( 1*(WSP / FWS) tval ) ]\n                     ; Prohibits WSP and\
    \ FWS at beginning and end\n   tval      =  1*VALCHAR\n   VALCHAR   =  %x21-3A\
    \ / %x3C-7E\n                     ; EXCLAMATION to TILDE except SEMICOLON\n  \
    \ ALNUMPUNC =  ALPHA / DIGIT / \"_\"\n   Note that WSP is allowed anywhere around\
    \ tags.  In particular, any\n   WSP after the \"=\" and any WSP before the terminating\
    \ \";\" is not part\n   of the value; however, WSP inside the value is significant.\n\
    \   Tags MUST be interpreted in a case-sensitive manner.  Values MUST be\n   processed\
    \ as case sensitive unless the specific tag description of\n   semantics specifies\
    \ case insensitivity.\n   Tags with duplicate names MUST NOT occur within a single\
    \ tag-list; if\n   a tag name does occur more than once, the entire tag-list is\
    \ invalid.\n   Whitespace within a value MUST be retained unless explicitly excluded\n\
    \   by the specific tag description.\n   Tag=value pairs that represent the default\
    \ value MAY be included to\n   aid legibility.\n   Unrecognized tags MUST be ignored.\n\
    \   Tags that have an empty value are not the same as omitted tags.  An\n   omitted\
    \ tag is treated as having the default value; a tag with an\n   empty value explicitly\
    \ designates the empty string as the value.\n"
- title: 3.3.  Signing and Verification Algorithms
  contents:
  - "3.3.  Signing and Verification Algorithms\n   DKIM supports multiple digital\
    \ signature algorithms.  Two algorithms\n   are defined by this specification\
    \ at this time: rsa-sha1 and rsa-\n   sha256.  Signers MUST implement and SHOULD\
    \ sign using rsa-sha256.\n   Verifiers MUST implement both rsa-sha1 and rsa-sha256.\n\
    \      INFORMATIVE NOTE: Although rsa-sha256 is strongly encouraged, some\n  \
    \    senders might prefer to use rsa-sha1 when balancing security\n      strength\
    \ against performance, complexity, or other needs.  In\n      general, however,\
    \ rsa-sha256 should always be used whenever\n      possible.\n"
- title: 3.3.1.  The rsa-sha1 Signing Algorithm
  contents:
  - "3.3.1.  The rsa-sha1 Signing Algorithm\n   The rsa-sha1 Signing Algorithm computes\
    \ a message hash as described\n   in Section 3.7 using SHA-1 [FIPS-180-3-2008]\
    \ as the hash-alg.  That\n   hash is then signed by the Signer using the RSA algorithm\
    \ (defined in\n   Public-Key Cryptography Standards (PKCS) #1 version 1.5 [RFC3447])\
    \ as\n   the crypt-alg and the Signer's private key.  The hash MUST NOT be\n \
    \  truncated or converted into any form other than the native binary\n   form\
    \ before being signed.  The signing algorithm SHOULD use a public\n   exponent\
    \ of 65537.\n"
- title: 3.3.2.  The rsa-sha256 Signing Algorithm
  contents:
  - "3.3.2.  The rsa-sha256 Signing Algorithm\n   The rsa-sha256 Signing Algorithm\
    \ computes a message hash as described\n   in Section 3.7 using SHA-256 [FIPS-180-3-2008]\
    \ as the hash-alg.  That\n   hash is then signed by the Signer using the RSA algorithm\
    \ (defined in\n   PKCS#1 version 1.5 [RFC3447]) as the crypt-alg and the Signer's\n\
    \   private key.  The hash MUST NOT be truncated or converted into any\n   form\
    \ other than the native binary form before being signed.  The\n   signing algorithm\
    \ SHOULD use a public exponent of 65537.\n"
- title: 3.3.3.  Key Sizes
  contents:
  - "3.3.3.  Key Sizes\n   Selecting appropriate key sizes is a trade-off between\
    \ cost,\n   performance, and risk.  Since short RSA keys more easily succumb to\n\
    \   off-line attacks, Signers MUST use RSA keys of at least 1024 bits for\n  \
    \ long-lived keys.  Verifiers MUST be able to validate signatures with\n   keys\
    \ ranging from 512 bits to 2048 bits, and they MAY be able to\n   validate signatures\
    \ with larger keys.  Verifier policies may use the\n   length of the signing key\
    \ as one metric for determining whether a\n   signature is acceptable.\n   Factors\
    \ that should influence the key size choice include the\n   following:\n   o \
    \ The practical constraint that large (e.g., 4096-bit) keys might\n      not fit\
    \ within a 512-byte DNS UDP response packet\n   o  The security constraint that\
    \ keys smaller than 1024 bits are\n      subject to off-line attacks\n   o  Larger\
    \ keys impose higher CPU costs to verify and sign email\n   o  Keys can be replaced\
    \ on a regular basis; thus, their lifetime can\n      be relatively short\n  \
    \ o  The security goals of this specification are modest compared to\n      typical\
    \ goals of other systems that employ digital signatures\n   See [RFC3766] for\
    \ further discussion on selecting key sizes.\n"
- title: 3.3.4.  Other Algorithms
  contents:
  - "3.3.4.  Other Algorithms\n   Other algorithms MAY be defined in the future. \
    \ Verifiers MUST ignore\n   any signatures using algorithms that they do not implement.\n"
- title: 3.4.  Canonicalization
  contents:
  - "3.4.  Canonicalization\n   Some mail systems modify email in transit, potentially\
    \ invalidating a\n   signature.  For most Signers, mild modification of email\
    \ is\n   immaterial to validation of the DKIM domain name's use.  For such\n \
    \  Signers, a canonicalization algorithm that survives modest in-transit\n   modification\
    \ is preferred.\n   Other Signers demand that any modification of the email, however\n\
    \   minor, result in a signature verification failure.  These Signers\n   prefer\
    \ a canonicalization algorithm that does not tolerate in-transit\n   modification\
    \ of the signed email.\n   Some Signers may be willing to accept modifications\
    \ to header fields\n   that are within the bounds of email standards such as [RFC5322],\
    \ but\n   are unwilling to accept any modification to the body of messages.\n\
    \   To satisfy all requirements, two canonicalization algorithms are\n   defined\
    \ for each of the header and the body: a \"simple\" algorithm\n   that tolerates\
    \ almost no modification and a \"relaxed\" algorithm that\n   tolerates common\
    \ modifications such as whitespace replacement and\n   header field line rewrapping.\
    \  A Signer MAY specify either algorithm\n   for header or body when signing an\
    \ email.  If no canonicalization\n   algorithm is specified by the Signer, the\
    \ \"simple\" algorithm defaults\n   for both header and body.  Verifiers MUST\
    \ implement both\n   canonicalization algorithms.  Note that the header and body\
    \ may use\n   different canonicalization algorithms.  Further canonicalization\n\
    \   algorithms MAY be defined in the future; Verifiers MUST ignore any\n   signatures\
    \ that use unrecognized canonicalization algorithms.\n   Canonicalization simply\
    \ prepares the email for presentation to the\n   signing or verification algorithm.\
    \  It MUST NOT change the\n   transmitted data in any way.  Canonicalization of\
    \ header fields and\n   body are described below.\n   NOTE: This section assumes\
    \ that the message is already in \"network\n   normal\" format (text is ASCII\
    \ encoded, lines are separated with CRLF\n   characters, etc.).  See also Section\
    \ 5.3 for information about\n   normalizing the message.\n"
- title: 3.4.1.  The "simple" Header Canonicalization Algorithm
  contents:
  - "3.4.1.  The \"simple\" Header Canonicalization Algorithm\n   The \"simple\" header\
    \ canonicalization algorithm does not change header\n   fields in any way.  Header\
    \ fields MUST be presented to the signing or\n   verification algorithm exactly\
    \ as they are in the message being\n   signed or verified.  In particular, header\
    \ field names MUST NOT be\n   case folded and whitespace MUST NOT be changed.\n"
- title: 3.4.2.  The "relaxed" Header Canonicalization Algorithm
  contents:
  - "3.4.2.  The \"relaxed\" Header Canonicalization Algorithm\n   The \"relaxed\"\
    \ header canonicalization algorithm MUST apply the\n   following steps in order:\n\
    \   o  Convert all header field names (not the header field values) to\n     \
    \ lowercase.  For example, convert \"SUBJect: AbC\" to \"subject: AbC\".\n   o\
    \  Unfold all header field continuation lines as described in\n      [RFC5322];\
    \ in particular, lines with terminators embedded in\n      continued header field\
    \ values (that is, CRLF sequences followed by\n      WSP) MUST be interpreted\
    \ without the CRLF.  Implementations MUST\n      NOT remove the CRLF at the end\
    \ of the header field value.\n   o  Convert all sequences of one or more WSP characters\
    \ to a single SP\n      character.  WSP characters here include those before and\
    \ after a\n      line folding boundary.\n   o  Delete all WSP characters at the\
    \ end of each unfolded header field\n      value.\n   o  Delete any WSP characters\
    \ remaining before and after the colon\n      separating the header field name\
    \ from the header field value.  The\n      colon separator MUST be retained.\n"
- title: 3.4.3.  The "simple" Body Canonicalization Algorithm
  contents:
  - "3.4.3.  The \"simple\" Body Canonicalization Algorithm\n   The \"simple\" body\
    \ canonicalization algorithm ignores all empty lines\n   at the end of the message\
    \ body.  An empty line is a line of zero\n   length after removal of the line\
    \ terminator.  If there is no body or\n   no trailing CRLF on the message body,\
    \ a CRLF is added.  It makes no\n   other changes to the message body.  In more\
    \ formal terms, the\n   \"simple\" body canonicalization algorithm converts \"\
    *CRLF\" at the end\n   of the body to a single \"CRLF\".\n   Note that a completely\
    \ empty or missing body is canonicalized as a\n   single \"CRLF\"; that is, the\
    \ canonicalized length will be 2 octets.\n   The SHA-1 value (in base64) for an\
    \ empty body (canonicalized to a\n   \"CRLF\") is:\n   uoq1oCgLlTqpdDX/iUbLy7J1Wic=\n\
    \   The SHA-256 value is:\n   frcCV1k9oG9oKj3dpUqdJg1PxRT2RSN/XKdLCPjaYaY=\n"
- title: 3.4.4.  The "relaxed" Body Canonicalization Algorithm
  contents:
  - "3.4.4.  The \"relaxed\" Body Canonicalization Algorithm\n   The \"relaxed\" body\
    \ canonicalization algorithm MUST apply the\n   following steps (a) and (b) in\
    \ order:\n   a.  Reduce whitespace:\n       *  Ignore all whitespace at the end\
    \ of lines.  Implementations\n          MUST NOT remove the CRLF at the end of\
    \ the line.\n       *  Reduce all sequences of WSP within a line to a single SP\n\
    \          character.\n   b.  Ignore all empty lines at the end of the message\
    \ body.  \"Empty\n       line\" is defined in Section 3.4.3.  If the body is non-empty\
    \ but\n       does not end with a CRLF, a CRLF is added.  (For email, this is\n\
    \       only possible when using extensions to SMTP or non-SMTP transport\n  \
    \     mechanisms.)\n   The SHA-1 value (in base64) for an empty body (canonicalized\
    \ to a\n   null input) is:\n   2jmj7l5rSw0yVb/vlWAYkK/YBwk=\n   The SHA-256 value\
    \ is:\n   47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=\n"
- title: 3.4.5.  Canonicalization Examples (INFORMATIVE)
  contents:
  - "3.4.5.  Canonicalization Examples (INFORMATIVE)\n   In the following examples,\
    \ actual whitespace is used only for\n   clarity.  The actual input and output\
    \ text is designated using\n   bracketed descriptors: \"<SP>\" for a space character,\
    \ \"<HTAB>\" for a\n   tab character, and \"<CRLF>\" for a carriage-return/line-feed\
    \ sequence.\n   For example, \"X <SP> Y\" and \"X<SP>Y\" represent the same three\n\
    \   characters.\n   Example 1: A message reading:\n   A: <SP> X <CRLF>\n   B <SP>\
    \ : <SP> Y <HTAB><CRLF>\n                   <HTAB> Z <SP><SP><CRLF>\n   <CRLF>\n\
    \   <SP> C <SP><CRLF>\n   D <SP><HTAB><SP> E <CRLF>\n   <CRLF>\n   <CRLF>\n  \
    \ when canonicalized using relaxed canonicalization for both header and\n   body\
    \ results in a header reading:\n   a:X <CRLF>\n   b:Y <SP> Z <CRLF>\n   and a\
    \ body reading:\n   <SP> C <CRLF>\n   D <SP> E <CRLF>\n   Example 2: The same\
    \ message canonicalized using simple\n   canonicalization for both header and\
    \ body results in a header\n   reading:\n   A: <SP> X <CRLF>\n   B <SP> : <SP>\
    \ Y <HTAB><CRLF>\n          <HTAB> Z <SP><SP><CRLF>\n   and a body reading:\n\
    \   <SP> C <SP><CRLF>\n   D <SP><HTAB><SP> E <CRLF>\n   Example 3: When processed\
    \ using relaxed header canonicalization and\n   simple body canonicalization,\
    \ the canonicalized version has a header\n   of:\n   a:X <CRLF>\n   b:Y <SP> Z\
    \ <CRLF>\n   and a body reading:\n   <SP> C <SP><CRLF>\n   D <SP><HTAB><SP> E\
    \ <CRLF>\n"
- title: 3.5.  The DKIM-Signature Header Field
  contents:
  - "3.5.  The DKIM-Signature Header Field\n   The signature of the email is stored\
    \ in the DKIM-Signature header\n   field.  This header field contains all of the\
    \ signature and key-\n   fetching data.  The DKIM-Signature value is a tag-list\
    \ as described\n   in Section 3.2.\n   The DKIM-Signature header field SHOULD\
    \ be treated as though it were a\n   trace header field as defined in Section\
    \ 3.6 of [RFC5322] and hence\n   SHOULD NOT be reordered and SHOULD be prepended\
    \ to the message.\n   The DKIM-Signature header field being created or verified\
    \ is always\n   included in the signature calculation, after the rest of the header\n\
    \   fields being signed; however, when calculating or verifying the\n   signature,\
    \ the value of the \"b=\" tag (signature value) of that DKIM-\n   Signature header\
    \ field MUST be treated as though it were an empty\n   string.  Unknown tags in\
    \ the DKIM-Signature header field MUST be\n   included in the signature calculation\
    \ but MUST be otherwise ignored\n   by Verifiers.  Other DKIM-Signature header\
    \ fields that are included\n   in the signature should be treated as normal header\
    \ fields; in\n   particular, the \"b=\" tag is not treated specially.\n   The\
    \ encodings for each field type are listed below.  Tags described\n   as qp-section\
    \ are encoded as described in Section 6.7 of MIME Part\n   One [RFC2045], with\
    \ the additional conversion of semicolon characters\n   to \"=3B\"; intuitively,\
    \ this is one line of quoted-printable encoded\n   text.  The dkim-quoted-printable\
    \ syntax is defined in Section 2.11.\n   Tags on the DKIM-Signature header field\
    \ along with their type and\n   requirement status are shown below.  Unrecognized\
    \ tags MUST be\n   ignored.\n   v= Version (plain-text; REQUIRED).  This tag defines\
    \ the version of\n      this specification that applies to the signature record.\
    \  It MUST\n      have the value \"1\" for implementations compliant with this\
    \ version\n      of DKIM.\n      ABNF:\n      sig-v-tag       = %x76 [FWS] \"\
    =\" [FWS] 1*DIGIT\n         INFORMATIVE NOTE: DKIM-Signature version numbers may\
    \ increase\n         arithmetically as new versions of this specification are\n\
    \         released.\n   a= The algorithm used to generate the signature (plain-text;\n\
    \      REQUIRED).  Verifiers MUST support \"rsa-sha1\" and \"rsa-sha256\";\n \
    \     Signers SHOULD sign using \"rsa-sha256\".  See Section 3.3 for a\n     \
    \ description of the algorithms.\n      ABNF:\n      sig-a-tag       = %x61 [FWS]\
    \ \"=\" [FWS] sig-a-tag-alg\n      sig-a-tag-alg   = sig-a-tag-k \"-\" sig-a-tag-h\n\
    \      sig-a-tag-k     = \"rsa\" / x-sig-a-tag-k\n      sig-a-tag-h     = \"sha1\"\
    \ / \"sha256\" / x-sig-a-tag-h\n      x-sig-a-tag-k   = ALPHA *(ALPHA / DIGIT)\n\
    \                           ; for later extension\n      x-sig-a-tag-h   = ALPHA\
    \ *(ALPHA / DIGIT)\n                           ; for later extension\n   b= The\
    \ signature data (base64; REQUIRED).  Whitespace is ignored in\n      this value\
    \ and MUST be ignored when reassembling the original\n      signature.  In particular,\
    \ the signing process can safely insert\n      FWS in this value in arbitrary\
    \ places to conform to line-length\n      limits.  See \"Signer Actions\" (Section\
    \ 5) for how the signature is\n      computed.\n      ABNF:\n      sig-b-tag \
    \      = %x62 [FWS] \"=\" [FWS] sig-b-tag-data\n      sig-b-tag-data  = base64string\n\
    \   bh=  The hash of the canonicalized body part of the message as\n      limited\
    \ by the \"l=\" tag (base64; REQUIRED).  Whitespace is ignored\n      in this\
    \ value and MUST be ignored when reassembling the original\n      signature. \
    \ In particular, the signing process can safely insert\n      FWS in this value\
    \ in arbitrary places to conform to line-length\n      limits.  See Section 3.7\
    \ for how the body hash is computed.\n      ABNF:\n      sig-bh-tag      = %x62\
    \ %x68 [FWS] \"=\" [FWS] sig-bh-tag-data\n      sig-bh-tag-data = base64string\n\
    \   c= Message canonicalization (plain-text; OPTIONAL, default is\n      \"simple/simple\"\
    ).  This tag informs the Verifier of the type of\n      canonicalization used\
    \ to prepare the message for signing.  It\n      consists of two names separated\
    \ by a \"slash\" (%d47) character,\n      corresponding to the header and body\
    \ canonicalization algorithms,\n      respectively.  These algorithms are described\
    \ in Section 3.4.  If\n      only one algorithm is named, that algorithm is used\
    \ for the header\n      and \"simple\" is used for the body.  For example, \"\
    c=relaxed\" is\n      treated the same as \"c=relaxed/simple\".\n      ABNF:\n\
    \      sig-c-tag       = %x63 [FWS] \"=\" [FWS] sig-c-tag-alg\n              \
    \          [\"/\" sig-c-tag-alg]\n      sig-c-tag-alg   = \"simple\" / \"relaxed\"\
    \ / x-sig-c-tag-alg\n      x-sig-c-tag-alg = hyphenated-word    ; for later extension\n\
    \   d= The SDID claiming responsibility for an introduction of a message\n   \
    \   into the mail stream (plain-text; REQUIRED).  Hence, the SDID\n      value\
    \ is used to form the query for the public key.  The SDID MUST\n      correspond\
    \ to a valid DNS name under which the DKIM key record is\n      published.  The\
    \ conventions and semantics used by a Signer to\n      create and use a specific\
    \ SDID are outside the scope of this\n      specification, as is any use of those\
    \ conventions and semantics.\n      When presented with a signature that does\
    \ not meet these\n      requirements, Verifiers MUST consider the signature invalid.\n\
    \      Internationalized domain names MUST be encoded as A-labels, as\n      described\
    \ in Section 2.3 of [RFC5890].\n      ABNF:\n      sig-d-tag       = %x64 [FWS]\
    \ \"=\" [FWS] domain-name\n      domain-name     = sub-domain 1*(\".\" sub-domain)\n\
    \                        ; from [RFC5321] Domain,\n                        ; excluding\
    \ address-literal\n   h= Signed header fields (plain-text, but see description;\
    \ REQUIRED).\n      A colon-separated list of header field names that identify\
    \ the\n      header fields presented to the signing algorithm.  The field MUST\n\
    \      contain the complete list of header fields in the order presented\n   \
    \   to the signing algorithm.  The field MAY contain names of header\n      fields\
    \ that do not exist when signed; nonexistent header fields do\n      not contribute\
    \ to the signature computation (that is, they are\n      treated as the null input,\
    \ including the header field name, the\n      separating colon, the header field\
    \ value, and any CRLF\n      terminator).  The field MAY contain multiple instances\
    \ of a header\n      field name, meaning multiple occurrences of the corresponding\n\
    \      header field are included in the header hash.  The field MUST NOT\n   \
    \   include the DKIM-Signature header field that is being created or\n      verified\
    \ but may include others.  Folding whitespace (FWS) MAY be\n      included on\
    \ either side of the colon separator.  Header field\n      names MUST be compared\
    \ against actual header field names in a\n      case-insensitive manner.  This\
    \ list MUST NOT be empty.  See\n      Section 5.4 for a discussion of choosing\
    \ header fields to sign and\n      Section 5.4.2 for requirements when signing\
    \ multiple instances of\n      a single field.\n      ABNF:\n      sig-h-tag \
    \      = %x68 [FWS] \"=\" [FWS] hdr-name\n                         *( [FWS] \"\
    :\" [FWS] hdr-name )\n         INFORMATIVE EXPLANATION: By \"signing\" header\
    \ fields that do not\n         actually exist, a Signer can allow a Verifier to\
    \ detect\n         insertion of those header fields after signing.  However, since\n\
    \         a Signer cannot possibly know what header fields might be\n        \
    \ defined in the future, this mechanism cannot be used to prevent\n         the\
    \ addition of any possible unknown header fields.\n         INFORMATIVE NOTE:\
    \ \"Signing\" fields that are not present at the\n         time of signing not\
    \ only prevents fields and values from being\n         added but also prevents\
    \ adding fields with no values.\n   i= The Agent or User Identifier (AUID) on\
    \ behalf of which the SDID is\n      taking responsibility (dkim-quoted-printable;\
    \ OPTIONAL, default is\n      an empty local-part followed by an \"@\" followed\
    \ by the domain from\n      the \"d=\" tag).\n      The syntax is a standard email\
    \ address where the local-part MAY be\n      omitted.  The domain part of the\
    \ address MUST be the same as, or a\n      subdomain of, the value of the \"d=\"\
    \ tag.\n      Internationalized domain names MUST be encoded as A-labels, as\n\
    \      described in Section 2.3 of [RFC5890].\n      ABNF:\n      sig-i-tag  \
    \     = %x69 [FWS] \"=\" [FWS] [ Local-part ]\n                              \
    \   \"@\" domain-name\n      The AUID is specified as having the same syntax as\
    \ an email\n      address but it need not have the same semantics.  Notably, the\n\
    \      domain name need not be registered in the DNS -- so it might not\n    \
    \  resolve in a query -- and the local-part MAY be drawn from a\n      namespace\
    \ unrelated to any mailbox.  The details of the structure\n      and semantics\
    \ for the namespace are determined by the Signer.  Any\n      knowledge or use\
    \ of those details by Verifiers or Assessors is\n      outside the scope of this\
    \ specification.  The Signer MAY choose to\n      use the same namespace for its\
    \ AUIDs as its users' email addresses\n      or MAY choose other means of representing\
    \ its users.  However, the\n      Signer SHOULD use the same AUID for each message\
    \ intended to be\n      evaluated as being within the same sphere of responsibility,\
    \ if it\n      wishes to offer receivers the option of using the AUID as a stable\n\
    \      identifier that is finer grained than the SDID.\n         INFORMATIVE NOTE:\
    \ The local-part of the \"i=\" tag is optional\n         because in some cases\
    \ a Signer may not be able to establish a\n         verified individual identity.\
    \  In such cases, the Signer might\n         wish to assert that although it is\
    \ willing to go as far as\n         signing for the domain, it is unable or unwilling\
    \ to commit to\n         an individual user name within the domain.  It can do\
    \ so by\n         including the domain part but not the local-part of the\n  \
    \       identity.\n         INFORMATIVE DISCUSSION: This specification does not\
    \ require the\n         value of the \"i=\" tag to match the identity in any message\n\
    \         header fields.  This is considered to be a Verifier policy\n       \
    \  issue.  Constraints between the value of the \"i=\" tag and other\n       \
    \  identities in other header fields seek to apply basic\n         authentication\
    \ into the semantics of trust associated with a\n         role such as content\
    \ author.  Trust is a broad and complex\n         topic, and trust mechanisms\
    \ are subject to highly creative\n         attacks.  The real-world efficacy of\
    \ any but the most basic\n         bindings between the \"i=\" value and other\
    \ identities is not\n         well established, nor is its vulnerability to subversion\
    \ by an\n         attacker.  Hence, reliance on the use of these options should\n\
    \         be strictly limited.  In particular, it is not at all clear to\n   \
    \      what extent a typical end-user recipient can rely on any\n         assurances\
    \ that might be made by successful use of the \"i=\"\n         options.\n   l=\
    \ Body length count (plain-text unsigned decimal integer; OPTIONAL,\n      default\
    \ is entire body).  This tag informs the Verifier of the\n      number of octets\
    \ in the body of the email after canonicalization\n      included in the cryptographic\
    \ hash, starting from 0 immediately\n      following the CRLF preceding the body.\
    \  This value MUST NOT be\n      larger than the actual number of octets in the\
    \ canonicalized\n      message body.  See further discussion in Section 8.2.\n\
    \         INFORMATIVE NOTE: The value of the \"l=\" tag is constrained to\n  \
    \       76 decimal digits.  This constraint is not intended to predict\n     \
    \    the size of future messages or to require implementations to\n         use\
    \ an integer representation large enough to represent the\n         maximum possible\
    \ value but is intended to remind the\n         implementer to check the length\
    \ of this and all other tags\n         during verification and to test for integer\
    \ overflow when\n         decoding the value.  Implementers may need to limit\
    \ the actual\n         value expressed to a value smaller than 10^76, e.g., to\
    \ allow a\n         message to fit within the available storage space.\n     \
    \ ABNF:\n      sig-l-tag    = %x6c [FWS] \"=\" [FWS]\n                     1*76DIGIT\n\
    \   q= A colon-separated list of query methods used to retrieve the\n      public\
    \ key (plain-text; OPTIONAL, default is \"dns/txt\").  Each\n      query method\
    \ is of the form \"type[/options]\", where the syntax and\n      semantics of\
    \ the options depend on the type and specified options.\n      If there are multiple\
    \ query mechanisms listed, the choice of query\n      mechanism MUST NOT change\
    \ the interpretation of the signature.\n      Implementations MUST use the recognized\
    \ query mechanisms in the\n      order presented.  Unrecognized query mechanisms\
    \ MUST be ignored.\n      Currently, the only valid value is \"dns/txt\", which\
    \ defines the\n      DNS TXT resource record (RR) lookup algorithm described elsewhere\n\
    \      in this document.  The only option defined for the \"dns\" query\n    \
    \  type is \"txt\", which MUST be included.  Verifiers and Signers MUST\n    \
    \  support \"dns/txt\".\n      ABNF:\n      sig-q-tag        = %x71 [FWS] \"=\"\
    \ [FWS] sig-q-tag-method\n                            *([FWS] \":\" [FWS] sig-q-tag-method)\n\
    \      sig-q-tag-method = \"dns/txt\" / x-sig-q-tag-type\n                   \
    \      [\"/\" x-sig-q-tag-args]\n      x-sig-q-tag-type = hyphenated-word  ; for\
    \ future extension\n      x-sig-q-tag-args = qp-hdr-value\n   s= The selector\
    \ subdividing the namespace for the \"d=\" (domain) tag\n      (plain-text; REQUIRED).\n\
    \      Internationalized selector names MUST be encoded as A-labels, as\n    \
    \  described in Section 2.3 of [RFC5890].\n      ABNF:\n      sig-s-tag    = %x73\
    \ [FWS] \"=\" [FWS] selector\n   t= Signature Timestamp (plain-text unsigned decimal\
    \ integer;\n      RECOMMENDED, default is an unknown creation time).  The time\
    \ that\n      this signature was created.  The format is the number of seconds\n\
    \      since 00:00:00 on January 1, 1970 in the UTC time zone.  The value\n  \
    \    is expressed as an unsigned integer in decimal ASCII.  This value\n     \
    \ is not constrained to fit into a 31- or 32-bit integer.\n      Implementations\
    \ SHOULD be prepared to handle values up to at least\n      10^12 (until approximately\
    \ AD 200,000; this fits into 40 bits).\n      To avoid denial-of-service attacks,\
    \ implementations MAY consider\n      any value longer than 12 digits to be infinite.\
    \  Leap seconds are\n      not counted.  Implementations MAY ignore signatures\
    \ that have a\n      timestamp in the future.\n      ABNF:\n      sig-t-tag  \
    \  = %x74 [FWS] \"=\" [FWS] 1*12DIGIT\n   x= Signature Expiration (plain-text\
    \ unsigned decimal integer;\n      RECOMMENDED, default is no expiration).  The\
    \ format is the same as\n      in the \"t=\" tag, represented as an absolute date,\
    \ not as a time\n      delta from the signing timestamp.  The value is expressed\
    \ as an\n      unsigned integer in decimal ASCII, with the same constraints on\n\
    \      the value in the \"t=\" tag.  Signatures MAY be considered invalid\n  \
    \    if the verification time at the Verifier is past the expiration\n      date.\
    \  The verification time should be the time that the message\n      was first\
    \ received at the administrative domain of the Verifier if\n      that time is\
    \ reliably available; otherwise, the current time\n      should be used.  The\
    \ value of the \"x=\" tag MUST be greater than\n      the value of the \"t=\"\
    \ tag if both are present.\n         INFORMATIVE NOTE: The \"x=\" tag is not intended\
    \ as an anti-\n         replay defense.\n         INFORMATIVE NOTE: Due to clock\
    \ drift, the receiver's notion of\n         when to consider the signature expired\
    \ may not exactly match\n         what the sender is expecting.  Receivers MAY\
    \ add a 'fudge\n         factor' to allow for such possible drift.\n      ABNF:\n\
    \      sig-x-tag    = %x78 [FWS] \"=\" [FWS]\n                               \
    \     1*12DIGIT\n   z= Copied header fields (dkim-quoted-printable, but see description;\n\
    \      OPTIONAL, default is null).  A vertical-bar-separated list of\n      selected\
    \ header fields present when the message was signed,\n      including both the\
    \ field name and value.  It is not required to\n      include all header fields\
    \ present at the time of signing.  This\n      field need not contain the same\
    \ header fields listed in the \"h=\"\n      tag.  The header field text itself\
    \ must encode the vertical bar\n      (\"|\", %x7C) character (i.e., vertical\
    \ bars in the \"z=\" text are\n      meta-characters, and any actual vertical\
    \ bar characters in a\n      copied header field must be encoded).  Note that\
    \ all whitespace\n      must be encoded, including whitespace between the colon\
    \ and the\n      header field value.  After encoding, FWS MAY be added at arbitrary\n\
    \      locations in order to avoid excessively long lines; such\n      whitespace\
    \ is NOT part of the value of the header field and MUST\n      be removed before\
    \ decoding.\n      The header fields referenced by the \"h=\" tag refer to the\
    \ fields\n      in the [RFC5322] header of the message, not to any copied fields\n\
    \      in the \"z=\" tag.  Copied header field values are for diagnostic\n   \
    \   use.\n      ABNF:\n      sig-z-tag      = %x7A [FWS] \"=\" [FWS] sig-z-tag-copy\n\
    \                       *( \"|\" [FWS] sig-z-tag-copy )\n      sig-z-tag-copy\
    \ = hdr-name [FWS] \":\" qp-hdr-value\n         INFORMATIVE EXAMPLE of a signature\
    \ header field spread across\n         multiple continuation lines:\n   DKIM-Signature:\
    \ v=1; a=rsa-sha256; d=example.net; s=brisbane;\n      c=simple; q=dns/txt; i=@eng.example.net;\n\
    \      t=1117574938; x=1118006938;\n      h=from:to:subject:date;\n      z=From:foo@eng.example.net|To:joe@example.com|\n\
    \       Subject:demo=20run|Date:July=205,=202005=203:44:08=20PM=20-0700;\n   \
    \   bh=MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=;\n      b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZVoG4ZHRNiYzR\n"
- title: 3.6.  Key Management and Representation
  contents:
  - "3.6.  Key Management and Representation\n   Signature applications require some\
    \ level of assurance that the\n   verification public key is associated with the\
    \ claimed Signer.  Many\n   applications achieve this by using public-key certificates\
    \ issued by\n   a trusted third party.  However, DKIM can achieve a sufficient\
    \ level\n   of security, with significantly enhanced scalability, by simply\n\
    \   having the Verifier query the purported Signer's DNS entry (or some\n   security-equivalent)\
    \ in order to retrieve the public key.\n   DKIM keys can potentially be stored\
    \ in multiple types of key servers\n   and in multiple formats.  The storage and\
    \ format of keys are\n   irrelevant to the remainder of the DKIM algorithm.\n\
    \   Parameters to the key lookup algorithm are the type of the lookup\n   (the\
    \ \"q=\" tag), the domain of the Signer (the \"d=\" tag of the DKIM-\n   Signature\
    \ header field), and the selector (the \"s=\" tag).\n   public_key = dkim_find_key(q_val,\
    \ d_val, s_val)\n   This document defines a single binding, using DNS TXT RRs\
    \ to\n   distribute the keys.  Other bindings may be defined in the future.\n"
- title: 3.6.1.  Textual Representation
  contents:
  - "3.6.1.  Textual Representation\n   It is expected that many key servers will\
    \ choose to present the keys\n   in an otherwise unstructured text format (for\
    \ example, an XML form\n   would not be considered to be unstructured text for\
    \ this purpose).\n   The following definition MUST be used for any DKIM key represented\
    \ in\n   an otherwise unstructured textual form.\n   The overall syntax is a tag-list\
    \ as described in Section 3.2.  The\n   current valid tags are described below.\
    \  Other tags MAY be present\n   and MUST be ignored by any implementation that\
    \ does not understand\n   them.\n   v= Version of the DKIM key record (plain-text;\
    \ RECOMMENDED, default\n      is \"DKIM1\").  If specified, this tag MUST be set\
    \ to \"DKIM1\"\n      (without the quotes).  This tag MUST be the first tag in\
    \ the\n      record.  Records beginning with a \"v=\" tag with any other value\n\
    \      MUST be discarded.  Note that Verifiers must do a string\n      comparison\
    \ on this value; for example, \"DKIM1\" is not the same as\n      \"DKIM1.0\"\
    .\n      ABNF:\n      key-v-tag    = %x76 [FWS] \"=\" [FWS] %x44.4B.49.4D.31\n\
    \   h= Acceptable hash algorithms (plain-text; OPTIONAL, defaults to\n      allowing\
    \ all algorithms).  A colon-separated list of hash\n      algorithms that might\
    \ be used.  Unrecognized algorithms MUST be\n      ignored.  Refer to Section\
    \ 3.3 for a discussion of the hash\n      algorithms implemented by Signers and\
    \ Verifiers.  The set of\n      algorithms listed in this tag in each record is\
    \ an operational\n      choice made by the Signer.\n      ABNF:\n      key-h-tag\
    \       = %x68 [FWS] \"=\" [FWS] key-h-tag-alg\n                        *( [FWS]\
    \ \":\" [FWS] key-h-tag-alg )\n      key-h-tag-alg   = \"sha1\" / \"sha256\" /\
    \ x-key-h-tag-alg\n      x-key-h-tag-alg = hyphenated-word   ; for future extension\n\
    \   k= Key type (plain-text; OPTIONAL, default is \"rsa\").  Signers and\n   \
    \   Verifiers MUST support the \"rsa\" key type.  The \"rsa\" key type\n     \
    \ indicates that an ASN.1 DER-encoded [ITU-X660-1997] RSAPublicKey\n      (see\
    \ [RFC3447], Sections 3.1 and A.1.1) is being used in the \"p=\"\n      tag. \
    \ (Note: the \"p=\" tag further encodes the value using the\n      base64 algorithm.)\
    \  Unrecognized key types MUST be ignored.\n      ABNF:\n      key-k-tag     \
    \   = %x76 [FWS] \"=\" [FWS] key-k-tag-type\n      key-k-tag-type   = \"rsa\"\
    \ / x-key-k-tag-type\n      x-key-k-tag-type = hyphenated-word   ; for future\
    \ extension\n   n= Notes that might be of interest to a human (qp-section; OPTIONAL,\n\
    \      default is empty).  No interpretation is made by any program.\n      This\
    \ tag should be used sparingly in any key server mechanism that\n      has space\
    \ limitations (notably DNS).  This is intended for use by\n      administrators,\
    \ not end users.\n      ABNF:\n      key-n-tag    = %x6e [FWS] \"=\" [FWS] qp-section\n\
    \   p= Public-key data (base64; REQUIRED).  An empty value means that\n      this\
    \ public key has been revoked.  The syntax and semantics of\n      this tag value\
    \ before being encoded in base64 are defined by the\n      \"k=\" tag.\n     \
    \    INFORMATIVE RATIONALE: If a private key has been compromised or\n       \
    \  otherwise disabled (e.g., an outsourcing contract has been\n         terminated),\
    \ a Signer might want to explicitly state that it\n         knows about the selector,\
    \ but all messages using that selector\n         should fail verification.  Verifiers\
    \ SHOULD return an error\n         code for any DKIM-Signature header field with\
    \ a selector\n         referencing a revoked key.  (See Section 6.1.2 for details.)\n\
    \      ABNF:\n      key-p-tag    = %x70 [FWS] \"=\" [ [FWS] base64string]\n  \
    \       INFORMATIVE NOTE: A base64string is permitted to include\n         whitespace\
    \ (FWS) at arbitrary places; however, any CRLFs must\n         be followed by\
    \ at least one WSP character.  Implementers and\n         administrators are cautioned\
    \ to ensure that selector TXT RRs\n         conform to this specification.\n \
    \  s= Service Type (plain-text; OPTIONAL; default is \"*\").  A colon-\n     \
    \ separated list of service types to which this record applies.\n      Verifiers\
    \ for a given service type MUST ignore this record if the\n      appropriate type\
    \ is not listed.  Unrecognized service types MUST\n      be ignored.  Currently\
    \ defined service types are as follows:\n      *  matches all service types\n\
    \      email   electronic mail (not necessarily limited to SMTP)\n      This tag\
    \ is intended to constrain the use of keys for other\n      purposes, should use\
    \ of DKIM be defined by other services in the\n      future.\n      ABNF:\n  \
    \    key-s-tag        = %x73 [FWS] \"=\" [FWS] key-s-tag-type\n              \
    \           *( [FWS] \":\" [FWS] key-s-tag-type )\n      key-s-tag-type   = \"\
    email\" / \"*\" / x-key-s-tag-type\n      x-key-s-tag-type = hyphenated-word \
    \  ; for future extension\n   t= Flags, represented as a colon-separated list\
    \ of names (plain-\n      text; OPTIONAL, default is no flags set).  Unrecognized\
    \ flags MUST\n      be ignored.  The defined flags are as follows:\n      y  This\
    \ domain is testing DKIM.  Verifiers MUST NOT treat messages\n         from Signers\
    \ in testing mode differently from unsigned email,\n         even should the signature\
    \ fail to verify.  Verifiers MAY wish\n         to track testing mode results\
    \ to assist the Signer.\n      s  Any DKIM-Signature header fields using the \"\
    i=\" tag MUST have\n         the same domain value on the right-hand side of the\
    \ \"@\" in the\n         \"i=\" tag and the value of the \"d=\" tag.  That is,\
    \ the \"i=\"\n         domain MUST NOT be a subdomain of \"d=\".  Use of this\
    \ flag is\n         RECOMMENDED unless subdomaining is required.\n      ABNF:\n\
    \      key-t-tag        = %x74 [FWS] \"=\" [FWS] key-t-tag-flag\n            \
    \             *( [FWS] \":\" [FWS] key-t-tag-flag )\n      key-t-tag-flag   =\
    \ \"y\" / \"s\" / x-key-t-tag-flag\n      x-key-t-tag-flag = hyphenated-word \
    \  ; for future extension\n"
- title: 3.6.2.  DNS Binding
  contents:
  - "3.6.2.  DNS Binding\n   A binding using DNS TXT RRs as a key service is hereby\
    \ defined.  All\n   implementations MUST support this binding.\n"
- title: 3.6.2.1.  Namespace
  contents:
  - "3.6.2.1.  Namespace\n   All DKIM keys are stored in a subdomain named \"_domainkey\"\
    .  Given a\n   DKIM-Signature field with a \"d=\" tag of \"example.com\" and an\
    \ \"s=\" tag\n   of \"foo.bar\", the DNS query will be for\n   \"foo.bar._domainkey.example.com\"\
    .\n"
- title: 3.6.2.2.  Resource Record Types for Key Storage
  contents:
  - "3.6.2.2.  Resource Record Types for Key Storage\n   The DNS Resource Record type\
    \ used is specified by an option to the\n   query-type (\"q=\") tag.  The only\
    \ option defined in this base\n   specification is \"txt\", indicating the use\
    \ of a TXT RR.  A later\n   extension of this standard may define another RR type.\n\
    \   Strings in a TXT RR MUST be concatenated together before use with no\n   intervening\
    \ whitespace.  TXT RRs MUST be unique for a particular\n   selector name; that\
    \ is, if there are multiple records in an RRset,\n   the results are undefined.\n\
    \   TXT RRs are encoded as described in Section 3.6.1.\n"
- title: 3.7.  Computing the Message Hashes
  contents:
  - "3.7.  Computing the Message Hashes\n   Both signing and verifying message signatures\
    \ start with a step of\n   computing two cryptographic hashes over the message.\
    \  Signers will\n   choose the parameters of the signature as described in \"\
    Signer\n   Actions\" (Section 5); Verifiers will use the parameters specified\
    \ in\n   the DKIM-Signature header field being verified.  In the following\n \
    \  discussion, the names of the tags in the DKIM-Signature header field\n   that\
    \ either exists (when verifying) or will be created (when signing)\n   are used.\
    \  Note that canonicalization (Section 3.4) is only used to\n   prepare the email\
    \ for signing or verifying; it does not affect the\n   transmitted email in any\
    \ way.\n   The Signer/Verifier MUST compute two hashes: one over the body of the\n\
    \   message and one over the selected header fields of the message.\n   Signers\
    \ MUST compute them in the order shown.  Verifiers MAY compute\n   them in any\
    \ order convenient to the Verifier, provided that the\n   result is semantically\
    \ identical to the semantics that would be the\n   case had they been computed\
    \ in this order.\n   In hash step 1, the Signer/Verifier MUST hash the message\
    \ body,\n   canonicalized using the body canonicalization algorithm specified\
    \ in\n   the \"c=\" tag and then truncated to the length specified in the \"l=\"\
    \n   tag.  That hash value is then converted to base64 form and inserted\n   into\
    \ (Signers) or compared to (Verifiers) the \"bh=\" tag of the DKIM-\n   Signature\
    \ header field.\n   In hash step 2, the Signer/Verifier MUST pass the following\
    \ to the\n   hash algorithm in the indicated order.\n   1.  The header fields\
    \ specified by the \"h=\" tag, in the order\n       specified in that tag, and\
    \ canonicalized using the header\n       canonicalization algorithm specified\
    \ in the \"c=\" tag.  Each\n       header field MUST be terminated with a single\
    \ CRLF.\n   2.  The DKIM-Signature header field that exists (verifying) or will\n\
    \       be inserted (signing) in the message, with the value of the \"b=\"\n \
    \      tag (including all surrounding whitespace) deleted (i.e., treated\n   \
    \    as the empty string), canonicalized using the header\n       canonicalization\
    \ algorithm specified in the \"c=\" tag, and without\n       a trailing CRLF.\n\
    \   All tags and their values in the DKIM-Signature header field are\n   included\
    \ in the cryptographic hash with the sole exception of the\n   value portion of\
    \ the \"b=\" (signature) tag, which MUST be treated as\n   the null string.  All\
    \ tags MUST be included even if they might not be\n   understood by the Verifier.\
    \  The header field MUST be presented to\n   the hash algorithm after the body\
    \ of the message rather than with the\n   rest of the header fields and MUST be\
    \ canonicalized as specified in\n   the \"c=\" (canonicalization) tag.  The DKIM-Signature\
    \ header field\n   MUST NOT be included in its own \"h=\" tag, although other\
    \ DKIM-\n   Signature header fields MAY be signed (see Section 4).\n   When calculating\
    \ the hash on messages that will be transmitted using\n   base64 or quoted-printable\
    \ encoding, Signers MUST compute the hash\n   after the encoding.  Likewise, the\
    \ Verifier MUST incorporate the\n   values into the hash before decoding the base64\
    \ or quoted-printable\n   text.  However, the hash MUST be computed before transport-level\n\
    \   encodings such as SMTP \"dot-stuffing\" (the modification of lines\n   beginning\
    \ with a \".\" to avoid confusion with the SMTP end-of-message\n   marker, as\
    \ specified in [RFC5321]).\n   With the exception of the canonicalization procedure\
    \ described in\n   Section 3.4, the DKIM signing process treats the body of messages\
    \ as\n   simply a string of octets.  DKIM messages MAY be either in plain-text\n\
    \   or in MIME format; no special treatment is afforded to MIME content.\n   Message\
    \ attachments in MIME format MUST be included in the content\n   that is signed.\n\
    \   More formally, pseudo-code for the signature algorithm is:\n   body-hash \
    \   =  hash-alg (canon-body, l-param)\n   data-hash    =  hash-alg (h-headers,\
    \ D-SIG, body-hash)\n   signature    =  sig-alg (d-domain, selector, data-hash)\n\
    \   where:\n   body-hash:  is the output from hashing the body, using hash-alg.\n\
    \   hash-alg:   is the hashing algorithm specified in the \"a\" parameter.\n \
    \  canon-body: is a canonicalized representation of the body, produced\n     \
    \          using the body algorithm specified in the \"c\" parameter,\n      \
    \         as defined in Section 3.4 and excluding the\n               DKIM-Signature\
    \ field.\n   l-param:    is the length-of-body value of the \"l\" parameter.\n\
    \   data-hash:  is the output from using the hash-alg algorithm, to hash\n   \
    \            the header including the DKIM-Signature header, and the\n       \
    \        body hash.\n   h-headers:  is the list of headers to be signed, as specified\
    \ in the\n               \"h\" parameter.\n   D-SIG:      is the canonicalized\
    \ DKIM-Signature field itself without\n               the signature value portion\
    \ of the parameter, that is, an\n               empty parameter value.\n   signature:\
    \  is the signature value produced by the signing algorithm.\n   sig-alg:    is\
    \ the signature algorithm specified by the \"a\"\n               parameter.\n\
    \   d-domain:   is the domain name specified in the \"d\" parameter.\n   selector:\
    \   is the selector value specified in the \"s\" parameter.\n      NOTE: Many\
    \ digital signature APIs provide both hashing and\n      application of the RSA\
    \ private key using a single \"sign()\"\n      primitive.  When using such an\
    \ API, the last two steps in the\n      algorithm would probably be combined into\
    \ a single call that would\n      perform both the \"a-hash-alg\" and the \"sig-alg\"\
    .\n"
- title: 3.8.  Input Requirements
  contents:
  - "3.8.  Input Requirements\n   A message that is not compliant with [RFC5322],\
    \ [RFC2045], and\n   [RFC2047] can be subject to attempts by intermediaries to\
    \ correct or\n   interpret such content.  See Section 8 of [RFC4409] for examples\
    \ of\n   changes that are commonly made.  Such \"corrections\" may invalidate\n\
    \   DKIM signatures or have other undesirable effects, including some\n   that\
    \ involve changes to the way a message is presented to an end\n   user.\n   Accordingly,\
    \ DKIM's design is predicated on valid input.  Therefore,\n   Signers and Verifiers\
    \ SHOULD take reasonable steps to ensure that the\n   messages they are processing\
    \ are valid according to [RFC5322],\n   [RFC2045], and any other relevant message\
    \ format standards.\n   See Section 8.15 for additional discussion.\n"
- title: 3.9.  Output Requirements
  contents:
  - "3.9.  Output Requirements\n   The evaluation of each signature ends in one of\
    \ three states, which\n   this document refers to as follows:\n   SUCCESS:  a\
    \ successful verification\n   PERMFAIL:  a permanent, non-recoverable error such\
    \ as a signature\n      verification failure\n   TEMPFAIL:  a temporary, recoverable\
    \ error such as a DNS query timeout\n   For each signature that verifies successfully\
    \ or produces a TEMPFAIL\n   result, output of the DKIM algorithm MUST include\
    \ the set of:\n   o  The domain name, taken from the \"d=\" signature tag; and\n\
    \   o  The result of the verification attempt for that signature.\n   The output\
    \ MAY include other signature properties or result meta-\n   data, including PERMFAILed\
    \ or otherwise ignored signatures, for use\n   by modules that consume those results.\n\
    \   See Section 6.1 for discussion of signature validation result codes.\n"
- title: 3.10.  Signing by Parent Domains
  contents:
  - "3.10.  Signing by Parent Domains\n   In some circumstances, it is desirable for\
    \ a domain to apply a\n   signature on behalf of any of its subdomains without\
    \ the need to\n   maintain separate selectors (key records) in each subdomain.\
    \  By\n   default, private keys corresponding to key records can be used to\n\
    \   sign messages for any subdomain of the domain in which they reside;\n   for\
    \ example, a key record for the domain example.com can be used to\n   verify messages\
    \ where the AUID (\"i=\" tag of the signature) is\n   sub.example.com, or even\
    \ sub1.sub2.example.com.  In order to limit\n   the capability of such keys when\
    \ this is not intended, the \"s\" flag\n   MAY be set in the \"t=\" tag of the\
    \ key record, to constrain the\n   validity of the domain of the AUID.  If the\
    \ referenced key record\n   contains the \"s\" flag as part of the \"t=\" tag,\
    \ the domain of the AUID\n   (\"i=\" flag) MUST be the same as that of the SDID\
    \ (d=) domain.  If\n   this flag is absent, the domain of the AUID MUST be the\
    \ same as, or a\n   subdomain of, the SDID.\n"
- title: 3.11.  Relationship between SDID and AUID
  contents:
  - "3.11.  Relationship between SDID and AUID\n   DKIM's primary task is to communicate\
    \ from the Signer to a recipient-\n   side Identity Assessor a single Signing\
    \ Domain Identifier (SDID) that\n   refers to a responsible identity.  DKIM MAY\
    \ optionally provide a\n   single responsible Agent or User Identifier (AUID).\n\
    \   Hence, DKIM's mandatory output to a receive-side Identity Assessor is\n  \
    \ a single domain name.  Within the scope of its use as DKIM output,\n   the name\
    \ has only basic domain name semantics; any possible owner-\n   specific semantics\
    \ are outside the scope of DKIM.  That is, within\n   its role as a DKIM identifier,\
    \ additional semantics cannot be assumed\n   by an Identity Assessor.\n   Upon\
    \ successfully verifying the signature, a receive-side DKIM\n   Verifier MUST\
    \ communicate the Signing Domain Identifier (d=) to a\n   consuming Identity Assessor\
    \ module and MAY communicate the Agent or\n   User Identifier (i=) if present.\n\
    \   To the extent that a receiver attempts to intuit any structured\n   semantics\
    \ for either of the identifiers, this is a heuristic function\n   that is outside\
    \ the scope of DKIM's specification and semantics.\n   Hence, it is relegated\
    \ to a higher-level service, such as a delivery-\n   handling filter that integrates\
    \ a variety of inputs and performs\n   heuristic analysis of them.\n      INFORMATIVE\
    \ DISCUSSION: This document does not require the value\n      of the SDID or AUID\
    \ to match an identifier in any other message\n      header field.  This requirement\
    \ is, instead, an Assessor policy\n      issue.  The purpose of such a linkage\
    \ would be to authenticate the\n      value in that other header field.  This,\
    \ in turn, is the basis for\n      applying a trust assessment based on the identifier\
    \ value.  Trust\n      is a broad and complex topic, and trust mechanisms are\
    \ subject to\n      highly creative attacks.  The real-world efficacy of any but\
    \ the\n      most basic bindings between the SDID or AUID and other identities\n\
    \      is not well established, nor is its vulnerability to subversion by\n  \
    \    an attacker.  Hence, reliance on the use of such bindings should\n      be\
    \ strictly limited.  In particular, it is not at all clear to\n      what extent\
    \ a typical end-user recipient can rely on any\n      assurances that might be\
    \ made by successful use of the SDID or\n      AUID.\n"
- title: 4.  Semantics of Multiple Signatures
  contents:
  - '4.  Semantics of Multiple Signatures

    '
- title: 4.1.  Example Scenarios
  contents:
  - "4.1.  Example Scenarios\n   There are many reasons why a message might have multiple\
    \ signatures.\n   For example, suppose SHA-256 is in the future found to be\n\
    \   insufficiently strong, and DKIM usage transitions to SHA-1024.  A\n   Signer\
    \ might immediately sign using the newer algorithm but also\n   continue to sign\
    \ using the older algorithm for interoperability with\n   Verifiers that had not\
    \ yet upgraded.  The Signer would do this by\n   adding two DKIM-Signature header\
    \ fields, one using each algorithm.\n   Older Verifiers that did not recognize\
    \ SHA-1024 as an acceptable\n   algorithm would skip that signature and use the\
    \ older algorithm;\n   newer Verifiers could use either signature at their option\
    \ and, all\n   other things being equal, might not even attempt to verify the\
    \ other\n   signature.\n   Similarly, a Signer might sign a message including\
    \ all header fields\n   and no \"l=\" tag (to satisfy strict Verifiers) and a\
    \ second time with\n   a limited set of header fields and an \"l=\" tag (in anticipation\
    \ of\n   possible message modifications en route to other Verifiers).\n   Verifiers\
    \ could then choose which signature they prefer.\n   Of course, a message might\
    \ also have multiple signatures because it\n   passed through multiple Signers.\
    \  A common case is expected to be\n   that of a signed message that passes through\
    \ a mailing list that also\n   signs all messages.  Assuming both of those signatures\
    \ verify, a\n   recipient might choose to accept the message if either of those\n\
    \   signatures were known to come from trusted sources.\n   In particular, recipients\
    \ might choose to whitelist mailing lists to\n   which they have subscribed and\
    \ that have acceptable anti-abuse\n   policies so as to accept messages sent to\
    \ that list even from unknown\n   authors.  They might also subscribe to less\
    \ trusted mailing lists\n   (e.g., those without anti-abuse protection) and be\
    \ willing to accept\n   all messages from specific authors but insist on doing\
    \ additional\n   abuse scanning for other messages.\n   Another related example\
    \ of multiple Signers might be forwarding\n   services, such as those commonly\
    \ associated with academic alumni\n   sites.  For example, a recipient might have\
    \ an address at\n   members.example.org, a site that has anti-abuse protection\
    \ that is\n   somewhat less effective than the recipient would prefer.  Such a\n\
    \   recipient might have specific authors whose messages would be trusted\n  \
    \ absolutely, but messages from unknown authors that had passed the\n   forwarder's\
    \ scrutiny would have only medium trust.\n"
- title: 4.2.  Interpretation
  contents:
  - "4.2.  Interpretation\n   A Signer that is adding a signature to a message merely\
    \ creates a new\n   DKIM-Signature header, using the usual semantics of the \"\
    h=\" option.\n   A Signer MAY sign previously existing DKIM-Signature header fields\n\
    \   using the method described in Section 5.4 to sign trace header\n   fields.\n\
    \   Note that Signers should be cognizant that signing DKIM-Signature\n   header\
    \ fields may result in signature failures with intermediaries\n   that do not\
    \ recognize that DKIM-Signature header fields are trace\n   header fields and\
    \ unwittingly reorder them, thus breaking such\n   signatures.  For this reason,\
    \ signing existing DKIM-Signature header\n   fields is unadvised, albeit legal.\n\
    \      INFORMATIVE NOTE: If a header field with multiple instances is\n      signed,\
    \ those header fields are always signed from the bottom up.\n      Thus, it is\
    \ not possible to sign only specific DKIM-Signature\n      header fields.  For\
    \ example, if the message being signed already\n      contains three DKIM-Signature\
    \ header fields A, B, and C, it is\n      possible to sign all of them, B and\
    \ C only, or C only, but not A\n      only, B only, A and B only, or A and C only.\n\
    \   A Signer MAY add more than one DKIM-Signature header field using\n   different\
    \ parameters.  For example, during a transition period, a\n   Signer might want\
    \ to produce signatures using two different hash\n   algorithms.\n   Signers SHOULD\
    \ NOT remove any DKIM-Signature header fields from\n   messages they are signing,\
    \ even if they know that the signatures\n   cannot be verified.\n   When evaluating\
    \ a message with multiple signatures, a Verifier SHOULD\n   evaluate signatures\
    \ independently and on their own merits.  For\n   example, a Verifier that by\
    \ policy chooses not to accept signatures\n   with deprecated cryptographic algorithms\
    \ would consider such\n   signatures invalid.  Verifiers MAY process signatures\
    \ in any order of\n   their choice; for example, some Verifiers might choose to\
    \ process\n   signatures corresponding to the From field in the message header\n\
    \   before other signatures.  See Section 6.1 for more information about\n   signature\
    \ choices.\n      INFORMATIVE IMPLEMENTATION NOTE: Verifier attempts to correlate\n\
    \      valid signatures with invalid signatures in an attempt to guess\n     \
    \ why a signature failed are ill-advised.  In particular, there is\n      no general\
    \ way that a Verifier can determine that an invalid\n      signature was ever\
    \ valid.\n   Verifiers SHOULD continue to check signatures until a signature\n\
    \   successfully verifies to the satisfaction of the Verifier.  To limit\n   potential\
    \ denial-of-service attacks, Verifiers MAY limit the total\n   number of signatures\
    \ they will attempt to verify.\n   If a Verifier module reports signatures whose\
    \ evaluations produced\n   PERMFAIL results, Identity Assessors SHOULD ignore\
    \ those signatures\n   (see Section 6.1), acting as though they were not present\
    \ in the\n   message.\n"
- title: 5.  Signer Actions
  contents:
  - "5.  Signer Actions\n   The following steps are performed in order by Signers.\n"
- title: 5.1.  Determine Whether the Email Should Be Signed and by Whom
  contents:
  - "5.1.  Determine Whether the Email Should Be Signed and by Whom\n   A Signer can\
    \ obviously only sign email for domains for which it has a\n   private key and\
    \ the necessary knowledge of the corresponding public\n   key and selector information.\
    \  However, there are a number of other\n   reasons beyond the lack of a private\
    \ key why a Signer could choose\n   not to sign an email.\n      INFORMATIVE NOTE:\
    \ A Signer can be implemented as part of any\n      portion of the mail system\
    \ as deemed appropriate, including an\n      MUA, a SUBMISSION server, or an MTA.\
    \  Wherever implemented,\n      Signers should beware of signing (and thereby\
    \ asserting\n      responsibility for) messages that may be problematic.  In\n\
    \      particular, within a trusted enclave, the signing domain might be\n   \
    \   derived from the header according to local policy; SUBMISSION\n      servers\
    \ might only sign messages from users that are properly\n      authenticated and\
    \ authorized.\n      INFORMATIVE IMPLEMENTER ADVICE: SUBMISSION servers should\
    \ not sign\n      Received header fields if the outgoing gateway MTA obfuscates\n\
    \      Received header fields, for example, to hide the details of\n      internal\
    \ topology.\n   If an email cannot be signed for some reason, it is a local policy\n\
    \   decision as to what to do with that email.\n"
- title: 5.2.  Select a Private Key and Corresponding Selector Information
  contents:
  - "5.2.  Select a Private Key and Corresponding Selector Information\n   This specification\
    \ does not define the basis by which a Signer should\n   choose which private\
    \ key and selector information to use.  Currently,\n   all selectors are equal\
    \ as far as this specification is concerned, so\n   the decision should largely\
    \ be a matter of administrative\n   convenience.  Distribution and management\
    \ of private keys is also\n   outside the scope of this document.\n      INFORMATIVE\
    \ OPERATIONS ADVICE: A Signer should not sign with a\n      private key when the\
    \ selector containing the corresponding public\n      key is expected to be revoked\
    \ or removed before the Verifier has\n      an opportunity to validate the signature.\
    \  The Signer should\n      anticipate that Verifiers can choose to defer validation,\
    \ perhaps\n      until the message is actually read by the final recipient.  In\n\
    \      particular, when rotating to a new key pair, signing should\n      immediately\
    \ commence with the new private key, and the old public\n      key should be retained\
    \ for a reasonable validation interval before\n      being removed from the key\
    \ server.\n"
- title: 5.3.  Normalize the Message to Prevent Transport Conversions
  contents:
  - "5.3.  Normalize the Message to Prevent Transport Conversions\n   Some messages,\
    \ particularly those using 8-bit characters, are subject\n   to modification during\
    \ transit, notably conversion to 7-bit form.\n   Such conversions will break DKIM\
    \ signatures.  In order to minimize\n   the chances of such breakage, Signers\
    \ SHOULD convert the message to a\n   suitable MIME content-transfer encoding\
    \ such as quoted-printable or\n   base64 as described in [RFC2045] before signing.\
    \  Such conversion is\n   outside the scope of DKIM; the actual message SHOULD\
    \ be converted to\n   7-bit MIME by an MUA or MSA prior to presentation to the\
    \ DKIM\n   algorithm.\n   If the message is submitted to the Signer with any local\
    \ encoding\n   that will be modified before transmission, that modification to\n\
    \   canonical [RFC5322] form MUST be done before signing.  In particular,\n  \
    \ bare CR or LF characters (used by some systems as a local line\n   separator\
    \ convention) MUST be converted to the SMTP-standard CRLF\n   sequence before\
    \ the message is signed.  Any conversion of this sort\n   SHOULD be applied to\
    \ the message actually sent to the recipient(s),\n   not just to the version presented\
    \ to the signing algorithm.\n   More generally, the Signer MUST sign the message\
    \ as it is expected to\n   be received by the Verifier rather than in some local\
    \ or internal\n   form.\n"
- title: 5.3.1.  Body Length Limits
  contents:
  - "5.3.1.  Body Length Limits\n   A body length count MAY be specified to limit\
    \ the signature\n   calculation to an initial prefix of the body text, measured\
    \ in\n   octets.  If the body length count is not specified, the entire\n   message\
    \ body is signed.\n      INFORMATIVE RATIONALE: This capability is provided because\
    \ it is\n      very common for mailing lists to add trailers to messages (e.g.,\n\
    \      instructions on how to get off the list).  Until those messages\n     \
    \ are also signed, the body length count is a useful tool for the\n      Verifier\
    \ since it can, as a matter of policy, accept messages\n      having valid signatures\
    \ with extraneous data.\n   The length actually hashed should be inserted in the\
    \ \"l=\" tag of the\n   DKIM-Signature header field.  (See Section 3.5.)\n   The\
    \ body length count allows the Signer of a message to permit data\n   to be appended\
    \ to the end of the body of a signed message.  The body\n   length count MUST\
    \ be calculated following the canonicalization\n   algorithm; for example, any\
    \ whitespace ignored by a canonicalization\n   algorithm is not included as part\
    \ of the body length count.\n   A body length count of zero means that the body\
    \ is completely\n   unsigned.\n   Signers wishing to ensure that no modification\
    \ of any sort can occur\n   should specify the \"simple\" canonicalization algorithm\
    \ for both\n   header and body and omit the body length count.\n   See Section\
    \ 8.2 for further discussion.\n"
- title: 5.4.  Determine the Header Fields to Sign
  contents:
  - "5.4.  Determine the Header Fields to Sign\n   The From header field MUST be signed\
    \ (that is, included in the \"h=\"\n   tag of the resulting DKIM-Signature header\
    \ field).  Signers SHOULD\n   NOT sign an existing header field likely to be legitimately\
    \ modified\n   or removed in transit.  In particular, [RFC5321] explicitly permits\n\
    \   modification or removal of the Return-Path header field in transit.\n   Signers\
    \ MAY include any other header fields present at the time of\n   signing at the\
    \ discretion of the Signer.\n      INFORMATIVE OPERATIONS NOTE: The choice of\
    \ which header fields to\n      sign is non-obvious.  One strategy is to sign\
    \ all existing, non-\n      repeatable header fields.  An alternative strategy\
    \ is to sign only\n      header fields that are likely to be displayed to or otherwise\
    \ be\n      likely to affect the processing of the message at the receiver.  A\n\
    \      third strategy is to sign only \"well-known\" headers.  Note that\n   \
    \   Verifiers may treat unsigned header fields with extreme\n      skepticism,\
    \ including refusing to display them to the end user or\n      even ignoring the\
    \ signature if it does not cover certain header\n      fields.  For this reason,\
    \ signing fields present in the message\n      such as Date, Subject, Reply-To,\
    \ Sender, and all MIME header\n      fields are highly advised.\n   The DKIM-Signature\
    \ header field is always implicitly signed and MUST\n   NOT be included in the\
    \ \"h=\" tag except to indicate that other\n   preexisting signatures are also\
    \ signed.\n   Signers MAY claim to have signed header fields that do not exist\n\
    \   (that is, Signers MAY include the header field name in the \"h=\" tag\n  \
    \ even if that header field does not exist in the message).  When\n   computing\
    \ the signature, the nonexisting header field MUST be treated\n   as the null\
    \ string (including the header field name, header field\n   value, all punctuation,\
    \ and the trailing CRLF).\n      INFORMATIVE RATIONALE: This allows Signers to\
    \ explicitly assert\n      the absence of a header field; if that header field\
    \ is added\n      later, the signature will fail.\n      INFORMATIVE NOTE: A header\
    \ field name need only be listed once\n      more than the actual number of that\
    \ header field in a message at\n      the time of signing in order to prevent\
    \ any further additions.\n      For example, if there is a single Comments header\
    \ field at the\n      time of signing, listing Comments twice in the \"h=\" tag\
    \ is\n      sufficient to prevent any number of Comments header fields from\n\
    \      being appended; it is not necessary (but is legal) to list\n      Comments\
    \ three or more times in the \"h=\" tag.\n   Refer to Section 5.4.2 for a discussion\
    \ of the procedure to be\n   followed when canonicalizing a header with more than\
    \ one instance of\n   a particular header field name.\n   Signers need to be careful\
    \ of signing header fields that might have\n   additional instances added later\
    \ in the delivery process, since such\n   header fields might be inserted after\
    \ the signed instance or\n   otherwise reordered.  Trace header fields (such as\
    \ Received) and\n   Resent-* blocks are the only fields prohibited by [RFC5322]\
    \ from\n   being reordered.  In particular, since DKIM-Signature header fields\n\
    \   may be reordered by some intermediate MTAs, signing existing DKIM-\n   Signature\
    \ header fields is error-prone.\n      INFORMATIVE ADMONITION: Despite the fact\
    \ that [RFC5322] does not\n      prohibit the reordering of header fields, reordering\
    \ of signed\n      header fields with multiple instances by intermediate MTAs\
    \ will\n      cause DKIM signatures to be broken; such antisocial behavior\n \
    \     should be avoided.\n      INFORMATIVE IMPLEMENTER'S NOTE: Although not required\
    \ by this\n      specification, all end-user visible header fields should be signed\n\
    \      to avoid possible \"indirect spamming\".  For example, if the\n      Subject\
    \ header field is not signed, a spammer can resend a\n      previously signed\
    \ mail, replacing the legitimate subject with a\n      one-line spam.\n"
- title: 5.4.1.  Recommended Signature Content
  contents:
  - "5.4.1.  Recommended Signature Content\n   The purpose of the DKIM cryptographic\
    \ algorithm is to affix an\n   identifier to the message in a way that is both\
    \ robust against normal\n   transit-related changes and resistant to kinds of\
    \ replay attacks.  An\n   essential aspect of satisfying these requirements is\
    \ choosing what\n   header fields to include in the hash and what fields to exclude.\n\
    \   The basic rule for choosing fields to include is to select those\n   fields\
    \ that constitute the \"core\" of the message content.  Hence, any\n   replay\
    \ attack will have to include these in order to have the\n   signature succeed;\
    \ however, with these included, the core of the\n   message is valid, even if\
    \ sent on to new recipients.\n   Common examples of fields with addresses and\
    \ fields with textual\n   content related to the body are:\n   o  From (REQUIRED;\
    \ see Section 5.4)\n   o  Reply-To\n   o  Subject\n   o  Date\n   o  To, Cc\n\
    \   o  Resent-Date, Resent-From, Resent-To, Resent-Cc\n   o  In-Reply-To, References\n\
    \   o  List-Id, List-Help, List-Unsubscribe, List-Subscribe, List-Post,\n    \
    \  List-Owner, List-Archive\n   If the \"l=\" signature tag is in use (see Section\
    \ 3.5), the Content-\n   Type field is also a candidate for being included as\
    \ it could be\n   replaced in a way that causes completely different content to\
    \ be\n   rendered to the receiving user.\n   There are trade-offs in the decision\
    \ of what constitutes the \"core\"\n   of the message, which for some fields is\
    \ a subjective concept.\n   Including fields such as \"Message-ID\", for example,\
    \ is useful if one\n   considers a mechanism for being able to distinguish separate\n\
    \   instances of the same message to be core content.  Similarly, \"In-\n   Reply-To\"\
    \ and \"References\" might be desirable to include if one\n   considers message\
    \ threading to be a core part of the message.\n   Another class of fields that\
    \ may be of interest are those that convey\n   security-related information about\
    \ the message, such as\n   Authentication-Results [RFC5451].\n   The basic rule\
    \ for choosing fields to exclude is to select those\n   fields for which there\
    \ are multiple fields with the same name and\n   fields that are modified in transit.\
    \  Examples of these are:\n   o  Return-Path\n   o  Received\n   o  Comments,\
    \ Keywords\n   Note that the DKIM-Signature field is also excluded from the header\n\
    \   hash because its handling is specified separately.\n   Typically, it is better\
    \ to exclude other optional fields because of\n   the potential that additional\
    \ fields of the same name will be\n   legitimately added or reordered prior to\
    \ verification.  There are\n   likely to be legitimate exceptions to this rule\
    \ because of the wide\n   variety of application-specific header fields that might\
    \ be applied\n   to a message, some of which are unlikely to be duplicated, modified,\n\
    \   or reordered.\n   Signers SHOULD choose canonicalization algorithms based\
    \ on the types\n   of messages they process and their aversion to risk.  For example,\n\
    \   e-commerce sites sending primarily purchase receipts, which are not\n   expected\
    \ to be processed by mailing lists or other software likely to\n   modify messages,\
    \ will generally prefer \"simple\" canonicalization.\n   Sites sending primarily\
    \ person-to-person email will likely prefer to\n   be more resilient to modification\
    \ during transport by using \"relaxed\"\n   canonicalization.\n   Unless mail\
    \ is processed through intermediaries, such as mailing\n   lists that might add\
    \ \"unsubscribe\" instructions to the bottom of the\n   message body, the \"l=\"\
    \ tag is likely to convey no additional benefit\n   while providing an avenue\
    \ for unauthorized addition of text to a\n   message.  The use of \"l=0\" takes\
    \ this to the extreme, allowing\n   complete alteration of the text of the message\
    \ without invalidating\n   the signature.  Moreover, a Verifier would be within\
    \ its rights to\n   consider a partly signed message body as unacceptable.  Judicious\
    \ use\n   is advised.\n"
- title: 5.4.2.  Signatures Involving Multiple Instances of a Field
  contents:
  - "5.4.2.  Signatures Involving Multiple Instances of a Field\n   Signers choosing\
    \ to sign an existing header field that occurs more\n   than once in the message\
    \ (such as Received) MUST sign the physically\n   last instance of that header\
    \ field in the header block.  Signers\n   wishing to sign multiple instances of\
    \ such a header field MUST\n   include the header field name multiple times in\
    \ the \"h=\" tag of the\n   DKIM-Signature header field and MUST sign such header\
    \ fields in order\n   from the bottom of the header field block to the top.  The\
    \ Signer MAY\n   include more instances of a header field name in \"h=\" than\
    \ there are\n   actual corresponding header fields so that the signature will\
    \ not\n   verify if additional header fields of that name are added.\n      INFORMATIVE\
    \ EXAMPLE:\n      If the Signer wishes to sign two existing Received header fields,\n\
    \      and the existing header contains:\n      Received: <A>\n      Received:\
    \ <B>\n      Received: <C>\n      then the resulting DKIM-Signature header field\
    \ should read:\n      DKIM-Signature: ... h=Received : Received :...\n      and\
    \ Received header fields <C> and <B> will be signed in that\n      order.\n"
- title: 5.5.  Compute the Message Hash and Signature
  contents:
  - "5.5.  Compute the Message Hash and Signature\n   The Signer MUST compute the\
    \ message hash as described in Section 3.7\n   and then sign it using the selected\
    \ public-key algorithm.  This will\n   result in a DKIM-Signature header field\
    \ that will include the body\n   hash and a signature of the header hash, where\
    \ that header includes\n   the DKIM-Signature header field itself.\n   Entities\
    \ such as mailing list managers that implement DKIM and that\n   modify the message\
    \ or a header field (for example, inserting\n   unsubscribe information) before\
    \ retransmitting the message SHOULD\n   check any existing signature on input\
    \ and MUST make such\n   modifications before re-signing the message.\n"
- title: 5.6.  Insert the DKIM-Signature Header Field
  contents:
  - "5.6.  Insert the DKIM-Signature Header Field\n   Finally, the Signer MUST insert\
    \ the DKIM-Signature header field\n   created in the previous step prior to transmitting\
    \ the email.  The\n   DKIM-Signature header field MUST be the same as used to\
    \ compute the\n   hash as described above, except that the value of the \"b=\"\
    \ tag MUST\n   be the appropriately signed hash computed in the previous step,\n\
    \   signed using the algorithm specified in the \"a=\" tag of the DKIM-\n   Signature\
    \ header field and using the private key corresponding to the\n   selector given\
    \ in the \"s=\" tag of the DKIM-Signature header field, as\n   chosen above in\
    \ Section 5.2.\n   The DKIM-Signature header field MUST be inserted before any\
    \ other\n   DKIM-Signature fields in the header block.\n      INFORMATIVE IMPLEMENTATION\
    \ NOTE: The easiest way to achieve this\n      is to insert the DKIM-Signature\
    \ header field at the beginning of\n      the header block.  In particular, it\
    \ may be placed before any\n      existing Received header fields.  This is consistent\
    \ with treating\n      DKIM-Signature as a trace header field.\n"
- title: 6.  Verifier Actions
  contents:
  - "6.  Verifier Actions\n   Since a Signer MAY remove or revoke a public key at\
    \ any time, it is\n   advised that verification occur in a timely manner.  In\
    \ many\n   configurations, the most timely place is during acceptance by the\n\
    \   border MTA or shortly thereafter.  In particular, deferring\n   verification\
    \ until the message is accessed by the end user is\n   discouraged.\n   A border\
    \ or intermediate MTA MAY verify the message signature(s).  An\n   MTA who has\
    \ performed verification MAY communicate the result of that\n   verification by\
    \ adding a verification header field to incoming\n   messages.  This simplifies\
    \ things considerably for the user, who can\n   now use an existing mail user\
    \ agent.  Most MUAs have the ability to\n   filter messages based on message header\
    \ fields or content; these\n   filters would be used to implement whatever policy\
    \ the user wishes\n   with respect to unsigned mail.\n   A verifying MTA MAY implement\
    \ a policy with respect to unverifiable\n   mail, regardless of whether or not\
    \ it applies the verification header\n   field to signed messages.\n   Verifiers\
    \ MUST produce a result that is semantically equivalent to\n   applying the steps\
    \ listed in Sections 6.1, 6.1.1, and 6.1.2 in order.\n   In practice, several\
    \ of these steps can be performed in parallel in\n   order to improve performance.\n"
- title: 6.1.  Extract Signatures from the Message
  contents:
  - "6.1.  Extract Signatures from the Message\n   The order in which Verifiers try\
    \ DKIM-Signature header fields is not\n   defined; Verifiers MAY try signatures\
    \ in any order they like.  For\n   example, one implementation might try the signatures\
    \ in textual\n   order, whereas another might try signatures by identities that\
    \ match\n   the contents of the From header field before trying other signatures.\n\
    \   Verifiers MUST NOT attribute ultimate meaning to the order of\n   multiple\
    \ DKIM-Signature header fields.  In particular, there is\n   reason to believe\
    \ that some relays will reorder the header fields in\n   potentially arbitrary\
    \ ways.\n      INFORMATIVE IMPLEMENTATION NOTE: Verifiers might use the order\
    \ as\n      a clue to signing order in the absence of any other information.\n\
    \      However, other clues as to the semantics of multiple signatures\n     \
    \ (such as correlating the signing host with Received header fields)\n      might\
    \ also be considered.\n   Survivability of signatures after transit is not guaranteed,\
    \ and\n   signatures can fail to verify through no fault of the Signer.\n   Therefore,\
    \ a Verifier SHOULD NOT treat a message that has one or more\n   bad signatures\
    \ and no good signatures differently from a message with\n   no signature at all.\n\
    \   When a signature successfully verifies, a Verifier will either stop\n   processing\
    \ or attempt to verify any other signatures, at the\n   discretion of the implementation.\
    \  A Verifier MAY limit the number of\n   signatures it tries, in order to avoid\
    \ denial-of-service attacks (see\n   Section 8.4 for further discussion).\n  \
    \ In the following description, text reading \"return status\n   (explanation)\"\
    \ (where \"status\" is one of \"PERMFAIL\" or \"TEMPFAIL\")\n   means that the\
    \ Verifier MUST immediately cease processing that\n   signature.  The Verifier\
    \ SHOULD proceed to the next signature, if one\n   is present, and completely\
    \ ignore the bad signature.  If the status\n   is \"PERMFAIL\", the signature\
    \ failed and should not be reconsidered.\n   If the status is \"TEMPFAIL\", the\
    \ signature could not be verified at\n   this time but may be tried again later.\
    \  A Verifier MAY either\n   arrange to defer the message for later processing\
    \ or try another\n   signature; if no good signature is found and any of the signatures\n\
    \   resulted in a TEMPFAIL status, the Verifier MAY arrange to defer the\n   message\
    \ for later processing.  The \"(explanation)\" is not normative\n   text; it is\
    \ provided solely for clarification.\n   Verifiers that are prepared to validate\
    \ multiple signature header\n   fields SHOULD proceed to the next signature header\
    \ field, if one\n   exists.  However, Verifiers MAY make note of the fact that\
    \ an invalid\n   signature was present for consideration at a later step.\n  \
    \    INFORMATIVE NOTE: The rationale of this requirement is to permit\n      messages\
    \ that have invalid signatures but also a valid signature\n      to work.  For\
    \ example, a mailing list exploder might opt to leave\n      the original submitter\
    \ signature in place even though the exploder\n      knows that it is modifying\
    \ the message in some way that will break\n      that signature, and the exploder\
    \ inserts its own signature.  In\n      this case, the message should succeed\
    \ even in the presence of the\n      known-broken signature.\n   For each signature\
    \ to be validated, the following steps should be\n   performed in such a manner\
    \ as to produce a result that is\n   semantically equivalent to performing them\
    \ in the indicated order.\n"
- title: 6.1.1.  Validate the Signature Header Field
  contents:
  - "6.1.1.  Validate the Signature Header Field\n   Implementers MUST meticulously\
    \ validate the format and values in the\n   DKIM-Signature header field; any inconsistency\
    \ or unexpected values\n   MUST cause the header field to be completely ignored\
    \ and the Verifier\n   to return PERMFAIL (signature syntax error).  Being \"\
    liberal in what\n   you accept\" is definitely a bad strategy in this security\
    \ context.\n   Note, however, that this does not include the existence of unknown\n\
    \   tags in a DKIM-Signature header field, which are explicitly\n   permitted.\
    \  Verifiers MUST return PERMFAIL (incompatible version)\n   when presented a\
    \ DKIM-Signature header field with a \"v=\" tag that is\n   inconsistent with\
    \ this specification.\n      INFORMATIVE IMPLEMENTATION NOTE: An implementation\
    \ may, of course,\n      choose to also verify signatures generated by older versions\
    \ of\n      this specification.\n   If any tag listed as \"required\" in Section\
    \ 3.5 is omitted from the\n   DKIM-Signature header field, the Verifier MUST ignore\
    \ the DKIM-\n   Signature header field and return PERMFAIL (signature missing\n\
    \   required tag).\n      INFORMATIVE NOTE: The tags listed as required in Section\
    \ 3.5 are\n      \"v=\", \"a=\", \"b=\", \"bh=\", \"d=\", \"h=\", and \"s=\".\
    \  Should there be a\n      conflict between this note and Section 3.5, Section\
    \ 3.5 is\n      normative.\n   If the DKIM-Signature header field does not contain\
    \ the \"i=\" tag, the\n   Verifier MUST behave as though the value of that tag\
    \ were \"@d\", where\n   \"d\" is the value from the \"d=\" tag.\n   Verifiers\
    \ MUST confirm that the domain specified in the \"d=\" tag is\n   the same as\
    \ or a parent domain of the domain part of the \"i=\" tag.\n   If not, the DKIM-Signature\
    \ header field MUST be ignored, and the\n   Verifier should return PERMFAIL (domain\
    \ mismatch).\n   If the \"h=\" tag does not include the From header field, the\
    \ Verifier\n   MUST ignore the DKIM-Signature header field and return PERMFAIL\
    \ (From\n   field not signed).\n   Verifiers MAY ignore the DKIM-Signature header\
    \ field and return\n   PERMFAIL (signature expired) if it contains an \"x=\" tag\
    \ and the\n   signature has expired.\n   Verifiers MAY ignore the DKIM-Signature\
    \ header field if the domain\n   used by the Signer in the \"d=\" tag is not associated\
    \ with a valid\n   signing entity.  For example, signatures with \"d=\" values\
    \ such as\n   \"com\" and \"co.uk\" could be ignored.  The list of unacceptable\
    \ domains\n   SHOULD be configurable.\n   Verifiers MAY ignore the DKIM-Signature\
    \ header field and return\n   PERMFAIL (unacceptable signature header) for any\
    \ other reason, for\n   example, if the signature does not sign header fields\
    \ that the\n   Verifier views to be essential.  As a case in point, if MIME header\n\
    \   fields are not signed, certain attacks may be possible that the\n   Verifier\
    \ would prefer to avoid.\n"
- title: 6.1.2.  Get the Public Key
  contents:
  - "6.1.2.  Get the Public Key\n   The public key for a signature is needed to complete\
    \ the verification\n   process.  The process of retrieving the public key depends\
    \ on the\n   query type as defined by the \"q=\" tag in the DKIM-Signature header\n\
    \   field.  Obviously, a public key need only be retrieved if the process\n  \
    \ of extracting the signature information is completely successful.\n   Details\
    \ of key management and representation are described in\n   Section 3.6.  The\
    \ Verifier MUST validate the key record and MUST\n   ignore any public-key records\
    \ that are malformed.\n      NOTE: The use of a wildcard TXT RR that covers a\
    \ queried DKIM\n      domain name will produce a response to a DKIM query that\
    \ is\n      unlikely to be a valid DKIM key record.  This problem is not\n   \
    \   specific to DKIM and applies to many other types of queries.\n      Client\
    \ software that processes DNS responses needs to take this\n      problem into\
    \ account.\n   When validating a message, a Verifier MUST perform the following\n\
    \   steps in a manner that is semantically the same as performing them in\n  \
    \ the order indicated; in some cases, the implementation may\n   parallelize or\
    \ reorder these steps, as long as the semantics remain\n   unchanged:\n   1. \
    \ The Verifier retrieves the public key as described in Section 3.6\n       using\
    \ the algorithm in the \"q=\" tag, the domain from the \"d=\"\n       tag, and\
    \ the selector from the \"s=\" tag.\n   2.  If the query for the public key fails\
    \ to respond, the Verifier\n       MAY seek a later verification attempt by returning\
    \ TEMPFAIL (key\n       unavailable).\n   3.  If the query for the public key\
    \ fails because the corresponding\n       key record does not exist, the Verifier\
    \ MUST immediately return\n       PERMFAIL (no key for signature).\n   4.  If\
    \ the query for the public key returns multiple key records, the\n       Verifier\
    \ can choose one of the key records or may cycle through\n       the key records,\
    \ performing the remainder of these steps on each\n       record at the discretion\
    \ of the implementer.  The order of the\n       key records is unspecified.  If\
    \ the Verifier chooses to cycle\n       through the key records, then the \"return\
    \ ...\" wording in the\n       remainder of this section means \"try the next\
    \ key record, if any;\n       if none, return to try another signature in the\
    \ usual way\".\n   5.  If the result returned from the query does not adhere to\
    \ the\n       format defined in this specification, the Verifier MUST ignore\n\
    \       the key record and return PERMFAIL (key syntax error).  Verifiers\n  \
    \     are urged to validate the syntax of key records carefully to\n       avoid\
    \ attempted attacks.  In particular, the Verifier MUST ignore\n       keys with\
    \ a version code (\"v=\" tag) that they do not implement.\n   6.  If the \"h=\"\
    \ tag exists in the public-key record and the hash\n       algorithm implied by\
    \ the \"a=\" tag in the DKIM-Signature header\n       field is not included in\
    \ the contents of the \"h=\" tag, the\n       Verifier MUST ignore the key record\
    \ and return PERMFAIL\n       (inappropriate hash algorithm).\n   7.  If the public-key\
    \ data (the \"p=\" tag) is empty, then this key has\n       been revoked and the\
    \ Verifier MUST treat this as a failed\n       signature check and return PERMFAIL\
    \ (key revoked).  There is no\n       defined semantic difference between a key\
    \ that has been revoked\n       and a key record that has been removed.\n   8.\
    \  If the public-key data is not suitable for use with the algorithm\n       and\
    \ key types defined by the \"a=\" and \"k=\" tags in the DKIM-\n       Signature\
    \ header field, the Verifier MUST immediately return\n       PERMFAIL (inappropriate\
    \ key algorithm).\n"
- title: 6.1.3.  Compute the Verification
  contents:
  - "6.1.3.  Compute the Verification\n   Given a Signer and a public key, verifying\
    \ a signature consists of\n   actions semantically equivalent to the following\
    \ steps.\n   1.  Based on the algorithm defined in the \"c=\" tag, the body length\n\
    \       specified in the \"l=\" tag, and the header field names in the \"h=\"\n\
    \       tag, prepare a canonicalized version of the message as is\n       described\
    \ in Section 3.7 (note that this canonicalized version\n       does not actually\
    \ replace the original content).  When matching\n       header field names in\
    \ the \"h=\" tag against the actual message\n       header field, comparisons\
    \ MUST be case-insensitive.\n   2.  Based on the algorithm indicated in the \"\
    a=\" tag, compute the\n       message hashes from the canonical copy as described\
    \ in\n       Section 3.7.\n   3.  Verify that the hash of the canonicalized message\
    \ body computed\n       in the previous step matches the hash value conveyed in\
    \ the \"bh=\"\n       tag.  If the hash does not match, the Verifier SHOULD ignore\
    \ the\n       signature and return PERMFAIL (body hash did not verify).\n   4.\
    \  Using the signature conveyed in the \"b=\" tag, verify the\n       signature\
    \ against the header hash using the mechanism appropriate\n       for the public-key\
    \ algorithm described in the \"a=\" tag.  If the\n       signature does not validate,\
    \ the Verifier SHOULD ignore the\n       signature and return PERMFAIL (signature\
    \ did not verify).\n   5.  Otherwise, the signature has correctly verified.\n\
    \      INFORMATIVE IMPLEMENTER'S NOTE: Implementations might wish to\n      initiate\
    \ the public-key query in parallel with calculating the\n      hash as the public\
    \ key is not needed until the final decryption is\n      calculated.  Implementations\
    \ may also verify the signature on the\n      message header before validating\
    \ that the message hash listed in\n      the \"bh=\" tag in the DKIM-Signature\
    \ header field matches that of\n      the actual message body; however, if the\
    \ body hash does not match,\n      the entire signature must be considered to\
    \ have failed.\n   A body length specified in the \"l=\" tag of the signature\
    \ limits the\n   number of bytes of the body passed to the verification algorithm.\n\
    \   All data beyond that limit is not validated by DKIM.  Hence,\n   Verifiers\
    \ might treat a message that contains bytes beyond the\n   indicated body length\
    \ with suspicion and can choose to treat the\n   signature as if it were invalid\
    \ (e.g., by returning PERMFAIL\n   (unsigned content)).\n   Should the algorithm\
    \ reach this point, the verification has\n   succeeded, and DKIM reports SUCCESS\
    \ for this signature.\n"
- title: 6.2.  Communicate Verification Results
  contents:
  - "6.2.  Communicate Verification Results\n   Verifiers wishing to communicate the\
    \ results of verification to other\n   parts of the mail system may do so in whatever\
    \ manner they see fit.\n   For example, implementations might choose to add an\
    \ email header\n   field to the message before passing it on.  Any such header\
    \ field\n   SHOULD be inserted before any existing DKIM-Signature or preexisting\n\
    \   authentication status header fields in the header field block.  The\n   Authentication-Results:\
    \ header field ([RFC5451]) MAY be used for this\n   purpose.\n      INFORMATIVE\
    \ ADVICE to MUA filter writers: Patterns intended to\n      search for results\
    \ header fields to visibly mark authenticated\n      mail for end users should\
    \ verify that such a header field was\n      added by the appropriate verifying\
    \ domain and that the verified\n      identity matches the author identity that\
    \ will be displayed by the\n      MUA.  In particular, MUA filters should not\
    \ be influenced by bogus\n      results header fields added by attackers.  To\
    \ circumvent this\n      attack, Verifiers MAY wish to request deletion of existing\
    \ results\n      header fields after verification and before arranging to add\
    \ a new\n      header field.\n"
- title: 6.3.  Interpret Results/Apply Local Policy
  contents:
  - "6.3.  Interpret Results/Apply Local Policy\n   It is beyond the scope of this\
    \ specification to describe what actions\n   an Identity Assessor can make, but\
    \ mail carrying a validated SDID\n   presents an opportunity to an Identity Assessor\
    \ that unauthenticated\n   email does not.  Specifically, an authenticated email\
    \ creates a\n   predictable identifier by which other decisions can reliably be\n\
    \   managed, such as trust and reputation.  Conversely, unauthenticated\n   email\
    \ lacks a reliable identifier that can be used to assign trust\n   and reputation.\
    \  It is reasonable to treat unauthenticated email as\n   lacking any trust and\
    \ having no positive reputation.\n   In general, modules that consume DKIM verification\
    \ output SHOULD NOT\n   determine message acceptability based solely on a lack\
    \ of any\n   signature or on an unverifiable signature; such rejection would cause\n\
    \   severe interoperability problems.  If an MTA does wish to reject such\n  \
    \ messages during an SMTP session (for example, when communicating with\n   a\
    \ peer who, by prior agreement, agrees to only send signed messages),\n   and\
    \ a signature is missing or does not verify, the handling MTA\n   SHOULD use a\
    \ 550/5.7.x reply code.\n   Where the Verifier is integrated within the MTA and\
    \ it is not\n   possible to fetch the public key, perhaps because the key server\
    \ is\n   not available, a temporary failure message MAY be generated using a\n\
    \   451/4.7.5 reply code, such as:\n   451 4.7.5 Unable to verify signature -\
    \ key server unavailable\n   Temporary failures such as inability to access the\
    \ key server or\n   other external service are the only conditions that SHOULD\
    \ use a 4xx\n   SMTP reply code.  In particular, cryptographic signature verification\n\
    \   failures MUST NOT provoke 4xx SMTP replies.\n   Once the signature has been\
    \ verified, that information MUST be\n   conveyed to the Identity Assessor (such\
    \ as an explicit allow/\n   whitelist and reputation system) and/or to the end\
    \ user.  If the SDID\n   is not the same as the address in the From: header field,\
    \ the mail\n   system SHOULD take pains to ensure that the actual SDID is clear\
    \ to\n   the reader.\n   While the symptoms of a failed verification are obvious\
    \ -- the\n   signature doesn't verify -- establishing the exact cause can be more\n\
    \   difficult.  If a selector cannot be found, is that because the\n   selector\
    \ has been removed, or was the value changed somehow in\n   transit?  If the signature\
    \ line is missing, is that because it was\n   never there, or was it removed by\
    \ an overzealous filter?  For\n   diagnostic purposes, the exact reason why the\
    \ verification fails\n   SHOULD be made available and possibly recorded in the\
    \ system logs.\n   If the email cannot be verified, then it SHOULD be treated\
    \ the same\n   as all unverified email, regardless of whether or not it looks\
    \ like\n   it was signed.\n   See Section 8.15 for additional discussion.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   DKIM has registered namespaces with IANA.  In all\
    \ cases, new values\n   are assigned only for values that have been documented\
    \ in a published\n   RFC that has IETF Consensus [RFC5226].\n   This memo updates\
    \ these registries as described below.  Of note is\n   the addition of a new \"\
    status\" column.  All registrations into these\n   namespaces MUST include the\
    \ name being registered, the document in\n   which it was registered or updated,\
    \ and an indication of its current\n   status, which MUST be one of \"active\"\
    \ (in current use) or \"historic\"\n   (no longer in current use).\n   No new\
    \ tags are defined in this specification compared to [RFC4871],\n   but one has\
    \ been designated as \"historic\".\n   Also, the \"Email Authentication Methods\"\
    \ registry is revised to refer\n   to this update.\n"
- title: 7.1.  Email Authentication Methods Registry
  contents:
  - "7.1.  Email Authentication Methods Registry\n   The \"Email Authentication Methods\"\
    \ registry is updated to indicate\n   that \"dkim\" is defined in this memo.\n"
- title: 7.2.  DKIM-Signature Tag Specifications
  contents:
  - "7.2.  DKIM-Signature Tag Specifications\n   A DKIM-Signature provides for a list\
    \ of tag specifications.  IANA has\n   established the \"DKIM-Signature Tag Specifications\"\
    \ registry for tag\n   specifications that can be used in DKIM-Signature fields.\n\
    \                    +------+-----------------+--------+\n                   \
    \ | TYPE | REFERENCE       | STATUS |\n                    +------+-----------------+--------+\n\
    \                    |   v  | (this document) | active |\n                   \
    \ |   a  | (this document) | active |\n                    |   b  | (this document)\
    \ | active |\n                    |  bh  | (this document) | active |\n      \
    \              |   c  | (this document) | active |\n                    |   d\
    \  | (this document) | active |\n                    |   h  | (this document)\
    \ | active |\n                    |   i  | (this document) | active |\n      \
    \              |   l  | (this document) | active |\n                    |   q\
    \  | (this document) | active |\n                    |   s  | (this document)\
    \ | active |\n                    |   t  | (this document) | active |\n      \
    \              |   x  | (this document) | active |\n                    |   z\
    \  | (this document) | active |\n                    +------+-----------------+--------+\n\
    \    Table 1: DKIM-Signature Tag Specifications Registry Updated Values\n"
- title: 7.3.  DKIM-Signature Query Method Registry
  contents:
  - "7.3.  DKIM-Signature Query Method Registry\n   The \"q=\" tag-spec (specified\
    \ in Section 3.5) provides for a list of\n   query methods.\n   IANA has established\
    \ the \"DKIM-Signature Query Method\" registry for\n   mechanisms that can be\
    \ used to retrieve the key that will permit\n   validation processing of a message\
    \ signed using DKIM.\n               +------+--------+-----------------+--------+\n\
    \               | TYPE | OPTION | REFERENCE       | STATUS |\n               +------+--------+-----------------+--------+\n\
    \               |  dns |   txt  | (this document) | active |\n               +------+--------+-----------------+--------+\n\
    \       Table 2: DKIM-Signature Query Method Registry Updated Values\n"
- title: 7.4.  DKIM-Signature Canonicalization Registry
  contents:
  - "7.4.  DKIM-Signature Canonicalization Registry\n   The \"c=\" tag-spec (specified\
    \ in Section 3.5) provides for a specifier\n   for canonicalization algorithms\
    \ for the header and body of the\n   message.\n   IANA has established the \"\
    DKIM-Signature Canonicalization Header\"\n   Registry for algorithms for converting\
    \ a message into a canonical\n   form before signing or verifying using DKIM.\n\
    \                  +---------+-----------------+--------+\n                  |\
    \   TYPE  | REFERENCE       | STATUS |\n                  +---------+-----------------+--------+\n\
    \                  |  simple | (this document) | active |\n                  |\
    \ relaxed | (this document) | active |\n                  +---------+-----------------+--------+\n\
    \     Table 3: DKIM-Signature Canonicalization Header Registry Updated\n     \
    \                             Values\n                  +---------+-----------------+--------+\n\
    \                  |   TYPE  | REFERENCE       | STATUS |\n                  +---------+-----------------+--------+\n\
    \                  |  simple | (this document) | active |\n                  |\
    \ relaxed | (this document) | active |\n                  +---------+-----------------+--------+\n\
    \   Table 4: DKIM-Signature Canonicalization Body Registry Updated Values\n"
- title: 7.5.  _domainkey DNS TXT Resource Record Tag Specifications
  contents:
  - "7.5.  _domainkey DNS TXT Resource Record Tag Specifications\n   A _domainkey\
    \ DNS TXT RR provides for a list of tag specifications.\n   IANA has established\
    \ the DKIM \"_domainkey DNS TXT Record Tag\n   Specifications\" registry for tag\
    \ specifications that can be used in\n   DNS TXT resource records.\n         \
    \          +------+-----------------+----------+\n                   | TYPE |\
    \ REFERENCE       | STATUS   |\n                   +------+-----------------+----------+\n\
    \                   |   v  | (this document) | active   |\n                  \
    \ |   g  | [RFC4871]       | historic |\n                   |   h  | (this document)\
    \ | active   |\n                   |   k  | (this document) | active   |\n   \
    \                |   n  | (this document) | active   |\n                   | \
    \  p  | (this document) | active   |\n                   |   s  | (this document)\
    \ | active   |\n                   |   t  | (this document) | active   |\n   \
    \                +------+-----------------+----------+\n      Table 5: _domainkey\
    \ DNS TXT Record Tag Specifications Registry\n                              Updated\
    \ Values\n"
- title: 7.6.  DKIM Key Type Registry
  contents:
  - "7.6.  DKIM Key Type Registry\n   The \"k=\" <key-k-tag> (specified in Section\
    \ 3.6.1) and the \"a=\" <sig-\n   a-tag-k> (specified in Section 3.5) tags provide\
    \ for a list of\n   mechanisms that can be used to decode a DKIM signature.\n\
    \   IANA has established the \"DKIM Key Type\" registry for such\n   mechanisms.\n\
    \                       +------+-----------+--------+\n                      \
    \ | TYPE | REFERENCE | STATUS |\n                       +------+-----------+--------+\n\
    \                       |  rsa | [RFC3447] | active |\n                      \
    \ +------+-----------+--------+\n              Table 6: DKIM Key Type Registry\
    \ Updated Values\n"
- title: 7.7.  DKIM Hash Algorithms Registry
  contents:
  - "7.7.  DKIM Hash Algorithms Registry\n   The \"h=\" <key-h-tag> (specified in\
    \ Section 3.6.1) and the \"a=\" <sig-\n   a-tag-h> (specified in Section 3.5)\
    \ tags provide for a list of\n   mechanisms that can be used to produce a digest\
    \ of message data.\n   IANA has established the \"DKIM Hash Algorithms\" registry\
    \ for such\n   mechanisms.\n                  +--------+-------------------+--------+\n\
    \                  |  TYPE  | REFERENCE         | STATUS |\n                 \
    \ +--------+-------------------+--------+\n                  |  sha1  | [FIPS-180-3-2008]\
    \ | active |\n                  | sha256 | [FIPS-180-3-2008] | active |\n    \
    \              +--------+-------------------+--------+\n           Table 7: DKIM\
    \ Hash Algorithms Registry Updated Values\n"
- title: 7.8.  DKIM Service Types Registry
  contents:
  - "7.8.  DKIM Service Types Registry\n   The \"s=\" <key-s-tag> tag (specified in\
    \ Section 3.6.1) provides for a\n   list of service types to which this selector\
    \ may apply.\n   IANA has established the \"DKIM Service Types\" registry for\
    \ service\n   types.\n                   +-------+-----------------+--------+\n\
    \                   |  TYPE | REFERENCE       | STATUS |\n                   +-------+-----------------+--------+\n\
    \                   | email | (this document) | active |\n                   |\
    \   *   | (this document) | active |\n                   +-------+-----------------+--------+\n\
    \            Table 8: DKIM Service Types Registry Updated Values\n"
- title: 7.9.  DKIM Selector Flags Registry
  contents:
  - "7.9.  DKIM Selector Flags Registry\n   The \"t=\" <key-t-tag> tag (specified\
    \ in Section 3.6.1) provides for a\n   list of flags to modify interpretation\
    \ of the selector.\n   IANA has established the \"DKIM Selector Flags\" registry\
    \ for\n   additional flags.\n                    +------+-----------------+--------+\n\
    \                    | TYPE | REFERENCE       | STATUS |\n                   \
    \ +------+-----------------+--------+\n                    |   y  | (this document)\
    \ | active |\n                    |   s  | (this document) | active |\n      \
    \              +------+-----------------+--------+\n           Table 9: DKIM Selector\
    \ Flags Registry Updated Values\n"
- title: 7.10.  DKIM-Signature Header Field
  contents:
  - "7.10.  DKIM-Signature Header Field\n   IANA has added DKIM-Signature to the \"\
    Permanent Message Header Field\n   Names\" registry (see [RFC3864]) for the \"\
    mail\" protocol, using this\n   document as the reference.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   It has been observed that any introduced mechanism\
    \ that attempts to\n   stem the flow of spam is subject to intensive attack. \
    \ DKIM needs to\n   be carefully scrutinized to identify potential attack vectors\
    \ and the\n   vulnerability to each.  See also [RFC4686].\n"
- title: 8.1.  ASCII Art Attacks
  contents:
  - "8.1.  ASCII Art Attacks\n   The relaxed body canonicalization algorithm may enable\
    \ certain types\n   of extremely crude \"ASCII Art\" attacks where a message may\
    \ be\n   conveyed by adjusting the spacing between words.  If this is a\n   concern,\
    \ the \"simple\" body canonicalization algorithm should be used\n   instead.\n"
- title: 8.2.  Misuse of Body Length Limits ("l=" Tag)
  contents:
  - "8.2.  Misuse of Body Length Limits (\"l=\" Tag)\n   Use of the \"l=\" tag might\
    \ allow display of fraudulent content without\n   appropriate warning to end users.\
    \  The \"l=\" tag is intended for\n   increasing signature robustness when sending\
    \ to mailing lists that\n   both modify their content and do not sign their modified\
    \ messages.\n   However, using the \"l=\" tag enables attacks in which an intermediary\n\
    \   with malicious intent can modify a message to include content that\n   solely\
    \ benefits the attacker.  It is possible for the appended\n   content to completely\
    \ replace the original content in the end\n   recipient's eyes and to defeat duplicate\
    \ message detection\n   algorithms.\n   An example of such an attack includes\
    \ altering the MIME structure,\n   exploiting lax HTML parsing in the MUA, and\
    \ defeating duplicate\n   message detection algorithms.\n   To avoid this attack,\
    \ Signers should be extremely wary of using this\n   tag, and Assessors might\
    \ wish to ignore signatures that use the tag.\n"
- title: 8.3.  Misappropriated Private Key
  contents:
  - "8.3.  Misappropriated Private Key\n   As with any other security application\
    \ that uses private- or public-\n   key pairs, DKIM requires caution around the\
    \ handling and protection\n   of keys.  A compromised private key or access to\
    \ one means an\n   intruder or malware can send mail signed by the domain that\n\
    \   advertises the matching public key.\n   Thus, private keys issued to users,\
    \ rather than one used by an\n   ADministrative Management Domain (ADMD) itself,\
    \ create the usual\n   problem of securing data stored on personal resources that\
    \ can affect\n   the ADMD.\n   A more secure architecture involves sending messages\
    \ through an\n   outgoing MTA that can authenticate the submitter using existing\n\
    \   techniques (e.g., SMTP Authentication), possibly validate the message\n  \
    \ itself (e.g., verify that the header is legitimate and that the\n   content\
    \ passes a spam content check), and sign the message using a\n   key appropriate\
    \ for the submitter address.  Such an MTA can also\n   apply controls on the volume\
    \ of outgoing mail each user is permitted\n   to originate in order to further\
    \ limit the ability of malware to\n   generate bulk email.\n"
- title: 8.4.  Key Server Denial-of-Service Attacks
  contents:
  - "8.4.  Key Server Denial-of-Service Attacks\n   Since the key servers are distributed\
    \ (potentially separate for each\n   domain), the number of servers that would\
    \ need to be attacked to\n   defeat this mechanism on an Internet-wide basis is\
    \ very large.\n   Nevertheless, key servers for individual domains could be attacked,\n\
    \   impeding the verification of messages from that domain.  This is not\n   significantly\
    \ different from the ability of an attacker to deny\n   service to the mail exchangers\
    \ for a given domain, although it\n   affects outgoing, not incoming, mail.\n\
    \   A variation on this attack involves a very large amount of mail being\n  \
    \ sent using spoofed signatures from a given domain: the key servers\n   for that\
    \ domain could be overwhelmed with requests in a denial-of-\n   service attack\
    \ (see [RFC4732]).  However, given the low overhead of\n   verification compared\
    \ with handling of the email message itself, such\n   an attack would be difficult\
    \ to mount.\n"
- title: 8.5.  Attacks against the DNS
  contents:
  - "8.5.  Attacks against the DNS\n   Since the DNS is a required binding for key\
    \ services, specific\n   attacks against the DNS must be considered.\n   While\
    \ the DNS is currently insecure [RFC3833], these security\n   problems are the\
    \ motivation behind DNS Security (DNSSEC) [RFC4033],\n   and all users of the\
    \ DNS will reap the benefit of that work.\n   DKIM is only intended as a \"sufficient\"\
    \ method of proving\n   authenticity.  It is not intended to provide strong cryptographic\n\
    \   proof about authorship or contents.  Other technologies such as\n   OpenPGP\
    \ [RFC4880] and S/MIME [RFC5751] address those requirements.\n   A second security\
    \ issue related to the DNS revolves around the\n   increased DNS traffic as a\
    \ consequence of fetching selector-based\n   data as well as fetching signing\
    \ domain policy.  Widespread\n   deployment of DKIM will result in a significant\
    \ increase in DNS\n   queries to the claimed signing domain.  In the case of forgeries\
    \ on a\n   large scale, DNS servers could see a substantial increase in queries.\n\
    \   A specific DNS security issue that should be considered by DKIM\n   Verifiers\
    \ is the name chaining attack described in Section 2.3 of\n   [RFC3833].  A DKIM\
    \ Verifier, while verifying a DKIM-Signature header\n   field, could be prompted\
    \ to retrieve a key record of an attacker's\n   choosing.  This threat can be\
    \ minimized by ensuring that name\n   servers, including recursive name servers,\
    \ used by the Verifier\n   enforce strict checking of \"glue\" and other additional\
    \ information in\n   DNS responses and are therefore not vulnerable to this attack.\n"
- title: 8.6.  Replay/Spam Attacks
  contents:
  - "8.6.  Replay/Spam Attacks\n   In this attack, a spammer sends a piece of spam\
    \ through an MTA that\n   signs it, banking on the reputation of the signing domain\
    \ (e.g., a\n   large popular mailbox provider) rather than its own, and then re-\n\
    \   sends that message to a large number of intended recipients.  The\n   recipients\
    \ observe the valid signature from the well-known domain,\n   elevating their\
    \ trust in the message and increasing the likelihood of\n   delivery and presentation\
    \ to the user.\n   Partial solutions to this problem involve the use of reputation\n\
    \   services to convey the fact that the specific email address is being\n   used\
    \ for spam and that messages from that Signer are likely to be\n   spam.  This\
    \ requires a real-time detection mechanism in order to\n   react quickly enough.\
    \  However, such measures might be prone to\n   abuse, if, for example, an attacker\
    \ re-sent a large number of\n   messages received from a victim in order to make\
    \ the victim appear to\n   be a spammer.\n   Large Verifiers might be able to\
    \ detect unusually large volumes of\n   mails with the same signature in a short\
    \ time period.  Smaller\n   Verifiers can get substantially the same volume of\
    \ information via\n   existing collaborative systems.\n"
- title: 8.7.  Limits on Revoking Keys
  contents:
  - "8.7.  Limits on Revoking Keys\n   When a large domain detects undesirable behavior\
    \ on the part of one\n   of its users, it might wish to revoke the key used to\
    \ sign that\n   user's messages in order to disavow responsibility for messages\
    \ that\n   have not yet been verified or that are the subject of a replay\n  \
    \ attack.  However, the ability of the domain to do so can be limited\n   if the\
    \ same key, for scalability reasons, is used to sign messages\n   for many other\
    \ users.  Mechanisms for explicitly revoking keys on a\n   per-address basis have\
    \ been proposed but require further study as to\n   their utility and the DNS\
    \ load they represent.\n"
- title: 8.8.  Intentionally Malformed Key Records
  contents:
  - "8.8.  Intentionally Malformed Key Records\n   It is possible for an attacker\
    \ to publish key records in DNS that are\n   intentionally malformed, with the\
    \ intent of causing a denial-of-\n   service attack on a non-robust Verifier implementation.\
    \  The attacker\n   could then cause a Verifier to read the malformed key record\
    \ by\n   sending a message to one of its users referencing the malformed\n   record\
    \ in a (not necessarily valid) signature.  Verifiers MUST\n   thoroughly verify\
    \ all key records retrieved from the DNS and be\n   robust against intentionally\
    \ as well as unintentionally malformed key\n   records.\n"
- title: 8.9.  Intentionally Malformed DKIM-Signature Header Fields
  contents:
  - "8.9.  Intentionally Malformed DKIM-Signature Header Fields\n   Verifiers MUST\
    \ be prepared to receive messages with malformed DKIM-\n   Signature header fields\
    \ and thoroughly verify the header field before\n   depending on any of its contents.\n"
- title: 8.10.  Information Leakage
  contents:
  - "8.10.  Information Leakage\n   An attacker could determine when a particular\
    \ signature was verified\n   by using a per-message selector and then monitoring\
    \ their DNS traffic\n   for the key lookup.  This would act as the equivalent\
    \ of a \"web bug\"\n   for verification time rather than the time the message\
    \ was read.\n"
- title: 8.11.  Remote Timing Attacks
  contents:
  - "8.11.  Remote Timing Attacks\n   In some cases, it may be possible to extract\
    \ private keys using a\n   remote timing attack [BONEH03].  Implementations should\
    \ consider\n   obfuscating the timing to prevent such attacks.\n"
- title: 8.12.  Reordered Header Fields
  contents:
  - "8.12.  Reordered Header Fields\n   Existing standards allow intermediate MTAs\
    \ to reorder header fields.\n   If a Signer signs two or more header fields of\
    \ the same name, this\n   can cause spurious verification errors on otherwise\
    \ legitimate\n   messages.  In particular, Signers that sign any existing DKIM-\n\
    \   Signature fields run the risk of having messages incorrectly fail to\n   verify.\n"
- title: 8.13.  RSA Attacks
  contents:
  - "8.13.  RSA Attacks\n   An attacker could create a large RSA signing key with\
    \ a small\n   exponent, thus requiring that the verification key have a large\n\
    \   exponent.  This will force Verifiers to use considerable computing\n   resources\
    \ to verify the signature.  Verifiers might avoid this attack\n   by refusing\
    \ to verify signatures that reference selectors with public\n   keys having unreasonable\
    \ exponents.\n   In general, an attacker might try to overwhelm a Verifier by\
    \ flooding\n   it with messages requiring verification.  This is similar to other\n\
    \   MTA denial-of-service attacks and should be dealt with in a similar\n   fashion.\n"
- title: 8.14.  Inappropriate Signing by Parent Domains
  contents:
  - "8.14.  Inappropriate Signing by Parent Domains\n   The trust relationship described\
    \ in Section 3.10 could conceivably be\n   used by a parent domain to sign messages\
    \ with identities in a\n   subdomain not administratively related to the parent.\
    \  For example,\n   the \".com\" registry could create messages with signatures\
    \ using an\n   \"i=\" value in the example.com domain.  There is no general solution\n\
    \   to this problem, since the administrative cut could occur anywhere in\n  \
    \ the domain name.  For example, in the domain \"example.podunk.ca.us\",\n   there\
    \ are three administrative cuts (podunk.ca.us, ca.us, and us),\n   any of which\
    \ could create messages with an identity in the full\n   domain.\n      INFORMATIVE\
    \ NOTE: This is considered an acceptable risk for the\n      same reason that\
    \ it is acceptable for domain delegation.  For\n      example, in the case above,\
    \ any of the domains could potentially\n      simply delegate \"example.podunk.ca.us\"\
    \ to a server of their choice\n      and completely replace all DNS-served information.\
    \  Note that a\n      Verifier MAY ignore signatures that come from an unlikely\
    \ domain\n      such as \".com\", as discussed in Section 6.1.1.\n"
- title: 8.15.  Attacks Involving Extra Header Fields
  contents:
  - "8.15.  Attacks Involving Extra Header Fields\n   Many email components, including\
    \ MTAs, MSAs, MUAs, and filtering\n   modules, implement message format checks\
    \ only loosely.  This is done\n   out of years of industry pressure to be liberal\
    \ in what is accepted\n   into the mail stream for the sake of reducing support\
    \ costs;\n   improperly formed messages are often silently fixed in transit,\n\
    \   delivered unrepaired, or displayed inappropriately (e.g., by showing\n   only\
    \ the first of multiple From: fields).\n   Agents that evaluate or apply DKIM\
    \ output need to be aware that a\n   DKIM Signer can sign messages that are malformed\
    \ (e.g., violate\n   [RFC5322], such as by having multiple instances of a field\
    \ that is\n   only permitted once), that become malformed in transit, or that\n\
    \   contain header or body content that is not true or valid.  Use of\n   DKIM\
    \ on such messages might constitute an attack against a receiver,\n   especially\
    \ where additional credence is given to a signed message\n   without adequate\
    \ evaluation of the Signer.\n   These can represent serious attacks, but they\
    \ have nothing to do with\n   DKIM; they are attacks on the recipient or on the\
    \ wrongly identified\n   author.\n   Moreover, an agent would be incorrect to\
    \ infer that all instances of\n   a header field are signed just because one is.\n\
    \   A genuine signature from the domain under attack can be obtained by\n   legitimate\
    \ means, but extra header fields can then be added, either\n   by interception\
    \ or by replay.  In this scenario, DKIM can aid in\n   detecting addition of specific\
    \ fields in transit.  This is done by\n   having the Signer list the field name(s)\
    \ in the \"h=\" tag an extra\n   time (e.g., \"h=from:from:...\" for a message\
    \ with one From field), so\n   that addition of an instance of that field downstream\
    \ will render the\n   signature unable to be verified.  (See Section 3.5 for details.)\n\
    \   This, in essence, is an explicit indication that the Signer\n   repudiates\
    \ responsibility for such a malformed message.\n   DKIM signs and validates the\
    \ data it is told to and works correctly.\n   So in this case, DKIM has done its\
    \ job of delivering a validated\n   domain (the \"d=\" value) and, given the semantics\
    \ of a DKIM signature,\n   essentially the Signer has taken some responsibility\
    \ for a\n   problematic message.  It is up to the Identity Assessor or some other\n\
    \   subsequent agent to act on such messages as needed, such as degrading\n  \
    \ the trust of the message (or, indeed, of the Signer), warning the\n   recipient,\
    \ or even refusing delivery.\n   All components of the mail system that perform\
    \ loose enforcement of\n   other mail standards will need to revisit that posture\
    \ when\n   incorporating DKIM, especially when considering matters of potential\n\
    \   attacks such as those described.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [FIPS-180-3-2008]\n              U.S. Department\
    \ of Commerce, \"Secure Hash Standard\", FIPS\n              PUB 180-3, October\
    \ 2008.\n   [ITU-X660-1997]\n              \"Information Technology - ASN.1 encoding\
    \ rules:\n              Specification of Basic Encoding Rules (BER), Canonical\n\
    \              Encoding Rules (CER) and Distinguished Encoding Rules\n       \
    \       (DER)\", 1997.\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, November 1987.\n   [RFC2045]\
    \  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) Part One: Format of Internet Message\n              Bodies\", RFC 2045,\
    \ November 1996.\n   [RFC2049]  Freed, N. and N. Borenstein, \"Multipurpose Internet\
    \ Mail\n              Extensions (MIME) Part Five: Conformance Criteria and\n\
    \              Examples\", RFC 2049, November 1996.\n   [RFC2119]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC3447]  Jonsson, J. and B. Kaliski, \"\
    Public-Key Cryptography\n              Standards (PKCS) #1: RSA Cryptography Specifications\n\
    \              Version 2.1\", RFC 3447, February 2003.\n   [RFC5234]  Crocker,\
    \ D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5321]  Klensin, J., \"Simple\
    \ Mail Transfer Protocol\", RFC 5321,\n              October 2008.\n   [RFC5322]\
    \  Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n              October\
    \ 2008.\n   [RFC5598]  Crocker, D., \"Internet Mail Architecture\", RFC 5598,\n\
    \              July 2009.\n   [RFC5890]  Klensin, J., \"Internationalized Domain\
    \ Names for\n              Applications (IDNA): Definitions and Document Framework\"\
    ,\n              RFC 5890, August 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [BONEH03]  \"Remote Timing Attacks are Practical\"\
    , Proceedings 12th\n              USENIX Security Symposium, 2003.\n   [RFC2047]\
    \  Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n              Part\
    \ Three: Message Header Extensions for Non-ASCII Text\",\n              RFC 2047,\
    \ November 1996.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3766]\
    \  Orman, H. and P. Hoffman, \"Determining Strengths For\n              Public\
    \ Keys Used For Exchanging Symmetric Keys\", BCP 86,\n              RFC 3766,\
    \ April 2004.\n   [RFC3833]  Atkins, D. and R. Austein, \"Threat Analysis of the\
    \ Domain\n              Name System (DNS)\", RFC 3833, August 2004.\n   [RFC3864]\
    \  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures\
    \ for Message Header Fields\", BCP 90, RFC 3864,\n              September 2004.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, March 2005.\n   [RFC4409]  Gellens, R. and J. Klensin, \"Message\
    \ Submission for Mail\",\n              RFC 4409, April 2006.\n   [RFC4686]  Fenton,\
    \ J., \"Analysis of Threats Motivating DomainKeys\n              Identified Mail\
    \ (DKIM)\", RFC 4686, September 2006.\n   [RFC4732]  Handley, M., Rescorla, E.,\
    \ and IAB, \"Internet Denial-of-\n              Service Considerations\", RFC\
    \ 4732, December 2006.\n   [RFC4870]  Delany, M., \"Domain-Based Email Authentication\
    \ Using\n              Public Keys Advertised in the DNS (DomainKeys)\", RFC 4870,\n\
    \              May 2007.\n   [RFC4871]  Allman, E., Callas, J., Delany, M., Libbey,\
    \ M., Fenton,\n              J., and M. Thomas, \"DomainKeys Identified Mail (DKIM)\n\
    \              Signatures\", RFC 4871, May 2007.\n   [RFC4880]  Callas, J., Donnerhacke,\
    \ L., Finney, H., Shaw, D., and R.\n              Thayer, \"OpenPGP Message Format\"\
    , RFC 4880, November 2007.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an\n              IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 5226,\n              May 2008.\n   [RFC5451]  Kucherawy, M., \"Message Header\
    \ Field for Indicating\n              Message Authentication Status\", RFC 5451,\
    \ April 2009.\n   [RFC5585]  Hansen, T., Crocker, D., and P. Hallam-Baker, \"\
    DomainKeys\n              Identified Mail (DKIM) Service Overview\", RFC 5585,\n\
    \              July 2009.\n   [RFC5672]  Crocker, D., \"RFC 4871 DomainKeys Identified\
    \ Mail (DKIM)\n              Signatures -- Update\", RFC 5672, August 2009.\n\
    \   [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n  \
    \            Mail Extensions (S/MIME) Version 3.2 Message\n              Specification\"\
    , RFC 5751, January 2010.\n   [RFC5863]  Hansen, T., Siegel, E., Hallam-Baker,\
    \ P., and D. Crocker,\n              \"DomainKeys Identified Mail (DKIM) Development,\n\
    \              Deployment, and Operations\", RFC 5863, May 2010.\n   [RFC6377]\
    \  Kucherawy, M., \"DomainKeys Identified Mail (DKIM) and\n              Mailing\
    \ Lists\", RFC 6377, September 2011.\n"
- title: Appendix A.  Example of Use (INFORMATIVE)
  contents:
  - "Appendix A.  Example of Use (INFORMATIVE)\n   This section shows the complete\
    \ flow of an email from submission to\n   final delivery, demonstrating how the\
    \ various components fit\n   together.  The key used in this example is shown\
    \ in Appendix C.\n"
- title: A.1.  The User Composes an Email
  contents:
  - "A.1.  The User Composes an Email\n   From: Joe SixPack <joe@football.example.com>\n\
    \   To: Suzie Q <suzie@shopping.example.net>\n   Subject: Is dinner ready?\n \
    \  Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n\
    \   Hi.\n   We lost the game.  Are you hungry yet?\n   Joe.\n                \
    \   Figure 1: The User Composes an Email\n"
- title: A.2.  The Email is Signed
  contents:
  - "A.2.  The Email is Signed\n   This email is signed by the example.com outbound\
    \ email server and now\n   looks like this:\n   DKIM-Signature: v=1; a=rsa-sha256;\
    \ s=brisbane; d=example.com;\n        c=simple/simple; q=dns/txt; i=joe@football.example.com;\n\
    \        h=Received : From : To : Subject : Date : Message-ID;\n        bh=2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=;\n\
    \        b=AuUoFEfDxTDkHlLXSZEpZj79LICEps6eda7W3deTVFOk4yAUoqOB\n        4nujc7YopdG5dWLSdNg6xNAZpOPr+kHxt1IrE+NahM6L/LbvaHut\n\
    \        KVdkLLkpVaVVQPzeRDI009SO2Il5Lu7rDNH6mZckBdrIx0orEtZV\n        4bmp/YzhwvcubU4=;\n\
    \   Received: from client1.football.example.com  [192.0.2.1]\n        by submitserver.example.com\
    \ with SUBMISSION;\n        Fri, 11 Jul 2003 21:01:54 -0700 (PDT)\n   From: Joe\
    \ SixPack <joe@football.example.com>\n   To: Suzie Q <suzie@shopping.example.net>\n\
    \   Subject: Is dinner ready?\n   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n\
    \   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n   Hi.\n   We\
    \ lost the game.  Are you hungry yet?\n   Joe.\n                       Figure\
    \ 2: The Email is Signed\n   The signing email server requires access to the private\
    \ key\n   associated with the \"brisbane\" selector to generate this signature.\n"
- title: A.3.  The Email Signature is Verified
  contents:
  - "A.3.  The Email Signature is Verified\n   The signature is normally verified\
    \ by an inbound SMTP server or\n   possibly the final delivery agent.  However,\
    \ intervening MTAs can\n   also perform this verification if they choose to do\
    \ so.  The\n   verification process uses the domain \"example.com\" extracted\
    \ from the\n   \"d=\" tag and the selector \"brisbane\" from the \"s=\" tag in\
    \ the DKIM-\n   Signature header field to form the DNS DKIM query for:\n   brisbane._domainkey.example.com\n\
    \   Signature verification starts with the physically last Received\n   header\
    \ field, the From header field, and so forth, in the order\n   listed in the \"\
    h=\" tag.  Verification follows with a single CRLF\n   followed by the body (starting\
    \ with \"Hi.\").  The email is canonically\n   prepared for verifying with the\
    \ \"simple\" method.  The result of the\n   query and subsequent verification\
    \ of the signature is stored (in this\n   example) in the X-Authentication-Results\
    \ header field line.  After\n   successful verification, the email looks like\
    \ this:\n   X-Authentication-Results: shopping.example.net\n     header.from=joe@football.example.com;\
    \ dkim=pass\n   Received: from mout23.football.example.com (192.168.1.1)\n   \
    \  by shopping.example.net with SMTP;\n     Fri, 11 Jul 2003 21:01:59 -0700 (PDT)\n\
    \   DKIM-Signature: v=1; a=rsa-sha256; s=brisbane; d=example.com;\n     c=simple/simple;\
    \ q=dns/txt; i=joe@football.example.com;\n     h=Received : From : To : Subject\
    \ : Date : Message-ID;\n     bh=2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=;\n\
    \     b=AuUoFEfDxTDkHlLXSZEpZj79LICEps6eda7W3deTVFOk4yAUoqOB\n       4nujc7YopdG5dWLSdNg6xNAZpOPr+kHxt1IrE+NahM6L/LbvaHut\n\
    \       KVdkLLkpVaVVQPzeRDI009SO2Il5Lu7rDNH6mZckBdrIx0orEtZV\n       4bmp/YzhwvcubU4=;\n\
    \   Received: from client1.football.example.com  [192.0.2.1]\n     by submitserver.example.com\
    \ with SUBMISSION;\n     Fri, 11 Jul 2003 21:01:54 -0700 (PDT)\n   From: Joe SixPack\
    \ <joe@football.example.com>\n   To: Suzie Q <suzie@shopping.example.net>\n  \
    \ Subject: Is dinner ready?\n   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n\
    \   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n   Hi.\n   We\
    \ lost the game.  Are you hungry yet?\n   Joe.\n                     Figure 3:\
    \ Successful Verification\n"
- title: Appendix B.  Usage Examples (INFORMATIVE)
  contents:
  - "Appendix B.  Usage Examples (INFORMATIVE)\n   DKIM signing and validating can\
    \ be used in different ways, for\n   different operational scenarios.  This Appendix\
    \ discusses some common\n   examples.\n      NOTE: Descriptions in this Appendix\
    \ are for informational purposes\n      only.  They describe various ways that\
    \ DKIM can be used, given\n      particular constraints and needs.  In no case\
    \ are these examples\n      intended to be taken as providing explanation or guidance\n\
    \      concerning DKIM specification details when creating an\n      implementation.\n"
- title: B.1.  Alternate Submission Scenarios
  contents:
  - "B.1.  Alternate Submission Scenarios\n   In the most simple scenario, a user's\
    \ MUA, MSA, and Internet\n   (boundary) MTA are all within the same administrative\
    \ environment,\n   using the same domain name.  Therefore, all of the components\n\
    \   involved in submission and initial transfer are related.  However, it\n  \
    \ is common for two or more of the components to be under independent\n   administrative\
    \ control.  This creates challenges for choosing and\n   administering the domain\
    \ name to use for signing and for its\n   relationship to common email identity\
    \ header fields.\n"
- title: B.1.1.  Delegated Business Functions
  contents:
  - "B.1.1.  Delegated Business Functions\n   Some organizations assign specific business\
    \ functions to discrete\n   groups, inside or outside the organization.  The goal,\
    \ then, is to\n   authorize that group to sign some mail but to constrain what\n\
    \   signatures they can generate.  DKIM selectors (the \"s=\" signature\n   tag)\
    \ facilitate this kind of restricted authorization.  Examples of\n   these outsourced\
    \ business functions are legitimate email marketing\n   providers and corporate\
    \ benefits providers.\n   Here, the delegated group needs to be able to send messages\
    \ that are\n   signed, using the email domain of the client company.  At the same\n\
    \   time, the client often is reluctant to register a key for the\n   provider\
    \ that grants the ability to send messages for arbitrary\n   addresses in the\
    \ domain.\n   There are multiple ways to administer these usage scenarios.  In\
    \ one\n   case, the client organization provides all of the public query\n   service\
    \ (for example, DNS) administration, and in another, it uses\n   DNS delegation\
    \ to enable all ongoing administration of the DKIM key\n   record by the delegated\
    \ group.\n   If the client organization retains responsibility for all of the\
    \ DNS\n   administration, the outsourcing company can generate a key pair,\n \
    \  supplying the public key to the client company, which then registers\n   it\
    \ in the query service using a unique selector.  The client company\n   retains\
    \ control over the use of the delegated key because it retains\n   the ability\
    \ to revoke the key at any time.\n   If the client wants the delegated group to\
    \ do the DNS administration,\n   it can have the domain name that is specified\
    \ with the selector point\n   to the provider's DNS server.  The provider then\
    \ creates and\n   maintains all of the DKIM signature information for that selector.\n\
    \   Hence, the client cannot provide constraints on the local-part of\n   addresses\
    \ that get signed, but it can revoke the provider's signing\n   rights by removing\
    \ the DNS delegation record.\n"
- title: B.1.2.  PDAs and Similar Devices
  contents:
  - "B.1.2.  PDAs and Similar Devices\n   PDAs demonstrate the need for using multiple\
    \ keys per domain.\n   Suppose that John Doe wants to be able to send messages\
    \ using his\n   corporate email address, jdoe@example.com, and his email device\
    \ does\n   not have the ability to make a Virtual Private Network (VPN)\n   connection\
    \ to the corporate network, either because the device is\n   limited or because\
    \ there are restrictions enforced by his Internet\n   access provider.  If the\
    \ device is equipped with a private key\n   registered for jdoe@example.com by\
    \ the administrator of the\n   example.com domain and appropriate software to\
    \ sign messages, John\n   could sign the message on the device itself before transmission\n\
    \   through the outgoing network of the access service provider.\n"
- title: B.1.3.  Roaming Users
  contents:
  - "B.1.3.  Roaming Users\n   Roaming users often find themselves in circumstances\
    \ where it is\n   convenient or necessary to use an SMTP server other than their\
    \ home\n   server; examples are conferences and many hotels.  In such\n   circumstances,\
    \ a signature that is added by the submission service\n   will use an identity\
    \ that is different from the user's home system.\n   Ideally, roaming users would\
    \ connect back to their home server using\n   either a VPN or a SUBMISSION server\
    \ running with SMTP AUTHentication\n   on port 587.  If the signing can be performed\
    \ on the roaming user's\n   laptop, then they can sign before submission, although\
    \ the risk of\n   further modification is high.  If neither of these are possible,\n\
    \   these roaming users will not be able to send mail signed using their\n   own\
    \ domain key.\n"
- title: B.1.4.  Independent (Kiosk) Message Submission
  contents:
  - "B.1.4.  Independent (Kiosk) Message Submission\n   Stand-alone services, such\
    \ as walk-up kiosks and web-based\n   information services, have no enduring email\
    \ service relationship\n   with the user, but users occasionally request that\
    \ mail be sent on\n   their behalf.  For example, a website providing news often\
    \ allows the\n   reader to forward a copy of the article to a friend.  This is\n\
    \   typically done using the reader's own email address, to indicate who\n   the\
    \ author is.  This is sometimes referred to as the \"Evite\" problem,\n   named\
    \ after the website of the same name that allows a user to send\n   invitations\
    \ to friends.\n   A common way this is handled is to continue to put the reader's\
    \ email\n   address in the From header field of the message but put an address\n\
    \   owned by the email posting site into the Sender header field.  The\n   posting\
    \ site can then sign the message, using the domain that is in\n   the Sender field.\
    \  This provides useful information to the receiving\n   email site, which is\
    \ able to correlate the signing domain with the\n   initial submission email role.\n\
    \   Receiving sites often wish to provide their end users with\n   information\
    \ about mail that is mediated in this fashion.  Although\n   the real efficacy\
    \ of different approaches is a subject for human\n   factors usability research,\
    \ one technique that is used is for the\n   verifying system to rewrite the From\
    \ header field to indicate the\n   address that was verified, for example: From:\
    \ John Doe via\n   news@news-site.example <jdoe@example.com>.  (Note that such\
    \ rewriting\n   will break a signature, unless it is done after the verification\
    \ pass\n   is complete.)\n"
- title: B.2.  Alternate Delivery Scenarios
  contents:
  - "B.2.  Alternate Delivery Scenarios\n   Email is often received at a mailbox that\
    \ has an address different\n   from the one used during initial submission.  In\
    \ these cases, an\n   intermediary mechanism operates at the address originally\
    \ used, and\n   it then passes the message on to the final destination.  This\n\
    \   mediation process presents some challenges for DKIM signatures.\n"
- title: B.2.1.  Affinity Addresses
  contents:
  - "B.2.1.  Affinity Addresses\n   \"Affinity addresses\" allow a user to have an\
    \ email address that\n   remains stable, even as the user moves among different\
    \ email\n   providers.  They are typically associated with college alumni\n  \
    \ associations, professional organizations, and recreational\n   organizations\
    \ with which they expect to have a long-term\n   relationship.  These domains\
    \ usually provide forwarding of incoming\n   email, and they often have an associated\
    \ Web application that\n   authenticates the user and allows the forwarding address\
    \ to be\n   changed.  However, these services usually depend on users sending\n\
    \   outgoing messages through their own service provider's MTAs.  Hence,\n   mail\
    \ that is signed with the domain of the affinity address is not\n   signed by\
    \ an entity that is administered by the organization owning\n   that domain.\n\
    \   With DKIM, affinity domains could use the Web application to allow\n   users\
    \ to register per-user keys to be used to sign messages on behalf\n   of their\
    \ affinity address.  The user would take away the secret half\n   of the key pair\
    \ for signing, and the affinity domain would publish\n   the public half in DNS\
    \ for access by Verifiers.\n   This is another application that takes advantage\
    \ of user-level\n   keying, and domains used for affinity addresses would typically\
    \ have\n   a very large number of user-level keys.  Alternatively, the affinity\n\
    \   domain could handle outgoing mail, operating a mail submission agent\n   that\
    \ authenticates users before accepting and signing messages for\n   them.  This\
    \ is, of course, dependent on the user's service provider\n   not blocking the\
    \ relevant TCP ports used for mail submission.\n"
- title: B.2.2.  Simple Address Aliasing (.forward)
  contents:
  - "B.2.2.  Simple Address Aliasing (.forward)\n   In some cases, a recipient is\
    \ allowed to configure an email address\n   to cause automatic redirection of\
    \ email messages from the original\n   address to another, such as through the\
    \ use of a Unix .forward file.\n   In this case, messages are typically redirected\
    \ by the mail handling\n   service of the recipient's domain, without modification,\
    \ except for\n   the addition of a Received header field to the message and a\
    \ change\n   in the envelope recipient address.  In this case, the recipient at\n\
    \   the final address' mailbox is likely to be able to verify the\n   original\
    \ signature since the signed content has not changed, and DKIM\n   is able to\
    \ validate the message signature.\n"
- title: B.2.3.  Mailing Lists and Re-Posters
  contents:
  - "B.2.3.  Mailing Lists and Re-Posters\n   There is a wide range of behaviors in\
    \ services that take delivery of\n   a message and then resubmit it.  A primary\
    \ example is with mailing\n   lists (collectively called \"forwarders\" below),\
    \ ranging from those\n   that make no modification to the message itself, other\
    \ than to add a\n   Received header field and change the envelope information,\
    \ to those\n   that add header fields, change the Subject header field, add content\n\
    \   to the body (typically at the end), or reformat the body in some\n   manner.\
    \  The simple ones produce messages that are quite similar to\n   the automated\
    \ alias services.  More elaborate systems essentially\n   create a new message.\n\
    \   A Forwarder that does not modify the body or signed header fields of\n   a\
    \ message is likely to maintain the validity of the existing\n   signature.  It\
    \ also could choose to add its own signature to the\n   message.\n   Forwarders\
    \ that modify a message in a way that could make an existing\n   signature invalid\
    \ are particularly good candidates for adding their\n   own signatures (e.g.,\
    \ mailing-list-name@example.net).  Since\n   (re-)signing is taking responsibility\
    \ for the content of the message,\n   these signing forwarders are likely to be\
    \ selective and forward or\n   re-sign a message only if it is received with a\
    \ valid signature or if\n   they have some other basis for knowing that the message\
    \ is not\n   spoofed.\n   A common practice among systems that are primarily redistributors\
    \ of\n   mail is to add a Sender header field to the message to identify the\n\
    \   address being used to sign the message.  This practice will remove\n   any\
    \ preexisting Sender header field as required by [RFC5322].  The\n   forwarder\
    \ applies a new DKIM-Signature header field with the\n   signature, public key,\
    \ and related information of the forwarder.\n   See [RFC6377] for additional related\
    \ topics and discussion.\n"
- title: Appendix C.  Creating a Public Key (INFORMATIVE)
  contents:
  - "Appendix C.  Creating a Public Key (INFORMATIVE)\n   The default signature is\
    \ an RSA-signed SHA-256 digest of the complete\n   email.  For ease of explanation,\
    \ the openssl command is used to\n   describe the mechanism by which keys and\
    \ signatures are managed.  One\n   way to generate a 1024-bit, unencrypted private\
    \ key suitable for DKIM\n   is to use openssl like this:\n   $ openssl genrsa\
    \ -out rsa.private 1024\n   For increased security, the \"-passin\" parameter\
    \ can also be added to\n   encrypt the private key.  Use of this parameter will\
    \ require entering\n   a password for several of the following steps.  Servers\
    \ may prefer to\n   use hardware cryptographic support.\n   The \"genrsa\" step\
    \ results in the file rsa.private containing the key\n   information similar to\
    \ this:\n   -----BEGIN RSA PRIVATE KEY-----\n   MIICXwIBAAKBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkMoGeLnQg1fWn7/zYtIxN2SnFC\n\
    \   jxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v/RtdC2UzJ1lWT947qR+Rcac2gb\n   to/NMqJ0fzfVjH4OuKhitdY9tf6mcwGjaNBcWToIMmPSPDdQPNUYckcQ2QIDAQAB\n\
    \   AoGBALmn+XwWk7akvkUlqb+dOxyLB9i5VBVfje89Teolwc9YJT36BGN/l4e0l6QX\n   /1//6DWUTB3KI6wFcm7TWJcxbS0tcKZX7FsJvUz1SbQnkS54DJck1EZO/BLa5ckJ\n\
    \   gAYIaqlA9C0ZwM6i58lLlPadX/rtHb7pWzeNcZHjKrjM461ZAkEA+itss2nRlmyO\n   n1/5yDyCluST4dQfO8kAB3toSEVc7DeFeDhnC1mZdjASZNvdHS4gbLIA1hUGEF9m\n\
    \   3hKsGUMMPwJBAPW5v/U+AWTADFCS22t72NUurgzeAbzb1HWMqO4y4+9Hpjk5wvL/\n   eVYizyuce3/fGke7aRYw/ADKygMJdW8H/OcCQQDz5OQb4j2QDpPZc0Nc4QlbvMsj\n\
    \   7p7otWRO5xRa6SzXqqV3+F0VpqvDmshEBkoCydaYwc2o6WQ5EBmExeV8124XAkEA\n   qZzGsIxVP+sEVRWZmW6KNFSdVUpk3qzK0Tz/WjQMe5z0UunY9Ax9/4PVhp/j61bf\n\
    \   eAYXunajbBSOLlx4D+TunwJBANkPI5S9iylsbLs6NkaMHV6k5ioHBBmgCak95JGX\n   GMot/L2x0IYyMLAz6oLWh2hm7zwtb0CgOrPo1ke44hFYnfc=\n\
    \   -----END RSA PRIVATE KEY-----\n   To extract the public-key component from\
    \ the private key, use openssl\n   like this:\n   $ openssl rsa -in rsa.private\
    \ -out rsa.public -pubout -outform PEM\n   This results in the file rsa.public\
    \ containing the key information\n   similar to this:\n   -----BEGIN PUBLIC KEY-----\n\
    \   MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkM\n   oGeLnQg1fWn7/zYtIxN2SnFCjxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v/R\n\
    \   tdC2UzJ1lWT947qR+Rcac2gbto/NMqJ0fzfVjH4OuKhitdY9tf6mcwGjaNBcWToI\n   MmPSPDdQPNUYckcQ2QIDAQAB\n\
    \   -----END PUBLIC KEY-----\n   This public-key data (without the BEGIN and END\
    \ tags) is placed in\n   the DNS:\n   $ORIGIN _domainkey.example.org.\n   brisbane\
    \ IN  TXT  (\"v=DKIM1; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQ\"\n              \
    \        \"KBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkMoGeLnQg1fWn7/zYt\"\n                \
    \      \"IxN2SnFCjxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v\"\n                  \
    \    \"/RtdC2UzJ1lWT947qR+Rcac2gbto/NMqJ0fzfVjH4OuKhi\"\n                    \
    \  \"tdY9tf6mcwGjaNBcWToIMmPSPDdQPNUYckcQ2QIDAQAB\")\n"
- title: C.1.  Compatibility with DomainKeys Key Records
  contents:
  - "C.1.  Compatibility with DomainKeys Key Records\n   DKIM key records were designed\
    \ to be backward compatible in many\n   cases with key records used by DomainKeys\
    \ [RFC4870] (sometimes\n   referred to as \"selector records\" in the DomainKeys\
    \ context).  One\n   area of incompatibility warrants particular attention.  The\
    \ \"g=\" tag\n   value may be used in DomainKeys and [RFC4871] key records to\
    \ provide\n   finer granularity of the validity of the key record to a specific\n\
    \   local-part.  A null \"g=\" value in DomainKeys is valid for all\n   addresses\
    \ in the domain.  This differs from the usage in the original\n   DKIM specification\
    \ ([RFC4871]), where a null \"g=\" value is not valid\n   for any address.  In\
    \ particular, see the example public-key record in\n   Section 3.2.3 of [RFC4870].\n"
- title: C.2.  RFC 4871 Compatibility
  contents:
  - "C.2.  RFC 4871 Compatibility\n   Although the \"g=\" tag has been deprecated\
    \ in this version of the DKIM\n   specification (and thus MUST now be ignored),\
    \ Signers are advised not\n   to include the \"g=\" tag in key records because\
    \ some [RFC4871]-\n   compliant Verifiers will be in use for a considerable period\
    \ to come.\n"
- title: Appendix D.  MUA Considerations (INFORMATIVE)
  contents:
  - "Appendix D.  MUA Considerations (INFORMATIVE)\n   When a DKIM signature is verified,\
    \ the processing system sometimes\n   makes the result available to the recipient\
    \ user's MUA.  How to\n   present this information to users in a way that helps\
    \ them is a\n   matter of continuing human factors usability research.  The tendency\n\
    \   is to have the MUA highlight the SDID, in an attempt to show the user\n  \
    \ the identity that is claiming responsibility for the message.  An MUA\n   might\
    \ do this with visual cues such as graphics, might include the\n   address in\
    \ an alternate view, or might even rewrite the original From\n   address using\
    \ the verified information.  Some MUAs might indicate\n   which header fields\
    \ were protected by the validated DKIM signature.\n   This could be done with\
    \ a positive indication on the signed header\n   fields, with a negative indication\
    \ on the unsigned header fields, by\n   visually hiding the unsigned header fields,\
    \ or some combination of\n   these.  If an MUA uses visual indications for signed\
    \ header fields,\n   the MUA probably needs to be careful not to display unsigned\
    \ header\n   fields in a way that might be construed by the end user as having\n\
    \   been signed.  If the message has an \"l=\" tag whose value does not\n   extend\
    \ to the end of the message, the MUA might also hide or mark the\n   portion of\
    \ the message body that was not signed.\n   The aforementioned information is\
    \ not intended to be exhaustive.  The\n   MUA can choose to highlight, accentuate,\
    \ hide, or otherwise display\n   any other information that may, in the opinion\
    \ of the MUA author, be\n   deemed important to the end user.\n"
- title: Appendix E.  Changes since RFC 4871
  contents:
  - "Appendix E.  Changes since RFC 4871\n   o  Abstract and introduction refined\
    \ based on accumulated experience.\n   o  Various references updated.\n   o  Several\
    \ errata resolved (see http://www.rfc-editor.org/):\n      *  1376 applied\n \
    \     *  1377 applied\n      *  1378 applied\n      *  1379 applied\n      * \
    \ 1380 applied\n      *  1381 applied\n      *  1382 applied\n      *  1383 discarded\
    \ (no longer applies)\n      *  1384 applied\n      *  1386 applied\n      * \
    \ 1461 applied\n      *  1487 applied\n      *  1532 applied\n      *  1596 applied\n\
    \   o  Introductory section enumerating relevant architectural documents\n   \
    \   added.\n   o  Introductory section briefly discussing the matter of data\n\
    \      integrity added.\n   o  Allowed tolerance of some clock drift.\n   o  Dropped\
    \ \"g=\" tag from key records.  The implementation report\n      indicates that\
    \ it is not in use.\n   o  Removed errant note about wildcards in the DNS.\n \
    \  o  Removed SMTP-specific advice in most places.\n   o  Reduced (non-normative)\
    \ recommended signature content list, and\n      reworked the text in that section.\n\
    \   o  Clarified signature generation algorithm by rewriting its pseudo-\n   \
    \   code.\n   o  Numerous terminology subsections added, imported from [RFC5672].\n\
    \      Also, began using these terms throughout the document (e.g., SDID,\n  \
    \    AUID).\n   o  Sections added that specify input and output requirements.\
    \  Input\n      requirements address a security concern raised by the working\n\
    \      group (see also new sections in Security Considerations).  Output\n   \
    \   requirements are imported from [RFC5672].\n   o  Appendix subsection added\
    \ discussing compatibility with DomainKeys\n      ([RFC4870]) records.\n   o \
    \ Referred to [RFC5451] as an example method of communicating the\n      results\
    \ of DKIM verification.\n   o  Removed advice about possible uses of the \"l=\"\
    \ signature tag.\n   o  IANA registry updated.\n   o  Added two new Security Considerations\
    \ sections talking about\n      malformed message attacks.\n   o  Various copy\
    \ editing.\n"
- title: Appendix F.  Acknowledgments
  contents:
  - "Appendix F.  Acknowledgments\n   The previous IETF version of DKIM [RFC4871]\
    \ was edited by Eric\n   Allman, Jon Callas, Mark Delany, Miles Libbey, Jim Fenton,\
    \ and\n   Michael Thomas.\n   That specification was the result of an extended\
    \ collaborative\n   effort, including participation by Russ Allbery, Edwin Aoki,\
    \ Claus\n   Assmann, Steve Atkins, Rob Austein, Fred Baker, Mark Baugher, Steve\n\
    \   Bellovin, Nathaniel Borenstein, Dave Crocker, Michael Cudahy, Dennis\n   Dayman,\
    \ Jutta Degener, Frank Ellermann, Patrik Faeltstroem, Mark\n   Fanto, Stephen\
    \ Farrell, Duncan Findlay, Elliot Gillum, Olafur\n   Gudmundsson, Phillip Hallam-Baker,\
    \ Tony Hansen, Sam Hartman, Arvel\n   Hathcock, Amir Herzberg, Paul Hoffman, Russ\
    \ Housley, Craig Hughes,\n   Cullen Jennings, Don Johnsen, Harry Katz, Murray\
    \ S. Kucherawy, Barry\n   Leiba, John Levine, Charles Lindsey, Simon Longsdale,\
    \ David Margrave,\n   Justin Mason, David Mayne, Thierry Moreau, Steve Murphy,\
    \ Russell\n   Nelson, Dave Oran, Doug Otis, Shamim Pirzada, Juan Altmayer Pizzorno,\n\
    \   Sanjay Pol, Blake Ramsdell, Christian Renaud, Scott Renfro, Neil\n   Rerup,\
    \ Eric Rescorla, Dave Rossetti, Hector Santos, Jim Schaad, the\n   Spamhaus.org\
    \ team, Malte S. Stretz, Robert Sanders, Rand Wacker, Sam\n   Weiler, and Dan\
    \ Wing.\n   The earlier DomainKeys was a primary source from which DKIM was\n\
    \   derived.  Further information about DomainKeys is at [RFC4870].\n   This revision\
    \ received contributions from Steve Atkins, Mark Delany,\n   J.D. Falk, Jim Fenton,\
    \ Michael Hammer, Barry Leiba, John Levine,\n   Charles Lindsey, Jeff Macdonald,\
    \ Franck Martin, Brett McDowell, Doug\n   Otis, Bill Oxley, Hector Santos, Rolf\
    \ Sonneveld, Michael Thomas, and\n   Alessandro Vesely.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dave Crocker (editor)\n   Brandenburg InternetWorking\n\
    \   675 Spruce Dr.\n   Sunnyvale, CA  94086\n   USA\n   Phone: +1.408.246.8253\n\
    \   EMail: dcrocker@bbiw.net\n   URI:   http://bbiw.net\n   Tony Hansen (editor)\n\
    \   AT&T Laboratories\n   200 Laurel Ave. South\n   Middletown, NJ  07748\n  \
    \ USA\n   EMail: tony+dkimsig@maillennium.att.com\n   Murray S. Kucherawy (editor)\n\
    \   Cloudmark\n   128 King St., 2nd Floor\n   San Francisco, CA  94107\n   USA\n\
    \   EMail: msk@cloudmark.com\n"
