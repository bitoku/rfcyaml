- title: __initial_text__
  contents:
  - "           Using Message Authentication Code (MAC) Encryption\n             \
    \  in the Cryptographic Message Syntax (CMS)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the conventions for using Message\n   Authentication\
    \ Code (MAC) encryption with the Cryptographic Message\n   Syntax (CMS) authenticated-enveloped-data\
    \ content type.  This mirrors\n   the use of a MAC combined with an encryption\
    \ algorithm that's already\n   employed in IPsec, Secure Socket Layer / Transport\
    \ Layer Security\n   (SSL/TLS) and Secure SHell (SSH), which is widely supported\
    \ in\n   existing crypto libraries and hardware and has been extensively\n   analysed\
    \ by the crypto community.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6476.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................2\n  \
    \ 2. Background ......................................................2\n   3.\
    \ CMS Encrypt-and-Authenticate Overview ...........................3\n      3.1.\
    \ Rationale ..................................................3\n   4. CMS Encrypt-and-Authenticate\
    \ ....................................4\n      4.1. Encrypt-and-Authenticate Message\
    \ Processing ................5\n      4.2. Rationale ..................................................6\n\
    \      4.3. Test Vectors ...............................................8\n  \
    \ 5. SMIMECapabilities Attribute ....................................12\n   6.\
    \ Security Considerations ........................................12\n   7. IANA\
    \ Considerations ............................................13\n   8. Acknowledgements\
    \ ...............................................14\n   9. References .....................................................14\n\
    \      9.1. Normative References ......................................14\n  \
    \    9.2. Informative References ....................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the conventions for using MAC-authenticated\n\
    \   encryption with the Cryptographic Message Syntax (CMS) authenticated-\n  \
    \ enveloped-data content type.  This mirrors the use of a MAC combined\n   with\
    \ an encryption algorithm that's already employed in IPsec, SSL/\n   TLS and SSH,\
    \ which is widely supported in existing crypto libraries\n   and hardware and\
    \ has been extensively analysed by the crypto\n   community.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Background
  contents:
  - "2.  Background\n   Integrity-protected encryption is a standard feature of session-\n\
    \   oriented security protocols like [IPsec], [SSH], and [TLS].  Until\n   recently,\
    \ however, integrity-protected encryption wasn't available\n   for message-based\
    \ security protocols like CMS, although [OpenPGP]\n   added a form of integrity\
    \ protection by encrypting a SHA-1 hash of\n   the message alongside the message\
    \ contents to provide authenticate-\n   and-encrypt protection.  Usability studies\
    \ have shown that users\n   expect encryption to provide integrity protection\
    \ [Garfinkel],\n   creating cognitive dissonance problems when the security mechanisms\n\
    \   don't in fact provide this assurance.\n   This document applies the same encrypt-and-authenticate\
    \ mechanism\n   already employed in IPsec, SSH, and SSL/TLS to CMS (technically\
    \ some\n   of these actually use authenticate-and-encrypt rather than encrypt-\n\
    \   and-authenticate, since what's authenticated is the plaintext and not\n  \
    \ the ciphertext).  This mechanism is widely supported in existing\n   crypto\
    \ libraries and hardware and has been extensively analysed by\n   the crypto community\
    \ [EncryptThenAuth].\n"
- title: 3.  CMS Encrypt-and-Authenticate Overview
  contents:
  - "3.  CMS Encrypt-and-Authenticate Overview\n   Conventional CMS encryption uses\
    \ a content-encryption key (CEK) to\n   encrypt a message payload, with the CEK\
    \ typically being in turn\n   encrypted by a key-encryption key (KEK).  Authenticated\
    \ encryption\n   requires two keys: one for encryption and a second one for\n\
    \   authentication.  Like other mechanisms that use authenticated\n   encryption,\
    \ this document employs a pseudorandom function (PRF) to\n   convert a single\
    \ block of keying material into the two keys required\n   for encryption and authentication.\
    \  This converts the standard CMS\n   encryption operation:\n       KEK( CEK )\
    \ || CEK( data )\n   into:\n       KEK( master_secret ) || MAC( CEK( data ) )\n\
    \   where the MAC key MAC-K and encryption key CEK-K are derived from the\n  \
    \ master_secret via:\n       MAC-K := PRF( master_secret, \"authentication\" );\n\
    \       CEK-K := PRF( master_secret, \"encryption\" );\n"
- title: 3.1.  Rationale
  contents:
  - "3.1.  Rationale\n   There are several possible means of deriving the two keys\
    \ required\n   for the encrypt-and-authenticate process from the single key normally\n\
    \   provided by the key exchange or key transport mechanisms.  Several of\n  \
    \ these, however, have security or practical issues.  For example, any\n   mechanism\
    \ that uses the single exchanged key in its entirety for\n   encryption (using,\
    \ perhaps, PRF( key ) as the MAC key) can be\n   converted back to unauthenticated\
    \ data by removing the outer MAC\n   layer and rewriting the CMS envelope back\
    \ to plain EnvelopedData or\n   EncryptedData.  By applying the PRF intermediate\
    \ step, any attempt at\n   a rollback attack will result in a decryption failure.\n\
    \   The option chosen here -- the use of a PRF to derive the necessary\n   sets\
    \ of keying material from a master secret -- is well-established\n   through its\
    \ use in IPsec, SSH, and SSL/TLS and is widely supported in\n   both crypto libraries\
    \ and in encryption hardware.\n   The PRF used is Password-Based Key Derivation\
    \ Function 2 (PBKDF2)\n   because its existing use in CMS makes it the most obvious\
    \ candidate\n   for such a function.  In the future, if a universal PRF -- for\n\
    \   example, [HKDF] -- is adopted, then this can be substituted for\n   PBKDF2\
    \ by specifying it in the prfAlgorithm field covered in\n   Section 4.\n   The\
    \ resulting processing operations consist of a combination of the\n   operations\
    \ used for the existing CMS content types EncryptedData and\n   AuthenticatedData,\
    \ allowing them to be implemented relatively simply\n   using existing code.\n"
- title: 4.  CMS Encrypt-and-Authenticate
  contents:
  - "4.  CMS Encrypt-and-Authenticate\n   The encrypt-and-authenticate mechanism is\
    \ implemented within the\n   existing CMS RecipientInfo framework by defining\
    \ a new pseudo-\n   algorithm type, authEnc, which is used in place of a monolithic\n\
    \   encrypt and hash algorithm.  The RecipientInfo is used as a key\n   container\
    \ for the master secret used by the pseudo-algorithm from\n   which the encryption\
    \ and authentication keys for existing single-\n   purpose encrypt-only and MAC-only\
    \ algorithms are derived.  Thus,\n   instead of using the RecipientInfo to communicate\
    \ (for example) an\n   AES or HMAC-SHA1 key, it communicates a master secret from\
    \ which the\n   required AES encryption and HMAC-SHA1 authentication keys are\n\
    \   derived.\n   The authEnc pseudo-algorithm comes in two forms: one conveying\n\
    \   128 bits of keying material and one conveying 256 bits:\n       id-smime OBJECT\
    \ IDENTIFIER ::= { iso(1) member-body(2)\n                   us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 16 }\n       id-alg  OBJECT IDENTIFIER ::= { id-smime 3 }\n\
    \       id-alg-authEnc-128 OBJECT IDENTIFIER ::= { id-alg 15 }\n       id-alg-authEnc-256\
    \ OBJECT IDENTIFIER ::= { id-alg 16 }\n    The algorithm parameters are as follows:\n\
    \       AuthEncParams ::= SEQUENCE {\n           prfAlgorithm   [0] AlgorithmIdentifier\
    \ DEFAULT PBKDF2,\n           encAlgorithm       AlgorithmIdentifier,\n      \
    \     macAlgorithm       AlgorithmIdentifier\n           }\n      prfAlgorithm\
    \ is the PRF algorithm used to convert the master\n      secret into the encryption\
    \ and MAC keys.  The default PRF is\n      [PBKDF2], which in turn has a default\
    \ PRF algorithm of HMAC-SHA1.\n      When this default setting is used, the PBKDF2-params\
    \ 'salt'\n      parameter is an empty string, and the 'iterationCount' parameter\n\
    \      is one, turning the KDF into a pure PRF.\n      encAlgorithm is the encryption\
    \ algorithm and associated parameters\n      to be used to encrypt the content.\n\
    \      macAlgorithm is the MAC algorithm and associated parameters to be\n   \
    \   used to authenticate/integrity-protect the content.\n   When the prfAlgorithm\
    \ AlgorithmIdentifier is used in conjunction with\n   PBKDF2 to specify a PRF\
    \ other than the default PBKDF2-with-HMAC-SHA1\n   one, the PBKDF2-params require\
    \ that two additional algorithm\n   parameters be specified.  The 'salt' parameter\
    \ MUST be an empty\n   (zero-length) string, and the 'iterationCount' parameter\
    \ MUST be one,\n   since these values aren't used in the PRF process.  In their\
    \ encoded\n   form as used for the PBKDF2-params, these two parameters have the\n\
    \   value 08 00 02 01 01.\n   As a guideline for authors specifying the use of\
    \ PRFs other than\n   PBKDF2, any additional parameters such as salts, tags, and\n\
    \   identification strings SHOULD be set to empty strings, and any\n   iteration\
    \ count SHOULD be set to one.\n"
- title: 4.1.  Encrypt-and-Authenticate Message Processing
  contents:
  - "4.1.  Encrypt-and-Authenticate Message Processing\n   The randomly generated\
    \ master secret to be communicated via the\n   RecipientInfo(s) is converted to\
    \ separate encryption and\n   authentication keys and applied to the encrypt-and-authenticate\n\
    \   process as follows.  The notation \"PRF( key, salt, iterations )\" is\n  \
    \ used to denote an application of the PRF to the given keying value\n   and salt,\
    \ for the given number of iterations:\n   1.  The MAC algorithm key is derived\
    \ from the master secret via:\n           MAC-K ::= PRF( master_secret, \"authentication\"\
    , 1 );\n   2.  The encryption algorithm key is derived from the master\n     \
    \  secret via:\n           Enc-K ::= PRF( master_secret, \"encryption\", 1 );\n\
    \   3.  The data is processed as described in [AuthEnv], and specifically\n  \
    \     since the mechanisms used are a union of EncryptedData\n       and AuthenticatedData,\
    \ as per [CMS].  The one exception to\n       this is that the\n       EncryptedContentInfo.ContentEncryptionAlgorithmIdentifier\
    \ data is\n       MACed before the encrypted content is MACed.  The EncryptedData\n\
    \       processing is applied to the data first, and then the\n       AuthenticatedData\
    \ processing is applied to the result, so that\n       the nesting is as follows:\n\
    \           MAC( contentEncrAlgoID || encrypt( content ) );\n   4.  If authenticated\
    \ attributes are present, then they are encoded as\n       described in [AuthEnv]\
    \ and MACed after the encrypted content, so\n       that the processing is as\
    \ follows:\n           MAC( contentEncrAlgoID || encrypt( content ) || authAttr\
    \ );\n"
- title: 4.2.  Rationale
  contents:
  - "4.2.  Rationale\n   When choosing between encrypt-and-authenticate and authenticate-and-\n\
    \   encrypt, the more secure option is encrypt-and-authenticate.  There\n   has\
    \ been extensive analysis of this in the literature; the best\n   coverage is\
    \ probably [EncryptThenAuth].\n   The EncryptedContentInfo.ContentEncryptionAlgorithmIdentifier\
    \ is the\n   SEQUENCE containing the id-alg-authEnc-128/id-alg-authEnc-256 OBJECT\n\
    \   IDENTIFIER and its associated AuthEncParams.  This data is MACed\n   exactly\
    \ as encoded, without any attempt to re-code it into a\n   canonical form like\
    \ DER.\n   The EncryptedContentInfo.ContentEncryptionAlgorithmIdentifier must\
    \ be\n   protected alongside the encrypted content; otherwise, an attacker\n \
    \  could manipulate the encrypted data indirectly by manipulating the\n   encryption\
    \ algorithm parameters, which wouldn't be detected through\n   MACing the encrypted\
    \ content alone.  For example, by changing the\n   encryption IV, it's possible\
    \ to modify the results of the decryption\n   after the encrypted data has been\
    \ verified via a MAC check.\n   The authEnc pseudo-algorithm has two \"key sizes\"\
    \ rather than the one-\n   size-fits-all that the PRF impedance-matching would\
    \ provide.  This is\n   done to address real-world experience in the use of AES\
    \ keys, where\n   users demanded AES-256 alongside AES-128 because of some perception\n\
    \   that the former was \"twice as good\" as the latter.  Providing an\n   option\
    \ for keys that go to 11 avoids potential user acceptance\n   problems when someone\
    \ notices that the authEnc pseudo-key has \"only\"\n   128 bits when they expect\
    \ their AES keys to be 256 bits long.\n   Using a fixed-length key rather than\
    \ making it a user-selectable\n   parameter is done for the same reason as AES's\
    \ quantised key lengths:\n   there's no benefit to allowing, say, 137-bit keys\
    \ over basic 128- and\n   256-bit lengths; it adds unnecessary complexity; if\
    \ the lengths are\n   user-defined, then there'll always be someone who wants\
    \ keys that go\n   up to 12.  Providing a choice of two commonly used lengths\
    \ gives\n   users the option of choosing a \"better\" key size should they feel\
    \ the\n   need, while not overloading the system with unneeded flexibility.\n\
    \   The use of the PRF AlgorithmIdentifier presents some problems,\n   because\
    \ it's usually not specified in a manner that allows it to be\n   easily used\
    \ as a straight KDF.  For example, PBKDF2 has the following\n   parameters:\n\
    \       PBKDF2-params ::= SEQUENCE {\n           salt OCTET STRING,\n        \
    \   iterationCount INTEGER (1..MAX),\n           prf AlgorithmIdentifier {{PBKDF2-PRFs}}\n\
    \                                   DEFAULT algid-hmacWithSHA1\n           }\n\
    \   of which only the prf AlgorithmIdentifier is used here.  In order to\n   avoid\
    \ having to define new AlgorithmIdentifiers for each possible\n   PRF, this specification\
    \ sets any parameters not required for KDF\n   functionality to no-op values.\
    \  In the case of PBKDF2, this means\n   that the salt has length zero and the\
    \ iteration count is set to one,\n   with only the prf AlgorithmIdentifier playing\
    \ a part in the\n   processing.  Although it's not possible to know what form\
    \ other\n   PRFs-as-KDFs will take, a general note for their application within\n\
    \   this specification is that any non-PRF parameters should similarly be\n  \
    \ set to no-op values.\n   Specifying a MAC key size gets a bit tricky; most MAC\
    \ algorithms have\n   some de facto standard key size, and for HMAC algorithms,\
    \ this is\n   usually the same as the hash output size.  For example, for HMAC-MD5,\n\
    \   it's 128 bits; for HMAC-SHA1, it's 160 bits; and for HMAC-SHA256,\n   it's\
    \ 256 bits.  Other MAC algorithms also have de facto standard key\n   sizes. \
    \ For example, for AES-based MACs, it's the AES key size --\n   128 bits for AES-128\
    \ and 256 bits for AES-256.  This situation makes\n   it difficult to specify\
    \ the key size in a normative fashion, since\n   it's dependent on the algorithm\
    \ type that's being used.  If there is\n   any ambiguity over which key size should\
    \ be used, then it's\n   RECOMMENDED that either the size be specified explicitly\
    \ in the\n   macAlgorithm AlgorithmIdentifier or that an RFC or similar standards\n\
    \   document be created that makes the key sizes explicit.\n   As with other uses\
    \ of PRFs for crypto impedance-matching in\n   protocols, like IPsec, SSL/TLS,\
    \ and SSH, the amount of input to the\n   PRF generally doesn't match the amount\
    \ of output.  The general\n   philosophical implications of this are covered in\
    \ various analyses of\n   the properties and uses of PRFs.  If you're worried\
    \ about this, then\n   you can try and approximately match the authEnc \"key size\"\
    \ to the key\n   size of the encryption algorithm being used, although even there,\
    \ a\n   perfect match for algorithms like Blowfish (448 bits) or RC5\n   (832\
    \ bits) is going to be difficult.\n   The term \"master secret\" comes from its\
    \ use in SSL/TLS, which uses a\n   similar PRF-based mechanism to convert its\
    \ master_secret value into\n   encryption and MAC keys (as do SSH and IPsec).\
    \  The master_secret\n   value isn't a key in the conventional sense, but merely\
    \ a secret\n   value that's then used to derive two (or, in the cases of SSL/TLS,\n\
    \   SSH, and IPsec, several) keys and related cryptovariables.\n   Apart from\
    \ the extra step added to key management, all of the\n   processing is already\
    \ specified as part of the definition of the\n   standard CMS content-types Encrypted/EnvelopedData\
    \ and\n   AuthenticatedData.  This significantly simplifies both the\n   specification\
    \ and the implementation task, as no new content-\n   processing mechanisms are\
    \ introduced.\n"
- title: 4.3.  Test Vectors
  contents:
  - "4.3.  Test Vectors\n   The following test vectors may be used to verify an implementation\
    \ of\n   MAC-authenticated encryption.  This represents a text string\n   encrypted\
    \ and authenticated using the ever-popular password\n   \"password\" via CMS PasswordRecipientInfo.\
    \  The encryption algorithm\n   used for the first value is triple DES, whose\
    \ short block size\n   (compared to AES) makes it easier to corrupt arbitrary\
    \ bytes for\n   testing purposes within the self-healing Cipher Block Chaining\
    \ (CBC)\n   mode, which will result in correct decryption but a failed MAC check.\n\
    \   The encryption algorithm used for the second value is AES.\n   For the triple\
    \ DES-encrypted data, corrupting a byte at positions\n   192-208 can be used to\
    \ check that payload-data corruption is\n   detected, and corrupting a byte at\
    \ positions 168-174 can be used to\n   check that metadata corruption is detected.\
    \  The corruption in these\n   byte ranges doesn't affect normal processing and\
    \ so wouldn't normally\n   be detected.\n   The test data has the following characteristics:\n\
    \      version is set to 0.\n      originatorInfo isn't needed and is omitted.\n\
    \      recipientInfo uses passwordRecipientInfo to allow easy testing\n      with\
    \ a fixed text string.\n      authEncryptedContentInfo uses the authEnc128 pseudo-algorithm\n\
    \      with a key of 128 bits used to derive triple DES/AES and\n      HMAC-SHA1\
    \ keys.\n      authAttrs aren't used and are omitted.\n      mac is the 20-byte\
    \ HMAC-SHA1 MAC value.\n      unauthAttrs aren't used and are omitted.\n     0\
    \  227: SEQUENCE {\n     3   11:   OBJECT IDENTIFIER id-ct-authEnvelopedData\n\
    \                                 (1 2 840 113549 1 9 16 1 23)\n    16  211: \
    \  [0] {\n    19  208:     SEQUENCE {\n    22    1:       INTEGER 0\n    25  \
    \ 97:       SET {\n    27   95:         [3] {\n    29    1:           INTEGER\
    \ 0\n    32   27:           [0] {\n    34    9:             OBJECT IDENTIFIER\
    \ pkcs5PBKDF2\n                                           (1 2 840 113549 1 5\
    \ 12)\n    45   14:             SEQUENCE {\n    47    8:               OCTET STRING\
    \ B7 EB 23 A7 6B D2 05 16\n    57    2:               INTEGER 5000\n         \
    \  :               }\n           :             }\n    61   35:           SEQUENCE\
    \ {\n    63   11:             OBJECT IDENTIFIER pwriKEK\n                    \
    \                       (1 2 840 113549 1 9 16 3 9)\n    76   20:            \
    \ SEQUENCE {\n    78    8:               OBJECT IDENTIFIER des-EDE3-CBC\n    \
    \                                         (1 2 840 113549 3 7)\n    88    8: \
    \              OCTET STRING 66 91 02 45 6B 73 BB 99\n           :            \
    \   }\n           :             }\n    98   24:           OCTET STRING\n     \
    \      :             30 A3 7A B5 D8 F2 87 50 EC 41 04 AE 89 99 26 F0\n       \
    \    :             2E AE 4F E3 F3 52 2B A3\n           :           }\n       \
    \    :         }\n   124   82:       SEQUENCE {\n   126    9:         OBJECT IDENTIFIER\
    \ data (1 2 840 113549 1 7 1)\n   137   51:         SEQUENCE {\n   139   11: \
    \          OBJECT IDENTIFIER authEnc128\n                                    \
    \     (1 2 840 113549 1 9 16 3 15)\n   152   36:           SEQUENCE {\n   154\
    \   20:             SEQUENCE {\n   156    8:               OBJECT IDENTIFIER des-EDE3-CBC\n\
    \                                             (1 2 840 113549 3 7)\n   166   \
    \ 8:               OCTET STRING D2 D0 81 71 4D 3D 9F 11\n           :        \
    \       }\n   176   12:             SEQUENCE {\n   178    8:               OBJECT\
    \ IDENTIFIER hmacSHA (1 3 6 1 5 5 8 1 2)\n   188    0:               NULL\n  \
    \         :               }\n           :             }\n           :        \
    \   }\n   190   16:         [0] 3A C6 06 61 41 5D 00 7D 11 35 CD 69 E1 56 CA 10\n\
    \           :         }\n   208   20:       OCTET STRING\n           :       \
    \  33 65 E8 F0 F3 07 06 86 1D A8 47 2C 6D 3A 1D 94\n           :         21 40\
    \ 64 7E\n           :       }\n           :     }\n           :   }\n   -----BEGIN\
    \ PKCS7-----\n   MIHjBgsqhkiG9w0BCRABF6CB0zCB0AIBADFho18CAQCgGwYJKoZIhvcNAQUMMA4E\n\
    \   CLfrI6dr0gUWAgITiDAjBgsqhkiG9w0BCRADCTAUBggqhkiG9w0DBwQIZpECRWtz\n   u5kEGDCjerXY8odQ7EEEromZJvAurk/j81IrozBSBgkqhkiG9w0BBwEwMwYLKoZI\n\
    \   hvcNAQkQAw8wJDAUBggqhkiG9w0DBwQI0tCBcU09nxEwDAYIKwYBBQUIAQIFAIAQ\n   OsYGYUFdAH0RNc1p4VbKEAQUM2Xo8PMHBoYdqEcsbTodlCFAZH4=\n\
    \   -----END PKCS7-----\n   0  253: SEQUENCE {\n   3   11:   OBJECT IDENTIFIER\
    \ id-ct-authEnvelopedData\n                               (1 2 840 113549 1 9\
    \ 16 1 23)\n  16  237:   [0] {\n  19  234:     SEQUENCE {\n  22    1:       INTEGER\
    \ 0\n  25  114:       SET {\n  27  112:         [3] {\n  29    1:           INTEGER\
    \ 0\n  32   27:           [0] {\n  34    9:             OBJECT IDENTIFIER pkcs5PBKDF2\n\
    \                                         (1 2 840 113549 1 5 12)\n  45   14:\
    \             SEQUENCE {\n  47    8:               OCTET STRING E7 B7 87 DF 82\
    \ 1D 12 CC\n  57    2:               INTEGER 5000\n         :               }\n\
    \         :             }\n  61   44:           SEQUENCE {\n  63   11:       \
    \      OBJECT IDENTIFIER pwriKEK\n                                         (1\
    \ 2 840 113549 1 9 16 3 9)\n  76   29:             SEQUENCE {\n  78    9:    \
    \           OBJECT IDENTIFIER aes128-CBC\n                                   \
    \        (2 16 840 1 101 3 4 1 2)\n  89   16:               OCTET STRING\n   \
    \      :               11 D9 5C 52 0A 3A BF 22 B2 30 70 EF F4 7D 6E F6\n     \
    \    :               }\n         :             }\n 107   32:           OCTET STRING\n\
    \         :             18 39 22 27 C3 C2 2C 2A A6 9F 2A B0 77 24 75 AA\n    \
    \     :             D8 58 9C CD BB 4C AE D3 0D C2 CB 1D 83 94 6C 37\n        \
    \ :           }\n         :         }\n 141   91:       SEQUENCE {\n 143    9:\
    \         OBJECT IDENTIFIER data (1 2 840 113549 1 7 1)\n 154   60:         SEQUENCE\
    \ {\n 156   11:           OBJECT IDENTIFIER authEnc128\n                     \
    \                  (1 2 840 113549 1 9 16 3 15)\n 169   45:           SEQUENCE\
    \ {\n 171   29:             SEQUENCE {\n 173    9:               OBJECT IDENTIFIER\
    \ aes128-CBC\n                                           (2 16 840 1 101 3 4 1\
    \ 2)\n 184   16:               OCTET STRING\n         :               B7 25 02\
    \ 76 84 3C 58 1B A5 30 E2 40 27 EE C3 06\n         :               }\n 202   12:\
    \             SEQUENCE {\n 204    8:               OBJECT IDENTIFIER hmacSHA (1\
    \ 3 6 1 5 5 8 1 2)\n 214    0:               NULL\n         :               }\n\
    \         :             }\n         :           }\n 216   16:         [0] 98 36\
    \ 0F 0C 79 62 36 B5 2D 2D 9E 1C 62 85 1E 10\n         :         }\n 234   20:\
    \       OCTET STRING\n         :         88 A4 C1 B2 BA 78 1B CA F9 14 B0 E5 FC\
    \ D1 8D F8\n         :         02 E2 B2 9E\n         :       }\n         :   \
    \  }\n         :   }\n   -----BEGIN PKCS7-----\n   MIH9BgsqhkiG9w0BCRABF6CB7TCB6gIBADFyo3ACAQCgGwYJKoZIhvcNAQUMMA4E\n\
    \   COe3h9+CHRLMAgITiDAsBgsqhkiG9w0BCRADCTAdBglghkgBZQMEAQIEEBHZXFIK\n   Or8isjBw7/R9bvYEIBg5IifDwiwqpp8qsHckdarYWJzNu0yu0w3Cyx2DlGw3MFsG\n\
    \   CSqGSIb3DQEHATA8BgsqhkiG9w0BCRADDzAtMB0GCWCGSAFlAwQBAgQQtyUCdoQ8\n   WBulMOJAJ+7DBjAMBggrBgEFBQgBAgUAgBCYNg8MeWI2tS0tnhxihR4QBBSIpMGy\n\
    \   ungbyvkUsOX80Y34AuKyng==\n   -----END PKCS7-----\n"
- title: 5.  SMIMECapabilities Attribute
  contents:
  - "5.  SMIMECapabilities Attribute\n   An S/MIME client SHOULD announce the set\
    \ of cryptographic functions\n   that it supports by using the SMIMECapabilities\
    \ attribute [SMIME].\n   If the client wishes to indicate support for MAC-authenticated\n\
    \   encryption, the capabilities attribute MUST contain the authEnc128\n   and/or\
    \ authEnc256 OID specified above with algorithm parameters\n   ABSENT.  The other\
    \ algorithms used in the authEnc algorithm, such as\n   the MAC and encryption\
    \ algorithm, are selected based on the presence\n   of these algorithms in the\
    \ SMIMECapabilities attribute or by mutual\n   agreement.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Unlike other CMS authenticated-data mechanisms,\
    \ such as SignedData\n   and AuthenticatedData, AuthEnv's primary transformation\
    \ isn't\n   authentication but encryption; so AuthEnvData may decrypt\n   successfully\
    \ (in other words, the primary data transformation present\n   in the mechanism\
    \ will succeed), but the secondary function of\n   authentication using the MAC\
    \ value that follows the encrypted data\n   could still fail.  This can lead to\
    \ a situation in which an\n   implementation might output decrypted data before\
    \ it reaches and\n   verifies the MAC value.  In other words, decryption is performed\n\
    \   inline and the result is available immediately, while the\n   authentication\
    \ result isn't available until all of the content has\n   been processed.  If\
    \ the implementation prematurely provides data to\n   the user and later comes\
    \ back to inform them that the earlier data\n   was, in retrospect, tainted, this\
    \ may cause users to act prematurely\n   on the tainted data.\n   This situation\
    \ could occur in a streaming implementation where data\n   has to be made available\
    \ as soon as possible (so that the initial\n   plaintext is emitted before the\
    \ final ciphertext and MAC value are\n   read), or one where the quantity of data\
    \ involved rules out buffering\n   the recovered plaintext until the MAC value\
    \ can be read and verified.\n   In addition, an implementation that tries to be\
    \ overly helpful may\n   treat missing non-payload trailing data as non-fatal,\
    \ allowing an\n   attacker to truncate the data somewhere before the MAC value\
    \ and\n   thereby defeat the data authentication.  This is complicated even\n\
    \   further by the fact that an implementation may not be able to\n   determine,\
    \ when it encounters truncated data, whether the remainder\n   (including the\
    \ MAC value) will arrive presently (a non-failure) or\n   whether it's been truncated\
    \ by an attacker and should therefore be\n   treated as a MAC failure.  (Note\
    \ that this same issue affects other\n   types of data authentication like signed\
    \ and MACed data as well,\n   since an over-optimistic implementation may return\
    \ data to the user\n   before checking for a verification failure is possible.)\n\
    \   The exact solution to these issues is somewhat implementation-\n   specific,\
    \ with some suggested mitigations being as follows:\n   implementations should\
    \ buffer the entire message if possible and\n   verify the MAC before performing\
    \ any decryption.  If this isn't\n   possible due to streaming or message-size\
    \ constraints, then\n   implementations should consider breaking long messages\
    \ into a\n   sequence of smaller ones, each of which can be processed atomically\n\
    \   as above.  If even this isn't possible, then implementations should\n   make\
    \ obvious to the caller or user that an authentication failure has\n   occurred\
    \ and that the previously returned or output data shouldn't be\n   used.  Finally,\
    \ any data-formatting problem, such as obviously\n   truncated data or missing\
    \ trailing data, should be treated as a MAC\n   verification failure even if the\
    \ rest of the data was processed\n   correctly.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document contains two algorithm identifiers\
    \ defined by the\n   S/MIME Working Group Registrar in an arc delegated by RSA\
    \ to the\n   S/MIME Working Group: iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \   pkcs(1) pkcs-9(9) smime(16) modules(0).\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The author would like to thank Jim Schaad and the members\
    \ of the\n   S/MIME mailing list for their feedback on this document, and David\n\
    \   Ireland for help with the test vectors.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [AuthEnv]   Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\n               Authenticated-Enveloped-Data Content Type\", RFC\
    \ 5083,\n               November 2007.\n   [CMS]       Housley, R., \"Cryptographic\
    \ Message Syntax (CMS)\",\n               STD 70, RFC 5652, September 2009.\n\
    \   [PBKDF2]    Kaliski, B., \"PKCS #5: Password-Based Cryptography\n        \
    \       Specification Version 2\", RFC 2898, September 2000.\n   [RFC2119]   Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n               Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [SMIME]     Ramsdell, B. and S. Turner, \"\
    Secure/Multipurpose Internet\n               Mail Extensions (S/MIME) Version\
    \ 3.2 Message\n               Specification\", RFC 5751, January 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [EncryptThenAuth]\n               Krawczyk,\
    \ H., \"The Order of Encryption and Authentication\n               for Protecting\
    \ Communications (or: How Secure Is SSL?)\",\n               Springer-Verlag LNCS\
    \ 2139, August 2001.\n   [Garfinkel] Garfinkel, S., \"Design Principles and Patterns\
    \ for\n               Computer Systems That Are Simultaneously Secure and\n  \
    \             Usable\", May 2005.\n   [HKDF]      Krawczyk, H. and P. Eronen,\
    \ \"HMAC-based\n               Extract-and-Expand Key Derivation Function (HKDF)\"\
    ,\n               RFC 5869, May 2010.\n   [IPsec]     Kent, S. and K. Seo, \"\
    Security Architecture for the\n               Internet Protocol\", RFC 4301, December\
    \ 2005.\n   [OpenPGP]   Callas, J., Donnerhacke, L., Finney, H., Shaw, D., and\
    \ R.\n               Thayer, \"OpenPGP Message Format\", RFC 4880,\n         \
    \      November 2007.\n   [SSH]       Ylonen, T. and C. Lonvick, Ed., \"The Secure\
    \ Shell (SSH)\n               Transport Layer Protocol\", RFC 4253, January 2006.\n\
    \   [TLS]       Dierks, T. and E. Rescorla, \"The Transport Layer Security\n \
    \              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter Gutmann\n   University of Auckland\n   Department\
    \ of Computer Science\n   New Zealand\n   EMail: pgut001@cs.auckland.ac.nz\n"
