- title: __initial_text__
  contents:
  - '  Requesting Answering Modes for the Session Initiation Protocol (SIP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD1) for the standardization state and\n   status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ (http://trustee.ietf.org/\n   license-info) in effect on the date of publication\
    \ of this document.\n   Please review these documents carefully, as they describe\
    \ your rights\n   and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document extends SIP with two header fields and associated\n\
    \   option tags that can be used in INVITE requests to convey the\n   requester's\
    \ preference for user-interface handling related to\n   answering of that request.\
    \  The first header, \"Answer-Mode\",\n   expresses a preference as to whether\
    \ the target node's user interface\n   waits for user input before accepting the\
    \ request or, instead,\n   accepts the request without waiting on user input.\
    \  The second\n   header, \"Priv-Answer-Mode\", is similar to the first, except\
    \ that it\n   requests administrative-level access and has consequent additional\n\
    \   authentication and authorization requirements.  These behaviors have\n   applicability\
    \ to applications such as push-to-talk and to diagnostics\n   like loop-back.\
    \  Usage of each header field in a response to indicate\n   how the request was\
    \ handled is also defined.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Background . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Requirements Language  . . . . . . . . . . . . .\
    \ . . . . .  5\n   2.  Syntax of Header Fields and Option Tags  . . . . . . .\
    \ . . . .  5\n   3.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields\
    \  .  6\n   4.  Usage of the Answer-Mode and Priv-Answer-Mode Header\n       Fields\
    \ in Requests . . . . . . . . . . . . . . . . . . . . . .  6\n     4.1.  The Difference\
    \ Between Answer-Mode and Priv-Answer-Mode  .  7\n     4.2.  The \"require\" Modifier\
    \ . . . . . . . . . . . . . . . . . .  9\n     4.3.  Procedures at User Agent\
    \ Clients (UAC) . . . . . . . . . .  9\n       4.3.1.  All Requests . . . . .\
    \ . . . . . . . . . . . . . . . .  9\n       4.3.2.  REGISTER Transactions  .\
    \ . . . . . . . . . . . . . . .  9\n       4.3.3.  INVITE Transactions  . . .\
    \ . . . . . . . . . . . . . . 10\n     4.4.  Procedures at Intermediate Proxies\
    \ . . . . . . . . . . . . 12\n       4.4.1.  General Proxy Behavior . . . . .\
    \ . . . . . . . . . . . 12\n       4.4.2.  Issues with Automatic Answering and\
    \ Forking  . . . . . 12\n     4.5.  Procedures at User Agent Servers (UAS) . .\
    \ . . . . . . . . 13\n       4.5.1.  INVITE Transactions  . . . . . . . . . .\
    \ . . . . . . . 13\n   5.  Usage of the Answer-Mode and Priv-Answer-Mode Header\n\
    \       Fields in Responses  . . . . . . . . . . . . . . . . . . . . . 14\n  \
    \   5.1.  Procedures at the UAS  . . . . . . . . . . . . . . . . . . 14\n    \
    \ 5.2.  Procedures at the UAC  . . . . . . . . . . . . . . . . . . 15\n   6. \
    \ Examples of Usage  . . . . . . . . . . . . . . . . . . . . . . 15\n     6.1.\
    \  REGISTER Request . . . . . . . . . . . . . . . . . . . . . 15\n     6.2.  INVITE\
    \ Request . . . . . . . . . . . . . . . . . . . . . . 16\n     6.3.  200 (OK)\
    \ Response  . . . . . . . . . . . . . . . . . . . . 16\n   7.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 16\n     7.1.  Attack Sensitivity Depends\
    \ on Media Characteristics  . . . 17\n     7.2.  Application Design Affects Attack\
    \ Opportunity  . . . . . . 19\n     7.3.  Applying the Analysis  . . . . . . .\
    \ . . . . . . . . . . . 19\n     7.4.  Minimal Policy Requirement . . . . . .\
    \ . . . . . . . . . . 21\n   8.  IANA Considerations  . . . . . . . . . . . .\
    \ . . . . . . . . . 22\n     8.1.  Registration of Header Fields  . . . . . .\
    \ . . . . . . . . 22\n     8.2.  Registration of Header Field Parameters  . .\
    \ . . . . . . . 22\n     8.3.  Registration of SIP Option Tags  . . . . . . .\
    \ . . . . . . 22\n   9.  Acknowledgements . . . . . . . . . . . . . . . . . .\
    \ . . . . . 23\n   10. References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 23\n     10.1. Normative References . . . . . . . . . . . . . . . .\
    \ . . . 23\n     10.2. Informative References . . . . . . . . . . . . . . . .\
    \ . . 24\n"
- title: 1.  Background
  contents:
  - "1.  Background\n   The conventional model for session establishment using the\
    \ Session\n   Initiation Protocol (SIP, [RFC3261]) involves 1) sending a request\n\
    \   for a session (a SIP INVITE) and notifying the user receiving the\n   request,\
    \ 2) acceptance of the request and of the session by that\n   user, and 3) the\
    \ sending of a response (SIP 200 OK) back to the\n   requester before the session\
    \ is established.  Some usage scenarios\n   deviate from this model, specifically\
    \ with respect to the\n   notification and acceptance phase.  While it has always\
    \ been possible\n   for the node receiving the request to skip the notification\
    \ and\n   acceptance phases, there has been no standard mechanism for the party\n\
    \   sending the request to specifically indicate a desire (or\n   requirement)\
    \ for this sort of treatment.  This document defines a SIP\n   extension header\
    \ field that can be used to request specific treatment\n   related to the notification\
    \ and acceptance phase.\n   The first usage scenario is the requirement for diagnostic\
    \ loopback\n   calls.  In this sort of scenario, a testing service sends an INVITE\n\
    \   to a node being tested.  The tested node accepts and a dialog is\n   established.\
    \  But rather than establishing a two-way media flow, the\n   tested node loops\
    \ back or \"echoes\" media received from the testing\n   service back toward the\
    \ testing service.  The testing service can\n   then analyze the media flow for\
    \ quality and timing characteristics.\n   Session Description Protocol (SDP) usage\
    \ for this sort of flow is\n   described in [LOOPBACK].  In this sort of application,\
    \ it might not\n   be necessary that the human using the tested node interact\
    \ with the\n   node in any way for the test to be satisfactorily executed.  In\
    \ some\n   cases, it might be appropriate to alert the user to the ongoing test,\n\
    \   and in other cases it might not be.\n   The second scenario is that of push-to-talk\
    \ applications, which have\n   been specified by the Open Mobile Alliance.  In\
    \ this sort of\n   environment, SIP is used to establish a dialog supporting\n\
    \   asynchronous delivery of unidirectional media flow, providing a user\n   experience\
    \ like that of a traditional two-way radio.  It is\n   conventional for the INVITES\
    \ used to be automatically accepted by the\n   called UA (User Agent), and the\
    \ media is commonly played out on a\n   loudspeaker.  The called party's UA's\
    \ microphone is not engaged until\n   the user presses the local \"talk\" button\
    \ to respond.\n   A third scenario is the Private Branch Exchange (PBX) attendant.\n\
    \   Traditional office PBX systems often include intercom functionality.\n   A\
    \ typical use for the intercom function is to allow a receptionist to\n   activate\
    \ a loudspeaker on a desk telephone in order to announce a\n   visitor.  Not every\
    \ caller can access the loudspeaker, only the\n   receptionist or operator, and\
    \ it is not expected that these callers\n   will always want \"intercom\" functionality\
    \ -- they might instead want\n   to make an ordinary call.\n   There are presumably\
    \ many more use cases for the extensions defined\n   in this specification, but\
    \ this document was developed to\n   specifically meet the requirements of these\
    \ scenarios, or others with\n   essentially similar properties.\n   These sorts\
    \ of mechanisms are not required to provide the\n   functionality of an \"answering\
    \ machine\" or \"voice mail recorder\".\n   Such a device knows that it is expected\
    \ to answer and does not\n   require a SIP extension to support its behavior.\n\
    \   Much of the discussion of this topic in working group meetings and on\n  \
    \ the mailing list dealt with differentiating \"answering mode\" from\n   \"alerting\
    \ mode\".  Some early work did not make this distinction.  We\n   therefore proceed\
    \ with the following definitions:\n   o  Answering Mode includes behaviors in\
    \ a SIP UA relating to\n      acceptance or rejection of a request that are contingent\
    \ on\n      interaction between the UA and the user of that UA after the UA\n\
    \      has received the request.  We are principally concerned with the\n    \
    \  user interaction involved in accepting the request and initiating\n      an\
    \ active session.  An example of this might be pressing the \"yes\"\n      button\
    \ on a mobile phone.\n   o  Alerting Mode includes behaviors in a SIP UA relating\
    \ to informing\n      the user of the UA that a request to initiate a session\
    \ has been\n      received.  An example of this might be activating the ring tone\
    \ of\n      a mobile phone.\n   This document deals only with \"Answering Mode\"\
    .  Issues relating to\n   \"Alerting Mode\" are outside its scope.\n   This document\
    \ defines two SIP extension header fields: \"Answer-Mode\"\n   and \"Priv-Answer-Mode\"\
    .  These two extensions take the same\n   parameters and operate in the same general\
    \ way.\n   The distinction between Answer-Mode and Priv-Answer-Mode relates to\n\
    \   the level of authorization claimed by the User Agent Client (UAC) and\n  \
    \ verified and policed by the User Agent Server (UAS).  Requests are\n   usually\
    \ made using Answer-Mode.  Requests made using Priv-Answer-Mode\n   request \"\
    privileged\" treatment from the UAS.  This mechanism is\n   discussed in greater\
    \ detail below, in Section 4.1.\n   Priv-Answer-Mode is not an assertion of privilege.\
    \  Instead, it is a\n   request for privileged treatment.  This is similar to\
    \ the UNIX model,\n   where a user might run a command normally or use \"sudo\"\
    \ to request\n   administrative privilege for the command.  Including \"Priv-\"\
    \ is\n   equivalent to prefixing a UNIX command with \"sudo\".  In other words,\n\
    \   a separate policy table (like \"/etc/sudoers\") is consulted to\n   determine\
    \ whether the user may receive the requested treatment.\n   This distinction is\
    \ discussed in greater detail in Section 4.1.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Syntax of Header Fields and Option Tags
  contents:
  - "2.  Syntax of Header Fields and Option Tags\n   The following syntax uses ABNF\
    \ as defined in [RFC5234].  Further, it\n   relies on the syntax for SIP defined\
    \ in [RFC3261].\n   The syntax for the header fields defined in this document\
    \ is:\n     Answer-Mode = \"Answer-Mode\" HCOLON answer-mode-value\n       *(SEMI\
    \ answer-mode-param)\n     Priv-Answer-Mode = \"Priv-Answer-Mode\" HCOLON answer-mode-value\n\
    \       *(SEMI answer-mode-param)\n     answer-mode-value = \"Manual\" / \"Auto\"\
    \ / token\n     answer-mode-param= \"require\" / generic-param\n   The SIP option\
    \ tag indicating support for this extension is\n   \"answermode\".\n      For\
    \ implementors: SIP header field names and values are always\n      compared in\
    \ a case-insensitive manner.  The pretty capitalization\n      is just for readability.\n\
    \   This syntax includes extension hooks (\"token\" for answer-mode values\n \
    \  and \"generic-param\" for optional parameters) that could be defined in\n \
    \  future.  This specification defines only the behavior for the values\n   given\
    \ explicitly above.  In order to provide forward compatibility,\n   implementations\
    \ MUST ignore unknown values.\n"
- title: 3.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields
  contents:
  - "3.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields\n   This document\
    \ defines usage of the Answer-Mode and Priv-Answer-Mode\n   header fields in initial\
    \ (dialog-forming) SIP INVITE requests and in\n   200 (OK) responses to those\
    \ requests.  This document specifically\n   does not define usage in any other\
    \ sort of request or response,\n   including but not limited to ACK, CANCEL, or\
    \ any mid-dialog usage.\n   This limitation stems from the intended usage of this\
    \ extension,\n   which is to affect the way that users interact with communications\n\
    \   devices when requesting new communications sessions and when\n   responding\
    \ to such requests.  This sort of interaction occurs only\n   during the formation\
    \ of a dialog and its initial usage, not during\n   subsequent operations such\
    \ as re-INVITE.  However, the security\n   aspects of the session initiation must\
    \ be applied to changes in media\n   description introduced by re-INVITES or similar\
    \ requests.  See\n   Section 7.1 for further discussion of this issue.\n"
- title: 4.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields in
  contents:
  - "4.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields in\n    Requests\n\
    \   The Answer-Mode or Priv-Answer-Mode header field is used by a UAC in\n   an\
    \ INVITE request to invoke specific handling by the responding UAS;\n   this handling\
    \ is related to \"automatic answering\" functionality for\n   any dialog resulting\
    \ from that INVITE request.  If no Answer-Mode or\n   Priv-Answer-Mode header\
    \ field is included in the request, answering\n   behavior is at the discretion\
    \ of the UAS, as it would be in the\n   absence of this specification.  The desired\
    \ handling is indicated by\n   the value of the Answer-Mode or Priv-Answer-Mode\
    \ header field, as\n   follows:\n   Manual:  The UAS is asked to defer accepting\
    \ the request until the\n      user of the UAS has interacted with the user interface\
    \ (UI) of the\n      UAS in such a way as to indicate that the user desires the\
    \ UAS to\n      accept the request.\n   Auto:  The UAS is asked to accept the\
    \ request automatically, without\n      waiting for the user of the UAS to interact\
    \ with the UI of the UAS\n      in such a way as to indicate that the user desires\
    \ the UAS to\n      accept the request.\n   Each value of the Answer-Mode or Priv-Answer-Mode\
    \ header field can\n   include an optional parameter, \"require\".  If present,\
    \ this parameter\n   indicates that the UAC would prefer that the UAS reject the\
    \ request\n   if the UAS is unwilling (perhaps due to policy) to answer in the\
    \ mode\n   requested, rather than answering in another mode.  For example, this\n\
    \   parameter could be used to make sure that a test \"loopback\" call\n   doesn't\
    \ disturb a user who has configured her phone to manually\n   answer even if the\
    \ caller requests an automatic answer.\n   The UAS is responsible for deciding\
    \ how to honor this preference.  In\n   general, the UAS makes an authorization\
    \ decision based on the\n   authenticated identity presented in the request using\
    \ authentication\n   mechanisms such as SIP Digest Authentication [RFC3261], the\
    \ SIP\n   Identity mechanism [RFC4474], or (within the restricted networks for\n\
    \   which it is suitable) the SIP mechanism for asserted identity within\n   trusted\
    \ networks [RFC3325].  When making an authorization decision,\n   the UAS should\
    \ also use authorization information or policy available\n   to the UAS.  This\
    \ decision-making MUST consider the risk model of the\n   media session corresponding\
    \ to the request, and the UAS MUST NOT\n   answer without user input in cases\
    \ where the privacy or security of\n   the user would be compromised as a result.\
    \  Making this determination\n   is a matter of system or application design,\
    \ and cannot in general be\n   addressed by having a set of functions that are\
    \ configurable on or\n   off.  Specific discussion of media sessions and appropriate\
    \ policy is\n   discussed in Section 7.\n"
- title: 4.1.  The Difference Between Answer-Mode and Priv-Answer-Mode
  contents:
  - "4.1.  The Difference Between Answer-Mode and Priv-Answer-Mode\n   The functions\
    \ of the Answer-Mode and Priv-Answer-Mode header fields\n   are similar; they\
    \ both ask that the UAS handle the request as\n   specified by the header field's\
    \ value (automatic or manual).  The\n   difference is in the way the requests\
    \ interact with the UAS's policy.\n   A typical UAS will have different policies\
    \ for handling each header\n   field.  For example, assume that the user of a\
    \ UAS has placed that\n   UAS into \"meeting mode\", indicating that she is engaged\
    \ in an\n   important activity and does not wish to be spuriously interrupted.\n\
    \   The UAS might disallow automatic answering for Answer-Mode requests\n   while\
    \ in \"meeting mode\".  However, that UAS might allow automatic\n   answering\
    \ for requests made with Priv-Answer-Mode.  There will\n   probably be differences\
    \ in authorization policy.  For example, a UAS\n   might be configured such that\
    \ callers on the \"friends\" list are\n   allowed to make requests using Answer-Mode\
    \ but not Priv-Answer-Mode.\n   That same UAS might be configured to only allow\
    \ callers on the\n   \"administrators\" list to use Priv-Answer-Mode.  This is\
    \ different\n   from always basing the behavior on the identity of the calling\
    \ party.\n   For example, assume caller \"Bob\" is on both the \"friends\" list\
    \ and\n   \"administrators\" list.  If Bob wants his request to be processed\n\
    \   according to the regular policy, he uses Answer-Mode.  If Bob wants\n   his\
    \ request to be processed under the more restrictive \"privileged\"\n   policy,\
    \ he uses Priv-Answer-Mode.\n   A UAS SHOULD apply a stricter authorization policy\
    \ to a request with\n   Priv-Answer-Mode than it does to requests with Answer-Mode.\
    \  The\n   default policy SHOULD be to refuse requests containing Priv-Answer-\n\
    \   Mode header fields unless the requester is authenticated and\n   specifically\
    \ authorized to make Priv-Answer-Mode requests.  Failure\n   to enforce such a\
    \ policy leaves the user potentially vulnerable to\n   abuses, as discussed in\
    \ Section 7.\n   The use case envisioned for Priv-Answer-Mode relates to handling\n\
    \   urgent requests from authorized callers.  For example, assume Larry\n   is\
    \ a limousine driver working with a fleet dispatcher.  Larry likes\n   to provide\
    \ a quiet environment for his car, so his communicator is\n   configured for manual\
    \ answer mode for all non-privileged calls,\n   including push-to-talk (Answer-Mode:\
    \ Auto) calls.  Each time he gets\n   a call, Larry's communicator chimes softly\
    \ to alert him to the call.\n   If the circumstances permit it, Larry presses\
    \ the communicator in\n   order to accept the call, the communicator sends a 200\
    \ (OK) response,\n   and the calling party's talk-burst is played out through\
    \ the\n   communicator's loudspeaker.  This treatment is delivered to incoming\n\
    \   requests that have an Answer-Mode header field having values of\n   \"Manual\"\
    \ or \"Auto\" (or no Answer-Mode header field at all), no matter\n   who the caller\
    \ is.\n   Larry's fleet dispatch operator is familiar with this policy, and\n\
    \   needs to inform Larry about a critical matter.  The dispatch operator\n  \
    \ tries several times to push-to-talk call Larry (including Answer-\n   Mode:\
    \ Auto in the requests), but the calls aren't accepted because\n   Larry has fallen\
    \ asleep, and therefore isn't pressing his\n   communicator to accept the call.\n\
    \   The operator then presses his \"urgent\" button and calls Larry again.\n \
    \  This time, the INVITE request carries a \"Priv-Answer-Mode: Auto\"\n   header\
    \ field.  Larry's communicator checks the identity of the caller\n   (using a\
    \ SIP Identity assertion or functionally equivalent\n   mechanism), and matches\
    \ the operator's identity against the list of\n   users allowed to do Priv-Answer-Mode.\
    \  Since the operator is listed,\n   the communicator immediately returns a 200\
    \ (OK) response accepting\n   the call.  The operator speaks, and the resulting\
    \ talk-burst is\n   summarily played out the loudspeaker on Larry's communicator,\
    \ waking\n   him up.\n   The effect of requesting Priv-Answer-Mode is different\
    \ than the\n   effect of simply granting higher privilege to an Answer-Mode request\n\
    \   based on the requester's identity and corresponding authorization\n   level.\
    \  This distinction is what allows the fleet operator to make\n   polite (Answer-Mode:\
    \ Auto) requests to Larry under normal conditions,\n   and receive different handling\
    \ (Priv-Answer-Mode: Auto) for a request\n   having greater urgency.\n   In normal\
    \ operations, only one of either Answer-Mode or Priv-Answer-\n   Mode would be\
    \ used in an INVITE request.  If both are present, the\n   UAS will first test\
    \ the authorization of the requester for Priv-\n   Answer-Mode and, if authorized,\
    \ process the request as if only Priv-\n   Answer-Mode had been included.  If\
    \ the requester is not authorized\n   for Priv-Answer-Mode, then the UAS will\
    \ process the request as if\n   only Answer-Mode had been included.\n"
- title: 4.2.  The "require" Modifier
  contents:
  - "4.2.  The \"require\" Modifier\n   Both Answer-Mode and Priv-Answer-Mode allow\
    \ a modifier of \"require\"\n   (example: \"Priv-Answer-Mode: Auto;require\").\
    \  This modifier does not\n   influence the UAS's policy in choosing whether to\
    \ answer manually or\n   automatically.  The UAS decides whether or not to answer\n\
    \   automatically based on other aspects of the request.  The \"require\"\n  \
    \ modifier is only evaluated after the UAS has selected an answering\n   mode.\
    \  If the UAS's policy has resulted in an answering mode that is\n   different\
    \ from that specified in the request, the presence of the\n   \"require\" modifier\
    \ asks the UAS to reject the call.  In the given\n   example, the UAS is being\
    \ asked to answer automatically if the caller\n   is authorized for automatic\
    \ answering under the \"privileged\" policy,\n   and to reject the call (rather\
    \ than answering manually) if the caller\n   is not authorized for this mode.\
    \  This is discussed in more depth in\n   Section 4.5.\n"
- title: 4.3.  Procedures at User Agent Clients (UAC)
  contents:
  - '4.3.  Procedures at User Agent Clients (UAC)

    '
- title: 4.3.1.  All Requests
  contents:
  - "4.3.1.  All Requests\n   A UA supporting the Answer-Mode and Priv-Answer-Mode\
    \ header fields\n   SHOULD indicate its support by including an option tag of\n\
    \   \"answermode\" in the Supported header field of all requests it sends.\n"
- title: 4.3.2.  REGISTER Transactions
  contents:
  - "4.3.2.  REGISTER Transactions\n   To indicate that it supports the answer-mode\
    \ negotiation feature, a\n   UA MAY include an extensions parameter with a value\
    \ that includes\n   \"answermode\".  Example:\n     ;extensions=\"answermode,100rel,gruu\"\
    \n   in the Contact header field of its REGISTER requests.  This usage of\n  \
    \ feature tags is described in [RFC3840].\n   If a UA is dependent on support\
    \ for callee capabilities in the\n   registrar, it MAY include a Require header\
    \ field with the value\n   \"pref\" in its REGISTER request.  This will cause\
    \ the registrar to\n   reject the request if the registrar does not support callee\n\
    \   capabilities and caller preferences.  Example:\n     Require: pref\n"
- title: 4.3.3.  INVITE Transactions
  contents:
  - "4.3.3.  INVITE Transactions\n   A UAC supporting this specification MAY include\
    \ an Answer-Mode or\n   Priv-Answer-Mode header field in an INVITE where it wishes\
    \ to\n   influence the answering mode of the responding UAS.\n      Note: This\
    \ is meaningful only in initial or dialog-forming INVITE\n      requests.  Answer-Mode\
    \ and Priv-Answer-Mode header fields\n      appearing in other requests are ignored.\
    \  In general, if the\n      request would not normally result in a notification\
    \ to the user\n      and acceptance by that user (for example, \"ringing\" and\n\
    \      \"answering\"), then these extensions are not applicable.\n   To request\
    \ that the UAS answer only after having interacted with its\n   user and receiving\
    \ an affirmative instruction from that user, the UAC\n   includes an Answer-Mode\
    \ or Priv-Answer-Mode header field having a\n   value of \"Manual\".  Example:\n\
    \     Answer-Mode: Manual\n   To request that the UAS answer manually, and ask\
    \ that it reject the\n   INVITE request if unable or unwilling to answer manually,\
    \ the UAC\n   includes an Answer-Mode or Priv-Answer-Mode header field having\
    \ a\n   value of \"Manual\" and a parameter of \"require\".  Example:\n     Answer-Mode:\
    \ Manual;require\n   To request that the UAS answer automatically without waiting\
    \ for\n   input from the user, the UAC includes an Answer-Mode or Priv-Answer-\n\
    \   Mode header field having a value of \"Auto\".  Example:\n     Answer-Mode:\
    \ Auto\n   To request that the UAS answer automatically, and ask that it reject\n\
    \   the INVITE request if unable or unwilling to answer automatically,\n   the\
    \ UAC includes an Answer-Mode or Priv-Answer-Mode header field\n   having a value\
    \ of \"Auto\" and a parameter of \"require\".  Example:\n     Answer-Mode: Auto;require\n\
    \   To require that the UAS either support this extension or reject the\n   request,\
    \ the UAC includes a Require header field having the value\n   \"answermode\"\
    .  This does not actually force the UAS to automatically\n   answer, it just requires\
    \ that the UAS either understand this\n   extension or reject the request.  We\
    \ do not have a SIP negotiation\n   technique to force specific behavior.  Rather,\
    \ the desired behavior\n   is indicated in the SIP extension itself.  Example:\n\
    \     Require: answermode\n   To request that retargeting proxies in the path\
    \ preferentially select\n   targets that have indicated support for this extension\
    \ in their\n   registration, a UAC includes an Accept-Contact header field with\
    \ an\n   extensions parameter having a value of \"answermode\".  This usage of\n\
    \   Accept-Contact is described in [RFC3841].  This would normally be\n   used\
    \ in conjunction with the \"Require: answermode\" header field as\n   described\
    \ above.  Example:\n     Require: answermode Accept-Contact:\n               *;extensions=\"\
    answermode\";methods=\"INVITE\"\n   To request that retargeting proxies in the\
    \ path do not select targets\n   that have indicated non-support for this extension\
    \ in their\n   registration, a UAC includes an Accept-Contact header field with\
    \ an\n   extensions parameter having a value of \"answermode\" and an option\n\
    \   field of \"require\".  This usage of Accept-Contact is described in\n   [RFC3841].\
    \  This would normally be used in conjunction with the\n   \"Require: answermode\"\
    \ header field as described above.  Example:\n     Require: answermode Accept-Contact:\n\
    \             *;extensions=\"answermode\"; methods=\"INVITE\";require\n   To request\
    \ that retargeting proxies in the path exclusively select\n   targets that have\
    \ indicated support for this extension in their\n   registration, a UAC includes\
    \ an Accept-Contact header field\n   extensions parameter having a value of \"\
    answermode\" and options of\n   \"require\" and \"explicit\".  This usage of Accept-Contact\
    \ is described\n   in [RFC3841].  This would normally be used in conjunction with\
    \ the\n   \"Require: answermode\" header field as described above.  Example:\n\
    \     Require: answermode Accept-Contact:\n             *;extensions=\"answermode\"\
    ;\n             methods=\"INVITE\";require;explicit\n"
- title: 4.4.  Procedures at Intermediate Proxies
  contents:
  - '4.4.  Procedures at Intermediate Proxies

    '
- title: 4.4.1.  General Proxy Behavior
  contents:
  - "4.4.1.  General Proxy Behavior\n   The general procedure at all intermediate\
    \ proxies, including the\n   UAC's serving proxy or proxies and the UAS's serving\
    \ proxy or\n   proxies, is to ignore the Answer-Mode header field.  However, the\n\
    \   serving proxies (proxies responsible for resolving an address-of-\n   record\
    \ (AOR) into a registered contact) MAY exercise control over the\n   requested\
    \ answer mode, either inserting or deleting an Answer-Mode or\n   Priv-Answer-Mode\
    \ header field or altering the value of an existing\n   header field, in accord\
    \ with local policy.  This could result in\n   behavior that is inconsistent with\
    \ user expectations (such as having\n   a call that was intended to be a diagnostic\
    \ loopback answered by a\n   human) and consequently proxies MUST NOT insert,\
    \ delete, or alter\n   Answer-Mode or Priv-Answer-Mode header fields unless explicitly\n\
    \   authorized to do so by an external agreement between the proxy\n   operator\
    \ and the user of the UA that the proxy is serving.  These\n   serving proxies\
    \ MAY also reject a request according to local policy\n   and, if they do so,\
    \ SHOULD use the rejection codes as specified below\n   for the UAS.\n"
- title: 4.4.2.  Issues with Automatic Answering and Forking
  contents:
  - "4.4.2.  Issues with Automatic Answering and Forking\n   One of the well-known\
    \ issues with forking is the problem of multiple\n   acceptance.  If an INVITE\
    \ request is forked to several UASs and more\n   than one replies with a 200 (OK)\
    \ response, the conventional approach\n   is to continue the dialog with the first\
    \ respondent and tear down the\n   dialog (using BYE requests) with all other\
    \ respondents.\n   While this problem exists without an auto-answer negotiation\n\
    \   capability, it is apparent that widespread adoption of UAs that\n   engage\
    \ in auto-answer behavior will exacerbate the multiple\n   acceptance problem.\
    \  Consequently, systems designers need to take\n   this aspect into consideration.\
    \  In general, auto-answer is NOT\n   RECOMMENDED in environments that include\
    \ parallel forking.\n   As an alternative, it might be reasonable to use a variation\
    \ on\n   manual-answer combined with no alerting and early media.  In this\n \
    \  approach, the initial message or talk-burst is transmitted as early\n   media\
    \ to all recipients, where it is displayed or played out.  Any\n   response utterance\
    \ (pushing the transmit key and talking) from the\n   user of a UAS following\
    \ this would serve as an \"acceptance\",\n   resulting in a 200 (OK) response\
    \ being transmitted by their UAS.\n   Consequently, the race-condition for acceptance\
    \ would be limited to\n   the subset of UAs actually responding under user control,\
    \ rather than\n   the full set of UAs to which the request was forked.\n   Another\
    \ alternative would be to use dynamic conferencing instead of\n   forking.  In\
    \ this approach, instead of forking the request, a\n   conference would be initiated\
    \ and all registered UAs invited into\n   that conference.  The mixer attached\
    \ to the conference would then\n   mediate traffic flows appropriately.\n"
- title: 4.5.  Procedures at User Agent Servers (UAS)
  contents:
  - '4.5.  Procedures at User Agent Servers (UAS)

    '
- title: 4.5.1.  INVITE Transactions
  contents:
  - "4.5.1.  INVITE Transactions\n   For a request having an Answer-Mode value of\
    \ \"Manual\" and not having\n   an Answer-Mode parameter of \"require\", the UAS\
    \ SHOULD defer accepting\n   the request until the user of the UAS has confirmed\
    \ willingness to\n   accept the request.  This behavior MAY be altered as needed\
    \ for\n   unattended UASs or other local characteristics or policy.  For\n   example,\
    \ an auto-attendant or Public Switched Telephone Network\n   (PSTN) gateway system\
    \ that always answers automatically would go\n   ahead and answer, despite the\
    \ presence of the \"Manual\" Answer-Mode\n   header field value.\n   For a request\
    \ having an Answer-Mode value of \"Manual\" and an Answer-\n   Mode parameter\
    \ of \"require\", the UAS MUST defer accepting the request\n   until the user\
    \ of the UAS has confirmed willingness to accept the\n   request.  If the UAS\
    \ is not capable of answering the request in this\n   \"Manual\" mode or is unwilling\
    \ to do so, it MUST reject the request,\n   SHOULD do so with a \"403 (Forbidden)\"\
    \ response, and MAY include a\n   reason phrase of \"manual answer forbidden\"\
    .\n   For a request having an Answer-Mode value of \"Auto\", the UAS SHOULD,\n\
    \   if the calling party is authenticated and authorized for automatic\n   answering,\
    \ accept the request without further user input.  The UAS\n   MAY, according to\
    \ local policy or user preferences, treat this\n   request as it would treat a\
    \ request having an Answer-Mode with a\n   value of \"Manual\" or having no Answer-Mode\
    \ header field.  If the\n   calling party is not authenticated and authorized\
    \ for automatic\n   answer, the UAS MAY either handle the request as per \"manual\"\
    , or\n   reject the request.  If the UAS rejects the request, it SHOULD do so\n\
    \   with a \"403 (Forbidden)\" response, and MAY include a reason phrase of\n\
    \   \"automatic answer forbidden\".  There may be an interaction with\n   [RFC3261]\
    \ section 23.2, which in some cases requires user validation\n   of certificates\
    \ used for S/MIME.  Since this places the same\n   interrupt burden on the user\
    \ as would manually answering the request,\n   a UAS experiencing this requirement\
    \ for user validation of a request\n   that requires automatic answering SHOULD\
    \ reject the request with a\n   \"403 (Forbidden)\" response and MAY include a\
    \ reason phrase of\n   \"certificate validation requires user input not compatible\
    \ with\n   automatic answer.\"\n   For a request having an Answer-Mode value of\
    \ \"Auto\" and an Answer-\n   Mode parameter of \"require\", the UAS SHOULD, if\
    \ the calling party is\n   authenticated and authorized for automatic answering,\
    \ accept the\n   request.  The UAS MUST NOT allow \"manual\" answer of this request,\
    \ but\n   MAY reject it.  If, for whatever reason, the UAS chooses not to\n  \
    \ accept the request automatically, the UAS MUST reject the request,\n   SHOULD\
    \ do so with a \"403 (Forbidden)\" response, and MAY include a\n   reason phrase\
    \ of \"automatic answer forbidden\".\n   Similar behavior applies for Priv-Answer-Mode,\
    \ except that the policy\n   for authorization may be different (and generally\
    \ more stringent).\n"
- title: 5.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields in
  contents:
  - "5.  Usage of the Answer-Mode and Priv-Answer-Mode Header Fields in\n    Responses\n\
    \   The Answer-Mode or Priv-Answer-Mode header field can be inserted by a\n  \
    \ UAS into a response in order to indicate how it handled the\n   associated request\
    \ with respect to automatic answering functionality.\n   The UAC might use this\
    \ information to inform the user or otherwise\n   adapt the behavior of the user\
    \ interface.  The handling is indicated\n   by the value of the header field,\
    \ as follows:\n   Manual:  The UAS responded after the user of the UAS interacted\
    \ with\n      the user interface (UI) of the UAS in such a way as to indicate\n\
    \      that the user desires the UAS to accept the request.\n   Auto:  The UAS\
    \ responded automatically, without waiting for the user\n      of the UAS to interact\
    \ with the UI of the UAS in such a way as to\n      indicate that the user desires\
    \ the UAS to accept the request.\n   The Answer-Mode and Priv-Answer-Mode header\
    \ fields, when used in\n   responses, are only valid in a 200 (OK) response to\
    \ an INVITE\n   request.\n"
- title: 5.1.  Procedures at the UAS
  contents:
  - "5.1.  Procedures at the UAS\n   A UAS supporting this specification inserts an\
    \ Answer-Mode or Priv-\n   Answer-Mode header field into the 200 (OK) response\
    \ to an INVITE\n   request when it wishes to inform the UAC as to whether the\
    \ request\n   was answered manually or automatically.  It is reasonable for a\
    \ UAS\n   to assume that if the UAC included an Answer-Mode header field in the\n\
    \   request, it would probably like to see an Answer-Mode header field in\n  \
    \ the response.  The full rationale for including or not including this\n   header\
    \ field in a response is outside of the scope of this\n   specification, and is\
    \ sensitive to the privacy concerns of the user\n   of the UAS.  For example,\
    \ informing the calling party that a call was\n   answered manually might reveal\
    \ the presence of an \"actual human\" at\n   the responding UAS.  While in the\
    \ general case the ensuing\n   conversation would also reveal this same information,\
    \ there might be\n   cases where this information might need to be protected.\n\
    \   Consequently, UASs supporting this specification SHOULD include\n   appropriately\
    \ configurable policy mechanisms for making this\n   determination, and the default\
    \ configuration SHOULD be to exclude\n   this header field from responses.\n"
- title: 5.2.  Procedures at the UAC
  contents:
  - "5.2.  Procedures at the UAC\n   A UAC MAY use the value of the Answer-Mode or\
    \ Priv-Answer-Mode header\n   field, if present, to adapt the user interface and/or\
    \ inform the user\n   about the handling of the request.  For example, the user\
    \ of a push-\n   to-talk system might speak differently if she knows that the\
    \ called\n   party answered \"in person\" vs. having the call blare out of an\n\
    \   unattended speaker phone.\n"
- title: 6.  Examples of Usage
  contents:
  - "6.  Examples of Usage\n   The following examples show Bob registering a contact\
    \ that supports\n   the negotiation of answering mode.  Alice then calls Bob with\
    \ an\n   INVITE request, asking for automatic answering and explicitly asking\n\
    \   that the request not be routed to contacts that have not indicated\n   support\
    \ for this extension.  Further, Alice requires that the request\n   be rejected\
    \ if Bob's UA does not support negotiation of answering\n   mode.  Bob replies\
    \ with a 200 (OK) response indicating that the call\n   was answered automatically.\n\
    \      The Content-Length header field shown in the examples contains a\n    \
    \  placeholder \"...\" instead of a valid Content-Length.  Furthermore,\n    \
    \  the SDP bodies that would be expected in the INVITE requests and\n      200\
    \ (OK) responses are not shown.\n"
- title: 6.1.  REGISTER Request
  contents:
  - "6.1.  REGISTER Request\n   In the following example, Bob's UA is registering\
    \ and indicating that\n   it supports the answermode extension.\n     REGISTER\
    \ sip:example.com SIP/2.0\n     From: Bob<sip:bob@example.com>\n     To: Bob <sip:bob@example.com>\n\
    \     CallID: hh89as0d-asd88jkk@cell-phone.example.com\n     CSeq: 1 REGISTER\n\
    \     Contact: sip:cell-phone.example.com;\n       ;audio\n       ;+sip.extensions=\"\
    answermode\"\n       ;methods=\"INVITE,BYE,OPTIONS,CANCEL,ACK\"\n       ;schemes=\"\
    sip\"\n"
- title: 6.2.  INVITE Request
  contents:
  - "6.2.  INVITE Request\n   In this example, Alice is calling Bob and asking Bob's\
    \ UA to answer\n   automatically.  However, Alice is willing for Bob to answer\
    \ manually\n   if Bob's policy is to prefer manual answer, so Alice does not include\n\
    \   a \";require\" modifier on \"Answer-Mode: Auto\".\n     INVITE sip:bob@example.com\
    \ SIP/2.0\n     Via: SIP/2.0/TCP client-alice.example.com:5060; branch=z9hG4bK74b43\n\
    \     Max-Forwards: 70\n     From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \     To: Bob <sip:bob@example.com>\n     Call-ID:3848276298220188511@client-alice.example.com\n\
    \     CSeq: 1 INVITE\n     Contact: <sip:alice@client.atlanta.example.com;transport=tcp>\n\
    \     Require: answermode\n     Accept-contact:*;require;explicit;extensions=\"\
    answermode\"\n     Answer-Mode: Auto\n     Content-Type: application/sdp\n   \
    \  Content-Length: ...\n"
- title: 6.3.  200 (OK) Response
  contents:
  - "6.3.  200 (OK) Response\n   Here, Bob has accepted the call and his UA has answered\n\
    \   automatically, which it indicates in the 200 (OK) response.\n     SIP/2.0\
    \ 200 OK\n     Via: SIP/2.0/TCP client-alice.example.com:5060; branch=z9hG4bK74b43\n\
    \     From: Alice <sip:alice@example.com>;tag=9fxced76sl\n     To: Bob <sip:bob@example.com>;tag=8321234356\n\
    \     Call-ID: 3848276298220188511@client-alice.example.com\n     CSeq: 1 INVITE\n\
    \     Contact: <sip:bob@client.biloxi.example.com;transport=tcp>\n     Answer-Mode:\
    \ Auto\n     Content-Type: application/sdp\n     Content-Length: ...\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This specification adds the ability for a UAC\
    \ to request potentially\n   risky user interface behavior relating to the acceptance\
    \ of an INVITE\n   request by the UAS receiving the request.  Specifically, the\
    \ UAC can\n   request that the UAS accept the request without input to the UAS\
    \ by\n   the user of the UAS (Answer-Mode: Auto).\n   There are several attacks\
    \ possible here -- the most obvious being the\n   ability to turn a phone into\
    \ a remote listening device without its\n   user being aware.  Additional potential\
    \ attacks include reverse\n   charge fraud, unsolicited push-to-talk communications\
    \ (spam over\n   push-to-talk (SPTT)), playout of obnoxious noises (the \"whoopee\n\
    \   cushion\" attack), battery-rundown denial of service, \"forced busy\"\n  \
    \ denial of service, running up the victim's data transport bill, and\n   phishing\
    \ via session insertion (where an ongoing session is replaced\n   by another without\
    \ the victim's awareness).\n   Since SIP implementations do not commonly implement\
    \ end-to-end\n   message protections, this specification is completely dependent\
    \ on\n   transitive security across SIP proxies.  Any misbehaving proxy can\n\
    \   insert, delete, and/or alter the contents of the Answer-Mode and\n   Priv-Answer-Mode\
    \ header fields, and in general can do so without\n   being noticed by either\
    \ the UAC or UAS.  Consequently, it is critical\n   that any proxies in the path\
    \ be not only trusted, but worthy of that\n   trust.  While proxies do not generally\
    \ intentionally insert, delete,\n   or alter the Answer-Mode and Priv-Answer-Mode\
    \ header fields, this\n   specification does note a use case for such manipulation\
    \ by proxies\n   acting on behalf of the user of a UAC or UAS that has limited\
    \ support\n   for the authentication or policy enforcement needed to securely\n\
    \   exercise these extensions.  Proxies that perform such extension-\n   sensitive\
    \ manipulation MUST therefore provide complete policy\n   enforcement, as per\
    \ the minimal policy discussed in Section 7.4.\n   The existing body of SIP work\
    \ provides strong capabilities for\n   authentication of requests, prevention\
    \ of man-in-the-middle attacks,\n   protection of the privacy and integrity of\
    \ media flows, and so on\n   (although as noted above, these capabilities usually\
    \ rely on\n   transitive trust across proxies).  The behaviors added by the\n\
    \   extensions in this document raise additional possibilities for\n   attacks\
    \ against media flows not completely addressed by existing SIP\n   work, and therefore\
    \ require analysis in this document.\n   Media attacks can be loosely categorized\
    \ as:\n   Insertion:  Media is inserted into and played out by the victim UA\n\
    \      without consent of the UA's user.\n   Interception:  The victim UA's media\
    \ acquisition facility (such as a\n      microphone or camera) is activated, producing\
    \ a media stream,\n      without the consent of the UA's user.\n"
- title: 7.1.  Attack Sensitivity Depends on Media Characteristics
  contents:
  - "7.1.  Attack Sensitivity Depends on Media Characteristics\n   The danger of abuse\
    \ varies greatly depending on the media\n   characteristics of the session being\
    \ established.  Since the\n   expressive range of media sessions that can be established\
    \ by SIP is\n   unbounded, we might find it more effective to model loose categories\n\
    \   of media modality rather than explicitly describing every possible\n   scenario.\
    \  Security analysis can then be applied per modality.\n   The media modalities\
    \ of interest appear to be:\n   UAC-sourced (Inbound) Unidirectional Media Insertion:\
    \  Sensitive\n      media flows from the UAC and is rendered by the UAS, annoying\
    \ the\n      user of the UAS or disrupting the function of the UAS.  We refer\n\
    \      to this as the \"whoopee-cushion\" attack because of its utility in\n \
    \     replicating the rude-noise-making seat cushion.  The danger of\n      this\
    \ attack is quite literally amplified by a loudspeaker\n      apparatus attached\
    \ to the victim UAS.  Media that has minimal\n      secondary implication (such\
    \ as sending a move in a chess game to a\n      computer that isn't running a\
    \ chess game) is related, but of far\n      less significance.  This sort of attack\
    \ can also have other\n      consequences, such as discharging the victim's battery\
    \ or\n      increasing charges for data transport to be paid by the victim.\n\
    \   UAS-sourced (Outbound) Unidirectional Media Interception:  Sensitive\n   \
    \   media flows from the UAS and is rendered by the UAC, violating the\n     \
    \ privacy of the user of the UAS.  We refer to this as the \"bug-my-\n      phone\"\
    \ attack because that would appear to be the primary attack\n      motivator.\n\
    \   Bidirectional Media Insertion or Interception:  Bidirectional media\n    \
    \  is the common case when SIP is used in a voice-over-IP scenario or\n      \"\
    traditional phone call\".  Once a media flow is established, both\n      ends\
    \ send and receive media without further engagement.  The media\n      information\
    \ is presumed to be sensitive -- that is, if intercepted\n      it damages the\
    \ victim's privacy, and if inserted, it annoys or\n      interferes with the recipient.\
    \  Attacks of this sort might produce\n      either the \"whoopee-cushion\" or\
    \ \"bug-my-phone\" scenarios,\n      potentially even simultaneously.\n   It seems\
    \ reasonable to consider the \"bug-my-phone\" attack as being in\n   a different\
    \ class (potentially far more severe) than the \"whoopee-\n   cushion\" attack.\
    \  This distinction suggests that security policy\n   could be established in\
    \ different and presumably less restrictive\n   fashion for inbound media flows\
    \ than for outbound media flows.  The\n   set of callers from which a user would\
    \ be willing to automatically\n   accept inbound media is reasonably much broader\
    \ than the set of\n   callers to which a user would be willing to automatically\
    \ grant\n   outbound media access, although this may not be true in all\n   environments,\
    \ especially those where reception of unwanted media has\n   unwanted financial\
    \ consequences.\n   For example, assume a UA is designed such that it can be used\
    \ to\n   receive push-to-talk calls to a loudspeaker, and it can be used as a\n\
    \   \"baby monitor\" (has an open mic and streams received audio to\n   listeners).\
    \  The policy for activating the push-to-talk loudspeaker\n   would probably need\
    \ to be reasonably broad (perhaps \"all the user's\n   buddies\").  However, the\
    \ policy for the baby monitor would need to be\n   very narrow (perhaps \"only\
    \ the baby's mother\") or even completely\n   closed.  The minimal policy defined\
    \ in Section 7.4 explicitly forbids\n   the \"baby monitor\" functionality.\n"
- title: 7.2.  Application Design Affects Attack Opportunity
  contents:
  - "7.2.  Application Design Affects Attack Opportunity\n   In the most common use\
    \ cases, the security aspects are somewhat\n   mitigated by design aspects of\
    \ the application.  For example, in\n   traditional telephony, the called party\
    \ is alerted to the request\n   (the phone rings), no media session is established\
    \ without the\n   acceptance of the called party (picking up the phone), and the\
    \ media\n   path is most commonly delivered to a single-user handset.\n   Consequently,\
    \ this application (although bidirectional) is relatively\n   secure against both\
    \ media insertion and media interception attacks of\n   the sort enabled by the\
    \ extensions in this document.  The use of\n   policy-free automatic-answering\
    \ devices (like answering machines) and\n   amplifiers (speakerphones and call-screening\
    \ devices) weakens this\n   defense.\n   In push-to-talk applications, media can\
    \ be sent from UAC to UAS\n   without user oversight, but no media is sent from\
    \ the called UAS\n   without user input (the \"push\" of \"push-to-talk\").  Consequently,\n\
    \   there is no \"bug-my-phone\" attack opportunity.  Further, screening of\n\
    \   the UAC by eliminating UAC identities not on some sort of \"white\n   list\"\
    \ (often, a buddy list) reduces the threat of \"whoopee cushion\"\n   attacks\
    \ (except from one's buddies, of course).\n   Similar approaches apply to most\
    \ applications.  Insertion can be\n   controlled (but not eliminated) by combining\
    \ identity mechanisms with\n   simple authorization policy, and interception can\
    \ be effectively\n   eliminated by combining strong identity mechanisms with aggressive\n\
    \   authorization policy and/or user interaction.\n"
- title: 7.3.  Applying the Analysis
  contents:
  - "7.3.  Applying the Analysis\n   The extensions described in this document provide\
    \ mechanisms by which\n   a UAC can request that a UAS not deploy two of the five\
    \ defensive\n   mechanisms listed below -- user alerting and user acceptance.\
    \  In\n   order for this not to produce undue risk of insertion attacks or\n \
    \  increased risk of interception attacks, we are therefore forced to\n   rely\
    \ on the remaining defensive mechanisms.  This document defines a\n   minimum\
    \ threshold for satisfactory security.  Certainly more\n   restrictive policies\
    \ might reasonably be used, but any policy less\n   restrictive than the approach\
    \ described below is very likely to\n   result in significant security issues.\n\
    \   From the previous discussion of risks, attacks, and vulnerabilities,\n   we\
    \ can derive five defensive mechanisms available at the application\n   level:\n\
    \   1.  Identity -- Know who the request came from.\n   2.  Alerting -- Let the\
    \ called user know what's happening.  Some\n       applications might use inbound\
    \ media as an alert.\n   3.  Acceptance -- Require called user to make run-time\
    \ decision.\n       Asking the user to make a run-time decision without alerting\
    \ the\n       user to the need to make a decision is generally infeasible.\n \
    \      This will have implications for possible alerting options that\n      \
    \ are outside the scope of this document.\n   4.  Limit the Input/Output (I/O)\
    \ -- Turn off loudspeakers or\n       microphone.  This could be used to convert\
    \ a bidirectional media\n       session (very risky, possible \"bug my phone\"\
    ) into a\n       unidirectional, inbound-only (less risky, possible \"spam\" or\n\
    \       \"rundown\", etc.) session while waiting for user acceptance.\n   5. \
    \ Policy -- Rules about other factors, such as black- and\n       whitelisting\
    \ based on identity, disallowing acceptance without\n       alerting, etc.\n \
    \  Since SIP and related work already provide several mechanisms\n   (including\
    \ SIP Digest Authentication [RFC3261], the SIP Identity\n   mechanism [RFC4474],\
    \ and the SIP mechanism for asserted identity\n   within private networks [RFC3325],\
    \ in networks for which it is\n   suitable) for establishing the identity of the\
    \ originator of a\n   request, we presume that an appropriately selected mechanism\
    \ is\n   available for UAs implementing the extensions described in this\n   document.\
    \  In short, UAs implementing these extensions MUST be\n   equipped with and MUST\
    \ exercise a request-identity mechanism.  The\n   analysis below proceeds from\
    \ an assumption that the identity of the\n   sender of each request is either\
    \ known or is known to be unknown, and\n   can therefore be considered in related\
    \ policy considerations.\n   Failure to meet this identity requirement either\
    \ opens the door to a\n   wide range of attacks or requires operational policy\
    \ so tight as to\n   make these extensions useless.\n   We previously established\
    \ a class distinction between inbound and\n   outbound media flows, and can model\
    \ bidirectional flows as \"worst\n   case\" sums of the risks of the other two\
    \ classes.  Given this\n   distinction, it seems reasonable to provide separate\
    \ directionality\n   policy classes for:\n   1.  Inbound media flows.\n   2. \
    \ Outbound media flows.\n   For each directionality policy class, we can divide\
    \ the set of\n   request identities into three classes:\n   1.  Identities explicitly\
    \ authorized for the class.\n   2.  Identities explicitly denied for the class.\n\
    \   3.  Identities for which we have no explicit policy and need the user\n  \
    \     to make a decision.\n   Note that not all combinations of policies possible\
    \ in this\n   decomposition are generally useful.  Specifically, a policy of\n\
    \   \"inbound media denied, outbound media allowed\" equates to a \"bug my\n \
    \  phone\" attack, and is disallowed by the minimal policy of\n   Section 7.4,\
    \ which as written excludes all cases of \"Outbound media\n   explicitly authorized\"\
    .\n"
- title: 7.4.  Minimal Policy Requirement
  contents:
  - "7.4.  Minimal Policy Requirement\n   User agents implementing this specification\
    \ SHOULD NOT establish a\n   session providing inbound media without explicit\
    \ user acceptance\n   where the requesting user is unknown, or is known and has\
    \ not been\n   granted authorization for such a session.  This requirement is\n\
    \   intended to prevent \"SPAM broadcast\" attacks where unexpected and\n   unwanted\
    \ media is played out at a UAS .\n   User agents implementing this specification\
    \ MUST NOT establish a\n   session providing outbound or bidirectional media sourced\
    \ from the\n   user agent without explicit user acceptance.  Loopback media used\
    \ for\n   connectivity testing is not constrained by this requirement.  This\n\
    \   requirement is intended to assure that this extension can not be used\n  \
    \ to turn a UAS into a remote-controlled microphone (or \"bug\") without\n   the\
    \ knowledge of its user.  Since SIP allows for a session to be\n   initially established\
    \ with inbound-only media and then transitioned\n   (via re-INVITE or UPDATE)\
    \ to an outbound or bidirectional session,\n   enforcing this policy requires\
    \ dialog-stateful inspection in the SIP\n   UAS.  In other words, if a session\
    \ was initiated with automatic\n   answering, the UAS MUST NOT transition to a\
    \ mode that sends outbound\n   media without explicit acceptance by the user of\
    \ the UAS.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Registration of Header Fields
  contents:
  - "8.1.  Registration of Header Fields\n   This document defines new SIP header\
    \ fields named \"Answer-Mode\" and\n   \"Priv-Answer-Mode\".\n   The following\
    \ rows have been added to the \"Header Fields\" section of\n   the SIP parameter\
    \ registry:\n              +------------------+--------------+-----------+\n \
    \             | Header Name      | Compact Form | Reference |\n              +------------------+--------------+-----------+\n\
    \              | Answer-Mode      |              | [RFC5373] |\n             \
    \ | Priv-Answer-Mode |              | [RFC5373] |\n              +------------------+--------------+-----------+\n"
- title: 8.2.  Registration of Header Field Parameters
  contents:
  - "8.2.  Registration of Header Field Parameters\n   This document defines parameters\
    \ for the header fields defined in the\n   preceding section.  The header fields\
    \ \"Answer-Mode\" and \"Priv-Answer-\n   Mode\" can take the values \"Manual\"\
    \ or \"Auto\".\n   The following rows have been added to the \"Header Field Parameters\n\
    \   and Parameter Values\" section of the SIP parameter registry:\n   +------------------+----------------+-------------------+-----------+\n\
    \   | Header Field     | Parameter Name | Predefined Values | Reference |\n  \
    \ +------------------+----------------+-------------------+-----------+\n   |\
    \ Answer-Mode      | require        | No                | [RFC5373] |\n   | Priv-Answer-Mode\
    \ | require        | No                | [RFC5373] |\n   +------------------+----------------+-------------------+-----------+\n"
- title: 8.3.  Registration of SIP Option Tags
  contents:
  - "8.3.  Registration of SIP Option Tags\n   This document defines the SIP option\
    \ tag \"answermode\".\n   The following row has been added to the \"Option Tags\"\
    \ section of the\n   SIP Parameter Registry:\n   +------------+------------------------------------------+-----------+\n\
    \   | Name       | Description                              | Reference |\n  \
    \ +------------+------------------------------------------+-----------+\n   |\
    \ answermode | This option tag is for support of the    | [RFC5373] |\n   |  \
    \          | Answer-Mode and Priv-Answer-Mode         |           |\n   |    \
    \        | extensions used to negotiate automatic   |           |\n   |      \
    \      | or manual answering of a request.        |           |\n   +------------+------------------------------------------+-----------+\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document draws requirements and a large part of\
    \ its methodology\n   from the work of the Open Mobile Alliance, and specifically\
    \ from a\n   document by Andrew Allen, Jan Holm, and Tom Hallin.\n   The editor\
    \ would also like to recognize the contributions of David\n   Oran and others\
    \ who argued on the SIPPING mailing list and at the OMA\n   ad-hoc meeting at\
    \ IETF 62 that the underlying ideas of the above\n   document were broadly applicable\
    \ to the SIP community, and that the\n   concepts of alerting and answering should\
    \ be clearly delineated.\n   Further, the security review provided by Sandy Murphy\
    \ and the gen-art\n   review by Suresh Krishnan were very helpful in improving\
    \ the quality\n   of this document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3261]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \               A., Peterson, J., Sparks, R., Handley, M., and E.\n          \
    \     Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n            \
    \   June 2002.\n   [RFC3840]   Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\n\
    \               \"Indicating User Agent Capabilities in the Session\n        \
    \       Initiation Protocol (SIP)\", RFC 3840, August 2004.\n   [RFC3841]   Rosenberg,\
    \ J., Schulzrinne, H., and P. Kyzivat, \"Caller\n               Preferences for\
    \ the Session Initiation Protocol (SIP)\",\n               RFC 3841, August 2004.\n\
    \   [RFC4474]   Peterson, J. and C. Jennings, \"Enhancements for\n           \
    \    Authenticated Identity Management in the Session\n               Initiation\
    \ Protocol (SIP)\", RFC 4474, August 2006.\n   [RFC5234]   Crocker, D. and P.\
    \ Overell, \"Augmented BNF for Syntax\n               Specifications: ABNF\",\
    \ STD 68, RFC 5234, January 2008.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [LOOPBACK]  Hedayat, K., \"An Extension to\
    \ the Session Description\n               Protocol (SDP) for Media Loopback\"\
    , Work in Progress,\n               August 2008.\n   [RFC3325]   Jennings, C.,\
    \ Peterson, J., and M. Watson, \"Private\n               Extensions to the Session\
    \ Initiation Protocol (SIP) for\n               Asserted Identity within Trusted\
    \ Networks\", RFC 3325,\n               November 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dean Willis (editor)\n   Softarmor Systems\n   3100 Independence\
    \ Pkwy #311-164\n   Plano, Texas  75075\n   USA\n   EMail: dean.willis@softarmor.com\n\
    \   Andrew Allen\n   Research in Motion (RIM)\n   300 Knightsbridge Parkway, Suite\
    \ 360\n   Lincolnshire, Illinois  60069\n   USA\n   EMail: aallen@rim.com\n"
