- contents:
  - '                       Encapsulating MPLS in UDP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies an IP-based encapsulation for MPLS, called\n
    \  MPLS-in-UDP for situations where UDP (User Datagram Protocol)\n   encapsulation
    is preferred to direct use of MPLS, e.g., to enable\n   UDP-based ECMP (Equal-Cost
    Multipath) or link aggregation.  The MPLS-\n   in-UDP encapsulation technology
    must only be deployed within a single\n   network (with a single network operator)
    or networks of an adjacent\n   set of cooperating network operators where traffic
    is managed to\n   avoid congestion, rather than over the Internet where congestion\n
    \  control is required.  Usage restrictions apply to MPLS-in-UDP usage\n   for
    traffic that is not congestion controlled and to UDP zero\n   checksum usage with
    IPv6.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7510.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Existing Encapsulations . . . . . . . . . . . . . .
    . . .   3\n     1.2.  Motivations for MPLS-in-UDP Encapsulation . . . . . . .
    .   4\n     1.3.  Applicability Statements  . . . . . . . . . . . . . . . .   4\n
    \  2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   4\n   3.
    \ Encapsulation in UDP  . . . . . . . . . . . . . . . . . . . .   5\n     3.1.
    \ UDP Checksum Usage with IPv6  . . . . . . . . . . . . . .   6\n     3.2.  Middlebox
    Considerations for IPv6 UDP Zero Checksums  . .  10\n   4.  Processing Procedures
    . . . . . . . . . . . . . . . . . . . .  10\n   5.  Congestion Considerations
    . . . . . . . . . . . . . . . . . .  11\n   6.  Security Considerations . . .
    . . . . . . . . . . . . . . . .  13\n   7.  IANA Considerations . . . . . . .
    . . . . . . . . . . . . . .  15\n   8.  References  . . . . . . . . . . . . .
    . . . . . . . . . . . .  15\n     8.1.  Normative References  . . . . . . . .
    . . . . . . . . . .  15\n     8.2.  Informative References  . . . . . . . . .
    . . . . . . . .  16\n   Acknowledgements  . . . . . . . . . . . . . . . . . .
    . . . . . .  17\n   Contributors  . . . . . . . . . . . . . . . . . . . . . .
    . . . .  18\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . .
    . .  19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies an IP-based encapsulation for MPLS,
    i.e.,\n   MPLS-in-UDP, which is applicable in some circumstances where IP-based\n
    \  encapsulation for MPLS is required and further fine-grained load\n   balancing
    of MPLS packets over IP networks over Equal-Cost Multipath\n   (ECMP) and/or Link
    Aggregation Groups (LAGs) is required as well.\n   There are already IP-based
    encapsulations for MPLS that allow for\n   fine-grained load balancing by using
    some special field in the\n   encapsulation header as an entropy field.  However,
    MPLS-in-UDP can\n   be advantageous since networks have used the UDP port number
    fields\n   as a basis for load-balancing solutions for some time.\n   Like other
    IP-based encapsulation methods for MPLS, this\n   encapsulation allows for two
    Label Switching Routers (LSR) to be\n   adjacent on a Label Switched Path (LSP),
    while separated by an IP\n   network.  In order to support this encapsulation,
    each LSR needs to\n   know the capability to decapsulate MPLS-in-UDP by the remote
    LSRs.\n   This specification defines only the data-plane encapsulation and does\n
    \  not concern itself with how the knowledge to use this encapsulation\n   is
    conveyed.  Specifically, this capability can be either manually\n   configured
    on each LSR or dynamically advertised in manners that are\n   outside the scope
    of this document.\n   Similarly, the MPLS-in-UDP encapsulation format defined
    in this\n   document by itself cannot ensure the integrity and privacy of data\n
    \  packets being transported through the MPLS-in-UDP tunnels and cannot\n   enable
    the tunnel decapsulators to authenticate the tunnel\n   encapsulator.  Therefore,
    in the case where any of the above security\n   issues is concerned, the MPLS-in-UDP
    SHOULD be secured with IPsec\n   [RFC4301] or Datagram Transport Layer Security
    (DTLS) [RFC6347].  For\n   more details, please see Section 6 (Security Considerations).\n"
  - contents:
    - "1.1.  Existing Encapsulations\n   Currently, there are several IP-based encapsulations
      for MPLS such as\n   MPLS-in-IP, MPLS-in-GRE (Generic Routing Encapsulation)
      [RFC4023],\n   and MPLS-in-L2TPv3 (Layer 2 Tunneling Protocol Version 3) [RFC4817].\n
      \  In all these methods, the IP addresses can be varied to achieve load\n   balancing.\n
      \  All these IP-based encapsulations for MPLS are specified for both\n   IPv4
      and IPv6.  In the case of IPv6-based encapsulations, the IPv6\n   Flow Label
      can be used for ECMP and LAGs [RFC6438].  However, there\n   is no such entropy
      field in the IPv4 header.\n   For MPLS-in-GRE as well as MPLS-in-L2TPv3, protocol
      fields (the GRE\n   Key and the L2TPv3 Session ID, respectively) can be used
      as the load-\n   balancing key as described in [RFC5640].  For this, intermediate\n
      \  routers need to understand these fields in the context of being used\n   as
      load-balancing keys.\n"
    title: 1.1.  Existing Encapsulations
  - contents:
    - "1.2.  Motivations for MPLS-in-UDP Encapsulation\n   Most existing routers in
      IP networks are already capable of\n   distributing IP traffic \"microflows\"
      [RFC2474] over ECMPs and/or LAG\n   based on the hash of the five-tuple of UDP
      [RFC768] and TCP packets\n   (i.e., source IP address, destination IP address,
      source port,\n   destination port, and protocol).  By encapsulating the MPLS
      packets\n   into a UDP tunnel and using the source port of the UDP header as
      an\n   entropy field, the existing load-balancing capability as mentioned\n
      \  above can be leveraged to provide fine-grained load balancing of MPLS\n   traffic
      over IP networks.\n"
    title: 1.2.  Motivations for MPLS-in-UDP Encapsulation
  - contents:
    - "1.3.  Applicability Statements\n   The MPLS-in-UDP encapsulation technology
      MUST only be deployed within\n   a single network (with a single network operator)
      or networks of an\n   adjacent set of cooperating network operators where traffic
      is\n   managed to avoid congestion, rather than over the Internet where\n   congestion
      control is required.  Furthermore, packet filters SHOULD\n   be added to prevent
      MPLS-in-UDP packets from escaping from the\n   network due to misconfiguration
      or packet errors.\n"
    title: 1.3.  Applicability Statements
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Encapsulation in UDP\n   MPLS-in-UDP encapsulation format is shown as follows:\n
    \     0                   1                   2                   3\n      0 1
    2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |    Source Port = Entropy      |       Dest Port = MPLS        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |           UDP Length          |        UDP Checksum           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                                                               |\n     ~
    \                      MPLS Label Stack                        ~\n     |                                                               |\n
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
    \                                                              |\n     |                                                               |\n
    \    ~                         Message Body                          ~\n     |
    \                                                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     Source Port of UDP\n         This field contains a 16-bit entropy value
    that is generated by\n         the encapsulator to uniquely identify a flow.  What
    constitutes\n         a flow is locally determined by the encapsulator and therefore\n
    \        is outside the scope of this document.  What algorithm is\n         actually
    used by the encapsulator to generate an entropy value\n         is outside the
    scope of this document.\n         In case the tunnel does not need entropy, this
    field of all\n         packets belonging to a given flow SHOULD be set to a randomly\n
    \        selected constant value so as to avoid packet reordering.\n         To
    ensure that the source port number is always in the range\n         49152 to 65535
    (note that those ports less than 49152 are\n         reserved by IANA to identify
    specific applications/protocols),\n         which may be required in some cases,
    instead of calculating a\n         16-bit hash, the encapsulator SHOULD calculate
    a 14-bit hash\n         and use those 14 bits as the least significant bits of
    the\n         source port field.  Also, the most significant two bits SHOULD\n
    \        be set to binary 11.  That still conveys 14 bits of entropy\n         information,
    which would be enough in practice.\n      Destination Port of UDP\n         This
    field is set to a value (6635) allocated by IANA to\n         indicate that the
    UDP tunnel payload is an MPLS packet.\n      UDP Length\n         The usage of
    this field is in accordance with the current UDP\n         specification [RFC768].\n
    \     UDP Checksum\n         For IPv4 UDP encapsulation, this field is RECOMMENDED
    to be set\n         to zero for performance or implementation reasons because
    the\n         IPv4 header includes a checksum and use of the UDP checksum is\n
    \        optional with IPv4, unless checksum protection of VPN labels is\n         important
    (see Section 6).  For IPv6 UDP encapsulation, the\n         IPv6 header does not
    include a checksum, so this field MUST\n         contain a UDP checksum that MUST
    be used as specified in\n         [RFC768] and [RFC2460] unless one of the exceptions
    that allows\n         use of UDP zero-checksum mode (as specified in [RFC6935])\n
    \        applies.  See Section 3.1 for specification of these exceptions\n         and
    additional requirements that apply when UDP zero-checksum\n         mode is used
    for MPLS-in-UDP traffic over IPv6.\n      MPLS Label Stack\n         This field
    contains an MPLS Label Stack as defined in\n         [RFC3032].\n      Message
    Body\n         This field contains one MPLS message body.\n"
  - contents:
    - "3.1.  UDP Checksum Usage with IPv6\n   When UDP is used over IPv6, the UDP
      checksum is relied upon to\n   protect both the IPv6 and UDP headers from corruption
      and MUST be\n   used unless the requirements in [RFC6935] and [RFC6936] for
      use of\n   UDP zero-checksum mode with a tunnel protocol are satisfied.  MPLS-\n
      \  in-UDP is a tunnel protocol, and there is significant successful\n   deployment
      of MPLS-in-IPv6 without UDP (i.e., without a checksum that\n   covers the IPv6
      header or the MPLS label stack), as described in\n   Section 3.1 of [RFC6936]:\n
      \     There is extensive experience with deployments using tunnel\n      protocols
      in well-managed networks (e.g., corporate networks and\n      service provider
      core networks).  This has shown the robustness of\n      methods such as Pseudowire
      Emulation Edge-to-Edge (PWE3) and MPLS\n      that do not employ a transport
      protocol checksum and that have not\n      specified mechanisms to protect from
      corruption of the unprotected\n      headers (such as the VPN Identifier in
      MPLS).\n   The UDP checksum MUST be implemented and MUST be used in accordance\n
      \  with [RFC768] and [RFC2460] for MPLS-in-UDP traffic over IPv6 unless\n   one
      or more of the following exceptions applies and the additional\n   requirements
      stated below are complied with.  There are three\n   exceptions that allow use
      of UDP zero-checksum mode for IPv6 with\n   MPLS-in-UDP, subject to the additional
      requirements stated below in\n   this section.  The three exceptions are:\n
      \  a.  Use of MPLS-in-UDP in networks under single administrative\n       control
      (such as within a single operator's network) where it is\n       known (perhaps
      through knowledge of equipment types and lower-\n       layer checks) that packet
      corruption is exceptionally unlikely\n       and where the operator is willing
      to take the risk of undetected\n       packet corruption.\n   b.  Use of MPLS-in-UDP
      in networks under single administrative\n       control (such as within a single
      operator's network) where it is\n       judged through observational measurements
      (perhaps of historic or\n       current traffic flows that use a non-zero checksum)
      that the\n       level of packet corruption is tolerably low and where the\n
      \      operator is willing to take the risk of undetected packet\n       corruption.\n
      \  c.  Use of MPLS-in-UDP for traffic delivery for applications that are\n       tolerant
      of misdelivered or corrupted packets (perhaps through\n       higher-layer checksum,
      validation, and retransmission or\n       transmission redundancy) where the
      operator is willing to rely on\n       the applications using the tunnel to
      survive any corrupt packets.\n   These exceptions may also be extended to the
      use of MPLS-in-UDP\n   within a set of closely cooperating network administrations
      (such as\n   network operators who have agreed to work together in order to\n
      \  jointly provide specific services).  Even when one of the above\n   exceptions
      applies, use of UDP checksums may be appropriate when VPN\n   services are provided
      over MPLS-in-UDP; see Section 6.\n   As such, for IPv6, the UDP checksum for
      MPLS-in-UDP MUST be used as\n   specified in [RFC768] and [RFC2460] for tunnels
      that span multiple\n   networks whose network administrations do not cooperate
      closely, even\n   if each non-cooperating network administration independently\n
      \  satisfies one or more of the exceptions for UDP zero-checksum mode\n   usage
      with MPLS-in-UDP over IPv6.\n   The following additional requirements apply
      to implementation and use\n   of UDP zero-checksum mode for MPLS-in-UDP over
      IPv6:\n   a.  Use of the UDP checksum with IPv6 MUST be the default\n       configuration
      of all MPLS-in-UDP implementations.\n   b.  The MPLS-in-UDP implementation MUST
      comply with all requirements\n       specified in Section 4 of [RFC6936] and
      with requirement 1\n       specified in Section 5 of [RFC6936].\n   c.  The
      tunnel decapsulator SHOULD only allow the use of UDP zero-\n       checksum
      mode for IPv6 on a single received UDP Destination Port\n       regardless of
      the encapsulator.  The motivation for this\n       requirement is possible corruption
      of the UDP Destination Port,\n       which may cause packet delivery to the
      wrong UDP port.  If that\n       other UDP port requires the UDP checksum, the
      misdelivered packet\n       will be discarded\n   d.  The tunnel decapsulator
      MUST check that the source and\n       destination IPv6 addresses are valid
      for the MPLS-in-UDP tunnel\n       on which the packet was received if that
      tunnel uses UDP zero-\n       checksum mode and discard any packet for which
      this check fails.\n   e.  The tunnel encapsulator SHOULD use different IPv6
      addresses for\n       each MPLS-in-UDP tunnel that uses UDP zero-checksum mode\n
      \      (regardless of decapsulator) in order to strengthen the\n       decapsulator's
      check of the IPv6 source address (i.e., the same\n       IPv6 source address
      SHOULD NOT be used with more than one IPv6\n       destination address, independent
      of whether that destination\n       address is a unicast or multicast address).
      \ When this is not\n       possible, it is RECOMMENDED to use each source IPv6
      address for\n       as few UDP zero-checksum mode MPLS-in-UDP tunnels (i.e.,
      with as\n       few destination IPv6 addresses) as is feasible.\n   f.  Any
      middlebox support for MPLS-in-UDP with UDP zero-checksum mode\n       for IPv6
      MUST comply with requirements 1 and 8-10 in Section 5 of\n       [RFC6936].\n
      \  g.  Measures SHOULD be taken to prevent IPv6 traffic with zero UDP\n       checksums
      from \"escaping\" to the general Internet; see Section 5\n       for examples
      of such measures.\n   h.  IPv6 traffic with zero UDP checksums MUST be actively
      monitored\n       for errors by the network operator.\n   The above requirements
      do not change either the requirements\n   specified in [RFC2460] as modified
      by [RFC6935] or the requirements\n   specified in [RFC6936].\n   The requirement
      to check the source IPv6 address in addition to the\n   destination IPv6 address,
      plus the strong recommendation against\n   reuse of source IPv6 addresses among
      MPLS-in-UDP tunnels collectively\n   provide some mitigation for the absence
      of UDP checksum coverage of\n   the IPv6 header.  In addition, the MPLS data
      plane only forwards\n   packets with valid labels (i.e., labels that have been
      distributed by\n   the tunnel egress LSR), providing some additional opportunity
      to\n   detect MPLS-in-UDP packet misdelivery when the misdelivered packet\n
      \  contains a label that is not valid for forwarding at the receiving\n   LSR.
      \ The expected result for IPv6 UDP zero-checksum mode for MPLS-\n   in-UDP is
      that corruption of the destination IPv6 address will\n   usually cause packet
      discard, as offsetting corruptions to the source\n   IPv6 and/or MPLS top label
      are unlikely.  Additional assurance is\n   provided by the restrictions in the
      above exceptions that limit usage\n   of IPv6 UDP zero-checksum mode to well-managed
      networks for which\n   MPLS packet corruption has not been a problem in practice.\n
      \  Hence, MPLS-in-UDP is suitable for transmission over lower layers in\n   the
      well-managed networks that are allowed by the exceptions stated\n   above, and
      the rate of corruption of the inner IP packet on such\n   networks is not expected
      to increase by comparison to MPLS traffic\n   that is not encapsulated in UDP.
      \ For these reasons, MPLS-in-UDP does\n   not provide an additional integrity
      check when UDP zero-checksum mode\n   is used with IPv6, and this design is
      in accordance with requirements\n   2, 3, and 5 specified in Section 5 of [RFC6936].\n
      \  MPLS does not accumulate incorrect state as a consequence of label\n   stack
      corruption.  A corrupt MPLS label results in either packet\n   discard or forwarding
      (and forgetting) of the packet without\n   accumulation of MPLS protocol state.
      \ Active monitoring of MPLS-in-\n   UDP traffic for errors is REQUIRED as occurrence
      of errors will\n   result in some accumulation of error information outside
      the MPLS\n   protocol for operational and management purposes.  This design
      is in\n   accordance with requirement 4 specified in Section 5 of [RFC6936].\n
      \  The remaining requirements specified in Section 5 of [RFC6936] are\n   inapplicable
      to MPLS-in-UDP.  Requirements 6 and 7 do not apply\n   because MPLS does not
      have an MPLS-generic control feedback\n   mechanism.  Requirements 8-10 are
      middlebox requirements that do not\n   apply to MPLS-in-UDP tunnel endpoints,
      but see Section 3.2 for\n   further middlebox discussion.\n   In summary, UDP
      zero-checksum mode for IPv6 is allowed to be used\n   with MPLS-in-UDP when
      one of the three exceptions specified above\n   applies, provided that the additional
      requirements specified in this\n   section are complied with.  Otherwise, the
      UDP checksum MUST be used\n   for IPv6 as specified in [RFC768] and [RFC2460].\n
      \  This entire section and its requirements apply only to use of UDP\n   zero-checksum
      mode for IPv6; they can be avoided by using the UDP\n   checksum as specified
      in [RFC768] and [RFC2460].\n"
    title: 3.1.  UDP Checksum Usage with IPv6
  - contents:
    - "3.2.  Middlebox Considerations for IPv6 UDP Zero Checksums\n   IPv6 datagrams
      with a zero UDP checksum will not be passed by any\n   middlebox that validates
      the checksum based on [RFC2460] or that\n   updates the UDP checksum field,
      such as NATs or firewalls.  Changing\n   this behavior would require such middleboxes
      to be updated to\n   correctly handle datagrams with zero UDP checksums.  The
      MPLS-in-UDP\n   encapsulation does not provide a mechanism to safely fall back
      to\n   using a checksum when a path change occurs redirecting a tunnel over\n
      \  a path that includes a middlebox that discards IPv6 datagrams with a\n   zero
      UDP checksum.  In this case, the MPLS-in-UDP tunnel will be\n   black-holed
      by that middlebox.  Recommended changes to allow\n   firewalls, NATs, and other
      middleboxes to support use of an IPv6 zero\n   UDP checksum are described in
      Section 5 of [RFC6936].\n"
    title: 3.2.  Middlebox Considerations for IPv6 UDP Zero Checksums
  title: 3.  Encapsulation in UDP
- contents:
  - "4.  Processing Procedures\n   This MPLS-in-UDP encapsulation causes MPLS packets
    to be forwarded\n   through \"UDP tunnels\".  When performing MPLS-in-UDP encapsulation
    by\n   the encapsulator, the entropy value would be generated by the\n   encapsulator
    and then be filled in the Source Port field of the UDP\n   header.  The Destination
    Port field is set to a value (6635)\n   allocated by IANA to indicate that the
    UDP tunnel payload is an MPLS\n   packet.  As for whether the top label of the
    encapsulated MPLS packet\n   is downstream-assigned or upstream-assigned, it is
    determined\n   according to the following criteria, which are compatible with\n
    \  [RFC5332]:\n   a.  If the tunnel destination IP address is a unicast address,
    the\n       top label MUST be downstream-assigned;\n   b.  If the tunnel destination
    IP address is an IP multicast address,\n       either all encapsulated MPLS packets
    in the particular tunnel\n       have a downstream-assigned label at the top of
    the stack, or all\n       encapsulated MPLS packets in that tunnel have an upstream-\n
    \      assigned label at the top of the stack.  The means by which this\n       is
    determined for a particular tunnel is outside the scope of\n       this specification.
    \ In the absence of any knowledge about a\n       specific tunnel, the label SHOULD
    be presumed to be upstream-\n       assigned.\n   Intermediate routers, upon receiving
    these UDP encapsulated packets,\n   could balance these packets based on the hash
    of the five-tuple of\n   UDP packets.  Upon receiving these UDP-encapsulated packets,
    the\n   decapsulator would decapsulate them by removing the UDP headers and\n
    \  then process them accordingly.  For other common processing\n   procedures
    associated with tunneling encapsulation technologies\n   including but not limited
    to Maximum Transmission Unit (MTU) and\n   preventing fragmentation and reassembly,
    Time to Live (TTL), and\n   differentiated services, the corresponding \"Common
    Procedures\"\n   defined in [RFC4023], which are applicable for MPLS-in-IP and\n
    \  MPLS-in-GRE encapsulation formats SHOULD be followed.\n   Note: Each UDP tunnel
    is unidirectional, as MPLS-in-UDP traffic is\n   sent to the IANA-allocated UDP
    Destination Port, and in particular,\n   is never sent back to any port used as
    a UDP Source Port (which\n   serves solely as a source of entropy).  This is at
    odds with a\n   typical middlebox (e.g., firewall) assumption that bidirectional\n
    \  traffic uses a common pair of UDP ports.  As a result, arranging to\n   pass
    bidirectional MPLS-in-UDP traffic through middleboxes may\n   require separate
    configuration for each direction of traffic.\n"
  title: 4.  Processing Procedures
- contents:
  - "5.  Congestion Considerations\n   Section 3.1.3 of [RFC5405] discussed the congestion
    implications of\n   UDP tunnels.  As discussed in [RFC5405], because other flows
    can\n   share the path with one or more UDP tunnels, congestion control\n   [RFC2914]
    needs to be considered.\n   A major motivation for encapsulating MPLS in UDP is
    to improve the\n   use of multipath (such as ECMP) in cases where traffic is to
    traverse\n   routers that are able to hash on UDP Port and IP address.  As such,\n
    \  in many cases this may reduce the occurrence of congestion and\n   improve
    usage of available network capacity.  However, it is also\n   necessary to ensure
    that the network, including applications that use\n   the network, responds appropriately
    in more difficult cases, such as\n   when link or equipment failures have reduced
    the available capacity.\n   The impact of congestion must be considered both in
    terms of the\n   effect on the rest of the network of a UDP tunnel that is consuming\n
    \  excessive capacity, and in terms of the effect on the flows using the\n   UDP
    tunnels.  The potential impact of congestion from a UDP tunnel\n   depends upon
    what sort of traffic is carried over the tunnel, as well\n   as the path of the
    tunnel.\n   MPLS is widely used to carry an extensive range of traffic.  In many\n
    \  cases, MPLS is used to carry IP traffic.  IP traffic is generally\n   assumed
    to be congestion controlled, and thus a tunnel carrying\n   general IP traffic
    (as might be expected to be carried across the\n   Internet) generally does not
    need additional congestion control\n   mechanisms.  As specified in [RFC5405]:\n
    \     IP-based traffic is generally assumed to be congestion-controlled,\n      i.e.,
    it is assumed that the transport protocols generating IP-\n      based traffic
    at the sender already employ mechanisms that are\n      sufficient to address
    congestion on the path.  Consequently, a\n      tunnel carrying IP-based traffic
    should already interact\n      appropriately with other traffic sharing the path,
    and specific\n      congestion control mechanisms for the tunnel are not necessary.\n
    \  For this reason, where MPLS-in-UDP tunneling is used to carry IP\n   traffic
    that is known to be congestion controlled, the UDP tunnels\n   MAY be used within
    a single network or across multiple networks, with\n   cooperating network operators.
    \ Internet IP traffic is generally\n   assumed to be congestion controlled.  Similarly,
    in general, Layer 3\n   VPNs are carrying IP traffic that is similarly assumed
    to be\n   congestion controlled.\n   Whether or not Layer 2 VPN traffic is congestion
    controlled may\n   depend upon the specific services being offered and what use
    is being\n   made of the Layer 2 services.\n   However, MPLS is also used in many
    cases to carry traffic that is not\n   necessarily congestion controlled.  For
    example, MPLS may be used to\n   carry pseudowire or VPN traffic where specific
    bandwidth guarantees\n   are provided to each pseudowire or to each VPN.\n   In
    such cases, network operators may avoid congestion by careful\n   provisioning
    of their networks, by rate limiting of user data\n   traffic, and/or by using
    MPLS Traffic Engineering (MPLS-TE) to assign\n   specific bandwidth guarantees
    to each LSP.  Where MPLS is carried\n   over UDP over IP, the identity of each
    individual MPLS flow is lost,\n   in general, and MPLS-TE cannot be used to guarantee
    bandwidth to\n   specific flows (since many LSPs may be multiplexed over a single
    UDP\n   tunnel, and many UDP tunnels may be mixed in an IP network).\n   For this
    reason, where the MPLS traffic is not congestion controlled,\n   MPLS-in-UDP tunnels
    MUST only be used within a single operator's\n   network that utilizes careful
    provisioning (e.g., rate limiting at\n   the entries of the network while over-provisioning
    network capacity)\n   to ensure against congestion, or within a limited number
    of networks\n   whose operators closely cooperate in order to jointly provide
    this\n   same careful provisioning.\n   As such, MPLS-in-UDP MUST NOT be used
    over the general Internet, or\n   over non-cooperating network operators, to carry
    traffic that is not\n   congestion controlled.\n   Measures SHOULD be taken to
    prevent non-congestion-controlled MPLS-\n   in-UDP traffic from \"escaping\" to
    the general Internet, e.g.:\n   a.  Physical or logical isolation of the links
    carrying MPLS-over-UDP\n       from the general Internet.\n   b.  Deployment of
    packet filters that block the UDP Destination Ports\n       used for MPLS-over-UDP.\n
    \  c.  Imposition of restrictions on MPLS-in-UDP traffic by software\n       tools
    used to set up MPLS-in-UDP tunnels between specific end\n       systems (as might
    be used within a single data center).\n   d.  Use of a \"Managed Circuit Breaker\"
    for the MPLS traffic as\n       described in [CIRCUIT-BREAKER].\n"
  title: 5.  Congestion Considerations
- contents:
  - "6.  Security Considerations\n   The security problems faced with the MPLS-in-UDP
    tunnel are exactly\n   the same as those faced with MPLS-in-IP and MPLS-in-GRE
    tunnels\n   [RFC4023].  In other words, the MPLS-in-UDP tunnel as defined in this\n
    \  document by itself cannot ensure the integrity and privacy of data\n   packets
    being transported through the MPLS-in-UDP tunnel and cannot\n   enable the tunnel
    decapsulator to authenticate the tunnel\n   encapsulator.  In the case where any
    of the above security issues is\n   concerned, the MPLS-in-UDP tunnel SHOULD be
    secured with IPsec or\n   DTLS.  IPsec was designed as a network security mechanism,
    and\n   therefore it resides at the network layer.  As such, if the tunnel is\n
    \  secured with IPsec, the UDP header would not be visible to\n   intermediate
    routers anymore in either IPsec tunnel or transport\n   mode.  As a result, the
    meaning of adopting the MPLS-in-UDP tunnel as\n   an alternative to the MPLS-in-GRE
    or MPLS-in-IP tunnel is lost.  By\n   comparison, DTLS is better suited for application
    security and can\n   better preserve network- and transport-layer protocol information.\n
    \  Specifically, if DTLS is used, the destination port of the UDP header\n   MUST
    be set to an IANA-assigned value (6636) indicating MPLS-in-UDP\n   with DTLS,
    and that UDP port MUST NOT be used for other traffic.  The\n   UDP source port
    field can still be used to add entropy, e.g., for\n   load-sharing purposes.  DTLS
    usage is limited to a single DTLS\n   session for any specific tunnel encapsulator/decapsulator
    pair\n   (identified by source and destination IP addresses).  Both IP\n   addresses
    MUST be unicast addresses -- multicast traffic is not\n   supported when DTLS
    is used.  An MPLS-in-UDP tunnel decapsulator\n   implementation that supports
    DTLS is expected to be able to establish\n   DTLS sessions with multiple tunnel
    encapsulators.  Likewise, an MPLS-\n   in-UDP tunnel encapsulator implementation
    is expected to be able to\n   establish DTLS sessions with multiple decapsulators.
    \ (However,\n   different source and/or destination IP addresses may be involved.\n
    \  See Section 3.1 for discussion of one situation where use of\n   different
    source IP addresses is important.)\n   If the tunnel is not secured with IPsec
    or DTLS, some other method\n   should be used to ensure that packets are decapsulated
    and forwarded\n   by the tunnel tail only if those packets were encapsulated by
    the\n   tunnel head.  If the tunnel lies entirely within a single\n   administrative
    domain, address filtering at the boundaries can be\n   used to ensure that no
    packet with the IP source address of a tunnel\n   endpoint or with the IP destination
    address of a tunnel endpoint can\n   enter the domain from outside.  However,
    when the tunnel head and the\n   tunnel tail are not in the same administrative
    domain, this may\n   become difficult, and filtering based on the destination
    address can\n   even become impossible if the packets must traverse the public\n
    \  Internet.  Sometimes only source address filtering (but not\n   destination
    address filtering) is done at the boundaries of an\n   administrative domain.
    \ If this is the case, the filtering does not\n   provide effective protection
    at all unless the decapsulator of an\n   MPLS-in-UDP validates the IP source address
    of the packet.\n   This document does not require that the decapsulator validate
    the IP\n   source address of the tunneled packets (with the exception that the\n
    \  IPv6 source address MUST be validated when UDP zero-checksum mode is\n   used
    with IPv6), but it should be understood that failure to do so\n   presupposes
    that there is effective destination-based (or a\n   combination of source-based
    and destination-based) filtering at the\n   boundaries.  MPLS-based VPN services
    rely on a VPN label in the MPLS\n   label stack to identify the VPN.  Corruption
    of that label could leak\n   traffic across VPN boundaries.  Such leakage is highly
    undesirable\n   when inter-VPN isolation is used for privacy or security reasons.\n
    \  When that is the case, UDP checksums SHOULD be used for MPLS-in-UDP\n   with
    both IPv4 and IPv6, and in particular, UDP zero-checksum mode\n   SHOULD NOT be
    used with IPv6.  Each UDP checksum covers the VPN\n   label, thereby providing
    increased assurance of isolation among VPNs.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   One UDP destination port number indicating MPLS has
    been allocated by\n   IANA:\n      Service Name: MPLS-UDP\n      Transport Protocol(s):
    UDP\n      Assignee: IESG <iesg@ietf.org>\n      Contact: IETF Chair <chair@ietf.org>.\n
    \     Description: Encapsulate MPLS packets in UDP tunnels.\n      Reference:
    RFC 7510\n      Port Number: 6635\n   One UDP destination port number indicating
    MPLS with DTLS has been\n   allocated by IANA:\n      Service Name: MPLS-UDP-DTLS\n
    \     Transport Protocol(s): UDP\n      Assignee: IESG <iesg@ietf.org>\n      Contact:
    IETF Chair <chair@ietf.org>.\n      Description: Encapsulate MPLS packets in UDP
    tunnels with DTLS.\n      Reference: RFC 7510\n      Port Number: 6636\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC768]   Postel, J., \"User Datagram Protocol\",
      STD 6, RFC 768,\n              August 1980, <http://www.rfc-editor.org/info/rfc768>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)
      Specification\", RFC 2460, December 1998,\n              <http://www.rfc-editor.org/info/rfc2460>.\n
      \  [RFC3032]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n              Farinacci,
      D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\", RFC
      3032, January 2001,\n              <http://www.rfc-editor.org/info/rfc3032>.\n
      \  [RFC4301]  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet
      Protocol\", RFC 4301, December 2005,\n              <http://www.rfc-editor.org/info/rfc4301>.\n
      \  [RFC5332]  Eckert, T., Rosen, E., Ed., Aggarwal, R., and Y. Rekhter,\n              \"MPLS
      Multicast Encapsulations\", RFC 5332, August 2008,\n              <http://www.rfc-editor.org/info/rfc5332>.\n
      \  [RFC5405]  Eggert, L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n
      \             for Application Designers\", BCP 145, RFC 5405, November\n              2008,
      <http://www.rfc-editor.org/info/rfc5405>.\n   [RFC6347]  Rescorla, E. and N.
      Modadugu, \"Datagram Transport Layer\n              Security Version 1.2\",
      RFC 6347, January 2012,\n              <http://www.rfc-editor.org/info/rfc6347>.\n
      \  [RFC6935]  Eubanks, M., Chimento, P., and M. Westerlund, \"IPv6 and\n              UDP
      Checksums for Tunneled Packets\", RFC 6935, April 2013,\n              <http://www.rfc-editor.org/info/rfc6935>.\n
      \  [RFC6936]  Fairhurst, G. and M. Westerlund, \"Applicability Statement\n              for
      the Use of IPv6 UDP Datagrams with Zero Checksums\",\n              RFC 6936,
      April 2013,\n              <http://www.rfc-editor.org/info/rfc6936>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [CIRCUIT-BREAKER]\n              Fairhurst,
      G., \"Network Transport Circuit Breakers\", Work\n              in Progress,
      draft-ietf-tsvwg-circuit-breaker-01, April\n              2015.\n   [RFC2474]
      \ Nichols, K., Blake, S., Baker, F., and D. Black,\n              \"Definition
      of the Differentiated Services Field (DS\n              Field) in the IPv4 and
      IPv6 Headers\", RFC 2474, December\n              1998, <http://www.rfc-editor.org/info/rfc2474>.\n
      \  [RFC2914]  Floyd, S., \"Congestion Control Principles\", BCP 41, RFC\n              2914,
      September 2000,\n              <http://www.rfc-editor.org/info/rfc2914>.\n   [RFC4023]
      \ Worster, T., Rekhter, Y., and E. Rosen, Ed.,\n              \"Encapsulating
      MPLS in IP or Generic Routing Encapsulation\n              (GRE)\", RFC 4023,
      March 2005,\n              <http://www.rfc-editor.org/info/rfc4023>.\n   [RFC4817]
      \ Townsley, M., Pignataro, C., Wainner, S., Seely, T., and\n              J.
      Young, \"Encapsulation of MPLS over Layer 2 Tunneling\n              Protocol
      Version 3\", RFC 4817, March 2007,\n              <http://www.rfc-editor.org/info/rfc4817>.\n
      \  [RFC5640]  Filsfils, C., Mohapatra, P., and C. Pignataro, \"Load-\n              Balancing
      for Mesh Softwires\", RFC 5640, August 2009,\n              <http://www.rfc-editor.org/info/rfc5640>.\n
      \  [RFC6438]  Carpenter, B. and S. Amante, \"Using the IPv6 Flow Label\n              for
      Equal Cost Multipath Routing and Link Aggregation in\n              Tunnels\",
      RFC 6438, November 2011,\n              <http://www.rfc-editor.org/info/rfc6438>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   Thanks to Shane Amante, Dino Farinacci, Keshava A K, Ivan
    Pepelnjak,\n   Eric Rosen, Andrew G. Malis, Kireeti Kompella, Marshall Eubanks,\n
    \  George Swallow, Loa Andersson, Vivek Kumar, Stewart Bryant, Wen\n   Zhang,
    Joel M. Halpern, Noel Chiappa, Scott Brim, Alia Atlas,\n   Alexander Vainshtein,
    Joel Jaeggli, Edward Crabbe, Mark Tinka, Lars\n   Eggert, Joe Touch, Lloyd Wood,
    Gorry Fairhurst, Weiguo Hao, Mark\n   Szczesniak, Stephen Farrell, Martin Stiemerling,
    Zhenxiao Liu, and\n   Xing Tong for their valuable comments and suggestions on
    this\n   document.\n   Special thanks to Alia Atlas for her insightful suggestion
    of adding\n   an applicability statement.\n   Thanks to Daniel King, Gregory Mirsky,
    and Eric Osborne for their\n   valuable MPLS-RT reviews on this document.  Thanks
    to Charlie Kaufman\n   for his SecDir review of this document.  Thanks to Nevil
    Brownlee for\n   the OPS-Dir review of this document.  Thanks to Roni Even for
    the\n   Gen-ART review of this document.  Thanks to Pearl Liang for the IANA\n
    \  review of this document.\n"
  title: Acknowledgements
- contents:
  - "Contributors\n   Note that contributors are listed in alphabetical order according
    to\n   their last names.\n      Yongbing Fan\n      China Telecom\n      EMail:
    fanyb@gsta.com\n      Adrian Farrel\n      Juniper Networks\n      EMail: adrian@olddog.co.uk\n
    \     Zhenbin Li\n      Huawei Technologies\n      EMail: lizhenbin@huawei.com\n
    \     Carlos Pignataro\n      Cisco Systems\n      EMail: cpignata@cisco.com\n
    \     Curtis Villamizar\n      Outer Cape Cod Network Consulting, LLC\n      EMail:
    curtis@occnc.com\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Xiaohu Xu\n   Huawei Technologies\n   No.156 Beiqing Rd\n
    \  Beijing  100095\n   China\n   Phone: +86-10-60610041\n   EMail: xuxiaohu@huawei.com\n
    \  Nischal Sheth\n   Juniper Networks\n   1194 N. Mathilda Ave\n   Sunnyvale,
    CA  94089\n   United States\n   EMail: nsheth@juniper.net\n   Lucy Yong\n   Huawei
    USA\n   EMail: Lucy.yong@huawei.com\n   Ross Callon\n   Juniper Networks\n   EMail:
    rcallon@juniper.net\n   David Black\n   EMC Corporation\n   176 South Street\n
    \  Hopkinton, MA  01748\n   United States\n   EMail: david.black@emc.com\n"
  title: Authors' Addresses
