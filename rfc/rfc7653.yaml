- contents:
  - '                        DHCPv6 Active Leasequery

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Dynamic Host Configuration Protocol for IPv6 (DHCPv6) has been\n
    \  extended with a Leasequery capability that allows a requestor to\n   request
    information about DHCPv6 bindings.  That mechanism is limited\n   to queries for
    DHCPv6 binding data updates prior to the time the\n   DHCPv6 server receives the
    Leasequery request.  Continuous update of\n   an external requestor with Leasequery
    data is sometimes desired.\n   This document expands on the DHCPv6 Leasequery
    protocol and allows\n   for active transfer of real-time DHCPv6 binding information
    data via\n   TCP.  This document also updates DHCPv6 Bulk Leasequery (RFC 5460)
    by\n   adding new options.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7653.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................4\n   3.
    Protocol Overview ...............................................6\n   4. Interaction
    between Active Leasequery and Bulk Leasequery .......8\n   5. Extension to DHCPv6
    Bulk Leasequery .............................8\n   6. Message and Option Definitions
    ..................................9\n      6.1. Message Framing for TCP ....................................9\n
    \     6.2. Messages ...................................................9\n           6.2.1.
    ACTIVELEASEQUERY ....................................9\n           6.2.2. STARTTLS
    ...........................................10\n           6.2.3. Response Messages
    ..................................10\n      6.3. Options ...................................................10\n
    \          6.3.1. OPTION_LQ_BASE_TIME ................................10\n           6.3.2.
    OPTION_LQ_START_TIME ...............................11\n           6.3.3. OPTION_LQ_END_TIME
    .................................12\n      6.4. Connection and Transmission Parameters
    ....................12\n   7. Information Communicated by Active Leasequery ..................13\n
    \  8. Requestor Behavior .............................................14\n      8.1.
    General Processing ........................................14\n      8.2. Initiating
    a Connection ...................................14\n      8.3. Forming an Active
    Leasequery ..............................15\n      8.4. Processing Active Replies
    .................................16\n           8.4.1. Processing Replies from
    a Request Containing an\n                  OPTION_LQ_START_TIME ...............................18\n
    \     8.5. Processing Time Values in Leasequery Messages .............20\n      8.6.
    Examples ..................................................21\n           8.6.1.
    Query Failure ......................................21\n           8.6.2. Data
    Missing on Server .............................21\n           8.6.3. Successful
    Query ...................................21\n      8.7. Closing Connections .......................................22\n
    \  9. Server Behavior ................................................22\n      9.1.
    Accepting Connections .....................................22\n      9.2. Rejecting
    Connections .....................................24\n      9.3. Replying to an
    Active Leasequery ..........................24\n      9.4. Multiple or Parallel
    Queries ..............................26\n      9.5. Closing Connections .......................................26\n
    \  10. Security Considerations .......................................27\n   11.
    IANA Considerations ...........................................28\n   12. References
    ....................................................28\n      12.1. Normative
    References .....................................28\n      12.2. Informative References
    ...................................29\n   Acknowledgments ...................................................30\n
    \  Authors' Addresses ................................................30\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The DHCPv6 protocol [RFC3315] specifies a mechanism for
    the\n   assignment of IPv6 address and configuration information to IPv6\n   nodes.
    \ IPv6 Prefix Delegation for DHCPv6 [RFC3633] specifies a\n   mechanism for DHCPv6
    delegation of IPv6 prefixes and related data.\n   DHCPv6 servers maintain authoritative
    information including binding\n   information for delegated IPv6 prefixes.\n   Requirements
    exist for external entities to keep up to date on the\n   correspondence between
    DHCPv6 clients and their bindings.  These\n   entities need to keep up with the
    current binding activity of the\n   DHCPv6 server.  Keeping up with this binding
    activity is termed\n   \"active\" leasequery.\n   The DHCPv6 Bulk Leasequery [RFC5460]
    capability can be used to\n   recover useful information from a DHCPv6 server
    when some external\n   entity starts up.  This entity could be one that is directly
    involved\n   in the DHCPv6 client-server transactions (e.g., a relay agent), or
    it\n   could be an external process that needs information present in the\n   DHCPv6
    server's lease state database.\n   The Active Leasequery capability documented
    here is designed to allow\n   an entity not directly involved in DHCPv6 client-server
    transactions\n   to nevertheless keep current with the state of the DHCPv6 lease
    state\n   information in real time.\n   This document updates DHCPv6 Bulk Leasequery
    [RFC5460] by adding new\n   options, as described in Section 6.2.1.  For DHCPv6
    servers\n   supporting Bulk Leasequery and not Active Leasequery, Section 9.2\n
    \  specifies the mechanism to reject incoming Active Leasequery\n   requests.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  DHCPv6 terminology is defined in [RFC3315].  Terminology specific to\n   DHCPv6
    Active Leasequery can be found below:\n   o  absolute time\n      A 32-bit unsigned
    quantity containing the number of seconds since\n      midnight (UTC), January
    1, 2000, modulo 2^32.\n   o  Active Leasequery\n      Keeping up to date in real
    time (or near real time) with DHCPv6\n      binding activity.\n   o  Bulk Leasequery\n
    \     Requesting and receiving information about all or some of the\n      existing
    DHCPv6 binding information in an efficient manner, as\n      defined by [RFC5460].\n
    \  o  blocked TCP connection\n      A TCP connection is considered blocked if
    the underlying TCP\n      transport will not accept new messages to be sent without
    blocking\n      the thread that is attempting to send the message.\n   o  binding
    change/update\n      Any change in the DHCPv6 binding state.  This also includes\n
    \     expiration or deletion of the binding.\n   o  catch-up information\n      If
    a DHCPv6 Active Leasequery requestor sends an\n      OPTION_LQ_START_TIME option
    in an ACTIVELEASEQUERY message, the\n      DHCPv6 server will attempt to send
    the requestor the information\n      that changed since the time specified in
    the OPTION_LQ_START_TIME\n      option.  The binding information sent to satisfy
    this request is\n      the catch-up information.\n   o  catch-up phase\n      The
    period while catch-up information is being sent is the catch-\n      up phase.\n
    \  o  clock skew\n      The difference between the absolute time on a DHCPv6 server
    and\n      the absolute time on the system where a requestor of an Active or\n
    \     Bulk Leasequery is executing is termed the \"clock skew\" for that\n      Active
    or Bulk Leasequery connection.  It is not absolutely\n      constant but is likely
    to vary only slowly.  While it is easy to\n      think that this can be calculated
    precisely after one message is\n      received by a requestor from a DHCPv6 server,
    a more accurate\n      value is derived from continuously examining the instantaneous\n
    \     value developed from each message received from a DHCPv6 server\n      and
    using it to make small adjustments to the existing value held\n      in the requestor.\n
    \  o  DHCPv6 binding state\n      Data stored on the DHCPv6 server related to
    binding.\n   o  requestor\n      The node that sends LEASEQUERY messages to one
    or more servers to\n      retrieve information on the bindings for a client.\n
    \  o  transaction-id\n      An opaque value used to match responses with queries
    initiated by\n      an Active Leasequery requestor.\n"
  title: 2.  Terminology
- contents:
  - "3.  Protocol Overview\n   The Active Leasequery mechanism is modeled on the existing
    DHCPv6\n   Bulk Leasequery [RFC5460]; most differences arise from the long-term\n
    \  nature of the TCP [RFC7414] connection required for Active\n   Leasequery.
    \ A DHCPv6 server that supports Active Leasequery MUST\n   support Bulk Leasequery
    [RFC5460] as well.\n   An Active Leasequery requestor opens a TCP connection to
    a DHCPv6\n   server, using the DHCPv6 port 547.  Note that this implies that the\n
    \  Leasequery requestor has server IP address(es) available via\n   configuration
    or some other means, and that it has unicast IP\n   reachability to the DHCPv6
    server.  No relaying for Active Leasequery\n   is specified.\n   After establishing
    a connection, the requestor sends an\n   ACTIVELEASEQUERY message over the connection.
    \ In response, the\n   server sends updates to the requestor using LEASEQUERY-REPLY
    and\n   LEASEQUERY-DATA messages.  This response procedure is similar to the\n
    \  procedure specified in [RFC5460], except that in the case of Active\n   Leasequery,
    the server sends updates whenever some activity occurs to\n   change the binding
    state -- thus the need for a long-lived\n   connection.  Additionally, the Active
    Leasequery server SHOULD\n   provide a mechanism to control which data is allowed
    to be included\n   in the OPTION_CLIENT_DATA messages sent to the requestor.  See\n
    \  Section 9.3.\n   Active Leasequery has features that allow this external entity
    to\n   lose its connection and then reconnect and receive the latest\n   information
    concerning any IPv6 bindings changed while it was not\n   connected.\n   These
    features are designed to allow the Active Leasequery requestor\n   to efficiently
    become current with respect to the lease state\n   database after it has been
    restarted or the machine on which it is\n   running has been reinitialized.  It
    is easy to define a protocol that\n   works when the requestor is always connected
    to the DHCPv6 server.\n   Since that isn't sufficiently robust, much of the mechanism
    in this\n   document is designed to deal efficiently with situations that occur\n
    \  when the Active Leasequery requestor becomes disconnected from the\n   DHCPv6
    server from which it is receiving updates and then reconnects\n   to that server.\n
    \  Central to this approach, if the Active Leasequery requestor loses\n   service,
    it is allowed to specify the time of its most recent update\n   in a subsequent
    Active Leasequery request, and the DHCPv6 server will\n   determine whether or
    not data was missed while the Active Leasequery\n   requestor was not connected.\n
    \  The DHCPv6 server processing the Active Leasequery request MAY limit\n   the
    amount of data saved, and methods exist for the DHCPv6 server to\n   inform the
    Active Leasequery requestor that data was missed (i.e.,\n   not all data could
    be saved).  In this situation, the Active\n   Leasequery requestor should issue
    a Bulk Leasequery [RFC5460] to\n   recover information not available through an
    Active Leasequery.\n   DHCPv6 servers are not required to keep any data corresponding
    to\n   data missed on an Active Leasequery connection but will typically\n   choose
    to keep data corresponding to some recent activity available\n   for subsequent
    queries by a DHCPv6 Active Leasequery requestor whose\n   connection was temporarily
    interrupted.  In other words, DHCPv6\n   servers supporting catch-up are required
    to have some mechanism to\n   keep/save historic information of bindings.\n   An
    Active Leasequery requestor would typically use Bulk Leasequery to\n   initialize
    its database with all current data when that database\n   contains no binding
    information.  In addition, it would use Bulk\n   Leasequery to recover missed
    information in the event that its\n   connection with the DHCPv6 server was lost
    for a longer time than the\n   DHCPv6 server would keep track of the specific
    changes to the IPv6\n   binding information.\n   The messages sent by the server
    in response to an Active Leasequery\n   request should be identical to the messages
    sent by the server to a\n   Bulk Leasequery request regarding the way the data
    is encoded into\n   the Active Leasequery responses.  In addition, the actions
    taken by\n   the Active Leasequery requestor to interpret the responses to an\n
    \  Active Leasequery request should be identical to the way that the\n   requestor
    interprets the responses to a Bulk Leasequery request.\n   Thus, the handling
    of OPTION_CLIENT_DATA and additional options\n   discussed in the Bulk Leasequery
    specification [RFC5460] are to be\n   followed when implementing Active Leasequery,
    with the exception that\n   a server responding to an Active Leasequery request
    SHOULD be able to\n   be configured to prevent specific data items from being
    included in\n   the OPTION_CLIENT_DATA option even if they were requested by\n
    \  inclusion in the OPTION_ORO option.\n"
  title: 3.  Protocol Overview
- contents:
  - "4.  Interaction between Active Leasequery and Bulk Leasequery\n   Active Leasequery
    is an extension of the Bulk Leasequery protocol\n   [RFC5460].  The format of
    messages returned to an Active Leasequery\n   requestor is identical to that defined
    for the Bulk Leasequery\n   protocol [RFC5460].\n   Applications that employ Active
    Leasequery to keep a database up to\n   date with respect to the DHCPv6 server's
    lease state database should\n   use an initial Bulk Leasequery to bring their
    database into\n   equivalence with that of the DHCPv6 server and then use Active\n
    \  Leasequery to keep that database current with respect to the DHCPv6\n   server's
    lease state database.\n   There are several differences between the Active and
    Bulk Leasequery\n   protocols.  Active Leasequery defines a new message\n   (ACTIVELEASEQUERY)
    to send Active Leasequery requests to the DHCPv6\n   server.  An Active Leasequery
    connection sends all available updates\n   to the requestor, based on the OPTION_LQ_QUERY
    option (see\n   Section 6.2.1).\n   An Active Leasequery connection does not ever
    \"complete\", though the\n   DHCPv6 server can close the connection for a variety
    of reasons\n   associated with some sort of exception condition.\n"
  title: 4.  Interaction between Active Leasequery and Bulk Leasequery
- contents:
  - "5.  Extension to DHCPv6 Bulk Leasequery\n   This document extends the capabilities
    of the DHCPv6 Bulk Leasequery\n   protocol [RFC5460] by defining new options (OPTION_LQ_BASE_TIME,\n
    \  OPTION_LQ_START_TIME, and OPTION_LQ_END_TIME).  The DHCPv6 server\n   sends
    the OPTION_LQ_BASE_TIME option in a Bulk Leasequery response if\n   the requestor
    asked for the same in the Bulk Leasequery request.\n   OPTION_LQ_START_TIME and
    OPTION_LQ_END_TIME can be used in a Bulk\n   Leasequery request made to the DHCPv6
    server.  More details about\n   these options are specified in Section 6.3.\n"
  title: 5.  Extension to DHCPv6 Bulk Leasequery
- contents:
  - '6.  Message and Option Definitions

    '
  - contents:
    - "6.1.  Message Framing for TCP\n   The use of TCP for the Active Leasequery
      protocol permits one or more\n   DHCPv6 messages to be sent in response to a
      single Active Leasequery\n   request.  The receiver needs to be able to determine
      how large each\n   message is.  The same message framing technique used for
      DHCPv6 Bulk\n   Leasequery [RFC5460] is used for Active Leasequery as well.\n
      \  The intent in using the same format is that code that currently knows\n   how
      to deal with a message returned from DHCPv6 Bulk Leasequery\n   [RFC5460] will
      be able to deal with the message held inside of the\n   TCP framing.\n   When
      using Transport Layer Security (TLS), once TLS negotiation\n   completes, the
      connection will be encrypted and is now protected from\n   eavesdropping, and
      normal Active Leasequery messages are sent and\n   received using the TLS application
      data protocol services (see\n   Section 10 of [RFC5246]).\n"
    title: 6.1.  Message Framing for TCP
  - contents:
    - '6.2.  Messages

      '
    - contents:
      - "6.2.1.  ACTIVELEASEQUERY\n   The new message type (ACTIVELEASEQUERY) is designed
        for keeping the\n   requestor up to date in real time (or near real time)
        with DHCPv6\n   bindings.  It asks the server to return DHCPv6 binding activity
        that\n   occurs subsequent to the receipt of the Active Leasequery request.\n
        \  An ACTIVELEASEQUERY request MUST contain a transaction-id, and that\n   transaction-id
        MUST be locally unique on the TCP connection on which\n   it is sent to the
        DHCPv6 server.\n   When sending an ACTIVELEASEQUERY request, the requestor
        MAY include\n   the OPTION_LQ_START_TIME option in the ACTIVELEASEQUERY request.
        \ In\n   this case, the DHCPv6 server returns all the bindings changed on
        or\n   after the OPTION_LQ_START_TIME.\n   If the requestor is interested
        in receiving all binding updates from\n   the DHCPv6 server, it MUST NOT include
        the OPTION_LQ_QUERY option in\n   the ACTIVELEASEQUERY message.  But if the
        requestor is only\n   interested in specific binding updates, it MAY include
        an\n   OPTION_LQ_QUERY option along with a query-types defined in [RFC5007]\n
        \  and [RFC5460].\n   Other DHCPv6 options used in the LEASEQUERY message
        (as specified in\n   [RFC5460]) can also be used in the ACTIVELEASEQUERY message.\n"
      title: 6.2.1.  ACTIVELEASEQUERY
    - contents:
      - "6.2.2.  STARTTLS\n   The new message type (STARTTLS) is designed for establishment
        of a\n   TLS connection between a requestor and a DHCPv6 server.  The STARTTLS\n
        \  message SHOULD be sent without any options.  Any options received in\n
        \  a STARTTLS message SHOULD be ignored.\n   More details about this message
        are specified in Section 8.2.\n"
      title: 6.2.2.  STARTTLS
    - contents:
      - "6.2.3.  Response Messages\n   The LEASEQUERY-REPLY message is defined in
        [RFC5007].  The\n   LEASEQUERY-DATA and LEASEQUERY-DONE messages are defined
        in\n   [RFC5460].\n   In an Active Leasequery exchange, a single LEASEQUERY-REPLY
        message\n   is used to indicate the success or failure of a query and to carry\n
        \  data that do not change in the context of a single query and answer,\n
        \  such as the Server-ID and Client-ID options.  If a query is\n   successful,
        the DHCPv6 server MUST respond to it with exactly one\n   LEASEQUERY-REPLY
        message.  If the server is returning binding data,\n   the LEASEQUERY-REPLY
        also contains the first client's binding data in\n   an OPTION_CLIENT_DATA
        option.  Additional binding data is returned\n   using a LEASEQUERY-DATA message
        as explained in DHCPv6 Bulk\n   Leasequery [RFC5460].  In case of a query
        failure, a single\n   LEASEQUERY-REPLY message is returned without any binding
        data.\n"
      title: 6.2.3.  Response Messages
    title: 6.2.  Messages
  - contents:
    - "6.3.  Options\n   New options (OPTION_LQ_BASE_TIME, OPTION_LQ_START_TIME, and\n
      \  OPTION_LQ_END_TIME) are defined as an extension to DHCPv6 Bulk\n   Leasequery
      [RFC5460].  The reply messages for Active Leasequery use\n   these options along
      with the options defined in [RFC3315], [RFC5007],\n   and [RFC5460].\n"
    - contents:
      - "6.3.1.  OPTION_LQ_BASE_TIME\n   The OPTION_LQ_BASE_TIME option is the current
        time the message was\n   created to be sent by the DHCPv6 server to the requestor
        of the\n   Active or Bulk Leasequery if the requestor asked for the same in
        an\n   Active or Bulk Leasequery request.  This MUST be an absolute time\n
        \  (i.e., seconds since midnight January 1, 2000 UTC).  All of the other\n
        \  time-based options in the reply message are relative to this time,\n   including
        OPTION_CLT_TIME [RFC5007].  This time is in the context of\n   the DHCPv6
        server that placed this option in a message.\n   This is an unsigned integer
        in network byte order.\n   The code for this option is 100.\n       0                   1
        \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      OPTION_LQ_BASE_TIME      |          option-len           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                           base-time                           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \       option-code       OPTION_LQ_BASE_TIME (100)\n        option-len        4\n
        \       base-time         DHCPv6 Server Base Time\n"
      title: 6.3.1.  OPTION_LQ_BASE_TIME
    - contents:
      - "6.3.2.  OPTION_LQ_START_TIME\n   The OPTION_LQ_START_TIME option specifies
        a query start time to the\n   DHCPv6 server.  If specified, only bindings
        that have changed on or\n   after the OPTION_LQ_START_TIME should be included
        in the response to\n   the query.  This option MAY be used in Active or Bulk
        Leasequery\n   requests made to a DHCPv6 server.\n   The requestor MUST determine
        the OPTION_LQ_START_TIME using lease\n   information it has received from
        the DHCPv6 server.  This MUST be an\n   absolute time in the DHCPv6 server's
        context (see Section 8.5).\n   Typically (though this is not a requirement),
        the\n   OPTION_LQ_START_TIME option will contain the value most recently\n
        \  received in an OPTION_LQ_BASE_TIME option by the requestor, as this\n   will
        indicate the last successful communication with the DHCPv6\n   server.\n   This
        is an unsigned integer in network byte order.\n   The code for this option
        is 101.\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      OPTION_LQ_START_TIME     |          option-len           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                       query-start-time                        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \       option-code       OPTION_LQ_START_TIME (101)\n        option-len        4\n
        \       query-start-time  DHCPv6 Server Query Start Time\n"
      title: 6.3.2.  OPTION_LQ_START_TIME
    - contents:
      - "6.3.3.  OPTION_LQ_END_TIME\n   The OPTION_LQ_END_TIME option specifies a
        query end time to the\n   DHCPv6 server.  If specified, only bindings that
        have changed on or\n   before the OPTION_LQ_END_TIME should be included in
        the response to\n   the query.  This option MAY be used in a Bulk Leasequery
        request, but\n   it MUST NOT be used in an Active Leasequery request.\n   The
        requestor MUST determine the OPTION_LQ_END_TIME based on lease\n   information
        it has received from the DHCPv6 server.  This MUST be an\n   absolute time
        in the context of the DHCPv6 server.\n   In the absence of information to
        the contrary, the requestor SHOULD\n   assume that the time context of the
        DHCPv6 server is identical to the\n   time context of the requestor (see Section
        8.5).\n   This is an unsigned integer in network byte order.\n   The code
        for this option is 102.\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      OPTION_LQ_END_TIME       |          option-len           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                        query-end-time                         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \       option-code       OPTION_LQ_END_TIME (102)\n        option-len        4\n
        \       query-end-time    DHCPv6 Server Query End Time\n"
      title: 6.3.3.  OPTION_LQ_END_TIME
    title: 6.3.  Options
  - contents:
    - "6.4.  Connection and Transmission Parameters\n   Active Leasequery uses the
      same port configuration as DHCPv6 Bulk\n   Leasequery [RFC5460].  It also uses
      the other transmission parameters\n   (BULK_LQ_DATA_TIMEOUT and BULK_LQ_MAX_CONNS)
      as defined in [RFC5460].\n   This section presents a table of values used to
      control Active\n   Leasequery behavior, including recommended defaults.  Implementations\n
      \  MAY make these values configurable.  However, configuring too-small\n   timeout
      values may lead to harmful behavior both to this application\n   and to other
      traffic in the network.  As a result, timeout values\n   smaller than the default
      values SHOULD NOT be used.\n   +------------------------+----------+-------------------------------+\n
      \  | Parameter              | Default  | Description                   |\n   +------------------------+----------+-------------------------------+\n
      \  | ACTIVE_LQ_RCV_TIMEOUT  | 120 secs | Active Leasequery receive     |\n   |
      \                       |          | timeout                       |\n   | ACTIVE_LQ_SEND_TIMEOUT
      | 120 secs | Active Leasequery send        |\n   |                        |
      \         | timeout                       |\n   | ACTIVE_LQ_IDLE_TIMEOUT | 60
      secs  | Active Leasequery idle        |\n   |                        |          |
      timeout                       |\n   +------------------------+----------+-------------------------------+\n"
    title: 6.4.  Connection and Transmission Parameters
  title: 6.  Message and Option Definitions
- contents:
  - "7.  Information Communicated by Active Leasequery\n   While the information communicated
    by a DHCPv6 Bulk Leasequery\n   [RFC5460] is taken directly from the DHCPv6 server's
    lease state\n   database, the information communicated by an Active Leasequery
    is\n   real-time information.  As such, it is the information that is\n   currently
    associated with a particular binding in the DHCPv6 server's\n   lease state database.\n
    \  This is of significance, because if the Active Leasequery requestor\n   runs
    slowly or the requestor disconnects from the DHCPv6 server and\n   then reconnects
    with an OPTION_LQ_START_TIME option (signaling a\n   catch-up operation), the
    information communicated to the Active\n   Leasequery requestor is only the most
    current information from the\n   DHCPv6 server's lease state database.\n   The
    requestor of an Active Leasequery MUST NOT assume that every\n   lease state change
    is communicated across an Active Leasequery\n   connection.  Even if the Active
    Leasequery requestor remains\n   connected, the DHCPv6 server is only required
    to transmit information\n   about a binding that is current when the message is
    created and\n   handed off to the TCP stack to send to the requestor.\n   If the
    TCP connection blocks and the DHCPv6 server is waiting to send\n   information
    down the connection, when the connection becomes\n   available to be written,
    the DHCPv6 server MAY create the message to\n   send at this time.  The current
    state of the binding will be sent,\n   and any transition in state or other information
    that occurred while\n   the TCP connection was blocked will be lost.\n   Thus,
    the Active Leasequery protocol does not allow the requestor to\n   build a complete
    history of every activity on every lease.  An\n   effective history of the important
    state changes for a lease can be\n   created if the parameters of the DHCPv6 server
    are tuned to take into\n   account the requirements of an Active Leasequery requestor.
    \ For\n   instance, the period after the expiration or release of a binding\n
    \  could be configured long enough (say several minutes, well more than\n   the
    receive timeout), so that an Active Leasequery requestor would be\n   less likely
    to miss any changes in the binding.\n"
  title: 7.  Information Communicated by Active Leasequery
- contents:
  - '8.  Requestor Behavior

    '
  - contents:
    - "8.1.  General Processing\n   A requestor attempts to establish a TCP connection
      to a DHCPv6 server\n   in order to initiate an Active Leasequery exchange.  If
      the attempt\n   fails, the requestor MAY retry.  Retries should not be more
      frequent\n   than one every ACTIVE_LQ_IDLE_TIMEOUT.  See Section 6.4.\n   If
      an Active Leasequery is terminated prematurely by a LEASEQUERY-\n   DONE with
      a DHCPv6 status code (carried in an OPTION_STATUS_CODE\n   option) of QueryTerminated
      or by the failure of the connection over\n   which it was being submitted, the
      requestor MAY retry the request\n   after the creation of a new connection.
      \ Retries should not be more\n   frequent than one every ACTIVE_LQ_IDLE_TIMEOUT.
      \ See Section 6.4.\n   Messages from the DHCPv6 server come as multiple responses
      to a\n   single ACTIVELEASEQUERY message.  Thus, each ACTIVELEASEQUERY request\n
      \  MUST have a transaction-id unique on the connection on which it is\n   sent,
      and all of the messages that come as a response to it contain\n   the same transaction-id
      as the request.\n"
    title: 8.1.  General Processing
  - contents:
    - "8.2.  Initiating a Connection\n   A requestor SHOULD be able to operate in
      either insecure or secure\n   mode.  This MAY be a feature that is administratively
      controlled.\n   When operating in insecure mode, the requestor SHOULD proceed
      to send\n   an ACTIVELEASEQUERY message after the establishment of a TCP\n   connection.\n
      \  When operating in secure mode, the requestor MUST attempt to\n   negotiate
      a TLS [RFC5246] connection over the TCP connection.  If\n   this negotiation
      fails, the requestor MUST close the TCP connection.\n   The recommendations
      in [RFC7525] SHOULD be followed when negotiating\n   this connection.\n   A
      requestor requests the establishment of a TLS connection by sending\n   the
      STARTTLS message to the DHCPv6 server as the first message over\n   the TCP
      connection.  This message indicates to the DHCPv6 server that\n   a TLS connection
      over this TCP connection is desired.  There are four\n   possibilities after
      the requestor sends the STARTTLS message to the\n   DHCPv6 server:\n   1.  No
      response from the DHCPv6 server.\n   2.  The DHCPv6 server closes the TCP connection
      after it receives the\n       STARTTLS message.\n   3.  The DHCPv6 server responds
      with a REPLY [RFC3315] message with a\n       DHCPv6 status code of TLSConnectionRefused.\n
      \  4.  The DHCPv6 server responds with a REPLY [RFC3315] message without\n       a
      DHCPv6 status code, indicating success.\n   In any of the first three possibilities,
      the DHCPv6 server can be\n   assumed to not support TLS.  In this case, the
      requestor MUST close\n   the TCP connection.\n   In the final possibility, where
      the DHCPv6 server has responded with\n   a REPLY message without a DHCPv6 status
      code in response to the\n   requestor's STARTTLS message, the requestor SHOULD
      initiate the\n   exchange of the messages involved in a TLS handshake [RFC5246].\n
      \  During the TLS handshake, the requestor MUST validate the DHCPv6\n   server's
      digital certificate.\n   If the handshake exchange yields a functioning TLS
      connection, then\n   the requestor SHOULD transmit an ACTIVELEASEQUERY request
      over that\n   TLS connection and use that TLS connection for all further\n   interactions
      in which it engages with the DHCPv6 server over this TCP\n   connection.\n   If
      the handshake exchange does not yield a functioning TLS\n   connection, then
      the requestor MUST close the TCP connection.\n"
    title: 8.2.  Initiating a Connection
  - contents:
    - "8.3.  Forming an Active Leasequery\n   Active Leasequery is designed to create
      a long-lived connection\n   between the requestor and the DHCPv6 server processing
      the active\n   query.  The DHCPv6 server SHOULD send binding information back
      across\n   this connection with minimal delay after it learns of the binding\n
      \  information.  It learns about bindings either because it makes the\n   bindings
      itself or because it has received information about a\n   binding from another
      server.\n   An important capability of Active Leasequery is the ability of the\n
      \  requestor to specify that some recent data be sent immediately to the\n   requestor
      in parallel with the transmission of the ongoing binding\n   information in
      more or less real time.  This capability is used in\n   order to allow an Active
      Leasequery requestor to recover missed\n   information in the event that it
      temporarily loses connectivity with\n   the DHCPv6 server processing a previous
      Active Leasequery.\n   This capability is enabled by the transmission of an\n
      \  OPTION_LQ_BASE_TIME option with each Leasequery reply sent as the\n   result
      of a previous Active Leasequery.  The requestor SHOULD keep\n   track of the
      highest base-time received from a particular DHCPv6\n   server over an Active
      Leasequery connection, and in the event that\n   the requestor finds it necessary
      (for whatever reason) to reestablish\n   an Active Leasequery connection to
      that DHCPv6 server, the requestor\n   SHOULD place this highest base-time value
      into an\n   OPTION_LQ_START_TIME option in the new Active Leasequery request.\n
      \  Note that until all of the recent data (catch-up data) has been\n   received,
      the requestor MUST NOT keep track of the base-time\n   (OPTION_LQ_BASE_TIME)
      received in Leasequery reply messages to use\n   later in a subsequent Active
      Leasequery request.\n   If the requestor doesn't wish to request an update of
      information\n   missed when it was not connected to the DHCPv6 server, then
      it SHOULD\n   NOT include the OPTION_LQ_START_TIME option in the Active Leasequery\n
      \  request.\n   If the TCP connection becomes blocked or stops being writable
      while\n   the requestor is sending its query, the requestor SHOULD terminate\n
      \  the connection after BULK_LQ_DATA_TIMEOUT.  We make this\n   recommendation
      to allow requestors to control the period of time they\n   are willing to wait
      before abandoning a connection, independent of\n   notifications from the TCP
      implementations they may be using.\n"
    title: 8.3.  Forming an Active Leasequery
  - contents:
    - "8.4.  Processing Active Replies\n   The requestor attempts to read a DHCPv6
      LEASEQUERY-REPLY message from\n   the TCP connection.  If the stream of replies
      becomes blocked, the\n   requestor SHOULD terminate the connection after ACTIVE_LQ_RCV_TIMEOUT\n
      \  and MAY begin retry processing if configured to do so.\n   The requestor
      examines the LEASEQUERY-REPLY message and determines\n   how to proceed.  Message
      validation rules are specified in DHCPv6\n   Leasequery [RFC5007] and DHCPv6
      Bulk Leasequery [RFC5460].  If the\n   reply contains a DHCPv6 status code (carried
      in an OPTION_STATUS_CODE\n   option), the requestor should follow the recommendations
      in\n   [RFC5007].\n   Note that the connection resulting from accepting an Active\n
      \  Leasequery request may be long-lived and may not have data\n   transferring
      continuously during its lifetime.  Therefore, the DHCPv6\n   server SHOULD send
      a LEASEQUERY-DATA message without binding data\n   (OPTION_CLIENT_DATA) every
      ACTIVE_LQ_IDLE_TIMEOUT seconds (default\n   60) in order for the requestor to
      know that the connection remains\n   alive.  This approach is followed only
      when connection is idle (i.e.,\n   server has no binding data to send).  During
      a normal exchange of\n   binding data, receiving a LEASEQUERY-DATA message signifies
      that\n   connection is active.  Note that the default for\n   ACTIVE_LQ_RCV_TIMEOUT
      is 120 seconds, twice the value of the\n   ACTIVE_LQ_IDLE_TIMEOUT's default
      of 60 seconds, which drives the\n   DHCPv6 server to send messages.  Thus, ACTIVE_LQ_RCV_TIMEOUT
      controls\n   how sensitive the requestor is to delays by the DHCPv6 server in\n
      \  sending updates or LEASEQUERY-DATA messages.\n   A single Active Leasequery
      can and usually will result in a large\n   number of replies.  The requestor
      MUST be prepared to receive more\n   than one reply with transaction-ids matching
      a single\n   ACTIVELEASEQUERY message from a single DHCPv6 server.\n   An Active
      Leasequery has two regimes: during the catch-up phase (if\n   any) and after
      any catch-up phase.  If the Active Leasequery was\n   requested with an OPTION_LQ_START_TIME
      option, the Active Leasequery\n   starts out in the catch-up phase.  See Section
      8.4.1 for information\n   on processing during the catch-up phase, as well as
      how to determine\n   when the catch-up phase is complete.\n   The updates sent
      by the DHCPv6 server during the catch-up phase are\n   not in the order that
      the lease state data was updated.  Therefore,\n   the OPTION_LQ_BASE_TIME option
      from messages during this phase MUST\n   NOT be saved and used to compute the
      subsequent ACTIVELEASEQUERY\n   message's OPTION_LQ_START_TIME option.\n   After
      the catch-up phase, or during the entire series of messages\n   received as
      the response to an Active Leasequery request with no\n   OPTION_LQ_START_TIME
      (and therefore no catch-up phase), the\n   OPTION_LQ_BASE_TIME option of the
      most recent message SHOULD be saved\n   as a record of the most recent time
      that data was received.  This\n   base-time (in the context of the DHCPv6 server)
      can be used in a\n   subsequent Active Leasequery message's OPTION_LQ_START_TIME
      after a\n   loss of the Active Leasequery connection.\n   The LEASEQUERY-DONE
      message MAY unilaterally terminate a successful\n   Active Leasequery request
      that is currently in progress in the event\n   that the DHCPv6 server determines
      that it cannot continue processing\n   an Active Leasequery request.  For example,
      when a server is\n   requested to shut down, it SHOULD send a LEASEQUERY-DONE
      message with\n   a DHCPv6 status code of QueryTerminated and include the\n   OPTION_LQ_BASE_TIME
      option in the message.  This MUST be the last\n   message on that connection,
      and once the message has been\n   transmitted, the server MUST close the connection.\n
      \  After receiving LEASEQUERY-DONE with a QueryTerminated status from a\n   server,
      the requestor MAY close the TCP connection to that server.\n"
    - contents:
      - "8.4.1.  Processing Replies from a Request Containing an\n        OPTION_LQ_START_TIME\n
        \  If the Active Leasequery was requested with an OPTION_LQ_START_TIME\n   option,
        the DHCPv6 server will attempt to send information about all\n   bindings
        that changed since the time specified in the\n   OPTION_LQ_START_TIME.  This
        is the catch-up phase of the Active\n   Leasequery processing.  The DHCPv6
        server MAY also send information\n   about real-time binding updates over
        the same connection.  Thus, the\n   catch-up phase can run in parallel with
        the normal updates generated\n   by the Active Leasequery request.\n   A DHCPv6
        server MAY keep only a limited amount of time-ordered\n   information available
        to respond to an Active Leasequery request\n   containing an OPTION_LQ_START_TIME
        option.  Thus, it is possible that\n   the time specified in the OPTION_LQ_START_TIME
        option represents a\n   time not covered by the time-ordered information kept
        by the DHCPv6\n   server.  In such case, when there is not enough data saved
        in the\n   DHCPv6 server to satisfy the request specified by the\n   OPTION_LQ_START_TIME
        option, the DHCPv6 server will reply immediately\n   with a LEASEQUERY-REPLY
        message with a DHCPv6 status code of\n   DataMissing with a base-time option
        equal to the server's current\n   time.  This will signal the end of the catch-up
        phase, and the only\n   updates that will subsequently be received on this
        connection are the\n   real-time updates from the Active Leasequery request.\n
        \  If there is enough data saved to satisfy the request, then\n   LEASEQUERY-REPLY
        (with OPTION_STATUS_CODE of Success or reply without\n   the OPTION_STATUS_CODE
        option) and LEASEQUERY-DATA messages will\n   begin to arrive from the DHCPv6
        server.  Some of these messages will\n   be related to the OPTION_LQ_START_TIME
        request and be part of the\n   catch-up phase.  Some of these messages will
        be real-time updates of\n   binding changes taking place in the DHCPv6 server.
        \ In general, there\n   is no way to determine the source of each message.\n
        \  The updates sent by the DHCPv6 server during the catch-up phase are\n   not
        in the order that the binding data was updated.  Therefore, until\n   the
        catch-up phase is complete, the latest base-time value received\n   from a
        DHCPv6 server processing an Active Leasequery request cannot\n   be reset
        from the incoming messages (and used in a subsequent Active\n   Leasequery's
        query-start-time option), because to do so would\n   compromise the ability
        to recover lost information if the Active\n   Leasequery were to terminate
        prior to the completion of the catch-up\n   phase.\n   The requestor will
        know that the catch-up phase is complete when the\n   DHCPv6 server transmits
        a LEASEQUERY-DATA message with the DHCPv6\n   status code of CatchUpComplete
        (or a LEASEQUERY-REPLY message with a\n   DHCPv6 status code of DataMissing,
        as discussed above).  Once this\n   message is transmitted, all additional
        LEASEQUERY-DATA messages will\n   relate to real-time (\"new\") binding changes
        in the DHCPv6 server.\n   As discussed in Section 8.4, the requestor SHOULD
        keep track of the\n   latest base-time option value received over a particular
        connection,\n   to be used in a subsequent Active Leasequery request, but
        only if the\n   catch-up phase is complete.  Prior to the completion of the
        catch-up\n   phase, if the connection should go away or if the requestor receives\n
        \  a LEASEQUERY-DONE message, then when it reconnects, it MUST use the\n   base-time
        value from the previous connection and not any base-time\n   value received
        from the recently closed connection.\n   In the event that there was enough
        data available to the DHCPv6\n   server to begin to satisfy the request implied
        by the\n   OPTION_LQ_START_TIME option but during the processing of that data,\n
        \  the server found that it was unable to continue (during transmission,\n
        \  the aging algorithm causes [some of] the saved data to become\n   unavailable),
        the DHCPv6 server will terminate the catch-up phase of\n   processing immediately
        by sending a LEASEQUERY-DATA message with a\n   DHCPv6 status code of DataMissing
        and with a base-time option of the\n   current time.\n   The requestor MUST
        NOT assume that every individual state change of\n   every binding during
        the period from the time specified in the\n   OPTION_LQ_START_TIME and the
        present is replicated in an Active\n   Leasequery reply message.  The requestor
        MAY assume that at least one\n   Active Leasequery reply message will exist
        for every binding that had\n   one or more changes of state during the period
        specified by the\n   OPTION_LQ_START_TIME and the current time.  The last
        message for each\n   binding will contain the state at the current time, and
        there can be\n   one or more messages concerning a single binding during the
        catch-up\n   phase of processing.\n   Bindings can change multiple times while
        the requestor is not\n   connected (that is, during the time from the OPTION_LQ_START_TIME
        to\n   the present).  The requestor will only receive information about the\n
        \  current state of the binding, not information about each state change\n
        \  that occurred during the period from the OPTION_LQ_START_TIME to the\n
        \  present.\n   If the LEASEQUERY-REPLY or LEASEQUERY-DATA message containing
        a\n   DHCPv6 status code of DataMissing is received and the requestor is\n
        \  interested in keeping its database up to date with respect to the\n   current
        state of bindings in the DHCPv6 server, then the requestor\n   SHOULD issue
        a Bulk Leasequery request to recover the information\n   missing from its
        database.  This Bulk Leasequery request SHOULD\n   include an OPTION_LQ_START_TIME
        option with the same value as the\n   OPTION_LQ_START_TIME option previously
        included in the Active\n   Leasequery responses from the DHCPv6 server and
        an OPTION_LQ_END_TIME\n   option equal to the OPTION_LQ_BASE_TIME option returned
        by the DHCPv6\n   server in the LEASEQUERY-REPLY or LEASEQUERY-DATA message
        with the\n   DHCPv6 status code of DataMissing.\n   Typically, the requestor
        would have one connection open to a DHCPv6\n   server for an Active Leasequery
        request and possibly one additional\n   connection open for a Bulk Leasequery
        request to the same DHCPv6\n   server to fill in the data that might have
        been missed prior to the\n   initiation of the Active Leasequery.  The Bulk
        Leasequery connection\n   would typically run to completion and be closed,
        leaving one Active\n   Leasequery connection open to a single DHCPv6 server.\n"
      title: 8.4.1.  Processing Replies from a Request Containing an
    title: 8.4.  Processing Active Replies
  - contents:
    - "8.5.  Processing Time Values in Leasequery Messages\n   Active or Bulk Leasequery
      requests can be made to a DHCPv6 server\n   whose absolute time may not be synchronized
      with the local time of\n   the requestor.  Thus, there are at least two time
      contexts in even\n   the simplest Active or Bulk Leasequery response.\n   If
      the requestor of an Active or Bulk Leasequery is saving the data\n   returned
      in some form, it has a requirement to store a variety of\n   time values; some
      of these will be time in the context of the\n   requestor, and some will be
      time in the context of the DHCPv6 server.\n   When receiving an Active or Bulk
      Leasequery reply message from the\n   DHCPv6 server, the message will contain
      an OPTION_LQ_BASE_TIME\n   option.  The time contained in this OPTION_LQ_BASE_TIME
      option is in\n   the context of the DHCPv6 server.  As such, it is an ideal
      time to\n   save and use as input to an Active or Bulk Leasequery message in
      the\n   OPTION_LQ_START_TIME or OPTION_LQ_END_TIME options should the\n   requestor
      need to ever issue an Active or Bulk Leasequery message\n   using these options
      as part of a later query, since these options\n   require a time in the context
      of the DHCPv6 server.\n   In addition to saving the OPTION_LQ_BASE_TIME for
      possible future use\n   in the OPTION_LQ_START_TIME or OPTION_LQ_END_TIME options,
      the\n   OPTION_LQ_BASE_TIME option is used as part of the conversion of the\n
      \  other times in the Leasequery message to values that are meaningful\n   in
      the context of the requestor.\n   In systems whose clocks are synchronized,
      perhaps using the Network\n   Time Protocol (NTP), the clock skew will usually
      be zero, which is\n   not only acceptable, but desired.\n"
    title: 8.5.  Processing Time Values in Leasequery Messages
  - contents:
    - "8.6.  Examples\n   These examples illustrate what a series of queries and responses\n
      \  might look like.  These are only examples -- there is no requirement\n   that
      these sequences must be followed.\n"
    - contents:
      - "8.6.1.  Query Failure\n   This example illustrates the message flows in case
        the DHCPv6 server\n   identifies that it cannot accept and/or process an Active
        Leasequery\n   request from the requestor.  This could be because of various
        reasons\n   (i.e., UnknownQueryType, MalformedQuery, NotConfigured, NotAllowed,\n
        \  and NotSupported).\n      Client                          Server\n      ------
        \                         ------\n      ACTIVELEASEQUERY xid 1  ----->\n                              <-----
        \ LEASEQUERY-REPLY xid 1 (w/error)\n"
      title: 8.6.1.  Query Failure
    - contents:
      - "8.6.2.  Data Missing on Server\n   This example illustrates the message flows
        in case the DHCPv6 server\n   identifies that it does not have enough data
        saved to satisfy the\n   request specified by the OPTION_LQ_START_TIME option.\n
        \  In this case, the DHCPv6 server will reply immediately with a\n   LEASEQUERY-REPLY
        message with a DHCPv6 status code of DataMissing\n   with a base-time option
        equal to the server's current time.  This\n   will signal the end of the catch-up
        phase, and the only updates that\n   will subsequently be received on this
        connection are the real-time\n   updates from the Active Leasequery request.\n
        \     Client                          Server\n      ------                          ------\n
        \     ACTIVELEASEQUERY xid 2  ----->\n                              <-----
        \ LEASEQUERY-REPLY xid 2 (w/error)\n                              <-----  LEASEQUERY-DATA
        xid 2\n                              <-----  LEASEQUERY-DATA xid 2\n                              <-----
        \ LEASEQUERY-DATA xid 2\n"
      title: 8.6.2.  Data Missing on Server
    - contents:
      - "8.6.3.  Successful Query\n   This example illustrates the message flows in
        case of successful\n   query processing by the DHCPv6 server.\n   In this
        case, the DHCPv6 server will reply immediately with a\n   LEASEQUERY-REPLY
        message (with OPTION_STATUS_CODE of Success or reply\n   without OPTION_STATUS_CODE
        option), followed by binding data in\n   LEASEQUERY-DATA messages.  In case
        the DHCPv6 server wants to abort\n   an in-process request and terminate the
        connection due to some\n   reason, it sends LEASEQUERY-DONE with an error
        code present in the\n   OPTION_STATUS_CODE option.\n      Client                          Server\n
        \     ------                          ------\n      ACTIVELEASEQUERY xid 3
        \ ----->\n                              <-----  LEASEQUERY-REPLY xid 3\n                              <-----
        \ LEASEQUERY-DATA xid 3\n                              <-----  LEASEQUERY-DATA
        xid 3\n                              <-----  LEASEQUERY-DATA xid 3\n                              <-----
        \ LEASEQUERY-DATA xid 3\n                              <-----  LEASEQUERY-DONE
        xid 3 (w/error)\n"
      title: 8.6.3.  Successful Query
    title: 8.6.  Examples
  - contents:
    - "8.7.  Closing Connections\n   The requestor or DHCPv6 Leasequery server MAY
      close its end of the\n   TCP connection at any time.  The requestor MAY choose
      to retain the\n   connection if it intends to issue additional queries.  Note
      that this\n   requestor behavior does not guarantee that the connection will
      be\n   available for additional queries: the server might decide to close\n
      \  the connection based on its own configuration.\n"
    title: 8.7.  Closing Connections
  title: 8.  Requestor Behavior
- contents:
  - "9.  Server Behavior\n   A DHCPv6 server that supports Active Leasequery MUST
    support DHCPv6\n   Bulk Leasequery [RFC5460] along with the updates mentioned
    in this\n   document.\n"
  - contents:
    - "9.1.  Accepting Connections\n   DHCPv6 servers that implement DHCPv6 Active
      Leasequery listen for\n   incoming TCP connections.  The approach used in accepting
      the\n   requestor's connection is the same as specified in DHCPv6 Bulk\n   Leasequery
      [RFC5460], with the exception that support for Active\n   Leasequery MUST NOT
      be enabled by default and MUST require an\n   explicit configuration step to
      be performed before it will operate.\n   DHCPv6 servers SHOULD be able to operate
      in either insecure or secure\n   mode.  This MAY be a mode that is administratively
      controlled, where\n   the server will require a TLS connection to operate or
      will only\n   operate without a TLS connection.  In either case, operation in\n
      \  insecure mode MUST NOT be the default, even if operation in secure\n   mode
      is not supported.  Operation in insecure mode MUST always\n   require an explicit
      configuration step, separate from the\n   configuration step required to enable
      support for Active Leasequery.\n   When operating in insecure mode, the DHCPv6
      server simply waits for\n   the requestor to send the Active Leasequery request
      after the\n   establishment of a TCP connection.  If it receives a STARTTLS\n
      \  message, it MUST respond with a REPLY [RFC3315] message with a DHCPv6\n   status
      code of TLSConnectionRefused.\n   When operating in secure mode, DHCPv6 servers
      MUST support TLS\n   [RFC5246] to protect the integrity and privacy of the data\n
      \  transmitted over the TCP connection.  When operating in secure mode,\n   DHCPv6
      servers MUST be configurable with regard to which requestors\n   they will communicate.
      \ The certificate presented by a requestor when\n   initiating the TLS connection
      is used to distinguish between\n   acceptable and unacceptable requestors.\n
      \  When operating in secure mode, the DHCPv6 server MUST begin to\n   negotiate
      a TLS connection with a requestor who asks for one and MUST\n   close the TCP
      connections that are not secured with TLS or for which\n   the requestor's certificate
      is deemed unacceptable.  The\n   recommendations in [RFC7525] SHOULD be followed
      when negotiating a\n   TLS connection.\n   A requestor will request a TLS connection
      by sending a STARTTLS as\n   the first message over a newly created TCP connection.
      \ If the DHCPv6\n   server supports TLS connections and has not been configured
      to not\n   allow them on this link, the DHCPv6 server MUST respond to this\n
      \  STARTTLS message by sending a REPLY [RFC3315] message without a\n   DHCPv6
      status code back to the requestor.  This indicates to the\n   requestor that
      the DHCPv6 server will support the negotiation of a\n   TLS connection over
      this existing TCP connection.\n   If for some reason the DHCPv6 server cannot
      support a TLS connection\n   or has been configured to not support a TLS connection,
      then it\n   SHOULD send a REPLY message with a DHCPv6 status code of\n   TLSConnectionRefused
      back to the requestor.\n   In the event that the DHCPv6 server sends a REPLY
      message without a\n   DHCPv6 status code option included (which indicates success),
      the\n   requestor is supposed to initiate a TLS handshake [RFC5246] (see\n   Section
      8.2).  During the TLS handshake, the DHCPv6 server MUST\n   validate the requestor's
      digital certificate.  In addition, the\n   digital certificate presented by
      the requestor is used to decide if\n   this requestor is allowed to perform
      an Active Leasequery.  If this\n   requestor's certificate is deemed unacceptable,
      the server MUST abort\n   the creation of the TLS connection.\n   All TLS connections
      established between a requestor and a DHCPv6\n   server for the purposes of
      supporting Active Leasequery MUST be\n   mutually authenticated.\n   If the
      TLS handshake is not successful in creating a TLS connection,\n   the server
      MUST close the TCP connection.\n"
    title: 9.1.  Accepting Connections
  - contents:
    - "9.2.  Rejecting Connections\n   Servers that do not implement DHCPv6 Active
      and Bulk Leasequery\n   SHOULD NOT listen for incoming TCP connections for these
      requests.\n   If the DHCPv6 server supporting Bulk Leasequery and not Active\n
      \  Leasequery receives an Active Leasequery request, it SHOULD send a\n   LEASEQUERY-REPLY
      with a DHCPv6 status code of NotSupported.  It\n   SHOULD close the TCP connection
      after this error is signaled.\n"
    title: 9.2.  Rejecting Connections
  - contents:
    - "9.3.  Replying to an Active Leasequery\n   The DHCPv6 Leasequery [RFC5007]
      specification describes the initial\n   construction of LEASEQUERY-REPLY messages.
      \ Use of the LEASEQUERY-\n   REPLY and LEASEQUERY-DATA messages to carry multiple
      bindings is\n   described in DHCPv6 Bulk Leasequery [RFC5460].  Message transmission\n
      \  and framing for TCP is described in Section 6.1.\n   If the connection becomes
      blocked while the server is attempting to\n   send reply messages, the server
      SHOULD terminate the TCP connection\n   after ACTIVE_LQ_SEND_TIMEOUT.  This
      timeout governs for how long the\n   DHCPv6 server is prepared to wait for the
      requestor to read and\n   process enough information to unblock the TCP connection.
      \ The\n   default is two minutes, which means that if more than two minutes\n
      \  goes by without the requestor reading enough information to unblock\n   the
      TCP connection, the DHCPv6 server SHOULD close the TCP\n   connection.\n   If
      the DHCPv6 server encounters an error during the initial\n   processing of the
      ACTIVELEASEQUERY message, it SHOULD send a\n   LEASEQUERY-REPLY message containing
      an error code of some kind in a\n   DHCPv6 status code option.  It SHOULD close
      the connection after this\n   error is signaled.\n   If the DHCPv6 server encounters
      an error during later processing of\n   the ACTIVELEASEQUERY message, it SHOULD
      send a LEASEQUERY-DONE\n   containing an error code of some kind in a DHCPv6
      status code option.\n   It SHOULD close the connection after this error is signaled.\n
      \  If the server finds any bindings satisfying a query, it SHOULD send\n   each
      binding's data in a reply message.  The first reply message is a\n   LEASEQUERY-REPLY.
      \ The binding data is carried in an\n   OPTION_CLIENT_DATA option, as specified
      in [RFC5007].  The server\n   SHOULD send subsequent bindings in LEASEQUERY-DATA
      messages, which\n   can avoid redundant data (such as the requestor's Client-ID).\n
      \  Every reply to an Active Leasequery request MUST contain the\n   information
      specified in replies to a DHCPv6 Bulk Leasequery request\n   [RFC5460], with
      the exception that a server implementing Active\n   Leasequery SHOULD be able
      to be configured to prevent specific data\n   items from being sent to the requestor
      even if these data items were\n   requested in the OPTION_ORO option.\n   Some
      servers can be configured to respond to a DHCPv6 Leasequery\n   [RFC5007] and
      DHCPv6 Bulk Leasequery [RFC5460] for an IPv6 binding\n   that is reserved in
      such a way that it appears that the IPv6 binding\n   is leased to the DHCP client
      for which it is reserved.  These servers\n   SHOULD also respond to an Active
      Leasequery request with the same\n   information as they would to a Bulk Leasequery
      request when they\n   first determine that the IPv6 binding is reserved to a
      DHCP client.\n   If an Active Leasequery or Bulk Leasequery request contains
      the\n   OPTION_LQ_BASE_TIME option code present in OPTION_ORO, the DHCPv6\n
      \  server MUST include the OPTION_LQ_BASE_TIME option in every reply for\n   this
      request.  The value for the base-time option is the current\n   absolute time
      in the DHCPv6 server's context.\n   If an Active Leasequery request contains
      an OPTION_LQ_START_TIME\n   option, it indicates that the requestor would like
      the DHCPv6 server\n   to send it not only messages that correspond to DHCPv6
      binding\n   activity that occurs subsequent to the receipt of the Active\n   Leasequery
      request, but also messages that correspond to DHCPv6\n   binding activity that
      occurred prior to the Active Leasequery\n   request.\n   If the OPTION_LQ_END_TIME
      option appears in an Active Leasequery\n   request, the DHCPv6 server SHOULD
      send a LEASEQUERY-REPLY message\n   with a DHCPv6 status code of MalformedQuery
      and terminate the\n   connection.\n   In order to implement a meaningful response
      to this query, the DHCPv6\n   server MAY keep track of the binding activity
      and associate changes\n   with particular base-time values from the messages.
      \ Then, when\n   requested to do so by an Active Leasequery request containing
      a\n   OPTION_LQ_START_TIME option, the DHCPv6 server can respond with\n   replies
      for all binding activity occurring on that\n   OPTION_LQ_START_TIME or later
      times.\n   These replies based on the OPTION_LQ_START_TIME MAY be interleaved\n
      \  with the messages generated due to current binding activity.\n   Once the
      transmission of the DHCPv6 Leasequery messages associated\n   with the OPTION_LQ_START_TIME
      option are complete, a LEASEQUERY-DATA\n   message MUST be sent with a DHCPv6
      status code value of\n   CatchUpComplete.\n   The DHCPv6 server SHOULD, but
      is not required to, keep track of a\n   limited amount of previous binding activity.
      \ The DHCPv6 server MAY\n   choose to only do this in the event that it has
      received at least one\n   Active Leasequery request in the past, as to do so
      will almost\n   certainly entail some utilization of resources that would be
      wasted\n   if there are no Active Leasequery requestors for this DHCPv6 server.\n
      \  The DHCPv6 server SHOULD make the amount of previous binding activity\n   it
      retains configurable.  There is no requirement on the DHCPv6\n   server to retain
      this information over a server restart (or even to\n   retain such information
      at all).\n   Unless there is an error or some requirement to cease processing
      a\n   Active Leasequery request yielding a LEASEQUERY-DONE message, such as\n
      \  a server shutdown, there will be no LEASEQUERY-DONE message at the\n   conclusion
      of the Active Leasequery processing because that\n   processing will not conclude
      but will continue until either the\n   requestor or the server closes the connection.\n"
    title: 9.3.  Replying to an Active Leasequery
  - contents:
    - "9.4.  Multiple or Parallel Queries\n   Every Active Leasequery request MUST
      be made on a single TCP\n   connection where there is no other request active
      at the time the\n   request is made.\n   Typically, a requestor of an Active
      Leasequery would not need to send\n   a second Active Leasequery while the first
      is still active.  However,\n   sending an Active Leasequery and a Bulk Leasequery
      in parallel would\n   be possible and reasonable.  In case of parallel Active
      and Bulk\n   Leasequeries, the requestor MUST use different TCP connections.\n
      \  This MAY be a feature that is administratively controlled.  Servers\n   that
      are able to process queries in parallel SHOULD offer\n   configuration that
      limits the number of simultaneous queries\n   permitted from any one requestor,
      in order to control resource use if\n   there are multiple requestors seeking
      service.\n"
    title: 9.4.  Multiple or Parallel Queries
  - contents:
    - "9.5.  Closing Connections\n   The server MUST close its end of the TCP connection
      if it encounters\n   an error sending data on the connection.  The server MUST
      close its\n   end of the TCP connection if it finds that it has to abort an
      in-\n   process request.  A server aborting an in-process request SHOULD\n   attempt
      to signal that to its requestors by using the QueryTerminated\n   status code
      in the DHCPv6 status code option in a LEASEQUERY-DONE\n   message.  If the server
      detects that the requestor end has been\n   closed, the server MUST close its
      end of the connection.\n   The server SHOULD limit the number of connections
      it maintains and\n   SHOULD close idle connections to enforce the limit.\n"
    title: 9.5.  Closing Connections
  title: 9.  Server Behavior
- contents:
  - "10.  Security Considerations\n   The Security Considerations section of [RFC3315]
    details the general\n   threats to DHCPv6.  The DHCPv6 Leasequery specification
    [RFC5007]\n   describes recommendations for the Leasequery protocol, especially\n
    \  with regard to relayed Leasequery messages, mitigation of packet-\n   flooding
    denial-of-service (DoS) attacks, restriction to trusted\n   requestors, and use
    of IPsec [RFC4301].\n   The use of TCP introduces some additional concerns.  Attacks
    that\n   attempt to exhaust the DHCPv6 server's available TCP connection\n   resources
    can compromise the ability of legitimate requestors to\n   receive service.  Malicious
    requestors who succeed in establishing\n   connections but who then send invalid
    queries, partial queries, or no\n   queries at all can also exhaust a server's
    pool of available\n   connections.\n   When operating in secure mode, TLS [RFC5246]
    is used to secure the\n   connection.  The recommendations in [RFC7525] SHOULD
    be followed when\n   negotiating a TLS connection.\n   Servers SHOULD offer configuration
    parameters to limit the sources of\n   incoming connections through validation
    and use of the digital\n   certificates presented to create a TLS connection.
    \ They SHOULD also\n   limit the number of accepted connections and limit the
    period of time\n   during which an idle connection will be left open.\n   The
    data acquired by using an Active Leasequery is subject to the\n   same potential
    abuse as the data held by the DHCPv6 server from which\n   it was acquired and
    SHOULD be secured by mechanisms as strong as\n   those used for the data held
    by that DHCPv6 server.  The data\n   acquired by using an Active Leasequery SHOULD
    be deleted as soon as\n   possible after the use for which it was acquired has
    passed.\n   Authentication for DHCP messages [RFC3315] MUST NOT be used to\n   attempt
    to secure transmission of the messages described in this\n   document.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   IANA has assigned new DHCPv6 option codes in the
    \"Option Codes\"\n   registry maintained at <http://www.iana.org/assignments/\n
    \  dhcpv6-parameters>:\n      OPTION_LQ_BASE_TIME (100)\n      OPTION_LQ_START_TIME
    (101)\n      OPTION_LQ_END_TIME (102)\n   IANA has assigned new values in the
    DHCPv6 \"Status Codes\" registry\n   maintained at <http://www.iana.org/assignments/dhcpv6-parameters>:\n
    \     DataMissing (12)\n      CatchUpComplete (13)\n      NotSupported (14)\n
    \     TLSConnectionRefused (15)\n   IANA has assigned values for the following
    new DHCPv6 message types\n   in the \"Message Types\" registry maintained at\n
    \  <http://www.iana.org/assignments/dhcpv6-parameters>:\n      ACTIVELEASEQUERY
    (22)\n      STARTTLS (23)\n"
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C.,
      and M. Carney, \"Dynamic Host Configuration Protocol\n              for IPv6
      (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n
      \  [RFC3633]  Troan, O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host
      Configuration Protocol (DHCP) version 6\", RFC 3633,\n              DOI 10.17487/RFC3633,
      December 2003,\n              <http://www.rfc-editor.org/info/rfc3633>.\n   [RFC5007]
      \ Brzozowski, J., Kinnear, K., Volz, B., and S. Zeng,\n              \"DHCPv6
      Leasequery\", RFC 5007, DOI 10.17487/RFC5007,\n              September 2007,
      <http://www.rfc-editor.org/info/rfc5007>.\n   [RFC5246]  Dierks, T. and E. Rescorla,
      \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",
      RFC 5246,\n              DOI 10.17487/RFC5246, August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n
      \  [RFC5460]  Stapp, M., \"DHCPv6 Bulk Leasequery\", RFC 5460,\n              DOI
      10.17487/RFC5460, February 2009,\n              <http://www.rfc-editor.org/info/rfc5460>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC4301]  Kent, S. and K. Seo, \"Security
      Architecture for the\n              Internet Protocol\", RFC 4301, DOI 10.17487/RFC4301,\n
      \             December 2005, <http://www.rfc-editor.org/info/rfc4301>.\n   [RFC7414]
      \ Duke, M., Braden, R., Eddy, W., Blanton, E., and A.\n              Zimmermann,
      \"A Roadmap for Transmission Control Protocol\n              (TCP) Specification
      Documents\", RFC 7414,\n              DOI 10.17487/RFC7414, February 2015,\n
      \             <http://www.rfc-editor.org/info/rfc7414>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Acknowledgments\n   Some of the concepts and content present in this document
    are based\n   on DHCPv4 Active Leasequery, which was originally proposed by Kim\n
    \  Kinnear, Bernie Volz, Mark Stapp, and Neil Russell.\n   Useful review comments
    were provided by Scott Bradner, Francis\n   Dupont, and Stephen Farrell.  The
    privacy protections were\n   substantially upgraded due to these comments and
    discussions.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Dushyant Raghuvanshi\n   Cisco Systems, Inc.\n   Cessna
    Business Park\n   Varthur Hobli, Outer Ring Road\n   Bangalore, Karnataka  560037\n
    \  India\n   Phone: +91 80 4426-7372\n   Email: draghuva@cisco.com\n   Kim Kinnear\n
    \  Cisco Systems, Inc.\n   1414 Massachusetts Avenue\n   Boxborough, Massachusetts
    \ 01719\n   United States\n   Phone: +1 978 936-0000\n   Email: kkinnear@cisco.com\n
    \  Deepak Kukrety\n   Cisco Systems, Inc.\n   Cessna Business Park\n   Varthur
    Hobli, Outer Ring Road\n   Bangalore, Karnataka  560037\n   India\n   Phone: +91
    80 4426-7346\n   Email: dkukrety@cisco.com\n"
  title: Authors' Addresses
