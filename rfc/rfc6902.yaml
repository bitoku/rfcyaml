- title: __initial_text__
  contents:
  - '                JavaScript Object Notation (JSON) Patch

    '
- title: Abstract
  contents:
  - "Abstract\n   JSON Patch defines a JSON document structure for expressing a\n\
    \   sequence of operations to apply to a JavaScript Object Notation\n   (JSON)\
    \ document; it is suitable for use with the HTTP PATCH method.\n   The \"application/json-patch+json\"\
    \ media type is used to identify such\n   patch documents.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6902.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Document Structure . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Operations . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     4.1.  add  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n     4.2.  remove . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     4.3.  replace  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n     4.4.  move . . . . . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     4.5.  copy . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n  \
    \   4.6.  test . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n   5.\
    \  Error Handling . . . . . . . . . . . . . . . . . . . . . . . .  8\n   6.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . .  9\n   7.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 10\n   8.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 10\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 10\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 10\n   Appendix A.  Examples  . . . . .\
    \ . . . . . . . . . . . . . . . . . 12\n     A.1.  Adding an Object Member  .\
    \ . . . . . . . . . . . . . . . . 12\n     A.2.  Adding an Array Element  . .\
    \ . . . . . . . . . . . . . . . 12\n     A.3.  Removing an Object Member  . .\
    \ . . . . . . . . . . . . . . 12\n     A.4.  Removing an Array Element  . . .\
    \ . . . . . . . . . . . . . 13\n     A.5.  Replacing a Value  . . . . . . . .\
    \ . . . . . . . . . . . . 13\n     A.6.  Moving a Value . . . . . . . . . . .\
    \ . . . . . . . . . . . 14\n     A.7.  Moving an Array Element  . . . . . . .\
    \ . . . . . . . . . . 14\n     A.8.  Testing a Value: Success . . . . . . . .\
    \ . . . . . . . . . 15\n     A.9.  Testing a Value: Error . . . . . . . . . .\
    \ . . . . . . . . 15\n     A.10. Adding a Nested Member Object  . . . . . . .\
    \ . . . . . . . 15\n     A.11. Ignoring Unrecognized Elements . . . . . . . .\
    \ . . . . . . 16\n     A.12. Adding to a Nonexistent Target . . . . . . . . .\
    \ . . . . . 16\n     A.13. Invalid JSON Patch Document  . . . . . . . . . . .\
    \ . . . . 17\n     A.14. ~ Escape Ordering  . . . . . . . . . . . . . . . . .\
    \ . . . 17\n     A.15. Comparing Strings and Numbers  . . . . . . . . . . . .\
    \ . . 17\n     A.16. Adding an Array Value  . . . . . . . . . . . . . . . . .\
    \ . 18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   JavaScript Object Notation (JSON) [RFC4627] is a common\
    \ format for\n   the exchange and storage of structured data.  HTTP PATCH [RFC5789]\n\
    \   extends the Hypertext Transfer Protocol (HTTP) [RFC2616] with a\n   method\
    \ to perform partial modifications to resources.\n   JSON Patch is a format (identified\
    \ by the media type \"application/\n   json-patch+json\") for expressing a sequence\
    \ of operations to apply to\n   a target JSON document; it is suitable for use\
    \ with the HTTP PATCH\n   method.\n   This format is also potentially useful in\
    \ other cases in which it is\n   necessary to make partial updates to a JSON document\
    \ or to a data\n   structure that has similar constraints (i.e., they can be serialized\n\
    \   as an object or an array using the JSON grammar).\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Document Structure
  contents:
  - "3.  Document Structure\n   A JSON Patch document is a JSON [RFC4627] document\
    \ that represents an\n   array of objects.  Each object represents a single operation\
    \ to be\n   applied to the target JSON document.\n   The following is an example\
    \ JSON Patch document, transferred in an\n   HTTP PATCH request:\n   PATCH /my/data\
    \ HTTP/1.1\n   Host: example.org\n   Content-Length: 326\n   Content-Type: application/json-patch+json\n\
    \   If-Match: \"abc123\"\n   [\n     { \"op\": \"test\", \"path\": \"/a/b/c\"\
    , \"value\": \"foo\" },\n     { \"op\": \"remove\", \"path\": \"/a/b/c\" },\n\
    \     { \"op\": \"add\", \"path\": \"/a/b/c\", \"value\": [ \"foo\", \"bar\" ]\
    \ },\n     { \"op\": \"replace\", \"path\": \"/a/b/c\", \"value\": 42 },\n   \
    \  { \"op\": \"move\", \"from\": \"/a/b/c\", \"path\": \"/a/b/d\" },\n     { \"\
    op\": \"copy\", \"from\": \"/a/b/d\", \"path\": \"/a/b/e\" }\n   ]\n   Evaluation\
    \ of a JSON Patch document begins against a target JSON\n   document.  Operations\
    \ are applied sequentially in the order they\n   appear in the array.  Each operation\
    \ in the sequence is applied to\n   the target document; the resulting document\
    \ becomes the target of the\n   next operation.  Evaluation continues until all\
    \ operations are\n   successfully applied or until an error condition is encountered.\n"
- title: 4.  Operations
  contents:
  - "4.  Operations\n   Operation objects MUST have exactly one \"op\" member, whose\
    \ value\n   indicates the operation to perform.  Its value MUST be one of \"add\"\
    ,\n   \"remove\", \"replace\", \"move\", \"copy\", or \"test\"; other values are\n\
    \   errors.  The semantics of each object is defined below.\n   Additionally,\
    \ operation objects MUST have exactly one \"path\" member.\n   That member's value\
    \ is a string containing a JSON-Pointer value\n   [RFC6901] that references a\
    \ location within the target document (the\n   \"target location\") where the\
    \ operation is performed.\n   The meanings of other operation object members are\
    \ defined by\n   operation (see the subsections below).  Members that are not\n\
    \   explicitly defined for the operation in question MUST be ignored\n   (i.e.,\
    \ the operation will complete as if the undefined member did not\n   appear in\
    \ the object).\n   Note that the ordering of members in JSON objects is not significant;\n\
    \   therefore, the following operation objects are equivalent:\n   { \"op\": \"\
    add\", \"path\": \"/a/b/c\", \"value\": \"foo\" }\n   { \"path\": \"/a/b/c\",\
    \ \"op\": \"add\", \"value\": \"foo\" }\n   { \"value\": \"foo\", \"path\": \"\
    /a/b/c\", \"op\": \"add\" }\n   Operations are applied to the data structures\
    \ represented by a JSON\n   document, i.e., after any unescaping (see [RFC4627],\
    \ Section 2.5)\n   takes place.\n"
- title: 4.1.  add
  contents:
  - "4.1.  add\n   The \"add\" operation performs one of the following functions,\n\
    \   depending upon what the target location references:\n   o  If the target location\
    \ specifies an array index, a new value is\n      inserted into the array at the\
    \ specified index.\n   o  If the target location specifies an object member that\
    \ does not\n      already exist, a new member is added to the object.\n   o  If\
    \ the target location specifies an object member that does exist,\n      that\
    \ member's value is replaced.\n   The operation object MUST contain a \"value\"\
    \ member whose content\n   specifies the value to be added.\n   For example:\n\
    \   { \"op\": \"add\", \"path\": \"/a/b/c\", \"value\": [ \"foo\", \"bar\" ] }\n\
    \   When the operation is applied, the target location MUST reference one\n  \
    \ of:\n   o  The root of the target document - whereupon the specified value\n\
    \      becomes the entire content of the target document.\n   o  A member to add\
    \ to an existing object - whereupon the supplied\n      value is added to that\
    \ object at the indicated location.  If the\n      member already exists, it is\
    \ replaced by the specified value.\n   o  An element to add to an existing array\
    \ - whereupon the supplied\n      value is added to the array at the indicated\
    \ location.  Any\n      elements at or above the specified index are shifted one\
    \ position\n      to the right.  The specified index MUST NOT be greater than\
    \ the\n      number of elements in the array.  If the \"-\" character is used\
    \ to\n      index the end of the array (see [RFC6901]), this has the effect of\n\
    \      appending the value to the array.\n   Because this operation is designed\
    \ to add to existing objects and\n   arrays, its target location will often not\
    \ exist.  Although the\n   pointer's error handling algorithm will thus be invoked,\
    \ this\n   specification defines the error handling behavior for \"add\" pointers\n\
    \   to ignore that error and add the value as specified.\n   However, the object\
    \ itself or an array containing it does need to\n   exist, and it remains an error\
    \ for that not to be the case.  For\n   example, an \"add\" with a target location\
    \ of \"/a/b\" starting with this\n   document:\n   { \"a\": { \"foo\": 1 } }\n\
    \   is not an error, because \"a\" exists, and \"b\" will be added to its\n  \
    \ value.  It is an error in this document:\n   { \"q\": { \"bar\": 2 } }\n   because\
    \ \"a\" does not exist.\n"
- title: 4.2.  remove
  contents:
  - "4.2.  remove\n   The \"remove\" operation removes the value at the target location.\n\
    \   The target location MUST exist for the operation to be successful.\n   For\
    \ example:\n   { \"op\": \"remove\", \"path\": \"/a/b/c\" }\n   If removing an\
    \ element from an array, any elements above the\n   specified index are shifted\
    \ one position to the left.\n"
- title: 4.3.  replace
  contents:
  - "4.3.  replace\n   The \"replace\" operation replaces the value at the target\
    \ location\n   with a new value.  The operation object MUST contain a \"value\"\
    \ member\n   whose content specifies the replacement value.\n   The target location\
    \ MUST exist for the operation to be successful.\n   For example:\n   { \"op\"\
    : \"replace\", \"path\": \"/a/b/c\", \"value\": 42 }\n   This operation is functionally\
    \ identical to a \"remove\" operation for\n   a value, followed immediately by\
    \ an \"add\" operation at the same\n   location with the replacement value.\n"
- title: 4.4.  move
  contents:
  - "4.4.  move\n   The \"move\" operation removes the value at a specified location\
    \ and\n   adds it to the target location.\n   The operation object MUST contain\
    \ a \"from\" member, which is a string\n   containing a JSON Pointer value that\
    \ references the location in the\n   target document to move the value from.\n\
    \   The \"from\" location MUST exist for the operation to be successful.\n   For\
    \ example:\n   { \"op\": \"move\", \"from\": \"/a/b/c\", \"path\": \"/a/b/d\"\
    \ }\n   This operation is functionally identical to a \"remove\" operation on\n\
    \   the \"from\" location, followed immediately by an \"add\" operation at\n \
    \  the target location with the value that was just removed.\n   The \"from\"\
    \ location MUST NOT be a proper prefix of the \"path\"\n   location; i.e., a location\
    \ cannot be moved into one of its children.\n"
- title: 4.5.  copy
  contents:
  - "4.5.  copy\n   The \"copy\" operation copies the value at a specified location\
    \ to the\n   target location.\n   The operation object MUST contain a \"from\"\
    \ member, which is a string\n   containing a JSON Pointer value that references\
    \ the location in the\n   target document to copy the value from.\n   The \"from\"\
    \ location MUST exist for the operation to be successful.\n   For example:\n \
    \  { \"op\": \"copy\", \"from\": \"/a/b/c\", \"path\": \"/a/b/e\" }\n   This operation\
    \ is functionally identical to an \"add\" operation at the\n   target location\
    \ using the value specified in the \"from\" member.\n"
- title: 4.6.  test
  contents:
  - "4.6.  test\n   The \"test\" operation tests that a value at the target location\
    \ is\n   equal to a specified value.\n   The operation object MUST contain a \"\
    value\" member that conveys the\n   value to be compared to the target location's\
    \ value.\n   The target location MUST be equal to the \"value\" value for the\n\
    \   operation to be considered successful.\n   Here, \"equal\" means that the\
    \ value at the target location and the\n   value conveyed by \"value\" are of\
    \ the same JSON type, and that they\n   are considered equal by the following\
    \ rules for that type:\n   o  strings: are considered equal if they contain the\
    \ same number of\n      Unicode characters and their code points are byte-by-byte\
    \ equal.\n   o  numbers: are considered equal if their values are numerically\n\
    \      equal.\n   o  arrays: are considered equal if they contain the same number\
    \ of\n      values, and if each value can be considered equal to the value at\n\
    \      the corresponding position in the other array, using this list of\n   \
    \   type-specific rules.\n   o  objects: are considered equal if they contain\
    \ the same number of\n      members, and if each member can be considered equal\
    \ to a member in\n      the other object, by comparing their keys (as strings)\
    \ and their\n      values (using this list of type-specific rules).\n   o  literals\
    \ (false, true, and null): are considered equal if they are\n      the same.\n\
    \   Note that the comparison that is done is a logical comparison; e.g.,\n   whitespace\
    \ between the member values of an array is not significant.\n   Also, note that\
    \ ordering of the serialization of object members is\n   not significant.\n  \
    \ For example:\n   { \"op\": \"test\", \"path\": \"/a/b/c\", \"value\": \"foo\"\
    \ }\n"
- title: 5.  Error Handling
  contents:
  - "5.  Error Handling\n   If a normative requirement is violated by a JSON Patch\
    \ document, or\n   if an operation is not successful, evaluation of the JSON Patch\n\
    \   document SHOULD terminate and application of the entire patch\n   document\
    \ SHALL NOT be deemed successful.\n   See [RFC5789], Section 2.2 for considerations\
    \ regarding handling\n   errors when JSON Patch is used with the HTTP PATCH method,\
    \ including\n   suggested status codes to use to indicate various conditions.\n\
    \   Note that the HTTP PATCH method is atomic, as per [RFC5789].\n   Therefore,\
    \ the following patch would result in no changes being made\n   to the document\
    \ at all (because the \"test\" operation results in an\n   error):\n   [\n   \
    \  { \"op\": \"replace\", \"path\": \"/a/b/c\", \"value\": 42 },\n     { \"op\"\
    : \"test\", \"path\": \"/a/b/c\", \"value\": \"C\" }\n   ]\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   The Internet media type for a JSON Patch document\
    \ is application/\n   json-patch+json.\n   Type name:  application\n   Subtype\
    \ name:  json-patch+json\n   Required parameters:  none\n   Optional parameters:\
    \   none\n   Encoding considerations:  binary\n   Security considerations:\n \
    \     See Security Considerations in Section 7.\n   Interoperability considerations:\
    \  N/A\n   Published specification:\n      RFC 6902\n   Applications that use\
    \ this media type:\n      Applications that manipulate JSON documents.\n   Additional\
    \ information:\n      Magic number(s):  N/A\n      File extension(s):  .json-patch\n\
    \      Macintosh file type code(s):  TEXT\n   Person & email address to contact\
    \ for further information:\n      Paul C. Bryan <pbryan@anode.ca>\n   Intended\
    \ usage:  COMMON\n   Restrictions on usage:  none\n   Author:  Paul C. Bryan <pbryan@anode.ca>\n\
    \   Change controller:  IETF\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This specification has the same security considerations\
    \ as JSON\n   [RFC4627] and JSON-Pointer [RFC6901].\n   A few older Web browsers\
    \ can be coerced into loading an arbitrary\n   JSON document whose root is an\
    \ array, leading to a situation in which\n   a JSON Patch document containing\
    \ sensitive information could be\n   exposed to attackers, even if access is authenticated.\
    \  This is known\n   as a Cross-Site Request Forgery (CSRF) attack [CSRF].\n \
    \  However, such browsers are not widely used (at the time of writing,\n   it\
    \ is estimated that they are used in less than 1% of the market).\n   Publishers\
    \ who are nevertheless concerned about this attack are\n   advised to avoid making\
    \ such documents available with HTTP GET.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The following individuals contributed ideas, feedback\
    \ and wording to\n   this specification:\n      Mike Acar, Mike Amundsen, Cyrus\
    \ Daboo, Paul Davis, Stefan Koegl,\n      Murray S. Kucherawy, Dean Landolt, Randall\
    \ Leeds, James Manger,\n      Julian Reschke, James Snell, Eli Stevens, and Henry\
    \ S. Thompson.\n   The structure of a JSON Patch document was influenced by the\
    \ XML\n   Patch document specification [RFC5261].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4627]  Crockford, D., \"The application/json Media Type for\n\
    \              JavaScript Object Notation (JSON)\", RFC 4627, July 2006.\n   [RFC6901]\
    \  Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,\n              \"JavaScript\
    \ Object Notation (JSON) Pointer\", RFC 6901,\n              April 2013.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [CSRF]     Barth, A., Jackson, C., and J. Mitchell,\
    \ \"Robust Defenses\n              for Cross-Site Request Forgery\", ACM Conference\n\
    \              on Computer and Communications Security, October 2008,\n      \
    \        <http://seclab.stanford.edu/websec/csrf/csrf.pdf>.\n   [RFC2616]  Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,\
    \ P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [RFC5261]  Urpalainen, J., \"An Extensible Markup Language\
    \ (XML) Patch\n              Operations Framework Utilizing XML Path Language\
    \ (XPath)\n              Selectors\", RFC 5261, September 2008.\n   [RFC5789]\
    \  Dusseault, L. and J. Snell, \"PATCH Method for HTTP\",\n              RFC 5789,\
    \ March 2010.\n"
- title: Appendix A.  Examples
  contents:
  - 'Appendix A.  Examples

    '
- title: A.1.  Adding an Object Member
  contents:
  - "A.1.  Adding an Object Member\n   An example target JSON document:\n   { \"foo\"\
    : \"bar\"}\n   A JSON Patch document:\n   [\n     { \"op\": \"add\", \"path\"\
    : \"/baz\", \"value\": \"qux\" }\n   ]\n   The resulting JSON document:\n   {\n\
    \     \"baz\": \"qux\",\n     \"foo\": \"bar\"\n   }\n"
- title: A.2.  Adding an Array Element
  contents:
  - "A.2.  Adding an Array Element\n   An example target JSON document:\n   { \"foo\"\
    : [ \"bar\", \"baz\" ] }\n   A JSON Patch document:\n   [\n     { \"op\": \"add\"\
    , \"path\": \"/foo/1\", \"value\": \"qux\" }\n   ]\n   The resulting JSON document:\n\
    \   { \"foo\": [ \"bar\", \"qux\", \"baz\" ] }\n"
- title: A.3.  Removing an Object Member
  contents:
  - "A.3.  Removing an Object Member\n   An example target JSON document:\n   {\n\
    \     \"baz\": \"qux\",\n     \"foo\": \"bar\"\n   }\n   A JSON Patch document:\n\
    \   [\n     { \"op\": \"remove\", \"path\": \"/baz\" }\n   ]\n   The resulting\
    \ JSON document:\n   { \"foo\": \"bar\" }\n"
- title: A.4.  Removing an Array Element
  contents:
  - "A.4.  Removing an Array Element\n   An example target JSON document:\n   { \"\
    foo\": [ \"bar\", \"qux\", \"baz\" ] }\n   A JSON Patch document:\n   [\n    \
    \ { \"op\": \"remove\", \"path\": \"/foo/1\" }\n   ]\n   The resulting JSON document:\n\
    \   { \"foo\": [ \"bar\", \"baz\" ] }\n"
- title: A.5.  Replacing a Value
  contents:
  - "A.5.  Replacing a Value\n   An example target JSON document:\n   {\n     \"baz\"\
    : \"qux\",\n     \"foo\": \"bar\"\n   }\n   A JSON Patch document:\n   [\n   \
    \  { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" }\n   ]\n   The\
    \ resulting JSON document:\n   {\n     \"baz\": \"boo\",\n     \"foo\": \"bar\"\
    \n   }\n"
- title: A.6.  Moving a Value
  contents:
  - "A.6.  Moving a Value\n   An example target JSON document:\n   {\n     \"foo\"\
    : {\n       \"bar\": \"baz\",\n       \"waldo\": \"fred\"\n     },\n     \"qux\"\
    : {\n       \"corge\": \"grault\"\n     }\n   }\n   A JSON Patch document:\n \
    \  [\n     { \"op\": \"move\", \"from\": \"/foo/waldo\", \"path\": \"/qux/thud\"\
    \ }\n   ]\n   The resulting JSON document:\n   {\n     \"foo\": {\n       \"bar\"\
    : \"baz\"\n     },\n     \"qux\": {\n       \"corge\": \"grault\",\n       \"\
    thud\": \"fred\"\n     }\n   }\n"
- title: A.7.  Moving an Array Element
  contents:
  - "A.7.  Moving an Array Element\n   An example target JSON document:\n   { \"foo\"\
    : [ \"all\", \"grass\", \"cows\", \"eat\" ] }\n   A JSON Patch document:\n   [\n\
    \     { \"op\": \"move\", \"from\": \"/foo/1\", \"path\": \"/foo/3\" }\n   ]\n\
    \   The resulting JSON document:\n   { \"foo\": [ \"all\", \"cows\", \"eat\",\
    \ \"grass\" ] }\n"
- title: 'A.8.  Testing a Value: Success'
  contents:
  - "A.8.  Testing a Value: Success\n   An example target JSON document:\n   {\n \
    \    \"baz\": \"qux\",\n     \"foo\": [ \"a\", 2, \"c\" ]\n   }\n   A JSON Patch\
    \ document that will result in successful evaluation:\n   [\n     { \"op\": \"\
    test\", \"path\": \"/baz\", \"value\": \"qux\" },\n     { \"op\": \"test\", \"\
    path\": \"/foo/1\", \"value\": 2 }\n   ]\n"
- title: 'A.9.  Testing a Value: Error'
  contents:
  - "A.9.  Testing a Value: Error\n   An example target JSON document:\n   { \"baz\"\
    : \"qux\" }\n   A JSON Patch document that will result in an error condition:\n\
    \   [\n     { \"op\": \"test\", \"path\": \"/baz\", \"value\": \"bar\" }\n   ]\n"
- title: A.10.  Adding a Nested Member Object
  contents:
  - "A.10.  Adding a Nested Member Object\n   An example target JSON document:\n \
    \  { \"foo\": \"bar\" }\n   A JSON Patch document:\n   [\n     { \"op\": \"add\"\
    , \"path\": \"/child\", \"value\": { \"grandchild\": { } } }\n   ]\n   The resulting\
    \ JSON document:\n   {\n     \"foo\": \"bar\",\n     \"child\": {\n       \"grandchild\"\
    : {\n       }\n     }\n   }\n"
- title: A.11.  Ignoring Unrecognized Elements
  contents:
  - "A.11.  Ignoring Unrecognized Elements\n   An example target JSON document:\n\
    \   { \"foo\": \"bar\" }\n   A JSON Patch document:\n   [\n     { \"op\": \"add\"\
    , \"path\": \"/baz\", \"value\": \"qux\", \"xyz\": 123 }\n   ]\n   The resulting\
    \ JSON document:\n   {\n     \"foo\": \"bar\",\n     \"baz\": \"qux\"\n   }\n"
- title: A.12.  Adding to a Nonexistent Target
  contents:
  - "A.12.  Adding to a Nonexistent Target\n   An example target JSON document:\n\
    \   { \"foo\": \"bar\" }\n   A JSON Patch document:\n   [\n     { \"op\": \"add\"\
    , \"path\": \"/baz/bat\", \"value\": \"qux\" }\n   ]\n   This JSON Patch document,\
    \ applied to the target JSON document above,\n   would result in an error (therefore,\
    \ it would not be applied),\n   because the \"add\" operation's target location\
    \ that references neither\n   the root of the document, nor a member of an existing\
    \ object, nor a\n   member of an existing array.\n"
- title: A.13.  Invalid JSON Patch Document
  contents:
  - "A.13.  Invalid JSON Patch Document\n   A JSON Patch document:\n   [\n     { \"\
    op\": \"add\", \"path\": \"/baz\", \"value\": \"qux\", \"op\": \"remove\" }\n\
    \   ]\n   This JSON Patch document cannot be treated as an \"add\" operation,\n\
    \   because it contains a later \"op\":\"remove\" element.  JSON requires\n  \
    \ that object member names be unique with a \"SHOULD\" requirement, and\n   there\
    \ is no standard error handling for duplicates.\n"
- title: A.14.  ~ Escape Ordering
  contents:
  - "A.14.  ~ Escape Ordering\n   An example target JSON document:\n   {\n     \"\
    /\": 9,\n     \"~1\": 10\n   }\n   A JSON Patch document:\n   [\n     {\"op\"\
    : \"test\", \"path\": \"/~01\", \"value\": 10}\n   ]\n   The resulting JSON document:\n\
    \   {\n     \"/\": 9,\n     \"~1\": 10\n   }\n"
- title: A.15.  Comparing Strings and Numbers
  contents:
  - "A.15.  Comparing Strings and Numbers\n   An example target JSON document:\n \
    \  {\n     \"/\": 9,\n     \"~1\": 10\n   }\n   A JSON Patch document:\n   [\n\
    \     {\"op\": \"test\", \"path\": \"/~01\", \"value\": \"10\"}\n   ]\n   This\
    \ results in an error, because the test fails.  The document value\n   is numeric,\
    \ whereas the value being tested for is a string.\n"
- title: A.16.  Adding an Array Value
  contents:
  - "A.16.  Adding an Array Value\n   An example target JSON document:\n   { \"foo\"\
    : [\"bar\"] }\n   A JSON Patch document:\n   [\n     { \"op\": \"add\", \"path\"\
    : \"/foo/-\", \"value\": [\"abc\", \"def\"] }\n   ]\n   The resulting JSON document:\n\
    \   { \"foo\": [\"bar\", [\"abc\", \"def\"]] }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul C. Bryan (editor)\n   Salesforce.com\n   Phone: +1\
    \ 604 783 1481\n   EMail: pbryan@anode.ca\n   Mark Nottingham (editor)\n   Akamai\n\
    \   EMail: mnot@mnot.net\n"
