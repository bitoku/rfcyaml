- title: __initial_text__
  contents:
  - '             Tunnelling of Explicit Congestion Notification

    '
- title: Abstract
  contents:
  - "Abstract\n   This document redefines how the explicit congestion notification\n\
    \   (ECN) field of the IP header should be constructed on entry to and\n   exit\
    \ from any IP-in-IP tunnel.  On encapsulation, it updates RFC 3168\n   to bring\
    \ all IP-in-IP tunnels (v4 or v6) into line with RFC 4301\n   IPsec ECN processing.\
    \  On decapsulation, it updates both RFC 3168 and\n   RFC 4301 to add new behaviours\
    \ for previously unused combinations of\n   inner and outer headers.  The new\
    \ rules ensure the ECN field is\n   correctly propagated across a tunnel whether\
    \ it is used to signal one\n   or two severity levels of congestion; whereas before,\
    \ only one\n   severity level was supported.  Tunnel endpoints can be updated\
    \ in any\n   order without affecting pre-existing uses of the ECN field, thus\n\
    \   ensuring backward compatibility.  Nonetheless, operators wanting to\n   support\
    \ two severity levels (e.g., for pre-congestion notification --\n   PCN) can require\
    \ compliance with this new specification.  A thorough\n   analysis of the reasoning\
    \ for these changes and the implications is\n   included.  In the unlikely event\
    \ that the new rules do not meet a\n   specific need, RFC 4774 gives guidance\
    \ on designing alternate ECN\n   semantics, and this document extends that to\
    \ include tunnelling\n   issues.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6040.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Scope ......................................................5\n  \
    \ 2. Terminology .....................................................6\n   3.\
    \ Summary of Pre-Existing RFCs ....................................7\n      3.1.\
    \ Encapsulation at Tunnel Ingress ............................7\n      3.2. Decapsulation\
    \ at Tunnel Egress .............................8\n   4. New ECN Tunnelling Rules\
    \ ........................................9\n      4.1. Default Tunnel Ingress\
    \ Behaviour ..........................10\n      4.2. Default Tunnel Egress Behaviour\
    \ ...........................10\n      4.3. Encapsulation Modes .......................................12\n\
    \      4.4. Single Mode of Decapsulation ..............................14\n  \
    \ 5. Updates to Earlier RFCs ........................................15\n    \
    \  5.1. Changes to RFC 4301 ECN Processing ........................15\n      5.2.\
    \ Changes to RFC 3168 ECN Processing ........................16\n      5.3. Motivation\
    \ for Changes ....................................17\n           5.3.1. Motivation\
    \ for Changing Encapsulation ..............17\n           5.3.2. Motivation for\
    \ Changing Decapsulation ..............18\n   6. Backward Compatibility .........................................21\n\
    \      6.1. Non-Issues Updating Decapsulation .........................21\n  \
    \    6.2. Non-Update of RFC 4301 IPsec Encapsulation ................21\n    \
    \  6.3. Update to RFC 3168 Encapsulation ..........................22\n   7. Design\
    \ Principles for Alternate ECN Tunnelling Semantics .......22\n   8. Security\
    \ Considerations ........................................24\n   9. Conclusions\
    \ ....................................................26\n   10. Acknowledgements\
    \ ..............................................26\n   11. References ....................................................27\n\
    \      11.1. Normative References .....................................27\n  \
    \    11.2. Informative References ...................................27\n   Appendix\
    \ A.  Early ECN Tunnelling RFCs ............................29\n   Appendix B.\
    \  Design Constraints ...................................29\n     B.1.  Security\
    \ Constraints ......................................29\n     B.2.  Control Constraints\
    \ .......................................31\n     B.3.  Management Constraints\
    \ ....................................32\n   Appendix C.  Contribution to Congestion\
    \ across a Tunnel ...........33\n   Appendix D.  Compromise on Decap with ECT(1)\
    \ Inner and ECT(0)\n                Outer ................................................34\n\
    \   Appendix E.  Open Issues ..........................................35\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Explicit congestion notification (ECN [RFC3168]) allows\
    \ a forwarding\n   element (e.g., a router) to notify the onset of congestion\
    \ without\n   having to drop packets.  Instead, it can explicitly mark a proportion\n\
    \   of packets in the two-bit ECN field in the IP header (Table 1 recaps\n   the\
    \ ECN codepoints).\n   The outer header of an IP packet can encapsulate one or\
    \ more IP\n   headers for tunnelling.  A forwarding element using ECN to signify\n\
    \   congestion will only mark the immediately visible outer IP header.\n   When\
    \ a tunnel decapsulator later removes this outer header, it\n   follows rules\
    \ to propagate congestion markings by combining the ECN\n   fields of the inner\
    \ and outer IP header into one outgoing IP header.\n   This document updates those\
    \ rules for IPsec [RFC4301] and non-IPsec\n   [RFC3168] tunnels to add new behaviours\
    \ for previously unused\n   combinations of inner and outer headers.  It also\
    \ updates the ingress\n   behaviour of RFC 3168 tunnels to match that of RFC 4301\
    \ tunnels.\n   Tunnel endpoints complying with the updated rules will be backward\n\
    \   compatible when interworking with tunnel endpoints complying with RFC\n  \
    \ 4301, RFC 3168, or any earlier specification.\n   When ECN and its tunnelling\
    \ was defined in RFC 3168, only the minimum\n   necessary changes to the ECN field\
    \ were propagated through tunnel\n   endpoints -- just enough for the basic ECN\
    \ mechanism to work.  This\n   was due to concerns that the ECN field might be\
    \ toggled to\n   communicate between a secure site and someone on the public Internet\n\
    \   -- a covert channel.  This was because a mutable field like ECN\n   cannot\
    \ be protected by IPsec's integrity mechanisms -- it has to be\n   able to change\
    \ as it traverses the Internet.\n   Nonetheless, the latest IPsec architecture\
    \ [RFC4301] considered a\n   bandwidth limit of two bits per packet on a covert\
    \ channel to be a\n   manageable risk.  Therefore, for simplicity, an RFC 4301\
    \ ingress\n   copied the whole ECN field to encapsulate a packet.  RFC 4301\n\
    \   dispensed with the two modes of RFC 3168, one which partially copied\n   the\
    \ ECN field, and the other which blocked all propagation of ECN\n   changes.\n\
    \   Unfortunately, this entirely reasonable sequence of standards actions\n  \
    \ resulted in a perverse outcome; non-IPsec tunnels (RFC 3168) blocked\n   the\
    \ two-bit covert channel, while IPsec tunnels (RFC 4301) did not --\n   at least\
    \ not at the ingress.  At the egress, both IPsec and non-IPsec\n   tunnels still\
    \ partially restricted propagation of the full ECN field.\n   The trigger for\
    \ the changes in this document was the introduction of\n   pre-congestion notification\
    \ (PCN [RFC5670]) to the IETF Standards\n   Track.  PCN needs the ECN field to\
    \ be copied at a tunnel ingress and\n   it needs four states of congestion signalling\
    \ to be propagated at the\n   egress, but pre-existing tunnels only propagate\
    \ three in the ECN\n   field.\n   This document draws on currently unused (CU)\
    \ combinations of inner\n   and outer headers to add tunnelling of four-state\
    \ congestion\n   signalling to RFC 3168 and RFC 4301.  Operators of tunnels who\n\
    \   specifically want to support four states can require that all their\n   tunnels\
    \ comply with this specification.  However, this is not a fork\n   in the RFC\
    \ series.  It is an update that can be deployed first by\n   those that need it,\
    \ and subsequently by all tunnel endpoint\n   implementations (RFC 4301, RFC 3168,\
    \ RFC 2481, RFC 2401, RFC 2003),\n   which can safely be updated to this new specification\
    \ as part of\n   general code maintenance.  This will gradually add support for\
    \ four\n   congestion states to the Internet.  Existing three state schemes will\n\
    \   continue to work as before.\n   In fact, this document is the opposite of\
    \ a fork.  At the same time\n   as supporting a fourth state, the opportunity\
    \ has been taken to draw\n   together divergent ECN tunnelling specifications\
    \ into a single\n   consistent behaviour, harmonising differences such as perverse\
    \ covert\n   channel treatment.  Then, any tunnel can be deployed unilaterally,\n\
    \   and it will support the full range of congestion control and\n   management\
    \ schemes without any modes or configuration.  Further, any\n   host or router\
    \ can expect the ECN field to behave in the same way,\n   whatever type of tunnel\
    \ might intervene in the path.\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document only concerns wire protocol processing of the ECN\
    \ field\n   at tunnel endpoints and makes no changes or recommendations\n   concerning\
    \ algorithms for congestion marking or congestion response.\n   This document\
    \ specifies common ECN field processing at encapsulation\n   and decapsulation\
    \ for any IP-in-IP tunnelling, whether IPsec or non-\n   IPsec tunnels.  It applies\
    \ irrespective of whether IPv4 or IPv6 is\n   used for either the inner or outer\
    \ headers.  It applies for packets\n   with any destination address type, whether\
    \ unicast or multicast.  It\n   applies as the default for all Diffserv per-hop\
    \ behaviours (PHBs),\n   unless stated otherwise in the specification of a PHB\
    \ (but Section 4\n   strongly deprecates such exceptions).  It is intended to\
    \ be a good\n   trade off between somewhat conflicting security, control, and\n\
    \   management requirements.\n   [RFC2983] is a comprehensive primer on differentiated\
    \ services and\n   tunnels.  Given ECN raises similar issues to differentiated\
    \ services\n   when interacting with tunnels, useful concepts introduced in RFC\
    \ 2983\n   are used throughout, with brief recaps of the explanations where\n\
    \   necessary.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   Table 1 recaps the names of the ECN codepoints [RFC3168].\n\
    \     +------------------+----------------+---------------------------+\n    \
    \ | Binary codepoint | Codepoint name | Meaning                   |\n     +------------------+----------------+---------------------------+\n\
    \     |        00        | Not-ECT        | Not ECN-capable transport |\n    \
    \ |        01        | ECT(1)         | ECN-capable transport     |\n     |  \
    \      10        | ECT(0)         | ECN-capable transport     |\n     |      \
    \  11        | CE             | Congestion experienced    |\n     +------------------+----------------+---------------------------+\n\
    \          Table 1: Recap of Codepoints of the ECN Field [RFC3168]\n         \
    \                    in the IP Header\n   Further terminology used within this\
    \ document:\n   Encapsulator:  The tunnel endpoint function that adds an outer\
    \ IP\n      header to tunnel a packet (also termed the 'ingress tunnel\n     \
    \ endpoint' or just the 'ingress' where the context is clear).\n   Decapsulator:\
    \  The tunnel endpoint function that removes an outer IP\n      header from a\
    \ tunnelled packet (also termed the 'egress tunnel\n      endpoint' or just the\
    \ 'egress' where the context is clear).\n   Incoming header:  The header of an\
    \ arriving packet before\n      encapsulation.\n   Outer header:  The header added\
    \ to encapsulate a tunnelled packet.\n   Inner header:  The header encapsulated\
    \ by the outer header.\n   Outgoing header:  The header constructed by the decapsulator\
    \ using\n      logic that combines the fields in the outer and inner headers.\n\
    \   Copying ECN:  On encapsulation, setting the ECN field of the new\n      outer\
    \ header to be a copy of the ECN field in the incoming header.\n   Zeroing ECN:\
    \  On encapsulation, clearing the ECN field of the new\n      outer header to\
    \ Not-ECT (\"00\").\n   Resetting ECN:  On encapsulation, setting the ECN field\
    \ of the new\n      outer header to be a copy of the ECN field in the incoming\
    \ header\n      except the outer ECN field is set to the ECT(0) codepoint if the\n\
    \      incoming ECN field is CE.\n"
- title: 3.  Summary of Pre-Existing RFCs
  contents:
  - "3.  Summary of Pre-Existing RFCs\n   This section is informative not normative,\
    \ as it recaps pre-existing\n   RFCs.  Earlier relevant RFCs that were either\
    \ Experimental or\n   incomplete with respect to ECN tunnelling (RFC 2481, RFC\
    \ 2401, and\n   RFC 2003) are briefly outlined in Appendix A.  The question of\n\
    \   whether tunnel implementations used in the Internet comply with any\n   of\
    \ these RFCs is not discussed.\n"
- title: 3.1.  Encapsulation at Tunnel Ingress
  contents:
  - "3.1.  Encapsulation at Tunnel Ingress\n   At the encapsulator, the controversy\
    \ has been over whether to\n   propagate information about congestion experienced\
    \ on the path so far\n   into the outer header of the tunnel.\n   Specifically,\
    \ RFC 3168 says that, if a tunnel fully supports ECN\n   (termed a 'full-functionality'\
    \ ECN tunnel in [RFC3168]), the\n   encapsulator must not copy a CE marking from\
    \ the incoming header into\n   the outer header that it creates.  Instead, the\
    \ encapsulator must set\n   the outer header to ECT(0) if the ECN field is marked\
    \ CE in the\n   arriving IP header.  We term this 'resetting' a CE codepoint.\n\
    \   However, the new IPsec architecture in [RFC4301] reverses this rule,\n   stating\
    \ that the encapsulator must simply copy the ECN field from the\n   incoming header\
    \ to the outer header.\n   RFC 3168 also provided a Limited Functionality mode\
    \ that turns off\n   ECN processing over the scope of the tunnel by setting the\
    \ outer\n   header to Not-ECT (\"00\").  Then, such packets will be dropped to\n\
    \   indicate congestion, rather than marked with ECN.  This is necessary\n   for\
    \ the ingress to interwork with legacy decapsulators ([RFC2481],\n   [RFC2401],\
    \ and [RFC2003]) that do not propagate ECN markings added to\n   the outer header.\
    \  Otherwise, such legacy decapsulators would throw\n   away congestion notifications\
    \ before they reached the transport\n   layer.\n   Neither Limited Functionality\
    \ mode nor Full Functionality mode are\n   used by an RFC 4301 IPsec encapsulator,\
    \ which simply copies the\n   incoming ECN field into the outer header.  An earlier\
    \ key-exchange\n   phase ensures an RFC 4301 ingress will not have to interwork\
    \ with a\n   legacy egress that does not support ECN.\n   These pre-existing behaviours\
    \ are summarised in Figure 1.\n    +-----------------+-----------------------------------------------+\n\
    \    | Incoming Header |             Departing Outer Header            |\n   \
    \ | (also equal to  +---------------+---------------+---------------+\n    | departing\
    \ Inner |  RFC 3168 ECN |  RFC 3168 ECN | RFC 4301 IPsec|\n    |     Header) \
    \    |    Limited    |     Full      |               |\n    |                \
    \ | Functionality | Functionality |               |\n    +-----------------+---------------+---------------+---------------+\n\
    \    |    Not-ECT      |   Not-ECT     |   Not-ECT     |   Not-ECT     |\n   \
    \ |     ECT(0)      |   Not-ECT     |    ECT(0)     |    ECT(0)     |\n    | \
    \    ECT(1)      |   Not-ECT     |    ECT(1)     |    ECT(1)     |\n    |    \
    \   CE        |   Not-ECT     |    ECT(0)     |      CE       |\n    +-----------------+---------------+---------------+---------------+\n\
    \    Figure 1: IP-in-IP Encapsulation: Recap of Pre-Existing Behaviours\n"
- title: 3.2.  Decapsulation at Tunnel Egress
  contents:
  - "3.2.  Decapsulation at Tunnel Egress\n   RFC 3168 and RFC 4301 specify the decapsulation\
    \ behaviour summarised\n   in Figure 2.  The ECN field in the outgoing header\
    \ is set to the\n   codepoint at the intersection of the appropriate arriving\
    \ inner\n   header (row) and arriving outer header (column).\n            +---------+------------------------------------------------+\n\
    \            |Arriving |            Arriving Outer Header               |\n  \
    \          |   Inner +---------+------------+------------+------------+\n    \
    \        |  Header | Not-ECT | ECT(0)     | ECT(1)     |     CE     |\n      \
    \      +---------+---------+------------+------------+------------+\n  RFC 3168->|\
    \ Not-ECT | Not-ECT |Not-ECT     |Not-ECT     |  <drop>    |\n  RFC 4301->| Not-ECT\
    \ | Not-ECT |Not-ECT     |Not-ECT     |Not-ECT     |\n            |  ECT(0) |\
    \  ECT(0) | ECT(0)     | ECT(0)     |     CE     |\n            |  ECT(1) |  ECT(1)\
    \ | ECT(1)     | ECT(1)     |     CE     |\n            |    CE   |      CE |\
    \     CE     |     CE     |     CE     |\n            +---------+---------+------------+------------+------------+\n\
    \   In pre-existing RFCs, the ECN field in the outgoing header was set to\n  \
    \ the codepoint at the intersection of the appropriate arriving inner\n   header\
    \ (row) and arriving outer header (column), or the packet was\n   dropped where\
    \ indicated.\n     Figure 2: IP in IP Decapsulation; Recap of Pre-Existing Behaviour\n\
    \   The behaviour in the table derives from the logic given in RFC 3168\n   and\
    \ RFC 4301, briefly recapped as follows:\n   o  On decapsulation, if the inner\
    \ ECN field is Not-ECT the outer is\n      ignored.  RFC 3168 (but not RFC 4301)\
    \ also specified that the\n      decapsulator must drop a packet with a Not-ECT\
    \ inner and CE in the\n      outer.\n   o  In all other cases, if the outer is\
    \ CE, the outgoing ECN field is\n      set to CE; otherwise, the outer is ignored\
    \ and the inner is used\n      for the outgoing ECN field.\n   Section 9.2.2 of\
    \ RFC 3168 also made it an auditable event for an\n   IPsec tunnel \"if the ECN\
    \ Field is changed inappropriately within an\n   IPsec tunnel...\".  Inappropriate\
    \ changes were not specifically\n   enumerated.  RFC 4301 did not mention inappropriate\
    \ ECN changes.\n"
- title: 4.  New ECN Tunnelling Rules
  contents:
  - "4.  New ECN Tunnelling Rules\n   The standards actions below in Section 4.1 (ingress\
    \ encapsulation)\n   and Section 4.2 (egress decapsulation) define new default\
    \ ECN tunnel\n   processing rules for any IP packet (v4 or v6) with any Diffserv\n\
    \   codepoint.\n   If these defaults do not meet a particular requirement, an\
    \ alternate\n   ECN tunnelling scheme can be introduced as part of the definition\
    \ of\n   an alternate congestion marking scheme used by a specific Diffserv\n\
    \   PHB (see [RFC4774] and Section 5 of [RFC3168]).  When designing such\n   alternate\
    \ ECN tunnelling schemes, the principles in Section 7 should\n   be followed.\
    \  However, alternate ECN tunnelling schemes SHOULD be\n   avoided whenever possible\
    \ as the deployment burden of handling\n   exceptional PHBs in implementations\
    \ of all affected tunnels should\n   not be underestimated.  There is no requirement\
    \ for a PHB definition\n   to state anything about ECN tunnelling behaviour if\
    \ the default\n   behaviour in the present specification is sufficient.\n"
- title: 4.1.  Default Tunnel Ingress Behaviour
  contents:
  - "4.1.  Default Tunnel Ingress Behaviour\n   Two modes of encapsulation are defined\
    \ here; a REQUIRED 'normal mode'\n   and a 'compatibility mode', which is for\
    \ backward compatibility with\n   tunnel decapsulators that do not understand\
    \ ECN.  Note that these are\n   modes of the ingress tunnel endpoint only, not\
    \ the whole tunnel.\n   Section 4.3 explains why two modes are necessary and specifies\
    \ the\n   circumstances in which it is sufficient to solely implement normal\n\
    \   mode.\n   Whatever the mode, an encapsulator forwards the inner header without\n\
    \   changing the ECN field.\n   In normal mode, an encapsulator compliant with\
    \ this specification\n   MUST construct the outer encapsulating IP header by copying\
    \ the\n   two-bit ECN field of the incoming IP header.  In compatibility mode,\n\
    \   it clears the ECN field in the outer header to the Not-ECT codepoint\n   (the\
    \ IPv4 header checksum also changes whenever the ECN field is\n   changed).  These\
    \ rules are tabulated for convenience in Figure 3.\n            +-----------------+-------------------------------+\n\
    \            | Incoming Header |    Departing Outer Header     |\n           \
    \ | (also equal to  +---------------+---------------+\n            | departing\
    \ Inner | Compatibility |    Normal     |\n            |     Header)     |   \
    \  Mode      |     Mode      |\n            +-----------------+---------------+---------------+\n\
    \            |    Not-ECT      |   Not-ECT     |   Not-ECT     |\n           \
    \ |     ECT(0)      |   Not-ECT     |    ECT(0)     |\n            |     ECT(1)\
    \      |   Not-ECT     |    ECT(1)     |\n            |       CE        |   Not-ECT\
    \     |      CE       |\n            +-----------------+---------------+---------------+\n\
    \              Figure 3: New IP in IP Encapsulation Behaviours\n"
- title: 4.2.  Default Tunnel Egress Behaviour
  contents:
  - "4.2.  Default Tunnel Egress Behaviour\n   To decapsulate the inner header at\
    \ the tunnel egress, a compliant\n   tunnel egress MUST set the outgoing ECN field\
    \ to the codepoint at the\n   intersection of the appropriate arriving inner header\
    \ (row) and outer\n   header (column) in Figure 4 (the IPv4 header checksum also\
    \ changes\n   whenever the ECN field is changed).  There is no need for more than\n\
    \   one mode of decapsulation, as these rules cater for all known\n   requirements.\n\
    \            +---------+------------------------------------------------+\n  \
    \          |Arriving |            Arriving Outer Header               |\n    \
    \        |   Inner +---------+------------+------------+------------+\n      \
    \      |  Header | Not-ECT | ECT(0)     | ECT(1)     |     CE     |\n        \
    \    +---------+---------+------------+------------+------------+\n          \
    \  | Not-ECT | Not-ECT |Not-ECT(!!!)|Not-ECT(!!!)| <drop>(!!!)|\n            |\
    \  ECT(0) |  ECT(0) | ECT(0)     | ECT(1)     |     CE     |\n            |  ECT(1)\
    \ |  ECT(1) | ECT(1) (!) | ECT(1)     |     CE     |\n            |    CE   |\
    \      CE |     CE     |     CE(!!!)|     CE     |\n            +---------+---------+------------+------------+------------+\n\
    \    The ECN field in the outgoing header is set to the codepoint at the\n   \
    \   intersection of the appropriate arriving inner header (row) and\n      arriving\
    \ outer header (column), or the packet is dropped where\n   indicated.  Currently\
    \ unused combinations are indicated by '(!!!)' or\n                          \
    \         '(!)'\n              Figure 4: New IP in IP Decapsulation Behaviour\n\
    \   This table for decapsulation behaviour is derived from the following\n   logic:\n\
    \   o  If the inner ECN field is Not-ECT, the decapsulator MUST NOT\n      propagate\
    \ any other ECN codepoint onwards.  This is because the\n      inner Not-ECT marking\
    \ is set by transports that rely on dropped\n      packets as an indication of\
    \ congestion and would not understand or\n      respond to any other ECN codepoint\
    \ [RFC4774].  Specifically:\n      *  If the inner ECN field is Not-ECT and the\
    \ outer ECN field is\n         CE, the decapsulator MUST drop the packet.\n  \
    \    *  If the inner ECN field is Not-ECT and the outer ECN field is\n       \
    \  Not-ECT, ECT(0), or ECT(1), the decapsulator MUST forward the\n         outgoing\
    \ packet with the ECN field cleared to Not-ECT.\n   o  In all other cases where\
    \ the inner supports ECN, the decapsulator\n      MUST set the outgoing ECN field\
    \ to the more severe marking of the\n      outer and inner ECN fields, where the\
    \ ranking of severity from\n      highest to lowest is CE, ECT(1), ECT(0), Not-ECT.\
    \  This in no way\n      precludes cases where ECT(1) and ECT(0) have the same\
    \ severity;\n   o  Certain combinations of inner and outer ECN fields cannot result\n\
    \      from any transition in any current or previous ECN tunneling\n      specification.\
    \  These currently unused (CU) combinations are\n      indicated in Figure 4 by\
    \ '(!!!)' or '(!)', where '(!!!)' means the\n      combination is CU and always\
    \ potentially dangerous, while '(!)'\n      means it is CU and possibly dangerous.\
    \  In these cases,\n      particularly the more dangerous ones, the decapsulator\
    \ SHOULD log\n      the event and MAY also raise an alarm.\n      Just because\
    \ the highlighted combinations are currently unused,\n      does not mean that\
    \ all the other combinations are always valid.\n      Some are only valid if they\
    \ have arrived from a particular type of\n      legacy ingress, and dangerous\
    \ otherwise.  Therefore, an\n      implementation MAY allow an operator to configure\
    \ logging and\n      alarms for such additional header combinations known to be\n\
    \      dangerous or CU for the particular configuration of tunnel\n      endpoints\
    \ deployed at run-time.\n      Alarms SHOULD be rate-limited so that the anomalous\
    \ combinations\n      will not amplify into a flood of alarm messages.  It MUST\
    \ be\n      possible to suppress alarms or logging, e.g., if it becomes\n    \
    \  apparent that a combination that previously was not used has\n      started\
    \ to be used for legitimate purposes such as a new standards\n      action.\n\
    \   The above logic allows for ECT(0) and ECT(1) to both represent the\n   same\
    \ severity of congestion marking (e.g., \"not congestion marked\").\n   But it\
    \ also allows future schemes to be defined where ECT(1) is a\n   more severe marking\
    \ than ECT(0), in particular, enabling the simplest\n   possible encoding for\
    \ PCN [PCN3in1] (see Section 5.3.2).  Treating\n   ECT(1) as either the same as\
    \ ECT(0) or as a higher severity level is\n   explained in the discussion of the\
    \ ECN nonce [RFC3540] in Section 8,\n   which in turn refers to Appendix D.\n"
- title: 4.3.  Encapsulation Modes
  contents:
  - "4.3.  Encapsulation Modes\n   Section 4.1 introduces two encapsulation modes:\
    \ normal mode, and\n   compatibility mode, defining their encapsulation behaviour\
    \ (i.e.,\n   header copying or zeroing, respectively).  Note that these are modes\n\
    \   of the ingress tunnel endpoint only, not the tunnel as a whole.\n   To comply\
    \ with this specification, a tunnel ingress MUST at least\n   implement normal\
    \ mode.  Unless it will never be used with legacy\n   tunnel egress nodes (RFC\
    \ 2003, RFC 2401, or RFC 2481 or the limited\n   functionality mode of RFC 3168),\
    \ an ingress MUST also implement\n   compatibility mode for backward compatibility\
    \ with tunnel egresses\n   that do not propagate explicit congestion notifications\
    \ [RFC4774].\n   We can categorise the way that an ingress tunnel endpoint is\
    \ paired\n   with an egress as either static or dynamically discovered:\n   Static:\
    \  Tunnel endpoints paired together by prior configuration.\n      Some implementations\
    \ of encapsulator might always be statically\n      deployed, and constrained\
    \ to never be paired with a legacy\n      decapsulator (RFC 2003, RFC 2401 or\
    \ RFC 2481 or the limited\n      functionality mode of RFC 3168).  In such a case,\
    \ only normal mode\n      needs to be implemented.\n      For instance, IPsec\
    \ tunnel endpoints compatible with RFC 4301\n      invariably use Internet Key\
    \ Exchange Protocol version 2 (IKEv2)\n      [RFC5996] for key exchange, the original\
    \ specification of which\n      was introduced alongside RFC 4301.  Therefore,\
    \ both endpoints of\n      an RFC 4301 tunnel can be sure that the other end is\
    \ compatible\n      with RFC 4301, because the tunnel is only formed after IKEv2\
    \ key\n      management has completed, at which point both ends will be\n    \
    \  compliant with RFC 4301 by definition.  Therefore an IPsec tunnel\n      ingress\
    \ does not need compatibility mode, as it will never\n      interact with legacy\
    \ ECN tunnels.  To comply with the present\n      specification, it only needs\
    \ to implement the required normal\n      mode, which is identical to the pre-existing\
    \ RFC 4301 behaviour.\n   Dynamic Discovery:  Tunnel endpoints paired together\
    \ by some form of\n      tunnel endpoint discovery, typically finding an egress\
    \ on the path\n      taken by the first packet.\n      This specification does\
    \ not require or recommend dynamic discovery\n      and it does not define how\
    \ dynamic negotiation might be done, but\n      it recognises that proprietary\
    \ tunnel endpoint discovery protocols\n      exist.  It therefore sets down some\
    \ constraints on discovery\n      protocols to ensure safe interworking.\n   \
    \   If dynamic tunnel endpoint discovery might pair an ingress with a\n      legacy\
    \ egress (RFC 2003, RFC 2401, or RFC 2481 or the limited\n      functionality\
    \ mode of RFC 3168), the ingress MUST implement both\n      normal and compatibility\
    \ mode.  If the tunnel discovery process is\n      arranged to only ever find\
    \ a tunnel egress that propagates ECN\n      (RFC 3168 full functionality mode,\
    \ RFC 4301, or this present\n      specification), then a tunnel ingress can be\
    \ compliant with the\n      present specification without implementing compatibility\
    \ mode.\n      While a compliant tunnel ingress is discovering an egress, it MUST\n\
    \      send packets in compatibility mode in case the egress it discovers\n  \
    \    is a legacy egress.  If, through the discovery protocol, the\n      egress\
    \ indicates that it is compliant with the present\n      specification, with RFC\
    \ 4301 or with RFC 3168 full functionality\n      mode, the ingress can switch\
    \ itself into normal mode.  If the\n      egress denies compliance with any of\
    \ these or returns an error\n      that implies it does not understand a request\
    \ to work to any of\n      these ECN specifications, the tunnel ingress MUST remain\
    \ in\n      compatibility mode.\n   If an ingress claims compliance with this\
    \ specification, it MUST NOT\n   permanently disable ECN processing across the\
    \ tunnel (i.e., only\n   using compatibility mode).  It is true that such a tunnel\
    \ ingress is\n   at least safe with the ECN behaviour of any egress it may encounter,\n\
    \   but it does not meet the central aim of this specification:\n   introducing\
    \ ECN support to tunnels.\n   Instead, if the ingress knows that the egress does\
    \ support\n   propagation of ECN (full functionality mode of RFC 3168 or RFC 4301\n\
    \   or the present specification), it SHOULD use normal mode, in order to\n  \
    \ support ECN where possible.  Note that this section started by saying\n   an\
    \ ingress \"MUST implement\" normal mode, while it has just said an\n   ingress\
    \ \"SHOULD use\" normal mode.  This distinction is deliberate, to\n   allow the\
    \ mode to be turned off in exceptional circumstances but to\n   ensure all implementations\
    \ make normal mode available.\n   Implementation note:  If a compliant node is\
    \ the ingress for multiple\n      tunnels, a mode setting will need to be stored\
    \ for each tunnel\n      ingress.  However, if a node is the egress for multiple\
    \ tunnels,\n      none of the tunnels will need to store a mode setting, because\
    \ a\n      compliant egress only needs one mode.\n"
- title: 4.4.  Single Mode of Decapsulation
  contents:
  - "4.4.  Single Mode of Decapsulation\n   A compliant decapsulator only needs one\
    \ mode of operation.  However,\n   if a compliant egress is implemented to be\
    \ dynamically discoverable,\n   it may need to respond to discovery requests from\
    \ various types of\n   legacy tunnel ingress.  This specification does not define\
    \ how\n   dynamic negotiation might be done by (proprietary) discovery\n   protocols,\
    \ but it sets down some constraints to ensure safe\n   interworking.\n   Through\
    \ the discovery protocol, a tunnel ingress compliant with the\n   present specification\
    \ might ask if the egress is compliant with the\n   present specification, with\
    \ RFC 4301 or with RFC 3168 full\n   functionality mode.  Or an RFC 3168 tunnel\
    \ ingress might try to\n   negotiate to use limited functionality or full functionality\
    \ mode\n   [RFC3168].  In all these cases, a decapsulating tunnel egress\n   compliant\
    \ with this specification MUST agree to any of these\n   requests, since it will\
    \ behave identically in all these cases.\n   If no ECN-related mode is requested,\
    \ a compliant tunnel egress MUST\n   continue without raising any error or warning,\
    \ because its egress\n   behaviour is compatible with all the legacy ingress behaviours\
    \ that\n   do not negotiate capabilities.\n   A compliant tunnel egress SHOULD\
    \ raise a warning alarm about any\n   requests to enter modes it does not recognise\
    \ but, for 'forward\n   compatibility' with standards actions possibly defined\
    \ after it was\n   implemented, it SHOULD continue operating.\n"
- title: 5.  Updates to Earlier RFCs
  contents:
  - '5.  Updates to Earlier RFCs

    '
- title: 5.1.  Changes to RFC 4301 ECN Processing
  contents:
  - "5.1.  Changes to RFC 4301 ECN Processing\n   Ingress:  An RFC 4301 IPsec encapsulator\
    \ is not changed at all by the\n      present specification.  It uses the normal\
    \ mode of the present\n      specification, which defines packet encapsulation\
    \ identically to\n      RFC 4301.\n   Egress:  An RFC 4301 egress will need to\
    \ be updated to the new\n      decapsulation behaviour in Figure 4, in order to\
    \ comply with the\n      present specification.  However, the changes are backward\n\
    \      compatible; combinations of inner and outer that result from any\n    \
    \  protocol defined in the RFC series so far are unaffected.  Only\n      combinations\
    \ that have never been used have been changed,\n      effectively adding new behaviours\
    \ to RFC 4301 decapsulation\n      without altering existing behaviours.  The\
    \ following specific\n      updates to Section 5.1.2 of RFC 4301 have been made:\n\
    \      *  The outer, not the inner, is propagated when the outer is\n        \
    \ ECT(1) and the inner is ECT(0);\n      *  A packet with Not-ECT in the inner\
    \ and an outer of CE is\n         dropped rather than forwarded as Not-ECT;\n\
    \      *  Certain combinations of inner and outer ECN field have been\n      \
    \   identified as currently unused.  These can trigger logging\n         and/or\
    \ raise alarms.\n   Modes:  RFC 4301 tunnel endpoints do not need modes and are\
    \ not\n      updated by the modes in the present specification.  Effectively,\n\
    \      an RFC 4301 IPsec ingress solely uses the REQUIRED normal mode of\n   \
    \   encapsulation, which is unchanged from RFC 4301 encapsulation.  It\n     \
    \ will never need the OPTIONAL compatibility mode as explained in\n      Section\
    \ 4.3.\n"
- title: 5.2.  Changes to RFC 3168 ECN Processing
  contents:
  - "5.2.  Changes to RFC 3168 ECN Processing\n   Ingress:  On encapsulation, the\
    \ new rule in Figure 3 that a normal\n      mode tunnel ingress copies any ECN\
    \ field into the outer header\n      updates the full functionality behaviour\
    \ of an RFC 3168 ingress\n      (Section 9.1.1 of [RFC3168]).  Nonetheless, the\
    \ new compatibility\n      mode encapsulates packets identically to the limited\
    \ functionality\n      mode of an RFC 3168 ingress.\n   Egress:  An RFC 3168 egress\
    \ will need to be updated to the new\n      decapsulation behaviour in Figure\
    \ 4, in order to comply with the\n      present specification.  However, the changes\
    \ are backward\n      compatible; combinations of inner and outer that result\
    \ from any\n      protocol defined in the RFC series so far are unaffected.  Only\n\
    \      combinations that have never been used have been changed,\n      effectively\
    \ adding new behaviours to RFC 3168 decapsulation\n      without altering existing\
    \ behaviours.  The following specific\n      updates to Section 9.1.1 of RFC 3168\
    \ have been made:\n      *  The outer, not the inner, is propagated when the outer\
    \ is\n         ECT(1) and the inner is ECT(0);\n      *  Certain combinations\
    \ of inner and outer ECN field have been\n         identified as currently unused.\
    \  These can trigger logging\n         and/or raise alarms.\n   Modes:  An RFC\
    \ 3168 ingress will need to be updated if it is to\n      comply with the present\
    \ specification, whether or not it\n      implemented the optional full functionality\
    \ mode of Section 9.1.1\n      of RFC 3168.\n      Section 9.1 of RFC 3168 defined\
    \ a (required) limited functionality\n      mode and an (optional) full functionality\
    \ mode for a tunnel.  In\n      RFC 3168, modes applied to both ends of the tunnel,\
    \ while in the\n      present specification, modes are only used at the ingress\
    \ -- a\n      single egress behaviour covers all cases.\n      The normal mode\
    \ of encapsulation is an update to the encapsulation\n      behaviour of the full\
    \ functionality mode of an RFC 3168 ingress.\n      The compatibility mode of\
    \ encapsulation is identical to the\n      encapsulation behaviour of the limited\
    \ functionality mode of an\n      RFC 3168 ingress, except it is not always obligatory.\n\
    \      The constraints on how tunnel discovery protocols set modes in\n      Sections\
    \ 4.3 and 4.4 are an update to RFC 3168, but they are\n      unlikely to require\
    \ code changes as they document existing safe\n      practice.\n"
- title: 5.3.  Motivation for Changes
  contents:
  - "5.3.  Motivation for Changes\n   An overriding goal is to ensure the same ECN\
    \ signals can mean the\n   same thing whatever tunnels happen to encapsulate an\
    \ IP packet flow.\n   This removes gratuitous inconsistency, which otherwise constrains\
    \ the\n   available design space and makes it harder to design networks and new\n\
    \   protocols that work predictably.\n"
- title: 5.3.1.  Motivation for Changing Encapsulation
  contents:
  - "5.3.1.  Motivation for Changing Encapsulation\n   The normal mode in Section\
    \ 4 updates RFC 3168 to make all IP-in-IP\n   encapsulation of the ECN field consistent\
    \ -- consistent with the way\n   both RFC 4301 IPsec [RFC4301] and IP-in-MPLS\
    \ or MPLS-in-MPLS\n   encapsulation [RFC5129] construct the ECN field.\n   Compatibility\
    \ mode has also been defined so that an ingress compliant\n   with a version of\
    \ IPsec prior to RFC 4301 can still switch to using\n   drop across a tunnel for\
    \ backward compatibility with legacy\n   decapsulators that do not propagate ECN.\n\
    \   The trigger that motivated this update to RFC 3168 encapsulation was\n   a\
    \ Standards-Track proposal for pre-congestion notification (PCN\n   [RFC5670]).\
    \  PCN excess-traffic-marking only works correctly if the\n   ECN field is copied\
    \ on encapsulation (as in RFC 4301 and RFC 5129);\n   it does not work if ECN\
    \ is reset (as in RFC 3168).  This is because\n   PCN excess-traffic-marking depends\
    \ on the outer header revealing any\n   congestion experienced so far on the whole\
    \ path, not just since the\n   last tunnel ingress.\n   PCN allows a network operator\
    \ to add flow admission and termination\n   for inelastic traffic at the edges\
    \ of a Diffserv domain, but without\n   any per-flow mechanisms in the interior\
    \ and without the generous\n   provisioning typical of Diffserv, aiming to significantly\
    \ reduce\n   costs.  The PCN architecture [RFC5559] states that RFC 3168 IP-in-IP\n\
    \   tunnelling of the ECN field cannot be used for any tunnel ingress in\n   a\
    \ PCN domain.  Prior to the present specification, this left a stark\n   choice\
    \ between not being able to use PCN for inelastic traffic\n   control or not being\
    \ able to use the many tunnels already deployed\n   for Mobile IP, VPNs, and so\
    \ forth.\n   The present specification provides a clean solution to this problem,\n\
    \   so that network operators who want to use both PCN and tunnels can\n   specify\
    \ that every tunnel ingress in a PCN region must comply with\n   this latest specification.\n\
    \   Rather than allow tunnel specifications to fragment further into one\n   for\
    \ PCN, one for IPsec, and one for other tunnels, the opportunity\n   has been\
    \ taken to consolidate the diverging specifications back into\n   a single tunnelling\
    \ behaviour.  Resetting ECN was originally\n   motivated by a covert channel concern\
    \ that has been deliberately set\n   aside in RFC 4301 IPsec.  Therefore, the\
    \ reset behaviour of RFC 3168\n   is an anomaly that we do not need to keep. \
    \ Copying ECN on\n   encapsulation is simpler than resetting.  So, as more tunnel\n\
    \   endpoints comply with this single consistent specification,\n   encapsulation\
    \ will be simpler as well as more predictable.\n   Appendix B assesses whether\
    \ copying rather than resetting CE on\n   ingress will cause any unintended side\
    \ effects, from the three\n   perspectives of security, control, and management.\
    \  In summary, this\n   analysis finds that:\n   o  From the control perspective,\
    \ either copying or resetting works\n      for existing arrangements, but copying\
    \ has more potential for\n      simplifying control and resetting breaks at least\
    \ one proposal\n      that is already on the Standards Track.\n   o  From the\
    \ management and monitoring perspective, copying is\n      preferable.\n   o \
    \ From the traffic security perspective (enforcing congestion\n      control,\
    \ mitigating denial of service, etc.), copying is\n      preferable.\n   o  From\
    \ the information security perspective, resetting is\n      preferable, but the\
    \ IETF Security Area now considers copying\n      acceptable given the bandwidth\
    \ of a two-bit covert channel can be\n      managed.\n   Therefore, there are\
    \ two points against resetting CE on ingress while\n   copying CE causes no significant\
    \ harm.\n"
- title: 5.3.2.  Motivation for Changing Decapsulation
  contents:
  - "5.3.2.  Motivation for Changing Decapsulation\n   The specification for decapsulation\
    \ in Section 4 fixes three problems\n   with the pre-existing behaviours found\
    \ in both RFC 3168 and RFC 4301:\n   1.  The pre-existing rules prevented the\
    \ introduction of alternate\n       ECN semantics to signal more than one severity\
    \ level of\n       congestion [RFC4774], [RFC5559].  The four states of the two-bit\n\
    \       ECN field provide room for signalling two severity levels in\n       addition\
    \ to not-congested and not-ECN-capable states.  But, the\n       pre-existing\
    \ rules assumed that two of the states (ECT(0) and\n       ECT(1)) are always\
    \ equivalent.  This unnecessarily restricts the\n       use of one of four codepoints\
    \ (half a bit) in the IP (v4 and v6)\n       header.  The new rules are designed\
    \ to work in either case;\n       whether ECT(1) is more severe than or equivalent\
    \ to ECT(0).\n       As explained in Appendix B.1, the original reason for not\n\
    \       forwarding the outer ECT codepoints was to limit the covert\n       channel\
    \ across a decapsulator to 1 bit per packet.  However, now\n       that the IETF\
    \ Security Area has deemed that a two-bit covert\n       channel through an encapsulator\
    \ is a manageable risk, the same\n       should be true for a decapsulator.\n\
    \       As well as being useful for general future-proofing, this problem\n  \
    \     is immediately pressing for standardisation of pre-congestion\n       notification\
    \ (PCN), which uses two severity levels of congestion.\n       If a congested\
    \ queue used ECT(1) in the outer header to signal\n       more severe congestion\
    \ than ECT(0), the pre-existing\n       decapsulation rules would have thrown\
    \ away this congestion\n       signal, preventing tunnelled traffic from ever\
    \ knowing that it\n       should reduce its load.\n       Before the present specification\
    \ was written, the PCN working\n       group had to consider a number of wasteful\
    \ or convoluted work-\n       rounds to this problem.  Without wishing to disparage\
    \ the\n       ingenuity of these work-rounds, none were chosen for the\n     \
    \  Standards Track because they were either somewhat wasteful,\n       imprecise,\
    \ or complicated.  Instead, a baseline PCN encoding was\n       specified [RFC5696]\
    \ that supported only one severity level of\n       congestion but allowed space\
    \ for these work-rounds as\n       experimental extensions.\n       By far the\
    \ simplest approach is that taken by the current\n       specification: just to\
    \ remove the covert channel blockages from\n       tunnelling behaviour -- now\
    \ deemed unnecessary anyway.  Then,\n       network operators that want to support\
    \ two congestion severity\n       levels for PCN can specify that every tunnel\
    \ egress in a PCN\n       region must comply with this latest specification. \
    \ Having taken\n       this step, the simplest possible encoding for PCN with\
    \ two\n       severity levels of congestion [PCN3in1] can be used.\n       Not\
    \ only does this make two congestion severity levels available\n       for PCN,\
    \ but also for other potential uses of the extra ECN\n       codepoint (e.g.,\
    \ [VCP]).\n   2.  Cases are documented where a middlebox (e.g., a firewall) drops\n\
    \       packets with header values that were currently unused (CU) when\n    \
    \   the box was deployed, often on the grounds that anything\n       unexpected\
    \ might be an attack.  This tends to bar future use of\n       CU values.  The\
    \ new decapsulation rules specify optional logging\n       and/or alarms for specific\
    \ combinations of inner and outer\n       headers that are currently unused. \
    \ The aim is to give\n       implementers a recourse other than drop if they are\
    \ concerned\n       about the security of CU values.  It recognises legitimate\n\
    \       security concerns about CU values, but still eases their future\n    \
    \   use.  If the alarms are interpreted as an attack (e.g., by a\n       management\
    \ system) the offending packets can be dropped.\n       However, alarms can be\
    \ turned off if these combinations come into\n       regular use (e.g., through\
    \ a future standards action).\n   3.  While reviewing currently unused combinations\
    \ of inner and outer\n       headers, the opportunity was taken to define a single\
    \ consistent\n       behaviour for the three cases with a Not-ECT inner header\
    \ but a\n       different outer.  RFC 3168 and RFC 4301 had diverged in this\n\
    \       respect and even their common behaviours had never been\n       justified.\n\
    \       None of these combinations should result from Internet protocols\n   \
    \    in the RFC series, but future standards actions might put any or\n      \
    \ all of them to good use.  Therefore, it was decided that a\n       decapsulator\
    \ must forward a Not-ECT inner header unchanged when\n       the arriving outer\
    \ header is ECT(0) or ECT(1).  For safety, it\n       must drop a combination\
    \ of Not-ECT inner and CE outer headers.\n       Then, if some unfortunate misconfiguration\
    \ resulted in a\n       congested router marking CE on a packet that was originally\n\
    \       Not-ECT, drop would be the only appropriate signal for the egress\n  \
    \     to propagate -- the only signal a non-ECN-capable transport\n       (Not-ECT)\
    \ would understand.\n       It may seem contradictory that the same argument has\
    \ not been\n       applied to the ECT(1) codepoint, given it is being proposed\
    \ as an\n       intermediate level of congestion in a scheme progressing through\n\
    \       the IETF [PCN3in1].  Instead, a decapsulator must forward a\n       Not-ECT\
    \ inner unchanged when its outer is ECT(1).  The rationale\n       for not dropping\
    \ this CU combination is to ensure it will be\n       usable if needed in the\
    \ future.  If any misconfiguration led to\n       ECT(1) congestion signals with\
    \ a Not-ECT inner, it would not be\n       disastrous for the tunnel egress to\
    \ suppress them, because the\n       congestion should then escalate to CE marking,\
    \ which the egress\n       would drop, thus at least preventing congestion collapse.\n\
    \   Problems 2 and 3 alone would not warrant a change to decapsulation,\n   but\
    \ it was decided they are worth fixing and making consistent at the\n   same time\
    \ as decapsulation code is changed to fix problem 1 (two\n   congestion severity\
    \ levels).\n"
- title: 6.  Backward Compatibility
  contents:
  - "6.  Backward Compatibility\n   A tunnel endpoint compliant with the present specification\
    \ is\n   backward compatible when paired with any tunnel endpoint compliant\n\
    \   with any previous tunnelling RFC, whether RFC 4301, RFC 3168 (see\n   Section\
    \ 3), or the earlier RFCs summarised in Appendix A (RFC 2481,\n   RFC 2401, and\
    \ RFC 2003).  Each case is enumerated below.\n"
- title: 6.1.  Non-Issues Updating Decapsulation
  contents:
  - "6.1.  Non-Issues Updating Decapsulation\n   At the egress, this specification\
    \ only augments the per-packet\n   calculation of the ECN field (RFC 3168 and\
    \ RFC 4301) for combinations\n   of inner and outer headers that have so far not\
    \ been used in any IETF\n   protocols.\n   Therefore, all other things being equal,\
    \ if an RFC 4301 IPsec egress\n   is updated to comply with the new rules, it\
    \ will still interwork with\n   any ingress compliant with RFC 4301 and the packet\
    \ outputs will be\n   identical to those it would have output before (fully backward\n\
    \   compatible).\n   And, all other things being equal, if an RFC 3168 egress\
    \ is updated\n   to comply with the same new rules, it will still interwork with\
    \ any\n   ingress complying with any previous specification (both modes of RFC\n\
    \   3168, both modes of RFC 2481, RFC 2401, and RFC 2003) and the packet\n   outputs\
    \ will be identical to those it would have output before (fully\n   backward compatible).\n\
    \   A compliant tunnel egress merely needs to implement the one behaviour\n  \
    \ in Section 4 with no additional mode or option configuration at the\n   ingress\
    \ or egress nor any additional negotiation with the ingress.\n   The new decapsulation\
    \ rules have been defined in such a way that\n   congestion control will still\
    \ work safely if any of the earlier\n   versions of ECN processing are used unilaterally\
    \ at the encapsulating\n   ingress of the tunnel (any of RFC 2003, RFC 2401, either\
    \ mode of RFC\n   2481, either mode of RFC 3168, RFC 4301, and this present\n\
    \   specification).\n"
- title: 6.2.  Non-Update of RFC 4301 IPsec Encapsulation
  contents:
  - "6.2.  Non-Update of RFC 4301 IPsec Encapsulation\n   An RFC 4301 IPsec ingress\
    \ can comply with this new specification\n   without any update and it has no\
    \ need for any new modes, options, or\n   configuration.  So, all other things\
    \ being equal, it will continue to\n   interwork identically with any egress it\
    \ worked with before (fully\n   backward compatible).\n"
- title: 6.3.  Update to RFC 3168 Encapsulation
  contents:
  - "6.3.  Update to RFC 3168 Encapsulation\n   The encapsulation behaviour of the\
    \ new normal mode copies the ECN\n   field, whereas an RFC 3168 ingress in full\
    \ functionality mode reset\n   it.  However, all other things being equal, if\
    \ an RFC 3168 ingress is\n   updated to the present specification, the outgoing\
    \ packets from any\n   tunnel egress will still be unchanged.  This is because\
    \ all variants\n   of tunnelling at either end (RFC 4301, both modes of RFC 3168,\
    \ both\n   modes of RFC 2481, RFC 2401, RFC 2003, and the present specification)\n\
    \   have always propagated an incoming CE marking through the inner\n   header\
    \ and onward into the outgoing header; whether the outer header\n   is reset or\
    \ copied.  Therefore, if the tunnel is considered a black\n   box, the packets\
    \ output from any egress will be identical with or\n   without an update to the\
    \ ingress.  Nonetheless, if packets are\n   observed within the black box (between\
    \ the tunnel endpoints), CE\n   markings copied by the updated ingress will be\
    \ visible within the\n   black box, whereas they would not have been before. \
    \ Therefore, the\n   update to encapsulation can be termed 'black-box backward\
    \ compatible'\n   (i.e., identical unless you look inside the tunnel).\n   This\
    \ specification introduces no new backward compatibility issues\n   when a compliant\
    \ ingress talks with a legacy egress, but it has to\n   provide similar safeguards\
    \ to those already defined in RFC 3168.  RFC\n   3168 laid down rules to ensure\
    \ that an RFC 3168 ingress turns off ECN\n   (limited functionality mode) if it\
    \ is paired with a legacy egress\n   (RFC 2481, RFC 2401, or RFC 2003), which\
    \ would not propagate ECN\n   correctly.  The present specification carries forward\
    \ those rules\n   (Section 4.3).  It uses compatibility mode whenever RFC 3168\
    \ would\n   have used limited functionality mode, and their per-packet behaviours\n\
    \   are identical.  Therefore, all other things being equal, an ingress\n   using\
    \ the new rules will interwork with any legacy tunnel egress in\n   exactly the\
    \ same way as an RFC 3168 ingress (still black-box backward\n   compatible).\n"
- title: 7.  Design Principles for Alternate ECN Tunnelling Semantics
  contents:
  - "7.  Design Principles for Alternate ECN Tunnelling Semantics\n   This section\
    \ is informative, not normative.\n   Section 5 of RFC 3168 permits the Diffserv\
    \ codepoint (DSCP)[RFC2474]\n   to 'switch in' alternative behaviours for marking\
    \ the ECN field, just\n   as it switches in different per-hop behaviours (PHBs)\
    \ for scheduling.\n   [RFC4774] gives best current practice for designing such\
    \ alternative\n   ECN semantics and very briefly mentions in Section 5.4 that\n\
    \   tunnelling needs to be considered.  The guidance below complements\n   and\
    \ extends RFC 4774, giving additional guidance on designing any\n   alternate\
    \ ECN semantics that would also require alternate tunnelling\n   semantics.\n\
    \   The overriding guidance is: \"Avoid designing alternate ECN tunnelling\n \
    \  semantics, if at all possible\".  If a scheme requires tunnels to\n   implement\
    \ special processing of the ECN field for certain DSCPs, it\n   will be hard to\
    \ guarantee that every implementer of every tunnel will\n   have added the required\
    \ exception or that operators will have\n   ubiquitously deployed the required\
    \ updates.  It is unlikely a single\n   authority is even aware of all the tunnels\
    \ in a network, which may\n   include tunnels set up by applications between endpoints,\
    \ or\n   dynamically created in the network.  Therefore, it is highly likely\n\
    \   that some tunnels within a network or on hosts connected to it will\n   not\
    \ implement the required special case.\n   That said, if a non-default scheme\
    \ for tunnelling the ECN field is\n   really required, the following guidelines\
    \ might prove useful in its\n   design:\n   On encapsulation in any alternate\
    \ scheme:\n      1.  The ECN field of the outer header ought to be cleared to\
    \ Not-\n          ECT (\"00\") unless it is guaranteed that the corresponding\n\
    \          tunnel egress will correctly propagate congestion markings\n      \
    \    introduced across the tunnel in the outer header.\n      2.  If it has established\
    \ that ECN will be correctly propagated,\n          an encapsulator also ought\
    \ to copy incoming congestion\n          notification into the outer header. \
    \ The general principle\n          here is that the outer header should reflect\
    \ congestion\n          accumulated along the whole upstream path, not just since\
    \ the\n          tunnel ingress (Appendix B.3 on management and monitoring\n \
    \         explains).\n          In some circumstances (e.g., PCN [RFC5559] and\
    \ perhaps some\n          pseudowires [RFC5659]), the whole path is divided into\n\
    \          segments, each with its own congestion notification and\n         \
    \ feedback loop.  In these cases, the function that regulates\n          load\
    \ at the start of each segment will need to reset\n          congestion notification\
    \ for its segment.  Often, the point\n          where congestion notification\
    \ is reset will also be located at\n          the start of a tunnel.  However,\
    \ the resetting function can be\n          thought of as being applied to packets\
    \ after the encapsulation\n          function -- two logically separate functions\
    \ even though they\n          might run on the same physical box.  Then, the code\
    \ module\n          doing encapsulation can keep to the copying rule and the load\n\
    \          regulator module can reset congestion, without any code in\n      \
    \    either module being conditional on whether the other is there.\n   On decapsulation\
    \ in any alternate scheme:\n      1.  If the arriving inner header is Not-ECT,\
    \ the transport will\n          not understand other ECN codepoints.  If the outer\
    \ header\n          carries an explicit congestion marking, the alternate scheme\n\
    \          would be expected to drop the packet -- the only indication of\n  \
    \        congestion the transport will understand.  If the alternate\n       \
    \   scheme recommends forwarding rather than dropping such a\n          packet,\
    \ it will need to clearly justify this decision.  If the\n          inner is Not-ECT\
    \ and the outer carries any other ECN codepoint\n          that does not indicate\
    \ congestion, the alternate scheme can\n          forward the packet, but probably\
    \ only as Not-ECT.\n      2.  If the arriving inner header is one other than Not-ECT,\
    \ the\n          ECN field that the alternate decapsulation scheme forwards\n\
    \          ought to reflect the more severe congestion marking of the\n      \
    \    arriving inner and outer headers.\n      3.  Any alternate scheme will need\
    \ to define a behaviour for all\n          combinations of inner and outer headers,\
    \ even those that would\n          not be expected to result from standards known\
    \ at the time and\n          even those that would not be expected from the tunnel\
    \ ingress\n          paired with the egress at run-time.  Consideration should\
    \ be\n          given to logging such unexpected combinations and raising an\n\
    \          alarm, particularly if there is a danger that the invalid\n       \
    \   combination implies congestion signals are not being\n          propagated\
    \ correctly.  The presence of currently unused\n          combinations may represent\
    \ an attack, but the new scheme\n          should try to define a way to forward\
    \ such packets, at least\n          if a safe outgoing codepoint can be defined.\n\
    \          Raising an alarm allows a management system to decide whether\n   \
    \       the anomaly is indeed an attack, in which case it can decide\n       \
    \   to drop such packets.  This is a preferable approach to hard-\n          coded\
    \ discard of packets that seem anomalous today, but may be\n          needed tomorrow\
    \ in future standards actions.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Appendix B.1 discusses the security constraints\
    \ imposed on ECN tunnel\n   processing.  The new rules for ECN tunnel processing\
    \ (Section 4)\n   trade-off between information security (covert channels) and\
    \ traffic\n   security (congestion monitoring and control).  Ensuring congestion\n\
    \   markings are not lost is itself an aspect of security, because if we\n   allowed\
    \ congestion notification to be lost, any attempt to enforce a\n   response to\
    \ congestion would be much harder.\n   Security issues in unlikely, but possible,\
    \ scenarios:\n   Tunnels intersecting Diffserv regions with alternate ECN semantics:\n\
    \      If alternate congestion notification semantics are defined for a\n    \
    \  certain Diffserv PHB, the scope of the alternate semantics might\n      typically\
    \ be bounded by the limits of a Diffserv region or\n      regions, as envisaged\
    \ in [RFC4774] (e.g., the pre-congestion\n      notification architecture [RFC5559]).\
    \  The inner headers in\n      tunnels crossing the boundary of such a Diffserv\
    \ region but ending\n      within the region can potentially leak the external\
    \ congestion\n      notification semantics into the region, or leak the internal\n\
    \      semantics out of the region.  [RFC2983] discusses the need for\n      Diffserv\
    \ traffic conditioning to be applied at these tunnel\n      endpoints as if they\
    \ are at the edge of the Diffserv region.\n      Similar concerns apply to any\
    \ processing or propagation of the ECN\n      field at the endpoints of tunnels\
    \ with one end inside and the\n      other outside the domain.  [RFC5559] gives\
    \ specific advice on this\n      for the PCN case, but other definitions of alternate\
    \ semantics\n      will need to discuss the specific security implications in\
    \ each\n      case.\n   ECN nonce tunnel coverage:  The new decapsulation rules\
    \ improve the\n      coverage of the ECN nonce [RFC3540] relative to the previous\
    \ rules\n      in RFC 3168 and RFC 4301.  However, nonce coverage is still not\n\
    \      perfect, as this would have led to a safety problem in another\n      case.\
    \  Both are corner-cases, so discussion of the compromise\n      between them\
    \ is deferred to Appendix D.\n   Covert channel not turned off:  A legacy (RFC\
    \ 3168) tunnel ingress\n      could ask an RFC 3168 egress to turn off ECN processing\
    \ as well as\n      itself turning off ECN.  An egress compliant with the present\n\
    \      specification will agree to such a request from a legacy ingress,\n   \
    \   but it relies on the ingress always sending Not-ECT in the outer\n      header.\
    \  If the egress receives other ECN codepoints in the outer\n      it will process\
    \ them as normal, so it will actually still copy\n      congestion markings from\
    \ the outer to the outgoing header.\n      Referring, for example, to Figure 5\
    \ (Appendix B.1), although the\n      tunnel ingress 'I' will set all ECN fields\
    \ in outer headers to\n      Not-ECT, 'M' could still toggle CE or ECT(1) on and\
    \ off to\n      communicate covertly with 'B', because we have specified that\
    \ 'E'\n      only has one mode regardless of what mode it says it has\n      negotiated.\
    \  We could have specified that 'E' should have a\n      limited functionality\
    \ mode and check for such behaviour.  However,\n      we decided not to add the\
    \ extra complexity of two modes on a\n      compliant tunnel egress merely to\
    \ cater for an historic security\n      concern that is now considered manageable.\n"
- title: 9.  Conclusions
  contents:
  - "9.  Conclusions\n   This document allows tunnels to propagate an extra level\
    \ of\n   congestion severity.  It uses previously unused combinations of inner\n\
    \   and outer headers to augment the rules for calculating the ECN field\n   when\
    \ decapsulating IP packets at the egress of IPsec (RFC 4301) and\n   non-IPsec\
    \ (RFC 3168) tunnels.\n   This document also updates the ingress tunnelling encapsulation\
    \ of\n   RFC 3168 ECN to bring all IP-in-IP tunnels into line with the new\n \
    \  behaviour in the IPsec architecture of RFC 4301, which copies rather\n   than\
    \ resets the ECN field when creating outer headers.\n   The need for both these\
    \ updated behaviours was triggered by the\n   introduction of pre-congestion notification\
    \ (PCN) onto the IETF\n   Standards Track.  Operators wanting to support PCN or\
    \ other alternate\n   ECN schemes that use an extra severity level can require\
    \ that their\n   tunnels comply with the present specification.  This is not a\
    \ fork in\n   the RFC series, it is an update that can be deployed first by those\n\
    \   that need it, and subsequently by all tunnel endpoint implementations\n  \
    \ during general code maintenance.  It is backward compatible with all\n   previous\
    \ tunnelling behaviours, so existing single severity level\n   schemes will continue\
    \ to work as before, but support for two severity\n   levels will gradually be\
    \ added to the Internet.\n   The new rules propagate changes to the ECN field\
    \ across tunnel\n   endpoints that previously blocked them to restrict the bandwidth\
    \ of a\n   potential covert channel.  Limiting the channel's bandwidth to two\n\
    \   bits per packet is now considered sufficient.\n   At the same time as removing\
    \ these legacy constraints, the\n   opportunity has been taken to draw together\
    \ diverging tunnel\n   specifications into a single consistent behaviour.  Then,\
    \ any tunnel\n   can be deployed unilaterally, and it will support the full range\
    \ of\n   congestion control and management schemes without any modes or\n   configuration.\
    \  Further, any host or router can expect the ECN field\n   to behave in the same\
    \ way, whatever type of tunnel might intervene in\n   the path.  This new certainty\
    \ could enable new uses of the ECN field\n   that would otherwise be confounded\
    \ by ambiguity.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Thanks to David Black for his insightful reviews and\
    \ patient\n   explanations of better ways to think about function placement and\n\
    \   alarms.  Thanks to David and to Anil Agarwal for pointing out cases\n   where\
    \ it is safe to forward CU combinations of headers.  Also, thanks\n   to Arnaud\
    \ Jacquet for the idea for Appendix C.  Thanks to Gorry\n   Fairhurst, Teco Boot,\
    \ Michael Menth, Bruce Davie, Toby Moncaster,\n   Sally Floyd, Alfred Hoenes,\
    \ Gabriele Corliano, Ingemar Johansson,\n   Philip Eardley, and David Harrington\
    \ for their thoughts and careful\n   review comments, and to Stephen Hanna, Ben\
    \ Campbell, and members of\n   the IESG for respectively conducting the Security\
    \ Directorate,\n   General Area, and IESG reviews.\n   Bob Briscoe is partly funded\
    \ by Trilogy, a research project (ICT-\n   216372) supported by the European Community\
    \ under its Seventh\n   Framework Programme.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2003]  Perkins, C., \"IP Encapsulation within\
    \ IP\", RFC 2003,\n              October 1996.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC3168]  Ramakrishnan, K., Floyd, S., and D.\
    \ Black, \"The Addition\n              of Explicit Congestion Notification (ECN)\
    \ to IP\",\n              RFC 3168, September 2001.\n   [RFC4301]  Kent, S. and\
    \ K. Seo, \"Security Architecture for the\n              Internet Protocol\",\
    \ RFC 4301, December 2005.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [PCN3in1]  Briscoe, B., Moncaster, T., and\
    \ M. Menth, \"Encoding 3 PCN-\n              States in the IP header using a single\
    \ DSCP\", Work\n              in Progress, July 2010.\n   [RFC2401]  Kent, S.\
    \ and R. Atkinson, \"Security Architecture for the\n              Internet Protocol\"\
    , RFC 2401, November 1998.\n   [RFC2474]  Nichols, K., Blake, S., Baker, F., and\
    \ D. Black,\n              \"Definition of the Differentiated Services Field (DS\n\
    \              Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n            \
    \  December 1998.\n   [RFC2481]  Ramakrishnan, K. and S. Floyd, \"A Proposal to\
    \ add Explicit\n              Congestion Notification (ECN) to IP\", RFC 2481,\n\
    \              January 1999.\n   [RFC2983]  Black, D., \"Differentiated Services\
    \ and Tunnels\",\n              RFC 2983, October 2000.\n   [RFC3540]  Spring,\
    \ N., Wetherall, D., and D. Ely, \"Robust Explicit\n              Congestion Notification\
    \ (ECN) Signaling with Nonces\",\n              RFC 3540, June 2003.\n   [RFC4774]\
    \  Floyd, S., \"Specifying Alternate Semantics for the\n              Explicit\
    \ Congestion Notification (ECN) Field\", BCP 124,\n              RFC 4774, November\
    \ 2006.\n   [RFC5129]  Davie, B., Briscoe, B., and J. Tay, \"Explicit Congestion\n\
    \              Marking in MPLS\", RFC 5129, January 2008.\n   [RFC5559]  Eardley,\
    \ P., \"Pre-Congestion Notification (PCN)\n              Architecture\", RFC 5559,\
    \ June 2009.\n   [RFC5659]  Bocci, M. and S. Bryant, \"An Architecture for Multi-\n\
    \              Segment Pseudowire Emulation Edge-to-Edge\", RFC 5659,\n      \
    \        October 2009.\n   [RFC5670]  Eardley, P., \"Metering and Marking Behaviour\
    \ of PCN-\n              Nodes\", RFC 5670, November 2009.\n   [RFC5696]  Moncaster,\
    \ T., Briscoe, B., and M. Menth, \"Baseline\n              Encoding and Transport\
    \ of Pre-Congestion Information\",\n              RFC 5696, November 2009.\n \
    \  [RFC5996]  Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n            \
    \  \"Internet Key Exchange Protocol Version 2 (IKEv2)\",\n              RFC 5996,\
    \ September 2010.\n   [VCP]      Xia, Y., Subramanian, L., Stoica, I., and S.\
    \ Kalyanaraman,\n              \"One more bit is enough\", Proc. SIGCOMM'05, ACM\n\
    \              CCR 35(4)37--48, 2005,\n              <http://doi.acm.org/10.1145/1080091.1080098>.\n"
- title: Appendix A.  Early ECN Tunnelling RFCs
  contents:
  - "Appendix A.  Early ECN Tunnelling RFCs\n   IP-in-IP tunnelling was originally\
    \ defined in [RFC2003].  On\n   encapsulation, the incoming header was copied\
    \ to the outer and on\n   decapsulation, the outer was simply discarded.  Initially,\
    \ IPsec\n   tunnelling [RFC2401] followed the same behaviour.\n   When ECN was\
    \ introduced experimentally in [RFC2481], legacy (RFC 2003\n   or RFC 2401) tunnels\
    \ would have discarded any congestion markings\n   added to the outer header,\
    \ so RFC 2481 introduced rules for\n   calculating the outgoing header from a\
    \ combination of the inner and\n   outer on decapsulation.  RFC 2481 also introduced\
    \ a second mode for\n   IPsec tunnels, which turned off ECN processing (Not-ECT)\
    \ in the outer\n   header on encapsulation because an RFC 2401 decapsulator would\n\
    \   discard the outer on decapsulation.  For RFC 2401 IPsec, this had the\n  \
    \ side effect of completely blocking the covert channel.\n   In RFC 2481, the\
    \ ECN field was defined as two separate bits.  But\n   when ECN moved from Experimental\
    \ to Standards Track [RFC3168], the\n   ECN field was redefined as four codepoints.\
    \  This required a\n   different calculation of the ECN field from that used in\
    \ RFC 2481 on\n   decapsulation.  RFC 3168 also had two modes; a 'full functionality\n\
    \   mode' that restricted the covert channel as much as possible but\n   still\
    \ allowed ECN to be used with IPsec, and another that completely\n   turned off\
    \ ECN processing across the tunnel.  This 'limited\n   functionality mode' both\
    \ offered a way for operators to completely\n   block the covert channel and allowed\
    \ an RFC 3168 ingress to interwork\n   with a legacy tunnel egress (RFC 2481,\
    \ RFC 2401, or RFC 2003).\n   The present specification includes a similar compatibility\
    \ mode to\n   interwork safely with tunnels compliant with any of these three\n\
    \   earlier RFCs.  However, unlike RFC 3168, it is only a mode of the\n   ingress,\
    \ as decapsulation behaviour is the same in either case.\n"
- title: Appendix B.  Design Constraints
  contents:
  - "Appendix B.  Design Constraints\n   Tunnel processing of a congestion notification\
    \ field has to meet\n   congestion control and management needs without creating\
    \ new\n   information security vulnerabilities (if information security is\n \
    \  required).  This appendix documents the analysis of the trade-offs\n   between\
    \ these factors that led to the new encapsulation rules in\n   Section 4.1.\n"
- title: B.1.  Security Constraints
  contents:
  - "B.1.  Security Constraints\n   Information security can be assured by using various\
    \ end-to-end\n   security solutions (including IPsec in transport mode [RFC4301]),\
    \ but\n   a commonly used scenario involves the need to communicate between two\n\
    \   physically protected domains across the public Internet.  In this\n   case,\
    \ there are certain management advantages to using IPsec in\n   tunnel mode solely\
    \ across the publicly accessible part of the path.\n   The path followed by a\
    \ packet then crosses security 'domains'; the\n   ones protected by physical or\
    \ other means before and after the tunnel\n   and the one protected by an IPsec\
    \ tunnel across the otherwise\n   unprotected domain.  The scenario in Figure\
    \ 5 will be used where\n   endpoints 'A' and 'B' communicate through a tunnel.\
    \  The tunnel\n   ingress 'I' and egress 'E' are within physically protected edge\n\
    \   domains, while the tunnel spans an unprotected internetwork where\n   there\
    \ may be 'men in the middle', M.\n                physically       unprotected\
    \     physically\n            <-protected domain-><--domain--><-protected domain->\n\
    \            +------------------+            +------------------+\n          \
    \  |                  |      M     |                  |\n            |    A-------->I=========>==========>E-------->B\
    \   |\n            |                  |            |                  |\n    \
    \        +------------------+            +------------------+\n              \
    \             <----IPsec secured---->\n                                   tunnel\n\
    \                      Figure 5: IPsec Tunnel Scenario\n   IPsec encryption is\
    \ typically used to prevent 'M' seeing messages\n   from 'A' to 'B'.  IPsec authentication\
    \ is used to prevent 'M'\n   masquerading as the sender of messages from 'A' to\
    \ 'B' or altering\n   their contents.  'I' can use IPsec tunnel mode to allow\
    \ 'A' to\n   communicate with 'B', but impose encryption to prevent 'A' leaking\n\
    \   information to 'M'.  Or 'E' can insist that 'I' uses tunnel mode\n   authentication\
    \ to prevent 'M' communicating information to 'B'.\n   Mutable IP header fields\
    \ such as the ECN field (as well as the Time\n   to Live (TTL) / Hop Limit and\
    \ DS fields) cannot be included in the\n   cryptographic calculations of IPsec.\
    \  Therefore, if 'I' copies these\n   mutable fields into the outer header that\
    \ is exposed across the\n   tunnel it will have allowed a covert channel from\
    \ 'A' to 'M' that\n   bypasses its encryption of the inner header.  And if 'E'\
    \ copies these\n   fields from the outer header to the outgoing, even if it validates\n\
    \   authentication from 'I', it will have allowed a covert channel from\n   'M'\
    \ to 'B'.\n   ECN at the IP layer is designed to carry information about congestion\n\
    \   from a congested resource towards downstream nodes.  Typically, a\n   downstream\
    \ transport might feed the information back somehow to the\n   point upstream\
    \ of the congestion that can regulate the load on the\n   congested resource,\
    \ but other actions are possible [RFC3168], Section\n   6.  In terms of the above\
    \ unicast scenario, ECN effectively intends\n   to create an information channel\
    \ (for congestion signalling) from 'M'\n   to 'B' (for 'B' to feed back to 'A').\
    \  Therefore, the goals of IPsec\n   and ECN are mutually incompatible, requiring\
    \ some compromise.\n   With respect to using the DS or ECN fields as covert channels,\n\
    \   Section 5.1.2 of RFC 4301 says, \"controls are provided to manage the\n  \
    \ bandwidth of this channel\".  Using the ECN processing rules of RFC\n   4301,\
    \ the channel bandwidth is two bits per datagram from 'A' to 'M'\n   and one bit\
    \ per datagram from 'M' to 'B' (because 'E' limits the\n   combinations of the\
    \ 2-bit ECN field that it will copy).  In both\n   cases, the covert channel bandwidth\
    \ is further reduced by noise from\n   any real congestion marking.  RFC 4301\
    \ implies that these covert\n   channels are sufficiently limited to be considered\
    \ a manageable\n   threat.  However, with respect to the larger (six-bit) DS field,\
    \ the\n   same section of RFC 4301 says not copying is the default, but a\n  \
    \ configuration option can allow copying \"to allow a local\n   administrator\
    \ to decide whether the covert channel provided by\n   copying these bits outweighs\
    \ the benefits of copying\".  Of course, an\n   administrator who plans to copy\
    \ the DS field has to take into account\n   that it could be concatenated with\
    \ the ECN field, creating a covert\n   channel with eight bits per datagram.\n\
    \   For tunnelling the six-bit Diffserv field, two conceptual models have\n  \
    \ had to be defined so that administrators can trade off security\n   against\
    \ the needs of traffic conditioning [RFC2983]:\n   The uniform model:  where the\
    \ Diffserv field is preserved end-to-end\n      by copying into the outer header\
    \ on encapsulation and copying from\n      the outer header on decapsulation.\n\
    \   The pipe model:  where the outer header is independent of that in the\n  \
    \    inner header so it hides the Diffserv field of the inner header\n      from\
    \ any interaction with nodes along the tunnel.\n   However, for ECN, the new IPsec\
    \ security architecture in RFC 4301\n   only standardised one tunnelling model\
    \ equivalent to the uniform\n   model.  It deemed that simplicity was more important\
    \ than allowing\n   administrators the option of a tiny increment in security,\
    \ especially\n   given not copying congestion indications could seriously harm\n\
    \   everyone's network service.\n"
- title: B.2.  Control Constraints
  contents:
  - "B.2.  Control Constraints\n   Congestion control requires that any congestion\
    \ notification marked\n   into packets by a resource will be able to traverse\
    \ a feedback loop\n   back to a function capable of controlling the load on that\
    \ resource.\n   To be precise, rather than calling this function the data source,\
    \ it\n   will be called the 'Load Regulator'.  This allows for exceptional\n \
    \  cases where load is not regulated by the data source, but usually the\n   two\
    \ terms will be synonymous.  Note the term \"a function _capable of_\n   controlling\
    \ the load\" deliberately includes a source application that\n   doesn't actually\
    \ control the load but ought to (e.g., an application\n   without congestion control\
    \ that uses UDP).\n                 A--->R--->I=========>M=========>E-------->B\n\
    \                     Figure 6: Simple Tunnel Scenario\n   A similar tunnelling\
    \ scenario to the IPsec one just described will\n   now be considered, but without\
    \ the different security domains,\n   because the focus now shifts to whether\
    \ the control loop and\n   management monitoring work (Figure 6).  If resources\
    \ in the tunnel\n   are to be able to explicitly notify congestion and the feedback\
    \ path\n   is from 'B' to 'A', it will certainly be necessary for 'E' to copy\n\
    \   any CE marking from the outer header to the outgoing header for\n   onward\
    \ transmission to 'B'; otherwise, congestion notification from\n   resources like\
    \ 'M' cannot be fed back to the Load Regulator ('A').\n   But it does not seem\
    \ necessary for 'I' to copy CE markings from the\n   incoming to the outer header.\
    \  For instance, if resource 'R' is\n   congested, it can send congestion information\
    \ to 'B' using the\n   congestion field in the inner header without 'I' copying\
    \ the\n   congestion field into the outer header and 'E' copying it back to the\n\
    \   outgoing header.  'E' can still write any additional congestion\n   marking\
    \ introduced across the tunnel into the congestion field of the\n   outgoing header.\n\
    \   All this shows that 'E' can preserve the control loop irrespective of\n  \
    \ whether 'I' copies congestion notification into the outer header or\n   resets\
    \ it.\n   That is the situation for existing control arrangements but, because\n\
    \   copying reveals more information, it would open up possibilities for\n   better\
    \ control system designs.  For instance, resetting CE marking on\n   encapsulation\
    \ breaks the Standards-Track PCN congestion marking\n   scheme [RFC5670].  It\
    \ ends up removing excessive amounts of traffic\n   unnecessarily (Section 5.3.1).\
    \  Whereas copying CE markings at\n   ingress leads to the correct control behaviour.\n"
- title: B.3.  Management Constraints
  contents:
  - "B.3.  Management Constraints\n   As well as control, there are also management\
    \ constraints.\n   Specifically, a management system may monitor congestion markings\
    \ in\n   passing packets, perhaps at the border between networks as part of a\n\
    \   service level agreement.  For instance, monitors at the borders of\n   autonomous\
    \ systems may need to measure how much congestion has\n   accumulated so far along\
    \ the path, perhaps to determine between them\n   how much of the congestion is\
    \ contributed by each domain.\n   In this document, the baseline of congestion\
    \ marking (or the\n   Congestion Baseline) is defined as the source of the layer\
    \ that\n   created (or most recently reset) the congestion notification field.\n\
    \   When monitoring congestion, it would be desirable if the Congestion\n   Baseline\
    \ did not depend on whether or not packets were tunnelled.\n   Given some tunnels\
    \ cross domain borders (e.g., consider 'M' in\n   Figure 6 is monitoring a border),\
    \ it would therefore be desirable for\n   'I' to copy congestion accumulated so\
    \ far into the outer headers, so\n   that it is exposed across the tunnel.\n \
    \  For management purposes, it might be useful for the tunnel egress to\n   be\
    \ able to monitor whether congestion occurred across a tunnel or\n   upstream\
    \ of it.  Superficially, it appears that copying congestion\n   markings at the\
    \ ingress would make this difficult, whereas it was\n   straightforward when an\
    \ RFC 3168 ingress reset them.  However,\n   Appendix C gives a simple and precise\
    \ method for a tunnel egress to\n   infer the congestion level introduced across\
    \ a tunnel.  It works\n   irrespective of whether the ingress copies or resets\
    \ congestion\n   markings.\n"
- title: Appendix C.  Contribution to Congestion across a Tunnel
  contents:
  - "Appendix C.  Contribution to Congestion across a Tunnel\n   This specification\
    \ mandates that a tunnel ingress determines the ECN\n   field of each new outer\
    \ tunnel header by copying the arriving header.\n   Concern has been expressed\
    \ that this will make it difficult for the\n   tunnel egress to monitor congestion\
    \ introduced only along a tunnel,\n   which is easy if the outer ECN field is\
    \ reset at a tunnel ingress\n   (RFC 3168 full functionality mode).  However,\
    \ in fact copying CE\n   marks at ingress will still make it easy for the egress\
    \ to measure\n   congestion introduced across a tunnel, as illustrated below.\n\
    \   Consider 100 packets measured at the egress.  Say it measures that 30\n  \
    \ are CE marked in the inner and outer headers and 12 have additional\n   CE marks\
    \ in the outer but not the inner.  This means packets arriving\n   at the ingress\
    \ had already experienced 30% congestion.  However, it\n   does not mean there\
    \ was 12% congestion across the tunnel.  The\n   correct calculation of congestion\
    \ across the tunnel is p_t = 12/\n   (100-30) = 12/70 = 17%.  This is easy for\
    \ the egress to measure.  It\n   is simply the proportion of packets not marked\
    \ in the inner header\n   (70) that have a CE marking in the outer header (12).\
    \  This technique\n   works whether the ingress copies or resets CE markings,\
    \ so it can be\n   used by an egress that is not sure with which RFC the ingress\n\
    \   complies.\n   Figure 7 illustrates this in a combinatorial probability diagram.\n\
    \   The square represents 100 packets.  The 30% division along the bottom\n  \
    \ represents marking before the ingress, and the p_t division up the\n   side\
    \ represents marking introduced across the tunnel.\n        ^ outer header marking\n\
    \        |\n   100% +-----+---------+       The large square\n        |     |\
    \         |       represents 100 packets\n        | 30  |         |\n        |\
    \     |         |   p_t = 12/(100-30)\n    p_t +     +---------+       = 12/70\n\
    \        |     |   12    |       = 17%\n      0 +-----+---------+--->\n      \
    \  0    30%       100%  inner header marking\n       Figure 7: Tunnel Marking\
    \ of Packets Already Marked at Ingress\n"
- title: Appendix D.  Compromise on Decap with ECT(1) Inner and ECT(0) Outer
  contents:
  - "Appendix D.  Compromise on Decap with ECT(1) Inner and ECT(0) Outer\n   A packet\
    \ with an ECT(1) inner and an ECT(0) outer should never arise\n   from any known\
    \ IETF protocol.  Without giving a reason, RFC 3168 and\n   RFC 4301 both say\
    \ the outer should be ignored when decapsulating such\n   a packet.  This appendix\
    \ explains why it was decided not to change\n   this advice.\n   In summary, ECT(0)\
    \ always means 'not congested' and ECT(1) may imply\n   the same [RFC3168] or\
    \ it may imply a higher severity congestion\n   signal [RFC4774], [PCN3in1], depending\
    \ on the transport in use.\n   Whether or not they mean the same, at the ingress\
    \ the outer should\n   have started the same as the inner, and only a broken or\
    \ compromised\n   router could have changed the outer to ECT(0).\n   The decapsulator\
    \ can detect this anomaly.  But the question is,\n   should it correct the anomaly\
    \ by ignoring the outer, or should it\n   reveal the anomaly to the end-to-end\
    \ transport by forwarding the\n   outer?\n   On balance, it was decided that the\
    \ decapsulator should correct the\n   anomaly, but log the event and optionally\
    \ raise an alarm.  This is\n   the safe action if ECT(1) is being used as a more\
    \ severe marking than\n   ECT(0), because it passes the more severe signal to\
    \ the transport.\n   However, it is not a good idea to hide anomalies, which is\
    \ why an\n   optional alarm is suggested.  It should be noted that this anomaly\n\
    \   may be the result of two changes to the outer: a broken or\n   compromised\
    \ router within the tunnel might be erasing congestion\n   markings introduced\
    \ earlier in the same tunnel by a congested router.\n   In this case, the anomaly\
    \ would be losing congestion signals, which\n   needs immediate attention.\n \
    \  The original reason for defining ECT(0) and ECT(1) as equivalent was\n   so\
    \ that the data source could use the ECN nonce [RFC3540] to detect\n   if congestion\
    \ signals were being erased.  However, in this case, the\n   decapsulator does\
    \ not need a nonce to detect any anomalies introduced\n   within the tunnel, because\
    \ it has the inner as a record of the header\n   at the ingress.  Therefore, it\
    \ was decided that the best compromise\n   would be to give precedence to solving\
    \ the safety issue over\n   revealing the anomaly, because the anomaly could at\
    \ least be detected\n   and dealt with internally.\n   Superficially, the opposite\
    \ case where the inner and outer carry\n   different ECT values, but with an ECT(1)\
    \ outer and ECT(0) inner,\n   seems to require a similar compromise.  However,\
    \ because that case is\n   reversed, no compromise is necessary; it is best to\
    \ forward the outer\n   whether the transport expects the ECT(1) to mean a higher\
    \ severity\n   than ECT(0) or the same severity.  Forwarding the outer either\n\
    \   preserves a higher value (if it is higher) or it reveals an anomaly\n   to\
    \ the transport (if the two ECT codepoints mean the same severity).\n"
- title: Appendix E.  Open Issues
  contents:
  - "Appendix E.  Open Issues\n   The new decapsulation behaviour defined in Section\
    \ 4.2 adds support\n   for propagation of two severity levels of congestion. \
    \ However,\n   transports have no way to discover whether there are any legacy\n\
    \   tunnels on their path that will not propagate two severity levels.\n   It\
    \ would have been nice to add a feature for transports to check path\n   support,\
    \ but this remains an open issue that will have to be\n   addressed in any future\
    \ standards action to define an end-to-end\n   scheme that requires two severity\
    \ levels of congestion.  PCN avoids\n   this problem because it is only for a\
    \ controlled region, so all\n   legacy tunnels can be upgraded by the same operator\
    \ that deploys PCN.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Bob Briscoe\n   BT\n   B54/77, Adastral Park\n   Martlesham\
    \ Heath\n   Ipswich  IP5 3RE\n   UK\n   Phone: +44 1473 645196\n   EMail: bob.briscoe@bt.com\n\
    \   URI:   http://bobbriscoe.net/\n"
