- title: __initial_text__
  contents:
  - "   Interworking between the Session Initiation Protocol (SIP) and the\n     \
    \ Extensible Messaging and Presence Protocol (XMPP): Presence\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a bidirectional protocol mapping for the\n\
    \   exchange of presence information between the Session Initiation\n   Protocol\
    \ (SIP) and the Extensible Messaging and Presence Protocol\n   (XMPP).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7248.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Intended Audience ...............................................3\n  \
    \ 3. Terminology .....................................................3\n   4.\
    \ Subscriptions to Presence Information ...........................4\n      4.1.\
    \ Overview ...................................................4\n      4.2. XMPP\
    \ to SIP ................................................5\n           4.2.1.\
    \ Establishing a Presence Subscription ................5\n           4.2.2. Refreshing\
    \ a Presence Subscription ..................9\n           4.2.3. Cancelling a\
    \ Presence Subscription .................10\n      4.3. SIP to XMPP ...............................................12\n\
    \           4.3.1. Establishing a Presence Subscription ...............12\n  \
    \         4.3.2. Refreshing a Presence Subscription .................14\n    \
    \       4.3.3. Cancelling a Presence Subscription .................17\n   5. Notifications\
    \ of Presence Information ..........................17\n      5.1. Overview ..................................................17\n\
    \      5.2. XMPP to SIP ...............................................19\n  \
    \    5.3. SIP to XMPP ...............................................22\n   6.\
    \ Requests for Presence Information ..............................24\n      6.1.\
    \ XMPP to SIP ...............................................24\n      6.2. SIP\
    \ to XMPP ...............................................25\n   7. Security Considerations\
    \ ........................................26\n   8. References .....................................................27\n\
    \      8.1. Normative References ......................................27\n  \
    \    8.2. Informative References ....................................27\n   Appendix\
    \ A. Acknowledgements ......................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In order to help ensure interworking between presence systems\
    \ that\n   conform to the instant message / presence requirements [RFC2779], it\n\
    \   is important to clearly define protocol mappings between such\n   systems.\
    \  Within the IETF, work has proceeded on two presence\n   technologies:\n   o\
    \  Various extensions to the Session Initiation Protocol ([RFC3261])\n      for\
    \ presence, in particular [RFC3856]\n   o  The Extensible Messaging and Presence\
    \ Protocol (XMPP), which\n      consists of a formalization of the core XML streaming\
    \ protocols\n      developed originally by the Jabber open-source community; the\n\
    \      relevant specifications are [RFC6120] for the XML streaming layer\n   \
    \   and [RFC6121] for basic presence and instant-messaging extensions\n   One\
    \ approach to helping ensure interworking between these protocols\n   is to map\
    \ each protocol to the abstract semantics described in\n   [RFC3860]; although\
    \ that is the approach taken by both [RFC3922] and\n   [SIMPLE-CPIM-MAPPING],\
    \ to the best of our knowledge that approach has\n   never been implemented. \
    \ The approach taken in this document is to\n   directly map semantics from one\
    \ protocol to another (i.e., from SIP/\n   SIMPLE (SIP for Instant Messaging and\
    \ Presence Leveraging Extensions)\n   to XMPP and vice versa), since that is how\
    \ existing systems solve the\n   interworking problem.\n   The architectural assumptions\
    \ underlying such direct mappings are\n   provided in [RFC7247], including mapping\
    \ of addresses and error\n   conditions.  The mappings specified in this document\
    \ cover basic\n   presence functionality.  Mapping of more advanced functionality\n\
    \   (e.g., so-called \"rich presence\") is out of scope for this document.\n"
- title: 2.  Intended Audience
  contents:
  - "2.  Intended Audience\n   The documents in this series are intended for use by\
    \ software\n   developers who have an existing system based on one of these\n\
    \   technologies (e.g., SIP) and would like to enable communication from\n   that\
    \ existing system to systems based on the other technology (e.g.,\n   XMPP). \
    \ We assume that readers are familiar with the core\n   specifications for both\
    \ SIP [RFC3261] and XMPP [RFC6120], with the\n   base document for this series\
    \ [RFC7247], and with the following\n   presence-related specifications:\n   o\
    \  \"A Presence Event Package for the Session Initiation Protocol\n      (SIP)\"\
    \ [RFC3856]\n   o  \"Presence Information Data Format (PIDF)\" [RFC3863]\n   o\
    \  \"Extensible Messaging and Presence Protocol (XMPP): Instant\n      Messaging\
    \ and Presence\" [RFC6121]\n   o  \"SIP-Specific Event Notification\" [RFC6665]\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   A number of terms used here (user, contact, subscription,\n\
    \   notification, etc.) are explained in [RFC3261], [RFC3856], [RFC6120],\n  \
    \ and [RFC6121].  This document uses some, but not all, of the terms\n   defined\
    \ in the Model for Presence and Instant Messaging [RFC2778].\n   In flow diagrams,\
    \ SIP traffic is shown using arrows such as \"***>\",\n   whereas XMPP traffic\
    \ is shown using arrows such as \"...>\".\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119].\n"
- title: 4.  Subscriptions to Presence Information
  contents:
  - '4.  Subscriptions to Presence Information

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   Both XMPP and presence-aware SIP systems enable entities (often,\
    \ but\n   not necessarily, human users) to subscribe to the presence of other\n\
    \   entities.  XMPP presence subscriptions are specified in [RFC6121].\n   Presence\
    \ subscriptions using a SIP event package for presence are\n   specified in [RFC3856].\n\
    \   As described in [RFC6121], XMPP presence subscriptions are managed\n   using\
    \ XMPP <presence/> stanzas of type \"subscribe\", \"subscribed\",\n   \"unsubscribe\"\
    , and \"unsubscribed\".  The main subscription states are:\n   o  \"none\" (neither\
    \ the user nor the contact is subscribed to the\n      other's presence information)\n\
    \   o  \"from\" (the user has a subscription from the contact)\n   o  \"to\" (the\
    \ user has a subscription to the contact's presence\n      information)\n   o\
    \  \"both\" (both user and contact are subscribed to each other's\n      presence\
    \ information)\n   As described in [RFC3856], SIP presence subscriptions are managed\n\
    \   through the use of SIP SUBSCRIBE events sent from a SIP user agent to\n  \
    \ an intended recipient who is most generally referenced by a Presence\n   URI\
    \ of the form <pres:user@domain> but who might be referenced by a\n   SIP or SIPS\
    \ (Session Initiation Protocol Secure) URI of the form\n   <sip:user@domain> or\
    \ <sips:user@domain>.  In practice, 'pres' URIs\n   are rarely used, which is\
    \ why the examples in this document use 'sip'\n   URIs.\n   The subscription models\
    \ underlying XMPP and SIP differ mainly in the\n   fact that XMPP presence subscriptions\
    \ are long-lived (indeed\n   permanent if not explicitly cancelled, so that a\
    \ subscription need\n   never be refreshed during any given presence \"session\"\
    ), whereas SIP\n   presence subscriptions are short-lived (the default time-to-live\
    \ of a\n   SIP presence subscription is 3600 seconds, as specified in\n   Section\
    \ 6.4 of [RFC3856], so that a subscription needs to be\n   explicitly refreshed\
    \ if it will have the appearance of being\n   permanent or even of lasting as\
    \ long as the duration of a presence\n   \"session\").  This disparity has implications\
    \ for the handling of\n   subscription cancellations in either direction and,\
    \ from the SIP\n   side, subscription refreshes.\n"
- title: 4.2.  XMPP to SIP
  contents:
  - '4.2.  XMPP to SIP

    '
- title: 4.2.1.  Establishing a Presence Subscription
  contents:
  - "4.2.1.  Establishing a Presence Subscription\n   The following diagram illustrates\
    \ the protocol flow for establishing\n   a presence subscription from an XMPP\
    \ user to a SIP user, as further\n   explained in the text and examples after\
    \ the diagram.\n   XMPP       XMPP      XMPP-to-SIP    SIP-to-XMPP     SIP   \
    \       SIP\n   User      Server      Gateway        Gateway       Server    \
    \    User\n    |           |            |              |            |        \
    \   |\n    | (F1) XMPP |            |              |            |           |\n\
    \    | subscribe |            |              |            |           |\n    |..........>|\
    \            |              |            |           |\n    |           | (F2)\
    \ XMPP  |              |            |           |\n    |           | subscribe\
    \  |              |            |           |\n    |           |...........>| \
    \             |            |           |\n    |           |            | (F3)\
    \ SIP SUBSCRIBE        |           |\n    |           |            |**************************>|\
    \           |\n    |           |            |              |            | (F4)\
    \ SIP  |\n    |           |            |              |            | SUBSCRIBE\
    \ |\n    |           |            |              |            |**********>|\n\
    \    |           |            |              |            | (F5) SIP  |\n    |\
    \           |            |              |            | 200 OK    |\n    |    \
    \       |            |              | (F6) SIP   |<**********|\n    |        \
    \   |            |              | 200 OK     | (F7) SIP  |\n    |           |\
    \            |              |<***********| NOTIFY    |\n    |           |    \
    \        |              |            |<**********|\n    |           |        \
    \    |              | (F8) SIP   |           |\n    |           |            |\
    \              | NOTIFY     |           |\n    |           |            |    \
    \          |<***********|           |\n    |           |            |        \
    \      | (F9) SIP   |           |\n    |           |            |            \
    \  | 200 OK     |           |\n    |           |            |              |***********>|\
    \           |\n    |           |            |              |            | (F10)\
    \ SIP |\n    |           |    (F11) XMPP subscribed  |            | 200 OK   \
    \ |\n    |           |<..........................|            |**********>|\n\
    \    |           |    (F12) XMPP presence    |            |           |\n    |\
    \           |<..........................|            |           |\n    | (F13)\
    \ XMPP|            |              |            |           |\n    | subscribed|\
    \            |              |            |           |\n    |<..........|    \
    \        |              |            |           |\n    | (F14) XMPP|        \
    \    |              |            |           |\n    | presence  |            |\
    \              |            |           |\n    |<..........|            |    \
    \          |            |           |\n   An XMPP user (e.g., juliet@example.com)\
    \ initiates a subscription by\n   sending a subscription request to a contact\
    \ (e.g.,\n   romeo@example.net), and the contact either accepts or declines the\n\
    \   request.  If the contact accepts the request, the user will have a\n   subscription\
    \ to the contact's presence information until (1) the user\n   unsubscribes or\
    \ (2) the contact cancels the subscription.  The\n   subscription request is encapsulated\
    \ in a <presence/> stanza of type\n   \"subscribe\":\n   Example 1: XMPP User\
    \ Subscribes to SIP Contact (F1)\n   |  <presence from='juliet@example.com'\n\
    \   |            to='romeo@example.net'\n   |            type='subscribe'/>\n\
    \   Upon receiving such a <presence/> stanza, the XMPP server to which\n   Juliet\
    \ has connected needs to determine the identity of the\n   domainpart in the 'to'\
    \ address, which it does by following the\n   procedures explained in Section\
    \ 5 of [RFC7247].  If the domain is a\n   SIP domain, the XMPP server will hand\
    \ off the <presence/> stanza to\n   an associated XMPP-to-SIP gateway or connection\
    \ manager that natively\n   communicates with presence-aware SIP servers.\n  \
    \ The XMPP-to-SIP gateway is then responsible for translating the XMPP\n   subscription\
    \ request into a SIP SUBSCRIBE request addressed from the\n   XMPP user to the\
    \ SIP user:\n   Example 2: SIP Transformation of XMPP Subscription Request (F3)\n\
    \   |  SUBSCRIBE sip:romeo@example.net SIP/2.0\n   |  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk\n\
    \   |  From: <sip:juliet@example.com>;tag=ffd2\n   |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n\
    \   |  Event: presence\n   |  Max-Forwards: 70\n   |  CSeq: 123 SUBSCRIBE\n  \
    \ |  Contact: <sip:x2s.example.com;transport=tcp>\n   |  Accept: application/pidf+xml\n\
    \   |  Expires: 3600\n   |  Content-Length: 0\n   Once the XMPP-to-SIP gateway\
    \ has passed the SIP SUBSCRIBE off to the\n   SIP server (via the SIP-to-XMPP\
    \ gateway) and the SIP server has\n   delivered the SIP SUBSCRIBE to the SIP user\
    \ (F3 and F4; no example\n   shown for F4), the SIP user would then send a response\
    \ indicating\n   acceptance of the subscription request:\n   Example 3: SIP Accepts\
    \ Subscription Request (F6)\n   |  SIP/2.0 200 OK\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n\
    \   |  From: <sip:romeo@example.net>;tag=ffd2\n   |  To: <sip:juliet@example.com>;tag=j89d\n\
    \   |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  CSeq: 234 SUBSCRIBE\n\
    \   |  Contact: <sip:simple.example.net;transport=tcp>\n   |  Expires: 3600\n\
    \   |  Content-Length: 0\n   In accordance with [RFC6665], the XMPP-to-SIP gateway\
    \ SHOULD consider\n   the subscription state to be \"neutral\" until it receives\
    \ a NOTIFY\n   message.  Therefore, the SIP user or SIP-to-XMPP gateway at the\
    \ SIP\n   user's domain SHOULD immediately send a NOTIFY message containing a\n\
    \   Subscription-State header whose value contains the string \"active\"\n   (see\
    \ Section 5).\n   Example 4: SIP User Sends Presence Notification (F7)\n   | \
    \ NOTIFY sip:192.0.2.1 SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n\
    \   |  From: <sip:romeo@example.net>;tag=yt66\n   |  To: <sip:juliet@example.com>;tag=bi54\n\
    \   |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  Event: presence\n\
    \   |  Subscription-State: active;expires=499\n   |  Max-Forwards: 70\n   |  CSeq:\
    \ 8775 NOTIFY\n   |  Contact: <sip:simple.example.net;transport=tcp>\n   |  Content-Type:\
    \ application/pidf+xml\n   |  Content-Length: 193\n   |\n   |  <?xml version='1.0'\
    \ encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n  \
    \ |            entity='pres:romeo@example.net'>\n   |    <tuple id='ID-orchard'>\n\
    \   |      <status>\n   |        <basic>open</basic>\n   |        <show xmlns='jabber:client'>away</show>\n\
    \   |      </status>\n   |    </tuple>\n   |  </presence>\n   In response, the\
    \ presence-aware SIP-to-XMPP gateway would send a 200\n   OK to the SIP user (not\
    \ shown here, since it is not translated into\n   an XMPP stanza).\n   Upon receiving\
    \ the first NOTIFY with a subscription state of active,\n   the XMPP-to-SIP gateway\
    \ MUST generate a <presence/> stanza of type\n   \"subscribed\":\n   Example 5:\
    \ XMPP User Receives Acknowledgement from SIP Contact (F13)\n   |  <presence from='romeo@example.net'\n\
    \   |            to='juliet@example.com'\n   |            type='subscribed'/>\n\
    \   As described in Section 5, the gateway MUST also generate a presence\n   notification\
    \ addressed to the XMPP user:\n   Example 6: XMPP User Receives Presence Notification\
    \ from SIP Contact\n   (F14)\n   |  <presence from='romeo@example.net/orchard'\n\
    \   |            to='juliet@example.com'/>\n"
- title: 4.2.2.  Refreshing a Presence Subscription
  contents:
  - "4.2.2.  Refreshing a Presence Subscription\n   It is the responsibility of the\
    \ XMPP-to-SIP gateway to set the value\n   of the Expires header and to periodically\
    \ renew the subscription on\n   the SIP side of the gateway so that the subscription\
    \ appears to be\n   permanent to the XMPP user.  For example, the XMPP-to-SIP\
    \ gateway\n   SHOULD send a new SUBSCRIBE request to the SIP user whenever the\
    \ XMPP\n   user initiates a presence session with the XMPP server by sending\n\
    \   initial presence to its XMPP server.  The XMPP-to-SIP gateway also\n   SHOULD\
    \ send a new SUBSCRIBE request to the SIP user whenever the SIP\n   presence subscription\
    \ is scheduled to expire during the XMPP user's\n   active presence session.\n\
    \   The rules regarding SIP SUBSCRIBE requests for the purpose of\n   establishing\
    \ and refreshing a presence subscription are provided in\n   [RFC6665].  Those\
    \ rules also apply to XMPP-to-SIP gateways.\n   Furthermore, an XMPP-to-SIP gateway\
    \ MUST consider the XMPP\n   subscription to be permanently cancelled (and so\
    \ inform the XMPP\n   user) if it receives a SIP response of 403, 489, or 603.\
    \  By\n   contrast, it is appropriate to consider a SIP response of 423 or 481\n\
    \   to be a transient error and to maintain the long-lived XMPP presence\n   subscription.\
    \  [RFC6665] explains more detailed considerations about\n   the handling of SIP\
    \ responses in relation to subscription requests\n   and refreshes.\n   Finally,\
    \ see the security considerations section (Section 7) of this\n   document for\
    \ important information and requirements regarding the\n   security implications\
    \ of subscription refreshes.\n"
- title: 4.2.3.  Cancelling a Presence Subscription
  contents:
  - "4.2.3.  Cancelling a Presence Subscription\n   The following diagram illustrates\
    \ the protocol flow for cancelling an\n   XMPP user's presence subscription to\
    \ a SIP user, as further explained\n   in the text and examples after the diagram.\n\
    \   XMPP       XMPP      XMPP-to-SIP    SIP-to-XMPP     SIP          SIP\n   User\
    \      Server      Gateway        Gateway       Server        User\n    |    \
    \       |            |              |            |           |\n    | (F15) XMPP|\
    \            |              |            |           |\n    |unsubscribe|    \
    \        |              |            |           |\n    |..........>|        \
    \    |              |            |           |\n    |           | (F16) XMPP |\
    \              |            |           |\n    |           | unsubscribe|    \
    \          |            |           |\n    |           |...........>|        \
    \      |            |           |\n    |           |            | (F17) SIP SUBSCRIBE\
    \       |           |\n    |           |            | Expires: 0   |         \
    \   |           |\n    |           |            |**************************>|\
    \           |\n    |           |            |              |            | (F18)\
    \ SIP |\n    |           |            |              |            | SUBSCRIBE\
    \ |\n    |           |            |              |            | Expires: 0|\n\
    \    |           |            |              |            |**********>|\n    |\
    \           |            |              |            | (F19) SIP |\n    |    \
    \       |            |              |            | 200 OK    |\n    |        \
    \   |            |              |            |<**********|\n    |           |\
    \            |              | (F20) SIP  |           |\n    |           |    \
    \        |              | 200 OK     |           |\n    |           |        \
    \    |              |<***********|           |\n    |           |  (F21) XMPP\
    \ unsubscribed  |            |           |\n    |           |<..........................|\
    \            |           |\n    | (F22) XMPP|            |              |    \
    \        |           |\n    | unsubscribed           |              |        \
    \    |           |\n    |<..........|            |              |            |\
    \           |\n    |           |            |              |            |    \
    \       |\n   At any time after subscribing, the XMPP user can unsubscribe from\
    \ the\n   contact's presence.  This is done by sending a <presence/> stanza of\n\
    \   type \"unsubscribe\":\n   Example 7: XMPP User Unsubscribes from SIP Contact\
    \ (F15)\n   |  <presence from='juliet@example.com'\n   |            to='romeo@example.net'\n\
    \   |            type='unsubscribe'/>\n   The XMPP-to-SIP gateway is responsible\
    \ for translating the\n   unsubscribe command into a SIP SUBSCRIBE request with\
    \ the Expires\n   header set to a value of zero:\n   Example 8: SIP Transformation\
    \ of XMPP Unsubscribe (F17)\n   |  SUBSCRIBE sip:romeo@example.net SIP/2.0\n \
    \  |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n   |  From: <sip:juliet@example.com>;tag=j89d\n\
    \   |  Call-ID: 9D9F00DF-FCA9-4E7E-B970-80B638D5218A\n   |  Event: presence\n\
    \   |  Max-Forwards: 70\n   |  CSeq: 789 SUBSCRIBE\n   |  Contact: <sip:x2s.example.com;transport=tcp>\n\
    \   |  Accept: application/pidf+xml\n   |  Expires: 0\n   |  Content-Length: 0\n\
    \   Upon sending the transformed unsubscribe, the XMPP-to-SIP gateway\n   SHOULD\
    \ send a <presence/> stanza of type \"unsubscribed\" addressed to\n   the XMPP\
    \ user:\n   Example 9: XMPP User Receives Unsubscribed Notification (F22)\n  \
    \ |  <presence from='romeo@example.net'\n   |            to='juliet@example.com'\n\
    \   |            type='unsubscribed'/>\n"
- title: 4.3.  SIP to XMPP
  contents:
  - '4.3.  SIP to XMPP

    '
- title: 4.3.1.  Establishing a Presence Subscription
  contents:
  - "4.3.1.  Establishing a Presence Subscription\n   The following diagram illustrates\
    \ the protocol flow for establishing\n   a presence subscription from a SIP user\
    \ to an XMPP user, as further\n   explained in the text and examples after the\
    \ diagram.\n   SIP        SIP      SIP-to-XMPP    XMPP-to-SIP      XMPP      \
    \   XMPP\n   User      Server      Gateway        Gateway       Server       \
    \ User\n    |           |            |              |            |           |\n\
    \    | (F23) SIP |            |              |            |           |\n    |\
    \ SUBSCRIBE |            |              |            |           |\n    |**********>|\
    \            |              |            |           |\n    |           | (F24)\
    \ SIP  |              |            |           |\n    |           | SUBSCRIBE\
    \  |              |            |           |\n    |           |***********>| \
    \             |            |           |\n    |           |            | (F25)\
    \ XMPP subscribe      |           |\n    |           |            |..........................>|\
    \           |\n    |           |            |              |            | (F26)\
    \ XMPP|\n    |           |            |              |            | subscribe\
    \ |\n    |           |            |              |            |..........>|\n\
    \    |           |            |              |            | (F27) XMPP|\n    |\
    \           |            |              |            | subscribed|\n    |    \
    \       |            |              |            |<..........|\n    |        \
    \   |            |              | (F28) XMPP |           |\n    |           |\
    \            |              | subscribed |           |\n    |           |    \
    \        |              |<...........|           |\n    |           | (F29) SIP\
    \ 200 OK          |            |           |\n    |           |<**************************|\
    \            |           |\n    | (F30) SIP |            |              |    \
    \        |           |\n    | 200 OK    |            |              |        \
    \    |           |\n    |<**********|            |              |            |\
    \           |\n    |           |            |              |            |    \
    \       |\n   A SIP user initiates a subscription to a contact's presence\n  \
    \ information by sending a SIP SUBSCRIBE request to the contact.  The\n   following\
    \ is an example of such a request:\n   Example 10: SIP User Subscribes to XMPP\
    \ Contact (F23)\n   |  SUBSCRIBE sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP\
    \ s2x.example.net;branch=z9hG4bKna998sk\n   |  From: <sip:romeo@example.net>;tag=xfg9\n\
    \   |  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11\n   |  Event: presence\n\
    \   |  Max-Forwards: 70\n   |  CSeq: 263 SUBSCRIBE\n   |  Contact: <sip:simple.example.net;transport=tcp>\n\
    \   |  Accept: application/pidf+xml\n   |  Content-Length: 0\n   Notice that the\
    \ Expires header was not included in the SUBSCRIBE\n   request; this means that\
    \ the default value of 3600 (i.e., 3600\n   seconds = 1 hour) applies.\n   Upon\
    \ receiving the SUBSCRIBE, the SIP server needs to determine the\n   identity\
    \ of the domain portion of the Request-URI or To header, which\n   it does by\
    \ following the procedures explained in Section 5 of\n   [RFC7247].  If the domain\
    \ is an XMPP domain, the SIP server will hand\n   off the SUBSCRIBE to an associated\
    \ SIP-to-XMPP gateway or connection\n   manager that natively communicates with\
    \ XMPP servers.\n   The SIP-to-XMPP gateway is then responsible for translating\
    \ the\n   SUBSCRIBE into an XMPP subscription request addressed from the SIP\n\
    \   user to the XMPP user:\n   Example 11: XMPP Transformation of SIP SUBSCRIBE\
    \ (F25)\n   |  <presence from='romeo@example.net'\n   |            to='juliet@example.com'\n\
    \   |            type='subscribe'/>\n   In accordance with [RFC6121], once it\
    \ receives the stanza from the\n   XMPP-to-SIP gateway, the XMPP user's server\
    \ MUST deliver the presence\n   subscription request to the XMPP user (or, if\
    \ a subscription already\n   exists in the XMPP user's roster, the XMPP server\
    \ SHOULD auto-reply\n   with a <presence/> stanza of type \"subscribed\").\n \
    \  If the XMPP user approves the subscription request, the XMPP server\n   then\
    \ MUST return a <presence/> stanza of type \"subscribed\" addressed\n   from the\
    \ XMPP user to the SIP user.  The XMPP-to-SIP gateway is\n   responsible for translating\
    \ the <presence/> stanza of type\n   \"subscribed\" into a SIP 200 OK response.\n\
    \   If the XMPP user declines the subscription request, the XMPP server\n   then\
    \ MUST return a <presence/> stanza of type \"unsubscribed\"\n   addressed from\
    \ the XMPP user to the SIP user and the XMPP-to-SIP\n   gateway MUST transform\
    \ that stanza into an empty SIP NOTIFY message\n   with a Subscription-State of\
    \ \"terminated\" and a reason of \"rejected\":\n   Example 12: Subscription Request\
    \ Rejected\n   |  NOTIFY sip:192.0.2.2 SIP/2.0\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n\
    \   |  From: <sip:juliet@example.com>;tag=ur93\n   |  To: <sip:romeo@example.net>;tag=pq72\n\
    \   |  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11\n   |  Event: presence\n\
    \   |  Subscription-State: terminated;reason=rejected\n   |  Max-Forwards: 70\n\
    \   |  CSeq: 232 NOTIFY\n   |  Contact: <sip:x2s.example.com;transport=tcp>\n\
    \   |  Content-Type: application/pidf+xml\n   |  Content-Length: 0\n"
- title: 4.3.2.  Refreshing a Presence Subscription
  contents:
  - "4.3.2.  Refreshing a Presence Subscription\n   For as long as a SIP user is online\
    \ and interested in receiving\n   presence notifications from the XMPP contact,\
    \ the user's SIP user\n   agent is responsible for periodically refreshing the\
    \ subscription by\n   sending an updated SUBSCRIBE request with an appropriate\
    \ value for\n   the Expires header.  In response, the presence-aware SIP-to-XMPP\n\
    \   gateway MUST send a SIP NOTIFY to the user agent (per [RFC6665]); if\n   the\
    \ gateway has meaningful information about the availability state\n   of the XMPP\
    \ user (e.g., obtained from the core presence session in\n   the XMPP server)\
    \ then the NOTIFY MUST communicate that information\n   (e.g., by including a\
    \ PIDF body [RFC3863] with the relevant data),\n   whereas if the gateway does\
    \ not have meaningful information about the\n   availability state of the XMPP\
    \ user then the NOTIFY MUST be empty as\n   allowed by [RFC6665].\n   Once the\
    \ SIP user ends its presence session, it is the responsibility\n   of the presence-aware\
    \ SIP-to-XMPP gateway to properly handle the\n   difference between short-lived\
    \ SIP presence subscriptions and long-\n   lived XMPP presence subscriptions.\
    \  The gateway has two options when\n   the SIP user's subscription expires:\n\
    \   o  Cancel the subscription (i.e., treat it as temporary) and send an\n   \
    \   XMPP <presence/> stanza of type \"unsubscribe\" to the XMPP contact;\n   \
    \   this honors the SIP semantic but will seem strange to the XMPP\n      contact\
    \ (since it will appear that the SIP user has cancelled a\n      long-lived subscription).\n\
    \   o  Maintain the subscription (i.e., treat it as long-lived), and\n      1.\
    \  send a SIP NOTIFY request to the SIP user containing a PIDF\n          document\
    \ specifying that the XMPP contact now has a basic\n          status of \"closed\"\
    , including a Subscription-State of\n          \"terminated\" with a reason of\
    \ \"timeout\"\n      2.  send an XMPP <presence/> stanza of type \"unavailable\"\
    \ to the\n          XMPP contact; this violates the letter of the SIP semantic\
    \ but\n          will seem more natural to the XMPP contact\n   Which of these\
    \ options a presence-aware SIP-to-XMPP gateway chooses\n   is up to the implementation.\n\
    \   If the implementation chooses the first option, the protocol\n   generated\
    \ would be as follows:\n   Example 13: XMPP Handling of Temporary Subscription\
    \ Expiry\n   |  <presence from='romeo@example.net'\n   |            to='juliet@example.com'\n\
    \   |            type='unsubscribe'/>\n   If the implementation chooses the second\
    \ option, the protocol\n   generated would be as follows:\n   Example 14: SIP\
    \ Handling of Long-Lived Subscription Expiry\n   |  NOTIFY sip:192.0.2.2 SIP/2.0\n\
    \   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n   |  From: <sip:juliet@example.com>;tag=ur93\n\
    \   |  To: <sip:romeo@example.net>;tag=pq72\n   |  Call-ID: 2B44E147-3B53-45E4-9D48-C051F3216D14\n\
    \   |  Event: presence\n   |  Subscription-State: terminated;reason=timeout\n\
    \   |  Max-Forwards: 70\n   |  CSeq: 232 NOTIFY\n   |  Contact: <sip:x2s.example.com;transport=tcp>\n\
    \   |  Content-Type: application/pidf+xml\n   |  Content-Length: 194\n   |\n \
    \  |  <?xml version='1.0' encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n\
    \   |            entity='pres:juliet@example.com'>\n   |    <tuple id='ID-balcony'>\n\
    \   |      <status>\n   |        <basic>closed</basic>\n   |      </status>\n\
    \   |    </tuple>\n   |  </presence>\n   Example 15: XMPP Handling of Long-Lived\
    \ Subscription Expiry\n   |  <presence from='romeo@example.net'\n   |        \
    \    to='juliet@example.com'\n   |            type='unavailable'/>\n"
- title: 4.3.3.  Cancelling a Presence Subscription
  contents:
  - "4.3.3.  Cancelling a Presence Subscription\n   At any time, the SIP user can\
    \ cancel the subscription by sending a\n   SUBSCRIBE message whose Expires header\
    \ is set to a value of zero\n   (\"0\"):\n   Example 16: SIP User Cancels Subscription\n\
    \   |  SUBSCRIBE sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n\
    \   |  From: <sip:romeo@example.net>;tag=yt66\n   |  Call-ID: 717B1B84-F080-4F12-9F44-0EC1ADE767B9\n\
    \   |  Event: presence\n   |  Max-Forwards: 70\n   |  CSeq: 8775 SUBSCRIBE\n \
    \  |  Contact: <sip:simple.example.net;transport=tcp>\n   |  Expires: 0\n   |\
    \  Content-Length: 0\n   As above, upon receiving such a request, a presence-aware\
    \ SIP-to-XMPP\n   gateway is responsible for doing one of the following:\n   o\
    \  Cancel the subscription (i.e., treat it as temporary) and send an\n      XMPP\
    \ <presence/> stanza of type \"unsubscribe\" to the XMPP contact.\n   o  Maintain\
    \ the subscription (i.e., treat it as long-lived), and\n      1.  send a SIP NOTIFY\
    \ request to the SIP user containing a PIDF\n          document specifying that\
    \ the XMPP contact now has a basic\n          status of \"closed\"\n      2. \
    \ send a SIP SUBSCRIBE request to the SIP user with an Expires\n          header\
    \ set to a value of \"0\" (zero) when it receives XMPP\n          presence of\
    \ type \"unavailable\" from the XMPP contact\n      3.  send an XMPP <presence/>\
    \ stanza of type \"unavailable\" to the\n          XMPP contact\n"
- title: 5.  Notifications of Presence Information
  contents:
  - '5.  Notifications of Presence Information

    '
- title: 5.1.  Overview
  contents:
  - "5.1.  Overview\n   Both XMPP and presence-aware SIP systems enable entities (often,\
    \ but\n   not necessarily, human users) to send presence notifications to other\n\
    \   entities.  At its most basic, the term \"presence\" refers to\n   information\
    \ about an entity's \"on/off\" availability for communication\n   on a network.\
    \  Often, this basic concept is supplemented by\n   information that further specifies\
    \ the entity's context or status\n   while available for communication; these\
    \ availability states commonly\n   include \"away\" and \"do not disturb\".  Some\
    \ systems and protocols\n   extend the concepts of presence and availability even\
    \ further and\n   refer to any relatively ephemeral information about an entity\
    \ as a\n   kind of presence; categories of such \"extended presence\" include\n\
    \   geographical location (e.g., GPS coordinates), user mood (e.g.,\n   grumpy),\
    \ user activity (e.g., walking), and ambient environment\n   (e.g., noisy).  In\
    \ this document, we focus on the \"least common\n   denominator\" of network availability\
    \ only, although future documents\n   might address broader notions of presence,\
    \ including availability\n   states and extended presence.\n   [RFC6121] defines\
    \ how XMPP <presence/> stanzas can indicate\n   availability (via absence of a\
    \ 'type' attribute) or lack of\n   availability (via a 'type' attribute with a\
    \ value of \"unavailable\").\n   SIP presence using a SIP event package for presence\
    \ is specified in\n   [RFC3856].\n   As described in [RFC6121], XMPP presence\
    \ information about an entity\n   is communicated by means of an XML <presence/>\
    \ stanza sent over an\n   XML stream.  In this document we will assume that such\
    \ a <presence/>\n   stanza is sent from an XMPP client to an XMPP server over\
    \ an XML\n   stream negotiated between the client and the server, and that the\n\
    \   client is controlled by a human user.  In general, XMPP presence is\n   sent\
    \ by the user to the user's server and then broadcast to all\n   entities who\
    \ are subscribed to the user's presence information.\n   As described in [RFC3856],\
    \ presence information about an entity is\n   communicated by means of a SIP NOTIFY\
    \ event sent from a SIP user\n   agent to an intended recipient who is most generally\
    \ referenced by a\n   Presence URI of the form <pres:user@domain> but who might\
    \ be\n   referenced by a SIP or SIPS URI of the form <sip:user@domain> or\n  \
    \ <sips:user@domain>.\n   This document addresses basic presence or network availability\
    \ only,\n   not the various extensions to SIP and XMPP for \"rich presence\" such\n\
    \   as [RFC4480], [XEP-0107], and [XEP-0108].\n"
- title: 5.2.  XMPP to SIP
  contents:
  - "5.2.  XMPP to SIP\n   When Juliet interacts with her XMPP client to modify her\
    \ presence\n   information (or when her client automatically updates her presence\n\
    \   information, e.g., via an \"auto-away\" feature), her client generates\n \
    \  an XMPP <presence/> stanza.  The syntax of the <presence/> stanza,\n   including\
    \ required and optional elements and attributes, is defined\n   in [RFC6121].\
    \  The following is an example of such a stanza:\n   Example 17: XMPP User Sends\
    \ Presence Notification\n   |  <presence from='juliet@example.com/balcony'/>\n\
    \   Upon receiving such a stanza, the XMPP server to which Juliet has\n   connected\
    \ broadcasts it to all subscribers who are authorized to\n   receive presence\
    \ notifications from Juliet (this is similar to the\n   SIP NOTIFY method).  For\
    \ each subscriber, broadcasting the presence\n   notification involves either\
    \ delivering it to a local recipient (if\n   the hostname in the subscriber's\
    \ address matches one of the hostnames\n   serviced by the XMPP server) or attempting\
    \ to route it to the foreign\n   domain that services the hostname in the subscriber's\
    \ address.  Thus,\n   the XMPP server needs to determine the identity of the domainpart\
    \ in\n   the 'to' address, which it does by following the procedures discussed\n\
    \   in [RFC7247].  If the domain is a SIP domain, the XMPP server will\n   hand\
    \ off the <presence/> stanza to an associated XMPP-to-SIP gateway\n   or connection\
    \ manager that natively communicates with presence-aware\n   SIP servers (no example\
    \ shown).\n   The XMPP-to-SIP gateway is then responsible for translating the\
    \ XMPP\n   <presence/> stanza into a SIP NOTIFY request and included PIDF\n  \
    \ document from the XMPP user to the SIP user.\n   Example 18: SIP Transformation\
    \ of XMPP Presence Notification\n   |  NOTIFY sip:192.0.2.2 SIP/2.0\n   |  Via:\
    \ SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk\n   |  From: <sip:juliet@example.com>;tag=gh19\n\
    \   |  To: <sip:romeo@example.net>;tag=yt66\n   |  Contact: <sip:juliet@example.com>;gr=balcony\n\
    \   |  Call-ID: 2B44E147-3B53-45E4-9D48-C051F3216D14\n   |  Event: presence\n\
    \   |  Subscription-State: active;expires=599\n   |  Max-Forwards: 70\n   |  CSeq:\
    \ 157 NOTIFY\n   |  Contact: <sip:x2s.example.com;transport=tcp>\n   |  Content-Type:\
    \ application/pidf+xml\n   |  Content-Length: 192\n   |\n   |  <?xml version='1.0'\
    \ encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n  \
    \ |            entity='pres:juliet@example.com'>\n   |    <tuple id='ID-balcony'>\n\
    \   |      <status>\n   |        <basic>open</basic>\n   |        <show xmlns='jabber:client'>away</show>\n\
    \   |      </status>\n   |    </tuple>\n   |  </presence>\n   The mapping of XMPP\
    \ syntax elements to SIP syntax elements SHOULD be\n   as shown in the following\
    \ table.  (Mappings for elements not\n   mentioned are undefined.)\n        +-----------------------------+---------------------------+\n\
    \        |  XMPP Element or Attribute  |  SIP Header or PIDF Data  |\n       \
    \ +-----------------------------+---------------------------+\n        |  <presence/>\
    \ stanza         |  \"Event: presence\" (1)    |\n        +-----------------------------+---------------------------+\n\
    \        |  XMPP resource identifier   |  tuple 'id' attribute (2) |\n       \
    \ +-----------------------------+---------------------------+\n        |  from\
    \                       |  From                     |\n        +-----------------------------+---------------------------+\n\
    \        |  id                         |  CSeq (3)                 |\n       \
    \ +-----------------------------+---------------------------+\n        |  to \
    \                        |  To                       |\n        +-----------------------------+---------------------------+\n\
    \        |  type                       |  basic status (4) (5)     |\n       \
    \ +-----------------------------+---------------------------+\n        |  xml:lang\
    \                   |  Content-Language         |\n        +-----------------------------+---------------------------+\n\
    \        |  <priority/>                |  priority for tuple (6)   |\n       \
    \ +-----------------------------+---------------------------+\n        |  <show/>\
    \                    |  no mapping (7)           |\n        +-----------------------------+---------------------------+\n\
    \        |  <status/>                  |  <note/>                  |\n       \
    \ +-----------------------------+---------------------------+\n             Table\
    \ 1: Presence Syntax Mapping from XMPP to SIP\n   Note the following regarding\
    \ these mappings:\n   (1)  Only an XMPP <presence/> stanza that lacks a 'type'\
    \ attribute or\n        whose 'type' attribute has a value of \"unavailable\"\
    \ SHOULD be\n        mapped by an XMPP-to-SIP gateway to a SIP NOTIFY request,\
    \ since\n        those are the only <presence/> stanzas that represent\n     \
    \   notifications.\n   (2)  The PIDF schema defines the tuple 'id' attribute as\
    \ having a\n        datatype of \"xs:ID\"; because this datatype is more restrictive\n\
    \        than the \"xs:string\" datatype for XMPP resourceparts (in\n        particular,\
    \ a number is not allowed as the first character of an\n        ID), prepending\
    \ the resourcepart with \"ID-\" or some other\n        alphabetic string when\
    \ mapping from XMPP to SIP is RECOMMENDED.\n   (3)  In practice, XMPP <presence/>\
    \ stanzas often do not include the\n        'id' attribute.\n   (4)  Because the\
    \ lack of a 'type' attribute indicates that an XMPP\n        entity is available\
    \ for communications, the gateway SHOULD map\n        that information to a PIDF\
    \ basic status of \"open\".  Because a\n        'type' attribute with a value\
    \ of \"unavailable\" indicates that an\n        XMPP entity is not available for\
    \ communications, the gateway\n        SHOULD map that information to a PIDF basic\
    \ status of \"closed\".\n   (5)  When the XMPP-to-SIP gateway receives XMPP presence\
    \ of type\n        \"unavailable\" from the XMPP contact, it SHOULD (a) send a\
    \ SIP\n        NOTIFY request to the SIP user containing a PIDF document\n   \
    \     specifying that the XMPP contact now has a basic status of\n        \"closed\"\
    \ and (b) send a SIP SUBSCRIBE request to the SIP user\n        with an Expires\
    \ header set to a value of \"0\" (zero).\n   (6)  The value of the XMPP <priority/>\
    \ element is an integer between\n        -128 and +127, whereas the value of the\
    \ PIDF <contact/>\n        element's 'priority' attribute is a decimal number\
    \ from zero to\n        one inclusive, with a maximum of three decimal places.\
    \  If the\n        value of the XMPP <priority/> element is negative, an XMPP-to-\n\
    \        SIP gateway MUST NOT map the value.  If an XMPP-to-SIP gateway\n    \
    \    maps positive values, it SHOULD treat XMPP priority 0 as PIDF\n        priority\
    \ 0 and XMPP priority 127 as PIDF priority 1, mapping\n        intermediate values\
    \ appropriately so that they are unique (e.g.,\n        XMPP priority 1 to PIDF\
    \ priority 0.007, XMPP priority 2 to PIDF\n        priority 0.015, and so on up\
    \ through mapping XMPP priority 126\n        to PIDF priority 0.992; note that\
    \ this is an example only and\n        that the exact mapping is up to the implementation).\n\
    \   (7)  Some implementations support custom extensions to encapsulate\n     \
    \   detailed information about availability; however, there is no\n        need\
    \ to standardize a PIDF extension for this purpose, since\n        PIDF is already\
    \ extensible and thus the <show/> element\n        (qualified by the 'jabber:client'\
    \ namespace) can be included\n        directly in the PIDF XML.  The examples\
    \ in this document\n        illustrate this usage, which is RECOMMENDED.  The\
    \ most useful\n        values are likely \"away\" and \"dnd\", although note that\
    \ the\n        latter value merely means \"busy\" and does not imply that a\n\
    \        server or client ought to block incoming traffic while the user\n   \
    \     is in that state.  Naturally, a gateway can choose to translate\n      \
    \  a custom extension into an established value of the <show/>\n        element\
    \ [RFC6121] or translate a <show/> element into a custom\n        extension that\
    \ the gateway knows is supported by the user agent\n        of the intended recipient.\
    \  Unfortunately, this behavior does\n        not guarantee that information will\
    \ not be lost; to help prevent\n        information loss, a gateway ought to include\
    \ both the <show/>\n        element and the custom extension if the gateway cannot\
    \ suitably\n        translate the custom value into a <show/> value.\n"
- title: 5.3.  SIP to XMPP
  contents:
  - "5.3.  SIP to XMPP\n   When Romeo changes his presence, his SIP user agent generates\
    \ a SIP\n   NOTIFY request for any active subscriptions.  The syntax of the\n\
    \   NOTIFY request is defined in [RFC3856].  The following is an example\n   of\
    \ such a request:\n   Example 19: SIP User Sends Presence Notification\n   | \
    \ NOTIFY sip:192.0.2.1 SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n\
    \   |  From: <sip:romeo@example.net>;tag=yt66\n   |  To: <sip:juliet@example.com>;tag=bi54\n\
    \   |  Contact: <sip:romeo@example.net>;gr=orchard\n   |  Call-ID: C33C6C9D-0F4A-42F9-B95C-7CE86B526B5B\n\
    \   |  Event: presence\n   |  Subscription-State: active;expires=499\n   |  Max-Forwards:\
    \ 70\n   |  CSeq: 8775 NOTIFY\n   |  Contact: <sip:simple.example.net;transport=tcp>\n\
    \   |  Content-Type: application/pidf+xml\n   |  Content-Length: 193\n   |\n \
    \  |  <?xml version='1.0' encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n\
    \   |            entity='pres:romeo@example.net'>\n   |    <tuple id='ID-orchard'>\n\
    \   |      <status>\n   |        <basic>closed</basic>\n   |      </status>\n\
    \   |    </tuple>\n   |  </presence>\n   Upon receiving the NOTIFY, the SIP server\
    \ needs to determine the\n   identity of the domain portion of the Request-URI\
    \ or To header, which\n   it does by following the procedures discussed in [RFC7247].\
    \  If the\n   domain is an XMPP domain, the SIP server will hand off the NOTIFY\
    \ to\n   an associated SIP-to-XMPP gateway or connection manager that natively\n\
    \   communicates with XMPP servers.\n   The SIP-to-XMPP gateway is then responsible\
    \ for translating the\n   NOTIFY into an XMPP <presence/> stanza addressed from\
    \ the SIP user to\n   the XMPP user:\n   Example 20: XMPP Transformation of SIP\
    \ Presence Notification\n   |  <presence from='romeo@example.net'\n   |      \
    \      to='juliet@example.com/balcony'\n   |            type='unavailable'/>\n\
    \   The mapping of SIP syntax elements to XMPP syntax elements SHOULD be\n   as\
    \ shown in the following table.  (Mappings for elements not\n   mentioned are\
    \ undefined.)\n        +---------------------------+-----------------------------+\n\
    \        |  SIP Header or PIDF Data  |  XMPP Element or Attribute  |\n       \
    \ +---------------------------+-----------------------------+\n        |  basic\
    \ status             |  type (1)                   |\n        +---------------------------+-----------------------------+\n\
    \        |  Content-Language         |  xml:lang                   |\n       \
    \ +---------------------------+-----------------------------+\n        |  CSeq\
    \                     |  id (2)                     |\n        +---------------------------+-----------------------------+\n\
    \        |  From                     |  from                       |\n       \
    \ +---------------------------+-----------------------------+\n        |  priority\
    \ for tuple       |  <priority/> (3)            |\n        +---------------------------+-----------------------------+\n\
    \        |  To                       |  to                         |\n       \
    \ +---------------------------+-----------------------------+\n        |  <note/>\
    \                  |  <status/>                  |\n        +---------------------------+-----------------------------+\n\
    \        |  <show/>                  |  <show/> (4)                |\n       \
    \ +---------------------------+-----------------------------+\n             Table\
    \ 2: Presence Syntax Mapping from SIP to XMPP\n   Note the following regarding\
    \ these mappings:\n   (1)  A PIDF basic status of \"open\" SHOULD be mapped to\
    \ no 'type'\n        attribute, and a PIDF basic status of \"closed\" SHOULD be\
    \ mapped\n        to a 'type' attribute whose value is \"unavailable\".\n   (2)\
    \  This mapping is OPTIONAL.\n   (3)  See the notes following Table 1 of this\
    \ document regarding\n        mapping of presence priority.\n   (4)  If a SIP\
    \ implementation supports the <show/> element (qualified\n        by the 'jabber:client'\
    \ namespace) as a PIDF extension for\n        availability status as described\
    \ in the notes following Table 1\n        of this document, the SIP-to-XMPP gateway\
    \ is responsible for\n        including that element in the XMPP presence notification.\n"
- title: 6.  Requests for Presence Information
  contents:
  - "6.  Requests for Presence Information\n   Both SIP and XMPP provide methods for\
    \ requesting presence information\n   about another entity.\n"
- title: 6.1.  XMPP to SIP
  contents:
  - "6.1.  XMPP to SIP\n   In XMPP, a request for presence information is completed\
    \ by sending a\n   <presence/> stanza of type \"probe\":\n   Example 21: XMPP\
    \ Server Sends Presence Probe on Behalf of XMPP User\n   |  <presence from='juliet@example.com/chamber'\n\
    \   |            to='romeo@example.net'\n   |            type='probe'/>\n    \
    \  Note: As described in [RFC6121], presence probes are used by XMPP\n      servers\
    \ to request presence on behalf of XMPP users; XMPP clients\n      are discouraged\
    \ from sending presence probes, since retrieving\n      presence is a service\
    \ that servers provide.\n   An XMPP-to-SIP gateway would transform the presence\
    \ probe into its\n   SIP equivalent, which is a SUBSCRIBE request with an Expires\
    \ header\n   value of zero:\n   Example 22: SIP Transformation of XMPP Presence\
    \ Probe\n   |  SUBSCRIBE sip:romeo@example.net SIP/2.0\n   |  Via: SIP/2.0/TCP\
    \ x2s.example.com;branch=z9hG4bKna998sk\n   |  From: <sip:juliet@example.com>;tag=ffd2\n\
    \   |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  Event: presence\n\
    \   |  Max-Forwards: 70\n   |  CSeq: 123 SUBSCRIBE\n   |  Contact: <sip:x2s.example.com;transport=tcp>\n\
    \   |  Accept: application/pidf+xml\n   |  Expires: 0\n   |  Content-Length: 0\n\
    \   As described in [RFC3856], this cancels any subscription but causes a\n  \
    \ NOTIFY to be sent to the subscriber, just as a presence probe does\n   (the\
    \ transformation rules for presence notifications have been\n   previously described\
    \ in Section 5.2 of this document).\n"
- title: 6.2.  SIP to XMPP
  contents:
  - "6.2.  SIP to XMPP\n   In SIP, a request for presence information is effectively\
    \ completed\n   by sending a SUBSCRIBE with an Expires header value of zero:\n\
    \   Example 23: SIP User Sends Presence Request\n   |  SUBSCRIBE sip:juliet@example.com\
    \ SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n \
    \  |  From: <sip:romeo@example.net>;tag=yt66\n   |  Call-ID: 717B1B84-F080-4F12-9F44-0EC1ADE767B9\n\
    \   |  Event: presence\n   |  Max-Forwards: 70\n   |  CSeq: 8775 SUBSCRIBE\n \
    \  |  Contact: <sip:simple.example.net;transport=tcp>\n   |  Expires: 0\n   |\
    \  Content-Length: 0\n   When honoring the long-lived semantics of an XMPP presence\n\
    \   subscription, a presence-aware SIP-to-XMPP gateway SHOULD translate\n   such\
    \ a SIP request into a <presence/> stanza of type \"probe\" if it\n   does not\
    \ already have presence information about the contact:\n   Example 24: XMPP Transformation\
    \ of SIP Presence Request\n   |  <presence from='romeo@example.net'\n   |    \
    \        to='juliet@example.com'\n   |            type='probe'/>\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Detailed security considerations for presence\
    \ protocols are given in\n   [RFC2779], for SIP-based presence in [RFC3856] (see\
    \ also [RFC3261]),\n   and for XMPP-based presence in [RFC6121] (see also [RFC6120]).\n\
    \   The mismatch between long-lived XMPP presence subscriptions and\n   short-lived\
    \ SIP presence subscriptions introduces the possibility of\n   an amplification\
    \ attack launched from the XMPP network against a SIP\n   presence server (since\
    \ each long-lived XMPP presence subscription\n   would typically result in multiple\
    \ subscription refresh requests on\n   the SIP side of a gateway).  Therefore,\
    \ access to an XMPP-to-SIP\n   gateway SHOULD be restricted in various ways; among\
    \ other things,\n   only an XMPP service that carefully controls account provisioning\
    \ and\n   provides effective methods for the administrators to control the\n \
    \  behavior of registered users ought to host such a gateway (e.g., not\n   a\
    \ service that offers open account registration), and a gateway ought\n   to be\
    \ associated only with a single domain or trust realm (e.g., a\n   gateway hosted\
    \ at simple.example.com ought to allow only users within\n   the example.com domain\
    \ to access the gateway, not users within\n   example.org, example.net, or any\
    \ other domain).  If a SIP presence\n   server receives communications through\
    \ an XMPP-to-SIP gateway from\n   users who are not associated with a domain that\
    \ is so related to the\n   hostname of the gateway, it SHOULD (based on local\
    \ service\n   provisioning) refuse to service such users or refuse to receive\n\
    \   traffic from the gateway.  As a further check, whenever an XMPP-to-\n   SIP\
    \ gateway seeks to refresh an XMPP user's long-lived subscription\n   to a SIP\
    \ user's presence, it MUST first send an XMPP <presence/>\n   stanza of type \"\
    probe\" from the address of the gateway to the \"bare\n   Jabber ID (JID)\" (user@domain.tld)\
    \ of the XMPP user, to which the\n   user's XMPP server MUST respond in accordance\
    \ with [RFC6121]; this\n   puts an equal burden on the XMPP server and the SIP\
    \ server.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3856]  Rosenberg, J., \"A Presence Event Package for the Session\n\
    \              Initiation Protocol (SIP)\", RFC 3856, August 2004.\n   [RFC3863]\
    \  Sugano, H., Fujimoto, S., Klyne, G., Bateman, A., Carr,\n              W.,\
    \ and J. Peterson, \"Presence Information Data Format\n              (PIDF)\"\
    , RFC 3863, August 2004.\n   [RFC6120]  Saint-Andre, P., \"Extensible Messaging\
    \ and Presence\n              Protocol (XMPP): Core\", RFC 6120, March 2011.\n\
    \   [RFC6121]  Saint-Andre, P., \"Extensible Messaging and Presence\n        \
    \      Protocol (XMPP): Instant Messaging and Presence\",\n              RFC 6121,\
    \ March 2011.\n   [RFC6665]  Roach, A., \"SIP-Specific Event Notification\", RFC\
    \ 6665,\n              July 2012.\n   [RFC7247]  Saint-Andre, P., Houri, A., and\
    \ J. Hildebrand,\n              \"Interworking between the Session Initiation\
    \ Protocol\n              (SIP) and the Extensible Messaging and Presence Protocol\n\
    \              (XMPP): Architecture, Addresses, and Error Handling\",\n      \
    \        RFC 7247, May 2014.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC2778]  Day, M., Rosenberg, J., and H. Sugano,\
    \ \"A Model for\n              Presence and Instant Messaging\", RFC 2778, February\
    \ 2000.\n   [RFC2779]  Day, M., Aggarwal, S., Mohr, G., and J. Vincent, \"Instant\n\
    \              Messaging / Presence Protocol Requirements\", RFC 2779,\n     \
    \         February 2000.\n   [RFC3860]  Peterson, J., \"Common Profile for Instant\
    \ Messaging\n              (CPIM)\", RFC 3860, August 2004.\n   [RFC3922]  Saint-Andre,\
    \ P., \"Mapping the Extensible Messaging and\n              Presence Protocol\
    \ (XMPP) to Common Presence and Instant\n              Messaging (CPIM)\", RFC\
    \ 3922, October 2004.\n   [RFC4480]  Schulzrinne, H., Gurbani, V., Kyzivat, P.,\
    \ and J.\n              Rosenberg, \"RPID: Rich Presence Extensions to the Presence\n\
    \              Information Data Format (PIDF)\", RFC 4480, July 2006.\n   [SIMPLE-CPIM-MAPPING]\n\
    \              Campbell, B. and J. Rosenberg, \"CPIM Mapping of SIMPLE\n     \
    \         Presence and Instant Messaging\", Work in Progress,\n              June\
    \ 2002.\n   [XEP-0107] Saint-Andre, P. and R. Meijer, \"User Mood\", XSF XEP 0107,\n\
    \              October 2008, <http://xmpp.org/extensions/xep-0107.html>.\n   [XEP-0108]\
    \ Meijer, R. and P. Saint-Andre, \"User Activity\",\n              XSF XEP 0108,\
    \ October 2008,\n              <http://xmpp.org/extensions/xep-0108.html>.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The authors wish to thank the following individuals\
    \ for their\n   feedback: Chris Christou, Fabio Forno, Adrian Georgescu, Philipp\n\
    \   Hancke, Saul Ibarra Corretge, Markus Isomaki, Olle Johansson, Paul\n   Kyzivat,\
    \ Salvatore Loreto, Michael Lundberg, Daniel-Constantin\n   Mierla, and Tory Patnoe.\n\
    \   Dave Crocker provided helpful and detailed feedback on behalf of the\n   Applications\
    \ Area Directorate.\n   Ben Laurie performed a review on behalf of the Security\
    \ Directorate,\n   resulting in improvements to the security considerations.\n\
    \   During IESG review, Pete Resnick caught several oversights in the\n   document\
    \ with regard to interoperability.\n   The authors gratefully acknowledge the\
    \ assistance of Markus Isomaki\n   and Yana Stamcheva as the working group chairs\
    \ and Gonzalo Camarillo\n   as the sponsoring Area Director.\n   Some text in\
    \ this document was borrowed from [RFC3922].\n   Peter Saint-Andre wishes to acknowledge\
    \ Cisco Systems, Inc., for\n   employing him during his work on earlier versions\
    \ of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   &yet\n   EMail: ietf@stpeter.im\n\
    \   Avshalom Houri\n   IBM\n   Rorberg Building, Pekris 3\n   Rehovot  76123\n\
    \   Israel\n   EMail: avshalom@il.ibm.com\n   Joe Hildebrand\n   Cisco Systems,\
    \ Inc.\n   1899 Wynkoop Street, Suite 600\n   Denver, CO  80202\n   USA\n   EMail:\
    \ jhildebr@cisco.com\n"
