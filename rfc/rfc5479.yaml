- title: __initial_text__
  contents:
  - '    Requirements and Analysis of Media Security Management Protocols

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes requirements for a protocol to negotiate\
    \ a\n   security context for SIP-signaled Secure RTP (SRTP) media.  In\n   addition\
    \ to the natural security requirements, this negotiation\n   protocol must interoperate\
    \ well with SIP in certain ways.  A number\n   of proposals have been published\
    \ and a summary of these proposals is\n   in the appendix of this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Attack Scenarios . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   4.  Call Scenarios and Requirements Considerations . . . . .\
    \ . . .  7\n     4.1.  Clipping Media before Signaling Answer . . . . . . . .\
    \ . .  7\n     4.2.  Retargeting and Forking  . . . . . . . . . . . . . . . .\
    \ .  8\n     4.3.  Recording  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 11\n     4.4.  PSTN Gateway . . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \     4.5.  Call Setup Performance . . . . . . . . . . . . . . . . . . 12\n  \
    \   4.6.  Transcoding  . . . . . . . . . . . . . . . . . . . . . . . 13\n    \
    \ 4.7.  Upgrading to SRTP  . . . . . . . . . . . . . . . . . . . . 13\n     4.8.\
    \  Interworking with Other Signaling Protocols  . . . . . . . 14\n     4.9.  Certificates\
    \ . . . . . . . . . . . . . . . . . . . . . . . 14\n   5.  Requirements . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 14\n     5.1.  Key Management Protocol\
    \ Requirements . . . . . . . . . . . 15\n     5.2.  Security Requirements  . .\
    \ . . . . . . . . . . . . . . . . 16\n     5.3.  Requirements outside of the Key\
    \ Management Protocol  . . . 19\n   6.  Security Considerations  . . . . . . .\
    \ . . . . . . . . . . . . 20\n   7.  Acknowledgements . . . . . . . . . . . .\
    \ . . . . . . . . . . . 20\n   8.  References . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 20\n     8.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . . 20\n     8.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . . 21\n   Appendix A.  Overview and Evaluation of Existing Keying\n\
    \                Mechanisms  . . . . . . . . . . . . . . . . . . . . . 24\n  \
    \   A.1.  Signaling Path Keying Techniques . . . . . . . . . . . . . 25\n    \
    \   A.1.1.  MIKEY-NULL . . . . . . . . . . . . . . . . . . . . . . 25\n      \
    \ A.1.2.  MIKEY-PSK  . . . . . . . . . . . . . . . . . . . . . . 25\n       A.1.3.\
    \  MIKEY-RSA  . . . . . . . . . . . . . . . . . . . . . . 25\n       A.1.4.  MIKEY-RSA-R\
    \  . . . . . . . . . . . . . . . . . . . . . 25\n       A.1.5.  MIKEY-DHSIGN .\
    \ . . . . . . . . . . . . . . . . . . . . 26\n       A.1.6.  MIKEY-DHHMAC . .\
    \ . . . . . . . . . . . . . . . . . . . 26\n       A.1.7.  MIKEY-ECIES and MIKEY-ECMQV\
    \ (MIKEY-ECC)  . . . . . . . 26\n       A.1.8.  SDP Security Descriptions with\
    \ SIPS  . . . . . . . . . 26\n       A.1.9.  SDP Security Descriptions with S/MIME\
    \  . . . . . . . . 27\n       A.1.10. SDP-DH (Expired) . . . . . . . . . . . .\
    \ . . . . . . . 27\n       A.1.11. MIKEYv2 in SDP (Expired) . . . . . . . . .\
    \ . . . . . . 27\n     A.2.  Media Path Keying Technique  . . . . . . . . . .\
    \ . . . . . 27\n       A.2.1.  ZRTP . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 27\n     A.3.  Signaling and Media Path Keying Techniques . . . . .\
    \ . . . 28\n       A.3.1.  EKT  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 28\n       A.3.2.  DTLS-SRTP  . . . . . . . . . . . . . . . . . . . . .\
    \ . 28\n       A.3.3.  MIKEYv2 Inband (Expired) . . . . . . . . . . . . . . .\
    \ 29\n     A.4.  Evaluation Criteria - SIP  . . . . . . . . . . . . . . . . 29\n\
    \       A.4.1.  Secure Retargeting and Secure Forking  . . . . . . . . 29\n  \
    \     A.4.2.  Clipping Media before SDP Answer . . . . . . . . . . . 31\n    \
    \   A.4.3.  SSRC and ROC . . . . . . . . . . . . . . . . . . . . . 33\n     A.5.\
    \  Evaluation Criteria - Security . . . . . . . . . . . . . . 35\n       A.5.1.\
    \  Distribution and Validation of Persistent Public\n               Keys and Certificates\
    \  . . . . . . . . . . . . . . . . 35\n       A.5.2.  Perfect Forward Secrecy\
    \  . . . . . . . . . . . . . . . 38\n       A.5.3.  Best Effort Encryption . .\
    \ . . . . . . . . . . . . . . 39\n       A.5.4.  Upgrading Algorithms . . . .\
    \ . . . . . . . . . . . . . 40\n   Appendix B.  Out-of-Scope  . . . . . . . .\
    \ . . . . . . . . . . . . 42\n     B.1.  Shared Key Conferencing  . . . . . .\
    \ . . . . . . . . . . . 42\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The work on media security started when the Session Initiation\n\
    \   Protocol (SIP) was still in its infancy.  With the increased SIP\n   deployment\
    \ and the availability of new SIP extensions and related\n   protocols, the need\
    \ for end-to-end security was re-evaluated.  The\n   procedure of re-evaluating\
    \ prior protocol work and design decisions\n   is not an uncommon strategy and,\
    \ to some extent, considered necessary\n   to ensure that the developed protocols\
    \ indeed meet the previously\n   envisioned needs for the users on the Internet.\n\
    \   This document summarizes media security requirements, i.e.,\n   requirements\
    \ for mechanisms that negotiate security context such as\n   cryptographic keys\
    \ and parameters for SRTP.\n   The organization of this document is as follows:\
    \ Section 2 introduces\n   terminology, Section 3 describes various attack scenarios\
    \ against the\n   signaling path and media path, Section 4 provides an overview\
    \ about\n   possible call scenarios, and Section 5 lists requirements for media\n\
    \   security.  The main part of the document concludes with the security\n   considerations\
    \ Section 6, and acknowledgements in Section 7.\n   Appendix A lists and compares\
    \ available solution proposals.  The\n   following Appendix A.4 compares the different\
    \ approaches regarding\n   their suitability for the SIP signaling scenarios described\
    \ in\n   Appendix A, while Appendix A.5 provides a comparison regarding\n   security\
    \ aspects.  Appendix B lists non-goals for this document.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119],\
    \ with the\n   important qualification that, unless otherwise stated, these terms\n\
    \   apply to the design of the media security key management protocol,\n   not\
    \ its implementation or application.\n   Furthermore, the terminology described\
    \ in SIP [RFC3261] regarding\n   functions and components are used throughout\
    \ the document.\n   Additionally, the following items are used in this document:\n\
    \   AOR (Address-of-Record):   A SIP or SIPS URI that points to a domain\n   \
    \   with a location service that can map the URI to another URI where\n      the\
    \ user might be available.  Typically, the location service is\n      populated\
    \ through registrations.  An AOR is frequently thought of\n      as the \"public\
    \ address\" of the user.\n   SSRC:  The 32-bit value that defines the synchronization\
    \ source, used\n      in RTP.  These are generally unique, but collisions can\
    \ occur.\n   two-time pad:  The use of the same key and the same keystream to\n\
    \      encrypt different data.  For SRTP, a two-time pad occurs if two\n     \
    \ senders are using the same key and the same RTP SSRC value.\n   Perfect Forward\
    \ Secrecy (PFS):  The property that disclosure of the\n      long-term secret\
    \ keying material that is used to derive an agreed\n      ephemeral key does not\
    \ compromise the secrecy of agreed keys from\n      earlier runs.\n   active adversary:\
    \  An active adversary is able to alter data\n      communication to affect its\
    \ operation (see also [RFC4949]).\n   passive adversary:  A passive adversary\
    \ is able to learn information\n      from data communication, but not alter that\
    \ data communication\n      (see also [RFC4949]).\n   signaling path:  The signaling\
    \ path is the route taken by SIP\n      signaling messages transmitted between\
    \ the calling and called user\n      agents.  This can be either direct signaling\
    \ between the calling\n      and called user agents or, more commonly, involves\
    \ the SIP proxy\n      servers that were involved in the call setup.\n   media\
    \ path:  The media path is the route taken by media packets\n      exchanged by\
    \ the endpoints.  In the simplest case, the endpoints\n      exchange media directly,\
    \ and the \"media path\" is defined by a\n      quartet of IP addresses and TCP/UDP\
    \ ports, along with an IP route.\n      In other cases, this path may include\
    \ RTP relays, mixers,\n      transcoders, session border controllers, NATs, or\
    \ media gateways.\n   Moreover, as this document discusses requirements for media\
    \ security,\n   the nomenclature R-XXX is used to mark requirements, where XXX\
    \ is the\n   requirement, which needs to be met.\n"
- title: 3.  Attack Scenarios
  contents:
  - "3.  Attack Scenarios\n   The discussion in this section relates to requirements\
    \ R-ASSOC\n   (specified in Section 5.1) R-PASS-MEDIA, R-PASS-SIG, R-SIG-MEDIA,\n\
    \   R-ACT-ACT, and R-ID-BINDING (specified in Section 5.2).\n   This document\
    \ classifies adversaries according to their access and\n   their capabilities.\
    \  An adversary might have access:\n   1.  only to the media path,\n   2.  only\
    \ to the signaling path,\n   3.  to the media path and to the signaling path.\n\
    \   An attacker that can solely be located along the signaling path, and\n   does\
    \ not have access to media (item 2), is not considered in this\n   document.\n\
    \   There are two different types of adversaries: active and passive.  An\n  \
    \ active adversary may need to be active with regard to the key\n   exchange relevant\
    \ information traveling along the media path or\n   traveling along the signaling\
    \ path.\n   Based on their robustness against the adversary capabilities\n   described\
    \ above, we can group security mechanisms using the following\n   labels.  This\
    \ list is generally ordered from easiest to compromise\n   (at the top) to more\
    \ difficult to compromise:\n    +---------------+---------+--------------------------------------+\n\
    \    | SIP signaling |  media  |             abbreviation             |\n    +---------------+---------+--------------------------------------+\n\
    \    |      none     | passive |      no-signaling-passive-media      |\n    |\
    \      none     |  active |       no-signaling-active-media      |\n    |    passive\
    \    | passive |    passive-signaling-passive-media   |\n    |    passive    |\
    \  active |    passive-signaling-active-media    |\n    |     active    | passive\
    \ |    active-signaling-passive-media    |\n    |     active    |  active |  \
    \   active-signaling-active-media    |\n    |     active    |  active | active-signaling-active-media-detect\
    \ |\n    +---------------+---------+--------------------------------------+\n\
    \   no-signaling-passive-media:\n      Access only to the media path is sufficient\
    \ to reveal the content\n      of the media traffic.\n   passive-signaling-passive-media:\n\
    \      Passive attack on the signaling and passive attack on the media\n     \
    \ path is necessary to reveal the content of the media traffic.\n   passive-signaling-active-media:\n\
    \      Passive attack on the signaling and active attack on the media\n      path\
    \ is necessary to reveal the content of the media traffic.\n   active-signaling-passive-media:\n\
    \      Active attack on the signaling path and passive attack on the\n      media\
    \ path is necessary to reveal the content of the media\n      traffic.\n   no-signaling-active-media:\n\
    \      Active attack on the media path is sufficient to reveal the\n      content\
    \ of the media traffic.\n   active-signaling-active-media:\n      Active attack\
    \ on both the signaling path and the media path is\n      necessary to reveal\
    \ the content of the media traffic.\n   active-signaling-active-media-detect:\n\
    \      Active attack on both signaling and media path is necessary to\n      reveal\
    \ the content of the media traffic (as with active-signaling-\n      active-media),\
    \ and the attack is detectable by protocol messages\n      exchanged between the\
    \ endpoints.\n   For example, unencrypted RTP is vulnerable to no-signaling-passive-\n\
    \   media.\n   As another example, SDP Security Descriptions [RFC4568], when\n\
    \   protected by TLS (as it is commonly implemented and deployed), belong\n  \
    \ in the passive-signaling-passive-media category since the adversary\n   needs\
    \ to learn the SDP Security Descriptions key by seeing the SIP\n   signaling message\
    \ at a SIP proxy (assuming that the adversary is in\n   control of the SIP proxy).\
    \  The media traffic can be decrypted using\n   that learned key.\n   As another\
    \ example, DTLS-SRTP (Datagram Transport Layer Security\n   Extension for SRTP)\
    \ falls into active-signaling-active-media category\n   when DTLS-SRTP is used\
    \ with a public-key-based ciphersuite with self-\n   signed certificates and without\
    \ SIP Identity [RFC4474].  An adversary\n   would have to modify the fingerprint\
    \ that is sent along the signaling\n   path and subsequently to modify the certificates\
    \ carried in the DTLS\n   handshake that travel along the media path.  If DTLS-SRTP\
    \ is used\n   with both SIP Identity [RFC4474] and SIP Connected Identity\n  \
    \ [RFC4916], the RFC-4474 signature protects both the offer and the\n   answer,\
    \ and such a system would then belong to the active-signaling-\n   active-media-detect\
    \ category (provided, of course, the signaling path\n   to the RFC-4474 authenticator\
    \ and verifier is secured as per RFC\n   4474, and the RFC-4474 authenticator\
    \ and verifier are behaving as per\n   RFC 4474).\n   The above discussion of\
    \ DTLS-SRTP demonstrates how a single security\n   protocol can be in different\
    \ classes depending on the mode in which\n   it is operated.  Other protocols\
    \ can achieve a similar effect by\n   adding functions outside of the on-the-wire\
    \ key management protocol\n   itself.  Although it may be appropriate to deploy\
    \ lower-classed\n   mechanisms in some cases, the ultimate security requirement\
    \ for a\n   media security negotiation protocol is that it have a mode of\n  \
    \ operation available in which is detect-attack, which provides\n   protection\
    \ against the passive and active attacks and provides\n   detection of such attacks.\
    \  That is, there must be a way to use the\n   protocol so that an active attack\
    \ is required against both the\n   signaling and media paths, and so that such\
    \ attacks are detectable by\n   the endpoints.\n"
- title: 4.  Call Scenarios and Requirements Considerations
  contents:
  - "4.  Call Scenarios and Requirements Considerations\n   The following subsections\
    \ describe call scenarios that pose the most\n   challenge to the key management\
    \ system for media data in cooperation\n   with SIP signaling.\n   Throughout\
    \ the subsections, requirements are stated by using the\n   nomenclature R- to\
    \ state an explicit requirement.  All of the stated\n   requirements are explained\
    \ in detail in Section 5.  They are listed\n   according to their association\
    \ to the key management protocol, to\n   attack scenarios, and requirements that\
    \ can be met inside the key\n   management protocol or outside of the key management\
    \ protocol.\n"
- title: 4.1.  Clipping Media before Signaling Answer
  contents:
  - "4.1.  Clipping Media before Signaling Answer\n   The discussion in this section\
    \ relates to requirements R-AVOID-\n   CLIPPING and R-ALLOW-RTP.\n   Per the Session\
    \ Description Protocol (SDP) Offer/Answer Model\n   [RFC3264]:\n      Once the\
    \ offerer has sent the offer, it MUST be prepared to\n      receive media for\
    \ any recvonly streams described by that offer.\n      It MUST be prepared to\
    \ send and receive media for any sendrecv\n      streams in the offer, and send\
    \ media for any sendonly streams in\n      the offer (of course, it cannot actually\
    \ send until the peer\n      provides an answer with the needed address and port\
    \ information).\n   To meet this requirement with SRTP, the offerer needs to know\
    \ the\n   SRTP key for arriving media.  If either endpoint receives encrypted\n\
    \   media before it has access to the associated SRTP key, it cannot play\n  \
    \ the media -- causing clipping.\n   For key exchange mechanisms that send the\
    \ answerer's key in SDP, a\n   SIP provisional response [RFC3261], such as 183\
    \ (session progress),\n   is useful.  However, the 183 messages are not reliable\
    \ unless both\n   the calling and called endpoint support Provisional Response\n\
    \   ACKnowledgement (PRACK) [RFC3262], use TCP across all SIP proxies,\n   implement\
    \ Security Preconditions [RFC5027], or both ends implement\n   Interactive Connectivity\
    \ Establishment [ICE] and the answerer\n   implements the reliable provisional\
    \ response mechanism described in\n   ICE.  Unfortunately, there is not wide deployment\
    \ of any of these\n   techniques and there is industry reluctance to require these\n\
    \   techniques to avoid the problems described in this section.\n   Note that\
    \ the receipt of an SDP answer is not always sufficient to\n   allow media to\
    \ be played to the offerer.  Sometimes, the offerer must\n   send media in order\
    \ to open up firewall holes or NAT bindings before\n   media can be received (for\
    \ details, see [MIDDLEBOX]).  In this case,\n   even a solution that makes the\
    \ key available before the SDP answer\n   arrives will not help.\n   Preventing\
    \ the arrival of early media (i.e., media that arrives at\n   the SDP offerer\
    \ before the SDP answer arrives) might obsolete the\n   R-AVOID-CLIPPING requirement,\
    \ but at the time of writing such early\n   media exists in many normal call scenarios.\n"
- title: 4.2.  Retargeting and Forking
  contents:
  - "4.2.  Retargeting and Forking\n   The discussion in this section relates to requirements\
    \ R-FORK-\n   RETARGET, R-DISTINCT, R-HERFP, and R-BEST-SECURE.\n   In SIP, a\
    \ request sent to a specific AOR but delivered to a different\n   AOR is called\
    \ a \"retarget\".  A typical scenario is a \"call\n   forwarding\" feature.  In\
    \ Figure 1, Alice sends an INVITE in step 1\n   that is sent to Bob in step 2.\
    \  Bob responds with a redirect (SIP\n   response code 3xx) pointing to Carol\
    \ in step 3.  This redirect\n   typically does not propagate back to Alice but\
    \ only goes to a proxy\n   (i.e., the retargeting proxy) that sends the original\
    \ INVITE to Carol\n   in step 4.\n                                +-----+\n  \
    \                              |Alice|\n                                +--+--+\n\
    \                                   |\n                                   | INVITE\
    \ (1)\n                                   V\n                              +----+----+\n\
    \                              |  proxy  |\n                              ++-+-----++\n\
    \                               | ^     |\n                    INVITE (2) | |\
    \     | INVITE (4)\n                & redirect (3) | |     |\n               \
    \                V |     V\n                              ++-++   ++----+\n  \
    \                            |Bob|   |Carol|\n                              +---+\
    \   +-----+\n                           Figure 1: Retargeting\n   Using retargeting\
    \ might lead to situations where the User Agent\n   Client (UAC) does not know\
    \ where its request will be going.  This\n   might not immediately seem like a\
    \ serious problem; after all, when\n   one places a telephone call on the Public\
    \ Switched Telephone Network\n   (PSTN), one never really knows if it will be\
    \ forwarded to a different\n   number, who will pick up the line when it rings,\
    \ and so on.  However,\n   when considering SIP mechanisms for authenticating\
    \ the called party,\n   this function can also make it difficult to differentiate\
    \ an\n   intermediary that is behaving legitimately from an attacker.  From\n\
    \   this perspective, the main problems with retargeting are:\n   Not detectable\
    \ by the caller:   The originating user agent has no\n      means of anticipating\
    \ that the condition will arise, nor any means\n      of determining that it has\
    \ occurred until the call has already\n      been set up.\n   Not preventable\
    \ by the caller:  There is no existing mechanism that\n      might be employed\
    \ by the originating user agent in order to\n      guarantee that the call will\
    \ not be retargeted.\n   The mechanism used by SIP for identifying the calling\
    \ party is SIP\n   Identity [RFC4474].  However, due to the nature of retargeting,\
    \ SIP\n   Identity can only identify the calling party (that is, the party that\n\
    \   initiated the SIP request).  Some key exchange mechanisms predate SIP\n  \
    \ Identity and include their own identity mechanism (e.g., Multimedia\n   Internet\
    \ KEYing (MIKEY)).  However, those built-in identity mechanism\n   also suffer\
    \ from the SIP retargeting problem.  While Connected\n   Identity [RFC4916] allows\
    \ positive identification of the called\n   party, the primary difficulty still\
    \ remains that the calling party\n   does not know if a mismatched called party\
    \ is legitimate (i.e., due\n   to authorized retargeting) or illegitimate (i.e.,\
    \ due to unauthorized\n   retargeting by an attacker above to modify SIP signaling).\n\
    \   In SIP, 'forking' is the delivery of a request to multiple locations.\n  \
    \ This happens when a single AOR is registered more than once.  An\n   example\
    \ of forking is when a user has a desk phone, PC client, and\n   mobile handset\
    \ all registered with the same AOR.\n                               +-----+\n\
    \                               |Alice|\n                               +--+--+\n\
    \                                  |\n                                  | INVITE\n\
    \                                  V\n                            +-----+-----+\n\
    \                            |   proxy   |\n                            ++---------++\n\
    \                             |         |\n                      INVITE |    \
    \     | INVITE\n                             V         V\n                   \
    \       +--+--+   +--+--+\n                          |Bob-1|   |Bob-2|\n     \
    \                     +-----+   +-----+\n                         Figure 2: Forking\n\
    \   With forking, both Bob-1 and Bob-2 might send back SDP answers in SIP\n  \
    \ responses.  Alice will see those intermediate (18x) and final (200)\n   responses.\
    \  It is useful for Alice to be able to associate the SIP\n   response with the\
    \ incoming media stream.  Although this association\n   can be done with ICE [ICE],\
    \ and ICE is useful to make this\n   association with RTP, it is not desirable\
    \ to require ICE to\n   accomplish this association.\n   Forking and retargeting\
    \ are often used together.  For example, a boss\n   and secretary might have both\
    \ phones ring (forking) and rollover to\n   voice mail if neither phone is answered\
    \ (retargeting).\n   To maintain the security of the media traffic, only the endpoint\
    \ that\n   answers the call should know the SRTP keys for the session.  Forked\n\
    \   and retargeted calls only reveal sensitive information to non-\n   responders\
    \ when the signaling messages contain sensitive information\n   (e.g., SRTP keys)\
    \ that is accessible by parties that receive the\n   offer, but may not respond\
    \ (i.e., the original recipients in a\n   retargeted call, or non-answering endpoints\
    \ in a forked call).  For\n   key exchange mechanisms that do not provide secure\
    \ forking or secure\n   retargeting, one workaround is to rekey immediately after\
    \ forking or\n   retargeting.  However, because the originator may not be aware\
    \ that\n   the call forked this mechanism requires rekeying immediately after\n\
    \   every session is established.  This doubles the number of messages\n   processed\
    \ by the network.\n   Further compounding this problem is a unique feature of\
    \ SIP that,\n   when forking is used, there is always only one final error response\n\
    \   delivered to the sender of the request: the forking proxy is\n   responsible\
    \ for choosing which final response to choose in the event\n   where forking results\
    \ in multiple final error responses being\n   received by the forking proxy. \
    \ This means that if a request is\n   rejected, say with information that the\
    \ keying information was\n   rejected and providing the far end's credentials,\
    \ it is very possible\n   that the rejection will never reach the sender.  This\
    \ problem, called\n   the Heterogeneous Error Response Forking Problem (HERFP)\
    \ [RFC3326],\n   is difficult to solve in SIP.  Because we expect the HERFP to\n\
    \   continue to be a problem in SIP for the foreseeable future, a media\n   security\
    \ system should function even in the presence of HERFP\n   behavior.\n"
- title: 4.3.  Recording
  contents:
  - "4.3.  Recording\n   The discussion in this section relates to requirement R-RECORDING.\n\
    \   Some business environments, such as stock brokerages, banks, and\n   catalog\
    \ call centers, require recording calls with customers.  This\n   is the familiar\
    \ \"this call is being recorded for quality purposes\"\n   heard during calls\
    \ to these sorts of businesses.  In these\n   environments, media recording is\
    \ typically performed by an\n   intermediate device (with RTP, this is typically\
    \ implemented in a\n   'sniffer').\n   When performing such call recording with\
    \ SRTP, the end-to-end\n   security is compromised.  This is unavoidable, but\
    \ necessary because\n   the operation of the business requires such recording.\
    \  It is\n   desirable that the media security is not unduly compromised by the\n\
    \   media recording.  The endpoint within the organization needs to be\n   informed\
    \ that there is an intermediate device and needs to cooperate\n   with that intermediate\
    \ device.\n   This scenario does not place a requirement directly on the key\n\
    \   management protocol.  The requirement could be met directly by the\n   key\
    \ management protocol (e.g., MIKEY-NULL or [RFC4568]) or through an\n   external\
    \ out-of-band mechanism (e.g., [SRTP-KEY]).\n"
- title: 4.4.  PSTN Gateway
  contents:
  - "4.4.  PSTN Gateway\n   The discussion in this section relates to requirement\
    \ R-PSTN.\n   It is desirable, even when one leg of a call is on the PSTN, that\
    \ the\n   IP leg of the call be protected with SRTP.\n   A typical case of using\
    \ media security where two entities are having\n   a Voice over IP (VoIP) conversation\
    \ over IP-capable networks.\n   However, there are cases where the other end of\
    \ the communication is\n   not connected to an IP-capable network.  In this kind\
    \ of setting,\n   there needs to be some kind of gateway at the edge of the IP\
    \ network\n   that converts the VoIP conversation to a format understood by the\n\
    \   other network.  An example of such a gateway is a PSTN gateway\n   sitting\
    \ at the edge of IP and PSTN networks (such as the architecture\n   described\
    \ in [RFC3372]).\n   If media security (e.g., SRTP protection) is employed in\
    \ this kind of\n   gateway-setting, then media security and the related key management\n\
    \   is terminated at the PSTN gateway.  The other network (e.g., PSTN)\n   may\
    \ have its own measures to protect the communication, but this\n   means that\
    \ from media security point of view the media security is\n   not employed truly\
    \ end-to-end between the communicating entities.\n"
- title: 4.5.  Call Setup Performance
  contents:
  - "4.5.  Call Setup Performance\n   The discussion in this section relates to requirement\
    \ R-REUSE.\n   Some devices lack sufficient processing power to perform public\
    \ key\n   operations or Diffie-Hellman operations for each call, or prefer to\n\
    \   avoid performing those operations on every call.  The ability to\n   reuse\
    \ previous public key or Diffie-Hellman operations can vastly\n   decrease the\
    \ call setup delay and processing requirements for such\n   devices.\n   In certain\
    \ devices, it can take a second or two to perform a Diffie-\n   Hellman operation.\
    \  Examples of these devices include handsets, IP\n   Multimedia Services Identity\
    \ Modules (ISIMs), and PSTN gateways.\n   PSTN gateways typically utilize a Digital\
    \ Signal Processor (DSP) that\n   is not yet involved with typical DSP operations\
    \ at the beginning of a\n   call; thus, the DSP could be used to perform the calculation,\
    \ so as\n   to avoid having the central host processor perform the calculation.\n\
    \   However, not all PSTN gateways use DSPs (some have only central\n   processors\
    \ or their DSPs are incapable of performing the necessary\n   public key or Diffie-Hellman\
    \ operation), and handsets lack a\n   separate, unused processor to perform these\
    \ operations.\n   Two scenarios where R-REUSE is useful are calls between an endpoint\n\
    \   and its voicemail server or its PSTN gateway.  In those scenarios,\n   calls\
    \ are made relatively often and it can be useful for the\n   voicemail server\
    \ or PSTN gateway to avoid public key operations for\n   subsequent calls.\n \
    \  Storing keys across sessions often interferes with perfect forward\n   secrecy\
    \ (R-PFS).\n"
- title: 4.6.  Transcoding
  contents:
  - "4.6.  Transcoding\n   The discussion in this section relates to requirement R-TRANSCODER.\n\
    \   In some environments, it is necessary for network equipment to\n   transcode\
    \ from one codec (e.g., a highly compressed codec that makes\n   efficient use\
    \ of wireless bandwidth) to another codec (e.g., a\n   standardized codec to a\
    \ SIP peering interface).  With RTP, a\n   transcoding function can be performed\
    \ with the combination of a SIP\n   back-to-back user agent (B2BUA) to modify\
    \ the SDP and a processor to\n   perform the transcoding between the codecs. \
    \ However, with end-to-end\n   secured SRTP, a transcoding function implemented\
    \ the same way is a\n   man-in-the-middle attack, and the key management system\
    \ prevents its\n   use.\n   However, such a network-based transcoder can still\
    \ be realized with\n   the cooperation and approval of the endpoint, and can provide\
    \ end-to-\n   transcoder and transcoder-to-end security.\n"
- title: 4.7.  Upgrading to SRTP
  contents:
  - "4.7.  Upgrading to SRTP\n   The discussion in this section relates to the requirement\
    \ R-ALLOW-\n   RTP.\n   Legitimate RTP media can be sent to an endpoint for announcements,\n\
    \   colorful ringback tones (e.g., music), advertising, or normal call\n   progress\
    \ tones.  The RTP may be received before an associated SDP\n   answer.  For details\
    \ on various scenarios, see [EARLY-MEDIA].\n   While receiving such RTP exposes\
    \ the calling party to a risk of\n   receiving malicious RTP from an attacker,\
    \ SRTP endpoints will need to\n   receive and play out RTP media in order to be\
    \ compatible with\n   deployed systems that send RTP to calling parties.\n"
- title: 4.8.  Interworking with Other Signaling Protocols
  contents:
  - "4.8.  Interworking with Other Signaling Protocols\n   The discussion in this\
    \ section relates to the requirement R-OTHER-\n   SIGNALING.\n   In many environments,\
    \ some devices are signaled with protocols other\n   than SIP that do not share\
    \ SIP's offer/answer model (e.g., [H.248.1]\n   or do not utilize SDP (e.g., H.323).\
    \  In other environments, both\n   endpoints may be SIP, but may use different\
    \ key management systems\n   (e.g., one uses MIKEY-RSA, the other MIKEY-RSA-R).\n\
    \   In these environments, it is desirable to have SRTP -- rather than\n   RTP\
    \ -- between the two endpoints.  It is always possible, although\n   undesirable,\
    \ to interwork those disparate signaling systems or\n   disparate key management\
    \ systems by decrypting and re-encrypting each\n   SRTP packet in a device in\
    \ the middle of the network (often the same\n   device performing the signaling\
    \ interworking).  This is undesirable\n   due to the cost and increased attack\
    \ area, as such an SRTP/SRTP\n   interworking device is a valuable attack target.\n\
    \   At the time of this writing, interworking is considered important.\n   Interworking\
    \ without decryption/encryption of the SRTP, while useful,\n   is not yet deemed\
    \ critical because the scale of such SRTP deployments\n   is, to date, relatively\
    \ small.\n"
- title: 4.9.  Certificates
  contents:
  - "4.9.  Certificates\n   The discussion in this section relates to R-CERTS.\n \
    \  On the Internet and on some private networks, validating another\n   peer's\
    \ certificate is often done through a trust anchor -- a list of\n   Certificate\
    \ Authorities that are trusted.  It can be difficult or\n   expensive for a peer\
    \ to obtain these certificates.  In all cases,\n   both parties to the call would\
    \ need to trust the same trust anchor\n   (i.e., \"certificate authority\"). \
    \ For these reasons, it is important\n   that the media plane key management protocol\
    \ offer a mechanism that\n   allows end-users who have no prior association to\
    \ authenticate to\n   each other without acquiring credentials from a third-party\
    \ trust\n   point.  Note that this does not rule out mechanisms in which servers\n\
    \   have certificates and attest to the identities of end-users.\n"
- title: 5.  Requirements
  contents:
  - "5.  Requirements\n   This section is divided into several parts: requirements\
    \ specific to\n   the key management protocol (Section 5.1), attack scenarios\n\
    \   (Section 5.2), and requirements that can be met inside the key\n   management\
    \ protocol or outside of the key management protocol\n   (Section 5.3).\n"
- title: 5.1.  Key Management Protocol Requirements
  contents:
  - "5.1.  Key Management Protocol Requirements\n   SIP Forking and Retargeting, from\
    \ Section 4.2:\n   R-FORK-RETARGET:\n                     The media security key\
    \ management protocol MUST\n                     securely support forking and\
    \ retargeting when all\n                     endpoints are willing to use SRTP\
    \ without causing\n                     the call setup to fail.  This requirement\
    \ means the\n                     endpoints that did not answer the call MUST\
    \ NOT\n                     learn the SRTP keys (in either direction) used by\n\
    \                     the answering endpoint.\n   R-DISTINCT:\n              \
    \  The media security key management protocol MUST be\n                capable\
    \ of creating distinct, independent cryptographic\n                contexts for\
    \ each endpoint in a forked session.\n   R-HERFP:\n             The media security\
    \ key management protocol MUST function\n             securely even in the presence\
    \ of HERFP behavior, i.e., the\n             rejection of key information does\
    \ not reach the sender.\n   Performance considerations:\n   R-REUSE:\n       \
    \      The media security key management protocol MAY support the\n          \
    \   reuse of a previously established security context.\n         Note: reuse\
    \ of the security context does not imply reuse of RTP\n               parameters\
    \ (e.g., payload type or SSRC).\n   Media considerations:\n   R-AVOID-CLIPPING:\n\
    \                      The media security key management protocol SHOULD\n   \
    \                   avoid clipping media before SDP answer without\n         \
    \             requiring Security Preconditions [RFC5027].  This\n            \
    \          requirement comes from Section 4.1.\n   R-RTP-CHECK:\n            \
    \     If SRTP key negotiation is performed over the media\n                 path\
    \ (i.e., using the same UDP/TCP ports as media\n                 packets), the\
    \ key negotiation packets MUST NOT pass the\n                 RTP validity check\
    \ defined in Appendix A.1 of\n                 [RFC3550], so that SRTP negotiation\
    \ packets can be\n                 differentiated from RTP packets.\n   R-ASSOC:\n\
    \             The media security key management protocol SHOULD include a\n  \
    \           mechanism for associating key management messages with both\n    \
    \         the signaling traffic that initiated the session and with\n        \
    \     protected media traffic.  It is useful to associate key\n             management\
    \ messages with call signaling messages, as this\n             allows the SDP\
    \ offerer to avoid performing CPU-consuming\n             operations (e.g., Diffie-Hellman\
    \ or public key operations)\n             with attackers that have not seen the\
    \ signaling messages.\n             For example, if using a Diffie-Hellman keying\
    \ technique\n             with security preconditions that forks to 20 endpoints,\
    \ the\n             call initiator would get 20 provisional responses\n      \
    \       containing 20 signed Diffie-Hellman key pairs.  Calculating\n        \
    \     20 Diffie-Hellman secrets and validating signatures can be\n           \
    \  a difficult task for some devices.  Hence, in the case of\n             forking,\
    \ it is not desirable to perform a Diffie-Hellman\n             operation with\
    \ every party, but rather only with the party\n             that answers the call\
    \ (and incur some media clipping).  To\n             do this, the signaling and\
    \ media need to be associated so\n             the calling party knows which key\
    \ management exchange needs\n             to be completed.  This might be done\
    \ by using the transport\n             address indicated in the SDP, although\
    \ NATs can complicate\n             this association.\n         Note: due to RTP's\
    \ design requirements, it is expected that\n               SRTP receivers will\
    \ have to perform authentication of any\n               received SRTP packets.\n\
    \   R-NEGOTIATE:\n                 The media security key management protocol\
    \ MUST allow a\n                 SIP User Agent to negotiate media security parameters\n\
    \                 for each individual session.  Such negotiation MUST NOT\n  \
    \               cause a two-time pad (Section 9.1 of [RFC3711]).\n   R-PSTN:\n\
    \            The media security key management protocol MUST support\n       \
    \     termination of media security in a PSTN gateway.  This\n            requirement\
    \ is from Section 4.4.\n"
- title: 5.2.  Security Requirements
  contents:
  - "5.2.  Security Requirements\n   This section describes overall security requirements\
    \ and specific\n   requirements from the attack scenarios (Section 3).\n   Overall\
    \ security requirements:\n   R-PFS:\n           The media security key management\
    \ protocol MUST be able to\n           support perfect forward secrecy.\n   R-COMPUTE:\n\
    \               The media security key management protocol MUST support\n    \
    \           offering additional SRTP cipher suites without incurring\n       \
    \        significant computational expense.\n   R-CERTS:\n             The key\
    \ management protocol MUST NOT require that end-users\n             obtain credentials\
    \ (certificates or private keys) from a\n             third- party trust anchor.\n\
    \   R-FIPS:\n            The media security key management protocol SHOULD use\n\
    \            algorithms that allow FIPS 140-2 [FIPS-140-2] certification\n   \
    \         or similar country-specific certification (e.g.,\n            [AISITSEC]).\n\
    \            The United States Government can only purchase and use\n        \
    \    crypto implementations that have been validated by the\n            FIPS-140\
    \ [FIPS-140-2] process:\n         The FIPS-140 standard is applicable to all Federal\
    \ agencies\n               that use cryptographic-based security systems to protect\n\
    \               sensitive information in computer and telecommunication\n    \
    \           systems, including voice systems.  The adoption and use\n        \
    \       of this standard is available to private and commercial\n            \
    \   organizations.\n         Some commercial organizations, such as banks and\
    \ defense\n         contractors, require or prefer equipment that has received\
    \ the\n         same validation.\n   R-DOS:\n           The media security key\
    \ management protocol MUST NOT introduce\n           any new significant denial-of-service\
    \ vulnerabilities (e.g.,\n           the protocol should not request the endpoint\
    \ to perform CPU-\n           intensive operations without the client being able\
    \ to\n           validate or authorize the request).\n   R-EXISTING:\n       \
    \         The media security key management protocol SHOULD allow\n          \
    \      endpoints to authenticate using pre-existing\n                cryptographic\
    \ credentials, e.g., certificates or\n                pre-shared keys.\n   R-AGILITY:\n\
    \               The media security key management protocol MUST provide\n    \
    \           crypto- agility, i.e., the ability to adapt to evolving\n        \
    \       cryptography and security requirements (update of\n               cryptographic\
    \ algorithms without substantial disruption\n               to deployed implementations).\n\
    \   R-DOWNGRADE:\n                 The media security key management protocol\
    \ MUST protect\n                 cipher suite negotiation against downgrading\
    \ attacks.\n   R-PASS-MEDIA:\n                  The media security key management\
    \ protocol MUST have a\n                  mode that prevents a passive adversary\
    \ with access to\n                  the media path from gaining access to keying\
    \ material\n                  used to protect SRTP media packets.\n   R-PASS-SIG:\n\
    \                The media security key management protocol MUST have a\n    \
    \            mode in which it prevents a passive adversary with\n            \
    \    access to the signaling path from gaining access to\n                keying\
    \ material used to protect SRTP media packets.\n   R-SIG-MEDIA:\n            \
    \     The media security key management protocol MUST have a\n               \
    \  mode in which it defends itself from an attacker that\n                 is\
    \ solely on the media path and from an attacker that\n                 is solely\
    \ on the signaling path.  A successful attack\n                 refers to the\
    \ ability for the adversary to obtain\n                 keying material to decrypt\
    \ the SRTP encrypted media\n                 traffic.\n   R-ID-BINDING:\n    \
    \              The media security key management protocol MUST enable\n      \
    \            the media security keys to be cryptographically bound\n         \
    \         to an identity of the endpoint.\n         Note: This allows domains\
    \ to deploy SIP Identity [RFC4474].\n   R-ACT-ACT:\n               The media security\
    \ key management protocol MUST support a\n               mode of operation that\
    \ provides\n               active-signaling-active-media-detect robustness, and\
    \ MAY\n               support modes of operation that provide lower levels of\n\
    \               robustness (as described in Section 3).\n         Note: Failing\
    \ to meet R-ACT-ACT indicates the protocol cannot\n               provide secure\
    \ end-to-end media.\n"
- title: 5.3.  Requirements outside of the Key Management Protocol
  contents:
  - "5.3.  Requirements outside of the Key Management Protocol\n   The requirements\
    \ in this section are for an overall VoIP security\n   system.  These requirements\
    \ can be met within the key management\n   protocol itself, or can be solved outside\
    \ of the key management\n   protocol itself (e.g., solved in SIP or in SDP).\n\
    \   R-BEST-SECURE:\n                   Even when some endpoints of a forked or\
    \ retargeted\n                   call are incapable of using SRTP, a solution\
    \ MUST be\n                   described that allows the establishment of SRTP\n\
    \                   associations with SRTP-capable endpoints and/or RTP\n    \
    \               associations with non-SRTP-capable endpoints.\n   R-OTHER-SIGNALING:\n\
    \                       A solution SHOULD be able to negotiate keys for\n    \
    \                   SRTP sessions created via different call\n               \
    \        signaling protocols (e.g., between Jabber, SIP,\n                   \
    \    H.323, Media Gateway Control Protocol (MGCP).\n   R-RECORDING:\n        \
    \         A solution SHOULD be described that supports recording\n           \
    \      of decrypted media.  This requirement comes from\n                 Section\
    \ 4.3.\n   R-TRANSCODER:\n                  A solution SHOULD be described that\
    \ supports\n                  intermediate nodes (e.g., transcoders), terminating\
    \ or\n                  processing media, between the endpoints.\n   R-ALLOW-RTP:\
    \  A solution SHOULD be described that allows RTP media to\n                 be\
    \ received by the calling party until SRTP has been\n                 negotiated\
    \ with the answerer, after which SRTP is\n                 preferred over RTP.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document lists requirements for securing\
    \ media traffic.  As\n   such, it addresses security throughout the document.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   For contributions to the requirements portion of this\
    \ document, the\n   authors would like to thank the active participants of the\
    \ RTPSEC BoF\n   and on the RTPSEC mailing list, and a special thanks to Steffen\
    \ Fries\n   and Dragan Ignjatic for their excellent MIKEY comparison [RFC5197]\n\
    \   document.\n   The authors would furthermore like to thank the following people\
    \ for\n   their review, suggestions, and comments: Flemming Andreasen, Richard\n\
    \   Barnes, Mark Baugher, Wolfgang Buecker, Werner Dittmann, Lakshminath\n   Dondeti,\
    \ John Elwell, Martin Euchner, Hans-Heinrich Grusdt, Christer\n   Holmberg, Guenther\
    \ Horn, Peter Howard, Leo Huang, Dragan Ignjatic,\n   Cullen Jennings, Alan Johnston,\
    \ Vesa Lehtovirta, Matt Lepinski, David\n   McGrew, David Oran, Colin Perkins,\
    \ Eric Raymond, Eric Rescorla, Peter\n   Schneider, Frank Shearar, Srinath Thiruvengadam,\
    \ Dave Ward, Dan York,\n   and Phil Zimmermann.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [FIPS-140-2]   NIST, \"Security Requirements for\
    \ Cryptographic\n                  Modules\", June 2005, <http://csrc.nist.gov/\n\
    \                  publications/fips/fips140-2/fips1402.pdf>.\n   [RFC2119]  \
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3261]      Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G.,\n                  Johnston, A., Peterson, J., Sparks, R.,\
    \ Handley, M.,\n                  and E. Schooler, \"SIP: Session Initiation Protocol\"\
    ,\n                  RFC 3261, June 2002.\n   [RFC3262]      Rosenberg, J. and\
    \ H. Schulzrinne, \"Reliability of\n                  Provisional Responses in\
    \ Session Initiation Protocol\n                  (SIP)\", RFC 3262, June 2002.\n\
    \   [RFC3264]      Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer\n     \
    \             Model with Session Description Protocol (SDP)\",\n             \
    \     RFC 3264, June 2002.\n   [RFC3711]      Baugher, M., McGrew, D., Naslund,\
    \ M., Carrara, E., and\n                  K. Norrman, \"The Secure Real-time Transport\
    \ Protocol\n                  (SRTP)\", RFC 3711, March 2004.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AISITSEC]     Bundesamt fuer Sicherheit in\
    \ der Informationstechnik\n                  [Federal Office of Information Security\
    \ - Germany],\n                  \"Anwendungshinweise und Interpretationen (AIS)\
    \ zu\n                  ITSEC\", January 2002,\n                  <http://www.bsi.de/zertifiz/zert/interpr/\n\
    \                  aisitsec.htm>.\n   [DTLS-SRTP]    McGrew, D. and E. Rescorla,\
    \ \"Datagram Transport Layer\n                  Security (DTLS) Extension to Establish\
    \ Keys for Secure\n                  Real-time Transport Protocol (SRTP)\", Work\n\
    \                  in Progress, October 2008.\n   [EARLY-MEDIA]  Stucker, B.,\
    \ \"Coping with Early Media in the Session\n                  Initiation Protocol\
    \ (SIP)\", Work in Progress,\n                  October 2006.\n   [EKT]      \
    \    McGrew, D., \"Encrypted Key Transport for Secure RTP\",\n               \
    \   Work in Progress, July 2007.\n   [H.248.1]      ITU, \"Gateway control protocol\"\
    , Recommendation H.248,\n                  June 2000, <http://www.itu.int/rec/T-REC-H.248/e>.\n\
    \   [ICE]          Rosenberg, J., \"Interactive Connectivity Establishment\n \
    \                 (ICE): A Protocol for Network Address  Translator\n        \
    \          (NAT) Traversal for Offer/Answer Protocols\", Work\n              \
    \    in Progress, October 2007.\n   [MIDDLEBOX]    Stucker, B. and H. Tschofenig,\
    \ \"Analysis of Middlebox\n                  Interactions for Signaling Protocol\
    \ Communication\n                  along the Media Path\", Work in Progress, July\
    \ 2008.\n   [MIKEY-ECC]    Milne, A., \"ECC Algorithms for MIKEY\", Work\n   \
    \               in Progress, June 2007.\n   [MIKEYv2]      Dondeti, L., \"MIKEYv2:\
    \ SRTP Key Management using\n                  MIKEY, revisited\", Work in Progress,\
    \ March 2007.\n   [MULTIPART]    Wing, D. and C. Jennings, \"Session Initiation\
    \ Protocol\n                  (SIP) Offer/Answer with Multipart Alternative\"\
    , Work\n                  in Progress, March 2006.\n   [RFC3326]      Schulzrinne,\
    \ H., Oran, D., and G. Camarillo, \"The\n                  Reason Header Field\
    \ for the Session Initiation\n                  Protocol (SIP)\", RFC 3326, December\
    \ 2002.\n   [RFC3372]      Vemuri, A. and J. Peterson, \"Session Initiation\n\
    \                  Protocol for Telephones (SIP-T): Context and\n            \
    \      Architectures\", BCP 63, RFC 3372, September 2002.\n   [RFC3550]      Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n                  Jacobson, \"RTP: A\
    \ Transport Protocol for Real-Time\n                  Applications\", STD 64,\
    \ RFC 3550, July 2003.\n   [RFC3830]      Arkko, J., Carrara, E., Lindholm, F.,\
    \ Naslund, M., and\n                  K. Norrman, \"MIKEY: Multimedia Internet\
    \ KEYing\",\n                  RFC 3830, August 2004.\n   [RFC4474]      Peterson,\
    \ J. and C. Jennings, \"Enhancements for\n                  Authenticated Identity\
    \ Management in the Session\n                  Initiation Protocol (SIP)\", RFC\
    \ 4474, August 2006.\n   [RFC4492]      Blake-Wilson, S., Bolyard, N., Gupta,\
    \ V., Hawk, C.,\n                  and B. Moeller, \"Elliptic Curve Cryptography\
    \ (ECC)\n                  Cipher Suites for Transport Layer Security (TLS)\"\
    ,\n                  RFC 4492, May 2006.\n   [RFC4568]      Andreasen, F., Baugher,\
    \ M., and D. Wing, \"Session\n                  Description Protocol (SDP) Security\
    \ Descriptions for\n                  Media Streams\", RFC 4568, July 2006.\n\
    \   [RFC4650]      Euchner, M., \"HMAC-Authenticated Diffie-Hellman for\n    \
    \              Multimedia Internet KEYing (MIKEY)\", RFC 4650,\n             \
    \     September 2006.\n   [RFC4738]      Ignjatic, D., Dondeti, L., Audet, F.,\
    \ and P. Lin,\n                  \"MIKEY-RSA-R: An Additional Mode of Key Distribution\n\
    \                  in Multimedia Internet KEYing (MIKEY)\", RFC 4738,\n      \
    \            November 2006.\n   [RFC4771]      Lehtovirta, V., Naslund, M., and\
    \ K. Norrman,\n                  \"Integrity Transform Carrying Roll-Over Counter\
    \ for\n                  the Secure Real-time Transport Protocol (SRTP)\",\n \
    \                 RFC 4771, January 2007.\n   [RFC4916]      Elwell, J., \"Connected\
    \ Identity in the Session\n                  Initiation Protocol (SIP)\", RFC\
    \ 4916, June 2007.\n   [RFC4949]      Shirey, R., \"Internet Security Glossary,\
    \ Version 2\",\n                  FYI 36, RFC 4949, August 2007.\n   [RFC5027]\
    \      Andreasen, F. and D. Wing, \"Security Preconditions for\n             \
    \     Session Description Protocol (SDP) Media Streams\",\n                  RFC\
    \ 5027, October 2007.\n   [RFC5197]      Fries, S. and D. Ignjatic, \"On the Applicability\
    \ of\n                  Various Multimedia Internet KEYing (MIKEY) Modes and\n\
    \                  Extensions\", RFC 5197, June 2008.\n   [RFC5246]      Dierks,\
    \ T. and E. Rescorla, \"The Transport Layer\n                  Security (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n                  August 2008.\n   [SDP-CAP]\
    \      Andreasen, F., \"SDP Capability Negotiation\", Work\n                 \
    \ in Progress, July 2008.\n   [SDP-DH]       Baugher, M. and D. McGrew, \"Diffie-Hellman\
    \ Exchanges\n                  for Multimedia Sessions\", Work in Progress,\n\
    \                  February 2006.\n   [SIP-CERTS]    Jennings, C. and J. Fischl,\
    \ \"Certificate Management\n                  Service for The Session Initiation\
    \ Protocol (SIP)\",\n                  Work in Progress, November 2008.\n   [SIP-DTLS]\
    \     Fischl, J., \"Datagram Transport Layer Security (DTLS)\n               \
    \   Protocol for Protection of Media Traffic Established\n                  with\
    \ the Session Initiation Protocol\", Work\n                  in Progress, July\
    \ 2007.\n   [SRTP-KEY]     Wing, D., Audet, F., Fries, S., Tschofenig, H., and\
    \ A.\n                  Johnston, \"Secure Media Recording and Transcoding with\n\
    \                  the Session Initiation Protocol\", Work in Progress,\n    \
    \              October 2008.\n   [ZRTP]         Zimmermann, P., Johnston, A.,\
    \ and J. Callas, \"ZRTP:\n                  Media Path Key Agreement for Secure\
    \ RTP\", Work\n                  in Progress, February 2009.\n"
- title: Appendix A.  Overview and Evaluation of Existing Keying Mechanisms
  contents:
  - "Appendix A.  Overview and Evaluation of Existing Keying Mechanisms\n   Based\
    \ on how the SRTP keys are exchanged, each SRTP key exchange\n   mechanism belongs\
    \ to one general category:\n   signaling path:\n                    All the keying\
    \ is carried in the call signaling (SIP\n                    or SDP) path.\n \
    \  media path:\n                All the keying is carried in the SRTP/SRTCP media\
    \ path,\n                and no signaling whatsoever is carried in the call\n\
    \                signaling path.\n   signaling and media path:\n             \
    \                 Parts of the keying are carried in the\n                   \
    \           SRTP/SRTCP media path, and parts are\n                           \
    \   carried in the call signaling (SIP or SDP)\n                             \
    \ path.\n   One of the significant benefits of SRTP over other end-to-end\n  \
    \ encryption mechanisms, such as for example IPsec, is that SRTP is\n   bandwidth\
    \ efficient and SRTP retains the header of RTP packets.\n   Bandwidth efficiency\
    \ is vital for VoIP in many scenarios where access\n   bandwidth is limited or\
    \ expensive, and retaining the RTP header is\n   important for troubleshooting\
    \ packet loss, delay, and jitter.\n   Related to SRTP's characteristics is a goal\
    \ that any SRTP keying\n   mechanism to also be efficient and not cause additional\
    \ call setup\n   delay.  Contributors to additional call setup delay include network\n\
    \   or database operations: retrieval of certificates and additional SIP\n   or\
    \ media path messages, and computational overhead of establishing\n   keys or\
    \ validating certificates.\n   When examining the choice between keying in the\
    \ signaling path,\n   keying in the media path, or keying in both paths, it is\
    \ important to\n   realize the media path is generally \"faster\" than the SIP\
    \ signaling\n   path.  The SIP signaling path has computational elements involved\n\
    \   that parse and route SIP messages.  The media path, on the other\n   hand,\
    \ does not normally have computational elements involved, and\n   even when computational\
    \ elements such as firewalls are involved, they\n   cause very little additional\
    \ delay.  Thus, the media path can be\n   useful for exchanging several messages\
    \ to establish SRTP keys.  A\n   disadvantage of keying over the media path is\
    \ that interworking\n   different key exchange requires the interworking function\
    \ be in the\n   media path, rather than just in the signaling path; in practice,\
    \ this\n   involvement is probably unavoidable anyway.\n"
- title: A.1.  Signaling Path Keying Techniques
  contents:
  - 'A.1.  Signaling Path Keying Techniques

    '
- title: A.1.1.  MIKEY-NULL
  contents:
  - "A.1.1.  MIKEY-NULL\n   MIKEY-NULL [RFC3830] has the offerer indicate the SRTP\
    \ keys for both\n   directions.  The key is sent unencrypted in SDP, which means\
    \ the SDP\n   must be encrypted hop-by-hop (e.g., by using TLS (SIPS)) or end-to-\n\
    \   end (e.g., by using Secure/Multipurpose Internet Mail Extensions\n   (S/MIME)).\n\
    \   MIKEY-NULL requires one message from offerer to answerer (half a\n   round\
    \ trip), and does not add additional media path messages.\n"
- title: A.1.2.  MIKEY-PSK
  contents:
  - "A.1.2.  MIKEY-PSK\n   MIKEY-PSK (pre-shared key) [RFC3830] requires that all\
    \ endpoints\n   share one common key.  MIKEY-PSK has the offerer encrypt the SRTP\n\
    \   keys for both directions using this pre-shared key.\n   MIKEY-PSK requires\
    \ one message from offerer to answerer (half a round\n   trip), and does not add\
    \ additional media path messages.\n"
- title: A.1.3.  MIKEY-RSA
  contents:
  - "A.1.3.  MIKEY-RSA\n   MIKEY-RSA [RFC3830] has the offerer encrypt the keys for\
    \ both\n   directions using the intended answerer's public key, which is\n   obtained\
    \ from a mechanism outside of MIKEY.\n   MIKEY-RSA requires one message from offerer\
    \ to answerer (half a round\n   trip), and does not add additional media path\
    \ messages.  MIKEY-RSA\n   requires the offerer to obtain the intended answerer's\
    \ certificate.\n"
- title: A.1.4.  MIKEY-RSA-R
  contents:
  - "A.1.4.  MIKEY-RSA-R\n   MIKEY-RSA-R [RFC4738] is essentially the same as MIKEY-RSA\
    \ but\n   reverses the role of the offerer and the answerer with regards to\n\
    \   providing the keys.  That is, the answerer encrypts the keys for both\n  \
    \ directions using the offerer's public key.  Both the offerer and\n   answerer\
    \ validate each other's public keys using a standard X.509\n   validation techniques.\
    \  MIKEY-RSA-R also enables sending certificates\n   in the MIKEY message.\n \
    \  MIKEY-RSA-R requires one message from offerer to answer, and one\n   message\
    \ from answerer to offerer (full round trip), and does not add\n   additional\
    \ media path messages.  MIKEY-RSA-R requires the offerer\n   validate the answerer's\
    \ certificate.\n"
- title: A.1.5.  MIKEY-DHSIGN
  contents:
  - "A.1.5.  MIKEY-DHSIGN\n   In MIKEY-DHSIGN [RFC3830], the offerer and answerer\
    \ derive the key\n   from a Diffie-Hellman (DH) exchange.  In order to prevent\
    \ an active\n   man-in-the-middle, the DH exchange itself is signed using each\n\
    \   endpoint's private key and the associated public keys are validated\n   using\
    \ standard X.509 validation techniques.\n   MIKEY-DHSIGN requires one message\
    \ from offerer to answerer, and one\n   message from answerer to offerer (full\
    \ round trip), and does not add\n   additional media path messages.  MIKEY-DHSIGN\
    \ requires the offerer\n   and answerer to validate each other's certificates.\
    \  MIKEY-DHSIGN\n   also enables sending the answerer's certificate in the MIKEY\
    \ message.\n"
- title: A.1.6.  MIKEY-DHHMAC
  contents:
  - "A.1.6.  MIKEY-DHHMAC\n   MIKEY-DHHMAC [RFC4650] uses a pre-shared secret to HMAC\
    \ the Diffie-\n   Hellman exchange, essentially combining aspects of MIKEY-PSK\
    \ with\n   MIKEY-DHSIGN, but without MIKEY-DHSIGN's need for certificate\n   authentication.\n\
    \   MIKEY-DHHMAC requires one message from offerer to answerer, and one\n   message\
    \ from answerer to offerer (full round trip), and does not add\n   additional\
    \ media path messages.\n"
- title: A.1.7.  MIKEY-ECIES and MIKEY-ECMQV (MIKEY-ECC)
  contents:
  - "A.1.7.  MIKEY-ECIES and MIKEY-ECMQV (MIKEY-ECC)\n   ECC Algorithms For MIKEY\
    \ [MIKEY-ECC] describes how ECC can be used\n   with MIKEY-RSA (using Elliptic\
    \ Curve Digital Signature Algorithm\n   (ECDSA) signature) and with MIKEY-DHSIGN\
    \ (using a new DH-Group code),\n   and also defines two new ECC-based algorithms,\
    \ Elliptic Curve\n   Integrated Encryption Scheme (ECIES) and Elliptic Curve Menezes-Qu-\n\
    \   Vanstone (ECMQV) .\n   With this proposal, the ECDSA signature, MIKEY-ECIES,\
    \ and MIKEY-ECMQV\n   function exactly like MIKEY-RSA, and the new DH-Group code\
    \ function\n   exactly like MIKEY-DHSIGN.  Therefore, these ECC mechanisms are\
    \ not\n   discussed separately in this document.\n"
- title: A.1.8.  SDP Security Descriptions with SIPS
  contents:
  - "A.1.8.  SDP Security Descriptions with SIPS\n   SDP Security Descriptions [RFC4568]\
    \ have each side indicate the key\n   they will use for transmitting SRTP media,\
    \ and the keys are sent in\n   the clear in SDP.  SDP Security Descriptions rely\
    \ on hop-by-hop (TLS\n   via \"SIPS:\") encryption to protect the keys exchanged\
    \ in signaling.\n   SDP Security Descriptions requires one message from offerer\
    \ to\n   answerer, and one message from answerer to offerer (full round trip),\n\
    \   and does not add additional media path messages.\n"
- title: A.1.9.  SDP Security Descriptions with S/MIME
  contents:
  - "A.1.9.  SDP Security Descriptions with S/MIME\n   This keying mechanism is identical\
    \ to Appendix A.1.8 except that,\n   rather than protecting the signaling with\
    \ TLS, the entire SDP is\n   encrypted with S/MIME.\n"
- title: A.1.10.  SDP-DH (Expired)
  contents:
  - "A.1.10.  SDP-DH (Expired)\n   SDP Diffie-Hellman [SDP-DH] exchanges Diffie-Hellman\
    \ messages in the\n   signaling path to establish session keys.  To protect against\
    \ active\n   man-in-the-middle attacks, the Diffie-Hellman exchange needs to be\n\
    \   protected with S/MIME, SIPS, or SIP Identity [RFC4474] and SIP\n   Connected\
    \ Identity [RFC4916].\n   SDP-DH requires one message from offerer to answerer,\
    \ and one message\n   from answerer to offerer (full round trip), and does not\
    \ add\n   additional media path messages.\n"
- title: A.1.11.  MIKEYv2 in SDP (Expired)
  contents:
  - "A.1.11.  MIKEYv2 in SDP (Expired)\n   MIKEYv2 [MIKEYv2] adds mode negotiation\
    \ to MIKEYv1 and removes the\n   time synchronization requirement.  It therefore\
    \ now takes 2 round\n   trips to complete.  In the first round trip, the communicating\n\
    \   parties learn each other's identities, agree on a MIKEY mode, crypto\n   algorithm,\
    \ SRTP policy, and exchanges nonces for replay protection.\n   In the second round\
    \ trip, they negotiate unicast and/or group SRTP\n   context for SRTP and/or SRTCP.\n\
    \   Furthermore, MIKEYv2 also defines an in-band negotiation mode as an\n   alternative\
    \ to SDP (see Appendix A.3.3).\n"
- title: A.2.  Media Path Keying Technique
  contents:
  - 'A.2.  Media Path Keying Technique

    '
- title: A.2.1.  ZRTP
  contents:
  - "A.2.1.  ZRTP\n   ZRTP [ZRTP] does not exchange information in the signaling path\n\
    \   (although it's possible for endpoints to exchange a hash of the ZRTP\n   Hello\
    \ message with \"a=zrtp-hash\" in the initial offer if sent over an\n   integrity-protected\
    \ signaling channel.  This provides some useful\n   correlation between the signaling\
    \ and media layers).  In ZRTP, the\n   keys are exchanged entirely in the media\
    \ path using a Diffie-Hellman\n   exchange.  The advantage to this mechanism is\
    \ that the signaling\n   channel is used only for call setup and the media channel\
    \ is used to\n   establish an encrypted channel -- much like encryption devices\
    \ on the\n   PSTN.  ZRTP uses voice authentication of its Diffie-Hellman exchange\n\
    \   by having each person read digits or words to the other person.\n   Subsequent\
    \ sessions with the same ZRTP endpoint can be authenticated\n   using the stored\
    \ hash of the previously negotiated key rather than\n   voice authentication.\
    \  ZRTP uses four media path messages (Hello,\n   Commit, DHPart1, and DHPart2)\
    \ to establish the SRTP key, and three\n   media path confirmation messages. \
    \ These initial messages are all\n   sent as non-RTP packets.\n      Note: that\
    \ when ZRTP probing is used, unencrypted RTP can be\n      exchanged until the\
    \ SRTP keys are established.\n"
- title: A.3.  Signaling and Media Path Keying Techniques
  contents:
  - 'A.3.  Signaling and Media Path Keying Techniques

    '
- title: A.3.1.  EKT
  contents:
  - "A.3.1.  EKT\n   EKT [EKT] relies on another SRTP key exchange protocol, such\
    \ as SDP\n   Security Descriptions or MIKEY, for bootstrapping.  In the initial\n\
    \   phase, each member of a conference uses an SRTP key exchange protocol\n  \
    \ to establish a common key encryption key (KEK).  Each member may use\n   the\
    \ KEK to securely transport its SRTP master key and current SRTP\n   rollover\
    \ counter (ROC), via RTCP, to the other participants in the\n   session.\n   EKT\
    \ requires the offerer to send some parameters (EKT_Cipher, KEK,\n   and security\
    \ parameter index (SPI)) via the bootstrapping protocol\n   such as SDP Security\
    \ Descriptions or MIKEY.  Each answerer sends an\n   SRTCP message that contains\
    \ the answerer's SRTP Master Key, rollover\n   counter, and the SRTP sequence\
    \ number.  Rekeying is done by sending a\n   new SRTCP message.  For reliable\
    \ transport, multiple RTCP messages\n   need to be sent.\n"
- title: A.3.2.  DTLS-SRTP
  contents:
  - "A.3.2.  DTLS-SRTP\n   DTLS-SRTP [DTLS-SRTP] exchanges public key fingerprints\
    \ in SDP\n   [SIP-DTLS] and then establishes a DTLS session over the media\n \
    \  channel.  The endpoints use the DTLS handshake to agree on crypto\n   suites\
    \ and establish SRTP session keys.  SRTP packets are then\n   exchanged between\
    \ the endpoints.\n   DTLS-SRTP requires one message from offerer to answerer (half\
    \ round\n   trip), and one message from the answerer to offerer (full round trip)\n\
    \   so the offerer can correlate the SDP answer with the answering\n   endpoint.\
    \  DTLS-SRTP uses four media path messages to establish the\n   SRTP key.\n  \
    \ This document assumes DTLS will use TLS_RSA_WITH_AES_128_CBC_SHA as\n   its\
    \ cipher suite, which is the mandatory-to-implement cipher suite in\n   TLS [RFC5246].\n"
- title: A.3.3.  MIKEYv2 Inband (Expired)
  contents:
  - "A.3.3.  MIKEYv2 Inband (Expired)\n   As defined in Appendix A.1.11, MIKEYv2 also\
    \ defines an in-band\n   negotiation mode as an alternative to SDP (see Appendix\
    \ A.3.3).  The\n   details are not sorted out in the document yet on what in-band\n\
    \   actually means (i.e., UDP, RTP, RTCP, etc.).\n"
- title: A.4.  Evaluation Criteria - SIP
  contents:
  - "A.4.  Evaluation Criteria - SIP\n   This section considers how each keying mechanism\
    \ interacts with SIP\n   features.\n"
- title: A.4.1.  Secure Retargeting and Secure Forking
  contents:
  - "A.4.1.  Secure Retargeting and Secure Forking\n   Retargeting and forking of\
    \ signaling requests is described within\n   Section 4.2.  The following builds\
    \ upon this description.\n   The following list compares the behavior of secure\
    \ forking, answering\n   association, two-time pads, and secure retargeting for\
    \ each keying\n   mechanism.\n      MIKEY-NULL\n         Secure Forking: No, all\
    \ AORs see offerer's and answerer's keys.\n         Answer is associated with\
    \ media by the SSRC in MIKEY.\n         Additionally, a two-time pad occurs if\
    \ two branches choose the\n         same 32-bit SSRC and transmit SRTP packets.\n\
    \         Secure Retargeting: No, all targets see offerer's and\n         answerer's\
    \ keys.  Suffers from retargeting identity problem.\n      MIKEY-PSK\n       \
    \  Secure Forking: No, all AORs see offerer's and answerer's keys.\n         Answer\
    \ is associated with media by the SSRC in MIKEY.  Note\n         that all AORs\
    \ must share the same pre-shared key in order for\n         forking to work at\
    \ all with MIKEY-PSK.  Additionally, a two-\n         time pad occurs if two branches\
    \ choose the same 32-bit SSRC and\n         transmit SRTP packets.\n         Secure\
    \ Retargeting: Not secure.  For retargeting to work, the\n         final target\
    \ must possess the correct PSK.  As this is likely\n         in scenarios where\
    \ the call is targeted to another device\n         belonging to the same user\
    \ (forking), it is very unlikely that\n         other users will possess that\
    \ PSK and be able to successfully\n         answer that call.\n      MIKEY-RSA\n\
    \         Secure Forking: No, all AORs see offerer's and answerer's keys.\n  \
    \       Answer is associated with media by the SSRC in MIKEY.  Note\n        \
    \ that all AORs must share the same private key in order for\n         forking\
    \ to work at all with MIKEY-RSA.  Additionally, a two-\n         time pad occurs\
    \ if two branches choose the same 32-bit SSRC and\n         transmit SRTP packets.\n\
    \         Secure Retargeting: No.\n      MIKEY-RSA-R\n         Secure Forking:\
    \ Yes, answer is associated with media by the\n         SSRC in MIKEY.\n     \
    \    Secure Retargeting: Yes.\n      MIKEY-DHSIGN\n         Secure Forking: Yes,\
    \ each forked endpoint negotiates unique\n         keys with the offerer for both\
    \ directions.  Answer is\n         associated with media by the SSRC in MIKEY.\n\
    \         Secure Retargeting: Yes, each target negotiates unique keys\n      \
    \   with the offerer for both directions.\n      MIKEYv2 in SDP\n         The\
    \ behavior will depend on which mode is picked.\n      MIKEY-DHHMAC\n        \
    \ Secure Forking: Yes, each forked endpoint negotiates unique\n         keys with\
    \ the offerer for both directions.  Answer is\n         associated with media\
    \ by the SSRC in MIKEY.\n         Secure Retargeting: Yes, each target negotiates\
    \ unique keys\n         with the offerer for both directions.  Note that for the\
    \ keys\n         to be meaningful, it would require the PSK to be the same for\n\
    \         all the potential intermediaries, which would only happen\n        \
    \ within a single domain.\n      SDP Security Descriptions with SIPS\n       \
    \  Secure Forking: No, each forked endpoint sees the offerer's\n         key.\
    \  Answer is not associated with media.\n         Secure Retargeting: No, each\
    \ target sees the offerer's key.\n      SDP Security Descriptions with S/MIME\n\
    \         Secure Forking: No, each forked endpoint sees the offerer's\n      \
    \   key.  Answer is not associated with media.\n         Secure Retargeting: No,\
    \ each target sees the offerer's key.\n         Suffers from retargeting identity\
    \ problem.\n      SDP-DH\n         Secure Forking: Yes, each forked endpoint calculates\
    \ a unique\n         SRTP key.  Answer is not associated with media.\n       \
    \  Secure Retargeting: Yes, the final target calculates a unique\n         SRTP\
    \ key.\n      ZRTP\n         Secure Forking: Yes, each forked endpoint calculates\
    \ a unique\n         SRTP key.  With the \"a=zrtp-hash\" attribute, the media\
    \ can be\n         associated with an answer.\n         Secure Retargeting: Yes,\
    \ the final target calculates a unique\n         SRTP key.\n      EKT\n      \
    \   Secure Forking: Inherited from the bootstrapping mechanism (the\n        \
    \ specific MIKEY mode or SDP Security Descriptions).  Answer is\n         associated\
    \ with media by the SPI in the EKT protocol.  Answer\n         is associated with\
    \ media by the SPI in the EKT protocol.\n         Secure Retargeting: Inherited\
    \ from the bootstrapping mechanism\n         (the specific MIKEY mode or SDP Security\
    \ Descriptions).\n      DTLS-SRTP\n         Secure Forking: Yes, each forked endpoint\
    \ calculates a unique\n         SRTP key.  Answer is associated with media by\
    \ the certificate\n         fingerprint in signaling and certificate in the media\
    \ path.\n         Secure Retargeting: Yes, the final target calculates a unique\n\
    \         SRTP key.\n      MIKEYv2 Inband\n         The behavior will depend on\
    \ which mode is picked.\n"
- title: A.4.2.  Clipping Media before SDP Answer
  contents:
  - "A.4.2.  Clipping Media before SDP Answer\n   Clipping media before receiving\
    \ the signaling answer is described\n   within Section 4.1.  The following builds\
    \ upon this description.\n   Furthermore, the problem of clipping gets compounded\
    \ when forking is\n   used.  For example, if using a Diffie-Hellman keying technique\
    \ with\n   security preconditions that forks to 20 endpoints, the call initiator\n\
    \   would get 20 provisional responses containing 20 signed Diffie-\n   Hellman\
    \ half keys.  Calculating 20 DH secrets and validating\n   signatures can be a\
    \ difficult task depending on the device\n   capabilities.\n   The following list\
    \ compares the behavior of clipping before SDP\n   answer for each keying mechanism.\n\
    \      MIKEY-NULL\n         Not clipped.  The offerer provides the answerer's\
    \ keys.\n      MIKEY-PSK\n         Not clipped.  The offerer provides the answerer's\
    \ keys.\n      MIKEY-RSA\n         Not clipped.  The offerer provides the answerer's\
    \ keys.\n      MIKEY-RSA-R\n         Clipped.  The answer contains the answerer's\
    \ encryption key.\n      MIKEY-DHSIGN\n         Clipped.  The answer contains\
    \ the answerer's Diffie-Hellman\n         response.\n      MIKEY-DHHMAC\n    \
    \     Clipped.  The answer contains the answerer's Diffie-Hellman\n         response.\n\
    \      MIKEYv2 in SDP\n         The behavior will depend on which mode is picked.\n\
    \      SDP Security Descriptions with SIPS\n         Clipped.  The answer contains\
    \ the answerer's encryption key.\n      SDP Security Descriptions with S/MIME\n\
    \         Clipped.  The answer contains the answerer's encryption key.\n     \
    \ SDP-DH\n         Clipped.  The answer contains the answerer's Diffie-Hellman\n\
    \         response.\n      ZRTP\n         Not clipped because the session initially\
    \ uses RTP.  While RTP\n         is flowing, both ends negotiate SRTP keys in\
    \ the media path and\n         then switch to using SRTP.\n      EKT\n       \
    \  Not clipped, as long as the first RTCP packet (containing the\n         answerer's\
    \ key) is not lost in transit.  The answerer sends its\n         encryption key\
    \ in RTCP, which arrives at the same time (or\n         before) the first SRTP\
    \ packet encrypted with that key.\n            Note: RTCP needs to work, in the\
    \ answerer-to-offerer\n            direction, before the offerer can decrypt SRTP\
    \ media.\n      DTLS-SRTP\n         No clipping after the DTLS-SRTP handshake\
    \ has completed.  SRTP\n         keys are exchanged in the media path.  Need to\
    \ wait for SDP\n         answer to ensure DTLS-SRTP handshake was done with an\n\
    \         authorized party.\n            If a middlebox interferes with the media\
    \ path, there can be\n            clipping [MIDDLEBOX].\n      MIKEYv2 Inband\n\
    \         Not clipped.  Keys are exchanged in the media path without\n       \
    \  relying on the signaling path.\n"
- title: A.4.3.  SSRC and ROC
  contents:
  - "A.4.3.  SSRC and ROC\n   In SRTP, a cryptographic context is defined as the SSRC,\
    \ destination\n   network address, and destination transport port number.  Whereas\
    \ RTP,\n   a flow is defined as the destination network address and destination\n\
    \   transport port number.  This results in a problem -- how to\n   communicate\
    \ the SSRC so that the SSRC can be used for the\n   cryptographic context.\n \
    \  Two approaches have emerged for this communication.  One, used by all\n   MIKEY\
    \ modes, is to communicate the SSRCs to the peer in the MIKEY\n   exchange.  Another,\
    \ used by SDP Security Descriptions, is to apply\n   \"late binding\" -- that\
    \ is, any new packet containing a previously\n   unseen SSRC (which arrives at\
    \ the same destination network address\n   and destination transport port number)\
    \ will create a new\n   cryptographic context.  Another approach, common amongst\
    \ techniques\n   with media-path SRTP key establishment, is to require a handshake\n\
    \   over that media path before SRTP packets are sent.  MIKEY's approach\n   changes\
    \ RTP's SSRC collision detection behavior by requiring RTP to\n   pre-establish\
    \ the SSRC values for each session.\n   Another related issue is that SRTP introduces\
    \ a rollover counter\n   (ROC), which records how many times the SRTP sequence\
    \ number has\n   rolled over.  As the sequence number is used for SRTP's default\n\
    \   ciphers, it is important that all endpoints know the value of the\n   ROC.\
    \  The ROC starts at 0 at the beginning of a session.\n   Some keying mechanisms\
    \ cause a two-time pad to occur if two endpoints\n   of a forked call have an\
    \ SSRC collision.\n   Note: A proposal has been made to send the ROC value on\
    \ every Nth\n   SRTP packet[RFC4771].  This proposal has not yet been incorporated\n\
    \   into this document.\n   The following list examines handling of SSRC and ROC:\n\
    \      MIKEY-NULL\n         Each endpoint indicates a set of SSRCs and the ROC\
    \ for SRTP\n         packets it transmits.\n      MIKEY-PSK\n         Each endpoint\
    \ indicates a set of SSRCs and the ROC for SRTP\n         packets it transmits.\n\
    \      MIKEY-RSA\n         Each endpoint indicates a set of SSRCs and the ROC\
    \ for SRTP\n         packets it transmits.\n      MIKEY-RSA-R\n         Each endpoint\
    \ indicates a set of SSRCs and the ROC for SRTP\n         packets it transmits.\n\
    \      MIKEY-DHSIGN\n         Each endpoint indicates a set of SSRCs and the ROC\
    \ for SRTP\n         packets it transmits.\n      MIKEY-DHHMAC\n         Each\
    \ endpoint indicates a set of SSRCs and the ROC for SRTP\n         packets it\
    \ transmits.\n      MIKEYv2 in SDP\n         Each endpoint indicates a set of\
    \ SSRCs and the ROC for SRTP\n         packets it transmits.\n      SDP Security\
    \ Descriptions with SIPS\n         Neither SSRC nor ROC are signaled.  SSRC \"\
    late binding\" is\n         used.\n      SDP Security Descriptions with S/MIME\n\
    \         Neither SSRC nor ROC are signaled.  SSRC \"late binding\" is\n     \
    \    used.\n      SDP-DH\n         Neither SSRC nor ROC are signaled.  SSRC \"\
    late binding\" is\n         used.\n      ZRTP\n         Neither SSRC nor ROC are\
    \ signaled.  SSRC \"late binding\" is\n         used.\n      EKT\n         The\
    \ SSRC of the SRTCP packet containing an EKT update\n         corresponds to the\
    \ SRTP master key and other parameters within\n         that packet.\n      DTLS-SRTP\n\
    \         Neither SSRC nor ROC are signaled.  SSRC \"late binding\" is\n     \
    \    used.\n      MIKEYv2 Inband\n         Each endpoint indicates a set of SSRCs\
    \ and the ROC for SRTP\n         packets it transmits.\n"
- title: A.5.  Evaluation Criteria - Security
  contents:
  - "A.5.  Evaluation Criteria - Security\n   This section evaluates each keying mechanism\
    \ on the basis of their\n   security properties.\n"
- title: A.5.1.  Distribution and Validation of Persistent Public Keys and
  contents:
  - "A.5.1.  Distribution and Validation of Persistent Public Keys and\n        Certificates\n\
    \   Using persistent public keys for confidentiality and authentication\n   can\
    \ introduce requirements for two types of systems, often\n   implemented using\
    \ certificates: (1) a system to distribute those\n   persistent public keys certificates,\
    \ and (2) a system for validating\n   those persistent public keys.  We refer\
    \ to the former as a key\n   distribution system and the latter as an authentication\n\
    \   infrastructure.  In many cases, a monolithic public key\n   infrastructure\
    \ (PKI) is used to fulfill both of these roles.\n   However, these functions can\
    \ be provided by many other systems.  For\n   instance, key distribution may be\
    \ accomplished by any public\n   repository of keys.  Any system in which the\
    \ two endpoints have\n   access to trust anchors and intermediate CA certificates\
    \ that can be\n   used to validate other endpoints' certificates (including a\
    \ system of\n   self-signed certificates) can be used to support certificate\n\
    \   validation in the below schemes.\n   With real-time communications, it is\
    \ desirable to avoid fetching or\n   validating certificates that delay call setup.\
    \  Rather, it is\n   preferable to fetch or validate certificates in such a way\
    \ that call\n   setup is not delayed.  For example, a certificate can be validated\n\
    \   while the phone is ringing or can be validated while ring-back tones\n   are\
    \ being played or even while the called party is answering the\n   phone and saying\
    \ \"hello\".  Even better is to avoid fetching or\n   validating persistent public\
    \ keys at all.\n   SRTP key exchange mechanisms that require a particular authentication\n\
    \   infrastructure to operate (whether for distribution or validation)\n   are\
    \ gated on the deployment of a such an infrastructure available to\n   both endpoints.\
    \  This means that no media security is achievable\n   until such an infrastructure\
    \ exists.  For SIP, something like sip-\n   certs [SIP-CERTS] might be used to\
    \ obtain the certificate of a peer.\n      Note: Even if sip-certs [SIP-CERTS]\
    \ were deployed, the retargeting\n      problem (Appendix A.4.1) would still prevent\
    \ successful deployment\n      of keying techniques which require the offerer\
    \ to obtain the\n      actual target's public key.\n   The following list compares\
    \ the requirements introduced by the use of\n   public-key cryptography in each\
    \ keying mechanism, both for public key\n   distribution and for certificate validation.\n\
    \      MIKEY-NULL\n         Public-key cryptography is not used.\n      MIKEY-PSK\n\
    \         Public-key cryptography is not used.  Rather, all endpoints\n      \
    \   must have some way to exchange per-endpoint or per-system\n         pre-shared\
    \ keys.\n      MIKEY-RSA\n         The offerer obtains the intended answerer's\
    \ public key before\n         initiating the call.  This public key is used to\
    \ encrypt the\n         SRTP keys.  There is no defined mechanism for the offerer\
    \ to\n         obtain the answerer's public key, although [SIP-CERTS] might be\n\
    \         viable in the future.\n         The offer may also contain a certificate\
    \ for the offerer, which\n         would require an authentication infrastructure\
    \ in order to be\n         validated by the receiver.\n      MIKEY-RSA-R\n   \
    \      The offer contains the offerer's certificate, and the answer\n        \
    \ contains the answerer's certificate.  The answerer uses the\n         public\
    \ key in the certificate to encrypt the SRTP keys that\n         will be used\
    \ by the offerer and the answerer.  An\n         authentication infrastructure\
    \ is necessary to validate the\n         certificates.\n      MIKEY-DHSIGN\n \
    \        An authentication infrastructure is used to authenticate the\n      \
    \   public key that is included in the MIKEY message.\n      MIKEY-DHHMAC\n  \
    \       Public-key cryptography is not used.  Rather, all endpoints\n        \
    \ must have some way to exchange per-endpoint or per-system\n         pre-shared\
    \ keys.\n      MIKEYv2 in SDP\n         The behavior will depend on which mode\
    \ is picked.\n      SDP Security Descriptions with SIPS\n         Public-key cryptography\
    \ is not used.\n      SDP Security Descriptions with S/MIME\n         Use of S/MIME\
    \ requires that the endpoints be able to fetch and\n         validate certificates\
    \ for each other.  The offerer must obtain\n         the intended target's certificate\
    \ and encrypts the SDP offer\n         with the public key contained in target's\
    \ certificate.  The\n         answerer must obtain the offerer's certificate and\
    \ encrypt the\n         SDP answer with the public key contained in the offerer's\n\
    \         certificate.\n      SDP-DH\n         Public-key cryptography is not\
    \ used.\n      ZRTP\n         Public-key cryptography is used (Diffie-Hellman),\
    \ but without\n         dependence on persistent public keys.  Thus, certificates\
    \ are\n         not fetched or validated.\n      EKT\n         Public-key cryptography\
    \ is not used by itself, but might be\n         used by the EKT bootstrapping\
    \ keying mechanism (such as certain\n         MIKEY modes).\n      DTLS-SRTP\n\
    \         Remote party's certificate is sent in media path, and a\n         fingerprint\
    \ of the same certificate is sent in the signaling\n         path.\n      MIKEYv2\
    \ Inband\n         The behavior will depend on which mode is picked.\n"
- title: A.5.2.  Perfect Forward Secrecy
  contents:
  - "A.5.2.  Perfect Forward Secrecy\n   In the context of SRTP, Perfect Forward Secrecy\
    \ is the property that\n   SRTP session keys that protected a previous session\
    \ are not\n   compromised if the static keys belonging to the endpoints are\n\
    \   compromised.  That is, if someone were to record your encrypted\n   session\
    \ content and later acquires either party's private key, that\n   encrypted session\
    \ content would be safe from decryption if your key\n   exchange mechanism had\
    \ perfect forward secrecy.\n   The following list describes how each key exchange\
    \ mechanism provides\n   PFS.\n      MIKEY-NULL\n         Not applicable; MIKEY-NULL\
    \ does not have a long-term secret.\n      MIKEY-PSK\n         No PFS.\n     \
    \ MIKEY-RSA\n         No PFS.\n      MIKEY-RSA-R\n         No PFS.\n      MIKEY-DHSIGN\n\
    \         PFS is provided with the Diffie-Hellman exchange.\n      MIKEY-DHHMAC\n\
    \         PFS is provided with the Diffie-Hellman exchange.\n      MIKEYv2 in\
    \ SDP\n         The behavior will depend on which mode is picked.\n      SDP Security\
    \ Descriptions with SIPS\n         Not applicable; SDP Security Descriptions does\
    \ not have a long-\n         term secret.\n      SDP Security Descriptions with\
    \ S/MIME\n         Not applicable; SDP Security Descriptions does not have a long-\n\
    \         term secret.\n      SDP-DH\n         PFS is provided with the Diffie-Hellman\
    \ exchange.\n      ZRTP\n         PFS is provided with the Diffie-Hellman exchange.\n\
    \      EKT\n         No PFS.\n      DTLS-SRTP\n         PFS is provided if the\
    \ negotiated cipher suite uses ephemeral\n         keys (e.g., Diffie-Hellman\
    \ (DHE_RSA [RFC5246]) or Elliptic\n         Curve Diffie-Hellman [RFC4492]).\n\
    \      MIKEYv2 Inband\n         The behavior will depend on which mode is picked.\n"
- title: A.5.3.  Best Effort Encryption
  contents:
  - "A.5.3.  Best Effort Encryption\n   With best effort encryption, SRTP is used\
    \ with endpoints that support\n   SRTP, otherwise RTP is used.\n   SIP needs a\
    \ backwards-compatible best effort encryption in order for\n   SRTP to work successfully\
    \ with SIP retargeting and forking when there\n   is a mix of forked or retargeted\
    \ devices that support SRTP and don't\n   support SRTP.\n      Consider the case\
    \ of Bob, with a phone that only does RTP and a\n      voice mail system that\
    \ supports SRTP and RTP.  If Alice calls Bob\n      with an SRTP offer, Bob's\
    \ RTP-only phone will reject the media\n      stream (with an empty \"m=\" line)\
    \ because Bob's phone doesn't\n      understand SRTP (RTP/SAVP).  Alice's phone\
    \ will see this rejected\n      media stream and may terminate the entire call\
    \ (BYE) and\n      re-initiate the call as RTP-only, or Alice's phone may decide\
    \ to\n      continue with call setup with the SRTP-capable leg (the voice mail\n\
    \      system).  If Alice's phone decided to re-initiate the call as RTP-\n  \
    \    only, and Bob doesn't answer his phone, Alice will then leave\n      voice\
    \ mail using only RTP, rather than SRTP as expected.\n   Currently, several techniques\
    \ are commonly considered as candidates\n   to provide opportunistic encryption:\n\
    \   multipart/alternative\n      [MULTIPART] describes how to form a multipart/alternative\
    \ body\n      part in SIP.  The significant issues with this technique are (1)\n\
    \      that multipart MIME is incompatible with existing SIP proxies,\n      firewalls,\
    \ Session Border Controllers, and endpoints and (2) when\n      forking, the Heterogeneous\
    \ Error Response Forking Problem (HERFP)\n      [RFC3326] causes problems if such\
    \ non-multipart-capable endpoints\n      were involved in the forking.\n   session\
    \ attribute\n      With this technique, the endpoints signal their desire to do\
    \ SRTP\n      by signaling RTP (RTP/AVP), and using an attribute (\"a=\") in the\n\
    \      SDP.  This technique is entirely backwards compatible with\n      non-SRT-aware\
    \ endpoints, but doesn't use the RTP/SAVP protocol\n      registered by SRTP [RFC3711].\n\
    \   SDP Capability Negotiation\n      SDP Capability Negotiation [SDP-CAP] provides\
    \ a backwards-\n      compatible mechanism to allow offering both SRTP and RTP\
    \ in a\n      single offer.  This is the preferred technique.\n   Probing\n  \
    \    With this technique, the endpoints first establish an RTP session\n     \
    \ using RTP (RTP/AVP).  The endpoints send probe messages, over the\n      media\
    \ path, to determine if the remote endpoint supports their\n      keying technique.\
    \  A disadvantage of probing is an active attacker\n      can interfere with probes,\
    \ and until probing completes (and SRTP\n      is established) the media is in\
    \ the clear.\n   The preferred technique, SDP Capability Negotiation [SDP-CAP],\
    \ can be\n   used with all key exchange mechanisms.  What remains unique is ZRTP,\n\
    \   which can also accomplish its best effort encryption by probing\n   (sending\
    \ ZRTP messages over the media path) or by session attribute\n   (see \"a=zrtp-hash\"\
    \ in [ZRTP]).  Current implementations of ZRTP use\n   probing.\n"
- title: A.5.4.  Upgrading Algorithms
  contents:
  - "A.5.4.  Upgrading Algorithms\n   It is necessary to allow upgrading SRTP encryption\
    \ and hash\n   algorithms, as well as upgrading the cryptographic functions used\
    \ for\n   the key exchange mechanism.  With SIP's offer/answer model, this can\n\
    \   be computationally expensive because the offer needs to contain all\n   combinations\
    \ of the key exchange mechanisms (all MIKEY modes, SDP\n   Security Descriptions),\
    \ all SRTP cryptographic suites (AES-128,\n   AES-256) and all SRTP cryptographic\
    \ hash functions (SHA-1, SHA-256)\n   that the offerer supports.  In order to\
    \ do this, the offerer has to\n   expend CPU resources to build an offer containing\
    \ all of this\n   information that becomes computationally prohibitive.\n   Thus,\
    \ it is important to keep the offerer's CPU impact fixed so that\n   offering\
    \ multiple new SRTP encryption and hash functions incurs no\n   additional expense.\n\
    \   The following list describes the CPU effort involved in using each\n   key\
    \ exchange technique.\n      MIKEY-NULL\n         No significant computational\
    \ expense.\n      MIKEY-PSK\n         No significant computational expense.\n\
    \      MIKEY-RSA\n         For each offered SRTP crypto suite, the offerer has\
    \ to perform\n         RSA operation to encrypt the TGK (TEK Generation Key).\n\
    \      MIKEY-RSA-R\n         For each offered SRTP crypto suite, the offerer has\
    \ to perform\n         public key operation to sign the MIKEY message.\n     \
    \ MIKEY-DHSIGN\n         For each offered SRTP crypto suite, the offerer has to\
    \ perform\n         Diffie-Hellman operation, and a public key operation to sign\n\
    \         the Diffie-Hellman output.\n      MIKEY-DHHMAC\n         For each offered\
    \ SRTP crypto suite, the offerer has to perform\n         Diffie-Hellman operation.\n\
    \      MIKEYv2 in SDP\n         The behavior will depend on which mode is picked.\n\
    \      SDP Security Descriptions with SIPS\n         No significant computational\
    \ expense.\n      SDP Security Descriptions with S/MIME\n         S/MIME requires\
    \ the offerer and the answerer to encrypt the SDP\n         with the other's public\
    \ key, and to decrypt the received SDP\n         with their own private key.\n\
    \      SDP-DH\n         For each offered SRTP crypto suite, the offerer has to\
    \ perform\n         a Diffie-Hellman operation.\n      ZRTP\n         The offerer\
    \ has no additional computational expense at all, as\n         the offer contains\
    \ no information about ZRTP or might contain\n         \"a=zrtp-hash\".\n    \
    \  EKT\n         The offerer's computational expense depends entirely on the EKT\n\
    \         bootstrapping mechanism selected (one or more MIKEY modes or\n     \
    \    SDP Security Descriptions).\n      DTLS-SRTP\n         The offerer has no\
    \ additional computational expense at all, as\n         the offer contains only\
    \ a fingerprint of the certificate that\n         will be presented in the DTLS\
    \ exchange.\n      MIKEYv2 Inband\n         The behavior will depend on which\
    \ mode is picked.\n"
- title: Appendix B.  Out-of-Scope
  contents:
  - "Appendix B.  Out-of-Scope\n   The compromise of an endpoint that has access to\
    \ decrypted media\n   (e.g., SIP user agent, transcoder, recorder) is out of scope\
    \ of this\n   document.  Such a compromise might be via privilege escalation,\n\
    \   installation of a virus or trojan horse, or similar attacks.\n"
- title: B.1.  Shared Key Conferencing
  contents:
  - "B.1.  Shared Key Conferencing\n   The consensus on the RTPSEC mailing list was\
    \ to concentrate on\n   unicast, point-to-point sessions.  Thus, there are no\
    \ requirements\n   related to shared key conferencing.  This section is retained\
    \ for\n   informational purposes.\n   For efficient scaling, large audio and video\
    \ conference bridges\n   operate most efficiently by encrypting the current speaker\
    \ once and\n   distributing that stream to the conference attendees.  Typically,\n\
    \   inactive participants receive the same streams -- they hear (or see)\n   the\
    \ active speaker(s), and the active speakers receive distinct\n   streams that\
    \ don't include themselves.  In order to maintain the\n   confidentiality of such\
    \ conferences where listeners share a common\n   key, all listeners must rekeyed\
    \ when a listener joins or leaves a\n   conference.\n   An important use case\
    \ for mixers/translators is a conference bridge:\n                           \
    \              +----+\n                             A --- 1 --->|    |\n     \
    \                          <-- 2 ----| M  |\n                                \
    \         | I  |\n                             B --- 3 --->| X  |\n          \
    \                     <-- 4 ----| E  |\n                                     \
    \    | R  |\n                             C --- 5 --->|    |\n               \
    \                <-- 6 ----|    |\n                                         +----+\n\
    \                       Figure 3: Centralized Keying\n   In the figure above,\
    \ 1, 3, and 5 are RTP media contributions from\n   Alice, Bob, and Carol, and\
    \ 2, 4, and 6 are the RTP flows to those\n   devices carrying the \"mixed\" media.\n\
    \   Several scenarios are possible:\n   a.  Multiple inbound sessions: 1, 3, and\
    \ 5 are distinct RTP sessions,\n   b.  Multiple outbound sessions: 2, 4, and 6\
    \ are distinct RTP\n       sessions,\n   c.  Single inbound session: 1, 3, and\
    \ 5 are just different sources\n       within the same RTP session,\n   d.  Single\
    \ outbound session: 2, 4, and 6 are different flows of the\n       same (multi-unicast)\
    \ RTP session.\n   If there are multiple inbound sessions and multiple outbound\
    \ sessions\n   (scenarios a and b), then every keying mechanism behaves as if\
    \ the\n   mixer were an endpoint and can set up a point-to-point secure session\n\
    \   between the participant and the mixer.  This is the simplest\n   situation,\
    \ but is computationally wasteful, since SRTP processing has\n   to be done independently\
    \ for each participant.  The use of multiple\n   inbound sessions (scenario a)\
    \ doesn't waste computational resources,\n   though it does consume additional\
    \ cryptographic context on the mixer\n   for each participant and has the advantage\
    \ of data origin\n   authentication.\n   To support a single outbound session\
    \ (scenario d), the mixer has to\n   dictate its encryption key to the participants.\
    \  Some keying\n   mechanisms allow the transmitter to determine its own key,\
    \ and others\n   allow the offerer to determine the key for the offerer and answerer.\n\
    \   Depending on how the call is established, the offerer might be a\n   participant\
    \ (such as a participant dialing into a conference bridge)\n   or the offerer\
    \ might be the mixer (such as a conference bridge\n   calling a participant).\
    \  The use of offerless INVITEs may help some\n   keying mechanisms reverse the\
    \ role of offerer/answerer.  A\n   difficulty, however, is knowing a priori if\
    \ the role should be\n   reversed for a particular call.  The significant advantage\
    \ of a\n   single outbound session is the number of SRTP encryption operations\n\
    \   remains constant even as the number of participants increases.\n   However,\
    \ a disadvantage is that data origin authentication is lost,\n   allowing any\
    \ participant to spoof the sender (because all\n   participants know the sender's\
    \ SRTP key).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dan Wing (editor)\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134\n   USA\n   EMail: dwing@cisco.com\n  \
    \ Steffen Fries\n   Siemens AG\n   Otto-Hahn-Ring 6\n   Munich, Bavaria  81739\n\
    \   Germany\n   EMail: steffen.fries@siemens.com\n   Hannes Tschofenig\n   Nokia\
    \ Siemens Networks\n   Linnoitustie 6\n   Espoo,   02600\n   Finland\n   Phone:\
    \ +358 (50) 4871445\n   EMail: Hannes.Tschofenig@nsn.com\n   URI:   http://www.tschofenig.priv.at\n\
    \   Francois Audet\n   Nortel\n   4655 Great America Parkway\n   Santa Clara,\
    \ CA  95054\n   USA\n   EMail: audet@nortel.com\n"
