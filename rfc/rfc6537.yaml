- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                         J. Ahrenholz
  contents:
  - "Internet Research Task Force (IRTF)                         J. Ahrenholz\n  \
    \      Host Identity Protocol Distributed Hash Table Interface\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a common interface for using the Host\n\
    \   Identity Protocol (HIP) with a Distributed Hash Table (DHT) service\n   to\
    \ provide a name-to-Host-Identity-Tag lookup service and a Host-\n   Identity-Tag-to-address\
    \ lookup service.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Research Task\n   Force (IRTF).\
    \  The IRTF publishes the results of Internet-related\n   research and development\
    \ activities.  These results might not be\n   suitable for deployment.  This RFC\
    \ represents the consensus of the\n   HIP Research Group of the Internet Research\
    \ Task Force (IRTF).\n   Documents approved for publication by the IRSG are not\
    \ a candidate\n   for any level of Internet Standard; see Section 2 of RFC 5741.\n\
    \   Information about the current status of this document, any errata,\n   and\
    \ how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6537.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. The OpenDHT Interface ...........................................3\n  \
    \ 3. HDRR - The HIP DHT Resource Record ..............................6\n   4.\
    \ HIP Lookup Services .............................................8\n      4.1.\
    \ HIP Name to HIT Lookup .....................................9\n      4.2. HIP\
    \ Address Lookup ........................................12\n   5. Use Cases ......................................................15\n\
    \   6. Issues with DHT Support ........................................16\n  \
    \ 7. Security Considerations ........................................17\n   8.\
    \ IANA Considerations ............................................18\n   9. Acknowledgments\
    \ ................................................18\n   10. References ....................................................19\n\
    \      10.1. Normative References .....................................19\n  \
    \    10.2. Informative References ...................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Host Identity Protocol (HIP) [RFC5201] may benefit from\
    \ a lookup\n   service based on Distributed Hash Tables (DHTs).  The Host Identity\n\
    \   namespace is flat, consisting of public keys, in contrast to the\n   hierarchical\
    \ Domain Name System (DNS).  These keys are hashed and\n   prefixed to form Host\
    \ Identity Tags (HITs), which appear as large\n   random numbers.  As the current\
    \ DNS system has been heavily optimized\n   for address lookup, it may be worthwhile\
    \ to experiment with other\n   services such as those defined here.  DHTs manage\
    \ such data well by\n   applying a hash function that distributes data across\
    \ a number of\n   servers.  DHTs are also designed to be updated more frequently\
    \ than a\n   DNS-based approach.  For an alternative method of using HITs to look\n\
    \   up IP addresses using DNS, see [HIT2IP].\n   One freely available implementation\
    \ of a DHT is the Bamboo DHT, which\n   is Java-based software that has been deployed\
    \ on PlanetLab servers to\n   form a free service named OpenDHT.  OpenDHT was\
    \ available via the\n   Internet for any program to store and retrieve arbitrary\
    \ data.\n   OpenDHT used a well-defined Extensible Markup Language-Remote\n  \
    \ Procedure Calling (XML-RPC) interface, featuring put, get, and remove\n   operations.\
    \  OpenLookup, while not implemented as a DHT, is another\n   deployment of open\
    \ source software compatible with this OpenDHT\n   interface.  This document discusses\
    \ a common way for HIP to use this\n   OpenDHT interface, so that various HIP\
    \ experimenters may employ\n   lookup services in an interoperable fashion.\n\
    \   This document is a product of the HIP research group (RG) of the\n   IRTF.\
    \  The HIP research group reached consensus that this interface\n   specification\
    \ should be published as an Experimental RFC, based on\n   document review by\
    \ at least six RG members including the chairs, and\n   based on implementation\
    \ experience.  This document is not an IETF\n   product and is not a standard.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  The OpenDHT Interface
  contents:
  - "2.  The OpenDHT Interface\n   OpenDHT [OPENDHT] was a public deployment of Bamboo\
    \ DHT servers that\n   ran on about 150 PlanetLab nodes, and was retired in July\
    \ 2009.\n   While the Bamboo project provided the actual software running on the\n\
    \   servers, here we will refer only to OpenDHT, which uses a certain\n   defined\
    \ interface for the XML-RPC calls.  Another service compatible\n   with this interface\
    \ is OpenLookup.  One can run their own Bamboo\n   nodes to set up a private ring\
    \ of servers.\n   OpenDHT was chosen because it was a well-known, publicly available\n\
    \   DHT used within the research community.  Its interface features a\n   simple,\
    \ standards-based protocol that can be easily implemented by\n   HIP developers.\
    \  This document does not aim to dictate that only the\n   services and servers\
    \ described here should be used, but is rather\n   meant to act as a starting\
    \ point to gain experience with these\n   services, choosing tools that are readily\
    \ available.\n   OpenDHT stores values and indexes those values by using (hash)\
    \ keys.\n   Keys are limited to 20 bytes in length, and values can be up to 1024\n\
    \   bytes.  Values are stored for a certain number of seconds, up to a\n   maximum\
    \ of 604,800 seconds (one week.)  For more information, see the\n   OpenDHT website:\
    \ <http://www.opendht.org/>.\n   Three RPC operations are supported: put, get,\
    \ and rm (remove).  Put\n   is called with key and value parameters, causing the\
    \ value to be\n   stored using the key as its hash index.  Get is called with\
    \ the key\n   parameter, when you have a key and want to retrieve the value. \
    \ Rm is\n   called with a hash of the value to be removed along with a secret\n\
    \   value, a hash of which was included in the put operation.\n   The definitions\
    \ below are taken from the OpenDHT users guide at\n   <http://opendht.org/users-guide.html>.\n\
    \             The put operation takes the following arguments:\n         +----------------+--------------------------------------+\n\
    \         | field          | type                                 |\n        \
    \ +----------------+--------------------------------------+\n         | application\
    \    | string                               |\n         |                |   \
    \                                   |\n         | client_library | string    \
    \                           |\n         |                |                   \
    \                   |\n         | key            | byte array, 20 bytes max. \
    \           |\n         |                |                                   \
    \   |\n         | value          | byte array, 1024 bytes max.          |\n  \
    \       |                |                                      |\n         |\
    \ ttl_sec        | four-byte integer, max. value 604800 |\n         |        \
    \        |                                      |\n         | secret_hash    |\
    \ optional SHA-1 hash of secret value  |\n         +----------------+--------------------------------------+\n\
    \   The server replies with an integer -- 0 for \"success\", 1 if it is\n   \"\
    over capacity\", and 2 indicating \"try again\".  The return code 3\n   indicates\
    \ \"failure\" and is used for a modified OpenDHT server that\n   performs signature\
    \ and HIT verification, see Section 3.\n             The get operation takes the\
    \ following arguments:\n     +----------------+---------------------------------------------+\n\
    \     | field          | type                                        |\n     +----------------+---------------------------------------------+\n\
    \     | application    | string                                      |\n     |\
    \                |                                             |\n     | client_library\
    \ | string                                      |\n     |                |   \
    \                                          |\n     | key            | byte array,\
    \ 20 bytes max.                   |\n     |                |                 \
    \                            |\n     | maxvals        | four-byte singed integer,\
    \ max. value 2^31-1 |\n     |                |                               \
    \              |\n     | placemark      | byte array, 100 bytes max.         \
    \         |\n     +----------------+---------------------------------------------+\n\
    \   The server replies with an array of values, and a placemark that can\n   be\
    \ used for fetching additional values.\n              The rm operation takes the\
    \ following arguments:\n     +----------------+----------------------------------------------+\n\
    \     | field          | type                                         |\n    \
    \ +----------------+----------------------------------------------+\n     | application\
    \    | string                                       |\n     |                |\
    \                                              |\n     | client_library | string\
    \                                       |\n     |                |           \
    \                                   |\n     | key            | byte array, 20\
    \ bytes max.                    |\n     |                |                   \
    \                           |\n     | value_hash     | SHA-1 hash of value to\
    \ remove                |\n     |                |                           \
    \                   |\n     | ttl_sec        | four-byte integer, max. value 604800\
    \         |\n     |                |                                         \
    \     |\n     | secret         | secret value (SHA-1 of this was used in put)\
    \ |\n     +----------------+----------------------------------------------+\n\
    \   The server replies with an integer -- 0 for \"success\", 1 if it is\n   \"\
    over capacity\", and 2 indicating \"try again\".\n   This is the basic XML-RPC\
    \ interface provided by OpenDHT.  Each\n   \"field\" from the above tables are\
    \ XML tags that enclose their\n   corresponding values.  The key is a byte array\
    \ used to index the\n   record for storage and retrieval from the DHT.  The value\
    \ is a byte\n   array of the data being stored in the DHT.  The application and\n\
    \   client_library fields are metadata used only for logging purposes.\n   The\
    \ ttl_sec field specifies the number of seconds that the DHT should\n   store\
    \ the value.  The secret_hash field allows values to be later\n   removed from\
    \ the DHT.  The maxvals and placemark fields are for\n   retrieving a maximum\
    \ number of values and for iterating get results.\n   The return code of 0 \"\
    success\" indicates a successful put or remove\n   operation.  The return code\
    \ of 1 \"over capacity\" means that a client\n   is using too much storage space\
    \ on the server.  The return value of 2\n   \"try again\" indicates that the client\
    \ should retry the put operation\n   because a temporary problem prevented the\
    \ server from accepting the\n   put.\n   In the sections that follow, specific\
    \ uses for these DHT operations\n   and their XML fields are suggested for use\
    \ with HIP.\n"
- title: 3.  HDRR - The HIP DHT Resource Record
  contents:
  - "3.  HDRR - The HIP DHT Resource Record\n   The two lookup services described\
    \ in this document use a HIP DHT\n   Resource Record (HDRR) defined in this section.\
    \  This record is a\n   wrapper around data contained in TLVs, similar to a HIP\
    \ control\n   packet.  The data contained in each HDRR differs between the two\n\
    \   services.\n   The HDRR uses the same binary format as HIP packets (defined\
    \ in\n   [RFC5201].)  This packet encoding is used as a convenience, even\n  \
    \ though this data is actually a resource record stored and retrieved\n   by the\
    \ DHT servers, not a packet sent on the wire by a HIP protocol\n   daemon.  Note\
    \ that this HDRR format is different than the HIP RR used\n   by the Domain Name\
    \ System as defined in [RFC5205].  The reason it is\n   different is that it is\
    \ a different record from a functional point of\n   view: in DNS, the query key\
    \ is a Fully Qualified Domain Name (FQDN),\n   and the return value is a HIT,\
    \ while here, the query key is a HIT.\n   HIP header values for the HDRR:\n  \
    \   HIP Header:\n       Packet Type = 20 DHT Resource Record\n       SRC HIT =\
    \ Sender's HIT\n       DST HIT = NULL\n     HDRR used with HIT lookup:\n     HIP\
    \ ( [CERT] )\n     HDRR used with address lookup:\n     HIP ( LOCATOR, SEQ, HOST_ID,\
    \ [CERT], HIP_SIGNATURE )\n   The Initiator HIT (Sender's HIT, SRC HIT) MUST be\
    \ set to the HIT that\n   the host wishes to make available using the lookup service.\
    \  With the\n   HIT lookup service, this is the main piece of information returned\
    \ by\n   a get operation.  For the address lookup service, this HIT MUST be\n\
    \   the same one used to derive the HIT_KEY used as the DHT key.  The\n   Responder\
    \ HIT (Receiver's HIT, DST HIT) MUST be NULL (all zeroes)\n   since the data is\
    \ intended for any host.\n   The only other TLV used with the HIT lookup service\
    \ is an optional\n   CERT parameter containing a certificate for validating the\
    \ name that\n   is used as the DHT key.  The CERT parameter is defined in [RFC6253].\n\
    \   The DHT server SHOULD use the certificate to verify that the client\n   is\
    \ authorized to use the name used for the DHT key, using the hash of\n   the name\
    \ found in the certificate.  The Common Name (CN) field from\n   the Distinguished\
    \ Name (DN) of the X.509.v3 certificate MUST be used.\n   Which certificates are\
    \ considered trusted is a local policy issue.\n   The remaining parameters described\
    \ here are used with the address\n   lookup service.\n   The LOCATOR parameter\
    \ contains the addresses that the host wishes to\n   make available using the\
    \ lookup service.  A host MAY publish its\n   current preferred IPv4 and IPv6\
    \ locators, for example.\n   The SEQ parameter contains an unsigned 32-bit sequence\
    \ number, the\n   Update ID.  This is typically initialized to zero and incremented\
    \ by\n   one for each new HDRR that is published by the host.  The host SHOULD\n\
    \   retain the last Update ID value it used for each HIT across reboots,\n   or\
    \ perform a self lookup in the DHT.  The Update ID value may be\n   retained in\
    \ the DHT records and will determine the preferred address\n   used by peers.\n\
    \   The HOST_ID parameter contains the Host Identity that corresponds\n   with\
    \ the Sender's HIT.  (The encoding of this parameter is defined in\n   Section\
    \ 5.2.8 of [RFC5201].)\n   The HOST_ID parameter and HIP_SIGNATURE parameter MUST\
    \ be used with\n   the HDRR so that HIP clients receiving the record can validate\
    \ the\n   sender and the included LOCATOR parameter.  The HIT_KEY used for the\n\
    \   DHT key will also be verified against the Host Identity.\n   The client that\
    \ receives the HDRR from the DHT response MUST perform\n   the signature and HIT_KEY\
    \ verification.  If the signature is invalid\n   for the given Host Identity or\
    \ the HIT_KEY used to retrieve the\n   record does not match the Host Identity,\
    \ the DHT record retrieved\n   MUST be ignored.  Note that for client-only verification,\
    \ the DHT\n   server does not need to be modified.\n   The Sender's HIT in the\
    \ HDRR MUST correspond with the key used for\n   the lookup and Host Identity\
    \ verification.  The Receiver's HIT MUST\n   be NULL (all zeroes) in the HDRR\
    \ header.\n   When several HDRR records are returned by the server, the client\n\
    \   SHOULD pick the most recent record as indicated by the Update ID in\n   the\
    \ SEQ TLV of the HDRR and perform verification on that record.  The\n   order\
    \ in which records are returned should not be considered.\n   The DHT server MAY\
    \ also verify the SIGNATURE and HOST_ID, with some\n   modifications to the Bamboo\
    \ DHT software and a new return code with\n   the OpenDHT interface.  The signature\
    \ in the put MUST be verified\n   using the given Host Identity (public key),\
    \ and the HIT_KEY provided\n   as the lookup key MUST match this Host Identity\
    \ according to the\n   Overlay Routable Cryptographic Hash Identifiers (ORCHID)\
    \ generation\n   method defined by [RFC4843].  If either signature or HIT verification\n\
    \   fails, the put MUST not be recorded into the DHT, and the server\n   returns\
    \ a failure code.  The failure code is an additional return\n   code not defined\
    \ by OpenDHT, with a value of 3.\n   This server-side verification of records\
    \ could introduce a source of\n   a denial-of-service attack.  The server policy\
    \ could require clients\n   to have an active HIP association.  See Section 7\
    \ for further\n   discussion.\n"
- title: 4.  HIP Lookup Services
  contents:
  - "4.  HIP Lookup Services\n   This document defines a HIT lookup and address lookup\
    \ service for use\n   with HIP.  The HIT lookup uses a text name to discover a\
    \ peer's HIT.\n   The address lookup uses a peer's HIT to discover its current\n\
    \   addresses.\n   The two lookups are defined below.  The abbreviated notation\
    \ refers\n   to the HIP parameter types; for example, HIP_SIG is the HIP signature\n\
    \   parameter defined by [RFC5201].\n         HDRR([CERT]) = get(SHA-1(\"name\"\
    ))\n         HDRR(LOCATOR, SEQ, HOST_ID, [CERT], HIP_SIG) = get(HIT_KEY)\n   The\
    \ HIT lookup service returns the Host Identity Tag of a peer given\n   a name.\
    \  The name SHOULD be the FQDN, hostname, or some other alias.\n   This HIT is\
    \ found in the Sender's HIT field of the HDRR.  The HIT is\n   the hash of the\
    \ public-key-based Host Identity as described in\n   [RFC5201].  There are no\
    \ security properties of the name, unlike the\n   HIT.  An optional certificate\
    \ MAY be included in the record, for\n   validating the name, providing some measure\
    \ of security.  Which\n   certificates are considered trusted is a local policy\
    \ issue.  This\n   service is intended for use when legacy DNS servers do not\
    \ support\n   HIP resource records, or when hosts do not have administrative access\n\
    \   to publish their own DNS records.  Such an unmanaged naming service\n   may\
    \ help facilitate experimentation.\n   The address lookup returns a locator and\
    \ other validation data in the\n   HDRR for a given HIT.  Before a HIP association\
    \ can be initiated (not\n   in opportunistic mode), a HIP host needs to know the\
    \ peer's HIT and\n   the current address at which the peer is reachable.  Often\
    \ the HIT\n   will be pre-configured, available via DNS lookup using a hostname\n\
    \   lookup [RFC5205], or retrieved using the HIT lookup service defined\n   in\
    \ this document.  With HIP mobility [RFC5206], IP addresses may be\n   used as\
    \ locators and may often change.  The Host Identity and the HIT\n   remain relatively\
    \ constant and can be used to securely identify a\n   host, so the HIT serves\
    \ as a suitable DHT key for storing and\n   retrieving addresses.\n   The address\
    \ lookup service includes the peer's Host Identity and a\n   signature over the\
    \ locators.  This allows the DHT client or server to\n   validate the address\
    \ information stored in the DHT.\n   These two separate lookups are defined instead\
    \ of one because the\n   address record is expected to change more frequently,\
    \ while the name-\n   to-HIT binding should remain relatively constant.  For example,\
    \ local\n   policy may specify checking the name-to-HIT binding on a daily basis,\n\
    \   while the address record is updated hourly for active peers.  Also,\n   the\
    \ client and server validation of the two records is different,\n   with the HIT\
    \ lookup using certificates verifying the name and the\n   address lookup using\
    \ a signature produced by the bearer of a\n   particular Host Identity/HIT.\n\
    \   These services reduce the amount of pre-configuration required at\n   each\
    \ HIP host.  The address of each peer no longer needs to be known\n   ahead of\
    \ time, if peers also participate by publishing their\n   addresses.  If peers\
    \ choose to publish their HITs with a name, peer\n   HITs also no longer require\
    \ pre-configuration.  However, discovering\n   an available DHT server for servicing\
    \ these lookups will require some\n   additional configuration.\n"
- title: 4.1.  HIP Name to HIT Lookup
  contents:
  - "4.1.  HIP Name to HIT Lookup\n   Given the SHA-1 hash of a name, a lookup returns\
    \ the HIT of the peer.\n   The hash of a name is used because OpenDHT keys are\
    \ limited to 20\n   bytes, so this allows for longer names.  Publish, lookup,\
    \ and remove\n   operations are defined below.\n         HDRR([CERT]) = get(SHA-1(\"\
    name\"))\n         put(SHA-1(\"name\"), HDRR([CERT]), [SHA-1(secret)])\n     \
    \    rm(SHA-1(\"name\"), SHA-1(HDRR), secret)\n                              \
    \  HIT publish\n   +----------------+----------------------------------------+---------+\n\
    \   | field          | value                                  | data    |\n  \
    \ |                |                                        | type    |\n   +----------------+----------------------------------------+---------+\n\
    \   | application    | \"hip-name-hit\"                         | string  |\n\
    \   |                |                                        |         |\n  \
    \ | client_library | (implementation dependent)             | string  |\n   |\
    \                |                                        |         |\n   | key\
    \            | SHA-1 hash of a name                   | base64  |\n   |      \
    \          |                                        | encoded |\n   |        \
    \        |                                        |         |\n   | value    \
    \      | HDRR([CERT]), with the HIT to be       | base64  |\n   |            \
    \    | published contained in the Sender's    | encoded |\n   |              \
    \  | HIT field of the HDRR, and an optional |         |\n   |                |\
    \ certificate for validating the name    |         |\n   |                | used\
    \ as the key                        |         |\n   |                |       \
    \                                 |         |\n   | ttl_sec        | lifetime\
    \ for this record, value from   | numeric |\n   |                | 0-604800 seconds\
    \                       | string  |\n   |                |                   \
    \                     |         |\n   | secret_hash    | optional SHA-1 hash of\
    \ secret value    | base64  |\n   |                |                         \
    \               | encoded |\n   +----------------+----------------------------------------+---------+\n\
    \                                HIT lookup\n   +----------------+---------------------------------+----------------+\n\
    \   | field          | value                           | data type      |\n  \
    \ +----------------+---------------------------------+----------------+\n   |\
    \ application    | \"hip-name-hit\"                  | string         |\n   |\
    \                |                                 |                |\n   | client_library\
    \ | (implementation dependent)      | string         |\n   |                |\
    \                                 |                |\n   | key            | SHA-1\
    \ hash of a name            | base64 encoded |\n   |                |        \
    \                         |                |\n   | maxvals        | (implementation\
    \ dependent)      | numeric string |\n   |                |                  \
    \               |                |\n   | placemark      | (NULL, or used from\
    \ server      | base64 encoded |\n   |                | reply)               \
    \           |                |\n   +----------------+---------------------------------+----------------+\n\
    \                           HIT remove (optional)\n   +----------------+----------------------------------------+---------+\n\
    \   | field          | value                                  | data    |\n  \
    \ |                |                                        | type    |\n   +----------------+----------------------------------------+---------+\n\
    \   | application    | \"hip-name-hit\"                         | string  |\n\
    \   |                |                                        |         |\n  \
    \ | client_library | (implementation dependent)             | string  |\n   |\
    \                |                                        |         |\n   | key\
    \            | SHA-1 hash of a name                   | base64  |\n   |      \
    \          |                                        | encoded |\n   |        \
    \        |                                        |         |\n   | value_hash\
    \     | SHA-1 hash of HDRR (value used during  | base64  |\n   |             \
    \   | publish) to remove                     | encoded |\n   |               \
    \ |                                        |         |\n   | ttl_sec        |\
    \ lifetime for the remove should be      | numeric |\n   |                | greater\
    \ than or equal to the amount of | string  |\n   |                | time remaining\
    \ for the record          |         |\n   |                |                 \
    \                       |         |\n   | secret         | secret value (SHA-1\
    \ of this was used   | base64  |\n   |                | in put)              \
    \                  | encoded |\n   +----------------+----------------------------------------+---------+\n\
    \   The key for both HIT publish and lookup is the SHA-1 hash of the\n   name.\
    \  The name does not necessarily need to be associated with a\n   valid DNS or\
    \ host name.  It does not need to be related to the Domain\n   Identifier found\
    \ in the HI TLV.  OpenDHT limits the keys to 20 bytes\n   in length, so the SHA-1\
    \ hash is used to allow arbitrary name lengths.\n   The value used in the publish\
    \ and lookup response MUST be the base64-\n   encoded HDRR containing the HIT,\
    \ and MAY include an optional\n   certificate.  The HIT MUST be stored in the\
    \ Sender's HIT field in the\n   HDRR header and is a 128-bit value that can be\
    \ identified as a HIT\n   both by its length and by the ORCHID prefix [RFC4843]\
    \ that it starts\n   with.\n   If a certificate is included in this HIT record,\
    \ the name used for\n   the DHT key MUST be listed in the certificate.  The CERT\
    \ parameter is\n   defined in [RFC6253].  The Common Name (CN) field from the\n\
    \   Distinguished Name (DN) of the X.509.v3 certificate MUST be used.\n   The\
    \ server can hash this name to verify it matches the DHT key.\n   The ttl_sec\
    \ field specifies the number of seconds requested by the\n   client that the entry\
    \ should be stored by the DHT server, which is\n   implementation or policy dependent.\n\
    \   The secret_hash is an optional field used with HIT publish if the\n   value\
    \ will later be removed with an rm operation.  It is RECOMMENDED\n   that clients\
    \ support these rm operations for the values they publish.\n   The secret_hash\
    \ contains the base64-encoded SHA-1 hash of some secret\n   value known only to\
    \ the publishing host.  A different secret value\n   SHOULD be used for each put\
    \ because rm requests are visible on the\n   network.  The max_vals and placemark\
    \ fields used with the HIT lookup\n   are defined by the get XML-RPC interface.\n"
- title: 4.2.  HIP Address Lookup
  contents:
  - "4.2.  HIP Address Lookup\n   Given a HIT, a lookup returns the IP address of\
    \ the peer.  The\n   address is contained in a LOCATOR TLV inside the HDRR, along\
    \ with\n   other validation data.  This interface has publish, lookup, and\n \
    \  remove operations.  A summary of these three operations is listed\n   below.\
    \  The abbreviated notation refers to the HIP parameter types;\n   for example,\
    \ HIP_SIG is the HIP signature parameter defined by\n   [RFC5201].  The details\
    \ of these DHT operations is then described in\n   greater detail.\n         HDRR(LOCATOR,\
    \ SEQ, HOST_ID, [CERT], HIP_SIG) = get(HIT_KEY)\n         put(HIT_KEY, HDRR(LOCATOR,\
    \ SEQ, HOST_ID, [CERT], HIP_SIG),\n             [SHA-1(secret)])\n         rm(HIT_KEY,\
    \ SHA-1(HDRR), secret)\n   The HDRR is defined in Section 3.  It contains one\
    \ or more locators\n   that the peer wants to publish, a sequence number, the\
    \ peer's Host\n   Identity, an optional certificate, and a signature over the\
    \ contents.\n   The HIT_KEY is comprised of the last 100 bits of the HIT appended\n\
    \   with 60 zero bits.  This is the portion of the HIT used as a DHT key.\n  \
    \ The last 100 bits are used to avoid uneven distribution of the stored\n   values\
    \ across the DHT servers.  The HIT's ORCHID Prefix (defined by\n   [RFC4843])\
    \ is comprised of the first 28 bits, and this prefix is\n   dropped because it\
    \ is the same for all HITs, which would cause this\n   uneven distribution.  Zero\
    \ padding is appended to this 100-bit value\n   to fill the length required by\
    \ the DHT, 160 bits total.\n                              Address publish\n  \
    \ +----------------+----------------------------------------+---------+\n   |\
    \ field          | value                                  | data    |\n   |  \
    \              |                                        | type    |\n   +----------------+----------------------------------------+---------+\n\
    \   | application    | \"hip-addr\"                             | string  |\n\
    \   |                |                                        |         |\n  \
    \ | client_library | (implementation dependent)             | string  |\n   |\
    \                |                                        |         |\n   | key\
    \            | HIT_KEY                                | base64  |\n   |      \
    \          |                                        | encoded |\n   |        \
    \        |                                        |         |\n   | value    \
    \      | HDRR(LOCATOR, SEQ, HOST_ID, [CERT],    | base64  |\n   |            \
    \    | HIP_SIG), with the IP address to be    | encoded |\n   |              \
    \  | published contained in the LOCATOR TLV |         |\n   |                |\
    \ in the HDRR, along with other          |         |\n   |                | validation\
    \ data                        |         |\n   |                |             \
    \                           |         |\n   | ttl_sec        | amount of time\
    \ HDRR should be valid,   | numeric |\n   |                | or the lifetime of\
    \ the preferred       | string  |\n   |                | address, a value from\
    \ 0-604800 seconds |         |\n   |                |                        \
    \                |         |\n   | secret_hash    | optional SHA-1 hash of secret\
    \ value    | base64  |\n   |                |                                \
    \        | encoded |\n   +----------------+----------------------------------------+---------+\n\
    \                              Address lookup\n   +----------------+---------------------------------+----------------+\n\
    \   | field          | value                           | data type      |\n  \
    \ +----------------+---------------------------------+----------------+\n   |\
    \ application    | \"hip-addr\"                      | string         |\n   |\
    \                |                                 |                |\n   | client_library\
    \ | (implementation dependent)      | string         |\n   |                |\
    \                                 |                |\n   | key            | HIT_KEY\
    \                         | base64 encoded |\n   |                |          \
    \                       |                |\n   | maxvals        | (implementation\
    \ dependent)      | numeric string |\n   |                |                  \
    \               |                |\n   | placemark      | (NULL, or used from\
    \ server      | base64 encoded |\n   |                | reply)               \
    \           |                |\n   +----------------+---------------------------------+----------------+\n\
    \                         Address remove (optional)\n   +----------------+-------------------------------------+------------+\n\
    \   | field          | value                               | data type  |\n  \
    \ +----------------+-------------------------------------+------------+\n   |\
    \ application    | \"hip-addr\"                          | string     |\n   |\
    \                |                                     |            |\n   | client_library\
    \ | (implementation dependent)          | string     |\n   |                |\
    \                                     |            |\n   | key            | HIT_KEY\
    \                             | base64     |\n   |                |          \
    \                           | encoded    |\n   |                |            \
    \                         |            |\n   | value_hash     | SHA-1 hash of\
    \ HDRR (value used      | base64     |\n   |                | during publish)\
    \ to remove           | encoded    |\n   |                |                  \
    \                   |            |\n   | ttl_sec        | old address lifetime\
    \                | numeric    |\n   |                |                       \
    \              | string     |\n   |                |                         \
    \            |            |\n   | secret         | secret value (SHA-1 of this\
    \ was     | base64     |\n   |                | used in put)                 \
    \       | encoded    |\n   +----------------+-------------------------------------+------------+\n\
    \   The application and client_library fields are used for logging in\n   OpenDHT.\
    \  The client_library may vary between different\n   implementations, specifying\
    \ the name of the XML-RPC library used or\n   the application that directly makes\
    \ XML-RPC calls.\n   The key used with the address lookup and with publishing\
    \ the address\n   is the HIT_KEY as defined above, 160 bits base64 encoded [RFC2045].\n\
    \   The value used in the publish and lookup response is the base64-\n   encoded\
    \ HDRR containing one or more LOCATORs.\n   The ttl_sec field used with address\
    \ publish indicates the time-to-\n   live (TTL).  This is the number of seconds\
    \ for which the entry will\n   be stored by the DHT.  The TTL SHOULD be set to\
    \ the number of seconds\n   remaining in the address lifetime.\n   The secret_hash\
    \ is an optional field that MAY be used with address\n   publish if the value\
    \ will later be removed with an rm operation.  The\n   secret_hash contains the\
    \ base64-encoded SHA-1 hash of some secret\n   value that MUST be known only to\
    \ the publishing host.  Clients SHOULD\n   include the secret_hash and remove\
    \ outdated values to reduce the\n   amount of data the peer needs to handle. \
    \ A different secret value\n   SHOULD be used for each put because rm requests\
    \ are visible on the\n   network.\n   The max_vals and placemark fields used with\
    \ address lookup are\n   defined by the get XML-RPC interface.  The get operation\
    \ needs to\n   know the maximum number of values to retrieve.  The placemark is\
    \ a\n   value found in the server reply that causes the get to continue to\n \
    \  retrieve values starting where it left off.\n"
- title: 5.  Use Cases
  contents:
  - "5.  Use Cases\n   Below are some suggestions of when a HIP implementation MAY\
    \ want to\n   use the HIT and address lookup services.\n   To learn of a peer's\
    \ HIT, a host might first consult DNS using the\n   peer's hostname if the DNS\
    \ server supports the HIP resource record\n   defined by [RFC5205].  Sometimes\
    \ hosts do not have administrative\n   authority over their DNS entries and/or\
    \ the DNS server is not able to\n   support HIP resource records.  Hosts may want\
    \ to associate other non-\n   DNS names with their HITs.  For these and other\
    \ reasons, a host MAY\n   use the HIT publish service defined in Section 4.1.\
    \  The peer HIT may\n   be learned by performing a DHT lookup of such a name.\n\
    \   Once a peer HIT is learned or configured, an address lookup MAY be\n   performed\
    \ so that the LOCATORs can be cached and immediately\n   available for when an\
    \ association is requested.  Implementations\n   might load a list of peer HITs\
    \ on startup, resulting in several\n   lookups that can take some time to complete.\n\
    \   However, cached LOCATORs may quickly become obsolete, depending on\n   how\
    \ often the peer changes its preferred address.  Performing an\n   address lookup\
    \ before sending the I1 may be needed.  At this time,\n   the latency of a lookup\
    \ may be intolerable, and a lookup could\n   instead be performed after the I1\
    \ retransmission timer fires -- when\n   no R1 reply has been received -- to detect\
    \ any change in address.\n   A HIP host SHOULD publish its preferred LOCATORs\
    \ upon startup, so\n   other hosts may determine where it is reachable.  The host\
    \ SHOULD\n   periodically refresh its HDRR entry because each entry carries a\
    \ TTL\n   and will eventually expire.  Also, when there is a change in the\n \
    \  preferred address, usually associated with sending UPDATE packets\n   with\
    \ included locator parameters, the host SHOULD update its HDRR\n   with the DHT.\
    \  The old HDRR SHOULD be removed using the rm operation,\n   if a secret value\
    \ was used in the put.\n   Addresses from the private address space SHOULD NOT\
    \ be published to\n   the DHT.  If the host is located behind a NAT, for example,\
    \ the host\n   could publish the address of its Rendezvous Server (RVS, from\n\
    \   [RFC5204]) to the DHT if that is how it is reachable.  In this case,\n   however,\
    \ a peer could instead simply use the RVS field of the NATed\n   host's HIP DNS\
    \ record, which would eliminate a separate DHT lookup.\n   A HIP host SHOULD also\
    \ publish its HIT upon startup or whenever a new\n   HIT is configured, for use\
    \ with the HIT lookup service, if desired.\n   The host SHOULD first check if\
    \ the name already exists in the DHT by\n   performing a lookup, to avoid interfering\
    \ with an existing name-to-\n   HIT mapping.  The name-to-HIT binding needs to\
    \ be refreshed\n   periodically before the TTL expires.\n   When publishing data\
    \ to the DHT server, care should be taken to check\n   the response from the server.\
    \  The server may respond with an \"over\n   capacity\" code, indicating that\
    \ its resources are too burdened to\n   honor the given size and TTL.  The host\
    \ SHOULD then select another\n   server for publishing or reduce the TTL and retry\
    \ the put operation.\n"
- title: 6.  Issues with DHT Support
  contents:
  - "6.  Issues with DHT Support\n   The DHT put operation does not replace existing\
    \ values.  If a host\n   does not remove its old HDRR before adding another, several\
    \ entries\n   may be present.  A client performing a lookup SHOULD determine the\n\
    \   most recent address based on the Update ID from the SEQ TLV of the\n   HDRR.\
    \  The order of values returned in the server's response may not\n   be guaranteed.\
    \  Before performing each put, a host SHOULD remove its\n   old HDRR data using\
    \ the rm operation.\n   In the case of the HIT lookup service, there is nothing\
    \ preventing\n   different hosts from publishing the same name.  A lookup performed\
    \ on\n   this name will return multiple HITs that belong to different devices.\n\
    \   The server may enforce a policy that requires clients to include a\n   certificate\
    \ when publishing a HIT, and only store HITs with a name\n   that has been authorized\
    \ by some trusted certificate.  Otherwise,\n   this is an unmanaged free-for-all\
    \ service, and it is RECOMMENDED that\n   a host simply pick another name.\n \
    \  Selecting an appropriate DHT server to use is not covered here.  If a\n   particular\
    \ server becomes unavailable, the connect will timeout and\n   some server selection\
    \ algorithm SHOULD be performed, such as trying\n   the next server in a configured\
    \ list.  OpenDHT formerly provided a\n   DNS-based anycast service; when one performed\
    \ a lookup of\n   \"opendht.nyuld.net\", it returned the two nearest OpenDHT servers.\n\
    \   The latency involved with the DHT put and get operations should be\n   considered\
    \ when using these services with HIP.  The calls rely on\n   servers that may\
    \ be located across the Internet and may trigger\n   communications between servers\
    \ that add delay.  The DHT operations\n   themselves may be slow to produce a\
    \ response.\n   The maximum size of 1024 bytes for the value field will limit\
    \ the\n   maximum size of the Host Identity and certificates that may be used\n\
    \   within the HDRR.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   There are two classes of attacks on this information\
    \ exchange between\n   the host and DHT server: attacks on the validity of the\
    \ information\n   provided by the DHT to the host (such as a spoofed DHT response)\
    \ and\n   attacks on the DHT records themselves (such as polluted records for\
    \ a\n   given key).  Without the server performing some measure of\n   verification,\
    \ not much can be done to prevent these attacks.\n   For the HIT lookup based\
    \ on a name (Section 4.1), there are no\n   guarantees on the validity of the\
    \ HIT.  Users concerned with the\n   validity of HITs found in the DHT SHOULD\
    \ simply exchange HITs out-of-\n   band with peers.  Including a signature will\
    \ not help here because\n   the HIT that identifies the Host Identity for signing\
    \ is not known\n   ahead of time.  A certificate MAY be included with the HIT,\
    \ which\n   guarantees that the name used for the lookup has been authorized by\n\
    \   some third-party authority.  Which certificates are considered\n   trusted\
    \ is a local policy issue.\n   For the address lookup based on HIT (Section 4.2),\
    \ the validity of\n   the DHT response MUST be checked with the HOST_ID and SIGNATURE\n\
    \   parameters in the HDRR.  A HIP initiating host SHOULD also validate\n   the\
    \ DHT response after the R1 message is received during a HIP\n   exchange.  The\
    \ Host Identity provided in the R1 can be hashed to\n   obtain a HIT that MUST\
    \ be checked against the original HIT.  However,\n   a legacy OpenDHT service\
    \ without server modifications does not\n   prevent an attacker from polluting\
    \ the DHT records for a known HIT,\n   thereby causing a denial-of-service attack,\
    \ since server validation\n   is not performed.\n   Relying solely on client validation\
    \ may be harmful.  An attacker can\n   replay the put packets containing the signed\
    \ HDRR, possibly causing\n   stale or invalid information to exist in the DHT.\
    \  If an attacker\n   replays the signed put message and changes some aspect each\
    \ time, and\n   if the server is not performing signature and HIT validation,\
    \ there\n   could be a multitude of invalid entries stored in the DHT.  When a\n\
    \   client retrieves these records, it would need to perform signature\n   and\
    \ HIT verification on each one, which could cause unacceptable\n   amounts of\
    \ delay or computation.\n   To protect against this type of attack, the DHT server\
    \ SHOULD perform\n   signature and HIT verification of each put operation as described\
    \ in\n   Section 3.  Another option would be the server running HIP itself and\n\
    \   requiring client authentication with a HIP association before\n   accepting\
    \ HDRR puts.  Further validation would be only accepting HIT\n   and address records\
    \ from the association bound to the same HIT.\n   Performing server-side verification\
    \ adds to the processing burden of\n   the DHT server and may be a source for\
    \ a denial-of-service attack.\n   Requiring a HIP association before accepting\
    \ HDRR puts may help here.\n   The HIT verification is less computationally intensive\
    \ by design,\n   using a hash algorithm.  Certificate validation (for name lookups)\n\
    \   and signature verification (for HDRRs) may cause unacceptable amounts\n  \
    \ of computation.  A server may rate limit the number of puts that it\n   allows.\n\
    \   The SHA-1 message digest algorithm is used in two ways in this\n   document,\
    \ and the security of using this algorithm should be\n   considered within the\
    \ context of [RFC6194].  The first use is with\n   the OpenDHT put and remove\
    \ operations, described in Section 2, and\n   the second is to reduce the size\
    \ of the name string for the HIT\n   lookup service in Section 4.1.\n   The first\
    \ use is intended to protect the secret values used to store\n   records in the\
    \ DHT as described by the OpenDHT interface.  An\n   attacker would be able to\
    \ remove a record, after capturing the\n   plaintext put, if a secret value could\
    \ be found that produces the\n   same secret hash.  The purpose of this document\
    \ is to maintain\n   interoperable compatibility with that interface, which prescribes\
    \ the\n   use of SHA-1.  Future revisions of that interface should consider\n\
    \   hash algorithm agility.  The OpenDHT FAQ states that future support\n   for\
    \ other hash algorithms is planned.\n   The second use of the SHA-1 algorithm\
    \ is to reduce the arbitrarily\n   sized name strings to fit the fixed OpenDHT\
    \ key size.  No security\n   properties of the SHA-1 algorithm are used in this\
    \ context.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document defines a new HIP Packet Type, the\
    \ \"HIP Distributed\n   Hash Table Resource Record (HDRR)\".  This packet type\
    \ is defined in\n   Section 3 with a value of 20.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Thanks to Tom Henderson, Samu Varjonen, Andrei Gurtov,\
    \ Miika Komu,\n   Kristian Slavov, Ken Rimey, Ari Keranen, and Martin Stiemerling\
    \ for\n   providing comments.  Samu most notably contributed the resolver\n  \
    \ packet and its suggested parameters, which became the HDRR here.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [OPENDHT]  Rhea, S., Godfrey, B., Karp, B., Kubiatowicz,\
    \ J.,\n              Ratnasamy, S., Shenker, S., Stocia, I., and H. Yu,\n    \
    \          \"OpenDHT: A Public DHT Service and Its Uses\", Proceedings\n     \
    \         of ACM SIGCOMM 2005, August 2005.\n   [RFC2045]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n              Extensions (MIME) Part One: Format\
    \ of Internet Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4843]  Nikander, P., Laganier,\
    \ J., and F. Dupont, \"An IPv6 Prefix\n              for Overlay Routable Cryptographic\
    \ Hash Identifiers\n              (ORCHID)\", RFC 4843, April 2007.\n   [RFC5201]\
    \  Moskowitz, R., Nikander, P., Jokela, P., and T. Henderson,\n              \"\
    Host Identity Protocol\", RFC 5201, April 2008.\n   [RFC5205]  Nikander, P. and\
    \ J. Laganier, \"Host Identity Protocol\n              (HIP) Domain Name System\
    \ (DNS) Extensions\", RFC 5205,\n              April 2008.\n   [RFC6194]  Polk,\
    \ T., Chen, L., Turner, S., and P. Hoffman, \"Security\n              Considerations\
    \ for the SHA-0 and SHA-1 Message-Digest\n              Algorithms\", RFC 6194,\
    \ March 2011.\n   [RFC6253]  Heer, T. and S. Varjonen, \"Host Identity Protocol\n\
    \              Certificates\", RFC 6253, May 2011.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [HIT2IP]   Ponomarev, O. and A. Gurtov, \"\
    Embedding Host Identity Tags\n              Data in DNS\", Work in Progress, July\
    \ 2009.\n   [RFC5204]  Laganier, J. and L. Eggert, \"Host Identity Protocol (HIP)\n\
    \              Rendezvous Extension\", RFC 5204, April 2008.\n   [RFC5206]  Nikander,\
    \ P., Henderson, T., Vogt, C., and J. Arkko, \"End-\n              Host Mobility\
    \ and Multihoming with the Host Identity\n              Protocol\", RFC 5206,\
    \ April 2008.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jeff Ahrenholz\n   The Boeing Company\n   P.O. Box 3707\n\
    \   Seattle, WA\n   USA\n   EMail: jeffrey.m.ahrenholz@boeing.com\n"
