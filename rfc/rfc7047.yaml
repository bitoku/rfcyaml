- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          B. Pfaff
  contents:
  - "Independent Submission                                          B. Pfaff\n  \
    \           The Open vSwitch Database Management Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   Open vSwitch is an open-source software switch designed to be used\
    \ as\n   a vswitch (virtual switch) in virtualized server environments.  A\n \
    \  vswitch forwards traffic between different virtual machines (VMs) on\n   the\
    \ same physical host and also forwards traffic between VMs and the\n   physical\
    \ network.  Open vSwitch is open to programmatic extension and\n   control using\
    \ OpenFlow and the OVSDB (Open vSwitch Database)\n   management protocol.  This\
    \ document defines the OVSDB management\n   protocol.  The Open vSwitch project\
    \ includes open-source OVSDB client\n   and server implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7047.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Language ......................................3\n  \
    \    1.2. Terminology ................................................3\n   2.\
    \ System Overview .................................................4\n   3. OVSDB\
    \ Structure .................................................5\n      3.1. JSON\
    \ Usage .................................................6\n      3.2. Schema\
    \ Format ..............................................7\n   4. Wire Protocol\
    \ ..................................................12\n      4.1. RPC Methods\
    \ ...............................................12\n           4.1.1. List Databases\
    \ .....................................12\n           4.1.2. Get Schema .........................................13\n\
    \           4.1.3. Transact ...........................................13\n  \
    \         4.1.4. Cancel .............................................16\n    \
    \       4.1.5. Monitor ............................................16\n      \
    \     4.1.6. Update Notification ................................18\n        \
    \   4.1.7. Monitor Cancellation ...............................19\n          \
    \ 4.1.8. Lock Operations ....................................19\n           4.1.9.\
    \ Locked Notification ................................21\n           4.1.10. Stolen\
    \ Notification ...............................21\n           4.1.11. Echo ..............................................22\n\
    \   5. Database Operations ............................................22\n  \
    \    5.1. Notation ..................................................22\n    \
    \  5.2. Operations ................................................27\n      \
    \     5.2.1. Insert .............................................27\n        \
    \   5.2.2. Select .............................................28\n          \
    \ 5.2.3. Update .............................................29\n           5.2.4.\
    \ Mutate .............................................29\n           5.2.5. Delete\
    \ .............................................30\n           5.2.6. Wait ...............................................31\n\
    \           5.2.7. Commit .............................................32\n  \
    \         5.2.8. Abort ..............................................32\n    \
    \       5.2.9. Comment ............................................32\n      \
    \     5.2.10. Assert ............................................33\n   6. IANA\
    \ Considerations ............................................33\n   7. Security\
    \ Considerations ........................................33\n   8. Acknowledgements\
    \ ...............................................34\n   9. References .....................................................34\n\
    \      9.1. Normative References ......................................34\n  \
    \    9.2. Informative References ....................................34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In virtualized server environments, it is typically required\
    \ to use a\n   vswitch (virtual switch) to forward traffic between different virtual\n\
    \   machines (VMs) on the same physical host and between VMs and the\n   physical\
    \ network.  Open vSwitch [OVS] is an open-source software\n   switch designed\
    \ to be used as a vswitch in such environments.  Open\n   vSwitch (OVS) is open\
    \ to programmatic extension and control using\n   OpenFlow [OF-SPEC] and the OVSDB\
    \ (Open vSwitch Database) management\n   protocol.  This document defines the\
    \ OVSDB management protocol.  The\n   Open vSwitch project includes open-source\
    \ OVSDB client and server\n   implementations.\n   The OVSDB management protocol\
    \ uses JSON [RFC4627] for its wire format\n   and is based on JSON-RPC version\
    \ 1.0 [JSON-RPC].\n   The schema of the Open vSwitch database is documented in\
    \ [DB-SCHEMA].\n   This document specifies the protocol for interacting with that\n\
    \   database for the purposes of managing and configuring Open vSwitch\n   instances.\
    \  The protocol specified in this document also provides\n   means for discovering\
    \ the schema in use, as described in\n   Section 4.1.2.\n   The OVSDB management\
    \ protocol is intended to allow programmatic\n   access to the Open vSwitch database\
    \ as documented in [DB-SCHEMA].\n   This database holds the configuration for\
    \ one Open vSwitch daemon.\n   As currently defined, this information describes\
    \ the switching\n   behavior of a virtual switch and does not describe the behavior\
    \ or\n   configuration of a routing system.  In the event that the schema is\n\
    \   extended in a future release to cover elements of the routing system,\n  \
    \ implementers and operators need to be aware of the work of the IETF's\n   I2RS\
    \ working group that specifies protocols and data models for real-\n   time or\
    \ event driven interaction with the routing system.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   UUID:       Universally Unique Identifier.  A 128-bit identifier\
    \ that\n               is unique in space and time [DCE].\n   OVS:        Open\
    \ vSwitch.  An open-source virtual switch.\n   OVSDB:      The database that is\
    \ used for the purpose of configuring\n               OVS instances.\n   JSON:\
    \       Javascript Object Notation [RFC4627].\n   JSON-RPC:   JSON Remote Procedure\
    \ Call [JSON-RPC].\n   Durable:    Reliably written to non-volatile storage (e.g.,\
    \ disk).\n               OVSDB supports the option to specify whether or not\n\
    \               transactions are durable.\n   Note that the JSON specification\
    \ [RFC4627] provides precise\n   definitions of a number of important terms such\
    \ as JSON values,\n   objects, arrays, numbers, and strings.  In all cases, this\
    \ document\n   uses the definitions from [RFC4627].\n"
- title: 2.  System Overview
  contents:
  - "2.  System Overview\n   Figure 1 illustrates the main components of Open vSwitch\
    \ and the\n   interfaces to a control and management cluster.  An OVS instance\n\
    \   comprises a database server (ovsdb-server), a vswitch daemon\n   (ovs-vswitchd),\
    \ and, optionally, a module that performs fast-path\n   forwarding.  The \"management\
    \ and control cluster\" consists of some\n   number of managers and controllers.\
    \  Managers use the OVSDB\n   management protocol to manage OVS instances.  An\
    \ OVS instance is\n   managed by at least one manager.  Controllers use OpenFlow\
    \ to install\n   flow state in OpenFlow switches.  An OVS instance can support\n\
    \   multiple logical datapaths, referred to as \"bridges\".  There is at\n   least\
    \ one controller for each OpenFlow bridge.\n   The OVSDB management interface\
    \ is used to perform management and\n   configuration operations on the OVS instance.\
    \  Compared to OpenFlow,\n   OVSDB management operations occur on a relatively\
    \ long timescale.\n   Examples of operations that are supported by OVSDB include:\n\
    \   o  Creation, modification, and deletion of OpenFlow datapaths\n      (bridges),\
    \ of which there may be many in a single OVS instance;\n   o  Configuration of\
    \ the set of controllers to which an OpenFlow\n      datapath should connect;\n\
    \   o  Configuration of the set of managers to which the OVSDB server\n      should\
    \ connect;\n   o  Creation, modification, and deletion of ports on OpenFlow\n\
    \      datapaths;\n   o  Creation, modification, and deletion of tunnel interfaces\
    \ on\n      OpenFlow datapaths;\n   o  Creation, modification, and deletion of\
    \ queues;\n   o  Configuration of QoS (quality of service) policies and attachment\n\
    \      of those policies to queues; and\n   o  Collection of statistics.\n   OVSDB\
    \ does not perform per-flow operations, leaving those instead to\n   OpenFlow.\n\
    \          +----------------------+\n          |      Control &       |\n    \
    \      |     Management       |\n          |      Cluster         |\n        \
    \  +----------------------+\n             |                \\\n             |\
    \ OVSDB           \\ OpenFlow\n             | Mgmt             \\\n          \
    \   |                   \\\n       +============================================+\n\
    \       | +--------------+       +--------------+    |\n       | |           \
    \   |       |              |    |\n       | | ovsdb-server |-------| ovs-vswitchd\
    \ |    |\n       | |              |       |              |    |\n       | +--------------+\
    \       +--------------+    |\n       |                               |      \
    \      |\n       |                        +----------------+  |\n       |    \
    \                    | Forwarding Path|  |\n       |                        +----------------+\
    \  |\n       +============================================+\n                \
    \     Figure 1: Open vSwitch Interfaces\n   Further information about the usage\
    \ of the OVSDB management protocol\n   is provided in [DB-SCHEMA].\n"
- title: 3.  OVSDB Structure
  contents:
  - "3.  OVSDB Structure\n   This section outlines the overall structure of databases\
    \ in OVSDB.\n   As described here, the database is reasonably generic.  For the\n\
    \   complete and current description of the database schema as used in\n   OVS,\
    \ refer to [DB-SCHEMA].  See also Section 4.1.2 for information on\n   how the\
    \ OVSDB management protocol may be used to discover the schema\n   currently in\
    \ use.\n"
- title: 3.1.  JSON Usage
  contents:
  - "3.1.  JSON Usage\n   OVSDB uses JSON [RFC4627] for both its schema format and\
    \ its wire\n   protocol format.  The JSON implementation in Open vSwitch has the\n\
    \   following limitations:\n   o  Null bytes (\\u0000) SHOULD NOT be used in strings.\n\
    \   o  Only UTF-8 encoding is supported.\n   The descriptions below use the following\
    \ shorthand notations for JSON\n   values.  Terminology follows [RFC4627].\n \
    \  <string>\n      A JSON string.  Any Unicode string is allowed.  Implementations\n\
    \      SHOULD disallow null bytes.\n   <id>\n      A JSON string matching [a-zA-Z_][a-zA-Z0-9_]*.\
    \ <id>s that begin\n      with _ are reserved to the implementation and MUST NOT\
    \ be used by\n      the user.\n   <version>\n      A JSON string that contains\
    \ a version number that matches [0-9]+\n      \\.[0-9]+\\.[0-9]+\n   <boolean>\n\
    \      A JSON true or false value.\n   <number>\n      A JSON number.\n   <integer>\n\
    \      A JSON number with an integer value, within the range -(2**63)...+\n  \
    \    (2**63)-1.\n   <json-value>\n      Any JSON value.\n   <nonnull-json-value>\n\
    \      Any JSON value except null.\n   <error>\n      A JSON object with the following\
    \ members:\n           \"error\": <string>          required\n           \"details\"\
    : <string>        optional\n      The value of the \"error\" member is a short\
    \ string, specified in\n      this document, that broadly indicates the class\
    \ of the error.\n      Most \"error\" strings are specific to contexts described\
    \ elsewhere\n      in this document, but the following \"error\" strings may appear\
    \ in\n      any context where an <error> is permitted:\n      \"error\": \"resources\
    \ exhausted\"\n         The operation requires more resources (memory, disk, CPU,\
    \ etc.)\n         than are currently available to the database server.\n     \
    \ \"error\": \"I/O error\"\n         Problems accessing the disk, network, or\
    \ other required\n         resources prevented the operation from completing.\n\
    \      Database implementations MAY use \"error\" strings not specified in\n \
    \     this document to indicate errors that do not fit into any of the\n     \
    \ specified categories.  Optionally, an <error> MAY include a\n      \"details\"\
    \ member, whose value is a string that describes the error\n      in more detail\
    \ for the benefit of a human user or administrator.\n      This document does\
    \ not specify the format or content of the\n      \"details\" string.  An <error>\
    \ MAY also have other members that\n      describe the error in more detail. \
    \ This document does not specify\n      the names or values of these members.\n"
- title: 3.2.  Schema Format
  contents:
  - "3.2.  Schema Format\n   An Open vSwitch configuration database consists of a\
    \ set of tables,\n   each of which has a number of columns and zero or more rows.\
    \  A\n   schema for the database is represented by <database-schema>, as\n   described\
    \ below.\n   <database-schema>\n      A JSON object with the following members:\n\
    \           \"name\": <id>                            required\n           \"\
    version\": <version>                    required\n           \"cksum\": <string>\
    \                       optional\n           \"tables\": {<id>: <table-schema>,\
    \ ...}   required\n      The \"name\" identifies the database as a whole.  It\
    \ must be\n      provided to most JSON-RPC requests to identify the database being\n\
    \      operated on.\n      The \"version\" reports the version of the database\
    \ schema.  It is\n      REQUIRED to be present.  Open vSwitch semantics for \"\
    version\" are\n      described in [DB-SCHEMA].  Other schemas may use it differently.\n\
    \      The \"cksum\" optionally reports an implementation-defined checksum\n \
    \     for the database schema.  Its use is primarily as a tool for\n      schema\
    \ developers, and clients SHOULD ignore it.\n      The value of \"tables\" is\
    \ a JSON object whose names are table names\n      and whose values are <table-schema>s.\n\
    \   <table-schema>\n      A JSON object with the following members:\n        \
    \ \"columns\": {<id>: <column-schema>, ...}   required\n         \"maxRows\":\
    \ <integer>                      optional\n         \"isRoot\": <boolean>    \
    \                   optional\n         \"indexes\": [<column-set>*]          \
    \      optional\n      The value of \"columns\" is a JSON object whose names are\
    \ column\n      names and whose values are <column-schema>s.\n      Every table\
    \ has the following columns whose definitions are not\n      included in the schema:\n\
    \         \"_uuid\": This column, which contains exactly one UUID value, is\n\
    \         initialized to a random value by the database engine when it\n     \
    \    creates a row.  It is read-only, and its value never changes\n         during\
    \ the lifetime of a row.\n         \"_version\": Like \"_uuid\", this column contains\
    \ exactly one UUID\n         value, initialized to a random value by the database\
    \ engine\n         when it creates a row, and it is read-only.  However, its value\n\
    \         changes to a new random value whenever any other field in the\n    \
    \     row changes.  Furthermore, its value is ephemeral: when the\n         database\
    \ is closed and reopened, or when the database process\n         is stopped and\
    \ then started again, each \"_version\" also changes\n         to a new random\
    \ value.\n      If \"maxRows\" is specified, as a positive integer, it limits\
    \ the\n      maximum number of rows that may be present in the table.  This is\n\
    \      a \"deferred\" constraint, enforced only at transaction commit time\n \
    \     (see the \"transact\" request in Section 4.1.3).  If \"maxRows\" is\n  \
    \    not specified, the size of the table is limited only by the\n      resources\
    \ available to the database server. \"maxRows\" constraints\n      are enforced\
    \ after unreferenced rows are deleted from tables with\n      a false \"isRoot\"\
    .\n      The \"isRoot\" boolean is used to determine whether rows in the\n   \
    \   table require strong references from other rows to avoid garbage\n      collection.\
    \  (See the discussion of \"strong\" and \"weak\" references\n      below in the\
    \ description of <base-type>.)  If \"isRoot\" is\n      specified as true, then\
    \ rows in the table exist independent of any\n      references (they can be thought\
    \ of as part of the \"root set\" in a\n      garbage collector).  If \"isRoot\"\
    \ is omitted or specified as false,\n      then any given row in the table may\
    \ exist only when there is at\n      least one reference to it, with refType \"\
    strong\", from a different\n      row (in the same table or a different table).\
    \  This is a\n      \"deferred\" action: unreferenced rows in the table are deleted\
    \ just\n      before transaction commit.\n      For compatibility with schemas\
    \ created before \"isRoot\" was\n      introduced, if \"isRoot\" is omitted or\
    \ false in every\n      <table-schema> in a given <database-schema>, then every\
    \ table is\n      part of the root set.\n      If \"indexes\" is specified, it\
    \ must be an array of zero or more\n      <column-set>s.  A <column-set> is an\
    \ array of one or more strings,\n      each of which names a column.  Each <column-set>\
    \ is a set of\n      columns whose values, taken together within any given row,\
    \ must be\n      unique within the table.  This is a \"deferred\" constraint,\n\
    \      enforced only at transaction commit time, after unreferenced rows\n   \
    \   are deleted and dangling weak references are removed.  Ephemeral\n      columns\
    \ may not be part of indexes.\n   <column-schema>\n      A JSON object with the\
    \ following members:\n         \"type\": <type>                            required\n\
    \         \"ephemeral\": <boolean>                    optional\n         \"mutable\"\
    : <boolean>                      optional\n      The \"type\" specifies the type\
    \ of data stored in this column.\n      If \"ephemeral\" is specified as true,\
    \ then this column's values are\n      not guaranteed to be durable; they may\
    \ be lost when the database\n      restarts.  A column whose type (either key\
    \ or value) is a strong\n      reference to a table that is not part of the root\
    \ set is always\n      durable, regardless of this value.  (Otherwise, restarting\
    \ the\n      database could lose entire rows.)\n      If \"mutable\" is specified\
    \ as false, then this column's values may\n      not be modified after they are\
    \ initially set with the \"insert\"\n      operation.\n   <type>\n      The type\
    \ of a database column.  Either an <atomic-type> or a JSON\n      object that\
    \ describes the type of a database column, with the\n      following members:\n\
    \         \"key\": <base-type>                 required\n         \"value\": <base-type>\
    \               optional\n         \"min\": <integer>                   optional\n\
    \         \"max\": <integer> or \"unlimited\"    optional\n      If \"min\" or\
    \ \"max\" is not specified, each defaults to 1.  If \"max\"\n      is specified\
    \ as \"unlimited\", then there is no specified maximum\n      number of elements,\
    \ although the implementation will enforce some\n      limit.  After considering\
    \ defaults, \"min\" must be exactly 0 or\n      exactly 1, \"max\" must be at\
    \ least 1, and \"max\" must be greater\n      than or equal to \"min\".\n    \
    \  If \"min\" and \"max\" are both 1 and \"value\" is not specified, the\n   \
    \   type is the scalar type specified by \"key\".\n      If \"min\" is not 1 or\
    \ \"max\" is not 1, or both, and \"value\" is not\n      specified, the type is\
    \ a set of scalar type \"key\".\n      If \"value\" is specified, the type is\
    \ a map from type \"key\" to type\n      \"value\".\n   <base-type>\n      The\
    \ type of a key or value in a database column.  Either an\n      <atomic-type>\
    \ or a JSON object with the following members:\n         \"type\": <atomic-type>\
    \            required\n         \"enum\": <value>                  optional\n\
    \         \"minInteger\": <integer>          optional, integers only\n       \
    \  \"maxInteger\": <integer>          optional, integers only\n         \"minReal\"\
    : <real>                optional, reals only\n         \"maxReal\": <real>   \
    \             optional, reals only\n         \"minLength\": <integer>        \
    \   optional, strings only\n         \"maxLength\": <integer>           optional,\
    \ strings only\n         \"refTable\": <id>                 optional, UUIDs only\n\
    \         \"refType\": \"strong\" or \"weak\"    optional, only with \"refTable\"\
    \n      An <atomic-type> by itself is equivalent to a JSON object with a\n   \
    \   single member \"type\" whose value is the <atomic-type>.\n      \"enum\" may\
    \ be specified as a <value> whose type is a set of one or\n      more values specified\
    \ for the member \"type\".  If \"enum\" is\n      specified, then the valid values\
    \ of the <base-type> are limited to\n      those in the <value>.\n      \"enum\"\
    \ is mutually exclusive with the following constraints:\n         If \"type\"\
    \ is \"integer\", then \"minInteger\" or \"maxInteger\" or\n         both may\
    \ also be specified, restricting the valid integer\n         range.  If both are\
    \ specified, then \"maxInteger\" must be\n         greater than or equal to \"\
    minInteger\".\n         If \"type\" is \"real\", then \"minReal\" or \"maxReal\"\
    \ or both may\n         also be specified, restricting the valid real range. \
    \ If both\n         are specified, then \"maxReal\" must be greater than or equal\
    \ to\n         \"minReal\".\n         If \"type\" is \"string\", then \"minLength\"\
    \ and \"maxLength\" or both\n         may be specified, restricting the valid\
    \ length of value\n         strings.  If both are specified, then \"maxLength\"\
    \ must be\n         greater than or equal to \"minLength\".  String length is\n\
    \         measured in characters.\n         If \"type\" is \"uuid\", then \"refTable\"\
    , if present, must be the\n         name of a table within this database.  If\
    \ \"refTable\" is\n         specified, then \"refType\" may also be specified.\
    \  If \"refTable\"\n         is set, the effect depends on \"refType\":\n    \
    \     +  If \"refType\" is \"strong\" or if \"refType\" is omitted, the\n    \
    \        allowed UUIDs are limited to UUIDs for rows in the named\n          \
    \  table.\n         +  If \"refType\" is \"weak\", then any UUIDs are allowed,\
    \ but\n            UUIDs that do not correspond to rows in the named table will\n\
    \            be automatically deleted.  When this situation arises in a\n    \
    \        map, both the key and the value will be deleted from the\n          \
    \  map.\n      \"refTable\" constraints are \"deferred\" constraints: they are\n\
    \      enforced only at transaction commit time (see the \"transact\"\n      request\
    \ in Section 4.1.3).  The other constraints on <base-type>\n      are \"immediate\"\
    , enforced immediately by each operation.\n   <atomic-type>\n      One of the\
    \ strings \"integer\", \"real\", \"boolean\", \"string\", or\n      \"uuid\",\
    \ representing the specified scalar type.\n"
- title: 4.  Wire Protocol
  contents:
  - "4.  Wire Protocol\n   The database wire protocol is implemented in JSON-RPC 1.0\
    \ [JSON-RPC].\n   While the JSON-RPC specification allows a range of transports,\n\
    \   implementations of this specification SHOULD operate directly over\n   TCP.\
    \  See Section 6 for discussion of the TCP port.\n"
- title: 4.1.  RPC Methods
  contents:
  - "4.1.  RPC Methods\n   The following subsections describe the RPC methods that\
    \ are\n   supported.  As described in the JSON-RPC 1.0 specification, each\n \
    \  request comprises a string containing the name of the method, a\n   (possibly\
    \ null) array of parameters to pass to the method, and a\n   request ID, which\
    \ can be used to match the response to the request.\n   Each response comprises\
    \ a result object (non-null in the event of a\n   successful invocation), an error\
    \ object (non-null in the event of an\n   error), and the ID of the matching request.\
    \  More details on each\n   method, its parameters, and its results are described\
    \ below.\n   An OVSDB server MUST implement all of the following methods.  An\n\
    \   OVSDB client MUST implement the \"Echo\" method and is otherwise free\n  \
    \ to implement whichever methods suit the implementation's needs.\n   The operations\
    \ that may be performed on the OVS database using these\n   methods (e.g., the\
    \ \"transact\" method) are described in Section 5.\n"
- title: 4.1.1.  List Databases
  contents:
  - "4.1.1.  List Databases\n   This operation retrieves an array whose elements are\
    \ the names of the\n   databases that can be accessed over this management protocol\n\
    \   connection.\n   The request object contains the following members:\n   o \
    \ \"method\": \"list_dbs\"\n   o  \"params\": []\n   o  \"id\": <nonnull-json-value>\n\
    \   The response object contains the following members:\n   o  \"result\": [<db-name>,...]\n\
    \   o  \"error\": null\n   o  \"id\": same \"id\" as request\n"
- title: 4.1.2.  Get Schema
  contents:
  - "4.1.2.  Get Schema\n   This operation retrieves a <database-schema> that describes\
    \ hosted\n   database <db-name>.\n   The request object contains the following\
    \ members:\n   o  \"method\": \"get_schema\"\n   o  \"params\": [<db-name>]\n\
    \   o  \"id\": <nonnull-json-value>\n   The response object contains the following\
    \ members:\n   o  \"result\": <database-schema>\n   o  \"error\": null\n   o \
    \ \"id\": same \"id\" as request\n   In the event that the database named in the\
    \ request does not exist,\n   the server sends a JSON-RPC error response of the\
    \ following form:\n   o  \"result\": null\n   o  \"error\": \"unknown database\"\
    \n   o  \"id\": same \"id\" as request\n"
- title: 4.1.3.  Transact
  contents:
  - "4.1.3.  Transact\n   This RPC method causes the database server to execute a\
    \ series of\n   operations in the specified order on a given database.\n   The\
    \ request object contains the following members:\n   o  \"method\": \"transact\"\
    \n   o  \"params\": [<db-name>, <operation>*]\n   o  \"id\": <nonnull-json-value>\n\
    \   The value of \"id\" MUST be unique among all in-flight transactions\n   within\
    \ the current JSON-RPC session.  Otherwise, the server may\n   return a JSON-RPC\
    \ error.\n   The \"params\" array for this method consists of a <db-name> that\n\
    \   identifies the database to which the transaction applies, followed by\n  \
    \ zero or more JSON objects, each of which represents a single database\n   operation.\
    \  Section 5 describes the valid operations.  The database\n   server executes\
    \ each of the specified operations in the specified\n   order, except if an operation\
    \ fails, then the remaining operations\n   are not executed.  The set of operations\
    \ is executed as a single\n   atomic, consistent, isolated transaction.  The transaction\
    \ is\n   committed if and only if every operation succeeds.  Durability of the\n\
    \   commit is not guaranteed unless the \"commit\" operation, with\n   \"durable\"\
    \ set to true, is included in the operation set.  See\n   Section 5 for more discussion\
    \ of the database operations.\n   The response object contains the following members:\n\
    \   o  \"result\": [<object>*]\n   o  \"error\": null\n   o  \"id\": same \"id\"\
    \ as request\n   Regardless of whether errors occur in the database operations,\
    \ the\n   response is always a JSON-RPC response with null \"error\" and a\n \
    \  \"result\" member that is an array with the same number of elements as\n  \
    \ \"params\".  Each element of the \"result\" array corresponds to the same\n\
    \   element of the \"params\" array.  The \"result\" array elements may be\n \
    \  interpreted as follows:\n   o  A JSON object that does not contain an \"error\"\
    \ member indicates\n      that the operation completed successfully.  The specific\
    \ members\n      of the object are specified below in the descriptions of\n  \
    \    individual operations.  Some operations do not produce any\n      results,\
    \ in which case the object will have no members.\n   o  An <error> indicates that\
    \ the matching operation completed with an\n      error.\n   o  A JSON null value\
    \ indicates that the operation was not attempted\n      because a prior operation\
    \ failed.\n   In general, \"result\" contains some number of successful results,\n\
    \   possibly followed by an error, in turn followed by enough JSON null\n   values\
    \ to match the number of elements in \"params\".  There is one\n   exception:\
    \ if all of the operations succeed, but the results cannot\n   be committed, then\
    \ \"result\" will have one more element than \"params\",\n   with the additional\
    \ element being an <error>.  In this case, the\n   possible \"error\" strings\
    \ include the following:\n   \"error\": \"referential integrity violation\"\n\
    \      When the commit was attempted, a column's value referenced the\n      UUID\
    \ for a row that did not exist in the table named by the\n      column's <base-type>\
    \ key or value \"refTable\" that has a \"refType\"\n      of \"strong\".  (This\
    \ can be caused by inserting a row that\n      references a nonexistent row, by\
    \ deleting a row that is still\n      referenced by another row, by specifying\
    \ the UUID for a row in the\n      wrong table, and other ways.)\n   \"error\"\
    : \"constraint violation\"\n      A number of situations can arise in which the\
    \ attempted commit\n      would lead to a constraint on the database being violated.\
    \  (See\n      Section 3.2 for more discussion of constraints.)  These situations\n\
    \      include:\n      *  The number of rows in a table exceeds the maximum number\n\
    \         permitted by the table's \"maxRows\" value.\n      *  Two or more rows\
    \ in a table had the same values in the columns\n         that comprise an index.\n\
    \      *  A column with a <base-type> key or value \"refTable\" whose\n      \
    \   \"refType\" is \"weak\" became empty due to deletion(s), and this\n      \
    \   column is not allowed to be empty because its <type> has a\n         \"min\"\
    \ of 1.  Such deletions may be the result of rows that it\n         referenced\
    \ being deleted (or never having existed, if the\n         column's row was inserted\
    \ within the transaction).\n   \"error\": \"resources exhausted\"\n      The operation\
    \ requires more resources (memory, disk, CPU, etc.)\n      than are currently\
    \ available to the database server.\n   \"error\": \"I/O error\"\n      Problems\
    \ accessing the disk, network, or other required resources\n      prevented the\
    \ operation from completing.\n   If \"params\" contains one or more \"wait\" operations,\
    \ then the\n   transaction may take an arbitrary amount of time to complete. \
    \ The\n   database implementation MUST be capable of accepting, executing, and\n\
    \   replying to other transactions and other JSON-RPC requests while a\n   transaction\
    \ or transactions containing \"wait\" operations are\n   outstanding on the same\
    \ or different JSON-RPC sessions.\n"
- title: 4.1.4.  Cancel
  contents:
  - "4.1.4.  Cancel\n   The \"cancel\" method is a JSON-RPC notification, i.e., no\
    \ matching\n   response is provided.  It instructs the database server to\n  \
    \ immediately complete or cancel the \"transact\" request whose \"id\" is\n  \
    \ the same as the notification's \"params\" value.  The notification\n   object\
    \ has the following members:\n   o  \"method\": \"cancel\"\n   o  \"params\":\
    \ [the \"id\" for an outstanding request]\n   o  \"id\": null\n   If the \"transact\"\
    \ request can be completed immediately, then the\n   server sends a response in\
    \ the form described for \"transact\"\n   (Section 4.1.3).  Otherwise, the server\
    \ sends a JSON-RPC error\n   response of the following form:\n   o  \"result\"\
    : null\n   o  \"error\": \"canceled\"\n   o  \"id\": the \"id\" member of the\
    \ canceled request.\n   The \"cancel\" notification itself has no reply.\n"
- title: 4.1.5.  Monitor
  contents:
  - "4.1.5.  Monitor\n   The \"monitor\" request enables a client to replicate tables\
    \ or subsets\n   of tables within an OVSDB database by requesting notifications\
    \ of\n   changes to those tables and by receiving the complete initial state\n\
    \   of a table or a subset of a table.  The request object has the\n   following\
    \ members:\n   o  \"method\": \"monitor\"\n   o  \"params\": [<db-name>, <json-value>,\
    \ <monitor-requests>]\n   o  \"id\": <nonnull-json-value>\n   The <json-value>\
    \ parameter is used to match subsequent update\n   notifications (see below) to\
    \ this request.  The <monitor-requests>\n   object maps the name of the table\
    \ to be monitored to an array of\n   <monitor-request> objects.\n   Each <monitor-request>\
    \ is an object with the following members:\n       \"columns\": [<column>*]  \
    \          optional\n       \"select\": <monitor-select>        optional\n   The\
    \ columns, if present, define the columns within the table to be\n   monitored.\
    \ <monitor-select> is an object with the following members:\n       \"initial\"\
    : <boolean>              optional\n       \"insert\": <boolean>              \
    \ optional\n       \"delete\": <boolean>               optional\n       \"modify\"\
    : <boolean>               optional\n   The contents of this object specify how\
    \ the columns or table are to\n   be monitored, as explained in more detail below.\n\
    \   The response object has the following members:\n   o  \"result\": <table-updates>\n\
    \   o  \"error\": null\n   o  \"id\": same \"id\" as request\n   The <table-updates>\
    \ object is described in detail in Section 4.1.6.\n   It contains the contents\
    \ of the tables for which \"initial\" rows are\n   selected.  If no tables' initial\
    \ contents are requested, then\n   \"result\" is an empty object.\n   Subsequently,\
    \ when changes to the specified tables are committed, the\n   changes are automatically\
    \ sent to the client using the \"update\"\n   monitor notification (see Section\
    \ 4.1.6).  This monitoring persists\n   until the JSON-RPC session terminates\
    \ or until the client sends a\n   \"monitor_cancel\" JSON-RPC request.\n   Each\
    \ <monitor-request> specifies one or more columns and the manner\n   in which\
    \ the columns (or the entire table) are to be monitored.  The\n   \"columns\"\
    \ member specifies the columns whose values are monitored.\n   It MUST NOT contain\
    \ duplicates.  If \"columns\" is omitted, all columns\n   in the table, except\
    \ for \"_uuid\", are monitored.  The circumstances\n   in which an \"update\"\
    \ notification is sent for a row within the table\n   are determined by <monitor-select>:\n\
    \   o  If \"initial\" is omitted or true, every row in the table is sent as\n\
    \      part of the response to the \"monitor\" request.\n   o  If \"insert\" is\
    \ omitted or true, \"update\" notifications are sent\n      for rows newly inserted\
    \ into the table.\n   o  If \"delete\" is omitted or true, \"update\" notifications\
    \ are sent\n      for rows deleted from the table.\n   o  If \"modify\" is omitted\
    \ or true, \"update\" notifications are sent\n      whenever a row in the table\
    \ is modified.\n   If there is more than one <monitor-request> in an array, then\
    \ each\n   <monitor-request> in the array should specify both \"columns\" and\n\
    \   \"select\", and the \"columns\" MUST be non-overlapping sets.\n"
- title: 4.1.6.  Update Notification
  contents:
  - "4.1.6.  Update Notification\n   The \"update\" notification is sent by the server\
    \ to the client to\n   report changes in tables that are being monitored following\
    \ a\n   \"monitor\" request as described above.  The notification has the\n  \
    \ following members:\n   o  \"method\": \"update\"\n   o  \"params\": [<json-value>,\
    \ <table-updates>]\n   o  \"id\": null\n   The <json-value> in \"params\" is the\
    \ same as the value passed as the\n   <json-value> in \"params\" for the corresponding\
    \ \"monitor\" request.\n   <table-updates> is an object that maps from a table\
    \ name to a\n   <table-update>.  A <table-update> is an object that maps from\
    \ the\n   row's UUID to a <row-update> object.  A <row-update> is an object\n\
    \   with the following members:\n    \"old\": <row>   present for \"delete\" and\
    \ \"modify\" updates\n    \"new\": <row>   present for \"initial\", \"insert\"\
    , and \"modify\" updates\n   The format of <row> is described in Section 5.1.\n\
    \   Each table in which one or more rows has changed (or whose initial\n   view\
    \ is being presented) is represented in <table-updates>.  Each row\n   that has\
    \ changed (or whose initial view is being presented) is\n   represented in its\
    \ <table-update> as a member with its name taken\n   from the row's \"_uuid\"\
    \ member.  The corresponding value is a\n   <row-update>:\n   o  The \"old\" member\
    \ is present for \"delete\" and \"modify\" updates.\n      For \"delete\" updates,\
    \ each monitored column is included.  For\n      \"modify\" updates, the prior\
    \ value of each monitored column whose\n      value has changed is included (monitored\
    \ columns that have not\n      changed are represented in \"new\").\n   o  The\
    \ \"new\" member is present for \"initial\", \"insert\", and \"modify\"\n    \
    \  updates.  For \"initial\" and \"insert\" updates, each monitored\n      column\
    \ is included.  For \"modify\" updates, the new value of each\n      monitored\
    \ column is included.\n   Note that initial views of rows are not presented in\
    \ update\n   notifications, but in the response object to the monitor request.\n\
    \   The formatting of the <table-updates> object, however, is the same in\n  \
    \ either case.\n"
- title: 4.1.7.  Monitor Cancellation
  contents:
  - "4.1.7.  Monitor Cancellation\n   The \"monitor_cancel\" request cancels a previously\
    \ issued monitor\n   request.  The request object members are:\n   o  \"method\"\
    : \"monitor_cancel\"\n   o  \"params\": [<json-value>]\n   o  \"id\": <nonnull-json-value>\n\
    \   The <json-value> in \"params\" matches the <json-value> in \"params\" for\n\
    \   the ongoing \"monitor\" request that is to be canceled.  No more\n   \"update\"\
    \ messages will be sent for this table monitor.  The response\n   to this request\
    \ has the following members:\n   o  \"result\": {}\n   o  \"error\": null\n  \
    \ o  \"id\": the request \"id\" member\n   In the event that a monitor cancellation\
    \ request refers to an unknown\n   monitor request, an error response with the\
    \ following members is\n   returned:\n   o  \"result\": null\n   o  \"error\"\
    : \"unknown monitor\"\n   o  \"id\": the request \"id\" member\n"
- title: 4.1.8.  Lock Operations
  contents:
  - "4.1.8.  Lock Operations\n   Three RPC methods, \"lock\", \"steal\", and \"unlock\"\
    , provide support to\n   clients to perform locking operations on the database.\
    \  The database\n   server supports an arbitrary number of locks, each of which\
    \ is\n   identified by a client-defined ID.  At any given time, each lock may\n\
    \   have at most one owner.  The precise usage of a lock is determined by\n  \
    \ the client.  For example, a set of clients may agree that a certain\n   table\
    \ can only be written by the owner of a certain lock.  OVSDB\n   itself does not\
    \ enforce any restrictions on how locks are used -- it\n   simply ensures that\
    \ a lock has at most one owner.\n   The RPC request objects have the following\
    \ members:\n   o  \"method\": \"lock\", \"steal\", or \"unlock\"\n   o  \"params\"\
    : [<id>]\n   o  \"id\": <nonnull-json-value>\n   The response depends on the request\
    \ and has the following members:\n   o  \"result\": {\"locked\": boolean} for\
    \ \"lock\"\n   o  \"result\": {\"locked\": true} for \"steal\"\n   o  \"result\"\
    : {} for \"unlock\"\n   o  \"error\": null\n   o  \"id\": same \"id\" as request\n\
    \   The three methods operate as follows:\n   o  \"lock\": The database will assign\
    \ this client ownership of the lock\n      as soon as it becomes available.  When\
    \ multiple clients request\n      the same lock, they will receive it in first-come,\
    \ first-served\n      order.\n   o  \"steal\": The database immediately assigns\
    \ this client ownership of\n      the lock.  If there is an existing owner, it\
    \ loses ownership.\n   o  \"unlock\": If the client owns the lock, this operation\
    \ releases it.\n      If the client has requested ownership of the lock, this\
    \ cancels\n      the request.\n      (Closing or otherwise disconnecting a database\
    \ client connection\n      unlocks all of its locks.)\n   For any given lock,\
    \ the client MUST alternate \"lock\" or \"steal\"\n   operations with \"unlock\"\
    \ operations.  That is, if the previous\n   operation on a lock was \"lock\" or\
    \ \"steal\", it MUST be followed by an\n   \"unlock\" operation, and vice versa.\n\
    \   For a \"lock\" operation, the \"locked\" member in the response object is\n\
    \   true if the lock has already been acquired and false if another\n   client\
    \ holds the lock and the client's request for it was queued.  In\n   the latter\
    \ case, the client will be notified later with a \"locked\"\n   message (Section\
    \ 4.1.9) when acquisition succeeds.\n   These requests complete and send a response\
    \ quickly, without waiting.\n   The \"locked\" and \"stolen\" notifications (see\
    \ below) report\n   asynchronous changes to ownership.\n   Note that the scope\
    \ of a lock is a database server, not a database\n   hosted by that server.  A\
    \ client may choose to implement a naming\n   convention, such as \"<db-name>__<lock-name>\"\
    , which can effectively\n   limit the scope of a lock to a particular database.\n"
- title: 4.1.9.  Locked Notification
  contents:
  - "4.1.9.  Locked Notification\n   The \"locked\" notification is provided to notify\
    \ a client that it has\n   been granted a lock that it had previously requested\
    \ with the \"lock\"\n   method described above.  The notification has the following\
    \ members:\n   o  \"method\": \"locked\"\n   o  \"params\": [<id>]\n   o  \"id\"\
    : null\n   \"Params\" contains the name of the lock that was given in the \"lock\"\
    \n   request.  The notified client now owns the lock named in \"params\".\n  \
    \ The database server sends this notification after the reply to the\n   corresponding\
    \ \"lock\" request (but only if the \"locked\" member of the\n   response was\
    \ false) and before the reply to the client's subsequent\n   \"unlock\" request.\n"
- title: 4.1.10.  Stolen Notification
  contents:
  - "4.1.10.  Stolen Notification\n   The \"stolen\" notification is provided to notify\
    \ a client, which had\n   previously obtained a lock, that another client has\
    \ stolen ownership\n   of that lock.  The notification has the following members:\n\
    \   o  \"method\": \"stolen\"\n   o  \"params\": [<id>]\n   o  \"id\": null\n\
    \   The notified client no longer owns the lock named in \"params\".  The\n  \
    \ client MUST still issue an \"unlock\" request before performing any\n   subsequent\
    \ \"lock\" or \"steal\" operation on the lock.\n   If the client originally obtained\
    \ the lock through a \"lock\" request,\n   then it will automatically regain the\
    \ lock later after the client\n   that stole it releases it.  (The database server\
    \ will send the client\n   a \"locked\" notification at that point to let it know.)\n\
    \   If the client originally obtained the lock through a \"steal\" request,\n\
    \   the database server won't automatically reassign it ownership of the\n   lock\
    \ when it later becomes available.  To regain ownership, the\n   client must \"\
    unlock\" and then \"lock\" or \"steal\" the lock again.\n"
- title: 4.1.11.  Echo
  contents:
  - "4.1.11.  Echo\n   The \"echo\" method can be used by both clients and servers\
    \ to verify\n   the liveness of a database connection.  It MUST be implemented\
    \ by\n   both clients and servers.  The members of the request are:\n   o  \"\
    method\": \"echo\"\n   o  \"params\": JSON array with any contents\n   o  \"id\"\
    : <json-value>\n   The response object has the following members:\n   o  \"result\"\
    : same as \"params\"\n   o  \"error\": null\n   o  \"id\": the request \"id\"\
    \ member\n"
- title: 5.  Database Operations
  contents:
  - "5.  Database Operations\n   This section describes the operations that may be\
    \ specified in the\n   \"transact\" method described in Section 4.1.3.\n"
- title: 5.1.  Notation
  contents:
  - "5.1.  Notation\n   We introduce the following notation for the discussion of\
    \ operations.\n    <db-name>\n      An <id> that names a database.  The valid\
    \ <db-name>s can be\n      obtained using a \"list_dbs\" request.  The <db-name>\
    \ is taken from\n      the \"name\" member of <database-schema>.\n   <table>\n\
    \      An <id> that names a table.\n   <column>\n      An <id> that names a table\
    \ column.\n   <row>\n      A JSON object that describes a table row or a subset\
    \ of a table\n      row.  Each member is the name of a table column paired with\
    \ the\n      <value> of that column.\n   <value>\n      A JSON value that represents\
    \ the value of a column in a table row,\n      one of <atom>, <set>, or <map>.\n\
    \   <atom>\n      A JSON value that represents a scalar value for a column, one\
    \ of\n      <string>, <number>, <boolean>, <uuid>, or <named-uuid>.\n   <set>\n\
    \      Either an <atom>, representing a set with exactly one element, or\n   \
    \   a 2-element JSON array that represents a database set value.  The\n      first\
    \ element of the array must be the string \"set\", and the\n      second element\
    \ must be an array of zero or more <atom>s giving the\n      values in the set.\
    \  All of the <atom>s must have the same type.\n   <map>\n      A 2-element JSON\
    \ array that represents a database map value.  The\n      first element of the\
    \ array must be the string \"map\", and the\n      second element must be an array\
    \ of zero or more <pair>s giving the\n      values in the map.  All of the <pair>s\
    \ must have the same key and\n      value types.\n      (JSON objects are not\
    \ used to represent <map> because JSON only\n      allows string names in an object.)\n\
    \   <pair>\n      A 2-element JSON array that represents a pair within a database\n\
    \      map.  The first element is an <atom> that represents the key, and\n   \
    \   the second element is an <atom> that represents the value.\n   <uuid>\n  \
    \    A 2-element JSON array that represents a UUID.  The first element\n     \
    \ of the array must be the string \"uuid\", and the second element\n      must\
    \ be a 36-character string giving the UUID in the format\n      described by RFC\
    \ 4122 [RFC4122].  For example, the following\n      <uuid> represents the UUID\
    \ 550e8400-e29b-41d4-a716-446655440000:\n      [\"uuid\", \"550e8400-e29b-41d4-a716-446655440000\"\
    ]\n   <named-uuid>\n      A 2-element JSON array that represents the UUID of a\
    \ row inserted\n      in an \"insert\" operation within the same transaction.\
    \  The first\n      element of the array must be the string \"named-uuid\", and\
    \ the\n      second element should be the <id> specified as the \"uuid-name\"\
    \ for\n      an \"insert\" operation within the same transaction.  For example,\n\
    \      if an \"insert\" operation within this transaction specifies a\n      \"\
    uuid-name\" of \"myrow\", the following <named-uuid> represents the\n      UUID\
    \ created by that operation:\n      [\"named-uuid\", \"myrow\"]\n      A <named-uuid>\
    \ may be used anywhere a <uuid> is valid.  This\n      enables a single transaction\
    \ to both insert a new row and then\n      refer to that row using the \"uuid-name\"\
    \ that was associated with\n      that row when it was inserted.  Note that the\
    \ \"uuid-name\" is only\n      meaningful within the scope of a single transaction.\n\
    \   <condition>\n      A 3-element JSON array of the form [<column>, <function>,\
    \ <value>]\n      that represents a test on a column value.  Except as otherwise\n\
    \      specified below, <value> MUST have the same type as <column>.  The\n  \
    \    meaning depends on the type of <column>:\n      integer or real\n       \
    \  <function> must be \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\",\n        \
    \ \"includes\", or \"excludes\".\n         The test is true if the column's value\
    \ satisfies the relation\n         <function> <value>, e.g., if the column has\
    \ value 1 and <value>\n         is 2, the test is true if <function> is \"<\"\
    , \"<=\", or \"!=\", but\n         not otherwise.\n         \"includes\" is equivalent\
    \ to \"==\"; \"excludes\" is equivalent to\n         \"!=\".\n      boolean or\
    \ string or uuid\n         <function> must be \"!=\", \"==\", \"includes\", or\
    \ \"excludes\".\n         If <function> is \"==\" or \"includes\", the test is\
    \ true if the\n         column's value equals <value>.  If <function> is \"!=\"\
    \ or\n         \"excludes\", the test is inverted.\n      set or map\n       \
    \  <function> must be \"!=\", \"==\", \"includes\", or \"excludes\".\n       \
    \  If <function> is \"==\", the test is true if the column's value\n         contains\
    \ exactly the same values (for sets) or pairs (for\n         maps).  If <function>\
    \ is \"!=\", the test is inverted.\n         If <function> is \"includes\", the\
    \ test is true if the column's\n         value contains all of the values (for\
    \ sets) or pairs (for maps)\n         in <value>.  The column's value may also\
    \ contain other values\n         or pairs.\n         If <function> is \"excludes\"\
    , the test is true if the column's\n         value does not contain any of the\
    \ values (for sets) or pairs\n         (for maps) in <value>.  The column's value\
    \ may contain other\n         values or pairs not in <value>.\n         If <function>\
    \ is \"includes\" or \"excludes\", then the required\n         type of <value>\
    \ is slightly relaxed, in that it may have fewer\n         than the minimum number\
    \ of elements specified by the column's\n         type.  If <function> is \"excludes\"\
    , then the required type is\n         additionally relaxed in that <value> may\
    \ have more than the\n         maximum number of elements specified by the column's\
    \ type.\n   <function>\n      One of \"<\", \"<=\", \"==\", \"!=\", \">=\", \"\
    >\", \"includes\", or\n      \"excludes\".\n   <mutation>\n      A 3-element JSON\
    \ array of the form [<column>, <mutator>, <value>]\n      that represents a change\
    \ to a column value.  Except as otherwise\n      specified below, <value> must\
    \ have the same type as <column>.  The\n      meaning depends on the type of <column>:\n\
    \      integer or real\n         <mutator> must be \"+=\", \"-=\", \"*=\", \"\
    /=\", or (integer only)\n         \"%=\".  The value of <column> is changed to\
    \ the sum, difference,\n         product, quotient, or remainder, respectively,\
    \ of <column> and\n         <value>.\n         Constraints on <column> are ignored\
    \ when parsing <value>.\n      boolean, string, or uuid\n         No valid <mutator>s\
    \ are currently defined for these types.\n      set\n         Any <mutator> valid\
    \ for the set's element type may be applied\n         to the set, in which case\
    \ the mutation is applied to each\n         member of the set individually. <value>\
    \ must be a scalar value\n         of the same type as the set's element type,\
    \ except that\n         constraints are ignored when parsing <value>.\n      \
    \   If <mutator> is \"insert\", then each of the values in the set in\n      \
    \   <value> is added to <column> if it is not already present.  The\n        \
    \ required type of <value> is slightly relaxed, in that it may\n         have\
    \ fewer than the minimum number of elements specified by the\n         column's\
    \ type.\n         If <mutator> is \"delete\", then each of the values in the set\
    \ in\n         <value> is removed from <column> if it is present there.  The\n\
    \         required type is slightly relaxed in that <value> may have more\n  \
    \       or less than the maximum number of elements specified by the\n       \
    \  column's type.\n      map\n         <mutator> must be \"insert\" or \"delete\"\
    .\n         If <mutator> is \"insert\", then each of the key-value pairs in\n\
    \         the map in <value> is added to <column> only if its key is not\n   \
    \      already present.  The required type of <value> is slightly\n         relaxed,\
    \ in that it may have fewer than the minimum number of\n         elements specified\
    \ by the column's type.\n         If <mutator> is \"delete\", then <value> may\
    \ have the same type\n         as <column> (a map type), or it may be a set whose\
    \ element type\n         is the same as <column>'s key type:\n         +  If <value>\
    \ is a map, the mutation deletes each key-value\n            pair in <column>\
    \ whose key and value equal one of the key-\n            value pairs in <value>.\n\
    \         +  If <value> is a set, the mutation deletes each key-value\n      \
    \      pair in <column> whose key equals one of the values in\n            <value>.\n\
    \         For \"delete\", <value> may have any number of elements,\n         regardless\
    \ of restrictions on the number of elements in\n         <column>.\n   <mutator>\n\
    \      One of \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"insert\", or \"delete\"\
    .\n"
- title: 5.2.  Operations
  contents:
  - "5.2.  Operations\n   The operations that may be performed as part of a \"transact\"\
    \ RPC\n   request (see Section 4.1.3) are described in the following\n   subsections.\
    \  Each of these operations is a JSON object that may be\n   included as one of\
    \ the elements of the \"params\" array that is one of\n   the elements of the\
    \ \"transact\" request.  The details of each object,\n   its semantics, results,\
    \ and possible errors are described below.\n"
- title: 5.2.1.  Insert
  contents:
  - "5.2.1.  Insert\n   The \"insert\" object contains the following members:\n  \
    \    \"op\": \"insert\"          required\n      \"table\": <table>        required\n\
    \      \"row\": <row>            required\n      \"uuid-name\": <id>       optional\n\
    \   The corresponding result object contains the following member:\n      \"uuid\"\
    : <uuid>\n   The operation inserts \"row\" into \"table\".  If \"row\" does not\
    \ specify\n   values for all the columns in \"table\", those columns receive default\n\
    \   values.  The default value for a column depends on its type.  The\n   default\
    \ for a column whose <type> specifies a \"min\" of 0 is an empty\n   set or empty\
    \ map.  Otherwise, the default is a single value or a\n   single key-value pair,\
    \ whose value(s) depend on its <atomic-type>:\n   o  \"integer\" or \"real\":\
    \ 0\n   o  \"boolean\": false\n   o  \"string\": \"\" (the empty string)\n   o\
    \  \"uuid\": 00000000-0000-0000-0000-000000000000\n   The new row receives a new,\
    \ randomly generated UUID.  If \"uuid-name\"\n   is supplied, then it is an error\
    \ if <id> is not unique among the\n   \"uuid-name\"s supplied on all the \"insert\"\
    \ operations within this\n   transaction.  The UUID for the new row is returned\
    \ as the \"uuid\"\n   member of the result.\n   The errors that may be returned\
    \ are as follows:\n   \"error\": \"duplicate uuid-name\"\n      The same \"uuid-name\"\
    \ appears on another \"insert\" operation within\n      this transaction.\n  \
    \ \"error\": \"constraint violation\"\n      One of the values in \"row\" does\
    \ not satisfy the immediate\n      constraints for its column's <base-type>. \
    \ This error will occur\n      for columns that are not explicitly set by \"row\"\
    \ if the default\n      value does not satisfy the column's constraints.\n"
- title: 5.2.2.  Select
  contents:
  - "5.2.2.  Select\n   The \"select\" object contains the following members:\n  \
    \    \"op\": \"select\"                required\n      \"table\": <table>    \
    \          required\n      \"where\": [<condition>*]       required\n      \"\
    columns\": [<column>*]        optional\n   The corresponding result object contains\
    \ the following member:\n      \"rows\": [<row>*]\n   The operation searches \"\
    table\" for rows that match all the conditions\n   specified in \"where\".  If\
    \ \"where\" is an empty array, every row in\n   \"table\" is selected.\n   The\
    \ \"rows\" member of the result is an array of objects.  Each object\n   corresponds\
    \ to a matching row, with each column specified in\n   \"columns\" as a member,\
    \ the column's name as the member name, and its\n   value as the member value.\
    \  If \"columns\" is not specified, all the\n   table's columns are included (including\
    \ the internally generated\n   \"_uuid\" and \"_version\" columns).  If two rows\
    \ of the result have the\n   same values for all included columns, only one copy\
    \ of that row is\n   included in \"rows\".  Specifying \"_uuid\" within \"columns\"\
    \ will avoid\n   dropping duplicates, since every row has a unique UUID.\n   The\
    \ ordering of rows within \"rows\" is unspecified.\n"
- title: 5.2.3.  Update
  contents:
  - "5.2.3.  Update\n   The \"update\" object contains the following members:\n  \
    \    \"op\": \"update\"                required\n      \"table\": <table>    \
    \          required\n      \"where\": [<condition>*]       required\n      \"\
    row\": <row>                  required\n   The corresponding result object contains\
    \ the following member:\n      \"count\": <integer>\n   The operation updates\
    \ rows in a table.  It searches \"table\" for rows\n   that match all the conditions\
    \ specified in \"where\".  For each\n   matching row, it changes the value of\
    \ each column specified in \"row\"\n   to the value for that column specified\
    \ in \"row\".  The \"_uuid\" and\n   \"_version\" columns of a table may not be\
    \ directly updated with this\n   operation.  Columns designated read-only in the\
    \ schema also may not\n   be updated.\n   The \"count\" member of the result specifies\
    \ the number of rows that\n   matched.\n   The error that may be returned is:\n\
    \   \"error\": \"constraint violation\"\n      One of the values in \"row\" does\
    \ not satisfy the immediate\n      constraints for its column's <base-type>.\n"
- title: 5.2.4.  Mutate
  contents:
  - "5.2.4.  Mutate\n   The \"mutate\" object contains the following members:\n  \
    \    \"op\":  \"mutate\"               required\n      \"table\": <table>    \
    \          required\n      \"where\": [<condition>*]       required\n      \"\
    mutations\": [<mutation>*]    required\n   The corresponding result object contains\
    \ the following member:\n      \"count\": <integer>\n   The operation mutates\
    \ rows in a table.  It searches \"table\" for rows\n   that match all the conditions\
    \ specified in \"where\".  For each\n   matching row, it mutates its columns as\
    \ specified by each <mutation>\n   in \"mutations\", in the order specified.\n\
    \   The \"_uuid\" and \"_version\" columns of a table may not be directly\n  \
    \ modified with this operation.  Columns designated read-only in the\n   schema\
    \ also may not be updated.\n   The \"count\" member of the result specifies the\
    \ number of rows that\n   matched.\n   The errors that may be returned are:\n\
    \   \"error\":  \"domain error\"\n      The result of the mutation is not mathematically\
    \ defined, e.g.,\n      division by zero.\n   \"error\":  \"range error\"\n  \
    \    The result of the mutation is not representable within the\n      database's\
    \ format, e.g., an integer result outside the range\n      INT64_MIN...INT64_MAX\
    \ or a real result outside the range\n      -DBL_MAX...DBL_MAX.\n   \"error\"\
    : \"constraint violation\"\n      The mutation caused the column's value to violate\
    \ a constraint,\n      e.g., it caused a column to have more or fewer values than\
    \ are\n      allowed, an arithmetic operation caused a set or map to have\n  \
    \    duplicate elements, or it violated a constraint specified by a\n      column's\
    \ <base-type>.\n"
- title: 5.2.5.  Delete
  contents:
  - "5.2.5.  Delete\n   The \"delete\" object contains the following members:\n  \
    \    \"op\":  \"delete\"               required\n      \"table\": <table>    \
    \          required\n      \"where\": [<condition>*]       required\n   The corresponding\
    \ result object contains the following member:\n      \"count\": <integer>\n \
    \  The operation deletes all the rows from \"table\" that match all the\n   conditions\
    \ specified in \"where\".  The \"count\" member of the result\n   specifies the\
    \ number of deleted rows.\n"
- title: 5.2.6.  Wait
  contents:
  - "5.2.6.  Wait\n   The \"wait\" object contains the following members:\n      \"\
    op\": \"wait\"                        required\n      \"timeout\": <integer> \
    \               optional\n      \"table\": <table>                    required\n\
    \      \"where\": [<condition>*]             required\n      \"columns\": [<column>*]\
    \              required\n      \"until\": \"==\" or \"!=\"               required\n\
    \      \"rows\": [<row>*]                    required\n   There is no corresponding\
    \ result object.\n   The operation waits until a condition becomes true.\n   If\
    \ \"until\" is \"==\", it checks whether the query on \"table\" specified\n  \
    \ by \"where\" and \"columns\", which is evaluated in the same way as\n   specified\
    \ for \"select\", returns the result set specified by \"rows\".\n   If it does,\
    \ then the operation completes successfully.  Otherwise,\n   the entire transaction\
    \ rolls back.  It is automatically restarted\n   later, after a change in the\
    \ database makes it possible for the\n   operation to succeed.  The client will\
    \ not receive a response until\n   the operation permanently succeeds or fails.\n\
    \   If \"until\" is \"!=\", the sense of the test is negated.  That is, as\n \
    \  long as the query on \"table\" specified by \"where\" and \"columns\"\n   returns\
    \ \"rows\", the transaction will be rolled back and restarted\n   later.\n   If\
    \ \"timeout\" is specified, then the transaction aborts after the\n   specified\
    \ number of milliseconds.  The transaction is guaranteed to\n   be attempted at\
    \ least once before it aborts.  A \"timeout\" of 0 will\n   abort the transaction\
    \ on the first mismatch.\n   The error that may be returned is:\n   \"error\"\
    :  \"timed out\"\n      The \"timeout\" was reached before the transaction was\
    \ able to\n      complete.\n"
- title: 5.2.7.  Commit
  contents:
  - "5.2.7.  Commit\n   The \"commit\" object contains the following members:\n  \
    \    \"op\": \"commit\"                      required\n      \"durable\": <boolean>\
    \                required\n   There is no corresponding result object.\n   If\
    \ \"durable\" is specified as true, then the transaction, if it\n   commits, will\
    \ be stored durably (to disk) before the reply is sent to\n   the client.  This\
    \ operation with \"durable\" set to false is\n   effectively a no-op.\n   The\
    \ error that may be returned is:\n   \"error\": \"not supported\"\n      When\
    \ \"durable\" is true, this database implementation does not\n      support durable\
    \ commits.\n"
- title: 5.2.8.  Abort
  contents:
  - "5.2.8.  Abort\n   The \"abort\" object contains the following member:\n     \
    \ \"op\":  \"abort\"                      required\n   There is no corresponding\
    \ result object (the operation never\n   succeeds).\n   The operation aborts the\
    \ entire transaction with an error.  This may\n   be useful for testing.\n   The\
    \ error that will be returned is:\n   \"error\": \"aborted\"\n      This operation\
    \ always fails with this error.\n"
- title: 5.2.9.  Comment
  contents:
  - "5.2.9.  Comment\n   The \"comment\" object contains the following members:\n\
    \      \"op\": \"comment\"                    required\n      \"comment\": <string>\
    \                required\n   There is no corresponding result object.\n   The\
    \ operation provides information to a database administrator on the\n   purpose\
    \ of a transaction.  The ovsdb-server implementation, for\n   example, adds comments\
    \ in transactions that modify the database to\n   the database journal.  This\
    \ can be helpful in debugging, e.g., when\n   there are multiple clients writing\
    \ to a database.  An example of this\n   can be seen in the ovs-vsctl tool, a\
    \ command line tool that interacts\n   with ovsdb-server.  When performing operations\
    \ on the database, it\n   includes the command that was invoked (e.g., \"ovs-vsctl\
    \ add-br br0\")\n   as a comment in the transaction, which can then be seen in\
    \ the\n   journal alongside the changes that were made to the tables in the\n\
    \   database.\n"
- title: 5.2.10.  Assert
  contents:
  - "5.2.10.  Assert\n   The assert object contains the following members:\n     \
    \ \"op\": \"assert\"                     required\n      \"lock\": <id>      \
    \                 required\n   Result object has no members.\n   The assert operation\
    \ causes the transaction to be aborted if the\n   client does not own the lock\
    \ named <id>.\n   The error that may be returned is:\n   \"error\": \"not owner\"\
    \n      The client does not own the named lock.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has assigned TCP port 6640 for this protocol.\
    \  Earlier\n   implementations of OVSDB used another port number, but compliant\n\
    \   implementations should use the IANA-assigned number.\n   IANA has updated\
    \ the reference for port 6640 to point to this\n   document.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The main security issue that needs to be addressed\
    \ for the OVSDB\n   protocol is the authentication, integrity, and privacy of\n\
    \   communications between a client and server implementing this\n   protocol.\
    \  To provide such protection, an OVSDB connection SHOULD be\n   secured using\
    \ Transport Layer Security (TLS) [RFC5246].  The precise\n   details of how clients\
    \ and servers authenticate each other is highly\n   dependent on the operating\
    \ environment.  It is often the case that\n   OVSDB clients and servers operate\
    \ in a tightly controlled\n   environment, e.g., on machines in a single data\
    \ center where they\n   communicate on an isolated management network.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Thanks to Jeremy Stribling and Justin Pettit for their\
    \ helpful input\n   to this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [DCE]        \"DCE: Remote Procedure Call\", Open\
    \ Group CAE\n                Specification C309, ISBN 1-85912-041-5, August 1994.\n\
    \   [JSON-RPC]   \"JSON-RPC Specification, Version 1.0\",\n                <http://json-rpc.org/wiki/specification>.\n\
    \   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4122] \
    \   Leach, P., Mealling, M., and R. Salz, \"A Universally\n                Unique\
    \ IDentifier (UUID) URN Namespace\", RFC 4122,\n                July 2005.\n \
    \  [RFC4627]    Crockford, D., \"The application/json Media Type for\n       \
    \         JavaScript Object Notation (JSON)\", RFC 4627, July 2006.\n   [RFC5246]\
    \    Dierks, T. and E. Rescorla, \"The Transport Layer\n                Security\
    \ (TLS) Protocol Version 1.2\", RFC 5246,\n                August 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DB-SCHEMA]  \"Open vSwitch Database Schema\"\
    ,\n                <http://openvswitch.org/ovs-vswitchd.conf.db.5.pdf>.\n   [OF-SPEC]\
    \    Open Networking Foundation, \"OpenFlow Switch\n                Specification,\
    \ version 1.3.3\", October 2013,\n                <https://www.opennetworking.org>.\n\
    \   [OVS]        \"Open vSwitch\", <http://openvswitch.org/>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ben Pfaff\n   VMware, Inc.\n   3401 Hillview Ave.\n  \
    \ Palo Alto, CA  94304\n   USA\n   EMail: blp@nicira.com\n   Bruce Davie (editor)\n\
    \   VMware, Inc.\n   3401 Hillview Ave.\n   Palo Alto, CA  94304\n   USA\n   EMail:\
    \ bsd@nicira.com\n"
