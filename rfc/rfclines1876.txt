Abstract This memo defines a new DNS RR type for experimental purposes.
This RFC describes a mechanism to allow the DNS to carry location information about hosts, networks, and subnets.
Such information for a small subset of hosts is currently contained in the flat file UUCP maps.
However, just as the DNS replaced the use of HOSTS.TXT to carry host and network address information, it is possible to replace the UUCP maps as carriers of location information.
This RFC defines the format of a new Resource Record (RR) for the Domain Name System (DNS), and reserves a corresponding DNS type mnemonic (LOC) and numerical code (29).
This RFC assumes that the reader is familiar with the DNS [RFC 1034, RFC 1035].
The data shown in our examples is for pedagogical use and does not necessarily reflect the real Internet.
Implementations are required to check this field and make no assumptions about the format of unrecognized versions.
The diameter of a sphere enclosing the described entity, in centimeters, expressed as a pair of four bit unsigned integers, each ranging from zero to nine, with the most significant four bits representing the base and the second number representing the power of ten by which to multiply the base.
This allows sizes from 0e0 (<1cm) to 9e9 (90,000km) to be expressed.
This representation was chosen such that the hexadecimal representation can be read by eye; 0x15   1e5.
Four bit values greater than 9 are undefined, as are values with a base of zero and a non zero exponent.
Since 20000000m (represented by the value 0x29) is greater than the equatorial diameter of the WGS 84 ellipsoid (12756274m), it is therefore suitable for use as a "worldwide" size.
The horizontal precision of the data, in centimeters, expressed using the same representation as SIZE.
This is the diameter of the horizontal "circle of error", rather than a "plus or minus" value.
(This was chosen to match the interpretation of SIZE; to get a "plus or minus" value, divide by 2.)
The vertical precision of the data, in centimeters, expressed using the sane representation as for SIZE.
This is the total potential vertical error, rather than a "plus or minus" value.
(This was chosen to match the interpretation of SIZE; to get a "plus or minus" value, divide by 2.)
Note that if altitude above or below sea level is used as an approximation for altitude relative to the [WGS 84] ellipsoid, the precision value should be adjusted.
The latitude of the center of the sphere described by the SIZE field, expressed as a 32 bit integer, most significant octet first (network standard byte order), in thousandths of a second of arc.
2^31 represents the equator; numbers above that are north latitude.
The longitude of the center of the sphere described by the SIZE field, expressed as a 32 bit integer, most significant octet first (network standard byte order), in thousandths of a second of arc, rounded away from the prime meridian.
31 represents the prime meridian; numbers above that are east longitude.
The altitude of the center of the sphere described by the SIZE field, expressed as a 32 bit integer, most significant octet first (network standard byte order), in centimeters, from a base of 100,000m below the [WGS 84] reference spheroid used by GPS (semimajor axis a 6378137.0, reciprocal flattening rf 298.257223563).
Altitude above (or below) sea level may be used as an approximation of altitude relative to the the [WGS 84] spheroid, though due to the Earth's surface not being a perfect spheroid, there will be differences.
(For example, the geoid (which sea level approximates) for the continental US ranges from 10 meters to 50 meters below the [WGS 84] spheroid.
Adjustments to ALTITUDE and/or VERT PRE will be necessary in most cases.
The Defense Mapping Agency publishes geoid height values relative to the [WGS 84] ellipsoid.
The LOC record is expressed in a master file in the following format: <owner
(The parentheses are used for multi line data as specified in [RFC 1035] section 5.1.)
.. 90000000.00] (size/precision in meters)
If omitted, minutes and seconds default to zero, size defaults to 1m, horizontal precision defaults to 10000m, and vertical precision defaults to 10m.
These defaults are chosen to represent typical ZIP/postal code area sizes, since it is often easy to find approximate geographical location by ZIP/postal code.
note use of precision defaults cambridge net.kei.com.
N 71 06 18 W  24m 30m ;; higher precision host LOC RR.
note use of vertical precision default loiosh.kei.com.
N 00 08 50 E 10m curtin.edu.au.
Application use of the LOC RR 5.1
Some uses for the LOC RR have already been suggested, including the USENET backbone flow maps, a "visual traceroute" application showing the geographical path of an IP packet, and network management applications that could use LOC RRs to generate a map of hosts and routers being managed.
This section specifies how to use the DNS to translate domain names and/or IP addresses into location information.
If an application wishes to have a "fallback" behavior, displaying a less precise or larger area when a host does not have an associated LOC RR, it MAY support use of the algorithm in section 5.2.3, as noted in sections 5.2.1 and 5.2.2.
If fallback is desired, this behaviour is the RECOMMENDED default, but in some cases it may need to be modified based on the specific requirements of the application involved.
This search algorithm is designed to allow network administrators to specify the location of a network or subnet without requiring LOC RR data for each individual host.
For example, a computer lab with 24 workstations, all of which are on the same subnet and in basically the same location, would only need a LOC RR for the subnet.
(However, if the file server's location has been more precisely measured, a separate LOC RR for it can be placed in the DNS.)
If the application is beginning with a name, rather than an IP address (as the USENET backbone flow maps do), it MUST check for a LOC RR associated with that name.
(CNAME records should be followed as for any other RR type.)
If there is no LOC RR for that name, all A records (if any) associated with the name MAY be checked for network (or subnet)
LOC RRs using the "Searching by Network or Subnet" algorithm (5.2.3).
If multiple A records exist and have associated network or subnet LOC RRs, the application may choose to use any, some, or all of the LOC RRs found, possibly in combination.
It is suggested that multi homed hosts have LOC RRs for their name in the DNS to avoid any ambiguity in these cases.
Note that domain names that do not have associated A records must have a LOC RR associated with their name in order for location information to be accessible.
If the application is beginning with an IP address (as a "visual traceroute" application might be)
it MUST first map the address to a name using the IN ADDR.ARPA namespace (see [RFC 1034], section 5.2.1), then check for a LOC RR associated with that name.
If there is no LOC RR for the name, the address MAY be checked for network (or subnet)
LOC RRs using the "Searching by Network or Subnet" algorithm (5.2.3).
5.2.3 Searching by Network or Subnet
Even if a host's name does not have any associated LOC RRs, the network(s) or subnet(s)
If the application wishes to search for such less specific data, the following algorithm SHOULD be followed to find a network or subnet LOC RR associated with the IP address.
This algorithm is adapted slightly from that specified in [RFC 1101], sections 4.3 and 4.4.
Since subnet LOC RRs are (if present) more specific than network LOC RRs, it is best to use them if available.
In order to do so, we build a stack of network and subnet names found while performing the [RFC 1101] search, then work our way down the stack until a LOC RR is found.
1. create a host zero address using the network portion of the IP address (one, two, or three bytes for class A, B, or C networks, respectively).
For example, for the host 128.9.2.17, on the class B network 128.9, this would result in the address "128.9.0.0".
Reverse the octets, suffix IN ADDR.ARPA, and query for PTR and A records.
255.255.255.0 Push the name "isi net.isi.edu" onto the stack of names to be searched for LOC RRs later.
Since an A RR was found, repeat using mask from RR (255.255.255.0), constructing a query for 0.2.9.128.IN ADDR.ARPA.
Since another A RR was found, repeat using mask 255.255.255.240 (x'FFFFFFF0'), constructing a query for 16.2.9.128.IN ADDR.ARPA.
Push the name "inc subsubnet.isi.edu" onto the stack of names to be searched for LOC RRs later.
Since no A RR is present at 16.2.9.128.IN ADDR.ARPA.
, there are no more subnet levels to search.
We now pop the top name from the stack and check for an associated LOC RR.
Repeat until a LOC RR is found.
In this case, assume that inc subsubnet.isi.edu does not have an associated LOC RR, but that div2 subnet.isi.edu does.
We will then use div2 subnet.isi.edu's LOC RR as an approximation of this host's location.
(Note that even if isi net.isi.edu has a LOC RR, it will not be used if a subnet also has a LOC RR.)
5.3 Applicability to non IN Classes and
The LOC record is defined for all RR classes, and may be used with non IN classes such as HS and CH.
The semantics of such use are not defined by this memo.
The search algorithm in section 5.2.3 may be adapted to other addressing schemes by extending [RFC 1101]'s encoding of network names to cover those schemes.
Such extensions are not defined by this memo.
Security Considerations High precision LOC RR information could be used to plan a penetration of physical security, leading to potential denial of machine attacks.
To avoid any appearance of suggesting this method to potential attackers, we declined the opportunity to name this RR "ICBM".
Does not contain conversion to/from decimal degrees;
divide or multiply by 60 60 1000 for that.
/ static unsigned int poweroften[10]
static const char   precsize ntoa(prec)
(int)((prec >> 4) & 0x0f) % 10; exponent
& 0x0f) % 10; val   mantissa
X   10  Y(cm) to 0xXY.
static u int8 t precsize aton(strptr) char   strptr;
{ unsigned int mval   0, cmval   0; u int8 t retval   0; register char  cp; register int exponent; register int mantissa; cp    strptr; while (isdigit( cp))
for (exponent   0; exponent < 9; exponent ) if (cmval < poweroften[exponent 1])
break; mantissa   cmval / poweroften[exponent]; if (mantissa > 9)
/ static u int32 t latlon2ul(latlonstrptr,which
which; { register char  cp; u int32 t retval;
int deg   0, min   0, secs   0, secsfrac   0; cp    latlonstrptr; while (isdigit( cp))
while (isspace( cp)) cp ; if (!
goto fndhemi; while (isdigit( cp)
while (isspace( cp)) cp ; if (!
goto fndhemi; while (isdigit( cp)
/  if any trailing garbage  / cp ; while (isspace( cp)) cp ; fndhemi: switch ( cp)
converts a zone file representation in a string to an RDATA   on the wire representation.
/ u int32 t loc aton(ascii, binary)
const char  ascii; u char  binary; { const char  cp,  maxcp; u char  bcp; u int32 t latit   0, longit   0, alt   0; u int32 t
10km  / u int8 t vp   0x13;
which2   0; cp   ascii; maxcp   cp
strlen(ascii); lltemp1   latlon2ul(&cp, &which1); lltemp2   latlon2ul(&cp, &which2); switch (which1   which2)
we didn't get one of each  / return 0; }
cp ; while (isdigit( cp))
; vp   precsize aton(&cp); defaults: bcp   binary;
const u char  binary; char  ascii; { static char tmpbuf[255 3]; register char  cp; register const u char  rcp; int latdeg, latmin, latsec, latsecfrac; int longdeg, longmin, longsec, longsecfrac; char northsouth, eastwest; int altmeters, altfrac, altsign;
100; int32 t latval, longval, altval; u int32 t templ; u int8 t sizeval, hpval, vpval, versionval; char  sizestr,  hpstr,  vpstr; rcp   binary; if (ascii)
if (templ < referencealt) {
referencealt templ; altsign    1; } else { altval   templ referencealt; altsign   1; } if (latval < 0) { northsouth   'S'; latval    latval; }
'N'; latsecfrac   latval % 1000; latval   latval / 1000; latsec   latval % 60; latval   latval / 60; latmin   latval % 60; latval   latval / 60; latdeg   latval; if (longval < 0)
{ eastwest   'W'; longval    longval; } else eastwest   'E'
; longsecfrac   longval % 1000; longval   longval / 1000; longsec   longval % 60; longval   longval / 60; longmin   longval % 60; longval   longval / 60; longdeg   longval; altfrac   altval % 100; altmeters   (altval / 100)   altsign; sizestr   savestr(precsize ntoa(sizeval)); hpstr   savestr(precsize ntoa(hpval)); vpstr   savestr(precsize ntoa(vpval)); sprintf(cp, "%d %.2d
%.2d.%.3d %c %d %.2d %.2d.%.3d
sm %sm %sm", latdeg, latmin, latsec, latsecfrac, northsouth, longdeg, longmin, longsec, longsecfrac, eastwest, altmeters, altfrac, sizestr, hpstr, vpstr); free(sizestr); free(hpstr); free(vpstr)
