- title: __initial_text__
  contents:
  - '                  The Uniqueness of Unique Identifiers

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC provides information that may be useful when selecting\
    \ a\n   method to use for assigning unique identifiers to people.\n"
- title: 1. The Issue
  contents:
  - "1. The Issue\n   Computer systems require a way to identify the people associated\
    \ with\n   them.  These identifiers have been called \"user names\" or \"account\n\
    \   names.\"  The identifers are typically short, alphanumeric strings.\n   In\
    \ general, these identifiers must be unique.\n   The uniqueness is usually achieved\
    \ in one of three ways:\n   1) The identifiers are assigned in a unique manner\
    \ without using\n   information associated with the individual.  Example identifiers\
    \ are:\n           ax54tv\n           cs00034\n   This method was often used by\
    \ large timesharing systems.  While it\n   achieved the uniqueness property, there\
    \ was no way of guessing the\n   identifier without knowing it through other means.\n\
    \   2) The identifiers are assigned in a unique manner where the bulk of\n   the\
    \ identifier is algorithmically derived from the individual's name.\n   Example\
    \ identifers are:\n           Craig.A.Finseth-1\n           Finseth1\n       \
    \    caf-1\n           fins0001\n   3) The identifiers are in general not assigned\
    \ in a unique manner:\n   the identifier is algorithmically derived from the individual's\
    \ name\n   and duplicates are handled in an ad-hoc manner.  Example identifiers\n\
    \   are:\n           Craig.Finseth\n           caf\n   Now that we have widespread\
    \ electronic mail, an important feature of\n   an identifier system is the ability\
    \ to predict the identifier based\n   on other information associated with the\
    \ individual.  This other\n   information is typically the person's name.\n  \
    \ Methods two and three make such predictions possible, especially if\n   you\
    \ have one example mapping from a person's name to the identifier.\n   Method\
    \ two relies on using some or all of the name and\n   algorithmically varying\
    \ it to ensure uniqueness (for example, by\n   appending an integer).  Method\
    \ three relies on using some or all of\n   the name and selects an alternate identifier\
    \ in the case of a\n   duplication.\n   For both methods, it is important to minimize\
    \ the need for making the\n   adjustments required to ensure uniqueness (i.e.,\
    \ an integer that is\n   not 1 or an alternate identifier).  The probability that\
    \ an\n   adjustment will be required depends on the format of the identifer\n\
    \   and the size of the organization.\n"
- title: 2. Identifier Formats
  contents:
  - "2. Identifier Formats\n   There are a number of popular identifier formats. \
    \ This section will\n   list some of them and supply both typical and maximum\
    \ values for the\n   number of possible identifiers.  A \"typical\" value is the\
    \ number that\n   you are likely to run into in real life.  A \"maximum\" value\
    \ is the\n   largest number of possible (without getting extreme about it) values.\n\
    \   All ranges are expressed as a number of bits.\n"
- title: 2.1 Initials
  contents:
  - "2.1 Initials\n   There are three popular formats based on initials: those with\
    \ one,\n   two, or three letters.  (The number of people with more than three\n\
    \   initials is assumed to be small.)  Values:\n           format            \
    \      typical         maximum\n           I                       4         \
    \      5\n           II                      8               10\n           III\
    \                     12              15\n   You can also think of these as first,\
    \ middle, and last initials:\n           I                       4           \
    \    5\n           F L                     8               10\n           F M\
    \ L                   12              15\n"
- title: 2.2 Names
  contents:
  - "2.2 Names\n   Again, there are three popular formats based on using names: those\n\
    \   with the first name, last name, and both first and last names.\n   Values:\n\
    \           format                  typical         maximum\n           First\
    \                   8               14\n           Last                    9 \
    \              13\n           First Last              17              27\n"
- title: 2.3 Combinations
  contents:
  - "2.3 Combinations\n   I have seen these combinations in use (\"F\" is first initial,\
    \ \"M\" is\n   middle initial, and \"L\" is last initial):\n           format\
    \                  typical         maximum\n           F Last                \
    \  13              18\n           F M Last                17              23\n\
    \           First L                 12              19\n           First M Last\
    \            21              32\n"
- title: 2.4 Complete List
  contents:
  - "2.4 Complete List\n   Here are all possible combinations of nothing, initial,\
    \ and full name\n   for first, middle, and last.  The number of Middle names is\
    \ assumed\n   to be the same as the number of First names.  Values:\n        \
    \   format                  typical         maximum\n           _ _ _        \
    \           0               0\n           _ _ L                   4          \
    \     5\n           _ _ Last                9               13\n           _ M\
    \ _                   4               5\n           _ M L                   5\
    \               10\n           _ M Last                13              18\n  \
    \         _ Middle _              8               14\n           _ Middle L  \
    \            12              19\n           _ Middle Last           17       \
    \       27\n           F _ _                   4               5\n           F\
    \ _ L                   5               10\n           F _ Last              \
    \  13              18\n           F M _                   5               10\n\
    \           F M L                   12              15\n           F M Last  \
    \              17              23\n           F Middle _              12     \
    \         19\n           F Middle L              16              24\n        \
    \   F Middle Last           21              32\n           First _ _         \
    \      8               14\n           First _ L               12             \
    \ 19\n           First _ Last            17              27\n           First\
    \ M _               12              19\n           First M L               16\
    \              24\n           First M Last            21              32\n   \
    \        First Middle _          16              28\n           First Middle L\
    \          20              33\n           First Middle Last       26         \
    \     40\n"
- title: 3. Probabilities of Duplicates
  contents:
  - "3. Probabilities of Duplicates\n   As can be seen, the information content in\
    \ these identifiers in no\n   case exceeds 40 bits and the typical information\
    \ content never\n   exceeds 26 bits.  The content of most of them is in the 8\
    \ to 20 bit\n   range.  Duplicates are thus not only possible but likely.\n  \
    \ The method used to compute the probability of duplicates is the same\n   as\
    \ that of the well-known \"birthday\" problem.  For a universe of N\n   items,\
    \ the probability of duplicates in X members is expressed by:\n           N  \
    \ N-1   N-2         N-(X-1)\n           - x --- x --- x ... x -------\n      \
    \     N    N     N             N\n   A program to compute this function for selected\
    \ values of N is given\n   in the appendix, as is its complete output.\n   The\
    \ \"1%\" column is the number of items (people) before an\n   organization of\
    \ that (universe) size has a 1% chance of a duplicate.\n   Similarly for 2%, 5%,\
    \ 10%, and 20%.\n           bits       universe     1%      2%      5%      10%\
    \     20%\n            6                 64   2       3       4       5      \
    \ 6\n            7                128   3       3       5       6       8\n  \
    \          8                256   3       4       6       8       12\n       \
    \     9                512   4       6       8       11      16\n           10\
    \              1,024   6       7       11      16      22\n           11     \
    \         2,048   7       10      15      22      31\n           12          \
    \    4,096   10      14      21      30      44\n           13              8,192\
    \   14      19      30      43      61\n           14             16,384   19\
    \      27      42      60      86\n           15             32,768   27     \
    \ 37      59      84      122\n           16             65,536   37      52 \
    \     83      118     172\n           17            131,072   52      74     \
    \ 117     167     243\n           18            262,144   74      104     165\
    \     236     343\n           19            524,288   104     147     233    \
    \ 333     485\n           20          1,048,576   146     207     329     471\
    \     685\n           21          2,097,152   206     292     465     666    \
    \ 968\n           22          4,194,304   291     413     657     941     1369\n\
    \           23          8,388,608   412     583     929     1330    1936\n   \
    \        24         16,777,216   582     824     1313    1881    2737\n      \
    \     25         33,554,432   822     1165    1856    2660    3871\n         \
    \  26         67,108,864   1162    1648    2625    3761    5474\n           27\
    \        134,217,728   1644    2330    3712    5319    7740\n           28   \
    \     268,435,456   2324    3294    5249    7522    10946\n           29     \
    \   536,870,912   3286    4659    7422    10637   15480\n           30      1,073,741,824\
    \   4647    6588    10496   15043   21891\n           31      2,147,483,648  \
    \ 6571    9316    14844   21273   30959\n   For example, assume an organization\
    \ were to select the \"First Last\"\n   form.  This form has 17 bits (typical)\
    \ and 27 bits (maximum) of\n   information.  The relevant line is:\n         \
    \  17            131,072   52      74      117     167     243\n   For an organization\
    \ with 100 people, the probability of a duplicate\n   would be between 2% and\
    \ 5% (probably around 4%).  If the organization\n   had 1,000 people, the probability\
    \ of a duplicate would be much\n   greater than 20%.\n"
- title: 'Appendix: Reuse of Identifiers and Privacy Issues'
  contents:
  - "Appendix: Reuse of Identifiers and Privacy Issues\n   Let's say that an organization\
    \ were to select the format:\n           First.M.Last-#\n   as my own organization\
    \ has.  Is the -# required, or can one simply\n   do:\n           Craig.A.Finseth\n\
    \   for the first one and\n           Craig.A.Finseth-2\n   (or -1) for the second?\
    \  The answer is \"no,\" although for non-obvious\n   reasons.\n   Assume that\
    \ the organization has made this selection and a third\n   party wants to send\
    \ e-mail to Craig.A.Finseth.  Because of the\n   Electronic Communications Privacy\
    \ Act of 1987, an organization must\n   treat electronic mail with care.  In this\
    \ case, there is no way for\n   the third party user to reliably know that sending\
    \ to Craig.A.Finseth\n   is (may be) the wrong party.  On the other hand, if the\
    \ -# suffix is\n   always present and attempts to send mail to the non-suffix\
    \ form are\n   rejected, the third party user will realize that they must have\
    \ the\n   suffix in order to have a unique identifier.\n   For similar reasons,\
    \ identifiers in this form should not be re-used\n   in the life of the mail system.\n"
- title: 'Appendix: Perl Program to Compute Probabilities'
  contents:
  - "Appendix: Perl Program to Compute Probabilities\n   #!/usr/local/bin/perl\n \
    \  for $bits (6..31) {\n           &Compute($bits);\n           }\n   exit(0);\n\
    \   # ------------------------------------------------------------\n   sub Compute\
    \ {\n           $bits = $_[0];\n           $num = 1 << $bits;\n           $cnt\
    \ = $num;\n           print \"bits $bitsnumber $num:0;\n           for ($prob\
    \ = 1; $prob > 0.99; ) {\n                   $prob *= $cnt / $num;\n         \
    \          $cnt--;\n                   }\n           print \"\", $num - $cnt,\
    \ \"$prob0;\n           for (; $prob > 0.98; ) {\n                   $prob *=\
    \ $cnt / $num;\n                   $cnt--;\n                   }\n           print\
    \ \"\", $num - $cnt, \"$prob0;\n           for (; $prob > 0.95; ) {\n        \
    \           $prob *= $cnt / $num;\n                   $cnt--;\n              \
    \     }\n           print \"\", $num - $cnt, \"$prob0;\n           for (; $prob\
    \ > 0.90; ) {\n                   $prob *= $cnt / $num;\n                   $cnt--;\n\
    \                   }\n           print \"\", $num - $cnt, \"$prob0;\n       \
    \    for (; $prob > 0.80; ) {\n                   $prob *= $cnt / $num;\n    \
    \               $cnt--;\n                   }\n           print \"\", $num - $cnt,\
    \ \"$prob0;\n           print \"0;\n           }\n"
- title: 'Appendix: Perl Program Output'
  contents:
  - "Appendix: Perl Program Output\n   bits 6  number 64:\n           2       0.984375\n\
    \           3       0.95361328125\n           4       0.90891265869140625\n  \
    \         5       0.85210561752319335938\n           6       0.78553486615419387817\n\
    \   bits 7  number 128:\n           3       0.9766845703125\n           3    \
    \   0.9766845703125\n           5       0.92398747801780700684\n           6 \
    \      0.88789421715773642063\n           8       0.79999355674331695809\n   bits\
    \ 8  number 256:\n           3       0.988311767578125\n           4       0.97672998905181884766\n\
    \           6       0.94268989971169503406\n           8       0.89542306910786462204\n\
    \           12      0.76969425214152431547\n   bits 9  number 512:\n         \
    \  4       0.98832316696643829346\n           6       0.97102570187075798458\n\
    \           8       0.94652632751096643648\n           11      0.89748056780293572476\n\
    \           16      0.78916761796439427457\n   bits 10 number 1024:\n        \
    \   6       0.98543241551841020964\n           7       0.97965839745873206645\n\
    \           11      0.94753115178840541244\n           16      0.88888866335604777014\n\
    \           22      0.79677613655632184564\n   bits 11 number 2048:\n        \
    \   7       0.98978773152834598203\n           10      0.97823367137821537476\n\
    \           15      0.94990722378677450166\n           22      0.89298119682681720288\n\
    \           31      0.79597589885472519455\n   bits 12 number 4096:\n        \
    \   10      0.98906539062491305447\n           14      0.97800426773009718762\n\
    \           21      0.94994111694430838355\n           30      0.89901365764115603874\n\
    \           44      0.79312138620093930452\n   bits 13 number 8192:\n        \
    \   14      0.98894703242829806733\n           19      0.97932692503837115439\n\
    \           30      0.94822407309193512681\n           43      0.89545741661906652631\n\
    \           61      0.7993625840767998314\n   bits 14 number 16384:\n        \
    \   19      0.98961337517641645434\n           27      0.97879319536756481668\n\
    \           42      0.94876352395820107155\n           60      0.89748107890372830209\n\
    \           86      0.79973683158771624591\n   bits 15 number 32768:\n       \
    \    27      0.98934263776790121181\n           37      0.97987304880641035165\n\
    \           59      0.94909471808051404373\n           84      0.89899774209805793923\n\
    \           122     0.79809378598190949816\n   bits 16 number 65536:\n       \
    \    37      0.98988724065590050216\n           52      0.97996496661944154649\n\
    \           83      0.94937874420413270737\n           118     0.89996948010355670711\n\
    \           172     0.79884228150816105618\n   bits 17 number 131072:\n      \
    \     52      0.98993311138884398925\n           74      0.97960010416289267088\n\
    \           117     0.94952974978505377823\n           167     0.89960828942716541956\n\
    \           243     0.79894309171178368167\n   bits 18 number 262144:\n      \
    \     74      0.98974844864797828503\n           104     0.97977315557223210174\n\
    \           165     0.94968621078621640041\n           236     0.8995926348279144058\n\
    \           343     0.7994422793765953994\n   bits 19 number 524288:\n       \
    \    104     0.98983557888923057178\n           147     0.97973841652874515962\n\
    \           233     0.94974719445364064185\n           333     0.89991342619657743729\n\
    \           485     0.79936749144148444568\n   bits 20 number 1048576:\n     \
    \      146     0.98995567500195758015\n           207     0.97987072919607220989\n\
    \           329     0.94983990872655321702\n           471     0.89980857451706741656\n\
    \           685     0.79974215234216872172\n   bits 21 number 2097152:\n     \
    \      206     0.98998177463778547214\n           292     0.97994400939715686771\n\
    \           465     0.94985589918092261374\n           666     0.89978055267663470396\n\
    \           968     0.79994886751736571373\n   bits 22 number 4194304:\n     \
    \      291     0.98999013137747737812\n           413     0.97991951242142538714\n\
    \           657     0.94991674892578203959\n           941     0.89991652739633254399\n\
    \           1369    0.79989205747440361716\n   bits 23 number 8388608:\n     \
    \      412     0.98995762604049764022\n           583     0.97997846530691334888\n\
    \           929     0.94991024716640248826\n           1330    0.89999961063320443877\n\
    \           1936    0.79987028265451087794\n   bits 24 number 16777216:\n    \
    \       582     0.98997307486745211857\n           824     0.97999203469417239809\n\
    \           1313    0.94995516684099989835\n           1881    0.89997049960675035152\n\
    \           2737    0.79996700222056416063\n   bits 25 number 33554432:\n    \
    \       822     0.98999408609360783906\n           1165    0.9799956928177964155\n\
    \           1856    0.9499899669674316538\n           2660    0.8999664414095410736\n\
    \           3871    0.79992328289672998132\n   bits 26 number 67108864:\n    \
    \       1162    0.98999884535478044345\n           1648    0.9799801637652703068\n\
    \           2625    0.94997437525354821997\n           3761    0.89999748465616635773\n\
    \           5474    0.79993922903192515861\n   bits 27 number 134217728:\n   \
    \        1644    0.9899880636014986024\n           2330    0.97998730103356856969\n\
    \           3712    0.94997727934463771504\n           5319    0.89998552434244594167\n\
    \           7740    0.79999591580103557309\n   bits 28 number 268435456:\n   \
    \        2324    0.98999458855588851058\n           3294    0.97999828329325222587\n\
    \           5249    0.94998397932368705554\n           7522    0.89998576049206902017\n\
    \           10946   0.79999058777500076101\n   bits 29 number 536870912:\n   \
    \        3286    0.98999717306002099626\n           4659    0.97999160965267329004\n\
    \           7422    0.94999720388831232487\n           10637   0.89999506567702891591\n\
    \           15480   0.7999860979665908145\n   bits 30 number 1073741824:\n   \
    \        4647    0.98999674474047760775\n           6588    0.97999531736215383937\n\
    \           10496   0.94999806770951356061\n           15043   0.89999250738244507275\n\
    \           21891   0.79999995570982085358\n   bits 31 number 2147483648:\n  \
    \         6571    0.98999869761078929109\n           9316    0.97999801528523688976\n\
    \           14844   0.94999403283519279206\n           21273   0.89999983631135749285\n\
    \           30959   0.79999272222201334159\n"
- title: References
  contents:
  - "References\n   Bruce Lansky (1984).  The Best Baby Name Book.  Deephaven, MN:\n\
    \   Meadowbrook.  ISBN 0-671-54463-2.\n   Lareina Rule (1988).  Name Your Baby.\
    \  Bantam.  ISBN 0-553-27145-8.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's  Address
  contents:
  - "Author's  Address\n   Craig A. Finseth\n   Networking Services\n   Computer and\
    \ Information Services\n   University of Minnesota\n   130 Lind Hall\n   207 Church\
    \ St. SE\n   Minneapolis, MN 55455-0134\n   EMail: Craig.A.Finseth-1@umn.edu or\n\
    \          fin@unet.umn.edu\n   Phone: +1 612 624 3375\n   Fax: +1 612 626 1002\n"
