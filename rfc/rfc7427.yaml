- title: __initial_text__
  contents:
  - ''
- title: Signature Authentication in the Internet Key Exchange Version 2 (IKEv2)
  contents:
  - 'Signature Authentication in the Internet Key Exchange Version 2 (IKEv2)

    '
- title: Abstract
  contents:
  - "Abstract\n   The Internet Key Exchange Version 2 (IKEv2) protocol has limited\n\
    \   support for the Elliptic Curve Digital Signature Algorithm (ECDSA).\n   The\
    \ current version only includes support for three Elliptic Curve\n   groups, and\
    \ there is a fixed hash algorithm tied to each group.  This\n   document generalizes\
    \ IKEv2 signature support to allow any signature\n   method supported by PKIX\
    \ and also adds signature hash algorithm\n   negotiation.  This is a generic mechanism\
    \ and is not limited to\n   ECDSA; it can also be used with other signature algorithms.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7427.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Authentication Payload  . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Hash Algorithm Notification . . . . . . . . . . . . . . .\
    \ . .   6\n   5.  Selecting the Public Key Algorithm  . . . . . . . . . . . .\
    \ .   7\n   6.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \   8\n   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  \
    \ 9\n   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n\
    \     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  10\n  \
    \   8.2.  Informative References  . . . . . . . . . . . . . . . . .  10\n   Appendix\
    \ A.  Commonly Used ASN.1 Objects  . . . . . . . . . . . .  12\n     A.1.  PKCS#1\
    \ 1.5 RSA Encryption . . . . . . . . . . . . . . . .  12\n       A.1.1.  sha1WithRSAEncryption\
    \ . . . . . . . . . . . . . . . .  12\n       A.1.2.  sha256WithRSAEncryption\
    \ . . . . . . . . . . . . . . .  12\n       A.1.3.  sha384WithRSAEncryption .\
    \ . . . . . . . . . . . . . .  13\n       A.1.4.  sha512WithRSAEncryption . .\
    \ . . . . . . . . . . . . .  13\n     A.2.  DSA . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  13\n       A.2.1.  dsa-with-sha1 . . . . . . . . .\
    \ . . . . . . . . . . .  13\n       A.2.2.  dsa-with-sha256 . . . . . . . . .\
    \ . . . . . . . . . .  14\n     A.3.  ECDSA . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  14\n       A.3.1.  ecdsa-with-sha1 . . . . . . . . . . .\
    \ . . . . . . . .  14\n       A.3.2.  ecdsa-with-sha256 . . . . . . . . . . .\
    \ . . . . . . .  14\n       A.3.3.  ecdsa-with-sha384 . . . . . . . . . . . .\
    \ . . . . . .  15\n       A.3.4.  ecdsa-with-sha512 . . . . . . . . . . . . .\
    \ . . . . .  15\n     A.4.  RSASSA-PSS  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  15\n       A.4.1.  RSASSA-PSS with Empty Parameters  . . . . . . .\
    \ . . .  15\n       A.4.2.  RSASSA-PSS with Default Parameters  . . . . . . .\
    \ . .  16\n       A.4.3.  RSASSA-PSS with SHA-256 . . . . . . . . . . . . . .\
    \ .  17\n   Appendix B.  IKEv2 Payload Example  . . . . . . . . . . . . . . .\
    \  17\n     B.1.  sha1WithRSAEncryption . . . . . . . . . . . . . . . . . .  17\n\
    \   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  18\n  \
    \ Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document adds a new IKEv2 [RFC7296] authentication\
    \ method to\n   support signature methods in a more general way.  The current\n\
    \   signature-based authentication methods in IKEv2 are per algorithm,\n   i.e.,\
    \ there is one for RSA digital signatures, one for DSS digital\n   signatures\
    \ (using SHA-1), and three for different ECDSA curves, each\n   tied to exactly\
    \ one hash algorithm.  This design is cumbersome when\n   more signature algorithms,\
    \ hash algorithms, and elliptic curves need\n   to be supported:\n   o  In IKEv2,\
    \ authentication using RSA digital signatures calls for\n      padding based on\
    \ RSASSA-PKCS1-v1_5, although the newer RSASSA-PSS\n      padding method is now\
    \ recommended.  (See Section 5 of \"Additional\n      Algorithms and Identifiers\
    \ for RSA Cryptography for use in PKIX\n      Profile\" [RFC4055].)\n   o  With\
    \ ECDSA and the Digital Signature Standard (DSS), there is no\n      way to extract\
    \ the hash algorithm from the signature.  Thus, for\n      each new hash function\
    \ to be supported with ECDSA or DSA, new\n      authentication methods would be\
    \ needed.  Support for new hash\n      functions is particularly needed for DSS,\
    \ because the current\n      restriction to SHA-1 limits its security, meaning\
    \ there is no\n      point of using long keys with SHA-1.\n   o  The tying of\
    \ ECDSA authentication methods to particular elliptic\n      curve groups requires\
    \ definition of additional methods for each\n      new group.  The combination\
    \ of new ECDSA groups and hash functions\n      will cause the number of required\
    \ authentication methods to become\n      unmanageable.  Furthermore, the restriction\
    \ of ECDSA\n      authentication to a specific group is inconsistent with the\n\
    \      approach taken with DSS.\n   With the selection of SHA-3, it might be possible\
    \ that a signature\n   method can be used with either SHA-3 or SHA-2.  This means\
    \ that a new\n   mechanism for negotiating the hash algorithm for a signature\n\
    \   algorithm is needed.\n   This document specifies two things:\n   1.  A new\
    \ authentication method that includes enough information\n       inside the Authentication\
    \ payload data so the signature hash\n       algorithm can be extracted (see Section\
    \ 3).\n   2.  A method to indicate supported signature hash algorithms (see\n\
    \       Section 4).  This allows the peer to know which hash algorithms\n    \
    \   are supported by the other end and use one of them (provided one\n       is\
    \ allowed by policy).  There is no requirement to actually\n       negotiate one\
    \ common hash algorithm, as different hash algorithms\n       can be used in different\
    \ directions if needed.\n   The new digital signature method is flexible enough\
    \ to include all\n   current signature methods (RSA, DSA, ECDSA, RSASSA-PSS, etc.)\
    \ and add\n   new methods (ECGDSA, ElGamal, etc.) in the future.  To support this\n\
    \   flexibility, the signature algorithm is specified in the same way\n   that\
    \ PKIX [RFC5280] specifies the signature of the Digital\n   Certificate, by placing\
    \ a simple ASN.1 object before the actual\n   signature data.  This ASN.1 object\
    \ contains an OID specifying the\n   algorithm and associated parameters.  When\
    \ an IKEv2 implementation\n   supports a fixed set of signature methods with commonly\
    \ used\n   parameters, it is acceptable for the implementation to treat the\n\
    \   ASN.1 object as a binary blob that can be compared against the fixed\n   set\
    \ of known values.  IKEv2 implementations can also parse the ASN.1\n   and extract\
    \ the signature algorithm and associated parameters.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Authentication Payload
  contents:
  - "3.  Authentication Payload\n   This document specifies a new \"Digital Signature\"\
    \ authentication\n   method.  This method can be used with any type of signature.\
    \  As the\n   authentication methods are not negotiated in IKEv2, the peer is\
    \ only\n   allowed to use this authentication method if the Notify payload of\n\
    \   type SIGNATURE_HASH_ALGORITHMS has been sent and received by each\n   peer.\n\
    \   In this authentication method, the Authentication Data field inside\n   the\
    \ Authentication payload does not just include the signature value,\n   as do\
    \ other existing IKEv2 Authentication payloads.  Instead, the\n   signature value\
    \ is prefixed with an ASN.1 object indicating the\n   algorithm used to generate\
    \ the signature.  The ASN.1 object contains\n   the algorithm identification OID,\
    \ which identifies both the signature\n   algorithm and the hash used when calculating\
    \ the signature.  In\n   addition to the OID, the ASN.1 object can contain optional\
    \ parameters\n   that might be needed for algorithms such as RSASSA-PSS (see\n\
    \   Section 8.1 of [RFC3447]).\n   To make implementations easier, the ASN.1 object\
    \ is prefixed by the\n   8-bit length field.  This length field allows simple\
    \ implementations\n   to know the length of the ASN.1 object without the need\
    \ to parse it,\n   so they can use it as a binary blob to be compared against\
    \ known\n   signature algorithm ASN.1 objects.  Thus, simple implementations may\n\
    \   not need to be able to parse or generate ASN.1 objects.  See\n   Appendix\
    \ A for commonly used ASN.1 objects.\n   The ASN.1 used here is the same ASN.1\
    \ used in the AlgorithmIdentifier\n   of PKIX (see Section 4.1.1.2 of [RFC5280]),\
    \ encoded using\n   distinguished encoding rules (DER) [CCITT.X690.2002].  The\
    \ algorithm\n   OID inside the ASN.1 specifies the signature algorithm and the\
    \ hash\n   function, both of which are needed for signature verification.\n  \
    \ Currently, only the RSASSA-PSS signature algorithm uses the optional\n   parameters.\
    \  For other signature algorithms, the parameters are\n   either NULL or missing.\
    \  Note that for some algorithms there are two\n   possible ASN.1 encodings, one\
    \ with optional parameters included but\n   set to NULL and the other where the\
    \ optional parameters are omitted.\n   These dual encodings exist because of the\
    \ way those algorithms are\n   specified.  When encoding the ASN.1, implementations\
    \ SHOULD use the\n   preferred format called for by the algorithm specification.\
    \  If the\n   algorithm specification says \"preferredPresent\", then the parameters\n\
    \   object needs to be present, although it will be NULL if no parameters\n  \
    \ are specified.  If the algorithm specification says\n   \"preferredAbsent\"\
    , then the entire optional parameters object is\n   missing.\n   The Authentication\
    \ payload is defined in IKEv2 as follows:\n                           1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Next Payload  |C|  RESERVED   |         Payload Length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Auth Method   |                RESERVED                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                      Authentication Data                      ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 1: Authentication Payload Format\n   o  Auth Method\
    \ (1 octet) - Specifies the method of authentication\n      used.\n      Mechanism\
    \                              Value\n      -----------------------------------------------------------------\n\
    \      Digital Signature                      14\n      Computed as specified\
    \ in Section 2.15 of [RFC7296] using a private\n      key associated with the\
    \ public key sent in the Certificate payload\n      and using one of the hash\
    \ algorithms sent by the other end in the\n      Notify payload of type SIGNATURE_HASH_ALGORITHMS.\
    \  If both ends\n      send and receive SIGNATURE_HASH_ALGORITHMS Notify payloads,\
    \ and\n      signature authentication is to be used, then the authentication\n\
    \      method specified in this Authentication payload MUST be used.  The\n  \
    \    format of the Authentication Data field is different from other\n      Authentication\
    \ methods and is specified below.\n   o  Authentication Data (variable length)\
    \ - See Section 2.15 of\n      [RFC7296].  For \"Digital Signature\" format, the\
    \ Authentication\n      Data is formatted as follows:\n                      \
    \     1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | ASN.1 Length  | AlgorithmIdentifier ASN.1 object              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \     AlgorithmIdentifier ASN.1 object continuing            ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                         Signature Value                       ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 2: Authentication Data Format\n      *  ASN.1 Length\
    \ (1 octet) - This field contains the length of the\n         ASN.1-encoded AlgorithmIdentifier\
    \ object.\n      *  Algorithm Identifier (variable length) - This field contains\n\
    \         the AlgorithmIdentifier ASN.1 object.\n      *  Signature Value (variable\
    \ length) - This field contains the\n         actual signature value.\n      There\
    \ is no padding between the ASN.1 object and the signature\n      value.  For\
    \ hash truncation, the method specified in ANSI\n      X9.62:2005 [X9.62] MUST\
    \ be used.\n"
- title: 4.  Hash Algorithm Notification
  contents:
  - "4.  Hash Algorithm Notification\n   The supported hash algorithms that can be\
    \ used for the signature\n   algorithms are indicated with a Notify payload of\
    \ type\n   SIGNATURE_HASH_ALGORITHMS sent inside the IKE_SA_INIT exchange.\n \
    \  This notification also implicitly indicates support of the new\n   \"Digital\
    \ Signature\" algorithm method, as well as the list of hash\n   functions supported\
    \ by the sending peer.\n   Both ends send their list of supported hash algorithms.\
    \  When\n   calculating the digital signature, a peer MUST pick one algorithm\n\
    \   sent by the other peer.  Note that different algorithms can be used\n   in\
    \ different directions.  The algorithm OID indicating the selected\n   hash algorithm\
    \ (and signature algorithm) used when calculating the\n   signature is sent inside\
    \ the Authentication Data field of the\n   Authentication payload (with Auth Method\
    \ of \"Digital Signature\" as\n   defined above).\n                          \
    \ 1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Next Payload  |C|  RESERVED   |         Payload Length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Protocol ID  |   SPI Size    |      Notify Message Type      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                Security Parameter Index (SPI)                 ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       Notification Data                       ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 3: Notify Payload Format\n   The Notify payload\
    \ format is defined in Section 3.10 of [RFC7296].\n   When a Notify payload of\
    \ type SIGNATURE_HASH_ALGORITHMS is sent, the\n   Protocol ID field is set to\
    \ 0, the SPI Size is set to 0, and the\n   Notify Message Type is set to 16431.\n\
    \   The Notification Data field contains the list of 16-bit hash\n   algorithm\
    \ identifiers from the Hash Algorithm Identifiers of IANA's\n   \"Internet Key\
    \ Exchange Version 2 (IKEv2) Parameters\" registry.  There\n   is no padding between\
    \ the hash algorithm identifiers.\n"
- title: 5.  Selecting the Public Key Algorithm
  contents:
  - "5.  Selecting the Public Key Algorithm\n   This specification does not provide\
    \ a way for the peers to indicate\n   the public/private key pair types they have.\
    \  This raises the\n   question of how the responder selects a public/private\
    \ key pair type\n   that the initiator supports.  This information can be found\
    \ by\n   several methods.\n   One method to signal the key the initiator wants\
    \ the responder to use\n   is to indicate that in the IDr (Identification - Responder)\
    \ payload\n   of the IKE_AUTH request sent by the initiator.  In this case, the\n\
    \   initiator indicates that it wants the responder to use a particular\n   public/private\
    \ key pair by sending an IDr payload that indicates that\n   information.  In\
    \ this case, the responder has different identities\n   configured, with each\
    \ of those identities associated to a public/\n   private key or key type.\n \
    \  Another method to ascertain the key the initiator wants the responder\n   to\
    \ use is through a Certificate Request payload sent by the\n   initiator.  For\
    \ example, the initiator could indicate in the\n   Certificate Request payload\
    \ that it trusts a certificate authority\n   certificate signed by an ECDSA key.\
    \  This indication implies that the\n   initiator can process ECDSA signatures,\
    \ which means that the\n   responder can safely use ECDSA keys when authenticating.\n\
    \   A third method is for the responder to check the key type used by the\n  \
    \ initiator and use the same key type that the initiator used.  This\n   method\
    \ does not work if the initiator is using shared secret or\n   Extensible Authentication\
    \ Protocol (EAP) authentication (i.e., is not\n   using public keys).  If the\
    \ initiator is using public key\n   authentication, this method is the best way\
    \ for the responder to\n   ascertain the type of key the initiator supports.\n\
    \   If the initiator uses a public key type that the responder does not\n   support,\
    \ the responder replies with a Notify message with error type\n   AUTHENTICATION_FAILED.\
    \  If the initiator has multiple different keys,\n   it may try a different key\
    \ (and perhaps a different key type) until\n   it finds a key that the other end\
    \ accepts.  The initiator can also\n   use the Certificate Request payload sent\
    \ by the responder to help\n   decide which public key should be tried.  In normal\
    \ cases, when the\n   initiator has multiple public keys, out-of-band configuration\
    \ is used\n   to select a public key for each connection.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Tables 2 and 3 of the \"Recommendations for Key\
    \ Management\"\n   [NIST800-57] give recommendations for how to select suitable\
    \ hash\n   functions for the signature.\n   This new digital signature method\
    \ does not tie the Elliptic Curve to\n   a specific hash function, which was done\
    \ in the old IKEv2 ECDSA\n   methods.  This means it is possible to mix different\
    \ security levels.\n   For example, it is possible to use a 512-bit Elliptic Curve\
    \ with\n   SHA1.  This means that the security of the authentication method is\n\
    \   the security of the weakest component (signature algorithm, hash\n   algorithm,\
    \ or curve).  This complicates the security analysis of the\n   system.\n   IKEv2\
    \ peers have a series of policy databases (see Section 4.4 of\n   [RFC4301]) that\
    \ define which security algorithms and methods should\n   be used during establishment\
    \ of security associations.  To help end\n   users select the desired security\
    \ levels for communications protected\n   by IPsec, implementers may wish to provide\
    \ a mechanism in the IKE\n   policy databases to limit the mixing of security\
    \ levels or to\n   restrict combinations of protocols.\n   Security downgrade\
    \ attacks, where more secure methods are deleted or\n   modified from a payload\
    \ by a man-in-the-middle to force lower levels\n   of security, are not a significant\
    \ concern in IKEv2 Authentication\n   payloads, as discussed in this RFC.  This\
    \ is because a modified AUTH\n   payload will be detected when the peer computes\
    \ a signature over the\n   IKE messages.\n   One specific class of downgrade attacks\
    \ requires selection of\n   catastrophically weak ciphers.  In this type of attack,\
    \ the man-in-\n   the-middle attacker is able to \"break\" the cryptography in\
    \ real time.\n   This type of downgrade attack should be blocked by policy regarding\n\
    \   cipher algorithm selection, as discussed above.\n   The hash algorithm registry\
    \ does not include MD5 as a supported hash\n   algorithm, as it is not considered\
    \ safe enough for signature use\n   [WY05].\n   The current IKEv2 protocol uses\
    \ RSASSA-PKCS1-v1_5, which has known\n   security vulnerabilities [KA08] [ME01]\
    \ and does not allow using newer\n   padding methods such as RSASSA-PSS.  The\
    \ new method described in this\n   RFC allows the use of other padding methods.\n\
    \   The current IKEv2 protocol only allows use of normal DSA with SHA-1,\n   which\
    \ means the security of the authentication is limited to the\n   security of SHA-1.\
    \  This new method allows using longer keys and\n   longer hashes with DSA.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document creates a new IANA registry for IKEv2\
    \ Hash Algorithms.\n   Changes and additions to this registry are by Expert Review\n\
    \   [RFC5226].\n   The initial values of this registry are:\n   Hash Algorithm\
    \                       Value\n   --------------                       -----\n\
    \   RESERVED                             0\n   SHA1                          \
    \       1\n   SHA2-256                             2\n   SHA2-384            \
    \                 3\n   SHA2-512                             4\n   MD5 is not\
    \ included in the hash algorithm list, as it is not\n   considered safe enough\
    \ for signature hash uses.\n   Values 5-1023 are Unassigned.  Values 1024-65535\
    \ are reserved for\n   Private Use among mutually consenting parties.\n   This\
    \ specification also adds a new value for\n   SIGNATURE_HASH_ALGORITHMS (16431)\
    \ to the \"IKEv2 Notify Message Types\n   - Status Types\" registry and adds a\
    \ new value for Digital Signature\n   (14) to the \"IKEv2 Authentication Method\"\
    \ registry.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n   [RFC7296]\
    \  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.\n              Kivinen,\
    \ \"Internet Key Exchange Protocol Version 2\n              (IKEv2)\", RFC 7296,\
    \ October 2014,\n              <http://www.rfc-editor.org/info/rfc7296>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [CCITT.X690.2002]\n              International\
    \ Telephone and Telegraph Consultative\n              Committee, \"ASN.1 encoding\
    \ rules: Specification of basic\n              encoding Rules (BER), Canonical\
    \ encoding rules (CER) and\n              Distinguished encoding rules (DER)\"\
    , CCITT Recommendation\n              X.690, July 2002.\n   [KA08]     Kuehn,\
    \ U., Pyshkin, A., Tews, E., and R. Weinmann,\n              \"Variants of Bleichenbacher's\
    \ Low-Exponent Attack on\n              PKCS#1 RSA Signatures\", Proceedings of\
    \ Sicherheit 2008,\n              pp.97-109, 2008.\n   [ME01]     Menezes, A.,\
    \ \"Evaluation of Security Level of\n              Cryptography: RSA-OAEP, RSA-PSS,\
    \ RSA Signature\", December\n              2001.\n   [NIST800-57]\n          \
    \    Barker, E., Barker, W., Burr, W., Polk, W., and M. Smid,\n              \"\
    Recommendation for Key Management - Part 1: General\n              (Revised)\"\
    , NIST Special Publication 800-57, March 2007.\n   [RFC3279]  Bassham, L., Polk,\
    \ W., and R. Housley, \"Algorithms and\n              Identifiers for the Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 3279, April 2002,\n              <http://www.rfc-editor.org/info/rfc3279>.\n\
    \   [RFC3447]  Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n       \
    \       Standards (PKCS) #1: RSA Cryptography Specifications\n              Version\
    \ 2.1\", RFC 3447, February 2003,\n              <http://www.rfc-editor.org/info/rfc3447>.\n\
    \   [RFC4055]  Schaad, J., Kaliski, B., and R. Housley, \"Additional\n       \
    \       Algorithms and Identifiers for RSA Cryptography for use in\n         \
    \     the Internet X.509 Public Key Infrastructure Certificate\n             \
    \ and Certificate Revocation List (CRL) Profile\", RFC 4055,\n              June\
    \ 2005, <http://www.rfc-editor.org/info/rfc4055>.\n   [RFC4301]  Kent, S. and\
    \ K. Seo, \"Security Architecture for the\n              Internet Protocol\",\
    \ RFC 4301, December 2005,\n              <http://www.rfc-editor.org/info/rfc4301>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs)\", BCP 26, RFC 5226,\n      \
    \        May 2008, <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5480]  Turner,\
    \ S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n              \"Elliptic\
    \ Curve Cryptography Subject Public Key\n              Information\", RFC 5480,\
    \ March 2009,\n              <http://www.rfc-editor.org/info/rfc5480>.\n   [RFC5758]\
    \  Dang, Q., Santesson, S., Moriarty, K., Brown, D., and T.\n              Polk,\
    \ \"Internet X.509 Public Key Infrastructure:\n              Additional Algorithms\
    \ and Identifiers for DSA and ECDSA\",\n              RFC 5758, January 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5758>.\n   [RFC5912]  Hoffman,\
    \ P. and J. Schaad, \"New ASN.1 Modules for the\n              Public Key Infrastructure\
    \ Using X.509 (PKIX)\", RFC 5912,\n              June 2010, <http://www.rfc-editor.org/info/rfc5912>.\n\
    \   [WY05]     Wang, X. and H. Yu, \"How to break MD5 and other hash\n       \
    \       functions\", Proceedings of EuroCrypt 2005, Lecture Notes\n          \
    \    in Computer Science Vol. 3494, 2005.\n   [X9.62]    American National Standards\
    \ Institute, \"Public Key\n              Cryptography for the Financial Services\
    \ Industry: The\n              Elliptic Curve Digital Signature Algorithm (ECDSA)\"\
    , ANSI\n              X9.62, November 2005.\n"
- title: Appendix A.  Commonly Used ASN.1 Objects
  contents:
  - "Appendix A.  Commonly Used ASN.1 Objects\n   This section lists commonly used\
    \ ASN.1 objects in binary form.  This\n   section is not normative, and these\
    \ values should only be used as\n   examples.  If the ASN.1 object listed in Appendix\
    \ A and the ASN.1\n   object specified by the algorithm differ, then the algorithm\n\
    \   specification must be used.  These values are taken from \"New ASN.1\n   Modules\
    \ for the Public Key Infrastructure Using X.509 (PKIX)\"\n   [RFC5912].\n"
- title: A.1.  PKCS#1 1.5 RSA Encryption
  contents:
  - "A.1.  PKCS#1 1.5 RSA Encryption\n   The algorithm identifiers here include several\
    \ different ASN.1\n   objects with different hash algorithms.  This document only\
    \ includes\n   the commonly used ones, i.e., the ones using SHA-1 or SHA-2 as\
    \ the\n   hash function.  Some other algorithms (such as MD2 and MD5) are not\n\
    \   safe enough to be used as signature hash algorithms and are omitted.\n   The\
    \ IANA registry does not have code points for these other\n   algorithms with\
    \ RSA Encryption.  Note that there are no optional\n   parameters in any of these\
    \ algorithm identifiers, but all included\n   here need NULL optional parameters\
    \ present in the ASN.1.\n   See \"Algorithms and Identifiers for PKIX Profile\"\
    \ [RFC3279] and\n   \"Additional Algorithms and Identifiers for RSA Cryptography\
    \ for use\n   in the Internet X.509 Public Key Infrastructure Certificate and\n\
    \   Certificate Revocation List (CRL) Profile\" [RFC4055] for more\n   information.\n"
- title: A.1.1.  sha1WithRSAEncryption
  contents:
  - "A.1.1.  sha1WithRSAEncryption\n   sha1WithRSAEncryption OBJECT IDENTIFIER ::=\
    \ { iso(1) member-body(2)\n   us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 5 }\n \
    \  Parameters are required, and they must be NULL.\n   Name = sha1WithRSAEncryption,\
    \ oid = 1.2.840.113549.1.1.5\n   Length = 15\n   0000: 300d 0609 2a86 4886 f70d\
    \ 0101 0505 00\n"
- title: A.1.2.  sha256WithRSAEncryption
  contents:
  - "A.1.2.  sha256WithRSAEncryption\n   sha256WithRSAEncryption OBJECT IDENTIFIER\
    \ ::= { pkcs-1 11 }\n   Parameters are required, and they must be NULL.\n   Name\
    \ = sha256WithRSAEncryption, oid = 1.2.840.113549.1.1.11\n   Length = 15\n   0000:\
    \ 300d 0609 2a86 4886 f70d 0101 0b05 00\n"
- title: A.1.3.  sha384WithRSAEncryption
  contents:
  - "A.1.3.  sha384WithRSAEncryption\n   sha384WithRSAEncryption OBJECT IDENTIFIER\
    \ ::= { pkcs-1 12 }\n   Parameters are required, and they must be NULL.\n   Name\
    \ = sha384WithRSAEncryption, oid = 1.2.840.113549.1.1.12\n   Length = 15\n   0000:\
    \ 300d 0609 2a86 4886 f70d 0101 0c05 00\n"
- title: A.1.4.  sha512WithRSAEncryption
  contents:
  - "A.1.4.  sha512WithRSAEncryption\n   sha512WithRSAEncryption OBJECT IDENTIFIER\
    \ ::= { pkcs-1 13 }\n   Parameters are required, and they must be NULL.\n   Name\
    \ = sha512WithRSAEncryption, oid = 1.2.840.113549.1.1.13\n   Length = 15\n   0000:\
    \ 300d 0609 2a86 4886 f70d 0101 0d05 00\n"
- title: A.2.  DSA
  contents:
  - "A.2.  DSA\n   With DSA algorithms, optional parameters are always omitted.  Only\n\
    \   algorithm combinations for DSA that are listed in the IANA registry\n   are\
    \ included.\n   See \"Algorithms and Identifiers for PKIX Profile\" [RFC3279]\
    \ and \"PKIX\n   Additional Algorithms and Identifiers for DSA and ECDSA\" [RFC5758]\n\
    \   for more information.\n"
- title: A.2.1.  dsa-with-sha1
  contents:
  - "A.2.1.  dsa-with-sha1\n   dsa-with-sha1 OBJECT IDENTIFIER ::= { iso(1) member-body(2)\
    \ us(840)\n   x9-57(10040) x9algorithm(4) 3 }\n   Parameters are absent.\n   Name\
    \ = dsa-with-sha1, oid = 1.2.840.10040.4.3\n   Length = 11\n   0000: 3009 0607\
    \ 2a86 48ce 3804 03\n"
- title: A.2.2.  dsa-with-sha256
  contents:
  - "A.2.2.  dsa-with-sha256\n   dsa-with-sha256 OBJECT IDENTIFIER ::= { joint-iso-ccitt(2)\n\
    \   country(16) us(840) organization(1) gov(101) csor(3) algorithms(4)\n   id-dsa-with-sha2(3)\
    \ 2 }\n   Parameters are absent.\n   Name = dsa-with-sha256, oid = 2.16.840.1.101.3.4.3.2\n\
    \   Length = 13\n   0000: 300b 0609 6086 4801 6503 0403 02\n"
- title: A.3.  ECDSA
  contents:
  - "A.3.  ECDSA\n   With ECDSA algorithms, the optional parameters are always omitted.\n\
    \   Only algorithm combinations for the ECDSA listed in the IANA registry\n  \
    \ are included.\n   See \"Elliptic Curve Cryptography Subject Public Key Information\"\
    \n   [RFC5480], \"Algorithms and Identifiers for PKIX Profile\" [RFC3279],\n \
    \  and \"PKIX Additional Algorithms and Identifiers for DSA and ECDSA\"\n   [RFC5758]\
    \ for more information.\n"
- title: A.3.1.  ecdsa-with-sha1
  contents:
  - "A.3.1.  ecdsa-with-sha1\n   ecdsa-with-SHA1 OBJECT IDENTIFIER ::= { iso(1) member-body(2)\
    \ us(840)\n   ansi-X9-62(10045) signatures(4) 1 }\n   Parameters are absent.\n\
    \   Name = ecdsa-with-sha1, oid = 1.2.840.10045.4.1\n   Length = 11\n   0000:\
    \ 3009 0607 2a86 48ce 3d04 01\n"
- title: A.3.2.  ecdsa-with-sha256
  contents:
  - "A.3.2.  ecdsa-with-sha256\n   ecdsa-with-SHA256 OBJECT IDENTIFIER ::= { iso(1)\
    \ member-body(2)\n   us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3)\
    \ 2 }\n   Parameters are absent.\n   Name = ecdsa-with-sha256, oid = 1.2.840.10045.4.3.2\n\
    \   Length = 12\n   0000: 300a 0608 2a86 48ce 3d04 0302\n"
- title: A.3.3.  ecdsa-with-sha384
  contents:
  - "A.3.3.  ecdsa-with-sha384\n   ecdsa-with-SHA384 OBJECT IDENTIFIER ::= { iso(1)\
    \ member-body(2)\n   us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3)\
    \ 3 }\n   Parameters are absent.\n   Name = ecdsa-with-sha384, oid = 1.2.840.10045.4.3.3\n\
    \   Length = 12\n   0000: 300a 0608 2a86 48ce 3d04 0303\n"
- title: A.3.4.  ecdsa-with-sha512
  contents:
  - "A.3.4.  ecdsa-with-sha512\n   ecdsa-with-SHA512 OBJECT IDENTIFIER ::= { iso(1)\
    \ member-body(2)\n   us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3)\
    \ 4 }\n   Parameters are absent.\n   Name = ecdsa-with-sha512, oid = 1.2.840.10045.4.3.4\n\
    \   Length = 12\n   0000: 300a 0608 2a86 48ce 3d04 0304\n"
- title: A.4.  RSASSA-PSS
  contents:
  - "A.4.  RSASSA-PSS\n   With RSASSA-PSS, the algorithm object identifier must always\
    \ be\n   id-RSASSA-PSS, and the hash function and padding parameters are\n   conveyed\
    \ in the parameters (which are not optional in this case).\n   See Additional\
    \ RSA Algorithms and Identifiers [RFC4055] for more\n   information.\n"
- title: A.4.1.  RSASSA-PSS with Empty Parameters
  contents:
  - "A.4.1.  RSASSA-PSS with Empty Parameters\n   id-RSASSA-PSS OBJECT IDENTIFIER\
    \ ::= { pkcs-1 10 }\n   Parameters are empty, but the ASN.1 part of the sequence\
    \ must be\n   present.  This means default parameters are used.\n   0000 : SEQUENCE\n\
    \   0002 :   OBJECT IDENTIFIER  RSASSA-PSS (1.2.840.113549.1.1.10)\n   000d :\
    \   SEQUENCE\n   Length = 15\n   0000: 300d 0609 2a86 4886 f70d 0101 0a30 00\n"
- title: A.4.2.  RSASSA-PSS with Default Parameters
  contents:
  - "A.4.2.  RSASSA-PSS with Default Parameters\n   id-RSASSA-PSS OBJECT IDENTIFIER\
    \ ::= { pkcs-1 10 }\n   Here the parameters are present and contain the default\
    \ parameters,\n   i.e., hashAlgorithm of SHA-1, maskGenAlgorithm of mgf1SHA1,\n\
    \   saltLength of 20, and trailerField of 1.\n   0000 : SEQUENCE\n   0002 :  \
    \ OBJECT IDENTIFIER  RSASSA-PSS (1.2.840.113549.1.1.10)\n   000d :   SEQUENCE\n\
    \   000f :     CONTEXT 0\n   0011 :       SEQUENCE\n   0013 :         OBJECT IDENTIFIER\
    \  id-sha1 (1.3.14.3.2.26)\n   001a :         NULL\n   001c :     CONTEXT 1\n\
    \   001e :       SEQUENCE\n   0020 :         OBJECT IDENTIFIER  1.2.840.113549.1.1.8\n\
    \   002b :         SEQUENCE\n   002d :           OBJECT IDENTIFIER  id-sha1 (1.3.14.3.2.26)\n\
    \   0034 :           NULL\n   0036 :     CONTEXT 2\n   0038 :       INTEGER  \
    \ 0x14 (5 bits)\n   003b :     CONTEXT 3\n   003d :       INTEGER   0x1 (1 bits)\n\
    \   Name = RSASSA-PSS with default parameters,\n          oid = 1.2.840.113549.1.1.10\n\
    \   Length = 64\n   0000: 303e 0609 2a86 4886 f70d 0101 0a30 31a0\n   0010: 0b30\
    \ 0906 052b 0e03 021a 0500 a118 3016\n   0020: 0609 2a86 4886 f70d 0101 0830 0906\
    \ 052b\n   0030: 0e03 021a 0500 a203 0201 14a3 0302 0101\n"
- title: A.4.3.  RSASSA-PSS with SHA-256
  contents:
  - "A.4.3.  RSASSA-PSS with SHA-256\n   id-RSASSA-PSS OBJECT IDENTIFIER ::= { pkcs-1\
    \ 10 }\n   Here the parameters are present and contain hashAlgorithm of SHA-256,\n\
    \   maskGenAlgorithm of SHA-256, saltLength of 32, and trailerField of 1.\n  \
    \ 0000 : SEQUENCE\n   0002 :   OBJECT IDENTIFIER  RSASSA-PSS (1.2.840.113549.1.1.10)\n\
    \   000d :   SEQUENCE\n   000f :     CONTEXT 0\n   0011 :       SEQUENCE\n   0013\
    \ :         OBJECT IDENTIFIER  id-sha256 (2.16.840.1.101.3.4.2.1)\n   001e : \
    \        NULL\n   0020 :     CONTEXT 1\n   0022 :       SEQUENCE\n   0024 :  \
    \       OBJECT IDENTIFIER  1.2.840.113549.1.1.8\n   002f :         SEQUENCE\n\
    \   0031 :           OBJECT IDENTIFIER id-sha256 (2.16.840.1.101.3.4.2.1)\n  \
    \ 003c :           NULL\n   003e :     CONTEXT 2\n   0040 :       INTEGER   0x20\
    \ (6 bits)\n   0043 :     CONTEXT 3\n   0045 :       INTEGER   0x1 (1 bits)\n\
    \   Name = RSASSA-PSS with sha-256, oid = 1.2.840.113549.1.1.10\n   Length = 72\n\
    \   0000: 3046 0609 2a86 4886 f70d 0101 0a30 39a0\n   0010: 0f30 0d06 0960 8648\
    \ 0165 0304 0201 0500\n   0020: a11c 301a 0609 2a86 4886 f70d 0101 0830\n   0030:\
    \ 0d06 0960 8648 0165 0304 0201 0500 a203\n   0040: 0201 20a3 0302 0101\n"
- title: Appendix B.  IKEv2 Payload Example
  contents:
  - 'Appendix B.  IKEv2 Payload Example

    '
- title: B.1.  sha1WithRSAEncryption
  contents:
  - "B.1.  sha1WithRSAEncryption\n   The IKEv2 AUTH payload would start like this:\n\
    \   00000000: NN00 00LL 0e00 0000 0f30 0d06 092a 8648\n   00000010: 86f7 0d01\
    \ 0105 0500 ....\n   Where the NN will be the next payload type (i.e., the value\
    \ depends\n   on the next payload after this Authentication payload), the LL will\n\
    \   be the length of this payload, and after the sha1WithRSAEncryption\n   ASN.1\
    \ block (15 bytes) there will be the actual signature, which is\n   omitted here.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Most of this work was based on the work done in the IPsecME\
    \ design\n   team for the ECDSA.  The design team members were: Dan Harkins,\n\
    \   Johannes Merkle, Tero Kivinen, David McGrew, and Yoav Nir.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tero Kivinen\n   INSIDE Secure\n   Eerikinkatu 28\n  \
    \ Helsinki  FI-00180\n   Finland\n   EMail: kivinen@iki.fi\n   Joel Snyder\n \
    \  Opus One\n   1404 East Lind Road\n   Tucson, AZ  85719\n   Phone: +1 520 324\
    \ 0494\n   EMail: jms@opus1.com\n"
