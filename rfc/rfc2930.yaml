- contents:
  - '               Secret Key Establishment for DNS (TKEY RR)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   [RFC 2845] provides a means of authenticating Domain Name System\n
    \  (DNS) queries and responses using shared secret keys via the\n   Transaction
    Signature (TSIG) resource record (RR).  However, it\n   provides no mechanism
    for setting up such keys other than manual\n   exchange. This document describes
    a Transaction Key (TKEY) RR that\n   can be used in a number of different modes
    to establish shared secret\n   keys between a DNS resolver and server.\n"
  title: Abstract
- contents:
  - "Acknowledgments\n   The comments and ideas of the following persons (listed in
    alphabetic\n   order) have been incorporated herein and are gratefully acknowledged:\n
    \        Olafur Gudmundsson (TIS)\n         Stuart Kwan (Microsoft)\n         Ed
    Lewis (TIS)\n         Erik Nordmark (SUN)\n         Brian Wellington (Nominum)\n"
  title: Acknowledgments
- contents:
  - "Table of Contents\n   1. Introduction...............................................
    \ 2\n   1.1 Overview of Contents......................................  3\n   2.
    The TKEY Resource Record...................................  4\n   2.1 The Name
    Field............................................  4\n   2.2 The TTL Field.............................................
    \ 5\n   2.3 The Algorithm Field.......................................  5\n   2.4
    The Inception and Expiration Fields.......................  5\n   2.5 The Mode
    Field............................................  5\n   2.6 The Error Field...........................................
    \ 6\n   2.7 The Key Size and Data Fields..............................  6\n   2.8
    The Other Size and Data Fields............................  6\n   3. General TKEY
    Considerations................................  7\n   4. Exchange via Resolver
    Query................................  8\n   4.1 Query for Diffie-Hellman Exchanged
    Keying.................  8\n   4.2 Query for TKEY Deletion...................................
    \ 9\n   4.3 Query for GSS-API Establishment........................... 10\n   4.4
    Query for Server Assigned Keying.......................... 10\n   4.5 Query for
    Resolver Assigned Keying........................ 11\n   5. Spontaneous Server
    Inclusion............................... 12\n   5.1 Spontaneous Server Key Deletion...........................
    12\n   6. Methods of Encryption...................................... 12\n   7.
    IANA Considerations........................................ 13\n   8. Security
    Considerations.................................... 13\n   References....................................................
    14\n   Author's Address.............................................. 15\n   Full
    Copyright Statement...................................... 16\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   The Domain Name System (DNS) is a hierarchical, distributed,
    highly\n   available database used for bi-directional mapping between domain\n
    \  names and addresses, for email routing, and for other information\n   [RFC
    1034, 1035].  It has been extended to provide for public key\n   security and
    dynamic update [RFC 2535, RFC 2136].  Familiarity with\n   these RFCs is assumed.\n
    \  [RFC 2845] provides a means of efficiently authenticating DNS\n   messages
    using shared secret keys via the TSIG resource record (RR)\n   but provides no
    mechanism for setting up such keys other than manual\n   exchange. This document
    specifies a TKEY RR that can be used in a\n   number of different modes to establish
    and delete such shared secret\n   keys between a DNS resolver and server.\n   Note
    that TKEY established keying material and TSIGs that use it are\n   associated
    with DNS servers or resolvers.  They are not associated\n   with zones.  They
    may be used to authenticate queries and responses\n   but they do not provide
    zone based DNS data origin or denial\n   authentication [RFC 2535].\n   Certain
    modes of TKEY perform encryption which may affect their\n   export or import status
    for some countries.  The affected modes\n   specified in this document are the
    server assigned mode and the\n   resolver assigned mode.\n   The key words \"MUST\",
    \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are to
    be interpreted as described in [RFC 2119].\n   In all cases herein, the term \"resolver\"
    includes that part of a\n   server which may make full and incremental [RFC 1995]
    zone transfer\n   queries, forwards recursive queries, etc.\n"
  - contents:
    - "1.1 Overview of Contents\n   Section 2 below specifies the TKEY RR and provides
      a description of\n   and considerations for its constituent fields.\n   Section
      3 describes general principles of operations with TKEY.\n   Section 4 discusses
      key agreement and deletion via DNS requests with\n   the Query opcode for RR
      type TKEY.  This method is applicable to all\n   currently defined TKEY modes,
      although in some cases it is not what\n   would intuitively be called a \"query\".\n
      \  Section 5 discusses spontaneous inclusion of TKEY RRs in responses by\n   servers
      which is currently used only for key deletion.\n   Section 6 describes encryption
      methods for transmitting secret key\n   information. In this document these
      are used only for the server\n   assigned mode and the resolver assigned mode.\n
      \  Section 7 covers IANA considerations in assignment of TKEY modes.\n   Finally,
      Section 8 provides the required security considerations\n   section.\n"
    title: 1.1 Overview of Contents
  title: 1. Introduction
- contents:
  - "2. The TKEY Resource Record\n   The TKEY resource record (RR) has the structure
    given below.  Its RR\n   type code is 249.\n      Field       Type         Comment\n
    \     -----       ----         -------\n      NAME         domain      see description
    below\n      TTYPE        u_int16_t   TKEY = 249\n      CLASS        u_int16_t
    \  ignored, SHOULD be 255 (ANY)\n      TTL          u_int32_t   ignored, SHOULD
    be zero\n      RDLEN        u_int16_t   size of RDATA\n      RDATA:\n       Algorithm:
    \  domain\n       Inception:   u_int32_t\n       Expiration:  u_int32_t\n       Mode:
    \       u_int16_t\n       Error:       u_int16_t\n       Key Size:    u_int16_t\n
    \      Key Data:    octet-stream\n       Other Size:  u_int16_t\n       Other
    Data:  octet-stream  undefined by this specification\n"
  - contents:
    - "2.1 The Name Field\n   The Name field relates to naming keys.  Its meaning
      differs somewhat\n   with mode and context as explained in subsequent sections.\n
      \  At any DNS server or resolver only one octet string of keying\n   material
      may be in place for any particular key name.  An attempt to\n   establish another
      set of keying material at a server for an existing\n   name returns a BADNAME
      error.\n   For a TKEY with a non-root name appearing in a query, the TKEY RR\n
      \  name SHOULD be a domain locally unique at the resolver, less than 128\n   octets
      long in wire encoding, and meaningful to the resolver to\n   assist in distinguishing
      keys and/or key agreement sessions.   For\n   TKEY(s) appearing in a response
      to a query, the TKEY RR name SHOULD\n   be a globally unique server assigned
      domain.\n   A reasonable key naming strategy is as follows:\n      If the key
      is generated as the result of a query with root as its\n      owner name, then
      the server SHOULD create a globally unique domain\n      name, to be the key
      name, by suffixing a pseudo-random [RFC 1750]\n      label with a domain name
      of the server.  For example\n      89n3mDgX072pp.server1.example.com.  If generation
      of a new\n      pseudo-random name in each case is an excessive computation
      load\n      or entropy drain, a serial number prefix can be added to a fixed\n
      \     pseudo-random name generated an DNS server start time, such as\n      1001.89n3mDgX072pp.server1.example.com.\n
      \     If the key is generated as the result of a query with a non-root\n      name,
      say 789.resolver.example.net, then use the concatenation of\n      that with
      a name of the server.  For example\n      789.resolver.example.net.server1.example.com.\n"
    title: 2.1 The Name Field
  - contents:
    - "2.2 The TTL Field\n   The TTL field is meaningless in TKEY RRs. It SHOULD always
      be zero to\n   be sure that older DNS implementations do not cache TKEY RRs.\n"
    title: 2.2 The TTL Field
  - contents:
    - "2.3 The Algorithm Field\n   The algorithm name is in the form of a domain name
      with the same\n   meaning as in [RFC 2845].  The algorithm determines how the
      secret\n   keying material agreed to using the TKEY RR is actually used to\n
      \  derive the algorithm specific key.\n"
    title: 2.3 The Algorithm Field
  - contents:
    - "2.4 The Inception and Expiration Fields\n   The inception time and expiration
      times are in number of seconds\n   since the beginning of 1 January 1970 GMT
      ignoring leap seconds\n   treated as modulo 2**32 using ring arithmetic [RFC
      1982]. In messages\n   between a DNS resolver and a DNS server where these fields
      are\n   meaningful, they are either the requested validity interval for the\n
      \  keying material asked for or specify the validity interval of keying\n   material
      provided.\n   To avoid different interpretations of the inception and expiration\n
      \  times in TKEY RRs, resolvers and servers exchanging them must have\n   the
      same idea of what time it is.  One way of doing this is with the\n   NTP protocol
      [RFC 2030] but that or any other time synchronization\n   used for this purpose
      MUST be done securely.\n"
    title: 2.4 The Inception and Expiration Fields
  - contents:
    - "2.5 The Mode Field\n   The mode field specifies the general scheme for key
      agreement or the\n   purpose of the TKEY DNS message.  Servers and resolvers
      supporting\n   this specification MUST implement the Diffie-Hellman key agreement\n
      \  mode and the key deletion mode for queries.  All other modes are\n   OPTIONAL.
      \ A server supporting TKEY that receives a TKEY request with\n   a mode it does
      not support returns the BADMODE error.  The following\n   values of the Mode
      octet are defined, available, or reserved:\n         Value    Description\n
      \        -----    -----------\n          0        - reserved, see section 7\n
      \         1       server assignment\n          2       Diffie-Hellman exchange\n
      \         3       GSS-API negotiation\n          4       resolver assignment\n
      \         5       key deletion\n         6-65534   - available, see section
      7\n         65535     - reserved, see section 7\n"
    title: 2.5 The Mode Field
  - contents:
    - "2.6 The Error Field\n   The error code field is an extended RCODE.  The following
      values are\n   defined:\n         Value   Description\n         -----   -----------\n
      \         0       - no error\n          1-15   a non-extended RCODE\n          16
      \    BADSIG   (TSIG)\n          17     BADKEY   (TSIG)\n          18     BADTIME
      \ (TSIG)\n          19     BADMODE\n          20     BADNAME\n          21     BADALG\n
      \  When the TKEY Error Field is non-zero in a response to a TKEY query,\n   the
      DNS header RCODE field indicates no error. However, it is\n   possible if a
      TKEY is spontaneously included in a response the TKEY\n   RR and DNS header
      error field could have unrelated non-zero error\n   codes.\n"
    title: 2.6 The Error Field
  - contents:
    - "2.7 The Key Size and Data Fields\n   The key data size field is an unsigned
      16 bit integer in network\n   order which specifies the size of the key exchange
      data field in\n   octets. The meaning of this data depends on the mode.\n"
    title: 2.7 The Key Size and Data Fields
  - contents:
    - "2.8 The Other Size and Data Fields\n   The Other Size and Other Data fields
      are not used in this\n   specification but may be used in future extensions.
      \ The RDLEN field\n   MUST equal the length of the RDATA section through the
      end of Other\n   Data or the RR is to be considered malformed and rejected.\n"
    title: 2.8 The Other Size and Data Fields
  title: 2. The TKEY Resource Record
- contents:
  - "3. General TKEY Considerations\n   TKEY is a meta-RR that is not stored or cached
    in the DNS and does\n   not appear in zone files.  It supports a variety of modes
    for the\n   establishment and deletion of shared secret keys information between\n
    \  DNS resolvers and servers.  The establishment of such a shared key\n   requires
    that state be maintained at both ends and the allocation of\n   the resources
    to maintain such state may require mutual agreement. In\n   the absence of willingness
    to provide such state, servers MUST return\n   errors such as NOTIMP or REFUSED
    for an attempt to use TKEY and\n   resolvers are free to ignore any TKEY RRs they
    receive.\n   The shared secret keying material developed by using TKEY is a plain\n
    \  octet sequence.  The means by which this shared secret keying\n   material,
    exchanged via TKEY, is actually used in any particular TSIG\n   algorithm is algorithm
    dependent and is defined in connection with\n   that algorithm.  For example,
    see [RFC 2104] for how TKEY agreed\n   shared secret keying material is used in
    the HMAC-MD5 algorithm or\n   other HMAC algorithms.\n   There MUST NOT be more
    than one TKEY RR in a DNS query or response.\n   Except for GSS-API mode, TKEY
    responses MUST always have DNS\n   transaction authentication to protect the integrity
    of any keying\n   data, error codes, etc.  This authentication MUST use a previously\n
    \  established secret (TSIG) or public (SIG(0) [RFC 2931]) key and MUST\n   NOT
    use any key that the response to be verified is itself providing.\n   TKEY queries
    MUST be authenticated for all modes except GSS-API and,\n   under some circumstances,
    server assignment mode.  In particular, if\n   the query for a server assigned
    key is for a key to assert some\n   privilege, such as update authority, then
    the query must be\n   authenticated to avoid spoofing.  However, if the key is
    just to be\n   used for transaction security, then spoofing will lead at worst
    to\n   denial of service.  Query authentication SHOULD use an established\n   secret
    (TSIG) key authenticator if available.  Otherwise, it must use\n   a public (SIG(0))
    key signature.  It MUST NOT use any key that the\n   query is itself providing.\n
    \  In the absence of required TKEY authentication, a NOTAUTH error MUST\n   be
    returned.\n   To avoid replay attacks, it is necessary that a TKEY response or\n
    \  query not be valid if replayed on the order of 2**32 second (about\n   136
    years), or a multiple thereof, later.  To accomplish this, the\n   keying material
    used in any TSIG or SIG(0) RR that authenticates a\n   TKEY message MUST NOT have
    a lifetime of more then 2**31 - 1 seconds\n   (about 68 years).  Thus, on attempted
    replay, the authenticating TSIG\n   or SIG(0) RR will not be verifiable due to
    key expiration and the\n   replay will fail.\n"
  title: 3. General TKEY Considerations
- contents:
  - "4. Exchange via Resolver Query\n   One method for a resolver and a server to
    agree about shared secret\n   keying material for use in TSIG is through DNS requests
    from the\n   resolver which are syntactically DNS queries for type TKEY.  Such\n
    \  queries MUST be accompanied by a TKEY RR in the additional\n   information
    section to indicate the mode in use and accompanied by\n   other information where
    required.\n   Type TKEY queries SHOULD NOT be flagged as recursive and servers
    MAY\n   ignore the recursive header bit in TKEY queries they receive.\n"
  - contents:
    - "4.1 Query for Diffie-Hellman Exchanged Keying\n   Diffie-Hellman (DH) key exchange
      is a means whereby two parties can\n   derive some shared secret information
      without requiring any secrecy\n   of the messages they exchange [Schneier].
      \ Provisions have been made\n   for the storage of DH public keys in the DNS
      [RFC 2539].\n   A resolver sends a query for type TKEY accompanied by a TKEY
      RR in\n   the additional information section specifying the Diffie-Hellman mode\n
      \  and accompanied by a KEY RR also in the additional information\n   section
      specifying a resolver Diffie-Hellman key.  The TKEY RR\n   algorithm field is
      set to the authentication algorithm the resolver\n   plans to use. The \"key
      data\" provided in the TKEY is used as a random\n   [RFC 1750] nonce to avoid
      always deriving the same keying material\n   for the same pair of DH KEYs.\n
      \  The server response contains a TKEY in its answer section with the\n   Diffie-Hellman
      mode. The \"key data\" provided in this TKEY is used as\n   an additional nonce
      to avoid always deriving the same keying material\n   for the same pair of DH
      KEYs. If the TKEY error field is non-zero,\n   the query failed for the reason
      given. FORMERR is given if the query\n   included no DH KEY and BADKEY is given
      if the query included an\n   incompatible DH KEY.\n   If the TKEY error field
      is zero, the resolver supplied Diffie-Hellman\n   KEY RR SHOULD be echoed in
      the additional information section and a\n   server Diffie-Hellman KEY RR will
      also be present in the answer\n   section of the response.  Both parties can
      then calculate the same\n   shared secret quantity from the pair of Diffie-Hellman
      (DH) keys used\n   [Schneier] (provided these DH keys use the same generator
      and\n   modulus) and the data in the TKEY RRs.  The TKEY RR data is mixed\n
      \  with the DH result as follows:\n      keying material =\n           XOR (
      DH value, MD5 ( query data | DH value ) |\n                           MD5 (
      server data | DH value ) )\n   Where XOR is an exclusive-OR operation and \"|\"
      is byte-stream\n   concatenation.  The shorter of the two operands to XOR is
      byte-wise\n   left justified and padded with zero-valued bytes to match the
      length\n   of the other operand.  \"DH value\" is the Diffie-Hellman value derived\n
      \  from the KEY RRs. Query data and server data are the values sent in\n   the
      TKEY RR data fields.  These \"query data\" and \"server data\" nonces\n   are
      suffixed by the DH value, digested by MD5, the results\n   concatenated, and
      then XORed with the DH value.\n   The inception and expiry times in the query
      TKEY RR are those\n   requested for the keying material.  The inception and
      expiry times in\n   the response TKEY RR are the maximum period the server will
      consider\n   the keying material valid.  Servers may pre-expire keys so this
      is\n   not a guarantee.\n"
    title: 4.1 Query for Diffie-Hellman Exchanged Keying
  - contents:
    - "4.2 Query for TKEY Deletion\n   Keys established via TKEY can be treated as
      soft state.  Since DNS\n   transactions are originated by the resolver, the
      resolver can simply\n   toss keys, although it may have to go through another
      key exchange if\n   it later needs one.  Similarly, the server can discard keys
      although\n   that will result in an error on receiving a query with a TSIG using\n
      \  the discarded key.\n   To avoid attempted reliance in requests on keys no
      longer in effect,\n   servers MUST implement key deletion whereby the server
      \"discards\" a\n   key on receipt from a resolver of an authenticated delete
      request for\n   a TKEY RR with the key's name.  If the server has no record
      of a key\n   with that name, it returns BADNAME.\n   Key deletion TKEY queries
      MUST be authenticated.  This authentication\n   MAY be a TSIG RR using the key
      to be deleted.\n   For querier assigned and Diffie-Hellman keys, the server
      MUST truly\n   \"discard\" all active state associated with the key.  For server\n
      \  assigned keys, the server MAY simply mark the key as no longer\n   retained
      by the client and may re-send it in response to a future\n   query for server
      assigned keying material.\n"
    title: 4.2 Query for TKEY Deletion
  - contents:
    - "4.3 Query for GSS-API Establishment\n   This mode is described in a separate
      document under preparation which\n   should be seen for the full description.
      \ Basically the resolver and\n   server can exchange queries and responses for
      type TKEY with a TKEY\n   RR specifying the GSS-API mode in the additional information
      section\n   and a GSS-API token in the key data portion of the TKEY RR.\n   Any
      issues of possible encryption of parts the GSS-API token data\n   being transmitted
      are handled by the GSS-API level.  In addition, the\n   GSS-API level provides
      its own authentication so that this mode of\n   TKEY query and response MAY
      be, but do not need to be, authenticated\n   with TSIG RR or SIG(0) RR [RFC
      2931].\n   The inception and expiry times in a GSS-API mode TKEY RR are ignored.\n"
    title: 4.3 Query for GSS-API Establishment
  - contents:
    - "4.4 Query for Server Assigned Keying\n   Optionally, the server can assign
      keying for the resolver.  It is\n   sent to the resolver encrypted under a resolver
      public key.  See\n   section 6 for description of encryption methods.\n   A
      resolver sends a query for type TKEY accompanied by a TKEY RR\n   specifying
      the \"server assignment\" mode and a resolver KEY RR to be\n   used in encrypting
      the response, both in the additional information\n   section. The TKEY algorithm
      field is set to the authentication\n   algorithm the resolver plans to use.
      \ It is RECOMMENDED that any \"key\n   data\" provided in the query TKEY RR
      by the resolver be strongly mixed\n   by the server with server generated randomness
      [RFC 1750] to derive\n   the keying material to be used.  The KEY RR that appears
      in the query\n   need not be accompanied by a SIG(KEY) RR.  If the query is\n
      \  authenticated by the resolver with a TSIG RR [RFC 2845] or SIG(0) RR\n   and
      that authentication is verified, then any SIG(KEY) provided in\n   the query
      SHOULD be ignored.  The KEY RR in such a query SHOULD have\n   a name that corresponds
      to the resolver but it is only essential that\n   it be a public key for which
      the resolver has the corresponding\n   private key so it can decrypt the response
      data.\n   The server response contains a TKEY RR in its answer section with
      the\n   server assigned mode and echoes the KEY RR provided in the query in\n
      \  its additional information section.\n   If the response TKEY error field
      is zero, the key data portion of the\n   response TKEY RR will be the server
      assigned keying data encrypted\n   under the public key in the resolver provided
      KEY RR.  In this case,\n   the owner name of the answer TKEY RR will be the
      server assigned name\n   of the key.\n   If the error field of the response
      TKEY is non-zero, the query failed\n   for the reason given.  FORMERR is given
      if the query specified no\n   encryption key.\n   The inception and expiry times
      in the query TKEY RR are those\n   requested for the keying material.  The inception
      and expiry times in\n   the response TKEY are the maximum period the server
      will consider the\n   keying material valid.  Servers may pre-expire keys so
      this is not a\n   guarantee.\n   The resolver KEY RR MUST be authenticated,
      through the authentication\n   of this query with a TSIG or SIG(0) or the signing
      of the resolver\n   KEY with a SIG(KEY).  Otherwise, an attacker can forge a
      resolver KEY\n   for which they know the private key, and thereby the attacker
      could\n   obtain a valid shared secret key from the server.\n"
    title: 4.4 Query for Server Assigned Keying
  - contents:
    - "4.5 Query for Resolver Assigned Keying\n   Optionally, a server can accept
      resolver assigned keys.  The keying\n   material MUST be encrypted under a server
      key for protection in\n   transmission as described in Section 6.\n   The resolver
      sends a TKEY query with a TKEY RR that specifies the\n   encrypted keying material
      and a KEY RR specifying the server public\n   key used to encrypt the data,
      both in the additional information\n   section.  The name of the key and the
      keying data are completely\n   controlled by the sending resolver so a globally
      unique key name\n   SHOULD be used.  The KEY RR used MUST be one for which the
      server has\n   the corresponding private key, or it will not be able to decrypt
      the\n   keying material and will return a FORMERR. It is also important that\n
      \  no untrusted party (preferably no other party than the server) has\n   the
      private key corresponding to the KEY RR because, if they do, they\n   can capture
      the messages to the server, learn the shared secret, and\n   spoof valid TSIGs.\n
      \  The query TKEY RR inception and expiry give the time period the\n   querier
      intends to consider the keying material valid.  The server\n   can return a
      lesser time interval to advise that it will not maintain\n   state for that
      long and can pre-expire keys in any case.\n   This mode of query MUST be authenticated
      with a TSIG or SIG(0).\n   Otherwise, an attacker can forge a resolver assigned
      TKEY query, and\n   thereby the attacker could specify a shared secret key that
      would be\n   accepted, used, and honored by the server.\n"
    title: 4.5 Query for Resolver Assigned Keying
  title: 4. Exchange via Resolver Query
- contents:
  - "5. Spontaneous Server Inclusion\n   A DNS server may include a TKEY RR spontaneously
    as additional\n   information in responses.  This SHOULD only be done if the server\n
    \  knows the querier understands TKEY and has this option implemented.\n   This
    technique can be used to delete a key and may be specified for\n   modes defined
    in the future.  A disadvantage of this technique is\n   that there is no way for
    the server to get any error or success\n   indication back and, in the case of
    UDP, no way to even know if the\n   DNS response reached the resolver.\n"
  - contents:
    - "5.1 Spontaneous Server Key Deletion\n   A server can optionally tell a client
      that it has deleted a secret\n   key by spontaneously including a TKEY RR in
      the additional\n   information section of a response with the key's name and
      specifying\n   the key deletion mode.  Such a response SHOULD be authenticated.
      \ If\n   authenticated, it \"deletes\" the key with the given name.  The\n   inception
      and expiry times of the delete TKEY RR are ignored. Failure\n   by a client
      to receive or properly process such additional\n   information in a response
      would mean that the client might use a key\n   that the server had discarded
      and would then get an error indication.\n   For server assigned and Diffie-Hellman
      keys, the client MUST\n   \"discard\" active state associated with the key.
      \ For querier assigned\n   keys, the querier MAY simply mark the key as no longer
      retained by\n   the server and may re-send it in a future query specifying querier\n
      \  assigned keying material.\n"
    title: 5.1 Spontaneous Server Key Deletion
  title: 5. Spontaneous Server Inclusion
- contents:
  - "6. Methods of Encryption\n   For the server assigned and resolver assigned key
    agreement modes,\n   the keying material is sent within the key data field of
    a TKEY RR\n   encrypted under the public key in an accompanying KEY RR [RFC 2535].\n
    \  This KEY RR MUST be for a public key algorithm where the public and\n   private
    keys can be used for encryption and the corresponding\n   decryption which recovers
    the originally encrypted data.  The KEY RR\n   SHOULD correspond to a name for
    the decrypting resolver/server such\n   that the decrypting process has access
    to the corresponding private\n   key to decrypt the data.  The secret keying material
    being sent will\n   generally be fairly short, usually less than 256 bits, because
    that\n   is adequate for very strong protection with modern keyed hash or\n   symmetric
    algorithms.\n   If the KEY RR specifies the RSA algorithm, then the keying material\n
    \  is encrypted as per the description of RSAES-PKCS1-v1_5 encryption in\n   PKCS#1
    [RFC 2437].  (Note, the secret keying material being sent is\n   directly RSA
    encrypted in PKCS#1 format. It is not \"enveloped\" under\n   some other symmetric
    algorithm.)  In the unlikely event that the\n   keying material will not fit within
    one RSA modulus of the chosen\n   public key, additional RSA encryption blocks
    are included.  The\n   length of each block is clear from the public RSA key specified
    and\n   the RSAES-PKCS1-v1_5 padding makes it clear what part of the\n   encrypted
    data is actually keying material and what part is\n   formatting or the required
    at least eight bytes of random [RFC 1750]\n   padding.\n"
  title: 6. Methods of Encryption
- contents:
  - "7. IANA Considerations\n   This section is to be interpreted as provided in [RFC
    2434].\n   Mode field values 0x0000 and 0xFFFF are reserved.\n   Mode field values
    0x0001 through 0x00FF, and 0XFF00 through 0XFFFE\n   can only be assigned by an
    IETF Standards Action.\n   Mode field values 0x0100 through 0x0FFF and 0xF0000
    through 0xFEFF\n   are allocated by IESG approval or IETF consensus.\n   Mode
    field values 0x1000 through 0xEFFF are allocated based on\n   Specification Required
    as defined in [RFC 2434].\n   Mode values should not be changed when the status
    of their use\n   changes.  For example, a mode value assigned based just on providing\n
    \  a specification should not be changed later just because that use's\n   status
    is changed to standards track.\n   The following assignments are documented herein:\n
    \     RR Type 249 for TKEY.\n      TKEY Modes 1 through 5 as listed in section
    2.5.\n      Extended RCODE Error values of 19, 20, and 21 as listed in section\n
    \     2.6.\n"
  title: 7. IANA Considerations
- contents:
  - "8. Security Considerations\n   The entirety of this specification is concerned
    with the secure\n   establishment of a shared secret between DNS clients and servers
    in\n   support of TSIG [RFC 2845].\n   Protection against denial of service via
    the use of TKEY is not\n   provided.\n"
  title: 8. Security Considerations
- contents:
  - "References\n   [Schneier] Bruce Schneier, \"Applied Cryptography: Protocols,\n
    \             Algorithms, and Source Code in C\", 1996, John Wiley and\n              Sons\n
    \  [RFC 1034] Mockapetris, P., \"Domain Names - Concepts and Facilities\",\n              STD
    13, RFC 1034, November 1987.\n   [RFC 1035] Mockapetris, P., \"Domain Names -
    Implementation and\n              Specifications\", STD 13, RFC 1035, November
    1987.\n   [RFC 1750] Eastlake, D., Crocker, S. and J. Schiller, \"Randomness\n
    \             Recommendations for Security\", RFC 1750, December 1994.\n   [RFC
    1982] Elz, R. and R. Bush, \"Serial Number Arithmetic\", RFC 1982,\n              September
    1996.\n   [RFC 1995] Ohta, M., \"Incremental Zone Transfer in DNS\", RFC 1995,\n
    \             August 1996.\n   [RFC 2030] Mills, D., \"Simple Network Time Protocol
    (SNTP) Version 4\n              for IPv4, IPv6 and OSI\", RFC 2030, October 1996.\n
    \  [RFC 2104] Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:  Keyed-\n              Hashing
    for Message Authentication\", RFC 2104, February\n              1997.\n   [RFC
    2119] Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC 2136] Vixie, P., Thomson, S.,
    Rekhter, Y. and J. Bound, \"Dynamic\n              Updates in the Domain Name
    System (DNS UPDATE)\", RFC 2136,\n              April 1997.\n   [RFC 2434] Narten,
    T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations
    Section in RFCs\", BCP 26, RFC 2434,\n              October 1998.\n   [RFC 2437]
    Kaliski, B. and J. Staddon, \"PKCS #1: RSA Cryptography\n              Specifications
    Version 2.0\", RFC 2437, October 1998.\n   [RFC 2535] Eastlake, D., \"Domain Name
    System Security Extensions\",\n              RFC 2535, March 1999.\n   [RFC 2539]
    Eastlake, D., \"Storage of Diffie-Hellman Keys in the\n              Domain Name
    System (DNS)\", RFC 2539, March 1999.\n   [RFC 2845] Vixie, P., Gudmundsson, O.,
    Eastlake, D. and B.\n              Wellington, \"Secret Key Transaction Authentication
    for DNS\n              (TSIG)\", RFC 2845, May 2000.\n   [RFC 2931] Eastlake,
    D., \"DNS Request and Transaction Signatures\n              (SIG(0)s )\", RFC
    2931, September 2000.\n"
  title: References
- contents:
  - "Author's Address\n   Donald E. Eastlake 3rd\n   Motorola\n   140 Forest Avenue\n
    \  Hudson, MA 01749 USA\n   Phone: +1 978-562-2827 (h)\n          +1 508-261-5434
    (w)\n   Fax:   +1 508-261-4447 (w)\n   EMail: Donald.Eastlake@motorola.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
