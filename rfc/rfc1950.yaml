- title: __initial_text__
  contents:
  - '         ZLIB Compressed Data Format Specification version 3.3

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   The IESG takes no position on the validity\
    \ of any Intellectual\n   Property Rights statements contained in this document.\n"
- title: Notices
  contents:
  - "Notices\n   Copyright (c) 1996 L. Peter Deutsch and Jean-Loup Gailly\n   Permission\
    \ is granted to copy and distribute this document for any\n   purpose and without\
    \ charge, including translations into other\n   languages and incorporation into\
    \ compilations, provided that the\n   copyright notice and this notice are preserved,\
    \ and that any\n   substantive changes or deletions from the original are clearly\n\
    \   marked.\n   A pointer to the latest version of this and related documentation\
    \ in\n   HTML format can be found at the URL\n   <ftp://ftp.uu.net/graphics/png/documents/zlib/zdoc-index.html>.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a lossless compressed data format.  The\n\
    \   data can be produced or consumed, even for an arbitrarily long\n   sequentially\
    \ presented input data stream, using only an a priori\n   bounded amount of intermediate\
    \ storage.  The format presently uses\n   the DEFLATE compression method but can\
    \ be easily extended to use\n   other compression methods.  It can be implemented\
    \ readily in a manner\n   not covered by patents.  This specification also defines\
    \ the ADLER-32\n   checksum (an extension and improvement of the Fletcher checksum),\n\
    \   used for detection of data corruption, and provides an algorithm for\n   computing\
    \ it.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ...................................................\
    \ 2\n      1.1. Purpose ................................................... 2\n\
    \      1.2. Intended audience ......................................... 3\n  \
    \    1.3. Scope ..................................................... 3\n    \
    \  1.4. Compliance ................................................ 3\n      1.5.\
    \  Definitions of terms and conventions used ................ 3\n      1.6. Changes\
    \ from previous versions ............................ 3\n   2. Detailed specification\
    \ ......................................... 3\n      2.1. Overall conventions\
    \ ....................................... 3\n      2.2. Data format ...............................................\
    \ 4\n      2.3. Compliance ................................................ 7\n\
    \   3. References ..................................................... 7\n  \
    \ 4. Source code .................................................... 8\n   5.\
    \ Security Considerations ........................................ 8\n   6. Acknowledgements\
    \ ............................................... 8\n   7. Authors' Addresses\
    \ ............................................. 8\n   8. Appendix: Rationale ............................................\
    \ 9\n   9. Appendix: Sample code ..........................................10\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   1.1. Purpose\n      The purpose of this specification is\
    \ to define a lossless\n      compressed data format that:\n          * Is independent\
    \ of CPU type, operating system, file system,\n            and character set,\
    \ and hence can be used for interchange;\n          * Can be produced or consumed,\
    \ even for an arbitrarily long\n            sequentially presented input data\
    \ stream, using only an a\n            priori bounded amount of intermediate storage,\
    \ and hence can\n            be used in data communications or similar structures\
    \ such as\n            Unix filters;\n          * Can use a number of different\
    \ compression methods;\n          * Can be implemented readily in a manner not\
    \ covered by\n            patents, and hence can be practiced freely.\n      The\
    \ data format defined by this specification does not attempt to\n      allow random\
    \ access to compressed data.\n   1.2. Intended audience\n      This specification\
    \ is intended for use by implementors of software\n      to compress data into\
    \ zlib format and/or decompress data from zlib\n      format.\n      The text\
    \ of the specification assumes a basic background in\n      programming at the\
    \ level of bits and other primitive data\n      representations.\n   1.3. Scope\n\
    \      The specification specifies a compressed data format that can be\n    \
    \  used for in-memory compression of a sequence of arbitrary bytes.\n   1.4. Compliance\n\
    \      Unless otherwise indicated below, a compliant decompressor must be\n  \
    \    able to accept and decompress any data set that conforms to all\n      the\
    \ specifications presented here; a compliant compressor must\n      produce data\
    \ sets that conform to all the specifications presented\n      here.\n   1.5.\
    \  Definitions of terms and conventions used\n      byte: 8 bits stored or transmitted\
    \ as a unit (same as an octet).\n      (For this specification, a byte is exactly\
    \ 8 bits, even on\n      machines which store a character on a number of bits\
    \ different\n      from 8.) See below, for the numbering of bits within a byte.\n\
    \   1.6. Changes from previous versions\n      Version 3.1 was the first public\
    \ release of this specification.\n      In version 3.2, some terminology was changed\
    \ and the Adler-32\n      sample code was rewritten for clarity.  In version 3.3,\
    \ the\n      support for a preset dictionary was introduced, and the\n      specification\
    \ was converted to RFC style.\n"
- title: 2. Detailed specification
  contents:
  - "2. Detailed specification\n   2.1. Overall conventions\n      In the diagrams\
    \ below, a box like this:\n         +---+\n         |   | <-- the vertical bars\
    \ might be missing\n         +---+\n      represents one byte; a box like this:\n\
    \         +==============+\n         |              |\n         +==============+\n\
    \      represents a variable number of bytes.\n      Bytes stored within a computer\
    \ do not have a \"bit order\", since\n      they are always treated as a unit.\
    \  However, a byte considered as\n      an integer between 0 and 255 does have\
    \ a most- and least-\n      significant bit, and since we write numbers with the\
    \ most-\n      significant digit on the left, we also write bytes with the most-\n\
    \      significant bit on the left.  In the diagrams below, we number the\n  \
    \    bits of a byte so that bit 0 is the least-significant bit, i.e.,\n      the\
    \ bits are numbered:\n         +--------+\n         |76543210|\n         +--------+\n\
    \      Within a computer, a number may occupy multiple bytes.  All\n      multi-byte\
    \ numbers in the format described here are stored with\n      the MOST-significant\
    \ byte first (at the lower memory address).\n      For example, the decimal number\
    \ 520 is stored as:\n             0     1\n         +--------+--------+\n    \
    \     |00000010|00001000|\n         +--------+--------+\n          ^        ^\n\
    \          |        |\n          |        + less significant byte = 8\n      \
    \    + more significant byte = 2 x 256\n   2.2. Data format\n      A zlib stream\
    \ has the following structure:\n           0   1\n         +---+---+\n       \
    \  |CMF|FLG|   (more-->)\n         +---+---+\n      (if FLG.FDICT set)\n     \
    \      0   1   2   3\n         +---+---+---+---+\n         |     DICTID    | \
    \  (more-->)\n         +---+---+---+---+\n         +=====================+---+---+---+---+\n\
    \         |...compressed data...|    ADLER32    |\n         +=====================+---+---+---+---+\n\
    \      Any data which may appear after ADLER32 are not part of the zlib\n    \
    \  stream.\n      CMF (Compression Method and flags)\n         This byte is divided\
    \ into a 4-bit compression method and a 4-\n         bit information field depending\
    \ on the compression method.\n            bits 0 to 3  CM     Compression method\n\
    \            bits 4 to 7  CINFO  Compression info\n      CM (Compression method)\n\
    \         This identifies the compression method used in the file. CM = 8\n  \
    \       denotes the \"deflate\" compression method with a window size up\n   \
    \      to 32K.  This is the method used by gzip and PNG (see\n         references\
    \ [1] and [2] in Chapter 3, below, for the reference\n         documents).  CM\
    \ = 15 is reserved.  It might be used in a future\n         version of this specification\
    \ to indicate the presence of an\n         extra field before the compressed data.\n\
    \      CINFO (Compression info)\n         For CM = 8, CINFO is the base-2 logarithm\
    \ of the LZ77 window\n         size, minus eight (CINFO=7 indicates a 32K window\
    \ size). Values\n         of CINFO above 7 are not allowed in this version of\
    \ the\n         specification.  CINFO is not defined in this specification for\n\
    \         CM not equal to 8.\n      FLG (FLaGs)\n         This flag byte is divided\
    \ as follows:\n            bits 0 to 4  FCHECK  (check bits for CMF and FLG)\n\
    \            bit  5       FDICT   (preset dictionary)\n            bits 6 to 7\
    \  FLEVEL  (compression level)\n         The FCHECK value must be such that CMF\
    \ and FLG, when viewed as\n         a 16-bit unsigned integer stored in MSB order\
    \ (CMF*256 + FLG),\n         is a multiple of 31.\n      FDICT (Preset dictionary)\n\
    \         If FDICT is set, a DICT dictionary identifier is present\n         immediately\
    \ after the FLG byte. The dictionary is a sequence of\n         bytes which are\
    \ initially fed to the compressor without\n         producing any compressed output.\
    \ DICT is the Adler-32 checksum\n         of this sequence of bytes (see the definition\
    \ of ADLER32\n         below).  The decompressor can use this identifier to determine\n\
    \         which dictionary has been used by the compressor.\n      FLEVEL (Compression\
    \ level)\n         These flags are available for use by specific compression\n\
    \         methods.  The \"deflate\" method (CM = 8) sets these flags as\n    \
    \     follows:\n            0 - compressor used fastest algorithm\n          \
    \  1 - compressor used fast algorithm\n            2 - compressor used default\
    \ algorithm\n            3 - compressor used maximum compression, slowest algorithm\n\
    \         The information in FLEVEL is not needed for decompression; it\n    \
    \     is there to indicate if recompression might be worthwhile.\n      compressed\
    \ data\n         For compression method 8, the compressed data is stored in the\n\
    \         deflate compressed data format as described in the document\n      \
    \   \"DEFLATE Compressed Data Format Specification\" by L. Peter\n         Deutsch.\
    \ (See reference [3] in Chapter 3, below)\n         Other compressed data formats\
    \ are not specified in this version\n         of the zlib specification.\n   \
    \   ADLER32 (Adler-32 checksum)\n         This contains a checksum value of the\
    \ uncompressed data\n         (excluding any dictionary data) computed according\
    \ to Adler-32\n         algorithm. This algorithm is a 32-bit extension and improvement\n\
    \         of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073\n    \
    \     standard. See references [4] and [5] in Chapter 3, below)\n         Adler-32\
    \ is composed of two sums accumulated per byte: s1 is\n         the sum of all\
    \ bytes, s2 is the sum of all s1 values. Both sums\n         are done modulo 65521.\
    \ s1 is initialized to 1, s2 to zero.  The\n         Adler-32 checksum is stored\
    \ as s2*65536 + s1 in most-\n         significant-byte first (network) order.\n\
    \   2.3. Compliance\n      A compliant compressor must produce streams with correct\
    \ CMF, FLG\n      and ADLER32, but need not support preset dictionaries.  When\
    \ the\n      zlib data format is used as part of another standard data format,\n\
    \      the compressor may use only preset dictionaries that are specified\n  \
    \    by this other data format.  If this other format does not use the\n     \
    \ preset dictionary feature, the compressor must not set the FDICT\n      flag.\n\
    \      A compliant decompressor must check CMF, FLG, and ADLER32, and\n      provide\
    \ an error indication if any of these have incorrect values.\n      A compliant\
    \ decompressor must give an error indication if CM is\n      not one of the values\
    \ defined in this specification (only the\n      value 8 is permitted in this\
    \ version), since another value could\n      indicate the presence of new features\
    \ that would cause subsequent\n      data to be interpreted incorrectly.  A compliant\
    \ decompressor must\n      give an error indication if FDICT is set and DICTID\
    \ is not the\n      identifier of a known preset dictionary.  A decompressor may\n\
    \      ignore FLEVEL and still be compliant.  When the zlib data format\n    \
    \  is being used as a part of another standard format, a compliant\n      decompressor\
    \ must support all the preset dictionaries specified by\n      the other format.\
    \ When the other format does not use the preset\n      dictionary feature, a compliant\
    \ decompressor must reject any\n      stream in which the FDICT flag is set.\n"
- title: 3. References
  contents:
  - "3. References\n   [1] Deutsch, L.P.,\"GZIP Compressed Data Format Specification\"\
    ,\n       available in ftp://ftp.uu.net/pub/archiving/zip/doc/\n   [2] Thomas\
    \ Boutell, \"PNG (Portable Network Graphics) specification\",\n       available\
    \ in ftp://ftp.uu.net/graphics/png/documents/\n   [3] Deutsch, L.P.,\"DEFLATE\
    \ Compressed Data Format Specification\",\n       available in ftp://ftp.uu.net/pub/archiving/zip/doc/\n\
    \   [4] Fletcher, J. G., \"An Arithmetic Checksum for Serial\n       Transmissions,\"\
    \ IEEE Transactions on Communications, Vol. COM-30,\n       No. 1, January 1982,\
    \ pp. 247-252.\n   [5] ITU-T Recommendation X.224, Annex D, \"Checksum Algorithms,\"\
    \n       November, 1993, pp. 144, 145. (Available from\n       gopher://info.itu.ch).\
    \ ITU-T X.244 is also the same as ISO 8073.\n"
- title: 4. Source code
  contents:
  - "4. Source code\n   Source code for a C language implementation of a \"zlib\"\
    \ compliant\n   library is available at ftp://ftp.uu.net/pub/archiving/zip/zlib/.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   A decoder that fails to check the ADLER32 checksum\
    \ value may be\n   subject to undetected data corruption.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   Trademarks cited in this document are the property of\
    \ their\n   respective owners.\n   Jean-Loup Gailly and Mark Adler designed the\
    \ zlib format and wrote\n   the related software described in this specification.\
    \  Glenn\n   Randers-Pehrson converted this document to RFC and HTML format.\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   L. Peter Deutsch\n   Aladdin Enterprises\n   203 Santa\
    \ Margarita Ave.\n   Menlo Park, CA 94025\n   Phone: (415) 322-0103 (AM only)\n\
    \   FAX:   (415) 322-1734\n   EMail: <ghost@aladdin.com>\n   Jean-Loup Gailly\n\
    \   EMail: <gzip@prep.ai.mit.edu>\n   Questions about the technical content of\
    \ this specification can be\n   sent by email to\n   Jean-Loup Gailly <gzip@prep.ai.mit.edu>\
    \ and\n   Mark Adler <madler@alumni.caltech.edu>\n   Editorial comments on this\
    \ specification can be sent by email to\n   L. Peter Deutsch <ghost@aladdin.com>\
    \ and\n   Glenn Randers-Pehrson <randeg@alumni.rpi.edu>\n"
- title: '8. Appendix: Rationale'
  contents:
  - "8. Appendix: Rationale\n   8.1. Preset dictionaries\n      A preset dictionary\
    \ is specially useful to compress short input\n      sequences. The compressor\
    \ can take advantage of the dictionary\n      context to encode the input in a\
    \ more compact manner. The\n      decompressor can be initialized with the appropriate\
    \ context by\n      virtually decompressing a compressed version of the dictionary\n\
    \      without producing any output. However for certain compression\n      algorithms\
    \ such as the deflate algorithm this operation can be\n      achieved without\
    \ actually performing any decompression.\n      The compressor and the decompressor\
    \ must use exactly the same\n      dictionary. The dictionary may be fixed or\
    \ may be chosen among a\n      certain number of predefined dictionaries, according\
    \ to the kind\n      of input data. The decompressor can determine which dictionary\
    \ has\n      been chosen by the compressor by checking the dictionary\n      identifier.\
    \ This document does not specify the contents of\n      predefined dictionaries,\
    \ since the optimal dictionaries are\n      application specific. Standard data\
    \ formats using this feature of\n      the zlib specification must precisely define\
    \ the allowed\n      dictionaries.\n   8.2. The Adler-32 algorithm\n      The\
    \ Adler-32 algorithm is much faster than the CRC32 algorithm yet\n      still\
    \ provides an extremely low probability of undetected errors.\n      The modulo\
    \ on unsigned long accumulators can be delayed for 5552\n      bytes, so the modulo\
    \ operation time is negligible.  If the bytes\n      are a, b, c, the second sum\
    \ is 3a + 2b + c + 3, and so is position\n      and order sensitive, unlike the\
    \ first sum, which is just a\n      checksum.  That 65521 is prime is important\
    \ to avoid a possible\n      large class of two-byte errors that leave the check\
    \ unchanged.\n      (The Fletcher checksum uses 255, which is not prime and which\
    \ also\n      makes the Fletcher check insensitive to single byte changes 0 <->\n\
    \      255.)\n      The sum s1 is initialized to 1 instead of zero to make the\
    \ length\n      of the sequence part of s2, so that the length does not have to\
    \ be\n      checked separately. (Any sequence of zeroes has a Fletcher\n     \
    \ checksum of zero.)\n"
- title: '9. Appendix: Sample code'
  contents:
  - "9. Appendix: Sample code\n   The following C code computes the Adler-32 checksum\
    \ of a data buffer.\n   It is written for clarity, not for speed.  The sample\
    \ code is in the\n   ANSI C programming language. Non C users may find it easier\
    \ to read\n   with these hints:\n      &      Bitwise AND operator.\n      >>\
    \     Bitwise right shift operator. When applied to an\n             unsigned\
    \ quantity, as here, right shift inserts zero bit(s)\n             at the left.\n\
    \      <<     Bitwise left shift operator. Left shift inserts zero\n         \
    \    bit(s) at the right.\n      ++     \"n++\" increments the variable n.\n \
    \     %      modulo operator: a % b is the remainder of a divided by b.\n    \
    \  #define BASE 65521 /* largest prime smaller than 65536 */\n      /*\n     \
    \    Update a running Adler-32 checksum with the bytes buf[0..len-1]\n       and\
    \ return the updated checksum. The Adler-32 checksum should be\n       initialized\
    \ to 1.\n       Usage example:\n         unsigned long adler = 1L;\n         while\
    \ (read_buffer(buffer, length) != EOF) {\n           adler = update_adler32(adler,\
    \ buffer, length);\n         }\n         if (adler != original_adler) error();\n\
    \      */\n      unsigned long update_adler32(unsigned long adler,\n         unsigned\
    \ char *buf, int len)\n      {\n        unsigned long s1 = adler & 0xffff;\n \
    \       unsigned long s2 = (adler >> 16) & 0xffff;\n        int n;\n        for\
    \ (n = 0; n < len; n++) {\n          s1 = (s1 + buf[n]) % BASE;\n          s2\
    \ = (s2 + s1)     % BASE;\n        }\n        return (s2 << 16) + s1;\n      }\n\
    \      /* Return the adler32 of the bytes buf[0..len-1] */\n      unsigned long\
    \ adler32(unsigned char *buf, int len)\n      {\n        return update_adler32(1L,\
    \ buf, len);\n      }\n"
