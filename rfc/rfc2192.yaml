- title: __initial_text__
  contents:
  - '                            IMAP URL Scheme

    '
- title: Status of this memo
  contents:
  - "Status of this memo\n     This document specifies an Internet standards track\
    \ protocol for\n     the Internet community, and requests discussion and suggestions\
    \ for\n     improvements.  Please refer to the current edition of the \"Internet\n\
    \     Official Protocol Standards\" (STD 1) for the standardization state\n  \
    \   and status of this protocol.  Distribution of this memo is\n     unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n     IMAP [IMAP4] is a rich protocol for accessing remote message\n\
    \     stores.  It provides an ideal mechanism for accessing public\n     mailing\
    \ list archives as well as private and shared message stores.\n     This document\
    \ defines a URL scheme for referencing objects on an\n     IMAP server.\n"
- title: 1. Conventions used in this document
  contents:
  - "1. Conventions used in this document\n     The key words \"MUST\", \"MUST NOT\"\
    , \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n     in this document are to be interpreted\
    \ as defined in \"Key words for\n     use in RFCs to Indicate Requirement Levels\"\
    \ [KEYWORDS].\n"
- title: 2. IMAP scheme
  contents:
  - "2. IMAP scheme\n     The IMAP URL scheme is used to designate IMAP servers, mailboxes,\n\
    \     messages, MIME bodies [MIME], and search programs on Internet hosts\n  \
    \   accessible using the IMAP protocol.\n     The IMAP URL follows the common\
    \ Internet scheme syntax as defined\n     in RFC 1738 [BASIC-URL] except that\
    \ clear text passwords are not\n     permitted.  If :<port> is omitted, the port\
    \ defaults to 143.\n     An IMAP URL takes one of the following forms:\n     \
    \    imap://<iserver>/\n         imap://<iserver>/<enc_list_mailbox>;TYPE=<list_type>\n\
    \         imap://<iserver>/<enc_mailbox>[uidvalidity][?<enc_search>]\n       \
    \  imap://<iserver>/<enc_mailbox>[uidvalidity]<iuid>[isection]\n     The first\
    \ form is used to refer to an IMAP server, the second form\n     refers to a list\
    \ of mailboxes, the third form refers to the\n     contents of a mailbox or a\
    \ set of messages resulting from a search,\n     and the final form refers to\
    \ a specific message or message part.\n     Note that the syntax here is informal.\
    \  The authoritative formal\n     syntax for IMAP URLs is defined in section 11.\n"
- title: 3. IMAP User Name and Authentication Mechanism
  contents:
  - "3. IMAP User Name and Authentication Mechanism\n     A user name and/or authentication\
    \ mechanism may be supplied.  They\n     are used in the \"LOGIN\" or \"AUTHENTICATE\"\
    \ commands after making the\n     connection to the IMAP server.  If no user name\
    \ or authentication\n     mechanism is supplied, the user name \"anonymous\" is\
    \ used with the\n     \"LOGIN\" command and the password is supplied as the Internet\
    \ e-mail\n     address of the end user accessing the resource.  If the URL doesn't\n\
    \     supply a user name, the program interpreting the IMAP URL SHOULD\n     request\
    \ one from the user if necessary.\n     An authentication mechanism can be expressed\
    \ by adding\n     \";AUTH=<enc_auth_type>\" to the end of the user name.  When\
    \ such an\n     <enc_auth_type> is indicated, the client SHOULD request appropriate\n\
    \     credentials from that mechanism and use the \"AUTHENTICATE\" command\n \
    \    instead of the \"LOGIN\" command.  If no user name is specified, one\n  \
    \   SHOULD be obtained from the mechanism or requested from the user as\n    \
    \ appropriate.\n     The string \";AUTH=*\" indicates that the client SHOULD select\
    \ an\n     appropriate authentication mechanism.  It MAY use any mechanism\n \
    \    listed in the CAPABILITY command or use an out of band security\n     service\
    \ resulting in a PREAUTH connection.  If no user name is\n     specified and no\
    \ appropriate authentication mechanisms are\n     available, the client SHOULD\
    \ fall back to anonymous login as\n     described above.  This allows a URL which\
    \ grants read-write access\n     to authorized users, and read-only anonymous\
    \ access to other users.\n     If a user name is included with no authentication\
    \ mechanism, then\n     \";AUTH=*\" is assumed.\n     Since URLs can easily come\
    \ from untrusted sources, care must be\n     taken when resolving a URL which\
    \ requires or requests any sort of\n     authentication.  If authentication credentials\
    \ are supplied to the\n     wrong server, it may compromise the security of the\
    \ user's account.\n     The program resolving the URL should make sure it meets\
    \ at least\n     one of the following criteria in this case:\n     (1) The URL\
    \ comes from a trusted source, such as a referral server\n     which the client\
    \ has validated and trusts according to site policy.\n     Note that user entry\
    \ of the URL may or may not count as a trusted\n     source, depending on the\
    \ experience level of the user and site\n     policy.\n     (2) Explicit local\
    \ site policy permits the client to connect to the\n     server in the URL.  For\
    \ example, if the client knows the site\n     domain name, site policy may dictate\
    \ that any hostname ending in\n     that domain is trusted.\n     (3) The user\
    \ confirms that connecting to that domain name with the\n     specified credentials\
    \ and/or mechanism is permitted.\n     (4) A mechanism is used which validates\
    \ the server before passing\n     potentially compromising client credentials.\n\
    \     (5) An authentication mechanism is used which will not reveal\n     information\
    \ to the server which could be used to compromise future\n     connections.\n\
    \     URLs which do not include a user name must be treated with extra\n     care,\
    \ since they are more likely to compromise the user's primary\n     account. \
    \ A URL containing \";AUTH=*\" must also be treated with\n     extra care since\
    \ it might fall back on a weaker security mechanism.\n     Finally, clients are\
    \ discouraged from using a plain text password\n     as a fallback with \";AUTH=*\"\
    \ unless the connection has strong\n     encryption (e.g. a key length of greater\
    \ than 56 bits).\n     A program interpreting IMAP URLs MAY cache open connections\
    \ to an\n     IMAP server for later re-use.  If a URL contains a user name, only\n\
    \     connections authenticated as that user may be re-used.  If a URL\n     does\
    \ not contain a user name or authentication mechanism, then only\n     an anonymous\
    \ connection may be re-used.  If a URL contains an\n     authentication mechanism\
    \ without a user name, then any non-\n     anonymous connection may be re-used.\n\
    \     Note that if unsafe or reserved characters such as \" \" or \";\" are\n\
    \     present in the user name or authentication mechanism, they MUST be\n   \
    \  encoded as described in RFC 1738 [BASIC-URL].\n"
- title: 4. IMAP server
  contents:
  - "4. IMAP server\n     An IMAP URL referring to an IMAP server has the following\
    \ form:\n         imap://<iserver>/\n     A program interpreting this URL would\
    \ issue the standard set of\n     commands it uses to present a view of the contents\
    \ of an IMAP\n     server.  This is likely to be semanticly equivalent to one\
    \ of the\n     following URLs:\n         imap://<iserver>/;TYPE=LIST\n       \
    \  imap://<iserver>/;TYPE=LSUB\n     The program interpreting this URL SHOULD\
    \ use the LSUB form if it\n     supports mailbox subscriptions.\n"
- title: 5. Lists of mailboxes
  contents:
  - "5. Lists of mailboxes\n     An IMAP URL referring to a list of mailboxes has\
    \ the following\n     form:\n         imap://<iserver>/<enc_list_mailbox>;TYPE=<list_type>\n\
    \     The <list_type> may be either \"LIST\" or \"LSUB\", and is case\n     insensitive.\
    \  The field \";TYPE=<list_type>\" MUST be included.\n     The <enc_list_mailbox>\
    \ is any argument suitable for the\n     list_mailbox field of the IMAP [IMAP4]\
    \ LIST or LSUB commands.  The\n     field <enc_list_mailbox> may be omitted, in\
    \ which case the program\n     interpreting the IMAP URL may use \"*\" or \"%\"\
    \ as the\n     <enc_list_mailbox>.  The program SHOULD use \"%\" if it supports\
    \ a\n     hierarchical view, otherwise it SHOULD use \"*\".\n     Note that if\
    \ unsafe or reserved characters such as \" \" or \"%\" are\n     present in <enc_list_mailbox>\
    \ they MUST be encoded as described in\n     RFC 1738 [BASIC-URL].  If the character\
    \ \"/\" is present in\n     enc_list_mailbox, it SHOULD NOT be encoded.\n"
- title: 6. Lists of messages
  contents:
  - "6. Lists of messages\n     An IMAP URL referring to a list of messages has the\
    \ following form:\n         imap://<iserver>/<enc_mailbox>[uidvalidity][?<enc_search>]\n\
    \     The <enc_mailbox> field is used as the argument to the IMAP4\n     \"SELECT\"\
    \ command.  Note that if unsafe or reserved characters such\n     as \" \", \"\
    ;\", or \"?\" are present in <enc_mailbox> they MUST be\n     encoded as described\
    \ in RFC 1738 [BASIC-URL].  If the character \"/\"\n     is present in enc_mailbox,\
    \ it SHOULD NOT be encoded.\n     The [uidvalidity] field is optional.  If it\
    \ is present, it MUST be\n     the argument to the IMAP4 UIDVALIDITY status response\
    \ at the time\n     the URL was created.  This SHOULD be used by the program\n\
    \     interpreting the IMAP URL to determine if the URL is stale.\n     The [?<enc_search>]\
    \ field is optional.  If it is not present, the\n     contents of the mailbox\
    \ SHOULD be presented by the program\n     interpreting the URL.  If it is present,\
    \ it SHOULD be used as the\n     arguments following an IMAP4 SEARCH command with\
    \ unsafe characters\n     such as \" \" (which are likely to be present in the\
    \ <enc_search>)\n     encoded as described in RFC 1738 [BASIC-URL].\n"
- title: 7. A specific message or message part
  contents:
  - "7. A specific message or message part\n     An IMAP URL referring to a specific\
    \ message or message part has the\n     following form:\n         imap://<iserver>/<enc_mailbox>[uidvalidity]<iuid>[isection]\n\
    \     The <enc_mailbox> and [uidvalidity] are as defined above.\n     If [uidvalidity]\
    \ is present in this form, it SHOULD be used by the\n     program interpreting\
    \ the URL to determine if the URL is stale.\n     The <iuid> refers to an IMAP4\
    \ message UID, and SHOULD be used as\n     the <set> argument to the IMAP4 \"\
    UID FETCH\" command.\n     The [isection] field is optional.  If not present,\
    \ the URL refers\n     to the entire Internet message as returned by the IMAP\
    \ command \"UID\n     FETCH <uid> BODY.PEEK[]\".  If present, the URL refers to\
    \ the object\n     returned by a \"UID FETCH <uid> BODY.PEEK[<section>]\" command.\
    \  The\n     type of the object may be determined with a \"UID FETCH <uid>\n \
    \    BODYSTRUCTURE\" command and locating the appropriate part in the\n     resulting\
    \ BODYSTRUCTURE.  Note that unsafe characters in [isection]\n     MUST be encoded\
    \ as described in [BASIC-URL].\n"
- title: 8. Relative IMAP URLs
  contents:
  - "8. Relative IMAP URLs\n     Relative IMAP URLs are permitted and are resolved\
    \ according to the\n     rules defined in RFC 1808 [REL-URL] with one exception.\
    \  In IMAP\n     URLs, parameters are treated as part of the normal path with\n\
    \     respect to relative URL resolution.  This is believed to be the\n     behavior\
    \ of the installed base and is likely to be documented in a\n     future revision\
    \ of the relative URL specification.\n     The following observations are also\
    \ important:\n     The <iauth> grammar element is considered part of the user\
    \ name for\n     purposes of resolving relative IMAP URLs.  This means that unless\
    \ a\n     new login/server specification is included in the relative URL, the\n\
    \     authentication mechanism is inherited from a base IMAP URL.\n     URLs always\
    \ use \"/\" as the hierarchy delimiter for the purpose of\n     resolving paths\
    \ in relative URLs.  IMAP4 permits the use of any\n     hierarchy delimiter in\
    \ mailbox names.  For this reason, relative\n     mailbox paths will only work\
    \ if the mailbox uses \"/\" as the\n     hierarchy delimiter.  Relative URLs may\
    \ be used on mailboxes which\n     use other delimiters, but in that case, the\
    \ entire mailbox name\n     MUST be specified in the relative URL or inherited\
    \ as a whole from\n     the base URL.\n     The base URL for a list of mailboxes\
    \ or messages which was referred\n     to by an IMAP URL is always the referring\
    \ IMAP URL itself.  The\n     base URL for a message or message part which was\
    \ referred to by an\n     IMAP URL may be more complicated to determine.  The\
    \ program\n     interpreting the relative URL will have to check the headers of\
    \ the\n     MIME entity and any enclosing MIME entities in order to locate the\n\
    \     \"Content-Base\" and \"Content-Location\" headers.  These headers are\n\
    \     used to determine the base URL as defined in [HTTP].  For example,\n   \
    \  if the referring IMAP URL contains a \"/;SECTION=1.2\" parameter,\n     then\
    \ the MIME headers for section 1.2, for section 1, and for the\n     enclosing\
    \ message itself SHOULD be checked in that order for\n     \"Content-Base\" or\
    \ \"Content-Location\" headers.\n"
- title: 9. Multinational Considerations
  contents:
  - "9. Multinational Considerations\n     IMAP4 [IMAP4] section 5.1.3 includes a\
    \ convention for encoding\n     non-US-ASCII characters in IMAP mailbox names.\
    \  Because this\n     convention is private to IMAP, it is necessary to convert\
    \ IMAP's\n     encoding to one that can be more easily interpreted by a URL\n\
    \     display program.  For this reason, IMAP's modified UTF-7 encoding\n    \
    \ for mailboxes MUST be converted to UTF-8 [UTF8].  Since 8-bit\n     characters\
    \ are not permitted in URLs, the UTF-8 characters are\n     encoded as required\
    \ by the URL specification [BASIC-URL].  Sample\n     code is included in Appendix\
    \ A to demonstrate this conversion.\n"
- title: 10. Examples
  contents:
  - "10. Examples\n     The following examples demonstrate how an IMAP4 client program\n\
    \     might translate various IMAP4 URLs into a series of IMAP4 commands.\n  \
    \   Commands sent from the client to the server are prefixed with \"C:\",\n  \
    \   and responses sent from the server to the client are prefixed with\n     \"\
    S:\".\n     The URL:\n      <imap://minbari.org/gray-council;UIDVALIDITY=385759045/;UID=20>\n\
    \     Results in the following client commands:\n         <connect to minbari.org,\
    \ port 143>\n         C: A001 LOGIN ANONYMOUS sheridan@babylon5.org\n        \
    \ C: A002 SELECT gray-council\n         <client verifies the UIDVALIDITY matches>\n\
    \         C: A003 UID FETCH 20 BODY.PEEK[]\n     The URL:\n      <imap://michael@minbari.org/users.*;type=list>\n\
    \     Results in the following client commands:\n       <client requests password\
    \ from user>\n       <connect to minbari.org imap server, activate strong encryption>\n\
    \       C: A001 LOGIN MICHAEL zipper\n       C: A002 LIST \"\" users.*\n     The\
    \ URL:\n      <imap://psicorp.org/~peter/%E6%97%A5%E6%9C%AC%E8%AA%9E/\n      %E5%8F%B0%E5%8C%97>\n\
    \     Results in the following client commands:\n       <connect to psicorp.org,\
    \ port 143>\n       C: A001 LOGIN ANONYMOUS bester@psycop.psicorp.org\n      \
    \ C: A002 SELECT ~peter/&ZeVnLIqe-/&U,BTFw-\n       <commands the client uses\
    \ for viewing the contents of a mailbox>\n     The URL:\n      <imap://;AUTH=KERBEROS_V4@minbari.org/gray-council/;uid=20/\n\
    \      ;section=1.2>\n     Results in the following client commands:\n       \
    \  <connect to minbari.org, port 143>\n         C: A001 AUTHENTICATE KERBEROS_V4\n\
    \         <authentication exchange>\n         C: A002 SELECT gray-council\n  \
    \       C: A003 UID FETCH 20 BODY.PEEK[1.2]\n     If the following relative URL\
    \ is located in that body part:\n      <;section=1.4>\n     This could result\
    \ in the following client commands:\n         C: A004 UID FETCH 20 (BODY.PEEK[1.2.MIME]\n\
    \               BODY.PEEK[1.MIME]\n               BODY.PEEK[HEADER.FIELDS (Content-Base\
    \ Content-Location)])\n         <Client looks for Content-Base or Content-Location\
    \ headers in\n          result.  If no such headers, then it does the following>\n\
    \         C: A005 UID FETCH 20 BODY.PEEK[1.4]\n     The URL:\n      <imap://;AUTH=*@minbari.org/gray%20council?SUBJECT%20shadows>\n\
    \     Could result in the following:\n         <connect to minbari.org, port 143>\n\
    \         C: A001 CAPABILITY\n         S: * CAPABILITY IMAP4rev1 AUTH=GSSAPI\n\
    \         S: A001 OK\n         C: A002 AUTHENTICATE GSSAPI\n         <authentication\
    \ exchange>\n         S: A002 OK user lennier authenticated\n         C: A003\
    \ SELECT \"gray council\"\n         ...\n         C: A004 SEARCH SUBJECT shadows\n\
    \         S: * SEARCH 8 10 13 14 15 16\n         S: A004 OK SEARCH completed\n\
    \         C: A005 FETCH 8,10,13:16 ALL\n         ...\n     NOTE: In this final\
    \ example, the client has implementation\n     dependent choices.  The authentication\
    \ mechanism could be anything,\n     including PREAUTH.  And the final FETCH command\
    \ could fetch more or\n     less information about the messages, depending on\
    \ what it wishes to\n     display to the user.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n     Security considerations discussed in the IMAP\
    \ specification [IMAP4]\n     and the URL specification [BASIC-URL] are relevant.\
    \  Security\n     considerations related to authenticated URLs are discussed in\n\
    \     section 3 of this document.\n     Many email clients store the plain text\
    \ password for later use\n     after logging into an IMAP server.  Such clients\
    \ MUST NOT use a\n     stored password in response to an IMAP URL without explicit\n\
    \     permission from the user to supply that password to the specified\n    \
    \ host name.\n"
- title: 12. ABNF for IMAP URL scheme
  contents:
  - "12. ABNF for IMAP URL scheme\n     This uses ABNF as defined in RFC 822 [IMAIL].\
    \  Terminals from the\n     BNF for IMAP [IMAP4] and URLs [BASIC-URL] are also\
    \ used.  Strings\n     are not case sensitive and free insertion of linear-white-space\
    \ is\n     not permitted.\n     achar            = uchar / \"&\" / \"=\" / \"\
    ~\"\n                             ; see [BASIC-URL] for \"uchar\" definition\n\
    \     bchar            = achar / \":\" / \"@\" / \"/\"\n     enc_auth_type   \
    \ = 1*achar\n                           ; encoded version of [IMAP-AUTH] \"auth_type\"\
    \n     enc_list_mailbox = 1*bchar\n                             ; encoded version\
    \ of [IMAP4] \"list_mailbox\"\n     enc_mailbox      = 1*bchar\n             \
    \                ; encoded version of [IMAP4] \"mailbox\"\n     enc_search   \
    \    = 1*bchar\n                             ; encoded version of search_program\
    \ below\n     enc_section      = 1*bchar\n                             ; encoded\
    \ version of section below\n     enc_user         = 1*achar\n                \
    \             ; encoded version of [IMAP4] \"userid\"\n     imapurl          =\
    \ \"imap://\" iserver \"/\" [ icommand ]\n     iauth            = \";AUTH=\" (\
    \ \"*\" / enc_auth_type )\n     icommand         = imailboxlist / imessagelist\
    \ / imessagepart\n     imailboxlist     = [enc_list_mailbox] \";TYPE=\" list_type\n\
    \     imessagelist     = enc_mailbox [ \"?\" enc_search ] [uidvalidity]\n    \
    \ imessagepart     = enc_mailbox [uidvalidity] iuid [isection]\n     isection\
    \         = \"/;SECTION=\" enc_section\n     iserver          = [iuserauth \"\
    @\"] hostport\n                             ; See [BASIC-URL] for \"hostport\"\
    \ definition\n     iuid             = \"/;UID=\" nz_number\n                 \
    \            ; See [IMAP4] for \"nz_number\" definition\n     iuserauth      \
    \  = enc_user [iauth] / [enc_user] iauth\n     list_type        = \"LIST\" / \"\
    LSUB\"\n     search_program   = [\"CHARSET\" SPACE astring SPACE]\n          \
    \              search_key *(SPACE search_key)\n                           ; IMAP4\
    \ literals may not be used\n                           ; See [IMAP4] for \"astring\"\
    \ and \"search_key\"\n     section          = section_text / (nz_number *[\".\"\
    \ nz_number]\n                         [\".\" (section_text / \"MIME\")])\n  \
    \                      ; See [IMAP4] for \"section_text\" and \"nz_number\"\n\
    \     uidvalidity      = \";UIDVALIDITY=\" nz_number\n                       \
    \      ; See [IMAP4] for \"nz_number\" definition\n"
- title: 13. References
  contents:
  - "13. References\n     [BASIC-URL] Berners-Lee, Masinter, McCahill, \"Uniform Resource\n\
    \     Locators (URL)\", RFC 1738, CERN, Xerox Corporation, University of\n   \
    \  Minnesota, December 1994.\n         <ftp://ds.internic.net/rfc/rfc1738.txt>\n\
    \     [IMAP4] Crispin, M., \"Internet Message Access Protocol - Version\n    \
    \ 4rev1\", RFC 2060, University of Washington, December 1996.\n         <ftp://ds.internic.net/rfc/rfc2060.txt>\n\
    \     [IMAP-AUTH] Myers, J., \"IMAP4 Authentication Mechanism\", RFC 1731,\n \
    \    Carnegie-Mellon University, December 1994.\n         <ftp://ds.internic.net/rfc/rfc1731.txt>\n\
    \     [HTTP] Fielding, Gettys, Mogul, Frystyk, Berners-Lee, \"Hypertext\n    \
    \ Transfer Protocol -- HTTP/1.1\", RFC 2068, UC Irvine, DEC, MIT/LCS,\n     January\
    \ 1997.\n         <ftp://ds.internic.net/rfc/rfc2068.txt>\n     [IMAIL] Crocker,\
    \ \"Standard for the Format of ARPA Internet Text\n     Messages\", STD 11, RFC\
    \ 822, University of Delaware, August 1982.\n         <ftp://ds.internic.net/rfc/rfc822.txt>\n\
    \     [KEYWORDS] Bradner, \"Key words for use in RFCs to Indicate\n     Requirement\
    \ Levels\", RFC 2119, Harvard University, March 1997.\n         <ftp://ds.internic.net/rfc/rfc2119.txt>\n\
    \     [MIME] Freed, N., Borenstein, N., \"Multipurpose Internet Mail\n     Extensions\"\
    , RFC 2045, Innosoft, First Virtual, November 1996.\n        <ftp://ds.internic.net/rfc/rfc2045.txt>\n\
    \     [REL-URL] Fielding, \"Relative Uniform Resource Locators\", RFC 1808,\n\
    \     UC Irvine, June 1995.\n         <ftp://ds.internic.net/rfc/rfc1808.txt>\n\
    \     [UTF8] Yergeau, F. \"UTF-8, a transformation format of Unicode and\n   \
    \  ISO 10646\", RFC 2044, Alis Technologies, October 1996.\n         <ftp://ds.internic.net/rfc/rfc2044.txt>\n"
- title: 14. Author's Address
  contents:
  - "14. Author's Address\n     Chris Newman\n     Innosoft International, Inc.\n\
    \     1050 Lakes Drive\n     West Covina, CA 91790 USA\n     EMail: chris.newman@innosoft.com\n"
- title: Appendix A.  Sample code
  contents:
  - 'Appendix A.  Sample code

    '
- title: Here is sample C source code to convert between URL paths and IMAP
  contents:
  - 'Here is sample C source code to convert between URL paths and IMAP

    '
- title: mailbox names, taking into account mapping between IMAP's modified UTF-7
  contents:
  - 'mailbox names, taking into account mapping between IMAP''s modified UTF-7

    '
- title: '[IMAP4] and hex-encoded UTF-8 which is more appropriate for URLs.  This'
  contents:
  - '[IMAP4] and hex-encoded UTF-8 which is more appropriate for URLs.  This

    '
- title: code has not been rigorously tested nor does it necessarily behave
  contents:
  - 'code has not been rigorously tested nor does it necessarily behave

    '
- title: reasonably with invalid input, but it should serve as a useful example.
  contents:
  - 'reasonably with invalid input, but it should serve as a useful example.

    '
- title: This code just converts the mailbox portion of the URL and does not deal
  contents:
  - 'This code just converts the mailbox portion of the URL and does not deal

    '
- title: with parameters, query or server components of the URL.
  contents:
  - 'with parameters, query or server components of the URL.

    '
- title: '#include <stdio.h>'
  contents:
  - '#include <stdio.h>

    '
- title: '#include <string.h>'
  contents:
  - '#include <string.h>

    '
- title: /* hexadecimal lookup table */
  contents:
  - '/* hexadecimal lookup table */

    '
- title: static char hex[] = "0123456789ABCDEF";
  contents:
  - 'static char hex[] = "0123456789ABCDEF";

    '
- title: /* URL unsafe printable characters */
  contents:
  - '/* URL unsafe printable characters */

    '
- title: static char urlunsafe[] = " \"#%&+:;<=>?@[\\]^`{|}";
  contents:
  - 'static char urlunsafe[] = " \"#%&+:;<=>?@[\\]^`{|}";

    '
- title: /* UTF7 modified base64 alphabet */
  contents:
  - '/* UTF7 modified base64 alphabet */

    '
- title: static char base64chars[] =
  contents:
  - "static char base64chars[] =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\"\
    ;\n"
- title: '#define UNDEFINED 64'
  contents:
  - '#define UNDEFINED 64

    '
- title: /* UTF16 definitions */
  contents:
  - '/* UTF16 definitions */

    '
- title: '#define UTF16MASK       0x03FFUL'
  contents:
  - '#define UTF16MASK       0x03FFUL

    '
- title: '#define UTF16SHIFT      10'
  contents:
  - '#define UTF16SHIFT      10

    '
- title: '#define UTF16BASE       0x10000UL'
  contents:
  - '#define UTF16BASE       0x10000UL

    '
- title: '#define UTF16HIGHSTART  0xD800UL'
  contents:
  - '#define UTF16HIGHSTART  0xD800UL

    '
- title: '#define UTF16HIGHEND    0xDBFFUL'
  contents:
  - '#define UTF16HIGHEND    0xDBFFUL

    '
- title: '#define UTF16LOSTART    0xDC00UL'
  contents:
  - '#define UTF16LOSTART    0xDC00UL

    '
- title: '#define UTF16LOEND      0xDFFFUL'
  contents:
  - '#define UTF16LOEND      0xDFFFUL

    '
- title: /* Convert an IMAP mailbox to a URL path
  contents:
  - "/* Convert an IMAP mailbox to a URL path\n *  dst needs to have roughly 4 times\
    \ the storage space of src\n *    Hex encoding can triple the size of the input\n\
    \ *    UTF-7 can be slightly denser than UTF-8\n *     (worst case: 8 octets UTF-7\
    \ becomes 9 octets UTF-8)\n */\n"
- title: void MailboxToURL(char *dst, char *src)
  contents:
  - 'void MailboxToURL(char *dst, char *src)

    '
- title: '{'
  contents:
  - "{\n    unsigned char c, i, bitcount;\n    unsigned long ucs4, utf16, bitbuf;\n\
    \    unsigned char base64[256], utf8[6];\n    /* initialize modified base64 decoding\
    \ table */\n    memset(base64, UNDEFINED, sizeof (base64));\n    for (i = 0; i\
    \ < sizeof (base64chars); ++i) {\n        base64[base64chars[i]] = i;\n    }\n\
    \    /* loop until end of string */\n    while (*src != '\\0') {\n        c =\
    \ *src++;\n        /* deal with literal characters and &- */\n        if (c !=\
    \ '&' || *src == '-') {\n            if (c < ' ' || c > '~' || strchr(urlunsafe,\
    \ c) != NULL) {\n                /* hex encode if necessary */\n             \
    \   dst[0] = '%';\n                dst[1] = hex[c >> 4];\n                dst[2]\
    \ = hex[c & 0x0f];\n                dst += 3;\n            } else {\n        \
    \        /* encode literally */\n                *dst++ = c;\n            }\n\
    \            /* skip over the '-' if this is an &- sequence */\n            if\
    \ (c == '&') ++src;\n        } else {\n        /* convert modified UTF-7 -> UTF-16\
    \ -> UCS-4 -> UTF-8 -> HEX */\n            bitbuf = 0;\n            bitcount =\
    \ 0;\n            ucs4 = 0;\n            while ((c = base64[(unsigned char) *src])\
    \ != UNDEFINED) {\n                ++src;\n                bitbuf = (bitbuf <<\
    \ 6) | c;\n                bitcount += 6;\n                /* enough bits for\
    \ a UTF-16 character? */\n                if (bitcount >= 16) {\n            \
    \        bitcount -= 16;\n                    utf16 = (bitcount ? bitbuf >> bitcount\n\
    \                             : bitbuf) & 0xffff;\n                    /* convert\
    \ UTF16 to UCS4 */\n                    if\n                    (utf16 >= UTF16HIGHSTART\
    \ && utf16 <= UTF16HIGHEND) {\n                        ucs4 = (utf16 - UTF16HIGHSTART)\
    \ << UTF16SHIFT;\n                        continue;\n                    } else\
    \ if\n                    (utf16 >= UTF16LOSTART && utf16 <= UTF16LOEND) {\n \
    \                       ucs4 += utf16 - UTF16LOSTART + UTF16BASE;\n          \
    \          } else {\n                        ucs4 = utf16;\n                 \
    \   }\n                    /* convert UTF-16 range of UCS4 to UTF-8 */\n     \
    \               if (ucs4 <= 0x7fUL) {\n                        utf8[0] = ucs4;\n\
    \                        i = 1;\n                    } else if (ucs4 <= 0x7ffUL)\
    \ {\n                        utf8[0] = 0xc0 | (ucs4 >> 6);\n                 \
    \       utf8[1] = 0x80 | (ucs4 & 0x3f);\n                        i = 2;\n    \
    \                } else if (ucs4 <= 0xffffUL) {\n                        utf8[0]\
    \ = 0xe0 | (ucs4 >> 12);\n                        utf8[1] = 0x80 | ((ucs4 >> 6)\
    \ & 0x3f);\n                        utf8[2] = 0x80 | (ucs4 & 0x3f);\n        \
    \                i = 3;\n                    } else {\n                      \
    \  utf8[0] = 0xf0 | (ucs4 >> 18);\n                        utf8[1] = 0x80 | ((ucs4\
    \ >> 12) & 0x3f);\n                        utf8[2] = 0x80 | ((ucs4 >> 6) & 0x3f);\n\
    \                        utf8[3] = 0x80 | (ucs4 & 0x3f);\n                   \
    \     i = 4;\n                    }\n                    /* convert utf8 to hex\
    \ */\n                    for (c = 0; c < i; ++c) {\n                        dst[0]\
    \ = '%';\n                        dst[1] = hex[utf8[c] >> 4];\n              \
    \          dst[2] = hex[utf8[c] & 0x0f];\n                        dst += 3;\n\
    \                    }\n                }\n            }\n            /* skip\
    \ over trailing '-' in modified UTF-7 encoding */\n            if (*src == '-')\
    \ ++src;\n        }\n    }\n    /* terminate destination string */\n    *dst =\
    \ '\\0';\n"
- title: '}'
  contents:
  - '}

    '
- title: /* Convert hex coded UTF-8 URL path to modified UTF-7 IMAP mailbox
  contents:
  - "/* Convert hex coded UTF-8 URL path to modified UTF-7 IMAP mailbox\n *  dst should\
    \ be about twice the length of src to deal with non-hex\n *  coded URLs\n */\n"
- title: void URLtoMailbox(char *dst, char *src)
  contents:
  - 'void URLtoMailbox(char *dst, char *src)

    '
- title: '{'
  contents:
  - "{\n   unsigned int utf8pos, utf8total, i, c, utf7mode, bitstogo, utf16flag;\n\
    \   unsigned long ucs4, bitbuf;\n   unsigned char hextab[256];\n    /* initialize\
    \ hex lookup table */\n    memset(hextab, 0, sizeof (hextab));\n    for (i = 0;\
    \ i < sizeof (hex); ++i) {\n        hextab[hex[i]] = i;\n        if (isupper(hex[i]))\
    \ hextab[tolower(hex[i])] = i;\n    }\n    utf7mode = 0;\n    utf8total = 0;\n\
    \    bitstogo = 0;\n    while ((c = *src) != '\\0') {\n        ++src;\n      \
    \  /* undo hex-encoding */\n        if (c == '%' && src[0] != '\\0' && src[1]\
    \ != '\\0') {\n            c = (hextab[src[0]] << 4) | hextab[src[1]];\n     \
    \       src += 2;\n        }\n        /* normal character? */\n        if (c >=\
    \ ' ' && c <= '~') {\n            /* switch out of UTF-7 mode */\n           \
    \ if (utf7mode) {\n                if (bitstogo) {\n                *dst++ = base64chars[(bitbuf\
    \ << (6 - bitstogo)) & 0x3F];\n                }\n                *dst++ = '-';\n\
    \                utf7mode = 0;\n            }\n            *dst++ = c;\n     \
    \       /* encode '&' as '&-' */\n            if (c == '&') {\n              \
    \  *dst++ = '-';\n            }\n            continue;\n        }\n        /*\
    \ switch to UTF-7 mode */\n        if (!utf7mode) {\n            *dst++ = '&';\n\
    \            utf7mode = 1;\n        }\n        /* Encode US-ASCII characters as\
    \ themselves */\n        if (c < 0x80) {\n            ucs4 = c;\n            utf8total\
    \ = 1;\n        } else if (utf8total) {\n            /* save UTF8 bits into UCS4\
    \ */\n            ucs4 = (ucs4 << 6) | (c & 0x3FUL);\n            if (++utf8pos\
    \ < utf8total) {\n                continue;\n            }\n        } else {\n\
    \            utf8pos = 1;\n            if (c < 0xE0) {\n                utf8total\
    \ = 2;\n                ucs4 = c & 0x1F;\n            } else if (c < 0xF0) {\n\
    \                utf8total = 3;\n                ucs4 = c & 0x0F;\n          \
    \  } else {\n                /* NOTE: can't convert UTF8 sequences longer than\
    \ 4 */\n                utf8total = 4;\n                ucs4 = c & 0x03;\n   \
    \         }\n            continue;\n        }\n        /* loop to split ucs4 into\
    \ two utf16 chars if necessary */\n        utf8total = 0;\n        do {\n    \
    \        if (ucs4 >= UTF16BASE) {\n                ucs4 -= UTF16BASE;\n      \
    \          bitbuf = (bitbuf << 16) | ((ucs4 >> UTF16SHIFT)\n                 \
    \                          + UTF16HIGHSTART);\n                ucs4 = (ucs4 &\
    \ UTF16MASK) + UTF16LOSTART;\n                utf16flag = 1;\n            } else\
    \ {\n                bitbuf = (bitbuf << 16) | ucs4;\n                utf16flag\
    \ = 0;\n            }\n            bitstogo += 16;\n            /* spew out base64\
    \ */\n            while (bitstogo >= 6) {\n                bitstogo -= 6;\n  \
    \              *dst++ = base64chars[(bitstogo ? (bitbuf >> bitstogo)\n       \
    \                        : bitbuf)\n                                     & 0x3F];\n\
    \            }\n        } while (utf16flag);\n    }\n    /* if in UTF-7 mode,\
    \ finish in ASCII */\n    if (utf7mode) {\n        if (bitstogo) {\n         \
    \   *dst++ = base64chars[(bitbuf << (6 - bitstogo)) & 0x3F];\n        }\n    \
    \    *dst++ = '-';\n    }\n    /* tie off string */\n    *dst = '\\0';\n"
- title: '}'
  contents:
  - '}

    '
