Abstract This document describes a method for applying patches to configuration datastores using data defined with the YANG data modeling language.
There is a need for standard mechanisms to patch datastores defined in [RFC6241], which contain conceptual data that conforms to schema specified with YANG [RFC7950].
An "ordered 'edit' list" approach is needed to provide RESTCONF client developers with more precise RESTCONF client control of the edit procedure than the "plain patch" mechanism found in [RFC8040].
This document defines a media type for a YANG based editing mechanism that can be used with the HTTP PATCH method [RFC5789].
YANG Patch is designed to support the RESTCONF protocol, defined in [RFC8040].
This document only specifies the use of the YANG Patch media type with the RESTCONF protocol.
It may be possible to use YANG Patch with other protocols besides RESTCONF.
This is outside the scope of this document.
For any protocol that supports the YANG Patch media type, if the entire patch document cannot be successfully applied, then the server MUST NOT apply any of the changes.
It may be possible to use YANG Patch with datastore types other than a configuration datastore.
This is outside the scope of this document.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The following terms are defined in [RFC6241]:
configuration data  datastore  configuration datastore  protocol operation
running configuration datastore  state data  user 1.1.2.
The following terms are defined in [RFC7230]:  header field  message body
The following terms are defined in [RFC7231]:  method  request  resource 1.1.3.
The following terms are defined in [RFC7950]:  container
leaf  leaf list  list 1.1.4.
The following terms are defined in [RFC8040]:  application/yang data xml  application/yang data json  data resource  datastore resource  patch  RESTCONF capability  target resource  YANG data template 1.1.5.
The following terms are used within this document:  RESTCONF client: a client that implements the RESTCONF protocol.
RESTCONF server: a server that implements the RESTCONF protocol.
YANG Patch: a conceptual edit request using the "yang patch" YANG Patch template, defined in Section 3.
In HTTP, refers to a PATCH method where a representation uses either the media type "application/yang patch xml" or "application/yang patch json".
YANG Patch Status: a conceptual edit status response using the YANG "yang patch status" YANG data template, defined in Section 3.
In HTTP, refers to a response message for a PATCH method, where it has a representation with either the media type "application/yang data xml" or "application/yang data json".
YANG Patch template: similar to a YANG data template, except that it has a representation with the media type "application/yang patch xml" or "application/yang patch json".
Some protocol message lines within examples throughout this document are split into multiple lines for display purposes only.
It is to be considered to be joined to the next line by deleting the backslash, the following line break, and the leading whitespace of the next line.
Tree Diagram Notations A simplified graphical representation of the data model is used in this document.
Abbreviations before data node names: "rw" means configuration data (read write), "ro" means state data (read only), and "x" means operation resource (executable).
YANG Patch A "YANG Patch" is an ordered list of edits that are applied to the target datastore by the RESTCONF server.
The specific fields are defined in the YANG module in Section 3.
The YANG Patch operation is invoked by the RESTCONF client by sending a PATCH method request with a representation using either the media type "application/yang patch xml" or "application/yang patch json".
This message body representing the YANG Patch input parameters MUST be present.
YANG Patch has some features that are not possible with the "plain patch" mechanism defined in RESTCONF [RFC8040]:
YANG Patch allows multiple sub resources to be edited within the same PATCH method.
YANG Patch allows a more precise edit operation than the "plain patch" mechanism found in [RFC8040].
There are seven operations supported ("create", "delete", "insert", "merge", "move", "replace", and "remove").
YANG Patch uses an "edit" list with an explicit processing order.
The edits are processed in client specified order, and error processing can be precise even when multiple errors occur in the same YANG Patch request.
The YANG Patch "patch id" may be useful for debugging and SHOULD be present in any audit logging records generated by the RESTCONF server for a patch.
The RESTCONF server MUST return the "Accept Patch" header field in an OPTIONS response, as specified in [RFC5789], which includes the media type for YANG Patch.
This is needed by a client to determine the message encoding formats supported by the server (e.g., XML, JSON, or both).
The following is an example of an "Accept Patch" header: Accept Patch: application/yang patch xml,application/yang patch json Note that YANG Patch can only edit data resources.
The PATCH method cannot be used to replace the datastore resource.
Although the "ietf yang patch" YANG module is written using YANG version 1.1 [RFC7950], an implementation of YANG Patch can be used with content defined in YANG version 1 [RFC6020] as well.
A YANG Patch can be encoded in XML format according to [W3C.REC xml 20081126].
It can also be encoded in JSON according to "JSON Encoding of Data Modeled with YANG" [RFC7951].
If any metadata needs to be sent in a JSON message, it is encoded according to "Defining and Using Metadata with YANG" [RFC7952].
The YANG Patch operation uses the RESTCONF target resource URI to identify the resource that will be patched.
interfaces", to edit sub resources within a top level configuration data resource.
The target resource MUST identify exactly one resource instance.
If more than one resource instance is identified, then the request MUST NOT be processed and a "400 Bad Request" error response MUST be sent by the server.
If the target resource does not identify any existing resource instance, then the request MUST NOT be processed and a "404 Not Found" error response MUST be sent by the server.
Each edit with a YANG Patch identifies a target data node for the associated edit.
This is described in Section 2.4.
Request A YANG Patch is identified by a unique "patch id", and it may have an optional comment.
A patch is an ordered collection of edits.
Each edit is identified by an "edit id", and it has an edit operation ("create", "delete", "insert", "merge", "move", "replace", or "remove") that is applied to the target resource.
Each edit can be applied to a sub resource "target" within the target resource.
If the operation is "insert" or "move", then the "where" parameter indicates how the node is inserted or moved.
before" and "after", the "point" parameter specifies the data node insertion point.
The "merge", "replace", "create", "delete", and "remove" edit operations
have exactly the same meanings as those defined for the "operation" attribute described in Section 7.2 of [RFC6241].
Each edit within a YANG Patch MUST identify exactly one data resource instance.
If an edit represents more than one resource instance, then the request MUST NOT be processed and a "400 Bad Request" error response MUST be sent by the server.
If the edit does not identify any existing resource instance and the operation for the edit is not "create", then the request MUST NOT be processed and a "404 Not Found" error response MUST be sent by the server.
A "yang patch status" response MUST be sent by the server identifying the edit or edits that are not valid.
YANG Patch does not provide any access to specific datastores.
How a server processes an edit if it is co located with a Network Configuration Protocol (NETCONF) server that does provide access to individual datastores is left up to the implementation.
A complete datastore cannot be replaced in the same manner as that provided by the <copy config> operation defined in Section 7.3 of [RFC6241].
Only the specified nodes in a YANG Patch are affected.
A message body representing the YANG Patch is sent by the RESTCONF client to specify the edit operation request.
When used with the HTTP PATCH method, this data is identified by the YANG Patch media type.
YANG tree diagram for "yang patch" container:   yang patch   patch id    string   comment?
yang patch status Response A message body representing the YANG Patch Status is returned to the RESTCONF client to report the detailed status of the edit operation.
When used with the HTTP PATCH method, this data is identified by the YANG Patch Status media type; the syntax specification is defined in Section 3.
YANG tree diagram for "yang patch status" container:   yang patch status   patch
The target data node for each edit operation is determined by the value of the target resource in the request and the "target" leaf within each "edit" entry.
If the target resource specified in the request URI identifies a datastore resource, then the path string in the "target" leaf is treated as an absolute path expression identifying the target data node for the corresponding edit.
The first node specified in the "target" leaf is a top level data node defined within a YANG module.
If the target resource specified in the request URI identifies a configuration data resource, then the path string in the "target" leaf is treated as a relative path expression.
The first node specified in the "target" leaf is a child configuration data node of the data node associated with the target resource.
Each YANG Patch edit specifies one edit operation on the target data node.
The set of operations is aligned with the NETCONF edit operations but also includes some new operations.
replace the target data resource with the edit value
If a YANG Patch is completed without errors, the RESTCONF server MUST return a "yang patch status" message with a "global status" choice set to "ok".
Refer to Appendix A.1.2 for an example of a successful YANG Patch response.
If a well formed, schema valid YANG Patch message is received, then the RESTCONF server will process the supplied edits in ascending order.
The following error modes apply to the processing of this "edit" list: If a YANG Patch is completed with errors, the RESTCONF server SHOULD return a "yang patch status" message.
It is possible (e.g., within a distributed implementation) that an invalid request will be rejected before the YANG Patch edits are processed.
In this case, the server MUST send the appropriate HTTP error response instead.
Refer to Appendix A.1.1 for an example of an error YANG Patch response.
A URI is defined to identify the YANG Patch extension to the base RESTCONF protocol.
If the RESTCONF server supports the YANG Patch media type, then the ":yang patch" RESTCONF capability defined in Section 4.3 MUST be present in the "capability" leaf list in the "ietf restconf monitoring" module defined in [RFC8040].
The "ietf yang patch" module defines conceptual definitions with the "yang data" extension statements, which are not meant to be implemented as datastore contents by a RESTCONF server.
The "ietf restconf" module from [RFC8040] is used by this module for the "yang data" extension definition.
file "ietf yang patch@2017 02 22.yang" module ietf yang patch { yang version 1.1; namespace "urn:ietf:params:xml:ns:
yang:ietf yang patch"; prefix "ypatch"; import ietf restconf { prefix rc; } organization "IETF NETCONF (Network Configuration) Working Group"; contact
Kent Watsen <mailto:kwatsen@juniper.net>"; description "
This module contains conceptual YANG specifications for the YANG Patch and YANG Patch Status data structures.
Note that the YANG definitions within this module do not represent configuration data of any kind.
The YANG grouping statements provide a normative syntax for XML and JSON message encoding purposes.
2017 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8072; see the RFC itself for full legal notices."; revision 2017
02 22 { description "Initial revision."
The document root for this expression is the target resource that is specified in the protocol operation (e.g., the URI for the PATCH request).
A grouping that contains a YANG container representing the syntax and semantics of a YANG Patch edit request message."; container yang patch { description "Represents a conceptual sequence of datastore edits, called a patch.
Each patch is given a client assigned patch identifier.
Each edit MUST be applied in ascending order, and all edits MUST be applied.
If any errors occur, then the target datastore MUST NOT be changed by the YANG Patch operation.
It is possible for a datastore constraint violation to occur due to any node in the datastore, including nodes not included in the 'edit' list.
Any validation errors MUST be reported in the reply message."; reference "RFC 7950, Section 8.3."; leaf patch
mandatory true; description "An arbitrary string provided by the client to identify the entire patch.
Error messages returned by the server that pertain to this patch will be identified by this 'patch id' value.
A client SHOULD attempt to generate unique 'patch
This value SHOULD be present in any audit logging records generated by the server for the patch."
; } list edit { key edit id; ordered by user; description "Represents one edit within the YANG Patch request message.
The 'edit' list is applied in the following manner: The first edit is conceptually applied to a copy of the existing target datastore, e.g., the running configuration datastore.
Each ascending edit is conceptually applied to the result of the previous edit(s).
After all edits have been successfully processed, the result is validated according to YANG constraints.
If successful, the server will attempt to apply the result to the target datastore."; leaf edit id { type string; description "Arbitrary string index for the edit.
Error messages returned by the server that pertain to a specific edit will be identified by this value."
; } leaf operation { type enumeration { enum create { description "The target data node is created using the supplied value, only if it does not already exist.
The 'target' leaf identifies the data node to be created, not the parent data node."
; } enum delete { description "Delete the target node, only if the data resource currently exists; otherwise, return an error."
; } enum insert { description "Insert the supplied value into a user ordered list or leaf list entry.
The target node must represent a new data resource.
If the 'where' parameter is set to 'before' or 'after', then the 'point' parameter identifies the insertion point for the target node."
; } enum merge { description "The supplied value is merged with the target data node."
; } enum move { description "Move the target node.
Reorder a user ordered list or leaf list.
The target node must represent an existing data resource.
node if it currently exists."
; } leaf target { type target resource offset; mandatory true; description "Identifies the target data node for the edit operation.
; } type target resource offset; description "The absolute URL path for the data node that is being used as the insertion point or move point for the target of this 'edit' entry."
This leaf only applies for 'insert' or 'move' operations."
; } type enumeration { enum before { description "Insert or move a data node before the data resource identified by the 'point' parameter."
; } enum after { description "Insert or move a data node after the data resource identified by the 'point' parameter."
; } enum first { description "Insert or move a data node
so it becomes ordered as the first entry."
; } enum last { description "Insert or move a data node
so it becomes ordered as the last entry."
YANG only allows these operations for list and leaf list data nodes that are 'ordered by user'.
; } description "Value used for this edit operation.
The anydata 'value' contains the target resource associated with the 'target' leaf.
grouping yang patch grouping yang patch status { description "
A grouping that contains a YANG container representing the syntax and semantics of a YANG Patch Status response message."; container yang patch status { description "A container representing the response message sent by the server after a YANG Patch edit request message has been processed."; leaf patch
mandatory true; description "The 'patch
If all edits succeeded and the 'global status' returned is 'ok', then a server MAY omit this container."
; list edit { key edit id; description "Represents a list of status responses, corresponding to edits in the YANG Patch request message.
If an 'edit' entry was skipped or not reached by the server, then this list will not contain a corresponding entry for that edit."; leaf edit id { type string; description "Response status is for the 'edit' list entry with this 'edit id' value."
; } choice edit status choice { description "A choice between different types of status responses for each 'edit' entry."; leaf ok { type empty; description
grouping yang patch status } <CODE ENDS
Registrations for New URI and YANG Module
This document registers one URI as a namespace in the "IETF XML Registry" [RFC3688].
It follows the format in RFC 3688.
N/A; the requested URI is an XML namespace.
This document registers one YANG module in the "YANG Module Names" registry [RFC6020].
: yang patch xml Required parameters:
None Encoding considerations: 8 bit
The "utf 8" charset is always used for this type.
Each conceptual YANG data node is encoded according to the XML Encoding Rules and Canonical Format for the specific YANG data node type defined in [RFC7950].
In addition, the "yang patch" YANG Patch template found in RFC 8072 defines the structure of a YANG Patch request.
Security considerations related to the generation and consumption of RESTCONF messages are discussed in Section 5 of RFC 8072.
Additional security considerations are specific to the semantics of particular YANG data models.
Each YANG module is expected to specify security considerations for the YANG data defined in that module.
Interoperability considerations: RFC 8072 specifies the format of conforming messages and the interpretation thereof.
Published specification: RFC 8072 Applications that use this media type:
Instance document data parsers used within a protocol or automation tool that utilize the YANG Patch data structure.
Fragment identifier considerations: The syntax and semantics of fragment identifiers are the same as the syntax and semantics specified for the "application/xml" media type.
Deprecated alias names for this type:
: None Macintosh file type code(s): "TEXT" Person & email address to contact for further information: See the Authors' Addresses section of RFC 8072.
N/A Author: See the Authors' Addresses section of RFC 8072.
Internet Engineering Task Force (mailto:iesg@ietf.org).
(standards tree only): no 4.2.2.
Media Type "application/yang patch json" Type name:
yang patch json Required parameters:
None Encoding considerations: 8 bit
The "utf 8" charset is always used for this type.
Each conceptual YANG data node is encoded according to RFC 7951.
A metadata annotation is encoded according to RFC 7952.
In addition, the "yang patch" YANG Patch template found in RFC 8072 defines the structure of a YANG Patch request.
Security considerations related to the generation and consumption of RESTCONF messages are discussed in Section 5 of RFC 8072.
Additional security considerations are specific to the semantics of particular YANG data models.
Each YANG module is expected to specify security considerations for the YANG data defined in that module.
Interoperability considerations: RFC 8072 specifies the format of conforming messages and the interpretation thereof.
Published specification: RFC 8072 Applications that use this media type:
Instance document data parsers used within a protocol or automation tool that utilize the YANG Patch data structure.
Fragment identifier considerations: The syntax and semantics of fragment identifiers are the same as the syntax and semantics specified for the "application/json" media type.
Deprecated alias names for this type:
: None Macintosh file type code(s): "TEXT" Person & email address to contact for further information: See the Authors' Addresses section of RFC 8072.
N/A Author: See the Authors' Addresses section of RFC 8072.
Internet Engineering Task Force (mailto:iesg@ietf.org).
(standards tree only): no 4.3.
This document registers one capability identifier in the "RESTCONF Capability URNs" registry [RFC8040].
The review policy for this registry is "IETF Review" [RFC5226].
The YANG Patch media type does not introduce any significant new security threats, beyond what is described in [RFC8040].
This document defines edit processing instructions for a variant of the PATCH method, as used within the RESTCONF protocol.
Message integrity is provided by the RESTCONF protocol.
There is no additional capability to validate that a patch has not been altered.
It may be possible to use YANG Patch with other protocols besides RESTCONF; this topic is outside the scope of this document.
For RESTCONF, both the client and server MUST be authenticated according to Section 2 of [RFC8040].
It is important for RESTCONF server implementations to carefully validate all the edit request parameters in some manner.
If the entire YANG Patch request cannot be completed, then no configuration changes to the system are done.
A PATCH request MUST be applied atomically, as specified in Section 2 of [RFC5789].
A RESTCONF server implementation SHOULD attempt to prevent system disruption due to incremental processing of the YANG Patch "edit" list.
It may be possible to construct an attack on such a RESTCONF server, which relies on the edit processing order mandated by YANG Patch.
A server SHOULD apply only the fully validated configuration to the underlying system.
For example, an "edit" list that deleted an interface and then recreated it could cause system disruption if the "edit" list was incrementally applied.
A RESTCONF server implementation SHOULD attempt to prevent system disruption due to excessive resource consumption required to fulfill YANG Patch edit requests.
On such an implementation, it may be possible to construct an attack that attempts to consume all available memory or other resource types.
The example YANG module used in this document represents a simple media jukebox interface.
The "example jukebox" YANG module is defined in [RFC8040].
YANG tree diagram for the "example jukebox" module:  rw jukebox!
ro song number    uint32 A.1.
This section includes RESTCONF examples.
Most examples are shown in JSON encoding [RFC7159], and some are shown in XML encoding [W3C.REC xml 20081126].
Error The following example shows several songs being added to an existing album.
Each edit contains one song.
The first song already exists, so an error will be reported for that edit.
The rest of the edits were not attempted, since the first edit failed.
XML encoding is used in this example.
Request from the RESTCONF client: PATCH /restconf/data/example jukebox:
application/yang data xml Content Type: application/yang patch
Bridge%20Burning</target> <value> <song xmlns "http://example.com/ns/example jukebox"> <name>
> <location>/media/bridge burning.mp3</location> <format>MP3</format> <length>288</length> </song
<song xmlns "http://example.com/ns/example jukebox"> <name>Rope</name>
> </edit> <edit> <edit id
<value> <song xmlns "http://example.com/ns/example jukebox"> <name>
XML response from the RESTCONF server: HTTP/1.1 409 Conflict Date:
Thu, 26 Jan 2017 20:56:30 GMT Server:
Thu, 26 Jan 2017 20:56:30
GMT Content Type: application/yang data xml
> Data already exists; cannot be created </error message> </error
> </edit status> </yang patch status> JSON response from the RESTCONF server
: The following response is shown in JSON format to highlight the difference in the "error path" object encoding.
For JSON, the instance identifier encoding specified in [RFC7951] is used.
Thu, 26 Jan 2017 20:56:30 GMT Server:
Thu, 26 Jan 2017 20:56:30
The following example shows several songs being added to an existing album.
Each of two edits contains one song.
Both edits succeed, and new sub resources are created.
Request from the RESTCONF client: PATCH /restconf/data/example jukebox:
jukebox/\ library/artist Foo%20Fighters/album Wasting%20Light \
Thu, 26 Jan 2017 20:56:30 GMT Server:
Thu, 26 Jan 2017 20:56:30
The following example shows a song being inserted within an existing playlist.
"Foo One" is being inserted after song "5" in the playlist.
The operation succeeds, so a non error reply can be provided.
Request from the RESTCONF client: PATCH /restconf/data/example jukebox:
Thu, 26 Jan 2017 20:56:30
The following example shows a song being moved within an existing playlist.
"Foo One" is being moved after song "3" in the playlist.
Note that no "value" parameter is needed for a "move" operation.
The operation succeeds, so a non error reply can be provided.
Request from the RESTCONF client: PATCH /restconf/data/example jukebox:
Move song 1 after song 3", "edit" :
Thu, 26 Jan 2017 20:56:30 GMT Server:
Thu, 26 Jan 2017 20:56:30
The following example shows how three top level data nodes from different modules can be edited at the same time.
Example module "foo" defines leaf X.  Example module "bar" defines container Y, with child leafs A and B.
Thu, 26 Jan 2017 20:55:30 GMT Content Type: application/yang data json { "ietf yang patch:
