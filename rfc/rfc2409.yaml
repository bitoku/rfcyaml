- title: __initial_text__
  contents:
  - '                    The Internet Key Exchange (IKE)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   5.3 A Revised method of Authentication with Public Key\
    \ Encryption. 13\n   10 Security Considerations........................................\
    \ 28\n   11 IANA Considerations............................................ 30\n\
    \   12 Acknowledgments................................................ 31\n  \
    \ 13 References..................................................... 31\n   Appendix\
    \ A........................................................ 33\n   Appendix B........................................................\
    \ 37\n   Authors' Addresses................................................ 40\n\
    \   Authors' Note..................................................... 40\n  \
    \ Full Copyright Statement.......................................... 41\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   ISAKMP ([MSST98]) provides a framework for authentication and\
    \ key\n   exchange but does not define them.  ISAKMP is designed to be key\n \
    \  exchange independant; that is, it is designed to support many\n   different\
    \ key exchanges.\n   Oakley ([Orm96]) describes a series of key exchanges-- called\n\
    \   \"modes\"-- and details the services provided by each (e.g. perfect\n   forward\
    \ secrecy for keys, identity protection, and authentication).\n   SKEME ([SKEME])\
    \ describes a versatile key exchange technique which\n   provides anonymity, repudiability,\
    \ and quick key refreshment.\n   This document describes a protocol using part\
    \ of Oakley and part of\n   SKEME in conjunction with ISAKMP to obtain authenticated\
    \ keying\n   material for use with ISAKMP, and for other security associations\n\
    \   such as AH and ESP for the IETF IPsec DOI.\n"
- title: 2. Discussion
  contents:
  - "2. Discussion\n   This memo describes a hybrid protocol. The purpose is to negotiate,\n\
    \   and provide authenticated keying material for, security associations\n   in\
    \ a protected manner.\n   Processes which implement this memo can be used for\
    \ negotiating\n   virtual private networks (VPNs) and also for providing a remote\
    \ user\n   from a remote site (whose IP address need not be known beforehand)\n\
    \   access to a secure host or network.\n   Client negotiation is supported. \
    \ Client mode is where the\n   negotiating parties are not the endpoints for which\
    \ security\n   association negotiation is taking place.  When used in client mode,\n\
    \   the identities of the end parties remain hidden.\n   This does not implement\
    \ the entire Oakley protocol, but only a subset\n   necessary to satisfy its goals.\
    \ It does not claim conformance or\n   compliance with the entire Oakley protocol\
    \ nor is it dependant in any\n   way on the Oakley protocol.\n   Likewise, this\
    \ does not implement the entire SKEME protocol, but only\n   the method of public\
    \ key encryption for authentication and its\n   concept of fast re-keying using\
    \ an exchange of nonces. This protocol\n   is not dependant in any way on the\
    \ SKEME protocol.\n"
- title: 3. Terms and Definitions
  contents:
  - '3. Terms and Definitions

    '
- title: 3.1 Requirements Terminology
  contents:
  - "3.1 Requirements Terminology\n   Keywords \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\" and\n   \"MAY\" that appear in this document are\
    \ to be interpreted as described\n   in [Bra97].\n"
- title: 3.2 Notation
  contents:
  - "3.2 Notation\n   The following notation is used throughout this memo.\n     HDR\
    \ is an ISAKMP header whose exchange type is the mode.  When\n     writen as HDR*\
    \ it indicates payload encryption.\n     SA is an SA negotiation payload with\
    \ one or more proposals. An\n     initiator MAY provide multiple proposals for\
    \ negotiation; a\n     responder MUST reply with only one.\n     <P>_b indicates\
    \ the body of payload <P>-- the ISAKMP generic\n     vpayload is not included.\n\
    \     SAi_b is the entire body of the SA payload (minus the ISAKMP\n     generic\
    \ header)-- i.e. the DOI, situation, all proposals and all\n     transforms offered\
    \ by the Initiator.\n     CKY-I and CKY-R are the Initiator's cookie and the Responder's\n\
    \     cookie, respectively, from the ISAKMP header.\n     g^xi and g^xr are the\
    \ Diffie-Hellman ([DH]) public values of the\n     initiator and responder respectively.\n\
    \     g^xy is the Diffie-Hellman shared secret.\n     KE is the key exchange payload\
    \ which contains the public\n     information exchanged in a Diffie-Hellman exchange.\
    \ There is no\n     particular encoding (e.g. a TLV) used for the data of a KE\
    \ payload.\n     Nx is the nonce payload; x can be: i or r for the ISAKMP initiator\n\
    \     and responder respectively.\n     IDx is the identification payload for\
    \ \"x\".  x can be: \"ii\" or \"ir\"\n     for the ISAKMP initiator and responder\
    \ respectively during phase\n     one negotiation; or \"ui\" or \"ur\" for the\
    \ user initiator and\n     responder respectively during phase two.  The ID payload\
    \ format for\n     the Internet DOI is defined in [Pip97].\n     SIG is the signature\
    \ payload. The data to sign is exchange-\n     specific.\n     CERT is the certificate\
    \ payload.\n     HASH (and any derivitive such as HASH(2) or HASH_I) is the hash\n\
    \     payload. The contents of the hash are specific to the\n     authentication\
    \ method.\n     prf(key, msg) is the keyed pseudo-random function-- often a keyed\n\
    \     hash function-- used to generate a deterministic output that\n     appears\
    \ pseudo-random.  prf's are used both for key derivations and\n     for authentication\
    \ (i.e. as a keyed MAC). (See [KBC96]).\n     SKEYID is a string derived from\
    \ secret material known only to the\n     active players in the exchange.\n  \
    \   SKEYID_e is the keying material used by the ISAKMP SA to protect\n     the\
    \ confidentiality of its messages.\n     SKEYID_a is the keying material used\
    \ by the ISAKMP SA to\n     authenticate its messages.\n     SKEYID_d is the keying\
    \ material used to derive keys for non-ISAKMP\n     security associations.\n \
    \    <x>y indicates that \"x\" is encrypted with the key \"y\".\n     --> signifies\
    \ \"initiator to responder\" communication (requests).\n     <-- signifies \"\
    responder to initiator\" communication (replies).\n      |  signifies concatenation\
    \ of information-- e.g. X | Y is the\n     concatentation of X with Y.\n     [x]\
    \ indicates that x is optional.\n   Message encryption (when noted by a '*' after\
    \ the ISAKMP header) MUST\n   begin immediately after the ISAKMP header. When\
    \ communication is\n   protected, all payloads following the ISAKMP header MUST\
    \ be\n   encrypted.  Encryption keys are generated from SKEYID_e in a manner\n\
    \   that is defined for each algorithm.\n"
- title: 3.3 Perfect Forward Secrecy
  contents:
  - "3.3 Perfect Forward Secrecy\n   When used in the memo Perfect Forward Secrecy\
    \ (PFS) refers to the\n   notion that compromise of a single key will permit access\
    \ to only\n   data protected by a single key. For PFS to exist the key used to\n\
    \   protect transmission of data MUST NOT be used to derive any\n   additional\
    \ keys, and if the key used to protect transmission of data\n   was derived from\
    \ some other keying material, that material MUST NOT\n   be used to derive any\
    \ more keys.\n   Perfect Forward Secrecy for both keys and identities is provided\
    \ in\n   this protocol. (Sections 5.5 and 8).\n"
- title: 3.4 Security Association
  contents:
  - "3.4 Security Association\n   A security association (SA) is a set of policy and\
    \ key(s) used to\n   protect information. The ISAKMP SA is the shared policy and\
    \ key(s)\n   used by the negotiating peers in this protocol to protect their\n\
    \   communication.\n"
- title: 4. Introduction
  contents:
  - "4. Introduction\n   Oakley and SKEME each define a method to establish an authenticated\n\
    \   key exchange. This includes payloads construction, the information\n   payloads\
    \ carry, the order in which they are processed and how they\n   are used.\n  \
    \ While Oakley defines \"modes\", ISAKMP defines \"phases\".  The\n   relationship\
    \ between the two is very straightforward and IKE presents\n   different exchanges\
    \ as modes which operate in one of two phases.\n   Phase 1 is where the two ISAKMP\
    \ peers establish a secure,\n   authenticated channel with which to communicate.\
    \  This is called the\n   ISAKMP Security Association (SA). \"Main Mode\" and\
    \ \"Aggressive Mode\"\n   each accomplish a phase 1 exchange. \"Main Mode\" and\
    \ \"Aggressive Mode\"\n   MUST ONLY be used in phase 1.\n   Phase 2 is where Security\
    \ Associations are negotiated on behalf of\n   services such as IPsec or any other\
    \ service which needs key material\n   and/or parameter negotiation. \"Quick Mode\"\
    \ accomplishes a phase 2\n   exchange. \"Quick Mode\" MUST ONLY be used in phase\
    \ 2.\n   \"New Group Mode\" is not really a phase 1 or phase 2.  It follows\n\
    \   phase 1, but serves to establish a new group which can be used in\n   future\
    \ negotiations. \"New Group Mode\" MUST ONLY be used after phase\n   1.\n   The\
    \ ISAKMP SA is bi-directional. That is, once established, either\n   party may\
    \ initiate Quick Mode, Informational, and New Group Mode\n   Exchanges.  Per the\
    \ base ISAKMP document, the ISAKMP SA is identified\n   by the Initiator's cookie\
    \ followed by the Responder's cookie-- the\n   role of each party in the phase\
    \ 1 exchange dictates which cookie is\n   the Initiator's. The cookie order established\
    \ by the phase 1 exchange\n   continues to identify the ISAKMP SA regardless of\
    \ the direction the\n   Quick Mode, Informational, or New Group exchange. In other\
    \ words, the\n   cookies MUST NOT swap places when the direction of the ISAKMP\
    \ SA\n   changes.\n   With the use of ISAKMP phases, an implementation can accomplish\
    \ very\n   fast keying when necessary.  A single phase 1 negotiation may be used\n\
    \   for more than one phase 2 negotiation.  Additionally a single phase 2\n  \
    \ negotiation can request multiple Security Associations.  With these\n   optimizations,\
    \ an implementation can see less than one round trip per\n   SA as well as less\
    \ than one DH exponentiation per SA.  \"Main Mode\"\n   for phase 1 provides identity\
    \ protection.  When identity protection\n   is not needed, \"Aggressive Mode\"\
    \ can be used to reduce round trips\n   even further.  Developer hints for doing\
    \ these optimizations are\n   included below. It should also be noted that using\
    \ public key\n   encryption to authenticate an Aggressive Mode exchange will still\n\
    \   provide identity protection.\n   This protocol does not define its own DOI\
    \ per se. The ISAKMP SA,\n   established in phase 1, MAY use the DOI and situation\
    \ from a non-\n   ISAKMP service (such as the IETF IPSec DOI [Pip97]). In this\
    \ case an\n   implementation MAY choose to restrict use of the ISAKMP SA for\n\
    \   establishment of SAs for services of the same DOI. Alternately, an\n   ISAKMP\
    \ SA MAY be established with the value zero in both the DOI and\n   situation\
    \ (see [MSST98] for a description of these fields) and in\n   this case implementations\
    \ will be free to establish security services\n   for any defined DOI using this\
    \ ISAKMP SA. If a DOI of zero is used\n   for establishment of a phase 1 SA, the\
    \ syntax of the identity\n   payloads used in phase 1 is that defined in [MSST98]\
    \ and not from any\n   DOI-- e.g. [Pip97]-- which may further expand the syntax\
    \ and\n   semantics of identities.\n   The following attributes are used by IKE\
    \ and are negotiated as part\n   of the ISAKMP Security Association.  (These attributes\
    \ pertain only\n   to the ISAKMP Security Association and not to any Security\n\
    \   Associations that ISAKMP may be negotiating on behalf of other\n   services.)\n\
    \      - encryption algorithm\n      - hash algorithm\n      - authentication\
    \ method\n      - information about a group over which to do Diffie-Hellman.\n\
    \   All of these attributes are mandatory and MUST be negotiated. In\n   addition,\
    \ it is possible to optionally negotiate a psuedo-random\n   function (\"prf\"\
    ).  (There are currently no negotiable pseudo-random\n   functions defined in\
    \ this document. Private use attribute values can\n   be used for prf negotiation\
    \ between consenting parties). If a \"prf\"\n   is not negotiation, the HMAC (see\
    \ [KBC96]) version of the negotiated\n   hash algorithm is used as a pseudo-random\
    \ function. Other non-\n   mandatory attributes are described in Appendix A. The\
    \ selected hash\n   algorithm MUST support both native and HMAC modes.\n   The\
    \ Diffie-Hellman group MUST be either specified using a defined\n   group description\
    \ (section 6) or by defining all attributes of a\n   group (section 5.6). Group\
    \ attributes (such as group type or prime--\n   see Appendix A) MUST NOT be offered\
    \ in conjunction with a previously\n   defined group (either a reserved group\
    \ description or a private use\n   description that is established after conclusion\
    \ of a New Group Mode\n   exchange).\n   IKE implementations MUST support the\
    \ following attribute values:\n      - DES [DES] in CBC mode with a weak, and\
    \ semi-weak, key check\n      (weak and semi-weak keys are referenced in [Sch96]\
    \ and listed in\n      Appendix A). The key is derived according to Appendix B.\n\
    \      - MD5 [MD5] and SHA [SHA}.\n      - Authentication via pre-shared keys.\n\
    \      - MODP over default group number one (see below).\n   In addition, IKE\
    \ implementations SHOULD support: 3DES for encryption;\n   Tiger ([TIGER]) for\
    \ hash; the Digital Signature Standard, RSA [RSA]\n   signatures and authentication\
    \ with RSA public key encryption; and\n   MODP group number 2.  IKE implementations\
    \ MAY support any additional\n   encryption algorithms defined in Appendix A and\
    \ MAY support ECP and\n   EC2N groups.\n   The IKE modes described here MUST be\
    \ implemented whenever the IETF\n   IPsec DOI [Pip97] is implemented. Other DOIs\
    \ MAY use the modes\n   described here.\n"
- title: 5. Exchanges
  contents:
  - "5. Exchanges\n   There are two basic methods used to establish an authenticated\
    \ key\n   exchange: Main Mode and Aggressive Mode. Each generates authenticated\n\
    \   keying material from an ephemeral Diffie-Hellman exchange. Main Mode\n   MUST\
    \ be implemented; Aggressive Mode SHOULD be implemented. In\n   addition, Quick\
    \ Mode MUST be implemented as a mechanism to generate\n   fresh keying material\
    \ and negotiate non-ISAKMP security services. In\n   addition, New Group Mode\
    \ SHOULD be implemented as a mechanism to\n   define private groups for Diffie-Hellman\
    \ exchanges. Implementations\n   MUST NOT switch exchange types in the middle\
    \ of an exchange.\n   Exchanges conform to standard ISAKMP payload syntax, attribute\n\
    \   encoding, timeouts and retransmits of messages, and informational\n   messages--\
    \ e.g a notify response is sent when, for example, a\n   proposal is unacceptable,\
    \ or a signature verification or decryption\n   was unsuccessful, etc.\n   The\
    \ SA payload MUST precede all other payloads in a phase 1 exchange.\n   Except\
    \ where otherwise noted, there are no requirements for ISAKMP\n   payloads in\
    \ any message to be in any particular order.\n   The Diffie-Hellman public value\
    \ passed in a KE payload, in either a\n   phase 1 or phase 2 exchange, MUST be\
    \ the length of the negotiated\n   Diffie-Hellman group enforced, if necessary,\
    \ by pre-pending the value\n   with zeros.\n   The length of nonce payload MUST\
    \ be between 8 and 256 bytes\n   inclusive.\n   Main Mode is an instantiation\
    \ of the ISAKMP Identity Protect\n   Exchange: The first two messages negotiate\
    \ policy; the next two\n   exchange Diffie-Hellman public values and ancillary\
    \ data (e.g.\n   nonces) necessary for the exchange; and the last two messages\n\
    \   authenticate the Diffie-Hellman Exchange. The authentication method\n   negotiated\
    \ as part of the initial ISAKMP exchange influences the\n   composition of the\
    \ payloads but not their purpose. The XCHG for Main\n   Mode is ISAKMP Identity\
    \ Protect.\n   Similarly, Aggressive Mode is an instantiation of the ISAKMP\n\
    \   Aggressive Exchange. The first two messages negotiate policy,\n   exchange\
    \ Diffie-Hellman public values and ancillary data necessary\n   for the exchange,\
    \ and identities.  In addition the second message\n   authenticates the responder.\
    \ The third message authenticates the\n   initiator and provides a proof of participation\
    \ in the exchange. The\n   XCHG for Aggressive Mode is ISAKMP Aggressive.  The\
    \ final message MAY\n   NOT be sent under protection of the ISAKMP SA allowing\
    \ each party to\n   postpone exponentiation, if desired, until negotiation of\
    \ this\n   exchange is complete. The graphic depictions of Aggressive Mode show\n\
    \   the final payload in the clear; it need not be.\n   Exchanges in IKE are not\
    \ open ended and have a fixed number of\n   messages.  Receipt of a Certificate\
    \ Request payload MUST NOT extend\n   the number of messages transmitted or expected.\n\
    \   Security Association negotiation is limited with Aggressive Mode. Due\n  \
    \ to message construction requirements the group in which the Diffie-\n   Hellman\
    \ exchange is performed cannot be negotiated. In addition,\n   different authentication\
    \ methods may further constrain attribute\n   negotiation. For example, authentication\
    \ with public key encryption\n   cannot be negotiated and when using the revised\
    \ method of public key\n   encryption for authentication the cipher and hash cannot\
    \ be\n   negotiated. For situations where the rich attribute negotiation\n   capabilities\
    \ of IKE are required Main Mode may be required.\n   Quick Mode and New Group\
    \ Mode have no analog in ISAKMP. The XCHG\n   values for Quick Mode and New Group\
    \ Mode are defined in Appendix A.\n   Main Mode, Aggressive Mode, and Quick Mode\
    \ do security association\n   negotiation. Security Association offers take the\
    \ form of Tranform\n   Payload(s) encapsulated in Proposal Payload(s) encapsulated\
    \ in\n   Security Association (SA) payload(s). If multiple offers are being\n\
    \   made for phase 1 exchanges (Main Mode and Aggressive Mode) they MUST\n   take\
    \ the form of multiple Transform Payloads for a single Proposal\n   Payload in\
    \ a single SA payload. To put it another way, for phase 1\n   exchanges there\
    \ MUST NOT be multiple Proposal Payloads for a single\n   SA payload and there\
    \ MUST NOT be multiple SA payloads. This document\n   does not proscribe such\
    \ behavior on offers in phase 2 exchanges.\n   There is no limit on the number\
    \ of offers the initiator may send to\n   the responder but conformant implementations\
    \ MAY choose to limit the\n   number of offers it will inspect for performance\
    \ reasons.\n   During security association negotiation, initiators present offers\n\
    \   for potential security associations to responders. Responders MUST\n   NOT\
    \ modify attributes of any offer, attribute encoding excepted (see\n   Appendix\
    \ A).  If the initiator of an exchange notices that attribute\n   values have\
    \ changed or attributes have been added or deleted from an\n   offer made, that\
    \ response MUST be rejected.\n   Four different authentication methods are allowed\
    \ with either Main\n   Mode or Aggressive Mode-- digital signature, two forms\
    \ of\n   authentication with public key encryption, or pre-shared key. The\n \
    \  value SKEYID is computed seperately for each authentication method.\n     For\
    \ signatures:            SKEYID = prf(Ni_b | Nr_b, g^xy)\n     For public key\
    \ encryption: SKEYID = prf(hash(Ni_b | Nr_b), CKY-I |\n   CKY-R)\n     For pre-shared\
    \ keys:       SKEYID = prf(pre-shared-key, Ni_b |\n   Nr_b)\n   The result of\
    \ either Main Mode or Aggressive Mode is three groups of\n   authenticated keying\
    \ material:\n      SKEYID_d = prf(SKEYID, g^xy | CKY-I | CKY-R | 0)\n      SKEYID_a\
    \ = prf(SKEYID, SKEYID_d | g^xy | CKY-I | CKY-R | 1)\n      SKEYID_e = prf(SKEYID,\
    \ SKEYID_a | g^xy | CKY-I | CKY-R | 2)\n   and agreed upon policy to protect further\
    \ communications. The values\n   of 0, 1, and 2 above are represented by a single\
    \ octet. The key used\n   for encryption is derived from SKEYID_e in an algorithm-specific\n\
    \   manner (see appendix B).\n   To authenticate either exchange the initiator\
    \ of the protocol\n   generates HASH_I and the responder generates HASH_R where:\n\
    \    HASH_I = prf(SKEYID, g^xi | g^xr | CKY-I | CKY-R | SAi_b | IDii_b )\n   \
    \ HASH_R = prf(SKEYID, g^xr | g^xi | CKY-R | CKY-I | SAi_b | IDir_b )\n   For\
    \ authentication with digital signatures, HASH_I and HASH_R are\n   signed and\
    \ verified; for authentication with either public key\n   encryption or pre-shared\
    \ keys, HASH_I and HASH_R directly\n   authenticate the exchange.  The entire\
    \ ID payload (including ID type,\n   port, and protocol but excluding the generic\
    \ header) is hashed into\n   both HASH_I and HASH_R.\n   As mentioned above, the\
    \ negotiated authentication method influences\n   the content and use of messages\
    \ for Phase 1 Modes, but not their\n   intent.  When using public keys for authentication,\
    \ the Phase 1\n   exchange can be accomplished either by using signatures or by\
    \ using\n   public key encryption (if the algorithm supports it). Following are\n\
    \   Phase 1 exchanges with different authentication options.\n"
- title: 5.1 IKE Phase 1 Authenticated With Signatures
  contents:
  - "5.1 IKE Phase 1 Authenticated With Signatures\n   Using signatures, the ancillary\
    \ information exchanged during the\n   second roundtrip are nonces; the exchange\
    \ is authenticated by signing\n   a mutually obtainable hash. Main Mode with signature\
    \ authentication\n   is described as follows:\n        Initiator             \
    \             Responder\n       -----------                        -----------\n\
    \        HDR, SA                     -->\n                                   \
    \ <--    HDR, SA\n        HDR, KE, Ni                 -->\n                  \
    \                  <--    HDR, KE, Nr\n        HDR*, IDii, [ CERT, ] SIG_I -->\n\
    \                                    <--    HDR*, IDir, [ CERT, ] SIG_R\n   Aggressive\
    \ mode with signatures in conjunction with ISAKMP is\n   described as follows:\n\
    \        Initiator                          Responder\n       -----------    \
    \                    -----------\n        HDR, SA, KE, Ni, IDii       -->\n  \
    \                                  <--    HDR, SA, KE, Nr, IDir,\n           \
    \                                     [ CERT, ] SIG_R\n        HDR, [ CERT, ]\
    \ SIG_I        -->\n   In both modes, the signed data, SIG_I or SIG_R, is the\
    \ result of the\n   negotiated digital signature algorithm applied to HASH_I or\
    \ HASH_R\n   respectively.\n   In general the signature will be over HASH_I and\
    \ HASH_R as above\n   using the negotiated prf, or the HMAC version of the negotiated\
    \ hash\n   function (if no prf is negotiated). However, this can be overridden\n\
    \   for construction of the signature if the signature algorithm is tied\n   to\
    \ a particular hash algorithm (e.g. DSS is only defined with SHA's\n   160 bit\
    \ output). In this case, the signature will be over HASH_I and\n   HASH_R as above,\
    \ except using the HMAC version of the hash algorithm\n   associated with the\
    \ signature method.  The negotiated prf and hash\n   function would continue to\
    \ be used for all other prescribed pseudo-\n   random functions.\n   Since the\
    \ hash algorithm used is already known there is no need to\n   encode its OID\
    \ into the signature. In addition, there is no binding\n   between the OIDs used\
    \ for RSA signatures in PKCS #1 and those used in\n   this document. Therefore,\
    \ RSA signatures MUST be encoded as a private\n   key encryption in PKCS #1 format\
    \ and not as a signature in PKCS #1\n   format (which includes the OID of the\
    \ hash algorithm). DSS signatures\n   MUST be encoded as r followed by s.\n  \
    \ One or more certificate payloads MAY be optionally passed.\n"
- title: 5.2 Phase 1 Authenticated With Public Key Encryption
  contents:
  - "5.2 Phase 1 Authenticated With Public Key Encryption\n   Using public key encryption\
    \ to authenticate the exchange, the\n   ancillary information exchanged is encrypted\
    \ nonces. Each party's\n   ability to reconstruct a hash (proving that the other\
    \ party decrypted\n   the nonce) authenticates the exchange.\n   In order to perform\
    \ the public key encryption, the initiator must\n   already have the responder's\
    \ public key. In the case where the\n   responder has multiple public keys, a\
    \ hash of the certificate the\n   initiator is using to encrypt the ancillary\
    \ information is passed as\n   part of the third message. In this way the responder\
    \ can determine\n   which corresponding private key to use to decrypt the encrypted\n\
    \   payloads and identity protection is retained.\n   In addition to the nonce,\
    \ the identities of the parties (IDii and\n   IDir) are also encrypted with the\
    \ other party's public key. If the\n   authentication method is public key encryption,\
    \ the nonce and\n   identity payloads MUST be encrypted with the public key of\
    \ the other\n   party. Only the body of the payloads are encrypted, the payload\n\
    \   headers are left in the clear.\n   When using encryption for authentication,\
    \ Main Mode is defined as\n   follows.\n        Initiator                    \
    \    Responder\n       -----------                      -----------\n        HDR,\
    \ SA                   -->\n                                  <--    HDR, SA\n\
    \        HDR, KE, [ HASH(1), ]\n          <IDii_b>PubKey_r,\n            <Ni_b>PubKey_r\
    \        -->\n                                         HDR, KE, <IDir_b>PubKey_i,\n\
    \                                  <--            <Nr_b>PubKey_i\n        HDR*,\
    \ HASH_I              -->\n                                  <--    HDR*, HASH_R\n\
    \   Aggressive Mode authenticated with encryption is described as\n   follows:\n\
    \        Initiator                        Responder\n       -----------      \
    \                -----------\n        HDR, SA, [ HASH(1),] KE,\n          <IDii_b>Pubkey_r,\n\
    \           <Ni_b>Pubkey_r         -->\n                                     \
    \    HDR, SA, KE, <IDir_b>PubKey_i,\n                                  <--   \
    \      <Nr_b>PubKey_i, HASH_R\n        HDR, HASH_I               -->\n   Where\
    \ HASH(1) is a hash (using the negotiated hash function) of the\n   certificate\
    \ which the initiator is using to encrypt the nonce and\n   identity.\n   RSA\
    \ encryption MUST be encoded in PKCS #1 format. While only the body\n   of the\
    \ ID and nonce payloads is encrypted, the encrypted data must be\n   preceded\
    \ by a valid ISAKMP generic header. The payload length is the\n   length of the\
    \ entire encrypted payload plus header. The PKCS #1\n   encoding allows for determination\
    \ of the actual length of the\n   cleartext payload upon decryption.\n   Using\
    \ encryption for authentication provides for a plausably deniable\n   exchange.\
    \ There is no proof (as with a digital signature) that the\n   conversation ever\
    \ took place since each party can completely\n   reconstruct both sides of the\
    \ exchange. In addition, security is\n   added to secret generation since an attacker\
    \ would have to\n   successfully break not only the Diffie-Hellman exchange but\
    \ also both\n   RSA encryptions. This exchange was motivated by [SKEME].\n   Note\
    \ that, unlike other authentication methods, authentication with\n   public key\
    \ encryption allows for identity protection with Aggressive\n   Mode.\n"
- title: 5.3 Phase 1 Authenticated With a Revised Mode of Public Key Encryption
  contents:
  - "5.3 Phase 1 Authenticated With a Revised Mode of Public Key Encryption\n   Authentication\
    \ with Public Key Encryption has significant advantages\n   over authentication\
    \ with signatures (see section 5.2 above).\n   Unfortunately, this is at the cost\
    \ of 4 public key operations-- two\n   public key encryptions and two private\
    \ key decryptions. This\n   authentication mode retains the advantages of authentication\
    \ using\n   public key encryption but does so with half the public key\n   operations.\n\
    \   In this mode, the nonce is still encrypted using the public key of\n   the\
    \ peer, however the peer's identity (and the certificate if it is\n   sent) is\
    \ encrypted using the negotiated symmetric encryption\n   algorithm (from the\
    \ SA payload) with a key derived from the nonce.\n   This solution adds minimal\
    \ complexity and state yet saves two costly\n   public key operations on each\
    \ side. In addition, the Key Exchange\n   payload is also encrypted using the\
    \ same derived key. This provides\n   additional protection against cryptanalysis\
    \ of the Diffie-Hellman\n   exchange.\n   As with the public key encryption method\
    \ of authentication (section\n   5.2), a HASH payload may be sent to identify\
    \ a certificate if the\n   responder has multiple certificates which contain useable\
    \ public keys\n   (e.g. if the certificate is not for signatures only, either\
    \ due to\n   certificate restrictions or algorithmic restrictions). If the HASH\n\
    \   payload is sent it MUST be the first payload of the second message\n   exchange\
    \ and MUST be followed by the encrypted nonce. If the HASH\n   payload is not\
    \ sent, the first payload of the second message exchange\n   MUST be the encrypted\
    \ nonce. In addition, the initiator my optionally\n   send a certificate payload\
    \ to provide the responder with a public key\n   with which to respond.\n   When\
    \ using the revised encryption mode for authentication, Main Mode\n   is defined\
    \ as follows.\n        Initiator                        Responder\n       -----------\
    \                      -----------\n        HDR, SA                   -->\n  \
    \                                <--    HDR, SA\n        HDR, [ HASH(1), ]\n \
    \         <Ni_b>Pubkey_r,\n          <KE_b>Ke_i,\n          <IDii_b>Ke_i,\n  \
    \        [<<Cert-I_b>Ke_i]       -->\n                                       \
    \  HDR, <Nr_b>PubKey_i,\n                                              <KE_b>Ke_r,\n\
    \                                  <--         <IDir_b>Ke_r,\n        HDR*, HASH_I\
    \              -->\n                                  <--    HDR*, HASH_R\n  \
    \ Aggressive Mode authenticated with the revised encryption method is\n   described\
    \ as follows:\n        Initiator                        Responder\n       -----------\
    \                      -----------\n        HDR, SA, [ HASH(1),]\n          <Ni_b>Pubkey_r,\n\
    \          <KE_b>Ke_i, <IDii_b>Ke_i\n          [, <Cert-I_b>Ke_i ]     -->\n \
    \                                        HDR, SA, <Nr_b>PubKey_i,\n          \
    \                                    <KE_b>Ke_r, <IDir_b>Ke_r,\n             \
    \                     <--         HASH_R\n        HDR, HASH_I               -->\n\
    \   where HASH(1) is identical to section 5.2. Ke_i and Ke_r are keys to\n   the\
    \ symmetric encryption algorithm negotiated in the SA payload\n   exchange. Only\
    \ the body of the payloads are encrypted (in both public\n   key and symmetric\
    \ operations), the generic payload headers are left\n   in the clear. The payload\
    \ length includes that added to perform\n   encryption.\n   The symmetric cipher\
    \ keys are derived from the decrypted nonces as\n   follows.  First the values\
    \ Ne_i and Ne_r are computed:\n      Ne_i = prf(Ni_b, CKY-I)\n      Ne_r = prf(Nr_b,\
    \ CKY-R)\n   The keys Ke_i and Ke_r are then taken from Ne_i and Ne_r respectively\n\
    \   in the manner described in Appendix B used to derive symmetric keys\n   for\
    \ use with the negotiated encryption algorithm. If the length of\n   the output\
    \ of the negotiated prf is greater than or equal to the key\n   length requirements\
    \ of the cipher, Ke_i and Ke_r are derived from the\n   most significant bits\
    \ of Ne_i and Ne_r respectively. If the desired\n   length of Ke_i and Ke_r exceed\
    \ the length of the output of the prf\n   the necessary number of bits is obtained\
    \ by repeatedly feeding the\n   results of the prf back into itself and concatenating\
    \ the result\n   until the necessary number has been achieved. For example, if\
    \ the\n   negotiated encryption algorithm requires 320 bits of key and the\n \
    \  output of the prf is only 128 bits, Ke_i is the most significant 320\n   bits\
    \ of K, where\n      K = K1 | K2 | K3 and\n      K1 = prf(Ne_i, 0)\n      K2 =\
    \ prf(Ne_i, K1)\n      K3 = prf(Ne_i, K2)\n   For brevity, only derivation of\
    \ Ke_i is shown; Ke_r is identical. The\n   length of the value 0 in the computation\
    \ of K1 is a single octet.\n   Note that Ne_i, Ne_r, Ke_i, and Ke_r are all ephemeral\
    \ and MUST be\n   discarded after use.\n   Save the requirements on the location\
    \ of the optional HASH payload\n   and the mandatory nonce payload there are no\
    \ further payload\n   requirements. All payloads-- in whatever order-- following\
    \ the\n   encrypted nonce MUST be encrypted with Ke_i or Ke_r depending on the\n\
    \   direction.\n   If CBC mode is used for the symmetric encryption then the\n\
    \   initialization vectors (IVs) are set as follows. The IV for\n   encrypting\
    \ the first payload following the nonce is set to 0 (zero).\n   The IV for subsequent\
    \ payloads encrypted with the ephemeral symmetric\n   cipher key, Ke_i, is the\
    \ last ciphertext block of the previous\n   payload. Encrypted payloads are padded\
    \ up to the nearest block size.\n   All padding bytes, except for the last one,\
    \ contain 0x00. The last\n   byte of the padding contains the number of the padding\
    \ bytes used,\n   excluding the last one. Note that this means there will always\
    \ be\n   padding.\n"
- title: 5.4 Phase 1 Authenticated With a Pre-Shared Key
  contents:
  - "5.4 Phase 1 Authenticated With a Pre-Shared Key\n   A key derived by some out-of-band\
    \ mechanism may also be used to\n   authenticate the exchange. The actual establishment\
    \ of this key is\n   out of the scope of this document.\n   When doing a pre-shared\
    \ key authentication, Main Mode is defined as\n   follows:\n              Initiator\
    \                        Responder\n             ----------                  \
    \     -----------\n              HDR, SA             -->\n                   \
    \               <--    HDR, SA\n              HDR, KE, Ni         -->\n      \
    \                            <--    HDR, KE, Nr\n              HDR*, IDii, HASH_I\
    \  -->\n                                  <--    HDR*, IDir, HASH_R\n   Aggressive\
    \ mode with a pre-shared key is described as follows:\n            Initiator \
    \                       Responder\n           -----------                    \
    \  -----------\n            HDR, SA, KE, Ni, IDii -->\n                      \
    \            <--    HDR, SA, KE, Nr, IDir, HASH_R\n            HDR, HASH_I   \
    \        -->\n   When using pre-shared key authentication with Main Mode the key\
    \ can\n   only be identified by the IP address of the peers since HASH_I must\n\
    \   be computed before the initiator has processed IDir. Aggressive Mode\n   allows\
    \ for a wider range of identifiers of the pre-shared secret to\n   be used. In\
    \ addition, Aggressive Mode allows two parties to maintain\n   multiple, different\
    \ pre-shared keys and identify the correct one for\n   a particular exchange.\n"
- title: 5.5 Phase 2 - Quick Mode
  contents:
  - "5.5 Phase 2 - Quick Mode\n   Quick Mode is not a complete exchange itself (in\
    \ that it is bound to\n   a phase 1 exchange), but is used as part of the SA negotiation\n\
    \   process (phase 2) to derive keying material and negotiate shared\n   policy\
    \ for non-ISAKMP SAs. The information exchanged along with Quick\n   Mode MUST\
    \ be protected by the ISAKMP SA-- i.e. all payloads except\n   the ISAKMP header\
    \ are encrypted. In Quick Mode, a HASH payload MUST\n   immediately follow the\
    \ ISAKMP header and a SA payload MUST\n   immediately follow the HASH. This HASH\
    \ authenticates the message and\n   also provides liveliness proofs.\n   The message\
    \ ID in the ISAKMP header identifies a Quick Mode in\n   progress for a particular\
    \ ISAKMP SA which itself is identified by the\n   cookies in the ISAKMP header.\
    \ Since each instance of a Quick Mode\n   uses a unique initialization vector\
    \ (see Appendix B) it is possible\n   to have multiple simultaneous Quick Modes,\
    \ based off a single ISAKMP\n   SA, in progress at any one time.\n   Quick Mode\
    \ is essentially a SA negotiation and an exchange of nonces\n   that provides\
    \ replay protection. The nonces are used to generate\n   fresh key material and\
    \ prevent replay attacks from generating bogus\n   security associations.  An\
    \ optional Key Exchange payload can be\n   exchanged to allow for an additional\
    \ Diffie-Hellman exchange and\n   exponentiation per Quick Mode. While use of\
    \ the key exchange payload\n   with Quick Mode is optional it MUST be supported.\n\
    \   Base Quick Mode (without the KE payload) refreshes the keying\n   material\
    \ derived from the exponentiation in phase 1. This does not\n   provide PFS. \
    \ Using the optional KE payload, an additional\n   exponentiation is performed\
    \ and PFS is provided for the keying\n   material.\n   The identities of the SAs\
    \ negotiated in Quick Mode are implicitly\n   assumed to be the IP addresses of\
    \ the ISAKMP peers, without any\n   implied constraints on the protocol or port\
    \ numbers allowed, unless\n   client identifiers are specified in Quick Mode.\
    \  If ISAKMP is acting\n   as a client negotiator on behalf of another party,\
    \ the identities of\n   the parties MUST be passed as IDci and then IDcr.  Local\
    \ policy will\n   dictate whether the proposals are acceptable for the identities\n\
    \   specified.  If the client identities are not acceptable to the Quick\n   Mode\
    \ responder (due to policy or other reasons), a Notify payload\n   with Notify\
    \ Message Type INVALID-ID-INFORMATION (18) SHOULD be sent.\n   The client identities\
    \ are used to identify and direct traffic to the\n   appropriate tunnel in cases\
    \ where multiple tunnels exist between two\n   peers and also to allow for unique\
    \ and shared SAs with different\n   granularities.\n   All offers made during\
    \ a Quick Mode are logically related and must be\n   consistant. For example,\
    \ if a KE payload is sent, the attribute\n   describing the Diffie-Hellman group\
    \ (see section 6.1 and [Pip97])\n   MUST be included in every transform of every\
    \ proposal of every SA\n   being negotiated. Similarly, if client identities are\
    \ used, they MUST\n   apply to every SA in the negotiation.\n   Quick Mode is\
    \ defined as follows:\n        Initiator                        Responder\n  \
    \     -----------                      -----------\n        HDR*, HASH(1), SA,\
    \ Ni\n          [, KE ] [, IDci, IDcr ] -->\n                                \
    \  <--    HDR*, HASH(2), SA, Nr\n                                            \
    \   [, KE ] [, IDci, IDcr ]\n        HDR*, HASH(3)             -->\n   Where:\n\
    \   HASH(1) is the prf over the message id (M-ID) from the ISAKMP header\n   concatenated\
    \ with the entire message that follows the hash including\n   all payload headers,\
    \ but excluding any padding added for encryption.\n   HASH(2) is identical to\
    \ HASH(1) except the initiator's nonce-- Ni,\n   minus the payload header-- is\
    \ added after M-ID but before the\n   complete message.  The addition of the nonce\
    \ to HASH(2) is for a\n   liveliness proof. HASH(3)-- for liveliness-- is the\
    \ prf over the\n   value zero represented as a single octet, followed by a concatenation\n\
    \   of the message id and the two nonces-- the initiator's followed by\n   the\
    \ responder's-- minus the payload header. In other words, the\n   hashes for the\
    \ above exchange are:\n   HASH(1) = prf(SKEYID_a, M-ID | SA | Ni [ | KE ] [ |\
    \ IDci | IDcr )\n   HASH(2) = prf(SKEYID_a, M-ID | Ni_b | SA | Nr [ | KE ] [ |\
    \ IDci |\n   IDcr )\n   HASH(3) = prf(SKEYID_a, 0 | M-ID | Ni_b | Nr_b)\n   With\
    \ the exception of the HASH, SA, and the optional ID payloads,\n   there are no\
    \ payload ordering restrictions on Quick Mode. HASH(1) and\n   HASH(2) may differ\
    \ from the illustration above if the order of\n   payloads in the message differs\
    \ from the illustrative example or if\n   any optional payloads, for example a\
    \ notify payload, have been\n   chained to the message.\n   If PFS is not needed,\
    \ and KE payloads are not exchanged, the new\n   keying material is defined as\n\
    \       KEYMAT = prf(SKEYID_d, protocol | SPI | Ni_b | Nr_b).\n   If PFS is desired\
    \ and KE payloads were exchanged, the new keying\n   material is defined as\n\
    \       KEYMAT = prf(SKEYID_d, g(qm)^xy | protocol | SPI | Ni_b | Nr_b)\n   where\
    \ g(qm)^xy is the shared secret from the ephemeral Diffie-Hellman\n   exchange\
    \ of this Quick Mode.\n   In either case, \"protocol\" and \"SPI\" are from the\
    \ ISAKMP Proposal\n   Payload that contained the negotiated Transform.\n   A single\
    \ SA negotiation results in two security assocations-- one\n   inbound and one\
    \ outbound. Different SPIs for each SA (one chosen by\n   the initiator, the other\
    \ by the responder) guarantee a different key\n   for each direction.  The SPI\
    \ chosen by the destination of the SA is\n   used to derive KEYMAT for that SA.\n\
    \   For situations where the amount of keying material desired is greater\n  \
    \ than that supplied by the prf, KEYMAT is expanded by feeding the\n   results\
    \ of the prf back into itself and concatenating results until\n   the required\
    \ keying material has been reached. In other words,\n      KEYMAT = K1 | K2 |\
    \ K3 | ...\n      where\n        K1 = prf(SKEYID_d, [ g(qm)^xy | ] protocol |\
    \ SPI | Ni_b | Nr_b)\n        K2 = prf(SKEYID_d, K1 | [ g(qm)^xy | ] protocol\
    \ | SPI | Ni_b |\n        Nr_b)\n        K3 = prf(SKEYID_d, K2 | [ g(qm)^xy |\
    \ ] protocol | SPI | Ni_b |\n        Nr_b)\n        etc.\n   This keying material\
    \ (whether with PFS or without, and whether\n   derived directly or through concatenation)\
    \ MUST be used with the\n   negotiated SA. It is up to the service to define how\
    \ keys are derived\n   from the keying material.\n   In the case of an ephemeral\
    \ Diffie-Hellman exchange in Quick Mode,\n   the exponential (g(qm)^xy) is irretreivably\
    \ removed from the current\n   state and SKEYID_e and SKEYID_a (derived from phase\
    \ 1 negotiation)\n   continue to protect and authenticate the ISAKMP SA and SKEYID_d\n\
    \   continues to be used to derive keys.\n   Using Quick Mode, multiple SA's and\
    \ keys can be negotiated with one\n   exchange as follows:\n        Initiator\
    \                        Responder\n       -----------                      -----------\n\
    \        HDR*, HASH(1), SA0, SA1, Ni,\n          [, KE ] [, IDci, IDcr ] -->\n\
    \                                  <--    HDR*, HASH(2), SA0, SA1, Nr,\n     \
    \                                       [, KE ] [, IDci, IDcr ]\n        HDR*,\
    \ HASH(3)             -->\n   The keying material is derived identically as in\
    \ the case of a single\n   SA. In this case (negotiation of two SA payloads) the\
    \ result would be\n   four security associations-- two each way for both SAs.\n"
- title: 5.6 New Group Mode
  contents:
  - "5.6 New Group Mode\n   New Group Mode MUST NOT be used prior to establishment\
    \ of an ISAKMP\n   SA. The description of a new group MUST only follow phase 1\n\
    \   negotiation.  (It is not a phase 2 exchange, though).\n        Initiator \
    \                       Responder\n       -----------                      -----------\n\
    \        HDR*, HASH(1), SA        -->\n                                 <--  \
    \   HDR*, HASH(2), SA\n   where HASH(1) is the prf output, using SKEYID_a as the\
    \ key, and the\n   message-ID from the ISAKMP header concatenated with the entire\
    \ SA\n   proposal, body and header, as the data; HASH(2) is the prf output,\n\
    \   using SKEYID_a as the key, and the message-ID from the ISAKMP header\n   concatenated\
    \ with the reply as the data. In other words the hashes\n   for the above exchange\
    \ are:\n      HASH(1) = prf(SKEYID_a, M-ID | SA)\n      HASH(2) = prf(SKEYID_a,\
    \ M-ID | SA)\n   The proposal will specify the characteristics of the group (see\n\
    \   appendix A, \"Attribute Assigned Numbers\"). Group descriptions for\n   private\
    \ Groups MUST be greater than or equal to 2^15.  If the group\n   is not acceptable,\
    \ the responder MUST reply with a Notify payload\n   with the message type set\
    \ to ATTRIBUTES-NOT-SUPPORTED (13).\n   ISAKMP implementations MAY require private\
    \ groups to expire with the\n   SA under which they were established.\n   Groups\
    \ may be directly negotiated in the SA proposal with Main Mode.\n   To do this\
    \ the component parts-- for a MODP group, the type, prime\n   and generator; for\
    \ a EC2N group the type, the Irreducible Polynomial,\n   Group Generator One,\
    \ Group Generator Two, Group Curve A, Group Curve\n   B and Group Order-- are\
    \ passed as SA attributes (see Appendix A).\n   Alternately, the nature of the\
    \ group can be hidden using New Group\n   Mode and only the group identifier is\
    \ passed in the clear during\n   phase 1 negotiation.\n"
- title: 5.7 ISAKMP Informational Exchanges
  contents:
  - "5.7 ISAKMP Informational Exchanges\n   This protocol protects ISAKMP Informational\
    \ Exchanges when possible.\n   Once the ISAKMP security association has been established\
    \ (and\n   SKEYID_e and SKEYID_a have been generated) ISAKMP Information\n   Exchanges,\
    \ when used with this protocol, are as follows:\n        Initiator           \
    \             Responder\n       -----------                      -----------\n\
    \        HDR*, HASH(1), N/D      -->\n   where N/D is either an ISAKMP Notify\
    \ Payload or an ISAKMP Delete\n   Payload and HASH(1) is the prf output, using\
    \ SKEYID_a as the key, and\n   a M-ID unique to this exchange concatenated with\
    \ the entire\n   informational payload (either a Notify or Delete) as the data.\
    \ In\n   other words, the hash for the above exchange is:\n      HASH(1) = prf(SKEYID_a,\
    \ M-ID | N/D)\n   As noted the message ID in the ISAKMP header-- and used in the\
    \ prf\n   computation-- is unique to this exchange and MUST NOT be the same as\n\
    \   the message ID of another phase 2 exchange which generated this\n   informational\
    \ exchange. The derivation of the initialization vector,\n   used with SKEYID_e\
    \ to encrypt this message, is described in Appendix\n   B.\n   If the ISAKMP security\
    \ association has not yet been established at\n   the time of the Informational\
    \ Exchange, the exchange is done in the\n   clear without an accompanying HASH\
    \ payload.\n"
- title: 6 Oakley Groups
  contents:
  - "6 Oakley Groups\n   With IKE, the group in which to do the Diffie-Hellman exchange\
    \ is\n   negotiated. Four groups-- values 1 through 4-- are defined below.\n \
    \  These groups originated with the Oakley protocol and are therefore\n   called\
    \ \"Oakley Groups\". The attribute class for \"Group\" is defined in\n   Appendix\
    \ A. All values 2^15 and higher are used for private group\n   identifiers. For\
    \ a discussion on the strength of the default Oakley\n   groups please see the\
    \ Security Considerations section below.\n   These groups were all generated by\
    \ Richard Schroeppel at the\n   University of Arizona. Properties of these groups\
    \ are described in\n   [Orm96].\n"
- title: 6.1 First Oakley Default Group
  contents:
  - "6.1 First Oakley Default Group\n   Oakley implementations MUST support a MODP\
    \ group with the following\n   prime and generator. This group is assigned id\
    \ 1 (one).\n      The prime is: 2^768 - 2 ^704 - 1 + 2^64 * { [2^638 pi] + 149686\
    \ }\n      Its hexadecimal value is\n         FFFFFFFF FFFFFFFF C90FDAA2 2168C234\
    \ C4C6628B 80DC1CD1\n         29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD\n\
    \         EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245\n         E485B576\
    \ 625E7EC6 F44C42E9 A63A3620 FFFFFFFF FFFFFFFF\n      The generator is: 2.\n"
- title: 6.2 Second Oakley Group
  contents:
  - "6.2 Second Oakley Group\n   IKE implementations SHOULD support a MODP group with\
    \ the following\n   prime and generator. This group is assigned id 2 (two).\n\
    \   The prime is 2^1024 - 2^960 - 1 + 2^64 * { [2^894 pi] + 129093 }.\n   Its\
    \ hexadecimal value is\n         FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B\
    \ 80DC1CD1\n         29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD\n \
    \        EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245\n         E485B576\
    \ 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED\n         EE386BFB 5A899FA5 AE9F2411\
    \ 7C4B1FE6 49286651 ECE65381\n         FFFFFFFF FFFFFFFF\n   The generator is\
    \ 2 (decimal)\n"
- title: 6.3 Third Oakley Group
  contents:
  - "6.3 Third Oakley Group\n   IKE implementations SHOULD support a EC2N group with\
    \ the following\n   characteristics. This group is assigned id 3 (three). The\
    \ curve is\n   based on the Galois Field GF[2^155]. The field size is 155. The\n\
    \   irreducible polynomial for the field is:\n          u^155 + u^62 + 1.\n  \
    \ The equation for the elliptic curve is:\n           y^2 + xy = x^3 + ax^2 +\
    \ b.\n   Field Size:                         155\n   Group Prime/Irreducible Polynomial:\n\
    \                    0x0800000000000000000000004000000000000001\n   Group Generator\
    \ One:                0x7b\n   Group Curve A:                      0x0\n   Group\
    \ Curve B:                      0x07338f\n   Group Order: 0X0800000000000000000057db5698537193aef944\n\
    \   The data in the KE payload when using this group is the value x from\n   the\
    \ solution (x,y), the point on the curve chosen by taking the\n   randomly chosen\
    \ secret Ka and computing Ka*P, where * is the\n   repetition of the group addition\
    \ and double operations, P is the\n   curve point with x coordinate equal to generator\
    \ 1 and the y\n   coordinate determined from the defining equation. The equation\
    \ of\n   curve is implicitly known by the Group Type and the A and B\n   coefficients.\
    \ There are two possible values for the y coordinate;\n   either one can be used\
    \ successfully (the two parties need not agree\n   on the selection).\n"
- title: 6.4 Fourth Oakley Group
  contents:
  - "6.4 Fourth Oakley Group\n   IKE implementations SHOULD support a EC2N group with\
    \ the following\n   characteristics. This group is assigned id 4 (four). The curve\
    \ is\n   based on the Galois Field GF[2^185]. The field size is 185. The\n   irreducible\
    \ polynomial for the field is:\n           u^185 + u^69 + 1. The\n   equation\
    \ for the elliptic curve is:\n           y^2 + xy = x^3 + ax^2 + b.\n   Field\
    \ Size:                         185\n   Group Prime/Irreducible Polynomial:\n\
    \                    0x020000000000000000000000000000200000000000000001\n   Group\
    \ Generator One:                0x18\n   Group Curve A:                      0x0\n\
    \   Group Curve B:                      0x1ee9\n   Group Order: 0X01ffffffffffffffffffffffdbf2f889b73e484175f94ebc\n\
    \   The data in the KE payload when using this group will be identical to\n  \
    \ that as when using Oakley Group 3 (three).\n   Other groups can be defined using\
    \ New Group Mode. These default\n   groups were generated by Richard Schroeppel\
    \ at the University of\n   Arizona.  Properties of these primes are described\
    \ in [Orm96].\n"
- title: 7. Payload Explosion for a Complete IKE Exchange
  contents:
  - "7. Payload Explosion for a Complete IKE Exchange\n   This section illustrates\
    \ how the IKE protocol is used to:\n      - establish a secure and authenticated\
    \ channel between ISAKMP\n      processes (phase 1); and\n      - generate key\
    \ material for, and negotiate, an IPsec SA (phase 2).\n"
- title: 7.1 Phase 1 using Main Mode
  contents:
  - "7.1 Phase 1 using Main Mode\n   The following diagram illustrates the payloads\
    \ exchanged between the\n   two parties in the first round trip exchange. The\
    \ initiator MAY\n   propose several proposals; the responder MUST reply with one.\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \             ISAKMP Header with XCHG of Main Mode,             ~\n      ~   \
    \               and Next Payload of ISA_SA                   ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !       0       !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                  Domain of Interpretation                     !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                          Situation                            !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \       0       !    RESERVED   !        Payload Length         !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  Proposal #1  ! PROTO_ISAKMP  ! SPI size = 0  | # Transforms  !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \    ISA_TRANS  !    RESERVED   !        Payload Length         !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  Transform #1 !  KEY_OAKLEY   |          RESERVED2            !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                   prefered SA attributes                      ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !       0       !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \  Transform #2 !  KEY_OAKLEY   |          RESERVED2            !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ~                   alternate SA attributes                     ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ responder replies in kind but selects, and returns, one transform\n   proposal\
    \ (the ISAKMP SA attributes).\n   The second exchange consists of the following\
    \ payloads:\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ~             ISAKMP Header with XCHG of Main Mode,             ~\n   \
    \   ~                  and Next Payload of ISA_KE                   ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !    ISA_NONCE  !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \   D-H Public Value  (g^xi from initiator g^xr from responder) ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !       0       !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \         Ni (from initiator) or  Nr (from responder)           ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The shared keys, SKEYID_e and SKEYID_a, are now used to protect and\n   authenticate\
    \ all further communication. Note that both SKEYID_e and\n   SKEYID_a are unauthenticated.\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \            ISAKMP Header with XCHG of Main Mode,              ~\n      ~   \
    \  and Next Payload of ISA_ID and the encryption bit set     ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !    ISA_SIG    !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \        Identification Data of the ISAKMP negotiator           ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !       0       !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \       signature verified by the public key of the ID above    ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The key exchange is authenticated over a signed hash as described in\n   section\
    \ 5.1. Once the signature has been verified using the\n   authentication algorithm\
    \ negotiated as part of the ISAKMP SA, the\n   shared keys, SKEYID_e and SKEYID_a\
    \ can be marked as authenticated.\n   (For brevity, certificate payloads were\
    \ not exchanged).\n"
- title: 7.2 Phase 2 using Quick Mode
  contents:
  - "7.2 Phase 2 using Quick Mode\n   The following payloads are exchanged in the\
    \ first round of Quick Mode\n   with ISAKMP SA negotiation. In this hypothetical\
    \ exchange, the ISAKMP\n   negotiators are proxies for other parties which have\
    \ requested\n   authentication.\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ~            ISAKMP Header with XCHG of Quick Mode,             ~\n   \
    \   ~   Next Payload of ISA_HASH and the encryption bit set         ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !     ISA_SA    !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                 keyed hash of message                         ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !   ISA_NONCE   !    RESERVED   !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                 Domain Of Interpretation                      !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                          Situation                            !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \       0       !    RESERVED   !        Payload Length         !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  Proposal #1  ! PROTO_IPSEC_AH! SPI size = 4  | # Transforms  !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                        SPI (4 octets)                         ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !    ISA_TRANS  !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \  Transform #1 !     AH_SHA    |          RESERVED2            !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                       other SA attributes                     !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \       0       !    RESERVED   !        Payload Length         !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  Transform #2 !     AH_MD5    |          RESERVED2            !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                       other SA attributes                     !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !    ISA_ID     !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                            nonce                              ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !    ISA_ID     !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \              ID of source for which ISAKMP is a client        ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !      0        !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \           ID of destination for which ISAKMP is a client      ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where the contents of the hash are described in 5.5 above. The\n   responder\
    \ replies with a similar message which only contains one\n   transform-- the selected\
    \ AH transform. Upon receipt, the initiator\n   can provide the key engine with\
    \ the negotiated security association\n   and the keying material.  As a check\
    \ against replay attacks, the\n   responder waits until receipt of the next message.\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \          ISAKMP Header with XCHG of Quick Mode,               ~\n      ~   Next\
    \ Payload of ISA_HASH and the encryption bit set         ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !       0       !    RESERVED   !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                         hash data                             ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where the contents of the hash are described in 5.5 above.\n"
- title: 8. Perfect Forward Secrecy Example
  contents:
  - "8. Perfect Forward Secrecy Example\n   This protocol can provide PFS of both\
    \ keys and identities. The\n   identies of both the ISAKMP negotiating peer and,\
    \ if applicable, the\n   identities for whom the peers are negotiating can be\
    \ protected with\n   PFS.\n   To provide Perfect Forward Secrecy of both keys\
    \ and all identities,\n   two parties would perform the following:\n      o A\
    \ Main Mode Exchange to protect the identities of the ISAKMP\n        peers.\n\
    \        This establishes an ISAKMP SA.\n      o A Quick Mode Exchange to negotiate\
    \ other security protocol\n        protection.\n        This establishes a SA\
    \ on each end for this protocol.\n      o Delete the ISAKMP SA and its associated\
    \ state.\n   Since the key for use in the non-ISAKMP SA was derived from the\n\
    \   single ephemeral Diffie-Hellman exchange PFS is preserved.\n   To provide\
    \ Perfect Forward Secrecy of merely the keys of a non-ISAKMP\n   security association,\
    \ it in not necessary to do a phase 1 exchange if\n   an ISAKMP SA exists between\
    \ the two peers. A single Quick Mode in\n   which the optional KE payload is passed,\
    \ and an additional Diffie-\n   Hellman exchange is performed, is all that is\
    \ required. At this point\n   the state derived from this Quick Mode must be deleted\
    \ from the\n   ISAKMP SA as described in section 5.5.\n"
- title: 9. Implementation Hints
  contents:
  - "9. Implementation Hints\n   Using a single ISAKMP Phase 1 negotiation makes subsequent\
    \ Phase 2\n   negotiations extremely quick.  As long as the Phase 1 state remains\n\
    \   cached, and PFS is not needed, Phase 2 can proceed without any\n   exponentiation.\
    \ How many Phase 2 negotiations can be performed for a\n   single Phase 1 is a\
    \ local policy issue. The decision will depend on\n   the strength of the algorithms\
    \ being used and level of trust in the\n   peer system.\n   An implementation\
    \ may wish to negotiate a range of SAs when\n   performing Quick Mode.  By doing\
    \ this they can speed up the \"re-\n   keying\". Quick Mode defines how KEYMAT\
    \ is defined for a range of SAs.\n   When one peer feels it is time to change\
    \ SAs they simply use the next\n   one within the stated range. A range of SAs\
    \ can be established by\n   negotiating multiple SAs (identical attributes, different\
    \ SPIs) with\n   one Quick Mode.\n   An optimization that is often useful is to\
    \ establish Security\n   Associations with peers before they are needed so that\
    \ when they\n   become needed they are already in place. This ensures there would\
    \ be\n   no delays due to key management before initial data transmission.\n \
    \  This optimization is easily implemented by setting up more than one\n   Security\
    \ Association with a peer for each requested Security\n   Association and caching\
    \ those not immediately used.\n   Also, if an ISAKMP implementation is alerted\
    \ that a SA will soon be\n   needed (e.g. to replace an existing SA that will\
    \ expire in the near\n   future), then it can establish the new SA before that\
    \ new SA is\n   needed.\n   The base ISAKMP specification describes conditions\
    \ in which one party\n   of the protocol may inform the other party of some activity--\
    \ either\n   deletion of a security association or in response to some error in\n\
    \   the protocol such as a signature verification failed or a payload\n   failed\
    \ to decrypt. It is strongly suggested that these Informational\n   exchanges\
    \ not be responded to under any circumstances. Such a\n   condition may result\
    \ in a \"notify war\" in which failure to understand\n   a message results in\
    \ a notify to the peer who cannot understand it\n   and sends his own notify back\
    \ which is also not understood.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   This entire memo discusses a hybrid protocol,\
    \ combining parts of\n   Oakley and parts of SKEME with ISAKMP, to negotiate,\
    \ and derive\n   keying material for, security associations in a secure and\n\
    \   authenticated manner.\n   Confidentiality is assured by the use of a negotiated\
    \ encryption\n   algorithm.  Authentication is assured by the use of a negotiated\n\
    \   method: a digital signature algorithm; a public key algorithm which\n   supports\
    \ encryption; or, a pre-shared key. The confidentiality and\n   authentication\
    \ of this exchange is only as good as the attributes\n   negotiated as part of\
    \ the ISAKMP security association.\n   Repeated re-keying using Quick Mode can\
    \ consume the entropy of the\n   Diffie-Hellman shared secret. Implementors should\
    \ take note of this\n   fact and set a limit on Quick Mode Exchanges between exponentiations.\n\
    \   This memo does not prescribe such a limit.\n   Perfect Forward Secrecy (PFS)\
    \ of both keying material and identities\n   is possible with this protocol. By\
    \ specifying a Diffie-Hellman group,\n   and passing public values in KE payloads,\
    \ ISAKMP peers can establish\n   PFS of keys-- the identities would be protected\
    \ by SKEYID_e from the\n   ISAKMP SA and would therefore not be protected by PFS.\
    \ If PFS of both\n   keying material and identities is desired, an ISAKMP peer\
    \ MUST\n   establish only one non-ISAKMP security association (e.g. IPsec\n  \
    \ Security Association) per ISAKMP SA. PFS for keys and identities is\n   accomplished\
    \ by deleting the ISAKMP SA (and optionally issuing a\n   DELETE message) upon\
    \ establishment of the single non-ISAKMP SA. In\n   this way a phase one negotiation\
    \ is uniquely tied to a single phase\n   two negotiation, and the ISAKMP SA established\
    \ during phase one\n   negotiation is never used again.\n   The strength of a\
    \ key derived from a Diffie-Hellman exchange using\n   any of the groups defined\
    \ here depends on the inherent strength of\n   the group, the size of the exponent\
    \ used, and the entropy provided by\n   the random number generator used. Due\
    \ to these inputs it is difficult\n   to determine the strength of a key for any\
    \ of the defined groups. The\n   default Diffie-Hellman group (number one) when\
    \ used with a strong\n   random number generator and an exponent no less than\
    \ 160 bits is\n   sufficient to use for DES.  Groups two through four provide\
    \ greater\n   security. Implementations should make note of these conservative\n\
    \   estimates when establishing policy and negotiating security\n   parameters.\n\
    \   Note that these limitations are on the Diffie-Hellman groups\n   themselves.\
    \  There is nothing in IKE which prohibits using stronger\n   groups nor is there\
    \ anything which will dilute the strength obtained\n   from stronger groups. In\
    \ fact, the extensible framework of IKE\n   encourages the definition of more\
    \ groups; use of elliptical curve\n   groups will greatly increase strength using\
    \ much smaller numbers.\n   For situations where defined groups provide insufficient\
    \ strength New\n   Group Mode can be used to exchange a Diffie-Hellman group which\n\
    \   provides the necessary strength. In is incumbent upon implementations\n  \
    \ to check the primality in groups being offered and independently\n   arrive\
    \ at strength estimates.\n   It is assumed that the Diffie-Hellman exponents in\
    \ this exchange are\n   erased from memory after use. In particular, these exponents\
    \ must not\n   be derived from long-lived secrets like the seed to a pseudo-random\n\
    \   generator.\n   IKE exchanges maintain running initialization vectors (IV)\
    \ where the\n   last ciphertext block of the last message is the IV for the next\n\
    \   message. To prevent retransmissions (or forged messages with valid\n   cookies)\
    \ from causing exchanges to get out of sync IKE\n   implementations SHOULD NOT\
    \ update their running IV until the\n   decrypted message has passed a basic sanity\
    \ check and has been\n   determined to actually advance the IKE state machine--\
    \ i.e. it is not\n   a retransmission.\n   While the last roundtrip of Main Mode\
    \ (and optionally the last\n   message of Aggressive Mode) is encrypted it is\
    \ not, strictly\n   speaking, authenticated.  An active substitution attack on\
    \ the\n   ciphertext could result in payload corruption. If such an attack\n \
    \  corrupts mandatory payloads it would be detected by an authentication\n   failure,\
    \ but if it corrupts any optional payloads (e.g. notify\n   payloads chained onto\
    \ the last message of a Main Mode exchange) it\n   might not be detectable.\n"
- title: 11. IANA Considerations
  contents:
  - "11. IANA Considerations\n   This document contains many \"magic numbers\" to\
    \ be maintained by the\n   IANA.  This section explains the criteria to be used\
    \ by the IANA to\n   assign additional numbers in each of these lists.\n"
- title: 11.1 Attribute Classes
  contents:
  - "11.1 Attribute Classes\n   Attributes negotiated in this protocol are identified\
    \ by their class.\n   Requests for assignment of new classes must be accompanied\
    \ by a\n   standards-track RFC which describes the use of this attribute.\n"
- title: 11.2 Encryption Algorithm Class
  contents:
  - "11.2 Encryption Algorithm Class\n   Values of the Encryption Algorithm Class\
    \ define an encryption\n   algorithm to use when called for in this document.\
    \ Requests for\n   assignment of new encryption algorithm values must be accompanied\
    \ by\n   a reference to a standards-track or Informational RFC or a reference\n\
    \   to published cryptographic literature which describes this algorithm.\n"
- title: 11.3 Hash Algorithm
  contents:
  - "11.3 Hash Algorithm\n   Values of the Hash Algorithm Class define a hash algorithm\
    \ to use\n   when called for in this document. Requests for assignment of new\
    \ hash\n   algorithm values must be accompanied by a reference to a standards-\n\
    \   track or Informational RFC or a reference to published cryptographic\n   literature\
    \ which describes this algorithm. Due to the key derivation\n   and key expansion\
    \ uses of HMAC forms of hash algorithms in IKE,\n   requests for assignment of\
    \ new hash algorithm values must take into\n   account the cryptographic properties--\
    \ e.g it's resistance to\n   collision-- of the hash algorithm itself.\n"
- title: 11.4 Group Description and Group Type
  contents:
  - "11.4 Group Description and Group Type\n   Values of the Group Description Class\
    \ identify a group to use in a\n   Diffie-Hellman exchange. Values of the Group\
    \ Type Class define the\n   type of group. Requests for assignment of new groups\
    \ must be\n   accompanied by a reference to a standards-track or Informational\
    \ RFC\n   which describes this group. Requests for assignment of new group\n \
    \  types must be accompanied by a reference to a standards-track or\n   Informational\
    \ RFC or by a reference to published cryptographic or\n   mathmatical literature\
    \ which describes the new type.\n"
- title: 11.5 Life Type
  contents:
  - "11.5 Life Type\n   Values of the Life Type Class define a type of lifetime to\
    \ which the\n   ISAKMP Security Association applies. Requests for assignment of\
    \ new\n   life types must be accompanied by a detailed description of the units\n\
    \   of this type and its expiry.\n"
- title: 12. Acknowledgements
  contents:
  - "12. Acknowledgements\n   This document is the result of close consultation with\
    \ Hugo Krawczyk,\n   Douglas Maughan, Hilarie Orman, Mark Schertler, Mark Schneider,\
    \ and\n   Jeff Turner. It relies on protocols which were written by them.\n  \
    \ Without their interest and dedication, this would not have been\n   written.\n\
    \   Special thanks Rob Adams, Cheryl Madson, Derrell Piper, Harry Varnis,\n  \
    \ and Elfed Weaver for technical input, encouragement, and various\n   sanity\
    \ checks along the way.\n   We would also like to thank the many members of the\
    \ IPSec working\n   group that contributed to the development of this protocol\
    \ over the\n   past year.\n"
- title: 13. References
  contents:
  - "13. References\n   [CAST]   Adams, C., \"The CAST-128 Encryption Algorithm\"\
    , RFC 2144,\n            May 1997.\n   [BLOW]   Schneier, B., \"The Blowfish Encryption\
    \ Algorithm\", Dr.\n            Dobb's Journal, v. 19, n. 4, April 1994.\n   [Bra97]\
    \  Bradner, S., \"Key Words for use in RFCs to indicate\n            Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [DES]    ANSI X3.106, \"American\
    \ National Standard for Information\n            Systems-Data Link Encryption\"\
    , American National Standards\n            Institute, 1983.\n   [DH]     Diffie,\
    \ W., and Hellman M., \"New Directions in\n            Cryptography\", IEEE Transactions\
    \ on Information Theory, V.\n            IT-22, n. 6, June 1977.\n   [DSS]   \
    \ NIST, \"Digital Signature Standard\", FIPS 186, National\n            Institute\
    \ of Standards and Technology, U.S. Department of\n            Commerce, May,\
    \ 1994.\n   [IDEA]   Lai, X., \"On the Design and Security of Block Ciphers,\"\
    \ ETH\n            Series in Information Processing, v. 1, Konstanz: Hartung-\n\
    \            Gorre Verlag, 1992\n   [KBC96]  Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC: Keyed-\n            Hashing for Message Authentication\", RFC\
    \ 2104, February\n            1997.\n   [SKEME]  Krawczyk, H., \"SKEME: A Versatile\
    \ Secure Key Exchange\n            Mechanism for Internet\", from IEEE Proceedings\
    \ of the 1996\n            Symposium on Network and Distributed Systems Security.\n\
    \   [MD5]    Rivest, R., \"The MD5 Message Digest Algorithm\", RFC 1321,\n   \
    \         April 1992.\n   [MSST98] Maughhan, D., Schertler, M., Schneider, M.,\
    \ and J. Turner,\n            \"Internet Security Association and Key Management\
    \ Protocol\n            (ISAKMP)\", RFC 2408, November 1998.\n   [Orm96]  Orman,\
    \ H., \"The Oakley Key Determination Protocol\", RFC\n            2412, November\
    \ 1998.\n   [PKCS1]  RSA Laboratories, \"PKCS #1: RSA Encryption Standard\",\n\
    \            November 1993.\n   [Pip98]  Piper, D., \"The Internet IP Security\
    \ Domain Of\n            Interpretation for ISAKMP\", RFC 2407, November 1998.\n\
    \   [RC5]    Rivest, R., \"The RC5 Encryption Algorithm\", Dr. Dobb's\n      \
    \      Journal, v. 20, n. 1, January 1995.\n   [RSA]    Rivest, R., Shamir, A.,\
    \ and Adleman, L., \"A Method for\n            Obtaining Digital Signatures and\
    \ Public-Key Cryptosystems\",\n            Communications of the ACM, v. 21, n.\
    \ 2, February 1978.\n   [Sch96]  Schneier, B., \"Applied Cryptography, Protocols,\
    \ Algorithms,\n            and Source Code in C\", 2nd edition.\n   [SHA]    NIST,\
    \ \"Secure Hash Standard\", FIPS 180-1, National Institue\n            of Standards\
    \ and Technology, U.S. Department of Commerce,\n            May 1994.\n   [TIGER]\
    \  Anderson, R., and Biham, E., \"Fast Software Encryption\",\n            Springer\
    \ LNCS v. 1039, 1996.\n"
- title: Appendix A
  contents:
  - "Appendix A\n   This is a list of DES Weak and Semi-Weak keys.  The keys come\
    \ from\n   [Sch96].  All keys are listed in hexidecimal.\n       DES Weak Keys\n\
    \       0101 0101 0101 0101\n       1F1F 1F1F E0E0 E0E0\n       E0E0 E0E0 1F1F\
    \ 1F1F\n       FEFE FEFE FEFE FEFE\n       DES Semi-Weak Keys\n       01FE 01FE\
    \ 01FE 01FE\n       1FE0 1FE0 0EF1 0EF1\n       01E0 01E0 01F1 01F1\n       1FFE\
    \ 1FFE 0EFE 0EFE\n       011F 011F 010E 010E\n       E0FE E0FE F1FE F1FE\n   \
    \    FE01 FE01 FE01 FE01\n       E01F E01F F10E F10E\n       E001 E001 F101 F101\n\
    \       FE1F FE1F FE0E FE0E\n       1F01 1F01 0E01 0E01\n       FEE0 FEE0 FEF1\
    \ FEF1\n   Attribute Assigned Numbers\n   Attributes negotiated during phase one\
    \ use the following definitions.\n   Phase two attributes are defined in the applicable\
    \ DOI specification\n   (for example, IPsec attributes are defined in the IPsec\
    \ DOI), with\n   the exception of a group description when Quick Mode includes\
    \ an\n   ephemeral Diffie-Hellman exchange.  Attribute types can be either\n \
    \  Basic (B) or Variable-length (V). Encoding of these attributes is\n   defined\
    \ in the base ISAKMP specification as Type/Value (Basic) and\n   Type/Length/Value\
    \ (Variable).\n   Attributes described as basic MUST NOT be encoded as variable.\n\
    \   Variable length  attributes MAY be encoded as basic attributes if\n   their\
    \ value can fit into two octets. If this is the case, an\n   attribute offered\
    \ as variable (or basic) by the initiator of this\n   protocol MAY be returned\
    \ to the initiator as a basic (or variable).\n   Attribute Classes\n         \
    \ class                         value              type\n     -------------------------------------------------------------------\n\
    \      Encryption Algorithm                1                 B\n      Hash Algorithm\
    \                      2                 B\n      Authentication Method      \
    \         3                 B\n      Group Description                   4   \
    \              B\n      Group Type                          5                \
    \ B\n      Group Prime/Irreducible Polynomial  6                 V\n      Group\
    \ Generator One                 7                 V\n      Group Generator Two\
    \                 8                 V\n      Group Curve A                   \
    \    9                 V\n      Group Curve B                      10        \
    \         V\n      Life Type                          11                 B\n \
    \     Life Duration                      12                 V\n      PRF     \
    \                           13                 B\n      Key Length           \
    \              14                 B\n      Field Size                        \
    \ 15                 B\n      Group Order                        16          \
    \       V\n   values 17-16383 are reserved to IANA. Values 16384-32767 are for\n\
    \   private use among mutually consenting parties.\n   Class Values\n   - Encryption\
    \ Algorithm                       Defined In\n      DES-CBC                  \
    \           1     RFC 2405\n      IDEA-CBC                            2\n    \
    \  Blowfish-CBC                        3\n      RC5-R16-B64-CBC              \
    \       4\n      3DES-CBC                            5\n      CAST-CBC       \
    \                     6\n     values 7-65000 are reserved to IANA. Values 65001-65535\
    \ are for\n     private use among mutually consenting parties.\n   - Hash Algorithm\
    \                             Defined In\n      MD5                          \
    \       1     RFC 1321\n      SHA                                 2     FIPS 180-1\n\
    \      Tiger                               3     See Reference [TIGER]\n     values\
    \ 4-65000 are reserved to IANA. Values 65001-65535 are for\n     private use among\
    \ mutually consenting parties.\n   - Authentication Method\n      pre-shared key\
    \                      1\n      DSS signatures                      2\n      RSA\
    \ signatures                      3\n      Encryption with RSA               \
    \  4\n      Revised encryption with RSA         5\n     values 6-65000 are reserved\
    \ to IANA. Values 65001-65535 are for\n     private use among mutually consenting\
    \ parties.\n   - Group Description\n      default 768-bit MODP group (section\
    \ 6.1)      1\n      alternate 1024-bit MODP group (section 6.2)   2\n      EC2N\
    \ group on GP[2^155] (section 6.3)         3\n      EC2N group on GP[2^185] (section\
    \ 6.4)         4\n     values 5-32767 are reserved to IANA. Values 32768-65535\
    \ are for\n     private use among mutually consenting parties.\n   - Group Type\n\
    \      MODP (modular exponentiation group)            1\n      ECP  (elliptic\
    \ curve group over GF[P])         2\n      EC2N (elliptic curve group over GF[2^N])\
    \       3\n     values 4-65000 are reserved to IANA. Values 65001-65535 are for\n\
    \     private use among mutually consenting parties.\n   - Life Type\n      seconds\
    \                             1\n      kilobytes                           2\n\
    \     values 3-65000 are reserved to IANA. Values 65001-65535 are for\n     private\
    \ use among mutually consenting parties. For a given \"Life\n     Type\" the value\
    \ of the \"Life Duration\" attribute defines the actual\n     length of the SA\
    \ life-- either a number of seconds, or a number of\n     kbytes protected.\n\
    \   - PRF\n     There are currently no pseudo-random functions defined.\n    \
    \ values 1-65000 are reserved to IANA. Values 65001-65535 are for\n     private\
    \ use among mutually consenting parties.\n   - Key Length\n     When using an\
    \ Encryption Algorithm that has a variable length key,\n     this attribute specifies\
    \ the key length in bits. (MUST use network\n     byte order). This attribute\
    \ MUST NOT be used when the specified\n     Encryption Algorithm uses a fixed\
    \ length key.\n   - Field Size\n     The field size, in bits, of a Diffie-Hellman\
    \ group.\n   - Group Order\n     The group order of an elliptical curve group.\
    \ Note the length of\n     this attribute depends on the field size.\n   Additional\
    \ Exchanges Defined-- XCHG values\n     Quick Mode                         32\n\
    \     New Group Mode                     33\n"
- title: Appendix B
  contents:
  - "Appendix B\n   This appendix describes encryption details to be used ONLY when\n\
    \   encrypting ISAKMP messages.  When a service (such as an IPSEC\n   transform)\
    \ utilizes ISAKMP to generate keying material, all\n   encryption algorithm specific\
    \ details (such as key and IV generation,\n   padding, etc...) MUST be defined\
    \ by that service.  ISAKMP does not\n   purport to ever produce keys that are\
    \ suitable for any encryption\n   algorithm.  ISAKMP produces the requested amount\
    \ of keying material\n   from which the service MUST generate a suitable key.\
    \  Details, such\n   as weak key checks, are the responsibility of the service.\n\
    \   Use of negotiated PRFs may require the PRF output to be expanded due\n   to\
    \ the PRF feedback mechanism employed by this document. For example,\n   if the\
    \ (ficticious) DOORAK-MAC requires 24 bytes of key but produces\n   only 8 bytes\
    \ of output, the output must be expanded three times\n   before being used as\
    \ the key for another instance of itself. The\n   output of a PRF is expanded\
    \ by feeding back the results of the PRF\n   into itself to generate successive\
    \ blocks. These blocks are\n   concatenated until the requisite number of bytes\
    \ has been acheived.\n   For example, for pre-shared key authentication with DOORAK-MAC\
    \ as the\n   negotiated PRF:\n     BLOCK1-8 = prf(pre-shared-key, Ni_b | Nr_b)\n\
    \     BLOCK9-16 = prf(pre-shared-key, BLOCK1-8 | Ni_b | Nr_b)\n     BLOCK17-24\
    \ = prf(pre-shared-key, BLOCK9-16 | Ni_b | Nr_b)\n   and\n     SKEYID = BLOCK1-8\
    \ | BLOCK9-16 | BLOCK17-24\n   so therefore to derive SKEYID_d:\n     BLOCK1-8\
    \ = prf(SKEYID, g^xy | CKY-I | CKY-R | 0)\n     BLOCK9-16 = prf(SKEYID, BLOCK1-8\
    \ | g^xy | CKY-I | CKY-R | 0)\n     BLOCK17-24 = prf(SKEYID, BLOCK9-16 | g^xy\
    \ | CKY-I | CKY-R | 0)\n   and\n     SKEYID_d = BLOCK1-8 | BLOCK9-16 | BLOCK17-24\n\
    \   Subsequent PRF derivations are done similarly.\n   Encryption keys used to\
    \ protect the ISAKMP SA are derived from\n   SKEYID_e in an algorithm-specific\
    \ manner. When SKEYID_e is not long\n   enough to supply all the necessary keying\
    \ material an algorithm\n   requires, the key is derived from feeding the results\
    \ of a pseudo-\n   random function into itself, concatenating the results, and\
    \ taking\n   the highest necessary bits.\n   For example, if (ficticious) algorithm\
    \ AKULA requires 320-bits of key\n   (and has no weak key check) and the prf used\
    \ to generate SKEYID_e\n   only generates 120 bits of material, the key for AKULA,\
    \ would be the\n   first 320-bits of Ka, where:\n       Ka = K1 | K2 | K3\n  \
    \ and\n       K1 = prf(SKEYID_e, 0)\n       K2 = prf(SKEYID_e, K1)\n       K3\
    \ = prf(SKEYID_e, K2)\n   where prf is the negotiated prf or the HMAC version\
    \ of the negotiated\n   hash function (if no prf was negotiated) and 0 is represented\
    \ by a\n   single octet. Each result of the prf provides 120 bits of material\n\
    \   for a total of 360 bits. AKULA would use the first 320 bits of that\n   360\
    \ bit string.\n   In phase 1, material for the initialization vector (IV material)\
    \ for\n   CBC mode encryption algorithms is derived from a hash of a\n   concatenation\
    \ of the initiator's public Diffie-Hellman value and the\n   responder's public\
    \ Diffie-Hellman value using the negotiated hash\n   algorithm. This is used for\
    \ the first message only. Each message\n   should be padded up to the nearest\
    \ block size using bytes containing\n   0x00. The message length in the header\
    \ MUST include the length of the\n   pad since this reflects the size of the ciphertext.\
    \ Subsequent\n   messages MUST use the last CBC encryption block from the previous\n\
    \   message as their initialization vector.\n   In phase 2, material for the initialization\
    \ vector for CBC mode\n   encryption of the first message of a Quick Mode exchange\
    \ is derived\n   from a hash of a concatenation of the last phase 1 CBC output\
    \ block\n   and the phase 2 message id using the negotiated hash algorithm. The\n\
    \   IV for subsequent messages within a Quick Mode exchange is the CBC\n   output\
    \ block from the previous message. Padding and IVs for\n   subsequent messages\
    \ are done as in phase 1.\n   After the ISAKMP SA has been authenticated all Informational\n\
    \   Exchanges are encrypted using SKEYID_e. The initiaization vector for\n   these\
    \ exchanges is derived in exactly the same fashion as that for a\n   Quick Mode--\
    \ i.e. it is derived from a hash of a concatenation of the\n   last phase 1 CBC\
    \ output block and the message id from the ISAKMP\n   header of the Informational\
    \ Exchange (not the message id from the\n   message that may have prompted the\
    \ Informational Exchange).\n   Note that the final phase 1 CBC output block, the\
    \ result of\n   encryption/decryption of the last phase 1 message, must be retained\n\
    \   in the ISAKMP SA state to allow for generation of unique IVs for each\n  \
    \ Quick Mode. Each post- phase 1 exchange (Quick Modes and\n   Informational Exchanges)\
    \ generates IVs independantly to prevent IVs\n   from getting out of sync when\
    \ two different exchanges are started\n   simultaneously.\n   In all cases, there\
    \ is a single bidirectional cipher/IV context.\n   Having each Quick Mode and\
    \ Informational Exchange maintain a unique\n   context prevents IVs from getting\
    \ out of sync.\n   The key for DES-CBC is derived from the first eight (8) non-weak\
    \ and\n   non-semi-weak (see Appendix A) bytes of SKEYID_e. The IV is the first\n\
    \   8 bytes of the IV material derived above.\n   The key for IDEA-CBC is derived\
    \ from the first sixteen (16) bytes of\n   SKEYID_e.  The IV is the first eight\
    \ (8) bytes of the IV material\n   derived above.\n   The key for Blowfish-CBC\
    \ is either the negotiated key size, or the\n   first fifty-six (56) bytes of\
    \ a key (if no key size is negotiated)\n   derived in the aforementioned pseudo-random\
    \ function feedback method.\n   The IV is the first eight (8) bytes of the IV\
    \ material derived above.\n   The key for RC5-R16-B64-CBC is the negotiated key\
    \ size, or the first\n   sixteen (16) bytes of a key (if no key size is negotiated)\
    \ derived\n   from the aforementioned pseudo-random function feedback method if\n\
    \   necessary. The IV is the first eight (8) bytes of the IV material\n   derived\
    \ above. The number of rounds MUST be 16 and the block size\n   MUST be 64.\n\
    \   The key for 3DES-CBC is the first twenty-four (24) bytes of a key\n   derived\
    \ in the aforementioned pseudo-random function feedback method.\n   3DES-CBC is\
    \ an encrypt-decrypt-encrypt operation using the first,\n   middle, and last eight\
    \ (8) bytes of the entire 3DES-CBC key.  The IV\n   is the first eight (8) bytes\
    \ of the IV material derived above.\n   The key for CAST-CBC is either the negotiated\
    \ key size, or the first\n   sixteen (16) bytes of a key derived in the aforementioned\
    \ pseudo-\n   random function feedback method.  The IV is the first eight (8)\
    \ bytes\n   of the IV material derived above.\n   Support for algorithms other\
    \ than DES-CBC is purely optional. Some\n   optional algorithms may be subject\
    \ to intellectual property claims.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dan Harkins\n   cisco Systems\n   170 W. Tasman Dr.\n\
    \   San Jose, California, 95134-1706\n   United States of America\n   Phone: +1\
    \ 408 526 4000\n   EMail: dharkins@cisco.com\n   Dave Carrel\n   76 Lippard Ave.\n\
    \   San Francisco, CA 94131-2947\n   United States of America\n   Phone: +1 415\
    \ 337 8469\n   EMail: carrel@ipsec.org\n"
- title: Authors' Note
  contents:
  - "Authors' Note\n   The authors encourage independent implementation, and\n   interoperability\
    \ testing, of this hybrid protocol.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
