- title: __initial_text__
  contents:
  - "        Dynamic Provisioning Using Flexible Authentication via\n     Secure Tunneling\
    \ Extensible Authentication Protocol (EAP-FAST)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   EAP-FAST has been implemented by many vendors and it is used in\
    \ the\n   Internet.  Publication of this specification is intended to promote\n\
    \   interoperability by documenting current use of existing EAP methods\n   within\
    \ EAP-FAST.\n   The EAP method EAP-FAST-MSCHAPv2 reuses the EAP type code assigned\
    \ to\n   EAP-MSCHAPv2 (26) for authentication within an anonymous TLS tunnel.\n\
    \   In order to minimize the risk associated with an anonymous tunnel,\n   changes\
    \ to the method were made that are not interoperable with EAP-\n   MSCHAPv2. \
    \ Since EAP-MSCHAPv2 does not support method-specific\n   version negotiation,\
    \ the use of EAP-FAST-MSCHAPv2 is implied by the\n   use of an anonymous EAP-FAST\
    \ tunnel.  This behavior may cause\n   problems in implementations where the use\
    \ of unaltered EAP-MSCHAPv2\n   is needed inside an anonymous EAP-FAST tunnel.\
    \  Since such support\n   requires special case execution of a method within a\
    \ tunnel, it also\n   complicates implementations that use the same method code\
    \ both within\n   and outside of the tunnel method.  If EAP-FAST were to be designed\n\
    \   today, these difficulties could be avoided by utilization of unique\n   EAP\
    \ Type codes.  Given these issues, assigned method types must not\n   be re-used\
    \ with different meaning inside tunneled methods in the\n   future.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Flexible Authentication via Secure Tunneling Extensible\n  \
    \ Authentication Protocol (EAP-FAST) method enables secure\n   communication between\
    \ a peer and a server by using Transport Layer\n   Security (TLS) to establish\
    \ a mutually authenticated tunnel.  EAP-\n   FAST also enables the provisioning\
    \ credentials or other information\n   through this protected tunnel.  This document\
    \ describes the use of\n   EAP-FAST for dynamic provisioning.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Specification Requirements .................................4\n  \
    \    1.2. Terminology ................................................4\n   2.\
    \ EAP-FAST Provisioning Modes .....................................5\n   3. Dynamic\
    \ Provisioning Using EAP-FAST Conversation ................6\n      3.1. Phase\
    \ 1 TLS Tunnel .........................................7\n           3.1.1. Server-Authenticated\
    \ Tunnel .........................7\n           3.1.2. Server-Unauthenticated\
    \ Tunnel .......................7\n      3.2. Phase 2 - Tunneled Authentication\
    \ and Provisioning .........7\n           3.2.1. Server-Authenticated Tunneled\
    \ Authentication ........8\n           3.2.2. Server-Unauthenticated Tunneled\
    \ Authentication ......8\n           3.2.3. Authenticating Using EAP-FAST-MSCHAPv2\
    \ ..............8\n           3.2.4. Use of Other Inner EAP Methods for EAP-FAST\n\
    \                  Provisioning ........................................9\n  \
    \    3.3. Key Derivations Used in the EAP-FAST Provisioning\n           Exchange\
    \ ..................................................10\n      3.4. Peer-Id, Server-Id,\
    \ and Session-Id ........................11\n      3.5. Network Access after EAP-FAST\
    \ Provisioning ................11\n   4. Information Provisioned in EAP-FAST ............................12\n\
    \      4.1. Protected Access Credential ...............................12\n  \
    \         4.1.1. Tunnel PAC .........................................13\n    \
    \       4.1.2. Machine Authentication PAC .........................13\n      \
    \     4.1.3. User Authorization PAC .............................13\n        \
    \   4.1.4. PAC Provisioning ...................................14\n      4.2.\
    \ PAC TLV Format ............................................15\n           4.2.1.\
    \ Formats for PAC Attributes .........................16\n           4.2.2. PAC-Key\
    \ ............................................16\n           4.2.3. PAC-Opaque\
    \ .........................................17\n           4.2.4. PAC-Info ...........................................18\n\
    \           4.2.5. PAC-Acknowledgement TLV ............................20\n  \
    \         4.2.6. PAC-Type TLV .......................................21\n    \
    \  4.3. Trusted Server Root Certificate ...........................21\n      \
    \     4.3.1. Server-Trusted-Root TLV ............................22\n        \
    \   4.3.2. PKCS#7 TLV .........................................23\n   5. IANA\
    \ Considerations ............................................24\n   6. Security\
    \ Considerations ........................................25\n      6.1. Provisioning\
    \ Modes and Man-in-the-Middle Attacks ..........25\n           6.1.1. Server-Authenticated\
    \ Provisioning Mode and\n                  Man-in-the-Middle Attacks ..........................26\n\
    \           6.1.2. Server-Unauthenticated Provisioning Mode\n                \
    \  and Man-in-the-Middle Attacks ......................26\n      6.2. Dictionary\
    \ Attacks ........................................27\n      6.3. Considerations\
    \ in Selecting a Provisioning Mode ...........28\n      6.4. Diffie-Hellman Groups\
    \ .....................................28\n      6.5. Tunnel PAC Usage ..........................................28\n\
    \      6.6. Machine Authentication PAC Usage ..........................29\n  \
    \    6.7. User Authorization PAC Usage ..............................29\n    \
    \  6.8. PAC Storage Considerations ................................29\n      6.9.\
    \ Security Claims ...........................................31\n   7. Acknowledgements\
    \ ...............................................31\n   8. References .....................................................31\n\
    \      8.1. Normative References ......................................31\n  \
    \    8.2. Informative References ....................................32\n   Appendix\
    \ A.  Examples .............................................33\n     A.1.  Example\
    \ 1: Successful Tunnel PAC Provisioning .............33\n     A.2.  Example 2:\
    \ Failed Provisioning ............................35\n     A.3.  Example 3: Provisioning\
    \ an Authentication Server's\n           Trusted Root Certificate ..................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   EAP-FAST [RFC4851] is an EAP method that can be used to\
    \ mutually\n   authenticate the peer and server.  Credentials such as a pre-shared\n\
    \   key, certificate trust anchor, or a Protected Access Credential (PAC)\n  \
    \ must be provisioned to the peer before it can establish mutual\n   authentication\
    \ with the server.  In many cases, the provisioning of\n   such information presents\
    \ deployment hurdles.  Through the use of the\n   protected TLS [RFC5246] tunnel,\
    \ EAP-FAST can enable dynamic in-band\n   provisioning to address such deployment\
    \ obstacles.\n"
- title: 1.1.  Specification Requirements
  contents:
  - "1.1.  Specification Requirements\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Much of the terminology used in this document comes from\
    \ [RFC3748].\n   The terms \"peer\" and \"server\" are used interchangeably with\
    \ the terms\n   \"EAP peer\" and \"EAP server\", respectively.  Additional terms\
    \ are\n   defined below:\n   Man in the Middle (MITM)\n      An adversary that\
    \ can successfully inject itself between a peer\n      and EAP server.  The MITM\
    \ succeeds by impersonating a valid peer\n      or server.\n   Provisioning\n\
    \      Providing a peer with a trust anchor, shared secret, or other\n      appropriate\
    \ information needed to establish a security\n      association.\n   Protected\
    \ Access Credential (PAC)\n      Credentials distributed to a peer for future\
    \ optimized network\n      authentication.  The PAC consists of at most three\
    \ components: a\n      shared secret, an opaque element, and optional information.\
    \  The\n      shared secret part contains the secret key shared between the peer\n\
    \      and server.  The opaque part contains the shared secret encrypted\n   \
    \   by a private key only known to the server.  It is provided to the\n      peer\
    \ and is presented back to the server when the peer wishes to\n      obtain access\
    \ to network resources.  Finally, a PAC may optionally\n      include other information\
    \ that may be useful to the peer.\n   Tunnel PAC\n      A set of credentials stored\
    \ by the peer and consumed by both the\n      peer and the server to establish\
    \ a TLS tunnel.\n   User Authorization PAC\n      A User Authorization PAC is\
    \ server-encrypted data containing\n      authorization information associated\
    \ with a previously\n      authenticated user.  The User Authorization PAC does\
    \ not contain a\n      key, but rather it is generally bound to a Tunnel PAC,\
    \ which is\n      used with the User Authorization PAC.\n   Machine Authentication\
    \ PAC\n      A Machine Authentication PAC contains server-encrypted data\n   \
    \   containing authorization information associated with a device.  A\n      Machine\
    \ Authentication PAC may be used instead of a Tunnel PAC to\n      establish the\
    \ TLS tunnel to provide machine authentication and\n      authorization information.\
    \  The Machine Authentication PAC is\n      useful in cases where the machine\
    \ needs to be authenticated and\n      authorized to access a network before a\
    \ user has logged in.\n"
- title: 2.  EAP-FAST Provisioning Modes
  contents:
  - "2.  EAP-FAST Provisioning Modes\n   EAP-FAST supports two modes for provisioning:\n\
    \   1.  Server-Authenticated Provisioning Mode - Provisioning inside a\n     \
    \  TLS tunnel that provides server-side authentication.\n   2.  Server-Unauthenticated\
    \ Provisioning Mode - Provisioning inside an\n       anonymous TLS tunnel.\n \
    \  The EAP-FAST provisioning modes use EAP-FAST phase 2 inside a secure\n   TLS\
    \ tunnel established during phase 1.  [RFC4851] describes the EAP-\n   FAST phases\
    \ in greater detail.\n   In the Server-Authenticated Provisioning Mode, the peer\
    \ has\n   successfully authenticated the EAP server as part of EAP-FAST phase\
    \ 1\n   (i.e., TLS tunnel establishment).  Additional exchanges MAY occur\n  \
    \ inside the tunnel to allow the EAP server to authenticate the EAP\n   peer before\
    \ provisioning any information.\n   In the Server-Unauthenticated Provisioning\
    \ Mode, an unauthenticated\n   TLS tunnel is established in the EAP-FAST phase\
    \ 1.  The peer MUST\n   negotiate a TLS anonymous Diffie-Hellman-based ciphersuite\
    \ to signal\n   that it wishes to use Server-Unauthenticateded Provisioning Mode.\n\
    \   This provisioning mode enables the bootstrapping of peers where the\n   peer\
    \ lacks strong credentials usable for mutual authentication with\n   the server.\n\
    \   Since the server is not authenticated in the Server-Unauthenticated\n   Provisioning\
    \ Mode, it is possible that an attacker may intercept the\n   TLS tunnel.  If\
    \ an anonymous tunnel is used, then the peer and server\n   MUST negotiate and\
    \ successfully complete an EAP method supporting\n   mutual authentication and\
    \ key derivation as described in Section 6.\n   The peer then uses the Crypto-Binding\
    \ TLV to validate the integrity\n   of the TLS tunnel, thereby verifying that\
    \ the exchange was not\n   subject to a man-in-the-middle attack.\n   Server-Authenticated\
    \ Provisioning Mode protects against the man-in-\n   the-middle attack; however,\
    \ it requires provisioning the peer with\n   the credentials necessary to authenticate\
    \ the server.  Environments\n   willing to trade off the security risk of a man-in-the-middle\
    \ attack\n   for ease of deployment can choose to use the Server-Unauthenticated\n\
    \   Provisioning Mode.\n   Assuming that an inner EAP method and Crypto-Binding\
    \ TLV exchange is\n   successful, the server will subsequently provide credential\n\
    \   information, such as a shared key using a PAC TLV or the trusted\n   certificate\
    \ root(s) of the server using a Server-Trusted-Root TLV.\n   Once the EAP-FAST\
    \ Provisioning conversation completes, the peer is\n   expected to use the provisioned\
    \ credentials in subsequent EAP-FAST\n   authentications.\n"
- title: 3.  Dynamic Provisioning Using EAP-FAST Conversation
  contents:
  - "3.  Dynamic Provisioning Using EAP-FAST Conversation\n   The provisioning occurs\
    \ in the following steps, which are detailed in\n   the subsequent sections and\
    \ in RFC 4851.  First, the EAP-FAST phase 1\n   TLS tunnel is established.  During\
    \ this process, extra material is\n   extracted from the TLS key derivation for\
    \ use as challenges in the\n   subsequent authentication exchange.  Next, an inner\
    \ EAP method, such\n   as EAP-FAST-MSCHAPv2 (Microsoft Challenge Handshake Authentication\n\
    \   Protocol version 2), is executed within the EAP-FAST phase 2 TLS\n   tunnel\
    \ to authenticate the client using the challenges derived from\n   the phase 1\
    \ TLS exchange.  Following successful authentication and\n   Crypto-Binding TLV\
    \ exchange, the server provisions the peer with PAC\n   information including\
    \ the secret PAC-Key and the PAC-Opaque.\n   Finally, the EAP-FAST conversation\
    \ completes with Result TLV\n   exchanges defined in RFC 4851.  The exported EAP\
    \ Master Session Key\n   (MSK) and Extended MSK (EMSK) are derived from a combination\
    \ of the\n   tunnel key material and key material from the inner EAP method\n\
    \   exchange.\n"
- title: 3.1.  Phase 1 TLS Tunnel
  contents:
  - '3.1.  Phase 1 TLS Tunnel

    '
- title: 3.1.1.  Server-Authenticated Tunnel
  contents:
  - "3.1.1.  Server-Authenticated Tunnel\n   The provisioning EAP-FAST exchange uses\
    \ the same sequence as the EAP-\n   FAST authentication phase 1 to establish a\
    \ protected TLS tunnel.\n   Implementations supporting this version of the Sever-Authenticated\n\
    \   Provisioning Mode MUST support the following TLS ciphersuites defined\n  \
    \ in [RFC5246]:\n         TLS_RSA_WITH_RC4_128_SHA\n         TLS_RSA_WITH_AES_128_CBC_SHA\n\
    \         TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n   Other TLS ciphersuites that provide\
    \ server authentication and\n   encryption MAY be supported.  The server MAY authenticate\
    \ the peer\n   during the TLS handshake in Server-Authenticated Provisioning Mode.\n\
    \   To adhere to best security practices, the peer MUST validate the\n   server's\
    \ certificate chain when performing server-side authentication\n   to obtain the\
    \ full security benefits of Server-Authenticated\n   provisioning.\n"
- title: 3.1.2.  Server-Unauthenticated Tunnel
  contents:
  - "3.1.2.  Server-Unauthenticated Tunnel\n   Implementations supporting this version\
    \ of the Sever-Unauthenticated\n   Provisioning Mode MUST support the following\
    \ TLS ciphersuite defined\n   in [RFC5246]:\n      TLS_DH_anon_WITH_AES_128_CBC_SHA\n\
    \   Anonymous ciphersuites SHOULD NOT be allowed outside of EAP-FAST\n   Server-Unauthenticated\
    \ Provisioning Mode.  Any ciphersuites that are\n   used for Server-Unauthenticated\
    \ Provisioning Mode MUST provide a key\n   agreement contributed by both parties.\
    \  Therefore, ciphersuites based\n   on RSA key transport MUST NOT be used for\
    \ this mode.  Ciphersuites\n   that are used for provisioning MUST provide encryption.\n"
- title: 3.2.  Phase 2 - Tunneled Authentication and Provisioning
  contents:
  - "3.2.  Phase 2 - Tunneled Authentication and Provisioning\n   Once a protected\
    \ tunnel is established and the server is\n   unauthenticated, the peer and server\
    \ MUST execute additional\n   authentication and perform integrity checks of the\
    \ TLS tunnel.  Even\n   if both parties are authenticated during TLS tunnel establishment,\n\
    \   the peer and server MAY wish to perform additional authentication\n   within\
    \ the tunnel.  As defined in [RFC4851], the authentication\n   exchange will be\
    \ followed by an Intermediate-Result TLV and a Crypto-\n   Binding TLV, if the\
    \ EAP method succeeded.  The Crypto-Binding TLV\n   provides a check on the integrity\
    \ of the tunnel with respect to the\n   endpoints of the EAP method.  If the preceding\
    \ is successful, then a\n   provisioning exchange MAY take place.  The provisioning\
    \ exchange will\n   use a PAC TLV exchange if a PAC is being provisioned and a\
    \ Server-\n   Trusted-Root TLV if a trusted root certificate is being provisioned.\n\
    \   The provisioning MAY be solicited by the peer or it MAY be\n   unsolicited.\
    \  The PAC TLV exchange consists of the server\n   distributing the PAC in a corresponding\
    \ PAC TLV to the peer and the\n   peer confirming its receipt in a final PAC TLV\
    \ Acknowledgement\n   message.  The peer may also use the PAC TLV to request that\
    \ the\n   server send a PAC.  The provisioning TLVs MAY be piggybacked onto the\n\
    \   Result TLV.  Many implementations process TLVs in the order they are\n   received;\
    \ thus, for proper provisioning to occur, the Result TLV MUST\n   precede the\
    \ TLVs to be provisioned (e.g., Tunnel PAC, Machine\n   Authentication PAC, and\
    \ User Authorization PAC).  A PAC TLV MUST NOT\n   be accepted if it is not encapsulated\
    \ in an encrypted TLS tunnel.\n   A fresh PAC MAY be distributed if the server\
    \ detects that the PAC is\n   expiring soon.  In-band PAC refreshing is through\
    \ the PAC TLV\n   mechanism.  The decision of whether or not to refresh the PAC\
    \ is\n   determined by the server.  Based on the PAC-Opaque information, the\n\
    \   server MAY determine not to refresh a peer's PAC, even if the PAC-Key\n  \
    \ has expired.\n"
- title: 3.2.1.  Server-Authenticated Tunneled Authentication
  contents:
  - "3.2.1.  Server-Authenticated Tunneled Authentication\n   If Server-Authenticated\
    \ Provisioning Mode is in use, then any EAP\n   method may be used within the\
    \ TLS tunnel to authenticate the peer\n   that is allowed by the peer's policy.\n"
- title: 3.2.2.  Server-Unauthenticated Tunneled Authentication
  contents:
  - "3.2.2.  Server-Unauthenticated Tunneled Authentication\n   If Server-Unauthenticated\
    \ Provisioning Mode is in use, then peer\n   authenticates the server and the\
    \ server authenticates the peer within\n   the tunnel.  The only method for performing\
    \ authentication defined in\n   this version of EAP-FAST is EAP-FAST-MSCHAPv2\
    \ (in a special way as\n   described in the following section).  It is possible\
    \ for other\n   methods to be defined to perform this authentication in the future.\n"
- title: 3.2.3.  Authenticating Using EAP-FAST-MSCHAPv2
  contents:
  - "3.2.3.  Authenticating Using EAP-FAST-MSCHAPv2\n   EAP-FAST-MSCHAPv2 is a specific\
    \ instantiation of EAP-MSCHAPv2\n   [EAP-MSCHAPv2] defined for use within EAP-FAST.\
    \  The 256-bit inner\n   session key (ISK) is generated from EAP-FAST-MSCHAPv2\
    \ by combining\n   the 128-bit master keys derived according to RFC 3079 [RFC3079],\
    \ with\n   the MasterSendKey taking the first 16 octets and MasterReceiveKey\n\
    \   taking the last 16 octets.\n   Implementations of this version of the EAP-FAST\
    \ Server-\n   Unauthenticated Provisioning Mode MUST support EAP-FAST-MSCHAPv2\
    \ as\n   the inner authentication method.  While other authentication methods\n\
    \   exist, EAP-FAST-MSCHAPv2 was chosen for several reasons:\n   o  It provides\
    \ the ability to slow an active attack by using a hash-\n      based challenge-response\
    \ protocol.\n   o  Its use of a challenge-response protocol, such as MSCHAPv2,\n\
    \      provides some ability to detect a man-in-the-middle attack during\n   \
    \   Server-Unauthenticated Provisioning Mode.\n   o  It is already supported by\
    \ a large deployed base.\n   o  It allows support for password change during the\
    \ EAP-FAST\n      provisioning modes.\n   When using an anonymous Diffie-Hellman\
    \ (DH) key agreement, the\n   challenges MUST be generated as defined in Section\
    \ 3.3.  This forms a\n   binding between the tunnel and the EAP-FAST-MSCHAPv2\
    \ exchanges by\n   using keying material generated during the EAP-FAST tunnel\n\
    \   establishment as the EAP-FAST-MSCHAPv2 challenges instead of using\n   the\
    \ challenges exchanged within the protocol itself.  The exchanged\n   challenges\
    \ are zeroed upon transmission, ignored upon reception, and\n   the challenges\
    \ derived from the TLS key exchange are used in the\n   calculations.  When EAP-FAST-MSCHAPv2\
    \ is used within a tunnel\n   established using a ciphersuite other than one that\
    \ provides\n   anonymous key agreement, the randomly generated EAP-FAST-MSCHAPv2\n\
    \   challenges MUST be exchanged and used.\n   The EAP-FAST-MSCHAPv2 exchange\
    \ forces the server to provide a valid\n   ServerChallengeResponse, which must\
    \ be a function of the server\n   challenge, peer challenge, and password as part\
    \ of its response.\n   This reduces the window of vulnerability of a man-in-the-middle\n\
    \   attack spoofing the server by requiring the attacker to successfully\n   break\
    \ the password within the peer's challenge-response time limit.\n"
- title: 3.2.4.  Use of Other Inner EAP Methods for EAP-FAST Provisioning
  contents:
  - "3.2.4.  Use of Other Inner EAP Methods for EAP-FAST Provisioning\n   Once a protected\
    \ tunnel is established, typically the peer\n   authenticates itself to the server\
    \ before the server can provision\n   the peer.  If the authentication mechanism\
    \ does not support mutual\n   authentication and protection from man-in-the-middle\
    \ attacks, then\n   Server-Authenticated Provisioning Mode MUST be used.  Within\
    \ a server\n   side, authenticated tunnel authentication mechanisms such as EAP-\n\
    \   FAST-GTC (Generic Token Card) [RFC5421] MAY be used.  This will\n   enable\
    \ peers using other authentication mechanisms such as password\n   database and\
    \ one-time passwords to be provisioned in-band as well.\n   This version of the\
    \ EAP-FAST provisioning mode implementation MUST\n   support both EAP-FAST-GTC\
    \ and EAP-FAST-MSCHAPv2 within the tunnel in\n   Server-Authenticated Provisioning\
    \ Mode.\n   It should be noted that Server-Authenticated Provisioning Mode\n \
    \  provides significant security advantages over Server-Unauthenticated\n   Provisioning\
    \ Mode even when EAP-FAST-MSCHAPv2 is being used as the\n   inner method.  It\
    \ protects the EAP-FAST-MSCHAPv2 exchanges from\n   potential active MITM attacks\
    \ by verifying the server's authenticity\n   before executing EAP-FAST-MSCHAPv2.\
    \  Server-Authenticated\n   Provisioning Mode is the recommended provisioning\
    \ mode.  The EAP-FAST\n   peer MUST use the Server- Authenticated Provisioning\
    \ Mode whenever it\n   is configured with a valid trust root for a particular\
    \ server.\n"
- title: 3.3.  Key Derivations Used in the EAP-FAST Provisioning Exchange
  contents:
  - "3.3.  Key Derivations Used in the EAP-FAST Provisioning Exchange\n   The TLS\
    \ tunnel key is calculated according to the TLS version with an\n   extra 72 octets\
    \ of key material derived from the end of the\n   key_block.  Portions of the\
    \ extra 72 octets are used for the EAP-FAST\n   provisioning exchange session\
    \ key seed and as the random challenges\n   in the EAP-FAST-MSCHAPv2 exchange.\n\
    \   To generate the key material, compute:\n                key_block = PRF(master_secret,\n\
    \                               \"key expansion\",\n                         \
    \      server_random +\n                               client_random);\n   until\
    \ enough output has been generated.\n   For example, the key_block for TLS 1.0\
    \ [RFC2246] is partitioned as\n   follows:\n                client_write_MAC_secret[hash_size]\n\
    \                server_write_MAC_secret[hash_size]\n                client_write_key[Key_material_length]\n\
    \                server_write_key[key_material_length]\n                client_write_IV[IV_size]\n\
    \                server_write_IV[IV_size]\n                session_key_seed[40]\n\
    \                ServerChallenge[16]\n                ClientChallenge[16]\n  \
    \ and the key_block for subsequent versions is partitioned as follows:\n     \
    \           client_write_MAC_secret[hash_size]\n                server_write_MAC_secret[hash_size]\n\
    \                client_write_key[Key_material_length]\n                server_write_key[key_material_length]\n\
    \                session_key_seed[40]\n                ServerChallenge[16]\n \
    \               ClientChallenge[16]\n   In the extra key material, session_key_seed\
    \ is used for the EAP-FAST\n   Crypto-Binding TLV exchange while the ServerChallenge\
    \ and\n   ClientChallenge correspond to the authentication server's EAP-FAST-\n\
    \   MSCHAPv2 challenge and the peer's EAP-FAST-MSCHAPv2 challenge,\n   respectively.\
    \  The ServerChallenge and ClientChallenge are only used\n   for the EAP-FAST-MSCHAPv2\
    \ exchange when Diffie-Hellman anonymous key\n   agreement is used in the EAP-FAST\
    \ tunnel establishment.\n"
- title: 3.4.  Peer-Id, Server-Id, and Session-Id
  contents:
  - "3.4.  Peer-Id, Server-Id, and Session-Id\n   The provisioning modes of EAP-FAST\
    \ do not change the general EAP-\n   FAST protocol and thus how the Peer-Id, Server-Id,\
    \ and Session-Id are\n   determined is based on the [RFC4851] techniques.\n  \
    \ Section 3.4 of [RFC4851] describes how the Peer-Id and Server-Id are\n   determined;\
    \ Section 3.5 describes how the Session-Id is generated.\n"
- title: 3.5.  Network Access after EAP-FAST Provisioning
  contents:
  - "3.5.  Network Access after EAP-FAST Provisioning\n   After successful provisioning,\
    \ network access MAY be granted or\n   denied depending upon the server policy.\
    \  For example, in the Server-\n   Authenticated Provisioning Mode, access can\
    \ be granted after the EAP\n   server has authenticated the peer and provisioned\
    \ it with a Tunnel\n   PAC (i.e., a PAC used to mutually authenticate and establish\
    \ the EAP-\n   FAST tunnel).  Additionally, peer policy MAY instruct the peer\
    \ to\n   disconnect the current provisioning connection and initiate a new\n \
    \  EAP-FAST exchange for authentication utilizing the newly provisioned\n   information.\
    \  At the end of the Server-Unauthenticated Provisioning\n   Mode, network access\
    \ SHOULD NOT be granted as this conversation is\n   intended for provisioning\
    \ only and thus no network access is\n   authorized.  The server MAY grant access\
    \ at the end of a successful\n   Server-Authenticated provisioning exchange.\n\
    \   If after successful provisioning access to the network is denied, the\n  \
    \ EAP Server SHOULD conclude with an EAP Failure.  The EAP server SHALL\n   NOT\
    \ grant network access or distribute any session keys to the\n   Network Access\
    \ Server (NAS) if this exchange is not intended to\n   provide network access.\
    \  Even though the provisioning mode completes\n   with a successful inner termination\
    \ (e.g., a successful Result TLV),\n   the server policy defines whether or not\
    \ the peer gains network\n   access.  Thus, it is feasible that the server, while\
    \ providing a\n   successful Result TLV, may conclude that its authentication\
    \ policy\n   was not satisfied and terminate the conversation with an EAP Failure.\n\
    \   Denying network access after EAP-FAST Provisioning may cause\n   disruption\
    \ in scenarios such as wireless devices (e.g., in IEEE\n   802.11 devices, an\
    \ EAP Failure may trigger a full 802.11\n   disassociation).  While a full EAP\
    \ restart can be performed, a smooth\n   transition to the subsequent EAP-FAST\
    \ authentications to enable\n   network access can be achieved by the peer or\
    \ server initiating TLS\n   renegotiation, where the newly provisioned credentials\
    \ can be used to\n   establish a server-authenticated or mutually authenticated\
    \ TLS tunnel\n   for authentication.  Either the peer or server may reject the\
    \ request\n   for TLS renegotiation.  Upon completion of the TLS negotiation and\n\
    \   subsequent authentication, normal network access policy on EAP-FAST\n   authentication\
    \ can be applied.\n"
- title: 4.  Information Provisioned in EAP-FAST
  contents:
  - "4.  Information Provisioned in EAP-FAST\n   Multiple types of credentials MAY\
    \ be provisioned within EAP-FAST.\n   The most common credential is the Tunnel\
    \ PAC that is used to\n   establish the EAP-FAST phase 1 tunnel.  In addition\
    \ to the Tunnel\n   PAC, other types of credentials and information can also be\n\
    \   provisioned through EAP-FAST.  They may include trusted root\n   certificates,\
    \ PACs for specific purposes, and user identities, to\n   name a few.  Typically,\
    \ provisioning is invoked after both the peer\n   and server authenticate each\
    \ other and after a successful Crypto-\n   Binding TLV exchange.  However, depending\
    \ on the information being\n   provisioned, mutual authentication MAY not be needed.\n\
    \   At a minimum, either the peer or server must prove authenticity\n   before\
    \ credentials are provisioned to ensure that information is not\n   freely provisioned\
    \ to or by adversaries.  For example, the EAP server\n   may not need to authenticate\
    \ the peer to provision it with trusted\n   root certificates.  However, the peer\
    \ SHOULD authenticate the server\n   before it can accept a trusted server root\
    \ certificate.\n"
- title: 4.1.  Protected Access Credential
  contents:
  - "4.1.  Protected Access Credential\n   A Protected Access Credential (PAC) is\
    \ a security credential\n   generated by the server that holds information specific\
    \ to a peer.\n   The server distributes all PAC information through the use of\
    \ a PAC\n   TLV.  Different types of PAC information are identified through the\n\
    \   PAC Type and other PAC attributes defined in this section.  This\n   document\
    \ defines three types of PACs: a Tunnel PAC, a Machine\n   Authentication PAC,\
    \ and a User Authorization PAC.\n"
- title: 4.1.1.  Tunnel PAC
  contents:
  - "4.1.1.  Tunnel PAC\n   The server distributes the Tunnel PAC to the peer, which\
    \ uses it in\n   subsequent attempts to establish a secure EAP-FAST TLS tunnel\
    \ with\n   the server.  The Tunnel PAC includes a secret key (PAC-Key), data\n\
    \   that is opaque to the peer (PAC-Opaque), and other information (PAC-\n   Info)\
    \ that the peer can interpret.  The opaque data is generated by\n   the server\
    \ and cryptographically protected so it cannot be modified\n   or interpreted\
    \ by the peer.  The Tunnel PAC conveys the server policy\n   of what must and\
    \ can occur in the protected phase 2 tunnel.  It is up\n   to the server policy\
    \ to include what is necessary in a PAC-Opaque to\n   enforce the policy in subsequent\
    \ TLS handshakes.  For example, user\n   identity, I-ID, can be included as the\
    \ part of the server policy.\n   This I-ID information limits the inner EAP methods\
    \ to be carried only\n   on the specified user identity.  Other types of information\
    \ can also\n   be included, such as which EAP method(s) and which TLS ciphersuites\n\
    \   are allowed.  If the server policy is not included in a PAC-Opaque,\n   then\
    \ there is no limitation imposed by the PAC on the usage of the\n   inner EAP\
    \ methods or user identities inside the tunnel established by\n   the use of that\
    \ PAC.\n"
- title: 4.1.2.  Machine Authentication PAC
  contents:
  - "4.1.2.  Machine Authentication PAC\n   The Machine Authentication PAC contains\
    \ information in the PAC-Opaque\n   that identifies the machine.  It is meant\
    \ to be used by a machine\n   when network access is required and no user is logged\
    \ in.  Typically,\n   a server will only grant the minimal amount of access required\
    \ for a\n   machine without a user present based on the Machine Authentication\n\
    \   PAC.  The Machine Authentication PAC MAY be provisioned during the\n   authentication\
    \ of a user.  It SHOULD be stored by the peer in a\n   location that is only accessible\
    \ to the machine.  This type of PAC\n   typically persists across sessions.\n\
    \   The peer can use the Machine Authentication PAC as the Tunnel PAC to\n   establish\
    \ the TLS tunnel.  The EAP server MAY have a policy to bypass\n   additional inner\
    \ EAP method and grant limited network access based on\n   information in the\
    \ Machine Authentication PAC.  The server MAY\n   request additional exchanges\
    \ to validate machine's other\n   authorization criteria, such as posture information\
    \ etc., before\n   granting network access.\n"
- title: 4.1.3.  User Authorization PAC
  contents:
  - "4.1.3.  User Authorization PAC\n   The User Authorization PAC contains information\
    \ in the PAC-Opaque\n   that identifies a user and provides authorization information.\
    \  This\n   type of PAC does not contain a PAC-Key.  The PAC-Opaque portion of\n\
    \   the User Authorization PAC is presented within the protected EAP-FAST\n  \
    \ TLS tunnel to provide user information during stateless session\n   resume so\
    \ user authentication MAY be skipped.  The User Authorization\n   PAC MAY be provisioned\
    \ after user authentication.  It is meant to be\n   short lived and not persisted\
    \ across logon sessions.  The User\n   Authorization PAC SHOULD only be available\
    \ to the user for which it\n   is provisioned.  The User Authorization PAC SHOULD\
    \ be deleted from\n   the peer when the local authorization state of a user's\
    \ session\n   changes, such as upon the user logs out.\n   Once the EAP-FAST phase\
    \ 1 TLS tunnel is established, the peer MAY\n   present a User Authorization PAC\
    \ to the server in a PAC TLV.  This is\n   sent as TLS application data, but it\
    \ MAY be included in the same\n   message as the Finished Handshake message sent\
    \ by the peer.  The User\n   Authorization PAC MUST only be sent within the protection\
    \ of an\n   encrypted tunnel to an authenticated entity.  The server will decrypt\n\
    \   the PAC and evaluate the contents.  If the contents are valid and the\n  \
    \ server policy allows the session to be resumed based on this\n   information,\
    \ then the server will complete the session resumption and\n   grant access to\
    \ the peer without requiring an inner authentication\n   method.  This is called\
    \ stateless session resume in EAP-FAST.  In\n   this case, the server sends the\
    \ Result TLV indicating success without\n   the Crypto-Binding TLV and the peer\
    \ sends back a Result TLV\n   indicating success.  If the User Authorization PAC\
    \ fails the server\n   validation or the server policy, the server MAY either\
    \ reject the\n   request or continue with performing full user authentication\
    \ within\n   the tunnel.\n"
- title: 4.1.4.  PAC Provisioning
  contents:
  - "4.1.4.  PAC Provisioning\n   To request provisioning of a PAC, a peer sends a\
    \ PAC TLV containing a\n   PAC attribute of PAC Type set to the appropriate value.\
    \  For a Tunnel\n   PAC, the value is '1'; for a Machine Authentication PAC, the\
    \ value is\n   '2'; and for a User Authorization PAC, the value is '3'.  The request\n\
    \   MAY be issued after the peer has determined that it has successfully\n   authenticated\
    \ the EAP server and validated the Crypto-Binding TLV to\n   ensure that the TLS\
    \ tunnel's integrity is intact.  Since anonymous DH\n   ciphersuites are only\
    \ allowed for provisioning a Tunnel PAC, if an\n   anonymous ciphersuite is negotiated,\
    \ the Tunnel PAC MAY be\n   provisioned automatically by the server.  The peer\
    \ MUST send separate\n   PAC TLVs for each type of PAC it wants to provision.\
    \  Multiple PAC\n   TLVs can be sent in the same packet or different packets.\
    \  When\n   requesting the Machine Authentication PAC, the peer SHOULD include\
    \ an\n   I-ID TLV containing the machine name prefixed by \"host/\".  The EAP\n\
    \   server will send the PACs after its internal policy has been\n   satisfied,\
    \ or it MAY ignore the request or request additional\n   authentications if its\
    \ policy dictates.  If a peer receives a PAC\n   with an unknown type, it MUST\
    \ ignore it.\n   A PAC-TLV containing PAC-Acknowledge attribute MUST be sent by\
    \ the\n   peer to acknowledge the receipt of the Tunnel PAC.  A PAC-Acknowledge\n\
    \   TLV MUST NOT be used by the peer to acknowledge the receipt of other\n   types\
    \ of PACs.\n   Please see Appendix A.1 for an example of packet exchanges to\n\
    \   provision a Tunnel PAC.\n"
- title: 4.2.  PAC TLV Format
  contents:
  - "4.2.  PAC TLV Format\n   The PAC TLV provides support for provisioning the Protected\
    \ Access\n   Credential (PAC) defined within [RFC4851].  The PAC TLV carries the\n\
    \   PAC and related information within PAC attribute fields.\n   Additionally,\
    \ the PAC TLV MAY be used by the peer to request\n   provisioning of a PAC of\
    \ the type specified in the PAC Type PAC\n   attribute.  The PAC TLV MUST only\
    \ be used in a protected tunnel\n   providing encryption and integrity protection.\
    \  A general PAC TLV\n   format is defined as follows:\n   0                 \
    \  1                   2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PAC Attributes...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        M\n             0 - Non-mandatory TLV\n             1 - Mandatory TLV\n\
    \        R\n             Reserved, set to zero (0)\n        TLV Type\n       \
    \           11 - PAC TLV\n        Length\n                Two octets containing\
    \ the length of the PAC attributes\n                field in octets.\n       \
    \ PAC Attributes\n                        A list of PAC attributes in the TLV\
    \ format.\n"
- title: 4.2.1.  Formats for PAC Attributes
  contents:
  - "4.2.1.  Formats for PAC Attributes\n   Each PAC attribute in a PAC TLV is formatted\
    \ as a TLV defined as\n   follows:\n    0                   1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Value...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Type\n             The Type field is two octets, denoting the attribute\
    \ type.\n             Allocated Types include:\n                     1 - PAC-Key\n\
    \                     2 - PAC-Opaque\n                     3 - PAC-Lifetime\n\
    \                     4 - A-ID\n                     5 - I-ID\n              \
    \       6 - Reserved\n                     7 - A-ID-Info\n                   \
    \  8 - PAC-Acknowledgement\n                     9 - PAC-Info\n              \
    \       10 - PAC-Type\n        Length\n                Two octets containing the\
    \ length of the Value field in\n                octets.\n        Value\n     \
    \          The value of the PAC attribute.\n"
- title: 4.2.2.  PAC-Key
  contents:
  - "4.2.2.  PAC-Key\n   The PAC-Key is a secret key distributed in a PAC attribute\
    \ of type\n   PAC-Key.  The PAC-Key attribute is included within the PAC TLV\n\
    \   whenever the server wishes to issue or renew a PAC that is bound to a\n  \
    \ key such as a Tunnel PAC.  The key is a randomly generated octet\n   string,\
    \ which is 32 octets in length.  The generator of this key is\n   the issuer of\
    \ the credential, which is identified by the Authority\n   Identifier (A-ID).\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                            Key                              ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         1 - PAC-Key\n      Length\n         2-octet length indicating\
    \ a 32-octet key\n      Key\n         The value of the PAC-Key.\n"
- title: 4.2.3.  PAC-Opaque
  contents:
  - "4.2.3.  PAC-Opaque\n   The PAC-Opaque attribute is included within the PAC TLV\
    \ whenever the\n   server wishes to issue or renew a PAC or the client wishes\
    \ to present\n   a User Authorization PAC to the server.\n   The PAC-Opaque is\
    \ opaque to the peer and thus the peer MUST NOT\n   attempt to interpret it. \
    \ A peer that has been issued a PAC-Opaque by\n   a server stores that data and\
    \ presents it back to the server\n   according to its PAC Type.  The Tunnel PAC\
    \ is used in the ClientHello\n   SessionTicket extension field defined in [RFC5077].\
    \  If a peer has\n   opaque data issued to it by multiple servers, then it stores\
    \ the data\n   issued by each server separately according to the A-ID.  This\n\
    \   requirement allows the peer to maintain and use each opaque datum as\n   an\
    \ independent PAC pairing, with a PAC-Key mapping to a PAC-Opaque\n   identified\
    \ by the A-ID.  As there is a one-to-one correspondence\n   between the PAC-Key\
    \ and PAC-Opaque, the peer determines the PAC-Key\n   and corresponding PAC-Opaque\
    \ based on the A-ID provided in the EAP-\n   FAST/Start message and the A-ID provided\
    \ in the PAC-Info when it was\n   provisioned with a PAC-Opaque.\n   The PAC-Opaque\
    \ attribute format is summarized as follows:\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         2 - PAC-Opaque\n      Length\n         The Length filed\
    \ is two octets, which contains the length of\n         the Value field in octets.\n\
    \      Value\n         The Value field contains the actual data for the PAC-Opaque.\n\
    \         It is specific to the server implementation.\n"
- title: 4.2.4.  PAC-Info
  contents:
  - "4.2.4.  PAC-Info\n   The PAC-Info is comprised of a set of PAC attributes as\
    \ defined in\n   Section 4.2.1.  The PAC-Info attribute MUST contain the A-ID,\
    \ A-ID-\n   Info, and PAC-Type attributes.  Other attributes MAY be included in\n\
    \   the PAC-Info to provide more information to the peer.  The PAC-Info\n   attribute\
    \ MUST NOT contain the PAC-Key, PAC-Acknowledgement, PAC-\n   Info, or PAC-Opaque\
    \ attributes.  The PAC-Info attribute is included\n   within the PAC TLV whenever\
    \ the server wishes to issue or renew a\n   PAC.\n    0                   1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Attributes...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         9 - PAC-Info\n      Length\n         2-octet Length field\
    \ containing the length of the attributes\n         field in octets.\n      Attributes\n\
    \         The attributes field contains a list of PAC attributes.  Each\n    \
    \     mandatory and optional field type is defined as follows:\n         3 - PAC-LIFETIME\n\
    \            This is a 4-octet quantity representing the expiration time\n   \
    \         of the credential expressed as the number of seconds,\n            excluding\
    \ leap seconds, after midnight UTC, January 1, 1970.\n            This attribute\
    \ MAY be provided to the peer as part of the\n            PAC-Info.\n        \
    \ 4 - A-ID\n            The A-ID is the identity of the authority that issued\
    \ the\n            PAC.  The A-ID is intended to be unique across all issuing\n\
    \            servers to avoid namespace collisions.  The A-ID is used by\n   \
    \         the peer to determine which PAC to employ.  The A-ID is\n          \
    \  treated as an opaque octet string.  This attribute MUST be\n            included\
    \ in the PAC-Info attribute.  The A-ID MUST match the\n            A-ID the server\
    \ used to establish the tunnel.  Since many\n            existing implementations\
    \ expect the A-ID to be 16 octets in\n            length, it is RECOMMENDED that\
    \ the length of an A-ID be 16\n            octets for maximum interoperability.\
    \  One method for\n            generating the A-ID is to use a high-quality random\
    \ number\n            generator to generate a 16-octet random number.  An\n  \
    \          alternate method would be to take the hash of the public key\n    \
    \        or public key certificate belonging a server represented by\n       \
    \     the A-ID.\n         5 - I-ID\n            Initiator identifier (I-ID) is\
    \ the peer identity associated\n            with the credential.  This identity\
    \ is derived from the\n            inner EAP exchange or from the client-side\
    \ authentication\n            during tunnel establishment if inner EAP method\n\
    \            authentication is not used.  The server employs the I-ID in\n   \
    \         the EAP-FAST phase 2 conversation to validate that the same\n      \
    \      peer identity used to execute EAP-FAST phase 1 is also used\n         \
    \   in at minimum one inner EAP method in EAP-FAST phase 2.  If\n            the\
    \ server is enforcing the I-ID validation on the inner EAP\n            method,\
    \ then the I-ID MUST be included in the PAC-Info, to\n            enable the peer\
    \ to also enforce a unique PAC for each unique\n            user.  If the I-ID\
    \ is missing from the PAC-Info, it is\n            assumed that the Tunnel PAC\
    \ can be used for multiple users\n            and the peer will not enforce the\
    \ unique-Tunnel-PAC-per-user\n            policy.\n         7 - A-ID-Info\n  \
    \          Authority Identifier Information is intended to provide a\n       \
    \     user-friendly name for the A-ID.  It may contain the\n            enterprise\
    \ name and server name in a human-readable format.\n            This TLV serves\
    \ as an aid to the peer to better inform the\n            end-user about the A-ID.\
    \  The name is encoded in UTF-8\n            [RFC3629] format.  This attribute\
    \ MUST be included in the\n            PAC-Info.\n         10 - PAC-type\n   \
    \         The PAC-Type is intended to provide the type of PAC.  This\n       \
    \     attribute SHOULD be included in the PAC-Info.  If the PAC-\n           \
    \ Type is not present, then it defaults to a Tunnel PAC (Type\n            1).\n"
- title: 4.2.5.  PAC-Acknowledgement TLV
  contents:
  - "4.2.5.  PAC-Acknowledgement TLV\n   The PAC-Acknowledgement is used to acknowledge\
    \ the receipt of the\n   Tunnel PAC by the peer.  The peer includes the PAC-Acknowledgement\n\
    \   TLV in a PAC-TLV sent to the server to indicate the result of the\n   processing\
    \ and storing of a newly provisioned Tunnel PAC.  This TLV\n   is only used when\
    \ Tunnel PAC is provisioned.\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Result             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         8 - PAC-Acknowledgement\n      Length\n         The length\
    \ of this field is two octets containing a value of 2.\n      Result\n       \
    \  The resulting value MUST be one of the following:\n               1 - Success\n\
    \               2 - Failure\n"
- title: 4.2.6.  PAC-Type TLV
  contents:
  - "4.2.6.  PAC-Type TLV\n   The PAC-Type TLV is a TLV intended to specify the PAC\
    \ type.  It is\n   included in a PAC-TLV sent by the peer to request PAC provisioning\n\
    \   from the server.  Its format is described below:\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         PAC Type              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         10 - PAC-Type\n      Length\n         2-octet Length field\
    \ with a value of 2\n      PAC Type\n         This 2-octet field defines the type\
    \ of PAC being requested or\n         provisioned.  The following values are defined:\n\
    \               1 - Tunnel PAC\n               2 - Machine Authentication PAC\n\
    \               3 - User Authorization PAC\n"
- title: 4.3.  Trusted Server Root Certificate
  contents:
  - "4.3.  Trusted Server Root Certificate\n   Server-Trusted-Root TLV facilitates\
    \ the request and delivery of a\n   trusted server root certificate.  The Server-Trusted-Root\
    \ TLV can be\n   exchanged in regular EAP-FAST authentication mode or provisioning\n\
    \   mode.  The Server-Trusted-Root TLV is always marked as optional, and\n   cannot\
    \ be responded to with a Negative Acknowledgement (NAK) TLV.\n   The Server-Trusted-Root\
    \ TLV MUST only be sent as an inner TLV (inside\n   the protection of the tunnel).\n\
    \   After the peer has determined that it has successfully authenticated\n   the\
    \ EAP server and validated the Crypto-Binding TLV, it MAY send one\n   or more\
    \ Server-Trusted-Root TLVs (marked as optional) to request the\n   trusted server\
    \ root certificates from the EAP server.  The EAP server\n   MAY send one or more\
    \ root certificates with a Public Key\n   Cryptographic System #7 (PKCS#7) TLV\
    \ inside Server-Trusted-Root TLV.\n   The EAP server MAY also choose not to honor\
    \ the request.  Please see\n   Appendix A.3 for an example of a server provisioning\
    \ a server trusted\n   root certificate.\n"
- title: 4.3.1.  Server-Trusted-Root TLV
  contents:
  - "4.3.1.  Server-Trusted-Root TLV\n   The Server-Trusted-Root TLV allows the peer\
    \ to send a request to the\n   EAP server for a list of trusted roots.  The server\
    \ may respond with\n   one or more root certificates in PKCS#7 [RFC2315] format.\n\
    \   If the EAP server sets the credential format to PKCS#7-Server-\n   Certificate-Root,\
    \ then the Server-Trusted-Root TLV should contain the\n   root of the certificate\
    \ chain of the certificate issued to the EAP\n   server packaged in a PKCS#7 TLV.\
    \  If the Server certificate is a\n   self-signed certificate, then the root is\
    \ the self-signed\n   certificate.\n   If the Server-Trusted-Root TLV credential\
    \ format contains a value\n   unknown to the peer, then the EAP peer should ignore\
    \ the TLV.\n   The Server-Trusted-Root TLV is defined as follows:\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Credential-Format   |     Cred TLVs...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \        M\n             0 - Non-mandatory TLV\n        R\n             Reserved,\
    \ set to zero (0)\n        TLV Type\n                  18 - Server-Trusted-Root\
    \ TLV [RFC4851]\n        Length\n                >=2 octets\n        Credential-Format\n\
    \                           The Credential-Format field is two octets.\n     \
    \                      Values include:\n             1 - PKCS#7-Server-Certificate-Root\n\
    \        Cred TLVs\n                   This field is of indefinite length.  It\
    \ contains TLVs\n                   associated with the credential format.  The\
    \ peer may\n                   leave this field empty when using this TLV to request\n\
    \                   server trust roots.\n"
- title: 4.3.2.  PKCS#7 TLV
  contents:
  - "4.3.2.  PKCS#7 TLV\n   The PKCS#7 TLV is sent by the EAP server to the peer inside\
    \ the\n   Server-Trusted-Root TLV.  It contains PKCS#7-wrapped [RFC2315] X.509\n\
    \   certificates.  The format consists of a certificate or certificate\n   chain\
    \ in a Certificates-Only PKCS#7 SignedData message as defined in\n   [RFC2311].\n\
    \   The PKCS#7 TLV is always marked as optional, which cannot be\n   responded\
    \ to with a NAK TLV.  EAP-FAST server implementations that\n   claim to support\
    \ the dynamic provisioning defined in this document\n   SHOULD support this TLV.\
    \  EAP-FAST peer implementations MAY support\n   this TLV.\n   If the PKCS#7 TLV\
    \ contains a certificate or certificate chain that is\n   not acceptable to the\
    \ peer, then the peer MUST ignore the TLV.\n   The PKCS#7 TLV is defined as follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           PKCS #7 Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \      M\n         0 - Optional TLV\n      R\n         Reserved, set to zero (0)\n\
    \      TLV Type\n         20 - PKCS#7 TLV [RFC4851]\n      Length\n         The\
    \ length of the PKCS #7 Data field.\n      PKCS #7 Data\n         This field contains\
    \ the X.509 certificate or certificate chain\n         in a Certificates-Only\
    \ PKCS#7 SignedData message.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This section explains the criteria to be used by\
    \ the IANA for\n   assignment of Type value in the PAC attribute, the PAC Type\
    \ value in\n   the PAC- Type TLV, and the Credential-Format value in the Server-\n\
    \   Trusted-Root TLV.  The \"Specification Required\" policy is used here\n  \
    \ with the meaning defined in BCP 26 [RFC5226].\n   A registry of values, named\
    \ \"EAP-FAST PAC Attribute Types\", has been\n   created for the PAC attribute\
    \ types.  The initial values that\n   populate the registry are:\n         1 -\
    \ PAC-Key\n         2 - PAC-Opaque\n         3 - PAC-Lifetime\n         4 - A-ID\n\
    \         5 - I-ID\n         6 - Reserved\n         7 - A-ID-Info\n         8\
    \ - PAC-Acknowledgement\n         9 - PAC-Info\n        10 - PAC-Type\n   Values\
    \ from 11 to 63 are allocated for management by Cisco.  Values\n   64 to 255 are\
    \ assigned with a \"Specification Required\" policy.\n   A registry of values,\
    \ named \"EAP-FAST PAC Types\", has been created\n   for PAC-Type values used\
    \ in the PAC-Type TLV.  The initial values\n   that populate the registry are:\n\
    \         1 - Tunnel PAC\n         2 - Machine Authentication PAC\n         3\
    \ - User Authorization PAC\n   Values from 4 to 63 are allocated for management\
    \ by Cisco.  Values 64\n   to 255 are assigned with a \"Specification Required\"\
    \ policy.\n   A registry of values, named \"EAP-FAST Server-Trusted-Root Credential\n\
    \   Format Types\", has been created for Credential-Format values used in\n  \
    \ the Server-Trusted-Root TLV.  The initial values that populate the\n   registry\
    \ are:\n         1 - PKCS#7-Server-Certificate-Root\n   Values from 2 to 63 are\
    \ allocated for management by Cisco.  Values 64\n   to 255 are assigned with a\
    \ \"Specification Required\" policy.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The Dynamic Provisioning EAP-FAST protocol shares\
    \ the same security\n   considerations outlined in [RFC4851].  Additionally, it\
    \ also has its\n   unique security considerations described below:\n"
- title: 6.1.  Provisioning Modes and Man-in-the-Middle Attacks
  contents:
  - "6.1.  Provisioning Modes and Man-in-the-Middle Attacks\n   EAP-FAST can be invoked\
    \ in two different provisioning modes: Server-\n   Authenticated Provisioning\
    \ Mode and Server-Unauthenticated\n   Provisioning Mode.  Each mode provides different\
    \ levels of resistance\n   to man-in-the-middle attacks.  The following list identifies\
    \ some of\n   the problems associated with a man-in-the-middle attack:\n   o \
    \ Disclosure of secret information such as keys, identities, and\n      credentials\
    \ to an attacker\n   o  Spoofing of a valid server to a peer and the distribution\
    \ of false\n      credentials\n   o  Spoofing of a valid peer and receiving credentials\
    \ generated for\n      that peer\n   o  Denial of service\n"
- title: 6.1.1.  Server-Authenticated Provisioning Mode and Man-in-the-Middle
  contents:
  - "6.1.1.  Server-Authenticated Provisioning Mode and Man-in-the-Middle\n      \
    \  Attacks\n   In Server-Authenticated Provisioning Mode, the TLS handshake assures\n\
    \   protected communications with the server because the peer must have\n   been\
    \ securely pre-provisioned with the trust roots and/or other\n   authentication\
    \ information necessary to authenticate the server\n   during the handshake. \
    \ This pre-provisioning step prevents an\n   attacker from inserting themselves\
    \ as a man-in-the-middle of the\n   communications.  Unfortunately, secure pre-provisioning\
    \ can be\n   difficult to achieve in many environments.\n   Cryptographic binding\
    \ of inner authentication mechanisms to the TLS\n   tunnel provides additional\
    \ protection from man-in-the-middle attacks\n   resulting from the tunneling of\
    \ authentication mechanisms.\n   Server-Authenticated Provisioning Mode provides\
    \ a high degree of\n   protection from man-in-the-middle attacks.\n"
- title: 6.1.2.  Server-Unauthenticated Provisioning Mode and Man-in-the-Middle
  contents:
  - "6.1.2.  Server-Unauthenticated Provisioning Mode and Man-in-the-Middle\n    \
    \    Attacks\n   In Server-Unauthenticated Provisioning Mode, the TLS handshake\
    \ does\n   not assure protected communications with the server because either\
    \ an\n   anonymous handshake is negotiated or the peer lacks the necessary\n \
    \  information to complete the authentication of the server.  This\n   allows\
    \ an attacker to insert itself in the middle of the TLS\n   communications.\n\
    \   EAP-FAST Server-Unauthenticated Provisioning Mode mitigates the man-\n   in-the-middle\
    \ attack through the following techniques:\n   o  Binding the phase 2 authentication\
    \ method to secret values derived\n      from the phase 1 TLS exchange:\n    \
    \  In the case of EAP-FAST-MSCHAPv2 used with an anonymous Diffie-\n      Hellman\
    \ ciphersuite, the challenges for the EAP-FAST-MSCHAPv2\n      exchange are derived\
    \ from the TLS handshake and are not\n      transmitted within the EAP-FAST-MSCHAPv2\
    \ exchange.  Since the man-\n      in-the-middle attack does not know these challenges,\
    \ it cannot\n      successfully impersonate the server without cracking the EAP-FAST-\n\
    \      MSCHAPv2 message from the peer before the peer times out.\n   o  Cryptographic\
    \ binding of secret values derived from the phase 2\n      authentication exchange\
    \ with secret values derived from the phase\n      1 TLS exchange:\n      This\
    \ makes use of the cryptographic binding exchange defined\n      within EAP-FAST\
    \ to discover the presence of a man-in-the-middle\n      attack by binding secret\
    \ information obtained from the phase 2\n      EAP-FAST-MSCHAPv2 exchange with\
    \ secret information from the phase\n      1 TLS exchange.\n   While it would\
    \ be sufficient to only support the cryptographic\n   binding to mitigate the\
    \ MITM, the binding of the EAP-FAST-MSCHAPv2\n   random challenge derivations\
    \ to the TLS key agreement protocol\n   enables early detection of a man-in-the-middle\
    \ attack.  This guards\n   against adversaries who may otherwise relay the inner\
    \ EAP\n   authentication messages between the true peer and server, and it\n \
    \  enforces that the adversary successfully respond with a valid\n   challenge\
    \ response.\n   The ciphersuite used to establish phase 1 of the Server-\n   Unauthenticated\
    \ Provisioning Mode MUST be one in which both the peer\n   and server provide\
    \ contribution to the derived TLS master key.\n   Ciphersuites that use RSA key\
    \ transport do not meet this requirement.\n   The authenticated and anonymous\
    \ ephemeral Diffie-Hellman ciphersuites\n   provide this type of key agreement.\n\
    \   This document specifies EAP-FAST-MSCHAPv2 as the inner authentication\n  \
    \ exchange; however, it is possible that other inner authentication\n   mechanisms\
    \ to authenticate the tunnel may be developed in the future.\n   Since the strength\
    \ of the man-in-the-middle protection is directly\n   dependent on the strength\
    \ of the inner method, it is RECOMMENDED that\n   any inner method used provide\
    \ at least as much resistance to attack\n   as EAP-FAST-MSCHAPv2.  Cleartext passwords\
    \ MUST NOT be used in\n   Server-Unauthenticated Provisioning Mode.  Note that\
    \ an active man-\n   in-the-middle attack may observe phase 2 authentication method\n\
    \   exchange until the point that the peer determines that authentication\n  \
    \ mechanism fails or is aborted.  This allows for the disclosure of\n   sensitive\
    \ information such as identity or authentication protocol\n   exchanges to the\
    \ man-in-the-middle attack.\n"
- title: 6.2.  Dictionary Attacks
  contents:
  - "6.2.  Dictionary Attacks\n   It is often the case that phase 2 authentication\
    \ mechanisms are based\n   on password credentials.  These exchanges may be vulnerable\
    \ to both\n   online and off-line dictionary attacks.  The two provisioning modes\n\
    \   provide various degrees of protection from these attacks.\n   In online dictionary\
    \ attacks, the attacker attempts to discover the\n   password by repeated attempts\
    \ at authentication using a guessed\n   password.  Neither mode prevents this\
    \ type of attack by itself.\n   Implementations should provide controls that limit\
    \ how often an\n   attacker can execute authentication attempts.\n   In off-line\
    \ dictionary attacks, the attacker captures information\n   that can be processed\
    \ off-line to recover the password.  Server-\n   Authenticated Provisioning Mode\
    \ provides effecting mitigation because\n   the peer will not engage in phase\
    \ 2 authentication without first\n   authenticating the server during phase 1.\
    \  Server-Unauthenticated\n   Provisioning Mode is vulnerable to this type of\
    \ attack.  If, during\n   phase 2 authentication, a peer receives no response\
    \ or an invalid\n   response from the server, then there is a possibility there\
    \ is a man-\n   in-the-middle attack in progress.  Implementations SHOULD log\
    \ these\n   events and, if possible, provide warnings to the user.\n   Implementations\
    \ are also encouraged to provide controls, which are\n   appropriate to their\
    \ environment, that limit how and where Server-\n   Unauthenticated Provisioning\
    \ Mode can be performed.  For example, an\n   implementation may limit this mode\
    \ to be used only on certain\n   interfaces or require user intervention before\
    \ allowing this mode if\n   provisioning has succeeded in the past.\n   Another\
    \ mitigation technique that should not be overlooked is the\n   choice of good\
    \ passwords that have sufficient complexity and length\n   and a password-changing\
    \ policy that requires regular password\n   changes.\n"
- title: 6.3.  Considerations in Selecting a Provisioning Mode
  contents:
  - "6.3.  Considerations in Selecting a Provisioning Mode\n   Since Server-Authenticated\
    \ Provisioning Mode provides much better\n   protection from attacks than Server-Unauthenticated\
    \ Provisioning\n   Mode, Server-Authenticated Provisioning Mode SHOULD be used\
    \ whenever\n   possible.  The Server-Unauthenticated Provisioning Mode provides\
    \ a\n   viable option as there may be deployments that can physically confine\n\
    \   devices during the provisioning or are willing to accept the risk of\n   an\
    \ active dictionary attack.  Further, it is the only option that\n   enables zero-touch\
    \ provisioning and facilitates simpler deployments\n   requiring little to no\
    \ peer configuration.  The peer MAY choose to\n   use alternative secure out-of-band\
    \ mechanisms for PAC provisioning\n   that afford better security than the Server\
    \ Unauthenticated\n   Provisioning Mode.\n"
- title: 6.4.  Diffie-Hellman Groups
  contents:
  - "6.4.  Diffie-Hellman Groups\n   To encourage interoperability implementations\
    \ of EAP-FAST, anonymous\n   provisioning modes MUST support the 2048-bit group\
    \ \"14\" in [RFC3526].\n"
- title: 6.5.  Tunnel PAC Usage
  contents:
  - "6.5.  Tunnel PAC Usage\n   The basic usage of the Tunnel PAC is to establish\
    \ the TLS tunnel.  In\n   this operation, it does not have to provide user authentication\
    \ as\n   user authentication is expected to be carried out in phase 2 of EAP-\n\
    \   FAST.  The EAP-FAST Tunnel PAC MAY contain information about the\n   identity\
    \ of a peer to prevent a particular Tunnel PAC from being used\n   to establish\
    \ a tunnel that can perform phase 2 authentication other\n   peers.  While it\
    \ is possible for the server to accept the Tunnel PAC\n   as authentication for\
    \ the peer, many current implementations do not\n   do this.  The ability to use\
    \ PAC to authenticate peers and provide\n   authorizations will be the subject\
    \ of a future document.  [RFC5077]\n   gives an example PAC-Opaque format in the\
    \ Recommended Ticket\n   Construction section.\n"
- title: 6.6.  Machine Authentication PAC Usage
  contents:
  - "6.6.  Machine Authentication PAC Usage\n   In general, the Machine Authorization\
    \ PAC is expected to provide the\n   minimum access required by a machine without\
    \ a user.  This will\n   typically be a subset of the privilege a registered user\
    \ has.  The\n   server provisioning the PAC should include information necessary\
    \ to\n   validate it at a later point in time.  This would include expiration\n\
    \   information.  The Machine Authentication PAC includes a key so it can\n  \
    \ be used as a Tunnel PAC.  The PAC-Key MUST be kept secret by the\n   peer.\n"
- title: 6.7.  User Authorization PAC Usage
  contents:
  - "6.7.  User Authorization PAC Usage\n   The User Authorization PAC provides the\
    \ privilege associated with a\n   user.  The server provisioning the PAC should\
    \ include the information\n   necessary to validate it at a later point in time.\
    \  This includes\n   expiration and other information associated with the PAC.\
    \  The User\n   Authorization PAC is a bearer credential such that it does not\
    \ have a\n   key that used to authenticate its ownership.  For this reason, this\n\
    \   type of PAC MUST NOT be sent in the clear.  For additional\n   protection,\
    \ the PAC MAY be bound to a Tunnel PAC used to establish\n   the TLS tunnel. \
    \ On the peer, the User Authorization PAC SHOULD only\n   be accessible by the\
    \ user for which it is provisioned.\n"
- title: 6.8.  PAC Storage Considerations
  contents:
  - "6.8.  PAC Storage Considerations\n   The main goal of EAP-FAST is to protect\
    \ the authentication stream\n   over the media link.  However, host security is\
    \ still an issue.  Some\n   care should be taken to protect the PAC on both the\
    \ peer and server.\n   The peer must securely store both the PAC-Key and PAC-Opaque,\
    \ while\n   the server must secure storage of its security association context\n\
    \   used to consume the PAC-Opaque.  Additionally, if alternate\n   provisioning\
    \ is employed, the transportation mechanism used to\n   distribute the PAC must\
    \ also be secured.\n   Most of the attacks described here would require some level\
    \ of effort\n   to execute: conceivably greater than their value.  The main focus\n\
    \   therefore, should be to ensure that proper protections are used on\n   both\
    \ the peer and server.  There are a number of potential attacks\n   that can be\
    \ considered against secure key storage such as:\n   o  Weak Passphrases\n   \
    \   On the peer side, keys are usually protected by a passphrase.  In\n      some\
    \ environments, this passphrase may be associated with the\n      user's password.\
    \  In either case, if an attacker can obtain the\n      encrypted key for a range\
    \ of users, he may be able to successfully\n      attack a weak passphrase.  The\
    \ tools are already in place today to\n      enable an attacker to easily attack\
    \ all users in an enterprise\n      environment through the use of email viruses\
    \ and other techniques.\n   o  Key Finding Attacks\n      Key finding attacks\
    \ are usually mentioned in reference to web\n      servers where the private Secure\
    \ Socket Layer (SSL) key may be\n      stored securely, but at some point, it\
    \ must be decrypted and\n      stored in system memory.  An attacker with access\
    \ to system memory\n      can actually find the key by identifying their mathematical\n\
    \      properties.  To date, this attack appears to be purely theoretical\n  \
    \    and primarily acts to argue strongly for secure access controls on\n    \
    \  the server itself to prevent such unauthorized code from\n      executing.\n\
    \   o  Key duplication, Key substitution, Key modification\n      Once keys are\
    \ accessible to an attacker on either the peer or\n      server, they fall under\
    \ three forms of attack: key duplication,\n      key substitution, and key modification.\
    \  The first option would be\n      the most common, allowing the attacker to\
    \ masquerade as the user\n      in question.  The second option could have some\
    \ use if an attacker\n      could implement it on the server.  Alternatively,\
    \ an attacker\n      could use one of the latter two attacks on either the peer\
    \ or\n      server to force a PAC re-key, and take advantage of the potential\n\
    \      MITM/dictionary attack vulnerability of the EAP-FAST Server-\n      Unauthenticated\
    \ Provisioning Mode.\n   Another consideration is the use of secure mechanisms\
    \ afforded by the\n   particular device.  For instance, some laptops enable secure\
    \ key\n   storage through a special chip.  It would be worthwhile for\n   implementations\
    \ to explore the use of such a mechanism.\n"
- title: 6.9.  Security Claims
  contents:
  - "6.9.  Security Claims\n   The [RFC3748] security claims for EAP-FAST are given\
    \ in Section 7.8\n   of [RFC4851].  When using anonymous provisioning mode, there\
    \ is a\n   greater risk of off-line dictionary attack since it is possible for\
    \ a\n   man-in-the-middle attack to capture the beginning of the inner EAP-\n\
    \   FAST-MSCHAPv2 conversation.  However, as noted previously, it is\n   possible\
    \ to detect the man-in-the-middle attack.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The EAP-FAST design and protocol specification is based\
    \ on the ideas\n   and contributions from Pad Jakkahalli, Mark Krischer, Doug\
    \ Smith,\n   Ilan Frenkel, Max Pritikin, Jan Vilhuber, and Jeremy Steiglitz. \
    \ The\n   authors would also like to thank Jouni Malinen, Pasi Eronen, Jari\n\
    \   Arkko, Chris Newman, Ran Canetti, and Vijay Gurbani for reviewing\n   this\
    \ document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [EAP-MSCHAPv2]  Microsoft Corporation, \"MS-CHAP:\
    \ Extensible\n                   Authentication Protocol Method for Microsoft\n\
    \                   Challenge Handshake Authentication Protocol (CHAP)\n     \
    \              Specification\", January 2009.\n                   http://msdn2.microsoft.com/\n\
    \                   en-us/library/cc224612.aspx\n   [RFC2119]       Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n                   Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2246]       Dierks, T. and C. Allen, \"\
    The TLS Protocol Version\n                   1.0\", RFC 2246, January 1999.\n\
    \   [RFC2311]       Dusse, S., Hoffman, P., Ramsdell, B., Lundblade, L.,\n   \
    \                and L. Repka, \"S/MIME Version 2 Message\n                  \
    \ Specification\", RFC 2311, March 1998.\n   [RFC2315]       Kaliski, B., \"PKCS\
    \ #7: Cryptographic Message Syntax\n                   Version 1.5\", RFC 2315,\
    \ March 1998.\n   [RFC3079]       Zorn, G., \"Deriving Keys for use with Microsoft\n\
    \                   Point-to-Point Encryption (MPPE)\", RFC 3079,\n          \
    \         March 2001.\n   [RFC3526]       Kivinen, T. and M. Kojo, \"More Modular\
    \ Exponential\n                   (MODP) Diffie-Hellman groups for Internet Key\n\
    \                   Exchange (IKE)\", RFC 3526, May 2003.\n   [RFC3629]      \
    \ Yergeau, F., \"UTF-8, a transformation format of ISO\n                   10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC3748]       Aboba, B., Blunk, L., Vollbrecht,\
    \ J., Carlson, J.,\n                   and H. Levkowetz, \"Extensible Authentication\
    \ Protocol\n                   (EAP)\", RFC 3748, June 2004.\n   [RFC4851]   \
    \    Cam-Winget, N., McGrew, D., Salowey, J., and H. Zhou,\n                 \
    \  \"The Flexible Authentication via Secure Tunneling\n                   Extensible\
    \ Authentication Protocol Method (EAP-\n                   FAST)\", RFC 4851,\
    \ May 2007.\n   [RFC5077]       Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n\
    \                   \"Transport Layer Security (TLS) Session Resumption\n    \
    \               without Server-Side State\", RFC 5077, January 2008.\n   [RFC5246]\
    \       Dierks, T. and E. Rescorla, \"The Transport Layer\n                  \
    \ Security (TLS) Protocol Version 1.2\", RFC 5246,\n                   August\
    \ 2008.\n   [RFC5421]       Cam-Winget, N. and H. Zhou, \"Basic Password Exchange\n\
    \                   within the Flexible Authentication via Secure\n          \
    \         Tunneling Extensible Authentication Protocol (EAP-\n               \
    \    FAST)\", RFC 5421, March 2009.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC5226]       Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing\n                   an IANA Considerations Section\
    \ in RFCs\", BCP 26,\n                   RFC 5226, May 2008.\n"
- title: Appendix A.  Examples
  contents:
  - 'Appendix A.  Examples

    '
- title: 'A.1.  Example 1: Successful Tunnel PAC Provisioning'
  contents:
  - "A.1.  Example 1: Successful Tunnel PAC Provisioning\n   The following exchanges\
    \ show anonymous DH with a successful EAP-FAST-\n   MSCHAPv2 exchange within phase\
    \ 2 to provision a Tunnel PAC.  The\n   conversation will appear as follows:\n\
    \          Authenticating Peer     Authenticator\n          -------------------\
    \     -------------\n                                  <- EAP-Request/Identity\n\
    \          EAP-Response/\n          Identity (MyID1) ->\n                    \
    \              <- EAP-Request/EAP-FAST,\n                                 (S=1,\
    \ A-ID)\n          EAP-Response/EAP-FAST\n          (TLS Client Hello without\n\
    \          PAC-Opaque in SessionTicket extension)->\n                        \
    \          <- EAP-Request/EAP-FAST\n                                    (TLS Server\
    \ Hello,\n                                     TLS Server Key Exchange\n     \
    \                              TLS Server Hello Done)\n          EAP-Response/EAP-FAST\n\
    \          (TLS Client Key Exchange\n           TLS Change Cipher Spec\n     \
    \      TLS Finished)   ->\n                                  <- EAP-Request/EAP-FAST\n\
    \                                 ( TLS change_cipher_spec,\n                \
    \                  TLS finished,\n                                 EAP-Payload-TLV\n\
    \                                 (EAP-Request/Identity))\n         // TLS channel\
    \ established\n            (Subsequent messages sent within the TLS channel,\n\
    \                                     encapsulated within EAP-FAST)\n        \
    \ // First EAP Payload TLV is piggybacked on the TLS Finished as\n           \
    \ Application Data and protected by the TLS tunnel\n          EAP Payload TLV\n\
    \          (EAP-Response/Identity) ->\n                                 <-  EAP\
    \ Payload TLV\n                                     (EAP-Request/EAP-FAST-MSCHAPv2\n\
    \                                      (Challenge))\n          EAP Payload TLV\n\
    \          (EAP-Response/EAP-FAST-MSCHAPv2\n           (Response)) ->\n      \
    \                           <-  EAP Payload TLV\n                            \
    \         (EAP-Request/EAP-FAST-MSCHAPv2)\n                                  \
    \   (Success))\n          EAP Payload TLV\n          (EAP-Response/EAP-FAST-MSCHAPv2\n\
    \           (Success)) ->\n                                  <- Intermediate Result\
    \ TLV(Success)\n                                     Crypto-Binding-TLV (Version=1,\n\
    \                                     EAP-FAST Version=1, Nonce,\n           \
    \                          CompoundMAC)\n          Intermediate Result TLV (Success)\n\
    \          Crypto-Binding-TLV (Version=1,\n          EAP-FAST Version=1, Nonce,\n\
    \          CompoundMAC)\n          PAC-TLV (Type=1)\n                        \
    \          <- Result TLV (Success)\n                                     PAC TLV\n\
    \          Result TLV (Success)\n          PAC Acknowledgment ->\n          TLS\
    \ channel torn down\n          (messages sent in cleartext)\n                \
    \                  <- EAP-Failure\n"
- title: 'A.2.  Example 2: Failed Provisioning'
  contents:
  - "A.2.  Example 2: Failed Provisioning\n   The following exchanges show a failed\
    \ EAP-FAST-MSCHAPv2 exchange\n   within phase 2, where the peer failed to authenticate\
    \ the server.\n   The conversation will appear as follows:\n        Authenticating\
    \ Peer     Authenticator\n        -------------------     -------------\n    \
    \                            <- EAP-Request/Identity\n        EAP-Response/\n\
    \        Identity (MyID1) ->\n                                <- EAP-Request/EAP-FAST\n\
    \                                   (s=1, A-ID)\n        EAP-Response/EAP-FAST\n\
    \        (TLS Client Hello without\n        SessionTicket extension)->\n     \
    \                           <- EAP-Request/EAP-FAST\n                        \
    \        (TLS Server Hello\n                                TLS Server Key Exchange\n\
    \                                TLS Server Hello Done)\n        EAP-Response/EAP-FAST\n\
    \        (TLS Client Key Exchange\n         TLS Change Cipher Spec,\n        \
    \ TLS Finished)   ->\n                                                 <- EAP-Request/EAP-FAST\n\
    \                               ( TLS change_cipher_spec,\n                  \
    \              TLS finished,\n                               EAP-Payload-TLV\n\
    \                               (EAP-Request/Identity))\n       // TLS channel\
    \ established\n          (Subsequent messages sent within the TLS channel,\n \
    \                                  encapsulated within EAP-FAST)\n       // First\
    \ EAP Payload TLV is piggybacked on the TLS Finished as\n          Application\
    \ Data and protected by the TLS tunnel\n        EAP Payload TLV\n        (EAP-Response/Identity)->\n\
    \                               <-  EAP Payload TLV\n                        \
    \          (EAP-Request/EAP-FAST-MSCHAPv2\n                                  \
    \  (Challenge))\n        EAP Payload TLV\n        (EAP-Response/EAP-FAST-MSCHAPv2\n\
    \         (Response)) ->\n                               <-  EAP Payload TLV\n\
    \                                   (EAP-Request EAP-FAST-MSCHAPv2\n         \
    \                           (Success))\n        // peer failed to verify server\
    \ MSCHAPv2 response\n        EAP Payload TLV\n        (EAP-Response/EAP-FAST-MSCHAPv2\n\
    \         (Failure)) ->\n                               <-  Result TLV (Failure)\n\
    \        Result TLV (Failure) ->\n        TLS channel torn down\n        (messages\
    \ sent in cleartext)\n                                <- EAP-Failure\n"
- title: 'A.3.  Example 3: Provisioning an Authentication Server''s Trusted Root'
  contents:
  - "A.3.  Example 3: Provisioning an Authentication Server's Trusted Root\n     \
    \ Certificate\n   The following exchanges show a successful provisioning of a\
    \ server\n   trusted root certificate using anonymous DH and EAP-FAST-MSCHAPv2\n\
    \   exchange within phase 2.  The conversation will appear as follows:\n     \
    \ Authenticating Peer     Authenticator\n      -------------------     -------------\n\
    \                              <- EAP-Request/\n                             \
    \ Identity\n      EAP-Response/\n      Identity (MyID1) ->\n                 \
    \             <- EAP-Requese/EAP-FAST\n                              (s=1, A-ID)\n\
    \      EAP-Response/EAP-FAST\n      (TLS Client Hello without\n      SessionTicket\
    \ extension)->\n                              <- EAP-Request/EAP-FAST\n      \
    \                        (TLS Server Hello,\n                              (TLS\
    \ Server Key Exchange\n                               TLS Server Hello Done)\n\
    \      EAP-Response/EAP-FAST\n      (TLS Client Key Exchange\n       TLS Change\
    \ Cipher Spec,\n       TLS Finished)  ->\n                              <- EAP-Request/EAP-FAST\n\
    \                              (TLS Change Cipher Spec\n                     \
    \          TLS Finished)\n                               (EAP-Payload-TLV(\n \
    \                              EAP-Request/Identity))\n      // TLS channel established\n\
    \         (messages sent within the TLS channel)\n      // First EAP Payload TLV\
    \ is piggybacked on the TLS Finished as\n         Application Data and protected\
    \ by the TLS tunnel\n      EAP-Payload TLV\n      (EAP-Response/Identity) ->\n\
    \                              <- EAP Payload TLV\n                          \
    \       (EAP-Request/EAP-FAST-MSCHAPv2\n                                 (Challenge))\n\
    \      EAP Payload TLV\n      (EAP-Response/EAP-FAST-MSCHAPv2\n       (Response))\
    \ ->\n                             <-  EAP Payload TLV\n                     \
    \            (EAP-Request/EAP-FAST-MSCHAPv2\n                                \
    \  (success))\n      EAP Payload TLV\n      (EAP-Response/EAP-FAST-MSCHAPv2\n\
    \       (Success) ->\n                              <- Intermediate Result TLV(Success)\n\
    \                                 Crypto-Binding TLV (Version=1,\n           \
    \                      EAP-FAST Version=1, Nonce,\n                          \
    \       CompoundMAC),\n      Intermediate Result TLV(Success)\n      Crypto-Binding\
    \ TLV (Version=1\n      EAP-FAST Version=1, Nonce,\n      CompoundMAC)\n     \
    \ Server-Trusted-Root TLV\n      (Type = PKCS#7) ->\n                        \
    \      <- Result TLV (Success)\n                                 Server-Trusted-Root\
    \ TLV\n                                 (PKCS#7 TLV)\n      Result TLV (Success)\
    \ ->\n      // TLS channel torn down\n         (messages sent in cleartext)\n\
    \                              <- EAP-Failure\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nancy Cam-Winget\n   Cisco Systems\n   3625 Cisco Way\n\
    \   San Jose, CA  95134\n   US\n   EMail: ncamwing@cisco.com\n   David McGrew\n\
    \   Cisco Systems\n   3625 Cisco Way\n   San Jose, CA  95134\n   US\n   EMail:\
    \ mcgrew@cisco.com\n   Joseph Salowey\n   Cisco Systems\n   2901 3rd Ave\n   Seattle,\
    \ WA  98121\n   US\n   EMail: jsalowey@cisco.com\n   Hao Zhou\n   Cisco Systems\n\
    \   4125 Highlander Parkway\n   Richfield, OH  44286\n   US\n   EMail: hzhou@cisco.com\n"
