- title: __initial_text__
  contents:
  - '       OAuth 2.0 Dynamic Client Registration Management Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines methods for management of OAuth 2.0\n\
    \   dynamic client registrations for use cases in which the properties of\n  \
    \ a registered client may need to be changed during the lifetime of the\n   client.\
    \  Not all authorization servers supporting dynamic client\n   registration will\
    \ support these management methods.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7592.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     1.3.  Protocol Flow . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   2.  Client Configuration Endpoint . . . . . . . . . . . . . . .\
    \ .   5\n     2.1.  Client Read Request . . . . . . . . . . . . . . . . . . .\
    \   6\n     2.2.  Client Update Request . . . . . . . . . . . . . . . . . .  \
    \ 7\n     2.3.  Client Delete Request . . . . . . . . . . . . . . . . . .   9\n\
    \   3.  Client Information Response . . . . . . . . . . . . . . . . .  10\n  \
    \ 4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11\n   5.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  12\n   6.  Privacy\
    \ Considerations  . . . . . . . . . . . . . . . . . . .  13\n   7.  Normative\
    \ References  . . . . . . . . . . . . . . . . . . . .  13\n   Appendix A.  Registration\
    \ Tokens and Client Credentials . . . . .  15\n     A.1.  Credential Rotation\
    \ . . . . . . . . . . . . . . . . . . .  16\n   Appendix B.  Forming the Client\
    \ Configuration Endpoint URL  . . .  16\n   Acknowledgments . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  17\n   Authors' Addresses  . . . . . . . .\
    \ . . . . . . . . . . . . . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In order for an OAuth 2.0 client to utilize an OAuth 2.0\n\
    \   authorization server, the client needs specific information to\n   interact\
    \ with the server, including an OAuth 2.0 client identifier to\n   use with that\
    \ server.  \"OAuth 2.0 Dynamic Client Registration\n   Protocol\" [RFC7591] describes\
    \ how an OAuth 2.0 client can be\n   dynamically registered with an authorization\
    \ server to obtain this\n   information and how metadata about the client can\
    \ be registered with\n   the server.\n   This specification extends the core registration\
    \ specification by\n   defining a set of methods for management of dynamic OAuth\
    \ 2.0 client\n   registrations beyond those defined in the core registration\n\
    \   specification.  In some situations, the registered metadata of a\n   client\
    \ can change over time, either by modification at the\n   authorization server\
    \ or by a change in the client software itself.\n   This specification provides\
    \ methods for the current registration\n   state of a client to be queried at\
    \ the authorization server, methods\n   for the registration of a client to be\
    \ updated at the authorization\n   server, and methods for the client to be unregistered\
    \ from the\n   authorization server.\n   This Experimental RFC is intended to\
    \ encourage development and\n   deployment of interoperable solutions with the\
    \ intent that feedback\n   from this experience will inform a future standard.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words 'MUST', 'MUST NOT', 'REQUIRED',\
    \ 'SHALL', 'SHALL NOT',\n   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and\
    \ 'OPTIONAL' in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   Unless otherwise noted, all the protocol parameter names and values\n   are\
    \ case sensitive.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This specification uses the terms \"access token\", \"\
    authorization\n   code\", \"authorization endpoint\", \"authorization grant\"\
    ,\n   \"authorization server\", \"client\", \"client identifier\", \"client\n\
    \   secret\", \"grant type\", \"protected resource\", \"redirection URI\",\n \
    \  \"refresh token\", \"resource owner\", \"resource server\", \"response\n  \
    \ type\", and \"token endpoint\" defined by OAuth 2.0 [RFC6749] and the\n   terms\
    \ defined by \"OAuth 2.0 Client Dynamic Registration Protocol\"\n   [RFC7591].\n\
    \   This specification defines the following terms:\n   Client Configuration Endpoint\n\
    \      OAuth 2.0 endpoint through which registration information for a\n     \
    \ registered client can be managed.  This URL for this endpoint is\n      returned\
    \ by the authorization server in the client information\n      response.\n   Registration\
    \ Access Token\n      OAuth 2.0 Bearer Token issued by the authorization server\
    \ through\n      the client registration endpoint that is used to authenticate\
    \ the\n      caller when accessing the client's registration information at the\n\
    \      client configuration endpoint.  This access token is associated\n     \
    \ with a particular registered client.\n"
- title: 1.3.  Protocol Flow
  contents:
  - "1.3.  Protocol Flow\n   This extends the flow in \"OAuth 2.0 Dynamic Client Registration\n\
    \   Protocol\" [RFC7591] as follows:\n        +--------(A)- Initial Access Token\
    \ (OPTIONAL)\n        |\n        |   +----(B)- Software Statement (OPTIONAL)\n\
    \        |   |\n        v   v\n    +-----------+                             \
    \         +---------------+\n    |           |--(C)- Client Registration Request\
    \ -->|    Client     |\n    |           |                                    \
    \  | Registration  |\n    |           |<-(D)- Client Information Response ---|\
    \   Endpoint    |\n    |           |                                      +---------------+\n\
    \    |           |\n    |           |                                      +---------------+\n\
    \    | Client or |--(E)- Read or Update Request ------->|               |\n  \
    \  | Developer |                                      |               |\n    |\
    \           |<-(F)- Client Information Response ---|    Client     |\n    |  \
    \         |                                      | Configuration |\n    |    \
    \       |                                      |   Endpoint    |\n    |      \
    \     |                                      |               |\n    |        \
    \   |--(G)- Delete Request --------------->|               |\n    |          \
    \ |                                      |               |\n    |           |<-(H)-\
    \ Delete Confirmation -----------|               |\n    +-----------+        \
    \                              +---------------+\n   Figure 1: Abstract Extended\
    \ Dynamic Client Registration Flow\n   The abstract OAuth 2.0 client dynamic registration\
    \ flow illustrated\n   in Figure 1 describes the interaction between the client\
    \ or developer\n   and the endpoints defined in this specification and its parent.\
    \  This\n   figure does not demonstrate error conditions.  This flow includes\
    \ the\n   following steps:\n   (A)   Optionally, the client or developer is issued\
    \ an initial access\n         token for use with the client registration endpoint.\
    \  The\n         method by which the initial access token is issued to the\n \
    \        client or developer is out of scope for this specification.\n   (B) \
    \  Optionally, the client or developer is issued a software\n         statement\
    \ for use with the client registration endpoint.  The\n         method by which\
    \ the software statement is issued to the client\n         or developer is out\
    \ of scope for this specification.\n   (C)   The client or developer calls the\
    \ client registration endpoint\n         with its desired registration metadata,\
    \ optionally including\n         the initial access token from (A) if one is required\
    \ by the\n         authorization server.\n   (D)   The authorization server registers\
    \ the client and returns:\n         *  the client's registered metadata,\n   \
    \      *  a client identifier that is unique to the server,\n         *  a set\
    \ of client credentials such as a client secret, if\n            applicable for\
    \ this client,\n         *  a URI pointing to the client configuration endpoint,\
    \ and\n         *  a registration access token to be used when calling the\n \
    \           client configuration endpoint.\n   (E)   The client or developer optionally\
    \ calls the client\n         configuration endpoint with a read or update request\
    \ using the\n         registration access token issued in (D).  An update request\n\
    \         contains all of the client's registered metadata.\n   (F)   The authorization\
    \ server responds with the client's current\n         configuration, potentially\
    \ including a new registration access\n         token and a new set of client\
    \ credentials such as a client\n         secret if applicable for this client.\
    \  If a new registration\n         access token is issued, it replaces the token\
    \ issued in (D) for\n         all subsequent calls to the client configuration\
    \ endpoint.\n   (G)   The client or developer optionally calls the client\n  \
    \       configuration endpoint with a delete request using the\n         registration\
    \ access token issued in (D) or (F).\n   (H)   The authorization server deprovisions\
    \ the client and responds\n         with a confirmation that the deletion has\
    \ taken place.\n"
- title: 2.  Client Configuration Endpoint
  contents:
  - "2.  Client Configuration Endpoint\n   The client configuration endpoint is an\
    \ OAuth 2.0 protected resource\n   that is provisioned by the server to facilitate\
    \ viewing, updating,\n   and deleting a client's registered information.  The\
    \ location of this\n   endpoint is communicated to the client through the\n  \
    \ \"registration_client_uri\" member of the client information response,\n   as\
    \ specified in Section 3.  The client MUST use its registration\n   access token\
    \ in all calls to this endpoint as an OAuth 2.0 Bearer\n   Token [RFC6750].\n\
    \   The client configuration endpoint MUST be protected by a transport-\n   layer\
    \ security mechanism, as described in Section 5.\n   Operations on this endpoint\
    \ are switched through the use of different\n   HTTP methods [RFC7231].  If an\
    \ authorization server does not support\n   a particular method on the client\
    \ configuration endpoint, it MUST\n   respond with the appropriate error code.\n"
- title: 2.1.  Client Read Request
  contents:
  - "2.1.  Client Read Request\n   To read the current configuration of the client\
    \ on the authorization\n   server, the client makes an HTTP GET request to the\
    \ client\n   configuration endpoint, authenticating with its registration access\n\
    \   token.\n   The following is a non-normative example request:\n     GET /register/s6BhdRkqt3\
    \ HTTP/1.1\n     Accept: application/json\n     Host: server.example.com\n   \
    \  Authorization: Bearer reg-23410913-abewfq.123483\n   Upon successful read of\
    \ the information for a currently active\n   client, the authorization server\
    \ responds with an HTTP 200 OK with\n   content type of \"application/json\" and\
    \ a payload as described in\n   Section 3.  Some values in the response, including\
    \ the\n   \"client_secret\" and \"registration_access_token\", MAY be different\n\
    \   from those in the initial registration response.  If the\n   authorization\
    \ server includes a new client secret and/or registration\n   access token in\
    \ its response, the client MUST immediately discard its\n   previous client secret\
    \ and/or registration access token.  The value\n   of the \"client_id\" MUST NOT\
    \ change from the initial registration\n   response.\n   If the registration access\
    \ token used to make this request is not\n   valid, the server MUST respond with\
    \ an error as described in the\n   OAuth Bearer Token Usage specification [RFC6750].\n\
    \   If the client does not exist on this server, the server MUST respond\n   with\
    \ HTTP 401 Unauthorized and the registration access token used to\n   make this\
    \ request SHOULD be immediately revoked.\n   If the client does not have permission\
    \ to read its record, the server\n   MUST return an HTTP 403 Forbidden.\n"
- title: 2.2.  Client Update Request
  contents:
  - "2.2.  Client Update Request\n   To update a previously registered client's registration\
    \ with an\n   authorization server, the client makes an HTTP PUT request to the\n\
    \   client configuration endpoint with a content type of \"application/\n   json\"\
    .  The HTTP entity payload is a JSON [RFC7159] document\n   consisting of a JSON\
    \ object and all parameters as top-level members\n   of that JSON object.  This\
    \ request is authenticated by the\n   registration access token issued to the\
    \ client.\n   This request MUST include all client metadata fields as returned\
    \ to\n   the client from a previous registration, read, or update operation.\n\
    \   The updated client metadata fields request MUST NOT include the\n   \"registration_access_token\"\
    , \"registration_client_uri\",\n   \"client_secret_expires_at\", or \"client_id_issued_at\"\
    \ fields described\n   in Section 3.\n   Valid values of client metadata fields\
    \ in this request MUST replace,\n   not augment, the values previously associated\
    \ with this client.\n   Omitted fields MUST be treated as null or empty values\
    \ by the server,\n   indicating the client's request to delete them from the client's\n\
    \   registration.  The authorization server MAY ignore any null or empty\n   value\
    \ in the request just as any other value.\n   The client MUST include its \"client_id\"\
    \ field in the request, and it\n   MUST be the same as its currently issued client\
    \ identifier.  If the\n   client includes the \"client_secret\" field in the request,\
    \ the value\n   of this field MUST match the currently issued client secret for\
    \ that\n   client.  The client MUST NOT be allowed to overwrite its existing\n\
    \   client secret with its own chosen value.\n   For all metadata fields, the\
    \ authorization server MAY replace any\n   invalid values with suitable default\
    \ values, and it MUST return any\n   such fields to the client in the response.\n\
    \   For example, a client could send the following request to the client\n   registration\
    \ endpoint to update the client registration in the above\n   example with new\
    \ information.\n   The following is a non-normative example request:\n     PUT\
    \ /register/s6BhdRkqt3 HTTP/1.1\n     Accept: application/json\n     Host: server.example.com\n\
    \     Authorization: Bearer reg-23410913-abewfq.123483\n     {\n      \"client_id\"\
    : \"s6BhdRkqt3\",\n      \"client_secret\": \"cf136dc3c1fc93f31185e5885805d\"\
    ,\n      \"redirect_uris\": [\n        \"https://client.example.org/callback\"\
    ,\n        \"https://client.example.org/alt\"],\n      \"grant_types\": [\"authorization_code\"\
    , \"refresh_token\"],\n      \"token_endpoint_auth_method\": \"client_secret_basic\"\
    ,\n      \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\",\n \
    \     \"client_name\": \"My New Example\",\n      \"client_name#fr\": \"Mon Nouvel\
    \ Exemple\",\n      \"logo_uri\": \"https://client.example.org/newlogo.png\",\n\
    \      \"logo_uri#fr\": \"https://client.example.org/fr/newlogo.png\"\n     }\n\
    \   This example uses client metadata values defined in [RFC7591].\n   Upon successful\
    \ update, the authorization server responds with an\n   HTTP 200 OK message with\
    \ content type \"application/json\" and a\n   payload as described in Section\
    \ 3.  Some values in the response,\n   including the \"client_secret\" and \"\
    registration_access_token\", MAY be\n   different from those in the initial registration\
    \ response.  If the\n   authorization server includes a new client secret and/or\
    \ registration\n   access token in its response, the client MUST immediately discard\
    \ its\n   previous client secret and/or registration access token.  The value\n\
    \   of the \"client_id\" MUST NOT change from the initial registration\n   response.\n\
    \   If the registration access token used to make this request is not\n   valid,\
    \ the server MUST respond with an error as described in the\n   OAuth Bearer Token\
    \ Usage specification [RFC6750].\n   If the client does not exist on this server,\
    \ the server MUST respond\n   with HTTP 401 Unauthorized, and the registration\
    \ access token used to\n   make this request SHOULD be immediately revoked.\n\
    \   If the client is not allowed to update its records, the server MUST\n   respond\
    \ with HTTP 403 Forbidden.\n   If the client attempts to set an invalid metadata\
    \ field and the\n   authorization server does not set a default value, the authorization\n\
    \   server responds with an error as described in [RFC7591].\n"
- title: 2.3.  Client Delete Request
  contents:
  - "2.3.  Client Delete Request\n   To deprovision itself on the authorization server,\
    \ the client makes\n   an HTTP DELETE request to the client configuration endpoint.\
    \  This\n   request is authenticated by the registration access token issued to\n\
    \   the client.\n   The following is a non-normative example request:\n     DELETE\
    \ /register/s6BhdRkqt3 HTTP/1.1\n     Host: server.example.com\n     Authorization:\
    \ Bearer reg-23410913-abewfq.123483\n   A successful delete action will invalidate\
    \ the \"client_id\",\n   \"client_secret\", and \"registration_access_token\"\
    \ for this client,\n   thereby preventing the \"client_id\" from being used at\
    \ either the\n   authorization endpoint or token endpoint of the authorization\
    \ server.\n   If possible, the authorization server SHOULD immediately invalidate\n\
    \   all existing authorization grants and currently active access tokens,\n  \
    \ all refresh tokens, and all other tokens associated with this client.\n   If\
    \ a client has been successfully deprovisioned, the authorization\n   server MUST\
    \ respond with an HTTP 204 No Content message.\n   If the server does not support\
    \ the delete method, the server MUST\n   respond with HTTP 405 Not Supported.\n\
    \   If the registration access token used to make this request is not\n   valid,\
    \ the server MUST respond with an error as described in the\n   OAuth Bearer Token\
    \ Usage specification [RFC6750].\n   If the client does not exist on this server,\
    \ the server MUST respond\n   with HTTP 401 Unauthorized and the registration\
    \ access token used to\n   make this request SHOULD be immediately revoked, if\
    \ possible.\n   If the client is not allowed to delete itself, the server MUST\n\
    \   respond with HTTP 403 Forbidden.\n   The following is a non-normative example\
    \ response:\n     HTTP/1.1 204 No Content\n     Cache-Control: no-store\n    \
    \ Pragma: no-cache\n"
- title: 3.  Client Information Response
  contents:
  - "3.  Client Information Response\n   This specification extends the client information\
    \ response defined in\n   \"OAuth 2.0 Client Dynamic Registration\" [RFC7591],\
    \ which states that\n   the response contains the client identifier (as well as\
    \ the client\n   secret if the client is a confidential client).  When used with\
    \ this\n   specification, the client information response also contains the\n\
    \   fully qualified URL of the client configuration endpoint (Section 2)\n   for\
    \ this specific client that the client or developer may use to\n   manage the\
    \ client's registration configuration, as well as a\n   registration access token\
    \ that is to be used by the client or\n   developer to perform subsequent operations\
    \ at the client\n   configuration endpoint.\n   registration_client_uri\n    \
    \  REQUIRED.  String containing the fully qualified URL of the client\n      configuration\
    \ endpoint for this client.\n   registration_access_token\n      REQUIRED.  String\
    \ containing the access token to be used at the\n      client configuration endpoint\
    \ to perform subsequent operations\n      upon the client registration.\n   Additionally,\
    \ the authorization server MUST return all registered\n   metadata about this\
    \ client, including any fields provisioned by the\n   authorization server itself.\
    \  The authorization server MAY reject or\n   replace any of the client's requested\
    \ metadata values submitted\n   during the registration or update requests and\
    \ substitute them with\n   suitable values.\n   The response is an \"application/json\"\
    \ document with all parameters as\n   top-level members of a JSON object [RFC7159].\n\
    \   The following is a non-normative example response:\n     HTTP/1.1 200 OK\n\
    \     Content-Type: application/json\n     Cache-Control: no-store\n     Pragma:\
    \ no-cache\n     {\n      \"registration_access_token\": \"reg-23410913-abewfq.123483\"\
    ,\n      \"registration_client_uri\":\n         \"https://server.example.com/register/s6BhdRkqt3\"\
    ,\n      \"client_id\": \"s6BhdRkqt3\",\n      \"client_secret\": \"cf136dc3c1fc93f31185e5885805d\"\
    ,\n      \"client_id_issued_at\": 2893256800,\n      \"client_secret_expires_at\"\
    : 2893276800,\n      \"client_name\": \"My Example Client\",\n      \"client_name#ja-Jpan-JP\"\
    :\n         \"\\u30AF\\u30E9\\u30A4\\u30A2\\u30F3\\u30C8\\u540D\",\n      \"redirect_uris\"\
    : [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\
    ],\n      \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n    \
    \  \"token_endpoint_auth_method\": \"client_secret_basic\",\n      \"logo_uri\"\
    : \"https://client.example.org/logo.png\",\n      \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\
    \n     }\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This specification registers the following client\
    \ metadata names and\n   descriptions in the \"OAuth Dynamic Client Registration\
    \ Metadata\"\n   registry established by [RFC7591]:\n   o  Client Metadata Name:\
    \ \"registration_access_token\"\n   o  Client Metadata Description: OAuth 2.0\
    \ Bearer Token used to access\n      the client configuration endpoint\n   o \
    \ Change Controller: IESG\n   o  Specification Document(s): RFC 7592\n   o  Client\
    \ Metadata Name: \"registration_client_uri\"\n   o  Client Metadata Description:\
    \ Fully qualified URI of the client\n      registration endpoint\n   o  Change\
    \ Controller: IESG\n   o  Specification Document(s): RFC 7592\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   While the client secret can expire, the registration\
    \ access token\n   SHOULD NOT expire while a client is still actively registered.\
    \  If\n   this token were to expire, a developer or client could be left in a\n\
    \   situation where they have no means of retrieving, updating, or\n   deleting\
    \ the client's registration information.  Were that the case,\n   a new registration\
    \ would be required, thereby generating a new client\n   identifier.  However,\
    \ to limit the exposure surface of the\n   registration access token, the registration\
    \ access token MAY be\n   rotated when the developer or client does a read or\
    \ update operation\n   on the client's client configuration endpoint.  As the\
    \ registration\n   access tokens are relatively long-term credentials, and since\
    \ the\n   registration access token is a Bearer Token and acts as the sole\n \
    \  authentication for use at the client configuration endpoint, it MUST\n   be\
    \ protected by the developer or client as described in the OAuth 2.0\n   Bearer\
    \ Token Usage specification [RFC6750].\n   Since requests to the client configuration\
    \ endpoint result in the\n   transmission of clear-text credentials (in the HTTP\
    \ request and\n   response), the authorization server MUST require the use of\
    \ a\n   transport-layer security mechanism when sending requests to the\n   endpoint.\
    \  The server MUST support TLS 1.2 [RFC5246] and MAY support\n   additional transport-layer\
    \ security mechanisms meeting its security\n   requirements.  When using TLS,\
    \ the client MUST perform a TLS/SSL\n   server certificate check, per RFC 6125\
    \ [RFC6125].  Implementation\n   security considerations can be found in Recommendations\
    \ for Secure\n   Use of TLS and DTLS [BCP195].\n   Since possession of the registration\
    \ access token authorizes the\n   holder to potentially read, modify, or delete\
    \ a client's registration\n   (including its credentials such as a client_secret),\
    \ the registration\n   access token MUST contain sufficient entropy to prevent\
    \ a random\n   guessing attack of this token, such as described in Section 5.2\
    \ of\n   [RFC6750] and Section 5.1.4.2.2 of [RFC6819].\n   If a client is deprovisioned\
    \ from a server, any outstanding\n   registration access token for that client\
    \ MUST be invalidated at the\n   same time.  Otherwise, this can lead to an inconsistent\
    \ state wherein\n   a client could make requests to the client configuration endpoint\n\
    \   where the authentication would succeed but the action would fail\n   because\
    \ the client is no longer valid.  The authorization server MUST\n   treat all\
    \ such requests as if the registration access token was\n   invalid by returning\
    \ an HTTP 401 Unauthorized error, as described.\n"
- title: 6.  Privacy Considerations
  contents:
  - "6.  Privacy Considerations\n   This specification poses no additional privacy\
    \ considerations beyond\n   those described in the core \"OAuth 2.0 Dynamic Client\
    \ Registration\n   Protocol\" [RFC7591].\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [BCP195]   Sheffer, Y., Holz, R., and P. Saint-Andre,\n\
    \              \"Recommendations for Secure Use of Transport Layer\n         \
    \     Security (TLS) and Datagram Transport Layer Security\n              (DTLS)\"\
    , BCP 195, RFC 7525, May 2015,\n              <http://www.rfc-editor.org/info/bcp195>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6125]\
    \  Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification\
    \ of Domain-Based Application Service Identity\n              within Internet\
    \ Public Key Infrastructure Using X.509\n              (PKIX) Certificates in\
    \ the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI\
    \ 10.17487/RFC6125, March\n              2011, <http://www.rfc-editor.org/info/rfc6125>.\n\
    \   [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n  \
    \            RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n       \
    \       Framework: Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750,\
    \ October 2012,\n              <http://www.rfc-editor.org/info/rfc6750>.\n   [RFC6819]\
    \  Lodderstedt, T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0\n             \
    \ Threat Model and Security Considerations\", RFC 6819,\n              DOI 10.17487/RFC6819,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6819>.\n   [RFC7159]\
    \  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n             \
    \ Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014,\
    \ <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7231]  Fielding, R., Ed. and\
    \ J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics\
    \ and Content\", RFC 7231,\n              DOI 10.17487/RFC7231, June 2014,\n \
    \             <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7591]  Richer,\
    \ J., Ed., Jones, M., Bradley, J., Machulak, M., and\n              P. Hunt, \"\
    OAuth 2.0 Dynamic Client Registration Protocol\",\n              RFC 7591, DOI\
    \ 10.17487/RFC7591, July 2015,\n              <http://www.rfc-editor.org/info/rfc7591>.\n"
- title: Appendix A.  Registration Tokens and Client Credentials
  contents:
  - "Appendix A.  Registration Tokens and Client Credentials\n   Throughout the course\
    \ of the dynamic registration protocol, there are\n   three different classes\
    \ of credentials in play, each with different\n   properties and targets.\n  \
    \ o  The initial access token is optionally used by the client or\n      developer\
    \ at the registration endpoint.  This is an OAuth 2.0\n      token that is used\
    \ to authorize the initial client registration\n      request.  The content, structure,\
    \ generation, and validation of\n      this token are out of scope for this specification.\
    \  The\n      authorization server can use this token to verify that the\n   \
    \   presenter is allowed to dynamically register new clients.  This\n      token\
    \ may be shared among multiple instances of a client to allow\n      them to each\
    \ register separately, thereby letting the\n      authorization server use this\
    \ token to tie multiple instances of\n      registered clients (each with their\
    \ own distinct client\n      identifier) back to the party to whom the initial\
    \ access token was\n      issued, usually an application developer.  This token\
    \ is usually\n      intended to be used only at the client registration endpoint.\n\
    \   o  The registration access token is used by the client or developer\n    \
    \  at the client configuration endpoint and represents the holder's\n      authorization\
    \ to manage the registration of a client.  This is an\n      OAuth 2.0 Bearer\
    \ Token that is issued from the client registration\n      endpoint in response\
    \ to a client registration request and is\n      returned in a client information\
    \ response.  The registration\n      access token is uniquely bound to the client\
    \ identifier and is\n      required to be presented with all calls to the client\n\
    \      configuration endpoint.  The registration access token should be\n    \
    \  protected as described in [RFC6750] and should not be shared\n      between\
    \ instances of a client.  If a registration access token is\n      shared between\
    \ client instances, one instance could change or\n      delete registration values\
    \ for all other instances of the client.\n      The registration access token\
    \ can be rotated through the use of\n      the client read or update method on\
    \ the client configuration\n      endpoint.  The registration access token is\
    \ intended to be used\n      only at the client configuration endpoint.\n   o\
    \  The client credentials (such as \"client_secret\") are optional\n      depending\
    \ on the type of client and are used to retrieve OAuth\n      tokens.  Client\
    \ credentials are most often bound to particular\n      instances of a client\
    \ and should not be shared between instances.\n      Note that since not all types\
    \ of clients have client credentials,\n      they cannot be used to manage client\
    \ registrations at the client\n      configuration endpoint.  The client credentials\
    \ can be rotated\n      through the use of the client read or update method on\
    \ the client\n      configuration endpoint.  The client credentials are intended\
    \ to be\n      used only at the token endpoint.\n"
- title: A.1.  Credential Rotation
  contents:
  - "A.1.  Credential Rotation\n   The authorization server may be configured to issue\
    \ new registration\n   access tokens and/or client credentials (such as a \"client_secret\"\
    )\n   throughout the lifetime of the client.  This may help minimize the\n   impact\
    \ of exposed credentials.  The authorization server conveys new\n   registration\
    \ access tokens and client credentials (if applicable) to\n   the client in the\
    \ client information response of either a read or\n   update request to the client\
    \ configuration endpoint.  The client's\n   current registration access token\
    \ and client credentials (if\n   applicable) MUST be included in the client information\
    \ response.\n   The registration access token SHOULD be rotated only in response\
    \ to a\n   read or update request to the client configuration endpoint.  At this\n\
    \   point, the new registration access token is returned to the client,\n   the\
    \ old registration access token MUST be discarded by the client,\n   and it SHOULD\
    \ be discarded by the server, if possible.  If, instead,\n   the registration\
    \ access token were to expire or be invalidated\n   outside of such requests,\
    \ the client or developer might be locked out\n   of managing the client's configuration.\n\
    \   Note that the authorization server decides the frequency of the\n   credential\
    \ rotation and not the client.  Methods by which the client\n   can request credential\
    \ rotation are outside the scope of this\n   document.\n"
- title: Appendix B.  Forming the Client Configuration Endpoint URL
  contents:
  - "Appendix B.  Forming the Client Configuration Endpoint URL\n   The authorization\
    \ server MUST provide the client with the fully\n   qualified URL in the \"registration_client_uri\"\
    \ element of the Client\n   Information Response, as specified in Section 3. \
    \ The authorization\n   server MUST NOT expect the client to construct or discover\
    \ this URL\n   on its own.  The client MUST use the URL as given by the server\
    \ and\n   MUST NOT construct this URL from component pieces.\n   Depending on\
    \ deployment characteristics, the client configuration\n   endpoint URL may take\
    \ any number of forms.  It is RECOMMENDED that\n   this endpoint URL be formed\
    \ through the use of a server-constructed\n   URL string that combines the client\
    \ registration endpoint's URL and\n   the issued \"client_id\" for this client,\
    \ with the latter as either a\n   path parameter or a query parameter.  For example,\
    \ a client with the\n   client identifier \"s6BhdRkqt3\" could be given a client\
    \ configuration\n   endpoint URL of \"https://server.example.com/register/s6BhdRkqt3\"\
    \n   (path parameter) or of \"https://server.example.com/\n   register?client_id=s6BhdRkqt3\"\
    \ (query parameter).  In both of these\n   cases, the client simply uses the URL\
    \ as given by the authorization\n   server.\n   These common patterns can help\
    \ the server to more easily determine\n   the client to which the request pertains,\
    \ which MUST be matched\n   against the client to which the registration access\
    \ token was issued.\n   If desired, the server MAY simply return the client registration\n\
    \   endpoint URL as the client configuration endpoint URL and change\n   behavior\
    \ based on the authentication context provided by the\n   registration access\
    \ token.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors thank the OAuth Working Group, the User-Managed\
    \ Access\n   Working Group, and the OpenID Connect Working Group participants\
    \ for\n   their input to this document.  In particular, the following\n   individuals\
    \ have been instrumental in their review and contribution\n   to various draft\
    \ versions of this document: Amanda Anganes, Derek\n   Atkins, Tim Bray, Domenico\
    \ Catalano, Donald Coffin, Vladimir\n   Dzhuvinov, George Fletcher, Thomas Hardjono,\
    \ Phil Hunt, William Kim,\n   Torsten Lodderstedt, Eve Maler, Josh Mandel, Nov\
    \ Matake, Tony\n   Nadalin, Nat Sakimura, Christian Scholz, and Hannes Tschofenig.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Justin Richer (editor)\n   Email: ietf@justin.richer.org\n\
    \   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n   URI:   http://self-issued.info/\n\
    \   John Bradley\n   Ping Identity\n   Email: ve7jtb@ve7jtb.com\n   Maciej Machulak\n\
    \   Newcastle University\n   Email: maciej.machulak@gmail.com\n"
