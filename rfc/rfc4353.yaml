- title: __initial_text__
  contents:
  - "                 A Framework for Conferencing with the\n                   Session\
    \ Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) supports the initiation,\n\
    \   modification, and termination of media sessions between user agents.\n   These\
    \ sessions are managed by SIP dialogs, which represent a SIP\n   relationship\
    \ between a pair of user agents.  Because dialogs are\n   between pairs of user\
    \ agents, SIP's usage for two-party\n   communications (such as a phone call),\
    \ is obvious.  Communications\n   sessions with multiple participants, generally\
    \ known as conferencing,\n   are more complicated.  This document defines a framework\
    \ for how such\n   conferencing can occur.  This framework describes the overall\n\
    \   architecture, terminology, and protocol components needed for multi-\n   party\
    \ conferencing.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      5.3. Removing Participants .....................................15\n\
    \      5.4. Destroying Conferences ....................................15\n  \
    \    5.5. Obtaining Membership Information ..........................16\n    \
    \  5.6. Adding and Removing Media .................................16\n      5.7.\
    \ Conference Announcements and Recordings ...................16\n   6. Physical\
    \ Realization ...........................................18\n      6.1. Centralized\
    \ Server ........................................18\n      6.2. Endpoint Server\
    \ ...........................................19\n      6.3. Media Server Component\
    \ ....................................21\n      6.4. Distributed Mixing ........................................22\n\
    \      6.5. Cascaded Mixers ...........................................24\n  \
    \ 7. Security Considerations ........................................26\n   8.\
    \ Contributors ...................................................26\n   9. Acknowledgements\
    \ ...............................................26\n   10. Informative References\
    \ ........................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [1] supports the initiation,\n\
    \   modification, and termination of media sessions between user agents.\n   These\
    \ sessions are managed by SIP dialogs, which represent a SIP\n   relationship\
    \ between a pair of user agents.  Because dialogs are\n   between pairs of user\
    \ agents, SIP's usage for two-party\n   communications (such as a phone call),\
    \ is obvious.  Communications\n   sessions with multiple participants, however,\
    \ are more complicated.\n   SIP can support many models of multi-party communications.\
    \  One,\n   referred to as loosely coupled conferences, makes use of multicast\n\
    \   media groups.  In the loosely coupled model, there is no signaling\n   relationship\
    \ between participants in the conference.  There is no\n   central point of control\
    \ or conference server.  Participation is\n   gradually learned through control\
    \ information that is passed as part\n   of the conference (using the Real Time\
    \ Control Protocol (RTCP) [2],\n   for example).  Loosely coupled conferences\
    \ are easily supported in\n   SIP by using multicast addresses within its session\
    \ descriptions.\n   In another model, referred to as fully distributed multiparty\n\
    \   conferencing, each participant maintains a signaling relationship\n   with\
    \ the other participants, using SIP.  There is no central point of\n   control;\
    \ it is completely distributed amongst the participants.  This\n   model is outside\
    \ the scope of this document.\n   In another model, sometimes referred to as the\
    \ tightly coupled\n   conference, there is a central point of control.  Each participant\n\
    \   connects to this central point.  It provides a variety of conference\n   functions,\
    \ and may possibly perform media mixing functions as well.\n   Tightly coupled\
    \ conferences are not directly addressed by RFC 3261,\n   although basic participation\
    \ is possible without any additional\n   protocol support.\n   This document presents\
    \ the overall framework for tightly coupled SIP\n   conferencing, referred to\
    \ simply as \"conferencing\" from this point\n   forward.  This framework presents\
    \ a general architectural model for\n   these conferences and presents terminology\
    \ used to discuss such\n   conferences.  It also discusses the ways in which SIP\
    \ itself is\n   involved in conferencing.  The aim of the framework is to meet\
    \ the\n   general requirements for conferencing that are outlined in [3].  This\n\
    \   specification alludes to non-SIP-specific mechanisms for achieving\n   several\
    \ conferencing functions.  Those mechanisms are outside the\n   scope of this\
    \ specification.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Conference: Conference is an overused term, which has different\n\
    \      meanings in different contexts.  In SIP, a conference is an\n      instance\
    \ of a multi-party conversation.  Within the context of\n      this specification,\
    \ a conference is always a tightly coupled\n      conference.\n   Loosely Coupled\
    \ Conference: A loosely coupled conference is a\n      conference without coordinated\
    \ signaling relationships amongst\n      participants.  Loosely coupled conferences\
    \ frequently use\n      multicast for distribution of conference memberships.\n\
    \   Tightly Coupled Conference: A tightly coupled conference is a\n      conference\
    \ in which a single user agent, referred to as a focus,\n      maintains a dialog\
    \ with each participant.  The focus plays the\n      role of the centralized manager\
    \ of the conference, and is\n      addressed by a conference URI.\n   Focus: The\
    \ focus is a SIP user agent that is addressed by a\n      conference URI and identifies\
    \ a conference (recall that a\n      conference is a unique instance of a multi-party\
    \ conversation).\n      The focus maintains a SIP signaling relationship with\
    \ each\n      participant in the conference.  The focus is responsible for\n \
    \     ensuring, in some way, that each participant receives the media\n      that\
    \ make up the conference.  The focus also implements conference\n      policies.\
    \  The focus is a logical role.\n   Conference URI: A URI, usually a SIP URI,\
    \ that identifies the focus\n      of a conference.\n   Participant: The software\
    \ element that connects a user or automata to\n      a conference.  It implements,\
    \ at a minimum, a SIP user agent, but\n      may also implement non-SIP-specific\
    \ mechanisms for additional\n      functionality.\n   Conference State: The state\
    \ of the conference includes the state of\n      the focus, the set of participants\
    \ connected to the conference,\n      and the state of their respective dialogs.\n\
    \   Conference Notification Service: A conference notification service is\n  \
    \    a logical function provided by the focus.  The focus can act as a\n     \
    \ notifier [4], accepting subscriptions to the conference state, and\n      notifying\
    \ subscribers about changes to that state.\n   Conference Policy Server: A conference\
    \ policy server is a logical\n      function that can store and manipulate the\
    \ conference policy.\n      This logical function is not specific to SIP, and\
    \ may not\n      physically exist.  It refers to the component that interfaces\
    \ a\n      protocol to the conference policy.\n   Conference Policy: The complete\
    \ set of rules governing a particular\n      conference.\n   Mixer: A mixer receives\
    \ a set of media streams of the same type, and\n      combines their media in\
    \ a type-specific manner, redistributing the\n      result to each participant.\
    \  This includes media transported using\n      RTP [2].  As a result, the term\
    \ defined here is a superset of the\n      mixer concept defined in RFC 3550,\
    \ since it allows for non-RTP-\n      based media such as instant messaging sessions\
    \ [5].\n   Conference-Unaware Participant: A conference-unaware participant is\
    \ a\n      participant in a conference that is not aware that it is actually\n\
    \      in a conference.  As far as the UA is concerned, it is a point-to-\n  \
    \    point call.\n   Cascaded Conferencing: A mechanism for group communications\
    \ in which\n      a set of conferences are linked by having their focuses interact\n\
    \      in some fashion.\n   Simplex Cascaded Conferences: a group of conferences\
    \ that are linked\n      such that the user agent that represents the focus of\
    \ one\n      conference is a conference-unaware participant in another\n     \
    \ conference.\n   Conference-Aware Participant: A conference-aware participant\
    \ is a\n      participant in a conference that has learned, through automated\n\
    \      means, that it is in a conference.  A conference-aware participant\n  \
    \    can use the conference notification service or additional non-\n      SIP-specific\
    \ mechanisms for additional functionality.\n   Conference Server: A conference\
    \ server is a physical server that\n      contains, at a minimum, the focus. \
    \ It may also include a\n      conference policy server and mixers.\n   Mass Invitation:\
    \ An attempt to add a large number of users into a\n      conference.\n   Mass\
    \ Ejection: An attempt to remove a large number of users from a\n      conference.\n\
    \   Sidebar: A sidebar appears to the users within the sidebar as a\n      \"\
    conference within the conference\".  It is a conversation amongst\n      a subset\
    \ of the participants to which the remaining participants\n      are not privy.\n\
    \   Anonymous Participant: An anonymous participant is one that is known\n   \
    \   to other participants through the conference notification service,\n     \
    \ but whose identity is being withheld.\n"
- title: 3.  Overview of Conferencing Architecture
  contents:
  - "3.  Overview of Conferencing Architecture\n                                 +-----------+\n\
    \                                 |           |\n                            \
    \     |           |\n                                 |Participant|\n        \
    \                         |     4     |\n                                 |  \
    \         |\n                                 +-----------+\n                \
    \                       |\n                                       |SIP\n     \
    \                                  |Dialog\n                                 \
    \      |4\n                                       |\n         +-----------+  \
    \         +-----------+            +-----------+\n         |           |     \
    \      |           |            |           |\n         |           |        \
    \   |           |            |           |\n         |Participant|-----------|\
    \   Focus   |------------|Participant|\n         |     1     |  SIP      |   \
    \        |   SIP      |     3     |\n         |           |  Dialog   |      \
    \     |   Dialog   |           |\n         +-----------+  1        +-----------+\
    \   3        +-----------+\n                                       |\n       \
    \                                |\n                                       |SIP\n\
    \                                       |Dialog\n                            \
    \           |2\n                                       |\n                   \
    \              +-----------+\n                                 |           |\n\
    \                                 |           |\n                            \
    \     |Participant|\n                                 |    2      |\n        \
    \                         |           |\n                                 +-----------+\n\
    \                                    Figure 1\n   The central component (literally)\
    \ in a SIP conference is the focus.\n   The focus maintains a SIP signaling relationship\
    \ with each\n   participant in the conference.  The result is a star topology,\
    \ as\n   shown in Figure 1.\n   The focus is responsible for making sure that\
    \ the media streams that\n   constitute the conference are available to the participants\
    \ in the\n   conference.  It does that through the use of one or more mixers,\
    \ each\n   of which combines a number of input media streams to produce one or\n\
    \   more output media streams.  The focus uses the media policy to\n   determine\
    \ the proper configuration of the mixers.\n   The focus has access to the conference\
    \ policy, an instance of which\n   exists for each conference.  Effectively, the\
    \ conference policy can\n   be thought of as a database that describes the way\
    \ that the\n   conference should operate.  It is the responsibility of the focus\
    \ to\n   enforce those policies.  Not only does the focus need read access to\n\
    \   the database, but it needs to know when it has changed.  Such changes\n  \
    \ might result in SIP signaling (for example, the ejection of a user\n   from\
    \ the conference using BYE), and those changes that affect the\n   conference\
    \ state will require a notification to be sent to\n   subscribers using the conference\
    \ notification service.\n   The conference is represented by a URI that identifies\
    \ the focus.\n   Each conference has a unique focus and a unique URI identifying\
    \ that\n   focus.  Requests to the conference URI are routed to the focus for\n\
    \   that specific conference.\n   Users usually join the conference by sending\
    \ an INVITE to the\n   conference URI.  As long as the conference policy allows,\
    \ the INVITE\n   is accepted by the focus and the user is brought into the conference.\n\
    \   Users can leave the conference by sending a BYE, as they would in a\n   normal\
    \ call.\n   Similarly, the focus can terminate a dialog with a participant,\n\
    \   should the conference policy change to indicate that the participant\n   is\
    \ no longer allowed in the conference.  A focus can also initiate an\n   INVITE\
    \ to bring a participant into the conference.\n   The notion of a conference-unaware\
    \ participant is important in this\n   framework.  A conference-unaware participant\
    \ does not even know that\n   the UA it is communicating with happens to be a\
    \ focus.  As far as\n   it's concerned, the UA appears like any other UA.  The\
    \ focus, of\n   course, knows that it's a focus, and it performs the tasks needed\
    \ for\n   the conference to operate.\n   Conference-unaware participants have\
    \ access to a good deal of\n   functionality.  They can join and leave conferences\
    \ using SIP, and\n   obtain more advanced features through stimulus signaling,\
    \ as\n   discussed in [6].  However, if the participant wishes to explicitly\n\
    \   control aspects of the conference using functional signaling\n   protocols,\
    \ the participant must be conference-aware.\n                               .....................................\n\
    \                               .                                   .\n      \
    \                         .                                   .\n            \
    \                   .                                   .\n                  \
    \             .                                   .\n                        \
    \       .                                   .\n                              \
    \ .                                   .\n                               .    \
    \                               .\n                               . +-----------+\
    \        //-----\\\\    .\n                               . |           |    \
    \  ||         ||  .\n                      non-SIP  . | Conference|        \\\\\
    -----//    .\n               +---------------->|  Policy   |       |         \
    \ |  .\n               |               . |  Server   |---->  |          |  .\n\
    \               |               . |           |       |Conference|  .\n      \
    \         |               . +-----------+       |  Policy  |  .\n            \
    \   |               .                     |          |  .\n               |  \
    \             .                     |          |  .\n         +-----------+  \
    \       . +-----------+       |          |  .\n         |           |        \
    \ . |           |        \\       //   .\n         |           |         . | \
    \          |         \\-----/     .\n         |Participant|<--------->|   Focus\
    \   |            |        .\n         |           |  SIP    . |           |  \
    \          |        .\n         |           |  Dialog . |           |<-----------+\
    \        .\n         +-----------+         . |...........|                   \
    \  .\n                   ^           . | Conference|                     .\n \
    \                  |           . |Notification                     .\n       \
    \            +------------>|  Service  |                     .\n             \
    \      Subscription. +-----------+                     .\n                   \
    \            .                                   .\n                         \
    \      .                                   .\n                               .\
    \                                   .\n                               .      \
    \                             .\n                               .....................................\n\
    \                                           Conference\n                     \
    \                       Functions\n                                    Figure\
    \ 2\n   A conference-aware participant is one that has access to advanced\n  \
    \ functionality through additional protocol interfaces, which may\n   include\
    \ access to the conference policy through non-SIP-specific\n   mechanisms.  A\
    \ model for this interaction is shown in Figure 2.  The\n   participant can interact\
    \ with the focus using extensions, such as\n   REFER, in order to access enhanced\
    \ call control functions [7].  The\n   participant can SUBSCRIBE to the conference\
    \ URI, and be connected to\n   the conference notification service provided by\
    \ the focus.  Through\n   this mechanism, it can learn about changes in participants\
    \ -\n   effectively, the state of the dialogs and the media.\n   The participant\
    \ can communicate with the conference policy server\n   using some kind of non-SIP-specific\
    \ mechanism by which it can affect\n   the conference policy.  The conference\
    \ policy server need not be\n   available in any particular conference, although\
    \ there is always a\n   conference policy.\n   The interfaces between the focus\
    \ and the conference policy, and\n   between the conference policy server and\
    \ the conference policy are\n   non-SIP-specific.  For the purposes of SIP-based\
    \ conferencing, they\n   serve as logical roles involved in a conference, as opposed\
    \ to\n   representing a physical decomposition.  The separation of these\n   functions\
    \ is documented here to encourage clarity in the\n   requirements.  This approach\
    \ provides individual SIP implementations\n   the flexibility to compose a conferencing\
    \ system in a scalable and\n   robust manner without requiring the complete development\
    \ of these\n   interfaces.\n"
- title: 3.1.  Usage of URIs
  contents:
  - "3.1.  Usage of URIs\n   It is fundamental to this framework that a conference\
    \ is uniquely\n   identified by a URI, and that this URI identifies the focus\
    \ that is\n   responsible for the conference.  The conference URI is unique, such\n\
    \   that no two conferences have the same conference URI.  A conference\n   URI\
    \ is always a SIP or SIPS URI.\n   The conference URI is opaque to any participants\
    \ that might use it.\n   There is no way to look at the URI and know for certain\
    \ whether it\n   identifies a focus, as opposed to a user or an interface on a\
    \ PSTN\n   gateway.  This is in line with the general philosophy of URI usage\n\
    \   [8].  However, contextual information surrounding the URI (for\n   example,\
    \ SIP header parameters) may indicate that the URI represents\n   a conference.\n\
    \   When a SIP request is sent to the conference URI, that request is\n   routed\
    \ to the focus, and only to the focus.  The element or system\n   that creates\
    \ the conference URI is responsible for guaranteeing this\n   property.\n   The\
    \ conference URI can represent a long-lived conference or interest\n   group,\
    \ such as \"sip:discussion-on-dogs@example.com\".  The focus\n   identified by\
    \ this URI would always exist, and always be managing the\n   conference for whatever\
    \ participants are currently joined.  Other\n   conference URIs can represent\
    \ short-lived conferences, such as an\n   ad-hoc conference.\n   Ideally, a conference\
    \ URI is never constructed or guessed by a user.\n   Rather, conference URIs are\
    \ learned through many mechanisms.  A\n   conference URI can be emailed or sent\
    \ in an instant message.  A\n   conference URI can be linked on a web page.  A\
    \ conference URI can\n   also be obtained from some non-SIP mechanism.\n   To\
    \ determine that a SIP URI does represent a focus, standard\n   techniques for\
    \ URI capability discovery can be used.  Specifically,\n   the callee capabilities\
    \ specification [9] provides the \"isfocus\"\n   feature tag to indicate that\
    \ the UA is acting as focus in this\n   dialog.  Callee capability parameters\
    \ are also used to indicate that\n   a focus supports the conference notification\
    \ service.  This is done\n   by declaring support for the SUBSCRIBE method and\
    \ the relevant\n   package(s) in the caller preferences feature parameters associated\n\
    \   with the conference URI.\n   Other functions in a conference may be represented\
    \ by URIs.  If the\n   conference policy is exposed through a web application,\
    \ it is\n   identified by an HTTP URI.  If it is accessed using an explicit\n\
    \   protocol, it is a URI defined for that protocol.\n   Starting with the conference\
    \ URI, the URIs for the other logical\n   entities in the conference can be learned\
    \ using the conference\n   notification service.\n"
- title: 4.  Functions of the Elements
  contents:
  - "4.  Functions of the Elements\n   This section gives a more detailed description\
    \ of the functions\n   typically implemented in each of the elements.\n"
- title: 4.1.  Focus
  contents:
  - "4.1.  Focus\n   As its name implies, the focus is the center of the conference.\
    \  All\n   participants in the conference are connected to it by a SIP dialog.\n\
    \   The focus is responsible for maintaining the dialogs connected to it.\n  \
    \ It ensures that the dialogs are connected to a set of participants\n   who are\
    \ allowed to participate in the conference, as defined by the\n   membership policy.\
    \  The focus also uses SIP to manipulate the media\n   sessions, in order to make\
    \ sure each participant obtains all the\n   media for the conference.  To do that,\
    \ the focus makes use of mixers.\n   When a focus receives an INVITE, it checks\
    \ the conference policy.\n   The policy might indicate that this participant is\
    \ not allowed to\n   join, in which case the call can be rejected.  It might indicate\
    \ that\n   another participant, acting as a moderator, needs to approve this new\n\
    \   participant.  In that case, the INVITE might be parked on a music-\n   on-hold\
    \ server, or a 183 response might be sent to indicate progress.\n   A notification,\
    \ using the conference notification service, would be\n   sent to the moderator.\
    \  The moderator could then allow this new\n   participant to join, and the focus\
    \ could then accept the INVITE (or\n   unpark it from the music-on-hold server).\
    \  The interpretation of\n   policy by the focus is, itself, a matter of local\
    \ policy, and not\n   subject to standardization.\n   When it is necessary to\
    \ remove a SIP participant (with a confirmed\n   dialog) from a conference, the\
    \ focus would send a BYE to that\n   participant to remove the participant.  This\
    \ is often referred to as\n   \"ejecting\" a user from the conference, and is\
    \ called \"mass ejection\"\n   when done for many users.  Similarly, if it is\
    \ necessary to add a new\n   SIP participant to a conference, the focus would\
    \ send an INVITE\n   request to that participant.  When done for a large number\
    \ of users,\n   this is called mass invitation.  Finally, if it is necessary to\n\
    \   change the properties of the media of a session (for example to\n   remove\
    \ video) for a SIP participant, the focus can update the session\n   description\
    \ for that participant by sending a re-INVITE or UPDATE\n   [15] request with\
    \ a new offer to that participant.\n   In many cases, the signaling actions performed\
    \ by the focus, such as\n   ejection or addition of a participant, will change\
    \ the media\n   composition of the conference.  To affect these changes, the focus\n\
    \   interacts with the mixer.  Through that interaction, it makes sure\n   that\
    \ all valid participants received a copy of the media streams, and\n   that each\
    \ participant sends media to an IP address and port on the\n   mixer that cause\
    \ it to be appropriately mixed with the other media in\n   the conference.  The\
    \ means by which the focus interacts with the\n   mixer are outside the scope\
    \ of this specification.\n"
- title: 4.2.  Conference Policy Server
  contents:
  - "4.2.  Conference Policy Server\n   The conference policy server is a logical\
    \ component of the system.\n   It represents the interface between clients and\
    \ the conference policy\n   that governs the operation of the conference.  Clients\
    \ communicate\n   with the conference policy server using a non-SIP-specific mechanism.\n"
- title: 4.3.  Mixers
  contents:
  - "4.3.  Mixers\n   A mixer is responsible for combining the media streams that\
    \ make up\n   the conference, and generating one or more output streams that are\n\
    \   distributed to recipients (which could be participants or other\n   mixers).\
    \  The process of combining media is specific to the media\n   type, and is directed\
    \ by the focus, under the guidance of the rules\n   described in the media policy.\n\
    \   A mixer is not aware of a \"conference\" as an entity, per se.  A mixer\n\
    \   receives media streams as inputs, and based on directions provided by\n  \
    \ the focus, generates media streams as outputs.  There is no grouping\n   of\
    \ media streams beyond the policies that describe the ways in which\n   the streams\
    \ are mixed.\n   A mixer is always under the control of a focus, either directly\
    \ or\n   indirectly.  The focus is responsible for interpreting the media\n  \
    \ policy, and then installing the appropriate rules in the mixer.  If\n   the\
    \ focus is directly controlling a mixer, the mixer can either be\n   co-resident\
    \ with the focus, or can be controlled through some kind of\n   protocol.  If\
    \ the focus is indirectly controlling a mixer, it\n   delegates the mixing to\
    \ the participants, each of which has its own\n   mixer.  This is described in\
    \ Section 6.4.\n"
- title: 4.4.  Conference Notification Service
  contents:
  - "4.4.  Conference Notification Service\n   The focus can provide a conference\
    \ notification service.  In this\n   role, it acts as a notifier, as defined in\
    \ RFC 3265 [4].  It accepts\n   subscriptions from clients for the conference\
    \ URI, and generates\n   notifications to them as the state of the conference\
    \ changes.\n   The state of the conference includes the participants connected\
    \ to\n   the focus, and also information about the dialogs associated with\n \
    \  them.  As new participants join, this state changes, and is reported\n   through\
    \ the notification service.  Similarly, when someone leaves,\n   this state also\
    \ changes, allowing subscribers to learn about this\n   fact.\n   If a participant\
    \ is anonymous, the conference notification service\n   will either withhold the\
    \ identity of a new participant from other\n   conference participants, or will\
    \ neglect to inform other conference\n   participants about the presence of the\
    \ anonymous participant.  The\n   choice of approach depends on the level of anonymity\
    \ provided to the\n   anonymous participant.\n"
- title: 4.5.  Participants
  contents:
  - "4.5.  Participants\n   A participant in a conference is any SIP user agent that\
    \ has a dialog\n   with the focus.  This SIP user agent can be a PC application,\
    \ a SIP\n   hardphone, or a PSTN gateway.  It can also be another focus.  A\n\
    \   conference that has a participant that is the focus of another\n   conference\
    \ is called a simplex cascaded conference.  They can also be\n   used to provide\
    \ scalable conferences where there are regional sub-\n   conferences, each of\
    \ which is connected to the main conference.\n"
- title: 4.6.  Conference Policy
  contents:
  - "4.6.  Conference Policy\n   The conference policy contains the rules that guide\
    \ the operation of\n   the focus.  The rules can be simple, such as an access\
    \ list that\n   defines the set of allowed participants in a conference.  The\
    \ rules\n   can also be incredibly complex, specifying time-of-day-based rules\
    \ on\n   participation, conditional on the presence of other participants.  It\n\
    \   is important to understand that there is no restriction on the type\n   of\
    \ rules that can be encapsulated in a conference policy.\n   The conference policy\
    \ can be manipulated using web applications or\n   voice applications.  It can\
    \ also be manipulated with non-SIP-specific\n   standard or proprietary protocols.\n"
- title: 5.  Common Operations
  contents:
  - "5.  Common Operations\n   There are a large number of ways in which users can\
    \ interact with a\n   conference.  They can join, leave, set policies, approve\
    \ members, and\n   so on.  This section is meant as an overview of the major\n\
    \   conferencing operations, summarizing how they operate.  More detailed\n  \
    \ examples of the SIP mechanisms can be found in [7].\n   As well as providing\
    \ an overview of the common conferencing\n   operations, each of the subsections\
    \ in this section of the document\n   provides a description of the SIP mechanism\
    \ for supporting the\n   operation.  Non-SIP mechanisms are also possible, but\
    \ not discussed\n   here.\n"
- title: 5.1.  Creating Conferences
  contents:
  - "5.1.  Creating Conferences\n   There are many ways in which a conference can\
    \ be created.  The\n   creation of a conference actually constructs several elements\
    \ all at\n   the same time.  It results in the creation of a focus and a\n   conference\
    \ policy.  It also results in the construction of a\n   conference URI, which\
    \ uniquely identifies the focus.  Since the\n   conference URI needs to be unique,\
    \ the element that creates\n   conferences is responsible for guaranteeing that\
    \ uniqueness.  This\n   can be accomplished deterministically (by keeping records\
    \ of\n   conference URIs, or by generating URIs algorithmically), or\n   probabilistically,\
    \ (by creating a random URI with sufficiently low\n   probabilities of collision).\n\
    \   When conference policy is created, it is established with default\n   rules\
    \ that are implementation-dependent.  If the creator of the\n   conference wishes\
    \ to change those rules, they would do so using a\n   non-SIP mechanism.\n   SIP\
    \ can be used to create conferences hosted in a central server by\n   sending\
    \ an INVITE to a conferencing application that would\n   automatically create\
    \ a new conference and then place a user into it.\n   Creation of conferences\
    \ where the focus resides in an endpoint\n   operates differently.  There, the\
    \ endpoint itself creates the\n   conference URI, and hands it out to other endpoints\
    \ that will be the\n   participants.  What differs from case to case is how the\
    \ endpoint\n   decides to create a conference.\n   One important case is the ad-hoc\
    \ conference described in Section 6.2.\n   There, an endpoint unilaterally decides\
    \ to create the conference\n   based on local policy.  The dialogs that were connected\
    \ to the UA are\n   migrated to the endpoint-hosted focus, using a re-INVITE or\
    \ UPDATE to\n   pass the conference URI to the newly joined participants.\n  \
    \ Alternatively, one UA can ask another UA to create an endpoint-hosted\n   conference.\
    \  This is accomplished with the SIP Join header [10].  The\n   UA that receives\
    \ the Join header in an invitation may need to create\n   a new conference URI\
    \ (a new one is not needed if the dialog that is\n   being joined is already part\
    \ of a conference).  The conference URI is\n   then handed to the recently joined\
    \ participants through a re-INVITE\n   or UPDATE.\n"
- title: 5.2.  Adding Participants
  contents:
  - "5.2.  Adding Participants\n   There are many mechanisms for adding participants\
    \ to a conference.\n   In all cases, participant additions can be first party\
    \ (a user adds\n   themself) or third party (a user adds another user).\n   First\
    \ person additions using SIP are trivially accomplished with a\n   standard INVITE.\
    \  A participant can send an INVITE request to the\n   conference URI, and if\
    \ the conference policy allows them to join,\n   they are added to the conference.\n\
    \   If a UA does not know the conference URI, but has learned about a\n   dialog\
    \ which is connected to a conference (by using the dialog event\n   package, for\
    \ example [11]), the UA can join the conference by using\n   the Join header to\
    \ join the dialog.\n   Third party additions with SIP are done using REFER [12].\
    \  The client\n   can send a REFER request to the participant, asking them to\
    \ send an\n   INVITE request to the conference URI.  Additionally, the client\
    \ can\n   send a REFER request to the focus, asking it to send an INVITE to the\n\
    \   participant.  The latter technique has the benefit of allowing a\n   client\
    \ to add a conference-unaware participant that does not support\n   the REFER\
    \ method.\n"
- title: 5.3.  Removing Participants
  contents:
  - "5.3.  Removing Participants\n   As with additions, there are several mechanisms\
    \ for departures.\n   Removals can also be first person or third person.\n   First\
    \ person departures are trivially accomplished by sending a BYE\n   request to\
    \ the focus.  This terminates the dialog with the focus and\n   removes the participant\
    \ from the conference.  The focus can also\n   remove a participant from the conference\
    \ by sending it a BYE.  In\n   either case, the focus interacts with the mixer\
    \ to make sure that the\n   departed participant ceases receiving conference media,\
    \ and that\n   media from that participant are no longer mixed into the conference.\n\
    \   Third person departures can also be done using SIP, through the REFER\n  \
    \ method.\n"
- title: 5.4.  Destroying Conferences
  contents:
  - "5.4.  Destroying Conferences\n   Conferences can be destroyed in several ways.\
    \  Generally, whether\n   those means are applicable for any particular conference\
    \ is a\n   component of the conference policy.\n   When a conference is destroyed,\
    \ the conference policy associated with\n   it is destroyed.  Any attempts to\
    \ read or write the policy results in\n   a protocol error.  Furthermore, the\
    \ conference URI becomes invalid.\n   Any attempts to send an INVITE to it, or\
    \ SUBSCRIBE to it, would\n   result in a SIP error response.\n   Typically, if\
    \ a conference is destroyed while there are still\n   participants, the focus\
    \ would send a BYE to those participants before\n   actually destroying the conference.\
    \  Similarly, if there were any\n   users subscribed to the conference notification\
    \ service, those\n   subscriptions would be terminated by the server before the\
    \ actual\n   destruction.\n   There is no explicit means in SIP to destroy a conference.\
    \  However,\n   a conference may be destroyed as a by-product of a user leaving\
    \ the\n   conference, which can be done with BYE.  In particular, if the\n   conference\
    \ policy states that the conference is destroyed once the\n   last user or a specific\
    \ user leaves, when that user does leave (using\n   a SIP BYE request), the conference\
    \ is destroyed.\n"
- title: 5.5.  Obtaining Membership Information
  contents:
  - "5.5.  Obtaining Membership Information\n   A participant in a conference will\
    \ frequently wish to know the set of\n   other users in the conference.  This\
    \ information can be obtained in\n   many ways.\n   The conference notification\
    \ service allows a conference-aware\n   participant to subscribe to it, and receive\
    \ notifications that\n   contain the list of participants.  When a new participant\
    \ joins or\n   leaves, subscribers are notified.  The conference notification\n\
    \   service also allows a user to do a \"fetch\" [4] to obtain the current\n \
    \  listing.\n"
- title: 5.6.  Adding and Removing Media
  contents:
  - "5.6.  Adding and Removing Media\n   Each conference is composed of a particular\
    \ set of media that the\n   focus is managing.  For example, a conference might\
    \ contain a video\n   stream and an audio stream.  The set of media streams that\
    \ constitute\n   the conference can be changed by participants.  When the set\
    \ of media\n   in the conference change, the focus will need to generate a re-INVITE\n\
    \   to each participant in order to add or remove the media stream to\n   each\
    \ participant.  When a media stream is being added, a participant\n   can reject\
    \ the offered media stream, in which case it will not\n   receive or contribute\
    \ to that stream.  Rejection of a stream by a\n   participant does not imply that\
    \ the stream is no longer part of the\n   conference, only that the participant\
    \ is not involved in it.\n   A SIP re-INVITE can be used by a participant to add\
    \ or remove a media\n   stream.  This is accomplished using the standard offer/answer\n\
    \   techniques for adding media streams to a session [13].  This will\n   trigger\
    \ the focus to generate its own re-INVITEs.\n"
- title: 5.7.  Conference Announcements and Recordings
  contents:
  - "5.7.  Conference Announcements and Recordings\n   Conference announcements and\
    \ recordings play a key role in many real\n   conferencing systems.  Examples\
    \ of such features include:\n   o  Asking a user to state their name before joining\
    \ the conference,\n      in order to support a roll call\n   o  Allowing a user\
    \ to request a roll call, so they can hear who else\n      is in the conference\n\
    \   o  Allowing a user to press some keys on their keypad to record the\n    \
    \  conference\n   o  Allowing a user to press some keys on their keypad to be\
    \ connected\n      with a human operator\n   o  Allowing a user to press some\
    \ keys on their keypad to mute or\n      unmute their line\n                 \
    \                User 1\n                              +-----------+\n       \
    \                       |           |\n                              |       \
    \    |\n                              |Participant|\n                        \
    \      |     1     |\n                              |           |\n          \
    \                    +-----------+\n                                    |SIP\n\
    \                                    |Dialog\n                         Conference\
    \ |1\n                         Policy +---|--------+\n         User 2        \
    \  Server |   |        |          Application\n      +-----------+           +-----------+\
    \  | non-SIP *************\n      |           |           |           |  |--------\
    \ *           *\n      |           |           |           |  |         *    \
    \       *\n      |Participant|-----------|   Focus   |------------*Participant*\n\
    \      |     2     |  SIP      |           |  |  SIP    *     4     *\n      |\
    \           |  Dialog   |           |--+  Dialog *           *\n      +-----------+\
    \  2        +-----------+     4      *************\n                         \
    \           |\n                                    |\n                       \
    \             |SIP\n                                    |Dialog\n            \
    \                        |3\n                                    |\n         \
    \                     +-----------+\n                              |         \
    \  |\n                              |           |\n                          \
    \    |Participant|\n                              |    3      |\n            \
    \                  |           |\n                              +-----------+\n\
    \                                 User 3\n                                 Figure\
    \ 3\n   In this framework, these capabilities are modeled as an application\n\
    \   that acts as a participant in the conference.  This is shown\n   pictorially\
    \ in Figure 3.  The conference has four participants.\n   Three of these participants\
    \ are end users, and the fourth is the\n   announcement application.\n   If the\
    \ announcement application wishes to play an announcement to all\n   the conference\
    \ members (for example, to announce a join), it merely\n   sends media to the\
    \ mixer as would any other participant.  The\n   announcement is mixed in with\
    \ the conversation and played to the\n   participants.\n   Similarly, the announcement\
    \ application can play an announcement to a\n   specific user by configuring the\
    \ conference policy so that the media\n   it generates is only heard by the target\
    \ user.  The application then\n   generates the desired announcement, and it will\
    \ be heard only by the\n   selected recipient.\n   The announcement application\
    \ can also receive input from a specific\n   user through the conference.  To\
    \ do this, it can use the application\n   interaction framework [6].  This allows\
    \ it to collect user input,\n   possibly through keypad stimulus, and to take\
    \ actions.\n"
- title: 6.  Physical Realization
  contents:
  - "6.  Physical Realization\n   In this section, we present several physical instantiations\
    \ of these\n   components, to show how these basic functions can be combined to\n\
    \   solve a variety of problems.\n"
- title: 6.1.  Centralized Server
  contents:
  - "6.1.  Centralized Server\n   In the most simplistic realization of this framework,\
    \ there is a\n   single physical server in the network, which implements the focus,\n\
    \   the conference policy server, and the mixers.  This is the classic\n   \"\
    one box\" solution, shown in Figure 4.\n                                  Conference\
    \ Server\n                         ...................................\n     \
    \                    .                                 .\n                   \
    \      .                 +------------+  .\n                         .       \
    \          | Conference |  .\n                         .                 |Notification|\
    \  .\n                         .                 |   Server   |  .\n         \
    \                .                 +------------+  .\n                       \
    \  . +----------+                    .\n                         . |Conference|\
    \            +-----+ .\n                         . |  Policy  | +-------+ +-----+|\
    \ .\n                         . |  Server  | | Focus | |Mixer|+ .\n          \
    \               . +----------+ +-------+ +-----+  .\n                        \
    \ ................//.\\.....***.......\n                                     \
    \  //    \\ ***  *\n                                     //     ***      * RTP\n\
    \                             SIP   //    ***  \\      *\n                   \
    \              //   ***      \\SIP   *\n                               //  ***\
    \ RTP      \\     *\n                              /  **              \\     *\n\
    \                       +-----------+         +-----------+\n                \
    \       |Participant|         |Participant|\n                       +-----------+\
    \         +-----------+\n                                    Figure 4\n"
- title: 6.2.  Endpoint Server
  contents:
  - "6.2.  Endpoint Server\n   Another important model is that of a locally-mixed\
    \ ad-hoc conference.\n   In this scenario, two users (A and B) are in a regular\
    \ point-to-point\n   call.  One of the participants (A) decides to conference-in\
    \ a third\n   participant, C.  To do this, A begins acting as a focus.  Its\n\
    \   existing dialog with B becomes the first dialog attached to the\n   focus.\
    \  A would re-INVITE B on that dialog, changing its Contact URI\n   to a new value\
    \ that identifies the focus.  In essence, A \"mutates\"\n   from a single-user\
    \ UA to a focus plus a single user UA, and in the\n   process of such a mutation,\
    \ its URI changes.  Then, the focus makes\n   an outbound INVITE to C.  When C\
    \ accepts, it mixes the media from B\n   and C together, redistributing the results.\
    \  The mixed media is also\n   played locally.  Figure 5 shows a diagram of this\
    \ transition.\n            B                              B\n         +------+\
    \                       +------+\n         |      |                       |  \
    \    |\n         |  UA  |                       |  UA  |\n         |      |  \
    \                     |      |\n         +------+                       +------+\n\
    \           |  .                           |  .\n           |  .             \
    \              |  .\n           |  .                           |  .\n        \
    \   |  .         Transition        |  .\n           |  .        ------------>\
    \      |  .\n        SIP|  .RTP                     SIP|  .RTP\n           | \
    \ .                           |  .\n           |  .                          \
    \ |  .\n           |  .                           |  .\n           |  .      \
    \                     |  .\n           |  .                       +----------+\n\
    \         +------+                     | +------+ |   SIP    +------+\n      \
    \   |      |                     | |Focus | |----------|      |\n         |  UA\
    \  |                     | |C.Pol.| |          |  UA  |\n         |      |   \
    \                  | |Mixers| |..........|      |\n         +------+         \
    \            | |      | |   RTP    +------+\n                                \
    \      | +------+ |\n            A                         |     +    |      \
    \       C\n                                      |     + <..|.......\n       \
    \                               |     +    |      .\n                        \
    \              | +------+ |      .\n                                      | |Parti-|\
    \ |      .\n                                      | |cipant| |      .\n      \
    \                                | |      | |      .\n                       \
    \               | +------+ |      .\n                                      +----------+\
    \      .\n                                           A            .\n        \
    \                                                .\n                         \
    \                             Internal\n                                     \
    \                 Interface\n                                 Figure 5\n   It\
    \ is important to note that the external interfaces in this model,\n   between\
    \ A and B, and between B and C, are exactly the same to those\n   that would be\
    \ used in a centralized server model.  User A could also\n   implement a conference\
    \ policy and a conference notification service,\n   allowing the participants\
    \ to have access to them if they so desired.\n   Just because the focus is co-resident\
    \ with a participant does not\n   mean any aspect of the behaviors and external\
    \ interfaces will change.\n"
- title: 6.3.  Media Server Component
  contents:
  - "6.3.  Media Server Component\n                         +------------+       \
    \      +------------+\n                         | App  Server|     SIP     |Conf.\
    \ Cmpnt.|\n                         |            |-------------|            |\n\
    \                         |   Focus    |    non-SIP  |   Focus    |\n        \
    \                 |   C.Pol    |-------------|   C.Pol    |\n                \
    \         |            |             |   Mixers   |\n                        \
    \ |Notification|             |            |\n                         |      \
    \      |             |            |\n                         +------------+ \
    \            +------------+\n                             |      \\          \
    \          .. .\n                             |       \\\\            RTP... \
    \  .\n                             |         \\\\           ..      .\n      \
    \                       |     SIP   \\\\      ...        .\n                 \
    \        SIP |             \\\\ ...           .RTP\n                         \
    \    |              ..\\             .\n                             |       \
    \    ...   \\\\           .\n                             |        ...       \
    \ \\\\         .\n                             |      ..             \\\\    \
    \   .\n                             |   ...                 \\\\     .\n     \
    \                        | ..                      \\    .\n                 \
    \       +-----------+              +-----------+\n                        |Participant|\
    \              |Participant|\n                        +-----------+          \
    \    +-----------+\n                                    Figure 6\n   In this model,\
    \ shown in Figure 6, each conference involves two\n   centralized servers.  One\
    \ of these servers, referred to as the\n   \"application server\" owns and manages\
    \ the membership and media\n   policies, and maintains a dialog with each participant.\
    \  As a result,\n   it represents the focus seen by all participants in a conference.\n\
    \   However, this server doesn't provide any media support.  To perform\n   the\
    \ actual media mixing function, it makes use of a second server,\n   called the\
    \ \"mixing server\".  This server includes a focus, and\n   implements a conference\
    \ policy, but has no conference notification\n   service.  Its conference policy\
    \ tells it to accept all invitations\n   from the top-level focus.  The focus\
    \ in the application server uses\n   third party call control to connect the media\
    \ streams of each user to\n   the mixing server, as needed.  If the focus in the\
    \ application server\n   receives a conference policy control command from a client,\
    \ it\n   delegates that to the media server by making the same media policy\n\
    \   control command to it.\n   This model allows for the mixing server to be used\
    \ as a resource for\n   a variety of different conferencing applications.  This\
    \ is because it\n   is unaware of conference policy; it is merely a \"slave\"\
    \ to the top-\n   level server, doing whatever it asks.\n"
- title: 6.4.  Distributed Mixing
  contents:
  - "6.4.  Distributed Mixing\n   In a distributed mixed conference, there is still\
    \ a centralized\n   server that implements the focus, conference policy server,\
    \ and media\n   policy server.  However, there are no centralized mixers.  Rather,\n\
    \   there are mixers in each endpoint, along with a conference policy\n   server.\
    \  The focus distributes the media by using third party call\n   control [14]\
    \ to move a media stream between each participant and each\n   other participant.\
    \  As a result, if there are N participants in the\n   conference, there will\
    \ be a single dialog between each participant\n   and the focus, but the session\
    \ description associated with that\n   dialog will be constructed to allow media\
    \ to be distributed amongst\n   the participants.  This is shown in Figure 7.\n\
    \                                   +---------+\n                            \
    \       |Partcpnt |\n                       media       |         |      media\n\
    \                    ...............|         |..................\n          \
    \          .              |  Mixers |                 .\n                    .\
    \              |C.Pol.Srv|                 .\n                    .          \
    \    +---------+                 .\n                    .                   |\
    \                      .\n                    .                   |          \
    \            .\n                    .                   |                    \
    \  .\n                    .            dialog |                      .\n     \
    \               .                   |                      .\n               \
    \     .                   |                      .\n                    .    \
    \               |                      .\n                    .              +---------+\
    \                 .\n                    .              |Cnf.Srvr.|          \
    \       .\n                   .               |         |                 .\n\
    \                   .               |  Focus  |                 .\n          \
    \         .               |C.Pol.Srv|                 .\n                   .\
    \             / |         |  \\              .\n                   .         \
    \   /  +---------+   \\             .\n                   .           /      \
    \            \\            .\n                   .          /                \
    \    \\           .\n                   .         /               dialog \\  \
    \        .\n                   .        /                        \\         .\n\
    \                   .       /dialog                    \\        .\n         \
    \          .      /                            \\       .\n                  \
    \ .     /                              \\      .\n                   .    /  \
    \                              \\     .\n                   .                \
    \                           .\n                 +---------+                  \
    \         +---------+\n                 |Partcpnt |                          \
    \ |Partcpnt |\n                 |         |                           |      \
    \   |\n                 |         | ......................... |         |\n  \
    \               |  Mixers |                           |  Mixers |\n          \
    \       |C.Pol.Srv|          media            |C.Pol.Srv|\n                 +---------+\
    \                           +---------+\n                                    Figure\
    \ 7\n   There are several ways in which the media can be distributed to each\n\
    \   participant for mixing.  In a multi-unicast model, each participant\n   sends\
    \ a copy of its media to each other participant.  In this case,\n   the session\
    \ description manages N-1 media streams.  In a multicast\n   model, each participant\
    \ joins a common multicast group, and each\n   participant sends a single copy\
    \ of its media stream to that group.\n   The underlying multicast infrastructure\
    \ then distributes the media,\n   so that each participant gets a copy.  In a\
    \ single-source multicast\n   model (SSM), each participant sends its media stream\
    \ to a central\n   point, using unicast.  The central point then redistributes\
    \ the media\n   to all participants using multicast.  The focus is responsible\
    \ for\n   selecting the modality of media distribution, and for handling any\n\
    \   hybrids that would be necessitated from clients with mixed\n   capabilities.\n\
    \   When a new participant joins or is added, the focus will perform the\n   necessary\
    \ third party call control to distribute the media from the\n   new participant\
    \ to all the other participants, and vice versa.\n   The central conference server\
    \ also exposes an interface to the\n   conference policy.  Of course, the central\
    \ conference server cannot\n   implement any of the media operations or policies\
    \ directly.  Rather,\n   it would delegate the implementation to each participant.\
    \  As an\n   example, if a participant decides to switch the overall conference\n\
    \   mode from \"voice activated\" to \"continuous presence\", they would\n   communicate\
    \ with the central conference policy server.  The\n   conference policy server,\
    \ in turn, would communicate with the\n   conference policy servers that are co-resident\
    \ with each participant,\n   using some non-SIP-specific mechanism, and instruct\
    \ them to use\n   \"continuous presence\".\n   This model requires additional\
    \ functionality in user agents, which\n   may or may not be present.  The participants,\
    \ therefore, must be able\n   to advertise this capability to the focus.\n"
- title: 6.5.  Cascaded Mixers
  contents:
  - "6.5.  Cascaded Mixers\n   In very large conferences, it may not be possible to\
    \ have a single\n   mixer that can handle all of the media.  A solution to this\
    \ is to use\n   cascaded mixers.  In this architecture, there is a centralized\
    \ focus,\n   but the mixing function is implemented by a multiplicity of mixers,\n\
    \   scattered throughout the network.  Each participant is connected to\n   one,\
    \ and only one of the mixers.  The focus uses some kind of control\n   protocol\
    \ to connect the mixers together, so that all of the\n   participants can hear\
    \ each other.\n   This architecture is shown in Figure 8.\n                  \
    \             +---------+\n       +-----------------------|         |------------------------+\n\
    \       |   ++++++++++++++++++++|         |++++++++++++++++++      |\n       |\
    \   +            +------|  Focus  |---------+       +      |\n       |   +   \
    \         |      |         |         |       +      |\n       |   +          \
    \  |    +-|         |--+      |       +      |\n       |   +            |    |\
    \ +---------+  |      |       +      |\n       |   +            |    |      +\
    \       |      |       +      |\n       |   +            |    |      +       |\
    \      |       +      |\n       |   +            |    |      +       |      |\
    \       +      |\n       |   +            |    | +---------+  |      |       +\
    \      |\n       |   +            |    | |         |  |      |       +      |\n\
    \       |   +            |    | | Mixer 2 |  |      |       +      |\n       |\
    \   +            |    | |         |  |      |       +      |\n       |   +   \
    \         |    | +---------+  |      |       +      |\n       |   +          \
    \  |    |...   .  .... |      |       +      |\n       |   +           .|....|\
    \      .      .|....  |       +      |\n       |   +     ...... |    |      .\
    \       |    ..|...    +      |\n       |   +  ...       |    |      .       |\
    \      |   ....+      |\n       | +---------+    |    | +---------+  |      |\
    \  +---------+ |\n       | |         |    |    | |         |  |      |  |    \
    \     | |\n       | | Mixer 2 |    |    | | Mixer 3 |  |      |  | Mixer 4 | |\n\
    \       | |         |    |    | |         |  |      |  |         | |\n       |\
    \ +---------+    |    | +---------+  |      |  +---------+ |\n       |    .  \
    \  .      |    |      .  .    |      |     .   .    |\n       |   .      .   \
    \  |    |    ..   .    |      |   ..    .    |\n       |  .       .     |    |\
    \   .      .   |      |  .       .   |\n      +---------+  .    |  +---------+\
    \  .   |    +---------+  .   |\n      | Prtcpnt |   .   |  | Prtcpnt |   .  |\
    \    | Prtcpnt |  .   |\n      |    1    |    .  |  |    3    |   .  |    |  \
    \  5    |  .   |\n      +---------+    .  |  +---------+    . |    +---------+\
    \   .  |\n                      . |                 . |                  .  |\n\
    \               +---------+         +---------+           +---------+\n      \
    \         | Prtcpnt |         | Prtcpnt |           | Prtcpnt |\n            \
    \   |    2    |         |    4    |           |    6    |\n               +---------+\
    \         +---------+           +---------+\n         -------  SIP Dialog\n  \
    \       .......  Media Flow\n         +++++++  Control Protocol\n            \
    \                      Figure 8\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Conferences frequently require security features\
    \ in order to properly\n   operate.  The conference policy may dictate that only\
    \ certain\n   participants can join, or that certain participants can create new\n\
    \   policies.  Generally speaking, conference applications are very\n   concerned\
    \ about authorization decisions.  Having mechanisms for\n   establishing and enforcing\
    \ such authorization rules is a central\n   concept throughout this document.\n\
    \   Of course, authorization rules require authentication.  Normal SIP\n   authentication\
    \ mechanisms should suffice for the conference\n   authorization mechanisms described\
    \ here.\n   Privacy is an important aspect of conferencing.  Users may wish to\n\
    \   join a conference without anyone knowing that they have joined, in\n   order\
    \ to silently listen in.  In other applications, a participant\n   may wish to\
    \ hide only their identity from other participants, but\n   otherwise let them\
    \ know of their presence.  These functions need to\n   be provided by the conferencing\
    \ system.\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   This document is the result of discussions amongst the conferencing\n\
    \   design team.  The members of this team include:\n   Alan Johnston\n   Brian\
    \ Rosen\n   Rohan Mahy\n   Henning Schulzrinne\n   Orit Levin\n   Roni Even\n\
    \   Tom Taylor\n   Petri Koskelainen\n   Nermeen Ismail\n   Andy Zmolek\n   Joerg\
    \ Ott\n   Dan Petrie\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Mary Barnes, Chris Boulton\
    \ and Rohan\n   Mahy for their comments.  Thanks to Allison Mankin for her comments\n\
    \   and support of this work.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n         \"\
    RTP: A Transport Protocol for Real-Time Applications\", STD 64,\n         RFC\
    \ 3550, July 2003.\n   [3]   Levin, O. and R. Even, \"High-Level Requirements\
    \ for Tightly\n         Coupled SIP Conferencing\", RFC 4245, November 2005.\n\
    \   [4]   Roach, A., \"Session Initiation Protocol (SIP)-Specific Event\n    \
    \     Notification\", RFC 3265, June 2002.\n   [5]   Campbell, B., \"The Message\
    \ Session Relay Protocol\", Work In\n         Progress, October 2004.\n   [6]\
    \   Rosenberg, J., \"A Framework for Application Interaction in the\n        \
    \ Session Initiation Protocol  (SIP)\", Work In Progress, February\n         2005.\n\
    \   [7]   Johnston, A. and O. Levin, \"Session Initiation Protocol (SIP)\n   \
    \      Call Control - Conferencing for User Agents\", Work in Progress,\n    \
    \     February 2005.\n   [8]   Berners-Lee, T., Fielding, R., and L. Masinter,\
    \ \"Uniform\n         Resource Identifier (URI): Generic Syntax\", STD 66, RFC\
    \ 3986,\n         January 2005.\n   [9]   Rosenberg, J., Schulzrinne, H., and\
    \ P. Kyzivat, \"Indicating\n         User Agent Capabilities in the Session Initiation\
    \ Protocol\n         (SIP)\", RFC 3840, August 2004.\n   [10]  Mahy, R. and D.\
    \ Petrie, \"The Session Initiation Protocol (SIP)\n         \"Join\" Header\"\
    , RFC 3911, October 2004.\n   [11]  Rosenberg, J., Schulzrinne, H., and R. Mahy,\
    \ \"An INVITE-\n         Initiated Dialog Event Package for the Session Initiation\n\
    \         Protocol (SIP)\", RFC 4235, November 2005.\n   [12]  Sparks, R., \"\
    The Session Initiation Protocol (SIP) Refer\n         Method\", RFC 3515, April\
    \ 2003.\n   [13]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n\
    \         Session Description Protocol (SDP)\", RFC 3264, June 2002.\n   [14]\
    \  Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo,\n         \"\
    Best Current Practices for Third Party Call Control (3pcc) in\n         the Session\
    \ Initiation Protocol (SIP)\", BCP 85, RFC 3725, April\n         2004.\n   [15]\
    \  Rosenberg, J., \"The Session Initiation Protocol (SIP) UPDATE\n         Method\"\
    , RFC 3311, October 2002.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jonathan Rosenberg\n   Cisco Systems\n   600 Lanidex Plaza\n\
    \   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@cisco.com\n\
    \   URI:   http://www.jdrosen.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
