- contents:
  - '                            IMAP URL Scheme

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   IMAP (RFC 3501) is a rich protocol for accessing remote message\n
    \  stores.  It provides an ideal mechanism for accessing public mailing\n   list
    archives as well as private and shared message stores.  This\n   document defines
    a URL scheme for referencing objects on an IMAP\n   server.\n   This document
    obsoletes RFC 2192.  It also updates RFC 4467.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Conventions Used in This Document ...............................3\n   3.
    IMAP userinfo Component (iuserinfo) .............................4\n      3.1.
    IMAP Mailbox Naming Scope ..................................4\n      3.2. IMAP
    User Name and Authentication Mechanism ................4\n      3.3. Limitations
    of enc-user ....................................6\n   4. IMAP Server .....................................................7\n
    \  5. Lists of Messages ...............................................7\n   6.
    A Specific Message or Message Part ..............................8\n      6.1.
    URLAUTH Authorized URL .....................................9\n           6.1.1.
    Concepts ............................................9\n                  6.1.1.1.
    URLAUTH ....................................9\n                  6.1.1.2. Mailbox
    Access Key .........................9\n                  6.1.1.3. Authorized Access
    Identifier ...............9\n                  6.1.1.4. Authorization Mechanism
    ...................10\n                  6.1.1.5. Authorization Token .......................10\n
    \          6.1.2. URLAUTH Extensions to IMAP URL .....................10\n   7.
    Relative IMAP URLs .............................................11\n      7.1.
    absolute-path References ..................................12\n      7.2. relative-path
    References ..................................12\n   8. Internationalization Considerations
    ............................13\n   9. Examples .......................................................13\n
    \     9.1. Examples of Relative URLs .................................16\n   10.
    Security Considerations .......................................16\n      10.1.
    Security Considerations Specific to URLAUTH Authorized\n            URL ......................................................17\n
    \  11. ABNF for IMAP URL Scheme ......................................17\n   12.
    IANA Considerations ...........................................21\n      12.1.
    IANA Registration of imap: URI Scheme ....................21\n   13. References
    ....................................................22\n      13.1. Normative
    References .....................................22\n      13.2. Informative References
    ...................................23\n   Appendix A. Sample Code............................................24\n
    \  Appendix B. List of Changes since RFC 2192.........................30\n   Appendix
    C. List of Changes since RFC 4467.........................31\n   Appendix D. Acknowledgments........................................31\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The IMAP URL scheme is used to designate IMAP servers, mailboxes,\n
    \  messages, MIME bodies [MIME], and search programs on Internet hosts\n   accessible
    using the IMAP protocol over TCP.\n   The IMAP URL follows the common Internet
    scheme syntax as defined in\n   [URI-GEN].  If :<port> is omitted, the port defaults
    to 143 (as\n   defined in Section 2.1 of [IMAP4]).\n   An absolute IMAP URL takes
    one of the following forms:\n      imap://<iserver>[/]\n      imap://<iserver>/<enc-mailbox>[<uidvalidity>][?<enc-search>]\n
    \     imap://<iserver>/<enc-mailbox>[<uidvalidity>]<iuid>\n       [<isection>][<ipartial>][<iurlauth>]\n
    \  The first form is used to refer to an IMAP server (see Section 4),\n   the
    second form refers to the contents of a mailbox or a set of\n   messages resulting
    from a search (see Section 5), and the final form\n   refers to a specific message
    or message part, and possibly a byte\n   range in that part (see Section 6).  If
    [URLAUTH] extension is\n   supported, then the final form can have the <iurlauth>
    component (see\n   Section 6.1 for more details).\n   The <iserver> component
    common to all types of absolute IMAP URLs has\n   the following syntax expressed
    in ABNF [ABNF]:\n      [iuserinfo \"@\"] host [ \":\" port ]\n   The <iserver>
    component is the same as \"authority\" defined in\n   [URI-GEN].  The syntax and
    uses of the <iuserinfo> (\"IMAP userinfo\n   component\") are described in detail
    in Section 3.  The syntax of\n   <host> and <port> is described in [URI-GEN].\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in RFC 2119 [KEYWORDS].\n   This document references many productions from [URI-GEN].
    \ When the\n   document needs to emphasize IMAP URI-specific differences from
    [URI-\n   GEN] (i.e., for parts of IMAP URIs that have more restricted syntax\n
    \  than generic URIs), it uses a non-terminal i<foo> to define an IMAP-\n   specific
    version of the non-terminal <foo> from [URI-GEN].\n   Note that the ABNF syntax
    shown in Section 11 is normative.  Sections\n   2-6 may use a less formal syntax
    that does not necessarily match the\n   normative ABNF shown in Section 11.  If
    there are any differences\n   between the syntax shown in Sections 2-6 and Section
    11, then the\n   syntax shown in Section 11 must be treated as authoritative.
    \ Non-\n   syntax requirements included in Sections 2-6 are, of course,\n   normative.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  IMAP userinfo Component (iuserinfo)\n   The <iuserinfo> component conforms
    to the generic syntax of\n   <userinfo> defined in [URI-GEN].  It has the following
    syntax\n   expressed in ABNF [ABNF]:\n      enc-user [iauth] / [enc-user] iauth\n
    \  The meaning of the different parts is described in subsections of\n   this
    section.\n"
  - contents:
    - "3.1.  IMAP Mailbox Naming Scope\n   The \"enc-user\" part of the \"iuserinfo\"
      component, if present, denotes\n   mailbox naming scope.  If it is absent, the
      IMAP URL can only\n   reference mailboxes with globally unique names, i.e.,
      mailboxes with\n   names that don't change depending on the user the client\n
      \  authenticated as to the IMAP server.  Note that not all IMAP\n   implementations
      support globally unique names.\n   For example, a personal mailbox described
      by the following URL\n   <imap://michael@example.org/INBOX> is most likely different
      from a\n   personal mailbox described by <imap://bester@example.org/INBOX>,
      even\n   though both URLs use the same mailbox name.\n"
    title: 3.1.  IMAP Mailbox Naming Scope
  - contents:
    - "3.2.  IMAP User Name and Authentication Mechanism\n   The userinfo component
      (see [URI-GEN]) of an IMAP URI may contain an\n   IMAP user name (a.k.a. authorization
      identity [SASL], \"enc-user\")\n   and/or an authentication mechanism. (Note
      that the \"enc-user\" also\n   defines a mailbox naming scope as described in
      Section 3.1).  The\n   IMAP user name and the authentication mechanism are used
      in the\n   \"LOGIN\" or \"AUTHENTICATE\" commands after making the connection
      to the\n   IMAP server.\n   If no user name and no authentication mechanism
      are supplied, the\n   client MUST authenticate as anonymous to the server.  If
      the server\n   advertises AUTH=ANONYMOUS IMAP capability, the client MUST use
      the\n   AUTHENTICATE command with ANONYMOUS [ANONYMOUS] SASL mechanism.  If\n
      \  SASL ANONYMOUS is not available, the (case-insensitive) user name\n   \"anonymous\"
      is used with the \"LOGIN\" command and the Internet email\n   address of the
      end user accessing the resource is supplied as the\n   password.  The latter
      option is given in order to provide for\n   interoperability with deployed servers.\n
      \  Note that, as described in RFC 3501, the \"LOGIN\" command MUST NOT be\n
      \  used when the IMAP server advertises the LOGINDISABLED capability.\n   An
      authentication mechanism (as used by the IMAP AUTHENTICATE\n   command) can
      be expressed by adding \";AUTH=<enc-auth-type>\" to the\n   end of the user
      name in an IMAP URL.  When such an <enc-auth-type> is\n   indicated, the client
      SHOULD request appropriate credentials from\n   that mechanism and use the \"AUTHENTICATE\"
      command instead of the\n   \"LOGIN\" command.  If no user name is specified,
      one MUST be obtained\n   from the mechanism or requested from the user/configuration
      as\n   appropriate.\n   The string \";AUTH=*\" indicates that the client SHOULD
      select an\n   appropriate authentication mechanism.  (Though the '*' character
      in\n   this usage is not strictly a delimiter, it is being treated like a\n
      \  sub-delim [URI-GEN] in this instance.  It MUST NOT be percent-encoded\n   in
      this usage, as \";AUTH=%2A\" will not match this production.)  It\n   MAY use
      any mechanism listed in the response to the CAPABILITY\n   command (or CAPABILITY
      response code) or use an out-of-band security\n   service resulting in a PREAUTH
      connection.  If no user name is\n   specified and no appropriate authentication
      mechanisms are available,\n   the client SHOULD fall back to anonymous login
      as described above.\n   The behavior prescribed in this section allows a URL
      that grants\n   read-write access to authorized users and read-only anonymous
      access\n   to other users.\n   If a user name is included with no authentication
      mechanism, then\n   \";AUTH=*\" is assumed.\n   Clients must take care when
      resolving a URL that requires or requests\n   any sort of authentication, since
      URLs can easily come from untrusted\n   sources.  Supplying authentication credentials
      to the wrong server\n   may compromise the security of the user's account; therefore,
      the\n   program resolving the URL should meet at least one of the following\n
      \  criteria in this case:\n   1) The URL comes from a trusted source, such as
      a referral server\n      that the client has validated and trusts according
      to site policy.\n      Note that user entry of the URL may or may not count
      as a trusted\n      source, depending on the experience level of the user and
      site\n      policy.\n   2) Explicit local site policy permits the client to
      connect to the\n      server in the URL.  For example, a company example.com
      may have a\n      site policy to trust all IMAP server names ending in example.com,\n
      \     whereas such a policy would be unwise for example.edu where random\n      students
      can set up IMAP servers.\n   3) The user confirms that connecting to that domain
      name with the\n      specified credentials and/or mechanism is permitted.  For
      example,\n      when using \"LOGIN\" or SASL PLAIN with Transport Layer Security\n
      \     (TLS), the IMAP URL client presents a dialog box \"Is it OK to send\n
      \     your password to server \"example.com\"?  Please be aware the owners\n
      \     of example.com will be able to reuse your password to connect to\n      other
      servers on your behalf\".\n   4) A mechanism is used that validates the server
      before passing\n      potentially compromising client credentials.  For example,
      a site\n      has a designated TLS certificate used to certify site-trusted
      IMAP\n      server certificates, and this has been configured explicitly into\n
      \     the IMAP URL client.  Another example is use of a Simple\n      Authentication
      and Security Layer (SASL) mechanism such as\n      DIGEST-MD5 [DIGEST-MD5],
      which supports mutual authentication.\n   5) An authentication mechanism is
      used that will not reveal any\n      information to the server that could be
      used to compromise future\n      connections.  Examples are SASL ANONYMOUS [ANONYMOUS]
      or GSSAPI\n      [GSSAPI].\n   URLs that do not include a user name but include
      an authentication\n   mechanism (\";AUTH=<mech>\") must be treated with extra
      care, since for\n   some <mech>s they are more likely to compromise the user's
      primary\n   account.  A URL containing \";AUTH=*\" must also be treated with
      extra\n   care since it might fall back on a weaker security mechanism.\n   Finally,
      clients are discouraged from using a plaintext password as a\n   fallback with
      \";AUTH=*\" unless the connection has strong encryption.\n   A program interpreting
      IMAP URLs MAY cache open connections to an\n   IMAP server for later reuse.
      \ If a URL contains a user name, only\n   connections authenticated as that
      user may be reused.  If a URL does\n   not contain a user name or authentication
      mechanism, then only an\n   anonymous connection may be reused.\n   Note that
      if unsafe or reserved characters such as \" \" (space) or \";\"\n   are present
      in the user name or authentication mechanism, they MUST\n   be percent-encoded
      as described in [URI-GEN].\n"
    title: 3.2.  IMAP User Name and Authentication Mechanism
  - contents:
    - "3.3.  Limitations of enc-user\n   As per Sections 3.1 and 3.2 of this document,
      the IMAP URI enc-user\n   has two purposes:\n      1) It provides context for
      user-specific mailbox paths such as\n         \"INBOX\" (Section 3.1).\n      2)
      It specifies that resolution of the URL requires logging in as\n         that
      user and limits use of that URL to only that user (Section\n         3.2).\n
      \  An obvious limitation of using the same field for both purposes is\n   that
      the URL can be resolved only by the mailbox owner.  In order to\n   avoid this
      restriction, implementations should use globally unique\n   mailbox names (see
      Section 3.1) whenever possible.\n      Note: There is currently no general way
      in IMAP of learning a\n      globally unique name for a mailbox.  However, by
      looking at the\n      NAMESPACE [NAMESPACE] command result, it is possible to
      determine\n      whether or not a mailbox name is globally unique.\n   The URLAUTH
      component overrides the second purpose of the enc-user in\n   the IMAP URI and
      by default permits the URI to be resolved by any\n   user permitted by the <access>
      identifier.  URLAUTH and <access>\n   identifier are described in Section 6.1.\n"
    title: 3.3.  Limitations of enc-user
  title: 3.  IMAP userinfo Component (iuserinfo)
- contents:
  - "4.  IMAP Server\n   An IMAP URL referring to an IMAP server has the following
    form:\n      imap://<iserver>[/]\n   This URL type is frequently used to describe
    a location of an IMAP\n   server, both in referrals and in configuration.  It
    may optionally\n   contain the <iuserinfo> component (see Sections 3 and 11).
    \ A program\n   interpreting this URL would issue the standard set of commands
    it\n   uses to present a view of the content of the IMAP server, as visible\n
    \  to the user described by the \"enc-user\" part of the <iuserinfo>\n   component,
    if the \"enc-user\" part is specified.\n"
  title: 4.  IMAP Server
- contents:
  - "5.  Lists of Messages\n   An IMAP URL referring to a list of messages has the
    following form:\n      imap://<iserver>/<enc-mailbox>[<uidvalidity>][?<enc-search>]\n
    \  The <enc-mailbox> field is used as the argument to the IMAP4 \"SELECT\"\n   or
    \"EXAMINE\" command.  Note that if unsafe or reserved characters\n   such as \"
    \" (space), \";\", or \"?\" are present in <enc-mailbox>, they\n   MUST be percent-encoded
    as described in [URI-GEN].\n   The <uidvalidity> field is optional.  If it is
    present, it MUST be\n   the same as the value of IMAP4 UIDVALIDITY response code
    at the time\n   the URL was created.  This MUST be used by the program interpreting\n
    \  the IMAP URL to determine if the URL is stale.  If the IMAP URL is\n   stale,
    then the program should behave as if the corresponding mailbox\n   doesn't exist.\n
    \  Note that the <uidvalidity> field is a modifier to the <enc-mailbox>,\n   i.e.,
    it is considered a part of the last \"component\" (as used in\n   [URI-GEN]) of
    the <enc-mailbox>.  This is significant during relative\n   URI resolution.\n
    \  The \"?<enc-search>\" field is optional.  If it is not present, the\n   program
    interpreting the URL will present the entire content of the\n   mailbox.\n   If
    the \"?<enc-search>\" field is present, the program interpreting the\n   URL should
    use the contents of this field as arguments following an\n   IMAP4 SEARCH command.
    \ These arguments are likely to contain unsafe\n   characters such as \" \" (space)
    (which are likely to be present in the\n   <enc-search>).  If unsafe characters
    are present, they MUST be\n   percent-encoded as described in [URI-GEN].\n   Note
    that quoted strings and non-synchronizing literals [LITERAL+]\n   are allowed
    in the <enc-search> content; however, synchronizing\n   literals are not allowed,
    as their presence would effectively mean\n   that the agent interpreting IMAP
    URLs needs to parse an <enc-search>\n   content, find all synchronizing literals,
    and perform proper command\n   continuation request handling (see Sections 4.3
    and 7 of [IMAP4]).\n"
  title: 5.  Lists of Messages
- contents:
  - "6.  A Specific Message or Message Part\n   An IMAP URL referring to a specific
    message or message part has the\n   following form:\n      imap://<iserver>/<enc-mailbox>[<uidvalidity>]<iuid>\n
    \     [<isection>][<ipartial>][<iurlauth>]\n   The <enc-mailbox> and [uidvalidity]
    are as defined in Section 5\n   above.\n   If <uidvalidity> is present in this
    form, it SHOULD be used by the\n   program interpreting the URL to determine if
    the URL is stale.\n   The <iuid> refers to an IMAP4 message Unique Identifier
    (UID), and it\n   SHOULD be used as the <set> argument to the IMAP4 \"UID FETCH\"\n
    \  command.\n   The <isection> field is optional.  If not present, the URL refers
    to\n   the entire Internet message as returned by the IMAP command \"UID\n   FETCH
    <uid> BODY.PEEK[]\".  If present, the URL refers to the object\n   returned by
    a \"UID FETCH <uid> BODY.PEEK[<section>]\" command.  The\n   type of the object
    may be determined by using a \"UID FETCH <uid>\n   BODYSTRUCTURE\" command and
    locating the appropriate part in the\n   resulting BODYSTRUCTURE.  Note that unsafe
    characters in [isection]\n   MUST be percent-encoded as described in [URI-GEN].\n
    \  The <ipartial> field is optional.  If present, it effectively appends\n   \"<<partial-range>>\"
    to the end of the UID FETCH BODY.PEEK[<section>]\n   command constructed as described
    in the previous paragraph.  In other\n   words, it allows the client to request
    a byte range of the\n   message/message part.\n   The <iurlauth> field is described
    in detail in Section 6.1.\n"
  - contents:
    - "6.1.  URLAUTH Authorized URL\n   URLAUTH authorized URLs are only supported
      by an IMAP server\n   advertising the URLAUTH IMAP capability [URLAUTH].\n"
    - contents:
      - '6.1.1.  Concepts

        '
      - contents:
        - "6.1.1.1.  URLAUTH\n   URLAUTH is a component, appended at the end of a
          URL, that conveys\n   authorization to access the data addressed by that
          URL.  It contains\n   an authorized access identifier, an authorization
          mechanism name, and\n   an authorization token.  The authorization token
          is generated from\n   the URL, the authorized access identifier, authorization
          mechanism\n   name, and a mailbox access key.\n      Note: This specification
          only allows for the URLAUTH component in\n      IMAP URLs describing a message
          or its part.\n"
        title: 6.1.1.1.  URLAUTH
      - contents:
        - "6.1.1.2.  Mailbox Access Key\n   The mailbox access key is an unpredictable,
          random string.  To ensure\n   unpredictability, the random string with at
          least 128 bits of entropy\n   is generated by software or hardware (not
          by the human user).\n   Each user has a table of mailboxes and an associated
          mailbox access\n   key for each mailbox.  Consequently, the mailbox access
          key is per-\n   user and per-mailbox.  In other words, two users sharing
          the same\n   mailbox each have a different mailbox access key for that mailbox,\n
          \  and each mailbox accessed by a single user also has a different\n   mailbox
          access key.\n"
        title: 6.1.1.2.  Mailbox Access Key
      - contents:
        - "6.1.1.3.  Authorized Access Identifier\n   The authorized <access> identifier
          restricts use of the URLAUTH\n   authorized URL to certain users authorized
          on the server, as\n   described in Section 6.1.2.\n"
        title: 6.1.1.3.  Authorized Access Identifier
      - contents:
        - "6.1.1.4.  Authorization Mechanism\n   The authorization mechanism is the
          algorithm by which the URLAUTH is\n   generated and subsequently verified,
          using the mailbox access key.\n"
        title: 6.1.1.4.  Authorization Mechanism
      - contents:
        - "6.1.1.5.  Authorization Token\n   The authorization token is a deterministic
          string of at least 128\n   bits that an entity with knowledge of the secret
          mailbox access key\n   and URL authorization mechanism can use to verify
          the URL.\n"
        title: 6.1.1.5.  Authorization Token
      title: 6.1.1.  Concepts
    - contents:
      - "6.1.2.  URLAUTH Extensions to IMAP URL\n   A specific message or message
        part IMAP URL can optionally contain\n   \";EXPIRE=<datetime>\" and/or \";URLAUTH=<access>:<mech>:<token>\".\n
        \  When \";EXPIRE=<datetime>\" is used, this indicates the latest date and\n
        \  time that the URL is valid.  After that date and time, the URL has\n   expired
        and server implementations MUST reject the URL.  If\n   \";EXPIRE=<datetime>\"
        is not used, the URL has no expiration, but can\n   still be revoked using
        the RESETKEY command [URLAUTH].\n   The URLAUTH takes the form \";URLAUTH=<access>:<mech>:<token>\",
        and it\n   MUST be at the end of the URL.  It is composed of three parts.
        \ The\n   <access> portion provides the authorized access identifiers that
        may\n   constrain the operations and users that are permitted to use this\n
        \  URL.  The <mech> portion provides the authorization mechanism used by\n
        \  the IMAP server to generate the authorization token that follows.\n   The
        <token> portion provides the authorization token, which can be\n   generated
        using the GENURLAUTH command [URLAUTH].\n   The \"submit+\" <access> identifier
        prefix, followed by a userid,\n   indicates that only a userid authorized
        as a message submission\n   entity on behalf of the specified userid is permitted
        to use this\n   URL.  The IMAP server does not validate the specified userid
        but does\n   validate that the IMAP session has an authorization identity
        that is\n   authorized as a message submission entity.  The authorized message\n
        \  submission entity MUST validate the userid prior to contacting the\n   IMAP
        server.\n   The \"user+\" <access> identifier prefix, followed by a userid,\n
        \  indicates that use of this URL is limited to IMAP sessions that are\n   logged
        in as the specified userid (that is, have authorization\n   identity as that
        userid).\n      Note: If a SASL mechanism that provides both authorization
        and\n      authentication identifiers is used to authenticate to the IMAP\n
        \     server, the \"user+\" <access> identifier MUST match the\n      authorization
        identifier.  If the SASL mechanism can't transport\n      the authorization
        identifier, the \"user+\" <access> identifier MUST\n      match the authorization
        identifier derived from the authentication\n      identifier (see [SASL]).\n
        \  The \"authuser\" <access> identifier indicates that use of this URL is\n
        \  limited to authenticated IMAP sessions that are logged in as any\n   non-anonymous
        user (that is, have authorization identity as a non-\n   anonymous user) of
        that IMAP server.  To restate this: use of this\n   type of URL is prohibited
        to anonymous IMAP sessions, i.e., any\n   URLFETCH command containing this
        type of URL issued in an anonymous\n   session MUST return NIL in the URLFETCH
        response.\n   The \"anonymous\" <access> identifier indicates that use of
        this URL is\n   not restricted by session authorization identity; that is,
        any IMAP\n   session in authenticated or selected state (as defined in [IMAP4]),\n
        \  including anonymous sessions, may issue a URLFETCH [URLAUTH] using\n   this
        URL.\n   The authorization token is represented as an ASCII-encoded\n   hexadecimal
        string, which is used to authorize the URL.  The length\n   and the calculation
        of the authorization token depend upon the\n   mechanism used, but in all
        cases, the authorization token is at least\n   128 bits (and therefore at
        least 32 hexadecimal digits).\n   Example:\n      <imap://joe@example.com/INBOX/;uid=20/;section=1.2;urlauth=\n
        \     submit+fred:internal:91354a473744909de610943775f92038>\n"
      title: 6.1.2.  URLAUTH Extensions to IMAP URL
    title: 6.1.  URLAUTH Authorized URL
  title: 6.  A Specific Message or Message Part
- contents:
  - "7.  Relative IMAP URLs\n   Relative IMAP URLs are permitted and are resolved
    according to the\n   rules defined in [URI-GEN].  In particular, in IMAP URLs
    parameters\n   (such as \";uid=\" or \";section=\") are treated as part of the
    normal\n   path with respect to relative URL resolution.\n   [URI-GEN] defines
    four forms of relative URLs: <inetwork-path>,\n   <iabsolute-path>, <irelative-path>,
    and <ipath-empty>.  Their syntax\n   is defined in Section 11.\n   A relative
    reference that begins with two slash characters is termed\n   a network-path reference
    (<inetwork-path>); such references are\n   rarely used, because in most cases
    they can be replaced with an\n   equivalent absolute URL.  A relative reference
    that begins with a\n   single slash character is termed an absolute-path reference\n
    \  (<iabsolute-path>; see also Section 7.1).  A relative reference that\n   does
    not begin with a slash character is termed a relative-path\n   reference (<irelative-path>;
    see also Section 7.2).  The final form\n   is <ipath-empty>, which is \"same-document
    reference\" (see Section 4.4\n   of [URI-GEN]).\n   The following observations
    about relative URLs are important:\n   The <iauth> grammar element (which is a
    part of <iuserinfo>, which\n   is, in turn, a part of <iserver>; see Section 3)
    is considered part\n   of the user name for purposes of resolving relative IMAP
    URLs.  This\n   means that unless a new user name/server specification is included
    in\n   the relative URL, the authentication mechanism is inherited from the\n
    \  base IMAP URL.\n   URLs always use \"/\" as the hierarchy delimiter for the
    purpose of\n   resolving paths in relative URLs.  IMAP4 permits the use of any\n
    \  hierarchy delimiter in mailbox names.  For this reason, relative\n   mailbox
    paths will only work if the mailbox uses \"/\" as the hierarchy\n   delimiter.
    \ Relative URLs may be used on mailboxes that use other\n   delimiters, but in
    that case, the entire mailbox name MUST be\n   specified in the relative URL or
    inherited as a whole from the base\n   URL.\n   If an IMAP server allows for mailbox
    names starting with \"./\" or\n   \"../\", ending with \"/.\" or \"/..\", or containing
    sequences \"/../\" or\n   \"/./\", then such mailbox names MUST be percent-encoded
    as described\n   in [URI-GEN].  Otherwise, they would be misinterpreted as dot-\n
    \  segments (see Section 3.3 of [URI-GEN]), which are processed\n   specially
    during the relative path resolution process.\n"
  - contents:
    - "7.1.  absolute-path References\n   A relative reference that begins with a
      single slash character is\n   termed an absolute-path reference (see Section
      4.2 of [URI-GEN]).  If\n   an IMAP server permits mailbox names with a leading
      \"/\", then the\n   leading \"/\" MUST be percent-encoded as described in [URI-GEN].\n
      \  Otherwise, the produced absolute-path reference URI will be\n   misinterpreted
      as a network-path reference [URI-GEN] described by the\n   <inetwork-path> non-terminal.\n"
    title: 7.1.  absolute-path References
  - contents:
    - "7.2.  relative-path References\n   A relative reference that does not begin
      with a slash character is\n   termed a relative-path reference [URI-GEN].  Implementations
      MUST NOT\n   generate or accept relative-path IMAP references.\n   See also
      Section 4.2 of [URI-GEN] for restrictions on relative-path\n   references.\n"
    title: 7.2.  relative-path References
  title: 7.  Relative IMAP URLs
- contents:
  - "8.  Internationalization Considerations\n   IMAP4, Section 5.1.3 [IMAP4] includes
    a convention for encoding non-\n   US-ASCII characters in IMAP mailbox names.
    \ Because this convention\n   is private to IMAP, it is necessary to convert IMAP's
    encoding to one\n   that can be more easily interpreted by a URL display program.
    \ For\n   this reason, IMAP's modified UTF-7 encoding for mailboxes MUST be\n
    \  converted to UTF-8 [UTF-8].  Since 8-bit octets are not permitted in\n   URLs,
    the UTF-8 octets are percent-encoded as required by the URL\n   specification
    [URI-GEN], Section 2.1.  Sample code is included in\n   Appendix A to demonstrate
    this conversion.\n   IMAP user names are UTF-8 strings and MUST be percent-encoded
    as\n   required by the URL specification [URI-GEN], Section 2.1.\n   Also note
    that IMAP SEARCH criteria can contain non-US-ASCII\n   characters.  8-bit octets
    in those strings MUST be percent-encoded as\n   required by the URL specification
    [URI-GEN], Section 2.1.\n"
  title: 8.  Internationalization Considerations
- contents:
  - "9.  Examples\n   The following examples demonstrate how an IMAP4 client program
    might\n   translate various IMAP4 URLs into a series of IMAP4 commands.\n   Commands
    sent from the client to the server are prefixed with \"C:\",\n   and responses
    sent from the server to the client are prefixed with\n   \"S:\".\n   The URL:\n
    \     <imap://minbari.example.org/gray-council;UIDVALIDITY=385759045/;\n      UID=20/;PARTIAL=0.1024>\n
    \  may result in the following client commands and server responses:\n      <connect
    to minbari.example.org, port 143>\n      S: * OK [CAPABILITY IMAP4rev1 STARTTLS
    AUTH=ANONYMOUS] Welcome\n      C: A001 AUTHENTICATE ANONYMOUS\n      S: +\n      C:
    c2hlcmlkYW5AYmFieWxvbjUuZXhhbXBsZS5vcmc=\n      S: A001 OK Welcome sheridan@babylon5.example.org\n
    \     C: A002 SELECT gray-council\n      <client verifies the UIDVALIDITY matches>\n
    \     C: A003 UID FETCH 20 BODY.PEEK[]<0.1024>\n   The URL:\n      <imap://psicorp.example.org/~peter/%E6%97%A5%E6%9C%AC%E8%AA%9E/\n
    \     %E5%8F%B0%E5%8C%97>\n   may result in the following client commands:\n      <connect
    to psicorp.example.org, port 143>\n      S: * OK [CAPABILITY IMAP4rev1 STARTTLS
    AUTH=CRAM-MD5] Welcome\n      C: A001 LOGIN ANONYMOUS bester@psycop.psicorp.example.org\n
    \     C: A002 SELECT ~peter/&ZeVnLIqe-/&U,BTFw-\n      <commands the client uses
    for viewing the contents of\n       the mailbox>\n   The URL:\n      <imap://;AUTH=GSSAPI@minbari.example.org/gray-council/;uid=20/\n
    \     ;section=1.2>\n   may result in the following client commands:\n      <connect
    to minbari.example.org, port 143>\n      S: * OK Greetings\n      C: A000 CAPABILITY\n
    \     S: * CAPABILITY IMAP4rev1 STARTTLS AUTH=GSSAPI\n      S: A000 OK\n      C:
    A001 AUTHENTICATE GSSAPI\n      <authentication exchange>\n      C: A002 SELECT
    gray-council\n      C: A003 UID FETCH 20 BODY.PEEK[1.2]\n   If the following relative
    URL is located in that body part:\n      <;section=1.4>\n   this could result
    in the following client commands:\n      C: A004 UID FETCH 20 (BODY.PEEK[1.2.MIME]\n
    \           BODY.PEEK[1.MIME]\n            BODY.PEEK[HEADER.FIELDS (Content-Location)])\n
    \     <Client looks for Content-Location headers in\n       result.  If no such
    headers, then it does the following>\n      C: A005 UID FETCH 20 BODY.PEEK[1.4]\n
    \  The URL:\n      <imap://;AUTH=*@minbari.example.org/gray%20council?\n      SUBJECT%20shadows>\n
    \  could result in the following:\n      <connect to minbari.example.org, port
    143>\n      S: * OK Welcome\n      C: A001 CAPABILITY\n      S: * CAPABILITY IMAP4rev1
    AUTH=DIGEST-MD5\n      S: A001 OK\n      C: A002 AUTHENTICATE DIGEST-MD5\n      <authentication
    exchange>\n      S: A002 OK user lennier authenticated\n      C: A003 SELECT \"gray
    council\"\n      ...\n      C: A004 SEARCH SUBJECT shadows\n      S: * SEARCH
    8 10 13 14 15 16\n      S: A004 OK SEARCH completed\n      C: A005 FETCH 8,10,13:16
    ALL\n      ...\n   In the example above, the client has implementation-dependent\n
    \  choices.  The authentication mechanism could be anything, including\n   PREAUTH.
    \ The final FETCH command could fetch more or less\n   information about the messages,
    depending on what it wishes to\n   display to the user.\n   The URL:\n      <imap://john;AUTH=*@minbari.example.org/babylon5/personel?\n
    \     charset%20UTF-8%20SUBJECT%20%7B14+%7D%0D%0A%D0%98%D0%B2%\n      D0%B0%D0%BD%D0%BE%D0%B2%D0%B0>\n
    \  shows that 8-bit data can be sent using non-synchronizing literals\n   [LITERAL+].
    \ This could result in the following:\n      <connect to minbari.example.org,
    port 143>\n      S: * OK Hi there\n      C: A001 CAPABILITY\n      S: * CAPABILITY
    IMAP4rev1 LITERAL+ AUTH=DIGEST-MD5\n      S: A001 OK\n      C: A002 AUTHENTICATE
    DIGEST-MD5\n      <authentication exchange>\n      S: A002 OK user john authenticated\n
    \     C: A003 SELECT babylon5/personel\n      ...\n      C: A004 SEARCH CHARSET
    UTF-8 SUBJECT {14+}\n      C: XXXXXXXXXXXXXX\n      S: * SEARCH 7 10 12\n      S:
    A004 OK SEARCH completed\n      C: A005 FETCH 7,10,12 ALL\n      ...\n   where
    XXXXXXXXXXXXXX is 14 bytes of UTF-8 encoded data as specified\n   in the URL above.\n"
  - contents:
    - "9.1.  Examples of Relative URLs\n   The following absolute-path reference\n
      \     </foo/;UID=20/..>\n   is the same as\n      </foo>\n   That is, both of
      them reference the mailbox \"foo\" located on the IMAP\n   server described
      by the corresponding Base URI.\n   The following relative-path reference\n      <;UID=20>\n
      \  references a message with UID in the mailbox specified by the Base\n   URI.\n
      \  The following edge case example demonstrates that the ;UIDVALIDITY=\n   modifier
      is a part of the mailbox name as far as relative URI\n   resolution is concerned:\n
      \     <..;UIDVALIDITY=385759045/;UID=20>\n   In this example, \"..\" is not
      a dot-segment [URI-GEN].\n"
    title: 9.1.  Examples of Relative URLs
  title: 9.  Examples
- contents:
  - "10.  Security Considerations\n   Security considerations discussed in the IMAP
    specification [IMAP4]\n   and the URI specification [URI-GEN] are relevant.  Security\n
    \  considerations related to authenticated URLs are discussed in Section\n   3.2
    of this document.\n   Many email clients store the plaintext password for later
    use after\n   logging into an IMAP server.  Such clients MUST NOT use a stored\n
    \  password in response to an IMAP URL without explicit permission from\n   the
    user to supply that password to the specified host name.\n   Clients resolving
    IMAP URLs that wish to achieve data confidentiality\n   and/or integrity SHOULD
    use the STARTTLS command (if supported by the\n   server) before starting authentication,
    or use a SASL mechanism, such\n   as GSSAPI, that provides a confidentiality security
    layer.\n"
  - contents:
    - "10.1.  Security Consideration Specific to URLAUTH Authorized URL\n   The \"user+<userid>\"
      <access> identifier limits resolution of that URL\n   to a particular userid,
      whereas the \"submit+<userid>\" <access>\n   identifier is more general and
      simply requires that the session be\n   authorized by a user that has been granted
      a \"submit\" role within the\n   authentication system.  Use of either of these
      mechanisms limits the\n   scope of the URL.  An attacker who cannot authenticate
      using the\n   appropriate credentials cannot make use of the URL.\n   The \"authuser\"
      and \"anonymous\" <access> identifiers do not have this\n   level of protection.
      \ These access identifiers are primarily useful\n   for public export of data
      from an IMAP server, without requiring that\n   it be copied to a web or anonymous
      FTP server.\n   The decision to use the \"authuser\" <access> identifier should
      be made\n   with caution.  An \"authuser\" <access> identifier can be used by
      any\n   authorized user of the IMAP server; therefore, use of this access\n
      \  identifier should be limited to content that may be disclosed to any\n   authorized
      user of the IMAP server.\n   The decision to use the \"anonymous\" <access>
      identifier should be\n   made with extreme caution.  An \"anonymous\" <access>
      identifier can be\n   used by anyone; therefore, use of this access identifier
      should be\n   limited to content that may be disclosed to anyone.\n"
    title: 10.1.  Security Consideration Specific to URLAUTH Authorized URL
  title: 10.  Security Considerations
- contents:
  - "11.  ABNF for IMAP URL Scheme\n   Formal syntax is defined using ABNF [ABNF],
    extending the ABNF rules\n   in Section 9 of [IMAP4].  Elements not defined here
    can be found in\n   [ABNF], [IMAP4], [IMAPABNF], or [URI-GEN].  Strings are not
    case\n   sensitive, and free insertion of linear white space is not permitted.\n
    \  sub-delims-sh = \"!\" / \"$\" / \"'\" / \"(\" / \")\" /\n                   \"*\"
    / \"+\" / \",\"\n                      ;; Same as [URI-GEN] sub-delims,\n                      ;;
    but without \";\", \"&\" and \"=\".\n   uchar            = unreserved / sub-delims-sh
    / pct-encoded\n   achar            = uchar / \"&\" / \"=\"\n                      ;;
    Same as [URI-GEN] 'unreserved / sub-delims /\n                      ;; pct-encoded',
    but \";\" is disallowed.\n   bchar            = achar / \":\" / \"@\" / \"/\"\n
    \  enc-auth-type    = 1*achar\n                   ; %-encoded version of [IMAP4]
    \"auth-type\"\n   enc-mailbox      = 1*bchar\n                  ; %-encoded version
    of [IMAP4] \"mailbox\"\n   enc-search       = 1*bchar\n                           ;
    %-encoded version of [IMAPABNF]\n                           ; \"search-program\".
    \ Note that IMAP4\n                           ; literals may not be used in\n
    \                          ; a \"search-program\", i.e., only\n                           ;
    quoted or non-synchronizing\n                           ; literals (if the server
    supports\n                           ; LITERAL+ [LITERAL+]) are allowed.\n   enc-section
    \     = 1*bchar\n                  ; %-encoded version of [IMAP4] \"section-spec\"\n
    \  enc-user         = 1*achar\n                  ; %-encoded version of [IMAP4]
    authorization\n                  ; identity or \"userid\".\n   imapurl          =
    \"imap://\" iserver ipath-query\n               ; Defines an absolute IMAP URL\n
    \  ipath-query      = [\"/\" [ icommand ]]\n                    ; Corresponds
    to \"path-abempty [ \"?\" query ]\"\n                    ; in [URI-GEN]\n   Generic
    syntax for relative URLs is defined in Section 4.2 of\n   [URI-GEN].  For ease
    of implementation, the relative IMAP URL syntax\n   is defined below:\n   imapurl-rel
    \    = inetwork-path\n                     / iabsolute-path\n                     /
    irelative-path\n                     / ipath-empty\n   inetwork-path   = \"//\"
    iserver ipath-query\n               ; Corresponds to '\"//\" authority path-abempty\n
    \              ; [ \"?\" query ]' in [URI-GEN]\n   iabsolute-path  = \"/\" [ icommand
    ]\n               ; icommand, if present, MUST NOT start with '/'.\n               ;\n
    \              ; Corresponds to 'path-absolute [ \"?\" query ]'\n               ;
    in [URI-GEN]\n   irelative-path  = imessagelist /\n                     imsg-or-part\n
    \              ; Corresponds to 'path-noscheme [ \"?\" query ]'\n               ;
    in [URI-GEN]\n   imsg-or-part    = ( imailbox-ref \"/\" iuid-only [\"/\" isection-only]\n
    \                      [\"/\" ipartial-only] ) /\n                     ( iuid-only
    [\"/\" isection-only]\n                       [\"/\" ipartial-only] ) /\n                     (
    isection-only [\"/\" ipartial-only] ) /\n                     ipartial-only\n
    \  ipath-empty     = 0<pchar>\n                    ; Zero characters.\n                    ;
    The same-document reference.\n   The following three rules are only used in the
    presence of the IMAP\n   [URLAUTH] extension:\n   authimapurl     = \"imap://\"
    iserver \"/\" imessagepart\n                     ; Same as \"imapurl\" when \"[icommand]\"
    is\n                     ; \"imessagepart\"\n   authimapurlfull = authimapurl
    iurlauth\n                     ; Same as \"imapurl\" when \"[icommand]\" is\n
    \                    ; \"imessagepart iurlauth\"\n   authimapurlrump = authimapurl
    iurlauth-rump\n   enc-urlauth     = 32*HEXDIG\n   iurlauth        = iurlauth-rump
    iua-verifier\n   iua-verifier    = \":\" uauth-mechanism \":\" enc-urlauth\n   iurlauth-rump
    \  = [expire] \";URLAUTH=\" access\n   access          = (\"submit+\" enc-user)
    / (\"user+\" enc-user) /\n                       \"authuser\" / \"anonymous\"\n
    \  expire          = \";EXPIRE=\" date-time\n                         ; date-time
    is defined in [DATETIME]\n   uauth-mechanism = \"INTERNAL\" / 1*(ALPHA / DIGIT
    / \"-\" / \".\")\n                        ; Case-insensitive.\n                        ;
    New mechanisms MUST be registered with IANA.\n   iauth            = \";AUTH=\"
    ( \"*\" / enc-auth-type )\n   icommand         = imessagelist /\n                      imessagepart
    [iurlauth]\n   imailbox-ref     = enc-mailbox [uidvalidity]\n   imessagelist     =
    imailbox-ref [ \"?\" enc-search ]\n                  ; \"enc-search\" is [URI-GEN]
    \"query\".\n   imessagepart     = imailbox-ref iuid [isection] [ipartial]\n   ipartial
    \        = \"/\" ipartial-only\n   ipartial-only    = \";PARTIAL=\" partial-range\n
    \  isection         = \"/\" isection-only\n   isection-only    = \";SECTION=\"
    enc-section\n   iserver          = [iuserinfo \"@\"] host [ \":\" port ]\n                           ;
    This is the same as \"authority\" defined\n                           ; in [URI-GEN].
    \ See [URI-GEN] for \"host\"\n                           ; and \"port\" definitions.\n
    \  iuid             = \"/\" iuid-only\n   iuid-only        = \";UID=\" nz-number\n
    \                 ; See [IMAP4] for \"nz-number\" definition\n   iuserinfo        =
    enc-user [iauth] / [enc-user] iauth\n                                ; conforms
    to the generic syntax of\n                                ; \"userinfo\" as defined
    in [URI-GEN].\n   partial-range    = number [\".\" nz-number]\n                  ;
    partial FETCH.  The first number is\n                           ; the offset of
    the first byte,\n                           ; the second number is the length
    of\n                           ; the fragment.\n   uidvalidity      = \";UIDVALIDITY=\"
    nz-number\n                       ; See [IMAP4] for \"nz-number\" definition\n"
  title: 11.  ABNF for IMAP URL Scheme
- contents:
  - "12.  IANA Considerations\n   IANA has updated the \"imap\" definition in the
    \"Uniform Resource\n   Identifier scheme registry\" to point to this document.\n
    \  The registration template (as per [URI-REG]) is specified in Section\n   12.1
    of this document.\n"
  - contents:
    - "12.1.  IANA Registration of imap: URI Scheme\n   This section provides the
      information required to register the imap:\n   URI scheme.\n   URI scheme name:
      imap\n   Status: permanent\n   URI scheme syntax:\n      See Section 11 of [RFC5092].\n
      \  URI scheme semantics:\n      The imap: URI scheme is used to designate IMAP
      servers, mailboxes,\n      messages, MIME bodies [MIME] and their parts, and
      search programs\n      on Internet hosts accessible using the IMAP protocol.\n
      \     There is no MIME type associated with this URI.\n   Encoding considerations:\n
      \     See Section 8 of [RFC5092].\n   Applications/protocols that use this URI
      scheme name:\n      The imap: URI is intended to be used by applications that
      might\n      need access to an IMAP mailstore.  Such applications may include\n
      \     (but are not limited to) IMAP-capable web browsers; IMAP clients\n      that
      wish to access a mailbox, message, or edit a message on the\n      server using
      [CATENATE]; [SUBMIT] clients and servers that are\n      requested to assemble
      a complete message on submission using\n      [BURL].\n   Interoperability considerations:\n
      \     A widely deployed IMAP client Netscape Mail (and possibly\n      Mozilla/Thunderbird/Seamonkey)
      uses a different imap: scheme\n      internally.\n   Security considerations:\n
      \     See Security Considerations (Section 10) of [RFC5092].\n   Contact:\n
      \     Alexey Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:\n
      \     IESG\n   References:\n      [RFC5092] and [IMAP4].\n"
    title: '12.1.  IANA Registration of imap: URI Scheme'
  title: 12.  IANA Considerations
- contents:
  - '13. References

    '
  - contents:
    - "13.1.  Normative References\n   [KEYWORDS]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [IMAP4]      Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL
      - VERSION\n                4rev1\", RFC 3501, March 2003.\n   [IMAPABNF]   Melnikov,
      A. and C. Daboo, \"Collected Extensions to\n                IMAP4 ABNF\", RFC
      4466, April 2006.\n   [ABNF]       Crocker, D., Ed., and P. Overell, \"Augmented
      BNF for\n                Syntax Specifications: ABNF\", RFC 4234, October 2005.\n
      \  [MIME]       Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n
      \               Extensions (MIME) Part One: Format of Internet Message\n                Bodies\",
      RFC 2045, November 1996.\n   [URI-GEN]    Berners-Lee, T., Fielding, R., and
      L. Masinter, \"Uniform\n                Resource Identifier (URI): Generic Syntax\",
      STD 66, RFC\n                3986, January 2005.\n   [UTF-8]      Yergeau, F.,
      \"UTF-8, a transformation format of ISO\n                10646\", STD 63, RFC
      3629, November 2003.\n   [NAMESPACE]  Gahrns, M. and C. Newman, \"IMAP4 Namespace\",
      RFC 2342,\n                May 1998.\n   [LITERAL+]   Myers, J., \"IMAP4 non-synchronizing
      literals\", RFC 2088,\n                January 1997.\n   [ANONYMOUS]  Zeilenga,
      K., \"Anonymous Simple Authentication and\n                Security Layer (SASL)
      Mechanism\", RFC 4505, June 2006.\n   [DATETIME]   Klyne, G. and C. Newman,
      \"Date and Time on the Internet:\n                Timestamps\", RFC 3339, July
      2002.\n   [URLAUTH]    Crispin, M., \"Internet Message Access Protocol (IMAP)
      -\n                URLAUTH Extension\", RFC 4467, May 2006.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [SUBMIT]     Gellens, R. and J. Klensin,
      \"Message Submission for\n                Mail\", RFC 4409, April 2006.\n   [BURL]
      \      Newman, C., \"Message Submission BURL Extension\", RFC\n                4468,
      May 2006.\n   [CATENATE]   Resnick, P., \"Internet Message Access Protocol (IMAP)\n
      \               CATENATE Extension\", RFC 4469, April 2006.\n   [SASL]       Melnikov,
      A., Ed., and K. Zeilenga, Ed., \"Simple\n                Authentication and
      Security Layer (SASL)\", RFC 4422,\n                June 2006.\n   [GSSAPI]
      \    Melnikov, A., Ed., \"The Kerberos V5 (\"GSSAPI\") Simple\n                Authentication
      and Security Layer (SASL) Mechanism\", RFC\n                4752, November 2006.\n
      \  [DIGEST-MD5] Leach, P. and C. Newman, \"Using Digest Authentication as\n
      \               a SASL Mechanism\", RFC 2831, May 2000.\n   [URI-REG]    Hansen,
      T., Hardie, T., and L. Masinter, \"Guidelines and\n                Registration
      Procedures for New URI Schemes\", BCP 115,\n                RFC 4395, February
      2006.\n"
    title: 13.2.  Informative References
  title: 13. References
- contents:
  - "Appendix A.  Sample Code\n   Here is sample C source code to convert between
    URL paths and IMAP\n   mailbox names, taking into account mapping between IMAP's
    modified\n   UTF-7 [IMAP4] and hex-encoded UTF-8, which is more appropriate for\n
    \  URLs.  This code has not been rigorously tested nor does it\n   necessarily
    behave reasonably with invalid input, but it should serve\n   as a useful example.
    \ This code just converts the mailbox portion of\n   the URL and does not deal
    with parameters, query, or server\n   components of the URL.\n"
  - "/* Copyright (C) The IETF Trust (2007).  This version of\n   sample C code is
    part of RFC XXXX; see the RFC itself\n   for full legal notices.\n   Regarding
    this sample C code (or any portion of it), the authors\n   make no guarantees
    and are not responsible for any damage\n   resulting from its use.  The authors
    grant irrevocable permission\n   to anyone to use, modify, and distribute it in
    any way that does\n   not diminish the rights of anyone else to use, modify, and\n
    \  distribute it, provided that redistributed derivative works do\n   not contain
    misleading author or version information.\n   Derivative works need not be licensed
    under similar terms.\n */\n"
  - '#include <stdio.h>

    '
  - '#include <string.h>

    '
  - '/* hexadecimal lookup table */

    '
  - 'static const char hex[] = "0123456789ABCDEF";

    '
  - '#define XX 127

    '
  - "/*\n * Table for decoding hexadecimal in %encoding\n */\n"
  - "static const char index_hex[256] = {\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,
    XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX,
    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n     0, 1, 2, 3,  4, 5, 6, 7,  8, 9,XX,XX,
    XX,XX,XX,XX,\n    XX,10,11,12, 13,14,15,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX,
    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,10,11,12, 13,14,15,XX, XX,XX,XX,XX,
    XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX,
    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,
    XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX,
    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,
    XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX,
    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,\n    XX,XX,XX,XX, XX,XX,XX,XX, XX,XX,XX,XX,
    XX,XX,XX,XX,\n"
  - '};

    '
  - '#define HEXCHAR(c)  (index_hex[(unsigned char)(c)])

    '
  - '/* "gen-delims" excluding "/" but including "%" */

    '
  - '#define GENERAL_DELIMS_NO_SLASH     ":?#[]@" "%"

    '
  - "/* \"gen-delims\" (excluding \"/\", but including \"%\")\n   plus subset of \"sub-delims\"
    */\n"
  - '#define GENERAL_UNSAFE_NO_SLASH     GENERAL_DELIMS_NO_SLASH ";&=+"

    '
  - '#define OTHER_UNSAFE                " \"<>\\^`{|}"

    '
  - '/* URL unsafe printable characters */

    '
  - "static const char mailbox_url_unsafe[] = GENERAL_UNSAFE_NO_SLASH\n                                         OTHER_UNSAFE;\n"
  - '/* UTF7 modified base64 alphabet */

    '
  - "static const char base64chars[] =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\";\n"
  - '#define UNDEFINED 64

    '
  - '/* UTF16 definitions */

    '
  - '#define UTF16MASK   0x03FFUL

    '
  - '#define UTF16SHIFT  10

    '
  - '#define UTF16BASE   0x10000UL

    '
  - '#define UTF16HIGHSTART   0xD800UL

    '
  - '#define UTF16HIGHEND     0xDBFFUL

    '
  - '#define UTF16LOSTART     0xDC00UL

    '
  - '#define UTF16LOEND  0xDFFFUL

    '
  - "/* Convert an IMAP mailbox to a URL path\n *  dst needs to have roughly 4 times
    the storage space of src\n *    Hex encoding can triple the size of the input\n
    *    UTF-7 can be slightly denser than UTF-8\n *     (worst case: 8 octets UTF-7
    becomes 9 octets UTF-8)\n */\n"
  - 'void MailboxToURL(char *dst, char *src)

    '
  - "{\n    unsigned char c, i, bitcount;\n    unsigned long ucs4, utf16, bitbuf;\n
    \   unsigned char base64[256], utf8[6];\n    /* initialize modified base64 decoding
    table */\n    memset(base64, UNDEFINED, sizeof (base64));\n    for (i = 0; i <
    sizeof (base64chars); ++i) {\n     base64[(int) base64chars[i]] = i;\n    }\n
    \   /* loop until end of string */\n    while (*src != '\\0') {\n     c = *src++;\n
    \    /* deal with literal characters and &- */\n     if (c != '&' || *src == '-')
    {\n         /* NB: There are no \"URL safe\" characters after the '~' */\n         if
    (c < ' ' || c > '~' ||\n             strchr(mailbox_url_unsafe, c) != NULL) {\n
    \         /* hex encode if necessary */\n          dst[0] = '%';\n          dst[1]
    = hex[c >> 4];\n          dst[2] = hex[c & 0x0f];\n          dst += 3;\n         }
    else {\n          /* encode literally */\n          *dst++ = c;\n         }\n
    \        /* skip over the '-' if this is an &- sequence */\n         if (c ==
    '&') ++src;\n     } else {\n        /* convert modified UTF-7 -> UTF-16 -> UCS-4
    -> UTF-8 -> HEX */\n         bitbuf = 0;\n         bitcount = 0;\n         ucs4
    = 0;\n         while ((c = base64[(unsigned char) *src]) != UNDEFINED) {\n          ++src;\n
    \         bitbuf = (bitbuf << 6) | c;\n          bitcount += 6;\n          /*
    enough bits for a UTF-16 character? */\n          if (bitcount >= 16) {\n              bitcount
    -= 16;\n              utf16 = (bitcount ? bitbuf >> bitcount\n                             :
    bitbuf) & 0xffff;\n              /* convert UTF16 to UCS4 */\n              if\n
    \                   (utf16 >= UTF16HIGHSTART && utf16 <= UTF16HIGHEND) {\n               ucs4
    = (utf16 - UTF16HIGHSTART) << UTF16SHIFT;\n               continue;\n              }
    else if\n                    (utf16 >= UTF16LOSTART && utf16 <= UTF16LOEND) {\n
    \              ucs4 += utf16 - UTF16LOSTART + UTF16BASE;\n              } else
    {\n               ucs4 = utf16;\n              }\n              /* convert UTF-16
    range of UCS4 to UTF-8 */\n              if (ucs4 <= 0x7fUL) {\n               utf8[0]
    = (unsigned char) ucs4;\n               i = 1;\n              } else if (ucs4
    <= 0x7ffUL) {\n               utf8[0] = 0xc0 | (unsigned char) (ucs4 >> 6);\n
    \              utf8[1] = 0x80 | (unsigned char) (ucs4 & 0x3f);\n               i
    = 2;\n              } else if (ucs4 <= 0xffffUL) {\n               utf8[0] = 0xe0
    | (unsigned char) (ucs4 >> 12);\n               utf8[1] = 0x80 | (unsigned char)
    ((ucs4 >> 6) & 0x3f);\n               utf8[2] = 0x80 | (unsigned char) (ucs4 &
    0x3f);\n               i = 3;\n              } else {\n               utf8[0]
    = 0xf0 | (unsigned char) (ucs4 >> 18);\n               utf8[1] = 0x80 | (unsigned
    char) ((ucs4 >> 12) & 0x3f);\n               utf8[2] = 0x80 | (unsigned char)
    ((ucs4 >> 6) & 0x3f);\n               utf8[3] = 0x80 | (unsigned char) (ucs4 &
    0x3f);\n               i = 4;\n              }\n              /* convert utf8
    to hex */\n              for (c = 0; c < i; ++c) {\n               dst[0] = '%';\n
    \              dst[1] = hex[utf8[c] >> 4];\n               dst[2] = hex[utf8[c]
    & 0x0f];\n               dst += 3;\n              }\n          }\n         }\n
    \        /* skip over trailing '-' in modified UTF-7 encoding */\n         if
    (*src == '-') ++src;\n     }\n    }\n    /* terminate destination string */\n
    \   *dst = '\\0';\n"
  - '}

    '
  - "/* Convert hex coded UTF-8 URL path to modified UTF-7 IMAP mailbox\n *  dst should
    be about twice the length of src to deal with non-hex\n *  coded URLs\n */\n"
  - 'int URLtoMailbox(char *dst, char *src)

    '
  - "{\n    unsigned int utf8pos = 0;\n    unsigned int utf8total, i, c, utf7mode,
    bitstogo, utf16flag;\n    unsigned long ucs4 = 0, bitbuf = 0;\n    utf7mode =
    0; /* is the output UTF7 currently in base64 mode? */\n    utf8total = 0; /* how
    many octets is the current input UTF-8 char;\n                      0 == between
    characters */\n    bitstogo = 0; /* bits that need to be encoded into base64;
    if\n                     bitstogo != 0 then utf7mode == 1 */\n    while ((c =
    (unsigned char)*src) != '\\0') {\n     ++src;\n     /* undo hex-encoding */\n
    \    if (c == '%' && src[0] != '\\0' && src[1] != '\\0') {\n         c = HEXCHAR(src[0]);\n
    \        i = HEXCHAR(src[1]);\n         if (c == XX || i == XX) {\n             return
    0;\n         } else {\n             c = (char)((c << 4) | i);\n         }\n         src
    += 2;\n     }\n     /* normal character? */\n     if (c >= ' ' && c <= '~') {\n
    \        /* switch out of UTF-7 mode */\n         if (utf7mode) {\n          if
    (bitstogo) {\n          *dst++ = base64chars[(bitbuf << (6 - bitstogo)) & 0x3F];\n
    \         }\n          *dst++ = '-';\n          utf7mode = 0;\n          bitstogo
    = bitbuf = 0;\n         }\n         *dst++ = c;\n         /* encode '&' as '&-'
    */\n         if (c == '&') {\n          *dst++ = '-';\n         }\n         continue;\n
    \    }\n     /* switch to UTF-7 mode */\n     if (!utf7mode) {\n         *dst++
    = '&';\n         utf7mode = 1;\n     }\n     /* Encode US-ASCII characters as
    themselves */\n     if (c < 0x80) {\n         ucs4 = c;\n         utf8total =
    1;\n     } else if (utf8total) {\n         /* this is a subsequent octet of a
    multi-octet character */\n         /* save UTF8 bits into UCS4 */\n         ucs4
    = (ucs4 << 6) | (c & 0x3FUL);\n         if (++utf8pos < utf8total) {\n          continue;\n
    \        }\n     } else {\n         /* this is the first octet of a multi-octet
    character */\n         utf8pos = 1;\n         if (c < 0xE0) {\n          utf8total
    = 2;\n          ucs4 = c & 0x1F;\n         } else if (c < 0xF0) {\n          utf8total
    = 3;\n          ucs4 = c & 0x0F;\n         } else {\n          /* NOTE: can't
    convert UTF8 sequences longer than 4 */\n          utf8total = 4;\n          ucs4
    = c & 0x03;\n         }\n         continue;\n     }\n     /* Finished with UTF-8
    character.  Make sure it isn't an\n        overlong sequence.  If it is, return
    failure. */\n     if ((ucs4 < 0x80 && utf8total > 1) ||\n         (ucs4 < 0x0800
    && utf8total > 2) ||\n         (ucs4 < 0x00010000 && utf8total > 3) ||\n         (ucs4
    < 0x00200000 && utf8total > 4) ||\n         (ucs4 < 0x04000000 && utf8total >
    5) ||\n         (ucs4 < 0x80000000 && utf8total > 6)) {\n         return 0;\n
    \    }\n     /* loop to split ucs4 into two utf16 chars if necessary */\n     utf8total
    = 0;\n     do {\n         if (ucs4 >= UTF16BASE) {\n                ucs4 -= UTF16BASE;\n
    \         bitbuf = (bitbuf << 16) | ((ucs4 >> UTF16SHIFT)\n                            +
    UTF16HIGHSTART);\n          ucs4 = (ucs4 & UTF16MASK) + UTF16LOSTART;\n          utf16flag
    = 1;\n         } else {\n          bitbuf = (bitbuf << 16) | ucs4;\n          utf16flag
    = 0;\n         }\n         bitstogo += 16;\n         /* spew out base64 */\n         while
    (bitstogo >= 6) {\n          bitstogo -= 6;\n          *dst++ = base64chars[(bitstogo
    ? (bitbuf >> bitstogo)\n                               : bitbuf)\n                         &
    0x3F];\n         }\n     } while (utf16flag);\n    }\n    /* if in UTF-7 mode,
    finish in ASCII */\n    if (utf7mode) {\n     if (bitstogo) {\n         *dst++
    = base64chars[(bitbuf << (6 - bitstogo)) & 0x3F];\n     }\n     *dst++ = '-';\n
    \   }\n    /* tie off string */\n    *dst = '\\0';\n    return 1;\n"
  - '}

    '
  title: Appendix A.  Sample Code
- contents:
  - "Appendix B.  List of Changes since RFC 2192\n   Updated boilerplate, list of
    editor's, etc.\n   Updated references.\n   Updated ABNF not to use _, to use SP
    instead of SPACE, etc.\n   Updated example domains to use example.org.\n   Fixed
    ABNF error in \"imessagelist\" non-terminal.\n   Updated ABNF, due to changes
    in RFC 3501, RFC 4466, and RFC 3986.\n   Renamed \"iuserauth\" non-terminal to
    <iuserinfo>.\n   Clarified that the userinfo component describes both authorization\n
    \  identity and mailbox naming scope.\n   Allow for non-synchronizing literals
    in \"enc-search\".\n   Added \"ipartial\" specifier that denotes a partial FETCH.\n
    \  Moved URLAUTH text from RFC 4467 to this document.\n   Updated ABNF for the
    whole server to allow missing trailing \"/\"\n   (e.g., \"imap://imap.example.com\"
    is now valid and is the same as\n   \"imap://imap.example.com/\").\n   Clarified
    how relative-path references are constructed.\n   Added more examples demonstrating
    relative-path references.\n   Added rules for relative URLs and restructured ABNF
    as the result.\n   Removed text on use of relative URLs in MHTML.\n   Added examples
    demonstrating security considerations when resolving\n   URLs.\n   Recommend usage
    of STARTTLS/SASL security layer to protect\n   confidential data.\n   Removed
    some advices about connection reuse that were incorrect.\n   Removed URLs referencing
    a list of mailboxes, as this feature\n   hasn't seen any deployments.\n   Clarified
    that user name \"anonymous\" is case-insensitive.\n"
  title: Appendix B.  List of Changes since RFC 2192
- contents:
  - "Appendix C.  List of Changes since RFC 4467\n   Renamed <mechanism> to <uauth-mechanism>.
    \ Restructured ABNF.\n"
  title: Appendix C.  List of Changes since RFC 4467
- contents:
  - "Appendix D.  Acknowledgments\n   Text describing URLAUTH was lifted from [URLAUTH]
    by Mark Crispin.\n   Stephane H. Maes contributed some ideas to this document;
    he also\n   co-edited early versions of this document.\n   The editors would like
    to thank Mark Crispin, Ken Murchison, Ted\n   Hardie, Zoltan Ordogh, Dave Cridland,
    Kjetil Torgrim Homme, Lisa\n   Dusseault, Spencer Dawkins, Filip Navara, Shawn
    M. Emery, Sam\n   Hartman, Russ Housley, and Lars Eggert for the time they devoted
    to\n   reviewing this document and/or for the comments received.\n"
  title: Appendix D.  Acknowledgments
- contents:
  - "Authors' Addresses\n   Chris Newman (Author/Editor)\n   Sun Microsystems\n   3401
    Centrelake Dr., Suite 410\n   Ontario, CA 91761\n   EMail: chris.newman@sun.com\n
    \  Alexey Melnikov (Editor)\n   Isode Limited\n   5 Castle Business Village\n
    \  36 Station Road\n   Hampton, Middlesex\n   TW12 2BX, UK\n   EMail: Alexey.Melnikov@isode.com\n
    \  URI:   http://www.melnikov.ca/\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
