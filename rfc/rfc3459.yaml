- title: __initial_text__
  contents:
  - "              Critical Content Multi-purpose Internet Mail\n                \
    \      Extensions (MIME) Parameter\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the use of a mechanism for identifying body\n\
    \   parts that a sender deems critical in a multi-part Internet mail\n   message.\
    \  The mechanism described is a parameter to Content-\n   Disposition, as described\
    \ by RFC 3204.\n   By knowing what parts of a message the sender deems critical,\
    \ a\n   content gateway can intelligently handle multi-part messages when\n  \
    \ providing gateway services to systems of lesser capability.  Critical\n   content\
    \ can help a content gateway to decide what parts to forward.\n   It can indicate\
    \ how hard a gateway should try to deliver a body part.\n   It can help the gateway\
    \ to pick body parts that are safe to silently\n   delete when a system of lesser\
    \ capability receives a message.  In\n   addition, critical content can help the\
    \ gateway chose the\n   notification strategy for the receiving system.  Likewise,\
    \ if the\n   sender expects the destination to do some processing on a body part,\n\
    \   critical content allows the sender to mark body parts that the\n   receiver\
    \ must process.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Conventions used in this document..............................3\n\
    \   2.  Introduction...................................................3\n   3.\
    \  Handling Parameter.............................................4\n       3.1.\
    \ REQUIRED..................................................4\n       3.2. OPTIONAL..................................................5\n\
    \       3.3. Default Values............................................5\n   \
    \    3.4. Other Values..............................................5\n   4. \
    \ Collected Syntax...............................................6\n   5.  Notification...................................................6\n\
    \       5.1. DSN vs. MDN Generation....................................7\n   \
    \    5.2. Summary...................................................7\n   6. \
    \ Signed Content.................................................8\n   7.  Encrypted\
    \ Content..............................................9\n   8.  Status Code...................................................10\n\
    \   9.  Requirements for Critical Content.............................11\n   \
    \    9.1. Needs....................................................11\n      \
    \ 9.2. Current Approaches.......................................12\n   10. The\
    \ Content Gateway...........................................13\n       10.1. Integrated\
    \ Content Gateway..............................14\n       10.2. Disaggregated\
    \ Delivery Network..........................14\n   11. Backward Compatibility\
    \ Considerations.........................15\n   12. MIME Interactions.............................................15\n\
    \       12.1. multipart/alternative...................................15\n   \
    \    12.2. multipart/related.......................................15\n      \
    \ 12.3. message/rfc822..........................................15\n       12.4.\
    \ multipart/signed........................................16\n       12.5. multipart/encrypted.....................................16\n\
    \   13. Implementation Examples.......................................16\n   \
    \    13.1. Content Gateways........................................16\n      \
    \ 13.2. Disaggregated Content Gateway...........................17\n   14. OPES\
    \ Considerations...........................................18\n       14.1. Consideration\
    \ (2.1): One-Party Consent..................18\n       14.2. Consideration (2.2):\
    \ IP-layer Communications............18\n       14.3. Consideration (3.1): Notification\
    \ - Sender..............18\n       14.4. Consideration (3.2): Notification - Receiver............18\n\
    \       14.5. Consideration (3.3): Non-Blocking.......................18\n   \
    \    14.6. Consideration (4.1): URI Resolution.....................18\n      \
    \ 14.7. Consideration (4.2): Reference Validity.................19\n       14.8.\
    \ Consideration (4.3): Architecture Extensions............19\n       14.9. Consideration\
    \ (5.1): Privacy............................19\n   15. Security Considerations.......................................19\n\
    \   16. IANA Considerations...........................................19\n   17.\
    \ References....................................................20\n       17.1\
    \ Normative References.....................................20\n       17.2 Informative\
    \ Reference....................................21\n   18. Acknowledgments...............................................22\n\
    \   19. Intellectual Property Notice..................................23\n   20.\
    \ Author's Address..............................................23\n   21. Full\
    \ Copyright Statement......................................24\n"
- title: 1. Conventions used in this document
  contents:
  - "1. Conventions used in this document\n   This document refers generically to\
    \ the sender of a message in the\n   masculine (he/him/his) and the recipient\
    \ of the message in the\n   feminine (she/her/hers).  This convention is purely\
    \ for convenience\n   and makes no assumption about the gender of a message sender\
    \ or\n   recipient.\n   The key words \"MUST\", \"MUST NOT\", \"SHALL\", \"SHALL\
    \ NOT\", \"SHOULD\",\n   \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\
    \ in this document\n   are to be interpreted as described in BCP 14, RFC 2119\
    \ [2].\n   The word \"REQUIRED\" in this document does not follow the definition\n\
    \   found in RFC 2119.  This is because this document defines a parameter\n  \
    \ named \"REQUIRED\".  There is no requirement in this document that is\n   \"\
    REQUIRED\", so there is no confusion.\n   In this document, the \"sending agent\"\
    \ is the originator of the\n   message.  It could be a mail user agent (MUA) for\
    \ an Internet\n   message, or a SIP User Agent Client (UAC) for a SIP [3] message.\
    \ The\n   \"endpoint\" is the receiving device, of lesser capability than the\n\
    \   sending agent.\n   NOTE: Notes, such as this one, provide additional nonessential\n\
    \   information that the reader may skip without missing anything\n   essential.\
    \  The primary purpose of these non-essential notes is to\n   convey information\
    \ about the rationale of this document, or to place\n   this document in the proper\
    \ historical or evolutionary context.\n   Readers whose sole purpose is to construct\
    \ a conformant\n   implementation may skip such information.  However, it may\
    \ be of use\n   to those who wish to understand why we made certain design choices.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   The specification of Critical Content is small and compact.\
    \  For the\n   benefit of developers, the specification comes first, the rationale\n\
    \   after.\n   One concept that an implementer must understand is the content\n\
    \   gateway.  Section 10 describes the content gateway.  In brief, a\n   content\
    \ gateway has knowledge of the receiving system's capabilities.\n   The content\
    \ gateway passes messages the receiving system can process,\n   render or store.\
    \  The content gateway can modify a message, for\n   example by deleting unrenderable\
    \ or storable body parts, for delivery\n   to the receiving system.  Finally,\
    \ the content gateway can reject a\n   message that the receiving system cannot\
    \ handle.\n   Although Critical Content processing is not an OPES service, the\n\
    \   protocol machinery described in this document meets all of the OPES\n   IAB\
    \ requirements as stated by RFC 3238 [4].  Section 14 describes\n   this in detail.\
    \  In particular, unlike the current situation where\n   content gateways silently\
    \ modified messages, or had abstract rules\n   for modifying them (see the content\
    \ transformation rules in VPIM, for\n   example), the Critical Content mechanism\
    \ allows for the sending user\n   to explicitly indicate desired content handling\
    \ by content gateways\n   NOTE: This document updates RFC 3204 [5] to separate\
    \ the Handling\n   parameter from the ISUP/QSIG transport mechanism.  The protocol\n\
    \   described here is identical in functionality to RFC 3204 with respect\n  \
    \ to SIP.  Future versions of RFC 3204 should reference this document\n   for\
    \ the Handling parameter, as it is orthogonal to the tunneling of\n   signaling.\n"
- title: 3. Handling Parameter
  contents:
  - "3. Handling Parameter\n   The Handling parameter is a Content-Disposition [6]\
    \ parameter\n   inserted by the sending agent to indicate to the content gateway\n\
    \   whether to consider the marked body part critical.\n   A REQUIRED body part\
    \ is one the sender requires the receiving system\n   to deliver for him to consider\
    \ the message delivered.\n   An OPTIONAL body part is one the sender doesn't care\
    \ whether the\n   receiving system delivers it or not.  A content gateway can\
    \ silently\n   delete such body parts if the receiving system cannot deliver the\n\
    \   part.\n   The terms \"entity\" and \"body part\" have the meanings defined\
    \ in [6].\n"
- title: 3.1. REQUIRED
  contents:
  - "3.1. REQUIRED\n   \"Handling=REQUIRED\" signifies that this body part is critical\
    \ to the\n   sender.\n   If the content gateway cannot pass a body part marked\
    \ REQUIRED, then\n   the entire message has failed.  In this case, the content\
    \ gateway\n   MUST take the appropriate failure action.\n   NOTE: We say \"appropriate\
    \ action\", because the sender may have\n   suppressed all notifications.  In\
    \ this case, the appropriate action\n   is to silently discard the message.  In\
    \ addition, as a general MIME\n   parameter, the MIME body part may not be in\
    \ an Internet Mail message.\n   Moreover, in the SIP case, the appropriate notification\
    \ is a status\n   return code, not a delivery notification.\n"
- title: 3.2. OPTIONAL
  contents:
  - "3.2. OPTIONAL\n   \"Handling=OPTIONAL\" signifies that the sender does not care\
    \ about\n   notification reports for this body part.\n   If the content gateway\
    \ cannot pass a body part marked OPTIONAL, the\n   receiving system may silently\
    \ delete the body part.  The receiving\n   system MUST NOT return a delivery failure,\
    \ unless parts marked\n   REQUIRED have also failed.\n"
- title: 3.3. Default Values
  contents:
  - "3.3. Default Values\n   The default value for Handling for a given body part\
    \ is REQUIRED.\n   This enables the existing notification mechanisms to work for\
    \ sending\n   agents that do not know about the content notification entity. \
    \ All\n   body parts are critical, because they have the default marking of\n\
    \   REQUIRED.\n   NOTE: In the case of Internet mail, critical content processing\
    \ is a\n   function of the content gateway and not the mail transfer agent (MTA)\n\
    \   or user agent (UA).  Often, the entity performing content gateway\n   processing\
    \ is the receiving UA.  However, in this case the UA is\n   acting as a content\
    \ gateway.  Thus the default action for any\n   Content-Disposition [6]-compliant\
    \ user agent to ignore unrecognized\n   disposition parameters ensures that this\
    \ mechanism is compatible with\n   the Internet architecture.\n   NOTE: This parameter\
    \ is fully backwards compatible and works as\n   expected for Internet mail and\
    \ SIP.\n   NOTE: Some VPIMv2 implementations can receive arbitrary e-mail from\n\
    \   the Internet.  However, these systems are really acting in the\n   capacity\
    \ of an Internet Voice Mail system.  In this case, one would\n   expect the implementation\
    \ to provide Internet Voice Mail semantics to\n   Internet Voice Mail messages.\n"
- title: 3.4. Other Values
  contents:
  - "3.4. Other Values\n   The content gateway MUST treat unrecognized values as REQUIRED.\
    \ This\n   is to provide backward compatibility with future uses of the\n   Content-Criticality\
    \ entity.\n   NOTE: A possible new value is IMPORTANT.  An IMPORTANT body part\
    \ is\n   something the sender wants the receiver to get, but would not want\n\
    \   the message rejected outright if the IMPORTANT body part fails, but\n   they\
    \ do want notification of the failure.  However, as no\n   implementations do\
    \ IMPORTANT, it is not important to this version of\n   this document.\n"
- title: 4. Collected Syntax
  contents:
  - "4. Collected Syntax\n   The format of the collected syntax is in accordance with\
    \ the ABNF of\n   [7].  Note that per RFC 2183 [6], the HANDLING Content-Disposition\n\
    \   parameter is not case sensitive.  In addition, the notification-type\n   is\
    \ not case sensitive.\n      \"handling\" \"=\" notification-type CRLF\n     \
    \ notification-type = \"REQUIRED\" / \"OPTIONAL\" /\n                        \
    \  other-handling / generic-param\n      other-handling    =  token\n"
- title: 5. Notification
  contents:
  - "5. Notification\n   One obvious application of critical content is generating\
    \ a (non-)\n   delivery notification in the Internet mail environment.  If the\
    \ value\n   of the field is OPTIONAL, the content gateway MUST NOT generate a\n\
    \   notification.  If the value of the field is REQUIRED, the content\n   gateway\
    \ MAY generate a notification, based on the normal notification\n   request mechanisms.\
    \  Normal notification request mechanisms include\n   specifying the NOTIFY parameter\
    \ to the SMTP RCPT command [8] and the\n   Disposition-Notification-To header\
    \ [9].\n   In SIP, all requests have responses.  These responses provide\n   notification\
    \ in the status code of the response.  For the RFC 3204\n   case, a content gateway\
    \ generates a 415 (Unsupported Media Type)\n   response if the field is REQUIRED.\n\
    \   If the sending system requests a notification, and a REQUIRED part\n   fails,\
    \ the content gateway MUST generate a notification for the whole\n   message.\
    \  Conversely, if the gateway cannot pass on a body part\n   marked OPTIONAL,\
    \ the gateway MUST NOT generate a notification.\n   NOTE: This implies that the\
    \ content gateway must examine the entire\n   message to determine whether it\
    \ needs to generate a notification.\n   However, the content gateway need not\
    \ examine the message if it knows\n   it can store and forward all media types.\
    \ Said differently, Internet\n   e-mail MTAs or gateways can, by default, handle\
    \ any arbitrary MIME-\n   encapsulated type.  Some voice mail systems, on the\
    \ other hand,\n   cannot store binary attachments at all, such as application/ms-word.\n\
    \   The voice mail content gateway, in this example, would be scanning\n   for\
    \ non-renderable body parts in any event.\n"
- title: 5.1. DSN vs. MDN Generation
  contents:
  - "5.1. DSN vs. MDN Generation\n   The content gateway generates a delivery status\
    \ notification (DSN)\n   [9] if it operates as a gateway.  The content gateway\
    \ generates a\n   Message Disposition Notification (MDN) [10] if it operates as\
    \ a mail\n   user agent.  Section 6 describes the operating modes of a content\n\
    \   gateway.  In short, if there is a MTA that \"delivers\" the message to\n \
    \  the content gateway for processing, the MTA takes responsibility for\n   DSN\
    \ processing.  In this case, the only option available to the\n   content gateway\
    \ is to generate MDNs.  If the content gateway operates\n   as a MTA, then it\
    \ generates DSNs.  DSN generation is the preferred\n   option.\n   If the content\
    \ gateway is part of a SIP endpoint, then it generates\n   the appropriate success\
    \ or error response code.\n"
- title: 5.2. Summary
  contents:
  - "5.2. Summary\n   The following table summarizes the actions expected of a conforming\n\
    \   content gateway.\n   NOTE: This section is normative: it suggests what a content\
    \ gateway\n   should put into the DSN or MDN.\n   NOTE: In the case of SIP, this\
    \ section is informative.  See RFC 3204\n   for the normative set of actions on\
    \ failure.\n                  Table 1 - Expected Actions\n                   \
    \     +--------------------------------------+\n                        |    Sending\
    \ UA Has Marked Body Part   |\n                        |---------------------+----------------|\n\
    \                        |      REQUIRED       |    OPTIONAL    |\n   +--------------------+---------------------+----------------+\n\
    \   | Body Part is       |                     |                |\n   | Deliverable\
    \        | Appropriate Action  |     ignore     |\n   +--------------------+---------------------+----------------+\n\
    \   | Body Part is       |                     |                |\n   | Undeliverable\
    \      | Fail Entire Message |     ignore     |\n   +--------------------+--------------------------------------+\n\
    \   The \"Appropriate Action\" is the action the content gateway would take\n\
    \   given the context of execution.  For example, if a sender requests\n   return\
    \ receipt and the receiver reads a HANDLING body part, the\n   receiving UA must\
    \ generate the appropriate MDN (following the rules\n   for MDN).  Likewise, if\
    \ the content gateway cannot deliver the body\n   part and the body part is critical,\
    \ the content gateway generates the\n   appropriate DSN or MDN.\n   \"Optional\"\
    \ means the content gateway ignores the disposition of the\n   body part.  The\
    \ content gateway treats the message as if the body\n   part was not present in\
    \ the message.\n"
- title: 6. Signed Content
  contents:
  - "6. Signed Content\n   RFC 1847 [11] describes how to apply digital signatures\
    \ to a MIME\n   body part.  In brief, a multipart/signed body part encapsulates\
    \ the\n   body part of interest, or the \"content object\", in a MIME body part\n\
    \   and the control information needed to verify the object, or the\n   \"protocol\"\
    \ in the lexicon of RFC 1847, in a second MIME body part.\n   Here is an example\
    \ taken from RFC 1847.\n      Content-Type: multipart/signed; protocol=\"TYPE/STYPE\"\
    ;\n              micalg=\"MICALG\"; boundary=\"Signed Boundary\"\n      --Signed\
    \ Boundary\n      Content-Type: text/plain; charset=\"us-ascii\"\n      This is\
    \ some text to be signed although it could be\n      any type of data, labeled\
    \ accordingly, of course.\n      --Signed Boundary\n      Content-Type: TYPE/STYPE\n\
    \      CONTROL INFORMATION for protocol \"TYPE/STYPE\" would be here\n      --Signed\
    \ Boundary--\n                Figure 1 - Signed Content MIME Type\n   There are\
    \ three places where one may place the criticality indicator\n   for a multipart/signed\
    \ body part.  One could mark the\n   multipart/signed object, the content object,\
    \ the control object, or\n   any combination of the three.\n   The disposition\
    \ of REQUIRED body parts follow the guidelines found in\n   RFC 2480 [12].\n \
    \  A critical content indicator on a multipart/signed body part means\n   the\
    \ sending party requires true end-to-end signature verification.\n   Thus the\
    \ gateway needs to pass the enclosure intact.  If the system\n   or network of\
    \ lesser capability cannot do signature verification and\n   the signed enclosure\
    \ is REQUIRED, the gateway MUST reject the\n   message.\n   A critical content\
    \ indicator on a signature means that either the\n   receiving endpoint must be\
    \ able to do signature verification, or the\n   gateway needs to verify the signature\
    \ before forwarding the message.\n   If the content does not pass verification,\
    \ the gateway MUST reject\n   the message.\n   A critical content indicator on\
    \ the enclosed material specifies\n   whether that material is critical to the\
    \ message as a whole.  If the\n   signature is marked OPTIONAL and the enclosed\
    \ material is marked\n   REQUIRED, the gateway MAY strip out the signature information\
    \ if the\n   system or network of lesser capability cannot do signature\n   verification.\
    \  However, if possible, we STRONGLY RECOMMEND the\n   gateway do signature verification\
    \ and indicate tampering to the\n   recipient.\n"
- title: 7. Encrypted Content
  contents:
  - "7. Encrypted Content\n   RFC 1847 [11] describes how to encrypt a MIME body part.\
    \  In brief, a\n   multipart/encrypted body part encapsulates the control information\n\
    \   (\"protocol\" in the lexicon of RFC 1847) for the encrypted object and\n \
    \  the second containing the encrypted data (application/octet-stream).\n   Here\
    \ is an example taken from RFC 1847.\n      Content-Type: multipart/encrypted;\
    \ protocol=\"TYPE/STYPE\";\n              boundary=\"Encrypted Boundary\"\n  \
    \    --Encrypted Boundary\n      Content-Type: TYPE/STYPE\n      CONTROL INFORMATION\
    \ for protocol \"TYPE/STYPE\" would be here\n      --Encrypted Boundary\n    \
    \  Content-Type: application/octet-stream\n          Content-Type: text/plain;\
    \ charset=\"us-ascii\"\n          All of this indented text, including the indented\
    \ headers,\n          would be unreadable since it would have been encrypted by\n\
    \          the protocol \"TYPE/STYPE\".  Also, this encrypted data could\n   \
    \       be any type of data, labeled accordingly, of course.\n      --Encrypted\
    \ Boundary--\n   One may sensibly place a criticality indicator on the encrypted\n\
    \   enclosure (multipart/encrypted) body part.  If the endpoint can\n   decrypt\
    \ the message, then the gateway passes the body part in its\n   entirety.\n  \
    \ If one marks the control object REQUIRED, then the sending UA\n   requires end-to-end\
    \ encryption.  If the endpoint cannot decrypt the\n   message, then the gateway\
    \ MUST reject the message.\n   If the control object is OPTIONAL, and the endpoint\
    \ cannot decrypt\n   the message, and the gateway can decrypt the message, then\
    \ the\n   gateway MAY decrypt the message and forward the cleartext message.\n\
    \   The sending user has explicitly given permission for the gateway to\n   decrypt\
    \ the message by marking the control object OPTIONAL. Recall\n   that the default\
    \ indication for MIME body parts is REQUIRED.  Thus if\n   the user takes no explicit\
    \ action, the content gateway will assume\n   the user wished end-to-end encryption.\n\
    \   Marking the encrypted content, without marking the encrypted\n   enclosure,\
    \ is problematic.  This is because the gateway has to\n   decrypt the encrypted\
    \ data to retrieve the header.  However, it is\n   unlikely for the gateway to\
    \ have the capability (e.g., keys) to\n   decrypt the encrypted data.  If a sending\
    \ UA wishes to mark encrypted\n   data as not REQUIRED, the sending UA MUST mark\
    \ the encrypted content\n   as not REQUIRED.  Clearly, if the sending UA marks\
    \ the encrypted\n   content as REQUIRED, the gateway will apply the REQUIRED processing\n\
    \   rules.  Moreover, if the sending UA does not mark the encrypted\n   content\
    \ as REQUIRED, the gateway, unless it can decrypt the data,\n   will treat the\
    \ encrypted content as REQUIRED.  This occurs because\n   gateways always treat\
    \ unmarked content as REQUIRED (see Section 3.3).\n"
- title: 8. Status Code
  contents:
  - "8. Status Code\n   The critical content indication, in itself, does not guarantee\
    \ any\n   notification.  Notification follows the rules described in [3], [8],\n\
    \   and [9].\n   NOTE: The content of actual DSNs or MDNs are beyond the scope\
    \ of this\n   document.  This document only specifies how to mark a critical body\n\
    \   part.  On the other hand, we do envision sensible DSN and MDN\n   contents.\
    \  For example, DSNs should include the appropriate failure\n   code as enumerated\
    \ in [13].  Likewise, MDNs should include the\n   failure code in the MDN \"Failure:\"\
    \ field.\n   If the receiving system is to generate a notification based on its\n\
    \   inability to render or store the media type, the notification should\n   use\
    \ the status code 5.6.1, \"Media not supported\", from [10].\n   For the SIP case,\
    \ all requests have notification provided by the\n   status response message.\
    \  Per RFC 3204, a content gateway generates a\n   415 (Unsupported Media Type)\
    \ response.\n"
- title: 9. Requirements for Critical Content
  contents:
  - "9. Requirements for Critical Content\n   This section is informative.\n"
- title: 9.1. Needs
  contents:
  - "9.1. Needs\n   The need for a critical content identification mechanism comes\
    \ about\n   because of the internetworking of Internet mail systems with\n   messaging\
    \ systems that do not fulfill all of the semantics of\n   Internet mail.  Such\
    \ legacy systems have a limited ability to render\n   or store all parts of a\
    \ given message.  This document will use the\n   case of an Internet mail system\
    \ exchanging electronic messages with a\n   legacy voice messaging system for\
    \ illustrative purposes.\n   Electronic mail has historically been text-centric.\
    \  Extensions such\n   as MIME [14] enable the user agents to send and receive\
    \ multi-part,\n   multimedia messages.  Popular multimedia data types include\
    \ binary\n   word processing documents, binary business presentation graphics,\n\
    \   voice, and video.\n   Voice mail has historically been audio-centric.  Many\
    \ voice-messaging\n   systems only render voice.  Extensions such as fax enable\
    \ the voice\n   mail system to send and receive fax images as well as create multi-\n\
    \   part voice and fax messages.  A few voice mail systems can render\n   text\
    \ using text-to-speech or text-to-fax technology.  Although\n   theoretically\
    \ possible, none can today render video.\n   An important aspect of the interchange\
    \ between voice messaging\n   services and desktop e-mail client applications\
    \ is that the rendering\n   capability of the voice-messaging platform is often\
    \ much less than\n   the rendering capability of a desktop e-mail client.  In\
    \ the e-mail\n   case, the sender has the expectation that the recipient receives\
    \ all\n   components of a multimedia message.  This is so even if the recipient\n\
    \   cannot render all body parts.  In most cases, the recipient can\n   either\
    \ find the appropriate rendering tool or tell the sender that\n   she cannot read\
    \ the particular attachment.\n   This is an important issue.  By definition, a\
    \ MIME-enabled user\n   agent, conforming to [15], will present or make available\
    \ all of the\n   body parts to the recipient.  However, a voice mail system may\
    \ not be\n   capable of storing non-voice objects.  Moreover, the voice mail\n\
    \   system may not be capable of notifying the recipient that there were\n   undeliverable\
    \ message parts.\n   The inability of the receiving system to render a body part\
    \ is\n   usually a permanent failure.  Retransmission of the message will not\n\
    \   improve the likelihood of a future successful delivery. Contrast this\n  \
    \ with the case with normal data delivery. Traditional message\n   failures, such\
    \ as a garbled message or disabled link will benefit\n   from retransmission.\n\
    \   This situation is fundamentally different from normal Internet mail.\n   In\
    \ the Internet mail case, either the system delivered the message,\n   or it didn't.\
    \  There is no concept of a system partially delivering a\n   message.\n   In\
    \ addition, there are many situations where the sender would not\n   mind if the\
    \ system did not deliver non-critical parts of a message.\n   For example, the\
    \ sender's user agent may add body parts to a message\n   unbeknownst to the sender.\
    \  If the receiving system rejected the\n   message because it could not render\
    \ a hidden body part, the sender\n   would be understandably confused and upset.\n\
    \   Thus, there is a need for a method of indicating to a Mail Transfer\n   Agent\
    \ (MTA) or User Agent (UA) that the sender considers parts of a\n   message to\
    \ be critical.  From the sender's perspective, he would not\n   consider the message\
    \ delivered if the system did not deliver the\n   critical parts.\n"
- title: 9.2. Current Approaches
  contents:
  - "9.2. Current Approaches\n   One method of indicating critical content of a message\
    \ is to define a\n   profile.  The profile defines rules for silently deleting\
    \ mail body\n   parts based on knowledge of the UA capabilities.  Citing the example\n\
    \   above, a voice profile can easily declare that MTAs or UAs can\n   silently\
    \ delete TNEF data and yet consider the message successfully\n   delivered.  This\
    \ is, in fact, the approach taken by VPIMv2 [16].\n   Since one aspect of the\
    \ issue is deciding when to notify the sender\n   that the system cannot deliver\
    \ part of a message, one could use a\n   partial non-delivery notification mechanism\
    \ to indicate a problem\n   with delivering a given body part.  However, this\
    \ requires the user\n   request a delivery notification.  In addition, the sender\
    \ may not be\n   aware of parts added by the sending user agent.  In this case,\
    \ a\n   failure notice would mystify the sender.\n   A straightforward alternative\
    \ implementation method for marking a\n   body part critical is to use a Critical-Content\
    \ MIME entity.  This\n   has the benefit that criticality is meta information\
    \ for the body\n   part.  However, IMAP servers in particular would need to either\
    \ put\n   Critical-Content into the BODYSTRUCTURE method or create a new method\n\
    \   to retrieve arbitrary MIME entities.  Given the experience of trying\n   to\
    \ get Content-Location accepted by IMAP vendors, we chose not to go\n   that route.\n\
    \   What we need is a way of letting the sender indicate what body parts\n   he\
    \ considers to be critical.  The mechanism must not burden the\n   sender with\
    \ failure notifications for non-critical body parts.  The\n   mechanism must conform\
    \ to the general notification status request\n   mechanism for positive or negative\
    \ notification.  When requested, the\n   mechanism must indicate to the sender\
    \ when a receiving system cannot\n   deliver a critical body part.\n"
- title: 10. The Content Gateway
  contents:
  - "10. The Content Gateway\n   This section is informative.\n   In this section,\
    \ we use the definition found in RFC 2156 [17] for the\n   term \"gateway.\"\n\
    \   We do not strictly use the definition found in RFC 2821 [18] for the\n   term\
    \ \"gateway.\"  In particular, RFC 2821 is discussing a gateway that\n   should\
    \ not examine the message itself.  An RFC 2821 gateway is a\n   transport gateway,\
    \ that mostly deals with transformations of the SMTP\n   information.\n   A content\
    \ gateway is a gateway that connects a first network to a\n   second network.\
    \  The second network often has lesser capability than\n   the first network.\
    \  The canonical topology follows.  \"[MTA]\", with\n   square brackets, signifies\
    \ an optional component.\n                             +---------+\n   +---------+\
    \     +-----+   |         |     +-------+   +-----------+\n   | Sending |=...=|[MTA]|===|\
    \ Content |=...=| [MTA] |===| Receiving |\n   |   UA    |     +-----+   | Gateway\
    \ |     +-------+   |    UA     |\n   +---------+               |         |  \
    \               +-----------+\n                             +---------+\n    \
    \      First Network                         Second Network\n                \
    \ Figure 2 - Content Gateway Topology\n   The content gateway can be the last\
    \ hop before the receiving MTA. The\n   content gateway can be between networks,\
    \ and thus not the last hop\n   before the receiving MTA.  The content gateway\
    \ can be the first MTA\n   the sending UA contacts.  Finally, the content gateway\
    \ can be an\n   integrated component of the receiving MTA.\n   For the SIP case,\
    \ consider each MTA as a SIP Proxy, the Sending UA as\n   a SIP User Agent Client,\
    \ and the Receiving UA as a SIP User Agent\n   Server.\n"
- title: 10.1. Integrated Content Gateway
  contents:
  - "10.1. Integrated Content Gateway\n   In this situation, the receiving user agent\
    \ is integrated with the\n   content gateway. The integrated content gateway knows\
    \ the\n   capabilities of the user agent.  The topology is as follows.\n     \
    \                        +---------------------+\n   +---------+     +-----+ \
    \  |         :           |\n   | Sending |=...=|[MTA]|===| Content : Receiving\
    \ |\n   |   UA    |     +-----+   | Gateway :    UA     |\n   +---------+    \
    \           |         :           |\n                             +---------------------+\n\
    \          First Network           Second Network\n                  Figure 3\
    \ - Integrated Content Gateway\n   The processing of ISUP and QSIG objects, as\
    \ described in [5], is an\n   example of an integrated gateway.\n"
- title: 10.2. Disaggregated Delivery Network
  contents:
  - "10.2. Disaggregated Delivery Network\n   A degenerate case, although one that\
    \ does occur, is where the content\n   gateway sits behind the final MTA.  This\
    \ happens when one implements\n   the content gateway as a post-processing step\
    \ to a normal delivery.\n   For example, one could configure a mail handling system\
    \ to deliver\n   the message to a queue or directory, where the content gateway\n\
    \   process picks up the message.  If there were any directives for DSN\n   processing,\
    \ the delivering MTA would execute them.  For example, the\n   message could have\
    \ requested notification on successful delivery.\n   The delivering MTA, having\
    \ delivered the message to the queue, would\n   consider the message delivered\
    \ and thus notify the sender of such.\n   However, the content gateway process\
    \ could then discover that the\n   receiving UA cannot render the message.  In\
    \ this case, the content\n   gateway generates a NDN, as it is the only option\
    \ available.\n                           Delivered\n                         \
    \      |      +---------+\n   +---------+     +-----+     v      |         | \
    \    +-----------+\n   | Sending |=...=| MTA |--> File -->| Content |=...=| Receiving\
    \ |\n   |   UA    |     +-----+            | Gateway |     |    UA     |\n   +---------+\
    \                        |         |     +-----------+\n                     \
    \                 +---------+\n          First Network              Second Network\n\
    \              Figure 4 - Disaggregated Delivery Network\n"
- title: 11. Backward Compatibility Considerations
  contents:
  - "11. Backward Compatibility Considerations\n   DSN requires ESMTP.  If MTAs in\
    \ the path from the sending UA to the\n   receiving UA do not support ESMTP, then\
    \ that MTA will reject the DSN\n   request.  In addition, the message will default\
    \ to notification on\n   delay or failure.  While not ideal, the sender will know\
    \ that DSN is\n   not available, and that critical content that fails will get\n\
    \   notification.\n"
- title: 12. MIME Interactions
  contents:
  - '12. MIME Interactions

    '
- title: 12.1. multipart/alternative
  contents:
  - "12.1. multipart/alternative\n   As is true for all Content-Disposition parameters,\
    \ handling is only\n   in effect for the selected alternative.  If the selected\
    \ alternative\n   has the critical content indicator, then the entire alternative\
    \ takes\n   on the criticality indicated.  That is, if the alternative selected\n\
    \   has HANDLING=OPTIONAL, then the content gateway MUST NOT generate any\n  \
    \ delivery notifications.\n   NOTE: This statement explicitly shows that HANDLING\
    \ overrides the DSN\n   and MDN request mechanisms.\n   It is unlikely for a selected\
    \ alternative to fail, as the content\n   gateway presumably picks the alternative\
    \ specifically because it can\n   render it.\n   If the selected alternative is\
    \ a message/rfc822 that encloses a\n   multipart MIME message or the selected\
    \ alternative is itself a\n   multipart MIME type, the individual top-level body\
    \ parts follow the\n   HANDLING mechanism described in this document.\n   NOTE:\
    \ This means that a forwarded message's criticality will not\n   affect the forwarding\
    \ agent's intentions.\n"
- title: 12.2. multipart/related
  contents:
  - "12.2. multipart/related\n   Criticality fits in rather well with the multipart/related\n\
    \   construction.  For example, consider a multipart/related message\n   consisting\
    \ of a Macintosh data fork and a Macintosh resource fork.\n   For a Microsoft\
    \ Word document, the data fork is likely to be\n   critical.  The receiving system\
    \ can safely ignore the resource fork.\n"
- title: 12.3. message/rfc822
  contents:
  - "12.3. message/rfc822\n   Criticality only affects the outermost level of the\
    \ message or, in\n   the case of multipart/alternative, the outermost level of\
    \ the\n   selected alternative.  Specifically, the receiving system ignores\n\
    \   criticality indicators in embedded body parts.  This avoids the\n   situation\
    \ of a forwarded message triggering or suppressing undesired\n   reporting.  This\
    \ simply implements the procedures described in [6].\n"
- title: 12.4. multipart/signed
  contents:
  - "12.4. multipart/signed\n   See Section 6.\n"
- title: 12.5. multipart/encrypted
  contents:
  - "12.5. multipart/encrypted\n   See Section 7.\n"
- title: 13. Implementation Examples
  contents:
  - "13. Implementation Examples\n   This section is an informative part of the definition\
    \ of Criticality.\n   We hope it helps implementers understand the mechanics of\
    \ the\n   Handling mechanism.\n   We will examine two cases.  They are how a content\
    \ gateway processes\n   a message and how a disaggregated content gateway processes\
    \ a\n   message.\n"
- title: 13.1. Content Gateways
  contents:
  - "13.1. Content Gateways\n   Content gateways examine the contents of a message\
    \ from a first\n   network before the gateway forwards the message to a second\
    \ network.\n   For the purposes of this example, we assume the second network\
    \ has\n   less capability than the first network.  In particular, we expect\n\
    \   there will be certain message body types that the gateway cannot pass\n  \
    \ onto the second network.\n   Consider a gateway between the Internet and a text-only\
    \ short message\n   service.  A message comes through the gateway containing a\
    \ text part\n   and a tnef part.  The sender marks the text part REQUIRED.  The\n\
    \   gateway, knowing the capability of the short message service,\n   silently\
    \ deletes the non-critical, tnef part, passing the critical\n   content to the\
    \ short message service network. Any subsequent\n   notifications, such as failure\
    \ notices or delivery notices, follow\n   the normal rules for notification.\n\
    \   Note the gateway, by silently deleting non-critical content, may\n   affect\
    \ proprietary message correlation schemes.  One can envision the\n   sending UA\
    \ inserting a body part for tracking purposes.  By deleting\n   non-critical content,\
    \ the content gateway will break such a scheme.\n   If a sending UA understands\
    \ how to mark critical content, it should\n   use Internet standard mechanisms\
    \ for tracking messages, such as\n   Message-ID [19].\n   What if no body parts\
    \ have critical content indicators?  In this\n   case, the entire message is critical.\
    \  Thus, when the gateway sees\n   the tnef part, it will reject the entire message,\
    \ generating a DSN\n   with a status code 5.6.1, \"Media not supported\".\n  \
    \ Likewise, consider a three part message with a text annotation (part\n   1)\
    \ to a voice message (part 2) with a vCard [20] (part 3). The sender\n   marks\
    \ the first two parts REQUIRED.  Now, let us assume the receiving\n   MTA (gateway)\
    \ is a voice mail only system, without even the\n   capability to store text.\
    \  In this case, the gateway, acting as the\n   receiving MTA, will reject the\
    \ message, generating a DSN with the\n   status code 5.6.1, \"Media not supported\"\
    .\n"
- title: 13.2. Disaggregated Content Gateway
  contents:
  - "13.2. Disaggregated Content Gateway\n   For this example, we will examine the\
    \ processing of a three-part\n   message.  The first part is a text annotation\
    \ of the second part, an\n   audio message.  The third part is the sender's vCard.\
    \  The sender\n   marks the first and second parts REQUIRED.  In addition, the\
    \ sender\n   marks the message for read receipt.\n   For the purposes of example,\
    \ the telephone user interface (TUI) does\n   not perform text-to-speech conversion.\
    \  A TUI is a mail user agent\n   (UA) that uses DTMF touch-tone digits for input\
    \ and audio for output\n   (display).\n   The TUI is unable to render the first\
    \ part of the message, the text\n   part.  In addition, it is unable to render\
    \ the third part of the\n   message, the vCard part.  Since the sender did not\
    \ mark the third\n   part of the message REQUIRED, the system ignores the failure\
    \ of the\n   TUI to render the third part of the message.  However, since the\n\
    \   sender did mark the first part REQUIRED, and the TUI is unable to\n   render\
    \ text, the message fails.\n   What happens next is implementation dependent.\
    \  If the TUI is part of\n   a unified messaging system, a reasonable action is\
    \ to hold the\n   message for the user.  The user can access the message at a\
    \ later\n   time from a terminal that can render all of the critical body parts.\n\
    \   It would be reasonable for the TUI to notify the user about the\n   undeliverable\
    \ body part.\n   If the TUI is part of a voice messaging system, or if the user\
    \ does\n   not subscribe to a text-to-speech service, a reasonable action is for\n\
    \   the TUI to return a MDN with the disposition \"failed\" and the failure\n\
    \   modifier \"5.6.1 (Media not supported)\".\n"
- title: 14. OPES Considerations
  contents:
  - "14. OPES Considerations\n   Critical Content processing is not a web service.\
    \  However, some in\n   the Internet community may draw parallels between web\
    \ services that\n   modify content and an e-mail, SIP, or other MIME-transport\
    \ service\n   that modifies content.\n   This section will analyze the Critical\
    \ Content protocol machinery\n   against the requirements stated in RFC 3238 [4].\
    \  The summary is that\n   the protocol described in this document meets all of\
    \ the requirements\n   of RFC 3238.\n"
- title: '14.1. Consideration (2.1): One-Party Consent'
  contents:
  - "14.1. Consideration (2.1): One-Party Consent\n   This is the heart of Critical\
    \ Content.  Critical Content enables the\n   sending party to give consent to\
    \ have the message modified. Gateways\n   that conform to this document will ensure\
    \ that gateways only modify\n   messages that the sending party has given consent\
    \ to modify.\n"
- title: '14.2. Consideration (2.2): IP-layer Communications'
  contents:
  - "14.2. Consideration (2.2): IP-layer Communications\n   The content gateway is\
    \ an addressable IP-entity.  Moreover, all of\n   the relevant protocols (SMTP,\
    \ SIP, HTTP, etc.) all explicitly make\n   the presence of the gateway known to\
    \ the endpoints.\n"
- title: '14.3. Consideration (3.1): Notification - Sender'
  contents:
  - "14.3. Consideration (3.1): Notification - Sender\n   Again, this is the point\
    \ of this document.  The sender explicitly\n   gets notification if the gateway\
    \ would remove a Critical Content body\n   part.\n"
- title: '14.4. Consideration (3.2): Notification - Receiver'
  contents:
  - "14.4. Consideration (3.2): Notification - Receiver\n   The nature of the receiving\
    \ system dictates that end users understand\n   that the messages have been changed.\n"
- title: '14.5. Consideration (3.3): Non-Blocking'
  contents:
  - "14.5. Consideration (3.3): Non-Blocking\n   By definition, the endpoint cannot\
    \ receive non-modified content, so\n   this requirement does not apply.\n"
- title: '14.6. Consideration (4.1): URI Resolution'
  contents:
  - "14.6. Consideration (4.1): URI Resolution\n   Clearly, one is sending mail (SMTP),\
    \ a message (SIP), or fetching a\n   document (HTTP).  The machinery described\
    \ in this document does not\n   alter the content itself or the access mechanism.\
    \  Thus it is\n   compliant with this requirement.\n"
- title: '14.7. Consideration (4.2): Reference Validity'
  contents:
  - "14.7. Consideration (4.2): Reference Validity\n   Since the protocol described\
    \ in this document does not alter the\n   content itself, inter- and intra-document\
    \ references are not altered.\n   However, intra-document references to removed\
    \ body parts will fail.\n   On the other hand, the sender explicitly marked those\
    \ body parts as\n   being disposable.  Thus the sender is aware of the possibility\
    \ the\n   parts may not arrive at the receiver.\n"
- title: '14.8. Consideration (4.3): Architecture Extensions'
  contents:
  - "14.8. Consideration (4.3): Architecture Extensions\n   Since the protocol described\
    \ in this document meets Considerations\n   4.1 and 4.2, this requirement does\
    \ not apply.\n"
- title: '14.9. Consideration (5.1): Privacy'
  contents:
  - "14.9. Consideration (5.1): Privacy\n   The privacy policy of this protocol is\
    \ explicit.  In particular, the\n   protocol honors end-to-end security.\n"
- title: 15. Security Considerations
  contents:
  - "15. Security Considerations\n   Sending UA's can use signatures over critical\
    \ content indicators to\n   ensure the integrity of the indicator.\n   The gateway\
    \ MUST honor signature processing.  In particular, if the\n   sending UA marks\
    \ the signature components REQUIRED, and the endpoint\n   cannot do MIME signature\
    \ processing, the gateway MUST establish an\n   appropriate signature mechanism\
    \ between the gateway and the endpoint.\n   In this case, the gateway must be\
    \ secure, as it can become a target\n   point for tampering with the signed components\
    \ of the message.\n   Receiving systems and users should not place any authentication\
    \ value\n   on the Handling parameter.\n   Note that by design, and under the\
    \ sending user's request, a content\n   gateway will silently delete unimportant\
    \ body parts. Critical content\n   gives the sender the ability to determine the\
    \ acceptable level\n   integrity of the delivered message.  That is, the message\
    \ as the\n   content gateway actually passes it on is, in fact, representative\
    \ of\n   the sender's intentions.\n"
- title: 16. IANA Considerations
  contents:
  - "16. IANA Considerations\n   RFC 3204 already registered the Handling parameter.\
    \  It is collected\n   here only for reference and as a placeholder for use both\
    \ for further\n   expansion in the future and as the normative reference for other\n\
    \   documents that need to reference the Handling parameter.\n   Per section 9\
    \ of [6], here is the IANA registration for Handling.\n   To: IANA@IANA.ORG Subject:\
    \ Registration of new Content-Disposition\n   parameter\n   Content-Disposition\
    \ parameter name: HANDLING\n   Allowable values for this parameter: REQUIRED OPTIONAL\n\
    \   Description: Marks the body part as required for delivery (REQUIRED)\n   or\
    \ can be silently discarded (OPTIONAL).  See RFC <this document> and\n   RFC 3204.\n\
    \   Per RFC 2183, the Content-Disposition parameter name is not case\n   sensitive.\
    \  Per RFC 3459, the values of the parameter are also not\n   case sensitive.\n"
- title: 17. References
  contents:
  - '17. References

    '
- title: 17.1 Normative References
  contents:
  - "17.1 Normative References\n   [1]  Bradner, S., \"The Internet Standards Process\
    \ -- Revision 3\", BCP\n        9, RFC 2026, October 1996.\n   [2]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [3]  Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
    \ Johnston, A.,\n        Peterson, P., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [4]\
    \  IAB, Floyd, S. and L. Daigle,  \"IAB Architectural and Policy\n        Considerations\
    \ for Open Pluggable Edge Services\", RFC 3238,\n        January 2002.\n   [5]\
    \  Zimmerer, E., Peterson, E., Vemuri, A., Ong, L., Audet, F.,\n        Watson,\
    \ M. and M. Zonoun, \"MIME media types for ISUP and QSIG\n        Objects\", RFC\
    \ 3204, December 2001.\n   [6]  Troost, R., Dorner, S. and K. Moore, Ed., \"Communicating\n\
    \        Presentation Information in Internet Messages: The Content-\n       \
    \ Disposition Header Field\", RFC 2183, August 1997.\n   [7]  Crocker, D. and\
    \ P. Overell, Eds., \"Augmented BNF for Syntax\n        Specifications: ABNF\"\
    , RFC 2234, November 1997.\n   [8]  Moore, K., \"Simple Mail Transfer Protocol\
    \ (SMTP) Service\n        Extension for Delivery Status Notifications (DSNs)\"\
    , RFC 3461,\n        January 2003.\n   [9]  Moore, K. and G. Vaudreuil, \"An Extensible\
    \ Message Format for\n        Delivery Status Notifications\", RFC 3464, January\
    \ 2003.\n   [10] Fajman, R., \"An Extensible Message Format for Message\n    \
    \    Disposition Notifications\", RFC 2298, March 1998.\n   [11] Galvin, J., Murphy,\
    \ S., Crocker, S. and N. Freed, \"Security\n        Multiparts for MIME: Multipart/Signed\
    \ and Multipart/Encrypted\",\n        RFC 1847, October 1995.\n   [12] Freed,\
    \ N., \"Gateways and MIME Security Multiparts\", RFC 2480,\n        January 1999.\n\
    \   [13] Vaudreuil, G., \"Enhanced Mail System Status Codes\", RFC 3463,\n   \
    \     January 2003.\n   [14] Freed, N. and N. Borenstein, \"Multipurpose Internet\
    \ Mail\n        Extensions (MIME) Part One: Format of Internet Message Bodies\"\
    ,\n        RFC 2045, November 1996.\n   [15] Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part Two: Media Types\", RFC 2046,\
    \ November\n        1996.\n   [16] Vaudreuil, G. and G. Parsons, \"Voice Profile\
    \ for Internet Mail -\n        version 2\", RFC 2421, September 1998.\n   [17]\
    \ Kille, S., \"MIXER (Mime Internet X.400 Enhanced Relay): Mapping\n        between\
    \ X.400 and RFC 822/MIME\", RFC 2156, January 1998.\n   [18] Klensin, J., Ed.,\
    \ \"Simple Mail Transfer Protocol\", RFC 2821,\n        April 2001.\n   [19] Crocker,\
    \ D., \"Standard for the Format of ARPA Internet Text\n        Messages\", RFC\
    \ 822, August 1982.\n"
- title: 17.2 Informative Reference
  contents:
  - "17.2 Informative Reference\n   [20] Dawson, F. and T. Howes, \"vCard MIME Directory\
    \ Profile\", RFC\n        2426, September 1998.\n"
- title: 18. Acknowledgments
  contents:
  - "18. Acknowledgments\n   Emily Candell of Comverse Network Systems was instrumental\
    \ in helping\n   work out the base issues in the -00 document in Adelaide.\n \
    \  Ned Freed pointed out that this mechanism was about criticality, not\n   notification.\
    \  That insight made the concept and descriptions\n   infinitely more straightforward.\
    \  If it's still confusing, it's my\n   fault!\n   Ned Freed also was instrumental\
    \ in crafting the sections on\n   multipart/signed and multipart/encrypted.  As\
    \ AD, he provided\n   invaluable commentary to help progress this document.\n\
    \   Keith Moore for helped tighten-up the explanations, and he approved\n   of\
    \ the use of Content-Disposition.\n   Dropping the IMPORTANT critical content\
    \ type took away one of the\n   reasons for partial non-delivery notification.\
    \  That makes Jutta\n   Degener very happy!\n   Harald Alvestrand and Chris Newman\
    \ suggested some implementation\n   examples.\n   Greg White asked THE key question\
    \ that let us realize that critical\n   content processing was a gateway function,\
    \ and not a MTA or UA\n   function.\n   Jon Peterson cleared up how handling actually\
    \ does work in the SIP\n   environment.\n   An enormous thank you to Michelle\
    \ S. Cotton at IANA for helping me\n   craft the original IANA Considerations\
    \ section in 2000, and for\n   catching the functional overlap with RFC 3204 in\
    \ January 2002.\n   Any errors, omissions, or silliness are my fault.\n"
- title: 19. Intellectual Property Rights Notice
  contents:
  - "19. Intellectual Property Rights Notice\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementers or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 20. Author's Address
  contents:
  - "20. Author's Address\n   Eric Burger\n   SnowShore Networks, Inc.\n   285 Billerica\
    \ Rd.\n   Chelmsford, MA  01824-4120\n   USA\n   Phone: +1 978 367 8400\n   Fax:\
    \   +1 603 457 5944\n   EMail: e.burger@ieee.org\n"
- title: 21.  Full Copyright Statement
  contents:
  - "21.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
