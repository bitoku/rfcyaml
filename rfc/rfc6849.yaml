- contents:
  - "         An Extension to the Session Description Protocol (SDP)\n       and Real-time
    Transport Protocol (RTP) for Media Loopback\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The wide deployment of Voice over IP (VoIP), real-time text, and\n
    \  Video over IP services has introduced new challenges in managing and\n   maintaining
    real-time voice/text/video quality, reliability, and\n   overall performance.
    \ In particular, media delivery is an area that\n   needs attention.  One method
    of meeting these challenges is\n   monitoring the media delivery performance by
    looping media back to\n   the transmitter.  This is typically referred to as \"active\n
    \  monitoring\" of services.  Media loopback is especially popular in\n   ensuring
    the quality of transport to the edge of a given VoIP, real-\n   time text, or
    Video over IP service.  Today, in networks that deliver\n   real-time media, short
    of running 'ping' and 'traceroute' to the\n   edge, administrators are left without
    the necessary tools to actively\n   monitor, manage, and diagnose quality issues
    with their service.  The\n   extension defined herein adds new Session Description
    Protocol (SDP)\n   media types and attributes that enable establishment of media\n
    \  sessions where the media is looped back to the transmitter.  Such\n   media
    sessions will serve as monitoring and troubleshooting tools by\n   providing the
    means for measurement of more advanced VoIP, real-time\n   text, and Video over
    IP performance metrics.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6849.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Use Cases Supported ........................................4\n   2.
    Terminology .....................................................6\n   3. Overview
    of Operation ...........................................6\n      3.1. SDP Offerer
    Behavior .......................................6\n      3.2. SDP Answerer Behavior
    ......................................7\n   4. New SDP Attributes ..............................................7\n
    \     4.1. Loopback-Type Attribute ....................................7\n      4.2.
    Loopback-Role Attributes: loopback-source and\n           loopback-mirror ............................................8\n
    \  5. Rules for Generating the SDP Offer/Answer .......................9\n      5.1.
    Generating the SDP Offer for Loopback Session ..............9\n      5.2. Generating
    the SDP Answer for Loopback Session ............10\n      5.3. Offerer Processing
    of the SDP Answer ......................12\n      5.4. Modifying the Session .....................................12\n
    \     5.5. Establishing Sessions between Entities behind NATs ........12\n   6.
    RTP Requirements ...............................................13\n   7. Payload
    Formats for Packet Loopback ............................13\n      7.1. Encapsulated
    Payload Format ...............................14\n      7.2. Direct Loopback RTP
    Payload Format ........................16\n   8. SRTP Behavior ..................................................17\n
    \  9. RTCP Requirements ..............................................18\n   10.
    Congestion Control ............................................18\n   11. Examples
    ......................................................18\n      11.1. Offer for
    Specific Media Loopback Type ...................19\n      11.2. Offer for Choice
    of Media Loopback Type ..................19\n      11.3. Answerer Rejecting Loopback
    Media ........................20\n   12. Security Considerations .......................................21\n
    \  13. Implementation Considerations .................................22\n   14.
    IANA Considerations ...........................................22\n      14.1.
    SDP Attributes ...........................................22\n      14.2. Media
    Types ..............................................23\n   15. Acknowledgements
    ..............................................31\n   16. References ....................................................31\n
    \     16.1. Normative References .....................................31\n      16.2.
    Informative References ...................................32\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The overall quality, reliability, and performance of VoIP,
    real-time\n   text, and Video over IP services rely on the performance and quality\n
    \  of the media path.  In order to assure the quality of the delivered\n   media,
    there is a need to monitor the performance of the media\n   transport.  One method
    of monitoring and managing the overall quality\n   of real-time VoIP, real-time
    text, and Video over IP services is\n   through monitoring the quality of the
    media in an active session.\n   This type of \"active monitoring\" of services
    is a method of\n   proactively managing the performance and quality of VoIP-based\n
    \  services.\n   The goal of active monitoring is to measure the media quality
    of a\n   VoIP, real-time text, or Video over IP session.  A way to achieve\n   this
    goal is to request an endpoint to loop media back to the other\n   endpoint and
    to provide media statistics (e.g., RTP Control Protocol\n   (RTCP) [RFC3550] and
    RTCP Extended Reports (RTCP-XR) [RFC3611]\n   information).  Another method involves
    deployment of special\n   endpoints that always loop incoming media back for all
    sessions.\n   Although the latter method has been used and is functional, it does\n
    \  not scale to support large networks and introduces new network\n   management
    challenges.  Further, it does not offer the granularity of\n   testing a specific
    endpoint that may be exhibiting problems.\n   The extension defined in this document
    introduces new SDP media types\n   and attributes that enable establishment of
    media sessions where the\n   media is looped back to the transmitter.  The SDP
    offer/answer model\n   [RFC3264] is used to establish a loopback connection.  Furthermore,\n
    \  this extension provides guidelines on handling RTP [RFC3550], as well\n   as
    usage of RTCP [RFC3550] and RTCP-XR [RFC3611] for reporting media-\n   related
    measurements.\n"
  - contents:
    - "1.1.  Use Cases Supported\n   As a matter of terminology in this document,
      packets flow from one\n   peer acting as a \"loopback source\", to the other
      peer acting as a\n   \"loopback mirror\", which in turn returns packets to the
      loopback\n   source.  In advance of the session, the peers negotiate to determine\n
      \  which one acts in which role, using the SDP offer/answer exchange.\n   The
      negotiation also includes details such as the type of loopback to\n   be used.\n
      \  This specification supports three use cases: \"encapsulated packet\n   loopback\",
      \"direct loopback\", and \"media loopback\".  These are\n   distinguished by
      the treatment of incoming RTP packets at the\n   loopback mirror.\n"
    - contents:
      - "1.1.1.  Encapsulated Packet Loopback\n   In the encapsulated packet loopback
        case, the entire incoming RTP\n   packet is encapsulated as payload within
        an outer RTP packet that is\n   specific to this use case and specified in
        Section 7.1.  The\n   encapsulated packet is returned to the loopback source.
        \ The loopback\n   source can generate statistics for one-way path performance
        up to the\n   RTP level for each direction of travel by examining sequence
        numbers\n   and timestamps in the encapsulating outer RTP header and the\n
        \  encapsulated RTP packet payload.  The loopback source can also play\n   back
        the returned media content for evaluation.\n   Because the encapsulating RTP
        packet header extends the packet size,\n   it could encounter difficulties
        in an environment where the original\n   RTP packet size is close to the path
        Maximum Transmission Unit (MTU)\n   size.  The encapsulating payload format
        therefore offers the\n   possibility of RTP-level fragmentation of the returned
        packets.  The\n   use of this facility could affect statistics derived for
        the return\n   path.  In addition, the increased bit rate required in the
        return\n   direction may affect these statistics more directly in a restricted-\n
        \  bandwidth situation.\n"
      title: 1.1.1.  Encapsulated Packet Loopback
    - contents:
      - "1.1.2.  Direct Loopback\n   In the direct loopback case, the loopback mirror
        copies the payload\n   of the incoming RTP packet into a new RTP packet, using
        a payload\n   format specific to this use case and specified in Section 7.2.
        \ The\n   loopback mirror returns the new packet to the packet source.  There\n
        \  is no provision in this case for RTP-level fragmentation.\n   This use
        case has the advantage of keeping the packet size the same\n   in both directions.
        \ The packet source can compute only two-way path\n   statistics from the
        direct loopback packet header but can play back\n   the returned media content.\n
        \  It has been suggested that the loopback source, knowing that the\n   incoming
        packet will never be passed to a decoder, can store a\n   timestamp and sequence
        number inside the payload of the packet it\n   sends to the mirror, then extract
        that information from the returned\n   direct loopback packet and compute
        one-way path statistics as in the\n   previous case.  Obviously, playout of
        returned content is no longer\n   possible if this is done.\n"
      title: 1.1.2.  Direct Loopback
    - contents:
      - "1.1.3.  Media Loopback\n   In the media loopback case, the loopback mirror
        submits the incoming\n   packet to a decoder appropriate to the incoming payload
        type.  The\n   packet is taken as close as possible to the analog level, then\n
        \  re-encoded according to an outgoing format determined by SDP\n   negotiation.
        \ The re-encoded content is returned to the loopback\n   source as an RTP
        packet with payload type corresponding to the\n   re-encoding format.\n   This
        usage allows troubleshooting at the codec level.  The capability\n   for path
        statistics is limited to what is available from RTCP\n   reports.\n"
      title: 1.1.3.  Media Loopback
    title: 1.1.  Use Cases Supported
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  SDP: Session Description Protocol, as defined in [RFC4566].  This\n        document
    assumes that the SDP offer/answer model is followed,\n        per [RFC3264], but
    does not assume any specific signaling\n        protocol for carrying the SDP.\n
    \  The following terms are borrowed from [RFC3264] definitions: offer,\n   offerer,
    answer, answerer, and agent.\n"
  title: 2.  Terminology
- contents:
  - "3.  Overview of Operation\n   This document defines two loopback 'types', two
    'roles', and two\n   encoding formats for loopback.  For any given SDP offerer
    or answerer\n   pair, one side is the source of RTP packets, while the other is
    the\n   mirror looping packets/media back.  Those define the two loopback\n   roles.
    \ As the mirror, two 'types' of loopback can be performed:\n   packet-level or
    media-level.  When media-level is used, there is no\n   further choice of encoding
    format -- there is only one format:\n   whatever is indicated for normal media,
    since the \"looping\" is\n   performed at the codec level.  When packet-level
    looping is\n   performed, however, the mirror can either send back RTP in an\n
    \  encapsulated format or direct loopback format.  The rest of this\n   document
    describes these loopback types, roles, and encoding formats,\n   and the SDP offer/answer
    rules for indicating them.\n"
  - contents:
    - "3.1.  SDP Offerer Behavior\n   An SDP offerer compliant to this specification
      and attempting to\n   establish a media session with media loopback will include
      \"loopback\"\n   media attributes for each individual media description in the
      offer\n   message that it wishes to have looped back.  Note that the offerer\n
      \  may choose to only request loopback for some media\n   descriptions/streams
      but not others.  For example, it might wish to\n   request loopback for a video
      stream but not audio, or vice versa.\n   The offerer will look for the \"loopback\"
      media attributes in the\n   media description(s) of the response from the SDP
      answer for\n   confirmation that the request is accepted.\n"
    title: 3.1.  SDP Offerer Behavior
  - contents:
    - "3.2.  SDP Answerer Behavior\n   In order to accept a loopback offer (that is,
      an offer containing\n   \"loopback\" in the media description), an SDP answerer
      includes the\n   \"loopback\" media attribute in each media description for
      which it\n   desires loopback.\n   An answerer can reject an offered stream
      (either with loopback-source\n   or loopback-mirror) if the loopback-type is
      not specified, the\n   specified loopback-type is not supported, or the endpoint
      cannot\n   honor the offer for any other reason.  The loopback request is\n
      \  rejected by setting the stream's media port number to zero in the\n   answer
      as defined in RFC 3264 [RFC3264] or by rejecting the entire\n   offer (i.e.,
      by rejecting the session request entirely).\n   Note that an answerer that is
      not compliant to this specification and\n   that receives an offer with the
      \"loopback\" media attributes would\n   ignore the attributes and treat the
      incoming offer as a normal\n   request.  If the offerer does not wish to establish
      a \"normal\" RTP\n   session, it would need to terminate the session upon receiving
      such\n   an answer.\n"
    title: 3.2.  SDP Answerer Behavior
  title: 3.  Overview of Operation
- contents:
  - "4.  New SDP Attributes\n   Three new SDP media-level attributes are defined:
    one indicates the\n   type of loopback, and the other two define the role of the
    agent.\n"
  - contents:
    - "4.1.  Loopback-Type Attribute\n   This specification defines a new \"loopback\"
      attribute, which\n   indicates that the agent wishes to perform loopback, and
      the type of\n   loopback that the agent is able to do.  The loopback-type is
      a value\n   media attribute [RFC4566] with the following syntax:\n      a=loopback:<loopback-type>\n
      \  Following is the Augmented BNF [RFC5234] for loopback-type:\n   attribute
      \             =/ loopback-attr\n   ; attribute defined in RFC 4566\n   loopback-attr
      \         = \"loopback:\" SP loopback-type\n   loopback-type          = loopback-choice
      [1*SP loopback-choice]\n   loopback-choice        = loopback-type-pkt / loopback-type-media\n
      \  loopback-type-pkt      = \"rtp-pkt-loopback\"\n   loopback-type-media    =
      \"rtp-media-loopback\"\n   The loopback-type is used to indicate the type of
      loopback.  The\n   loopback-type values are rtp-pkt-loopback and rtp-media-loopback.\n
      \  rtp-pkt-loopback: In this mode, the RTP packets are looped back to\n      the
      sender at a point before the encoder/decoder function in the\n      receive
      direction to a point after the encoder/decoder function in\n      the send direction.
      \ This effectively re-encapsulates the RTP\n      payload with the RTP/UDP/IP
      headers appropriate for sending it in\n      the reverse direction.  Any type
      of encoding-related functions,\n      such as packet loss concealment, MUST
      NOT be part of this type of\n      loopback path.  In this mode, the RTP packets
      are looped back with\n      a new payload type and format.  Section 7 describes
      the payload\n      formats that are to be used for this type of loopback.  This
      type\n      of loopback applies to the encapsulated and direct loopback use\n
      \     cases described in Section 1.1.\n   rtp-media-loopback: This loopback
      is activated as close as possible\n      to the analog interface and after the
      decoder so that the RTP\n      packets are subsequently re-encoded prior to
      transmission back to\n      the sender.  This type of loopback applies to the
      media loopback\n      use case described in Section 1.1.3.\n"
    title: 4.1.  Loopback-Type Attribute
  - contents:
    - "4.2.  Loopback-Role Attributes: loopback-source and loopback-mirror\n   The
      loopback role defines two property media attributes [RFC4566]\n   that are used
      to indicate the role of the agent generating the SDP\n   offer or answer.  The
      syntax of the two loopback-role media\n   attributes is as follows:\n      a=loopback-source\n
      \  and\n      a=loopback-mirror\n   Following is the Augmented BNF [RFC5234]
      for loopback-source and\n   loopback-mirror:\n   attribute             =/ loopback-source
      / loopback-mirror\n   ; attribute defined in RFC 4566\n   loopback-source       =
      \"loopback-source\"\n   loopback-mirror       = \"loopback-mirror\"\n   loopback-source:
      This attribute specifies that the entity that\n      generated the SDP is the
      media source and expects the receiver of\n      the SDP message to act as a
      loopback mirror.\n   loopback-mirror: This attribute specifies that the entity
      that\n      generated the SDP will mirror (echo) all received media back to\n
      \     the sender of the RTP stream.  No media is generated locally by\n      the
      looping-back entity for transmission in the mirrored stream.\n   The \"m=\"
      line in the SDP includes all the payload types that will be\n   used during
      the loopback session.  The complete payload space for the\n   session is specified
      in the \"m=\" line, and the rtpmap attribute is\n   used to map from the payload
      type number to an encoding name denoting\n   the payload format to be used.\n"
    title: '4.2.  Loopback-Role Attributes: loopback-source and loopback-mirror'
  title: 4.  New SDP Attributes
- contents:
  - '5.  Rules for Generating the SDP Offer/Answer

    '
  - contents:
    - "5.1.  Generating the SDP Offer for Loopback Session\n   If an offerer wishes
      to make a loopback request, it includes both the\n   loopback-type and loopback-role
      attributes in a valid SDP offer:\n   Example:   m=audio 41352 RTP/AVP 0 8 100\n
      \             a=loopback:rtp-media-loopback\n              a=loopback-source\n
      \             a=rtpmap:0 pcmu/8000\n              a=rtpmap:8 pcma/8000\n              a=rtpmap:100
      G7221/16000/1\n   Since media loopback requires bidirectional RTP, its normal
      direction\n   mode is \"sendrecv\"; the \"sendrecv\" direction attribute MAY
      be encoded\n   in SDP or not, as per Section 5.1 of [RFC3264], since it is implied\n
      \  by default.  If either the loopback source or mirror wishes to\n   disable
      loopback use during a session, the direction mode attribute\n   \"inactive\"
      MUST be used as per [RFC3264].  The direction mode\n   attributes \"recvonly\"
      and \"sendonly\" are incompatible with the\n   loopback mechanism and MUST NOT
      be indicated when generating an SDP\n   offer or answer.  When receiving an
      SDP offer or answer, if\n   \"recvonly\" or \"sendonly\" is indicated for loopback,
      the SDP-receiving\n   agent SHOULD treat it as a protocol failure of the loopback\n
      \  negotiation and terminate the session through its normal means (e.g.,\n   by
      sending a SIP BYE if SIP is used) or reject the offending media\n   stream.\n
      \  The offerer may offer more than one loopback-type in the SDP offer.\n   The
      port number and the address in the offer (m/c= lines) indicate\n   where the
      offerer would like to receive the media stream(s).  The\n   payload type numbers
      indicate the value of the payload the offerer\n   expects to receive.  However,
      the answer might indicate a subset of\n   payload type numbers from those given
      in the offer.  In that case,\n   the offerer MUST only send the payload types
      received in the answer,\n   per normal SDP offer/answer rules.\n   If the offer
      indicates rtp-pkt-loopback support, the offer MUST also\n   contain either an
      encapsulated or direct loopback encoding format\n   encoding name, or both,
      as defined in Sections 7.1 and 7.2 of this\n   document.  If the offer only
      indicates rtp-media-loopback support,\n   then neither encapsulated nor direct
      loopback encoding formats apply\n   and they MUST NOT be in the offer.\n   If
      loopback-type is rtp-pkt-loopback, the loopback mirror MUST send,\n   and the
      loopback source MUST receive, the looped-back packets encoded\n   in one of
      the two payload formats (encapsulated RTP or direct\n   loopback) as defined
      in Section 7.\n   Example:   m=audio 41352 RTP/AVP 0 8 112\n              a=loopback:rtp-pkt-loopback\n
      \             a=loopback-source\n              a=rtpmap:112 encaprtp/8000\n
      \  Example:   m=audio 41352 RTP/AVP 0 8 112\n              a=loopback:rtp-pkt-loopback\n
      \             a=loopback-source\n              a=rtpmap:112 rtploopback/8000\n"
    title: 5.1.  Generating the SDP Offer for Loopback Session
  - contents:
    - "5.2.  Generating the SDP Answer for Loopback Session\n   As with the offer,
      an SDP answer for loopback follows SDP\n   offer/answer rules for the direction
      attribute, but directions of\n   \"sendonly\" or \"recvonly\" do not apply for
      loopback operation.\n   The port number and the address in the answer (m/c=
      lines) indicate\n   where the answerer would like to receive the media stream.
      \ The\n   payload type numbers indicate the value of the payload types the\n
      \  answerer expects to send and receive.\n   An answerer includes both the loopback-role
      and loopback-type\n   attributes in the answer to indicate that it will accept
      the loopback\n   request.  When a stream is offered with the loopback-source\n
      \  attribute, the corresponding stream in the response will be\n   loopback-mirror
      and vice versa, provided the answerer is capable of\n   supporting the requested
      loopback-type.\n   For example, if the offer contains the loopback-source attribute:\n
      \     m=audio 41352 RTP/AVP 0 8\n      a=loopback:rtp-media-loopback\n      a=loopback-source\n
      \  The answer that is capable of supporting the offer must contain the\n   loopback-mirror
      attribute:\n      m=audio 12345 RTP/AVP 0 8\n      a=loopback:rtp-media-loopback\n
      \     a=loopback-mirror\n   If a stream is offered with multiple loopback-type
      attributes, the\n   answer MUST include only one of the loopback types that
      are accepted\n   by the answerer.  The answerer SHOULD give preference to the
      first\n   loopback-type in the SDP offer.\n   For example, if the offer contains:\n
      \     m=audio 41352 RTP/AVP 0 8 112\n      a=loopback:rtp-media-loopback rtp-pkt-loopback\n
      \     a=loopback-source\n      a=rtpmap:112 encaprtp/8000\n   The answer that
      is capable of supporting the offer and chooses to\n   loopback the media using
      the rtp-media-loopback type must contain:\n      m=audio 12345 RTP/AVP 0 8\n
      \     a=loopback:rtp-media-loopback\n      a=loopback-mirror\n   As specified
      in Section 7, if the loopback-type is rtp-pkt-loopback,\n   either the encapsulated
      RTP payload format or direct loopback RTP\n   payload format MUST be used for
      looped-back packets.\n   For example, if the offer contains:\n      m=audio
      41352 RTP/AVP 0 8 112 113\n      a=loopback:rtp-pkt-loopback\n      a=loopback-source\n
      \     a=rtpmap:112 encaprtp/8000\n      a=rtpmap:113 rtploopback/8000\n   The
      answer that is capable of supporting the offer must contain one\n   of the following:\n
      \     m=audio 12345 RTP/AVP 0 8 112\n      a=loopback:rtp-pkt-loopback\n      a=loopback-mirror\n
      \     a=rtpmap:112 encaprtp/8000\n      m=audio 12345 RTP/AVP 0 8 113\n      a=loopback:rtp-pkt-loopback\n
      \     a=loopback-mirror\n      a=rtpmap:113 rtploopback/8000\n   The previous
      examples used the 'encaprtp' and 'rtploopback' encoding\n   names, which will
      be defined in Sections 7.1.3 and 7.2.3.\n"
    title: 5.2.  Generating the SDP Answer for Loopback Session
  - contents:
    - "5.3.  Offerer Processing of the SDP Answer\n   If the received SDP answer does
      not contain an a=loopback-mirror or\n   a=loopback-source attribute, it is assumed
      that the loopback\n   extensions are not supported by the remote agent.  This
      is not a\n   protocol failure and instead merely completes the SDP offer/answer\n
      \  exchange with whatever normal rules apply; the offerer MAY decide to\n   end
      the established RTP session (if any) through normal means of the\n   upper-layer
      signaling protocol (e.g., by sending a SIP BYE).\n"
    title: 5.3.  Offerer Processing of the SDP Answer
  - contents:
    - "5.4.  Modifying the Session\n   At any point during the loopback session, either
      participant MAY\n   issue a new offer to modify the characteristics of the previous\n
      \  session, as defined in Section 8 of RFC 3264 [RFC3264].  This also\n   includes
      transitioning from a normal media processing mode to\n   loopback mode, and
      vice versa.\n"
    title: 5.4.  Modifying the Session
  - contents:
    - "5.5.  Establishing Sessions between Entities behind NATs\n   Interactive Connectivity
      Establishment (ICE) [RFC5245], Traversal\n   Using Relays around NAT (TURN)
      [RFC5766], and Session Traversal\n   Utilities for NAT (STUN) [RFC5389] provide
      a general solution to\n   establishing media sessions between entities that
      are behind Network\n   Address Translators (NATs).  Loopback sessions that involve
      one or\n   more endpoints behind NATs can also use these general solutions\n
      \  wherever possible.\n   If ICE is not supported, then in the case of loopback,
      the mirroring\n   entity will not send RTP packets and therefore will not automatically\n
      \  create the NAT pinhole in the way that other SIP sessions do.\n   Therefore,
      if the mirroring entity is behind a NAT, it MUST send some\n   packets to the
      identified address/port(s) of the peer, in order to\n   open the NAT pinhole.
      \ Using ICE, this would be accomplished with the\n   STUN connectivity check
      process or through a TURN server connection.\n   If ICE is not supported, either
      [RFC6263] or Section 10 of ICE\n   [RFC5245] can be followed to open the pinhole
      and keep the NAT\n   binding alive/refreshed.\n   Note that for any form of
      NAT traversal to function, symmetric\n   RTP/RTCP [RFC4961] MUST be used, unless
      the mirror can control the\n   NAT(s) in its path to create explicit pinholes.
      \ In other words, both\n   agents MUST send packets from the source address
      and port they\n   receive packets on, unless some mechanism is used to avoid
      that need\n   (e.g., by using the Port Control Protocol).\n"
    title: 5.5.  Establishing Sessions between Entities behind NATs
  title: 5.  Rules for Generating the SDP Offer/Answer
- contents:
  - "6.  RTP Requirements\n   A loopback source MUST NOT send multiple source streams
    on the same\n   5-tuple, since there is no means for the mirror to indicate which
    is\n   which in its mirrored RTP packets.\n   A loopback mirror that is compliant
    to this specification and accepts\n   media with the loopback type rtp-pkt-loopback
    loops back the incoming\n   RTP packets using either the encapsulated RTP payload
    format or the\n   direct loopback RTP payload format as defined in Section 7 of
    this\n   specification.\n   A device that is compliant to this specification and
    performing the\n   mirroring using the loopback type rtp-media-loopback MUST transmit\n
    \  all received media back to the sender, unless congestion feedback or\n   other
    lower-layer constraints prevent it from doing so.  The incoming\n   media is treated
    as if it were to be played; for example, the media\n   stream may receive treatment
    from Packet Loss Concealment (PLC)\n   algorithms.  The mirroring entity re-generates
    all the RTP header\n   fields as it would when transmitting media.  The mirroring
    entity MAY\n   choose to encode the loopback media according to any of the media\n
    \  descriptions supported by the offering entity.  Furthermore, in cases\n   where
    the same media type is looped back, the mirroring entity can\n   choose to preserve
    the number of frames/packets and the bit rate of\n   the encoded media according
    to the received media.\n"
  title: 6.  RTP Requirements
- contents:
  - "7.  Payload Formats for Packet Loopback\n   The payload formats described in
    this section MUST be used by a\n   loopback mirror when 'rtp-pkt-loopback' is
    the specified\n   loopback-type.  Two different formats are specified here --
    an\n   encapsulated RTP payload format and a direct loopback RTP payload\n   format.
    \ The encapsulated RTP payload format should be used when the\n   incoming RTP
    header information needs to be preserved during the\n   loopback operation.  This
    is useful in cases where the loopback\n   source needs to measure performance
    metrics in both directions.\n   However, this comes at the expense of increased
    packet size as\n   described in Section 7.1.  The direct loopback RTP payload
    format\n   should be used when bandwidth requirements prevent the use of the\n
    \  encapsulated RTP payload format.\n"
  - contents:
    - "7.1.  Encapsulated Payload Format\n   A received RTP packet is encapsulated
      in the payload section of the\n   RTP packet generated by a loopback mirror.
      \ Each received packet is\n   encapsulated in a separate encapsulating RTP packet;
      the encapsulated\n   packet would be fragmented only if required (for example,
      due to MTU\n   limitations).\n"
    - contents:
      - "7.1.1.  Usage of RTP Header Fields\n   Payload Type (PT): The assignment
        of an RTP payload type for this\n      packet format is outside the scope
        of this document; it is either\n      specified by the RTP profile under which
        this payload format is\n      used or more likely signaled dynamically out-of-band
        (e.g., using\n      SDP; Section 7.1.3 defines the name binding).\n   Marker
        (M) bit: If the received RTP packet is looped back in multiple\n      encapsulating
        RTP packets, the M bit is set to 1 in every fragment\n      except the last
        packet; otherwise, it is set to 0.\n   Extension (X) bit: This bit is defined
        by the RTP profile used.\n   Sequence Number: The RTP sequence number SHOULD
        be generated by the\n      loopback mirror in the usual manner with a constant
        random offset\n      as described in RFC 3550 [RFC3550].\n   Timestamp: The
        RTP timestamp denotes the sampling instant for when\n      the loopback mirror
        is transmitting this packet to the loopback\n      source.  The RTP timestamp
        MUST use the same clock rate as that of\n      the encapsulated packet.  The
        initial value of the timestamp\n      SHOULD be random for security reasons
        (see Section 5.1 of RFC 3550\n      [RFC3550]).\n   Synchronization source
        (SSRC): This field is set as described in\n      RFC 3550 [RFC3550].\n   The
        CSRC count (CC) and contributing source (CSRC) fields are used as\n   described
        in RFC 3550 [RFC3550].\n"
      title: 7.1.1.  Usage of RTP Header Fields
    - contents:
      - "7.1.2.  RTP Payload Structure\n   The outer RTP header of the encapsulating
        packet is followed by the\n   payload header defined in this section, after
        any header\n   extension(s).  If the received RTP packet has to be looped
        back in\n   multiple encapsulating packets due to fragmentation, the\n   encapsulating
        RTP header in each packet is followed by the payload\n   header defined in
        this section.  The header is devised so that the\n   loopback source can decode
        looped-back packets in the presence of\n   moderate packet loss [RFC3550].
        \ The RTP payload of the encapsulating\n   RTP packet starts with the payload
        header defined in this section.\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                         receive timestamp                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | F | R |  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                           transmit timestamp                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |           synchronization source (SSRC) identifier            |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
        \  |            contributing source (CSRC) identifiers             |\n   |
        \                            ....                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           Figure 1.  Encapsulating RTP Packet Payload Header\n   The 12
        octets after the receive timestamp are identical to the\n   encapsulated RTP
        header of the received packet except for the first 2\n   bits of the first
        octet.  In effect, the received RTP packet is\n   encapsulated by creating
        a new outer RTP header followed by 4 new\n   bytes of a receive timestamp,
        followed by the original received RTP\n   header and payload, except that
        the first two bits of the received\n   RTP header are overwritten as defined
        here.\n   Receive timestamp: 32 bits\n   The receive timestamp denotes the
        sampling instant for when the last\n   octet of the received media packet
        that is being encapsulated by the\n   loopback mirror is received from the
        loopback source.  The same clock\n   rate MUST be used by the loopback source.
        \ The initial value of the\n   timestamp SHOULD be random for security reasons
        (see Section 5.1 of\n   RFC 3550 [RFC3550]).\n   Fragmentation (F): 2 bits\n
        \  Possible values are First Fragment (00), Last Fragment (01),\n   No Fragmentation
        (10), or Intermediate Fragment (11).  This field\n   identifies how much of
        the received packet is encapsulated in this\n   packet by the loopback mirror.
        \ If the received packet is not\n   fragmented, this field is set to 10; otherwise,
        the packet that\n   contains the first fragments sets this field to 00.  The
        packet that\n   contains the last fragment sets this field to 01, and all
        other\n   packets set this field to 11.\n"
      title: 7.1.2.  RTP Payload Structure
    - contents:
      - "7.1.3.  Usage of SDP\n   The payload type number for the encapsulated stream
        can be negotiated\n   using SDP.  There is no static payload type assignment
        for the\n   encapsulating stream, so dynamic payload type numbers MUST be
        used.\n   The binding to the name is indicated by an rtpmap attribute.  The\n
        \  name used in this binding is \"encaprtp\".\n   The following is an example
        SDP fragment for encapsulated RTP.\n   m=audio 41352 RTP/AVP 112\n   a=rtpmap:112
        encaprtp/8000\n"
      title: 7.1.3.  Usage of SDP
    title: 7.1.  Encapsulated Payload Format
  - contents:
    - "7.2.  Direct Loopback RTP Payload Format\n   The direct loopback RTP payload
      format can be used in scenarios where\n   the 16-byte overhead of the encapsulated
      payload format is of\n   concern, or simply due to local policy.  When using
      this payload\n   format, the receiver loops back each received RTP packet payload
      (not\n   header) in a separate RTP packet.\n   Because a direct loopback format
      does not retain the original RTP\n   headers, there will be no indication of
      the original payload-type\n   sent to the mirror, in looped-back packets.  Therefore,
      the loopback\n   source SHOULD only send one payload type per loopback RTP session
      if\n   direct mode is used.\n"
    - contents:
      - "7.2.1.  Usage of RTP Header Fields\n   Payload Type (PT): The assignment
        of an RTP payload type for the\n      encapsulating packet format is outside
        the scope of this document;\n      it is either specified by the RTP profile
        under which this payload\n      format is used or more likely signaled dynamically
        out-of-band\n      (e.g., using SDP; Section 7.2.3 defines the name binding).\n
        \  Marker (M) bit: This bit is set to the value in the received packet.\n
        \  Extension (X) bit: This bit is defined by the RTP profile used.\n   Sequence
        Number: The RTP sequence number SHOULD be generated by the\n      loopback
        mirror in the usual manner with a constant random offset,\n      as per [RFC3550].\n
        \  Timestamp: The RTP timestamp denotes the sampling instant for when\n      the
        loopback mirror is transmitting this packet to the loopback\n      source.
        \ The same clock rate MUST be used as that of the received\n      RTP packet.
        \ The initial value of the timestamp SHOULD be random\n      for security
        reasons (see Section 5.1 of RFC 3550 [RFC3550]).\n   SSRC: This field is set
        as described in RFC 3550 [RFC3550].\n   The CC and CSRC fields are used as
        described in RFC 3550 [RFC3550].\n"
      title: 7.2.1.  Usage of RTP Header Fields
    - contents:
      - "7.2.2.  RTP Payload Structure\n   This payload format does not define any
        payload-specific headers.\n   The loopback mirror simply copies the RTP payload
        data from the\n   payload portion of the RTP packet received from the loopback
        source.\n"
      title: 7.2.2.  RTP Payload Structure
    - contents:
      - "7.2.3.  Usage of SDP\n   The payload type number for the payload loopback
        stream can be\n   negotiated using a mechanism like SDP.  There is no static
        payload\n   type assignment for the stream, so dynamic payload type numbers
        MUST\n   be used.  The binding to the name is indicated by an rtpmap\n   attribute.
        \ The name used in this binding is \"rtploopback\".\n   The following is an
        example SDP fragment for the direct loopback RTP\n   format.\n   m=audio 41352
        RTP/AVP 112\n   a=rtpmap:112 rtploopback/8000\n"
      title: 7.2.3.  Usage of SDP
    title: 7.2.  Direct Loopback RTP Payload Format
  title: 7.  Payload Formats for Packet Loopback
- contents:
  - "8.  SRTP Behavior\n   Secure RTP (SRTP) [RFC3711] MAY be used for loopback sessions.
    \ SRTP\n   operates at a lower logical layer than RTP, and thus if both sides\n
    \  negotiate to use SRTP, each side uses its own key and performs\n   encryption/decryption,
    authentication, etc.  Therefore, the loopback\n   function on the mirror occurs
    after the SRTP packet has been\n   decrypted and authenticated, as a normal cleartext
    RTP packet without\n   a Master Key Identifier (MKI) or authentication tag; once
    the\n   cleartext RTP packet or payload is mirrored -- either at the media-\n
    \  layer, direct packet-layer, or encapsulated packet-layer -- it is\n   encrypted
    by the mirror using its own key.\n   In order to provide the same level of protection
    to both forward and\n   reverse media flows (media to and from the mirror), if
    SRTP is used\n   it MUST be used in both directions with the same properties.\n"
  title: 8.  SRTP Behavior
- contents:
  - "9.  RTCP Requirements\n   The use of the loopback attribute is intended for the
    monitoring of\n   media quality of the session.  Consequently, the media performance\n
    \  information should be exchanged between the offering and the\n   answering
    entities.  An offering or answering agent that is compliant\n   to this specification
    SHOULD support RTCP per [RFC3550] and RTCP-XR\n   per RFC 3611 [RFC3611].  Furthermore,
    if the offerer or answerer\n   chooses to support RTCP-XR, they SHOULD support
    the RTCP-XR Loss Run\n   Length Encoding (RLE) Report Block, Duplicate RLE Report
    Block,\n   Statistics Summary Report Block, and VoIP Metrics Report Block per\n
    \  Sections 4.1, 4.2, 4.6, and 4.7 of RFC 3611 [RFC3611].  The offerer\n   and
    the answerer MAY support other RTCP-XR reporting blocks as\n   defined by RFC
    3611 [RFC3611].\n"
  title: 9.  RTCP Requirements
- contents:
  - "10.  Congestion Control\n   All the participants in a media-level loopback session
    SHOULD\n   implement congestion control mechanisms as defined by the RTP profile\n
    \  under which the loopback mechanism is implemented.  For audio/video\n   profiles,
    implementations SHOULD conform to the mechanism defined in\n   Section 2 of RFC
    3551 [RFC3551].\n   For packet-level loopback types, the loopback source SHOULD
    implement\n   congestion control.  The mirror will simply reflect back the RTP\n
    \  packets it receives (either in encapsulated or direct modes);\n   therefore,
    the source needs to control the congestion of both forward\n   and reverse paths
    by reducing its sending rate to the mirror.  This\n   keeps the loopback mirror
    implementation simpler and provides more\n   flexibility for the source performing
    a loopback test.\n"
  title: 10.  Congestion Control
- contents:
  - "11.  Examples\n   This section provides examples for media descriptions using
    SDP for\n   different scenarios.  The examples are given for SIP-based\n   transactions;
    for convenience, they are abbreviated and do not show\n   the complete signaling.\n"
  - contents:
    - "11.1.  Offer for Specific Media Loopback Type\n   An agent sends an SDP offer
      that looks like:\n   v=0\n   o=alice 2890844526 2890842807 IN IP4 host.atlanta.example.com\n
      \  s=-\n   c=IN IP4 host.atlanta.example.com\n   t=0 0\n   m=audio 49170 RTP/AVP
      0\n   a=loopback:rtp-media-loopback\n   a=loopback-source\n   a=rtpmap:0 pcmu/8000\n
      \  The agent is offering to source the media and expects the answering\n   agent
      to mirror the RTP stream per the loopback type\n   rtp-media-loopback.\n   An
      answering agent sends an SDP answer that looks like:\n   v=0\n   o=bob 1234567890
      1122334455 IN IP4 host.biloxi.example.com\n   s=-\n   c=IN IP4 host.biloxi.example.com\n
      \  t=0 0\n   m=audio 49270 RTP/AVP 0\n   a=loopback:rtp-media-loopback\n   a=loopback-mirror\n
      \  a=rtpmap:0 pcmu/8000\n   The answerer agrees to mirror the media from the
      offerer at the media\n   level.\n"
    title: 11.1.  Offer for Specific Media Loopback Type
  - contents:
    - "11.2.  Offer for Choice of Media Loopback Type\n   An agent sends an SDP offer
      that looks like:\n   v=0\n   o=alice 2890844526 2890842807 IN IP4 host.atlanta.example.com\n
      \  s=-\n   c=IN IP4 host.atlanta.example.com\n   t=0 0\n   m=audio 49170 RTP/AVP
      0 112 113\n   a=loopback:rtp-media-loopback rtp-pkt-loopback\n   a=loopback-source\n
      \  a=rtpmap:0 pcmu/8000\n   a=rtpmap:112 encaprtp/8000\n   a=rtpmap:113 rtploopback/8000\n
      \  The offerer is offering to source the media and expects the answerer\n   to
      mirror the RTP stream at either the media or RTP level.\n   An answering agent
      sends an SDP answer that looks like:\n   v=0\n   o=bob 1234567890 1122334455
      IN IP4 host.biloxi.example.com\n   s=-\n   c=IN IP4 host.biloxi.example.com\n
      \  t=0 0\n   m=audio 49270 RTP/AVP 0 112\n   a=loopback:rtp-pkt-loopback\n   a=loopback-mirror\n
      \  a=rtpmap:0 pcmu/8000\n   a=rtpmap:112 encaprtp/8000\n   The answerer agrees
      to mirror the media from the offerer at the\n   packet level using the encapsulated
      RTP payload format.\n"
    title: 11.2.  Offer for Choice of Media Loopback Type
  - contents:
    - "11.3.  Answerer Rejecting Loopback Media\n   An agent sends an SDP offer that
      looks like:\n   v=0\n   o=alice 2890844526 2890842807 IN IP4 host.atlanta.example.com\n
      \  s=-\n   c=IN IP4 host.atlanta.example.com\n   t=0 0\n   m=audio 49170 RTP/AVP
      0\n   a=loopback:rtp-media-loopback\n   a=loopback-source\n   a=rtpmap:0 pcmu/8000\n
      \  The offerer is offering to source the media and expects the answerer\n   to
      mirror the RTP stream at the media level.\n   An answering agent sends an SDP
      answer that looks like:\n   v=0\n   o=bob 1234567890 1122334455 IN IP4 host.biloxi.example.com\n
      \  s=-\n   c=IN IP4 host.biloxi.example.com\n   t=0 0\n   m=audio 0 RTP/AVP
      0\n   a=rtpmap:0 pcmu/8000\n   Note in this case that the answerer did not indicate
      loopback\n   support, although it could have and still used a port number of
      0 to\n   indicate that it does not wish to accept that media session.\n   Alternatively,
      the answering agent could have simply rejected the\n   entire SDP offer through
      some higher-layer signaling protocol means\n   (e.g., by rejecting the SIP INVITE
      request if the SDP offer was in\n   the INVITE).\n"
    title: 11.3.  Answerer Rejecting Loopback Media
  title: 11.  Examples
- contents:
  - "12.  Security Considerations\n   The security considerations of [RFC3264] and
    [RFC3550] apply.\n   Given that media loopback may be automated without the end
    user's\n   knowledge, the answerer of the media loopback should be aware of\n
    \  denial-of-service attacks.  It is RECOMMENDED that session requests\n   for
    media loopback be authenticated and the frequency of such\n   sessions limited
    by the answerer.\n   If the higher-layer signaling protocol were not authenticated,
    a\n   malicious attacker could create a session between two parties the\n   attacker
    wishes to target, with each party acting as the loopback\n   mirror to the other,
    of the rtp-pkt-loopback type.  A few RTP packets\n   sent to either party would
    then infinitely loop among the two, as\n   fast as they could process them, consuming
    their resources and\n   network bandwidth.\n   Furthermore, media loopback provides
    a means of attack indirection,\n   whereby a malicious attacker creates a loopback
    session as the\n   loopback source and uses the mirror to reflect the attacker's
    packets\n   against a target -- perhaps a target the attacker could not reach\n
    \  directly, such as one behind a firewall, for example.  Or, the\n   attacker
    could initiate the session as the loopback mirror, in the\n   hopes of making
    the peer generate media against another target.\n   If end-user devices such as
    mobile phones answer loopback requests\n   without authentication and without
    notifying the end user, then an\n   attacker could cause the battery to drain,
    and possibly deny the end\n   user normal phone service or cause network data
    usage fees.  This\n   could even occur naturally if a legitimate loopback session
    does not\n   terminate properly and the end device does not have a timeout\n   mechanism
    for such.\n   For the reasons noted above, end-user devices SHOULD provide a means\n
    \  of indicating to the human user that the device is in a loopback\n   session,
    even if it is an authenticated session.  Devices that answer\n   or generate loopback
    sessions SHOULD either perform keepalive/refresh\n   tests of the session state
    through some means or time out the session\n   automatically.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Implementation Considerations\n   The media loopback approach described
    in this document is a complete\n   solution that would work under all scenarios.
    \ However, it is\n   possible that the solution may not be lightweight enough
    for some\n   implementations.  In light of this concern, this section clarifies\n
    \  which features of the loopback proposal MUST be implemented for all\n   implementations
    and which features MAY be deferred if the complete\n   solution is not desired.\n
    \  All implementations MUST at least support the rtp-pkt-loopback mode\n   for
    loopback-type, with direct media loopback payload encoding.  In\n   addition,
    for the loopback role, all implementations of an SDP\n   offerer MUST at least
    be able to act as a loopback source.  These\n   requirements are intended to provide
    a minimal level of\n   interoperability between different implementations.\n"
  title: 13.  Implementation Considerations
- contents:
  - '14.  IANA Considerations

    '
  - contents:
    - "14.1.  SDP Attributes\n   This document defines three new media-level SDP attributes.
      \ IANA has\n   registered the following attributes.\n      Contact name:             Kaynam
      Hedayat\n      Email address:            kh274@cornell.edu\n      Telephone
      number:         +1-617-899-3279\n      Attribute name:           loopback\n
      \     Type of attribute:        Media level.\n      Subject to charset:       No.\n
      \     Purpose of attribute:     The 'loopback' attribute is used to\n                                indicate
      the type of media loopback.\n      Allowed attribute values: The parameters
      for 'loopback' may be\n                                one or more of \"rtp-pkt-loopback\"
      and\n                                \"rtp-media-loopback\".  See Section 4\n
      \                               of RFC 6849 for syntax.\n      Contact name:
      \            Kaynam Hedayat\n      Email address:            kh274@cornell.edu\n
      \     Telephone number:         +1-617-899-3279\n      Attribute name:           loopback-source\n
      \     Type of attribute:        Media level.\n      Subject to charset:       No.\n
      \     Purpose of attribute:     The 'loopback-source' attribute\n                                specifies
      that the sender is the media\n                                source and expects
      the receiver to act\n                                as a loopback mirror.\n
      \     Allowed attribute values: N/A\n      Contact name:             Kaynam
      Hedayat\n      Email address:            kh274@cornell.edu\n      Telephone
      number:         +1-617-899-3279\n      Attribute name:           loopback-mirror\n
      \     Type of attribute:        Media level.\n      Subject to charset:       No.\n
      \     Purpose of attribute:     The 'loopback-mirror' attribute\n                                specifies
      that the receiver will\n                                mirror (echo) all received
      media back\n                                to the sender of the RTP stream.\n
      \     Allowed attribute values: N/A\n"
    title: 14.1.  SDP Attributes
  - contents:
    - "14.2.  Media Types\n   The IANA has registered the following media types.\n"
    - contents:
      - "14.2.1.  audio/encaprtp\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type audio/encaprtp\n   Type name: audio\n   Subtype name: encaprtp\n
        \  Required parameters:\n      rate: RTP timestamp clock rate, which is equal
        to the sampling\n      rate.  This is specified by the loopback source and
        reflected by\n      the mirror.\n   Optional parameters: N/A\n   Encoding
        considerations: This media type is framed.\n   Security considerations: See
        Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      VoIP service.\n   Additional information: N/A\n   Contact:
        the authors of RFC 6849.\n   Intended usage: LIMITED USE\n   Restrictions
        on usage: This media type depends on RTP framing and\n      hence is only
        defined for transfer via RTP.  Transfer within other\n      framing protocols
        is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change controller:
        IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.1.  audio/encaprtp
    - contents:
      - "14.2.2.  video/encaprtp\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type video/encaprtp\n   Type name: video\n   Subtype name: encaprtp\n
        \  Required parameters:\n      rate: RTP timestamp clock rate, which is equal
        to the sampling\n      rate.  This is specified by the loopback source and
        reflected by\n      the mirror.\n   Optional parameters: N/A\n   Encoding
        considerations: This media type is framed.\n   Security considerations: See
        Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      Video Over IP service.\n   Additional information: N/A\n
        \  Contact: the authors of RFC 6849.\n   Intended usage: LIMITED USE\n   Restrictions
        on usage: This media type depends on RTP framing and\n      hence is only
        defined for transfer via RTP.  Transfer within other\n      framing protocols
        is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change controller:
        IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.2.  video/encaprtp
    - contents:
      - "14.2.3.  text/encaprtp\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type text/encaprtp\n   Type name: text\n   Subtype name: encaprtp\n
        \  Required parameters:\n      rate: RTP timestamp clock rate, which is equal
        to the sampling\n      rate.  This is specified by the loopback source and
        reflected by\n      the mirror.\n   Optional parameters: N/A\n   Encoding
        considerations: This media type is framed.\n   Security considerations: See
        Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      real-time text service.\n   Additional information: N/A\n
        \  Contact: the authors of RFC 6849.\n   Intended usage: LIMITED USE\n   Restrictions
        on usage: This media type depends on RTP framing and\n      hence is only
        defined for transfer via RTP.  Transfer within other\n      framing protocols
        is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change controller:
        IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.3.  text/encaprtp
    - contents:
      - "14.2.4.  application/encaprtp\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type application/encaprtp\n   Type name: application\n   Subtype
        name: encaprtp\n   Required parameters:\n      rate: RTP timestamp clock rate,
        which is equal to the sampling\n      rate.  This is specified by the loopback
        source and reflected by\n      the mirror.\n   Optional parameters: N/A\n
        \  Encoding considerations: This media type is framed.\n   Security considerations:
        See Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      real-time application service.\n   Additional information:
        N/A\n   Contact: the authors of RFC 6849.\n   Intended usage: LIMITED USE\n
        \  Restrictions on usage: This media type depends on RTP framing and\n      hence
        is only defined for transfer via RTP.  Transfer within other\n      framing
        protocols is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change
        controller: IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.4.  application/encaprtp
    - contents:
      - "14.2.5.  audio/rtploopback\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type audio/rtploopback\n   Type name: audio\n   Subtype name: rtploopback\n
        \  Required parameters:\n      rate: RTP timestamp clock rate, which is equal
        to the sampling\n      rate.  This is specified by the loopback source and
        reflected by\n      the mirror.\n   Optional parameters: N/A\n   Encoding
        considerations: This media type is framed.\n   Security considerations: See
        Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      VoIP service.\n   Additional information: N/A\n   Contact:
        the authors of RFC 6849.\n   Intended usage: LIMITED USE\n   Restrictions
        on usage: This media type depends on RTP framing and\n      hence is only
        defined for transfer via RTP.  Transfer within other\n      framing protocols
        is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change controller:
        IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.5.  audio/rtploopback
    - contents:
      - "14.2.6.  video/rtploopback\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type video/rtploopback\n   Type name: video\n   Subtype name: rtploopback\n
        \  Required parameters:\n      rate: RTP timestamp clock rate, which is equal
        to the sampling\n      rate.  This is specified by the loopback source and
        reflected by\n      the mirror.\n   Optional parameters: N/A\n   Encoding
        considerations: This media type is framed.\n   Security considerations: See
        Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      Video Over IP service.\n   Additional information: N/A\n
        \  Contact: the authors of RFC 6849.\n   Intended usage: LIMITED USE\n   Restrictions
        on usage: This media type depends on RTP framing and\n      hence is only
        defined for transfer via RTP.  Transfer within other\n      framing protocols
        is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change controller:
        IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.6.  video/rtploopback
    - contents:
      - "14.2.7.  text/rtploopback\n   To: ietf-types@iana.org\n   Subject: Registration
        of media type text/rtploopback\n   Type name: text\n   Subtype name: rtploopback\n
        \  Required parameters:\n      rate: RTP timestamp clock rate, which is equal
        to the sampling\n      rate.  This is specified by the loopback source and
        reflected by\n      the mirror.\n   Optional parameters: N/A\n   Encoding
        considerations: This media type is framed.\n   Security considerations: See
        Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      real-time text service.\n   Additional information: N/A\n
        \  Contact: the authors of RFC 6849.\n   Intended usage: LIMITED USE\n   Restrictions
        on usage: This media type depends on RTP framing and\n      hence is only
        defined for transfer via RTP.  Transfer within other\n      framing protocols
        is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change controller:
        IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.7.  text/rtploopback
    - contents:
      - "14.2.8.  application/rtploopback\n   To: ietf-types@iana.org\n   Subject:
        Registration of media type application/rtploopback\n   Type name: application\n
        \  Subtype name: rtploopback\n   Required parameters:\n      rate: RTP timestamp
        clock rate, which is equal to the sampling\n      rate.  This is specified
        by the loopback source and reflected by\n      the mirror.\n   Optional parameters:
        N/A\n   Encoding considerations: This media type is framed.\n   Security considerations:
        See Section 12 of RFC 6849.\n   Interoperability considerations: N/A\n   Published
        specification: RFC 6849.\n   Applications that use this media type: Applications
        wishing to\n      monitor and ensure the quality of transport to the edge
        of a given\n      real-time application service.\n   Additional information:
        N/A\n   Contact: the authors of RFC 6849.\n   Intended usage: LIMITED USE\n
        \  Restrictions on usage: This media type depends on RTP framing and\n      hence
        is only defined for transfer via RTP.  Transfer within other\n      framing
        protocols is not defined at this time.\n   Author: Kaynam Hedayat.\n   Change
        controller: IETF PAYLOAD working group delegated from\n      the IESG.\n"
      title: 14.2.8.  application/rtploopback
    title: 14.2.  Media Types
  title: 14.  IANA Considerations
- contents:
  - "15.  Acknowledgements\n   This document's editor would like to thank the original
    authors of\n   the document: Kaynam Hedayat, Nagarjuna Venna, Paul E. Jones, Arjun\n
    \  Roychowdhury, Chelliah SivaChelvan, and Nathan Stratton.  The editor\n   has
    made fairly insignificant changes in the end.  Also, we'd like to\n   thank Magnus
    Westerlund, Miguel Garcia, Muthu Arul Mozhi Perumal,\n   Jeff Bernstein, Paul
    Kyzivat, Dave Oran, Flemming Andreasen, Gunnar\n   Hellstrom, Emil Ivov, and Dan
    Wing for their feedback, comments, and\n   suggestions.\n"
  title: 15.  Acknowledgements
- contents:
  - '16.  References

    '
  - contents:
    - "16.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC3264]   Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
      Model\n               with Session Description Protocol (SDP)\", RFC 3264,\n
      \              June 2002.\n   [RFC3550]   Schulzrinne, H., Casner, S., Frederick,
      R., and V.\n               Jacobson, \"RTP: A Transport Protocol for Real-Time\n
      \              Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3551]   Schulzrinne,
      H. and S. Casner, \"RTP Profile for Audio and\n               Video Conferences
      with Minimal Control\", STD 65,\n               RFC 3551, July 2003.\n   [RFC3611]
      \  Friedman, T., Ed., Caceres, R., Ed., and A. Clark, Ed.,\n               \"RTP
      Control Protocol Extended Reports (RTCP XR)\",\n               RFC 3611, November
      2003.\n   [RFC3711]   Baugher, M., McGrew, D., Naslund, M., Carrara, E., and
      K.\n               Norrman, \"The Secure Real-time Transport Protocol\n               (SRTP)\",
      RFC 3711, March 2004.\n   [RFC4566]   Handley, M., Jacobson, V., and C. Perkins,
      \"SDP: Session\n               Description Protocol\", RFC 4566, July 2006.\n
      \  [RFC4961]   Wing, D., \"Symmetric RTP / RTP Control Protocol (RTCP)\",\n
      \              BCP 131, RFC 4961, July 2007.\n   [RFC5234]   Crocker, D., Ed.,
      and P. Overell, \"Augmented BNF for\n               Syntax Specifications: ABNF\",
      STD 68, RFC 5234,\n               January 2008.\n"
    title: 16.1.  Normative References
  - contents:
    - "16.2.  Informative References\n   [RFC5245]   Rosenberg, J., \"Interactive
      Connectivity Establishment\n               (ICE): A Protocol for Network Address
      Translator (NAT)\n               Traversal for Offer/Answer Protocols\", RFC
      5245,\n               April 2010.\n   [RFC5389]   Rosenberg, J., Mahy, R., Matthews,
      P., and D. Wing,\n               \"Session Traversal Utilities for NAT (STUN)\",
      RFC 5389,\n               October 2008.\n   [RFC5766]   Mahy, R., Matthews,
      P., and J. Rosenberg, \"Traversal\n               Using Relays around NAT (TURN):
      Relay Extensions to\n               Session Traversal Utilities for NAT (STUN)\",
      RFC 5766,\n               April 2010.\n   [RFC6263]   Marjou, X. and A. Sollaud,
      \"Application Mechanism for\n               Keeping Alive the NAT Mappings Associated
      with RTP / RTP\n               Control Protocol (RTCP) Flows\", RFC 6263, June
      2011.\n"
    title: 16.2.  Informative References
  title: 16.  References
- contents:
  - "Authors' Addresses\n   Hadriel Kaplan (editor)\n   Acme Packet\n   100 Crosby
    Drive\n   Bedford, MA  01730\n   US\n   EMail: hkaplan@acmepacket.com\n   URI:
    \  http://www.acmepacket.com\n   Kaynam Hedayat\n   EXFO\n   285 Mill Road\n   Chelmsford,
    MA  01824\n   US\n   EMail: kh274@cornell.edu\n   URI:   http://www.exfo.com/\n
    \  Nagarjuna Venna\n   Saperix\n   c/o DogPatch Labs\n   One Cambridge Center,
    6th Floor\n   Cambridge, MA  02142\n   US\n   EMail: vnagarjuna@saperix.com\n
    \  URI:   http://www.saperix.com/\n   Paul E. Jones\n   Cisco Systems, Inc.\n
    \  7025 Kit Creek Rd.\n   Research Triangle Park, NC  27709\n   US\n   EMail:
    paulej@packetizer.com\n   URI:   http://www.cisco.com/\n   Nathan Stratton\n   BlinkMind,
    Inc.\n   2027 Briarchester Dr.\n   Katy, TX  77450\n   US\n   EMail: nathan@robotics.net\n
    \  URI:   http://www.robotics.net/\n"
  title: Authors' Addresses
