- title: __initial_text__
  contents:
  - '               Guidelines for Creating New DHCPv6 Options

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides guidance to prospective DHCPv6 option\n \
    \  developers to help them create option formats that are easily\n   adoptable\
    \ by existing DHCPv6 software.  It also provides guidelines\n   for expert reviewers\
    \ to evaluate new registrations.  This document\n   updates RFC 3315.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7227.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  When to Use DHCPv6  . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  General Principles  . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   5.  Reusing Other Option Formats  . . . . . . . . . . . . . . .\
    \ .   6\n     5.1.  Option with IPv6 Addresses  . . . . . . . . . . . . . . .\
    \   7\n     5.2.  Option with Single Flag (Boolean) . . . . . . . . . . . .  \
    \ 8\n     5.3.  Option with IPv6 Prefix . . . . . . . . . . . . . . . . .   9\n\
    \     5.4.  Option with 32-bit Integer Value  . . . . . . . . . . . .  10\n  \
    \   5.5.  Option with 16-bit Integer Value  . . . . . . . . . . . .  10\n    \
    \ 5.6.  Option with 8-bit Integer Value . . . . . . . . . . . . .  11\n     5.7.\
    \  Option with URI . . . . . . . . . . . . . . . . . . . . .  11\n     5.8.  Option\
    \ with Text String . . . . . . . . . . . . . . . . .  12\n     5.9.  Option with\
    \ Variable-Length Data  . . . . . . . . . . . .  13\n     5.10. Option with DNS\
    \ Wire Format Domain Name List  . . . . . .  14\n   6.  Avoid Conditional Formatting\
    \  . . . . . . . . . . . . . . . .  15\n   7.  Avoid Aliasing  . . . . . . . .\
    \ . . . . . . . . . . . . . . .  15\n   8.  Choosing between an FQDN and an Address\
    \ . . . . . . . . . . .  16\n   9.  Encapsulated Options in DHCPv6  . . . . .\
    \ . . . . . . . . . .  19\n   10. Additional States Considered Harmful  . . .\
    \ . . . . . . . . .  20\n   11. Configuration Changes Occur at Fixed Times  .\
    \ . . . . . . . .  21\n   12. Multiple Provisioning Domains . . . . . . . . .\
    \ . . . . . . .  21\n   13. Chartering Requirements and Advice for Responsible\
    \ Area\n       Directors . . . . . . . . . . . . . . . . . . . . . . . . . . \
    \ 22\n   14. Considerations for Creating New Formats . . . . . . . . . . .  23\n\
    \   15. Option Size . . . . . . . . . . . . . . . . . . . . . . . . .  23\n  \
    \ 16. Singleton Options . . . . . . . . . . . . . . . . . . . . . .  24\n   17.\
    \ Option Order  . . . . . . . . . . . . . . . . . . . . . . . .  25\n   18. Relay\
    \ Options . . . . . . . . . . . . . . . . . . . . . . . .  25\n   19. Clients\
    \ Request Their Options . . . . . . . . . . . . . . . .  26\n   20. Transition\
    \ Technologies . . . . . . . . . . . . . . . . . . .  26\n   21. Recommended Sections\
    \ in the New Document  . . . . . . . . . .  27\n     21.1.  DHCPv6 Client Behavior\
    \ Text  . . . . . . . . . . . . . .  28\n     21.2.  DHCPv6 Server Behavior Text\
    \  . . . . . . . . . . . . . .  28\n     21.3.  DHCPv6 Relay Agent Behavior Text\
    \ . . . . . . . . . . . .  29\n   22. Should the New Document Update Existing\
    \ RFCs? . . . . . . . .  29\n   23. Security Considerations . . . . . . . . .\
    \ . . . . . . . . . .  29\n   24. Privacy Considerations  . . . . . . . . . .\
    \ . . . . . . . . .  31\n   25. Acknowledgements  . . . . . . . . . . . . . .\
    \ . . . . . . . .  31\n   26. References  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  31\n     26.1.  Normative References . . . . . . . . . . . .\
    \ . . . . . .  31\n     26.2.  Informative References . . . . . . . . . . . .\
    \ . . . . .  32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Most protocol developers ask themselves if a protocol will\
    \ work, or\n   work efficiently.  These are important questions, but another less\n\
    \   frequently considered question is whether the proposed protocol\n   presents\
    \ itself needless barriers to adoption by deployed software.\n   DHCPv6 [RFC3315]\
    \ software implementors are not merely faced with the\n   task of handling a given\
    \ option's format on the wire.  The option\n   must fit into every stage of the\
    \ system's process, starting with the\n   user interface used to enter the configuration\
    \ up to the machine\n   interfaces where configuration is ultimately consumed.\n\
    \   Another frequently overlooked aspect of rapid adoption is whether the\n  \
    \ option requires operators to be intimately familiar with the option's\n   internal\
    \ format in order to use it.  Most DHCPv6 software provides a\n   facility for\
    \ handling unknown options at the time of publication.\n   The handling of such\
    \ options usually needs to be manually configured\n   by the operator.  But, if\
    \ doing so requires extensive reading (more\n   than can be covered in a simple\
    \ FAQ, for example), it inhibits\n   adoption.\n   So, although a given solution\
    \ would work, and might even be space,\n   time, or aesthetically optimal, a given\
    \ option is presented with a\n   series of ever-worsening challenges to be adopted:\n\
    \   o  If it doesn't fit neatly into existing configuration files.\n   o  If it\
    \ requires source code changes to be adopted and, hence,\n      upgrades of deployed\
    \ software.\n   o  If it does not share its deployment fate in a general manner\
    \ with\n      other options, standing alone in requiring code changes or\n   \
    \   reworking configuration file syntaxes.\n   o  If the option would work well\
    \ in the particular deployment\n      environment the proponents currently envision,\
    \ but it has equally\n      valid uses in some other environment where the proposed\
    \ option\n      format would fail or would produce inconsistent results.\n   There\
    \ are many things DHCPv6 option creators can do to avoid the\n   pitfalls in this\
    \ list entirely, or failing that, to make software\n   implementors' lives easier\
    \ and improve its chances for widespread\n   adoption.\n   This document is envisaged\
    \ as a help for protocol developers that\n   define new options and for expert\
    \ reviewers that review submitted\n   proposals.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  When to Use DHCPv6
  contents:
  - "3.  When to Use DHCPv6\n   Principally, DHCPv6 carries configuration parameters\
    \ for its clients.\n   Any knob, dial, slider, or checkbox on the client system,\
    \ such as \"my\n   domain name servers\", \"my hostname\", or even \"my shutdown\n\
    \   temperature\", are candidates for being configured by DHCPv6.\n   The presence\
    \ of such a knob isn't enough, because DHCPv6 also\n   presents the extension\
    \ of an administrative domain -- the operator of\n   the network to which the\
    \ client is currently attached.  Someone runs\n   not only the local switching\
    \ network infrastructure to which the\n   client is directly (or wirelessly) attached\
    \ but the various methods\n   of accessing the external Internet via local assist\
    \ services that the\n   network must also provide (such as domain name servers\
    \ or routers).\n   This means that, even if a configuration parameter can be potentially\n\
    \   delivered by DHCPv6, it is necessary to evaluate whether it is\n   reasonable\
    \ for this parameter to be under the control of the\n   administrator of whatever\
    \ network a client is attached to at any\n   given time.\n   Note that the client\
    \ is not required to configure any of these values\n   received via DHCPv6 (e.g.,\
    \ due to having these values locally\n   configured by its own administrator).\
    \  But, it needs to be noted that\n   overriding DHCPv6-provided values may cause\
    \ the client to be denied\n   certain services in the network to which it has\
    \ attached.  The\n   possibility of having a higher level of control over client\
    \ node\n   configuration is one of the reasons that DHCPv6 is preferred in\n \
    \  enterprise networks.\n"
- title: 4.  General Principles
  contents:
  - "4.  General Principles\n   The primary guiding principle to follow in order to\
    \ enhance an\n   option's adoptability is reuse.  The option should be created\
    \ in such\n   a way that does not require any new or special case software to\n\
    \   support.  If old software that is currently deployed and in the field\n  \
    \ can adopt the option through supplied configuration facilities, then\n   it's\
    \ fairly certain that new software can formally adopt it easily.\n   There are\
    \ at least two classes of DHCPv6 options: simple options,\n   which are provided\
    \ explicitly to carry data from one side of the\n   DHCPv6 exchange to the other\
    \ (such as name servers, domain names, or\n   time servers), and a protocol class\
    \ of options, which require special\n   processing on the part of the DHCPv6 software\
    \ or are used during\n   special processing (such as the Fully Qualified Domain\
    \ Name (FQDN)\n   option [RFC4704]), and so forth; these options carry data that\
    \ is the\n   result of a routine in some DHCPv6 software.\n   The guidelines laid\
    \ out here should be applied in a relaxed manner\n   for the protocol class of\
    \ options.  Wherever a special case code is\n   already required to adopt the\
    \ DHCPv6 option, it is substantially more\n   reasonable to format the option\
    \ in a less generic fashion, if there\n   are measurable benefits to doing so.\n"
- title: 5.  Reusing Other Option Formats
  contents:
  - "5.  Reusing Other Option Formats\n   The easiest approach to manufacturing trivially\
    \ deployable DHCPv6\n   options is to assemble the option out of whatever common\
    \ fragments\n   fit, possibly allowing a group of data elements to repeat to fill\
    \ the\n   remaining space (if present) and thus provide multiple values.  Place\n\
    \   all fixed-size values at the start of the option and any variable\n   -/indeterminate-sized\
    \ values at the tail end of the option.\n   This means that implementations will\
    \ likely be able to reuse code\n   paths designed to support the other options.\n\
    \   There is a trade-off between the adoptability of previously defined\n   option\
    \ formats and the advantages that new or specialized formats can\n   provide.\
    \  In general, it is usually preferable to reuse previously\n   used option formats.\n\
    \   However, it isn't very practical to consider the bulk of DHCPv6\n   options\
    \ already allocated and to consider which of those solve a\n   similar problem.\
    \  So, the following list of common option format data\n   elements is provided\
    \ as shorthand.  Please note that it is not\n   complete in terms of exampling\
    \ every option format ever devised.\n   If more complex options are needed, those\
    \ basic formats mentioned\n   here may be considered as primitives (or 'fragment\
    \ types') that can\n   be used to build more complex formats.  It should be noted\
    \ that it is\n   often easier to implement two options with trivial formats than\
    \ one\n   option with a more complex format.  That is not an unconditional\n \
    \  requirement though.  In some cases, splitting one complex option into\n   two\
    \ or more simple options introduces inter-option dependencies that\n   should\
    \ be avoided.  In such a case, it is usually better to keep one\n   complex option.\n"
- title: 5.1.  Option with IPv6 Addresses
  contents:
  - "5.1.  Option with IPv6 Addresses\n   This option format is used to carry one\
    \ or many IPv6 addresses.  In\n   some cases, the number of allowed addresses\
    \ is limited (e.g., to\n   one):\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |           option-len          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                       ipv6-address                          |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                       ipv6-address                          |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 1: Option with IPv6 Addresses\n   Examples of use:\n\
    \   o  DHCPv6 Server Unicast Address [RFC3315] (a single address only)\n   o \
    \ Session Initiation Protocol (SIP) Servers IPv6 Address List\n      [RFC3319]\n\
    \   o  DNS Recursive Name Servers [RFC3646]\n   o  Network Information Service\
    \ (NIS) Servers [RFC3898]\n   o  Simple Network Time Protocol (SNTP) Servers [RFC4075]\n\
    \   o  Broadcast and Multicast Service Controller IPv6 Address Option for\n  \
    \    DHCPv6 [RFC4280]\n   o  Mobile IPv6 (MIPv6) Home Agent Address [RFC6610]\
    \ (a single address\n      only)\n   o  Network Time Protocol (NTP) Server Address\
    \ [RFC5908] (a single\n      address only)\n   o  NTP Multicast Address [RFC5908]\
    \ (a single address only)\n"
- title: 5.2.  Option with Single Flag (Boolean)
  contents:
  - "5.2.  Option with Single Flag (Boolean)\n   Sometimes, it is useful to convey\
    \ a single flag that can take either\n   on or off values.  Instead of specifying\
    \ an option with 1 bit of\n   usable data and 7 bits of padding, it is better\
    \ to define an option\n   without any content.  It is the presence or absence\
    \ of the option\n   that conveys the value.  This approach has the additional\
    \ benefit of\n   the absent option designating the default; that is, the administrator\n\
    \   has to take explicit actions to deploy the opposite of the default\n   value.\n\
    \   The absence of the option represents the default value, and the\n   presence\
    \ of the option represents the other value, but that does not\n   necessarily\
    \ mean that absence is \"off\" (or \"false\") and presence is\n   \"on\" (or \"\
    true\").  That is, if it's desired that the default value\n   for a bistable option\
    \ is \"true\"/\"on\", then the presence of that\n   option would turn it off (make\
    \ it false).  If the option presence\n   signifies an off/false state, that should\
    \ be reflected in the option\n   name, e.g., OPTION_DISABLE_FOO.\n    0      \
    \             1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |           option-len          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 2: Option for Conveying Boolean\n   Examples of use:\n\
    \   o  DHCPv6 Rapid Commit [RFC3315]\n"
- title: 5.3.  Option with IPv6 Prefix
  contents:
  - "5.3.  Option with IPv6 Prefix\n   Sometimes, there is a need to convey an IPv6\
    \ prefix.  The information\n   to be carried by such an option includes the 128-bit\
    \ IPv6 prefix\n   together with a length of this prefix taking values from 0 to\
    \ 128.\n   Using the simplest approach, the option could convey this data in two\n\
    \   fixed-length fields: one carrying the prefix length and another\n   carrying\
    \ the prefix.  However, in many cases, /64 or shorter prefixes\n   are used. \
    \ This implies that the large part of the prefix data\n   carried by the option\
    \ would have its bits set to 0 and would be\n   unused.  In order to avoid carrying\
    \ unused data, it is recommended to\n   store the prefix in the variable-length\
    \ data field.  The appropriate\n   option format is defined as follows:\n    \
    \  0                   1                   2                   3\n      0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |          option-code          |         option-length         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  prefix6len\
    \   |              ipv6-prefix                      |\n     +-+-+-+-+-+-+-+-+\
    \           (variable length)                   |\n     .                    \
    \                                           .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 3: Option with IPv6 Prefix\n   option-length is set\
    \ to 1 + length of the IPv6 prefix.\n   prefix6len is 1 octet long and specifies\
    \ the length in bits of the\n   IPv6 prefix.  Typically allowed values are 0 to\
    \ 128.\n   The ipv6-prefix field is a variable-length field that specifies the\n\
    \   IPv6 prefix.  The length is (prefix6len + 7) / 8.  This field is\n   padded\
    \ with 0 bits up to the nearest octet boundary when prefix6len\n   is not divisible\
    \ by 8.\n   Examples of use:\n   o  Default Mapping Rule [MAP]\n   For example,\
    \ the prefix 2001:db8::/60 would be encoded with an\n   option-length of 9, prefix6-len\
    \ would be set to 60, and the\n   ipv6-prefix would be 8 octets and would contain\
    \ octets 20 01 0d b8 00\n   00 00 00.\n   It should be noted that the IAPREFIX\
    \ option defined by [RFC3633] uses\n   a full-length 16-octet prefix field.  The\
    \ concern about option length\n   was not well understood at the time of its publication.\n"
- title: 5.4.  Option with 32-bit Integer Value
  contents:
  - "5.4.  Option with 32-bit Integer Value\n   This option format can be used to\
    \ carry a 32-bit signed or unsigned\n   integer value:\n    0                \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |           option-len          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         32-bit-integer                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 4: Option with 32-bit Integer Value\n   Examples of use:\n\
    \   o  Information Refresh Time [RFC4242]\n"
- title: 5.5.  Option with 16-bit Integer Value
  contents:
  - "5.5.  Option with 16-bit Integer Value\n   This option format can be used to\
    \ carry 16-bit signed or unsigned\n   integer values:\n    0                 \
    \  1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |           option-len          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         16-bit-integer        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 5: Option with 16-bit Integer Value\n   Examples of use:\n\
    \   o  Elapsed Time [RFC3315]\n"
- title: 5.6.  Option with 8-bit Integer Value
  contents:
  - "5.6.  Option with 8-bit Integer Value\n   This option format can be used to carry\
    \ 8-bit integer values:\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |          option-len           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 8-bit-integer |\n   +-+-+-+-+-+-+-+-+\n                 Figure 6: Option\
    \ with 8-bit Integer Value\n   Examples of use:\n   o  DHCPv6 Preference [RFC3315]\n"
- title: 5.7.  Option with URI
  contents:
  - "5.7.  Option with URI\n   A Uniform Resource Identifier (URI) [RFC3986] is a\
    \ compact sequence\n   of characters that identifies an abstract or physical resource.\
    \  The\n   term \"Uniform Resource Locator\" (URL) refers to the subset of URIs\n\
    \   that, in addition to identifying a resource, provide a means of\n   locating\
    \ the resource by describing its primary access mechanism\n   (e.g., its network\
    \ \"location\").  This option format can be used to\n   carry a single URI:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |          option-len           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                      URI (variable length)                    .\n   |  \
    \                            ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 7: Option with URI\n   Examples of use:\n   o\
    \  Boot File URL [RFC5970]\n   An alternate encoding to support multiple URIs\
    \ is available.  An\n   option must be defined to use either the single URI format\
    \ above or\n   the multiple URI format below depending on whether a single URI\
    \ is\n   always sufficient or if multiple URIs are possible.\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |          option-len           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                                                               .\n   .  \
    \                          uri-data                           .\n   .        \
    \                     . . .                             .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 8: Option with Multiple URIs\n   Each instance of\
    \ the uri-data is formatted as follows:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \   |       uri-len                 |          URI                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \   The uri-len is 2 octets long and specifies the length of the URI\n   data.\
    \  Although the URI format in theory supports up to 64 KB of\n   data, in practice,\
    \ large chunks of data may be problematic.  See\n   Section 15 for details.\n"
- title: 5.8.  Option with Text String
  contents:
  - "5.8.  Option with Text String\n   A text string is a sequence of characters that\
    \ have no semantics.\n   The encoding of the text string MUST be specified.  Unless\
    \ otherwise\n   specified, all text strings in newly defined options are expected\
    \ to\n   be Unicode strings that are encoded using UTF-8 [RFC3629] in Net-\n \
    \  Unicode form [RFC5198].  Please note that all strings containing only\n   7-bit\
    \ ASCII characters are also valid UTF-8 Net-Unicode strings.\n   If a data format\
    \ has semantics other than just being text, it is not\n   a string; e.g., an FQDN\
    \ is not a string, and a URI is also not a\n   string because they have different\
    \ semantics.  A string must not\n   include any terminator (such as a null byte).\
    \  The null byte is\n   treated as any other character and does not have any special\
    \ meaning.\n   This option format can be used to carry a text string:\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |          option-len           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                            String                             .\n   |  \
    \                            ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 9: Option with Text String\n   Examples of use:\n\
    \   o  Timezone Options for DHCPv6 [RFC4833]\n   An alternate encoding to support\
    \ multiple text strings is available.\n   An option must be defined to use either\
    \ the single text string format\n   above or the multiple text string format below,\
    \ depending on whether\n   a single text string is always sufficient or if multiple\
    \ text strings\n   are possible.\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |          option-len           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                                                               .\n   .  \
    \                         text-data                           .\n   .        \
    \                     . . .                             .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 10: Option with Multiple Text Strings\n   Each instance\
    \ of the text-data is formatted as follows:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \   |       text-len                |        String                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \   The text-len is 2 octets long and specifies the length of the string.\n"
- title: 5.9.  Option with Variable-Length Data
  contents:
  - "5.9.  Option with Variable-Length Data\n   This option can be used to carry variable-length\
    \ data of any kind.\n   Internal representation of carried data is option specific.\
    \  Whenever\n   this format is used by the new option being defined, the data\n\
    \   encoding should be documented.\n   This option format provides a lot of flexibility\
    \ to pass data of\n   almost any kind.  Though, whenever possible, it is highly\
    \ recommended\n   to use more specialized options, with field types better matching\n\
    \   carried data types.\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |         option-len            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                                                               .\n   .  \
    \                    variable-length data                     .\n   .        \
    \                                                       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 11: Option with Variable-Length Data\n   Examples of use:\n\
    \   o  Client Identifier [RFC3315]\n   o  Server Identifier [RFC3315]\n"
- title: 5.10.  Option with DNS Wire Format Domain Name List
  contents:
  - "5.10.  Option with DNS Wire Format Domain Name List\n   This option is used to\
    \ carry 'domain search' lists or any host or\n   domain name.  It uses the same\
    \ format as described in Section 5.9 but\n   with the special data encoding, as\
    \ described in Section 8 of\n   [RFC3315].  This data encoding supports carrying\
    \ multiple instances\n   of hosts or domain names in a single option by terminating\
    \ each\n   instance with the byte value of 0.\n    0                   1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          option-code          |         option-length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               DNS Wire Format Domain Name List                |\n   |  \
    \                            ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 12: Option with DNS Wire Format Domain Name List\n   Examples\
    \ of use:\n   o  SIP Servers Domain Name List [RFC3319] (many domains)\n   o \
    \ NIS Domain Name [RFC3898] (many domains)\n   o  Location-to-Service Translation\
    \ (LoST) Server Domain Name\n      [RFC5223]\n   o  Location Information Server\
    \ (LIS) Domain Name [RFC5986]\n   o  Dual-Stack Lite (DS-Lite) Address Family\
    \ Transition Router (AFTR)\n      Location [RFC6334] (a single FQDN)\n   o  Home\
    \ Network Identifier [RFC6610] (a single FQDN)\n   o  Home Agent FQDN [RFC6610]\
    \ (a single FQDN)\n"
- title: 6.  Avoid Conditional Formatting
  contents:
  - "6.  Avoid Conditional Formatting\n   Placing an octet at the start of the option\
    \ that informs the software\n   how to process the remaining octets of the option\
    \ may appear simple\n   to the casual observer.  But, the only conditional formatting\
    \ methods\n   that are in widespread use today are 'protocol' class options.\n\
    \   Therefore, conditional formatting requires new code to be written and\n  \
    \ complicates future interoperability should new conditional formats be\n   added;\
    \ existing code has to ignore conditional formats that it does\n   not support.\n"
- title: 7.  Avoid Aliasing
  contents:
  - "7.  Avoid Aliasing\n   Options are said to be aliases of each other if they provide\
    \ input to\n   the same configuration parameter.  A commonly proposed example\
    \ is to\n   configure the location of some new service (\"my foo server\") using\
    \ a\n   binary IP address, a domain name field, and a URL.  This kind of\n   aliasing\
    \ is undesirable and is not recommended.\n   In this case, where three different\
    \ formats are supposed, it more\n   than triples the work of the software involved,\
    \ requiring support for\n   not merely one format but support to produce and digest\
    \ all three.\n   Furthermore, code development and testing must cover all possible\n\
    \   combinations of defined formats.  Since clients cannot predict what\n   values\
    \ the server will provide, they must request all formats.  So,\n   in the case\
    \ where the server is configured with all formats, DHCPv6\n   message bandwidth\
    \ is wasted on option contents that are redundant.\n   Also, the DHCPv6 option\
    \ number space is wasted, as three new option\n   codes are required rather than\
    \ one.\n   It also becomes unclear which types of values are mandatory and how\n\
    \   configuring some of the options may influence the others.  For\n   example,\
    \ if an operator configures the URL only, should the server\n   synthesize a domain\
    \ name and an IP address?\n   A single configuration value on a host is probably\
    \ presented to the\n   operator (or other software on the machine) in a single\
    \ field or\n   channel.  If that channel has a natural format, then any alternative\n\
    \   formats merely make more work for intervening software in providing\n   conversions.\n\
    \   So, the best advice is to choose the one method that best fulfills\n   the\
    \ requirements for simplicity (such as with an IP address and a\n   port pair),\
    \ late binding (such as with DNS), or completeness (such as\n   with a URL).\n"
- title: 8.  Choosing between an FQDN and an Address
  contents:
  - "8.  Choosing between an FQDN and an Address\n   Some parameters may be specified\
    \ as an FQDN or an address.  In most\n   cases, one or the other should be used.\
    \  This section discusses pros\n   and cons of each approach and is intended to\
    \ help make an informed\n   decision in that regard.  It is strongly discouraged\
    \ to define both\n   option types at the same time (see Section 7), unless there\
    \ is\n   sufficient motivation to do so.\n   There is no single recommendation\
    \ that works for every case.  It very\n   much depends on the nature of the parameter\
    \ being configured.  For\n   parameters that are network specific or represent\
    \ certain aspects of\n   network infrastructure, like available mobility services,\
    \ in most\n   cases addresses are a more usable choice.  For parameters that can\
    \ be\n   considered an application-specific configuration, like SIP servers,\n\
    \   it is usually better to use an FQDN.\n   Applications are often better suited\
    \ to deal with FQDN failures than\n   with address failures.  Most operating systems\
    \ provide a way to retry\n   an FQDN resolution if the previous attempt fails.\
    \  That type of error\n   recovery is supported by a great number of applications.\
    \  On the\n   other hand, there is typically no API available for applications\
    \ to\n   reconfigure over DHCP to get a new address value if the one received\n\
    \   is no longer appropriate.  This problem may be usually addressed by\n   providing\
    \ a list of addresses rather than just a single one.  That,\n   on the other hand,\
    \ requires a defined procedure on how multiple\n   addresses should be used (all\
    \ at once, round robin, try first and\n   fail over to the next if it fails, etc.).\n\
    \   An FQDN provides a higher level of indirection and ambiguity.  In\n   many\
    \ cases, that may be considered a benefit, but it can be\n   considered a flaw\
    \ in others.  For example, one operator suggested\n   that the same name be resolved\
    \ to different addresses, depending on\n   the point of attachment of the host\
    \ doing the resolution.  This is\n   one way to provide localized addressing.\
    \  However, in order to do\n   this, it is necessary to violate the DNS convention\
    \ that a query on a\n   particular name should always return the same answer (aside\
    \ from the\n   ordering of IP addresses in the response, which is supposed to\
    \ be\n   varied by the name server).  This same locality of reference for\n  \
    \ configuration information can be achieved directly using DHCP, since\n   the\
    \ DHCP server must know the network topology in order to provide IP\n   address\
    \ or prefix configuration.\n   The other type of ambiguity is related to multiple\
    \ provisioning\n   domains (see Section 12).  The stub resolver on the DHCP client\n\
    \   cannot at present be assumed to make the DNS query for a DHCP-\n   supplied\
    \ FQDN on the same interface on which it received its DHCP\n   configuration and\
    \ may, therefore, get a different answer from the DNS\n   than was intended.\n\
    \   This is particularly a problem when the normal expected use of the\n   option\
    \ makes sense with a private DNS zone(s), as might be the case\n   on an enterprise\
    \ network.  It may also be the case that the client\n   has an explicit DNS server\
    \ configured and may, therefore, never query\n   the enterprise network's internal\
    \ DNS server.\n   An FQDN does require a resolution into an actual address.  This\n\
    \   implies the question as to when the FQDN resolution should be\n   conducted.\
    \  There are a couple of possible answers: a) by the server,\n   when it is started,\
    \ b) by the server, when it is about to send an\n   option, c) by the client,\
    \ immediately after receiving an option, and\n   d) by the client, when the content\
    \ of the option is actually\n   consumed.  For a), b), and possibly c), the option\
    \ should really\n   convey an address, not an FQDN.  The only real incentive to\
    \ use an\n   FQDN is case d).  It is the only case that allows possible changes\
    \ in\n   the DNS to be picked up by clients.\n   If the parameter is expected\
    \ to be used by constrained devices (low\n   power, battery operated, and low\
    \ capabilities) or in very lossy\n   networks, it may be appealing to drop the\
    \ requirement of performing\n   the DNS resolution and use addresses.  Another\
    \ example of a\n   constrained device is a network-booted device, where despite\
    \ the fact\n   that the node itself is very capable once it's booted, the boot\
    \ prom\n   is quite constrained.\n   Another aspect that should be considered\
    \ is time required for the\n   clients to notice any configuration changes.  Consider\
    \ a case where a\n   server configures service A using an address and service\
    \ B using an\n   FQDN.  When an administrator decides to update the configuration,\
    \ he\n   or she can update the DHCP server configuration to change both\n   services.\
    \  If the clients do not support reconfigure (which is an\n   optional feature\
    \ of RFC 3315 but in some environments, e.g., cable\n   modems, is mandatory),\
    \ the configuration will be updated on the\n   clients after the T1 timer elapses.\
    \  Depending on the nature of the\n   change (is it a new server added to a cluster\
    \ of already operating\n   servers or a new server that replaces the only available\
    \ server that\n   crashed?), this may be an issue.  On the other hand, updating\
    \ service\n   B may be achieved with a DNS record update.  That information may\
    \ be\n   cached by caching DNS servers for up to Time to Live (TTL).\n   Depending\
    \ on the values of T1 and TTL, one update may be faster than\n   another.  Furthermore,\
    \ depending on the nature of the change (planned\n   modification or unexpected\
    \ failure), T1 or TTL may be lowered before\n   the change to speed up new configuration\
    \ adoption.\n   Simply speaking, protocol designers don't know what the TTL or\
    \ the T1\n   time will be, so they can't make assumptions about whether a DHCP\n\
    \   option will be refreshed more quickly based on T1 or TTL.\n   Addresses have\
    \ the benefit of being easier to implement and handle by\n   the DHCP software.\
    \  An address option is simpler to use, has\n   validation that is trivial (multiple\
    \ of 16 constitutes a valid\n   option), is explicit, and does not allow any ambiguity.\
    \  It is faster\n   (does not require extra round-trip time), so it is more efficient,\n\
    \   which can be especially important for energy-restricted devices.  It\n   also\
    \ does not require that the client implements a DNS resolution.\n   An FQDN imposes\
    \ a number of additional failure modes and issues that\n   should be dealt with:\n\
    \   1.  The client must have knowledge about available DNS servers.  That\n  \
    \     typically means that option DNS_SERVERS [RFC3646] is mandatory.\n      \
    \ This should be mentioned in the document that defines the new\n       option.\
    \  It is possible that the server will return the FQDN\n       option but not\
    \ the DNS server's option.  There should be a brief\n       discussion about it;\n\
    \   2.  The DNS may not be reachable;\n   3.  The DNS may be available but may\
    \ not have appropriate information\n       (e.g., no AAAA records for the specified\
    \ FQDN);\n   4.  The address family must be specified (A, AAAA, or any); the\n\
    \       information being configured may require a specific address\n       family\
    \ (e.g., IPv6), but there may be a DNS record only of\n       another type (e.g.,\
    \ A only with an IPv4 address).\n   5.  What should the client do if there are\
    \ multiple records available\n       (use only the first one, use all, use one\
    \ and switch to the\n       second if the first fails for whatever reason, etc.).\
    \  This may\n       be an issue if there is an expectation that the parameter\
    \ being\n       configured will need exactly one address;\n   6.  Multihomed devices\
    \ may be connected to different administrative\n       domains with each domain\
    \ providing different information in the\n       DNS (e.g., an enterprise network\
    \ exposing private domains).  The\n       client may send DNS queries to a different\
    \ DNS server; and\n   7.  It should be mentioned if Internationalized Domain Names\
    \ are\n       allowed.  If they are, DNS option encoding should be specified.\n\
    \   Address options that are used with overly long T1 (renew timer)\n   values\
    \ have some characteristics of hard-coded values.  That is\n   strongly discouraged.\
    \  See [RFC4085] for an in-depth discussion.  If\n   the option may appear in\
    \ Information-request, its lifetime should be\n   controlled using the information\
    \ refresh time option [RFC4242].\n   One specific case that makes the choice between\
    \ an address and an\n   FQDN not obvious is a DNS Security (DNSSEC) bootstrap\
    \ scenario.\n   DNSSEC validation imposes a requirement for clock sync (to the\n\
    \   accuracy reasonably required to consider signature inception and\n   expiry\
    \ times).  This often implies usage of NTP configuration.\n   However, if NTP\
    \ is provided as an FQDN, there is no way to validate\n   its DNSSEC signature.\
    \  This is a somewhat weak argument though, as\n   providing an NTP server as\
    \ an address is also not verifiable using\n   DNSSEC.  If the trustworthiness\
    \ of the configuration provided by the\n   DHCP server is in question, DHCPv6\
    \ offers mechanisms that allow\n   server authentication.\n"
- title: 9.  Encapsulated Options in DHCPv6
  contents:
  - "9.  Encapsulated Options in DHCPv6\n   Most options are conveyed in a DHCPv6\
    \ message directly.  Although\n   there is no codified normative language for\
    \ such options, they are\n   often referred to as top-level options.  Many options\
    \ may include\n   other options.  Such inner options are often referred to as\n\
    \   encapsulated or nested options.  Those options are sometimes called\n   sub-options,\
    \ but this term actually means something else and,\n   therefore, should never\
    \ be used to describe encapsulated options.  It\n   is recommended to use the\
    \ term \"encapsulated\" as this terminology is\n   used in [RFC3315].  The difference\
    \ between encapsulated and sub-\n   options is that the former uses normal DHCPv6\
    \ option numbers, while\n   the latter uses option number space specific to a\
    \ given parent\n   option.  It should be noted that, contrary to DHCPv4, there\
    \ is no\n   shortage of option numbers; therefore, almost all options share a\n\
    \   common option space.  For example, option type 1 meant different\n   things\
    \ in DHCPv4, depending if it was located in the top level or\n   inside of the\
    \ Relay Agent Information option.  There is no such\n   ambiguity in DHCPv6 (with\
    \ the exception of [RFC5908], which SHOULD\n   NOT be used as a template for future\
    \ DHCP option definitions).\n   From the implementation perspective, it is easier\
    \ to implement\n   encapsulated options rather than sub-options, as the implementors\
    \ do\n   not have to deal with separate option spaces and can use the same\n \
    \  buffer parser in several places throughout the code.\n   Such encapsulation\
    \ is not limited to one level.  There is at least\n   one defined option that\
    \ is encapsulated twice: Identity Association\n   for Prefix Delegation (IA_PD),\
    \ as defined in Section 9 of [RFC3633],\n   conveys the Identity Association (IA)\
    \ Prefix (IAPREFIX), as defined\n   in Section 10 of [RFC3633].  Such a delegated\
    \ prefix may contain an\n   excluded prefix range that is represented by the PD_EXCLUDE\
    \ option\n   that is conveyed as encapsulated inside IAPREFIX (PD_EXCLUDE is\n\
    \   defined in [RFC6603]).  It seems awkward to refer to such options as\n   sub-sub-option\
    \ or doubly encapsulated option; therefore, the\n   \"encapsulated option\" term\
    \ is typically used, regardless of the\n   nesting level.\n   When defining a\
    \ DHCP-based configuration mechanism for a protocol\n   that requires something\
    \ more complex than a single option, it may be\n   tempting to group configuration\
    \ values using sub-options.  That\n   should preferably be avoided, as it increases\
    \ complexity of the\n   parser.  It is much easier, faster, and less error prone\
    \ to parse a\n   large number of options on a single (top-level) scope than to\
    \ parse\n   options on several scopes.  The use of sub-options should be avoided\n\
    \   as much as possible, but it is better to use sub-options rather than\n   conditional\
    \ formatting.\n   It should be noted that currently there is no clear way defined\
    \ for\n   requesting sub-options.  Most known implementations are simply using\n\
    \   the top-level Option Request Option (ORO) for requesting both top-\n   level\
    \ and encapsulated options.\n"
- title: 10.  Additional States Considered Harmful
  contents:
  - "10.  Additional States Considered Harmful\n   DHCP is designed for provisioning\
    \ clients.  Less experienced protocol\n   designers often assume that it is easy\
    \ to define an option that will\n   convey a different parameter for each client\
    \ in a network.  Such\n   problems arose during designs of the Mapping of Address\
    \ and Port\n   (MAP) [MAP] and IPv4 Residual Deployment (4rd) [SOLUTION-4rd].\
    \  While\n   it would be easier for provisioned clients to get ready to use per-\n\
    \   client option values, such a requirement puts exceedingly large loads\n  \
    \ on the server side.  The new extensions may introduce new\n   implementation\
    \ complexity and additional database state on the\n   server.  Alternatives should\
    \ be considered, if possible.  As an\n   example, [MAP] was designed in a way\
    \ that all clients are provisioned\n   with the same set of MAP options, and each\
    \ provisioned client uses\n   its unique address and delegated prefix to generate\
    \ client-specific\n   information.  Such a solution does not introduce any additional\
    \ state\n   for the server and, therefore, scales better.\n   It also should be\
    \ noted that contrary to DHCPv4, DHCPv6 keeps several\n   timers for renewals.\
    \  Each IA_NA (addresses) and IA_PD (prefixes)\n   contains T1 and T2 timers that\
    \ designate time after which the client\n   will initiate renewal.  Those timers\
    \ apply only to their associated\n   IA containers.  Refreshing other parameters\
    \ should be initiated after\n   a time specified in the information refresh time\
    \ option (defined in\n   [RFC4242]), carried in the Reply message, and returned\
    \ in response to\n   the Information-request message.  Introducing additional\
    \ timers make\n   deployment unnecessarily complex and SHOULD be avoided.\n"
- title: 11.  Configuration Changes Occur at Fixed Times
  contents:
  - "11.  Configuration Changes Occur at Fixed Times\n   In general, DHCPv6 clients\
    \ only refresh configuration data from the\n   DHCP server when the T1 timer expires.\
    \  Although there is a\n   Reconfigure mechanism that allows a DHCP server to\
    \ request that\n   clients initiate reconfiguration, support for this mechanism\
    \ is\n   optional and cannot be relied upon.\n   Even when DHCP clients refresh\
    \ their configuration information, not\n   all consumers of DHCP-sourced configuration\
    \ data notice these\n   changes.  For instance, if a server is started using parameters\n\
    \   received in an early DHCP transaction, but does not check for updates\n  \
    \ from DHCP, it may well continue to use the same parameter\n   indefinitely.\
    \  There are a few operating systems that take care of\n   reconfiguring services\
    \ when the client moves to a new network (e.g.,\n   based on mechanisms like [RFC4436],\
    \ [RFC4957], or [RFC6059]), but\n   it's worth bearing in mind that a renew may\
    \ not always result in the\n   client taking up new configuration information\
    \ that it receives.\n   In light of the above, when designing an option you should\
    \ take into\n   consideration the fact that your option may hold stale data that\
    \ will\n   only be updated at an arbitrary time in the future.\n"
- title: 12.  Multiple Provisioning Domains
  contents:
  - "12.  Multiple Provisioning Domains\n   In some cases, there could be more than\
    \ one DHCPv6 server on a link,\n   with each providing a different set of parameters.\
    \  One notable\n   example of such a case is a home network with a connection\
    \ to two\n   independent ISPs.\n   The DHCPv6 specification does not provide clear\
    \ advice on how to\n   handle multiple provisioning sources.  Although [RFC3315]\
    \ states that\n   a client that receives more than one Advertise message may respond\
    \ to\n   one or more of them, such capability has not been observed in\n   existing\
    \ implementations.  Existing clients will pick one server and\n   will continue\
    \ the configuration process with that server, ignoring\n   all other servers.\n\
    \   In addition, a node that acts as a DHCPv6 client may be connected to\n   more\
    \ than one physical network.  In most cases, it will operate a\n   separate DHCP\
    \ client state machine on each interface and acquire\n   different, possibly conflicting,\
    \ information through each.  This\n   information will not be acquired in any\
    \ synchronized way.\n   Existing nodes cannot be assumed to systematically segregate\n\
    \   configuration information on the basis of its source; as a result, it\n  \
    \ is quite possible that a node may receive an FQDN on one network\n   interface\
    \ but do the DNS resolution on a different network interface,\n   using different\
    \ DNS servers.  As a consequence, DNS resolution done\n   by the DHCP server is\
    \ more likely to behave predictably than DNS\n   resolution done on a multi-interface\
    \ or multihomed client.\n   This is a generic DHCP issue and should not be dealt\
    \ within each\n   option separately.  This issue is better dealt with using a\
    \ protocol-\n   level solution, and fixing this problem should not be attempted\
    \ on a\n   per-option basis.  Work is ongoing in the IETF to provide a\n   systematic\
    \ solution to this problem.\n"
- title: 13.  Chartering Requirements and Advice for Responsible Area Directors
  contents:
  - "13.  Chartering Requirements and Advice for Responsible Area Directors\n   Adding\
    \ a simple DHCP option is straightforward and generally\n   something that any\
    \ working group (WG) can do, perhaps with some help\n   from designated DHCP experts.\
    \  However, when new fragment types need\n   to be devised, this requires the\
    \ attention of DHCP experts and should\n   not be done in a WG that doesn't have\
    \ a quorum of such experts.  This\n   is true whether the new fragment type has\
    \ the same structure as an\n   existing fragment type but with different semantics,\
    \ or the new\n   format has a new structure.\n   Responsible Area Directors for\
    \ WGs that wish to add a work item to a\n   WG charter to define a new DHCP option\
    \ should get clarity from the WG\n   as to whether the new option will require\
    \ a new fragment type or new\n   semantics, or whether it is a simple DHCP option\
    \ that fits existing\n   definitions.\n   If a WG needs a new fragment type, it\
    \ is preferable to see if another\n   WG exists whose members already have sufficient\
    \ expertise to evaluate\n   the new work.  If such a working group is available,\
    \ the work should\n   be chartered in that working group instead.  If there is\
    \ no other WG\n   with DHCP expertise that can define the new fragment type, the\n\
    \   responsible AD should seek help from known DHCP experts within the\n   IETF\
    \ to provide advice and frequent early review as the original WG\n   defines the\
    \ new fragment type.\n   In either case, the new option should be defined in a\
    \ separate\n   document, and the work should focus on defining a new format that\n\
    \   generalizes well and can be reused, rather than a single-use fragment\n  \
    \ type.  The WG that needs the new fragment type can define their new\n   option\
    \ referencing the new fragment type document, and the work can\n   generally be\
    \ done in parallel, avoiding unnecessary delays.  Having\n   the definition in\
    \ its own document will foster reuse of the new\n   fragment type.\n   The responsible\
    \ AD should work with all relevant WG Chairs and DHCP\n   experts to ensure that\
    \ the new fragment type document has in fact\n   been carefully reviewed by the\
    \ experts and appears satisfactory.\n   Responsible Area Directors for WGs that\
    \ are considering defining\n   options that actually update DHCP, as opposed to\
    \ simple options,\n   should go through a process similar to that described above\
    \ when\n   trying to determine where to do the work.  Under no circumstances\n\
    \   should a WG be given a charter deliverable to define a new DHCP\n   option,\
    \ and then on the basis of that charter item actually make\n   updates to DHCP.\n"
- title: 14.  Considerations for Creating New Formats
  contents:
  - "14.  Considerations for Creating New Formats\n   When defining new options, one\
    \ specific consideration to evaluate is\n   whether or not options of a similar\
    \ format would need to have\n   multiple or single values encoded (whatever differs\
    \ from the current\n   option) and how that might be accomplished in a similar\
    \ format.\n   When defining a new option, it is best to synthesize the option\n\
    \   format using fragment types already in use.  However, in some cases,\n   there\
    \ may be no fragment type that accomplishes the intended purpose.\n   The matter\
    \ of size considerations and option order are further\n   discussed in Sections\
    \ 15 and 17.\n"
- title: 15.  Option Size
  contents:
  - "15.  Option Size\n   DHCPv6 [RFC3315] allows for packet sizes up to 64 KB.  First,\
    \ through\n   its use of link-local addresses, it avoids many of the deployment\n\
    \   problems that plague DHCPv4 and is actually a UDP over the IPv6-based\n  \
    \ protocol (compared to DHCPv4, which is mostly UDP over IPv4 but with\n   layer-2\
    \ hacks).  Second, RFC 3315 explicitly refers readers to\n   Section 5 of [RFC2460],\
    \ which describes an MTU of 1280 octets and a\n   minimum fragment reassembly\
    \ of 1500 octets.  It's feasible to suggest\n   that DHCPv6 is capable of having\
    \ larger options deployed over it, and\n   at least no common upper limit is yet\
    \ known to have been encoded by\n   its implementors.  It is not really possible\
    \ to describe a fixed\n   limit that cleanly divides workable option sizes from\
    \ those that are\n   too big.\n   It is advantageous to prefer option formats\
    \ that contain the desired\n   information in the smallest form factor that satisfies\
    \ the\n   requirements.  Common sense still applies here.  It is better to\n \
    \  split distinct values into separate octets rather than propose overly\n   complex\
    \ bit-shifting operations to save several bits (or even an\n   octet or two) that\
    \ would be padded to the next octet boundary anyway.\n   DHCPv6 does allow for\
    \ multiple instances of a given option, and they\n   are treated as distinct values\
    \ following the defined format; however,\n   this feature is generally preferred\
    \ to be restricted to protocol\n   class features (such as the IA_* series of\
    \ options).  In such cases,\n   it is better to define an option as an array if\
    \ it is possible.  It\n   is recommended to clarify (with normative language)\
    \ whether a given\n   DHCPv6 option may appear once or multiple times.  The default\n\
    \   assumption is only once.\n   In general, if a lot of data needs to be configured\
    \ (for example,\n   some option lengths are quite large), DHCPv6 may not be the\
    \ best\n   choice to deliver such configuration information and SHOULD simply\
    \ be\n   used to deliver a URI that specifies where to obtain the actual\n   configuration\
    \ information.\n"
- title: 16.  Singleton Options
  contents:
  - "16.  Singleton Options\n   Although [RFC3315] states that each option type MAY\
    \ appear more than\n   once, the original idea was that multiple instances are\
    \ reserved for\n   stateful options, like IA_NA or IA_PD.  For most other options,\
    \ it is\n   usually expected that they will appear once at most.  Such options\n\
    \   are called singleton options.  Sadly, RFCs have often failed to\n   clearly\
    \ specify whether or not a given option can appear more than\n   once.\n   Documents\
    \ that define new options SHOULD state whether or not these\n   options are singletons.\
    \  Unless otherwise specified, newly defined\n   options are considered to be\
    \ singletons.  If multiple instances are\n   allowed, the document MUST explain\
    \ how to use them.  Care should be\n   taken not to assume that they will be processed\
    \ in the order they\n   appear in the message.  See Section 17 for more details.\n\
    \   When deciding whether single or multiple option instances are allowed\n  \
    \ in a message, take into consideration how the content of the option\n   will\
    \ be used.  Depending on the service being configured, it may or\n   may not make\
    \ sense to have multiple values configured.  If multiple\n   values make sense,\
    \ it is better to explicitly allow that by using an\n   option format that allows\
    \ multiple values within one option instance.\n   Allowing multiple option instances\
    \ often leads to confusion.\n   Consider the following example.  Basic DS-Lite\
    \ architecture assumes\n   that the B4 element (DHCPv6 client) will receive the\
    \ AFTR option and\n   establish a single tunnel to the configured tunnel termination\
    \ point\n   (AFTR).  During the standardization process of [RFC6334], there was\
    \ a\n   discussion whether multiple instances of the DS-Lite tunnel option\n \
    \  should be allowed.  This created an unfounded expectation that the\n   clients\
    \ receiving multiple instances of the option will somehow know\n   when one tunnel\
    \ endpoint goes offline and do some sort of failover\n   between other values\
    \ provided in other instances of the AFTR option.\n   Others assumed that if there\
    \ are multiple options, the client will\n   somehow do load balancing between\
    \ the provided tunnel endpoints.\n   Neither failover nor load balancing was defined\
    \ for the DS-Lite\n   architecture, so it caused confusion.  It was eventually\
    \ decided to\n   allow only one instance of the AFTR option.\n"
- title: 17.  Option Order
  contents:
  - "17.  Option Order\n   Option order, either the order among many DHCPv6 options\
    \ or the order\n   of multiple instances of the same option, SHOULD NOT be significant.\n\
    \   New documents MUST NOT assume any specific option processing order.\n   As\
    \ there is no explicit order for multiple instances of the same\n   option, an\
    \ option definition SHOULD instead restrict ordering by\n   using a single option\
    \ that contains ordered fields.\n   As [RFC3315] does not impose option order,\
    \ some implementations use\n   hash tables to store received options (which is\
    \ a conformant\n   behavior).  Depending on the hash implementation, the processing\n\
    \   order is almost always different then the order in which the options\n   appeared\
    \ in the packet on the wire.\n"
- title: 18.  Relay Options
  contents:
  - "18.  Relay Options\n   In DHCPv4, all relay options are organized as sub-options\
    \ within the\n   DHCP Relay Agent Information option [RFC3046].  And, an independent\n\
    \   number space called \"DHCP Relay Agent Sub-options\" is maintained by\n  \
    \ IANA.  Different from DHCPv4, in DHCPv6, relay options are defined in\n   the\
    \ same way as client/server options, and they also use the same\n   option number\
    \ space as client/server options.  Future DHCPv6 relay\n   options MUST be allocated\
    \ from this single DHCPv6 option number\n   space.\n   For example, the Relay-Supplied\
    \ Options option [RFC6422] may also\n   contain some DHCPv6 options as permitted,\
    \ such as the Extensible\n   Authentication Protocol (EAP) Re-authentication Protocol\
    \ (ERP) Local\n   Domain Name DHCPv6 Option [RFC6440].\n"
- title: 19.  Clients Request Their Options
  contents:
  - "19.  Clients Request Their Options\n   The DHCPv6 Option Request Option (OPTION_ORO)\
    \ [RFC3315] is an option\n   that serves two purposes -- to inform the server\
    \ what options the\n   client supports and what options the client is willing\
    \ to consume.\n   For some options, such as the options required for the functioning\
    \ of\n   DHCPv6 itself, it doesn't make sense to require that they be\n   explicitly\
    \ requested using the Option Request Option.  In all other\n   cases, it is prudent\
    \ to assume that any new option must be present on\n   the relevant option request\
    \ list if the client desires to receive it.\n   It is tempting to add text that\
    \ requires the client to include a new\n   option in the Option Request Option\
    \ list, similar to this text:\n   \"Clients MUST place the foo option code on\
    \ the Option Request Option\n   list, clients MAY include option foo in their\
    \ packets as hints for\n   the server as values the desire, and servers MUST include\
    \ option foo\n   when the client requests it (and the server has been so configured)\"\
    .\n   Such text is discouraged as there are several issues with it.  First,\n\
    \   it assumes that client implementation that supports a given option\n   will\
    \ always want to use it.  This is not true.  The second and more\n   important\
    \ reason is that such text essentially duplicates the\n   mechanism already defined\
    \ in [RFC3315].  It is better to simply refer\n   to the existing mechanism rather\
    \ than define it again.  See\n   Section 21 for proposed examples on how to do\
    \ that.\n   Creators of DHCPv6 options cannot assume special ordering of options\n\
    \   either as they appear in the Option Request Option or as they appear\n   within\
    \ the packet.  Although it is reasonable to expect that options\n   will be processed\
    \ in the order they appear in ORO, server software is\n   not required to sort\
    \ DHCPv6 options into the same order in Reply\n   messages.\n   It should also\
    \ be noted that options values are not required to be\n   aligned within the DHCP\
    \ packet; even the option code and option\n   length may appear on odd-byte boundaries.\n"
- title: 20.  Transition Technologies
  contents:
  - "20.  Transition Technologies\n   The transition from IPv4 to IPv6 is progressing.\
    \  Many transition\n   technologies are proposed to speed it up.  As a natural\
    \ consequence,\n   there are also DHCP options proposed to provision those proposals.\n\
    \   The inevitable question is whether the required parameters should be\n   delivered\
    \ over DHCPv4 or DHCPv6.  Authors often don't give much\n   thought about it and\
    \ simply pick DHCPv6 without realizing the\n   consequences.  IPv6 is expected\
    \ to stay with us for many decades, and\n   so is DHCPv6.  There is no mechanism\
    \ available to deprecate an option\n   in DHCPv6, so any options defined will\
    \ stay with us as long as the\n   DHCPv6 protocol itself lasts.  It seems likely\
    \ that such options\n   defined to transition from IPv4 will outlive IPv4 by many\
    \ decades.\n   From that perspective, it is better to implement provisioning of\
    \ the\n   transition technologies in DHCPv4, which will be obsoleted together\n\
    \   with IPv4.\n   When the network infrastructure becomes IPv6 only, the support\
    \ for\n   IPv4-only nodes may still be needed.  In such a scenario, a mechanism\n\
    \   for providing IPv4 configuration information over IPv6-only networks\n   may\
    \ be needed.  See [IPv4-CONFIG] for further details.\n"
- title: 21.  Recommended Sections in the New Document
  contents:
  - "21.  Recommended Sections in the New Document\n   There are three major entities\
    \ in DHCPv6: server, relay agent, and\n   client.  It is very helpful for implementors\
    \ to include separate\n   sections that describe operation for those three major\
    \ entities.\n   Even when a given entity does not participate, it is useful to\
    \ have a\n   very short section stating that it must not send a given option and\n\
    \   must ignore it when received.\n   There is also a separate entity called the\
    \ \"requestor\", which is a\n   special client-like type that participates in\
    \ the leasequery protocol\n   [RFC5007] [RFC5460].  A similar section for the\
    \ requestor is not\n   required, unless the new option has anything to do with\
    \ the requestor\n   (or it is likely that the reader may think that is has). \
    \ It should\n   be noted that while in the majority of deployments the requestor\
    \ is\n   co-located with the relay agent, those are two separate entities from\n\
    \   the protocol perspective, and they may be used separately.  There are\n  \
    \ stand-alone requestor implementations available.\n   The following sections\
    \ include proposed text for such sections.  That\n   text is not required to appear,\
    \ but it is appropriate in most cases.\n   Additional or modified text specific\
    \ to a given option is often\n   required.\n   Although the requestor is a somewhat\
    \ uncommon functionality, its\n   existence should be noted, especially when allowing\
    \ or disallowing\n   options to appear in certain messages or to be sent by certain\n\
    \   entities.  Additional message types may appear in the future, besides\n  \
    \ types defined in [RFC3315].  Therefore, authors are encouraged to\n   familiarize\
    \ themselves with a list of currently defined DHCPv6\n   messages available on\
    \ the IANA website [IANA].\n   Typically, new options are requested by clients\
    \ and assigned by the\n   server, so there is no specific relay behavior.  Nevertheless,\
    \ it is\n   good to include a section for relay agent behavior and simply state\n\
    \   that there are no additional requirements for relays.  The same\n   applies\
    \ for client behavior if the options are to be exchanged\n   between the relay\
    \ and server.\n   Sections that contain option definitions MUST include a formal\n\
    \   verification procedure.  Often it is very simple, e.g., an option\n   that\
    \ conveys an IPv6 address must be exactly 16-bytes long, but\n   sometimes the\
    \ rules are more complex.  It is recommended to refer to\n   existing documents\
    \ (e.g., Section 8 of RFC 3315 for domain name\n   encoding) rather than trying\
    \ to repeat such rules.\n"
- title: 21.1.  DHCPv6 Client Behavior Text
  contents:
  - "21.1.  DHCPv6 Client Behavior Text\n   Clients MAY request option foo, as defined\
    \ in [RFC3315], Sections\n   17.1.1, 18.1.1, 18.1.3, 18.1.4, 18.1.5, and 22.7.\
    \  As a convenience\n   to the reader, we mention here that the client includes\
    \ requested\n   option codes in the Option Request Option.\n   Optional text (if\
    \ the client's hints make sense): The client also MAY\n   include option foo in\
    \ its Solicit, Request, Renew, Rebind, and\n   Information-request messages as\
    \ a hint for the server regarding\n   preferred option values.\n   Optional text\
    \ (if the option contains an FQDN): If the client\n   requests an option that\
    \ conveys an FQDN, it is expected that the\n   contents of that option will be\
    \ resolved using DNS.  Hence, the\n   following text may be useful: Clients that\
    \ request option foo SHOULD\n   also request option OPTION_DNS_SERVERS as specified\
    \ in [RFC3646].\n   Clients MUST discard option foo if it is invalid (i.e., it\
    \ did not\n   pass the validation steps defined in Section X.Y).\n   Optional\
    \ text (if option foo in expected to be exchanged between\n   relays and servers):\
    \ Option foo is exchanged between relays and\n   servers only.  Clients are not\
    \ aware of the usage of option foo.\n   Clients MUST ignore received option foo.\n"
- title: 21.2.  DHCPv6 Server Behavior Text
  contents:
  - "21.2.  DHCPv6 Server Behavior Text\n   Sections 17.2.2 and 18.2 of [RFC3315]\
    \ govern server operation in\n   regards to option assignment.  As a convenience\
    \ to the reader, we\n   mention here that the server will send option foo only\
    \ if configured\n   with specific values for foo and if the client requested it.\n\
    \   Optional text: Option foo is a singleton.  Servers MUST NOT send more\n  \
    \ than one instance of the foo option.\n   Optional text (if the server is never\
    \ supposed to receive option\n   foo): Servers MUST ignore the incoming foo option.\n"
- title: 21.3.  DHCPv6 Relay Agent Behavior Text
  contents:
  - "21.3.  DHCPv6 Relay Agent Behavior Text\n   It's never appropriate for a relay\
    \ agent to add options to a message\n   heading toward the client, and relay agents\
    \ don't actually construct\n   Relay-reply messages anyway.\n   Optional text\
    \ (if the foo option is exchanged between the clients and\n   server or between\
    \ requestors and servers): there are no additional\n   requirements for relays.\n\
    \   Optional text (if relays are expected to insert or consume option\n   foo):\
    \ Relay agents MAY include option foo in a Relay-forward message\n   when forwarding\
    \ packets from clients to the servers.\n"
- title: 22.  Should the New Document Update Existing RFCs?
  contents:
  - "22.  Should the New Document Update Existing RFCs?\n   Authors often ask themselves\
    \ whether their proposal updates existing\n   RFCs, especially RFC 3315.  In April\
    \ 2013, there were about 80\n   options defined.  Had all documents that defined\
    \ them also updated\n   RFC 3315, comprehension of such a document set would be\
    \ extremely\n   difficult.  It should be noted that \"extends\" and \"updates\"\
    \ are two\n   very different verbs.  If a new document defines a new option that\n\
    \   clients request and servers provide, it merely extends current\n   standards,\
    \ so \"updates RFC 3315\" is not required in the new document\n   header.  On\
    \ the other hand, if a new document replaces or modifies\n   existing behavior\
    \ and includes clarifications or other corrections,\n   it should be noted that\
    \ it updates the other document.  For example,\n   [RFC6644] clearly updates [RFC3315]\
    \ as it replaces existing text with\n   new text.\n   If in doubt, authors should\
    \ try to determine whether an implementor\n   reading the base RFC alone (without\
    \ reading the new document) would\n   be able to properly implement the software.\
    \  If the base RFC is\n   sufficient, then the new document probably does not\
    \ update the base\n   RFC.  On the other hand, if reading your new document is\
    \ necessary to\n   properly implement the base RFC, then the new document most\
    \ likely\n   updates the base RFC.\n"
- title: 23.  Security Considerations
  contents:
  - "23.  Security Considerations\n   DHCPv6 does have an authentication mechanism\
    \ [RFC3315] that makes it\n   possible for DHCPv6 software to discriminate between\
    \ authentic\n   endpoints and man-in-the-middle.  Other authentication mechanisms\
    \ may\n   optionally be deployed.  Sadly, as of 2014, the authentication in\n\
    \   DHCPv6 is rarely used, and support for it is not common in existing\n   implementations.\
    \  Some specific deployment types make it mandatory\n   (or parts thereof, e.g.,\
    \ DOCSIS3.0-compatible cable modems require\n   reconfigure-key support), so in\
    \ certain cases, specific\n   authentication aspects can be relied upon.  That\
    \ is not true in the\n   generic case, though.\n   So, while creating a new option,\
    \ it is prudent to assume that the\n   DHCPv6 packet contents are always transmitted\
    \ in the clear, and\n   actual production use of the software will probably be\
    \ vulnerable at\n   least to man-in-the-middle attacks from within the network,\
    \ even\n   where the network itself is protected from external attacks by\n  \
    \ firewalls.  In particular, some DHCPv6 message exchanges are\n   transmitted\
    \ to multicast addresses that are likely broadcast anyway.\n   If an option is\
    \ of a specific fixed length, it is useful to remind\n   the implementor of the\
    \ option data's full length.  This is easily\n   done by declaring the specific\
    \ value of the 'length' tag of the\n   option.  This helps to gently remind implementors\
    \ to validate the\n   option length before digesting them into likewise fixed-length\n\
    \   regions of memory or stack.\n   If an option may be of variable size (such\
    \ as having indeterminate\n   length fields, such as domain names or text strings),\
    \ it is advisable\n   to explicitly remind the implementor to be aware of the\
    \ potential for\n   long options.  Either define a reasonable upper limit (and\
    \ suggest\n   validating it) or explicitly remind the implementor that an option\n\
    \   may be exceptionally long (to be prepared to handle errors rather\n   than\
    \ truncate values).\n   For some option contents, out-of-bound values may be used\
    \ to breach\n   security.  An IP address field might be made to carry a loopback\n\
    \   address or local multicast address, and depending on the protocol,\n   this\
    \ may lead to undesirable results.  A domain name field may be\n   filled with\
    \ contrived contents that exceed the limitations placed\n   upon domain name formatting;\
    \ as this value is possibly delivered to\n   \"internal configuration\" records\
    \ of the system, it may be implicitly\n   trusted without being validated.\n \
    \  Authors of documents defining new DHCP options are, therefore,\n   strongly\
    \ advised to explicitly define validation measures that\n   recipients of such\
    \ options are required to do before processing such\n   options.  However, validation\
    \ measures already defined by RFC 3315 or\n   other specifications referenced\
    \ by the new option document are\n   redundant and can introduce errors, so authors\
    \ are equally strongly\n   advised to refer to the base specification for any\
    \ such validation\n   language rather than copying it into the new specification.\n\
    \   See also Section 24.\n"
- title: 24.  Privacy Considerations
  contents:
  - "24.  Privacy Considerations\n   As discussed in Section 23, the DHCPv6 packets\
    \ are typically\n   transmitted in the clear, so they are susceptible to eavesdropping.\n\
    \   This should be considered when defining options that may convey\n   personally\
    \ identifying information (PII) or any other type of\n   sensitive data.\n   If\
    \ the transmission of sensitive or confidential content is required,\n   it is\
    \ still possible to secure communication between relay agents and\n   servers.\
    \  Relay agents and servers communicating with relay agents\n   must support the\
    \ use of IPsec Encapsulating Security Payload (ESP)\n   with encryption in transport\
    \ mode, according to Section 3.1.1 of\n   [RFC4303] and Section 21.1 of [RFC3315].\
    \  Sadly, this requirement is\n   almost universally ignored in real deployments.\
    \  Even if the\n   communication path between the relay agents and server is secured,\n\
    \   the path between the clients and relay agents or server is not.\n   Unless\
    \ underlying transmission technology provides a secure\n   transmission channel,\
    \ the DHCPv6 options SHOULD NOT include PII or\n   other sensitive information.\
    \  If there are special circumstances that\n   warrant sending such information\
    \ over unsecured DHCPv6, the dangers\n   MUST be clearly discussed in the security\
    \ considerations.\n"
- title: 25.  Acknowledgements
  contents:
  - "25.  Acknowledgements\n   The authors would like to thank Simon Perreault, Bernie\
    \ Volz, Ted\n   Lemon, Bud Millwood, Ralph Droms, Barry Leiba, Benoit Claise,\
    \ Brian\n   Haberman, Richard Barnes, Stephen Farrell, and Stewart Bryant for\n\
    \   their comments.\n"
- title: 26.  References
  contents:
  - '26.  References

    '
- title: 26.1.  Normative References
  contents:
  - "26.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3315]  Droms, R., Bound, J., Volz, B., Lemon, T., Perkins, C.,\n\
    \              and M. Carney, \"Dynamic Host Configuration Protocol for\n    \
    \          IPv6 (DHCPv6)\", RFC 3315, July 2003.\n"
- title: 26.2.  Informative References
  contents:
  - "26.2.  Informative References\n   [IANA]     IANA, \"Dynamic Host Configuration\
    \ Protocol for IPv6\n              (DHCPv6)\",\n              <http://www.iana.org/assignments/dhcpv6-parameters/>.\n\
    \   [IPv4-CONFIG]\n              Rajtar, B. and I. Farrer, \"Provisioning IPv4\
    \ Configuration\n              Over IPv6 Only Networks\", Work in Progress, February\
    \ 2014.\n   [MAP]      Mrugalski, T., Troan, O., Farrer, I., Perreault, S., Dec,\n\
    \              W., Bao, C., Yeh, L., and X. Deng, \"DHCPv6 Options for\n     \
    \         configuration of Softwire Address and Port Mapped\n              Clients\"\
    , Work in Progress, March 2014.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n              (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC3046]  Patrick, M., \"DHCP Relay Agent Information Option\", RFC\n\
    \              3046, January 2001.\n   [RFC3319]  Schulzrinne, H. and B. Volz,\
    \ \"Dynamic Host Configuration\n              Protocol (DHCPv6) Options for Session\
    \ Initiation Protocol\n              (SIP) Servers\", RFC 3319, July 2003.\n \
    \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n         \
    \     10646\", STD 63, RFC 3629, November 2003.\n   [RFC3633]  Troan, O. and R.\
    \ Droms, \"IPv6 Prefix Options for Dynamic\n              Host Configuration Protocol\
    \ (DHCP) version 6\", RFC 3633,\n              December 2003.\n   [RFC3646]  Droms,\
    \ R., \"DNS Configuration options for Dynamic Host\n              Configuration\
    \ Protocol for IPv6 (DHCPv6)\", RFC 3646,\n              December 2003.\n   [RFC3898]\
    \  Kalusivalingam, V., \"Network Information Service (NIS)\n              Configuration\
    \ Options for Dynamic Host Configuration\n              Protocol for IPv6 (DHCPv6)\"\
    , RFC 3898, October 2004.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L.\
    \ Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\"\
    , STD 66, RFC\n              3986, January 2005.\n   [RFC4075]  Kalusivalingam,\
    \ V., \"Simple Network Time Protocol (SNTP)\n              Configuration Option\
    \ for DHCPv6\", RFC 4075, May 2005.\n   [RFC4085]  Plonka, D., \"Embedding Globally-Routable\
    \ Internet\n              Addresses Considered Harmful\", BCP 105, RFC 4085, June\n\
    \              2005.\n   [RFC4242]  Venaas, S., Chown, T., and B. Volz, \"Information\
    \ Refresh\n              Time Option for Dynamic Host Configuration Protocol for\n\
    \              IPv6 (DHCPv6)\", RFC 4242, November 2005.\n   [RFC4280]  Chowdhury,\
    \ K., Yegani, P., and L. Madour, \"Dynamic Host\n              Configuration Protocol\
    \ (DHCP) Options for Broadcast and\n              Multicast Control Servers\"\
    , RFC 4280, November 2005.\n   [RFC4303]  Kent, S., \"IP Encapsulating Security\
    \ Payload (ESP)\", RFC\n              4303, December 2005.\n   [RFC4436]  Aboba,\
    \ B., Carlson, J., and S. Cheshire, \"Detecting\n              Network Attachment\
    \ in IPv4 (DNAv4)\", RFC 4436, March 2006.\n   [RFC4704]  Volz, B., \"The Dynamic\
    \ Host Configuration Protocol for\n              IPv6 (DHCPv6) Client Fully Qualified\
    \ Domain Name (FQDN)\n              Option\", RFC 4704, October 2006.\n   [RFC4833]\
    \  Lear, E. and P. Eggert, \"Timezone Options for DHCP\", RFC\n              4833,\
    \ April 2007.\n   [RFC4957]  Krishnan, S., Montavont, N., Njedjou, E., Veerepalli,\
    \ S.,\n              and A. Yegin, \"Link-Layer Event Notifications for\n    \
    \          Detecting Network Attachments\", RFC 4957, August 2007.\n   [RFC5007]\
    \  Brzozowski, J., Kinnear, K., Volz, B., and S. Zeng,\n              \"DHCPv6\
    \ Leasequery\", RFC 5007, September 2007.\n   [RFC5198]  Klensin, J. and M. Padlipsky,\
    \ \"Unicode Format for Network\n              Interchange\", RFC 5198, March 2008.\n\
    \   [RFC5223]  Schulzrinne, H., Polk, J., and H. Tschofenig, \"Discovering\n \
    \             Location-to-Service Translation (LoST) Servers Using the\n     \
    \         Dynamic Host Configuration Protocol (DHCP)\", RFC 5223,\n          \
    \    August 2008.\n   [RFC5460]  Stapp, M., \"DHCPv6 Bulk Leasequery\", RFC 5460,\
    \ February\n              2009.\n   [RFC5908]  Gayraud, R. and B. Lourdelet, \"\
    Network Time Protocol (NTP)\n              Server Option for DHCPv6\", RFC 5908,\
    \ June 2010.\n   [RFC5970]  Huth, T., Freimann, J., Zimmer, V., and D. Thaler,\
    \ \"DHCPv6\n              Options for Network Boot\", RFC 5970, September 2010.\n\
    \   [RFC5986]  Thomson, M. and J. Winterbottom, \"Discovering the Local\n    \
    \          Location Information Server (LIS)\", RFC 5986, September\n        \
    \      2010.\n   [RFC6059]  Krishnan, S. and G. Daley, \"Simple Procedures for\n\
    \              Detecting Network Attachment in IPv6\", RFC 6059, November\n  \
    \            2010.\n   [RFC6334]  Hankins, D. and T. Mrugalski, \"Dynamic Host\
    \ Configuration\n              Protocol for IPv6 (DHCPv6) Option for Dual-Stack\
    \ Lite\",\n              RFC 6334, August 2011.\n   [RFC6422]  Lemon, T. and Q.\
    \ Wu, \"Relay-Supplied DHCP Options\", RFC\n              6422, December 2011.\n\
    \   [RFC6440]  Zorn, G., Wu, Q., and Y. Wang, \"The EAP Re-authentication\n  \
    \            Protocol (ERP) Local Domain Name DHCPv6 Option\", RFC 6440,\n   \
    \           December 2011.\n   [RFC6603]  Korhonen, J., Savolainen, T., Krishnan,\
    \ S., and O. Troan,\n              \"Prefix Exclude Option for DHCPv6-based Prefix\n\
    \              Delegation\", RFC 6603, May 2012.\n   [RFC6610]  Jang, H., Yegin,\
    \ A., Chowdhury, K., Choi, J., and T.\n              Lemon, \"DHCP Options for\
    \ Home Information Discovery in\n              Mobile IPv6 (MIPv6)\", RFC 6610,\
    \ May 2012.\n   [RFC6644]  Evans, D., Droms, R., and S. Jiang, \"Rebind Capability\
    \ in\n              DHCPv6 Reconfigure Messages\", RFC 6644, July 2012.\n   [SOLUTION-4rd]\n\
    \              Despres, R., Jiang, S., Penno, R., Lee, Y., Chen, G., and\n   \
    \           M. Chen, \"IPv4 Residual Deployment via IPv6 - a Stateless\n     \
    \         Solution (4rd)\", Work in Progress, October 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David W. Hankins\n   Google, Inc.\n   1600 Amphitheatre\
    \ Parkway\n   Mountain View, CA  94043\n   USA\n   EMail: dhankins@google.com\n\
    \   Tomek Mrugalski\n   Internet Systems Consortium, Inc.\n   950 Charter Street\n\
    \   Redwood City, CA  94063\n   USA\n   Phone: +1-650-423-1345\n   EMail: tomasz.mrugalski@gmail.com\n\
    \   Marcin Siodelski\n   Internet Systems Consortium, Inc.\n   950 Charter Street\n\
    \   Redwood City, CA  94063\n   USA\n   Phone: +1-650-423-1431\n   EMail: msiodelski@gmail.com\n\
    \   Sheng Jiang\n   Huawei Technologies Co., Ltd.\n   Q14, Huawei Campus, No.\
    \ 156 Beiqing Road\n   Hai-Dian District, Beijing, 100095\n   P.R. China\n   EMail:\
    \ jiangsheng@huawei.com\n   Suresh Krishnan\n   Ericsson\n   8400 Blvd Decarie\n\
    \   Town of Mount Royal, Quebec\n   Canada\n   EMail: suresh.krishnan@ericsson.com\n"
