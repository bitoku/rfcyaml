- contents:
  - '   An Offer/Answer Model with the Session Description Protocol (SDP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a mechanism by which two entities can make
    use\n   of the Session Description Protocol (SDP) to arrive at a common view\n
    \  of a multimedia session between them.  In the model, one participant\n   offers
    the other a description of the desired session from their\n   perspective, and
    the other participant answers with the desired\n   session from their perspective.
    \ This offer/answer model is most\n   useful in unicast sessions where information
    from both participants\n   is needed for the complete view of the session.  The
    offer/answer\n   model is used by protocols like the Session Initiation Protocol\n
    \  (SIP).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1          Introduction ........................................
    \   2\n   2          Terminology .........................................    3\n
    \  3          Definitions .........................................    3\n   4
    \         Protocol Operation ..................................    4\n   5          Generating
    the Initial Offer ........................    5\n   5.1        Unicast Streams
    .....................................    5\n   5.2        Multicast Streams ...................................
    \   8\n   6          Generating the Answer ...............................    9\n
    \  6.1        Unicast Streams .....................................    9\n   6.2
    \       Multicast Streams ...................................   12\n   7          Offerer
    Processing of the Answer ....................   12\n   8          Modifying the
    Session ...............................   13\n   8.1        Adding a Media Stream
    ...............................   13\n   8.2        Removing a Media Stream .............................
    \  14\n   8.3        Modifying a Media Stream ............................   14\n
    \  8.3.1      Modifying Address, Port or Transport ................   14\n   8.3.2
    \     Changing the Set of Media Formats ...................   15\n   8.3.3      Changing
    Media Types ................................   17\n   8.3.4      Changing Attributes
    .................................   17\n   8.4        Putting a Unicast Media
    Stream on Hold ..............   17\n   9          Indicating Capabilities .............................
    \  18\n   10         Example Offer/Answer Exchanges ......................   19\n
    \  10.1       Basic Exchange ......................................   19\n   10.2
    \      One of N Codec Selection ............................   21\n   11         Security
    Considerations .............................   23\n   12         IANA Considerations
    .................................   23\n   13         Acknowledgements ....................................
    \  23\n   14         Normative References ................................   23\n
    \  15         Informative References ..............................   24\n   16
    \        Authors' Addresses ..................................   24\n   17         Full
    Copyright Statement.............................   25\n"
  title: Table of Contents
- contents:
  - "1 Introduction\n   The Session Description Protocol (SDP) [1] was originally
    conceived\n   as a way to describe multicast sessions carried on the Mbone.  The\n
    \  Session Announcement Protocol (SAP) [6] was devised as a multicast\n   mechanism
    to carry SDP messages.  Although the SDP specification\n   allows for unicast
    operation, it is not complete.  Unlike multicast,\n   where there is a global
    view of the session that is used by all\n   participants, unicast sessions involve
    two participants, and a\n   complete view of the session requires information
    from both\n   participants, and agreement on parameters between them.\n   As an
    example, a multicast session requires conveying a single\n   multicast address
    for a particular media stream.  However, for a\n   unicast session, two addresses
    are needed - one for each participant.\n   As another example, a multicast session
    requires an indication of\n   which codecs will be used in the session.  However,
    for unicast, the\n   set of codecs needs to be determined by finding an overlap
    in the set\n   supported by each participant.\n   As a result, even though SDP
    has the expressiveness to describe\n   unicast sessions, it is missing the semantics
    and operational details\n   of how it is actually done.  In this document, we
    remedy that by\n   defining a simple offer/answer model based on SDP.  In this
    model,\n   one participant in the session generates an SDP message that\n   constitutes
    the offer - the set of media streams and codecs the\n   offerer wishes to use,
    along with the IP addresses and ports the\n   offerer would like to use to receive
    the media.  The offer is\n   conveyed to the other participant, called the answerer.
    \ The answerer\n   generates an answer, which is an SDP message that responds
    to the\n   offer provided by the offerer.  The answer has a matching media\n   stream
    for each stream in the offer, indicating whether the stream is\n   accepted or
    not, along with the codecs that will be used and the IP\n   addresses and ports
    that the answerer wants to use to receive media.\n   It is also possible for a
    multicast session to work similar to a\n   unicast one; its parameters are negotiated
    between a pair of users as\n   in the unicast case, but both sides send packets
    to the same\n   multicast address, rather than unicast ones.  This document also\n
    \  discusses the application of the offer/answer model to multicast\n   streams.\n
    \  We also define guidelines for how the offer/answer model is used to\n   update
    a session after an initial offer/answer exchange.\n   The means by which the offers
    and answers are conveyed are outside\n   the scope of this document.  The offer/answer
    model defined here is\n   the mandatory baseline mechanism used by the Session
    Initiation\n   Protocol (SIP) [7].\n"
  title: 1 Introduction
- contents:
  - "2 Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in RFC 2119 [2] and\n   indicate
    requirement levels for compliant implementations.\n"
  title: 2 Terminology
- contents:
  - "3 Definitions\n   The following terms are used throughout this document:\n      Agent:
    An agent is the protocol implementation involved in the\n         offer/answer
    exchange.  There are two agents involved in an\n         offer/answer exchange.\n
    \     Answer: An SDP message sent by an answerer in response to an offer\n         received
    from an offerer.\n      Answerer: An agent which receives a session description
    from\n         another agent describing aspects of desired media\n         communication,
    and then responds to that with its own session\n         description.\n      Media
    Stream: From RTSP [8], a media stream is a single media\n         instance, e.g.,
    an audio stream or a video stream as well as a\n         single whiteboard or
    shared application group.  In SDP, a media\n         stream is described by an
    \"m=\" line and its associated\n         attributes.\n      Offer: An SDP message
    sent by an offerer.\n      Offerer: An agent which generates a session description
    in order\n         to create or modify a session.\n"
  title: 3 Definitions
- contents:
  - "4 Protocol Operation\n   The offer/answer exchange assumes the existence of a
    higher layer\n   protocol (such as SIP) which is capable of exchanging SDP for
    the\n   purposes of session establishment between agents.\n   Protocol operation
    begins when one agent sends an initial offer to\n   another agent.  An offer is
    initial if it is outside of any context\n   that may have already been established
    through the higher layer\n   protocol.  It is assumed that the higher layer protocol
    provides\n   maintenance of some kind of context which allows the various SDP\n
    \  exchanges to be associated together.\n   The agent receiving the offer MAY
    generate an answer, or it MAY\n   reject the offer.  The means for rejecting an
    offer are dependent on\n   the higher layer protocol.  The offer/answer exchange
    is atomic; if\n   the answer is rejected, the session reverts to the state prior
    to the\n   offer (which may be absence of a session).\n   At any time, either
    agent MAY generate a new offer that updates the\n   session.  However, it MUST
    NOT generate a new offer if it has\n   received an offer which it has not yet
    answered or rejected.\n   Furthermore, it MUST NOT generate a new offer if it
    has generated a\n   prior offer for which it has not yet received an answer or
    a\n   rejection.  If an agent receives an offer after having sent one, but\n   before
    receiving an answer to it, this is considered a \"glare\"\n   condition.\n      The
    term glare was originally used in circuit switched\n      telecommunications networks
    to describe the condition where two\n      switches both attempt to seize the
    same available circuit on the\n      same trunk at the same time.  Here, it means
    both agents have\n      attempted to send an updated offer at the same time.\n
    \  The higher layer protocol needs to provide a means for resolving such\n   conditions.
    \ The higher layer protocol will need to provide a means\n   for ordering of messages
    in each direction.  SIP meets these\n   requirements [7].\n"
  title: 4 Protocol Operation
- contents:
  - "5 Generating the Initial Offer\n   The offer (and answer) MUST be a valid SDP
    message, as defined by RFC\n   2327 [1], with one exception.  RFC 2327 mandates
    that either an e or\n   a p line is present in the SDP message.  This specification
    relaxes\n   that constraint; an SDP formulated for an offer/answer application\n
    \  MAY omit both the e and p lines.  The numeric value of the session id\n   and
    version in the o line MUST be representable with a 64 bit signed\n   integer.
    \ The initial value of the version MUST be less than\n   (2**62)-1, to avoid rollovers.
    \ Although the SDP specification allows\n   for multiple session descriptions
    to be concatenated together into a\n   large SDP message, an SDP message used
    in the offer/answer model MUST\n   contain exactly one session description.\n
    \  The SDP \"s=\" line conveys the subject of the session, which is\n   reasonably
    defined for multicast, but ill defined for unicast.  For\n   unicast sessions,
    it is RECOMMENDED that it consist of a single space\n   character (0x20) or a
    dash (-).\n      Unfortunately, SDP does not allow the \"s=\" line to be empty.\n
    \  The SDP \"t=\" line conveys the time of the session.  Generally,\n   streams
    for unicast sessions are created and destroyed through\n   external signaling
    means, such as SIP.  In that case, the \"t=\" line\n   SHOULD have a value of
    \"0 0\".\n   The offer will contain zero or more media streams (each media stream\n
    \  is described by an \"m=\" line and its associated attributes).  Zero\n   media
    streams implies that the offerer wishes to communicate, but\n   that the streams
    for the session will be added at a later time\n   through a modified offer.  The
    streams MAY be for a mix of unicast\n   and multicast; the latter obviously implies
    a multicast address in\n   the relevant \"c=\" line(s).\n   Construction of each
    offered stream depends on whether the stream is\n   multicast or unicast.\n"
  - contents:
    - "5.1 Unicast Streams\n   If the offerer wishes to only send media on a stream
      to its peer, it\n   MUST mark the stream as sendonly with the \"a=sendonly\"
      attribute.  We\n   refer to a stream as being marked with a certain direction
      if a\n   direction attribute was present as either a media stream attribute
      or\n   a session attribute.  If the offerer wishes to only receive media\n   from
      its peer, it MUST mark the stream as recvonly.  If the offerer\n   wishes to
      communicate, but wishes to neither send nor receive media\n   at this time,
      it MUST mark the stream with an \"a=inactive\" attribute.\n   The inactive direction
      attribute is specified in RFC 3108 [3].  Note\n   that in the case of the Real
      Time Transport Protocol (RTP) [4], RTCP\n   is still sent and received for sendonly,
      recvonly, and inactive\n   streams.  That is, the directionality of the media
      stream has no\n   impact on the RTCP usage.  If the offerer wishes to both send
      and\n   receive media with its peer, it MAY include an \"a=sendrecv\"\n   attribute,
      or it MAY omit it, since sendrecv is the default.\n   For recvonly and sendrecv
      streams, the port number and address in the\n   offer indicate where the offerer
      would like to receive the media\n   stream.  For sendonly RTP streams, the address
      and port number\n   indirectly indicate where the offerer wants to receive RTCP
      reports.\n   Unless there is an explicit indication otherwise, reports are sent
      to\n   the port number one higher than the number indicated.  The IP address\n
      \  and port present in the offer indicate nothing about the source IP\n   address
      and source port of RTP and RTCP packets that will be sent by\n   the offerer.
      \ A port number of zero in the offer indicates that the\n   stream is offered
      but MUST NOT be used.  This has no useful semantics\n   in an initial offer,
      but is allowed for reasons of completeness,\n   since the answer can contain
      a zero port indicating a rejected stream\n   (Section 6).  Furthermore, existing
      streams can be terminated by\n   setting the port to zero (Section 8).  In general,
      a port number of\n   zero indicates that the media stream is not wanted.\n   The
      list of media formats for each media stream conveys two pieces of\n   information,
      namely the set of formats (codecs and any parameters\n   associated with the
      codec, in the case of RTP) that the offerer is\n   capable of sending and/or
      receiving (depending on the direction\n   attributes), and, in the case of RTP,
      the RTP payload type numbers\n   used to identify those formats.  If multiple
      formats are listed, it\n   means that the offerer is capable of making use of
      any of those\n   formats during the session.  In other words, the answerer MAY
      change\n   formats in the middle of the session, making use of any of the\n
      \  formats listed, without sending a new offer.  For a sendonly stream,\n   the
      offer SHOULD indicate those formats the offerer is willing to\n   send for this
      stream.  For a recvonly stream, the offer SHOULD\n   indicate those formats
      the offerer is willing to receive for this\n   stream.  For a sendrecv stream,
      the offer SHOULD indicate those\n   codecs that the offerer is willing to send
      and receive with.\n   For recvonly RTP streams, the payload type numbers indicate
      the value\n   of the payload type field in RTP packets the offerer is expecting
      to\n   receive for that codec.  For sendonly RTP streams, the payload type\n
      \  numbers indicate the value of the payload type field in RTP packets\n   the
      offerer is planning to send for that codec.  For sendrecv RTP\n   streams, the
      payload type numbers indicate the value of the payload\n   type field the offerer
      expects to receive, and would prefer to send.\n   However, for sendonly and
      sendrecv streams, the answer might indicate\n   different payload type numbers
      for the same codecs, in which case,\n   the offerer MUST send with the payload
      type numbers from the answer.\n      Different payload type numbers may be needed
      in each direction\n      because of interoperability concerns with H.323.\n
      \  As per RFC 2327, fmtp parameters MAY be present to provide additional\n   parameters
      of the media format.\n   In the case of RTP streams, all media descriptions
      SHOULD contain\n   \"a=rtpmap\" mappings from RTP payload types to encodings.
      \ If there is\n   no \"a=rtpmap\", the default payload type mapping, as defined
      by the\n   current profile in use (for example, RFC 1890 [5]) is to be used.\n
      \     This allows easier migration away from static payload types.\n   In all
      cases, the formats in the \"m=\" line MUST be listed in order of\n   preference,
      with the first format listed being preferred.  In this\n   case, preferred means
      that the recipient of the offer SHOULD use the\n   format with the highest preference
      that is acceptable to it.\n   If the ptime attribute is present for a stream,
      it indicates the\n   desired packetization interval that the offerer would like
      to\n   receive.  The ptime attribute MUST be greater than zero.\n   If the bandwidth
      attribute is present for a stream, it indicates the\n   desired bandwidth that
      the offerer would like to receive.  A value of\n   zero is allowed, but discouraged.
      \ It indicates that no media should\n   be sent.  In the case of RTP, it would
      also disable all RTCP.\n   If multiple media streams of different types are
      present, it means\n   that the offerer wishes to use those streams at the same
      time.  A\n   typical case is an audio and a video stream as part of a\n   videoconference.\n
      \  If multiple media streams of the same type are present in an offer,\n   it
      means that the offerer wishes to send (and/or receive) multiple\n   streams
      of that type at the same time.  When sending multiple streams\n   of the same
      type, it is a matter of local policy as to how each media\n   source of that
      type (for example, a video camera and VCR in the case\n   of video) is mapped
      to each stream.  When a user has a single source\n   for a particular media
      type, only one policy makes sense: the source\n   is sent to each stream of
      the same type.  Each stream MAY use\n   different encodings.  When receiving
      multiple streams of the same\n   type, it is a matter of local policy as to
      how each stream is mapped\n   to the various media sinks for that particular
      type (for example,\n   speakers or a recording device in the case of audio).
      \ There are a\n   few constraints on the policies, however.  First, when receiving\n
      \  multiple streams of the same type, each stream MUST be mapped to at\n   least
      one sink for the purpose of presentation to the user.  In other\n   words, the
      intent of receiving multiple streams of the same type is\n   that they should
      all be presented in parallel, rather than choosing\n   just one.  Another constraint
      is that when multiple streams are\n   received and sent to the same sink, they
      MUST be combined in some\n   media specific way.  For example, in the case of
      two audio streams,\n   the received media from each might be mapped to the speakers.
      \ In\n   that case, the combining operation would be to mix them.  In the case\n
      \  of multiple instant messaging streams, where the sink is the screen,\n   the
      combining operation would be to present all of them to the user\n   interface.
      \ The third constraint is that if multiple sources are\n   mapped to the same
      stream, those sources MUST be combined in some\n   media specific way before
      they are sent on the stream.  Although\n   policies beyond these constraints
      are flexible, an agent won't\n   generally want a policy that will copy media
      from its sinks to its\n   sources unless it is a conference server (i.e., don't
      copy received\n   media on one stream to another stream).\n   A typical usage
      example for multiple media streams of the same type\n   is a pre-paid calling
      card application, where the user can press and\n   hold the pound (\"#\") key
      at any time during a call to hangup and make\n   a new call on the same card.
      \ This requires media from the user to\n   two destinations - the remote gateway,
      and the DTMF processing\n   application which looks for the pound.  This could
      be accomplished\n   with two media streams, one sendrecv to the gateway, and
      the other\n   sendonly (from the perspective of the user) to the DTMF application.\n
      \  Once the offerer has sent the offer, it MUST be prepared to receive\n   media
      for any recvonly streams described by that offer.  It MUST be\n   prepared to
      send and receive media for any sendrecv streams in the\n   offer, and send media
      for any sendonly streams in the offer (of\n   course, it cannot actually send
      until the peer provides an answer\n   with the needed address and port information).
      \ In the case of RTP,\n   even though it may receive media before the answer
      arrives, it will\n   not be able to send RTCP receiver reports until the answer
      arrives.\n"
    title: 5.1 Unicast Streams
  - contents:
    - "5.2 Multicast Streams\n   If a session description contains a multicast media
      stream which is\n   listed as receive (send) only, it means that the participants,\n
      \  including the offerer and answerer, can only receive (send) on that\n   stream.
      \ This differs from the unicast view, where the directionality\n   refers to
      the flow of media between offerer and answerer.\n   Beyond that clarification,
      the semantics of an offered multicast\n   stream are exactly as described in
      RFC 2327 [1].\n"
    title: 5.2 Multicast Streams
  title: 5 Generating the Initial Offer
- contents:
  - "6 Generating the Answer\n   The answer to an offered session description is based
    on the offered\n   session description.  If the answer is different from the offer
    in\n   any way (different IP addresses, ports, etc.), the origin line MUST\n   be
    different in the answer, since the answer is generated by a\n   different entity.
    \ In that case, the version number in the \"o=\" line\n   of the answer is unrelated
    to the version number in the o line of the\n   offer.\n   For each \"m=\" line
    in the offer, there MUST be a corresponding \"m=\"\n   line in the answer.  The
    answer MUST contain exactly the same number\n   of \"m=\" lines as the offer.
    \ This allows for streams to be matched up\n   based on their order.  This implies
    that if the offer contained zero\n   \"m=\" lines, the answer MUST contain zero
    \"m=\" lines.\n   The \"t=\" line in the answer MUST equal that of the offer.
    \ The time\n   of the session cannot be negotiated.\n   An offered stream MAY
    be rejected in the answer, for any reason.  If\n   a stream is rejected, the offerer
    and answerer MUST NOT generate\n   media (or RTCP packets) for that stream.  To
    reject an offered\n   stream, the port number in the corresponding stream in the
    answer\n   MUST be set to zero.  Any media formats listed are ignored.  At least\n
    \  one MUST be present, as specified by SDP.\n   Constructing an answer for each
    offered stream differs for unicast\n   and multicast.\n"
  - contents:
    - "6.1 Unicast Streams\n   If a stream is offered with a unicast address, the
      answer for that\n   stream MUST contain a unicast address.  The media type of
      the stream\n   in the answer MUST match that of the offer.\n   If a stream is
      offered as sendonly, the corresponding stream MUST be\n   marked as recvonly
      or inactive in the answer.  If a media stream is\n   listed as recvonly in the
      offer, the answer MUST be marked as\n   sendonly or inactive in the answer.
      \ If an offered media stream is\n   listed as sendrecv (or if there is no direction
      attribute at the\n   media or session level, in which case the stream is sendrecv
      by\n   default), the corresponding stream in the answer MAY be marked as\n   sendonly,
      recvonly, sendrecv, or inactive.  If an offered media\n   stream is listed as
      inactive, it MUST be marked as inactive in the\n   answer.\n   For streams marked
      as recvonly in the answer, the \"m=\" line MUST\n   contain at least one media
      format the answerer is willing to receive\n   with from amongst those listed
      in the offer.  The stream MAY indicate\n   additional media formats, not listed
      in the corresponding stream in\n   the offer, that the answerer is willing to
      receive.  For streams\n   marked as sendonly in the answer, the \"m=\" line
      MUST contain at least\n   one media format the answerer is willing to send from
      amongst those\n   listed in the offer.  For streams marked as sendrecv in the
      answer,\n   the \"m=\" line MUST contain at least one codec the answerer is
      willing\n   to both send and receive, from amongst those listed in the offer.\n
      \  The stream MAY indicate additional media formats, not listed in the\n   corresponding
      stream in the offer, that the answerer is willing to\n   send or receive (of
      course, it will not be able to send them at this\n   time, since it was not
      listed in the offer).  For streams marked as\n   inactive in the answer, the
      list of media formats is constructed\n   based on the offer.  If the offer was
      sendonly, the list is\n   constructed as if the answer were recvonly.  Similarly,
      if the offer\n   was recvonly, the list is constructed as if the answer were
      sendonly,\n   and if the offer was sendrecv, the list is constructed as if the\n
      \  answer were sendrecv.  If the offer was inactive, the list is\n   constructed
      as if the offer were actually sendrecv and the answer\n   were sendrecv.\n   The
      connection address and port in the answer indicate the address\n   where the
      answerer wishes to receive media (in the case of RTP, RTCP\n   will be received
      on the port which is one higher unless there is an\n   explicit indication otherwise).
      \ This address and port MUST be\n   present even for sendonly streams; in the
      case of RTP, the port one\n   higher is still used to receive RTCP.\n   In the
      case of RTP, if a particular codec was referenced with a\n   specific payload
      type number in the offer, that same payload type\n   number SHOULD be used for
      that codec in the answer.  Even if the same\n   payload type number is used,
      the answer MUST contain rtpmap\n   attributes to define the payload type mappings
      for dynamic payload\n   types, and SHOULD contain mappings for static payload
      types.  The\n   media formats in the \"m=\" line MUST be listed in order of
      preference,\n   with the first format listed being preferred.  In this case,\n
      \  preferred means that the offerer SHOULD use the format with the\n   highest
      preference from the answer.\n   Although the answerer MAY list the formats in
      their desired order of\n   preference, it is RECOMMENDED that unless there is
      a specific reason,\n   the answerer list formats in the same relative order
      they were\n   present in the offer.  In other words, if a stream in the offer
      lists\n   audio codecs 8, 22 and 48, in that order, and the answerer only\n
      \  supports codecs 8 and 48, it is RECOMMENDED that, if the answerer has\n   no
      reason to change it, the ordering of codecs in the answer be 8,\n   48, and
      not 48, 8.  This helps assure that the same codec is used in\n   both directions.\n
      \  The interpretation of fmtp parameters in an offer depends on the\n   parameters.
      \ In many cases, those parameters describe specific\n   configurations of the
      media format, and should therefore be processed\n   as the media format value
      itself would be.  This means that the same\n   fmtp parameters with the same
      values MUST be present in the answer if\n   the media format they describe is
      present in the answer.  Other fmtp\n   parameters are more like parameters,
      for which it is perfectly\n   acceptable for each agent to use different values.
      \ In that case, the\n   answer MAY contain fmtp parameters, and those MAY have
      the same\n   values as those in the offer, or they MAY be different.  SDP\n
      \  extensions that define new parameters SHOULD specify the proper\n   interpretation
      in offer/answer.\n   The answerer MAY include a non-zero ptime attribute for
      any media\n   stream; this indicates the packetization interval that the answerer\n
      \  would like to receive.  There is no requirement that the\n   packetization
      interval be the same in each direction for a particular\n   stream.\n   The
      answerer MAY include a bandwidth attribute for any media stream;\n   this indicates
      the bandwidth that the answerer would like the offerer\n   to use when sending
      media.  The value of zero is allowed, interpreted\n   as described in Section
      5.\n   If the answerer has no media formats in common for a particular\n   offered
      stream, the answerer MUST reject that media stream by setting\n   the port to
      zero.\n   If there are no media formats in common for all streams, the entire\n
      \  offered session is rejected.\n   Once the answerer has sent the answer, it
      MUST be prepared to receive\n   media for any recvonly streams described by
      that answer.  It MUST be\n   prepared to send and receive media for any sendrecv
      streams in the\n   answer, and it MAY send media immediately.  The answerer
      MUST be\n   prepared to receive media for recvonly or sendrecv streams using
      any\n   media formats listed for those streams in the answer, and it MAY send\n
      \  media immediately.  When sending media, it SHOULD use a packetization\n   interval
      equal to the value of the ptime attribute in the offer, if\n   any was present.
      \ It SHOULD send media using a bandwidth no higher\n   than the value of the
      bandwidth attribute in the offer, if any was\n   present.  The answerer MUST
      send using a media format in the offer\n   that is also listed in the answer,
      and SHOULD send using the most\n   preferred media format in the offer that
      is also listed in the\n   answer.  In the case of RTP, it MUST use the payload
      type numbers\n   from the offer, even if they differ from those in the answer.\n"
    title: 6.1 Unicast Streams
  - contents:
    - "6.2 Multicast Streams\n   Unlike unicast, where there is a two-sided view of
      the stream, there\n   is only a single view of the stream for multicast.  As
      such,\n   generating an answer to a multicast offer generally involves\n   modifying
      a limited set of aspects of the stream.\n   If a multicast stream is accepted,
      the address and port information\n   in the answer MUST match that of the offer.
      \ Similarly, the\n   directionality information in the answer (sendonly, recvonly,
      or\n   sendrecv) MUST equal that of the offer.  This is because all\n   participants
      in a multicast session need to have equivalent views of\n   the parameters of
      the session, an underlying assumption of the\n   multicast bias of RFC 2327.\n
      \  The set of media formats in the answer MUST be equal to or be a\n   subset
      of those in the offer.  Removing a format is a way for the\n   answerer to indicate
      that the format is not supported.\n   The ptime and bandwidth attributes in
      the answer MUST equal the ones\n   in the offer, if present.  If not present,
      a non-zero ptime MAY be\n   added to the answer.\n"
    title: 6.2 Multicast Streams
  title: 6 Generating the Answer
- contents:
  - "7 Offerer Processing of the Answer\n   When the offerer receives the answer,
    it MAY send media on the\n   accepted stream(s) (assuming it is listed as sendrecv
    or recvonly in\n   the answer).  It MUST send using a media format listed in the
    answer,\n   and it SHOULD use the first media format listed in the answer when
    it\n   does send.\n      The reason this is a SHOULD, and not a MUST (its also
    a SHOULD,\n      and not a MUST, for the answerer), is because there will\n      oftentimes
    be a need to change codecs on the fly.  For example,\n      during silence periods,
    an agent might like to switch to a comfort\n      noise codec.  Or, if the user
    presses a number on the keypad, the\n      agent might like to send that using
    RFC 2833 [9].  Congestion\n      control might necessitate changing to a lower
    rate codec based on\n      feedback.\n   The offerer SHOULD send media according
    to the value of any ptime and\n   bandwidth attribute in the answer.\n   The offerer
    MAY immediately cease listening for media formats that\n   were listed in the
    initial offer, but not present in the answer.\n"
  title: 7 Offerer Processing of the Answer
- contents:
  - "8 Modifying the Session\n   At any point during the session, either participant
    MAY issue a new\n   offer to modify characteristics of the session.  It is fundamental
    to\n   the operation of the offer/answer model that the exact same\n   offer/answer
    procedure defined above is used for modifying parameters\n   of an existing session.\n
    \  The offer MAY be identical to the last SDP provided to the other\n   party
    (which may have been provided in an offer or an answer), or it\n   MAY be different.
    \ We refer to the last SDP provided as the \"previous\n   SDP\".  If the offer
    is the same, the answer MAY be the same as the\n   previous SDP from the answerer,
    or it MAY be different.  If the\n   offered SDP is different from the previous
    SDP, some constraints are\n   placed on its construction, discussed below.\n   Nearly
    all aspects of the session can be modified.  New streams can\n   be added, existing
    streams can be deleted, and parameters of existing\n   streams can change.  When
    issuing an offer that modifies the session,\n   the \"o=\" line of the new SDP
    MUST be identical to that in the\n   previous SDP, except that the version in
    the origin field MUST\n   increment by one from the previous SDP.  If the version
    in the origin\n   line does not increment, the SDP MUST be identical to the SDP
    with\n   that version number.  The answerer MUST be prepared to receive an\n   offer
    that contains SDP with a version that has not changed; this is\n   effectively
    a no-op.  However, the answerer MUST generate a valid\n   answer (which MAY be
    the same as the previous SDP from the answerer,\n   or MAY be different), according
    to the procedures defined in Section\n   6.\n   If an SDP is offered, which is
    different from the previous SDP, the\n   new SDP MUST have a matching media stream
    for each media stream in\n   the previous SDP.  In other words, if the previous
    SDP had N \"m=\"\n   lines, the new SDP MUST have at least N \"m=\" lines.  The
    i-th media\n   stream in the previous SDP, counting from the top, matches the
    i-th\n   media stream in the new SDP, counting from the top.  This matching is\n
    \  necessary in order for the answerer to determine which stream in the\n   new
    SDP corresponds to a stream in the previous SDP.  Because of\n   these requirements,
    the number of \"m=\" lines in a stream never\n   decreases, but either stays the
    same or increases.  Deleted media\n   streams from a previous SDP MUST NOT be
    removed in a new SDP;\n   however, attributes for these streams need not be present.\n"
  - contents:
    - "8.1 Adding a Media Stream\n   New media streams are created by new additional
      media descriptions\n   below the existing ones, or by reusing the \"slot\" used
      by an old\n   media stream which had been disabled by setting its port to zero.\n
      \  Reusing its slot means that the new media description replaces the\n   old
      one, but retains its positioning relative to other media\n   descriptions in
      \ the SDP.  New media descriptions MUST appear below\n   any existing media
      sections.  The rules for formatting these media\n   descriptions are identical
      to those described in Section 5.\n   When the answerer receives an SDP with
      more media descriptions than\n   the previous SDP from the offerer, or it receives
      an SDP with a media\n   stream in a slot where the port was previously zero,
      the answerer\n   knows that new media streams are being added.  These can be
      rejected\n   or accepted by placing an appropriately structured media description\n
      \  in the answer.  The procedures for constructing the new media\n   description
      in the answer are described in Section 6.\n"
    title: 8.1 Adding a Media Stream
  - contents:
    - "8.2 Removing a Media Stream\n   Existing media streams are removed by creating
      a new SDP with the\n   port number for that stream set to zero.  The stream
      description MAY\n   omit all attributes present previously, and MAY list just
      a single\n   media format.\n   A stream that is offered with a port of zero
      MUST be marked with port\n   zero in the answer.  Like the offer, the answer
      MAY omit all\n   attributes present previously, and MAY list just a single media\n
      \  format from amongst those in the offer.\n   Removal of a media stream implies
      that media is no longer sent for\n   that stream, and any media that is received
      is discarded.  In the\n   case of RTP, RTCP transmission also ceases, as does
      processing of any\n   received RTCP packets.  Any resources associated with
      it can be\n   released.  The user interface might indicate that the stream has\n
      \  terminated, by closing the associated window on a PC, for example.\n"
    title: 8.2 Removing a Media Stream
  - contents:
    - "8.3 Modifying a Media Stream\n   Nearly all characteristics of a media stream
      can be modified.\n"
    - contents:
      - "8.3.1 Modifying Address, Port or Transport\n   The port number for a stream
        MAY be changed.  To do this, the offerer\n   creates a new media description,
        with the port number in the m line\n   different from the corresponding stream
        in the previous SDP.  If only\n   the port number is to be changed, the rest
        of the media stream\n   description SHOULD remain unchanged.  The offerer
        MUST be prepared to\n   receive media on both the old and new ports as soon
        as the offer is\n   sent.  The offerer SHOULD NOT cease listening for media
        on the old\n   port until the answer is received and media arrives on the
        new port.\n   Doing so could result in loss of media during the transition.\n
        \  Received, in this case, means that the media is passed to a media\n   sink.
        \ This means that if there is a playout buffer, the agent would\n   continue
        to listen on the old port until the media on the new port\n   reached the
        top of the playout buffer.  At that time, it MAY cease\n   listening for media
        on the old port.\n   The corresponding media stream in the answer MAY be the
        same as the\n   stream in the previous SDP from the answerer, or it MAY be
        different.\n   If the updated stream is accepted by the answerer, the answerer\n
        \  SHOULD begin sending traffic for that stream to the new port\n   immediately.
        \ If the answerer changes the port from the previous SDP,\n   it MUST be prepared
        to receive media on both the old and new ports as\n   soon as the answer is
        sent.  The answerer MUST NOT cease listening\n   for media on the old port
        until media arrives on the new port.  At\n   that time, it MAY cease listening
        for media on the old port.  The\n   same is true for an offerer that sends
        an updated offer with a new\n   port; it MUST NOT cease listening for media
        on the old port until\n   media arrives on the new port.\n   Of course, if
        the offered stream is rejected, the offerer can cease\n   being prepared to
        receive using the new port as soon as the rejection\n   is received.\n   To
        change the IP address where media is sent to, the same procedure\n   is followed
        for changing the port number.  The only difference is\n   that the connection
        line is updated, not the port number.\n   The transport for a stream MAY be
        changed.  The process for doing\n   this is identical to changing the port,
        except the transport is\n   updated, not the port.\n"
      title: 8.3.1 Modifying Address, Port or Transport
    - contents:
      - "8.3.2 Changing the Set of Media Formats\n   The list of media formats used
        in the session MAY be changed.  To do\n   this, the offerer creates a new
        media description, with the list of\n   media formats in the \"m=\" line different
        from the corresponding media\n   stream in the previous SDP.  This list MAY
        include new formats, and\n   MAY remove formats present from the previous
        SDP.  However, in the\n   case of RTP, the mapping from a particular dynamic
        payload type\n   number to a particular codec within that media stream MUST
        NOT change\n   for the duration of a session.  For example, if A generates
        an offer\n   with G.711 assigned to dynamic payload type number 46, payload
        type\n   number 46 MUST refer to G.711 from that point forward in any offers\n
        \  or answers for that media stream within the session.  However, it is\n
        \  acceptable for multiple payload type numbers to be mapped to the same\n
        \  codec, so that an updated offer could also use payload type number 72\n
        \  for G.711.\n      The mappings need to remain fixed for the duration of
        the session\n      because of the loose synchronization between signaling
        exchanges\n      of SDP and the media stream.\n   The corresponding media
        stream in the answer is formulated as\n   described in Section 6, and may
        result in a change in media formats\n   as well.  Similarly, as described
        in Section 6, as soon as it sends\n   its answer, the answerer MUST begin
        sending media using any formats\n   in the offer that were also present in
        the answer, and SHOULD use the\n   most preferred format in the offer that
        was also listed in the answer\n   (assuming the stream allows for sending),
        and MUST NOT send using any\n   formats that are not in the offer, even if
        they were present in a\n   previous SDP from the peer.  Similarly, when the
        offerer receives the\n   answer, it MUST begin sending media using any formats
        in the answer,\n   and SHOULD use the most preferred one (assuming the stream
        allows for\n   sending), and MUST NOT send using any formats that are not
        in the\n   answer, even if they were present in a previous SDP from the peer.\n
        \  When an agent ceases using a media format (by not listing that format\n
        \  in an offer or answer, even though it was in a previous SDP) the\n   agent
        will still need to be prepared to receive media with that\n   format for a
        brief time.  How does it know when it can be prepared to\n   stop receiving
        with that format? If it needs to know, there are three\n   techniques that
        can be applied.  First, the agent can change ports in\n   addition to changing
        formats.  When media arrives on the new port, it\n   knows that the peer has
        ceased sending with the old format, and it\n   can cease being prepared to
        receive with it.  This approach has the\n   benefit of being media format
        independent.  However, changes in ports\n   may require changes in resource
        reservation or rekeying of security\n   protocols.  The second approach is
        to use a totally new set of\n   dynamic payload types for all codecs when
        one is discarded.  When\n   media is received with one of the new payload
        types, the agent knows\n   that the peer has ceased sending with the old format.
        \ This approach\n   doesn't affect reservations or security contexts, but
        it is RTP\n   specific and wasteful of a very small payload type space.  A
        third\n   approach is to use a timer.  When the SDP from the peer is received,\n
        \  the timer is set.  When it fires, the agent can cease being prepared\n
        \  to receive with the old format.  A value of one minute would\n   typically
        be more than sufficient.  In some cases, an agent may not\n   care, and thus
        continually be prepared to receive with the old\n   formats.  Nothing need
        be done in this case.\n   Of course, if the offered stream is rejected, the
        offer can cease\n   being prepared to receive using any new formats as soon
        as the\n   rejection is received.\n"
      title: 8.3.2 Changing the Set of Media Formats
    - contents:
      - "8.3.3 Changing Media Types\n   The media type (audio, video, etc.) for a
        stream MAY be changed.  It\n   is RECOMMENDED that the media type be changed
        (as opposed to adding a\n   new stream), when the same logical data is being
        conveyed, but just\n   in a different media format.  This is particularly
        useful for\n   changing between voiceband fax and fax in a single stream,
        which are\n   both separate media types.  To do this, the offerer creates
        a new\n   media description, with a new media type, in place of the description\n
        \  in the previous SDP which is to be changed.\n   The corresponding media
        stream in the answer is formulated as\n   described in Section 6.  Assuming
        the stream is acceptable, the\n   answerer SHOULD begin sending with the new
        media type and formats as\n   soon as it receives the offer. The offerer MUST
        be prepared to\n   receive media with both the old and new types until the
        answer is\n   received, and media with the new type is received and reaches
        the top\n   of the playout buffer.\n"
      title: 8.3.3 Changing Media Types
    - contents:
      - "8.3.4 Changing Attributes\n   Any other attributes in a media description
        MAY be updated in an\n   offer or answer.  Generally, an agent MUST send media
        (if the\n   directionality of the stream allows) using the new parameters
        once\n   the SDP with the change is received.\n"
      title: 8.3.4 Changing Attributes
    title: 8.3 Modifying a Media Stream
  - contents:
    - "8.4 Putting a Unicast Media Stream on Hold\n   If a party in a call wants to
      put the other party \"on hold\", i.e.,\n   request that it temporarily stops
      sending one or more unicast media\n   streams, a party offers the other an updated
      SDP.\n   If the stream to be placed on hold was previously a sendrecv media\n
      \  stream, it is placed on hold by marking it as sendonly.  If the\n   stream
      to be placed on hold was previously a recvonly media stream,\n   it is placed
      on hold by marking it inactive.\n   This means that a stream is placed \"on
      hold\" separately in each\n   direction.  Each stream is placed \"on hold\"
      independently.  The\n   recipient of an offer for a stream on-hold SHOULD NOT
      automatically\n   return an answer with the corresponding stream on hold.  An
      SDP with\n   all streams \"on hold\" is referred to as held SDP.\n      Certain
      third party call control scenarios do not work when an\n      answerer responds
      to held SDP with held SDP.\n   Typically, when a user \"presses\" hold, the
      agent will generate an\n   offer with all streams in the SDP indicating a direction
      of sendonly,\n   and it will also locally mute, so that no media is sent to
      the far\n   end, and no media is played out.\n   RFC 2543 [10] specified that
      placing a user on hold was accomplished\n   by setting the connection address
      to 0.0.0.0.  Its usage for putting\n   a call on hold is no longer recommended,
      since it doesn't allow for\n   RTCP to be used with held streams, doesn't work
      with IPv6, and breaks\n   with connection oriented media.  However, it can be
      useful in an\n   initial offer when the offerer knows it wants to use a particular
      set\n   of media streams and formats, but doesn't know the addresses and\n   ports
      at the time of the offer.  Of course, when used, the port\n   number MUST NOT
      be zero, which would specify that the stream has been\n   disabled.  An agent
      MUST be capable of receiving SDP with a\n   connection address of 0.0.0.0, in
      which case it means that neither\n   RTP nor RTCP should be sent to the peer.\n"
    title: 8.4 Putting a Unicast Media Stream on Hold
  title: 8 Modifying the Session
- contents:
  - "9 Indicating Capabilities\n   Before an agent sends an offer, it is helpful to
    know if the media\n   formats in that offer would be acceptable to the answerer.
    \ Certain\n   protocols, like SIP, provide a means to query for such capabilities.\n
    \  SDP can be used in responses to such queries to indicate\n   capabilities.
    \ This section describes how such an SDP message is\n   formatted.  Since SDP
    has no way to indicate that the message is for\n   the purpose of capability indication,
    this is determined from the\n   context of the higher layer protocol.  The ability
    of baseline SDP to\n   indicate capabilities is very limited.  It cannot express
    allowed\n   parameter ranges or values, and can not be done in parallel with an\n
    \  offer/answer itself.  Extensions might address such limitations in\n   the
    future.\n   An SDP constructed to indicate media capabilities is structured as\n
    \  follows.  It MUST be a valid SDP, except that it MAY omit both \"e=\"\n   and
    \"p=\" lines.  The \"t=\" line MUST be equal to \"0 0\".  For each\n   media type
    supported by the agent, there MUST be a corresponding\n   media description of
    that type.  The session ID in the origin field\n   MUST be unique for each SDP
    constructed to indicate media\n   capabilities.  The port MUST be set to zero,
    but the connection\n   address is arbitrary.  The usage of port zero makes sure
    that an SDP\n   formatted for capabilities does not cause media streams to be\n
    \  established if it is interpreted as an offer or answer.\n   The transport component
    of the \"m=\" line indicates the transport for\n   that media type.  For each
    media format of that type supported by the\n   agent, there SHOULD be a media
    format listed in the \"m=\" line.  In\n   the case of RTP, if dynamic payload
    types are used, an rtpmap\n   attribute MUST be present to bind the type to a
    specific format.\n   There is no way to indicate constraints, such as how many\n
    \  simultaneous streams can be supported for a particular codec, and so\n   on.\n
    \  v=0\n   o=carol 28908764872 28908764872 IN IP4 100.3.6.6\n   s=-\n   t=0 0\n
    \  c=IN IP4 192.0.2.4\n   m=audio 0 RTP/AVP 0 1 3\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:1
    1016/8000\n   a=rtpmap:3 GSM/8000\n   m=video 0 RTP/AVP 31 34\n   a=rtpmap:31
    H261/90000\n   a=rtpmap:34 H263/90000\n   Figure 1: SDP Indicating Capabilities\n
    \  The SDP of Figure 1 indicates that the agent can support three audio\n   codecs
    (PCMU, 1016, and GSM) and two video codecs (H.261 and H.263).\n"
  title: 9 Indicating Capabilities
- contents:
  - "10 Example Offer/Answer Exchanges\n   This section provides example offer/answer
    exchanges.\n"
  - contents:
    - "10.1 Basic Exchange\n   Assume that the caller, Alice, has included the following
      description\n   in her offer.  It includes a bidirectional audio stream and
      two\n   bidirectional video streams, using H.261 (payload type 31) and MPEG\n
      \  (payload type 32).  The offered SDP is:\n   v=0\n   o=alice 2890844526 2890844526
      IN IP4 host.anywhere.com\n   s=\n   c=IN IP4 host.anywhere.com\n   t=0 0\n   m=audio
      49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   m=video 51372 RTP/AVP 31\n   a=rtpmap:31
      H261/90000\n   m=video 53000 RTP/AVP 32\n   a=rtpmap:32 MPV/90000\n   The callee,
      Bob, does not want to receive or send the first video\n   stream, so he returns
      the SDP below as the answer:\n   v=0\n   o=bob 2890844730 2890844730 IN IP4
      host.example.com\n   s=\n   c=IN IP4 host.example.com\n   t=0 0\n   m=audio
      49920 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   m=video 0 RTP/AVP 31\n   m=video
      53000 RTP/AVP 32\n   a=rtpmap:32 MPV/90000\n   At some point later, Bob decides
      to change the port where he will\n   receive the audio stream (from 49920 to
      65422), and at the same time,\n   add an additional audio stream as receive
      only, using the RTP payload\n   format for events [9].  Bob offers the following
      SDP in the offer:\n   v=0\n   o=bob 2890844730 2890844731 IN IP4 host.example.com\n
      \  s=\n   c=IN IP4 host.example.com\n   t=0 0\n   m=audio 65422 RTP/AVP 0\n
      \  a=rtpmap:0 PCMU/8000\n   m=video 0 RTP/AVP 31\n   m=video 53000 RTP/AVP 32\n
      \  a=rtpmap:32 MPV/90000\n   m=audio 51434 RTP/AVP 110\n   a=rtpmap:110 telephone-events/8000\n
      \  a=recvonly\n   Alice accepts the additional media stream, and so generates
      the\n   following answer:\n   v=0\n   o=alice 2890844526 2890844527 IN IP4 host.anywhere.com\n
      \  s=\n   c=IN IP4 host.anywhere.com\n   t=0 0\n   m=audio 49170 RTP/AVP 0\n
      \  a=rtpmap:0 PCMU/8000\n   m=video 0 RTP/AVP 31\n   a=rtpmap:31 H261/90000\n
      \  m=video 53000 RTP/AVP 32\n   a=rtpmap:32 MPV/90000\n   m=audio 53122 RTP/AVP
      110\n   a=rtpmap:110 telephone-events/8000\n   a=sendonly\n"
    title: 10.1 Basic Exchange
  - contents:
    - "10.2 One of N Codec Selection\n   A common occurrence in embedded phones is
      that the Digital Signal\n   Processor (DSP) used for compression can support
      multiple codecs at a\n   time, but once that codec is selected, it cannot be
      readily changed\n   on the fly.  This example shows how a session can be set
      up using an\n   initial offer/answer exchange, followed immediately by a second
      one\n   to lock down the set of codecs.\n   The initial offer from Alice to
      Bob indicates a single audio stream\n   with the three audio codecs that are
      available in the DSP.  The\n   stream is marked as inactive, since media cannot
      be received until a\n   codec is locked down:\n   v=0\n   o=alice 2890844526
      2890844526 IN IP4 host.anywhere.com\n   s=\n   c=IN IP4 host.anywhere.com\n
      \  t=0 0\n   m=audio 62986 RTP/AVP 0 4 18\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:4
      G723/8000\n   a=rtpmap:18 G729/8000\n   a=inactive\n   Bob can support dynamic
      switching between PCMU and G.723.  So, he\n   sends the following answer:\n
      \  v=0\n   o=bob 2890844730 2890844731 IN IP4 host.example.com\n   s=\n   c=IN
      IP4 host.example.com\n   t=0 0\n   m=audio 54344 RTP/AVP 0 4\n   a=rtpmap:0
      PCMU/8000\n   a=rtpmap:4 G723/8000\n   a=inactive\n   Alice can then select
      any one of these two codecs.  So, she sends an\n   updated offer with a sendrecv
      stream:\n   v=0\n   o=alice 2890844526 2890844527 IN IP4 host.anywhere.com\n
      \  s=\n   c=IN IP4 host.anywhere.com\n   t=0 0\n   m=audio 62986 RTP/AVP 4\n
      \  a=rtpmap:4 G723/8000\n   a=sendrecv\n   Bob accepts the single codec:\n   v=0\n
      \  o=bob 2890844730 2890844732 IN IP4 host.example.com\n   s=\n   c=IN IP4 host.example.com\n
      \  t=0 0\n   m=audio 54344 RTP/AVP 4\n   a=rtpmap:4 G723/8000\n   a=sendrecv\n
      \  If the answerer (Bob), was only capable of supporting one-of-N\n   codecs,
      Bob would select one of the codecs from the offer, and place\n   that in his
      answer. In this case, Alice would do a re-INVITE to\n   activate that stream
      with that codec.\n   As an alternative to using \"a=inactive\" in the first
      exchange, Alice\n   can list all codecs, and as soon as she receives media from
      Bob,\n   generate an updated offer locking down the codec to the one just\n
      \  received. Of course, if Bob only supports one-of-N codecs, there\n   would
      only be one codec in his answer, and in this case, there is no\n   need for
      a re-INVITE to lock down to a single codec.\n"
    title: 10.2 One of N Codec Selection
  title: 10 Example Offer/Answer Exchanges
- contents:
  - "11 Security Considerations\n   There are numerous attacks possible if an attacker
    can modify offers\n   or answers in transit.  Generally, these include diversion
    of media\n   streams (enabling eavesdropping), disabling of calls, and injection\n
    \  of unwanted media streams.  If a passive listener can construct fake\n   offers,
    and inject those into an exchange, similar attacks are\n   possible.  Even if
    an attacker can simply observe offers and answers,\n   they can inject media streams
    into an existing conversation.\n   Offer/answer relies on transport within an
    application signaling\n   protocol, such as SIP.  It also relies on that protocol
    for security\n   capabilities.  Because of the attacks described above, that protocol\n
    \  MUST provide a means for end-to-end authentication and integrity\n   protection
    of offers and answers.  It SHOULD offer encryption of\n   bodies to prevent eavesdropping.
    \ However, media injection attacks\n   can alternatively be resolved through authenticated
    media exchange,\n   and therefore the encryption requirement is a SHOULD instead
    of a\n   MUST.\n   Replay attacks are also problematic.  An attacker can replay
    an old\n   offer, perhaps one that had put media on hold, and thus disable media\n
    \  streams in a conversation.  Therefore, the application protocol MUST\n   provide
    a secure way to sequence offers and answers, and to detect\n   and reject old
    offers or answers.\n   SIP [7] meets all of these requirements.\n"
  title: 11 Security Considerations
- contents:
  - "12 IANA Considerations\n   There are no IANA considerations with this specification.\n"
  title: 12 IANA Considerations
- contents:
  - "13 Acknowledgements\n   The authors would like to thank Allison Mankin, Rohan
    Mahy, Joerg\n   Ott, and Flemming Andreasen for their detailed comments.\n"
  title: 13 Acknowledgements
- contents:
  - "14 Normative References\n   [1]   Handley, M. and V. Jacobson, \"SDP: Session
    Description\n         Protocol\", RFC 2327, April 1998.\n   [2]   Bradner, S.,
    \"Key Words for Use in RFCs to Indicate Requirement\n         Levels\", BCP 14,
    RFC 2119, March 1997.\n   [3]   Kumar, R. and M. Mostafa, \"Conventions For the
    Use of The\n         Session Description Protocol (SDP) for ATM Bearer Connections\",\n
    \        RFC 3108, May 2001.\n   [4]   Schulzrinne, H., Casner, S, Frederick,
    R. and V. Jacobson,\n         \"RTP: A Transport Protocol for Real-Time Applications\",
    RFC\n         1889, January 1996.\n   [5]   Schulzrinne, H., \"RTP Profile for
    Audio and Video Conferences\n         with Minimal Control\", RFC 1890, January
    1996.\n"
  title: 14 Normative References
- contents:
  - "15 Informative References\n   [6]   Handley, M., Perkins, C. and E. Whelan, \"Session
    Announcement\n         Protocol\", RFC 2974, October 2000.\n   [7]   Rosenberg,
    J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n         Peterson, J., Sparks,
    R., Handley, M. and E. Schooler, \"SIP:\n         Session Initiation Protocol\",
    RFC 3261, June 2002.\n   [8]   Schulzrinne, H., Rao, A. and R. Lanphier, \"Real
    Time Streaming\n         Protocol (RTSP)\", RFC 2326, April 1998.\n   [9]   Schulzrinne,
    H. and S. Petrack, \"RTP Payload for DTMF Digits,\n         Telephony Tones and
    Telephony Signals\", RFC 2833, May 2000.\n   [10]  Handley, M., Schulzrinne, H.,
    Schooler, E. and J. Rosenberg,\n         \"SIP: Session Initiation Protocol\",
    RFC 2543, March 1999.\n"
  title: 15 Informative References
- contents:
  - "16 Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   72 Eagle Rock
    Avenue\n   First Floor\n   East Hanover, NJ 07936\n   EMail: jdrosen@dynamicsoft.com\n
    \  Henning Schulzrinne\n   Dept. of Computer Science\n   Columbia University\n
    \  1214 Amsterdam Avenue\n   New York, NY 10027\n   USA\n   EMail: schulzrinne@cs.columbia.edu\n"
  title: 16 Authors' Addresses
- contents:
  - "17.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 17.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
