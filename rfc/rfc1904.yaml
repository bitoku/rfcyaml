- title: __initial_text__
  contents:
  - "              Conformance Statements for Version 2 of the\n              Simple\
    \ Network Management Protocol (SNMPv2)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ................................................\
    \    2\n   1.1 A Note on Terminology ......................................  \
    \  3\n   2. Definitions .................................................    3\n\
    \   2.1 The OBJECT-GROUP macro .....................................    3\n  \
    \ 2.2 The NOTIFICATION-GROUP macro ...............................    4\n   2.3\
    \ The MODULE-COMPLIANCE macro ................................    5\n   2.4 The\
    \ AGENT-CAPABILITIES macro ...............................    7\n   3. Mapping\
    \ of the OBJECT-GROUP macro ...........................    9\n   3.1 Mapping of\
    \ the OBJECTS clause ..............................   10\n   3.2 Mapping of the\
    \ STATUS clause ...............................   10\n   3.3 Mapping of the DESCRIPTION\
    \ clause ..........................   10\n   3.4 Mapping of the REFERENCE clause\
    \ ............................   10\n   3.5 Mapping of the OBJECT-GROUP value\
    \ ..........................   10\n   3.6 Usage Example ..............................................\
    \   11\n   4. Mapping of the NOTIFICATION-GROUP macro .....................  \
    \ 11\n   4.1 Mapping of the NOTIFICATIONS clause ........................   11\n\
    \   4.2 Mapping of the STATUS clause ...............................   11\n  \
    \ 4.3 Mapping of the DESCRIPTION clause ..........................   12\n   4.4\
    \ Mapping of the REFERENCE clause ............................   12\n   4.5 Mapping\
    \ of the NOTIFICATION-GROUP value ....................   12\n   4.6 Usage Example\
    \ ..............................................   12\n   5. Mapping of the MODULE-COMPLIANCE\
    \ macro ......................   12\n   5.1 Mapping of the STATUS clause ...............................\
    \   13\n   5.2 Mapping of the DESCRIPTION clause ..........................  \
    \ 13\n   5.3 Mapping of the REFERENCE clause ............................   13\n\
    \   5.4 Mapping of the MODULE clause ...............................   13\n  \
    \ 5.4.1 Mapping of the MANDATORY-GROUPS clause ...................   13\n   5.4.2\
    \ Mapping of the GROUP clause ..............................   14\n   5.4.3 Mapping\
    \ of the OBJECT clause .............................   14\n   5.4.3.1 Mapping\
    \ of the SYNTAX clause ...........................   14\n   5.4.3.2 Mapping of\
    \ the WRITE-SYNTAX clause .....................   15\n   5.4.3.3 Mapping of the\
    \ MIN-ACCESS clause .......................   15\n   5.4.4 Mapping of the DESCRIPTION\
    \ clause ........................   15\n   5.5 Mapping of the MODULE-COMPLIANCE\
    \ value .....................   15\n   5.6 Usage Example ..............................................\
    \   16\n   6. Mapping of the AGENT-CAPABILITIES macro .....................  \
    \ 16\n   6.1 Mapping of the PRODUCT-RELEASE clause ......................   17\n\
    \   6.2 Mapping of the STATUS clause ...............................   17\n  \
    \ 6.3 Mapping of the DESCRIPTION clause ..........................   17\n   6.4\
    \ Mapping of the REFERENCE clause ............................   17\n   6.5 Mapping\
    \ of the SUPPORTS clause .............................   18\n   6.5.1 Mapping\
    \ of the INCLUDES clause ...........................   18\n   6.5.2 Mapping of\
    \ the VARIATION clause ..........................   18\n   6.5.2.1 Mapping of\
    \ the SYNTAX clause ...........................   18\n   6.5.2.2 Mapping of the\
    \ WRITE-SYNTAX clause .....................   18\n   6.5.2.3 Mapping of the ACCESS\
    \ clause ...........................   19\n   6.5.2.4 Mapping of the CREATION-REQUIRES\
    \ clause ................   19\n   6.5.2.5 Mapping of the DEFVAL clause ...........................\
    \   20\n   6.5.2.6 Mapping of the DESCRIPTION clause ......................  \
    \ 20\n   6.6 Mapping of the AGENT-CAPABILITIES value ....................   20\n\
    \   6.7 Usage Example ..............................................   20\n  \
    \ 7. Extending an Information Module .............................   22\n   7.1\
    \ Conformance Groups .........................................   22\n   7.2 Compliance\
    \ Definitions .....................................   22\n   7.3 Capabilities\
    \ Definitions ...................................   22\n   8. Security Considerations\
    \ .....................................   23\n   9. Editor's Address ............................................\
    \   23\n   10. Acknowledgements ...........................................  \
    \ 23\n   11. References .................................................   24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A management system contains:  several (potentially many)\
    \ nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   Management\
    \ information is viewed as a collection of managed objects,\n   residing in a\
    \ virtual information store, termed the Management\n   Information Base (MIB).\
    \  Collections of related objects are defined\n   in MIB modules.  These modules\
    \ are written using a subset of OSI's\n   Abstract Syntax Notation One (ASN.1)\
    \ [1], termed the Structure of\n   Management Information (SMI) [2].\n   It may\
    \ be useful to define the acceptable lower-bounds of\n   implementation, along\
    \ with the actual level of implementation\n   achieved.  It is the purpose of\
    \ this document to define the notation\n   used for these purposes.\n"
- title: 1.1.  A Note on Terminology
  contents:
  - "1.1.  A Note on Terminology\n   For the purpose of exposition, the original Internet-standard\
    \ Network\n   Management Framework, as described in RFCs 1155 (STD 16), 1157 (STD\n\
    \   15), and 1212 (STD 16), is termed the SNMP version 1 framework\n   (SNMPv1).\
    \  The current framework is termed the SNMP version 2\n   framework (SNMPv2).\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: SNMPv2-CONF DEFINITIONS ::= BEGIN
  contents:
  - 'SNMPv2-CONF DEFINITIONS ::= BEGIN

    '
- title: -- definitions for conformance groups
  contents:
  - '-- definitions for conformance groups

    '
- title: OBJECT-GROUP MACRO ::=
  contents:
  - 'OBJECT-GROUP MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  ObjectsPart\n               \
    \   \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n              \
    \    ReferPart\n    VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n\
    \    ObjectsPart ::=\n                  \"OBJECTS\" \"{\" Objects \"}\"\n    Objects\
    \ ::=\n                  Object\n                | Objects \",\" Object\n    Object\
    \ ::=\n                  value(Name ObjectName)\n    Status ::=\n            \
    \      \"current\"\n                | \"deprecated\"\n                | \"obsolete\"\
    \n    ReferPart ::=\n                  \"REFERENCE\" Text\n                | empty\n\
    \    -- uses the NVT ASCII character set\n    Text ::= \"\"\"\" string \"\"\"\"\
    \n"
- title: END
  contents:
  - 'END

    '
- title: -- more definitions for conformance groups
  contents:
  - '-- more definitions for conformance groups

    '
- title: NOTIFICATION-GROUP MACRO ::=
  contents:
  - 'NOTIFICATION-GROUP MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  NotificationsPart\n         \
    \         \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n        \
    \          ReferPart\n    VALUE NOTATION ::=\n                  value(VALUE OBJECT\
    \ IDENTIFIER)\n    NotificationsPart ::=\n                  \"NOTIFICATIONS\"\
    \ \"{\" Notifications \"}\"\n    Notifications ::=\n                  Notification\n\
    \                | Notifications \",\" Notification\n    Notification ::=\n  \
    \                value(Name NotificationName)\n    Status ::=\n              \
    \    \"current\"\n                | \"deprecated\"\n                | \"obsolete\"\
    \n    ReferPart ::=\n                  \"REFERENCE\" Text\n                | empty\n\
    \    -- uses the NVT ASCII character set\n    Text ::= \"\"\"\" string \"\"\"\"\
    \n"
- title: END
  contents:
  - 'END

    '
- title: -- definitions for compliance statements
  contents:
  - '-- definitions for compliance statements

    '
- title: MODULE-COMPLIANCE MACRO ::=
  contents:
  - 'MODULE-COMPLIANCE MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"STATUS\" Status\n         \
    \         \"DESCRIPTION\" Text\n                  ReferPart\n                \
    \  ModulePart\n    VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n\
    \    Status ::=\n                  \"current\"\n                | \"deprecated\"\
    \n                | \"obsolete\"\n    ReferPart ::=\n                \"REFERENCE\"\
    \ Text\n              | empty\n    ModulePart ::=\n                  Modules\n\
    \                | empty\n    Modules ::=\n                  Module\n        \
    \        | Modules Module\n    Module ::=\n                  -- name of module\
    \ --\n                  \"MODULE\" ModuleName\n                  MandatoryPart\n\
    \                  CompliancePart\n    ModuleName ::=\n                  modulereference\
    \ ModuleIdentifier\n                -- must not be empty unless contained\n  \
    \              -- in MIB Module\n                | empty\n    ModuleIdentifier\
    \ ::=\n                  value(ModuleID OBJECT IDENTIFIER)\n                |\
    \ empty\n    MandatoryPart ::=\n                  \"MANDATORY-GROUPS\" \"{\" Groups\
    \ \"}\"\n                | empty\n    Groups ::=\n                  Group\n  \
    \              | Groups \",\" Group\n    Group ::=\n                  value(Group\
    \ OBJECT IDENTIFIER)\n    CompliancePart ::=\n                  Compliances\n\
    \                | empty\n    Compliances ::=\n                  Compliance\n\
    \                | Compliances Compliance\n    Compliance ::=\n              \
    \    ComplianceGroup\n                | Object\n    ComplianceGroup ::=\n    \
    \              \"GROUP\" value(Name OBJECT IDENTIFIER)\n                  \"DESCRIPTION\"\
    \ Text\n    Object ::=\n                  \"OBJECT\" value(Name ObjectName)\n\
    \                  SyntaxPart\n                  WriteSyntaxPart\n           \
    \       AccessPart\n                  \"DESCRIPTION\" Text\n    -- must be a refinement\
    \ for object's SYNTAX clause\n    SyntaxPart ::=\n                  \"SYNTAX\"\
    \ type(SYNTAX)\n                | empty\n    -- must be a refinement for object's\
    \ SYNTAX clause\n    WriteSyntaxPart ::=\n                  \"WRITE-SYNTAX\" type(WriteSYNTAX)\n\
    \                | empty\n    AccessPart ::=\n                  \"MIN-ACCESS\"\
    \ Access\n                | empty\n    Access ::=\n                  \"not-accessible\"\
    \n                | \"accessible-for-notify\"\n                | \"read-only\"\
    \n                | \"read-write\"\n                | \"read-create\"\n    --\
    \ uses the NVT ASCII character set\n    Text ::= \"\"\"\" string \"\"\"\"\n"
- title: END
  contents:
  - 'END

    '
- title: -- definitions for capabilities statements
  contents:
  - '-- definitions for capabilities statements

    '
- title: AGENT-CAPABILITIES MACRO ::=
  contents:
  - 'AGENT-CAPABILITIES MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"PRODUCT-RELEASE\" Text\n  \
    \                \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n \
    \                 ReferPart\n                  ModulePart\n    VALUE NOTATION\
    \ ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    Status ::=\n    \
    \              \"current\"\n                | \"obsolete\"\n    ReferPart ::=\n\
    \                \"REFERENCE\" Text\n              | empty\n    ModulePart ::=\n\
    \                  Modules\n                | empty\n    Modules ::=\n       \
    \           Module\n                | Modules Module\n    Module ::=\n       \
    \           -- name of module --\n                  \"SUPPORTS\" ModuleName\n\
    \                  \"INCLUDES\" \"{\" Groups \"}\"\n                  VariationPart\n\
    \    ModuleName ::=\n                  identifier ModuleIdentifier\n    ModuleIdentifier\
    \ ::=\n                  value(ModuleID OBJECT IDENTIFIER)\n                |\
    \ empty\n    Groups ::=\n                  Group\n                | Groups \"\
    ,\" Group\n    Group ::=\n                  value(Name OBJECT IDENTIFIER)\n  \
    \  VariationPart ::=\n                  Variations\n                | empty\n\
    \    Variations ::=\n                  Variation\n                | Variations\
    \ Variation\n    Variation ::=\n                  ObjectVariation\n          \
    \      | NotificationVariation\n    NotificationVariation ::=\n              \
    \    \"VARIATION\" value(Name NotificationName)\n                  AccessPart\n\
    \                  \"DESCRIPTION\" Text\n    ObjectVariation ::=\n           \
    \       \"VARIATION\" value(Name ObjectName)\n                  SyntaxPart\n \
    \                 WriteSyntaxPart\n                  AccessPart\n            \
    \      CreationPart\n                  DefValPart\n                  \"DESCRIPTION\"\
    \ Text\n    -- must be a refinement for object's SYNTAX clause\n    SyntaxPart\
    \ ::=\n                  \"SYNTAX\" type(SYNTAX)\n                | empty\n  \
    \  -- must be a refinement for object's SYNTAX clause\n    WriteSyntaxPart ::=\n\
    \                  \"WRITE-SYNTAX\" type(WriteSYNTAX)\n                | empty\n\
    \    AccessPart ::=\n                  \"ACCESS\" Access\n                | empty\n\
    \    Access ::=\n                  \"not-implemented\"\n                -- only\
    \ \"not-implemented\" for notifications\n                | \"accessible-for-notify\"\
    \n                | \"read-only\"\n                | \"read-write\"\n        \
    \        | \"read-create\"\n                -- following is for backward-compatibility\
    \ only\n                | \"write-only\"\n    CreationPart ::=\n             \
    \     \"CREATION-REQUIRES\" \"{\" Cells \"}\"\n                | empty\n    Cells\
    \ ::=\n                  Cell\n                | Cells \",\" Cell\n    Cell ::=\n\
    \                  value(Cell ObjectName)\n    DefValPart ::=\n              \
    \    \"DEFVAL\" \"{\" value(Defval ObjectSyntax) \"}\"\n                | empty\n\
    \    -- uses the NVT ASCII character set\n    Text ::= \"\"\"\" string \"\"\"\"\
    \n"
- title: END
  contents:
  - 'END

    '
- title: END
  contents:
  - 'END

    '
- title: 3.  Mapping of the OBJECT-GROUP macro
  contents:
  - "3.  Mapping of the OBJECT-GROUP macro\n   For conformance purposes, it is useful\
    \ to define a collection of\n   related managed objects.  The OBJECT-GROUP macro\
    \ is used to define\n   each such collection of related objects.  It should be\
    \ noted that the\n   expansion of the OBJECT-GROUP macro is something which conceptually\n\
    \   happens during implementation and not during run-time.\n   To \"implement\"\
    \ an object, a SNMPv2 entity acting in an agent role\n   must return a reasonably\
    \ accurate value for management protocol\n   retrieval operations; similarly,\
    \ if the object is writable, then in\n   response to a management protocol set\
    \ operation, a SNMPv2 entity must\n   accordingly be able to reasonably influence\
    \ the underlying managed\n   entity.  If a SNMPv2 entity acting in an agent role\
    \ can not implement\n   an object, the management protocol provides for the SNMPv2\
    \ entity to\n   return an exception or error, e.g, noSuchObject [4].  Under no\n\
    \   circumstances shall a SNMPv2 entity return a value for objects which\n   it\
    \ does not implement -- it must always return the appropriate\n   exception or\
    \ error, as described in the protocol specification [4].\n"
- title: 3.1.  Mapping of the OBJECTS clause
  contents:
  - "3.1.  Mapping of the OBJECTS clause\n   The OBJECTS clause, which must be present,\
    \ is used to name each\n   object contained in the conformance group.  Each of\
    \ the named objects\n   must be defined in the same information module as the\
    \ OBJECT-GROUP\n   macro appears, and must have a MAX-ACCESS clause value of\n\
    \   \"accessible-for-notify\", \"read-only\", \"read-write\", or \"read-create\"\
    .\n   It is required that every object defined in an information module\n   with\
    \ a MAX-ACCESS clause other than \"not-accessible\" be contained in\n   at least\
    \ one object group.  This avoids the common error of adding a\n   new object to\
    \ an information module and forgetting to add the new\n   object to a group.\n"
- title: 3.2.  Mapping of the STATUS clause
  contents:
  - "3.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the definition is obsolete, but\n   that an implementor\
    \ may wish to support the group to foster\n   interoperability with older implementations.\n"
- title: 3.3.  Mapping of the DESCRIPTION clause
  contents:
  - "3.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   definition of that group, along with a description\
    \ of any relations\n   to other groups.  Note that generic compliance requirements\
    \ should\n   not be stated in this clause.  However, implementation relationships\n\
    \   between this group and other groups may be defined in this clause.\n"
- title: 3.4.  Mapping of the REFERENCE clause
  contents:
  - "3.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to a group  defined in some\
    \ other information module.\n   This is useful when de-osifying a MIB module produced\
    \ by some other\n   organization.\n"
- title: 3.5.  Mapping of the OBJECT-GROUP value
  contents:
  - "3.5.  Mapping of the OBJECT-GROUP value\n   The value of an invocation of the\
    \ OBJECT-GROUP macro is the name of\n   the group, which is an OBJECT IDENTIFIER,\
    \ an administratively\n   assigned name.\n"
- title: 3.6.  Usage Example
  contents:
  - "3.6.  Usage Example\n   The SNMP Group [3] is described:\n"
- title: snmpGroup OBJECT-GROUP
  contents:
  - "snmpGroup OBJECT-GROUP\n    OBJECTS { snmpInPkts,\n              snmpInBadVersions,\n\
    \              snmpInASNParseErrs,\n              snmpBadOperations,\n       \
    \       snmpSilentDrops,\n              snmpProxyDrops,\n              snmpEnableAuthenTraps\
    \ }\n    STATUS  current\n    DESCRIPTION\n            \"A collection of objects\
    \ providing basic instrumentation and\n            control of an SNMPv2 entity.\"\
    \n    ::= { snmpMIBGroups 8 }\n"
- title: According to this invocation, the conformance group named
  contents:
  - "According to this invocation, the conformance group named\n     { snmpMIBGroups\
    \ 8 }\n"
- title: contains 7 objects.
  contents:
  - 'contains 7 objects.

    '
- title: 4.  Mapping of the NOTIFICATION-GROUP macro
  contents:
  - "4.  Mapping of the NOTIFICATION-GROUP macro\n   For conformance purposes, it\
    \ is useful to define a collection of\n   notifications.  The NOTIFICATION-GROUP\
    \ macro serves this purpose.  It\n   should be noted that the expansion of the\
    \ NOTIFICATION-GROUP macro is\n   something which conceptually happens during\
    \ implementation and not\n   during run-time.\n"
- title: 4.1.  Mapping of the NOTIFICATIONS clause
  contents:
  - "4.1.  Mapping of the NOTIFICATIONS clause\n   The NOTIFICATIONS clause, which\
    \ must be present, is used to name each\n   notification contained in the conformance\
    \ group.  Each of the named\n   notifications must be defined in the same information\
    \ module as the\n   NOTIFICATION-GROUP macro appears.\n"
- title: 4.2.  Mapping of the STATUS clause
  contents:
  - "4.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the definition is obsolete, but\n   that an implementor\
    \ may wish to support the group to foster\n   interoperability with older implementations.\n"
- title: 4.3.  Mapping of the DESCRIPTION clause
  contents:
  - "4.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   definition of the group, along with a description\
    \ of any relations to\n   other groups.  Note that generic compliance requirements\
    \ should not\n   be stated in this clause.  However, implementation relationships\n\
    \   between this group and other groups may be defined in this clause.\n"
- title: 4.4.  Mapping of the REFERENCE clause
  contents:
  - "4.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to a group defined in some\
    \ other information module.\n   This is useful when de-osifying a MIB module produced\
    \ by some other\n   organization.\n"
- title: 4.5.  Mapping of the NOTIFICATION-GROUP value
  contents:
  - "4.5.  Mapping of the NOTIFICATION-GROUP value\n   The value of an invocation\
    \ of the NOTIFICATION-GROUP macro is the\n   name of the group, which is an OBJECT\
    \ IDENTIFIER, an administratively\n   assigned name.\n"
- title: 4.6.  Usage Example
  contents:
  - "4.6.  Usage Example\n   The SNMP Basic Notifications Group [3] is described:\n"
- title: snmpBasicNotificationsGroup NOTIFICATION-GROUP
  contents:
  - "snmpBasicNotificationsGroup NOTIFICATION-GROUP\n    NOTIFICATIONS { coldStart,\
    \ authenticationFailure }\n    STATUS        current\n    DESCRIPTION\n      \
    \      \"The two notifications which an SNMPv2 entity is required to\n       \
    \     implement.\"\n    ::= { snmpMIBGroups 7 }\n"
- title: According to this invocation, the conformance group named
  contents:
  - "According to this invocation, the conformance group named\n     { snmpMIBGroups\
    \ 1 }\n"
- title: contains 2 notifications.
  contents:
  - 'contains 2 notifications.

    '
- title: 5.  Mapping of the MODULE-COMPLIANCE macro
  contents:
  - "5.  Mapping of the MODULE-COMPLIANCE macro\n   The MODULE-COMPLIANCE macro is\
    \ used to convey a minimum set of\n   requirements with respect to implementation\
    \ of one or more MIB\n   modules.  It should be noted that the expansion of the\
    \ MODULE-\n   COMPLIANCE macro is something which conceptually happens during\n\
    \   implementation and not during run-time.\n   A requirement on all \"standard\"\
    \ MIB modules is that a corresponding\n   MODULE-COMPLIANCE specification is also\
    \ defined, either in the same\n   information module or in a companion information\
    \ module.\n"
- title: 5.1.  Mapping of the STATUS clause
  contents:
  - "5.1.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the specification is obsolete, but\n   that an implementor\
    \ may wish to support that object to foster\n   interoperability with older implementations.\n"
- title: 5.2.  Mapping of the DESCRIPTION clause
  contents:
  - "5.2.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   definition of this compliance statement and\
    \ should embody any\n   information which would otherwise be communicated in any\
    \ ASN.1\n   commentary annotations associated with the statement.\n"
- title: 5.3.  Mapping of the REFERENCE clause
  contents:
  - "5.3.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to a compliance statement\
    \ defined in some other\n   information module.\n"
- title: 5.4.  Mapping of the MODULE clause
  contents:
  - "5.4.  Mapping of the MODULE clause\n   The MODULE clause, which must be present,\
    \ is repeatedly used to name\n   each MIB module for which compliance requirements\
    \ are being\n   specified.  Each MIB module is named by its module name, and\n\
    \   optionally, by its associated OBJECT IDENTIFIER as well.  The module\n   name\
    \ can be omitted when the MODULE-COMPLIANCE invocation occurs\n   inside a MIB\
    \ module, to refer to the encompassing MIB module.\n"
- title: 5.4.1.  Mapping of the MANDATORY-GROUPS clause
  contents:
  - "5.4.1.  Mapping of the MANDATORY-GROUPS clause\n   The MANDATORY-GROUPS clause,\
    \ which need not be present, names the one\n   or more object or notification\
    \ groups within the correspondent MIB\n   module which are unconditionally mandatory\
    \ for implementation.  If a\n   SNMPv2 entity acting in an agent role claims compliance\
    \ to the MIB\n   module, then it must implement each and every object and notification\n\
    \   within each conformance group listed.  That is, if a SNMPv2 entity\n   returns\
    \ a noSuchObject exception in response to a management protocol\n   get operation\
    \ [4] for any object within any mandatory conformance\n   group for every MIB\
    \ view, or if the SNMPv2 entity cannot generate\n   each notification listed in\
    \ any conformance group under the\n   appropriate circumstances, then that SNMPv2\
    \ entity is not a\n   conformant implementation of the MIB module.\n"
- title: 5.4.2.  Mapping of the GROUP clause
  contents:
  - "5.4.2.  Mapping of the GROUP clause\n   The GROUP clause, which need not be present,\
    \ is repeatedly used to\n   name each object and notification group which is conditionally\n\
    \   mandatory or unconditionally optional for compliance to the MIB\n   module.\
    \  A group named in a GROUP clause must be absent from the\n   correspondent MANDATORY-GROUPS\
    \ clause.\n   Conditionally mandatory groups include those which are mandatory\
    \ only\n   if a particular protocol is implemented, or only if another group is\n\
    \   implemented.  A GROUP clause's DESCRIPTION specifies the conditions\n   under\
    \ which the group is conditionally mandatory.\n   A group which is named in neither\
    \ a MANDATORY-GROUPS clause nor a\n   GROUP clause, is unconditionally optional\
    \ for compliance to the MIB\n   module.\n"
- title: 5.4.3.  Mapping of the OBJECT clause
  contents:
  - "5.4.3.  Mapping of the OBJECT clause\n   The OBJECT clause, which need not be\
    \ present, is repeatedly used to\n   name each MIB object for which compliance\
    \ has a refined requirement\n   with respect to the MIB module definition.  The\
    \ MIB object must be\n   present in one of the conformance groups named in the\
    \ correspondent\n   MANDATORY-GROUPS clause or GROUP clauses.\n   By definition,\
    \ each object specified in an OBJECT clause follows a\n   MODULE clause which\
    \ names the information module in which that object\n   is defined.  Therefore,\
    \ the use of an IMPORTS statement, to specify\n   from where such objects are\
    \ imported, is redundant and is not\n   required in an information module.\n"
- title: 5.4.3.1.  Mapping of the SYNTAX clause
  contents:
  - "5.4.3.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which need not\
    \ be present, is used to provide a\n   refined SYNTAX for the object named in\
    \ the correspondent OBJECT\n   clause.  Note that if this clause and a WRITE-SYNTAX\
    \ clause are both\n   present, then this clause only applies when instances of\
    \ the object\n   named in the correspondent OBJECT clause are read.\n   Consult\
    \ Section 9 of [2] for more information on refined syntax.\n"
- title: 5.4.3.2.  Mapping of the WRITE-SYNTAX clause
  contents:
  - "5.4.3.2.  Mapping of the WRITE-SYNTAX clause\n   The WRITE-SYNTAX clause, which\
    \ need not be present, is used to\n   provide a refined SYNTAX for the object\
    \ named in the correspondent\n   OBJECT clause when instances of that object are\
    \ written.\n   Consult Section 9 of [2] for more information on refined syntax.\n"
- title: 5.4.3.3.  Mapping of the MIN-ACCESS clause
  contents:
  - "5.4.3.3.  Mapping of the MIN-ACCESS clause\n   The MIN-ACCESS clause, which need\
    \ not be present, is used to define\n   the minimal level of access for the object\
    \ named in the correspondent\n   OBJECT clause.  If this clause is absent, the\
    \ minimal level of access\n   is the same as the maximal level specified in the\
    \ correspondent\n   invocation of the OBJECT-TYPE macro.  If present, this clause\
    \ must\n   not specify a greater level of access than is specified in the\n  \
    \ correspondent invocation of the OBJECT-TYPE macro.\n   The level of access for\
    \ certain types of objects is fixed according\n   to their syntax definition.\
    \  These types include: conceptual tables\n   and rows, auxiliary objects, and\
    \ objects with the syntax of\n   Counter32, Counter64 (and possibly, certain types\
    \ of textual\n   conventions).  A MIN-ACCESS clause should not be present for\
    \ such\n   objects.\n   An implementation is compliant if the level of access\
    \ it provides is\n   greater or equal to the minimal level in the MODULE-COMPLIANCE\
    \ macro\n   and less or equal to the maximal level in the OBJECT-TYPE macro.\n"
- title: 5.4.4.  Mapping of the DESCRIPTION clause
  contents:
  - "5.4.4.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause must be\
    \ present for each use of the GROUP or\n   OBJECT clause.  For an OBJECT clause,\
    \ it contains a textual\n   description of the refined compliance requirement.\
    \  For a GROUP\n   clause, it contains a textual description of the conditions\
    \ under\n   which the group is conditionally mandatory or unconditionally\n  \
    \ optional.\n"
- title: 5.5.  Mapping of the MODULE-COMPLIANCE value
  contents:
  - "5.5.  Mapping of the MODULE-COMPLIANCE value\n   The value of an invocation of\
    \ the MODULE-COMPLIANCE macro is an\n   OBJECT IDENTIFIER.  As such, this value\
    \ may be authoritatively used\n   when referring to the compliance statement embodied\
    \ by that\n   invocation of the macro.\n"
- title: 5.6.  Usage Example
  contents:
  - "5.6.  Usage Example\n   The compliance statement contained in the (hypothetical)\
    \ XYZv2-MIB\n   might be:\n"
- title: xyzMIBCompliance MODULE-COMPLIANCE
  contents:
  - "xyzMIBCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n  \
    \          \"The compliance statement for XYZv2 entities which implement\n   \
    \         the XYZv2 MIB.\"\n    MODULE  -- compliance to the containing MIB module\n\
    \        MANDATORY-GROUPS { xyzSystemGroup,\n                           xyzStatsGroup,\
    \ xyzTrapGroup,\n                           xyzSetGroup,\n                   \
    \        xyzBasicNotificationsGroup }\n        GROUP   xyzV1Group\n        DESCRIPTION\n\
    \            \"The xyzV1 group is mandatory only for those\n             XYZv2\
    \ entities which also implement XYZv1.\"\n"
- title: ::= { xyzMIBCompliances 1 }
  contents:
  - "::= { xyzMIBCompliances 1 }\n   According to this invocation, to claim alignment\
    \ with the compliance\n   statement named\n     { xyzMIBCompliances 1 }\n   a\
    \ system must implement the XYZv2-MIB's xyzSystemGroup,\n   xyzStatsGroup, xyzTrapGroup,\
    \ and xyzSetGroup object conformance\n   groups, as well as the xyzBasicNotificationsGroup\
    \ notifications\n   group.  Furthermore, if the XYZv2 entity also implements XYZv1,\
    \ then\n   it must also support the XYZv1Group group, if compliance is to be\n\
    \   claimed.\n"
- title: 6.  Mapping of the AGENT-CAPABILITIES macro
  contents:
  - "6.  Mapping of the AGENT-CAPABILITIES macro\n   The AGENT-CAPABILITIES macro\
    \ is used to convey a set of capabilities\n   present in a SNMPv2 entity acting\
    \ in an agent role.  It should be\n   noted that the expansion of the AGENT-CAPABILITIES\
    \ macro is something\n   which conceptually happens during implementation and\
    \ not during run-\n   time.\n   When a MIB module is written, it is divided into\
    \ units of conformance\n   termed groups.  If a SNMPv2 entity acting in an agent\
    \ role claims to\n   implement a group, then it must implement each and every\
    \ object\n   within that group.  Of course, for whatever reason, a SNMPv2 entity\n\
    \   might implement only a subset of the groups within a MIB module.  In\n   addition,\
    \ the definition of some MIB objects leave some aspects of\n   the definition\
    \ to the discretion of an implementor.\n   Practical experience has demonstrated\
    \ a need for concisely describing\n   the capabilities of an agent with respect\
    \ to one or more MIB modules.\n   The AGENT-CAPABILITIES macro allows an agent\
    \ implementor to describe\n   the precise level of support which an agent claims\
    \ in regards to a\n   MIB group, and to bind that description to the value of\
    \ an instance\n   of sysORID [3].  In particular, some objects may have restricted\
    \ or\n   augmented syntax or access-levels.\n   If the AGENT-CAPABILITIES invocation\
    \ is given to a management-station\n   implementor, then that implementor can\
    \ build management applications\n   which optimize themselves when communicating\
    \ with a particular agent.\n   For example, the management-station can maintain\
    \ a database of these\n   invocations.  When a management-station interacts with\
    \ an agent, it\n   retrieves from the agent the values of all instances of sysORID\
    \ [3].\n   Based on this, it consults the database to locate each entry matching\n\
    \   one of the retrieved values of sysORID.  Using the located entries,\n   the\
    \ management application can now optimize its behavior accordingly.\n   Note that\
    \ the AGENT-CAPABILITIES macro specifies refinements or\n   variations with respect\
    \ to OBJECT-TYPE and NOTIFICATION-TYPE macros\n   in MIB modules, NOT with respect\
    \ to MODULE-COMPLIANCE macros in\n   compliance statements.\n"
- title: 6.1.  Mapping of the PRODUCT-RELEASE clause
  contents:
  - "6.1.  Mapping of the PRODUCT-RELEASE clause\n   The PRODUCT-RELEASE clause, which\
    \ must be present, contains a textual\n   description of the product release which\
    \ includes this set of\n   capabilities.\n"
- title: 6.2.  Mapping of the STATUS clause
  contents:
  - "6.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current (\"current\") or historic (\"\
    obsolete\").\n"
- title: 6.3.  Mapping of the DESCRIPTION clause
  contents:
  - "6.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   description of this set of capabilities.\n"
- title: 6.4.  Mapping of the REFERENCE clause
  contents:
  - "6.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to a capability statement\
    \ defined in some other\n   information module.\n"
- title: 6.5.  Mapping of the SUPPORTS clause
  contents:
  - "6.5.  Mapping of the SUPPORTS clause\n   The SUPPORTS clause, which need not\
    \ be present, is repeatedly used to\n   name each MIB module for which the agent\
    \ claims a complete or partial\n   implementation.  Each MIB module is named by\
    \ its module name, and\n   optionally, by its associated OBJECT IDENTIFIER as\
    \ well.\n"
- title: 6.5.1.  Mapping of the INCLUDES clause
  contents:
  - "6.5.1.  Mapping of the INCLUDES clause\n   The INCLUDES clause, which must be\
    \ present for each use of the\n   SUPPORTS clause, is used to name each MIB group\
    \ associated with the\n   SUPPORTS clause, which the agent claims to implement.\n"
- title: 6.5.2.  Mapping of the VARIATION clause
  contents:
  - "6.5.2.  Mapping of the VARIATION clause\n   The VARIATION clause, which need\
    \ not be present, is repeatedly used\n   to name each object or notification which\
    \ the agent implements in\n   some variant or refined fashion with respect to\
    \ the correspondent\n   invocation of the OBJECT-TYPE or NOTIFICATION-TYPE macro.\n\
    \   Note that the variation concept is meant for generic implementation\n   restrictions,\
    \ e.g., if the variation for an object depends on the\n   values of other objects,\
    \ then this should be noted in the appropriate\n   DESCRIPTION clause.\n   By\
    \ definition, each object specified in a VARIATION clause follows a\n   SUPPORTS\
    \ clause which names the information module in which that\n   object is defined.\
    \  Therefore, the use of an IMPORTS statement, to\n   specify from where such\
    \ objects are imported, is redundant and is not\n   required in an information\
    \ module.\n"
- title: 6.5.2.1.  Mapping of the SYNTAX clause
  contents:
  - "6.5.2.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which need not\
    \ be present, is used to provide a\n   refined SYNTAX for the object named in\
    \ the correspondent VARIATION\n   clause.  Note that if this clause and a WRITE-SYNTAX\
    \ clause are both\n   present, then this clause only applies when instances of\
    \ the object\n   named in the correspondent VARIATION clause are read.\n   Consult\
    \ Section 9 of [2] for more information on refined syntax.\n"
- title: 6.5.2.2.  Mapping of the WRITE-SYNTAX clause
  contents:
  - "6.5.2.2.  Mapping of the WRITE-SYNTAX clause\n   The WRITE-SYNTAX clause, which\
    \ need not be present, is used to\n   provide a refined SYNTAX for the object\
    \ named in the correspondent\n   VARIATION clause when instances of that object\
    \ are written.\n   Consult Section 9 of [2] for more information on refined syntax.\n"
- title: 6.5.2.3.  Mapping of the ACCESS clause
  contents:
  - "6.5.2.3.  Mapping of the ACCESS clause\n   The ACCESS clause, which need not\
    \ be present, is used to indicate the\n   agent provides less than the maximal\
    \ level of access to the object or\n   notification named in the correspondent\
    \ VARIATION clause.\n   The only value applicable to notifications is \"not-implemented\"\
    .\n   The value \"not-implemented\" indicates the agent does not implement\n \
    \  the object or notification, and in the ordering of possible values is\n   equivalent\
    \ to \"not-accessible\".\n   The value \"write-only\" is provided solely for backward\
    \ compatibility,\n   and shall not be used for newly-defined object types.  In\
    \ the\n   ordering of possible values, \"write-only\" is less than \"not-\n  \
    \ accessible\".\n"
- title: 6.5.2.4.  Mapping of the CREATION-REQUIRES clause
  contents:
  - "6.5.2.4.  Mapping of the CREATION-REQUIRES clause\n   The CREATION-REQUIRES clause,\
    \ which need not be present, is used to\n   name the columnar objects of a conceptual\
    \ row to which values must be\n   explicitly assigned, by a management protocol\
    \ set operation, before\n   the agent will allow the instance of the status column\
    \ of that row to\n   be set to `active'.  (Consult the definition of RowStatus\
    \ [5].)\n   If the conceptual row does not have a status column (i.e., the\n \
    \  objects corresponding to the conceptual table were defined using the\n   mechanisms\
    \ in [6,7]), then the CREATION-REQUIRES clause, which need\n   not be present,\
    \ is used to name the columnar objects of a conceptual\n   row to which values\
    \ must be explicitly assigned, by a management\n   protocol set operation, before\
    \ the agent will create new instances of\n   objects in that row.\n   This clause\
    \ must not present unless the object named in the\n   correspondent VARIATION\
    \ clause is a conceptual row, i.e., has a\n   syntax which resolves to a SEQUENCE\
    \ containing columnar objects.  The\n   objects named in the value of this clause\
    \ usually will refer to\n   columnar objects in that row.  However, objects unrelated\
    \ to the\n   conceptual row may also be specified.\n   All objects which are named\
    \ in the CREATION-REQUIRES clause for a\n   conceptual row, and which are columnar\
    \ objects of that row, must have\n   an access level of \"read-create\".\n"
- title: 6.5.2.5.  Mapping of the DEFVAL clause
  contents:
  - "6.5.2.5.  Mapping of the DEFVAL clause\n   The DEFVAL clause, which need not\
    \ be present, is used to provide a\n   refined DEFVAL value for the object named\
    \ in the correspondent\n   VARIATION clause.  The semantics of this value are\
    \ identical to those\n   of the OBJECT-TYPE macro's DEFVAL clause.\n"
- title: 6.5.2.6.  Mapping of the DESCRIPTION clause
  contents:
  - "6.5.2.6.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which\
    \ must be present for each use of the\n   VARIATION clause, contains a textual\
    \ description of the variant or\n   refined implementation of the object or notification.\n"
- title: 6.6.  Mapping of the AGENT-CAPABILITIES value
  contents:
  - "6.6.  Mapping of the AGENT-CAPABILITIES value\n   The value of an invocation\
    \ of the AGENT-CAPABILITIES macro is an\n   OBJECT IDENTIFIER, which names the\
    \ value of sysORID [3] for which\n   this capabilities statement is valid.\n"
- title: 6.7.  Usage Example
  contents:
  - "6.7.  Usage Example\n   Consider how a capabilities statement for an agent might\
    \ be\n   described:\n"
- title: exampleAgent AGENT-CAPABILITIES
  contents:
  - "exampleAgent AGENT-CAPABILITIES\n    PRODUCT-RELEASE      \"ACME Agent release\
    \ 1.1 for 4BSD\"\n    STATUS               current\n    DESCRIPTION          \"\
    ACME agent for 4BSD\"\n    SUPPORTS             SNMPv2-MIB\n        INCLUDES \
    \        { systemGroup, snmpGroup, snmpSetGroup,\n                           snmpBasicNotificationsGroup\
    \ }\n        VARIATION        coldStart\n            DESCRIPTION  \"A coldStart\
    \ trap is generated on all\n                         reboots.\"\n    SUPPORTS\
    \             IF-MIB\n        INCLUDES         { ifGeneralGroup, ifPacketGroup\
    \ }\n        VARIATION        ifAdminStatus\n            SYNTAX       INTEGER\
    \ { up(1), down(2) }\n            DESCRIPTION  \"Unable to set test mode on 4BSD\"\
    \n        VARIATION        ifOperStatus\n            SYNTAX       INTEGER { up(1),\
    \ down(2) }\n            DESCRIPTION  \"Information limited on 4BSD\"\n    SUPPORTS\
    \             IP-MIB\n        INCLUDES         { ipGroup, icmpGroup }\n      \
    \  VARIATION        ipDefaultTTL\n            SYNTAX       INTEGER (255..255)\n\
    \            DESCRIPTION  \"Hard-wired on 4BSD\"\n        VARIATION        ipInAddrErrors\n\
    \            ACCESS       not-implemented\n            DESCRIPTION  \"Information\
    \ not available on 4BSD\"\n        VARIATION        ipNetToMediaEntry\n      \
    \      CREATION-REQUIRES { ipNetToMediaPhysAddress }\n            DESCRIPTION\
    \  \"Address mappings on 4BSD require\n                         both protocol\
    \ and media addresses\"\n    SUPPORTS             TCP-MIB\n        INCLUDES  \
    \       { tcpGroup }\n        VARIATION        tcpConnState\n            ACCESS\
    \       read-only\n            DESCRIPTION  \"Unable to set this on 4BSD\"\n \
    \   SUPPORTS             UDP-MIB\n        INCLUDES         { udpGroup }\n    SUPPORTS\
    \             EVAL-MIB\n        INCLUDES         { functionsGroup, expressionsGroup\
    \ }\n        VARIATION        exprEntry\n            CREATION-REQUIRES { evalString\
    \ }\n            DESCRIPTION \"Conceptual row creation supported\"\n    ::= {\
    \ acmeAgents 1 }\n   According to this invocation, an agent with a sysORID value\
    \ of\n     { acmeAgents 1 }\n   supports six MIB modules.\n   From SNMPv2-MIB,\
    \ five conformance groups are supported.\n   From IF-MIB, the ifGeneralGroup and\
    \ ifPacketGroup groups are\n   supported.  However, the objects ifAdminStatus\
    \ and ifOperStatus have\n   a restricted syntax.\n   From IP-MIB, all objects\
    \ in the ipGroup and icmpGroup are supported\n   except ipInAddrErrors, while\
    \ ipDefaultTTL has a restricted range, and\n   when creating a new instance in\
    \ the ipNetToMediaTable, the set-\n   request must create an instance of atPhysAddress.\n\
    \   From TCP-MIB, the tcpGroup is supported except that tcpConnState is\n   available\
    \ only for reading.\n   From UDP-MIB, the udpGroup is fully supported.\n   From\
    \ the EVAL-MIB, all the objects contained in the functionsGroup\n   and expressionsGroup\
    \ conformance groups are supported, without\n   variation.  In addition, creation\
    \ of new instances in the expr table\n   is supported.\n"
- title: 7.  Extending an Information Module
  contents:
  - "7.  Extending an Information Module\n   As experience is gained with a published\
    \ information module, it may\n   be desirable to revise that information module.\n\
    \   Section 10 of [2] defines the rules for extending an information\n   module.\
    \  The remainder of this section defines how conformance\n   groups, compliance\
    \ statements, and capabilities statements may be\n   extended.\n"
- title: 7.1.  Conformance Groups
  contents:
  - "7.1.  Conformance Groups\n   If any non-editorial change is made to any clause\
    \ of an object group\n   then the OBJECT IDENTIFIER value associated with that\
    \ object group\n   must also be changed, along with its associated descriptor.\n"
- title: 7.2.  Compliance Definitions
  contents:
  - "7.2.  Compliance Definitions\n   If any non-editorial change is made to any clause\
    \ of a compliance\n   definition, then the OBJECT IDENTIFIER value associated\
    \ with that\n   compliance definition must also be changed, along with its associated\n\
    \   descriptor.\n"
- title: 7.3.  Capabilities Definitions
  contents:
  - "7.3.  Capabilities Definitions\n   If any non-editorial change is made to any\
    \ clause of a capabilities\n   definition, then the OBJECT IDENTIFIER value associated\
    \ with that\n   capabilities definition must also be changed, along with its\n\
    \   associated descriptor.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9.  Editor's Address
  contents:
  - "9.  Editor's Address\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706\n   US\n   Phone: +1 408 526 5260\n\
    \   EMail: kzm@cisco.com\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This document is the result of significant work by\
    \ the four major\n   contributors:\n   Jeffrey D. Case (SNMP Research, case@snmp.com)\n\
    \   Keith McCloghrie (Cisco Systems, kzm@cisco.com)\n   Marshall T. Rose (Dover\
    \ Beach Consulting, mrose@dbc.mtview.ca.us)\n   Steven Waldbusser (International\
    \ Network Services, stevew@uni.ins.com)\n   In addition, the contributions of\
    \ the SNMPv2 Working Group are\n   acknowledged.  In particular, a special thanks\
    \ is extended for the\n   contributions of:\n     Alexander I. Alten (Novell)\n\
    \     Dave Arneson (Cabletron)\n     Uri Blumenthal (IBM)\n     Doug Book (Chipcom)\n\
    \     Kim Curran (Bell-Northern Research)\n     Jim Galvin (Trusted Information\
    \ Systems)\n     Maria Greene (Ascom Timeplex)\n     Iain Hanson (Digital)\n \
    \    Dave Harrington (Cabletron)\n     Nguyen Hien (IBM)\n     Jeff Johnson (Cisco\
    \ Systems)\n     Michael Kornegay (Object Quest)\n     Deirdre Kostick (AT&T Bell\
    \ Labs)\n     David Levi (SNMP Research)\n     Daniel Mahoney (Cabletron)\n  \
    \   Bob Natale (ACE*COMM)\n     Brian O'Keefe (Hewlett Packard)\n     Andrew Pearson\
    \ (SNMP Research)\n     Dave Perkins (Peer Networks)\n     Randy Presuhn (Peer\
    \ Networks)\n     Aleksey Romanov (Quality Quorum)\n     Shawn Routhier (Epilogue)\n\
    \     Jon Saperia (BGS Systems)\n     Bob Stewart (Cisco Systems, bstewart@cisco.com),\
    \ chair\n     Kaj Tesink (Bellcore)\n     Glenn Waters (Bell-Northern Research)\n\
    \     Bert Wijnen (IBM)\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: '[1]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[1]  Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Abstract Syntax Notation One (ASN.1),\n     International Organization for\
    \ Standardization.  International\n     Standard 8824, (December, 1987).\n"
- title: '[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Structure of Management Information for Version 2\n     of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC 1902,\n     January 1996.\n"
- title: '[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Management Information Base for Version 2 of the\n     Simple Network Management\
    \ Protocol (SNMPv2)\", RFC 1907,\n     January 1996.\n"
- title: '[4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Protocol Operations for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1905, January 1996.\n"
- title: '[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Textual Conventions for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1903, January 1996.\n"
- title: '[6]  Rose, M., and K. McCloghrie, "Structure and Identification of'
  contents:
  - "[6]  Rose, M., and K. McCloghrie, \"Structure and Identification of\n     Management\
    \ Information for TCP/IP-based internets\", STD 16, RFC\n     1155, May 1990.\n"
- title: '[7]  Rose, M., and K. McCloghrie, "Concise MIB Definitions", STD 16,'
  contents:
  - "[7]  Rose, M., and K. McCloghrie, \"Concise MIB Definitions\", STD 16,\n    \
    \ RFC 1212, March 1991.\n"
