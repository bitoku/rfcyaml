- contents:
  - '           Neighbor Unreachability Detection Is Too Impatient

    '
  title: __initial_text__
- contents:
  - "Abstract\n   IPv6 Neighbor Discovery includes Neighbor Unreachability Detection.\n
    \  That function is very useful when a host has an alternative neighbor\n   --
    for instance, when there are multiple default routers -- since it\n   allows the
    host to switch to the alternative neighbor in a short\n   time.  By default, this
    time is 3 seconds after the node starts\n   probing.  However, if there are no
    alternative neighbors, this\n   timeout behavior is far too impatient.  This document
    specifies\n   relaxed rules for Neighbor Discovery retransmissions that allow
    an\n   implementation to choose different timeout behavior based on whether\n
    \  or not there are alternative neighbors.  This document updates RFC\n   4861.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7048.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Definition of Terms .............................................3\n   3.
    Protocol Updates ................................................3\n   4. Example
    Algorithm ...............................................6\n   5. Acknowledgements
    ................................................7\n   6. Security Considerations
    .........................................8\n   7. References ......................................................8\n
    \     7.1. Normative References .......................................8\n      7.2.
    Informative References .....................................8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   IPv6 Neighbor Discovery [RFC4861] includes Neighbor Unreachability\n
    \  Detection (NUD), which detects when a neighbor is no longer\n   reachable.
    \ The timeouts specified for NUD are very short (by\n   default, three transmissions
    spaced one second apart).  These short\n   timeouts can be appropriate when there
    are alternative neighbors to\n   which the packets can be sent -- for example,
    if a host has multiple\n   default routers in its Default Router List or if the
    host has a\n   Neighbor Cache Entry (NCE) created by a Redirect message.  In those\n
    \  cases, when NUD fails, the host will try the alternative neighbor by\n   redoing
    the next-hop selection.  That implies picking the next router\n   in the Default
    Router List or discarding the NCE created by a\n   Redirect message, respectively.\n
    \  The timeouts specified in [RFC4861] were chosen to be short in order\n   to
    optimize scenarios where alternative neighbors are available.\n   However, when
    there is no alternative neighbor, there are several\n   benefits to making NUD
    probe for a longer time.  One benefit is to\n   make NUD more robust against transient
    failures, such as spanning\n   tree reconvergence and other layer 2 issues that
    can take many\n   seconds to resolve.  Marking the NCE as unreachable, in that
    case,\n   causes additional multicast on the network.  Assuming there are IP\n
    \  packets to send, the lack of an NCE will result in multicast Neighbor\n   Solicitations
    being sent (to the solicited-node multicast address)\n   every second instead
    of the unicast Neighbor Solicitations that NUD\n   sends.\n   As a result, IPv6
    Neighbor Discovery is operationally more brittle\n   than the IPv4 Address Resolution
    Protocol (ARP).  For IPv4, there is\n   no mandatory time limit on the retransmission
    behavior for ARP\n   [RFC0826], which allows implementors to pick more robust
    schemes.\n   The following constant values in [RFC4861] seem to have been made\n
    \  part of IPv6 conformance testing: MAX_MULTICAST_SOLICIT,\n   MAX_UNICAST_SOLICIT,
    and RETRANS_TIMER.  While such strict\n   conformance testing seems consistent
    with [RFC4861], it means that\n   the standard needs to be updated to allow IPv6
    Neighbor Discovery to\n   be as robust as ARP.\n   This document updates RFC 4861
    to relax the retransmission rules.\n   Additional motivations for making IPv6
    Neighbor Discovery more robust\n   in the face of degenerate conditions are covered
    in [RFC6583].\n"
  title: 1.  Introduction
- contents:
  - "2.  Definition of Terms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Definition of Terms
- contents:
  - "3.  Protocol Updates\n   Discarding the NCE after three packets spaced one second
    apart is\n   only needed when an alternative neighbor is available, such as an\n
    \  additional default router or discarding an NCE created by a Redirect.\n   If
    an implementation transmits more than MAX_UNICAST_SOLICIT/\n   MAX_MULTICAST_SOLICIT
    packets, then it SHOULD use the exponential\n   backoff of the retransmit timer.
    \ This is to avoid any significant\n   load due to a steady background level of
    retransmissions from\n   implementations that retransmit a large number of Neighbor\n
    \  Solicitations (NS) before discarding the NCE.\n   Even if there is no alternative
    neighbor, the protocol needs to be\n   able to handle the case when the link-layer
    address of the neighbor/\n   target has changed by switching to multicast Neighbor
    Solicitations\n   at some point in time.\n   In order to capture all the cases
    above, this document introduces a\n   new UNREACHABLE state in the conceptual
    model described in [RFC4861].\n   An NCE in the UNREACHABLE state retains the
    link-layer address, and\n   IPv6 packets continue to be sent to that link-layer
    address.  But in\n   the UNREACHABLE state, the NUD Neighbor Solicitations are
    multicast\n   (to the solicited-node multicast address), using a timeout that\n
    \  follows an exponential backoff.\n   In the places where [RFC4861] says to discard/delete
    the NCE after N\n   probes (Sections 7.3 and 7.3.3, and Appendix C), this document\n
    \  instead specifies a transition to the UNREACHABLE state.\n   If the Neighbor
    Cache Entry was created by a Redirect message, a node\n   MAY delete the NCE instead
    of changing its state to UNREACHABLE.  In\n   any case, the node SHOULD NOT use
    an NCE created by a Redirect to\n   send packets if that NCE is in the UNREACHABLE
    state.  Packets should\n   be sent following the next-hop selection algorithm
    in [RFC4861],\n   Section 5.2, which disregards NCEs that are not reachable.\n
    \  Section 6.3.6 of [RFC4861] indicates that default routers that are\n   \"known
    to be reachable\" are preferred.  For the purposes of that\n   section, if the
    NCE for the router is in the UNREACHABLE state, it is\n   not known to be reachable.
    \ Thus, the particular text in\n   Section 6.3.6 that says \"in any state other
    than INCOMPLETE\" needs to\n   be extended to say \"in any state other than INCOMPLETE
    or\n   UNREACHABLE\".\n   Apart from the use of multicast NS instead of unicast
    NS, and the\n   exponential backoff of the timer, the UNREACHABLE state works
    the\n   same as the current PROBE state.\n   A node MAY garbage collect a Neighbor
    Cache Entry at any time as\n   specified in [RFC4861].  This freedom to garbage
    collect does not\n   change with the introduction of the UNREACHABLE state in
    the\n   conceptual model.  An implementation MAY prefer garbage collecting\n   UNREACHABLE
    NCEs over other NCEs.\n   There is a non-obvious extension to the state-machine
    description in\n   Appendix C of [RFC4861] in the case for \"NA, Solicited=1,
    Override=0.\n   Different link-layer address than cached\".  There we need to
    add\n   \"UNREACHABLE\" to the current list of \"STALE, PROBE, Or DELAY\".  That\n
    \  is, the NCE would be unchanged.  Note that there is no corresponding\n   change
    necessary to the text in [RFC4861], Section 7.2.5, since it is\n   phrased using
    \"Otherwise\" instead of explicitly listing the three\n   states.\n   The other
    state transitions described in Appendix C handle the\n   introduction of the UNREACHABLE
    state without any change, since they\n   are described using \"not INCOMPLETE\".\n
    \  There is also the more obvious change already described above.\n   [RFC4861]
    has this:\n   State           Event                   Action             New state\n
    \  PROBE           Retransmit timeout,     Discard entry         -\n                   N
    or more\n                   retransmissions.\n   That needs to be replaced by:\n
    \  State           Event                   Action             New state\n   PROBE
    \          Retransmit timeout,     Increase timeout  UNREACHABLE\n                   N
    retransmissions.      Send multicast NS\n   UNREACHABLE     Retransmit timeout
    \     Increase timeout  UNREACHABLE\n                                           Send
    multicast NS\n   The exponential backoff SHOULD be clamped at some reasonable
    maximum\n   retransmit timeout, such as 60 seconds (see MAX_RETRANS_TIMER below).\n
    \  If there is no IPv6 packet sent using the UNREACHABLE NCE, then it is\n   RECOMMENDED
    to stop the retransmits of the multicast NS until either\n   the NCE is garbage
    collected or there are IPv6 packets sent using the\n   NCE.  The multicast NS
    and associated exponential backoff can be\n   applied on the condition of continued
    use of the NCE to send IPv6\n   packets to the recorded link-layer address.\n
    \  A node can unicast the first few Neighbor Solicitation messages even\n   while
    in the UNREACHABLE state, but it MUST switch to multicast\n   Neighbor Solicitations
    within 60 seconds of the initial\n   retransmission to be able to handle a link-layer
    address change for\n   the target.  The example below shows such behavior.\n"
  title: 3.  Protocol Updates
- contents:
  - "4.  Example Algorithm\n   This section is NOT normative but specifies a simple
    implementation\n   that conforms with this document.  The implementation is described\n
    \  using operator-configurable values that allow it to be configured to\n   be
    compatible with the retransmission behavior in [RFC4861].  The\n   operator can
    configure the values for MAX_UNICAST_SOLICIT,\n   MAX_MULTICAST_SOLICIT, RETRANS_TIMER,
    and the new BACKOFF_MULTIPLE,\n   MAX_RETRANS_TIMER, and MARK_UNREACHABLE.  This
    allows the\n   implementation to be as simple as:\n   next_retrans = ($BACKOFF_MULTIPLE
    ^ $solicit_retrans_num) *\n   $RetransTimer * $JitterFactor where solicit_retrans_num
    is zero for\n   the first transmission, and JitterFactor is a random value between\n
    \  MIN_RANDOM_FACTOR and MAX_RANDOM_FACTOR [RFC4861] to avoid any\n   synchronization
    of transmissions from different hosts.\n   After MARK_UNREACHABLE transmissions,
    the implementation would mark\n   the NCE UNREACHABLE and as a result explore
    alternate next hops.\n   After MAX_UNICAST_SOLICIT, the implementation would switch
    to\n   multicast NUD probes.\n   The behavior of this example algorithm is to
    have 5 attempts, with\n   time spacing of 0 (initial request), 1 second later,
    3 seconds after\n   the first retransmission, then 9, then 27, and switch to UNREACHABLE\n
    \  after the first three transmissions.  Thus, relative to the time of\n   the
    first transmissions, the retransmissions would occur at 1 second,\n   4 seconds,
    13 seconds, and finally 40 seconds.  At 4 seconds from the\n   first transmission,
    the NCE would be marked UNREACHABLE.  That\n   behavior corresponds to:\n      MAX_UNICAST_SOLICIT=5\n
    \     RETRANS_TIMER=1 (default)\n      MAX_RETRANS_TIMER=60\n      BACKOFF_MULTIPLE=3\n
    \     MARK_UNREACHABLE=3\n   After 3 retransmissions, the implementation would
    mark the NCE\n   UNREACHABLE.  That results in trying an alternative neighbor,
    such as\n   another default router, or ignoring an NCE created by a Redirect as\n
    \  specified in [RFC4861].  With the above values, that would occur\n   after
    4 seconds following the first transmission compared to the\n   2 seconds using
    the fixed scheme in [RFC4861].  That additional\n   delay is small compared to
    the default ReachableTime of\n   30,000 milliseconds.\n   After 5 transmissions,
    i.e., 40 seconds after the initial\n   transmission, the example behavior is to
    switch to multicast NUD\n   probes.  In the language of the state machine in [RFC4861],
    that\n   corresponds to the action \"Discard entry\".  Thus, any attempts to\n
    \  send future packets would result in sending multicast NS packets.  An\n   implementation
    MAY retain the backoff value as it switches to\n   multicast NUD probes.  The
    potential downside of deferring switching\n   to multicast is that it would take
    longer for NUD to handle a change\n   in a link-layer address, i.e., the case
    when a host or a router\n   changes its link-layer address while keeping the same
    IPv6 address.\n   However, [RFC4861] says that a node MAY send unsolicited NS
    to handle\n   that case, which is rather infrequent in operational networks.  In\n
    \  any case, the implementation needs to follow the \"SHOULD\" in\n   Section
    3 to switch to multicast solutions within 60 seconds after\n   the initial transmission.\n
    \  If BACKOFF_MULTIPLE=1, MARK_UNREACHABLE=3, and MAX_UNICAST_SOLICIT=3,\n   you
    would get the same behavior as in [RFC4861].\n   If the request was not answered
    at first -- due, for example, to a\n   transitory condition -- an implementation
    following this algorithm\n   would retry immediately and then back off for progressively
    longer\n   periods.  This would allow for a reasonably fast resolution time when\n
    \  the transitory condition clears.\n   Note that RetransTimer and ReachableTime
    are by default set from the\n   protocol constants RETRANS_TIMER and REACHABLE_TIME
    but are\n   overridden by values advertised in Router Advertisements as specified\n
    \  in [RFC4861].  That remains the case even with the protocol updates\n   specified
    in this document.  The key values that the operator would\n   configure are BACKOFF_MULTIPLE,
    MAX_RETRANS_TIMER,\n   MAX_UNICAST_SOLICIT, and MAX_MULTICAST_SOLICIT.\n   It
    is useful to have a maximum value for\n   ($BACKOFF_MULTIPLE^$solicit_attempt_num)*$RetransTimer
    so that the\n   retransmissions are not too far apart.  The above value of 60
    seconds\n   for this MAX_RETRANS_TIMER is consistent with DHCPv6.\n"
  title: 4.  Example Algorithm
- contents:
  - "5.  Acknowledgements\n   The comments from Thomas Narten, Philip Homburg, Joel
    Jaeggli, Hemant\n   Singh, Tina Tsou, Suresh Krishnan, and Murray Kucherawy have
    helped\n   improve this document.\n"
  title: 5.  Acknowledgements
- contents:
  - "6.  Security Considerations\n   Relaxing the retransmission behavior for NUD
    is believed to have no\n   impact on security.  In particular, it doesn't impact
    the application\n   of Secure Neighbor Discovery [RFC3971].\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3971]  Arkko, J., Kempf, J., Zill, B., and P. Nikander, \"SEcure\n
      \             Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n   [RFC4861]
      \ Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              September 2007.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC0826]  Plummer, D., \"Ethernet Address
      Resolution Protocol: Or\n              converting network protocol addresses
      to 48.bit Ethernet\n              address for transmission on Ethernet hardware\",
      STD 37,\n              RFC 826, November 1982.\n   [RFC6583]  Gashinsky, I.,
      Jaeggli, J., and W. Kumari, \"Operational\n              Neighbor Discovery
      Problems\", RFC 6583, March 2012.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Authors' Addresses\n   Erik Nordmark\n   Arista Networks\n   Santa Clara, CA\n
    \  USA\n   EMail: nordmark@acm.org\n   Igor Gashinsky\n   Yahoo!\n   45 W 18th
    St\n   New York, NY\n   USA\n   EMail: igor@yahoo-inc.com\n"
  title: Authors' Addresses
