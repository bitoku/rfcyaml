- title: __initial_text__
  contents:
  - "                  Transcoding Services Invocation in\n                 the Session\
    \ Initiation Protocol (SIP)\n                 Using Third Party Call Control (3pcc)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to invoke transcoding services using\n\
    \   Session Initiation Protocol (SIP) and third party call control.  This\n  \
    \ way of invocation meets the requirements for SIP regarding\n   transcoding services\
    \ invocation to support deaf, hard of hearing and\n   speech-impaired individuals.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The framework for transcoding with SIP [4] describes how\
    \ two SIP [1]\n   UAs (User Agents) can discover incompatibilities that prevent\
    \ them\n   from establishing a session (e.g., lack of support for a common codec\n\
    \   or common media type).  When such incompatibilities are found, the\n   UAs\
    \ need to invoke transcoding services to successfully establish the\n   session.\
    \  3pcc (third party call control) [2] is one way to perform\n   such invocation.\n"
- title: 2.  General Overview
  contents:
  - "2.  General Overview\n   In the 3pcc model for transcoding invocation, a transcoding\
    \ server\n   that provides a particular transcoding service (e.g., speech-to-text)\n\
    \   is identified by a URI.  A UA that wishes to invoke that service\n   sends\
    \ an INVITE request to that URI establishing a number of media\n   streams.  The\
    \ way the transcoder manipulates and manages the contents\n   of those media streams\
    \ (e.g., the text received over the text stream\n   is transformed into speech\
    \ and sent over the audio stream) is service\n   specific.\n   All the call flows\
    \ in this document use SDP.  The same call flows\n   could be used with another\
    \ session description protocol that provides\n   similar session description capabilities.\n"
- title: 3.  Third Party Call Control Flows
  contents:
  - "3.  Third Party Call Control Flows\n   Given two UAs (A and B) and a transcoding\
    \ server (T), the invocation\n   of a transcoding service consists of establishing\
    \ two sessions; A-T\n   and T-B.  How these sessions are established depends on\
    \ which party,\n   the caller (A) or the callee (B), invokes the transcoding services.\n\
    \   Section 3.2 deals with callee invocation and Section 3.3 deals with\n   caller\
    \ invocation.\n   In all our 3pcc flows we have followed the general principle\
    \ that a\n   200 (OK) response from the transcoding service has to be received\n\
    \   before contacting the callee.  This tries to ensure that the\n   transcoding\
    \ service will be available when the callee accepts the\n   session.\n   Still,\
    \ the transcoding service does not know the exact type of\n   transcoding it will\
    \ be performing until the callee accepts the\n   session.  So, there is always\
    \ the chance of failing to provide\n   transcoding services after the callee has\
    \ accepted the session.  A\n   system with more stringent requirements could use\
    \ preconditions to\n   avoid this situation.  When preconditions are used, the\
    \ callee is not\n   alerted until everything is ready for the session.\n"
- title: 3.1.  Terminology
  contents:
  - "3.1.  Terminology\n   All the flows in this document follow the naming convention\
    \ below:\n   SDP A:     A session description generated by A.  It contains, among\n\
    \              other things, the transport address/es (IP address and\n      \
    \        port number) where A wants to receive media for each\n              particular\
    \ stream.\n   SDP B:     A session description generated by B.  It contains, among\n\
    \              other things, the transport address/es where B wants to\n     \
    \         receive media for each particular stream.\n   SDP A+B:   A session description\
    \ that contains, among other things,\n              the transport address/es where\
    \ A wants to receive media\n              and the transport address/es where B\
    \ wants to receive\n              media.\n   SDP TA:    A session description\
    \ generated by T and intended for A.\n              It contains, among other things,\
    \ the transport address/es\n              where T wants to receive media from\
    \ A.\n   SDP TB:    A session description generated by T and intended for B.\n\
    \              It contains, among other things, the transport address/es\n   \
    \           where T wants to receive media from B.\n   SDP TA+TB: A session description\
    \ generated by T that contains, among\n              other things, the transport\
    \ address/es where T wants to\n              receive media from A and the transport\
    \ address/es where T\n              wants to receive media from B.\n"
- title: 3.2.  Callee's Invocation
  contents:
  - "3.2.  Callee's Invocation\n   In this scenario, B receives an INVITE from A,\
    \ and B decides to\n   introduce T in the session.  Figure 1 shows the call flow\
    \ for this\n   scenario.\n   In Figure 1, A can both hear and speak, and B is\
    \ a deaf user with a\n   speech impairment.  A proposes to establish a session\
    \ that consists\n   of an audio stream (1).  B wants to send and receive only\
    \ text, so it\n   invokes a transcoding service T that will perform both speech-to-text\n\
    \   and text-to-speech conversions (2).  The session descriptions of\n   Figure\
    \ 1 are partially shown below.\n      A                            T         \
    \                   B\n      |                            |                  \
    \          |\n      |--------------------(1) INVITE SDP A-------------------->|\n\
    \      |                            |                            |\n      |  \
    \                          |<---(2) INVITE SDP A+B------|\n      |           \
    \                 |                            |\n      |                    \
    \        |---(3) 200 OK SDP TA+TB---->|\n      |                            |\
    \                            |\n      |                            |<---------(4)\
    \ ACK-----------|\n      |                            |                      \
    \      |\n      |<-------------------(5) 200 OK SDP TA--------------------|\n\
    \      |                            |                            |\n      |------------------------(6)\
    \ ACK------------------------->|\n      |                            |       \
    \                     |\n      | ************************** | **************************\
    \ |\n      |*          MEDIA           *|*          MEDIA           *|\n     \
    \ | ************************** | ************************** |\n      |       \
    \                     |                            |\n          Figure 1: Callee's\
    \ Invocation of a Transcoding Service\n   (1) INVITE SDP A\n           m=audio\
    \ 20000 RTP/AVP 0\n           c=IN IP4 A.example.com\n   (2) INVITE SDP A+B\n\
    \           m=audio 20000 RTP/AVP 0\n           c=IN IP4 A.example.com\n     \
    \      m=text 40000 RTP/AVP 96\n           c=IN IP4 B.example.com\n          \
    \ a=rtpmap:96 t140/1000\n   (3) 200 OK SDP TA+TB\n           m=audio 30000 RTP/AVP\
    \ 0\n           c=IN IP4 T.example.com\n           m=text 30002 RTP/AVP 96\n \
    \          c=IN IP4 T.example.com\n           a=rtpmap:96 t140/1000\n   (5) 200\
    \ OK SDP TA\n           m=audio 30000 RTP/AVP 0\n           c=IN IP4 T.example.com\n\
    \   Four media streams (i.e., two bi-directional streams) have been\n   established\
    \ at this point:\n        1.  Audio from A to T.example.com:30000\n        2.\
    \  Text from T to B.example.com:40000\n        3.  Text from B to T.example.com:30002\n\
    \        4.  Audio from T to A.example.com:20000\n   When either A or B decides\
    \ to terminate the session, it sends a BYE\n   indicating that the session is\
    \ over.\n   If the first INVITE (1) received by B is empty (no session\n   description),\
    \ the call flow is slightly different.  Figure 2 shows\n   the messages involved.\n\
    \   B may have different reasons for invoking T before knowing A's\n   session\
    \ description.  B may want to hide its lack of native\n   capabilities, and therefore\
    \ wants to return a session description\n   with all the codecs that B supports,\
    \ plus all the codecs that T\n   supports.  Or T may provide recording services\
    \ (besides transcoding),\n   and B wants T to record the conversation, regardless\
    \ of whether\n   transcoding is needed.\n   This scenario (Figure 2) is a bit\
    \ more complex than the previous one.\n   In INVITE (2), B still does not have\
    \ SDP A, so it cannot provide T\n   with that information.  When B finally receives\
    \ SDP A in (6), it has\n   to send it to T.  B sends an empty INVITE to T (7)\
    \ and gets a 200 OK\n   with SDP TA+TB (8).  In general, this SDP TA+TB can be\
    \ different than\n   the one sent in (3).  That is why B needs to send the updated\
    \ SDP TA\n   to A in (9).  A then sends a possibly updated SDP A (10) and B sends\n\
    \   it to T in (12).  On the other hand, if T happens to return the same\n   SDP\
    \ TA+TB in (8) as in (3), B can skip messages (9), (10), and (11).\n   So, implementors\
    \ of transcoding services are encouraged to return the\n   same session description\
    \ in (8) as in (3) in this type of scenario.\n   The session descriptions of this\
    \ flow are shown below:\n      A                            T                \
    \            B\n      |                            |                         \
    \   |\n      |----------------------(1) INVITE------------------------>|\n   \
    \   |                            |                            |\n      |     \
    \                       |<-----(2) INVITE SDP B------|\n      |              \
    \              |                            |\n      |                       \
    \     |---(3) 200 OK SDP TA+TB---->|\n      |                            |   \
    \                         |\n      |                            |<---------(4)\
    \ ACK-----------|\n      |                            |                      \
    \      |\n      |<-------------------(5) 200 OK SDP TA--------------------|\n\
    \      |                            |                            |\n      |-----------------------(6)\
    \ ACK SDP A-------------------->|\n      |                            |      \
    \                      |\n      |                            |<-------(7) INVITE----------|\n\
    \      |                            |                            |\n      |  \
    \                          |---(8) 200 OK SDP TA+TB---->|\n      |           \
    \                 |                            |\n      |<-----------------(9)\
    \ INVITE SDP TA----------------------|\n      |                            | \
    \                           |\n      |------------------(10) 200 OK SDP A--------------------->|\n\
    \      |                            |                            |\n      |<-----------------------(11)\
    \ ACK-------------------------|\n      |                            |        \
    \                    |\n      |                            |<-----(12) ACK SDP\
    \ A+B------|\n      |                            |                           \
    \ |\n      | ************************** | ************************** |\n     \
    \ |*          MEDIA           *|*          MEDIA           *|\n      | **************************\
    \ | ************************** |\n      Figure 2: Callee's invocation after initial\
    \ INVITE without SDP\n   (2) INVITE SDP A+B\n           m=audio 20000 RTP/AVP\
    \ 0\n           c=IN IP4 0.0.0.0\n           m=text 40000 RTP/AVP 96\n       \
    \    c=IN IP4 B.example.com\n           a=rtpmap:96 t140/1000\n   (3) 200 OK SDP\
    \ TA+TB\n           m=audio 30000 RTP/AVP 0\n           c=IN IP4 T.example.com\n\
    \           m=text 30002 RTP/AVP 96\n           c=IN IP4 T.example.com\n     \
    \      a=rtpmap:96 t140/1000\n   (5) 200 OK SDP TA\n           m=audio 30000 RTP/AVP\
    \ 0\n           c=IN IP4 T.example.com\n   (6) ACK SDP A\n           m=audio 20000\
    \ RTP/AVP 0\n           c=IN IP4 A.example.com\n   (8) 200 OK SDP TA+TB\n    \
    \       m=audio 30004 RTP/AVP 0\n           c=IN IP4 T.example.com\n         \
    \  m=text 30006 RTP/AVP 96\n           c=IN IP4 T.example.com\n           a=rtpmap:96\
    \ t140/1000\n   (9) INVITE SDP TA\n           m=audio 30004 RTP/AVP 0\n      \
    \     c=IN IP4 T.example.com\n   (10) 200 OK SDP A\n           m=audio 20002 RTP/AVP\
    \ 0\n           c=IN IP4 A.example.com\n   (12) ACK SDP A+B\n           m=audio\
    \ 20002 RTP/AVP 0\n           c=IN IP4 A.example.com\n           m=text 40000\
    \ RTP/AVP 96\n           c=IN IP4 B.example.com\n           a=rtpmap:96 t140/1000\n\
    \   Four media streams (i.e., two bi-directional streams) have been\n   established\
    \ at this point:\n        1.  Audio from A to T.example.com:30004\n        2.\
    \  Text from T to B.example.com:40000\n        3.  Text from B to T.example.com:30006\n\
    \        4.  Audio from T to A.example.com:20002\n"
- title: 3.3.  Caller's Invocation
  contents:
  - "3.3.  Caller's Invocation\n   In this scenario, A wishes to establish a session\
    \ with B using a\n   transcoding service.  A uses 3pcc to set up the session between\
    \ T and\n   B.  The call flow we provide here is slightly different than the ones\n\
    \   in [2].  In [2], the controller establishes a session between two\n   user\
    \ agents, which are the ones deciding the characteristics of the\n   streams.\
    \  Here, A wants to establish a session between T and B, but A\n   wants to decide\
    \ how many and which types of streams are established.\n   That is why A sends\
    \ its session description in the first INVITE (1)\n   to T, as opposed to the\
    \ media-less initial INVITE recommended by [2].\n   Figure 3 shows the call flow\
    \ for this scenario.\n   We do not include the session descriptions of this flow,\
    \ since they\n   are very similar to those in Figure 2.  In this flow, if T returns\n\
    \   the same SDP TA+TB in (8) as in (2), messages (9), (10), and (11) can\n  \
    \ be skipped.\n"
- title: 3.4.  Receiving the Original Stream
  contents:
  - "3.4.  Receiving the Original Stream\n   Sometimes, as pointed out in the requirements\
    \ for SIP in support of\n   deaf, hard of hearing, and speech-impaired individuals\
    \ [5], a user\n   wants to receive both the original stream (e.g., audio) and\
    \ the\n   transcoded stream (e.g., the output of the speech-to-text\n   conversion).\
    \  There are various possible solutions for this problem.\n   One solution consists\
    \ of using the SDP group attribute with Flow\n   Identification (FID) semantics\
    \ [3].  FID allows requesting that a\n   stream is sent to two different transport\
    \ addresses in parallel, as\n   shown below:\n      A                        \
    \    T                            B\n      |                            |    \
    \                        |\n      |-------(1) INVITE SDP A---->|             \
    \               |\n      |                            |                      \
    \      |\n      |<----(2) 200 OK SDP TA+TB---|                            |\n\
    \      |                            |                            |\n      |----------(3)\
    \ ACK---------->|                            |\n      |                      \
    \      |                            |\n      |--------------------(4) INVITE SDP\
    \ TA------------------->|\n      |                            |              \
    \              |\n      |<--------------------(5) 200 OK SDP B--------------------|\n\
    \      |                            |                            |\n      |-------------------------(6)\
    \ ACK------------------------>|\n      |                            |        \
    \                    |\n      |--------(7) INVITE--------->|                 \
    \           |\n      |                            |                          \
    \  |\n      |<---(8) 200 OK SDP TA+TB  --|                            |\n    \
    \  |                            |                            |\n      |--------------------(9)\
    \ INVITE SDP TA------------------->|\n      |                            |   \
    \                         |\n      |<-------------------(10) 200 OK SDP B--------------------|\n\
    \      |                            |                            |\n      |-------------------------(11)\
    \ ACK----------------------->|\n      |                            |         \
    \                   |\n      |------(12) ACK SDP A+B----->|                  \
    \          |\n      |                            |                           \
    \ |\n      | ************************** | ************************** |\n     \
    \ |*          MEDIA           *|*          MEDIA           *|\n      | **************************\
    \ | ************************** |\n      |                            |       \
    \                     |\n          Figure 3: Caller's invocation of a transcoding\
    \ service\n           a=group:FID 1 2\n           m=audio 20000 RTP/AVP 0\n  \
    \         c=IN IP4 A.example.com\n           a=mid:1\n           m=audio 30000\
    \ RTP/AVP 0\n           c=IN IP4 T.example.com\n           a=mid:2\n   The problem\
    \ with this solution is that the majority of the SIP user\n   agents do not support\
    \ FID.  Moreover, only a small fraction of the\n   few UAs that support FID, also\
    \ support sending simultaneous copies of\n   the same media stream at the same\
    \ time.  In addition, FID forces both\n   copies of the stream to use the same\
    \ codec.\n   Therefore, we recommend that T (instead of a user agent) replicates\n\
    \   the media stream.  The transcoder T receiving the following session\n   description\
    \ performs speech-to-text and text-to-speech conversions\n   between the first\
    \ audio stream and the text stream.  In addition, T\n   copies the first audio\
    \ stream to the second audio stream and sends it\n   to A.\n           m=audio\
    \ 40000 RTP/AVP 0\n           c=IN IP4 B.example.com\n           m=audio 20000\
    \ RTP/AVP 0\n           c=IN IP4 A.example.com\n           a=recvonly\n      \
    \     m=text 20002 RTP/AVP 96\n           c=IN IP4 A.example.com\n           a=rtpmap:96\
    \ t140/1000\n"
- title: 3.5.  Transcoding Services in Parallel
  contents:
  - "3.5.  Transcoding Services in Parallel\n   Transcoding services sometimes consist\
    \ of human relays (e.g., a\n   person performing speech-to-text and text-to-speech\
    \ conversions for a\n   session).  If the same person is involved in both conversions\
    \ (i.e.,\n   from A to B and from B to A), he or she has access to all of the\n\
    \   conversation.  In order to provide some degree of privacy, sometimes\n   two\
    \ different persons are allocated to do the job (i.e., one person\n   handles\
    \ A->B and the other B->A).  This type of disposition is also\n   useful for automated\
    \ transcoding services, where one machine converts\n   text to synthetic speech\
    \ (text-to-speech) and another performs voice\n   recognition (speech-to-text).\n\
    \   The scenario described above involves four different sessions: A-T1,\n   T1-B,\
    \ B-T2 and T2-A.  Figure 4 shows the call flow where A invokes T1\n   and T2.\n\
    \   Note this example uses unidirectional media streams (i.e., sendonly\n   or\
    \ recvonly) to clearly identify which transcoder handles media in\n   which direction.\
    \  Nevertheless, nothing precludes the use of\n   bidirectional streams in this\
    \ scenario.  They could be used, for\n   example, by a human relay to ask for\
    \ clarifications (e.g., I did not\n   get that, could you repeat, please?) to\
    \ the party he or she is\n   receiving media from.\n   (1) INVITE SDP AT1\n  \
    \         m=text 20000 RTP/AVP 96\n           c=IN IP4 A.example.com\n       \
    \    a=rtpmap:96 t140/1000\n           a=sendonly\n           m=audio 20000 RTP/AVP\
    \ 0\n           c=IN IP4 0.0.0.0\n           a=recvonly\n   (2) INVITE SDP AT2\n\
    \           m=text 20002 RTP/AVP 96\n           c=IN IP4 A.example.com\n     \
    \      a=rtpmap:96 t140/1000\n           a=recvonly\n           m=audio 20000\
    \ RTP/AVP 0\n           c=IN IP4 0.0.0.0\n           a=sendonly\n   (3) 200 OK\
    \ SDP T1A+T1B\n           m=text 30000 RTP/AVP 96\n           c=IN IP4 T1.example.com\n\
    \           a=rtpmap:96 t140/1000\n           a=recvonly\n           m=audio 30002\
    \ RTP/AVP 0\n           c=IN IP4 T1.example.com\n           a=sendonly\n   (5)\
    \ 200 OK SDP T2A+T2B\n           m=text 40000 RTP/AVP 96\n           c=IN IP4\
    \ T2.example.com\n           a=rtpmap:96 t140/1000\n           a=sendonly\n  \
    \         m=audio 40002 RTP/AVP 0\n           c=IN IP4 T2.example.com\n      \
    \     a=recvonly\n   (7) INVITE SDP T1B+T2B\n           m=audio 30002 RTP/AVP\
    \ 0\n           c=IN IP4 T1.example.com\n           a=sendonly\n           m=audio\
    \ 40002 RTP/AVP 0\n           c=IN IP4 T2.example.com\n           a=recvonly\n\
    \     A                          T1                     T2            B\n    \
    \ |                          |                      |             |\n     |----(1)\
    \ INVITE SDP AT1--->|                      |             |\n     |           \
    \               |                      |             |\n     |----------------(2)\
    \ INVITE SDP AT2-------------->|             |\n     |                       \
    \   |                      |             |\n     |<-(3) 200 OK SDP T1A+T1B--|\
    \                      |             |\n     |                          |    \
    \                  |             |\n     |---------(4) ACK--------->|        \
    \              |             |\n     |                          |            \
    \          |             |\n     |<---------------(5) 200 OK SDP T2A+T2B-----------|\
    \             |\n     |                          |                      |    \
    \         |\n     |----------------------(6) ACK------------------->|        \
    \     |\n     |                          |                      |            \
    \ |\n     |-----------------------(7) INVITE SDP T1B+T2B----------------->|\n\
    \     |                          |                      |             |\n    \
    \ |<----------------------(8) 200 OK SDP BT1+BT2------------------|\n     |  \
    \                        |                      |             |\n     |------(9)\
    \ INVITE--------->|                      |             |\n     |             \
    \             |                      |             |\n     |-------------------(10)\
    \ INVITE------------------>|             |\n     |                          |\
    \                      |             |\n     |<-(11) 200 OK SDP T1A+T1B-|    \
    \                  |             |\n     |                          |        \
    \              |             |\n     |<------------(12) 200 OK SDP T2A+T2B-------------|\
    \             |\n     |                          |                      |    \
    \         |\n     |------------------(13) INVITE SDP T1B+T2B--------------------->|\n\
    \     |                          |                      |             |\n    \
    \ |<-----------------(14) 200 OK SDP BT1+BT2----------------------|\n     |  \
    \                        |                      |             |\n     |--------------------------(15)\
    \ ACK---------------------------->|\n     |                          |       \
    \               |             |\n     |---(16) ACK SDP AT1+BT1-->|           \
    \           |             |\n     |                          |               \
    \       |             |\n     |------------(17) ACK SDP AT2+BT2---------------->|\
    \             |\n     |                          |                      |    \
    \         |\n     | ************************ | **********************************\
    \ |\n     |*          MEDIA         *|*               MEDIA              *|\n\
    \     | ************************ | ********************************** |\n    \
    \ |                          |                      |             |\n     | ***********************************************\
    \   ***********\n     |*                      MEDIA                    *|*   MEDIA\
    \   *|\n     | *********************************************** | *********** |\n\
    \     |                          |                      |             |\n    \
    \            Figure 4: Transcoding services in parallel\n   (8) 200 OK SDP BT1+BT2\n\
    \           m=audio 50000 RTP/AVP 0\n           c=IN IP4 B.example.com\n     \
    \      a=recvonly\n           m=audio 50002 RTP/AVP 0\n           c=IN IP4 B.example.com\n\
    \           a=sendonly\n   (11) 200 OK SDP T1A+T1B\n           m=text 30000 RTP/AVP\
    \ 96\n           c=IN IP4 T1.example.com\n           a=rtpmap:96 t140/1000\n \
    \          a=recvonly\n           m=audio 30002 RTP/AVP 0\n           c=IN IP4\
    \ T1.example.com\n           a=sendonly\n   (12) 200 OK SDP T2A+T2B\n        \
    \   m=text 40000 RTP/AVP 96\n           c=IN IP4 T2.example.com\n           a=rtpmap:96\
    \ t140/1000\n           a=sendonly\n           m=audio 40002 RTP/AVP 0\n     \
    \      c=IN IP4 T2.example.com\n           a=recvonly\n   Since T1 have returned\
    \ the same SDP in (11) as in (3), and T2 has\n   returned the same SDP in (12)\
    \ as in (5), messages (13), (14) and (15)\n   can be skipped.\n   (16) ACK SDP\
    \ AT1+BT1\n           m=text 20000 RTP/AVP 96\n           c=IN IP4 A.example.com\n\
    \           a=rtpmap:96 t140/1000\n           a=sendonly\n           m=audio 50000\
    \ RTP/AVP 0\n           c=IN IP4 B.example.com\n           a=recvonly\n   (17)\
    \ ACK SDP AT2+BT2\n           m=text 20002 RTP/AVP 96\n           c=IN IP4 A.example.com\n\
    \           a=rtpmap:96 t140/1000\n           a=recvonly\n           m=audio 50002\
    \ RTP/AVP 0\n           c=IN IP4 B.example.com\n           a=sendonly\n   Four\
    \ media streams have been established at this point:\n        1.  Text from A\
    \ to T1.example.com:30000\n        2.  Audio from T1 to B.example.com:50000\n\
    \        3.  Audio from B to T2.example.com:40002\n        4.  Text from T2 to\
    \ A.example.com:20002\n   Note that B, the user agent server, needs to support\
    \ two media\n   streams: sendonly and recvonly.  At present, some user agents,\n\
    \   although they support a single sendrecv media stream, do not support\n   a\
    \ different media line per direction.  Implementers are encouraged to\n   build\
    \ support for this feature.\n"
- title: 3.6.  Multiple Transcoding Services in Series
  contents:
  - "3.6.  Multiple Transcoding Services in Series\n   In a distributed environment,\
    \ a complex transcoding service (e.g.,\n   English text to Spanish speech) is\
    \ often provided by several servers.\n   For example, one server performs English\
    \ text to Spanish text\n   translation, and its output is fed into a server that\
    \ performs text-\n   to-speech conversion.  The flow in Figure 5 shows how A invokes\
    \ T1\n   and T2.\n     A                           T1                    T2  \
    \          B\n     |                           |                     |       \
    \      |\n     |----(1) INVITE SDP A-----> |                     |           \
    \  |\n     |                           |                     |             |\n\
    \     |<-(2) 200 OK SDP T1A+T1T2- |                     |             |\n    \
    \ |                           |                     |             |\n     |----------(3)\
    \ ACK--------> |                     |             |\n     |                 \
    \          |                     |             |\n     |-----------(4) INVITE\
    \ SDP T1T2------------------>|             |\n     |                         \
    \  |                     |             |\n     |<-----------(5) 200 OK SDP T2T1+T2B--------------|\
    \             |\n     |                           |                     |    \
    \         |\n     |---------------------(6) ACK-------------------->|        \
    \     |\n     |                           |                     |            \
    \ |\n     |---------------------------(7) INVITE SDP T2B----------------->|\n\
    \     |                           |                     |             |\n    \
    \ |<--------------------------(8) 200 OK SDP B--------------------|\n     |  \
    \                         |                     |             |\n     |--------------------------------(9)\
    \ ACK----------------------->|\n     |                           |           \
    \          |             |\n     |---(10) INVITE-----------> |               \
    \      |             |\n     |                           |                   \
    \  |             |\n     |------------------(11) INVITE------------------->| \
    \            |\n     |                           |                     |     \
    \        |\n     |<-(12) 200 OK SDP T1A+T1T2-|                     |         \
    \    |\n     |                           |                     |             |\n\
    \     |<-------------(13) 200 OK SDP T2T1+T2B-----------|             |\n    \
    \ |                           |                     |             |\n     |---(14)\
    \ ACK SDP T1T2+B---> |                     |             |\n     |           \
    \                |                     |             |\n     |-----------------------(15)\
    \ INVITE SDP T2B-------------------->|\n     |                           |   \
    \                  |             |\n     |<----------------------(16) 200 OK SDP\
    \ B-----------------------|\n     |                           |              \
    \       |             |\n     |----------------(17) ACK SDP T1T2+B------------->|\
    \             |\n     |                           |                     |    \
    \         |\n     |----------------------------(18) ACK-------------------------->|\n\
    \     |                           |                     |             |\n    \
    \ | ************************* | *******************   *********** |\n     |* \
    \        MEDIA           *|*       MEDIA       *|*   MEDIA   *|\n     | *************************\
    \ | ******************* | *********** |\n     |                           |  \
    \                   |             |\n                 Figure 5: Transcoding services\
    \ in serial\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   RFC 3725 [2] discusses security considerations\
    \ which relate to the\n   use of third party call control in SIP.  These considerations\
    \ apply\n   to this document, since it describes how to use third party call\n\
    \   control to invoke transcoding service.\n   In particular, RFC 3725 states\
    \ that end-to-end media security is\n   based on the exchange of keying material\
    \ within SDP and depends on\n   the controller behaving properly.  That is, the\
    \ controller should not\n   try to disable the security mechanisms offered by\
    \ the other parties.\n   As a result, it is trivially possible for the controller\
    \ to insert\n   itself as an intermediary on the media exchange, if it should\
    \ so\n   desire.\n   In this document, the controller is the UA invoking the transcoder,\n\
    \   and there is a media session established using third party call\n   control\
    \ between the remote UA and the transcoder.  Consequently, the\n   attack described\
    \ in RFC 3725 does not constitute a threat because the\n   controller is the UA\
    \ invoking the transcoding service and it has\n   access to the media anyway by\
    \ definition.  So, it seems unlikely that\n   a UA would attempt to launch an\
    \ attack against its own session by\n   disabling security between the transcoder\
    \ and the remote UA.\n   Regarding end-to-end media security from the UAs' point\
    \ of view, the\n   transcoder needs access to the media in order to perform its\n\
    \   function.  So, by definition, the transcoder behaves as a man in the\n   middle.\
    \  UAs that do not want a particular transcoder to have access\n   to all the\
    \ media exchanged between them can use a different\n   transcoder for each direction.\
    \  In addition, UAs can use different\n   transcoders for different media types.\n"
- title: 5.  Normative References
  contents:
  - "5.  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo,\n        \"\
    Best Current Practices for Third Party Call Control (3pcc) in\n        the Session\
    \ Initiation Protocol (SIP)\", BCP 85, RFC 3725, April\n        2004.\n   [3]\
    \  Camarillo, G., Eriksson, G., Holler, J., and H. Schulzrinne,\n        \"Grouping\
    \ of Media Lines in the Session Description Protocol\n        (SDP)\", RFC 3388,\
    \ December 2002.\n"
- title: 6.  Informative References
  contents:
  - "6.  Informative References\n   [4]  Camarillo, G., \"Framework for transcoding\
    \ with the session\n        initiation protocol\", August 2003, Work in Progress.\n\
    \   [5]  Charlton, N., Gasson, M., Gybels, G., Spanner, M., and A. van\n     \
    \   Wijk, \"User Requirements for the Session Initiation Protocol\n        (SIP)\
    \ in Support of Deaf, Hard of Hearing and Speech-impaired\n        Individuals\"\
    , RFC 3351, August 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Advanced Signalling\
    \ Research Lab.\n   FIN-02420 Jorvas\n   Finland\n   EMail:  Gonzalo.Camarillo@ericsson.com\n\
    \   Eric Burger\n   Brooktrout Technology, Inc.\n   18 Keewaydin Way\n   Salem,\
    \ NH 03079\n   USA\n   EMail:  eburger@brooktrout.com\n   Henning Schulzrinne\n\
    \   Dept. of Computer Science\n   Columbia University\n   1214 Amsterdam Avenue,\
    \ MC 0401\n   New York, NY 10027\n   USA\n   EMail:  schulzrinne@cs.columbia.edu\n\
    \   Arnoud van Wijk\n   Viataal\n   Research & Development\n   Afdeling RDS\n\
    \   Theerestraat 42\n   5271 GD Sint-Michielsgestel\n   The Netherlands\n   EMail:\
    \  a.vwijk@viataal.nl\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
