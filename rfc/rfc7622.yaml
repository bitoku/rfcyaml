- contents:
  - '   Extensible Messaging and Presence Protocol (XMPP): Address Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines the address format for the Extensible Messaging\n
    \  and Presence Protocol (XMPP), including support for code points\n   outside
    the ASCII range.  This document obsoletes RFC 6122.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7622.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology .....................................................3\n   3.
    Addresses .......................................................3\n      3.1.
    Fundamentals ...............................................3\n      3.2. Domainpart
    .................................................5\n      3.3. Localpart ..................................................7\n
    \     3.4. Resourcepart ...............................................8\n      3.5.
    Examples ...................................................9\n   4. Enforcement
    in JIDs and JID Parts ..............................13\n   5. Internationalization
    Considerations ............................15\n   6. IANA Considerations ............................................16\n
    \     6.1. Stringprep Profiles Registry ..............................16\n   7.
    Security Considerations ........................................16\n      7.1.
    Reuse of PRECIS ...........................................16\n      7.2. Reuse
    of Unicode ..........................................16\n      7.3. Address Spoofing
    ..........................................16\n   8. Conformance Requirements .......................................19\n
    \  9. References .....................................................21\n      9.1.
    Normative References ......................................21\n      9.2. Informative
    References ....................................22\n   Appendix A. Differences
    from RFC 6122 .............................26\n   Acknowledgements ..................................................27\n
    \  Author's Address ..................................................27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Extensible Messaging and Presence Protocol (XMPP) [RFC6120]
    is an\n   application profile of the Extensible Markup Language [XML] for\n   streaming
    XML data in close to real time between any two or more\n   network-aware entities.
    \ The address format for XMPP entities was\n   originally developed in the Jabber
    open-source community in 1999,\n   first described by [XEP-0029] in 2002, and
    then defined canonically\n   by [RFC3920] in 2004 and [RFC6122] in 2011.\n   As
    specified in RFCs 3920 and 6122, the XMPP address format used the\n   \"stringprep\"
    technology for preparation and comparison of non-ASCII\n   characters [RFC3454].
    \ Following the movement of internationalized\n   domain names away from stringprep,
    this document defines the XMPP\n   address format in a way that no longer depends
    on stringprep (see the\n   Preparation, Enforcement, and Comparison of Internationalized
    Strings\n   (PRECIS) problem statement [RFC6885]).  Instead, this document builds\n
    \  upon the internationalization framework defined by the IETF's PRECIS\n   working
    group [RFC7564].\n   Although every attempt has been made to ensure that the characters\n
    \  allowed in Jabber Identifiers (JIDs) under stringprep are still\n   allowed
    and handled in the same way under PRECIS, there is no\n   guarantee of strict
    backward compatibility because of changes in\n   Unicode and the fact that PRECIS
    handling is based on Unicode\n   properties, not a hardcoded table of characters.
    \ Because it is\n   possible that previously valid JIDs might no longer be valid
    (or\n   previously invalid JIDs might now be valid), operators of XMPP\n   services
    are advised to perform careful testing before migrating\n   accounts and other
    data (see Section 6 of [RFC7613] for guidance).\n   This document obsoletes RFC
    6122.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   Many important terms used in this document are defined in
    [RFC7564],\n   [RFC5890], [RFC6120], [RFC6365], and [Unicode].\n   The key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"
    in this document are to be interpreted as described in\n   [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - '3.  Addresses

    '
  - contents:
    - "3.1.  Fundamentals\n   An XMPP entity is anything that can communicate using
      XMPP.  For\n   historical reasons, the network address of an XMPP entity is
      called a\n   JID.  A valid JID is a string of Unicode code points [Unicode],\n
      \  encoded using UTF-8 [RFC3629], and structured as an ordered sequence\n   of
      localpart, domainpart, and resourcepart, where the first two parts\n   are demarcated
      by the '@' character used as a separator and the last\n   two parts are similarly
      demarcated by the '/' character (e.g.,\n   <juliet@example.com/balcony>).\n
      \  The syntax for a JID is defined as follows, using the Augmented\n   Backus-Naur
      Form (ABNF) as specified in [RFC5234].\n      jid          = [ localpart \"@\"
      ] domainpart [ \"/\" resourcepart ]\n      localpart    = 1*1023(userbyte)\n
      \                    ;\n                     ; a \"userbyte\" is a byte used
      to represent a\n                     ; UTF-8 encoded Unicode code point that
      can be\n                     ; contained in a string that conforms to the\n
      \                    ; UsernameCaseMapped profile of the PRECIS\n                     ;
      IdentifierClass defined in RFC 7613\n                     ;\n      domainpart
      \  = IP-literal / IPv4address / ifqdn\n                     ;\n                     ;
      the \"IPv4address\" and \"IP-literal\" rules are\n                     ; defined
      in RFCs 3986 and 6874, respectively,\n                     ; and the first-match-wins
      (a.k.a. \"greedy\")\n                     ; algorithm described in Appendix
      B of RFC 3986\n                     ; applies to the matching process\n                     ;\n
      \     ifqdn        = 1*1023(domainbyte)\n                     ;\n                     ;
      a \"domainbyte\" is a byte used to represent a\n                     ; UTF-8
      encoded Unicode code point that can be\n                     ; contained in
      a string that conforms to RFC 5890\n                     ;\n      resourcepart
      = 1*1023(opaquebyte)\n                     ;\n                     ; an \"opaquebyte\"
      is a byte used to represent a\n                     ; UTF-8 encoded Unicode
      code point that can be\n                     ; contained in a string that conforms
      to the\n                     ; OpaqueString profile of the PRECIS\n                     ;
      FreeformClass defined in RFC 7613\n                     ;\n   All JIDs are based
      on the foregoing structure.  However, note that\n   the formal syntax provided
      above does not capture all of the rules\n   and restrictions that apply to JIDs,
      which are described below.\n   Each allowable portion of a JID (localpart, domainpart,
      and\n   resourcepart) is 1 to 1023 octets in length, resulting in a maximum\n
      \  total size (including the '@' and '/' separators) of 3071 octets.\n      Implementation
      Note: The length limits on JIDs and parts of JIDs\n      are based on octets
      (bytes), not characters.  UTF-8 encoding can\n      result in more than one
      octet per character.\n      Implementation Note: When dividing a JID into its
      component parts,\n      an implementation needs to match the separator characters
      '@' and\n      '/' before applying any transformation algorithms, which might\n
      \     decompose certain Unicode code points to the separator characters.\n      Implementation
      Note: Reuse of the IP-literal rule from [RFC6874]\n      implies that IPv6 addresses
      are enclosed within square brackets\n      (i.e., beginning with '[' and ending
      with ']'), which was not the\n      case with the definition of the XMPP address
      format in [RFC3920]\n      but which was changed in [RFC6122].  Also note that
      the IP-literal\n      rule was updated between [RFC3986] and [RFC6874] to optionally
      add\n      a zone identifier to any literal address.\n   This document defines
      the native format for JIDs; see [RFC5122] for\n   information about the representation
      of a JID as a Uniform Resource\n   Identifier (URI) [RFC3986] or Internationalized
      Resource Identifier\n   (IRI) [RFC3987] and the extraction of a JID from an
      XMPP URI or IRI.\n"
    title: 3.1.  Fundamentals
  - contents:
    - "3.2.  Domainpart\n   The domainpart of a JID is the portion that remains once
      the\n   following parsing steps are taken:\n   1.  Remove any portion from the
      first '/' character to the end of the\n       string (if there is a '/' character
      present).\n   2.  Remove any portion from the beginning of the string to the
      first\n       '@' character (if there is an '@' character present).\n   This
      parsing order is important, as illustrated by example 15 in\n   Section 3.5.\n
      \  The domainpart is the primary identifier and is the only REQUIRED\n   element
      of a JID (a mere domainpart is a valid JID).  Typically,\n   a domainpart identifies
      the \"home\" server to which clients connect\n   for XML routing and data management
      functionality.  However, it is\n   not necessary for an XMPP domainpart to identify
      an entity that\n   provides core XMPP server functionality (e.g., a domainpart
      can\n   identify an entity such as a multi-user chat service [XEP-0045], a\n
      \  publish-subscribe service [XEP-0060], or a user directory).\n   The domainpart
      for every XMPP service MUST be a fully qualified\n   domain name (FQDN), an
      IPv4 address, an IPv6 address, or an\n   unqualified hostname (i.e., a text
      label that is resolvable on a\n   local network).\n      Informational Note:
      The term \"fully qualified domain name\" is not\n      well defined.  In [RFC1034],
      it is also called an absolute domain\n      name, and the two terms are associated
      in [RFC1535].  The earliest\n      use of the term can be found in [RFC1123].
      \ References to those\n      older specifications ought not to be construed
      as limiting the\n      characters of a fully qualified domain name to the ASCII
      range;\n      for example, [RFC5890] mentions that a fully qualified domain
      name\n      can contain one or more U-labels.\n      Interoperability Note:
      Domainparts that are IP addresses might not\n      be accepted by other services
      for the purpose of server-to-server\n      communication, and domainparts that
      are unqualified hostnames\n      cannot be used on public networks because they
      are resolvable only\n      on a local network.\n   If the domainpart includes
      a final character considered to be a label\n   separator (dot) by [RFC1034],
      this character MUST be stripped from\n   the domainpart before the JID of which
      it is a part is used for the\n   purpose of routing an XML stanza, comparing
      against another JID, or\n   constructing an XMPP URI or IRI [RFC5122].  In particular,
      such a\n   character MUST be stripped before any other canonicalization steps\n
      \  are taken.\n   In general, the content of a domainpart is an Internationalized\n
      \  Domain Name (IDN) as described in the specifications for\n   Internationalized
      Domain Names in Applications (commonly called\n   \"IDNA2008\"), and a domainpart
      is an \"IDNA-aware domain name slot\" as\n   defined in [RFC5890].\n   After
      any and all normalization, conversion, and mapping of code\n   points as well
      as encoding of the string as UTF-8, a domainpart MUST\n   NOT be zero octets
      in length and MUST NOT be more than 1023 octets in\n   length.  (Naturally,
      the length limits of [RFC1034] apply, and\n   nothing in this document is to
      be interpreted as overriding those\n   more fundamental limits.)\n   Detailed
      rules and considerations for preparation, enforcement, and\n   comparison are
      provided in the following sections.\n"
    - contents:
      - "3.2.1.  Preparation\n   An entity that prepares a string for inclusion in
        an XMPP domainpart\n   slot MUST ensure that the string consists only of Unicode
        code points\n   that are allowed in NR-LDH labels or U-labels as defined in\n
        \  [RFC5890].  This implies that the string MUST NOT include A-labels as\n
        \  defined in [RFC5890]; each A-label MUST be converted to a U-label\n   during
        preparation of a string for inclusion in a domainpart slot.\n   In addition,
        the string MUST be encoded as UTF-8 [RFC3629].\n"
      title: 3.2.1.  Preparation
    - contents:
      - "3.2.2.  Enforcement\n   An entity that performs enforcement in XMPP domainpart
        slots MUST\n   prepare a string as described in Section 3.2.1 and MUST also
        apply\n   the normalization, case-mapping, and width-mapping rules defined
        in\n   [RFC5892].\n      Informational Note: The order in which the rules
        are applied for\n      IDNA2008 (see [RFC5892] and [RFC5895]) is different
        from the order\n      for localparts and resourceparts as described under
        Sections 3.3\n      and 3.4.\n"
      title: 3.2.2.  Enforcement
    - contents:
      - "3.2.3.  Comparison\n   An entity that performs comparison of two strings
        before or after\n   their inclusion in XMPP domainpart slots MUST prepare
        each string as\n   specified in Section 3.2.1 and then enforce the normalization,\n
        \  case-mapping, and width-mapping rules specified in Section 3.2.2.\n   The
        two strings are to be considered equivalent if they are an exact\n   octet-for-octet
        match (sometimes called \"bit-string identity\").\n"
      title: 3.2.3.  Comparison
    title: 3.2.  Domainpart
  - contents:
    - "3.3.  Localpart\n   The localpart of a JID is an optional identifier placed
      before the\n   domainpart and separated from the latter by the '@' character.\n
      \  Typically, a localpart uniquely identifies the entity requesting and\n   using
      network access provided by a server (i.e., a local account),\n   although it
      can also represent other kinds of entities (e.g., a\n   chatroom associated
      with a multi-user chat service [XEP-0045]).  The\n   entity represented by an
      XMPP localpart is addressed within the\n   context of a specific domain (i.e.,
      <localpart@domainpart>).\n   The localpart of a JID MUST NOT be zero octets
      in length and MUST NOT\n   be more than 1023 octets in length.  This rule is
      to be enforced\n   after any normalization and mapping of code points as well
      as\n   encoding of the string as UTF-8.\n   The localpart of a JID is an instance
      of the UsernameCaseMapped\n   profile of the PRECIS IdentifierClass, which is
      specified in\n   [RFC7613].  The rules and considerations provided in that\n
      \  specification MUST be applied to XMPP localparts.\n      Implementation Note:
      XMPP uses the Simple Authentication and\n      Security Layer (SASL) [RFC4422]
      for authentication.  At the time\n      of this writing, some SASL mechanisms
      use SASLprep [RFC4013] for\n      the handling of usernames and passwords; in
      the future, these SASL\n      mechanisms will likely transition to the use of
      PRECIS-based\n      handling rules as specified in [RFC7613].  For a detailed\n
      \     discussion about the implications of that transition (including\n      the
      potential need to modify or remove certain characters in the\n      underlying
      account database), see both Section 6 and Appendix A\n      of [RFC7613].\n"
    - contents:
      - "3.3.1.  Further Excluded Characters\n   In XMPP, the following characters
        are explicitly disallowed in XMPP\n   localparts, even though they are allowed
        by the IdentifierClass base\n   class and the UsernameCaseMapped profile:\n
        \     \" U+0022 (QUOTATION MARK)\n      & U+0026 (AMPERSAND)\n      ' U+0027
        (APOSTROPHE)\n      / U+002F (SOLIDUS)\n      : U+003A (COLON)\n      < U+003C
        (LESS-THAN SIGN)\n      > U+003E (GREATER-THAN SIGN)\n      @ U+0040 (COMMERCIAL
        AT)\n      Implementation Note: An XMPP-specific method for escaping the\n
        \     foregoing characters (along with U+0020, i.e., ASCII space) has\n      been
        defined in the JID Escaping specification [XEP-0106].\n"
      title: 3.3.1.  Further Excluded Characters
    title: 3.3.  Localpart
  - contents:
    - "3.4.  Resourcepart\n   The resourcepart of a JID is an optional identifier
      placed after the\n   domainpart and separated from the latter by the '/' character.
      \ A\n   resourcepart can modify either a <localpart@domainpart> address or a\n
      \  mere <domainpart> address.  Typically, a resourcepart uniquely\n   identifies
      a specific connection (e.g., a device or location) or\n   object (e.g., an occupant
      in a multi-user chatroom [XEP-0045])\n   belonging to the entity associated
      with an XMPP localpart at a domain\n   (i.e., <localpart@domainpart/resourcepart>).\n
      \  XMPP entities SHOULD consider resourceparts to be opaque strings and\n   SHOULD
      NOT impute meaning to any given resourcepart.  In particular:\n   o  Use of
      the '/' character as a separator between the domainpart and\n      the resourcepart
      does not imply that XMPP addresses are\n      hierarchical in the way that,
      say, HTTP URIs are hierarchical (see\n      [RFC3986] for general discussion);
      thus, for example, an XMPP\n      address of the form <localpart@domainpart/foo/bar>
      does not\n      identify a resource \"bar\" that exists below a resource \"foo\"
      in a\n      hierarchy of resources associated with the entity\n      \"localpart@domainpart\".\n
      \  o  The '@' character is allowed in the resourcepart and is often used\n      in
      the \"handle\" shown in XMPP chatrooms [XEP-0045].  For example,\n      the
      JID <room@chat.example.com/user@host> describes an entity who\n      is an occupant
      of the room <room@chat.example.com> with a handle\n      of <user@host>.  However,
      chatroom services do not necessarily\n      check such an asserted handle against
      the occupant's real JID.\n   The resourcepart of a JID MUST NOT be zero octets
      in length and MUST\n   NOT be more than 1023 octets in length.  This rule is
      to be enforced\n   after any normalization and mapping of code points as well
      as\n   encoding of the string as UTF-8.\n   The resourcepart of a JID is an
      instance of the OpaqueString profile\n   of the PRECIS FreeformClass, which
      is specified in [RFC7613].  The\n   rules and considerations provided in that
      specification MUST be\n   applied to XMPP resourceparts.\n"
    - contents:
      - "3.4.1.  Applicability to XMPP Extensions\n   In some contexts, it might be
        appropriate to apply more restrictive\n   rules to the preparation, enforcement,
        and comparison of XMPP\n   resourceparts.  For example, in XMPP Multi-User
        Chat [XEP-0045] it\n   might be appropriate to apply the rules specified in\n
        \  [PRECIS-Nickname].  However, the application of more restrictive\n   rules
        is out of scope for resourceparts in general and is properly\n   defined in
        specifications for the relevant XMPP extensions.\n"
      title: 3.4.1.  Applicability to XMPP Extensions
    title: 3.4.  Resourcepart
  - contents:
    - "3.5.  Examples\n   The following examples illustrate a small number of JIDs
      that are\n   consistent with the format defined above (note that the characters\n
      \  \"<\" and \">\" are used to delineate the actual JIDs and are not part of\n
      \  the JIDs themselves).\n   +----------------------------------+-------------------------------+\n
      \  | # | JID                          | Notes                         |\n   +----------------------------------+-------------------------------+\n
      \  | 1 | <juliet@example.com>         | A \"bare JID\"                  |\n
      \  +----------------------------------+-------------------------------+\n   |
      2 | <juliet@example.com/foo>     | A \"full JID\"                  |\n   +----------------------------------+-------------------------------+\n
      \  | 3 | <juliet@example.com/foo bar> | Single space in resourcepart  |\n   +----------------------------------+-------------------------------+\n
      \  | 4 | <juliet@example.com/foo@bar> | \"At\" sign in resourcepart     |\n
      \  +----------------------------------+-------------------------------+\n   |
      5 | <foo\\20bar@example.com>      | Single space in localpart, as |\n   |   |
      \                             | optionally escaped using the  |\n   |   |                              |
      XMPP JID Escaping extension   |\n   +----------------------------------+-------------------------------+\n
      \  | 6 | <fussball@example.com>       | Another bare JID              |\n   +----------------------------------+-------------------------------+\n
      \  | 7 | <fu&#xDF;ball@example.com>   | The third character is LATIN  |\n   |
      \  |                              | SMALL LETTER SHARP S (U+00DF) |\n   +----------------------------------+-------------------------------+\n
      \  | 8 | <&#x3C0;@example.com>        | A localpart of GREEK SMALL    |\n   |
      \  |                              | LETTER PI (U+03C0)            |\n   +----------------------------------+-------------------------------+\n
      \  | 9 | <&#x3A3;@example.com/foo>    | A localpart of GREEK CAPITAL  |\n   |
      \  |                              | LETTER SIGMA (U+03A3)         |\n   +----------------------------------+-------------------------------+\n
      \  | 10| <&#x3C3;@example.com/foo>    | A localpart of GREEK SMALL    |\n   |
      \  |                              | LETTER SIGMA (U+03C3)         |\n   +----------------------------------+-------------------------------+\n
      \  | 11| <&#x3C2;@example.com/foo>    | A localpart of GREEK SMALL    |\n   |
      \  |                              | LETTER FINAL SIGMA (U+03C2)   |\n   +----------------------------------+-------------------------------+\n
      \  | 12| <king@example.com/&#x265A>;  | A resourcepart of the Unicode |\n   |
      \  |                              | character BLACK CHESS KING    |\n   |   |
      \                             | (U+265A)                      |\n   +----------------------------------+-------------------------------+\n
      \  | 13| <example.com>                | A domainpart                  |\n   +----------------------------------+-------------------------------+\n
      \  | 14| <example.com/foobar>         | A domainpart and resourcepart |\n   +----------------------------------+-------------------------------+\n
      \  | 15| <a.example.com/b@example.net>| A domainpart followed by a    |\n   |
      \  |                              | resourcepart that contains an |\n   |   |
      \                             | \"at\" sign                     |\n   +----------------------------------+-------------------------------+\n
      \                     Table 1: A Sample of Legal JIDs\n   Several points are
      worth noting.  Regarding examples 6 and 7:\n   although in German the character
      esszett (LATIN SMALL LETTER SHARP S\n   (U+00DF)) can mostly be used interchangeably
      with the two characters\n   \"ss\", the localparts in these examples are different,
      and (if\n   desired) a server would need to enforce a registration policy that\n
      \  disallows one of them if the other is registered.  Regarding examples\n   9,
      10, and 11: case-mapping of GREEK CAPITAL LETTER SIGMA (U+03A3) to\n   lowercase
      (i.e., to GREEK SMALL LETTER SIGMA (U+03C3)) during\n   comparison would result
      in matching the JIDs in examples 9 and 10;\n   however, because the PRECIS mapping
      rules do not account for the\n   special status of GREEK SMALL LETTER FINAL
      SIGMA (U+03C2), the JIDs\n   in examples 9 and 11 or examples 10 and 11 would
      not be matched.\n   Regarding example 12: symbol characters such as BLACK CHESS
      KING\n   (U+265A) are allowed by the PRECIS FreeformClass and thus can be used\n
      \  in resourceparts.  Regarding examples 14 and 15: JIDs consisting of a\n   domainpart
      and resourcepart are rarely seen in the wild but are\n   allowed according to
      the XMPP address format.  Example 15 illustrates\n   the need for careful extraction
      of the domainpart as described in\n   Section 3.2.\n   The following examples
      illustrate strings that are not JIDs because\n   they violate the format defined
      above.\n   +----------------------------------+-------------------------------+\n
      \  | # | Non-JID string               | Notes                         |\n   +----------------------------------+-------------------------------+\n
      \  | 16| <\"juliet\"@example.com>       | Quotation marks (U+0022) in   |\n
      \  |   |                              | localpart                     |\n   +----------------------------------+-------------------------------+\n
      \  | 17| <foo bar@example.com>        | Space (U+0020) in localpart   |\n   +----------------------------------+-------------------------------+\n
      \  | 18| <juliet@example.com/ foo>    | Leading space in resourcepart |\n   +----------------------------------+-------------------------------+\n
      \  | 19| <@example.com/>              | Zero-length localpart and     |\n   |
      \  |                              | resourcepart                  |\n   +----------------------------------+-------------------------------+\n
      \  | 20| <henry&#x2163;@example.com>  | The sixth character is ROMAN  |\n   |
      \  |                              | NUMERAL FOUR (U+2163)         |\n   +----------------------------------+-------------------------------+\n
      \  | 21| <&#x265A;@example.com>       | A localpart of BLACK CHESS    |\n   |
      \  |                              | KING (U+265A)                 |\n   +----------------------------------+-------------------------------+\n
      \  | 22| <juliet@>                    | A localpart without a         |\n   |
      \  |                              | domainpart                    |\n   +----------------------------------+-------------------------------+\n
      \  | 23| </foobar>                    | A resourcepart without a      |\n   |
      \  |                              | domainpart                    |\n   +----------------------------------+-------------------------------+\n
      \         Table 2: A Sample of Strings That Violate the JID Rules\n   Here again,
      several points are worth noting.  Regarding example 17:\n   even though ASCII
      space (U+0020) is disallowed in the PRECIS\n   IdentifierClass, it can be escaped
      to \"\\20\" in XMPP localparts by\n   using the JID Escaping rules defined in
      [XEP-0106], as illustrated by\n   example 5 in Table 1.  Regarding example 20:
      the Unicode character\n   ROMAN NUMERAL FOUR (U+2163) has a compatibility equivalent
      of the\n   string formed of LATIN CAPITAL LETTER I (U+0049) and LATIN CAPITAL\n
      \  LETTER V (U+0056), but characters with compatibility equivalents are\n   not
      allowed in the PRECIS IdentifierClass.  Regarding example 21:\n   symbol characters
      such as BLACK CHESS KING (U+265A) are not allowed\n   in the PRECIS IdentifierClass;
      however, both of the non-ASCII\n   characters in examples 20 and 21 are allowed
      in the PRECIS\n   FreeformClass and therefore in the XMPP resourcepart (as illustrated\n
      \  for U+265A by example 12 in Table 1).  Regarding examples 22 and 23:\n   the
      domainpart is required in a JID.\n"
    title: 3.5.  Examples
  title: 3.  Addresses
- contents:
  - "4.  Enforcement in JIDs and JID Parts\n   Enforcement entails applying all of
    the rules specified in this\n   document.  Enforcement of the XMPP address format
    rules is the\n   responsibility of XMPP servers.  Although XMPP clients SHOULD
    prepare\n   complete JIDs and parts of JIDs in accordance with this document\n
    \  before including them in protocol slots within XML streams, XMPP\n   servers
    MUST enforce the rules wherever possible and reject stanzas\n   and other XML
    elements that violate the rules (for stanzas, by\n   returning a <jid-malformed/>
    error to the sender as described in\n   Section 8.3.3.8 of [RFC6120]).\n   Entities
    that enforce the rules specified in this document are\n   encouraged to be liberal
    in what they accept by following this\n   procedure:\n   1.  Where possible, map
    characters (e.g., through width mapping,\n       additional mapping, special mapping,
    case mapping, or\n       normalization) and accept the mapped string.\n   2.  If
    mapping is not possible (e.g., because a character is\n       disallowed in the
    FreeformClass), reject the string and return a\n       <jid-malformed/> error.\n
    \  Enforcement applies to complete JIDs and to parts of JIDs.  To\n   facilitate
    implementation, this document defines the concepts of \"JID\n   slot\", \"localpart
    slot\", and \"resourcepart slot\" (similar to the\n   concept of a \"domain name
    slot\" for IDNA2008 as defined in\n   Section 2.3.2.6 of [RFC5890]):\n   JID Slot:
    \ An XML element or attribute explicitly designated in XMPP\n      or in XMPP
    extensions for carrying a complete JID.\n   Localpart Slot:  An XML element or
    attribute explicitly designated\n      in XMPP or in XMPP extensions for carrying
    the localpart of a JID.\n   Resourcepart Slot:  An XML element or attribute explicitly
    designated\n      in XMPP or in XMPP extensions for carrying the resourcepart
    of\n      a JID.\n   A server is responsible for enforcing the address format
    rules when\n   receiving protocol elements from clients where the server is expected\n
    \  to handle such elements directly or to use them for purposes of\n   routing
    a stanza to another domain or delivering a stanza to a local\n   entity; two examples
    from [RFC6120] are the 'to' attribute on XML\n   stanzas (which is a JID slot
    used by XMPP servers for routing of\n   outbound stanzas) and the <resource/>
    child of the <bind/> element\n   (which is a resourcepart slot used by XMPP servers
    for binding of a\n   resource to an account for routing of stanzas between the
    server and\n   a particular client).  An example from [RFC6121] is the 'jid'\n
    \  attribute of the roster <item/> element.\n   A server is not responsible for
    enforcing the rules when the protocol\n   elements are intended for communication
    among other entities,\n   typically within the payload of a stanza that the server
    is merely\n   routing to another domain or delivering to a local entity.  Two\n
    \  examples are the 'initiator' attribute in the Jingle extension\n   [XEP-0166]
    (which is a JID slot used for client-to-client\n   coordination of multimedia
    sessions) and the 'nick' attribute in the\n   Multi-User Chat extension [XEP-0045]
    (which is a resourcepart slot\n   used for administrative purposes in the context
    of XMPP chatrooms).\n   In such cases, the entities involved SHOULD enforce the
    rules\n   themselves and not depend on the server to do so, and client\n   implementers
    need to understand that not enforcing the rules can lead\n   to a degraded user
    experience or to security vulnerabilities.\n   However, when an add-on service
    (e.g., a multi-user chat service)\n   handles a stanza directly, it ought to enforce
    the rules as well, as\n   defined in the relevant specification for that type
    of service.\n   This document does not provide an exhaustive list of JID slots,\n
    \  localpart slots, or resourcepart slots.  However, implementers of\n   core
    XMPP servers are advised to consider as JID slots at least the\n   following elements
    and attributes when they are handled directly or\n   used for purposes of routing
    to another domain or delivering to a\n   local entity:\n   o  The 'from' and 'to'
    stream attributes and the 'from' and 'to'\n      stanza attributes [RFC6120].\n
    \  o  The 'jid' attribute of the roster <item/> element for contact list\n      management
    [RFC6121].\n   o  The 'value' attribute of the <item/> element for Privacy Lists\n
    \     [RFC3921] [XEP-0016] when the value of the 'type' attribute\n      is \"jid\".\n
    \  o  The 'jid' attribute of the <item/> element for Service Discovery\n      defined
    in [XEP-0030].\n   o  The <value/> element for Data Forms [XEP-0004] when the
    'type'\n      attribute is \"jid-single\" or \"jid-multi\".\n   o  The 'jid' attribute
    of the <conference/> element for Bookmark\n      Storage [XEP-0048].\n   o  The
    <JABBERID/> of the <vCard/> element for vCard 3.0 [XEP-0054]\n      and the <uri/>
    child of the <impp/> element for vCard 4.0\n      [XEP-0292] when the XML character
    data identifies an XMPP URI\n      [RFC5122].\n   o  The 'from' attribute of the
    <delay/> element for Delayed Delivery\n      [XEP-0203].\n   o  The 'jid' attribute
    of the <item/> element for the Blocking\n      Command [XEP-0191].\n   o  The
    'from' and 'to' attributes of the <result/> and <verify/>\n      elements for
    Server Dialback [XEP-0220].\n   o  The 'from' and 'to' attributes of the <iq/>,
    <message/>, and\n      <presence/> elements for the Jabber Component Protocol
    [XEP-0114].\n   Developers of XMPP clients and specialized XMPP add-on services
    are\n   advised to check the appropriate specifications for JID slots,\n   localpart
    slots, and resourcepart slots in XMPP protocol extensions\n   such as Service
    Discovery [XEP-0030], Multi-User Chat [XEP-0045],\n   Publish-Subscribe [XEP-0060],
    SOCKS5 Bytestreams [XEP-0065], In-Band\n   Registration [XEP-0077], Roster Item
    Exchange [XEP-0144], and Jingle\n   [XEP-0166].\n"
  title: 4.  Enforcement in JIDs and JID Parts
- contents:
  - "5.  Internationalization Considerations\n   XMPP applications MUST support IDNA2008
    for domainparts as described\n   under Section 3.2, the UsernameCaseMapped profile
    for localparts as\n   described under Section 3.3, and the OpaqueString profile
    for\n   resourceparts as described under Section 3.4.  This enables XMPP\n   addresses
    to include a wide variety of characters outside the ASCII\n   range.  Rules for
    enforcement of the XMPP address format are provided\n   in [RFC6120] and specifications
    for various XMPP extensions.\n      Interoperability Note: For backward compatibility,
    many existing\n      XMPP implementations and deployments support IDNA2003 [RFC3490]\n
    \     for domainparts, and the stringprep [RFC3454] profiles Nodeprep\n      and
    Resourceprep [RFC3920] for localparts and resourceparts.\n"
  title: 5.  Internationalization Considerations
- contents:
  - '6.  IANA Considerations

    '
  - contents:
    - "6.1.  Stringprep Profiles Registry\n   The stringprep specification [RFC3454]
      did not provide for entries in\n   the \"Stringprep Profiles\" registry to have
      any state except \"Current\"\n   or \"Not Current\".  Because this document
      obsoletes RFC 6122, which\n   registered the Nodeprep and Resourceprep profiles
      of stringprep, IANA\n   has marked those profiles as \"Not Current\" and cited
      this document as\n   an additional reference.\n"
    title: 6.1.  Stringprep Profiles Registry
  title: 6.  IANA Considerations
- contents:
  - '7.  Security Considerations

    '
  - contents:
    - "7.1.  Reuse of PRECIS\n   The security considerations described in [RFC7564]
      apply to the\n   IdentifierClass and FreeformClass base string classes used
      in this\n   document for XMPP localparts and resourceparts, respectively.  The\n
      \  security considerations described in [RFC5890] apply to\n   internationalized
      domain names, which are used here for XMPP\n   domainparts.\n"
    title: 7.1.  Reuse of PRECIS
  - contents:
    - "7.2.  Reuse of Unicode\n   The security considerations described in [UTS39]
      apply to the use of\n   Unicode characters in XMPP addresses.\n"
    title: 7.2.  Reuse of Unicode
  - contents:
    - "7.3.  Address Spoofing\n   There are two forms of address spoofing: forging
      and mimicking.\n"
    - contents:
      - "7.3.1.  Address Forging\n   In the context of XMPP technologies, address
        forging occurs when an\n   entity is able to generate an XML stanza whose
        'from' address does\n   not correspond to the account credentials with which
        the entity\n   authenticated onto the network (or an authorization identity
        provided\n   during negotiation of SASL authentication [RFC4422] as described
        in\n   [RFC6120]).  For example, address forging occurs if an entity that\n
        \  authenticated as \"juliet@im.example.com\" is able to send XML stanzas\n
        \  from \"nurse@im.example.com\" or \"romeo@example.net\".\n   Address forging
        is difficult in XMPP systems, given the requirement\n   for sending servers
        to stamp 'from' addresses and for receiving\n   servers to verify sending
        domains via server-to-server authentication\n   (see [RFC6120]).  However,
        address forging is possible if:\n   o  A poorly implemented server ignores
        the requirement for stamping\n      the 'from' address.  This would enable
        any entity that\n      authenticated with the server to send stanzas from
        any\n      localpart@domainpart as long as the domainpart matches the sending\n
        \     domain of the server.\n   o  An actively malicious server generates
        stanzas on behalf of any\n      registered account at the domain or domains
        hosted at that server.\n   Therefore, an entity outside the security perimeter
        of a particular\n   server cannot reliably distinguish between JIDs of the
        form\n   <localpart@domainpart> at that server and thus can authenticate only\n
        \  the domainpart of such JIDs with any level of assurance.  This\n   specification
        does not define methods for discovering or\n   counteracting the kind of poorly
        implemented or rogue servers just\n   described.  However, the end-to-end
        authentication or signing of XMPP\n   stanzas could help to mitigate this
        risk, because it would require\n   the rogue server to generate false credentials
        for signing or\n   encryption of each stanza, in addition to modifying 'from'
        addresses.\n"
      title: 7.3.1.  Address Forging
    - contents:
      - "7.3.2.  Address Mimicking\n   Address mimicking occurs when an entity provides
        legitimate\n   authentication credentials for, and sends XML stanzas from,
        an\n   account whose JID appears to a human user to be the same as another\n
        \  JID.  Because many characters are visually similar, it is relatively\n
        \  easy to mimic JIDs in XMPP systems.  As one simple example, the\n   localpart
        \"ju1iet\" (using the Arabic numeral one as the third\n   character) might
        appear the same as the localpart \"juliet\" (using\n   lowercase \"L\" as
        the third character).\n   As explained in [RFC5890], [RFC7564], [UTR36], and
        [UTS39], there is\n   no straightforward solution to the problem of visually
        similar\n   characters.  Furthermore, IDNA and PRECIS technologies do not
        attempt\n   to define such a solution.  As a result, XMPP domainparts,\n   localparts,
        and resourceparts could contain such characters, leading\n   to security vulnerabilities
        such as the following:\n   o  A domainpart is always employed as one part
        of an entity's address\n      in XMPP.  One common usage is as the address
        of a server or\n      server-side service, such as a multi-user chat service
        [XEP-0045].\n      The security of such services could be compromised based
        on\n      different interpretations of the internationalized domainpart; for\n
        \     example, a user might authorize a malicious entity at a fake\n      server
        to view the user's presence information, or a user could\n      join chatrooms
        at a fake multi-user chat service.\n   o  A localpart can be employed as one
        part of an entity's address in\n      XMPP.  One common usage is as the username
        of an instant messaging\n      user; another is as the name of a multi-user
        chatroom; and many\n      other kinds of entities could use localparts as
        part of their\n      addresses.  The security of such services could be compromised\n
        \     based on different interpretations of the internationalized\n      localpart;
        for example, a user entering a single internationalized\n      localpart could
        access another user's account information, or a\n      user could gain access
        to a hidden or otherwise restricted\n      chatroom or service.\n   o  A resourcepart
        can be employed as one part of an entity's address\n      in XMPP.  One common
        usage is as the name for an instant messaging\n      user's connected resource;
        another is as the nickname of a user in\n      a multi-user chatroom; and
        many other kinds of entities could use\n      resourceparts as part of their
        addresses.  The security of such\n      services could be compromised based
        on different interpretations\n      of the internationalized resourcepart;
        for example, two or more\n      confusable resources could be bound at the
        same time to the same\n      account (resulting in inconsistent authorization
        decisions in an\n      XMPP application that uses full JIDs), or a user could
        send a\n      private message to someone other than the intended recipient
        in a\n      multi-user chatroom.\n   XMPP services and clients are strongly
        encouraged to define and\n   implement consistent policies regarding the registration,
        storage,\n   and presentation of visually similar characters in XMPP systems.
        \ In\n   particular, service providers and software implementers are strongly\n
        \  encouraged to apply the policies recommended in [RFC7564].\n"
      title: 7.3.2.  Address Mimicking
    title: 7.3.  Address Spoofing
  title: 7.  Security Considerations
- contents:
  - "8.  Conformance Requirements\n   This section describes a protocol feature set
    that summarizes the\n   conformance requirements of this specification (similar
    feature sets\n   are provided for XMPP in [RFC6120] and [RFC6121]).  The summary
    is\n   purely informational, and the conformance keywords of [RFC2119] as\n   used
    here are intended only to briefly describe the referenced\n   normative text from
    the body of this specification.  This feature set\n   is appropriate for use in
    software certification, interoperability\n   testing, and implementation reports.
    \ For each feature, this section\n   provides the following information:\n   o
    \ A human-readable name\n   o  An informational description\n   o  A reference
    to the particular section of this document that\n      normatively defines the
    feature\n   o  Whether the feature applies to the client role, the server role,\n
    \     or both (where \"N/A\" signifies that the feature is not applicable\n      to
    the specified role)\n   o  Whether the feature MUST or SHOULD be implemented,
    where the\n      capitalized terms are to be understood as described in [RFC2119]\n
    \  The feature set specified here provides a basis for interoperability\n   testing
    and follows the spirit of a proposal made by Larry Masinter\n   within the IETF's
    NEWTRK working group in 2005 [INTEROP].\n   Feature:  address-domain-length\n
    \  Description:  Ensure that the domainpart of an XMPP address is at\n      least
    one octet in length and at most 1023 octets in length, and\n      that it conforms
    to the underlying length limits of the DNS.\n   Section:  Section 3.2\n   Roles:
    \ Server MUST, client SHOULD.\n   Feature:  address-domain-prep\n   Description:
    \ Ensure that the domainpart of an XMPP address conforms\n      to IDNA2008, that
    it contains only NR-LDH labels and U-labels (not\n      A-labels), and that all
    uppercase and titlecase code points are\n      mapped to their lowercase equivalents.\n
    \  Section:  Section 3.2\n   Roles:  Server MUST, client SHOULD.\n   Feature:
    \ address-localpart-length\n   Description:  Ensure that the localpart of an XMPP
    address is at\n      least one octet in length and at most 1023 octets in length.\n
    \  Section:  Section 3.3\n   Roles:  Server MUST, client SHOULD.\n   Feature:
    \ address-localpart-prep\n   Description:  Ensure that the localpart of an XMPP
    address conforms\n      to the UsernameCaseMapped profile of the PRECIS IdentifierClass.\n
    \  Section:  Section 3.3\n   Roles:  Server MUST, client SHOULD.\n   Feature:
    \ address-resource-length\n   Description:  Ensure that the resourcepart of an
    XMPP address is at\n      least one octet in length and at most 1023 octets in
    length.\n   Section:  Section 3.4\n   Roles:  Server MUST, client SHOULD.\n   Feature:
    \ address-resource-prep\n   Description:  Ensure that the resourcepart of an XMPP
    address\n      conforms to the OpaqueString profile of the PRECIS FreeformClass.\n
    \  Section:  Section 3.4\n   Roles:  Server MUST, client SHOULD.\n"
  title: 8.  Conformance Requirements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names -
      concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,
      November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of\n              ISO 10646\", STD 63,
      RFC 3629, DOI 10.17487/RFC3629,\n              November 2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5234]
      \ Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n              Syntax
      Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5890]
      \ Klensin, J., \"Internationalized Domain Names for\n              Applications
      (IDNA): Definitions and Document Framework\",\n              RFC 5890, DOI 10.17487/RFC5890,
      August 2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n   [RFC5892]
      \ Faltstrom, P., Ed., \"The Unicode Code Points and\n              Internationalized
      Domain Names for Applications (IDNA)\",\n              RFC 5892, DOI 10.17487/RFC5892,
      August 2010,\n              <http://www.rfc-editor.org/info/rfc5892>.\n   [RFC6120]
      \ Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n              March 2011, <http://www.rfc-editor.org/info/rfc6120>.\n
      \  [RFC6365]  Hoffman, P. and J. Klensin, \"Terminology Used in\n              Internationalization
      in the IETF\", BCP 166, RFC 6365,\n              DOI 10.17487/RFC6365, September
      2011,\n              <http://www.rfc-editor.org/info/rfc6365>.\n   [RFC6874]
      \ Carpenter, B., Cheshire, S., and R. Hinden, \"Representing\n              IPv6
      Zone Identifiers in Address Literals and Uniform\n              Resource Identifiers\",
      RFC 6874, DOI 10.17487/RFC6874,\n              February 2013, <http://www.rfc-editor.org/info/rfc6874>.\n
      \  [RFC7564]  Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n              Preparation,
      Enforcement, and Comparison of\n              Internationalized Strings in Application
      Protocols\",\n              RFC 7564, DOI 10.17487/RFC7564, May 2015,\n              <http://www.rfc-editor.org/info/rfc7564>.\n
      \  [RFC7613]  Saint-Andre, P. and A. Melnikov, \"Preparation,\n              Enforcement,
      and Comparison of Internationalized Strings\n              Representing Usernames
      and Passwords\", RFC 7613,\n              DOI 10.17487/RFC7613, August 2015,\n
      \             <http://www.rfc-editor.org/info/rfc7613>.\n   [Unicode]  The Unicode
      Consortium, \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n
      \  [UTR36]    Unicode Technical Report #36, \"Unicode Security\n              Considerations\",
      edited by Mark Davis and Michel Suignard,\n              <http://www.unicode.org/reports/tr36/>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [INTEROP]  Masinter, L., \"Formalizing IETF
      Interoperability\n              Reporting\", Work in Progress,\n              draft-ietf-newtrk-interop-reports-00,
      October 2005.\n   [PRECIS-Nickname]\n              Saint-Andre, P., \"Preparation,
      Enforcement, and Comparison\n              of Internationalized Strings Representing
      Nicknames\", Work\n              in Progress, draft-ietf-precis-nickname-18,
      June 2015.\n   [RFC1123]  Braden, R., Ed., \"Requirements for Internet Hosts
      -\n              Application and Support\", STD 3, RFC 1123,\n              DOI
      10.17487/RFC1123, October 1989,\n              <http://www.rfc-editor.org/info/rfc1123>.\n
      \  [RFC1535]  Gavron, E., \"A Security Problem and Proposed Correction\n              With
      Widely Deployed DNS Software\", RFC 1535,\n              DOI 10.17487/RFC1535,
      October 1993,\n              <http://www.rfc-editor.org/info/rfc1535>.\n   [RFC3454]
      \ Hoffman, P. and M. Blanchet, \"Preparation of\n              Internationalized
      Strings (\"stringprep\")\", RFC 3454,\n              DOI 10.17487/RFC3454, December
      2002,\n              <http://www.rfc-editor.org/info/rfc3454>.\n   [RFC3490]
      \ Faltstrom, P., Hoffman, P., and A. Costello,\n              \"Internationalizing
      Domain Names in Applications (IDNA)\",\n              RFC 3490, DOI 10.17487/RFC3490,
      March 2003,\n              <http://www.rfc-editor.org/info/rfc3490>.\n   [RFC3920]
      \ Saint-Andre, P., Ed., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Core\", RFC 3920, DOI 10.17487/RFC3920,\n              October 2004,
      <http://www.rfc-editor.org/info/rfc3920>.\n   [RFC3921]  Saint-Andre, P., Ed.,
      \"Extensible Messaging and Presence\n              Protocol (XMPP): Instant
      Messaging and Presence\",\n              RFC 3921, DOI 10.17487/RFC3921, October
      2004,\n              <http://www.rfc-editor.org/info/rfc3921>.\n   [RFC3987]
      \ Duerst, M. and M. Suignard, \"Internationalized Resource\n              Identifiers
      (IRIs)\", RFC 3987, DOI 10.17487/RFC3987,\n              January 2005, <http://www.rfc-editor.org/info/rfc3987>.\n
      \  [RFC4013]  Zeilenga, K., \"SASLprep: Stringprep Profile for User Names\n
      \             and Passwords\", RFC 4013, DOI 10.17487/RFC4013,\n              February
      2005, <http://www.rfc-editor.org/info/rfc4013>.\n   [RFC4422]  Melnikov, A.,
      Ed., and K. Zeilenga, Ed., \"Simple\n              Authentication and Security
      Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422, June 2006,\n
      \             <http://www.rfc-editor.org/info/rfc4422>.\n   [RFC5122]  Saint-Andre,
      P., \"Internationalized Resource Identifiers\n              (IRIs) and Uniform
      Resource Identifiers (URIs) for the\n              Extensible Messaging and
      Presence Protocol (XMPP)\",\n              RFC 5122, DOI 10.17487/RFC5122, February
      2008,\n              <http://www.rfc-editor.org/info/rfc5122>.\n   [RFC5895]
      \ Resnick, P. and P. Hoffman, \"Mapping Characters for\n              Internationalized
      Domain Names in Applications (IDNA)\n              2008\", RFC 5895, DOI 10.17487/RFC5895,
      September 2010,\n              <http://www.rfc-editor.org/info/rfc5895>.\n   [RFC6121]
      \ Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Instant Messaging and Presence\",\n              RFC 6121, DOI 10.17487/RFC6121,
      March 2011,\n              <http://www.rfc-editor.org/info/rfc6121>.\n   [RFC6122]
      \ Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Address Format\", RFC 6122,\n              DOI 10.17487/RFC6122, March
      2011,\n              <http://www.rfc-editor.org/info/rfc6122>.\n   [RFC6885]
      \ Blanchet, M. and A. Sullivan, \"Stringprep Revision and\n              Problem
      Statement for the Preparation and Comparison of\n              Internationalized
      Strings (PRECIS)\", RFC 6885,\n              DOI 10.17487/RFC6885, March 2013,\n
      \             <http://www.rfc-editor.org/info/rfc6885>.\n   [UTS39]    Unicode
      Technical Standard #39, \"Unicode Security\n              Mechanisms\", edited
      by Mark Davis and Michel Suignard,\n              <http://unicode.org/reports/tr39/>.\n
      \  [XEP-0004] Eatmon, R., Hildebrand, J., Miller, J., Muldowney, T., and\n              P.
      Saint-Andre, \"Data Forms\", XSF XEP 0004, August 2007,\n              <http://xmpp.org/extensions/xep-0004.html>.\n
      \  [XEP-0016] Millard, P. and P. Saint-Andre, \"Privacy Lists\",\n              XSF
      XEP 0016, February 2007,\n              <http://xmpp.org/extensions/xep-0016.html>.\n
      \  [XEP-0029] Kaes, C., \"Definition of Jabber Identifiers (JIDs)\",\n              XSF
      XEP 0029, October 2003,\n              <http://xmpp.org/extensions/xep-0029.html>.\n
      \  [XEP-0030] Hildebrand, J., Millard, P., Eatmon, R., and P.\n              Saint-Andre,
      \"Service Discovery\", XSF XEP 0030, June 2008,\n              <http://xmpp.org/extensions/xep-0030.html>.\n
      \  [XEP-0045] Saint-Andre, P., \"Multi-User Chat\", XSF XEP 0045,\n              February
      2012, <http://xmpp.org/extensions/xep-0045.html>.\n   [XEP-0048] Blackman, R.,
      Millard, P., and P. Saint-Andre,\n              \"Bookmarks\", XSF XEP 0048,
      November 2007,\n              <http://xmpp.org/extensions/xep-0048.html>.\n
      \  [XEP-0054] Saint-Andre, P., \"vcard-temp\", XSF XEP 0054, July 2008,\n              <http://xmpp.org/extensions/xep-0054.html>.\n
      \  [XEP-0060] Millard, P., Saint-Andre, P., and R. Meijer,\n              \"Publish-Subscribe\",
      XSF XEP 0060, July 2010,\n              <http://xmpp.org/extensions/xep-0060.html>.\n
      \  [XEP-0065] Smith, D., Miller, M., Saint-Andre, P., and J. Karneges,\n              \"SOCKS5
      Bytestreams\", XSF XEP 0065, April 2011,\n              <http://xmpp.org/extensions/xep-0065.html>.\n
      \  [XEP-0077] Saint-Andre, P., \"In-Band Registration\", XSF XEP 0077,\n              January
      2012, <http://xmpp.org/extensions/xep-0077.html>.\n   [XEP-0106] Hildebrand,
      J. and P. Saint-Andre, \"JID Escaping\",\n              XSF XEP 0106, June 2007,\n
      \             <http://xmpp.org/extensions/xep-0106.html>.\n   [XEP-0114] Saint-Andre,
      P., \"Jabber Component Protocol\",\n              XSF XEP 0114, January 2012,\n
      \             <http://xmpp.org/extensions/xep-0114.html>.\n   [XEP-0144] Saint-Andre,
      P., \"Roster Item Exchange\", XSF XEP 0144,\n              August 2005, <http://xmpp.org/extensions/xep-0144.html>.\n
      \  [XEP-0166] Ludwig, S., Beda, J., Saint-Andre, P., McQueen, R., Egan,\n              S.,
      and J. Hildebrand, \"Jingle\", XSF XEP 0166,\n              December 2009, <http://xmpp.org/extensions/xep-0166.html>.\n
      \  [XEP-0191] Saint-Andre, P., \"Blocking Command\", XSF XEP 0191,\n              July
      2012, <http://xmpp.org/extensions/xep-0191.html>.\n   [XEP-0203] Saint-Andre,
      P., \"Delayed Delivery\", XSF XEP 0203,\n              September 2009,\n              <http://xmpp.org/extensions/xep-0203.html>.\n
      \  [XEP-0220] Miller, J., Saint-Andre, P., and P. Hancke, \"Server\n              Dialback\",
      XSF XEP 0220, August 2014,\n              <http://xmpp.org/extensions/xep-0220.html>.\n
      \  [XEP-0292] Saint-Andre, P. and S. Mizzi, \"vCard4 Over XMPP\",\n              XSF
      XEP 0292, September 2013,\n              <http://xmpp.org/extensions/xep-0292.html>.\n
      \  [XML]      Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E., and\n              F.
      Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n              Edition)\",
      World Wide Web Consortium Recommendation\n              REC-xml-20081126, November
      2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Differences from RFC 6122\n   Based on consensus derived from working
    group discussion,\n   implementation and deployment experience, and formal interoperability\n
    \  testing, the following substantive modifications were made from\n   RFC 6122.\n
    \  o  Changed domainpart preparation to use IDNA2008 (instead of\n      IDNA2003).\n
    \  o  Changed localpart preparation to use the UsernameCaseMapped\n      profile
    of the PRECIS IdentifierClass (instead of the Nodeprep\n      profile of stringprep).\n
    \  o  Changed resourcepart preparation to use the OpaqueString profile\n      of
    the PRECIS FreeformClass (instead of the Resourceprep profile\n      of stringprep).\n
    \  o  Specified that internationalized labels within domainparts must be\n      U-labels
    (instead of \"should be\" U-labels).\n   o  Specified that fullwidth and halfwidth
    characters must be mapped\n      to their decomposition mappings (previously handled
    through the\n      use of Normalization Form KC).\n   o  Specified the use of
    Unicode Normalization Form C (instead of\n      Unicode Normalization Form KC
    as specified in the Nodeprep and\n      Resourceprep profiles of stringprep).\n
    \  o  Specified that servers must enforce the address-formatting rules.\n"
  title: Appendix A.  Differences from RFC 6122
- contents:
  - "Acknowledgements\n   Thanks to Ben Campbell, Dave Cridland, Miguel Garcia, Joe
    Hildebrand,\n   Jonathan Lennox, Matt Miller, Florian Schmaus, Sam Whited, and\n
    \  Florian Zeitz for their input during working group discussion.\n   Dan Romascanu
    completed a helpful review on behalf of the General\n   Area Review Team.\n   During
    IESG review, Alissa Cooper, Brian Haberman, and Barry Leiba\n   provided comments
    that led to improvements in the document.\n   Thanks also to Matt Miller in his
    role as document shepherd, Joe\n   Hildebrand in his role as working group chair,
    and Ben Campbell in\n   his role as sponsoring Area Director.\n   The author wishes
    to acknowledge Cisco Systems, Inc., for employing\n   him during his work on earlier
    draft versions of this document.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Peter Saint-Andre\n   &yet\n   Email: peter@andyet.com\n
    \  URI:   https://andyet.com/\n"
  title: Author's Address
