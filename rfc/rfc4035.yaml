- title: __initial_text__
  contents:
  - "           3755, 3757, 3845                                          ISC\n  \
    \       3007, 3597, 3226                                       VeriSign\n    \
    \     Protocol Modifications for the DNS Security Extensions\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is part of a family of documents that describe the\
    \ DNS\n   Security Extensions (DNSSEC).  The DNS Security Extensions are a\n \
    \  collection of new resource records and protocol modifications that\n   add\
    \ data origin authentication and data integrity to the DNS.  This\n   document\
    \ describes the DNSSEC protocol modifications.  This document\n   defines the\
    \ concept of a signed zone, along with the requirements for\n   serving and resolving\
    \ by using DNSSEC.  These techniques allow a\n   security-aware resolver to authenticate\
    \ both DNS resource records and\n   authoritative DNS error indications.\n   This\
    \ document obsoletes RFC 2535 and incorporates changes from all\n   updates to\
    \ RFC 2535.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  Background and Related Documents . . . . . . .\
    \ . . . . .  4\n       1.2.  Reserved Words . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.  Zone Signing . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       2.1.  Including DNSKEY RRs in a Zone . . . . . . . . . . .\
    \ . .  5\n       2.2.  Including RRSIG RRs in a Zone  . . . . . . . . . . . .\
    \ .  5\n       2.3.  Including NSEC RRs in a Zone . . . . . . . . . . . . . .\
    \  6\n       2.4.  Including DS RRs in a Zone . . . . . . . . . . . . . . .  7\n\
    \       2.5.  Changes to the CNAME Resource Record.  . . . . . . . . .  7\n  \
    \     2.6.  DNSSEC RR Types Appearing at Zone Cuts.  . . . . . . . .  8\n    \
    \   2.7.  Example of a Secure Zone . . . . . . . . . . . . . . . .  8\n   3. \
    \ Serving  . . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n       3.1.\
    \  Authoritative Name Servers . . . . . . . . . . . . . . .  9\n             3.1.1.\
    \  Including RRSIG RRs in a Response  . . . . . . . 10\n             3.1.2.  Including\
    \ DNSKEY RRs in a Response . . . . . . . 11\n             3.1.3.  Including NSEC\
    \ RRs in a Response . . . . . . . . 11\n             3.1.4.  Including DS RRs\
    \ in a Response . . . . . . . . . 14\n             3.1.5.  Responding to Queries\
    \ for Type AXFR or IXFR  . . 15\n             3.1.6.  The AD and CD Bits in an\
    \ Authoritative Response. 16\n       3.2.  Recursive Name Servers . . . . . .\
    \ . . . . . . . . . . . 17\n             3.2.1.  The DO Bit . . . . . . . . .\
    \ . . . . . . . . . . 17\n             3.2.2.  The CD Bit . . . . . . . . . .\
    \ . . . . . . . . . 17\n             3.2.3.  The AD Bit . . . . . . . . . . .\
    \ . . . . . . . . 18\n       3.3.  Example DNSSEC Responses . . . . . . . . .\
    \ . . . . . . . 19\n   4.  Resolving  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 19\n       4.1.  EDNS Support . . . . . . . . . . . . . . . . .\
    \ . . . . . 19\n       4.2.  Signature Verification Support . . . . . . . . .\
    \ . . . . 19\n       4.3.  Determining Security Status of Data  . . . . . . .\
    \ . . . 20\n       4.4.  Configured Trust Anchors . . . . . . . . . . . . . .\
    \ . . 21\n       4.5.  Response Caching . . . . . . . . . . . . . . . . . . .\
    \ . 21\n       4.6.  Handling of the CD and AD Bits . . . . . . . . . . . . .\
    \ 22\n       4.7.  Caching BAD Data . . . . . . . . . . . . . . . . . . . . 22\n\
    \       4.8.  Synthesized CNAMEs . . . . . . . . . . . . . . . . . . . 23\n  \
    \     4.9.  Stub Resolvers . . . . . . . . . . . . . . . . . . . . . 23\n    \
    \         4.9.1.  Handling of the DO Bit . . . . . . . . . . . . . 24\n      \
    \       4.9.2.  Handling of the CD Bit . . . . . . . . . . . . . 24\n        \
    \     4.9.3.  Handling of the AD Bit . . . . . . . . . . . . . 24\n   5.  Authenticating\
    \ DNS Responses . . . . . . . . . . . . . . . . . 25\n       5.1.  Special Considerations\
    \ for Islands of Security . . . . . 26\n       5.2.  Authenticating Referrals\
    \ . . . . . . . . . . . . . . . . 26\n       5.3.  Authenticating an RRset with\
    \ an RRSIG RR . . . . . . . . 28\n             5.3.1.  Checking the RRSIG RR Validity\
    \ . . . . . . . . . 28\n             5.3.2.  Reconstructing the Signed Data .\
    \ . . . . . . . . 29\n             5.3.3.  Checking the Signature . . . . . .\
    \ . . . . . . . 31\n             5.3.4.  Authenticating a Wildcard Expanded RRset\n\
    \                     Positive Response. . . . . . . . . . . . . . . . 32\n  \
    \     5.4.  Authenticated Denial of Existence  . . . . . . . . . . . 32\n    \
    \   5.5.  Resolver Behavior When Signatures Do Not Validate  . . . 33\n      \
    \ 5.6.  Authentication Example . . . . . . . . . . . . . . . . . 33\n   6.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . . 33\n   7.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 33\n   8.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 34\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 34\n       9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . 34\n       9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . 35\n   A.  Signed Zone Example  . . . . .\
    \ . . . . . . . . . . . . . . . . 36\n   B.  Example Responses  . . . . . . .\
    \ . . . . . . . . . . . . . . . 41\n       B.1.  Answer . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 41\n       B.2.  Name Error . . . . . . . . . .\
    \ . . . . . . . . . . . . . 43\n       B.3.  No Data Error  . . . . . . . . .\
    \ . . . . . . . . . . . . 44\n       B.4.  Referral to Signed Zone  . . . . .\
    \ . . . . . . . . . . . 44\n       B.5.  Referral to Unsigned Zone  . . . . .\
    \ . . . . . . . . . . 45\n       B.6.  Wildcard Expansion . . . . . . . . . .\
    \ . . . . . . . . . 46\n       B.7.  Wildcard No Data Error . . . . . . . . .\
    \ . . . . . . . . 47\n       B.8.  DS Child Zone No Data Error  . . . . . . .\
    \ . . . . . . . 48\n   C.  Authentication Examples  . . . . . . . . . . . . .\
    \ . . . . . . 49\n       C.1.  Authenticating an Answer . . . . . . . . . . .\
    \ . . . . . 49\n             C.1.1.  Authenticating the Example DNSKEY RR . .\
    \ . . . . 49\n       C.2.  Name Error . . . . . . . . . . . . . . . . . . . .\
    \ . . . 50\n       C.3.  No Data Error  . . . . . . . . . . . . . . . . . . .\
    \ . . 50\n       C.4.  Referral to Signed Zone  . . . . . . . . . . . . . . .\
    \ . 50\n       C.5.  Referral to Unsigned Zone  . . . . . . . . . . . . . . .\
    \ 51\n       C.6.  Wildcard Expansion . . . . . . . . . . . . . . . . . . . 51\n\
    \       C.7.  Wildcard No Data Error . . . . . . . . . . . . . . . . . 51\n  \
    \     C.8.  DS Child Zone No Data Error  . . . . . . . . . . . . . . 51\n   Authors'\
    \ Addresses . . . . . . . . . . . . . . . . . . . . . . . . 52\n   Full Copyright\
    \ Statement . . . . . . . . . . . . . . . . . . . . . 53\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DNS Security Extensions (DNSSEC) are a collection of\
    \ new resource\n   records and protocol modifications that add data origin\n \
    \  authentication and data integrity to the DNS.  This document defines\n   the\
    \ DNSSEC protocol modifications.  Section 2 of this document\n   defines the concept\
    \ of a signed zone and lists the requirements for\n   zone signing.  Section 3\
    \ describes the modifications to authoritative\n   name server behavior necessary\
    \ for handling signed zones.  Section 4\n   describes the behavior of entities\
    \ that include security-aware\n   resolver functions.  Finally, Section 5 defines\
    \ how to use DNSSEC RRs\n   to authenticate a response.\n"
- title: 1.1.  Background and Related Documents
  contents:
  - "1.1.  Background and Related Documents\n   This document is part of a family\
    \ of documents defining DNSSEC that\n   should be read together as a set.\n  \
    \ [RFC4033] contains an introduction to DNSSEC and definitions of\n   common terms;\
    \ the reader is assumed to be familiar with this\n   document.  [RFC4033] also\
    \ contains a list of other documents updated\n   by and obsoleted by this document\
    \ set.\n   [RFC4034] defines the DNSSEC resource records.\n   The reader is also\
    \ assumed to be familiar with the basic DNS concepts\n   described in [RFC1034],\
    \ [RFC1035], and the subsequent documents that\n   update them; particularly,\
    \ [RFC2181] and [RFC2308].\n   This document defines the DNSSEC protocol operations.\n"
- title: 1.2.  Reserved Words
  contents:
  - "1.2.  Reserved Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\
    \ \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Zone Signing
  contents:
  - "2.  Zone Signing\n   DNSSEC introduces the concept of signed zones.  A signed\
    \ zone\n   includes DNS Public Key (DNSKEY), Resource Record Signature (RRSIG),\n\
    \   Next Secure (NSEC), and (optionally) Delegation Signer (DS) records\n   according\
    \ to the rules specified in Sections 2.1, 2.2, 2.3, and 2.4,\n   respectively.\
    \  A zone that does not include these records according\n   to the rules in this\
    \ section is an unsigned zone.\n   DNSSEC requires a change to the definition\
    \ of the CNAME resource\n   record ([RFC1035]).  Section 2.5 changes the CNAME\
    \ RR to allow RRSIG\n   and NSEC RRs to appear at the same owner name as does\
    \ a CNAME RR.\n   DNSSEC specifies the placement of two new RR types, NSEC and\
    \ DS,\n   which can be placed at the parental side of a zone cut (that is, at\
    \ a\n   delegation point).  This is an exception to the general prohibition\n\
    \   against putting data in the parent zone at a zone cut.  Section 2.6\n   describes\
    \ this change.\n"
- title: 2.1.  Including DNSKEY RRs in a Zone
  contents:
  - "2.1.  Including DNSKEY RRs in a Zone\n   To sign a zone, the zone's administrator\
    \ generates one or more\n   public/private key pairs and uses the private key(s)\
    \ to sign\n   authoritative RRsets in the zone.  For each private key used to\n\
    \   create RRSIG RRs in a zone, the zone SHOULD include a zone DNSKEY RR\n   containing\
    \ the corresponding public key.  A zone key DNSKEY RR MUST\n   have the Zone Key\
    \ bit of the flags RDATA field set (see Section 2.1.1\n   of [RFC4034]).  Public\
    \ keys associated with other DNS operations MAY\n   be stored in DNSKEY RRs that\
    \ are not marked as zone keys but MUST NOT\n   be used to verify RRSIGs.\n   If\
    \ the zone administrator intends a signed zone to be usable other\n   than as\
    \ an island of security, the zone apex MUST contain at least\n   one DNSKEY RR\
    \ to act as a secure entry point into the zone.  This\n   secure entry point could\
    \ then be used as the target of a secure\n   delegation via a corresponding DS\
    \ RR in the parent zone (see\n   [RFC4034]).\n"
- title: 2.2.  Including RRSIG RRs in a Zone
  contents:
  - "2.2.  Including RRSIG RRs in a Zone\n   For each authoritative RRset in a signed\
    \ zone, there MUST be at least\n   one RRSIG record that meets the following requirements:\n\
    \   o  The RRSIG owner name is equal to the RRset owner name.\n   o  The RRSIG\
    \ class is equal to the RRset class.\n   o  The RRSIG Type Covered field is equal\
    \ to the RRset type.\n   o  The RRSIG Original TTL field is equal to the TTL of\
    \ the RRset.\n   o  The RRSIG RR's TTL is equal to the TTL of the RRset.\n   o\
    \  The RRSIG Labels field is equal to the number of labels in the\n      RRset\
    \ owner name, not counting the null root label and not\n      counting the leftmost\
    \ label if it is a wildcard.\n   o  The RRSIG Signer's Name field is equal to\
    \ the name of the zone\n      containing the RRset.\n   o  The RRSIG Algorithm,\
    \ Signer's Name, and Key Tag fields identify a\n      zone key DNSKEY record at\
    \ the zone apex.\n   The process for constructing the RRSIG RR for a given RRset\
    \ is\n   described in [RFC4034].  An RRset MAY have multiple RRSIG RRs\n   associated\
    \ with it.  Note that as RRSIG RRs are closely tied to the\n   RRsets whose signatures\
    \ they contain, RRSIG RRs, unlike all other DNS\n   RR types, do not form RRsets.\
    \  In particular, the TTL values among\n   RRSIG RRs with a common owner name\
    \ do not follow the RRset rules\n   described in [RFC2181].\n   An RRSIG RR itself\
    \ MUST NOT be signed, as signing an RRSIG RR would\n   add no value and would\
    \ create an infinite loop in the signing\n   process.\n   The NS RRset that appears\
    \ at the zone apex name MUST be signed, but\n   the NS RRsets that appear at delegation\
    \ points (that is, the NS\n   RRsets in the parent zone that delegate the name\
    \ to the child zone's\n   name servers) MUST NOT be signed.  Glue address RRsets\
    \ associated\n   with delegations MUST NOT be signed.\n   There MUST be an RRSIG\
    \ for each RRset using at least one DNSKEY of\n   each algorithm in the zone apex\
    \ DNSKEY RRset.  The apex DNSKEY RRset\n   itself MUST be signed by each algorithm\
    \ appearing in the DS RRset\n   located at the delegating parent (if any).\n"
- title: 2.3.  Including NSEC RRs in a Zone
  contents:
  - "2.3.  Including NSEC RRs in a Zone\n   Each owner name in the zone that has authoritative\
    \ data or a\n   delegation point NS RRset MUST have an NSEC resource record. \
    \ The\n   format of NSEC RRs and the process for constructing the NSEC RR for\
    \ a\n   given name is described in [RFC4034].\n   The TTL value for any NSEC RR\
    \ SHOULD be the same as the minimum TTL\n   value field in the zone SOA RR.\n\
    \   An NSEC record (and its associated RRSIG RRset) MUST NOT be the only\n   RRset\
    \ at any particular owner name.  That is, the signing process\n   MUST NOT create\
    \ NSEC or RRSIG RRs for owner name nodes that were not\n   the owner name of any\
    \ RRset before the zone was signed.  The main\n   reasons for this are a desire\
    \ for namespace consistency between\n   signed and unsigned versions of the same\
    \ zone and a desire to reduce\n   the risk of response inconsistency in security\
    \ oblivious recursive\n   name servers.\n   The type bitmap of every NSEC resource\
    \ record in a signed zone MUST\n   indicate the presence of both the NSEC record\
    \ itself and its\n   corresponding RRSIG record.\n   The difference between the\
    \ set of owner names that require RRSIG\n   records and the set of owner names\
    \ that require NSEC records is\n   subtle and worth highlighting.  RRSIG records\
    \ are present at the\n   owner names of all authoritative RRsets.  NSEC records\
    \ are present at\n   the owner names of all names for which the signed zone is\n\
    \   authoritative and also at the owner names of delegations from the\n   signed\
    \ zone to its children.  Neither NSEC nor RRSIG records are\n   present (in the\
    \ parent zone) at the owner names of glue address\n   RRsets.  Note, however,\
    \ that this distinction is for the most part\n   visible only during the zone\
    \ signing process, as NSEC RRsets are\n   authoritative data and are therefore\
    \ signed.  Thus, any owner name\n   that has an NSEC RRset will have RRSIG RRs\
    \ as well in the signed\n   zone.\n   The bitmap for the NSEC RR at a delegation\
    \ point requires special\n   attention.  Bits corresponding to the delegation\
    \ NS RRset and any\n   RRsets for which the parent zone has authoritative data\
    \ MUST be set;\n   bits corresponding to any non-NS RRset for which the parent\
    \ is not\n   authoritative MUST be clear.\n"
- title: 2.4.  Including DS RRs in a Zone
  contents:
  - "2.4.  Including DS RRs in a Zone\n   The DS resource record establishes authentication\
    \ chains between DNS\n   zones.  A DS RRset SHOULD be present at a delegation\
    \ point when the\n   child zone is signed.  The DS RRset MAY contain multiple\
    \ records,\n   each referencing a public key in the child zone used to verify\
    \ the\n   RRSIGs in that zone.  All DS RRsets in a zone MUST be signed, and DS\n\
    \   RRsets MUST NOT appear at a zone's apex.\n   A DS RR SHOULD point to a DNSKEY\
    \ RR that is present in the child's\n   apex DNSKEY RRset, and the child's apex\
    \ DNSKEY RRset SHOULD be signed\n   by the corresponding private key.  DS RRs\
    \ that fail to meet these\n   conditions are not useful for validation, but because\
    \ the DS RR and\n   its corresponding DNSKEY RR are in different zones, and because\
    \ the\n   DNS is only loosely consistent, temporary mismatches can occur.\n  \
    \ The TTL of a DS RRset SHOULD match the TTL of the delegating NS RRset\n   (that\
    \ is, the NS RRset from the same zone containing the DS RRset).\n   Construction\
    \ of a DS RR requires knowledge of the corresponding\n   DNSKEY RR in the child\
    \ zone, which implies communication between the\n   child and parent zones.  This\
    \ communication is an operational matter\n   not covered by this document.\n"
- title: 2.5.  Changes to the CNAME Resource Record
  contents:
  - "2.5.  Changes to the CNAME Resource Record\n   If a CNAME RRset is present at\
    \ a name in a signed zone, appropriate\n   RRSIG and NSEC RRsets are REQUIRED\
    \ at that name.  A KEY RRset at that\n   name for secure dynamic update purposes\
    \ is also allowed ([RFC3007]).\n   Other types MUST NOT be present at that name.\n\
    \   This is a modification to the original CNAME definition given in\n   [RFC1034].\
    \  The original definition of the CNAME RR did not allow any\n   other types to\
    \ coexist with a CNAME record, but a signed zone\n   requires NSEC and RRSIG RRs\
    \ for every authoritative name.  To resolve\n   this conflict, this specification\
    \ modifies the definition of the\n   CNAME resource record to allow it to coexist\
    \ with NSEC and RRSIG RRs.\n"
- title: 2.6.  DNSSEC RR Types Appearing at Zone Cuts
  contents:
  - "2.6.  DNSSEC RR Types Appearing at Zone Cuts\n   DNSSEC introduced two new RR\
    \ types that are unusual in that they can\n   appear at the parental side of a\
    \ zone cut.  At the parental side of a\n   zone cut (that is, at a delegation\
    \ point), NSEC RRs are REQUIRED at\n   the owner name.  A DS RR could also be\
    \ present if the zone being\n   delegated is signed and seeks to have a chain\
    \ of authentication to\n   the parent zone.  This is an exception to the original\
    \ DNS\n   specification ([RFC1034]), which states that only NS RRsets could\n\
    \   appear at the parental side of a zone cut.\n   This specification updates\
    \ the original DNS specification to allow\n   NSEC and DS RR types at the parent\
    \ side of a zone cut.  These RRsets\n   are authoritative for the parent when\
    \ they appear at the parent side\n   of a zone cut.\n"
- title: 2.7.  Example of a Secure Zone
  contents:
  - "2.7.  Example of a Secure Zone\n   Appendix A shows a complete example of a small\
    \ signed zone.\n"
- title: 3.  Serving
  contents:
  - "3.  Serving\n   This section describes the behavior of entities that include\n\
    \   security-aware name server functions.  In many cases such functions\n   will\
    \ be part of a security-aware recursive name server, but a\n   security-aware\
    \ authoritative name server has some of the same\n   requirements.  Functions\
    \ specific to security-aware recursive name\n   servers are described in Section\
    \ 3.2; functions specific to\n   authoritative servers are described in Section\
    \ 3.1.\n   In the following discussion, the terms \"SNAME\", \"SCLASS\", and \"\
    STYPE\"\n   are as used in [RFC1034].\n   A security-aware name server MUST support\
    \ the EDNS0 ([RFC2671])\n   message size extension, MUST support a message size\
    \ of at least 1220\n   octets, and SHOULD support a message size of 4000 octets.\
    \  As IPv6\n   packets can only be fragmented by the source host, a security aware\n\
    \   name server SHOULD take steps to ensure that UDP datagrams it\n   transmits\
    \ over IPv6 are fragmented, if necessary, at the minimum IPv6\n   MTU, unless\
    \ the path MTU is known.  Please see [RFC1122], [RFC2460],\n   and [RFC3226] for\
    \ further discussion of packet size and fragmentation\n   issues.\n   A security-aware\
    \ name server that receives a DNS query that does not\n   include the EDNS OPT\
    \ pseudo-RR or that has the DO bit clear MUST\n   treat the RRSIG, DNSKEY, and\
    \ NSEC RRs as it would any other RRset and\n   MUST NOT perform any of the additional\
    \ processing described below.\n   Because the DS RR type has the peculiar property\
    \ of only existing in\n   the parent zone at delegation points, DS RRs always\
    \ require some\n   special processing, as described in Section 3.1.4.1.\n   Security\
    \ aware name servers that receive explicit queries for\n   security RR types that\
    \ match the content of more than one zone that\n   it serves (for example, NSEC\
    \ and RRSIG RRs above and below a\n   delegation point where the server is authoritative\
    \ for both zones)\n   should behave self-consistently.  As long as the response\
    \ is always\n   consistent for each query to the name server, the name server\
    \ MAY\n   return one of the following:\n   o  The above-delegation RRsets.\n \
    \  o  The below-delegation RRsets.\n   o  Both above and below-delegation RRsets.\n\
    \   o  Empty answer section (no records).\n   o  Some other response.\n   o  An\
    \ error.\n   DNSSEC allocates two new bits in the DNS message header: the CD\n\
    \   (Checking Disabled) bit and the AD (Authentic Data) bit.  The CD bit\n   is\
    \ controlled by resolvers; a security-aware name server MUST copy\n   the CD bit\
    \ from a query into the corresponding response.  The AD bit\n   is controlled\
    \ by name servers; a security-aware name server MUST\n   ignore the setting of\
    \ the AD bit in queries.  See Sections 3.1.6,\n   3.2.2, 3.2.3, 4, and 4.9 for\
    \ details on the behavior of these bits.\n   A security aware name server that\
    \ synthesizes CNAME RRs from DNAME\n   RRs as described in [RFC2672] SHOULD NOT\
    \ generate signatures for the\n   synthesized CNAME RRs.\n"
- title: 3.1.  Authoritative Name Servers
  contents:
  - "3.1.  Authoritative Name Servers\n   Upon receiving a relevant query that has\
    \ the EDNS ([RFC2671]) OPT\n   pseudo-RR DO bit ([RFC3225]) set, a security-aware\
    \ authoritative name\n   server for a signed zone MUST include additional RRSIG,\
    \ NSEC, and DS\n   RRs, according to the following rules:\n   o  RRSIG RRs that\
    \ can be used to authenticate a response MUST be\n      included in the response\
    \ according to the rules in Section 3.1.1.\n   o  NSEC RRs that can be used to\
    \ provide authenticated denial of\n      existence MUST be included in the response\
    \ automatically according\n      to the rules in Section 3.1.3.\n   o  Either\
    \ a DS RRset or an NSEC RR proving that no DS RRs exist MUST\n      be included\
    \ in referrals automatically according to the rules in\n      Section 3.1.4.\n\
    \   These rules only apply to responses where the semantics convey\n   information\
    \ about the presence or absence of resource records.  That\n   is, these rules\
    \ are not intended to rule out responses such as RCODE\n   4 (\"Not Implemented\"\
    ) or RCODE 5 (\"Refused\").\n   DNSSEC does not change the DNS zone transfer protocol.\
    \  Section 3.1.5\n   discusses zone transfer requirements.\n"
- title: 3.1.1.  Including RRSIG RRs in a Response
  contents:
  - "3.1.1.  Including RRSIG RRs in a Response\n   When responding to a query that\
    \ has the DO bit set, a security-aware\n   authoritative name server SHOULD attempt\
    \ to send RRSIG RRs that a\n   security-aware resolver can use to authenticate\
    \ the RRsets in the\n   response.  A name server SHOULD make every attempt to\
    \ keep the RRset\n   and its associated RRSIG(s) together in a response.  Inclusion\
    \ of\n   RRSIG RRs in a response is subject to the following rules:\n   o  When\
    \ placing a signed RRset in the Answer section, the name server\n      MUST also\
    \ place its RRSIG RRs in the Answer section.  The RRSIG\n      RRs have a higher\
    \ priority for inclusion than any other RRsets\n      that may have to be included.\
    \  If space does not permit inclusion\n      of these RRSIG RRs, the name server\
    \ MUST set the TC bit.\n   o  When placing a signed RRset in the Authority section,\
    \ the name\n      server MUST also place its RRSIG RRs in the Authority section.\n\
    \      The RRSIG RRs have a higher priority for inclusion than any other\n   \
    \   RRsets that may have to be included.  If space does not permit\n      inclusion\
    \ of these RRSIG RRs, the name server MUST set the TC bit.\n   o  When placing\
    \ a signed RRset in the Additional section, the name\n      server MUST also place\
    \ its RRSIG RRs in the Additional section.\n      If space does not permit inclusion\
    \ of both the RRset and its\n      associated RRSIG RRs, the name server MAY retain\
    \ the RRset while\n      dropping the RRSIG RRs.  If this happens, the name server\
    \ MUST NOT\n      set the TC bit solely because these RRSIG RRs didn't fit.\n"
- title: 3.1.2.  Including DNSKEY RRs in a Response
  contents:
  - "3.1.2.  Including DNSKEY RRs in a Response\n   When responding to a query that\
    \ has the DO bit set and that requests\n   the SOA or NS RRs at the apex of a\
    \ signed zone, a security-aware\n   authoritative name server for that zone MAY\
    \ return the zone apex\n   DNSKEY RRset in the Additional section.  In this situation,\
    \ the\n   DNSKEY RRset and associated RRSIG RRs have lower priority than does\n\
    \   any other information that would be placed in the additional section.\n  \
    \ The name server SHOULD NOT include the DNSKEY RRset unless there is\n   enough\
    \ space in the response message for both the DNSKEY RRset and\n   its associated\
    \ RRSIG RR(s).  If there is not enough space to include\n   these DNSKEY and RRSIG\
    \ RRs, the name server MUST omit them and MUST\n   NOT set the TC bit solely because\
    \ these RRs didn't fit (see Section\n   3.1.1).\n"
- title: 3.1.3.  Including NSEC RRs in a Response
  contents:
  - "3.1.3.  Including NSEC RRs in a Response\n   When responding to a query that\
    \ has the DO bit set, a security-aware\n   authoritative name server for a signed\
    \ zone MUST include NSEC RRs in\n   each of the following cases:\n   No Data:\
    \ The zone contains RRsets that exactly match <SNAME, SCLASS>\n      but does\
    \ not contain any RRsets that exactly match <SNAME, SCLASS,\n      STYPE>.\n \
    \  Name Error: The zone does not contain any RRsets that match <SNAME,\n     \
    \ SCLASS> either exactly or via wildcard name expansion.\n   Wildcard Answer:\
    \ The zone does not contain any RRsets that exactly\n      match <SNAME, SCLASS>\
    \ but does contain an RRset that matches\n      <SNAME, SCLASS, STYPE> via wildcard\
    \ name expansion.\n   Wildcard No Data: The zone does not contain any RRsets that\
    \ exactly\n      match <SNAME, SCLASS> and does contain one or more RRsets that\n\
    \      match <SNAME, SCLASS> via wildcard name expansion, but does not\n     \
    \ contain any RRsets that match <SNAME, SCLASS, STYPE> via wildcard\n      name\
    \ expansion.\n   In each of these cases, the name server includes NSEC RRs in\
    \ the\n   response to prove that an exact match for <SNAME, SCLASS, STYPE> was\n\
    \   not present in the zone and that the response that the name server is\n  \
    \ returning is correct given the data in the zone.\n"
- title: '3.1.3.1.  Including NSEC RRs: No Data Response'
  contents:
  - "3.1.3.1.  Including NSEC RRs: No Data Response\n   If the zone contains RRsets\
    \ matching <SNAME, SCLASS> but contains no\n   RRset matching <SNAME, SCLASS,\
    \ STYPE>, then the name server MUST\n   include the NSEC RR for <SNAME, SCLASS>\
    \ along with its associated\n   RRSIG RR(s) in the Authority section of the response\
    \ (see Section\n   3.1.1).  If space does not permit inclusion of the NSEC RR\
    \ or its\n   associated RRSIG RR(s), the name server MUST set the TC bit (see\n\
    \   Section 3.1.1).\n   Since the search name exists, wildcard name expansion\
    \ does not apply\n   to this query, and a single signed NSEC RR suffices to prove\
    \ that the\n   requested RR type does not exist.\n"
- title: '3.1.3.2.  Including NSEC RRs: Name Error Response'
  contents:
  - "3.1.3.2.  Including NSEC RRs: Name Error Response\n   If the zone does not contain\
    \ any RRsets matching <SNAME, SCLASS>\n   either exactly or via wildcard name\
    \ expansion, then the name server\n   MUST include the following NSEC RRs in the\
    \ Authority section, along\n   with their associated RRSIG RRs:\n   o  An NSEC\
    \ RR proving that there is no exact match for <SNAME,\n      SCLASS>.\n   o  An\
    \ NSEC RR proving that the zone contains no RRsets that would\n      match <SNAME,\
    \ SCLASS> via wildcard name expansion.\n   In some cases, a single NSEC RR may\
    \ prove both of these points.  If\n   it does, the name server SHOULD only include\
    \ the NSEC RR and its\n   RRSIG RR(s) once in the Authority section.\n   If space\
    \ does not permit inclusion of these NSEC and RRSIG RRs, the\n   name server MUST\
    \ set the TC bit (see Section 3.1.1).\n   The owner names of these NSEC and RRSIG\
    \ RRs are not subject to\n   wildcard name expansion when these RRs are included\
    \ in the Authority\n   section of the response.\n   Note that this form of response\
    \ includes cases in which SNAME\n   corresponds to an empty non-terminal name\
    \ within the zone (a name\n   that is not the owner name for any RRset but that\
    \ is the parent name\n   of one or more RRsets).\n"
- title: '3.1.3.3.  Including NSEC RRs: Wildcard Answer Response'
  contents:
  - "3.1.3.3.  Including NSEC RRs: Wildcard Answer Response\n   If the zone does not\
    \ contain any RRsets that exactly match <SNAME,\n   SCLASS> but does contain an\
    \ RRset that matches <SNAME, SCLASS, STYPE>\n   via wildcard name expansion, the\
    \ name server MUST include the\n   wildcard-expanded answer and the corresponding\
    \ wildcard-expanded\n   RRSIG RRs in the Answer section and MUST include in the\
    \ Authority\n   section an NSEC RR and associated RRSIG RR(s) proving that the\
    \ zone\n   does not contain a closer match for <SNAME, SCLASS>.  If space does\n\
    \   not permit inclusion of the answer, NSEC and RRSIG RRs, the name\n   server\
    \ MUST set the TC bit (see Section 3.1.1).\n"
- title: '3.1.3.4.  Including NSEC RRs: Wildcard No Data Response'
  contents:
  - "3.1.3.4.  Including NSEC RRs: Wildcard No Data Response\n   This case is a combination\
    \ of the previous cases.  The zone does not\n   contain an exact match for <SNAME,\
    \ SCLASS>, and although the zone\n   does contain RRsets that match <SNAME, SCLASS>\
    \ via wildcard\n   expansion, none of those RRsets matches STYPE.  The name server\
    \ MUST\n   include the following NSEC RRs in the Authority section, along with\n\
    \   their associated RRSIG RRs:\n   o  An NSEC RR proving that there are no RRsets\
    \ matching STYPE at the\n      wildcard owner name that matched <SNAME, SCLASS>\
    \ via wildcard\n      expansion.\n   o  An NSEC RR proving that there are no RRsets\
    \ in the zone that would\n      have been a closer match for <SNAME, SCLASS>.\n\
    \   In some cases, a single NSEC RR may prove both of these points.  If\n   it\
    \ does, the name server SHOULD only include the NSEC RR and its\n   RRSIG RR(s)\
    \ once in the Authority section.\n   The owner names of these NSEC and RRSIG RRs\
    \ are not subject to\n   wildcard name expansion when these RRs are included in\
    \ the Authority\n   section of the response.\n   If space does not permit inclusion\
    \ of these NSEC and RRSIG RRs, the\n   name server MUST set the TC bit (see Section\
    \ 3.1.1).\n"
- title: 3.1.3.5.  Finding the Right NSEC RRs
  contents:
  - "3.1.3.5.  Finding the Right NSEC RRs\n   As explained above, there are several\
    \ situations in which a\n   security-aware authoritative name server has to locate\
    \ an NSEC RR\n   that proves that no RRsets matching a particular SNAME exist.\n\
    \   Locating such an NSEC RR within an authoritative zone is relatively\n   simple,\
    \ at least in concept.  The following discussion assumes that\n   the name server\
    \ is authoritative for the zone that would have held\n   the non-existent RRsets\
    \ matching SNAME.  The algorithm below is\n   written for clarity, not for efficiency.\n\
    \   To find the NSEC that proves that no RRsets matching name N exist in\n   the\
    \ zone Z that would have held them, construct a sequence, S,\n   consisting of\
    \ the owner names of every RRset in Z, sorted into\n   canonical order ([RFC4034]),\
    \ with no duplicate names.  Find the name\n   M that would have immediately preceded\
    \ N in S if any RRsets with\n   owner name N had existed.  M is the owner name\
    \ of the NSEC RR that\n   proves that no RRsets exist with owner name N.\n   The\
    \ algorithm for finding the NSEC RR that proves that a given name\n   is not covered\
    \ by any applicable wildcard is similar but requires an\n   extra step.  More\
    \ precisely, the algorithm for finding the NSEC\n   proving that no RRsets exist\
    \ with the applicable wildcard name is\n   precisely the same as the algorithm\
    \ for finding the NSEC RR that\n   proves that RRsets with any other owner name\
    \ do not exist.  The part\n   that's missing is a method of determining the name\
    \ of the non-\n   existent applicable wildcard.  In practice, this is easy, because\
    \ the\n   authoritative name server has already checked for the presence of\n\
    \   precisely this wildcard name as part of step (1)(c) of the normal\n   lookup\
    \ algorithm described in Section 4.3.2 of [RFC1034].\n"
- title: 3.1.4.  Including DS RRs in a Response
  contents:
  - "3.1.4.  Including DS RRs in a Response\n   When responding to a query that has\
    \ the DO bit set, a security-aware\n   authoritative name server returning a referral\
    \ includes DNSSEC data\n   along with the NS RRset.\n   If a DS RRset is present\
    \ at the delegation point, the name server\n   MUST return both the DS RRset and\
    \ its associated RRSIG RR(s) in the\n   Authority section along with the NS RRset.\n\
    \   If no DS RRset is present at the delegation point, the name server\n   MUST\
    \ return both the NSEC RR that proves that the DS RRset is not\n   present and\
    \ the NSEC RR's associated RRSIG RR(s) along with the NS\n   RRset.  The name\
    \ server MUST place the NS RRset before the NSEC RRset\n   and its associated\
    \ RRSIG RR(s).\n   Including these DS, NSEC, and RRSIG RRs increases the size\
    \ of\n   referral messages and may cause some or all glue RRs to be omitted.\n\
    \   If space does not permit inclusion of the DS or NSEC RRset and\n   associated\
    \ RRSIG RRs, the name server MUST set the TC bit (see\n   Section 3.1.1).\n"
- title: 3.1.4.1.  Responding to Queries for DS RRs
  contents:
  - "3.1.4.1.  Responding to Queries for DS RRs\n   The DS resource record type is\
    \ unusual in that it appears only on the\n   parent zone's side of a zone cut.\
    \  For example, the DS RRset for the\n   delegation of \"foo.example\" is stored\
    \ in the \"example\" zone rather\n   than in the \"foo.example\" zone.  This requires\
    \ special processing\n   rules for both name servers and resolvers, as the name\
    \ server for the\n   child zone is authoritative for the name at the zone cut\
    \ by the\n   normal DNS rules but the child zone does not contain the DS RRset.\n\
    \   A security-aware resolver sends queries to the parent zone when\n   looking\
    \ for a needed DS RR at a delegation point (see Section 4.2).\n   However, special\
    \ rules are necessary to avoid confusing\n   security-oblivious resolvers which\
    \ might become involved in\n   processing such a query (for example, in a network\
    \ configuration that\n   forces a security-aware resolver to channel its queries\
    \ through a\n   security-oblivious recursive name server).  The rest of this section\n\
    \   describes how a security-aware name server processes DS queries in\n   order\
    \ to avoid this problem.\n   The need for special processing by a security-aware\
    \ name server only\n   arises when all the following conditions are met:\n   o\
    \  The name server has received a query for the DS RRset at a zone\n      cut.\n\
    \   o  The name server is authoritative for the child zone.\n   o  The name server\
    \ is not authoritative for the parent zone.\n   o  The name server does not offer\
    \ recursion.\n   In all other cases, the name server either has some way of obtaining\n\
    \   the DS RRset or could not have been expected to have the DS RRset\n   even\
    \ by the pre-DNSSEC processing rules, so the name server can\n   return either\
    \ the DS RRset or an error response according to the\n   normal processing rules.\n\
    \   If all the above conditions are met, however, the name server is\n   authoritative\
    \ for SNAME but cannot supply the requested RRset.  In\n   this case, the name\
    \ server MUST return an authoritative \"no data\"\n   response showing that the\
    \ DS RRset does not exist in the child zone's\n   apex.  See Appendix B.8 for\
    \ an example of such a response.\n"
- title: 3.1.5.  Responding to Queries for Type AXFR or IXFR
  contents:
  - "3.1.5.  Responding to Queries for Type AXFR or IXFR\n   DNSSEC does not change\
    \ the DNS zone transfer process.  A signed zone\n   will contain RRSIG, DNSKEY,\
    \ NSEC, and DS resource records, but these\n   records have no special meaning\
    \ with respect to a zone transfer\n   operation.\n   An authoritative name server\
    \ is not required to verify that a zone is\n   properly signed before sending\
    \ or accepting a zone transfer.\n   However, an authoritative name server MAY\
    \ choose to reject the entire\n   zone transfer if the zone fails to meet any\
    \ of the signing\n   requirements described in Section 2.  The primary objective\
    \ of a zone\n   transfer is to ensure that all authoritative name servers have\n\
    \   identical copies of the zone.  An authoritative name server that\n   chooses\
    \ to perform its own zone validation MUST NOT selectively\n   reject some RRs\
    \ and accept others.\n   DS RRsets appear only on the parental side of a zone\
    \ cut and are\n   authoritative data in the parent zone.  As with any other\n\
    \   authoritative RRset, the DS RRset MUST be included in zone transfers\n   of\
    \ the zone in which the RRset is authoritative data.  In the case of\n   the DS\
    \ RRset, this is the parent zone.\n   NSEC RRs appear in both the parent and child\
    \ zones at a zone cut and\n   are authoritative data in both the parent and child\
    \ zones.  The\n   parental and child NSEC RRs at a zone cut are never identical\
    \ to each\n   other, as the NSEC RR in the child zone's apex will always indicate\n\
    \   the presence of the child zone's SOA RR whereas the parental NSEC RR\n   at\
    \ the zone cut will never indicate the presence of an SOA RR.  As\n   with any\
    \ other authoritative RRs, NSEC RRs MUST be included in zone\n   transfers of\
    \ the zone in which they are authoritative data.  The\n   parental NSEC RR at\
    \ a zone cut MUST be included in zone transfers of\n   the parent zone, and the\
    \ NSEC at the zone apex of the child zone MUST\n   be included in zone transfers\
    \ of the child zone.\n   RRSIG RRs appear in both the parent and child zones at\
    \ a zone cut and\n   are authoritative in whichever zone contains the authoritative\
    \ RRset\n   for which the RRSIG RR provides the signature.  That is, the RRSIG\
    \ RR\n   for a DS RRset or a parental NSEC RR at a zone cut will be\n   authoritative\
    \ in the parent zone, and the RRSIG for any RRset in the\n   child zone's apex\
    \ will be authoritative in the child zone.  Parental\n   and child RRSIG RRs at\
    \ a zone cut will never be identical to each\n   other, as the Signer's Name field\
    \ of an RRSIG RR in the child zone's\n   apex will indicate a DNSKEY RR in the\
    \ child zone's apex whereas the\n   same field of a parental RRSIG RR at the zone\
    \ cut will indicate a\n   DNSKEY RR in the parent zone's apex.  As with any other\
    \ authoritative\n   RRs, RRSIG RRs MUST be included in zone transfers of the zone\
    \ in\n   which they are authoritative data.\n"
- title: 3.1.6.  The AD and CD Bits in an Authoritative Response
  contents:
  - "3.1.6.  The AD and CD Bits in an Authoritative Response\n   The CD and AD bits\
    \ are designed for use in communication between\n   security-aware resolvers and\
    \ security-aware recursive name servers.\n   These bits are for the most part\
    \ not relevant to query processing by\n   security-aware authoritative name servers.\n\
    \   A security-aware name server does not perform signature validation\n   for\
    \ authoritative data during query processing, even when the CD bit\n   is clear.\
    \  A security-aware name server SHOULD clear the CD bit when\n   composing an\
    \ authoritative response.\n   A security-aware name server MUST NOT set the AD\
    \ bit in a response\n   unless the name server considers all RRsets in the Answer\
    \ and\n   Authority sections of the response to be authentic.  A security-aware\n\
    \   name server's local policy MAY consider data from an authoritative\n   zone\
    \ to be authentic without further validation.  However, the name\n   server MUST\
    \ NOT do so unless the name server obtained the\n   authoritative zone via secure\
    \ means (such as a secure zone transfer\n   mechanism) and MUST NOT do so unless\
    \ this behavior has been\n   configured explicitly.\n   A security-aware name\
    \ server that supports recursion MUST follow the\n   rules for the CD and AD bits\
    \ given in Section 3.2 when generating a\n   response that involves data obtained\
    \ via recursion.\n"
- title: 3.2.  Recursive Name Servers
  contents:
  - "3.2.  Recursive Name Servers\n   As explained in [RFC4033], a security-aware\
    \ recursive name server is\n   an entity that acts in both the security-aware\
    \ name server and\n   security-aware resolver roles.  This section uses the terms\
    \ \"name\n   server side\" and \"resolver side\" to refer to the code within a\n\
    \   security-aware recursive name server that implements the\n   security-aware\
    \ name server role and the code that implements the\n   security-aware resolver\
    \ role, respectively.\n   The resolver side follows the usual rules for caching\
    \ and negative\n   caching that would apply to any security-aware resolver.\n"
- title: 3.2.1.  The DO Bit
  contents:
  - "3.2.1.  The DO Bit\n   The resolver side of a security-aware recursive name server\
    \ MUST set\n   the DO bit when sending requests, regardless of the state of the\
    \ DO\n   bit in the initiating request received by the name server side.  If\n\
    \   the DO bit in an initiating query is not set, the name server side\n   MUST\
    \ strip any authenticating DNSSEC RRs from the response but MUST\n   NOT strip\
    \ any DNSSEC RR types that the initiating query explicitly\n   requested.\n"
- title: 3.2.2.  The CD Bit
  contents:
  - "3.2.2.  The CD Bit\n   The CD bit exists in order to allow a security-aware resolver\
    \ to\n   disable signature validation in a security-aware name server's\n   processing\
    \ of a particular query.\n   The name server side MUST copy the setting of the\
    \ CD bit from a query\n   to the corresponding response.\n   The name server side\
    \ of a security-aware recursive name server MUST\n   pass the state of the CD\
    \ bit to the resolver side along with the rest\n   of an initiating query, so\
    \ that the resolver side will know whether\n   it is required to verify the response\
    \ data it returns to the name\n   server side.  If the CD bit is set, it indicates\
    \ that the originating\n   resolver is willing to perform whatever authentication\
    \ its local\n   policy requires.  Thus, the resolver side of the recursive name\n\
    \   server need not perform authentication on the RRsets in the response.\n  \
    \ When the CD bit is set, the recursive name server SHOULD, if\n   possible, return\
    \ the requested data to the originating resolver, even\n   if the recursive name\
    \ server's local authentication policy would\n   reject the records in question.\
    \  That is, by setting the CD bit, the\n   originating resolver has indicated\
    \ that it takes responsibility for\n   performing its own authentication, and\
    \ the recursive name server\n   should not interfere.\n   If the resolver side\
    \ implements a BAD cache (see Section 4.7) and the\n   name server side receives\
    \ a query that matches an entry in the\n   resolver side's BAD cache, the name\
    \ server side's response depends on\n   the state of the CD bit in the original\
    \ query.  If the CD bit is set,\n   the name server side SHOULD return the data\
    \ from the BAD cache; if\n   the CD bit is not set, the name server side MUST\
    \ return RCODE 2\n   (server failure).\n   The intent of the above rule is to\
    \ provide the raw data to clients\n   that are capable of performing their own\
    \ signature verification\n   checks while protecting clients that depend on the\
    \ resolver side of a\n   security-aware recursive name server to perform such\
    \ checks.  Several\n   of the possible reasons why signature validation might\
    \ fail involve\n   conditions that may not apply equally to the recursive name\
    \ server\n   and the client that invoked it.  For example, the recursive name\n\
    \   server's clock may be set incorrectly, or the client may have\n   knowledge\
    \ of a relevant island of security that the recursive name\n   server does not\
    \ share.  In such cases, \"protecting\" a client that is\n   capable of performing\
    \ its own signature validation from ever seeing\n   the \"bad\" data does not\
    \ help the client.\n"
- title: 3.2.3.  The AD Bit
  contents:
  - "3.2.3.  The AD Bit\n   The name server side of a security-aware recursive name\
    \ server MUST\n   NOT set the AD bit in a response unless the name server considers\
    \ all\n   RRsets in the Answer and Authority sections of the response to be\n\
    \   authentic.  The name server side SHOULD set the AD bit if and only if\n  \
    \ the resolver side considers all RRsets in the Answer section and any\n   relevant\
    \ negative response RRs in the Authority section to be\n   authentic.  The resolver\
    \ side MUST follow the procedure described in\n   Section 5 to determine whether\
    \ the RRs in question are authentic.\n   However, for backward compatibility,\
    \ a recursive name server MAY set\n   the AD bit when a response includes unsigned\
    \ CNAME RRs if those CNAME\n   RRs demonstrably could have been synthesized from\
    \ an authentic DNAME\n   RR that is also included in the response according to\
    \ the synthesis\n   rules described in [RFC2672].\n"
- title: 3.3.  Example DNSSEC Responses
  contents:
  - "3.3.  Example DNSSEC Responses\n   See Appendix B for example response packets.\n"
- title: 4.  Resolving
  contents:
  - "4.  Resolving\n   This section describes the behavior of entities that include\n\
    \   security-aware resolver functions.  In many cases such functions will\n  \
    \ be part of a security-aware recursive name server, but a stand-alone\n   security-aware\
    \ resolver has many of the same requirements.  Functions\n   specific to security-aware\
    \ recursive name servers are described in\n   Section 3.2.\n"
- title: 4.1.  EDNS Support
  contents:
  - "4.1.  EDNS Support\n   A security-aware resolver MUST include an EDNS ([RFC2671])\
    \ OPT\n   pseudo-RR with the DO ([RFC3225]) bit set when sending queries.\n  \
    \ A security-aware resolver MUST support a message size of at least\n   1220 octets,\
    \ SHOULD support a message size of 4000 octets, and MUST\n   use the \"sender's\
    \ UDP payload size\" field in the EDNS OPT pseudo-RR\n   to advertise the message\
    \ size that it is willing to accept.  A\n   security-aware resolver's IP layer\
    \ MUST handle fragmented UDP packets\n   correctly regardless of whether any such\
    \ fragmented packets were\n   received via IPv4 or IPv6.  Please see [RFC1122],\
    \ [RFC2460], and\n   [RFC3226] for discussion of these requirements.\n"
- title: 4.2.  Signature Verification Support
  contents:
  - "4.2.  Signature Verification Support\n   A security-aware resolver MUST support\
    \ the signature verification\n   mechanisms described in Section 5 and SHOULD\
    \ apply them to every\n   received response, except when:\n   o  the security-aware\
    \ resolver is part of a security-aware recursive\n      name server, and the response\
    \ is the result of recursion on behalf\n      of a query received with the CD\
    \ bit set;\n   o  the response is the result of a query generated directly via\
    \ some\n      form of application interface that instructed the security-aware\n\
    \      resolver not to perform validation for this query; or\n   o  validation\
    \ for this query has been disabled by local policy.\n   A security-aware resolver's\
    \ support for signature verification MUST\n   include support for verification\
    \ of wildcard owner names.\n   Security-aware resolvers MAY query for missing\
    \ security RRs in an\n   attempt to perform validation; implementations that choose\
    \ to do so\n   must be aware that the answers received may not be sufficient to\n\
    \   validate the original response.  For example, a zone update may have\n   changed\
    \ (or deleted) the desired information between the original and\n   follow-up\
    \ queries.\n   When attempting to retrieve missing NSEC RRs that reside on the\n\
    \   parental side at a zone cut, a security-aware iterative-mode resolver\n  \
    \ MUST query the name servers for the parent zone, not the child zone.\n   When\
    \ attempting to retrieve a missing DS, a security-aware\n   iterative-mode resolver\
    \ MUST query the name servers for the parent\n   zone, not the child zone.  As\
    \ explained in Section 3.1.4.1,\n   security-aware name servers need to apply\
    \ special processing rules to\n   handle the DS RR, and in some situations the\
    \ resolver may also need\n   to apply special rules to locate the name servers\
    \ for the parent zone\n   if the resolver does not already have the parent's NS\
    \ RRset.  To\n   locate the parent NS RRset, the resolver can start with the\n\
    \   delegation name, strip off the leftmost label, and query for an NS\n   RRset\
    \ by that name.  If no NS RRset is present at that name, the\n   resolver then\
    \ strips off the leftmost remaining label and retries the\n   query for that name,\
    \ repeating this process of walking up the tree\n   until it either finds the\
    \ NS RRset or runs out of labels.\n"
- title: 4.3.  Determining Security Status of Data
  contents:
  - "4.3.  Determining Security Status of Data\n   A security-aware resolver MUST\
    \ be able to determine whether it should\n   expect a particular RRset to be signed.\
    \  More precisely, a\n   security-aware resolver must be able to distinguish between\
    \ four\n   cases:\n   Secure: An RRset for which the resolver is able to build\
    \ a chain of\n      signed DNSKEY and DS RRs from a trusted security anchor to\
    \ the\n      RRset.  In this case, the RRset should be signed and is subject to\n\
    \      signature validation, as described above.\n   Insecure: An RRset for which\
    \ the resolver knows that it has no chain\n      of signed DNSKEY and DS RRs from\
    \ any trusted starting point to the\n      RRset.  This can occur when the target\
    \ RRset lies in an unsigned\n      zone or in a descendent of an unsigned zone.\
    \  In this case, the\n      RRset may or may not be signed, but the resolver will\
    \ not be able\n      to verify the signature.\n   Bogus: An RRset for which the\
    \ resolver believes that it ought to be\n      able to establish a chain of trust\
    \ but for which it is unable to\n      do so, either due to signatures that for\
    \ some reason fail to\n      validate or due to missing data that the relevant\
    \ DNSSEC RRs\n      indicate should be present.  This case may indicate an attack\
    \ but\n      may also indicate a configuration error or some form of data\n  \
    \    corruption.\n   Indeterminate: An RRset for which the resolver is not able\
    \ to\n      determine whether the RRset should be signed, as the resolver is\n\
    \      not able to obtain the necessary DNSSEC RRs.  This can occur when\n   \
    \   the security-aware resolver is not able to contact security-aware\n      name\
    \ servers for the relevant zones.\n"
- title: 4.4.  Configured Trust Anchors
  contents:
  - "4.4.  Configured Trust Anchors\n   A security-aware resolver MUST be capable\
    \ of being configured with at\n   least one trusted public key or DS RR and SHOULD\
    \ be capable of being\n   configured with multiple trusted public keys or DS RRs.\
    \  Since a\n   security-aware resolver will not be able to validate signatures\n\
    \   without such a configured trust anchor, the resolver SHOULD have some\n  \
    \ reasonably robust mechanism for obtaining such keys when it boots;\n   examples\
    \ of such a mechanism would be some form of non-volatile\n   storage (such as\
    \ a disk drive) or some form of trusted local network\n   configuration mechanism.\n\
    \   Note that trust anchors also cover key material that is updated in a\n   secure\
    \ manner.  This secure manner could be through physical media, a\n   key exchange\
    \ protocol, or some other out-of-band means.\n"
- title: 4.5.  Response Caching
  contents:
  - "4.5.  Response Caching\n   A security-aware resolver SHOULD cache each response\
    \ as a single\n   atomic entry containing the entire answer, including the named\
    \ RRset\n   and any associated DNSSEC RRs.  The resolver SHOULD discard the\n\
    \   entire atomic entry when any of the RRs contained in it expire.  In\n   most\
    \ cases the appropriate cache index for the atomic entry will be\n   the triple\
    \ <QNAME, QTYPE, QCLASS>, but in cases such as the response\n   form described\
    \ in Section 3.1.3.2 the appropriate cache index will be\n   the double <QNAME,QCLASS>.\n\
    \   The reason for these recommendations is that, between the initial\n   query\
    \ and the expiration of the data from the cache, the\n   authoritative data might\
    \ have been changed (for example, via dynamic\n   update).\n   There are two situations\
    \ for which this is relevant:\n   1.  By using the RRSIG record, it is possible\
    \ to deduce that an\n       answer was synthesized from a wildcard.  A security-aware\n\
    \       recursive name server could store this wildcard data and use it\n    \
    \   to generate positive responses to queries other than the name for\n      \
    \ which the original answer was first received.\n   2.  NSEC RRs received to prove\
    \ the non-existence of a name could be\n       reused by a security-aware resolver\
    \ to prove the non-existence of\n       any name in the name range it spans.\n\
    \   In theory, a resolver could use wildcards or NSEC RRs to generate\n   positive\
    \ and negative responses (respectively) until the TTL or\n   signatures on the\
    \ records in question expire.  However, it seems\n   prudent for resolvers to\
    \ avoid blocking new authoritative data or\n   synthesizing new data on their\
    \ own.  Resolvers that follow this\n   recommendation will have a more consistent\
    \ view of the namespace.\n"
- title: 4.6.  Handling of the CD and AD Bits
  contents:
  - "4.6.  Handling of the CD and AD Bits\n   A security-aware resolver MAY set a\
    \ query's CD bit in order to\n   indicate that the resolver takes responsibility\
    \ for performing\n   whatever authentication its local policy requires on the\
    \ RRsets in\n   the response.  See Section 3.2 for the effect this bit has on\
    \ the\n   behavior of security-aware recursive name servers.\n   A security-aware\
    \ resolver MUST clear the AD bit when composing query\n   messages to protect\
    \ against buggy name servers that blindly copy\n   header bits that they do not\
    \ understand from the query message to the\n   response message.\n   A resolver\
    \ MUST disregard the meaning of the CD and AD bits in a\n   response unless the\
    \ response was obtained by using a secure channel\n   or the resolver was specifically\
    \ configured to regard the message\n   header bits without using a secure channel.\n"
- title: 4.7.  Caching BAD Data
  contents:
  - "4.7.  Caching BAD Data\n   While many validation errors will be transient, some\
    \ are likely to be\n   more persistent, such as those caused by administrative\
    \ error\n   (failure to re-sign a zone, clock skew, and so forth).  Since\n  \
    \ requerying will not help in these cases, validating resolvers might\n   generate\
    \ a significant amount of unnecessary DNS traffic as a result\n   of repeated\
    \ queries for RRsets with persistent validation failures.\n   To prevent such\
    \ unnecessary DNS traffic, security-aware resolvers MAY\n   cache data with invalid\
    \ signatures, with some restrictions.\n   Conceptually, caching such data is similar\
    \ to negative caching\n   ([RFC2308]), except that instead of caching a valid\
    \ negative\n   response, the resolver is caching the fact that a particular answer\n\
    \   failed to validate.  This document refers to a cache of data with\n   invalid\
    \ signatures as a \"BAD cache\".\n   Resolvers that implement a BAD cache MUST\
    \ take steps to prevent the\n   cache from being useful as a denial-of-service\
    \ attack amplifier,\n   particularly the following:\n   o  Since RRsets that fail\
    \ to validate do not have trustworthy TTLs,\n      the implementation MUST assign\
    \ a TTL.  This TTL SHOULD be small,\n      in order to mitigate the effect of\
    \ caching the results of an\n      attack.\n   o  In order to prevent caching\
    \ of a transient validation failure\n      (which might be the result of an attack),\
    \ resolvers SHOULD track\n      queries that result in validation failures and\
    \ SHOULD only answer\n      from the BAD cache after the number of times that\
    \ responses to\n      queries for that particular <QNAME, QTYPE, QCLASS> have\
    \ failed to\n      validate exceeds a threshold value.\n   Resolvers MUST NOT\
    \ return RRsets from the BAD cache unless the\n   resolver is not required to\
    \ validate the signatures of the RRsets in\n   question under the rules given\
    \ in Section 4.2 of this document.  See\n   Section 3.2.2 for discussion of how\
    \ the responses returned by a\n   security-aware recursive name server interact\
    \ with a BAD cache.\n"
- title: 4.8.  Synthesized CNAMEs
  contents:
  - "4.8.  Synthesized CNAMEs\n   A validating security-aware resolver MUST treat\
    \ the signature of a\n   valid signed DNAME RR as also covering unsigned CNAME\
    \ RRs that could\n   have been synthesized from the DNAME RR, as described in\
    \ [RFC2672],\n   at least to the extent of not rejecting a response message solely\n\
    \   because it contains such CNAME RRs.  The resolver MAY retain such\n   CNAME\
    \ RRs in its cache or in the answers it hands back, but is not\n   required to\
    \ do so.\n"
- title: 4.9.  Stub Resolvers
  contents:
  - "4.9.  Stub Resolvers\n   A security-aware stub resolver MUST support the DNSSEC\
    \ RR types, at\n   least to the extent of not mishandling responses just because\
    \ they\n   contain DNSSEC RRs.\n"
- title: 4.9.1.  Handling of the DO Bit
  contents:
  - "4.9.1.  Handling of the DO Bit\n   A non-validating security-aware stub resolver\
    \ MAY include the DNSSEC\n   RRs returned by a security-aware recursive name server\
    \ as part of the\n   data that the stub resolver hands back to the application\
    \ that\n   invoked it, but is not required to do so.  A non-validating stub\n\
    \   resolver that seeks to do this will need to set the DO bit in order\n   to\
    \ receive DNSSEC RRs from the recursive name server.\n   A validating security-aware\
    \ stub resolver MUST set the DO bit,\n   because otherwise it will not receive\
    \ the DNSSEC RRs it needs to\n   perform signature validation.\n"
- title: 4.9.2.  Handling of the CD Bit
  contents:
  - "4.9.2.  Handling of the CD Bit\n   A non-validating security-aware stub resolver\
    \ SHOULD NOT set the CD\n   bit when sending queries unless it is requested by\
    \ the application\n   layer, as by definition, a non-validating stub resolver\
    \ depends on\n   the security-aware recursive name server to perform validation\
    \ on its\n   behalf.\n   A validating security-aware stub resolver SHOULD set\
    \ the CD bit,\n   because otherwise the security-aware recursive name server will\n\
    \   answer the query using the name server's local policy, which may\n   prevent\
    \ the stub resolver from receiving data that would be\n   acceptable to the stub\
    \ resolver's local policy.\n"
- title: 4.9.3.  Handling of the AD Bit
  contents:
  - "4.9.3.  Handling of the AD Bit\n   A non-validating security-aware stub resolver\
    \ MAY chose to examine\n   the setting of the AD bit in response messages that\
    \ it receives in\n   order to determine whether the security-aware recursive name\
    \ server\n   that sent the response claims to have cryptographically verified\
    \ the\n   data in the Answer and Authority sections of the response message.\n\
    \   Note, however, that the responses received by a security-aware stub\n   resolver\
    \ are heavily dependent on the local policy of the\n   security-aware recursive\
    \ name server.  Therefore, there may be little\n   practical value in checking\
    \ the status of the AD bit, except perhaps\n   as a debugging aid.  In any case,\
    \ a security-aware stub resolver MUST\n   NOT place any reliance on signature\
    \ validation allegedly performed on\n   its behalf, except when the security-aware\
    \ stub resolver obtained the\n   data in question from a trusted security-aware\
    \ recursive name server\n   via a secure channel.\n   A validating security-aware\
    \ stub resolver SHOULD NOT examine the\n   setting of the AD bit in response messages,\
    \ as, by definition, the\n   stub resolver performs its own signature validation\
    \ regardless of the\n   setting of the AD bit.\n"
- title: 5.  Authenticating DNS Responses
  contents:
  - "5.  Authenticating DNS Responses\n   To use DNSSEC RRs for authentication, a\
    \ security-aware resolver\n   requires configured knowledge of at least one authenticated\
    \ DNSKEY or\n   DS RR.  The process for obtaining and authenticating this initial\n\
    \   trust anchor is achieved via some external mechanism.  For example, a\n  \
    \ resolver could use some off-line authenticated exchange to obtain a\n   zone's\
    \ DNSKEY RR or to obtain a DS RR that identifies and\n   authenticates a zone's\
    \ DNSKEY RR.  The remainder of this section\n   assumes that the resolver has\
    \ somehow obtained an initial set of\n   trust anchors.\n   An initial DNSKEY\
    \ RR can be used to authenticate a zone's apex DNSKEY\n   RRset.  To authenticate\
    \ an apex DNSKEY RRset by using an initial key,\n   the resolver MUST:\n   1.\
    \  verify that the initial DNSKEY RR appears in the apex DNSKEY\n       RRset,\
    \ and that the DNSKEY RR has the Zone Key Flag (DNSKEY RDATA\n       bit 7) set;\
    \ and\n   2.  verify that there is some RRSIG RR that covers the apex DNSKEY\n\
    \       RRset, and that the combination of the RRSIG RR and the initial\n    \
    \   DNSKEY RR authenticates the DNSKEY RRset.  The process for using\n       an\
    \ RRSIG RR to authenticate an RRset is described in Section 5.3.\n   Once the\
    \ resolver has authenticated the apex DNSKEY RRset by using an\n   initial DNSKEY\
    \ RR, delegations from that zone can be authenticated by\n   using DS RRs.  This\
    \ allows a resolver to start from an initial key\n   and use DS RRsets to proceed\
    \ recursively down the DNS tree, obtaining\n   other apex DNSKEY RRsets.  If the\
    \ resolver were configured with a\n   root DNSKEY RR, and if every delegation\
    \ had a DS RR associated with\n   it, then the resolver could obtain and validate\
    \ any apex DNSKEY\n   RRset.  The process of using DS RRs to authenticate referrals\
    \ is\n   described in Section 5.2.\n   Section 5.3 shows how the resolver can\
    \ use DNSKEY RRs in the apex\n   DNSKEY RRset and RRSIG RRs from the zone to authenticate\
    \ any other\n   RRsets in the zone once the resolver has authenticated a zone's\
    \ apex\n   DNSKEY RRset.  Section 5.4 shows how the resolver can use\n   authenticated\
    \ NSEC RRsets from the zone to prove that an RRset is not\n   present in the zone.\n\
    \   When a resolver indicates support for DNSSEC (by setting the DO bit),\n  \
    \ a security-aware name server should attempt to provide the necessary\n   DNSKEY,\
    \ RRSIG, NSEC, and DS RRsets in a response (see Section 3).\n   However, a security-aware\
    \ resolver may still receive a response that\n   lacks the appropriate DNSSEC\
    \ RRs, whether due to configuration issues\n   such as an upstream security-oblivious\
    \ recursive name server that\n   accidentally interferes with DNSSEC RRs or due\
    \ to a deliberate attack\n   in which an adversary forges a response, strips DNSSEC\
    \ RRs from a\n   response, or modifies a query so that DNSSEC RRs appear not to\
    \ be\n   requested.  The absence of DNSSEC data in a response MUST NOT by\n  \
    \ itself be taken as an indication that no authentication information\n   exists.\n\
    \   A resolver SHOULD expect authentication information from signed\n   zones.\
    \  A resolver SHOULD believe that a zone is signed if the\n   resolver has been\
    \ configured with public key information for the\n   zone, or if the zone's parent\
    \ is signed and the delegation from the\n   parent contains a DS RRset.\n"
- title: 5.1.  Special Considerations for Islands of Security
  contents:
  - "5.1.  Special Considerations for Islands of Security\n   Islands of security\
    \ (see [RFC4033]) are signed zones for which it is\n   not possible to construct\
    \ an authentication chain to the zone from\n   its parent.  Validating signatures\
    \ within an island of security\n   requires that the validator have some other\
    \ means of obtaining an\n   initial authenticated zone key for the island.  If\
    \ a validator cannot\n   obtain such a key, it SHOULD switch to operating as if\
    \ the zones in\n   the island of security are unsigned.\n   All the normal processes\
    \ for validating responses apply to islands of\n   security.  The only difference\
    \ between normal validation and\n   validation within an island of security is\
    \ in how the validator\n   obtains a trust anchor for the authentication chain.\n"
- title: 5.2.  Authenticating Referrals
  contents:
  - "5.2.  Authenticating Referrals\n   Once the apex DNSKEY RRset for a signed parent\
    \ zone has been\n   authenticated, DS RRsets can be used to authenticate the delegation\n\
    \   to a signed child zone.  A DS RR identifies a DNSKEY RR in the child\n   zone's\
    \ apex DNSKEY RRset and contains a cryptographic digest of the\n   child zone's\
    \ DNSKEY RR.  Use of a strong cryptographic digest\n   algorithm ensures that\
    \ it is computationally infeasible for an\n   adversary to generate a DNSKEY RR\
    \ that matches the digest.  Thus,\n   authenticating the digest allows a resolver\
    \ to authenticate the\n   matching DNSKEY RR.  The resolver can then use this\
    \ child DNSKEY RR\n   to authenticate the entire child apex DNSKEY RRset.\n  \
    \ Given a DS RR for a delegation, the child zone's apex DNSKEY RRset\n   can be\
    \ authenticated if all of the following hold:\n   o  The DS RR has been authenticated\
    \ using some DNSKEY RR in the\n      parent's apex DNSKEY RRset (see Section 5.3).\n\
    \   o  The Algorithm and Key Tag in the DS RR match the Algorithm field\n    \
    \  and the key tag of a DNSKEY RR in the child zone's apex DNSKEY\n      RRset,\
    \ and, when the DNSKEY RR's owner name and RDATA are hashed\n      using the digest\
    \ algorithm specified in the DS RR's Digest Type\n      field, the resulting digest\
    \ value matches the Digest field of the\n      DS RR.\n   o  The matching DNSKEY\
    \ RR in the child zone has the Zone Flag bit\n      set, the corresponding private\
    \ key has signed the child zone's\n      apex DNSKEY RRset, and the resulting\
    \ RRSIG RR authenticates the\n      child zone's apex DNSKEY RRset.\n   If the\
    \ referral from the parent zone did not contain a DS RRset, the\n   response should\
    \ have included a signed NSEC RRset proving that no DS\n   RRset exists for the\
    \ delegated name (see Section 3.1.4).  A\n   security-aware resolver MUST query\
    \ the name servers for the parent\n   zone for the DS RRset if the referral includes\
    \ neither a DS RRset nor\n   a NSEC RRset proving that the DS RRset does not exist\
    \ (see Section\n   4).\n   If the validator authenticates an NSEC RRset that proves\
    \ that no DS\n   RRset is present for this zone, then there is no authentication\
    \ path\n   leading from the parent to the child.  If the resolver has an initial\n\
    \   DNSKEY or DS RR that belongs to the child zone or to any delegation\n   below\
    \ the child zone, this initial DNSKEY or DS RR MAY be used to\n   re-establish\
    \ an authentication path.  If no such initial DNSKEY or DS\n   RR exists, the\
    \ validator cannot authenticate RRsets in or below the\n   child zone.\n   If\
    \ the validator does not support any of the algorithms listed in an\n   authenticated\
    \ DS RRset, then the resolver has no supported\n   authentication path leading\
    \ from the parent to the child.  The\n   resolver should treat this case as it\
    \ would the case of an\n   authenticated NSEC RRset proving that no DS RRset exists,\
    \ as\n   described above.\n   Note that, for a signed delegation, there are two\
    \ NSEC RRs associated\n   with the delegated name.  One NSEC RR resides in the\
    \ parent zone and\n   can be used to prove whether a DS RRset exists for the delegated\n\
    \   name.  The second NSEC RR resides in the child zone and identifies\n   which\
    \ RRsets are present at the apex of the child zone.  The parent\n   NSEC RR and\
    \ child NSEC RR can always be distinguished because the SOA\n   bit will be set\
    \ in the child NSEC RR and clear in the parent NSEC RR.\n   A security-aware resolver\
    \ MUST use the parent NSEC RR when attempting\n   to prove that a DS RRset does\
    \ not exist.\n   If the resolver does not support any of the algorithms listed\
    \ in an\n   authenticated DS RRset, then the resolver will not be able to verify\n\
    \   the authentication path to the child zone.  In this case, the\n   resolver\
    \ SHOULD treat the child zone as if it were unsigned.\n"
- title: 5.3.  Authenticating an RRset with an RRSIG RR
  contents:
  - "5.3.  Authenticating an RRset with an RRSIG RR\n   A validator can use an RRSIG\
    \ RR and its corresponding DNSKEY RR to\n   attempt to authenticate RRsets.  The\
    \ validator first checks the RRSIG\n   RR to verify that it covers the RRset,\
    \ has a valid time interval, and\n   identifies a valid DNSKEY RR.  The validator\
    \ then constructs the\n   canonical form of the signed data by appending the RRSIG\
    \ RDATA\n   (excluding the Signature Field) with the canonical form of the\n \
    \  covered RRset.  Finally, the validator uses the public key and\n   signature\
    \ to authenticate the signed data.  Sections 5.3.1, 5.3.2,\n   and 5.3.3 describe\
    \ each step in detail.\n"
- title: 5.3.1.  Checking the RRSIG RR Validity
  contents:
  - "5.3.1.  Checking the RRSIG RR Validity\n   A security-aware resolver can use\
    \ an RRSIG RR to authenticate an\n   RRset if all of the following conditions\
    \ hold:\n   o  The RRSIG RR and the RRset MUST have the same owner name and the\n\
    \      same class.\n   o  The RRSIG RR's Signer's Name field MUST be the name\
    \ of the zone\n      that contains the RRset.\n   o  The RRSIG RR's Type Covered\
    \ field MUST equal the RRset's type.\n   o  The number of labels in the RRset\
    \ owner name MUST be greater than\n      or equal to the value in the RRSIG RR's\
    \ Labels field.\n   o  The validator's notion of the current time MUST be less\
    \ than or\n      equal to the time listed in the RRSIG RR's Expiration field.\n\
    \   o  The validator's notion of the current time MUST be greater than or\n  \
    \    equal to the time listed in the RRSIG RR's Inception field.\n   o  The RRSIG\
    \ RR's Signer's Name, Algorithm, and Key Tag fields MUST\n      match the owner\
    \ name, algorithm, and key tag for some DNSKEY RR in\n      the zone's apex DNSKEY\
    \ RRset.\n   o  The matching DNSKEY RR MUST be present in the zone's apex DNSKEY\n\
    \      RRset, and MUST have the Zone Flag bit (DNSKEY RDATA Flag bit 7)\n    \
    \  set.\n   It is possible for more than one DNSKEY RR to match the conditions\n\
    \   above.  In this case, the validator cannot predetermine which DNSKEY\n   RR\
    \ to use to authenticate the signature, and it MUST try each\n   matching DNSKEY\
    \ RR until either the signature is validated or the\n   validator has run out\
    \ of matching public keys to try.\n   Note that this authentication process is\
    \ only meaningful if the\n   validator authenticates the DNSKEY RR before using\
    \ it to validate\n   signatures.  The matching DNSKEY RR is considered to be authentic\
    \ if:\n   o  the apex DNSKEY RRset containing the DNSKEY RR is considered\n  \
    \    authentic; or\n   o  the RRset covered by the RRSIG RR is the apex DNSKEY\
    \ RRset itself,\n      and the DNSKEY RR either matches an authenticated DS RR\
    \ from the\n      parent zone or matches a trust anchor.\n"
- title: 5.3.2.  Reconstructing the Signed Data
  contents:
  - "5.3.2.  Reconstructing the Signed Data\n   Once the RRSIG RR has met the validity\
    \ requirements described in\n   Section 5.3.1, the validator has to reconstruct\
    \ the original signed\n   data.  The original signed data includes RRSIG RDATA\
    \ (excluding the\n   Signature field) and the canonical form of the RRset.  Aside\
    \ from\n   being ordered, the canonical form of the RRset might also differ from\n\
    \   the received RRset due to DNS name compression, decremented TTLs, or\n   wildcard\
    \ expansion.  The validator should use the following to\n   reconstruct the original\
    \ signed data:\n         signed_data = RRSIG_RDATA | RR(1) | RR(2)...  where\n\
    \            \"|\" denotes concatenation\n            RRSIG_RDATA is the wire\
    \ format of the RRSIG RDATA fields\n               with the Signature field excluded\
    \ and the Signer's Name\n               in canonical form.\n            RR(i)\
    \ = name | type | class | OrigTTL | RDATA length | RDATA\n               name\
    \ is calculated according to the function below\n               class is the RRset's\
    \ class\n               type is the RRset type and all RRs in the class\n    \
    \           OrigTTL is the value from the RRSIG Original TTL field\n         \
    \      All names in the RDATA field are in canonical form\n               The\
    \ set of all RR(i) is sorted into canonical order.\n            To calculate the\
    \ name:\n               let rrsig_labels = the value of the RRSIG Labels field\n\
    \               let fqdn = RRset's fully qualified domain name in\n          \
    \                     canonical form\n               let fqdn_labels = Label count\
    \ of the fqdn above.\n               if rrsig_labels = fqdn_labels,\n        \
    \           name = fqdn\n               if rrsig_labels < fqdn_labels,\n     \
    \             name = \"*.\" | the rightmost rrsig_label labels of the\n      \
    \                          fqdn\n               if rrsig_labels > fqdn_labels\n\
    \                  the RRSIG RR did not pass the necessary validation\n      \
    \            checks and MUST NOT be used to authenticate this\n              \
    \    RRset.\n   The canonical forms for names and RRsets are defined in [RFC4034].\n\
    \   NSEC RRsets at a delegation boundary require special processing.\n   There\
    \ are two distinct NSEC RRsets associated with a signed delegated\n   name.  One\
    \ NSEC RRset resides in the parent zone, and specifies which\n   RRsets are present\
    \ at the parent zone.  The second NSEC RRset resides\n   at the child zone and\
    \ identifies which RRsets are present at the apex\n   in the child zone.  The\
    \ parent NSEC RRset and child NSEC RRset can\n   always be distinguished as only\
    \ a child NSEC RR will indicate that an\n   SOA RRset exists at the name.  When\
    \ reconstructing the original NSEC\n   RRset for the delegation from the parent\
    \ zone, the NSEC RRs MUST NOT\n   be combined with NSEC RRs from the child zone.\
    \  When reconstructing\n   the original NSEC RRset for the apex of the child zone,\
    \ the NSEC RRs\n   MUST NOT be combined with NSEC RRs from the parent zone.\n\
    \   Note that each of the two NSEC RRsets at a delegation point has a\n   corresponding\
    \ RRSIG RR with an owner name matching the delegated\n   name, and each of these\
    \ RRSIG RRs is authoritative data associated\n   with the same zone that contains\
    \ the corresponding NSEC RRset.  If\n   necessary, a resolver can tell these RRSIG\
    \ RRs apart by checking the\n   Signer's Name field.\n"
- title: 5.3.3.  Checking the Signature
  contents:
  - "5.3.3.  Checking the Signature\n   Once the resolver has validated the RRSIG\
    \ RR as described in Section\n   5.3.1 and reconstructed the original signed data\
    \ as described in\n   Section 5.3.2, the validator can attempt to use the cryptographic\n\
    \   signature to authenticate the signed data, and thus (finally!)\n   authenticate\
    \ the RRset.\n   The Algorithm field in the RRSIG RR identifies the cryptographic\n\
    \   algorithm used to generate the signature.  The signature itself is\n   contained\
    \ in the Signature field of the RRSIG RDATA, and the public\n   key used to verify\
    \ the signature is contained in the Public Key field\n   of the matching DNSKEY\
    \ RR(s) (found in Section 5.3.1).  [RFC4034]\n   provides a list of algorithm\
    \ types and provides pointers to the\n   documents that define each algorithm's\
    \ use.\n   Note that it is possible for more than one DNSKEY RR to match the\n\
    \   conditions in Section 5.3.1.  In this case, the validator can only\n   determine\
    \ which DNSKEY RR is correct by trying each matching public\n   key until the\
    \ validator either succeeds in validating the signature\n   or runs out of keys\
    \ to try.\n   If the Labels field of the RRSIG RR is not equal to the number of\n\
    \   labels in the RRset's fully qualified owner name, then the RRset is\n   either\
    \ invalid or the result of wildcard expansion.  The resolver\n   MUST verify that\
    \ wildcard expansion was applied properly before\n   considering the RRset to\
    \ be authentic.  Section 5.3.4 describes how\n   to determine whether a wildcard\
    \ was applied properly.\n   If other RRSIG RRs also cover this RRset, the local\
    \ resolver security\n   policy determines whether the resolver also has to test\
    \ these RRSIG\n   RRs and how to resolve conflicts if these RRSIG RRs lead to\
    \ differing\n   results.\n   If the resolver accepts the RRset as authentic, the\
    \ validator MUST\n   set the TTL of the RRSIG RR and each RR in the authenticated\
    \ RRset to\n   a value no greater than the minimum of:\n   o  the RRset's TTL\
    \ as received in the response;\n   o  the RRSIG RR's TTL as received in the response;\n\
    \   o  the value in the RRSIG RR's Original TTL field; and\n   o  the difference\
    \ of the RRSIG RR's Signature Expiration time and the\n      current time.\n"
- title: 5.3.4.  Authenticating a Wildcard Expanded RRset Positive Response
  contents:
  - "5.3.4.  Authenticating a Wildcard Expanded RRset Positive Response\n   If the\
    \ number of labels in an RRset's owner name is greater than the\n   Labels field\
    \ of the covering RRSIG RR, then the RRset and its\n   covering RRSIG RR were\
    \ created as a result of wildcard expansion.\n   Once the validator has verified\
    \ the signature, as described in\n   Section 5.3, it must take additional steps\
    \ to verify the non-\n   existence of an exact match or closer wildcard match\
    \ for the query.\n   Section 5.4 discusses these steps.\n   Note that the response\
    \ received by the resolver should include all\n   NSEC RRs needed to authenticate\
    \ the response (see Section 3.1.3).\n"
- title: 5.4.  Authenticated Denial of Existence
  contents:
  - "5.4.  Authenticated Denial of Existence\n   A resolver can use authenticated\
    \ NSEC RRs to prove that an RRset is\n   not present in a signed zone.  Security-aware\
    \ name servers should\n   automatically include any necessary NSEC RRs for signed\
    \ zones in\n   their responses to security-aware resolvers.\n   Denial of existence\
    \ is determined by the following rules:\n   o  If the requested RR name matches\
    \ the owner name of an\n      authenticated NSEC RR, then the NSEC RR's type bit\
    \ map field lists\n      all RR types present at that owner name, and a resolver\
    \ can prove\n      that the requested RR type does not exist by checking for the\
    \ RR\n      type in the bit map.  If the number of labels in an authenticated\n\
    \      NSEC RR's owner name equals the Labels field of the covering RRSIG\n  \
    \    RR, then the existence of the NSEC RR proves that wildcard\n      expansion\
    \ could not have been used to match the request.\n   o  If the requested RR name\
    \ would appear after an authenticated NSEC\n      RR's owner name and before the\
    \ name listed in that NSEC RR's Next\n      Domain Name field according to the\
    \ canonical DNS name order\n      defined in [RFC4034], then no RRsets with the\
    \ requested name exist\n      in the zone.  However, it is possible that a wildcard\
    \ could be\n      used to match the requested RR owner name and type, so proving\n\
    \      that the requested RRset does not exist also requires proving that\n  \
    \    no possible wildcard RRset exists that could have been used to\n      generate\
    \ a positive response.\n   In addition, security-aware resolvers MUST authenticate\
    \ the NSEC\n   RRsets that comprise the non-existence proof as described in Section\n\
    \   5.3.\n   To prove the non-existence of an RRset, the resolver must be able\
    \ to\n   verify both that the queried RRset does not exist and that no\n   relevant\
    \ wildcard RRset exists.  Proving this may require more than\n   one NSEC RRset\
    \ from the zone.  If the complete set of necessary NSEC\n   RRsets is not present\
    \ in a response (perhaps due to message\n   truncation), then a security-aware\
    \ resolver MUST resend the query in\n   order to attempt to obtain the full collection\
    \ of NSEC RRs necessary\n   to verify the non-existence of the requested RRset.\
    \  As with all DNS\n   operations, however, the resolver MUST bound the work it\
    \ puts into\n   answering any particular query.\n   Since a validated NSEC RR\
    \ proves the existence of both itself and its\n   corresponding RRSIG RR, a validator\
    \ MUST ignore the settings of the\n   NSEC and RRSIG bits in an NSEC RR.\n"
- title: 5.5.  Resolver Behavior When Signatures Do Not Validate
  contents:
  - "5.5.  Resolver Behavior When Signatures Do Not Validate\n   If for whatever reason\
    \ none of the RRSIGs can be validated, the\n   response SHOULD be considered BAD.\
    \  If the validation was being done\n   to service a recursive query, the name\
    \ server MUST return RCODE 2 to\n   the originating client.  However, it MUST\
    \ return the full response if\n   and only if the original query had the CD bit\
    \ set.  Also see Section\n   4.7 on caching responses that do not validate.\n"
- title: 5.6.  Authentication Example
  contents:
  - "5.6.  Authentication Example\n   Appendix C shows an example of the authentication\
    \ process.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   [RFC4034] contains a review of the IANA considerations\
    \ introduced by\n   DNSSEC.  The following are additional IANA considerations\
    \ discussed\n   in this document:\n   [RFC2535] reserved the CD and AD bits in\
    \ the message header.  The\n   meaning of the AD bit was redefined in [RFC3655],\
    \ and the meaning of\n   both the CD and AD bit are restated in this document.\
    \  No new bits in\n   the DNS message header are defined in this document.\n \
    \  [RFC2671] introduced EDNS, and [RFC3225] reserved the DNSSEC OK bit\n   and\
    \ defined its use.  The use is restated but not altered in this\n   document.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document describes how the DNS security\
    \ extensions use public\n   key cryptography to sign and authenticate DNS resource\
    \ record sets.\n   Please see [RFC4033] for terminology and general security\n\
    \   considerations related to DNSSEC; see [RFC4034] for considerations\n   specific\
    \ to the DNSSEC resource record types.\n   An active attacker who can set the\
    \ CD bit in a DNS query message or\n   the AD bit in a DNS response message can\
    \ use these bits to defeat the\n   protection that DNSSEC attempts to provide\
    \ to security-oblivious\n   recursive-mode resolvers.  For this reason, use of\
    \ these control bits\n   by a security-aware recursive-mode resolver requires\
    \ a secure\n   channel.  See Sections 3.2.2 and 4.9 for further discussion.\n\
    \   The protocol described in this document attempts to extend the\n   benefits\
    \ of DNSSEC to security-oblivious stub resolvers.  However, as\n   recovery from\
    \ validation failures is likely to be specific to\n   particular applications,\
    \ the facilities that DNSSEC provides for stub\n   resolvers may prove inadequate.\
    \  Operators of security-aware\n   recursive name servers will have to pay close\
    \ attention to the\n   behavior of the applications that use their services when\
    \ choosing a\n   local validation policy; failure to do so could easily result\
    \ in the\n   recursive name server accidentally denying service to the clients\
    \ it\n   is intended to support.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document was created from the input and ideas of\
    \ the members of\n   the DNS Extensions Working Group and working group mailing\
    \ list.  The\n   editors would like to express their thanks for the comments and\n\
    \   suggestions received during the revision of these security extension\n   specifications.\
    \  Although explicitly listing everyone who has\n   contributed during the decade\
    \ in which DNSSEC has been under\n   development would be impossible, [RFC4033]\
    \ includes a list of some of\n   the participants who were kind enough to comment\
    \ on these documents.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, November 1987.\n   [RFC1035]\
    \  Mockapetris, P., \"Domain names - implementation and\n              specification\"\
    , STD 13, RFC 1035, November 1987.\n   [RFC1122]  Braden, R., \"Requirements for\
    \ Internet Hosts -\n              Communication Layers\", STD 3, RFC 1122, October\
    \ 1989.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2181]\
    \  Elz, R. and R. Bush, \"Clarifications to the DNS\n              Specification\"\
    , RFC 2181, July 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [RFC2671]  Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\", RFC\n    \
    \          2671, August 1999.\n   [RFC2672]  Crawford, M., \"Non-Terminal DNS\
    \ Name Redirection\", RFC\n              2672, August 1999.\n   [RFC3225]  Conrad,\
    \ D., \"Indicating Resolver Support of DNSSEC\", RFC\n              3225, December\
    \ 2001.\n   [RFC3226]  Gudmundsson, O., \"DNSSEC and IPv6 A6 aware server/resolver\n\
    \              message size requirements\", RFC 3226, December 2001.\n   [RFC4033]\
    \  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"DNS Security Introduction and Requirements\", RFC\n              4033, March\
    \ 2005.\n   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n\
    \              Rose, \"Resource Records for DNS Security Extensions\", RFC\n \
    \             4034, March 2005.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC2308]  Andrews, M., \"Negative Caching of\
    \ DNS Queries (DNS\n              NCACHE)\", RFC 2308, March 1998.\n   [RFC2535]\
    \  Eastlake 3rd, D., \"Domain Name System Security\n              Extensions\"\
    , RFC 2535, March 1999.\n   [RFC3007]  Wellington, B., \"Secure Domain Name System\
    \ (DNS) Dynamic\n              Update\", RFC 3007, November 2000.\n   [RFC3655]\
    \  Wellington, B. and O. Gudmundsson, \"Redefinition of DNS\n              Authenticated\
    \ Data (AD) bit\", RFC 3655, November 2003.\n"
- title: Appendix A.  Signed Zone Example
  contents:
  - "Appendix A.  Signed Zone Example\n   The following example shows a (small) complete\
    \ signed zone.\n   example.       3600 IN SOA ns1.example. bugs.x.w.example. (\n\
    \                              1081539377\n                              3600\n\
    \                              300\n                              3600000\n  \
    \                            3600\n                              )\n         \
    \         3600 RRSIG  SOA 5 1 3600 20040509183619 (\n                        \
    \      20040409183619 38519 example.\n                              ONx0k36rcjaxYtcNgq6iQnpNV5+drqYAsC9h\n\
    \                              7TSJaHCqbhE67Sr6aH2xDUGcqQWu/n0UVzrF\n        \
    \                      vkgO9ebarZ0GWDKcuwlM6eNB5SiX2K74l5LW\n                \
    \              DA7S/Un/IbtDq4Ay8NMNLQI7Dw7n4p8/rjkB\n                        \
    \      jV7j86HyQgM5e7+miRAz8V01b0I= )\n                  3600 NS     ns1.example.\n\
    \                  3600 NS     ns2.example.\n                  3600 RRSIG  NS\
    \ 5 1 3600 20040509183619 (\n                              20040409183619 38519\
    \ example.\n                              gl13F00f2U0R+SWiXXLHwsMY+qStYy5k6zfd\n\
    \                              EuivWc+wd1fmbNCyql0Tk7lHTX6UOxc8AgNf\n        \
    \                      4ISFve8XqF4q+o9qlnqIzmppU3LiNeKT4FZ8\n                \
    \              RO5urFOvoMRTbQxW3U0hXWuggE4g3ZpsHv48\n                        \
    \      0HjMeRaZB/FRPGfJPajngcq6Kwg= )\n                  3600 MX     1 xx.example.\n\
    \                  3600 RRSIG  MX 5 1 3600 20040509183619 (\n                \
    \              20040409183619 38519 example.\n                              HyDHYVT5KHSZ7HtO/vypumPmSZQrcOP3tzWB\n\
    \                              2qaKkHVPfau/DgLgS/IKENkYOGL95G4N+NzE\n        \
    \                      VyNU8dcTOckT+ChPcGeVjguQ7a3Ao9Z/ZkUO\n                \
    \              6gmmUW4b89rz1PUxW4jzUxj66PTwoVtUU/iM\n                        \
    \      W6OISukd1EQt7a0kygkg+PEDxdI= )\n                  3600 NSEC   a.example.\
    \ NS SOA MX RRSIG NSEC DNSKEY\n                  3600 RRSIG  NSEC 5 1 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   O0k558jHhyrC97ISHnislm4kLMW48C7U7cBm\n                   \
    \           FTfhke5iVqNRVTB1STLMpgpbDIC9hcryoO0V\n                           \
    \   Z9ME5xPzUEhbvGnHd5sfzgFVeGxr5Nyyq4tW\n                              SDBgIBiLQUv1ivy29vhXy7WgR62dPrZ0PWvm\n\
    \                              jfFJ5arXf4nPxp/kEowGgBRzY/U= )\n              \
    \    3600 DNSKEY 256 3 5 (\n                              AQOy1bZVvpPqhg4j7EJoM9rI3ZmyEx2OzDBV\n\
    \                              rZy/lvI5CQePxXHZS4i8dANH4DX3tbHol61e\n        \
    \                      k8EFMcsGXxKciJFHyhl94C+NwILQdzsUlSFo\n                \
    \              vBZsyl/NX6yEbtw/xN9ZNcrbYvgjjZ/UVPZI\n                        \
    \      ySFNsgEYvh0z2542lzMKR4Dh8uZffQ==\n                              )\n   \
    \               3600 DNSKEY 257 3 5 (\n                              AQOeX7+baTmvpVHb2CcLnL1dMRWbuscRvHXl\n\
    \                              LnXwDzvqp4tZVKp1sZMepFb8MvxhhW3y/0QZ\n        \
    \                      syCjczGJ1qk8vJe52iOhInKROVLRwxGpMfzP\n                \
    \              RLMlGybr51bOV/1se0ODacj3DomyB4QB5gKT\n                        \
    \      Yot/K9alk5/j8vfd4jWCWD+E1Sze0Q==\n                              )\n   \
    \               3600 RRSIG  DNSKEY 5 1 3600 20040509183619 (\n               \
    \               20040409183619 9465 example.\n                              ZxgauAuIj+k1YoVEOSlZfx41fcmKzTFHoweZ\n\
    \                              xYnz99JVQZJ33wFS0Q0jcP7VXKkaElXk9nYJ\n        \
    \                      XevO/7nAbo88iWsMkSpSR6jWzYYKwfrBI/L9\n                \
    \              hjYmyVO9m6FjQ7uwM4dCP/bIuV/DKqOAK9NY\n                        \
    \      NC3AHfvCV1Tp4VKDqxqG7R5tTVM= )\n                  3600 RRSIG  DNSKEY 5\
    \ 1 3600 20040509183619 (\n                              20040409183619 38519\
    \ example.\n                              eGL0s90glUqcOmloo/2y+bSzyEfKVOQViD9Z\n\
    \                              DNhLz/Yn9CQZlDVRJffACQDAUhXpU/oP34ri\n        \
    \                      bKBpysRXosczFrKqS5Oa0bzMOfXCXup9qHAp\n                \
    \              eFIku28Vqfr8Nt7cigZLxjK+u0Ws/4lIRjKk\n                        \
    \      7z5OXogYVaFzHKillDt3HRxHIZM= )\n   a.example.     3600 IN NS  ns1.a.example.\n\
    \                  3600 IN NS  ns2.a.example.\n                  3600 DS     57855\
    \ 5 1 (\n                              B6DCD485719ADCA18E5F3D48A2331627FDD3\n\
    \                              636B )\n                  3600 RRSIG  DS 5 2 3600\
    \ 20040509183619 (\n                              20040409183619 38519 example.\n\
    \                              oXIKit/QtdG64J/CB+Gi8dOvnwRvqrto1AdQ\n        \
    \                      oRkAN15FP3iZ7suB7gvTBmXzCjL7XUgQVcoH\n                \
    \              kdhyCuzp8W9qJHgRUSwKKkczSyuL64nhgjuD\n                        \
    \      EML8l9wlWVsl7PR2VnZduM9bLyBhaaPmRKX/\n                              Fm+v6ccF2EGNLRiY08kdkz+XHHo=\
    \ )\n                  3600 NSEC   ai.example. NS DS RRSIG NSEC\n            \
    \      3600 RRSIG  NSEC 5 2 3600 20040509183619 (\n                          \
    \    20040409183619 38519 example.\n                              cOlYgqJLqlRqmBQ3iap2SyIsK4O5aqpKSoba\n\
    \                              U9fQ5SMApZmHfq3AgLflkrkXRXvgxTQSKkG2\n        \
    \                      039/cRUs6Jk/25+fi7Xr5nOVJsb0lq4zsB3I\n                \
    \              BBdjyGDAHE0F5ROJj87996vJupdm1fbH481g\n                        \
    \      sdkOW6Zyqtz3Zos8N0BBkEx+2G4= )\n   ns1.a.example. 3600 IN A   192.0.2.5\n\
    \   ns2.a.example. 3600 IN A   192.0.2.6\n   ai.example.    3600 IN A   192.0.2.9\n\
    \                  3600 RRSIG  A 5 2 3600 20040509183619 (\n                 \
    \             20040409183619 38519 example.\n                              pAOtzLP2MU0tDJUwHOKE5FPIIHmdYsCgTb5B\n\
    \                              ERGgpnJluA9ixOyf6xxVCgrEJW0WNZSsJicd\n        \
    \                      hBHXfDmAGKUajUUlYSAH8tS4ZnrhyymIvk3u\n                \
    \              ArDu2wfT130e9UHnumaHHMpUTosKe22PblOy\n                        \
    \      6zrTpg9FkS0XGVmYRvOTNYx2HvQ= )\n                  3600 HINFO  \"KLH-10\"\
    \ \"ITS\"\n                  3600 RRSIG  HINFO 5 2 3600 20040509183619 (\n   \
    \                           20040409183619 38519 example.\n                  \
    \            Iq/RGCbBdKzcYzlGE4ovbr5YcB+ezxbZ9W0l\n                          \
    \    e/7WqyvhOO9J16HxhhL7VY/IKmTUY0GGdcfh\n                              ZEOCkf4lEykZF9NPok1/R/fWrtzNp8jobuY7\n\
    \                              AZEcZadp1WdDF3jc2/ndCa5XZhLKD3JzOsBw\n        \
    \                      FvL8sqlS5QS6FY/ijFEDnI4RkZA= )\n                  3600\
    \ AAAA   2001:db8::f00:baa9\n                  3600 RRSIG  AAAA 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   nLcpFuXdT35AcE+EoafOUkl69KB+/e56XmFK\n                   \
    \           kewXG2IadYLKAOBIoR5+VoQV3XgTcofTJNsh\n                           \
    \   1rnF6Eav2zpZB3byI6yo2bwY8MNkr4A7cL9T\n                              cMmDwV/hWFKsbGBsj8xSCN/caEL2CWY/5XP2\n\
    \                              sZM6QjBBLmukH30+w1z3h8PUP2o= )\n              \
    \    3600 NSEC   b.example. A HINFO AAAA RRSIG NSEC\n                  3600 RRSIG\
    \  NSEC 5 2 3600 20040509183619 (\n                              20040409183619\
    \ 38519 example.\n                              QoshyPevLcJ/xcRpEtMft1uoIrcrieVcc9pG\n\
    \                              CScIn5Glnib40T6ayVOimXwdSTZ/8ISXGj4p\n        \
    \                      P8Sh0PlA6olZQ84L453/BUqB8BpdOGky4hsN\n                \
    \              3AGcLEv1Gr0QMvirQaFcjzOECfnGyBm+wpFL\n                        \
    \      AhS+JOVfDI/79QtyTI0SaDWcg8U= )\n   b.example.     3600 IN NS  ns1.b.example.\n\
    \                  3600 IN NS  ns2.b.example.\n                  3600 NSEC   ns1.example.\
    \ NS RRSIG NSEC\n                  3600 RRSIG  NSEC 5 2 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               GNuxHn844wfmUhPzGWKJCPY5ttEX/RfjDoOx\n                       \
    \       9ueK1PtYkOWKOOdiJ/PJKCYB3hYX+858dDWS\n                              xb2qnV/LSTCNVBnkm6owOpysY97MVj5VQEWs\n\
    \                              0lm9tFoqjcptQkmQKYPrwUnCSNwvvclSF1xZ\n        \
    \                      vhRXgWT7OuFXldoCG6TfVFMs9xE= )\n   ns1.b.example. 3600\
    \ IN A   192.0.2.7\n   ns2.b.example. 3600 IN A   192.0.2.8\n   ns1.example. \
    \  3600 IN A   192.0.2.1\n                  3600 RRSIG  A 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   F1C9HVhIcs10cZU09G5yIVfKJy5yRQQ3qVet\n                   \
    \           5pGhp82pzhAOMZ3K22JnmK4c+IjUeFp/to06\n                           \
    \   im5FVpHtbFisdjyPq84bhTv8vrXt5AB1wNB+\n                              +iAqvIfdgW4sFNC6oADb1hK8QNauw9VePJhK\n\
    \                              v/iVXSYC0b7mPSU+EOlknFpVECs= )\n              \
    \    3600 NSEC   ns2.example. A RRSIG NSEC\n                  3600 RRSIG  NSEC\
    \ 5 2 3600 20040509183619 (\n                              20040409183619 38519\
    \ example.\n                              I4hj+Kt6+8rCcHcUdolks2S+Wzri9h3fHas8\n\
    \                              1rGN/eILdJHN7JpV6lLGPIh/8fIBkfvdyWnB\n        \
    \                      jjf1q3O7JgYO1UdI7FvBNWqaaEPJK3UkddBq\n                \
    \              ZIaLi8Qr2XHkjq38BeQsbp8X0+6h4ETWSGT8\n                        \
    \      IZaIGBLryQWGLw6Y6X8dqhlnxJM= )\n   ns2.example.   3600 IN A   192.0.2.2\n\
    \                  3600 RRSIG  A 5 2 3600 20040509183619 (\n                 \
    \             20040409183619 38519 example.\n                              V7cQRw1TR+knlaL1z/psxlS1PcD37JJDaCMq\n\
    \                              Qo6/u1qFQu6x+wuDHRH22Ap9ulJPQjFwMKOu\n        \
    \                      yfPGQPC8KzGdE3vt5snFEAoE1Vn3mQqtu7SO\n                \
    \              6amIjk13Kj/jyJ4nGmdRIc/3cM3ipXFhNTKq\n                        \
    \      rdhx8SZ0yy4ObIRzIzvBFLiSS8o= )\n                  3600 NSEC   *.w.example.\
    \ A RRSIG NSEC\n                  3600 RRSIG  NSEC 5 2 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               N0QzHvaJf5NRw1rE9uxS1Ltb2LZ73Qb9bKGE\n                       \
    \       VyaISkqzGpP3jYJXZJPVTq4UVEsgT3CgeHvb\n                              3QbeJ5Dfb2V9NGCHj/OvF/LBxFFWwhLwzngH\n\
    \                              l+bQAgAcMsLu/nL3nDi1y/JSQjAcdZNDl4bw\n        \
    \                      Ymx28EtgIpo9A0qmP08rMBqs1Jw= )\n   *.w.example.   3600\
    \ IN MX  1 ai.example.\n                  3600 RRSIG  MX 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   OMK8rAZlepfzLWW75Dxd63jy2wswESzxDKG2\n                   \
    \           f9AMN1CytCd10cYISAxfAdvXSZ7xujKAtPbc\n                           \
    \   tvOQ2ofO7AZJ+d01EeeQTVBPq4/6KCWhqe2X\n                              TjnkVLNvvhnc0u28aoSsG0+4InvkkOHknKxw\n\
    \                              4kX18MMR34i8lC36SR5xBni8vHI= )\n              \
    \    3600 NSEC   x.w.example. MX RRSIG NSEC\n                  3600 RRSIG  NSEC\
    \ 5 2 3600 20040509183619 (\n                              20040409183619 38519\
    \ example.\n                              r/mZnRC3I/VIcrelgIcteSxDhtsdlTDt8ng9\n\
    \                              HSBlABOlzLxQtfgTnn8f+aOwJIAFe1Ee5RvU\n        \
    \                      5cVhQJNP5XpXMJHfyps8tVvfxSAXfahpYqtx\n                \
    \              91gsmcV/1V9/bZAG55CefP9cM4Z9Y9NT9XQ8\n                        \
    \      s1InQ2UoIv6tJEaaKkP701j8OLA= )\n   x.w.example.   3600 IN MX  1 xx.example.\n\
    \                  3600 RRSIG  MX 5 3 3600 20040509183619 (\n                \
    \              20040409183619 38519 example.\n                              Il2WTZ+Bkv+OytBx4LItNW5mjB4RCwhOO8y1\n\
    \                              XzPHZmZUTVYL7LaA63f6T9ysVBzJRI3KRjAP\n        \
    \                      H3U1qaYnDoN1DrWqmi9RJe4FoObkbcdm7P3I\n                \
    \              kx70ePCoFgRz1Yq+bVVXCvGuAU4xALv3W/Y1\n                        \
    \      jNSlwZ2mSWKHfxFQxPtLj8s32+k= )\n                  3600 NSEC   x.y.w.example.\
    \ MX RRSIG NSEC\n                  3600 RRSIG  NSEC 5 3 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               aRbpHftxggzgMXdDlym9SsADqMZovZZl2QWK\n                       \
    \       vw8J0tZEUNQByH5Qfnf5N1FqH/pS46UA7A4E\n                              mcWBN9PUA1pdPY6RVeaRlZlCr1IkVctvbtaI\n\
    \                              NJuBba/VHm+pebTbKcAPIvL9tBOoh+to1h6e\n        \
    \                      IjgiM8PXkBQtxPq37wDKALkyn7Q= )\n   x.y.w.example. 3600\
    \ IN MX  1 xx.example.\n                  3600 RRSIG  MX 5 4 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   k2bJHbwP5LH5qN4is39UiPzjAWYmJA38Hhia\n                   \
    \           t7i9t7nbX/e0FPnvDSQXzcK7UL+zrVA+3MDj\n                           \
    \   q1ub4q3SZgcbLMgexxIW3Va//LVrxkP6Xupq\n                              GtOB9prkK54QTl/qZTXfMQpW480YOvVknhvb\n\
    \                              +gLcMZBnHJ326nb/TOOmrqNmQQE= )\n              \
    \    3600 NSEC   xx.example. MX RRSIG NSEC\n                  3600 RRSIG  NSEC\
    \ 5 4 3600 20040509183619 (\n                              20040409183619 38519\
    \ example.\n                              OvE6WUzN2ziieJcvKPWbCAyXyP6ef8cr6Csp\n\
    \                              ArVSTzKSquNwbezZmkU7E34o5lmb6CWSSSpg\n        \
    \                      xw098kNUFnHcQf/LzY2zqRomubrNQhJTiDTX\n                \
    \              a0ArunJQCzPjOYq5t0SLjm6qp6McJI1AP5Vr\n                        \
    \      QoKqJDCLnoAlcPOPKAm/jJkn3jk= )\n   xx.example.    3600 IN A   192.0.2.10\n\
    \                  3600 RRSIG  A 5 2 3600 20040509183619 (\n                 \
    \             20040409183619 38519 example.\n                              kBF4YxMGWF0D8r0cztL+2fWWOvN1U/GYSpYP\n\
    \                              7SoKoNQ4fZKyk+weWGlKLIUM+uE1zjVTPXoa\n        \
    \                      0Z6WG0oZp46rkl1EzMcdMgoaeUzzAJ2BMq+Y\n                \
    \              VdxG9IK1yZkYGY9AgbTOGPoAgbJyO9EPULsx\n                        \
    \      kbIDV6GPPSZVusnZU6OMgdgzHV4= )\n                  3600 HINFO  \"KLH-10\"\
    \ \"TOPS-20\"\n                  3600 RRSIG  HINFO 5 2 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               GY2PLSXmMHkWHfLdggiox8+chWpeMNJLkML0\n                       \
    \       t+U/SXSUsoUdR91KNdNUkTDWamwcF8oFRjhq\n                              BcPZ6EqrF+vl5v5oGuvSF7U52epfVTC+wWF8\n\
    \                              3yCUeUw8YklhLWlvk8gQ15YKth0ITQy8/wI+\n        \
    \                      RgNvuwbioFSEuv2pNlkq0goYxNY= )\n                  3600\
    \ AAAA   2001:db8::f00:baaa\n                  3600 RRSIG  AAAA 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   Zzj0yodDxcBLnnOIwDsuKo5WqiaK24DlKg9C\n                   \
    \           aGaxDFiKgKobUj2jilYQHpGFn2poFRetZd4z\n                           \
    \   ulyQkssz2QHrVrPuTMS22knudCiwP4LWpVTr\n                              U4zfeA+rDz9stmSBP/4PekH/x2IoAYnwctd/\n\
    \                              xS9cL2QgW7FChw16mzlkH6/vsfs= )\n              \
    \    3600 NSEC   example. A HINFO AAAA RRSIG NSEC\n                  3600 RRSIG\
    \  NSEC 5 2 3600 20040509183619 (\n                              20040409183619\
    \ 38519 example.\n                              ZFWUln6Avc8bmGl5GFjD3BwT530DUZKHNuoY\n\
    \                              9A8lgXYyrxu+pqgFiRVbyZRQvVB5pccEOT3k\n        \
    \                      mvHgEa/HzbDB4PIYY79W+VHrgOxzdQGGCZzi\n                \
    \              asXrpSGOWwSOElghPnMIi8xdF7qtCntr382W\n                        \
    \      GghLahumFIpg4MO3LS/prgzVVWo= )\n   The apex DNSKEY set includes two DNSKEY\
    \ RRs, and the DNSKEY RDATA\n   Flags indicate that each of these DNSKEY RRs is\
    \ a zone key.  One of\n   these DNSKEY RRs also has the SEP flag set and has been\
    \ used to sign\n   the apex DNSKEY RRset; this is the key that should be hashed\
    \ to\n   generate a DS record to be inserted into the parent zone.  The other\n\
    \   DNSKEY is used to sign all the other RRsets in the zone.\n   The zone includes\
    \ a wildcard entry, \"*.w.example\".  Note that the\n   name \"*.w.example\" is\
    \ used in constructing NSEC chains, and that the\n   RRSIG covering the \"*.w.example\"\
    \ MX RRset has a label count of 2.\n   The zone also includes two delegations.\
    \  The delegation to\n   \"b.example\" includes an NS RRset, glue address records,\
    \ and an NSEC\n   RR; note that only the NSEC RRset is signed.  The delegation\
    \ to\n   \"a.example\" provides a DS RR; note that only the NSEC and DS RRsets\n\
    \   are signed.\n"
- title: Appendix B.  Example Responses
  contents:
  - "Appendix B.  Example Responses\n   The examples in this section show response\
    \ messages using the signed\n   zone example in Appendix A.\n"
- title: B.1.  Answer
  contents:
  - "B.1.  Answer\n   A successful query to an authoritative server.\n   ;; Header:\
    \ QR AA DO RCODE=0\n   ;;\n   ;; Question\n   x.w.example.        IN MX\n   ;;\
    \ Answer\n   x.w.example.   3600 IN MX  1 xx.example.\n   x.w.example.   3600\
    \ RRSIG  MX 5 3 3600 20040509183619 (\n                              20040409183619\
    \ 38519 example.\n                              Il2WTZ+Bkv+OytBx4LItNW5mjB4RCwhOO8y1\n\
    \                              XzPHZmZUTVYL7LaA63f6T9ysVBzJRI3KRjAP\n        \
    \                      H3U1qaYnDoN1DrWqmi9RJe4FoObkbcdm7P3I\n                \
    \              kx70ePCoFgRz1Yq+bVVXCvGuAU4xALv3W/Y1\n                        \
    \      jNSlwZ2mSWKHfxFQxPtLj8s32+k= )\n   ;; Authority\n   example.       3600\
    \ NS     ns1.example.\n   example.       3600 NS     ns2.example.\n   example.\
    \       3600 RRSIG  NS 5 1 3600 20040509183619 (\n                           \
    \   20040409183619 38519 example.\n                              gl13F00f2U0R+SWiXXLHwsMY+qStYy5k6zfd\n\
    \                              EuivWc+wd1fmbNCyql0Tk7lHTX6UOxc8AgNf\n        \
    \                      4ISFve8XqF4q+o9qlnqIzmppU3LiNeKT4FZ8\n                \
    \              RO5urFOvoMRTbQxW3U0hXWuggE4g3ZpsHv48\n                        \
    \      0HjMeRaZB/FRPGfJPajngcq6Kwg= )\n   ;; Additional\n   xx.example.    3600\
    \ IN A   192.0.2.10\n   xx.example.    3600 RRSIG  A 5 2 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               kBF4YxMGWF0D8r0cztL+2fWWOvN1U/GYSpYP\n                       \
    \       7SoKoNQ4fZKyk+weWGlKLIUM+uE1zjVTPXoa\n                              0Z6WG0oZp46rkl1EzMcdMgoaeUzzAJ2BMq+Y\n\
    \                              VdxG9IK1yZkYGY9AgbTOGPoAgbJyO9EPULsx\n        \
    \                      kbIDV6GPPSZVusnZU6OMgdgzHV4= )\n   xx.example.    3600\
    \ AAAA   2001:db8::f00:baaa\n   xx.example.    3600 RRSIG  AAAA 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   Zzj0yodDxcBLnnOIwDsuKo5WqiaK24DlKg9C\n                   \
    \           aGaxDFiKgKobUj2jilYQHpGFn2poFRetZd4z\n                           \
    \   ulyQkssz2QHrVrPuTMS22knudCiwP4LWpVTr\n                              U4zfeA+rDz9stmSBP/4PekH/x2IoAYnwctd/\n\
    \                              xS9cL2QgW7FChw16mzlkH6/vsfs= )\n   ns1.example.\
    \   3600 IN A   192.0.2.1\n   ns1.example.   3600 RRSIG  A 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   F1C9HVhIcs10cZU09G5yIVfKJy5yRQQ3qVet\n                   \
    \           5pGhp82pzhAOMZ3K22JnmK4c+IjUeFp/to06\n                           \
    \   im5FVpHtbFisdjyPq84bhTv8vrXt5AB1wNB+\n                              +iAqvIfdgW4sFNC6oADb1hK8QNauw9VePJhK\n\
    \                              v/iVXSYC0b7mPSU+EOlknFpVECs= )\n   ns2.example.\
    \   3600 IN A   192.0.2.2\n   ns2.example.   3600 RRSIG  A 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   V7cQRw1TR+knlaL1z/psxlS1PcD37JJDaCMq\n                   \
    \           Qo6/u1qFQu6x+wuDHRH22Ap9ulJPQjFwMKOu\n                           \
    \   yfPGQPC8KzGdE3vt5snFEAoE1Vn3mQqtu7SO\n                              6amIjk13Kj/jyJ4nGmdRIc/3cM3ipXFhNTKq\n\
    \                              rdhx8SZ0yy4ObIRzIzvBFLiSS8o= )\n"
- title: B.2.  Name Error
  contents:
  - "B.2.  Name Error\n   An authoritative name error.  The NSEC RRs prove that the\
    \ name does\n   not exist and that no covering wildcard exists.\n   ;; Header:\
    \ QR AA DO RCODE=3\n   ;;\n   ;; Question\n   ml.example.         IN A\n   ;;\
    \ Answer\n   ;; (empty)\n   ;; Authority\n   example.       3600 IN SOA ns1.example.\
    \ bugs.x.w.example. (\n                              1081539377\n            \
    \                  3600\n                              300\n                 \
    \             3600000\n                              3600\n                  \
    \            )\n   example.       3600 RRSIG  SOA 5 1 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               ONx0k36rcjaxYtcNgq6iQnpNV5+drqYAsC9h\n                       \
    \       7TSJaHCqbhE67Sr6aH2xDUGcqQWu/n0UVzrF\n                              vkgO9ebarZ0GWDKcuwlM6eNB5SiX2K74l5LW\n\
    \                              DA7S/Un/IbtDq4Ay8NMNLQI7Dw7n4p8/rjkB\n        \
    \                      jV7j86HyQgM5e7+miRAz8V01b0I= )\n   b.example.     3600\
    \ NSEC   ns1.example. NS RRSIG NSEC\n   b.example.     3600 RRSIG  NSEC 5 2 3600\
    \ 20040509183619 (\n                              20040409183619 38519 example.\n\
    \                              GNuxHn844wfmUhPzGWKJCPY5ttEX/RfjDoOx\n        \
    \                      9ueK1PtYkOWKOOdiJ/PJKCYB3hYX+858dDWS\n                \
    \              xb2qnV/LSTCNVBnkm6owOpysY97MVj5VQEWs\n                        \
    \      0lm9tFoqjcptQkmQKYPrwUnCSNwvvclSF1xZ\n                              vhRXgWT7OuFXldoCG6TfVFMs9xE=\
    \ )\n   example.       3600 NSEC   a.example. NS SOA MX RRSIG NSEC DNSKEY\n  \
    \ example.       3600 RRSIG  NSEC 5 1 3600 20040509183619 (\n                \
    \              20040409183619 38519 example.\n                              O0k558jHhyrC97ISHnislm4kLMW48C7U7cBm\n\
    \                              FTfhke5iVqNRVTB1STLMpgpbDIC9hcryoO0V\n        \
    \                      Z9ME5xPzUEhbvGnHd5sfzgFVeGxr5Nyyq4tW\n                \
    \              SDBgIBiLQUv1ivy29vhXy7WgR62dPrZ0PWvm\n                        \
    \      jfFJ5arXf4nPxp/kEowGgBRzY/U= )\n   ;; Additional\n   ;; (empty)\n"
- title: B.3.  No Data Error
  contents:
  - "B.3.  No Data Error\n   A \"no data\" response.  The NSEC RR proves that the\
    \ name exists and\n   that the requested RR type does not.\n   ;; Header: QR AA\
    \ DO RCODE=0\n   ;;\n   ;; Question\n   ns1.example.        IN MX\n   ;; Answer\n\
    \   ;; (empty)\n   ;; Authority\n   example.       3600 IN SOA ns1.example. bugs.x.w.example.\
    \ (\n                              1081539377\n                              3600\n\
    \                              300\n                              3600000\n  \
    \                            3600\n                              )\n   example.\
    \       3600 RRSIG  SOA 5 1 3600 20040509183619 (\n                          \
    \    20040409183619 38519 example.\n                              ONx0k36rcjaxYtcNgq6iQnpNV5+drqYAsC9h\n\
    \                              7TSJaHCqbhE67Sr6aH2xDUGcqQWu/n0UVzrF\n        \
    \                      vkgO9ebarZ0GWDKcuwlM6eNB5SiX2K74l5LW\n                \
    \              DA7S/Un/IbtDq4Ay8NMNLQI7Dw7n4p8/rjkB\n                        \
    \      jV7j86HyQgM5e7+miRAz8V01b0I= )\n   ns1.example.   3600 NSEC   ns2.example.\
    \ A RRSIG NSEC\n   ns1.example.   3600 RRSIG  NSEC 5 2 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               I4hj+Kt6+8rCcHcUdolks2S+Wzri9h3fHas8\n                       \
    \       1rGN/eILdJHN7JpV6lLGPIh/8fIBkfvdyWnB\n                              jjf1q3O7JgYO1UdI7FvBNWqaaEPJK3UkddBq\n\
    \                              ZIaLi8Qr2XHkjq38BeQsbp8X0+6h4ETWSGT8\n        \
    \                      IZaIGBLryQWGLw6Y6X8dqhlnxJM= )\n   ;; Additional\n   ;;\
    \ (empty)\n"
- title: B.4.  Referral to Signed Zone
  contents:
  - "B.4.  Referral to Signed Zone\n   Referral to a signed zone.  The DS RR contains\
    \ the data which the\n   resolver will need to validate the corresponding DNSKEY\
    \ RR in the\n   child zone's apex.\n   ;; Header: QR DO RCODE=0\n   ;;\n   ;;\
    \ Question\n   mc.a.example.       IN MX\n   ;; Answer\n   ;; (empty)\n   ;; Authority\n\
    \   a.example.     3600 IN NS  ns1.a.example.\n   a.example.     3600 IN NS  ns2.a.example.\n\
    \   a.example.     3600 DS     57855 5 1 (\n                              B6DCD485719ADCA18E5F3D48A2331627FDD3\n\
    \                              636B )\n   a.example.     3600 RRSIG  DS 5 2 3600\
    \ 20040509183619 (\n                              20040409183619 38519 example.\n\
    \                              oXIKit/QtdG64J/CB+Gi8dOvnwRvqrto1AdQ\n        \
    \                      oRkAN15FP3iZ7suB7gvTBmXzCjL7XUgQVcoH\n                \
    \              kdhyCuzp8W9qJHgRUSwKKkczSyuL64nhgjuD\n                        \
    \      EML8l9wlWVsl7PR2VnZduM9bLyBhaaPmRKX/\n                              Fm+v6ccF2EGNLRiY08kdkz+XHHo=\
    \ )\n   ;; Additional\n   ns1.a.example. 3600 IN A   192.0.2.5\n   ns2.a.example.\
    \ 3600 IN A   192.0.2.6\n"
- title: B.5.  Referral to Unsigned Zone
  contents:
  - "B.5.  Referral to Unsigned Zone\n   Referral to an unsigned zone.  The NSEC RR\
    \ proves that no DS RR for\n   this delegation exists in the parent zone.\n  \
    \ ;; Header: QR DO RCODE=0\n   ;;\n   ;; Question\n   mc.b.example.       IN MX\n\
    \   ;; Answer\n   ;; (empty)\n   ;; Authority\n   b.example.     3600 IN NS  ns1.b.example.\n\
    \   b.example.     3600 IN NS  ns2.b.example.\n   b.example.     3600 NSEC   ns1.example.\
    \ NS RRSIG NSEC\n   b.example.     3600 RRSIG  NSEC 5 2 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               GNuxHn844wfmUhPzGWKJCPY5ttEX/RfjDoOx\n                       \
    \       9ueK1PtYkOWKOOdiJ/PJKCYB3hYX+858dDWS\n                              xb2qnV/LSTCNVBnkm6owOpysY97MVj5VQEWs\n\
    \                              0lm9tFoqjcptQkmQKYPrwUnCSNwvvclSF1xZ\n        \
    \                      vhRXgWT7OuFXldoCG6TfVFMs9xE= )\n   ;; Additional\n   ns1.b.example.\
    \ 3600 IN A   192.0.2.7\n   ns2.b.example. 3600 IN A   192.0.2.8\n"
- title: B.6.  Wildcard Expansion
  contents:
  - "B.6.  Wildcard Expansion\n   A successful query that was answered via wildcard\
    \ expansion.  The\n   label count in the answer's RRSIG RR indicates that a wildcard\
    \ RRset\n   was expanded to produce this response, and the NSEC RR proves that\
    \ no\n   closer match exists in the zone.\n   ;; Header: QR AA DO RCODE=0\n  \
    \ ;;\n   ;; Question\n   a.z.w.example.      IN MX\n   ;; Answer\n   a.z.w.example.\
    \ 3600 IN MX  1 ai.example.\n   a.z.w.example. 3600 RRSIG  MX 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   OMK8rAZlepfzLWW75Dxd63jy2wswESzxDKG2\n                   \
    \           f9AMN1CytCd10cYISAxfAdvXSZ7xujKAtPbc\n                           \
    \   tvOQ2ofO7AZJ+d01EeeQTVBPq4/6KCWhqe2X\n                              TjnkVLNvvhnc0u28aoSsG0+4InvkkOHknKxw\n\
    \                              4kX18MMR34i8lC36SR5xBni8vHI= )\n   ;; Authority\n\
    \   example.       3600 NS     ns1.example.\n   example.       3600 NS     ns2.example.\n\
    \   example.       3600 RRSIG  NS 5 1 3600 20040509183619 (\n                \
    \              20040409183619 38519 example.\n                              gl13F00f2U0R+SWiXXLHwsMY+qStYy5k6zfd\n\
    \                              EuivWc+wd1fmbNCyql0Tk7lHTX6UOxc8AgNf\n        \
    \                      4ISFve8XqF4q+o9qlnqIzmppU3LiNeKT4FZ8\n                \
    \              RO5urFOvoMRTbQxW3U0hXWuggE4g3ZpsHv48\n                        \
    \      0HjMeRaZB/FRPGfJPajngcq6Kwg= )\n   x.y.w.example. 3600 NSEC   xx.example.\
    \ MX RRSIG NSEC\n   x.y.w.example. 3600 RRSIG  NSEC 5 4 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               OvE6WUzN2ziieJcvKPWbCAyXyP6ef8cr6Csp\n                       \
    \       ArVSTzKSquNwbezZmkU7E34o5lmb6CWSSSpg\n                              xw098kNUFnHcQf/LzY2zqRomubrNQhJTiDTX\n\
    \                              a0ArunJQCzPjOYq5t0SLjm6qp6McJI1AP5Vr\n        \
    \                      QoKqJDCLnoAlcPOPKAm/jJkn3jk= )\n   ;; Additional\n   ai.example.\
    \    3600 IN A   192.0.2.9\n   ai.example.    3600 RRSIG  A 5 2 3600 20040509183619\
    \ (\n                              20040409183619 38519 example.\n           \
    \                   pAOtzLP2MU0tDJUwHOKE5FPIIHmdYsCgTb5B\n                   \
    \           ERGgpnJluA9ixOyf6xxVCgrEJW0WNZSsJicd\n                           \
    \   hBHXfDmAGKUajUUlYSAH8tS4ZnrhyymIvk3u\n                              ArDu2wfT130e9UHnumaHHMpUTosKe22PblOy\n\
    \                              6zrTpg9FkS0XGVmYRvOTNYx2HvQ= )\n   ai.example.\
    \    3600 AAAA   2001:db8::f00:baa9\n   ai.example.    3600 RRSIG  AAAA 5 2 3600\
    \ 20040509183619 (\n                              20040409183619 38519 example.\n\
    \                              nLcpFuXdT35AcE+EoafOUkl69KB+/e56XmFK\n        \
    \                      kewXG2IadYLKAOBIoR5+VoQV3XgTcofTJNsh\n                \
    \              1rnF6Eav2zpZB3byI6yo2bwY8MNkr4A7cL9T\n                        \
    \      cMmDwV/hWFKsbGBsj8xSCN/caEL2CWY/5XP2\n                              sZM6QjBBLmukH30+w1z3h8PUP2o=\
    \ )\n"
- title: B.7.  Wildcard No Data Error
  contents:
  - "B.7.  Wildcard No Data Error\n   A \"no data\" response for a name covered by\
    \ a wildcard.  The NSEC RRs\n   prove that the matching wildcard name does not\
    \ have any RRs of the\n   requested type and that no closer match exists in the\
    \ zone.\n   ;; Header: QR AA DO RCODE=0\n   ;;\n   ;; Question\n   a.z.w.example.\
    \      IN AAAA\n   ;; Answer\n   ;; (empty)\n   ;; Authority\n   example.    \
    \   3600 IN SOA ns1.example. bugs.x.w.example. (\n                           \
    \   1081539377\n                              3600\n                         \
    \     300\n                              3600000\n                           \
    \   3600\n                              )\n   example.       3600 RRSIG  SOA 5\
    \ 1 3600 20040509183619 (\n                              20040409183619 38519\
    \ example.\n                              ONx0k36rcjaxYtcNgq6iQnpNV5+drqYAsC9h\n\
    \                              7TSJaHCqbhE67Sr6aH2xDUGcqQWu/n0UVzrF\n        \
    \                      vkgO9ebarZ0GWDKcuwlM6eNB5SiX2K74l5LW\n                \
    \              DA7S/Un/IbtDq4Ay8NMNLQI7Dw7n4p8/rjkB\n                        \
    \      jV7j86HyQgM5e7+miRAz8V01b0I= )\n   x.y.w.example. 3600 NSEC   xx.example.\
    \ MX RRSIG NSEC\n   x.y.w.example. 3600 RRSIG  NSEC 5 4 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               OvE6WUzN2ziieJcvKPWbCAyXyP6ef8cr6Csp\n                       \
    \       ArVSTzKSquNwbezZmkU7E34o5lmb6CWSSSpg\n                              xw098kNUFnHcQf/LzY2zqRomubrNQhJTiDTX\n\
    \                              a0ArunJQCzPjOYq5t0SLjm6qp6McJI1AP5Vr\n        \
    \                      QoKqJDCLnoAlcPOPKAm/jJkn3jk= )\n   *.w.example.   3600\
    \ NSEC   x.w.example. MX RRSIG NSEC\n   *.w.example.   3600 RRSIG  NSEC 5 2 3600\
    \ 20040509183619 (\n                              20040409183619 38519 example.\n\
    \                              r/mZnRC3I/VIcrelgIcteSxDhtsdlTDt8ng9\n        \
    \                      HSBlABOlzLxQtfgTnn8f+aOwJIAFe1Ee5RvU\n                \
    \              5cVhQJNP5XpXMJHfyps8tVvfxSAXfahpYqtx\n                        \
    \      91gsmcV/1V9/bZAG55CefP9cM4Z9Y9NT9XQ8\n                              s1InQ2UoIv6tJEaaKkP701j8OLA=\
    \ )\n   ;; Additional\n   ;; (empty)\n"
- title: B.8.  DS Child Zone No Data Error
  contents:
  - "B.8.  DS Child Zone No Data Error\n   A \"no data\" response for a QTYPE=DS query\
    \ that was mistakenly sent to\n   a name server for the child zone.\n   ;; Header:\
    \ QR AA DO RCODE=0\n   ;;\n   ;; Question\n   example.            IN DS\n   ;;\
    \ Answer\n   ;; (empty)\n   ;; Authority\n   example.       3600 IN SOA ns1.example.\
    \ bugs.x.w.example. (\n                              1081539377\n            \
    \                  3600\n                              300\n                 \
    \             3600000\n                              3600\n                  \
    \            )\n   example.       3600 RRSIG  SOA 5 1 3600 20040509183619 (\n\
    \                              20040409183619 38519 example.\n               \
    \               ONx0k36rcjaxYtcNgq6iQnpNV5+drqYAsC9h\n                       \
    \       7TSJaHCqbhE67Sr6aH2xDUGcqQWu/n0UVzrF\n                              vkgO9ebarZ0GWDKcuwlM6eNB5SiX2K74l5LW\n\
    \                              DA7S/Un/IbtDq4Ay8NMNLQI7Dw7n4p8/rjkB\n        \
    \                      jV7j86HyQgM5e7+miRAz8V01b0I= )\n   example.       3600\
    \ NSEC   a.example. NS SOA MX RRSIG NSEC DNSKEY\n   example.       3600 RRSIG\
    \  NSEC 5 1 3600 20040509183619 (\n                              20040409183619\
    \ 38519 example.\n                              O0k558jHhyrC97ISHnislm4kLMW48C7U7cBm\n\
    \                              FTfhke5iVqNRVTB1STLMpgpbDIC9hcryoO0V\n        \
    \                      Z9ME5xPzUEhbvGnHd5sfzgFVeGxr5Nyyq4tW\n                \
    \              SDBgIBiLQUv1ivy29vhXy7WgR62dPrZ0PWvm\n                        \
    \      jfFJ5arXf4nPxp/kEowGgBRzY/U= )\n   ;; Additional\n   ;; (empty)\n"
- title: Appendix C.  Authentication Examples
  contents:
  - "Appendix C.  Authentication Examples\n   The examples in this section show how\
    \ the response messages in\n   Appendix B are authenticated.\n"
- title: C.1.  Authenticating an Answer
  contents:
  - "C.1.  Authenticating an Answer\n   The query in Appendix B.1 returned an MX RRset\
    \ for \"x.w.example.com\".\n   The corresponding RRSIG indicates that the MX RRset\
    \ was signed by an\n   \"example\" DNSKEY with algorithm 5 and key tag 38519.\
    \  The resolver\n   needs the corresponding DNSKEY RR in order to authenticate\
    \ this\n   answer.  The discussion below describes how a resolver might obtain\n\
    \   this DNSKEY RR.\n   The RRSIG indicates the original TTL of the MX RRset was\
    \ 3600, and,\n   for the purpose of authentication, the current TTL is replaced\
    \ by\n   3600.  The RRSIG labels field value of 3 indicates that the answer\n\
    \   was not the result of wildcard expansion.  The \"x.w.example.com\" MX\n  \
    \ RRset is placed in canonical form, and, assuming the current time\n   falls\
    \ between the signature inception and expiration dates, the\n   signature is authenticated.\n"
- title: C.1.1.  Authenticating the Example DNSKEY RR
  contents:
  - "C.1.1.  Authenticating the Example DNSKEY RR\n   This example shows the logical\
    \ authentication process that starts\n   from the a configured root DNSKEY (or\
    \ DS RR) and moves down the tree\n   to authenticate the desired \"example\" DNSKEY\
    \ RR.  Note that the\n   logical order is presented for clarity.  An implementation\
    \ may choose\n   to construct the authentication as referrals are received or\
    \ to\n   construct the authentication chain only after all RRsets have been\n\
    \   obtained, or in any other combination it sees fit.  The example here\n   demonstrates\
    \ only the logical process and does not dictate any\n   implementation rules.\n\
    \   We assume the resolver starts with a configured DNSKEY RR for the\n   root\
    \ zone (or a configured DS RR for the root zone).  The resolver\n   checks whether\
    \ this configured DNSKEY RR is present in the root\n   DNSKEY RRset (or whether\
    \ the DS RR matches some DNSKEY in the root\n   DNSKEY RRset), whether this DNSKEY\
    \ RR has signed the root DNSKEY\n   RRset, and whether the signature lifetime\
    \ is valid.  If all these\n   conditions are met, all keys in the DNSKEY RRset\
    \ are considered\n   authenticated.  The resolver then uses one (or more) of the\
    \ root\n   DNSKEY RRs to authenticate the \"example\" DS RRset.  Note that the\n\
    \   resolver may have to query the root zone to obtain the root DNSKEY\n   RRset\
    \ or \"example\" DS RRset.\n   Once the DS RRset has been authenticated using\
    \ the root DNSKEY, the\n   resolver checks the \"example\" DNSKEY RRset for some\
    \ \"example\" DNSKEY\n   RR that matches one of the authenticated \"example\"\
    \ DS RRs.  If such a\n   matching \"example\" DNSKEY is found, the resolver checks\
    \ whether this\n   DNSKEY RR has signed the \"example\" DNSKEY RRset and the signature\n\
    \   lifetime is valid.  If these conditions are met, all keys in the\n   \"example\"\
    \ DNSKEY RRset are considered authenticated.\n   Finally, the resolver checks\
    \ that some DNSKEY RR in the \"example\"\n   DNSKEY RRset uses algorithm 5 and\
    \ has a key tag of 38519.  This\n   DNSKEY is used to authenticate the RRSIG included\
    \ in the response.\n   If multiple \"example\" DNSKEY RRs match this algorithm\
    \ and key tag,\n   then each DNSKEY RR is tried, and the answer is authenticated\
    \ if any\n   of the matching DNSKEY RRs validate the signature as described above.\n"
- title: C.2.  Name Error
  contents:
  - "C.2.  Name Error\n   The query in Appendix B.2 returned NSEC RRs that prove that\
    \ the\n   requested data does not exist and no wildcard applies.  The negative\n\
    \   reply is authenticated by verifying both NSEC RRs.  The NSEC RRs are\n   authenticated\
    \ in a manner identical to that of the MX RRset discussed\n   above.\n"
- title: C.3.  No Data Error
  contents:
  - "C.3.  No Data Error\n   The query in Appendix B.3 returned an NSEC RR that proves\
    \ that the\n   requested name exists, but the requested RR type does not exist.\
    \  The\n   negative reply is authenticated by verifying the NSEC RR.  The NSEC\n\
    \   RR is authenticated in a manner identical to that of the MX RRset\n   discussed\
    \ above.\n"
- title: C.4.  Referral to Signed Zone
  contents:
  - "C.4.  Referral to Signed Zone\n   The query in Appendix B.4 returned a referral\
    \ to the signed\n   \"a.example.\" zone.  The DS RR is authenticated in a manner\
    \ identical\n   to that of the MX RRset discussed above.  This DS RR is used to\n\
    \   authenticate the \"a.example\" DNSKEY RRset.\n   Once the \"a.example\" DS\
    \ RRset has been authenticated using the\n   \"example\" DNSKEY, the resolver\
    \ checks the \"a.example\" DNSKEY RRset\n   for some \"a.example\" DNSKEY RR that\
    \ matches the DS RR.  If such a\n   matching \"a.example\" DNSKEY is found, the\
    \ resolver checks whether\n   this DNSKEY RR has signed the \"a.example\" DNSKEY\
    \ RRset and whether\n   the signature lifetime is valid.  If all these conditions\
    \ are met,\n   all keys in the \"a.example\" DNSKEY RRset are considered\n   authenticated.\n"
- title: C.5.  Referral to Unsigned Zone
  contents:
  - "C.5.  Referral to Unsigned Zone\n   The query in Appendix B.5 returned a referral\
    \ to an unsigned\n   \"b.example.\" zone.  The NSEC proves that no authentication\
    \ leads from\n   \"example\" to \"b.example\", and the NSEC RR is authenticated\
    \ in a\n   manner identical to that of the MX RRset discussed above.\n"
- title: C.6.  Wildcard Expansion
  contents:
  - "C.6.  Wildcard Expansion\n   The query in Appendix B.6 returned an answer that\
    \ was produced as a\n   result of wildcard expansion.  The answer section contains\
    \ a wildcard\n   RRset expanded as it would be in a traditional DNS response,\
    \ and the\n   corresponding RRSIG indicates that the expanded wildcard MX RRset\
    \ was\n   signed by an \"example\" DNSKEY with algorithm 5 and key tag 38519.\n\
    \   The RRSIG indicates that the original TTL of the MX RRset was 3600,\n   and,\
    \ for the purpose of authentication, the current TTL is replaced\n   by 3600.\
    \  The RRSIG labels field value of 2 indicates that the answer\n   is the result\
    \ of wildcard expansion, as the \"a.z.w.example\" name\n   contains 4 labels.\
    \  The name \"a.z.w.w.example\" is replaced by\n   \"*.w.example\", the MX RRset\
    \ is placed in canonical form, and,\n   assuming that the current time falls between\
    \ the signature inception\n   and expiration dates, the signature is authenticated.\n\
    \   The NSEC proves that no closer match (exact or closer wildcard) could\n  \
    \ have been used to answer this query, and the NSEC RR must also be\n   authenticated\
    \ before the answer is considered valid.\n"
- title: C.7.  Wildcard No Data Error
  contents:
  - "C.7.  Wildcard No Data Error\n   The query in Appendix B.7 returned NSEC RRs\
    \ that prove that the\n   requested data does not exist and no wildcard applies.\
    \  The negative\n   reply is authenticated by verifying both NSEC RRs.\n"
- title: C.8.  DS Child Zone No Data Error
  contents:
  - "C.8.  DS Child Zone No Data Error\n   The query in Appendix B.8 returned NSEC\
    \ RRs that shows the requested\n   was answered by a child server (\"example\"\
    \ server).  The NSEC RR\n   indicates the presence of an SOA RR, showing that\
    \ the answer is from\n   the child .  Queries for the \"example\" DS RRset should\
    \ be sent to the\n   parent servers (\"root\" servers).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Roy Arends\n   Telematica Instituut\n   Brouwerijstraat\
    \ 1\n   7523 XC  Enschede\n   NL\n   EMail: roy.arends@telin.nl\n   Rob Austein\n\
    \   Internet Systems Consortium\n   950 Charter Street\n   Redwood City, CA  94063\n\
    \   USA\n   EMail: sra@isc.org\n   Matt Larson\n   VeriSign, Inc.\n   21345 Ridgetop\
    \ Circle\n   Dulles, VA  20166-6503\n   USA\n   EMail: mlarson@verisign.com\n\
    \   Dan Massey\n   Colorado State University\n   Department of Computer Science\n\
    \   Fort Collins, CO 80523-1873\n   EMail: massey@cs.colostate.edu\n   Scott Rose\n\
    \   National Institute for Standards and Technology\n   100 Bureau Drive\n   Gaithersburg,\
    \ MD  20899-8920\n   USA\n   EMail: scott.rose@nist.gov\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
