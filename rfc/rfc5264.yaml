- contents:
  - '              Publication of Partial Presence Information

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) Extension for Event State\n
    \  Publication describes a mechanism with which a presence user agent is\n   able
    to publish presence information to a presence agent.  Using the\n   Presence Information
    Data Format (PIDF), each presence publication\n   contains full state, regardless
    of how much of that information has\n   actually changed since the previous update.
    \ As a consequence,\n   updating a sizeable presence document with small changes
    bears a\n   considerable overhead and is therefore inefficient.  Especially with\n
    \  low bandwidth and high latency links, this can constitute a\n   considerable
    burden to the system.  This memo defines a solution that\n   aids in reducing
    the impact of those constraints and increases\n   transport efficiency by introducing
    a mechanism that allows for\n   publication of partial presence information.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Definitions and Document Conventions ............................3\n   3.
    Overall Operation ...............................................3\n      3.1.
    Presence Publication .......................................3\n      3.2. Partial
    Presence Publication ...............................4\n   4. Client and Server
    Operation .....................................5\n      4.1. Content-Type for
    Partial Publications ......................5\n      4.2. Generation of Partial
    Publications .........................5\n      4.3. Processing of Partial Publications
    .........................7\n           4.3.1. Processing <pidf-full> ..............................7\n
    \          4.3.2. Processing <pidf-diff> ..............................7\n   5.
    Security Considerations .........................................8\n   6. Examples
    ........................................................8\n   7. Acknowledgements
    ...............................................12\n   8. References .....................................................12\n
    \     8.1. Normative References ......................................12\n      8.2.
    Informative References ....................................13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) Extension for Event
    State\n   Publication [RFC3903] allows Presence User Agents ('PUA') to publish\n
    \  presence information of a user ('presentity').  The Presence Agent\n   (PA)
    collects publications from one or several presence user agents,\n   and generates
    the composite event state of the presentity.\n   The baseline format for presence
    information is defined in the\n   Presence Information Data Format (PIDF) [RFC3863]
    and is by default\n   used in presence publication.  The PIDF uses Extensible
    Markup\n   Language (XML) [W3C.REC-xml], and groups data into elements called\n
    \  tuples.  In addition, [RFC4479], [RFC4480], [RFC4481], [RFC4482], and\n   [RFC5196]
    define extension elements that provide various additional\n   features to PIDF.\n
    \  Presence publication by default uses the PIDF document format, and\n   each
    publication contains full state, regardless of how much of the\n   presence information
    has actually changed since the previous update.\n   As a consequence, updating
    a sizeable presence document especially\n   with small changes bears a considerable
    overhead and is therefore\n   inefficient.  Publication of information over low
    bandwidth and high\n   latency links further exacerbates this inefficiency.\n
    \  This memo specifies a mechanism with which the PUA is after an\n   initial
    full state publication able to publish only those parts of\n   the presence document
    that have changed since the previous update.\n   This is accomplished using the
    partial PIDF [RFC5262] document format\n   to communicate a set of presence document
    changes to the PA, who then\n   applies the changes in sequence to its version
    of the presence\n   document.\n   This memo is structured in the following way:
    Section 3 gives an\n   overview of the partial publication mechanism, Section
    4 includes the\n   detailed specification, Section 5 includes discussion of security\n
    \  considerations, and Section 6 includes examples of partial\n   publication.\n"
  title: 1.  Introduction
- contents:
  - "2.  Definitions and Document Conventions\n   In this document, the key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" are to be interpreted
    as described in RFC 2119, BCP 14\n   [RFC2119], and indicate requirement levels
    for compliant\n   implementations.\n   This document makes use of the vocabulary
    defined in the Model for\n   Presence and Instant Messaging [RFC2778], the Event
    State Publication\n   Extension to SIP [RFC3903], and the PIDF Extension for Partial\n
    \  Presence [RFC5262].\n"
  title: 2.  Definitions and Document Conventions
- contents:
  - "3.  Overall Operation\n   This section introduces the baseline functionality
    for presence\n   publication, and gives an overview of the partial publication\n
    \  mechanism.  This section is informational in nature.  It does not\n   contain
    any normative statements.\n"
  - contents:
    - "3.1.  Presence Publication\n   Event State Publication is specified in [RFC3903].\n
      \  The publication of presence information consists of a presence user\n   agent
      sending a SIP PUBLISH request [RFC3903] targeted to the\n   address-of-record
      of the presentity, and serviced by a presence agent\n   or compositor.  The
      body of the PUBLISH request carries full event\n   state in the form of a presence
      document.\n   The compositor processes the PUBLISH request and stores the presence\n
      \  information.  It also assigns an entity-tag that is used to identify\n   the
      publication.  This entity-tag is returned to the PUA in the\n   response to
      the PUBLISH request.\n   The PUA uses the entity-tag in the following PUBLISH
      request for\n   identifying the publication that the request is meant to refresh,\n
      \  modify or remove.  Presence information is stored in an initial\n   publication,
      and maintained using the refreshing and modifying\n   publications.  Presence
      information disappears either by explicitly\n   removing it or when it meets
      its expiration time.\n"
    title: 3.1.  Presence Publication
  - contents:
    - "3.2.  Partial Presence Publication\n   The partial publication mechanism enables
      the PUA to update only\n   parts of its presence information, namely those sections
      of the\n   presence document that have changed.  The initial publication always\n
      \  carries full state.  However, successive modifying publications to\n   this
      initial presence state can communicate state deltas, i.e., one\n   or more changes
      to the presence information since the previous\n   update.  Versioning of these
      partial publications is necessary to\n   guarantee that the changes are applied
      in the correct order.  The\n   PUBLISH method [RFC3903] already accomplishes
      this using entity-tags\n   and conditional requests, which guarantee correct
      ordering of\n   publication updates.\n      Note that the partial PIDF format
      [RFC5262] contains the 'version'\n      attribute that could be used for versioning
      as well.  However, we\n      chose not to introduce an additional versioning
      mechanism to\n      partial publish, since that would only add ambiguity and
      a\n      potentially undefined error case if the two versioning mechanisms\n
      \     were to somehow contradict.\n   To initialize its publication of presence
      information, the PUA first\n   publishes a full state initial publication.  The
      consequent modifying\n   publications can carry either state deltas or full
      state.  Both\n   initial and modifying partial presence publications are accomplished\n
      \  using the 'application/pidf-diff+xml' content type [RFC5262], with\n   the
      former using the <pidf-full> root element, and the latter using\n   the <pidf-diff>
      or <pidf-full> root elements, respectively.\n   While the <pidf-full> encapsulates
      a regular PIDF document, the\n   <pidf-diff> can contain one or more operations
      for adding new\n   elements or attributes (<add> elements), replacing elements
      or\n   attributes whose content has changed (<replace> elements), or\n   indications
      of removal of certain elements or attributes (<remove>\n   elements).  The PUA
      is free to decide the granularity by which\n   changes in presence information
      are communicated to the composer.  It\n   may very well happen that there are
      enough changes to be communicated\n   that it is more efficient to send a full
      state publication instead of\n   a set of state deltas.\n   When the presence
      compositor receives a partial publication, it\n   applies the included patch
      operations in sequence.  The resulting\n   changed (or patched) presence document
      is then submitted to the\n   composition logic in the same manner as with a
      full state presence\n   publication.  Similarly, any changes to the publication
      expiration\n   apply to the full, patched presence publication.  In other words,\n
      \  there is no possibility to roll back to an earlier version, except by\n   submitting
      a full state publication.\n"
    title: 3.2.  Partial Presence Publication
  title: 3.  Overall Operation
- contents:
  - "4.  Client and Server Operation\n   Unless otherwise specified in this document,
    the presence user agent\n   and presence agent behavior are as defined in [RFC3903].\n"
  - contents:
    - "4.1.  Content-Type for Partial Publications\n   The entities supporting the
      partial publication extension described\n   in this document MUST support the
      'application/pidf-diff+xml' content\n   type defined in the partial PIDF format
      [RFC5262], in addition to the\n   baseline 'application/pidf+xml' content type
      defined in [RFC3863].\n   Listing the partial PIDF content type in the Accept
      header field of a\n   SIP response is an explicit indication of support for
      the partial\n   publication mechanism.  The PUA can learn server support either
      as a\n   result of an explicit query, i.e., in a response to an OPTIONS\n   request,
      or by trial-and-error, i.e., after a 415 error response is\n   returned to an
      attempted partial publication.\n"
    title: 4.1.  Content-Type for Partial Publications
  - contents:
    - "4.2.  Generation of Partial Publications\n   Whenever a PUA decides to begin
      publication of partial presence\n   information, it first needs to make an initial
      publication.  This\n   initial publication always carries full state.  After
      the initial\n   publication, presence information can be updated using modifying\n
      \  publications; the modifications can carry state deltas as well as\n   full
      state.  Finally, the publication can be terminated by explicit\n   removal,
      or by expiration.\n   Both the initial and modifying publications make use of
      the partial\n   presence document format [RFC5262], and all follow the normal
      rules\n   for creating publications, as defined in RFC 3903 [RFC3903], Section\n
      \  4.\n   If the initial PUBLISH request returns a 415 (Unsupported Media\n
      \  Type), it means that the compositor did not understand the partial\n   publication
      format.  In this case, the PUA MUST follow normal\n   procedures for handling
      a 400-class response, as specified in Section\n   8.1.3.5 of [RFC3261].  Specifically,
      the PUA SHOULD retry the\n   publication using the default PIDF content type,
      namely 'application/\n   pidf+xml'.  In addition, to find out a priori whether
      a specific\n   presence compositor supports partial presence publication, the
      PUA\n   MAY use the OPTIONS method, as described in [RFC3261].\n   To construct
      a full-state publication, the PUA uses the following\n   process:\n   o  The
      Content-Type header field in the PUBLISH request MUST be set\n      to the value
      'application/pidf-diff+xml'.\n   o  The document in the body of the request
      is populated with a <pidf-\n      full> root element that includes the 'entity'
      attribute set to\n      identify the presentity.\n   o  Under the <pidf-full>
      root element exists all of the children of a\n      PIDF [RFC3863] <presence>
      element.  This document contains the\n      full state of which the PUA is aware,
      and MAY include elements\n      from any extension namespace.\n   To construct
      a partial publication, the following process is\n   followed:\n   o  The Content-Type
      header field in the PUBLISH request MUST be set\n      to the value 'application/pidf-diff+xml'.\n
      \  o  The document in the body of the request is populated with a <pidf-\n      diff>
      root element that includes the 'entity' attribute\n      identifying the presentity.\n
      \  o  Under the <pidf-diff> root element exists a set of patch\n      operations
      that communicate the changes to the presentity's\n      presence information.
      \ These operations MUST be constructed in\n      sequence, and as defined in
      the partial PIDF format [RFC5262].\n   The PUA is free to decide the granularity
      by which changes in the\n   presentity's presence information are communicated
      to the presence\n   compositor.  In order to reduce unnecessary network traffic,
      the PUA\n   SHOULD batch several patch operations in a single PUBLISH request.\n
      \     A reasonable granularity might be to batch state changes resulting\n      from
      related UI events together in a single PUBLISH request.  For\n      example,
      when the user sets their status to \"Away\", several things\n      including
      freetext notes, service availability, and activities\n      might change as
      a result.\n   If the size of the delta state becomes more than the size of the
      full\n   state, the PUA SHOULD instead send a modifying publication carrying\n
      \  full state, unless this size comparison is not possible.\n      To an implementation
      that generates state deltas directly out of\n      its internal events, it may
      not be trivial to determine the size\n      of the corresponding full state.\n"
    title: 4.2.  Generation of Partial Publications
  - contents:
    - "4.3.  Processing of Partial Publications\n   For each resource, the compositor
      maintains a record for each of the\n   publications.  These are indexed using
      the entity-tag of the\n   publications.\n   Processing of publications generally
      follows the guidelines set in\n   [RFC3903].  In addition, processing PUBLISH
      requests that contain\n   'application/pidf-diff+xml' require some extra processing
      that is\n   dependant on whether the request contains full or partial state.\n"
    - contents:
      - "4.3.1.  Processing <pidf-full>\n   If the value of the Content-Type header
        field is 'application/\n   pidf-diff+xml', and the document therein contains
        a <pidf-full> root\n   element, the publication contains full presence information,
        and the\n   next step applies:\n   o  The compositor MUST take the received
        presence document under the\n      <pidf-full> as the local presence document,
        replacing any previous\n      publications.\n   If any errors are encountered
        before the entire publication is\n   completely processed, the compositor
        MUST reject the request with a\n   500 (Server Internal Error) response, and
        revert back to its\n   original, locally stored presence information.\n"
      title: 4.3.1.  Processing <pidf-full>
    - contents:
      - "4.3.2.  Processing <pidf-diff>\n   If the value of the Content-Type header
        field is 'application/\n   pidf-diff+xml', and the document in the body contains
        a <pidf-diff>\n   root element, the publication contains partial presence
        information\n   (state delta), and the next steps apply:\n   o  If the publication
        containing the <pidf-diff> root element is a\n      modifying publication
        (i.e., contains an If-Match header field\n      with a valid entity-tag),
        the compositor MUST apply the included\n      patch operations in sequence
        against its locally stored presence\n      document.\n   o  Else, the publication
        is an initial publication, for which only\n      <pidf-full> is allowed.  Therefore,
        the publication MUST be\n      rejected with an appropriate error response,
        such as a 400\n      (Invalid Partial Publication).\n   If a publication carrying
        partial presence information expires\n   without the PUA refreshing it, the
        compositor MUST clear the entire,\n   full state publication.\n      This
        means that the compositor does not keep a record of the\n      applied patches,
        and consequently (unlike some versioning\n      systems), the compositor does
        not roll back to an earlier version\n      if a particular partial publication
        were to expire.\n   If the compositor encounters errors while processing the\n
        \  'application/pidf-diff+xml' document, it MUST reject the request with\n
        \  a 400 (Bad Request) response.  In addition, the compositor MAY\n   include
        diagnostics information in the body of the response, using an\n   appropriate
        error condition element defined in Section 5.1. of\n   [RFC5261].\n   If any
        other errors are encountered before the entire partial\n   publication is
        completely processed, including all of the patch\n   operations in the 'application/pidf-diff+xml'
        body, the compositor\n   MUST reject the request with a 500 (Server Internal
        Error) response,\n   and revert back to its original, locally stored presence
        information.\n"
      title: 4.3.2.  Processing <pidf-diff>
    title: 4.3.  Processing of Partial Publications
  title: 4.  Client and Server Operation
- contents:
  - "5.  Security Considerations\n   This specification relies on protocol behavior
    defined in [RFC3903].\n   General security considerations related to Event State
    Publication\n   are extensively discussed in that specification and all the\n
    \  identified security considerations apply to this document in\n   entirety.
    \ In addition, this specification adds no new security\n   considerations.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Examples\n   The following message flow (Figure 1) shows an example of a
    presence\n   system that applies the partial publication mechanism.\n   First,
    the PUA sends an initial publication that contains full state.\n   In return,
    it receives a 200 OK response containing an entity-tag.\n   This entity-tag serves
    as a reference with which the initial full\n   state can be updated using partial
    publications containing state\n   deltas.\n   Then at some point the resource
    state changes, and the PUA assembles\n   these changes into a set of patch operations.
    \ It then sends a\n   modifying publication containing the patch operations, using
    the\n   entity-tag as a reference to the publication against which the\n   patches
    are to be applied.  The compositor applies the received patch\n   operations to
    its local presence document in sequence, and returns a\n   200 OK, which includes
    a new entity-tag.\n                                             Presence Agent
    /\n                     PUA                        Compositor\n                      |
    (M1) PUBLISH                |\n                      |---------------------------->|\n
    \                     | (M2) 200 OK                 |\n                      |<----------------------------|\n
    \                     |                             |\n                      |
    \                            |\n                      |                             |\n
    \                     | (M3) PUBLISH                |\n                      |---------------------------->|\n
    \                     | (M4) 200 OK                 |\n                      |<----------------------------|\n
    \                     |                             |\n                     _|_
    \                          _|_\n                Figure 1: Partial Publication
    Message Flow\n   Message details:\n   (M1): PUA -> Compositor\n         PUBLISH
    sip:resource@example.com SIP/2.0\n         ...\n         Event: presence\n         Expires:
    3600\n         Content-Type: application/pidf-diff+xml\n         Content-Length:
    1457\n         <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n         <p:pidf-full
    xmlns=\"urn:ietf:params:xml:ns:pidf\"\n                xmlns:p=\"urn:ietf:params:xml:ns:pidf-diff\"\n
    \               xmlns:r=\"urn:ietf:params:xml:ns:pidf:rpid\"\n                xmlns:c=\"urn:ietf:params:xml:ns:pidf:caps\"\n
    \               entity=\"pres:someone@example.com\">\n          <tuple id=\"sg89ae\">\n
    \          <status>\n            <basic>open</basic>\n            <r:relationship>assistant</r:relationship>\n
    \          </status>\n           <c:servcaps>\n            <c:audio>true</c:audio>\n
    \           <c:video>false</c:video>\n            <c:message>true</c:message>\n
    \          </c:servcaps>\n           <contact priority=\"0.8\">tel:09012345678</contact>\n
    \         </tuple>\n          <tuple id=\"cg231jcr\">\n           <status>\n            <basic>open</basic>\n
    \          </status>\n           <contact priority=\"1.0\">im:pep@example.com</contact>\n
    \         </tuple>\n          <tuple id=\"r1230d\">\n           <status>\n            <basic>closed</basic>\n
    \           <r:activity>meeting</r:activity>\n           </status>\n           <r:homepage>http://example.com/~pep/</r:homepage>\n
    \          <r:icon>http://example.com/~pep/icon.gif</r:icon>\n           <r:card>http://example.com/~pep/card.vcd</r:card>\n
    \          <contact priority=\"0.9\">sip:pep@example.com</contact>\n          </tuple>\n
    \         <note xml:lang=\"en\">Full state presence document</note>\n          <r:person>\n
    \          <r:status>\n            <r:activities>\n             <r:on-the-phone/>\n
    \            <r:busy/>\n            </r:activities>\n           </r:status>\n
    \         </r:person>\n          <r:device id=\"urn:esn:600b40c7\">\n           <r:status>\n
    \           <c:devcaps>\n             <c:mobility>\n              <c:supported>\n
    \              <c:mobile/>\n              </c:supported>\n             </c:mobility>\n
    \           </c:devcaps>\n           </r:status>\n          </r:device>\n         </p:pidf-full>\n
    \  (M2): Compositor -> PUA\n         SIP/2.0 200 OK\n         ...\n         SIP-ETag:
    61763862389729\n         Expires: 3600\n         Content-Length: 0\n   (M3): PUA
    -> Compositor\n         PUBLISH sip:resource@example.com SIP/2.0\n         ...\n
    \        Event: presence\n         SIP-If-Match: 61763862389729\n         Expires:
    3600\n         Content-Type: application/pidf-diff+xml\n         Content-Length:
    778\n         <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n         <p:pidf-diff
    xmlns=\"urn:ietf:params:xml:ns:pidf\"\n                      xmlns:p=\"urn:ietf:params:xml:ns:pidf-diff\"\n
    \                     xmlns:r=\"urn:ietf:params:xml:ns:pidf:rpid\"\n                      entity=\"pres:someone@example.com\">\n
    \         <p:add sel=\"presence/note\" pos=\"before\"><tuple id=\"ert4773\">\n
    \          <status>\n            <basic>open</basic>\n           </status>\n           <contact
    priority=\"0.4\">mailto:pep@example.com</contact>\n           <note xml:lang=\"en\">This
    is a new tuple inserted\n                 between the last tuple and note element</note>\n
    \         </tuple>\n          </p:add>\n          <p:replace sel=\"*/tuple[@id='r1230d']/status/basic/text()\"\n
    \          >open</p:replace>\n          <p:remove sel=\"*/r:person/r:status/r:activities/r:busy\"/>\n
    \         <p:replace sel=\"*/tuple[@id='cg231jcr']/contact/@priority\"\n           >0.7</p:replace>\n
    \        </p:pidf-diff>\n   (M4): Compositor -> PUA\n         SIP/2.0 200 OK\n
    \        ...\n         SIP-ETag: 18764920981476\n         Expires: 3600\n         Content-Length:
    0\n"
  title: 6.  Examples
- contents:
  - "7.  Acknowledgements\n   The authors would like to thank Atle Monrad, Christian
    Schmidt,\n   George Foti, Fridy Sharon-Fridman, and Avshalom Houri for review\n
    \  comments.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for
      use in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC3903]      Niemi, A., \"Session Initiation Protocol
      (SIP)\n                  Extension for Event State Publication\", RFC 3903,\n
      \                 October 2004.\n   [RFC3863]      Sugano, H., Fujimoto, S.,
      Klyne, G., Bateman, A.,\n                  Carr, W., and J. Peterson, \"Presence
      Information Data\n                  Format (PIDF)\", RFC 3863, August 2004.\n
      \  [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n                  Johnston,
      A., Peterson, J., Sparks, R., Handley, M.,\n                  and E. Schooler,
      \"SIP: Session Initiation Protocol\",\n                  RFC 3261, June 2002.\n
      \  [RFC5262]      Lonnfors, M., Costa-Requena, J., Leppanen, E., and H.\n                  Khartabil,
      \"Presence Information Data Format (PIDF)\n                  Extension for Partial
      Presence\", RFC 5262, September\n                  2008.\n   [RFC5261]      Urpalainen,
      J., \"An Extensible Markup Language (XML)\n                  Patch Operations
      Framework Utilizing XML Path Language\n                  (XPath) Selectors\",
      RFC 5261, September 2008.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC2778]      Day, M., Rosenberg, J., and
      H. Sugano, \"A Model for\n                  Presence and Instant Messaging\",
      RFC 2778,\n                  February 2000.\n   [RFC4479]      Rosenberg, J.,
      \"A Data Model for Presence\", RFC 4479,\n                  July 2006.\n   [RFC4480]
      \     Schulzrinne, H., Gurbani, V., Kyzivat, P., and J.\n                  Rosenberg,
      \"RPID: Rich Presence Extensions to the\n                  Presence Information
      Data Format (PIDF)\", RFC 4480,\n                  July 2006.\n   [RFC4481]
      \     Schulzrinne, H., \"Timed Presence Extensions to the\n                  Presence
      Information Data Format (PIDF) to Indicate\n                  Status Information
      for Past and Future Time\n                  Intervals\", RFC 4481, July 2006.\n
      \  [RFC4482]      Schulzrinne, H., \"CIPID: Contact Information for the\n                  Presence
      Information Data Format\", RFC 4482,\n                  July 2006.\n   [RFC5196]
      \     Lonnfors, M. and K. Kiss, \"Session Initiation Protocol\n                  (SIP)
      User Agent Capability Extension to Presence\n                  Information Data
      Format (PIDF)\", RFC 5196, September\n                  2008.\n   [W3C.REC-xml]
      \ Bray, T., Paoli, J., Sperberg-McQueen, C., and E.\n                  Maler,
      \"Extensible Markup Language (XML) 1.0 (2nd\n                  ed)\", W3C REC-xml,
      October 2000,\n                  <http://www.w3.org/TR/REC-xml>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Aki Niemi\n   Nokia\n   P.O. Box 407\n   NOKIA GROUP,
    FIN 00045\n   Finland\n   Phone: +358 71 8008000\n   EMail: aki.niemi@nokia.com\n
    \  Mikko Lonnfors\n   Nokia\n   Itamerenkatu 11-13\n   Helsinki\n   Finland\n
    \  Phone: +358 71 8008000\n   EMail: mikko.lonnfors@nokia.com\n   Eva Leppanen\n
    \  Individual\n   Lempaala\n   Finland\n   EMail: eva.leppanen@saunalahti.fi\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
