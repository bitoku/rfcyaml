- title: __initial_text__
  contents:
  - '              AES Encryption with HMAC-SHA2 for Kerberos 5

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies two encryption types and two corresponding\n\
    \   checksum types for Kerberos 5.  The new types use AES in CTS mode\n   (CBC\
    \ mode with ciphertext stealing) for confidentiality and HMAC with\n   a SHA-2\
    \ hash for integrity.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8009.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Protocol Key Representation  . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Key Derivation Function  . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Key Generation from Pass Phrases . . . . . . . . . . . .\
    \ . . .  4\n   5.  Kerberos Algorithm Protocol Parameters . . . . . . . . . .\
    \ . .  5\n   6.  Checksum Parameters  . . . . . . . . . . . . . . . . . . . .\
    \ .  7\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . .\
    \  8\n   8.  Security Considerations  . . . . . . . . . . . . . . . . . . .  8\n\
    \     8.1.  Random Values in Salt Strings  . . . . . . . . . . . . . .  9\n  \
    \   8.2.  Algorithm Rationale  . . . . . . . . . . . . . . . . . . .  9\n   9.\
    \  References . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n     9.1.\
    \  Normative References . . . . . . . . . . . . . . . . . . . 10\n     9.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 11\n   Appendix A.  Test Vectors\
    \  . . . . . . . . . . . . . . . . . . . . 12\n   Acknowledgements . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 19\n   Authors' Addresses . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines two encryption types and two corresponding\n\
    \   checksum types for Kerberos 5 using AES with 128-bit or 256-bit keys.\n  \
    \ To avoid ciphertext expansion, we use a variation of the CBC-CS3 mode\n   defined\
    \ in [SP800-38A+], also referred to as ciphertext stealing or\n   CTS mode.  The\
    \ new types conform to the framework specified in\n   [RFC3961], but do not use\
    \ the simplified profile, as the simplified\n   profile is not compliant with\
    \ modern cryptographic best practices\n   such as calculating Message Authentication\
    \ Codes (MACs) over\n   ciphertext rather than plaintext.\n   The encryption and\
    \ checksum types defined in this document are\n   intended to support environments\
    \ that desire to use SHA-256 or\n   SHA-384 (defined in [FIPS180]) as the hash\
    \ algorithm.  Differences\n   between the encryption and checksum types defined\
    \ in this document\n   and the pre-existing Kerberos AES encryption and checksum\
    \ types\n   specified in [RFC3962] are:\n   *  The pseudorandom function (PRF)\
    \ used by PBKDF2 is HMAC-SHA-256 or\n      HMAC-SHA-384.  (HMAC is defined in\
    \ [RFC2104].)\n   *  A key derivation function from [SP800-108] using the SHA-256\
    \ or\n      SHA-384 hash algorithm is used to produce keys for encryption,\n \
    \     integrity protection, and checksum operations.\n   *  The HMAC is calculated\
    \ over the cipher state concatenated with the\n      AES output, instead of being\
    \ calculated over the confounder and\n      plaintext.  This allows the message\
    \ receiver to verify the\n      integrity of the message before decrypting the\
    \ message.\n   *  The HMAC algorithm uses the SHA-256 or SHA-384 hash algorithm\
    \ for\n      integrity protection and checksum operations.\n"
- title: 2.  Protocol Key Representation
  contents:
  - "2.  Protocol Key Representation\n   The AES key space is dense, so we can use\
    \ random or pseudorandom\n   octet strings directly as keys.  The byte representation\
    \ for the key\n   is described in [FIPS197], where the first bit of the bit string\
    \ is\n   the high bit of the first byte of the byte string (octet string).\n"
- title: 3.  Key Derivation Function
  contents:
  - "3.  Key Derivation Function\n   We use a key derivation function from Section\
    \ 5.1 of [SP800-108],\n   which uses the HMAC algorithm as the PRF.\n      function\
    \ KDF-HMAC-SHA2(key, label, [context,] k):\n         k-truncate(K1)\n   where\
    \ the value of K1 is computed as below.\n   key: The source of entropy from which\
    \ subsequent keys are derived.\n   (This is known as \"Ki\" in [SP800-108].)\n\
    \   label: An octet string describing the intended usage of the derived\n   key.\n\
    \   context: This parameter is optional.  An octet string containing the\n   information\
    \ related to the derived keying material.  This\n   specification does not dictate\
    \ a specific format for the context\n   field.  The context field is only used\
    \ by the pseudorandom function\n   defined in Section 5, where it is set to the\
    \ pseudorandom function's\n   octet-string input parameter.  The content of the\
    \ octet-string input\n   parameter is defined by the application that uses it.\n\
    \   k: Length in bits of the key to be outputted, expressed in big-endian\n  \
    \ binary representation in 4 bytes.  (This is called \"L\" in\n   [SP800-108].)\
    \  Specifically, k=128 is represented as 0x00000080, 192\n   as 0x000000C0, 256\
    \ as 0x00000100, and 384 as 0x00000180.\n   When the encryption type is aes128-cts-hmac-sha256-128,\
    \ k must be no\n   greater than 256 bits.  When the encryption type is\n   aes256-cts-hmac-sha384-192,\
    \ k must be no greater than 384 bits.\n   The k-truncate function is defined in\
    \ Section 5.1 of [RFC3961].  It\n   returns the 'k' leftmost bits of the bit-string\
    \ input.\n   In all computations in this document, \"|\" indicates concatenation.\n\
    \   When the encryption type is aes128-cts-hmac-sha256-128, then K1 is\n   computed\
    \ as follows:\n     If the context parameter is not present:\n     K1 = HMAC-SHA-256(key,\
    \ 0x00000001 | label | 0x00 | k)\n     If the context parameter is present:\n\
    \     K1 = HMAC-SHA-256(key, 0x00000001 | label | 0x00 | context | k)\n   When\
    \ the encryption type is aes256-cts-hmac-sha384-192, then K1 is\n   computed as\
    \ follows:\n     If the context parameter is not present:\n     K1 = HMAC-SHA-384(key,\
    \ 0x00000001 | label | 0x00 | k)\n     If the context parameter is present:\n\
    \     K1 = HMAC-SHA-384(key, 0x00000001 | label | 0x00 | context | k)\n   In the\
    \ definitions of K1 above, '0x00000001' is the i parameter (the\n   iteration\
    \ counter) from Section 5.1 of [SP800-108].\n"
- title: 4.  Key Generation from Pass Phrases
  contents:
  - "4.  Key Generation from Pass Phrases\n   As defined below, the string-to-key\
    \ function uses PBKDF2 [RFC2898]\n   and KDF-HMAC-SHA2 to derive the base-key\
    \ from a passphrase and salt.\n   The string-to-key parameter string is 4 octets\
    \ indicating an unsigned\n   number in big-endian order, consistent with [RFC3962],\
    \ except that\n   the default is decimal 32768 if the parameter is not specified.\n\
    \   To ensure that different long-term base-keys are used with different\n   enctypes,\
    \ we prepend the enctype name to the salt, separated by a\n   null byte.  The\
    \ enctype-name is \"aes128-cts-hmac-sha256-128\" or\n   \"aes256-cts-hmac-sha384-192\"\
    \ (without the quotes).\n   The user's long-term base-key is derived as follows:\n\
    \      iter_count = string-to-key parameter, default is decimal 32768\n      saltp\
    \ = enctype-name | 0x00 | salt\n      tkey = random-to-key(PBKDF2(passphrase,\
    \ saltp,\n                                  iter_count, keylength))\n      base-key\
    \ = random-to-key(KDF-HMAC-SHA2(tkey, \"kerberos\",\n                        \
    \                     keylength))\n      where \"kerberos\" is the octet-string\
    \ 0x6B65726265726F73.\n   where PBKDF2 is the function of that name from RFC 2898,\
    \ the\n   pseudorandom function used by PBKDF2 is HMAC-SHA-256 when the enctype\n\
    \   is \"aes128-cts-hmac-sha256-128\" and HMAC-SHA-384 when the enctype is\n \
    \  \"aes256-cts-hmac-sha384-192\", the value for keylength is the AES key\n  \
    \ length (128 or 256 bits), and the algorithm KDF-HMAC-SHA2 is defined\n   in\
    \ Section 3.\n"
- title: 5.  Kerberos Algorithm Protocol Parameters
  contents:
  - "5.  Kerberos Algorithm Protocol Parameters\n   The cipher state defined in RFC\
    \ 3961 that maintains cryptographic\n   state across different encryption operations\
    \ using the same key is\n   used as the formal initialization vector (IV) input\
    \ into CBC-CS3.\n   The plaintext is prepended with a 16-octet random value generated\
    \ by\n   the message originator, known as a confounder.\n   The ciphertext is\
    \ a concatenation of the output of AES in CBC-CS3\n   mode and the HMAC of the\
    \ cipher state concatenated with the AES\n   output.  The HMAC is computed using\
    \ either SHA-256 or SHA-384\n   depending on the encryption type.  The output\
    \ of HMAC-SHA-256 is\n   truncated to 128 bits, and the output of HMAC-SHA-384\
    \ is truncated to\n   192 bits.  Sample test vectors are given in Appendix A.\n\
    \   Decryption is performed by removing the HMAC, verifying the HMAC\n   against\
    \ the cipher state concatenated with the ciphertext, and then\n   decrypting the\
    \ ciphertext if the HMAC is correct.  Finally, the first\n   16 octets of the\
    \ decryption output (the confounder) is discarded, and\n   the remainder is returned\
    \ as the plaintext decryption output.\n   The following parameters apply to the\
    \ encryption types\n   aes128-cts-hmac-sha256-128 and aes256-cts-hmac-sha384-192.\n\
    \   protocol key format: as defined in Section 2.\n   specific key structure:\
    \ three derived keys: { Kc, Ke, Ki }.\n   Kc: the checksum key, inputted into\
    \ HMAC to provide the checksum\n   mechanism defined in Section 6.\n   Ke: the\
    \ encryption key, inputted into AES encryption and decryption\n   as defined in\
    \ \"encryption function\" and \"decryption function\" below.\n   Ki: the integrity\
    \ key, inputted into HMAC to provide authenticated\n   encryption as defined in\
    \ \"encryption function\" and \"decryption\n   function\" below.\n   required\
    \ checksum mechanism: as defined in Section 6.\n   key-generation seed length:\
    \ key size (128 or 256 bits).\n   string-to-key function: as defined in Section\
    \ 4.\n   default string-to-key parameters: iteration count of decimal 32768.\n\
    \   random-to-key function: identity function.\n   key-derivation function: KDF-HMAC-SHA2\
    \ as defined in Section 3.  The\n   key usage number is expressed as 4 octets\
    \ in big-endian order.\n   If the enctype is aes128-cts-hmac-sha256-128:\n   Kc\
    \ = KDF-HMAC-SHA2(base-key, usage | 0x99, 128)\n   Ke = KDF-HMAC-SHA2(base-key,\
    \ usage | 0xAA, 128)\n   Ki = KDF-HMAC-SHA2(base-key, usage | 0x55, 128)\n   If\
    \ the enctype is aes256-cts-hmac-sha384-192:\n   Kc = KDF-HMAC-SHA2(base-key,\
    \ usage | 0x99, 192)\n   Ke = KDF-HMAC-SHA2(base-key, usage | 0xAA, 256)\n   Ki\
    \ = KDF-HMAC-SHA2(base-key, usage | 0x55, 192)\n   cipher state: a 128-bit CBC\
    \ initialization vector derived from a\n   previous ciphertext (if any) using\
    \ the same encryption key, as\n   specified below.\n   initial cipher state: all\
    \ bits zero.\n   encryption function: as follows, where E() is AES encryption\
    \ in\n   CBC-CS3 mode, and h is the size of truncated HMAC (128 bits or 192\n\
    \   bits as described above).\n      N = random value of length 128 bits (the\
    \ AES block size)\n      IV = cipher state\n      C = E(Ke, N | plaintext, IV)\n\
    \      H = HMAC(Ki, IV | C)\n      ciphertext = C | H[1..h]\n      Steps to compute\
    \ the 128-bit cipher state:\n         L = length of C in bits\n         portion\
    \ C into 128-bit blocks, placing any remainder of less\n         than 128 bits\
    \ into a final block\n         if L == 128: cipher state = C\n         else if\
    \ L mod 128 > 0: cipher state = last full (128-bit) block\n                  \
    \                           of C (the next-to-last\n                         \
    \                    block)\n         else if L mod 128 == 0: cipher state = next-to-last\
    \ block of C\n         (Note that L will never be less than 128 because of the\n\
    \         presence of N in the encryption input.)\n   decryption function: as\
    \ follows, where D() is AES decryption in\n   CBC-CS3 mode, and h is the size\
    \ of truncated HMAC.\n      (C, H) = ciphertext\n          (Note: H is the last\
    \ h bits of the ciphertext.)\n      IV = cipher state\n      if H != HMAC(Ki,\
    \ IV | C)[1..h]\n          stop, report error\n      (N, P) = D(Ke, C, IV)\n \
    \     (Note: N is set to the first block of the decryption output; P is\n    \
    \  set to the rest of the output.)\n      cipher state = same as described above\
    \ in encryption function\n   pseudorandom function:\n      If the enctype is aes128-cts-hmac-sha256-128:\n\
    \      PRF = KDF-HMAC-SHA2(input-key, \"prf\", octet-string, 256)\n      If the\
    \ enctype is aes256-cts-hmac-sha384-192:\n      PRF = KDF-HMAC-SHA2(input-key,\
    \ \"prf\", octet-string, 384)\n      where \"prf\" is the octet-string 0x707266\n"
- title: 6.  Checksum Parameters
  contents:
  - "6.  Checksum Parameters\n   The following parameters apply to the checksum types\n\
    \   hmac-sha256-128-aes128 and hmac-sha384-192-aes256, which are the\n   associated\
    \ checksums for aes128-cts-hmac-sha256-128 and\n   aes256-cts-hmac-sha384-192,\
    \ respectively.\n   associated cryptosystem: aes128-cts-hmac-sha256-128 or\n \
    \  aes256-cts-hmac-sha384-192 as appropriate.\n   get_mic: HMAC(Kc, message)[1..h].\n\
    \      where h is 128 bits for checksum type hmac-sha256-128-aes128 and\n    \
    \  192 bits for checksum type hmac-sha384-192-aes256\n   verify_mic: get_mic and\
    \ compare.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has assigned encryption type numbers as follows\
    \ in the \"Kerberos\n   Encryption Type Numbers\" registry.\n      etype   encryption\
    \ type              Reference\n      -----   ---------------              ---------\n\
    \      19      aes128-cts-hmac-sha256-128   RFC 8009\n      20      aes256-cts-hmac-sha384-192\
    \   RFC 8009\n   IANA has assigned checksum type numbers as follows in the \"\
    Kerberos\n   Checksum Type Numbers\" registry.\n      sumtype   Checksum type\
    \            checksum  Reference\n      value                              size\n\
    \      -------   -------------            --------  ---------\n      19      \
    \  hmac-sha256-128-aes128   16        RFC 8009\n      20        hmac-sha384-192-aes256\
    \   24        RFC 8009\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This specification requires implementations to\
    \ generate random\n   values.  The use of inadequate pseudorandom number generators\
    \ (PRNGs)\n   can result in little or no security.  The generation of quality\n\
    \   random numbers is difficult.  [RFC4086] offers guidance on random\n   number\
    \ generation.\n   This document specifies a mechanism for generating keys from\n\
    \   passphrases or passwords.  The use of PBKDF2, a salt, and a large\n   iteration\
    \ count adds some resistance to offline dictionary attacks by\n   passive eavesdroppers.\
    \  Salting prevents \"rainbow table\" attacks,\n   while large iteration counts\
    \ slow password-guess attempts.\n   Nonetheless, computing power continues to\
    \ rapidly improve, including\n   the potential for use of graphics processing\
    \ units (GPUs) in\n   password-guess attempts.  It is important to choose strong\n\
    \   passphrases.  Use of Kerberos extensions that protect against offline\n  \
    \ dictionary attacks should also be considered, as should the use of\n   public\
    \ key cryptography for initial Kerberos authentication [RFC4556]\n   to eliminate\
    \ the use of passwords or passphrases within the Kerberos\n   protocol.\n   The\
    \ NIST guidance in Section 5.3 of [SP800-38A], requiring that CBC\n   initialization\
    \ vectors be unpredictable, is satisfied by the use of a\n   random confounder\
    \ as the first block of plaintext.  The confounder\n   fills the cryptographic\
    \ role typically played by an initialization\n   vector.  This approach was chosen\
    \ to align with other Kerberos\n   cryptosystem approaches.\n"
- title: 8.1.  Random Values in Salt Strings
  contents:
  - "8.1.  Random Values in Salt Strings\n   The NIST guidance in Section 5.1 of [SP800-132]\
    \ requires at least 128\n   bits of the salt to be randomly generated.  The string-to-key\n\
    \   function as defined in [RFC3961] requires the salt to be valid UTF-8\n   strings\
    \ [RFC3629].  Not every 128-bit random string will be valid\n   UTF-8, so a UTF-8-compatible\
    \ encoding would be needed to encapsulate\n   the random bits.  However, using\
    \ a salt containing a random portion\n   may have the following issues with some\
    \ implementations:\n   *  Keys for cross-realm krbtgt services [RFC4120] are typically\n\
    \      managed by entering the same password at two Key Distribution\n      Centers\
    \ (KDCs) to get the same keys.  If each KDC uses a random\n      salt, they won't\
    \ have the same keys.\n   *  Random salts may interfere with checking of password\
    \ history.\n"
- title: 8.2.  Algorithm Rationale
  contents:
  - "8.2.  Algorithm Rationale\n   This document has been written to be consistent\
    \ with common\n   implementations of AES and SHA-2.  The encryption and hash algorithm\n\
    \   sizes have been chosen to create a consistent level of protection,\n   with\
    \ consideration to implementation efficiencies.  So, for instance,\n   SHA-384,\
    \ which would normally be matched to AES-192, is instead\n   matched to AES-256\
    \ to leverage the fact that there are efficient\n   hardware implementations of\
    \ AES-256.  Note that, as indicated by the\n   enc-type name \"aes256-cts-hmac-sha384-192\"\
    , the truncation of the\n   HMAC-SHA-384 output to 192 bits results in an overall\
    \ 192-bit level\n   of security.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [FIPS180]    National Institute of Standards and\
    \ Technology, \"Secure\n                Hash Standard\", FIPS PUB 180-4,\n   \
    \             DOI 10.6028/NIST.FIPS.180-4, August 2015.\n   [FIPS197]    National\
    \ Institute of Standards and Technology,\n                \"Advanced Encryption\
    \ Standard (AES)\", FIPS PUB 197,\n                November 2001.\n   [RFC2104]\
    \    Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n             \
    \   Hashing for Message Authentication\", RFC 2104,\n                DOI 10.17487/RFC2104,\
    \ February 1997,\n                <http://www.rfc-editor.org/info/rfc2104>.\n\
    \   [RFC2898]    Kaliski, B., \"PKCS #5: Password-Based Cryptography\n       \
    \         Specification Version 2.0\", RFC 2898,\n                DOI 10.17487/RFC2898,\
    \ September 2000,\n                <http://www.rfc-editor.org/info/rfc2898>.\n\
    \   [RFC3629]    Yergeau, F., \"UTF-8, a transformation format of ISO\n      \
    \          10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n       \
    \         2003, <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC3961]    Raeburn,\
    \ K., \"Encryption and Checksum Specifications for\n                Kerberos 5\"\
    , RFC 3961, DOI 10.17487/RFC3961, February\n                2005, <http://www.rfc-editor.org/info/rfc3961>.\n\
    \   [RFC3962]    Raeburn, K., \"Advanced Encryption Standard (AES)\n         \
    \       Encryption for Kerberos 5\", RFC 3962,\n                DOI 10.17487/RFC3962,\
    \ February 2005,\n                <http://www.rfc-editor.org/info/rfc3962>.\n\
    \   [SP800-38A+] National Institute of Standards and Technology,\n           \
    \     \"Recommendation for Block Cipher Modes of Operation:\n                Three\
    \ Variants of Ciphertext Stealing for CBC Mode\",\n                NIST Special\
    \ Publication 800-38A Addendum, October 2010.\n   [SP800-108]  National Institute\
    \ of Standards and Technology,\n                \"Recommendation for Key Derivation\
    \ Using Pseudorandom\n                Functions\", NIST Special Publication 800-108,\
    \ October\n                2009.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC4086]    Eastlake 3rd, D., Schiller, J.,\
    \ and S. Crocker,\n                \"Randomness Requirements for Security\", BCP\
    \ 106,\n                RFC 4086, DOI 10.17487/RFC4086, June 2005,\n         \
    \       <http://www.rfc-editor.org/info/rfc4086>.\n   [RFC4120]    Neuman, C.,\
    \ Yu, T., Hartman, S., and K. Raeburn, \"The\n                Kerberos Network\
    \ Authentication Service (V5)\", RFC 4120,\n                DOI 10.17487/RFC4120,\
    \ July 2005,\n                <http://www.rfc-editor.org/info/rfc4120>.\n   [RFC4556]\
    \    Zhu, L. and B. Tung, \"Public Key Cryptography for\n                Initial\
    \ Authentication in Kerberos (PKINIT)\", RFC 4556,\n                DOI 10.17487/RFC4556,\
    \ June 2006,\n                <http://www.rfc-editor.org/info/rfc4556>.\n   [SP800-38A]\
    \  National Institute of Standards and Technology,\n                \"Recommendation\
    \ for Block Cipher Modes of Operation:\n                Methods and Techniques\"\
    , NIST Special Publication\n                800-38A, December 2001.\n   [SP800-132]\
    \  National Institute of Standards and Technology,\n                \"Recommendation\
    \ for Password-Based Key Derivation, Part\n                1: Storage Applications\"\
    , NIST Special Publication\n                800-132, June 2010.\n"
- title: Appendix A.  Test Vectors
  contents:
  - "Appendix A.  Test Vectors\n   Sample results for string-to-key conversion:\n\
    \   --------------------------------------------\n   Iteration count = 32768\n\
    \   Pass phrase = \"password\"\n   Saltp for creating 128-bit base-key:\n    \
    \  61 65 73 31 32 38 2D 63 74 73 2D 68 6D 61 63 2D\n      73 68 61 32 35 36 2D\
    \ 31 32 38 00 10 DF 9D D7 83\n      E5 BC 8A CE A1 73 0E 74 35 5F 61 41 54 48\
    \ 45 4E\n      41 2E 4D 49 54 2E 45 44 55 72 61 65 62 75 72 6E\n   (The saltp\
    \ is \"aes128-cts-hmac-sha256-128\" | 0x00 |\n    random 16-byte valid UTF-8 sequence\
    \ | \"ATHENA.MIT.EDUraeburn\")\n   128-bit base-key:\n      08 9B CA 48 B1 05\
    \ EA 6E A7 7C A5 D2 F3 9D C5 E7\n   Saltp for creating 256-bit base-key:\n   \
    \   61 65 73 32 35 36 2D 63 74 73 2D 68 6D 61 63 2D\n      73 68 61 33 38 34 2D\
    \ 31 39 32 00 10 DF 9D D7 83\n      E5 BC 8A CE A1 73 0E 74 35 5F 61 41 54 48\
    \ 45 4E\n      41 2E 4D 49 54 2E 45 44 55 72 61 65 62 75 72 6E\n   (The saltp\
    \ is \"aes256-cts-hmac-sha384-192\" | 0x00 |\n    random 16-byte valid UTF-8 sequence\
    \ | \"ATHENA.MIT.EDUraeburn\")\n   256-bit base-key:\n      45 BD 80 6D BF 6A\
    \ 83 3A 9C FF C1 C9 45 89 A2 22\n      36 7A 79 BC 21 C4 13 71 89 06 E9 F5 78\
    \ A7 84 67\n   Sample results for key derivation:\n   ----------------------------------\n\
    \   enctype aes128-cts-hmac-sha256-128:\n   128-bit base-key:\n      37 05 D9\
    \ 60 80 C1 77 28 A0 E8 00 EA B6 E0 D2 3C\n   Kc value for key usage 2 (label =\
    \ 0x0000000299):\n      B3 1A 01 8A 48 F5 47 76 F4 03 E9 A3 96 32 5D C3\n   Ke\
    \ value for key usage 2 (label = 0x00000002AA):\n      9B 19 7D D1 E8 C5 60 9D\
    \ 6E 67 C3 E3 7C 62 C7 2E\n   Ki value for key usage 2 (label = 0x0000000255):\n\
    \      9F DA 0E 56 AB 2D 85 E1 56 9A 68 86 96 C2 6A 6C\n   enctype aes256-cts-hmac-sha384-192:\n\
    \   256-bit base-key:\n      6D 40 4D 37 FA F7 9F 9D F0 D3 35 68 D3 20 66 98\n\
    \      00 EB 48 36 47 2E A8 A0 26 D1 6B 71 82 46 0C 52\n   Kc value for key usage\
    \ 2 (label = 0x0000000299):\n      EF 57 18 BE 86 CC 84 96 3D 8B BB 50 31 E9 F5\
    \ C4\n      BA 41 F2 8F AF 69 E7 3D\n   Ke value for key usage 2 (label = 0x00000002AA):\n\
    \      56 AB 22 BE E6 3D 82 D7 BC 52 27 F6 77 3F 8E A7\n      A5 EB 1C 82 51 60\
    \ C3 83 12 98 0C 44 2E 5C 7E 49\n   Ki value for key usage 2 (label = 0x0000000255):\n\
    \      69 B1 65 14 E3 CD 8E 56 B8 20 10 D5 C7 30 12 B6\n      22 C4 D0 0F FC 23\
    \ ED 1F\n   Sample encryptions (all using the default cipher state):\n   --------------------------------------------------------\n\
    \   These sample encryptions use the above sample key derivation results,\n  \
    \ including use of the same base-key and key usage values.\n   The following test\
    \ vectors are for\n   enctype aes128-cts-hmac-sha256-128:\n   Plaintext: (empty)\n\
    \   Confounder:\n      7E 58 95 EA F2 67 24 35 BA D8 17 F5 45 A3 71 48\n   128-bit\
    \ AES key (Ke):\n      9B 19 7D D1 E8 C5 60 9D 6E 67 C3 E3 7C 62 C7 2E\n   128-bit\
    \ HMAC key (Ki):\n      9F DA 0E 56 AB 2D 85 E1 56 9A 68 86 96 C2 6A 6C\n   AES\
    \ Output:\n      EF 85 FB 89 0B B8 47 2F 4D AB 20 39 4D CA 78 1D\n   Truncated\
    \ HMAC Output:\n      AD 87 7E DA 39 D5 0C 87 0C 0D 5A 0A 8E 48 C7 18\n   Ciphertext\
    \ (AES Output | HMAC Output):\n      EF 85 FB 89 0B B8 47 2F 4D AB 20 39 4D CA\
    \ 78 1D\n      AD 87 7E DA 39 D5 0C 87 0C 0D 5A 0A 8E 48 C7 18\n   Plaintext:\
    \ (length less than block size)\n      00 01 02 03 04 05\n   Confounder:\n   \
    \   7B CA 28 5E 2F D4 13 0F B5 5B 1A 5C 83 BC 5B 24\n   128-bit AES key (Ke):\n\
    \      9B 19 7D D1 E8 C5 60 9D 6E 67 C3 E3 7C 62 C7 2E\n   128-bit HMAC key (Ki):\n\
    \      9F DA 0E 56 AB 2D 85 E1 56 9A 68 86 96 C2 6A 6C\n   AES Output:\n     \
    \ 84 D7 F3 07 54 ED 98 7B AB 0B F3 50 6B EB 09 CF\n      B5 54 02 CE F7 E6\n \
    \  Truncated HMAC Output:\n      87 7C E9 9E 24 7E 52 D1 6E D4 42 1D FD F8 97\
    \ 6C\n   Ciphertext:\n      84 D7 F3 07 54 ED 98 7B AB 0B F3 50 6B EB 09 CF\n\
    \      B5 54 02 CE F7 E6 87 7C E9 9E 24 7E 52 D1 6E D4\n      42 1D FD F8 97 6C\n\
    \   Plaintext: (length equals block size)\n      00 01 02 03 04 05 06 07 08 09\
    \ 0A 0B 0C 0D 0E 0F\n   Confounder:\n      56 AB 21 71 3F F6 2C 0A 14 57 20 0F\
    \ 6F A9 94 8F\n   128-bit AES key (Ke):\n      9B 19 7D D1 E8 C5 60 9D 6E 67 C3\
    \ E3 7C 62 C7 2E\n   128-bit HMAC key (Ki):\n      9F DA 0E 56 AB 2D 85 E1 56\
    \ 9A 68 86 96 C2 6A 6C\n   AES Output:\n      35 17 D6 40 F5 0D DC 8A D3 62 87\
    \ 22 B3 56 9D 2A\n      E0 74 93 FA 82 63 25 40 80 EA 65 C1 00 8E 8F C2\n   Truncated\
    \ HMAC Output:\n      95 FB 48 52 E7 D8 3E 1E 7C 48 C3 7E EB E6 B0 D3\n   Ciphertext:\n\
    \      35 17 D6 40 F5 0D DC 8A D3 62 87 22 B3 56 9D 2A\n      E0 74 93 FA 82 63\
    \ 25 40 80 EA 65 C1 00 8E 8F C2\n      95 FB 48 52 E7 D8 3E 1E 7C 48 C3 7E EB\
    \ E6 B0 D3\n   Plaintext: (length greater than block size)\n      00 01 02 03\
    \ 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n      10 11 12 13 14\n   Confounder:\n\
    \      A7 A4 E2 9A 47 28 CE 10 66 4F B6 4E 49 AD 3F AC\n   128-bit AES key (Ke):\n\
    \      9B 19 7D D1 E8 C5 60 9D 6E 67 C3 E3 7C 62 C7 2E\n   128-bit HMAC key (Ki):\n\
    \      9F DA 0E 56 AB 2D 85 E1 56 9A 68 86 96 C2 6A 6C\n   AES Output:\n     \
    \ 72 0F 73 B1 8D 98 59 CD 6C CB 43 46 11 5C D3 36\n      C7 0F 58 ED C0 C4 43\
    \ 7C 55 73 54 4C 31 C8 13 BC\n      E1 E6 D0 72 C1\n   Truncated HMAC Output:\n\
    \      86 B3 9A 41 3C 2F 92 CA 9B 83 34 A2 87 FF CB FC\n   Ciphertext:\n     \
    \ 72 0F 73 B1 8D 98 59 CD 6C CB 43 46 11 5C D3 36\n      C7 0F 58 ED C0 C4 43\
    \ 7C 55 73 54 4C 31 C8 13 BC\n      E1 E6 D0 72 C1 86 B3 9A 41 3C 2F 92 CA 9B\
    \ 83 34\n      A2 87 FF CB FC\n   The following test vectors are for enctype\n\
    \   aes256-cts-hmac-sha384-192:\n   Plaintext: (empty)\n   Confounder:\n     \
    \ F7 64 E9 FA 15 C2 76 47 8B 2C 7D 0C 4E 5F 58 E4\n   256-bit AES key (Ke):\n\
    \      56 AB 22 BE E6 3D 82 D7 BC 52 27 F6 77 3F 8E A7\n      A5 EB 1C 82 51 60\
    \ C3 83 12 98 0C 44 2E 5C 7E 49\n   192-bit HMAC key (Ki):\n      69 B1 65 14\
    \ E3 CD 8E 56 B8 20 10 D5 C7 30 12 B6\n      22 C4 D0 0F FC 23 ED 1F\n   AES Output:\n\
    \      41 F5 3F A5 BF E7 02 6D 91 FA F9 BE 95 91 95 A0\n   Truncated HMAC Output:\n\
    \      58 70 72 73 A9 6A 40 F0 A0 19 60 62 1A C6 12 74\n      8B 9B BF BE 7E B4\
    \ CE 3C\n   Ciphertext:\n      41 F5 3F A5 BF E7 02 6D 91 FA F9 BE 95 91 95 A0\n\
    \      58 70 72 73 A9 6A 40 F0 A0 19 60 62 1A C6 12 74\n      8B 9B BF BE 7E B4\
    \ CE 3C\n   Plaintext: (length less than block size)\n      00 01 02 03 04 05\n\
    \   Confounder:\n      B8 0D 32 51 C1 F6 47 14 94 25 6F FE 71 2D 0B 9A\n   256-bit\
    \ AES key (Ke):\n      56 AB 22 BE E6 3D 82 D7 BC 52 27 F6 77 3F 8E A7\n     \
    \ A5 EB 1C 82 51 60 C3 83 12 98 0C 44 2E 5C 7E 49\n   192-bit HMAC key (Ki):\n\
    \      69 B1 65 14 E3 CD 8E 56 B8 20 10 D5 C7 30 12 B6\n      22 C4 D0 0F FC 23\
    \ ED 1F\n   AES Output:\n      4E D7 B3 7C 2B CA C8 F7 4F 23 C1 CF 07 E6 2B C7\n\
    \      B7 5F B3 F6 37 B9\n   Truncated HMAC Output:\n      F5 59 C7 F6 64 F6 9E\
    \ AB 7B 60 92 23 75 26 EA 0D\n      1F 61 CB 20 D6 9D 10 F2\n   Ciphertext:\n\
    \      4E D7 B3 7C 2B CA C8 F7 4F 23 C1 CF 07 E6 2B C7\n      B7 5F B3 F6 37 B9\
    \ F5 59 C7 F6 64 F6 9E AB 7B 60\n      92 23 75 26 EA 0D 1F 61 CB 20 D6 9D 10\
    \ F2\n   Plaintext: (length equals block size)\n      00 01 02 03 04 05 06 07\
    \ 08 09 0A 0B 0C 0D 0E 0F\n   Confounder:\n      53 BF 8A 0D 10 52 65 D4 E2 76\
    \ 42 86 24 CE 5E 63\n   256-bit AES key (Ke):\n      56 AB 22 BE E6 3D 82 D7 BC\
    \ 52 27 F6 77 3F 8E A7\n      A5 EB 1C 82 51 60 C3 83 12 98 0C 44 2E 5C 7E 49\n\
    \   192-bit HMAC key (Ki):\n      69 B1 65 14 E3 CD 8E 56 B8 20 10 D5 C7 30 12\
    \ B6\n      22 C4 D0 0F FC 23 ED 1F\n   AES Output:\n      BC 47 FF EC 79 98 EB\
    \ 91 E8 11 5C F8 D1 9D AC 4B\n      BB E2 E1 63 E8 7D D3 7F 49 BE CA 92 02 77\
    \ 64 F6\n   Truncated HMAC Output:\n      8C F5 1F 14 D7 98 C2 27 3F 35 DF 57\
    \ 4D 1F 93 2E\n      40 C4 FF 25 5B 36 A2 66\n   Ciphertext:\n      BC 47 FF EC\
    \ 79 98 EB 91 E8 11 5C F8 D1 9D AC 4B\n      BB E2 E1 63 E8 7D D3 7F 49 BE CA\
    \ 92 02 77 64 F6\n      8C F5 1F 14 D7 98 C2 27 3F 35 DF 57 4D 1F 93 2E\n    \
    \  40 C4 FF 25 5B 36 A2 66\n   Plaintext: (length greater than block size)\n \
    \     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n      10 11 12 13 14\n\
    \   Confounder:\n      76 3E 65 36 7E 86 4F 02 F5 51 53 C7 E3 B5 8A F1\n   256-bit\
    \ AES key (Ke):\n      56 AB 22 BE E6 3D 82 D7 BC 52 27 F6 77 3F 8E A7\n     \
    \ A5 EB 1C 82 51 60 C3 83 12 98 0C 44 2E 5C 7E 49\n   192-bit HMAC key (Ki):\n\
    \      69 B1 65 14 E3 CD 8E 56 B8 20 10 D5 C7 30 12 B6\n      22 C4 D0 0F FC 23\
    \ ED 1F\n   AES Output:\n      40 01 3E 2D F5 8E 87 51 95 7D 28 78 BC D2 D6 FE\n\
    \      10 1C CF D5 56 CB 1E AE 79 DB 3C 3E E8 64 29 F2\n      B2 A6 02 AC 86\n\
    \   Truncated HMAC Output:\n      FE F6 EC B6 47 D6 29 5F AE 07 7A 1F EB 51 75\
    \ 08\n      D2 C1 6B 41 92 E0 1F 62\n   Ciphertext:\n      40 01 3E 2D F5 8E 87\
    \ 51 95 7D 28 78 BC D2 D6 FE\n      10 1C CF D5 56 CB 1E AE 79 DB 3C 3E E8 64\
    \ 29 F2\n      B2 A6 02 AC 86 FE F6 EC B6 47 D6 29 5F AE 07 7A\n      1F EB 51\
    \ 75 08 D2 C1 6B 41 92 E0 1F 62\n   Sample checksums:\n   -----------------\n\
    \   These sample checksums use the above sample key derivation results,\n   including\
    \ use of the same base-key and key usage values.\n   Checksum type: hmac-sha256-128-aes128\n\
    \   128-bit HMAC key (Kc):\n      B3 1A 01 8A 48 F5 47 76 F4 03 E9 A3 96 32 5D\
    \ C3\n   Plaintext:\n      00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n \
    \     10 11 12 13 14\n   Checksum:\n      D7 83 67 18 66 43 D6 7B 41 1C BA 91\
    \ 39 FC 1D EE\n   Checksum type: hmac-sha384-192-aes256\n   192-bit HMAC key (Kc):\n\
    \      EF 57 18 BE 86 CC 84 96 3D 8B BB 50 31 E9 F5 C4\n      BA 41 F2 8F AF 69\
    \ E7 3D\n   Plaintext:\n      00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\
    \      10 11 12 13 14\n   Checksum:\n      45 EE 79 15 67 EE FC A3 7F 4A C1 E0\
    \ 22 2D E8 0D\n      43 C3 BF A0 66 99 67 2A\n   Sample pseudorandom function\
    \ (PRF) invocations:\n   -----------------------------------------------\n   PRF\
    \ input octet-string: \"test\" (0x74657374)\n   enctype aes128-cts-hmac-sha256-128:\n\
    \   input-key value / HMAC-SHA-256 key:\n      37 05 D9 60 80 C1 77 28 A0 E8 00\
    \ EA B6 E0 D2 3C\n   HMAC-SHA-256 input message:\n      00 00 00 01 70 72 66 00\
    \ 74 65 73 74 00 00 01 00\n   PRF output:\n      9D 18 86 16 F6 38 52 FE 86 91\
    \ 5B B8 40 B4 A8 86\n      FF 3E 6B B0 F8 19 B4 9B 89 33 93 D3 93 85 42 95\n \
    \  enctype aes256-cts-hmac-sha384-192:\n   input-key value / HMAC-SHA-384 key:\n\
    \      6D 40 4D 37 FA F7 9F 9D F0 D3 35 68 D3 20 66 98\n      00 EB 48 36 47 2E\
    \ A8 A0 26 D1 6B 71 82 46 0C 52\n   HMAC-SHA-384 input message:\n      00 00 00\
    \ 01 70 72 66 00 74 65 73 74 00 00 01 80\n   PRF output:\n      98 01 F6 9A 36\
    \ 8C 2B F6 75 E5 95 21 E1 77 D9 A0\n      7F 67 EF E1 CF DE 8D 3C 8D 6F 6A 02\
    \ 56 E3 B1 7D\n      B3 C1 B6 2A D1 B8 55 33 60 D1 73 67 EB 15 14 D2\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Kelley Burgin was employed at the National Security Agency\
    \ during\n   much of the work on this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael J. Jenkins\n   National Security Agency\n   Email:\
    \ mjjenki@tycho.ncsc.mil\n   Michael A. Peck\n   The MITRE Corporation\n   Email:\
    \ mpeck@mitre.org\n   Kelley W. Burgin\n   Email: kelley.burgin@gmail.com\n"
