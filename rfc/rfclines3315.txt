Abstract The Dynamic Host Configuration Protocol for IPv6 (DHCP) enables DHCP servers to pass configuration parameters such as IPv6 network addresses to IPv6 nodes.
It offers the capability of automatic allocation of reusable network addresses and additional configuration flexibility.
This protocol is a stateful counterpart to "IPv6 Stateless Address Autoconfiguration" (RFC 2462), and can be used separately or concurrently with the latter to obtain configuration parameters.
This document describes DHCP for IPv6 (DHCP), a client/server protocol that provides managed configuration of devices.
DHCP can provide a device with addresses assigned by a DHCP server and other configuration information, which are carried in options.
DHCP can be extended through the definition of new options to carry configuration information not specified in this document.
DHCP is the "stateful address autoconfiguration protocol" and the "stateful autoconfiguration protocol" referred to in "IPv6 Stateless Address Autoconfiguration" [17].
The operational models and relevant configuration information for DHCPv4 [18][19] and DHCPv6 are sufficiently different that integration between the two services is not included in this document.
If there is sufficient interest and demand, integration can be specified in a document that extends DHCPv6 to carry IPv4 addresses and configuration information.
The remainder of this introduction summarizes DHCP, explaining the message exchange mechanisms and example message flows.
The message flows in sections 1.2 and 1.3 are intended as illustrations of DHCP operation rather than an exhaustive list of all possible client server interactions.
Sections 17, 18, and 19 explain client and server operation in detail.
Protocols and Addressing Clients and servers exchange DHCP messages using UDP [15].
The client uses a link local address or addresses determined through other mechanisms for transmitting and receiving DHCP messages.
DHCP servers receive messages from clients using a reserved, link scoped multicast address.
A DHCP client transmits most messages to this reserved multicast address, so that the client need not be configured with the address or addresses of DHCP servers.
To allow a DHCP client to send a message to a DHCP server that is not attached to the same link, a DHCP relay agent on the client's link will relay messages between the client and server.
The operation of the relay agent is transparent to the client and the discussion of message exchanges in the remainder of this section will omit the description of message relaying by relay agents.
Once the client has determined the address of a server, it may under some circumstances send messages directly to the server using unicast.
Client server Exchanges Involving Two Messages
When a DHCP client does not need to have a DHCP server assign it IP addresses, the client can obtain configuration information such as a list of available DNS servers [20] or NTP servers [21] through a single message and reply exchanged with a DHCP server.
To obtain configuration information the client first sends an Information Request message to the All DHCP Relay Agents and Servers multicast address.
Servers respond with a Reply message containing the configuration information for the client.
This message exchange assumes that the client requires only configuration information and does not require the assignment of any IPv6 addresses.
When a server has IPv6 addresses and other configuration information committed to a client, the client and server may be able to complete the exchange using only two messages, instead of four messages as described in the next section.
In this case, the client sends a Solicit message to the All DHCP Relay Agents and Servers requesting the assignment of addresses and other configuration information.
This message includes an indication that the client is willing to accept an immediate Reply message from the server.
The server that is willing to commit the assignment of addresses to the client immediately responds with a Reply message.
The configuration information and the addresses in the Reply message are then immediately available for use by the client.
Each address assigned to the client has associated preferred and valid lifetimes specified by the server.
To request an extension of the lifetimes assigned to an address, the client sends a Renew message to the server.
The server sends a Reply message to the client with the new lifetimes, allowing the client to continue to use the address without interruption.
Client server Exchanges Involving Four Messages To request the assignment of one or more IPv6 addresses, a client first locates a DHCP server and then requests the assignment of addresses and other configuration information from the server.
The client sends a Solicit message to the All DHCP Relay Agents and Servers address to find available DHCP servers.
Any server that can meet the client's requirements responds with an Advertise message.
The client then chooses one of the servers and sends a Request message to the server asking for confirmed assignment of addresses and other configuration information.
The server responds with a Reply message that contains the confirmed addresses and configuration.
As described in the previous section, the client sends a Renew message to the server to extend the lifetimes associated with its addresses, allowing the client to continue to use those addresses without interruption.
Requirements The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this document, are to be interpreted as described in [1].
This document also makes use of internal conceptual variables to describe protocol behavior and external variables that an implementation must allow system administrators to change.
The specific variable names, how their values change, and how their settings influence protocol behavior are provided to demonstrate protocol behavior.
An implementation is not required to have them in the exact form described here, so long as its external behavior is consistent with that described in this document.
The IPv6 Specification provides the base architecture and design of IPv6.
Related work in IPv6 that would best serve an implementor to study includes the IPv6 Specification [3], the IPv6 Addressing Architecture [5], IPv6 Stateless Address Autoconfiguration [17], IPv6 Neighbor Discovery Processing [13], and Dynamic Updates to DNS [22].
These specifications enable DHCP to build upon the IPv6 work to provide both robust stateful autoconfiguration and autoregistration of DNS Host Names.
The IPv6 Addressing Architecture specification [5] defines the address scope that can be used in an IPv6 implementation, and the various configuration architecture guidelines for network designers of the IPv6 address space.
Two advantages of IPv6 are that support for multicast is required and nodes can create link local addresses during initialization.
The availability of these features means that a client can use its link local address and a well known multicast address to discover and communicate with DHCP servers or relay agents on its link.
IPv6 Stateless Address Autoconfiguration [17] specifies procedures by which a node may autoconfigure addresses based on router advertisements [13], and the use of a valid lifetime to support renumbering of addresses on the Internet.
In addition, the protocol interaction by which a node begins stateless or stateful autoconfiguration is specified.
DHCP is one vehicle to perform stateful autoconfiguration.
Compatibility with stateless address autoconfiguration is a design requirement of DHCP.
IPv6 Neighbor Discovery [13] is the node discovery protocol in IPv6 which replaces and enhances functions of ARP [14].
To understand IPv6 and stateless address autoconfiguration, it is strongly recommended that implementors understand IPv6 Neighbor Discovery.
Dynamic Updates to DNS [22] is a specification that supports the dynamic update of DNS records for both IPv4 and IPv6.
DHCP can use the dynamic updates to DNS to integrate addresses and name space to not only support autoconfiguration, but also autoregistration in IPv6. 4.
Terminology This sections defines terminology specific to IPv6 and DHCP used in this document.
Terminology IPv6 terminology relevant to this specification from the IPv6 Protocol [3], IPv6 Addressing Architecture [5], and IPv6 Stateless Address Autoconfiguration [17] is included below.
An IP layer identifier for an interface or a set of interfaces.
Any node that is not a router.
The terms IPv4 and IPv6 are used only in contexts where it is necessary to avoid ambiguity.
A node's attachment to a link.
Examples are Ethernet (simple or bridged); Token Ring; PPP links, X.25, Frame Relay, or ATM networks; and Internet (or higher) layer "tunnels", such as tunnels over IPv4 or IPv6 itself.
Examples include IEEE 802 addresses for Ethernet or Token Ring network interfaces, and E.164 addresses for ISDN links.
An IPv6 address having a link only scope, indicated by having the prefix (FE80::/10), that can be used to reach neighboring nodes attached to the same link.
Every interface has a link local address.
An identifier for a set of interfaces (typically belonging to different nodes).
A packet sent to a multicast address is delivered to all interfaces identified by that address.
A device that implements IP.
An IP header plus payload.
The initial bits of an address, or a set of IP addresses that share the same initial bits.
The number of bits in a prefix.
A node that forwards IP packets not explicitly addressed to itself.
An identifier for a single interface.
A packet sent to a unicast address is delivered to the interface identified by that address.
DHCP Terminology Terminology specific to DHCP can be found below.
An address is "appropriate to the link" when the address is consistent with the DHCP server's knowledge of the network topology, prefix assignment and address assignment policies.
Configuration information that has been returned to a client through a policy for example
, the information returned to all clients on the same link does not require a binding.
A binding containing information about an IA is indexed by the tuple <DUID, IA type, IAID> (where IA type is the type of address in the IA; for example, temporary).
A binding containing configuration information for a client is indexed by <DUID>.
An element of the configuration information set on the server and delivered to the client using DHCP.
Such parameters may be used to carry information to be used by a node to configure its network subsystem and enable communication on a link or internetwork, for example.
The terms DHCPv4 and DHCPv6 are used only in contexts where it is necessary to avoid ambiguity.
A node that initiates requests on a link to obtain configuration parameters from one or more DHCP servers.
A set of links managed by DHCP and operated by a single administrative entity.
DHCP relay agent (or relay agent)
A node that acts as an intermediary to deliver DHCP messages between clients and servers, and is on the same link as the client.
A node that responds to requests from clients, and may or may not be on the same link as the client(s).
See section 9 for details of the ways in which a DUID may be constructed.
A collection of addresses assigned to a client.
Each IA has an associated IAID.
A client may have more than one IA assigned to it; for example, one for each of its interfaces.
Each IA holds one type of address; for example, an identity association for temporary addresses (IA TA) holds temporary addresses (see "identity association for temporary addresses").
Throughout this document, "IA" is used to refer to an identity association without identifying the type of addresses in the IA.
An identifier for an IA, chosen by the client.
Each IA has an IAID, which is chosen to be unique among all IAIDs for IAs belonging to that client.
Identity association for non temporary addresses (IA NA)
An IA that carries assigned addresses that are not temporary addresses (see "identity association for temporary addresses") Identity association for temporary addresses (IA TA)
An IA that carries temporary addresses
A key supplied to a client by a server used to provide security for Reconfigure messages.
An opaque value used to match responses with replies initiated either by a client or server.
This section describes various program and networking constants used by DHCP.
Multicast Addresses DHCP makes use of the following multicast addresses: All DHCP Relay Agents and Servers (FF02::1:2)
A link scoped multicast address used by a client to communicate with neighboring (i.e., on link) relay agents and servers.
All servers and relay agents are members of this multicast group.
A site scoped multicast address used by a relay agent to communicate with servers, either because the relay agent wants to send messages to all servers or because it does not know the unicast addresses of the servers.
Note that in order for a relay agent to use this address, it must have an address of sufficient scope to be reachable by the servers.
All servers within the site are members of this multicast group.
UDP Ports Clients listen for DHCP messages on UDP port 546.
Servers and relay agents listen for DHCP messages on UDP port 547.
DHCP Message Types DHCP defines the following message types.
More detail on these message types can be found in sections 6 and 7.
Message types not listed here are reserved for future use.
The numeric encoding for each message type is shown in parentheses.
A client sends a Solicit message to locate servers.
A server sends an Advertise message to indicate that it is available for DHCP service, in response to a Solicit message received from a client.
A client sends a Request message to request configuration parameters, including IP addresses, from a specific server.
A client sends a Confirm message to any available server to determine whether the addresses it was assigned are still appropriate to the link to which the client is connected.
A client sends a Renew message to the server that originally provided the client's addresses and configuration parameters to extend the lifetimes on the addresses assigned to the client and to update other configuration parameters.
A client sends a Rebind message to any available server to extend the lifetimes on the addresses assigned to the client and to update other configuration parameters; this message is sent after a client receives no response to a Renew message.
A server sends a Reply message containing assigned addresses and configuration parameters in response to a Solicit, Request, Renew, Rebind message received from a client.
A server sends a Reply message containing configuration parameters in response to an Information request message.
A server sends a Reply message in response to a Confirm message confirming or denying that the addresses assigned to the client are appropriate to the link to which the client is connected.
A server sends a Reply message to acknowledge receipt of a Release or Decline message.
A client sends a Release message to the server that assigned addresses to the client to indicate that the client will no longer use one or more of the assigned addresses.
A client sends a Decline message to a server to indicate that the client has determined that one or more addresses assigned by the server are already in use on the link to which the client is connected.
A server sends a Reconfigure message to a client to inform the client that the server has new or updated configuration parameters, and that the client is to initiate a Renew/Reply or Information request/Reply transaction with the server in order to receive the updated information.
A client sends an Information request message to a server to request configuration parameters without the assignment of any IP addresses to the client.
A relay agent sends a Relay forward message to relay messages to servers, either directly or through another relay agent.
The received message, either a client message or a Relay forward message from another relay agent, is encapsulated in an option in the Relay forward message.
A server sends a Relay reply message to a relay agent containing a message that the relay agent delivers to a client.
The Relay reply message may be relayed by other relay agents for delivery to the destination relay agent.
The server encapsulates the client message as an option in the Relay reply message, which the relay agent extracts and relays to the client.
Status Codes DHCPv6 uses status codes to communicate the success or failure of operations requested in messages from clients and servers, and to provide additional information about the specific cause of the failure of a message.
The specific status codes are defined in section 24.4.
This section presents a table of values used to describe the message transmission behavior of clients and servers.
1 sec   Initial Solicit timeout
120 secs  Max Solicit timeout value REQ TIMEOUT
1 sec   Initial Request timeout REQ MAX RT
1 sec   Max delay of first Confirm CNF
Max Confirm timeout CNF MAX RD
Max Renew timeout value REB TIMEOUT
10 secs  Initial Rebind timeout
2 secs  Initial Reconfigure timeout REC
The value 0xffffffff is taken to mean "infinity" when used as a lifetime (as in RFC2461 [17]) or a value for T1 or T2.
All DHCP messages sent between clients and servers share an identical fixed format header and a variable format area for options.
All values in the message header and in options are in network byte order.
Options are stored serially in the options field, with no padding between the options.
Options are byte aligned but are not aligned in any other way such as on 2 or 4 byte boundaries.
The following diagram illustrates the format of DHCP messages sent between clients and servers:
The transaction ID for this message exchange.
Relay Agent/Server Message Formats Relay agents exchange messages with servers to relay messages between clients and servers that are not connected to the same link.
All values in the message header and in options are in network byte order.
Options are stored serially in the options field, with no padding between the options.
Options are byte aligned but are not aligned in any other way such as on 2 or 4 byte boundaries.
The following sections describe the use of the Relay Agent message header.
The following table defines the use of message fields in a Relay  forward message.
A global or site local address that will be used by the server to identify the link on which the client is located.
The address of the client or relay agent from which the message to be relayed was received.
The following table defines the use of message fields in a Relay reply message.
Copied from the Relay forward
Representation and Use of Domain Names
So that domain names may be encoded uniformly, a domain name or a list of domain names is encoded using the technique described in section 3.1 of RFC 1035 [10].
A domain name, or list of domain names, in DHCP MUST NOT be stored in compressed form, as described in section 4.1.4 of RFC 1035.
Each DHCP client and server has a DUID.
DHCP servers use DUIDs to identify clients for the selection of configuration parameters and in the association of IAs with clients.
DHCP clients use DUIDs to identify a server in messages where a server needs to be identified.
See sections 22.2 and 22.3 for the representation of a DUID in a DHCP message.
Clients and servers MUST treat DUIDs as opaque values and MUST only compare DUIDs for equality.
Clients and servers MUST NOT in any other way interpret DUIDs.
Clients and servers MUST NOT restrict DUIDs to the types defined in this document, as additional DUID types may be defined in the future.
The DUID is carried in an option because it may be variable length and because it is not required in all DHCP messages.
The DUID is designed to be unique across all DHCP clients and servers, and stable for any specific client or server that is, the DUID used by a client or server SHOULD NOT change over time if at all possible; for example, a device's DUID should not change as a result of a change in the device's network hardware.
The motivation for having more than one type of DUID is that the DUID must be globally unique, and must also be easy to generate.
The sort of globally unique identifier that is easy to generate for any given device can differ quite widely.
Also, some devices may not contain any persistent storage.
Retaining a generated DUID in such a device is not possible, so the DUID scheme must accommodate such devices.
A DUID consists of a two octet type code represented in network byte order, followed by a variable number of octets that make up the actual identifier.
A DUID can be no more than 128 octets long (not including the type code).
Based on Link layer Address Plus Time
This type of DUID consists of a two octet type field containing the value 1, a two octet hardware type code, four octets containing a time value, followed by link layer address of any one network interface that is connected to the DHCP device at the time that the DUID is generated.
The time value is the time that the DUID is generated represented in seconds since midnight (UTC), January 1, 2000, modulo 2^32.
The hardware type MUST be a valid hardware type assigned by the IANA as described in RFC 826 [14].
Both the time and the hardware type are stored in network byte order.
The link layer address is stored in canonical form, as described in RFC 2464 [2].
The choice of network interface can be completely arbitrary, as long as that interface provides a globally unique link layer address for the link type, and the same DUID LLT SHOULD be used in configuring all network interfaces connected to the device, regardless of which interface's link layer address was used to generate the DUID LLT.
Clients and servers using this type of DUID MUST store the DUID LLT in stable storage, and MUST continue to use this DUID LLT even if the network interface used to generate the DUID LLT is removed.
Clients and servers that do not have any stable storage MUST NOT use this type of DUID.
Clients and servers that use this DUID SHOULD attempt to configure the time prior to generating the DUID, if that is possible, and MUST use some sort of time source (for example, a real time clock) in generating the DUID, even if that time source could not be configured prior to generating the DUID.
The use of a time source makes it unlikely that two identical DUID LLTs will be generated if the network interface is removed from the client and another client then uses the same network interface to generate a DUID LLT.
A collision between two DUID LLTs is very unlikely even if the clocks have not been configured prior to generating the DUID.
This method of DUID generation is recommended for all general purpose computing devices such as desktop computers and laptop computers, and also for devices such as printers, routers, and so on, that contain some form of writable non volatile storage.
Despite our best efforts, it is possible that this algorithm for generating a DUID could result in a client identifier collision.
A DHCP client that generates a DUID LLT using this mechanism MUST provide an administrative interface that replaces the existing DUID with a newly generated DUID LLT.
DUID Assigned by Vendor Based on Enterprise Number
This form of DUID is assigned by the vendor to the device.
It consists of the vendor's registered Private Enterprise Number as maintained by IANA [6] followed by a unique identifier assigned by the vendor.
The source of the identifier is left up to the vendor defining it, but each identifier part of each DUID EN MUST be unique to the device that is using it, and MUST be assigned to the device at the time it is manufactured and stored in some form of non volatile storage.
The generated DUID SHOULD be recorded in non erasable storage.
The enterprise number is the vendor's registered Private Enterprise Number as maintained by IANA [6].
The enterprise number is stored as an unsigned 32 bit number.
This example includes the two octet type of 2, the Enterprise Number (9), followed by eight octets of identifier data (0x0CC084D303000912).
DUID Based on Link layer Address [DUID LL]
This type of DUID consists of two octets containing the DUID type 3, a two octet network hardware type code, followed by the link layer address of any one network interface that is permanently connected to the client or server device.
For example, a host that has a network interface implemented in a chip that is unlikely to be removed and used elsewhere could use a DUID LL.
The hardware type MUST be a valid hardware type assigned by the IANA, as described in RFC 826 [14].
The hardware type is stored in network byte order.
The link layer address is stored in canonical form, as described in RFC 2464 [2].
The following diagram illustrates the format of a DUID LL:
The choice of network interface can be completely arbitrary, as long as that interface provides a unique link layer address and is permanently attached to the device on which the DUID LL is being generated.
The same DUID LL SHOULD be used in configuring all network interfaces connected to the device, regardless of which interface's link layer address was used to generate the DUID.
DUID LL is recommended for devices that have a permanently connected network interface with a link layer address, and do not have nonvolatile, writable stable storage.
DUID LL MUST NOT be used by DHCP clients or servers that cannot tell whether or not a network interface is permanently attached to the device on which the DHCP client is running.
An "identity association" (IA) is a construct through which a server and a client can identify, group, and manage a set of related IPv6 addresses.
Each IA consists of an IAID and associated configuration information.
A client must associate at least one distinct IA with each of its network interfaces for which it is to request the assignment of IPv6 addresses from a DHCP server.
The client uses the IAs assigned to an interface to obtain configuration information from a server for that interface.
Each IA must be associated with exactly one interface.
The IAID uniquely identifies the IA and must be chosen to be unique among the IAIDs on the client.
The IAID is chosen by the client.
For any given use of an IA by the client, the IAID for that IA MUST be consistent across restarts of the DHCP client.
The client may maintain consistency either by storing the IAID in non volatile storage or by using an algorithm that will consistently produce the same IAID as long as the configuration of the client has not changed.
There may be no way for a client to maintain consistency of the IAIDs if it does not have non volatile storage and the client's hardware configuration changes.
The configuration information in an IA consists of one or more IPv6 addresses along with the times T1 and T2 for the IA.
See section 22.4 for the representation of an IA in a DHCP message.
Each address in an IA has a preferred lifetime and a valid lifetime, as defined in RFC 2462 [17].
The lifetimes are transmitted from the DHCP server to the client in the IA option.
The lifetimes apply to the use of IPv6 addresses, as described in section 5.5.4 of RFC 2462.
Selecting Addresses for Assignment to an IA
A server selects addresses to be assigned to an IA according to the address assignment policies determined by the server administrator and the specific information the server determines about the client from some combination of the following sources:
The link to which the client is attached.
The server determines the link as follows:
If the server receives the message directly from the client and the source address in the IP datagram in which the message was received is a link local address, then the client is on the same link to which the interface over which the message was received is attached.
If the server receives the message from a forwarding relay agent, then the client is on the same link as the one to which the interface, identified by the link address field in the message from the relay agent, is attached.
If the server receives the message directly from the client and the source address in the IP datagram in which the message was received is not a link local address, then the client is on the link identified by the source address in the IP datagram (note that this situation can occur only if the server has enabled the use of unicast message delivery by the client and the client has sent a message for which unicast delivery is allowed).
The DUID supplied by the client.
Other information in options supplied by the client.
Other information in options supplied by the relay agent.
Any address assigned by a server that is based on an EUI 64 identifier MUST include an interface identifier with the "u" (universal/local) and "g" (individual/group) bits of the interface identifier set appropriately, as indicated in section 2.5.1 of RFC 2373 [5].
A server MUST NOT assign an address that is otherwise reserved for some other purpose.
For example, a server MUST NOT assign reserved anycast addresses, as defined in RFC 2526, from any subnet.
A client may request the assignment of temporary addresses (see RFC 3041 [12] for the definition of temporary addresses).
handling of address assignment is no different for temporary addresses.
DHCPv6 says nothing about details of temporary addresses like lifetimes, how clients use temporary addresses, rules for generating successive temporary addresses, etc.
Clients ask for temporary addresses and servers assign them.
Temporary addresses are carried in the Identity Association for Temporary Addresses (IA TA) option (see section 22.5).
Each IA TA option contains at most one temporary address for each of the prefixes on the link to which the client is attached.
The IAID number space for the IA TA option IAID number space is separate from the IA NA option IAID number space.
The server MAY update the DNS for a temporary address, as described in section 4 of RFC 3041.
Transmission of Messages by a Client
Unless otherwise specified in this document, or in a document that describes how IPv6 is carried over a specific type of link (for link types that do not support multicast), a client sends DHCP messages to the All DHCP Relay Agents and Servers.
A client uses multicast to reach all servers or an individual server.
An individual server is indicated by specifying that server's DUID in a Server Identifier option (see section 22.3) in the client's message (all servers will receive this message but only the indicated server will respond).
All servers are indicated by not supplying this option.
A client may send some messages directly to a server using unicast, as described in section 22.12.
Reliability of Client Initiated Message Exchanges DHCP clients are responsible for reliable delivery of messages in the client initiated message exchanges described in sections 17 and 18.
If a DHCP client fails to receive an expected response from a server, the client must retransmit its message.
This section describes the retransmission strategy to be used by clients in client initiated message exchanges.
Note that the procedure described in this section is slightly modified when used with the Solicit message.
The modified procedure is described in section 17.1.2.
The client begins the message exchange by transmitting a message to the server.
The message exchange terminates when either the client successfully receives the appropriate response or responses from a server or servers, or when the message exchange is considered to have failed according to the retransmission mechanism described below.
The client retransmission behavior is controlled and described by the following variables:
Randomization factor With each message transmission or retransmission, the client sets RT according to the rules given below.
If RT expires before the message exchange terminates, the client recomputes RT and retransmits the message.
Each of the computations of a new RT include a randomization factor (RAND), which is a random number chosen with a uniform distribution between  0.1 and  0.1.
The randomization factor is included to minimize synchronization of messages transmitted by DHCP clients.
The algorithm for choosing a random number does not need to be cryptographically sound.
The algorithm SHOULD produce a different sequence of random numbers from each invocation of the DHCP client.
RT for the first message transmission is based on IRT:
RT   IRT   RAND IRT RT for each subsequent message transmission is based on the previous value of RT: RT   2 RTprev   RAND RTprev MRT specifies an upper bound on the value of RT (disregarding the randomization added by the use of RAND).
If MRT has a value of 0, there is no upper limit on the value of RT.
Otherwise: if (RT > MRT)
RAND MRT MRC specifies an upper bound on the number of times a client may retransmit a message.
Unless MRC is zero, the message exchange fails once the client has transmitted the message MRC times.
MRD specifies an upper bound on the length of time a client may retransmit a message.
Unless MRD is zero, the message exchange fails once MRD seconds have elapsed since the client first transmitted the message.
If both MRC and MRD are non zero, the message exchange fails whenever either of the conditions specified in the previous two paragraphs are met.
If both MRC and MRD are zero, the client continues to transmit the message until it receives a response.
Message Validation Clients and servers SHOULD discard any messages that contain options that are not allowed to appear in the received message.
For example, an IA option is not allowed to appear in an Information request message.
Clients and servers MAY choose to extract information from such a message if the information is of use to the recipient.
A server MUST discard any Solicit, Confirm, Rebind or Information request messages it receives with a unicast destination address.
Message validation based on DHCP authentication is discussed in section 21.4.2.
If a server receives a message that contains options it should not contain (such as an Information request message with an IA option), is missing options that it should contain, or is otherwise not valid, it MAY send a Reply (or Advertise as appropriate) with a Server Identifier option, a Client Identifier option if one was included in the message and a Status Code option with status UnSpecFail. 15.1.
The "transaction id" field holds a value used by clients and servers to synchronize server responses to client messages.
A client SHOULD generate a random number that cannot easily be guessed or predicted to use as the transaction ID for each new message it sends.
Note that if a client generates easily predictable transaction identifiers, it may become more vulnerable to certain kinds of attacks from off path intruders.
A client MUST leave the transaction ID unchanged in retransmissions of a message.
Solicit Message Clients MUST discard any received Solicit messages.
Servers MUST discard any Solicit messages that do not include a Client Identifier option or that do include a Server Identifier option.
Advertise Message Clients MUST discard any received Advertise messages that meet any of the following conditions:
the message does not include a Server Identifier option.
the message does not include a Client Identifier option.
the contents of the Client Identifier option does not match the client's DUID.
the "transaction id" field value does not match the value the client used in its Solicit message.
Servers and relay agents MUST discard any received Advertise messages.
Request Message Clients MUST discard any received Request messages.
Servers MUST discard any received Request message that meet any of the following conditions:
the message does not include a Server Identifier option.
the contents of the Server Identifier option do not match the server's DUID.
the message does not include a Client Identifier option.
Confirm Message Clients MUST discard any received Confirm messages.
Servers MUST discard any received Confirm messages that do not include a Client Identifier option or that do include a Server Identifier option.
Renew Message Clients MUST discard any received Renew messages.
Servers MUST discard any received Renew message that meets any of the following conditions:
the message does not include a Server Identifier option.
the contents of the Server Identifier option does not match the server's identifier.
the message does not include a Client Identifier option.
Rebind Message Clients MUST discard any received Rebind messages.
Servers MUST discard any received Rebind messages that do not include a Client Identifier option or that do include a Server Identifier option.
Decline Messages Clients MUST discard any received Decline messages.
Servers MUST discard any received Decline message that meets any of the following conditions:
the message does not include a Server Identifier option.
the contents of the Server Identifier option does not match the server's identifier.
the message does not include a Client Identifier option.
Release Message Clients MUST discard any received Release messages.
Servers MUST discard any received Release message that meets any of the following conditions:
the message does not include a Server Identifier option.
the contents of the Server Identifier option does not match the server's identifier.
the message does not include a Client Identifier option.
Reply Message Clients MUST discard any received Reply message that meets any of the following conditions:
the message does not include a Server Identifier option.
the "transaction id" field in the message does not match the value used in the original message.
If the client included a Client Identifier option in the original message, the Reply message MUST include a Client Identifier option and the contents of the Client Identifier option MUST match the DUID of the client; OR, if the client did not include a Client Identifier option in the original message, the Reply message MUST NOT include a Client Identifier option.
Servers and relay agents MUST discard any received Reply messages.
Reconfigure Message Servers and relay agents MUST discard any received Reconfigure messages.
Clients MUST discard any Reconfigure messages that meets any of the following conditions:  the message was not unicast to the client.
the message does not include a Server Identifier option.
the message does not include a Client Identifier option that contains the client's DUID.
the message does not contain a Reconfigure Message option and the msg type must be a valid value.
the message includes any IA options and the msg type in the Reconfigure Message option is INFORMATION REQUEST.
the message does not include DHCP authentication:
the message does not contain an authentication option.
the message does not pass the authentication validation performed by the client.
Information request Message Clients MUST discard any received Information request messages.
Servers MUST discard any received Information request message that meets any of the following conditions:
The message includes a Server Identifier option and the DUID in the option does not match the server's DUID.
The message includes an IA option.
Relay forward Message Clients MUST discard any received Relay forward messages.
Relay reply Message Clients and servers MUST discard any received Relay reply messages.
Client Source Address and Interface Selection
When a client sends a DHCP message to the All DHCP Relay Agents and Servers address, it SHOULD send the message through the interface for which configuration information is being requested.
However, the client MAY send the message through another interface attached to the same link, if and only if the client is certain the two interfaces are attached to the same link.
The client MUST use a link local address assigned to the interface for which it is requesting configuration information as the source address in the header of the IP datagram.
When a client sends a DHCP message directly to a server using unicast (after receiving the Server Unicast option from that server), the source address in the header of the IP datagram MUST be an address assigned to the interface for which the client is interested in obtaining configuration and which is suitable for use by the server in responding to the client.
This section describes how a client locates servers that will assign addresses to IAs belonging to the client.
The client is responsible for creating IAs and requesting that a server assign IPv6 addresses to the IA.
The client first creates an IA and assigns it an IAID.
The client then transmits a Solicit message containing an IA option describing the IA.
Servers that can assign addresses to the IA respond to the client with an Advertise message.
The client then initiates a configuration exchange as described in section 18.
If the client will accept a Reply message with committed address assignments and other resources in response to the Solicit message, the client includes a Rapid Commit option (see section 22.14) in the Solicit message.
A client uses the Solicit message to discover DHCP servers configured to assign addresses or return other configuration parameters on the link to which the client is attached.
The client sets the "msg type" field to SOLICIT.
The client generates a transaction ID and inserts this value in the "transaction id" field.
The client MUST include a Client Identifier option to identify itself to the server.
The client includes IA options for any IAs to which it wants the server to assign addresses.
The client MAY include addresses in the IAs as a hint to the server about addresses for which the client has a preference.
The client MUST NOT include any other options in the Solicit message, except as specifically allowed in the definition of individual options.
The client uses IA NA options to request the assignment of non  temporary addresses and uses IA TA options to request the assignment of temporary addresses.
Either IA NA or IA TA options, or a combination of both, can be included in DHCP messages.
The client SHOULD include an Option Request option (see section 22.7) to indicate the options the client is interested in receiving.
The client MAY additionally include instances of those options that are identified in the Option Request option, with data values as hints to the server about parameter values the client would like to have returned.
The client includes a Reconfigure Accept option (see section 22.20) if the client is willing to accept Reconfigure messages from the server.
Transmission of Solicit Messages The first Solicit message from the client on the interface MUST be delayed by a random amount of time between 0 and SOL MAX DELAY.
In the case of a Solicit message transmitted when DHCP is initiated by IPv6 Neighbor Discovery, the delay gives the amount of time to wait after IPv6 Neighbor Discovery causes the client to invoke the stateful address autoconfiguration protocol (see section 5.5.3 of RFC 2462).
This random delay desynchronizes clients which start at the same time (for example, after a power outage).
The client transmits the message according to section 14, using the following parameters:
SOL MAX RT MRC   0 MRD   0
If the client has included a Rapid Commit option in its Solicit message, the client terminates the waiting process as soon as a Reply message with a Rapid Commit option is received.
If the client is waiting for an Advertise message, the mechanism in section 14 is modified as follows for use in the transmission of Solicit messages.
The message exchange is not terminated by the receipt of an Advertise before the first RT has elapsed.
Rather, the client collects Advertise messages until the first RT has elapsed.
Also, the first RT MUST be selected to be strictly greater than IRT by choosing RAND to be strictly greater than 0.
A client MUST collect Advertise messages for the first RT seconds, unless it receives an Advertise message with a preference value of 255.
The preference value is carried in the Preference option (section 22.8).
Any Advertise that does not include a Preference option is considered to have a preference value of 0.
If the client receives an Advertise message that includes a Preference option with a preference value of 255, the client immediately begins a client  initiated message exchange (as described in section 18) by sending a Request message to the server from which the Advertise message was received.
If the client receives an Advertise message that does not include a Preference option with a preference value of 255, the client continues to wait until the first RT elapses.
If the first RT elapses and the client has received an Advertise message, the client SHOULD continue with a client initiated message exchange by sending a Request message.
If the client does not receive any Advertise messages before the first RT has elapsed, it begins the retransmission mechanism described in section 14.
The client terminates the retransmission process as soon as it receives any Advertise message, and the client acts on the received Advertise message without waiting for any additional Advertise messages.
A DHCP client SHOULD choose MRC and MRD to be 0.
If the DHCP client is configured with either MRC or MRD set to a value other than 0, it MUST stop trying to configure the interface if the message exchange fails.
After the DHCP client stops trying to configure the interface, it SHOULD restart the reconfiguration process after some external event, such as user input, system restart, or when the client is attached to a new link.
The client MUST ignore any Advertise message that includes a Status Code option containing the value NoAddrsAvail, with the exception that the client MAY display the associated status message to the user.
Upon receipt of one or more valid Advertise messages, the client selects one or more Advertise messages based upon the following criteria.
Those Advertise messages with the highest server preference value are preferred over all other Advertise messages.
Within a group of Advertise messages with the same server preference value, a client MAY select those servers whose Advertise messages advertise information of interest to the client.
For example, the client may choose a server that returned an advertisement with configuration options of interest to the client.
The client MAY choose a less preferred server if that server has a better set of advertised parameters, such as the available addresses advertised in IAs.
Once a client has selected Advertise message(s), the client will typically store information about each server, such as server preference value, addresses advertised, when the advertisement was received, and so on.
If the client needs to select an alternate server in the case that a chosen server does not respond, the client chooses the next server according to the criteria given above.
If the client includes a Rapid Commit option in the Solicit message, it will expect a Reply message that includes a Rapid Commit option in response.
The client discards any Reply messages it receives that do not include a Rapid Commit option.
If the client receives a valid Reply message that includes a Rapid Commit option, it processes the message as described in section 18.1.8.
If it does not receive such a Reply message and does receive a valid Advertise message, the client processes the Advertise message as described in section 17.1.3.
If the client subsequently receives a valid Reply message that includes a Rapid Commit option, it either: processes the Reply message as described in section 18.1.8, and discards any Reply messages received in response to the Request message, or processes any Reply messages received in response to the Request message and discards the Reply message that includes the Rapid Commit option.
A server sends an Advertise message in response to valid Solicit messages it receives to announce the availability of the server to the client.
The server determines the information about the client and its location as described in section 11 and checks its administrative policy about responding to the client.
If the server is not permitted to respond to the client, the server discards the Solicit message.
For example, if the administrative policy for the server is that it may only respond to a client that is willing to accept a Reconfigure message, if the client indicates with a Reconfigure Accept option in the Solicit message that it will not accept a Reconfigure message, the servers discard the Solicit message.
If the client has included a Rapid Commit option in the Solicit message and the server has been configured to respond with committed address assignments and other resources, the server responds to the Solicit with a Reply message as described in section 17.2.3.
Otherwise, the server ignores the Rapid Commit option and processes the remainder of the message as if no Rapid Commit option were present.
Creation and Transmission of Advertise Messages
The server sets the "msg type" field to ADVERTISE and copies the contents of the transaction
id field from the Solicit message received from the client to the Advertise message.
The server includes its server identifier in a Server Identifier option and copies
the Client Identifier from the Solicit message into the Advertise message.
The server MAY add a Preference option to carry the preference value for the Advertise message.
The server implementation SHOULD allow the setting of a server preference value by the administrator.
The server preference value MUST default to zero unless otherwise configured by the server administrator.
The server includes a Reconfigure Accept option if the server wants to require that the client accept Reconfigure messages.
The server includes options the server will return to the client in a subsequent Reply message.
The information in these options may be used by the client in the selection of a server if the client receives more than one Advertise message.
If the client has included an Option Request option in the Solicit message, the server includes options in the Advertise message containing configuration parameters for all of the options identified in the Option Request option that the server has been configured to return to the client.
The server MAY return additional options to the client if it has been configured to do so.
The server must be aware of the recommendations on packet sizes and the use of fragmentation in section 5 of RFC 2460.
If the Solicit message from the client included one or more IA options, the server MUST include IA options in the Advertise message containing any addresses that would be assigned to IAs contained in the Solicit message from the client.
If the client has included addresses in the IAs in the Solicit message, the server uses those addresses as hints about the addresses the client would like to receive.
If the server will not assign any addresses to any IAs in a subsequent Request from the client, the server MUST send an Advertise message to the client that includes only a Status Code option with code NoAddrsAvail and a status message for the user, a Server Identifier option with the server's DUID, and a Client Identifier option with the client's DUID.
If the Solicit message was received directly by the server, the server unicasts the Advertise message directly to the client using the address in the source address field from the IP datagram in which the Solicit message was received.
The Advertise message MUST be unicast on the link from which the Solicit message was received.
If the Solicit message was received in a Relay forward message, the server constructs a Relay reply message with the Advertise message in the payload of a "relay message" option.
If the Relay forward messages included an Interface id option, the server copies that option to the Relay reply message.
The server unicasts the Relay reply message directly to the relay agent using the address in the source address field from the IP datagram in which the Relay  forward message was received.
Creation and Transmission of Reply Messages
The server MUST commit the assignment of any addresses or other configuration information message before sending a Reply message to a client in response to a Solicit message.
When using the Solicit Reply message exchange, the server commits the assignment of any addresses before sending the Reply message.
The client can assume it has been assigned the addresses in the Reply message and does not need to send a Request message for those addresses.
Typically, servers that are configured to use the Solicit Reply message exchange will be deployed so that only one server will respond to a Solicit message.
If more than one server responds, the client will only use the addresses from one of the servers, while the addresses from the other servers will be committed to the client but not used by the client.
The server includes a Rapid Commit option in the Reply message to indicate that the Reply is in response to a Solicit message.
The server includes a Reconfigure Accept option if the server wants to require that the client accept Reconfigure messages.
The server produces the Reply message as though it had received a Request message, as described in section 18.2.1.
The server transmits the Reply message as described in section 18.2.8.
Configuration Exchange A client initiates a message exchange with a server or servers to acquire or update configuration information of interest.
The client may initiate the configuration exchange as part of the operating system configuration process, when requested to do so by the application layer, when required by Stateless Address Autoconfiguration or as required to extend the lifetime of an address (Renew and Rebind messages).
A client uses Request, Renew, Rebind, Release and Decline messages during the normal life cycle of addresses.
It uses Confirm to validate addresses when it may have moved to a new link.
It uses Information Request messages when it needs configuration information but no addresses.
If the client has a source address of sufficient scope that can be used by the server as a return address, and the client has received a Server Unicast option (section 22.12) from the server, the client SHOULD unicast any Request, Renew, Release and Decline messages to the server.
Use of unicast may avoid delays due to the relaying of messages by relay agents, as well as avoid overhead and duplicate responses by servers due to the delivery of client messages to multiple servers.
Requiring the client to relay all DHCP messages through a relay agent enables the inclusion of relay agent options in all messages sent by the client.
The server should enable the use of unicast only when relay agent options will not be used.
Creation and Transmission of Request Messages
The client uses a Request message to populate IAs with addresses and obtain other configuration information.
The client includes one or more IA options in the Request message.
The server then returns addresses and other information about the IAs to the client in IA options in a Reply message.
The client generates a transaction ID and inserts this value in the "transaction id" field.
The client places the identifier of the destination server in a Server Identifier option.
The client MUST include a Client Identifier option to identify itself to the server.
The client adds any other appropriate options, including one or more IA options (if the client is requesting that the server assign it some network addresses).
The client MUST include an Option Request option (see section 22.7) to indicate the options the client is interested in receiving.
The client MAY include options with data values as hints to the server about parameter values the client would like to have returned.
The client includes a Reconfigure Accept option (see section 22.20) indicating whether or not the client is willing to accept Reconfigure messages from the server.
The client transmits the message according to section 14, using the following parameters: IRT   REQ TIMEOUT MRT   REQ MAX RT MRC   REQ MAX RC MRD   0
If the message exchange fails, the client takes an action based on the client's local policy.
Examples of actions the client might take include:
Select another server from a list of servers known to the client; for example, servers that responded with an Advertise message.
Initiate the server discovery process described in section 17.
Terminate the configuration process and report failure.
Creation and Transmission of Confirm Messages
Whenever a client may have moved to a new link, the prefixes from the addresses assigned to the interfaces on that link may no longer be appropriate for the link to which the client is attached.
Examples of times when a client may have moved to a new link include:
The client is physically connected to a wired connection.
The client returns from sleep mode.
The client using a wireless technology changes access points.
In any situation when a client may have moved to a new link, the client MUST initiate a Confirm/Reply message exchange.
The client includes any IAs assigned to the interface that may have moved to a new link, along with the addresses associated with those IAs, in its Confirm message.
Any responding servers will indicate whether those addresses are appropriate for the link to which the client is attached with the status in the Reply message it returns to the client.
The client sets the "msg type" field to CONFIRM.
The client generates a transaction ID and inserts this value in the "transaction id" field.
The client MUST include a Client Identifier option to identify itself to the server.
The client includes IA options for all of the IAs assigned to the interface for which the Confirm message is being sent.
The IA options include all of the addresses the client currently has associated with those IAs.
The client SHOULD set the T1 and T2 fields in any IA NA options, and the preferred lifetime and valid lifetime fields in the IA Address options to 0, as the server will ignore these fields.
The first Confirm message from the client on the interface MUST be delayed by a random amount of time between 0 and CNF MAX DELAY.
The client transmits the message according to section 14, using the following parameters:
CNF MAX RT MRC   0
If the client receives no responses before the message transmission process terminates, as described in section 14, the client SHOULD continue to use any IP addresses, using the last known lifetimes for those addresses, and SHOULD continue to use any other previously obtained configuration parameters.
Creation and Transmission of Renew Messages To extend the valid and preferred lifetimes for the addresses associated with an IA, the client sends a Renew message to the server from which the client obtained the addresses in the IA containing an IA option for the IA.
The client includes IA Address options in the IA option for the addresses associated with the IA.
The server determines new lifetimes for the addresses in the IA according to the administrative configuration of the server.
The server may also add new addresses to the IA.
The server may remove addresses from the IA by setting the preferred and valid lifetimes of those addresses to zero.
The server controls the time at which the client contacts the server to extend the lifetimes on assigned addresses through the T1 and T2 parameters assigned to an IA.
At time T1 for an IA, the client initiates a Renew/Reply message exchange to extend the lifetimes on any addresses in the IA.
The client includes an IA option with all addresses currently assigned to the IA in its Renew message.
If T1 or T2 is set to 0 by the server (for an IA NA) or there are no T1 or T2 times (for an IA TA), the client may send a Renew or Rebind message, respectively, at the client's discretion.
The client sets the "msg type" field to RENEW.
The client generates a transaction ID and inserts this value in the "transaction id" field.
The client places the identifier of the destination server in a Server Identifier option.
The client MUST include a Client Identifier option to identify itself to the server.
The client adds any appropriate options, including one or more IA options.
The client MUST include the list of addresses the client currently has associated with the IAs in the Renew message.
The client MUST include an Option Request option (see section 22.7) to indicate the options the client is interested in receiving.
The client MAY include options with data values as hints to the server about parameter values the client would like to have returned.
The client transmits the message according to section 14, using the following parameters:
REN MAX RT MRC   0 MRD
Remaining time until T2 The message exchange is terminated when time T2 is reached (see section 18.1.4), at which time the client begins a Rebind message exchange.
Creation and Transmission of Rebind Messages
At time T2 for an IA (which will only be reached if the server to which the Renew message was sent at time T1 has not responded), the client initiates a Rebind/Reply message exchange with any available server.
The client includes an IA option with all addresses currently assigned to the IA in its Rebind message.
The client sets the "msg type" field to REBIND.
The client generates a transaction ID and inserts this value in the "transaction id" field.
The client MUST include a Client Identifier option to identify itself to the server.
The client adds any appropriate options, including one or more IA options.
The client MUST include the list of addresses the client currently has associated with the IAs in the Rebind message.
The client MUST include an Option Request option (see section 22.7) to indicate the options the client is interested in receiving.
The client MAY include options with data values as hints to the server about parameter values the client would like to have returned.
The client transmits the message according to section 14, using the following parameters:
REB MAX RT MRC   0 MRD
Remaining time until valid lifetimes of all addresses have expired The message exchange is terminated when the valid lifetimes of all the addresses assigned to the IA expire (see section 10), at which time the client has several alternative actions to choose from; for example:  The client may choose to use a Solicit message to locate a new DHCP server and send a Request for the expired IA to the new server.
The client may have other addresses in other IAs, so the client may choose to discard the expired IA and use the addresses in the other IAs.
Creation and Transmission of Information request Messages
The client uses an Information request message to obtain configuration information without having addresses assigned to it.
The client sets the "msg type" field to INFORMATION REQUEST.
The client generates a transaction ID and inserts this value in the "transaction id" field.
The client SHOULD include a Client Identifier option to identify itself to the server.
If the client does not include a Client Identifier option, the server will not be able to return any client  specific options to the client, or the server may choose not to respond to the message at all.
The client MUST include a Client Identifier option if the Information Request message will be authenticated.
The client MUST include an Option Request option (see section 22.7) to indicate the options the client is interested in receiving.
The client MAY include options with data values as hints to the server about parameter values the client would like to have returned.
The first Information request message from the client on the interface MUST be delayed by a random amount of time between 0 and INF MAX DELAY.
The client transmits the message according to section 14, using the following parameters:
INF MAX RT MRC   0 MRD   0 18.1.6.
Creation and Transmission of Release Messages To release one or more addresses, a client sends a Release message to the server.
The client sets the "msg type" field to RELEASE.
The client generates a transaction ID and places this value in the "transaction id" field.
The client places the identifier of the server that allocated the address(es) in a Server Identifier option.
The client MUST include a Client Identifier option to identify itself to the server.
The client includes options containing the IAs for the addresses it is releasing in the "options" field.
The addresses to be released MUST be included in the IAs.
Any addresses for the IAs the client wishes to continue to use
MUST NOT be added to the IAs.
The client MUST NOT use any of the addresses it is releasing as the source address in the Release message or in any subsequently transmitted message.
Because Release messages may be lost, the client should retransmit the Release if no Reply is received.
However, there are scenarios where the client may not wish to wait for the normal retransmission timeout before giving up (e.g., on power down).
Implementations SHOULD retransmit one or more times, but MAY choose to terminate the retransmission procedure early.
The client transmits the message according to section 14, using the following parameters:
IRT   REL TIMEOUT MRT   0
The client MUST stop using all of the addresses being released as soon as the client begins the Release message exchange process.
If addresses are released but the Reply from a DHCP server is lost, the client will retransmit the Release message, and the server may respond with a Reply indicating a status of NoBinding.
Therefore, the client does not treat a Reply message with a status of NoBinding in a Release message exchange as if it indicates an error.
Note that if the client fails to release the addresses, each address assigned to the IA will be reclaimed by the server when the valid lifetime of that address expires.
Creation and Transmission of Decline Messages
If a client detects that one or more addresses assigned to it by a server are already in use by another node, the client sends a Decline message to the server to inform it that the address is suspect.
The client sets the "msg type" field to DECLINE.
The client generates a transaction ID and places this value in the "transaction id" field.
The client places the identifier of the server that allocated the address(es) in a Server Identifier option.
The client MUST include a Client Identifier option to identify itself to the server.
The client includes options containing the IAs for the addresses it is declining in the "options" field.
The addresses to be declined MUST be included in the IAs.
Any addresses for the IAs the client wishes to continue to use should not be in added to the IAs.
The client MUST NOT use any of the addresses it is declining as the source address in the Decline message or in any subsequently transmitted message.
The client transmits the message according to section 14, using the following parameters:
IRT   DEC TIMEOUT MRT   0
MRC   DEC MAX RC MRD   0
If addresses are declined but the Reply from a DHCP server is lost, the client will retransmit the Decline message, and the server may respond with a Reply indicating a status of NoBinding.
Therefore, the client does not treat a Reply message with a status of NoBinding in a Decline message exchange as if it indicates an error.
Receipt of Reply Messages Upon the receipt of a valid Reply message in response to a Solicit (with a Rapid Commit option), Request, Confirm, Renew, Rebind or Information request message, the client extracts the configuration information contained in the Reply.
The client MAY choose to report any status code or message from the status code option in the Reply message.
The client SHOULD perform duplicate address detection [17] on each of the addresses in any IAs it receives in the Reply message before using that address for traffic.
If any of the addresses are found to be in use on the link, the client sends a Decline message to the server as described in section 18.1.7.
If the Reply was received in response to a Solicit (with a Rapid Commit option), Request, Renew or Rebind message, the client updates the information it has recorded about IAs from the IA options contained in the Reply message:  Record T1 and T2 times.
Add any new addresses in the IA option to the IA as recorded by the client.
Update lifetimes for any addresses in the IA option that the client already has recorded in the IA.
Discard any addresses from the IA, as recorded by the client, that have a valid lifetime of 0 in the IA Address option.
Leave unchanged any information about addresses the client has recorded in the IA
but that were not included in the IA from the server.
Management of the specific configuration information is detailed in the definition of each option in section 22.
If the client receives a Reply message with a Status Code containing UnspecFail, the server is indicating that it was unable to process the message due to an unspecified failure condition.
If the client retransmits the original message to the same server to retry the desired operation, the client MUST limit the rate at which it retransmits the message and limit the duration of the time during which it retransmits the message.
When the client receives a Reply message with a Status Code option with the value UseMulticast, the client records the receipt of the message and sends subsequent messages to the server through the interface on which the message was received using multicast.
The client resends the original message using multicast.
When the client receives a NotOnLink status from the server in response to a Confirm message, the client performs DHCP server solicitation, as described in section 17, and client initiated configuration as described in section 18.
If the client receives any Reply messages that do not indicate a NotOnLink status, the client can use the addresses in the IA and ignore any messages that indicate a NotOnLink status.
When the client receives a NotOnLink status from the server in response to a Request, the client can either re issue the Request without specifying any addresses or restart the DHCP server discovery process (see section 17).
The client examines the status code in each IA individually.
If the status code is NoAddrsAvail, the client has received no usable addresses in the IA and may choose to try obtaining addresses for the IA from another server.
The client uses addresses and other information from any IAs that do not contain a Status Code option with the NoAddrsAvail code.
If the client receives no addresses in any of the IAs, it may either try another server (perhaps restarting the DHCP server discovery process) or use the Information request message to obtain other configuration information only.
When the client receives a Reply message in response to a Renew or Rebind message, the client examines each IA independently.
For each IA in the original Renew or Rebind message, the client:  sends a Request message if the IA contained a Status Code option with the NoBinding status (and does not send any additional Renew/Rebind messages)  sends a Renew/Rebind if the IA is not in the Reply message  otherwise accepts the information in the IA
When the client receives a valid Reply message in response to a Release message, the client considers the Release event completed, regardless of the Status Code option(s) returned by the server.
When the client receives a valid Reply message in response to a Decline message, the client considers the Decline event completed, regardless of the Status Code option(s) returned by the server.
Server Behavior For this discussion, the Server is assumed to have been configured in an implementation specific manner with configuration of interest to clients.
In most instances, the server will send a Reply in response to a client message.
This Reply message MUST always contain the Server Identifier option containing the server's DUID and the Client Identifier option from the client message if one was present.
In most Reply messages, the server includes options containing configuration information for the client.
The server must be aware of the recommendations on packet sizes and the use of fragmentation in section 5 of RFC 2460.
If the client included an Option Request option in its message, the server includes options in the Reply message containing configuration parameters for all of the options identified in the Option Request option that the server has been configured to return to the client.
The server MAY return additional options to the client if it has been configured to do so.
When the server receives a Request message via unicast from a client to which the server has not sent a unicast option, the server discards the Request message and responds with a Reply message containing a Status Code option with the value UseMulticast, a Server Identifier option containing the server's DUID, the Client Identifier option from the client message, and no other options.
When the server receives a valid Request message, the server creates the bindings for that client according to the server's policy and configuration information and records the IAs and other information requested by the client.
The server constructs a Reply message by setting the "msg type" field to REPLY, and copying the transaction ID from the Request message into the transaction
The server MUST include a Server Identifier option containing the server's DUID and the Client Identifier option from the Request message in the Reply message.
If the server finds that the prefix on one or more IP addresses in any IA in the message from the client is not appropriate for the link to which the client is connected, the server MUST return the IA to the client with a Status Code option with the value NotOnLink.
If the server cannot assign any addresses to an IA in the message from the client, the server MUST include the IA in the Reply message with no addresses in the IA and a Status Code option in the IA containing status code NoAddrsAvail.
For any IAs to which the server can assign addresses, the server includes the IA with addresses and other configuration parameters, and records the IA as a new client binding.
The server includes a Reconfigure Accept option if the server wants to require that the client accept Reconfigure messages.
The server includes other options containing configuration information to be returned to the client as described in section 18.2.
If the server finds that the client has included an IA in the Request message for which the server already has a binding that associates the IA with the client, the client has resent a Request message for which it did not receive a Reply message.
The server either resends a previously cached Reply message or sends a new Reply message.
When the server receives a Confirm message, the server determines whether the addresses in the Confirm message are appropriate for the link to which the client is attached.
If all of the addresses in the Confirm message pass this test, the server returns a status of Success.
If any of the addresses do not pass this test, the server returns a status of NotOnLink.
If the server is unable to perform this test (for example, the server does not have information about prefixes on the link to which the client is connected), or there were no addresses in any of the IAs sent by the client, the server MUST NOT send a reply to the client.
The server ignores the T1 and T2 fields in the IA options and the preferred lifetime and valid lifetime fields in the IA Address options.
The server constructs a Reply message by setting the "msg type" field to REPLY, and copying the transaction ID from the Confirm message into the transaction
The server MUST include a Server Identifier option containing the server's DUID and the Client Identifier option from the Confirm message in the Reply message.
The server includes a Status Code option indicating the status of the Confirm message.
When the server receives a Renew message via unicast from a client to which the server has not sent a unicast option, the server discards the Renew message and responds with a Reply message containing a Status Code option with the value UseMulticast, a Server Identifier option containing the server's DUID, the Client Identifier option from the client message, and no other options.
When the server receives a Renew message that contains an IA option from a client, it locates the client's binding and verifies that the information in the IA from the client matches the information stored for that client.
If the server cannot find a client entry for the IA the server returns the IA containing no addresses with a Status Code option set to NoBinding in the Reply message.
If the server finds that any of the addresses are not appropriate for the link to which the client is attached, the server returns the address to the client with lifetimes of 0.
If the server finds the addresses in the IA for the client then the server sends back the IA to the client with new lifetimes and T1/T2 times.
The server may choose to change the list of addresses and the lifetimes of addresses in IAs that are returned to the client.
The server constructs a Reply message by setting the "msg type" field to REPLY, and copying the transaction ID from the Renew message into the transaction
The server MUST include a Server Identifier option containing the server's DUID and the Client Identifier option from the Renew message in the Reply message.
The server includes other options containing configuration information to be returned to the client as described in section 18.2. 18.2.4.
When the server receives a Rebind message that contains an IA option from a client, it locates the client's binding and verifies that the information in the IA from the client matches the information stored for that client.
If the server cannot find a client entry for the IA and the server determines that the addresses in the IA are not appropriate for the link to which the client's interface is attached according to the server's explicit configuration information, the server MAY send a Reply message to the client containing the client's IA, with the lifetimes for the addresses in the IA set to zero.
This Reply constitutes an explicit notification to the client that the addresses in the IA are no longer valid.
In this situation, if the server does not send a Reply message it silently discards the Rebind message.
If the server finds that any of the addresses are no longer appropriate for the link to which the client is attached, the server returns the address to the client with lifetimes of 0.
If the server finds the addresses in the IA for the client then the server SHOULD send back the IA to the client with new lifetimes and T1/T2 times.
The server constructs a Reply message by setting the "msg type" field to REPLY, and copying the transaction ID from the Rebind message into the transaction
The server MUST include a Server Identifier option containing the server's DUID and the Client Identifier option from the Rebind message in the Reply message.
The server includes other options containing configuration information to be returned to the client as described in section 18.2.
Receipt of Information request Messages
When the server receives an Information request message, the client is requesting configuration information that does not include the assignment of any addresses.
The server determines all configuration parameters appropriate to the client, based on the server configuration policies known to the server.
The server constructs a Reply message by setting the "msg type" field to REPLY, and copying the transaction ID from the Information request message into the transaction
The server MUST include a Server Identifier option containing the server's DUID in the Reply message.
If the client included a Client Identification option in the Information request message, the server copies that option to the Reply message.
The server includes options containing configuration information to be returned to the client as described in section 18.2.
If the Information request message received from the client did not include a Client Identifier option, the server SHOULD respond with a Reply message containing any configuration parameters that are not determined by the client's identity.
If the server chooses not to respond, the client may continue to retransmit the Information request message indefinitely.
When the server receives a Release message via unicast from a client to which the server has not sent a unicast option, the server discards the Release message and responds with a Reply message containing a Status Code option with value UseMulticast, a Server Identifier option containing the server's DUID, the Client Identifier option from the client message, and no other options.
Upon the receipt of a valid Release message, the server examines the IAs and the addresses in the IAs for validity.
If the IAs in the message are in a binding for the client, and the addresses in the IAs have been assigned by the server to those IAs, the server deletes the addresses from the IAs and makes the addresses available for assignment to other clients.
The server ignores addresses not assigned to the IA, although it may choose to log an error.
After all the addresses have been processed, the server generates a Reply message and includes a Status Code option with value Success, a Server Identifier option with the server's DUID, and a Client Identifier option with the client's DUID.
For each IA in the Release message for which the server has no binding information, the server adds an IA option using the IAID from the Release message, and includes a Status Code option with the value NoBinding in the IA option.
No other options are included in the IA option.
A server may choose to retain a record of assigned addresses and IAs after the lifetimes on the addresses have expired to allow the server to reassign the previously assigned addresses to a client.
When the server receives a Decline message via unicast from a client to which the server has not sent a unicast option, the server discards the Decline message and responds with a Reply message containing a Status Code option with the value UseMulticast, a Server Identifier option containing the server's DUID, the Client Identifier option from the client message, and no other options.
Upon the receipt of a valid Decline message, the server examines the IAs and the addresses in the IAs for validity.
If the IAs in the message are in a binding for the client, and the addresses in the IAs have been assigned by the server to those IAs, the server deletes the addresses from the IAs.
The server ignores addresses not assigned to the IA (though it may choose to log an error if it finds such an address).
The client has found any addresses in the Decline messages to be already in use on its link.
Therefore, the server SHOULD mark the addresses declined by the client so that those addresses are not assigned to other clients, and MAY choose to make a notification that addresses were declined.
Local policy on the server determines when the addresses identified in a Decline message may be made available for assignment.
After all the addresses have been processed, the server generates a Reply message and includes a Status Code option with the value Success, a Server Identifier option with the server's DUID, and a Client Identifier option with the client's DUID.
For each IA in the Decline message for which the server has no binding information, the server adds an IA option using the IAID from the Release message and includes a Status Code option with the value NoBinding in the IA option.
No other options are included in the IA option.
If the original message was received directly by the server, the server unicasts the Reply message directly to the client using the address in the source address field from the IP datagram in which the original message was received.
The Reply message MUST be unicast through the interface on which the original message was received.
If the original message was received in a Relay forward message, the server constructs a Relay reply message with the Reply message in the payload of a Relay Message option (see section 22.10).
If the Relay forward messages included an Interface id option, the server copies that option to the Relay reply message.
The server unicasts the Relay reply message directly to the relay agent using the address in the source address field from the IP datagram in which the Relay forward message was received.
Configuration Exchange A server initiates a configuration exchange to cause DHCP clients to obtain new addresses and other configuration information.
For example, an administrator may use a server initiated configuration exchange when links in the DHCP domain are to be renumbered.
Other examples include changes in the location of directory servers, addition of new services such as printing, and availability of new software.
A server sends a Reconfigure message to cause a client to initiate immediately a Renew/Reply or Information request/Reply message exchange with the server.
Creation and Transmission of Reconfigure Messages
The server sets the "msg type" field to RECONFIGURE.
The server sets the transaction id field to 0.
The server includes a Server Identifier option containing its DUID and a Client Identifier option containing the client's DUID in the Reconfigure message.
The server MAY include an Option Request option to inform the client of what information has been changed or new information that has been added.
In particular, the server specifies the IA option in the Option Request option if the server wants the client to obtain new address information.
If the server identifies the IA option in the Option Request option, the server MUST include an IA option that contains no other sub options to identify each IA that is to be reconfigured on the client.
Because of the risk of denial of service attacks against DHCP clients, the use of a security mechanism is mandated in Reconfigure messages.
The server MUST use DHCP authentication in the Reconfigure message.
The server MUST include a Reconfigure Message option (defined in section 22.19) to select whether the client responds with a Renew message or an Information Request message.
The server MUST NOT include any other options in the Reconfigure except as specifically allowed in the definition of individual options.
A server sends each Reconfigure message to a single DHCP client, using an IPv6 unicast address of sufficient scope belonging to the DHCP client.
If the server does not have an address to which it can send the Reconfigure message directly to the client, the server uses a Relay reply message (as described in section 20.3) to send the Reconfigure message to a relay agent that will relay the message to the client.
The server may obtain the address of the client (and the appropriate relay agent, if required) through the information the server has about clients that have been in contact with the server, or through some external agent.
To reconfigure more than one client, the server unicasts a separate message to each client.
The server may initiate the reconfiguration of multiple clients concurrently; for example, a server may send a Reconfigure message to additional clients while previous reconfiguration message exchanges are still in progress.
The Reconfigure message causes the client to initiate a Renew/Reply or Information request/Reply message exchange with the server.
The server interprets the receipt of a Renew or Information request message (whichever was specified in the original Reconfigure message) from the client as satisfying the Reconfigure message request.
Time Out and Retransmission of Reconfigure Messages
If the server does not receive a Renew or Information request message from the client in REC TIMEOUT milliseconds, the server retransmits the Reconfigure message, doubles the REC TIMEOUT value and waits again.
The server continues this process until REC MAX RC unsuccessful attempts have been made, at which point the server SHOULD abort the reconfigure process for that client.
Default and initial values for REC TIMEOUT and REC MAX RC are documented in section 5.5.
The server generates and sends a Reply message to the client as described in sections 18.2.3 and 18.2.8, including options for configuration parameters.
The server MAY include options containing the IAs and new values for other configuration parameters in the Reply message, even if those IAs and parameters were not requested in the Renew message from the client.
Receipt of Information request Messages
The server generates and sends a Reply message to the client as described in sections 18.2.5 and 18.2.8, including options for configuration parameters.
The server MAY include options containing new values for other configuration parameters in the Reply message, even if those parameters were not requested in the Information request message from the client.
A client receives Reconfigure messages sent to the UDP port 546 on interfaces for which it has acquired configuration information through DHCP.
These messages may be sent at any time.
Since the results of a reconfiguration event may affect application layer programs, the client SHOULD log these events, and MAY notify these programs of the change through an implementation specific interface.
Receipt of Reconfigure Messages Upon receipt of a valid Reconfigure message, the client responds with either a Renew message or an Information request message as indicated by the Reconfigure Message option (as defined in section 22.19).
The client ignores the transaction id field in the received Reconfigure message.
While the transaction is in progress, the client silently discards any Reconfigure messages it receives.
The Reconfigure message acts as a trigger that signals the client to complete a successful message exchange.
Once the client has received a Reconfigure, the client proceeds with the message exchange (retransmitting the Renew or Information request message if necessary); the client ignores any additional Reconfigure messages until the exchange is complete.
Subsequent Reconfigure messages cause the client to initiate a new exchange.
How does this mechanism work in the face of duplicated or retransmitted Reconfigure messages?
Duplicate messages will be ignored because the client will begin the exchange after the receipt of the first Reconfigure.
Retransmitted messages will either trigger the exchange (if the first Reconfigure was not received by the client) or will be ignored.
The server can discontinue retransmission of Reconfigure messages to the client once the server receives the Renew or Information request message from the client.
It might be possible for a duplicate or retransmitted Reconfigure to be sufficiently delayed (and delivered out of order) to arrive at the client after the exchange (initiated by the original Reconfigure) has been completed.
In this case, the client would initiate a redundant exchange.
The likelihood of delayed and out of order delivery is small enough to be ignored.
The consequence of the redundant exchange is inefficiency rather than incorrect operation.
Creation and Transmission of Renew Messages When responding to a Reconfigure, the client creates and sends the Renew message in exactly the same manner as outlined in section 18.1.3, with the exception that the client copies the Option Request option and any IA options from the Reconfigure message into the Renew message.
Creation and Transmission of Information request Messages
When responding to a Reconfigure, the client creates and sends the Information request message in exactly the same manner as outlined in section 18.1.5, with the exception that the client includes a Server Identifier option with the identifier from the Reconfigure message to which the client is responding.
Time Out and Retransmission of Renew or Information request Messages
The client uses the same variables and retransmission algorithm as it does with Renew or Information request messages generated as part of a client initiated configuration exchange.
See sections 18.1.3 and 18.1.5 for details.
If the client does not receive a response from the server by the end of the retransmission process, the client ignores and discards the Reconfigure message.
Receipt of Reply Messages Upon the receipt of a valid Reply message, the client processes the options and sets (or resets)
The client records and updates the lifetimes for any addresses specified in IAs in the Reply message.
The relay agent MAY be configured to use a list of destination addresses, which MAY include unicast addresses, the All DHCP Servers multicast address, or other addresses selected by the network administrator.
If the relay agent has not been explicitly configured, it MUST use the All DHCP Servers multicast address as the default.
If the relay agent relays messages to the All DHCP Servers multicast address or other multicast addresses, it sets the Hop Limit field to 32.
Relaying a Client Message or a Relay forward
Message A relay agent relays both messages from clients and Relay forward messages from other relay agents.
When a relay agent receives a valid message to be relayed, it constructs a new Relay forward message.
The relay agent copies the source address from the header of the IP datagram in which the message was received to the peer address field of the Relay forward message.
The relay agent copies the received DHCP message (excluding any IP or UDP headers) into a Relay Message option in the new message.
The relay agent adds to the Relay forward message
any other options it is configured to include.
Relaying a Message from a Client
If the relay agent received the message to be relayed from a client, the relay agent places a global or site scoped address with a prefix assigned to the link on which the client should be assigned an address in the link address field.
This address will be used by the server to determine the link from which the client should be assigned an address and other configuration information.
The hop count in the Relay
forward message is set to 0.
If the relay agent cannot use the address in the link address field to identify the interface through which the response to the client will be relayed, the relay agent MUST include an Interface id option (see section 22.18) in the Relay forward message.
The server will include the Interface
id option in its Relay reply message.
The relay agent fills in the link address field as described in the previous paragraph regardless of whether the relay agent includes an Interface
id option in the Relay
Relaying a Message from a Relay Agent
If the message received by the relay agent is a Relay forward message and the hop count in the message is greater than or equal to HOP COUNT LIMIT, the relay agent discards the received message.
The relay agent copies the source address from the IP datagram in which the message was received from the client into the peer address field in the Relay forward message and sets the hop count field to the value of the hop count field in the received message incremented by 1.
If the source address from the IP datagram header of the received message is a global or site local address (and the device on which the relay agent is running belongs to only one site), the relay agent sets the link address field to 0; otherwise the relay agent sets the link address field to a global or site local address assigned to the interface on which the message was received, or includes an Interface ID option to identify the interface on which the message was received.
Relaying a Relay reply Message
The relay agent processes any options included in the Relay reply message in addition to the Relay Message option, and then discards those options.
The relay agent extracts the message from the Relay Message option and relays it to the address contained in the peer address field of the Relay reply message.
If the Relay reply message includes an Interface
id option, the relay agent relays the message from the server to the client on the link identified by the Interface
Otherwise, if the link address field is not set to zero, the relay agent relays the message on the link identified by the link address field.
Construction of Relay reply Messages
A server uses a Relay reply message to return a response to a client if the original message from the client was relayed to the server in a Relay forward message or to send a Reconfigure message to a client if the server does not have an address it can use to send the message directly to the client.
A response to the client MUST be relayed through the same relay agents as the original client message.
The server causes this to happen by creating a Relay reply message that includes a Relay Message option containing the message for the next relay agent in the return path to the client.
The contained Relay reply message contains another Relay Message option to be sent to the next relay agent, and so on.
The server must record the contents of the peer address fields in the received message so it can construct the appropriate Relay reply message carrying the response from the server.
For example, if client C sent a message that was relayed by relay agent A to relay agent B and then to the server, the server would send the following Relay Reply message to relay agent B:
> When sending a Reconfigure message to a client through a relay agent, the server creates a Relay reply message that includes a Relay Message option containing the Reconfigure message for the next relay agent in the return path to the client.
The server sets the peer address field in the Relay reply message header to the address of the client, and sets the link address field as required by the relay agent to relay the Reconfigure message to the client.
The server obtains the addresses of the client and the relay agent through prior interaction with the client or through some external mechanism.
Some network administrators may wish to provide authentication of the source and contents of DHCP messages.
For example, clients may be subject to denial of service attacks through the use of bogus DHCP servers, or may simply be misconfigured due to unintentionally instantiated DHCP servers.
Network administrators may wish to constrain the allocation of addresses to authorized hosts to avoid denial of service attacks in "hostile" environments where the network medium is not physically secured, such as wireless networks or college residence halls.
The DHCP authentication mechanism is based on the design of authentication for DHCPv4 [4].
Security of Messages Sent Between Servers and Relay Agents Relay agents and servers that exchange messages securely use the IPsec mechanisms for IPv6 [7].
If a client message is relayed through multiple relay agents, each of the relay agents must have established independent, pairwise trust relationships.
That is, if messages from client C will be relayed by relay agent A to relay agent B and then to the server, relay agents A and B must be configured to use IPSec for the messages they exchange, and relay agent B and the server must be configured to use IPSec for the messages they exchange.
Each relay agent and server that will be using IPsec for securing DHCP messages must also be configured with a list of the relay agents to which messages will be returned.
The selectors for the relay agents and servers will be the pairs of addresses defining relay agents and servers that exchange DHCP messages on the DHCPv6 UDP ports 546 and 547.
The information in DHCP messages is not generally considered confidential, so encryption need not be used (i.e., NULL encryption can be used).
Because the relay agents and servers are used within an organization, public key schemes are not necessary.
Because the relay agents and servers must be manually configured, manually configured key management may suffice, but does not provide defense against replayed messages.
Accordingly, IKE with preshared secrets SHOULD be supported.
IKE with public keys MAY be supported.
Security policy  DHCP messages between relay agents and servers should only be accepted from DHCP peers as identified in the local configuration.
Shared keys, indexed to the source IP address of the received DHCP message, are adequate in this application.
IPsec is less likely to be available for relay agents in low end devices primarily used in the home or small office markets.
Summary of DHCP Authentication Authentication of DHCP messages is accomplished through the use of the Authentication option (see section 22.11).
The authentication information carried in the Authentication option can be used to reliably identify the source of a DHCP message and to confirm that the contents of the DHCP message have not been tampered with.
The Authentication option provides a framework for multiple authentication protocols.
Two such protocols are defined here.
Other protocols defined in the future will be specified in separate documents.
Any DHCP message MUST NOT include more than one Authentication option.
The protocol field in the Authentication option identifies the specific protocol used to generate the authentication information carried in the option.
The algorithm field identifies a specific algorithm within the authentication protocol; for example, the algorithm field specifies the hash algorithm used to generate the message authentication code (MAC) in the authentication option.
The replay detection method (RDM) field specifies the type of replay detection used in the replay detection field.
The Replay Detection Method (RDM) field determines the type of replay detection used in the Replay Detection field.
If the RDM field contains 0x00, the replay detection field MUST be set to the value of a monotonically increasing counter.
Using a counter value, such as the current time of day (for example, an NTP  format timestamp [9]), can reduce the danger of replay attacks.
This method MUST be supported by all protocols.
If the protocol field is 2, the message is using the "delayed authentication" mechanism.
In delayed authentication, the client requests authentication in its Solicit message, and the server replies with an Advertise message that includes authentication information.
This authentication information contains a nonce value generated by the source as a message authentication code (MAC) to provide message authentication and entity authentication.
The use of a particular technique based on the HMAC protocol [8] using the MD5 hash [16] is defined here.
Use of the Authentication Option in the Delayed Authentication Protocol In a Solicit message, the client fills in the protocol, algorithm and RDM fields in the Authentication option with the client's preferences.
The client sets the replay detection field to zero and omits the authentication information field.
The client sets the option len field to 11.
In all other messages, the protocol and algorithm fields identify the method used to construct the contents of the authentication information field.
The RDM field identifies the method used to construct the contents of the replay detection field.
The DHCP realm that identifies the key used to generate the HMAC MD5 value.
The key identifier that identified the key used to generate the HMAC MD5 value.
The message authentication code generated by applying MD5 to the DHCP message using the key identified by the DHCP realm, client DUID, and key ID.
The sender computes the MAC using the HMAC generation algorithm [8] and the MD5 hash function [16].
The entire DHCP message (setting the MAC field of the authentication option to zero), including the DHCP message header and the options field, is used as input to the HMAC  MD5 computation function.
Algorithm 1 specifies the use of HMAC MD5.
Use of a different technique, such as HMAC SHA, will be specified as a separate protocol.
The DHCP realm used to identify authentication keys is chosen to be unique among administrative domains.
Use of the DHCP realm allows DHCP administrators to avoid conflict in the use of key identifiers, and allows a host using DHCP to use authenticated DHCP while roaming among DHCP administrative domains.
Any DHCP message that includes more than one authentication option MUST be discarded.
To validate an incoming message, the receiver first checks that the value in the replay detection field is acceptable according to the replay detection method specified by the RDM field.
Next, the receiver computes the MAC as described in [8].
The entire DHCP message (setting the MAC field of the authentication option to 0) is used as input to the HMAC MD5 computation function.
If the MAC computed by the receiver does not match the MAC contained in the authentication option, the receiver MUST discard the DHCP message.
Each DHCP client has a set of keys.
Each key is identified by <DHCP realm, client DUID,
Each key also has a lifetime.
The key may not be used past the end of its lifetime.
The client's keys are initially distributed to the client through some out of band mechanism.
The lifetime for each key is distributed with the key.
Mechanisms for key distribution and lifetime specification are beyond the scope of this document.
The client and server use one of the client's keys to authenticate DHCP messages during a session (until the next Solicit message sent by the client).
Client Considerations for Delayed Authentication Protocol
The client announces its intention to use DHCP authentication by including an Authentication option in its Solicit message.
The server selects a key for the client based on the client's DUID.
The client and server use that key to authenticate all DHCP messages exchanged during the session.
Sending Solicit Messages When the client sends a Solicit message and wishes to use authentication, it includes an Authentication option with the desired protocol, algorithm and RDM as described in section 21.4.
The client does not include any replay detection or authentication information in the Authentication option.
The client validates any Advertise messages containing an Authentication option specifying the delayed authentication protocol using the validation test described in section 21.4.2.
Client behavior, if no Advertise messages include authentication information or pass the validation test, is controlled by local policy on the client.
According to client policy, the client MAY choose to respond to an Advertise message that has not been authenticated.
The decision to set local policy to accept unauthenticated messages should be made with care.
Accepting an unauthenticated Advertise message can make the client vulnerable to spoofing and other attacks.
If local users are not explicitly informed that the client has accepted an unauthenticated Advertise message, the users may incorrectly assume that the client has received an authenticated address and is not subject to DHCP attacks through unauthenticated messages.
A client MUST be configurable to discard unauthenticated messages, and SHOULD be configured by default to discard unauthenticated messages if the client has been configured with an authentication key or other authentication information.
A client MAY choose to differentiate between Advertise messages with no authentication information and Advertise messages that do not pass the validation test; for example, a client might accept the former and discard the latter.
If a client does accept an unauthenticated message, the client SHOULD inform any local users and SHOULD log the event.
Sending Request, Confirm, Renew, Rebind, Decline or Release Messages
If the client authenticated the Advertise message through which the client selected the server, the client MUST generate authentication information for subsequent Request, Confirm, Renew, Rebind or Release messages sent to the server, as described in section 21.4.
When the client sends a subsequent message, it MUST use the same key used by the server to generate the authentication information.
If the server has selected a key for the client in a previous message exchange (see section 21.4.5.1), the client MUST use the same key to generate the authentication information throughout the session.
Receiving Reply Messages If the client authenticated the Advertise it accepted, the client MUST validate the associated Reply message from the server.
The client MUST discard the Reply if the message fails to pass the validation test and MAY log the validation failure.
If the Reply fails to pass the validation test, the client MUST restart the DHCP configuration process by sending a Solicit message.
If the client accepted an Advertise message that did not include authentication information or did not pass the validation test, the client MAY accept an unauthenticated Reply message from the server.
The client MUST discard the Reconfigure if the message fails to pass the validation test and MAY log the validation failure.
Server Considerations for Delayed Authentication Protocol
After receiving a Solicit message that contains an Authentication option, the server selects a key for the client, based on the client's DUID and key selection policies with which the server has been configured.
The server identifies the selected key in the Advertise message and uses the key to validate subsequent messages between the client and the server.
Receiving Solicit Messages and Sending Advertise Messages The server selects a key for the client and includes authentication information in the Advertise message returned to the client as specified in section 21.4.
The server MUST record the identifier of the key selected for the client and use that same key for validating subsequent messages with the client.
Receiving Request, Confirm, Renew, Rebind or Release Messages and Sending Reply Messages
The server uses the key identified in the message and validates the message as specified in section 21.4.2.
If the message fails to pass the validation test or the server does not know the key identified by the 'key ID' field, the server MUST discard the message and MAY choose to log the validation failure.
If the message passes the validation test, the server responds to the specific message as described in section 18.2.
The server MUST include authentication information generated using the key identified in the received message, as specified in section 21.4.
The Reconfigure key authentication protocol provides protection against misconfiguration of a client caused by a Reconfigure message sent by a malicious DHCP server.
In this protocol, a DHCP server sends a Reconfigure Key to the client in the initial exchange of DHCP messages.
The client records the Reconfigure Key for use in authenticating subsequent Reconfigure messages from that server.
The server then includes an HMAC computed from the Reconfigure Key in subsequent Reconfigure messages.
Both the Reconfigure Key sent from the server to the client and the HMAC in subsequent Reconfigure messages are carried as the Authentication information in an Authentication option.
The format of the Authentication information is defined in the following section.
The Reconfigure Key protocol is used (initiated by the server) only if the client and server are not using any other authentication protocol and the client and server have negotiated to use Reconfigure messages.
Use of the Authentication Option in the Reconfigure Key Authentication Protocol
The following fields are set in an Authentication option for the Reconfigure Key Authentication Protocol:
Type    Type of data in Value field carried in this option: 1   Reconfigure Key value (used in Reply message).
2   HMAC MD5 digest of the message (used in Reconfigure message).
Value   Data as defined by field.
Server considerations for Reconfigure Key protocol
The server selects a Reconfigure Key for a client during the Request/Reply, Solicit/Reply or Information request/Reply message exchange.
The server records the Reconfigure Key and transmits that key to the client in an Authentication option in the Reply message.
The Reconfigure Key is 128 bits long, and MUST be a cryptographically strong random or pseudo random number that cannot easily be predicted.
To provide authentication for a Reconfigure message, the server selects a replay detection value according to the RDM selected by the server, and computes an HMAC MD5 of the Reconfigure message using the Reconfigure Key for the client.
The server computes the HMAC MD5 over the entire DHCP Reconfigure message, including the Authentication option; the HMAC MD5 field in the Authentication option is set to zero for the HMAC MD5 computation.
The server includes the HMAC MD5 in the authentication information field in an Authentication option included in the Reconfigure message sent to the client.
Client considerations for Reconfigure Key protocol
The client will receive a Reconfigure Key from the server in the initial Reply message from the server.
The client records the Reconfigure Key for use in authenticating subsequent Reconfigure messages.
To authenticate a Reconfigure message, the client computes an HMAC MD5 over the DHCP Reconfigure message, using the Reconfigure Key received from the server.
If this computed HMAC MD5 matches the value in the Authentication option, the client accepts the Reconfigure message.
DHCP Options Options are used to carry additional information and parameters in DHCP messages.
Every option shares a common base format, as described in section 22.1.
All values in options are represented in network byte order.
This document describes the DHCP options defined as part of the base DHCP specification.
Other options may be defined in the future in separate documents.
Unless otherwise noted, each option may appear only in the options area of a DHCP message and may appear only once.
If an option does appear multiple times, each instance is considered separate and the data areas of the options MUST NOT be concatenated or otherwise combined.
An unsigned integer identifying the specific option type carried in this option.
An unsigned integer giving the length of the option data field in this option in octets.
The data for the option; the format of this data depends on the definition of the option.
DHCPv6 options are scoped by using encapsulation.
Some options apply generally to the client, some are specific to an IA, and some are specific to the addresses within an IA.
These latter two cases are discussed in sections 22.4 and 22.6. 22.2.
The Client Identifier option is used to carry a DUID (see section 9) identifying a client between a client and a server.
option code   OPTION CLIENTID (1).
option len    Length of DUID in octets.
The Server Identifier option is used to carry a DUID (see section 9) identifying a server between a client and a server.
option code   OPTION SERVERID (2).
option len    Length of DUID in octets.
Identity Association for Non temporary Addresses Option
The Identity Association for Non temporary Addresses option (IA NA option) is used to carry an IA NA, the parameters associated with the IA NA, and the non temporary addresses associated with the IA NA.
Addresses appearing in an IA NA option are not temporary addresses (see section 22.5).
The unique identifier for this IA NA; the IAID must be unique among the identifiers for all of this client's IA NAs.
The number space for IA NA IAIDs is separate from the number space for IA TA IAIDs.
The time at which the client contacts the server from which the addresses in the IA NA were obtained to extend the lifetimes of the addresses assigned to the IA NA; T1 is a time duration relative to the current time expressed in units of seconds.
The time at which the client contacts any available server to extend the lifetimes of the addresses assigned to the IA NA; T2 is a time duration relative to the current time expressed in units of seconds.
The IA NA options field encapsulates those options that are specific to this IA NA.
For example, all of the IA Address Options carrying the addresses associated with this IA NA are in the IA NA options field.
An IA NA option may only appear in the options area of a DHCP message.
A DHCP message may contain multiple IA NA options.
The status of any operations involving this IA NA is indicated in a Status Code option in the IA NA options field.
Note that an IA NA has no explicit "lifetime" or "lease length" of its own.
When the valid lifetimes of all of the addresses in an IA NA have expired, the IA NA can be considered as having expired.
T1 and T2 are included to give servers explicit control over when a client recontacts the server about a specific IA NA.
In a message sent by a client to a server, values in the T1 and T2 fields indicate the client's preference for those parameters.
The client sets T1 and T2 to 0 if it has no preference for those values.
In a message sent by a server to a client, the client MUST use the values in the T1 and T2 fields for the T1 and T2 parameters, unless those values in those fields are 0.
The values in the T1 and T2 fields are the number of seconds until T1 and T2.
The server selects the T1 and T2 times to allow the client to extend the lifetimes of any addresses in the IA NA before the lifetimes expire, even if the server is unavailable for some short period of time.
Recommended values for T1 and T2 are .5
and .8 times the shortest preferred lifetime of the addresses in the IA that the server is willing to extend, respectively.
If the "shortest" preferred lifetime is 0xffffffff ("infinity"), the recommended T1 and T2 values are also 0xffffffff.
If the time at which the addresses in an IA NA are to be renewed is to be left to the discretion of the client, the server sets T1 and T2 to 0.
If a server receives an IA NA with T1 greater than T2, and both T1 and T2 are greater than 0, the server ignores the invalid values of T1 and T2 and processes the IA NA as though the client had set T1 and T2 to 0.
If a client receives an IA NA with T1 greater than T2, and both T1 and T2 are greater than 0, the client discards the IA NA option and processes the remainder of the message as though the server had not included the invalid IA NA option.
Care should be taken in setting T1 or T2 to 0xffffffff ("infinity").
A client will never attempt to extend the lifetimes of any addresses in an IA with T1 set to 0xffffffff.
A client will never attempt to use a Rebind message to locate a different server to extend the lifetimes of any addresses in an IA with T2 set to 0xffffffff.
Identity Association for Temporary Addresses Option
The Identity Association for the Temporary Addresses (IA TA) option is used to carry an IA TA, the parameters associated with the IA TA and the addresses associated with the IA TA.
All of the addresses in this option are used by the client as temporary addresses, as defined in RFC 3041 [12].
The unique identifier for this IA TA; the IAID must be unique among the identifiers for all of this client's IA TAs.
The number space for IA TA IAIDs is separate from the number space for IA NA IAIDs.
The IA TA Options field encapsulates those options that are specific to this IA TA.
For example, all of the IA Address Options carrying the addresses associated with this IA TA are in the IA TA options field.
Each IA TA carries one "set" of temporary addresses; that is, at most one address from each prefix assigned to the link to which the client is attached.
An IA TA option may only appear in the options area of a DHCP message.
A DHCP message may contain multiple IA TA options.
The status of any operations involving this IA TA is indicated in a Status Code option in the IA TA options field.
Note that an IA has no explicit "lifetime" or "lease length" of its own.
When the valid lifetimes of all of the addresses in an IA TA have expired, the IA can be considered as having expired.
An IA TA option does not include values for T1 and T2.
A client MAY request that the lifetimes on temporary addresses be extended by including the addresses in a IA TA option sent in a Renew or Rebind message to a server.
For example, a client would request an extension on the lifetime of a temporary address to allow an application to continue to use an established TCP connection.
The client obtains new temporary addresses by sending an IA TA option with a new IAID to a server.
Requesting new temporary addresses from the server is the equivalent of generating new temporary addresses as described in RFC 3041.
The server will generate new temporary addresses and return them to the client.
The client should request new temporary addresses before the lifetimes on the previously assigned addresses expire.
A server MUST return the same set of temporary address for the same IA TA (as identified by the IAID) as long as those addresses are still valid.
After the lifetimes of the addresses in an IA TA have expired, the IAID may be reused to identify a new IA TA with new temporary addresses.
This option MAY appear in a Confirm message if the lifetimes on the temporary addresses in the associated IA have not expired.
The IA Address option is used to specify IPv6 addresses associated with an IA NA or an IA TA.
The IA Address option must be encapsulated in the Options field of an IA NA or IA TA option.
The Options field encapsulates those options that are specific to this address.
option code   OPTION IAADDR (5).
option len    24   length of IAaddr options field.
The preferred lifetime for the IPv6 address in the option, expressed in units of seconds.
The valid lifetime for the IPv6 address in the option, expressed in units of seconds.
IAaddr options Options associated with this address.
In a message sent by a client to a server, values in the preferred and valid lifetime fields indicate the client's preference for those parameters.
The client may send 0 if it has no preference for the preferred and valid lifetimes.
In a message sent by a server to a client, the client MUST use the values in the preferred and valid lifetime fields for the preferred and valid lifetimes.
The values in the preferred and valid lifetimes are the number of seconds remaining in each lifetime.
A client discards any addresses for which the preferred lifetime is greater than the valid lifetime.
A server ignores the lifetimes set by the client if the preferred lifetime is greater than the valid lifetime and ignores the values for T1 and T2 set by the client if those values are greater than the preferred lifetime.
Care should be taken in setting the valid lifetime of an address to 0xffffffff ("infinity"), which amounts to a permanent assignment of an address to a client.
An IA Address option may appear only in an IA NA option or an IA TA option.
More than one IA Address Option can appear in an IA NA option or an IA TA option.
The status of any operations involving this IA Address is indicated in a Status Code option in the IAaddr options field.
The Option Request option is used to identify a list of options in a message between a client and a server.
option len    2   number of requested options.
n The option code for an option requested by the client.
A client MAY include an Option Request option in a Solicit, Request, Renew, Rebind, Confirm or Information request message to inform the server about options the client wants the server to send to the client.
A server MAY include an Option Request option in a Reconfigure option to indicate which options the client should request from the server.
The Preference option is sent by a server to a client to affect the selection of a server by the client.
The preference value for the server in this message.
A server MAY include a Preference option in an Advertise message to control the selection of a server by the client.
See section 17.1.3 for the use of the Preference option by the client and the interpretation of Preference option data value.
The amount of time since the client began its current DHCP transaction.
This time is expressed in hundredths of a second (10^ 2 seconds).
A client MUST include an Elapsed Time option in messages to indicate how long the client has been trying to complete a DHCP message exchange.
The elapsed time is measured from the time at which the client sent the first message in the message exchange, and the elapsed time field is set to 0 in the first message in the message exchange.
Servers and Relay Agents use the data value in this option as input to policy controlling how a server responds to a client message.
For example, the elapsed time option allows a secondary DHCP server to respond to a request when a primary server has not answered in a reasonable time.
The elapsed time value is an unsigned, 16 bit integer.
The client uses the value 0xffff to represent any elapsed time values greater than the largest time value that can be represented in the Elapsed Time option.
The Relay Message option carries a DHCP message in a Relay forward or Relay reply message.
option code   OPTION RELAY MSG (9) option len    Length of DHCP relay message DHCP relay message In a Relay
forward message, the received message, relayed verbatim to the next relay agent or server; in a Relay reply message, the message to be copied and relayed to the relay agent or client whose address is in the peer address field of the Relay reply message 22.11.
The Authentication option carries authentication information to authenticate the identity and contents of DHCP messages.
The use of the Authentication option is described in section 21.
The authentication protocol used in this authentication option algorithm
The algorithm used in the authentication protocol RDM
The replay detection method used in this authentication option Replay detection
The replay detection information for the RDM authentication information
The authentication information, as specified by the protocol and algorithm used in this authentication option 22.12.
The server sends this option to a client to indicate to the client that it is allowed to unicast messages to the server.
The IP address to which the client should send messages delivered using unicast.
The server specifies the IPv6 address to which the client is to send unicast messages in the server address field.
When a client receives this option, where permissible and appropriate, the client sends messages directly to the server using the IPv6 address specified in the server address field of the option.
When the server sends a Unicast option to the client, some messages from the client will not be relayed by Relay Agents, and will not include Relay Agent options from the Relay Agents.
Therefore, a server should only send a Unicast option to a client when Relay Agents are not sending Relay Agent options.
A DHCP server rejects any messages sent inappropriately using unicast to ensure that messages are relayed by Relay Agents when Relay Agent options are in use.
Details about when the client may send messages to the server using unicast are in section 18.
This option returns a status indication related to the DHCP message or option in which it appears.
The numeric code for the status encoded in this option.
The status codes are defined in section 24.4.
A UTF 8 encoded text string suitable for display to an end user, which MUST NOT be null terminated.
A Status Code option may appear in the options field of a DHCP message and/or in the options field of another option.
If the Status Code option does not appear in a message in which the option could appear, the status of the message is assumed to be Success.
The Rapid Commit option is used to signal the use of the two message exchange for address assignment.
A client MAY include this option in a Solicit message if the client is prepared to perform the Solicit Reply message exchange described in section 17.1.1.
A server MUST include this option in a Reply message sent in response to a Solicit message when completing the Solicit Reply message exchange.
Each server that responds with a Reply to a Solicit that includes a Rapid Commit option will commit the assigned addresses in the Reply message to the client, and will not receive any confirmation that the client has received the Reply message.
Therefore, if more than one server responds to a Solicit that includes a Rapid Commit option, some servers will commit addresses that are not actually used by the client.
The problem of unused addresses can be minimized, for example, by designing the DHCP service so that only one server responds to the Solicit or by using relatively short lifetimes for assigned addresses.
The User Class option is used by a client to identify the type or category of user or applications it represents.
The information contained in the data area of this option is contained in one or more opaque fields that represent the user class or classes of which the client is a member.
A server selects configuration information for the client based on the classes identified in this option.
For example, the User Class option can be used to configure all clients of people in the accounting department with a different printer than clients of people in the marketing department.
The user class information carried in this option MUST be configurable on the client.
The data area of the user class option MUST contain one or more instances of user class data.
The user class len is two octets long and specifies the length of the opaque user class data in network byte order.
A server interprets the classes identified in this option according to its configuration to select the appropriate configuration information for the client.
A server may use only those user classes that it is configured to interpret in selecting configuration information for a client and ignore any other user classes.
In response to a message containing a User Class option, a server includes a User Class option containing those classes that were successfully interpreted by the server, so that the client can be informed of the classes interpreted by the server.
This option is used by a client to identify the vendor that manufactured the hardware on which the client is running.
The information contained in the data area of this option is contained in one or more opaque fields that identify details of the hardware configuration.
The vendor's registered Enterprise Number as registered with IANA [6].
The hardware configuration of the host on which the client is running.
The vendor class data is composed of a series of separate items, each of which describes some characteristic of the client's hardware configuration.
Examples of vendor class data instances might include the version of the operating system the client is running or the amount of memory installed on the client.
The vendor class len is two octets long and specifies the length of the opaque vendor class data in network byte order.
This option is used by clients and servers to exchange vendor specific information.
The vendor's registered Enterprise Number as registered with IANA [6].
An opaque object of option len octets, interpreted by vendor specific code on the clients and servers
The definition of the information carried in this option is vendor specific.
The vendor is indicated in the enterprise number field.
Use of vendor specific information allows enhanced operation, utilizing additional features in a vendor's DHCP implementation.
A DHCP client that does not receive requested vendor specific information will still configure the host device's IPv6 stack to be functional.
The encapsulated vendor specific options field MUST be encoded as a sequence of code/length/value fields of identical format to the DHCP options field.
The option codes are defined by the vendor identified in the enterprise number field and are not managed by IANA.
The code for the encapsulated option.
An unsigned integer giving the length of the option data field in this encapsulated option in octets.
The data area for the encapsulated option.
Multiple instances of the Vendor specific Information option may appear in a DHCP message.
Each instance of the option is interpreted according to the option codes defined by the vendor identified by the Enterprise Number in that option.
The relay agent MAY send the Interface
id option to identify the interface on which the client message was received.
If a relay agent receives a Relay reply message with an Interface
id option, the relay agent relays the message to the client through the interface identified by the option.
An opaque value of arbitrary length generated by the relay agent to identify one of the relay agent's interfaces.
The server MUST copy the Interface
Id option from the Relay Forward message into the Relay Reply message the server sends to the relay agent in response to the Relay Forward message.
This option MUST NOT appear in any message except a Relay Forward or Relay Reply message.
Servers MAY use the Interface ID for parameter assignment policies.
The Interface ID SHOULD be considered an opaque value, with policies based on exact match only; that is, the Interface ID SHOULD NOT be internally parsed by the server.
The Interface ID value for an interface SHOULD be stable and remain unchanged, for example, after the relay agent is restarted; if the Interface ID changes, a server will not be able to use it reliably in parameter assignment policies.
A server includes a Reconfigure Message option in a Reconfigure message to indicate to the client whether the client responds with a Renew message or an Information request message.
The Reconfigure Message option can only appear in a Reconfigure message.
A client uses the Reconfigure Accept option to announce to the server whether the client is willing to accept Reconfigure messages, and a server uses this option to tell the client whether or not to accept Reconfigure messages.
The default behavior, in the absence of this option, means unwillingness to accept Reconfigure messages, or instruction not to accept Reconfigure messages, for the client and server messages, respectively.
The following figure gives the format of the Reconfigure Accept option:
The threat to DHCP is inherently an insider threat (assuming a properly configured network where DHCPv6 ports are blocked on the perimeter gateways of the enterprise).
Regardless of the gateway configuration, however, the potential attacks by insiders and outsiders are the same.
Use of manually configured preshared keys for IPsec between relay agents and servers does not defend against replayed DHCP messages.
Replayed messages can represent a DOS attack through exhaustion of processing resources, but not through mis configuration or exhaustion of other resources such as assignable addresses.
One attack specific to a DHCP client is the establishment of a malicious server with the intent of providing incorrect configuration information to the client.
The motivation for doing so may be to mount a "man in the middle" attack that causes the client to communicate with a malicious server instead of a valid server for some service such as DNS or NTP.
The malicious server may also mount a denial of service attack through misconfiguration of the client that causes all network communication from the client to fail.
There is another threat to DHCP clients from mistakenly or accidentally configured DHCP servers that answer DHCP client requests with unintentionally incorrect configuration parameters.
A DHCP client may also be subject to attack through the receipt of a Reconfigure message from a malicious server that causes the client to obtain incorrect configuration information from that server.
Note that although a client sends its response (Renew or Information request message) through a relay agent and, therefore, that response will only be received by servers to which DHCP messages are relayed, a malicious server could send a Reconfigure message to a client, followed (after an appropriate delay) by a Reply message that would be accepted by the client.
Thus, a malicious server that is not on the network path between the client and the server may still be able to mount a Reconfigure attack on a client.
The use of transaction IDs that are cryptographically sound and cannot easily be predicted will also reduce the probability that such an attack will be successful.
The threat specific to a DHCP server is an invalid client masquerading as a valid client.
The motivation for this may be for theft of service, or to circumvent auditing for any number of nefarious purposes.
The threat common to both the client and the server is the resource "denial of service" (DoS) attack.
These attacks typically involve the exhaustion of available addresses, or the exhaustion of CPU or network bandwidth, and are present anytime there is a shared resource.
In the case where relay agents add additional options to Relay Forward messages, the messages exchanged between relay agents and servers may be used to mount a "man in the middle" or denial of service attack.
This threat model does not consider the privacy of the contents of DHCP messages to be important.
DHCP is not used to exchange authentication or configuration information that must be kept secret from other networks nodes.
DHCP authentication provides for authentication of the identity of DHCP clients and servers, and for the integrity of messages delivered between DHCP clients and servers.
DHCP authentication does not provide any privacy for the contents of DHCP messages.
The Delayed Authentication protocol described in section 21.4 uses a secret key that is shared between a client and a server.
The use of a "DHCP realm" in the shared key allows identification of administrative domains so that a client can select the appropriate key or keys when roaming between administrative domains.
However, the Delayed Authentication protocol does not define any mechanism for sharing of keys, so a client may require separate keys for each administrative domain it encounters.
The use of shared keys may not scale well and does not provide for repudiation of compromised keys.
This protocol is focused on solving the intradomain problem where the out of band exchange of a shared key is feasible.
Because of the opportunity for attack through the Reconfigure message, a DHCP client MUST discard any Reconfigure message that does not include authentication or that does not pass the validation process for the authentication protocol.
The Reconfigure Key protocol described in section 21.5 provides protection against the use of a Reconfigure message by a malicious DHCP server to mount a denial of service or man in the middle attack on a client.
This protocol can be compromised by an attacker that can intercept the initial message in which the DHCP server sends the key to the client.
Communication between a server and a relay agent, and communication between relay agents, can be secured through the use of IPSec, as described in section 21.1.
The use of manual configuration and installation of static keys are acceptable in this instance because relay agents and the server will belong to the same administrative domain and the relay agents will require other specific configuration (for example, configuration of the DHCP server address) as well as the IPSec configuration.
This document defines several new name spaces associated with DHCPv6 and DHCPv6 options:  Message types  Status codes
DUID  Option codes IANA has established a registry of values for each of these name spaces, which are described in the remainder of this section.
These name spaces will be managed by the IANA and all will be managed separately from the name spaces defined for DHCPv4.
New multicast addresses, message types, status codes, and DUID types are assigned via Standards Action [11].
New DHCP option codes are tentatively assigned after the specification for the associated option, published as an Internet Draft, has received expert review by a designated expert [11].
The final assignment of DHCP option codes is through Standards Action, as defined in RFC 2434 [11].
This document also references three name spaces in section 21 that are associated with the Authentication Option (section 22.11).
These name spaces are defined by the authentication mechanism for DHCPv4 in RFC 3118 [4].
The authentication name spaces currently registered by IANA will apply to both DHCPv6 and DHCPv4.
In the future, specifications that define new Protocol, Algorithm and RDM mechanisms will explicitly define whether the new mechanisms are used with DHCPv4, DHCPv6 or both.
Multicast Addresses Section 5.1 defines the following multicast addresses, which have been assigned by IANA for use by DHCPv6:
All DHCP Relay Agents and Servers address:
DHCP Message Types IANA has recorded the following message types (defined in section 5.3).
IANA will maintain the registry of DHCP message types.
DHCP Options IANA has recorded the following option codes (as defined in section 22).
IANA will maintain the registry of DHCP option codes.
16 OPTION VENDOR OPTS    17 OPTION
19 OPTION RECONF ACCEPT  20 24.4.
Status Codes IANA has recorded the status codes defined in the following table.
IANA will manage the definition of additional status codes in the future.
NoAddrsAvail    2 Server has no addresses available to assign to the IA(s).
The prefix for the address is not appropriate for the link to which the client is attached.
UseMulticast    5 Sent by a server to a client to force the client to send messages to the server.
using the All DHCP Relay Agents and Servers address.
DUID IANA has recorded the following DUID types (as defined in section 9.1).
IANA will manage the definition of additional DUID types in the future.
Only included in Information Request messages that are sent in response to a Reconfigure (see section 19.4.3).
B. Appearance of Options in the Options Field of DHCP Options
Option  IA NA/ IAADDR Relay
The working group can be contacted via the current chair: Ralph Droms Cisco Systems 1414
Massachusetts Avenue Boxborough, MA 01719
(978) 936 1674 EMail: rdroms@cisco.com
