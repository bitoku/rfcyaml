- title: __initial_text__
  contents:
  - '                      Internet Relay Chat Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The IRC protocol was developed over the last 4 years since it was\n\
    \   first implemented as a means for users on a BBS to chat amongst\n   themselves.\
    \  Now it supports a world-wide network of servers and\n   clients, and is stringing\
    \ to cope with growth. Over the past 2 years,\n   the average number of users\
    \ connected to the main IRC network has\n   grown by a factor of 10.\n   The IRC\
    \ protocol is a text-based protocol, with the simplest client\n   being any socket\
    \ program capable of connecting to the server.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  INTRODUCTION ...............................................\
    \    4\n      1.1  Servers ................................................  \
    \  4\n      1.2  Clients ................................................    5\n\
    \         1.2.1 Operators ..........................................    5\n  \
    \    1.3 Channels ................................................    5\n    \
    \  1.3.1  Channel Operators ....................................    6\n   2. THE\
    \ IRC SPECIFICATION .......................................    7\n      2.1 Overview\
    \ ................................................    7\n      2.2 Character codes\
    \ .........................................    7\n      2.3 Messages ................................................\
    \    7\n         2.3.1  Message format in 'pseudo' BNF ....................  \
    \  8\n      2.4 Numeric replies .........................................   10\n\
    \   3. IRC Concepts ................................................   10\n  \
    \    3.1 One-to-one communication ................................   10\n    \
    \  3.2 One-to-many .............................................   11\n      \
    \   3.2.1 To a list ..........................................   11\n        \
    \ 3.2.2 To a group (channel) ...............................   11\n         3.2.3\
    \ To a host/server mask ..............................   12\n      3.3 One to\
    \ all ..............................................   12\n         3.3.1 Client\
    \ to Client ...................................   12\n         3.3.2 Clients to\
    \ Server ..................................   12\n         3.3.3 Server to Server\
    \ ...................................   12\n   4. MESSAGE DETAILS .............................................\
    \   13\n      4.1 Connection Registration .................................  \
    \ 13\n         4.1.1 Password message ...................................   14\n\
    \         4.1.2 Nickname message ...................................   14\n  \
    \       4.1.3 User message .......................................   15\n    \
    \     4.1.4 Server message .....................................   16\n      \
    \   4.1.5 Operator message ...................................   17\n        \
    \ 4.1.6 Quit message .......................................   17\n         4.1.7\
    \ Server Quit message ................................   18\n      4.2 Channel\
    \ operations ......................................   19\n         4.2.1 Join\
    \ message .......................................   19\n         4.2.2 Part message\
    \ .......................................   20\n         4.2.3 Mode message .......................................\
    \   21\n            4.2.3.1 Channel modes .................................  \
    \ 21\n            4.2.3.2 User modes ....................................   22\n\
    \         4.2.4 Topic message ......................................   23\n  \
    \       4.2.5 Names message ......................................   24\n    \
    \     4.2.6 List message .......................................   24\n      \
    \   4.2.7 Invite message .....................................   25\n        \
    \ 4.2.8 Kick message .......................................   25\n      4.3 Server\
    \ queries and commands .............................   26\n         4.3.1 Version\
    \ message ....................................   26\n         4.3.2 Stats message\
    \ ......................................   27\n         4.3.3 Links message ......................................\
    \   28\n         4.3.4 Time message .......................................  \
    \ 29\n         4.3.5 Connect message ....................................   29\n\
    \         4.3.6 Trace message ......................................   30\n  \
    \       4.3.7 Admin message ......................................   31\n    \
    \     4.3.8 Info message .......................................   31\n      4.4\
    \ Sending messages ........................................   32\n         4.4.1\
    \ Private messages ...................................   32\n         4.4.2 Notice\
    \ messages ....................................   33\n      4.5 User-based queries\
    \ ......................................   33\n         4.5.1 Who query ..........................................\
    \   33\n         4.5.2 Whois query ........................................  \
    \ 34\n         4.5.3 Whowas message .....................................   35\n\
    \      4.6 Miscellaneous messages ..................................   35\n  \
    \       4.6.1 Kill message .......................................   36\n    \
    \     4.6.2 Ping message .......................................   37\n      \
    \   4.6.3 Pong message .......................................   37\n        \
    \ 4.6.4 Error message ......................................   38\n   5. OPTIONAL\
    \ MESSAGES ...........................................   38\n      5.1 Away message\
    \ ............................................   38\n      5.2 Rehash command\
    \ ..........................................   39\n      5.3 Restart command .........................................\
    \   39\n      5.4 Summon message ..........................................  \
    \ 40\n      5.5 Users message ...........................................   40\n\
    \      5.6 Operwall command ........................................   41\n  \
    \    5.7 Userhost message ........................................   42\n    \
    \  5.8 Ison message ............................................   42\n   6. REPLIES\
    \ .....................................................   43\n      6.1 Error\
    \ Replies ...........................................   43\n      6.2 Command\
    \ responses .......................................   48\n      6.3 Reserved numerics\
    \ .......................................   56\n   7. Client and server authentication\
    \ ............................   56\n   8. Current Implementations Details .............................\
    \   56\n      8.1 Network protocol: TCP ...................................  \
    \ 57\n         8.1.1 Support of Unix sockets ............................   57\n\
    \      8.2 Command Parsing .........................................   57\n  \
    \    8.3 Message delivery ........................................   57\n    \
    \  8.4 Connection 'Liveness' ...................................   58\n      8.5\
    \ Establishing a server-client connection .................   58\n      8.6 Establishing\
    \ a server-server connection .................   58\n         8.6.1 State information\
    \ exchange when connecting .........   59\n      8.7 Terminating server-client\
    \ connections ...................   59\n      8.8 Terminating server-server connections\
    \ ...................   59\n      8.9 Tracking nickname changes ...............................\
    \   60\n      8.10 Flood control of clients ...............................  \
    \ 60\n      8.11 Non-blocking lookups ...................................   61\n\
    \         8.11.1 Hostname (DNS) lookups ............................   61\n  \
    \       8.11.2 Username (Ident) lookups ..........................   61\n    \
    \  8.12 Configuration file .....................................   61\n      \
    \   8.12.1 Allowing clients to connect .......................   62\n        \
    \ 8.12.2 Operators .........................................   62\n         8.12.3\
    \ Allowing servers to connect .......................   62\n         8.12.4 Administrivia\
    \ .....................................   63\n      8.13 Channel membership .....................................\
    \   63\n   9. Current problems ............................................  \
    \ 63\n      9.1 Scalability .............................................   63\n\
    \      9.2 Labels ..................................................   63\n  \
    \       9.2.1 Nicknames ..........................................   63\n    \
    \     9.2.2 Channels ...........................................   64\n      \
    \   9.2.3 Servers ............................................   64\n      9.3\
    \ Algorithms ..............................................   64\n   10. Support\
    \ and availability ...................................   64\n   11. Security Considerations\
    \ ....................................   65\n   12. Authors' Addresses .........................................\
    \   65\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   The IRC (Internet Relay Chat) protocol has been designed\
    \ over a\n   number of years for use with text based conferencing.  This document\n\
    \   describes the current IRC protocol.\n   The IRC protocol has been developed\
    \ on systems using the TCP/IP\n   network protocol, although there is no requirement\
    \ that this remain\n   the only sphere in which it operates.\n   IRC itself is\
    \ a teleconferencing system, which (through the use of\n   the client-server model)\
    \ is well-suited to running on many machines\n   in a distributed fashion.  A\
    \ typical setup involves a single process\n   (the server) forming a central point\
    \ for clients (or other servers)\n   to connect to, performing the required message\
    \ delivery/multiplexing\n   and other functions.\n"
- title: 1.1 Servers
  contents:
  - "1.1 Servers\n   The server forms the backbone of IRC, providing a point to which\n\
    \   clients may connect to to talk to each other, and a point for other\n   servers\
    \ to connect to, forming an IRC network.  The only network\n   configuration allowed\
    \ for IRC servers is that of a spanning tree [see\n   Fig. 1] where each server\
    \ acts as a central node for the rest of the\n   net it sees.\n              \
    \             [ Server 15 ]  [ Server 13 ] [ Server 14]\n                    \
    \             /                \\         /\n                                /\
    \                  \\       /\n        [ Server 11 ] ------ [ Server 1 ]     \
    \  [ Server 12]\n                              /        \\          /\n      \
    \                       /          \\        /\n                  [ Server 2 ]\
    \          [ Server 3 ]\n                    /       \\                      \\\
    \n                   /         \\                      \\\n           [ Server\
    \ 4 ]    [ Server 5 ]         [ Server 6 ]\n            /    |    \\         \
    \                  /\n           /     |     \\                         /\n  \
    \        /      |      \\____                   /\n         /       |        \
    \   \\                 /\n [ Server 7 ] [ Server 8 ] [ Server 9 ]   [ Server 10\
    \ ]\n                                  :\n                               [ etc.\
    \ ]\n                                  :\n                 [ Fig. 1. Format of\
    \ IRC server network ]\n"
- title: 1.2 Clients
  contents:
  - "1.2 Clients\n   A client is anything connecting to a server that is not another\n\
    \   server.  Each client is distinguished from other clients by a unique\n   nickname\
    \ having a maximum length of nine (9) characters.  See the\n   protocol grammar\
    \ rules for what may and may not be used in a\n   nickname.  In addition to the\
    \ nickname, all servers must have the\n   following information about all clients:\
    \ the real name of the host\n   that the client is running on, the username of\
    \ the client on that\n   host, and the server to which the client is connected.\n"
- title: 1.2.1 Operators
  contents:
  - "1.2.1 Operators\n   To allow a reasonable amount of order to be kept within the\
    \ IRC\n   network, a special class of clients (operators) is allowed to perform\n\
    \   general maintenance functions on the network.  Although the powers\n   granted\
    \ to an operator can be considered as 'dangerous', they are\n   nonetheless required.\
    \  Operators should be able to perform basic\n   network tasks such as disconnecting\
    \ and reconnecting servers as\n   needed to prevent long-term use of bad network\
    \ routing.  In\n   recognition of this need, the protocol discussed herein provides\
    \ for\n   operators only to be able to perform such functions.  See sections\n\
    \   4.1.7 (SQUIT) and 4.3.5 (CONNECT).\n   A more controversial power of operators\
    \ is the ability  to  remove  a\n   user  from  the connected network by 'force',\
    \ i.e. operators are able\n   to close the connection between any client and server.\
    \   The\n   justification for  this  is delicate since its abuse is both\n   destructive\
    \ and annoying.  For further details on this type of\n   action, see section 4.6.1\
    \ (KILL).\n"
- title: 1.3 Channels
  contents:
  - "1.3 Channels\n   A channel is a named group of one or more clients which will\
    \ all\n   receive messages addressed to that channel.  The channel is created\n\
    \   implicitly when the first client joins it, and the channel ceases to\n   exist\
    \ when the last client leaves it.  While channel exists, any\n   client can reference\
    \ the channel using the name of the channel.\n   Channels names are strings (beginning\
    \ with a '&' or '#' character) of\n   length up to 200 characters.  Apart from\
    \ the the requirement that the\n   first character being either '&' or '#'; the\
    \ only restriction on a\n   channel name is that it may not contain any spaces\
    \ (' '), a control G\n   (^G or ASCII 7), or a comma (',' which is used as a list\
    \ item\n   separator by the protocol).\n   There are two types of channels allowed\
    \ by this protocol.  One is a\n   distributed channel which is known to all the\
    \ servers that are\n   connected to the network. These channels are marked by\
    \ the first\n   character being a only clients on the server where it exists may\
    \ join\n   it.  These are distinguished by a leading '&' character.  On top of\n\
    \   these two types, there are the various channel modes available to\n   alter\
    \ the characteristics of individual channels.  See section 4.2.3\n   (MODE command)\
    \ for more details on this.\n   To create a new channel or become part of an existing\
    \ channel, a user\n   is required to JOIN the channel.  If the channel doesn't\
    \ exist prior\n   to joining, the channel is created and the creating user becomes\
    \ a\n   channel operator.  If the channel already exists, whether or not your\n\
    \   request to JOIN that channel is honoured depends on the current modes\n  \
    \ of the channel. For example, if the channel is invite-only, (+i),\n   then you\
    \ may only join if invited.  As part of the protocol, a user\n   may be a part\
    \ of several channels at once, but a limit of ten (10)\n   channels is recommended\
    \ as being ample for both experienced and\n   novice users.  See section 8.13\
    \ for more information on this.\n   If the IRC network becomes disjoint because\
    \ of a split between two\n   servers, the channel on each side is only composed\
    \ of those clients\n   which are connected to servers on the respective sides\
    \ of the split,\n   possibly ceasing to exist on one side of the split.  When\
    \ the split\n   is healed, the connecting servers announce to each other who they\n\
    \   think is in each channel and the mode of that channel.  If the\n   channel\
    \ exists on both sides, the JOINs and MODEs are interpreted in\n   an inclusive\
    \ manner so that both sides of the new connection will\n   agree about which clients\
    \ are in the channel and what modes the\n   channel has.\n"
- title: 1.3.1 Channel Operators
  contents:
  - "1.3.1 Channel Operators\n   The channel operator (also referred to as a \"chop\"\
    \ or \"chanop\") on a\n   given channel is considered to 'own' that channel. \
    \ In recognition of\n   this status, channel operators are endowed with certain\
    \ powers which\n   enable them to keep control and some sort of sanity in their\
    \ channel.\n   As an owner of a channel, a channel operator is not required to\
    \ have\n   reasons for their actions, although if their actions are generally\n\
    \   antisocial or otherwise abusive, it might be reasonable to ask an IRC\n  \
    \ operator to intervene, or for the usersjust leave and go elsewhere\n   and form\
    \ their own channel.\n   The commands which may only be used by channel operators\
    \ are:\n        KICK    - Eject a client from the channel\n        MODE    - Change\
    \ the channel's mode\n        INVITE  - Invite a client to an invite-only channel\
    \ (mode +i)\n        TOPIC   - Change the channel topic in a mode +t channel\n\
    \   A channel operator is identified by the '@' symbol next to their\n   nickname\
    \ whenever it is associated with a channel (ie replies to the\n   NAMES, WHO and\
    \ WHOIS commands).\n"
- title: 2. The IRC Specification
  contents:
  - '2. The IRC Specification

    '
- title: 2.1 Overview
  contents:
  - "2.1 Overview\n   The protocol as described herein is for use both with server\
    \ to\n   server and client to server connections.  There are, however, more\n\
    \   restrictions on client connections (which are considered to be\n   untrustworthy)\
    \ than on server connections.\n"
- title: 2.2 Character codes
  contents:
  - "2.2 Character codes\n   No specific character set is specified. The protocol\
    \ is based on a a\n   set of codes which are composed of eight (8) bits, making\
    \ up an\n   octet.  Each message may be composed of any number of these octets;\n\
    \   however, some octet values are used for control codes which act as\n   message\
    \ delimiters.\n   Regardless of being an 8-bit protocol, the delimiters and keywords\n\
    \   are such that protocol is mostly usable from USASCII terminal and a\n   telnet\
    \ connection.\n   Because of IRC's scandanavian origin, the characters {}| are\n\
    \   considered to be the lower case equivalents of the characters []\\,\n   respectively.\
    \ This is a critical issue when determining the\n   equivalence of two nicknames.\n"
- title: 2.3 Messages
  contents:
  - "2.3 Messages\n   Servers and clients send eachother messages which may or may\
    \ not\n   generate a reply.  If the message contains a valid command, as\n   described\
    \ in later sections, the client should expect a reply as\n   specified but it\
    \ is not advised to wait forever for the reply; client\n   to server and server\
    \ to server communication is essentially\n   asynchronous in nature.\n   Each\
    \ IRC message may consist of up to three main parts: the prefix\n   (optional),\
    \ the command, and the command parameters (of which there\n   may be up to 15).\
    \  The prefix, command, and all parameters are\n   separated by one (or more)\
    \ ASCII space character(s) (0x20).\n   The presence of a prefix is indicated with\
    \ a single leading ASCII\n   colon character (':', 0x3b), which must be the first\
    \ character of the\n   message itself.  There must be no gap (whitespace) between\
    \ the colon\n   and the prefix.  The prefix is used by servers to indicate the\
    \ true\n   origin of the message.  If the prefix is missing from the message,\
    \ it\n   is assumed to have originated from the connection from which it was\n\
    \   received.  Clients should not use prefix when sending a message from\n   themselves;\
    \ if they use a prefix, the only valid prefix is the\n   registered nickname associated\
    \ with the client.  If the source\n   identified by the prefix cannot be found\
    \ from the server's internal\n   database, or if the source is registered from\
    \ a different link than\n   from which the message arrived, the server must ignore\
    \ the message\n   silently.\n   The command must either be a valid IRC command\
    \ or a three (3) digit\n   number represented in ASCII text.\n   IRC messages\
    \ are always lines of characters terminated with a CR-LF\n   (Carriage Return\
    \ - Line Feed) pair, and these messages shall not\n   exceed 512 characters in\
    \ length, counting all characters including\n   the trailing CR-LF. Thus, there\
    \ are 510 characters maximum allowed\n   for the command and its parameters. \
    \ There is no provision for\n   continuation message lines.  See section 7 for\
    \ more details about\n   current implementations.\n"
- title: 2.3.1 Message format in 'pseudo' BNF
  contents:
  - "2.3.1 Message format in 'pseudo' BNF\n   The protocol messages must be extracted\
    \ from the contiguous stream of\n   octets.  The current solution is to designate\
    \ two characters, CR and\n   LF, as message separators.   Empty  messages  are\
    \  silently  ignored,\n   which permits  use  of  the  sequence  CR-LF  between\
    \  messages\n   without extra problems.\n   The extracted message is parsed into\
    \ the components <prefix>,\n   <command> and list of parameters matched either\
    \ by <middle> or\n   <trailing> components.\n   The BNF representation for this\
    \ is:\n"
- title: <message>  ::= [':' <prefix> <SPACE> ] <command> <params> <crlf>
  contents:
  - '<message>  ::= ['':'' <prefix> <SPACE> ] <command> <params> <crlf>

    '
- title: <prefix>   ::= <servername> | <nick> [ '!' <user> ] [ '@' <host> ]
  contents:
  - '<prefix>   ::= <servername> | <nick> [ ''!'' <user> ] [ ''@'' <host> ]

    '
- title: <command>  ::= <letter> { <letter> } | <number> <number> <number>
  contents:
  - '<command>  ::= <letter> { <letter> } | <number> <number> <number>

    '
- title: <SPACE>    ::= ' ' { ' ' }
  contents:
  - '<SPACE>    ::= '' '' { '' '' }

    '
- title: <params>   ::= <SPACE> [ ':' <trailing> | <middle> <params> ]
  contents:
  - '<params>   ::= <SPACE> [ '':'' <trailing> | <middle> <params> ]

    '
- title: <middle>   ::= <Any *non-empty* sequence of octets not including SPACE
  contents:
  - "<middle>   ::= <Any *non-empty* sequence of octets not including SPACE\n    \
    \           or NUL or CR or LF, the first of which may not be ':'>\n"
- title: <trailing> ::= <Any, possibly *empty*, sequence of octets not including
  contents:
  - "<trailing> ::= <Any, possibly *empty*, sequence of octets not including\n   \
    \              NUL or CR or LF>\n"
- title: <crlf>     ::= CR LF
  contents:
  - '<crlf>     ::= CR LF

    '
- title: 'NOTES:'
  contents:
  - "NOTES:\n  1)    <SPACE> is consists only of SPACE character(s) (0x20).\n    \
    \    Specially notice that TABULATION, and all other control\n        characters\
    \ are considered NON-WHITE-SPACE.\n  2)    After extracting the parameter list,\
    \ all parameters are equal,\n        whether matched by <middle> or <trailing>.\
    \ <Trailing> is just\n        a syntactic trick to allow SPACE within parameter.\n\
    \  3)    The fact that CR and LF cannot appear in parameter strings is\n     \
    \   just artifact of the message framing. This might change later.\n  4)    The\
    \ NUL character is not special in message framing, and\n        basically could\
    \ end up inside a parameter, but as it would\n        cause extra complexities\
    \ in normal C string handling. Therefore\n        NUL is not allowed within messages.\n\
    \  5)    The last parameter may be an empty string.\n  6)    Use of the extended\
    \ prefix (['!' <user> ] ['@' <host> ]) must\n        not be used in server to\
    \ server communications and is only\n        intended for server to client messages\
    \ in order to provide\n        clients with more useful information about who\
    \ a message is\n        from without the need for additional queries.\n   Most\
    \ protocol messages specify additional semantics and syntax for\n   the extracted\
    \ parameter strings dictated by their position in the\n   list.  For example,\
    \ many server commands will assume that the first\n   parameter after the command\
    \ is the list of targets, which can be\n   described with:\n   <target>     ::=\
    \ <to> [ \",\" <target> ]\n   <to>         ::= <channel> | <user> '@' <servername>\
    \ | <nick> | <mask>\n   <channel>    ::= ('#' | '&') <chstring>\n   <servername>\
    \ ::= <host>\n   <host>       ::= see RFC 952 [DNS:4] for details on allowed hostnames\n\
    \   <nick>       ::= <letter> { <letter> | <number> | <special> }\n   <mask> \
    \      ::= ('#' | '$') <chstring>\n   <chstring>   ::= <any 8bit code except SPACE,\
    \ BELL, NUL, CR, LF and\n                     comma (',')>\n   Other parameter\
    \ syntaxes are:\n   <user>       ::= <nonwhite> { <nonwhite> }\n   <letter>  \
    \   ::= 'a' ... 'z' | 'A' ... 'Z'\n   <number>     ::= '0' ... '9'\n   <special>\
    \    ::= '-' | '[' | ']' | '\\' | '`' | '^' | '{' | '}'\n   <nonwhite>   ::= <any\
    \ 8bit code except SPACE (0x20), NUL (0x0), CR\n                     (0xd), and\
    \ LF (0xa)>\n"
- title: 2.4 Numeric replies
  contents:
  - "2.4 Numeric replies\n   Most of the messages sent to the server generate a reply\
    \ of some\n   sort.  The most common reply is the numeric reply, used for both\n\
    \   errors and normal replies.  The numeric reply must be sent as one\n   message\
    \ consisting of the sender prefix, the three digit numeric, and\n   the target\
    \ of the reply.  A numeric reply is not allowed to originate\n   from a client;\
    \ any such messages received by a server are silently\n   dropped. In all other\
    \ respects, a numeric reply is just like a normal\n   message, except that the\
    \ keyword is made up of 3 numeric digits\n   rather than a string of letters.\
    \  A list of different replies is\n   supplied in section 6.\n"
- title: 3. IRC Concepts.
  contents:
  - "3. IRC Concepts.\n   This section is devoted to describing the actual concepts\
    \ behind  the\n   organization  of  the  IRC  protocol and how the current\n \
    \  implementations deliver different classes of messages.\n                  \
    \        1--\\\n                              A        D---4\n               \
    \           2--/ \\      /\n                                B----C\n         \
    \                      /      \\\n                              3        E\n \
    \  Servers: A, B, C, D, E         Clients: 1, 2, 3, 4\n                    [ Fig.\
    \ 2. Sample small IRC network ]\n"
- title: 3.1 One-to-one communication
  contents:
  - "3.1 One-to-one communication\n   Communication on a one-to-one basis is usually\
    \ only performed by\n   clients, since most server-server traffic is not a result\
    \ of servers\n   talking only to each other.  To provide a secure means for clients\
    \ to\n   talk to each other, it is required that all servers be able to send a\n\
    \   message in exactly one direction along the spanning tree in order to\n   reach\
    \ any client.  The path of a message being delivered is the\n   shortest path\
    \ between any two points on the spanning tree.\n   The following examples all\
    \ refer to Figure 2 above.\n"
- title: 'Example 1:'
  contents:
  - "Example 1:\n     A message between clients 1 and 2 is only seen by server A,\
    \ which\n     sends it straight to client 2.\n"
- title: 'Example 2:'
  contents:
  - "Example 2:\n     A message between clients 1 and 3 is seen by servers A & B,\
    \ and\n     client 3.  No other clients or servers are allowed see the message.\n"
- title: 'Example 3:'
  contents:
  - "Example 3:\n     A message between clients 2 and 4 is seen by servers A, B, C\
    \ & D\n     and client 4 only.\n"
- title: 3.2 One-to-many
  contents:
  - "3.2 One-to-many\n   The main goal of IRC is to provide a  forum  which  allows\
    \  easy  and\n   efficient  conferencing (one to many conversations).  IRC offers\n\
    \   several means to achieve this, each serving its own purpose.\n"
- title: 3.2.1 To a list
  contents:
  - "3.2.1 To a list\n   The least efficient style of one-to-many conversation is\
    \ through\n   clients talking to a 'list' of users.  How this is done is almost\n\
    \   self explanatory: the client gives a list of destinations to which\n   the\
    \ message is to be delivered and the server breaks it up and\n   dispatches a\
    \ separate copy of the message to each given destination.\n   This isn't as efficient\
    \ as using a group since the destination list\n   is broken up and the dispatch\
    \ sent without checking to make sure\n   duplicates aren't sent down each path.\n"
- title: 3.2.2 To a group (channel)
  contents:
  - "3.2.2 To a group (channel)\n   In IRC the channel has a role equivalent to that\
    \ of the multicast\n   group; their existence is dynamic (coming and going as\
    \ people join\n   and leave channels) and the actual conversation carried out\
    \ on a\n   channel is only sent to servers which are supporting users on a given\n\
    \   channel.  If there are multiple users on a server in the same\n   channel,\
    \ the message text is sent only once to that server and then\n   sent to each\
    \ client on the channel.  This action is then repeated for\n   each client-server\
    \ combination until the original message has fanned\n   out and reached each member\
    \ of the channel.\n   The following examples all refer to Figure 2.\n"
- title: 'Example 4:'
  contents:
  - "Example 4:\n     Any channel with 1 client in it. Messages to the channel go\
    \ to the\n     server and then nowhere else.\n"
- title: 'Example 5:'
  contents:
  - "Example 5:\n     2 clients in a channel. All messages traverse a path as if they\n\
    \     were private messages between the two clients outside a channel.\n"
- title: 'Example 6:'
  contents:
  - "Example 6:\n     Clients 1, 2 and 3 in a channel.  All messages to the channel\
    \ are\n     sent to all clients and only those servers which must be traversed\n\
    \     by the message if it were a private message to a single client.  If\n  \
    \   client 1 sends a message, it goes back to client 2 and then via\n     server\
    \ B to client 3.\n"
- title: 3.2.3 To a host/server mask
  contents:
  - "3.2.3 To a host/server mask\n   To provide IRC operators with some mechanism\
    \ to send  messages  to  a\n   large body of related users, host and server mask\
    \ messages are\n   provided.  These messages are sent to users whose host or server\n\
    \   information  match that  of  the mask.  The messages are only sent to\n  \
    \ locations where users are, in a fashion similar to that of channels.\n"
- title: 3.3 One-to-all
  contents:
  - "3.3 One-to-all\n   The one-to-all type of message is better described as a broadcast\n\
    \   message, sent to all clients or servers or both.  On a large network\n   of\
    \ users and servers, a single message can result in a lot of traffic\n   being\
    \ sent over the network in an effort to reach all of the desired\n   destinations.\n\
    \   For some messages, there is no option but to broadcast it to all\n   servers\
    \ so that the state information held by each server is\n   reasonably consistent\
    \ between servers.\n"
- title: 3.3.1 Client-to-Client
  contents:
  - "3.3.1 Client-to-Client\n   There is no class of message which, from a single\
    \ message, results in\n   a message being sent to every other client.\n"
- title: 3.3.2 Client-to-Server
  contents:
  - "3.3.2 Client-to-Server\n   Most of the commands which result in a change of state\
    \ information\n   (such as channel membership, channel mode, user status, etc)\
    \ must be\n   sent to all servers by default, and this distribution may not be\n\
    \   changed by the client.\n"
- title: 3.3.3 Server-to-Server.
  contents:
  - "3.3.3 Server-to-Server.\n   While most messages between servers are distributed\
    \ to all 'other'\n   servers, this is only required for any message that affects\
    \ either a\n   user, channel or server.  Since these are the basic items found\
    \ in\n   IRC, nearly all messages originating from a server are broadcast to\n\
    \   all other connected servers.\n"
- title: 4. Message details
  contents:
  - "4. Message details\n   On the following pages are descriptions of each message\
    \ recognized by\n   the IRC server and client.  All commands described in this\
    \ section\n   must be implemented by any server for this protocol.\n   Where the\
    \ reply ERR_NOSUCHSERVER is listed, it means that the\n   <server> parameter could\
    \ not be found.  The server must not send any\n   other replies after this for\
    \ that command.\n   The server to which a client is connected is required to parse\
    \ the\n   complete message, returning any appropriate errors.  If the server\n\
    \   encounters a fatal error while parsing a message, an error must be\n   sent\
    \ back to the client and the parsing terminated.  A fatal error\n   may be considered\
    \ to be incorrect command, a destination which is\n   otherwise unknown to the\
    \ server (server, nick or channel names fit\n   this category), not enough parameters\
    \ or incorrect privileges.\n   If a full set of parameters is presented, then\
    \ each must be checked\n   for validity and appropriate responses sent back to\
    \ the client.  In\n   the case of messages which use parameter lists using the\
    \ comma as an\n   item separator, a reply must be sent for each item.\n   In the\
    \ examples below, some messages appear using the full format:\n   :Name COMMAND\
    \ parameter list\n   Such examples represent a message from \"Name\" in transit\
    \ between\n   servers, where it is essential to include the name of the original\n\
    \   sender of the message so remote servers may send back a reply along\n   the\
    \ correct path.\n"
- title: 4.1 Connection Registration
  contents:
  - "4.1 Connection Registration\n   The commands described here are used to register\
    \ a connection with an\n   IRC server as either a user or a server as well as\
    \ correctly\n   disconnect.\n   A \"PASS\" command is not required for either\
    \ client or server\n   connection to be registered, but it must precede the server\
    \ message\n   or the latter of the NICK/USER combination.  It is strongly\n  \
    \ recommended that all server connections have a password in order to\n   give\
    \ some level of security to the actual connections.  The\n   recommended order\
    \ for a client to register is as follows:\n           1. Pass message\n      \
    \     2. Nick message\n           3. User message\n"
- title: 4.1.1 Password message
  contents:
  - "4.1.1 Password message\n      Command: PASS\n   Parameters: <password>\n   The\
    \ PASS command is used to set a 'connection password'.  The\n   password can and\
    \ must be set before any attempt to register the\n   connection is made.  Currently\
    \ this requires that clients send a PASS\n   command before sending the NICK/USER\
    \ combination and servers *must*\n   send a PASS command before any SERVER command.\
    \  The password supplied\n   must match the one contained in the C/N lines (for\
    \ servers) or I\n   lines (for clients).  It is possible to send multiple PASS\
    \ commands\n   before registering but only the last one sent is used for\n   verification\
    \ and it may not be changed once registered.  Numeric\n   Replies:\n         \
    \  ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED\n   Example:\n       \
    \    PASS secretpasswordhere\n"
- title: 4.1.2 Nick message
  contents:
  - "4.1.2 Nick message\n      Command: NICK\n   Parameters: <nickname> [ <hopcount>\
    \ ]\n   NICK message is used to give user a nickname or change the previous\n\
    \   one.  The <hopcount> parameter is only used by servers to indicate\n   how\
    \ far away a nick is from its home server.  A local connection has\n   a hopcount\
    \ of 0.  If supplied by a client, it must be ignored.\n   If a NICK message arrives\
    \ at a server which already knows about an\n   identical nickname for another\
    \ client, a nickname collision occurs.\n   As a result of a nickname collision,\
    \ all instances of the nickname\n   are removed from the server's database, and\
    \ a KILL command is issued\n   to remove the nickname from all other server's\
    \ database. If the NICK\n   message causing the collision was a nickname change,\
    \ then the\n   original (old) nick must be removed as well.\n   If the server\
    \ recieves an identical NICK from a client which is\n   directly connected, it\
    \ may issue an ERR_NICKCOLLISION to the local\n   client, drop the NICK command,\
    \ and not generate any kills.\n   Numeric Replies:\n           ERR_NONICKNAMEGIVEN\
    \             ERR_ERRONEUSNICKNAME\n           ERR_NICKNAMEINUSE             \
    \  ERR_NICKCOLLISION\n   Example:\n   NICK Wiz                        ; Introducing\
    \ new nick \"Wiz\".\n   :WiZ NICK Kilroy                ; WiZ changed his nickname\
    \ to Kilroy.\n"
- title: 4.1.3 User message
  contents:
  - "4.1.3 User message\n      Command: USER\n   Parameters: <username> <hostname>\
    \ <servername> <realname>\n   The USER message is used at the beginning of connection\
    \ to specify\n   the username, hostname, servername and realname of s new user.\
    \  It is\n   also used in communication between servers to indicate new user\n\
    \   arriving on IRC, since only after both USER and NICK have been\n   received\
    \ from a client does a user become registered.\n   Between servers USER must to\
    \ be prefixed with client's NICKname.\n   Note that hostname and servername are\
    \ normally ignored by the IRC\n   server when the USER command comes from a directly\
    \ connected client\n   (for security reasons), but they are used in server to\
    \ server\n   communication.  This means that a NICK must always be sent to a\n\
    \   remote server when a new user is being introduced to the rest of the\n   network\
    \ before the accompanying USER is sent.\n   It must be noted that realname parameter\
    \ must be the last parameter,\n   because it may contain space characters and\
    \ must be prefixed with a\n   colon (':') to make sure this is recognised as such.\n\
    \   Since it is easy for a client to lie about its username by relying\n   solely\
    \ on the USER message, the use of an \"Identity Server\" is\n   recommended. \
    \ If the host which a user connects from has such a\n   server enabled the username\
    \ is set to that as in the reply from the\n   \"Identity Server\".\n   Numeric\
    \ Replies:\n           ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED\n\
    \   Examples:\n   USER guest tolmoon tolsun :Ronnie Reagan\n                 \
    \                  ; User registering themselves with a\n                    \
    \               username of \"guest\" and real name\n                        \
    \           \"Ronnie Reagan\".\n   :testnick USER guest tolmoon tolsun :Ronnie\
    \ Reagan\n                                   ; message between servers with the\n\
    \                                   nickname for which the USER command\n    \
    \                               belongs to\n"
- title: 4.1.4 Server message
  contents:
  - "4.1.4 Server message\n      Command: SERVER\n   Parameters: <servername> <hopcount>\
    \ <info>\n   The server message is used to tell a server that the other end of\
    \ a\n   new connection is a server. This message is also used to pass server\n\
    \   data over whole net.  When a new server is connected to net,\n   information\
    \ about it be broadcast to the whole network.  <hopcount>\n   is used to give\
    \ all servers some internal information on how far away\n   all servers are. \
    \ With a full server list, it would be possible to\n   construct a map of the\
    \ entire server tree, but hostmasks prevent this\n   from being done.\n   The\
    \ SERVER message must only be accepted from either (a) a connection\n   which\
    \ is yet to be registered and is attempting to register as a\n   server, or (b)\
    \ an existing connection to another server, in  which\n   case the SERVER message\
    \ is introducing a new server behind that\n   server.\n   Most errors that occur\
    \ with the receipt of a SERVER command result in\n   the connection being terminated\
    \ by the destination host (target\n   SERVER).  Error replies are usually sent\
    \ using the \"ERROR\" command\n   rather than the numeric since the ERROR command\
    \ has several useful\n   properties which make it useful here.\n   If a SERVER\
    \ message is parsed and attempts to introduce a server\n   which is already known\
    \ to the receiving server, the connection from\n   which that message must be\
    \ closed (following the correct procedures),\n   since a duplicate route to a\
    \ server has formed and the acyclic nature\n   of the IRC tree broken.\n   Numeric\
    \ Replies:\n           ERR_ALREADYREGISTRED\n   Example:\n"
- title: SERVER test.oulu.fi 1 :[tolsun.oulu.fi] Experimental server
  contents:
  - "SERVER test.oulu.fi 1 :[tolsun.oulu.fi] Experimental server\n               \
    \                 ; New server test.oulu.fi introducing\n                    \
    \            itself and attempting to register.  The\n                       \
    \         name in []'s is the hostname for the\n                             \
    \   host running test.oulu.fi.\n"
- title: :tolsun.oulu.fi SERVER csd.bu.edu 5 :BU Central Server
  contents:
  - ":tolsun.oulu.fi SERVER csd.bu.edu 5 :BU Central Server\n                    \
    \            ; Server tolsun.oulu.fi is our uplink\n                         \
    \       for csd.bu.edu which is 5 hops away.\n"
- title: 4.1.5 Oper
  contents:
  - "4.1.5 Oper\n      Command: OPER\n   Parameters: <user> <password>\n   OPER message\
    \ is used by a normal user to obtain operator privileges.\n   The combination\
    \ of <user> and <password> are required to gain\n   Operator privileges.\n   If\
    \ the client sending the OPER command supplies the correct password\n   for the\
    \ given user, the server then informs the rest of the network\n   of the new operator\
    \ by issuing a \"MODE +o\" for the clients nickname.\n   The OPER message is client-server\
    \ only.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS              RPL_YOUREOPER\n\
    \           ERR_NOOPERHOST                  ERR_PASSWDMISMATCH\n   Example:\n\
    \   OPER foo bar                    ; Attempt to register as an operator\n   \
    \                                using a username of \"foo\" and \"bar\" as\n\
    \                                   the password.\n"
- title: 4.1.6 Quit
  contents:
  - "4.1.6 Quit\n      Command: QUIT\n   Parameters: [<Quit message>]\n   A client\
    \ session is ended with a quit message.  The server must close\n   the connection\
    \ to a client which sends a QUIT message. If a \"Quit\n   Message\" is given,\
    \ this will be sent instead of the default message,\n   the nickname.\n   When\
    \ netsplits (disconnecting of two servers) occur, the quit message\n   is composed\
    \ of the names of two servers involved, separated by a\n   space.  The first name\
    \ is that of the server which is still connected\n   and the second name is that\
    \ of the server that has become\n   disconnected.\n   If, for some other reason,\
    \ a client connection is closed without  the\n   client  issuing  a  QUIT  command\
    \  (e.g.  client  dies and EOF occurs\n   on socket), the server is required to\
    \ fill in the quit  message  with\n   some sort  of  message  reflecting the nature\
    \ of the event which\n   caused it to happen.\n   Numeric Replies:\n         \
    \  None.\n   Examples:\n   QUIT :Gone to have lunch        ; Preferred message\
    \ format.\n"
- title: 4.1.7 Server quit message
  contents:
  - "4.1.7 Server quit message\n      Command: SQUIT\n   Parameters: <server> <comment>\n\
    \   The SQUIT message is needed to tell about quitting or dead servers.\n   If\
    \ a server wishes to break the connection to another server it must\n   send a\
    \ SQUIT message to the other server, using the the name of the\n   other server\
    \ as the server parameter, which then closes its\n   connection to the quitting\
    \ server.\n   This command is also available operators to help keep a network\
    \ of\n   IRC servers connected in an orderly fashion.  Operators may also\n  \
    \ issue an SQUIT message for a remote server connection.  In this case,\n   the\
    \ SQUIT must be parsed by each server inbetween the operator and\n   the remote\
    \ server, updating the view of the network held by each\n   server as explained\
    \ below.\n   The <comment> should be supplied by all operators who execute a SQUIT\n\
    \   for a remote server (that is not connected to the server they are\n   currently\
    \ on) so that other operators are aware for the reason of\n   this action.  The\
    \ <comment> is also filled in by servers which may\n   place an error or similar\
    \ message here.\n   Both of the servers which are on either side of the connection\
    \ being\n   closed are required to to send out a SQUIT message (to all its other\n\
    \   server connections) for all other servers which are considered to be\n   behind\
    \ that link.\n   Similarly, a QUIT message must be sent to the other connected\
    \ servers\n   rest of the network on behalf of all clients behind that link. \
    \ In\n   addition to this, all channel members of a channel which lost a\n   member\
    \ due to the split must be sent a QUIT message.\n   If a server connection is\
    \ terminated prematurely (e.g. the server  on\n   the  other  end  of  the  link\
    \  died),  the  server  which  detects\n   this disconnection is required to inform\
    \ the rest of  the  network\n   that  the connection  has  closed  and  fill \
    \ in  the comment field\n   with something appropriate.\n   Numeric replies:\n\
    \           ERR_NOPRIVILEGES                ERR_NOSUCHSERVER\n   Example:\n  \
    \ SQUIT tolsun.oulu.fi :Bad Link ? ; the server link tolson.oulu.fi has\n    \
    \                               been terminated because of \"Bad Link\".\n   :Trillian\
    \ SQUIT cm22.eng.umd.edu :Server out of control\n                            \
    \        ; message from Trillian to disconnect\n                             \
    \      \"cm22.eng.umd.edu\" from the net\n                                   \
    \ because \"Server out of control\".\n"
- title: 4.2 Channel operations
  contents:
  - "4.2 Channel operations\n   This group of messages is concerned with manipulating\
    \ channels, their\n   properties (channel modes), and their contents (typically\
    \ clients).\n   In implementing these, a number of race conditions are inevitable\n\
    \   when clients at opposing ends of a network send commands which will\n   ultimately\
    \ clash.  It is also required that servers keep a nickname\n   history to ensure\
    \ that wherever a <nick> parameter is given, the\n   server check its history\
    \ in case it has recently been changed.\n"
- title: 4.2.1 Join message
  contents:
  - "4.2.1 Join message\n      Command: JOIN\n   Parameters: <channel>{,<channel>}\
    \ [<key>{,<key>}]\n   The JOIN command is used by client to start listening a\
    \ specific\n   channel. Whether or not a client is allowed to join a channel is\n\
    \   checked only by the server the client is connected to; all other\n   servers\
    \ automatically add the user to the channel when it is received\n   from other\
    \ servers.  The conditions which affect this are as follows:\n           1.  the\
    \ user must be invited if the channel is invite-only;\n           2.  the user's\
    \ nick/username/hostname must not match any\n               active bans;\n   \
    \        3.  the correct key (password) must be given if it is set.\n   These\
    \ are discussed in more detail under the MODE command (see\n   section 4.2.3 for\
    \ more details).\n   Once a user has joined a channel, they receive notice about\
    \ all\n   commands their server receives which affect the channel.  This\n   includes\
    \ MODE, KICK, PART, QUIT and of course PRIVMSG/NOTICE.  The\n   JOIN command needs\
    \ to be broadcast to all servers so that each server\n   knows where to find the\
    \ users who are on the channel.  This allows\n   optimal delivery of PRIVMSG/NOTICE\
    \ messages to the channel.\n   If a JOIN is successful, the user is then sent\
    \ the channel's topic\n   (using RPL_TOPIC) and the list of users who are on the\
    \ channel (using\n   RPL_NAMREPLY), which must include the user joining.\n   Numeric\
    \ Replies:\n           ERR_NEEDMOREPARAMS              ERR_BANNEDFROMCHAN\n  \
    \         ERR_INVITEONLYCHAN              ERR_BADCHANNELKEY\n           ERR_CHANNELISFULL\
    \               ERR_BADCHANMASK\n           ERR_NOSUCHCHANNEL               ERR_TOOMANYCHANNELS\n\
    \           RPL_TOPIC\n   Examples:\n   JOIN #foobar                    ; join\
    \ channel #foobar.\n   JOIN &foo fubar                 ; join channel &foo using\
    \ key \"fubar\".\n   JOIN #foo,&bar fubar            ; join channel #foo using\
    \ key \"fubar\"\n                                   and &bar using no key.\n \
    \  JOIN #foo,#bar fubar,foobar     ; join channel #foo using key \"fubar\".\n\
    \                                   and channel #bar using key \"foobar\".\n \
    \  JOIN #foo,#bar                  ; join channels #foo and #bar.\n   :WiZ JOIN\
    \ #Twilight_zone        ; JOIN message from WiZ\n"
- title: 4.2.2 Part message
  contents:
  - "4.2.2 Part message\n      Command: PART\n   Parameters: <channel>{,<channel>}\n\
    \   The PART message causes the client sending the message to be removed\n   from\
    \ the list of active users for all given channels listed in the\n   parameter\
    \ string.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL\n\
    \           ERR_NOTONCHANNEL\n   Examples:\n   PART #twilight_zone           \
    \  ; leave channel \"#twilight_zone\"\n   PART #oz-ops,&group5            ; leave\
    \ both channels \"&group5\" and\n                                   \"#oz-ops\"\
    .\n"
- title: 4.2.3 Mode message
  contents:
  - "4.2.3 Mode message\n      Command: MODE\n   The MODE command is a dual-purpose\
    \ command in IRC.  It allows both\n   usernames and channels to have their mode\
    \ changed.  The rationale for\n   this choice is that one day nicknames will be\
    \ obsolete and the\n   equivalent property will be the channel.\n   When parsing\
    \ MODE messages, it is recommended that the entire message\n   be parsed first\
    \ and then the changes which resulted then passed on.\n"
- title: 4.2.3.1 Channel modes
  contents:
  - "4.2.3.1 Channel modes\n   Parameters: <channel> {[+|-]|o|p|s|i|t|n|b|v} [<limit>]\
    \ [<user>]\n               [<ban mask>]\n   The MODE command is provided so that\
    \ channel operators may change the\n   characteristics of `their' channel.  It\
    \ is also required that servers\n   be able to change channel modes so that channel\
    \ operators may be\n   created.\n   The various modes available for channels are\
    \ as follows:\n           o - give/take channel operator privileges;\n       \
    \    p - private channel flag;\n           s - secret channel flag;\n        \
    \   i - invite-only channel flag;\n           t - topic settable by channel operator\
    \ only flag;\n           n - no messages to channel from clients on the outside;\n\
    \           m - moderated channel;\n           l - set the user limit to channel;\n\
    \           b - set a ban mask to keep users out;\n           v - give/take the\
    \ ability to speak on a moderated channel;\n           k - set a channel key (password).\n\
    \   When using the 'o' and 'b' options, a restriction on a total of three\n  \
    \ per mode command has been imposed.  That is, any combination of 'o'\n   and\n"
- title: 4.2.3.2 User modes
  contents:
  - "4.2.3.2 User modes\n   Parameters: <nickname> {[+|-]|i|w|s|o}\n   The user MODEs\
    \ are typically changes which affect either how the\n   client is seen by others\
    \ or what 'extra' messages the client is sent.\n   A user MODE command may only\
    \ be accepted if both the sender of the\n   message and the nickname given as\
    \ a parameter are both the same.\n   The available modes are as follows:\n   \
    \        i - marks a users as invisible;\n           s - marks a user for receipt\
    \ of server notices;\n           w - user receives wallops;\n           o - operator\
    \ flag.\n   Additional modes may be available later on.\n   If a user attempts\
    \ to make themselves an operator using the \"+o\"\n   flag, the attempt should\
    \ be ignored.  There is no restriction,\n   however, on anyone `deopping' themselves\
    \ (using \"-o\").  Numeric\n   Replies:\n           ERR_NEEDMOREPARAMS       \
    \       RPL_CHANNELMODEIS\n           ERR_CHANOPRIVSNEEDED            ERR_NOSUCHNICK\n\
    \           ERR_NOTONCHANNEL                ERR_KEYSET\n           RPL_BANLIST\
    \                     RPL_ENDOFBANLIST\n           ERR_UNKNOWNMODE           \
    \      ERR_NOSUCHCHANNEL\n           ERR_USERSDONTMATCH              RPL_UMODEIS\n\
    \           ERR_UMODEUNKNOWNFLAG\n   Examples:\n           Use of Channel Modes:\n"
- title: 'MODE #Finnish +im               ; Makes #Finnish channel moderated and'
  contents:
  - "MODE #Finnish +im               ; Makes #Finnish channel moderated and\n    \
    \                            'invite-only'.\n"
- title: 'MODE #Finnish +o Kilroy         ; Gives ''chanop'' privileges to Kilroy
    on'
  contents:
  - "MODE #Finnish +o Kilroy         ; Gives 'chanop' privileges to Kilroy on\n  \
    \                              channel #Finnish.\n"
- title: 'MODE #Finnish +v Wiz            ; Allow WiZ to speak on #Finnish.'
  contents:
  - 'MODE #Finnish +v Wiz            ; Allow WiZ to speak on #Finnish.

    '
- title: 'MODE #Fins -s                   ; Removes ''secret'' flag from channel'
  contents:
  - "MODE #Fins -s                   ; Removes 'secret' flag from channel\n      \
    \                          #Fins.\n"
- title: 'MODE #42 +k oulu                ; Set the channel key to "oulu".'
  contents:
  - 'MODE #42 +k oulu                ; Set the channel key to "oulu".

    '
- title: 'MODE #eu-opers +l 10            ; Set the limit for the number of users'
  contents:
  - "MODE #eu-opers +l 10            ; Set the limit for the number of users\n   \
    \                             on channel to 10.\n"
- title: MODE &oulu +b                   ; list ban masks set for channel.
  contents:
  - 'MODE &oulu +b                   ; list ban masks set for channel.

    '
- title: MODE &oulu +b *!*@*             ; prevent all users from joining.
  contents:
  - 'MODE &oulu +b *!*@*             ; prevent all users from joining.

    '
- title: MODE &oulu +b *!*@*.edu         ; prevent any user from a hostname
  contents:
  - "MODE &oulu +b *!*@*.edu         ; prevent any user from a hostname\n        \
    \                        matching *.edu from joining.\n        Use of user Modes:\n"
- title: :MODE WiZ -w                    ; turns reception of WALLOPS messages
  contents:
  - ":MODE WiZ -w                    ; turns reception of WALLOPS messages\n     \
    \                           off for WiZ.\n"
- title: :Angel MODE Angel +i            ; Message from Angel to make themselves
  contents:
  - ":Angel MODE Angel +i            ; Message from Angel to make themselves\n   \
    \                             invisible.\n"
- title: MODE WiZ -o                     ; WiZ 'deopping' (removing operator
  contents:
  - "MODE WiZ -o                     ; WiZ 'deopping' (removing operator\n       \
    \                         status).  The plain reverse of this\n              \
    \                  command (\"MODE WiZ +o\") must not be\n                   \
    \             allowed from users since would bypass\n                        \
    \        the OPER command.\n"
- title: 4.2.4 Topic message
  contents:
  - "4.2.4 Topic message\n      Command: TOPIC\n   Parameters: <channel> [<topic>]\n\
    \   The TOPIC message is used to change or view the topic of a channel.\n   The\
    \ topic for channel <channel> is returned if there is no <topic>\n   given.  If\
    \ the <topic> parameter is present, the topic for that\n   channel will be changed,\
    \ if the channel modes permit this action.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS\
    \              ERR_NOTONCHANNEL\n           RPL_NOTOPIC                     RPL_TOPIC\n\
    \           ERR_CHANOPRIVSNEEDED\n   Examples:\n   :Wiz TOPIC #test :New topic\
    \     ;User Wiz setting the topic.\n   TOPIC #test :another topic      ;set the\
    \ topic on #test to \"another\n                                   topic\".\n \
    \  TOPIC #test                     ; check the topic for #test.\n"
- title: 4.2.5 Names message
  contents:
  - "4.2.5 Names message\n      Command: NAMES\n   Parameters: [<channel>{,<channel>}]\n\
    \   By using the NAMES command, a user can list all nicknames that are\n   visible\
    \ to them on any channel that they can see.  Channel names\n   which they can\
    \ see are those which aren't private (+p) or secret (+s)\n   or those which they\
    \ are actually on.  The <channel> parameter\n   specifies which channel(s) to\
    \ return information about if valid.\n   There is no error reply for bad channel\
    \ names.\n   If no <channel> parameter is given, a list of all channels and their\n\
    \   occupants is returned.  At the end of this list, a list of users who\n   are\
    \ visible but either not on any channel or not on a visible channel\n   are listed\
    \ as being on `channel' \"*\".\n   Numerics:\n           RPL_NAMREPLY        \
    \            RPL_ENDOFNAMES\n   Examples:\n   NAMES #twilight_zone,#42       \
    \ ; list visible users on #twilight_zone\n                                   and\
    \ #42 if the channels are visible to\n                                   you.\n\
    \   NAMES                           ; list all visible channels and users\n"
- title: 4.2.6 List message
  contents:
  - "4.2.6 List message\n      Command: LIST\n   Parameters: [<channel>{,<channel>}\
    \ [<server>]]\n   The list message is used to list channels and their topics.\
    \  If  the\n   <channel>  parameter  is  used,  only  the  status  of  that  channel\n\
    \   is displayed.  Private  channels  are  listed  (without  their\n   topics)\
    \  as channel \"Prv\" unless the client generating the query is\n   actually on\
    \ that channel.  Likewise, secret channels are not listed\n   at  all  unless\
    \  the client is a member of the channel in question.\n   Numeric Replies:\n \
    \          ERR_NOSUCHSERVER                RPL_LISTSTART\n           RPL_LIST\
    \                        RPL_LISTEND\n   Examples:\n   LIST                  \
    \          ; List all channels.\n   LIST #twilight_zone,#42         ; List channels\
    \ #twilight_zone and #42\n"
- title: 4.2.7 Invite message
  contents:
  - "4.2.7 Invite message\n      Command: INVITE\n   Parameters: <nickname> <channel>\n\
    \   The INVITE message is used to invite users to a channel.  The\n   parameter\
    \ <nickname> is the nickname of the person to be invited to\n   the target channel\
    \ <channel>.  There is no requirement that the\n   channel the target user is\
    \ being invited to must exist or be a valid\n   channel.  To invite a user to\
    \ a channel which is invite only (MODE\n   +i), the client sending the invite\
    \ must be recognised as being a\n   channel operator on the given channel.\n \
    \  Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_NOSUCHNICK\n\
    \           ERR_NOTONCHANNEL                ERR_USERONCHANNEL\n           ERR_CHANOPRIVSNEEDED\n\
    \           RPL_INVITING                    RPL_AWAY\n   Examples:\n   :Angel\
    \ INVITE Wiz #Dust         ; User Angel inviting WiZ to channel\n            \
    \                       #Dust\n   INVITE Wiz #Twilight_Zone       ; Command to\
    \ invite WiZ to\n                                   #Twilight_zone\n"
- title: 4.2.8 Kick command
  contents:
  - "4.2.8 Kick command\n      Command: KICK\n   Parameters: <channel> <user> [<comment>]\n\
    \   The KICK command can be  used  to  forcibly  remove  a  user  from  a\n  \
    \ channel.   It  'kicks  them  out'  of the channel (forced PART).\n   Only a\
    \ channel operator may kick another user out of a  channel.\n   Each  server that\
    \  receives  a KICK message checks that it is valid\n   (ie the sender is actually\
    \ a  channel  operator)  before  removing\n   the  victim  from  the channel.\n\
    \   Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL\n\
    \           ERR_BADCHANMASK                 ERR_CHANOPRIVSNEEDED\n           ERR_NOTONCHANNEL\n\
    \   Examples:\n"
- title: KICK &Melbourne Matthew         ; Kick Matthew from &Melbourne
  contents:
  - 'KICK &Melbourne Matthew         ; Kick Matthew from &Melbourne

    '
- title: 'KICK #Finnish John :Speaking English'
  contents:
  - "KICK #Finnish John :Speaking English\n                                ; Kick\
    \ John from #Finnish using\n                                \"Speaking English\"\
    \ as the reason\n                                (comment).\n"
- title: ':WiZ KICK #Finnish John         ; KICK message from WiZ to remove John'
  contents:
  - ":WiZ KICK #Finnish John         ; KICK message from WiZ to remove John\n    \
    \                            from channel #Finnish\n"
- title: 'NOTE:'
  contents:
  - "NOTE:\n     It is possible to extend the KICK command parameters to the\n"
- title: 'following:'
  contents:
  - 'following:

    '
- title: <channel>{,<channel>} <user>{,<user>} [<comment>]
  contents:
  - '<channel>{,<channel>} <user>{,<user>} [<comment>]

    '
- title: 4.3 Server queries and commands
  contents:
  - "4.3 Server queries and commands\n   The server query group of commands has been\
    \ designed to return\n   information about any server which is connected to the\
    \ network.  All\n   servers connected must respond to these queries and respond\n\
    \   correctly.  Any invalid response (or lack thereof) must be considered\n  \
    \ a sign of a broken server and it must be disconnected/disabled as\n   soon as\
    \ possible until the situation is remedied.\n   In these queries, where a parameter\
    \ appears as \"<server>\", it will\n   usually mean it can be a nickname or a\
    \ server or a wildcard name of\n   some sort.  For each parameter, however, only\
    \ one query and set of\n   replies is to be generated.\n"
- title: 4.3.1 Version message
  contents:
  - "4.3.1 Version message\n      Command: VERSION\n   Parameters: [<server>]\n  \
    \ The VERSION message is used  to  query  the  version  of  the  server\n   program.\
    \  An optional parameter <server> is used to query the version\n   of the server\
    \ program which a client is not directly connected to.\n   Numeric Replies:\n\
    \           ERR_NOSUCHSERVER                RPL_VERSION\n   Examples:\n   :Wiz\
    \ VERSION *.se               ; message from Wiz to check the version\n       \
    \                            of a server matching \"*.se\"\n   VERSION tolsun.oulu.fi\
    \          ; check the version of server\n                                   \"\
    tolsun.oulu.fi\".\n"
- title: 4.3.2 Stats message
  contents:
  - "4.3.2 Stats message\n      Command: STATS\n   Parameters: [<query> [<server>]]\n\
    \   The stats message is used to query statistics of certain server.  If\n   <server>\
    \ parameter is omitted, only the end of stats reply is sent\n   back.  The implementation\
    \ of this command is highly dependent on the\n   server which replies, although\
    \ the server must be able to supply\n   information as described by the queries\
    \ below (or similar).\n   A query may be given by any single letter which is only\
    \ checked by\n   the destination server (if given as the <server> parameter) and\
    \ is\n   otherwise passed on by intermediate servers, ignored and unaltered.\n\
    \   The following queries are those found in the current IRC\n   implementation\
    \ and provide a large portion of the setup information\n   for that server.  Although\
    \ these may not be supported in the same way\n   by other versions, all servers\
    \ should be able to supply a valid reply\n   to a STATS query which is consistent\
    \ with the reply formats currently\n   used and the purpose of the query.\n  \
    \ The currently supported queries are:\n           c - returns a list of servers\
    \ which the server may connect\n               to or allow connections from;\n\
    \           h - returns a list of servers which are either forced to be\n    \
    \           treated as leaves or allowed to act as hubs;\n           i - returns\
    \ a list of hosts which the server allows a client\n               to connect\
    \ from;\n           k - returns a list of banned username/hostname combinations\n\
    \               for that server;\n           l - returns a list of the server's\
    \ connections, showing how\n               long each connection has been established\
    \ and the traffic\n               over that connection in bytes and messages for\
    \ each\n               direction;\n           m - returns a list of commands supported\
    \ by the server and\n               the usage count for each if the usage count\
    \ is non zero;\n           o - returns a list of hosts from which normal clients\
    \ may\n               become operators;\n           y - show Y (Class) lines from\
    \ server's configuration file;\n           u - returns a string showing how long\
    \ the server has been up.\n   Numeric Replies:\n           ERR_NOSUCHSERVER\n\
    \           RPL_STATSCLINE                  RPL_STATSNLINE\n           RPL_STATSILINE\
    \                  RPL_STATSKLINE\n           RPL_STATSQLINE                 \
    \ RPL_STATSLLINE\n           RPL_STATSLINKINFO               RPL_STATSUPTIME\n\
    \           RPL_STATSCOMMANDS               RPL_STATSOLINE\n           RPL_STATSHLINE\
    \                  RPL_ENDOFSTATS\n   Examples:\n"
- title: STATS m                         ; check the command usage for the server
  contents:
  - "STATS m                         ; check the command usage for the server\n  \
    \                              you are connected to\n"
- title: :Wiz STATS c eff.org            ; request by WiZ for C/N line
  contents:
  - ":Wiz STATS c eff.org            ; request by WiZ for C/N line\n             \
    \                   information from server eff.org\n"
- title: 4.3.3 Links message
  contents:
  - "4.3.3 Links message\n      Command: LINKS\n   Parameters: [[<remote server>]\
    \ <server mask>]\n   With LINKS, a user can list all servers which are known by\
    \ the server\n   answering the query.  The returned list of servers must match\
    \ the\n   mask, or if no mask is given, the full list is returned.\n   If <remote\
    \ server> is given in addition to <server mask>, the LINKS\n   command is forwarded\
    \ to the first server found that matches that name\n   (if any), and that server\
    \ is then required to answer the query.\n   Numeric Replies:\n           ERR_NOSUCHSERVER\n\
    \           RPL_LINKS                       RPL_ENDOFLINKS\n   Examples:\n"
- title: LINKS *.au                      ; list all servers which have a name
  contents:
  - "LINKS *.au                      ; list all servers which have a name\n      \
    \                          that matches *.au;\n"
- title: :WiZ LINKS *.bu.edu *.edu       ; LINKS message from WiZ to the first
  contents:
  - ":WiZ LINKS *.bu.edu *.edu       ; LINKS message from WiZ to the first\n     \
    \                           server matching *.edu for a list of\n            \
    \                    servers matching *.bu.edu.\n"
- title: 4.3.4 Time message
  contents:
  - "4.3.4 Time message\n      Command: TIME\n   Parameters: [<server>]\n   The time\
    \ message is used to query local time from the specified\n   server. If the server\
    \ parameter is not given, the server handling the\n   command must reply to the\
    \ query.\n   Numeric Replies:\n           ERR_NOSUCHSERVER                RPL_TIME\n\
    \   Examples:\n   TIME tolsun.oulu.fi             ; check the time on the server\n\
    \                                   \"tolson.oulu.fi\"\n   Angel TIME *.au   \
    \              ; user angel checking the time on a\n                         \
    \          server matching \"*.au\"\n"
- title: 4.3.5 Connect message
  contents:
  - "4.3.5 Connect message\n      Command: CONNECT\n   Parameters: <target server>\
    \ [<port> [<remote server>]]\n   The CONNECT command can be used to force a server\
    \ to try to establish\n   a new connection to another server immediately.  CONNECT\
    \ is a\n   privileged command and is to be available only to IRC Operators.  If\n\
    \   a remote server is given then the CONNECT attempt is made by that\n   server\
    \ to <target server> and <port>.\n   Numeric Replies:\n           ERR_NOSUCHSERVER\
    \                ERR_NOPRIVILEGES\n           ERR_NEEDMOREPARAMS\n   Examples:\n"
- title: CONNECT tolsun.oulu.fi          ; Attempt to connect a server to
  contents:
  - "CONNECT tolsun.oulu.fi          ; Attempt to connect a server to\n          \
    \                      tolsun.oulu.fi\n"
- title: :WiZ CONNECT eff.org 6667 csd.bu.edu
  contents:
  - ":WiZ CONNECT eff.org 6667 csd.bu.edu\n                                ; CONNECT\
    \ attempt by WiZ to get servers\n                                eff.org and csd.bu.edu\
    \ connected on port\n                                6667.\n"
- title: 4.3.6 Trace message
  contents:
  - "4.3.6 Trace message\n      Command: TRACE\n   Parameters: [<server>]\n   TRACE\
    \ command is used to find the route to specific server.  Each\n   server that\
    \ processes this message must tell the sender about it by\n   sending a reply\
    \ indicating it is a pass-through link, forming a chain\n   of replies similar\
    \ to that gained from using \"traceroute\".  After\n   sending this reply back,\
    \ it must then send the TRACE message to the\n   next server until given server\
    \ is reached.  If the <server> parameter\n   is omitted, it is recommended that\
    \ TRACE command send a message to\n   the sender telling which servers the current\
    \ server has direct\n   connection to.\n   If the destination given by \"<server>\"\
    \ is an actual server, then the\n   destination server is required to report all\
    \ servers and users which\n   are connected to it, although only operators are\
    \ permitted to see\n   users present.  If the destination given by <server> is\
    \ a nickname,\n   they only a reply for that nickname is given.\n   Numeric Replies:\n\
    \           ERR_NOSUCHSERVER\n   If the TRACE message is destined for another\
    \ server, all intermediate\n   servers must return a RPL_TRACELINK reply to indicate\
    \ that the TRACE\n   passed through it and where its going next.\n           RPL_TRACELINK\n\
    \   A TRACE reply may be composed of any number of the following numeric\n   replies.\n\
    \           RPL_TRACECONNECTING             RPL_TRACEHANDSHAKE\n           RPL_TRACEUNKNOWN\
    \                RPL_TRACEOPERATOR\n           RPL_TRACEUSER                 \
    \  RPL_TRACESERVER\n           RPL_TRACESERVICE                RPL_TRACENEWTYPE\n\
    \           RPL_TRACECLASS\n   Examples:\n"
- title: TRACE *.oulu.fi                 ; TRACE to a server matching *.oulu.fi
  contents:
  - 'TRACE *.oulu.fi                 ; TRACE to a server matching *.oulu.fi

    '
- title: :WiZ TRACE AngelDust            ; TRACE issued by WiZ to nick AngelDust
  contents:
  - ':WiZ TRACE AngelDust            ; TRACE issued by WiZ to nick AngelDust

    '
- title: 4.3.7 Admin command
  contents:
  - "4.3.7 Admin command\n      Command: ADMIN\n   Parameters: [<server>]\n   The\
    \ admin message is used to find the name of the administrator of\n   the given\
    \ server, or current server if <server> parameter is omitted.\n   Each server\
    \ must have the ability to forward ADMIN messages to other\n   servers.\n   Numeric\
    \ Replies:\n           ERR_NOSUCHSERVER\n           RPL_ADMINME              \
    \       RPL_ADMINLOC1\n           RPL_ADMINLOC2                   RPL_ADMINEMAIL\n\
    \   Examples:\n   ADMIN tolsun.oulu.fi            ; request an ADMIN reply from\n\
    \                                   tolsun.oulu.fi\n   :WiZ ADMIN *.edu      \
    \          ; ADMIN request from WiZ for first\n                              \
    \     server found to match *.edu.\n"
- title: 4.3.8 Info command
  contents:
  - "4.3.8 Info command\n      Command: INFO\n   Parameters: [<server>]\n   The INFO\
    \ command is required to return information which describes\n   the server: its\
    \ version, when it was compiled, the patchlevel, when\n   it was started, and\
    \ any other miscellaneous information which may be\n   considered to be relevant.\n\
    \   Numeric Replies:\n           ERR_NOSUCHSERVER\n           RPL_INFO       \
    \                 RPL_ENDOFINFO\n   Examples:\n   INFO csd.bu.edu            \
    \     ; request an INFO reply from\n   csd.bu.edu\n   :Avalon INFO *.fi      \
    \         ; INFO request from Avalon for first\n                             \
    \      server found to match *.fi.\n   INFO Angel                      ; request\
    \ info from the server that\n                                   Angel is connected\
    \ to.\n"
- title: 4.4 Sending messages
  contents:
  - "4.4 Sending messages\n   The main purpose of the IRC protocol is to provide a\
    \ base for clients\n   to communicate with each other.  PRIVMSG and NOTICE are\
    \ the only\n   messages available which actually perform delivery of a text message\n\
    \   from one client to another - the rest just make it possible and try\n   to\
    \ ensure it happens in a reliable and structured manner.\n"
- title: 4.4.1 Private messages
  contents:
  - "4.4.1 Private messages\n      Command: PRIVMSG\n   Parameters: <receiver>{,<receiver>}\
    \ <text to be sent>\n   PRIVMSG is used to send private messages between users.\
    \  <receiver>\n   is the nickname of the receiver of the message.  <receiver>\
    \ can also\n   be a list of names or channels separated with commas.\n   The <receiver>\
    \ parameter may also me a host mask  (#mask)  or  server\n   mask  ($mask).  \
    \ In  both cases the server will only send the PRIVMSG\n   to those who have a\
    \ server or host matching the mask.  The mask  must\n   have at  least  1  (one)\
    \  \".\"  in it and no wildcards following the\n   last \".\".  This requirement\
    \ exists to prevent people sending messages\n   to  \"#*\"  or \"$*\",  which\
    \  would  broadcast  to  all  users; from\n   experience, this is abused more\
    \ than used responsibly and properly.\n   Wildcards are  the  '*' and  '?'   characters.\
    \   This  extension  to\n   the PRIVMSG command is only available to Operators.\n\
    \   Numeric Replies:\n           ERR_NORECIPIENT                 ERR_NOTEXTTOSEND\n\
    \           ERR_CANNOTSENDTOCHAN            ERR_NOTOPLEVEL\n           ERR_WILDTOPLEVEL\
    \                ERR_TOOMANYTARGETS\n           ERR_NOSUCHNICK\n           RPL_AWAY\n\
    \   Examples:\n"
- title: :Angel PRIVMSG Wiz :Hello are you receiving this message ?
  contents:
  - ":Angel PRIVMSG Wiz :Hello are you receiving this message ?\n                \
    \                ; Message from Angel to Wiz.\n"
- title: PRIVMSG Angel :yes I'm receiving it !receiving it !'u>(768u+1n) .br ;
  contents:
  - "PRIVMSG Angel :yes I'm receiving it !receiving it !'u>(768u+1n) .br ;\n     \
    \                           Message to Angel.\n"
- title: PRIVMSG jto@tolsun.oulu.fi :Hello !
  contents:
  - "PRIVMSG jto@tolsun.oulu.fi :Hello !\n                                ; Message\
    \ to a client on server\n                                tolsun.oulu.fi with username\
    \ of \"jto\".\n"
- title: PRIVMSG $*.fi :Server tolsun.oulu.fi rebooting.
  contents:
  - "PRIVMSG $*.fi :Server tolsun.oulu.fi rebooting.\n                           \
    \     ; Message to everyone on a server which\n                              \
    \  has a name matching *.fi.\n"
- title: 'PRIVMSG #*.edu :NSFNet is undergoing work, expect interruptions'
  contents:
  - "PRIVMSG #*.edu :NSFNet is undergoing work, expect interruptions\n           \
    \                     ; Message to all users who come from a\n               \
    \                 host which has a name matching *.edu.\n"
- title: 4.4.2 Notice
  contents:
  - "4.4.2 Notice\n      Command: NOTICE\n   Parameters: <nickname> <text>\n   The\
    \ NOTICE message is used similarly to PRIVMSG.  The difference\n   between NOTICE\
    \ and PRIVMSG is that automatic replies must never be\n   sent in response to\
    \ a NOTICE message.  This rule applies to servers\n   too - they must not send\
    \ any error reply back to the client on\n   receipt of a notice.  The object of\
    \ this rule is to avoid loops\n   between a client automatically sending something\
    \ in response to\n   something it received.  This is typically used by automatons\
    \ (clients\n   with either an AI or other interactive program controlling their\n\
    \   actions) which are always seen to be replying lest they end up in a\n   loop\
    \ with another automaton.\n   See PRIVMSG for more details on replies and examples.\n"
- title: 4.5 User based queries
  contents:
  - "4.5 User based queries\n   User queries are a group of commands which are primarily\
    \ concerned\n   with finding details on a particular user or group users.  When\
    \ using\n   wildcards with any of these commands, if they match, they will only\n\
    \   return information on users who are 'visible' to you.  The visibility\n  \
    \ of a user is determined as a combination of the user's mode and the\n   common\
    \ set of channels you are both on.\n"
- title: 4.5.1 Who query
  contents:
  - "4.5.1 Who query\n      Command: WHO\n   Parameters: [<name> [<o>]]\n   The WHO\
    \ message is used by a client to generate a query which returns\n   a list of\
    \ information which 'matches' the <name> parameter given by\n   the client.  In\
    \ the absence of the <name> parameter, all visible\n   (users who aren't invisible\
    \ (user mode +i) and who don't have a\n   common channel with the requesting client)\
    \ are listed.  The same\n   result can be achieved by using a <name> of \"0\"\
    \ or any wildcard which\n   will end up matching every entry possible.\n   The\
    \ <name> passed to WHO is matched against users' host, server, real\n   name and\
    \ nickname if the channel <name> cannot be found.\n   If the \"o\" parameter is\
    \ passed only operators are returned according\n   to the name mask supplied.\n\
    \   Numeric Replies:\n           ERR_NOSUCHSERVER\n           RPL_WHOREPLY   \
    \                 RPL_ENDOFWHO\n   Examples:\n   WHO *.fi                    \
    \    ; List all users who match against\n                                   \"\
    *.fi\".\n   WHO jto* o                      ; List all users with a match against\n\
    \                                   \"jto*\" if they are an operator.\n"
- title: 4.5.2 Whois query
  contents:
  - "4.5.2 Whois query\n      Command: WHOIS\n   Parameters: [<server>] <nickmask>[,<nickmask>[,...]]\n\
    \   This message is used to query information about particular user.  The\n  \
    \ server will answer this message with several numeric messages\n   indicating\
    \ different statuses of each user which matches the nickmask\n   (if you are entitled\
    \ to see them).  If no wildcard is present in the\n   <nickmask>, any information\
    \ about that nick which you are allowed to\n   see is presented.  A comma (',')\
    \ separated list of nicknames may be\n   given.\n   The latter version sends the\
    \ query to a specific server.  It is\n   useful if you want to know how long the\
    \ user in question has been\n   idle as only local server (ie. the server the\
    \ user is directly\n   connected to) knows that information, while everything\
    \ else is\n   globally known.\n   Numeric Replies:\n           ERR_NOSUCHSERVER\
    \                ERR_NONICKNAMEGIVEN\n           RPL_WHOISUSER               \
    \    RPL_WHOISCHANNELS\n           RPL_WHOISCHANNELS               RPL_WHOISSERVER\n\
    \           RPL_AWAY                        RPL_WHOISOPERATOR\n           RPL_WHOISIDLE\
    \                   ERR_NOSUCHNICK\n           RPL_ENDOFWHOIS\n   Examples:\n\
    \   WHOIS wiz                       ; return available user information\n    \
    \                               about nick WiZ\n   WHOIS eff.org trillian    \
    \      ; ask server eff.org for user\n                                   information\
    \ about trillian\n"
- title: 4.5.3 Whowas
  contents:
  - "4.5.3 Whowas\n      Command: WHOWAS\n   Parameters: <nickname> [<count> [<server>]]\n\
    \   Whowas asks for information about a nickname which no longer exists.\n   This\
    \ may either be due to a nickname change or the user leaving IRC.\n   In response\
    \ to this query, the server searches through its nickname\n   history, looking\
    \ for any nicks which are lexically the same (no wild\n   card matching here).\
    \  The history is searched backward, returning the\n   most recent entry first.\
    \  If there are multiple entries, up to\n   <count> replies will be returned (or\
    \ all of them if no <count>\n   parameter is given).  If a non-positive number\
    \ is passed as being\n   <count>, then a full search is done.\n   Numeric Replies:\n\
    \           ERR_NONICKNAMEGIVEN             ERR_WASNOSUCHNICK\n           RPL_WHOWASUSER\
    \                  RPL_WHOISSERVER\n           RPL_ENDOFWHOWAS\n   Examples:\n\
    \   WHOWAS Wiz                      ; return all information in the nick\n   \
    \                                history about nick \"WiZ\";\n   WHOWAS Mermaid\
    \ 9                ; return at most, the 9 most recent\n                     \
    \              entries in the nick history for\n                             \
    \      \"Mermaid\";\n   WHOWAS Trillian 1 *.edu         ; return the most recent\
    \ history for\n                                   \"Trillian\" from the first\
    \ server found\n                                   to match \"*.edu\".\n"
- title: 4.6 Miscellaneous messages
  contents:
  - "4.6 Miscellaneous messages\n   Messages in this category do not fit into any\
    \ of the above categories\n   but are nonetheless still a part of and required\
    \ by the protocol.\n"
- title: 4.6.1 Kill message
  contents:
  - "4.6.1 Kill message\n      Command: KILL\n   Parameters: <nickname> <comment>\n\
    \   The KILL message is used to cause a client-server connection to be\n   closed\
    \ by the server which has the actual connection.  KILL is used\n   by servers\
    \ when they encounter a duplicate entry in the list of valid\n   nicknames and\
    \ is used to remove both entries.  It is also available\n   to operators.\n  \
    \ Clients which have automatic reconnect algorithms effectively make\n   this\
    \ command useless since the disconnection is only brief.  It does\n   however\
    \ break the flow of data and can be used to stop large amounts\n   of being abused,\
    \ any user may elect to receive KILL messages\n   generated for others to keep\
    \ an 'eye' on would be trouble spots.\n   In an arena where nicknames are required\
    \ to be globally unique at all\n   times, KILL messages are sent whenever 'duplicates'\
    \ are detected\n   (that is an attempt to register two users with the same nickname)\
    \ in\n   the hope that both of them will disappear and only 1 reappear.\n   The\
    \ comment given must reflect the actual reason for the KILL.  For\n   server-generated\
    \ KILLs it usually is made up of details concerning\n   the origins of the two\
    \ conflicting nicknames.  For users it is left\n   up to them to provide an adequate\
    \ reason to satisfy others who see\n   it.  To prevent/discourage fake KILLs from\
    \ being generated to hide\n   the identify of the KILLer, the comment also shows\
    \ a 'kill-path'\n   which is updated by each server it passes through, each prepending\n\
    \   its name to the path.\n   Numeric Replies:\n           ERR_NOPRIVILEGES  \
    \              ERR_NEEDMOREPARAMS\n           ERR_NOSUCHNICK                 \
    \ ERR_CANTKILLSERVER\n   KILL David (csd.bu.edu <- tolsun.oulu.fi)\n         \
    \                          ; Nickname collision between csd.bu.edu\n         \
    \                          and tolson.oulu.fi\n   NOTE:\n   It is recommended\
    \ that only Operators be allowed to kill other users\n   with KILL message.  In\
    \ an ideal world not even operators would need\n   to do this and it would be\
    \ left to servers to deal with.\n"
- title: 4.6.2 Ping message
  contents:
  - "4.6.2 Ping message\n      Command: PING\n   Parameters: <server1> [<server2>]\n\
    \   The PING message is used to test the presence of an active client at\n   the\
    \ other end of the connection.  A PING message is sent at regular\n   intervals\
    \ if no other activity detected coming from a connection.  If\n   a connection\
    \ fails to respond to a PING command within a set amount\n   of time, that connection\
    \ is closed.\n   Any client which receives a PING message must respond to <server1>\n\
    \   (server which sent the PING message out) as quickly as possible with\n   an\
    \ appropriate PONG message to indicate it is still there and alive.\n   Servers\
    \ should not respond to PING commands but rely on PINGs from\n   the other end\
    \ of the connection to indicate the connection is alive.\n   If the <server2>\
    \ parameter is specified, the PING message gets\n   forwarded there.\n   Numeric\
    \ Replies:\n           ERR_NOORIGIN                    ERR_NOSUCHSERVER\n   Examples:\n\
    \   PING tolsun.oulu.fi             ; server sending a PING message to\n     \
    \                              another server to indicate it is still\n      \
    \                             alive.\n   PING WiZ                        ; PING\
    \ message being sent to nick WiZ\n"
- title: 4.6.3 Pong message
  contents:
  - "4.6.3 Pong message\n      Command: PONG\n   Parameters: <daemon> [<daemon2>]\n\
    \   PONG message is a reply to ping message.  If parameter <daemon2> is\n   given\
    \ this message must be forwarded to given daemon.  The <daemon>\n   parameter\
    \ is the name of the daemon who has responded to PING message\n   and generated\
    \ this message.\n   Numeric Replies:\n           ERR_NOORIGIN                \
    \    ERR_NOSUCHSERVER\n   Examples:\n   PONG csd.bu.edu tolsun.oulu.fi  ; PONG\
    \ message from csd.bu.edu to\n                                   tolsun.oulu.fi\n"
- title: 4.6.4 Error
  contents:
  - "4.6.4 Error\n      Command: ERROR\n   Parameters: <error message>\n   The ERROR\
    \ command is for use by servers when reporting a serious or\n   fatal error to\
    \ its operators.  It may also be sent from one server to\n   another but must\
    \ not be accepted from any normal unknown clients.\n   An ERROR message is for\
    \ use for reporting errors which occur with a\n   server-to-server link only.\
    \  An ERROR message is sent to the server\n   at the other end (which sends it\
    \ to all of its connected operators)\n   and to all operators currently connected.\
    \  It is not to be passed\n   onto any other servers by a server if it is received\
    \ from a server.\n   When a server sends a received ERROR message to its operators,\
    \ the\n   message should be encapsulated inside a NOTICE message, indicating\n\
    \   that the client was not responsible for the error.\n   Numerics:\n       \
    \    None.\n   Examples:\n   ERROR :Server *.fi already exists; ERROR message\
    \ to the other server\n                                   which caused this error.\n\
    \   NOTICE WiZ :ERROR from csd.bu.edu -- Server *.fi already exists\n        \
    \                           ; Same ERROR message as above but sent\n         \
    \                          to user WiZ on the other server.\n"
- title: 5. OPTIONALS
  contents:
  - "5. OPTIONALS\n   This section describes OPTIONAL messages.  They are not required\
    \ in a\n   working server implementation of the protocol described herein.  In\n\
    \   the absence of the option, an error reply message must be generated\n   or\
    \ an unknown command error.  If the message is destined for another\n   server\
    \ to answer then it must be passed on (elementary parsing\n   required) The allocated\
    \ numerics for this are listed with the\n   messages below.\n"
- title: 5.1 Away
  contents:
  - "5.1 Away\n      Command: AWAY\n   Parameters: [message]\n   With the AWAY message,\
    \ clients can set an automatic reply string for\n   any PRIVMSG commands directed\
    \ at them (not to a channel they are on).\n   The automatic reply is sent by the\
    \ server to client sending the\n   PRIVMSG command.  The only replying server\
    \ is the one to which the\n   sending client is connected to.\n   The AWAY message\
    \ is used either with one parameter (to set an AWAY\n   message) or with no parameters\
    \ (to remove the AWAY message).\n   Numeric Replies:\n           RPL_UNAWAY  \
    \                    RPL_NOWAWAY\n   Examples:\n   AWAY :Gone to lunch.  Back\
    \ in 5 ; set away message to \"Gone to lunch.\n                              \
    \     Back in 5\".\n   :WiZ AWAY                       ; unmark WiZ as being away.\n"
- title: 5.2 Rehash message
  contents:
  - "5.2 Rehash message\n      Command: REHASH\n   Parameters: None\n   The rehash\
    \ message can be used by the operator to force the server to\n   re-read and process\
    \ its configuration file.\n   Numeric Replies:\n        RPL_REHASHING        \
    \           ERR_NOPRIVILEGES\n"
- title: 'Examples:'
  contents:
  - 'Examples:

    '
- title: REHASH                          ; message from client with operator
  contents:
  - "REHASH                          ; message from client with operator\n       \
    \                         status to server asking it to reread its\n         \
    \                       configuration file.\n"
- title: 5.3 Restart message
  contents:
  - "5.3 Restart message\n      Command: RESTART\n   Parameters: None\n   The restart\
    \ message can only be used by an operator to force a server\n   restart itself.\
    \  This message is optional since it may be viewed as a\n   risk to allow arbitrary\
    \ people to connect to a server as an operator\n   and execute this command, causing\
    \ (at least) a disruption to service.\n   The RESTART command must always be fully\
    \ processed by the server to\n   which the sending client is connected and not\
    \ be passed onto other\n   connected servers.\n   Numeric Replies:\n         \
    \  ERR_NOPRIVILEGES\n   Examples:\n   RESTART                         ; no parameters\
    \ required.\n"
- title: 5.4 Summon message
  contents:
  - "5.4 Summon message\n      Command: SUMMON\n   Parameters: <user> [<server>]\n\
    \   The SUMMON command can be used to give users who are on a host\n   running\
    \ an IRC server a message asking them to please join IRC.  This\n   message is\
    \ only sent if the target server (a) has SUMMON enabled, (b)\n   the user is logged\
    \ in and (c) the server process can write to the\n   user's tty (or similar).\n\
    \   If no <server> parameter is given it tries to summon <user> from the\n   server\
    \ the client is connected to is assumed as the target.\n   If summon is not enabled\
    \ in a server, it must return the\n   ERR_SUMMONDISABLED numeric and pass the\
    \ summon message onwards.\n   Numeric Replies:\n           ERR_NORECIPIENT   \
    \              ERR_FILEERROR\n           ERR_NOLOGIN                     ERR_NOSUCHSERVER\n\
    \           RPL_SUMMONING\n   Examples:\n   SUMMON jto                      ;\
    \ summon user jto on the server's host\n   SUMMON jto tolsun.oulu.fi       ; summon\
    \ user jto on the host which a\n                                   server named\
    \ \"tolsun.oulu.fi\" is\n                                   running.\n"
- title: 5.5 Users
  contents:
  - "5.5 Users\n      Command: USERS\n   Parameters: [<server>]\n   The USERS command\
    \ returns a list of users logged into the server in a\n   similar  format  to\
    \  who(1),  rusers(1)  and finger(1).  Some people\n   may disable this command\
    \ on their server for security related\n   reasons.   If disabled, the correct\
    \ numeric must be returned to\n   indicate this.\n   Numeric Replies:\n      \
    \     ERR_NOSUCHSERVER                ERR_FILEERROR\n           RPL_USERSSTART\
    \                  RPL_USERS\n           RPL_NOUSERS                     RPL_ENDOFUSERS\n\
    \           ERR_USERSDISABLED\n   Disabled Reply:\n           ERR_USERSDISABLED\n\
    \   Examples:\n"
- title: USERS eff.org                   ; request a list of users logged in on
  contents:
  - "USERS eff.org                   ; request a list of users logged in on\n    \
    \                            server eff.org\n"
- title: :John USERS tolsun.oulu.fi      ; request from John for a list of users
  contents:
  - ":John USERS tolsun.oulu.fi      ; request from John for a list of users\n   \
    \                             logged in on server tolsun.oulu.fi\n"
- title: 5.6 Operwall message
  contents:
  - "5.6 Operwall message\n      Command: WALLOPS\n   Parameters: Text to be sent\
    \ to all operators currently online\n   Sends  a  message  to  all   operators\
    \   currently   online.    After\n   implementing  WALLOPS  as  a user command\
    \ it was found that it was\n   often and commonly abused as a means of sending\
    \ a message to a lot\n   of  people (much  similar to WALL).  Due to this it is\
    \ recommended\n   that the current implementation of  WALLOPS  be  used  as  an\n\
    \   example  by  allowing  and recognising only servers as the senders of\n  \
    \ WALLOPS.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS\n   Examples:\n\
    \   :csd.bu.edu WALLOPS :Connect '*.uiuc.edu 6667' from Joshua; WALLOPS\n    \
    \                               message from csd.bu.edu announcing a\n       \
    \                            CONNECT message it received and acted\n         \
    \                          upon from Joshua.\n"
- title: 5.7 Userhost message
  contents:
  - "5.7 Userhost message\n      Command: USERHOST\n   Parameters: <nickname>{<space><nickname>}\n\
    \   The USERHOST command takes a list of up to 5 nicknames, each\n   separated\
    \ by a space character and returns a list of information\n   about each nickname\
    \ that it found.  The returned list has each reply\n   separated by a space.\n\
    \   Numeric Replies:\n           RPL_USERHOST                    ERR_NEEDMOREPARAMS\n\
    \   Examples:\n   USERHOST Wiz Michael Marty p    ;USERHOST request for information\
    \ on\n                                   nicks \"Wiz\", \"Michael\", \"Marty\"\
    \ and \"p\"\n"
- title: 5.8 Ison message
  contents:
  - "5.8 Ison message\n      Command: ISON\n   Parameters: <nickname>{<space><nickname>}\n\
    \   The ISON command was implemented to provide  a  quick  and  efficient\n  \
    \ means  to get a response about whether a given nickname was currently\n   on\
    \ IRC. ISON only takes one (1) parameter: a space-separated list of\n   nicks.\
    \  For  each  nickname in the list that is present, the server\n   adds that to\
    \ its reply string.  Thus the reply string may return\n   empty (none  of  the\
    \ given  nicks are present), an exact copy of the\n   parameter string (all of\
    \ them present) or as any other subset of the\n   set of nicks  given  in  the\
    \ parameter.  The only limit on the number\n   of nicks that may be checked is\
    \ that the combined length must not be\n   too large as to cause the server to\
    \ chop it off so it fits in 512\n   characters.\n   ISON is only be processed\
    \ by the server local to the client sending\n   the command and thus not passed\
    \ onto other servers for further\n   processing.\n   Numeric Replies:\n      \
    \     RPL_ISON                ERR_NEEDMOREPARAMS\n   Examples:\n   ISON phone\
    \ trillian WiZ jarlek Avalon Angel Monstah\n                                 \
    \  ; Sample ISON request for 7 nicks.\n"
- title: 6. REPLIES
  contents:
  - "6. REPLIES\n   The following is a list of numeric replies which are generated\
    \ in\n   response to the commands given above.  Each numeric is given with its\n\
    \   number, name and reply string.\n"
- title: 6.1 Error Replies.
  contents:
  - "6.1 Error Replies.\n        401     ERR_NOSUCHNICK\n                        \"\
    <nickname> :No such nick/channel\"\n                - Used to indicate the nickname\
    \ parameter supplied to a\n                  command is currently unused.\n  \
    \      402     ERR_NOSUCHSERVER\n                        \"<server name> :No such\
    \ server\"\n                - Used to indicate the server name given currently\n\
    \                  doesn't exist.\n        403     ERR_NOSUCHCHANNEL\n       \
    \                 \"<channel name> :No such channel\"\n                - Used\
    \ to indicate the given channel name is invalid.\n        404     ERR_CANNOTSENDTOCHAN\n\
    \                        \"<channel name> :Cannot send to channel\"\n        \
    \        - Sent to a user who is either (a) not on a channel\n               \
    \   which is mode +n or (b) not a chanop (or mode +v) on\n                  a\
    \ channel which has mode +m set and is trying to send\n                  a PRIVMSG\
    \ message to that channel.\n        405     ERR_TOOMANYCHANNELS\n            \
    \            \"<channel name> :You have joined too many \\\n                 \
    \        channels\"\n                - Sent to a user when they have joined the\
    \ maximum\n                  number of allowed channels and they try to join\n\
    \                  another channel.\n        406     ERR_WASNOSUCHNICK\n     \
    \                   \"<nickname> :There was no such nickname\"\n             \
    \   - Returned by WHOWAS to indicate there is no history\n                  information\
    \ for that nickname.\n        407     ERR_TOOMANYTARGETS\n                   \
    \     \"<target> :Duplicate recipients. No message \\\n                      \
    \   delivered\"\n                - Returned to a client which is attempting to\
    \ send a\n                  PRIVMSG/NOTICE using the user@host destination format\n\
    \                  and for a user@host which has several occurrences.\n      \
    \  409     ERR_NOORIGIN\n                        \":No origin specified\"\n  \
    \              - PING or PONG message missing the originator parameter\n     \
    \             which is required since these commands must work\n             \
    \     without valid prefixes.\n        411     ERR_NORECIPIENT\n             \
    \           \":No recipient given (<command>)\"\n        412     ERR_NOTEXTTOSEND\n\
    \                        \":No text to send\"\n        413     ERR_NOTOPLEVEL\n\
    \                        \"<mask> :No toplevel domain specified\"\n        414\
    \     ERR_WILDTOPLEVEL\n                        \"<mask> :Wildcard in toplevel\
    \ domain\"\n                - 412 - 414 are returned by PRIVMSG to indicate that\n\
    \                  the message wasn't delivered for some reason.\n           \
    \       ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that\n                \
    \  are returned when an invalid use of\n                  \"PRIVMSG $<server>\"\
    \ or \"PRIVMSG #<host>\" is attempted.\n        421     ERR_UNKNOWNCOMMAND\n \
    \                       \"<command> :Unknown command\"\n                - Returned\
    \ to a registered client to indicate that the\n                  command sent\
    \ is unknown by the server.\n        422     ERR_NOMOTD\n                    \
    \    \":MOTD File is missing\"\n                - Server's MOTD file could not\
    \ be opened by the server.\n        423     ERR_NOADMININFO\n                \
    \        \"<server> :No administrative info available\"\n                - Returned\
    \ by a server in response to an ADMIN message\n                  when there is\
    \ an error in finding the appropriate\n                  information.\n      \
    \  424     ERR_FILEERROR\n                \":File error doing <file op> on <file>\"\
    \n                - Generic error message used to report a failed file\n     \
    \             operation during the processing of a message.\n        431     ERR_NONICKNAMEGIVEN\n\
    \                        \":No nickname given\"\n                - Returned when\
    \ a nickname parameter expected for a\n                  command and isn't found.\n\
    \        432     ERR_ERRONEUSNICKNAME\n                        \"<nick> :Erroneus\
    \ nickname\"\n                - Returned after receiving a NICK message which\
    \ contains\n                  characters which do not fall in the defined set.\
    \  See\n                  section x.x.x for details on valid nicknames.\n    \
    \    433     ERR_NICKNAMEINUSE\n                        \"<nick> :Nickname is\
    \ already in use\"\n                - Returned when a NICK message is processed\
    \ that results\n                  in an attempt to change to a currently existing\n\
    \                  nickname.\n        436     ERR_NICKCOLLISION\n            \
    \            \"<nick> :Nickname collision KILL\"\n                - Returned by\
    \ a server to a client when it detects a\n                  nickname collision\
    \ (registered of a NICK that\n                  already exists by another server).\n\
    \        441     ERR_USERNOTINCHANNEL\n                        \"<nick> <channel>\
    \ :They aren't on that channel\"\n                - Returned by the server to\
    \ indicate that the target\n                  user of the command is not on the\
    \ given channel.\n        442     ERR_NOTONCHANNEL\n                        \"\
    <channel> :You're not on that channel\"\n                - Returned by the server\
    \ whenever a client tries to\n                  perform a channel effecting command\
    \ for which the\n                  client isn't a member.\n        443     ERR_USERONCHANNEL\n\
    \                        \"<user> <channel> :is already on channel\"\n       \
    \         - Returned when a client tries to invite a user to a\n             \
    \     channel they are already on.\n        444     ERR_NOLOGIN\n            \
    \            \"<user> :User not logged in\"\n                - Returned by the\
    \ summon after a SUMMON command for a\n                  user was unable to be\
    \ performed since they were not\n                  logged in.\n        445   \
    \  ERR_SUMMONDISABLED\n                        \":SUMMON has been disabled\"\n\
    \                - Returned as a response to the SUMMON command.  Must be\n  \
    \                returned by any server which does not implement it.\n       \
    \ 446     ERR_USERSDISABLED\n                        \":USERS has been disabled\"\
    \n                - Returned as a response to the USERS command.  Must be\n  \
    \                returned by any server which does not implement it.\n       \
    \ 451     ERR_NOTREGISTERED\n                        \":You have not registered\"\
    \n                - Returned by the server to indicate that the client\n     \
    \             must be registered before the server will allow it\n           \
    \       to be parsed in detail.\n        461     ERR_NEEDMOREPARAMS\n        \
    \                \"<command> :Not enough parameters\"\n                - Returned\
    \ by the server by numerous commands to\n                  indicate to the client\
    \ that it didn't supply enough\n                  parameters.\n        462   \
    \  ERR_ALREADYREGISTRED\n                        \":You may not reregister\"\n\
    \                - Returned by the server to any link which tries to\n       \
    \           change part of the registered details (such as\n                 \
    \ password or user details from second USER message).\n        463     ERR_NOPERMFORHOST\n\
    \                        \":Your host isn't among the privileged\"\n         \
    \       - Returned to a client which attempts to register with\n             \
    \     a server which does not been setup to allow\n                  connections\
    \ from the host the attempted connection\n                  is tried.\n      \
    \  464     ERR_PASSWDMISMATCH\n                        \":Password incorrect\"\
    \n                - Returned to indicate a failed attempt at registering\n   \
    \               a connection for which a password was required and\n         \
    \         was either not given or incorrect.\n        465     ERR_YOUREBANNEDCREEP\n\
    \                        \":You are banned from this server\"\n              \
    \  - Returned after an attempt to connect and register\n                  yourself\
    \ with a server which has been setup to\n                  explicitly deny connections\
    \ to you.\n        467     ERR_KEYSET\n                        \"<channel> :Channel\
    \ key already set\"\n        471     ERR_CHANNELISFULL\n                     \
    \   \"<channel> :Cannot join channel (+l)\"\n        472     ERR_UNKNOWNMODE\n\
    \                        \"<char> :is unknown mode char to me\"\n        473 \
    \    ERR_INVITEONLYCHAN\n                        \"<channel> :Cannot join channel\
    \ (+i)\"\n        474     ERR_BANNEDFROMCHAN\n                        \"<channel>\
    \ :Cannot join channel (+b)\"\n        475     ERR_BADCHANNELKEY\n           \
    \             \"<channel> :Cannot join channel (+k)\"\n        481     ERR_NOPRIVILEGES\n\
    \                        \":Permission Denied- You're not an IRC operator\"\n\
    \                - Any command requiring operator privileges to operate\n    \
    \              must return this error to indicate the attempt was\n          \
    \        unsuccessful.\n        482     ERR_CHANOPRIVSNEEDED\n               \
    \         \"<channel> :You're not channel operator\"\n                - Any command\
    \ requiring 'chanop' privileges (such as\n                  MODE messages) must\
    \ return this error if the client\n                  making the attempt is not\
    \ a chanop on the specified\n                  channel.\n        483     ERR_CANTKILLSERVER\n\
    \                        \":You cant kill a server!\"\n                - Any attempts\
    \ to use the KILL command on a server\n                  are to be refused and\
    \ this error returned directly\n                  to the client.\n        491\
    \     ERR_NOOPERHOST\n                        \":No O-lines for your host\"\n\
    \                - If a client sends an OPER message and the server has\n    \
    \              not been configured to allow connections from the\n           \
    \       client's host as an operator, this error must be\n                  returned.\n\
    \        501     ERR_UMODEUNKNOWNFLAG\n                        \":Unknown MODE\
    \ flag\"\n                - Returned by the server to indicate that a MODE\n \
    \                 message was sent with a nickname parameter and that\n      \
    \            the a mode flag sent was not recognized.\n        502     ERR_USERSDONTMATCH\n\
    \                        \":Cant change mode for other users\"\n             \
    \   - Error sent to any user trying to view or change the\n                  user\
    \ mode for a user other than themselves.\n"
- title: 6.2 Command responses.
  contents:
  - "6.2 Command responses.\n        300     RPL_NONE\n                        Dummy\
    \ reply number. Not used.\n        302     RPL_USERHOST\n                    \
    \    \":[<reply>{<space><reply>}]\"\n                - Reply format used by USERHOST\
    \ to list replies to\n                  the query list.  The reply string is composed\
    \ as\n                  follows:\n                  <reply> ::= <nick>['*'] '='\
    \ <'+'|'-'><hostname>\n                  The '*' indicates whether the client\
    \ has registered\n                  as an Operator.  The '-' or '+' characters\
    \ represent\n                  whether the client has set an AWAY message or not\n\
    \                  respectively.\n        303     RPL_ISON\n                 \
    \       \":[<nick> {<space><nick>}]\"\n                - Reply format used by\
    \ ISON to list replies to the\n                  query list.\n        301    \
    \ RPL_AWAY\n                        \"<nick> :<away message>\"\n        305  \
    \   RPL_UNAWAY\n                        \":You are no longer marked as being away\"\
    \n        306     RPL_NOWAWAY\n                        \":You have been marked\
    \ as being away\"\n                - These replies are used with the AWAY command\
    \ (if\n                  allowed).  RPL_AWAY is sent to any client sending a\n\
    \                  PRIVMSG to a client which is away.  RPL_AWAY is only\n    \
    \              sent by the server to which the client is connected.\n        \
    \          Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the\n            \
    \      client removes and sets an AWAY message.\n        311     RPL_WHOISUSER\n\
    \                        \"<nick> <user> <host> * :<real name>\"\n        312\
    \     RPL_WHOISSERVER\n                        \"<nick> <server> :<server info>\"\
    \n        313     RPL_WHOISOPERATOR\n                        \"<nick> :is an IRC\
    \ operator\"\n        317     RPL_WHOISIDLE\n                        \"<nick>\
    \ <integer> :seconds idle\"\n        318     RPL_ENDOFWHOIS\n                \
    \        \"<nick> :End of /WHOIS list\"\n        319     RPL_WHOISCHANNELS\n \
    \                       \"<nick> :{[@|+]<channel><space>}\"\n                -\
    \ Replies 311 - 313, 317 - 319 are all replies\n                  generated in\
    \ response to a WHOIS message.  Given that\n                  there are enough\
    \ parameters present, the answering\n                  server must either formulate\
    \ a reply out of the above\n                  numerics (if the query nick is found)\
    \ or return an\n                  error reply.  The '*' in RPL_WHOISUSER is there\
    \ as\n                  the literal character and not as a wild card.  For\n \
    \                 each reply set, only RPL_WHOISCHANNELS may appear\n        \
    \          more than once (for long lists of channel names).\n               \
    \   The '@' and '+' characters next to the channel name\n                  indicate\
    \ whether a client is a channel operator or\n                  has been granted\
    \ permission to speak on a moderated\n                  channel.  The RPL_ENDOFWHOIS\
    \ reply is used to mark\n                  the end of processing a WHOIS message.\n\
    \        314     RPL_WHOWASUSER\n                        \"<nick> <user> <host>\
    \ * :<real name>\"\n        369     RPL_ENDOFWHOWAS\n                        \"\
    <nick> :End of WHOWAS\"\n                - When replying to a WHOWAS message,\
    \ a server must use\n                  the replies RPL_WHOWASUSER, RPL_WHOISSERVER\
    \ or\n                  ERR_WASNOSUCHNICK for each nickname in the presented\n\
    \                  list.  At the end of all reply batches, there must\n      \
    \            be RPL_ENDOFWHOWAS (even if there was only one reply\n          \
    \        and it was an error).\n        321     RPL_LISTSTART\n              \
    \          \"Channel :Users  Name\"\n        322     RPL_LIST\n              \
    \          \"<channel> <# visible> :<topic>\"\n        323     RPL_LISTEND\n \
    \                       \":End of /LIST\"\n                - Replies RPL_LISTSTART,\
    \ RPL_LIST, RPL_LISTEND mark\n                  the start, actual replies with\
    \ data and end of the\n                  server's response to a LIST command.\
    \  If there are\n                  no channels available to return, only the start\n\
    \                  and end reply must be sent.\n        324     RPL_CHANNELMODEIS\n\
    \                        \"<channel> <mode> <mode params>\"\n        331     RPL_NOTOPIC\n\
    \                        \"<channel> :No topic is set\"\n        332     RPL_TOPIC\n\
    \                        \"<channel> :<topic>\"\n                - When sending\
    \ a TOPIC message to determine the\n                  channel topic, one of two\
    \ replies is sent.  If\n                  the topic is set, RPL_TOPIC is sent\
    \ back else\n                  RPL_NOTOPIC.\n        341     RPL_INVITING\n  \
    \                      \"<channel> <nick>\"\n                - Returned by the\
    \ server to indicate that the\n                  attempted INVITE message was\
    \ successful and is\n                  being passed onto the end client.\n   \
    \     342     RPL_SUMMONING\n                        \"<user> :Summoning user\
    \ to IRC\"\n                - Returned by a server answering a SUMMON message\
    \ to\n                  indicate that it is summoning that user.\n        351\
    \     RPL_VERSION\n                        \"<version>.<debuglevel> <server> :<comments>\"\
    \n                - Reply by the server showing its version details.\n       \
    \           The <version> is the version of the software being\n             \
    \     used (including any patchlevel revisions) and the\n                  <debuglevel>\
    \ is used to indicate if the server is\n                  running in \"debug mode\"\
    .\n                  The \"comments\" field may contain any comments about\n \
    \                 the version or further version details.\n        352     RPL_WHOREPLY\n\
    \                        \"<channel> <user> <host> <server> <nick> \\\n      \
    \                   <H|G>[*][@|+] :<hopcount> <real name>\"\n        315     RPL_ENDOFWHO\n\
    \                        \"<name> :End of /WHO list\"\n                - The RPL_WHOREPLY\
    \ and RPL_ENDOFWHO pair are used\n                  to answer a WHO message. \
    \ The RPL_WHOREPLY is only\n                  sent if there is an appropriate\
    \ match to the WHO\n                  query.  If there is a list of parameters\
    \ supplied\n                  with a WHO message, a RPL_ENDOFWHO must be sent\n\
    \                  after processing each list item with <name> being\n       \
    \           the item.\n        353     RPL_NAMREPLY\n                        \"\
    <channel> :[[@|+]<nick> [[@|+]<nick> [...]]]\"\n        366     RPL_ENDOFNAMES\n\
    \                        \"<channel> :End of /NAMES list\"\n                -\
    \ To reply to a NAMES message, a reply pair consisting\n                  of RPL_NAMREPLY\
    \ and RPL_ENDOFNAMES is sent by the\n                  server back to the client.\
    \  If there is no channel\n                  found as in the query, then only\
    \ RPL_ENDOFNAMES is\n                  returned.  The exception to this is when\
    \ a NAMES\n                  message is sent with no parameters and all visible\n\
    \                  channels and contents are sent back in a series of\n      \
    \            RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark\n          \
    \        the end.\n        364     RPL_LINKS\n                        \"<mask>\
    \ <server> :<hopcount> <server info>\"\n        365     RPL_ENDOFLINKS\n     \
    \                   \"<mask> :End of /LINKS list\"\n                - In replying\
    \ to the LINKS message, a server must send\n                  replies back using\
    \ the RPL_LINKS numeric and mark the\n                  end of the list using\
    \ an RPL_ENDOFLINKS reply.\n        367     RPL_BANLIST\n                    \
    \    \"<channel> <banid>\"\n        368     RPL_ENDOFBANLIST\n               \
    \         \"<channel> :End of channel ban list\"\n                - When listing\
    \ the active 'bans' for a given channel,\n                  a server is required\
    \ to send the list back using the\n                  RPL_BANLIST and RPL_ENDOFBANLIST\
    \ messages.  A separate\n                  RPL_BANLIST is sent for each active\
    \ banid.  After the\n                  banids have been listed (or if none present)\
    \ a\n                  RPL_ENDOFBANLIST must be sent.\n        371     RPL_INFO\n\
    \                        \":<string>\"\n        374     RPL_ENDOFINFO\n      \
    \                  \":End of /INFO list\"\n                - A server responding\
    \ to an INFO message is required to\n                  send all its 'info' in\
    \ a series of RPL_INFO messages\n                  with a RPL_ENDOFINFO reply\
    \ to indicate the end of the\n                  replies.\n        375     RPL_MOTDSTART\n\
    \                        \":- <server> Message of the day - \"\n        372  \
    \   RPL_MOTD\n                        \":- <text>\"\n        376     RPL_ENDOFMOTD\n\
    \                        \":End of /MOTD command\"\n                - When responding\
    \ to the MOTD message and the MOTD file\n                  is found, the file\
    \ is displayed line by line, with\n                  each line no longer than\
    \ 80 characters, using\n                  RPL_MOTD format replies.  These should\
    \ be surrounded\n                  by a RPL_MOTDSTART (before the RPL_MOTDs) and\
    \ an\n                  RPL_ENDOFMOTD (after).\n        381     RPL_YOUREOPER\n\
    \                        \":You are now an IRC operator\"\n                - RPL_YOUREOPER\
    \ is sent back to a client which has\n                  just successfully issued\
    \ an OPER message and gained\n                  operator status.\n        382\
    \     RPL_REHASHING\n                        \"<config file> :Rehashing\"\n  \
    \              - If the REHASH option is used and an operator sends\n        \
    \          a REHASH message, an RPL_REHASHING is sent back to\n              \
    \    the operator.\n        391     RPL_TIME\n                        \"<server>\
    \ :<string showing server's local time>\"\n                - When replying to\
    \ the TIME message, a server must send\n                  the reply using the\
    \ RPL_TIME format above.  The string\n                  showing the time need\
    \ only contain the correct day and\n                  time there.  There is no\
    \ further requirement for the\n                  time string.\n        392   \
    \  RPL_USERSSTART\n                        \":UserID   Terminal  Host\"\n    \
    \    393     RPL_USERS\n                        \":%-8s %-9s %-8s\"\n        394\
    \     RPL_ENDOFUSERS\n                        \":End of users\"\n        395 \
    \    RPL_NOUSERS\n                        \":Nobody logged in\"\n            \
    \    - If the USERS message is handled by a server, the\n                  replies\
    \ RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and\n                  RPL_NOUSERS\
    \ are used.  RPL_USERSSTART must be sent\n                  first, following by\
    \ either a sequence of RPL_USERS\n                  or a single RPL_NOUSER.  Following\
    \ this is\n                  RPL_ENDOFUSERS.\n        200     RPL_TRACELINK\n\
    \                        \"Link <version & debug level> <destination> \\\n   \
    \                      <next server>\"\n        201     RPL_TRACECONNECTING\n\
    \                        \"Try. <class> <server>\"\n        202     RPL_TRACEHANDSHAKE\n\
    \                        \"H.S. <class> <server>\"\n        203     RPL_TRACEUNKNOWN\n\
    \                        \"???? <class> [<client IP address in dot form>]\"\n\
    \        204     RPL_TRACEOPERATOR\n                        \"Oper <class> <nick>\"\
    \n        205     RPL_TRACEUSER\n                        \"User <class> <nick>\"\
    \n        206     RPL_TRACESERVER\n                        \"Serv <class> <int>S\
    \ <int>C <server> \\\n                         <nick!user|*!*>@<host|server>\"\
    \n        208     RPL_TRACENEWTYPE\n                        \"<newtype> 0 <client\
    \ name>\"\n        261     RPL_TRACELOG\n                        \"File <logfile>\
    \ <debug level>\"\n                - The RPL_TRACE* are all returned by the server\
    \ in\n                  response to the TRACE message.  How many are\n       \
    \           returned is dependent on the the TRACE message and\n             \
    \     whether it was sent by an operator or not.  There\n                  is\
    \ no predefined order for which occurs first.\n                  Replies RPL_TRACEUNKNOWN,\
    \ RPL_TRACECONNECTING and\n                  RPL_TRACEHANDSHAKE are all used for\
    \ connections\n                  which have not been fully established and are\
    \ either\n                  unknown, still attempting to connect or in the\n \
    \                 process of completing the 'server handshake'.\n            \
    \      RPL_TRACELINK is sent by any server which handles\n                  a\
    \ TRACE message and has to pass it on to another\n                  server.  The\
    \ list of RPL_TRACELINKs sent in\n                  response to a TRACE command\
    \ traversing the IRC\n                  network should reflect the actual connectivity\
    \ of\n                  the servers themselves along that path.\n            \
    \      RPL_TRACENEWTYPE is to be used for any connection\n                  which\
    \ does not fit in the other categories but is\n                  being displayed\
    \ anyway.\n        211     RPL_STATSLINKINFO\n                        \"<linkname>\
    \ <sendq> <sent messages> \\\n                         <sent bytes> <received\
    \ messages> \\\n                         <received bytes> <time open>\"\n    \
    \    212     RPL_STATSCOMMANDS\n                        \"<command> <count>\"\n\
    \        213     RPL_STATSCLINE\n                        \"C <host> * <name> <port>\
    \ <class>\"\n        214     RPL_STATSNLINE\n                        \"N <host>\
    \ * <name> <port> <class>\"\n        215     RPL_STATSILINE\n                \
    \        \"I <host> * <host> <port> <class>\"\n        216     RPL_STATSKLINE\n\
    \                        \"K <host> * <username> <port> <class>\"\n        218\
    \     RPL_STATSYLINE\n                        \"Y <class> <ping frequency> <connect\
    \ \\\n                         frequency> <max sendq>\"\n        219     RPL_ENDOFSTATS\n\
    \                        \"<stats letter> :End of /STATS report\"\n        241\
    \     RPL_STATSLLINE\n                        \"L <hostmask> * <servername> <maxdepth>\"\
    \n        242     RPL_STATSUPTIME\n                        \":Server Up %d days\
    \ %d:%02d:%02d\"\n        243     RPL_STATSOLINE\n                        \"O\
    \ <hostmask> * <name>\"\n        244     RPL_STATSHLINE\n                    \
    \    \"H <hostmask> * <servername>\"\n        221     RPL_UMODEIS\n          \
    \              \"<user mode string>\"\n                        - To answer a query\
    \ about a client's own mode,\n                          RPL_UMODEIS is sent back.\n\
    \        251     RPL_LUSERCLIENT\n                        \":There are <integer>\
    \ users and <integer> \\\n                         invisible on <integer> servers\"\
    \n        252     RPL_LUSEROP\n                        \"<integer> :operator(s)\
    \ online\"\n        253     RPL_LUSERUNKNOWN\n                        \"<integer>\
    \ :unknown connection(s)\"\n        254     RPL_LUSERCHANNELS\n              \
    \          \"<integer> :channels formed\"\n        255     RPL_LUSERME\n     \
    \                   \":I have <integer> clients and <integer> \\\n           \
    \               servers\"\n                        - In processing an LUSERS message,\
    \ the server\n                          sends a set of replies from RPL_LUSERCLIENT,\n\
    \                          RPL_LUSEROP, RPL_USERUNKNOWN,\n                   \
    \       RPL_LUSERCHANNELS and RPL_LUSERME.  When\n                          replying,\
    \ a server must send back\n                          RPL_LUSERCLIENT and RPL_LUSERME.\
    \  The other\n                          replies are only sent back if a non-zero\
    \ count\n                          is found for them.\n        256     RPL_ADMINME\n\
    \                        \"<server> :Administrative info\"\n        257     RPL_ADMINLOC1\n\
    \                        \":<admin info>\"\n        258     RPL_ADMINLOC2\n  \
    \                      \":<admin info>\"\n        259     RPL_ADMINEMAIL\n   \
    \                     \":<admin info>\"\n                        - When replying\
    \ to an ADMIN message, a server\n                          is expected to use\
    \ replies RLP_ADMINME\n                          through to RPL_ADMINEMAIL and\
    \ provide a text\n                          message with each.  For RPL_ADMINLOC1\
    \ a\n                          description of what city, state and country\n \
    \                         the server is in is expected, followed by\n        \
    \                  details of the university and department\n                \
    \          (RPL_ADMINLOC2) and finally the administrative\n                  \
    \        contact for the server (an email address here\n                     \
    \     is required) in RPL_ADMINEMAIL.\n"
- title: 6.3 Reserved numerics.
  contents:
  - "6.3 Reserved numerics.\n   These numerics are not described above since they\
    \ fall into one of\n   the following categories:\n        1. no longer in use;\n\
    \        2. reserved for future planned use;\n        3. in current use but are\
    \ part of a non-generic 'feature' of\n           the current IRC server.\n   \
    \     209     RPL_TRACECLASS          217     RPL_STATSQLINE\n        231    \
    \ RPL_SERVICEINFO         232     RPL_ENDOFSERVICES\n        233     RPL_SERVICE\
    \             234     RPL_SERVLIST\n        235     RPL_SERVLISTEND\n        316\
    \     RPL_WHOISCHANOP         361     RPL_KILLDONE\n        362     RPL_CLOSING\
    \             363     RPL_CLOSEEND\n        373     RPL_INFOSTART           384\
    \     RPL_MYPORTIS\n        466     ERR_YOUWILLBEBANNED     476     ERR_BADCHANMASK\n\
    \        492     ERR_NOSERVICEHOST\n"
- title: 7. Client and server authentication
  contents:
  - "7. Client and server authentication\n   Clients and servers are both subject\
    \ to the same level of\n   authentication.  For both, an IP number to hostname\
    \ lookup (and\n   reverse check on this) is performed for all connections made\
    \ to the\n   server.  Both connections are then subject to a password check (if\n\
    \   there is a password set for that connection).  These checks are\n   possible\
    \ on all connections although the password check is only\n   commonly used with\
    \ servers.\n   An additional check that is becoming of more and more common is\
    \ that\n   of the username responsible for making the connection.  Finding the\n\
    \   username of the other end of the connection typically involves\n   connecting\
    \ to an authentication server such as IDENT as described in\n   RFC 1413.\n  \
    \ Given that without passwords it is not easy to reliably determine who\n   is\
    \ on the other end of a network connection, use of passwords is\n   strongly recommended\
    \ on inter-server connections in addition to any\n   other measures such as using\
    \ an ident server.\n"
- title: 8. Current implementations
  contents:
  - "8. Current implementations\n   The only current implementation of this protocol\
    \ is the IRC server,\n   version 2.8. Earlier versions may implement some or all\
    \ of the\n   commands described by this document with NOTICE messages replacing\n\
    \   many of the numeric replies.  Unfortunately, due to backward\n   compatibility\
    \ requirements, the implementation of some parts of this\n   document varies with\
    \ what is laid out.  On notable difference is:\n        * recognition that any\
    \ LF or CR anywhere in a message marks the\n          end of that message (instead\
    \ of requiring CR-LF);\n   The rest of this section deals with issues that are\
    \ mostly of\n   importance to those who wish to implement a server but some parts\n\
    \   also apply directly to clients as well.\n"
- title: '8.1 Network protocol: TCP - why it is best used here.'
  contents:
  - "8.1 Network protocol: TCP - why it is best used here.\n   IRC has been implemented\
    \ on top of TCP since TCP supplies a reliable\n   network protocol which is well\
    \ suited to this scale of conferencing.\n   The use of multicast IP is an alternative,\
    \ but it is not widely\n   available or supported at the present time.\n"
- title: 8.1.1 Support of Unix sockets
  contents:
  - "8.1.1 Support of Unix sockets\n   Given that Unix domain sockets allow listen/connect\
    \ operations, the\n   current implementation can be configured to listen and accept\
    \ both\n   client and server connections on a Unix domain socket.  These are\n\
    \   recognized as sockets where the hostname starts with a '/'.\n   When providing\
    \ any information about the connections on a Unix domain\n   socket, the server\
    \ is required to supplant the actual hostname in\n   place of the pathname unless\
    \ the actual socket name is being asked\n   for.\n"
- title: 8.2 Command Parsing
  contents:
  - "8.2 Command Parsing\n   To provide useful 'non-buffered' network IO for clients\
    \ and servers,\n   each connection is given its own private 'input buffer' in\
    \ which the\n   results of the most recent read and parsing are kept.  A buffer\
    \ size\n   of 512 bytes is used so as to hold 1 full message, although, this\n\
    \   will usually hold several commands.  The private buffer is parsed\n   after\
    \ every read operation for valid messages.  When dealing with\n   multiple messages\
    \ from one client in the buffer, care should be taken\n   in case one happens\
    \ to cause the client to be 'removed'.\n"
- title: 8.3 Message delivery
  contents:
  - "8.3 Message delivery\n   It is common to find network links saturated or hosts\
    \ to which you\n   are sending data unable to send data.  Although Unix typically\n\
    \   handles this through the TCP window and internal buffers, the server\n   often\
    \ has large amounts of data to send (especially when a new\n   server-server link\
    \ forms) and the small buffers provided in the\n   kernel are not enough for the\
    \ outgoing queue.  To alleviate this\n   problem, a \"send queue\" is used as\
    \ a FIFO queue for data to be sent.\n   A typical \"send queue\" may grow to 200\
    \ Kbytes on a large IRC network\n   with a slow network connection when a new\
    \ server connects.\n   When polling its connections, a server will first read\
    \ and parse all\n   incoming data, queuing any data to be sent out. When all available\n\
    \   input is processed, the queued data is sent. This reduces the number\n   of\
    \ write() system calls and helps TCP make bigger packets.\n"
- title: 8.4 Connection 'Liveness'
  contents:
  - "8.4 Connection 'Liveness'\n   To detect when a connection has died or become\
    \ unresponsive, the\n   server must ping each of its connections that it doesn't\
    \ get a\n   response from in a given amount of time.\n   If a connection doesn't\
    \ respond in time, its connection is closed\n   using the appropriate procedures.\
    \  A connection is also dropped if\n   its sendq grows beyond the maximum allowed,\
    \ because it is better to\n   close a slow connection than have a server process\
    \ block.\n"
- title: 8.5 Establishing a server to client connection
  contents:
  - "8.5 Establishing a server to client connection\n   Upon connecting to an IRC\
    \ server, a client is sent the MOTD (if\n   present) as well as the current user/server\
    \ count (as per the LUSER\n   command).  The server is also required to give an\
    \ unambiguous message\n   to the client which states its name and version as well\
    \ as any other\n   introductory messages which may be deemed appropriate.\n  \
    \ After dealing with this, the server must then send out the new user's\n   nickname\
    \ and other information as supplied by itself (USER command)\n   and as the server\
    \ could discover (from DNS/authentication servers).\n   The server must send this\
    \ information out with NICK first followed by\n   USER.\n"
- title: 8.6 Establishing a server-server connection.
  contents:
  - "8.6 Establishing a server-server connection.\n   The process of establishing\
    \ of a server-to-server connection is\n   fraught with danger since there are\
    \ many possible areas where\n   problems can occur - the least of which are race\
    \ conditions.\n   After a server has received a connection following by a PASS/SERVER\n\
    \   pair which were recognised as being valid, the server should then\n   reply\
    \ with its own PASS/SERVER information for that connection as\n   well as all\
    \ of the other state information it knows about as\n   described below.\n   When\
    \ the initiating server receives a PASS/SERVER pair, it too then\n   checks that\
    \ the server responding is authenticated properly before\n   accepting the connection\
    \ to be that server.\n"
- title: 8.6.1 Server exchange of state information when connecting
  contents:
  - "8.6.1 Server exchange of state information when connecting\n   The order of state\
    \ information being exchanged between servers is\n   essential.  The required\
    \ order is as follows:\n        * all known other servers;\n        * all known\
    \ user information;\n        * all known channel information.\n   Information\
    \ regarding servers is sent via extra SERVER messages, user\n   information with\
    \ NICK/USER/MODE/JOIN messages and channels with MODE\n   messages.\n   NOTE:\
    \ channel topics are *NOT* exchanged here because the TOPIC\n   command overwrites\
    \ any old topic information, so at best, the two\n   sides of the connection would\
    \ exchange topics.\n   By passing the state information about servers first, any\
    \ collisions\n   with servers that already exist occur before nickname collisions\
    \ due\n   to a second server introducing a particular nickname.  Due to the IRC\n\
    \   network only being able to exist as an acyclic graph, it may be\n   possible\
    \ that the network has already reconnected in another\n   location, the place\
    \ where the collision occurs indicating where the\n   net needs to split.\n"
- title: 8.7 Terminating server-client connections
  contents:
  - "8.7 Terminating server-client connections\n   When a client connection closes,\
    \ a QUIT message is generated on\n   behalf of the client by the server to which\
    \ the client connected.  No\n   other message is to be generated or used.\n"
- title: 8.8 Terminating server-server connections
  contents:
  - "8.8 Terminating server-server connections\n   If a server-server connection is\
    \ closed, either via a remotely\n   generated SQUIT or 'natural' causes, the rest\
    \ of the connected IRC\n   network must have its information updated with by the\
    \ server which\n   detected the closure.  The server then sends a list of SQUITs\
    \ (one\n   for each server behind that connection) and a list of QUITs (again,\n\
    \   one for each client behind that connection).\n"
- title: 8.9 Tracking nickname changes
  contents:
  - "8.9 Tracking nickname changes\n   All IRC servers are required to keep a history\
    \ of recent nickname\n   changes.  This is required to allow the server to have\
    \ a chance of\n   keeping in touch of things when nick-change race conditions\
    \ occur\n   with commands which manipulate them.  Commands which must trace nick\n\
    \   changes are:\n        * KILL (the nick being killed)\n        * MODE (+/-\
    \ o,v)\n        * KICK (the nick being kicked)\n   No other commands are to have\
    \ nick changes checked for.\n   In the above cases, the server is required to\
    \ first check for the\n   existence of the nickname, then check its history to\
    \ see who that\n   nick currently belongs to (if anyone!).  This reduces the chances\
    \ of\n   race conditions but they can still occur with the server ending up\n\
    \   affecting the wrong client.  When performing a change trace for an\n   above\
    \ command it is recommended that a time range be given and\n   entries which are\
    \ too old ignored.\n   For a reasonable history, a server should be able to keep\
    \ previous\n   nickname for every client it knows about if they all decided to\n\
    \   change.  This size is limited by other factors (such as memory, etc).\n"
- title: 8.10 Flood control of clients
  contents:
  - "8.10 Flood control of clients\n   With a large network of interconnected IRC\
    \ servers, it is quite easy\n   for any single client attached to the network\
    \ to supply a continuous\n   stream of messages that result in not only flooding\
    \ the network, but\n   also degrading the level of service provided to others.\
    \  Rather than\n   require every 'victim' to be provide their own protection,\
    \ flood\n   protection was written into the server and is applied to all clients\n\
    \   except services.  The current algorithm is as follows:\n        * check to\
    \ see if client's `message timer' is less than\n          current time (set to\
    \ be equal if it is);\n        * read any data present from the client;\n    \
    \    * while the timer is less than ten seconds ahead of the current\n       \
    \   time, parse any present messages and penalize the client by\n          2 seconds\
    \ for each message;\n   which in essence means that the client may send 1 message\
    \ every 2\n   seconds without being adversely affected.\n"
- title: 8.11 Non-blocking lookups
  contents:
  - "8.11 Non-blocking lookups\n   In a real-time environment, it is essential that\
    \ a server process do\n   as little waiting as possible so that all the clients\
    \ are serviced\n   fairly.  Obviously this requires non-blocking IO on all network\n\
    \   read/write operations.  For normal server connections, this was not\n   difficult,\
    \ but there are other support operations that may cause the\n   server to block\
    \ (such as disk reads).  Where possible, such activity\n   should be performed\
    \ with a short timeout.\n"
- title: 8.11.1 Hostname (DNS) lookups
  contents:
  - "8.11.1 Hostname (DNS) lookups\n   Using the standard resolver libraries from\
    \ Berkeley and others has\n   meant large delays in some cases where replies have\
    \ timed out.  To\n   avoid this, a separate set of DNS routines were written which\
    \ were\n   setup for non-blocking IO operations and then polled from within the\n\
    \   main server IO loop.\n"
- title: 8.11.2 Username (Ident) lookups
  contents:
  - "8.11.2 Username (Ident) lookups\n   Although there are numerous ident libraries\
    \ for use and inclusion\n   into other programs, these caused problems since they\
    \ operated in a\n   synchronous manner and resulted in frequent delays.  Again\
    \ the\n   solution was to write a set of routines which would cooperate with\n\
    \   the rest of the server and work using non-blocking IO.\n"
- title: 8.12 Configuration File
  contents:
  - "8.12 Configuration File\n   To provide a flexible way of setting up and running\
    \ the server, it is\n   recommended that a configuration file be used which contains\n\
    \   instructions to the server on the following:\n        * which hosts to accept\
    \ client connections from;\n        * which hosts to allow to connect as servers;\n\
    \        * which hosts to connect to (both actively and\n          passively);\n\
    \        * information about where the server is (university,\n          city/state,\
    \ company are examples of this);\n        * who is responsible for the server\
    \ and an email address\n          at which they can be contacted;\n        * hostnames\
    \ and passwords for clients which wish to be given\n          access to restricted\
    \ operator commands.\n   In specifying hostnames, both domain names and use of\
    \ the 'dot'\n   notation (127.0.0.1) should both be accepted.  It must be possible\
    \ to\n   specify the password to be used/accepted for all outgoing and\n   incoming\
    \ connections (although the only outgoing connections are\n   those to other servers).\n\
    \   The above list is the minimum requirement for any server which wishes\n  \
    \ to make a connection with another server.  Other items which may be\n   of use\
    \ are:\n        * specifying which servers other server may introduce;\n     \
    \   * how deep a server branch is allowed to become;\n        * hours during which\
    \ clients may connect.\n"
- title: 8.12.1 Allowing clients to connect
  contents:
  - "8.12.1 Allowing clients to connect\n   A server should use some sort of 'access\
    \ control list' (either in the\n   configuration file or elsewhere) that is read\
    \ at startup and used to\n   decide what hosts clients may use to connect to it.\n\
    \   Both 'deny' and 'allow' should be implemented to provide the required\n  \
    \ flexibility for host access control.\n"
- title: 8.12.2 Operators
  contents:
  - "8.12.2 Operators\n   The granting of operator privileges to a disruptive person\
    \ can have\n   dire consequences for the well-being of the IRC net in general\
    \ due to\n   the powers given to them.  Thus, the acquisition of such powers\n\
    \   should not be very easy.  The current setup requires two 'passwords'\n   to\
    \ be used although one of them is usually easy guessed.  Storage of\n   oper passwords\
    \ in configuration files is preferable to hard coding\n   them in and should be\
    \ stored in a crypted format (ie using crypt(3)\n   from Unix) to prevent easy\
    \ theft.\n"
- title: 8.12.3 Allowing servers to connect
  contents:
  - "8.12.3 Allowing servers to connect\n   The interconnection of server is not a\
    \ trivial matter: a bad\n   connection can have a large impact on the usefulness\
    \ of IRC.  Thus,\n   each server should have a list of servers to which it may\
    \ connect and\n   which servers may connect to it.  Under no circumstances should\
    \ a\n   server allow an arbitrary host to connect as a server.  In addition\n\
    \   to which servers may and may not connect, the configuration file\n   should\
    \ also store the password and other characteristics of that\n   link.\n"
- title: 8.12.4 Administrivia
  contents:
  - "8.12.4 Administrivia\n   To provide accurate and valid replies to the ADMIN command\
    \ (see\n   section 4.3.7), the server should find the relevant details in the\n\
    \   configuration.\n"
- title: 8.13 Channel membership
  contents:
  - "8.13 Channel membership\n   The current server allows any registered local user\
    \ to join upto 10\n   different channels.  There is no limit imposed on non-local\
    \ users so\n   that the server remains (reasonably) consistant with all others\
    \ on a\n   channel membership basis\n"
- title: 9. Current problems
  contents:
  - "9. Current problems\n   There are a number of recognized problems with this protocol,\
    \ all  of\n   which  hope to be solved sometime in the near future during its\n\
    \   rewrite.  Currently, work is underway to find working solutions to\n   these\
    \ problems.\n"
- title: 9.1 Scalability
  contents:
  - "9.1 Scalability\n   It is widely recognized that this protocol does not scale\n\
    \   sufficiently well when used in a large arena.  The main problem comes\n  \
    \ from the requirement that all servers know about all other servers\n   and users\
    \ and that information regarding them be updated as soon as\n   it changes.  It\
    \ is also desirable to keep the number of servers low\n   so that the path length\
    \ between any two points is kept minimal and\n   the spanning tree as strongly\
    \ branched as possible.\n"
- title: 9.2 Labels
  contents:
  - "9.2 Labels\n   The current IRC protocol has 3 types of labels: the nickname,\
    \ the\n   channel name and the server name.  Each of the three types has its\n\
    \   own domain and no duplicates are allowed inside that domain.\n   Currently,\
    \ it is possible for users to pick the label for any of the\n   three, resulting\
    \ in collisions.  It is widely recognized that this\n   needs reworking, with\
    \ a plan for unique names for channels and nicks\n   that don't collide being\
    \ desirable as well as a solution allowing a\n   cyclic tree.\n"
- title: 9.2.1 Nicknames
  contents:
  - "9.2.1 Nicknames\n   The idea of the nickname on IRC is very convenient for users\
    \ to use\n   when talking to each other outside of a channel, but there is only\
    \ a\n   finite nickname space and being what they are, its not uncommon for\n\
    \   several people to want to use the same nick.  If a nickname is chosen\n  \
    \ by two people using this protocol, either one will not succeed or\n   both will\
    \ removed by use of KILL (4.6.1).\n"
- title: 9.2.2 Channels
  contents:
  - "9.2.2 Channels\n   The current channel layout requires that all servers know\
    \ about all\n   channels, their inhabitants and properties.  Besides not scaling\n\
    \   well, the issue of privacy is also a concern.  A collision of\n   channels\
    \ is treated as an inclusive event (both people who create the\n   new channel\
    \ are considered to be members of it) rather than an\n   exclusive one such as\
    \ used to solve nickname collisions.\n"
- title: 9.2.3 Servers
  contents:
  - "9.2.3 Servers\n   Although the number of servers is usually small relative to\
    \ the\n   number of users and channels, they two currently required to be known\n\
    \   globally, either each one separately or hidden behind a mask.\n"
- title: 9.3 Algorithms
  contents:
  - "9.3 Algorithms\n   In some places within the server code, it has not  been  possible\
    \  to\n   avoid  N^2  algorithms  such  as  checking  the channel list of a set\n\
    \   of clients.\n   In current server versions, there are no database consistency\
    \ checks,\n   each server assumes that a neighbouring server is correct.  This\n\
    \   opens the door to large problems if a connecting server is buggy or\n   otherwise\
    \ tries to introduce contradictions to the existing net.\n   Currently, because\
    \ of the lack of unique internal and global labels,\n   there are a multitude\
    \ of race conditions that exist.  These race\n   conditions generally arise from\
    \ the problem of it taking time for\n   messages to traverse and effect the IRC\
    \ network.  Even by changing to\n   unique labels, there are problems with channel-related\
    \ commands being\n   disrupted.\n"
- title: 10. Current support and availability
  contents:
  - "10. Current support and availability\n           Mailing lists for IRC related\
    \ discussion:\n                Future protocol: ircd-three-request@eff.org\n \
    \               General discussion: operlist-request@eff.org\n           Software\
    \ implemenations\n                cs.bu.edu:/irc\n                nic.funet.fi:/pub/irc\n\
    \                coombs.anu.edu.au:/pub/irc\n           Newsgroup: alt.irc\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed in sections 4.1, 4.1.1,\
    \ 4.1.3, 5.5, and\n   7.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Jarkko Oikarinen\n   Tuirantie 17 as 9\n   90500 OULU\n\
    \   FINLAND\n   Email: jto@tolsun.oulu.fi\n   Darren Reed\n   4 Pateman Street\n\
    \   Watsonia, Victoria 3087\n   Australia\n   Email: avalon@coombs.anu.edu.au\n"
