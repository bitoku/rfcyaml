- title: __initial_text__
  contents:
  - '         Attacks on Cryptographic Hashes in Internet Protocols

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   Recent announcements of better-than-expected collision attacks in\n\
    \   popular hash algorithms have caused some people to question whether\n   common\
    \ Internet protocols need to be changed, and if so, how.  This\n   document summarizes\
    \ the use of hashes in many protocols, discusses\n   how the collision attacks\
    \ affect and do not affect the protocols,\n   shows how to thwart known attacks\
    \ on digital certificates, and\n   discusses future directions for protocol designers.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In summer 2004, a team of researchers showed concrete evidence\
    \ that\n   the MD5 hash algorithm was susceptible to collision attacks\n   [MD5-attack].\
    \  In early 2005, the same team demonstrated a similar\n   attack on a variant\
    \ of the SHA-1 [RFC3174] hash algorithm, with a\n   prediction that the normally\
    \ used SHA-1 would also be susceptible\n   with a large amount of work (but at\
    \ a level below what should be\n   required if SHA-1 worked properly) [SHA-1-attack].\
    \  Also in early\n   2005, researchers showed a specific construction of PKIX\
    \ certificates\n   [RFC3280] that use MD5 for signing [PKIX-MD5-construction],\
    \ and\n   another researcher showed a faster method for finding MD5 collisions\n\
    \   (eight hours on a 1.6-GHz computer) [MD5-faster].\n   Because of these announcements,\
    \ there has been a great deal of\n   discussion by cryptography experts, protocol\
    \ designers, and other\n   concerned people about what, if anything, should be\
    \ done based on the\n   news.  Unfortunately, some of these discussions have been\
    \ based on\n   erroneous interpretations of both the news and on how hash algorithms\n\
    \   are used in common Internet protocols.\n   Hash algorithms are used by cryptographers\
    \ in a variety of security\n   protocols, for a variety of purposes, at all levels\
    \ of the Internet\n   protocol stack.  They are used because they have two security\n\
    \   properties: to be one way and collision free.  (There is more about\n   these\
    \ properties in the next section; they're easier to explain in\n   terms of breaking\
    \ them.)  The recent attacks have demonstrated that\n   one of those security\
    \ properties is not true.  While it is certainly\n   possible, and at a first\
    \ glance even probable, that the broken\n   security property will not affect\
    \ the overall security of many\n   specific Internet protocols, the conservative\
    \ security approach is to\n   change hash algorithms.  The Internet protocol community\
    \ needs to\n   migrate in an orderly manner away from SHA-1 and MD5 -- especially\n\
    \   MD5 -- and toward more secure hash algorithms.\n   This document summarizes\
    \ what is currently known about hash\n   algorithms and the Internet protocols\
    \ that use them.  It also gives\n   advice on how to avoid the currently known\
    \ problems with MD5 and\n   SHA-1, and what to consider if predicted attacks become\
    \ real.\n   A high-level summary of the current situation is:\n   o  Both MD5\
    \ and SHA-1 have newly found attacks against them, the\n      attacks against\
    \ MD5 being much more severe than the attacks\n      against SHA-1.\n   o  The\
    \ attacks against MD5 are practical on any modern computer.\n   o  The attacks\
    \ against SHA-1 are not feasible with today's computers,\n      but will be if\
    \ the attacks are improved or Moore's Law continues\n      to make computing power\
    \ cheaper.\n   o  Many common Internet protocols use hashes in ways that are\n\
    \      unaffected by these attacks.\n   o  Most of the affected protocols use\
    \ digital signatures.\n   o  Better hash algorithms will reduce the susceptibility\
    \ of these\n      attacks to an acceptable level for all users.\n"
- title: 2.  Hash Algorithms and Attacks on Them
  contents:
  - "2.  Hash Algorithms and Attacks on Them\n   A \"perfect\" hash algorithm has\
    \ a few basic properties.  The algorithm\n   converts a chunk of data (normally,\
    \ a message) of any size into a\n   fixed-size result.  The length of the result\
    \ is called the \"hash\n   length\" and is often denoted as \"L\"; the result\
    \ of applying the hash\n   algorithm on a particular chunk of data is called the\
    \ \"hash value\"\n   for that data.  Any two different messages of any size should\
    \ have an\n   exceedingly small probability of having the same hash value,\n \
    \  regardless of how similar or different the messages are.\n   This description\
    \ leads to two mathematical results.  Finding a pair\n   of messages M1 and M2\
    \ that have the same hash value takes 2^(L/2)\n   attempts.  For any reasonable\
    \ hash length, this is an impossible\n   problem to solve (collision free).  Also,\
    \ given a message M1, finding\n   any other message M2 that has the same hash\
    \ value as M1 takes 2^L\n   attempts.  This is an even harder problem to solve\
    \ (one way).\n   Note that this is the description of a perfect hash algorithm;\
    \ if the\n   algorithm is less than perfect, an attacker can expend less than\
    \ the\n   full amount of effort to find two messages with the same hash value.\n\
    \   There are two categories of attacks.\n   Attacks against the \"collision-free\"\
    \ property:\n   o  A \"collision attack\" allows an attacker to find two messages\
    \ M1\n      and M2 that have the same hash value in fewer than 2^(L/2)\n     \
    \ attempts.\n   Attacks against the \"one-way\" property:\n   o  A \"first-preimage\
    \ attack\" allows an attacker who knows a desired\n      hash value to find a\
    \ message that results in that value in fewer\n      than 2^L attempts.\n   o\
    \  A \"second-preimage attack\" allows an attacker who has a desired\n      message\
    \ M1 to find another message M2 that has the same hash value\n      in fewer than\
    \ 2^L attempts.\n   The two preimage attacks are very similar.  In a first-preimage\n\
    \   attack, you know a hash value but not the message that created it,\n   and\
    \ you want to discover any message with the known hash value; in\n   the second-preimage\
    \ attack, you have a message and you want to find a\n   second message that has\
    \ the same hash.  Attacks that can find one\n   type of preimage can often find\
    \ the other as well.\n   When analyzing the use of hash algorithms in protocols,\
    \ it is\n   important to differentiate which of the two properties of hashes are\n\
    \   important, particularly now that the collision-free property is\n   becoming\
    \ weaker for currently popular hash algorithms.  It is\n   certainly important\
    \ to determine which parties select the material\n   being hashed.  Further, as\
    \ shown by some of the early work,\n   particularly [PKIX-MD5-construction], it\
    \ is also important to\n   consider which party can predict the material at the\
    \ beginning of the\n   hashed object.\n"
- title: 2.1.  Currently Known Attacks
  contents:
  - "2.1.  Currently Known Attacks\n   All the currently known practical or almost-practical\
    \ attacks on MD5\n   and SHA-1 are collision attacks.  This is fortunate: significant\n\
    \   first- and second-preimage attacks on a hash algorithm would be much\n   more\
    \ devastating in the real world than collision attacks, as\n   described later\
    \ in this document.\n   It is also important to note that the current collision\
    \ attacks\n   require at least one of the two messages to have a fair amount of\n\
    \   structure in the bits of the message.  This means that finding two\n   messages\
    \ that both have the same hash value *and* are useful in a\n   real-world attack\
    \ is more difficult than just finding two messages\n   with the same hash value.\n"
- title: 3.  How Internet Protocols Use Hash Algorithms
  contents:
  - "3.  How Internet Protocols Use Hash Algorithms\n   Hash algorithms are used in\
    \ many ways on the Internet.  Most\n   protocols that use hash algorithms do so\
    \ in a way that makes them\n   immune to harm from collision attacks.  This is\
    \ not by accident: good\n   protocol designers develop their protocols to withstand\
    \ as many\n   future changes in the underlying cryptography as possible, including\n\
    \   attacks on the cryptographic algorithms themselves.\n   Uses for hash algorithms\
    \ include:\n   o  Non-repudiable digital signatures on messages.  Non-repudiation\
    \ is\n      a security service that provides protection against false denial\n\
    \      of involvement in a communication.  S/MIME and OpenPGP allow mail\n   \
    \   senders to sign the contents of a message they create, and the\n      recipient\
    \ of that message can verify whether or not the signature\n      is actually associated\
    \ with the message.  A message is used for\n      non-repudiation if the message\
    \ is signed and the recipient of the\n      message can later use the signature\
    \ to prove that the signer\n      indeed created the message.\n   o  Digital signatures\
    \ in certificates from trusted third parties.\n      Although this is similar\
    \ to \"digital signatures on messages\",\n      certificates themselves are used\
    \ in many other protocols for\n      authentication and key management.\n   o\
    \  Challenge-response protocols.  These protocols combine a public\n      large\
    \ random number with a value to help hide the value when being\n      sent over\
    \ unencrypted channels.\n   o  Message authentication with shared secrets.  These\
    \ are similar to\n      challenge-response protocols, except that instead of using\
    \ public\n      values, the message is combined with a shared secret before\n\
    \      hashing.\n   o  Key derivation functions.  These functions make repeated\
    \ use of\n      hash algorithms to mix data into a random string for use in one\
    \ or\n      more keys for a cryptographic protocol.\n   o  Mixing functions. \
    \ These functions also make repeated use of hash\n      algorithms to mix data\
    \ into random strings, for uses other than\n      cryptographic keys.\n   o  Integrity\
    \ protection.  It is common to compare a hash value that\n      is received out-of-band\
    \ for a file with the hash value of the file\n      after it is received over\
    \ an unsecured protocol such as FTP.\n   Of the above methods, only the first\
    \ two are affected by collision\n   attacks, and even then, only in limited circumstances.\
    \  So far, it is\n   believed that, in general, challenge-response protocols are\
    \ not\n   susceptible, because the sender is authenticating a secret already\n\
    \   stored by the recipient.  In message authentication with shared\n   secrets,\
    \ the fact that the secret is known to both parties is also\n   believed to prevent\
    \ any sensible attack.  All key derivation\n   functions in IETF protocols take\
    \ random input from both parties, so\n   the attacker has no way of structuring\
    \ the hashed message.\n"
- title: 4.  Hash Collision Attacks and Non-Repudiation of Digital Signatures
  contents:
  - "4.  Hash Collision Attacks and Non-Repudiation of Digital Signatures\n   The\
    \ basic idea behind the collision attack on a hash algorithm used\n   in a digital-signature\
    \ protocol is that the attacker creates two\n   messages that have the same hash\
    \ value, causes one of them to be\n   signed, and then uses that signature over\
    \ the other message for some\n   nefarious purpose.  The specifics of the attack\
    \ depend on the\n   protocol being used and what the victim does when presented\
    \ with the\n   signed message.\n   The canonical example is where you create two\
    \ messages, one of which\n   says \"I will pay $10 for doing this job\" and the\
    \ other of which says\n   \"I will pay $10,000 for doing this job\".  You present\
    \ the first\n   message to the victim, get them to sign it, do the job, substitute\n\
    \   the second message in the signed authorization, present the altered\n   signed\
    \ message (whose signature still verifies), and demand the\n   higher amount of\
    \ money.  If the victim refuses, you take them to\n   court and show the second\
    \ signed message.\n   Most non-repudiation attacks rely on a human assessing the\
    \ validity\n   of the purportedly signed message.  In the case of the hash-collision\n\
    \   attack, the purportedly signed message's signature is valid, but so\n   is\
    \ the signature on the original message.  The victim can produce the\n   original\
    \ message, show that he/she signed it, and show that the two\n   hash values are\
    \ identical.  The chance of this happening by accident\n   is one in 2^L, which\
    \ is infinitesimally small for either MD5 or\n   SHA-1.\n   In other words, to\
    \ thwart a hash collision attack in a non-\n   repudiation protocol where a human\
    \ is using a signed message as\n   authorization, the signer needs to keep a copy\
    \ of the original\n   message he/she signed.  Messages that have other messages\
    \ with the\n   same hash must be created by the same person, and do not happen\
    \ by\n   accident under any known probable circumstances.  The fact that the\n\
    \   two messages have the same hash value should cause enough doubt in\n   the\
    \ mind of the person judging the validity of the signature to cause\n   the legal\
    \ attack to fail (and possibly bring intentional fraud\n   charges against the\
    \ attacker).\n   Thwarting hash collision attacks in automated non-repudiation\n\
    \   protocols is potentially more difficult, because there may be no\n   humans\
    \ paying enough attention to be able to argue about what should\n   have happened.\
    \  For example, in electronic data interchange (EDI)\n   applications, actions\
    \ are usually taken automatically after\n   authentication of a signed message.\
    \  Determining the practical\n   effects of hash collisions would require a detailed\
    \ evaluation of the\n   protocol.\n"
- title: 5.  Hash Collision Attacks and Digital Certificates from Trusted Third
  contents:
  - "5.  Hash Collision Attacks and Digital Certificates from Trusted Third\n    Parties\n\
    \   Digital certificates are a special case of digital signatures.  In\n   general,\
    \ there is no non-repudiation attack on trusted third parties\n   due to the fact\
    \ that certificates have specific formatting.  Digital\n   certificates are often\
    \ used in Internet protocols for key management\n   and for authenticating a party\
    \ with whom you are communicating,\n   possibly before granting access to network\
    \ services or trusting the\n   party with private data such as credit card information.\n\
    \   It is therefore important that the granting party can trust that the\n   certificate\
    \ correctly identifies the person or system identified by\n   the certificate.\
    \  If the attacker can get a certificate for two\n   different identities using\
    \ just one public key, the victim can be\n   fooled into believing that one person\
    \ is someone else.\n   The collision attack on PKIX certificates described in\
    \ early 2005\n   relied on the ability of the attacker to create two different\
    \ public\n   keys that would cause the body of the certificate to have the same\n\
    \   hash value.  For this attack to work, the attacker needs to be able\n   to\
    \ predict the contents and structure of the certificate before it is\n   issued,\
    \ including the identity that will be used, the serial number\n   that will be\
    \ included in the certificate, and the start and stop\n   dates of the validity\
    \ period for the certificate.\n   The effective result of this attack is that\
    \ one person using a single\n   identity can get a digital certificate over one\
    \ public key, but be\n   able to pretend that it is over a different public key\
    \ (but with the\n   same identity, valid dates, and so on).  Because the identity\
    \ in the\n   two certificates is the same, there are probably no real-world\n\
    \   examples where such an attack would get the attacker any advantage.\n   At\
    \ best, someone could claim that the trusted third party made a\n   mistake by\
    \ issuing a certificate with the same identity and serial\n   number based on\
    \ two different public keys.  This is indeed\n   far-fetched.\n   It is very important\
    \ to note that collision attacks only affect the\n   parts of certificates that\
    \ have no human-readable information in\n   them, such as the public keys.  An\
    \ attack that involves getting a\n   certificate with one human-readable identity\
    \ and making that\n   certificate useful for a second human-readable identity\
    \ would require\n   more effort than a simple collision attack.\n"
- title: 5.1.  Reducing the Likelihood of Hash-Based Attacks on PKIX Certificates
  contents:
  - "5.1.  Reducing the Likelihood of Hash-Based Attacks on PKIX Certificates\n  \
    \ If a trusted third party who issues PKIX certificates wants to avoid\n   the\
    \ attack described above, they can prevent the attack by making\n   other signed\
    \ parts of the certificate random enough to eliminate any\n   advantage gained\
    \ by the attack.  Ideas that have been suggested\n   include:\n   o  making part\
    \ of the certificate serial number unpredictable to the\n      attacker\n   o\
    \  adding a randomly chosen component to the identity\n   o  making the validity\
    \ dates unpredictable to the attacker by skewing\n      each one forwards or backwards\n\
    \   Any of these mechanisms would increase the amount of work the\n   attacker\
    \ needs to do to trick the issuer of the certificate into\n   generating a certificate\
    \ that is susceptible to the attack.\n"
- title: 6.  Future Attacks and Their Effects
  contents:
  - "6.  Future Attacks and Their Effects\n   There is a disagreement in the security\
    \ community about what to do\n   now.  Even the two authors of this document disagree\
    \ on what to do\n   now.\n   One of us (Bruce) believes that everyone should start\
    \ migrating to\n   SHA-256 [SHA-256] now, due to the weaknesses that have already\
    \ been\n   demonstrated in both MD5 and SHA-1.  There is an old saying inside\n\
    \   the US National Security Agency (NSA): \"Attacks always get better;\n   they\
    \ never get worse.\"  The current collision attacks against MD5 are\n   easily\
    \ done on a single computer; the collision attacks against SHA-1\n   are at the\
    \ far edge of feasibility today, but will only improve with\n   time.  It is preferable\
    \ to migrate to the new hash standard before\n   there is a panic, instead of\
    \ after.  Just as we all migrated from\n   SHA-0 to SHA-1 based on some unknown\
    \ vulnerability discovered inside\n   the NSA, we need to migrate from SHA-1 to\
    \ SHA-256 based on these most\n   recent attacks.  SHA-256 has a 256-bit hash\
    \ length.  This length will\n   give us a much larger security margin in the event\
    \ of newly\n   discovered attacks.  Meanwhile, further research inside the\n \
    \  cryptographic community over the next several years should point to\n   further\
    \ improvements in hash algorithm design, and potentially an\n   even more secure\
    \ hash algorithm.\n   The other of us (Paul) believes that this may not be wise\
    \ for two\n   reasons.  First, the collision attacks on current protocols have\
    \ not\n   been shown to have any discernible real-world effects.  Further, it\n\
    \   is not yet clear which stronger hash algorithm will be a good choice\n   for\
    \ the long term.  Moving from one algorithm to another leads to\n   inevitable\
    \ lack of interoperability and confusion for typical crypto\n   users.  (Of course,\
    \ if any practical attacks are formulated before\n   there is community consensus\
    \ of the properties of the cipher-based\n   hash algorithms, Paul would change\
    \ his opinion to \"move to SHA-256\n   now\".)\n   Both authors agree that work\
    \ should be done to make all Internet\n   protocols able to use different hash\
    \ algorithms with longer hash\n   values.  Fortunately, most protocols today already\
    \ are capable of\n   this; those that are not should be fixed soon.\n   The authors\
    \ of this document feel similarly for new protocols being\n   developed: Bruce\
    \ thinks they should start using SHA-256 from the\n   start, and Paul thinks that\
    \ they should use SHA-1 as long as the new\n   protocols are not susceptible to\
    \ collision attacks.  Any new protocol\n   must have the ability to change all\
    \ of its cryptographic algorithms,\n   not just its hash algorithm.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The entire document discusses security on the\
    \ Internet.\n   The discussion in this document assumes that the only attacks\
    \ on hash\n   algorithms used in Internet protocols are collision attacks.  Some\n\
    \   significant preimaging attacks have already been discovered\n   [Preimaging-attack],\
    \ but they are not yet practical.  If a practical\n   preimaging attack is discovered,\
    \ it would drastically affect many\n   Internet protocols.  In this case, \"practical\"\
    \ means that it could be\n   executed by an attacker in a meaningful amount of\
    \ time for a\n   meaningful amount of money.  A preimaging attack that costs trillions\n\
    \   of dollars and takes decades to preimage one desired hash value or\n   one\
    \ message is not practical; one that costs a few thousand dollars\n   and takes\
    \ a few weeks might be very practical.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [MD5-attack]            X. Wang, D. Feng, X. Lai,\
    \ and H. Yu,\n                           \"Collisions for Hash Functions MD4,\
    \ MD5,\n                           HAVAL-128 and RIPEMD\", August 2004,\n    \
    \                       <http://eprint.iacr.org/2004/199>.\n   [MD5-faster]  \
    \          Vlastimil Klima, \"Finding MD5 Collisions - a\n                   \
    \        Toy For a Notebook\", March 2005,\n                           <http://cryptography.hyperlink.cz/\n\
    \                           md5/MD5_collisions.pdf>.\n   [PKIX-MD5-construction]\
    \ Arjen Lenstra and Benne de Weger, \"On the\n                           possibility\
    \ of constructing meaningful hash\n                           collisions for public\
    \ keys\", February 2005,\n                           <http://www.win.tue.nl/~bdeweger/\n\
    \                           CollidingCertificates/ddl-final.pdf>.\n   [Preimaging-attack]\
    \     John Kelsey and Bruce Schneier, \"Second\n                           Preimages\
    \ on n-bit Hash Functions for Much\n                           Less than 2^n Work\"\
    , November 2004,\n                           <http://eprint.iacr.org/2004/304>.\n\
    \   [RFC3174]               Eastlake, D. and P. Jones, \"US Secure Hash\n    \
    \                       Algorithm 1 (SHA1)\", RFC 3174,\n                    \
    \       September 2001.\n   [RFC3280]               Housley, R., Polk, W., Ford,\
    \ W., and D. Solo,\n                           \"Internet X.509 Public Key Infrastructure\n\
    \                           Certificate and Certificate Revocation List\n    \
    \                       (CRL) Profile\", RFC 3280, April 2002.\n   [SHA-1-attack]\
    \          Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu,\n                    \
    \       \"Collision Search Attacks on SHA1\",\n                           February\
    \ 2005,\n                           <http://theory.csail.mit.edu/~yiqun/shanote.pdf>.\n\
    \   [SHA-256]               NIST, \"Federal Information Processing\n         \
    \                  Standards Publication (FIPS PUB) 180-2,\n                 \
    \          Secure Hash Standard\", August 2002.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The authors would like to thank the IETF community,\
    \ particularly\n   those active on the SAAG mailing list, for their input.  We\
    \ would\n   also like to thank Eric Rescorla for early material that went into\n\
    \   the first version, and Arjen Lenstra and Benne de Weger for\n   significant\
    \ comments on the first version of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Hoffman\n   VPN Consortium\n   EMail: paul.hoffman@vpnc.org\n\
    \   Bruce Schneier\n   Counterpane Internet Security\n   EMail: schneier@counterpane.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
