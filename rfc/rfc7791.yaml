- title: __initial_text__
  contents:
  - "                  Cloning the IKE Security Association\n        in the Internet\
    \ Key Exchange Protocol Version 2 (IKEv2)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document considers a VPN end user establishing an IPsec Security\n\
    \   Association (SA) with a Security Gateway using the Internet Key\n   Exchange\
    \ Protocol version 2 (IKEv2), where at least one of the peers\n   has multiple\
    \ interfaces or where Security Gateway is a cluster with\n   each node having\
    \ its own IP address.\n   The protocol described allows a peer to clone an IKEv2\
    \ SA, where an\n   additional SA is derived from an existing one.  The newly created\
    \ IKE\n   SA is set without the IKEv2 authentication exchange.  This IKE SA can\n\
    \   later be assigned to another interface or moved to another cluster\n   node.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7791.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Requirements Notation . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  Protocol Overview . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   5.  Protocol Details  . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     5.1.  Support Negotiation . . . . . . . . . . . . . . . . . . .\
    \   6\n     5.2.  Cloning the IKE SA  . . . . . . . . . . . . . . . . . . .  \
    \ 7\n     5.3.  Error Handling  . . . . . . . . . . . . . . . . . . . . .   7\n\
    \   6.  Payload Description . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \ 7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9\n   8.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .   9\n   9.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n     9.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  10\n     9.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  10\n   Appendix A.  Setting a\
    \ VPN on Multiple Interfaces . . . . . . . .  11\n     A.1.  Setting VPN_0 . .\
    \ . . . . . . . . . . . . . . . . . . . .  11\n     A.2.  Creating an Additional\
    \ IKE SA . . . . . . . . . . . . . .  12\n     A.3.  Creating the Child SA for\
    \ VPN_1 . . . . . . . . . . . . .  12\n     A.4.  Moving VPN_1 on Interface_1\
    \ . . . . . . . . . . . . . . .  13\n   Acknowledgments . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  14\n   Authors' Addresses  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The main scenario that motivated this document is a VPN\
    \ end user\n   establishing a VPN with a Security Gateway when at least one of\
    \ the\n   peers has multiple interfaces.  Figure 1 represents the case when the\n\
    \   VPN end user has multiple interfaces, Figure 2 represents the case\n   when\
    \ the Security Gateway has multiple interfaces, and Figure 3\n   represents the\
    \ case when both the VPN end user and the Security\n   Gateway have multiple interfaces.\
    \  With Figure 1 and Figure 2, one of\n   the peers has n = 2 interfaces and the\
    \ other has a single interface.\n   This results in the creation of up to n =\
    \ 2 VPNs.  With Figure 3, the\n   VPN end user has n = 2 interfaces and the Security\
    \ Gateway has m = 2\n   interfaces.  This may lead to up to m x n VPNs.\n   +------------+\
    \                                +------------+\n   |            | Interface_0\
    \ : VPN_0            |            |\n   |            =================       \
    \         |            |\n   |    VPN     |               v                | \
    \ Security  |\n   |  End User  |               ==================  Gateway   |\n\
    \   |            ================^                |            |\n   |       \
    \     | Interface_1 : VPN_1            |            |\n   +------------+     \
    \                           +------------+\n              Figure 1: VPN End User\
    \ with Multiple Interfaces\n   +------------+                                +------------+\n\
    \   |            |            Interface_0 : VPN_0 |            |\n   |       \
    \     |               ==================            |\n   |    VPN     |     \
    \          v                |  Security  |\n   |  End User  =================\
    \                |  Gateway   |\n   |            |               ^=================\
    \            |\n   |            |            Interface_1 : VPN_1 |           \
    \ |\n   +------------+                                +------------+\n       \
    \     Figure 2: Security Gateway with Multiple Interfaces\n   +------------+ \
    \                               +------------+\n   |            | Interface_0\
    \       Interface_0' |            |\n   |            ==================================\
    \            |\n   |    VPN     |             \\\\ //              |  Security\
    \  |\n   |  End User  |             // \\\\              |  Gateway   |\n   |\
    \            ==================================            |\n   |           \
    \ | Interface_1       Interface_1' |            |\n   +------------+         \
    \                       +------------+\n   Figure 3: VPN End User and Security\
    \ Gateway with Multiple Interfaces\n   With the current IKEv2 protocol [RFC7296],\
    \ each VPN requires an IKE\n   SA, and setting an IKE SA requires an authentication.\
    \  Authentication\n   might require multiple round trips and an activity from\
    \ the end user\n   (like EAP-SIM [RFC4186] or EAP-TLS [RFC5216]) as well as crypto\n\
    \   operations that would introduce an additional delay.\n   Another scenario\
    \ is a load-balancing solution.  Load-sharing clusters\n   are often built to\
    \ be transparent for VPN end users.  In the case of\n   IPsec, this means that\
    \ IKE and IPsec SA states are duplicated on\n   every cluster node where the load\
    \ balancer can redirect packets.  The\n   drawback of such an approach is that\
    \ anti-replay related data (in\n   particular, Sequence Number) must be reliably\
    \ synchronized between\n   participating nodes per every outgoing Authentication\
    \ Header (AH) or\n   Encapsulating Security Payload (ESP) packet, which makes\
    \ building\n   high-speed systems problematic.  Another approach for building\
    \ load-\n   balancing systems is to make VPN end users aware of them, which\n\
    \   allows for having two or more Security Gateways sharing the same ID,\n   but\
    \ each having its own IP address.  In this case, the VPN end user\n   first establishes\
    \ an IKE SA with one of these gateways.  Then, at\n   some point of time the gateway\
    \ makes a decision to move the client to\n   a different cluster node.  This can\
    \ be done with Redirect Mechanism\n   for IKEv2 [RFC5685].  The drawback of such\
    \ an approach is that it\n   requires a new IKE SA to be established from scratch,\
    \ including full\n   authentication.  In some cases, this could be avoided by\
    \ using IKEv2\n   Session Resumption [RFC5723] with a new gateway.  However, this\n\
    \   requires the VPN end user to know beforehand which new gateway to\n   connect\
    \ to.  So, it is desirable to be able to clone the existing IKE\n   SA, move it\
    \ to a different Security Gateway, and then indicate to the\n   VPN end user to\
    \ use this new SA.  This would allow participating\n   Security Gateways to share\
    \ the load between them.\n   This document introduces the possibility of cloning\
    \ the IKE SA in the\n   Internet Key Exchange Protocol Version 2 (IKEv2).  The\
    \ main idea is\n   that the peer with multiple interfaces sets the first IKE SA\
    \ as\n   usual.  Then it takes advantage of the fact that this SA is completed\n\
    \   and derives as many new parallel IKE SAs from it as the desired\n   number\
    \ of VPNs.  On each IKE SA a VPN is negotiated by creating one\n   or more IPsec\
    \ SAs.  This results in coexisting parallel VPNs.  Then\n   the VPN end user moves\
    \ each IPsec SA to its proper location using the\n   IKEv2 Mobility and Multihoming\
    \ Protocol (MOBIKE) [RFC4555].\n   Alternatively, the VPN end user may first move\
    \ the IKE SAs and then\n   create the IPsec SAs.\n   Note that it is up to the\
    \ host's local policy to decide which\n   additional VPNs to create and when to\
    \ do it.  The process of\n   selecting address pairs for migration is a local\
    \ matter.\n   Furthermore, in the case of multiple interfaces on both ends, care\n\
    \   should be taken to avoid the VPNs being duplicated by both ends or\n   moved\
    \ to both interfaces.\n   In addition, multiple MOBIKE operations may be involved\
    \ from the\n   Security Gateway or the VPN end user.  Suppose, as depicted in\n\
    \   Figure 3 for example, that the cloned VPN is between Interface _0 and\n  \
    \ Interface_0', and the VPN end user and the Security Gateway want to\n   move\
    \ it to Interface_1 and Interface_1'.  The VPN end user may\n   initiate a MOBIKE\
    \ exchange in order to move it to Interface_1, in\n   which case the cloned VPN\
    \ is now between Interface_1 and\n   Interface_0'.  Then the Security Gateway\
    \ may also initiate a MOBIKE\n   exchange in order to move the VPN to Interface_1',\
    \ in which case the\n   VPN has reached its final destination.\n   The combination\
    \ of the IKE SA cloning with MOBIKE protocol provides\n   IPsec communications\
    \ with multiple interfaces the following\n   advantages.  First, cloning the IKE\
    \ SA requires very few\n   modifications to already existing IKEv2 implementations.\
    \  Then, it\n   takes advantage of the already existing and widely deployed MOBIKE\n\
    \   protocol.  Finally, it keeps a dedicated IKE SA for each VPN, which\n   simplifies\
    \ reachability tests and VPN maintenance.\n   Note also that the cloning of the\
    \ IKE SA is independent from MOBIKE\n   and can also address other future scenarios\
    \ not described in the\n   current document.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   This section defines terms and acronyms used in this document.\n\
    \   - VPN:  Virtual Private Network -- one or more Child (IPsec) SAs\n       \
    \  created in tunnel mode between two peers.\n   - VPN End User:  designates the\
    \ end user that initiates the VPN with\n         a Security Gateway.  This end\
    \ user may be mobile and move its\n         VPN from one Security Gateway to another.\n\
    \   - Security Gateway:  designates a point of attachment for the VPN\n      \
    \   service.  In this document, the VPN service is provided by\n         multiple\
    \ Security Gateways.  Each Security Gateway may be\n         considered as a specific\
    \ hardware.\n   - IKE SA:  IKE Security Association as defined in [RFC7296].\n"
- title: 4.  Protocol Overview
  contents:
  - "4.  Protocol Overview\n   This document specifies how to clone existing IKE SAs\
    \ without\n   performing new authentication.  In order to achieve this goal, this\n\
    \   document proposes that the two peers agree upon their ability to\n   clone\
    \ the IKE SA.  This is done during the IKE_AUTH exchange by\n   exchanging the\
    \ CLONE_IKE_SA_SUPPORTED notifications.  To create a new\n   parallel IKE SA,\
    \ one of the peers initiates a CREATE_CHILD_SA\n   exchange as if it would rekey\
    \ the existing IKE SA.  In order to\n   indicate that the current IKE SA must\
    \ not be deleted, the initiator\n   includes the CLONE_IKE_SA notification in\
    \ the CREATE_CHILD_SA\n   exchange.  This results in two parallel IKE SAs.\n \
    \  Note that without the CLONE_IKE_SA notification, the old IKE SA would\n   be\
    \ deleted after the rekey is successfully completed (as specified in\n   Section\
    \ 2.8 of [RFC7296].\n"
- title: 5.  Protocol Details
  contents:
  - '5.  Protocol Details

    '
- title: 5.1.  Support Negotiation
  contents:
  - "5.1.  Support Negotiation\n   The initiator and the responder indicate their\
    \ support for cloning\n   IKE SA by exchanging the CLONE_IKE SA_SUPPORTED notifications.\
    \  This\n   notification MUST be sent in the IKE_AUTH exchange (in case of\n \
    \  multiple IKE_AUTH exchanges -- in the first IKE_AUTH message from\n   initiator\
    \ and in the last IKE_AUTH message from responder).  If both\n   initiator and\
    \ responder send this notification during the IKE_AUTH\n   exchange, peers may\
    \ clone this IKE SA.  In the other case, the IKE SA\n   MUST NOT be cloned.\n\
    \   Initiator                         Responder\n   -------------------------------------------------------------------\n\
    \   HDR, SA, KEi, Ni -->\n                                <-- HDR, SA, KEr, Nr\n\
    \   HDR, SK {IDi, AUTH,\n        SA, TSi, TSr,\n        N(CLONE_IKE_SA_SUPPORTED)}\
    \ -->\n                                <-- HDR, SK {IDr, AUTH,\n             \
    \                            SA, TSi, TSr,\n                                 \
    \        N(CLONE_IKE_SA_SUPPORTED)}\n"
- title: 5.2.  Cloning the IKE SA
  contents:
  - "5.2.  Cloning the IKE SA\n   The initiator of the rekey exchange includes the\
    \ CLONE_IKE_SA\n   notification in a CREATE_CHILD_SA request for rekeying the\
    \ IKE SA.\n   The CLONE_IKE_SA notification indicates that the current IKE SA\
    \ will\n   not be immediately deleted once the new IKE SA is created.  Instead,\n\
    \   two parallel IKE SAs are expected to coexist.  The current IKE SA\n   becomes\
    \ the old IKE SA and the newly negotiated IKE SA becomes the\n   new IKE SA. \
    \ The CLONE_IKE_SA notification MUST appear only in the\n   request message of\
    \ the CREATE_CHILD_SA exchange concerning the IKE SA\n   rekey.  If the CLONE_IKE_SA\
    \ notification appears in any other\n   message, it MUST be ignored.\n   Initiator\
    \                         Responder\n   -------------------------------------------------------------------\n\
    \   HDR, SK {N(CLONE_IKE_SA), SA, Ni, KEi} -->\n   If the CREATE_CHILD_SA request\
    \ is concerned with an IKE SA rekey and\n   contains the CLONE_IKE_SA notification,\
    \ the responder proceeds to the\n   IKE SA rekey, creates the new IKE SA, and\
    \ keeps the old IKE SA.  No\n   additional Notify Payloads are included in the\
    \ CREATE_CHILD_SA\n   response as represented below:\n                       \
    \         <--  HDR, SK {SA, Nr, KEr}\n   When the IKE SA is cloned, peers MUST\
    \ NOT transfer existing Child SAs\n   that were created by the old IKE SA to the\
    \ newly created IKE SA.  So,\n   all signaling messages concerning those Child\
    \ SAs would continue to\n   be sent over the old IKE SA.  This is different from\
    \ the regular IKE\n   SA rekey in IKEv2.\n"
- title: 5.3.  Error Handling
  contents:
  - "5.3.  Error Handling\n   There may be conditions when the responder for some\
    \ reason is unable\n   or unwilling to clone the IKE SA.  This inability may be\
    \ temporary or\n   permanent.\n   Temporary inability occurs when the responder\
    \ doesn't have enough\n   resources at the moment to clone an IKE SA or when the\
    \ IKE SA is\n   being deleted by the responder.  In this case, the responder SHOULD\n\
    \   reject the request to clone the IKE SA with the TEMPORARY_FAILURE\n   notification.\n\
    \                               <--  HDR, SK {N(TEMPORARY_FAILURE)}\n   After\
    \ receiving this notification, the initiator MAY retry its\n   request after waiting\
    \ some period of time.  See Section 2.25 of\n   [RFC7296] for details.\n   In\
    \ some cases, the responder may have restrictions on the number of\n   coexisting\
    \ IKE SAs with one peer.  These restrictions may be either\n   implicit (some\
    \ devices may have enough resources to handle only a few\n   IKE SAs) or explicit\
    \ (provided by some configuration parameter).  If\n   the initiator wants to clone\
    \ more IKE SAs than the responder is able\n   or is configured to handle, the\
    \ responder SHOULD reject the request\n   with the NO_ADDITIONAL_SAS notification.\n\
    \                               <--  HDR, SK {N(NO_ADDITIONAL_SAS)}\n   This condition\
    \ is considered permanent and the initiator SHOULD NOT\n   retry cloning an IKE\
    \ SA until some of the existing SAs with the\n   responder are deleted.\n"
- title: 6.  Payload Description
  contents:
  - "6.  Payload Description\n   Figure 4 illustrates the Notify Payload packet format\
    \ as described in\n   Section 3.10 of [RFC7296].  This format is used for both\
    \ the\n   CLONE_IKE_SA and the CLONE_IKE_SA_SUPPORTED notifications.\n   The CLONE_IKE_SA_SUPPORTED\
    \ notification is used in an IKEv2 exchange\n   of type IKE_AUTH and the CLONE_IKE_SA\
    \ is used in an IKEv2 exchange of\n   type CREATE_CHILD_SA.\n                \
    \           1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Next Payload  |C|  RESERVED   |         Payload Length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Protocol ID  |   SPI Size    |      Notify Message Type      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 4: Notify Payload\n   The fields Next Payload,\
    \ Critical Bit, RESERVED, and Payload Length\n   are defined in [RFC7296].  Specific\
    \ fields defined in this document\n   are:\n   - Protocol ID (1 octet):  Set to\
    \ zero.\n   - Security Parameter Index (SPI) Size (1 octet):  Set to zero.\n \
    \  - Notify Message Type (2 octets):  Specifies the type of notification\n   \
    \      message.  It is set to 16432 for the CLONE_IKE_SA_SUPPORTED\n         notification\
    \ or 16433 for the CLONE_IKE_SA notification.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has allocated two values in the \"IKEv2 Notify\
    \ Message Types -\n   Status Types\" registry:\n     Value    Notify Messages\
    \ - Status Types\n   -----------------------------------------\n     16432   \
    \ CLONE_IKE_SA_SUPPORTED\n     16433    CLONE_IKE_SA\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The protocol defined in this document does not\
    \ modify IKEv2.\n   Security considerations for cloning an IKE SA are mostly the\
    \ same as\n   those for the base IKEv2 protocol described in [RFC7296].\n   Cloning\
    \ an IKE SA allows an initiator to duplicate existing SAs.  As\n   a result, it\
    \ may influence any accounting or control mechanisms based\n   on a single IKE\
    \ SA per authentication.\n   Suppose a system has a limit on the number of IKE\
    \ SAs it can handle.\n   In this case, cloning an IKE SA may provide a way for\
    \ resource\n   exhaustion, as a single end user may populate multiple IKE SAs.\n\
    \   Suppose a system shares the IPsec resources by limiting the number of\n  \
    \ Child SAs per IKE SA.  With a single IKE SA per end user, this\n   provides\
    \ an equal resource sharing.  In this case, cloning the IKE SA\n   provides the\
    \ means for an end user to overpass this limit.  Such a\n   system should evaluate\
    \ the number of Child SAs over the number of all\n   IKE SAs associated to an\
    \ end user.\n   Note that these issues are not unique to the ability of cloning\
    \ the\n   IKE SA, as multiple IKE SAs between two peers may be created without\n\
    \   involving a cloning method.  Note also that implementation can always\n  \
    \ limit the number of cloned IKE SAs.\n   Suppose the VPN or any other IPsec-based\
    \ service monitoring is based\n   on the liveliness of the first IKE SA.  Such\
    \ a system considers a\n   service is accessed or used from the time IKE performs\
    \ an\n   authentication to the time the IKE SA is deleted.  Such accounting\n\
    \   methods were fine as any IKE SA required an authentication exchange.\n   As\
    \ cloning the IKE SA skips the authentication phase, it may make it\n   possible\
    \ to delete the initial IKE SA while the service is being used\n   on the cloned\
    \ IKE SA.  Such accounting methods should consider that\n   the service is being\
    \ used from the first IKE SA establishment to\n   until the last IKE SA is removed.\n\
    \   When this solution is used to build load-balancing systems, then\n   there\
    \ is a necessity to transfer IKE SA states between nodes of a\n   load-sharing\
    \ cluster.  Since IKE SA state contains sensitive\n   information, such as session\
    \ keys, implementations must take all due\n   precautions.  Such precautions might\
    \ include using technical and/or\n   administrative means to protect IKE SA state\
    \ data.  The details of\n   what is transferred and how it is protected are out\
    \ of scope of this\n   document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4555]  Eronen, P., \"IKEv2 Mobility and Multihoming Protocol\n       \
    \       (MOBIKE)\", RFC 4555, DOI 10.17487/RFC4555, June 2006,\n             \
    \ <http://www.rfc-editor.org/info/rfc4555>.\n   [RFC7296]  Kaufman, C., Hoffman,\
    \ P., Nir, Y., Eronen, P., and T.\n              Kivinen, \"Internet Key Exchange\
    \ Protocol Version 2\n              (IKEv2)\", STD 79, RFC 7296, DOI 10.17487/RFC7296,\
    \ October\n              2014, <http://www.rfc-editor.org/info/rfc7296>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC4186]  Haverinen, H., Ed. and J. Salowey,\
    \ Ed., \"Extensible\n              Authentication Protocol Method for Global System\
    \ for\n              Mobile Communications (GSM) Subscriber Identity Modules\n\
    \              (EAP-SIM)\", RFC 4186, DOI 10.17487/RFC4186, January 2006,\n  \
    \            <http://www.rfc-editor.org/info/rfc4186>.\n   [RFC5216]  Simon, D.,\
    \ Aboba, B., and R. Hurst, \"The EAP-TLS\n              Authentication Protocol\"\
    , RFC 5216, DOI 10.17487/RFC5216,\n              March 2008, <http://www.rfc-editor.org/info/rfc5216>.\n\
    \   [RFC5685]  Devarapalli, V. and K. Weniger, \"Redirect Mechanism for\n    \
    \          the Internet Key Exchange Protocol Version 2 (IKEv2)\",\n         \
    \     RFC 5685, DOI 10.17487/RFC5685, November 2009,\n              <http://www.rfc-editor.org/info/rfc5685>.\n\
    \   [RFC5723]  Sheffer, Y. and H. Tschofenig, \"Internet Key Exchange\n      \
    \        Protocol Version 2 (IKEv2) Session Resumption\", RFC 5723,\n        \
    \      DOI 10.17487/RFC5723, January 2010,\n              <http://www.rfc-editor.org/info/rfc5723>.\n"
- title: Appendix A.  Setting a VPN on Multiple Interfaces
  contents:
  - "Appendix A.  Setting a VPN on Multiple Interfaces\n   This section is informational\
    \ and exposes how a VPN end user, as\n   illustrated in Figure 1, can build two\
    \ VPNs on its two interfaces\n   without multiple authentications.  Other cases\
    \ represented in\n   Figure 2 and Figure 3 are similar and can be easily derived\
    \ from this\n   case.  The mechanism is based on cloning the IKE SA and the MOBIKE\n\
    \   extension [RFC4555].\n"
- title: A.1.  Setting VPN_0
  contents:
  - "A.1.  Setting VPN_0\n   First, the VPN end user negotiates a VPN using one interface.\
    \  This\n   involves regular IKEv2 exchanges.  In addition, the VPN end user and\n\
    \   the Security Gateway advertise their support for MOBIKE.  At the end\n   of\
    \ the IKE_AUTH exchange, VPN_0 is set as represented in Figure 5.\n   +------------+\
    \                                +------------+\n   |            | Interface_0\
    \ : VPN_0            |            |\n   |            =================       \
    \         |            |\n   |    VPN     |               v                | \
    \ Security  |\n   |  End User  |               ==================  Gateway   |\n\
    \   |            =                                |            |\n   |       \
    \     | Interface_1                    |            |\n   +------------+     \
    \                           +------------+\n                 Figure 5: VPN End\
    \ User Establishing VPN_0\n   The exchanges are completely described in [RFC7296]\
    \ and [RFC4555].\n   First, peers negotiate IKE SA parameters and exchange nonces\
    \ and\n   public keys in the IKE_SA_INIT exchange.  In the figure below, they\n\
    \   also proceed to NAT detection because of the use of MOBIKE.\n   Initiator\
    \                         Responder\n   -------------------------------------------------------------------\n\
    \   (IP_I0:500 -> IP_R:500)\n   HDR, SA, KEi, Ni,\n        N(NAT_DETECTION_SOURCE_IP),\n\
    \        N(NAT_DETECTION_DESTINATION_IP)  -->\n                         <--  (IP_R:500\
    \ -> IP_I0:500)\n                              HDR, SA, KEr, Nr,\n           \
    \                        N(NAT_DETECTION_SOURCE_IP),\n                       \
    \            N(NAT_DETECTION_DESTINATION_IP)\n   Then the initiator and the responder\
    \ proceed to the IKE_AUTH\n   exchange, advertise their support for MOBIKE and\
    \ their ability to\n   clone the IKE SA -- with the MOBIKE_SUPPORTED and the\n\
    \   CLONE_IKE_SA_SUPPORTED notifications -- and negotiate the Child SA\n   for\
    \ VPN_0.  Optionally, the initiator and the responder can advertise\n   their\
    \ multiple interfaces using the ADDITIONAL_IP4_ADDRESS and/or\n   ADDITIONAL_IP6_ADDRESS\
    \ notifications.\n   (IP_I0:4500 -> IP_R:4500)\n   HDR, SK {IDi, AUTH,\n     \
    \   SA, TSi, TSr,\n        N(MOBIKE_SUPPORTED),\n        [N(ADDITIONAL_IP*_ADDRESS)+,]\n\
    \        N(CLONE_IKE_SA_SUPPORTED)}  -->\n                         <--  (IP_R:4500\
    \ -> IP_I0:4500)\n                              HDR, SK {IDr, AUTH,\n        \
    \                           SA, TSi, TSr,\n                                  \
    \ N(MOBIKE_SUPPORTED),\n                                   [N(ADDITIONAL_IP*_ADDRESS)+,]\n\
    \                                   N(CLONE_IKE_SA_SUPPORTED)}\n"
- title: A.2.  Creating an Additional IKE SA
  contents:
  - "A.2.  Creating an Additional IKE SA\n   In this case, the VPN end user wants\
    \ to establish an additional VPN\n   with its Interface_1.  The VPN end user will\
    \ first establish a\n   parallel IKE SA using a CREATE_CHILD_SA that concerns\
    \ an IKE SA rekey\n   associated with a CLONE_IKE_SA notification.  This results\
    \ in two\n   separate IKE SAs between the VPN end user and the Security Gateway.\n\
    \   Currently both IKE SAs are set using Interface_0 of the VPN end user.\n  \
    \ Initiator                         Responder\n   -------------------------------------------------------------------\n\
    \   (IP_I0:4500 -> IP_R:4500)\n   HDR, SK {N(CLONE_IKE_SA),\n        SA, Ni, KEi}\
    \ -->\n                         <--  (IP_R:4500 -> IP_I0:4500)\n             \
    \                 HDR, SK {SA, Nr, KEr}\n"
- title: A.3.  Creating the Child SA for VPN_1
  contents:
  - "A.3.  Creating the Child SA for VPN_1\n   Once the new IKE SA has been created,\
    \ the VPN end user can initiate a\n   CREATE_CHILD_SA exchange that concerns the\
    \ creation of a Child SA for\n   VPN_1.  The newly created VPN_1 will use Interface_0\
    \ of the VPN end\n   user.\n   It is out of scope for this document to define\
    \ how the VPN end user\n   handles traffic with multiple interfaces.  The VPN\
    \ end user can use\n   the same inner IP address on its multiple interfaces. \
    \ In this case,\n   the same Traffic Selectors (that is, the IP address used for\
    \ VPN_0\n   and VPN_1) can match for both VPNs VPN_0 and VPN_1.  The VPN end user\n\
    \   must be aware of such a match and be able to manage it.  It can, for\n   example,\
    \ use distinct Traffic Selectors on both VPNs using different\n   ports, manage\
    \ the order of its Security Policy Database (SPD), or\n   have SPD defined per\
    \ interfaces.  Defining these mechanisms is out of\n   scope for this document.\
    \  Alternatively, the VPN end user can use a\n   different inner IP address for\
    \ each interface.\n   The creation of VPN_1 is performed via the newly created\
    \ IKE SA as\n   follows:\n   Initiator                         Responder\n   -------------------------------------------------------------------\n\
    \   (IP_I0:4500 -> IP_R:4500)\n   HDR(new), SK(new) {SA, TSi, TSr}  -->\n    \
    \                     <--  (IP_R:4500 -> IP_I0:4500)\n                       \
    \       HDR(new), SK(new) {SA, TSi, TSr}\n   The resulting configuration is depicted\
    \ in Figure 6.  VPN_0 and VPN_1\n   have been created, but both are using the\
    \ same Interface:\n   Interface_0.\n   +------------+                        \
    \        +------------+\n   |            | Interface_0 : VPN_0, VPN_1     |  \
    \          |\n   |            ====================             |            |\n\
    \   |    VPN     =================  v             |  Security  |\n   |  End User\
    \  |               v  ===============  Gateway   |\n   |            |        \
    \       ==================            |\n   |            | Interface_1       \
    \             |            |\n   +------------+                              \
    \  +------------+\n            Figure 6: VPN End User Establishing VPN_0 and VPN_1\n"
- title: A.4.  Moving VPN_1 on Interface_1
  contents:
  - "A.4.  Moving VPN_1 on Interface_1\n   In this section, MOBIKE is used to move\
    \ VPN_1 on Interface_1.  The\n   exchange is described in [RFC4555].\n   (IP_I1:4500\
    \ -> IP_R:4500)\n   HDR(new), SK(new) {N(UPDATE_SA_ADDRESSES),\n             N(NAT_DETECTION_SOURCE_IP),\n\
    \             N(NAT_DETECTION_DESTINATION_IP),\n             N(COOKIE2)}  -->\n\
    \                         <--  (IP_R:4500 -> IP_I1:4500)\n                   \
    \           HDR(new), SK(new) {\n                                   N(NAT_DETECTION_SOURCE_IP),\n\
    \                                   N(NAT_DETECTION_DESTINATION_IP),\n       \
    \                            N(COOKIE2)}\n   This results in the situation as\
    \ described in Figure 7.\n   +------------+                                +------------+\n\
    \   |            | Interface_0 : VPN_0            |            |\n   |       \
    \     ==================               |            |\n   |    VPN     |     \
    \           v               |  Security  |\n   |  End User  |                =================\
    \  Gateway   |\n   |            =================^               |           \
    \ |\n   |            | Interface_1 : VPN_1            |            |\n   +------------+\
    \                                +------------+\n              Figure 7: VPN End\
    \ User with Multiple Interfaces\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The ideas for this document came from various input from\
    \ the IP\n   Security Maintenance and Extensions (ipsecme) Working Group and from\n\
    \   discussions with Tero Kivinen and Michael Richardson.  Yaron Sheffer\n   and\
    \ Tero Kivinen provided significant input to set the current design\n   of the\
    \ protocol, as well as its designation.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Daniel Migault (editor)\n   Ericsson\n   8400 boulevard\
    \ Decarie\n   Montreal, QC H4P 2N2\n   Canada\n   Email: daniel.migault@ericsson.com\n\
    \   Valery Smyslov\n   ELVIS-PLUS\n   PO Box 81\n   Moscow (Zelenograd)  124460\n\
    \   Russian Federation\n   Phone: +7 495 276 0211\n   Email: svan@elvis.ru\n"
