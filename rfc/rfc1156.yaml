- title: __initial_text__
  contents:
  - "           Management Information Base for Network Management\n             \
    \          of TCP/IP-based internets\n                           Table of Contents\n\
    \   1. Status of this Memo ...................................   1\n   2. IAB\
    \ Policy Statement ..................................   2\n   3. Introduction\
    \ ..........................................   2\n   4. Objects ...............................................\
    \   6\n   4.1 Object Groups ........................................   6\n   4.2\
    \ Format of Definitions ................................   7\n   5. Object Definitions\
    \ ....................................   8\n   5.1 The System Group .....................................\
    \   9\n   5.2 The Interfaces Group .................................  11\n   5.2.1\
    \ The Interfaces Table ...............................  11\n   5.3 The Address\
    \ Translation Group ........................  23\n   5.4 The IP Group .........................................\
    \  26\n   5.4.1 The IP Address Table ...............................  34\n   5.4.2\
    \ The IP Routing Table ...............................  36\n   5.5 The ICMP Group\
    \ .......................................  43\n   5.6 The TCP Group ........................................\
    \  53\n   5.7 The UDP Group ........................................  62\n   5.8\
    \ The EGP Group ........................................  64\n   5.8.1 The EGP\
    \ Neighbor Table .............................  65\n   6. Definitions ...........................................\
    \  68\n   7. Acknowledgements ......................................  89\n   8.\
    \ References ............................................  90\n   9. Security\
    \ Considerations................................  91\n   10. Authors' Addresses....................................\
    \  91\n"
- title: 1.  Status of this Memo
  contents:
  - "1.  Status of this Memo\n   This RFC is a re-release of RFC 1066, with a changed\
    \ \"Status of this\n   Memo\", \"IAB Policy Statement\", and \"Introduction\"\
    \ sections plus a few\n   minor typographical corrections.  The technical content\
    \ of the\n   document is unchanged from RFC 1066.\n   This memo provides the initial\
    \ version of the Management Information\n   Base (MIB) for use with network management\
    \ protocols in TCP/IP-based\n   internets in the short-term.  In particular, together\
    \ with its\n   companion memos which describe the structure of management\n  \
    \ information along with the initial network management protocol, these\n   documents\
    \ provide a simple, workable architecture and system for\n   managing TCP/IP-based\
    \ internets and in particular the Internet.\n   This memo specifies a Standard\
    \ Protocol for the Internet community.\n   TCP/IP implementations in the Internet\
    \ which are network manageable\n   are expected to adopt and implement this specification.\n\
    \   The Internet Activities Board recommends that all IP and TCP\n   implementations\
    \ be network manageable.  This implies implementation\n   of the Internet MIB\
    \ (RFC-1156) and at least one of the two\n   recommended management protocols\
    \ SNMP (RFC-1157) or CMOT (RFC-1095).\n   It should be noted that, at this time,\
    \ SNMP is a full Internet\n   standard and CMOT is a draft standard.  See also\
    \ the Host and Gateway\n   Requirements RFCs for more specific information on\
    \ the applicability\n   of this standard.\n   Please refer to the latest edition\
    \ of the \"IAB Official Protocol\n   Standards\" RFC for current information on\
    \ the state and status of\n   standard Internet protocols.\n   Distribution of\
    \ this memo is unlimited.\n"
- title: 2.  IAB Policy Statement
  contents:
  - "2.  IAB Policy Statement\n   This MIB specification is the first edition of an\
    \ evolving document\n   defining variables needed for monitoring and control of\
    \ various\n   components of the Internet.  Not all groups of defined variables\
    \ are\n   mandatory for all Internet components.\n   For example, the EGP group\
    \ is mandatory for gateways using EGP but\n   not for hosts which should not be\
    \ running EGP.  Similarly, the TCP\n   group is mandatory for hosts running TCP\
    \ but not for gateways which\n   aren't running it.  What IS mandatory, however,\
    \ is that all variables\n   of a group be supported if any element of the group\
    \ is supported.\n   It is expected that additional MIB groups and variables will\
    \ be\n   defined over time to accommodate the monitoring and control needs of\n\
    \   new or changing components of the Internet.  The responsible working\n   group(s)\
    \ will continue to refine this specification.\n"
- title: 3.  Introduction
  contents:
  - "3.  Introduction\n   As reported in RFC 1052, IAB Recommendations for the Development\
    \ of\n   Internet Network Management Standards [1], the Internet Activities\n\
    \   Board has directed the Internet Engineering Task Force (IETF) to\n   create\
    \ two new working groups in the area of network management.  One\n   group was\
    \ charged with the further specification and definition of\n   elements to be\
    \ included in the Management Information Base.  The\n   other was charged with\
    \ defining the modifications to the Simple\n   Network Management Protocol (SNMP)\
    \ to accommodate the short-term\n   needs of the network vendor and operator communities.\
    \  In the long-\n   term, the use of the OSI network management framework was\
    \ to be\n   examined using the ISO CMIS/CMIP [2,3] framework as a basis.  Two\n\
    \   documents were produced to define the management information:  RFC\n   1065,\
    \ which defined the Structure of Management Information (SMI)\n   [4], and RFC\
    \ 1066, which defined the Management Information Base\n   (MIB) [5].  Both of\
    \ these documents were designed so as to be\n   compatible with both the SNMP\
    \ and the OSI network management\n   framework.\n   This strategy was quite successful\
    \ in the short-term: Internet-based\n   network management technology was fielded,\
    \ by both the research and\n   commercial communities, within a few months.  As\
    \ a result of this,\n   portions of the Internet community became network manageable\
    \ in a\n   timely fashion.\n   As reported in RFC 1109, Report of the Second Ad\
    \ Hoc Network\n   Management Review Group [6], the requirements of the SNMP and\
    \ the OSI\n   network management frameworks were more different than anticipated.\n\
    \   As such, the requirement for compatibility between the SMI/MIB and\n   both\
    \ frameworks was suspended.\n   The IAB has designated the SNMP, SMI, and the\
    \ initial Internet MIB to\n   be full \"Standard Protocols\" with \"Recommended\"\
    \ status.  By this\n   action, the IAB recommends that all IP and TCP implementations\
    \ be\n   network manageable and that the implementations that are network\n  \
    \ manageable are expected to adopt and implement the SMI, MIB, and\n   SNMP.\n\
    \   As such, the current network management framework for TCP/IP- based\n   internets\
    \ consists of:  Structure and Identification of Management\n   Information for\
    \ TCP/IP-based Internets, which describes how managed\n   objects contained in\
    \ the MIB are defined as set forth in RFC 1155\n   [7]; Management Information\
    \ Base for Network Management of TCP/IP-\n   based Internets, which describes\
    \ the managed objects contained in the\n   MIB as set forth in this memo; and,\
    \ the Simple Network Management\n   Protocol, which defines the protocol used\
    \ to manage these objects, as\n   set forth in RFC 1157 [8].\n   The IAB also\
    \ urged the working groups to be \"extremely sensitive to\n   the need to keep\
    \ SNMP simple,\" and recommends that the MIB working\n   group take as its starting\
    \ inputs the MIB definitions found in the\n   High-Level Entity Management Systems\
    \ (HEMS) RFC 1024 [9], the initial\n   SNMP specification [10], and the CMIS/CMIP\
    \ memos [11,12].\n   Thus, the list of managed objects defined here, has been\
    \ derived by\n   taking only those elements which are considered essential.  Since\n\
    \   such elements are essential, there is no need to allow the\n   implementation\
    \ of individual objects, to be optional.  Rather, all\n   compliant implementations\
    \ will contain all applicable (see below)\n   objects defined in this memo.\n\
    \   This approach of taking only the essential objects is NOT\n   restrictive,\
    \ since the SMI defined in the companion memo provides\n   three extensibility\
    \ mechanisms:  one, the addition of new standard\n   objects through the definitions\
    \ of new versions of the MIB; two, the\n   addition of widely-available but non-standard\
    \ objects through the\n   multilateral subtree; and three, the addition of private\
    \ objects\n   through the enterprises subtree. Such additional objects can not\
    \ only\n   be used for vendor-specific elements, but also for experimentation\
    \ as\n   required to further the knowledge of which other objects are\n   essential.\n\
    \   The primary criterion for being considered essential was for an\n   object\
    \ to be contained in all of the above referenced MIB\n   definitions.  A few other\
    \ objects have been included, but only if the\n   MIB working group believed they\
    \ are truly essential.  The detailed\n   list of criteria against which potential\
    \ inclusions in this (initial)\n   MIB were considered, was:\n      1) An object\
    \ needed to be essential for either fault or\n         configuration management.\n\
    \      2) Only weak control objects were permitted (by weak, it\n         is meant\
    \ that tampering with them can do only limited\n         damage).  This criterion\
    \ reflects the fact that the\n         current management protocols are not sufficiently\
    \ secure\n         to do more powerful control operations.\n      3) Evidence\
    \ of current use and utility was required.\n      4) An attempt was made to limit\
    \ the number of objects to\n         about 100 to make it easier for vendors to\
    \ fully\n         instrument their software.\n      5) To avoid redundant variables,\
    \ it was required that no\n         object be included that can be derived from\
    \ others in the\n         MIB.\n      6) Implementation specific objects (e.g.,\
    \ for BSD UNIX)\n         were excluded.\n      7) It was agreed to avoid heavily\
    \ instrumenting critical\n         sections of code.  The general guideline was\
    \ one counter\n         per critical section per layer.\n"
- title: 4.  Objects
  contents:
  - "4.  Objects\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB.  Objects in the MIB are\n\
    \   defined using Abstract Syntax Notation One (ASN.1) [13].\n   The mechanisms\
    \ used for describing these objects are specified in the\n   companion memo. \
    \ In particular, each object has a name, a syntax, and\n   an encoding.  The name\
    \ is an object identifier, an administratively\n   assigned name, which specifies\
    \ an object type.  The object type\n   together with an object instance serves\
    \ to uniquely identify a\n   specific instantiation of the object.  For human\
    \ convenience, we\n   often use a textual string, termed the OBJECT DESCRIPTOR,\
    \ to also\n   refer to the object type.\n   The syntax of an object type defines\
    \ the abstract data structure\n   corresponding to that object type.  The ASN.1\
    \ language is used for\n   this purpose.  However, the companion memo purposely\
    \ restricts the\n   ASN.1 constructs which may be used.  These restrictions are\n\
    \   explicitly made for simplicity.\n   The encoding of an object type is simply\
    \ how that object type is\n   represented using the object type's syntax.  Implicitly\
    \ tied to the\n   notion of an object type's syntax and encoding is how the object\
    \ type\n   is represented when being transmitted on the network.  This memo\n\
    \   specifies the use of the basic encoding rules of ASN.1 [14].\n"
- title: 4.1.  Object Groups
  contents:
  - "4.1.  Object Groups\n   Since this list of managed objects contains only the\
    \ essential\n   elements, there is no need to allow individual objects to be\n\
    \   optional.  Rather, the objects are arranged into the following\n   groups:\n\
    \                  - System\n                  - Interfaces\n                \
    \  - Address Translation\n                  - IP\n                  - ICMP\n \
    \                 - TCP\n                  - UDP\n                  - EGP\n  \
    \ There are two reasons for defining these groups:  one, to provide a\n   means\
    \ of assigning object identifiers; two, to provide a method for\n   implementations\
    \ of managed agents to know which objects they must\n   implement.  This method\
    \ is as follows: if the semantics of a group is\n   applicable to an implementation,\
    \ then it must implement all objects\n   in that group.  For example, an implementation\
    \ must implement the EGP\n   group if and only if it implements the EGP protocol.\n"
- title: 4.2.  Format of Definitions
  contents:
  - "4.2.  Format of Definitions\n   The next section contains the specification of\
    \ all object types\n   contained in the MIB. Following the conventions of the\
    \ companion\n   memo, the object types are defined using the following fields:\n\
    \          OBJECT:\n          -------\n               A textual name, termed the\
    \ OBJECT DESCRIPTOR, for the\n               object type, along with its corresponding\
    \ OBJECT\n               IDENTIFIER.\n          Syntax:\n               The abstract\
    \ syntax for the object type, presented using\n               ASN.1.  This must\
    \ resolve to an instance of the ASN.1\n               type ObjectSyntax defined\
    \ in the SMI.\n          Definition:\n               A textual description of\
    \ the semantics of the object\n               type.  Implementations should ensure\
    \ that their\n               interpretation of the object type fulfills this\n\
    \               definition since this MIB is intended for use in multi-\n    \
    \           vendor environments.  As such it is vital that object\n          \
    \     types have consistent meaning across all machines.\n          Access:\n\
    \               One of read-only, read-write, write-only, or\n               not-accessible.\n\
    \          Status:\n              One of mandatory, optional, or obsolete.\n"
- title: 5.  Object Definitions
  contents:
  - "5.  Object Definitions\n               RFC1156-MIB\n               DEFINITIONS\
    \ ::= BEGIN\n               IMPORTS\n                       mgmt, OBJECT-TYPE,\
    \ NetworkAddress, IpAddress,\n                       Counter, Gauge, TimeTicks\n\
    \                           FROM RFC1155-SMI;\n               mib        OBJECT\
    \ IDENTIFIER ::= { mgmt 1 }\n               system     OBJECT IDENTIFIER ::= {\
    \ mib 1 }\n               interfaces OBJECT IDENTIFIER ::= { mib 2 }\n       \
    \        at         OBJECT IDENTIFIER ::= { mib 3 }\n               ip       \
    \  OBJECT IDENTIFIER ::= { mib 4 }\n               icmp       OBJECT IDENTIFIER\
    \ ::= { mib 5 }\n               tcp        OBJECT IDENTIFIER ::= { mib 6 }\n \
    \              udp        OBJECT IDENTIFIER ::= { mib 7 }\n               egp\
    \        OBJECT IDENTIFIER ::= { mib 8 }\n               END\n"
- title: 5.1.  The System Group
  contents:
  - "5.1.  The System Group\n          Implementation of the System group is mandatory\
    \ for all\n          systems.\n          OBJECT:\n          -------\n        \
    \       sysDescr { system 1 }\n          Syntax:\n               OCTET STRING\n\
    \          Definition:\n               A textual description of the entity.  This\
    \ value should\n               include the full name and version identification\
    \ of the\n               system's hardware type, software operating-system, and\n\
    \               networking software.  It is mandatory that this only\n       \
    \        contain printable ASCII characters.\n          Access:\n            \
    \   read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               sysObjectID { system 2 }\n          Syntax:\n\
    \               OBJECT IDENTIFIER\n          Definition:\n               The vendor's\
    \ authoritative identification of the network\n               management subsystem\
    \ contained in the entity.  This value\n               is allocated within the\
    \ SMI enterprises subtree\n               (1.3.6.1.4.1) and provides an easy and\
    \ unambiguous means\n               for determining \"what kind of box\" is being\
    \ managed.  For\n               example, if vendor \"Flintstones, Inc.\" was assigned\
    \ the\n               subtree 1.3.6.1.4.1.42, it could assign the identifier\n\
    \               1.3.6.1.4.1.42.1.1 to its \"Fred Router\".\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               sysUpTime { system 3 }\n  \
    \        Syntax:\n               TimeTicks\n          Definition:\n          \
    \     The time (in hundredths of a second) since the network\n               management\
    \ portion of the system was last re-initialized.\n          Access:\n        \
    \       read-only.\n          Status:\n               mandatory.\n"
- title: 5.2.  The Interfaces Group
  contents:
  - "5.2.  The Interfaces Group\n          Implementation of the Interfaces group\
    \ is mandatory for all\n          systems.\n          OBJECT:\n          -------\n\
    \               ifNumber { interfaces 1 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               The number of network interfaces (regardless\
    \ of their\n               current state) on which this system can send/receive\
    \ IP\n               datagrams.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n"
- title: 5.2.1.  The Interfaces Table
  contents:
  - "5.2.1.  The Interfaces Table\n          OBJECT:\n          -------\n        \
    \       ifTable { interfaces 2 }\n          Syntax:\n               SEQUENCE OF\
    \ IfEntry\n          Definition:\n               A list of interface entries.\
    \  The number of entries is\n               given by the value of ifNumber.\n\
    \          Access:\n               read-write.\n          Status:\n          \
    \     mandatory.\n          OBJECT:\n          -------\n               ifEntry\
    \ { ifTable 1 }\n          Syntax:\n               IfEntry ::= SEQUENCE {\n  \
    \                  ifIndex\n                        INTEGER,\n               \
    \     ifDescr\n                        OCTET STRING,\n                    ifType\n\
    \                        INTEGER,\n                    ifMtu\n               \
    \         INTEGER,\n                    ifSpeed\n                        Gauge,\n\
    \                    ifPhysAddress\n                        OCTET STRING,\n  \
    \                  ifAdminStatus\n                        INTEGER,\n         \
    \           ifOperStatus\n                        INTEGER,\n                 \
    \   ifLastChange\n                        TimeTicks,\n                    ifInOctets\n\
    \                        Counter,\n                    ifInUcastPkts\n       \
    \                 Counter,\n                    ifInNUcastPkts\n             \
    \           Counter,\n                    ifInDiscards\n                     \
    \   Counter,\n                    ifInErrors\n                        Counter,\n\
    \                    ifInUnknownProtos\n                        Counter,\n   \
    \                 ifOutOctets\n                        Counter,\n            \
    \        ifOutUcastPkts\n                        Counter,\n                  \
    \  ifOutNUcastPkts\n                        Counter,\n                    ifOutDiscards\n\
    \                        Counter,\n                    ifOutErrors\n         \
    \               Counter,\n                    ifOutQLen\n                    \
    \    Gauge\n               }\n          Definition:\n               An interface\
    \ entry containing objects at the subnetwork\n               layer and below for\
    \ a particular interface.\n          Access:\n               read-write.\n   \
    \       Status:\n               mandatory.\n          We now consider the individual\
    \ components of each interface\n          entry:\n          OBJECT:\n        \
    \  -------\n               ifIndex { ifEntry 1 }\n          Syntax:\n        \
    \       INTEGER\n          Definition:\n               A unique value for each\
    \ interface.  Its value ranges\n               between 1 and the value of ifNumber.\
    \  The value for each\n               interface must remain constant at least\
    \ from one re-\n               initialization of the entity's network management\
    \ system\n               to the next re-initialization.\n          Access:\n \
    \              read-only.\n          Status:\n               mandatory.\n    \
    \      OBJECT:\n          -------\n               ifDescr { ifEntry 2 }\n    \
    \      Syntax:\n               OCTET STRING\n          Definition:\n         \
    \      A text string containing information about the interface.\n           \
    \    This string should include the name of the manufacturer,\n              \
    \ the product name and the version of the hardware\n               interface.\
    \  The string is intended for presentation to a\n               human; it must\
    \ not contain anything but printable ASCII\n               characters.\n     \
    \     Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ifType { ifEntry 3 }\n \
    \         Syntax:\n               INTEGER {\n                    other(1),   \
    \       -- none of the following\n                    regular1822(2),\n      \
    \              hdh1822(3),\n                    ddn-x25(4),\n                \
    \    rfc877-x25(5),\n                    ethernet-csmacd(6),\n               \
    \     iso88023-csmacd(7),\n                    iso88024-tokenBus(8),\n       \
    \             iso88025-tokenRing(9),\n                    iso88026-man(10),\n\
    \                    starLan(11),\n                    proteon-10MBit(12),\n \
    \                   proteon-80MBit(13),\n                    hyperchannel(14),\n\
    \                    fddi(15),\n                    lapb(16),\n              \
    \      sdlc(17),\n                    t1-carrier(18),\n                    cept(19),\
    \          -- european equivalent of T-1\n                    basicIsdn(20),\n\
    \                    primaryIsdn(21),\n                                      \
    \  -- proprietary serial\n                    propPointToPointSerial(22)\n   \
    \            }\n          Definition:\n               The type of interface, distinguished\
    \ according to the\n               physical/link/network protocol(s) immediately\
    \ \"below\" IP\n               in the protocol stack.\n          Access:\n   \
    \            read-only.\n          Status:\n               mandatory.\n      \
    \    OBJECT:\n          -------\n               ifMtu { ifEntry 4 }\n        \
    \  Syntax:\n               INTEGER\n          Definition:\n               The\
    \ size of the largest IP datagram which can be\n               sent/received on\
    \ the interface, specified in octets.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifSpeed { ifEntry 5 }\n          Syntax:\n               Gauge\n\
    \          Definition:\n               An estimate of the interface's current\
    \ bandwidth in bits\n               per second.  For interfaces which do not vary\
    \ in\n               bandwidth or for those where no accurate estimation can\n\
    \               be made, this object should contain the nominal\n            \
    \   bandwidth.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ifPhysAddress { ifEntry 6 }\n          Syntax:\n               OCTET STRING\n\
    \          Definition:\n               The interface's address at the protocol\
    \ layer immediately\n               \"below\" IP in the protocol stack.  For interfaces\
    \ which\n               do not have such an address (e.g., a serial line), this\n\
    \               object should contain an octet string of zero length.\n      \
    \    Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ifAdminStatus { ifEntry\
    \ 7 }\n          Syntax:\n               INTEGER {\n                    up(1),\
    \       -- ready to pass packets\n                    down(2),\n             \
    \       testing(3)   -- in some test mode\n                  }\n           Definition:\n\
    \               The desired state of the interface.  The testing(3) state\n  \
    \             indicates that no operational packets can be passed.\n         \
    \  Access:\n               read-write.\n           Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ifOperStatus { ifEntry 8\
    \ }\n          Syntax:\n               INTEGER {\n                    up(1), \
    \      -- ready to pass packets\n                    down(2),\n              \
    \      testing(3)   -- in some test mode\n               }\n          Definition:\n\
    \               The current operational state of the interface.  The\n       \
    \        testing(3) state indicates that no operational packets\n            \
    \   can be passed.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ifLastChange { ifEntry 9 }\n          Syntax:\n               TimeTicks\n\
    \          Definition:\n               The value of sysUpTime at the time the\
    \ interface entered\n               its current operational state.  If the current\
    \ state was\n               entered prior to the last re-initialization of the\
    \ local\n               network management subsystem, then this object contains\
    \ a\n               zero value.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifInOctets { ifEntry 10 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of octets received on\
    \ the interface,\n               including framing characters.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ifInUcastPkts  { ifEntry 11\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of (subnet) unicast packets delivered to a\n            \
    \   higher-layer protocol.\n          Access:\n               read-only.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifInNUcastPkts { ifEntry 12 }\n          Syntax:\n           \
    \    Counter\n          Definition:\n               The number of non-unicast\
    \ (i.e., subnet broadcast or\n               subnet multicast) packets delivered\
    \ to a higher-layer\n               protocol.\n          Access:\n           \
    \    read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifInDiscards { ifEntry 13 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The number of inbound\
    \ packets which were chosen to be\n               discarded even though no errors\
    \ had been detected to\n               prevent their being deliverable to a higher-layer\n\
    \               protocol.  One possible reason for discarding such a\n       \
    \        packet could be to free up buffer space.\n          Access:\n       \
    \        read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifInErrors { ifEntry 14 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The number of inbound\
    \ packets that contained errors\n               preventing them from being deliverable\
    \ to a higher-layer\n               protocol.\n          Access:\n           \
    \    read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifInUnknownProtos { ifEntry 15 }\n        \
    \  Syntax:\n               Counter\n          Definition:\n               The\
    \ number of packets received via the interface which\n               were discarded\
    \ because of an unknown or unsupported\n               protocol.\n          Access:\n\
    \               read-only.\n          Status:\n              mandatory.\n    \
    \      OBJECT:\n          -------\n               ifOutOctets { ifEntry 16 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The total number of octets transmitted out of the\n               interface,\
    \ including framing characters.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOutUcastPkts { ifEntry 17 }\n           Syntax:\n          \
    \     Counter\n          Definition:\n               The total number of packets\
    \ that higher-level protocols\n               requested be transmitted to a subnet-unicast\
    \ address,\n               including those that were discarded or not sent.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n              ifOutNUcastPkts\
    \ { ifEntry 18 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of packets that higher-level protocols\n    \
    \           requested be transmitted to a non-unicast (i.e., a subnet\n      \
    \         broadcast or subnet multicast) address, including those\n          \
    \     that were discarded or not sent.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOutDiscards { ifEntry 19 }\n          Syntax:\n            \
    \   Counter\n          Definition:\n               The number of outbound packets\
    \ which were chosen to be\n               discarded even though no errors had\
    \ been detected to\n               prevent their being transmitted.  One possible\
    \ reason for\n               discarding such a packet could be to free up buffer\n\
    \               space.\n          Access:\n               read-only.\n       \
    \   Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOutErrors { ifEntry 20 }\n          Syntax:\n              \
    \ Counter\n          Definition:\n               The number of outbound packets\
    \ that could not be\n               transmitted because of errors.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ifOutQLen { ifEntry 21 }\n\
    \          Syntax:\n               Gauge\n          Definition:\n            \
    \   The length of the output packet queue (in packets).\n          Access:\n \
    \              read-only.\n          Status:\n               mandatory.\n"
- title: 5.3.  The Address Translation Group
  contents:
  - "5.3.  The Address Translation Group\n   Implementation of the Address Translation\
    \ group is mandatory\n   for all systems.\n   The Address Translation group contains\
    \ one table which is the\n   union across all interfaces of the translation tables\
    \ for\n   converting a NetworkAddress (e.g., an IP address) into a\n   subnetwork-specific\
    \ address.  For lack of a better term, this\n   document refers to such a subnetwork-specific\
    \ address as a\n   \"physical\" address.\n   Examples of such translation tables\
    \ are:  for broadcast media\n   where ARP is in use, the translation table is\
    \ equivalent to\n   the ARP cache; or, on an X.25 network where non-algorithmic\n\
    \   translation to X.121 addresses is required, the translation\n   table contains\
    \ the NetworkAddress to X.121 address\n   equivalences.\n          OBJECT:\n \
    \         -------\n               atTable { at 1 }\n          Syntax:\n      \
    \         SEQUENCE OF AtEntry\n          Definition:\n               The Address\
    \ Translation tables contain the NetworkAddress\n               to \"physical\"\
    \ address equivalences.  Some interfaces do\n               not use translation\
    \ tables for determining address\n               equivalences (e.g., DDN-X.25\
    \ has an algorithmic method);\n               if all interfaces are of this type,\
    \ then the Address\n               Translation table is empty, i.e., has zero\
    \ entries.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    atEntry { atTable 1 }\n          Syntax:\n               AtEntry ::= SEQUENCE\
    \ {\n                    atIfIndex\n                        INTEGER,\n       \
    \             atPhysAddress\n                        OCTET STRING,\n         \
    \           atNetAddress\n                        NetworkAddress\n           \
    \    }\n          Definition:\n               Each entry contains one NetworkAddress\
    \ to \"physical\"\n               address equivalence.\n          Access:\n  \
    \             read-write.\n          Status:\n               mandatory.\n    \
    \      We now consider the individual components of each Address\n          Translation\
    \ table entry:\n          OBJECT:\n          -------\n               atIfIndex\
    \ { atEntry 1 }\n          Syntax:\n               INTEGER\n          Definition:\n\
    \               The interface on which this entry's equivalence is\n         \
    \      effective.  The interface identified by a particular\n               value\
    \ of this index is the same interface as identified\n                by the same\
    \ value of ifIndex.\n          Access:\n               read-write.\n         \
    \ Status:\n               mandatory.\n          OBJECT:\n          -------\n \
    \              atPhysAddress { atEntry 2 }\n          Syntax:\n              \
    \ OCTET STRING\n          Definition:\n               The media-dependent \"physical\"\
    \ address.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    atNetAddress { atEntry 3 }\n          Syntax:\n               NetworkAddress\n\
    \          Definition:\n               The NetworkAddress (e.g., the IP address)\
    \ corresponding to\n               the media-dependent \"physical\" address.\n\
    \          Access:\n               read-write.\n          Status:\n          \
    \     mandatory.\n"
- title: 5.4.  The IP Group
  contents:
  - "5.4.  The IP Group\n   Implementation of the IP group is mandatory for all systems.\n\
    \          OBJECT:\n          -------\n               ipForwarding { ip 1 }\n\
    \          Syntax:\n               INTEGER {\n                    gateway(1),\
    \   -- entity forwards datagrams\n                    host(2)       -- entity\
    \ does NOT forward datagrams\n               }\n          Definition:\n      \
    \         The indication of whether this entity is acting as an IP\n         \
    \      gateway in respect to the forwarding of datagrams\n               received\
    \ by, but not addressed to, this entity.  IP\n               gateways forward\
    \ datagrams; Hosts do not (except those\n               Source-Routed via the\
    \ host).\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n          OBJECT:\n          -------\n             \
    \  ipDefaultTTL { ip 2 }\n          Syntax:\n               INTEGER\n        \
    \  Definition:\n               The default value inserted into the Time-To-Live\
    \ field of\n               the IP header of datagrams originated at this entity,\n\
    \               whenever a TTL value is not supplied by the transport\n      \
    \         layer protocol.\n          Access:\n               read-write.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipInReceives { ip 3 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of input datagrams received\
    \ from\n               interfaces, including those received in error.\n      \
    \    Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ipInHdrErrors { ip 4 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The number of input datagrams discarded due to errors in\n             \
    \  their IP headers, including bad checksums, version number\n               mismatch,\
    \ other format errors, time-to-live exceeded,\n               errors discovered\
    \ in processing their IP options, etc.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipInAddrErrors { ip 5 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of input datagrams discarded\
    \ because the IP\n               address in their IP header's destination field\
    \ was not a\n               valid address to be received at this entity.  This\
    \ count\n               includes invalid addresses (e.g., 0.0.0.0) and addresses\n\
    \               of unsupported Classes (e.g., Class E).  For entities\n      \
    \         which are not IP Gateways and therefore do not forward\n           \
    \    datagrams, this counter includes datagrams discarded\n               because\
    \ the destination address was not a local address.\n          Access:\n      \
    \         read-only.\n          Status:\n               mandatory.\n         \
    \ OBJECT:\n          -------\n               ipForwDatagrams { ip 6 }\n      \
    \    Syntax:\n               Counter\n          Definition:\n               The\
    \ number of input datagrams for which this entity was\n               not their\
    \ final IP destination, as a result of which an\n               attempt was made\
    \ to find a route to forward them to that\n               final destination. \
    \ In entities which do not act as IP\n               Gateways, this counter will\
    \ include only those packets\n               which were Source-Routed via this\
    \ entity, and the\n               Source-Route option processing was successful.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ipInUnknownProtos\
    \ { ip 7 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of locally-addressed datagrams received\n         \
    \      successfully but discarded because of an unknown or\n               unsupported\
    \ protocol.\n           Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipInDiscards { ip 8 }\n          Syntax:\n               Counter\n      \
    \    Definition:\n               The number of input IP datagrams for which no\
    \ problems\n               were encountered to prevent their continued processing,\n\
    \               but which were discarded (e.g. for lack of buffer space).\n  \
    \             Note that this counter does not include any datagrams\n        \
    \       discarded while awaiting re-assembly.\n          Access:\n           \
    \    read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ipInDelivers { ip 9 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The total number\
    \ of input datagrams successfully\n               delivered to IP user-protocols\
    \ (including ICMP).\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipOutRequests { ip 10 }\n          Syntax:\n               Counter\n    \
    \      Definition:\n               The total number of IP datagrams which local\
    \ IP user-\n               protocols (including ICMP) supplied to IP in requests\
    \ for\n               transmission.  Note that this counter does not include\n\
    \               any datagrams counted in ipForwDatagrams.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipOutDiscards { ip 11 }\n \
    \         Syntax:\n               Counter\n          Definition:\n           \
    \    The number of output IP datagrams for which no problem\n               was\
    \ encountered to prevent their transmission to their\n               destination,\
    \ but which were discarded (e.g., for lack of\n               buffer space). \
    \ Note that this counter would include\n               datagrams counted in ipForwDatagrams\
    \ if any such packets\n               met this (discretionary) discard criterion.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ipOutNoRoutes\
    \ { ip 12 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of IP datagrams discarded because no route\n      \
    \         could be found to transmit them to their destination.\n            \
    \   Note that this counter includes any packets counted in\n               ipForwDatagrams\
    \ which meet this \"no-route\" criterion.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipReasmTimeout { ip 13 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               The maximum number of seconds which received\
    \ fragments\n               are held while they are awaiting reassembly at this\n\
    \               entity.\n          Access:\n               read-only.\n      \
    \    Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipReasmReqds { ip 14 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of IP fragments received which\
    \ needed to be\n               reassembled at this entity.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipReasmOKs { ip 15 }\n    \
    \      Syntax:\n               Counter\n          Definition:\n              \
    \ The number of IP datagrams successfully re-assembled.\n          Access:\n \
    \              read-only.\n          Status:\n               mandatory.\n    \
    \      OBJECT:\n          -------\n               ipReasmFails { ip 16 }\n   \
    \       Syntax:\n               Counter\n          Definition:\n             \
    \  The number of failures detected by the IP re-assembly\n               algorithm\
    \ (for whatever reason:  timed out, errors, etc).\n               Note that this\
    \ is not necessarily a count of discarded IP\n               fragments since some\
    \ algorithms (notably RFC 815's) can\n               lose track of the number\
    \ of fragments by combining them\n               as they are received.\n     \
    \     Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ipFragOKs { ip 17 }\n  \
    \        Syntax:\n              Counter\n          Definition:\n             \
    \  The number of IP datagrams that have been successfully\n               fragmented\
    \ at this entity.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipFragFails { ip 18 }\n          Syntax:\n               Counter\n      \
    \    Definition:\n               The number of IP datagrams that have been discarded\n\
    \               because they needed to be fragmented at this entity but\n    \
    \           could not be, e.g., because their \"Don't Fragment\" flag\n      \
    \         was set.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipFragCreates { ip 19 }\n          Syntax:\n               Counter\n    \
    \      Definition:\n               The number of IP datagram fragments that have\
    \ been\n               generated as a result of fragmentation at this entity.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n"
- title: 5.4.1.  The IP Address Table
  contents:
  - "5.4.1.  The IP Address Table\n   The Ip Address table contains this entity's\
    \ IP addressing\n   information.\n          OBJECT:\n          -------\n     \
    \          ipAddrTable { ip 20 }\n          Syntax:\n               SEQUENCE OF\
    \ IpAddrEntry\n          Definition:\n               The table of addressing information\
    \ relevant to this\n               entity's IP addresses.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipAddrEntry { ipAddrTable 1\
    \ }\n          Syntax:\n               IpAddrEntry ::= SEQUENCE {\n          \
    \          ipAdEntAddr\n                        IpAddress,\n                 \
    \   ipAdEntIfIndex\n                        INTEGER,\n                    ipAdEntNetMask\n\
    \                        IpAddress,\n                    ipAdEntBcastAddr\n  \
    \                      INTEGER\n               }\n          Definition:\n    \
    \           The addressing information for one of this entity's IP\n         \
    \      addresses.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipAdEntAddr  { ipAddrEntry 1 }\n          Syntax:\n               IpAddress\n\
    \          Definition:\n               The IP address to which this entry's addressing\n\
    \               information pertains.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipAdEntIfIndex  { ipAddrEntry 2 }\n          Syntax:\n       \
    \        INTEGER\n          Definition:\n               The index value which\
    \ uniquely identifies the interface\n               to which this entry is applicable.\
    \  The interface\n               identified by a particular value of this index\
    \ is the\n                same interface as identified by the same value of\n\
    \                ifIndex.\n          Access:\n               read-only.\n    \
    \      Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipAdEntNetMask  { ipAddrEntry 3 }\n          Syntax:\n       \
    \        IpAddress\n          Definition:\n               The subnet mask associated\
    \ with the IP address of this\n               entry.  The value of the mask is\
    \ an IP address with all\n               the network bits set to 1 and all the\
    \ hosts bits set to\n               0.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipAdEntBcastAddr { ipAddrEntry 4 }\n          Syntax:\n      \
    \         INTEGER\n          Definition:\n               The value of the least-significant\
    \ bit in the IP\n               broadcast address used for sending datagrams on\
    \ the\n               (logical) interface associated with the IP address of\n\
    \               this entry.  For example, when the Internet standard\n       \
    \        all-ones broadcast address is used, the value will be 1.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n"
- title: 5.4.2.  The IP Routing Table
  contents:
  - "5.4.2.  The IP Routing Table\n   The IP Routing Table contains an entry for each\
    \ route\n   presently known to this entity.  Note that the action to be\n   taken\
    \ in response to a request to read a non-existent entry,\n   is specific to the\
    \ network management protocol being used.\n          OBJECT:\n          -------\n\
    \               ipRoutingTable { ip 21 }\n          Syntax:\n               SEQUENCE\
    \ OF IpRouteEntry\n          Definition:\n               This entity's IP Routing\
    \ table.\n          Access:\n               read-write.\n          Status:\n \
    \              mandatory.\n          OBJECT:\n          -------\n            \
    \   ipRouteEntry { ipRoutingTable 1 }\n          Syntax:\n               IpRouteEntry\
    \ ::= SEQUENCE {\n                    ipRouteDest\n                        IpAddress,\n\
    \                    ipRouteIfIndex\n                        INTEGER,\n      \
    \              ipRouteMetric1\n                        INTEGER,\n            \
    \        ipRouteMetric2\n                        INTEGER,\n                  \
    \  ipRouteMetric3\n                        INTEGER,\n                    ipRouteMetric4\n\
    \                        INTEGER,\n                    ipRouteNextHop\n      \
    \                  IpAddress,\n                    ipRouteType\n             \
    \           INTEGER,\n                    ipRouteProto\n                     \
    \   INTEGER,\n                    ipRouteAge\n                        INTEGER\n\
    \               }\n          Definition:\n               A route to a particular\
    \ destination.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n          We now consider the individual components\
    \ of each route in the\n          IP Routing Table:\n          OBJECT:\n     \
    \     -------\n               ipRouteDest { ipRouteEntry 1 }\n          Syntax:\n\
    \               IpAddress\n          Definition:\n               The destination\
    \ IP address of this route.  An entry with\n               a value of 0.0.0.0\
    \ is considered a default route.\n               Multiple such default routes\
    \ can appear in the table, but\n               access to such multiple entries\
    \ is dependent on the\n               table-access mechanisms defined by the network\
    \ management\n               protocol in use.\n          Access:\n           \
    \    read-write.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ipRouteIfIndex  { ipRouteEntry 2 }\n      \
    \    Syntax:\n               INTEGER\n          Definition:\n               The\
    \ index value which uniquely identifies the local\n               interface through\
    \ which the next hop of this route should\n               be reached.  The interface\
    \ identified by a particular\n               value of this index is the same interface\
    \ as identified\n               by the same value of ifIndex.\n          Access:\n\
    \               read-write.\n          Status:\n               mandatory.\n  \
    \        OBJECT:\n          -------\n               ipRouteMetric1 { ipRouteEntry\
    \ 3 }\n          Syntax:\n               INTEGER\n          Definition:\n    \
    \           The primary routing metric for this route.  The semantics\n      \
    \         of this metric are determined by the routing-protocol\n            \
    \   specified in the route's ipRouteProto value.  If this\n               metric\
    \ is not used, its value should be set to -1.\n          Access:\n           \
    \    read-write.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ipRouteMetric2 { ipRouteEntry 4 }\n       \
    \   Syntax:\n               INTEGER\n          Definition:\n               An\
    \ alternate routing metric for this route.  The\n               semantics of this\
    \ metric are determined by the routing-\n               protocol specified in\
    \ the route's ipRouteProto value.  If\n               this metric is not used,\
    \ its value should be set to -1.\n          Access:\n               read-write.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipRouteMetric3 { ipRouteEntry 5 }\n          Syntax:\n       \
    \        INTEGER\n          Definition:\n               An alternate routing metric\
    \ for this route.  The\n               semantics of this metric are determined\
    \ by the routing-\n               protocol specified in the route's ipRouteProto\
    \ value.  If\n               this metric is not used, its value should be set\
    \ to -1.\n           Access:\n               read-write.\n           Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipRouteMetric4 { ipRouteEntry 6 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               An alternate routing metric for this route.\
    \  The\n               semantics of this metric are determined by the routing-\n\
    \               protocol specified in the route's ipRouteProto value.  If\n  \
    \             this metric is not used, its value should be set to -1.\n      \
    \    Access:\n               read-write.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ipRouteNextHop { ipRouteEntry\
    \ 7 }\n          Syntax:\n               IpAddress\n          Definition:\n  \
    \             The IP address of the next hop of this route.\n          Access:\n\
    \               read-write.\n          Status:\n               mandatory.\n  \
    \        OBJECT:\n          -------\n               ipRouteType { ipRouteEntry\
    \ 8 }\n          Syntax:\n               INTEGER {\n                    other(1),\
    \        -- none of the following\n                    invalid(2),      -- an\
    \ invalidated route\n                                     -- route to directly\n\
    \                    direct(3),       -- connected (sub-)network\n           \
    \                          -- route to a non-local\n                    remote(4),\
    \       -- host/network/sub-network\n               }\n          Definition:\n\
    \               The type of route.\n          Access:\n               read-write.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipRouteProto { ipRouteEntry 9 }\n          Syntax:\n         \
    \      INTEGER {\n                    other(1),       -- none of the following\n\
    \                                    -- non-protocol information,\n          \
    \                          -- e.g., manually configured\n                    local(2),\
    \       -- entries\n                                    -- set via a network management\n\
    \                    netmgmt(3),     -- protocol\n                           \
    \         -- obtained via ICMP,\n                    icmp(4),        -- e.g.,\
    \ Redirect\n                                    -- the remaining values are\n\
    \                                    -- all gateway routing protocols\n      \
    \              egp(5),\n                    ggp(6),\n                    hello(7),\n\
    \                    rip(8),\n                    is-is(9),\n                \
    \    es-is(10),\n                    ciscoIgrp(11),\n                    bbnSpfIgp(12),\n\
    \                    oigp(13)\n               }\n          Definition:\n     \
    \          The routing mechanism via which this route was learned.\n         \
    \      Inclusion of values for gateway routing protocols is not\n            \
    \   intended to imply that hosts should support those\n               protocols.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ipRouteAge\
    \ { ipRouteEntry 10 }\n          Syntax:\n               INTEGER\n          Definition:\n\
    \               The number of seconds since this route was last updated\n    \
    \           or otherwise determined to be correct.   Note that no\n          \
    \     semantics of \"too old\" can be implied except through\n               knowledge\
    \ of the routing protocol by which the route was\n               learned.\n  \
    \        Access:\n               read-write.\n          Status:\n            \
    \   mandatory.\n"
- title: 5.5.  The ICMP Group
  contents:
  - "5.5.  The ICMP Group\n   Implementation of the ICMP group is mandatory for all\
    \ systems.\n   The ICMP group contains the ICMP input and output statistics.\n\
    \   Note that individual counters for ICMP message (sub-)codes have been\n   omitted\
    \ from this (version of the) MIB for simplicity.\n          OBJECT:\n        \
    \  -------\n               icmpInMsgs { icmp 1 }\n          Syntax:\n        \
    \       Counter\n          Definition:\n               The total number of ICMP\
    \ messages which the entity\n               received.  Note that this counter\
    \ includes all those\n               counted by icmpInErrors.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpInErrors { icmp 2 }\n \
    \         Syntax:\n               Counter\n          Definition:\n           \
    \    The number of ICMP messages which the entity received but\n             \
    \  determined as having errors (bad ICMP checksums, bad\n               length,\
    \ etc.).\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n          OBJECT:\n          -------\n             \
    \ icmpInDestUnreachs { icmp 3 }\n          Syntax:\n              Counter\n  \
    \        Definition:\n               The number of ICMP Destination Unreachable\
    \ messages\n               received.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpInTimeExcds { icmp 4 }\n          Syntax:\n              \
    \ Counter\n          Definition:\n               The number of ICMP Time Exceeded\
    \ messages received.\n          Access:\n               read-only.\n         \
    \ Status:\n               mandatory.\n          OBJECT:\n          -------\n \
    \              icmpInParmProbs { icmp 5 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Parameter Problem messages\
    \ received.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    icmpInSrcQuenchs { icmp 6 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Source Quench messages\
    \ received.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    icmpInRedirects { icmp 7 }\n          Syntax:\n               Counter\n \
    \         Definition:\n               The number of ICMP Redirect messages received.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpInEchos\
    \ { icmp 8 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP Echo (request) messages received.\n       \
    \   Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpInEchoReps { icmp 9\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Echo Reply messages received.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpInTimestamps { icmp 10\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Timestamp (request) messages received.\n        \
    \  Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpInTimestampReps { icmp\
    \ 11 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of ICMP Timestamp Reply messages received.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpInAddrMasks { icmp 12\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Address Mask Request messages\n               received.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpInAddrMaskReps\
    \ { icmp 13 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP Address Mask Reply messages received.\n   \
    \       Access:\n               read-only.\n          Status:\n              \
    \ mandatory.\n          OBJECT:\n          -------\n               icmpOutMsgs\
    \ { icmp 14 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of ICMP messages which this entity\n        \
    \       attempted to send.  Note that this counter includes all\n            \
    \   those counted by icmpOutErrors.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpOutErrors { icmp 15 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP messages which this\
    \ entity did not\n               send due to problems discovered within ICMP such\
    \ as a\n               lack of buffers.  This value should not include errors\n\
    \               discovered outside the ICMP layer such as the inability\n    \
    \           of IP to route the resultant datagram.  In some\n               implementations\
    \ there may be no types of error which\n               contribute to this counter's\
    \ value.\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n          OBJECT:\n          -------\n             \
    \  icmpOutDestUnreachs { icmp 16 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Destination Unreachable\
    \ messages sent.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    icmpOutTimeExcds { icmp 17 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Time Exceeded messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutParmProbs { icmp 18 }\n          Syntax:\n               Counter\n  \
    \        Definition:\n               The number of ICMP Parameter Problem messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutSrcQuenchs { icmp 19 }\n          Syntax:\n               Counter\n \
    \         Definition:\n               The number of ICMP Source Quench messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutRedirects { icmp 20 }\n          Syntax:\n               Counter\n  \
    \        Definition:\n               The number of ICMP Redirect messages sent.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpOutEchos\
    \ { icmp 21 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP Echo (request) messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpOutEchoReps { icmp 22 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The number of ICMP Echo Reply messages sent.\n          Access:\n      \
    \         read-only.\n          Status:\n               mandatory.\n         \
    \ OBJECT:\n          -------\n               icmpOutTimestamps { icmp 23 }\n \
    \         Syntax:\n               Counter\n          Definition:\n           \
    \    The number of ICMP Timestamp (request) messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpOutTimestampReps { icmp\
    \ 24 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of ICMP Timestamp Reply messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpOutAddrMasks { icmp 25\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Address Mask Request messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpOutAddrMaskReps { icmp\
    \ 26 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of ICMP Address Mask Reply messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n"
- title: 5.6.  The TCP Group
  contents:
  - "5.6.  The TCP Group\n   Implementation of the TCP group is mandatory for all\
    \ systems\n   that implement the TCP protocol.\n   Note that instances of object\
    \ types that represent information\n   about a particular TCP connection are transient;\
    \ they persist\n   only as long as the connection in question.\n             OBJECT:\n\
    \             -------\n                  tcpRtoAlgorithm { tcp 1 }\n         \
    \    Syntax:\n                  INTEGER {\n                       other(1),  \
    \  -- none of the following\n                       constant(2), -- a constant\
    \ rto\n                       rsre(3),     -- MIL-STD-1778, Appendix B\n     \
    \                  vanj(4)      -- Van Jacobson's algorithm [15]\n           \
    \       }\n             Definition:\n                  The algorithm used to determine\
    \ the timeout value used\n                  for retransmitting unacknowledged\
    \ octets.\n             Access:\n                  read-only.\n             Status:\n\
    \                  mandatory.\n             OBJECT:\n             -------\n  \
    \                tcpRtoMin { tcp 2 }\n             Syntax:\n                 \
    \ INTEGER\n             Definition:\n                  The minimum value permitted\
    \ by a TCP implementation\n                  for the retransmission timeout, measured\
    \ in\n                  milliseconds.  More refined semantics for objects\n  \
    \                of this type depend upon the algorithm used to\n            \
    \      determine the retransmission timeout.  In particular,\n               \
    \   when the timeout algorithm is rsre(3), an object\n                  of this\
    \ type has the semantics of the LBOUND\n                  quantity described in\
    \ RFC 793.\n             Access:\n                  read-only.\n             Status:\n\
    \                  mandatory.\n             OBJECT:\n             -------\n  \
    \                tcpRtoMax { tcp 3 }\n             Syntax:\n                 \
    \ INTEGER\n             Definition:\n                  The maximum value permitted\
    \ by a TCP implementation\n                  for the retransmission timeout, measured\n\
    \                  in milliseconds.  More refined semantics for objects\n    \
    \              of this type depend upon the algorithm used to\n              \
    \    determine the retransmission timeout.  In particular,\n                 \
    \ when the timeout algorithm is rsre(3), an object of\n                  this\
    \ type has the semantics of the UBOUND quantity\n                  described in\
    \ RFC 793.\n             Access:\n                  read-only.\n             Status:\n\
    \                  mandatory.\n             OBJECT:\n             -------\n  \
    \                tcpMaxConn { tcp 4 }\n             Syntax:\n                \
    \  INTEGER\n             Definition:\n                  The limit on the total\
    \ number of TCP connections the\n                  entity can support.  In entities\
    \ where the maximum\n                  number of connections is dynamic, this\
    \ object should\n                  contain the value \"-1\".\n             Access:\n\
    \                  read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpActiveOpens\
    \ { tcp 5 }\n             Syntax:\n                  Counter\n             Definition:\n\
    \                  The number of times TCP connections have made a direct\n  \
    \                transition to the SYN-SENT state from the CLOSED\n          \
    \        state.\n             Access:\n                  read-only.\n        \
    \     Status:\n                  mandatory.\n             OBJECT:\n          \
    \   -------\n                  tcpPassiveOpens { tcp 6 }\n             Syntax:\n\
    \                  Counter\n             Definition:\n                  The number\
    \ of times TCP connections have made a direct\n                  transition to\
    \ the SYN-RCVD state from the LISTEN\n                  state.\n             Access:\n\
    \                  read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpAttemptFails\
    \ { tcp 7 }\n             Syntax:\n                  Counter\n             Definition:\n\
    \                  The number of times TCP connections have made a direct\n  \
    \                transition to the CLOSED state from either the\n            \
    \      SYN-SENT state or the SYN-RCVD state, plus the number\n               \
    \   of times TCP connections have made a direct transition\n                 \
    \ to the LISTEN state from the SYN-RCVD state.\n             Access:\n       \
    \           read-only.\n             Status:\n                  mandatory.\n \
    \            OBJECT:\n             -------\n                  tcpEstabResets {\
    \ tcp 8 }\n             Syntax:\n                  Counter\n             Definition:\n\
    \                  The number of times TCP connections have made a direct\n  \
    \                transition to the CLOSED state from either the\n            \
    \      ESTABLISHED state or the CLOSE-WAIT state.\n             Access:\n    \
    \              read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpCurrEstab {\
    \ tcp 9 }\n             Syntax:\n                  Gauge\n             Definition:\n\
    \                  The number of TCP connections for which the current\n     \
    \             state is either ESTABLISHED or CLOSE-WAIT.\n             Access:\n\
    \                  read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpInSegs { tcp\
    \ 10 }\n             Syntax:\n                  Counter\n             Definition:\n\
    \                  The total number of segments received, including those\n  \
    \                received in error.  This count includes segments\n          \
    \        received on currently established connections.\n             Access:\n\
    \                  read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpOutSegs { tcp\
    \ 11 }\n             Syntax:\n                  Counter\n             Definition:\n\
    \                  The total number of segments sent, including those on\n   \
    \               current connections but excluding those containing\n         \
    \         only retransmitted octets.\n             Access:\n                 \
    \ read-only.\n             Status:\n                  mandatory.\n           \
    \  OBJECT:\n             -------\n                  tcpRetransSegs { tcp 12 }\n\
    \             Syntax:\n                  Counter\n             Definition:\n \
    \                 The total number of segments retransmitted - that is,\n    \
    \              the number of TCP segments transmitted containing one\n       \
    \           or more previously transmitted octets.\n             Access:\n   \
    \               read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpConnTable {\
    \ tcp 13 }\n             Syntax:\n                  SEQUENCE OF TcpConnEntry\n\
    \             Definition:\n                  A table containing TCP connection-specific\n\
    \                  information.\n             Access:\n                  read-only.\n\
    \             Status:\n                  mandatory.\n             OBJECT:\n  \
    \           -------\n                  tcpConnEntry { tcpConnTable 1 }\n     \
    \        Syntax:\n                  TcpConnEntry ::= SEQUENCE {\n            \
    \           tcpConnState\n                           INTEGER,\n              \
    \         tcpConnLocalAddress\n                           IpAddress,\n       \
    \                tcpConnLocalPort\n                           INTEGER (0..65535),\n\
    \                       tcpConnRemAddress\n                           IpAddress,\n\
    \                       tcpConnRemPort\n                           INTEGER (0..65535)\n\
    \                  }\n             Definition:\n                  Information\
    \ about a particular current TCP connection.\n                  An object of this\
    \ type is transient, in that it ceases\n                  to exist when (or soon\
    \ after) the connection makes the\n                  transition to the CLOSED\
    \ state.\n             Access:\n                  read-only.\n             Status:\n\
    \                  mandatory.\n             OBJECT:\n             -------\n  \
    \                tcpConnState { tcpConnEntry 1 }\n             Syntax:\n     \
    \             INTEGER {\n                       closed(1),\n                 \
    \      listen(2),\n                       synSent(3),\n                      \
    \ synReceived(4),\n                       established(5),\n                  \
    \     finWait1(6),\n                       finWait2(7),\n                    \
    \   closeWait(8),\n                       lastAck(9),\n                      \
    \ closing(10),\n                       timeWait(11)\n                  }\n   \
    \          Definition:\n                  The state of this TCP connection.\n\
    \             Access:\n                  read-only.\n             Status:\n  \
    \                mandatory.\n             OBJECT:\n             -------\n    \
    \              tcpConnLocalAddress { tcpConnEntry 2 }\n             Syntax:\n\
    \                  IpAddress\n             Definition:\n                  The\
    \ local IP address for this TCP connection.\n             Access:\n          \
    \        read-only.\n             Status:\n                  mandatory.\n    \
    \         OBJECT:\n             -------\n                  tcpConnLocalPort {\
    \ tcpConnEntry 3 }\n             Syntax:\n                  INTEGER (0..65535)\n\
    \             Definition:\n                  The local port number for this TCP\
    \ connection.\n             Access:\n                  read-only.\n          \
    \   Status:\n                  mandatory.\n             OBJECT:\n            \
    \ -------\n                  tcpConnRemAddress { tcpConnEntry 4 }\n          \
    \   Syntax:\n                  IpAddress\n             Definition:\n         \
    \         The remote IP address for this TCP connection.\n             Access:\n\
    \                  read-only.\n             Status:\n                  mandatory.\n\
    \             OBJECT:\n             -------\n                  tcpConnRemPort\
    \ { tcpConnEntry 5 }\n             Syntax:\n                  INTEGER (0..65535)\n\
    \             Definition:\n                  The remote port number for this TCP\
    \ connection.\n             Access:\n                  read-only.\n          \
    \   Status:\n                  mandatory.\n"
- title: 5.7.  The UDP Group
  contents:
  - "5.7.  The UDP Group\n   Implementation of the UDP group is mandatory for all\
    \ systems\n   which implement the UDP protocol.\n             OBJECT:\n      \
    \       -------\n                  udpInDatagrams { udp 1 }\n             Syntax:\n\
    \                  Counter\n             Definition:\n                  The total\
    \ number of UDP datagrams delivered to UDP\n                  users.\n       \
    \      Access:\n                  read-only.\n             Status:\n         \
    \         mandatory.\n             OBJECT:\n             -------\n           \
    \       udpNoPorts { udp 2 }\n             Syntax:\n                  Counter\n\
    \             Definition:\n                  The total number of received UDP\
    \ datagrams for which\n                  there was no application at the destination\
    \ port.\n             Access:\n                  read-only.\n             Status:\n\
    \                  mandatory.\n             OBJECT:\n             -------\n  \
    \                udpInErrors { udp 3 }\n             Syntax:\n               \
    \   Counter\n             Definition:\n                  The number of received\
    \ UDP datagrams that could not be\n                  delivered for reasons other\
    \ than the lack of an\n                  application at the destination port.\n\
    \             Access:\n                  read-only.\n             Status:\n  \
    \                mandatory.\n             OBJECT:\n             -------\n    \
    \              udpOutDatagrams { udp 4 }\n             Syntax:\n             \
    \     Counter\n             Definition:\n                  The total number of\
    \ UDP datagrams sent from this\n                  entity.\n             Access:\n\
    \                  read-only.\n             Status:\n                  mandatory.\n"
- title: 5.8.  The EGP Group
  contents:
  - "5.8.  The EGP Group\n   Implementation of the EGP group is mandatory for all\
    \ systems\n   which implement the EGP protocol.\n             OBJECT:\n      \
    \       -------\n                  egpInMsgs { egp 1 }\n             Syntax:\n\
    \                  Counter\n             Definition:\n                  The number\
    \ of EGP messages received without error.\n             Access:\n            \
    \      read-only.\n             Status:\n                  mandatory.\n      \
    \       OBJECT:\n             -------\n                  egpInErrors { egp 2 }\n\
    \             Syntax:\n                  Counter\n             Definition:\n \
    \                 The number of EGP messages received that proved to be\n    \
    \              in error.\n             Access:\n                  read-only.\n\
    \             Status:\n                  mandatory.\n             OBJECT:\n  \
    \           -------\n                  egpOutMsgs { egp 3 }\n             Syntax:\n\
    \                  Counter\n             Definition:\n                  The total\
    \ number of locally generated EGP messages.\n             Access:\n          \
    \        read-only.\n             Status:\n                  mandatory.\n    \
    \         OBJECT:\n             -------\n                  egpOutErrors { egp\
    \ 4 }\n             Syntax:\n                  Counter\n             Definition:\n\
    \                  The number of locally generated EGP messages not sent\n   \
    \               due to resource limitations within an EGP entity.\n          \
    \   Access:\n                  read-only.\n             Status:\n            \
    \      mandatory.\n"
- title: 5.8.1.  The EGP Neighbor Table
  contents:
  - "5.8.1.  The EGP Neighbor Table\n   The Egp Neighbor table contains information\
    \ about this entity's EGP\n   neighbors.\n             OBJECT:\n             -------\n\
    \                  egpNeighTable { egp 5 }\n             Syntax:\n           \
    \       SEQUENCE OF EgpNeighEntry\n             Definition:\n                \
    \  The EGP neighbor table.\n             Access:\n                  read-only.\n\
    \             Status:\n                  mandatory.\n             OBJECT:\n  \
    \           -------\n                  egpNeighEntry { egpNeighTable 1 }\n   \
    \          Syntax:\n                  EgpNeighEntry ::= SEQUENCE {\n         \
    \              egpNeighState\n                           INTEGER,\n          \
    \             egpNeighAddr\n                           IpAddress\n           \
    \       }\n             Definition:\n                  Information about this\
    \ entity's relationship with a\n                  particular EGP neighbor.\n \
    \            Access:\n                  read-only.\n             Status:\n   \
    \               mandatory.\n             We now consider the individual components\
    \ of each EGP\n             neighbor entry:\n             OBJECT:\n          \
    \   -------\n                  egpNeighState { egpNeighEntry 1 }\n           \
    \  Syntax:\n                  INTEGER {\n                       idle(1),\n   \
    \                    acquisition(2),\n                       down(3),\n      \
    \                 up(4),\n                       cease(5)\n                  }\n\
    \             Definition:\n                  The EGP state of the local system\
    \ with respect to this\n                  entry's EGP neighbor.  Each EGP state\
    \ is represented\n                  by a value that is one greater than the numerical\n\
    \                  value associated with said state in RFC 904.\n            \
    \ Access:\n                  read-only.\n             Status:\n              \
    \    mandatory.\n             OBJECT:\n             -------\n                \
    \  egpNeighAddr { egpNeighEntry 2 }\n             Syntax:\n                  IpAddress\n\
    \             Definition:\n                  The IP address of this entry's EGP\
    \ neighbor.\n             Access:\n                  read-only.\n            \
    \ Status:\n                  mandatory.\n"
- title: 6.  Definitions
  contents:
  - "6.  Definitions\n                RFC1156-MIB\n                DEFINITIONS ::=\
    \ BEGIN\n                IMPORTS\n                        mgmt, OBJECT-TYPE, NetworkAddress,\
    \ IpAddress,\n                        Counter, Gauge, TimeTicks\n            \
    \                FROM RFC1155-SMI;\n                  mib        OBJECT IDENTIFIER\
    \ ::= { mgmt 1 }\n                  system     OBJECT IDENTIFIER ::= { mib 1 }\n\
    \                  interfaces OBJECT IDENTIFIER ::= { mib 2 }\n              \
    \    at         OBJECT IDENTIFIER ::= { mib 3 }\n                  ip        \
    \ OBJECT IDENTIFIER ::= { mib 4 }\n                  icmp       OBJECT IDENTIFIER\
    \ ::= { mib 5 }\n                  tcp        OBJECT IDENTIFIER ::= { mib 6 }\n\
    \                  udp        OBJECT IDENTIFIER ::= { mib 7 }\n              \
    \    egp        OBJECT IDENTIFIER ::= { mib 8 }\n                  -- object types\n\
    \                  -- the System group\n                  sysDescr OBJECT-TYPE\n\
    \                          SYNTAX  OCTET STRING\n                          ACCESS\
    \  read-only\n                          STATUS  mandatory\n                  \
    \        ::= { system 1 }\n                  sysObjectID OBJECT-TYPE\n       \
    \                   SYNTAX  OBJECT IDENTIFIER\n                          ACCESS\
    \  read-only\n                          STATUS  mandatory\n                  \
    \        ::= { system 2 }\n                  sysUpTime OBJECT-TYPE\n         \
    \                 SYNTAX  TimeTicks\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ system 3 }\n                  -- the Interfaces group\n                  ifNumber\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { interfaces 1 }\n                  -- the Interfaces\
    \ table\n                  ifTable OBJECT-TYPE\n                          SYNTAX\
    \  SEQUENCE OF IfEntry\n                          ACCESS  read-write\n       \
    \                   STATUS  mandatory\n                          ::= { interfaces\
    \ 2 }\n                  ifEntry OBJECT-TYPE\n                          SYNTAX\
    \  IfEntry\n                          ACCESS  read-write\n                   \
    \       STATUS  mandatory\n                          ::= { ifTable 1 }\n     \
    \             IfEntry ::= SEQUENCE {\n                      ifIndex\n        \
    \                  INTEGER,\n                      ifDescr\n                 \
    \         OCTET STRING,\n                      ifType\n                      \
    \    INTEGER,\n                      ifMtu\n                          INTEGER,\n\
    \                      ifSpeed\n                          Gauge,\n           \
    \           ifPhysAddress\n                          OCTET STRING,\n         \
    \             ifAdminStatus\n                          INTEGER,\n            \
    \          ifOperStatus\n                          INTEGER,\n                \
    \      ifLastChange\n                          TimeTicks,\n                  \
    \    ifInOctets\n                          Counter,\n                      ifInUcastPkts\n\
    \                          Counter,\n                      ifInNUcastPkts\n  \
    \                        Counter,\n                      ifInDiscards\n      \
    \                    Counter,\n                      ifInErrors\n            \
    \              Counter,\n                      ifInUnknownProtos\n           \
    \               Counter,\n                      ifOutOctets\n                \
    \          Counter,\n                      ifOutUcastPkts\n                  \
    \        Counter,\n                      ifOutNUcastPkts\n                   \
    \       Counter,\n                      ifOutDiscards\n                      \
    \    Counter,\n                      ifOutErrors\n                          Counter,\n\
    \                      ifOutQLen\n                          Gauge\n          \
    \        }\n                  ifIndex OBJECT-TYPE\n                          SYNTAX\
    \  INTEGER\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { ifEntry 1 }\n      \
    \            ifDescr OBJECT-TYPE\n                          SYNTAX  OCTET STRING\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ifEntry 2 }\n                  ifType\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER {\n                 \
    \                 other(1),     -- none of the following\n                   \
    \               regular1822(2),\n                                  hdh1822(3),\n\
    \                                  ddn-x25(4),\n                             \
    \     rfc877-x25(5),\n                                  ethernet-csmacd(6),\n\
    \                                  iso88023-csmacd(7),\n                     \
    \             iso88024-tokenBus(8),\n                                  iso88025-tokenRing(9),\n\
    \                                  iso88026-man(10),\n                       \
    \           starLan(11),\n                                  proteon-10MBit(12),\n\
    \                                  proteon-80MBit(13),\n                     \
    \             hyperchannel(14),\n                                  fddi(15),\n\
    \                                  lapb(16),\n                               \
    \   sdlc(17),\n                                  t1-carrier(18),\n           \
    \                       cept(19),\n                                  basicIsdn(20),\n\
    \                                  primaryIsdn(21),\n                        \
    \                           -- proprietary serial\n                          \
    \        propPointToPointSerial(22)\n                              }\n       \
    \                   ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { ifEntry 3 }\n                  ifMtu OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { ifEntry 4 }\n                  ifSpeed OBJECT-TYPE\n           \
    \               SYNTAX  Gauge\n                          ACCESS  read-only\n \
    \                         STATUS  mandatory\n                          ::= { ifEntry\
    \ 5 }\n                  ifPhysAddress OBJECT-TYPE\n                         \
    \ SYNTAX  OCTET STRING\n                          ACCESS  read-only\n        \
    \                  STATUS  mandatory\n                          ::= { ifEntry\
    \ 6 }\n                  ifAdminStatus OBJECT-TYPE\n                         \
    \ SYNTAX  INTEGER {\n                                  up(1),        -- ready\
    \ to pass packets\n                                  down(2),\n              \
    \                    testing(3)    -- in some test mode\n                    \
    \              }\n                          ACCESS  read-write\n             \
    \             STATUS  mandatory\n                          ::= { ifEntry 7 }\n\
    \                  ifOperStatus OBJECT-TYPE\n                          SYNTAX\
    \  INTEGER {\n                                  up(1),        -- ready to pass\
    \ packets\n                                  down(2),\n                      \
    \            testing(3)    -- in some test mode\n                            \
    \      }\n                          ACCESS  read-only\n                      \
    \    STATUS  mandatory\n                          ::= { ifEntry 8 }\n        \
    \          ifLastChange OBJECT-TYPE\n                          SYNTAX  TimeTicks\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ifEntry 9 }\n                  ifInOctets\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { ifEntry 10 }\n                  ifInUcastPkts OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::=  { ifEntry 11 }\n                  ifInNUcastPkts OBJECT-TYPE\n  \
    \                        SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ ifEntry 12 }\n                  ifInDiscards OBJECT-TYPE\n                 \
    \         SYNTAX  Counter\n                          ACCESS  read-only\n     \
    \                     STATUS  mandatory\n                          ::= { ifEntry\
    \ 13 }\n                  ifInErrors OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { ifEntry 14 }\n     \
    \             ifInUnknownProtos OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { ifEntry 15 }\n     \
    \             ifOutOctets OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ifEntry 16 }\n                 \
    \ ifOutUcastPkts OBJECT-TYPE\n                          SYNTAX  Counter\n    \
    \                      ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { ifEntry 17 }\n                  ifOutNUcastPkts\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { ifEntry 18 }\n                  ifOutDiscards OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { ifEntry 19 }\n                  ifOutErrors OBJECT-TYPE\n      \
    \                    SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ ifEntry 20 }\n                  ifOutQLen OBJECT-TYPE\n                    \
    \      SYNTAX  Gauge\n                          ACCESS  read-only\n          \
    \                STATUS  mandatory\n                          ::= { ifEntry 21\
    \ }\n                  -- the Address Translation group\n                  atTable\
    \ OBJECT-TYPE\n                          SYNTAX  SEQUENCE OF AtEntry\n       \
    \                   ACCESS  read-write\n                          STATUS  mandatory\n\
    \                          ::= { at 1 }\n                  atEntry OBJECT-TYPE\n\
    \                          SYNTAX  AtEntry\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { atTable 1 }\n                  AtEntry ::= SEQUENCE {\n       \
    \               atIfIndex\n                          INTEGER,\n              \
    \        atPhysAddress\n                          OCTET STRING,\n            \
    \          atNetAddress\n                          NetworkAddress\n          \
    \        }\n                  atIfIndex OBJECT-TYPE\n                        \
    \  SYNTAX  INTEGER\n                          ACCESS  read-write\n           \
    \               STATUS  mandatory\n                          ::= { atEntry 1 }\n\
    \                  atPhysAddress OBJECT-TYPE\n                          SYNTAX\
    \  OCTET STRING\n                          ACCESS  read-write\n              \
    \            STATUS  mandatory\n                          ::= { atEntry 2 }\n\
    \                  atNetAddress OBJECT-TYPE\n                          SYNTAX\
    \  NetworkAddress\n                          ACCESS  read-write\n            \
    \              STATUS  mandatory\n                          ::= { atEntry 3 }\n\
    \                  -- the IP group\n                  ipForwarding OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER {\n                        gateway(1),\
    \ -- entity forwards datagrams\n                        host(2)     -- entity\
    \ does NOT forward datagrams\n                                  }\n          \
    \                ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { ip 1 }\n                  ipDefaultTTL OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { ip 2 }\n                  ipInReceives OBJECT-TYPE\n          \
    \                SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ ip 3 }\n                  ipInHdrErrors OBJECT-TYPE\n                      \
    \    SYNTAX  Counter\n                          ACCESS  read-only\n          \
    \                STATUS  mandatory\n                          ::= { ip 4 }\n \
    \                 ipInAddrErrors OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { ip 5 }\n           \
    \       ipForwDatagrams OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ip 6 }\n                  ipInUnknownProtos\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { ip 7 }\n                  ipInDiscards OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { ip 8 }\n                  ipInDelivers OBJECT-TYPE\n           \
    \               SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ ip 9 }\n                  ipOutRequests OBJECT-TYPE\n                      \
    \    SYNTAX  Counter\n                          ACCESS  read-only\n          \
    \                STATUS  mandatory\n                          ::= { ip 10 }\n\
    \                  ipOutDiscards OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { ip 11 }\n          \
    \        ipOutNoRoutes OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ip 12 }\n                  ipReasmTimeout\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { ip 13 }\n                  ipReasmReqds OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { ip 14 }\n                  ipReasmOKs OBJECT-TYPE\n            \
    \              SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ ip 15 }\n                  ipReasmFails OBJECT-TYPE\n                      \
    \    SYNTAX  Counter\n                          ACCESS  read-only\n          \
    \                STATUS  mandatory\n                          ::= { ip 16 }\n\
    \                  ipFragOKs OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ip 17 }\n                  ipFragFails\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { ip 18 }\n                  ipFragCreates OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { ip 19 }\n                  -- the IP Interface table\n         \
    \         ipAddrTable OBJECT-TYPE\n                          SYNTAX  SEQUENCE\
    \ OF IpAddrEntry\n                          ACCESS  read-only\n              \
    \            STATUS  mandatory\n                          ::= { ip 20 }\n    \
    \              ipAddrEntry OBJECT-TYPE\n                          SYNTAX  IpAddrEntry\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { ipAddrTable 1 }\n              \
    \    IpAddrEntry ::= SEQUENCE {\n                      ipAdEntAddr\n         \
    \                 IpAddress,\n                      ipAdEntIfIndex\n         \
    \                 INTEGER,\n                      ipAdEntNetMask\n           \
    \               IpAddress,\n                      ipAdEntBcastAddr\n         \
    \                 INTEGER\n                  }\n                  ipAdEntAddr\
    \ OBJECT-TYPE\n                          SYNTAX  IpAddress\n                 \
    \         ACCESS  read-only\n                          STATUS  mandatory\n   \
    \                       ::=  { ipAddrEntry 1 }\n                  ipAdEntIfIndex\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::=  { ipAddrEntry 2 }\n                  ipAdEntNetMask\
    \ OBJECT-TYPE\n                          SYNTAX  IpAddress\n                 \
    \         ACCESS  read-only\n                          STATUS  mandatory\n   \
    \                       ::=  { ipAddrEntry 3 }\n                  ipAdEntBcastAddr\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { ipAddrEntry 4 }\n                  -- the IP Routing\
    \ table\n                  ipRoutingTable OBJECT-TYPE\n                      \
    \    SYNTAX  SEQUENCE OF IpRouteEntry\n                          ACCESS  read-write\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ ip 21 }\n                  ipRouteEntry OBJECT-TYPE\n                      \
    \    SYNTAX  IpRouteEntry\n                          ACCESS  read-write\n    \
    \                      STATUS  mandatory\n                          ::= { ipRoutingTable\
    \ 1 }\n                  IpRouteEntry ::= SEQUENCE {\n                      ipRouteDest\n\
    \                          IpAddress,\n                      ipRouteIfIndex\n\
    \                          INTEGER,\n                      ipRouteMetric1\n  \
    \                        INTEGER,\n                      ipRouteMetric2\n    \
    \                      INTEGER,\n                      ipRouteMetric3\n      \
    \                    INTEGER,\n                      ipRouteMetric4\n        \
    \                  INTEGER,\n                      ipRouteNextHop\n          \
    \                IpAddress,\n                      ipRouteType\n             \
    \             INTEGER,\n                      ipRouteProto\n                 \
    \         INTEGER,\n                      ipRouteAge\n                       \
    \   INTEGER\n                  }\n                  ipRouteDest OBJECT-TYPE\n\
    \                          SYNTAX  IpAddress\n                          ACCESS\
    \  read-write\n                          STATUS  mandatory\n                 \
    \         ::= { ipRouteEntry 1 }\n                  ipRouteIfIndex  OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { ipRouteEntry 2 }\n                  ipRouteMetric1 OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { ipRouteEntry 3 }\n                  ipRouteMetric2 OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { ipRouteEntry 4 }\n                  ipRouteMetric3 OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { ipRouteEntry 5 }\n                  ipRouteMetric4 OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER\n                          ACCESS \
    \ read-write\n                          STATUS  mandatory\n                  \
    \        ::= { ipRouteEntry 6 }\n                  ipRouteNextHop OBJECT-TYPE\n\
    \                          SYNTAX  IpAddress\n                          ACCESS\
    \  read-write\n                          STATUS  mandatory\n                 \
    \         ::= { ipRouteEntry 7 }\n                  ipRouteType OBJECT-TYPE\n\
    \                          SYNTAX  INTEGER {\n                            other(1),\
    \      -- none of the following\n                            invalid(2),    --\
    \ an invalidated route\n                                           -- route to\
    \ directly\n                            direct(3),     -- connected (sub-)network\n\
    \                                           -- route to a non-local\n        \
    \                    remote(4),     -- host/network/sub-network\n            \
    \                  }\n                          ACCESS  read-write\n         \
    \                 STATUS  mandatory\n                          ::= { ipRouteEntry\
    \ 8 }\n                  ipRouteProto OBJECT-TYPE\n                          SYNTAX\
    \  INTEGER {\n                            other(1),     -- none of the following\n\
    \                                          -- non-protocol information\n     \
    \                                     --   e.g., manually\n                  \
    \          local(2),     --   configured entries\n                           \
    \               -- set via a network\n                            netmgmt(3),\
    \   --   management protocol\n                                          -- obtained\
    \ via ICMP,\n                            icmp(4),      --   e.g., Redirect\n \
    \                                         -- the following are\n             \
    \                             -- gateway routing protocols\n                 \
    \           egp(5),\n                            ggp(6),\n                   \
    \         hello(7),\n                            rip(8),\n                   \
    \         is-is(9),\n                            es-is(10),\n                \
    \            ciscoIgrp(11),\n                            bbnSpfIgp(12),\n    \
    \                        oigp(13)\n                              }\n         \
    \                 ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { ipRouteEntry 9 }\n                  ipRouteAge\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-write\n                          STATUS  mandatory\n    \
    \                      ::= { ipRouteEntry 10 }\n                  -- the ICMP\
    \ group\n                  icmpInMsgs OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { icmp 1 }\n         \
    \         icmpInErrors OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { icmp 2 }\n                  icmpInDestUnreachs\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { icmp 3 }\n                  icmpInTimeExcds OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { icmp 4 }\n                  icmpInParmProbs OBJECT-TYPE\n      \
    \                    SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ icmp 5 }\n                  icmpInSrcQuenchs OBJECT-TYPE\n                 \
    \         SYNTAX  Counter\n                          ACCESS  read-only\n     \
    \                     STATUS  mandatory\n                          ::= { icmp\
    \ 6 }\n                  icmpInRedirects OBJECT-TYPE\n                       \
    \   SYNTAX  Counter\n                          ACCESS  read-only\n           \
    \               STATUS  mandatory\n                          ::= { icmp 7 }\n\
    \                  icmpInEchos OBJECT-TYPE\n                          SYNTAX \
    \ Counter\n                          ACCESS  read-only\n                     \
    \     STATUS  mandatory\n                          ::= { icmp 8 }\n          \
    \        icmpInEchoReps OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { icmp 9 }\n                  icmpInTimestamps\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { icmp 10 }\n                  icmpInTimestampReps OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { icmp 11 }\n                  icmpInAddrMasks OBJECT-TYPE\n     \
    \                     SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ icmp 12 }\n                  icmpInAddrMaskReps OBJECT-TYPE\n              \
    \            SYNTAX  Counter\n                          ACCESS  read-only\n  \
    \                        STATUS  mandatory\n                          ::= { icmp\
    \ 13 }\n                  icmpOutMsgs OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { icmp 14 }\n        \
    \          icmpOutErrors OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { icmp 15 }\n                  icmpOutDestUnreachs\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { icmp 16 }\n                  icmpOutTimeExcds OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { icmp 17 }\n                  icmpOutParmProbs OBJECT-TYPE\n    \
    \                      SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ icmp 18 }\n                  icmpOutSrcQuenchs OBJECT-TYPE\n               \
    \           SYNTAX  Counter\n                          ACCESS  read-only\n   \
    \                       STATUS  mandatory\n                          ::= { icmp\
    \ 19 }\n                  icmpOutRedirects OBJECT-TYPE\n                     \
    \     SYNTAX  Counter\n                          ACCESS  read-only\n         \
    \                 STATUS  mandatory\n                          ::= { icmp 20 }\n\
    \                  icmpOutEchos OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { icmp 21 }\n        \
    \          icmpOutEchoReps OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { icmp 22 }\n                  icmpOutTimestamps\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { icmp 23 }\n                  icmpOutTimestampReps\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { icmp 24 }\n                  icmpOutAddrMasks OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { icmp 25 }\n                  icmpOutAddrMaskReps OBJECT-TYPE\n \
    \                         SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ icmp 26 }\n                  -- the TCP group\n                  tcpRtoAlgorithm\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER {\n                 \
    \         other(1),    -- none of the following\n                          constant(2),\
    \ -- a constant rto\n                          rsre(3),     -- MIL-STD-1778, Appendix\
    \ B\n                          vanj(4)      -- Van Jacobson's algorithm [15]\n\
    \                                  }\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ tcp 1 }\n                  tcpRtoMin OBJECT-TYPE\n                         \
    \ SYNTAX  INTEGER\n                          ACCESS  read-only\n             \
    \             STATUS  mandatory\n                          ::= { tcp 2 }\n   \
    \               tcpRtoMax OBJECT-TYPE\n                          SYNTAX  INTEGER\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { tcp 3 }\n                  tcpMaxConn\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { tcp 4 }\n                  tcpActiveOpens OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { tcp 5 }\n                  tcpPassiveOpens OBJECT-TYPE\n       \
    \                   SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ tcp 6 }\n                  tcpAttemptFails OBJECT-TYPE\n                   \
    \       SYNTAX  Counter\n                          ACCESS  read-only\n       \
    \                   STATUS  mandatory\n                          ::= { tcp 7 }\n\
    \                  tcpEstabResets OBJECT-TYPE\n                          SYNTAX\
    \  Counter\n                          ACCESS  read-only\n                    \
    \      STATUS  mandatory\n                          ::= { tcp 8 }\n          \
    \        tcpCurrEstab OBJECT-TYPE\n                          SYNTAX  Gauge\n \
    \                         ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { tcp 9 }\n                  tcpInSegs\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { tcp 10 }\n                  tcpOutSegs OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { tcp 11 }\n                  tcpRetransSegs OBJECT-TYPE\n       \
    \                   SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ tcp 12 }\n                  -- the TCP connections table\n                 \
    \ tcpConnTable OBJECT-TYPE\n                          SYNTAX  SEQUENCE OF TcpConnEntry\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { tcp 13 }\n                  tcpConnEntry\
    \ OBJECT-TYPE\n                          SYNTAX  TcpConnEntry\n              \
    \            ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { tcpConnTable 1 }\n                  TcpConnEntry\
    \ ::= SEQUENCE {\n                      tcpConnState\n                       \
    \   INTEGER,\n                      tcpConnLocalAddress\n                    \
    \      IpAddress,\n                      tcpConnLocalPort\n                  \
    \        INTEGER (0..65535),\n                      tcpConnRemAddress\n      \
    \                    IpAddress,\n                      tcpConnRemPort\n      \
    \                    INTEGER (0..65535)\n                  }\n               \
    \   tcpConnState OBJECT-TYPE\n                          SYNTAX  INTEGER {\n  \
    \                                    closed(1),\n                            \
    \          listen(2),\n                                      synSent(3),\n   \
    \                                   synReceived(4),\n                        \
    \              established(5),\n                                      finWait1(6),\n\
    \                                      finWait2(7),\n                        \
    \              closeWait(8),\n                                      lastAck(9),\n\
    \                                      closing(10),\n                        \
    \              timeWait(11)\n                                  }\n           \
    \               ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { tcpConnEntry 1 }\n                  tcpConnLocalAddress\
    \ OBJECT-TYPE\n                          SYNTAX  IpAddress\n                 \
    \         ACCESS  read-only\n                          STATUS  mandatory\n   \
    \                       ::= { tcpConnEntry 2 }\n                  tcpConnLocalPort\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER (0..65535)\n        \
    \                  ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { tcpConnEntry 3 }\n                  tcpConnRemAddress\
    \ OBJECT-TYPE\n                          SYNTAX  IpAddress\n                 \
    \         ACCESS  read-only\n                          STATUS  mandatory\n   \
    \                       ::= { tcpConnEntry 4 }\n                  tcpConnRemPort\
    \ OBJECT-TYPE\n                          SYNTAX  INTEGER (0..65535)\n        \
    \                  ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { tcpConnEntry 5 }\n                  -- the UDP\
    \ group\n                  udpInDatagrams OBJECT-TYPE\n                      \
    \    SYNTAX  Counter\n                          ACCESS  read-only\n          \
    \                STATUS  mandatory\n                          ::= { udp 1 }\n\
    \                  udpNoPorts OBJECT-TYPE\n                          SYNTAX  Counter\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { udp 2 }\n                  udpInErrors\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { udp 3 }\n                  udpOutDatagrams OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { udp 4 }\n                  -- the EGP group\n                  egpInMsgs\
    \ OBJECT-TYPE\n                          SYNTAX  Counter\n                   \
    \       ACCESS  read-only\n                          STATUS  mandatory\n     \
    \                     ::= { egp 1 }\n                  egpInErrors OBJECT-TYPE\n\
    \                          SYNTAX  Counter\n                          ACCESS \
    \ read-only\n                          STATUS  mandatory\n                   \
    \       ::= { egp 2 }\n                  egpOutMsgs OBJECT-TYPE\n            \
    \              SYNTAX  Counter\n                          ACCESS  read-only\n\
    \                          STATUS  mandatory\n                          ::= {\
    \ egp 3 }\n                  egpOutErrors OBJECT-TYPE\n                      \
    \    SYNTAX  Counter\n                          ACCESS  read-only\n          \
    \                STATUS  mandatory\n                          ::= { egp 4 }\n\
    \                  -- the EGP Neighbor table\n                  egpNeighTable\
    \ OBJECT-TYPE\n                          SYNTAX  SEQUENCE OF EgpNeighEntry\n \
    \                         ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { egp 5 }\n                  egpNeighEntry\
    \ OBJECT-TYPE\n                          SYNTAX  EgpNeighEntry\n             \
    \             ACCESS  read-only\n                          STATUS  mandatory\n\
    \                          ::= { egpNeighTable 1 }\n                  EgpNeighEntry\
    \ ::= SEQUENCE {\n                      egpNeighState\n                      \
    \    INTEGER,\n                      egpNeighAddr\n                          IpAddress\n\
    \                  }\n                  egpNeighState OBJECT-TYPE\n          \
    \                SYNTAX  INTEGER {\n                                      idle(1),\n\
    \                                      acquisition(2),\n                     \
    \                 down(3),\n                                      up(4),\n   \
    \                                   cease(5)\n                               \
    \   }\n                          ACCESS  read-only\n                         \
    \ STATUS  mandatory\n                          ::= { egpNeighEntry 1 }\n     \
    \             egpNeighAddr OBJECT-TYPE\n                          SYNTAX  IpAddress\n\
    \                          ACCESS  read-only\n                          STATUS\
    \  mandatory\n                          ::= { egpNeighEntry 2 }\n            \
    \      END\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The initial draft of this memo was heavily influenced\
    \ by the the HEMS\n   [9] and SNMP [10] MIBs.\n   Its final form is the result\
    \ of the suggestions, the dicussions, and\n   the compromises reached by the members\
    \ of the IETF MIB working group:\n         Karl Auerbach, Epilogue Technology\n\
    \         K. Ramesh Babu, Excelan\n         Lawrence Besaw, Hewlett-Packard\n\
    \         Jeffrey D. Case, University of Tennessee at Knoxville\n         James\
    \ R. Davin, Proteon\n         Mark S. Fedor, NYSERNet\n         Robb Foster, BBN\n\
    \         Phill Gross, The MITRE Corporation\n         Bent Torp Jensen, Convergent\
    \ Technology\n         Lee Labarre, The MITRE Corporation\n         Dan Lynch,\
    \ Advanced Computing Environments\n         Keith McCloghrie, The Wollongong Group\n\
    \         Dave Mackie, 3Com/Bridge\n         Craig Partridge, BBN (chair)\n  \
    \       Jim Robertson, 3Com/Bridge\n         Marshall T. Rose, The Wollongong\
    \ Group\n         Greg Satz, cisco\n         Martin Lee Schoffstall, Rensselaer\
    \ Polytechnic Institute\n         Lou Steinberg, IBM\n         Dean Throop, Data\
    \ General\n         Unni Warrier, Unisys\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1]  Cerf, V., \"IAB Recommendations for the Development of\
    \ Internet\n        Network Management Standards\", RFC 1052, IAB, April 1988.\n\
    \   [2]  Information processing systems - Open Systems Interconnection,\n    \
    \    \"Management Information Services Definition\", International\n        Organization\
    \ for Standardization, Draft Proposal 9595/2,\n        December 1987.\n   [3]\
    \  Information processing systems - Open Systems Interconnection,\n        \"\
    Management Information Protocol Specification\", International\n        Organization\
    \ for Standardization, Draft Proposal 9596/2,\n        December 1987.\n   [4]\
    \  Rose M., and K. McCloghrie, \"Structure and Identification of\n        Management\
    \ Information for TCP/IP-based internets\", RFC 1065,\n        TWG, August 1988.\n\
    \   [5]  Partridge C., and G. Trewitt, \"The High-Level Entity Management\n  \
    \      System (HEMS)\", RFCs 1021-1024, BBN and Stanford, October 1987.\n   [6]\
    \  Cerf, V., \"Report of the Second Ad Hoc Network Management Review\n       \
    \ Group\", RFC 1109, IAB, August 1989.\n   [7]  Rose, M., and K. McCloghrie, \"\
    Structure and Identification of\n        Management Information for TCP/IP-based\
    \ Internets\", RFC 1155,\n        Performance Systems International and Hughes\
    \ LAN Systems, May\n        1990.\n   [8]  Case, J., M. Fedor, M. Schoffstall,\
    \ and J. Davin, The Simple\n        Network Management Protocol\", RFC 1157, University\
    \ of Tennessee\n        at Knoxville, Performance Systems International, Performance\n\
    \        Systems International, and the MIT Laboratory for Computer\n        Science,\
    \ May 1990.\n   [9]  Partridge C., and G. Trewitt, \"HEMS Variable Definitions\"\
    , RFC\n        1024, BBN and Stanford, October 1987.\n  [10]  Case, J., M. Fedor,\
    \ M. Schoffstall, and J. Davin, \"A Simple\n        Network Management Protocol\"\
    , RFC 1067, University of Tennessee\n        At Knoxville, NYSERNet, Rensselaer\
    \ Polytechnic, Proteon, August\n        1988.\n  [11]  LaBarre, L., \"Structure\
    \ and Identification of Management\n        Information for the Internet\", Internet\
    \ Engineering Task Force\n        working note, Network Information Center, SRI\
    \ International,\n        Menlo Park, California, April 1988.\n  [12]  LaBarre,\
    \ L., \"Transport Layer Management Information:  TCP\",\n        Internet Engineering\
    \ Task Force working note in preparation.\n        Network Information Center,\
    \ SRI International, Menlo Park,\n        California, (unpublished).\n  [13] \
    \ Information processing systems - Open Systems Interconnection,\n        \"Specification\
    \ of Abstract Syntax Notation One (ASN.1)\",\n        International Organization\
    \ for Standardization, International\n        Standard 8824, December 1987.\n\
    \  [14]  Information processing systems - Open Systems Interconnection,\n    \
    \    \"Specification of Basic Encoding Rules for Abstract Notation One\n     \
    \   (ASN.1)\", International Organization for Standardization,\n        International\
    \ Standard 8825, December 1987.\n  [15]  Jacobson, V., \"Congestion Avoidance\
    \ and Control\", SIGCOMM, 1988,\n        Stanford, California.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Keith McCloghrie\n   The Wollongong Group\n   1129 San\
    \ Antonio Road\n   Palo Alto, CA 04303\n   Phone: (415) 962-7160\n   EMail: sytek!kzm@HPLABS.HP.COM\n\
    \   Marshall T. Rose\n   PSI, Inc.\n   PSI California Office\n   P.O. Box 391776\n\
    \   Mountain View, CA 94039\n   Phone: (415) 961-3380\n   EMail: mrose@PSI.COM\n"
