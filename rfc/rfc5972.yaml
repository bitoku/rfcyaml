- title: __initial_text__
  contents:
  - '       General Internet Signaling Transport (GIST) State Machine

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes state machines for the General Internet\n\
    \   Signaling Transport (GIST).  The states of GIST nodes for a given\n   flow\
    \ and their transitions are presented in order to illustrate how\n   GIST may\
    \ be implemented.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5972.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Notational Conventions Used in State Diagrams ...................3\n   4.\
    \ State Machine Symbols ...........................................5\n   5. Common\
    \ Rules ....................................................6\n      5.1. Common\
    \ Procedures ..........................................7\n      5.2. Common Events\
    \ ..............................................8\n      5.3. Common Variables\
    \ ...........................................9\n   6. State Machines .................................................11\n\
    \      6.1. Diagram Notations .........................................12\n  \
    \    6.2. State Machine for GIST Querying Node ......................12\n    \
    \  6.3. State Machine for GIST Responding Node ....................16\n   7. Security\
    \ Considerations ........................................18\n   8. Acknowledgments\
    \ ................................................18\n   9. References .....................................................18\n\
    \      9.1. Normative References ......................................18\n  \
    \    9.2. Informative References ....................................18\n   Appendix\
    \ A. State Transition Tables ...............................20\n      A.1. State\
    \ Transition Tables for GIST Querying Node ............20\n      A.2. State Transition\
    \ Tables for GIST Responding Node ..........24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The state machines described in this document are illustrative\
    \ of how\n   the GIST protocol defined in [1] may be implemented for the GIST\n\
    \   nodes in different locations of a flow path.  Where there are\n   differences,\
    \ [1] is authoritative.  The state machines are\n   informative only.  Implementations\
    \ may achieve the same results using\n   different methods.\n   There are two\
    \ types of possible entities for GIST signaling:\n   -  GIST querying node: GIST\
    \ node that initiates the discovery of the\n      next peer;\n   -  GIST responding\
    \ node: GIST node that is the discovered next peer.\n   We describe a set of state\
    \ machines for these entities to illustrate\n   how GIST may be implemented.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [2].\n"
- title: 3.  Notational Conventions Used in State Diagrams
  contents:
  - "3.  Notational Conventions Used in State Diagrams\n   The following text is reused\
    \ from [3], and the state diagrams are\n   based on the conventions specified\
    \ in [4], Section 8.2.1.  Additional\n   state machine details are taken from\
    \ [5].\n   RFC 4137 [3] reproduced the following text from Section 8.2.1 of IEEE\n\
    \   802-1X-2004 [4].\n      State diagrams are used to represent the operation\
    \ of the protocol\n      by a number of cooperating state machines, each comprising\
    \ a group\n      of connected, mutually exclusive states.  Only one state of each\n\
    \      machine can be active at any given time.\n      . . .\n      All permissible\
    \ transitions between states are represented by\n      arrows, the arrowhead denoting\
    \ the direction of the possible\n      transition.  Labels attached to arrows\
    \ denote the condition(s)\n      that must be met in order for the transition\
    \ to take place.  All\n      conditions are expressions that evaluate to TRUE\
    \ or FALSE; if a\n      condition evaluates to TRUE, then the condition is met.\
    \  The label\n      UCT denotes an unconditional transition (i.e., UCT always\n\
    \      evaluates to TRUE).  A transition that is global in nature (i.e.,\n   \
    \   a transition that occurs from any of the possible states if the\n      condition\
    \ attached to the arrow is met) is denoted by an open\n      arrow; i.e., no specific\
    \ state is identified as the origin of the\n      transition.  When the condition\
    \ associated with a global\n      transition is met, it supersedes all other exit\
    \ conditions\n      including UCT.  The special global condition BEGIN supersedes\
    \ all\n      other global conditions, and once asserted it remains asserted\n\
    \      until all state blocks have executed to the point that variable\n     \
    \ assignments and other consequences of their execution remain\n      unchanged.\n\
    \      On entry to a state, the procedures defined for the state (if any)\n  \
    \    are executed exactly once, in the order that they appear on the\n      page.\
    \  Each action is deemed to be atomic; i.e., execution of a\n      procedure completes\
    \ before the next sequential procedure starts to\n      execute.  No procedures\
    \ execute outside a state block.  The\n      procedures in only one state block\
    \ execute at a time, even if the\n      conditions for execution of state blocks\
    \ in different state\n      machines are satisfied, and all procedures in an executing\
    \ state\n      block complete execution before the transition to and execution\
    \ of\n      any other state block occurs.  That is, the execution of any state\n\
    \      block appears to be atomic with respect to the execution of any\n     \
    \ other state block, and the transition condition to that state from\n      the\
    \ previous state is TRUE when execution commences.  The order of\n      execution\
    \ of state blocks in different state machines is undefined\n      except as constrained\
    \ by their transition conditions.  A variable\n      that is set to a particular\
    \ value in a state block retains this\n      value until a subsequent state block\
    \ executes a procedure that\n      modifies the value.\n      On completion of\
    \ all the procedures within a state, all exit\n      conditions for the state\
    \ (including all conditions associated with\n      global transitions) are evaluated\
    \ continuously until one of the\n      conditions is met.  The label ELSE denotes\
    \ a transition that\n      occurs if none of the other conditions for transitions\
    \ from the\n      state are met (i.e., ELSE evaluates to TRUE if all other possible\n\
    \      exit conditions from the state evaluate to FALSE).  Where two or\n    \
    \  more exit conditions with the same level of precedence become TRUE\n      simultaneously,\
    \ the choice as to which exit condition causes the\n      state transition to\
    \ take place is arbitrary.\n   In addition to the above notation, there are a\
    \ couple of\n   clarifications specific to this document.  First, all boolean\n\
    \   variables are initialized to FALSE before the state machine execution\n  \
    \ begins.  Second, the following notational shorthand is specific to\n   this\
    \ document:\n   <variable> = <expression1> | <expression2> | ...\n      Execution\
    \ of a statement of this form will result in <variable>\n      having a value\
    \ of exactly one of the expressions.  The logic for\n      which of those expressions\
    \ gets executed is outside of the state\n      machine and could be environmental,\
    \ configurable, or based on\n      another state machine such as that of the method.\n"
- title: 4.  State Machine Symbols
  contents:
  - "4.  State Machine Symbols\n   ( )\n      Used to force the precedence of operators\
    \ in boolean expressions\n      and to delimit the argument(s) of actions within\
    \ state boxes.\n   ;\n      Used as a terminating delimiter for actions within\
    \ state boxes.\n      Where a state box contains multiple actions, the order of\n\
    \      execution follows the normal English language conventions for\n      reading\
    \ text.\n   =\n      Assignment action.  The value of the expression to the right\
    \ of\n      the operator is assigned to the variable to the left of the\n    \
    \  operator.  Where this operator is used to define multiple\n      assignments,\
    \ e.g., a = b = X, the action causes the value of the\n      expression following\
    \ the right-most assignment operator to be\n      assigned to all of the variables\
    \ that appear to the left of the\n      right-most assignment operator.\n   !\n\
    \      Logical NOT operator.\n   &&\n      Logical AND operator.\n   ||\n    \
    \  Logical OR operator.\n   if...then...\n      Conditional action.  If the boolean\
    \ expression following the \"if\"\n      evaluates to TRUE, then the action following\
    \ the \"then\" is\n      executed.\n   { statement 1, ... statement N }\n    \
    \  Compound statement.  Braces are used to group statements that are\n      executed\
    \ together as if they were a single statement.\n   !=\n      Inequality.  Evaluates\
    \ to TRUE if the expression to the left of\n      the operator is not equal in\
    \ value to the expression to the right.\n   ==\n      Equality.  Evaluates to\
    \ TRUE if the expression to the left of the\n      operator is equal in value\
    \ to the expression to the right.\n   >\n      Greater than.  Evaluates to TRUE\
    \ if the value of the expression to\n      the left of the operator is greater\
    \ than the value of the\n      expression to the right.\n   <=\n      Less than\
    \ or equal to.  Evaluates to TRUE if the value of the\n      expression to the\
    \ left of the operator is either less than or\n      equal to the value of the\
    \ expression to the right.\n   ++\n      Increment the preceding integer operator\
    \ by 1.\n   +\n      Arithmetic addition operator.\n   &\n      Bitwise AND operator.\n"
- title: 5.  Common Rules
  contents:
  - "5.  Common Rules\n   Throughout the document we use terms defined in [1], such\
    \ as Query,\n   Response, and Confirm.\n   The state machine represents the handling\
    \ of GIST messages that match\n   a Message Routing State's Message Routing Information\
    \ (MRI), NSIS\n   Signaling Layer Protocol identifier (NSLPID), and session identifier\n\
    \   (SID) and with no protocol errors.  Separate parallel instances of\n   the\
    \ state machines should handle messages for different Message\n   Routing States\
    \ (MRSs).\n   The state machine represents the states and transitions of the\n\
    \   upstream and downstream peers of the Message Routing State.\n   For simplification,\
    \ not all objects included in a message are shown.\n   Only those that are significant\
    \ for the case are shown.  State\n   machines do not present handling of messages\
    \ that are not significant\n   for management of the states.\n   The state machines\
    \ presented in this document do not cover all\n   functions of a GIST node.  Functionality\
    \ of message forwarding,\n   transmission of NSLP data without MRS establishment,\
    \ and providing of\n   the received messages to the appropriate MRS, we refer\
    \ to as \"lower-\n   level pre-processing\" step.  Pre-processing provides to\
    \ the\n   appropriate MRS state machine only the messages that are matched\n \
    \  against waiting Query/Response cookies, or the triplet (MRI, NSLPID,\n   SID)\
    \ of the established MRS.  This is represented by \"rx_*\" events in\n   the state\
    \ machines.\n   Management of messaging associations (MAs) is considered in the\n\
    \   document via procedures, events, and variables, which describe MA\n   interaction\
    \ with the MRS state machines.  A state machine for MA\n   management is not explicitly\
    \ presented.\n"
- title: 5.1.  Common Procedures
  contents:
  - "5.1.  Common Procedures\n   Tx_Query:\n      Transmit of Query message.\n   Tx_Response:\n\
    \      Transmit of Response message.\n   Tx_Confirm:\n      Transmit of Confirm\
    \ message.\n   Tx_Data:\n      Transmit of Data message.\n   Tg_MessageStatus:\n\
    \      NSLP/GIST API message informing NSLP application of unsuccessful\n    \
    \  delivery of a message\n   Tg_RecvMsg:\n      NSLP/GIST API message that provides\
    \ received message to NSLP\n      application.\n   Tg_NetworkNotification:\n \
    \     NSLP/GIST API message that informs NSLP application of change in\n     \
    \ MRS.\n   Install downstream/upstream MRS:\n      Install new Message Routing\
    \ State and save the corresponding peer\n      state info (IP address and UDP\
    \ port, or pointer to the used MA)\n      for the current Message Routing State\
    \ or update the corresponding\n      peer state info.\n   Delete MRS:\n      Delete\
    \ installed downstream/upstream peer's info for the current\n      Message Routing\
    \ State, and delete the Message Routing State if\n      required.\n   Refresh\
    \ MRS:\n      Refreshes installed MRS.\n   Queue NSLP info:\n      Save NSLP messages\
    \ in a queue until conditions for their sending\n      are present, e.g., a required\
    \ MA association is established.\n   CheckPeerInfo:\n      The sender of the received\
    \ data message is matched against the\n      installed peer info in the MRS.\n\
    \   Delete MA:\n      Delete/disconnect used MA.\n   Stop using shared MA:\n \
    \     Stop using shared MA.  If the shared MA is no longer being used by\n   \
    \   any other MRSs, it depends on the local policy whether it is\n      deleted\
    \ or kept.\n   Tg_Establish_MA:\n      Triggers establishment of a new MA.\n \
    \  Start/Restart a timer variable (Section 5.3):\n      Start/Restart of a certain\
    \ timer.\n   Install/Update/Delete UpstreamPeerInfo variable (Section 5.3):\n\
    \      Management of upstream peer info in state machine of responding\n     \
    \ node.\n"
- title: 5.2.  Common Events
  contents:
  - "5.2.  Common Events\n   Rx_Query:\n      Receive of Query message.\n   Rx_Response:\n\
    \      Receive of Response message.\n   Rx_Confirm:\n      Receive of Confirm\
    \ message.\n   Rx_Data:\n      Receive of Data message.\n   Tg_SendMsg:\n    \
    \  NSLP/GIST API message from NSLP application that requests\n      transmission\
    \ of a NSLP message.\n   Tg_SetStateLifetime(time_period):\n      NSLP/GIST API\
    \ message providing info for the lifetime of a Routing\n      State (RS), required\
    \ by the application.  \"Time_period = 0\"\n      represents the cancellation\
    \ of established RSs/MAs, invoked by the\n      NSLP application.\n   Tg_InvalidRoutingState:\n\
    \      NSLP/GIST API notification from NSLP application for path change.\n   Tg_ERROR:\n\
    \      General Error event / system level error.\n   Tg_MA_Established:\n    \
    \  A new MA has been successfully established.\n   Tg_MA_Error:\n      Error event\
    \ with used MA.\n   Timeout a timer variable (Section 5.3):\n      Timeout of\
    \ a certain timer.\n"
- title: 5.3.  Common Variables
  contents:
  - "5.3.  Common Variables\n   Variables listed in this section are defined as:\n\
    \   -  Specific information carried in the received messages.\n   -  Conditions\
    \ that are results of processes not defined in the state\n      machine model.\n\
    \   State machine logic is based on these general conditions and message\n   parameters.\n\
    \   The type of mode and destination info is determined by NSLP\n   application\
    \ parameters and local GIST policy.  Here it is represented\n   by the common\
    \ variables D-mode, C-mode, and MAinfo.\n   C-mode:\n      The message MUST be\
    \ transmitted in C-mode.  This is specified by\n      \"Message transfer attributes\"\
    \ set by NSLP application to any of\n      the following values:\n      \"Reliability\"\
    \ is set to TRUE.\n      \"Security\" is set to values that request secure handling\
    \ of a\n      message.\n      \"Local processing\" is set to values that require\
    \ services offered\n      by C-mode (e.g., congestion control) [1].\n   D-mode:\n\
    \      The message MUST be transmitted in D-mode.  This is specified by\n    \
    \  local policy rules.  If the \"Message transfer attributes\" are not\n     \
    \ set by NSLP application to any of the following values, then:\n      \"Reliability\"\
    \ is set to TRUE.\n      \"Security\" is set to values that request special security\
    \ handling\n      of a message.\n      \"Local processing\" is set to values that\
    \ require services offered\n      by C-mode [1].\n   MAinfo:\n      GIST message\
    \ parameters describing the required MA or proposed MA,\n      e.g., \"Stack-proposal\"\
    \ and \"Stack-Configuration-Data\" [1].\n   NSLPdata:\n      NSLP application\
    \ data.\n   RespCookie:\n      Responder Cookie that is being sent by the responding\
    \ node with\n      the Response message in case that its local policy requires\
    \ a\n      confirmation from the querying node.\n   ConfirmRequired:\n      Indicator\
    \ that a Confirm message is required by the local policy\n      rule for installation\
    \ of a new MRS.\n   NewPeer:\n      Indicator that a Response message is received\
    \ from a new\n      responding peer.\n   MAexist:\n      Indicator that an existing\
    \ MA will be reused in data transfer\n      between peers.\n   UpstreamPeerInfo:\n\
    \      Upstream peer info that is saved in an established MRS.\n   T_Inactive_QNode:\n\
    \      Message Routing State lifetime timer in querying node.\n   T_Expired_RNode:\n\
    \      Message Routing State lifetime timer in responding node.\n   T_Refresh_QNode:\n\
    \      Message Routing State refresh timer in querying node.\n   T_No_Response:\n\
    \      Timer for the waiting period for Response message in querying\n      node.\n\
    \   T_No_Confirm:\n      Timer for the waiting period for Confirm message in responding\n\
    \      node.\n   No_MRS_Installed:\n      Data sent by responding node via a Response\
    \ message that indicates\n      loss of Confirm message.\n"
- title: 6.  State Machines
  contents:
  - "6.  State Machines\n   The following section presents the state machine diagrams\
    \ of GIST\n   peers.  RFC 5972 is published as a .txt file.  A supplementary .pdf\n\
    \   is being published as well.\n   In the .pdf document, the state machine diagrams\
    \ are depicted in\n   detail.  All state machine information (triggering event,\
    \ action\n   taken, and variable status) is represented in the diagrams.\n   In\
    \ the .txt document, state machine diagrams depict only transition\n   numbers.\
    \  Following each diagram is a list of state transition\n   descriptions.  Complete\
    \ transition details (triggering event, action\n   taken, and variable status)\
    \ are given in state transition tables in\n   Appendix A.\n   Please use the .pdf\
    \ version whenever possible.  It is the clearer\n   representation of the state\
    \ machine.  In case of a difference between\n   the two documents, please refer\
    \ to the .pdf version.\n"
- title: 6.1.  Diagram Notations
  contents:
  - "6.1.  Diagram Notations\n   +--------------------------------+\n   |        \
    \     STATE              |\n   +--------------+-----------------+\n          \
    \        |\n                  |\n                ooooo\n               o  N  o\
    \   Transition N\n                ooooo\n                  |\n               \
    \   v\n   +--------------------------------+\n   |             STATE         \
    \     |\n   +--------------------------------+\n                        Figure\
    \ 1: Diagram notations\n"
- title: 6.2.  State Machine for GIST Querying Node
  contents:
  - "6.2.  State Machine for GIST Querying Node\n   The state machine diagram of the\
    \ GIST querying node is below.\n   Transition descriptions follow.\n   Please\
    \ refer to Appendix A.1 for complete transition details\n   (triggering event,\
    \ action taken, and variable status).\n   +-----------+           ooooo\n   |\
    \ Any State +----------o  18 o\n   +-----------+           ooooo\n           \
    \                  |\n                             v\n   +-----------------------------------------------------------------+\n\
    \   |                             IDLE                                |\n   +--+--------------------------------------------------------------+\n\
    \      |        ^                                        ^        ^\n      | \
    \       |                                        |        |\n    ooooo    ooooo\
    \     ooooo      ooooo      ooooo      |        |\n   o  1  o  o  2  o  +o  3\
    \  o+  +o  4  o+  +o  5  o+    |        |\n    ooooo    ooooo   | ooooo |  | ooooo\
    \ |  | ooooo |    |        |\n      |        |     |       |  |       |  |   \
    \    |    |        |\n      v        |     |       v  |       v  |       v   \
    \ |        |\n   +-----------+-----+----------+----------+--------+   |      \
    \  |\n   |                 Wait Response                  |   |        |\n   +--+-------------------------------------+-------+\
    \   |        |\n      |       ^                             |           |    \
    \    |\n      |       |                             |           |        |\n \
    \   ooooo     |           ooooo           ooooo       ooooo      |\n   o  6  o\
    \    |         +o  5  o+        o  7  o     o  8  o     |\n    ooooo     |   \
    \      | ooooo |         ooooo       ooooo      |\n      |       |         | \
    \      |           |           |        |\n      |       |         |       v \
    \          v           |        |\n      |       |    +----+-------------------------------+---+\
    \    |\n      |       |    |         Wait MA Establishment          |    |\n \
    \     |       |    +------------------------------+---------+    |\n      |  \
    \     |          ^                        |              |\n      |       |  \
    \        |                        |              |\n      |     ooooo      ooooo\
    \        ooooo       ooooo          ooooo\n      |    o  9  o    o  11 o     +o\
    \  13 o+    o  12 o        o  10 o\n      |     ooooo      ooooo      | ooooo\
    \ |     ooooo          ooooo\n      |       |          |        |       |    \
    \   |              |\n      v       |          |        |       v       v    \
    \          |\n   +----------+----------+--------+------------------------------+---+\n\
    \   |                  Established Downstream MRS                     |\n   +--+-----------+-----------+-----------+-----------+--------------+\n\
    \      |       ^   |       ^   |       ^   |       ^   |       ^\n      |    \
    \   |   |       |   |       |   |       |   |       |\n      | ooooo |   | ooooo\
    \ |   | ooooo |   | ooooo |   | ooooo |\n      +o  16 o+   +o  14 o+   +o  15\
    \ o+   +o  4  o+   +o  17 o+\n        ooooo       ooooo       ooooo       ooooo\
    \       ooooo\n              Figure 2: State Machine for GIST Querying Node\n\
    \   1**) An initial request from the NSLP application is received, which\n   \
    \     triggers Query messages requesting either D-mode or C-mode.\n        Depending\
    \ on the node's local policy, the NSLP data might be\n        piggybacked in the\
    \ Query requesting D-mode.  The Query may carry\n        MAinfo if C-mode transport\
    \ is needed.\n   2)   T_No_Response timer expires, and the maximum number of retries\n\
    \        has been reached.  The NSLP application is notified of the GIST\n   \
    \     peer discovery failure.\n   3)   T_No_Response timer expires.  The Query\
    \ is resent.\n   4)   A Data message is received.  It is checked to see whether\
    \ its\n        sender matches the installed downstream peer info in the MRS; if\n\
    \        so, it is processed.  In WaitResponse state, this event might\n     \
    \   happen in the process of an MA upgrade, when the downstream peer\n       \
    \ is still not aware of establishment of the new MA.\n   5)   The NSLP application\
    \ provides data for sending.  NSLP data is\n        queued because the downstream\
    \ peer is not discovered or the\n        required MA is still not established.\n\
    \   6)   A Response message is received.  If a D-mode connection is\n        requested\
    \ or the available MA can be reused for the requested\n        C-mode, the MRS\
    \ is established.\n   7*)  Response message is received.  If a C-mode connection\
    \ must be\n        established, and there is no available MA to be reused, MA\n\
    \        establishment is initiated and the system waits for it to be\n      \
    \  completed.\n   8)   MA establishment fails.  NSLP application is notified for\n\
    \        unsuccessful message delivery.\n   9)   The NSLP application provides\
    \ data for sending, and the\n        requested transport parameters require an\
    \ upgrade of the\n        established MRS from D-mode/C-mode to C-mode.  Or, the\
    \ NSLP\n        application notifies the GIST instance of the path change.  As\
    \ a\n        result, downstream GIST peer discovery is initiated.\n   10)  The\
    \ MRS lifetime expires or the NSLP application notifies that\n        the MRS\
    \ is no longer needed.  The MRS is deleted.  If not\n        needed, the MA is\
    \ deleted, too.  The NSLP application is\n        notified of the MRS change.\n\
    \   11*) The path change is detected as a Response message from a new\n      \
    \  downstream GIST peer is received.  A new MA must be established\n        for\
    \ the requested C-mode.\n   12*) A new MA is established.  The MRS is installed.\
    \  The queued NSLP\n        data is sent.\n   13)  T_Refresh_QNode timer expires.\
    \  The Query message is sent.\n   14)  The NSLP application provides data for\
    \ sending.  It is sent via\n        Data message towards the downstream GIST peer.\n\
    \   15)  The Response message from the downstream GIST peer is received.\n   \
    \     The peer is not changed.  The MRS is refreshed (T_Refresh_QNode\n      \
    \  timer is restarted).\n   16)  The path change is detected as a Response message\
    \ from a new\n        downstream GIST peer is received.  D-mode is requested,\
    \ or the\n        existing MA can be reused for the requested C-mode.\n   17)\
    \  The responding peer indicates that it has not received a Confirm\n        message\
    \ and it has no established upstream MRS.  The Confirm\n        message is resent.\n\
    \   18)  A general error or system-level error occurs.  The MRS is\n        deleted.\
    \  If not needed, the MA is deleted, too.  The NSLP\n        application is notified\
    \ of the MRS change.\n   Remarks:\n   *)  Response and Confirm messages might\
    \ be sent either in D-mode or\n       C-mode, before or after MA establishment,\
    \ depending on the node's\n       local three-way handshake policy and the availability\
    \ of the MAs\n       to be reused.  See [1] for details.\n   **) Depending on\
    \ GIST local policy, NSLPdata might be sent as the\n       payload of Query and\
    \ Confirm messages (piggybacking).\n"
- title: 6.3.  State Machine for GIST Responding Node
  contents:
  - "6.3.  State Machine for GIST Responding Node\n   The GIST responding node state\
    \ machine diagram is below.  Transition\n   descriptions follow.\n   Please refer\
    \ to Appendix A.2 for complete transition details\n   (triggering event, action\
    \ taken, and variable status).\n   +-----------+           ooooo\n   | Any State\
    \ +----------o  14 o\n   +-----------+           ooooo\n                     \
    \        |\n                             v\n   +-----------------------------------------------------------------+\n\
    \   |                             IDLE                                |\n   +--+-------------------------------+------------------------------+\n\
    \      |                 ^             |                          ^\n      | \
    \                |             |                          |\n    ooooo       \
    \        |           ooooo          ooooo       ooooo\n   o  1  o            \
    \  |          o  2  o       +o  4  o+    o  3  o\n    ooooo               |  \
    \         ooooo        | ooooo |     ooooo\n      |                 |        \
    \     |          |       |       |\n      |                 |             v  \
    \        |       v       |\n      |                 |   +--------------------+---------------+---+\n\
    \      |                 |   |             Wait Confirm               |\n    \
    \  |                 |   +---------+------------------+-----------+\n      | \
    \                |             |          ^       |       ^\n      |         \
    \        |             |          |       |       |\n      |     ooooo     ooooo\
    \         ooooo      ooooo     | ooooo |\n      |   +o  13 o+  o  8  o       o\
    \  5  o    o  7  o    +o  6  o+\n      |   | ooooo |   ooooo         ooooo   \
    \   ooooo       ooooo\n      |   |       |     |             |          |\n  \
    \    v   |       v     |             v          |\n    +------+-------------+------------------------+-------------------+\n\
    \    |                  Established Upstream MRS                       |\n   \
    \ +------+-------------+-------------+------------+-----------------+\n      \
    \     |       ^     |       ^     |       ^     |       ^\n           |      \
    \ |     |       |     |       |     |       |\n           | ooooo |     | ooooo\
    \ |     | ooooo |     | ooooo |\n           +o  9  o+     +o  11 o+     +o  12\
    \ o+     +o  10 o+\n             ooooo         ooooo         ooooo         ooooo\n\
    \             Figure 3: State Machine for GIST Responding Node\n   1) A Query\
    \ message is received.  The MRS is installed immediately\n      because local\
    \ policy permits it.  The Query message might carry\n      piggybacked NSLP data\
    \ that will be provided to the NSLP\n      application.\n   2) A Query message\
    \ is received.  Local policy requires an explicit\n      Confirm message for MRS\
    \ installation.  The Query message might\n      carry piggybacked NSLP data that\
    \ will be provided to the NSLP\n      application.\n   3) T_No_Confirm timer expires.\
    \  Note that all cases of lost handshake\n      GIST messages are handled only\
    \ by the GIST querying node via\n      resend of the Query message.\n   4) A Query\
    \ message is received again.  This means that the sent\n      Response message\
    \ has not been received by the upstream GIST peer.\n      The Response message\
    \ is resent.\n   5) A Confirm message is received that causes installation of\
    \ the\n      upstream MRS.\n   6) In case of a lost Confirm message, data messages\
    \ might be received\n      from the upstream GIST node (it is unaware of the lost\
    \ Confirm\n      message).  A Response message indicating the loss of the Confirm\n\
    \      is sent back to the upstream GIST node.\n   7) A Query message is received\
    \ (from either an existing upstream GIST\n      node or a new upstream GIST node)\
    \ with a request to change the\n      used GIST operation mode (from D-mode/C-mode\
    \ to C-mode, if\n      available; otherwise, it stays the same).  Local policy\
    \ requires\n      an explicit Confirm message for MRS installation.\n   8) The\
    \ MRS lifetime expires or the NSLP application notifies that the\n      MRS is\
    \ no longer needed.  The MRS is deleted.  If used and not\n      needed, the MA\
    \ is deleted, too.  The NSLP application is notified\n      of the MRS change.\n\
    \   9) The NSLP application provides data for sending.  NSLP data is sent\n  \
    \    if the discovery process is successfully accomplished, or it is\n      queued\
    \ if a Confirm message is still expected to confirm\n      establishment of an\
    \ MA.\n   10) A Query message is received.  If it is sent from a new upstream\n\
    \       GIST node, then there is a path change.  Local policy does not\n     \
    \  need an explicit Confirm message for MRS installation.  The MRS\n       data\
    \ is updated.\n   11) A Query message is received with a request to change the\
    \ used\n       GIST operation mode (from D-mode/C-mode to C-mode, if available;\n\
    \       otherwise, it stays the same).  Local policy does not need an\n      \
    \ explicit Confirm message for MRS installation.  The MRS data is\n       updated.\n\
    \   12) A Data message is received.  Data messages are accepted only if\n    \
    \   the complete MRS is installed, e.g., the upstream peer info is\n       installed.\
    \  If not, then a Confirm message is expected and the\n       Data message is\
    \ not accepted.  A Response message indicating the\n       loss of the Confirm\
    \ is sent back to the upstream GIST node.\n   13) A Confirm message is received.\
    \  It accomplishes assignment of an\n       existing MA (or establishment of a\
    \ new MA) needed for data\n       transfer between peers.  The information for\
    \ the used MA is\n       installed as the upstream peer info.\n   14) A general\
    \ error or system-level error occurs.  The MRS is\n       deleted.  If not needed,\
    \ the MA is deleted, too.  The NSLP\n       application is notified of the MRS\
    \ change.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document does not raise new security considerations.\
    \  Security\n   considerations are addressed in the GIST specification [1] and\
    \ in\n   [6].\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Christian Dickmann who\
    \ contributed to\n   refining of the state machine.\n   The authors would like\
    \ to thank Robert Hancock, Ingo Juchem, Andreas\n   Westermaier, Alexander Zrim,\
    \ Julien Abeille Youssef Abidi, and Bernd\n   Schloer for their insightful comments.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]  Schulzrinne, H. and R. Hancock, \"GIST: General\
    \ Internet\n        Signalling Transport\", RFC 5971, October 2010.\n   [2]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [3]  Vollbrecht, J., Eronen, P., Petroni, N.,\
    \ and Y. Ohba, \"State\n        Machines for Extensible Authentication Protocol\
    \ (EAP) Peer and\n        Authenticator\", RFC 4137, August 2005.\n   [4]  Institute\
    \ of Electrical and Electronics Engineers, \"Standard for\n        Local and Metropolitan\
    \ Area Networks: Port-Based Network Access\n        Control\", IEEE 802-1X-2004,\
    \ December 2004.\n   [5]  Fajardo, V., Ed., Ohba, Y., and R. Marin-Lopez, \"State\
    \ Machines\n        for the Protocol for Carrying Authentication for Network Access\n\
    \        (PANA)\", RFC 5609, August 2009.\n   [6]  Tschofenig, H. and D. Kroeselberg,\
    \ \"Security Threats for Next\n        Steps in Signaling (NSIS)\", RFC 4081,\
    \ June 2005.\n"
- title: Appendix A.  State Transition Tables
  contents:
  - "Appendix A.  State Transition Tables\n   The state transition tables below represent\
    \ the state diagrams in\n   ASCII format.  Please use the .pdf version whenever\
    \ possible.  It is\n   the clearer representation of the state machine.\n   For\
    \ each state there is a separate table that lists in each row:\n   - an event\
    \ that triggers a transition,\n   - actions taken as a result of the incoming\
    \ event,\n   - and the new state at which the transitions ends.\n"
- title: A.1.  State Transition Tables for GIST Querying Node
  contents:
  - "A.1.  State Transition Tables for GIST Querying Node\n   Please refer to the\
    \ state machine diagram in Figure 2.\n   -----------\n   State: IDLE\n   -----------\n\
    \   +Transition\n   |  |Condition               |Action                   |State\n\
    \   V--+------------------------+-------------------------+-----------\n   1)\
    \ |tg_SendMsg              |tx_Query                 |Wait\n   ** |          \
    \              |start T_No_Response      |Response\n      |                  \
    \      |Queue NSLP data          |\n      |                        |         \
    \                |\n   18)|Tg_ERROR                |Delete MRS               |IDLE\n\
    \      |                        |IF (MA is used)          |\n      |         \
    \               |  ((Delete MA)||         |\n      |                        |\
    \  (Stop using shared MA))|\n      |                        |Tg_NetworkNotification\
    \   |\n      |                        |                         |\n   ---+------------------------+-------------------------+-----------\n\
    \   -----------\n   State: WaitResponse\n   -----------\n   +Transition\n   |\
    \  |Condition               |Action                   |State\n   V--+------------------------+-------------------------+-----------\n\
    \   2) |(timeout T_No_Response) |tg_MessageStatus         |IDLE\n      |&&(MaxRetry)\
    \            |                         |\n      |                        |   \
    \                      |\n   3) |(timeout T_No_Response) |Tx_Query           \
    \      |Wait\n      |&&(!MaxRetry)           |restart T_No_Response    |Response\n\
    \      |                        |                         |\n   4) |rx_Data  \
    \               |IF(CheckPeerInfo)        |Wait\n      |                     \
    \   |      tg_RecvMsg to Appl.|Response\n      |                        |    \
    \                     |\n   5) |tg_SendMsg              |Queue NSLP data     \
    \     |Wait\n      |                        |                         |Response\n\
    \      |                        |                         |\n   6) |rx_Response)||\
    \          |Install MRS              |Established\n      |(rx_Response(MAinfo)&&\
    \  |IF (RespCookie)          |Downstream\n      |(MAexist))              |   tx_Confirm(RespCookie)|MRS\n\
    \      |                        |tx_Data(Queued NSLP data)|\n      |         \
    \               |                         |\n   7) |rx_Response(MAinfo)&&   |tg_Establish_MA\
    \          |Wait MA\n   *  |(!MAexist)              |(tx_Confirm)            \
    \ |Establish.\n      |                        |                         |\n  \
    \    |                        |                         |\n   18)|Tg_ERROR   \
    \             |(Delete MRS)             |IDLE\n      |                       \
    \ |IF (MA is used)          |\n      |                        |  ((Delete MA)||\
    \         |\n      |                        |  (Stop using shared MA))|\n    \
    \  |                        |Tg_NetworkNotification   |\n      |             \
    \           |                         |\n   ---+------------------------+-------------------------+-----------\n\
    \   -----------\n   State: Established Downstream MRS\n   -----------\n   +Transition\n\
    \   |  |Condition               |Action                   |State\n   V--+------------------------+-------------------------+-----------\n\
    \   4) |rx_Data                 |IF(CheckPeerInfo)        |Established\n     \
    \ |                        |      tg_RecvMsg to Appl.|Downstream\n      |    \
    \                    |                         |MRS\n      |                 \
    \       |                         |\n   9) |((tg_SendMsg)&&(C-mode) |tx_Query\
    \                 |Wait\n      |&&(!MAexist))||         |Queue NSLP data     \
    \     |Response\n      |(tg_MA_error)||         |                         |\n\
    \      |(tg_InvalidRoutingState)|                         |\n      |         \
    \               |                         |\n   10)|(timeout T_Inactive_    |Delete\
    \ MRS               |IDLE\n      |                QNode)|||IF (MA is used)   \
    \       |\n      |(tg_SetStateLifetime(0))|   (Delete MA)||         |\n      |\
    \                        |   (Stop using shared MA)|\n      |                \
    \        |Tg_NetworkNotification   |\n      |                        |       \
    \                  |\n   11)|(rx_Response(MAinfo)&&  |((Delete MA)||         \
    \  |Wait MA\n   *  |(NewPeer)&&(!MA_exist)) |(Stop using shared MA))  |Establish.\n\
    \      |                        |tg_Establish_MA          |\n      |         \
    \               |(tx_Confirm)             |\n      |                        |\
    \                         |\n   13)|timeout T_Refresh_QNode |tx_Query        \
    \         |Established\n      |                        |                     \
    \    |Downstream\n      |                        |                         |MRS\n\
    \      |                        |                         |\n   14)|tg_SendMsg\
    \              |tx_Data                  |Established\n      |               \
    \         |restart T_Inactive_QNode |Downstream\n      |                     \
    \   |                         |MRS\n      |                        |         \
    \                |\n   15)|(rx_Response)&&         |Refresh MRS              |Established\n\
    \      |(!NewPeer)              |restart T_Inactive_QNode |Downstream\n     |\
    \                        |                         |MRS\n      |             \
    \           |                         |\n   16)|(rx_Response)||         |IF (MA\
    \ is used)          |Established\n      |(rx_Response(Mainfo)&&  |   (Delete MA)||\
    \         |Downstream\n      |(MAexist)))&&(NewPeer)  |   (Stop using shared MA)|MRS\n\
    \      |                        |Install MRS              |\n      |         \
    \               |restart T_Inactive_QNode |\n      |                        |IF\
    \ (RespCookie)          |\n      |                        |   tx_Confirm(RespCookie)|\n\
    \      |                        |                         |\n   17)|rx_Response(No_MRS_\
    \     |tx_Confirm(RespCookie)   |Established\n      |              installed)|tx_Data(Queued\
    \ NSLP data)|Downstream\n      |                        |                    \
    \     |MRS\n      |                        |                         |\n   18)|Tg_ERROR\
    \                |(Delete MRS)             |IDLE\n      |                    \
    \    |IF (MA is used)          |\n      |                        |  ((Delete MA)||\
    \         |\n      |                        |  (Stop using shared MA))|\n    \
    \  |                        |Tg_NetworkNotification   |\n      |             \
    \           |                         |\n   ---+------------------------+-------------------------+-----------\n\
    \   -----------\n   State: Wait MA Establishment\n   -----------\n   +Transition\n\
    \   |  |Condition               |Action                   |State\n   V--+------------------------+-------------------------+-----------\n\
    \   5) |tg_SendMsg              |Queue NSLP data          |Wait MA\n      |  \
    \                      |                         |Establish.\n      |        \
    \                |                         |\n   8) |tg_MA_error             |Delete\
    \ MRS               |IDLE\n      |                        |tg_MessageStatus  \
    \       |\n      |                        |                         |\n   12)|tg_MA_Established\
    \       |Install MRS              |Established\n   *  |                      \
    \  |(tx_Confirm)             |Downstream\n      |                        |tx_Data(Queued\
    \ NSLP data)|MRS\n      |                        |                         |\n\
    \   18)|Tg_ERROR                |Delete MRS               |IDLE\n      |     \
    \                   |IF (MA is used)          |\n      |                     \
    \   |  ((Delete MA)||         |\n      |                        |  (Stop using\
    \ shared MA))|\n      |                        |Tg_NetworkNotification   |\n \
    \     |                        |                         |\n   ---+------------------------+-------------------------+-----------\n"
- title: A.2.  State Transition Tables for GIST Responding Node
  contents:
  - "A.2.  State Transition Tables for GIST Responding Node\n   Please refer to the\
    \ state machine diagram in Figure 3.\n   -----------\n   State: IDLE\n   -----------\n\
    \   +Transition\n   |  |Condition               |Action                   |State\n\
    \   v--+------------------------+-------------------------+-----------\n   1)\
    \ |rx_Query&&              |tx_Response              |Established\n      |(!ConfirmRequired)\
    \      |Install MRS              |Upstream\n      |                        |IF(NSLPdata)\
    \             |MRS\n      |                        |     tg_RecvMsg(NSLPdata)|\n\
    \      |                        |                 to Appl.|\n      |         \
    \               |                         |\n   2) |rx_Query&&              |tx_Response\
    \              |Wait\n      |(ConfirmRequired)       |start T_No_Confirm     \
    \  |Confirm\n      |                        |IF(NSLPdata)             |\n    \
    \  |                        |     tg_RecvMsg(NSLPdata)|\n      |             \
    \           |                 to Appl.|\n      |                        |    \
    \                     |\n   ---+------------------------+-------------------------+-----------\n\
    \   -----------\n   State: WAIT CONFIRM\n   -----------\n   +Transition\n   |\
    \  |Condition               |Action                   |State\n   v--+------------------------+-------------------------+-----------\n\
    \   3) |timeout T_No_Confirm    |                         |IDLE\n      |     \
    \                   |                         |\n   4) |rx_Query&&           \
    \   |tx_Response              |Wait\n      |(ConfirmRequired)       |start T_No_Confirm\
    \       |Confirm\n      |                        |IF(NSLPdata)             |\n\
    \      |                        |     tg_RecvMsg(NSLPdata)|\n      |         \
    \               |                 to Appl.|\n      |                        |\
    \                         |\n   5) |rx_Confirm              |Install Upstream\
    \ MRS     |Established\n      |                        |                     \
    \    |Upstream\n      |                        |                         |MRS\n\
    \      |                        |                         |\n   6) |rx_Data  \
    \               |tx_Response(No_MRS_      |Wait\n      |                     \
    \   |               installed)|Confirm\n      |                        |     \
    \                    |\n   14)|(Tg_ERROR)||            |(Delete MRS)         \
    \    |IDLE\n      |(Tg_MA_Error)           |IF (MA is used)          |\n     \
    \ |                        |  ((Delete MA)||         |\n      |              \
    \          |  (Stop using shared MA))|\n      |                        |Tg_NetworkNotification\
    \   |\n      |                        |                         |\n   ---+------------------------+-------------------------+-----------\n\
    \   -----------\n   State: Established Upstream MRS\n   -----------\n   +Transition\n\
    \   |  |Condition               |Action                   |State\n   v--+------------------------+-------------------------+-----------\n\
    \   7) |(rx_Query)&&            |Delete MRS               |Wait\n      |(ConfirmRequired)\
    \       |tx_Response              |Confirm\n      |                        |start\
    \ T_No_Confirm       |\n      |                        |IF(MA is used)       \
    \    |\n      |                        |   (Delete MA)||         |\n      |  \
    \                      |   (Stop using shared MA)|\n      |                  \
    \      |IF(NSLPdata)             |\n      |                        |   tg_RecvMsg(NSLPdata)\
    \  |\n      |                        |                 to Appl.|\n      |    \
    \                    |                         |\n   8) |(timeout T_Expire_RNode)|Delete\
    \ MRS               |IDLE\n      |||                      |tg_NetworkNotification\
    \   |\n      |(tg_SetStateLifetime(0))|IF(MA is used)           |\n      |   \
    \                     |   (Delete MA)||         |\n      |                   \
    \     |   (Stop using shared MA)|\n      |                        |          \
    \               |\n   9) |tg_SendMsg              |IF(!UpstreamPeerInfo)    |Established\n\
    \      |                        |    Queue NSLP data      |Upstream\n      | \
    \                       |ELSE tx_Data             |MRS\n      |              \
    \          |                         |\n   10)|rx_Query                |IF (NewPeer)\
    \             |Established\n      |                        |  Update UpstreamPeerInfo|Upstream\n\
    \      |                        |tx_Response              |MRS\n      |      \
    \                  |restart T_Expire_RNode   |\n      |                      \
    \  |                         |\n   11)|rx_Query(MAinfo)&&      |Delete UpstreamPeerInfo\
    \  |Established\n      |(!ConfirmRequired)      |restart T_Expire_RNode   |Upstream\n\
    \      |                        |tx_Response(MAinfo)      |MRS\n      |      \
    \                  |                         |\n   12)|rx_Data               \
    \  |IF(UpstreamPeerInfo)     |Established\n      |                        |  \
    \  (tg_RecvMsg to Appl.)|Upstream\n      |                        |    &&(restart_T_Expire_\
    \ |MRS\n      |                        |                   RNode)|\n      |  \
    \                      |ELSE                     |\n      |                  \
    \      |    tx_Error(No_MRS_     |\n      |                        |         \
    \      installed)|\n      |                        |                         |\n\
    \   13)|rx_Confirm              |Install UpstreamPeerInfo |Established\n     \
    \ |                        |tx_Data(queued_NSLP_data)|Upstream\n      |      \
    \                  |                         |MRS\n      |                   \
    \     |                         |\n   14)|(Tg_ERROR)||            |(Delete MRS)\
    \             |IDLE\n      |(Tg_MA_Error)           |IF (MA is used)         \
    \ |\n      |                        |  ((Delete MA)||         |\n      |     \
    \                   |  (Stop using shared MA))|\n      |                     \
    \   |Tg_NetworkNotification   |\n      |                        |            \
    \             |\n   ---+------------------------+-------------------------+-----------\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tseno Tsenov\n   Sofia, Bulgaria\n   EMail: tseno.tsenov@mytum.de\n\
    \   Hannes Tschofenig\n   Nokia Siemens Networks\n   Linnoitustie 6\n   Espoo\
    \  02600\n   Finland\n   EMail: Hannes.Tschofenig@nsn.com\n   Xiaoming Fu (editor)\n\
    \   University of Goettingen\n   Computer Networks Group\n   Goldschmidtstr. 7\n\
    \   Goettingen 37077\n   Germany\n   EMail: fu@cs.uni-goettingen.de\n   Cedric\
    \ Aoun\n   Consultant\n   Paris, France\n   EMail: cedaoun@yahoo.fr\n   Elwyn\
    \ B. Davies\n   Folly Consulting\n   Soham, Cambs, UK\n   Phone: +44 7889 488\
    \ 335\n   EMail: elwynd@dial.pipex.com\n"
