Login Security Extension for the Extensible Provisioning Protocol (EPP)
Abstract The Extensible Provisioning Protocol (EPP) includes a client authentication scheme that is based on a user identifier and password.
The structure of the password field is defined by an XML Schema data type that specifies minimum and maximum password length values, but there are no other provisions for password management other than changing the password.
This document describes an EPP extension that allows longer passwords to be created and adds additional security features to the EPP login command and response.
This document describes an Extensible Provisioning Protocol (EPP) extension for enhancing the security of the EPP login command in EPP [RFC5730].
EPP [RFC5730] includes a maximum password length of 16 characters, which inhibits implementing stronger password security policies with higher entropy.
The enhancements include supporting longer passwords (or passphrases) than the 16 character maximum and providing a list of security events in the login response.
The password (current and new) in EPP [RFC5730] can be overridden by the password included in the extension to extend past the 16 character maximum.
The security events supported include password expiry, client certificate expiry, insecure cipher, insecure TLS protocol, new password complexity, login security statistical warning, and a custom event.
The attributes supported by the security events include an identified event type or a subtype, an indicated security level of warning or error, a future or past due expiration date, the value that resulted in the event, the duration of the statistical event, and a free form description with an optional language.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented in order to develop a conforming implementation.
In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
In examples, indentation and whitespace are provided only to illustrate element relationships and are not a required feature of this protocol.
loginSec 1.0" is used as an abbreviation for "urn:ietf:params:xml:
The XML namespace prefix "loginSec" is used, but implementations MUST NOT depend on it.
Instead, they are to employ a proper namespace aware XML parser and serializer to interpret and output the XML documents.
"whitespace" is defined by the XML Schema whiteSpace data type in [W3C.REC xmlschema 2 20041028], which only includes the ASCII whitespace characters #x9 (tab), #xA (linefeed), #xD (carriage return), and #x20 (space).
Migrating to Newer Versions of This Extension Servers that implement this extension SHOULD provide a way for clients to progressively update their implementations when a new version of the extension is deployed.
A newer version of the extension is expected to use an XML namespace with a higher version number than the prior versions.
Servers SHOULD (for a temporary migration period up to server policy) provide support for older versions of the extension in parallel to the newest version and allow clients to select their preferred version via the <svcExtension> element of the <login> command.
If a client requests multiple versions of the extension at login, then, when preparing responses to commands that do not include extension elements, the server SHOULD only include extension elements in the namespace of the newest version of the extension requested by the client.
When preparing responses to commands that do include extension elements, the server SHOULD only include extension elements for the extension versions present in the command.
This extension adds additional elements to [RFC5730] login command and response.
Only those new elements are described here.
A security event using the <loginSec:event> element represents either a warning or error identified by the server after the client has connected and submitted the login command.
event> element is contained in a list of one or more elements in the <loginSec:loginSecData> element, so there MAY be multiple events returned that provide information for the client to address.
MAY include a free form description.
All of the security events use a consistent set of attributes, where the exact set of applicable attributes is based on the event type.
The supported set of <loginSec:event> element attributes include: "type":  A REQUIRED attribute that defines the type of security event.
The enumerated list of "type" values includes: "password":  Identifies a password expiry event where the password expires in the future or has expired based on the "exDate" date and time.
The "exDate" attribute MUST be set with the password expiry date and time.
"certificate":  Identifies a client certificate expiry event where the client certificate will expire at the "exDate" date and time.
The "exDate" attribute MUST be set with the certificate expiry date and time.
"cipher":  Identifies the use of an insecure or deprecated TLS cipher suite.
The "name" attribute MUST be set with the name of the cipher suite, which is free form and is not expected to be parsed and automatically addressed by the client.
An example of cipher suite names can be found in the TLS Cipher Suites of the "Transport Layer Security (TLS) Parameters" registry (https://www.iana.org/assignments/tls parameters/ tls parameters.xhtml#tls parameters 4).
"tlsProtocol":  Identifies the use of an insecure or deprecated TLS protocol.
The "name" attribute MUST be set with the name of the TLS protocol, which is free form and is not expected to be parsed and automatically addressed by the client. "
newPW":  The new password does not meet the server password complexity requirements.
"stat":  Provides a login security statistical warning that MUST set the "name" attribute to the name of the statistic subtype. "custom":  Custom event type that MUST set the "name" attribute with the custom event type name.
"name":  Used to define a subtype when the "type" attribute is not "custom" or the full type name when the "type" attribute is "custom".
The "name" attribute MUST be set when the "type" attribute is "stat" or "custom".
The possible set of "name" values, by event type, can be discovered/negotiated out of band to EPP or using a separate EPP extension designed to provide server policy information to the client.
"level":  Defines the level of the event as either "warning" for a warning event that needs action or "error" for an error event that requires immediate action. "
exDate":  Contains the date and time that a "warning" level has or will become an "error" level.
At expiry, there MAY be a connection failure or MAY be a login failure.
An example is an expired certification that will result in a connection failure or an expired password that may result in a login failure.
"value":  Identifies the value that resulted in the login security event.
An example is the negotiated insecure cipher suite or the negotiated insecure TLS protocol.
"duration":  Defines the duration that a statistical event is associated with, ending when the login command was received.
The format of the duration is defined by the duration primitive data type in Section 3.2.6 of [W3C.REC xmlschema 2 20041028].
"lang":  Identifies the negotiated language of the free form description.
The format of the language is defined by the language primitive data type in Section 3.3.3 of [W3C.REC xmlschema 2 20041028].
The default is "en" (English).
Example login security event for password expiration, where the current date is 2020 03 25:
<loginSec:event type "password" level "warning" exDate "2020
en"> Password expiration soon </loginSec:
event> Example login security event for identifying 100 failed logins over the last day, using the "stat" subtype of "failedLogins":
event type "stat" name "failedLogins" level "warning" value "100" duration "P1D"> Excessive invalid daily logins </loginSec:event> 3.2.
When the [RFC5730] <pw> element contains the predefined value of "[LOGIN SECURITY]", the <loginSec:pw> element overrides the <pw> element, which is a constant value for the server to use the <loginSec:pw> element for the password.
Similarly, when the [RFC5730] <newPw> element contains the predefined value of "[LOGIN  SECURITY]", the <loginSec:newPw> element overrides the <newPw> element, which is a constant value for the server to use the <loginSec:newPW
> element for the new password.
The "[LOGIN  SECURITY]" predefined string MUST be supported by the server for the client to explicitly indicate to the server whether to use <loginSec:pw> element in place of the [RFC5730] <pw> element or to use the <loginSec:
> in place of the [RFC5730] <newPW> element.
The server MUST NOT allow the client to set the password to the value "[LOGIN SECURITY]".
3.3.  Dates and Times Date and time attribute values MUST be represented in Universal Coordinated Time (UTC) using the Gregorian calendar.
The extended date time form using upper case "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
A detailed description of the EPP syntax and semantics can be found in the EPP core protocol specification [RFC5730].
This extension defines additional elements to extend the EPP <login> command and response to be used in conjunction with [RFC5730].
The EPP <login> command is used to establish a session with an EPP server.
This extension overrides the password that is passed with the [RFC5730] <pw> or the <
newPW> element, as defined in Section 3.2.
> element is sent along with the [RFC5730] <login> command and MUST contain at least one of the following child elements: <loginSec:userAgent>:  OPTIONAL client user agent information that identifies the client application software, technology, and operating system used by the server to identify functional or security constraints, current security issues, and potential future functional or security issues for the client.
The server may use the information for real time identification and client notification of security issues, such as keying off of the client application software for executing security rule checks.
The server may capture the information to identify future security policy issues, such as deprecating or removing TLS cipher suites or TLS protocols.
userAgent> element MUST contain at least one of the following child elements: <loginSec:app
OPTIONAL name of the client application software with version if available, such as the name of the client SDK "EPP SDK 1.0.0".
The <loginSec:app> element value can be created by appending the version number to the name of the application software, such as the Augmented Backus Naur Form
(ABNF) grammar [RFC5234] format: app   name SP version name   1 VCHAR version   1
OPTIONAL technology used for the client software with version if available, such as "Vendor Java 11.0.6".
element value can be created by including the technology vendor, technology name, and technology version, such as the Augmented Backus Naur Form
SP version vendor   1 VCHAR name   1 VCHAR version
OPTIONAL client operating system used with version if available, such as "x86 64 Mac OS X 10.15.2".
The <loginSec:os> element value can be created by including the operating system architecture, operating system name, and operating system version, such as the Augmented Backus Naur Form
1 VCHAR name   1 VCHAR version
pw>:  OPTIONAL plain text password that is case sensitive, has a minimum length of 6 characters, and has a maximum length that is up to server policy.
All leading and trailing whitespace is removed, and all internal contiguous whitespace that includes #x9 (tab), #xA (linefeed), #xD (carriage return), and #x20 (space) is replaced with a single #x20 (space).
This element MUST only be set if the [RFC5730] <pw> element is set to the "[LOGIN SECURITY]" value.
<loginSec:newPW>:  OPTIONAL plain text new password that is case sensitive, has a minimum length of 6 characters, and has a maximum length that is up to server policy.
All leading and trailing whitespace is removed, and all internal contiguous whitespace that includes #x9 (tab), #xA (linefeed), #xD (carriage return), and #x20 (space) is replaced with a single #x20 (space).
This element MUST only be set if the [RFC5730] <newPW> element is set to the "[LOGIN SECURITY]" value.
It is RECOMMENDED that the plain text password in the <loginSec:pw> and <loginSec:
newPw> elements use printable ASCII characters #x20 (space)
If non ASCII characters are supported with the plain text password, then use a standard for passwords with international characters; the OpaqueString PRECIS profile in [RFC8265] is recommended in the absence of other considerations.
Example login command that uses the <loginSec:
pw> element instead of the <pw> element ([RFC5730]) to establish the session and includes the <loginSec:
userAgent> element: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
this is a long password</loginSec:
Example login command that uses the <loginSec:
pw> element instead of the <pw> element ([RFC5730]) to establish the session and that uses the <loginSec:newPW
> element instead of the <newPW> element ([RFC5730]) to set the new password: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Example login command that uses the <pw> element ([RFC5730]) to establish the session and that uses the <loginSec:newPW
> element instead of the <newPW> element ([RFC5730]) to set the new password: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Upon a completed login command (success or failed), the extension MUST be included in the response when both of the following conditions hold: Client supports extension:
The client supports the extension based on the <svcExtension> element of the <login> command.
At least one login security event:
The server has identified at least one login security event to communicate to the client.
The extension to the EPP response uses the <loginSec:loginSecData
> element that contains the following child elements:
One or more <loginSec:event> elements defined in Section 3.1.
Example EPP response to a successful login command on 2020 03 25, where the password will expire in a week: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Example EPP response to a failed login command where the password has expired and the new password does not meet the server complexity requirements: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Example EPP response to a successful login command where there is a set of login security events:
S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
TLS RSA WITH AES 128 CBC SHA"
The EPP Login Security Extension schema is presented here.
The formal syntax shown here is a complete XML Schema representation of the object mapping suitable for automated validation of EPP XML instances.
The <CODE BEGINS> and <CODE ENDS
> tags are not part of the XML Schema; they are used to note the beginning and ending of the XML Schema for URI registration purposes.
Login Security Extension Schema <CODE BEGINS> <?
xml version "1.0" encoding "UTF 8"?
Extensible Provisioning Protocol v1.0 Login Security Extension Schema.</documentation
<element name "loginSec" type "loginSec:
Attributes associated with the login command extension.
<complexType name "userAgentType"> <choice> <sequence>
> <element name "os" type "token" minOccurs "0" /
Enumerated list of event types, with extensibility via "custom".
This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688].
The following URI assignment has been made by IANA:
Registration request for the loginSec namespace:
epp:loginSec 1.0 Registrant Contact:  IESG XML:  None.
Namespace URIs do not represent an XML specification.
Registration request for the loginSec XML Schema
See the "Formal Syntax" section of this document.
The EPP extension described in this document has been registered by IANA in the "Extensions for the Extensible Provisioning Protocol (EPP)" registry described in [RFC7451].
The details of the registration are as follows: Name of Extension:  "Login Security Extension for the Extensible Provisioning Protocol (EPP)"
Document status:  Standards Track Reference:  RFC 8807 Registrant Name and Email Address:  IESG,
Any IPR Disclosure:  None Status:
The security considerations of [RFC5730] apply in this document, and this document enhances these considerations.
The extension leaves the password (<pw> element) and new password (<newPW
minimum length greater than 6 characters and the maximum length up to server policy.
The server SHOULD enforce minimum and maximum length requirements that are appropriate for their operating environment.
One example of a guideline for password length policies can be found in Section 5 of NIST Special Publication 800
The client SHOULD NOT decrease the security of a new password by decreasing the length of the current password.
For example, a client with a 20 character password set using the extension should not use the login command in [RFC5730] without using the extension to set a new password that is less than or equal to 16 characters.
The extension provides an extensible list of login security events to inform clients of connection and login warnings and errors.
The server returning of security events to unauthenticated users needs to take into account the security/privacy issues of returning information to potential attackers.
The user agent information represents the client system of a system  to system interface, so the user agent information MUST NOT provide any ability to track individual users or classes of users.
