- title: __initial_text__
  contents:
  - '                        Message Send Protocol 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Discussion
  contents:
  - "Discussion\n   The Message Send Protocol is used to send a short message to a\
    \ given\n   user on a given terminal on a given host.  Unix's write command\n\
    \   offers a limited form of this service through its host-local write\n   command.\
    \  This service is also known on some hosts as \"SEND\".\n   As the Internet grows,\
    \ more and more people are using hosts that do\n   not run Internet protocols\
    \ at all times.  These hosts may be able to\n   use a simple protocol that can\
    \ be implemented using UDP and IP.  The\n   Message Send Protocol is one such\
    \ protocol.\n   Note that a message sending protocol is already defined using\
    \ TCP.\n   The SMTP protocol includes a \"SEND\" command that will direct mail\
    \ to\n   a user's terminal.  SMTP's SEND is not useful in this instance\n   because\
    \ SMTP's SEND is not implemented by the majority of vendors at\n   this time,\
    \ and is difficult to use by unskilled users.  For the\n   purposes of standardization,\
    \ we will include a TCP based Message Send\n   Service.\n"
- title: Message Syntax
  contents:
  - "Message Syntax\n   The message consists of several parts, all of which must be\
    \ present\n   The first part is a single octet indicating the protocol revision,\n\
    \   currently decimal 66, 'B'. The remaining parts are null-terminated\n   sequences\
    \ of eight-bit characters in the ISO 8859/1 alphabet. Some\n   parts may be empty.\
    \ All comparisons of parts (e.g., recipient,\n   cookie, etc.) are case-insensitive.\
    \ The parts are as follows:\n   RECIPIENT      The name of the user that the message\
    \ is directed to.\n                  If this part is empty, the message may be\
    \ delivered to\n                  any user of the destination system.\n   RECIP-TERM\
    \     The name of the terminal to which the message is to be\n               \
    \   delivered. The syntax and semantics of terminal names\n                  are\
    \ outside the scope of this specification. If this\n                  part is\
    \ empty, the \"right\" terminal is chosen. This is\n                  a system-dependent\
    \ function.  If this part consists of\n                  the string \"*\", all\
    \ terminals on the destination\n                  system are implied.  If the\
    \ RECIPIENT part is empty\n                  but the RECIP-TERM is not, the message\
    \ is written on\n                  the specified terminal.  If both the RECIPIENT\
    \ and\n                  RECIP-TERM parts are empty, the message should be\n \
    \                 written on the \"console\", which is defined as some\n     \
    \             place where the message is most likely to be seen by a\n       \
    \           human operator or administrator.\n   MESSAGE        The actual message.\
    \ The server need not preserve the\n                  formatting and white-space\
    \ content of the message if\n                  this is necessary to display it.\
    \  New lines should be\n                  represented using the usual Netascii\
    \ CR + LF.\n                  (Following the Internet tradition, a server should\n\
    \                  probably be prepared to accept a message in which some\n  \
    \                other end-of-line convention is followed, but a\n           \
    \       conforming client must use CR + LF.)\n                  The message text\
    \ may only contain printable characters\n                  from the ISO 8859/1\
    \ set, which is upward compatible\n                  from USASCII, plus CR, LF\
    \ and TAB. No other control\n                  codes or escape sequences may be\
    \ included: the client\n                  should strip them from the message before\
    \ it is\n                  transmitted, and the server must check each incoming\n\
    \                  message for illegal codes. (A server may choose to\n      \
    \            display the message after stripping out such codes, or\n        \
    \          may reject the entire message.) If the MESSAGE part is\n          \
    \        empty, the message may be discarded by the server.\n   SENDER       \
    \  The username of the sender. (This and subsequent parts\n                  were\
    \ not present in version 1 of the Message Send\n                  Protocol.) This\
    \ part should not be empty. A server may\n                  choose to accept,\
    \ reject or ignore messages in which\n                  the SENDER part is empty.\n\
    \   SENDER-TERM    The name of the sending user's terminal. This part may\n  \
    \                be empty. The intention is that a recipient may reply\n     \
    \             to a message by sending the reply to the user SENDER\n         \
    \         at terminal SENDER-TERM on the originating system.\n               \
    \   (The sender's hostname should be retrieved from the\n                  transport\
    \ software.)\n   COOKIE         A magic cookie. This part must be present in all\n\
    \                  messages, but is only of significance for the UDP\n       \
    \           service. The combination of the sender's UDP port\n              \
    \    number and this cookie should be unique. A client may\n                 \
    \ elect to transmit a particular message several times\n                  to increase\
    \ the chances of its reception; a server may\n                  use the cookie\
    \ and port to identify duplicate messages\n                  and discard them.\
    \ A reasonable cookie is the time of\n                  day represented in a readable\
    \ format. The maximum\n                  length of a cookie is 32 octets, excluding\
    \ the\n                  terminating null.\n   SIGNATURE      A token which, if\
    \ present, may be used by the server\n                  to verify the identity\
    \ of the sender. The use of the\n                  SIGNATURE part is discussed\
    \ further in the section on\n                  Security, below.\n   The total\
    \ length of the message shall be less than 512 octets.  This\n   includes all\
    \ eight parts, and any terminating nulls.  UDP packets are\n   limited to 512\
    \ octets.\n   If this protocol is changed, the revision number will be changed.\n\
    \   TCP Based Message Send Service\n   One Message Send Service is defined as\
    \ a connection based application\n   on TCP.  A server listens for TCP connections\
    \ on TCP port 18.  Once a\n   connection is established a message is sent by the\
    \ client over the\n   connection.\n   The server replies with a single character\
    \ indicating positive (\"+\")\n   or negative (\"-\") acknowledgment, immediately\
    \ followed by an optional\n   message of explanation, terminated with a null.\
    \  The positive\n   acknowledgement means that the message was successfully delivered\
    \ to\n   some user/terminal, and that the negative acknowledgement means that\n\
    \   the message was NOT delivered to any terminal.\n   The positive acknowledgement\
    \ message can contain information about\n   what user and terminal the message\
    \ was delivered to in the case of\n   incomplete user/terminal fields in the message.\
    \  The negative\n   acknowledgement can contain information about WHY the message\
    \ was not\n   delivered (no such user/terminal, system failure, user doesn't accept\n\
    \   messages, etc).\n   Multiple messages can be sent over the same channel. \
    \ The client\n   should close first (the server may/should not close directly\
    \ after\n   the acknowledgement is sent) and the server may close after some\n\
    \   timeout on the order of minutes. If the sever is unable to decode a\n   message,\
    \ or no message is received within a suitable timeout, it may\n   close the channel\
    \ (on the assumption that the sender may have\n   formatted the data incorrectly).\n\
    \   UDP Based Message Send Service\n   Another Message Send Service is defined\
    \ as a datagram based\n   application on UDP.  A server listens for UDP datagrams\
    \ on UDP port\n   18.  When a datagram is received by the server, an answering\
    \ datagram\n   may be sent back to the client.  If the message was addressed to\
    \ a\n   particular user (i.e., the RECIPIENT part was non-empty) and was\n   successfully\
    \ delivered to that user, a positive acknowledgement\n   should be sent (as described\
    \ above). If the message was directed at\n   any user (i.e., the RECIPIENT part\
    \ is empty), or if the message could\n   not be delivered for some reason, no\
    \ reply is sent.\n   The reason for this policy is that the UDP service may be\
    \ used to\n   broadcast messages addressed to a particular user on an unknown\n\
    \   system or all users on all systems. In either case, it is\n   inappropriate\
    \ for all servers to send replies. An alternative\n   approach might have been\
    \ to require that a server only send a reply\n   if a message was addressed explicitly\
    \ to that system and was not\n   broadcast. Unfortunately, the most popular network\
    \ programming API\n   does not provide an easy way for an application to determine\
    \ this;\n   furthermore such a policy would provide no feedback to the sender\
    \ of\n   a broadcast message to a particular recipient. The approach adopted\n\
    \   here provides a reasonable compromise.\n   Example of Message Encoding\n \
    \  Consider a situation in which the user \"sandy\" is logged into the\n   console\
    \ of system \"alpha\", and wishes to send a message to the user\n   \"chris\"\
    . \"chris\" is known to be logged in on the system \"beta\" but\n   the exact\
    \ terminal is unknown. The message consists of two lines of\n   text, \"Hi\" followed\
    \ by \"How about lunch?\".\n   The message would be encoded as follows:\n    \
    \         +--------+---------+---------+---------+\n           0 |    B   |  \
    \  c    |    h    |    r    |\n             +--------+---------+---------+---------+\n\
    \           4 |    i   |    s    |  <NULL> |  <NULL> |\n             +--------+---------+---------+---------+\n\
    \           8 |    H   |    i    |   <CR>  |   <LF>  |\n             +--------+---------+---------+---------+\n\
    \          12 |    H   |    o    |    w    |         |\n             +--------+---------+---------+---------+\n\
    \          16 |    a   |    b    |    o    |    u    |\n             +--------+---------+---------+---------+\n\
    \          20 |    t   |         |    l    |    u    |\n             +--------+---------+---------+---------+\n\
    \          24 |    n   |    c    |    h    |    ?    |\n             +--------+---------+---------+---------+\n\
    \          28 |  <NULL>|    s    |    a    |    n    |\n             +--------+---------+---------+---------+\n\
    \          32 |    d   |    y    |  <NULL> |    c    |\n             +--------+---------+---------+---------+\n\
    \          36 |    o   |    n    |    s    |    o    |\n             +--------+---------+---------+---------+\n\
    \          40 |    l   |    e    |  <NULL> |    9    |\n             +--------+---------+---------+---------+\n\
    \          44 |    1   |    0    |    8    |    0    |\n             +--------+---------+---------+---------+\n\
    \          48 |    6   |    1    |    2    |    1    |\n             +--------+---------+---------+---------+\n\
    \          52 |    3   |    2    |    5    |  <NULL> |\n             +--------+---------+---------+---------+\n\
    \          56 | <NULL> |\n             +--------+\n   Note that the RECIP-TERM\
    \  and SIGNATURE parts are empty. The COOKIE\n   is the string \"910806121325\"\
    , which in this implementation indicates\n   that the message was sent at 12:13:25\
    \ on the 6th of August, 1991.\n   The identity if the sending and receiving systems\
    \ is not included in\n   the message; the server must obtain this information\
    \ from the\n   transport service.\n   Advisories\n   Client and server implementations\
    \ must follow the character set\n   restrictions noted in the MESSAGE part description.\
    \ Failure to do so\n   may have undesirable effects on the operation of the receiver's\n\
    \   terminal; more seriously, it may open up a significant security\n   \"hole\"\
    . The checks must be made on any part of the message which may\n   be displayed,\
    \ including the sender's name and terminal.  This is one\n   case where the admonition\
    \ to \"be liberal in what you accept\" is not\n   applicable. A server may chose\
    \ to apply additional checks to an\n   incoming message, and to reject any message\
    \ which may pose a security\n   risk. For example, a system using a PostScript-based\
    \ display may\n   reject a message which might be interpreted as an executable\n\
    \   PostScript program.\n   The underlying transport, whether TCP or UDP, is expected\
    \ to provide\n   checksums for the message and any response.\n   The semantics\
    \ of the various RECIPIENT and RECIP-TERM combinations\n   may be confusing. The\
    \ introduction of the \"*\" wildcard designation in\n   the RECIP-TERM part makes\
    \ it possible to send a message to all\n   terminals on the designated system\
    \ (if RECIPIENT is empty), or to all\n   terminals at which a particular recipient\
    \ has logged in.\n   A positive acknowledgement may indicate only that the Message\
    \ Send\n   server was able to successfully invoke a local message delivery\n \
    \  service. It may not be possible for true end-to-end semantics to be\n   inferred.\n\
    \   For example, a Message Send server may employ a local delivery\n   mechanism\
    \ which calls upon the services of a window system to display\n   the message\
    \ in a pop-up window. This process may take some\n   significant time to complete,\
    \ and it is unclear whether it is useful\n   for the server to wait for an indeterminate\
    \ period before returning\n   an acknowledgement.  Therefore, this specification\
    \ does not prescribe\n   whether the acknowledgement is associated with delivery\
    \ of the\n   message to the local service, the display of the message, or\n  \
    \ confirmation by the user that the message has been read by, e.g.,\n   dismissing\
    \ the pop-up window.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Those who plan to implement this service must ensure\
    \ that the\n   following issues are reflected in the documentation of their\n\
    \   products, and that their implementations include sufficient\n   configuration\
    \ controls to allow systems and network administrators to\n   achieve the appropriate\
    \ levels of usability and security.\n   First, this service may allow someone\
    \ to write on a user's terminal\n   without the user giving his or her permission.\
    \  Where possible, users\n   should be provided with a mechanism for disabling\
    \ this.\n   Second, it is extremely important for implementors to observe the\n\
    \   rules for filtering message text as discussed under Message Syntax\n   above.\
    \ Failure to do this may introduce major security holes.\n   The third issue concerns\
    \ the verification of the sender's identity.\n   If the recipient is fooled into\
    \ believing that a message is from a\n   particular user, various security issues\
    \ may arise. For example, the\n   recipient may send a reply containing confidential\
    \ material.\n   This service is primarily intended for \"open\" environments:\n\
    \   controlled local area networks used by reasonably trusted\n   participants,\
    \ in which security considerations may be relaxed in the\n   interests of ease\
    \ of use and administration. In such an environment\n   it is appropriate to trust\
    \ the user name and source IP address as\n   identifying the actual sender of\
    \ the message.\n   Within more security-conscious environments, this assumption\
    \ is\n   probably unacceptable. As has been widely noted, there is no way\n  \
    \ within the current Internet architecture to ensure that the source\n   address\
    \ of an IP datagram is correct. Hence it is entirely possible\n   for someone\
    \ to spoof the IP address.\n   The obvious, and simplest, answer is to disallow\
    \ the use of this\n   protocol in such situations.  However a more constructive\
    \ approach is\n   to incorporate within the protocol some mechanism by which a\
    \ server\n   can reliably identify the sender.\n   In this version of the protocol\
    \ specification, we define a SIGNATURE\n   part within a message. If this part\
    \ is empty, the identity of the\n   sender cannot be verified, and the server\
    \ implementation may elect to\n   reject all such requests.  If the part is not\
    \ empty, it is treated as\n   a case-insensitive text encoding of some security\
    \ token. This RFC\n   does not define the encoding or interpretation of this token.\
    \ We\n   expect that such matters will form part of future RFCs on security\n\
    \   and privacy issues; at an appropriate time, this RFC will be re-\n   issued\
    \ to include references to these RFCs.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   PostScript is a trademark of Adobe Systems, Inc.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russell Nelson\n   Crynwr Software\n   11 Grant St.\n\
    \   Potsdam, NY 13676\n   Phone:  (315) 268-1925\n   EMail:  nelson@crynwr.com\n\
    \   Geoff Arnold\n   Sun Microsystems, Inc.\n   2 Federal Street\n   Billerica,\
    \ MA 01821\n   Phone:  (508) 671-0317\n   EMail:  geoff@east.sun.com\n"
