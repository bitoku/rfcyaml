- title: __initial_text__
  contents:
  - '                         IMAP4 QUOTA extension

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: 1.   Abstract
  contents:
  - "1.   Abstract\n   The QUOTA extension of the Internet Message Access Protocol\
    \ [IMAP4]\n   permits administrative limits on resource usage (quotas) to be\n\
    \   manipulated through the IMAP protocol.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 2.   Conventions Used in this Document
  contents:
  - "2.   Conventions Used in this Document\n   In examples, \"C:\" and \"S:\" indicate\
    \ lines sent by the client and\n   server respectively.\n"
- title: 3.   Introduction and Overview
  contents:
  - "3.   Introduction and Overview\n   The QUOTA extension is present in any IMAP4\
    \ implementation which\n   returns \"QUOTA\" as one of the supported capabilities\
    \ to the\n   CAPABILITY command.\n   An IMAP4 server which supports the QUOTA\
    \ capability may support\n   limits on any number of resources.  Each resource\
    \ has an atom name\n   and an implementation-defined interpretation which evaluates\
    \ to an\n   integer.  Examples of such resources are:\n      Name       Interpretation\n\
    \      STORAGE    Sum of messages' RFC822.SIZE, in units of 1024 octets\n    \
    \  MESSAGE    Number of messages\n   Each mailbox has zero or more implementation-defined\
    \ named \"quota\n   roots\".  Each quota root has zero or more resource limits.\
    \  All\n   mailboxes that share the same named quota root share the resource\n\
    \   limits of the quota root.\n   Quota root names do not necessarily have to\
    \ match the names of\n   existing mailboxes.\n"
- title: 4.   Commands
  contents:
  - '4.   Commands

    '
- title: 4.1. SETQUOTA Command
  contents:
  - "4.1. SETQUOTA Command\n   Arguments:  quota root\n               list of resource\
    \ limits\n   Data:       untagged responses: QUOTA\n   Result:     OK - setquota\
    \ completed\n               NO - setquota error: can't set that data\n       \
    \        BAD - command unknown or arguments invalid\n   The SETQUOTA command takes\
    \ the name of a mailbox quota root and a\n   list of resource limits. The resource\
    \ limits for the named quota root\n   are changed to be the specified limits.\
    \  Any previous resource limits\n   for the named quota root are discarded.\n\
    \   If the named quota root did not previously exist, an implementation\n   may\
    \ optionally create it and change the quota roots for any number of\n   existing\
    \ mailboxes in an implementation-defined manner.\n   Example:    C: A001 SETQUOTA\
    \ \"\" (STORAGE 512)\n               S: * QUOTA \"\" (STORAGE 10 512)\n      \
    \         S: A001 OK Setquota completed\n"
- title: 4.2. GETQUOTA Command
  contents:
  - "4.2. GETQUOTA Command\n   Arguments:  quota root\n   Data:       untagged responses:\
    \ QUOTA\n   Result:     OK - getquota completed\n               NO - getquota\
    \  error:  no  such  quota  root,  permission\n               denied\n       \
    \        BAD - command unknown or arguments invalid\n   The GETQUOTA command takes\
    \ the name of a quota root and returns the\n   quota root's resource usage and\
    \ limits in an untagged QUOTA response.\n   Example:    C: A003 GETQUOTA \"\"\n\
    \               S: * QUOTA \"\" (STORAGE 10 512)\n               S: A003 OK Getquota\
    \ completed\n"
- title: 4.3. GETQUOTAROOT Command
  contents:
  - "4.3. GETQUOTAROOT Command\n   Arguments:  mailbox name\n   Data:       untagged\
    \ responses: QUOTAROOT, QUOTA\n   Result:     OK - getquota completed\n      \
    \         NO - getquota error: no such mailbox, permission denied\n          \
    \     BAD - command unknown or arguments invalid\n   The GETQUOTAROOT command\
    \ takes the name of a mailbox and returns the\n   list of quota roots for the\
    \ mailbox in an untagged QUOTAROOT\n   response.  For each listed quota root,\
    \ it also returns the quota\n   root's resource usage and limits in an untagged\
    \ QUOTA response.\n   Example:    C: A003 GETQUOTAROOT INBOX\n               S:\
    \ * QUOTAROOT INBOX \"\"\n               S: * QUOTA \"\" (STORAGE 10 512)\n  \
    \             S: A003 OK Getquota completed\n"
- title: 5.   Responses
  contents:
  - '5.   Responses

    '
- title: 5.1. QUOTA Response
  contents:
  - "5.1. QUOTA Response\n   Data:       quota root name\n               list of resource\
    \ names, usages, and limits\n      This response occurs as a result of a GETQUOTA\
    \ or GETQUOTAROOT\n      command. The first string is the name of the quota root\
    \ for which\n      this quota applies.\n      The name is followed by a S-expression\
    \ format list of the resource\n      usage and limits of the quota root.  The\
    \ list contains zero or\n      more triplets.  Each triplet conatins a resource\
    \ name, the current\n      usage of the resource, and the resource limit.\n  \
    \    Resources not named in the list are not limited in the quota root.\n    \
    \  Thus, an empty list means there are no administrative resource\n      limits\
    \ in the quota root.\n      Example:    S: * QUOTA \"\" (STORAGE 10 512)\n"
- title: 5.2. QUOTAROOT Response
  contents:
  - "5.2. QUOTAROOT Response\n   Data:       mailbox name\n               zero or\
    \ more quota root names\n      This response occurs as a result of a GETQUOTAROOT\
    \ command.  The\n      first string is the mailbox and the remaining strings are\
    \ the\n      names of the quota roots for the mailbox.\n      Example:    S: *\
    \ QUOTAROOT INBOX \"\"\n                  S: * QUOTAROOT comp.mail.mime\n"
- title: 6.   Formal syntax
  contents:
  - "6.   Formal syntax\n   The following syntax specification uses the augmented\
    \ Backus-Naur\n   Form (BNF) notation as specified in RFC 822 with one exception;\
    \ the\n   delimiter used with the \"#\" construct is a single space (SP) and not\n\
    \   one or more commas.\n   Except as noted otherwise, all alphabetic characters\
    \ are case-\n   insensitive.  The use of upper or lower case characters to define\n\
    \   token strings is for editorial clarity only.  Implementations MUST\n   accept\
    \ these strings in a case-insensitive fashion.\n   getquota        ::= \"GETQUOTA\"\
    \ SP astring\n   getquotaroot    ::= \"GETQUOTAROOT\" SP astring\n   quota_list\
    \      ::= \"(\" #quota_resource \")\"\n   quota_resource  ::= atom SP number\
    \ SP number\n   quota_response  ::= \"QUOTA\" SP astring SP quota_list\n   quotaroot_response\n\
    \                   ::= \"QUOTAROOT\" SP astring *(SP astring)\n   setquota  \
    \      ::= \"SETQUOTA\" SP astring SP setquota_list\n   setquota_list   ::= \"\
    (\" 0#setquota_resource \")\"\n   setquota_resource ::= atom SP number\n"
- title: 7.   References
  contents:
  - "7.   References\n   [IMAP4] Crispin, M., \"Internet Message Access Protocol -\
    \ Version 4\",\n   RFC 1730, University of Washington, December 1994.\n   [RFC-822]\
    \ Crocker, D., \"Standard for    the Format of ARPA Internet\n   Text Messages\"\
    , STD 11, RFC 822.\n"
- title: 8.   Security Considerations
  contents:
  - "8.   Security Considerations\n   Implementors should be careful to make sure\
    \ the implementation of\n   these commands does not violate the site's security\
    \ policy. The\n   resource usage of other users is likely to be considered confidential\n\
    \   information and should not be divulged to unauthorized persons.\n"
- title: 9.   Author's Address
  contents:
  - "9.   Author's Address\n   John G. Myers\n   Carnegie-Mellon University\n   5000\
    \ Forbes Ave.\n   Pittsburgh PA, 15213-3890\n   EMail: jgm+@cmu.edu\n"
