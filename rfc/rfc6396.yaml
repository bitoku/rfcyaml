- contents:
  - ' Multi-Threaded Routing Toolkit (MRT) Routing Information Export Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the MRT format for routing information\n
    \  export.  This format was developed in concert with the Multi-threaded\n   Routing
    Toolkit (MRT) from whence the format takes it name.  The\n   format can be used
    to export routing protocol messages, state\n   changes, and routing information
    base contents.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6396.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Specification of Requirements  . . . . . . . . . .
    . . . .  4\n   2.  MRT Common Header  . . . . . . . . . . . . . . . . . . . .
    . .  4\n   3.  Extended Timestamp MRT Header  . . . . . . . . . . . . . . . .
    \ 5\n   4.  MRT Types  . . . . . . . . . . . . . . . . . . . . . . . . . .  6\n
    \    4.1.  OSPFv2 Type  . . . . . . . . . . . . . . . . . . . . . . .  6\n     4.2.
    \ TABLE_DUMP Type  . . . . . . . . . . . . . . . . . . . . .  7\n     4.3.  TABLE_DUMP_V2
    Type . . . . . . . . . . . . . . . . . . . .  9\n       4.3.1.  PEER_INDEX_TABLE
    Subtype . . . . . . . . . . . . . . .  9\n       4.3.2.  AFI/SAFI-Specific RIB
    Subtypes . . . . . . . . . . . . 11\n       4.3.3.  RIB_GENERIC Subtype  . . .
    . . . . . . . . . . . . . . 11\n       4.3.4.  RIB Entries  . . . . . . . . .
    . . . . . . . . . . . . 12\n     4.4.  BGP4MP Type  . . . . . . . . . . . . .
    . . . . . . . . . . 13\n       4.4.1.  BGP4MP_STATE_CHANGE Subtype  . . . . .
    . . . . . . . . 13\n       4.4.2.  BGP4MP_MESSAGE Subtype . . . . . . . . . .
    . . . . . . 14\n       4.4.3.  BGP4MP_MESSAGE_AS4 Subtype . . . . . . . . . .
    . . . . 15\n       4.4.4.  BGP4MP_STATE_CHANGE_AS4 Subtype  . . . . . . . . .
    . . 15\n       4.4.5.  BGP4MP_MESSAGE_LOCAL Subtype . . . . . . . . . . . . .
    16\n       4.4.6.  BGP4MP_MESSAGE_AS4_LOCAL Subtype . . . . . . . . . . . 16\n
    \    4.5.  ISIS Type  . . . . . . . . . . . . . . . . . . . . . . . . 16\n     4.6.
    \ OSPFv3 Type  . . . . . . . . . . . . . . . . . . . . . . . 17\n   5.  IANA Considerations
    \ . . . . . . . . . . . . . . . . . . . . . 17\n     5.1.  Type Codes . . . .
    . . . . . . . . . . . . . . . . . . . . 17\n     5.2.  Subtype Codes  . . . .
    . . . . . . . . . . . . . . . . . . 18\n     5.3.  Defined Type Codes . . . .
    . . . . . . . . . . . . . . . . 18\n     5.4.  Defined BGP, BGP4PLUS, and BGP4PLUS_01
    Subtype Codes . . . 19\n     5.5.  Defined TABLE_DUMP Subtype Codes . . . . .
    . . . . . . . . 19\n     5.6.  Defined TABLE_DUMP_V2 Subtype Codes  . . . . .
    . . . . . . 19\n     5.7.  Defined BGP4MP and BGP4MP_ET Subtype Codes . . . .
    . . . . 20\n   6.  Security Considerations  . . . . . . . . . . . . . . . . .
    . . 20\n   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . .
    21\n     7.1.  Normative References . . . . . . . . . . . . . . . . . . . 21\n
    \    7.2.  Informative References . . . . . . . . . . . . . . . . . . 21\n   Appendix
    A.  MRT Encoding Examples . . . . . . . . . . . . . . . . 23\n   Appendix B.  Deprecated
    MRT Types  . . . . . . . . . . . . . . . . 26\n     B.1.  Deprecated MRT Informational
    Types . . . . . . . . . . . . 26\n       B.1.1.  NULL Type  . . . . . . . . .
    . . . . . . . . . . . . . 26\n       B.1.2.  START Type . . . . . . . . . . .
    . . . . . . . . . . . 27\n       B.1.3.  DIE Type . . . . . . . . . . . . . .
    . . . . . . . . . 27\n       B.1.4.  I_AM_DEAD Type . . . . . . . . . . . . .
    . . . . . . . 27\n       B.1.5.  PEER_DOWN Type . . . . . . . . . . . . . . .
    . . . . . 27\n     B.2.  Other Deprecated MRT Types . . . . . . . . . . . . .
    . . . 27\n       B.2.1.  BGP Type . . . . . . . . . . . . . . . . . . . . . .
    . 27\n       B.2.2.  RIP Type . . . . . . . . . . . . . . . . . . . . . . . 30\n
    \      B.2.3.  IDRP Type  . . . . . . . . . . . . . . . . . . . . . . 30\n       B.2.4.
    \ RIPNG Type . . . . . . . . . . . . . . . . . . . . . . 31\n       B.2.5.  BGP4PLUS
    and BGP4PLUS_01 Types . . . . . . . . . . . . 31\n       B.2.6.  Deprecated BGP4MP
    Subtypes . . . . . . . . . . . . . . 32\n   Appendix C.  Acknowledgements  . .
    . . . . . . . . . . . . . . . . 34\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Researchers and engineers often wish to analyze network
    behavior by\n   studying routing protocol transactions and routing information
    base\n   snapshots.  To this end, the MRT record format was developed to\n   encapsulate,
    export, and archive this information in a standardized\n   data representation.\n
    \  The BGP routing protocol, in particular, has been the subject of\n   extensive
    study and analysis, which have been significantly aided by\n   the availability
    of the MRT format.  Two examples of large-scale MRT-\n   based BGP archival projects
    include the University of Oregon Route\n   Views Project and the RIPE NCC Routing
    Information Service (RIS).\n   The MRT format was initially defined in the MRT
    Programmer's Guide\n   [MRT_PROG_GUIDE].  Subsequent extensions were made in the
    GNU Zebra\n   software routing suite and the Sprint Advanced Technology Labs Python\n
    \  Routing Toolkit (PyRT).  Further extensions may be introduced at a\n   later
    date through additional definitions of the MRT Type field and\n   Subtype fields.\n
    \  A number of MRT record types listed in the MRT Programmer's Guide\n   [MRT_PROG_GUIDE]
    are not known to have been implemented and, in some\n   cases, were incompletely
    specified.  Further, several types were\n   employed in early MRT implementations,
    but saw limited use and were\n   updated by improved versions.  These types are
    considered to be\n   deprecated and are documented in the Deprecated MRT Types\n
    \  (Appendix B) section at the end of this document.  The deprecated\n   types
    consist of codes 0 through 10 inclusive.  Some of the\n   deprecated types may
    be of interest to researchers examining\n   historical MRT format archives.\n
    \  Fields which contain multi-octet numeric values are encoded in\n   network
    octet order from most significant octet to least significant\n   octet.  Fields
    that contain routing message fields are encoded in the\n   same order as they
    appear in the packet contents.\n"
  - contents:
    - "1.1.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in [RFC2119].\n"
    title: 1.1.  Specification of Requirements
  title: 1.  Introduction
- contents:
  - "2.  MRT Common Header\n   All MRT format records have a Common Header that consists
    of a\n   Timestamp, Type, Subtype, and Length field.  The header is followed\n
    \  by a Message field.  The MRT Common Header is illustrated below.\n        0
    \                  1                   2                   3\n        0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                           Timestamp                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |             Type              |            Subtype            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                             Length                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                      Message... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                       Figure 1: MRT Common Header\n   Header Field Descriptions:\n
    \     Timestamp:\n         A 4-octet field whose integer value is the number of
    seconds,\n         excluding leap seconds, elapsed since midnight proleptic\n
    \        Coordinated Universal Time (UTC).  This representation of time\n         is
    sometimes called \"UNIX time\" [POSIX].  This time format\n         cannot represent
    time values prior to January 1, 1970.  The\n         latest UTC time value that
    can be represented by a 4-octet\n         integer value is 03:14:07 on January
    19, 2038, which is\n         represented by the hexadecimal value 7FFFFFFF.  Implementations\n
    \        that wish to create MRT records after this date will need to\n         provide
    an alternate EPOCH time base for the Timestamp field.\n         Mechanisms for
    indicating this alternate EPOCH are currently\n         outside the scope of this
    document.\n      Type:\n         A 2-octet field that indicates the Type of information\n
    \        contained in the Message field.  Types 0 through 4 are\n         informational
    messages pertaining to the state of an MRT\n         collector, while Types 5
    and higher are used to convey routing\n         information.\n      Subtype:\n
    \        A 2-octet field that is used to further distinguish message\n         information
    within a particular record Type.\n      Length:\n         A 4-octet message length
    field.  The Length field contains the\n         number of octets within the message.
    \ The Length field does not\n         include the length of the MRT Common Header.\n
    \     Message:\n         A variable-length message.  The contents of this field
    are\n         context dependent upon the Type and Subtype fields.\n"
  title: 2.  MRT Common Header
- contents:
  - "3.  Extended Timestamp MRT Header\n   Several MRT format record types support
    a variant type with an\n   extended timestamp field.  The purpose of this field
    is to support\n   measurements at sub-second resolutions.  This field, Microsecond\n
    \  Timestamp, contains an unsigned 32BIT offset value in microseconds,\n   which
    is added to the Timestamp field value.  The Timestamp field\n   remains as defined
    in the MRT Common Header.  The Microsecond\n   Timestamp immediately follows the
    Length field in the MRT Common\n   Header and precedes all other fields in the
    message.  The Microsecond\n   Timestamp is included in the computation of the
    Length field value.\n   The Extended Timestamp MRT Header is illustrated below.\n
    \       0                   1                   2                   3\n        0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                           Timestamp                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |             Type              |            Subtype            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                             Length                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                      Microsecond Timestamp                    |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                      Message... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                 Figure 2: Extended Timestamp MRT Header\n"
  title: 3.  Extended Timestamp MRT Header
- contents:
  - "4.  MRT Types\n   The following MRT Types are currently defined for the MRT format.\n
    \  The MRT Types that contain the \"_ET\" suffix in their names identify\n   those
    types that use an Extended Timestamp MRT Header.  The Subtype\n   and Message
    fields in these types remain as defined for the MRT Types\n   of the same name
    without the \"_ET\" suffix.\n       11   OSPFv2\n       12   TABLE_DUMP\n       13
    \  TABLE_DUMP_V2\n       16   BGP4MP\n       17   BGP4MP_ET\n       32   ISIS\n
    \      33   ISIS_ET\n       48   OSPFv3\n       49   OSPFv3_ET\n"
  - contents:
    - "4.1.  OSPFv2 Type\n   This type supports the OSPFv2 protocol as defined in
      RFC 2328\n   [RFC2328].  It is used to encode the exchange of OSPF protocol\n
      \  packets.\n   The format of the MRT Message field for the OSPFv2 Type is as\n
      \  follows:\n        0                   1                   2                   3\n
      \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                        Remote IP Address                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                         Local IP Address                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                  OSPF Message Contents (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                          Figure 3: OSPFv2 Type\n   The Remote IP Address field
      contains the Source IPv4 [RFC0791]\n   address from the IP header of the OSPF
      message.  The Local IP Address\n   contains the Destination IPv4 address from
      the IP header.  The OSPF\n   Message Contents field contains the complete contents
      of the OSPF\n   packet following the IP header.\n"
    title: 4.1.  OSPFv2 Type
  - contents:
    - "4.2.  TABLE_DUMP Type\n   The TABLE_DUMP Type is used to encode the contents
      of a BGP Routing\n   Information Base (RIB).  Each RIB entry is encoded in a
      distinct\n   sequential MRT record.  It is RECOMMENDED that new MRT encoding\n
      \  implementations use the TABLE_DUMP_V2 Type (see below) instead of the\n   TABLE_DUMP
      Type due to limitations in this type.  However, due to the\n   significant volume
      of historical data encoded with this type, MRT\n   decoding applications MAY
      wish to support this type.\n   The Subtype field is used to encode whether the
      RIB entry contains\n   IPv4 or IPv6 [RFC2460] addresses.  There are two possible
      values for\n   the Subtype as shown below.\n       1    AFI_IPv4\n       2    AFI_IPv6\n
      \  The format of the TABLE_DUMP Type is illustrated below.\n        0                   1
      \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |         View Number           |       Sequence Number         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                        Prefix (variable)                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      | Prefix Length |    Status     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                         Originated Time                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                    Peer IP Address (variable)                 |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |           Peer AS             |       Attribute Length        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                   BGP Attribute... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                        Figure 4: TABLE_DUMP Type\n   The View Number field
      is normally 0 and is intended for cases where\n   an implementation may have
      multiple RIB views (such as a route\n   server).  In cases where multiple RIB
      views are present, an\n   implementation MAY use the View Number field to distinguish
      entries\n   from each view.  The Sequence Number field is a simple incremental\n
      \  counter for each RIB entry.  A typical RIB dump will exceed the\n   16-bit
      bounds of this counter, and an implementation SHOULD simply\n   wrap back to
      zero and continue incrementing the counter in such\n   cases.\n   The Prefix
      field contains the IP address of a particular RIB entry.\n   The size of this
      field is dependent on the value of the Subtype for\n   this record.  The AFI_IPv4
      Subtype value specifies an Address Family\n   Identifier (AFI) type of IPv4
      [IANA-AF].  It specifies a Prefix field\n   length of 4 octets.  For AFI_IPv6,
      it is 16 octets in length.  The\n   Prefix Length field indicates the length
      in bits of the prefix mask\n   for the preceding Prefix field.\n   The Status
      octet is unused in the TABLE_DUMP Type and SHOULD be set\n   to 1.\n   The Originated
      Time contains the 4-octet time at which this prefix\n   was heard.  The value
      represents the time in seconds since 1 January\n   1970 00:00:00 UTC.\n   The
      Peer IP Address field is the IP address of the peer that provided\n   the update
      for this RIB entry.  As with the Prefix field, the size of\n   this field is
      dependent on the Subtype.  AFI_IPv4 indicates a 4-octet\n   field and an IPv4
      address, while a Subtype of AFI_IPv6 requires a\n   16-octet field and an IPv6
      address.  The Peer AS field contains the\n   2-octet Autonomous System (AS)
      number of the peer.\n   The TABLE_DUMP Type does not permit 4-byte Peer AS numbers,
      nor does\n   it allow the AFI of the peer IP to differ from the AFI of the Prefix\n
      \  field.  The TABLE_DUMP_V2 Type MUST be used in these situations.\n   Attribute
      Length contains the length of the Attribute field and is 2\n   octets.  The
      BGP Attribute field contains the BGP attribute\n   information for the RIB entry.
      \ The AS_PATH attribute MUST only\n   consist of 2-byte AS numbers.  The TABLE_DUMP_V2
      supports 4-byte AS\n   numbers in the AS_PATH attribute.\n"
    title: 4.2.  TABLE_DUMP Type
  - contents:
    - "4.3.  TABLE_DUMP_V2 Type\n   The TABLE_DUMP_V2 Type updates the TABLE_DUMP
      Type to include 4-byte\n   Autonomous System Number (ASN) support and full support
      for BGP\n   multiprotocol extensions.  It also improves upon the space efficiency\n
      \  of the TABLE_DUMP Type by employing an index table for peers and\n   permitting
      a single MRT record per Network Layer Reachability\n   Information (NLRI) entry.
      \ The following subtypes are used with the\n   TABLE_DUMP_V2 Type.\n       1
      \   PEER_INDEX_TABLE\n       2    RIB_IPV4_UNICAST\n       3    RIB_IPV4_MULTICAST\n
      \      4    RIB_IPV6_UNICAST\n       5    RIB_IPV6_MULTICAST\n       6    RIB_GENERIC\n"
    - contents:
      - "4.3.1.  PEER_INDEX_TABLE Subtype\n   An initial PEER_INDEX_TABLE MRT record
        provides the BGP ID of the\n   collector, an OPTIONAL view name, and a list
        of indexed peers.\n   Following the PEER_INDEX_TABLE MRT record, a series
        of MRT records is\n   used to encode RIB table entries.  This series of MRT
        records uses\n   subtypes 2-6 and is separate from the PEER_INDEX_TABLE MRT
        record\n   itself and includes full MRT record headers.  The RIB entry MRT\n
        \  records MUST immediately follow the PEER_INDEX_TABLE MRT record.\n   The
        header of the PEER_INDEX_TABLE Subtype is shown below.  The View\n   Name
        is OPTIONAL and, if not present, the View Name Length MUST be\n   set to 0.
        \ The View Name encoding MUST follow the UTF-8\n   transformation format [RFC3629].\n
        \       0                   1                   2                   3\n        0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Collector BGP ID                         |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |       View Name Length        |     View Name (variable)      |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |          Peer Count           |    Peer Entries (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 5: PEER_INDEX_TABLE Subtype\n   The format of the
        Peer Entries is shown below.  The PEER_INDEX_TABLE\n   record contains Peer
        Count number of Peer Entries.\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |   Peer Type   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Peer BGP ID                           |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                   Peer IP Address (variable)                  |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                        Peer AS (variable)                     |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                         Figure 6: Peer Entries\n   The Peer Type, Peer BGP
        ID, Peer IP Address, and Peer AS fields are\n   repeated as indicated by the
        Peer Count field.  The position of the\n   peer in the PEER_INDEX_TABLE is
        used as an index in the subsequent\n   TABLE_DUMP_V2 MRT records.  The index
        number begins with 0.\n   The Peer Type field is a bit field that encodes
        the type of the AS\n   and IP address as identified by the A and I bits, respectively,\n
        \  below.\n       0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-+\n      | | | |
        | | |A|I|\n      +-+-+-+-+-+-+-+-+\n      Bit 6: Peer AS number size:  0 =
        16 bits, 1 = 32 bits\n      Bit 7: Peer IP Address family:  0 = IPv4,  1 =
        IPv6\n                         Figure 7: Peer Type Field\n   The MRT records
        that follow the PEER_INDEX_TABLE MRT record consist\n   of the subtypes listed
        below and contain the actual RIB table\n   entries.  They include a header
        that specifies a sequence number, an\n   NLRI field, and a count of the number
        of RIB entries contained within\n   the record.\n"
      title: 4.3.1.  PEER_INDEX_TABLE Subtype
    - contents:
      - "4.3.2.  AFI/SAFI-Specific RIB Subtypes\n   The AFI/SAFI-specific RIB Subtypes
        consist of the RIB_IPV4_UNICAST,\n   RIB_IPV4_MULTICAST, RIB_IPV6_UNICAST,
        and RIB_IPV6_MULTICAST\n   Subtypes.  These specific RIB table entries are
        given their own MRT\n   TABLE_DUMP_V2 subtypes as they are the most common
        type of RIB table\n   instances, and providing specific MRT subtypes for them
        permits more\n   compact encodings.  These subtypes permit a single MRT record
        to\n   encode multiple RIB table entries for a single prefix.  The Prefix\n
        \  Length and Prefix fields are encoded in the same manner as the BGP\n   NLRI
        encoding for IPv4 and IPv6 prefixes.  Namely, the Prefix field\n   contains
        address prefixes followed by enough trailing bits to make\n   the end of the
        field fall on an octet boundary.  The value of\n   trailing bits is irrelevant.\n
        \       0                   1                   2                   3\n        0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Sequence Number                       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      | Prefix Length |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                        Prefix (variable)                      |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Entry Count           |  RIB Entries (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                       Figure 8: RIB Entry Header\n"
      title: 4.3.2.  AFI/SAFI-Specific RIB Subtypes
    - contents:
      - "4.3.3.  RIB_GENERIC Subtype\n   The RIB_GENERIC header is shown below.  It
        is used to cover RIB\n   entries that do not fall under the common case entries
        defined above.\n   It consists of an AFI, Subsequent AFI (SAFI), and a single
        NLRI\n   entry.  The NLRI information is specific to the AFI and SAFI values.\n
        \  An implementation that does not recognize particular AFI and SAFI\n   values
        SHOULD discard the remainder of the MRT record.\n        0                   1
        \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Sequence Number                       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |    Address Family Identifier  |Subsequent AFI |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |     Network Layer Reachability Information (variable)         |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Entry Count           |  RIB Entries (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 9: RIB_GENERIC Entry Header\n"
      title: 4.3.3.  RIB_GENERIC Subtype
    - contents:
      - "4.3.4.  RIB Entries\n   The RIB Entries are repeated Entry Count times.  These
        entries share\n   a common format as shown below.  They include a Peer Index
        from the\n   PEER_INDEX_TABLE MRT record, an originated time for the RIB Entry,\n
        \  and the BGP path attribute length and attributes.  All AS numbers in\n
        \  the AS_PATH attribute MUST be encoded as 4-byte AS numbers.\n        0
        \                  1                   2                   3\n        0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Peer Index            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Originated Time                       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |      Attribute Length         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                    BGP Attributes... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                         Figure 10: RIB Entries\n   There is one exception
        to the encoding of BGP attributes for the BGP\n   MP_REACH_NLRI attribute
        (BGP Type Code 14) [RFC4760].  Since the AFI,\n   SAFI, and NLRI information
        is already encoded in the RIB Entry Header\n   or RIB_GENERIC Entry Header,
        only the Next Hop Address Length and\n   Next Hop Address fields are included.
        \ The Reserved field is omitted.\n   The attribute length is also adjusted
        to reflect only the length of\n   the Next Hop Address Length and Next Hop
        Address fields.\n"
      title: 4.3.4.  RIB Entries
    title: 4.3.  TABLE_DUMP_V2 Type
  - contents:
    - "4.4.  BGP4MP Type\n   This type was initially defined in the Zebra software
      package for the\n   BGP protocol with multiprotocol extension support as defined
      by RFC\n   4760 [RFC4760].  The BGP4MP Type has six Subtypes, which are defined\n
      \  as follows:\n       0    BGP4MP_STATE_CHANGE\n       1    BGP4MP_MESSAGE\n
      \      4    BGP4MP_MESSAGE_AS4\n       5    BGP4MP_STATE_CHANGE_AS4\n       6
      \   BGP4MP_MESSAGE_LOCAL\n       7    BGP4MP_MESSAGE_AS4_LOCAL\n"
    - contents:
      - "4.4.1.  BGP4MP_STATE_CHANGE Subtype\n   This message is used to encode state
        changes in the BGP finite state\n   machine (FSM).  The BGP FSM states are
        encoded in the Old State and\n   New State fields to indicate the previous
        and current state.  In some\n   cases, the Peer AS Number may be undefined.
        \ In such cases, the value\n   of this field MAY be set to zero.  The format
        is illustrated below:\n        0                   1                   2                   3\n
        \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Peer AS Number        |        Local AS Number        |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |        Interface Index        |        Address Family         |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Peer IP Address (variable)               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Local IP Address (variable)              |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |            Old State          |          New State            |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                 Figure 11: BGP4MP_STATE_CHANGE Subtype\n   The FSM states
        are defined in RFC 4271 [RFC4271], Section 8.2.2.\n   Both the Old State value
        and the New State value are encoded as\n   2-octet numbers.  The state values
        are defined numerically as\n   follows:\n       1    Idle\n       2    Connect\n
        \      3    Active\n       4    OpenSent\n       5    OpenConfirm\n       6
        \   Established\n   The BGP4MP_STATE_CHANGE message also includes Interface
        Index and\n   Address Family fields.  The Interface Index provides the interface\n
        \  number of the peering session.  The index value is OPTIONAL and MAY\n   be
        zero if unknown or unsupported.  The Address Family indicates what\n   types
        of addresses are in the address fields.  At present, the\n   following AFI
        Types are supported:\n       1    AFI_IPv4\n       2    AFI_IPv6\n"
      title: 4.4.1.  BGP4MP_STATE_CHANGE Subtype
    - contents:
      - "4.4.2.  BGP4MP_MESSAGE Subtype\n   This subtype is used to encode BGP messages.
        \ It can be used to\n   encode any Type of BGP message.  The entire BGP message
        is\n   encapsulated in the BGP Message field, including the 16-octet marker,\n
        \  the 2-octet length, and the 1-octet type fields.  The BGP4MP_MESSAGE\n
        \  Subtype does not support 4-byte AS numbers.  The AS_PATH contained in\n
        \  these messages MUST only consist of 2-byte AS numbers.  The\n   BGP4MP_MESSAGE_AS4
        Subtype updates the BGP4MP_MESSAGE Subtype in\n   order to support 4-byte
        AS numbers.  The BGP4MP_MESSAGE fields are\n   shown below:\n        0                   1
        \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Peer AS Number        |        Local AS Number        |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |        Interface Index        |        Address Family         |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Peer IP Address (variable)               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Local IP Address (variable)              |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                    BGP Message... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                    Figure 12: BGP4MP_MESSAGE Subtype\n   The Interface Index
        provides the interface number of the peering\n   session.  The index value
        is OPTIONAL and MAY be zero if unknown or\n   unsupported.  The Address Family
        indicates what types of addresses\n   are in the subsequent address fields.
        \ At present, the following AFI\n   Types are supported:\n       1    AFI_IPv4\n
        \      2    AFI_IPv6\n   The Address Family value only applies to the IP addresses
        contained\n   in the MRT header.  The BGP4MP_MESSAGE Subtype is otherwise\n
        \  transparent to the contents of the actual message that may contain\n   any
        valid AFI/SAFI values.  Only one BGP message SHALL be encoded in\n   the BGP4MP_MESSAGE
        Subtype.\n"
      title: 4.4.2.  BGP4MP_MESSAGE Subtype
    - contents:
      - "4.4.3.  BGP4MP_MESSAGE_AS4 Subtype\n   This subtype updates the BGP4MP_MESSAGE
        Subtype to support 4-byte AS\n   numbers.  The BGP4MP_MESSAGE_AS4 Subtype
        is otherwise identical to\n   the BGP4MP_MESSAGE Subtype.  The AS_PATH in
        these messages MUST only\n   consist of 4-byte AS numbers.  The BGP4MP_MESSAGE_AS4
        fields are\n   shown below:\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Peer AS Number                        |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Local AS Number                       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |        Interface Index        |        Address Family         |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Peer IP Address (variable)               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Local IP Address (variable)              |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                    BGP Message... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                  Figure 13: BGP4MP_MESSAGE_AS4 Subtype\n"
      title: 4.4.3.  BGP4MP_MESSAGE_AS4 Subtype
    - contents:
      - "4.4.4.  BGP4MP_STATE_CHANGE_AS4 Subtype\n   This subtype updates the BGP4MP_STATE_CHANGE
        Subtype to support\n   4-byte AS numbers.  As with the BGP4MP_STATE_CHANGE
        Subtype, the BGP\n   FSM states are encoded in the Old State and New State
        fields to\n   indicate the previous and current state.  Aside from the extension
        of\n   the Peer and Local AS Number fields to 4 bytes, this subtype is\n   otherwise
        identical to the BGP4MP_STATE_CHANGE Subtype.  The\n   BGP4MP_STATE_CHANGE_AS4
        fields are shown below:\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Peer AS Number                        |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Local AS Number                       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |        Interface Index        |        Address Family         |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Peer IP Address (variable)               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                      Local IP Address (variable)              |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |            Old State          |          New State            |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 14: BGP4MP_STATE_CHANGE_AS4 Subtype\n"
      title: 4.4.4.  BGP4MP_STATE_CHANGE_AS4 Subtype
    - contents:
      - "4.4.5.  BGP4MP_MESSAGE_LOCAL Subtype\n   Implementations of MRT have largely
        focused on collecting remotely\n   generated BGP messages in a passive route
        collector role.  However,\n   for active BGP implementations, it can be useful
        to archive locally\n   generated BGP messages in addition to remote messages.
        \ This subtype\n   is added to indicate a locally generated BGP message.  The
        fields\n   remain identical to the BGP4MP_MESSAGE type including the Peer
        and\n   Local IP and AS fields.  The Local fields continue to refer to the\n
        \  local IP and AS number of the collector that generated the BGP\n   message,
        and the Peer IP and AS fields refer to the recipient of the\n   generated
        BGP messages.\n"
      title: 4.4.5.  BGP4MP_MESSAGE_LOCAL Subtype
    - contents:
      - "4.4.6.  BGP4MP_MESSAGE_AS4_LOCAL Subtype\n   As with the BGP4MP_MESSAGE_LOCAL
        type, this type indicates locally\n   generated messages.  The fields are
        identical to the\n   BGP4MP_MESSAGE_AS4 message type.\n"
      title: 4.4.6.  BGP4MP_MESSAGE_AS4_LOCAL Subtype
    title: 4.4.  BGP4MP Type
  - contents:
    - "4.5.  ISIS Type\n   This type supports the IS-IS routing protocol as defined
      in RFC 1195\n   [RFC1195].  There is no Type-specific header for the ISIS Type.
      \ The\n   Subtype code for this type is undefined.  The ISIS PDU directly\n
      \  follows the MRT Common Header fields.\n"
    title: 4.5.  ISIS Type
  - contents:
    - "4.6.  OSPFv3 Type\n   The OSPFv3 Type extends the original OSPFv2 Type to support
      IPv6\n   addresses for the OSPFv3 protocol as defined in RFC 5340 [RFC5340].\n
      \  The format of the MRT Message field for the OSPFv3 Type is as\n   follows:\n
      \       0                   1                   2                   3\n        0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |        Address Family         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                     Remote IP Address (variable)              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                      Local IP Address (variable)              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                  OSPF Message Contents (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                         Figure 15: OSPFv3 Type\n"
    title: 4.6.  OSPFv3 Type
  title: 4.  MRT Types
- contents:
  - "5.  IANA Considerations\n   This section provides guidance to the Internet Assigned
    Numbers\n   Authority (IANA) regarding registration of values related to the MRT\n
    \  specification, in accordance with BCP 26, RFC 5226 [RFC5226].\n   There are
    two name spaces in MRT that have been registered: Type\n   Codes and Subtype Codes.
    \ Type Codes and Subtype Codes are each 16\n   bits in length.\n   MRT is not
    intended as a general-purpose specification for protocol\n   information export,
    and allocations should not be made for purposes\n   unrelated to routing protocol
    information export.\n   The following policies are used here with the meanings
    defined in BCP\n   26: \"Specification Required\", \"IETF Consensus\", \"Experimental
    Use\",\n   \"First Come First Served\".  Assignments consist of a name and the\n
    \  value.\n"
  - contents:
    - "5.1.  Type Codes\n   Type Codes have a range from 0 to 65535, of which 0-64
      are reserved.\n   New Type Codes MUST be allocated starting at 65.  Type Codes
      65-511\n   are assigned by IETF Review.  Type Codes 512-2047 are assigned based\n
      \  on Specification Required.  Type Codes 2048-64511 are available on a\n   First
      Come First Served policy.  Type Codes 64512 - 65534 are\n   available for Experimental
      Use.  The Type Code Value 65535 is\n   reserved.\n"
    title: 5.1.  Type Codes
  - contents:
    - "5.2.  Subtype Codes\n   Subtype Codes have a range from 0 to 65535.  Subtype
      definitions are\n   specific to a particular Type Code definition.  New Subtype
      Code\n   definitions must reference an existing Type Code to which the Subtype\n
      \  belongs.  Subtype assignments follow the assignment rules for the\n   Type
      Codes to which they belong.\n"
    title: 5.2.  Subtype Codes
  - contents:
    - "5.3.  Defined Type Codes\n   This document defines the following message Type
      Codes:\n            Name             Value       Definition\n            ----
      \            -----       ----------\n            NULL             0           See
      Appendix B.1.1\n            START            1           See Appendix B.1.2\n
      \           DIE              2           See Appendix B.1.3\n            I_AM_DEAD
      \       3           See Appendix B.1.4\n            PEER_DOWN        4           See
      Appendix B.1.5\n            BGP              5           See Appendix B.2.1\n
      \           RIP              6           See Appendix B.2.2\n            IDRP
      \            7           See Appendix B.2.3\n            RIPNG            8
      \          See Appendix B.2.4\n            BGP4PLUS         9           See
      Appendix B.2.5\n            BGP4PLUS_01      10          See Appendix B.2.5\n
      \           OSPFv2           11          See Section 4.1\n            TABLE_DUMP
      \      12          See Section 4.2\n            TABLE_DUMP_V2    13          See
      Section 4.3\n            BGP4MP           16          See Section 4.4\n            BGP4MP_ET
      \       17          See Section 4.4\n            ISIS             32          See
      Section 4.5\n            ISIS_ET          33          See Section 4.5\n            OSPFv3
      \          48          See Section 4.6\n            OSPFv3_ET        49          See
      Section 4.6\n"
    title: 5.3.  Defined Type Codes
  - contents:
    - "5.4.  Defined BGP, BGP4PLUS, and BGP4PLUS_01 Subtype Codes\n   This document
      defines the following message Subtype Codes for the\n   BGP, BGP4PLUS, and BGP4PLUS_01
      Types:\n            Name               Value       Definition\n            ----
      \              -----       ----------\n            BGP_NULL           0           See
      Appendix B.2.1\n            BGP_UPDATE         1           See Appendix B.2.1\n
      \           BGP_PREF_UPDATE    2           See Appendix B.2.1\n            BGP_STATE_CHANGE
      \  3           See Appendix B.2.1\n            BGP_SYNC           4           See
      Appendix B.2.1\n            BGP_OPEN           5           See Appendix B.2.1\n
      \           BGP_NOTIFY         6           See Appendix B.2.1\n            BGP_KEEPALIVE
      \     7           See Appendix B.2.1\n"
    title: 5.4.  Defined BGP, BGP4PLUS, and BGP4PLUS_01 Subtype Codes
  - contents:
    - "5.5.  Defined TABLE_DUMP Subtype Codes\n   This document defines the following
      message Subtype Codes for the\n   TABLE_DUMP Type:\n            Name                Value
      \      Definition\n            ----                -----       ----------\n
      \           AFI_IPv4            1           See Section 4.2\n            AFI_IPv6
      \           2           See Section 4.2\n"
    title: 5.5.  Defined TABLE_DUMP Subtype Codes
  - contents:
    - "5.6.  Defined TABLE_DUMP_V2 Subtype Codes\n   This document defines the following
      message Subtype Codes for the\n   TABLE_DUMP_V2 Type:\n            Name                Value
      \      Definition\n            ----                -----       ----------\n
      \           PEER_INDEX_TABLE    1           See Section 4.3\n            RIB_IPV4_UNICAST
      \   2           See Section 4.3\n            RIB_IPV4_MULTICAST  3           See
      Section 4.3\n            RIB_IPV6_UNICAST    4           See Section 4.3\n            RIB_IPV6_MULTICAST
      \ 5           See Section 4.3\n            RIB_GENERIC         6           See
      Section 4.3\n"
    title: 5.6.  Defined TABLE_DUMP_V2 Subtype Codes
  - contents:
    - "5.7.  Defined BGP4MP and BGP4MP_ET Subtype Codes\n   This document defines
      the following message Subtype Codes for the\n   BGP4MP Type:\n            Name
      \                    Value       Definition\n            ----                     -----
      \      ----------\n            BGP4MP_STATE_CHANGE      0           See Section
      4.4\n            BGP4MP_MESSAGE           1           See Section 4.4\n            BGP4MP_ENTRY
      \            2           See Section 4.4\n            BGP4MP_SNAPSHOT          3
      \          See Section 4.4\n            BGP4MP_MESSAGE_AS4       4           See
      Section 4.4\n            BGP4MP_STATE_CHANGE_AS4  5           See Section 4.4\n
      \           BGP4MP_MESSAGE_LOCAL     6           See Section 4.4\n            BGP4MP_MESSAGE_AS4_LOCAL
      7           See Section 4.4\n"
    title: 5.7.  Defined BGP4MP and BGP4MP_ET Subtype Codes
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The MRT Format utilizes a structure that can
    store routing protocol\n   information data.  The fields defined in the MRT specification
    are of\n   a descriptive nature and provide information that is useful to\n   facilitate
    the analysis of routing data.  As such, the fields\n   currently defined in the
    MRT specification do not in themselves\n   create additional security risks, since
    the fields are not used to\n   induce any particular behavior by the recipient
    application.\n   Some information contained in an MRT data structure might be\n
    \  considered sensitive or private.  For example, a BGP peer that sends\n   a
    message to an MRT-enabled router might not expect that message to\n   be shared
    beyond the AS to which it is sent.\n   Information that could be considered sensitive
    includes BGP peer IP\n   addresses, BGP Next Hop IP addresses, and BGP Path Attributes.
    \ Such\n   information could be useful to mount attacks against the BGP protocol\n
    \  and routing infrastructure.  RFC 4272 [RFC4272] examines a number of\n   weaknesses
    in the BGP protocol that could potentially be exploited.\n   An organization that
    intends to use the MRT structure to export\n   routing information beyond the
    domain where it is normally accessible\n   (e.g., publishing MRT dumps for use
    by researchers) should verify\n   with any peers whose information might be included,
    and possibly\n   remove sensitive fields.\n   The proposed geolocation extension
    to MRT could reveal the location\n   of an MRT router's peers [GEOMRT].\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [IANA-AF]         IANA, \"Address Family Numbers\",\n
      \                    <http://www.iana.org/numbers.html>.\n   [RFC0791]         Postel,
      J., \"Internet Protocol\", STD 5, RFC 791,\n                     September 1981.\n
      \  [RFC1195]         Callon, R., \"Use of OSI IS-IS for routing in TCP/IP\n
      \                    and dual environments\", RFC 1195, December 1990.\n   [RFC2119]
      \        Bradner, S., \"Key words for use in RFCs to Indicate\n                     Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2328]         Moy, J., \"OSPF
      Version 2\", STD 54, RFC 2328,\n                     April 1998.\n   [RFC2460]
      \        Deering, S. and R. Hinden, \"Internet Protocol,\n                     Version
      6 (IPv6) Specification\", RFC 2460,\n                     December 1998.\n   [RFC3629]
      \        Yergeau, F., \"UTF-8, a transformation format of ISO\n                     10646\",
      STD 63, RFC 3629, November 2003.\n   [RFC4271]         Rekhter, Y., Li, T.,
      and S. Hares, \"A Border\n                     Gateway Protocol 4 (BGP-4)\",
      RFC 4271,\n                     January 2006.\n   [RFC4760]         Bates, T.,
      Chandra, R., Katz, D., and Y. Rekhter,\n                     \"Multiprotocol
      Extensions for BGP-4\", RFC 4760,\n                     January 2007.\n   [RFC5226]
      \        Narten, T. and H. Alvestrand, \"Guidelines for\n                     Writing
      an IANA Considerations Section in RFCs\",\n                     BCP 26, RFC
      5226, May 2008.\n   [RFC5340]         Coltun, R., Ferguson, D., Moy, J., and
      A. Lindem,\n                     \"OSPF for IPv6\", RFC 5340, July 2008.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [GEOMRT]          Manderson, T., \"Multi-Threaded
      Routing Toolkit\n                     (MRT) Border Gateway Protocol (BGP) Routing\n
      \                    Information Export Format with Geo-Location\n                     Extensions\",
      RFC 6397, October 2011.\n   [MRT_PROG_GUIDE]  Labovitz, C., \"MRT Programmer's
      Guide\",\n                     November 1999, <http://www.merit.edu/\n                     networkresearch/mrtprogrammer.pdf>.\n
      \  [POSIX]           Institute of Electrical and Electronics Engineers,\n                     \"P1003.1,
      Information Technology Portable Operating\n                     System Interface
      (POSIX) Part 1: System Application\n                     Program Interface (API)
      [C Language], 1990.\",\n                     IEEE Standard P1003.1.\n   [RFC2080]
      \        Malkin, G. and R. Minnear, \"RIPng for IPv6\",\n                     RFC
      2080, January 1997.\n   [RFC2453]         Malkin, G., \"RIP Version 2\", STD
      56, RFC 2453,\n                     November 1998.\n   [RFC4272]         Murphy,
      S., \"BGP Security Vulnerabilities\n                     Analysis\", RFC 4272,
      January 2006.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  MRT Encoding Examples\n   This appendix, which is not normative,
    contains MRT encoding\n   examples.\n   The following example shows the encoding
    for an MRT record type of\n   BGP4MP and subtype BGP4MP_MESSAGE_AS4.  The Peer
    AS and Local AS\n   numbers are encoded in 4-byte fields due to the use of the\n
    \  BGP4MP_MESSAGE_AS4 subtype.  The encoded BGP Update is shown in\n   hexadecimal.
    \ The AS numbers in the ASPATH in the BGP Update are\n   encoded as 4-byte values
    in accord with the MRT BGP4MP_MESSAGE_AS4\n   subtype.\n        0                   1
    \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |    Timestamp = 1300475700 epoch sec (2011-03-18 19:15:00)     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |          Type = 16            |         Subtype = 4           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                           Length = 82                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                         Peer AS = 64496                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                        Local AS = 64497                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |     Interface Index = 0       |     Address Family  = 1       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                Peer IP Address = 192.0.2.85                   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |               Local IP Address = 198.51.100.4                 |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |  BGP Update =\n                ff ff ff ff ff ff ff ff ff ff ff ff ff
    ff ff ff\n                00 3e 02 00 00 00 1f 40 01 01 02 40 02 0e 02 03\n                00
    00 fb f0 00 00 fb ff 00 00 fb f6 40 03 04 c6\n                33 64 55 c0 08 04
    fb f0 00 0e 18 cb 00 71\n                 Figure 16: MRT BGP4MP_MESSAGE_AS4 Example\n
    \  The contents of the BGP Update Message above are as follows:\n     ORIGIN:
    INCOMPLETE\n     ASPATH: 64496 64511 64502\n     NEXT_HOP: 198.51.100.188\n     COMMUNITY:
    64496:14\n     NLRI: 203.0.113.0/24\n                      Figure 17: BGP Message
    Contents\n   The following example displays the encoding for an MRT record type
    of\n   TABLE_DUMP_V2 and subtype PEER_INDEX_TABLE.  The table in this\n   example
    contains 2 entries.\n        0                   1                   2                   3\n
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |    Timestamp = 1300475700 epoch sec (2011-03-18 19:15:00)     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |          Type = 13            |         Subtype = 1           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                           Length = 34                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |               Collector BGP ID = 198.51.100.4                 |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |     View Name Length = 0      |       Peer Count = 2          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |  Peer Type = 2  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                   Peer BGP ID  = 198.51.100.5                 |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                 Peer IP Address = 198.51.100.5                |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                        Peer AS = 65541                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |  Peer Type = 2  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                   Peer BGP ID  = 192.0.2.33                   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                 Peer IP Address = 192.0.2.33                  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                        Peer AS = 65542                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                 Figure 18: MRT PEER_INDEX_TABLE Example\n   The following example
    displays the encoding for an MRT record type of\n   TABLE_DUMP_V2 and subtype
    RIB_IPV6_UNICAST.  This entry applies to\n   the NLRI prefix of 2001:0DB8::/32.
    \ There is a single entry for this\n   prefix.  The entry applies to the peer
    identified by index location\n   15 in a preceding MRT PEER_INDEX_TABLE record.\n
    \       0                   1                   2                   3\n        0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |    Timestamp = 1300475700 epoch sec (2011-03-18 19:15:00)     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |          Type = 13            |         Subtype = 4           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                           Length = 87                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                      Sequence Number = 42                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      | Preflen = 32  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                 Prefix  =  2001:0DB8::/32                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |    Entry Count = 1            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |    Peer Index =  15           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |Originated Time = 1300475700 epoch sec (2011-03-18 19:15:00)   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |   Attribute Length  =  68     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |   BGP Path Attributes =\n              40 01 01 00 50 02 00 0e 02 03
    00 00 fb f0 00 00\n              fb ff 00 00 fb f6 80 0e 2b 00 02 01 20 20 01
    0d\n              b8 00 0d 00 ff 00 00 00 00 00 00 01 87 fe 80 00\n              00
    00 00 00 00 02 12 f2 ff fe 9f 1b 00 00 00 20\n              20 01 0d b8\n                  Figure
    19: MRT RIB_IPV6_UNICAST Example\n   The contents of the BGP Path Attribute field
    above are as follows:\n   ORIGIN: IGP\n   ASPATH: 64496 64511 64502\n   MP_REACH_NLRI(IPv6
    Unicast)\n   NEXT_HOP: 2001:db8:d:ff::187\n   NEXT_HOP: fe80::212:f2ff:fe9f:1b00\n
    \  NLRI: 2001:0DB8::/32\n                  Figure 20: BGP Path Attribute Contents\n"
  title: Appendix A.  MRT Encoding Examples
- contents:
  - "Appendix B.  Deprecated MRT Types\n   This appendix lists deprecated MRT types.
    \ These types are documented\n   for informational purposes.\n"
  - contents:
    - "B.1.  Deprecated MRT Informational Types\n   The initial MRT format defined
      five Informational Type records.\n   These records were intended to signal the
      state of an MRT data\n   collector and do not contain routing information.  These
      records were\n   intended for use when MRT records were sent over a network
      to a\n   remote repository store.  However, MRT record repository stores have\n
      \  traditionally resided on the same device as the collector, and these\n   Informational
      Types are not known to be implemented.  Further,\n   transport mechanisms for
      MRT records are considered to be outside the\n   scope of this document.\n   The
      Message field MAY contain an OPTIONAL string for diagnostic\n   purposes.  The
      message string encoding MUST follow the UTF-8\n   transformation format [RFC3629].
      \ The Subtype field is unused for\n   these Types and SHOULD be set to 0.\n
      \  The MRT Informational Types are defined below:\n       0    NULL\n       1
      \   START\n       2    DIE\n       3    I_AM_DEAD\n       4    PEER_DOWN\n"
    - contents:
      - "B.1.1.  NULL Type\n   The NULL Type message causes no operation.\n"
      title: B.1.1.  NULL Type
    - contents:
      - "B.1.2.  START Type\n   The START Type indicates that a collector is about
        to begin\n   generating MRT records.\n"
      title: B.1.2.  START Type
    - contents:
      - "B.1.3.  DIE Type\n   The DIE Type signals a remote MRT repository that it
        SHOULD stop\n   accepting messages.\n"
      title: B.1.3.  DIE Type
    - contents:
      - "B.1.4.  I_AM_DEAD Type\n   An I_AM_DEAD MRT record indicates that a collector
        has shut down and\n   has stopped generating MRT records.\n"
      title: B.1.4.  I_AM_DEAD Type
    - contents:
      - "B.1.5.  PEER_DOWN Type\n   The PEER_DOWN message was intended to indicate
        that a collector had\n   lost association with a BGP peer.  However, the MRT
        format provides\n   BGP state change message types that duplicate this functionality.\n"
      title: B.1.5.  PEER_DOWN Type
    title: B.1.  Deprecated MRT Informational Types
  - contents:
    - "B.2.  Other Deprecated MRT Types\n       5    BGP\n       6    RIP\n       7
      \   IDRP\n       8    RIPNG\n       9    BGP4PLUS\n       10   BGP4PLUS_01\n"
    - contents:
      - "B.2.1.  BGP Type\n   The BGP Type indicates that the Message field contains
        BGP routing\n   information.  The BGP routing protocol is defined in RFC 4271\n
        \  [RFC4271].  The information in the message is dependent on the\n   Subtype
        value.  The BGP Type and all associated Subtypes below are\n   considered
        to be deprecated by the BGP4MP Type.\n   The following BGP Subtypes are defined
        for the MRT BGP Type.  As with\n   the BGP Type itself, they are all considered
        to be deprecated.\n       0    BGP_NULL\n       1    BGP_UPDATE\n       2
        \   BGP_PREF_UPDATE\n       3    BGP_STATE_CHANGE\n       4    BGP_SYNC\n
        \      5    BGP_OPEN\n       6    BGP_NOTIFY\n       7    BGP_KEEPALIVE\n"
      - contents:
        - "B.2.1.1.  BGP_NULL Subtype\n   The BGP_NULL Subtype is a reserved Subtype.\n"
        title: B.2.1.1.  BGP_NULL Subtype
      - contents:
        - "B.2.1.2.  BGP_UPDATE Subtype\n   The BGP_UPDATE Subtype is used to encode
          BGP UPDATE messages.  The\n   format of the MRT Message field for this subtype
          is as follows:\n        0                   1                   2                   3\n
          \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |         Peer AS Number
          \       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                         Peer IP Address                       |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |        Local AS Number        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                        Local IP Address                       |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                    BGP UPDATE Contents (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \                      Figure 21: BGP_UPDATE Subtype\n   The BGP UPDATE
          Contents include the entire BGP UPDATE message, which\n   follows the BGP
          Message Header.  The BGP Message Header itself is not\n   included.  The
          Peer AS Number and IP Address fields contain the AS\n   number and IP address
          of the remote system that is generating the BGP\n   UPDATE messages.  The
          Local AS Number and IP Address fields contain\n   the AS number and IP address
          of the local collector system that is\n   archiving the messages.\n"
        title: B.2.1.2.  BGP_UPDATE Subtype
      - contents:
        - "B.2.1.3.  BGP_PREF_UPDATE Subtype\n   The BGP_PREF_UPDATE Subtype is not
          defined.\n"
        title: B.2.1.3.  BGP_PREF_UPDATE Subtype
      - contents:
        - "B.2.1.4.  BGP_STATE_CHANGE Subtype\n   The BGP_STATE_CHANGE Subtype is
          used to reflect changes in the BGP\n   finite state machine.  These FSM
          states are defined in RFC 4271\n   [RFC4271], Section 8.2.2.  Both the Old
          State value and the New State\n   value are encoded as 2-octet numbers.
          \ The state values are defined\n   numerically as follows:\n       1    Idle\n
          \      2    Connect\n       3    Active\n       4    OpenSent\n       5
          \   OpenConfirm\n       6    Established\n   The format of the BGP_STATE_CHANGE
          Subtype MRT Message field is as\n   follows:\n        0                   1
          \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |         Peer AS Number        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                        Peer IP Address                        |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |            Old State          |          New State            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \                   Figure 22: BGP_STATE_CHANGE Subtype\n"
        title: B.2.1.4.  BGP_STATE_CHANGE Subtype
      - contents:
        - "B.2.1.5.  BGP_SYNC Subtype\n   The BGP_SYNC Subtype was intended to convey
          a system file name where\n   BGP Table Dump messages MAY be recorded.  The
          View Number was to\n   correspond to the View Number provided in the TABLE_DUMP
          Type\n   records.  There are no known implementations of this subtype, and
          it\n   SHOULD be ignored.  The following format applies to this subtype:\n
          \       0                   1                   2                   3\n
          \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |        View Number            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |            File Name... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \                       Figure 23: BGP_SYNC Subtype\n   The File Name is
          terminated with a NULL (0) character.\n"
        title: B.2.1.5.  BGP_SYNC Subtype
      - contents:
        - "B.2.1.6.  BGP_OPEN Subtype\n   The BGP_OPEN Subtype is used to encode BGP
          OPEN messages.  The format\n   of the MRT Message field for this subtype
          is the same as the\n   BGP_UPDATE; however, the last field contains the
          contents of the BGP\n   OPEN message.\n"
        title: B.2.1.6.  BGP_OPEN Subtype
      - contents:
        - "B.2.1.7.  BGP_NOTIFY Subtype\n   The BGP_NOTIFY Subtype is used to encode
          BGP NOTIFICATION messages.\n   The format of the MRT Message field for this
          subtype is the same as\n   the BGP_UPDATE; however, the last field contains
          the contents of the\n   BGP NOTIFICATION message.\n"
        title: B.2.1.7.  BGP_NOTIFY Subtype
      - contents:
        - "B.2.1.8.  BGP_KEEPALIVE Subtype\n   The BGP_KEEPALIVE Subtype is used to
          encode BGP KEEPALIVE messages.\n   The format of the MRT Message field for
          this subtype is the same as\n   the BGP_UPDATE; however, the last field
          contains no information.\n"
        title: B.2.1.8.  BGP_KEEPALIVE Subtype
      title: B.2.1.  BGP Type
    - contents:
      - "B.2.2.  RIP Type\n   The RIP Type is used to export RIP packets as defined
        in RFC 2453\n   [RFC2453].  The Subtype field is currently reserved for this
        type and\n   SHOULD be set to 0.\n   The format of the MRT Message field for
        the RIP Type is as follows:\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Peer IP Address                       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         Local IP Address                      |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                    RIP Message Contents (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                           Figure 24: RIP Type\n"
      title: B.2.2.  RIP Type
    - contents:
      - "B.2.3.  IDRP Type\n   The IDRP Type was intended to be used to export Inter-Domain
        Routing\n   Protocol (IDRP) information as defined in the ISO/IEC 10747 standard.\n
        \  However, this type has seen no known use, and there are no details on\n
        \  protocol encoding for this type.\n"
      title: B.2.3.  IDRP Type
    - contents:
      - "B.2.4.  RIPNG Type\n   The RIPNG Type is used to export RIPNG protocol packets
        as defined in\n   RFC 2080 [RFC2080].  The RIPNG protocol updates the RIP
        protocol to\n   support IPv6.  The Subtype field is currently reserved for
        this type\n   and SHOULD be set to 0.\n   The format of the MRT Message field
        for the RIPNG Type is as follows:\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                                                               |\n
        \      ~                        Peer IPv6 Address                      ~\n
        \      |                                                               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                                                               |\n
        \      ~                        Local IPv6 Address                     ~\n
        \      |                                                               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                  RIPNG Message Contents (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                          Figure 25: RIPNG Type\n"
      title: B.2.4.  RIPNG Type
    - contents:
      - "B.2.5.  BGP4PLUS and BGP4PLUS_01 Types\n   The BGP4PLUS and BGP4PLUS_01 Types
        were defined to support IPv6 BGP\n   routing information.  The BGP4PLUS Type
        was specified based on the\n   initial Internet-Draft that became RFC 4760,
        \"Multiprotocol\n   Extensions to BGP-4\".  The BGP4PLUS_01 Type was specified
        to\n   correspond to the -01 revision of that Internet-Draft.  The two Types\n
        \  share the same definitions in terms of their MRT format\n   specifications.\n
        \  The Subtype field definitions are shared with the BGP Type; however,\n
        \  the address fields in the BGP_UPDATE, BGP_OPEN, BGP_NOTIFY,\n   BGP_KEEPALIVE,
        and BGP_STATE_CHANGE Subtype records are extended to\n   16 octets for IPv6
        addresses.  As with the BGP Type, the BGP4PLUS and\n   BGP4PLUS_01 Types are
        deprecated as they were superseded by the\n   BGP4MP Type.\n"
      title: B.2.5.  BGP4PLUS and BGP4PLUS_01 Types
    - contents:
      - "B.2.6.  Deprecated BGP4MP Subtypes\n   The following two subtypes of the
        BGP4MP Type are considered to be\n   deprecated.\n       2    BGP4MP_ENTRY\n
        \      3    BGP4MP_SNAPSHOT\n"
      - contents:
        - "B.2.6.1.  BGP4MP_ENTRY Subtype\n   This subtype is similar to the TABLE_DUMP
          Type and is used to record\n   RIB table entries.  It was intended to include
          true multiprotocol\n   support.  However, this subtype does not support
          4-byte AS numbers\n   and has not been widely implemented.\n        0                   1
          \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |         Peer AS Number        |        Local AS Number        |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |        Interface Index        |        Address Family         |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                      Peer IP Address (variable)               |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                      Local IP Address (variable)              |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |         View Number           |             Status            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                        Time Last Change                       |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |        Address Family         |    SAFI       | Next-Hop-Len  |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                     Next Hop Address (variable)               |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      | Prefix Length  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                     Address Prefix (variable)                 |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |       Attribute Length        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                    BGP Attribute... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \                     Figure 26: BGP4MP_ENTRY Subtype\n"
        title: B.2.6.1.  BGP4MP_ENTRY Subtype
      - contents:
        - "B.2.6.2.  BGP4MP_SNAPSHOT Subtype\n   This subtype was intended to convey
          a system file name where\n   BGP4MP_ENTRY records MAY be recorded.  It is
          similar to the BGP_SYNC\n   Subtype and is deprecated.\n        0                   1
          \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |        View Number            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |            File Name... (variable)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \                   Figure 27: BGP4MP_SNAPSHOT Subtype\n"
        title: B.2.6.2.  BGP4MP_SNAPSHOT Subtype
      title: B.2.6.  Deprecated BGP4MP Subtypes
    title: B.2.  Other Deprecated MRT Types
  title: Appendix B.  Deprecated MRT Types
- contents:
  - "Appendix C.  Acknowledgements\n   The initial MRT specification was developed
    by Craig Labovitz for use\n   in the Multi-thread Routing Toolkit (MRT) project.
    \ The BGP4MP Type\n   was introduced in the Zebra routing software project by
    Kunihiro\n   Ishiguro.  The BGP4MP_ET, ISIS, and ISIS_ET Types were defined in
    the\n   Python Routing Toolkit (PyRT) developed by Richard Mortier while at\n
    \  Sprint Advanced Technology Labs.\n"
  title: Appendix C.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Larry Blunk\n   Merit Network\n   EMail: ljb@merit.edu\n
    \  Manish Karir\n   Merit Network\n   EMail: mkarir@merit.edu\n   Craig Labovitz\n
    \  Deepfield Networks\n   EMail: labovit@deepfield.net\n"
  title: Authors' Addresses
