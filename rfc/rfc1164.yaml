- title: __initial_text__
  contents:
  - "                             M. Mathis, Pittsburgh Supercomputing Center\n  \
    \                     Y. Rekhter, T.J. Watson Research Center, IBM Corp\n    \
    \   Application of the Border Gateway Protocol in the Internet\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC, together with its companion RFC-1163, \"A Border\
    \ Gateway\n   Protocol (BGP)\", define a Proposed Standard for an inter-autonomous\n\
    \   system routing protocol for the Internet.\n   This protocol, like any other\
    \ at this initial stage, may undergo\n   modifications before reaching full Internet\
    \ Standard status as a\n   result of deployment experience.  Implementers are\
    \ encouraged to\n   track the progress of this or any protocol as it moves through\
    \ the\n   standardization process, and to report their own experience with the\n\
    \   protocol.\n   This protocol is being considered by the Interconnectivity Working\n\
    \   Group (IWG) of the Internet Engineering Task Force (IETF).\n   Information\
    \ about the progress of BGP can be monitored and/or\n   reported on the IWG mailing\
    \ list (IWG@nri.reston.va.us).\n   Please refer to the latest edition of the \"\
    IAB Official Protocol\n   Standards\" RFC for current information on the state\
    \ and status of\n   standard Internet protocols.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   5.1 Overview..............................................\
    \   17\n   5.2 Methods for Achieving Stable Interactions.............   17\n \
    \  5.2.1 Propagation of BGP Information via the IGP..........   18\n   5.2.2 Tagged\
    \ Interior Gateway Protocol....................   18\n   5.2.3 Encapsulation.......................................\
    \   19\n   5.2.4 Other Cases.........................................   19\n \
    \  6. Implementation Recommendations.........................   20\n   6.1 Multiple\
    \ Networks Per Message.........................   20\n   6.2 Preventing Excessive\
    \ Resource Utilization.............   20\n   6.3 Processing Messages on a Stream\
    \ Protocol..............   21\n   6.4 Processing Update Messages............................\
    \   21\n   7. Conclusion.............................................   22\n \
    \  References................................................   22\n   Security\
    \ Considerations...................................   22\n   Authors' Addresses........................................\
    \   22\n"
- title: 1. Acknowledgements
  contents:
  - "1. Acknowledgements\n   The authors would like to thank Guy Almes (Rice University),\
    \ Kirk\n   Lougheed (cisco Systems), Hans-Werner Braun (Merit/NSFNET), Sue Hares\n\
    \   (Merit/NSFNET), and the Interconnectivity Working Group of the\n   Internet\
    \ Engineering Task Force (chaired by Guy Almes) for their\n   contributions to\
    \ this paper.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   The Border Gateway Protocol (BGP), described in RFC 1163,\
    \ is an\n   interdomain routing protocol.  The network reachability information\n\
    \   exchanged via BGP provides sufficient information to detect routing\n   loops\
    \ and enforce routing decisions based on performance preference\n   and policy\
    \ constraints as outlined in RFC 1104 [2].\n   This memo uses the term \"Autonomous\
    \ System\" throughout.  The classic\n   definition of an Autonomous System is\
    \ a set of routers under a single\n   technical administration, using an interior\
    \ gateway protocol and\n   common metrics to route packets within the AS, and\
    \ using an exterior\n   gateway protocol to route packets to other ASs.  Since\
    \ this classic\n   definition was developed, it has become common for a single\
    \ AS to use\n   several interior gateway protocols and sometimes several sets\
    \ of\n   metrics within an AS.  The use of the term Autonomous System here\n \
    \  stresses the fact that, even when multiple IGPs and metrics are used,\n   the\
    \ administration of an AS appears to other ASs to have a single\n   coherent interior\
    \ routing plan and presents a consistent picture of\n   what networks are reachable\
    \ through it.  From the standpoint of\n   exterior routing, an AS can be viewed\
    \ as monolithic: reachability to\n   networks directly connected to the AS must\
    \ be equivalent from all\n   border gateways of the AS.\n   This paper discusses\
    \ the use of BGP in the Internet environment.\n   Issues such as topology, the\
    \ interaction between BGP and IGPs, and\n   the enforcement of policy rules with\
    \ BGP will be presented.\n   All of the discussions in this paper are based on\
    \ the assumption that\n   the Internet is a collection of arbitrarily connected\
    \ Autonomous\n   Systems.  The AS is assumed to be administered by a single\n\
    \   administrative entity, at least for the purposes of representation of\n  \
    \ routing information to systems outside of the AS.\n"
- title: 3. BGP Theory and Application
  contents:
  - '3. BGP Theory and Application

    '
- title: 3.1 Topological Model
  contents:
  - "3.1 Topological Model\n   We will be concerned throughout this paper with a general\
    \ graph whose\n   nodes are ASs and whose edges are connections between pairs\
    \ of ASs.\n   The notion of AS is discussed above in Section 2.  When we say that\
    \ a\n   connection exists between two ASs, we mean both of two things:\n   physical\
    \ connection: there is a shared network between the two ASs,\n      and on this\
    \ shared network each AS has at least one border gateway\n      belonging to that\
    \ AS.  Thus the border gateway of each AS can\n      forward packets to the border\
    \ gateway of the other AS without\n      resort to Inter-AS or Intra-AS routing.\n\
    \   BGP connection: there is a BGP session between BGP speakers on each\n    \
    \  of the ASs, and this session communicates to each connected AS\n      those\
    \ routes through the physically connected border gateways of\n      the other\
    \ AS that can be used for specific networks.  Throughout\n      this document\
    \ we place an additional restriction on the BGP\n      speakers that form the\
    \ BGP connection: they must themselves share\n      the same network that their\
    \ border gateways share.  Thus, a BGP\n      session between the adjacent ASs\
    \ requires no support from either\n      Inter-AS or Intra-AS routing.  Cases\
    \ that do not conform to this\n      restriction fall outside the scope of this\
    \ document.\n   Thus, at each connection, each AS has one or more BGP speakers\
    \ and\n   one or more border gateways, and these BGP speakers and border\n   gateways\
    \ are all located on a shared network.  Only the AS's border\n   gateways on the\
    \ connection's shared network may be used by that AS's\n   BGP speakers on that\
    \ shared network in NEXT_HOP attributes in Update\n   messages.  Paths announced\
    \ by a BGP speaker of one AS on a given\n   connection are taken to be feasible\
    \ for each of the border gateways\n   of the other AS on the same connection.\
    \  In all BGP usage, we intend\n   that the flow of packets from one AS to the\
    \ other correspond to\n   advertised AS paths.\n   Much of the traffic carried\
    \ within an AS either originates or\n   terminates at that AS (i.e., either the\
    \ source IP address or the\n   destination IP address of the IP packet identifies\
    \ a host on a\n   network directly connected to that AS).  Traffic that fits this\n\
    \   description is called \"local traffic\".  Traffic that does not fit\n   this\
    \ description is called \"transit traffic\".  A major goal of BGP\n   usage is\
    \ to control the flow of transit traffic.\n   Based on how a particular AS deals\
    \ with transit traffic, the AS may\n   now be placed into one of the following\
    \ categories:\n   stub AS: an AS that has only a single connection to another\
    \ AS.\n      Naturally, a stub AS only carries local traffic.\n   multihomed AS:\
    \ an AS that has more than one connection to other ASs,\n      but refuses to\
    \ carry transit traffic.\n   transit AS: an AS that has more than one connection\
    \ to other ASs and\n      is designed (under certain policy restrictions) to carry\
    \ both\n      transit and local traffic.\n   Since a full AS path provides an\
    \ efficient and straightforward way of\n   suppressing routing loops and eliminates\
    \ the \"count-to-infinity\"\n   problem associated with some distance vector algorithms,\
    \ BGP imposes\n   no topological restrictions on the interconnection of ASs.\n"
- title: 3.2 BGP in the Internet
  contents:
  - '3.2 BGP in the Internet

    '
- title: 3.2.1 Topology Considerations
  contents:
  - "3.2.1 Topology Considerations\n   The overall Internet topology may be viewed\
    \ as an arbitrary\n   interconnection of transit, multihomed, and stub ASs.  In\
    \ order to\n   minimize the impact on the current Internet infrastructure, stub\
    \ and\n   multihomed ASs need not use BGP.  These ASs may run other protocols\n\
    \   (e.g., EGP) to exchange reachability information with transit ASs.\n   Transit\
    \ ASs then tag this information as having been learned via EGP\n   or some other\
    \ method.  The fact that BGP need not run on stub or\n   multihomed ASs has no\
    \ negative impact on the overall quality of\n   inter-AS routing for traffic not\
    \ local to the stub or multihomed ASs\n   in question.\n   Of course, BGP may\
    \ be used for stub and multihomed ASs as well,\n   providing advantage in bandwidth\
    \ and performance over some of the\n   currently used protocols (such as EGP).\
    \ In addition, this would\n   result in less need for the use of defaults and\
    \ in better choices of\n   Inter-AS routes for mulitihomed ASs.\n"
- title: 3.2.2 Global Nature of BGP
  contents:
  - "3.2.2 Global Nature of BGP\n   At a global level, BGP is used to distribute routing\
    \ information\n   among multiple Autonomous Systems.  The information flows can\
    \ be\n   represented as follows:\n                          +--------+       +--------+\n\
    \                    BGP   |  BGP   |  BGP  |  BGP   |  BGP\n                \
    \  --------+        +-------+        +-------\n                          |  IGP\
    \   |       |  IGP   |\n                          +--------+       +--------+\n\
    \                         {___AS A___}     {___AS B___}\n   This diagram points\
    \ out that, while BGP alone carries information\n   between ASs, a combination\
    \ of BGP and an IGP carries information\n   across an AS.  Ensuring consistency\
    \ of routing information between\n   BGP and an IGP within an AS is a significant\
    \ issue and is discussed\n   at length later in this paper.\n"
- title: 3.2.3 BGP Neighbor Relationships
  contents:
  - "3.2.3 BGP Neighbor Relationships\n   As discussed in the introduction, the Internet\
    \ is viewed as a set of\n   arbitrarily connected Autonomous Systems (ASs).  BGP\
    \ gateways in each\n   AS communicate with each other to exchange network reachability\n\
    \   information based on a set of policies established within each AS.\n   Computers\
    \ that communicate directly with each other via BGP are known\n   as BGP neighbors.\
    \  BGP neighbors can be located within the same AS or\n   in different ASs.  For\
    \ the sake of discussion, BGP communications\n   with neighbors in different ASs\
    \ will be referred to as External BGP,\n   and with neighbors in the same AS as\
    \ Internal BGP.\n   External BGP In the case of External BGP, the BGP neighbors\
    \ must\n      belong to different ASs, but share a common network.  This common\n\
    \      network should be used to carry the BGP messages between them.\n      The\
    \ use of BGP across an intervening AS invalidates the AS path\n      information.\
    \  An Autonomous System number must be used with BGP to\n      specify which Autonomous\
    \ System the BGP speaker belongs to.\n   Internal BGP There can be as many BGP\
    \ gateways as deemed necessary\n      within an AS.  Usually, if an AS has multiple\
    \ connections to other\n      ASs, multiple BGP gateways are needed.  All BGP\
    \ gateways\n      representing the same AS must give a consistent image of the\
    \ AS to\n      the outside.  This requires that the BGP gateways have consistent\n\
    \      routing information among them.  These gateways can communicate\n     \
    \ with each other via BGP or by other means.  The policy constraints\n      applied\
    \ to all BGP gateways within an AS must be consistent.\n"
- title: 3.3 Policy Making with BGP
  contents:
  - "3.3 Policy Making with BGP\n   BGP provides the capability of enforcing some\
    \ policies based on\n   various preferences and constraints.  Policies are determined\
    \ by the\n   AS administration and are provided to BGP in the form of\n   configuration\
    \ information.  These policies are enforced within a BGP\n   speaker by affecting\
    \ the selection of paths from multiple\n   alternatives, and by controlling the\
    \ redistribution of routing\n   information.  Policies are not directly encoded\
    \ in the protocol.\n   Non-technical constraints are related to political, security,\
    \ or\n   economic considerations.  For example, if an AS is unwilling to carry\n\
    \   traffic to another AS, it can enforce a policy prohibiting this.  The\n  \
    \ following examples of non-technical constraints can be enforced with\n   the\
    \ use of BGP:\n      1. A multihomed AS can refuse to act as a transit AS for\
    \ other\n         ASs.  (It does so by not advertising routes to networks other\n\
    \         than those directly connected to it.)\n      2. A multihomed AS can\
    \ become a transit AS by allowing a certain\n         set of ASs to use it as\
    \ such.  (It does so by advertising\n         routes to networks to this set of\
    \ ASs.)\n      3. An AS can favor or disfavor the use of certain ASs for carrying\n\
    \         transit traffic from itself to networks advertised with\n         competing\
    \ AS paths.\n   A number of performance-related criteria can be controlled with\
    \ the\n   use of BGP:\n      1. An AS can minimize the number of transit ASs.\
    \  (Shorter AS\n         paths can be preferred over longer ones.)\n      2. The\
    \ quality of transit ASs.  If an AS determines, using BGP,\n         that two\
    \ or more AS paths can be used to reach a given\n         destination, that AS\
    \ can use a variety of means to decide which\n         of the candidate AS paths\
    \ it will use.  The quality of an AS\n         can be measured by such things\
    \ as diameter, link speed,\n         capacity, tendency to become congested, and\
    \ quality of\n         operation.  Information about these qualities might be\n\
    \         determined by means other than BGP.\n      3. Preference of internal\
    \ routes over external routes.\n   Non-technical policy will typically override\
    \ performance issues.\n   For consistency, combinations of policies and route\
    \ selection\n   procedures that might result in equal cost paths must be resolved\
    \ in\n   a deterministic fashion.\n   Fundamental to BGP usage is the rule that\
    \ an AS advertizes to its\n   neighboring ASs only those routes that it uses.\
    \  This rule reflects\n   the \"hop-by-hop\" routing paradigm generally used by\
    \ the current\n   Internet.  Note that some policies that cannot be supported\
    \ by the\n   \"hop-by-hop\" routing paradigm and which require such techniques\
    \ as\n   source routing to enforce.  For example, BGP does not enable one AS\n\
    \   to send traffic to a neighbor AS intending that that traffic take a\n   different\
    \ route from that taken by traffic originating in the\n   neighbor AS.  On the\
    \ other hand, BGP can support any policy\n   conforming to the \"hop-by-hop\"\
    \ routing paradigm.  Since the current\n   Internet uses only the \"hop-by-hop\"\
    \ routing paradigm and since BGP\n   can support any policy that conforms to that\
    \ paradigm, BGP is highly\n   applicable as an inter-AS routing protocol for the\
    \ current Internet.\n"
- title: 4. Operational Issues
  contents:
  - '4. Operational Issues

    '
- title: 4.1 Path Selection
  contents:
  - "4.1 Path Selection\n   One of the major tasks of a BGP speaker for a given AS\
    \ at a given\n   connection is to evaluate different paths to a destination network\n\
    \   from its border gateways at that connection, select the best one, and\n  \
    \ then advertise it to all of its BGP neighbors at that same connection\n   (subject\
    \ to policy constraints).  The key issue is how different\n   paths are evaluated\
    \ and compared.\n   In traditional distance vector protocols (e.g., RIP) there\
    \ is only\n   one metric (e.g., hop count) associated with a path.  As such,\n\
    \   comparison of different paths is reduced to simply comparing two\n   numbers.\
    \  A complication in Inter-AS routing arises from the lack of\n   a universally\
    \ agreed-upon metric among ASs that can be used to\n   evaluate external paths.\
    \  Rather, each AS may have its own set of\n   criteria for path evaluation.\n\
    \   A BGP speaker within an Autonomous System builds a routing database\n   consisting\
    \ of the set of all feasible paths and the list of networks\n   reachable through\
    \ each path.  In an efficient implementation, it will\n   be important to store\
    \ and process these paths and bundle the networks\n   reachable through them.\
    \  For purposes of precise discussion, however,\n   it's useful to consider the\
    \ set of feasible paths for a given\n   destination network.  In most cases, we\
    \ would expect to find only one\n   feasible path in the set.  This will often,\
    \ however, not be the case.\n   All feasible paths must be maintained, and their\
    \ maintenance speeds\n   adaptation to the loss of the primary path, but only\
    \ the primary path\n   at any given time will ever be advertised.\n   The path\
    \ selection process can be formalized by defining a partial\n   order over the\
    \ set of all possible paths to a given destination\n   network.  One way to define\
    \ this partial order is to define a\n   function that maps each full AS path to\
    \ a non-negative integer that\n   denotes the path's degree of preference.  Path\
    \ selection is then\n   reduced to applying this function to all feasible paths\
    \ and choosing\n   the one with the highest degree of preference.\n   In actual\
    \ BGP implementations, criteria for assigning degree of\n   preferences to a path\
    \ can be specified in a configuration file.\n   The process of assigning a degree\
    \ of preference to a path can be\n   based on several sources of information:\n\
    \      1. Information explicitly present in the full AS path.\n      2. A combination\
    \ of information that can be derived from the full\n         AS path and information\
    \ outside the scope of BGP.\n   The criteria used to assign a degree of preference\
    \ to a path can be\n   classified as primitive or compound.  Possible primitive\
    \ criteria\n   include:\n      -  AS count.  Paths with a smaller AS count are\
    \ generally better.\n      -  Presence or absence of a certain AS or ASs in the\
    \ path.  By\n         means of information outside the scope of BGP, an AS may\
    \ know\n         some performance characteristics (e.g., bandwidth, MTU, intra-\n\
    \         AS diameter) of certain ASs and may try to avoid or prefer\n       \
    \  them.\n      -  Path origin.  A path whose endpoint is internal to the last\
    \ AS\n         on the path (BGP is used over the entire path) is generally\n \
    \        better than one for which part of the path was learned via EGP\n    \
    \     or some other means.\n      -  AS path subsets.  An AS path that is a subset\
    \ of a longer AS\n         path to the same destination should be preferred over\
    \ the\n         longer path.  Any problem in the shorter path (such as an\n  \
    \       outage) will also be a problem in the longer path.\n      -  Link dynamics.\
    \  Stable paths should be preferred over unstable\n         ones.  Note that this\
    \ criterion must be used in a very careful\n         way to avoid causing unnecessary\
    \ route fluctuation.  Generally,\n         any criteria that depend on dynamic\
    \ information might cause\n         routing instability and should be treated\
    \ very carefully.\n      -  Policy consideration.  BGP supports policy based routing\
    \ based\n         on the policy based distribution of routing information defined\n\
    \         in RFC 1104 [2].  A BGP gateway may be aware of some policy\n      \
    \   constraints (both within and outside of its own AS) and do\n         appropriate\
    \ path selection.  Paths that do not comply with\n         policy requirements\
    \ are not considered further.\n   Metrics based on compound criteria can be computed\
    \ as a weighted\n   combination of the degree of preferences of primitive criteria.\
    \  The\n   use of compound criteria should be done with extreme caution since\
    \ it\n   involves comparing potentially uncomparable quantities.\n"
- title: 4.2 Syntax and Semantics for BGP Configuration Files
  contents:
  - "4.2 Syntax and Semantics for BGP Configuration Files\n   A major task in using\
    \ BGP is thus to assign a degree of preference to\n   each available AS-path.\
    \  This degree of preference will generally be\n   a function of the number of\
    \ ASs in the path, properties of the\n   specific ASs in the path, the origin\
    \ of the route, and properties of\n   the specific border router to be used in\
    \ the first hop.  In this\n   section we consider how a network administrator\
    \ might articulate this\n   function by means of a configuration file.  In the\
    \ future, we can\n   imagine using tools based on network management protocols\
    \ such as\n   SNMP for this task, but the protocols do not currently support this\n\
    \   ability.\n   In addition to controlling the selection of the best path to\
    \ a given\n   network, the network administrator must control the advertisement\
    \ of\n   this best path to neighboring ASs.  Therefore, path selection and\n \
    \  path distribution emerge as the two key aspects of policy expression\n   in\
    \ BGP usage.\n   Since different aspects of one AS's policy interact, and since\
    \ the\n   policies of different ASs interact, it is important to facilitate the\n\
    \   analysis of such interactions by means of high-quality and consistent\n  \
    \ tools.\n   There is also a need for tools to translate the expression of the\n\
    \   network administrator's policy to some technical mechanism within a\n   BGP\
    \ speaker to implement that policy.\n   These factors suggest that there should\
    \ be a globally consistent way\n   of describing policies in the configuration\
    \ file.  The syntax and\n   semantics of these policies should be capable of expressing\
    \ the path\n   selection phase within the local AS as well as the path\n   redistribution\
    \ phase to other ASs.\n   Because it may be desirable to coordinate routing policy\
    \ at an\n   external level, it may prove worthwhile to create a language to\n\
    \   describe this information in a globally consistent way.  Policies\n   expressed\
    \ in such a language could conceivably be used by some high-\n   level tools to\
    \ analyze the interaction among the routing policies of\n   different Autonomous\
    \ Systems.\n   The following defines one possible syntax and semantics for\n \
    \  describing AS path policies from the point of view of the local AS.\n   Alternative\
    \ syntaxes with equivalent richness of functionality are\n   not precluded.  Other\
    \ mechanisms may be needed to provide a fully\n   functional configuration language.\n\
    \   A complete AS path, supplied by BGP, provides the most important\n   mechanism\
    \ for policy enforcement.  Assigning a degree of preference\n   to a particular\
    \ AS path can be modelled as a matching between this\n   path and one or more\
    \ predefined AS path patterns.  Each predefined AS\n   path pattern has a degree\
    \ of preference that will be assigned to any\n   AS path that matches it.\n  \
    \ Since patterns are naturally expressed by regular expressions, one\n   can use\
    \ regular expressions over the alphabet of AS numbers to define\n   AS path patterns\
    \ and, therefore, to formulate policies.\n   Since certain constructs occur frequently\
    \ in regular expressions, the\n   following notational shorthand (operators) is\
    \ defined:\n      .  matches any AS number.  To improve readability, \".\" can\
    \ be\n         replaced by \"any\" so long as this does not introduce ambiguity.\n\
    \      *  a regular expression followed by * means zero or more\n         repetitions\n\
    \      +  a regular expression followed by + means one or more\n         repetitions\n\
    \      ?  a regular expression followed by ? means zero or one repetition\n  \
    \    |  alternation\n      () parentheses group subexpressions--an operator, such\
    \ as * or\n         works on a single element or on a regular expression enclosed\n\
    \         in parentheses\n      {m,n}  a regular expression followed by {m,n}\
    \ (where m and n are\n         both non-negative integers and m <= n) means at\
    \ least m and at\n         most n repetitions.\n      {m}  a regular expression\
    \ followed by {m} (where m is a positive\n         integer) means exactly m repetitions.\n\
    \      {m,} a regular expression followed by {m,} (where m is a positive\n   \
    \      integer) means m or more repetitions.\n"
- title: Any regular expression is generated by these rules.
  contents:
  - 'Any regular expression is generated by these rules.

    '
- title: 'The Policy Based Routing Language can then be defined as follows:'
  contents:
  - "The Policy Based Routing Language can then be defined as follows:\n      <Policy-Based-Routing>\
    \ ::= { <policy-statement> }\n      Semantics: each policy statement might cause\
    \ a given possible BGP\n      advertisement (possibility) to be installed into\
    \ the routing table\n      as the route to a given (set of) networks.  Thus, an\
    \ empty\n      Policy-Based-Routing means that no possibilities will be accepted.\n\
    \      <policy-statement> ::=\n                  <policy-expression> '=' <dop-expression>\
    \ ';'\n      Semantics: if a given possibility matches the policy-expression,\n\
    \      then that possibility will be accepted with a degree of preference\n  \
    \    denoted by the integer value dop-expression.\n      <policy-expression> ::=\n\
    \              <policy-term> |\n              <policy-term> <policy-operator>\
    \ <policy-term>\n      <policy-term> ::=\n              <network-list> <AS-path>\
    \ <origin> <distribution-list> |\n              '(' <policy-expression> ')' |\n\
    \              NOT <policy-expression> |\n              <>\n      <policy-operator>\
    \ ::= OR | AND\n      Semantics: the intersection of the network list of a possibility\n\
    \      and the network-list must be non-empty; the AS-path of the\n      possibility\
    \ must match the AS-path as a sequence; the origin of\n      the possibility must\
    \ be a member of the origin set; if these\n      conditions are met, the route\
    \ denoted by the possibility is\n      accepted as a possible route to those networks\
    \ of the intersection\n      of the possibility network list and the network-list.\n\
    \      <AS-path> ::= \"regular expression over AS numbers\"\n      Semantics:\
    \ the AS-path of the possibility must be generated by the\n      regular expression\
    \ <AS-path>.\n      <network-list> ::= '<' { network network-list } '>' |\n  \
    \                       '<' ANY '>'\n      Semantics: A non-empty sequence enumerates\
    \ the network numbers of\n      the network-list; ANY denotes the set of all network\
    \ numbers.\n      <origin> ::= IGP | EGP | INCOMPLETE | ANY\n      Semantics:\
    \ origin enumerates the sequence of acceptable origins;\n      ANY denotes the\
    \ set of all origins.\n      <distribution-list> ::= '<' { AS } '>' |\n      \
    \                        '<' ANY '>'\n      Semantics: if a given possibility\
    \ as accepted and installed into\n      the routing table, then distribution-list\
    \ is the set of\n      (neighboring) autonomous systems to whose border routers\
    \ we will\n      distribute the BGP-derived routes.\n      <dop-expression> ::=\
    \ <dop-term> |\n                           <dop-term> '+' <dop-term> |\n     \
    \                      <dop-term> '-' <dop-term> |\n                         \
    \  <dop-term> '*' <dop-term> |\n                           <dop-term> '/' <dop-term>\
    \ |\n                           REJECT\n      <dop-term> ::= <integer> |\n   \
    \                  <function> |\n                     '(' <dop-expression> ')'\n\
    \      Semantics: if a possibility matches with degree of preference\n      REJECT,\
    \ then that possibility will not be used.  Otherwise, the\n      integer value\
    \ of the degree of preference indicates the degree of\n      preference of the\
    \ possibility, with higher values preferred over\n      lower ones.\n   White\
    \ spaces can be used between symbols to improve readability.\n   \"<>\" denotes\
    \ the empty sequence.\n   There are two built-in functions, PathLength() and PathWeight().\n\
    \   PathLength() takes the AS path as an argument and returns the number\n   of\
    \ ASs in that path.  PathWeight() takes the AS path and an AS weight\n   table\
    \ as arguments and returns the sum of weights of the ASs in the\n   AS path as\
    \ defined by the AS weight table.  In order to preserve\n   determinism, the AS\
    \ weight table must always have a default weight\n   which will be assigned to\
    \ any AS which is not in that table.\n   The AS path, as used above, is constructed\
    \ from right to left which\n   is consistent with BGP), so that the most recent\
    \ AS in the path\n   occupies the leftmost position.\n   Each network (and its\
    \ associated complete AS path) received from\n   other BGP neighbors is matched\
    \ against local Routing Policies.\n   If either no match occurs or the degree\
    \ of preference associated with\n   the matched policy is REJECT, then the received\
    \ information is\n   rejected.  Otherwise, a degree of preference associated with\
    \ the\n   matched policy is assigned to that path.  Notice that the process\n\
    \   terminates on the first successful match.  Therefore, policy-terms\n   should\
    \ be ordered from more specific to more general.\n   The semantics of a matched\
    \ policy is as follows:  If a network in\n   <network-list> that was originally\
    \ introduced into BGP from <origin>\n   is received via <AS-path>, that network\
    \ should be redistributed to\n   all ASs in <distribution-list>.\n   The following\
    \ examples (some taken from RFC 1102 [3]) illustrate how\n   Policy Terms can\
    \ be written.\n   In the following topology, H elements are hosts, G elements\
    \ are\n   Policy Gateways running BGP, and numbered elements are ASs.\n      \
    \  H1 --- 1 -G12...G21 - 2 -- G23...G32 -- 3 ----- H2\n               |      \
    \                          |\n               |                               \
    \ |\n               |                                |\n               |- G14...G41\
    \ - 4 -- G43...G34 ---|- G35...G53 - 5\n                              |      \
    \                          |\n                              |                \
    \                |\n                              |                          \
    \     H4\n                              H3\n   In this picture, there are four\
    \ hosts, ten gateways, and five\n   Autonomous Systems.  Gateways G12 and G14\
    \ belong to AS 1.  Gateways\n   G21 and G23 belong to AS 2.  Gateways G41 and\
    \ G43 belongs to AS 4.\n   Gateways G32, G34, and G35 belong to AS 3.  Gateway\
    \ G53 belongs to AS\n   5.  Dashed lines denote intra-AS connections.  Dotted\
    \ lines denote\n   inter-AS connections.\n   First, consider AS 2.  It has no\
    \ hosts attached, and models a transit\n   service, such as the NSFNET backbone\
    \ network.  It may have a very\n   simple policy: it will carry any traffic between\
    \ any two ASs, without\n   further constraint.  If AS 1 and AS 3 are neighboring\
    \ domains, then\n   its policy term could be written as:\n      AS 2: < ANY >\
    \ < (1 | 3) .* > < IGP > < 1 3 > = 10\n   The first component in this policy,\
    \ the network list\n      < ANY >\n   says that any network is subject to this\
    \ policy.  The second\n   component, the AS path\n      < (1 | 3) .* >\n   says\
    \ that routing information that came from either AS 1 or AS 3\n   matches this\
    \ policy, including routes from ASs that lie beyond AS 1\n   and AS 3.  The third\
    \ component, the origin\n      < IGP >\n   says that this route must be interior\
    \ with respect to the originating\n   AS, implying that routes imported via EGP\
    \ or some other mechanism\n   would not match this policy.  The fourth component,\
    \ the distribution\n   list\n      < 1  3 >\n   says that this route may be redistributed\
    \ to both AS 1 and AS 3.\n   Finally, the degree of preference assigned to any\
    \ route which matches\n   this policy is set to 10.\n   To improve readability,\
    \ the above policy can be rewritten as:\n      AS 2: < ANY > < (1 | 3) ANY* >\
    \ < IGP > < 1  3 > = 10\n   Next, consider AS 3.  It is willing to provide transit\
    \ service to AS\n   4 and AS 5, presumably due to multilateral agreements.  AS\
    \ 3 should\n   set its policy as follows:\n      AS 3: < ANY > < (4 | 5) > < IGP\
    \ > < 2  4  5 > = 10\n      AS 3: < ANY > < 2  .* > < ANY > < 4  5 > = 10\n  \
    \    AS 3: < ANY > < 3 > < ANY > < 2  4  5 > = 10\n   This would allow AS 3 to\
    \ distribute internal routes received from ASs\n   4 and 5 to ASs 2, 4, and 5,\
    \ and all backbone routes through AS 2\n   would be distributed to ASs 4 and 5.\
    \  AS 3 would advertise its own\n   networks to ASs 2, 4, and 5.  Hosts in AS\
    \ 4 and AS 5 would be able to\n   reach each other, as well as hosts in ASs 1\
    \ and 3 and anything beyond\n   them.  AS 3 allows any origin in routes from AS\
    \ 2.  This implies that\n   AS 3 trusts AS 2 to impose policy on routes imported\
    \ by means other\n   than BGP.  Note that although the policy statement would\
    \ appear to\n   allow AS 3 to send ASs 4 and 5 their own routes, the BGP protocol\n\
    \   would detect this as a routing loop and prevent it.\n   Now consider AS 1.\
    \  AS 1 wishes to use the backbone service provided\n   by AS 2, and is willing\
    \ to carry transit traffic for AS 4.  The\n   policy statements for AS 1 might\
    \ read:\n      AS 1: < ANY > < 4 > < IGP > < 2 > = 150\n      AS 1: < ANY > <\
    \ 2  .* > < ANY > < 4 > = 150\n      AS 1: < ANY > < 1 > < ANY > < 2  4 > = 150\n\
    \   AS 1 will redistribute all routes learned from the AS 2 backbone to\n   AS\
    \ 4, and vice versa, and distribute routes to its own networks to\n   both AS\
    \ 2 and AS 4.  The degree of preference assigned to any route\n   which matches\
    \ this policy is set to 150.\n   AS 5 is a more interesting case.  AS 5 wishes\
    \ to use the backbone\n   service, but is not directly connected to AS 2.  Its\
    \ policy\n   statements could be as follows:\n      AS 5: < ANY > < 3  4 > < IGP\
    \ > < > = 10\n      AS 5: < ANY > < 3  2  .* > < . > < > = 10\n      AS 5: < ANY\
    \ > < 5 > < . > < 3 > = 10\n   This policy imports routes through AS 2 and AS\
    \ 3 into AS 5, and\n   allows AS 5 and AS 4 to communicate through AS 3.  Since\
    \ AS 5 does\n   not redistribute any routes other than its own, it is a stub AS.\n\
    \   Note that AS 5 does not trust AS 3 to advertise only routes through\n   AS\
    \ 2, and thus applies its own filter to ensure that it only uses the\n   backbone.\
    \  This lack of trust makes it necessary to add the second\n   policy term.\n\
    \   AS 4 is a good example of a multihomed AS.  AS 4 wishes to use AS 3\n   as\
    \ is primary path to the backbone, with AS 1 as a backup.\n   Furthermore, AS\
    \ 4 does not wish to provide any transit service\n   between ASs 1 and 3.  Its\
    \ policy statement could read:\n      AS 4: < ANY > < 3  .* > < ANY > < > = 10\n\
    \      AS 4: < ANY > < 1  .* > < ANY > < > = 20\n      AS 4: < ANY > < 4 > < ANY\
    \ > < 1  3 > = 10\n   Paths to any network through AS 3 are preferred, but AS\
    \ 1 will be\n   used as a backup if necessary.  Note that since AS 4 trusts AS\
    \ 3 to\n   provide it with reasonable routes, it is not necessary to explicitly\n\
    \   import routes from AS 5.  Since the redistribution terms are null\n   except\
    \ for networks within AS 4, AS 4 will never carry any transit\n   traffic.\n \
    \  Given the topology and policies described above, it becomes apparent\n   that\
    \ two paths of equal preference would be available from AS 2 to\n   any of the\
    \ networks in AS 4.  Since ties are not allowed, an\n   arbitrary tie-breaking\
    \ mechanism would come into play (as described\n   above), which might result\
    \ in less than optimal routes to some\n   networks.  An alternative mechanism\
    \ that would provide optimal routes\n   while still allowing fallback paths would\
    \ be to provide network-by-\n   network policies in specific cases, and explicit\
    \ tie-breaking\n   policies for the remaining networks.  For example, the policies\
    \ for\n   AS 2 could be rewritten as follows:\n      AS 2: < 35 > < 1  .* > <\
    \ IGP > < 3 > = 10\n      AS 2: < 35 > < 3  .* > < IGP > < 1 > = 20\n      AS\
    \ 2: < ANY > < 1  .* > < IGP > < 3 > = 20\n      AS 2: < ANY > < 3  .* > < IGP\
    \ > < 1 > = 10\n   Paths to network 35 through AS 1 would be preferred, with AS\
    \ 3 as a\n   fallback; paths to all other networks through AS 3 would be preferred\n\
    \   over those through AS 1.  Such optimizations may become arbitrarily\n   complex.\n\
    \   There may be other, simpler ways to assign a degree of preference to\n   an\
    \ AS path.\n   The simplest way to assign a degree of preference to a particular\n\
    \   path is to use the number of ASs in the AS path as the degree of\n   preference.\
    \  This approach reflects the heuristic that shorter paths\n   are usually better\
    \ than longer ones.  This policy can be implemented\n   by using the PathLength()\
    \ built-in function in the following policy\n   statement:\n      < ANY > < .*\
    \ > < ANY > < ANY > = PathLength(ASpath)\n   This policy assigns to any network\
    \ with an arbitrary AS path a degree\n   of preference equal to the number of\
    \ ASs in the AS path; it then\n   redistributes this information to all other\
    \ BGP speakers. As an\n   example, an AS path which traverses three different\
    \ Autonomous\n   Systems will be assigned the degree of preference 3.\n   Another\
    \ approach is to assign a certain degree of preference to each\n   individual\
    \ AS, and then determine the degree of preference of a\n   particular AS path\
    \ as the sum of the degree of preferences of the ASs\n   in that path.  Note that\
    \ this approach does not require the\n   assignment of a specific degree of preference\
    \ to every AS in the\n   Internet.  For ASs with an unknown degree of preference,\
    \ a default\n   can be used.  This policy can be implemented by using the\n  \
    \ PathWeight() built-in function in the following policy statement:\n      < ANY\
    \ > < .* > < ANY > < ANY >\n                           = PathWeight(ASpath, ASWeightTable)\n\
    \   As an example, if Autonomous Systems 145 and 55 have 10 and 15 as\n   their\
    \ weights in the ASWeightTable, and if the default degree of\n   preference in\
    \ the ASWeightTable is 50, then an AS path that traverses\n   Autonomous Systems\
    \ 145, 164, and 55 will be assigned degree of\n   preference 75.\n   The above\
    \ examples demonstrate some of the simple policies that can\n   be implemented\
    \ with BGP.  In general, very sophisticated policies\n   based on partial or complete\
    \ AS path discrimination can be written\n   and enforced.  It should be emphasized\
    \ that movement toward more\n   sophisticated policies will require parallel effort\
    \ in creating more\n   sophisticated tools for policy interaction analysis.\n"
- title: 5. The Interaction of BGP and an IGP
  contents:
  - '5. The Interaction of BGP and an IGP

    '
- title: 5.1 Overview
  contents:
  - "5.1 Overview\n   By definition, all transit ASs must be able to carry traffic\
    \ external\n   to that AS (neither the source nor destination host belongs to\
    \ the\n   AS).  This requires a certain degree of interaction and coordination\n\
    \   between the Interior Gateway Protocol (IGP) used by that particular\n   AS\
    \ and BGP.  In general, traffic exterior to a given AS is going to\n   pass through\
    \ both interior gateways (gateways that support IGP only)\n   and border gateways\
    \ (gateways that support both IGP and BGP).  All\n   interior gateways receive\
    \ information about external routes from one\n   or more of the border gateways\
    \ of the AS via the IGP.\n   Depending on the mechanism used to propagate BGP\
    \ information within a\n   given AS, special care must be taken to ensure consistency\
    \ between\n   BGP and the IGP, since changes in state are likely to propagate\
    \ at\n   different rates across the AS.  There may be a time window between\n\
    \   the moment when some border gateway (A) receives new BGP routing\n   information\
    \ which was originated from another border gateway (B)\n   within the same AS,\
    \ and the moment the IGP within this AS is capable\n   of routing transit traffic\
    \ to that border gateway (B).  During that\n   time window, either incorrect routing\
    \ or \"black holes\" can occur.\n   In order to minimize such routing problems,\
    \ border gateway (A) should\n   not advertise a route to some exterior network\
    \ X to all of its BGP\n   neighbors in other ASs until all of the interior gateways\
    \ within the\n   AS are ready to route traffic destined to X via the correct exit\n\
    \   border gateway (B).  In other words, interior routing should converge\n  \
    \ on the proper exit gateway before advertising routes via that exit\n   gateway\
    \ to other ASs.\n"
- title: 5.2 Methods for Achieving Stable Interactions
  contents:
  - "5.2 Methods for Achieving Stable Interactions\n   The following discussion outlines\
    \ several techniques capable of\n   achieving stable interactions between BGP\
    \ and the IGP within an\n   Autonomous System.\n"
- title: 5.2.1 Propagation of BGP Information via the IGP
  contents:
  - "5.2.1 Propagation of BGP Information via the IGP\n   While BGP can provide its\
    \ own mechanism for carrying BGP information\n   within an AS, one can also use\
    \ an IGP to transport this information,\n   as long as the IGP supports complete\
    \ flooding of routing information\n   (providing the mechanism to distribute the\
    \ BGP information) and one-\n   pass convergence (making the mechanism effectively\
    \ atomic).  If an\n   IGP is used to carry BGP information, then the period of\n\
    \   desynchronization described earlier does not occur at all, since BGP\n   information\
    \ propagates within the AS synchronously with the IGP, and\n   the IGP converges\
    \ more or less simultaneously with the arrival of the\n   new routing information.\
    \  Note that the IGP only carries BGP\n   information and should not interpret\
    \ or process this information.\n"
- title: 5.2.2 Tagged Interior Gateway Protocol
  contents:
  - "5.2.2 Tagged Interior Gateway Protocol\n   Certain IGPs can tag routes exterior\
    \ to an AS with the identity of\n   their exit points while propagating them within\
    \ the AS.  Each border\n   gateway should use identical tags for announcing exterior\
    \ routing\n   information (received via BGP) both into the IGP and into Internal\n\
    \   BGP when propagating this information to other border gateways within\n  \
    \ the same AS.  Tags generated by a border gateway must uniquely\n   identify\
    \ that particular border gateway--different border gateways\n   must use different\
    \ tags.\n   All Border Gateways within a single AS must observe the following\
    \ two\n   rules:\n   1. Information received via Internal BGP by a border gateway\
    \ A\n      declaring a network to be unreachable must immediately be\n      propagated\
    \ to all of the External BGP neighbors of A.\n   2. Information received via Internal\
    \ BGP by a border gateway A about\n      a reachable network X cannot be propagated\
    \ to any of the External\n      BGP neighbors of A unless/until A has an IGP route\
    \ to X and both\n      the IGP and the BGP routing information have identical\
    \ tags.\n   These rules guarantee that no routing information is announced\n \
    \  externally unless the IGP is capable of correctly supporting it.  It\n   also\
    \ avoids some causes of \"black holes\".\n   One possible method for tagging BGP\
    \ and IGP routes within an AS is to\n   use the IP address of the exit border\
    \ gateway announcing the exterior\n   route into the AS.  In this case the \"\
    gateway\" field in the BGP\n   UPDATE message is used as the tag.\n"
- title: 5.2.3 Encapsulation
  contents:
  - "5.2.3 Encapsulation\n   Encapsulation provides the simplest (in terms of the\
    \ interaction\n   between the IGP and BGP) mechanism for carrying transit traffic\n\
    \   across the AS.  In this approach, transit traffic is encapsulated\n   within\
    \ an IP datagram addressed to the exit gateway.  The only\n   requirement imposed\
    \ on the IGP by this approach is that it should be\n   capable of supporting routing\
    \ between border gateways within the same\n   AS.\n   The address of the exit\
    \ gateway A for some exterior network X is\n   specified in the \"gateway\" field\
    \ of the BGP UPDATE message received\n   from gateway A via Internal BGP by all\
    \ other border gateways within\n   the same AS.  In order to route traffic to\
    \ network X, each border\n   gateway within the AS encapsulates it in datagrams\
    \ addressed to\n   gateway A.  Gateway A then performs decapsulation and forwards\
    \ the\n   original packet to the proper gateway in another AS.\n   Since encapsulation\
    \ does not rely on the IGP to carry exterior\n   routing information, no synchronization\
    \ between BGP and the IGP is\n   required.\n   Some means of identifying datagrams\
    \ containing encapsulated IP, such\n   as an IP protocol type code, must be defined\
    \ if this method is to be\n   used.\n   Note, that if a packet to be encapsulated\
    \ has length that is very\n   close to the MTU, that packet would be fragmented\
    \ at the gateway that\n   performs encapsulation.\n"
- title: 5.2.4 Other Cases
  contents:
  - "5.2.4 Other Cases\n   There may be ASs with IGPs which can neither carry BGP\
    \ information\n   nor tag exterior routes (e.g., RIP).  In addition, encapsulation\
    \ may\n   be either infeasible or undesirable.  In such situations, the\n   following\
    \ two rules must be observed:\n   1. Information received via Internal BGP by\
    \ a border gateway A\n      declaring a network to be unreachable must immediately\
    \ be\n      propagated to all of the External BGP neighbors of A.\n   2. Information\
    \ received via Internal BGP by a border gateway A about\n      a reachable network\
    \ X cannot be propagated to any of the External\n      BGP neighbors of A unless\
    \ A has an IGP route to X and sufficient\n      time (holddown) has passed for\
    \ the IGP routes to have converged.\n   The above rules present necessary (but\
    \ not sufficient) conditions for\n   propagating BGP routing information to other\
    \ ASs.  In contrast to\n   tagged IGPs, these rules cannot ensure that interior\
    \ routes to the\n   proper exit gateways are in place before propagating the routes\
    \ to\n   other ASs.\n   If the convergence time of an IGP is less than some small\
    \ value X,\n   then the time window during which the IGP and BGP are unsynchronized\n\
    \   is less than X as well, and the whole issue can be ignored at the\n   cost\
    \ of transient periods (of less than length X) of routing\n   instability.  A\
    \ reasonable value for X is a matter for further study,\n   but X should probably\
    \ be less than one second.\n   If the convergence time of an IGP cannot be ignored,\
    \ a different\n   approach is needed.  Mechanisms and techniques which might be\n\
    \   appropriate in this situation are subjects for further study.\n"
- title: 6. Implementation Recommendations
  contents:
  - '6. Implementation Recommendations

    '
- title: 6.1 Multiple Networks Per Message
  contents:
  - "6.1 Multiple Networks Per Message\n   The BGP protocol allows for multiple networks\
    \ with the same AS path\n   and next-hop gateway to be specified in one message.\
    \  Making use of\n   this capability is highly recommended.  With one network\
    \ per message\n   there is a substantial increase in overhead in the receiver.\
    \  Not\n   only does the system overhead increase due to the reception of\n  \
    \ multiple messages, but the overhead of scanning the routing table for\n   flash\
    \ updates to BGP peers and other routing protocols (and sending\n   the associated\
    \ messages) is incurred multiple times as well.  One\n   method of building messages\
    \ containing many networks per AS path and\n   gateway from a routing table that\
    \ is not organized per AS path is to\n   build many messages as the routing table\
    \ is scanned.  As each network\n   is processed, a message for the associated\
    \ AS path and gateway is\n   allocated, if it does not exist, and the new network\
    \ is added to it.\n   If such a message exists, the new network is just appended\
    \ to it.  If\n   the message lacks the space to hold the new network, it is\n\
    \   transmitted, a new message is allocated, and the new network is\n   inserted\
    \ into the new message.  When the entire routing table has\n   been scanned, all\
    \ allocated messages are sent and their resources\n   released.  Maximum compression\
    \ is achieved when all networks share a\n   gateway and common path attributes,\
    \ making it possible to send many\n   networks in one 4096-byte message.\n"
- title: 6.2 Preventing Excessive Resource Utilization
  contents:
  - "6.2 Preventing Excessive Resource Utilization\n   When peering with a BGP implementation\
    \ that does not compress\n   multiple networks into one message, it may be necessary\
    \ to take steps\n   to reduce the overhead from the flood of data received when\
    \ a peer is\n   acquired or a significant network topology change occurs.  One\
    \ method\n   of doing this is to rate limit flash updates.  This will eliminate\n\
    \   the redundant scanning of the routing table to provide flash updates\n   for\
    \ BGP peers and other routing protocols.  A disadvantage of this\n   approach\
    \ is that it increases the propagation latency of routing\n   information.  By\
    \ choosing a minimum flash update interval that is not\n   much greater than the\
    \ time it takes to process the multiple messages,\n   this latency should be minimized.\n"
- title: 6.3 Processing Messages on a Stream Protocol
  contents:
  - "6.3 Processing Messages on a Stream Protocol\n   Due to the stream nature of\
    \ TCP, all the data for received messages\n   does not necessarily arrive at the\
    \ same time, due to the nature of\n   TCP.  This can make it difficult to process\
    \ the data as messages,\n   especially on systems such as BSD Unix where it is\
    \ not possible to\n   determine how much data has been received but not yet processed.\
    \  One\n   method that can be used in this situation is to first try to read\n\
    \   just the message header.  For the KeepAlive message type, this is a\n   complete\
    \ message; for other message types, the header should first be\n   verified, in\
    \ particular the total length.  If all checks are\n   successful, the specified\
    \ length, minus the size of the message\n   header is the amount of data left\
    \ to read.  An implementation that\n   would \"hang\" the routing information\
    \ process while trying to read\n   from a peer could set up a message buffer (1024\
    \ bytes) per peer and\n   fill it with data as available until a complete message\
    \ has been\n   received.\n"
- title: 6.4 Processing Update Messages
  contents:
  - "6.4 Processing Update Messages\n   In BGP, all Update messages are incremental.\
    \  Once a particular\n   network is listed in an Update message as being reachable\
    \ through an\n   AS path and gateway, that piece of information is expected to\
    \ be\n   retained indefinitely.  In order for a route to a network to be\n   removed,\
    \ it must be explicitly listed in an Update message as being\n   unreachable or\
    \ with new routing information to replace the old.  Note\n   that a BGP peer will\
    \ only advertise one route to a given network, so\n   any announcement of that\
    \ network by a particular peer replaces any\n   previous information about that\
    \ network received from the same peer.\n   This approach has the obvious advantage\
    \ of low overhead; if all\n   routes are stable, only KeepAlive messages will\
    \ be sent.  There is no\n   periodic flood of route information.\n   However,\
    \ this means that a consistent view of routing information\n   between BGP peers\
    \ is only possible over the course of a single\n   transport connection, since\
    \ there is no mechanism for a complete\n   update.  This requirement is accommodated\
    \ by specifying that BGP\n   peers must transition to the Idle state upon the\
    \ failure of a\n   transport connection.\n"
- title: 7. Conclusion
  contents:
  - "7. Conclusion\n   The BGP protocol provides a high degree of control and flexibility\n\
    \   for doing interdomain routing while enforcing policy and performance\n   constraints\
    \ and avoiding routing loops.  It is hoped that the\n   guidelines presented here\
    \ will provide a starting point for more\n   sophisticated and manageable routing\
    \ in the Internet as it grows.\n"
- title: References
  contents:
  - "References\n   [1]  Lougheed, K. and Y. Rekhter, \"A Border Gateway Protocol\"\
    , RFC\n        1163, cisco Systems and IBM Watson Research Center, June 1990.\n\
    \   [2]  Braun, H-W., \"Models of Policy Based Routing\", RFC 1104,\n        Merit/NSFNET,\
    \ June 1989.\n   [3]  Clark, D., \"Policy Routing in Internet Protocols\", RFC\
    \ 1102,\n        M.I.T., May 1989.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jeffrey C. Honig\n   Theory Center\n   265 Olin Hall\n\
    \   Cornell University\n   Ithaca, NY  14853-5201\n   Phone:  (607) 255-8686\n\
    \   Email:  JCH@TCGOULD.TN.CORNELL.EDU\n   Dave Katz\n   Merit/NSFNET\n   1075\
    \ Beal Ave.\n   Ann Arbor, MI  48109\n   Phone:  (313) 763-4898\n   Email:  DKATZ@MERIT.EDU\n\
    \   Matt Mathis\n   Pittsburgh Supercomputing Center\n   4400 Fifth Ave.\n   Pittsburgh,\
    \ PA  15213\n   Phone:  (412) 268-3319\n   Email:  MATHIS@FARADAY.ECE.CMU.EDU\n\
    \   Yakov Rekhter\n   T.J. Watson Research Center\n   IBM Corporation\n   P.O.\
    \ Box 218\n   Yorktown Heights, NY  10598\n   Phone:  (914) 945-3896\n   Email:\
    \  YAKOV@IBM.COM\n   Jie Yun (Jessica) Yu\n   Merit/NSFNET\n   1075 Beal Ave.\n\
    \   Ann Arbor, MI  48109\n   Phone:  (313) 936-3000\n   Email:  JYY@MERIT.EDU\n"
