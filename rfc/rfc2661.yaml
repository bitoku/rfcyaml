- title: __initial_text__
  contents:
  - '                  Layer Two Tunneling Protocol "L2TP"

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Layer Two Tunneling Protocol (L2TP).\
    \  STD\n   51, RFC 1661 specifies multi-protocol access via PPP [RFC1661].  L2TP\n\
    \   facilitates the tunneling of PPP packets across an intervening\n   network\
    \ in a way that is as transparent as possible to both end-users\n   and applications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   4.4 AVP Summary...........................................\
    \   17\n      4.4.1 AVPs Applicable To All Control Messages..........   17\n \
    \     4.4.2 Result and Error Codes...........................   18\n      4.4.3\
    \ Control Connection Management AVPs...............   20\n      4.4.4 Call Management\
    \ AVPs.............................   27\n      4.4.5 Proxy LCP and Authentication\
    \ AVPs................   34\n      4.4.6 Call Status AVPs.................................\
    \   39\n   5.0 Protocol Operation....................................   41\n \
    \  5.1 Control Connection Establishment......................   41\n      5.1.1\
    \ Tunnel Authentication............................   42\n   5.2 Session Establishment.................................\
    \   42\n      5.2.1 Incoming Call Establishment......................   42\n \
    \     5.2.2 Outgoing Call Establishment......................   43\n   5.3 Forwarding\
    \ PPP Frames.................................   43\n   5.4 Using Sequence Numbers\
    \ on the Data Channel............   44\n   5.5 Keepalive (Hello).....................................\
    \   44\n   5.6 Session Teardown......................................   45\n \
    \  5.7 Control Connection Teardown...........................   45\n   5.8 Reliable\
    \ Delivery of Control Messages.................   46\n   6.0 Control Connection\
    \ Protocol Specification.............   48\n   6.1 Start-Control-Connection-Request\
    \ (SCCRQ)..............   48\n   6.2 Start-Control-Connection-Reply (SCCRP)................\
    \   48\n   6.3 Start-Control-Connection-Connected (SCCCN)............   49\n \
    \  6.4 Stop-Control-Connection-Notification (StopCCN)........   49\n   6.5 Hello\
    \ (HELLO).........................................   49\n   6.6 Incoming-Call-Request\
    \ (ICRQ)..........................   50\n   6.7 Incoming-Call-Reply (ICRP)............................\
    \   51\n   6.8 Incoming-Call-Connected (ICCN)........................   51\n \
    \  6.9 Outgoing-Call-Request (OCRQ)..........................   52\n   6.10 Outgoing-Call-Reply\
    \ (OCRP)...........................   53\n   6.11 Outgoing-Call-Connected (OCCN).......................\
    \   53\n   6.12 Call-Disconnect-Notify (CDN).........................   53\n \
    \  6.13 WAN-Error-Notify (WEN)...............................   54\n   6.14 Set-Link-Info\
    \ (SLI)..................................   54\n   7.0 Control Connection State\
    \ Machines.....................   54\n   7.1 Control Connection Protocol Operation.................\
    \   55\n   7.2 Control Connection States.............................   56\n \
    \     7.2.1 Control Connection Establishment.................   56\n   7.3 Timing\
    \ considerations.................................   58\n   7.4 Incoming calls........................................\
    \   58\n      7.4.1 LAC Incoming Call States.........................   60\n \
    \     7.4.2 LNS Incoming Call States.........................   62\n   7.5 Outgoing\
    \ calls........................................   63\n      7.5.1 LAC Outgoing\
    \ Call States.........................   64\n      7.5.2 LNS Outgoing Call States.........................\
    \   66\n   7.6 Tunnel Disconnection..................................   67\n \
    \  8.0 L2TP Over Specific Media..............................   67\n   8.1 L2TP\
    \ over UDP/IP......................................   68\n   8.2 IP....................................................\
    \   69\n   9.0 Security Considerations...............................   69\n \
    \  9.1 Tunnel Endpoint Security..............................   70\n   9.2 Packet\
    \ Level Security.................................   70\n   9.3 End to End Security...................................\
    \   70\n   9.4 L2TP and IPsec........................................   71\n \
    \  9.5 Proxy PPP Authentication..............................   71\n   10.0 IANA\
    \ Considerations..................................   71\n   10.1 AVP Attributes.......................................\
    \   71\n   10.2 Message Type AVP Values..............................   72\n \
    \  10.3 Result Code AVP Values...............................   72\n      10.3.1\
    \ Result Code Field Values........................   72\n      10.3.2 Error Code\
    \ Field Values.........................   72\n   10.4 Framing Capabilities & Bearer\
    \ Capabilities...........   72\n   10.5 Proxy Authen Type AVP Values.........................\
    \   72\n   10.6 AVP Header Bits......................................   73\n \
    \  11.0 References...........................................   73\n   12.0 Acknowledgments......................................\
    \   74\n   13.0 Authors' Addresses...................................   75\n \
    \  Appendix A: Control Channel Slow Start and Congestion\n               Avoidance.....................................\
    \   76\n   Appendix B: Control Message Examples......................   77\n \
    \  Appendix C: Intellectual Property Notice..................   79\n   Full Copyright\
    \ Statement..................................   80\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   PPP [RFC1661] defines an encapsulation mechanism for transporting\n\
    \   multiprotocol packets across layer 2 (L2) point-to-point links.\n   Typically,\
    \ a user obtains a L2 connection to a Network Access Server\n   (NAS) using one\
    \ of a number of techniques (e.g., dialup POTS, ISDN,\n   ADSL, etc.)  and then\
    \ runs PPP over that connection. In such a\n   configuration, the L2 termination\
    \ point and PPP session endpoint\n   reside on the same physical device (i.e.,\
    \ the NAS).\n   L2TP extends the PPP model by allowing the L2 and PPP endpoints\
    \ to\n   reside on different devices interconnected by a packet-switched\n   network.\
    \  With L2TP, a user has an L2 connection to an access\n   concentrator (e.g.,\
    \ modem bank, ADSL DSLAM, etc.), and the\n   concentrator then tunnels individual\
    \ PPP frames to the NAS. This\n   allows the actual processing of PPP packets\
    \ to be divorced from the\n   termination of the L2 circuit.\n   One obvious benefit\
    \ of such a separation is that instead of requiring\n   the L2 connection terminate\
    \ at the NAS (which may require a\n   long-distance toll charge), the connection\
    \ may terminate at a (local)\n   circuit concentrator, which then extends the\
    \ logical PPP session over\n   a shared infrastructure such as frame relay circuit\
    \ or the Internet.\n   From the user's perspective, there is no functional difference\
    \ between\n   having the L2 circuit terminate in a NAS directly or using L2TP.\n\
    \   L2TP may also solve the multilink hunt-group splitting problem.\n   Multilink\
    \ PPP [RFC1990] requires that all channels composing a\n   multilink bundle be\
    \ grouped at a single Network Access Server (NAS).\n   Due to its ability to project\
    \ a PPP session to a location other than\n   the point at which it was physically\
    \ received, L2TP can be used to\n   make all channels terminate at a single NAS.\
    \ This allows multilink\n   operation even when the calls are spread across distinct\
    \ physical\n   NASs.\n   This document defines the necessary control protocol\
    \ for on-demand\n   creation of tunnels between two nodes and the accompanying\n\
    \   encapsulation for multiplexing multiple, tunneled PPP sessions.\n"
- title: 1.1 Specification of Requirements
  contents:
  - "1.1 Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   Analog Channel\n      A circuit-switched communication path\
    \ which is intended to carry\n      3.1 kHz audio in each direction.\n   Attribute\
    \ Value Pair (AVP)\n      The variable length concatenation of a unique Attribute\n\
    \      (represented by an integer) and a Value containing the actual\n      value\
    \ identified by the attribute. Multiple AVPs make up Control\n      Messages which\
    \ are used in the establishment, maintenance, and\n      teardown of tunnels.\n\
    \   Call\n      A connection (or attempted connection) between a Remote System\
    \ and\n      LAC.  For example, a telephone call through the PSTN. A Call\n  \
    \    (Incoming or Outgoing) which is successfully established between a\n    \
    \  Remote System and LAC results in a corresponding L2TP Session\n      within\
    \ a previously established Tunnel between the LAC and LNS.\n      (See also: Session,\
    \ Incoming Call, Outgoing Call).\n   Called Number\n      An indication to the\
    \ receiver of a call as to what telephone\n      number the caller used to reach\
    \ it.\n   Calling Number\n      An indication to the receiver of a call as to\
    \ the telephone number\n      of the caller.\n   CHAP\n      Challenge Handshake\
    \ Authentication Protocol [RFC1994], a PPP\n      cryptographic challenge/response\
    \ authentication protocol in which\n      the cleartext password is not passed\
    \ over the line.\n   Control Connection\n      A control connection operates in-band\
    \ over a tunnel to control the\n      establishment, release, and maintenance\
    \ of sessions and of the\n      tunnel itself.\n   Control Messages\n      Control\
    \ messages are exchanged between LAC and LNS pairs,\n      operating in-band within\
    \ the tunnel protocol. Control messages\n      govern aspects of the tunnel and\
    \ sessions within the tunnel.\n   Digital Channel\n      A circuit-switched communication\
    \ path which is intended to carry\n      digital information in each direction.\n\
    \   DSLAM\n      Digital Subscriber Line (DSL) Access Module. A network device\
    \ used\n      in the deployment of DSL service. This is typically a concentrator\n\
    \      of individual DSL lines located in a central office (CO) or local\n   \
    \   exchange.\n   Incoming Call\n      A Call received at an LAC to be tunneled\
    \ to an LNS (see Call,\n      Outgoing Call).\n   L2TP Access Concentrator (LAC)\n\
    \      A node that acts as one side of an L2TP tunnel endpoint and is a\n    \
    \  peer to the L2TP Network Server (LNS).  The LAC sits between an\n      LNS\
    \ and a remote system and forwards packets to and from each.\n      Packets sent\
    \ from the LAC to the LNS requires tunneling with the\n      L2TP protocol as\
    \ defined in this document.  The connection from\n      the LAC to the remote\
    \ system is either local (see: Client LAC) or\n      a PPP link.\n   L2TP Network\
    \ Server (LNS)\n      A node that acts as one side of an L2TP tunnel endpoint\
    \ and is a\n      peer to the L2TP Access Concentrator (LAC).  The LNS is the\n\
    \      logical termination point of a PPP session that is being tunneled\n   \
    \   from the remote system by the LAC.\n   Management Domain (MD)\n      A network\
    \ or networks under the control of a single\n      administration, policy or system.\
    \ For example, an LNS's Management\n      Domain might be the corporate network\
    \ it serves. An LAC's\n      Management Domain might be the Internet Service Provider\
    \ that owns\n      and manages it.\n   Network Access Server (NAS)\n      A device\
    \ providing local network access to users across a remote\n      access network\
    \ such as the PSTN. An NAS may also serve as an LAC,\n      LNS or both.\n   Outgoing\
    \ Call\n      A Call placed by an LAC on behalf of an LNS (see Call, Incoming\n\
    \      Call).\n   Peer\n      When used in context with L2TP, peer refers to either\
    \ the LAC or\n      LNS. An LAC's Peer is an LNS and vice versa. When used in\
    \ context\n      with PPP, a peer is either side of the PPP connection.\n   POTS\n\
    \      Plain Old Telephone Service.\n   Remote System\n      An end-system or\
    \ router attached to a remote access network (i.e.\n      a PSTN), which is either\
    \ the initiator or recipient of a call.\n      Also referred to as a dial-up or\
    \ virtual dial-up client.\n   Session\n      L2TP is connection-oriented. The\
    \ LNS and LAC maintain state for\n      each Call that is initiated or answered\
    \ by an LAC. An L2TP Session\n      is created between the LAC and LNS when an\
    \ end-to-end PPP\n      connection is established between a Remote System and\
    \ the LNS.\n      Datagrams related to the PPP connection are sent over the Tunnel\n\
    \      between the LAC and LNS. There is a one to one relationship\n      between\
    \ established L2TP Sessions and their associated Calls. (See\n      also: Call).\n\
    \   Tunnel\n      A Tunnel exists between a LAC-LNS pair. The Tunnel consists\
    \ of a\n      Control Connection and zero or more L2TP Sessions. The Tunnel\n\
    \      carries encapsulated PPP datagrams and Control Messages between\n     \
    \ the LAC and the LNS.\n   Zero-Length Body (ZLB) Message\n      A control packet\
    \ with only an L2TP header. ZLB messages are used\n      for explicitly acknowledging\
    \ packets on the reliable control\n      channel.\n"
- title: 2.0 Topology
  contents:
  - "2.0 Topology\n   The following diagram depicts a typical L2TP scenario. The goal\
    \ is to\n   tunnel PPP frames between the Remote System or LAC Client and an LNS\n\
    \   located at a Home LAN.\n                                                 \
    \   [Home LAN]\n            [LAC Client]----------+                     |\n  \
    \                            ____|_____                +--[Host]\n           \
    \                  |          |               |\n               [LAC]---------|\
    \ Internet |-----[LNS]-----+\n                 |           |__________|      \
    \         |\n            _____|_____                                 :\n     \
    \      |           |\n           |  PSTN     |\n [Remote]--|  Cloud    |\n [System]\
    \  |           |                            [Home LAN]\n           |___________|\
    \                                |\n                 |          ______________\
    \              +---[Host]\n                 |         |              |       \
    \      |\n               [LAC]-------| Frame Relay  |---[LNS]-----+\n        \
    \                   | or ATM Cloud |             |\n                         \
    \  |______________|             :\n   The Remote System initiates a PPP connection\
    \ across the PSTN Cloud to\n   an LAC. The LAC then tunnels the PPP connection\
    \ across the Internet,\n   Frame Relay, or ATM Cloud to an LNS whereby access\
    \ to a Home LAN is\n   obtained. The Remote System is provided addresses from\
    \ the HOME LAN\n   via PPP NCP negotiation. Authentication, Authorization and\
    \ Accounting\n   may be provided by the Home LAN's Management Domain as if the\
    \ user\n   were connected to a Network Access Server directly.\n   A LAC Client\
    \ (a Host which runs L2TP natively) may also participate\n   in tunneling to the\
    \ Home LAN without use of a separate LAC. In this\n   case, the Host containing\
    \ the LAC Client software already has a\n   connection to the public Internet.\
    \ A \"virtual\" PPP connection is then\n   created and the local L2TP LAC Client\
    \ software creates a tunnel to\n   the LNS. As in the above case, Addressing,\
    \ Authentication,\n   Authorization and Accounting will be provided by the Home\
    \ LAN's\n   Management Domain.\n"
- title: 3.0 Protocol Overview
  contents:
  - "3.0 Protocol Overview\n   L2TP utilizes two types of messages, control messages\
    \ and data\n   messages. Control messages are used in the establishment, maintenance\n\
    \   and clearing of tunnels and calls. Data messages are used to\n   encapsulate\
    \ PPP frames being carried over the tunnel. Control\n   messages utilize a reliable\
    \ Control Channel within L2TP to guarantee\n   delivery (see section 5.1 for details).\
    \ Data messages are not\n   retransmitted when packet loss occurs.\n   +-------------------+\n\
    \   | PPP Frames        |\n   +-------------------+    +-----------------------+\n\
    \   | L2TP Data Messages|    | L2TP Control Messages |\n   +-------------------+\
    \    +-----------------------+\n   | L2TP Data Channel |    | L2TP Control Channel\
    \  |\n   | (unreliable)      |    | (reliable)            |\n   +------------------------------------------------+\n\
    \   |      Packet Transport (UDP, FR, ATM, etc.)     |\n   +------------------------------------------------+\n\
    \   Figure 3.0 L2TP Protocol Structure\n   Figure 3.0 depicts the relationship\
    \ of PPP frames and Control\n   Messages over the L2TP Control and Data Channels.\
    \ PPP Frames are\n   passed over an unreliable Data Channel encapsulated first\
    \ by an L2TP\n   header and then a Packet Transport such as UDP, Frame Relay,\
    \ ATM,\n   etc. Control messages are sent over a reliable L2TP Control Channel\n\
    \   which transmits packets in-band over the same Packet Transport.\n   Sequence\
    \ numbers are required to be present in all control messages\n   and are used\
    \ to provide reliable delivery on the Control Channel.\n   Data Messages may use\
    \ sequence numbers to reorder packets and detect\n   lost packets.\n   All values\
    \ are placed into their respective fields and sent in\n   network order (high\
    \ order octets first).\n"
- title: 3.1 L2TP Header Format
  contents:
  - "3.1 L2TP Header Format\n   L2TP packets for the control channel and data channel\
    \ share a common\n   header format. In each case where a field is optional, its\
    \ space does\n   not exist in the message if the field is marked not present.\
    \ Note\n   that while optional on data messages, the Length, Ns, and Nr fields\n\
    \   marked as optional below, are required to be present on all control\n   messages.\n\
    \   This header is formatted:\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |T|L|x|x|S|x|O|P|x|x|x|x|  Ver  |          Length (opt)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tunnel ID           |           Session ID          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Ns (opt)          |             Nr (opt)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Offset Size (opt)        |    Offset pad... (opt)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure 3.1 L2TP Message Header\n   The Type (T) bit indicates the type of\
    \ message. It is set to 0 for a\n   data message and 1 for a control message.\n\
    \   If the Length (L) bit is 1, the Length field is present. This bit\n   MUST\
    \ be set to 1 for control messages.\n   The x bits are reserved for future extensions.\
    \ All reserved bits MUST\n   be set to 0 on outgoing messages and ignored on incoming\
    \ messages.\n   If the Sequence (S) bit is set to 1 the Ns and Nr fields are present.\n\
    \   The S bit MUST be set to 1 for control messages.\n   If the Offset (O) bit\
    \ is 1, the Offset Size field is present. The O\n   bit MUST be set to 0 (zero)\
    \ for control messages.\n   If the Priority (P) bit is 1, this data message should\
    \ receive\n   preferential treatment in its local queuing and transmission.  LCP\n\
    \   echo requests used as a keepalive for the link, for instance, should\n   generally\
    \ be sent with this bit set to 1. Without it, a temporary\n   interval of local\
    \ congestion could result in interference with\n   keepalive messages and unnecessary\
    \ loss of the link. This feature is\n   only for use with data messages. The P\
    \ bit MUST be set to 0 for all\n   control messages.\n   Ver MUST be 2, indicating\
    \ the version of the L2TP data message header\n   described in this document.\
    \ The value 1 is reserved to permit\n   detection of L2F [RFC2341] packets should\
    \ they arrive intermixed with\n   L2TP packets. Packets received with an unknown\
    \ Ver field MUST be\n   discarded.\n   The Length field indicates the total length\
    \ of the message in octets.\n   Tunnel ID indicates the identifier for the control\
    \ connection. L2TP\n   tunnels are named by identifiers that have local significance\
    \ only.\n   That is, the same tunnel will be given different Tunnel IDs by each\n\
    \   end of the tunnel. Tunnel ID in each message is that of the intended\n   recipient,\
    \ not the sender. Tunnel IDs are selected and exchanged as\n   Assigned Tunnel\
    \ ID AVPs during the creation of a tunnel.\n   Session ID indicates the identifier\
    \ for a session within a tunnel.\n   L2TP sessions are named by identifiers that\
    \ have local significance\n   only. That is, the same session will be given different\
    \ Session IDs\n   by each end of the session. Session ID in each message is that\
    \ of the\n   intended recipient, not the sender. Session IDs are selected and\n\
    \   exchanged as Assigned Session ID AVPs during the creation of a\n   session.\n\
    \   Ns indicates the sequence number for this data or control message,\n   beginning\
    \ at zero and incrementing by one (modulo 2**16) for each\n   message sent. See\
    \ Section 5.8 and 5.4 for more information on using\n   this field.\n   Nr indicates\
    \ the sequence number expected in the next control message\n   to be received.\
    \  Thus, Nr is set to the Ns of the last in-order\n   message received plus one\
    \ (modulo 2**16). In data messages, Nr is\n   reserved and, if present (as indicated\
    \ by the S-bit), MUST be ignored\n   upon receipt. See section 5.8 for more information\
    \ on using this\n   field in control messages.\n   The Offset Size field, if present,\
    \ specifies the number of octets\n   past the L2TP header at which the payload\
    \ data is expected to start.\n   Actual data within the offset padding is undefined.\
    \ If the offset\n   field is present, the L2TP header ends after the last octet\
    \ of the\n   offset padding.\n"
- title: 3.2 Control Message Types
  contents:
  - "3.2 Control Message Types\n   The Message Type AVP (see section 4.4.1) defines\
    \ the specific type of\n   control message being sent. Recall from section 3.1\
    \ that this is only\n   for control messages, that is, messages with the T-bit\
    \ set to 1.\n   This document defines the following control message types (see\n\
    \   Section 6.1 through 6.14 for details on the construction and use of\n   each\
    \ message):\n   Control Connection Management\n      0  (reserved)\n      1  (SCCRQ)\
    \    Start-Control-Connection-Request\n      2  (SCCRP)    Start-Control-Connection-Reply\n\
    \      3  (SCCCN)    Start-Control-Connection-Connected\n      4  (StopCCN)  Stop-Control-Connection-Notification\n\
    \      5  (reserved)\n      6  (HELLO)    Hello\n   Call Management\n      7 \
    \ (OCRQ)     Outgoing-Call-Request\n      8  (OCRP)     Outgoing-Call-Reply\n\
    \      9  (OCCN)     Outgoing-Call-Connected\n      10 (ICRQ)     Incoming-Call-Request\n\
    \      11 (ICRP)     Incoming-Call-Reply\n      12 (ICCN)     Incoming-Call-Connected\n\
    \      13 (reserved)\n      14 (CDN)      Call-Disconnect-Notify\n   Error Reporting\n\
    \      15 (WEN)      WAN-Error-Notify\n   PPP Session Control\n      16 (SLI)\
    \      Set-Link-Info\n"
- title: 4.0 Control Message Attribute Value Pairs
  contents:
  - "4.0 Control Message Attribute Value Pairs\n   To maximize extensibility while\
    \ still permitting interoperability, a\n   uniform method for encoding message\
    \ types and bodies is used\n   throughout L2TP.  This encoding will be termed\
    \ AVP (Attribute-Value\n   Pair) in the remainder of this document.\n"
- title: 4.1 AVP Format
  contents:
  - "4.1 AVP Format\n   Each AVP is encoded as:\n    0                   1       \
    \            2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|H| rsvd  |      Length       |           Vendor ID           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Attribute Type        |        Attribute Value...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       [until Length is reached]...                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The first six bits are a bit mask, describing the general attributes\n   of\
    \ the AVP.\n   Two bits are defined in this document, the remaining are reserved\
    \ for\n   future extensions.  Reserved bits MUST be set to 0. An AVP received\n\
    \   with a reserved bit set to 1 MUST be treated as an unrecognized AVP.\n   Mandatory\
    \ (M) bit: Controls the behavior required of an\n   implementation which receives\
    \ an AVP which it does not recognize. If\n   the M bit is set on an unrecognized\
    \ AVP within a message associated\n   with a particular session, the session associated\
    \ with this message\n   MUST be terminated. If the M bit is set on an unrecognized\
    \ AVP within\n   a message associated with the overall tunnel, the entire tunnel\
    \ (and\n   all sessions within) MUST be terminated. If the M bit is not set, an\n\
    \   unrecognized AVP MUST be ignored. The control message must then\n   continue\
    \ to be processed as if the AVP had not been present.\n   Hidden (H) bit: Identifies\
    \ the hiding of data in the Attribute Value\n   field of an AVP.  This capability\
    \ can be used to avoid the passing of\n   sensitive data, such as user passwords,\
    \ as cleartext in an AVP.\n   Section 4.3 describes the procedure for performing\
    \ AVP hiding.\n   Length: Encodes the number of octets (including the Overall\
    \ Length\n   and bitmask fields) contained in this AVP. The Length may be\n  \
    \ calculated as 6 + the length of the Attribute Value field in octets.\n   The\
    \ field itself is 10 bits, permitting a maximum of 1023 octets of\n   data in\
    \ a single AVP. The minimum Length of an AVP is 6. If the\n   length is 6, then\
    \ the Attribute Value field is absent.\n   Vendor ID: The IANA assigned \"SMI\
    \ Network Management Private\n   Enterprise Codes\" [RFC1700] value.  The value\
    \ 0, corresponding to\n   IETF adopted attribute values, is used for all AVPs\
    \ defined within\n   this document. Any vendor wishing to implement their own\
    \ L2TP\n   extensions can use their own Vendor ID along with private Attribute\n\
    \   values, guaranteeing that they will not collide with any other\n   vendor's\
    \ extensions, nor with future IETF extensions. Note that there\n   are 16 bits\
    \ allocated for the Vendor ID, thus limiting this feature\n   to the first 65,535\
    \ enterprises.\n   Attribute Type: A 2 octet value with a unique interpretation\
    \ across\n   all AVPs defined under a given Vendor ID.\n   Attribute Value: This\
    \ is the actual value as indicated by the Vendor\n   ID and Attribute Type. It\
    \ follows immediately after the Attribute\n   Type field, and runs for the remaining\
    \ octets indicated in the Length\n   (i.e., Length minus 6 octets of header).\
    \ This field is absent if the\n   Length is 6.\n"
- title: 4.2 Mandatory AVPs
  contents:
  - "4.2 Mandatory AVPs\n   Receipt of an unknown AVP that has the M-bit set is catastrophic\
    \ to\n   the session or tunnel it is associated with. Thus, the M bit should\n\
    \   only be defined for AVPs which are absolutely crucial to proper\n   operation\
    \ of the session or tunnel. Further, in the case where the\n   LAC or LNS receives\
    \ an unknown AVP with the M-bit set and shuts down\n   the session or tunnel accordingly,\
    \ it is the full responsibility of\n   the peer sending the Mandatory AVP to accept\
    \ fault for causing an\n   non-interoperable situation. Before defining an AVP\
    \ with the M-bit\n   set, particularly a vendor-specific AVP, be sure that this\
    \ is the\n   intended consequence.\n   When an adequate alternative exists to\
    \ use of the M-bit, it should be\n   utilized. For example, rather than simply\
    \ sending an AVP with the M-\n   bit set to determine if a specific extension\
    \ exists, availability may\n   be identified by sending an AVP in a request message\
    \ and expecting a\n   corresponding AVP in a reply message.\n   Use of the M-bit\
    \ with new AVPs (those not defined in this document)\n   MUST provide the ability\
    \ to configure the associated feature off,\n   such that the AVP is either not\
    \ sent, or sent with the M-bit not set.\n"
- title: 4.3 Hiding of AVP Attribute Values
  contents:
  - "4.3 Hiding of AVP Attribute Values\n   The H bit in the header of each AVP provides\
    \ a mechanism to indicate\n   to the receiving peer whether the contents of the\
    \ AVP are hidden or\n   present in cleartext.  This feature can be used to hide\
    \ sensitive\n   control message data such as user passwords or user IDs.\n   The\
    \ H bit MUST only be set if a shared secret exists between the LAC\n   and LNS.\
    \ The shared secret is the same secret that is used for tunnel\n   authentication\
    \ (see Section 5.1.1).  If the H bit is set in any\n   AVP(s) in a given control\
    \ message, a Random Vector AVP must also be\n   present in the message and MUST\
    \ precede the first AVP having an H bit\n   of 1.\n   Hiding an AVP value is done\
    \ in several steps. The first step is to\n   take the length and value fields\
    \ of the original (cleartext) AVP and\n   encode them into a Hidden AVP Subformat\
    \ as follows:\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   Length\
    \ of Original Value    |   Original Attribute Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ...                          |             Padding ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length of Original Attribute Value:  This is length of the Original\n   Attribute\
    \ Value to be obscured in octets. This is necessary to\n   determine the original\
    \ length of the Attribute Value which is lost\n   when the additional Padding\
    \ is added.\n   Original Attribute Value:  Attribute Value that is to be obscured.\n\
    \   Padding:  Random additional octets used to obscure length of the\n   Attribute\
    \ Value that is being hidden.\n   To mask the size of the data being hidden, the\
    \ resulting subformat\n   MAY be padded as shown above. Padding does NOT alter\
    \ the value placed\n   in the Length of Original Attribute Value field, but does\
    \ alter the\n   length of the resultant AVP that is being created. For example,\
    \ If an\n   Attribute Value to be hidden is 4 octets in length, the unhidden AVP\n\
    \   length would be 10 octets (6 + Attribute Value length). After hiding,\n  \
    \ the length of the AVP will become 6 + Attribute Value length + size\n   of the\
    \ Length of Original Attribute Value field + Padding. Thus, if\n   Padding is\
    \ 12 octets, the AVP length will be 6 + 4 + 2 + 12 = 24\n   octets.\n   Next,\
    \ An MD5 hash is performed on the concatenation of:\n   + the 2 octet Attribute\
    \ number of the AVP\n   + the shared secret\n   + an arbitrary length random vector\n\
    \   The value of the random vector used in this hash is passed in the\n   value\
    \ field of a Random Vector AVP. This Random Vector AVP must be\n   placed in the\
    \ message by the sender before any hidden AVPs. The same\n   random vector may\
    \ be used for more than one hidden AVP in the same\n   message. If a different\
    \ random vector is used for the hiding of\n   subsequent AVPs then a new Random\
    \ Vector AVP must be placed in the\n   command message before the first AVP to\
    \ which it applies.\n   The MD5 hash value is then XORed with the first 16 octet\
    \ (or less)\n   segment of the Hidden AVP Subformat and placed in the Attribute\
    \ Value\n   field of the Hidden AVP.  If the Hidden AVP Subformat is less than\
    \ 16\n   octets, the Subformat is transformed as if the Attribute Value field\n\
    \   had been padded to 16 octets before the XOR, but only the actual\n   octets\
    \ present in the Subformat are modified, and the length of the\n   AVP is not\
    \ altered.\n   If the Subformat is longer than 16 octets, a second one-way MD5\
    \ hash\n   is calculated over a stream of octets consisting of the shared secret\n\
    \   followed by the result of the first XOR.  That hash is XORed with the\n  \
    \ second 16 octet (or less) segment of the Subformat and placed in the\n   corresponding\
    \ octets of the Value field of the Hidden AVP.\n   If necessary, this operation\
    \ is repeated, with the shared secret used\n   along with each XOR result to generate\
    \ the next hash to XOR the next\n   segment of the value with.\n   The hiding\
    \ method was adapted from RFC 2138 [RFC2138] which was taken\n   from the \"Mixing\
    \ in the Plaintext\" section in the book \"Network\n   Security\" by Kaufman,\
    \ Perlman and Speciner [KPS].  A detailed\n   explanation of the method follows:\n\
    \   Call the shared secret S, the Random Vector RV, and the Attribute\n   Value\
    \ AV. Break the value field into 16-octet chunks p1, p2, etc.\n   with the last\
    \ one padded at the end with random data to a 16-octet\n   boundary.  Call the\
    \ ciphertext blocks c(1), c(2), etc.  We will also\n   define intermediate values\
    \ b1, b2, etc.\n          b1 = MD5(AV + S + RV)   c(1) = p1 xor b1\n         \
    \ b2 = MD5(S  + c(1))     c(2) = p2 xor b2\n                      .          \
    \             .\n                      .                       .\n           \
    \           .                       .\n          bi = MD5(S  + c(i-1))   c(i)\
    \ = pi xor bi\n   The String will contain c(1)+c(2)+...+c(i) where + denotes\n\
    \   concatenation.\n   On receipt, the random vector is taken from the last Random\
    \ Vector\n   AVP encountered in the message prior to the AVP to be unhidden. \
    \ The\n   above process is then reversed to yield the original value.\n"
- title: 4.4 AVP Summary
  contents:
  - "4.4 AVP Summary\n   The following sections contain a list of all L2TP AVPs defined\
    \ in\n   this document.\n   Following the name of the AVP is a list indicating\
    \ the message types\n   that utilize each AVP. After each AVP title follows a\
    \ short\n   description of the purpose of the AVP, a detail (including a graphic)\n\
    \   of the format for the Attribute Value, and any additional information\n  \
    \ needed for proper use of the avp.\n"
- title: 4.4.1 AVPs Applicable To All Control Messages
  contents:
  - "4.4.1 AVPs Applicable To All Control Messages\n   Message Type (All Messages)\n\
    \      The Message Type AVP, Attribute Type 0, identifies the control\n      message\
    \ herein and defines the context in which the exact meaning\n      of the following\
    \ AVPs will be determined.\n      The Attribute Value field for this AVP has the\
    \ following format:\n       0                   1\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |         Message\
    \ Type          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The Message\
    \ Type is a 2 octet unsigned integer.\n      The Message Type AVP MUST be the\
    \ first AVP in a message,\n      immediately following the control message header\
    \ (defined in\n      section 3.1). See Section 3.2 for the list of defined control\n\
    \      message types and their identifiers.\n      The Mandatory (M) bit within\
    \ the Message Type AVP has special\n      meaning. Rather than an indication as\
    \ to whether the AVP itself\n      should be ignored if not recognized, it is\
    \ an indication as to\n      whether the control message itself should be ignored.\
    \ Thus, if the\n      M-bit is set within the Message Type AVP and the Message\
    \ Type is\n      unknown to the implementation, the tunnel MUST be cleared.  If\
    \ the\n      M-bit is not set, then the implementation may ignore an unknown\n\
    \      message type. The M-bit MUST be set to 1 for all message types\n      defined\
    \ in this document. This AVP may not be hidden (the H-bit\n      MUST be 0). \
    \ The Length of this AVP is 8.\n   Random Vector (All Messages)\n      The Random\
    \ Vector AVP, Attribute Type 36, is used to enable the\n      hiding of the Attribute\
    \ Value of arbitrary AVPs.\n      The Attribute Value field for this AVP has the\
    \ following format:\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Random Octet String ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Random Octet String may be of arbitrary length, although a\n      random\
    \ vector of at least 16 octets is recommended.  The string\n      contains the\
    \ random vector for use in computing the MD5 hash to\n      retrieve or hide the\
    \ Attribute Value of a hidden AVP (see Section\n      4.2).\n      More than one\
    \ Random Vector AVP may appear in a message, in which\n      case a hidden AVP\
    \ uses the Random Vector AVP most closely\n      preceding it.  This AVP MUST\
    \ precede the first AVP with the H bit\n      set.\n      The M-bit for this AVP\
    \ MUST be set to 1.  This AVP MUST NOT be\n      hidden (the H-bit MUST be 0).\
    \ The Length of this AVP is 6 plus the\n      length of the Random Octet String.\n"
- title: 4.4.2 Result and Error Codes
  contents:
  - "4.4.2 Result and Error Codes\n   Result Code (CDN, StopCCN)\n      The Result\
    \ Code AVP, Attribute Type 1, indicates the reason for\n      terminating the\
    \ control channel or session.\n      The Attribute Value field for this AVP has\
    \ the following format:\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Result Code          |        Error Code (opt)       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Error Message (opt) ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Result Code is a 2 octet unsigned integer.  The optional Error\n  \
    \    Code is a 2 octet unsigned integer.  An optional Error Message can\n    \
    \  follow the Error Code field.  Presence of the Error Code and\n      Message\
    \ are indicated by the AVP Length field. The Error Message\n      contains an\
    \ arbitrary string providing further (human readable)\n      text associated with\
    \ the condition. Human readable text in all\n      error messages MUST be provided\
    \ in the UTF-8 charset using the\n      Default Language [RFC2277].\n      This\
    \ AVP MUST NOT be hidden (the H-bit MUST be 0). The M-bit for\n      this AVP\
    \ MUST be set to 1.  The Length is 8 if there is no Error\n      Code or Message,\
    \ 10 if there is an Error Code and no Error Message\n      or 10 + the length\
    \ of the Error Message if there is an Error Code\n      and Message.\n      Defined\
    \ Result Code values for the StopCCN message are:\n         0 - Reserved\n   \
    \      1 - General request to clear control connection\n         2 - General error--Error\
    \ Code indicates the problem\n         3 - Control channel already exists\n  \
    \       4 - Requester is not authorized to establish a control\n             channel\n\
    \         5 - The protocol version of the requester is not\n             supported\n\
    \              Error Code indicates highest version supported\n         6 - Requester\
    \ is being shut down\n         7 - Finite State Machine error\n      Defined Result\
    \ Code values for the CDN message are:\n         0 - Reserved\n         1 - Call\
    \ disconnected due to loss of carrier\n         2 - Call disconnected for the\
    \ reason indicated\n             in error code\n         3 - Call disconnected\
    \ for administrative reasons\n         4 - Call failed due to lack of appropriate\
    \ facilities\n             being available (temporary condition)\n         5 -\
    \ Call failed due to lack of appropriate facilities being\n             available\
    \ (permanent condition)\n         6 - Invalid destination\n         7 - Call failed\
    \ due to no carrier detected\n         8 - Call failed due to detection of a busy\
    \ signal\n         9 - Call failed due to lack of a dial tone\n         10 - Call\
    \ was not established within time allotted by LAC\n         11 - Call was connected\
    \ but no appropriate framing was\n              detected\n      The Error Codes\
    \ defined below pertain to types of errors that are\n      not specific to any\
    \ particular L2TP request, but rather to\n      protocol or message format errors.\
    \ If an L2TP reply indicates in\n      its Result Code that a general error occurred,\
    \ the General Error\n      value should be examined to determine what the error\
    \ was. The\n      currently defined General Error codes and their meanings are:\n\
    \         0 - No general error\n         1 - No control connection exists yet\
    \ for this LAC-LNS pair\n         2 - Length is wrong\n         3 - One of the\
    \ field values was out of range or\n             reserved field was non-zero\n\
    \         4 - Insufficient resources to handle this operation now\n         5\
    \ - The Session ID is invalid in this context\n         6 - A generic vendor-specific\
    \ error occurred in the LAC\n         7 - Try another.  If LAC is aware of other\
    \ possible LNS\n             destinations, it should try one of them.  This can\
    \ be\n             used to guide an LAC based on LNS policy, for instance,\n \
    \            the existence of multilink PPP bundles.\n         8 - Session or\
    \ tunnel was shutdown due to receipt of an unknown\n             AVP with the\
    \ M-bit set (see section 4.2). The Error Message\n             SHOULD contain\
    \ the attribute of the offending AVP in (human\n             readable) text form.\n\
    \      When a General Error Code of 6 is used, additional information\n      about\
    \ the error SHOULD be included in the Error Message field.\n"
- title: 4.4.3 Control Connection Management AVPs
  contents:
  - "4.4.3 Control Connection Management AVPs\n   Protocol Version (SCCRP, SCCRQ)\n\
    \      The Protocol Version AVP, Attribute Type 2, indicates the L2TP\n      protocol\
    \ version of the sender.\n      The Attribute Value field for this AVP has the\
    \ following format:\n       0                   1\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      Ver     \
    \ |     Rev       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The Ver field\
    \ is a 1 octet unsigned integer containing the value\n      1. Rev field is a\
    \ 1 octet unsigned integer containing 0. This\n      pertains to L2TP protocol\
    \ version 1, revision 0. Note this is not\n      the same version number that\
    \ is included in the header of each\n      message.\n      This AVP MUST NOT be\
    \ hidden (the H-bit MUST be 0). The M-bit for\n      this AVP MUST be set to 1.\
    \  The Length of this AVP is 8.\n   Framing Capabilities (SCCRP, SCCRQ)\n    \
    \  The Framing Capabilities AVP, Attribute Type 3, provides the peer\n      with\
    \ an indication of the types of framing that will be accepted\n      or requested\
    \ by the sender.\n      The Attribute Value field for this AVP has the following\
    \ format:\n       0                   1                   2                  \
    \ 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |     Reserved for future framing type definitions          |A|S|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Attribute Value field is a 32-bit mask, with two bits defined.\n  \
    \    If bit A is set, asynchronous framing is supported. If bit S is\n      set,\
    \ synchronous framing is supported.\n      A peer MUST NOT request an incoming\
    \ or outgoing call with a\n      Framing Type AVP specifying a value not advertised\
    \ in the Framing\n      Capabilities AVP it received during control connection\n\
    \      establishment.  Attempts to do so will result in the call being\n     \
    \ rejected.\n      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit\
    \ for\n      this AVP MUST be set to 1.  The Length (before hiding) is 10.\n \
    \  Bearer Capabilities (SCCRP, SCCRQ)\n      The Bearer Capabilities AVP, Attribute\
    \ Type 4, provides the peer\n      with an indication of the bearer device types\
    \ supported by the\n      hardware interfaces of the sender for outgoing calls.\n\
    \      The Attribute Value field for this AVP has the following format:\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Reserved for future bearer type definitions           |A|D|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      This\
    \ is a 32-bit mask, with two bits defined. If bit A is set,\n      analog access\
    \ is supported. If bit D is set, digital access is\n      supported.\n      An\
    \ LNS should not request an outgoing call specifying a value in\n      the Bearer\
    \ Type AVP for a device type not advertised in the Bearer\n      Capabilities\
    \ AVP it received from the LAC during control\n      connection establishment.\
    \ Attempts to do so will result in the\n      call being rejected.\n      This\
    \ AVP MUST be present if the sender can place outgoing calls\n      when requested.\n\
    \      Note that an LNS that cannot act as an LAC as well will not\n      support\
    \ hardware devices for handling incoming and outgoing calls\n      and should\
    \ therefore set the A and D bits of this AVP to 0, or\n      should not send the\
    \ AVP at all. An LNS that can also act as an LAC\n      and place outgoing calls\
    \ should set A or D as appropriate.\n      Presence of this message is not a guarantee\
    \ that a given outgoing\n      call will be placed by the sender if requested,\
    \ just that the\n      physical capability exists.\n      This AVP may be hidden\
    \ (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set to 1. \
    \ The Length (before hiding) is 10.\n   Tie Breaker (SCCRQ)\n      The Tie Breaker\
    \ AVP, Attribute Type 5, indicates that the sender\n      wishes a single tunnel\
    \ to exist between the given LAC-LNS pair.\n      The Attribute Value field for\
    \ this AVP has the following format:\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Tie Break Value...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                 ...(64 bits)         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Tie Breaker Value is an 8 octet value that is used to choose a\n      single\
    \ tunnel where both LAC and LNS request a tunnel\n      concurrently. The recipient\
    \ of a SCCRQ must check to see if a\n      SCCRQ has been sent to the peer, and\
    \ if so, must compare its Tie\n      Breaker value with the received one. The\
    \ lower value \"wins\", and\n      the \"loser\" MUST silently discard its tunnel.\
    \ In the case where a\n      tie breaker is present on both sides, and the value\
    \ is equal, both\n      sides MUST discard their tunnels.\n      If a tie breaker\
    \ is received, and an outstanding SCCRQ had no tie\n      breaker value, the initiator\
    \ which included the Tie Breaker AVP\n      \"wins\". If neither side issues a\
    \ tie breaker, then two separate\n      tunnels are opened.\n      This AVP MUST\
    \ NOT be hidden (the H-bit MUST be 0). The M-bit for\n      this AVP MUST be set\
    \ to 0.  The Length of this AVP is 14.\n   Firmware Revision (SCCRP, SCCRQ)\n\
    \      The Firmware Revision AVP, Attribute Type 6, indicates the\n      firmware\
    \ revision of the issuing device.\n      The Attribute Value field for this AVP\
    \ has the following format:\n       0                   1\n       0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      \
    \ Firmware Revision       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Firmware Revision is a 2 octet unsigned integer encoded in a\n      vendor specific\
    \ format.\n      For devices which do not have a firmware revision (general purpose\n\
    \      computers running L2TP software modules, for instance), the\n      revision\
    \ of the L2TP software module may be reported instead.\n      This AVP may be\
    \ hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set\
    \ to 0.  The Length (before hiding) is 8.\n   Host Name (SCCRP, SCCRQ)\n     \
    \ The Host Name AVP, Attribute Type 7, indicates the name of the\n      issuing\
    \ LAC or LNS.\n      The Attribute Value field for this AVP has the following\
    \ format:\n       0                   1                   2                  \
    \ 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   | Host Name ... (arbitrary number of octets)\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Host Name is of arbitrary length, but MUST be at least 1\n      octet.\n\
    \      This name should be as broadly unique as possible; for hosts\n      participating\
    \ in DNS [RFC1034], a hostname with fully qualified\n      domain would be appropriate.\n\
    \      This AVP MUST NOT be hidden (the H-bit MUST be 0). The M-bit for\n    \
    \  this AVP MUST be set to 1.  The Length of this AVP is 6 plus the\n      length\
    \ of the Host Name.\n   Vendor Name (SCCRP, SCCRQ)\n      The Vendor Name AVP,\
    \ Attribute Type 8, contains a vendor specific\n      (possibly human readable)\
    \ string describing the type of LAC or LNS\n      being used.\n      The Attribute\
    \ Value field for this AVP has the following format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Vendor Name ...(arbitrary number of octets)\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Vendor Name is the indicated number of octets representing the\n  \
    \    vendor string. Human readable text for this AVP MUST be provided\n      in\
    \ the UTF-8 charset using the Default Language [RFC2277].\n      This AVP may\
    \ be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set\
    \ to 0.  The Length (before hiding) of this AVP\n      is 6 plus the length of\
    \ the Vendor Name.\n   Assigned Tunnel ID (SCCRP, SCCRQ, StopCCN)\n      The Assigned\
    \ Tunnel ID AVP, Attribute Type 9, encodes the ID being\n      assigned to this\
    \ tunnel by the sender.\n      The Attribute Value field for this AVP has the\
    \ following format:\n       0                   1\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      Assigned\
    \ Tunnel ID       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The Assigned\
    \ Tunnel ID is a 2 octet non-zero unsigned integer.\n      The Assigned Tunnel\
    \ ID AVP establishes a value used to multiplex\n      and demultiplex multiple\
    \ tunnels between the LNS and LAC. The L2TP\n      peer MUST place this value\
    \ in the Tunnel ID header field of all\n      control and data messages that it\
    \ subsequently transmits over the\n      associated tunnel.  Before the Assigned\
    \ Tunnel ID AVP is received\n      from a peer, messages MUST be sent to that\
    \ peer with a Tunnel ID\n      value of 0 in the header of all control messages.\n\
    \      In the StopCCN control message, the Assigned Tunnel ID AVP MUST be\n  \
    \    the same as the Assigned Tunnel ID AVP first sent to the receiving\n    \
    \  peer, permitting the peer to identify the appropriate tunnel even\n      if\
    \ a StopCCN is sent before an Assigned Tunnel ID AVP is received.\n      This\
    \ AVP may be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST\
    \ be set to 1.  The Length (before hiding) of this AVP\n      is 8.\n   Receive\
    \ Window Size (SCCRQ, SCCRP)\n      The Receive Window Size AVP, Attribute Type\
    \ 10, specifies the\n      receive window size being offered to the remote peer.\n\
    \      The Attribute Value field for this AVP has the following format:\n    \
    \   0                   1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Window Size           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Window Size is a 2 octet unsigned integer.\n      If absent, the peer\
    \ must assume a Window Size of 4 for its\n      transmit window. The remote peer\
    \ may send the specified number of\n      control messages before it must wait\
    \ for an acknowledgment.\n      This AVP MUST NOT be hidden (the H-bit MUST be\
    \ 0). The M-bit for\n      this AVP MUST be set to 1.  The Length of this AVP\
    \ is 8.\n   Challenge (SCCRP, SCCRQ)\n      The Challenge AVP, Attribute Type\
    \ 11, indicates that the issuing\n      peer wishes to authenticate the tunnel\
    \ endpoints using a CHAP-\n      style authentication mechanism.\n      The Attribute\
    \ Value field for this AVP has the following format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Challenge ... (arbitrary number of octets)\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Challenge is one or more octets of random data.\n      This AVP may\
    \ be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set\
    \ to 1.  The Length (before hiding) of this AVP\n      is 6 plus the length of\
    \ the Challenge.\n   Challenge Response (SCCCN, SCCRP)\n      The Response AVP,\
    \ Attribute Type 13, provides a response to a\n      challenge received.\n   \
    \   The Attribute Value field for this AVP has the following format:\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Response ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                                        ... (16 octets)         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Response is a 16 octet value reflecting the CHAP-style\n      [RFC1994]\
    \ response to the challenge.\n      This AVP MUST be present in an SCCRP or SCCCN\
    \ if a challenge was\n      received in the preceding SCCRQ or SCCRP. For purposes\
    \ of the ID\n      value in the CHAP response calculation, the value of the Message\n\
    \      Type AVP for this message is used (e.g. 2 for an SCCRP, and 3 for\n   \
    \   an SCCCN).\n      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit\
    \ for\n      this AVP MUST be set to 1.  The Length (before hiding) of this AVP\n\
    \      is 22.\n"
- title: 4.4.4 Call Management AVPs
  contents:
  - "4.4.4 Call Management AVPs\n   Q.931 Cause Code (CDN)\n      The Q.931 Cause\
    \ Code AVP, Attribute Type 12, is used to give\n      additional information in\
    \ case of unsolicited call disconnection.\n      The Attribute Value field for\
    \ this AVP has the following format:\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Cause Code           |   Cause Msg   | Advisory Msg...\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Cause\
    \ Code is the returned Q.931 Cause code, and Cause Msg is the\n      returned\
    \ Q.931 message code (e.g., DISCONNECT) associated with the\n      Cause Code.\
    \  Both values are returned in their native ITU\n      encodings [DSS1]. An additional\
    \ ASCII text Advisory Message may\n      also be included (presence indicated\
    \ by the AVP Length) to further\n      explain the reason for disconnecting.\n\
    \      This AVP MUST NOT be hidden (the H-bit MUST be 0). The M-bit for\n    \
    \  this AVP MUST be set to 1.  The Length of this AVP is 9, plus the\n      size\
    \ of the Advisory Message.\n   Assigned Session ID (CDN, ICRP, ICRQ, OCRP, OCRQ)\n\
    \      The Assigned Session ID AVP, Attribute Type 14, encodes the ID\n      being\
    \ assigned to this session by the sender.\n      The Attribute Value field for\
    \ this AVP has the following format:\n       0                   1\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \ |     Assigned Session ID       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Assigned Session ID is a 2 octet non-zero unsigned integer.\n     \
    \ The Assigned Session ID AVP is establishes a value used to\n      multiplex\
    \ and demultiplex data sent over a tunnel between the LNS\n      and LAC. The\
    \ L2TP peer MUST place this value in the Session ID\n      header field of all\
    \ control and data messages that it subsequently\n      transmits over the tunnel\
    \ that belong to this session.  Before the\n      Assigned Session ID AVP is received\
    \ from a peer, messages MUST be\n      sent to that peer with a Session ID of\
    \ 0 in the header of all\n      control messages.\n      In the CDN control message,\
    \ the same Assigned Session ID AVP first\n      sent to the receiving peer is\
    \ used, permitting the peer to\n      identify the appropriate tunnel even if\
    \ CDN is sent before an\n      Assigned Session ID is received.\n      This AVP\
    \ may be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST\
    \ be set to 1.  The Length (before hiding) of this AVP\n      is 8.\n   Call Serial\
    \ Number (ICRQ, OCRQ)\n      The Call Serial Number AVP, Attribute Type 15, encodes\
    \ an\n      identifier assigned by the LAC or LNS to this call.\n      The Attribute\
    \ Value field for this AVP has the following format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Call Serial Number                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Call Serial Number is a 32 bit value.\n      The Call Serial Number is intended\
    \ to be an easy reference for\n      administrators on both ends of a tunnel to\
    \ use when investigating\n      call failure problems. Call Serial Numbers should\
    \ be set to\n      progressively increasing values, which are likely to be unique\
    \ for\n      a significant period of time across all interconnected LNSs and\n\
    \      LACs.\n      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit\
    \ for\n      this AVP MUST be set to 1.  The Length (before hiding) of this AVP\n\
    \      is 10.\n   Minimum BPS (OCRQ)\n      The Minimum BPS AVP, Attribute Type\
    \ 16, encodes the lowest\n      acceptable line speed for this call.\n      The\
    \ Attribute Value field for this AVP has the following format:\n       0     \
    \              1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Minimum BPS                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \  Minimum BPS is a 32 bit value indicates the speed in bits per\n      second.\n\
    \      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit for\n     \
    \ this AVP MUST be set to 1.  The Length (before hiding) of this AVP\n      is\
    \ 10.\n   Maximum BPS (OCRQ)\n      The Maximum BPS AVP, Attribute Type 17, encodes\
    \ the highest\n      acceptable line speed for this call.\n      The Attribute\
    \ Value field for this AVP has the following format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Maximum BPS                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Maximum BPS is a 32 bit value indicates the speed in bits per\n      second.\n\
    \      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit for\n     \
    \ this AVP MUST be set to 1.  The Length (before hiding) of this AVP\n      is\
    \ 10.\n   Bearer Type (ICRQ, OCRQ)\n      The Bearer Type AVP, Attribute Type\
    \ 18,  encodes the bearer type\n      for the incoming or outgoing call.\n   \
    \   The Attribute Value field for this AVP has the following format:\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Reserved for future Bearer Types                |A|D|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Bearer Type is a 32-bit bit mask, which indicates the bearer\n      capability\
    \ of the call (ICRQ) or required for the call (OCRQ). If\n      set, bit A indicates\
    \ that the call refers to an analog channel. If\n      set, bit D indicates that\
    \ the call refers to a digital channel.\n      Both may be set, indicating that\
    \ the call was either\n      indistinguishable, or can be placed on either type\
    \ of channel.\n      Bits in the Value field of this AVP MUST only be set by the\
    \ LNS\n      for an OCRQ if it was set in the Bearer Capabilities AVP received\n\
    \      from the LAC during control connection establishment.\n      It is valid\
    \ to set neither the A nor D bits in an ICRQ. Such a\n      setting may indicate\
    \ that the call was not received over a\n      physical link (e.g if the LAC and\
    \ PPP are located in the same\n      subsystem).\n      This AVP may be hidden\
    \ (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set to 1. \
    \ The Length (before hiding) of this AVP\n      is 10.\n   Framing Type (ICCN,\
    \ OCCN, OCRQ)\n      The Framing Type AVP, Attribute Type 19, encodes the framing\
    \ type\n      for the incoming or outgoing call.\n      The Attribute Value field\
    \ for this AVP has the following format:\n       0                   1       \
    \            2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Reserved for future Framing Types               |A|S|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Framing Type is a 32-bit mask, which indicates the type of PPP\n      framing\
    \ requested for an OCRQ, or the type of PPP framing\n      negotiated for an OCCN\
    \ or ICCN. The framing type MAY be used as an\n      indication to PPP on the\
    \ LNS as to what link options to use for\n      LCP negotiation [RFC1662].\n \
    \     Bit A indicates asynchronous framing. Bit S indicates synchronous\n    \
    \  framing. For an OCRQ, both may be set, indicating that either type\n      of\
    \ framing may be used.\n      Bits in the Value field of this AVP MUST only be\
    \ set by the LNS\n      for an OCRQ if it was set in the Framing Capabilities\
    \ AVP received\n      from the LAC during control connection establishment.\n\
    \      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit for\n     \
    \ this AVP MUST be set to 1.  The Length (before hiding) of this AVP\n      is\
    \ 10.\n   Called Number (ICRQ, OCRQ)\n      The Called Number AVP, Attribute Type\
    \ 21, encodes the telephone\n      number to be called for an OCRQ, and the Called\
    \ number for an\n      ICRQ.\n      The Attribute Value field for this AVP has\
    \ the following format:\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Called Number... (arbitrary number of octets)                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Called Number is an ASCII string. Contact between the\n      administrator of\
    \ the LAC and the LNS may be necessary to\n      coordinate interpretation of\
    \ the value needed in this AVP.\n      This AVP may be hidden (the H-bit may be\
    \ 0 or 1). The M-bit for\n      this AVP MUST be set to 1.  The Length (before\
    \ hiding) of this AVP\n      is 6 plus the length of the Called Number.\n   Calling\
    \ Number (ICRQ)\n      The Calling Number AVP, Attribute Type 22, encodes the\
    \ originating\n      number for the incoming call.\n      The Attribute Value\
    \ field for this AVP has the following format:\n       0                   1 \
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Calling Number... (arbitrary number of octets)                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Calling\
    \ Number is an ASCII string. Contact between the\n      administrator of the LAC\
    \ and the LNS may be necessary to\n      coordinate interpretation of the value\
    \ in this AVP.\n      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit\
    \ for\n      this AVP MUST be set to 1.  The Length (before hiding) of this AVP\n\
    \      is 6 plus the length of the Calling Number.\n   Sub-Address (ICRQ, OCRQ)\n\
    \      The Sub-Address AVP, Attribute Type 23, encodes additional dialing\n  \
    \    information.\n      The Attribute Value field for this AVP has the following\
    \ format:\n       0                   1                   2                  \
    \ 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   | Sub-Address ... (arbitrary number of octets)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Sub-Address is an ASCII string. Contact between the\n      administrator\
    \ of the LAC and the LNS may be necessary to\n      coordinate interpretation\
    \ of the value in this AVP.\n      This AVP may be hidden (the H-bit may be 0\
    \ or 1). The M-bit for\n      this AVP MUST be set to 1.  The Length (before hiding)\
    \ of this AVP\n      is 6 plus the length of the Sub-Address.\n   (Tx) Connect\
    \ Speed (ICCN, OCCN)\n      The (Tx) Connect Speed BPS AVP, Attribute Type 24,\
    \ encodes the\n      speed of the facility chosen for the connection attempt.\n\
    \      The Attribute Value field for this AVP has the following format:\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             BPS                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ (Tx) Connect Speed BPS is a 4 octet value indicating the speed\n      in bits\
    \ per second.\n      When the optional Rx Connect Speed AVP is present, the value\
    \ in\n      this AVP represents the transmit connect speed, from the\n      perspective\
    \ of the LAC (e.g. data flowing from the LAC to the\n      remote system). When\
    \ the optional Rx Connect Speed AVP is NOT\n      present, the connection speed\
    \ between the remote system and LAC is\n      assumed to be symmetric and is represented\
    \ by the single value in\n      this AVP.\n      This AVP may be hidden (the H-bit\
    \ may be 0 or 1). The M-bit for\n      this AVP MUST be set to 1.  The Length\
    \ (before hiding) of this AVP\n      is 10.\n   Rx Connect Speed (ICCN, OCCN)\n\
    \      The Rx Connect Speed AVP, Attribute Type 38, represents the speed\n   \
    \   of the connection from the perspective of the LAC (e.g. data\n      flowing\
    \ from the remote system to the LAC).\n      The Attribute Value field for this\
    \ AVP has the following format:\n       0                   1                \
    \   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           BPS (H)             |            BPS (L)            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      BPS\
    \ is a 4 octet value indicating the speed in bits per second.\n      Presence\
    \ of this AVP implies that the connection speed may be\n      asymmetric with\
    \ respect to the transmit connect speed given in the\n      (Tx) Connect Speed\
    \ AVP.\n      This AVP may be hidden (the H-bit MAY be 1 or 0).  The M-bit for\n\
    \      this AVP MUST be set to 0.  The Length (before hiding) of this AVP\n  \
    \    is 10.\n   Physical Channel ID (ICRQ, OCRP)\n      The Physical Channel ID\
    \ AVP, Attribute Type 25, encodes the vendor\n      specific physical channel\
    \ number used for a call.\n      The Attribute Value field for this AVP has the\
    \ following format:\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Physical Channel ID                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Physical\
    \ Channel ID is a 4 octet value intended to be used for\n      logging purposes\
    \ only.\n      This AVP may be hidden (the H-bit may be 0 or 1). The M-bit for\n\
    \      this AVP MUST be set to 0.  The Length (before hiding) of this AVP\n  \
    \    is 10.\n   Private Group ID (ICCN)\n      The Private Group ID AVP, Attribute\
    \ Type 37, is used by the LAC to\n      indicate that this call is to be associated\
    \ with a particular\n      customer group.\n      The Attribute Value field for\
    \ this AVP has the following format:\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Private Group ID ... (arbitrary number of octets)           |\n  \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \ The Private Group ID is a string of octets of arbitrary length.\n      The LNS\
    \ MAY treat the PPP session as well as network traffic\n      through this session\
    \ in a special manner determined by the peer.\n      For example, if the LNS is\
    \ individually connected to several\n      private networks using unregistered\
    \ addresses, this AVP may be\n      included by the LAC to indicate that a given\
    \ call should be\n      associated with one of the private networks.\n      The\
    \ Private Group ID is a string corresponding to a table in the\n      LNS that\
    \ defines the particular characteristics of the selected\n      group.  A LAC\
    \ MAY determine the Private Group ID from a RADIUS\n      response, local configuration,\
    \ or some other source.\n      This AVP may be hidden (the H-bit MAY be 1 or 0).\
    \  The M-bit for\n      this AVP MUST be set to 0.  The Length (before hiding)\
    \ of this AVP\n      is 6 plus the length of the Private Group ID.\n   Sequencing\
    \ Required (ICCN, OCCN)\n      The Sequencing Required AVP, Attribute Type 39,\
    \ indicates to the\n      LNS that Sequence Numbers MUST always be present on\
    \ the data\n      channel.\n      This AVP has no Attribute Value field.\n   \
    \   This AVP MUST NOT be hidden (the H-bit MUST be 0).  The M-bit for\n      this\
    \ AVP MUST be set to 1.  The Length of this AVP is 6.\n"
- title: 4.4.5 Proxy LCP and Authentication AVPs
  contents:
  - "4.4.5 Proxy LCP and Authentication AVPs\n      The LAC may have answered the\
    \ call and negotiated LCP with the\n      remote system, perhaps in order to establish\
    \ the system's apparent\n      identity. In this case, these AVPs may be included\
    \ to indicate the\n      link properties the remote system initially requested,\
    \ properties\n      the remote system and LAC ultimately negotiated, as well as\
    \ PPP\n      authentication information sent and received by the LAC. This\n \
    \     information may be used to initiate the PPP LCP and authentication\n   \
    \   systems on the LNS, allowing PPP to continue without renegotiation\n     \
    \ of LCP. Note that the LNS policy may be to enter an additional\n      round\
    \ of LCP negotiation and/or authentication if the LAC is not\n      trusted.\n\
    \   Initial Received LCP CONFREQ (ICCN)\n      In the Initial Received LCP CONFREQ\
    \ AVP, Attribute Type 26,\n      provides the LNS with the Initial CONFREQ received\
    \ by the LAC from\n      the PPP Peer.\n      The Attribute Value field for this\
    \ AVP has the following format:\n       0                   1                \
    \   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | LCP CONFREQ... (arbitrary number of octets)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      LCP\
    \ CONFREQ is a copy of the body of the initial CONFREQ received,\n      starting\
    \ at the first option within the body of the LCP message.\n      This AVP may\
    \ be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set\
    \ to 0.  The Length (before hiding) of this AVP\n      is 6 plus the length of\
    \ the CONFREQ.\n   Last Sent LCP CONFREQ (ICCN)\n      In the Last Sent LCP CONFREQ\
    \ AVP, Attribute Type 27, provides the\n      LNS with the Last CONFREQ sent by\
    \ the LAC to the PPP Peer.\n      The Attribute Value field for this AVP has the\
    \ following format:\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | LCP CONFREQ... (arbitrary number of octets)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ LCP CONFREQ is a copy of the body of the final CONFREQ sent to\n      the client\
    \ to complete LCP negotiation, starting at the first\n      option within the\
    \ body of the LCP message.\n      This AVP may be hidden (the H-bit may be 0 or\
    \ 1). The M-bit for\n      this AVP MUST be set to 0.  The Length (before hiding)\
    \ of this AVP\n      is 6 plus the length of the CONFREQ.\n   Last Received LCP\
    \ CONFREQ (ICCN)\n      The Last Received LCP CONFREQ AVP, Attribute Type 28,\
    \ provides the\n      LNS with the Last CONFREQ received by the LAC from the PPP\
    \ Peer.\n      The Attribute Value field for this AVP has the following format:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | LCP CONFREQ... (arbitrary number of octets)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ LCP CONFREQ is a copy of the body of the final CONFREQ\n      received from\
    \ the client to complete LCP negotiation, starting at\n      the first option\
    \ within the body of the LCP message.\n      This AVP may be hidden (the H-bit\
    \ may be 0 or 1). The M-bit for\n      this AVP MUST be set to 0.  The Length\
    \ (before hiding) of this AVP\n      is 6 plus the length of the CONFREQ.\n  \
    \ Proxy Authen Type (ICCN)\n      The Proxy Authen Type AVP, Attribute Type 29,\
    \ determines if proxy\n      authentication should be used.\n      The Attribute\
    \ Value field for this AVP has the following format:\n       0               \
    \    1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Authen Type          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Authen Type is a 2 octet unsigned integer, holding:\n      This AVP may\
    \ be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set\
    \ to 0.  The Length (before hiding) of this AVP\n      is 8.\n      Defined Authen\
    \ Type values are:\n         0 - Reserved\n         1 - Textual username/password\
    \ exchange\n         2 - PPP CHAP\n         3 - PPP PAP\n         4 - No Authentication\n\
    \         5 - Microsoft CHAP Version 1 (MSCHAPv1)\n         This AVP MUST be present\
    \ if proxy authentication is to be\n         utilized. If it is not present, then\
    \ it is assumed that this\n         peer cannot perform proxy authentication,\
    \ requiring\n         a restart of the authentication phase at the LNS if the\
    \ client\n         has already entered this phase with the\n         LAC (which\
    \ may be determined by the Proxy LCP AVP if present).\n      Associated AVPs for\
    \ each type of authentication follow.\n   Proxy Authen Name (ICCN)\n      The\
    \ Proxy Authen Name AVP, Attribute Type 30, specifies the name\n      of the authenticating\
    \ client when using proxy authentication.\n      The Attribute Value field for\
    \ this AVP has the following format:\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Authen Name... (arbitrary number of octets)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Authen\
    \ Name is a string of octets of arbitrary length.  It\n      contains the name\
    \ specified in the client's authentication\n      response.\n      This AVP MUST\
    \ be present in messages containing a Proxy Authen\n      Type AVP with an Authen\
    \ Type of 1, 2, 3 or 5. It may be desirable\n      to employ AVP hiding for obscuring\
    \ the cleartext name.\n      This AVP may be hidden (the H-bit may be 0 or 1).\
    \ The M-bit for\n      this AVP MUST be set to 0.  The Length (before hiding)\
    \ is 6 plus\n      the length of the cleartext name.\n   Proxy Authen Challenge\
    \ (ICCN)\n      The Proxy Authen Challenge AVP, Attribute Type 31, specifies the\n\
    \      challenge sent by the LAC to the PPP Peer, when using proxy\n      authentication.\n\
    \      The Attribute Value field for this AVP has the following format:\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Challenge... (arbitrary number of octets)                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Challenge is a string of one or more octets.\n      This AVP MUST be present\
    \ for Proxy Authen Types 2 and 5. The\n      Challenge field contains the CHAP\
    \ challenge presented to the\n      client by the LAC.\n      This AVP may be\
    \ hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set\
    \ to 0.  The Length (before hiding) of this AVP\n      is 6, plus the length of\
    \ the Challenge.\n   Proxy Authen ID (ICCN)\n      The Proxy Authen ID AVP, Attribute\
    \ Type 32, specifies the ID value\n      of the PPP Authentication that was started\
    \ between the LAC and the\n      PPP Peer, when proxy authentication is being\
    \ used.\n      The Attribute Value field for this AVP has the following format:\n\
    \       0                   1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Reserved    |      ID       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ID is a 2 octet unsigned integer, the most significant octet MUST\n   \
    \   be 0.\n      The Proxy Authen ID AVP MUST be present for Proxy authen types\
    \ 2,\n      3 and 5. For 2 and 5, the ID field contains the byte ID value\n  \
    \    presented to the client by the LAC in its Challenge. For 3, it is\n     \
    \ the Identifier value of the Authenticate-Request.\n      This AVP may be hidden\
    \ (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST be set to 0.\n\
    \   Proxy Authen Response (ICCN)\n      The Proxy Authen Response AVP, Attribute\
    \ Type 33, specifies the\n      PPP Authentication response received by the LAC\
    \ from the PPP Peer,\n      when proxy authentication is used.\n      The Attribute\
    \ Value field for this AVP has the following format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Response... (arbitrary number of octets)                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Response is a string of octets.\n      This AVP MUST be present for Proxy authen\
    \ types 1, 2, 3 and 5. The\n      Response field contains the client's response\
    \ to the challenge.\n      For Proxy authen types 2 and 5, this field contains\
    \ the response\n      value received by the LAC. For types 1 or 3, it contains\
    \ the clear\n      text password received from the client by the LAC.  In the\
    \ case of\n      cleartext passwords, AVP hiding is recommended.\n      This AVP\
    \ may be hidden (the H-bit may be 0 or 1). The M-bit for\n      this AVP MUST\
    \ be set to 0.  The Length (before hiding) of this AVP\n      is 6 plus the length\
    \ of the Response.\n"
- title: 4.4.6 Call Status AVPs
  contents:
  - "4.4.6 Call Status AVPs\n   Call Errors (WEN)\n      The Call Errors AVP, Attribute\
    \ Type 34, is used by the LAC to send\n      error information to the LNS.\n \
    \     The Attribute Value field for this AVP has the following format:\n     \
    \  0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Reserved              |        CRC Errors (H)         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         CRC Errors (L)        |        Framing Errors (H)     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Framing Errors (L)    |        Hardware Overruns (H)  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         Hardware Overruns (L) |        Buffer Overruns (H)    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Buffer Overruns  (L)  |        Time-out Errors (H)    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         Time-out Errors (L)   |        Alignment Errors (H)   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Alignment Errors (L)  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The following fields are defined:\n         Reserved - Not used, MUST be\
    \ 0\n         CRC Errors - Number of PPP frames received with CRC errors\n   \
    \         since call was established\n         Framing Errors - Number of improperly\
    \ framed PPP packets\n            received\n         Hardware Overruns - Number\
    \ of receive buffer over-runs since\n            call was established\n      \
    \   Buffer Overruns - Number of buffer over-runs detected since\n            call\
    \ was established\n         Time-out Errors - Number of time-outs since call was\n\
    \            established\n         Alignment Errors - Number of alignment errors\
    \ since call was\n            established\n      This AVP may be hidden (the H-bit\
    \ may be 0 or 1). The M-bit for\n      this AVP MUST be set to 1.  The Length\
    \ (before hiding) of this AVP\n      is 32.\n   ACCM (SLI)\n      The ACCM AVP,\
    \ Attribute Type 35, is used by the LNS to inform LAC\n      of the ACCM negotiated\
    \ with the PPP Peer by the LNS.\n      The Attribute Value field for this AVP\
    \ has the following format:\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Reserved             |    Send ACCM (H)              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Send ACCM   (L)      |    Receive ACCM (H)           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Receive ACCM  (L)    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Send ACCM and Receive ACCM are each 4 octet values preceded by a 2\n  \
    \    octet reserved quantity. The send ACCM value should be used by the\n    \
    \  LAC to process packets it sends on the connection. The receive\n      ACCM\
    \ value should be used by the LAC to process incoming packets\n      on the connection.\
    \ The default values used by the LAC for both\n      these fields are 0xFFFFFFFF.\
    \ The LAC should honor these fields\n      unless it has specific configuration\
    \ information to indicate that\n      the requested mask must be modified to permit\
    \ operation.\n      This AVP may be hidden (the H-bit MAY be 1 or 0).  The M-bit\
    \ for\n      this AVP MUST be set to 1.  The Length of this AVP is 16.\n"
- title: 5.0 Protocol Operation
  contents:
  - "5.0 Protocol Operation\n   The necessary setup for tunneling a PPP session with\
    \ L2TP consists of\n   two steps, (1) establishing the Control Connection for\
    \ a Tunnel, and\n   (2) establishing a Session as triggered by an incoming or\
    \ outgoing\n   call request. The Tunnel and corresponding Control Connection MUST\
    \ be\n   established before an incoming or outgoing call is initiated. An L2TP\n\
    \   Session MUST be established before L2TP can begin to tunnel PPP\n   frames.\
    \ Multiple Sessions may exist across a single Tunnel and\n   multiple Tunnels\
    \ may exist between the same LAC and LNS.\n                          +-----+ \
    \                              +-----+\n                          |     |~~~~~~~~~~L2TP\
    \ Tunnel~~~~~~~~~~|     |\n                          | LAC |                 \
    \              | LNS |\n                          |     #######Control Connection########\
    \     |\n [Remote]                 |     |                               |   \
    \  |\n [System]------Call----------*============L2TP Session=============*  |\n\
    \   PPP +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  |\n   \
    \                       |     |                               |     |\n [Remote]\
    \                 |     |                               |     |\n [System]------Call----------*============L2TP\
    \ Session=============*  |\n   PPP +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
    \  |\n                          |     |                               |     |\n\
    \                          |     |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|     |\n   \
    \                       +-----+                               +-----+\n Figure\
    \ 5.1 Tunneling PPP\n"
- title: 5.1 Control Connection Establishment
  contents:
  - "5.1 Control Connection Establishment\n   The Control Connection is the initial\
    \ connection that must be\n   achieved between an LAC and LNS before sessions\
    \ may be brought up.\n   Establishment of the control connection includes securing\
    \ the\n   identity of the peer, as well as identifying the peer's L2TP version,\n\
    \   framing, and bearer capabilities, etc.\n   A three message exchange is utilized\
    \ to setup the control connection.\n   Following is a typical message exchange:\n\
    \      LAC or LNS  LAC or LNS\n      ----------  ----------\n      SCCRQ ->\n\
    \                  <- SCCRP\n      SCCCN ->\n                  <- ZLB ACK\n  \
    \ The ZLB ACK is sent if there are no further messages waiting in queue\n   for\
    \ that peer.\n"
- title: 5.1.1 Tunnel Authentication
  contents:
  - "5.1.1 Tunnel Authentication\n   L2TP incorporates a simple, optional, CHAP-like\
    \ [RFC1994] tunnel\n   authentication system during control connection establishment.\
    \ If an\n   LAC or LNS wishes to authenticate the identity of the peer it is\n\
    \   contacting or being contacted by, a Challenge AVP is included in the\n   SCCRQ\
    \ or SCCRP message. If a Challenge AVP is received in an SCCRQ or\n   SCCRP, a\
    \ Challenge Response AVP MUST be sent in the following SCCRP\n   or SCCCN, respectively.\
    \ If the expected response and response\n   received from a peer does not match,\
    \ establishment of the tunnel MUST\n   be disallowed.\n   To participate in tunnel\
    \ authentication, a single shared secret MUST\n   exist between the LAC and LNS.\
    \ This is the same shared secret used\n   for AVP hiding (see Section 4.3).  See\
    \ Section 4.4.3 for details on\n   construction of the Challenge and Response\
    \ AVPs.\n"
- title: 5.2 Session Establishment
  contents:
  - "5.2 Session Establishment\n   After successful control connection establishment,\
    \ individual\n   sessions may be created. Each session corresponds to single PPP\n\
    \   stream between the LAC and LNS. Unlike control connection\n   establishment,\
    \ session establishment is directional with respect to\n   the LAC and LNS. The\
    \ LAC requests the LNS to accept a session for an\n   incoming call, and the LNS\
    \ requests the LAC to accept a session for\n   placing an outgoing call.\n"
- title: 5.2.1 Incoming Call Establishment
  contents:
  - "5.2.1 Incoming Call Establishment\n   A three message exchange is employed to\
    \ setup the session.  Following\n   is a typical sequence of events:\n      LAC\
    \         LNS\n      ---         ---\n      (Call\n       Detected)\n      ICRQ\
    \ ->\n               <- ICRP\n      ICCN ->\n               <- ZLB ACK\n   The\
    \ ZLB ACK is sent if there are no further messages waiting in queue\n   for that\
    \ peer.\n"
- title: 5.2.2 Outgoing Call Establishment
  contents:
  - "5.2.2 Outgoing Call Establishment\n   A three message exchange is employed to\
    \ setup the session.  Following\n   is a typical sequence of events:\n      LAC\
    \         LNS\n      ---         ---\n               <- OCRQ\n      OCRP ->\n\
    \      (Perform\n       Call\n       Operation)\n      OCCN ->\n             \
    \  <- ZLB ACK\n   The ZLB ACK is sent if there are no further messages waiting\
    \ in queue\n   for that peer.\n"
- title: 5.3 Forwarding PPP Frames
  contents:
  - "5.3 Forwarding PPP Frames\n   Once tunnel establishment is complete, PPP frames\
    \ from the remote\n   system are received at the LAC, stripped of CRC, link framing,\
    \ and\n   transparency bytes, encapsulated in L2TP, and forwarded over the\n \
    \  appropriate tunnel. The LNS receives the L2TP packet, and processes\n   the\
    \ encapsulated PPP frame as if it were received on a local PPP\n   interface.\n\
    \   The sender of a message associated with a particular session and\n   tunnel\
    \ places the Session ID and Tunnel ID (specified by its peer) in\n   the Session\
    \ ID and Tunnel ID header for all outgoing messages. In\n   this manner, PPP frames\
    \ are multiplexed and demultiplexed over a\n   single tunnel between a given LNS-LAC\
    \ pair. Multiple tunnels may\n   exist between a given LNS-LAC pair, and multiple\
    \ sessions may exist\n   within a tunnel.\n   The value of 0 for Session ID and\
    \ Tunnel ID is special and MUST NOT\n   be used as an Assigned Session ID or Assigned\
    \ Tunnel ID.  For the\n   cases where a Session ID has not yet been assigned by\
    \ the peer (i.e.,\n   during establishment of a new session or tunnel), the Session\
    \ ID\n   field MUST be sent as 0, and the Assigned Session ID AVP within the\n\
    \   message MUST be used to identify the session. Similarly, for cases\n   where\
    \ the Tunnel ID has not yet been assigned from the peer, the\n   Tunnel ID MUST\
    \ be sent as 0 and Assigned Tunnel ID AVP used to\n   identify the tunnel.\n"
- title: 5.4 Using Sequence Numbers on the Data Channel
  contents:
  - "5.4 Using Sequence Numbers on the Data Channel\n   Sequence numbers are defined\
    \ in the L2TP header for control messages\n   and optionally for data messages\
    \ (see Section 3.1). These are used to\n   provide a reliable control message\
    \ transport (see Section 5.8) and\n   optional data message sequencing. Each peer\
    \ maintains separate\n   sequence numbers for the control connection and each\
    \ individual data\n   session within a tunnel.\n   Unlike the L2TP control channel,\
    \ the L2TP data channel does not use\n   sequence numbers to retransmit lost data\
    \ messages. Rather, data\n   messages may use sequence numbers to detect lost\
    \ packets and/or\n   restore the original sequence of packets that may have been\
    \ reordered\n   during transport.  The LAC may request that sequence numbers be\n\
    \   present in data messages via the Sequencing Required AVP (see Section\n  \
    \ 4.4.6). If this AVP is present during session setup, sequence numbers\n   MUST\
    \ be present at all times. If this AVP is not present, sequencing\n   presence\
    \ is under control of the LNS. The LNS controls enabling and\n   disabling of\
    \ sequence numbers by sending a data message with or\n   without sequence numbers\
    \ present at any time during the life of a\n   session. Thus, if the LAC receives\
    \ a data message without sequence\n   numbers present, it MUST stop sending sequence\
    \ numbers in future data\n   messages. If the LAC receives a data message with\
    \ sequence numbers\n   present, it MUST begin sending sequence numbers in future\
    \ outgoing\n   data messages. If the LNS enables sequencing after disabling it\n\
    \   earlier in the session, the sequence number state picks up where it\n   left\
    \ off before.\n   The LNS may initiate disabling of sequencing at any time during\
    \ the\n   session (including the first data message sent). It is recommended\n\
    \   that for connections where reordering or packet loss may occur,\n   sequence\
    \ numbers always be enabled during the initial negotiation\n   stages of PPP and\
    \ disabled only when and if the risk is considered\n   acceptable. For example,\
    \ if the PPP session being tunneled is not\n   utilizing any stateful compression\
    \ or encryption protocols and is\n   only carrying IP (as determined by the PPP\
    \ NCPs that are\n   established), then the LNS might decide to disable sequencing\
    \ as IP\n   is tolerant to datagram loss and reordering.\n"
- title: 5.5 Keepalive (Hello)
  contents:
  - "5.5 Keepalive (Hello)\n   A keepalive mechanism is employed by L2TP in order\
    \ to differentiate\n   tunnel outages from extended periods of no control or data\
    \ activity\n   on a tunnel. This is accomplished by injecting Hello control messages\n\
    \   (see Section 6.5) after a specified period of time has elapsed since\n   the\
    \ last data or control message was received on a tunnel. As for any\n   other\
    \ control message, if the Hello message is not reliably delivered\n   then the\
    \ tunnel is declared down and is reset. The transport reset\n   mechanism along\
    \ with the injection of Hello messages ensures that a\n   connectivity failure\
    \ between the LNS and the LAC will be detected at\n   both ends of a tunnel.\n"
- title: 5.6 Session Teardown
  contents:
  - "5.6 Session Teardown\n   Session teardown may be initiated by either the LAC\
    \ or LNS and is\n   accomplished by sending a CDN control message. After the last\
    \ session\n   is cleared, the control connection MAY be torn down as well (and\n\
    \   typically is). Following is an example of a typical control message\n   exchange:\n\
    \      LAC or LNS  LAC or LNS\n      CDN ->\n      (Clean up)\n              \
    \    <- ZLB ACK\n                     (Clean up)\n"
- title: 5.7 Control Connection Teardown
  contents:
  - "5.7 Control Connection Teardown\n   Control connection teardown may be initiated\
    \ by either the LAC or LNS\n   and is accomplished by sending a single StopCCN\
    \ control message. The\n   receiver of a StopCCN MUST send a ZLB ACK to acknowledge\
    \ receipt of\n   the message and maintain enough control connection state to properly\n\
    \   accept StopCCN retransmissions over at least a full retransmission\n   cycle\
    \ (in case the ZLB ACK is lost). The recommended time for a full\n   retransmission\
    \ cycle is 31 seconds (see section 5.8). Following is an\n   example of a typical\
    \ control message exchange:\n      LAC or LNS  LAC or LNS\n      StopCCN ->\n\
    \      (Clean up)\n                  <- ZLB ACK\n                     (Wait)\n\
    \                     (Clean up)\n   An implementation may shut down an entire\
    \ tunnel and all sessions on\n   the tunnel by sending the StopCCN. Thus, it is\
    \ not necessary to clear\n   each session individually when tearing down the whole\
    \ tunnel.\n"
- title: 5.8 Reliable Delivery of Control Messages
  contents:
  - "5.8 Reliable Delivery of Control Messages\n   L2TP provides a lower level reliable\
    \ transport service for all\n   control messages. The Nr and Ns fields of the\
    \ control message header\n   (see section 3.1) belong to this transport.  The\
    \ upper level\n   functions of L2TP are not concerned with retransmission or ordering\n\
    \   of control messages. The reliable control message is a sliding window\n  \
    \ transport that provides control message retransmission and congestion\n   control.\
    \  Each peer maintains separate sequence number state for the\n   control connection\
    \ within a tunnel.\n   The message sequence number, Ns, begins at 0. Each subsequent\
    \ message\n   is sent with the next increment of the sequence number.  The sequence\n\
    \   number is thus a free running counter represented modulo 65536. The\n   sequence\
    \ number in the header of a received message is considered\n   less than or equal\
    \ to the last received number if its value lies in\n   the range of the last received\
    \ number and the preceding 32767 values,\n   inclusive. For example, if the last\
    \ received sequence number was 15,\n   then messages with sequence numbers 0 through\
    \ 15, as well as 32784\n   through 65535, would be considered less than or equal.\
    \ Such a message\n   would be considered a duplicate of a message already received\
    \ and\n   ignored from processing. However, in order to ensure that all\n   messages\
    \ are acknowledged properly (particularly in the case of a\n   lost ZLB ACK message),\
    \ receipt of duplicate messages MUST be\n   acknowledged by the reliable transport.\
    \ This acknowledgement may\n   either piggybacked on a message in queue, or explicitly\
    \ via a ZLB\n   ACK.\n   All control messages take up one slot in the control\
    \ message sequence\n   number space, except the ZLB acknowledgement. Thus, Ns\
    \ is not\n   incremented after a ZLB message is sent.\n   The last received message\
    \ number, Nr, is used to acknowledge messages\n   received by an L2TP peer. It\
    \ contains the sequence number of the\n   message the peer expects to receive\
    \ next (e.g. the last Ns of a non-\n   ZLB message received plus 1, modulo 65536).\
    \  While the Nr in a\n   received ZLB is used to flush messages from the local\
    \ retransmit\n   queue (see below), Nr of the next message sent is not be updated\
    \ by\n   the Ns of the ZLB.\n   The reliable transport at a receiving peer is\
    \ responsible for making\n   sure that control messages are delivered in order\
    \ and without\n   duplication to the upper level. Messages arriving out of order\
    \ may be\n   queued for in-order delivery when the missing messages are received,\n\
    \   or they may be discarded requiring a retransmission by the peer.\n   Each\
    \ tunnel maintains a queue of control messages to be transmitted\n   to its peer.\
    \  The message at the front of the queue is sent with a\n   given Ns value, and\
    \ is held until a control message arrives from the\n   peer in which the Nr field\
    \ indicates receipt of this message. After a\n   period of time (a recommended\
    \ default is 1 second) passes without\n   acknowledgement, the message is retransmitted.\
    \ The retransmitted\n   message contains the same Ns value, but the Nr value MUST\
    \ be updated\n   with the sequence number of the next expected message.\n   Each\
    \ subsequent retransmission of a message MUST employ an\n   exponential backoff\
    \ interval. Thus, if the first retransmission\n   occurred after 1 second, the\
    \ next retransmission should occur after 2\n   seconds has elapsed, then 4 seconds,\
    \ etc. An implementation MAY place\n   a cap upon the maximum interval between\
    \ retransmissions. This cap\n   MUST be no less than 8 seconds per retransmission.\
    \  If no peer\n   response is detected after several retransmissions, (a recommended\n\
    \   default is 5, but SHOULD be configurable), the tunnel and all\n   sessions\
    \ within MUST be cleared.\n   When a tunnel is being shut down for reasons other\
    \ than loss of\n   connectivity, the state and reliable delivery mechanisms MUST\
    \ be\n   maintained and operated for the full retransmission interval after\n\
    \   the final message exchange has occurred.\n   A sliding window mechanism is\
    \ used for control message transmission.\n   Consider two peers A & B. Suppose\
    \ A specifies a Receive Window Size\n   AVP with a value of N in the SCCRQ or\
    \ SCCRP messages. B is now\n   allowed to have up to N outstanding control messages.\
    \ Once N have\n   been sent, it must wait for an acknowledgment that advances\
    \ the\n   window before sending new control messages.  An implementation may\n\
    \   support a receive window of only 1 (i.e., by sending out a Receive\n   Window\
    \ Size AVP with a value of 1), but MUST accept a window of up to\n   4 from its\
    \ peer (e.g. have the ability to send 4 messages before\n   backing off). A value\
    \ of 0 for the Receive Window Size AVP is\n   invalid.\n   When retransmitting\
    \ control messages, a slow start and congestion\n   avoidance window adjustment\
    \ procedure SHOULD be utilized. The\n   recommended procedure for this is described\
    \ in Appendix A.\n   A peer MUST NOT withhold acknowledgment of messages as a\
    \ technique\n   for flow controlling control messages.  An L2TP implementation\
    \ is\n   expected to be able to keep up with incoming control messages,\n   possibly\
    \ responding to some with errors reflecting an inability to\n   honor the requested\
    \ action.\n   Appendix B contains examples of control message transmission,\n\
    \   acknowledgement, and retransmission.\n"
- title: 6.0 Control Connection Protocol Specification
  contents:
  - "6.0 Control Connection Protocol Specification\n   The following control connection\
    \ messages are used to establish,\n   clear and maintain L2TP tunnels. All data\
    \ is sent in network order\n   (high order octets first). Any \"reserved\" or\
    \ \"empty\" fields MUST be\n   sent as 0 values to allow for protocol extensibility.\n"
- title: 6.1 Start-Control-Connection-Request (SCCRQ)
  contents:
  - "6.1 Start-Control-Connection-Request (SCCRQ)\n   Start-Control-Connection-Request\
    \ (SCCRQ) is a control message used to\n   initialize a tunnel between an LNS\
    \ and an LAC. It is sent by either\n   the LAC or the LNS to being the tunnel\
    \ establishment process.\n   The following AVPs MUST be present in the SCCRQ:\n\
    \      Message Type AVP\n      Protocol Version\n      Host Name\n      Framing\
    \ Capabilities\n      Assigned Tunnel ID\n   The Following AVPs MAY be present\
    \ in the SCCRQ:\n      Bearer Capabilities\n      Receive Window Size\n      Challenge\n\
    \      Tie Breaker\n      Firmware Revision\n      Vendor Name\n"
- title: 6.2 Start-Control-Connection-Reply (SCCRP)
  contents:
  - "6.2 Start-Control-Connection-Reply (SCCRP)\n   Start-Control-Connection-Reply\
    \ (SCCRP) is a control message sent in\n   reply to a received SCCRQ message.\
    \ SCCRP is used to indicate that the\n   SCCRQ was accepted and establishment\
    \ of the tunnel should continue.\n   The following AVPs MUST be present in the\
    \ SCCRP:\n      Message Type\n      Protocol Version\n      Framing Capabilities\n\
    \      Host Name\n      Assigned Tunnel ID\n   The following AVPs MAY be present\
    \ in the SCCRP:\n      Bearer Capabilities\n      Firmware Revision\n      Vendor\
    \ Name\n      Receive Window Size\n      Challenge\n      Challenge Response\n"
- title: 6.3 Start-Control-Connection-Connected (SCCCN)
  contents:
  - "6.3 Start-Control-Connection-Connected (SCCCN)\n   Start-Control-Connection-Connected\
    \ (SCCCN) is a control message sent\n   in reply to an SCCRP. SCCCN completes\
    \ the tunnel establishment\n   process.\n   The following AVP MUST be present\
    \ in the SCCCN:\n      Message Type\n   The following AVP MAY be present in the\
    \ SCCCN:\n      Challenge Response\n"
- title: 6.4 Stop-Control-Connection-Notification (StopCCN)
  contents:
  - "6.4 Stop-Control-Connection-Notification (StopCCN)\n   Stop-Control-Connection-Notification\
    \ (StopCCN) is a control message\n   sent by either the LAC or LNS to inform its\
    \ peer that the tunnel is\n   being shutdown and the control connection should\
    \ be closed. In\n   addition, all active sessions are implicitly cleared (without\
    \ sending\n   any explicit call control messages). The reason for issuing this\n\
    \   request is indicated in the Result Code AVP. There is no explicit\n   reply\
    \ to the message, only the implicit ACK that is received by the\n   reliable control\
    \ message transport layer.\n   The following AVPs MUST be present in the StopCCN:\n\
    \      Message Type\n      Assigned Tunnel ID\n      Result Code\n"
- title: 6.5 Hello (HELLO)
  contents:
  - "6.5 Hello (HELLO)\n   The Hello (HELLO) message is an L2TP control message sent\
    \ by either\n   peer of a LAC-LNS control connection. This control message is\
    \ used as\n   a \"keepalive\" for the tunnel.\n   The sending of HELLO messages\
    \ and the policy for sending them are\n   left up to the implementation. A peer\
    \ MUST NOT expect HELLO messages\n   at any time or interval. As with all messages\
    \ sent on the control\n   connection, the receiver will return either a ZLB ACK\
    \ or an\n   (unrelated) message piggybacking the necessary acknowledgement\n \
    \  information.\n   Since a HELLO is a control message, and control messages are\
    \ reliably\n   sent by the lower level transport, this keepalive function operates\n\
    \   by causing the transport level to reliably deliver a message. If a\n   media\
    \ interruption has occurred, the reliable transport will be\n   unable to deliver\
    \ the HELLO across, and will clean up the tunnel.\n   Keepalives for the tunnel\
    \ MAY be implemented by sending a HELLO if a\n   period of time (a recommended\
    \ default is 60 seconds, but SHOULD be\n   configurable) has passed without receiving\
    \ any message (data or\n   control) from the peer.\n   HELLO messages are global\
    \ to the tunnel. The Session ID in a HELLO\n   message MUST be 0.\n   The Following\
    \ AVP MUST be present in the HELLO message:\n      Message Type\n"
- title: 6.6 Incoming-Call-Request (ICRQ)
  contents:
  - "6.6 Incoming-Call-Request (ICRQ)\n   Incoming-Call-Request (ICRQ) is a control\
    \ message sent by the LAC to\n   the LNS when an incoming call is detected. It\
    \ is the first in a three\n   message exchange used for establishing a session\
    \ within an L2TP\n   tunnel.\n   ICRQ is used to indicate that a session is to\
    \ be established between\n   the LAC and LNS for this call and provides the LNS\
    \ with parameter\n   information for the session.  The LAC may defer answering\
    \ the call\n   until it has received an ICRP from the LNS indicating that the\n\
    \   session should be established.  This mechanism allows the LNS to\n   obtain\
    \ sufficient information about the call before determining\n   whether it should\
    \ be answered or not. Alternatively, the LAC may\n   answer the call, negotiate\
    \ LCP and PPP authentication, and use the\n   information gained to choose the\
    \ LNS. In this case, the call has\n   already been answered by the time the ICRP\
    \ message is received; the\n   LAC simply spoofs the \"call indication\" and \"\
    call answer\" steps in\n   this case.\n   The following AVPs MUST be present in\
    \ the ICRQ:\n      Message Type\n      Assigned Session ID\n      Call Serial\
    \ Number\n   The following AVPs MAY be present in the ICRQ:\n      Bearer Type\n\
    \      Physical Channel ID\n      Calling Number\n      Called Number\n      Sub-Address\n"
- title: 6.7 Incoming-Call-Reply (ICRP)
  contents:
  - "6.7 Incoming-Call-Reply (ICRP)\n   Incoming-Call-Reply (ICRP) is a control message\
    \ sent by the LNS to\n   the LAC in response to a received ICRQ message. It is\
    \ the second in\n   the three message exchange used for establishing sessions\
    \ within an\n   L2TP tunnel.\n   ICRP is used to indicate that the ICRQ was successful\
    \ and for the LAC\n   to answer the call if it has not already done so. It also\
    \ allows the\n   LNS to indicate necessary parameters for the L2TP session.\n\
    \   The following AVPs MUST be present in the ICRP:\n      Message Type\n    \
    \  Assigned Session ID\n"
- title: 6.8 Incoming-Call-Connected (ICCN)
  contents:
  - "6.8 Incoming-Call-Connected (ICCN)\n   Incoming-Call-Connected (ICCN) is a control\
    \ message sent by the LAC\n   to the LNS in response to a received ICRP message.\
    \ It is the third\n   message in the three message exchange used for establishing\
    \ sessions\n   within an L2TP tunnel.\n   ICCN is used to indicate that the ICRP\
    \ was accepted, the call has\n   been answered, and that the L2TP session should\
    \ move to the\n   established state.  It also provides additional information\
    \ to the\n   LNS about parameters used for the answered call (parameters that\
    \ may\n   not always available at the time the ICRQ is issued).\n   The following\
    \ AVPs MUST be present in the ICCN:\n      Message Type\n      (Tx) Connect Speed\n\
    \      Framing Type\n   The following AVPs MAY be present in the ICCN:\n     \
    \ Initial Received LCP CONFREQ\n      Last Sent LCP CONFREQ\n      Last Received\
    \ LCP CONFREQ\n      Proxy Authen Type\n      Proxy Authen Name\n      Proxy Authen\
    \ Challenge\n      Proxy Authen ID\n      Proxy Authen Response\n      Private\
    \ Group ID\n      Rx Connect Speed\n      Sequencing Required\n"
- title: 6.9 Outgoing-Call-Request (OCRQ)
  contents:
  - "6.9 Outgoing-Call-Request (OCRQ)\n   Outgoing-Call-Request (OCRQ) is a control\
    \ message sent by the LNS to\n   the LAC to indicate that an outbound call from\
    \ the LAC is to be\n   established. It is the first in a three message exchange\
    \ used for\n   establishing a session within an L2TP tunnel.\n   OCRQ is used\
    \ to indicate that a session is to be established between\n   the LNS and LAC\
    \ for this call and provides the LAC with parameter\n   information for both the\
    \ L2TP session, and the call that is to be\n   placed\n   An LNS MUST have received\
    \ a Bearer Capabilities AVP during tunnel\n   establishment from an LAC in order\
    \ to request an outgoing call to\n   that LAC.\n   The following AVPs MUST be\
    \ present in the OCRQ:\n      Message Type\n      Assigned Session ID\n      Call\
    \ Serial Number\n      Minimum BPS\n      Maximum BPS\n      Bearer Type\n   \
    \   Framing Type\n      Called Number\n   The following AVPs MAY be present in\
    \ the OCRQ:\n      Sub-Address\n"
- title: 6.10 Outgoing-Call-Reply (OCRP)
  contents:
  - "6.10 Outgoing-Call-Reply (OCRP)\n   Outgoing-Call-Reply (OCRP) is a control message\
    \ sent by the LAC to\n   the LNS in response to a received OCRQ message. It is\
    \ the second in a\n   three message exchange used for establishing a session within\
    \ an L2TP\n   tunnel.\n   OCRP is used to indicate that the LAC is able to attempt\
    \ the outbound\n   call and returns certain parameters regarding the call attempt.\n\
    \   The following AVPs MUST be present in the OCRP:\n      Message Type\n    \
    \  Assigned Session ID\n   The following AVPs MAY be present in the OCRP:\n  \
    \    Physical Channel ID\n"
- title: 6.11 Outgoing-Call-Connected (OCCN)
  contents:
  - "6.11 Outgoing-Call-Connected (OCCN)\n   Outgoing-Call-Connected (OCCN) is a control\
    \ message sent by the LAC\n   to the LNS following the OCRP and after the outgoing\
    \ call has been\n   completed.  It is the final message in a three message exchange\
    \ used\n   for establishing a session within an L2TP tunnel.\n   OCCN is used\
    \ to indicate that the result of a requested outgoing call\n   was successful.\
    \ It also provides information to the LNS about the\n   particular parameters\
    \ obtained after the call was established.\n   The following AVPs MUST be present\
    \ in the OCCN:\n      Message Type\n      (Tx) Connect Speed\n      Framing Type\n\
    \   The following AVPs MAY be present in the OCCN:\n      Rx Connect Speed\n \
    \     Sequencing Required\n"
- title: 6.12 Call-Disconnect-Notify (CDN)
  contents:
  - "6.12 Call-Disconnect-Notify (CDN)\n   The Call-Disconnect-Notify (CDN) message\
    \ is an L2TP control message\n   sent by either the LAC or LNS to request disconnection\
    \ of a specific\n   call within the tunnel. Its purpose is to inform the peer\
    \ of the\n   disconnection and the reason why the disconnection occurred. The\
    \ peer\n   MUST clean up any resources, and does not send back any indication\
    \ of\n   success or failure for such cleanup.\n   The following AVPs MUST be present\
    \ in the CDN:\n      Message Type\n      Result Code\n      Assigned Session ID\n\
    \   The following AVPs MAY be present in the CDN:\n      Q.931 Cause Code\n"
- title: 6.13 WAN-Error-Notify (WEN)
  contents:
  - "6.13 WAN-Error-Notify (WEN)\n   The WAN-Error-Notify message is an L2TP control\
    \ message sent by the\n   LAC to the LNS to indicate WAN error conditions (conditions\
    \ that\n   occur on the interface supporting PPP). The counters in this message\n\
    \   are cumulative. This message should only be sent when an error\n   occurs,\
    \ and not more than once every 60 seconds. The counters are\n   reset when a new\
    \ call is established.\n   The following AVPs MUST be present in the WEN:\n  \
    \    Message Type\n      Call Errors\n"
- title: 6.14 Set-Link-Info (SLI)
  contents:
  - "6.14 Set-Link-Info (SLI)\n   The Set-Link-Info message is an L2TP control message\
    \ sent by the LNS\n   to the LAC to set PPP-negotiated options.  These options\
    \ can change\n   at any time during the life of the call, thus the LAC MUST be\
    \ able to\n   update its internal call information and behavior on an active PPP\n\
    \   session.\n   The following AVPs MUST be present in the SLI:\n      Message\
    \ Type\n      ACCM\n"
- title: 7.0 Control Connection State Machines
  contents:
  - "7.0 Control Connection State Machines\n   The control messages defined in section\
    \ 6 are exchanged by way of\n   state tables defined in this section. Tables are\
    \ defined for incoming\n   call placement, outgoing call placement, as well as\
    \ for initiation of\n   the tunnel itself.  The state tables do not encode timeout\
    \ and\n   retransmission behavior, as this is handled in the underlying\n   semantics\
    \ defined in Section 5.8.\n"
- title: 7.1 Control Connection Protocol Operation
  contents:
  - "7.1 Control Connection Protocol Operation\n   This section describes the operation\
    \ of various L2TP control\n   connection functions and the Control Connection\
    \ messages which are\n   used to support them.\n   Receipt of an invalid or unrecoverable\
    \ malformed control message\n   should be logged appropriately and the control\
    \ connection cleared to\n   ensure recovery to a known state. The control connection\
    \ may then be\n   restarted by the initiator.\n   An invalid control message is\
    \ defined as a message which contains a\n   Message Type that is marked mandatory\
    \ (see Section 4.4.1) and is\n   unknown to the implementation, or a control message\
    \ that is received\n   in an improper sequence (e.g. an SCCCN sent in reply to\
    \ an SCCRQ).\n   Examples of a malformed control message include one that has\
    \ an\n   invalid value in its header, contains an AVP that is formatted\n   incorrectly\
    \ or whose value is out of range, or a message that is\n   missing a required\
    \ AVP. A control message with a malformed header\n   should be discarded. A control\
    \ message with an invalid AVP should\n   look to the M-bit for that AVP to determine\
    \ whether the error is\n   recoverable or not.\n   A malformed yet recoverable\
    \ non-mandatory (M-bit is not set) AVP\n   within a control message should be\
    \ treated in a similar manner as an\n   unrecognized non-mandatory AVP. Thus,\
    \ if a malformed AVP is received\n   with the M-bit set, the session or tunnel\
    \ should be terminated with a\n   proper Result or Error Code sent.  If the M-bit\
    \ is not set, the AVP\n   should be ignored (with the exception of logging a local\
    \ error\n   message) and the message accepted.\n   This MUST NOT be considered\
    \ a license to send malformed AVPs, but\n   simply a guide towards how to handle\
    \ an improperly formatted message\n   if one is received. It is impossible to\
    \ list all potential\n   malformations of a given message and give advice for\
    \ each. That said,\n   one example of a recoverable, malformed AVP might be if\
    \ the Rx\n   Connect Speed AVP, attribute 38, is received with a length of 8\n\
    \   rather than 10 and the BPS given in 2 octets rather than 4. Since the\n  \
    \ Rx Connect Speed is non-mandatory, this condition should not be\n   considered\
    \ catastrophic. As such, the control message should be\n   accepted as if the\
    \ AVP had not been received (with the exception of a\n   local error message being\
    \ logged).\n   In several cases in the following tables, a protocol message is\
    \ sent,\n   and then a \"clean up\" occurs.  Note that regardless of the initiator\n\
    \   of the tunnel destruction, the reliable delivery mechanism must be\n   allowed\
    \ to run (see Section 5.8) before destroying the tunnel. This\n   permits the\
    \ tunnel management messages to be reliably delivered to\n   the peer.\n   Appendix\
    \ B.1 contains an example of lock-step tunnel establishment.\n"
- title: 7.2 Control Connection States
  contents:
  - "7.2 Control Connection States\n   The L2TP control connection protocol is not\
    \ distinguishable between\n   the LNS and LAC, but is distinguishable between\
    \ the originator and\n   receiver. The originating peer is the one which first\
    \ initiates\n   establishment of the tunnel (in a tie breaker situation, this\
    \ is the\n   winner of the tie). Since either LAC or LNS can be the originator,\
    \ a\n   collision can occur. See the Tie Breaker AVP in Section 4.4.3 for a\n\
    \   description of this and its resolution.\n"
- title: 7.2.1 Control Connection Establishment
  contents:
  - "7.2.1 Control Connection Establishment\n   State           Event            \
    \ Action               New State\n   -----           -----             ------\
    \               ---------\n   idle            Local             Send SCCRQ   \
    \        wait-ctl-reply\n                   Open request\n   idle            Receive\
    \ SCCRQ,    Send SCCRP           wait-ctl-conn\n                   acceptable\n\
    \   idle            Receive SCCRQ,    Send StopCCN,        idle\n            \
    \       not acceptable    Clean up\n   idle            Receive SCCRP     Send\
    \ StopCCN         idle\n                                     Clean up\n   idle\
    \            Receive SCCCN     Clean up             idle\n   wait-ctl-reply  Receive\
    \ SCCRP,    Send SCCCN,          established\n                   acceptable  \
    \      Send tunnel-open\n                                     event to waiting\n\
    \                                     sessions\n   wait-ctl-reply  Receive SCCRP,\
    \    Send StopCCN,        idle\n                   not acceptable    Clean up\n\
    \   wait-ctl-reply  Receive SCCRQ,    Clean up,            idle\n            \
    \       lose tie-breaker  Re-queue SCCRQ\n                                   \
    \  for idle state\n   wait-ctl-reply  Receive SCCCN     Send StopCCN         idle\n\
    \                                     Clean up\n   wait-ctl-conn   Receive SCCCN,\
    \    Send tunnel-open     established\n                   acceptable        event\
    \ to waiting\n                                     sessions\n   wait-ctl-conn\
    \   Receive SCCCN,    Send StopCCN,        idle\n                   not acceptable\
    \    Clean up\n   wait-ctl-conn   Receive SCCRP,    Send StopCCN,        idle\n\
    \                   SCCRQ             Clean up\n   established     Local     \
    \        Send tunnel-open     established\n                   Open request   \
    \   event to waiting\n                   (new call)        sessions\n   established\
    \     Admin             Send StopCCN         idle\n                   Tunnel Close\
    \      Clean up\n   established     Receive SCCRQ,    Send StopCCN         idle\n\
    \                   SCCRP, SCCCN      Clean up\n   idle            Receive StopCCN\
    \   Clean up             idle\n   wait-ctl-reply,\n   wait-ctl-conn,\n   established\n\
    \   The states associated with the LNS or LAC for control connection\n   establishment\
    \ are:\n   idle\n      Both initiator and recipient start from this state.  An\
    \ initiator\n      transmits an SCCRQ, while a recipient remains in the idle state\n\
    \      until receiving an SCCRQ.\n   wait-ctl-reply\n      The originator checks\
    \ to see if another connection has been\n      requested from the same peer, and\
    \ if so, handles the collision\n      situation described in Section 5.8.\n  \
    \    When an SCCRP is received, it is examined for a compatible\n      version.\
    \ If the version of the reply is lower than the version\n      sent in the request,\
    \ the older (lower) version should be used\n      provided it is supported.  If\
    \ the version in the reply is earlier\n      and supported, the originator moves\
    \ to the established state.  If\n      the version is earlier and not supported,\
    \ a StopCCN MUST be sent\n      to the peer and the originator cleans up and terminates\
    \ the\n      tunnel.\n   wait-ctl-conn\n      This is where an SCCCN is awaited;\
    \ upon receipt, the challenge\n      response is checked. The tunnel either is\
    \ established, or is torn\n      down if an authorization failure is detected.\n\
    \   established\n      An established connection may be terminated by either a\
    \ local\n      condition or the receipt of a Stop-Control-Connection-\n      Notification.\
    \ In the event of a local termination, the originator\n      MUST send a Stop-Control-Connection-Notification\
    \ and clean up the\n      tunnel.\n      If the originator receives a Stop-Control-Connection-Notification\n\
    \      it MUST also clean up the tunnel.\n"
- title: 7.3 Timing considerations
  contents:
  - "7.3 Timing considerations\n   Due to the real-time nature of telephone signaling,\
    \ both the LNS and\n   LAC should be implemented with multi-threaded architectures\
    \ such that\n   messages related to multiple calls are not serialized and blocked.\n\
    \   The call and connection state figures do not specify exceptions\n   caused\
    \ by timers.  These are addressed in Section 5.8.\n"
- title: 7.4 Incoming calls
  contents:
  - "7.4 Incoming calls\n   An Incoming-Call-Request message is generated by the LAC\
    \ when an\n   incoming call is detected (for example, an associated telephone\
    \ line\n   rings). The LAC selects a Session ID and serial number and indicates\n\
    \   the call bearer type. Modems should always indicate analog call type.\n  \
    \ ISDN calls should indicate digital when unrestricted digital service\n   or\
    \ rate adaption is used and analog if digital modems are involved.\n   Calling\
    \ Number, Called Number, and Subaddress may be included in the\n   message if\
    \ they are available from the telephone network.\n   Once the LAC sends the Incoming-Call-Request,\
    \ it waits for a response\n   from the LNS but it does not necessarily answer\
    \ the call from the\n   telephone network yet.  The LNS may choose not to accept\
    \ the call if:\n      -  No resources are available to handle more sessions\n\
    \      -  The dialed, dialing, or subaddress fields do not correspond to\n   \
    \      an authorized user\n      -  The bearer service is not authorized or supported\n\
    \   If the LNS chooses to accept the call, it responds with an Incoming-\n   Call-Reply.\
    \  When the LAC receives the Incoming-Call-Reply, it\n   attempts to connect the\
    \ call.  A final call connected message from\n   the LAC to the LNS indicates\
    \ that the call states for both the LAC\n   and the LNS should enter the established\
    \ state.  If the call\n   terminated before the LNS could accept it, a Call-Disconnect-Notify\n\
    \   is sent by the LAC to indicate this condition.\n   When the dialed-in client\
    \ hangs up, the call is cleared normally and\n   the LAC sends a Call-Disconnect-Notify\
    \ message. If the LNS wishes to\n   clear a call, it sends a Call-Disconnect-Notify\
    \ message and cleans up\n   its session.\n"
- title: 7.4.1 LAC Incoming Call States
  contents:
  - "7.4.1 LAC Incoming Call States\n   State           Event              Action\
    \            New State\n   -----           -----              ------         \
    \   ---------\n   idle            Bearer Ring or     Initiate local    wait-tunnel\n\
    \                   Ready to indicate  tunnel open\n                   incoming\
    \ conn.\n   idle            Receive ICCN,      Clean up          idle\n      \
    \             ICRP, CDN\n   wait-tunnel     Bearer line drop   Clean up      \
    \    idle\n                   or local close\n                   request\n   wait-tunnel\
    \     tunnel-open        Send ICRQ         wait-reply\n   wait-reply      Receive\
    \ ICRP,      Send ICCN         established\n                   acceptable\n  \
    \ wait-reply      Receive ICRP,      Send CDN,         idle\n                \
    \   Not acceptable     Clean up\n   wait-reply      Receive ICRQ       Send CDN\
    \          idle\n                                      Clean up\n   wait-reply\
    \      Receive CDN        Clean up          idle\n                   ICCN\n  \
    \ wait-reply      Local              Send CDN,         idle\n                \
    \   close request or   Clean up\n                   Bearer line drop\n   established\
    \     Receive CDN        Clean up          idle\n   established     Receive ICRQ,\
    \      Send CDN,         idle\n                   ICRP, ICCN         Clean up\n\
    \   established     Bearer line        Send CDN,         idle\n              \
    \     drop or local      Clean up\n                   close request\n   The states\
    \ associated with the LAC for incoming calls are:\n   idle\n      The LAC detects\
    \ an incoming call on one of its interfaces.\n      Typically this means an analog\
    \ line is ringing or an ISDN TE has\n      detected an incoming Q.931 SETUP message.\
    \ The LAC initiates its\n      tunnel establishment state machine, and moves to\
    \ a state waiting\n      for confirmation of the existence of a tunnel.\n   wait-tunnel\n\
    \      In this state the session is waiting for either the control\n      connection\
    \ to be opened or for verification that the tunnel is\n      already open. Once\
    \ an indication that the tunnel has/was opened,\n      session control messages\
    \ may be exchanged.  The first of these is\n      the Incoming-Call-Request.\n\
    \   wait-reply\n      The LAC receives either a CDN message indicating the LNS\
    \ is not\n      willing to accept the call (general error or don't accept) and\n\
    \      moves back into the idle state, or an Incoming-Call-Reply message\n   \
    \   indicating the call is accepted, the LAC sends an Incoming-Call-\n      Connected\
    \ message and enters the established state.\n   established\n      Data is exchanged\
    \ over the tunnel.  The call may be cleared\n      following:\n         + An event\
    \ on the connected interface:  The LAC sends a Call-\n           Disconnect-Notify\
    \ message\n         + Receipt of a Call-Disconnect-Notify message:  The LAC cleans\n\
    \           up, disconnecting the call.\n         + A local reason:  The LAC sends\
    \ a Call-Disconnect-Notify\n           message.\n"
- title: 7.4.2 LNS Incoming Call States
  contents:
  - "7.4.2 LNS Incoming Call States\n   State           Event              Action\
    \            New State\n   -----           -----              ------         \
    \   ---------\n   idle            Receive ICRQ,      Send ICRP         wait-connect\n\
    \                   acceptable\n   idle            Receive ICRQ,      Send CDN,\
    \         idle\n                   not acceptable     Clean up\n   idle      \
    \      Receive ICRP       Send CDN          idle\n                           \
    \           Clean up\n   idle            Receive ICCN       Clean up         \
    \ idle\n   wait-connect    Receive ICCN       Prepare for       established\n\
    \                   acceptable         data\n   wait-connect    Receive ICCN \
    \      Send CDN,         idle\n                   not acceptable     Clean up\n\
    \   wait-connect    Receive ICRQ,      Send CDN          idle\n              \
    \     ICRP               Clean up\n   idle,           Receive CDN        Clean\
    \ up          idle\n   wait-connect,\n   established\n   wait-connect    Local\
    \              Send CDN,         idle\n   established     Close request      Clean\
    \ up\n   established     Receive ICRQ,      Send CDN          idle\n         \
    \          ICRP, ICCN         Clean up\n   The states associated with the LNS\
    \ for incoming calls are:\n   idle\n      An Incoming-Call-Request message is\
    \ received. If the request is\n      not acceptable, a Call-Disconnect-Notify\
    \ is sent back to the LAC\n      and the LNS remains in the idle state. If the\
    \ Incoming-Call-\n      Request message is acceptable, an Incoming-Call-Reply\
    \ is sent. The\n      session moves to the wait-connect state.\n   wait-connect\n\
    \      If the session is still connected on the LAC, the LAC sends an\n      Incoming-Call-Connected\
    \ message to the LNS which then moves into\n      established state.  The LAC\
    \ may send a Call-Disconnect-Notify to\n      indicate that the incoming caller\
    \ could not be connected. This\n      could happen, for example, if a telephone\
    \ user accidentally places\n      a standard voice call to an LAC resulting in\
    \ a handshake failure\n      on the called modem.\n   established\n      The session\
    \ is terminated either by receipt of a Call-Disconnect-\n      Notify message\
    \ from the LAC or by sending a Call-Disconnect-\n      Notify. Clean up follows\
    \ on both sides regardless of the\n      initiator.\n"
- title: 7.5 Outgoing calls
  contents:
  - "7.5 Outgoing calls\n   Outgoing calls are initiated by an LNS and instruct an\
    \ LAC to place a\n   call.  There are three messages for outgoing calls:  Outgoing-Call-\n\
    \   Request, Outgoing-Call-Reply, and Outgoing-Call-Connected.  The LNS\n   sends\
    \ an Outgoing-Call-Request specifying the dialed party phone\n   number, subaddress\
    \ and other parameters. The LAC MUST respond to the\n   Outgoing-Call-Request\
    \ message with an Outgoing-Call-Reply message\n   once the LAC determines that\
    \ the proper facilities exist to place the\n   call and the call is administratively\
    \ authorized.  For example, is\n   this LNS allowed to dial an international call?\
    \  Once the outbound\n   call is connected, the LAC sends an Outgoing-Call-Connected\
    \ message\n   to the LNS indicating the final result of the call attempt:\n"
- title: 7.5.1 LAC Outgoing Call States
  contents:
  - "7.5.1 LAC Outgoing Call States\n   State           Event              Action\
    \            New State\n   -----           -----              ------         \
    \   ---------\n   idle            Receive OCRQ,      Send OCRP,        wait-cs-answer\n\
    \                   acceptable         Open bearer\n   idle            Receive\
    \ OCRQ,      Send CDN,         idle\n                   not acceptable     Clean\
    \ up\n   idle            Receive OCRP       Send CDN          idle\n         \
    \                             Clean up\n   idle            Receive OCCN,     \
    \ Clean up          idle\n                   CDN\n   wait-cs-answer  Bearer answer,\
    \     Send OCCN         established\n                   framing detected\n   wait-cs-answer\
    \  Bearer failure     Send CDN,         idle\n                               \
    \       Clean up\n   wait-cs-answer  Receive OCRQ,      Send CDN          idle\n\
    \                   OCRP, OCCN         Clean up\n   established     Receive OCRQ,\
    \      Send CDN          idle\n                   OCRP, OCCN         Clean up\n\
    \   wait-cs-answer, Receive CDN        Clean up          idle\n   established\n\
    \   established     Bearer line drop,  Send CDN,         idle\n              \
    \     Local close        Clean up\n                   request\n   The states associated\
    \ with the LAC for outgoing calls are:\n   idle\n      If Outgoing-Call-Request\
    \ is received in error, respond with a\n      Call-Disconnect-Notify. Otherwise,\
    \ allocate a physical channel and\n      send an Outgoing-Call-Reply. Place the\
    \ outbound call and move to\n      the wait-cs-answer state.\n   wait-cs-answer\n\
    \      If the call is not completed or a timer expires waiting for the\n     \
    \ call to complete, send a Call-Disconnect-Notify with the\n      appropriate\
    \ error condition set and go to idle state. If a circuit\n      switched connection\
    \ is established and framing is detected, send\n      an Outgoing-Call-Connected\
    \ indicating success and go to\n      established state.\n   established\n   \
    \   If a Call-Disconnect-Notify is received by the LAC, the telco call\n     \
    \ MUST be released via appropriate mechanisms and the session\n      cleaned up.\
    \ If the call is disconnected by the client or the\n      called interface, a\
    \ Call-Disconnect-Notify message MUST be sent to\n      the LNS. The sender of\
    \ the Call-Disconnect-Notify message returns\n      to the idle state after sending\
    \ of the message is complete.\n"
- title: 7.5.2 LNS Outgoing Call States
  contents:
  - "7.5.2 LNS Outgoing Call States\n   State           Event              Action\
    \            New State\n   -----           -----              ------         \
    \   ---------\n   idle            Local              Initiate local    wait-tunnel\n\
    \                   open request       tunnel-open\n   idle            Receive\
    \ OCCN,      Clean up          idle\n                   OCRP, CDN\n   wait-tunnel\
    \     tunnel-open        Send OCRQ         wait-reply\n   wait-reply      Receive\
    \ OCRP,      none              wait-connect\n                   acceptable\n \
    \  wait-reply      Receive OCRP,      Send CDN          idle\n               \
    \    not acceptable     Clean up\n   wait-reply      Receive OCCN,      Send CDN\
    \          idle\n                   OCRQ               Clean up\n   wait-connect\
    \    Receive OCCN       none              established\n   wait-connect    Receive\
    \ OCRQ,      Send CDN          idle\n                   OCRP               Clean\
    \ up\n   idle,           Receive CDN,       Clean up          idle\n   wait-reply,\n\
    \   wait-connect,\n   established\n   established     Receive OCRQ,      Send\
    \ CDN          idle\n                   OCRP, OCCN         Clean up\n   wait-reply,\
    \     Local              Send CDN          idle\n   wait-connect,   Close request\
    \      Clean up\n   established\n   wait-tunnel     Local              Clean up\
    \          idle\n                   Close request\n   The states associated with\
    \ the LNS for outgoing calls are:\n   idle, wait-tunnel\n      When an outgoing\
    \ call is initiated, a tunnel is first created,\n      much as the idle and wait-tunnel\
    \ states for an LAC incoming call.\n      Once a tunnel is established, an Outgoing-Call-Request\
    \ message is\n      sent to the LAC and the session moves into the wait-reply\
    \ state.\n   wait-reply\n      If a Call-Disconnect-Notify is received, an error\
    \ occurred, and\n      the session is cleaned up and returns to idle.  If an Outgoing-\n\
    \      Call-Reply is received, the call is in progress and the session\n     \
    \ moves to the wait-connect state.\n   wait-connect\n      If a Call-Disconnect-Notify\
    \ is received, the call failed; the\n      session is cleaned up and returns to\
    \ idle.  If an Outgoing-Call-\n      Connected is received, the call has succeeded\
    \ and the session may\n      now exchange data.\n   established\n      If a Call-Disconnect-Notify\
    \ is received, the call has been\n      terminated for the reason indicated in\
    \ the Result and Cause Codes;\n      the session moves back to the idle state.\
    \  If the LNS chooses to\n      terminate the session, it sends a Call-Disconnect-Notify\
    \ to the\n      LAC and then cleans up and idles its session.\n"
- title: 7.6 Tunnel Disconnection
  contents:
  - "7.6 Tunnel Disconnection\n   The disconnection of a tunnel consists of either\
    \ peer issuing a\n   Stop-Control-Connection-Notification. The sender of this\
    \ Notification\n   should wait a finite period of time for the acknowledgment\
    \ of this\n   message before releasing the control information associated with\
    \ the\n   tunnel. The recipient of this Notification should send an\n   acknowledgment\
    \ of the Notification and then release the associated\n   control information.\n\
    \   When to release a tunnel is an implementation issue and is not\n   specified\
    \ in this document. A particular implementation may use\n   whatever policy is\
    \ appropriate for determining when to release a\n   control connection. Some implementations\
    \ may leave a tunnel open for\n   a period of time or perhaps indefinitely after\
    \ the last session for\n   that tunnel is cleared. Others may choose to disconnect\
    \ the tunnel\n   immediately after the last user connection on the tunnel disconnects.\n"
- title: 8.0 L2TP Over Specific Media
  contents:
  - "8.0 L2TP Over Specific Media\n   L2TP is self-describing, operating at a level\
    \ above the media over\n   which it is carried. However, some details of its connection\
    \ to media\n   are required to permit interoperable implementations. The following\n\
    \   sections describe details needed to permit interoperability over\n   specific\
    \ media.\n"
- title: 8.1 L2TP over UDP/IP
  contents:
  - "8.1 L2TP over UDP/IP\n   L2TP uses the registered UDP port 1701 [RFC1700]. The\
    \ entire L2TP\n   packet, including payload and L2TP header, is sent within a\
    \ UDP\n   datagram. The initiator of an L2TP tunnel picks an available source\n\
    \   UDP port (which may or may not be 1701), and sends to the desired\n   destination\
    \ address at port 1701.  The recipient picks a free port on\n   its own system\
    \ (which may or may not be 1701), and sends its reply to\n   the initiator's UDP\
    \ port and address, setting its own source port to\n   the free port it found.\
    \ Once the source and destination ports and\n   addresses are established, they\
    \ MUST remain static for the life of\n   the tunnel.\n   It has been suggested\
    \ that having the recipient choose an arbitrary\n   source port (as opposed to\
    \ using the destination port in the packet\n   initiating the tunnel, i.e., 1701)\
    \ may make it more difficult for\n   L2TP to traverse some NAT devices. Implementors\
    \ should consider the\n   potential implication of this before before choosing\
    \ an arbitrary\n   source port.\n   IP fragmentation may occur as the L2TP packet\
    \ travels over the IP\n   substrate. L2TP makes no special efforts to optimize\
    \ this. A LAC\n   implementation MAY cause its LCP to negotiate for a specific\
    \ MRU,\n   which could optimize for LAC environments in which the MTU's of the\n\
    \   path over which the L2TP packets are likely to travel have a\n   consistent\
    \ value.\n   The default for any L2TP implementation is that UDP checksums MUST\
    \ be\n   enabled for both control and data messages. An L2TP implementation\n\
    \   MAY provide an option to disable UDP checksums for data messages. It\n   is\
    \ recommended that UDP checksums always be enabled on control\n   packets.\n \
    \  Port 1701 is used for both L2F [RFC2341] and L2TP packets. The\n   Version\
    \ field in each header may be used to discriminate between the\n   two packet\
    \ types (L2F uses a value of 1, and the L2TP version\n   described in this document\
    \ uses a value of 2). An L2TP implementation\n   running on a system which does\
    \ not support L2F MUST silently discard\n   all L2F packets.\n   To the PPP clients\
    \ using an L2TP-over-UDP/IP tunnel, the PPP link has\n   the characteristic of\
    \ being able to reorder or silently drop packets.\n   The former may break non-IP\
    \ protocols being carried by PPP,\n   especially LAN-centric ones such as bridging.\
    \  The latter may break\n   protocols which assume per-packet indication of error,\
    \ such as TCP\n   header compression.  Sequencing may be handled by using L2TP\
    \ data\n   message sequence numbers if any protocol being transported by the PPP\n\
    \   tunnel cannot tolerate reordering. The sequence dependency\n   characteristics\
    \ of individual protocols are outside the scope of this\n   document.\n   Allowing\
    \ packets to be dropped silently is perhaps more problematic\n   with some protocols.\
    \ If PPP reliable delivery [RFC1663] is enabled,\n   no upper PPP protocol will\
    \ encounter lost packets. If L2TP sequence\n   numbers are enabled, L2TP can detect\
    \ the packet loss. In the case of\n   an LNS, the PPP and L2TP stacks are both\
    \ present within the LNS, and\n   packet loss signaling may occur precisely as\
    \ if a packet was received\n   with a CRC error. Where the LAC and PPP stack are\
    \ co-resident, this\n   technique also applies. Where the LAC and PPP client are\
    \ physically\n   distinct, the analogous signaling MAY be accomplished by sending\
    \ a\n   packet with a CRC error to the PPP client. Note that this would\n   greatly\
    \ increase the complexity of debugging client line problems,\n   since the client\
    \ statistics could not distinguish between true media\n   errors and LAC-initiated\
    \ ones. Further, this technique is not\n   possible on all hardware.\n   If VJ\
    \ compression is used, and neither PPP reliable delivery nor\n   sequence numbers\
    \ are enabled, each lost packet results in a 1 in\n   2**16 chance of a TCP segment\
    \ being forwarded with incorrect contents\n   [RFC1144]. Where the combination\
    \ of the packet loss rate with this\n   statistical exposure is unacceptable,\
    \ TCP header compression SHOULD\n   NOT be used.\n   In general, it is wise to\
    \ remember that the L2TP/UDP/IP transport is\n   an unreliable transport. As with\
    \ any PPP media that is subject to\n   loss, care should be taken when using protocols\
    \ that are particularly\n   loss-sensitive. Such protocols include compression\
    \ and encryption\n   protocols that employ history.\n"
- title: 8.2 IP
  contents:
  - "8.2 IP\n   When operating in IP environments, L2TP MUST offer the UDP\n   encapsulation\
    \ described in 8.1 as its default configuration for IP\n   operation. Other configurations\
    \ (perhaps corresponding to a\n   compressed header format) MAY be defined and\
    \ made available as a\n   configurable option.\n"
- title: 9.0 Security Considerations
  contents:
  - "9.0 Security Considerations\n   L2TP encounters several security issues in its\
    \ operation.  The\n   general approach of L2TP to these issues is documented here.\n"
- title: 9.1 Tunnel Endpoint Security
  contents:
  - "9.1 Tunnel Endpoint Security\n   The tunnel endpoints may optionally perform\
    \ an authentication\n   procedure of one another during tunnel establishment.\
    \  This\n   authentication has the same security attributes as CHAP, and has\n\
    \   reasonable protection against replay and snooping during the tunnel\n   establishment\
    \ process. This mechanism is not designed to provide any\n   authentication beyond\
    \ tunnel establishment; it is fairly simple for a\n   malicious user who can snoop\
    \ the tunnel stream to inject packets once\n   an authenticated tunnel establishment\
    \ has been completed\n   successfully.\n   For authentication to occur, the LAC\
    \ and LNS MUST share a single\n   secret.  Each side uses this same secret when\
    \ acting as authenticatee\n   as well as authenticator. Since a single secret\
    \ is used, the tunnel\n   authentication AVPs include differentiating values in\
    \ the CHAP ID\n   fields for each message digest calculation to guard against\
    \ replay\n   attacks.\n   The Assigned Tunnel ID and Assigned Session ID (See\
    \ Section 4.4.3)\n   SHOULD be selected in an unpredictable manner rather than\n\
    \   sequentially or otherwise.  Doing so will help deter hijacking of a\n   session\
    \ by a malicious user who does not have access to packet traces\n   between the\
    \ LAC and LNS.\n"
- title: 9.2 Packet Level Security
  contents:
  - "9.2 Packet Level Security\n   Securing L2TP requires that the underlying transport\
    \ make available\n   encryption, integrity and authentication services for all\
    \ L2TP\n   traffic.  This secure transport operates on the entire L2TP packet\n\
    \   and is functionally independent of PPP and the protocol being carried\n  \
    \ by PPP. As such, L2TP is only concerned with confidentiality,\n   authenticity,\
    \ and integrity of the L2TP packets between its tunnel\n   endpoints (the LAC\
    \ and LNS), not unlike link-layer encryption being\n   concerned only about protecting\
    \ the confidentiality of traffic\n   between its physical endpoints.\n"
- title: 9.3 End to End Security
  contents:
  - "9.3 End to End Security\n   Protecting the L2TP packet stream via a secure transport\
    \ does, in\n   turn, also protect the data within the tunneled PPP packets while\n\
    \   transported from the LAC to the LNS. Such protection should not be\n   considered\
    \ a substitution for end-to-end security between\n   communicating hosts or applications.\n"
- title: 9.4 L2TP and IPsec
  contents:
  - "9.4 L2TP and IPsec\n   When running over IP, IPsec provides packet-level security\
    \ via ESP\n   and/or AH. All L2TP control and data packets for a particular tunnel\n\
    \   appear as homogeneous UDP/IP data packets to the IPsec system.\n   In addition\
    \ to IP transport security, IPsec defines a mode of\n   operation that allows\
    \ tunneling of IP packets. The packet level\n   encryption and authentication\
    \ provided by IPsec tunnel mode and that\n   provided by L2TP secured with IPsec\
    \ provide an equivalent level of\n   security for these requirements.\n   IPsec\
    \ also defines access control features that are  required of a\n   compliant IPsec\
    \ implementation. These features allow filtering of\n   packets based upon network\
    \ and transport layer characteristics such\n   as IP address, ports, etc. In the\
    \ L2TP tunneling model, analogous\n   filtering is logically performed at the\
    \ PPP layer or network layer\n   above L2TP.  These network layer access control\
    \ features may be\n   handled at the LNS via vendor-specific authorization features\
    \ based\n   upon the authenticated PPP user, or at the network layer itself by\n\
    \   using IPsec transport mode end-to-end between the communicating\n   hosts.\
    \ The requirements for access control mechanisms are not a part\n   of the L2TP\
    \ specification and as such are outside the scope of this\n   document.\n"
- title: 9.5 Proxy PPP Authentication
  contents:
  - "9.5 Proxy PPP Authentication\n   L2TP defines AVPs that MAY be exchanged during\
    \ session establishment\n   to provide forwarding of PPP authentication information\
    \ obtained at\n   the LAC to the LNS for validation (see Section 4.4.5). This\
    \ implies a\n   direct trust relationship of the LAC on behalf of the LNS.  If\
    \ the\n   LNS chooses to implement proxy authentication, it MUST be able to be\n\
    \   configured off, requiring a new round a PPP authentication initiated\n   by\
    \ the LNS (which may or may not include a new round of LCP\n   negotiation).\n"
- title: 10.0 IANA Considerations
  contents:
  - "10.0 IANA Considerations\n   This document defines a number of \"magic\" numbers\
    \ to be maintained by\n   the IANA.  This section explains the criteria to be\
    \ used by the IANA\n   to assign additional numbers in each of these lists. The\
    \ following\n   subsections describe the assignment policy for the namespaces\
    \ defined\n   elsewhere in this document.\n"
- title: 10.1 AVP Attributes
  contents:
  - "10.1 AVP Attributes\n   As defined in Section 4.1, AVPs contain vendor ID, Attribute\
    \ and\n   Value fields. For vendor ID value of 0, IANA will maintain a registry\n\
    \   of assigned Attributes and in some case also values. Attributes 0-39\n   are\
    \ assigned as defined in Section 4.4. The remaining values are\n   available for\
    \ assignment through IETF Consensus [RFC 2434].\n"
- title: 10.2 Message Type AVP Values
  contents:
  - "10.2 Message Type AVP Values\n   As defined in Section 4.4.1, Message Type AVPs\
    \ (Attribute Type 0)\n   have an associated value maintained by IANA. Values 0-16\
    \ are defined\n   in Section 3.2, the remaining values are available for assignment\
    \ via\n   IETF Consensus [RFC 2434]\n"
- title: 10.3 Result Code AVP Values
  contents:
  - "10.3 Result Code AVP Values\n   As defined in Section 4.4.2, Result Code AVPs\
    \ (Attribute Type 1)\n   contain three fields.  Two of these fields (the Result\
    \ Code and Error\n   Code fields) have associated values maintained by IANA.\n"
- title: 10.3.1 Result Code Field Values
  contents:
  - "10.3.1 Result Code Field Values\n   The Result Code AVP may be included in CDN\
    \ and StopCCN messages. The\n   allowable values for the Result Code field of\
    \ the AVP differ\n   depending upon the value of the Message Type AVP.  For the\
    \ StopCCN\n   message, values 0-7 are defined in Section 4.4.2; for the StopCCN\n\
    \   message, values 0-11 are defined in the same section.  The remaining\n   values\
    \ of the Result Code field for both messages are available for\n   assignment\
    \ via IETF Consensus [RFC 2434].\n"
- title: 10.3.2 Error Code Field Values
  contents:
  - "10.3.2 Error Code Field Values\n   Values 0-7 are defined in Section 4.4.2. \
    \ Values 8-32767 are\n   available for assignment via IETF Consensus [RFC 2434].\
    \ The remaining\n   values of the Error Code field are available for assignment\
    \ via First\n   Come First Served [RFC 2434].\n"
- title: 10.4 Framing Capabilities & Bearer Capabilities
  contents:
  - "10.4 Framing Capabilities & Bearer Capabilities\n   The Framing Capabilities\
    \ AVP and Bearer Capabilities AVPs (defined in\n   Section 4.4.3) both contain\
    \ 32-bit bitmasks. Additional bits should\n   only be defined via a Standards\
    \ Action [RFC 2434].\n"
- title: 10.5 Proxy Authen Type AVP Values
  contents:
  - "10.5 Proxy Authen Type AVP Values\n   The Proxy Authen Type AVP (Attribute Type\
    \ 29) has an associated value\n   maintained by IANA. Values 0-5 are defined in\
    \ Section 4.4.5, the\n   remaining values are available for assignment via First\
    \ Come First\n   Served [RFC 2434].\n"
- title: 10.6 AVP Header Bits
  contents:
  - "10.6 AVP Header Bits\n   There are four remaining reserved bits in the AVP header.\
    \ Additional\n   bits should only be assigned via a Standards Action [RFC 2434].\n"
- title: 11.0 References
  contents:
  - "11.0 References\n   [DSS1]    ITU-T Recommendation, \"Digital subscriber Signaling\
    \ System\n             No. 1 (DSS 1) - ISDN user-network interface layer 3\n \
    \            specification for basic call control\", Rec. Q.931(I.451),\n    \
    \         May 1998\n   [KPS]     Kaufman, C., Perlman, R., and Speciner, M., \"\
    Network\n             Security:  Private Communications in a Public World\",\n\
    \             Prentice Hall, March 1995, ISBN 0-13-061466-1\n   [RFC791]  Postel,\
    \ J., \"Internet Protocol\", STD 5, RFC 791, September\n             1981.\n \
    \  [RFC1034] Mockapetris, P., \"Domain Names - Concepts and Facilities\",\n  \
    \           STD 13, RFC 1034, November 1987.\n   [RFC1144] Jacobson, V., \"Compressing\
    \ TCP/IP Headers for Low-Speed\n             Serial Links\", RFC 1144, February\
    \ 1990.\n   [RFC1661] Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD\
    \ 51,\n             RFC 1661, July 1994.\n   [RFC1662] Simpson, W., \"PPP in HDLC-like\
    \ Framing\", STD 51, RFC 1662,\n             July 1994.\n   [RFC1663] Rand, D.,\
    \ \"PPP Reliable Transmission\", RFC 1663, July 1994.\n   [RFC1700] Reynolds,\
    \ J. and J. Postel, \"Assigned Numbers\", STD 2, RFC\n             1700, October\
    \ 1994.  See also:\n             http://www.iana.org/numbers.html\n   [RFC1990]\
    \ Sklower, K., Lloyd, B., McGregor, G., Carr, D. and T.\n             Coradetti,\
    \ \"The PPP Multilink Protocol (MP)\", RFC 1990,\n             August 1996.\n\
    \   [RFC1994] Simpson, W., \"PPP Challenge Handshake Authentication\n        \
    \     Protocol (CHAP)\", RFC 1994, August 1996.\n   [RFC1918] Rekhter, Y., Moskowitz,\
    \ B., Karrenberg, D., de Groot, G.\n             and E. Lear, \"Address Allocation\
    \ for Private Internets\",\n             BCP 5, RFC 1918, February 1996.\n   [RFC2119]\
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2138] Rigney, C., Rubens, A.,\
    \ Simpson, W. and S. Willens, \"Remote\n             Authentication Dial In User\
    \ Service (RADIUS)\", RFC 2138,\n             April 1997.\n   [RFC2277] Alvestrand,\
    \ H., \"IETF Policy on Character Sets and\n             Languages\", BCP 18, RFC\
    \ 2277, January 1998.\n   [RFC2341] Valencia, A., Littlewood, M. and T. Kolar,\
    \ \"Cisco Layer Two\n             Forwarding (Protocol) L2F\", RFC 2341, May 1998.\n\
    \   [RFC2401] Kent, S. and R. Atkinson, \"Security Architecture for the\n    \
    \         Internet Protocol\", RFC 2401, November 1998.\n   [RFC2434] Narten,\
    \ T. and H. Alvestrand, \"Guidelines for Writing an\n             IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 2434,\n             October 1998.\n   [RFC2637]\
    \ Hamzeh, K., Pall, G., Verthein, W., Taarud, J., Little, W.\n             and\
    \ G. Zorn, \"Point-to-Point Tunneling Protocol (PPTP)\",\n             RFC 2637,\
    \ July 1999.\n   [STEVENS] Stevens, W. Richard, \"TCP/IP Illustrated, Volume I\
    \ The\n             Protocols\", Addison-Wesley Publishing Company, Inc., March\n\
    \             1996, ISBN 0-201-63346-9\n"
- title: 12.0 Acknowledgments
  contents:
  - "12.0 Acknowledgments\n   The basic concept for L2TP and many of its protocol\
    \ constructs were\n   adopted from L2F [RFC2341] and PPTP [PPTP]. Authors of these\
    \ are A.\n   Valencia, M. Littlewood, T. Kolar, K. Hamzeh, G. Pall, W. Verthein,\n\
    \   J. Taarud, W. Little, and G. Zorn.\n   Dory Leifer made valuable refinements\
    \ to the protocol definition of\n   L2TP and contributed to the editing of this\
    \ document.\n   Steve Cobb and Evan Caves redesigned the state machine tables.\n\
    \   Barney Wolff provided a great deal of design input on the endpoint\n   authentication\
    \ mechanism.\n   John Bray, Greg Burns, Rich Garrett, Don Grosser, Matt Holdrege,\n\
    \   Terry Johnson, Dory Leifer, and Rich Shea provided valuable input and\n  \
    \ review at the 43rd IETF in Orlando, FL., which led to improvement of\n   the\
    \ overall readability and clarity of this document.\n"
- title: 13.0 Authors' Addresses
  contents:
  - "13.0 Authors' Addresses\n   Gurdeep Singh Pall\n   Microsoft Corporation\n  \
    \ Redmond, WA\n   EMail: gurdeep@microsoft.com\n   Bill Palter\n   RedBack Networks,\
    \ Inc\n   1389 Moffett Park Drive\n   Sunnyvale, CA 94089\n   EMail: palter@zev.net\n\
    \   Allan Rubens\n   Ascend Communications\n   1701 Harbor Bay Parkway\n   Alameda,\
    \ CA 94502\n   EMail: acr@del.com\n   W. Mark Townsley\n   cisco Systems\n   7025\
    \ Kit Creek Road\n   PO Box 14987\n   Research Triangle Park, NC 27709\n   EMail:\
    \ townsley@cisco.com\n   Andrew J. Valencia\n   cisco Systems\n   170 West Tasman\
    \ Drive\n   San Jose CA 95134-1706\n   EMail: vandys@cisco.com\n   Glen Zorn\n\
    \   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA 98052\n   EMail:\
    \ gwz@acm.org\n"
- title: 'Appendix A: Control Channel Slow Start and Congestion Avoidance'
  contents:
  - "Appendix A: Control Channel Slow Start and Congestion Avoidance\n   Although\
    \ each side has indicated the maximum size of its receive\n   window, it is recommended\
    \ that a slow start and congestion avoidance\n   method be used to transmit control\
    \ packets.  The methods described\n   here are based upon the TCP congestion avoidance\
    \ algorithm as\n   described in section 21.6 of TCP/IP Illustrated, Volume I,\
    \ by W.\n   Richard Stevens [STEVENS].\n   Slow start and congestion avoidance\
    \ make use of several variables.\n   The congestion window (CWND) defines the\
    \ number of packets a sender\n   may send before waiting for an acknowledgment.\
    \ The size of CWND\n   expands and contracts as described below. Note however,\
    \ that CWND is\n   never allowed to exceed the size of the advertised window obtained\n\
    \   from the Receive Window AVP (in the text below, it is assumed any\n   increase\
    \ will be limited by the Receive Window Size). The variable\n   SSTHRESH determines\
    \ when the sender switches from slow start to\n   congestion avoidance. Slow start\
    \ is used while CWND is less than\n   SSHTRESH.\n   A sender starts out in the\
    \ slow start phase. CWND is initialized to\n   one packet, and SSHTRESH is initialized\
    \ to the advertised window\n   (obtained from the Receive Window AVP).  The sender\
    \ then transmits\n   one packet and waits for its acknowledgement (either explicit\
    \ or\n   piggybacked). When the acknowledgement is received, the congestion\n\
    \   window is incremented from one to two.  During slow start, CWND is\n   increased\
    \ by one packet each time an ACK (explicit ZLB or\n   piggybacked) is received.\
    \ Increasing CWND by one on each ACK has the\n   effect of doubling CWND with\
    \ each round trip, resulting in an\n   exponential increase. When the value of\
    \ CWND reaches SSHTRESH, the\n   slow start phase ends and the congestion avoidance\
    \ phase begins.\n   During congestion avoidance, CWND expands more slowly. Specifically,\n\
    \   it increases by 1/CWND for every new ACK received. That is, CWND is\n   increased\
    \ by one packet after CWND new ACKs have been received.\n   Window expansion during\
    \ the congestion avoidance phase is effectively\n   linear, with CWND increasing\
    \ by one packet each round trip.\n   When congestion occurs (indicated by the\
    \ triggering of a\n   retransmission) one half of the CWND is saved in SSTHRESH,\
    \ and CWND\n   is set to one. The sender then reenters the slow start phase.\n"
- title: 'Appendix B: Control Message Examples'
  contents:
  - 'Appendix B: Control Message Examples

    '
- title: 'B.1: Lock-step tunnel establishment'
  contents:
  - "B.1: Lock-step tunnel establishment\n   In this example, an LAC establishes a\
    \ tunnel, with the exchange\n   involving each side alternating in sending messages.\
    \  This example\n   shows the final acknowledgment explicitly sent within a ZLB\
    \ ACK\n   message. An alternative would be to piggyback the acknowledgement\n\
    \   within a message sent as a reply to the ICRQ or OCRQ that will likely\n  \
    \ follow from the side that initiated the tunnel.\n          LAC or LNS      \
    \         LNS or LAC\n          ----------               ----------\n        \
    \  SCCRQ     ->\n          Nr: 0, Ns: 0\n                                   <-\
    \     SCCRP\n                                   Nr: 1, Ns: 0\n          SCCCN\
    \     ->\n          Nr: 1, Ns: 1\n                                   <-      \
    \ ZLB\n                                   Nr: 2, Ns: 1\n"
- title: 'B.2: Lost packet with retransmission'
  contents:
  - "B.2: Lost packet with retransmission\n   An existing tunnel has a new session\
    \ requested by the LAC.  The ICRP\n   is lost and must be retransmitted by the\
    \ LNS.  Note that loss of the\n   ICRP has two impacts: not only does it keep\
    \ the upper level state\n   machine from progressing, but it also keeps the LAC\
    \ from seeing a\n   timely lower level acknowledgment of its ICRQ.\n         \
    \   LAC                               LNS\n            ---                   \
    \            ---\n        ICRQ      ->\n        Nr: 1, Ns: 2\n               \
    \          (packet lost)   <-      ICRP\n                                    \
    \     Nr: 3, Ns: 1\n      (pause; LAC's timer started first, so fires first)\n\
    \       ICRQ      ->\n       Nr: 1, Ns: 2\n       (Realizing that it has already\
    \ seen this packet,\n       the LNS discards the packet and sends a ZLB)\n   \
    \                                      <-       ZLB\n                        \
    \                 Nr: 3, Ns: 2\n                       (LNS's retransmit timer\
    \ fires)\n                                         <-      ICRP\n            \
    \                             Nr: 3, Ns: 1\n       ICCN      ->\n       Nr: 2,\
    \ Ns: 3\n                                         <-       ZLB\n             \
    \                            Nr: 4, Ns: 2\n"
- title: 'Appendix C: Intellectual Property Notice'
  contents:
  - "Appendix C: Intellectual Property Notice\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementers or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\"\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n   The IETF has been notified of intellectual\
    \ property rights claimed in\n   regard to some or all of the specification contained\
    \ in this\n   document.  For more information consult the online list of claimed\n\
    \   rights.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
