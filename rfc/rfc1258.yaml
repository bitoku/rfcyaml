- title: __initial_text__
  contents:
  - '                               BSD Rlogin

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo documents an existing protocol and common implementation\n\
    \   that is extensively used on the Internet.  This memo provides\n   information\
    \ for the Internet community.  It does not specify an\n   Internet standard. \
    \ Distribution of this memo is unlimited.\n"
- title: Protocol Description
  contents:
  - "Protocol Description\n   The rlogin facility provides a remote-echoed, locally\
    \ flow-controlled\n   virtual terminal with proper flushing of output.  It is\
    \ widely used\n   between Unix hosts because it provides transport of more of\
    \ the Unix\n   terminal environment semantics than does the Telnet protocol, and\n\
    \   because on many Unix hosts it can be configured not to require user\n   entry\
    \ of passwords when connections originate from trusted hosts.\n   The rlogin protocol\
    \ requires the use of the TCP.  The contact port is\n   513.  An eight-bit transparent\
    \ stream is assumed.\n"
- title: Connection Establishment
  contents:
  - "Connection Establishment\n   Upon connection establishment, the client sends\
    \ four null-terminated\n   strings to the server.  The first is an empty string\
    \ (i.e., it\n   consists solely of a single zero byte), followed by three non-null\n\
    \   strings: the client username, the server username, and the terminal\n   type\
    \ and speed.  More explicitly:\n        <null>\n        client-user-name<null>\n\
    \        server-user-name<null>\n        terminal-type/speed<null>\n        For\
    \ example:\n        <null>\n        bostic<null>\n        kbostic<null>\n    \
    \    vt100/9600<null>\n   The server returns a zero byte to indicate that it has\
    \ received these\n   strings and is now in data transfer mode.  Window size negotiation\n\
    \   may follow this initial exchange (see below).\n"
- title: From Client to Server (and Flow Control)
  contents:
  - "From Client to Server (and Flow Control)\n   Initially, the client begins operation\
    \ in \"cooked\" (as opposed to\n   to \"raw\") mode.  In this mode, the START\
    \ and STOP (usually ASCII\n   DC1,DC3) characters are intercepted and interpreted\
    \ by the client to\n   start and stop output from the remote server to the local\
    \ terminal,\n   whereas all other characters are transmitted to the remote host\
    \ as\n   they are received.  (But see below for the handling of the\n   local-escape\
    \ character.)\n   In \"raw\" mode, the START and STOP characters are not processed\n\
    \   locally, but are sent as any other character to the remote server.\n   The\
    \ server thus determines the semantics of the START and STOP\n   characters when\
    \ in \"raw\" mode; they may be used for flow control or\n   have quite different\
    \ meanings independent of their ordinary usage on\n   the client.\n"
- title: Screen/Window Size
  contents:
  - "Screen/Window Size\n   The remote server indicates to the client that it can\
    \ accept window\n   size change information by requesting a window size message\
    \ (as\n   described below) just after connection establishment and user\n   identification\
    \ exchange.  The client should reply to this request\n   with the current window\
    \ size.\n   If the remote server has indicated that it can accept client window\n\
    \   size changes and the size of the client's window or screen dimensions\n  \
    \ changes, a 12-byte special sequence is sent to the remote server to\n   indicate\
    \ the current dimensions of the client's window, should the\n   user process running\
    \ on the server care to make use of that\n   information.\n   The window change\
    \ control sequence is 12 bytes in length, consisting\n   of a magic cookie (two\
    \ consecutive bytes of hex FF), followed by two\n   bytes containing lower-case\
    \ ASCII \"s\", then 8 bytes containing the\n   16-bit values for the number of\
    \ character rows, the number of\n   characters per row, the number of pixels in\
    \ the X direction, and the\n   number of pixels in the Y direction, in network\
    \ byte order.  Thus:\n        FF FF s s rr cc xp yp\n   Other flags than \"ss\"\
    \ may be used in future for other in-band control\n   messages.  None are currently\
    \ defined.\n"
- title: From Server to Client
  contents:
  - "From Server to Client\n   Data from the remote server is sent to the client as\
    \ a stream of\n   characters.  Normal data is simply sent to the client's display,\
    \ but\n   may be processed before actual display (tabs expanded, etc.).\n   The\
    \ server can imbed single-byte control messages in the data stream\n   by inserting\
    \ the control byte in the stream of data and pointing the\n   TCP \"urgent-data\"\
    \ pointer at the control byte.  When a TCP urgent-\n   data pointer is received\
    \ by the client, data in the TCP stream up to\n   the urgent byte is buffered\
    \ for possible display after the control\n   byte is handled, and the control\
    \ byte pointed to is received and\n   interpreted as follows:\n   02   A control\
    \ byte of hex 02 causes the client to discard all buffered\n        data received\
    \ from the server that has not yet been written to the\n        client user's\
    \ screen.\n   10   A control byte of hex 10 commands the client to switch to \"\
    raw\"\n        mode, where the START and STOP characters are no longer handled\
    \ by\n        the client, but are instead treated as plain data.\n   20   A control\
    \ byte of hex 20 commands the client to resume interception\n        and local\
    \ processing of START and STOP flow control characters.\n   All other values of\
    \ the urgent-data control byte are ignored.  In all\n   cases, the byte pointed\
    \ to by the urgent data pointer is NOT written\n   to the client user's display.\n"
- title: Connection Closure
  contents:
  - "Connection Closure\n   When the TCP connection closes in either direction, the\
    \ client or\n   server process which notices the close should perform an orderly\n\
    \   shut-down, restoring terminal modes and notifying the user or\n   processes\
    \ of the close before it closes the connection in the other\n   direction.\n"
- title: Implementation Notes
  contents:
  - "Implementation Notes\n   The client defines a client-escape character (customarily\
    \ the tilde,\n   \"~\"), which is handled specially only if it is the first character\
    \ to\n   be typed at the beginning of a line.  (The beginning of a line is\n \
    \  defined to be the first character typed by the client user after a\n   new-line\
    \ [CR or LF] character, after a line-cancel character, after\n   resumption of\
    \ a suspended client session, or after initiation of the\n   connection.)\n  \
    \ The client-escape character is not transmitted to the server until\n   the character\
    \ after it has been examined, and if that character is\n   one of the defined\
    \ client escape sequences, neither the client-escape\n   nor the character following\
    \ it are sent.  Otherwise, both the\n   client-escape character and the character\
    \ following it are sent to\n   the server as ordinary user input.\n   If the character\
    \ following the client-escape character is the dot\n   \".\", or the client-defined\
    \ end-of-file character (usually control-D),\n   the connection is closed.  This\
    \ is normally treated by the server as\n   a disconnection, rather than an orderly\
    \ logout.\n   Other characters (client-defined, usually control-Z and control-Y)\n\
    \   are used to temporarily suspend the rlogin client when the host has\n   that\
    \ ability.  One character suspends both remote input and output;\n   the other\
    \ suspends remote input but allows remote output to continue\n   to be directed\
    \ to the local client's terminal.\n   Most client implementations have invocation\
    \ switches that can defeat\n   normal output processing on the client system,\
    \ and which can force\n   the client to remain in raw mode despite switching notification\
    \ from\n   the server.\n"
- title: A Cautionary Tale
  contents:
  - "A Cautionary Tale\n   The rlogin protocol (as commonly implemented) allows a\
    \ user to set up\n   a class of trusted users and/or hosts which will be allowed\
    \ to log on\n   as himself without the entry of a password.  While extremely\n\
    \   convenient, this represents a weakening of security that has been\n   successfully\
    \ exploited in previous attacks on the internet.  If one\n   wishes to use the\
    \ password-bypass facilities of the rlogin service,\n   it is essential to realize\
    \ the compromises that may be possible\n   thereby.\n   Bypassing password authentication\
    \ from trusted hosts opens ALL the\n   systems so configured when just one is\
    \ compromised.  Just as using\n   the same password for all systems to which you\
    \ have access lets a\n   villain in everywhere you have access, allowing passwordless\
    \ login\n   among all your systems gives a marauder a wide playing field once\
    \ he\n   has entered any of your systems.  One compromise that many feel\n   achieves\
    \ a workable balance between convenience and security is to\n   allow password\
    \ bypass from only ONE workstation to the other systems\n   you use, and NOT allow\
    \ it between those systems.  With this measure,\n   you may have reduced exposure\
    \ to a workable minimum.\n   The trusted host specification is ordinarily one\
    \ of a host name.  It\n   is possible, by compromise of your organization's domain\
    \ name server,\n   or compromise of your network itself, for a villain to make\
    \ an\n   untrusted host masquerade as a trusted system.  There is little that\n\
    \   a user can do about this form of attack.  Luckily, so far such\n   attacks\
    \ have been rare, and often cause enough disruption of a\n   network that attempts\
    \ are quickly noticed.\n   When the file containing a user's list of trusted logins\
    \ is\n   inadvertently left writeable by other users, untrustworthy additions\n\
    \   may be made to it.\n   Secure authentication extensions to the rlogin protocol\
    \ (Kerberos,\n   et al) can greatly reduce the possibility of compromise whilst\
    \ still\n   allowing the convenience of bypassing password entry.  As these become\n\
    \   more widely deployed in the internet community, the hazards of rlogin\n  \
    \ will decrease.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   See the \"A Cautionary Tale\" section above.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Brian Kantor\n   University of California at San Diego\n\
    \   Network Operations C-024\n   La Jolla, CA 92093-0214\n   Phone: (619) 534-6865\n\
    \   EMail: brian@UCSD.EDU\n"
