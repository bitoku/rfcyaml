Abstract This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS).
The new certificate type allows raw public keys to be used for authentication.
Traditionally, TLS client and server public keys are obtained in PKIX containers in band as part of the TLS handshake procedure and are validated using trust anchors based on a [PKIX] certification authority (CA).
This method can add a complicated trust relationship that is difficult to validate.
Examples of such complexity can be seen in [Defeating SSL].
TLS is, however, also commonly used with self signed certificates in smaller deployments where the self signed certificates are distributed to all involved protocol endpoints out  of band.
This practice does, however, still require the overhead of the certificate generation even though none of the information found in the certificate is actually used.
Alternative methods are available that allow a TLS client/server to obtain the TLS server/client public key:
The TLS client can obtain the TLS server public key from a DNSSEC  secured resource record using DNS Based Authentication of Named Entities (DANE)
The TLS client or server public key is obtained from a [PKIX] certificate chain from a Lightweight Directory Access Protocol [LDAP] server or web page.
The TLS client and server public key is provisioned into the operating system firmware image and updated via software updates.
For example: Some smart objects use the UDP based Constrained Application Protocol [CoAP] to interact with a Web server to upload sensor data at regular intervals, such as temperature readings.
CoAP can utilize DTLS for securing the client to server communication.
As part of the manufacturing process, the embedded device may be configured with the address and the public key of a dedicated CoAP server, as well as a public/private key pair for the client itself.
This document introduces the use of raw public keys in TLS/DTLS.
With raw public keys, only a subset of the information found in typical certificates is utilized: namely, the SubjectPublicKeyInfo structure of a PKIX certificate that carries the parameters necessary to describe the public key.
Other parameters found in PKIX certificates are omitted.
By omitting various certificate related structures, the resulting raw public key is kept fairly small in comparison to the original certificate, and the code to process the keys can be simpler.
Only a minimalistic ASN.1 parser is needed; code for certificate path validation and other PKIX related processing is not required.
Note, however, the SubjectPublicKeyInfo structure is still in an ASN.1 format.
To further reduce the size of the exchanged information, this specification can be combined with the TLS Cached Info extension [CACHED INFO], which enables TLS peers to exchange just fingerprints of their public keys.
The mechanism defined herein only provides authentication when an out of band mechanism is also used to bind the public key to the entity presenting the key.
Section 3 defines the structure of the two new TLS extensions, client certificate type and server certificate type, which can be used as part of an extended TLS handshake when raw public keys are to be used.
Section 4 defines the behavior of the TLS client and the TLS server.
Example exchanges are described in Section 5.
Section 6 describes security considerations with this approach.
Finally, in Section 7 this document registers a new value to the IANA "TLS Certificate Types" subregistry for the support of raw public keys.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
We use the terms "TLS server" and "server" as well as "TLS client" and "client" interchangeably.
Structure of the Raw Public Key Extension This section defines the two TLS extensions client certificate type and server certificate type, which can be used as part of an extended TLS handshake when raw public keys are used.
Section 4 defines the behavior of the TLS client and the TLS server using these extensions.
This specification uses raw public keys whereby the already available encoding used in a PKIX certificate in the form of a SubjectPublicKeyInfo structure is reused.
To carry the raw public key within the TLS handshake, the Certificate payload is used as a container, as shown in Figure 1.
The shown Certificate structure is an adaptation of its original form [RFC5246].
The SubjectPublicKeyInfo structure is defined in Section 4.1 of RFC 5280 [PKIX] and not only contains the raw keys, such as the public exponent and the modulus of an RSA public key, but also an algorithm identifier.
The algorithm identifier can also include parameters.
The SubjectPublicKeyInfo value in the Certificate payload MUST contain the DER encoding [X.690] of the SubjectPublicKeyInfo.
The structure, as shown in Figure 2, therefore also contains length information.
The algorithm identifiers are Object Identifiers (OIDs).
[RFC3279] and RFC 5480 [RFC5480], for example, define the OIDs shown in Figure 3.
Note that this list is not exhaustive, and more OIDs may be defined in future RFCs.
The extension format for extended client and server hellos, which uses the "extension data" field, is used to carry the ClientCertTypeExtension and the ServerCertTypeExtension structures.
These two structures are shown in Figure 4.
The CertificateType structure is an enum with values taken from the "TLS Certificate Types" subregistry of the "Transport Layer Security (TLS) Extensions" registry [TLS Ext Registry].
struct { select(ClientOrServerExtension) { case client:
8 1>; case server: CertificateType server certificate type; }
} ServerCertTypeExtension; Figure 4: CertTypeExtension Structure 4.
TLS Client and Server Handshake Behavior
This specification extends the ClientHello and the ServerHello messages, according to the extension procedures defined in [RFC5246].
It does not extend or modify any other TLS message.
Note: No new cipher suites are required to use raw public keys.
All existing cipher suites that support a key exchange method compatible with the defined extension can be used.
The high level message exchange in Figure 5 shows the client certificate type and server certificate type extensions added to the client and server hello messages.
hello, client certificate type, server certificate type, certificate, server key exchange, certificate request,
Basic Raw Public Key TLS Exchange 4.1.
In order to indicate the support of raw public keys, clients include the client certificate type and/or the server certificate type extensions in an extended client hello message.
The hello extension mechanism is described in Section 7.4.1.4 of TLS 1.2 [RFC5246].
The client certificate type extension in the client
hello indicates the certificate types the client is able to provide to the server, when requested using a certificate request message.
The server certificate type extension in the client
hello indicates the types of certificates the client is able to process when provided by the server in a subsequent certificate payload.
The client certificate type and server certificate type extensions sent in the client hello each carry a list of supported certificate types, sorted by client preference.
When the client supports only one certificate type, it is a list containing a single element.
The TLS client MUST omit certificate types from the client certificate type extension in the client hello if it does not possess the corresponding raw public key or certificate that it can provide to the server when requested using a certificate request message, or if it is not configured to use one with the given TLS server.
If the client has no remaining certificate types to send in the client hello, other than the default X.509 type, it MUST omit the client certificate type extension in the client hello.
The TLS client MUST omit certificate types from the server certificate type extension in the client hello if it is unable to process the corresponding raw public key or other certificate type.
If the client has no remaining certificate types to send in the client hello, other than the default X.509 certificate type, it MUST omit the entire server certificate type extension from the client hello.
If the server receives a client hello that contains the client certificate type extension and/or the server certificate type extension, then three outcomes are possible: 1.
The server does not support the extension defined in this document.
In this case, the server returns the server hello without the extensions defined in this document.
The server supports the extension defined in this document, but it does not have any certificate type in common with the client.
Then, the server terminates the session with a fatal alert of type "unsupported certificate".
The server supports the extensions defined in this document and has at least one certificate type in common with the client.
In this case, the processing rules described below are followed.
The client certificate type extension in the client
hello indicates the certificate types the client is able to provide to the server, when requested using a certificate request message.
If the TLS server wants to request a certificate from the client (via the certificate request message), it MUST include the client certificate type extension in the server hello.
This client certificate type extension in the server
hello then indicates the type of certificates the client is requested to provide in a subsequent certificate payload.
The value conveyed in the client certificate type extension MUST be selected from one of the values provided in the client certificate type extension sent in the client hello.
The server MUST also include a certificate request payload in the server hello message.
If the server does not send a certificate request payload (for example, because client authentication happens at the application layer or no client authentication is required) or none of the certificates supported by the client (as indicated in the client certificate type extension in the client hello) match the server supported certificate types, then the client certificate type payload in the server hello MUST be omitted.
The server certificate type extension in the client
hello indicates the types of certificates the client is able to process when provided by the server in a subsequent certificate payload.
If the client hello indicates support of raw public keys in the server certificate type extension and the server chooses to use raw public keys, then the TLS server MUST place the SubjectPublicKeyInfo structure into the Certificate payload.
With the server certificate type extension in the server
hello, the TLS server indicates the certificate type carried in the Certificate payload.
This additional indication enables avoiding parsing ambiguities since the Certificate payload may contain either the X.509 certificate or a SubjectPublicKeyInfo structure.
Note that only a single value is permitted in the server certificate type extension when carried in the server hello. 4.3.
When the TLS server has specified RawPublicKey as the client certificate type, authentication of the TLS client to the TLS server is supported only through authentication of the received client SubjectPublicKeyInfo via an out of band method.
When the TLS server has specified RawPublicKey as the server certificate type, authentication of the TLS server to the TLS client is supported only through authentication of the received client SubjectPublicKeyInfo via an out of band method.
Examples Figures 6, 7, and 8 illustrate example exchanges.
Note that TLS ciphersuites using a Diffie Hellman exchange offering forward secrecy can be used with a raw public key, although this document does not show the information exchange at that level with the subsequent message flows.
TLS Server Uses a Raw Public Key
This section shows an example where the TLS client indicates its ability to receive and validate a raw public key from the server.
In this example, the client is quite restricted since it is unable to process other certificate types sent by the server.
It also does not have credentials at the TLS layer it could send to the server and therefore omits the client certificate type extension.
Hence, the client only populates the server certificate type extension with the raw public key type, as shown in (1).
When the TLS server receives the client hello, it processes the extension.
Since it has a raw public key, it indicates in (2) that it had chosen to place the SubjectPublicKeyInfo structure into the Certificate payload (3).
The client uses this raw public key in the TLS handshake together with an out of band validation technique, such as DANE, to verify it.
client hello, server certificate type (RawPublicKey) //
> Application Data Figure 6:
Example with Raw Public Key
Provided by the TLS Server 5.2.
TLS Client and Server Use Raw Public Keys
This section shows an example where the TLS client as well as the TLS server use raw public keys.
This is one of the use cases envisioned for smart object networking.
The TLS client in this case is an embedded device that is configured with a raw public key for use with TLS and is also able to process a raw public key sent by the server.
Therefore, it indicates these capabilities in (1).
As in the previously shown example, the server fulfills the client's request, indicates this via the RawPublicKey value in the server certificate type payload (2), and provides a raw public key in the Certificate payload back to the client (see (3)).
The TLS server demands client authentication, and therefore includes a certificate request (4).
The client certificate type payload in (5) indicates that the TLS server accepts a raw public key.
The TLS client, which has a raw public key pre provisioned, returns it in the Certificate payload (6) to the server.
client hello, client certificate type (RawPublicKey) //
(1) server certificate type (RawPublicKey) //
(3) client certificate type RawPublicKey //
Example with Raw Public Key provided by the TLS Server and the Client 5.3.
Combined Usage of Raw Public Keys and X.509 Certificates
This section shows an example combining a raw public key and an X.509 certificate.
The client uses a raw public key for client authentication, and the server provides an X.509 certificate.
This exchange starts with the client indicating its ability to process an X.509 certificate, OpenPGP certificate, or a raw public key, if provided by the server.
It prefers a raw public key, since the RawPublicKey value precedes the other values in the server certificate type vector.
Additionally, the client indicates that it has a raw public key for client side authentication (see (1)).
The server chooses to provide its X.509 certificate in (3) and indicates that choice in (2).
For client authentication, the server indicates in (4) that it has selected the raw public key format and requests a certificate from the client in (5).
The TLS client provides a raw public key in (6) after receiving and processing the TLS server hello message.
client hello, server certificate type (RawPublicKey, X.509, OpenPGP) client certificate type (RawPublicKey) //
(3) client certificate type RawPublicKey //
The transmission of raw public keys, as described in this document, provides benefits by lowering the over the air transmission overhead since raw public keys are naturally smaller than an entire certificate.
There are also advantages from a code size point of view for parsing and processing these keys.
The cryptographic procedures for associating the public key with the possession of a private key also follows standard procedures.
However, the main security challenge is how to associate the public key with a specific entity.
Without a secure binding between identifier and key, the protocol will be vulnerable to man in the  middle attacks.
This document assumes that such binding can be made out of band, and we list a few examples in Section 1.
DANE [RFC6698] offers one such approach.
In order to address these vulnerabilities, specifications that make use of the extension need to specify how the identifier and public key are bound.
In addition to ensuring the binding is done out of band, an implementation also needs to check the status of that binding.
If public keys are obtained using DANE, these public keys are authenticated via DNSSEC.
Using pre configured keys is another out  of band method for authenticating raw public keys.
While pre  configured keys are not suitable for a generic Web based e commerce environment, such keys are a reasonable approach for many smart object deployments where there is a close relationship between the software running on the device and the server side communication endpoint.
Regardless of the chosen mechanism for out of band public key validation, an assessment of the most suitable approach has to be made prior to the start of a deployment to ensure the security of the system.
An attacker might try to influence the handshake exchange to make the parties select different certificate types than they would normally choose.
For this attack, an attacker must actively change one or more handshake messages.
If this occurs, the client and server will compute different values for the handshake message hashes.
As a result, the parties will not accept each others' Finished messages.
Without the master secret, the attacker cannot repair the Finished messages, so the attack will be discovered.
IANA Considerations IANA has registered a new value in the "TLS Certificate Types" subregistry of the "Transport Layer Security (TLS) Extensions" registry [TLS Ext Registry], as follows:
RFC 7250 IANA has allocated two new TLS extensions, client certificate type and server certificate type, from the "TLS ExtensionType Values" subregistry defined in [RFC5246].
These extensions are used in both the client hello message and the server hello message.
The new extension types are used for certificate type negotiation.
The values carried in these extensions are taken from the "TLS Certificate Types" subregistry of the "Transport Layer Security (TLS) Extensions" registry [TLS Ext Registry].
For example, the hex sequence shown in Figure 9 describes a SubjectPublicKeyInfo structure inside the certificate payload.
, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 2    0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05,
3    0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xcd,
0xd4, 0x13, 5    0x30, 0x0e, 0xbf, 0xb2
, 0xed, 0x67, 0x0a, 0xc0, 0x16, 0x3f, 6    0x51, 0x09, 0x9d, 0x29, 0x2f, 0xb2, 0x6d, 0x3f, 0x3e, 0x6c,
0x90, 0x80, 0xa1, 0x71, 0xdf, 0xbe, 0x38,
0xc5, 0xcb, 8    0xa9, 0x9a
, 0x90, 0x0a, 0xf9, 0xb7, 0x07, 0x0b, 9    0xe1, 0xda, 0xe7, 0x09, 0xbf, 0x0d, 0x57, 0x41, 0x86, 0x60, 10
0xa1, 0xc1, 0x27, 0x91, 0x5b, 0x0a, 0x98, 0x46, 0x1b, 0xf6, 11
0xa2, 0x84, 0xf8, 0x65, 0xc7, 0xce, 0x2d
, 0x96, 0x17, 0xaa, 12   0x91
, 0xf8, 0x61, 0x04, 0x50, 0x70, 0xeb, 0xb4, 0x43, 0xb7, 13   0xdc, 0x9a, 0xcc,
0x31, 0x01, 0x14, 0xd4, 0xcd, 0xcc
, 0xc2, 14   0x37, 0x6d, 0x69, 0x82, 0xd6, 0xc6, 0xc4, 0xbe
0xa5, 0xc9, 0xa6, 0x19, 0x53, 0x32, 0x7a, 0x86, 0x0e, 0x91,
, 0x0f, 0xa1, 0x42, 0x54, 0xaa, 0x01, 0x02, 0x03, 0x01, 17   0x00, 0x01
The decoded byte sequence shown in Figure 9 (for example, using Peter Gutmann's ASN.1 decoder [ASN.1 Dump]) illustrates the structure, as shown in Figure 10.
1 2 840 113549 1 1 1) :
Decoding of Example SubjectPublicKeyInfo Structure
