- title: __initial_text__
  contents:
  - '             A Two-Way Active Measurement Protocol (TWAMP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The One-way Active Measurement Protocol (OWAMP), specified in RFC\n\
    \   4656, provides a common protocol for measuring one-way metrics\n   between\
    \ network devices.  OWAMP can be used bi-directionally to\n   measure one-way\
    \ metrics in both directions between two network\n   elements.  However, it does\
    \ not accommodate round-trip or two-way\n   measurements.  This memo specifies\
    \ a Two-Way Active Measurement\n   Protocol (TWAMP), based on the OWAMP, that\
    \ adds two-way or round-trip\n   measurement capabilities.  The TWAMP measurement\
    \ architecture is\n   usually comprised of two hosts with specific roles, and\
    \ this allows\n   for some protocol simplifications, making it an attractive\n\
    \   alternative in some circumstances.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Relationship of Test and Control Protocols .................3\n  \
    \    1.2. Logical Model ..............................................3\n    \
    \  1.3. Pronunciation Guide ........................................4\n   2. Protocol\
    \ Overview ...............................................5\n   3. TWAMP-Control\
    \ ...................................................6\n      3.1. Connection\
    \ Setup ...........................................6\n      3.2. Integrity Protection\
    \ .......................................7\n      3.3. Values of the Accept Field\
    \ .................................7\n      3.4. TWAMP-Control Commands .....................................7\n\
    \      3.5. Creating Test Sessions .....................................8\n  \
    \    3.6. Send Schedules ............................................10\n    \
    \  3.7. Starting Test Sessions ....................................10\n      3.8.\
    \ Stop-Sessions .............................................10\n      3.9. Fetch-Session\
    \ .............................................12\n   4. TWAMP-Test .....................................................12\n\
    \      4.1. Sender Behavior ...........................................12\n  \
    \         4.1.1. Packet Timings .....................................12\n    \
    \       4.1.2. Packet Format and Content ..........................12\n      4.2.\
    \ Reflector Behavior ........................................13\n           4.2.1.\
    \ TWAMP-Test Packet Format and Content ...............14\n   5. Implementers'\
    \ Guide ............................................20\n   6. Security Considerations\
    \ ........................................20\n   7. Acknowledgements ...............................................21\n\
    \   8. IANA Considerations ............................................21\n  \
    \    8.1. Registry Specification ....................................22\n    \
    \  8.2. Registry Management .......................................22\n      8.3.\
    \ Experimental Numbers ......................................22\n      8.4. Initial\
    \ Registry Contents .................................22\n   9. Internationalization\
    \ Considerations ............................22\n   Appendix I - TWAMP Light (Informative)\
    \ ............................23\n   Normative References ..............................................24\n\
    \   Informative References ............................................24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet Engineering Task Force (IETF) has completed\
    \ a Proposed\n   Standard for the round-trip delay [RFC2681] metric.  The IETF\
    \ has\n   also completed a protocol for the control and collection of one-way\n\
    \   measurements, the One-way Active Measurement Protocol (OWAMP)\n   [RFC4656].\
    \  However, OWAMP does not accommodate round-trip or two-way\n   measurements.\n\
    \   Two-way measurements are common in IP networks, primarily because\n   synchronization\
    \ between local and remote clocks is unnecessary for\n   round-trip delay, and\
    \ measurement support at the remote end may be\n   limited to a simple echo function.\
    \  However, the most common facility\n   for round-trip measurements is the ICMP\
    \ Echo Request/Reply (used by\n   the ping tool), and issues with this method\
    \ are documented in Section\n   2.6 of [RFC2681].  This memo specifies the Two-Way\
    \ Active Measurement\n   Protocol, or TWAMP.  TWAMP uses the methodology and architecture\
    \ of\n   OWAMP [RFC4656] to define an open protocol for measurement of two-way\n\
    \   or round-trip metrics (henceforth in this document the term two-way\n   also\
    \ signifies round-trip), in addition to the one-way metrics of\n   OWAMP.  TWAMP\
    \ employs time stamps applied at the echo destination\n   (reflector) to enable\
    \ greater accuracy (processing delays can be\n   accounted for).  The TWAMP measurement\
    \ architecture is usually\n   comprised of only two hosts with specific roles,\
    \ and this allows for\n   some protocol simplifications, making it an attractive\
    \ alternative to\n   OWAMP in some circumstances.\n   The key words \"MUST\",\
    \ \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are\
    \ to be interpreted as described in RFC 2119 [RFC2119].\n"
- title: 1.1.  Relationship of Test and Control Protocols
  contents:
  - "1.1.  Relationship of Test and Control Protocols\n   Similar to OWAMP [RFC4656],\
    \ TWAMP consists of two inter-related\n   protocols: TWAMP-Control and TWAMP-Test.\
    \  The relationship of these\n   protocols is as defined in Section 1.1 of OWAMP\
    \ [RFC4656].  TWAMP-\n   Control is used to initiate, start, and stop test sessions,\
    \ whereas\n   TWAMP-Test is used to exchange test packets between two TWAMP\n\
    \   entities.\n"
- title: 1.2.  Logical Model
  contents:
  - "1.2.  Logical Model\n   The role and definition of the logical entities are as\
    \ defined in\n   Section 1.2 of OWAMP [RFC4656] with the following exceptions:\n\
    \   -  The Session-Receiver is called the Session-Reflector in the TWAMP\n   \
    \   architecture.  The Session-Reflector has the capability to create\n      and\
    \ send a measurement packet when it receives a measurement\n      packet.  Unlike\
    \ the Session-Receiver, the Session-Reflector does\n      not collect any packet\
    \ information.\n   -  The Server is an end system that manages one or more TWAMP\n\
    \      sessions, and is capable of configuring per-session state in the\n    \
    \  endpoints.  However, a Server associated with a Session-Reflector\n      would\
    \ not have the capability to return the results of a test\n      session, and\
    \ this is a difference from OWAMP.\n   -  The Fetch-Client entity does not exist\
    \ in the TWAMP architecture,\n      as the Session-Reflector does not collect\
    \ any packet information\n      to be fetched.  Consequently, there is no need\
    \ for the Fetch-\n      Client.\n   An example of possible relationship scenarios\
    \ between these roles is\n   presented below.  In this example, different logical\
    \ roles are played\n   on different hosts.  Unlabeled links in the figure are\
    \ unspecified by\n   this document and may be proprietary protocols.\n       \
    \  +----------------+               +-------------------+\n         | Session-Sender\
    \ |<-TWAMP-Test-->| Session-Reflector |\n         +----------------+         \
    \      +-------------------+\n           ^                                   \
    \  ^\n           |                                     |\n           |       \
    \                              |\n           |                               \
    \      |\n           |  +----------------+<----------------+\n           |  |\
    \     Server     |\n           |  +----------------+\n           |    ^\n    \
    \       |    |\n           | TWAMP-Control\n           |    |\n           v  \
    \  v\n         +----------------+\n         | Control-Client |\n         +----------------+\n\
    \   As in OWAMP [RFC4656], different logical roles can be played by the\n   same\
    \ host.  For example, in the figure above, there could actually be\n   two hosts:\
    \ one playing the roles of Control-Client and Session-\n   Sender, and the other\
    \ playing the roles of Server and Session-\n   Reflector.  This example is shown\
    \ below.\n          +-----------------+                   +-------------------+\n\
    \          | Control-Client  |<--TWAMP-Control-->|      Server       |\n     \
    \     |                 |                   |                   |\n          |\
    \ Session-Sender  |<--TWAMP-Test----->| Session-Reflector |\n          +-----------------+\
    \                   +-------------------+\n"
- title: 1.3.  Pronunciation Guide
  contents:
  - "1.3.  Pronunciation Guide\n   The acronym OWAMP is usually pronounced in two\
    \ syllables, Oh-wamp.\n   The acronym TWAMP is also pronounced in two syllables,\
    \ Tee-wamp.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   The Two-Way Active Measurement Protocol is an open\
    \ protocol for\n   measurement of two-way metrics.  It is based on OWAMP [RFC4656]\
    \ and\n   adheres to OWAMP's overall architecture and design.  The TWAMP-\n  \
    \ Control and TWAMP-Test protocols accomplish their testing tasks as\n   outlined\
    \ below:\n   -  The Control-Client initiates a TCP connection on TWAMP's well-\n\
    \      known port, and the Server (its role now established) responds\n      with\
    \ its Greeting message, indicating the security/integrity\n      mode(s) it is\
    \ willing to support.\n   -  The Control-Client responds with the chosen mode\
    \ of communication\n      and information supporting integrity protection and\
    \ encryption, if\n      the mode requires them.  The Server responds to accept\
    \ the mode\n      and give its start time.  This completes the control-connection\n\
    \      setup.\n   -  The Control-Client requests (and describes) a test session\
    \ with a\n      unique TWAMP-Control message.  The Server responds with its\n\
    \      acceptance and supporting information.  More than one test session\n  \
    \    may be requested with additional messages.\n   -  The Control-Client initiates\
    \ all requested testing with a Start-\n      Sessions message, and the Server\
    \ acknowledges.\n   -  The Session-Sender and the Session-Reflector exchange test\
    \ packets\n      according to the TWAMP-Test protocol for each active session.\n\
    \   -  When appropriate, the Control-Client sends a message to stop all\n    \
    \  test sessions.\n   There are two recognized extension mechanisms in the TWAMP\
    \ Protocol.\n   1) The Modes field is used to establish the communication options\n\
    \      during TWAMP-Control Connection Setup.\n   2) The TWAMP-Control Command\
    \ Number is another intended extension\n      mechanism, allowing additional commands\
    \ to be defined in the\n      future.\n   The TWAMP-Control protocol resolves\
    \ different capability levels\n   between the Control-Client and Server.\n   All\
    \ multi-octet quantities defined in this document are represented\n   as unsigned\
    \ integers in network byte order, unless specified\n   otherwise.\n   Throughout\
    \ this memo, the bits marked MBZ (Must Be Zero) MUST be set\n   to zero by senders\
    \ and MUST be ignored by receivers.\n"
- title: 3.  TWAMP-Control
  contents:
  - "3.  TWAMP-Control\n   TWAMP-Control is a derivative of the OWAMP-Control for\
    \ two-way\n   measurements.  All TWAMP-Control messages are similar in format\
    \ and\n   follow similar guidelines to those defined in Section 3 of OWAMP\n \
    \  [RFC4656] with the exceptions outlined in the following sections.\n   One such\
    \ exception is the Fetch-Session command, which is not used in\n   TWAMP.\n"
- title: 3.1.  Connection Setup
  contents:
  - "3.1.  Connection Setup\n   Connection establishment of TWAMP follows the same\
    \ procedure defined\n   in Section 3.1 of OWAMP [RFC4656].  The Modes field is\
    \ a recognized\n   extension mechanism in TWAMP, and the current mode values are\n\
    \   identical to those used in OWAMP.  The only exception is the well-\n   known\
    \ port number for TWAMP-Control.  A Client opens a TCP connection\n   to the Server\
    \ on well-known port 862.  The host that initiates the\n   TCP connection takes\
    \ the roles of Control-Client and (in the two-host\n   implementation) the Session-Sender.\
    \  The host that acknowledges the\n   TCP connection accepts the roles of Server\
    \ and (in the two-host\n   implementation) the Session-Reflector.\n   The Control-Client\
    \ MAY set a desired code point in the Diffserv Code\n   Point (DSCP) field in\
    \ the IP header for ALL packets of a specific\n   control connection.  The Server\
    \ SHOULD use the DSCP of the Control-\n   Client's TCP SYN in ALL subsequent packets\
    \ on that connection\n   (avoiding any ambiguity in case of re-marking).\n   The\
    \ possibility exists for Control-Client failure after TWAMP-\n   Control connection\
    \ establishment, or the path between the Control-\n   Client and Server may fail\
    \ while a connection is in progress.  The\n   Server MAY discontinue any established\
    \ control connection when no\n   packet associated with that connection has been\
    \ received within\n   SERVWAIT seconds.  The Server SHALL suspend monitoring control\n\
    \   connection activity after receiving a Start-Sessions command, and\n   SHALL\
    \ resume after receiving a Stop-Sessions command (IF the SERVWAIT\n   option is\
    \ supported).  Note that the REFWAIT timeout (described\n   below) covers failures\
    \ during test sessions, and if REFWAIT expires\n   on ALL test sessions initiated\
    \ by a TWAMP-Control connection, then\n   the SERVWAIT monitoring SHALL resume\
    \ (as though a Stop-Sessions\n   command had been received).  An implementation\
    \ that supports the\n   SERVWAIT timeout SHOULD also implement the REFWAIT timeout.\
    \  The\n   default value of SERVWAIT SHALL be 900 seconds, and this waiting time\n\
    \   MAY be configurable.  This timeout allows the Server to free up\n   resources\
    \ in case of failure.\n   Both the Server and the Client use the same mappings\
    \ from KeyIDs to\n   shared secrets.  The Server, being prepared to conduct sessions\
    \ with\n   more than one Client, uses KeyIDs to choose the appropriate secret\n\
    \   key; a Client would typically have different secret keys for\n   different\
    \ Servers.  The shared secret is a passphrase.  To maximize\n   passphrase interoperability,\
    \ the passphrase character set MUST be\n   encoded using Appendix B of [RFC5198]\
    \ (the ASCII Network Virtual\n   Terminal Definition).  It MUST not contain newlines\
    \ (any combination\n   of Carriage-Return (CR) and/or Line-Feed (LF) characters),\
    \ and\n   control characters SHOULD be avoided.\n"
- title: 3.2.  Integrity Protection
  contents:
  - "3.2.  Integrity Protection\n   Integrity protection of TWAMP follows the same\
    \ procedure defined in\n   Section 3.2 of OWAMP [RFC4656].  As in OWAMP, each\
    \ HMAC (Hashed\n   Message Authentication Code) sent covers everything sent in\
    \ a given\n   direction between the previous HMAC (but not including it) and the\n\
    \   start of the new HMAC.  This way, once encryption is set up, each bit\n  \
    \ of the TWAMP-Control connection is authenticated by an HMAC exactly\n   once.\n\
    \   Note that the Server-Start message (sent by a Server during the\n   initial\
    \ control-connection exchanges) does not terminate with an HMAC\n   field.  Therefore,\
    \ the HMAC in the first Accept-Session message also\n   covers the Server-Start\
    \ message and includes the Start-Time field in\n   the HMAC calculation.\n   Also,\
    \ in authenticated and encrypted modes, the HMAC in TWAMP-Control\n   packets\
    \ is encrypted.\n"
- title: 3.3.  Values of the Accept Field
  contents:
  - "3.3.  Values of the Accept Field\n   Accept values used in TWAMP are the same\
    \ as the values defined in\n   Section 3.3 of OWAMP [RFC4656].\n"
- title: 3.4.  TWAMP-Control Commands
  contents:
  - "3.4.  TWAMP-Control Commands\n   TWAMP-Control commands conform to the rules\
    \ defined in Section 3.4 of\n   OWAMP [RFC4656].\n   The following commands are\
    \ available for the Control-Client:\n   Request-TW-Session, Start-Sessions, and\
    \ Stop-Sessions.  The Server\n   can send specific messages in response to the\
    \ commands it receives\n   (as described in the sections that follow).\n   Note\
    \ that the OWAMP Request-Session command is replaced by the TWAMP\n   Request-TW-Session\
    \ command, and the Fetch-Session command does not\n   appear in TWAMP.\n"
- title: 3.5.  Creating Test Sessions
  contents:
  - "3.5.  Creating Test Sessions\n   Test session creation follows the same procedure\
    \ as defined in\n   Section 3.5 of OWAMP [RFC4656].  The Request-TW-Session command\
    \ is\n   based on the OWAMP Request-Session command, and uses the message\n  \
    \ format as described in Section 3.5 of OWAMP, but without the Schedule\n   Slot\
    \ Descriptions field(s) and uses only one HMAC.  The description\n   of the Request-TW-Session\
    \ format follows.\n   In TWAMP, the first octet is referred to as the Command\
    \ Number, and\n   the Command Number is a recognized extension mechanism.  Readers\
    \ are\n   encouraged to consult the TWAMP-Control Command Number registry to\n\
    \   determine if there have been additional values assigned.\n   The Command Number\
    \ value of 5 indicates a Request-TW-Session command,\n   and the Server MUST interpret\
    \ this command as a request for a two-way\n   test session using the TWAMP-Test\
    \ protocol.\n   If a TWAMP Server receives an unexpected Command Number, it MUST\n\
    \   respond with the Accept field set to 3 (meaning \"Some aspect of\n   request\
    \ is not supported\") in the Accept-Session message.  Command\n   Numbers that\
    \ are Forbidden (and possibly numbers that are Reserved)\n   are unexpected.\n\
    \   In OWAMP, the Conf-Sender field is set to 1 when the Request-Session\n   message\
    \ describes a task where the Server will configure a one-way\n   test packet sender.\
    \  Likewise, the Conf-Receiver field is set to 1\n   when the message describes\
    \ the configuration for a Session-Receiver.\n   In TWAMP, both endpoints send\
    \ and receive test packets, with the\n   Session-Sender first sending and then\
    \ receiving test packets,\n   complimented by the Session-Reflector first receiving\
    \ and then\n   sending.\n   Both the Conf-Sender field and Conf-Receiver field\
    \ MUST be set to 0\n   since the Session-Reflector will both receive and send\
    \ packets, and\n   the roles are established according to which host initiates\
    \ the TCP\n   connection for control.  The Server MUST interpret any non-zero\
    \ value\n   as an improperly formatted command, and MUST respond with the Accept\n\
    \   field set to 3 (meaning \"Some aspect of request is not supported\") in\n\
    \   the Accept-Session message.\n   The Session-Reflector in TWAMP does not process\
    \ incoming test packets\n   for performance metrics and consequently does not\
    \ need to know the\n   number of incoming packets and their timing schedule. \
    \ Consequently\n   the Number of Scheduled Slots and Number of Packets MUST be\
    \ set to 0.\n   The Sender Port is the UDP port from which TWAMP-Test packets\
    \ will be\n   sent and the port to which TWAMP-Test packets will be sent by the\n\
    \   Session-Reflector (the Session-Sender will use the same UDP port to\n   send\
    \ and receive packets).  The Receiver Port is the desired UDP port\n   to which\
    \ TWAMP-Test packets will be sent by the Session-Sender (the\n   port where the\
    \ Session-Reflector is asked to receive test packets).\n   The Receiver Port is\
    \ also the UDP port from which TWAMP-Test packets\n   will be sent by the Session-Reflector\
    \ (the Session-Reflector will use\n   the same UDP port to send and receive packets).\n\
    \   The Sender Address and Receiver Address fields contain, respectively,\n  \
    \ the sender and receiver addresses of the endpoints of the Internet\n   path\
    \ over which a TWAMP-Test session is requested.  They MAY be set\n   to 0, in\
    \ which case the IP addresses used for the Control-Client to\n   Server TWAMP-Control\
    \ message exchange MUST be used in the test\n   packets.\n   The Session Identifier\
    \ (SID) is as defined in OWAMP [RFC4656].  Since\n   the SID is always generated\
    \ by the receiving side, the Server\n   determines the SID, and the SID in the\
    \ Request-TW-Session message\n   MUST be set to 0.\n   The Start Time is as defined\
    \ in OWAMP [RFC4656].\n   The Timeout is interpreted differently from the definition\
    \ in OWAMP\n   [RFC4656].  In TWAMP, Timeout is the interval that the Session-\n\
    \   Reflector MUST wait after receiving a Stop-Sessions message.  In case\n  \
    \ there are test packets still in transit, the Session-Reflector MUST\n   reflect\
    \ them if they arrive within the Timeout interval following the\n   reception\
    \ of the Stop-Sessions message.  The Session-Reflector MUST\n   NOT reflect packets\
    \ that are received beyond the timeout.\n   Type-P descriptor is as defined in\
    \ OWAMP [RFC4656].  The only\n   capability of this field is to set the Differentiated\
    \ Services Code\n   Point (DSCP) as defined in [RFC2474].  The same value of DSCP\
    \ MUST be\n   used in test packets reflected by the Session-Reflector.\n   Since\
    \ there are no Schedule Slot Descriptions, the Request-TW-Session\n   message\
    \ is completed by MBZ (Must Be Zero) and HMAC fields.  This\n   completes one\
    \ logical message, referred to as the Request-TW-Session\n   command.\n   The\
    \ Session-Reflector MUST respond to each Request-TW-Session command\n   with an\
    \ Accept-Session message as defined in OWAMP [RFC4656].  When\n   the Accept field\
    \ = 0, the Port field confirms (repeats) the port to\n   which TWAMP-Test packets\
    \ are sent by the Session-Sender toward the\n   Session-Reflector.  In other words,\
    \ the Port field indicates the port\n   number where the Session-Reflector expects\
    \ to receive packets from\n   the Session-Sender.\n   When the requested Receiver\
    \ Port is not available (e.g., port in\n   use), the Server at the Session-Reflector\
    \ MAY suggest an alternate\n   and available port for this session in the Port\
    \ field.  The Session-\n   Sender either accepts the alternate port, or composes\
    \ a new Session-\n   Request message with suitable parameters.  Otherwise, the\
    \ Server at\n   the Control-Client uses the Accept field to convey other forms\
    \ of\n   session rejection or failure and MUST NOT suggest an alternate port;\n\
    \   in this case, the Port field MUST be set to zero.\n"
- title: 3.6.  Send Schedules
  contents:
  - "3.6.  Send Schedules\n   The send schedule for test packets defined in Section\
    \ 3.6 of OWAMP\n   [RFC4656] is not used in TWAMP.  The Control-Client and Session-\n\
    \   Sender MAY autonomously decide the send schedule.  The Session-\n   Reflector\
    \ SHOULD return each test packet to the Session-Sender as\n   quickly as possible.\n"
- title: 3.7.  Starting Test Sessions
  contents:
  - "3.7.  Starting Test Sessions\n   The procedure and guidelines for starting test\
    \ sessions is the same\n   as defined in Section 3.7 of OWAMP [RFC4656].\n"
- title: 3.8.  Stop-Sessions
  contents:
  - "3.8.  Stop-Sessions\n   The procedure and guidelines for stopping test sessions\
    \ is similar to\n   that defined in Section 3.8 of OWAMP [RFC4656].  The Stop-Sessions\n\
    \   command can only be issued by the Control-Client.  The message MUST\n   NOT\
    \ contain any session description records or skip ranges.  The\n   message is\
    \ terminated with a single block HMAC to complete the Stop-\n   Sessions command.\
    \  Since the TWAMP Stop-Sessions command does not\n   convey SIDs, it applies\
    \ to all sessions previously requested and\n   started with a Start-Sessions command.\n\
    \   Thus, the TWAMP Stop-Sessions command is constructed as follows:\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      3        |    Accept     |              MBZ              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Number of Sessions                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        MBZ (8 octets)                         |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                     HMAC (16 octets)                        |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Above, the Command Number in the first octet (3) indicates that this\n   is\
    \ the Stop-Sessions command.\n   Non-zero Accept values indicate a failure of\
    \ some sort.  Zero values\n   indicate normal (but possibly premature) completion.\
    \  The full list\n   of available Accept values is described in Section 3.3 of\
    \ [RFC4656],\n   \"Values of the Accept Field\".\n   If Accept has a non-zero\
    \ value, results of all TWAMP-Test sessions\n   spawned by this TWAMP-Control\
    \ session SHOULD be considered invalid.\n   If the Accept-Session message was\
    \ not transmitted at all (for\n   whatever reason, including failure of the TCP\
    \ connection used for\n   TWAMP-Control), the results of all TWAMP-Test sessions\
    \ spawned by\n   this TWAMP-Control session MAY be considered invalid.\n   Number\
    \ of Sessions indicates the number of sessions that the\n   Control-Client intends\
    \ to stop.\n   Number of Sessions MUST contain the number of send sessions started\n\
    \   by the Control-Client that have not been previously terminated by a\n   Stop-Sessions\
    \ command (i.e., the Control-Client MUST account for each\n   accepted Request-Session).\
    \  If the Stop-Sessions message does not\n   account for exactly the number of\
    \ sessions in progress, then it is to\n   be considered invalid, the TWAMP-Control\
    \ connection SHOULD be closed,\n   and any results obtained considered invalid.\n\
    \   Upon receipt of a TWAMP-Control Stop-Sessions command, the Session-\n   Reflector\
    \ MUST discard any TWAMP-Test packets that arrive at the\n   current time plus\
    \ the Timeout (in the Request-TW-Session command).\n"
- title: 3.9.  Fetch-Session
  contents:
  - "3.9.  Fetch-Session\n   One purpose of TWAMP is measurement of two-way metrics.\
    \  Two-way\n   measurement methods do not require packet-level data to be collected\n\
    \   by the Session-Reflector (such as sequence number, timestamp, and\n   Time\
    \ to Live (TTL)) because this data is communicated in the\n   \"reflected\" test\
    \ packets.  As such, the protocol does not require the\n   retrieval of packet-level\
    \ data from the Server and the OWAMP Fetch-\n   Session command is not used in\
    \ TWAMP.\n"
- title: 4.  TWAMP-Test
  contents:
  - "4.  TWAMP-Test\n   The TWAMP-Test protocol is similar to the OWAMP-test protocol\n\
    \   [RFC4656] with the exception that the Session-Reflector transmits\n   test\
    \ packets to the Session-Sender in response to each test packet it\n   receives.\
    \  TWAMP defines two different test packet formats, one for\n   packets transmitted\
    \ by the Session-Sender and one for packets\n   transmitted by the Session-Reflector.\
    \  As with OWAMP-test protocol\n   [RFC4656], there are three modes: unauthenticated,\
    \ authenticated, and\n   encrypted.\n"
- title: 4.1.  Sender Behavior
  contents:
  - "4.1.  Sender Behavior\n   The sender behavior is determined by the configuration\
    \ of the\n   Session-Sender and is not defined in this standard.  Further, the\n\
    \   Session-Reflector does not need to know the Session-Sender behavior\n   to\
    \ the degree of detail as needed in OWAMP [RFC4656].  Additionally,\n   the Session-Sender\
    \ collects and records the necessary information\n   provided from the packets\
    \ transmitted by the Session-Reflector for\n   measuring two-way metrics.  The\
    \ information recording based on the\n   packet(s) received by the Session-Sender\
    \ is implementation dependent.\n"
- title: 4.1.1.  Packet Timings
  contents:
  - "4.1.1.  Packet Timings\n   Since the send schedule is not communicated to the\
    \ Session-Reflector,\n   there is no need for a standardized computation of packet\
    \ timing.\n   Regardless of any scheduling delays, each packet that is actually\n\
    \   sent MUST have the best possible approximation of its real time of\n   departure\
    \ as its timestamp (in the packet).\n"
- title: 4.1.2.  Packet Format and Content
  contents:
  - "4.1.2.  Packet Format and Content\n   The Session-Sender packet format and content\
    \ follow the same\n   procedure and guidelines as defined in Section 4.1.2 of\
    \ OWAMP\n   [RFC4656] (with the exception of the reference to the send schedule).\n\
    \   Note that the Reflector test packet formats are larger than the\n   Sender's\
    \ formats.  The Session-Sender MAY append sufficient Packet\n   Padding to allow\
    \ the same IP packet payload lengths to be used in\n   each direction of transmission\
    \ (this is usually desirable).  To\n   compensate for the Reflector's larger test\
    \ packet format, the Sender\n   appends at least 27 octets of padding in unauthenticated\
    \ mode, and at\n   least 56 octets in authenticated and encrypted modes.\n"
- title: 4.2.  Reflector Behavior
  contents:
  - "4.2.  Reflector Behavior\n   TWAMP requires the Session-Reflector to transmit\
    \ a packet to the\n   Session-Sender in response to each packet it receives.\n\
    \   As packets are received, the Session-Reflector will do the following:\n  \
    \ -  Timestamp the received packet.  Each packet that is actually\n      received\
    \ MUST have the best possible approximation of its real\n      time of arrival\
    \ entered as its Received Timestamp (in the packet).\n   -  In authenticated or\
    \ encrypted mode, decrypt the appropriate\n      sections of the packet body (first\
    \ block (16 octets) for\n      authenticated, 96 octets for encrypted), and then\
    \ check integrity\n      of sections covered by the HMAC.\n   -  Copy the packet\
    \ sequence number into the corresponding reflected\n      packet to the Session-Sender.\n\
    \   -  Extract the Sender TTL value from the TTL/Hop Limit value of\n      received\
    \ packets.  Session-Reflector implementations SHOULD fetch\n      the TTL/Hop\
    \ Limit value from the IP header of the packet,\n      replacing the value of\
    \ 255 set by the Session-Sender.  If an\n      implementation does not fetch the\
    \ actual TTL value (the only good\n      reason not to do so is an inability to\
    \ access the TTL field of\n      arriving packets), it MUST set the Sender TTL\
    \ value as 255.\n   -  In authenticated and encrypted modes, the HMAC MUST be\
    \ calculated\n      first, then the appropriate portion of the packet body is\n\
    \      encrypted.\n   -  Transmit a test packet to the Session-Sender in response\
    \ to every\n      received packet.  The response MUST be generated as immediately\
    \ as\n      possible.  The format and content of the test packet is defined in\n\
    \      Section 4.2.1.  Prior to the transmission of the test packet, the\n   \
    \   Session-Reflector MUST enter the best possible approximation of\n      its\
    \ actual sending time as its Timestamp (in the packet).  This\n      permits the\
    \ determination of the elapsed time between the\n      reception of the packet\
    \ and its transmission.\n   -  Packets not received within the Timeout (following\
    \ the Stop-\n      Sessions command) MUST be ignored by the Reflector.  The Session-\n\
    \      Reflector MUST NOT generate a test packet to the Session-Sender\n     \
    \ for packets that are ignored.\n   The possibility exists for Session-Sender\
    \ failure during a session,\n   or the path between the Session-Sender and Session-Reflector\
    \ may fail\n   while a test session is in progress.  The Session-Reflector MAY\n\
    \   discontinue any session that has been started when no packet\n   associated\
    \ with that session has been received for REFWAIT seconds.\n   The default value\
    \ of REFWAIT SHALL be 900 seconds, and this waiting\n   time MAY be configurable.\
    \  This timeout allows a Session-Reflector to\n   free up resources in case of\
    \ failure.\n"
- title: 4.2.1.  TWAMP-Test Packet Format and Content
  contents:
  - "4.2.1.  TWAMP-Test Packet Format and Content\n   The Session-Reflector MUST transmit\
    \ a packet to the Session-Sender in\n   response to each packet received.  The\
    \ Session-Reflector SHOULD\n   transmit the packets as immediately as possible.\
    \  The Session-\n   Reflector SHOULD set the TTL in IPv4 (or Hop Limit in IPv6)\
    \ in the\n   UDP packet to 255.\n   The test packet will have the necessary information\
    \ for calculating\n   two-way metrics by the Session-Sender.  The format of the\
    \ test packet\n   depends on the mode being used.  The two formats are presented\
    \ below.\n   For unauthenticated mode:\n   0                   1             \
    \      2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Timestamp                            |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Error Estimate        |           MBZ                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Receive Timestamp                    |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sender Sequence Number                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Sender Timestamp                         |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Sender Error Estimate    |           MBZ                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Sender TTL   |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   |                      \
    \                                         |\n   .                            \
    \                                   .\n   .                         Packet Padding\
    \                        .\n   .                                             \
    \                  .\n   |                                                   \
    \            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   For authenticated and encrypted modes:\n   0                   1         \
    \          2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        MBZ (12 octets)                        |\n   |  \
    \                                                             |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Timestamp                            |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Error Estimate        |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                        MBZ (6 octets)\
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Receive Timestamp                      |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        MBZ (8 octets)                         |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sender Sequence Number                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        MBZ (12 octets)                        |\n   |  \
    \                                                             |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Sender Timestamp                         |\n   |  \
    \                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Sender Error Estimate    |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                        MBZ (6 octets)\
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Sender TTL   |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   |                      \
    \                                         |\n   |                            \
    \                                   |\n   |                        MBZ (15 octets)\
    \                        |\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   |                        HMAC (16 octets)                       |\n   |  \
    \                                                             |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                                                               |\n   .  \
    \                                                             .\n   .        \
    \                 Packet Padding                        .\n   .              \
    \                                                 .\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Note that all timestamps have the same format as OWAMP [RFC4656] as\n   follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Integer part of seconds                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Fractional part of seconds                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Sequence Number is the sequence number of the test packet according\n   to\
    \ its transmit order.  It starts with zero and is incremented by one\n   for each\
    \ subsequent packet.  The Sequence Number generated by the\n   Session-Reflector\
    \ is independent from the sequence number of the\n   arriving packets.\n   Timestamp\
    \ and Error Estimate are the Session-Reflector's transmit\n   timestamp and error\
    \ estimate for the reflected test packet,\n   respectively.  The format of all\
    \ timestamp and error estimate fields\n   follow the definition and formats defined\
    \ by OWAMP, Section 4.1.2 in\n   [RFC4656].\n   Sender Timestamp and Sender Error\
    \ Estimate are exact copies of the\n   timestamp and error estimate from the Session-Sender\
    \ test packet that\n   corresponds to this test packet.\n   Sender TTL is 255\
    \ when transmitted by the Session-Sender.  Sender TTL\n   is set to the Time To\
    \ Live (or Hop Count) value of the received\n   packet from the IP packet header\
    \ when transmitted by the Session-\n   Reflector.\n   Receive Timestamp is the\
    \ time the test packet was received by the\n   reflector.  The difference between\
    \ Timestamp and Receive Timestamp is\n   the amount of time the packet was in\
    \ transition in the Session-\n   Reflector.  The Error Estimate associated with\
    \ the Timestamp field\n   also applies to the Receive Timestamp.\n   Sender Sequence\
    \ Number is a copy of the Sequence Number of the packet\n   transmitted by the\
    \ Session-Sender that caused the Session-Reflector\n   to generate and send this\
    \ test packet.\n   The HMAC field in TWAMP-Test packets covers the same fields\
    \ as the\n   Advanced Encryption Standard (AES) encryption.  Thus, in\n   authenticated\
    \ mode, HMAC covers the first block (16 octets); in\n   encrypted mode, HMAC covers\
    \ the first six blocks (96 octets).  In\n   TWAMP-Test, the HMAC field MUST NOT\
    \ be encrypted.\n   Packet Padding in TWAMP-Test SHOULD be pseudo-random (it MUST\
    \ be\n   generated independently of any other pseudo-random numbers mentioned\n\
    \   in this document).  However, implementations MUST provide a\n   configuration\
    \ parameter, an option, or a different means of making\n   Packet Padding consist\
    \ of all zeros.  Packet Padding MUST NOT be\n   covered by the HMAC and MUST NOT\
    \ be encrypted.\n   The minimum data segment length of TWAMP-Test packets in\n\
    \   unauthenticated mode is 41 octets, and 104 octets in both\n   authenticated\
    \ mode and encrypted modes.\n   Note that the Session-Reflector Test packet formats\
    \ are larger than\n   the Sender's formats.  The Session-Reflector SHOULD reduce\
    \ the length\n   of the Sender's Packet Padding to achieve equal IP packet payload\n\
    \   lengths in each direction of transmission, when sufficient padding is\n  \
    \ present.  The Session-Reflector MAY re-use the Sender's Packet\n   Padding (since\
    \ the requirements for padding generation are the same\n   for each), and in this\
    \ case the Session-Reflector SHOULD truncate the\n   padding such that the highest-number\
    \ octets are discarded.\n   In unauthenticated mode, encryption or authentication\
    \ MUST NOT be\n   applied.\n   The TWAMP-Test packet layout is identical in authenticated\
    \ and\n   encrypted modes.  The encryption operation for a Session-Sender\n  \
    \ packet follows the same rules of Session-Sender packets as defined in\n   OWAMP\
    \ section 4.1.2 of [RFC4656].\n   The main difference between authenticated mode\
    \ and encrypted mode is\n   the portion of the test packets that are covered by\
    \ HMAC and\n   encrypted.  Authenticated mode permits the timestamp to be fetched\n\
    \   after a portion of the packet is encrypted, but in encrypted mode all\n  \
    \ the sequence numbers and timestamps are fetched before encryption to\n   provide\
    \ maximum data-integrity protection.\n   In authenticated mode, only the sequence\
    \ number in the first block is\n   encrypted, and the subsequent timestamps and\
    \ sequence numbers are\n   sent in clear text.  Sending the timestamp in clear\
    \ text allows one\n   to reduce the time between when a timestamp is obtained\
    \ by a\n   Session-Reflector and when that packet is sent out.  This potentially\n\
    \   improves the timestamp accuracy, because the sequence number can be\n   encrypted\
    \ before the timestamp is fetched.\n   In encrypted mode, the reflector MUST fetch\
    \ the timestamps, generate\n   the HMAC, and encrypt the packet, then send it.\n\
    \   Obtaining the keys and encryption methods follows the same procedure\n   as\
    \ OWAMP as described below.  Each TWAMP-Test session has two keys,\n   an AES\
    \ Session-key and an HMAC Session-key, and the keys are derived\n   from the TWAMP-Control\
    \ keys and the SID.\n   The TWAMP-Test AES Session-key is obtained as follows:\
    \ the TWAMP-\n   Control AES Session-key (the same AES Session-key as used for\
    \ the\n   corresponding TWAMP-Control session) is encrypted with the 16-octet\n\
    \   session identifier (SID) as the key, using a single-block AES-ECB\n   encryption.\
    \  The result is the TWAMP-Test AES Session-key to be used\n   in encrypting (and\
    \ decrypting) the packets of the particular TWAMP-\n   Test session.  Note that\
    \ the TWAMP-Test AES Session-key, TWAMP-\n   Control AES Session-key, and the\
    \ SID are all comprised of 16 octets.\n   The TWAMP-Test HMAC Session-key is obtained\
    \ as follows: the TWAMP-\n   Control HMAC Session-key (the same HMAC Session-key\
    \ as used for the\n   corresponding TWAMP-Control session) is encrypted using\
    \ AES-CBC\n   (Cipher Block Chaining) with the 16-octet session identifier (SID)\
    \ as\n   the key.  This is a two-block CBC encryption that is always performed\n\
    \   with IV=0.  Note that the TWAMP-Test HMAC Session-key and TWAMP-\n   Control\
    \ HMAC Session-key are comprised of 32 octets, while the SID is\n   16 octets.\n\
    \   In authenticated mode, the first block (16 octets) of each TWAMP-Test\n  \
    \ packet is encrypted using the AES Electronic Codebook (ECB) mode.\n   This mode\
    \ does not involve any chaining, and lost, duplicated, or\n   reordered packets\
    \ do not cause problems with deciphering any packet\n   in a TWAMP-Test session.\n\
    \   In encrypted mode, the first six blocks (96 octets) are encrypted\n   using\
    \ AES-CBC mode.  The AES Session-key to use is obtained in the\n   same way as\
    \ the key for authenticated mode.  Each TWAMP-Test packet\n   is encrypted as\
    \ a separate stream, with just one chaining operation;\n   chaining does not span\
    \ multiple packets so that lost, duplicated, or\n   reordered packets do not cause\
    \ problems.  The initialization vector\n   for the CBC encryption is a value with\
    \ all bits equal to zero.\n   Implementation Note: Naturally, the key schedule\
    \ for each TWAMP-Test\n   session MUST be set up at most once per session, not\
    \ once per packet.\n"
- title: 5.  Implementers' Guide
  contents:
  - "5.  Implementers' Guide\n   This section serves as guidance to implementers of\
    \ TWAMP.  The\n   example architecture presented here is not a requirement.  Similar\
    \ to\n   OWAMP [RFC4656], TWAMP is designed with enough flexibility to allow\n\
    \   different architectures that suit multiple system requirements.\n   In this\
    \ example, the roles of Control-Client and Session-Sender are\n   implemented\
    \ in one host referred to as the controller, and the roles\n   of Server and Session-Reflector\
    \ are implemented in another host\n   referred to as the responder.\n        \
    \      controller                              responder\n          +-----------------+\
    \                   +-------------------+\n          | Control-Client  |<--TWAMP-Control-->|\
    \ Server            |\n          |                 |                   |     \
    \              |\n          | Session-Sender  |<--TWAMP-Test----->| Session-Reflector\
    \ |\n          +-----------------+                   +-------------------+\n \
    \  This example provides an architecture that supports the full TWAMP\n   standard.\
    \  The controller establishes the test session with the\n   responder through\
    \ the TWAMP-Control protocol.  After the session is\n   established, the controller\
    \ transmits test packets to the responder.\n   The responder follows the Session-Reflector\
    \ behavior of TWAMP as\n   described in Section 4.2.\n   Appendix I provides an\
    \ example for purely informational purposes.  It\n   suggests an incremental path\
    \ to adopting TWAMP, by implementing the\n   TWAMP-Test protocol first.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Fundamentally, TWAMP and OWAMP use the same protocol\
    \ for\n   establishment of Control and Test procedures.  The main difference\n\
    \   between TWAMP and OWAMP is the Session-Reflector behavior in TWAMP\n   vs.\
    \ the Session-Receiver behavior in OWAMP.  This difference in\n   behavior does\
    \ not introduce any known security vulnerabilities that\n   are not already addressed\
    \ by the security features of OWAMP.  The\n   entire security considerations of\
    \ OWAMP [RFC4656] applies to TWAMP.\n   The Server-Greeting message (defined in\
    \ OWAMP, Section 3.1 of\n   [RFC4656]) includes a Count field to specify the iteration\
    \ counter\n   used in PKCS #5 to generate keys from shared secrets.  OWAMP\n \
    \  recommends a lower limit of 1024 iterations, but no upper limit.  The\n   Count\
    \ field provides an opportunity for a denial-of-service (DOS)\n   attack because\
    \ it is 32 bits long.  If an attacking system set the\n   maximum value in Count\
    \ (2**32), then the system under attack would\n   stall for a significant period\
    \ of time while it attempts to generate\n   keys.  Therefore, TWAMP-compliant\
    \ systems SHOULD have a configuration\n   control to limit the maximum Count value.\
    \  The default maximum Count\n   value SHOULD be 32768.  As suggested in OWAMP,\
    \ this value MAY be\n   increased when greater computing power becomes common.\
    \  If a\n   Control-Client receives a Server-Greeting message with Count greater\n\
    \   that its maximum configured value, it SHOULD close the control\n   connection.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We would like to thank Nagarjuna Venna, Sharee McNab,\
    \ Nick Kinraid,\n   Stanislav Shalunov, Matt Zekauskas, Walt Steverson, Jeff Boote,\n\
    \   Murtaza Chiba, and Kevin Earnst for their comments, suggestions,\n   reviews,\
    \ helpful discussion, and proof-reading.  Lars Eggert, Sam\n   Hartman, and Tim\
    \ Polk contributed very useful AD-level reviews, and\n   the authors thank them\
    \ for their contributions to the memo.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has allocated a well-known TCP port number (861)\
    \ for the OWAMP-\n   Control part of the OWAMP [RFC4656] protocol.\n   ...\n \
    \  owamp-control   861/tcp    OWAMP-Control\n   owamp-control   861/udp    OWAMP-Control\n\
    \   #                          [RFC4656]\n   IANA has also allocated a well-known\
    \ TCP/UDP port number for the\n   TWAMP-Control protocol.\n   ...\n   twamp-control\
    \   862/tcp    Two-way Active Measurement Protocol\n                         \
    \     (TWAMP) Control\n   twamp-control   862/udp    Two-way Active Measurement\
    \ Protocol\n                              (TWAMP) Control\n   #              \
    \            [RFC5357]\n   #               863-872    Unassigned\n   Since TWAMP\
    \ adds an additional Control command beyond the OWAMP-\n   Control specification\
    \ and describes behavior when this control\n   command is used, IANA has created\
    \ a registry for the TWAMP Command\n   Number field.  The field is not explicitly\
    \ named in [RFC4656] but is\n   called out for each command.  This field is a\
    \ recognized extension\n   mechanism for TWAMP.\n"
- title: 8.1.  Registry Specification
  contents:
  - "8.1.  Registry Specification\n   IANA has created a TWAMP-Control Command Number\
    \ registry.  TWAMP-\n   Control commands are specified by the first octet in OWAMP-Control\n\
    \   messages as shown in Section 3.5 of [RFC4656], and modified by this\n   document.\
    \  Thus, this registry may contain sixteen possible values.\n"
- title: 8.2.  Registry Management
  contents:
  - "8.2.  Registry Management\n   Because the registry may only contain sixteen values,\
    \ and because\n   OWAMP and TWAMP are IETF protocols, this registry must only\
    \ be\n   updated by \"IETF Consensus\" as specified in [RFC5226] -- an RFC\n \
    \  documenting the use that is approved by the IESG.  We expect that new\n   values\
    \ will be assigned as monotonically increasing integers in the\n   range [0-15],\
    \ unless there is a good reason to do otherwise.\n"
- title: 8.3.  Experimental Numbers
  contents:
  - "8.3.  Experimental Numbers\n   [RFC3692] recommends allocating an appropriate\
    \ number of values for\n   experimentation and testing.  It is not clear to the\
    \ authors exactly\n   how many numbers might be useful in this space, or if it\
    \ would be\n   useful that they were easily distinguishable or at the \"high end\"\
    \ of\n   the number range.  Two might be useful, say one for session control,\n\
    \   and one for session fetch.  On the other hand, a single number would\n   allow\
    \ for unlimited extension, because the format of the rest of the\n   message could\
    \ be tailored, with allocation of other numbers done once\n   usefulness has been\
    \ proven.  Thus, this document allocates one number\n   (6) as designated for\
    \ experimentation and testing.\n"
- title: 8.4.  Initial Registry Contents
  contents:
  - "8.4.  Initial Registry Contents\n   TWAMP-Control Command Number Registry\n \
    \  Value  Description             Semantics Definition\n   0      Reserved\n \
    \  1      Forbidden\n   2      Start-Sessions          RFC 4656, Section 3.7\n\
    \   3      Stop-Sessions           RFC 4656, Section 3.8\n   4      Reserved\n\
    \   5      Request-TW-Session      this document, Section 3.5\n   6      Experimentation\
    \         undefined, see Section 8.3.\n"
- title: 9.  Internationalization Considerations
  contents:
  - "9.  Internationalization Considerations\n   The protocol does not carry any information\
    \ in a natural language,\n   with the possible exception of the KeyID in TWAMP-Control,\
    \ which is\n   encoded in UTF-8 [RFC3629, RFC5198].\n"
- title: Appendix I - TWAMP Light (Informative)
  contents:
  - "Appendix I - TWAMP Light (Informative)\n   In this example, the roles of Control-Client,\
    \ Server, and Session-\n   Sender are implemented in one host referred to as the\
    \ controller, and\n   the role of Session-Reflector is implemented in another\
    \ host referred\n   to as the responder.\n              controller           \
    \                   responder\n          +-----------------+                 \
    \  +-------------------+\n          |     Server      |<----------------->|  \
    \                 |\n          | Control-Client  |                   | Session-Reflector\
    \ |\n          | Session-Sender  |<--TWAMP-Test----->|                   |\n \
    \         +-----------------+                   +-------------------+\n   This\
    \ example provides a simple architecture for responders where\n   their role will\
    \ be to simply act as light test points in the network.\n   The controller establishes\
    \ the test session with the Server through\n   non-standard means.  After the\
    \ session is established, the controller\n   transmits test packets to the responder.\
    \  The responder follows the\n   Session-Reflector behavior of TWAMP as described\
    \ in section 4.2 with\n   the following exceptions.\n   In the case of TWAMP Light,\
    \ the Session-Reflector does not\n   necessarily have knowledge of the session\
    \ state.  IF the Session-\n   Reflector does not have knowledge of the session\
    \ state, THEN the\n   Session-Reflector MUST copy the Sequence Number of the received\n\
    \   packet to the Sequence Number field of the reflected packet.  The\n   controller\
    \ receives the reflected test packets and collects two-way\n   metrics.  This\
    \ architecture allows for collection of two-way metrics.\n   This example eliminates\
    \ the need for the TWAMP-Control protocol, and\n   assumes that the Session-Reflector\
    \ is configured and communicates its\n   configuration with the Server through\
    \ non-standard means.  The\n   Session-Reflector simply reflects the incoming\
    \ packets back to the\n   controller while copying the necessary information and\
    \ generating\n   sequence number and timestamp values per Section 4.2.1. TWAMP\
    \ Light\n   introduces some additional security considerations.  The non-standard\n\
    \   means to control the responder and establish test sessions SHOULD\n   offer\
    \ the features listed below.\n   The non-standard responder control protocol SHOULD\
    \ have an\n   authenticated mode of operation.  The responder SHOULD be\n   configurable\
    \ to accept only authenticated control sessions.\n   The non-standard responder\
    \ control protocol SHOULD have a means to\n   activate the authenticated and encrypted\
    \ modes of the TWAMP-Test\n   protocol.\n   When the TWAMP Light test sessions\
    \ operate in authenticated or\n   encrypted mode, the Session-Reflector MUST have\
    \ some mechanism for\n   generating keys (because the TWAMP-Control protocol normally\
    \ plays a\n   role in this process, but is not present here).  The specification\
    \ of\n   the key generation mechanism is beyond the scope of this memo.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC4656] Shalunov, S., Teitelbaum, B., Karp, A., Boote,\
    \ J., and M.\n             Zekauskas, \"A One-way Active Measurement Protocol\
    \ (OWAMP)\",\n             RFC 4656, September 2006.\n   [RFC2681] Almes, G.,\
    \ Kalidindi, S., and M. Zekauskas, \"A Round-trip\n             Delay Metric for\
    \ IPPM\", RFC 2681, September 1999.\n   [RFC2119] Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2474] Nichols, K., Blake, S., Baker, F., and D. Black,\n\
    \             \"Definition of the Differentiated Services Field (DS Field)\n \
    \            in the IPv4 and IPv6 Headers\", RFC 2474, December 1998.\n   [RFC5226]\
    \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n             IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226, May\n             2008.\n\
    \   [RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",\n\
    \             STD 63, RFC 3629, November 2003.\n   [RFC5198] Klensin, J. and M.\
    \ Padlipsky, \"Unicode Format for Network\n             Interchange\", RFC 5198,\
    \ March 2008.\n"
- title: Informative References
  contents:
  - "Informative References\n   [RFC3692] Narten, T., \"Assigning Experimental and\
    \ Testing Numbers\n             Considered Useful\", BCP 82, RFC 3692, January\
    \ 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kaynam Hedayat\n   Brix Networks\n   285 Mill Road\n \
    \  Chelmsford, MA  01824\n   USA\n   EMail: khedayat@brixnet.com\n   URI:   http://www.brixnet.com/\n\
    \   Roman M. Krzanowski, Ph.D.\n   Verizon\n   500 Westchester Ave.\n   White\
    \ Plains, NY\n   USA\n   EMail: roman.krzanowski@verizon.com\n   URI:   http://www.verizon.com/\n\
    \   Al Morton\n   AT&T Labs\n   Room D3 - 3C06\n   200 Laurel Ave. South\n   Middletown,\
    \ NJ 07748\n   USA\n   Phone  +1 732 420 1571\n   EMail: acmorton@att.com\n  \
    \ URI:   http://home.comcast.net/~acmacm/\n   Kiho Yum\n   Juniper Networks\n\
    \   1194 Mathilda Ave.\n   Sunnyvale, CA\n   USA\n   EMail: kyum@juniper.net\n\
    \   URI:   http://www.juniper.com/\n   Jozef Z. Babiarz\n   Nortel Networks\n\
    \   3500 Carling Avenue\n   Ottawa, Ont  K2H 8E9\n   Canada\n   Email: babiarz@nortel.com\n\
    \   URI:   http://www.nortel.com/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
