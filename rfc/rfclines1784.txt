Abstract The Trivial File Transfer Protocol [1] is a simple, lock step, file transfer protocol which allows a client to get or put a file onto a remote host.
This document describes two TFTP options.
The first allows the client and server to negotiate the Timeout Interval.
The second allows the side receiving the file to determine the ultimate size of the transfer before it begins.
The TFTP Option Extension mechanism is described in [2].
This document assumes that the reader is familiar with the terminology and notation of both [1] and [2].
Request or Write Request packet is modified to include the timeout option as follows:
The opcode field contains either a 1, for Read Requests, or 2, for Write Requests, as defined in [1].
The name of the file to be read or written, as defined in [1].
This is a NULL terminated field.
The mode of the file transfer: "netascii", "octet", or "mail", as defined in [1].
This is a NULL terminated field.
The Timeout Interval option, "timeout" (case insensitive).
This is a NULL terminated field.
The number of seconds to wait before retransmitting, specified in ASCII.
Valid values range between "1" and "255" octets, inclusive.
This is a NULL terminated field.
If the server is willing to accept the timeout option, it sends an Option Acknowledgment (OACK) to the client.
The specified timeout value must match the value specified by the client.
Request or Write Request packet is modified to include the tsize option as follows:
The opcode field contains either a 1, for Read Requests, or 2, for Write Requests, as defined in [1].
The name of the file to be read or written, as defined in [1].
This is a NULL terminated field.
The mode of the file transfer: "netascii", "octet", or "mail", as defined in [1].
This is a NULL terminated field.
The Transfer Size option, "tsize" (case insensitive).
This is a NULL terminated field.
The size of the file to be transfered, specified as a NULL terminated ASCII string.
is a Write Request, with the 673312 octet file named "foobar", in binary transfer mode.
In Read Request packets, a size of "0" is specified in the request and the size of the file, in octets, is returned in the OACK.
If the file is too large for the client to handle, it may abort the transfer with an Error packet (error code 3).
In Write Request packets, the size of the file, in octets, is specified in the request and echoed back in the OACK.
If the file is too large for the server to handle, it may abort the transfer with an Error packet (error code 3).
Security Considerations Security issues are not discussed in this memo.
