- title: __initial_text__
  contents:
  - "       A Real-time Transport Protocol (RTP) Header Extension for\n          \
    \       Mixer-to-Client Audio Level Indication\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism for RTP-level mixers in audio\n\
    \   conferences to deliver information about the audio level of\n   individual\
    \ participants.  Such audio level indicators are transported\n   in the same RTP\
    \ packets as the audio data they pertain to.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6465.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Protocol Operation ..............................................4\n   4.\
    \ Audio Levels ....................................................5\n   5. Signaling\
    \ Information ...........................................7\n   6. Security Considerations\
    \ .........................................9\n   7. IANA Considerations ............................................10\n\
    \   8. Acknowledgments ................................................10\n  \
    \ 9. References .....................................................10\n    \
    \  9.1. Normative References ......................................10\n      9.2.\
    \ Informative References ....................................11\n   Appendix A.\
    \ Reference Implementation ..............................12\n      A.1. AudioLevelCalculator.java\
    \ .................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   \"A Framework for Conferencing with the Session Initiation\
    \ Protocol\n   (SIP)\" [RFC4353] presents an overall architecture for multi-party\n\
    \   conferencing.  Among others, the framework borrows from RTP [RFC3550]\n  \
    \ and extends the concept of a mixer entity \"responsible for combining\n   the\
    \ media streams that make up a conference, and generating one or\n   more output\
    \ streams that are delivered to recipients\".  Every\n   participant would hence\
    \ receive, in a flat single stream, media\n   originating from all the others.\n\
    \   Using such centralized mixer-based architectures simplifies support\n   for\
    \ conference calls on the client side, since they would hardly\n   differ from\
    \ one-to-one conversations.  However, the method also\n   introduces a few limitations.\
    \  The flat nature of the streams that a\n   mixer would output and send to participants\
    \ makes it difficult for\n   users to identify the original source of what they\
    \ are hearing.\n   Mechanisms that allow the mixer to send to participants cues\
    \ on\n   current speakers (e.g., the contributing source (CSRC) fields in RTP\n\
    \   [RFC3550]) only work for speaking/silent binary indications.  There\n   are,\
    \ however, a number of use cases where one would require more\n   detailed information.\
    \  Possible examples include the presence of\n   background chat/noise/music/typing,\
    \ someone breathing noisily in\n   their microphone, or other cases where identifying\
    \ the source of the\n   disturbance would make it easy to remove it (e.g., by\
    \ sending a\n   private IM to the concerned party asking them to mute their\n\
    \   microphone).  A more advanced scenario could involve an intense\n   discussion\
    \ between multiple participants that the user does not\n   personally know.  Audio\
    \ level information would help better recognize\n   the speakers by associating\
    \ with them complex (but still human\n   readable) characteristics like loudness\
    \ and speed, for example.\n   One way of presenting such information in a user-friendly\
    \ manner\n   would be for a conferencing client to attach audio level indicators\n\
    \   to the corresponding participant-related components in the user\n   interface.\
    \  One possible example is displayed in Figure 1, where\n   levels can help users\
    \ determine that Alice is currently the active\n   speaker, Carol is mute, and\
    \ Bob and Dave are sending some background\n   noise.\n                      \
    \   ________________________\n                        |                      \
    \  |\n                        |  00:42 |  Weekly Call  |\n                   \
    \     |________________________|\n                        |                  \
    \      |\n                        |                        |\n               \
    \         | Alice |======    | (S) |\n                        |              \
    \          |\n                        | Bob   |=         |     |\n           \
    \             |                        |\n                        | Carol |  \
    \        | (M) |\n                        |                        |\n       \
    \                 | Dave  |===       |     |\n                        |      \
    \                  |\n                        |________________________|\n   \
    \  Figure 1: Displaying Detailed Speaker Information to the User by\n        \
    \        Including Audio Level for Every Participant\n   Implementing a user interface\
    \ like the above requires analysis of the\n   media sent from other participants.\
    \  In a conventional audio\n   conference, this is only possible for the mixer,\
    \ since all other\n   conference participants are generally receiving a single,\
    \ flat audio\n   stream and therefore have no immediate way of determining individual\n\
    \   audio levels.\n   This document specifies an RTP extension header that allows\
    \ such\n   mixers to deliver audio level information to conference participants\n\
    \   by including it directly in the RTP packets transporting the\n   corresponding\
    \ audio data.\n   The header extension in this document is different than, but\n\
    \   complementary to, the one defined in [RFC6464], which defines a\n   mechanism\
    \ by which clients can indicate to audio mixers the levels of\n   the audio in\
    \ the packets they send.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Protocol Operation
  contents:
  - "3.  Protocol Operation\n   According to RFC 3550 [RFC3550], a mixer is expected\
    \ to include in\n   outgoing RTP packets a list of identifiers (CSRC IDs) indicating\
    \ the\n   sources that contributed to the resulting stream.  The presence of\n\
    \   such CSRC IDs allows RTP clients to determine, in a binary way, the\n   active\
    \ speaker(s) in any given moment.  The RTP Control Protocol\n   (RTCP) also provides\
    \ a basic mechanism to map the CSRC IDs to user\n   identities through the CNAME\
    \ field.  More advanced mechanisms can\n   exist, depending on the signaling protocol\
    \ used to establish and\n   control a conference.  In the case of the Session\
    \ Initiation Protocol\n   [RFC3261], for example, \"A Session Initiation Protocol\
    \ (SIP) Event\n   Package for Conference State\" [RFC4575] defines a <src-id>\
    \ tag that\n   binds CSRC IDs to media streams and SIP URIs.\n   This document\
    \ describes an RTP header extension that allows mixers to\n   indicate the audio\
    \ level of every contributing conference participant\n   (CSRC) in addition to\
    \ simply indicating their on/off status.  This\n   new header extension uses the\
    \ general mechanism for RTP header\n   extensions as described in [RFC5285].\n\
    \   Each instance of this header contains a list of one-octet audio\n   levels\
    \ expressed in -dBov, with values from 0 to 127 representing 0\n   to -127 dBov\
    \ (see Figures 2 and 3).  Appendix A provides a reference\n   implementation indicating\
    \ one way of obtaining such values from raw\n   audio samples.\n   Every audio\
    \ level value pertains to the CSRC identifier located at\n   the corresponding\
    \ position in the CSRC list.  In other words, the\n   first value would indicate\
    \ the audio level of the conference\n   participant represented by the first CSRC\
    \ identifier in that packet,\n   and so forth.  The number and order of these\
    \ values MUST therefore\n   match the number and order of the CSRC IDs present\
    \ in the same\n   packet.\n   When encoding audio level information, a mixer SHOULD\
    \ include in a\n   packet information that corresponds to the audio data being\n\
    \   transported in that same packet.  It is important that these values\n   follow\
    \ the actual stream as closely as possible.  Therefore, a mixer\n   SHOULD also\
    \ calculate the values after the original contributing\n   stream has undergone\
    \ possible processing such as level normalization,\n   and noise reduction, for\
    \ example.\n   It can sometimes happen that a conference involves more than a\
    \ single\n   mixer.  In such cases, each of the mixers MAY choose to relay the\n\
    \   CSRC list and audio level information they receive from peer mixers\n   (as\
    \ long as the total CSRC count remains below 16).  Given that the\n   maximum\
    \ audio level is not precisely defined by this specification,\n   it is likely\
    \ that in such situations average audio levels would be\n   perceptibly different\
    \ for the participants located behind the\n   different mixers.\n"
- title: 4.  Audio Levels
  contents:
  - "4.  Audio Levels\n   The audio level header extension carries the level of the\
    \ audio in\n   the RTP payload of the packet with which it is associated.  This\n\
    \   information is carried in an RTP header extension element as defined\n   by\
    \ \"A General Mechanism for RTP Header Extensions\" [RFC5285].\n   The payload\
    \ of the audio level header extension element can be\n   encoded using either\
    \ the one-byte or two-byte header defined in\n   [RFC5285].  Figures 2 and 3 show\
    \ sample audio level encodings with\n   each of these header formats.\n      \
    \ 0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  ID   | len=2 |0|   level 1   |0|   level 2   |0|   level 3   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \        Figure 2: Sample Audio Level Encoding Using the\n                   \
    \       One-Byte Header Format\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      ID       |     len=3     |0|   level 1   |0|   level 2   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |0|\
    \   level 3   |    0 (pad)    |               ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 3: Sample Audio Level Encoding Using the\n             \
    \             Two-Byte Header Format\n   In the case of the one-byte header format,\
    \ the 4-bit len field is the\n   number minus one of data bytes (i.e., audio level\
    \ values) transported\n   in this header extension element following the one-byte\
    \ header.\n   Therefore, the value zero in this field indicates that one byte\
    \ of\n   data follows.  In the case of the two-byte header format, the 8-bit\n\
    \   len field contains the exact number of audio levels carried in the\n   extension.\
    \  RFC 3550 [RFC3550] only allows RTP packets to carry a\n   maximum of 15 CSRC\
    \ IDs.  Given that audio levels directly refer to\n   CSRC IDs, implementations\
    \ MUST NOT include more than 15 audio level\n   values.  The maximum value allowed\
    \ in the len field is therefore 14\n   for the one-byte header format and 15 for\
    \ the two-byte header format.\n      Note: Audio levels in this document are defined\
    \ in the same manner\n      as is audio noise level in the RTP Payload Comfort\
    \ Noise\n      specification [RFC3389].  In [RFC3389], the overall magnitude of\n\
    \      the noise level in comfort noise is encoded into the first byte of\n  \
    \    the payload, with spectral information about the noise in\n      subsequent\
    \ bytes.  This specification's audio level parameter is\n      defined so as to\
    \ be identical to the comfort noise payload's\n      noise-level byte.\n   The\
    \ magnitude of the audio level itself is packed into the seven\n   least significant\
    \ bits of the single byte of the header extension,\n   shown in Figures 2 and\
    \ 3.  The least significant bit of the audio\n   level magnitude is packed into\
    \ the least significant bit of the byte.\n   The most significant bit of the byte\
    \ is unused and always set to 0.\n   The audio level is expressed in -dBov, with\
    \ values from 0 to 127\n   representing 0 to -127 dBov. dBov is the level, in\
    \ decibels, relative\n   to the overload point of the system, i.e., the highest-intensity\n\
    \   signal encodable by the payload format.  (Note: Representation\n   relative\
    \ to the overload point of a system is particularly useful for\n   digital implementations,\
    \ since one does not need to know the relative\n   calibration of the analog circuitry.)\
    \  For example, in the case of\n   u-law (audio/pcmu) audio [ITU.G711], the 0\
    \ dBov reference would be a\n   square wave with values +/- 8031.  (This translates\
    \ to 6.18 dBm0,\n   relative to u-law's dBm0 definition in Table 6 of [ITU.G711].)\n\
    \   The audio level for digital silence -- for a muted audio source, for\n   example\
    \ -- MUST be represented as 127 (-127 dBov), regardless of the\n   dynamic range\
    \ of the encoded audio format.\n   The audio level header extension only carries\
    \ the level of the audio\n   in the RTP payload of the packet with which it is\
    \ associated, with no\n   long-term averaging or smoothing applied.  That level\
    \ is measured as\n   a root mean square of all the samples in the measured range.\n\
    \   To simplify implementation of the encoding procedures described here,\n  \
    \ this specification provides a sample Java implementation (see\n   Appendix A)\
    \ of an audio level calculator that helps obtain such\n   values from raw linear\
    \ Pulse Code Modulation (PCM) audio samples.\n"
- title: 5.  Signaling Information
  contents:
  - "5.  Signaling Information\n   The URI for declaring the audio level header extension\
    \ in a Session\n   Description Protocol (SDP) extmap attribute and mapping it\
    \ to a local\n   extension header identifier is\n   \"urn:ietf:params:rtp-hdrext:csrc-audio-level\"\
    .  There is no\n   additional setup information needed for this extension (i.e.,\
    \ no\n   extension attributes).\n   An example attribute line in the SDP for a\
    \ conference might be:\n      a=extmap:7 urn:ietf:params:rtp-hdrext:csrc-audio-level\n\
    \   The above mapping will most often be provided per media stream (in\n   the\
    \ media-level section(s) of SDP, i.e., after an \"m=\" line) or\n   globally if\
    \ there is more than one stream containing audio level\n   indicators in a session.\n\
    \   Presence of the above attribute in the SDP description of a media\n   stream\
    \ indicates that RTP packets in that stream, which contain the\n   level extension\
    \ defined in this document, will be carrying such an\n   extension with an ID\
    \ of 7.\n   Conferencing clients that support audio level indicators and have\
    \ no\n   mixing capabilities would not be able to provide content for this\n \
    \  audio level extension and would hence have to always include the\n   direction\
    \ parameter in the \"extmap\" attribute with a value of\n   \"recvonly\".  Conference\
    \ focus entities with mixing capabilities can\n   omit the direction or set it\
    \ to \"sendrecv\" in SDP offers.  Such\n   entities would need to set it to \"\
    sendonly\" in SDP answers to offers\n   with a \"recvonly\" parameter and to \"\
    sendrecv\" when answering other\n   \"sendrecv\" offers.\n   This specification\
    \ only defines the use of the audio level extensions\n   in audio streams.  They\
    \ MUST NOT be advertised with other media\n   types, such as video or text, for\
    \ example.\n   Figures 4 and 5 show two example offer/answer exchanges between\
    \ a\n   conferencing client and a focus, and between two conference focus\n  \
    \ entities.\n     SDP Offer:\n       v=0\n       o=alice 2890844526 2890844526\
    \ IN IP6 host.example.com\n       s=-\n       c=IN IP6 host.example.com\n    \
    \   t=0 0\n       m=audio 49170 RTP/AVP 0 4\n       a=rtpmap:0 PCMU/8000\n   \
    \    a=rtpmap:4 G723/8000\n       a=extmap:1/recvonly urn:ietf:params:rtp-hdrext:csrc-audio-level\n\
    \     SDP Answer:\n       v=0\n       i=A Seminar on the session description protocol\n\
    \       o=conf-focus 2890844730 2890844730 IN IP6 focus.example.net\n       s=-\n\
    \       c=IN IP6 focus.example.net\n       t=0 0\n       m=audio 52544 RTP/AVP\
    \ 0\n       a=rtpmap:0 PCMU/8000\n       a=extmap:1/sendonly urn:ietf:params:rtp-hdrext:csrc-audio-level\n\
    \      Figure 4: A Client-Initiated Example SDP Offer/Answer Exchange\n      \
    \       Negotiating an Audio Stream with One-Way Flow of\n                   \
    \       Audio Level Information\n     SDP Offer:\n       v=0\n       i=Un seminaire\
    \ sur le protocole de description des sessions\n       o=fr-focus 2890844730 2890844730\
    \ IN IP6 focus.fr.example.net\n       s=-\n       c=IN IP6 focus.fr.example.net\n\
    \       t=0 0\n       m=audio 49170 RTP/AVP 0\n       a=rtpmap:0 PCMU/8000\n \
    \      a=extmap:1/sendrecv urn:ietf:params:rtp-hdrext:csrc-audio-level\n     SDP\
    \ Answer:\n       v=0\n       i=A Seminar on the session description protocol\n\
    \       o=us-focus 2890844526 2890844526 IN IP6 focus.us.example.net\n       s=-\n\
    \       c=IN IP6 focus.us.example.net\n       t=0 0\n       m=audio 52544 RTP/AVP\
    \ 0\n       a=rtpmap:0 PCMU/8000\n       a=extmap:1/sendrecv urn:ietf:params:rtp-hdrext:csrc-audio-level\n\
    \   Figure 5: An Example SDP Offer/Answer Exchange between Two Conference\n  \
    \  Focus Entities with Mixing Capabilities Negotiating an Audio Stream\n     \
    \       with Bidirectional Flow of Audio Level Information\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   1.  This document defines a means of attributing\
    \ audio level to a\n       particular participant in a conference.  An attacker\
    \ may try to\n       modify the content of RTP packets in a way that would make\
    \ audio\n       activity from one participant appear to be coming from another\n\
    \       participant.\n   2.  Furthermore, the fact that audio level values would\
    \ not be\n       protected even in a Secure Real-time Transport Protocol (SRTP)\n\
    \       session [RFC3711] might be of concern in some cases where the\n      \
    \ activity of a particular participant in a conference is\n       confidential.\
    \  Also, as discussed in [SRTP-VBR-AUDIO], an\n       attacker might be able to\
    \ infer information about the\n       conversation, possibly with phoneme-level\
    \ resolution.\n   3.  Both of the above are concerns that stem from the design\
    \ of the\n       RTP protocol itself, and they would probably also apply when\n\
    \       using CSRC identifiers in the way specified in RFC 3550\n       [RFC3550].\
    \  It is therefore important that, according to the\n       needs of a particular\
    \ scenario, implementors and deployers\n       consider the use of header extension\
    \ encryption [SRTP-ENCR-HDR]\n       or a lower-level security and authentication\
    \ mechanism such as\n       IPsec [RFC4301], for example.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document defines a new extension URI in the\
    \ RTP Compact Header\n   Extensions subregistry of the Real-Time Transport Protocol\
    \ (RTP)\n   Parameters registry, according to the following data:\n      Extension\
    \ URI: urn:ietf:params:rtp-hdrext:csrc-audio-level\n      Description:   Mixer-to-client\
    \ audio level indicators\n      Contact:       emcho@jitsi.org\n      Reference:\
    \     RFC 6465\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Lyubomir Marinov contributed level measurement and rendering\
    \ code.\n   Keith Drage, Roni Even, Miguel A. Garcia, John Elwell, Kevin P.\n\
    \   Fleming, Ingemar Johansson, Michael Ramalho, Magnus Westerlund, and\n   several\
    \ others provided helpful feedback over the avt and avtext\n   mailing lists.\n\
    \   Jitsi's participation in this specification is funded by the NLnet\n   Foundation.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n  \
    \            Jacobson, \"RTP: A Transport Protocol for Real-Time\n           \
    \   Applications\", STD 64, RFC 3550, July 2003.\n   [RFC5285]  Singer, D. and\
    \ H. Desineni, \"A General Mechanism for RTP\n              Header Extensions\"\
    , RFC 5285, July 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ITU.G711] International Telecommunication Union,\
    \ \"Pulse Code\n              Modulation (PCM) of Voice Frequencies\",\n     \
    \         ITU-T Recommendation G.711, November 1988.\n   [RFC3261]  Rosenberg,\
    \ J., Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J.,\
    \ Sparks, R., Handley, M., and E.\n              Schooler, \"SIP: Session Initiation\
    \ Protocol\", RFC 3261,\n              June 2002.\n   [RFC3389]  Zopf, R., \"\
    Real-time Transport Protocol (RTP) Payload for\n              Comfort Noise (CN)\"\
    , RFC 3389, September 2002.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund, M.,\
    \ Carrara, E., and K.\n              Norrman, \"The Secure Real-time Transport\
    \ Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4301]  Kent,\
    \ S. and K. Seo, \"Security Architecture for the\n              Internet Protocol\"\
    , RFC 4301, December 2005.\n   [RFC4353]  Rosenberg, J., \"A Framework for Conferencing\
    \ with the\n              Session Initiation Protocol (SIP)\", RFC 4353,\n   \
    \           February 2006.\n   [RFC4575]  Rosenberg, J., Schulzrinne, H., and\
    \ O. Levin, Ed., \"A\n              Session Initiation Protocol (SIP) Event Package\
    \ for\n              Conference State\", RFC 4575, August 2006.\n   [RFC6464]\
    \  Lennox, J., Ed., Ivov, E., and E. Marocco, \"A Real-time\n              Transport\
    \ Protocol (RTP) Header Extension for Client-to-\n              Mixer Audio Level\
    \ Indication\", RFC 6465, December 2011.\n   [SRTP-ENCR-HDR]\n              Lennox,\
    \ J., \"Encryption of Header Extensions in the Secure\n              Real-Time\
    \ Transport Protocol (SRTP)\", Work in Progress,\n              October 2011.\n\
    \   [SRTP-VBR-AUDIO]\n              Perkins, C. and JM. Valin, \"Guidelines for\
    \ the use of\n              Variable Bit Rate Audio with Secure RTP\", Work\n\
    \              in Progress, July 2011.\n"
- title: Appendix A.  Reference Implementation
  contents:
  - "Appendix A.  Reference Implementation\n   This appendix contains Java code for\
    \ a reference implementation of\n   the level calculation and rendering methods.\
    \  The code is not\n   normative and is by no means the only possible implementation.\
    \  Its\n   purpose is to help implementors add audio level support to mixers and\n\
    \   clients.\n   The Java code contains an AudioLevelCalculator class that calculates\n\
    \   the sound pressure level of a signal with specific samples.  It can\n   be\
    \ used in mixers to generate values suitable for the level extension\n   headers.\n\
    \   The implementation is provided in Java but does not rely on any of\n   the\
    \ language specifics and can be easily ported to another language.\n"
- title: A.1.  AudioLevelCalculator.java
  contents:
  - "A.1.  AudioLevelCalculator.java\n   <CODE BEGINS>\n   /*\n      Copyright (c)\
    \ 2011 IETF Trust and the persons identified\n      as authors of the code.  All\
    \ rights reserved.\n      Redistribution and use in source and binary forms, with\n\
    \      or without modification, is permitted pursuant to, and subject\n      to\
    \ the license terms contained in, the Simplified BSD License\n      set forth\
    \ in Section 4.c of the IETF Trust's Legal Provisions\n      Relating to IETF\
    \ Documents (http://trustee.ietf.org/license-info).\n   */\n   /**\n    * Calculates\
    \ the audio level of specific samples of a signal\n    * relative to overload.\n\
    \    */\n   public class AudioLevelCalculator\n   {\n       /**\n        * Calculates\
    \ the audio level of a signal with specific\n        * <tt>samples</tt>.\n   \
    \     *\n        * @param samples  the samples whose audio level we need to\n\
    \        * calculate.  The samples are specified as an <tt>int</tt>\n        *\
    \ array starting at <tt>offset</tt>, extending <tt>length</tt>\n        * number\
    \ of elements, and each <tt>int</tt> element in the\n        * specified range\
    \ representing a sample whose audio level we\n        * need to calculate.  Though\
    \ a sample is provided in the\n        * form of an <tt>int</tt> value, the sample\
    \ size in bits\n        * is determined by the caller via <tt>overload</tt>.\n\
    \        *\n        * @param offset  the offset in <tt>samples</tt> at which the\n\
    \        * samples start.\n        *\n        * @param length  the length of the\
    \ signal specified in\n        * <tt>samples<tt>, starting at <tt>offset</tt>.\n\
    \        *\n        * @param overload  the overload (point) of <tt>signal</tt>.\n\
    \        * For example, <tt>overload</tt> can be {@link Byte#MAX_VALUE}\n    \
    \    * for 8-bit signed samples or {@link Short#MAX_VALUE} for\n        * 16-bit\
    \ signed samples.\n        *\n        * @return  the audio level of the specified\
    \ signal.\n        */\n       public static int calculateAudioLevel(\n       \
    \    int[] samples, int offset, int length,\n           int overload)\n      \
    \ {\n           /*\n            * Calculate the root mean square (RMS) of the\
    \ signal.\n            */\n           double rms = 0;\n           for (; offset\
    \ < length; offset++)\n           {\n               double sample = samples[offset];\n\
    \               sample /= overload;\n               rms += sample * sample;\n\
    \           }\n           rms = (length == 0) ? 0 : Math.sqrt(rms / length);\n\
    \           /*\n            * The audio level is a logarithmic measure of the\n\
    \            * rms level of an audio sample relative to a reference\n        \
    \    * value and is measured in decibels.\n            */\n           double db;\n\
    \           /*\n            * The minimum audio level permitted.\n           \
    \ */\n           final double MIN_AUDIO_LEVEL = -127;\n           /*\n       \
    \     * The maximum audio level permitted.\n            */\n           final double\
    \ MAX_AUDIO_LEVEL = 0;\n           if (rms > 0)\n           {\n              \
    \ /*\n                * The \"zero\" reference level is the overload level,\n\
    \                * which corresponds to 1.0 in this calculation, because\n   \
    \             * the samples are normalized in calculating the RMS.\n         \
    \       */\n               db = 20 * Math.log10(rms);\n               /*\n   \
    \             * Ensure that the calculated level is within the minimum\n     \
    \           * and maximum range permitted.\n                */\n             \
    \  if (db < MIN_AUDIO_LEVEL)\n                   db = MIN_AUDIO_LEVEL;\n     \
    \          else if (db > MAX_AUDIO_LEVEL)\n                   db = MAX_AUDIO_LEVEL;\n\
    \           }\n           else\n           {\n               db = MIN_AUDIO_LEVEL;\n\
    \           }\n           return (int)Math.round(db);\n       }\n   }\n   <CODE\
    \ ENDS>\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Emil Ivov (editor)\n   Jitsi\n   Strasbourg  67000\n \
    \  France\n   EMail: emcho@jitsi.org\n   Enrico Marocco (editor)\n   Telecom Italia\n\
    \   Via G. Reiss Romoli, 274\n   Turin  10148\n   Italy\n   EMail: enrico.marocco@telecomitalia.it\n\
    \   Jonathan Lennox\n   Vidyo, Inc.\n   433 Hackensack Avenue\n   Seventh Floor\n\
    \   Hackensack,  NJ  07601\n   US\n   EMail: jonathan@vidyo.com\n"
