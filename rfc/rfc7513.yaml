- contents:
  - '     Source Address Validation Improvement (SAVI) Solution for DHCP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the procedure for creating a binding between\n
    \  a DHCPv4/DHCPv6-assigned IP address and a binding anchor on a Source\n   Address
    Validation Improvement (SAVI) device.  The bindings set up by\n   this procedure
    are used to filter packets with forged source IP\n   addresses.  This mechanism
    complements BCP 38 (RFC 2827) ingress\n   filtering, providing finer-grained source
    IP address validation.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7513.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n   2.  Requirements Language . . . . . . . . . . . . . . . . .
    . . .   5\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   4.  Deployment Scenario and Configuration . . . . . . . . . . . .   8\n
    \    4.1.  Elements and Scenario . . . . . . . . . . . . . . . . . .   8\n     4.2.
    \ SAVI Binding Type Attributes  . . . . . . . . . . . . . .  10\n       4.2.1.
    \ Trust Attribute . . . . . . . . . . . . . . . . . . .  10\n       4.2.2.  DHCP-Trust
    Attribute  . . . . . . . . . . . . . . . .  11\n       4.2.3.  DHCP-Snooping Attribute
    . . . . . . . . . . . . . . .  11\n       4.2.4.  Data-Snooping Attribute . .
    . . . . . . . . . . . . .  11\n       4.2.5.  Validating Attribute  . . . . .
    . . . . . . . . . . .  12\n       4.2.6.  Table of Mutual Exclusions  . . . .
    . . . . . . . . .  13\n     4.3.  Perimeter . . . . . . . . . . . . . . . . .
    . . . . . . .  13\n       4.3.1.  SAVI-DHCP Perimeter Overview  . . . . . . .
    . . . . .  13\n       4.3.2.  SAVI-DHCP Perimeter Configuration Guideline . .
    . . .  14\n       4.3.3.  On the Placement of the DHCP Server and Relay . . .
    .  15\n       4.3.4.  An Alternative Deployment . . . . . . . . . . . . . .  15\n
    \      4.3.5.  Considerations regarding Binding Anchors  . . . . . .  16\n     4.4.
    \ Other Device Configuration  . . . . . . . . . . . . . . .  17\n   5.  Binding
    State Table (BST) . . . . . . . . . . . . . . . . . .  17\n   6.  DHCP Snooping
    Process . . . . . . . . . . . . . . . . . . . .  18\n     6.1.  Rationale . .
    . . . . . . . . . . . . . . . . . . . . . .  18\n     6.2.  Binding States Description
    \ . . . . . . . . . . . . . . .  19\n     6.3.  Events  . . . . . . . . . . .
    . . . . . . . . . . . . . .  19\n       6.3.1.  Timer Expiration Event  . . .
    . . . . . . . . . . . .  19\n       6.3.2.  Control Message Arriving Events .
    . . . . . . . . . .  19\n     6.4.  The State Machine of DHCP Snooping Process
    \ . . . . . . .  21\n       6.4.1.  Initial State: NO_BIND  . . . . . . . . .
    . . . . . .  21\n       6.4.2.  Initial State: INIT_BIND  . . . . . . . . . .
    . . . .  24\n       6.4.3.  Initial State: BOUND  . . . . . . . . . . . . . .
    . .  27\n       6.4.4.  Table of State Machine  . . . . . . . . . . . . . . .
    \ 30\n   7.  Data Snooping Process . . . . . . . . . . . . . . . . . . . .  31\n
    \    7.1.  Scenario  . . . . . . . . . . . . . . . . . . . . . . . .  31\n     7.2.
    \ Rationale . . . . . . . . . . . . . . . . . . . . . . . .  32\n     7.3.  Additional
    Binding States Description . . . . . . . . . .  33\n     7.4.  Events  . . . .
    . . . . . . . . . . . . . . . . . . . . .  33\n     7.5.  Message Sender Functions
    \ . . . . . . . . . . . . . . . .  35\n       7.5.1.  Duplicate Detection Message
    Sender  . . . . . . . . .  35\n       7.5.2.  Leasequery Message Sender . . .
    . . . . . . . . . . .  36\n       7.5.3.  Address Verification Message Sender
    . . . . . . . . .  36\n     7.6.  Initial State: NO_BIND  . . . . . . . . . .
    . . . . . . .  37\n       7.6.1.  Event: EVE_DATA_UNMATCH: A data packet without
    a\n               matched binding is received . . . . . . . . . . . . .  37\n
    \      7.6.2.  Events Not Observed in NO_BIND for Data Snooping  . .  38\n     7.7.
    \ Initial State: DETECTION  . . . . . . . . . . . . . . . .  39\n       7.7.1.
    \ Event: EVE_ENTRY_EXPIRE . . . . . . . . . . . . . . .  39\n       7.7.2.  Event:
    EVE_DATA_CONFLICT: ARP Reply / NA Message\n               Received from Unexpected
    System . . . . . . . . . . .  39\n       7.7.3.  Events Not Observed in DETECTION
    \ . . . . . . . . . .  39\n     7.8.  Initial State: RECOVERY . . . . . . . .
    . . . . . . . . .  40\n       7.8.1.  Event: EVE_DATA_LEASEQUERY: A valid DHCPLEASEACTIVE\n
    \              or successful LEASEQUERY-REPLY is received  . . . . .  40\n       7.8.2.
    \ Event: EVE_ENTRY_EXPIRE . . . . . . . . . . . . . . .  41\n       7.8.3.  Events
    Not Observed in RECOVERY . . . . . . . . . . .  41\n     7.9.  Initial State:
    VERIFY . . . . . . . . . . . . . . . . . .  41\n       7.9.1.  Event: EVE_DATA_LEASEQUERY:
    A valid DHCPLEASEACTIVE\n               or successful LEASEQUERY-REPLY is received
    \ . . . . .  41\n       7.9.2.  Event: EVE_DATA_VERIFY: A valid ARP Reply or NA
    is\n               received from the device attached via the binding\n               anchor
    \ . . . . . . . . . . . . . . . . . . . . . . .  42\n       7.9.3.  Event: EVE_ENTRY_EXPIRE
    . . . . . . . . . . . . . . .  42\n       7.9.4.  Event: EVE_DATA_EXPIRE  . .
    . . . . . . . . . . . . .  43\n       7.9.5.  Events Not Observed in VERIFY .
    . . . . . . . . . . .  43\n     7.10. Initial State: BOUND  . . . . . . . . .
    . . . . . . . . .  43\n     7.11. Table of State Machine  . . . . . . . . . .
    . . . . . . .  44\n   8.  Filtering Specification . . . . . . . . . . . . . .
    . . . . .  45\n     8.1.  Data Packet Filtering . . . . . . . . . . . . . . .
    . . .  46\n     8.2.  Control Packet Filtering  . . . . . . . . . . . . . . .
    .  46\n   9.  State Restoration . . . . . . . . . . . . . . . . . . . . . .  47\n
    \    9.1.  Attribute Configuration Restoration . . . . . . . . . . .  47\n     9.2.
    \ Binding State Restoration . . . . . . . . . . . . . . . .  47\n   10. Constants
    . . . . . . . . . . . . . . . . . . . . . . . . . .  48\n   11. Security Considerations
    . . . . . . . . . . . . . . . . . . .  48\n     11.1.  Security Problems with
    the Data Snooping Process . . . .  48\n     11.2.  Securing Leasequery Operations
    . . . . . . . . . . . . .  49\n     11.3.  Client Departure Issues  . . . . .
    . . . . . . . . . . .  49\n     11.4.  Compatibility with Detecting Network Attachment
    (DNA)  .  50\n     11.5.  Binding Number Limitation  . . . . . . . . . . . . .
    . .  51\n     11.6.  Privacy Considerations . . . . . . . . . . . . . . . . .
    \ 51\n     11.7.  Fragmented DHCP Messages . . . . . . . . . . . . . . . .  51\n
    \  12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  52\n     12.1.
    \ Normative References . . . . . . . . . . . . . . . . . .  52\n     12.2.  Informative
    References . . . . . . . . . . . . . . . . .  53\n   Acknowledgments . . . . .
    . . . . . . . . . . . . . . . . . . . .  54\n   Authors' Addresses  . . . . .
    . . . . . . . . . . . . . . . . . .  54\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a fine-grained source address validation\n
    \  mechanism for IPv4 and IPv6 packets.  This mechanism creates bindings\n   between
    IP addresses assigned to network interfaces by DHCP and\n   suitable binding anchors
    (Section 4.3.5).  As discussed in Section 3\n   and [RFC7039], a \"binding anchor\"
    is an attribute that is immutable\n   or difficult to change that may be used
    to identify the system an IP\n   address has been assigned to; common examples
    include a Media Access\n   Control (MAC) address found on an Ethernet switch port
    or Wi-Fi\n   security association.  The bindings are used to identify and filter\n
    \  packets originated by these interfaces using forged source IP\n   addresses.
    \ In this way, this mechanism can prevent hosts from using\n   IP addresses assigned
    to any other attachment point in or not\n   associated with the network.  This
    behavior is referred to as\n   \"spoofing\" and is key to amplification attacks,
    in which a set of\n   systems send messages to another set of systems claiming
    to be from a\n   third set of systems, and sending the replies to systems that
    don't\n   expect them.  Whereas BCP 38 [RFC2827] protects a network from a\n   neighboring
    network by providing prefix granularity source IP address\n   validity, this mechanism
    protects a network, including a Local Area\n   Network, from itself by providing
    address granularity source IP\n   validity when DHCP/DHCPv6 is used to assign
    IPv4/IPv6 addresses.\n   Both provide a certain level of traceability, in that
    packet drops\n   indicate the presence of a system that is producing packets with\n
    \  spoofed IP addresses.\n   SAVI-DHCP snoops DHCP address assignments to set
    up bindings between\n   IP addresses assigned by DHCP and corresponding binding
    anchors.  It\n   includes the DHCPv4 and DHCPv6 Snooping Process (Section 6) and
    the\n   Data Snooping Process (Section 7), as well as a number of other\n   technical
    details.  The Data Snooping Process is a data-triggered\n   procedure that snoops
    the IP header of data packets to set up\n   bindings.  It is designed to avoid
    a permanent blockage of valid\n   addresses in the case that DHCP snooping is
    insufficient to set up\n   all the valid bindings.\n   This mechanism is designed
    for the stateful DHCP scenario [RFC2131]\n   [RFC3315].  Stateless DHCP [RFC3736]
    is out of scope for this\n   document, as it has nothing to do with IP address
    allocation.  An\n   alternative SAVI method would have be used in those cases.
    \ For hosts\n   using Stateless Address Autoconfiguration (SLAAC) to allocate\n
    \  addresses, First-Come, First-Served Source Address Validation\n   Improvement
    (FCFS SAVI) [RFC6620] should be enabled.  SAVI-DHCP is\n   primarily designed
    for pure DHCP scenarios in which only addresses\n   assigned through DHCP are
    allowed.  However, it does not block link-\n   local addresses, as they are not
    assigned using DHCP.  It is\n   RECOMMENDED that the administration deploy a SAVI
    solution for link-\n   local addresses, e.g., FCFS SAVI [RFC6620].\n   This mechanism
    works for networks that use DHCPv4 only, DHCPv6 only,\n   or both DHCPv4 and DHCPv6.
    \ However, the DHCP address assignment\n   mechanism in IPv4/IPv6 transition scenarios,
    e.g., [RFC7341], are\n   beyond the scope of this document.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Requirements Language
- contents:
  - "3.  Terminology\n   Binding anchor: A \"binding anchor\" is defined to be a physical
    and/or\n   link-layer property of an attached device, as in [RFC7039].  A list\n
    \  of sample binding anchors can be found in Section 3.2 of that\n   document.
    \ To the degree possible, a binding anchor associates an IP\n   address with something
    unspoofable that identifies a single-client\n   system or one of its interfaces.
    \ See Section 4.3.5 for more detail.\n   Attribute: A configurable property of
    each binding anchor (port, MAC\n   address, or other information) that indicates
    the actions to be\n   performed on packets received from the attached network
    device.\n   DHCP address: An IP address assigned via DHCP.\n   SAVI-DHCP: The
    name of this SAVI function for DHCP-assigned\n   addresses.\n   SAVI device: A
    network device on which SAVI-DHCP is enabled.\n   Non-SAVI device: A network device
    on which SAVI-DHCP is not enabled.\n   DHCP Client-to-Server message: A message
    that is sent from a DHCP\n   client to a DHCP server or DHCP servers and is one
    of the following\n   types:\n   o  DHCPv4 Discover: DHCPDISCOVER [RFC2131].\n
    \  o  DHCPv4 Request: DHCPREQUEST generated during SELECTING state\n      [RFC2131].\n
    \  o  DHCPv4 Renew: DHCPREQUEST generated during RENEWING state\n      [RFC2131].\n
    \  o  DHCPv4 Rebind: DHCPREQUEST generated during REBINDING state\n      [RFC2131].\n
    \  o  DHCPv4 Reboot: DHCPREQUEST generated during INIT-REBOOT state\n      [RFC2131].\n
    \  o  Note: DHCPv4 Request/Renew/Rebind/Reboot messages can be\n      identified
    based on Table 4 of [RFC2131].\n   o  DHCPv4 Decline: DHCPDECLINE [RFC2131].\n
    \  o  DHCPv4 Release: DHCPRELEASE [RFC2131].\n   o  DHCPv4 Inform: DHCPINFORM
    [RFC2131].\n   o  DHCPv4 DHCPLEASEQUERY: A message sent to inquire about the lease\n
    \     that might exist for an IPv4 address [RFC4388].\n   o  DHCPv6 Request: REQUEST
    [RFC3315].\n   o  DHCPv6 Solicit: SOLICIT [RFC3315].\n   o  DHCPv6 Confirm: CONFIRM
    [RFC3315].\n   o  DHCPv6 Decline: DECLINE [RFC3315].\n   o  DHCPv6 Release: RELEASE
    [RFC3315].\n   o  DHCPv6 Rebind: REBIND [RFC3315].\n   o  DHCPv6 Renew: RENEW
    [RFC3315].\n   o  DHCPv6 Information-Request: INFORMATION-REQUEST [RFC3315].\n
    \  o  DHCPv6 LEASEQUERY: A message sent to inquire about the lease that\n      might
    exist for an IPv6 address [RFC5007].\n   DHCP Server-to-Client message: A message
    that is sent from a DHCP\n   server to a DHCP client and is one of the following
    types:\n   o  DHCPv4 ACK: DHCPACK [RFC2131].\n   o  DHCPv4 NAK: DHCPNAK [RFC2131].\n
    \  o  DHCPv4 Offer: DHCPOFFER [RFC2131].\n   o  DHCPv4 DHCPLEASEACTIVE: A response
    to a DHCPLEASEQUERY request\n      containing lease information [RFC4388].\n   o
    \ DHCPv4 DHCPLEASEUNKNOWN: A response to a DHCPLEASEQUERY request\n      indicating
    that the server does not manage the address [RFC4388].\n   o  DHCPv4 DHCPLEASEUNASSIGNED:
    A response to a DHCPLEASEQUERY request\n      indicating that the server manages
    the address and there is no\n      current lease [RFC4388].\n   o  DHCPv6 Reply:
    REPLY [RFC3315].\n   o  DHCPv6 Advertise: ADVERTISE [RFC3315].\n   o  DHCPv6 Reconfigure:
    RECONFIGURE [RFC3315].\n   o  DHCPv6 LEASEQUERY-REPLY: A response to a LEASEQUERY
    request\n      [RFC5007].\n   Lease time: The lease time in IPv4 [RFC2131] or
    the valid lifetime in\n   IPv6 [RFC3315].\n   Binding entry: A rule that associates
    an IP address with a binding\n   anchor.\n   Binding State Table (BST): The data
    structure that contains the\n   binding entries.\n   Binding entry limit: The
    maximum number of binding entries that may\n   be associated with a binding anchor.
    \ Limiting the number of binding\n   entries per binding anchor prevents a malicious
    or malfunctioning\n   node from overloading the binding table on a SAVI device.\n
    \  Direct attachment: Ideally, a SAVI device is an access device that\n   hosts
    are attached to directly.  In such a case, the hosts are direct\n   attachments
    (i.e., they attach directly) to the SAVI device.\n   Indirect attachment: A SAVI
    device MAY be an aggregation device that\n   other access devices are attached
    to and that hosts in turn attach\n   to.  In such a case, the hosts are indirect
    attachments (i.e., they\n   attach indirectly) to the SAVI device.\n   Unprotected
    link: Unprotected links are links that connect to hosts\n   or networks of hosts
    that receive their DHCP traffic by another path\n   and are therefore outside
    the SAVI perimeter.\n   Unprotected device: An unprotected device is a device
    associated with\n   an unprotected link.  One example might be the gateway router
    of a\n   network.\n   Protected link: If DHCP messages for a given attached device
    always\n   use a given link, the link is considered to be \"protected\" by the\n
    \  SAVI device and is therefore within the SAVI perimeter.\n   Protected device:
    A protected device is a device associated with a\n   protected link.  One example
    might be a desktop switch in the\n   network, or a host.\n   Cut vertex: A cut
    vertex is any vertex whose removal increases the\n   number of connected components
    in a (network) graph.  This is a\n   concept in graph theory.  This term is used
    in Section 6.1 to\n   accurately specify the required deployment location of SAVI
    devices\n   when they only perform the DHCP Snooping Process.\n   Identity Association
    (IA): \"A collection of addresses assigned to a\n   client\" [RFC3315].\n   Detection
    message: A Neighbor Solicitation or ARP message intended by\n   the Data Snooping
    Process to detect a duplicate address.\n   DHCP_DEFAULT_LEASE: Default lifetime
    for a DHCPv6 address when the\n   binding is triggered by a DHCPv6 Confirm message
    but a DHCPv6\n   Leasequery exchange [RFC5007] cannot be performed by the SAVI
    device\n   to fetch the lease.\n"
  title: 3.  Terminology
- contents:
  - '4.  Deployment Scenario and Configuration

    '
  - contents:
    - "4.1.  Elements and Scenario\n   The essential elements in a SAVI-DHCP deployment
      scenario include at\n   least one DHCP server (which may or may not be assigned
      an address\n   using DHCP and therefore may or may not be protected), zero or
      more\n   protected DHCP clients, and one or more SAVI devices.  It may also\n
      \  include DHCP relays, when the DHCP server is not co-located with a\n   set
      of clients, and zero or more protected non-SAVI devices.  Outside\n   the perimeter,
      via unprotected links, there may be many unprotected\n   devices.\n                                 +-------------+\n
      \                                | Unprotected |\n                                 |
      \  Device    |\n                                 +------+------+\n                                        |\n
      \                  +--------+     +-----+------+    +----------+\n                   |DHCP
      \   +-----+  Non-SAVI  +----+Bogus DHCP|\n                   |Server A|     |
      \ Device 1  |    |Server    |\n                   +--------+     +-----+------+
      \   +----------+\n                                        |trusted, unprotected
      link\n       . . . . . . . . . . . . . . . . .|. . . . . . . . . . . . . .\n
      \     .                                 |                           .\n      .
      \            Protection      +---+------+ trusted link       .\n      .             Perimeter
      \      | SAVI     +--------------+     .\n      .                             |
      Device C |              |     .\n      .                             +---+------+
      \             |     .\n      .                                 |                     |
      \    .\n      .  untrusted, +----------+    +---+------+       +------+---+
      .\n      .  protected  | SAVI     |    | Non-SAVI |       | SAVI     | .\n      .
      \ link+------+ Device A +----+ Device 3 +-------+ Device B | .\n      .      |
      \     +----+--+--+    +----------+       +-+---+----+ .\n      .      |           |
      \ +----------+    . . . .  .   |   |      .\n      .      |       . . . . .
      .       |   .          .  |   |      .\n      .      |      .    |      .      |
      \  .    +--------+   |      .\n      . +----+-----+. +--+---+  . +----+-+ .
      +--+---+ .  +---+----+ .\n      . | Non-SAVI |. |Client|  . |DHCP  | . |Client|
      .  |DHCP    | .\n      . | Device 2 |. |A     |  . |Relay | . |B     | .  |Server
      B| .\n      . +----------+. +------+  . +------+ . +------+ .  +--------+ .\n
      \      . . . . . . .             . . . . .             . . . . . . .\n                       Figure
      1: SAVI-DHCP Scenario\n   Figure 1 shows a deployment scenario that contains
      these elements.\n   Note that a physical device can instantiate multiple elements,
      e.g.,\n   a switch can be both a SAVI device and a DHCP relay, or in a cloud-\n
      \  computing environment, a physical host may contain a virtual switch\n   plus
      some number of virtual hosts.  In such cases, the links are\n   logical links
      rather than physical links.\n   Networks are not usually isolated.  As a result,
      traffic from other\n   networks, including transit traffic as specified in [RFC6620]
      (e.g.,\n   traffic from another SAVI switch or a router) may enter a SAVI-DHCP\n
      \  network through the unprotected links.  Since SAVI solutions are\n   limited
      to validating traffic generated from a local link, SAVI-DHCP\n   does not set
      up bindings for addresses assigned in other networks and\n   cannot validate
      them.  Traffic from unprotected links should be\n   checked by an unprotected
      device or mechanisms described in\n   [RFC2827].  The generation and deployment
      of such a mechanism is\n   beyond the scope of this document.\n   Traffic from
      protected links is, however, locally generated and\n   should have its source
      addresses validated by SAVI-DHCP if possible.\n   In the event that there is
      an intervening protected non-SAVI device\n   between the host and the SAVI device,
      however, use of the physical\n   attachment point alone as a binding anchor
      is insufficiently secure,\n   as several devices on a port or other point of
      attachment can spoof\n   each other.  Hence, additional information such as
      a MAC address\n   SHOULD be used to disambiguate them.\n"
    title: 4.1.  Elements and Scenario
  - contents:
    - "4.2.  SAVI Binding Type Attributes\n   As illustrated in Figure 1, a system
      attached to a SAVI device can be\n   a DHCP client, a DHCP relay/server, a SAVI
      device, or a non-SAVI\n   device.  Different actions are performed on traffic
      originated from\n   different elements.  To distinguish among their requirements,
      several\n   properties are associated with their point of attachment on the
      SAVI\n   device.\n   When a binding association is uninstantiated, e.g., when
      no host is\n   attached to the SAVI device using a given port or other binding\n
      \  anchor, the binding port attributes take default values unless\n   overridden
      by configuration.  By default, a SAVI switch does not\n   filter DHCP messages,
      nor does it attempt to validate source\n   addresses, which is to say that the
      binding attributes are ignored\n   until SAVI-DHCP is itself enabled.  This
      is because a SAVI switch\n   that depends on DHCP cannot tell, a priori, which
      ports have valid\n   DHCP servers attached, or which have routers or other equipment
      that\n   would validly appear to use an arbitrary set of source addresses.\n
      \  When SAVI has been enabled, the attributes take effect.\n"
    - contents:
      - "4.2.1.  Trust Attribute\n   The \"Trust Attribute\" is a Boolean value.  If
        TRUE, it indicates that\n   the packets from the corresponding attached device
        need not have\n   their source addresses validated.  Examples of a trusted
        attachment\n   would be a port to another SAVI device, or to an IP router,
        as shown\n   in Figure 1.  In both cases, traffic using many source IP addresses\n
        \  will be seen.  By default, the Trust attribute is FALSE, indicating\n   that
        any device found on that port will seek an address using DHCP\n   and be limited
        to using such addresses.\n   SAVI devices will not set up bindings for points
        of attachment with\n   the Trust attribute set TRUE; no packets, including
        DHCP messages,\n   from devices with this attribute on their attachments will
        be\n   validated.  However, DHCP Server-to-Client messages will be snooped\n
        \  on attachment points with the Trust attribute set TRUE in the same\n   way
        as if they had the DHCP-Trust attribute set (see Section 4.2.2).\n"
      title: 4.2.1.  Trust Attribute
    - contents:
      - "4.2.2.  DHCP-Trust Attribute\n   The \"DHCP-Trust Attribute\" is similarly
        a Boolean attribute.  It\n   indicates whether the attached device is permitted
        to initiate DHCP\n   Server-to-Client messages.  In Figure 1, the points of
        attachment of\n   the DHCP server and the DHCP relay would have this attribute
        set\n   TRUE, and attachment points that have Trust set TRUE are implicitly\n
        \  treated as if DHCP-Trust is TRUE.\n   If the DHCP-Trust attribute is TRUE,
        SAVI devices will forward DHCP\n   Server-to-Client messages from the points
        of attachment with this\n   attribute.  If the DHCP Server-to-Client messages
        can trigger the\n   state transitions, the binding setup processes specified
        in Sections\n   6 and 7 will handle them.  By default, the DHCP-Trust attribute
        is\n   FALSE, indicating that the attached system is not a DHCP server.\n
        \  A DHCPv6 implementor can refer to [DHCPv6-SHIELD] for more details.\n"
      title: 4.2.2.  DHCP-Trust Attribute
    - contents:
      - "4.2.3.  DHCP-Snooping Attribute\n   The \"DHCP-Snooping Attribute\" is similarly
        a Boolean attribute.  It\n   indicates whether bindings will be set up based
        on DHCP snooping.\n   If this attribute is TRUE, DHCP Client-to-Server messages
        to points\n   of attachment with this attribute will trigger creation of bindings\n
        \  based on the DHCP Snooping Process described in Section 6.  If it is\n
        \  FALSE, either the Trust attribute must be TRUE (so that bindings\n   become
        irrelevant) or another SAVI mechanism such as FCFS SAVI must\n   be used on
        the point of attachment.\n   The DHCP-Snooping attribute is configured on
        the DHCP client's point\n   of attachment.  This attribute can be also used
        on the attachments to\n   protected non-SAVI devices that are used by DHCP
        clients.  In\n   Figure 1, the attachment from Client A to SAVI Device A,
        the\n   attachment from Client B to SAVI Device B, and the attachment from\n
        \  Non-SAVI Device 2 to SAVI Device A can be configured with this\n   attribute.\n"
      title: 4.2.3.  DHCP-Snooping Attribute
    - contents:
      - "4.2.4.  Data-Snooping Attribute\n   The \"Data-Snooping Attribute\" is a
        Boolean attribute.  It indicates\n   whether data packets from the corresponding
        point of attachment may\n   trigger the binding setup procedure.\n   Data
        packets from points of attachment with this attribute may\n   trigger the
        setup of bindings.  SAVI devices will set up bindings on\n   points of attachment
        with this attribute based on the data-triggered\n   process described in Section
        7.\n   If the DHCP-Snooping attribute is configured on a point of\n   attachment,
        the bindings on this attachment are set up based on DHCP\n   message snooping.
        \ However, in some scenarios, a DHCP client may use\n   a DHCP address without
        the DHCP address assignment procedure being\n   performed on its current attachment.
        \ For such attached devices, the\n   Data Snooping Process, which is described
        in Section 7, is necessary.\n   This attribute is configured on such attachments.
        \ The usage of this\n   attribute is further discussed in Section 7.\n   Since
        some networks require DHCP deployment and others avoid it,\n   there is no
        obvious universal default value for the Data-Snooping\n   attribute.  Hence,
        the Data-Snooping attribute should default to\n   FALSE, and a mechanism should
        be implemented to conveniently set it\n   to TRUE on all points of attachment
        for which the Trust attribute is\n   FALSE.\n"
      title: 4.2.4.  Data-Snooping Attribute
    - contents:
      - "4.2.5.  Validating Attribute\n   The \"Validating Attribute\" is a Boolean
        attribute.  It indicates\n   whether packets from the corresponding attachment
        will have their IP\n   source addresses validated based on binding entries
        on the\n   attachment.\n   If it is TRUE, packets coming from attachments
        with this attribute\n   will be validated based on binding entries on the
        attachment as\n   specified in Section 8.  If it is FALSE, they will not.
        \ Since the\n   binding table is used in common with other SAVI algorithms,
        it merely\n   signifies whether the check will be done, not whether it will
        be done\n   for SAVI-DHCP originated bindings.\n   This attribute is by default
        the inverse of the Trust attribute;\n   source addresses on untrusted links
        are validated by default.  It MAY\n   be set FALSE by the administration.\n
        \  The expected use case is when SAVI is used to monitor but not block\n   forged
        transmissions.  The network manager, in that case, may set the\n   DHCP-Snooping
        and/or Data-Snooping attribute TRUE but the Validating\n   attribute FALSE.\n"
      title: 4.2.5.  Validating Attribute
    - contents:
      - "4.2.6.  Table of Mutual Exclusions\n   Different types of attributes may
        indicate mutually exclusive actions\n   on a packet.  Mutually exclusive attributes
        MUST NOT be set TRUE on\n   the same attachment.  The compatibility of different
        attributes is\n   listed in Figure 2.  Note that although Trust and DHCP-Trust
        are\n   compatible, there is no need to configure DHCP-Trust to TRUE on an\n
        \  attachment with Trust attribute TRUE.\n    +----------+----------+----------+----------+----------+----------+\n
        \   |          |          |          | DHCP-    | Data-    |          |\n
        \   |          |  Trust   |DHCP-Trust| Snooping | Snooping |Validating|\n
        \   +----------+----------+----------+----------+----------+----------+\n
        \   |          |          |          | mutually | mutually | mutually |\n
        \   |  Trust   |    -     |compatible| exclusive| exclusive| exclusive|\n
        \   +----------+----------+----------+----------+----------+----------+\n
        \   |          |          |          |          |          |          |\n
        \   |DHCP-Trust|compatible|    -     |compatible|compatible|compatible|\n
        \   +----------+----------+----------+----------+----------+----------+\n
        \   |DHCP-     |mutually  |          |          |          |          |\n
        \   |Snooping  |exclusive |compatible|     -    |compatible|compatible|\n
        \   +----------+----------+----------+----------+----------+----------+\n
        \   |Data-     |mutually  |          |          |          |          |\n
        \   |Snooping  |exclusive |compatible|compatible|    -     |compatible|\n
        \   +----------+----------+----------+----------+----------+----------+\n
        \   |          |mutually  |          |          |          |          |\n
        \   |Validating|exclusive |compatible|compatible|compatible|    -     |\n
        \   +----------+----------+----------+----------+----------+----------+\n
        \                  Figure 2: Table of Mutual Exclusions\n"
      title: 4.2.6.  Table of Mutual Exclusions
    title: 4.2.  SAVI Binding Type Attributes
  - contents:
    - '4.3.  Perimeter

      '
    - contents:
      - "4.3.1.  SAVI-DHCP Perimeter Overview\n   SAVI devices form a perimeter separating
        trusted and untrusted\n   regions of a network, as FCFS SAVI does (Section
        2.5 of [RFC6620]).\n   The perimeter is primarily designed for scalability.
        \ It has two\n   implications.\n   o  SAVI devices only need to establish
        bindings for directly attached\n      clients, or clients indirectly attached
        through a non-SAVI\n      protected device, rather than all of the clients
        in the network.\n   o  Each SAVI device only needs to validate the source
        addresses in\n      traffic from clients attached to it, without checking
        all the\n      traffic passing by.\n   Consider the example in Figure 1.  The
        protection perimeter is formed\n   by SAVI Devices A, B, and C.  In this case,
        SAVI Device B does not\n   create a binding for Client A.  However, because
        SAVI Device A\n   filters spoofed traffic from Client A, SAVI Device B can
        avoid\n   receiving spoofed traffic from Client A.\n   The perimeter in SAVI-DHCP
        is not only a perimeter for data packets\n   but also a perimeter for DHCP
        messages.  DHCP server response\n   messages incoming across the perimeter
        will be dropped (Section 8).\n   The placement of the DHCP relay and DHCP
        server, which are not\n   involved in [RFC6620], is related to the construction
        of the\n   perimeter.  The requirement on the placement and configuration
        of the\n   DHCP relay and DHCP server is discussed in Section 4.3.3.\n"
      title: 4.3.1.  SAVI-DHCP Perimeter Overview
    - contents:
      - "4.3.2.  SAVI-DHCP Perimeter Configuration Guideline\n   A perimeter separating
        trusted and untrusted regions of the network\n   is formed as follows:\n   (1)
        \ Configure the Validating and DHCP-Snooping attributes TRUE on\n        the
        direct attachments of all DHCP clients.\n   (2)  Configure the Validating
        and DHCP-Snooping attributes TRUE on\n        the indirect attachments of
        all DHCP clients (i.e., DHCP clients\n        on protected links).\n   (3)
        \ Configure the Trust attribute TRUE on the attachments to other\n        SAVI
        devices.\n   (4)  If a non-SAVI device, or a number of connected non-SAVI
        devices,\n        are attached only to SAVI devices, set the Trust attribute
        TRUE\n        on their attachments.\n   (5)  Configure the DHCP-Trust attribute
        TRUE on the direct\n        attachments to trusted DHCP relays and servers.\n
        \  In this way, the points of attachments with the Validating attribute\n
        \  TRUE (and generally together with attachments of unprotected devices)\n
        \  on SAVI devices can form a perimeter separating DHCP clients and\n   trusted
        devices.  Data packet checks are only performed on the\n   perimeter.  The
        perimeter is also a perimeter for DHCP messages.  The\n   DHCP-Trust attribute
        is only TRUE on links inside the perimeter.\n   Only DHCP Server-to-Client
        messages originated within the perimeter\n   are trusted.\n"
      title: 4.3.2.  SAVI-DHCP Perimeter Configuration Guideline
    - contents:
      - "4.3.3.  On the Placement of the DHCP Server and Relay\n   As a result of
        the configuration guidelines, SAVI devices only trust\n   DHCP Server-to-Client
        messages originated inside the perimeter.\n   Thus, the trusted DHCP relays
        and DHCP servers must be placed within\n   the perimeter.  DHCP Server-to-Client
        messages will be filtered on\n   the perimeter.  Server-to-Relay messages
        will not be filtered, as\n   they are within the perimeter.  In this way,
        DHCP Server-to-Client\n   messages from bogus DHCP servers are filtered on
        the perimeter,\n   having entered through untrusted points of attachment.
        \ The SAVI\n   devices are protected from forged DHCP messages.\n   DHCP Server-to-Client
        messages arriving at the perimeter from outside\n   the perimeter are not
        trusted.  There is no distinction between a\n   DHCP server owned and operated
        by the correct administration but\n   outside the SAVI perimeter and a bogus
        DHCP server.  For example, in\n   Figure 1, DHCP Server A is valid, but it
        is attached to Non-SAVI\n   Device 1.  A bogus DHCP server is also attached
        to Non-SAVI Device 1.\n   While one could imagine a scenario in which the
        valid one had a\n   statistically configured port number and MAC address,
        and therefore a\n   binding, by default SAVI-DHCP cannot distinguish whether
        a message\n   received from the port of Non-SAVI Device 1 is from DHCP Server
        A or\n   the bogus DHCP server.  If DHCP Server A is contained in the\n   perimeter,
        Non-SAVI Device 1 will also be contained in the perimeter.\n   Thus, DHCP
        Server A cannot be contained within the perimeter apart\n   from manual configuration
        of the binding anchor.\n   Another consideration on the placement is that
        if the DHCP server/\n   relay is not inside the perimeter, the SAVI devices
        may not be able\n   to set up bindings correctly because the SAVI devices
        may not be on\n   the path between the clients and the server/relay, or the
        DHCP\n   messages are encapsulated (e.g., Relay-reply and Relay-forward).\n"
      title: 4.3.3.  On the Placement of the DHCP Server and Relay
    - contents:
      - "4.3.4.  An Alternative Deployment\n   In common deployment practice, the
        traffic from the unprotected\n   network is treated as trustworthy, which
        is to say that it is not\n   filtered.  In such a case, the Trust attribute
        can be set TRUE on the\n   unprotected link.  If non-SAVI devices, or a number
        of connected non-\n   SAVI devices, are only attached to SAVI devices and
        unprotected\n   devices, their attachment to SAVI devices can have the Trust\n
        \  attribute set TRUE.  Then an unclosed perimeter will be formed, as\n   illustrated
        in Figure 3.\n           |             .             .           Protection
        |\n           |             |             |           Perimeter  |\n           |
        \            |             |                      |\n           | Unprotected
        |             | Unprotected          |\n           | Link        |             |
        Link                 |\n           |             |             |                      |\n
        \          |             |             |                      |\n           |
        \       +----+---+    +----+---+    +--------+    |\n           |        |SAVI
        \   +----+Non-SAVI+----+SAVI    |    |\n           |        |Device  |    |Device
        \ |    |Device  |    |\n           |        +----+---+    +--------+    +----+---+
        \   |\n           |             |                           |        |\n           \\_____________+___________________________+________/\n
        \                        |                           |\n                         |
        \                          |\n                    +--------+                  +--------+\n
        \                   |DHCP    |                  |DHCP    |\n                    |Client
        \ |                  |Client  |\n                    +--------+                  +--------+\n
        \              Figure 3: Alternative Perimeter Configuration\n"
      title: 4.3.4.  An Alternative Deployment
    - contents:
      - "4.3.5.  Considerations regarding Binding Anchors\n   The strength of this
        binding-based mechanism depends on the strength\n   of the binding anchor.
        \ The sample binding anchors in [RFC7039] have\n   the property in which they
        associate an IP address with a direct\n   physical or secure virtual interface
        such as a switch port, a\n   subscriber association, or a security association.
        \ In addition,\n   especially in the case where a protected non-SAVI device
        such as a\n   desktop switch or a hub is between the client and SAVI devices,
        they\n   MAY be extended to also include a MAC address or other link-layer\n
        \  attribute.  In short, a binding anchor is intended to associate an IP\n
        \  address with something unspoofable that identifies a single-client\n   system
        or one of its interfaces; this may be a physical or virtual\n   interface
        or that plus disambiguating link-layer information.\n   If the binding anchor
        is spoofable, such as a plain MAC address, or\n   non-exclusive, such as a
        switch port extended using a non-SAVI\n   device, an attacker can use a forged
        binding anchor to evade\n   validation.  Indeed, using a binding anchor that
        can be easily\n   spoofed can lead to worse outcomes than allowing spoofed
        IP traffic.\n   Thus, a SAVI device MUST use a non-spoofable and exclusive
        binding\n   anchor.\n"
      title: 4.3.5.  Considerations regarding Binding Anchors
    title: 4.3.  Perimeter
  - contents:
    - "4.4.  Other Device Configuration\n   In addition to a possible binding anchor
      configuration specified in\n   Section 4.2, an implementation has the following
      configuration\n   requirements:\n   (1)  Address configuration.  For DHCPv4:
      the SAVI device MUST have an\n        IPv4 address.  For DHCPv6: the client
      of a SAVI device MUST have\n        a link-local address; when the DHCPv6 server
      is not on the same\n        link as the SAVI device, the SAVI device MUST also
      have an IPv6\n        address of at least the same scope as the DHCPv6 Server.\n
      \  (2)  DHCP server address configuration: a SAVI device MUST store the\n        list
      of the DHCP server addresses that it could contact during a\n        leasequery
      process.\n   (3)  A SAVI device may also require security parameters, such as\n
      \       preconfigured keys to establish a secure connection for the\n        leasequery
      process [RFC4388] [RFC5007] connection.\n"
    title: 4.4.  Other Device Configuration
  title: 4.  Deployment Scenario and Configuration
- contents:
  - "5.  Binding State Table (BST)\n   The Binding State Table, which may be implemented
    centrally in the\n   switch or distributed among its ports, is used to contain
    the\n   bindings between the IP addresses assigned to the attachments and the\n
    \  corresponding binding anchors of the attachments.  Note that in this\n   description,
    there is a binding entry for each IPv4 or IPv6 address\n   associated with each
    binding anchor, and there may be several of each\n   such address, especially
    if the port is extended using a protected\n   non-SAVI device.  Each binding entry
    has six fields:\n   o  Binding Anchor (listed as \"Anchor\" in subsequent figures):
    the\n      binding anchor, i.e., one or more physical and/or link-layer\n      properties
    of the attachment.\n   o  IP Address (listed as \"Address\" in subsequent figures):
    the IPv4\n      or IPv6 address assigned to the attachment by DHCP.\n   o  State:
    the state of the binding.  Possible values of this field\n      are listed in
    Sections 6.2 and 7.3.\n   o  Lifetime: the remaining seconds of the binding.  Internally,
    this\n      MAY be stored as the timestamp value at which the lifetime\n      expires.\n
    \  o  Transaction ID (TID): the Transaction ID [RFC2131] [RFC3315] of\n      the
    corresponding DHCP transaction.  The TID field is used to\n      associate DHCP
    Server-to-Client messages with corresponding\n      binding entries.\n   o  Timeouts:
    the number of timeouts that expired in the current state\n      (only used in
    the Data Snooping Process; see Section 7).\n   The IA is not present in the BST
    for three reasons:\n   o  The lease of each address in one IA is assigned separately.\n
    \  o  When the binding is set up based on data snooping, the IA cannot\n      be
    recovered from the leasequery protocol.\n   o  DHCPv4 does not define an IA.\n
    \  An example of such a table is shown in Figure 4.\n    +---------+----------+-----------+-----------+--------+----------+\n
    \   | Anchor  | Address  | State     | Lifetime  | TID    | Timeouts |\n    +---------+----------+-----------+-----------+--------+----------+\n
    \   | Port_1  | IP_1     | BOUND     |  65535    | TID_1  |     0    |\n    +---------+----------+-----------+-----------+--------+----------+\n
    \   | Port_1  | IP_2     | BOUND     |  10000    | TID_2  |     0    |\n    +---------+----------+-----------+-----------+--------+----------+\n
    \   | Port_2  | IP_3     | INIT_BIND |      1    | TID_3  |     0    |\n    +---------+----------+-----------+-----------+--------+----------+\n
    \                  Figure 4: Example Binding State Table\n"
  title: 5.  Binding State Table (BST)
- contents:
  - "6.  DHCP Snooping Process\n   This section specifies the process of setting up
    bindings based on\n   DHCP snooping.  This process is illustrated using a state
    machine.\n"
  - contents:
    - "6.1.  Rationale\n   The rationale of the DHCP Snooping Process is that if a
      DHCP client\n   is legitimately using a DHCP-assigned address, the DHCP address\n
      \  assignment procedure that assigns the IP address to the client must\n   have
      been performed via the client's point of attachment.  This\n   assumption works
      when the SAVI device is always on the path(s) from\n   the DHCP client to the
      DHCP server(s)/relay(s).  Without considering\n   the movement of DHCP clients,
      the SAVI device should be the cut\n   vertex whose removal will separate the
      DHCP client and the remaining\n   network containing the DHCP server(s)/relay(s).
      \ For most of the\n   networks whose topologies are simple, it is possible to
      deploy this\n   SAVI function at proper devices to meet this requirement.\n
      \  However, if there are multiple paths from a DHCP client to the DHCP\n   server
      and the SAVI device is only on one of them, there is an\n   obvious failure
      case: the SAVI device may not be able to snoop the\n   DHCP procedure.  Host
      movement may also make this requirement\n   difficult to meet.  For example,
      when a DHCP client moves from one\n   attachment to another attachment in the
      same network, it may fail to\n   reinitialize its interface or send a Confirm
      message because of\n   incomplete protocol implementation.  Thus, there can
      be scenarios in\n   which only performing this DHCP Snooping Process is insufficient
      to\n   set up bindings for all the valid DHCP addresses.  These exceptions\n
      \  and the solutions are discussed in Section 7.\n"
    title: 6.1.  Rationale
  - contents:
    - "6.2.  Binding States Description\n   The following binding states are present
      in this process and the\n   corresponding state machine:\n   NO_BIND: No binding
      has been set up.\n   INIT_BIND: A potential binding has been set up.\n   BOUND:
      The binding has been set up.\n"
    title: 6.2.  Binding States Description
  - contents:
    - "6.3.  Events\n   This section describes events in this process and the corresponding\n
      \  state machine transitions.  The DHCP message categories (e.g., DHCPv4\n   Discover)
      defined in Section 3 are used extensively in the\n   definitions of events and
      elsewhere in the state machine definition.\n   If an event will trigger the
      creation of a new binding entry, the\n   binding entry limit on the binding
      anchor MUST NOT be exceeded.\n"
    - contents:
      - "6.3.1.  Timer Expiration Event\n   EVE_ENTRY_EXPIRE: The lifetime of a binding
        entry expires.\n"
      title: 6.3.1.  Timer Expiration Event
    - contents:
      - "6.3.2.  Control Message Arriving Events\n   EVE_DHCP_REQUEST: A DHCPv4 Request
        or a DHCPv6 Request message is\n   received.\n   EVE_DHCP_CONFIRM: A DHCPv6
        Confirm message is received.\n   EVE_DHCP_REBOOT: A DHCPv4 Reboot message
        is received.\n   EVE_DHCP_REBIND: A DHCPv4 Rebind or a DHCPv6 Rebind message
        is\n   received.\n   EVE_DHCP_RENEW: A DHCPv4 Renew or a DHCPv6 Renew message
        is received.\n   EVE_DHCP_SOLICIT_RC: A DHCPv6 Solicitation message with the
        Rapid\n   Commit option is received.\n   EVE_DHCP_REPLY: A DHCPv4 ACK or a
        DHCPv6 Reply message is received.\n   EVE_DHCP_DECLINE: A DHCPv4 Decline or
        a DHCPv6 Decline message is\n   received.\n   EVE_DHCP_RELEASE: A DHCPv4 Release
        or a DHCPv6 Release message is\n   received.\n   EVE_DHCP_LEASEQUERY: A successful
        DHCPv6 LEASEQUERY-REPLY (refer to\n   Section 4.3.3 of [RFC5007]) is received.\n
        \  Note: the events listed here do not cover all the DHCP messages in\n   Section
        3.  The messages that do not really determine address usage\n   (DHCPv4 Discover,
        DHCPv4 Inform, DHCPv6 Solicit without Rapid Commit,\n   DHCPv6 Information-Request,
        DHCPv4 Offer, DHCPv6 Advertise, and\n   DHCPv6 Reconfigure) and that are not
        necessary to snoop (DHCPv4\n   Negative Acknowledgment (NAK); refer to Section
        6.4.2.3) are not\n   included.  Note also that DHCPv4 DHCPLEASEQUERY is not
        used in the\n   DHCP Snooping Process to avoid confusion with Section 7.  Also,
        since\n   the LEASEQUERY should have been originated by the SAVI device itself,\n
        \  the destination check should verify that the message is directed to\n   this
        SAVI device, and it should not be forwarded once it has been\n   processed
        here.\n   Moreover, only if a DHCP message can pass the following checks,
        the\n   corresponding event is regarded as a valid event:\n   o  Attribute
        check: the DHCP Server-to-Client messages and\n      LEASEQUERY-REPLY should
        be from attachments with the DHCP-Trust\n      attribute; the DHCP Client-to-Server
        messages should be from\n      attachments with the DHCP-Snooping attribute.\n
        \  o  Destination check: the DHCP Server-to-Client messages should be\n      destined
        to attachments with the DHCP-Snooping attribute.  This\n      check is performed
        to ensure the binding is set up on the SAVI\n      device that is nearest
        to the destination client.\n   o  Binding anchor check: the DHCP Client-to-Server
        messages that may\n      trigger modification or removal of an existing binding
        entry must\n      have a matching binding anchor with the corresponding entry.\n
        \  o  TID check: the DHCP Server-to-Client/Client-to-Server messages\n      that
        may cause modification of existing binding entries must have\n      a matched
        TID with the corresponding entry.  Note that this check\n      is not performed
        on LEASEQUERY and LEASEQUERY-REPLY messages as\n      they are exchanged between
        the SAVI devices and the DHCP servers.\n      Besides, this check is not performed
        on DHCP Renew/Rebind\n      messages.\n   o  Binding limitation check: the
        DHCP messages must not cause new\n      binding setup on an attachment whose
        binding entry limitation has\n      been reached (refer to Section 11.5).\n
        \  o  Address check: the source address of the DHCP messages should pass\n
        \     the check specified in Section 8.2.\n   On receiving a DHCP message
        without triggering a valid event, the\n   state will not change, and the actions
        will not be performed.  Note\n   that if a message does not trigger a valid
        event but it can pass the\n   checks in Section 8.2, it MUST be forwarded.\n"
      title: 6.3.2.  Control Message Arriving Events
    title: 6.3.  Events
  - contents:
    - "6.4.  The State Machine of DHCP Snooping Process\n   This section specifies
      state transitions and their corresponding\n   actions.\n"
    - contents:
      - '6.4.1.  Initial State: NO_BIND

        '
      - contents:
        - "6.4.1.1.  Event: EVE_DHCP_REQUEST - A DHCPv4 Request or a DHCPv6 Request\n
          \         message is received\n   The SAVI device MUST forward the message.\n
          \  The SAVI device will generate an entry in the BST.  The Binding\n   Anchor
          field is set to the binding anchor of the attachment from\n   which the
          message is received.  The State field is set to INIT_BIND.\n   The Lifetime
          field is set to be MAX_DHCP_RESPONSE_TIME.  The TID\n   field is set to
          the TID of the message.  If the message is DHCPv4\n   Request, the Address
          field can be set to the address to request,\n   i.e., the 'requested IP
          address'.  An example of the entry is\n   illustrated in Figure 5.\n   +--------+-------+---------+-----------------------+-----+----------+\n
          \  | Anchor |Address| State   | Lifetime              | TID | Timeouts |\n
          \  +--------+-------+---------+-----------------------+-----+----------+\n
          \  | Port_1 |       |INIT_BIND|MAX_DHCP_RESPONSE_TIME | TID |     0    |\n
          \  +--------+-------+---------+-----------------------+-----+----------+\n
          \      Figure 5: Binding Entry in BST on Initialization Triggered by\n                   Request/Rapid
          Commit/Reboot Messages\n   Resulting state: INIT_BIND - A potential binding
          has been set up.\n"
        title: '6.4.1.1.  Event: EVE_DHCP_REQUEST - A DHCPv4 Request or a DHCPv6 Request'
      - contents:
        - "6.4.1.2.  Event: EVE_DHCP_REBOOT - A DHCPv4 Reboot message is received\n
          \  The SAVI device MUST forward the message.\n   The SAVI device will generate
          an entry in the BST.  The Binding\n   Anchor field is set to the binding
          anchor of the attachment from\n   which the message is received.  The State
          field is set to INIT_BIND.\n   The Lifetime field is set to be MAX_DHCP_RESPONSE_TIME.
          \ The TID\n   field is set to the TID of the message.  If the message is
          DHCPv4\n   Reboot, the Address field can be set to the address to request,
          i.e.,\n   the 'requested IP address'.  An example of the entry is illustrated\n
          \  in Figure 5.\n   Resulting state: INIT_BIND - A potential binding has
          been set up.\n"
        title: '6.4.1.2.  Event: EVE_DHCP_REBOOT - A DHCPv4 Reboot message is received'
      - contents:
        - "6.4.1.3.  Event: EVE_DHCP_SOLICIT_RC - A DHCPv6 Solicitation message\n
          \         with the Rapid Commit option is received\n   The SAVI device MUST
          forward the message.\n   The SAVI device will generate an entry in the BST.
          \ The Binding\n   Anchor field is set to the binding anchor of the attachment
          from\n   which the message is received.  The State field is set to INIT_BIND.\n
          \  The Lifetime field is set to be MAX_DHCP_RESPONSE_TIME.  The TID\n   field
          is set to the TID of the message.  An example of the entry is\n   illustrated
          in Figure 5.\n   Resulting state: INIT_BIND - A potential binding has been
          set up.\n"
        title: '6.4.1.3.  Event: EVE_DHCP_SOLICIT_RC - A DHCPv6 Solicitation message'
      - contents:
        - "6.4.1.4.  Event: EVE_DHCP_CONFIRM - A DHCPv6 Confirm message is received\n
          \  The SAVI device MUST forward the message.\n   The SAVI device will generate
          corresponding entries in the BST for\n   each address in each Identity Association
          (IA) option of the Confirm\n   message.  The Binding Anchor field is set
          to the binding anchor of\n   the attachment from which the message is received.
          \ The State field\n   is set to INIT_BIND.  The Lifetime field is set to
          be\n   MAX_DHCP_RESPONSE_TIME.  The TID field is set to the TID of the\n
          \  message.  The Address field is set to the address(es) to confirm.  An\n
          \  example of the entries is illustrated in Figure 6.\n   +--------+-------+---------+-----------------------+-----+----------+\n
          \  | Anchor |Address| State   | Lifetime              | TID | Timeouts |\n
          \  +--------+-------+---------+-----------------------+-----+----------+\n
          \  | Port_1 | Addr1 |INIT_BIND|MAX_DHCP_RESPONSE_TIME | TID |    0     |\n
          \  +--------+-------+---------+-----------------------+-----+----------+\n
          \  | Port_1 | Addr2 |INIT_BIND|MAX_DHCP_RESPONSE_TIME | TID |    0     |\n
          \  +--------+-------+---------+-----------------------+-----+----------+\n
          \   Figure 6: Binding Entry in BST on Confirm-Triggered Initialization\n
          \  Resulting state: INIT_BIND - A potential binding has been set up.\n"
        title: '6.4.1.4.  Event: EVE_DHCP_CONFIRM - A DHCPv6 Confirm message is received'
      - contents:
        - "6.4.1.5.  Events That Cannot Happen in the NO_BIND State\n   o  EVE_ENTRY_EXPIRE:
          The lifetime of a binding entry expires\n   o  EVE_DHCP_REBIND: A DHCPv4
          Rebind or a DHCPv6 Rebind message is\n      received\n   o  EVE_DHCP_RENEW:
          A DHCPv4 Renew or a DHCPv6 Renew message is\n      received\n   o  EVE_DHCP_REPLY:
          A DHCPv4 ACK or a DHCPv6 Reply message is received\n   o  EVE_DHCP_DECLINE:
          A DHCPv4 Decline or a DHCPv6 Decline message is\n      received\n   o  EVE_DHCP_RELEASE:
          A DHCPv4 Release or a DHCPv6 Release message is\n      received\n   o  EVE_DHCP_LEASEQUERY:
          A successful DHCPv6 LEASEQUERY-REPLY is\n      received\n   These cannot
          happen because they are each something that happens\n   AFTER a binding
          has been created.\n"
        title: 6.4.1.5.  Events That Cannot Happen in the NO_BIND State
      title: '6.4.1.  Initial State: NO_BIND'
    - contents:
      - '6.4.2.  Initial State: INIT_BIND

        '
      - contents:
        - "6.4.2.1.  Event: EVE_DHCP_REPLY - A DHCPv4 ACK or a DHCPv6 Reply message\n
          \         is received\n   The message MUST be forwarded to the corresponding
          client.\n   If the message is DHCPv4 ACK, the Address field of the corresponding\n
          \  entry (i.e., the binding entry whose TID is the same as the message)\n
          \  is set to the address in the message (i.e., 'yiaddr' in DHCPv4 ACK).\n
          \  The Lifetime field is set to the sum of the lease time in the ACK\n   message
          and MAX_DHCP_RESPONSE_TIME.  The State field is changed to\n   BOUND.\n
          \  If the message is DHCPv6 Reply, note the following cases:\n   1.  If
          the status code is not \"Success\", no modification of\n       corresponding
          entries will be made.  Corresponding entries will\n       expire automatically
          if no \"Success\" Reply is received during the\n       lifetime.  The entries
          are not removed immediately because the\n       client may be able to use
          the addresses whenever a \"Success\"\n       Reply is received (\"If the
          client receives any Reply messages\n       that do not indicate a NotOnLink
          status, the client can use the\n       addresses in the IA and ignore any
          messages that indicate a\n       NotOnLink status\" [RFC3315]).\n   2.  If
          the status code is \"Success\", the SAVI device checks the IA\n       options
          in the Reply message.\n       A.  If there are IA options in the Reply message,
          the SAVI device\n           checks each IA option.  When the first assigned
          address is\n           found, the Address field of the binding entry with
          a matched\n           TID is set to the address.  The Lifetime field is
          set to the\n           sum of the lease time in the Reply message and\n
          \          MAX_DHCP_RESPONSE_TIME.  The State field is changed to BOUND.\n
          \          If there is more than one address assigned in the message,\n
          \          new binding entries are set up for the remaining address\n           assigned
          in the IA options.  An example of the entries is\n           illustrated
          in Figure 8.  SAVI devices do not specially\n           process IA options
          with a NoAddrsAvail status because there\n           should be no address
          contained in such IA options.\n       B.  Otherwise, the DHCP Reply message
          is in response to a Confirm\n           message.  The state of the binding
          entries with a matched TID\n           is changed to BOUND.  Because [RFC3315]
          does not require the\n           lease time of addresses to be contained
          in the Reply message,\n           the SAVI device SHOULD send a LEASEQUERY
          [RFC5007] message\n           querying by IP address to the All_DHCP_Servers
          multicast\n           address [RFC3315] or a list of configured DHCP server\n
          \          addresses.  The LEASEQUERY message is generated for each IP\n
          \          address if multiple addresses are confirmed.  The lifetime of\n
          \          corresponding entries is set to 2*MAX_LEASEQUERY_DELAY.  If\n
          \          there is no response message after MAX_LEASEQUERY_DELAY, send\n
          \          the LEASEQUERY message again.  An example of the entries is\n
          \          illustrated in Figure 7.  If the SAVI device does not send\n
          \          the LEASEQUERY message, a preconfigured lifetime\n           DHCP_DEFAULT_LEASE
          MUST be set on the corresponding entry.\n           (Note: it is RECOMMENDED
          to use T1 configured on DHCP servers\n           as the DHCP_DEFAULT_LEASE.)\n
          \  Note: the SAVI devices do not check if the assigned addresses are\n   duplicated
          because in SAVI-DHCP scenarios, the DHCP servers are the\n   only source
          of valid addresses.  However, the DHCP servers should be\n   configured
          to make sure no duplicated addresses are assigned.\n   +--------+-------+-------+------------------------+-----+----------+\n
          \  | Anchor |Address| State | Lifetime               | TID | Timeouts |\n
          \  +--------+-------+-------+------------------------+-----+----------+\n
          \  | Port_1 | Addr1 | BOUND | 2*MAX_LEASEQUERY_DELAY | TID |    0     |\n
          \  +--------+-------+-------+------------------------+-----+----------+\n
          \  | Port_1 | Addr2 | BOUND | 2*MAX_LEASEQUERY_DELAY | TID |    0     |\n
          \  +--------+-------+-------+------------------------+-----+----------+\n
          \     Figure 7: From INIT_BIND to BOUND on DHCP Reply in Response to\n                                  Confirm\n
          \  Transition\n   +--------+-------+-------+------------------------+-----+----------+\n
          \  | Anchor |Address| State | Lifetime               | TID | Timeouts |\n
          \  +--------+-------+-------+------------------------+-----+----------+\n
          \  | Port_1 | Addr1 | BOUND |Lease time+             | TID |    0     |\n
          \  |        |       |       |MAX_DHCP_RESPONSE_TIME  |     |          |\n
          \  +--------+-------+-------+------------------------+-----+----------+\n
          \  | Port_1 | Addr2 | BOUND |Lease time+             | TID |    0     |\n
          \  |        |       |       |MAX_DHCP_RESPONSE_TIME  |     |          |\n
          \  +--------+-------+-------+------------------------+-----+----------+\n
          \     Figure 8: From INIT_BIND to BOUND on DHCP Reply in Response to\n                                  Request\n
          \  Resulting state: BOUND - The binding has been set up.\n"
        title: '6.4.2.1.  Event: EVE_DHCP_REPLY - A DHCPv4 ACK or a DHCPv6 Reply message'
      - contents:
        - "6.4.2.2.  Event: EVE_ENTRY_EXPIRE - The lifetime of a binding entry\n          expires\n
          \  The entry MUST be deleted from the BST.\n   Resulting state: An entry
          that has been deleted from the BST may be\n   considered to be in the \"NO_BIND\"
          state - No binding has been set up.\n"
        title: '6.4.2.2.  Event: EVE_ENTRY_EXPIRE - The lifetime of a binding entry'
      - contents:
        - "6.4.2.3.  Events That Are Ignored in INIT_BIND\n   If no DHCP Server-to-Client
          messages that assign addresses or confirm\n   addresses are received, corresponding
          entries will expire\n   automatically.  Thus, other DHCP Server-to-Client
          messages (e.g.,\n   DHCPv4 NAK) are not specially processed.\n   As a result,
          the following events, should they occur, are ignored\n   until either a
          DHCPv4 ACK or a DHCPv6 Reply message is received or\n   the lifetime of
          the binding entry expires.\n   o  EVE_DHCP_REQUEST: A DHCPv4 Request or
          a DHCPv6 Request message is\n      received\n   o  EVE_DHCP_CONFIRM: A DHCPv6
          Confirm message is received\n   o  EVE_DHCP_REBOOT: A DHCPv4 Reboot message
          is received\n   o  EVE_DHCP_REBIND: A DHCPv4 Rebind or a DHCPv6 Rebind message
          is\n      received\n   o  EVE_DHCP_RENEW: A DHCPv4 Renew or a DHCPv6 Renew
          message is\n      received\n   o  EVE_DHCP_SOLICIT_RC: A DHCPv6 Solicitation
          message with the Rapid\n      Commit option is received\n   o  EVE_DHCP_DECLINE:
          A DHCPv4 Decline or a DHCPv6 Decline message is\n      received\n   o  EVE_DHCP_RELEASE:
          A DHCPv4 Release or a DHCPv6 Release message is\n      received\n   o  EVE_DHCP_LEASEQUERY:
          A successful DHCPv6 LEASEQUERY-REPLY is\n      received\n   In each case,
          the message MUST be forwarded.\n   Resulting state: INIT_BIND - A potential
          binding has been set up.\n"
        title: 6.4.2.3.  Events That Are Ignored in INIT_BIND
      title: '6.4.2.  Initial State: INIT_BIND'
    - contents:
      - '6.4.3.  Initial State: BOUND

        '
      - contents:
        - "6.4.3.1.  Event: EVE_ENTRY_EXPIRE - The lifetime of a binding entry\n          expires\n
          \  The entry MUST be deleted from the BST.\n   Resulting state: An entry
          that has been deleted from the BST may be\n   considered to be in the \"NO_BIND\"
          state - No binding has been set up.\n"
        title: '6.4.3.1.  Event: EVE_ENTRY_EXPIRE - The lifetime of a binding entry'
      - contents:
        - "6.4.3.2.  Event: EVE_DHCP_DECLINE - A DHCPv4 Decline or a DHCPv6 Decline\n
          \         message is received\n   The message MUST be forwarded.\n   First,
          the SAVI device gets all the addresses (\"Requested IP address\"\n   in
          DHCPv4 Decline, \"ciaddr\" in DHCPv4 Release, and addresses in all\n   the
          IA options of DHCPv6 Decline/Release) to decline/release in the\n   message.
          \ Then, the corresponding entries MUST be removed.\n   Resulting state in
          each relevant BST entry: An entry that has been\n   deleted from the BST
          may be considered to be in the \"NO_BIND\" state -\n   No binding has been
          set up.\n"
        title: '6.4.3.2.  Event: EVE_DHCP_DECLINE - A DHCPv4 Decline or a DHCPv6 Decline'
      - contents:
        - "6.4.3.3.  Event: EVE_DHCP_RELEASE - A DHCPv4 Release or a DHCPv6 Release\n
          \         message is received\n   The message MUST be forwarded.\n   First,
          the SAVI device gets all the addresses (\"Requested IP address\"\n   in
          DHCPv4 Decline, \"ciaddr\" in DHCPv4 Release, and addresses in all\n   the
          IA options of DHCPv6 Decline/Release) to decline/release in the\n   message.
          \ Then, the corresponding entries MUST be removed.\n   Resulting state in
          each relevant BST entry: An entry that has been\n   deleted from the BST
          may be considered to be in the \"NO_BIND\" state -\n   No binding has been
          set up.\n"
        title: '6.4.3.3.  Event: EVE_DHCP_RELEASE - A DHCPv4 Release or a DHCPv6 Release'
      - contents:
        - "6.4.3.4.  Event: EVE_DHCP_REBIND - A DHCPv4 Rebind or a DHCPv6 Rebind\n
          \         message is received\n   The message MUST be forwarded.\n   In
          such a case, a new TID will be used by the client.  The TID field\n   of
          the corresponding entries MUST be set to the new TID.  Note that\n   the
          TID check will not be performed on such messages.\n   Resulting state: BOUND:
          The binding has been set up.\n"
        title: '6.4.3.4.  Event: EVE_DHCP_REBIND - A DHCPv4 Rebind or a DHCPv6 Rebind'
      - contents:
        - "6.4.3.5.  Event: EVE_DHCP_RENEW - A DHCPv4 Renew or a DHCPv6 Renew\n          message
          is received\n   The message MUST be forwarded.\n   In such a case, a new
          TID will be used by the client.  The TID field\n   of the corresponding
          entries MUST be set to the new TID.  Note that\n   the TID check will not
          be performed on such messages.\n   Resulting state: BOUND: The binding has
          been set up.\n"
        title: '6.4.3.5.  Event: EVE_DHCP_RENEW - A DHCPv4 Renew or a DHCPv6 Renew'
      - contents:
        - "6.4.3.6.  Event: EVE_DHCP_REPLY - A DHCPv4 ACK or a DHCPv6 Reply message\n
          \         is received\n   The message MUST be forwarded.\n   The DHCP Reply
          messages received in current states should be in\n   response to DHCP Renew/Rebind.\n
          \  If the message is DHCPv4 ACK, the SAVI device updates the binding\n   entry
          with a matched TID, with the Lifetime field set to be the sum\n   of the
          new lease time and MAX_DHCP_RESPONSE_TIME, leaving the entry\n   in the
          BOUND state.\n   If the message is DHCPv6 Reply, the SAVI device checks
          each IA\n   Address option in each IA option.  For each:\n   1.  If the
          IA entry in the REPLY message has the status \"NoBinding\",\n       there
          is no address in the option, and no operation on an address\n       is performed.\n
          \  2.  If the valid lifetime of an IA Address option is 0, the binding\n
          \      entry with a matched TID and address is removed, leaving it\n       effectively
          in the NO_BIND state.\n   3.  Otherwise, set the Lifetime field of the binding
          entry with the\n       matched TID and address to be the sum of the new
          valid lifetime\n       and MAX_DHCP_RESPONSE_TIME, leaving the entry in
          the BOUND state.\n   Resulting state: NO_BIND or BOUND, as specified.\n"
        title: '6.4.3.6.  Event: EVE_DHCP_REPLY - A DHCPv4 ACK or a DHCPv6 Reply message'
      - contents:
        - "6.4.3.7.  Event: EVE_DHCP_LEASEQUERY - A successful DHCPv6\n          LEASEQUERY_REPLY
          is received\n   The message MUST be forwarded.\n   The message should be
          in response to the LEASEQUERY message sent in\n   Section 6.4.2.  The related
          binding entry can be determined based on\n   the address in the IA Address
          option in the LEASEQUERY-REPLY message.\n   The Lifetime field of the corresponding
          binding entry is set to the\n   sum of the lease time in the LEASEQUERY-REPLY
          message and\n   MAX_DHCP_RESPONSE_TIME.\n   Resulting state: BOUND: The
          binding has been set up.\n"
        title: '6.4.3.7.  Event: EVE_DHCP_LEASEQUERY - A successful DHCPv6'
      - contents:
        - "6.4.3.8.  Events Not Processed in the State BOUND\n   The following events
          are ignored if received while the indicated\n   entry is in the BOUND state.
          \ Any required action will be the result\n   of the next message in the
          client/server exchange.\n   o  EVE_DHCP_REQUEST: A DHCPv4 Request or a DHCPv6
          Request message is\n      received\n   o  EVE_DHCP_CONFIRM: A DHCPv6 Confirm
          message is received\n   o  EVE_DHCP_REBOOT: A DHCPv4 Reboot message is received\n
          \  o  EVE_DHCP_SOLICIT_RC: A DHCPv6 Solicitation message with the Rapid\n
          \     Commit option is received\n"
        title: 6.4.3.8.  Events Not Processed in the State BOUND
      title: '6.4.3.  Initial State: BOUND'
    - contents:
      - "6.4.4.  Table of State Machine\n   The main state transits are listed as
        follows.  Note that not all the\n   details are specified in the table and
        the diagram.\n   State       Event             Action                       Next
        State\n   ---------------------------------------------------------------------\n
        \  NO_BIND     RQ/RC/CF/RE       Generate entry                INIT_BIND\n
        \  INIT_BIND   RPL               Record lease time                 BOUND\n
        \                                (send leasequery if no lease)\n   INIT_BIND
        \  EVE_ENTRY_EXPIRE  Remove entry                    NO_BIND\n   BOUND       RLS/DCL
        \          Remove entry                    NO_BIND\n   BOUND       EVE_ENTRY_EXPIRE
        \ Remove entry                    NO_BIND\n   BOUND       RPL               Set
        new lifetime                  BOUND\n   BOUND       LQR               Record
        lease time                 BOUND\n                     Figure 9: State Transition
        Table\n   RQ:  EVE_DHCP_REQUEST\n   RC:  EVE_DHCP_SOLICIT_RC\n   CF:  EVE_DHCP_CONFIRM\n
        \  RE:  EVE_DHCP_REBOOT\n   RPL: EVE_DHCP_REPLY\n   RLS: EVE_DHCP_RELEASE\n
        \  DCL: EVE_DHCP_DECLINE\n   LQR: EVE_DHCP_LEASEQUERY\n                               +-------------+\n
        \                              |             |\n                      /--------+
        \  NO_BIND   |<--------\\\n                      |  ----->|             |
        \        |\n                      |  |     +-------------+         |EVE_DHCP_RELEASE\n
        \  EVE_DHCP_REQUEST   |  |                             |EVE_DHCP_DECLINE\n
        \  EVE_DHCP_CONFIRM   |  |EVE_ENTRY_EXPIRE             |EVE_ENTRY_EXPIRE\n
        \  EVE_DHCP_SOLICIT_RC|  |                             |\n   EVE_DHCP_REBOOT
        \   |  |                             |\n                      |  |                             |\n
        \                     |  |                             |\n                      v
        \ |                             |\n              +-------------+                      +------------+\n
        \             |             |    EVE_DHCP_REPLY   |            |\n              |
        \ INIT_BIND  --------------------->|    BOUND   |<-\\\n              |             |
        \                    |            |  |\n              +-------------+                     +------------+
        \ |\n                                                         |        |\n
        \                                                        \\--------/\n                                               EVE_DHCP_REPLY\n
        \                                              EVE_DHCP_LEASEQUERY\n                       Figure
        10: Diagram of Transit\n"
      title: 6.4.4.  Table of State Machine
    title: 6.4.  The State Machine of DHCP Snooping Process
  title: 6.  DHCP Snooping Process
- contents:
  - '7.  Data Snooping Process

    '
  - contents:
    - "7.1.  Scenario\n   The rationale of the DHCP Snooping Process specified in
      Section 6 is\n   that if a DHCP client's use of a DHCP address is legitimate,
      the\n   corresponding DHCP address assignment procedure must have been\n   finished
      during the attachment of the DHCP client.  This is the case\n   when the SAVI
      device is continuously on the path(s) from the DHCP\n   client to the DHCP server(s)/relay(s).
      \ However, there are two cases\n   in which this does not work:\n   o  Multiple
      paths: there is more than one feasible link-layer path\n      from the client
      to the DHCP server/relay, and the SAVI device is\n      not on every one of
      them.  The client may get its address through\n      one of the paths that does
      not pass through the SAVI device, but\n      packets from the client can travel
      on paths that pass through the\n      SAVI device, such as when the path through
      the link-layer network\n      changes.  Because the SAVI device could not snoop
      the DHCP packet\n      exchange procedure, the DHCP Snooping Process cannot
      set up the\n      corresponding binding.\n   o  Dynamic path: there is only
      one feasible link-layer path from the\n      client to the DHCP server/relay,
      but the path is dynamic due to\n      topology change (for example, some link
      becomes broken due to\n      failure or some planned change) or link-layer path
      change.  This\n      situation also covers the local-link movement of clients
      without\n      the address confirm/reconfiguration process.  For example, a
      host\n      changes its attached switch port in a very short time.  In such\n
      \     cases, the DHCP Snooping Process will not set up the corresponding\n      binding.\n
      \  The Data Snooping Process can avoid the permanent blocking of\n   legitimate
      traffic in case one of these two exceptions occurs.  This\n   process is performed
      on attachments with the Data-Snooping attribute.\n   Data packets without a
      matching binding entry may trigger this\n   process to set up bindings.\n   Snooping
      data traffic introduces a considerable burden on the\n   processor and ASIC-to-Processor
      bandwidth of SAVI devices.  Because\n   of the overhead of this process, the
      implementation of this process\n   is OPTIONAL.  This function SHOULD be enabled
      unless the\n   implementation is known to be used in the scenarios without the
      above\n   exceptions.  For example, if the implementation is to be used in\n
      \  networks with tree topology and without host local-link movement,\n   there
      is no need to implement this process in such scenarios.\n   This process is
      not intended to set up a binding whenever a data\n   packet without a matched
      binding entry is received.  Instead,\n   unmatched data packets trigger this
      process probabilistically, and\n   generally a number of unmatched packets will
      be discarded before the\n   binding is set up.  The parameter(s) of this probabilistic
      process\n   SHOULD be configurable, defaulting to a situation where data snooping\n
      \  is disabled.\n"
    title: 7.1.  Scenario
  - contents:
    - "7.2.  Rationale\n   This process makes use of NS/ARP and DHCP Leasequery to
      set up\n   bindings.  If an address is not used by another client in the\n   network,
      and the address has been assigned in the network, the\n   address can be bound
      with the binding anchor of the attachment from\n   which the unmatched packet
      is received.\n   The Data Snooping Process provides an alternative path for
      binding\n   entries to reach the BOUND state in the exceptional cases explained\n
      \  in Section 7.1 when there are no DHCP messages that can be snooped by\n   the
      SAVI device.\n   In some of the exceptional cases (especially the dynamic topology\n
      \  case), by the time the binding has reached the BOUND state, the DHCP\n   messages
      may be passing through the SAVI device.  In this case, the\n   events driven
      by DHCP messages that are expected in the BOUND state\n   in the DHCP Snooping
      Process may occur, and the binding can be\n   handled by the DHCP Snooping Process
      state machine.\n   In any event, the lease expiry timeout event will occur even
      if no\n   others do.  This will cause the binding to be deleted and the state\n
      \  to logically return to NO_BIND state.  Either the DHCP or the Data\n   Snooping
      Process will be reinvoked if the lease is still in place.\n   If DHCP messages
      are still not passing through the SAVI device, there\n   will be a brief disconnection
      during which data packets passing\n   through the SAVI device will be dropped.
      \ The probabilistic\n   initiation of the Data Snooping Process can then take
      over again and\n   return the binding state to BOUND in due course.\n   The
      security issues concerning this process are discussed in\n   Section 11.1.\n"
    title: 7.2.  Rationale
  - contents:
    - "7.3.  Additional Binding States Description\n   In addition to NO_BIND and
      BOUND from Section 6.2, three new states\n   used in this process are listed
      here.  The INIT_BIND state is not\n   used, as it is entered by observing a
      DHCP message.\n   DETECTION: The address in the entry is undergoing local duplication\n
      \  detection.\n   RECOVERY: The SAVI device is querying the assignment and lease
      time\n   of the address in the entry through DHCP Leasequery.\n   VERIFY: The
      SAVI device is verifying that the device connected to the\n   attachment point
      has a hardware address that matches the one returned\n   in the DHCP Leasequery.\n
      \  Because the mechanisms used for the operations carried out while the\n   binding
      is in these three states operate over unreliable protocols,\n   each operation
      is carried out twice with a timeout that is triggered\n   if no response is
      received.\n"
    title: 7.3.  Additional Binding States Description
  - contents:
    - "7.4.  Events\n   To handle the Data Snooping Process, six extra events, described\n
      \  here, are needed in addition to those used by the DHCP Snooping\n   Process
      (see Section 6.3).  If an event will trigger the creation of\n   a new binding
      entry, the binding entry limit on the binding anchor\n   MUST NOT be exceeded.\n
      \  EVE_DATA_UNMATCH: A data packet without a matched binding is\n   received.\n
      \  EVE_DATA_CONFLICT: An ARP Reply / Neighbor Advertisement (NA) message\n   against
      an address in the DETECTION state is received from a host\n   other than the
      one for which the entry was added (i.e., a host\n   attached at a point other
      than the one on which the triggering data\n   packet was received).\n   EVE_DATA_LEASEQUERY:\n
      \  o  IPv4: A DHCPLEASEACTIVE message with the IP Address Lease Time\n      option
      is received.  Note that the DHCPLEASEUNKNOWN and\n      DHCPLEASEUNASSIGNED
      replies are ignored.\n   o  IPv6: A successful LEASEQUERY-REPLY is received.\n
      \  EVE_DATA_VERIFY: An ARP Reply / NA message has been received in the\n   VERIFY
      state from the device connected to the attachment point on\n   which the data
      packet was received.\n   The triggering packet should pass the following checks
      to trigger a\n   valid event:\n   o  Attribute check: the data packet should
      be from attachments with\n      the Data-Snooping attribute; the DHCPLEASEACTIVE/LEASEQUERY-REPLY\n
      \     messages should be from attachments with the DHCP-Snooping\n      attribute.\n
      \  o  Binding limitation check: the data messages must not cause new\n      binding
      setup on an attachment whose binding entry limitation has\n      been reached
      (refer to Section 11.5).\n   o  Address check: For EVE_DATA_LEASEQUERY, the
      source address of the\n      DHCPLEASEQUERY messages must pass the check specified
      in\n      Section 8.2.  For EVE_DATA_CONFLICT and EVE_DATA_VERIFY, the\n      source
      address and target address of the ARP or NA messages must\n      pass the check
      specified in Section 8.2.\n   o  Interval check: the interval between two successive\n
      \     EVE_DATA_UNMATCH events triggered by an attachment MUST be no\n      smaller
      than DATA_SNOOPING_INTERVAL.\n   o  TID check: the DHCPLEASEACTIVE/LEASEQUERY-REPLY
      messages must have\n      a matched TID with the corresponding entry.\n   o
      \ Prefix check: the source address of the data packet should be of a\n      valid
      local prefix, as specified in Section 7 of [RFC7039].\n   EVE_DATA_EXPIRE: A
      timer expires indicating that a response to a\n   hardware address verification
      message sent in the VERIFY state has\n   not been received within the specified
      DETECTION_TIMEOUT period.\n   EVE_ENTRY_EXPIRE: A timer expires after the Lifetime
      indicated in the\n   relevant BST entry has elapsed.  This is identical to the
      usage in\n   the DHCP Snooping Process.\n"
    title: 7.4.  Events
  - contents:
    - "7.5.  Message Sender Functions\n   The Data Snooping Process involves sending
      three different messages\n   to other network devices.  Each message may be
      sent up to two times\n   since they are sent over unreliable transports and
      are sent in\n   different states.  The functions defined in this section specify
      the\n   messages to be sent in the three cases.  In each case, the message to\n
      \  be sent depends on whether the triggering data packet is an IPv4 or\n   an
      IPv6 packet.\n"
    - contents:
      - "7.5.1.  Duplicate Detection Message Sender\n   Send a message to check if
        the source address in the data packet that\n   triggered the Data Snooping
        Process has a local conflict (that is, it\n   uses an address that is being
        used by another node):\n   IPv4 address:  Broadcast an Address Resolution
        Protocol (ARP) Request\n         [RFC826] or an ARP Probe [RFC5227] for the
        address to the local\n         network.  An ARP Response will be expected
        from the device on\n         the attachment point on which the triggering
        data packet was\n         received.  An ARP Reply received on any other port
        indicates a\n         duplicate address.\n   IPv6 address:  Send a Duplicate
        Address Detection (DAD) message\n         (Neighbor Solicitation message)
        to the solicited-node multicast\n         address [RFC4861] targeting the
        address.  Ideally, only the\n         host on that point of attachment responds
        with a Neighbor\n         Advertisement.  A Neighbor Advertisement received
        on any other\n         port indicates a duplicate address.\n   As both the
        ARP and DAD processes are unreliable (the packet either\n   to or from the
        other system may be lost in transit; see [RFC6620]),\n   if there is no response
        after the DETECTION_TIMEOUT, an\n   EVE_ENTRY_EXPIRE is generated.\n"
      title: 7.5.1.  Duplicate Detection Message Sender
    - contents:
      - "7.5.2.  Leasequery Message Sender\n   Send a DHCPLEASEQUERY message to the
        DHCP server(s) to determine if\n   it has given out a lease for the source
        address in the triggering\n   data packet.  A list of authorized DHCP servers
        is kept by the SAVI\n   device.  The list should be either preconfigured with
        the IPv4 and/or\n   IPv6 addresses or dynamically discovered: For networks
        using IPv4,\n   this can be done by sending DHCPv4 Discover messages and parsing
        the\n   returned DHCPv4 Offer messages; for networks using IPv6, discovery\n
        \  can be done by sending DHCPv6 SOLICIT messages and parsing the\n   returned
        ADVERTISE messages.  The same TID should be used for all\n   LEASEQUERY messages
        sent in response to a triggering data message on\n   an attachment point.
        \ The TID is generated if the TID field in the\n   BST entry is empty and
        recorded in the TID field of the BST entry\n   when the first message is sent.
        \ Subsequent messages use the TID from\n   the BST entry.\n   (1)  IPv4 address:
        Send a DHCPLEASEQUERY [RFC4388] message querying\n        by IP address to
        each DHCPv4 server in the list of authorized\n        servers with an IP Address
        Lease Time option (option 51).  If\n        the server has a valid lease for
        the address, the requested\n        information will be returned in a DHCPLEASEACTIVE
        message.\n   (2)  IPv6 address: Send a LEASEQUERY [RFC5007] message querying
        by IP\n        address to each DHCPv6 server in the list of authorized servers\n
        \       using the server address as the link-address in the LEASEQUERY\n        message.
        \ If the server has a valid lease for the address, the\n        requested
        information will be returned in a LEASEQUERY-REPLY\n        message marked
        as successful (i.e., without an\n        OPTION_STATUS_CODE in the reply).
        \ The IA Address option(s)\n        returned contains any IPv6 addresses bound
        to the same link\n        together with the lease validity time.\n   As DHCP
        Leasequeries are an unreliable process (the packet either to\n   or from the
        server may be lost in transit), if there is no response\n   after the MAX_LEASEQUERY_DELAY,
        an EVE_DATA_EXPIRE is generated.\n   Note that multiple response messages
        may be received if the list of\n   authorized servers contains more than one
        address of the appropriate\n   type and, in the case of DHCPv6, the responses
        may contain additional\n   addresses for which leases have been allocated.\n"
      title: 7.5.2.  Leasequery Message Sender
    - contents:
      - "7.5.3.  Address Verification Message Sender\n   Send a message to verify
        that the link-layer address in the attached\n   device that sent the triggering
        data packet matches the link-layer\n   address contained in the leasequery
        response:\n   IPv4 address:  Send an ARP Request with the Target Protocol
        Address\n         set to the IP address in the BST entry.  The ARP Request
        is\n         only sent to the attachment that triggered the binding.  If the\n
        \        attached device has the IP address bound to the interface\n         attached
        to the SAVI device, an ARP Reply should be received\n         containing the
        hardware address of the interface on the\n         attached device that can
        be compared with the leasequery value.\n   IPv6 address:  Send a Neighbor
        Solicitation (NS) message with the\n         target address set to the IP
        address in the BST entry.  The NS\n         is only sent to the attachment
        that triggered the binding.  If\n         the attached device has the IP address
        bound to the interface\n         attached to the SAVI device, an NA should
        be received\n         indicating that the attached device has the IP address\n
        \        configured on the interface.\n   As both the ARP and NS/NA processes
        are unreliable (the packet either\n   to or from the other system may be lost
        in transit; see [RFC6620]),\n   if there is no response after the DETECTION_TIMEOUT,
        an\n   EVE_DATA_EXPIRE is generated.\n"
      title: 7.5.3.  Address Verification Message Sender
    title: 7.5.  Message Sender Functions
  - contents:
    - '7.6.  Initial State: NO_BIND

      '
    - contents:
      - "7.6.1.  Event: EVE_DATA_UNMATCH: A data packet without a matched binding\n
        \       is received\n   Make a probabilistic determination as to whether to
        act on this\n   event.  The probability may be configured or calculated based
        on the\n   state of the SAVI device.  This probability should be low enough
        to\n   mitigate the damage from DoS attacks against this process.\n   Create
        a new entry in the BST.  Set the Binding Anchor field to the\n   corresponding
        binding anchor of the attachment.  Set the Address\n   field to the source
        address of the packet.\n   Address conflicts MUST be detected and prevented.\n
        \  If local address detection is performed:\n         Set the State field
        to DETECTION.  Set the Lifetime of the\n         created entry to DETECTION_TIMEOUT.
        \ Set the Timeouts field to\n         0.  Start the detection of any local
        address conflicts by\n         sending a Duplicate Address Detection Message
        (Section 7.5.1).\n         Transition to DETECTION state.\n   If local address
        detection is not performed:\n         Set the State field to RECOVERY.  Set
        the Lifetime of the\n         created entry to LEASEQUERY_DELAY.  Set the
        Timeouts field to\n         0.  Start the recovery of any DHCP lease associated
        with the\n         source IP address by sending one or more LEASEQUERY messages\n
        \        (Section 7.5.2).  Transition to RECOVERY state.\n   The packet that
        triggers this event SHOULD be discarded.\n   An example of the BST entry during
        duplicate address detection is\n   illustrated in Figure 11.\n   +--------+-------+---------+-----------------------+-----+----------+\n
        \  | Anchor |Address|  State  | Lifetime              | TID | Timeouts |\n
        \  +--------+-------+---------+-----------------------+-----+----------+\n
        \  | Port_1 | Addr1 |DETECTION| DETECTION_TIMEOUT     |     |    0     |\n
        \  +--------+-------+---------+-----------------------+-----+----------+\n
        \    Figure 11: Binding Entry in BST on Data-Triggered Initialization\n   Resulting
        state: DETECTION - The address in the entry is undergoing\n   local duplication
        detection - or RECOVERY - The DHCP lease(s)\n   associated with the address
        is being queried.\n"
      title: '7.6.1.  Event: EVE_DATA_UNMATCH: A data packet without a matched binding'
    - contents:
      - "7.6.2.  Events Not Observed in NO_BIND for Data Snooping\n   EVE_DATA_CONFLICT:
        An ARP Reply / NA message is received from an\n   unexpected system.\n   EVE_DATA_LEASEQUERY:
        A valid DHCPLEASEACTIVE or LEASEQUERY-REPLY is\n   received.\n   EVE_DATA_VERIFY:
        A valid ARP Reply or NA message is received from the\n   attached device.\n
        \  All EVE_DHCP_* events defined in Section 6.3.2 are treated as\n   described
        in the DHCP Snooping Process (Section 6.4.1) and may result\n   in that process
        being triggered.\n   EVE_ENTRY_EXPIRE: Expiration of the DECTECTION_TIMEOUT\n
        \  EVE_DATA_EXPIRE: Expiration of the DECTECTION_TIMEOUT\n"
      title: 7.6.2.  Events Not Observed in NO_BIND for Data Snooping
    title: '7.6.  Initial State: NO_BIND'
  - contents:
    - '7.7.  Initial State: DETECTION

      '
    - contents:
      - "7.7.1.  Event: EVE_ENTRY_EXPIRE\n   When this event occurs, no address conflict
        has been detected during\n   the previous DETECTION_TIMEOUT period.\n   If
        the Timeouts field in the BST entry is 0:\n         Set the Lifetime of the
        BST entry to DETECTION_TIMEOUT.  Set\n         the Timeouts field to 1.  Restart
        the detection of any local\n         address conflicts by sending a second
        Duplicate Address\n         Detection Message (Section 7.5.1).  Remain in
        DETECTION state.\n   If the Timeouts field in the BST entry is 1:\n         Assume
        that there is no local address conflict.  Set the State\n         field to
        RECOVERY.  Set the Lifetime of the BST entry to\n         LEASEQUERY_DELAY.
        \ Set the Timeouts field to 0.  Start the\n         recovery of any DHCP lease
        associated with the source IP\n         address by sending one or more LEASEQUERY
        messages\n         (Section 7.5.2).  Transition to RECOVERY state.\n   An
        example of the entry is illustrated in Figure 12.\n   +--------+-------+----------+----------------------+-----+----------+\n
        \  | Anchor |Address|  State   | Lifetime             | TID | Timeouts |\n
        \  +--------+-------+----------+----------------------+-----+----------+\n
        \  | Port_1 | Addr1 | RECOVERY | MAX_LEASEQUERY_DELAY | TID |    0     |\n
        \  +--------+-------+----------+----------------------+-----+----------+\n
        \              Figure 12: Binding Entry in BST on Leasequery\n   Resulting
        state: DETECTION - If a second local conflict period is\n   required - or
        RECOVERY - The SAVI device is querying the assignment\n   and lease time of
        the address in the entry through DHCP Leasequery.\n"
      title: '7.7.1.  Event: EVE_ENTRY_EXPIRE'
    - contents:
      - "7.7.2.  Event: EVE_DATA_CONFLICT: ARP Reply / NA Message Received from\n
        \       Unexpected System\n   Remove the entry.\n   Resulting state: NO_BIND
        - No binding has been set up.\n"
      title: '7.7.2.  Event: EVE_DATA_CONFLICT: ARP Reply / NA Message Received from'
    - contents:
      - "7.7.3.  Events Not Observed in DETECTION\n   EVE_DATA_UNMATCH: A data packet
        without a matched binding is received\n   All EVE_DHCP_* events defined in
        Section 6.3.2\n   EVE_DHCP_REBIND: A DHCPv4 Rebind or a DHCPv6 Rebind message
        is\n   received\n"
      title: 7.7.3.  Events Not Observed in DETECTION
    title: '7.7.  Initial State: DETECTION'
  - contents:
    - '7.8.  Initial State: RECOVERY

      '
    - contents:
      - "7.8.1.  Event: EVE_DATA_LEASEQUERY: A valid DHCPLEASEACTIVE or\n        successful
        LEASEQUERY-REPLY is received\n   Set the State in the BST entry to VERIFY.
        \ Depending on the type of\n   triggering source IP address, process the received
        DHCP Leasequery\n   response:\n   IPv4 address:  Update the Lifetime field
        in the BST entry to the sum\n         of the value encoded in the IP Address
        Lease Time option of the\n         DHCPLEASEACTIVE message and MAX_DHCP_RESPONSE_TIME.
        \ Record the\n         value of the \"chaddr\" field (hardware address) in
        the message\n         for checking against the hardware address received during\n
        \        verification in the next state.  Set the Timeouts field to 0.\n         Start
        the verification process by sending an Address\n         Verification Message
        (see Section 7.5.3).  Transition to VERIFY\n         state.  Start an additional
        verification timer with a duration\n         of DETECTION_TIMEOUT.  When this
        expires, an EVE_DATA_EXPIRE\n         event will be generated.\n   IPv6 address:
        \ Update the Lifetime field in the BST entry to the sum\n         of the valid
        lifetime extracted from the OPTION_CLIENT_DATA\n         option in the LEASEQUERY-REPLY
        message and\n         MAX_DHCP_RESPONSE_TIME.  Set the Timeouts field to 0.
        \ Start\n         the verification process by sending an Address Verification\n
        \        Message (see Section 7.5.3).  Transition to VERIFY state.\n         Start
        an additional verification timer with a duration of\n         DETECTION_TIMEOUT.
        \ When this expires, an EVE_DATA_EXPIRE event\n         will be generated.\n
        \        If multiple addresses are received in the LEASEQUERY-REPLY, new\n
        \        BST entries MUST be created for the additional addresses using\n
        \        the same binding anchor.  The entries are created with state\n         set
        to VERIFY and the other fields set as described in this\n         section
        for the triggering source IP address.  Also, start the\n         verification
        process and start verification timers for each\n         additional address.\n
        \  Resulting state: VERIFY - Awaiting verification or otherwise of the\n   association
        of the IP address with the connected interface.\n"
      title: '7.8.1.  Event: EVE_DATA_LEASEQUERY: A valid DHCPLEASEACTIVE or'
    - contents:
      - "7.8.2.  Event: EVE_ENTRY_EXPIRE\n   Depending on the value of the Timeouts
        field in the BST entry, either\n   send repeat LEASEQUERY messages or discard
        the binding:\n   If the Timeouts field in the BST entry is 0:\n         No
        responses to the LEASEQUERY message(s) sent have been\n         received during
        the first LEASEQUERY_DELAY period.  Set the\n         Lifetime of the BST
        entry to LEASEQUERY_DELAY.  Set the\n         Timeouts field to 1.  Restart
        the recovery of any DHCP lease\n         associated with the source IP address
        by sending one or more\n         LEASEQUERY messages (Section 7.5.2).  Remain
        in RECOVERY state.\n   If the Timeouts field in the BST entry is 1:\n         No
        responses to the LEASEQUERY messages sent during two\n         LEASEQUERY_DELAY
        periods were received.  Assume that no leases\n         exist and hence that
        the source IP address is bogus.  Delete\n         the BST entry.  Transition
        to NO_BIND state.\n   Resulting state: RECOVERY - If repeat leasequeries are
        sent - or\n   NO_BIND - If no successful responses to LEASEQUERY messages
        have been\n   received.\n"
      title: '7.8.2.  Event: EVE_ENTRY_EXPIRE'
    - contents:
      - "7.8.3.  Events Not Observed in RECOVERY\n   EVE_DATA_UNMATCH: A data packet
        without a matched binding is received\n   EVE_DATA_CONFLICT: An ARP Reply
        / NA message is received from an\n   unexpected system\n   EVE_DATA_VERIFY:
        A valid ARP Reply or NA message is received from the\n   attached device\n
        \  All EVE_DHCP_* events defined in Section 6.3.2\n   EVE_DATA_EXPIRE: Expiration
        of the DECTECTION_TIMEOUT\n"
      title: 7.8.3.  Events Not Observed in RECOVERY
    title: '7.8.  Initial State: RECOVERY'
  - contents:
    - '7.9.  Initial State: VERIFY

      '
    - contents:
      - "7.9.1.  Event: EVE_DATA_LEASEQUERY: A valid DHCPLEASEACTIVE or\n        successful
        LEASEQUERY-REPLY is received\n   If LEASEQUERY messages were sent to more
        than one DHCP server during\n   RECOVERY state, additional successful leasequery
        responses may be\n   received relating to the source IP address.  The conflict
        resolution\n   mechanisms specified in Section 6.8 of [RFC4388] and Section
        4.3.4 of\n   [RFC5007] can be used to determine the message from which values
        are\n   used to update the BST Lifetime entry and the hardware address\n   obtained
        from DHCP, as described in Section 7.8.1.  In the case of\n   DHCPv6 queries,
        the LEASEQUERY-REPLY may contain additional addresses\n   as described in
        Section 7.8.1.  If so, additional BST entries MUST be\n   created or ones
        previously created updated as described in that\n   section.\n   Resulting
        state: VERIFY (no change).\n"
      title: '7.9.1.  Event: EVE_DATA_LEASEQUERY: A valid DHCPLEASEACTIVE or'
    - contents:
      - "7.9.2.  Event: EVE_DATA_VERIFY: A valid ARP Reply or NA is received from\n
        \       the device attached via the binding anchor\n   Depending on the type
        of triggering source IP address, this event may\n   indicate that the device
        attached via the binding anchor in the BST\n   entry is configured by DHCP
        using the IP address:\n   IPv4 address:  Check that the value of the sender
        hardware address in\n         the ARP Reply matches the saved \"chaddr\" field
        (hardware\n         address) from the previously received DHCPLEASEACTIVE
        message.\n         If not, ignore this event; a subsequent retry may provide\n
        \        verification.  If the hardware addresses match, the binding\n         entry
        has been verified.\n   IPv6 address:  Simple receipt of a valid NA from the
        triggering\n         source IP address at the binding anchor port provides\n
        \        verification for the binding entry.\n   If the binding entry has
        been verified, set the state in the BST\n   entry to BOUND.  Clear the TID
        field.  Cancel the verification timer.\n   Resulting state: VERIFY (no change)
        - If the IPv4 DHCPLEASEQUERY\n   \"chaddr\" address does not match the ARP
        Reply hardware address.\n   Otherwise, the resulting state is BOUND.\n"
      title: '7.9.2.  Event: EVE_DATA_VERIFY: A valid ARP Reply or NA is received
        from'
    - contents:
      - "7.9.3.  Event: EVE_ENTRY_EXPIRE\n   The DHCP lease lifetime has expired before
        the entry could be\n   verified.  Remove the entry.  Transition to NO_BIND
        state.\n   Resulting state: NO_BIND - No binding has been set up.\n"
      title: '7.9.3.  Event: EVE_ENTRY_EXPIRE'
    - contents:
      - "7.9.4.  Event: EVE_DATA_EXPIRE\n   Depending on the value of the Timeouts
        field in the BST entry, either\n   send a repeat validation message or discard
        the binding:\n   If the Timeouts field in the BST entry is 0:\n         No
        response to the verification message sent has been received\n         during
        the first DETECTION_TIMEOUT period.  Set the Timeouts\n         field to 1.
        \ Restart the verification process by sending an\n         Address Verification
        Message (see Section 7.5.3).  Start a\n         verification timer with a
        duration of DETECTION_TIMEOUT.  When\n         this expires, an EVE_DATA_EXPIRE
        event will be generated.\n         Remain in VERIFY state.\n   If the Timeouts
        field in the BST entry is 1:\n         No responses to the verification messages
        sent during two\n         DETECTION_TIMEOUT periods were received.  Assume
        that the\n         configuration of the triggering source IP address cannot
        be\n         verified and hence that the source IP address is bogus.  Delete\n
        \        the BST entry.  Transition to NO_BIND state.\n   Resulting state:
        VERIFY - Additional verification message sent - or\n   NO_BIND - No binding
        has been set up.\n"
      title: '7.9.4.  Event: EVE_DATA_EXPIRE'
    - contents:
      - "7.9.5.  Events Not Observed in VERIFY\n   EVE_DATA_UNMATCH: A data packet
        without a matched binding is received\n   EVE_DATA_CONFLICT: An ARP Reply
        / NA message is received from an\n   unexpected system\n   All EVE_DHCP_*
        events defined in Section 6.3.2\n"
      title: 7.9.5.  Events Not Observed in VERIFY
    title: '7.9.  Initial State: VERIFY'
  - contents:
    - "7.10.  Initial State: BOUND\n   Upon entry to the BOUND state, control of the
      system continues as if\n   a DHCP message assigning the address has been observed,
      as in\n   Section 6.4.3.  The BST entry has been restored.\n   Note that the
      TID field contains no value after the binding state\n   changes to BOUND.  The
      TID field is recovered from snooping DHCP\n   Renew/Rebind messages if these
      are observed as described in the DHCP\n   Snooping Process.  Because TID is
      used to associate binding entries\n   with messages from DHCP servers, it must
      be recovered or else a\n   number of state transitions of this mechanism will
      not be executed\n   normally.\n"
    title: '7.10.  Initial State: BOUND'
  - contents:
    - "7.11.  Table of State Machine\n   The main state transitions are listed as
      follows.\n   State      Event               Action                      Next
      State\n   ---------------------------------------------------------------------\n
      \  NO_BIND    EVE_DATA_UNMATCH    Start duplicate detect       DETECTION\n   DETECTION
      \ EVE_ENTRY_EXPIRE 1  Repeat duplicate detect      DETECTION\n   DETECTION  EVE_ENTRY_EXPIRE
      2  Start leasequery              RECOVERY\n   DETECTION  EVE_DATA_CONFLICT   Remove
      entry                   NO_BIND\n   RECOVERY   EVE_ENTRY_EXPIRE 1  Repeat leasequery
      \            RECOVERY\n   RECOVERY   EVE_ENTRY_EXPIRE 2  No lease found; remove
      entry   NO_BIND\n   RECOVERY   EVE_DATA_LEASEQUERY Set lease time; start verify
      \   VERIFY\n   VERIFY     EVE_ENTRY_EXPIRE    Lease expiry; remove entry     NO_BIND\n
      \  VERIFY     EVE_DATA_LEASEQUERY Resolve lease conflict(s)       VERIFY\n   VERIFY
      \    EVE_DATA_VERIFY     Finish validation     BOUND or NO_BIND\n   VERIFY     EVE_DATA_EXPIRE
      1   Repeat verify                   VERIFY\n   VERIFY     EVE_DATA_EXPIRE 2
      \  Verify failed; remove entry    NO_BIND\n   BOUND      EVE_ENTRY_EXPIRE    Lease
      expiry; remove entry     NO_BIND\n   BOUND      RENEW/REBIND        Record TID
      \                      BOUND\n                     Figure 13: State Transition
      Table\n                               +-------------+         EVE_ENTRY_EXPIRE\n
      \                    /---------+             |<------------------------\\\n
      \                    |         |   NO_BIND   |         EVE_DATA_EXPIRE |\n    EVE_DATA_UNMATCH
      |  /----->|             |<----\\   (2nd VRF_DELAY) |\n                     |
      \ |      +-------------+     |                   |\n                     |  |
      \        EVE_ENTRY_EXPIRE |                   |\n                     |  |           (2nd
      LQ_DELAY) |                   |\n   EVE_ENTRY_EXPIRE  |  |                          |
      \ EVE_ENTRY_EXPIRE |\n   (1st DAD_DELAY)   |  |                          |   (1st
      LQ_DELAY)  |\n         /------\\    |  |                          |        /--------\\
      |\n         |      |    |  | EVE_DATA_CONFLICT        \\---\\    |        |
      |\n         |      v    v  |                              |    v        | |\n
      \        |    +-------------+ EVE_ENTRY_EXPIRE       +------------+  | |\n         |
      \   |             | (2nd DAD_DELAY)        |            |  | |\n         \\----+
      \ DETECTION  ------------------------>|  RECOVERY  +--/ |\n              |             |
      \                       |            |    |\n              +-------------+   (To
      NO_BIND)         +------------+    |\n                                ^                               |
      \     |\n                                |           EVE_DATA_LEASEQUERY |      |\n
      \                 /----------\\  |                               |      |\n
      \                 |          |  | EVE_ENTRY_EXPIRE              |      |\n    EVE_DHCP_RENEW|
      \         v  |                               v      |\n   EVE_DHCP_REBIND|    +-------------+
      \               +-------------+  |\n                  |    |             |                |
      \            +--/\n                  \\----+   BOUND     |<---------------+
      \  VERIFY    |\n                       |             | EVE_DATA_VERIFY|             |<-\\\n
      \                      +-------------+                +-------------+  |\n                                                            |
      \         |\n                                                            \\----------/\n
      \                                                    EVE_DATA_LEASEQUERY\n                                                         EVE_DATA_EXPIRE\n
      \                                                        (1st VRF_DELAY)\n                       Figure
      14: Diagram of Transit\n   LQ_DELAY:  MAX_LEASEQUERY_DELAY\n   VRF_DELAY: DETECTION_TIMEOUT\n"
    title: 7.11.  Table of State Machine
  title: 7.  Data Snooping Process
- contents:
  - "8.  Filtering Specification\n   This section specifies how to use bindings to
    filter out packets with\n   spoofed source addresses.\n   Filtering policies are
    different for data packets and control\n   packets.  DHCP, ARP, and Neighbor Discovery
    Protocol (NDP) [RFC4861]\n   messages are classified as control packets.  All
    other packets are\n   classified as data packets.\n"
  - contents:
    - "8.1.  Data Packet Filtering\n   Data packets from attachments with the Validating
      attribute TRUE MUST\n   have their source addresses validated.  There is one
      exception to\n   this rule.\n   A packet whose source IP address is a link-local
      address cannot be\n   checked against DHCP assignments, as it is not assigned
      using DHCP.\n   Note: as explained in Section 1, a SAVI solution for link-local\n
      \  addresses, e.g., FCFS SAVI [RFC6620], can be enabled to check packets\n   with
      a link-local source address.\n   If the source IP address of a packet is not
      a link-local address, but\n   there is not a matching entry in the BST with
      BOUND state, this\n   packet MUST be discarded.  However, the packet may trigger
      the Data\n   Snooping Process (Section 7) if the Data-Snooping attribute is
      set on\n   the attachment.\n   Data packets from an attachment with the Validating
      attribute set\n   FALSE will be forwarded without having their source addresses\n
      \  validated.\n   The SAVI device MAY log packets that fail source address validation.\n"
    title: 8.1.  Data Packet Filtering
  - contents:
    - "8.2.  Control Packet Filtering\n   For attachments with the Validating attribute:\n
      \  DHCPv4 Client-to-Server messages in which the source IP address is\n   neither
      all zeros nor bound with the corresponding binding anchor in\n   the BST MUST
      be discarded.\n   DHCPv6 Client-to-Server messages in which the source IP address
      is\n   neither a link-local address nor bound with the corresponding binding\n
      \  anchor in the BST MUST be discarded.\n   NDP messages in which the source
      IP address is neither a link-local\n   address nor bound with the corresponding
      binding anchor MUST be\n   discarded.\n   NA messages in which the target address
      is neither a link-local\n   address nor bound with the corresponding binding
      anchor MUST be\n   discarded.\n   ARP messages in which the protocol is IP and
      the sender protocol\n   address is neither all zeros nor bound with the corresponding
      binding\n   anchor MUST be discarded.\n   ARP Reply messages in which the target
      protocol address is not bound\n   with the corresponding binding anchor MUST
      be discarded.\n   For attachments with other attributes:\n   DHCP Server-to-Client
      messages not from attachments with the DHCP-\n   Trust attribute or Trust attribute
      MUST be discarded.\n   For attachments with no attribute:\n   DHCP Server-to-Client
      messages from such attachments MUST be\n   discarded.\n   The SAVI device MAY
      record any messages that are discarded.\n"
    title: 8.2.  Control Packet Filtering
  title: 8.  Filtering Specification
- contents:
  - "9.  State Restoration\n   If a SAVI device reboots, the information kept in volatile
    memory\n   will be lost.  This section specifies the restoration of attribute\n
    \  configuration and the BST.\n"
  - contents:
    - "9.1.  Attribute Configuration Restoration\n   The loss of attribute configuration
      will not break the network: no\n   action will be performed on traffic from
      attachments with no\n   attribute.  However, the loss of attribute configuration
      makes this\n   SAVI function unable to work.\n   To avoid the loss of binding
      anchor attribute configuration, the\n   configuration MUST be able to be stored
      in non-volatile storage.\n   After the reboot of the SAVI device, if the configuration
      of binding\n   anchor attributes is found in non-volatile storage, the configuration\n
      \  MUST be used.\n"
    title: 9.1.  Attribute Configuration Restoration
  - contents:
    - "9.2.  Binding State Restoration\n   The loss of binding state will cause the
      SAVI devices to discard\n   legitimate traffic.  Simply using the Data Snooping
      Process to\n   recover a large number of bindings is a heavy overhead and may
      cause\n   considerable delay.  Thus, recovering bindings from non-volatile\n
      \  storage, as specified below, is RECOMMENDED.\n   Binding entries MAY be saved
      into non-volatile storage whenever a new\n   binding entry changes to BOUND
      state.  If a binding with BOUND state\n   is removed, the saved entry MUST be
      removed correspondingly.  The\n   time when each binding entry is established
      is also saved.\n   If the BST is stored in non-volatile storage, the SAVI device
      SHOULD\n   restore binding state from the non-volatile storage immediately after\n
      \  reboot.  Using the time when each binding entry was saved, the SAVI\n   device
      should check whether the entry has become obsolete by\n   comparing the saved
      lifetime and the difference between the current\n   time and time when the binding
      entry was established.  Obsolete\n   entries that would have expired before
      the reboot MUST be removed.\n"
    title: 9.2.  Binding State Restoration
  title: 9.  State Restoration
- contents:
  - "10.  Constants\n   The following constants are recommended for use in this context:\n
    \  o  MAX_DHCP_RESPONSE_TIME (120s): Maximum Solicit timeout value\n      (SOL_MAX_RT
    from [RFC3315])\n   o  MAX_LEASEQUERY_DELAY (10s): Maximum LEASEQUERY timeout
    value\n      (LQ_MAX_RT from [RFC5007])\n   o  DETECTION_TIMEOUT (0.5s): Maximum
    duration of a hardware address\n      verification step in the VERIFY state (TENT_LT
    from [RFC6620])\n   o  DATA_SNOOPING_INTERVAL: Minimum interval between two successive\n
    \     EVE_DATA_UNMATCH events triggered by an attachment.\n      Recommended interval:
    60s and configurable\n   o  OFFLINK_DELAY: Period after a client is last detected
    before the\n      binding anchor is being removed.  Recommended delay: 30s\n"
  title: 10.  Constants
- contents:
  - '11.  Security Considerations

    '
  - contents:
    - "11.1.  Security Problems with the Data Snooping Process\n   There are two security
      problems with the Data Snooping Process\n   (Section 7):\n   (1)  The Data Snooping
      Process is costly, but an attacker can trigger\n        it simply through sending
      a number of data packets.  To avoid\n        Denial-of-Service attacks against
      the SAVI device itself, the\n        Data Snooping Process MUST be rate limited.
      \ A constant\n        DATA_SNOOPING_INTERVAL is used to control the frequency.
      \ Two\n        Data Snooping Processes on one attachment MUST be separated by
      a\n        minimum interval time of DATA_SNOOPING_INTERVAL.  If this value\n
      \       is changed, the value needs to be large enough to minimize DoS\n        attacks.\n
      \  (2)  The Data Snooping Process may set up incorrect bindings if the\n        clients
      do not reply to the detection probes (Section 7.6.1).\n        An attack will
      pass the duplicate detection if the client\n        assigned the target address
      does not reply to the detection\n        probes.  The DHCP Leasequery procedure
      performed by the SAVI\n        device just tells whether or not the address
      is assigned in the\n        network.  However, the SAVI device cannot determine
      whether the\n        address is just assigned to the triggering attachment from
      the\n        DHCPLEASEQUERY Reply.\n"
    title: 11.1.  Security Problems with the Data Snooping Process
  - contents:
    - "11.2.  Securing Leasequery Operations\n   In [RFC4388] and [RFC5007], the specific
      case of DHCP Leasequeries\n   originated by \"access concentrators\" is addressed
      extensively.  SAVI\n   devices are very similar to access concentrators in that
      they snoop\n   on DHCP traffic and seek to validate source addresses based on
      the\n   results.  Accordingly, the recommendations for securing leasequery\n
      \  operations for access concentrators in Section 7 of [RFC4388] and\n   Section
      5 of [RFC5007] MUST be followed when leasequeries are made\n   from SAVI devices.
      \ [RFC5007] RECOMMENDS that communications between\n   the querier and the DHCP
      server are protected with IPsec.  It is\n   pointed out that there are relatively
      few devices involved in a given\n   administrative domain (SAVI devices, DHCP
      relays, and DHCP servers)\n   so that manual configuration of keying material
      would not be overly\n   burdensome.\n"
    title: 11.2.  Securing Leasequery Operations
  - contents:
    - "11.3.  Client Departure Issues\n   After a binding is set up, the corresponding
      client may leave its\n   attachment point.  It may depart temporarily due to
      signal fade or\n   permanently by moving to a new attachment point or leaving
      the\n   network.  In the signal fade case, since the client may return\n   shortly,
      the binding should be kept momentarily, lest legitimate\n   traffic from the
      client be blocked.  However, if the client leaves\n   permanently, keeping the
      binding can be a security issue.  If the\n   binding anchor is a property of
      the attachment point rather than the\n   client, e.g., the switch port but not
      incorporating the MAC address,\n   an attacker using the same binding anchor
      can send packets using IP\n   addresses assigned to the client.  Even if the
      binding anchor is a\n   property of the client, retaining binding state for
      a departed client\n   for a long time is a waste of resources.\n   Whenever
      a direct client departs from the network, a link-down event\n   associated with
      the binding anchor will be triggered.  SAVI-DHCP\n   monitors such events and
      performs the following mechanism.\n   (1)  Whenever a client with the Validating
      attribute leaves, a timer\n        of duration OFFLINK_DELAY is set on the corresponding
      binding\n        entries.\n   (2)  If a DAD Neighbor Solicitation / Gratuitous
      ARP request is\n        received that targets the address during OFFLINK_DELAY,
      the\n        entry MAY be removed.\n   (3)  If the client returns on-link during
      OFFLINK_DELAY, cancel the\n        timer.\n   In this way, the bindings of a
      departing client are kept for\n   OFFLINK_DELAY.  In cases of link flapping,
      the client will not be\n   blocked.  If the client leaves permanently, the bindings
      will be\n   removed after OFFLINK_DELAY.\n   SAVI-DHCP does not handle the departure
      of indirect clients because\n   it will not be notified of such events.  Switches
      supporting indirect\n   attachment (e.g., through a separate non-SAVI switch)
      SHOULD use\n   information specific to the client such as its MAC address as
      part of\n   the binding anchor.\n"
    title: 11.3.  Client Departure Issues
  - contents:
    - "11.4.  Compatibility with Detecting Network Attachment (DNA)\n   DNA [RFC4436]
      [RFC6059] is designed to decrease the handover latency\n   after reattachment
      to the same network.  DNA mainly relies on\n   performing a reachability test
      by sending unicast Neighbor\n   Solicitation / Router Solicitation / ARP Request
      messages to\n   determine whether a previously configured address is still valid.\n
      \  Although DNA provides optimization for clients, there is insufficient\n   information
      for this mechanism to migrate the previous binding or\n   establish a new binding.
      \ If a binding is set up only by snooping the\n   reachability test message,
      the binding may be invalid.  For example,\n   an attacker can perform the reachability
      test with an address bound\n   to another client.  If a binding is migrated
      to the attacker, the\n   attacker can successfully obtain the binding from the
      victim.\n   Because this mechanism wouldn't set up a binding based on snooping\n
      \  the DNA procedure, it cannot achieve perfect compatibility with DNA.\n   However,
      it only means the reconfiguration of the interface is slowed\n   but not prevented.
      \ Details are discussed as follows.\n   In Simple DNAv6 [RFC6059], the probe
      is sent with the source address\n   set to a link-local address, and such messages
      will not be discarded\n   by the policy specified in Section 8.2.  If a client
      is reattached to\n   a previous network, the detection will be completed, and
      the address\n   will be regarded as valid by the client.  However, the candidate\n
      \  address is not contained in the probe.  Thus, the binding cannot be\n   recovered
      through snooping the probe.  As the client will perform\n   DHCP exchange at
      the same time, the binding will be recovered from\n   the DHCP Snooping Process.
      \ The DHCP Request messages will not be\n   filtered out in this case because
      they have link-local source\n   addresses.  Before the DHCP procedure is completed,
      packets will be\n   filtered out by the SAVI device.  In other words, if this
      SAVI\n   function is enabled, Simple DNAv6 will not help reduce the handover\n
      \  latency.  If the Data-Snooping attribute is configured on the new\n   attachment
      of the client, the data-triggered procedure may reduce\n   latency.\n   In DNAv4
      [RFC4436], the ARP Probe will be discarded because an\n   unbound address is
      used as the sender protocol address.  As a result,\n   the client will regard
      the address under detection as valid.\n   However, the data traffic will be
      filtered.  The DHCP Request message\n   sent by the client will not be discarded
      because the source IP\n   address field should be all zeros as required by [RFC2131].
      \ Thus, if\n   the address is still valid, the binding will be recovered from
      the\n   DHCP Snooping Process.\n"
    title: 11.4.  Compatibility with Detecting Network Attachment (DNA)
  - contents:
    - "11.5.  Binding Number Limitation\n   A binding entry will consume certain high-speed
      memory resources.  In\n   general, a SAVI device can afford only a quite limited
      number of\n   binding entries.  In order to prevent an attacker from overloading\n
      \  the resources of the SAVI device, a binding entry limit is set on\n   each
      attachment.  The binding entry limit is the maximum number of\n   bindings supported
      on each attachment with the Validating attribute.\n   No new binding should
      be set up after the limit has been reached.  If\n   a DHCP Reply assigns more
      addresses than the remaining binding entry\n   quota of each client, the message
      will be discarded and no binding\n   will be set up.\n"
    title: 11.5.  Binding Number Limitation
  - contents:
    - "11.6.  Privacy Considerations\n   A SAVI device MUST delete binding anchor
      information as soon as\n   possible (i.e., as soon as the state for a given
      address is back to\n   NO_BIND), except where there is an identified reason
      why that\n   information is likely to be involved in the detection, prevention,
      or\n   tracing of actual source-address spoofing.  Information about hosts\n
      \  that never spoof (probably the majority of hosts) SHOULD NOT be\n   logged.\n"
    title: 11.6.  Privacy Considerations
  - contents:
    - "11.7.  Fragmented DHCP Messages\n   This specification does not preclude reassembly
      of fragmented DHCP\n   messages, but it also does not require it.  If DHCP fragmentation\n
      \  proves to be an issue, the issue will need to be specified and\n   addressed.
      \ (This topic is beyond the scope of this document.)\n"
    title: 11.7.  Fragmented DHCP Messages
  title: 11.  Security Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC826]  Plummer, D., \"Ethernet Address Resolution
      Protocol: Or\n              Converting Network Protocol Addresses to 48.bit
      Ethernet\n              Address for Transmission on Ethernet Hardware\", STD
      37,\n              RFC 826, DOI 10.17487/RFC0826, November 1982,\n              <http://www.rfc-editor.org/info/rfc826>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2131]  Droms,
      R., \"Dynamic Host Configuration Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131,
      March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n   [RFC3315]
      \ Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C.,
      and M. Carney, \"Dynamic Host Configuration Protocol\n              for IPv6
      (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n
      \  [RFC4388]  Woundy, R. and K. Kinnear, \"Dynamic Host Configuration\n              Protocol
      (DHCP) Leasequery\", RFC 4388,\n              DOI 10.17487/RFC4388, February
      2006,\n              <http://www.rfc-editor.org/info/rfc4388>.\n   [RFC4436]
      \ Aboba, B., Carlson, J., and S. Cheshire, \"Detecting\n              Network
      Attachment in IPv4 (DNAv4)\", RFC 4436,\n              DOI 10.17487/RFC4436,
      March 2006,\n              <http://www.rfc-editor.org/info/rfc4436>.\n   [RFC4861]
      \ Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861,
      September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC5007]
      \ Brzozowski, J., Kinnear, K., Volz, B., and S. Zeng,\n              \"DHCPv6
      Leasequery\", RFC 5007, DOI 10.17487/RFC5007,\n              September 2007,
      <http://www.rfc-editor.org/info/rfc5007>.\n   [RFC5227]  Cheshire, S., \"IPv4
      Address Conflict Detection\", RFC 5227,\n              DOI 10.17487/RFC5227,
      July 2008,\n              <http://www.rfc-editor.org/info/rfc5227>.\n   [RFC6059]
      \ Krishnan, S. and G. Daley, \"Simple Procedures for\n              Detecting
      Network Attachment in IPv6\", RFC 6059,\n              DOI 10.17487/RFC6059,
      November 2010,\n              <http://www.rfc-editor.org/info/rfc6059>.\n   [RFC6620]
      \ Nordmark, E., Bagnulo, M., and E. Levy-Abegnoli, \"FCFS\n              SAVI:
      First-Come, First-Served Source Address Validation\n              Improvement
      for Locally Assigned IPv6 Addresses\",\n              RFC 6620, DOI 10.17487/RFC6620,
      May 2012,\n              <http://www.rfc-editor.org/info/rfc6620>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [DHCPv6-SHIELD]\n              Gont, F.,
      Liu, W., and G. Van de Velde, \"DHCPv6-Shield:\n              Protecting Against
      Rogue DHCPv6 Servers\", Work in\n              Progress, draft-ietf-opsec-dhcpv6-shield-07,
      May 2015.\n   [RFC2827]  Ferguson, P. and D. Senie, \"Network Ingress Filtering:\n
      \             Defeating Denial of Service Attacks which employ IP Source\n              Address
      Spoofing\", BCP 38, RFC 2827, DOI 10.17487/RFC2827,\n              May 2000,
      <http://www.rfc-editor.org/info/rfc2827>.\n   [RFC3736]  Droms, R., \"Stateless
      Dynamic Host Configuration Protocol\n              (DHCP) Service for IPv6\",
      RFC 3736, DOI 10.17487/RFC3736,\n              April 2004, <http://www.rfc-editor.org/info/rfc3736>.\n
      \  [RFC7039]  Wu, J., Bi, J., Bagnulo, M., Baker, F., and C. Vogt, Ed.,\n              \"Source
      Address Validation Improvement (SAVI) Framework\",\n              RFC 7039,
      DOI 10.17487/RFC7039, October 2013,\n              <http://www.rfc-editor.org/info/rfc7039>.\n
      \  [RFC7341]  Sun, Q., Cui, Y., Siodelski, M., Krishnan, S., and I.\n              Farrer,
      \"DHCPv4-over-DHCPv6 (DHCP 4o6) Transport\",\n              RFC 7341, DOI 10.17487/RFC7341,
      August 2014,\n              <http://www.rfc-editor.org/info/rfc7341>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Acknowledgments\n   Special thanks to Jean-Michel Combes, Christian Vogt, Joel
    M.\n   Halpern, Eric Levy-Abegnoli, Marcelo Bagnulo Braun, Jari Arkko, Elwyn\n
    \  Davies, Barry Leiba, Ted Lemon, Leaf Yeh, Ralph Droms, and Alberto\n   Garcia
    for careful review and evaluation comments on the mechanism\n   and text.\n   Thanks
    to Mark Williams, Erik Nordmark, Mikael Abrahamsson, David\n   Harrington, Pekka
    Savola, Xing Li, Lixia Zhang, Bingyang Liu, Duanqi\n   Zhou, Robert Raszuk, Greg
    Daley, John Kaippallimalil, and Tao Lin for\n   their valuable contributions.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Jun Bi\n   Network Research Center, Tsinghua University\n
    \  Beijing  100084\n   China\n   EMail: junbi@tsinghua.edu.cn\n   Jianping Wu\n
    \  Dept. of Computer Science, Tsinghua University\n   Beijing  100084\n   China\n
    \  EMail: jianping@cernet.edu.cn\n   Guang Yao\n   Network Research Center, Tsinghua
    University\n   Beijing  100084\n   China\n   EMail: yaoguang@cernet.edu.cn\n   Fred
    Baker\n   Cisco Systems\n   Santa Barbara, CA  93117\n   United States\n   EMail:
    fred@cisco.com\n"
  title: Authors' Addresses
