- contents:
  - "           3755, 3757, 3845                                          ISC\n         3007,
    3597, 3226                                       VeriSign\n               DNS
    Security Introduction and Requirements\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Domain Name System Security Extensions (DNSSEC) add data origin\n
    \  authentication and data integrity to the Domain Name System.  This\n   document
    introduces these extensions and describes their capabilities\n   and limitations.
    \ This document also discusses the services that the\n   DNS security extensions
    do and do not provide.  Last, this document\n   describes the interrelationships
    between the documents that\n   collectively describe DNSSEC.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Definitions of Important DNSSEC Terms  . . . . . . . . .
    . .   3\n   3.  Services Provided by DNS Security  . . . . . . . . . . . . .   7\n
    \      3.1.  Data Origin Authentication and Data Integrity  . . . .   7\n       3.2.
    \ Authenticating Name and Type Non-Existence . . . . . .   9\n   4.  Services
    Not Provided by DNS Security  . . . . . . . . . . .   9\n   5.  Scope of the DNSSEC
    Document Set and Last Hop Issues . . . .   9\n   6.  Resolver Considerations  .
    . . . . . . . . . . . . . . . . .  10\n   7.  Stub Resolver Considerations . .
    . . . . . . . . . . . . . .  11\n   8.  Zone Considerations  . . . . . . . . .
    . . . . . . . . . . .  12\n       8.1.  TTL Values vs. RRSIG Validity Period .
    . . . . . . . .  13\n       8.2.  New Temporal Dependency Issues for Zones . .
    . . . . .  13\n   9.  Name Server Considerations . . . . . . . . . . . . . . .
    . .  13\n   10. DNS Security Document Family . . . . . . . . . . . . . . . .  14\n
    \  11. IANA Considerations  . . . . . . . . . . . . . . . . . . . .  15\n   12.
    Security Considerations  . . . . . . . . . . . . . . . . . .  15\n   13. Acknowledgements
    . . . . . . . . . . . . . . . . . . . . . .  17\n   14. References . . . . . .
    . . . . . . . . . . . . . . . . . . .  17\n       14.1. Normative References .
    . . . . . . . . . . . . . . . .  17\n       14.2. Informative References . . .
    . . . . . . . . . . . . .  18\n   Authors' Addresses . . . . . . . . . . . . .
    . . . . . . . . . .  20\n   Full Copyright Statement . . . . . . . . . . . . .
    . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document introduces the Domain Name System Security
    Extensions\n   (DNSSEC).  This document and its two companion documents ([RFC4034]\n
    \  and [RFC4035]) update, clarify, and refine the security extensions\n   defined
    in [RFC2535] and its predecessors.  These security extensions\n   consist of a
    set of new resource record types and modifications to\n   the existing DNS protocol
    ([RFC1035]).  The new records and protocol\n   modifications are not fully described
    in this document, but are\n   described in a family of documents outlined in Section
    10.  Sections\n   3 and 4 describe the capabilities and limitations of the security\n
    \  extensions in greater detail.  Section 5 discusses the scope of the\n   document
    set.  Sections 6, 7, 8, and 9 discuss the effect that these\n   security extensions
    will have on resolvers, stub resolvers, zones,\n   and name servers.\n   This
    document and its two companions obsolete [RFC2535], [RFC3008],\n   [RFC3090],
    [RFC3445], [RFC3655], [RFC3658], [RFC3755], [RFC3757], and\n   [RFC3845].  This
    document set also updates but does not obsolete\n   [RFC1034], [RFC1035], [RFC2136],
    [RFC2181], [RFC2308], [RFC3225],\n   [RFC3007], [RFC3597], and the portions of
    [RFC3226] that deal with\n   DNSSEC.\n   The DNS security extensions provide origin
    authentication and\n   integrity protection for DNS data, as well as a means of
    public key\n   distribution.  These extensions do not provide confidentiality.\n"
  title: 1.  Introduction
- contents:
  - "2.  Definitions of Important DNSSEC Terms\n   This section defines a number of
    terms used in this document set.\n   Because this is intended to be useful as
    a reference while reading\n   the rest of the document set, first-time readers
    may wish to skim\n   this section quickly, read the rest of this document, and
    then come\n   back to this section.\n   Authentication Chain: An alternating sequence
    of DNS public key\n      (DNSKEY) RRsets and Delegation Signer (DS) RRsets forms
    a chain of\n      signed data, with each link in the chain vouching for the next.
    \ A\n      DNSKEY RR is used to verify the signature covering a DS RR and\n      allows
    the DS RR to be authenticated.  The DS RR contains a hash\n      of another DNSKEY
    RR and this new DNSKEY RR is authenticated by\n      matching the hash in the
    DS RR.  This new DNSKEY RR in turn\n      authenticates another DNSKEY RRset and,
    in turn, some DNSKEY RR in\n      this set may be used to authenticate another
    DS RR, and so forth\n      until the chain finally ends with a DNSKEY RR whose
    corresponding\n      private key signs the desired DNS data.  For example, the
    root\n      DNSKEY RRset can be used to authenticate the DS RRset for\n      \"example.\"
    \ The \"example.\" DS RRset contains a hash that matches\n      some \"example.\"
    DNSKEY, and this DNSKEY's corresponding private\n      key signs the \"example.\"
    DNSKEY RRset.  Private key counterparts\n      of the \"example.\" DNSKEY RRset
    sign data records such as\n      \"www.example.\" and DS RRs for delegations such
    as\n      \"subzone.example.\"\n   Authentication Key: A public key that a security-aware
    resolver has\n      verified and can therefore use to authenticate data.  A\n
    \     security-aware resolver can obtain authentication keys in three\n      ways.
    \ First, the resolver is generally configured to know about\n      at least one
    public key; this configured data is usually either\n      the public key itself
    or a hash of the public key as found in the\n      DS RR (see \"trust anchor\").
    \ Second, the resolver may use an\n      authenticated public key to verify a
    DS RR and the DNSKEY RR to\n      which the DS RR refers.  Third, the resolver
    may be able to\n      determine that a new public key has been signed by the private
    key\n      corresponding to another public key that the resolver has\n      verified.
    \ Note that the resolver must always be guided by local\n      policy when deciding
    whether to authenticate a new public key,\n      even if the local policy is simply
    to authenticate any new public\n      key for which the resolver is able verify
    the signature.\n   Authoritative RRset: Within the context of a particular zone,
    an\n      RRset is \"authoritative\" if and only if the owner name of the\n      RRset
    lies within the subset of the name space that is at or below\n      the zone apex
    and at or above the cuts that separate the zone from\n      its children, if any.
    \ All RRsets at the zone apex are\n      authoritative, except for certain RRsets
    at this domain name that,\n      if present, belong to this zone's parent.  These
    RRset could\n      include a DS RRset, the NSEC RRset referencing this DS RRset
    (the\n      \"parental NSEC\"), and RRSIG RRs associated with these RRsets, all\n
    \     of which are authoritative in the parent zone.  Similarly, if this\n      zone
    contains any delegation points, only the parental NSEC RRset,\n      DS RRsets,
    and any RRSIG RRs associated with these RRsets are\n      authoritative for this
    zone.\n   Delegation Point: Term used to describe the name at the parental side\n
    \     of a zone cut.  That is, the delegation point for \"foo.example\"\n      would
    be the foo.example node in the \"example\" zone (as opposed to\n      the zone
    apex of the \"foo.example\" zone).  See also zone apex.\n   Island of Security:
    Term used to describe a signed, delegated zone\n      that does not have an authentication
    chain from its delegating\n      parent.  That is, there is no DS RR containing
    a hash of a DNSKEY\n      RR for the island in its delegating parent zone (see
    [RFC4034]).\n      An island of security is served by security-aware name servers
    and\n      may provide authentication chains to any delegated child zones.\n      Responses
    from an island of security or its descendents can only\n      be authenticated
    if its authentication keys can be authenticated\n      by some trusted means out
    of band from the DNS protocol.\n   Key Signing Key (KSK): An authentication key
    that corresponds to a\n      private key used to sign one or more other authentication
    keys for\n      a given zone.  Typically, the private key corresponding to a key\n
    \     signing key will sign a zone signing key, which in turn has a\n      corresponding
    private key that will sign other zone data.  Local\n      policy may require that
    the zone signing key be changed\n      frequently, while the key signing key may
    have a longer validity\n      period in order to provide a more stable secure
    entry point into\n      the zone.  Designating an authentication key as a key
    signing key\n      is purely an operational issue: DNSSEC validation does not\n
    \     distinguish between key signing keys and other DNSSEC\n      authentication
    keys, and it is possible to use a single key as\n      both a key signing key
    and a zone signing key.  Key signing keys\n      are discussed in more detail
    in [RFC3757].  Also see zone signing\n      key.\n   Non-Validating Security-Aware
    Stub Resolver: A security-aware stub\n      resolver that trusts one or more security-aware
    recursive name\n      servers to perform most of the tasks discussed in this document\n
    \     set on its behalf.  In particular, a non-validating security-aware\n      stub
    resolver is an entity that sends DNS queries, receives DNS\n      responses, and
    is capable of establishing an appropriately secured\n      channel to a security-aware
    recursive name server that will\n      provide these services on behalf of the
    security-aware stub\n      resolver.  See also security-aware stub resolver, validating\n
    \     security-aware stub resolver.\n   Non-Validating Stub Resolver: A less tedious
    term for a\n      non-validating security-aware stub resolver.\n   Security-Aware
    Name Server: An entity acting in the role of a name\n      server (defined in
    section 2.4 of [RFC1034]) that understands the\n      DNS security extensions
    defined in this document set.  In\n      particular, a security-aware name server
    is an entity that\n      receives DNS queries, sends DNS responses, supports the
    EDNS0\n      ([RFC2671]) message size extension and the DO bit ([RFC3225]), and\n
    \     supports the RR types and message header bits defined in this\n      document
    set.\n   Security-Aware Recursive Name Server: An entity that acts in both the\n
    \     security-aware name server and security-aware resolver roles.  A\n      more
    cumbersome but equivalent phrase would be \"a security-aware\n      name server
    that offers recursive service\".\n   Security-Aware Resolver: An entity acting
    in the role of a resolver\n      (defined in section 2.4 of [RFC1034]) that understands
    the DNS\n      security extensions defined in this document set.  In particular,\n
    \     a security-aware resolver is an entity that sends DNS queries,\n      receives
    DNS responses, supports the EDNS0 ([RFC2671]) message\n      size extension and
    the DO bit ([RFC3225]), and is capable of using\n      the RR types and message
    header bits defined in this document set\n      to provide DNSSEC services.\n
    \  Security-Aware Stub Resolver: An entity acting in the role of a stub\n      resolver
    (defined in section 5.3.1 of [RFC1034]) that has enough\n      of an understanding
    the DNS security extensions defined in this\n      document set to provide additional
    services not available from a\n      security-oblivious stub resolver.  Security-aware
    stub resolvers\n      may be either \"validating\" or \"non-validating\", depending
    on\n      whether the stub resolver attempts to verify DNSSEC signatures on\n
    \     its own or trusts a friendly security-aware name server to do so.\n      See
    also validating stub resolver, non-validating stub resolver.\n   Security-Oblivious
    <anything>: An <anything> that is not\n      \"security-aware\".\n   Signed Zone:
    A zone whose RRsets are signed and that contains\n      properly constructed DNSKEY,
    Resource Record Signature (RRSIG),\n      Next Secure (NSEC), and (optionally)
    DS records.\n   Trust Anchor: A configured DNSKEY RR or DS RR hash of a DNSKEY
    RR.  A\n      validating security-aware resolver uses this public key or hash
    as\n      a starting point for building the authentication chain to a signed\n
    \     DNS response.  In general, a validating resolver will have to\n      obtain
    the initial values of its trust anchors via some secure or\n      trusted means
    outside the DNS protocol.  Presence of a trust\n      anchor also implies that
    the resolver should expect the zone to\n      which the trust anchor points to
    be signed.\n   Unsigned Zone: A zone that is not signed.\n   Validating Security-Aware
    Stub Resolver: A security-aware resolver\n      that sends queries in recursive
    mode but that performs signature\n      validation on its own rather than just
    blindly trusting an\n      upstream security-aware recursive name server.  See
    also\n      security-aware stub resolver, non-validating security-aware stub\n
    \     resolver.\n   Validating Stub Resolver: A less tedious term for a validating\n
    \     security-aware stub resolver.\n   Zone Apex: Term used to describe the name
    at the child's side of a\n      zone cut.  See also delegation point.\n   Zone
    Signing Key (ZSK): An authentication key that corresponds to a\n      private
    key used to sign a zone.  Typically, a zone signing key\n      will be part of
    the same DNSKEY RRset as the key signing key whose\n      corresponding private
    key signs this DNSKEY RRset, but the zone\n      signing key is used for a slightly
    different purpose and may\n      differ from the key signing key in other ways,
    such as validity\n      lifetime.  Designating an authentication key as a zone
    signing key\n      is purely an operational issue; DNSSEC validation does not\n
    \     distinguish between zone signing keys and other DNSSEC\n      authentication
    keys, and it is possible to use a single key as\n      both a key signing key
    and a zone signing key.  See also key\n      signing key.\n"
  title: 2.  Definitions of Important DNSSEC Terms
- contents:
  - "3.  Services Provided by DNS Security\n   The Domain Name System (DNS) security
    extensions provide origin\n   authentication and integrity assurance services
    for DNS data,\n   including mechanisms for authenticated denial of existence of
    DNS\n   data.  These mechanisms are described below.\n   These mechanisms require
    changes to the DNS protocol.  DNSSEC adds\n   four new resource record types:
    Resource Record Signature (RRSIG),\n   DNS Public Key (DNSKEY), Delegation Signer
    (DS), and Next Secure\n   (NSEC).  It also adds two new message header bits: Checking
    Disabled\n   (CD) and Authenticated Data (AD).  In order to support the larger
    DNS\n   message sizes that result from adding the DNSSEC RRs, DNSSEC also\n   requires
    EDNS0 support ([RFC2671]).  Finally, DNSSEC requires support\n   for the DNSSEC
    OK (DO) EDNS header bit ([RFC3225]) so that a\n   security-aware resolver can
    indicate in its queries that it wishes to\n   receive DNSSEC RRs in response messages.\n
    \  These services protect against most of the threats to the Domain Name\n   System
    described in [RFC3833].  Please see Section 12 for a\n   discussion of the limitations
    of these extensions.\n"
  - contents:
    - "3.1.  Data Origin Authentication and Data Integrity\n   DNSSEC provides authentication
      by associating cryptographically\n   generated digital signatures with DNS RRsets.
      \ These digital\n   signatures are stored in a new resource record, the RRSIG
      record.\n   Typically, there will be a single private key that signs a zone's\n
      \  data, but multiple keys are possible.  For example, there may be keys\n   for
      each of several different digital signature algorithms.  If a\n   security-aware
      resolver reliably learns a zone's public key, it can\n   authenticate that zone's
      signed data.  An important DNSSEC concept is\n   that the key that signs a zone's
      data is associated with the zone\n   itself and not with the zone's authoritative
      name servers.  (Public\n   keys for DNS transaction authentication mechanisms
      may also appear in\n   zones, as described in [RFC2931], but DNSSEC itself is
      concerned with\n   object security of DNS data, not channel security of DNS\n
      \  transactions.  The keys associated with transaction security may be\n   stored
      in different RR types.  See [RFC3755] for details.)\n   A security-aware resolver
      can learn a zone's public key either by\n   having a trust anchor configured
      into the resolver or by normal DNS\n   resolution.  To allow the latter, public
      keys are stored in a new\n   type of resource record, the DNSKEY RR.  Note that
      the private keys\n   used to sign zone data must be kept secure and should be
      stored\n   offline when practical.  To discover a public key reliably via DNS\n
      \  resolution, the target key itself has to be signed by either a\n   configured
      authentication key or another key that has been\n   authenticated previously.
      \ Security-aware resolvers authenticate zone\n   information by forming an authentication
      chain from a newly learned\n   public key back to a previously known authentication
      public key,\n   which in turn either has been configured into the resolver or
      must\n   have been learned and verified previously.  Therefore, the resolver\n
      \  must be configured with at least one trust anchor.\n   If the configured
      trust anchor is a zone signing key, then it will\n   authenticate the associated
      zone; if the configured key is a key\n   signing key, it will authenticate a
      zone signing key.  If the\n   configured trust anchor is the hash of a key rather
      than the key\n   itself, the resolver may have to obtain the key via a DNS query.
      \ To\n   help security-aware resolvers establish this authentication chain,\n
      \  security-aware name servers attempt to send the signature(s) needed\n   to
      authenticate a zone's public key(s) in the DNS reply message along\n   with
      the public key itself, provided that there is space available in\n   the message.\n
      \  The Delegation Signer (DS) RR type simplifies some of the\n   administrative
      tasks involved in signing delegations across\n   organizational boundaries.
      \ The DS RRset resides at a delegation\n   point in a parent zone and indicates
      the public key(s) corresponding\n   to the private key(s) used to self-sign
      the DNSKEY RRset at the\n   delegated child zone's apex.  The administrator
      of the child zone, in\n   turn, uses the private key(s) corresponding to one
      or more of the\n   public keys in this DNSKEY RRset to sign the child zone's
      data.  The\n   typical authentication chain is therefore\n   DNSKEY->[DS->DNSKEY]*->RRset,
      where \"*\" denotes zero or more\n   DS->DNSKEY subchains.  DNSSEC permits more
      complex authentication\n   chains, such as additional layers of DNSKEY RRs signing
      other DNSKEY\n   RRs within a zone.\n   A security-aware resolver normally constructs
      this authentication\n   chain from the root of the DNS hierarchy down to the
      leaf zones based\n   on configured knowledge of the public key for the root.
      \ Local\n   policy, however, may also allow a security-aware resolver to use
      one\n   or more configured public keys (or hashes of public keys) other than\n
      \  the root public key, may not provide configured knowledge of the root\n   public
      key, or may prevent the resolver from using particular public\n   keys for arbitrary
      reasons, even if those public keys are properly\n   signed with verifiable signatures.
      \ DNSSEC provides mechanisms by\n   which a security-aware resolver can determine
      whether an RRset's\n   signature is \"valid\" within the meaning of DNSSEC.
      \ In the final\n   analysis, however, authenticating both DNS keys and data
      is a matter\n   of local policy, which may extend or even override the protocol\n
      \  extensions defined in this document set.  See Section 5 for further\n   discussion.\n"
    title: 3.1.  Data Origin Authentication and Data Integrity
  - contents:
    - "3.2.  Authenticating Name and Type Non-Existence\n   The security mechanism
      described in Section 3.1 only provides a way\n   to sign existing RRsets in
      a zone.  The problem of providing negative\n   responses with the same level
      of authentication and integrity\n   requires the use of another new resource
      record type, the NSEC\n   record.  The NSEC record allows a security-aware resolver
      to\n   authenticate a negative reply for either name or type non-existence\n
      \  with the same mechanisms used to authenticate other DNS replies.  Use\n   of
      NSEC records requires a canonical representation and ordering for\n   domain
      names in zones.  Chains of NSEC records explicitly describe\n   the gaps, or
      \"empty space\", between domain names in a zone and list\n   the types of RRsets
      present at existing names.  Each NSEC record is\n   signed and authenticated
      using the mechanisms described in Section\n   3.1.\n"
    title: 3.2.  Authenticating Name and Type Non-Existence
  title: 3.  Services Provided by DNS Security
- contents:
  - "4.  Services Not Provided by DNS Security\n   DNS was originally designed with
    the assumptions that the DNS will\n   return the same answer to any given query
    regardless of who may have\n   issued the query, and that all data in the DNS
    is thus visible.\n   Accordingly, DNSSEC is not designed to provide confidentiality,\n
    \  access control lists, or other means of differentiating between\n   inquirers.\n
    \  DNSSEC provides no protection against denial of service attacks.\n   Security-aware
    resolvers and security-aware name servers are\n   vulnerable to an additional
    class of denial of service attacks based\n   on cryptographic operations.  Please
    see Section 12 for details.\n   The DNS security extensions provide data and origin
    authentication\n   for DNS data.  The mechanisms outlined above are not designed
    to\n   protect operations such as zone transfers and dynamic update\n   ([RFC2136],
    [RFC3007]).  Message authentication schemes described in\n   [RFC2845] and [RFC2931]
    address security operations that pertain to\n   these transactions.\n"
  title: 4.  Services Not Provided by DNS Security
- contents:
  - "5.  Scope of the DNSSEC Document Set and Last Hop Issues\n   The specification
    in this document set defines the behavior for zone\n   signers and security-aware
    name servers and resolvers in such a way\n   that the validating entities can
    unambiguously determine the state of\n   the data.\n   A validating resolver can
    determine the following 4 states:\n   Secure: The validating resolver has a trust
    anchor, has a chain of\n      trust, and is able to verify all the signatures
    in the response.\n   Insecure: The validating resolver has a trust anchor, a chain
    of\n      trust, and, at some delegation point, signed proof of the\n      non-existence
    of a DS record.  This indicates that subsequent\n      branches in the tree are
    provably insecure.  A validating resolver\n      may have a local policy to mark
    parts of the domain space as\n      insecure.\n   Bogus: The validating resolver
    has a trust anchor and a secure\n      delegation indicating that subsidiary data
    is signed, but the\n      response fails to validate for some reason: missing
    signatures,\n      expired signatures, signatures with unsupported algorithms,
    data\n      missing that the relevant NSEC RR says should be present, and so\n
    \     forth.\n   Indeterminate: There is no trust anchor that would indicate that
    a\n      specific portion of the tree is secure.  This is the default\n      operation
    mode.\n   This specification only defines how security-aware name servers can\n
    \  signal non-validating stub resolvers that data was found to be bogus\n   (using
    RCODE=2, \"Server Failure\"; see [RFC4035]).\n   There is a mechanism for security-aware
    name servers to signal\n   security-aware stub resolvers that data was found to
    be secure (using\n   the AD bit; see [RFC4035]).\n   This specification does not
    define a format for communicating why\n   responses were found to be bogus or
    marked as insecure.  The current\n   signaling mechanism does not distinguish
    between indeterminate and\n   insecure states.\n   A method for signaling advanced
    error codes and policy between a\n   security-aware stub resolver and security-aware
    recursive nameservers\n   is a topic for future work, as is the interface between
    a security-\n   aware resolver and the applications that use it.  Note, however,
    that\n   the lack of the specification of such communication does not prohibit\n
    \  deployment of signed zones or the deployment of security aware\n   recursive
    name servers that prohibit propagation of bogus data to the\n   applications.\n"
  title: 5.  Scope of the DNSSEC Document Set and Last Hop Issues
- contents:
  - "6.  Resolver Considerations\n   A security-aware resolver has to be able to perform
    cryptographic\n   functions necessary to verify digital signatures using at least
    the\n   mandatory-to-implement algorithm(s).  Security-aware resolvers must\n
    \  also be capable of forming an authentication chain from a newly\n   learned
    zone back to an authentication key, as described above.  This\n   process might
    require additional queries to intermediate DNS zones to\n   obtain necessary DNSKEY,
    DS, and RRSIG records.  A security-aware\n   resolver should be configured with
    at least one trust anchor as the\n   starting point from which it will attempt
    to establish authentication\n   chains.\n   If a security-aware resolver is separated
    from the relevant\n   authoritative name servers by a recursive name server or
    by any sort\n   of intermediary device that acts as a proxy for DNS, and if the\n
    \  recursive name server or intermediary device is not security-aware,\n   the
    security-aware resolver may not be capable of operating in a\n   secure mode.
    \ For example, if a security-aware resolver's packets are\n   routed through a
    network address translation (NAT) device that\n   includes a DNS proxy that is
    not security-aware, the security-aware\n   resolver may find it difficult or impossible
    to obtain or validate\n   signed DNS data.  The security-aware resolver may have
    a particularly\n   difficult time obtaining DS RRs in such a case, as DS RRs do
    not\n   follow the usual DNS rules for ownership of RRs at zone cuts.  Note\n
    \  that this problem is not specific to NATs: any security-oblivious DNS\n   software
    of any kind between the security-aware resolver and the\n   authoritative name
    servers will interfere with DNSSEC.\n   If a security-aware resolver must rely
    on an unsigned zone or a name\n   server that is not security aware, the resolver
    may not be able to\n   validate DNS responses and will need a local policy on
    whether to\n   accept unverified responses.\n   A security-aware resolver should
    take a signature's validation period\n   into consideration when determining the
    TTL of data in its cache, to\n   avoid caching signed data beyond the validity
    period of the\n   signature.  However, it should also allow for the possibility
    that\n   the security-aware resolver's own clock is wrong.  Thus, a\n   security-aware
    resolver that is part of a security-aware recursive\n   name server will have
    to pay careful attention to the DNSSEC\n   \"checking disabled\" (CD) bit ([RFC4034]).
    \ This is in order to avoid\n   blocking valid signatures from getting through
    to other\n   security-aware resolvers that are clients of this recursive name\n
    \  server.  See [RFC4035] for how a secure recursive server handles\n   queries
    with the CD bit set.\n"
  title: 6.  Resolver Considerations
- contents:
  - "7.  Stub Resolver Considerations\n   Although not strictly required to do so
    by the protocol, most DNS\n   queries originate from stub resolvers.  Stub resolvers,
    by\n   definition, are minimal DNS resolvers that use recursive query mode\n   to
    offload most of the work of DNS resolution to a recursive name\n   server.  Given
    the widespread use of stub resolvers, the DNSSEC\n   architecture has to take
    stub resolvers into account, but the\n   security features needed in a stub resolver
    differ in some respects\n   from those needed in a security-aware iterative resolver.\n
    \  Even a security-oblivious stub resolver may benefit from DNSSEC if\n   the
    recursive name servers it uses are security-aware, but for the\n   stub resolver
    to place any real reliance on DNSSEC services, the stub\n   resolver must trust
    both the recursive name servers in question and\n   the communication channels
    between itself and those name servers.\n   The first of these issues is a local
    policy issue: in essence, a\n   security-oblivious stub resolver has no choice
    but to place itself at\n   the mercy of the recursive name servers that it uses,
    as it does not\n   perform DNSSEC validity checks on its own.  The second issue
    requires\n   some kind of channel security mechanism; proper use of DNS\n   transaction
    authentication mechanisms such as SIG(0) ([RFC2931]) or\n   TSIG ([RFC2845]) would
    suffice, as would appropriate use of IPsec.\n   Particular implementations may
    have other choices available, such as\n   operating system specific interprocess
    communication mechanisms.\n   Confidentiality is not needed for this channel,
    but data integrity\n   and message authentication are.\n   A security-aware stub
    resolver that does trust both its recursive\n   name servers and its communication
    channel to them may choose to\n   examine the setting of the Authenticated Data
    (AD) bit in the message\n   header of the response messages it receives.  The
    stub resolver can\n   use this flag bit as a hint to find out whether the recursive
    name\n   server was able to validate signatures for all of the data in the\n   Answer
    and Authority sections of the response.\n   There is one more step that a security-aware
    stub resolver can take\n   if, for whatever reason, it is not able to establish
    a useful trust\n   relationship with the recursive name servers that it uses:
    it can\n   perform its own signature validation by setting the Checking Disabled\n
    \  (CD) bit in its query messages.  A validating stub resolver is thus\n   able
    to treat the DNSSEC signatures as trust relationships between\n   the zone administrators
    and the stub resolver itself.\n"
  title: 7.  Stub Resolver Considerations
- contents:
  - "8.  Zone Considerations\n   There are several differences between signed and
    unsigned zones.  A\n   signed zone will contain additional security-related records
    (RRSIG,\n   DNSKEY, DS, and NSEC records).  RRSIG and NSEC records may be\n   generated
    by a signing process prior to serving the zone.  The RRSIG\n   records that accompany
    zone data have defined inception and\n   expiration times that establish a validity
    period for the signatures\n   and the zone data the signatures cover.\n"
  - contents:
    - "8.1.  TTL Values vs. RRSIG Validity Period\n   It is important to note the
      distinction between a RRset's TTL value\n   and the signature validity period
      specified by the RRSIG RR covering\n   that RRset.  DNSSEC does not change the
      definition or function of the\n   TTL value, which is intended to maintain database
      coherency in\n   caches.  A caching resolver purges RRsets from its cache no
      later\n   than the end of the time period specified by the TTL fields of those\n
      \  RRsets, regardless of whether the resolver is security-aware.\n   The inception
      and expiration fields in the RRSIG RR ([RFC4034]), on\n   the other hand, specify
      the time period during which the signature\n   can be used to validate the covered
      RRset.  The signatures associated\n   with signed zone data are only valid for
      the time period specified by\n   these fields in the RRSIG RRs in question.
      \ TTL values cannot extend\n   the validity period of signed RRsets in a resolver's
      cache, but the\n   resolver may use the time remaining before expiration of
      the\n   signature validity period of a signed RRset as an upper bound for the\n
      \  TTL of the signed RRset and its associated RRSIG RR in the resolver's\n   cache.\n"
    title: 8.1.  TTL Values vs. RRSIG Validity Period
  - contents:
    - "8.2.  New Temporal Dependency Issues for Zones\n   Information in a signed
      zone has a temporal dependency that did not\n   exist in the original DNS protocol.
      \ A signed zone requires regular\n   maintenance to ensure that each RRset in
      the zone has a current valid\n   RRSIG RR.  The signature validity period of
      an RRSIG RR is an\n   interval during which the signature for one particular
      signed RRset\n   can be considered valid, and the signatures of different RRsets
      in a\n   zone may expire at different times.  Re-signing one or more RRsets
      in\n   a zone will change one or more RRSIG RRs, which will in turn require\n
      \  incrementing the zone's SOA serial number to indicate that a zone\n   change
      has occurred and re-signing the SOA RRset itself.  Thus,\n   re-signing any
      RRset in a zone may also trigger DNS NOTIFY messages\n   and zone transfer operations.\n"
    title: 8.2.  New Temporal Dependency Issues for Zones
  title: 8.  Zone Considerations
- contents:
  - "9.  Name Server Considerations\n   A security-aware name server should include
    the appropriate DNSSEC\n   records (RRSIG, DNSKEY, DS, and NSEC) in all responses
    to queries\n   from resolvers that have signaled their willingness to receive
    such\n   records via use of the DO bit in the EDNS header, subject to message\n
    \  size limitations.  Because inclusion of these DNSSEC RRs could easily\n   cause
    UDP message truncation and fallback to TCP, a security-aware\n   name server must
    also support the EDNS \"sender's UDP payload\"\n   mechanism.\n   If possible,
    the private half of each DNSSEC key pair should be kept\n   offline, but this
    will not be possible for a zone for which DNS\n   dynamic update has been enabled.
    \ In the dynamic update case, the\n   primary master server for the zone will
    have to re-sign the zone when\n   it is updated, so the private key corresponding
    to the zone signing\n   key will have to be kept online.  This is an example of
    a situation\n   in which the ability to separate the zone's DNSKEY RRset into
    zone\n   signing key(s) and key signing key(s) may be useful, as the key\n   signing
    key(s) in such a case can still be kept offline and may have\n   a longer useful
    lifetime than the zone signing key(s).\n   By itself, DNSSEC is not enough to
    protect the integrity of an entire\n   zone during zone transfer operations, as
    even a signed zone contains\n   some unsigned, nonauthoritative data if the zone
    has any children.\n   Therefore, zone maintenance operations will require some
    additional\n   mechanisms (most likely some form of channel security, such as
    TSIG,\n   SIG(0), or IPsec).\n"
  title: 9.  Name Server Considerations
- contents:
  - "10.  DNS Security Document Family\n   The DNSSEC document set can be partitioned
    into several main groups,\n   under the larger umbrella of the DNS base protocol
    documents.\n   The \"DNSSEC protocol document set\" refers to the three documents
    that\n   form the core of the DNS security extensions:\n   1.  DNS Security Introduction
    and Requirements (this document)\n   2.  Resource Records for DNS Security Extensions
    [RFC4034]\n   3.  Protocol Modifications for the DNS Security Extensions [RFC4035]\n
    \  Additionally, any document that would add to or change the core DNS\n   Security
    extensions would fall into this category.  This includes any\n   future work on
    the communication between security-aware stub\n   resolvers and upstream security-aware
    recursive name servers.\n   The \"Digital Signature Algorithm Specification\"
    document set refers\n   to the group of documents that describe how specific digital\n
    \  signature algorithms should be implemented to fit the DNSSEC resource\n   record
    format.  Each document in this set deals with a specific\n   digital signature
    algorithm.  Please see the appendix on \"DNSSEC\n   Algorithm and Digest Types\"
    in [RFC4034] for a list of the algorithms\n   that were defined when this core
    specification was written.\n   The \"Transaction Authentication Protocol\" document
    set refers to the\n   group of documents that deal with DNS message authentication,\n
    \  including secret key establishment and verification.  Although not\n   strictly
    part of the DNSSEC specification as defined in this set of\n   documents, this
    group is noted because of its relationship to DNSSEC.\n   The final document set,
    \"New Security Uses\", refers to documents that\n   seek to use proposed DNS Security
    extensions for other security\n   related purposes.  DNSSEC does not provide any
    direct security for\n   these new uses but may be used to support them.  Documents
    that fall\n   in this category include those describing the use of DNS in the\n
    \  storage and distribution of certificates ([RFC2538]).\n"
  title: 10.  DNS Security Document Family
- contents:
  - "11.  IANA Considerations\n   This overview document introduces no new IANA considerations.
    \ Please\n   see [RFC4034] for a complete review of the IANA considerations\n
    \  introduced by DNSSEC.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   This document introduces DNS security extensions
    and describes the\n   document set that contains the new security records and
    DNS protocol\n   modifications.  The extensions provide data origin authentication
    and\n   data integrity using digital signatures over resource record sets.\n   This
    section discusses the limitations of these extensions.\n   In order for a security-aware
    resolver to validate a DNS response,\n   all zones along the path from the trusted
    starting point to the zone\n   containing the response zones must be signed, and
    all name servers\n   and resolvers involved in the resolution process must be\n
    \  security-aware, as defined in this document set.  A security-aware\n   resolver
    cannot verify responses originating from an unsigned zone,\n   from a zone not
    served by a security-aware name server, or for any\n   DNS data that the resolver
    is only able to obtain through a recursive\n   name server that is not security-aware.
    \ If there is a break in the\n   authentication chain such that a security-aware
    resolver cannot\n   obtain and validate the authentication keys it needs, then
    the\n   security-aware resolver cannot validate the affected DNS data.\n   This
    document briefly discusses other methods of adding security to a\n   DNS query,
    such as using a channel secured by IPsec or using a DNS\n   transaction authentication
    mechanism such as TSIG ([RFC2845]) or\n   SIG(0) ([RFC2931]), but transaction
    security is not part of DNSSEC\n   per se.\n   A non-validating security-aware
    stub resolver, by definition, does\n   not perform DNSSEC signature validation
    on its own and thus is\n   vulnerable both to attacks on (and by) the security-aware
    recursive\n   name servers that perform these checks on its behalf and to attacks\n
    \  on its communication with those security-aware recursive name\n   servers.
    \ Non-validating security-aware stub resolvers should use\n   some form of channel
    security to defend against the latter threat.\n   The only known defense against
    the former threat would be for the\n   security-aware stub resolver to perform
    its own signature validation,\n   at which point, again by definition, it would
    no longer be a\n   non-validating security-aware stub resolver.\n   DNSSEC does
    not protect against denial of service attacks.  DNSSEC\n   makes DNS vulnerable
    to a new class of denial of service attacks\n   based on cryptographic operations
    against security-aware resolvers\n   and security-aware name servers, as an attacker
    can attempt to use\n   DNSSEC mechanisms to consume a victim's resources.  This
    class of\n   attacks takes at least two forms.  An attacker may be able to consume\n
    \  resources in a security-aware resolver's signature validation code by\n   tampering
    with RRSIG RRs in response messages or by constructing\n   needlessly complex
    signature chains.  An attacker may also be able to\n   consume resources in a
    security-aware name server that supports DNS\n   dynamic update, by sending a
    stream of update messages that force the\n   security-aware name server to re-sign
    some RRsets in the zone more\n   frequently than would otherwise be necessary.\n
    \  Due to a deliberate design choice, DNSSEC does not provide\n   confidentiality.\n
    \  DNSSEC introduces the ability for a hostile party to enumerate all\n   the
    names in a zone by following the NSEC chain.  NSEC RRs assert\n   which names
    do not exist in a zone by linking from existing name to\n   existing name along
    a canonical ordering of all the names within a\n   zone.  Thus, an attacker can
    query these NSEC RRs in sequence to\n   obtain all the names in a zone.  Although
    this is not an attack on\n   the DNS itself, it could allow an attacker to map
    network hosts or\n   other resources by enumerating the contents of a zone.\n
    \  DNSSEC introduces significant additional complexity to the DNS and\n   thus
    introduces many new opportunities for implementation bugs and\n   misconfigured
    zones.  In particular, enabling DNSSEC signature\n   validation in a resolver
    may cause entire legitimate zones to become\n   effectively unreachable due to
    DNSSEC configuration errors or bugs.\n   DNSSEC does not protect against tampering
    with unsigned zone data.\n   Non-authoritative data at zone cuts (glue and NS
    RRs in the parent\n   zone) are not signed.  This does not pose a problem when
    validating\n   the authentication chain, but it does mean that the non-authoritative\n
    \  data itself is vulnerable to tampering during zone transfer\n   operations.
    \ Thus, while DNSSEC can provide data origin\n   authentication and data integrity
    for RRsets, it cannot do so for\n   zones, and other mechanisms (such as TSIG,
    SIG(0), or IPsec) must be\n   used to protect zone transfer operations.\n   Please
    see [RFC4034] and [RFC4035] for additional security\n   considerations.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Acknowledgements\n   This document was created from the input and ideas
    of the members of\n   the DNS Extensions Working Group.  Although explicitly listing\n
    \  everyone who has contributed during the decade in which DNSSEC has\n   been
    under development would be impossible, the editors would\n   particularly like
    to thank the following people for their\n   contributions to and comments on this
    document set: Jaap Akkerhuis,\n   Mark Andrews, Derek Atkins, Roy Badami, Alan
    Barrett, Dan Bernstein,\n   David Blacka, Len Budney, Randy Bush, Francis Dupont,
    Donald\n   Eastlake, Robert Elz, Miek Gieben, Michael Graff, Olafur Gudmundsson,\n
    \  Gilles Guette, Andreas Gustafsson, Jun-ichiro Itojun Hagino, Phillip\n   Hallam-Baker,
    Bob Halley, Ted Hardie, Walter Howard, Greg Hudson,\n   Christian Huitema, Johan
    Ihren, Stephen Jacob, Jelte Jansen, Simon\n   Josefsson, Andris Kalnozols, Peter
    Koch, Olaf Kolkman, Mark Kosters,\n   Suresh Krishnaswamy, Ben Laurie, David Lawrence,
    Ted Lemon, Ed Lewis,\n   Ted Lindgreen, Josh Littlefield, Rip Loomis, Bill Manning,
    Russ\n   Mundy, Thomas Narten, Mans Nilsson, Masataka Ohta, Mike Patton, Rob\n
    \  Payne, Jim Reid, Michael Richardson, Erik Rozendaal, Marcos Sanz,\n   Pekka
    Savola, Jakob Schlyter, Mike StJohns, Paul Vixie, Sam Weiler,\n   Brian Wellington,
    and Suzanne Woolf.\n   No doubt the above list is incomplete.  We apologize to
    anyone we\n   left out.\n"
  title: 13.  Acknowledgements
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names
      - concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n
      \  [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC2535]  Eastlake 3rd, D., \"Domain Name
      System Security\n              Extensions\", RFC 2535, March 1999.\n   [RFC2671]
      \ Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\", RFC\n              2671,
      August 1999.\n   [RFC3225]  Conrad, D., \"Indicating Resolver Support of DNSSEC\",
      RFC\n              3225, December 2001.\n   [RFC3226]  Gudmundsson, O., \"DNSSEC
      and IPv6 A6 aware server/resolver\n              message size requirements\",
      RFC 3226, December 2001.\n   [RFC3445]  Massey, D. and S. Rose, \"Limiting the
      Scope of the KEY\n              Resource Record (RR)\", RFC 3445, December 2002.\n
      \  [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Resource Records for DNS Security Extensions\", RFC\n              4034, March
      2005.\n   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n
      \             Rose, \"Protocol Modifications for the DNS Security\n              Extensions\",
      RFC 4035, March 2005.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [RFC2136]  Vixie, P., Thomson, S., Rekhter,
      Y., and J. Bound,\n              \"Dynamic Updates in the Domain Name System
      (DNS UPDATE)\",\n              RFC 2136, April 1997.\n   [RFC2181]  Elz, R.
      and R. Bush, \"Clarifications to the DNS\n              Specification\", RFC
      2181, July 1997.\n   [RFC2308]  Andrews, M., \"Negative Caching of DNS Queries
      (DNS\n              NCACHE)\", RFC 2308, March 1998.\n   [RFC2538]  Eastlake
      3rd, D. and O. Gudmundsson, \"Storing Certificates\n              in the Domain
      Name System (DNS)\", RFC 2538, March 1999.\n   [RFC2845]  Vixie, P., Gudmundsson,
      O., Eastlake 3rd, D., and B.\n              Wellington, \"Secret Key Transaction
      Authentication for DNS\n              (TSIG)\", RFC 2845, May 2000.\n   [RFC2931]
      \ Eastlake 3rd, D., \"DNS Request and Transaction Signatures\n              (
      SIG(0)s )\", RFC 2931, September 2000.\n   [RFC3007]  Wellington, B., \"Secure
      Domain Name System (DNS) Dynamic\n              Update\", RFC 3007, November
      2000.\n   [RFC3008]  Wellington, B., \"Domain Name System Security (DNSSEC)\n
      \             Signing Authority\", RFC 3008, November 2000.\n   [RFC3090]  Lewis,
      E., \"DNS Security Extension Clarification on Zone\n              Status\",
      RFC 3090, March 2001.\n   [RFC3597]  Gustafsson, A., \"Handling of Unknown DNS
      Resource Record\n              (RR) Types\", RFC 3597, September 2003.\n   [RFC3655]
      \ Wellington, B. and O. Gudmundsson, \"Redefinition of DNS\n              Authenticated
      Data (AD) bit\", RFC 3655, November 2003.\n   [RFC3658]  Gudmundsson, O., \"Delegation
      Signer (DS) Resource Record\n              (RR)\", RFC 3658, December 2003.\n
      \  [RFC3755]  Weiler, S., \"Legacy Resolver Compatibility for Delegation\n              Signer
      (DS)\", RFC 3755, May 2004.\n   [RFC3757]  Kolkman, O., Schlyter, J., and E.
      Lewis, \"Domain Name\n              System KEY (DNSKEY) Resource Record (RR)
      Secure Entry\n              Point (SEP) Flag\", RFC 3757, April 2004.\n   [RFC3833]
      \ Atkins, D. and R. Austein, \"Threat Analysis of the Domain\n              Name
      System (DNS)\", RFC 3833, August 2004.\n   [RFC3845]  Schlyter, J., \"DNS Security
      (DNSSEC) NextSECure (NSEC)\n              RDATA Format\", RFC 3845, August 2004.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Authors' Addresses\n   Roy Arends\n   Telematica Instituut\n   Brouwerijstraat
    1\n   7523 XC  Enschede\n   NL\n   EMail: roy.arends@telin.nl\n   Rob Austein\n
    \  Internet Systems Consortium\n   950 Charter Street\n   Redwood City, CA  94063\n
    \  USA\n   EMail: sra@isc.org\n   Matt Larson\n   VeriSign, Inc.\n   21345 Ridgetop
    Circle\n   Dulles, VA  20166-6503\n   USA\n   EMail: mlarson@verisign.com\n   Dan
    Massey\n   Colorado State University\n   Department of Computer Science\n   Fort
    Collins, CO 80523-1873\n   EMail: massey@cs.colostate.edu\n   Scott Rose\n   National
    Institute for Standards and Technology\n   100 Bureau Drive\n   Gaithersburg,
    MD  20899-8920\n   USA\n   EMail: scott.rose@nist.gov\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
