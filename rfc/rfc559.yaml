- title: __initial_text__
  contents:
  - "       Comments on the new TELNET Protocol and its Implementation\n     We at\
    \ MIT-DN have implemented the new TELNET protocol (both server\nand user).  This\
    \ RFC describes our experience with the implementation\n(particularly the use\
    \ of GO AHEAD) and in bringing the new User and\nServer TELNET's in operation\
    \ (the new TELNET is not compatible with the\nold).  We have a few suggestions\
    \ here which should help other\nimplementors and lead to a smoother transition\
    \ to the new protocol.\nI. OUR TELNET SERVER IMPLEMENTATION\n     Our new server\
    \ TELNET accepts both the \"old\" and the \"new\" TELNET\n\"control sequences\"\
    .  Currently we have the ECHO and the \"Suppress Go\nAhead\" options implemented\
    \ and do the \"right thing\" to varying degrees\nwith the Interrupt Process (IP),\
    \ Erase Character (EC), Abort Output\n(AO), Are You There (AYT), Break, and Synch\
    \ character sequences.\n A. The ECHO Option\n     The TELNET server comes up in\
    \ the default local echo mode and\naccepts both the old and the new TELNET control\
    \ sequences.  The server\nstarts the negotiation for remote echo (server echoing)\
    \ by sending the\nsequence \"IAC WILL ECHO\" but changes the echo mode only when\
    \ an\naffirmative \"IAC DO ECHO\" is received.  After the cutoff date for old\n\
    protocol we will stop \"honoring\" the old TELNET control sequences.\n B. The\
    \ Go Ahead and Suppress GA option\n     The server comes up in the send GA mode\
    \ and transmits the required\n\"IAC GA\" sequence whenever the server detects\
    \ that it needs to send a\nGA.  It should be noted that our scheme for sending\
    \ GA's works most but\nnot all of the time.\n     There is really no reliable\
    \ way for our server TELNET to find out\nwhen a process is actually waiting for\
    \ network input.  On our system,\nthe server TELNET does not \"control\" user's\
    \ process, it only acts as a\nterminal handler at the TTY level.\n     A quick\
    \ investigation revealed that the above problem (of sending\nGA's reliably) is\
    \ not confined to the ITS operating system alone.  In\nfact TENEX (ref. conversation\
    \ with Ray Tomlinson) and DEC-10 (ref.\nconversation with Ed Taft at Harvard)\
    \ systems will encounter similar\nproblems.\n     Our solution to the GA sending\
    \ problem was to have the server wait\n2.5 seconds after sending output to see\
    \ if there is more output to be\nsent.  If the server has been \"idle\" for more\
    \ than 2.5 seconds in the\n\"output-sent\" state it sends a GA and goes in an\
    \ I/O wait state (looking\nfor input or output).  This scheme works most (but\
    \ not guaranteed all)\nof the time and doesn't cause any noticeable delay.  It\
    \ is possible for\nthe server to send an extra GA.  Our experimentation revealed\
    \ that 1-5\nseconds was a good range for this \"idling time constant\".\n    \
    \ We do implement the \"suppress GA\" option and will not send GA to\nhosts who\
    \ agree to negotiate out of it.  Our server tries to negotiate\nthese suppress\
    \ GA option.\n C. Other Options and TELNET Control Sequences\n     Our server\
    \ will refuse all other options by sending the appropriate\nDONTs and WONTs. \
    \ In addition to the ECHO and Suppress GA options we\nrecognize the following\
    \ TELNET \"control sequences\".\n1. Interrupt Process (IP) - The server substitutes\
    \ the system wide\ninterrupt character <control-Z> (ACII SUB) which immediately\
    \ interrupts\nthe process, moving control to the immediately superior process.\
    \  If the\nuser is several levels down his process tree he may have to send several\n\
    IP's to reach top level.  It should be noted that the IP does not\ninterrupt the\
    \ running process in the sense a <control-G> interrupts\nmuddle but only passes\
    \ control to the superior.\n2. Erase Character (EC) - The server substitutes the\
    \ system wide\nstandard erase character <rubout> (ACII DEL).  The deletion however\
    \ is\ndone not by the server but by the receiving process.  It is conceivable\n\
    that some process (such as a user TELNET) take no action on receiving\nEC.  Most\
    \ processes will echo the deleted character(s).  Several EC's\nwill delete the\
    \ several previous characters.  (If the console is\ndeclared to be an IMLAC, the\
    \ deleted character is removed from the\nscreen).\n3. Abort Output (AO) - The\
    \ server substitutes the character <control-S>\n(ACII DC3).  The control-S convention\
    \ is followed by many but not all of\nour programs.  The action taken on receiving\
    \ AO varies with the program.\nA normal occurrence is that output and the current\
    \ command are aborted\n(without necessarily going to completion).  In many programs\
    \ there is no\nway to stop output except by sending an IP and \"killing\" the\
    \ inferior\nprocess.\n4. Are You There (AYT) - The server will print the message\n\
    \"****connections still open*****\" preceded and followed by CRLF's upon\nreceiving\
    \ an AYT.  At some later time we may report on the state of the\nuser's job as\
    \ well.\n5. Erase Line (EL) - since we are a character-at-a-time system, the EL\n\
    has little meaning on our system and we throw it (and the preceding IAC)\naway.\n\
    6. Break (BRK) - We substitute three NUL's upon receiving BRK.  This\nconvention\
    \ is consistent with what happens when the \"Break\" key is hit\non local teletypes.\
    \  The programs generally do nothing useful when break\nis received (except echo\
    \ \"|@|@|@\") but sending BRK may cause strange\nprogram reactions, so beware.\n\
    7. Synch - Whenever the server receives the synch INS, it flushes all\nexcept\
    \ the interesting (control sequences) characters till the receipt\nof a DM.  We\
    \ also cause an implicit IP on receipt of SYNCH.\n8. We follow the CRLF and CRNUL\
    \ convention for transmitting EOL and CR\nrespectively.\nII. OUR USER-TELNET IMPLEMENTATION\n\
    \     The new user-TELNET (implemented in CALICO NETWORK by using a new\n\"TELCOM\"\
    \ subroutine), accepts negotiation for the ECHO and suppress GA\noptions.  The\
    \ program tries to negotiate out of receiving GA's and tries\nthe ECHO negotiation\
    \ if the settings file for the host indicate remote\necho.  Special characters\
    \ and symbols are defined for EC, EL, AO, AYT,\nBRK, SYNCH, IP, and the ESCAPE\
    \ character to command level.  These\nsymbols have a default character value which\
    \ the user can change by\ntyping the symbol followed by the new character value\
    \ at NETWRK command\nlevel.  To send EC, EL, etc, the user only has to type the\
    \ special\ncharacter for the function.  In addition the user can send these\n\
    characters by using the send.special command at NETWRK command level.\nIn \"line\
    \ mode\", EC and EL do a \"local\" character and line erase rather\nthan send\
    \ the EC and EL to the remote host.  The following are the\ndefault values for\
    \ the \"special\" characters in TELNET :\n     ESCAPE - backslash\n     EC - <DEL>\n\
    \     EL - <CAN> or |X\n     AO - |S\n     IP - |R\n     AYT - |T\n     Synch\
    \ - |Y\n     Break - no preassigned value.\n     The user can change his echo\
    \ mode by escaping to NETWRK command\nlevel and using the commands \"echo.local\"\
    \ or \"echo.remote\".  Note that\nthe modes are changed only when the negotiation\
    \ for mode change is\nsuccessful.  In either event the user is notified of the\
    \ results of the\nnegotiation.\nIII. INSTALLING THE NEW TELNETS\n     On Monday\
    \ July 2, we brought up the user and server TELNETs briefly\nto find that most\
    \ of the hosts did not \"recognize\" IAC's and did not\nhonor the new protocol.\
    \  Much to our dismay usage of both our server and\nuser TELNET's was chaotic.\
    \  Consequently, we did not install the new\nuser and server TELNETs, and the\
    \ old TELNETs remain operational.\n     The new and the old TELNETs are definitely\
    \ not compatible.  The\nserver tries to (and should try to) negotiate out of sending\
    \ GA's and\nalso to send echo.  This negotiation causes problems with the\n\"\
    old-style\" user TELNETs.  Also if the negotiation for Suppress GA is\nunsuccessfully\
    \ (which is the case with \"old\" user-TELNETs) the server\nwill keep sending\
    \ IAC GA's when appropriate.  One solution we found to\nmaking our \"new\" server\
    \ compatible with \"old\" user TELNETs was to come\nup in a mode that does not\
    \ start any option negotiation and does not\nsend GA's unless requested to do\
    \ so (ie default is to suppress GA\"s).\nAs mentioned earlier the server also\
    \ accepts the old \"TELNET control\"\nsequences.  This solution makes the server\
    \ compatible with both the old\nand the new user TELNETs (except it violates protocol\
    \ by not sending\nGA's).  We propose to install this server on our socket 1.\n\
    \     To promote experimentation with the new TELNET protocol, we have\ninstalled\
    \ the new server TELNET on socket 60 (octal 105).  This new\nserver follows the\
    \ new protocol (ie it sends GA's) and starts\nspontaneous negotiation for remote\
    \ echo and suppress GA.  The\nimplementors on other Hosts are encouraged to use\
    \ this service to debug\ntheir user TELNETs (and our server).  We feel that transition\
    \ to the new\nprotocol will be smoother if new TELNET servers are brought up on\n\
    experimental sockets.  We are also willing to help debug other servers\nfrom our\
    \ User TELNET.\n     Finally we would like to lobby for making suppress GA the\
    \ default\n(as our present server on socket 1).  It appears that only a few Hosts\n\
    require the GA's (AMES-67 and UCLA-CON).  It seems to me that the reason\nwhy\
    \ sending GA is default in the current specification of protocol is\nthat representatives\
    \ from the concerned Hosts wanted the GA to be\nimplemented.  It doesn't matter\
    \ to them if sending GA or suppress GA is\ndefault, as long as they can get a\
    \ remote server to send a GA.  The\nprotocol can be so specified as to require\
    \ every one to implement a\n\"send GA option\".  Making \"suppress GA\" the default\
    \ will have the\nadvantage that it will obviate unnecessary negotiation in a great\n\
    majority of cases.  Another advantage is that not sending GA's makes the\nnew\
    \ server compatible with both old and new user TELNETs.\n       [ This RFC was\
    \ put into machine readable form for entry ]\n         [ into the online RFC archives\
    \ by Serge Hallyn 9/97 ]\n"
