Abstract This document describes HTCPCP, a protocol for controlling, monitoring, and diagnosing coffee pots.
There is coffee all over the world.
Increasingly, in a world in which computing is ubiquitous, the computists want to make coffee.
Coffee brewing is an art, but the distributed intelligence of the web  connected world transcends art.
Thus, there is a strong, dark, rich requirement for a protocol designed espressoly for the brewing of coffee.
Coffee is brewed using coffee pots.
Networked coffee pots require a control protocol if they are to be controlled.
Increasingly, home and consumer devices are being connected to the Internet.
Early networking experiments demonstrated vending devices connected to the Internet for status monitoring [COKE].
One of the first remotely  operated  machine to be hooked up to the Internet, the Internet Toaster, (controlled via SNMP) was debuted in 1990
The demand for ubiquitous appliance connectivity that is causing the consumption of the IPv4 address space.
Consumers want remote control of devices such as coffee pots so that they may wake up to freshly brewed coffee, or cause coffee to be prepared at a precise time after the completion of dinner preparations.
This document specifies a Hyper Text Coffee Pot Control Protocol (HTCPCP), which permits the full request and responses necessary to control all devices capable of making the popular caffeinated hot beverages.
([RFC2068]) permits the transfer of web objects from origin servers to clients.
The web is world wide.
HTCPCP is based on HTTP.
This is because HTTP is everywhere.
It could not be so pervasive without being good.
If you want good coffee, HTCPCP needs to be good.
To make HTCPCP good, it is good to base HTCPCP on HTTP.
Future versions of this protocol may include extensions for espresso machines and similar devices.
The HTCPCP protocol is built on top of HTTP, with the addition of a few new methods, header fields and return codes.
All HTCPCP servers should be referred to with the "coffee:" URI scheme (Section 4).
2.1 HTCPCP Added Methods 2.1.1
The BREW method, and the use of POST Commands to control a coffee pot are sent from client to coffee server using either the BREW or POST method, and a message body with Content Type set to "application/coffee pot command".
A coffee pot server MUST accept both the BREW and POST method equivalently.
However, the use of POST for causing actions to happen is deprecated.
Coffee pots heat water using electronic mechanisms, so there is no fire.
Thus, no firewalls are necessary, and firewall control policy is irrelevant.
However, POST may be a trademark for coffee, and so the BREW method has been added.
The BREW method may be used with other HTTP based protocols (e.g., the Hyper Text Brewery Control Protocol).
In HTTP, the GET method is used to mean
"retrieve whatever information (in the form of an entity) identified by the Request  URI.
" If the Request URI refers to a data producing process, it is the produced data which shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.
In HTCPCP, the resources associated with a coffee pot are physical, and not information resources.
The "data" for most coffee URIs contain no caffeine.
If a cup of coffee is data, metadata about the brewed resource is discovered using the PROPFIND method [WEBDAV].
2.1.4 WHEN method When coffee is poured, and milk is offered, it is necessary for the holder of the recipient of milk to say "when" at the time when sufficient milk has been introduced into the coffee.
For this purpose, the "WHEN" method has been added to HTCPCP.
2.2 Coffee Pot Header fields
HTCPCP recommends several HTTP header fields and defines some new ones.
2.2.1 Recommended header fields 2.2.1.1
The "safe" response header field.
[SAFE] defines a HTTP response header field, "Safe", which can be used to indicate that repeating a HTTP request is safe.
The inclusion of a "Safe: Yes" header field allows a client to repeat a previous request if the result of the request might be repeated.
The actual safety of devices for brewing coffee varies widely, and may depend, in fact, on conditions in the client rather than just in the server.
no"   conditionally safe conditionally safe
2.2.2 New header fields 2.2.2.1 The Accept Additions header field
In HTTP, the "Accept" request header field is used to specify media types which are acceptable for the response.
However, in HTCPCP, the response may result in additional actions on the part of the automated pot.
No options were given for decaffeinated coffee.
2.3 HTCPCP return codes Normal HTTP return codes are used to indicate difficulties of the HTCPCP server.
This section identifies special interpretations and new return codes.
This return code is normally interpreted as "The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.
In HTCPCP, this response code MAY be returned if the operator of the coffee pot cannot comply with the Accept Addition request.
Unless the request was a HEAD request, the response SHOULD include an entity containing a list of available coffee additions.
In practice, most automated coffee pots cannot currently provide additions.
Any attempt to brew coffee with a teapot should result in the error code "418
The resulting entity body MAY be short and stout.
The "coffee" URI scheme Because coffee is international
, there are international coffee URI schemes.
All coffee URL schemes are written with URL encoding of the UTF 8 encoding of the characters that spell the word for "coffee" in any of 29 languages, following the conventions for internationalization in URIs [URLI18N].
All alternative coffee scheme forms are equivalent.
However, the use of coffee scheme in various languages MAY be interpreted as an indication of the kind of coffee produced by the coffee pot.
Note that while URL scheme names are case independent, capitalization is important for German and thus the initial "K" must be encoded.
The entity body of a POST or BREW request MUST be of Content Type "message/coffeepot".
Since most of the information for controlling the coffee pot is conveyed by the additional headers, the content of "message/coffeepot" contains only a coffee message body: coffee message body
This section lays out some of the operational issues with deployment of HTCPCP ubiquitously.
A robust quality of service is required between the coffee pot user and the coffee pot service.
Coffee pots SHOULD use the Network Time Protocol [NTP] to synchronize their clocks to a globally accurate time standard.
Telerobotics has been an expensive technology.
However, with the advent of the Cambridge Coffee Pot [CAM], the use of the web (rather than SNMP) for remote system monitoring and management has been proven.
Additional coffee pot maintenance tasks might be accomplished by remote robotics.
Web data is normally static.
Therefore to save data transmission and time, Web browser programs store each Web page retrieved by a user on the user's computer.
Thus, if the user wants to return to that page, it is now stored locally and does not need to be requested again from the server.
An image used for robot control or for monitoring a changing scene is dynamic.
A fresh version needs to be retrieved from the server each time it is accessed.
5.2 Crossing firewalls In most organizations
HTTP traffic crosses firewalls fairly easily.
Modern coffee pots do not use fire.
However, a "firewall" is useful for protection of any source from any manner of heat, and not just fire.
Every home computer network SHOULD be protected by a firewall from sources of heat.
However, remote control of coffee pots is important from outside the home.
Thus, it is important that HTCPCP cross firewalls easily.
By basing HTCPCP on HTTP and using port 80, it will get all of HTTP's firewall crossing virtues.
Of course, the home firewalls will require reconfiguration or new versions in order to accommodate HTCPCP  specific methods, headers and trailers, but such upgrades will be easily accommodated.
Most home network system administrators drink coffee, and are willing to accommodate the needs of tunnelling HTCPCP.
System management considerations Coffee pot monitoring using HTTP protocols has been an early application of the web.
In the earliest instance, coffee pot monitoring was an early (and appropriate) use of ATM networks [CAM].
The traditional technique [CAM] was to attach a frame grabber to a video camera, and feed the images to a web server.
This was an appropriate application of ATM networks.
In this coffee pot installation, the Trojan Room of Cambridge University laboratories was used to give a web interface to monitor a common coffee pot.
involved in related research and, being poor, impoverished academics, we only had one coffee filter machine between us, which lived in the corridor just outside the Trojan Room.
However, being highly dedicated and hard working academics, we got through a lot of coffee, and when a fresh pot was brewed, it often didn't last long.
This service was created as the first application to use a new RPC mechanism designed in the Cambridge Computer Laboratory MSRPC2.
It runs over MSNL (Multi Service Network Layer) a network layer protocol designed for ATM networks.
Coffee pots on the Internet may be managed using
the Coffee Pot MIB [CPMIB].
Anyone who gets in between me and my morning coffee should be insecure.
Unmoderated access to unprotected coffee pots from Internet users might lead to several kinds of "denial of coffee service" attacks.
The improper use of filtration devices might admit trojan grounds.
Filtration is not a good virus protection method.
Putting coffee grounds into Internet plumbing may result in clogged plumbing, which would entail the services of an Internet Plumber [PLUMB], who would, in turn, require an Internet Plumber's Helper.
Access authentication will be discussed in a separate memo.
