- title: __initial_text__
  contents:
  - '                     A Mail Box Protocol, Version-2

    '
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   Initial reaction to RFC 196, \"A Mail Box Protocol\", NIC (7141,)\n\
    \   indicates general agreement on the need for such a mechanism.  The\n   conventions\
    \ suggested in RFC 196 assumed only the use of the Data\n   Transfer Protocol\
    \ (in NIC 7104) in order to simplify an initial\n   implementation.  The valid\
    \ argument, we believe, has been made that\n   sites will also implement the File\
    \ Transfer Protocol and that as much\n   as possible the Mail Box Protocol should\
    \ be a subset of it.  This\n   version is in answer to this suggestion.\n   The\
    \ purpose of a mail box protocol is to provide at each site a\n   standard mechanism\
    \ to receive sequential files for immediate or\n   deferred printing or other\
    \ uses.  The files for deferred printing\n   would probably be stored in intermediate\
    \ disk files, although details\n   of how a file is handled, stored, manipulated,\
    \ or printed at a site\n   are not the concern of this protocol.\n   A mail box,\
    \ as we see it, is simply a write only (from the Network)\n   sequential file\
    \ to which messages and documents are appended,\n   separated by an appropriate\
    \ site dependent code.\n   It is also assumed that there would be a program at\
    \ the sending site\n   which sends the file in the format given below with the\
    \ optional\n   control codes when appropriate.  This program could probably be\n\
    \   accessed as a subcommand of the Telnet program.\n   The motivation for developing\
    \ this protocol is the Network\n   Information Center's (NIC) need to be able\
    \ to deliver messages and\n   documents to remote sites, and to be able to receive\
    \ documents for\n   cataloging, redistribution, and other purposes from remote\
    \ sites\n   without having to know the details of path name conventions and file\n\
    \   system commands at each site.  Multiple mail boxes (256) are allowed\n   at\
    \ each site and are identified as described below.  The default is\n   mail box\
    \ number 0 for use with the standard mail printer defined\n   below.\n   The only\
    \ place where the Mail Box Protocol has a potential conflict\n   with the File\
    \ Transfer Protocol is in file naming conventions.  The\n   File Transfer Protocol\
    \ assumes that the using site will use a\n   filename which follows the access\
    \ and file path name conventions of\n   the serving site and that this information\
    \ would be supplied by the\n   user.  In the Mail Box protocol we would like not\
    \ to have to\n   explicitly know the path name conventions at each site.\n   In\
    \ other words there is a need for a network virtual pathname\n   convention. \
    \ We did not want to solve this problem in general at this\n   time and in RFC\
    \ 196, NIC 7141, proposed the use of a separate socket\n   for mail type delivery\
    \ and the use of an integer 0-127 to specify the\n   address of a specific file\
    \ (Mail Box) to be appended to as the\n   simplest form of network-wide standard\
    \ file name convention for an\n   initial implementation.\n   To follow more closely\
    \ the spirit of the File Transfer Protocol, I\n   would now recommend the Append\
    \ Request be specifically used and that\n   the standard socket agreed on for\
    \ use with the File Transfer Protocol\n   also be used.  Following the byte indicating\
    \ an Append request, there\n   would be a standard agreed-upon string of letters\
    \ followed by a\n   number, indicating that this is a mail box append request.\
    \  A\n   suggested name string would be NETMAIL#, where # is a byte\n   interpreted\
    \ as a mail box number 0-255.  If the above suggested Mail\n   Box file naming\
    \ convention is unsuitable and some other network-wide\n   standard mail box naming\
    \ can be agreed on, then it can be used.\n   Please let me know how you feel about\
    \ this naming convention.\n   Given agreement on a standard mail box pathname,\
    \ then the Mail Box\n   Protocol can utilize a subset of the File Transfer Protocol\n\
    \   conventions to be given below.\n   The other problem which was raised about\
    \ the Mail Box Protocol was\n   the possibility of someone accidentally or deliberately\
    \ flooding the\n   printer of a site with garbage, as there are no access or file\
    \ size\n   controls.  Some thinking and discussions of this problem have yielded\n\
    \   no simple satisfactory solutions.  I would recommend initial\n   implementations\
    \ without standard special safeguards in this area.\n   Safeguards would be a\
    \ site-dependent option.  Standard safeguards for\n   the above problem can be\
    \ easily added later if they really prove\n   necessary and satisfactory ones\
    \ can be agreed on.\n                       MAIL BOX PROTOCOL - VERSION 2\n  \
    \ The Mail Box Protocol will use established network conventions,\n   specifically\
    \ the Network Control Program, Initial Connection\n   Protocol, Data Transfer\
    \ Protocol, and File Transfer Protocol (as\n   described in Current Network Protocols,\
    \ NIC 7104).\n   The normal transmission for Mail Box 0 is to be Network ASCII.\
    \  The\n   standard receiving mail printer for mail box number 0 is assumed to\n\
    \   have a print line 72 characters wide, and a page of 66 lines.  The\n   new\
    \ line convention will be carriage return (Hex '0D'), (Octal '015')\n   followed\
    \ by line feed (Hex '0A') (Octal '012') as per the Telnet\n   Protocol, RFC 158,\
    \ NIC 6768.  The standard printer will accept form\n   feed (Hex '0C') (Octal\
    \ '014') as meaning move paper to the top of a\n   new page.\n   It is the sender's\
    \ responsibility to control the length of the print\n   line and page.  If more\
    \ than 72 characters per line are sent, or if\n   more than 66 lines are sent\
    \ without a form feed, then the receiving\n   site can handle these situations\
    \ as appropriate for them.  These\n   conventions can be changed by control codes\
    \ as described below.\n   At the head of the message or document sent to mail\
    \ box number 0\n   there is to be an initial address string terminated by a form\
    \ feed.\n   This address string is to contain the sender's name and address, and\n\
    \   the receiver's name and address formatted in some reasonable, easy-\n   to-read\
    \ form for a clerk to read and distribute.  Comments could also\n   be included\
    \ in the address string.\n   The format of information in mail boxes other than\
    \ mail box number 0\n   is not explicitly defined by this protocol.\n"
- title: Initial Connection
  contents:
  - "Initial Connection\n   Initial Connection will be as per the Official Initial\
    \ Connection\n   Protocol, Document #2, NIC 7101, to the standard File Transfer\
    \ socket\n   not yet assigned.  A candidate socket number, socket #3, has been\n\
    \   suggested.\n"
- title: File Transfer
  contents:
  - "File Transfer\n   The mail item (file) to be transferred would be transferred\
    \ according\n   to the File Transfer Protocol.\n   As per the File Transfer Protocol,\
    \ a file (mail item) can be sent in\n   more than one data transaction as defined\
    \ in the Data Transfer\n   Protocol.  End of file is indicated by the file separator\
    \ (as defined\n   in Data Transfer Protocol) or by closing the connection.\n"
- title: Order of Transactions
  contents:
  - "Order of Transactions\n   The only basic operation required is an append.\n \
    \                   Append Request\n   (Mailer) User  -------------------->  server\
    \ (Mail Box)\n                     <File - data>\n                   ------------------->\n\
    \                   End of File indication\n                   ------------------->\n\
    \                       Acknowledge\n                   <-------------------\n\
    \   The data type default is network ASCII.  The standard line printer\n   default\
    \ is as defined above.  Other control transactions can be used.\n"
- title: CONTROL TRANSACTIONS TO BE USED
  contents:
  - "CONTROL TRANSACTIONS TO BE USED\n   OP CODE\n   Hex     Octal\n   00      000\
    \     Change data type identifier\n   09      011     Error or unsuccessful terminate\n\
    \   0A      012     Acknowledge or successful terminate\n   0B      013     Append\
    \ request (add to existing file)\n   5A      132     Change printer control settings\n"
- title: DATA TYPE CODES
  contents:
  - "DATA TYPE CODES\n   All data types of the File Transfer Protocol can be used\
    \ for special\n   applications.  For Mail Box 0, default is 8 bit bytes of Network\n\
    \   ASCII characters.\n"
- title: ERROR CODES
  contents:
  - "ERROR CODES\n   All error codes defined in the File Transfer Protocol could be\n\
    \   returned.\n"
- title: PRINTER CONTROL CODES
  contents:
  - "PRINTER CONTROL CODES\n     Hex     Octal\n     01      321     Meaning:  Set\
    \ line width to 72 characters\n     02      322     Meaning:  Use the full width\
    \ of your printer\n     03      323     Meaning:  Set page size to 66 lines\n\
    \     04      324     Meaning:  Set page size to infinite\n   Other virtual printer\
    \ control codes can be added in the future.\n   Other classes of control codes\
    \ can be added as the need arises.\n   <JOURNAL>7612.NLS;1, 27-AUG-71 10:41 RWW\
    \ ; (Expedite) Title:\n   Author(s): Richard W. Watson/RWW; Distribution: SDC2\
    \ TFL JWM JFH REL\n   AOJO JEW AWH DLM PWF RAW HRVZ AAM RLS JMM JMW AKB PMK TNP\
    \ ASL BMW JAM\n   EAF RTB JMP BDW JTM JCL AJB CDS RFH EMA;/NWG; Sub-Collections:\
    \ NWG\n   ARC NIC; RFC# 221; Clerk: RWW;\n   Origin: <WATSON>MAIL.NLS;4, 27-AUG-71\
    \ 9:51 RWW ;\n         [ This RFC was put into machine readable form for entry\
    \ ]\n            [ into the online RFC archives by Ryan Kato 6/01 ]\n"
