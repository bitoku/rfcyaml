- title: __initial_text__
  contents:
  - '        The Secure Shell (SSH) Transport Layer Encryption Modes

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Researchers have discovered that the authenticated encryption portion\n\
    \   of the current SSH Transport Protocol is vulnerable to several\n   attacks.\n\
    \   This document describes new symmetric encryption methods for the\n   Secure\
    \ Shell (SSH) Transport Protocol and gives specific\n   recommendations on how\
    \ frequently SSH implementations should rekey.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The symmetric portion of the SSH Transport Protocol was\
    \ designed to\n   provide both privacy and integrity of encapsulated data.  Researchers\n\
    \   ([DAI,BKN1,BKN2]) have, however, identified several security problems\n  \
    \ with the symmetric portion of the SSH Transport Protocol, as\n   described in\
    \ [RFC4253].  For example, the encryption mode specified\n   in [RFC4253] is vulnerable\
    \ to a chosen-plaintext privacy attack.\n   Additionally, if not rekeyed frequently\
    \ enough, the SSH Transport\n   Protocol may leak information about payload data.\
    \  This latter\n   property is true regardless of what encryption mode is used.\n\
    \   In [BKN1,BKN2], Bellare, Kohno, and Namprempre show how to modify the\n  \
    \ symmetric portion of the SSH Transport Protocol so that it provably\n   preserves\
    \ privacy and integrity against chosen-plaintext, chosen-\n   ciphertext, and\
    \ reaction attacks.  This document instantiates the\n   recommendations described\
    \ in [BKN1,BKN2].\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The used data types and terminology are specified in the architecture\n\
    \   document [RFC4251].\n   The SSH Transport Protocol is specified in the transport\
    \ document\n   [RFC4253].\n"
- title: 3.  Rekeying
  contents:
  - "3.  Rekeying\n   Section 9 of [RFC4253] suggests that SSH implementations rekey\
    \ after\n   every gigabyte of transmitted data.  [RFC4253] does not, however,\n\
    \   discuss all the problems that could arise if an SSH implementation\n   does\
    \ not rekey frequently enough.  This section serves to strengthen\n   the suggestion\
    \ in [RFC4253] by giving firm upper bounds on the\n   tolerable number of encryptions\
    \ between rekeying operations.  In\n   Section 6, we discuss the motivation for\
    \ these rekeying\n   recommendations in more detail.\n   This section makes two\
    \ recommendations.  Informally, the first\n   recommendation is intended to protect\
    \ against possible information\n   leakage through the MAC tag, and the second\
    \ recommendation is\n   intended to protect against possible information leakage\
    \ through the\n   block cipher.  Note that, depending on the block length of the\n\
    \   underlying block cipher and the length of the encrypted packets, the\n   first\
    \ recommendation may supersede the second recommendation, or vice\n   versa.\n"
- title: 3.1.  First Rekeying Recommendation
  contents:
  - "3.1.  First Rekeying Recommendation\n   Because of possible information leakage\
    \ through the MAC tag, SSH\n   implementations SHOULD rekey at least once every\
    \ 2**32 outgoing\n   packets.  More explicitly, after a key exchange, an SSH\n\
    \   implementation SHOULD NOT send more than 2**32 packets before\n   rekeying\
    \ again.\n   SSH implementations SHOULD also attempt to rekey before receiving\n\
    \   more than 2**32 packets since the last rekey operation.  The\n   preferred\
    \ way to do this is to rekey after receiving more than 2**31\n   packets since\
    \ the last rekey operation.\n"
- title: 3.2.  Second Rekeying Recommendation
  contents:
  - "3.2.  Second Rekeying Recommendation\n   Because of a birthday property of block\
    \ ciphers and some modes of\n   operation, implementations must be careful not\
    \ to encrypt too many\n   blocks with the same encryption key.\n   Let L be the\
    \ block length (in bits) of an SSH encryption method's\n   block cipher (e.g.,\
    \ 128 for AES).  If L is at least 128, then, after\n   rekeying, an SSH implementation\
    \ SHOULD NOT encrypt more than 2**(L/4)\n   blocks before rekeying again.  If\
    \ L is at least 128, then SSH\n   implementations should also attempt to force\
    \ a rekey before receiving\n   more than 2**(L/4) blocks.  If L is less than 128\
    \ (which is the case\n   for older ciphers such as 3DES, Blowfish, CAST-128, and\
    \ IDEA), then,\n   although it may be too expensive to rekey every 2**(L/4) blocks,\
    \ it\n   is still advisable for SSH implementations to follow the original\n \
    \  recommendation in [RFC4253]: rekey at least once for every gigabyte\n   of\
    \ transmitted data.\n   Note that if L is less than or equal to 128, then the\
    \ recommendation\n   in this subsection supersedes the recommendation in Section\
    \ 3.1.  If\n   an SSH implementation uses a block cipher with a larger block size\n\
    \   (e.g., Rijndael with 256-bit blocks), then the recommendations in\n   Section\
    \ 3.1 may supersede the recommendations in this subsection\n   (depending on the\
    \ lengths of the packets).\n"
- title: 4.  Encryption Modes
  contents:
  - "4.  Encryption Modes\n   This document describes new encryption methods for use\
    \ with the SSH\n   Transport Protocol.  These encryption methods are in addition\
    \ to the\n   encryption methods described in Section 6.3 of [RFC4253].\n   Recall\
    \ from [RFC4253] that the encryption methods in each direction\n   of an SSH connection\
    \ MUST run independently of each other and that,\n   when encryption is in effect,\
    \ the packet length, padding length,\n   payload, and padding fields of each packet\
    \ MUST be encrypted with the\n   chosen method.  Further recall that the total\
    \ length of the\n   concatenation of the packet length, padding length, payload,\
    \ and\n   padding MUST be a multiple of the cipher's block size when the\n   cipher's\
    \ block size is greater than or equal to 8 bytes (which is the\n   case for all\
    \ of the following methods).\n   This document describes the following new methods:\n\
    \     aes128-ctr       RECOMMENDED       AES (Rijndael) in SDCTR mode,\n     \
    \                                   with 128-bit key\n     aes192-ctr       RECOMMENDED\
    \       AES with 192-bit key\n     aes256-ctr       RECOMMENDED       AES with\
    \ 256-bit key\n     3des-ctr         RECOMMENDED       Three-key 3DES in SDCTR\
    \ mode\n     blowfish-ctr     OPTIONAL          Blowfish in SDCTR mode\n     twofish128-ctr\
    \   OPTIONAL          Twofish in SDCTR mode,\n                               \
    \         with 128-bit key\n     twofish192-ctr   OPTIONAL          Twofish with\
    \ 192-bit key\n     twofish256-ctr   OPTIONAL          Twofish with 256-bit key\n\
    \     serpent128-ctr   OPTIONAL          Serpent in SDCTR mode, with\n       \
    \                                 128-bit key\n     serpent192-ctr   OPTIONAL\
    \          Serpent with 192-bit key\n     serpent256-ctr   OPTIONAL          Serpent\
    \ with 256-bit key\n     idea-ctr         OPTIONAL          IDEA in SDCTR mode\n\
    \     cast128-ctr      OPTIONAL          CAST-128 in SDCTR mode,\n           \
    \                             with 128-bit key\n   The label <cipher>-ctr indicates\
    \ that the block cipher <cipher> is to\n   be used in \"stateful-decryption counter\"\
    \ (SDCTR) mode.  Let L be the\n   block length of <cipher> in bits.  In stateful-decryption\
    \ counter\n   mode, both the sender and the receiver maintain an internal L-bit\n\
    \   counter X.  The initial value of X should be the initial IV (as\n   computed\
    \ in Section 7.2 of [RFC4253]) interpreted as an L-bit\n   unsigned integer in\
    \ network-byte-order.  If X=(2**L)-1, then\n   \"increment X\" has the traditional\
    \ semantics of \"set X to 0.\"  We use\n   the notation <X> to mean \"convert\
    \ X to an L-bit string in network-\n   byte-order.\"  Naturally, implementations\
    \ may differ in how the\n   internal value X is stored.  For example, implementations\
    \ may store X\n   as multiple unsigned 32-bit counters.\n   To encrypt a packet\
    \ P=P1||P2||...||Pn (where P1, P2, ..., Pn are each\n   blocks of length L), the\
    \ encryptor first encrypts <X> with <cipher>\n   to obtain a block B1.  The block\
    \ B1 is then XORed with P1 to generate\n   the ciphertext block C1.  The counter\
    \ X is then incremented, and the\n   process is repeated for each subsequent block\
    \ in order to generate\n   the entire ciphertext C=C1||C2||...||Cn corresponding\
    \ to the packet\n   P.  Note that the counter X is not included in the ciphertext.\
    \  Also\n   note that the keystream can be pre-computed and that encryption is\n\
    \   parallelizable.\n   To decrypt a ciphertext C=C1||C2||...||Cn, the decryptor\
    \ (who also\n   maintains its own copy of X) first encrypts its copy of <X> with\n\
    \   <cipher> to generate a block B1 and then XORs B1 to C1 to get P1.\n   The\
    \ decryptor then increments its copy of the counter X and repeats\n   the above\
    \ process for each block to obtain the plaintext packet\n   P=P1||P2||...||Pn.\
    \  As before, the keystream can be pre-computed, and\n   decryption is parallelizable.\n\
    \   The \"aes128-ctr\" method uses AES (the Advanced Encryption Standard,\n  \
    \ formerly Rijndael) with 128-bit keys [AES].  The block size is 16\n   bytes.\n\
    \      At this time, it appears likely that a future specification will\n    \
    \  promote aes128-ctr to be REQUIRED; implementation of this\n      algorithm\
    \ is very strongly encouraged.\n   The \"aes192-ctr\" method uses AES with 192-bit\
    \ keys.\n   The \"aes256-ctr\" method uses AES with 256-bit keys.\n   The \"3des-ctr\"\
    \ method uses three-key triple-DES (encrypt-decrypt-\n   encrypt), where the first\
    \ 8 bytes of the key are used for the first\n   encryption, the next 8 bytes for\
    \ the decryption, and the following 8\n   bytes for the final encryption.  This\
    \ requires 24 bytes of key data\n   (of which 168 bits are actually used).  The\
    \ block size is 8 bytes.\n   This algorithm is defined in [DES].\n   The \"blowfish-ctr\"\
    \ method uses Blowfish with 256-bit keys [SCHNEIER].\n   The block size is 8 bytes.\
    \  (Note that \"blowfish-cbc\" from [RFC4253]\n   uses 128-bit keys.)\n   The\
    \ \"twofish128-ctr\" method uses Twofish with 128-bit keys [TWOFISH].\n   The\
    \ block size is 16 bytes.\n   The \"twofish192-ctr\" method uses Twofish with\
    \ 192-bit keys.\n   The \"twofish256-ctr\" method uses Twofish with 256-bit keys.\n\
    \   The \"serpent128-ctr\" method uses the Serpent block cipher [SERPENT]\n  \
    \ with 128-bit keys.  The block size is 16 bytes.\n   The \"serpent192-ctr\" method\
    \ uses Serpent with 192-bit keys.\n   The \"serpent256-ctr\" method uses Serpent\
    \ with 256-bit keys.\n   The \"idea-ctr\" method uses the IDEA cipher [SCHNEIER].\
    \  The block\n   size is 8 bytes.\n   The \"cast128-ctr\" method uses the CAST-128\
    \ cipher with 128-bit keys\n   [RFC2144].  The block size is 8 bytes.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The thirteen encryption algorithm names defined in\
    \ Section 4 have\n   been added to the Secure Shell Encryption Algorithm Name\
    \ registry\n   established by Section 4.11.1 of [RFC4250].\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document describes additional encryption\
    \ methods and\n   recommendations for the SSH Transport Protocol [RFC4253].\n\
    \   [BKN1,BKN2] prove that if an SSH application incorporates the methods\n  \
    \ and recommendations described in this document, then the symmetric\n   cryptographic\
    \ portion of that application will resist a large class\n   of privacy and integrity\
    \ attacks.\n   This section is designed to help implementors understand the\n\
    \   security-related motivations for, as well as possible consequences of\n  \
    \ deviating from, the methods and recommendations described in this\n   document.\
    \  Additional motivation and discussion, as well as proofs of\n   security, appear\
    \ in the research papers [BKN1,BKN2].\n   Please note that the notion of \"prove\"\
    \ in the context of [BKN1,BKN2]\n   is that of practice-oriented reductionist\
    \ security: if an attacker is\n   able to break the symmetric portion of the SSH\
    \ Transport Protocol\n   using a certain type of attack (e.g., a chosen-ciphertext\
    \ attack),\n   then the attacker will also be able to break one of the transport\n\
    \   protocol's underlying components (e.g., the underlying block cipher\n   or\
    \ MAC).  If we make the reasonable assumption that the underlying\n   components\
    \ (such as AES and HMAC-SHA1) are secure, then the attacker\n   against the symmetric\
    \ portion of the SSH protocol cannot be very\n   successful (since otherwise there\
    \ would be a contradiction).  Please\n   see [BKN1,BKN2] for details.  In particular,\
    \ attacks are not\n   impossible, just extremely improbable (unless the building\
    \ blocks,\n   like AES, are insecure).\n   Note also that cryptography often plays\
    \ only a small (but critical)\n   role in an application's overall security. \
    \ In the case of the SSH\n   Transport Protocol, even though an application might\
    \ implement the\n   symmetric portion of the SSH protocol exactly as described\
    \ in this\n   document, the application may still be vulnerable to non-protocol-\n\
    \   based attacks (as an egregious example, an application might save\n   cryptographic\
    \ keys in cleartext to an unprotected file).\n   Consequently, even though the\
    \ methods described herein come with\n   proofs of security, developers must still\
    \ execute caution when\n   developing applications that implement these methods.\n"
- title: 6.1.  Rekeying Considerations
  contents:
  - "6.1.  Rekeying Considerations\n   Section 3 of this document makes two rekeying\
    \ recommendations: (1)\n   rekey at least once every 2**32 packets, and (2) rekey\
    \ after a\n   certain number of encrypted blocks (e.g., 2**(L/4) blocks if the\n\
    \   block cipher's block length L is at least 128 bits).  The motivations\n  \
    \ for recommendations (1) and (2) are different, and we consider each\n   recommendation\
    \ in turn.  Briefly, (1) is designed to protect against\n   information leakage\
    \ through the SSH protocol's underlying MAC, and\n   (2) is designed to protect\
    \ against information leakage through the\n   SSH protocol's underlying encryption\
    \ scheme.  Please note that,\n   depending on the encryption method's block length\
    \ L and the number of\n   blocks encrypted per packet, recommendation (1) may\
    \ supersede\n   recommendation (2) or vice versa.\n   Recommendation (1) states\
    \ that SSH implementations should rekey at\n   least once every 2**32 packets.\
    \  If more than 2**32 packets are\n   encrypted and MACed by the SSH Transport\
    \ Protocol between rekeyings,\n   then the SSH Transport Protocol may become vulnerable\
    \ to replay and\n   re-ordering attacks.  This means that an adversary may be\
    \ able to\n   convince the receiver to accept the same message more than once\
    \ or to\n   accept messages out of order.  Additionally, the underlying MAC may\n\
    \   begin to leak information about the protocol's payload data.  In more\n  \
    \ detail, an adversary looks for a collision between the MACs\n   associated to\
    \ two packets that were MACed with the same 32-bit\n   sequence number (see Section\
    \ 4.4 of [RFC4253]).  If a collision is\n   found, then the payload data associated\
    \ with those two ciphertexts is\n   probably identical.  Note that this problem\
    \ occurs regardless of how\n   secure the underlying encryption method is.  Also\
    \ note that although\n   compressing payload data before encrypting and MACing\
    \ and the use of\n   random padding may reduce the risk of information leakage\
    \ through the\n   underlying MAC, compression and the use of random padding will\
    \ not\n   prevent information leakage.  Implementors who decide not to rekey at\n\
    \   least once every 2**32 packets should understand these issues.  These\n  \
    \ issues are discussed further in [BKN1,BKN2].\n   One alternative to recommendation\
    \ (1) would be to make the SSH\n   Transport Protocol's sequence number more than\
    \ 32 bits long.  This\n   document does not suggest increasing the length of the\
    \ sequence\n   number because doing so could hinder interoperability with older\n\
    \   versions of the SSH protocol.  Another alternative to recommendation\n   (1)\
    \ would be to switch from basic HMAC to a another MAC, such as a\n   MAC that\
    \ has its own internal counter.  Because of the 32-bit counter\n   already present\
    \ in the protocol, such a counter would only need to be\n   incremented once every\
    \ 2**32 packets.\n   Recommendation (2) states that SSH implementations should\
    \ rekey\n   before encrypting more than 2**(L/4) blocks with the same key\n  \
    \ (assuming L is at least 128).  This recommendation is designed to\n   minimize\
    \ the risk of birthday attacks against the encryption method's\n   underlying\
    \ block cipher.  For example, there is a theoretical privacy\n   attack against\
    \ stateful-decryption counter mode if an adversary is\n   allowed to encrypt approximately\
    \ 2**(L/2) messages with the same key.\n   It is because of these birthday attacks\
    \ that implementors are highly\n   encouraged to use secure block ciphers with\
    \ large block lengths.\n   Additionally, recommendation (2) is designed to protect\
    \ an encryptor\n   from encrypting more than 2**L blocks with the same key.  The\n\
    \   motivation here is that, if an encryptor were to use SDCTR mode to\n   encrypt\
    \ more than 2**L blocks with the same key, then the encryptor\n   would reuse\
    \ keystream, and the reuse of keystream can lead to serious\n   privacy attacks\
    \ [SCHNEIER].\n"
- title: 6.2.  Encryption Method Considerations
  contents:
  - "6.2.  Encryption Method Considerations\n   Researchers have shown that the original\
    \ CBC-based encryption methods\n   in [RFC4253] are vulnerable to chosen-plaintext\
    \ privacy attacks\n   [DAI,BKN1,BKN2].  The new stateful-decryption counter mode\
    \ encryption\n   methods described in Section 4 of this document were designed\
    \ to be\n   secure replacements to the original encryption methods described in\n\
    \   [RFC4253].\n   Many people shy away from counter mode-based encryption schemes\n\
    \   because, when used incorrectly (such as when the keystream is allowed\n  \
    \ to repeat), counter mode can be very insecure.  Fortunately, the\n   common\
    \ concerns with counter mode do not apply to SSH because of the\n   rekeying recommendations\
    \ and because of the additional protection\n   provided by the transport protocol's\
    \ MAC.  This discussion is\n   formalized with proofs of security in [BKN1,BKN2].\n\
    \   As an additional note, when one of the stateful-decryption counter\n   mode\
    \ encryption methods (Section 4) is used, then the padding\n   included in an\
    \ SSH packet (Section 4 of [RFC4253]) need not be (but\n   can still be) random.\
    \  This eliminates the need to generate\n   cryptographically secure pseudorandom\
    \ bytes for each packet.\n   One property of counter mode encryption is that it\
    \ does not require\n   that messages be padded to a multiple of the block cipher's\
    \ block\n   length.  Although not padding messages can reduce the protocol's\n\
    \   network consumption, this document requires that padding be a\n   multiple\
    \ of the block cipher's block length in order to (1) not alter\n   the packet\
    \ description in [RFC4253] and (2) not leak precise\n   information about the\
    \ length of the packet's payload data.  (Although\n   there may be some network\
    \ savings from padding to only 8-bytes even\n   if the block cipher uses 16-byte\
    \ blocks, because of (1) we do not\n   make that recommendation here.)\n   In\
    \ addition to stateful-decryption counter mode, [BKN1,BKN2] describe\n   other\
    \ provably secure encryption methods for use with the SSH\n   Transport Protocol.\
    \  The stateful-decryption counter mode methods in\n   Section 4 are, however,\
    \ the preferred alternatives to the insecure\n   methods in [RFC4253] because\
    \ stateful-decryption counter mode is the\n   most efficient (in terms of both\
    \ network consumption and the number\n   of required cryptographic operations\
    \ per packet).\n"
- title: Normative References
  contents:
  - "Normative References\n   [AES]       National Institute of Standards and Technology,\
    \ \"Advanced\n               Encryption Standard (AES)\", Federal Information\n\
    \               Processing Standards Publication 197, November 2001.\n   [DES]\
    \       National Institute of Standards and Technology, \"Data\n             \
    \  Encryption Standard (DES)\", Federal Information\n               Processing\
    \ Standards Publication 46-3, October 1999.\n   [RFC2119]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n               Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2144]   Adams, C., \"The CAST-128 Encryption\
    \ Algorithm\", RFC 2144,\n               May 1997.\n   [RFC4250]   Lehtinen, S.\
    \ and C. Lonvick, Ed., \"The Secure Shell (SSH)\n               Protocol Assigned\
    \ Numbers\", RFC 4250, January 2006.\n   [RFC4251]   Ylonen, T. and C. Lonvick,\
    \ Ed., \"The Secure Shell (SSH)\n               Protocol Architecture\", RFC 4251,\
    \ January 2006.\n   [RFC4253]   Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell\
    \ (SSH)\n               Transport Layer Protocol\", RFC 4253, January 2006.\n\
    \   [SCHNEIER]  Schneier, B., \"Applied Cryptography Second Edition:\n       \
    \        Protocols algorithms and source in code in C\", Wiley,\n            \
    \   1996.\n   [SERPENT]   Anderson, R., Biham, E., and Knudsen, L., \"Serpent:\
    \ A\n               proposal for the Advanced Encryption Standard\", NIST AES\n\
    \               Proposal, 1998.\n   [TWOFISH]   Schneier, B., et al., \"The Twofish\
    \ Encryptions Algorithm:\n               A 128-bit block cipher, 1st Edition\"\
    , Wiley, 1999.\n"
- title: Informative References
  contents:
  - "Informative References\n   [BKN1]      Bellare, M., Kohno, T., and Namprempre,\
    \ C.,\n               \"Authenticated Encryption in SSH: Provably Fixing the SSH\n\
    \               Binary Packet Protocol\", Ninth ACM Conference on Computer\n \
    \              and Communications Security, 2002.\n   [BKN2]      Bellare, M.,\
    \ Kohno, T., and Namprempre, C., \"Breaking and\n               Provably Repairing\
    \ the SSH Authenticated Encryption\n               Scheme: A Case Study of the\
    \ Encode-then-Encrypt-and-MAC\n               Paradigm\", ACM Transactions on\
    \ Information and System\n               Security, 7(2), May 2004.\n   [DAI] \
    \      Dai, W., \"An Attack Against SSH2 Protocol\", Email to the\n          \
    \     ietf-ssh@netbsd.org email list, 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mihir Bellare\n   Department of Computer Science and Engineering\n\
    \   University of California at San Diego\n   9500 Gilman Drive, MC 0404\n   La\
    \ Jolla, CA 92093-0404\n   Phone: +1 858-534-8833\n   EMail: mihir@cs.ucsd.edu\n\
    \   Tadayoshi Kohno\n   Department of Computer Science and Engineering\n   University\
    \ of California at San Diego\n   9500 Gilman Drive, MC 0404\n   La Jolla, CA 92093-0404\n\
    \   Phone: +1 858-534-8833\n   EMail: tkohno@cs.ucsd.edu\n   Chanathip Namprempre\n\
    \   Thammasat University\n   Faculty of Engineering\n   Electrical Engineering\
    \ Department\n   Rangsit Campus, Klong Luang\n   Pathumthani, Thailand 12121\n\
    \   EMail: meaw@alum.mit.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
