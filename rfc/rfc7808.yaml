- contents:
  - '                  Time Zone Data Distribution Service

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a time zone data distribution service that\n
    \  allows reliable, secure, and fast delivery of time zone data and\n   leap-second
    rules to client systems such as calendaring and\n   scheduling applications or
    operating systems.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7808.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  Conventions . . . . . . . . . . . . . . . . . . . .
    . . .   4\n   2.  Architectural Overview  . . . . . . . . . . . . . . . . . .
    .   5\n   3.  General Considerations  . . . . . . . . . . . . . . . . . . .   7\n
    \    3.1.  Time Zone . . . . . . . . . . . . . . . . . . . . . . . .   7\n     3.2.
    \ Time Zone Data  . . . . . . . . . . . . . . . . . . . . .   7\n     3.3.  Time
    Zone Metadata  . . . . . . . . . . . . . . . . . . .   7\n     3.4.  Time Zone
    Data Server . . . . . . . . . . . . . . . . . .   7\n     3.5.  Observance  .
    . . . . . . . . . . . . . . . . . . . . . .   7\n     3.6.  Time Zone Identifiers
    . . . . . . . . . . . . . . . . . .   7\n     3.7.  Time Zone Aliases . . . .
    . . . . . . . . . . . . . . . .   8\n     3.8.  Time Zone Localized Names . .
    . . . . . . . . . . . . . .   8\n     3.9.  Truncating Time Zones . . . . . .
    . . . . . . . . . . . .   9\n     3.10. Time Zone Versions  . . . . . . . . .
    . . . . . . . . . .  10\n   4.  Time Zone Data Distribution Service Protocol  .
    . . . . . . .  10\n     4.1.  Server Protocol . . . . . . . . . . . . . . . .
    . . . . .  10\n       4.1.1.  Time Zone Queries . . . . . . . . . . . . . . .
    . . .  11\n       4.1.2.  Time Zone Formats . . . . . . . . . . . . . . . . .
    .  11\n       4.1.3.  Time Zone Localization  . . . . . . . . . . . . . . .  12\n
    \      4.1.4.  Conditional Time Zone Requests  . . . . . . . . . . .  12\n       4.1.5.
    \ Expanded Time Zone Data . . . . . . . . . . . . . . .  14\n       4.1.6.  Server
    Requirements . . . . . . . . . . . . . . . . .  14\n       4.1.7.  Error Responses
    . . . . . . . . . . . . . . . . . . .  14\n       4.1.8.  Extensions  . . . .
    . . . . . . . . . . . . . . . . .  14\n     4.2.  Client Guidelines . . . . .
    . . . . . . . . . . . . . . .  14\n       4.2.1.  Discovery . . . . . . . . .
    . . . . . . . . . . . . .  14\n         4.2.1.1.  SRV Service Labels for the Time
    Zone Data\n                   Distribution Service  . . . . . . . . . . . . .
    .  15\n         4.2.1.2.  TXT Records for a Time Zone Data Distribution\n                   Service
    . . . . . . . . . . . . . . . . . . . . .  15\n         4.2.1.3.  Well-Known URI
    for a Time Zone Data Distribution\n                   Service . . . . . . . .
    . . . . . . . . . . . . .  16\n           4.2.1.3.1.  Example: Well-Known URI
    Redirects to Actual\n                       Context Path  . . . . . . . . . .
    . . . . . .  17\n       4.2.2.  Synchronization of Time Zones . . . . . . . .
    . . . .  17\n         4.2.2.1.  Initial Synchronization of All Time Zones . .
    . .  17\n         4.2.2.2.  Subsequent Synchronization of All Time Zones  . .
    \ 17\n         4.2.2.3.  Synchronization with Preexisting Time Zone Data .  18\n
    \  5.  Actions . . . . . . . . . . . . . . . . . . . . . . . . . . .  18\n     5.1.
    \ \"capabilities\" Action . . . . . . . . . . . . . . . . . .  18\n       5.1.1.
    \ Example: get capabilities . . . . . . . . . . . . . .  19\n     5.2.  \"list\"
    Action . . . . . . . . . . . . . . . . . . . . . .  21\n       5.2.1.  Example:
    List Time Zone Identifiers . . . . . . . . .  22\n     5.3.  \"get\" Action  .
    . . . . . . . . . . . . . . . . . . . . .  23\n       5.3.1.  Example: Get Time
    Zone Data . . . . . . . . . . . . .  24\n       5.3.2.  Example: Conditional Get
    Time Zone Data . . . . . . .  25\n       5.3.3.  Example: Get Time Zone Data Using
    a Time Zone Alias .  25\n       5.3.4.  Example: Get Truncated Time Zone Data
    . . . . . . . .  26\n       5.3.5.  Example: Request for a Nonexistent Time Zone
    \ . . . .  27\n     5.4.  \"expand\" Action . . . . . . . . . . . . . . . . .
    . . . .  27\n       5.4.1.  Example: Expanded JSON Data Format  . . . . . . .
    . .  29\n     5.5.  \"find\" Action . . . . . . . . . . . . . . . . . . . . .
    .  30\n       5.5.1.  Example: find action  . . . . . . . . . . . . . . . .  31\n
    \    5.6.  \"leapseconds\" Action  . . . . . . . . . . . . . . . . . .  32\n       5.6.1.
    \ Example: Get Leap-Second Information  . . . . . . . .  33\n   6.  JSON Definitions
    \ . . . . . . . . . . . . . . . . . . . . . .  34\n     6.1.  capabilities Action
    Response  . . . . . . . . . . . . . .  34\n     6.2.  list/find Action Response
    . . . . . . . . . . . . . . . .  37\n     6.3.  expand Action Response  . . .
    . . . . . . . . . . . . . .  38\n     6.4.  leapseconds Action Response . . .
    . . . . . . . . . . . .  39\n   7.  New iCalendar Properties  . . . . . . . .
    . . . . . . . . . .  40\n     7.1.  Time Zone Upper Bound . . . . . . . . . .
    . . . . . . . .  40\n     7.2.  Time Zone Identifier Alias Property . . . . .
    . . . . . .  41\n   8.  Security Considerations . . . . . . . . . . . . . . .
    . . . .  42\n   9.  Privacy Considerations  . . . . . . . . . . . . . . . . .
    . .  43\n   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .
    \ 44\n     10.1.  Service Actions Registration . . . . . . . . . . . . . .  45\n
    \      10.1.1.  Service Actions Registration Procedure . . . . . . .  45\n       10.1.2.
    \ Registration Template for Actions  . . . . . . . . .  46\n       10.1.3.  Actions
    Registry . . . . . . . . . . . . . . . . . .  47\n     10.2.  timezone Well-Known
    URI Registration . . . . . . . . . .  47\n     10.3.  Service Name Registrations
    . . . . . . . . . . . . . . .  47\n       10.3.1.  timezone Service Name Registration
    . . . . . . . . .  47\n       10.3.2.  timezones Service Name Registration  .
    . . . . . . .  48\n     10.4.  TZDIST Identifiers Registry  . . . . . . . . .
    . . . . .  48\n       10.4.1.  Registration of invalid-action Error URN . . .
    . . .  49\n       10.4.2.  Registration of invalid-changedsince Error URN . .
    .  49\n       10.4.3.  Registration of tzid-not-found Error URN . . . . . .  50\n
    \      10.4.4.  Registration of invalid-format Error URN . . . . . .  50\n       10.4.5.
    \ Registration of invalid-start Error URN  . . . . . .  50\n       10.4.6.  Registration
    of invalid-end Error URN  . . . . . . .  51\n       10.4.7.  Registration of invalid-pattern
    Error URN  . . . . .  51\n     10.5.  iCalendar Property Registrations . . . .
    . . . . . . . .  52\n   11. References  . . . . . . . . . . . . . . . . . . .
    . . . . . .  52\n     11.1.  Normative References . . . . . . . . . . . . . .
    . . . .  52\n     11.2.  Informative References . . . . . . . . . . . . . . .
    . .  55\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 55\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  56\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Time zone data typically combines a coordinated universal
    time (UTC)\n   offset with daylight saving time (DST) rules.  Time zones are\n
    \  typically tied to specific geographic and geopolitical regions.\n   Whilst
    the UTC offset for particular regions changes infrequently,\n   DST rules can
    change frequently and sometimes with very little notice\n   (maybe hours before
    a change comes into effect).\n   Calendaring and scheduling systems, such as those
    that use iCalendar\n   [RFC5545], as well as operating systems, critically rely
    on time zone\n   data to determine the correct local time.  As such, they need
    to be\n   kept up to date with changes to time zone data.  To date, there has\n
    \  been no fast and easy way to do that.  Time zone data is often\n   supplied
    in the form of a set of data files that have to be\n   \"compiled\" into a suitable
    database format for use by the client\n   application or operating system.  In
    the case of operating systems,\n   often those changes only get propagated to
    client machines when there\n   is an operating system update, which can be infrequent,
    resulting in\n   inaccurate time zone data being present for significant amounts
    of\n   time.  In some cases, old versions of operating systems stop being\n   supported,
    but are still in use and thus require users to manually\n   \"patch\" their system
    to keep up to date with time zone changes.\n   Along with time zone data, it is
    also important to track the use of\n   leap seconds to allow a mapping between
    International Atomic Time\n   (TAI) and UTC.  Leap seconds can be added (or possibly
    removed) at\n   various times of year in an irregular pattern typically determined
    by\n   precise astronomical observations.  The insertion of leap seconds\n   into
    UTC is currently the responsibility of the International Earth\n   Rotation Service.\n
    \  This specification defines a time zone data distribution service\n   protocol
    that allows for fast, reliable, and accurate delivery of\n   time zone data and
    leap-second information to client systems.  This\n   protocol is based on HTTP
    [RFC7230] using a simple JSON-based API\n   [RFC7159].\n   This specification
    does not define the source of the time zone data\n   or leap-second information.
    \ It is assumed that a reliable and\n   accurate source is available.  One such
    source is the IANA-hosted\n   time zone database [RFC6557].\n"
  - contents:
    - "1.1.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
      \  Unless otherwise indicated, UTC date-time values as specified in\n   [RFC3339]
      use a \"Z\" suffix, and not fixed numeric offsets.\n   This specification contains
      examples of HTTP requests and responses.\n   In some cases, additional line
      breaks have been introduced into the\n   request or response data to match maximum
      line-length limits of this\n   document.\n"
    title: 1.1.  Conventions
  title: 1.  Introduction
- contents:
  - "2.  Architectural Overview\n   The overall process for the delivery of time zone
    data can be\n   visualized via the diagram below.\n               ====================
    \ ====================\n   (a)         |   Contributors   |  |   Contributors
    \  |\n               ====================  ====================\n                         |
    \                   |\n               ====================  ====================\n
    \  (b)         |   Publisher A    |  |   Publisher B    |\n               ====================
    \ ====================\n                           \\           /\n                        ====================\n
    \  (c)                  |  Root Provider   |\n                        ====================\n
    \                      /            |       \\\n                      /             |
    \       \\\n           ======================   |  ======================\n   (d)
    \    | Secondary Provider |   |  | Secondary Provider |\n           ======================
    \  |  ======================\n             |           |          |              |\n
    \            |           |          |              |\n        ==========  ==========
    \ ==========      ==========\n   (e)  | Client |  | Client |  | Client |      |
    Client |\n        ==========  ==========  ==========      ==========\n        Figure
    1: Time Zone Data Distribution Service Architecture\n   The overall service is
    made up of several layers:\n   (a) Contributors:  Individuals, governments, or
    organizations that\n       provide information about time zones to the publishing
    process.\n       There can be many contributors.  Note this specification does
    not\n       address how contributions are made.\n   (b) Publishers:  Publishers
    aggregate information from contributors,\n       determine the reliability of
    the information and, based on that,\n       generate time zone data.  There can
    be many publishers, each\n       getting information from many different contributors.
    \ In some\n       cases, a publisher may choose to \"republish\" data from another\n
    \      publisher.\n   (c) Root Providers:  Servers that obtain and then provide
    the time\n       zone data from publishers and make that available to other\n
    \      servers or clients.  There can be many root providers.  Root\n       providers
    can choose to supply time zone data from one or more\n       publishers.\n   (d)
    Secondary Providers:  Servers that handle the bulk of the\n       requests and
    reduce the load on root servers.  These will\n       typically be simple, caches
    of the root server, located closer to\n       clients.  For example a large Internet
    Service Provider (ISP) may\n       choose to set up their own secondary provider
    to allow clients\n       within their network to make requests of that server
    rather than\n       make requests of servers outside their network.  Secondary\n
    \      servers will cache and periodically refresh data from the root\n       servers.\n
    \  (e) Clients:  Applications, operating systems, etc., that make use of\n       time
    zone data and retrieve that from either root or secondary\n       providers.\n
    \  Some of those layers may be coalesced by implementors.  For example,\n   a
    vendor may choose to implement the entire service as a single\n   monolithic virtual
    server with the address embedded in distributed\n   systems.  Others may choose
    to provide a service consisting of\n   multiple layers of providers, many secondary
    servers, and a small\n   number of root servers.\n   This specification is concerned
    only with the protocol used to\n   exchange data between providers and from provider
    to client.  This\n   specification does not define how contributors pass their
    information\n   to publishers, nor how those publishers vet that information to\n
    \  obtain trustworthy data, nor the format of the data produced by the\n   publishers.\n"
  title: 2.  Architectural Overview
- contents:
  - "3.  General Considerations\n   This section defines several terms and explains
    some key concepts\n   used in this specification.\n"
  - contents:
    - "3.1.  Time Zone\n   A time zone is a description of the past and predicted
      future\n   timekeeping practices of a collection of clocks that are intended
      to\n   agree.\n   Note that the term \"time zone\" does not have the common
      meaning of a\n   region of the world at a specific UTC offset, possibly modified
      by\n   daylight saving time.  For example, the \"Central European Time\" zone\n
      \  can correspond to several time zones \"Europe/Berlin\", \"Europe/Paris\",\n
      \  etc., because subregions have kept time differently in the past.\n"
    title: 3.1.  Time Zone
  - contents:
    - "3.2.  Time Zone Data\n   Time zone data is data that defines a single time
      zone, including an\n   identifier, UTC offset values, DST rules, and other information
      such\n   as time zone abbreviations.\n"
    title: 3.2.  Time Zone Data
  - contents:
    - "3.3.  Time Zone Metadata\n   Time zone metadata is data that describes additional
      properties of a\n   time zone that is not itself included in the time zone data.
      \ This\n   can include such things as the publisher name, version identifier,\n
      \  aliases, and localized names (see below).\n"
    title: 3.3.  Time Zone Metadata
  - contents:
    - "3.4.  Time Zone Data Server\n   A time zone data server is a server implementing
      the Time Zone Data\n   Distribution Service Protocol defined by this specification.\n"
    title: 3.4.  Time Zone Data Server
  - contents:
    - "3.5.  Observance\n   A time zone with varying rules for the UTC offset will
      have adjacent\n   periods of time that use different UTC offsets.  Each period
      of time\n   with a constant UTC offset is called an observance.\n"
    title: 3.5.  Observance
  - contents:
    - "3.6.  Time Zone Identifiers\n   Time zone identifiers are unique names associated
      with each time\n   zone, as defined by publishers.  The iCalendar [RFC5545]\n
      \  specification has a \"TZID\" property and parameter whose value is set\n
      \  to the corresponding time zone identifier and used to identify time\n   zone
      data and relate time zones to start and end dates in events,\n   etc.  This
      specification does not define what format of time zone\n   identifiers should
      be used.  It is possible that time zone\n   identifiers from different publishers
      overlap, and there might be a\n   need for a provider to distinguish those with
      some form of\n   \"namespace\" prefix identifying the publisher.  However, development\n
      \  of a standard (global) naming scheme for time zone identifiers is out\n   of
      scope for this specification.\n"
    title: 3.6.  Time Zone Identifiers
  - contents:
    - "3.7.  Time Zone Aliases\n   Time zone aliases map a name onto a time zone identifier.
      \ For\n   example, \"US/Eastern\" is usually mapped on to \"America/New_York\".\n
      \  Time zone aliases are typically used interchangeably with time zone\n   identifiers
      when presenting information to users.\n   A time zone data distribution service
      needs to maintain time zone\n   alias mapping information and expose that data
      to clients as well as\n   allow clients to query for time zone data using aliases.
      \ When\n   returning time zone data to a client, the server returns the data\n
      \  with an identifier matching the query, but it can include one or more\n   additional
      identifiers in the data to provide a hint to the client\n   that alternative
      identifiers are available.  For example, a query for\n   \"US/Eastern\" could
      include additional identifiers for \"America/\n   New_York\" or \"America/Montreal\".\n
      \  The set of aliases may vary depending on whether time zone data is\n   truncated
      (see Section 3.9).  For example, a client located in the US\n   state of Michigan
      may see \"US/Eastern\" as an alias for \"America/\n   Detroit\", whereas a client
      in the US state of New Jersey may see it\n   as an alias for \"America/New_York\",
      and all three names may be\n   aliases if time zones are truncated to post-2013
      data.\n"
    title: 3.7.  Time Zone Aliases
  - contents:
    - "3.8.  Time Zone Localized Names\n   Localized names are names for time zones
      that can be presented to a\n   user in their own language.  Each time zone may
      have one or more\n   localized names associated with it.  Names would typically
      be unique\n   in their own locale as they might be presented to the user in
      a list.\n   Localized names are distinct from abbreviations commonly used for
      UTC\n   offsets within a time zone.  For example, the time zone \"America/\n
      \  New_York\" may have the localized name \"Nueva York\" in a Spanish\n   locale,
      as distinct from the abbreviations \"EST\" and \"EDT\", which may\n   or may
      not have their own localizations.\n   A time zone data distribution service
      might need to maintain\n   localized name information, for one or more chosen
      languages, as well\n   as allow clients to query for time zone data using localized
      names.\n"
    title: 3.8.  Time Zone Localized Names
  - contents:
    - "3.9.  Truncating Time Zones\n   Time zone data can contain information about
      past and future UTC\n   offsets that may not be relevant for a particular server's
      intended\n   clients.  For example, calendaring and scheduling clients are likely\n
      \  most concerned with time zone data that covers a period for one or\n   two
      years in the past on into the future, as users typically create\n   new events
      only for the present and future.  Similarly, time zone\n   data might contain
      a large amount of \"future\" information about\n   transitions occurring many
      decades into the future.  Again, clients\n   might be concerned only with a
      smaller range into the future, and\n   data past that point might be unnecessary.\n
      \  To avoid having to send unnecessary data, servers can choose to\n   truncate
      time zone data to a range determined by start- and end-point\n   date-time values,
      and to provide only offsets and rules between those\n   points.  If such truncation
      is done, the server MUST include the\n   ranges it is using in the \"capabilities\"
      action response (see\n   Section 6.1), so that clients can take appropriate
      action if they\n   need time zone data for times outside of those ranges.\n
      \  The truncation points at the start and end of a range are always a\n   UTC
      date-time value, with the start point being \"inclusive\" to the\n   overall
      range, and the end point being \"exclusive\" to the overall\n   range (i.e.,
      the end value is just past the end of the last valid\n   value in the range).
      \ A server will advertise a truncation range for\n   the truncated data it can
      supply or will provide an indicator that it\n   can truncate at any start or
      end point to produce arbitrary ranges.\n   In addition, the server can advertise
      that it supplies untruncated\n   data -- that is, data that covers the full
      range of times available\n   from the source publisher.  In the absence of any
      indication of\n   truncated data available on the server, the server will supply
      only\n   untruncated data.\n   When truncating the start of a \"VTIMEZONE\"
      component, the server MUST\n   include exactly one \"STANDARD\" or \"DAYLIGHT\"
      subcomponent with a\n   \"DTSTART\" property value that matches the start point
      of the\n   truncation range, and appropriate \"TZOFFSETFROM\" and \"TZOFFSETTO\"\n
      \  properties to indicate the correct offset in effect right before and\n   after
      the start point of the truncation range.  This subcomponent,\n   which is the
      first observance defined by the time zone data,\n   represents the earliest
      valid date-time covered by the time zone data\n   in the truncated \"VTIMEZONE\"
      component.\n   When truncating the end of a \"VTIMEZONE\" component, the server
      MUST\n   include a \"TZUNTIL\" iCalendar property (Section 7.1) in the\n   \"VTIMEZONE\"
      component to indicate the end point of the truncation\n   range.\n"
    title: 3.9.  Truncating Time Zones
  - contents:
    - "3.10.  Time Zone Versions\n   Time zone data changes over time, and it is important
      for consumers\n   of that data to stay up to date with the latest versions.
      \ As a\n   result, it is useful to identify individual time zones with a\n   specific
      version number or version identifier as supplied by the time\n   zone data publisher.
      \ There are two common models that time zone data\n   publishers might use to
      publish updates to time zone data:\n   a.  with the \"monolithic\" model, the
      data for all time zones is\n       published in one go, with a single version
      number or identifier\n       applied to the entire data set.  For example, a
      publisher\n       producing data several times a year might use version identifiers\n
      \      \"2015a\", \"2015b\", etc.\n   b.  with the \"incremental\" model, each
      time zone has its own version\n       identifier, so that each time zone can
      be independently updated\n       without impacting any others.  For example,
      if the initial data\n       has version \"A.1\" for time zone \"A\", and \"B.1\"
      for time zone \"B\",\n       and then time zone \"B\" changes; when the data
      is next published,\n       time zone \"A\" will still have version \"A.1\",
      but time zone \"B\"\n       will now have \"B.2\".\n   A time zone data distribution
      service needs to ensure that the\n   version identifiers used by the time zone
      data publisher are\n   available to any client, along with the actual publisher
      name on a\n   per-time-zone basis.  This allows clients to compare publisher/\n
      \  version details on any server, with existing locally cached client\n   data,
      and only fetch those time zones that have actually changed (see\n   Section
      4.2.2 for more details on how clients synchronize data from\n   the server).\n"
    title: 3.10.  Time Zone Versions
  title: 3.  General Considerations
- contents:
  - '4.  Time Zone Data Distribution Service Protocol

    '
  - contents:
    - "4.1.  Server Protocol\n   The time zone data distribution service protocol
      uses HTTP [RFC7230]\n   for query and delivery of time zone data, metadata,
      and leap-second\n   information.  The interactions with the HTTP server can
      be broken\n   down into a set of \"actions\" that define the overall function
      being\n   requested (see Section 5).  Each action targets a specific HTTP\n
      \  resource using the GET method, with various request-URI parameters\n   altering
      the behavior as needed.\n   The HTTP resources used for requests will be identified
      via URI\n   templates [RFC6570].  The overall time zone data distribution service\n
      \  has a \"context path\" request-URI template defined as \"{/service-\n   prefix}\".
      \ This \"root\" prefix is discovered by the client as per\n   Section 4.2.1.
      \ Request-URIs that target time zone data directly use\n   the prefix template
      \"{/service-prefix,data-prefix}\".  The second\n   component of the prefix template
      can be used to introduce additional\n   path segments in the request-URI to
      allow for alternative ways to\n   \"partition\" the time zone data.  For example,
      time zone data might be\n   partitioned by publisher release dates or version
      identifiers.  This\n   specification does not define any partitions; that is
      left for future\n   extensions.  When the \"data-prefix\" variable is empty,
      the server is\n   expected to return the current version of time zone data it
      has for\n   all publishers it supports.\n   All URI template variable values,
      and URI request parameters that\n   contain text values, MUST be encoded using
      the UTF-8 [RFC3629]\n   character set.  All responses MUST return data using
      the UTF-8\n   [RFC3629] character set.  It is important to note that any \"/\"\n
      \  characters, which are frequently found in time zone identifiers, are\n   percent-encoded
      when used in the value of a path segment expansion\n   variable in a URI template
      (as per Section 3.2.6 of [RFC6570]).\n   Thus, the time zone identifier \"America/New_York\"
      would appear as\n   \"America%2FNew_York\" when used as the value for the \"{/tzid}\"
      URI\n   template variable defined later in this specification.\n   The server
      provides time zone metadata in the form of a JSON\n   [RFC7159] object.  Clients
      can directly request the time zone\n   metadata or issue queries for subsets
      of metadata that match specific\n   criteria.\n   Security and privacy considerations
      for this protocol are discussed\n   in detail in Sections 8 and 9, respectively.\n"
    - contents:
      - "4.1.1.  Time Zone Queries\n   Time zone identifiers, aliases, or localized
        names can be used to\n   query for time zone data or metadata.  This will
        be more explicitly\n   defined below for each action.  In general, however,
        if a \"tzid\" URI\n   template variable is used, then the value may be an
        identifier or an\n   alias.  When the \"pattern\" URI query parameter is used,
        it may be an\n   identifier, an alias, or a localized name.\n"
      title: 4.1.1.  Time Zone Queries
    - contents:
      - "4.1.2.  Time Zone Formats\n   The default media type [RFC2046] format for
        returning time zone data\n   is the iCalendar [RFC5545] data format.  In addition,
        the iCalendar-\n   in-XML [RFC6321] and iCalendar-in-JSON [RFC7265] representations
        are\n   available.  Clients use the HTTP Accept header field (see\n   Section
        5.3.2 of [RFC7231]) to indicate their preference for the\n   returned data
        format.  Servers indicate the available formats that\n   they support via
        the \"capabilities\" action response (Section 5.1).\n"
      title: 4.1.2.  Time Zone Formats
    - contents:
      - "4.1.3.  Time Zone Localization\n   As per Section 3.8, time zone data can
        support localized names.\n   Clients use the HTTP Accept-Language header field
        (see Section 5.3.5\n   of [RFC7231]) to indicate their preference for the
        language used for\n   localized names in the response data.\n"
      title: 4.1.3.  Time Zone Localization
    - contents:
      - "4.1.4.  Conditional Time Zone Requests\n   When time zone data or metadata
        changes, it needs to be distributed\n   in a timely manner because changes
        to local time offsets might occur\n   within a few days of the publication
        of the time zone data changes.\n   Typically, the number of time zones that
        change is small, whilst the\n   overall number of time zones can be large.
        \ Thus, when a client is\n   using more than a few time zones, it is more
        efficient for the client\n   to be able to download only those time zones
        that have changed (an\n   incremental update).\n   Clients initially request
        a full list of time zones from the server\n   using a \"list\" action request
        (see Section 5.2).  The response to\n   that request includes two items the
        client caches for use with\n   subsequent \"conditional\" (incremental update)
        requests:\n   1.  An opaque synchronization token in the \"synctoken\" JSON
        member.\n       This token changes whenever there is a change to any metadata\n
        \      associated with one or more time zones (where the metadata is the\n
        \      information reported in the \"list\" action response for each time\n
        \      zone).\n   2.  The HTTP ETag header field value for each time zone
        returned in\n       the response.  The ETag header field value is returned
        in the\n       \"etag\" JSON member, and it corresponds to the ETag header
        field\n       value that would be returned when executing a \"get\" action\n
        \      request (see Section 5.3) against the corresponding time zone\n       data
        resource.\n   For subsequent updates to cached data, clients can use the following\n
        \  procedure:\n   a.  Send a \"list\" action request with a \"changedsince\"
        URI query\n       parameter with its value set to the last opaque synchronization\n
        \      token returned by the server.  The server will return time zone\n       metadata
        for only those time zones that have changed since the\n       last request.\n
        \  b.  The client will cache the new opaque synchronization token\n       returned
        in the response for the next incremental update, along\n       with the returned
        time zone metadata information.\n   c.  The client will check each time zone
        metadata to see if the\n       \"etag\" value is different from that of any
        cached time zone data\n       it has.\n   d.  The client will use a \"get\"
        action request to update any cached\n       time zone data for those time
        zones whose ETag header field value\n       has changed.\n   Note that time
        zone metadata will always change when the\n   corresponding time zone data
        changes.  However, the converse is not\n   true: it is possible for some piece
        of the time zone metadata to\n   change without the corresponding time zone
        data changing. e.g., for\n   the case of a \"monolithic\" publisher (see Section
        3.10), the version\n   identifier in every time zone metadata element will
        change with each\n   new published revision; however, only a small subset
        of time zone\n   data will actually change.\n   If a client needs data for
        only one or a small set of time zones\n   (e.g., a clock in a fixed location),
        then it can use a conditional\n   HTTP request to determine if the time zone
        data has changed and\n   retrieve the new data.  The full details of HTTP
        conditional requests\n   are described in [RFC7232]; what follows is a brief
        summary of what a\n   client typically does.\n   a.  When the client retrieves
        the time zone data from the server\n       using a \"get\" action (see Section
        5.3), the server will include\n       an HTTP ETag header field in the response.\n
        \  b.  The client will store the value of that header field along with\n       the
        request-URI used for the request.\n   c.  When the client wants to check for
        an update, it issues another\n       \"get\" action HTTP request on the original
        request-URI, but this\n       time it includes an If-None-Match HTTP request
        header field, with\n       a value set to the ETag header field value from
        the previous\n       response.  If the data for the time zone has not changed,
        the\n       server will return a 304 (Not Modified) HTTP response.  If the\n
        \      data has changed, the server will return a normal HTTP success\n       response
        that will include the changed data, as well as a new\n       value for the
        ETag header field.\n   Clients SHOULD poll for changes, using an appropriate
        conditional\n   request, at least once a day.  A server acting as a secondary\n
        \  provider, caching time zone data from another server, SHOULD poll for\n
        \  changes once per hour.  See Section 8 on expected client and server\n   behavior
        regarding high request rates.\n"
      title: 4.1.4.  Conditional Time Zone Requests
    - contents:
      - "4.1.5.  Expanded Time Zone Data\n   Determining time zone offsets at a particular
        point in time is often\n   a complicated process, as the rules for daylight
        saving time can be\n   complex.  To help with this, the time zone data distribution
        service\n   provides an action that allows clients to request the server to\n
        \  expand a time zone into a set of \"observances\" over a fixed period of\n
        \  time (see Section 5.4).  Each of these observances describes a UTC\n   onset
        time and UTC offsets for the prior time and the observance\n   time.  Together,
        these provide a quick way for \"thin\" clients to\n   determine an appropriate
        UTC offset for an arbitrary date without\n   having to do full time zone expansion
        themselves.\n"
      title: 4.1.5.  Expanded Time Zone Data
    - contents:
      - "4.1.6.  Server Requirements\n   To enable a simple client implementation,
        servers SHOULD ensure that\n   they provide or cache data for all commonly
        used time zones, from\n   various publishers.  That allows client implementations
        to configure\n   a single server to get all time zone data.  In turn, any
        server can\n   refresh any of the data from any other server -- though the
        root\n   servers may provide the most up-to-date copy of the data.\n"
      title: 4.1.6.  Server Requirements
    - contents:
      - "4.1.7.  Error Responses\n   When an HTTP error response is returned to the
        client, the server\n   SHOULD return a JSON \"problem details\" object in
        the response body,\n   as per [RFC7807].  Every JSON \"problem details\" object
        MUST include a\n   \"type\" member with a URI value matching the applicable
        error code\n   (defined for each action in Section 5).\n"
      title: 4.1.7.  Error Responses
    - contents:
      - "4.1.8.  Extensions\n   This protocol is designed to be extensible through
        a standards-based\n   registration mechanism (see Section 10).  It is anticipated
        that\n   other useful time zone actions will be added in the future (e.g.,\n
        \  mapping a geographical location to time zone identifiers, getting\n   change
        history for time zones), and so, servers MUST return a\n   description of
        their capabilities.  This will allow clients to\n   determine if new features
        have been installed and, if not, fall back\n   on earlier features or disable
        some client capabilities.\n"
      title: 4.1.8.  Extensions
    title: 4.1.  Server Protocol
  - contents:
    - '4.2.  Client Guidelines

      '
    - contents:
      - "4.2.1.  Discovery\n   Client implementations need to either know where the
        time zone data\n   distribution service is located or discover it through
        some\n   mechanism.  To use a time zone data distribution service, a client\n
        \  needs a Fully Qualified Domain Name (FQDN), port, and HTTP request-\n   URI
        path.  The request-URI path found via discovery is the \"context\n   path\"
        for the service itself.  The \"context path\" is used as the\n   value of
        the \"service-prefix\" URI template variable when executing\n   actions (see
        Section 5).\n   The following subsections describe two methods of service
        discovery\n   using DNS SRV records [RFC2782] and an HTTP \"well-known\" [RFC5785]\n
        \  resource.  However, alternative mechanisms could also be used (e.g.,\n
        \  a DHCP server option [RFC2131]).\n"
      - contents:
        - "4.2.1.1.  SRV Service Labels for the Time Zone Data Distribution Service\n
          \  [RFC2782] defines a DNS-based service discovery protocol that has\n   been
          widely adopted as a means of locating particular services within\n   a local
          area network and beyond, using SRV RR records.  This can be\n   used to
          discover a service's FQDN and port.\n   This specification adds two service
          types for use with SRV records:\n   timezone:  Identifies a time zone data
          distribution server that uses\n      HTTP without Transport Layer Security
          ([RFC2818]).\n   timezones:  Identifies a time zone data distribution server
          that uses\n      HTTP with Transport Layer Security ([RFC2818]).\n   Clients
          MUST honor \"TTL\", \"Priority\", and \"Weight\" values in the SRV\n   records,
          as described by [RFC2782].\n   Example: service record for server without
          Transport Layer Security.\n   _timezone._tcp SRV 0 1 80 tz.example.com.\n
          \  Example: service record for server with transport layer security.\n   _timezones._tcp
          SRV 0 1 443 tz.example.com.\n"
        title: 4.2.1.1.  SRV Service Labels for the Time Zone Data Distribution Service
      - contents:
        - "4.2.1.2.  TXT Records for a Time Zone Data Distribution Service\n   When
          SRV RRs are used to advertise a time zone data distribution\n   service,
          it is also convenient to be able to specify a \"context path\"\n   in the
          DNS to be retrieved at the same time.  To enable that, this\n   specification
          uses a TXT RR that follows the syntax defined in\n   Section 6 of [RFC6763]
          and defines a \"path\" key for use in that\n   record.  The value of the
          key MUST be the actual \"context path\" to\n   the corresponding service
          on the server.\n   A site might provide TXT records in addition to SRV records
          for each\n   service.  When present, clients MUST use the \"path\" value
          as the\n   \"context path\" for the service in HTTP requests.  When not
          present,\n   clients use the \".well-known\" URI approach described in\n
          \  Section 4.2.1.3.\n   As per Section 8, the server MAY require authentication
          when a client\n   tries to access the path URI specified by the TXT RR (i.e.,
          the\n   server would return a 401 status response to the unauthenticated\n
          \  request from the client, then return a redirect response after a\n   successful
          authentication by the client).\n   Example: text record for service with
          Transport Layer Security.\n   _timezones._tcp TXT path=/timezones\n"
        title: 4.2.1.2.  TXT Records for a Time Zone Data Distribution Service
      - contents:
        - "4.2.1.3.  Well-Known URI for a Time Zone Data Distribution Service\n   A
          \"well-known\" URI [RFC5785] is registered by this specification for\n   the
          Time Zone Data Distribution service, \"timezone\" (see Section 10).\n   This
          URI points to a resource that the client can use as the initial\n   \"context
          path\" for the service they are trying to connect to.  The\n   server MUST
          redirect HTTP requests for that resource to the actual\n   \"context path\"
          using one of the available mechanisms provided by HTTP\n   (e.g., using
          an appropriate 3xx status response).  Clients MUST\n   handle HTTP redirects
          on the \".well-known\" URI, taking into account\n   security restrictions
          on redirects described in Section 8.  Servers\n   MUST NOT locate the actual
          time zone data distribution service\n   endpoint at the \".well-known\"
          URI as per Section 1.1 of [RFC5785].\n   The \"well-known\" URI MUST be
          present on the server, even when a TXT\n   RR (Section 4.2.1.2) is used
          in the DNS to specify a \"context path\".\n   Servers SHOULD set an appropriate
          Cache-Control header field value\n   (as per Section 5.2 of [RFC7234]) in
          the redirect response to ensure\n   caching occurs as needed, or as required
          by the type of response\n   generated.  For example, if it is anticipated
          that the location of\n   the redirect might change over time, then an appropriate
          \"max-age\"\n   value would be used.\n   As per Section 8, the server MAY
          require authentication when a client\n   tries to access the \".well-known\"
          URI (i.e., the server would return\n   a 401 status response to the unauthenticated
          request from the client,\n   then return the redirect response after a successful
          authentication\n   by the client).\n"
        - contents:
          - "4.2.1.3.1.  Example: Well-Known URI Redirects to Actual Context Path\n
            \  A time zone data distribution server has a \"context path\" that is\n
            \  \"/servlet/timezone\".  The client will use \"/.well-known/timezone\"
            as\n   the path for the service after it has first found the FQDN and
            port\n   number via an SRV lookup or via manual entry of information by
            the\n   user.  When the client makes its initial HTTP request against\n
            \  \"/.well-known/timezone\", the server would issue an HTTP 301 redirect\n
            \  response with a Location response header field using the path\n   \"/servlet/timezone\".
            \ The client would then \"follow\" this redirect to\n   the new resource
            and continue making HTTP requests there.  The client\n   would also cache
            the redirect information, subject to any Cache-\n   Control directive,
            for use in subsequent requests.\n"
          title: '4.2.1.3.1.  Example: Well-Known URI Redirects to Actual Context
            Path'
        title: 4.2.1.3.  Well-Known URI for a Time Zone Data Distribution Service
      title: 4.2.1.  Discovery
    - contents:
      - "4.2.2.  Synchronization of Time Zones\n   This section discusses possible
        client synchronization strategies\n   using the various protocol elements
        provided by the server for that\n   purpose.\n"
      - contents:
        - "4.2.2.1.  Initial Synchronization of All Time Zones\n   When a secondary
          service or a client wishing to cache all time zone\n   data first starts,
          or wishes to do a full refresh, it synchronizes\n   with another server
          by issuing a \"list\" action to retrieve all the\n   time zone metadata.
          \ The client preserves the returned opaque token\n   for subsequent use
          (see \"synctoken\" in Section 5.2.1).  The client\n   stores the metadata
          for each time zone returned in the response.\n   Time zone data for each
          corresponding time zone can then be fetched\n   and stored locally.  In
          addition, a mapping of aliases to time zones\n   can be built from the metadata.
          \ A typical \"list\" action response\n   size is about 50-100 KB of \"pretty
          printed\" JSON data, for a service\n   using the IANA time zone database
          [RFC6557], as of the time of\n   publication of this specification.\n"
        title: 4.2.2.1.  Initial Synchronization of All Time Zones
      - contents:
        - "4.2.2.2.  Subsequent Synchronization of All Time Zones\n   A secondary
          service or a client caching all time zones needs to\n   periodically synchronize
          with a server.  To do so, it issues a \"list\"\n   action with the \"changedsince\"
          URI query parameter set to the value\n   of the opaque token returned by
          the last synchronization.  The client\n   again preserves the returned opaque
          token for subsequent use.  The\n   client updates its stored time zone metadata
          using the new values\n   returned in the response, which contains just the
          time zone metadata\n   for those time zones changed since the last synchronization.
          \ In\n   addition, it compares the \"etag\" value in each time zone metadata
          to\n   the ETag header field value for the corresponding time zone data\n
          \  resource it has previously cached; if they are different, it fetches\n
          \  the new time zone data.  Note that if the client presents the server\n
          \  with a \"changedsince\" value that the server does not support, all\n
          \  time zone data is returned, as it would for the case where the\n   request
          did not include a \"changedsince\" value.\n   Publishers should take into
          account the fact that the \"outright\"\n   deletion of time zone names will
          cause problems to simple clients,\n   and so aliasing a deleted time zone
          identifier to a suitable\n   alternate one is preferable.\n"
        title: 4.2.2.2.  Subsequent Synchronization of All Time Zones
      - contents:
        - "4.2.2.3.  Synchronization with Preexisting Time Zone Data\n   A client
          might be pre-provisioned with time zone data from a source\n   other than
          the time zone data distribution service it is configured\n   to use.  In
          such cases, the client might want to minimize the amount\n   of time zone
          data it synchronizes by doing an initial \"list\" action\n   to retrieve
          all the time zone metadata, but then only fetch time zone\n   data for those
          time zones that do not match the publisher and version\n   details for the
          pre-provisioned data.\n"
        title: 4.2.2.3.  Synchronization with Preexisting Time Zone Data
      title: 4.2.2.  Synchronization of Time Zones
    title: 4.2.  Client Guidelines
  title: 4.  Time Zone Data Distribution Service Protocol
- contents:
  - "5.  Actions\n   Servers MUST support the following actions.  The information
    below\n   shows details about each action: the request-URI the client targets\n
    \  (in the form of a URI template [RFC6570]), a description, the set of\n   allowed
    query parameters, the nature of the response, and a set of\n   possible error
    codes for the response (see Section 4.1.7).\n   For any error not covered by the
    specific error codes defined below,\n   the \"urn:ietf:params:tzdist:error:invalid-action\"
    error code is\n   returned to the client in the JSON \"problem details\" object.\n
    \  The examples in the following subsections presume that the timezone\n   context
    path has been discovered to be \"/servlet/timezone\" (as in the\n   example in
    Section 4.2.1.3.1).\n"
  - contents:
    - "5.1.  \"capabilities\" Action\n   Name:  capabilities\n   Request-URI Template:\n
      \     {/service-prefix}/capabilities\n   Description:  This action returns the
      capabilities of the server,\n      allowing clients to determine if a specific
      feature has been\n      deployed and/or enabled.\n   Parameters:  None\n   Response:
      \ A JSON object containing a \"version\" member, an \"info\"\n      member,
      and an \"actions\" member; see Section 6.1.\n   Possible Error Codes:  No specific
      code.\n"
    - contents:
      - "5.1.1.  Example: get capabilities\n   >> Request <<\n   GET /servlet/timezone/capabilities
        HTTP/1.1\n   Host: tz.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
        \  Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type: application/json;
        charset=\"utf-8\"\n   Content-Length: xxxx\n   {\n     \"version\": 1,\n     \"info\":
        {\n       \"primary-source\": \"Olson:2011m\",\n       \"formats\": [\n         \"text/calendar\",\n
        \        \"application/calendar+xml\",\n         \"application/calendar+json\"\n
        \      ],\n       \"truncated\" : {\n         \"any\": false,\n         \"ranges\":
        [\n           {\n             \"start\": \"1970-01-01T00:00:00Z\",\n             \"end\":
        \"*\"\n           },\n           {\n             \"start\":\"2010-01-01T00:00:00Z\",\n
        \            \"end\":\"2020-01-01T00:00:00Z\"\n           }\n         ],\n
        \        \"untruncated\": true\n       },\n       \"provider-details\": \"http://tz.example.com/about.html\",\n
        \      \"contacts\": [\"mailto:tzs@example.org\"]\n     },\n     \"actions\":
        [\n       {\n         \"name\": \"capabilities\",\n         \"uri-template\":
        \"/servlet/timezone/capabilities\",\n         \"parameters\": []\n       },\n
        \      {\n         \"name\": \"list\",\n         \"uri-template\": \"/servlet/timezone/zones{?changedsince}\",\n
        \        \"parameters\": [\n           {\n             \"name\": \"changedsince\",\n
        \            \"required\": false,\n             \"multi\": false\n           }\n
        \        ]\n       },\n       {\n         \"name\": \"get\",\n         \"uri-template\":
        \"/servlet/timezone/zones{/tzid}{?start,end}\",\n         \"parameters\":
        [\n           {\n             \"name\": \"start\",\n             \"required\":
        false,\n             \"multi\": false\n           },\n           {\n             \"name\":
        \"end\",\n             \"required\": false,\n             \"multi\": false\n
        \          }\n         ]\n       },\n       {\n         \"name\": \"expand\",\n
        \        \"uri-template\":\n           \"/servlet/timezone/zones{/tzid}/observances{?start,end}\",\n
        \        \"parameters\": [\n           {\n             \"name\": \"start\",\n
        \            \"required\": true,\n             \"multi\": false\n           },\n
        \          {\n             \"name\": \"end\",\n             \"required\":
        true,\n             \"multi\": false\n           }\n         ]\n       },\n
        \      {\n         \"name\": \"find\",\n         \"uri-template\": \"/servlet/timezone/zones{?pattern}\",\n
        \        \"parameters\": [\n           {\n             \"name\": \"pattern\",\n
        \            \"required\": true,\n             \"multi\": false\n           }\n
        \        ]\n       },\n       {\n         \"name\": \"leapseconds\",\n         \"uri-template\":
        \"/servlet/timezone/leapseconds\",\n         \"parameters\": []\n       }\n
        \    ]\n   }\n"
      title: '5.1.1.  Example: get capabilities'
    title: 5.1.  "capabilities" Action
  - contents:
    - "5.2.  \"list\" Action\n   Name:  list\n   Request-URI Template:\n      {/service-prefix,data-prefix}/zones{?changedsince}\n
      \  Description:  This action lists all time zone identifiers in summary\n      format,
      with publisher, version, aliases, and optional localized\n      data.  In addition,
      it returns an opaque synchronization token for\n      the entire response.  If
      the \"changedsince\" URI query parameter is\n      present, its value MUST correspond
      to a previously returned\n      synchronization token value.  When \"changedsince\"
      is used, the\n      server MUST return only those time zones that have changed
      since\n      the specified synchronization token.  If the \"changedsince\" value\n
      \     is not supported by the server, the server MUST return all time\n      zones,
      treating the request as if it had no \"changedsince\".\n   Parameters:\n      changedsince\n
      \        OPTIONAL, and MUST NOT occur more than once.\n   Response:  A JSON
      object containing a \"synctoken\" member and a\n      \"timezones\" member;
      see Section 6.2.\n   Possible Error Codes:\n      urn:ietf:params:tzdist:error:invalid-changedsince\n
      \        The \"changedsince\" URI query parameter appears more than once.\n"
    - contents:
      - "5.2.1.  Example: List Time Zone Identifiers\n   In this example the client
        requests the full set of time zone\n   identifiers.\n   >> Request <<\n   GET
        /servlet/timezone/zones HTTP/1.1\n   Host: tz.example.com\n   >> Response
        <<\n   HTTP/1.1 200 OK\n   Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type:
        application/json; charset=\"utf-8\"\n   Content-Length: xxxx\n   {\n     \"synctoken\":
        \"2009-10-11T09:32:11Z\",\n     \"timezones\": [\n       {\n         \"tzid\":
        \"America/New_York\",\n         \"etag\": \"123456789-000-111\",\n         \"last-modified\":
        \"2009-09-17T01:39:34Z\",\n         \"publisher\": \"Example.com\",\n         \"version\":
        \"2015a\",\n         \"aliases\":[\"US/Eastern\"],\n         \"local-names\":
        [\n           {\n             \"name\": \"America/New_York\",\n             \"lang\":
        \"en_US\"\n           }\n         ]\n       },\n       ...other time zones...\n
        \    ]\n   }\n"
      title: '5.2.1.  Example: List Time Zone Identifiers'
    title: 5.2.  "list" Action
  - contents:
    - "5.3.  \"get\" Action\n   Name:  get\n   Request-URI Template:\n      {/service-prefix,data-prefix}/zones{/tzid}{?start,end}\n
      \     The \"tzid\" variable value is REQUIRED in order to distinguish this\n
      \     action from the \"list\" action.\n   Description:  This action returns
      a time zone.  The response MUST\n      contain an ETag response header field
      indicating the current value\n      of the strong entity tag of the time zone
      resource.\n      In the absence of any Accept HTTP request header field, the
      server\n      MUST return time zone data with the \"text/calendar\" media type.\n
      \     If the \"tzid\" variable value is actually a time zone alias, the\n      server
      will return the matching time zone data with the alias as\n      the identifier
      in the time zone data.  The server MAY include one\n      or more \"TZID-ALIAS-OF\"
      properties (see Section 7.2) in the time\n      zone data to indicate additional
      identifiers that have the\n      matching time zone identifier as an alias.\n
      \  Parameters:\n      start=<date-time>\n         OPTIONAL, and MUST NOT occur
      more than once.  Specifies the\n         inclusive UTC date-time value at which
      the returned time zone\n         data is truncated at its start.\n      end=<date-time>\n
      \        OPTIONAL, and MUST NOT occur more than once.  Specifies the\n         exclusive
      UTC date-time value at which the returned time zone\n         data is truncated
      at its end.\n   Response:  A document containing all the requested time zone
      data in\n      the format specified.\n   Possible Error Codes:\n      urn:ietf:params:tzdist:error:tzid-not-found\n
      \        No time zone associated with the specified \"tzid\" path segment\n
      \        value was found.\n      urn:ietf:params:tzdist:error:invalid-format\n
      \        The Accept request header field supplied by the client did not\n         contain
      a media type for time zone data supported by the\n         server.\n      urn:ietf:params:tzdist:error:invalid-start\n
      \        The \"start\" URI query parameter has an incorrect value, or\n         appears
      more than once, or does not match one of the fixed\n         truncation range
      start values advertised in the \"capabilities\"\n         action response.\n
      \     urn:ietf:params:tzdist:error:invalid-end\n         The \"end\" URI query
      parameter has an incorrect value, or\n         appears more than once, or has
      a value less than or equal to\n         the \"start\" URI query parameter, or
      does not match one of the\n         fixed truncation range end values advertised
      in the\n         \"capabilities\" action response.\n"
    - contents:
      - "5.3.1.  Example: Get Time Zone Data\n   In this example, the client requests
        that the time zone with a\n   specific time zone identifier be returned.\n
        \  >> Request <<\n   GET /servlet/timezone/zones/America%2FNew_York HTTP/1.1\n
        \  Host: tz.example.com\n   Accept:text/calendar\n   >> Response <<\n   HTTP/1.1
        200 OK\n   Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type: text/calendar;
        charset=\"utf-8\"\n   Content-Length: xxxx\n   ETag: \"123456789-000-111\"\n
        \  BEGIN:VCALENDAR\n   ...\n   BEGIN:VTIMEZONE\n   TZID:America/New_York\n
        \  ...\n   END:VTIMEZONE\n   END:VCALENDAR\n"
      title: '5.3.1.  Example: Get Time Zone Data'
    - contents:
      - "5.3.2.  Example: Conditional Get Time Zone Data\n   In this example the client
        requests that the time zone with a\n   specific time zone identifier be returned,
        but uses an If-None-Match\n   header field in the request, set to the value
        of a previously\n   returned ETag header field, or the value of the \"etag\"
        member in a\n   JSON \"timezone\" object returned from a \"list\" action response.
        \ In\n   this example, the data on the server has not changed, so a 304\n
        \  response is returned.\n   >> Request <<\n   GET /servlet/timezone/zones/America%2FNew_York
        HTTP/1.1\n   Host: tz.example.com\n   Accept:text/calendar\n   If-None-Match:
        \"123456789-000-111\"\n   >> Response <<\n   HTTP/1.1 304 Not Modified\n   Date:
        Wed, 4 Jun 2008 09:32:12 GMT\n"
      title: '5.3.2.  Example: Conditional Get Time Zone Data'
    - contents:
      - "5.3.3.  Example: Get Time Zone Data Using a Time Zone Alias\n   In this example,
        the client requests that the time zone with an\n   aliased time zone identifier
        be returned, and the server returns the\n   time zone data with that identifier
        and two aliases.\n   >> Request <<\n   GET /servlet/timezone/zones/US%2FEastern
        HTTP/1.1\n   Host: tz.example.com\n   Accept:text/calendar\n   >> Response
        <<\n   HTTP/1.1 200 OK\n   Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type:
        text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n   ETag: \"123456789-000-111\"\n
        \  BEGIN:VCALENDAR\n   ...\n   BEGIN:VTIMEZONE\n   TZID:US/Eastern\n   TZID-ALIAS-OF:America/New_York\n
        \  TZID-ALIAS-OF:America/Montreal\n   ...\n   END:VTIMEZONE\n   END:VCALENDAR\n"
      title: '5.3.3.  Example: Get Time Zone Data Using a Time Zone Alias'
    - contents:
      - "5.3.4.  Example: Get Truncated Time Zone Data\n   Assume the server advertises
        a \"truncated\" object in its\n   \"capabilities\" response that appears as:\n
        \  \"truncated\": {\n     \"any\": false,\n     \"ranges\": [\n       {\"start\":
        \"1970-01-01T00:00:00Z\", \"end\": \"*\"},\n       {\"start\":\"2010-01-01T00:00:00Z\",
        \"end\":\"2020-01-01T00:00:00Z\"}\n     ],\n     \"untruncated\": false\n
        \  }\n   In this example, the client requests that the time zone with a\n
        \  specific time zone identifier truncated at one of the ranges\n   specified
        by the server be returned.  Note the presence of a\n   \"STANDARD\" component
        that matches the start point of the truncation\n   range (converted to the
        local time for the UTC offset in effect at\n   the matching UTC time).  Also,
        note the presence of the \"TZUNTIL\"\n   (Section 7.1) iCalendar property
        in the \"VTIMEZONE\" component,\n   indicating the upper bound on the validity
        period of the time zone\n   data.\n   >> Request <<\n   GET /servlet/timezone/zones/America%2FNew_York\n
        \    ?start=2010-01-01T00:00:00Z&end=2020-01-01T00:00:00Z HTTP/1.1\n   Host:
        tz.example.com\n   Accept:text/calendar\n   >> Response <<\n   HTTP/1.1 200
        OK\n   Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type: text/calendar;
        charset=\"utf-8\"\n   Content-Length: xxxx\n   ETag: \"123456789-000-111\"\n
        \  BEGIN:VCALENDAR\n   ...\n   BEGIN:VTIMEZONE\n   TZID:America/New_York\n
        \  TZUNTIL:20200101T000000Z\n   BEGIN:STANDARD\n   DTSTART:20101231T190000\n
        \  TZNAME:EST\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0500\n   END:STANDARD\n
        \  ...\n   END:VTIMEZONE\n   END:VCALENDAR\n"
      title: '5.3.4.  Example: Get Truncated Time Zone Data'
    - contents:
      - "5.3.5.  Example: Request for a Nonexistent Time Zone\n   In this example,
        the client requests that the time zone with a\n   specific time zone identifier
        be returned.  As it turns out, no time\n   zone exists with that identifier.\n
        \  >> Request <<\n   GET /servlet/timezone/zones/America%2FPittsburgh HTTP/1.1\n
        \  Host: tz.example.com\n   Accept:application/calendar+json\n   >> Response
        <<\n   HTTP/1.1 404 Not Found\n   Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type:
        application/problem+json; charset=\"utf-8\"\n   Content-Language: en\n   Content-Length:
        xxxx\n   {\n     \"type\": \"urn:ietf:params:tzdist:error:tzid-not-found\",\n
        \    \"title\": \"Time zone identifier was not found on this server\",\n     \"status\":
        404\n   }\n"
      title: '5.3.5.  Example: Request for a Nonexistent Time Zone'
    title: 5.3.  "get" Action
  - contents:
    - "5.4.  \"expand\" Action\n   Name:  expand\n   Request-URI Template:\n      {/service-prefix,data-prefix}/zones{/tzid}/observances{?start,end}\n
      \     The \"tzid\" variable value is REQUIRED.\n   Description:  This action
      expands the specified time zone into a list\n      of onset start date/time
      values (in UTC) and UTC offsets.  The\n      response MUST contain an ETag response
      header field indicating the\n      current value of the strong entity tag of
      the time zone being\n      expanded.\n   Parameters:\n      start=<date-time>:
      \ REQUIRED, and MUST occur only once.  Specifies\n         the inclusive UTC
      date-time value for the start of the period\n         of interest.\n      end=<date-time>:
      \ REQUIRED, and MUST occur only once.  Specifies\n         the exclusive UTC
      date-time value for the end of the period of\n         interest.  Note that
      this is the exclusive end value, i.e., it\n         represents the date just
      after the range of interest.  For if a\n         client wants the expanded date
      just for the year 2014, it would\n         use a start value of \"2014-01-01T00:00:00Z\"
      and an end value of\n         \"2015-01-01T00:00:00Z\".  An error occurs if
      the end value is\n         less than or equal to the start value.\n   Response:
      \ A JSON object containing a \"tzid\" member and an\n      \"observances\" member;
      see Section 6.3.  If the time zone being\n      expanded is not fully defined
      over the requested time range (e.g.,\n      because of truncation), then the
      server MUST include \"start\" and/\n      or \"end\" members in the JSON response
      to indicate the actual start\n      and end points for the observances being
      returned.  The server\n      MUST include an expanded observance representing
      the time zone\n      information in effect at the start of the returned observance\n
      \     period.\n   Possible Error Codes\n      urn:ietf:params:tzdist:error:tzid-not-found\n
      \        No time zone associated with the specified \"tzid\" path segment\n
      \        value was found.\n      urn:ietf:params:tzdist:error:invalid-start\n
      \        The \"start\" URI query parameter has an incorrect value, or\n         appears
      more than once, or is missing, or has a value outside\n         any fixed truncation
      ranges advertised in the \"capabilities\"\n         action response.\n      urn:ietf:params:tzdist:error:invalid-end\n
      \        The \"end\" URI query parameter has an incorrect value, or\n         appears
      more than once, or has a value less than or equal to\n         the \"start\"
      URI query parameter, or has a value outside any\n         fixed truncation ranges
      advertised in the \"capabilities\" action\n         response.\n"
    - contents:
      - "5.4.1.  Example: Expanded JSON Data Format\n   In this example, the client
        requests a time zone in the expanded\n   form.\n   >> Request <<\n   GET /servlet/timezone/zones/America%2FNew_York/observances\n
        \   ?start=2008-01-01T00:00:00Z&end=2009-01-01T00:00:00Z HTTP/1.1\n   Host:
        tz.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n   Date: Mon, 11 Oct
        2009 09:32:12 GMT\n   Content-Type: application/json; charset=\"utf-8\"\n
        \  Content-Length: xxxx\n   ETag: \"123456789-000-111\"\n   {\n     \"tzid\":
        \"America/New_York\",\n     \"observances\": [\n       {\n         \"name\":
        \"Standard\",\n         \"onset\": \"2008-01-01T00:00:00Z\",\n         \"utc-offset-from\":
        -18000,\n         \"utc-offset-to\": -18000\n       },\n       {\n         \"name\":
        \"Daylight\",\n         \"onset\": \"2008-03-09T07:00:00Z\",\n         \"utc-offset-from\":
        -18000,\n         \"utc-offset-to\": -14400\n       },\n       {\n         \"name\":
        \"Standard\",\n         \"onset\": \"2008-11-02T06:00:00Z\",\n         \"utc-offset-from\":
        -14400,\n         \"utc-offset-to\": -18000\n       },\n     ]\n   }\n"
      title: '5.4.1.  Example: Expanded JSON Data Format'
    title: 5.4.  "expand" Action
  - contents:
    - "5.5.  \"find\" Action\n   Name:  find\n   Request-URI Template:\n      {/service-prefix,data-prefix}/zones{?pattern}\n
      \  Description:  This action allows a client to query the time zone data\n      distribution
      service for a matching identifier, alias, or\n      localized name, using a
      simple \"glob\" style patter match against\n      the names known to the server
      (with an asterisk (*) as the\n      wildcard character).  Pattern-match strings
      (which have to be\n      percent-encoded and then decoded when used in the URI
      query\n      parameter) have the following options:\n      * not present:  An
      exact text match is done, e.g., \"xyz\"\n      * first character only:  An ends-with
      text match is done, e.g.,\n         \"*xyz\"\n      * last character only:  A
      starts-with text match is done, e.g.,\n         \"xyz*\"\n      * first and
      last characters only:  A substring text match is done,\n         e.g., \"*xyz*\"\n
      \     Escaping \\ and *:  To match 0x2A (\"*\") and 0x5C (\"\\\") characters\n
      \        in a time zone identifier, those characters have to be\n         \"escaped\"
      in the pattern by prepending a single 0x5C (\"\\\")\n         character.  For
      example, a pattern \"\\*Test\\\\Time\\*Zone\\*\" is\n         used for an exact
      match against the time zone identifier\n         \"*Test\\Time*Zone*\".  An
      unescaped \"*\" character MUST NOT appear\n         in the middle of the string
      and MUST result in an error.  An\n         unescaped \"\\\" character MUST NOT
      appear anywhere in the string\n         and MUST result in an error.\n      In
      addition, when matching:\n      Underscores:  Underscore characters (0x5F) in
      time zone\n         identifiers MUST be mapped to a single space character (0x20)\n
      \        prior to string comparison in both the pattern and time zone\n         identifiers
      being matched.  This allows time zone identifiers\n         such as \"America/New_York\"
      to match a query for \"*New York*\".\n      Case mapping:  ASCII characters
      in the range 0x41 (\"A\") through\n         0x5A (\"Z\") MUST be mapped to their
      lowercase equivalents in\n         both the pattern and time zone identifiers
      being matched.\n   Parameters:\n      pattern=<text>\n         REQUIRED, and
      MUST occur only once.\n   Response:  The response has the same format as the
      \"list\" action,\n      with one result object per successful match; see Section
      6.2.\n   Possible Error Codes\n      urn:ietf:params:tzdist:error:invalid-pattern\n
      \        The \"pattern\" URI query parameter has an incorrect value or\n         appears
      more than once.\n"
    - contents:
      - "5.5.1.  Example: find action\n   In this example, the client asks for data
        about the time zone\n   \"US/Eastern\".\n   >> Request <<\n   GET /servlet/timezone/zones?pattern=US/Eastern
        HTTP/1.1\n   Host: tz.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
        \  Date: Wed, 4 Jun 2008 09:32:12 GMT\n   Content-Type: application/json;
        charset=\"utf-8\"\n   Content-Length: xxxx\n   {\n     \"synctoken\": \"2009-10-11T09:32:11Z\",\n
        \    \"timezones\": [\n       {\n         \"tzid\": \"America/New_York\",\n
        \        \"etag\": \"123456789-000-111\",\n         \"last-modified\": \"2009-09-17T01:39:34Z\",\n
        \        \"publisher\": \"Example.com\",\n         \"version\": \"2015a\",\n
        \        \"aliases\":[\"US/Eastern\"],\n         \"local-names\": [\n           {\n
        \            \"name\": \"America/New_York\",\n             \"lang\": \"en_US\"\n
        \          }\n         ]\n       },\n       {\n         \"tzid\": \"America/Detroit\",\n
        \        \"etag\": \"123456789-999-222\",\n         \"last-modified\": \"2009-09-17T01:39:34Z\",\n
        \        \"publisher\": \"Example.com\",\n         \"version\": \"2015a\",\n
        \        \"aliases\":[\"US/Eastern\"],\n         \"local-names\": [\n           {\n
        \            \"name\": \"America/Detroit\",\n             \"lang\": \"en_US\"\n
        \          }\n         ]\n       },\n       ...\n     ]\n   }\n"
      title: '5.5.1.  Example: find action'
    title: 5.5.  "find" Action
  - contents:
    - "5.6.  \"leapseconds\" Action\n   Name:  leapseconds\n   Request-URI Template:\n
      \     {/service-prefix,data-prefix}/leapseconds\n   Description:  This action
      allows a client to query the time zone data\n      distribution service to retrieve
      the current leap-second\n      information available on the server.\n   Parameters:
      \ None\n   Response:  A JSON object containing an \"expires\" member, a\n      \"publisher\"
      member, a \"version\" member, and a \"leapseconds\"\n      member; see Section
      6.4.  The \"expires\" member in the JSON\n      response indicates the latest
      date covered by leap-second\n      information.  For example (as in Section
      5.6.1), if the \"expires\"\n      value is set to \"2014-06-28\" and the latest
      leap-second change\n      indicated was at \"2012-07-01\", then the data indicates
      that there\n      are no leap seconds added (or removed) between those two dates,\n
      \     and information for leap seconds beyond the \"expires\" date is not\n
      \     yet available.\n      The \"leapseconds\" member contains a list of JSON
      objects each of\n      which contains a \"utc-offset\" and \"onset\" member.
      \ The \"onset\"\n      member specifies the date (with the implied time of 00:00:00
      UTC)\n      at which the corresponding UTC offset from TAI takes effect.  In\n
      \     other words, a leap second is added or removed just prior to time\n      00:00:00
      UTC of the specified onset date.  When a leap second is\n      added, the \"utc-offset\"
      value will be incremented by one; when a\n      leap second is removed, the
      \"utc-offset\" value will be decremented\n      by one.\n   Possible Error Codes
      \ No specific code.\n"
    - contents:
      - "5.6.1.  Example: Get Leap-Second Information\n   In this example, the client
        requests the current leap-second\n   information from the server.\n   >> Request
        <<\n   GET /servlet/timezone/leapseconds HTTP/1.1\n   Host: tz.example.com\n
        \  >> Response <<\n   HTTP/1.1 200 OK\n   Date: Wed, 4 Jun 2008 09:32:12 GMT\n
        \  Content-Type: application/json; charset=\"utf-8\"\n   Content-Length: xxxx\n
        \  {\n     \"expires\": \"2015-12-28\",\n     \"publisher\": \"Example.com\",\n
        \    \"version\": \"2015d\",\n     \"leapseconds\": [\n       {\n         \"utc-offset\":
        10,\n         \"onset\": \"1972-01-01\",\n       },\n       {\n         \"utc-offset\":
        11,\n         \"onset\": \"1972-07-01\",\n       },\n       ...\n       {\n
        \        \"utc-offset\": 35,\n         \"onset\": \"2012-07-01\",\n       },\n
        \      {\n         \"utc-offset\": 36,\n         \"onset\": \"2015-07-01\",\n
        \      }\n     ]\n   }\n"
      title: '5.6.1.  Example: Get Leap-Second Information'
    title: 5.6.  "leapseconds" Action
  title: 5.  Actions
- contents:
  - "6.  JSON Definitions\n   [RFC7159] defines the structure of JSON objects using
    a set of\n   primitive elements.  The structure of JSON objects used by this\n
    \  specification is described by the following set of rules:\n   OBJECT  represents
    a JSON object, defined in Section 4 of [RFC7159].\n      \"OBJECT\" is followed
    by a parenthesized list of \"MEMBER\" rule\n      names.  If a member rule name
    is preceded by a \"?\" (0x3F)\n      character, that member is optional; otherwise,
    all members are\n      required.  If two or more member rule names are present,
    each\n      separated from the other by a \"|\" (0x7C) character, then only one\n
    \     of those members MUST be present in the JSON object.  JSON object\n      members
    are unordered, and thus the order used in the rules is not\n      significant.\n
    \  MEMBER  represents a member of a JSON object, defined in Section 4 of\n      [RFC7159].
    \ \"MEMBER\" is followed by a rule name, the name of the\n      member, a \":\",
    and then the value.  A value can be one of\n      \"OBJECT\", \"ARRAY\", \"NUMBER\",
    \"STRING\", or \"BOOLEAN\" rules.\n   ARRAY  represents a JSON array, defined
    in Section 5 of [RFC7159].\n      \"ARRAY\" is followed by a value (one of \"OBJECT\",
    \"ARRAY\",\n      \"NUMBER\", \"STRING\", or \"BOOLEAN\"), indicating the type
    of items\n      used in the array.\n   NUMBER  represents a JSON number, defined
    in Section 6 of [RFC7159].\n   STRING  represents a JSON string, defined in Section
    7 of [RFC7159].\n   BOOLEAN  represents either of the JSON values \"true\" or
    \"false\",\n      defined in Section 3 of [RFC7159].\n   ;  a line starting with
    a \";\" (0x3B) character is a comment.\n   Note, clients MUST ignore any unexpected
    JSON members in responses\n   from the server.\n"
  - contents:
    - "6.1.  capabilities Action Response\n   Below are the rules for the JSON document
      returned for a\n   \"capabilities\" action request.\n   ; root object\n   OBJECT
      (version, info, actions)\n   ; The version number of the protocol supported
      - MUST be 1\n   MEMBER version \"version\" : NUMBER\n   ; object containing
      service information\n   ; Only one of primary_source or secondary_source MUST
      be present\n   MEMBER info \"info\" : OBJECT (\n     primary_source | secondary_source,\n
      \    formats,\n     ?truncated,\n     ?provider_details,\n     ?contacts\n   )\n
      \  ; The source of the time zone data provided by a \"primary\" server\n   MEMBER
      primary_source \"primary-source\" : STRING\n   ; The time zone data server from
      which data is provided by a\n   ; \"secondary\" server\n   MEMBER secondary_source
      \"secondary-source\" : STRING\n   ; Array of one or more media types for the
      time zone data formats\n   ; that the server can return\n   MEMBER formats \"formats\"
      : ARRAY STRING\n   ; Present if the server is providing truncated time zone
      data.  The\n   ; value is an object providing details of the supported truncation\n
      \  ; modes.\n   MEMBER truncated \"truncated\" : OBJECT: (\n     any,\n     ?ranges,\n
      \    ?untruncated\n   )\n   ; Indicates whether the server can truncate time
      zone data at any\n   ; start or end point.  When set to \"true\", any start
      or end point is\n   ; a valid value for use with the \"start\" and \"end\" URI
      query\n   ; parameters in a \"get\" action request.\n   MEMBER any \"any\" :
      BOOLEAN\n   ; Indicates which ranges of time the server has truncated data for.\n
      \  ; A value from this list may be used with the \"start\" and \"end\" URI\n
      \  ; query parameters in a \"get\" action request.  Not present if \"any\"\n
      \  ; is set to \"true\".\n   MEMBER ranges \"ranges\" : ARRAY OBJECT (range-start,
      range-end)\n   ; UTC date-time value (per [RFC3339]) for inclusive start of
      the\n   ; range, or the single character \"*\" to indicate a value\n   ; corresponding
      to the lower bound supplied by the publisher of the\n   ; time zone data\n   MEMBER
      range-start \"start\" : STRING\n   ; UTC date-time value (per [RFC3339]) for
      exclusive end of the range,\n   ; or the single character \"*\" to indicate
      a value corresponding to\n   ; the upper bound supplied by the publisher of
      the time zone data\n   MEMBER range-end \"end\" : STRING\n   ; Indicates whether
      the server can supply untruncated data.  When\n   ; set to \"true\", indicates
      that, in addition to truncated data being\n   ; available, the server can return
      untruncated data if a \"get\"\n   ; action request is executed without a \"start\"
      or \"end\" URI query\n   ; parameter.\n   MEMBER untruncated \"untruncated\"
      : BOOLEAN\n   ; A URI where human-readable details about the time zone service\n
      \  ; is available\n   MEMBER provider_details \"provider-details\" : STRING\n
      \  ; Array of URIs providing contact details for the server\n   ; administrator\n
      \  MEMBER contacts \"contacts\" : ARRAY STRING\n   ; Array of actions supported
      by the server\n   MEMBER actions \"actions\" : ARRAY OBJECT (\n     action_name,\n
      \    action_params\n   )\n   ; Name of the action\n   MEMBER action_name: \"name\"
      : STRING\n   ; Array of request-URI query parameters supported by the action\n
      \  MEMBER action_params: \"parameters\" ARRAY OBJECT (\n     param_name,\n     ?param_required,\n
      \    ?param_multi,\n     ?param_values\n   )\n   ; Name of the parameter\n   MEMBER
      param_name \"name\" : STRING\n   ; If true, the parameter has to be present
      in the request-URI\n   ; default is false\n   MEMBER param_required \"required\"
      : BOOLEAN\n   ; If true, the parameter can occur more than once in the request-URI\n
      \  ; default is false\n   MEMBER param_multi \"multi\" : BOOLEAN,\n   ; An array
      that defines the allowed set of values for the parameter\n   ; In the absence
      of this member, any string value is acceptable\n   MEMBER param_values \"values\"
      ARRAY STRING\n"
    title: 6.1.  capabilities Action Response
  - contents:
    - "6.2.  list/find Action Response\n   Below are the rules for the JSON document
      returned for a \"list\" or\n   \"find\" action request.\n   ; root object\n
      \  OBJECT (synctoken, timezones)\n   ; Server-generated opaque token used for
      synchronizing changes\n   MEMBER synctoken \"synctoken\" : STRING\n   ; Array
      of time zone objects\n   MEMBER timezones \"timezones\" : ARRAY OBJECT (\n     tzid,\n
      \    etag,\n     last_modified,\n     publisher,\n     version,\n     ?aliases,\n
      \    ?local_names,\n   )\n   ; Time zone identifier\n   MEMBER tzid \"tzid\"
      : STRING\n   ; Current ETag for the corresponding time zone data resource\n
      \  MEMBER etag \"etag\" : STRING\n   ; Date/time when the time zone data was
      last modified\n   ; UTC date-time value as specified in [RFC3339]\n   MEMBER
      last_modified \"last-modified\" : STRING\n   ; Time zone data publisher\n   MEMBER
      publisher \"publisher\" : STRING\n   ; Current version of the time zone data
      as defined by the\n   ; publisher\n   MEMBER version \"version\" : STRING\n
      \  ; An array that lists the set of time zone aliases available\n   ; for the
      corresponding time zone\n   MEMBER aliases \"aliases\" : ARRAY STRING\n   ;
      An array that lists the set of localized names available\n   ; for the corresponding
      time zone\n   MEMBER local_names \"local-names\" : ARRAY OBJECT (\n     lname,
      lang, ?pref\n   )\n   ; Language tag for the language of the associated name\n
      \  MEMBER: lang \"lang\" : STRING\n   ; Localized name\n   MEMBER lname \"name\"
      : STRING\n   ; Indicates whether this is the preferred name for the associated\n
      \  ; language default: false\n   MEMBER pref \"pref\" : BOOLEAN\n"
    title: 6.2.  list/find Action Response
  - contents:
    - "6.3.  expand Action Response\n   Below are the rules for the JSON document
      returned for a \"expand\"\n   action request.\n   ; root object\n   OBJECT (\n
      \    tzid,\n     ?start,\n     ?end,\n     observances\n   )\n   ; Time zone
      identifier\n   MEMBER tzid \"tzid\" : STRING\n   ; The actual inclusive start
      point for the returned observances\n   ; if different from the value of the
      \"start\" URI query parameter\n   MEMBER start \"start\" : STRING\n   ; The
      actual exclusive end point for the returned observances\n   ; if different from
      the value of the \"end\" URI query parameter\n   MEMBER end \"end\" : STRING\n
      \  ; Array of time zone objects\n   MEMBER observances \"observances\" : ARRAY
      OBJECT (\n     oname,\n     ?olocal_names,\n     onset,\n     utc_offset_from,\n
      \    utc_offset_to\n   )\n   ; Observance name\n   MEMBER oname \"name\" : STRING\n
      \  ; Array of localized observance names\n   MEMBER olocal_names \"local-names\"
      : ARRAY STRING\n   ; UTC date-time value (per [RFC3339]) at which the observance
      takes\n   ; effect\n   MEMBER onset \"onset\" : STRING\n   ; The UTC offset
      in seconds before the start of this observance\n   MEMBER utc_offset_from \"utc-offset-from\"
      : NUMBER\n   ; The UTC offset in seconds at and after the start of this observance\n
      \  MEMBER utc_offset_to \"utc-offset-to\" : NUMBER\n"
    title: 6.3.  expand Action Response
  - contents:
    - "6.4.  leapseconds Action Response\n   Below are the rules for the JSON document
      returned for a\n   \"leapseconds\" action request.\n   ; root object\n   OBJECT
      (\n     expires,\n     publisher,\n     version,\n     leapseconds\n   )\n   ;
      Last valid date covered by the data in this response\n   ; full-date value as
      specified in [RFC3339]\n   MEMBER expires \"expires\" : STRING\n   ; Leap-second
      information publisher\n   MEMBER publisher \"publisher\" : STRING\n   ; Current
      version of the leap-second information as defined by the\n   ; publisher\n   MEMBER
      version \"version\" : STRING\n   ; Array of leap-second objects\n   MEMBER leapseconds
      \"leapseconds\" : ARRAY OBJECT (\n     utc_offset,\n     onset\n   )\n   ; The
      UTC offset from TAI in seconds in effect at and after the\n   ; specified date\n
      \  MEMBER utc_offset \"utc-offset\" : NUMBER\n   ; full-date value (per [RFC3339])
      at which the new UTC offset takes\n   ; effect, at T00:00:00Z\n   MEMBER onset
      \"onset\" : STRING\n"
    title: 6.4.  leapseconds Action Response
  title: 6.  JSON Definitions
- contents:
  - '7.  New iCalendar Properties

    '
  - contents:
    - "7.1.  Time Zone Upper Bound\n   Property Name:  TZUNTIL\n   Purpose:  This
      property specifies an upper bound for the validity\n      period of data within
      a \"VTIMEZONE\" component.\n   Value Type:  DATE-TIME\n   Property Parameters:
      \ IANA and non-standard property parameters can\n      be specified on this
      property.\n   Conformance:  This property can be specified zero times or one
      time\n      within \"VTIMEZONE\" calendar components.\n   Description:  The
      value MUST be specified in the UTC time format.\n      Time zone data in a \"VTIMEZONE\"
      component might cover only a fixed\n      period of time.  The start of such
      a period is clearly indicated\n      by the earliest observance defined by the
      \"STANDARD\" and\n      \"DAYLIGHT\" subcomponents.  However, an upper bound
      on the validity\n      period of the time zone data cannot be simply derived
      from the\n      observance with the latest onset time, and [RFC5545] does not\n
      \     define a way to get such an upper bound.  This specification\n      introduces
      the \"TZUNTIL\" property for that purpose.  It specifies\n      an \"exclusive\"
      UTC date-time value that indicates the last time at\n      which the time zone
      data is to be considered valid.\n      This property is also used by time zone
      data distribution servers\n      to indicate the truncation range end point
      of time zone data (as\n      described in Section 3.9).\n   Format Definition:
      \ This property is defined by the following\n      notation in ABNF [RFC5234]:\n
      \     tzuntil      = \"TZUNTIL\" tzuntilparam \":\" date-time CRLF\n      tzuntilparam
      = *(\";\" other-param)\n   Example:  Suppose a time zone based on astronomical
      observations has\n      well-defined onset times through the year 2025, but
      the first\n      onset in 2026 is currently known only approximately.  In that\n
      \     case, the \"TZUNTIL\" property could be specified as follows:\n   TZUNTIL:20260101T000000Z\n"
    title: 7.1.  Time Zone Upper Bound
  - contents:
    - "7.2.  Time Zone Identifier Alias Property\n   Property Name:  TZID-ALIAS-OF\n
      \  Purpose:  This property specifies a time zone identifier for which\n      the
      main time zone identifier is an alias.\n   Value Type:  TEXT\n   Property Parameters:
      \ IANA and non-standard property parameters can\n      be specified on this
      property.\n   Conformance:  This property can be specified zero or more times\n
      \     within \"VTIMEZONE\" calendar components.\n   Description:  When the \"VTIMEZONE\"
      component uses a time zone\n      identifier alias for the \"TZID\" property
      value, the \"TZID-ALIAS-\n      OF\" property is used to indicate the time zone
      identifier of the\n      other time zone (see Section 3.7).\n   Format Definition:
      \ This property is defined by the following\n      notation in ABNF [RFC5234]:\n
      \     tzid-alias-of    = \"TZID-ALIAS-OF\" tzidaliasofparam \":\"\n                              [tzidprefix]
      text CRLF\n      tzidaliasofparam = *(\";\" other-param)\n      ;tzidprefix
      defined in [RFC5545].\n   Example:  The following is an example of this property:\n
      \  TZID-ALIAS-OF:America/New_York\n"
    title: 7.2.  Time Zone Identifier Alias Property
  title: 7.  New iCalendar Properties
- contents:
  - "8.  Security Considerations\n   Time zone data is critical in determining local
    or UTC time for\n   devices and in calendaring and scheduling operations.  As
    such, it is\n   vital that a reliable source of time zone data is used.  Servers\n
    \  providing a time zone data distribution service MUST support HTTP\n   over
    Transport Layer Security (TLS) (as defined by [RFC2818] and\n   [RFC5246], with
    best practices described in [RFC7525]).  Servers MAY\n   support a time zone data
    distribution service over HTTP without TLS.\n   However, secondary servers MUST
    use TLS to fetch data from a primary\n   server.\n   Clients SHOULD use Transport
    Layer Security as defined by [RFC2818],\n   unless they are specifically configured
    otherwise.  Clients that have\n   been configured to use the TLS-based service
    MUST NOT fall back to\n   using the non-TLS service if the TLS-based service is
    not available.\n   In addition, clients MUST NOT follow HTTP redirect requests
    from a\n   TLS service to a non-TLS service.  When using TLS, clients MUST\n   verify
    the identity of the server, using a standard, secure mechanism\n   such as the
    certificate verification process specified in [RFC6125]\n   or DANE [RFC6698].\n
    \  A malicious attacker with access to the DNS server data, or able to\n   get
    spoofed answers cached in a recursive resolver, can potentially\n   cause clients
    to connect to any server chosen by the attacker.  In\n   the absence of a secure
    DNS option, clients SHOULD check that the\n   target FQDN returned in the SRV
    record is the same as the original\n   service domain that was queried, or is
    a sub-domain of the original\n   service domain.  In many cases, the client configuration
    is likely to\n   be handled automatically without any user input; as such, any\n
    \  mismatch between the original service domain and the target FQDN is\n   treated
    as a failure and the client MUST NOT attempt to connect to\n   the target server.
    \ In addition, when Transport Layer Security is\n   being used, the Transport
    Layer Security certificate SHOULD include\n   an SRV-ID field as per [RFC4985]
    matching the expected DNS SRV\n   queries clients will use for service discovery.
    \ If an SRV-ID field\n   is present in a certificate, clients MUST match the SRV-ID
    value with\n   the service type and domain that matches the DNS SRV request made
    by\n   the client to discover the service.\n   Time zone data servers SHOULD protect
    themselves against poorly\n   implemented or malicious clients by throttling high
    request rates or\n   frequent requests for large amounts of data.  Clients can
    avoid being\n   throttled by using the polling capabilities outlined in\n   Section
    4.1.4.  Servers MAY require some form of authentication or\n   authorization of
    clients (including secondary servers), as per\n   [RFC7235], to restrict which
    clients are allowed to access their\n   service or provide better identification
    of problematic clients.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Privacy Considerations\n   The type and pattern of requests that a client
    makes can be used to\n   \"fingerprint\" specific clients or devices and thus
    potentially used\n   to track information about what the users of the clients
    might be\n   doing.  In particular, a client that only downloads time zone data
    on\n   an as-needed basis, will leak the fact that a user's device has moved\n
    \  from one time zone to another or that the user is receiving\n   scheduling
    messages from another user in a different time zone.\n   Clients need to be aware
    of the potential ways in which an untrusted\n   server or a network observer might
    be able to track them and take\n   precautions such as the following:\n   1.  Always
    use TLS to connect to the server.\n   2.  Avoid use of TLS session resumption.\n
    \  3.  Always fetch and synchronize the entire set of time zone data to\n       avoid
    leaking information about which time zones are actually in\n       use by the
    client.\n   4.  Randomize the order in which individual time zones are fetched\n
    \      using the \"get\" action, when retrieving a set of time zones based\n       on
    a \"list\" action response.\n   5.  Avoid use of conditional HTTP requests [RFC7232]
    with the \"get\"\n       action to prevent tracking of clients by servers generating\n
    \      client-specific ETag header field values.\n   6.  Avoid use of cookies
    in HTTP requests [RFC6265].\n   7.  Avoid use of authenticated HTTP requests.\n
    \  8.  When doing periodic polling to check for updates, apply a random\n       (positive
    or negative) offset to the next poll time to avoid\n       servers being able
    to identify the client by the specific\n       periodicity of its polling behavior.\n
    \  9.  A server trying to \"fingerprint\" clients might insert a \"fake\"\n       time
    zone into the time zone data, using a unique identifier for\n       each client
    making a request.  The server can then watch for\n       client requests that
    refer to that \"fake\" time zone and thus\n       track the activity of each client.
    \ It is hard for clients to\n       identify a \"fake\" time zone given that new
    time zones are added\n       occasionally.  One option to mitigate this would
    be for the\n       client to make use of two time zone data distribution servers\n
    \      from two independent providers that provide time zone data from\n       the
    same publisher.  The client can then compare the list of time\n       zones from
    each server (assuming they both have the same version\n       of time zone data
    from the common publisher) and detect ones that\n       appear to be added on
    one server and not the other.\n       Alternatively, the client can check the
    publisher data directly\n       to verify that time zones match the set the publisher
    has.\n   Note that some of the above recommendations will result in less\n   efficient
    use of the protocol due to fetching data that might not be\n   relevant to the
    client.\n   An organization can set up a secondary server within their own domain\n
    \  and configure their clients to use that server to protect the\n   organization's
    users from the possibility of being tracked by an\n   untrusted time zone data
    distribution server.  Clients can then use\n   more-efficient protocol interactions,
    free from the concerns above,\n   on the basis that their organization's server
    is trusted.  When doing\n   this, the secondary server would follow the recommendations
    for\n   clients (listed in the previous paragraph) so that the untrusted\n   server
    is not able to gain information about the organization as a\n   whole.  Note,
    however, that client requests to the secondary server\n   are subject to tracking
    by a network observer, so clients ought to\n   apply some of the randomization
    techniques from the list above.\n   Servers that want to avoid accidentally storing
    information that\n   could be used to identify clients can take the following
    precautions:\n   1.  Avoid logging client request activity, or anonymize information\n
    \      in any logs (e.g., client IP address, client user-agent details,\n       authentication
    credentials, etc.).\n   2.  Add an unused HTTP response header to each response
    with a random\n       amount of data in it (e.g., to pad the overall request size
    to\n       the nearest power-of-2 or 128-byte boundary) to avoid exposing\n       which
    time zones are being fetched when TLS is being used, via\n       network traffic
    analysis.\n"
  title: 9.  Privacy Considerations
- contents:
  - "10.  IANA Considerations\n   This specification defines a new registry of \"actions\"
    for the time\n   zone data distribution service protocol, defines a \"well-known\"
    URI\n   using the registration procedure and template from Section 5.1 of\n   [RFC5785],
    creates two new SRV service label aliases, and defines one\n   new iCalendar property
    parameter as per the registration procedure in\n   [RFC5545].  It also adds a
    new \"TZDIST Identifiers Registry\" to the\n   IETF parameters URN sub-namespace
    as per [RFC3553] for use with\n   protocol related error codes.\n"
  - contents:
    - "10.1.  Service Actions Registration\n   IANA has created a new top-level category
      called \"Time Zone Data\n   Distribution Service (TZDIST) Parameters\" and has
      put all the\n   registries created herein into that category.\n   IANA has created
      a new registry called \"TZDIST Service Actions\", as\n   defined below.\n"
    - contents:
      - "10.1.1.  Service Actions Registration Procedure\n   This registry uses the
        \"Specification Required\" policy defined in\n   [RFC5226], which makes use
        of a designated expert to review potential\n   registrations.\n   The IETF
        has created a mailing list, tzdist-service@ietf.org, which\n   is used for
        public discussion of time zone data distribution service\n   actions proposals
        prior to registration.  The IESG has appointed a\n   designated expert who
        will monitor the tzdist-service@ietf.org\n   mailing list and review registrations.\n
        \  A Standards Track RFC is REQUIRED for changes to actions previously\n   documented
        in a Standards Track RFC; otherwise, any public\n   specification that satisfies
        the requirements of [RFC5226] is\n   acceptable.\n   The registration procedure
        begins when a completed registration\n   template, as defined below, is sent
        to tzdist-service@ietf.org and\n   iana@iana.org.  The designated expert is
        expected to tell IANA and\n   the submitter of the registration whether the
        registration is\n   approved, approved with minor changes, or rejected with
        cause, within\n   two weeks.  When a registration is rejected with cause,
        it can be\n   resubmitted if the concerns listed in the cause are addressed.\n
        \  Decisions made by the designated expert can be appealed as per\n   Section
        7 of [RFC5226].\n   The designated expert MUST take the following requirements
        into\n   account when reviewing the registration:\n   1.  A valid registration
        template MUST be provided by the submitter,\n       with a clear description
        of what the action does.\n   2.  A proposed new action name MUST NOT conflict
        with any existing\n       registered action name.  A conflict includes a name
        that\n       duplicates an existing one or that appears to be very similar
        to\n       an existing one and could be a potential source of confusion.\n
        \  3.  A proposed new action MUST NOT exactly duplicate the\n       functionality
        of any existing actions.  In cases where the new\n       action functionality
        is very close to an existing action, the\n       designated expert SHOULD
        clarify whether the submitter is aware\n       of the existing action, and
        has an adequate reason for creating a\n       new action with slight differences
        from an existing one.\n   4.  If a proposed action is an extension to an existing
        action, the\n       changes MUST NOT conflict with the intent of the existing
        action,\n       or in a way that could cause interoperability problems for\n
        \      existing deployments of the protocol.\n   The IANA registry contains
        the name of the action (\"Action Name\") and\n   a reference to the section
        of the specification where the action\n   registration template is defined
        (\"Reference\").\n"
      title: 10.1.1.  Service Actions Registration Procedure
    - contents:
      - "10.1.2.  Registration Template for Actions\n   An action is defined by completing
        the following template.\n   Name:  The name of the action.\n   Request-URI
        Template:  The URI template used in HTTP requests for the\n      action.\n
        \  Description:  A general description of the action, its purpose, etc.\n
        \  Parameters:  A list of allowed request URI query parameters,\n      indicating
        whether they are \"REQUIRED\" or \"OPTIONAL\" and whether\n      they can
        occur only once or multiple times, together with the\n      expected format
        of the parameter values.\n   Response:  The nature of the response to the
        HTTP request, e.g., what\n      format the response data is in.\n   Possible
        Error Codes:  Possible error codes reported in a JSON\n      \"problem details\"
        object if an HTTP request fails.\n"
      title: 10.1.2.  Registration Template for Actions
    - contents:
      - "10.1.3.  Actions Registry\n   The following table provides the initial content
        of the actions\n   registry.\n                +---------------+------------------------+\n
        \               | Action Name   | Reference              |\n                +---------------+------------------------+\n
        \               | capabilities  | RFC 7808, Section 5.1  |\n                |
        list          | RFC 7808, Section 5.2  |\n                | get           |
        RFC 7808, Section 5.3  |\n                | expand        | RFC 7808, Section
        5.4  |\n                | find          | RFC 7808, Section 5.5  |\n                |
        leapseconds   | RFC 7808, Section 5.6  |\n                +---------------+------------------------+\n"
      title: 10.1.3.  Actions Registry
    title: 10.1.  Service Actions Registration
  - contents:
    - "10.2.  timezone Well-Known URI Registration\n   IANA has added the following
      to the \"Well-Known URIs\" [RFC5785]\n   registry:\n   URI suffix:  timezone\n
      \  Change controller:  IESG.\n   Specification document(s):  RFC 7808\n   Related
      information:  None.\n"
    title: 10.2.  timezone Well-Known URI Registration
  - contents:
    - "10.3.  Service Name Registrations\n   IANA has added two new service names
      to the \"Service Name and\n   Transport Protocol Port Number Registry\" [RFC6335],
      as defined below.\n"
    - contents:
      - "10.3.1.  timezone Service Name Registration\n   Service Name:  timezone\n
        \  Transport Protocol(s):  TCP\n   Assignee:  IESG <iesg@ietf.org>\n   Contact:
        \ IETF Chair <chair@ietf.org>\n   Description:  Time Zone Data Distribution
        Service - non-TLS\n   Reference:  RFC 7808\n   Assignment Note:  This is an
        extension of the http service.  Defined\n      TXT keys: path=<context path>
        (as per Section 6 of [RFC6763]).\n"
      title: 10.3.1.  timezone Service Name Registration
    - contents:
      - "10.3.2.  timezones Service Name Registration\n   Service Name:  timezones\n
        \  Transport Protocol(s):  TCP\n   Assignee:  IESG <iesg@ietf.org>\n   Contact:
        \ IETF Chair <chair@ietf.org>\n   Description:  Time Zone Data Distribution
        Service - over TLS\n   Reference:  RFC 7808\n   Assignment Note:  This is
        an extension of the https service.  Defined\n      TXT keys: path=<context
        path> (as per Section 6 of [RFC6763]).\n"
      title: 10.3.2.  timezones Service Name Registration
    title: 10.3.  Service Name Registrations
  - contents:
    - "10.4.  TZDIST Identifiers Registry\n   IANA has registered a new URN sub-namespace
      within the IETF URN Sub-\n   namespace for Registered Protocol Parameter Identifiers
      defined in\n   [RFC3553].\n   Registrations in this registry follow the \"IETF
      Review\" [RFC5226]\n   policy.\n   Registry name:  TZDIST Identifiers\n   URN
      prefix:  urn:ietf:params:tzdist\n   Specification:  RFC 7808\n   Repository:
      \ http://www.iana.org/assignments/tzdist-identifiers\n   Index value:  Values
      in this registry are URNs or URN prefixes that\n      start with the prefix
      \"urn:ietf:params:tzdist:\".  Each is\n      registered independently.  The
      prefix\n      \"urn:ietf:params:tzdist:error:\" is used to represent specific\n
      \     error codes within the protocol as defined in the list of actions\n      in
      Section 5 and used in problem reports (Section 4.1.7).\n   Each registration
      in the \"TZDIST Identifiers\" registry requires the\n   following information:\n
      \  URN:  The complete URN that is used or the prefix for that URN.\n   Description:
      \ A summary description for the URN or URN prefix.\n   Specification:  A reference
      to a specification describing the URN or\n      URN prefix.\n   Contact:  Email
      for the person or groups making the registration.\n   Index Value:  As described
      in [RFC3553], URN prefixes that are\n      registered include a description
      of how the URN is constructed.\n      This is not applicable for specific URNs.\n
      \  The \"TZDIST Identifiers\" registry has the initial registrations\n   included
      in the following sections.\n"
    - contents:
      - "10.4.1.  Registration of invalid-action Error URN\n   The following URN has
        been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:  urn:ietf:params:tzdist:error:invalid-action\n
        \  Description:  Generic error code for any invalid action.\n   Specification:
        \ RFC 7808, Section 5\n   Repository:  http://www.iana.org/assignments/tzdist-identifiers\n
        \  Contact:  IESG <iesg@ietf.org>\n   Index value:  N/A.\n"
      title: 10.4.1.  Registration of invalid-action Error URN
    - contents:
      - "10.4.2.  Registration of invalid-changedsince Error URN\n   The following
        URN has been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:
        \ urn:ietf:params:tzdist:error:invalid-changedsince\n   Description:  Error
        code for incorrect use of the \"changedsince\" URI\n      query parameter.\n
        \  Specification:  RFC 7808, Section 5.2\n   Repository:  http://www.iana.org/assignments/tzdist-identifiers\n
        \  Contact:  IESG <iesg@ietf.org>\n   Index value:  N/A.\n"
      title: 10.4.2.  Registration of invalid-changedsince Error URN
    - contents:
      - "10.4.3.  Registration of tzid-not-found Error URN\n   The following URN has
        been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:  urn:ietf:params:tzdist:error:tzid-not-found\n
        \  Description:  Error code for missing time zone identifier.\n   Specification:
        \ RFC 7808, Sections 5.3 and 5.4\n   Repository:  http://www.iana.org/assignments/tzdist-identifiers\n
        \  Contact:  IESG <iesg@ietf.org>\n   Index value:  N/A.\n"
      title: 10.4.3.  Registration of tzid-not-found Error URN
    - contents:
      - "10.4.4.  Registration of invalid-format Error URN\n   The following URN has
        been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:  urn:ietf:params:tzdist:error:invalid-format\n
        \  Description:  Error code for unsupported HTTP Accept request header\n      field
        value.\n   Specification:  RFC 7808, Section 5.3\n   Repository:  http://www.iana.org/assignments/tzdist-identifiers\n
        \  Contact:  IESG <iesg@ietf.org>\n   Index value:  N/A.\n"
      title: 10.4.4.  Registration of invalid-format Error URN
    - contents:
      - "10.4.5.  Registration of invalid-start Error URN\n   The following URN has
        been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:  urn:ietf:params:tzdist:error:invalid-start\n
        \  Description:  Error code for incorrect use of the \"start\" URI query\n
        \     parameter.\n   Specification:  RFC 7808, Sections 5.3 and 5.4\n   Repository:
        \ http://www.iana.org/assignments/tzdist-identifiers\n   Contact:  IESG <iesg@ietf.org>\n
        \  Index value:  N/A.\n"
      title: 10.4.5.  Registration of invalid-start Error URN
    - contents:
      - "10.4.6.  Registration of invalid-end Error URN\n   The following URN has
        been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:  urn:ietf:params:tzdist:error:invalid-end\n
        \  Description:  Error code for incorrect use of the \"end\" URI query\n      parameter.\n
        \  Specification:  RFC 7808, Sections 5.3 and 5.4\n   Repository:  http://www.iana.org/assignments/tzdist-identifiers\n
        \  Contact:  IESG <iesg@ietf.org>\n   Index value:  N/A.\n"
      title: 10.4.6.  Registration of invalid-end Error URN
    - contents:
      - "10.4.7.  Registration of invalid-pattern Error URN\n   The following URN
        has been registered in the \"tzdist Identifiers\"\n   registry.\n   URN:  urn:ietf:params:tzdist:error:invalid-pattern\n
        \  Description:  Error code for incorrect use of the \"pattern\" URI query\n
        \     parameter.\n   Specification:  RFC 7808, Section 5.5\n   Repository:
        \ http://www.iana.org/assignments/tzdist-identifiers\n   Contact:  IESG <iesg@ietf.org>\n
        \  Index value:  N/A.\n"
      title: 10.4.7.  Registration of invalid-pattern Error URN
    title: 10.4.  TZDIST Identifiers Registry
  - contents:
    - "10.5.  iCalendar Property Registrations\n   This document defines the following
      new iCalendar properties, which\n   have been added to the \"Properties\" registry
      under \"iCalendar Element\n   Registries\" [RFC5545]:\n          +----------------+----------+------------------------+\n
      \         | Property       | Status   | Reference              |\n          +----------------+----------+------------------------+\n
      \         | TZUNTIL        | Current  | RFC 7808, Section 7.1  |\n          |
      TZID-ALIAS-OF  | Current  | RFC 7808, Section 7.2  |\n          +----------------+----------+------------------------+\n"
    title: 10.5.  iCalendar Property Registrations
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose
      Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC
      2046,\n              DOI 10.17487/RFC2046, November 1996,\n              <http://www.rfc-editor.org/info/rfc2046>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2782]  Gulbrandsen,
      A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying the location
      of services (DNS SRV)\", RFC 2782,\n              DOI 10.17487/RFC2782, February
      2000,\n              <http://www.rfc-editor.org/info/rfc2782>.\n   [RFC2818]
      \ Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,
      May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n   [RFC3339]
      \ Klyne, G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC3553]  Mealling, M., Masinter, L., Hardie, T., and G. Klyne, \"An\n              IETF
      URN Sub-namespace for Registered Protocol\n              Parameters\", BCP 73,
      RFC 3553, DOI 10.17487/RFC3553, June\n              2003, <http://www.rfc-editor.org/info/rfc3553>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
      STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC4985]  Santesson, S., \"Internet X.509 Public Key Infrastructure\n              Subject
      Alternative Name for Expression of Service Name\",\n              RFC 4985,
      DOI 10.17487/RFC4985, August 2007,\n              <http://www.rfc-editor.org/info/rfc4985>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5234]
      \ Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]  Dierks,
      T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol
      Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5545]  Desruisseaux,
      B., Ed., \"Internet Calendaring and\n              Scheduling Core Object Specification
      (iCalendar)\",\n              RFC 5545, DOI 10.17487/RFC5545, September 2009,\n
      \             <http://www.rfc-editor.org/info/rfc5545>.\n   [RFC5785]  Nottingham,
      M. and E. Hammer-Lahav, \"Defining Well-Known\n              Uniform Resource
      Identifiers (URIs)\", RFC 5785,\n              DOI 10.17487/RFC5785, April 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5785>.\n   [RFC6125]  Saint-Andre,
      P. and J. Hodges, \"Representation and\n              Verification of Domain-Based
      Application Service Identity\n              within Internet Public Key Infrastructure
      Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n
      \             Security (TLS)\", RFC 6125, DOI 10.17487/RFC6125, March\n              2011,
      <http://www.rfc-editor.org/info/rfc6125>.\n   [RFC6265]  Barth, A., \"HTTP State
      Management Mechanism\", RFC 6265,\n              DOI 10.17487/RFC6265, April
      2011,\n              <http://www.rfc-editor.org/info/rfc6265>.\n   [RFC6321]
      \ Daboo, C., Douglass, M., and S. Lees, \"xCal: The XML\n              Format
      for iCalendar\", RFC 6321, DOI 10.17487/RFC6321,\n              August 2011,
      <http://www.rfc-editor.org/info/rfc6321>.\n   [RFC6335]  Cotton, M., Eggert,
      L., Touch, J., Westerlund, M., and S.\n              Cheshire, \"Internet Assigned
      Numbers Authority (IANA)\n              Procedures for the Management of the
      Service Name and\n              Transport Protocol Port Number Registry\", BCP
      165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n              <http://www.rfc-editor.org/info/rfc6335>.\n
      \  [RFC6557]  Lear, E. and P. Eggert, \"Procedures for Maintaining the\n              Time
      Zone Database\", BCP 175, RFC 6557,\n              DOI 10.17487/RFC6557, February
      2012,\n              <http://www.rfc-editor.org/info/rfc6557>.\n   [RFC6570]
      \ Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,\n              and
      D. Orchard, \"URI Template\", RFC 6570,\n              DOI 10.17487/RFC6570,
      March 2012,\n              <http://www.rfc-editor.org/info/rfc6570>.\n   [RFC6698]
      \ Hoffman, P. and J. Schlyter, \"The DNS-Based Authentication\n              of
      Named Entities (DANE) Transport Layer Security (TLS)\n              Protocol:
      TLSA\", RFC 6698, DOI 10.17487/RFC6698, August\n              2012, <http://www.rfc-editor.org/info/rfc6698>.\n
      \  [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n              Discovery\",
      RFC 6763, DOI 10.17487/RFC6763, February 2013,\n              <http://www.rfc-editor.org/info/rfc6763>.\n
      \  [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n
      \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n
      \             2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7232]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Conditional Requests\", RFC 7232,\n              DOI 10.17487/RFC7232,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n   [RFC7234]
      \ Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI
      10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n
      \  [RFC7265]  Kewisch, P., Daboo, C., and M. Douglass, \"jCal: The JSON\n              Format
      for iCalendar\", RFC 7265, DOI 10.17487/RFC7265, May\n              2014, <http://www.rfc-editor.org/info/rfc7265>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7807]
      \ Nottingham, M. and E. Wilde, \"Problem Details for HTTP\n              APIs\",
      RFC 7807, DOI 10.17487/RFC7807, March 2016,\n              <http://www.rfc-editor.org/info/rfc7807>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration
      Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131, March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank the members of the Calendaring
    and\n   Scheduling Consortium's Time Zone Technical Committee, and the\n   participants
    and chairs of the IETF tzdist working group.  In\n   particular, the following
    individuals have made important\n   contributions to this work: Steve Allen, Lester
    Caine, Stephen\n   Colebourne, Tobias Conradi, Steve Crocker, Paul Eggert, Daniel
    Kahn\n   Gillmor, John Haug, Ciny Joy, Bryan Keller, Barry Leiba, Andrew\n   McMillan,
    Ken Murchison, Tim Parenti, Arnaud Quillaud, Jose Edvaldo\n   Saraiva, and Dave
    Thewlis.\n   This specification originated from work at the Calendaring and\n
    \  Scheduling Consortium, which has supported the development and\n   testing
    of implementations of the specification.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michael Douglass\n   Spherical Cow Group\n   226 3rd Street\n
    \  Troy, NY  12180\n   United States\n   Email: mdouglass@sphericalcowgroup.com\n
    \  URI:   http://sphericalcowgroup.com\n   Cyrus Daboo\n   Apple Inc.\n   1 Infinite
    Loop\n   Cupertino, CA  95014\n   United States\n   Email: cyrus@daboo.name\n
    \  URI:   http://www.apple.com/\n"
  title: Authors' Addresses
