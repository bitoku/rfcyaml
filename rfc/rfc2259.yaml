- title: __initial_text__
  contents:
  - '                Simple Nomenclator Query Protocol (SNQP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Simple Nomenclator Query Protocol (SNQP) allows a client to\n\
    \   communicate with a descriptive name service or other relational-style\n  \
    \ query service.  The protocol is useful to services that search many\n   data\
    \ repositories for query responses.  Clients can pose queries on\n   relations,\
    \ list descriptions of relations, and obtain advice on\n   reducing the search\
    \ time and cost of their queries.  Clients are\n   informed of the age of information\
    \ in caches, and may request more\n   recent information.  SNQP provides support\
    \ for graphical user\n   interfaces.  It also supports different types of comparison\n\
    \   operators, so services can use SNQP with a variety of back-end\n   servers,\
    \ e.g. relational database servers, CCSO servers, and servers\n   providing relational\
    \ views of X.500.\n   SNQP is an ASCII protocol in the request-reply style of\
    \ SMTP.  It was\n   specifically designed for use with the Nomenclator name and\n\
    \   information service, and has been useful elsewhere.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Simple Nomenclator Query Protocol (SNQP) is a protocol\
    \ for\n   querying servers that search collections of data repositories.  Users\n\
    \   retrieve information from an SNQP server by describing attributes of\n   the\
    \ information.  SNQP servers contact one or many data repositories\n   to retrieve\
    \ the response to a user query.  If the data repositories\n   differ in protocol\
    \ or data format, it is responsibility of the SNQP\n   server to translate protocols\
    \ and data formats to provide one,\n   integrated answer to the user's query.\n\
    \   SNQP servers share the protocol needs of centralized data\n   repositories\
    \ that answer queries with locally stored data.  SNQP\n   servers also require\
    \ specialized protocol features due to their\n   distributed search characteristics.\n\
    \   In highly distributed environments, it is unreasonable to expect all\n   data\
    \ repositories that need to be searched to be available when\n   queries are posed.\
    \  SNQP servers require facilities for returning\n   partial results in the presence\
    \ of communications errors with data\n   repositories.   The partial results must\
    \ indicate how to resubmit the\n   query only to those data repositories that\
    \ are unavailable.\n   In addition, users may pose queries without realizing the\
    \ cost of the\n   search for query responses.  SNQP provides facilities for informing\n\
    \   users of query costs and advising them on limiting that cost.  Costs\n   and\
    \ advice are returned before queries are executed.\n   Finally, SNQP servers may\
    \ cache data and meta-data to speed query\n   responses.  Servers can inform users\
    \ of the t-bound for their query\n   response.   A t-bound is the time after which\
    \ changes may have\n   occurred to the data that are not reflected in the query\
    \ response\n   [6,2].  A t-bound is the time of the oldest cache entry used to\n\
    \   calculate the response.  Users can request that query responses are\n   more\
    \ current then a particular t-bound.  Making such a request\n   flushes older\
    \ items from the cache.\n   SNQP provides support for graphical user interfaces.\
    \  It also\n   supports different types of comparison operators, so SNQP servers\
    \ can\n   query a variety of back-end data repositories, e.g. relational\n   databases,\
    \ CCSO servers [3], and servers providing relational views\n   of X.500 [10].\n\
    \   SNQP is a connection-oriented protocol.  A client initiates a query\n   session\
    \ with an SNQP server by making a TCP connection to a well-\n   known port.  The\
    \ client then executes a series of SNQP commands.\n   These commands are listed\
    \ briefly in Table 1.  Section 2 provides\n   some typical scenarios for using\
    \ these commands, and Section 3\n   describes the commands fully.  The server\
    \ replies to each command\n   using the theory of reply codes described for the\
    \ Simple Mail\n   Transfer Protocol (SMTP) [9]. The theory of reply codes and\
    \ the\n   defined reply codes are described in Section 4.\n   ---------------------------------------------------------------------\n\
    \      Command       Description\n   ---------------------------------------------------------------------\n\
    \      advice        Provide advice on query costs without executing\n       \
    \             query.\n      attributes    List the attributes for a relation.\n\
    \      compare       Set type of comparison operation.\n      help          Explain\
    \ the SNQP commands.\n      imagui        Format replies for a graphical user\
    \ interface.\n      next          Stop processing current query, continue with\
    \ next\n                    query in block.\n      noadvice      Provide responses\
    \ to queries.  Do not advise\n                    on costs.\n      noimagui  \
    \    Format replies for people.\n      query         Submit a block of one or\
    \ more SQL query statements.\n      relations     List the relations available\
    \ through the SNQP\n                    server.\n      stop          End processing\
    \ of current query, and cancel any\n                    queries remaining in block.\n\
    \      quit          Terminate the query session.\n                         Table\
    \ 1: SNQP Commands\n   ---------------------------------------------------------------------\n\
    \   SNQP queries are posed in SQL, a standard relational database query\n   language\
    \ [4,12].  Information that is obtained through SNQP servers\n   is organized\
    \ by type into database relations.  SQL queries may often\n   have more functionality\
    \ then a server supports or an application\n   demands.  Moreover, advice on query\
    \ costs, some types of comparison\n   operations or t-bounds may not be supported\
    \ by a particular server.\n   SNQP defines a minimal subset of functionality for\
    \ a working SNQP\n   protocol.  Functionality beyond this subset is optional.\
    \  Servers\n   that do not support optional functionality must return replies\
    \ that\n   indicate this to the user.  The required and optional features of\n\
    \   SNQP are summarized in Section 5.\n   SNQP was specifically designed for use\
    \ with the Nomenclator name and\n   information service [8,7,5].  Nomenclator\
    \ produces query responses by\n   integrating information from data repositories\
    \ with different\n   protocols and data formats.  It constrains the searches for\
    \ query\n   responses through a variety of distributed indexing techniques.  SNQP\n\
    \   has also been found useful elsewhere, even as a query language for a\n   single\
    \ data repository.\n   SNQP is defined for US-ASCII only, and use with other character\
    \ sets\n   will require further work.\n   Section 6 concludes this document with\
    \ a description of security\n   considerations.\n"
- title: 2. Scenarios
  contents:
  - "2. Scenarios\n   This section illustrates the basic SNQP commands by presenting\n\
    \   several client scenarios.  The scenarios include a new user, a user\n   who\
    \ prefers CCSO style comparisons and more current responses, a\n   graphical user\
    \ interface program, a user with a change of mind, and a\n   user worried about\
    \ costs.  Although SNQP will work for a human client\n   on a bare connection\
    \ (like one provided by telnet), it also works for\n   client programs.  Several\
    \ of these programs have been written and\n   provide enhanced interfaces.\n"
- title: 2.1 New User
  contents:
  - "2.1 New User\n   A new SNQP user will first make a tcp connection to an SNQP\
    \ server.\n   For purposes of illustration, we will assume that the user makes\
    \ the\n   connection with the Unix telnet command, and that the server is\n  \
    \ located at nomen.research.bell-labs.com on port 4224. The user enters\n   a\
    \ relation command to discover what relations are available, and an\n   attributes\
    \ command to discover the attributes for a particular\n   relation.  The user\
    \ eventually asks for people with a given name of\n   \"J*\" and a surname of\
    \ \"Ordille\" who work for \"Lucent Tech*\". The\n   response is current through\
    \ June 11, 1996 at 11 p.m. EDT.  Figure 1a\n   and Figure 1b provide this scenario.\n\
    \   ---------------------------------------------------------------------\n  \
    \    > telnet nomen.research.bell-labs.com 4224\n      Trying 135.104.70.9...\n\
    \      Connected to nomen.research.bell-labs.com.\n      Escape character is '^]'.\n\
    \      220 nomen.research.bell-labs.com Nomenclator Query Service ready\n    \
    \  relations\n      211-There is 1 relation defined:\n      211 People\n     \
    \ attributes People\n      212-There are 20 attributes in relation \"People\"\
    :\n      212-Given_Name\n      212-Middle_Name\n      212-Surname\n      212-Name_Suffix\n\
    \      212-Title\n      212-Organization\n      212-Division\n      212-Department\n\
    \      212-Building\n      212-Street\n      212-City\n      212-State_or_Province\n\
    \      212-Postal_Code\n      212-Country\n      212-Phone\n      212-Fax\n  \
    \    212-Email\n      212-MHSmail\n      212-Last_Modified\n      212 Source\n\
    \                       Figure 1a: New User Queries Server\n   ---------------------------------------------------------------------\n\
    \   ---------------------------------------------------------------------\n  \
    \    query\n      350 Send the query text, end with .\n      select * from People\
    \ where\n             given_name = \"J*\" and surname = \"Ordille\" and\n    \
    \         organization = \"Lucent Tech*\";\n      .\n      351 Partial response\
    \ follows, ended with .\n      Given_Name: Joann\n      Middle_Name: J.\n    \
    \  Surname: Ordille\n      Title: MTS\n      Organization: Lucent Technologies\n\
    \      Division: Bell Laboratories\n      Department: Computing Sciences Research\
    \ Center\n      Building: 2C-301\n      Street: 700 Mountain Avenue\n      City:\
    \ Murray Hill\n      State_or_Province: New Jersey\n      Postal_Code: 07974\n\
    \      Country: United States\n      Phone: +1 908 582 7114\n      Email: joann@bell-labs.com\n\
    \      Source: nomen://bell-labs.com:17036/email=joann@bell-labs.com\n      .\n\
    \      250 All queries processed.  Current through 11-Jun-1996 23:00 EDT.\n  \
    \    quit\n      221 nomen.research.bell-labs.com closing transmission channel\n\
    \      Connection closed by foreign host.\n                      Figure 1b: New\
    \ User Queries Server\n                                 (continued)\n   ---------------------------------------------------------------------\n"
- title: 2.2 User with CCSO and Currentness Preferences
  contents:
  - "2.2 User with CCSO and Currentness Preferences\n   A user who is accustomed to\
    \ CCSO name servers prefers CCSO word-based\n   matching within attribute strings.\
    \  Each word in the query string for\n   an attribute must appear in some order\
    \ in the response string.  The\n   wildcard \"*\" matches any substring within\
    \ a word.  The default\n   matching, illustrated in Figure 1b, is exact matching\
    \ of a query\n   string.  The query string may include \"*\" wildcards which match\
    \ any\n   substring within the response string.  Both types of matching are\n\
    \   case insensitive.\n   In Figure 2, the CCSO-style user connects to the SNQP\
    \ server, enables\n   csso matching, and requests some information about Ordille\
    \ who works\n   in research at a lab division of some company.  The request asks\
    \ for\n   information that is more current than June 11, 1996 at 11 p.m. if it\n\
    \   is available.\n   ---------------------------------------------------------------------\n\
    \      compare ccso\n      213 Performing ccso equality comparisons\n      query\
    \ 11-Jun-1996 23:00\n      350 Send the query text, end with .\n      select given_name,\
    \ surname, organization, division, department,\n             email from People\n\
    \             where surname = \"Ordille\" and department = \"research\"\n    \
    \         and division = \"lab*\";\n      .\n      351 Partial response follows,\
    \ ended with .\n      Given_Name: Joann\n      Surname: Ordille\n      Organization:\
    \ Lucent Technologies\n      Division: Bell Laboratories\n      Department: Computing\
    \ Sciences Research Center\n      Email: joann@bell-labs.com\n      .\n      250\
    \ All queries processed.  Current through 12-Jun-1996 22:35 EDT.\n           \
    \  Figure 2: User with CCSO Preferences Queries Server\n   ---------------------------------------------------------------------\n"
- title: 2.3 Graphical User Interface Program
  contents:
  - "2.3 Graphical User Interface Program\n   A user designs a Windows program as\
    \ a front end to the SNQP server.\n   In Figure 3, the program requests replies\
    \ formatted for a graphical\n   user interface program.  The program submits two\
    \ SQL queries, and\n   receives detailed responses that indicate the type and\
    \ position of\n   errors.  The error messages are discussed in more detail in\
    \ Section\n   3.\n   ---------------------------------------------------------------------\n\
    \      imagui\n      214 GUI responses enabled\n      query\n      350 Send the\
    \ query text, end with .\n      select * from Peple where name = \"Elliott\";\n\
    \      .\n      735 00000001a000015 e Unknown relation, \"Peple\"\n      735 00000001a000027\
    \ e Attribute \"name\" not found in any relation used.\n      250 All queries\
    \ processed.  Current through 12-Jun-1996 22:35 EDT.\n      query\n      350 Send\
    \ the query text, end with .\n      select * from People wher surname = \"Elliott\"\
    ;\n      .\n      730 00000001a000022 e syntax error\n      730 00000001a000027\
    \ e syntax error\n      730 00000001a000037 e syntax error\n      730 00000001a000039\
    \ e syntax error\n      250 All queries processed\n       Figure 3: Graphical\
    \ User Interface Program Queries Server\n   ---------------------------------------------------------------------\n"
- title: 2.4 User Changes Mind
  contents:
  - "2.4 User Changes Mind\n   An exuberant user decides to search everywhere for\
    \ family members,\n   then look up a friend who works at Epic Systems, and finally\
    \ search\n   everywhere for an old school friend.  Once the query set starts,\
    \ the\n   user realizes the folly of searching everywhere, stops the first\n \
    \  query, executes the second query and then stops executing the query\n   block.\
    \  This scenario is illustrated in Figure 4.  The t-bound is\n   represented by\
    \ <time> in this scenario due to space restrictions.\n   ---------------------------------------------------------------------\n\
    \      query\n      350 Send the query text, end with .\n      select * from people\
    \ where surname = \"Smith\";\n      select given_name, surname, email from people\n\
    \             where surname = \"Elliott\"\n             and organization = \"\
    Epic Systems*\";\n      select * from people where surname = \"Brown\";\n    \
    \  .\n      next\n      352 Starting next query.  Any pending responses discarded.\n\
    \      351 Partial response follows, ended with .\n      Given_Name: Jim\n   \
    \   Surname: Elliott\n      Email: jim@apocalypse.com\n      .\n      352 Beginning\
    \ next query.  Previous current through <time>.\n      stop\n      251 All pending\
    \ queries and responses discarded\n          Figure 4: User Changes Mind About\
    \ Submitted Queries\n   ---------------------------------------------------------------------\n"
- title: 2.5 User Worries About Costs
  contents:
  - "2.5 User Worries About Costs\n   In Figure 5a, the exuberant user decides to\
    \ apply more caution, and\n   asks for advice on searching for a friend named\
    \ \"Susan Brown\".  The\n   user can not recall the name of the organization where\
    \ Susan works,\n   but remembers that the state name begins with \"I\".  The advice\n\
    \   response lists the locations of the data repositories that will be\n   contacted.\
    \ These locations can be supplied to the SNQP server using\n   the \"source\"\
    \ attribute.  Each location is followed by a blank and a\n   descriptive phrase\
    \ for the data repository. Continuing in Figure 5b,\n   the SNQP server also supplies\
    \ a list of attributes that may constrain\n   the query further.  The user recognizes\
    \ the name Northeastern, and\n   submits the query directly to that location.\
    \  The user could also\n   have added \"organization = \"Northeastern*\"\" to\
    \ the original query.\n   Other advice options are described in Section 3.\n \
    \  ---------------------------------------------------------------------\n   \
    \   advice\n      214 Basic advice enabled.  Query responses disabled.\n     \
    \ query\n      350 Send the query text, end with .\n      select * from people\
    \ where surname = \"Brown\" and\n                                 given_name =\
    \ \"Susan\" and\n                                 state_or_province = \"I*\";\n\
    \      .\n      354 The query will contact 8 data repositories, ended with .\n\
    \      ccso://ns.dacc.cc.il.us:105/* Danville Area Community College\n      ccso://ns.eiu.bgu.edu:105/*\
    \ Eastern Illinois University\n      ccso://ns.ilstu.edu:105/* Illinois State\
    \ University\n      ccso://ns.imsa.edu:105/* Illinois Math and Science Academy\n\
    \      ccso://ns.ne.edu:105/* Northeastern Illinois University\n      ccso://ns.uiuc.edu:105/*\
    \ University of Illinois at Urbana-Champaign\n      ccso://ns.iup.edu:105/* Indiana\
    \ University of Pennsylvania\n      ccso://ph.indstate.edu:105/* Indiana State\
    \ University\n      .\n          Figure 5a: User Asks About Costs Before Executing\
    \ Query\n   ---------------------------------------------------------------------\n\
    \   ---------------------------------------------------------------------\n  \
    \    355 There are 8 attributes that may constrain the query, ended with .\n \
    \     Organization\n      Department\n      Email\n      State_or_Province\n \
    \     Country\n      Postal_Code\n      Phone\n      Source\n      .\n      250\
    \ All queries processed.  Current through 12-Jun-1996 22:35 EDT.\n      noadvice\n\
    \      214 Query responses returned.  Advice disabled.\n      query\n      350\
    \ Send the query text, end with .\n      select * from people where surname =\
    \ \"Brown\" and\n                              given_name = \"Susan\" and\n  \
    \                               state_or_province = \"I*\" and\n             \
    \                    source =\"ccso://ns.neiu.bgu.edu:105/*\";\n      .\n    \
    \  351 Partial response follows, ended with .\n      Given_Name: Susan\n     \
    \ Middle_Name: W.\n      Surname: Brown\n      Organization: Northeastern Illinois\
    \ University\n      Email: sw-brown@ne.edu\n      Source: ccso://ne.edu:105/alias=SW-Brown\n\
    \      .\n      250 All queries processed.  Current through 12-Jun-1996 22:35\
    \ EDT.\n          Figure 5b: User Asks About Costs Before Executing Query\n  \
    \ ---------------------------------------------------------------------\n"
- title: 3. Commands
  contents:
  - "3. Commands\n   SNQP commands are case insensitive and terminated with a newline\
    \ <LF>\n   or carriage return <CR>.  In the following descriptions, SNQP\n   commands\
    \ are in upper case and SNQP replies are in mixed case.  Items\n   in a command\
    \ list are separated by blanks.\n   Most SNQP replies are short.  They have a\
    \ rely code (see Section 4),\n   followed by a continuation character and reply\
    \ text.  If the\n   continuation character is blank, the reply is complete.  If\
    \ the\n   continuation character is a dash (\"-\"), the reply continues on the\n\
    \   next line.  Text within the reply can vary, but the reply code\n   remains\
    \ the same.  A two line reply example is given below:\n   ---------------------------------------------------------------------\n\
    \      nnn-Message1\n      nnn Message2\n   ---------------------------------------------------------------------\n\
    \   In some cases commands or replies may be long, so these\n   commands/replies\
    \ use the '.'-terminated block structure that is used\n   for message bodies in\
    \ SMTP. Blocks are comprised of lines of text\n   that constitute the command/reply.\
    \  Blocks are terminated with a\n   period on a line by itself.\n   SNQP generally\
    \ ignores blank lines in both directions, except that\n   blanks lines separate\
    \ tuples within query response blocks.\n   Whenever a time is listed in a command\
    \ or response, it has the\n   format:\n   ---------------------------------------------------------------------\n\
    \   DD-MMM-YYYY HH:MM ZZZ\n   ---------------------------------------------------------------------\n\
    \   where DD is the day, MMM are the first three characters of the month,\n  \
    \ YYYY is the year, HH the hours on a 24 hour clock, MM the minutes,\n   and ZZZ\
    \ the commonly used US timezone abbreviations.  If time zone is\n   unspecified\
    \ in a command, the timezone of the SNQP server is assumed.\n   SNQP servers support\
    \ a source attribute in every relation.  In\n   queries, the source attribute\
    \ directs the SNQP server to a particular\n   data repository.  In query responses,\
    \ the source attribute indicates\n   the origin of the information in a tuple.\
    \  In advice and error\n   messages, the source attribute is provided so the client\
    \ can contact\n   the source in later queries.  The source attribute has two possible\n\
    \   forms:\n   ---------------------------------------------------------------------\n\
    \   <protocol>://<domain-name>:<port>\n   <protocol>://<domain-name>:<port>/<tuple-id>\n\
    \   ---------------------------------------------------------------------\n  \
    \ <protocol> identifies the protocol used to contact the data\n   repository.\
    \ The data repository can be (was) contacted at <domain-\n   name> and <port>.\
    \  When present, <tuple-id> identifies a specific\n   entry in the data repository.\
    \  It is missing when the data repository\n   does not have an attribute that\
    \ uniquely identifies its entries.\n   Although the source string is similar to\
    \ a URL, the protocols listed\n   may or may not be supported by World-Wide Web\
    \ browsers.  An effort\n   should be made to keep the protocol identifiers consistent\
    \ with\n   accepted standards, but in the end they are specific to SNQP servers.\n\
    \   When a connection is established with an SNQP server, the server\n   returns\
    \ the following greeting where <domain-name> is the domain name\n   of the server\
    \ host, e.g.  nomen.research.bell-labs.com,  and\n   <service-name> is the name\
    \ of the service, e.g. Nomenclator:\n   ---------------------------------------------------------------------\n\
    \      220 <domain-name> <snqp-service-name> Query Service ready\n   ---------------------------------------------------------------------\n\
    \   The following sections describe each command in detail.  The commands\n  \
    \ are ordered alphabetically.  Typical reply messages are explained\n   with each\
    \ command.  Exceptional error conditions, for example system\n   errors or rejection\
    \ of connections due to load, may sometimes occur.\n   These error replies are\
    \ documented in Section 4.\n"
- title: 3.1 Advice
  contents:
  - "3.1 Advice\n   ---------------------------------------------------------------------\n\
    \      ADVICE\n      214 Basic advice enabled. Query responses disabled.\n   \
    \   514 Advice not available\n      ADVICE <RELATION> <ATTRIBUTE>\n      214 Advice\
    \ enabled for \"<attribute>\" in \"<relation>\"\n      553 Unknown relation\n\
    \      554 Unknown attribute\n      514 Advice not available for \"<attribute>\"\
    \n   ---------------------------------------------------------------------\n \
    \  In all cases, advice disables query searches. When queries are\n   submitted,\
    \ advice is returned about the cost of the query or ways of\n   constraining the\
    \ query further.  There are two forms of the advice\n   command.\n   The first\
    \ form of command does not include an attribute name.  When\n   an SQL query is\
    \ processed, the SNQP server returns a list of data\n   repositories that it will\
    \ contact.  It also returns a list of\n   attributes that may constrain the query\
    \ further.  The specific values\n   of the attributes will determine whether the\
    \ query is constrained\n   further.  If advice is not available from the server,\
    \ an error is\n   returned.\n   The second form of advice includes the name of\
    \ a relation and the\n   name of an attribute in that relation.  SQL queries return\
    \ a list of\n   possible values for the attribute.  The list may be complete,\
    \ or may\n   only include values that are known to constrain the search.  This\n\
    \   distinction is described further in the query command.  If advice is\n   not\
    \ available on the attribute or the relation or attribute is\n   unknown, an error\
    \ is returned.  When advice is not available on an\n   attribute, basic advice\
    \ and advice on other attributes may be\n   available.\n   Basic advice and advice\
    \ for one or more attributes can be enabled\n   simultaneously. They are not mutually\
    \ exclusive.\n   The advice command is useful to application programs which present\n\
    \   lists of alternatives to the user.  A query-form program can enable\n   advice\
    \ for an attribute, submit an empty query, and obtain the list\n   of options\
    \ for the attribute.  The list will indicate whether it is a\n   full list of\
    \ all values for the attribute, or a constraint list of\n   only those values\
    \ known to constrain queries.  The program can use\n   full lists to create a\
    \ selection menu on its query form.  A program\n   can also enable basic advice,\
    \ submit the query, and then ask the user\n   to select the data repositories\
    \ to search from the resulting list.\n"
- title: 3.2 Attributes
  contents:
  - "3.2 Attributes\n   ---------------------------------------------------------------------\n\
    \      ATTRIBUTES <RELATION> <TIME>\n      212-There are <n> attributes in relation\
    \ \"<RELATION>\":\n      212-<Attribute-name>\n      212-<Attribute-name>\n  \
    \    212 Current through <TIME>\n      553 Unknown relation.  Current through\
    \ <TIME>.\n      556 T-bounds not supported\n   ---------------------------------------------------------------------\n\
    \   The attributes command lists the attributes defined for the given\n   relation.\
    \  Since characteristics of relations may be defined outside\n   the SNQP server\
    \ and cached there, the user may ask for an answer that\n   is more recent than\
    \ <TIME>.  The SNQP server will endeavor to provide\n   this information.  The\
    \ first line of the reply notes the number of\n   attributes <n>.  Subsequent\
    \ lines list the attribute names.  The\n   information in the response is current\
    \ through the time returned, but\n   may have changed after that time.  Accepting\
    \ requests to improve a\n   t-bound and indicating the t-bound of the result are\
    \ optional for\n   SNQP servers.\n   If the relation is unknown, an error is returned.\
    \  If <TIME> is\n   submitted when t-bounds are not supported, an error is returned.\n"
- title: 3.3 Compare
  contents:
  - "3.3 Compare\n   ---------------------------------------------------------------------\n\
    \      COMPARE <COMPARISON-TYPE>\n      213 Performing <COMPARISON-TYPE> comparisons\n\
    \      555 Unknown comparison type\n   ---------------------------------------------------------------------\n\
    \   The compare command lists the type of equality comparison performed\n   for\
    \ SQL queries.  The compare command can be followed by a comparison\n   type to\
    \ set the type.  Reply 555 is returned if the comparison type\n   is unknown or\
    \ unsupported.  \"Default\" and \"CCSO\" are defined\n   comparison types.  The\
    \ default equality comparison is exact string\n   matching.  The query string\
    \ may include \"*\" wildcards which match any\n   substring within the response\
    \ string.  The CCSO equality comparison\n   matches words within strings.  Each\
    \ word in the query string for an\n   attribute must appear in some order in the\
    \ response string.  Words\n   are delimited by blank, comma, colon, semi-colon,\
    \ tab, and newline.\n   The wildcard \"*\" matches any substring within a word.\
    \  Both string\n   and word comparisons are case insensitive.\n"
- title: 3.4 Help
  contents:
  - "3.4 Help\n   ---------------------------------------------------------------------\n\
    \      HELP\n      210-The following commands are available:\n      210-<comma-separated-command-list>\n\
    \      210 <comma-separated-command-list>\n      HELP <COMMAND>\n      210-<explanation\
    \ of <COMMAND>>\n      210 <explanation of <COMMAND>>\n      500 Sorry, no help\
    \ available for \"<COMMAND>\"\n   ---------------------------------------------------------------------\n\
    \   The help command returns the list of available commands. If some\n   commands\
    \ are not supported, for example advice, they should not be\n   listed.  Use of\
    \ unsupported commands should still return an\n   informative error message. \
    \ Help can be followed by a command name\n   for information on that command.\
    \  If no help is available for a\n   command or the command does not exist, Reply\
    \ 500 is returned.\n"
- title: 3.5 Imagui
  contents:
  - "3.5 Imagui\n   ---------------------------------------------------------------------\n\
    \      IMAGUI\n      215 GUI responses enabled\n   ---------------------------------------------------------------------\n\
    \   The imagui command informs the server that the client is a graphical\n   user\
    \ interface (GUI).  The client requests more comprehensive,\n   program-oriented\
    \ errors and progress reports. It replies that GUI\n   responses are enabled.\
    \  See Section 4 for more information on GUI\n   responses.\n"
- title: 3.6 Next
  contents:
  - "3.6 Next\n   ---------------------------------------------------------------------\n\
    \      NEXT\n      353 Starting next query.  Any pending responses discarded.\n\
    \      450 No query in progress\n   ---------------------------------------------------------------------\n\
    \   The next command stops processing of the current SQL query.  It\n   starts\
    \ the next SQL query in the block submitted with the last query\n   command. \
    \ If none remain, the query command is completed.  An error\n   is returned if\
    \ no query is in progress.\n"
- title: 3.7 Noadvice
  contents:
  - "3.7 Noadvice\n   ---------------------------------------------------------------------\n\
    \      NOADVICE\n      216 Query responses enabled.  Advice disabled.\n   ---------------------------------------------------------------------\n\
    \   The noadvice command disables advice for query commands.  It\n   activates\
    \ query searches, so queries will return responses.  See the\n   advice command\
    \ for more information.\n"
- title: 3.8 Noimagui
  contents:
  - "3.8 Noimagui\n   ---------------------------------------------------------------------\n\
    \      NOIMAGUI\n      215 GUI responses disabled\n   ---------------------------------------------------------------------\n\
    \   The noimagui command disables detailed messages to a graphical user\n   interface\
    \ program. It replies that GUI responses are disabled.  See\n   Section 4 for\
    \ more information on GUI responses.\n"
- title: 3.9 Query
  contents:
  - "3.9 Query\n   The query command behaves differently depending on whether responses\n\
    \   or advice are enabled. We first describe the submission of a query\n   and\
    \ the possible immediate error responses.  We then describe the\n   possible replies\
    \ to the query command when responses are enabled.  We\n   finish by describing\
    \ the possible replies to the query command when\n   advice is enabled.\n   ---------------------------------------------------------------------\n\
    \      QUERY <TIME>\n      350 Send query text, end with .\n      450 Query already\
    \ in progress\n      552 Query blocks are limited to one SQL query\n      556\
    \ T-bounds not supported\n   ---------------------------------------------------------------------\n\
    \   The query command submits a block of SQL queries to the SNQP server.\n   Each\
    \ SQL query must be terminated with a semi-colon, and the entire\n   block is\
    \ terminated with a line containing a single period.  Special\n   characters in\
    \ query string constants can be included using the C\n   language conventions,\
    \ e.g. \"\\n\" is the newline character.\n   Since a variety of cached information\
    \ can be used in processing the\n   SQL queries, the user may ask for answers\
    \ that are more recent than\n   <TIME>.  The SNQP server will endeavor to provide\
    \ this information.\n   Accepting requests to improve a t-bound is optional for\
    \ SNQP servers.\n   If a query command is already in process, the entire block\
    \ is\n   refused.  If multiple SQL queries are submitted in one block to a\n \
    \  server that does not support multi-query blocks, an error is\n   returned.\
    \  If <TIME> is submitted when t-bounds are not supported, an\n   error is returned.\n\
    \   ---------------------------------------------------------------------\n  \
    \    351 Partial response follows ended with .\n      352 Beginning next query.\
    \  Previous query current through <TIME>.\n      250 All queries processed.  Current\
    \ through <TIME>.\n      653 <Communications err> with <location> <location description>\n\
    \      660 <Error> from <location> <location description>\n      700 <SQL query\
    \ parsing error>\n      750 <SQL query semantic error>\n      761 <Requirements\
    \ Error> for <location> <location description>\n   ---------------------------------------------------------------------\n\
    \   Responses are returned in blocks as they arrive from data\n   repositories.\
    \  Reply 351 begins a response block.  Response blocks\n   are terminated with\
    \ periods.  Tuples are sent within the block as a\n   list of attribute name and\
    \ value pairs:\n   ---------------------------------------------------------------------\n\
    \   <attribute-name>: <attribute-value>\n                   : <attribute-value>\n\
    \   ---------------------------------------------------------------------\n  \
    \ Only the first line of a multi-line attribute returns the\n   <attribute-name>.\
    \  Successive tuples are separated with blank lines.\n   Attributes with null\
    \ or blank values are suppressed at the option of\n   the SNQP server.\n   In\
    \ between response blocks, error replies can be reported.  Replies\n   653, 660\
    \ and 761 are examples of such errors.  Reply 653 reports a\n   communication\
    \ error with the data repository identified by the source\n   location and described\
    \ by the associated string. Reply 660 reports an\n   error returned by a data\
    \ repository.  Reply 761 reports a known\n   requirement of the data repository\
    \ that the query failed to satisfy.\n   Reply 761 reflects comparison of the query\
    \ with known characteristics\n   of the data repository by the SNQP server.  For\
    \ example, some data\n   repositories refuse queries that do not contain a specific\
    \ subset of\n   attributes in the relation.  Other replies are possible.  It is\
    \ best\n   to check the the type and severity of the reply against the theory\
    \ of\n   reply codes in Section 4.\n   When an SQL query in a block is successfully\
    \ completed, the SNQP\n   server sends Reply 352 to indicate that the next query\
    \ is being\n   started.  Reply 352 reports the t-bound of the previous query if\
    \ it\n   is available. Reply 352 is sent even if the previous query terminated\n\
    \   due to permanent errors.   The one exception is that permanent errors\n  \
    \ generated by the next or stop command supersede Reply 352.\n   When all SQL\
    \ queries are complete, the SNQP server sends Reply 250 to\n   indicate that all\
    \ queries have been processed.  A query block\n   containing one query that has\
    \ no responses will only return Reply\n   250.  Reply 250 reports the t-bound\
    \ of the last SQL query in the\n   block if it is available.  Reply 250 is sent\
    \ even if the last query\n   in the block terminated due to permanent errors.\
    \   The one exception\n   is that permanent errors generated by the stop command\
    \ supersede\n   Reply 352.\n   Note that this command follows the convention that\
    \ \"intermediate\"\n   reply codes, as defined in Section 4, are used until the\
    \ SQL query is\n   complete.  Final query completion error codes abort the processing\
    \ of\n   the SQL query.  Examples of these errors include parsing errors\n   (Reply\
    \ 700) and semantic errors (Reply 750) in the SQL query.  The\n   SNQP server\
    \ will attempt to continue with the next query if possible.\n   The block of queries\
    \ will be terminated with Reply 250 or 251 (from\n   the stop command) to indicate\
    \ that another query will be accepted.\n   Indicating the t-bound of a query response\
    \ is optional for SNQP\n   servers.\n   ---------------------------------------------------------------------\n\
    \      354-The query will contact <n> data repositories, ended with .\n      <location>\
    \ <location-description>\n      355-There are <n> attributes that may constrain\
    \ the query, ended with .\n      <attribute-name>\n      356-There are <n> possible\
    \ values for \"<attribute>\", ended with .\n      <attribute-value>\n      357-There\
    \ are <n> constraining values for \"<attribute>\", ended with .\n      357-<attribute-value>\n\
    \      357 <attribute-value>\n      352 Beginning next query.  Previous query\
    \ current through <TIME>.\n      250 All queries processed.  Current through <TIME>.\n\
    \      700 <SQL query parsing error>\n      750 <SQL query semantic error>\n \
    \  ---------------------------------------------------------------------\n   Different\
    \ kinds of advice are returned in different blocks.  Basic\n   advice about the\
    \ number, n, of data repositories that will be\n   searched is returned with Reply\
    \ 354.  Subsequent lines list location\n   and location description for the data\
    \ repositories that will be\n   searched.  The data repository locations can be\
    \ supplied to the SNQP\n   server using the \"source\" attribute.  Each location\
    \ is followed by a\n   blank and a descriptive phrase for the data repository.\n\
    \   Basic advice about the attributes that may constrain the query is\n   returned\
    \ with reply code 355.  The first line of the reply includes\n   the number, n,\
    \ of attributes.  Subsequent lines list the names of the\n   attributes.  The\
    \ specific values of the attribute will determine\n   whether the query is constrained\
    \ further.\n   Advice for a particular attribute has two forms.  First, the advice\n\
    \   may list the n possible values for the attribute in reply 356.  The\n   list\
    \ is complete; no other values for the attribute exist within the\n   context\
    \ of the query.  Second, the advice may list the n values for\n   the attribute\
    \ that are known to constrain the query.  The list is\n   incomplete; other values\
    \ of the attribute may exist within the\n   context of the query.\n   When advice\
    \ for an SQL query in a block is successfully completed,\n   the SNQP server sends\
    \ reply 352 to indicate that the next query is\n   being started.  Reply 352 reports\
    \ the t-bound of the advice for the\n   previous query if it is available. Reply\
    \ 352 is sent even if the\n   previous query terminated due to permanent errors.\
    \   The one\n   exception is that permanent errors generated by the next or stop\n\
    \   command supersede Reply 352.\n   When all SQL queries are complete, the SNQP\
    \ server sends Reply 250 to\n   indicate that all queries have been processed.\
    \  Reply 250 reports the\n   t-bound of the last SQL query in the block if it\
    \ is available.  Reply\n   250 is sent even if the last query in the block terminated\
    \ due to\n   permanent errors.   The one exception is that permanent errors\n\
    \   generated by the stop command supersede Reply 352.\n   Final query completion\
    \ error codes abort the processing of the SQL\n   query.  Examples of these errors\
    \ include parsing errors and semantic\n   errors in the SQL query.  The SNQP server\
    \ will attempt to continue\n   with the next query if possible. The block of queries\
    \ will be\n   terminated with Reply 250 or 251 (from the stop command) to indicate\n\
    \   that another query will be accepted.  Indicating the t-bound of\n   advice\
    \ is optional for SNQP servers.\n"
- title: 3.10 Relations
  contents:
  - "3.10 Relations\n   ---------------------------------------------------------------------\n\
    \      RELATIONS <TIME>\n      211-There are <n> relations defined:\n      211-<Relation-name>\n\
    \      211-<Relation-name>\n      211 Current through <TIME>.\n      556 T-bounds\
    \ not supported\n   ---------------------------------------------------------------------\n\
    \   The relations command lists the currently available relation names.\n   Since\
    \ characteristics of relations can be cached, the user may ask\n   for an answer\
    \ that is more recent than <TIME>.  The SNQP server will\n   endeavor to provide\
    \ this information.  The first line of the reply\n   notes the number of relations\
    \ <n>.  Subsequent lines list the\n   relation names. The information in the response\
    \ is current through\n   the time returned, but may have changed after that time.\
    \  Accepting\n   requests to improve a t-bound and indicating the t-bound of the\n\
    \   result are optional for SNQP servers.\n   If <TIME> is submitted when t-bounds\
    \ are not supported, an error is\n   returned.\n"
- title: 3.11 Stop
  contents:
  - "3.11 Stop\n   ---------------------------------------------------------------------\n\
    \      STOP\n      251 All pending queries and responses discarded\n      450\
    \ No query in progress\n   ---------------------------------------------------------------------\n\
    \   The stop command ends processing of the current SQL query, and\n   cancels\
    \ any that may have followed it in the last query command.  An\n   error is returned\
    \ if no queries are in progress.\n"
- title: 3.12 Quit
  contents:
  - "3.12 Quit\n   ---------------------------------------------------------------------\n\
    \      QUIT\n      221 <domain-name> closing transmission channel\n   ---------------------------------------------------------------------\n\
    \   The quit command ends the session.  It closes the TCP connection\n   after\
    \ signing off with the domain name of the SNQP server.\n"
- title: 4. Replies
  contents:
  - "4. Replies\n   Most SNQP replies are short.  They have a rely code followed by\
    \ a\n   continuation character and reply text.  If the continuation character\n\
    \   is blank, the reply is complete.  If the continuation character is a\n   dash\
    \ (\"-\"), the reply continues on the next line.  Text within the\n   reply can\
    \ vary, but the reply code remains the same.  A two line\n   reply example is\
    \ given below:\n   ---------------------------------------------------------------------\n\
    \      nnn-Message1\n      nnn Message2\n   ---------------------------------------------------------------------\n\
    \   In some cases commands or replies may be long, so these\n   commands/replies\
    \ use the '.'-terminated block structure that is used\n   for message bodies in\
    \ SMTP. Blocks are comprised of lines of text\n   that constitute the command/reply.\
    \  Blocks are terminated with a\n   period on a line by itself.\n   The theory\
    \ of reply codes explained for SMTP in RFC-821 is used here.\n   Table 2 defines\
    \ the reply code structure.  Reply codes are three\n   digits, xyz.  The x digit\
    \ indicates the command status.  The y digit\n   indicates the component of the\
    \ system that generated the reply.  The\n   z digit allows for further distinctions\
    \ within replies from the same\n   component.\n   ---------------------------------------------------------------------\n\
    \      Code  Interpretation\n   ---------------------------------------------------------------------\n\
    \      1yz   Positive preliminary reply (not used in SNQP)\n      2yz   Positive\
    \ completion reply\n      3yz   Positive intermediate reply\n      4yz   Transient\
    \ negative completion reply\n      5yz   Permanent negative completion reply\n\
    \      6yx   Transient negative intermediate reply\n      7yx   Permanent negative\
    \ intermediate reply\n      x0z   Syntax or semantic problem\n      x1z   Informational\
    \ reply\n      x2z   Related to transmission channel\n      x3z   Formatted (location\
    \ coded) report for GUI\n      x4z   Status message to be displayed by GUI\n \
    \     x5z   Related to query resolver\n      x6z   Related to data repository\n\
    \      x9z   Component generating the error is unknown or suspect\n          \
    \           Table 2: Reply Code Structure\n   ---------------------------------------------------------------------\n\
    \   The GUI-related reply codes are only used if the server has been\n   informed\
    \ that it is communicating with a graphical user interface,\n   via the imagui\
    \ command.   For such codes in the x3z space, digit \"z\"\n   takes on the role\
    \ of digit \"y\" in other codes. I.e. 735 are permanent\n   negative intermediate\
    \ replies about the query resolver.\n   Table 3a and Table 3b list the defined\
    \ regular (non-GUI) reply codes.\n   Text messages for the reply codes may vary.\
    \  The codes are sorted\n   numerically.\n   ---------------------------------------------------------------------\n\
    \      210-The following commands are available:\n      211-There are <n> relations\
    \ defined:\n      212-There are <n> attributes in relation \"<relation>\":\n \
    \     213 Performing <comparison-type> type equality comparisons\n      214 Basic\
    \ advice enabled.  Query responses disabled.\n      214 Advice enabled for \"\
    <attribute>\" in \"<relation>\"\n      215 GUI responses enabled\n      215 GUI\
    \ responses disabled\n      216 Query responses enabled.  Advice disabled.\n \
    \     220 <domain-name> <snqp-service-name> Query Service ready\n      221 <domain-name>\
    \ closing transmission channel\n      250 All queries processed\n      250 All\
    \ queries processed.  Current through <time>.\n      251 All pending queries and\
    \ responses discarded\n      340 Searching <n> data repositories\n      350 Send\
    \ the query text, end with .\n      351 Partial response follows, ended with .\n\
    \      352 Beginning next query in batch\n      352 Beginning next query in batch.\
    \  Previous current through <time>.\n      353 Starting next query. Any pending\
    \ responses discarded.\n      354 The query will contact <n> data repositories,\
    \ ended with .\n      355 There are <n> attributes that may constrain the query,\
    \ ended with .\n      356 There are <n> possible values for attribute \"<attribute>\"\
    :\n      357 There are <n> constraining values for attribute \"<attribute>\":\n\
    \      420 Too many connections in progress. Try later.\n      421 Error in communicating\
    \ with <snqp-service-name>\n      450 No query in progress\n      451 Cancel ignored\n\
    \                        Table 3a: Reply Codes\n   ---------------------------------------------------------------------\n\
    \   ---------------------------------------------------------------------\n  \
    \    450 Query already in progress\n      490 Internal error: Invalid query reference\
    \ number\n      491 System error: <error number or message>\n      492 Internal\
    \ error: Out of client table space\n      499 <snqp-service-name> shutting down\n\
    \      500 Sorry, no help is available for \"<command>\"\n      501 Unknown command\n\
    \      502 Too many arguments for this command\n      502 Not enough arguments\
    \ for this command\n      514 Advice not available\n      514 Advice not available\
    \ on <attribute>\n      552 Query blocks are limited to one SQL query\n      553\
    \ Unknown relation\n      553 Unknown relation.  Current through <TIME>.\n   \
    \   554 Unknown attribute\n      555 Unknown comparison type\n      556 T-bounds\
    \ not supported\n      557 Will not list more than <n> data repositories\n   \
    \   557 Will not list more than <n> attribute values\n      557 Will not list\
    \ more than <n> responses\n      557 Too many data repositories to list\n    \
    \  557 Too many attribute values to list\n      557 Too many responses to list\n\
    \      557 Too many data repositories to search\n      651 <Error message from\
    \ query resolver>\n      653 <Communications error> with <location> <location\
    \ description>\n      660 <Error> from <location> <location description>\n   \
    \   700 <SQL parse error message>\n      750 <SQL semantic error message>\n  \
    \    751 <Error message from query resolver>\n      761 <Requirements error> for\
    \ <location> <location description>\n      790 Internal error: <fatal error from\
    \ SNQP server>\n                        Table 3b: Reply Codes\n              \
    \                    (Continued)\n   ---------------------------------------------------------------------\n\
    \   Table 4 lists the defined GUI reply codes.  Text messages for the\n   reply\
    \ codes may vary.  The codes are sorted numerically.  An\n   explanation of the\
    \ codes follows the table.\n   ---------------------------------------------------------------------\n\
    \      331 nnnnnnn! <message>\n      331 nnnnnnn.mmmmmm <message>\n      331 nnnnnnn-mmmmmm\
    \ <message>\n      730 nnnnnnnammmmmm e <parse error message>\n      735 nnnnnnnammmmmm\
    \ e <semantic error message>\n      340 <status>\n                        Table\
    \ 4: GUI Reply Codes\n   ---------------------------------------------------------------------\n\
    \   In Table 4, nnnnnnn is the line number in a query block, and mmmmmm\n   is\
    \ the column in the line.  Both numbers begin counting with 1.  The\n   exclamation\
    \ point response directs the program to list information\n   after line n.  The\
    \ period response directs the program to break line\n   n at column m.  The hyphen\
    \ response directs the program to flag line\n   n at column m.  Replies 730 and\
    \ 735 direct the GUI to indicate the\n   parsing or semantic error at line n,\
    \ column m.  Response 340 provides\n   status information that can be displayed\
    \ immediately in the GUI's\n   status line.  A sample status message is one that\
    \ indicates which\n   data repository is being contacted.\n"
- title: 5. Protocol Requirements
  contents:
  - "5. Protocol Requirements\n   SQL queries may often have more functionality then\
    \ a server supports\n   or an application demands.  Moreover, query blocks larger\
    \ than one\n   SQL query, advice on query costs, some types of comparison operations\n\
    \   or t-bounds need not be supported by a particular server.  SNQP\n   defines\
    \ a minimal subset of functionality for a working SNQP\n   protocol.  Functionality\
    \ beyond this subset is optional.  Servers\n   that do not support optional functionality\
    \ must return replies that\n   indicate this to the user.\n   Table 5 lists the\
    \ minimum functionality for an SNQP server.\n   ---------------------------------------------------------------------\n\
    \      Command       Limitations\n   ---------------------------------------------------------------------\n\
    \      advice        Not supported.\n      attributes    List the attributes for\
    \ a relation.\n      compare       List type of comparison operation.  At least\n\
    \                    one of CCSO and default comparison types must\n         \
    \           be supported.  Wildcards in SQL query strings\n                  \
    \  can be rejected by the query command with an\n                    appropriate\
    \ semantic error message.\n      help          Explain the available SNQP commands.\n\
    \      imagui        Not supported.\n      next          Not supported.\n    \
    \  noadvice      Supported, but has no effect since advice\n                 \
    \   is not supported.\n      noimagui      Supported, but has no effect since\
    \ imagui\n                    is not supported.\n      query         Submit a\
    \ block containing one SQL query statement.\n                    The minimum supported\
    \ SQL query statement is\n                    a selection query that performs\
    \ equality\n                    comparisons between attribute values and\n   \
    \                 constant strings.  Conjunctions of such comparisons\n      \
    \              are supported.  The minimum SQL query does not allow\n        \
    \            projections, but returns all the attributes\n                   \
    \ for matching tuples.\n      relations     List the relations available through\
    \ the SNQP\n                    server.\n      stop          End processing of\
    \ current query.\n      quit          Terminate the query session.\n         \
    \        Table 5: Minimum  SNQP Server Requirements\n                        \
    \  (Commands do not support t-bounds)\n   ---------------------------------------------------------------------\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   SNQP clients and servers depend on the Domain\
    \ Name Service.  They are\n   subject to all the security issues that arise in\
    \ that context.  This\n   version of the SNQP protocol does not define procedures\
    \ for\n   protecting the information communicated to and from an SNQP server.\n"
- title: 7. References
  contents:
  - "7. References\n   [1]   American National Standards Institute. \"SQL,\" ANSI\
    \ Standard\n         X3.135-1989.  1989.\n   [2]   H. Garcia-Molina, G. Wiederhold.\
    \ \"Read-Only Transactions in\n         a Distributed Database,\"  ACM Transactions\
    \ on Database Systems\n         7(2), pp. 209-234.  June 1982.\n   [3]   S. Dorner,\
    \ P. Pomes. \"The CCSO Nameserver: A Description,\"\n         Computer and Communications\
    \ Services Office Technical Report,\n         University of Illinois, Urbana,\
    \ USA. 1992. Available in the\n         current \"qi\" distribution from\n   \
    \      <URL:ftp://uiarchive.cso.uiuc.edu/local/packages/ph>\n   [4]   J. Levine,\
    \ T. Mason, D. Brown. \"Parsing SQL,\" lex  yacc, 2nd\n         ed.  O'Reilly\
    \ and Associates, Inc. 1992.\n   [5]   Ordille, J., \"The Internet Nomenclator\
    \ Project\", RFC 2258,\n         January 1998.\n   [6]   J. Ordille. \"Descriptive\
    \ Name Services for Large Internets,\"\n         Ph. D. Dissertation. University\
    \ of Wisconsin. 1993.\n         <URL:http://cm.bell-labs.com/cm/cs/doc/93/12-01.ps.gz>\n\
    \   [7]   J. Ordille, B. Miller. \"Distributed Active Catalogs and\n         Meta-Data\
    \ Caching in Descriptive Name Services,\" Thirteenth\n         International IEEE\
    \ Conference on Distributed Computing Systems,\n         pp. 120-129.  May 1993.\n\
    \         <URL:http://cm.bell-labs.com/cm/cs/doc/93/5-01.ps.gz>\n   [8]   J. Ordille.\
    \ \"Nomenclator Home Page.\" 1997.\n         <URL:http://cm.bell-labs.com/cm/cs/what/nomenclator/>\n\
    \   [9]   Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC 821,\n  \
    \       August 1982.\n   [10   Yeong, W., Howes, T., and S. Kille.  \"Lightweight\
    \ Directory\n         Access Protocol\", RFC 1777, March 1995.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Jim Elliott\n   Epic Systems Corporation\n   5301 Tokay\
    \ Boulevard\n   Madison, WI 53711  USA\n   EMail: jim@apocalypse.org\n   Joann\
    \ J. Ordille\n   Bell Labs, Lucent Technologies\n   Computing Sciences Research\
    \ Center\n   700 Mountain Avenue, Rm 2C-301\n   Murray Hill, NJ 07974  USA\n \
    \  EMail: joann@bell-labs.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
