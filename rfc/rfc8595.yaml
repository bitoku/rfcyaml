- title: __initial_text__
  contents:
  - '      An MPLS-Based Forwarding Plane for Service Function Chaining

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes how Service Function Chaining (SFC) can\
    \ be\n   achieved in an MPLS network by means of a logical representation of\n\
    \   the Network Service Header (NSH) in an MPLS label stack.  That is,\n   the\
    \ NSH is not used, but the fields of the NSH are mapped to fields\n   in the MPLS\
    \ label stack.  This approach does not deprecate or replace\n   the NSH, but it\
    \ acknowledges that there may be a need for an interim\n   deployment of SFC functionality\
    \ in brownfield networks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8595.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Requirements Language ...........................................4\n  \
    \ 3. Choice of Data-Plane SPI/SI Representation ......................4\n   4.\
    \ Use Case Scenarios ..............................................5\n      4.1.\
    \ Label Swapping for Logical NSH .............................5\n      4.2. Hierarchical\
    \ Encapsulation .................................5\n      4.3. Fine Control of\
    \ Service Function Instances .................6\n      4.4. Micro Chains and Label\
    \ Stacking ............................6\n      4.5. SFC and Segment Routing ....................................6\n\
    \   5. Basic Unit of Representation ....................................6\n  \
    \ 6. MPLS Label Swapping .............................................7\n   7.\
    \ MPLS Label Stacking ............................................10\n   8. Mixed-Mode\
    \ Forwarding ..........................................12\n   9. A Note on Service\
    \ Function Capabilities and SFC Proxies ........13\n   10. Control-Plane Considerations\
    \ ..................................14\n   11. Use of the Entropy Label ......................................14\n\
    \   12. Metadata ......................................................15\n  \
    \    12.1. Indicating Metadata in User Data Packets .................16\n    \
    \  12.2. In-Band Programming of Metadata ..........................18\n      \
    \     12.2.1. Loss of In-Band Metadata ..........................21\n   13. Worked\
    \ Examples ...............................................22\n   14. Implementation\
    \ Notes ..........................................26\n   15. Security Considerations\
    \ .......................................26\n   16. IANA Considerations ...........................................28\n\
    \   17. References ....................................................29\n  \
    \    17.1. Normative References .....................................29\n    \
    \  17.2. Informative References ...................................30\n   Acknowledgements\
    \ ..................................................31\n   Contributors ......................................................31\n\
    \   Authors' Addresses ................................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Service Function Chaining (SFC) is the process of directing\
    \ packets\n   through a network so that they can be acted on by an ordered set\
    \ of\n   abstract Service Functions (SFs) before being delivered to the\n   intended\
    \ destination.  An architecture for SFC is defined in\n   [RFC7665].\n   When\
    \ applying a particular service function chain to the traffic\n   selected by\
    \ a service classifier, the traffic needs to be steered\n   through an ordered\
    \ set of SFs in the network.  This ordered set of\n   SFs is termed a Service\
    \ Function Path (SFP), and the traffic is\n   passed between Service Function\
    \ Forwarders (SFFs) that are\n   responsible for delivering the packets to the\
    \ SFs and for forwarding\n   them onward to the next SFF.\n   In order to steer\
    \ the selected traffic between SFFs and to the\n   correct SFs, the service classifier\
    \ needs to attach information to\n   each packet.  This information indicates\
    \ the SFP on which the packet\n   is being forwarded and hence the SFs to which\
    \ it must be delivered.\n   The information also indicates the progress the packet\
    \ has already\n   made along the SFP.\n   The Network Service Header (NSH) [RFC8300]\
    \ has been defined to carry\n   the necessary information for SFC in packets.\
    \  The NSH can be\n   inserted into packets and contains various information,\
    \ including a\n   Service Path Identifier (SPI), a Service Index (SI), and a Time\
    \ To\n   Live (TTL) counter.\n   Multiprotocol Label Switching (MPLS) [RFC3031]\
    \ is a widely deployed\n   forwarding technology that uses labels placed in a\
    \ packet in a label\n   stack to identify the forwarding actions to be taken at\
    \ each hop\n   through a network.  Actions may include swapping or popping the\n\
    \   labels as well as using the labels to determine the next hop for\n   forwarding\
    \ the packet.  Labels may also be used to establish the\n   context under which\
    \ the packet is forwarded.  In many cases, MPLS\n   will be used as a tunneling\
    \ technology to carry packets through\n   networks between SFFs.\n   This document\
    \ describes how SFC can be achieved in an MPLS network by\n   means of a logical\
    \ representation of the NSH in an MPLS label stack.\n   This approach is applicable\
    \ to all forms of MPLS forwarding (where\n   labels are looked up at each hop\
    \ and are swapped or popped\n   [RFC3031]).  It does not deprecate or replace\
    \ the NSH, but it\n   acknowledges that there may be a need for an interim deployment\
    \ of\n   SFC functionality in brownfield networks.  The mechanisms described\n\
    \   in this document are a compromise between the full function that can\n   be\
    \ achieved using the NSH and the benefits of reusing the existing\n   MPLS forwarding\
    \ paradigms (the approach defined here does not include\n   the O bit defined\
    \ in [RFC8300] and has some limitations to the use of\n   metadata as described\
    \ in Section 12).\n   Section 4 provides a short overview of several use case\
    \ scenarios\n   that help to explain the relationship between the MPLS label\n\
    \   operations (swapping, popping, stacking) and the MPLS encoding of the\n  \
    \ logical NSH described in this document.\n   It is assumed that the reader is\
    \ fully familiar with the terms and\n   concepts introduced in [RFC7665] and [RFC8300].\n\
    \   Note that one of the features of the SFC architecture described in\n   [RFC7665]\
    \ is the \"SFC proxy\", which exists to include legacy SFs that\n   are not able\
    \ to process NSH-encapsulated packets.  This issue is\n   equally applicable to\
    \ the use of MPLS-encapsulated packets that\n   encode a logical representation\
    \ of an NSH.  It is discussed further\n   in Section 9.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Choice of Data-Plane SPI/SI Representation
  contents:
  - "3.  Choice of Data-Plane SPI/SI Representation\n   While [RFC8300] defines the\
    \ NSH that can be used in a number of\n   environments, this document provides\
    \ a mechanism to handle situations\n   in which the NSH is not ubiquitously deployed.\
    \  In this case, it is\n   possible to use an alternative data-plane representation\
    \ of the\n   SPI/SI by carrying the identical semantics in MPLS labels.\n   In\
    \ order to correctly select the mechanism by which SFC information\n   is encoded\
    \ and carried between SFFs, it may be necessary to configure\n   the capabilities\
    \ and choices either within the whole Service Function\n   Overlay Network or\
    \ on a hop-by-hop basis.  It is a requirement that\n   both ends of a tunnel over\
    \ the underlay network (i.e., a pair of SFFs\n   adjacent in the SFP) know that\
    \ the tunnel is used for SFC and know\n   what form of NSH representation is used.\
    \  A control-plane signaling\n   approach to achieve these objectives is provided\
    \ using BGP in\n   [BGP-NSH-SFC].\n   Note that the encoding of the SFC information\
    \ is independent of the\n   choice of tunneling technology used between SFFs.\
    \  Thus, an MPLS\n   representation of the logical NSH (as defined in this document)\
    \ may\n   be used even if the tunnel between a pair of SFFs is not an MPLS\n \
    \  tunnel.  Conversely, MPLS tunnels may be used to carry other\n   encodings\
    \ of the logical NSH (specifically, the NSH itself).\n"
- title: 4.  Use Case Scenarios
  contents:
  - "4.  Use Case Scenarios\n   There are five scenarios that can be considered for\
    \ the use of an\n   MPLS encoding in support of SFC.  These are set out in the\
    \ following\n   subsections.\n"
- title: 4.1.  Label Swapping for Logical NSH
  contents:
  - "4.1.  Label Swapping for Logical NSH\n   The primary use case for SFC is described\
    \ in [RFC7665] and delivered\n   using the NSH, which, as described in [RFC8300],\
    \ uses an\n   encapsulation with a position indicator that is modified at each\
    \ SFC\n   hop along the chain to indicate the next hop.\n   The label-swapping\
    \ use case scenario effectively replaces the NSH\n   with an MPLS encapsulation\
    \ as described in Section 6.  The MPLS\n   labels encode the same information\
    \ as the NSH to form a logical NSH.\n   The labels are modified (swapped per [RFC3031])\
    \ at each SFC hop along\n   the chain to indicate the next hop.  The processing\
    \ and the\n   forwarding state for a chain (i.e., the actions to take on a received\n\
    \   label) are programmed into the network using a control plane or\n   management\
    \ plane.\n"
- title: 4.2.  Hierarchical Encapsulation
  contents:
  - "4.2.  Hierarchical Encapsulation\n   [RFC8459] describes an architecture for\
    \ hierarchical encapsulation\n   using the NSH.  It facilitates partitioning of\
    \ SFC domains for\n   administrative reasons and allows concatenation of service\
    \ function\n   chains under the control of a service classifier.\n   The same\
    \ function can be achieved in an MPLS network using an MPLS\n   encoding of the\
    \ logical NSH, and label stacking as defined in\n   [RFC3031] and described in\
    \ Section 7.  In this model, swapping is\n   used per Section 4.1 to navigate\
    \ one chain, and when the end of the\n   chain is reached, the final label is\
    \ popped, revealing the label for\n   another chain.  Thus, the primary mode is\
    \ swapping, but stacking is\n   used to enable the ingress classifier to control\
    \ concatenation of\n   service function chains.\n"
- title: 4.3.  Fine Control of Service Function Instances
  contents:
  - "4.3.  Fine Control of Service Function Instances\n   It may be that a service\
    \ function chain (as described in Section 4.1)\n   allows some leeway in the choice\
    \ of service function instances along\n   the chain.  However, it may be that\
    \ a service classifier wishes to\n   constrain the choice and this can be achieved\
    \ using chain\n   concatenation so that the first chain ends at the point of choice,\n\
    \   the next label in the stack indicates the specific service function\n   instance\
    \ to be executed, and the next label in the stack starts a new\n   chain.  Thus,\
    \ a mixture of label swapping and stacking is used.\n"
- title: 4.4.  Micro Chains and Label Stacking
  contents:
  - "4.4.  Micro Chains and Label Stacking\n   The scenario in Section 4.2 may be\
    \ extended to its logical extreme by\n   making each concatenated chain as short\
    \ as it can be: one SF.  Each\n   label in the stack indicates the next SF to\
    \ be executed, and the\n   network is programmed through the control plane or\
    \ management plane\n   to know how to route to the next (i.e., first) hop in each\
    \ chain just\n   as it would be to support the scenarios in Sections 4.1 and 4.2.\n\
    \   This scenario is functionally identical to the use of Segment Routing\n  \
    \ (SR) in an MPLS network (known as SR-MPLS) for SFC, as described in\n   Section\
    \ 4.5, and the discussion in that section applies to this\n   section as well.\n"
- title: 4.5.  SFC and Segment Routing
  contents:
  - "4.5.  SFC and Segment Routing\n   SR-MPLS uses a stack of MPLS labels to encode\
    \ information about the\n   path and network functions that a packet should traverse.\
    \  SR-MPLS is\n   achieved by applying control-plane and management-plane techniques\
    \ to\n   program the MPLS forwarding plane and by imposing labels on packets\n\
    \   at the entrance to the SR-MPLS network.  An implementation proposal\n   for\
    \ achieving SFC using SR-MPLS can be found in [SR-Srv-Prog] and is\n   not discussed\
    \ further in this document.\n"
- title: 5.  Basic Unit of Representation
  contents:
  - "5.  Basic Unit of Representation\n   When an MPLS label stack is used to carry\
    \ a logical NSH, a basic unit\n   of representation is used.  This unit comprises\
    \ two MPLS labels, as\n   shown below.  The unit may be present one or more times\
    \ in the label\n   stack as explained in subsequent sections.\n   In order to\
    \ convey the same information as is present in the NSH, two\n   MPLS label stack\
    \ entries are used.  One carries a label to provide\n   context within the SFC\
    \ scope (the SFC Context Label), and the other\n   carries a label to show which\
    \ SF is to be actioned (the SF Label).\n   This two-label unit is shown in Figure\
    \ 1.\n    0                   1                   2                   3\n    0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           SFC Context Label           | TC  |S|       TTL     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           SF Label                    | TC  |S|       TTL     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 1: The Basic Unit of MPLS Label Stack for SFC\n   The fields\
    \ of these two label stack entries are encoded as follows:\n   Label:  The Label\
    \ fields contain the values of the SFC Context Label\n      and the SF Label encoded\
    \ as 20-bit integers.  The precise\n      semantics of these Label fields are\
    \ dependent on whether the label\n      stack entries are used for MPLS label\
    \ swapping (see Section 6) or\n      MPLS label stacking (see Section 7).\n  \
    \ TC:  The TC bits have no meaning in this case.  They SHOULD be set to\n    \
    \  zero in both label stack entries when a packet is sent and MUST be\n      ignored\
    \ on receipt.\n   S: The \"Bottom of Stack\" bit has its usual meaning in MPLS.\
    \  It MUST\n      be clear in the SFC Context Label stack entry.  In the SF Label\n\
    \      stack entry, it MUST be clear in all cases except when the label\n    \
    \  is the bottom of the stack, when it MUST be set.\n   TTL:  The TTL field in\
    \ the SFC Context Label stack entry SHOULD be\n      set to 1.  The TTL in the\
    \ SF Label stack entry (called the SF TTL)\n      is set according to its use\
    \ for MPLS label swapping (see\n      Section 6) or MPLS label stacking (see Section\
    \ 7) and is used to\n      mitigate packet loops.\n   The sections that follow\
    \ show how this basic unit of MPLS label stack\n   may be used for SFC in the\
    \ MPLS label-swapping case and in the MPLS\n   label-stacking case.  For simplicity,\
    \ these sections do not describe\n   the use of metadata; that topic is covered\
    \ separately in Section 12.\n"
- title: 6.  MPLS Label Swapping
  contents:
  - "6.  MPLS Label Swapping\n   This section describes how the basic unit of MPLS\
    \ label stack for SFC\n   (introduced in Section 5) is used when MPLS label swapping\
    \ is in use.\n   The use case scenario for this approach is introduced in Section\
    \ 4.1.\n   As can be seen in Figure 2, the top of the label stack comprises the\n\
    \   labels necessary to deliver the packet over the MPLS tunnel between\n   SFFs.\
    \  Any MPLS encapsulation may be used (i.e., MPLS, MPLS in UDP,\n   MPLS in GRE,\
    \ and MPLS in Virtual Extensible Local Area Networks\n   (VXLANs) or the Generic\
    \ Protocol Extension for VXLAN (GPE)); thus,\n   the tunnel technology does not\
    \ need to be MPLS, but MPLS is shown\n   here for simplicity.\n   An entropy label\
    \ [RFC6790] may also be present, as described in\n   Section 11.\n       ---------------\n\
    \      ~ Tunnel Labels ~\n      +---------------+\n      ~   Optional    ~\n \
    \     ~ Entropy Label ~\n      +---------------+ - - -\n      |   SPI Label  \
    \ |\n      +---------------+  Basic unit of MPLS label stack for SFC\n      |\
    \   SI Label    |\n      +---------------+ - - -\n      |               |\n  \
    \    ~    Payload    ~\n      |               |\n       ---------------\n    \
    \                Figure 2: The MPLS SFC Label Stack\n   Under these labels (or\
    \ other encapsulation) comes a single instance\n   of the basic unit of MPLS label\
    \ stack for SFC.  In addition to the\n   interpretation of the fields of these\
    \ label stack entries (provided\n   in Section 5), the following meanings are\
    \ applied:\n   SPI Label:  The Label field of the SFC Context Label stack entry\n\
    \      contains the value of the SPI encoded as a 20-bit integer.  The\n     \
    \ semantics of the SPI are exactly as defined in [RFC8300].  Note\n      that\
    \ an SPI as defined by [RFC8300] can be encoded in 3 octets\n      (i.e., 24 bits),\
    \ but that the Label field allows for only 20 bits\n      and reserves the values\
    \ 0 through 15 as \"special-purpose labels\"\n      [RFC7274].  Thus, a system\
    \ using MPLS representation of the\n      logical NSH MUST NOT assign SPI values\
    \ greater than 2^20 - 1 or\n      less than 16.\n   SI Label:  The Label field\
    \ of the SF Label stack entry contains the\n      value of the SI exactly as defined\
    \ in [RFC8300].  Since the SI\n      requires only 8 bits, and to avoid overlap\
    \ with the\n      special-purpose label range of 0 through 15 [RFC7274], the SI\
    \ is\n      carried in the top (most significant) 8 bits of the Label field\n\
    \      with the low-order 12 bits set to zero.\n   TC:  The TC fields are as described\
    \ in Section 5.\n   S: The S bits are as described in Section 5.\n   TTL:  The\
    \ TTL field in the SPI Label stack entry SHOULD be set to 1\n      as stated in\
    \ Section 5.  The TTL in the SF Label stack entry is\n      decremented once for\
    \ each forwarding hop in the SFP, i.e., for\n      each SFF transited, and so\
    \ mirrors the TTL field in the NSH.\n   The following processing rules apply to\
    \ the Label fields:\n   o  When a classifier inserts a packet onto an SFP, it\
    \ sets the SPI\n      Label to indicate the identity of the SFP and sets the SI\
    \ Label to\n      indicate the first SF in the path.\n   o  When a component of\
    \ the SFC system processes a packet, it uses the\n      SPI Label to identify\
    \ the SFP and the SI Label to determine which\n      SFF or instance of an SF\
    \ (an SFI) to deliver the packet to.  Under\n      normal circumstances (with\
    \ the exception of branching and\n      reclassification -- see [BGP-NSH-SFC]),\
    \ the SPI Label value is\n      preserved on all packets.  The SI Label value\
    \ is modified by SFFs\n      and through reclassification to indicate the next\
    \ hop along\n      the SFP.\n   The following processing rules apply to the TTL\
    \ field of the SF Label\n   stack entry and are derived from Section 2.2 of [RFC8300]:\n\
    \   o  When a classifier places a packet onto an SFP, it MUST set the TTL\n  \
    \    to a value between 1 and 255.  It SHOULD set this according to the\n    \
    \  expected length of the SFP (i.e., the number of SFs on the SFP),\n      but\
    \ it MAY set it to a larger value according to local\n      configuration.  The\
    \ maximum TTL value supported in an NSH is 63,\n      and so the practical limit\
    \ here may also be 63.\n   o  When an SFF receives a packet from any component\
    \ of the SFC system\n      (classifier, SFI, or another SFF), it MUST discard\
    \ any packets\n      with TTL set to zero.  It SHOULD log such occurrences but\
    \ MUST\n      apply rate limiting to any such logs.\n   o  An SFF MUST decrement\
    \ the TTL by one each time it performs a\n      lookup to forward a packet to\
    \ the next SFF.\n   o  If an SFF decrements the TTL to zero, it MUST NOT send\
    \ the packet\n      and MUST discard the packet.  It SHOULD log such occurrences\
    \ but\n      MUST apply rate limiting to any such logs.\n   o  SFIs MUST ignore\
    \ the TTL but MUST mirror it back to the SFF\n      unmodified along with the\
    \ SI (which may have been changed by local\n      reclassification).\n   o  If\
    \ a classifier along the SFP makes any change to the intended\n      path of the\
    \ packet, including for looping, jumping, or branching\n      (see [BGP-NSH-SFC]),\
    \ it MUST NOT change the SI TTL of the packet.\n      In particular, each component\
    \ of the SFC system MUST NOT increase\n      the SI TTL value; otherwise, loops\
    \ may go undetected.\n"
- title: 7.  MPLS Label Stacking
  contents:
  - "7.  MPLS Label Stacking\n   This section describes how the basic unit of MPLS\
    \ label stack for SFC\n   (introduced in Section 5) is used when MPLS label stacking\
    \ is used to\n   carry information about the SFP and SFs to be executed.  The\
    \ use case\n   scenarios for this approach are introduced in Section 4.\n   As\
    \ can be seen in Figure 3, the top of the label stack comprises the\n   labels\
    \ necessary to deliver the packet over the MPLS tunnel between\n   SFFs.  Any\
    \ MPLS encapsulation may be used.\n       -------------------\n      ~   Tunnel\
    \ Labels   ~\n      +-------------------+\n      ~     Optional      ~\n     \
    \ ~   Entropy Label   ~\n      +-------------------+ - - -\n      | SFC Context\
    \ Label |\n      +-------------------+  Basic unit of MPLS label stack for SFC\n\
    \      |     SF Label      |\n      +-------------------+ - - -\n      | SFC Context\
    \ Label |\n      +-------------------+  Basic unit of MPLS label stack for SFC\n\
    \      |     SF Label      |\n      +-------------------+ - - -\n      ~     \
    \              ~\n      +-------------------+ - - -\n      | SFC Context Label\
    \ |\n      +-------------------+  Basic unit of MPLS label stack for SFC\n   \
    \   |     SF Label      |\n      +-------------------+ - - -\n      |        \
    \           |\n      ~      Payload      ~\n      |                   |\n    \
    \   -------------------\n           Figure 3: The MPLS SFC Label Stack for Label\
    \ Stacking\n   An entropy label [RFC6790] may also be present, as described in\n\
    \   Section 11.\n   Under these labels comes one or more instances of the basic\
    \ unit of\n   MPLS label stack for SFC.  In addition to the interpretation of\
    \ the\n   fields of these label stack entries (provided in Section 5), the\n \
    \  following meanings are applied:\n   SFC Context Label:  The Label field of\
    \ the SFC Context Label stack\n      entry contains a label that delivers SFC\
    \ context.  This label\n      contains the SPI, encoded as a 20-bit integer using\
    \ the semantics\n      exactly as defined in [RFC8300].  Note that in this case\
    \ a system\n      using MPLS representation of the logical NSH MUST NOT assign\
    \ SPI\n      values greater than 2^20 - 1 or less than 16.  This label may also\n\
    \      be used to convey other SFC context-specific semantics, such as\n     \
    \ indicating how to interpret the SF Label or how to forward the\n      packet\
    \ to the node that offers the SF if so configured and\n      coordinated with\
    \ the controller that programs the labels for\n      the SFP.\n   SF Label:  The\
    \ Label field of the SF Label stack entry contains a\n      value that identifies\
    \ the next SFI to be actioned for the packet.\n      This label may be scoped\
    \ globally or within the context of the\n      preceding SFC Context Label and\
    \ comes from the range\n      16 ... 2^20 - 1.\n   TC:  The TC fields are as described\
    \ in Section 5.\n   S: The S bits are as described in Section 5.\n   TTL:  The\
    \ TTL fields in the SFC Context Label stack entry and in the\n      SF Label stack\
    \ entry SHOULD be set to 1 as stated in Section 5 but\n      MAY be set to larger\
    \ values if the label indicated a forwarding\n      operation towards the node\
    \ that hosts the SF.\n   The following processing rules apply to the Label fields:\n\
    \   o  When a classifier inserts a packet onto an SFP, it adds a stack\n     \
    \ comprising one or more instances of the basic unit of MPLS label\n      stack\
    \ for SFC.  Taken together, this stack defines the SFs to be\n      actioned and\
    \ so defines the SFP that the packet will traverse.\n   o  When a component of\
    \ the SFC system processes a packet, it uses the\n      top basic unit of label\
    \ stack for SFC to determine to which SFI to\n      next deliver the packet. \
    \ When an SFF receives a packet, it\n      examines the top basic unit of MPLS\
    \ label stack for SFC to\n      determine where to send the packet next.  If the\
    \ next recipient is\n      a local SFI, the SFF strips the basic unit of MPLS\
    \ label stack for\n      SFC before forwarding the packet.\n"
- title: 8.  Mixed-Mode Forwarding
  contents:
  - "8.  Mixed-Mode Forwarding\n   The previous sections describe homogeneous networks\
    \ where SFC\n   forwarding is either all label swapping or all label popping\n\
    \   (stacking).  This simplification helps to clarify the explanation of\n   the\
    \ mechanisms.\n   However, as described in Section 4.2, some use cases may use\
    \ label\n   swapping and stacking at the same time.  Furthermore, it is also\n\
    \   possible that different parts of the network utilize swapping or\n   popping\
    \ such that an end-to-end service chain has to utilize a\n   combination of both\
    \ techniques.  It is also worth noting that a\n   classifier may be content to\
    \ use an SFP as installed in the network\n   by a control plane or management\
    \ plane and so would use label\n   swapping, but that there may be a point in\
    \ the SFP where a choice of\n   SFIs can be made (perhaps for load balancing)\
    \ and where, in this\n   instance, the classifier wishes to exert control over\
    \ that choice by\n   use of a specific entry on the label stack as described in\n\
    \   Section 4.3.\n   When an SFF receives a packet containing an MPLS label stack,\
    \ it\n   checks from the context of the incoming interface, and from the SFP\n\
    \   indicated by the top label, whether it is processing an {SPI, SI}\n   label\
    \ pair for label swapping or a {context label, SFI index} label\n   pair for label\
    \ stacking.  It then selects the appropriate SFI to\n   which to send the packet.\
    \  When it receives the packet back from the\n   SFI, it has four cases to consider.\n\
    \   o  If the current hop requires an {SPI, SI} and the next hop requires\n  \
    \    an {SPI, SI}, it sets the SPI Label according to the SFP to be\n      traversed,\
    \ selects an instance of the SF to be executed at the\n      next hop, sets the\
    \ SI Label to the SI value of the next hop, and\n      tunnels the packet to the\
    \ SFF for that SFI.\n   o  If the current hop requires an {SPI, SI} and the next\
    \ hop requires\n      a {context label, SFI Label}, it pops the {SPI, SI} from\
    \ the top\n      of the MPLS label stack and tunnels the packet to the SFF\n \
    \     indicated by the context label.\n   o  If the current hop requires a {context\
    \ label, SFI Label}, it pops\n      the {context label, SFI Label} from the top\
    \ of the MPLS label\n      stack.\n      *  If the new top of the MPLS label stack\
    \ contains an {SPI, SI}\n         label pair, it selects an SFI to use at the\
    \ next hop and\n         tunnels the packet to the SFF for that SFI.\n      *\
    \  If the new top of the MPLS label stack contains a {context\n         label,\
    \ SFI Label}, it tunnels the packet to the SFF indicated\n         by the context\
    \ label.\n"
- title: 9.  A Note on Service Function Capabilities and SFC Proxies
  contents:
  - "9.  A Note on Service Function Capabilities and SFC Proxies\n   The concept of\
    \ an \"SFC proxy\" is introduced in [RFC7665].  An SFC\n   proxy is logically\
    \ located between an SFF and an SFI that is not\n   \"SFC aware\".  Such SFIs\
    \ are not capable of handling the SFC\n   encapsulation (whether that be NSH or\
    \ MPLS) and need the\n   encapsulation stripped from the packets they are to process.\
    \  In many\n   cases, legacy SFIs that were once deployed as \"bumps in the wire\"\
    \ fit\n   into this category until they have been upgraded to be SFC aware.\n\
    \   The job of an SFC proxy is to remove and then reimpose SFC\n   encapsulation\
    \ so that the SFF is able to process as though it was\n   communication with an\
    \ SFC-aware SFI, and so that the SFI is unaware\n   of the SFC encapsulation.\
    \  In this regard, the job of an SFC proxy is\n   no different when NSH encapsulation\
    \ is used and when MPLS\n   encapsulation is used as described in this document,\
    \ although (of\n   course) it is different encapsulation bytes that must be removed\
    \ and\n   reimposed.\n   It should be noted that the SFC proxy is a logical function.\
    \  It\n   could be implemented as a separate physical component on the path\n\
    \   from the SFF to the SFI, but it could be co-resident with the SFF or\n   it\
    \ could be a component of the SFI.  This is purely an implementation\n   choice.\n\
    \   Note also that the delivery of metadata (see Section 12) requires\n   specific\
    \ processing if an SFC proxy is in use.  This is also no\n   different when NSH\
    \ functionality or the MPLS encoding defined in this\n   document is in use, and\
    \ how it is handled will depend on how (or if)\n   each non-SFC-aware SFI can\
    \ receive metadata.\n"
- title: 10.  Control-Plane Considerations
  contents:
  - "10.  Control-Plane Considerations\n   In order that a packet may be forwarded\
    \ along an SFP, several\n   functional elements must be executed.\n   o  Discovery/advertisement\
    \ of SFIs.\n   o  Computation of the SFP.\n   o  Programming of classifiers.\n\
    \   o  Advertisement of forwarding instructions.\n   Various approaches may be\
    \ taken.  These include a fully centralized\n   model where SFFs report to a central\
    \ controller the SFIs that they\n   support, the central controller computes the\
    \ SFP and programs the\n   classifiers, and (if the label-swapping approach is\
    \ taken) the\n   central controller installs forwarding state in the SFFs that\
    \ lie on\n   the SFP.\n   Alternatively, a dynamic control plane may be used,\
    \ such as that\n   described in [BGP-NSH-SFC].  In this case, the SFFs use the\
    \ control\n   plane to advertise the SFIs that they support, a central controller\n\
    \   computes the SFP and programs the classifiers, and (if the\n   label-swapping\
    \ approach is taken) the central controller uses the\n   control plane to advertise\
    \ the SFPs so that SFFs that lie on the SFP\n   can install the necessary forwarding\
    \ state.\n"
- title: 11.  Use of the Entropy Label
  contents:
  - "11.  Use of the Entropy Label\n   Entropy is used in ECMP situations to ensure\
    \ that packets from the\n   same flow travel down the same path, thus avoiding\
    \ jitter or\n   reordering issues within a flow.\n   Entropy is often determined\
    \ by hashing on specific fields in a packet\n   header, such as the \"five-tuple\"\
    \ in the IP and transport headers.\n   However, when an MPLS label stack is present,\
    \ the depth of the stack\n   could be too large for some processors to correctly\
    \ determine the\n   entropy hash.  This problem is addressed by the inclusion\
    \ of an\n   entropy label as described in [RFC6790].\n   When entropy is desired\
    \ for packets as they are carried in MPLS\n   tunnels over the underlay network,\
    \ it is RECOMMENDED that an entropy\n   label be included in the label stack immediately\
    \ after the tunnel\n   labels and before the SFC Labels, as shown in Figures 2\
    \ and 3.\n   If an entropy label is present in an MPLS payload, it is RECOMMENDED\n\
    \   that the initial classifier use that value in an entropy label\n   inserted\
    \ in the label stack when the packet is forwarded (on the\n   first tunnel) to\
    \ the first SFF.  In this case, it is not necessary to\n   remove the entropy\
    \ label from the payload.\n"
- title: 12.  Metadata
  contents:
  - "12.  Metadata\n   Metadata is defined in [RFC7665] as providing \"the ability\
    \ to\n   exchange context information between classifiers and SFs, and among\n\
    \   SFs.\"  [RFC8300] defines how this context information can be directly\n \
    \  encoded in fields that form part of the NSH encapsulation.\n   Sections 12.1\
    \ and 12.2 describe how metadata is associated with user\n   data packets, and\
    \ how metadata may be exchanged between SFC nodes in\n   the network, when using\
    \ an MPLS encoding of the logical\n   representation of the NSH.\n   It should\
    \ be noted that the MPLS encoding is less functional than the\n   direct use of\
    \ the NSH.  Both methods support metadata that is\n   \"per-SFP\" or \"per-flow\"\
    \ (see [RFC8393] for definitions of these\n   terms), but \"per-packet\" metadata\
    \ (where the metadata must be carried\n   on each packet because it differs from\
    \ one packet to the next even on\n   the same flow or SFP) is only supported using\
    \ the NSH and not using\n   the mechanisms defined in this document.\n"
- title: 12.1.  Indicating Metadata in User Data Packets
  contents:
  - "12.1.  Indicating Metadata in User Data Packets\n   Metadata is achieved in the\
    \ MPLS realization of the logical NSH by\n   the use of an SFC Metadata Label,\
    \ which uses the extended\n   special-purpose label construct [RFC7274].  Thus,\
    \ three label stack\n   entries are present, as shown in Figure 4:\n   o  The\
    \ Extension Label (value 15).\n   o  An extended special-purpose label called\
    \ the Metadata Label\n      Indicator (MLI) (value 16).\n   o  The Metadata Label\
    \ (ML).\n                              ----------------\n                    \
    \         | Extension = 15 |\n                             +----------------+\n\
    \                             |      MLI       |\n                           \
    \  +----------------+\n                             | Metadata Label |\n     \
    \                         ----------------\n                   Figure 4: The MPLS\
    \ SFC Metadata Label\n   The Metadata Label value is an index into a table of\
    \ metadata that is\n   programmed into the network using in-band or out-of-band\
    \ mechanisms.\n   Out-of-band mechanisms potentially include management-plane\
    \ and\n   control-plane solutions (such as [BGP-NSH-SFC]) but are out of scope\n\
    \   for this document.  The in-band mechanism is described in\n   Section 12.2.\n\
    \   The SFC Metadata Label (as a set of three labels as indicated in\n   Figure\
    \ 4) may be present zero, one, or more times in an MPLS SFC\n   packet.  For MPLS\
    \ label swapping, the SFC Metadata Labels are placed\n   immediately after the\
    \ basic unit of MPLS label stack for SFC, as\n   shown in Figure 5.  For MPLS\
    \ label stacking, the SFC Metadata Labels\n   are placed at the bottom of the\
    \ label stack, as shown in Figure 6.\n                            ----------------\n\
    \                           ~ Tunnel Labels  ~\n                           +----------------+\n\
    \                           ~   Optional     ~\n                           ~ Entropy\
    \ Label  ~\n                           +----------------+\n                  \
    \         |   SPI Label    |\n                           +----------------+\n\
    \                           |   SI Label     |\n                           +----------------+\n\
    \                           | Extension = 15 |\n                           +----------------+\n\
    \                           |     MLI        |\n                           +----------------+\n\
    \                           | Metadata Label |\n                           +----------------+\n\
    \                           ~     Other      ~\n                           | \
    \   Metadata    |\n                           ~  Label Triples ~\n           \
    \                +----------------+\n                           |            \
    \    |\n                           ~    Payload     ~\n                      \
    \     |                |\n                            ----------------\n     \
    \      Figure 5: The MPLS SFC Label Stack for Label Swapping\n               \
    \             with Metadata Label\n                           -------------------\n\
    \                          ~   Tunnel Labels   ~\n                          +-------------------+\n\
    \                          ~     Optional      ~\n                          ~\
    \   Entropy Label   ~\n                          +-------------------+\n     \
    \                     | SFC Context Label |\n                          +-------------------+\n\
    \                          |     SF Label      |\n                          +-------------------+\n\
    \                          ~                   ~\n                          +-------------------+\n\
    \                          | SFC Context Label |\n                          +-------------------+\n\
    \                          |     SF Label      |\n                          +-------------------+\n\
    \                          |   Extension = 15  |\n                          +-------------------+\n\
    \                          |        MLI        |\n                          +-------------------+\n\
    \                          |  Metadata Label   |\n                          +-------------------+\n\
    \                          ~       Other       ~\n                          |\
    \      Metadata     |\n                          ~   Label Triples   ~\n     \
    \                     +-------------------+\n                          |     \
    \              |\n                          ~      Payload      ~\n          \
    \                |                   |\n                           -------------------\n\
    \           Figure 6: The MPLS SFC Label Stack for Label Stacking\n          \
    \                  with Metadata Label\n"
- title: 12.2.  In-Band Programming of Metadata
  contents:
  - "12.2.  In-Band Programming of Metadata\n   A mechanism for sending metadata associated\
    \ with an SFP without a\n   payload packet is described in [RFC8393].  The same\
    \ approach can be\n   used in an MPLS network where the NSH is logically represented\
    \ by an\n   MPLS label stack.\n   The packet header is formed exactly as previously\
    \ described in this\n   document so that the packet will follow the SFP through\
    \ the SFC\n   network.  However, instead of payload data, metadata is included\n\
    \   after the bottom of the MPLS label stack.  An extended\n   special-purpose\
    \ label is used to indicate that the metadata is\n   present.  Thus, three label\
    \ stack entries are present:\n   o  The Extension Label (value 15).\n   o  An\
    \ extended special-purpose label called the Metadata Present\n      Indicator\
    \ (MPI) (value 17).\n   o  The Metadata Label (ML) that is associated with this\
    \ metadata on\n      this SFP and can be used to indicate the use of the metadata\
    \ as\n      described in Section 12.\n   The MPI, if present, is placed immediately\
    \ after the last basic unit\n   of MPLS label stack for SFC.  The resultant label\
    \ stacks are shown in\n   Figure 7 for the MPLS label-swapping case and Figure\
    \ 8 for the MPLS\n   label-stacking case.\n                              ---------------\n\
    \                             ~ Tunnel Labels ~\n                            \
    \ +---------------+\n                             ~   Optional    ~\n        \
    \                     ~ Entropy Label ~\n                             +---------------+\n\
    \                             |   SPI Label   |\n                            \
    \ +---------------+\n                             |   SI Label    |\n        \
    \                     +---------------+\n                             | Extension\
    \ = 15|\n                             +---------------+\n                    \
    \         |     MPI       |\n                             +---------------+\n\
    \                             | Metadata Label|\n                            \
    \ +---------------+\n                             |               |\n        \
    \                     ~    Metadata   ~\n                             |      \
    \         |\n                              ---------------\n           Figure\
    \ 7: The MPLS SFC Label Stack for Label Swapping\n                           \
    \  Carrying Metadata\n                            -------------------\n      \
    \                     ~   Tunnel Labels   ~\n                           +-------------------+\n\
    \                           ~     Optional      ~\n                          \
    \ ~   Entropy Label   ~\n                           +-------------------+\n  \
    \                         | SFC Context Label |\n                           +-------------------+\n\
    \                           |     SF Label      |\n                          \
    \ +-------------------+\n                           | SFC Context Label |\n  \
    \                         +-------------------+\n                           |\
    \     SF Label      |\n                           +-------------------+\n    \
    \                       ~                   ~\n                           +-------------------+\n\
    \                           | SFC Context Label |\n                          \
    \ +-------------------+\n                           |     SF Label      |\n  \
    \                         +-------------------+\n                           |\
    \   Extension = 15  |\n                           +-------------------+\n    \
    \                       |        MPI        |\n                           +-------------------+\n\
    \                           |  Metadata Label   |\n                          \
    \ +-------------------+\n                           |                   |\n  \
    \                         ~    Metadata       ~\n                           |\
    \                   |\n                            -------------------\n     \
    \      Figure 8: The MPLS SFC Label Stack for Label Stacking\n               \
    \              Carrying Metadata\n   In both cases, the metadata is formatted\
    \ as a TLV, as shown in\n   Figure 9.\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Length              |        Metadata Type          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                         Metadata                              ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 9: The Metadata TLV\n   The fields of this TLV\
    \ are interpreted as follows:\n   Length:  The length of the metadata carried\
    \ in the Metadata field in\n      octets, not including any padding.\n   Metadata\
    \ Type:  The type of the metadata present.  Values for this\n      field are taken\
    \ from the \"NSH MD Types\" registry maintained by\n      IANA and defined in\
    \ [RFC8300] and encoded with the most\n      significant bit first.\n   Metadata:\
    \  The actual metadata formatted as described in whatever\n      document defines\
    \ the metadata.  This field is end-padded with zero\n      to 3 octets of zeroes\
    \ to take it up to a 4-octet boundary.\n"
- title: 12.2.1.  Loss of In-Band Metadata
  contents:
  - "12.2.1.  Loss of In-Band Metadata\n   Note that in-band exchange of metadata\
    \ is vulnerable to packet loss.\n   This is both a risk arising from network faults\
    \ and an attack\n   vulnerability.\n   If packets that arrive at an SFF use an\
    \ MLI that does not have an\n   entry in the metadata table, an alarm can be raised\
    \ and the packet\n   can be discarded or processed without the metadata according\
    \ to local\n   configuration.  This provides some long-term mitigation but is\
    \ not an\n   ideal solution.\n   Further mitigation of loss of metadata packets\
    \ can be achieved by\n   retransmitting them at a configurable interval.  This\
    \ is a relatively\n   cheap, but only partial, solution because there may still\
    \ be a window\n   during which the metadata has not been received.\n   The concern\
    \ of lost metadata may be particularly important when the\n   metadata applicable\
    \ to a specific MPI is being changed.  This could\n   result in out-of-date metadata\
    \ being applied to a packet.  If this is\n   a concern, it is RECOMMENDED that\
    \ a new MPI be used to install a new\n   entry in the metadata table, and the\
    \ packets in the flow should be\n   marked with the equivalent new MLI.\n   Finally,\
    \ if an application that requires metadata is sensitive to\n   this potential\
    \ loss or attack, it SHOULD NOT use in-band metadata\n   distribution but SHOULD\
    \ rely on control-plane or management-plane\n   mechanisms, because these approaches\
    \ can use a more sophisticated\n   protocol that includes confirmation of delivery\
    \ and can perform\n   verification or inspection of entries in the metadata table.\n"
- title: 13.  Worked Examples
  contents:
  - "13.  Worked Examples\n   This section reverts to the simplified descriptions\
    \ of networks that\n   rely wholly on label swapping or label stacking.  As described\
    \ in\n   Section 4, actual deployment scenarios may depend on the use of both\n\
    \   mechanisms and utilize a mixed mode as described in Section 8.\n   Consider\
    \ the simplistic MPLS SFC overlay network shown in Figure 10.\n   A packet is\
    \ classified for an SFP that will see it pass through two\n   SFs (SFa and SFb)\
    \ that are accessed through two SFFs (SFFa and SFFb,\n   respectively).  The packet\
    \ is ultimately delivered to the\n   destination, D.\n            +---------------------------------------------------+\n\
    \            |                   MPLS SFC Network                |\n         \
    \   |                                                   |\n            |     \
    \       +---------+       +---------+          |\n            |            | \
    \  SFa   |       |   SFb   |          |\n            |            +----+----+\
    \       +----+----+          |\n            |               ^ | |            \
    \ ^ | |             |\n            |            (2)| | |(3)       (5)| | |(6)\
    \          |\n            |       (1)     | | V     (4)     | | V    (7)     \
    \ |\n       +----------+ ---> +----+----+ ----> +----+----+ ---> +-------+\n \
    \      |Classifier+------+  SFFa   +-------+  SFFb   +------+   D   |\n      \
    \ +----------+      +---------+       +---------+      +-------+\n           \
    \ |                                                   |\n            +---------------------------------------------------+\n\
    \          Figure 10: Service Function Chaining in an MPLS Network\n   Let us\
    \ assume that the SFP is computed and assigned an SPI value of\n   239.  The forwarding\
    \ details of the SFP are distributed (perhaps\n   using the mechanisms of [BGP-NSH-SFC])\
    \ so that the SFFs are\n   programmed with the necessary forwarding instructions.\n\
    \   The packet progresses as follows:\n   1.  The classifier assigns the packet\
    \ to the SFP and imposes two\n       label stack entries comprising a single basic\
    \ unit of MPLS SFC\n       representation:\n       *  The higher label stack entry\
    \ contains a label carrying the SPI\n          value of 239.\n       *  The lower\
    \ label stack entry contains a label carrying the SI\n          value of 255.\n\
    \       Further labels may be imposed to tunnel the packet from the\n       classifier\
    \ to SFFa.\n   2.  When the packet arrives at SFFa, SFFa strips any labels\n \
    \      associated with the tunnel that runs from the classifier to SFFa.\n   \
    \    SFFa examines the top labels and matches the SPI/SI to identify\n       that\
    \ the packet should be forwarded to SFa.  The packet is\n       forwarded to SFa\
    \ unmodified.\n   3.  SFa performs its designated function and returns the packet\n\
    \       to SFFa.\n   4.  SFFa modifies the SI in the lower label stack entry (to\
    \ 254) and\n       uses the SPI/SI to look up the forwarding instructions.  It\
    \ sends\n       the packet with two label stack entries:\n       *  The higher\
    \ label stack entry contains a label carrying the SPI\n          value of 239.\n\
    \       *  The lower label stack entry contains a label carrying the SI\n    \
    \      value of 254.\n       Further labels may be imposed to tunnel the packet\
    \ from SFFa\n       to SFFb.\n   5.  When the packet arrives at SFFb, SFFb strips\
    \ any labels\n       associated with the tunnel from SFFa.  SFFb examines the\
    \ top\n       labels and matches the SPI/SI to identify that the packet should\n\
    \       be forwarded to SFb.  The packet is forwarded to SFb unmodified.\n   6.\
    \  SFb performs its designated function and returns the packet\n       to SFFb.\n\
    \   7.  SFFb modifies the SI in the lower label stack entry (to 253) and\n   \
    \    uses the SPI/SI to look up the forwarding instructions.  It\n       determines\
    \ that it is the last SFF in the SFP, so it strips the\n       two SFC Label stack\
    \ entries and forwards the payload toward D\n       using the payload protocol.\n\
    \   Alternatively, consider the MPLS SFC overlay network shown in\n   Figure 11.\
    \  A packet is classified for an SFP that will see it pass\n   through two SFs\
    \ (SFx and SFy) that are accessed through two SFFs\n   (SFFx and SFFy, respectively).\
    \  The packet is ultimately delivered to\n   the destination, D.\n           +---------------------------------------------------+\n\
    \           |                   MPLS SFC Network                |\n          \
    \ |                                                   |\n           |        \
    \    +---------+       +---------+          |\n           |            |   SFx\
    \   |       |   SFy   |          |\n           |            +----+----+      \
    \ +----+----+          |\n           |               ^ | |             ^ | | \
    \            |\n           |            (2)| | |(3)       (5)| | |(6)        \
    \  |\n           |       (1)     | | V     (4)     | | V    (7)      |\n     \
    \ +----------+ ---> +----+----+ ----> +----+----+ ---> +-------+\n      |Classifier+------+\
    \  SFFx   +-------+  SFFy   +------+   D   |\n      +----------+      +---------+\
    \       +---------+      +-------+\n           |                             \
    \                      |\n           +---------------------------------------------------+\n\
    \      Figure 11: Service Function Chaining Using MPLS Label Stacking\n   Let\
    \ us assume that the SFP is computed and assigned an SPI value of\n   239.  However,\
    \ the forwarding state for the SFP is not distributed\n   and installed in the\
    \ network.  Instead, it will be attached to the\n   individual packets using the\
    \ MPLS label stack.\n   The packet progresses as follows:\n   1.  The classifier\
    \ assigns the packet to the SFP and imposes two\n       basic units of MPLS SFC\
    \ representation to describe the full SFP:\n       *  The top basic unit comprises\
    \ two label stack entries as\n          follows:\n          +  The higher label\
    \ stack entry contains a label carrying the\n             SFC context.\n     \
    \     +  The lower label stack entry contains a label carrying the\n         \
    \    SF indicator for SFx.\n       *  The lower basic unit comprises two label\
    \ stack entries as\n          follows:\n          +  The higher label stack entry\
    \ contains a label carrying the\n             SFC context.\n          +  The lower\
    \ label stack entry contains a label carrying the\n             SF indicator for\
    \ SFy.\n       Further labels may be imposed to tunnel the packet from the\n \
    \      classifier to SFFx.\n   2.  When the packet arrives at SFFx, SFFx strips\
    \ any labels\n       associated with the tunnel from the classifier.  SFFx examines\n\
    \       the top labels and matches the context/SF values to identify that\n  \
    \     the packet should be forwarded to SFx.  The packet is forwarded\n      \
    \ to SFx unmodified.\n   3.  SFx performs its designated function and returns\
    \ the packet\n       to SFFx.\n   4.  SFFx strips the top basic unit of MPLS SFC\
    \ representation,\n       revealing the next basic unit.  It then uses the revealed\n\
    \       context/SF values to determine how to route the packet to the\n      \
    \ next SFF, SFFy.  It sends the packet with just one basic unit of\n       MPLS\
    \ SFC representation comprising two label stack entries:\n       *  The higher\
    \ label stack entry contains a label carrying the SFC\n          context.\n  \
    \     *  The lower label stack entry contains a label carrying the SF\n      \
    \    indicator for SFy.\n       Further labels may be imposed to tunnel the packet\
    \ from SFFx\n       to SFFy.\n   5.  When the packet arrives at SFFy, SFFy strips\
    \ any labels\n       associated with the tunnel from SFFx.  SFFy examines the\
    \ top\n       labels and matches the context/SF values to identify that the\n\
    \       packet should be forwarded to SFy.  The packet is forwarded to\n     \
    \  SFy unmodified.\n   6.  SFy performs its designated function and returns the\
    \ packet\n       to SFFy.\n   7.  SFFy strips the top basic unit of MPLS SFC representation,\n\
    \       revealing the payload packet.  It forwards the payload toward D\n    \
    \   using the payload protocol.\n"
- title: 14.  Implementation Notes
  contents:
  - "14.  Implementation Notes\n   It is not the job of an IETF specification to describe\
    \ the internals\n   of an implementation, except where that directly impacts upon\
    \ the\n   bits on the wire that change the likelihood of interoperability or\n\
    \   where the availability of configuration or security options directly\n   affects\
    \ the utility of an implementation.\n   However, in view of the objective of this\
    \ document to acknowledge\n   that there may be a need for an interim deployment\
    \ of SFC\n   functionality in brownfield MPLS networks, this section provides\
    \ some\n   observations about how an SFF might utilize MPLS features that are\n\
    \   available in existing routers.  This section is not intended to be\n   definitive\
    \ or technically complete; rather, it is indicative.\n   Consider the mechanism\
    \ used to indicate to which Virtual Routing and\n   Forwarding (VRF) system an\
    \ incoming MPLS packet should be routed in a\n   Layer 3 Virtual Private Network\
    \ (L3VPN) [RFC4364].  In this case, the\n   top MPLS label is an indicator of\
    \ the VRF system that is to be used\n   to route the payload.\n   A similar approach\
    \ can be taken with the label-swapping SFC technique\n   described in Section\
    \ 6 such that the SFC Context Label identifies a\n   routing table specific to\
    \ the SFP.  The SF Label can be looked up in\n   the context of this routing table\
    \ to determine to which SF to direct\n   the packet and how to forward it to the\
    \ next SFF.\n   Advanced features (such as metadata) are not inspected by SFFs.\
    \  The\n   packets are passed to SFIs that are MPLS-SFC aware or to SFC proxies,\n\
    \   and those components are responsible for handling all metadata\n   issues.\n\
    \   Of course, an actual implementation might make considerable\n   optimizations\
    \ on this approach, but this section should provide hints\n   about how MPLS-based\
    \ SFC might be achieved with relatively small\n   modifications to deployed MPLS\
    \ devices.\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   Discussion of the security properties of SFC\
    \ networks can be found in\n   [RFC7665].  Further security discussion for the\
    \ NSH and its use is\n   provided in [RFC8300].  Those documents provide analysis\
    \ and present\n   a set of requirements and recommendations for security, and\
    \ the\n   normative security requirements from those documents apply to this\n\
    \   specification.  However, it should be noted that those documents do\n   not\
    \ describe any mechanisms for securing NSH systems.\n   It is fundamental to the\
    \ SFC design that the classifier is a fully\n   trusted element.  That is, the\
    \ classification decision process is not\n   visible to the other elements, and\
    \ its output is treated as accurate.\n   As such, the classifier has responsibility\
    \ for determining the\n   processing that the packet will be subject to, including,\
    \ for\n   example, firewall functions.  It is also fundamental to the MPLS\n \
    \  design that packets are routed through the network using the path\n   specified\
    \ by the node imposing the labels and that the labels are\n   swapped or popped\
    \ correctly.  Where an SF is not encapsulation aware,\n   the encapsulation may\
    \ be stripped by an SFC proxy such that a packet\n   may exist as a native packet\
    \ (perhaps IP) on the path between the SFC\n   proxy and the SF; however, this\
    \ is an intrinsic part of the SFC\n   design, which needs to define how a packet\
    \ is protected in that\n   environment.\n   SFC components are configured and\
    \ enabled through a management system\n   or a control plane.  This document does\
    \ not make any assumptions\n   about what mechanisms are used.  Deployments should,\
    \ however, be\n   aware that vulnerabilities in the management plane or control\
    \ plane\n   of an SFC system imply vulnerabilities in the whole SFC system.\n\
    \   Thus, control-plane solutions (such as [BGP-NSH-SFC]) and management-\n  \
    \ plane mechanisms must include security measures that can be enabled\n   by operators\
    \ to protect their SFC systems.\n   An analysis of the security of MPLS systems\
    \ is provided in [RFC5920],\n   which also notes that the MPLS forwarding plane\
    \ has no built-in\n   security mechanisms.  Some proposals to add encryption to\
    \ the MPLS\n   forwarding plane have been suggested [MPLS-Opp-Sec], but no\n \
    \  mechanisms have been agreed upon at the time of publication of this\n   document.\
    \  Additionally, MPLS does not provide any cryptographic\n   integrity protection\
    \ on the MPLS headers.  That means that procedures\n   described in this document\
    \ rely on three basic principles:\n   o  The MPLS network is often considered\
    \ to be a closed network such\n      that insertion, modification, or inspection\
    \ of packets by an\n      outside party is not possible.  MPLS networks are operated\
    \ with\n      closed boundaries so that MPLS-encapsulated packets are not\n  \
    \    admitted to the network, and MPLS headers are stripped before\n      packets\
    \ are forwarded from the network.  This is particularly\n      pertinent in the\
    \ SFC context because [RFC7665] notes that \"The\n      architecture described\
    \ herein is assumed to be applicable to a\n      single network administrative\
    \ domain.\"  Furthermore, [RFC8300]\n      states that packets originating outside\
    \ the SFC-enabled domain\n      MUST be dropped if they contain an NSH and packets\
    \ exiting the\n      SFC-enabled domain MUST be dropped if they contain an NSH.\
    \  These\n      constraints apply equally to the use of MPLS to encode a logical\n\
    \      representation of the NSH.\n   o  The underlying transport mechanisms (such\
    \ as Ethernet) between\n      adjacent MPLS nodes may offer security mechanisms\
    \ that can be used\n      to defend packets \"on the wire\".\n   o  The SFC-capable\
    \ devices participating in an SFC system are\n      responsible for verifying\
    \ and protecting payload packets and their\n      contents as well as providing\
    \ other security capabilities that\n      might be required in the particular\
    \ system.\n   Additionally, where a tunnel is used to link two non-MPLS domains,\n\
    \   the tunnel design needs to specify how the tunnel is secured.\n   Thus, this\
    \ design relies on the component underlying technologies to\n   address the potential\
    \ security vulnerabilities, and it documents the\n   necessary protections (or\
    \ risk of their absence) above.  It does not\n   include any native security mechanisms\
    \ in-band with the MPLS encoding\n   of the NSH functionality.\n   Note that configuration\
    \ elements of this system (such as the\n   programming of the table of metadata;\
    \ see Section 12) must also be\n   adequately secured, although such mechanisms\
    \ are not in scope for\n   this protocol specification.\n   No known new security\
    \ vulnerabilities over the SFC architecture\n   [RFC7665] and the NSH specification\
    \ [RFC8300] are introduced by this\n   design, but if issues are discovered in\
    \ the future, it is expected\n   that they will be addressed through modifications\
    \ to control/\n   management components of any solution or through changes to\
    \ the\n   underlying technology.\n"
- title: 16.  IANA Considerations
  contents:
  - "16.  IANA Considerations\n   IANA has made allocations from the \"Extended Special-Purpose\
    \ MPLS\n   Label Values\" subregistry of the \"Special-Purpose Multiprotocol Label\n\
    \   Switching (MPLS) Label Values\" registry as follows:\n      Value  | Description\
    \                       | Reference\n      -------+-----------------------------------+--------------\n\
    \       16    | Metadata Label Indicator (MLI)    | RFC 8595\n       17    | Metadata\
    \ Present Indicator (MPI)  | RFC 8595\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6790]  Kompella, K., Drake, J., Amante, S., Henderickx, W., and\n    \
    \          L. Yong, \"The Use of Entropy Labels in MPLS Forwarding\",\n      \
    \        RFC 6790, DOI 10.17487/RFC6790, November 2012,\n              <https://www.rfc-editor.org/info/rfc6790>.\n\
    \   [RFC7274]  Kompella, K., Andersson, L., and A. Farrel, \"Allocating\n    \
    \          and Retiring Special-Purpose MPLS Labels\", RFC 7274,\n           \
    \   DOI 10.17487/RFC7274, June 2014,\n              <https://www.rfc-editor.org/info/rfc7274>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8300]\
    \  Quinn, P., Ed., Elzur, U., Ed., and C. Pignataro, Ed.,\n              \"Network\
    \ Service Header (NSH)\", RFC 8300,\n              DOI 10.17487/RFC8300, January\
    \ 2018,\n              <https://www.rfc-editor.org/info/rfc8300>.\n   [RFC8393]\
    \  Farrel, A. and J. Drake, \"Operating the Network Service\n              Header\
    \ (NSH) with Next Protocol \"None\"\", RFC 8393,\n              DOI 10.17487/RFC8393,\
    \ May 2018,\n              <https://www.rfc-editor.org/info/rfc8393>.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [BGP-NSH-SFC]\n              Farrel, A., Drake,\
    \ J., Rosen, E., Uttaro, J., and L.\n              Jalil, \"BGP Control Plane\
    \ for NSH SFC\", Work in Progress,\n              draft-ietf-bess-nsh-bgp-control-plane-11,\
    \ May 2019.\n   [MPLS-Opp-Sec]\n              Farrel, A. and S. Farrell, \"Opportunistic\
    \ Security in\n              MPLS Networks\", Work in Progress,\n            \
    \  draft-ietf-mpls-opportunistic-encrypt-03, March 2017.\n   [RFC3031]  Rosen,\
    \ E., Viswanathan, A., and R. Callon, \"Multiprotocol\n              Label Switching\
    \ Architecture\", RFC 3031,\n              DOI 10.17487/RFC3031, January 2001,\n\
    \              <https://www.rfc-editor.org/info/rfc3031>.\n   [RFC4364]  Rosen,\
    \ E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks (VPNs)\"\
    , RFC 4364, DOI 10.17487/RFC4364,\n              February 2006, <https://www.rfc-editor.org/info/rfc4364>.\n\
    \   [RFC5920]  Fang, L., Ed., \"Security Framework for MPLS and GMPLS\n      \
    \        Networks\", RFC 5920, DOI 10.17487/RFC5920, July 2010,\n            \
    \  <https://www.rfc-editor.org/info/rfc5920>.\n   [RFC7665]  Halpern, J., Ed.\
    \ and C. Pignataro, Ed., \"Service Function\n              Chaining (SFC) Architecture\"\
    , RFC 7665,\n              DOI 10.17487/RFC7665, October 2015,\n             \
    \ <https://www.rfc-editor.org/info/rfc7665>.\n   [RFC8402]  Filsfils, C., Ed.,\
    \ Previdi, S., Ed., Ginsberg, L.,\n              Decraene, B., Litkowski, S.,\
    \ and R. Shakir, \"Segment\n              Routing Architecture\", RFC 8402, DOI\
    \ 10.17487/RFC8402,\n              July 2018, <https://www.rfc-editor.org/info/rfc8402>.\n\
    \   [RFC8459]  Dolson, D., Homma, S., Lopez, D., and M. Boucadair,\n         \
    \     \"Hierarchical Service Function Chaining (hSFC)\", RFC 8459,\n         \
    \     DOI 10.17487/RFC8459, September 2018,\n              <https://www.rfc-editor.org/info/rfc8459>.\n\
    \   [SR-Srv-Prog]\n              Clad, F., Ed., Xu, X., Ed., Filsfils, C., Bernier,\
    \ D., Li,\n              C., Decraene, B., Ma, S., Yadlapalli, C., Henderickx,\
    \ W.,\n              and S. Salsano, \"Service Programming with Segment\n    \
    \          Routing\", Work in Progress,\n              draft-xuclad-spring-sr-service-programming-02,\
    \ April 2019.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document derives ideas and text from [BGP-NSH-SFC].\
    \  The authors\n   are grateful to all those who contributed to the discussions\
    \ that led\n   to that work: Loa Andersson, Andrew G. Malis, Alexander (Sasha)\n\
    \   Vainshtein, Joel Halpern, Tony Przygienda, Stuart Mackie, Keyur\n   Patel,\
    \ and Jim Guichard.  Loa Andersson provided helpful review\n   comments.\n   Thanks\
    \ to Loa Andersson, Lizhong Jin, Matthew Bocci, Joel Halpern,\n   and Mach Chen\
    \ for reviews of this text.  Thanks to Russ Mundy for his\n   Security Directorate\
    \ review and to S Moonesamy for useful\n   discussions.  Thanks also to Benjamin\
    \ Kaduk, Alissa Cooper, Eric\n   Rescorla, Mirja Kuehlewind, Alvaro Retana, and\
    \ Martin Vigoureux for\n   comprehensive reviews during IESG evaluation.\n   The\
    \ authors would like to be able to thank the authors of\n   [SR-Srv-Prog] and\
    \ [RFC8402] whose original work on service chaining\n   and the identification\
    \ of services using Segment Identifiers (SIDs),\n   and conversation with whom,\
    \ helped clarify the application of SR-MPLS\n   to SFC.\n   Particular thanks\
    \ to Loa Andersson for conversations and advice about\n   working group process.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following individual contributed text to this document:\n\
    \      Andrew G. Malis\n      Email: agmalis@gmail.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adrian Farrel\n   Old Dog Consulting\n   Email: adrian@olddog.co.uk\n\
    \   Stewart Bryant\n   Futurewei\n   Email: stewart.bryant@gmail.com\n   John\
    \ Drake\n   Juniper Networks\n   Email: jdrake@juniper.net\n"
