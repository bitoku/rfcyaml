- title: __initial_text__
  contents:
  - ''
- title: A Mechanism to Measure the Routing Metrics along a Point-to-Point Route
  contents:
  - "A Mechanism to Measure the Routing Metrics along a Point-to-Point Route\n   \
    \                 in a Low-Power and Lossy Network\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a mechanism that enables a Routing Protocol\n\
    \   for Low-power and Lossy Networks (RPL) router to measure the\n   aggregated\
    \ values of given routing metrics along an existing route\n   towards another\
    \ RPL router, thereby allowing the router to decide if\n   it wants to initiate\
    \ the discovery of a better route.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6998.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................5\n  \
    \ 2. Overview ........................................................6\n   3.\
    \ The Measurement Object (MO) .....................................7\n      3.1.\
    \ Format of the Base MO ......................................8\n      3.2. Secure\
    \ MO .................................................12\n   4. Originating a\
    \ Measurement Request ..............................13\n      4.1. When Measuring\
    \ a Hop-by-Hop Route with a Global\n           RPLInstanceID .............................................14\n\
    \      4.2. When Measuring a Hop-by-Hop Route with a Local\n           RPLInstanceID\
    \ with Route Accumulation Off .................15\n      4.3. When Measuring a\
    \ Hop-by-Hop Route with a Local\n           RPLInstanceID with Route Accumulation\
    \ On ..................16\n      4.4. When Measuring a Source Route .............................17\n\
    \   5. Processing a Measurement Request at an Intermediate Point ......19\n  \
    \    5.1. When Measuring a Hop-by-Hop Route with a Global\n           RPLInstanceID\
    \ .............................................19\n      5.2. When Measuring a\
    \ Hop-by-Hop Route with a Local\n           RPLInstanceID with Route Accumulation\
    \ Off .................21\n      5.3. When Measuring a Hop-by-Hop Route with a\
    \ Local\n           RPLInstanceID with Route Accumulation On ..................21\n\
    \      5.4. When Measuring a Source Route .............................22\n  \
    \    5.5. Final Processing ..........................................23\n   6.\
    \ Processing a Measurement Request at the End Point ..............23\n      6.1.\
    \ Generating the Measurement Reply ..........................24\n   7. Processing\
    \ a Measurement Reply at the Start Point ..............25\n   8. Security Considerations\
    \ ........................................25\n   9. IANA Considerations ............................................27\n\
    \   10. Acknowledgements ..............................................27\n  \
    \ 11. References ....................................................28\n    \
    \  11.1. Normative References .....................................28\n      11.2.\
    \ Informative References ...................................28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Point-to-point (P2P) communication between arbitrary routers\
    \ in a\n   Low-power and Lossy Network (LLN) is a key requirement for many home\n\
    \   and commercial building automation applications [RFC5826] [RFC5867].\n   The\
    \ IPv6 Routing Protocol for LLNs (RPL) [RFC6550] constrains the LLN\n   topology\
    \ to a Directed Acyclic Graph (DAG) built to optimize the\n   routing costs to\
    \ reach the DAG's root.  The P2P routing\n   functionality, available under RPL,\
    \ has the following key\n   limitations:\n   o  The P2P routes are restricted\
    \ to use the DAG links only.  Such P2P\n      routes may potentially be suboptimal\
    \ and may lead to traffic\n      congestion near the DAG root.\n   o  RPL is a\
    \ proactive routing protocol and hence requires that all\n      P2P routes be\
    \ established ahead of the time they are used.  Many\n      LLN applications require\
    \ the ability to establish P2P routes \"on\n      demand\".\n   To ameliorate\
    \ situations where the core RPL's P2P routing\n   functionality does not meet\
    \ an application's requirements, [RFC6997]\n   describes P2P-RPL, an extension\
    \ to core RPL.  P2P-RPL provides a\n   reactive mechanism to discover P2P routes\
    \ that meet the specified\n   routing constraints [RFC6551].  In some cases, the\
    \ application's\n   requirements or the LLN's topological features allow a router\
    \ to\n   infer these routing constraints implicitly.  For example, the\n   application\
    \ may require that the end-to-end loss rate and/or latency\n   along the route\
    \ be below certain thresholds, or the LLN topology may\n   be such that a router\
    \ can safely assume that its destination is less\n   than a certain number of\
    \ hops away from itself.\n   When the existing routes are deemed unsatisfactory\
    \ but the router\n   does not implicitly know the routing constraints to be used\
    \ in\n   P2P-RPL route discovery, it may be necessary for the router to\n   measure\
    \ the aggregated values of the routing metrics along the\n   existing route. \
    \ This knowledge will allow the router to frame\n   reasonable routing constraints\
    \ to discover a better route using\n   P2P-RPL.  For example, if the router determines\
    \ the aggregate ETX\n   (expected transmission count) [RFC6551] along an existing\
    \ route to be\n   \"x\", it can use \"ETX < x*y\", where y is a certain fraction,\
    \ as the\n   routing constraint for use in P2P-RPL route discovery.  Note that\
    \ it\n   is important that the routing constraints not be overly strict;\n   otherwise,\
    \ the P2P-RPL route discovery may fail even though a route\n   exists that is\
    \ much better than the one currently being used.\n   This document specifies a\
    \ mechanism that enables a RPL router to\n   measure the aggregated values of\
    \ the routing metrics along an\n   existing route to another RPL router in an\
    \ LLN, thereby allowing the\n   router to decide if it wants to discover a better\
    \ route using P2P-RPL\n   and determine the routing constraints to be used for\
    \ this purpose.\n   Thus, the utility of this mechanism is dependent on the existence\
    \ of\n   P2P-RPL [RFC6997].  The hope is that experiments with P2P-RPL and the\n\
    \   mechanism defined in this document will result in feedback on the\n   utility\
    \ and benefits of this document, so that a Standards Track\n   version of this\
    \ document can then be developed.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   Additionally, this document uses terminology\
    \ from [RFC6550],\n   [RFC6554], and [RFC6997].  Further terminology may be found\
    \ in\n   [ROLL-TERMS].  This document defines the following terms:\n   Start Point:\
    \  The RPL router that initiates the measurement process\n      defined in this\
    \ document and that is the start point of the P2P\n      route being measured.\n\
    \   End Point:  The RPL router at the end point of the P2P route being\n     \
    \ measured.\n   Intermediate Point:  A RPL router, other than the Start Point\
    \ and the\n      End Point, on the P2P route being measured.\n   The following\
    \ terms, as already defined in [RFC6997], are redefined\n   in this document in\
    \ the following manner:\n   Forward direction:  The direction from the Start Point\
    \ to the\n      End Point.\n   Reverse direction:  The direction from the End\
    \ Point to the\n      Start Point.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   The mechanism described in this document can be used by a Start\
    \ Point\n   in an LLN to measure the aggregated values of selected routing\n \
    \  metrics along a P2P route to an End Point within the LLN.  The route\n   is\
    \ measured in the Forward direction.  Such a route could be a Source\n   Route\
    \ or a Hop-by-hop Route established using RPL [RFC6550] or\n   P2P-RPL [RFC6997].\
    \  Such a route could also be a \"mixed\" route, with\n   the initial part consisting\
    \ of hop-by-hop ascent to the root of a\n   non-storing DAG [RFC6550] and the\
    \ final part consisting of a source-\n   routed descent to the End Point.  The\
    \ Start Point decides what\n   metrics to measure and sends a Measurement Request\
    \ message, carrying\n   the desired routing metric objects, along the route. \
    \ If a Source\n   Route is being measured, the Measurement Request carries the\
    \ route\n   inside an Address vector.  If a Hop-by-hop Route is being measured,\n\
    \   the Measurement Request identifies the route by its RPLInstanceID\n   [RFC6550]\
    \ (and, if the RPLInstanceID is a local value, the\n   Start Point's IPv6 address\
    \ associated with the route).  On receiving\n   a Measurement Request, an Intermediate\
    \ Point updates the routing\n   metric values inside the message and forwards\
    \ it to the next hop on\n   the route.  Thus, the Measurement Request accumulates\
    \ the values of\n   the routing metrics for the complete route as it travels towards\
    \ the\n   End Point.  Upon receiving the Measurement Request, the End Point\n\
    \   unicasts a Measurement Reply message, carrying the accumulated values\n  \
    \ of the routing metrics, back to the Start Point.  Optionally, the\n   Start\
    \ Point may allow an Intermediate Point to generate the\n   Measurement Reply\
    \ if the Intermediate Point already knows the\n   relevant routing metric values\
    \ along the rest of the route.\n   The Measurement Request may include an Address\
    \ vector that serves one\n   of the following functions:\n   o  To accumulate\
    \ a Source Route for the End Point's use: If a Hop-by-\n      hop Route with a\
    \ local RPLInstanceID is being measured, the\n      Start Point may require that\
    \ each Intermediate Point add its\n      global or unique-local IPv6 address to\
    \ an Address vector inside\n      the Measurement Request.  The Source Route,\
    \ thus accumulated, can\n      be used by the End Point to reach the Start Point.\
    \  In particular,\n      the End Point may use the accumulated Source Route to\
    \ send the\n      Measurement Reply back to the Start Point.  In this case, the\n\
    \      Start Point includes a suitably sized Address vector in the\n      Measurement\
    \ Request.  The size of the Address vector puts a hard\n      limit on the length\
    \ of the accumulated route.  An Intermediate\n      Point is not allowed to modify\
    \ the size of the Address vector and\n      must discard a received Measurement\
    \ Request if the Address vector\n      is not large enough to contain the complete\
    \ route.\n   o  To carry the Source Route being measured: The Start Point may\n\
    \      insert an Address vector inside the Measurement Request to carry\n    \
    \  the Source Route being measured.  Also, the root of a global\n      non-storing\
    \ DAG may insert an Address vector, carrying a Source\n      Route from itself\
    \ to the End Point, inside a Measurement Request\n      message if this message\
    \ had been traveling along this DAG so far.\n      This Source Route must consist\
    \ of global or unique-local IPv6\n      addresses.  An Intermediate Point is not\
    \ allowed to modify an\n      existing Address vector before forwarding the Measurement\
    \ Request\n      further.  In other words, an Intermediate Point must not modify\n\
    \      the Source Route along which the Measurement Request is currently\n   \
    \   traveling.\n"
- title: 3.  The Measurement Object (MO)
  contents:
  - "3.  The Measurement Object (MO)\n   This document defines two new RPL control\
    \ message types: the\n   Measurement Object (MO), with code 0x06; and the Secure\
    \ MO, with\n   code 0x86.  An MO serves as both Measurement Request and\n   Measurement\
    \ Reply.\n"
- title: 3.1.  Format of the Base MO
  contents:
  - "3.1.  Format of the Base MO\n      0                   1                   2\
    \                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | RPLInstanceID | Compr |T|H|A|R|B|I|   SeqNo   |  Num  | Index |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     .      \
    \                 Start Point Address                     .\n     .          \
    \                                                     .\n     |              \
    \                                                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ .                       End Point Address                       .\n     .  \
    \                                                             .\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ .                       Address[0..Num-1]                       .\n     .  \
    \                                                             .\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ .                   Metric Container Option(s)                  .\n     .  \
    \                                                             .\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 1: Format of the Base Measurement Object (MO)\n   The format\
    \ of a base MO is shown in Figure 1.  A base MO consists of\n   the following\
    \ fields:\n   o  RPLInstanceID: This field specifies the RPLInstanceID of the\n\
    \      Hop-by-hop Route along which the Measurement Request travels\n      (or\
    \ traveled initially until it switched over to a Source Route).\n   o  Compr:\
    \ In many LLN deployments, IPv6 addresses share a well-known,\n      common prefix.\
    \  In such cases, the common prefix can be elided\n      when specifying IPv6\
    \ addresses in the Start Point/End Point\n      Address fields and the Address\
    \ vector.  The \"Compr\" field, a 4-bit\n      unsigned integer, is set by the\
    \ Start Point to specify the number\n      of prefix octets that are elided from\
    \ the IPv6 addresses in\n      Start Point/End Point Address fields and the Address\
    \ vector.  The\n      Start Point will set the Compr value to zero if full IPv6\n\
    \      addresses are to be carried in the Start Point Address/End Point\n    \
    \  Address fields and the Address vector.\n   o  Type (T): This flag is set to\
    \ one if the MO represents a\n      Measurement Request.  The flag is set to zero\
    \ if the MO is a\n      Measurement Reply.\n   o  Hop-by-hop (H): The Start Point\
    \ MUST set this flag to one if (at\n      least the initial part of) the route\
    \ being measured is hop by hop.\n      In that case, the Hop-by-hop Route is identified\
    \ by the\n      RPLInstanceID, the End Point Address, and, if the RPLInstanceID\
    \ is\n      a local value, the Start Point Address fields inside the\n      Measurement\
    \ Request.  Here, the Start Point Address field is\n      required to be the same\
    \ as the DODAGID (the identifier of the\n      Destination-Oriented DAG (DODAG)\
    \ root) [RFC6550] of the route\n      being measured.  The Start Point MUST set\
    \ the H flag to zero if\n      the route being measured is a Source Route specified\
    \ in the\n      Address vector.  An Intermediate Point MUST set the H flag in\
    \ an\n      outgoing Measurement Request to the same value that it had in the\n\
    \      corresponding incoming Measurement Request, except under the\n      following\
    \ circumstance: If the Intermediate Point is the root of\n      the non-storing\
    \ global DAG along which the Measurement Request had\n      been traveling so\
    \ far and it intends to insert a Source Route\n      inside the Address vector\
    \ to direct the Measurement Request\n      towards the End Point, then it MUST\
    \ set the H flag to zero.\n   o  Accumulate Route (A): A value of 1 in this flag\
    \ indicates that the\n      Measurement Request is accumulating a Source Route\
    \ for use by the\n      End Point to send the Measurement Reply back to the Start\
    \ Point.\n      Route accumulation MUST NOT be used (i.e., this flag MUST NOT\
    \ be\n      set to one) inside a Measurement Request, unless it travels along\n\
    \      a Hop-by-hop Route represented by a local RPLInstanceID (i.e., H =\n  \
    \    1 and RPLInstanceID has a local value).  Route accumulation MAY be\n    \
    \  used (i.e., this flag MAY be set to one) if the Measurement\n      Request\
    \ is traveling along a Hop-by-hop Route with a local\n      RPLInstanceID.  In\
    \ this case, if the route accumulation is on, an\n      Intermediate Point adds\
    \ its unicast global/unique-local IPv6\n      address (after eliding Compr number\
    \ of prefix octets) to the\n      Address vector in the manner specified in Section\
    \ 5.3.  In other\n      cases, this flag MUST be set to zero on transmission and\
    \ ignored\n      on reception.  Route accumulation is not allowed when the\n \
    \     Measurement Request travels along a Hop-by-hop Route with a global\n   \
    \   RPLInstanceID, i.e., along a global DAG, because:\n      *  The DAG's root\
    \ may need the Address vector to insert a Source\n         Route to the End Point;\
    \ and\n      *  The End Point can presumably reach the Start Point along this\n\
    \         global DAG (identified by the RPLInstanceID field).\n   o  Reverse (R):\
    \ A value of 1 in this flag inside a Measurement\n      Request indicates that\
    \ the Address vector contains a complete\n      Source Route from the Start Point\
    \ to the End Point, which can be\n      used, after reversal, by the End Point\
    \ to send the Measurement\n      Reply back to the Start Point.  This flag MAY\
    \ be set to one inside\n      a Measurement Request only if a Source Route, from\
    \ the Start Point\n      to the End Point, is being measured.  Otherwise, this\
    \ flag MUST be\n      set to zero on transmission and ignored on reception.\n\
    \   o  Back Request (B): A value of 1 in this flag serves as a request to\n  \
    \    the End Point to send a Measurement Request towards the\n      Start Point.\
    \  On receiving a Measurement Request with the B flag\n      set to one, the End\
    \ Point SHOULD generate a Measurement Request to\n      measure the cost of its\
    \ current (or the most preferred) route to\n      the Start Point.  Receipt of\
    \ this Measurement Request would allow\n      the Start Point to know the cost\
    \ of the back route from the\n      End Point to itself and thus determine the\
    \ round-trip cost of\n      reaching the End Point.\n   o  Intermediate Reply\
    \ (I): A value of 1 in this flag serves as\n      permission to an Intermediate\
    \ Point to generate a Measurement\n      Reply if it knows the aggregated values\
    \ of the routing metrics\n      being measured for the rest of the route.  Setting\
    \ this flag to\n      one may be useful in scenarios where the Hop Count [RFC6551]\
    \ is\n      the routing metric of interest and an Intermediate Point (e.g.,\n\
    \      the root of a non-storing global DAG or a common ancestor of the\n    \
    \  Start Point and the End Point in a storing global DAG) may know\n      the\
    \ Hop Count of the remainder of the route to the End Point.\n      This flag MAY\
    \ be set to one only if a Hop-by-hop Route with a\n      global RPLInstanceID\
    \ is being measured (i.e., H = 1 and\n      RPLInstanceID has a global value).\
    \  Otherwise, this flag MUST be\n      set to zero on transmission and ignored\
    \ on reception.\n   o  SeqNo: This is a 6-bit sequence number, assigned by the\n\
    \      Start Point, that allows the Start Point to uniquely identify a\n     \
    \ Measurement Request and the corresponding Measurement Reply.\n   o  Num: This\
    \ field indicates the number of elements, each\n      (16 - Compr) octets in size,\
    \ inside the Address vector.  If the\n      value of this field is zero, the Address\
    \ vector is not present in\n      the MO.\n   o  Index: If the Measurement Request\
    \ is traveling along a Source\n      Route contained in the Address vector (i.e.,\
    \ H = 0), this field\n      indicates the index in the Address vector of the next\
    \ hop on the\n      route.  If the Measurement Request is traveling along a Hop-by-hop\n\
    \      Route with a local RPLInstanceID and the route accumulation is on\n   \
    \   (i.e., H = 1, RPLInstanceID has a local value, and A = 1), this\n      field\
    \ indicates the index in the Address vector where an\n      Intermediate Point\
    \ receiving the Measurement Request must store\n      its IPv6 address.  Otherwise,\
    \ this field MUST be set to zero on\n      transmission and ignored on reception.\n\
    \   o  Start Point Address: This is a unicast global or unique-local IPv6\n  \
    \    address of the Start Point after eliding Compr number of prefix\n      octets.\
    \  If the Measurement Request is traveling along a Hop-by-\n      hop Route and\
    \ the RPLInstanceID field indicates a local value, the\n      Start Point Address\
    \ field MUST specify the DODAGID value that,\n      along with the RPLInstanceID\
    \ and the End Point Address, uniquely\n      identifies the Hop-by-hop Route being\
    \ measured.\n   o  End Point Address: This is a unicast global or unique-local\
    \ IPv6\n      address of the End Point after eliding Compr number of prefix\n\
    \      octets.\n   o  Address[0..Num-1]: This field is a vector of unicast global\
    \ or\n      unique-local IPv6 addresses (with Compr number of prefix octets\n\
    \      elided) representing a Source Route:\n      *  Each element in the vector\
    \ has size (16 - Compr) octets.\n      *  The total number of elements inside\
    \ the Address vector is given\n         by the Num field.\n      *  The Start\
    \ Point and End Point addresses MUST NOT be included in\n         the Address\
    \ vector.\n      *  The Address vector MUST NOT contain any multicast addresses.\n\
    \      *  If the Start Point wants to measure a Hop-by-hop Route with a\n    \
    \     local RPLInstanceID and accumulate a Source Route for the\n         End\
    \ Point's use (i.e., the Measurement Request has the H flag\n         set to one,\
    \ RPLInstanceID set to a local value, and the A flag\n         set to one), it\
    \ MUST include a suitably sized Address vector in\n         the Measurement Request.\
    \  As the Measurement Request travels\n         over the route being measured,\
    \ the Address vector accumulates a\n         Source Route that can be used by\
    \ the End Point, after reversal,\n         to reach (and, in particular, to send\
    \ the Measurement Reply\n         back to) the Start Point.  The route MUST be\
    \ accumulated in the\n         Forward direction, but the IPv6 addresses in the\
    \ accumulated\n         route MUST be reachable in the Reverse direction.  An\n\
    \         Intermediate Point MUST add only a global or unique-local IPv6\n   \
    \      address to the Address vector and MUST NOT modify the size of\n       \
    \  the Address vector.\n      *  If the Start Point wants to measure a Source\
    \ Route, it MUST\n         include an Address vector, containing the route being\
    \ measured,\n         inside the Measurement Request.  Similarly, if the Measurement\n\
    \         Request had been traveling along a global non-storing DAG so\n     \
    \    far, the root of this DAG may insert an Address vector,\n         containing\
    \ a Source Route from itself to the End Point, inside\n         the Measurement\
    \ Request.  In both cases, the Source Route\n         inside the Address vector\
    \ MUST consist only of global or\n         unique-local IPv6 addresses that are\
    \ reachable in the Forward\n         direction.  Further, in both cases, an Intermediate\
    \ Point MUST\n         NOT modify the contents of the existing Address vector\
    \ before\n         forwarding the Measurement Request further.  In other words,\
    \ an\n         Intermediate Point MUST NOT modify the Source Route along which\n\
    \         the Measurement Request is currently traveling.  The\n         Start\
    \ Point MAY set the R flag in the Measurement Request to\n         one if the\
    \ Source Route inside the Address vector can be used\n         by the End Point,\
    \ after reversal, to reach (and, in particular,\n         to send the Measurement\
    \ Reply back to) the Start Point.  In\n         other words, the Start Point MAY\
    \ set the R flag to one only if\n         all the IPv6 addresses in the Address\
    \ vector are reachable in\n         the Reverse direction.\n   o  Metric Container\
    \ Options: A Measurement Request MUST contain one\n      or more Metric Container\
    \ options [RFC6550] to accumulate the\n      values of the selected routing metrics\
    \ in the manner described in\n      [RFC6551] for the route being measured.\n\
    \   Section 4 describes how a Start Point sets various fields inside a\n   Measurement\
    \ Request in different cases.  Section 5 describes how an\n   Intermediate Point\
    \ processes a received Measurement Request before\n   forwarding it further. \
    \ Section 6 describes how the End Point\n   processes a received Measurement Request\
    \ and generates a Measurement\n   Reply.  Finally, Section 7 describes how the\
    \ Start Point processes a\n   received Measurement Reply.  In the following discussion,\
    \ any\n   reference to discarding a received Measurement Request/Reply with \"\
    no\n   further processing\" does not preclude updating the appropriate error\n\
    \   counters or any similar actions.\n"
- title: 3.2.  Secure MO
  contents:
  - "3.2.  Secure MO\n   A Secure MO follows the format shown in Figure 7 of [RFC6550],\
    \ where\n   the base format is the base MO shown in Figure 1.  Sections 6.1, 10,\n\
    \   and 19 of [RFC6550] describe the RPL security framework.  These\n   sections\
    \ are applicable to the use of Secure MO messages as well,\n   except as constrained\
    \ in this section.  An LLN deployment MUST\n   support the use of Secure MO messages\
    \ so that it has the ability to\n   invoke RPL-provided security mechanisms and\
    \ prevent misuse of the\n   measurement mechanism by unauthorized routers.\n \
    \  The Start Point determines whether Secure MO messages are to be used\n   in\
    \ a particular route measurement and, if yes, the Security\n   Configuration (see\
    \ definition in [RFC6997]) to be used for that\n   purpose.  The Start Point MUST\
    \ NOT set the \"Key Identifier Mode\"\n   field to a value of 1 inside this Security\
    \ Configuration, since this\n   setting indicates the use of a per-pair key, which\
    \ is not suitable\n   for securing the Measurement Request messages that travel\
    \ over\n   multiple hops.  A router (an Intermediate Point or the End Point)\n\
    \   participating in a particular route measurement\n   o  MUST generate a Secure\
    \ MO message (a Measurement Request or a\n      Measurement Reply) if the received\
    \ Measurement Request is a Secure\n      MO.  The Security Configuration used\
    \ in generating a Secure MO\n      message MUST be the same as the one used in\
    \ the received message.\n   o  MUST NOT generate a Secure MO message if the received\
    \ Measurement\n      Request is not a Secure MO.\n   A router MUST discard a received\
    \ Measurement Request if it cannot\n   follow the above-mentioned rules.  If the\
    \ Start Point sends a\n   Measurement Request in a Secure MO message using a particular\n\
    \   Security Configuration, it MUST discard the corresponding Measurement\n  \
    \ Reply it receives with no further processing, unless the Measurement\n   Reply\
    \ is received in a Secure MO message generated with the same\n   Security Configuration\
    \ as the one used in the Measurement Request.\n   In the following discussion,\
    \ any reference to an MO message is also\n   applicable to a Secure MO message,\
    \ unless noted otherwise.\n"
- title: 4.  Originating a Measurement Request
  contents:
  - "4.  Originating a Measurement Request\n   A Start Point sets various fields inside\
    \ the Measurement Request it\n   generates in the manner described below.  The\
    \ Start Point MUST also\n   include the routing metric objects [RFC6551] of interest\
    \ inside one\n   or more Metric Container options inside the Measurement Request.\
    \  The\n   Start Point then determines the next hop on the route being measured.\n\
    \   If a Hop-by-hop Route is being measured (i.e., H = 1), the next hop\n   is\
    \ determined using the RPLInstanceID, the End Point Address, and, if\n   RPLInstanceID\
    \ is a local value, the Start Point Address fields in the\n   Measurement Request.\
    \  If a Source Route is being measured (i.e.,\n   H = 0), the Address[0] element\
    \ inside the Measurement Request\n   contains the next-hop address.  The Start\
    \ Point MUST ensure that\n   o  the next-hop address is a unicast address, and\n\
    \   o  the next hop is on-link, and\n   o  the next hop is in the same RPL routing\
    \ domain [RFC6554] as the\n      Start Point,\n   failing which the Start Point\
    \ MUST discard the Measurement Request\n   without sending.  Depending on the\
    \ routing metrics, the Start Point\n   must initiate the routing metric objects\
    \ inside the Metric Container\n   options by including the routing metric values\
    \ for the first hop on\n   the route being measured.  Finally, the Start Point\
    \ MUST unicast the\n   Measurement Request to the next hop on the route being\
    \ measured.\n   The Start Point MUST maintain state for a just-transmitted\n \
    \  Measurement Request, for a lifetime duration that is large enough to\n   allow\
    \ the corresponding Measurement Reply to return.  This state\n   consists of the\
    \ RPLInstanceID, the SeqNo, and the End Point Address\n   fields of the Measurement\
    \ Request.  The lifetime duration for this\n   state is locally determined by\
    \ the Start Point and may be deployment\n   specific.  This state expires when\
    \ the corresponding Measurement\n   Reply is received or when the lifetime is\
    \ over, whichever occurs\n   first.  Failure to receive the corresponding Measurement\
    \ Reply before\n   the expiry of a state may occur due to a number of reasons,\
    \ including\n   the unwillingness on the part of an Intermediate Point or the\n\
    \   End Point to process the Measurement Request.  The Start Point should\n  \
    \ take such possibilities into account when deciding whether to\n   generate another\
    \ Measurement Request for this route.  The Start Point\n   MUST discard a received\
    \ Measurement Reply with no further processing\n   if the state for the corresponding\
    \ Measurement Request has already\n   expired.\n"
- title: 4.1.  When Measuring a Hop-by-Hop Route with a Global RPLInstanceID
  contents:
  - "4.1.  When Measuring a Hop-by-Hop Route with a Global RPLInstanceID\n   If a\
    \ Hop-by-hop Route with a global RPLInstanceID is being measured\n   (i.e., H\
    \ = 1 and RPLInstanceID has a global value), the MO MUST NOT\n   contain an Address\
    \ vector, and various MO fields MUST be set in the\n   following manner:\n   o\
    \  RPLInstanceID: This field MUST be set to the RPLInstanceID of the\n      route\
    \ being measured.\n   o  Compr: This field MUST be set to specify the number of\
    \ prefix\n      octets that are elided from the IPv6 addresses in Start Point/\n\
    \      End Point Address fields.\n   o  Type (T): This flag MUST be set to one,\
    \ since the MO represents a\n      Measurement Request.\n   o  Hop-by-hop (H):\
    \ This flag MUST be set to one.\n   o  Accumulate Route (A): This flag MUST be\
    \ set to zero.\n   o  Reverse (R): This flag MUST be set to zero.\n   o  Back\
    \ Request (B): This flag MAY be set to one to request that the\n      End Point\
    \ send a Measurement Request to the Start Point.\n   o  Intermediate Reply (I):\
    \ This flag MAY be set to one if the\n      Start Point expects an Intermediate\
    \ Point to know the values of\n      the routing metrics being measured for the\
    \ remainder of the route.\n   o  SeqNo: This is assigned by the Start Point so\
    \ that it can uniquely\n      identify the Measurement Request and the corresponding\n\
    \      Measurement Reply.\n   o  Num: This field MUST be set to zero.\n   o  Index:\
    \ This field MUST be set to zero.\n   o  Start Point Address: This field MUST\
    \ be set to a unicast\n      global/unique-local IPv6 address of the Start Point\
    \ after eliding\n      Compr number of prefix octets.\n   o  End Point Address:\
    \ This field MUST be set to a unicast\n      global/unique-local IPv6 address\
    \ of the End Point after eliding\n      Compr number of prefix octets.\n"
- title: 4.2.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with
  contents:
  - "4.2.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with\n   \
    \   Route Accumulation Off\n   If a Hop-by-hop Route with a local RPLInstanceID\
    \ is being measured\n   and the Start Point does not want the MO to accumulate\
    \ a Source Route\n   for the End Point's use, the MO MUST NOT contain the Address\
    \ vector,\n   and various MO fields MUST be set in the following manner:\n   o\
    \  RPLInstanceID: This field MUST be set to the RPLInstanceID of the\n      route\
    \ being measured.\n   o  Compr: This field MUST be set to specify the number of\
    \ prefix\n      octets that are elided from the IPv6 addresses in Start Point/\n\
    \      End Point Address fields.\n   o  Type (T): This flag MUST be set to one,\
    \ since the MO represents a\n      Measurement Request.\n   o  Hop-by-hop (H):\
    \ This flag MUST be set to one.\n   o  Accumulate Route (A): This flag MUST be\
    \ set to zero.\n   o  Reverse (R): This flag MUST be set to zero.\n   o  Back\
    \ Request (B): This flag MAY be set to one to request that the\n      End Point\
    \ send a Measurement Request to the Start Point.\n   o  Intermediate Reply (I):\
    \ This flag MUST be set to zero.\n   o  SeqNo: This is assigned by the Start Point\
    \ so that it can uniquely\n      identify the Measurement Request and the corresponding\n\
    \      Measurement Reply.\n   o  Num: This field MUST be set to zero.\n   o  Index:\
    \ This field MUST be set to zero.\n   o  Start Point Address: This field MUST\
    \ contain the DODAGID value\n      (after eliding Compr number of prefix octets)\
    \ associated with the\n      route being measured.  This DODAGID MUST also be\
    \ a global or\n      unique-local IPv6 address of the Start Point.\n   o  End\
    \ Point Address: This field MUST be set to a unicast global or\n      unique-local\
    \ IPv6 address of the End Point after eliding Compr\n      number of prefix octets.\n"
- title: 4.3.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with
  contents:
  - "4.3.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with\n   \
    \   Route Accumulation On\n   If a Hop-by-hop Route with a local RPLInstanceID\
    \ is being measured\n   and the Start Point desires the MO to accumulate a Source\
    \ Route for\n   the End Point to send the Measurement Reply message back, the\
    \ MO MUST\n   contain a suitably sized Address vector, and various MO fields MUST\n\
    \   be set in the following manner:\n   o  RPLInstanceID: This field MUST be set\
    \ to the RPLInstanceID of the\n      route being measured.\n   o  Compr: This\
    \ field MUST be set to specify the number of prefix\n      octets that are elided\
    \ from the IPv6 addresses in Start Point/\n      End Point Address fields and\
    \ the Address vector.\n   o  Type (T): This flag MUST be set to one, since the\
    \ MO represents a\n      Measurement Request.\n   o  Hop-by-hop (H): This flag\
    \ MUST be set to one.\n   o  Accumulate Route (A): This flag MUST be set to one.\n\
    \   o  Reverse (R): This flag MUST be set to zero.\n   o  Back Request (B): This\
    \ flag MAY be set to one to request that the\n      End Point send a Measurement\
    \ Request to the Start Point.\n   o  Intermediate Reply (I): This flag MUST be\
    \ set to zero.\n   o  SeqNo: This is assigned by the Start Point so that it can\
    \ uniquely\n      identify the Measurement Request and the corresponding\n   \
    \   Measurement Reply.\n   o  Num: This field MUST specify the number of address\
    \ elements, each\n      (16 - Compr) octets in size, that can fit inside the Address\n\
    \      vector.\n   o  Index: This field MUST be set to zero to indicate the position\
    \ in\n      the Address vector where the next hop must store its IPv6 address.\n\
    \   o  Start Point Address: This field MUST contain the DODAGID value\n      (after\
    \ eliding Compr number of prefix octets) associated with the\n      route being\
    \ measured.  This DODAGID MUST also be a global or\n      unique-local IPv6 address\
    \ of the Start Point.\n   o  End Point Address: This field MUST be set to a unicast\
    \ global or\n      unique-local IPv6 address of the End Point after eliding Compr\n\
    \      number of prefix octets.\n   o  Address vector: The Address vector must\
    \ be large enough to\n      accommodate a complete Source Route from the End Point\
    \ to the\n      Start Point.  All the bits in the Address vector field MUST be\
    \ set\n      to zero.\n"
- title: 4.4.  When Measuring a Source Route
  contents:
  - "4.4.  When Measuring a Source Route\n   If a Source Route is being measured,\
    \ the Start Point MUST set various\n   MO fields in the following manner:\n  \
    \ o  RPLInstanceID: This field does not have any significance when a\n      Source\
    \ Route is being measured and hence can be set to any value.\n   o  Compr: This\
    \ field MUST be set to specify the number of prefix\n      octets that are elided\
    \ from the IPv6 addresses in Start Point/\n      End Point Address fields and\
    \ the Address vector.\n   o  Type (T): This flag MUST be set to one, since the\
    \ MO represents a\n      Measurement Request.\n   o  Hop-by-hop (H): This flag\
    \ MUST be set to zero.\n   o  Accumulate Route (A): This flag MUST be set to zero.\n\
    \   o  Reverse (R): This flag SHOULD be set to one if the Source Route in\n  \
    \    the Address vector can be reversed and used by the End Point to\n      send\
    \ the Measurement Reply message back to the Start Point.\n      Otherwise, this\
    \ flag MUST be set to zero.\n   o  Back Request (B): This flag MAY be set to one\
    \ to request that the\n      End Point send a Measurement Request to the Start\
    \ Point.\n   o  Intermediate Reply (I): This flag MUST be set to zero.\n   o \
    \ SeqNo: This is assigned by the Start Point so that it can uniquely\n      identify\
    \ the Measurement Request and the corresponding\n      Measurement Reply.\n  \
    \ o  Num: This field MUST specify the number of address elements, each\n     \
    \ (16 - Compr) octets in size, inside the Address vector.\n   o  Index: This field\
    \ MUST be set to zero to indicate the position in\n      the Address vector of\
    \ the next hop on the route.\n   o  Start Point Address: This field MUST be set\
    \ to a unicast global or\n      unique-local IPv6 address of the Start Point after\
    \ eliding Compr\n      number of prefix octets.\n   o  End Point Address: This\
    \ field MUST be set to a unicast global or\n      unique-local IPv6 address of\
    \ the End Point after eliding Compr\n      number of prefix octets.\n   o  Address\
    \ vector:\n      *  The Address vector MUST contain a complete Source Route from\n\
    \         the Start Point to the End Point (excluding the Start Point and\n  \
    \       the End Point).\n      *  Each address appearing in the Address vector\
    \ MUST be a unicast\n         global or unique-local IPv6 address.  Further, each\
    \ address\n         MUST have the same prefix as the Start Point Address and the\n\
    \         End Point Address.  This prefix, whose length in octets is\n       \
    \  specified in the Compr field, MUST be elided from each address.\n      *  The\
    \ IPv6 addresses in the Address vector MUST be reachable in\n         the Forward\
    \ direction.\n      *  If the R flag is set to one, the IPv6 addresses in the\
    \ Address\n         vector MUST also be reachable in the Reverse direction.\n"
- title: 5.  Processing a Measurement Request at an Intermediate Point
  contents:
  - "5.  Processing a Measurement Request at an Intermediate Point\n   A router (an\
    \ Intermediate Point or the End Point) MAY discard a\n   received MO with no processing,\
    \ in order to meet any policy-related\n   goals.  Such policy goals may include\
    \ the need to reduce the router's\n   CPU load, or to enhance its battery life,\
    \ or to prevent the misuse of\n   this mechanism by unauthorized nodes.\n   A\
    \ router MUST discard a received MO with no further processing if the\n   value\
    \ in the Compr field inside the received message is more than\n   what the router\
    \ considers to be the length of the common prefix used\n   in IPv6 addresses in\
    \ the LLN.\n   On receiving an MO, if a router chooses to process the packet\n\
    \   further, it MUST determine whether or not one of its IPv6 addresses\n   is\
    \ listed as either the Start Point or the End Point Address.  If\n   not, the\
    \ router considers itself an Intermediate Point and MUST\n   process the received\
    \ MO in the following manner.\n   An Intermediate Point MUST discard the packet\
    \ with no further\n   processing if the received MO is not a Measurement Request\
    \ (i.e.,\n   T = 0).  This is because the End Point unicasts a Measurement Reply\n\
    \   directly to the Start Point.  So, the Intermediate Point treats a\n   transiting\
    \ Measurement Reply as a data packet and not a RPL control\n   message.\n   Next,\
    \ the Intermediate Point determines the type of the route being\n   measured (by\
    \ checking the values of the H flag and the RPLInstanceID\n   field) and processes\
    \ the received MO accordingly, in the manner\n   specified next.\n"
- title: 5.1.  When Measuring a Hop-by-Hop Route with a Global RPLInstanceID
  contents:
  - "5.1.  When Measuring a Hop-by-Hop Route with a Global RPLInstanceID\n   If a\
    \ Hop-by-hop Route with a global RPLInstanceID is being measured\n   (i.e., H\
    \ = 1 and RPLInstanceID has a global value), the Intermediate\n   Point MUST process\
    \ the received Measurement Request in the following\n   manner.\n   If the Num\
    \ field inside the received Measurement Request is not set\n   to zero, thereby\
    \ implying that an Address vector is present, the\n   Intermediate Point MUST\
    \ discard the received message with no further\n   processing.\n   If the Intermediate\
    \ Reply (I) flag is set to one in the received\n   Measurement Request and the\
    \ Intermediate Point knows the values of\n   the routing metrics (as specified\
    \ in the Metric Container options)\n   for the remainder of the route, it MAY\
    \ generate a Measurement Reply\n   on the End Point's behalf in the manner specified\
    \ in Section 6.1\n   (after including in the Measurement Reply the relevant routing\
    \ metric\n   values for the complete route being measured).  Otherwise, the\n\
    \   Intermediate Point MUST process the received message in the following\n  \
    \ manner.\n   The Intermediate Point MUST determine the next hop on the route\
    \ being\n   measured using the RPLInstanceID and the End Point Address.  If the\n\
    \   Intermediate Point is the root of the non-storing global DAG along\n   which\
    \ the received Measurement Request had been traveling so far, it\n   MUST process\
    \ the received Measurement Request in the following\n   manner:\n   o  If the\
    \ router does not know how to reach the End Point, it MUST\n      discard the\
    \ Measurement Request with no further processing and MAY\n      send an ICMPv6\
    \ Destination Unreachable (with Code 0 -- No Route To\n      Destination) error\
    \ message [RFC4443] to the Start Point.\n   o  Otherwise, unless the router determines\
    \ the End Point itself to be\n      the next hop, the router MUST make the following\
    \ changes in the\n      received Measurement Request:\n      *  Set the H, A,\
    \ R, and I flags to zero (the A and R flags should\n         already be zero in\
    \ the received message).\n      *  Leave the remaining fields unchanged (the Num\
    \ field would be\n         modified in the next steps).  Note that the RPLInstanceID\
    \ field\n         identifies the non-storing global DAG along which the\n    \
    \     Measurement Request traveled so far.  This information MUST be\n       \
    \  preserved so that the End Point may use this DAG to send the\n         Measurement\
    \ Reply back to the Start Point.\n      *  Insert a new Address vector inside\
    \ the Measurement Request, and\n         specify a Source Route to the End Point\
    \ inside the Address\n         vector as per the following rules:\n         +\
    \  The Address vector MUST contain a complete route from the\n            router\
    \ to the End Point (excluding the router and the\n            End Point).\n  \
    \       +  Each address appearing in the Address vector MUST be a\n          \
    \  unicast global or unique-local IPv6 address.  Further, each\n            address\
    \ MUST have the same prefix as the Start Point Address\n            and the End\
    \ Point Address.  This prefix, whose length in\n            octets is specified\
    \ in the Compr field, MUST be elided from\n            each address.\n       \
    \  +  The IPv6 addresses in the Address vector MUST be reachable\n           \
    \ in the Forward direction.\n         If the router cannot insert an Address vector\
    \ satisfying the\n         rules mentioned above, it MUST discard the Measurement\
    \ Request\n         with no further processing and MAY send an ICMPv6 Destination\n\
    \         Unreachable (with Code 0 -- No Route To Destination) error\n       \
    \  message [RFC4443] to the Start Point.\n      *  Specify in the Num field the\
    \ number of address elements in the\n         Address vector.\n      *  Set the\
    \ Index field to zero to indicate the position in the\n         Address vector\
    \ of the next hop on the route.  Thus, the\n         Address[0] element contains\
    \ the address of the next hop on the\n         route.\n   The Intermediate Point\
    \ MUST then complete the processing of the\n   received Measurement Request as\
    \ specified in Section 5.5.\n"
- title: 5.2.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with
  contents:
  - "5.2.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with\n   \
    \   Route Accumulation Off\n   If a Hop-by-hop Route with a local RPLInstanceID\
    \ is being measured\n   and the route accumulation is off (i.e., H = 1, RPLInstanceID\
    \ has a\n   local value, and A = 0), the Intermediate Point MUST process the\n\
    \   received Measurement Request in the following manner.\n   If the Num field\
    \ inside the received Measurement Request is not set\n   to zero, thereby implying\
    \ that an Address vector is present, the\n   Intermediate Point MUST discard the\
    \ received message with no further\n   processing.\n   The Intermediate Point\
    \ MUST then determine the next hop on the route\n   being measured using the RPLInstanceID,\
    \ the End Point Address, and\n   the Start Point Address (which represents the\
    \ DODAGID of the route\n   being measured).  If the Intermediate Point cannot\
    \ determine the next\n   hop, it MUST discard the Measurement Request with no\
    \ further\n   processing and MAY send an ICMPv6 Destination Unreachable (with\n\
    \   Code 0 -- No Route To Destination) error message [RFC4443] to the\n   Start\
    \ Point.  Otherwise, the Intermediate Point MUST complete the\n   processing of\
    \ the received Measurement Request as specified in\n   Section 5.5.\n"
- title: 5.3.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with
  contents:
  - "5.3.  When Measuring a Hop-by-Hop Route with a Local RPLInstanceID with\n   \
    \   Route Accumulation On\n   If a Hop-by-hop Route with a local RPLInstanceID\
    \ is being measured\n   and the route accumulation is on (i.e., H = 1, RPLInstanceID\
    \ has a\n   local value, and A = 1), the Intermediate Point MUST process the\n\
    \   received Measurement Request in the following manner.\n   If the Num field\
    \ inside the received Measurement Request is set to\n   zero, thereby implying\
    \ that an Address vector is not present, the\n   Intermediate Point MUST discard\
    \ the received message with no further\n   processing.\n   The Intermediate Point\
    \ MUST then determine the next hop on the route\n   being measured using the RPLInstanceID,\
    \ the End Point Address, and\n   the Start Point Address (which represents the\
    \ DODAGID of the route\n   being measured).  If the Intermediate Point cannot\
    \ determine the next\n   hop, it MUST discard the Measurement Request with no\
    \ further\n   processing and MAY send an ICMPv6 Destination Unreachable (with\n\
    \   Code 0 -- No Route To Destination) error message [RFC4443] to the\n   Start\
    \ Point.  If the index field has value Num - 1 and the next hop\n   is not the\
    \ same as the End Point, the Intermediate Point MUST drop\n   the received Measurement\
    \ Request with no further processing.  In this\n   case, the next hop would have\
    \ no space left in the Address vector to\n   store its address.  Otherwise, the\
    \ router MUST store one of its IPv6\n   addresses at location Address[Index] and\
    \ then increment the Index\n   field.  The IPv6 address added to the Address vector\
    \ MUST have the\n   following properties:\n   o  This address MUST be a unicast\
    \ global or unique-local address.\n   o  This address MUST have the same prefix\
    \ as the Start Point Address\n      and the End Point Address.  This prefix, whose\
    \ length in octets is\n      specified in the Compr field, MUST be elided before\
    \ the address is\n      added to the Address vector.\n   o  This address MUST\
    \ be reachable in the Reverse direction.\n   If the router does not have an IPv6\
    \ address that satisfies the\n   properties mentioned above, it MUST discard the\
    \ Measurement Request\n   with no further processing.\n   The Intermediate Point\
    \ MUST then complete the processing of the\n   received Measurement Request as\
    \ specified in Section 5.5.\n"
- title: 5.4.  When Measuring a Source Route
  contents:
  - "5.4.  When Measuring a Source Route\n   If a Source Route is being measured (i.e.,\
    \ H = 0), the Intermediate\n   Point MUST process the received Measurement Request\
    \ in the following\n   manner.\n   If the Num field inside the received Measurement\
    \ Request is set to\n   zero, thereby implying that an Address vector is not present,\
    \ the\n   Intermediate Point MUST discard the received message with no further\n\
    \   processing.\n   The Intermediate Point MUST verify that the Address[Index]\
    \ element\n   lists one of its unicast global or unique-local IPv6 addresses (minus\n\
    \   the prefix whose length in octets is specified in the Compr field),\n   failing\
    \ which it MUST discard the Measurement Request with no further\n   processing.\
    \  The Intermediate Point MUST then increment the Index\n   field and use the\
    \ Address[Index] element as the next hop (unless the\n   Index value is now Num).\
    \  If the Index value is now Num, the\n   Intermediate Point MUST use the End\
    \ Point Address as the next hop.\n   The Intermediate Point MUST then complete\
    \ the processing of the\n   received Measurement Request as specified in Section\
    \ 5.5.\n"
- title: 5.5.  Final Processing
  contents:
  - "5.5.  Final Processing\n   The Intermediate Point MUST drop the received Measurement\
    \ Request\n   with no further processing:\n   o  if the next-hop address is not\
    \ a unicast address; or\n   o  if the next hop is not on-link; or\n   o  if the\
    \ next hop is not in the same RPL routing domain as the\n      Intermediate Point.\n\
    \   Next, the Intermediate Point MUST update the routing metric objects,\n   inside\
    \ the Metric Container option(s) inside the Measurement Request,\n   either by\
    \ updating the aggregated value for the routing metric or by\n   attaching the\
    \ local values for the metric inside the object.  An\n   Intermediate Point can\
    \ only update the existing metric objects and\n   MUST NOT add any new routing\
    \ metric objects to the Metric Container.\n   An Intermediate Point MUST drop\
    \ the Measurement Request with no\n   further processing if it cannot update a\
    \ routing metric object\n   specified inside the Metric Container.\n   Finally,\
    \ the Intermediate Point MUST unicast the Measurement Request\n   to the next\
    \ hop.\n"
- title: 6.  Processing a Measurement Request at the End Point
  contents:
  - "6.  Processing a Measurement Request at the End Point\n   On receiving an MO,\
    \ if a router chooses to process the message\n   further and finds one of its\
    \ unicast global or unique-local IPv6\n   addresses (minus the prefix whose length\
    \ in octets is specified in\n   the Compr field) listed as the End Point Address,\
    \ the router\n   considers itself the End Point and MUST process the received\
    \ MO in\n   the following manner.\n   The End Point MUST discard the received\
    \ message with no further\n   processing if it is not a Measurement Request (i.e.,\
    \ T = 0).\n   If the received Measurement Request traveled on a Hop-by-hop Route\n\
    \   with a local RPLInstanceID with route accumulation on (i.e., H = 1,\n   RPLInstanceID\
    \ has a local value, and A = 1), elements Address[0]\n   through Address[Index\
    \ - 1] in the Address vector contain a complete\n   Source Route from the Start\
    \ Point to the End Point, which the\n   End Point MAY use, after reversal, to\
    \ reach the Start Point.  Note\n   that the Source Route in the Address vector\
    \ does not include the\n   Start Point and the End Point addresses, and that the\
    \ individual\n   addresses do not include the common prefix whose length in octets\
    \ is\n   specified in the Compr field.\n   If the received Measurement Request\
    \ traveled on a Source Route and\n   the Reverse flag is set to one (i.e., H =\
    \ 0 and R = 1), elements\n   Address[0] through Address[Num - 1] in the Address\
    \ vector contain a\n   complete Source Route from the Start Point to the End Point,\
    \ which\n   the End Point MAY use, after reversal, to reach the Start Point.\n\
    \   Again, the Source Route in the Address vector does not include the\n   Start\
    \ Point and the End Point addresses, and the individual addresses\n   do not include\
    \ the common prefix whose length in octets is specified\n   in the Compr field.\n\
    \   The End Point MUST update the routing metric objects in the Metric\n   Container\
    \ options if required and MAY note the measured values for\n   the complete route\
    \ (especially if the received Measurement Request is\n   likely a response to\
    \ an earlier Measurement Request that the\n   End Point had sent to the Start\
    \ Point with the B flag set to one).\n   The End Point MUST generate a Measurement\
    \ Reply message as specified\n   in Section 6.1.  If the B flag is set to one\
    \ in the received\n   Measurement Request, the End Point SHOULD generate a new\
    \ Measurement\n   Request to measure the cost of its current (or the most preferred)\n\
    \   route to the Start Point.  The routing metrics used in the new\n   Measurement\
    \ Request MUST include the routing metrics specified in the\n   received Measurement\
    \ Request.\n"
- title: 6.1.  Generating the Measurement Reply
  contents:
  - "6.1.  Generating the Measurement Reply\n   A Measurement Reply MUST have the\
    \ Type (T) flag set to zero and need\n   not contain the Address vector.  The\
    \ following fields inside a\n   Measurement Reply MUST have the same values as\
    \ they had inside the\n   corresponding Measurement Request: RPLInstanceID, Compr,\
    \ SeqNo,\n   Start Point Address, End Point Address, and Metric Container\n  \
    \ option(s).  The remaining fields inside a Measurement Reply may have\n   any\
    \ value and MUST be ignored on reception at the Start Point; the\n   received\
    \ Measurement Request can, therefore, trivially be converted\n   into a Measurement\
    \ Reply by setting the Type (T) flag to zero.\n   A Measurement Reply MUST be\
    \ unicast back to the Start Point:\n   o  If the Measurement Request traveled\
    \ along a global DAG, identified\n      by the RPLInstanceID field, the Measurement\
    \ Reply MAY be unicast\n      back to the Start Point along the same DAG.\n  \
    \ o  If the Measurement Request traveled along a Hop-by-hop Route with\n     \
    \ a local RPLInstanceID and accumulated a Source Route from the\n      Start Point\
    \ to the End Point, this Source Route MAY be used after\n      reversal to send\
    \ the Measurement Reply back to the Start Point.\n   o  If the Measurement Request\
    \ traveled along a Source Route and the\n      R flag inside the received message\
    \ is set to one, the End Point\n      MAY reverse the Source Route contained in\
    \ the Address vector and\n      use it to send the Measurement Reply back to the\
    \ Start Point.\n"
- title: 7.  Processing a Measurement Reply at the Start Point
  contents:
  - "7.  Processing a Measurement Reply at the Start Point\n   When a router receives\
    \ an MO, it examines the MO to see if one of its\n   unicast IPv6 addresses is\
    \ listed as the Start Point Address.  If yes,\n   the router is the Start Point\
    \ and MUST process the received message\n   in the following manner.\n   If the\
    \ Start Point discovers that the received MO is not a\n   Measurement Reply, or\
    \ if it no longer maintains state for the\n   corresponding Measurement Request,\
    \ it MUST discard the received\n   message with no further processing.\n   The\
    \ Start Point can use the routing metric objects inside the Metric\n   Container\
    \ to evaluate the metrics for the measured P2P route.  If a\n   routing metric\
    \ object contains local metric values recorded by\n   routers on the route, the\
    \ Start Point can make use of these local\n   values by aggregating them into\
    \ an end-to-end metric, according to\n   the aggregation rules for the specific\
    \ metric.  A Start Point is then\n   free to interpret the metrics for the route,\
    \ according to its local\n   policy.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In general, the security considerations for the\
    \ route measurement\n   mechanism described in this document are similar to those\
    \ for RPL (as\n   described in Section 19 of the RPL specification [RFC6550]).\n\
    \   Sections 6.1 and 10 of [RFC6550] describe RPL's security framework,\n   which\
    \ provides data confidentiality, authentication, replay\n   protection, and delay\
    \ protection services.  This security framework\n   is applicable to the route\
    \ measurement mechanism described here as\n   well, after taking into account\
    \ the constraints specified in\n   Section 3.2.\n   This document requires that\
    \ all routers participating in a secure\n   invocation of the route measurement\
    \ process use the Security\n   Configuration chosen by the Start Point.  The intention\
    \ is to avoid\n   compromising the overall security of the route measurement due\
    \ to\n   some routers using a weaker Security Configuration.  A router is\n  \
    \ allowed to participate in a \"secure\" route measurement only if it can\n  \
    \ support the Security Configuration in use, which also specifies the\n   key\
    \ in use.  It does not matter whether the key is preinstalled or\n   dynamically\
    \ acquired after proper authentication.  The router must\n   have the key in use\
    \ before it can process or generate Secure MO\n   messages.  Hence, from the perspective\
    \ of the route measurement\n   mechanism, there is no distinction between the\
    \ \"preinstalled\" and\n   \"authenticated\" security modes described in the RPL\
    \ specification\n   [RFC6550].  Of course, if a compromised router has the key\
    \ being\n   used, it could cause the route measurement to fail, or worse, insert\n\
    \   wrong information in Secure MO messages.\n   A rogue router acting as the\
    \ Start Point could use the route\n   measurement mechanism defined in this document\
    \ to measure routes from\n   itself to other routers and thus find out key information\
    \ about the\n   LLN, e.g., the topological features of the LLN (such as the identity\n\
    \   of the key routers in the topology) or the remaining energy levels\n   [RFC6551]\
    \ in the routers.  This information can potentially be used\n   to attack the\
    \ LLN.  A rogue router could also use this mechanism to\n   send bogus Measurement\
    \ Requests to arbitrary End Points.  If\n   sufficient Measurement Requests are\
    \ sent, then it may cause CPU\n   overload in the routers in the network, drain\
    \ their batteries, and\n   cause traffic congestion in the network.  Note that\
    \ some of these\n   problems would occur even if the compromised router were to\
    \ generate\n   bogus data traffic to arbitrary destinations.\n   To protect against\
    \ such misuse, this document allows RPL routers\n   implementing this mechanism\
    \ to not process MO messages (or process\n   such messages selectively), based\
    \ on a local policy.  For example, an\n   LLN deployment might require the use\
    \ of Secure MO messages generated\n   using a key that could be obtained only\
    \ after proper authentication.\n   Note that this document requires that an LLN\
    \ deployment support\n   Secure MO messages so that such policies can be enforced\
    \ where\n   considered essential.\n   Since a Measurement Request can travel along\
    \ a Source Route specified\n   in the Address vector, some of the security concerns\
    \ that led to the\n   deprecation of Type 0 routing headers [RFC5095] may be valid\
    \ here.\n   To address such concerns, the mechanism described in this document\n\
    \   includes several remedies, in the form of the following requirements:\n  \
    \ o  A route inserted inside the Address vector must be a strict Source\n    \
    \  Route and must not include any multicast addresses.\n   o  An MO message must\
    \ not cross the boundaries of the RPL routing\n      domain where it originated.\
    \  A router must not forward a received\n      MO message further if the next\
    \ hop belongs to a different RPL\n      routing domain.  Hence, any security problems\
    \ associated with the\n      mechanism would be limited to one RPL routing domain.\n\
    \   o  A router must drop a received Measurement Request if the next-hop\n   \
    \   address is not on-link or if it is not a unicast address.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document defines two new RPL messages:\n   o\
    \  \"Measurement Object\" (see Section 3.1), assigned a value of 0x06\n      from\
    \ the \"RPL Control Codes\" space [RFC6550].\n   o  \"Secure Measurement Object\"\
    \ (see Section 3.2), assigned a value of\n      0x86 from the \"RPL Control Codes\"\
    \ space [RFC6550].\n             +------+---------------------------+---------------+\n\
    \             | Code |        Description        |   Reference   |\n         \
    \    +------+---------------------------+---------------+\n             | 0x06\
    \ |     Measurement Object    | This document |\n             | 0x86 | Secure\
    \ Measurement Object | This document |\n             +------+---------------------------+---------------+\n\
    \                             RPL Control Codes\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors gratefully acknowledge the contributions\
    \ of Ralph Droms,\n   Adrian Farrel, Joel Halpern, Matthias Philipp, Pascal Thubert,\n\
    \   Richard Kelsey, and Zach Shelby in the development of this document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4443]  Conta, A., Deering, S., and M. Gupta, \"Internet Control\n\
    \              Message Protocol (ICMPv6) for the Internet Protocol\n         \
    \     Version 6 (IPv6) Specification\", RFC 4443, March 2006.\n   [RFC6550]  Winter,\
    \ T., Thubert, P., Brandt, A., Hui, J., Kelsey, R.,\n              Levis, P.,\
    \ Pister, K., Struik, R., Vasseur, JP., and R.\n              Alexander, \"RPL:\
    \ IPv6 Routing Protocol for Low-Power and\n              Lossy Networks\", RFC\
    \ 6550, March 2012.\n   [RFC6554]  Hui, J., Vasseur, JP., Culler, D., and V. Manral,\
    \ \"An IPv6\n              Routing Header for Source Routes with the Routing Protocol\n\
    \              for Low-Power and Lossy Networks (RPL)\", RFC 6554,\n         \
    \     March 2012.\n   [RFC6997]  Goyal, M., Ed., Baccelli, E., Philipp, M., Brandt,\
    \ A., and\n              J. Martocci, \"Reactive Discovery of Point-to-Point Routes\n\
    \              in Low-Power and Lossy Networks\", RFC 6997, August 2013.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC5095]  Abley, J., Savola, P., and G. Neville-Neil,\
    \ \"Deprecation\n              of Type 0 Routing Headers in IPv6\", RFC 5095,\n\
    \              December 2007.\n   [RFC5826]  Brandt, A., Buron, J., and G. Porcu,\
    \ \"Home Automation\n              Routing Requirements in Low-Power and Lossy\
    \ Networks\",\n              RFC 5826, April 2010.\n   [RFC5867]  Martocci, J.,\
    \ De Mil, P., Riou, N., and W. Vermeylen,\n              \"Building Automation\
    \ Routing Requirements in Low-Power and\n              Lossy Networks\", RFC 5867,\
    \ June 2010.\n   [RFC6551]  Vasseur, JP., Kim, M., Pister, K., Dejean, N., and\
    \ D.\n              Barthel, \"Routing Metrics Used for Path Calculation in\n\
    \              Low-Power and Lossy Networks\", RFC 6551, March 2012.\n   [ROLL-TERMS]\n\
    \              Vasseur, JP., \"Terminology in Low power And Lossy\n          \
    \    Networks\", Work in Progress, March 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mukul Goyal (editor)\n   University of Wisconsin Milwaukee\n\
    \   3200 N. Cramer St.\n   Milwaukee, WI  53201\n   USA\n   Phone: +1-414-229-5001\n\
    \   EMail: mukul@uwm.edu\n   Emmanuel Baccelli\n   INRIA\n   Phone: +33-169-335-511\n\
    \   EMail: Emmanuel.Baccelli@inria.fr\n   URI:   http://www.emmanuelbaccelli.org/\n\
    \   Anders Brandt\n   Sigma Designs\n   Emdrupvej 26A, 1.\n   Copenhagen, Dk-2100\n\
    \   Denmark\n   Phone: +45-29609501\n   EMail: abr@sdesigns.dk\n   Jerald Martocci\n\
    \   Johnson Controls\n   507 E. Michigan Street\n   Milwaukee, WI  53202\n   USA\n\
    \   Phone: +1-414-524-4010\n   EMail: jerald.p.martocci@jci.com\n"
