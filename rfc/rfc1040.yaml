- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n       Part I:\
    \ Message Encipherment and Authentication Procedures\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC suggests a proposed protocol for the Internet\
    \ community, and\n   requests discussion and suggestions for improvements.  Distribution\n\
    \   of this memo is unlimited.\n"
- title: ACKNOWLEDGMENT
  contents:
  - "ACKNOWLEDGMENT\n   This RFC is the outgrowth of a series of IAB Privacy Task\
    \ Force\n   meetings and of internal working papers distributed for those\n  \
    \ meetings.  I would like to thank the following Privacy Task Force\n   members\
    \ and meeting guests for their comments and contributions at\n   the meetings\
    \ which led to the preparation of this RFC:  David\n   Balenson, Curt Barker,\
    \ Matt Bishop, Danny Cohen, Tom Daniel, Charles\n   Fox, Morrie Gasser, Steve\
    \ Kent (chairman), John Laws, Steve Lipner,\n   Dan Nessett, Mike Padlipsky, Rob\
    \ Shirey, Miles Smid, Steve Walker,\n   and Steve Wilbur.\n"
- title: 1.  Executive Summary
  contents:
  - "1.  Executive Summary\n   This RFC defines message encipherment and authentication\
    \ procedures,\n   as the initial phase of an effort to provide privacy enhancement\n\
    \   services for electronic mail transfer in the Internet.  Detailed key\n   management\
    \ mechanisms to support these procedures will be defined in\n   a subsequent RFC.\
    \  As a goal of this initial phase, it is intended\n   that the procedures defined\
    \ here be compatible with a wide range of\n   key management approaches, including\
    \ both conventional (symmetric)\n   and public-key (asymmetric) approaches for\
    \ encryption of data\n   encrypting keys.  Use of conventional cryptography for\
    \ message text\n   encryption and/or integrity check computation is anticipated.\n\
    \   Privacy enhancement services (confidentiality, authentication, and\n   message\
    \ integrity assurance) are offered through the use of\n   end-to-end cryptography\
    \ between originator and recipient User Agent\n   processes, with no special processing\
    \ requirements imposed on the\n   Message Transfer System at endpoints or at intermediate\
    \ relay\n   sites.  This approach allows privacy enhancement facilities to be\n\
    \   incorporated on a site-by-site or user-by-user basis without impact\n   on\
    \ other Internet entities.  Interoperability among heterogeneous\n   components\
    \ and mail transport facilities is supported.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   For descriptive purposes, this RFC uses some terms defined\
    \ in the OSI\n   X.400 Message Handling System Model per the 1984 CCITT\n   Recommendations.\
    \  This section replicates a portion of X.400's\n   Section 2.2.1, \"Description\
    \ of the MHS Model: Overview\" in order to\n   make the terminology clear to readers\
    \ who may not be familiar with\n   the OSI MHS Model.\n   In the [MHS] model,\
    \ a user is a person or a computer application.  A\n   user is referred to as\
    \ either an originator (when sending a message)\n   or a recipient (when receiving\
    \ one).  MH Service elements define the\n   set of message types and the capabilities\
    \ that enable an originator\n   to transfer messages of those types to one or\
    \ more recipients.\n   An originator prepares messages with the assistance of\
    \ his User\n   Agent.  A User Agent (UA) is an application process that interacts\n\
    \   with the Message Transfer System (MTS) to submit messages.  The MTS\n   delivers\
    \ to one or more recipient UAs the messages submitted to it.\n   Functions performed\
    \ solely by the UA and not standardized as part of\n   the MH Service elements\
    \ are called local UA functions.\n   The MTS is composed of a number of Message\
    \ Transfer Agents (MTAs).\n   Operating together, the MTAs relay messages and\
    \ deliver them to the\n   intended recipient UAs, which then make the messages\
    \ available to the\n   intended recipients.\n   The collection of UAs and MTAs\
    \ is called the Message Handling System\n   (MHS).  The MHS and all of its users\
    \ are collectively referred to as\n   the Message Handling Environment.\n"
- title: 3.  Services, Constraints, and Implications
  contents:
  - "3.  Services, Constraints, and Implications\n   This RFC defines mechanisms to\
    \ enhance privacy for electronic mail\n   transferred in the Internet.  The facilities\
    \ discussed in this RFC\n   provide privacy enhancement services on an end-to-end\
    \ basis between\n   sender and recipient UAs.  No privacy enhancements are offered\
    \ for\n   message fields which are added or transformed by intermediate relay\n\
    \   points.\n   Authentication and integrity facilities are always applied to\
    \ the\n   entirety of a message's text.  No facility for confidentiality\n   service\
    \ without authentication is provided.  Encryption facilities\n   may be applied\
    \ selectively to portions of a message's contents; this\n   allows less sensitive\
    \ portions of messages (e.g., descriptive fields)\n   to be processed by a recipient's\
    \ delegate in the absence of the\n   recipient's personal cryptographic keys.\
    \  In the limiting case, where\n   the entirety of message text is excluded from\
    \ encryption, this\n   feature can be used to yield the effective combination\
    \ of\n   authentication and integrity services without confidentiality.\n   In\
    \ keeping with the Internet's heterogeneous constituencies and usage\n   modes,\
    \ the measures defined here are applicable to a broad range of\n   Internet hosts\
    \ and usage paradigms.  In particular, it is worth\n   noting the following attributes:\n\
    \       1.  The mechanisms defined in this RFC are not restricted to a\n     \
    \      particular host or operating system, but rather allow\n           interoperability\
    \ among a broad range of systems.  All\n           privacy enhancements are implemented\
    \ at the application\n           layer, and are not dependent on any privacy features\
    \ at\n           lower protocol layers.\n       2.  The defined mechanisms are\
    \ compatible with non-enhanced\n           Internet components.  Privacy enhancements\
    \ are implemented\n           in an end-to-end fashion which does not impact mail\n\
    \           processing by intermediate relay hosts which do not\n           incorporate\
    \ privacy enhancement facilities.  It is\n           necessary, however, for a\
    \ message's sender to be cognizant\n           of whether a message's intended\
    \ recipient implements privacy\n           enhancements, in order that encoding\
    \ and possible\n           encipherment will not be performed on a message whose\n\
    \           destination is not equipped to perform corresponding inverse\n   \
    \        transformations.\n       3.  The defined mechanisms are compatible with\
    \ a range of mail\n           transport facilities (MTAs).  Within the Internet,\n\
    \           electronic mail transport is effected by a variety of SMTP\n     \
    \      implementations.  Certain sites, accessible via SMTP,\n           forward\
    \ mail into other mail processing environments (e.g.,\n           USENET, CSNET,\
    \ BITNET).  The privacy enhancements must be\n           able to operate across\
    \ the SMTP realm; it is desirable that\n           they also be compatible with\
    \ protection of electronic mail\n           sent between the SMTP environment\
    \ and other connected\n           environments.\n       4.  The defined mechanisms\
    \ offer compatibility with a broad\n           range of electronic mail user agents\
    \ (UAs).  A large variety\n           of electronic mail user agent programs,\
    \ with a corresponding\n           broad range of user interface paradigms, is\
    \ used in the\n           Internet.  In order that an electronic mail privacy\n\
    \           enhancement be available to the broadest possible user\n         \
    \  community, the selected mechanism should be usable with the\n           widest\
    \ possible variety of existing UA programs.  For\n           purposes of pilot\
    \ implementation, it is desirable that\n           privacy enhancement processing\
    \ be incorporable into a\n           separate program, applicable to a range of\
    \ UAs, rather than\n           requiring internal modifications to each UA with\
    \ which\n           enhanced privacy services are to be provided.\n       5. \
    \ The defined mechanisms allow electronic mail privacy\n           enhancement\
    \ processing to be performed on personal computers\n           (PCs) separate\
    \ from the systems on which UA functions are\n           implemented.  Given the\
    \ expanding use of PCs and the limited\n           degree of trust which can be\
    \ placed in UA implementations on\n           many multi-user systems, this attribute\
    \ can allow many users\n           to process privacy-enhanced mail with a higher\
    \ assurance\n           level than a strictly UA-based approach would allow.\n\
    \       6.  The defined mechanisms support privacy protection of\n           electronic\
    \ mail addressed to mailing lists.\n   In order to achieve applicability to the\
    \ broadest possible range of\n   Internet hosts and mail systems, and to facilitate\
    \ pilot\n   implementation and testing without the need for prior modifications\n\
    \   throughout the Internet, three basic restrictions are imposed on the\n   set\
    \ of measures to be considered in this RFC:\n       1.  Measures will be restricted\
    \ to implementation at endpoints\n           and will be amenable to integration\
    \ at the user agent (UA)\n           level or above, rather than necessitating\
    \ integration into\n           the message transport system (e.g., SMTP servers).\n\
    \       2.  The set of supported measures enhances rather than restricts\n   \
    \        user capabilities.  Trusted implementations, incorporating\n        \
    \   integrity features protecting software from subversion by\n           local\
    \ users, cannot be assumed in general.  In the absence\n           of such features,\
    \ it appears more feasible to provide\n           facilities which enhance user\
    \ services (e.g., by protecting\n           and authenticating inter-user traffic)\
    \ than to enforce\n           restrictions (e.g., inter-user access control) on\
    \ user\n           actions.\n       3.  The set of supported measures focuses\
    \ on a set of functional\n           capabilities selected to provide significant\
    \ and tangible\n           benefits to a broad user community.  By concentrating\
    \ on the\n           most critical set of services, we aim to maximize the added\n\
    \           privacy value that can be provided with a modest level of\n      \
    \     implementation effort.\n   As a result of these restrictions, the following\
    \ facilities can be\n   provided:\n           1.  disclosure protection,\n   \
    \        2.  sender authenticity, and\n           3.  message integrity measures,\n\
    \   but the following privacy-relevant concerns are not addressed:\n         \
    \  1.  access control,\n           2.  traffic flow confidentiality,\n       \
    \    3.  address list accuracy,\n           4.  routing control,\n           5.\
    \  issues relating to the serial reuse of PCs by multiple\n               users,\n\
    \           6.  assurance of message receipt and non-deniability of\n        \
    \       receipt,\n           7.  automatic association of acknowledgments with\
    \ the\n               messages to which they refer, and\n           8.  message\
    \ duplicate detection, replay prevention, or other\n               stream-oriented\
    \ services.\n   An important goal is that privacy enhancement mechanisms impose\
    \ a\n   minimum of burden on the users they serve.  In particular, this goal\n\
    \   suggests eventual automation of the key management mechanisms\n   supporting\
    \ message encryption and authentication.  In order to\n   facilitate deployment\
    \ and testing of pilot privacy enhancement\n   implementations in the near term,\
    \ however, compatibility with\n   out-of-band (e.g., manual) key distribution\
    \ must also be supported.\n   A message's sender will determine whether privacy\
    \ enhancements are to\n   be performed on a particular message.  Therefore, a\
    \ sender must be\n   able to determine whether particular recipients are equipped\
    \ to\n   process privacy-enhanced mail.  In a general architecture, these\n  \
    \ mechanisms will be based on server queries; thus, the query function\n   could\
    \ be integrated into a UA to avoid imposing burdens or\n   inconvenience on electronic\
    \ mail users.\n"
- title: 4.  Processing of Messages
  contents:
  - '4.  Processing of Messages

    '
- title: 4.1  Message Processing Overview
  contents:
  - "4.1  Message Processing Overview\n   This subsection provides a high-level overview\
    \ of the components and\n   processing steps involved in electronic mail privacy\
    \ enhancement\n   processing.  Subsequent subsections will define the procedures\
    \ in\n   more detail.\n   A two-level keying hierarchy is used to support privacy-enhanced\n\
    \   message transmission:\n       1.  Data Encrypting Keys (DEKs) are used for\
    \ encryption of\n           message text and (with certain choices among a set\
    \ of\n           alternative algorithms) for computation of message integrity\n\
    \           check quantities (MICs).  DEKs are generated individually\n      \
    \     for each transmitted message; no predistribution of DEKs is\n          \
    \ needed to support privacy-enhanced message transmission.\n       2.  Interchange\
    \ Keys (IKs) are used to encrypt DEKs for\n           transmission within messages.\
    \  An IK may be a single\n           symmetric cryptographic key or, where asymmetric\n\
    \           (public-key) cryptography is used to encrypt DEKs, the\n         \
    \  composition of a public component used by an originator and\n           a secret\
    \ component used by a recipient.  Ordinarily, the\n           same IK will be\
    \ used for all messages sent between a given\n           originator-recipient\
    \ pair over a period of time.  Each\n           transmitted message includes a\
    \ representation of the DEK(s)\n           used for message encryption and/or\
    \ authentication,\n           encrypted under an individual IK per named recipient.\
    \  This\n           representation is associated with sender and recipient\n \
    \          identification header fields, which enable recipients to\n        \
    \   identify the IKs used.  With this information, the recipient\n           can\
    \ decrypt the transmitted DEK representation, yielding\n           the DEK required\
    \ for message text decryption and/or MIC\n           verification.\n   When privacy\
    \ enhancement processing is to be performed on an outgoing\n   message, a DEK\
    \ is generated [1] for use in message encryption and a\n   variant of the DEK\
    \ is formed (if the chosen MIC algorithm requires a\n   key) for use in MIC computation.\
    \  An \"X-Sender-ID:\" field is included\n   in the header to provide one identification\
    \ component for the IK(s)\n   used for message processing.  An IK is selected\
    \ for each individually\n   identified recipient; a corresponding \"X-Recipient-ID:\"\
    \ field,\n   interpreted in the context of a prior \"X-Sender-ID:\" field, serves\
    \ to\n   identify each IK.  Each \"X-Recipient-ID:\" field is followed by an\n\
    \   \"X-Key-Info:\" field, which transfers the DEK and computed MIC.  The\n  \
    \ DEK and MIC are encrypted for transmission under the appropriate IK.\n   A four-phase\
    \ transformation procedure is employed in order to\n   represent encrypted message\
    \ text in a universally transmissible form\n   and to enable messages encrypted\
    \ on one type of system to be\n   decrypted on a different type.  A plaintext\
    \ message is accepted in\n   local form, using the host's native character set\
    \ and line\n   representation.  The local form is converted to a canonical message\n\
    \   text representation, defined as equivalent to the inter-SMTP\n   representation\
    \ of message text.  This canonical representation forms\n   the input to the encryption\
    \ and MIC computation processes.\n   For encryption purposes, the canonical representation\
    \ is padded as\n   required by the encryption algorithm.  The padded canonical\n\
    \   representation is encrypted (except for any regions explicitly\n   excluded\
    \ from encryption).  The canonically encoded representation is\n   encoded, after\
    \ encryption, into a printable form.  The printable form\n   is composed of a\
    \ restricted character set which is chosen to be\n   universally representable\
    \ across sites, and which will not be\n   disrupted by processing within and between\
    \ MTS entities.\n   The output of the encoding procedure is combined with a set\
    \ of header\n   fields carrying cryptographic control information.  The result\
    \ is\n   passed to the electronic mail system to be encapsulated as the text\n\
    \   portion of a transmitted message.\n   When a privacy-enhanced message is received,\
    \ the cryptographic\n   control fields within its text portion provide the information\n\
    \   required for the authorized recipient to perform MIC verification and\n  \
    \ decryption of the received message text.  First, the printable\n   encoding\
    \ is converted to a bitstring.  The MIC is verified.\n   Encrypted portions of\
    \ the transmitted message are decrypted, and the\n   canonical representation\
    \ is converted to the recipient's local form,\n   which need not be the same as\
    \ the sender's local form.\n"
- title: 4.2  Encryption Algorithms and Modes
  contents:
  - "4.2  Encryption Algorithms and Modes\n   For purposes of this RFC, the Block\
    \ Cipher Algorithm DEA-1, defined\n   in ISO draft international standard DIS\
    \ 8227 [2] shall be used for\n   encryption of message text.  The DEA-1 is equivalent\
    \ to the Data\n   Encryption Standard (DES), as defined in FIPS PUB 46 [3].  When\
    \ used\n   for encryption of text, the DEA-1 shall be used in the Cipher Block\n\
    \   Chaining (CBC) mode, as defined in ISO DIS 8372 [4].  The CBC mode\n   definition\
    \ in DIS 8372 is equivalent to that provided in FIPS PUB 81\n   [5].  A unique\
    \ initializing vector (IV) will be generated for and\n   transmitted with each\
    \ privacy-enhanced electronic mail message.\n   An algorithm other than DEA-1\
    \ may be employed, provided that it\n   satisfies the following requirements:\n\
    \           1.  It must be a 64-bit block cipher, enciphering and\n          \
    \     deciphering in 8-octet blocks.\n           2.  It is usable in the ECB and\
    \ CBC modes defined in DIS\n               8372.\n           3.  It is able to\
    \ be keyed using the procedures and\n               parameters defined in this\
    \ RFC.\n           4.  It is appropriate for MIC computation, if the selected\n\
    \               MIC computation algorithm is eCcryption-based.\n           5.\
    \  Cryptographic key field lengths are limited to 16 octets\n               in\
    \ length.\n   Certain operations require that one key be encrypted under another\n\
    \   key (interchange key) for purposes of transmission.  This encryption\n   may\
    \ be performed using symmetric cryptography by using DEA-1 in\n   Electronic Codebook\
    \ (ECB) mode.  A header facility is available to\n   indicate that an associated\
    \ key is to be used for encryption in\n   another mode (e.g., the Encrypt-Decrypt-Encrypt\
    \ (EDE) mode used for\n   key encryption and decryption with pairs of 64-bit keys,\
    \ as described\n   by ASC X3T1 [6], or public-key algorithms).\n   Support of\
    \ public key algorithms for key encryption is under active\n   consideration,\
    \ and it is intended that the procedures defined in this\n   RFC be appropriate\
    \ to allow such usage.  Support of key encryption\n   modes other than ECB is\
    \ optional for implementations, however.\n   Therefore, in support of universal\
    \ interoperability, interchange key\n   providers should not specify other modes\
    \ in the absence of a priori\n   information indicating that recipients are equipped\
    \ to perform key\n   encryption in other modes.\n"
- title: 4.3  Privacy Enhancement Message Transformations
  contents:
  - '4.3  Privacy Enhancement Message Transformations

    '
- title: 4.3.1  Constraints
  contents:
  - "4.3.1  Constraints\n   An electronic mail encryption mechanism must be compatible\
    \ with the\n   transparency constraints of its underlying electronic mail\n  \
    \ facilities.  These constraints are generally established based on\n   expected\
    \ user requirements and on the characteristics of anticipated\n   endpoint transport\
    \ facilities.  An encryption mechanism must also be\n   compatible with the local\
    \ conventions of the computer systems which\n   it interconnects.  In our approach,\
    \ a canonicalization step is\n   performed to abstract out local conventions and\
    \ a subsequent encoding\n   step is performed to conform to the characteristics\
    \ of the underlying\n   mail transport medium (SMTP).  The encoding conforms to\
    \ SMTP\n   constraints, established to support interpersonal messaging.  SMTP's\n\
    \   rules are also used independently in the canonicalization process.\n   RFC-821's\
    \ [7] Section 4.5 details SMTP's transparency constraints.\n   To encode a message\
    \ for SMTP transmission, the following requirements\n   must be met:\n       \
    \    1.  All characters must be members of the 7-bit ASCII\n               character\
    \ set.\n           2.  Text lines, delimited by the character pair <CR><LF>,\n\
    \               must be no more than 1000 characters long.\n           3.  Since\
    \ the string <CR><LF>.<CR><LF> indicates the end of a\n               message,\
    \ it must not occur in text prior to the end of a\n               message.\n \
    \  Although SMTP specifies a standard representation for line delimiters\n   (ASCII\
    \ <CR><LF>), numerous systems use a different native\n   representation to delimit\
    \ lines.  For example, the <CR><LF> sequences\n   delimiting lines in mail inbound\
    \ to UNIX(tm) systems are transformed\n   to single <LF>s as mail is written into\
    \ local mailbox files.  Lines\n   in mail incoming to record-oriented systems\
    \ (such as VAX VMS) may be\n   converted to appropriate records by the destination\
    \ SMTP [8] server.\n   As a result, if the encryption process generated <CR>s\
    \ or <LF>s,\n   those characters might not be accessible to a recipient UA program\
    \ at\n   a destination which uses different line delimiting conventions.  It\n\
    \   is also possible that conversion between tabs and spaces may be\n   performed\
    \ in the course of mapping between inter-SMTP and local\n   format; this is a\
    \ matter of local option.  If such transformations\n   changed the form of transmitted\
    \ ciphertext, decryption would fail to\n   regenerate the transmitted plaintext,\
    \ and a transmitted MIC would\n   fail to compare with that computed at the destination.\n\
    \   The conversion performed by an SMTP server at a system with EBCDIC as\n  \
    \ a native character set has even more severe impact, since the\n   conversion\
    \ from EBCDIC into ASCII is an information-losing\n   transformation.  In principle,\
    \ the transformation function mapping\n   between inter-SMTP canonical ASCII message\
    \ representation and local\n   format could be moved from the SMTP server up to\
    \ the UA, given a\n   means to direct that the SMTP server should no longer perform\
    \ that\n   transformation.  This approach has a major disadvantage: internal\n\
    \   file (e.g., mailbox) formats would be incompatible with the native\n   forms\
    \ used on the systems where they reside.  Further, it would\n   require modification\
    \ to SMTP servers, as mail would be passed to SMTP\n   in a different representation\
    \ than it is passed at present.\n"
- title: 4.3.2  Approach
  contents:
  - "4.3.2  Approach\n   Our approach to supporting privacy-enhanced mail across an\n\
    \   environment in which intermediate conversions may occur encodes mail\n   in\
    \ a fashion which is uniformly representable across the set of\n   privacy-enhanced\
    \ UAs regardless of their systems' native character\n   sets.  This encoded form\
    \ is used to represent mail text from sender\n   to recipient, but the encoding\
    \ is not applied to enclosing mail\n   transport headers or to encapsulated headers\
    \ inserted to carry\n   control information between privacy-enhanced UAs.  The\
    \ encoding's\n   characteristics are such that the transformations anticipated\
    \ between\n   sender and recipient UAs will not prevent an encoded message from\n\
    \   being decoded properly at its destination.\n   A sender may exclude one or\
    \ more portions of a message from\n   encryption processing.  Authentication processing\
    \ is always applied\n   to the entirety of message text.  Explicit action is required\
    \ to\n   exclude a portion of a message from encryption processing; by\n   default,\
    \ encryption is applied to the entirety of message text.  The\n   user-level delimiter\
    \ which specifies such exclusion is a local\n   matter, and hence may vary between\
    \ sender and recipient, but all\n   systems should provide a means for unambiguous\
    \ identification of\n   areas excluded from encryption processing.\n   An outbound\
    \ privacy-enhanced message undergoes four transformation\n   steps, described\
    \ in the following four subsections.\n"
- title: '4.3.2.1  Step 1: Local Form'
  contents:
  - "4.3.2.1  Step 1: Local Form\n   The message text is created in the system's native\
    \ character set,\n   with lines delimited in accordance with local convention.\n"
- title: '4.3.2.2  Step 2: Canonical Form'
  contents:
  - "4.3.2.2  Step 2: Canonical Form\n   The entire message text, including both those\
    \ portions subject to\n   encipherment processing and those portions excluded\
    \ from such\n   processing, is converted to the universal canonical form,\n  \
    \ equivalent to the inter-SMTP representation [9] as defined in\n   RFC-821 and\
    \ RFC-822 [10] (ASCII character set, <CR><LF> line\n   delimiters).  The processing\
    \ required to perform this conversion is\n   minimal on systems whose native character\
    \ set is ASCII.  Since a\n   message is converted to a standard character set\
    \ and representation\n   before encryption, it can be decrypted and its MIC can\
    \ be verified\n   at any destination system before any conversion necessary to\n\
    \   transform the message into a destination-specific local form is\n   performed.\n"
- title: '4.3.2.3  Step 3: Authentication and Encipherment'
  contents:
  - "4.3.2.3  Step 3: Authentication and Encipherment\n   The canonical form is input\
    \ to the selected MIC computation algorithm\n   in order to compute an integrity\
    \ check quantity for the message.  No\n   padding is added to the canonical form\
    \ before submission to the MIC\n   computation algorithm, although certain MIC\
    \ algorithms will apply\n   their own padding in the course of computing a MIC.\n\
    \   Padding is applied to the canonical form as needed to perform\n   encryption\
    \ in the DEA-1 CBC mode, as follows:  The number of octets\n   to be encrypted\
    \ is determined by subtracting the number of octets\n   excluded from encryption\
    \ from the total length of the encapsulated\n   text.  Octets with the hexadecimal\
    \ value FF (all ones) are appended\n   to the canonical form as needed so that\
    \ the text octets to be\n   encrypted, along with the added padding octets, fill\
    \ an integral\n   number of 8-octet encryption quanta.  No padding is applied\
    \ if the\n   number of octets to be encrypted is already an integral multiple\
    \ of\n   8.  The use of hexadecimal FF (a value outside the 7-bit ASCII set)\n\
    \   as a padding value allows padding octets to be distinguished from\n   valid\
    \ data without inclusion of an explicit padding count indicator.\n   The regions\
    \ of the message which have not been excluded from\n   encryption are encrypted.\
    \  To support selective encipherment\n   processing, an implementation must retain\
    \ internal indications of the\n   positions of excluded areas excluded from encryption\
    \ with relation to\n   non-excluded areas, so that those areas can be properly\
    \ delimited in\n   the encoding procedure defined in step 4.  If a region excluded\
    \ from\n   encryption intervenes between encrypted regions, cryptographic state\n\
    \   (e.g., IVs and accumulation of octets into encryption quanta) is\n   preserved\
    \ and continued after the excluded region.\n"
- title: '4.3.2.4  Step 4: Printable Encoding'
  contents:
  - "4.3.2.4  Step 4: Printable Encoding\n   The bit string resulting from step 3\
    \ is encoded into characters which\n   are universally representable at all sites,\
    \ though not necessarily\n   with the same bit patterns (e.g., although the character\
    \ \"E\" is\n   represented in an ASCII-based system as hexadecimal 45 and as\n\
    \   hexadecimal C5 in an EBCDIC-based system, the local significance of\n   the\
    \ two representations is equivalent).  This encoding step is\n   performed for\
    \ all privacy-enhanced messages.\n   A 64-character subset of International Alphabet\
    \ IA5 is used, enabling\n   6-bits to be represented per printable character.\
    \  (The proposed\n   subset of characters is represented identically in IA5 and\
    \ ASCII.)\n   Two additional characters, \"=\" and \"*\", are used to signify\
    \ special\n   processing functions.  The character \"=\" is used for padding within\n\
    \   the printable encoding procedure.  The character \"*\" is used to\n   delimit\
    \ the beginning and end of a region which has been excluded\n   from encipherment\
    \ processing.  The encoding function's output is\n   delimited into text lines\
    \ (using local conventions), with each line\n   containing 64 printable characters.\n\
    \   The encoding process represents 24-bit groups of input bits as output\n  \
    \ strings of 4 encoded characters. Proceeding from left to right across\n   a\
    \ 24-bit input group extracted from the output of step 3, each 6-bit\n   group\
    \ is used as an index into an array of 64 printable characters.\n   The character\
    \ referenced by the index is placed in the output string.\n   These characters,\
    \ identified in Table 1, are selected so as to be\n   universally representable,\
    \ and the set excludes characters with\n   particular significance to SMTP (e.g.,\
    \ \".\", \"<CR>\", \"<LF>\").\n   Special processing is performed if fewer than\
    \ 24-bits are available\n   in an input group, either at the end of a message\
    \ or (when the\n   selective encryption facility is invoked) at the end of an\
    \ encrypted\n   region or an excluded region.  In other words, a full encoding\n\
    \   quantum is always completed at the end of a message and before the\n   delimiter\
    \ \"*\" is output to initiate or terminate the representation\n   of a block excluded\
    \ from encryption.  When fewer than 24 input bits\n   are available in an input\
    \ group, zero bits are added (on the right)\n   to form an integral number of\
    \ 6-bit groups.  Output character\n   positions which are not required to represent\
    \ actual input data are\n   set to the character \"=\".  Since all canonically\
    \ encoded output is\n   an integral number of octets, only the following cases\
    \ can arise:\n   (1) the final quantum of encoding input is an integral multiple\
    \ of\n   24-bits; here, the final unit of encoded output will be an integral\n\
    \   multiple of 4 characters with no \"=\" padding, (2) the final quantum\n  \
    \ of encoding input is exactly 8-bits; here, the final unit of encoded\n   output\
    \ will be two characters followed by two \"=\" padding\n   characters, or (3)\
    \ the final quantum of encoding input is exactly\n   16-bits; here, the final\
    \ unit of encoded output will be three\n   characters followed by one \"=\" padding\
    \ character.\n   In summary, the outbound message is subjected to the following\n\
    \   composition of transformations:\n         Transmit_Form = Encode(Encipher(Canonicalize(Local_Form)))\n\
    \   The inverse transformations are performed, in reverse order, to\n   process\
    \ inbound privacy-enhanced mail:\n         Local_Form = DeCanonicalize(Decipher(Decode(Transmit_Form)))\n\
    \   Note that the local form and the functions to transform messages to\n   and\
    \ from canonical form may vary between the sender and recipient\n   systems without\
    \ loss of information.\n        Value Encoding Value Encoding Value Encoding Value\
    \ Encoding\n           0     A        17    R        34    i        51    z\n\
    \           1     B        18    S        35    j        52    0\n           2\
    \     C        19    T        36    k        53    1\n           3     D     \
    \   20    U        37    l        54    2\n           4     E        21    V \
    \       38    m        55    3\n           5     F        22    W        39  \
    \  n        56    4\n           6     G        23    X        40    o        57\
    \    5\n           7     H        24    Y        41    p        58    6\n    \
    \       8     I        25    Z        42    q        59    7\n           9   \
    \  J        26    a        43    r        60    8\n           10    K        27\
    \    b        44    s        61    9\n           11    L        28    c      \
    \  45    t        62    +\n           12    M        29    d        46    u  \
    \      63    /\n           13    N        30    e        47    v\n           14\
    \    O        31    f        48    w        (pad) =\n           15    P      \
    \  32    g        49    x\n           16    Q        33    h        50    y  \
    \      (1)   *\n   (1) The character \"*\" is used to delimit portions of an encoded\n\
    \   message to which encryption processing has not been applied.\n           \
    \            Printable Encoding Characters\n                                 \
    \ Table 1\n"
- title: 4.4  Encapsulation Mechanism
  contents:
  - "4.4  Encapsulation Mechanism\n   Encapsulation of privacy-enhanced messages within\
    \ an enclosing layer\n   of headers interpreted by the electronic mail transport\
    \ system offers\n   a number of advantages in comparison to a flat approach in\
    \ which\n   certain fields within a single header are encrypted and/or carry\n\
    \   cryptographic control information.  Encapsulation provides generality\n  \
    \ and segregates fields with user-to-user significance from those\n   transformed\
    \ in transit.  All fields inserted in the course of\n   encryption/authentication\
    \ processing are placed in the encapsulated\n   header.  This facilitates compatibility\
    \ with mail handling programs\n   which accept only text, not header fields, from\
    \ input files or from\n   other programs.  Further, privacy enhancement processing\
    \ can be\n   applied recursively.  As far as the MTS is concerned, information\n\
    \   incorporated into cryptographic authentication or encryption\n   processing\
    \ will reside in a message's text portion, not its header\n   portion.\n   The\
    \ encapsulation mechanism to be used for privacy-enhanced mail is\n   derived\
    \ from that described in RFC-934 [11] which is, in turn, based\n   on precedents\
    \ in the processing of message digests in the Internet\n   community.  To prepare\
    \ a user message for encrypted or authenticated\n   transmission, it will be transformed\
    \ into the representation shown in\n   Figure 1.\n   Enclosing Header Portion\n\
    \           (Contains header fields per RFC-822)\n   Blank Line\n            (Separates\
    \ Enclosing Header from Encapsulated Message)\n   Encapsulated Message\n     \
    \ Pre-Encapsulation Boundary (Pre-EB)\n          -----PRIVACY-ENHANCED MESSAGE\
    \ BOUNDARY-----\n      Encapsulated Header Portion\n          (Contains encryption\
    \ control fields inserted in plaintext.\n          Examples include \"X-IV:\"\
    , \"X-Sender-ID:\", and \"X-Key-Info:\".\n          Note that, although these\
    \ control fields have line-oriented\n          representations similar to RFC-822\
    \ header fields, the set of\n          fields valid in this context is disjoint\
    \ from those used in\n          RFC-822 processing.)\n      Blank Line\n     \
    \     (Separates Encapsulated Header from subsequent encoded\n          Encapsulated\
    \ Text Portion)\n      Encapsulated Text Portion\n          (Contains message\
    \ data encoded as specified in Section 4.3;\n          may incorporate protected\
    \ copies of \"Subject:\", etc.)\n      Post-Encapsulation Boundary (Post-EB)\n\
    \          -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n                     \
    \         Message Encapsulation\n                                     Figure 1\n\
    \   As a general design principle, sensitive data is protected by\n   incorporating\
    \ the data within the encapsulated text rather than by\n   applying measures selectively\
    \ to fields in the enclosing header.\n   Examples of potentially sensitive header\
    \ information may include\n   fields such as \"Subject:\", with contents which\
    \ are significant on an\n   end-to-end, inter-user basis.  The (possibly empty)\
    \ set of headers to\n   which protection is to be applied is a user option.  It\
    \ is strongly\n   recommended, however, that all implementations should replicate\n\
    \   copies of \"X-Sender-ID:\" and \"X-Recipient-ID:\" fields within the\n   encapsulated\
    \ text and include those replicated fields in encryption\n   and MIC computations.\n\
    \   If a user wishes disclosure protection for header fields, they must\n   occur\
    \ only in the encapsulated text and not in the enclosing or\n   encapsulated header.\
    \  If disclosure protection is desired for a\n   message's subject indication,\
    \ it is recommended that the enclosing\n   header contain a \"Subject:\" field\
    \ indicating that \"Encrypted Mail\n   Follows\".\n   If an authenticated version\
    \ of header information is desired, that\n   data can be replicated within the\
    \ encapsulated text portion in\n   addition to its inclusion in the enclosing\
    \ header.  For example, a\n   sender wishing to provide recipients with a protected\
    \ indication of a\n   message's position in a series of messages could include\
    \ a copy of a\n   timestamp or message counter field within the encapsulated text.\n\
    \   A specific point regarding the integration of privacy-enhanced mail\n   facilities\
    \ with the message encapsulation mechanism is worthy of\n   note.  The subset\
    \ of IA5 selected for transmission encoding\n   intentionally excludes the character\
    \ \"-\", so encapsulated text can be\n   distinguished unambiguously from a message's\
    \ closing encapsulation\n   boundary (Post-EB) without recourse to character stuffing.\n"
- title: 4.5  Mail for Mailing Lists
  contents:
  - "4.5  Mail for Mailing Lists\n   When mail is addressed to mailing lists, two\
    \ different methods of\n   processing can be applicable: the IK-per-list method\
    \ and the IK-\n   perrecipient method.  The choice depends on the information\
    \ available\n   to the sender and on the sender's preference.\n   If a message's\
    \ sender addresses a message to a list name or alias,\n   use of an IK associated\
    \ with that name or alias as a entity (IK-\n   perlist), rather than resolution\
    \ of the name or alias to its\n   constituent destinations, is implied.  Such\
    \ an IK must, therefore, be\n   available to all list members.  For the case of\
    \ public-key\n   cryptography, the secret component of the composite IK must be\n\
    \   available to all list members.  This alternative will be the normal\n   case\
    \ for messages sent via remote exploder sites, as a sender to such\n   lists may\
    \ not be cognizant of the set of individual recipients.\n   Unfortunately, it\
    \ implies an undesirable level of exposure for the\n   shared IK or component,\
    \ and makes its revocation difficult.\n   Moreover, use of the IK-per-list method\
    \ allows any holder of the\n   list's IK to masquerade as another sender to the\
    \ list for\n   authentication purposes.\n   If, in contrast, a message's sender\
    \ is equipped to expand the\n   destination mailing list into its individual constituents\
    \ and elects\n   to do so (IK-per-recipient), the message's DEK and MIC will be\n\
    \   encrypted under each per-recipient IK and all such encrypted\n   representations\
    \ will be incorporated into the transmitted message.\n   Note that per-recipient\
    \ encryption is required only for the\n   relatively small DEK and MIC quantities\
    \ carried in the X-Key-Info\n   field, not for the message text which is, in general,\
    \ much larger.\n   Although more IKs are involved in processing under the IK-\n\
    \   perrecipient method, the pairwise IKs can be individually revoked and\n  \
    \ possession of one IK does not enable a successful masquerade of\n   another\
    \ user on the list.\n"
- title: 4.6  Summary of Added Header and Control Fields
  contents:
  - "4.6  Summary of Added Header and Control Fields\n   This section summarizes the\
    \ syntax and semantics of the new\n   encapsulated header fields to be added to\
    \ messages in the course of\n   privacy enhancement processing.  In certain indicated\
    \ cases, it is\n   recommended that the fields be replicated within the encapsulated\n\
    \   text portion as well.  Figure 2 shows the appearance of a small\n   example\
    \ encapsulated message using these fields.  The example assumes\n   the use of\
    \ symmetric cryptography; no \"X-Certificate:\" field is\n   carried.  In all\
    \ cases, hexadecimal quantities are represented as\n   contiguous strings of digits,\
    \ where each digit is represented by a\n   character from the ranges \"0\"-\"\
    9\" or upper case \"A\"-\"F\".  Unless\n   otherwise specified, all arguments\
    \ are to be processed in a\n   casesensitive fashion.\n   Although the encapsulated\
    \ header fields resemble RFC-822 header\n   fields, they are a disjoint set and\
    \ will not in general be processed\n   by the same parser which operates on enclosing\
    \ header fields.  The\n   complexity of lexical analysis needed and appropriate\
    \ for\n   encapsulated header field processing is significantly less than that\n\
    \   appropriate to RFC-822 header processing.  For example, many\n   characters\
    \ with special significance to RFC-822 at the syntactic\n   level have no such\
    \ significance within encapsulated header fields.\n   When the length of an encapsulated\
    \ header field is longer than the\n   size conveniently printable on a line, whitespace\
    \ may be used between\n   the subfields of these fields to fold them in the manner\
    \ of RFC-822,\n   section 3.1.1.  Any such inserted whitespace is not to be interpreted\n\
    \   as a part of a subfield.\n   -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n\
    \   X-Proc-Type: 2\n   X-IV: F8143EDE5960C597\n   X-Sender-ID: linn@ccy.bbn.com:::\n\
    \   X-Recipient-ID: linn@ccy.bbn.com:ptf-kmc:3:BMAC:ECB\n   X-Key-Info: 9FD3AAD2F2691B9A,B70665BB9BF7CBCD\n\
    \   X-Recipient-ID: privacy-tf@venera.isi.edu:ptf-kmc:4:BMAC:ECB\n   X-Key-Info:\
    \ 161A3F75DC82EF26,E2EF532C65CBCFF7\n   LLrHB0eJzyhP+/fSStdW8okeEnv47jxe7SJ/iN72ohNcUk2jHEUSoH1nvNSIWL9M\n\
    \   8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLpvXR0UrUzYbkNpk0agV2IzUpk\n   J6UiRRGcDSvzrsoK+oNvqu6z7Xs5Xfz5rDqUcMlK1Z6720dcBWGGsDLpTpSCnpot\n\
    \   dXd/H5LMDWnonNvPCwQUHt==\n    -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n\
    \                       Example Encapsulated Message\n                       \
    \          Figure 2\n"
- title: 4.6.1  X-Certificate Field
  contents:
  - "4.6.1  X-Certificate Field\n   The X-Certificate encapsulated header field is\
    \ used only when\n   public-key certificate key management is employed.  It transfers\
    \ a\n   sender's certificate as a string of hexadecimal digits.  The\n   semantics\
    \ of a certificate are discussed in Section 5.3,\n   Certificates.  The certificate\
    \ carried in an X-Certificate field is\n   used in conjunction with all subsequent\
    \ X-Sender-ID and X-RecipientID\n   fields until another X-Certificate field occurs;\
    \ the ordinary case\n   will be that only a single X-Certificate field will occur,\
    \ prior to\n   any X-Sender-ID and X-Recipient-ID fields.\n   Due to the length\
    \ of a certificate, it may need to be folded across\n   multiple printed lines.\
    \  In order to enable such folding to be\n   performed, the hexadecimal digits\
    \ representing the contents of a\n   certificate are to be divided into an ordered\
    \ set (with more\n   significant digits first) of zero or more 64-digit groups,\
    \ followed\n   by a final digit group which may be any length up to 64-digits.\
    \  A\n   single whitespace character is interposed between each pair of groups\n\
    \   so that folding (per RFC-822, section 3.1.1) may take place; this\n   whitespace\
    \ is ignored in parsing the received digit string.\n"
- title: 4.6.2  X-IV Field
  contents:
  - "4.6.2  X-IV Field\n   The X-IV encapsulated header field carries the Initializing\
    \ Vector\n   used for message encryption.  Only one X-IV field occurs in a\n \
    \  message.  It appears in all messages, even if the entirety of message\n   text\
    \ is excluded from encryption.  Following the field name, and one\n   or more\
    \ delimiting whitespace characters, a 64-bit Initializing\n   Vector is represented\
    \ as a contiguous string of 16 hexadecimal\n   digits.\n"
- title: 4.6.3  X-Key-Info Field
  contents:
  - "4.6.3  X-Key-Info Field\n   The X-Key-Info encapsulated header field transfers\
    \ two items: a DEK\n   and a MIC.  One X-Key-Info field is included for each of\
    \ a message's\n   named recipients.  The DEK and MIC are encrypted under the IK\n\
    \   identified by a preceding X-Recipient-ID field and prior X-Sender-ID\n   field;\
    \ they are represented as two strings of contiguous hexadecimal\n   digits, separated\
    \ by a comma.  For DEA-1, the DEK representation will\n   be 16 hexadecimal digits\
    \ (corresponding to a 64-bit key); this\n   subfield can be extended to 32 hexadecimal\
    \ digits (corresponding to a\n   128-bit key), if required to support other algorithms.\
    \  MICs are also\n   represented as contiguous strings of hexadecimal digits.\
    \  The size of\n   a MIC is dependent on the choice of MIC algorithm as specified\
    \ in the\n   X-Recipient-ID field corresponding to a given recipient.\n"
- title: 4.6.4  X-Proc-Type Field
  contents:
  - "4.6.4  X-Proc-Type Field\n   The X-Proc-Type encapsulated header field identifies\
    \ the type of\n   processing performed on the transmitted message.  Only one X-ProcType\n\
    \   field occurs in a message.  It has one subfield, a decimal number\n   which\
    \ is used to distinguish among incompatible encapsulated header\n   field interpretations\
    \ which may arise as changes are made to this\n   standard.  Messages processed\
    \ according to this RFC will carry the\n   subfield value \"2\".\n"
- title: 4.6.5  X-Sender-ID Field
  contents:
  - "4.6.5  X-Sender-ID Field\n   The X-Sender-ID encapsulated header field provides\
    \ the sender's\n   interchange key identification component.  It should be replicated\n\
    \   within the encapsulated text.  The interchange key identification\n   component\
    \ carried in an X-Sender-ID field is used in conjunction with\n   all subsequent\
    \ X-Recipient-ID fields until another X-Sender-ID field\n   occurs; the ordinary\
    \ case will be that only a single X-Sender-ID\n   field will occur, prior to any\
    \ X-Recipient-ID fields.\n   The X-Sender-ID field contains (in order) an Entity\
    \ Identifier\n   subfield, an (optional) Issuing Authority subfield, an (optional)\n\
    \   Version/Expiration subfield, and an (optional) IK Use Indicator\n   subfield.\
    \  The optional subfields are omitted if their use is\n   rendered redundant by\
    \ information carried in subsequent X-RecipientID\n   fields; this will ordinarily\
    \ be the case where symmetric cryptography\n   is used for key management.  The\
    \ subfields are delimited by the colon\n   character (\":\"), optionally followed\
    \ by whitespace.\n   Section 5.2, Interchange Keys, discusses the semantics of\
    \ these\n   subfields and specifies the alphabet from which they are chosen.\n\
    \   Note that multiple X-Sender-ID fields may occur within a single\n   encapsulated\
    \ header.  All X-Recipient-ID fields are interpreted in\n   the context of the\
    \ most recent preceding X-Sender-ID field; it is\n   illegal for an X-Recipient-ID\
    \ field to occur in a header before an\n   X-Sender-ID has been provided.\n"
- title: 4.6.6  X-Recipient-ID Field
  contents:
  - "4.6.6  X-Recipient-ID Field\n   The X-Recipient-ID encapsulated header field\
    \ provides the recipient's\n   interchange key identification component.  One\
    \ X-Recipient-ID field\n   is included for each of a message's named recipients.\
    \  It should be\n   replicated within the encapsulated text.  The field contains\
    \ (in\n   order) an Entity Identifier subfield, an Issuing Authority subfield,\n\
    \   a Version/Expiration subfield, a MIC algorithm indicator subfield,\n   and\
    \ an IK Use Indicator subfield.  The subfields are delimited by the\n   colon\
    \ character (\":\"), optionally followed by whitespace.\n   The MIC algorithm\
    \ indicator is an ASCII string, selected from the\n   values defined in Appendix\
    \ A of this RFC.  Section 5.2, Interchange\n   Keys, discusses the semantics of\
    \ the other subfields and specifies\n   the alphabet from which they are chosen.\
    \  All X-Recipient-ID\n   fields are interpreted in the context of the most recent\
    \ preceding\n   XSender-ID field; it is illegal for an X-Recipient-ID field to\n\
    \   occur in a header before an X-Sender-ID has been provided.\n"
- title: 5.  Key Management
  contents:
  - "5.  Key Management\n   Several cryptographic constructs are involved in supporting\
    \ the\n   privacy-enhanced message processing procedure.  While (as noted in\n\
    \   the Executive Summary section of this RFC), key management mechanisms\n  \
    \ have not yet been fully defined, a set of fundamental elements are\n   assumed.\
    \  Data Encrypting Keys (DEKs) are used to encrypt message\n   text and in the\
    \ message integrity check (MIC) computation process.\n   Interchange Keys (IKs)\
    \ are used to encrypt DEKs for transmission with\n   messages.  In an asymmetric\
    \ key management architecture, certificates\n   are used as a means to provide\
    \ entities' public key components and\n   other information in a fashion which\
    \ is securely bound by a central\n   authority.  The remainder of this section\
    \ provides more information\n   about these constructs.\n"
- title: 5.1  Data Encrypting Keys (DEKs)
  contents:
  - "5.1  Data Encrypting Keys (DEKs)\n   Data Encrypting Keys (DEKs) are used for\
    \ encryption of message text\n   and for computation of message integrity check\
    \ quantities (MICs).  It\n   is strongly recommended that DEKs be generated and\
    \ used on a one-time\n   basis.  A transmitted message will incorporate a representation\
    \ of\n   the DEK encrypted under an appropriate interchange key (IK) for each\n\
    \   the authorized recipient.\n   DEK generation can be performed either centrally\
    \ by key distribution\n   centers (KDCs) or by endpoint systems.  Dedicated KDC\
    \ systems may be\n   able to implement better algorithms for random DEK generation\
    \ than\n   can be supported in endpoint systems.  On the other hand,\n   decentralization\
    \ allows endpoints to be relatively self-sufficient,\n   reducing the level of\
    \ trust which must be placed in components other\n   than a message's originator\
    \ and recipient.  Moreover, decentralized\n   DEK generation at endpoints reduces\
    \ the frequency with which senders\n   must make real-time queries of (potentially\
    \ unique) servers in order\n   to send mail, enhancing communications availability.\n\
    \   When symmetric cryptography is used, one advantage of centralized\n   KDC-based\
    \ generation is that DEKs can be returned to endpoints\n   already encrypted under\
    \ the IKs of message recipients rather than\n   providing the IKs to the senders.\
    \  This reduces IK exposure and\n   simplifies endpoint key management requirements.\
    \  This approach has\n   less value if asymmetric cryptography is used for key\
    \ management,\n   since per-recipient public IK components are assumed to be generally\n\
    \   available and per-sender secret IK components need not necessarily be\n  \
    \ shared with a KDC.\n"
- title: 5.2  Interchange Keys (IKs)
  contents:
  - "5.2  Interchange Keys (IKs)\n   Interchange Keys (IKs) are used to encrypt Data\
    \ Encrypting Keys.  In\n   general, IK granularity is at the pairwise per-user\
    \ level except for\n   mail sent to address lists comprising multiple users. \
    \ In order for\n   two principals to engage in a useful exchange of privacy-enhanced\n\
    \   electronic mail using conventional cryptography, they must first\n   share\
    \ a common interchange key.  When symmetric cryptography is used,\n   the interchange\
    \ key consists of a single component.  When asymmetric\n   cryptography is used,\
    \ an originator and recipient must possess an\n   asymmetric key's public and\
    \ secret components, as appropriate.  This\n   pair of components, when composed,\
    \ constitute an interchange key.\n   While this RFC does not prescribe the means\
    \ by which interchange keys\n   are provided to appropriate parties, it is useful\
    \ to note that such\n   means may be centralized (e.g., via key management servers)\
    \ or\n   decentralized (e.g., via pairwise agreement and direct distribution\n\
    \   among users).  In any case, any given IK component is associated with\n  \
    \ a responsible Issuing Authority (IA).  When an IA generates and\n   distributes\
    \ an IK, associated control information is provided to\n   direct how that IK\
    \ is to be used.  In order to select the appropriate\n   IK to use in message\
    \ encryption, a sender must retain a\n   correspondence between IK components\
    \ and the recipients with which\n   they are associated.  Expiration date information\
    \ must also be\n   retained, in order that cached entries may be invalidated and\n\
    \   replaced as appropriate.\n   Since a message may be sent with multiple IK\
    \ component\n   representations, corresponding to multiple intended recipients,\
    \ each\n   recipient must be able to determine which IK component is intended\n\
    \   for it.  Moreover, if no corresponding IK component is available in\n   the\
    \ recipient's database when a message arrives, the recipient must\n   be able\
    \ to determine which IK component to request and to identify\n   that IK component's\
    \ associated IA.  Note that different IKs may be\n   used for different messages\
    \ between a pair of communicants.\n   Consider, for example, one message sent\
    \ from A to B and another\n   message sent (using the IK-per-list method) from\
    \ A to a mailing list\n   of which B is a member.  The first message would use\
    \ IK components\n   associated individually with A and B, but the second would\
    \ use an IK\n   component shared among list members.\n   When a privacy-enhanced\
    \ message is transmitted, an indication of the\n   IK components used for DEK\
    \ encryption must be included.  To this end,\n   the \"X-Sender-ID:\" and \"X-Recipient-ID:\"\
    \ encapsulated header fields\n   provide the following data:\n         1.  Identification\
    \ of the relevant Issuing Authority (IA\n             subfield).\n         2.\
    \  Identification of an entity with which a particular IK\n             component\
    \ is associated (Entity Identifier or EI\n             subfield).\n         3.\
    \  Indicator of IK usage mode (IK use indicator subfield).\n         4.  Version/Expiration\
    \ subfield.\n   The colon character (\":\") is used to delimit the subfields within\
    \ an\n   \"X-Sender-ID:\" or \"X-Recipient-ID:\".  The IA, EI, and\n   version/expiration\
    \ subfields are generated from a restricted\n   character set, as prescribed by\
    \ the following BNF (using notation as\n   defined in RFC-822, sections 2 and\
    \ 3.3):\n   IKsubfld       :=       1*ia-char\n   ia-char        :=       DIGIT\
    \ / ALPHA / \"'\" / \"+\" / \"(\" / \")\" /\n                           \",\"\
    \ / \".\" / \"/\" / \"=\" / \"?\" / \"-\" / \"@\" /\n                        \
    \   \"%\" / \"!\" / '\"' / \"_\" / \"<\" / \">\"\n   An example X-Recipient-ID:\
    \ field is as follows:\n               X-Recipient-ID: linn@ccy.bbn.com:ptf-kmc:2:BMAC:ECB\n\
    \   This example field indicates that IA \"ptf-kmc\" has issued an IK\n   component\
    \ for use on messages sent to \"linn@ccy.bbn.com\", that the IA\n   has provided\
    \ the number 2 as a version indicator for that IK\n   component, that the BMAC\
    \ MIC computation algorithm is to be used for\n   the recipient, and that the\
    \ IK component is to be used in ECB mode.\n"
- title: 5.2.1  Subfield Definitions
  contents:
  - "5.2.1  Subfield Definitions\n   The following subsections define the subfields\
    \ of \"X-Sender-ID:\" and\n   \"X-Recipient-ID:\" fields.\n"
- title: 5.2.1.1  Entity Identifier Subfield
  contents:
  - "5.2.1.1  Entity Identifier Subfield\n   An entity identifier is constructed as\
    \ an IKsubfld.  More\n   restrictively, an entity identifier subfield assumes\
    \ the following\n   form:\n                      <user>@<domain-qualified-host>\n\
    \   In order to support universal interoperability, it is necessary to\n   assume\
    \ a universal form for the naming information.  For the case of\n   installations\
    \ which transform local host names before transmission\n   into the broader Internet,\
    \ it is strongly recommended that the host\n   name as presented to the Internet\
    \ be employed.\n"
- title: 5.2.1.2  Issuing Authority Subfield
  contents:
  - "5.2.1.2  Issuing Authority Subfield\n   An IA identifier subfield is constructed\
    \ as an IKsubfld.  IA\n   identifiers must be assigned in a manner which assures\
    \ uniqueness.\n   This can be done on a centralized or hierarchic basis.\n"
- title: 5.2.1.3  Version/Expiration Subfield
  contents:
  - "5.2.1.3  Version/Expiration Subfield\n   A version/expiration subfield is constructed\
    \ as an IKsubfld.  The\n   version/expiration subfield format may vary among different\
    \ IAs, but\n   must satisfy certain functional constraints.  An IA's\n   version/expiration\
    \ subfields must be sufficient to distinguish among\n   the set of IK components\
    \ issued by that IA for a given identified\n   entity.  Use of a monotonically\
    \ increasing number is sufficient to\n   distinguish among the IK components provided\
    \ for an entity by an IA;\n   use of a timestamp additionally allows an expiration\
    \ time or date to\n   be prescribed for an IK component.\n"
- title: 5.2.1.4  MIC Algorithm Identifier Subfield
  contents:
  - "5.2.1.4  MIC Algorithm Identifier Subfield\n   The MIC algorithm identifier,\
    \ which occurs only within X-Recipient-ID\n   fields, is used to identify the\
    \ choice of message integrity check\n   algorithm for a given recipient.  Appendix\
    \ A of this RFC specifies\n   the defined values for this subfield.\n"
- title: 5.2.1.5  IK Use Indicator Subfield
  contents:
  - "5.2.1.5  IK Use Indicator Subfield\n   The IK use indicator subfield is an optional\
    \ facility, provided to\n   identify the encryption mode in which an IK component\
    \ is to be used.\n   Currently, this subfield may assume the following reserved\
    \ string\n   values: \"ECB\", \"EDE\", \"RSA256\", \"RSA512\", and \"RSA1024\"\
    ; the default\n   value is \"ECB\".\n"
- title: 5.2.2  IK Cryptoperiod Issues
  contents:
  - "5.2.2  IK Cryptoperiod Issues\n   An IK component's cryptoperiod is dictated\
    \ in part by a tradeoff\n   between key management overhead and revocation responsiveness.\
    \  It\n   would be undesirable to delete an IK component permanently before\n\
    \   receipt of a message encrypted using that IK component, as this would\n  \
    \ render the message permanently undecipherable.  Access to an expired\n   IK\
    \ component would be needed, for example, to process mail received\n   by a user\
    \ (or system) which had been inactive for an extended period\n   of time.  In\
    \ order to enable very old IK components to be deleted, a\n   message's recipient\
    \ desiring encrypted local long term storage should\n   transform the DEK used\
    \ for message text encryption via re-encryption\n   under a locally maintained\
    \ IK, rather than relying on IA maintenance\n   of old IK components for indefinite\
    \ periods.\n"
- title: 5.3 Certificates
  contents:
  - "5.3 Certificates\n   In an asymmetric key management architecture, a certificate\
    \ binds an\n   entity's public key component to a representation of the entity's\n\
    \   identity and other attributes of the entity.  A certificate's issuing\n  \
    \ authority signs the certificate, vouching for the correspondence\n   between\
    \ the entity's identity, attributes, and associated public key\n   component.\
    \  Once signed, certificate copies may be posted on multiple\n   servers in order\
    \ to make recipients' certificates directly accessible\n   to originators at dispersed\
    \ locations.  This allows privacy-enhanced\n   mail to be sent between an originator\
    \ and a recipient without prior\n   placement of a pairwise key at the originator\
    \ and recipient, greatly\n   enhancing mail system flexibility.  The properties\
    \ of a certificate's\n   authority-applied signature make it unnecessary to be\
    \ concerned about\n   the prospect that servers, or other entities, could undetectably\n\
    \   modify certificate contents so as to associate a public key with an\n   inappropriate\
    \ entity.\n   Per the 1988 CCITT Recommendations X.411 [12] and X.509 [13], a\n\
    \   subject's certificate is defined to contain the following parameters:\n  \
    \         1.  A signature algorithm identifier, identifying the\n            \
    \   algorithm used by the certificate's issuer to compute the\n              \
    \ signature applied to the certificate.\n           2.  Issuer identification,\
    \ identifying the certificate's\n               issuer with an O/R name.\n   \
    \        3.  Validity information, providing date and time limits\n          \
    \     before and after which the certificate should not be\n               used.\n\
    \           4.  Subject identification, identifying the certificate's\n      \
    \         subject with an O/R name.\n           5.  Subject's public key.\n  \
    \         6.  Algorithm identifier, identifying the algorithm with\n         \
    \      which the subject's public key is to be used.\n           7.  Signature,\
    \ an asymmetrically encrypted, hashed version of\n               the above parameters,\
    \ computed by the certificate's\n               issuer.\n   The Recommendations\
    \ specify an ASN.1 encoding to define a\n   certificate.  Pending further study,\
    \ it is recommended that\n   electronic mail privacy enhancement implementations\
    \ using asymmetric\n   cryptography for key management employ this encoding for\n\
    \   certificates.  Section 4.2.3 of RFC-987 [14] specifies a procedure\n   for\
    \ mapping RFC-822 addresses into the O/R names used in X.411/X.509\n   certificates.\n"
- title: 6.  User Naming
  contents:
  - '6.  User Naming

    '
- title: 6.1  Current Approach
  contents:
  - "6.1  Current Approach\n   Unique naming of electronic mail users, as is needed\
    \ in order to\n   select corresponding keys correctly, is an important topic and\
    \ one\n   requiring significant study.  A logical association exists between\n\
    \   key distribution and name/directory server functions; their\n   relationship\
    \ is a topic deserving further consideration.  These\n   issues have not been\
    \ fully resolved at this writing.  The current\n   architecture relies on association\
    \ of IK components with user names\n   represented in a universal form (\"user@host\"\
    ), relying on the\n   following properties:\n       1.  The universal form must\
    \ be specifiable by an IA as it\n           distributes IK components and known\
    \ to a UA as it processes\n           received IK components and IK component\
    \ identifiers.  If a\n           UA or IA uses addresses in a local form which\
    \ is different\n           from the universal form, it must be able to perform\
    \ an\n           unambiguous mapping from the universal form into the local\n\
    \           representation.\n       2.  The universal form, when processed by\
    \ a sender UA, must have\n           a recognizable correspondence with the form\
    \ of a recipient\n           address as specified by a user (perhaps following\
    \ local\n           transformation from an alias into a universal form).\n   It\
    \ is difficult to ensure these properties throughout the Internet.\n   For example,\
    \ an MTS which transforms address representations between\n   the local form used\
    \ within an organization and the universal form as\n   used for Internet mail\
    \ transmission may cause property 2 to be\n   violated.\n"
- title: 6.2  Issues for Consideration
  contents:
  - "6.2  Issues for Consideration\n   The use of flat (non-hierarchic) electronic\
    \ mail user identifiers,\n   which are unrelated to the hosts on which the users\
    \ reside, may offer\n   value.  Personal characteristics, like social security\
    \ numbers, might\n   be considered.  Individually-selected identifiers could be\
    \ registered\n   with a central authority, but a means to resolve name conflicts\
    \ would\n   be necessary.\n   A point of particular note is the desire to accommodate\
    \ multiple\n   names for a single individual, in order to represent and allow\n\
    \   delegation of various roles in which that individual may act.  A\n   naming\
    \ mechanism that binds user roles to keys is needed.  Bindings\n   cannot be immutable\
    \ since roles sometimes change (e.g., the\n   comptroller of a corporation is\
    \ fired).\n   It may be appropriate to examine the prospect of extending the\n\
    \   DARPA/DoD domain system and its associated name servers to resolve\n   user\
    \ names to unique user IDs.  An additional issue arises with\n   regard to mailing\
    \ list support: name servers do not currently perform\n   (potentially recursive)\
    \ expansion of lists into users.  ISO and CSNet\n   are working on user-level\
    \ directory service mechanisms, which may\n   also bear consideration.\n"
- title: 7.  Example User Interface and Implementation
  contents:
  - "7.  Example User Interface and Implementation\n   In order to place the mechanisms\
    \ and approaches discussed in this RFC\n   into context, this section presents\
    \ an overview of a prototype\n   implementation.  This implementation is a standalone\
    \ program which is\n   invoked by a user, and lies above the existing UA sublayer.\
    \  In the\n   UNIX(tm) system, and possibly in other environments as well, such\
    \ a\n   program can be invoked as a \"filter\" within an electronic mail UA or\n\
    \   a text editor, simplifying the sequence of operations which must be\n   performed\
    \ by the user.  This form of integration offers the advantage\n   that the program\
    \ can be used in conjunction with a range of UA\n   programs, rather than being\
    \ compatible only with a particular UA.\n   When a user wishes to apply privacy\
    \ enhancements to an outgoing\n   message, the user prepares the message's text\
    \ and invokes the\n   standalone program (interacting with the program in order\
    \ to provide\n   address information and other data required to perform privacy\n\
    \   enhancement processing), which in turn generates output suitable for\n   transmission\
    \ via the UA.  When a user receives a privacy-enhanced\n   message, the UA delivers\
    \ the message in encrypted form, suitable for\n   decryption and associated processing\
    \ by the standalone program.\n   In this prototype implementation, a cache of\
    \ IK components is\n   maintained in a local file, with entries managed manually\
    \ based on\n   information provided by originators and recipients.  This cache\
    \ is,\n   effectively, a simple database.  IK components are selected for\n  \
    \ transmitted messages based on the sender's identity and on recipient\n   names,\
    \ and corresponding \"X-Sender-ID:\" and \"X-Recipient-ID:\" fields\n   are placed\
    \ into the message's encapsulated header.  When a message is\n   received, these\
    \ fields are used as a basis for a lookup in the\n   database, yielding the appropriate\
    \ IK component entries.  DEKs and\n   IVs are generated dynamically within the\
    \ program.\n   Options and destination addresses are selected by command line\n\
    \   arguments to the standalone program.  The function of specifying\n   destination\
    \ addresses to the privacy enhancement program is logically\n   distinct from\
    \ the function of specifying the corresponding addresses\n   to the UA for use\
    \ by the MTS.  This separation results from the fact\n   that, in many cases,\
    \ the local form of an address as specified to a\n   UA differs from the Internet\
    \ global form as used in \"X-Sender-ID:\"\n   and \"X-Recipient-ID:\" fields.\n"
- title: 8.  Areas For Further Study
  contents:
  - "8.  Areas For Further Study\n   The procedures defined in this RFC are sufficient\
    \ to support pilot\n   implementation of privacy-enhanced electronic mail transmission\
    \ among\n   cooperating parties in the Internet.  Further effort will be needed,\n\
    \   however, to enhance robustness, generality, and interoperability.  In\n  \
    \ particular, further work is needed in the following areas:\n       1.  User\
    \ naming techniques, and their relationship to the domain\n           system,\
    \ name servers, directory services, and key management\n           functions.\n\
    \       2.  Standardization of Issuing Authority functions, including\n      \
    \     protocols for communications among IAs and between User\n           Agents\
    \ and IAs.\n       3.  Specification of public key encryption algorithms to encrypt\n\
    \           data encrypting keys.\n       4.  Interoperability with X.400 mail.\n\
    \   We anticipate generation of subsequent RFCs which will address these\n   topics.\n"
- title: 9.  References
  contents:
  - "9.  References\n   This section identifies background references which may be\
    \ useful to\n   those contemplating use of the mechanisms defined in this RFC.\n\
    \      ISO 7498/Part 2 - Security Architecture, prepared by ISO/TC97/SC\n    \
    \  21/WG 1 Ad hoc group on Security, extends the OSI Basic Reference\n      Model\
    \ to cover security aspects which are general architectural\n      elements of\
    \ communications protocols, and provides an annex with\n      tutorial and background\
    \ information.\n      US Federal Information Processing Standards Publication\
    \ (FIPS PUB)\n      46, Data Encryption Standard, 15 January 1977, defines the\n\
    \      encipherment algorithm used for message text encryption and\n      Message\
    \ Authentication Code (MAC) computation.\n      FIPS PUB 81, DES Modes of Operation,\
    \ 2 December 1980, defines\n      specific modes in which the Data Encryption\
    \ Standard algorithm may\n      to be used to perform encryption.\n      FIPS\
    \ PUB 113, Computer Data Authentication, May 1985, defines a\n      specific procedure\
    \ for use of the Data Encryption Standard\n      algorithm to compute a MAC.\n"
- title: A.  Message Integrity Check Algorithms
  contents:
  - "A.  Message Integrity Check Algorithms\n   This appendix identifies the alternative\
    \ algorithms which may be used\n   to compute Message Integrity Check (MIC) values,\
    \ and assigns them\n   character string identifiers to be incorporated in \"X-Recipient-ID:\"\
    \n   fields to indicate the choice of algorithm employed for individual\n   message\
    \ recipients.\n   MIC algorithms which utilize DEA-1 cryptography are computed\
    \ using a\n   key which is a variant of the DEK used for message text encryption.\n\
    \   The variant is formed by modulo-2 addition of the hexadecimal\n   quantity\
    \ F0F0F0F0F0F0F0F0 to the encryption DEK.\n"
- title: A.1  Conventional MAC (MAC)
  contents:
  - "A.1  Conventional MAC (MAC)\n   A conventional MAC, denoted by the string \"\
    MAC\", is computed using\n   the DEA-1 algorithm in the fashion defined in FIPS\
    \ PUB 113 [15].  Use\n   of the conventional MAC is not recommended for multicast\
    \ messages.\n   The message's encapsulated text is padded at the end, per FIPS\
    \ PUB\n   113, with zero-valued octets as needed in order to form an integral\n\
    \   number of 8-octet encryption quanta.  These padding octets are\n   inserted\
    \ implicitly and are not transmitted with a message.  The\n   result of a conventional\
    \ MAC computation is a single 64-bit value.\n"
- title: A.2  Bidirectional MAC (BMAC)
  contents:
  - "A.2  Bidirectional MAC (BMAC)\n   A bidirectional MAC, denoted by the string\
    \ \"BMAC\", yields a result\n   which is transferred as a single 128-bit value.\
    \  The BMAC is computed\n   in the following manner:  First, the encapsulated\
    \ text is padded at\n   the end with zero-valued octets as needed in order to\
    \ form an\n   integral number of 8-octet encryption quanta.  These padding octets\n\
    \   are inserted implicitly and are not transmitted with a message.  A\n   conventional\
    \ MAC is computed on the padded form, and the resulting\n   64-bits form the high-order\
    \ 64-bits of the BMAC result.\n   The low-order 64-bits of the BMAC result are\
    \ also formed by computing\n   a conventional MAC, but the order of the 8-octet\
    \ encryption quanta is\n   reversed for purposes of computation. In other words,\
    \ the first\n   quantum entered into this computation is the last quantum in the\n\
    \   encapsulated text, and includes any added padding.  The first quantum\n  \
    \ in the text is the last quantum processed as input to this\n   computation.\
    \  The octets within each 8-octet quantum are not\n   reordered.\n"
- title: 'NOTES:'
  contents:
  - "NOTES:\n     [1]  Key generation for MIC computation and message text\n     \
    \     encryption may either be performed by the sending host or\n          by\
    \ a centralized server.  This RFC does not constrain this\n          design alternative.\
    \   Section 5.1 identifies possible\n          advantages of a centralized server\
    \ approach.\n     [2]  Information Processing Systems: Data Encipherment: Block\n\
    \          Cipher Algorithm DEA 1.\n     [3]  Federal Information Processing Standards\
    \ Publication 46,\n          Data Encryption Standard, 15 January 1977.\n    \
    \ [4]  Information Processing Systems: Data Encipherment: Modes of\n         \
    \ Operation of a 64-bit Block Cipher.\n     [5]  Federal Information Processing\
    \ Standards Publication 81,\n          DES Modes of Operation, 2 December 1980.\n\
    \     [6]  Addendum to the Transport Layer Protocol Definition for\n         \
    \ Providing Connection Oriented End to End Cryptographic Data\n          Protection\
    \ Using a 64-Bit Block Cipher, X3T1-85-50.3, draft\n          of 19 December 1985,\
    \ Gaithersburg, MD, p. 15.\n     [7]  Postel, J., Simple Mail Transfer Protocol\
    \ (RFC-821), August\n          1982.\n     [8]  This transformation should occur\
    \ only at an SMTP endpoint,\n          not at an intervening relay, but may take\
    \ place at a\n          gateway system linking the SMTP realm with other\n   \
    \       environments.\n     [9]  Use of the SMTP canonicalization procedure at\
    \ this stage\n          was selected since it is widely used and implemented in\
    \ the\n          Internet community, not because SMTP interoperability with\n\
    \          this intermediate result is required; no privacy-enhanced\n       \
    \   message will be passed to SMTP for transmission directly\n          from this\
    \ step in the four-phase transformation procedure.\n     [10] Crocker, D., Standard\
    \ for the Format of ARPA Internet Text\n          Messages (RFC-822), August 1982.\n\
    \     [11] Rose, M. T. and Stefferud, E. A., Proposed Standard for\n         \
    \ Message Encapsulation (RFC-934), January 1985.\n     [12] CCITT Recommendation\
    \ X.411 (1988), \"Message Handling\n          Systems: Message Transfer System:\
    \ Abstract Service\n          Definition and Procedures\".\n     [13] CCITT Recommendation\
    \ X.509 (1988), \"The Directory -\n          Authentication Framework\".\n   \
    \  [14] Kille, S. E., Mapping between X.400 and RFC-822 (RFC-987),\n         \
    \ June 1986.\n     [15] Federal Information Processing Standards Publication 113,\n\
    \          Computer Data Authentication, May 1985.\n"
