- title: __initial_text__
  contents:
  - '             HMAC: Keyed-Hashing for Message Authentication

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes HMAC, a mechanism for message authentication\n\
    \   using cryptographic hash functions. HMAC can be used with any\n   iterative\
    \ cryptographic hash function, e.g., MD5, SHA-1, in\n   combination with a secret\
    \ shared key.  The cryptographic strength of\n   HMAC depends on the properties\
    \ of the underlying hash function.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Providing a way to check the integrity of information transmitted\n\
    \   over or stored in an unreliable medium is a prime necessity in the\n   world\
    \ of open computing and communications. Mechanisms that provide\n   such integrity\
    \ check based on a secret key are usually called\n   \"message authentication\
    \ codes\" (MAC). Typically, message\n   authentication codes are used between\
    \ two parties that share a secret\n   key in order to validate information transmitted\
    \ between these\n   parties. In this document we present such a MAC mechanism\
    \ based on\n   cryptographic hash functions. This mechanism, called HMAC, is based\n\
    \   on work by the authors [BCK1] where the construction is presented and\n  \
    \ cryptographically analyzed. We refer to that work for the details on\n   the\
    \ rationale and security analysis of HMAC, and its comparison to\n   other keyed-hash\
    \ methods.\n   HMAC can be used in combination with any iterated cryptographic\
    \ hash\n   function. MD5 and SHA-1 are examples of such hash functions. HMAC\n\
    \   also uses a secret key for calculation and verification of the\n   message\
    \ authentication values. The main goals behind this\n   construction are\n   *\
    \ To use, without modifications, available hash functions.\n     In particular,\
    \ hash functions that perform well in software,\n     and for which code is freely\
    \ and widely available.\n   * To preserve the original performance of the hash\
    \ function without\n     incurring a significant degradation.\n   * To use and\
    \ handle keys in a simple way.\n   * To have a well understood cryptographic analysis\
    \ of the strength of\n     the authentication mechanism based on reasonable assumptions\
    \ on the\n     underlying hash function.\n   * To allow for easy replaceability\
    \ of the underlying hash function in\n     case that faster or more secure hash\
    \ functions are found or\n     required.\n   This document specifies HMAC using\
    \ a generic cryptographic hash\n   function (denoted by H). Specific instantiations\
    \ of HMAC need to\n   define a particular hash function. Current candidates for\
    \ such hash\n   functions include SHA-1 [SHA], MD5 [MD5], RIPEMD-128/160 [RIPEMD].\n\
    \   These different realizations of HMAC will be denoted by HMAC-SHA1,\n   HMAC-MD5,\
    \ HMAC-RIPEMD, etc.\n   Note: To the date of writing of this document MD5 and\
    \ SHA-1 are the\n   most widely used cryptographic hash functions. MD5 has been\
    \ recently\n   shown to be vulnerable to collision search attacks [Dobb].  This\n\
    \   attack and other currently known weaknesses of MD5 do not compromise\n   the\
    \ use of MD5 within HMAC as specified in this document (see\n   [Dobb]); however,\
    \ SHA-1 appears to be a cryptographically stronger\n   function. To this date,\
    \ MD5 can be considered for use in HMAC for\n   applications where the superior\
    \ performance of MD5 is critical.   In\n   any case, implementers and users need\
    \ to be aware of possible\n   cryptanalytic developments regarding any of these\
    \ cryptographic hash\n   functions, and the eventual need to replace the underlying\
    \ hash\n   function. (See section 6 for more information on the security of\n\
    \   HMAC.)\n"
- title: 2. Definition of HMAC
  contents:
  - "2. Definition of HMAC\n   The definition of HMAC requires a cryptographic hash\
    \ function, which\n   we denote by H, and a secret key K. We assume H to be a\
    \ cryptographic\n   hash function where data is hashed by iterating a basic compression\n\
    \   function on blocks of data.   We denote by B the byte-length of such\n   blocks\
    \ (B=64 for all the above mentioned examples of hash functions),\n   and by L\
    \ the byte-length of hash outputs (L=16 for MD5, L=20 for\n   SHA-1).  The authentication\
    \ key K can be of any length up to B, the\n   block length of the hash function.\
    \  Applications that use keys longer\n   than B bytes will first hash the key\
    \ using H and then use the\n   resultant L byte string as the actual key to HMAC.\
    \ In any case the\n   minimal recommended length for K is L bytes (as the hash\
    \ output\n   length). See section 3 for more information on keys.\n   We define\
    \ two fixed and different strings ipad and opad as follows\n   (the 'i' and 'o'\
    \ are mnemonics for inner and outer):\n                   ipad = the byte 0x36\
    \ repeated B times\n                  opad = the byte 0x5C repeated B times.\n\
    \   To compute HMAC over the data `text' we perform\n                    H(K XOR\
    \ opad, H(K XOR ipad, text))\n   Namely,\n    (1) append zeros to the end of K\
    \ to create a B byte string\n        (e.g., if K is of length 20 bytes and B=64,\
    \ then K will be\n         appended with 44 zero bytes 0x00)\n    (2) XOR (bitwise\
    \ exclusive-OR) the B byte string computed in step\n        (1) with ipad\n  \
    \  (3) append the stream of data 'text' to the B byte string resulting\n     \
    \   from step (2)\n    (4) apply H to the stream generated in step (3)\n    (5)\
    \ XOR (bitwise exclusive-OR) the B byte string computed in\n        step (1) with\
    \ opad\n    (6) append the H result from step (4) to the B byte string\n     \
    \   resulting from step (5)\n    (7) apply H to the stream generated in step (6)\
    \ and output\n        the result\n   For illustration purposes, sample code based\
    \ on MD5 is provided as an\n   appendix.\n"
- title: 3. Keys
  contents:
  - "3. Keys\n   The key for HMAC can be of any length (keys longer than B bytes are\n\
    \   first hashed using H).  However, less than L bytes is strongly\n   discouraged\
    \ as it would decrease the security strength of the\n   function.  Keys longer\
    \ than L bytes are acceptable but the extra\n   length would not significantly\
    \ increase the function strength. (A\n   longer key may be advisable if the randomness\
    \ of the key is\n   considered weak.)\n   Keys need to be chosen at random (or\
    \ using a cryptographically strong\n   pseudo-random generator seeded with a random\
    \ seed), and periodically\n   refreshed.  (Current attacks do not indicate a specific\
    \ recommended\n   frequency for key changes as these attacks are practically\n\
    \   infeasible.  However, periodic key refreshment is a fundamental\n   security\
    \ practice that helps against potential weaknesses of the\n   function and keys,\
    \ and limits the damage of an exposed key.)\n"
- title: 4. Implementation Note
  contents:
  - "4. Implementation Note\n   HMAC is defined in such a way that the underlying\
    \ hash function H can\n   be used with no modification to its code. In particular,\
    \ it uses the\n   function H with the pre-defined initial value IV (a fixed value\n\
    \   specified by each iterative hash function to initialize its\n   compression\
    \ function).  However, if desired, a performance\n   improvement can be achieved\
    \ at the cost of (possibly) modifying the\n   code of H to support variable IVs.\n\
    \   The idea is that the intermediate results of the compression function\n  \
    \ on the B-byte blocks (K XOR ipad) and (K XOR opad) can be precomputed\n   only\
    \ once at the time of generation of the key K, or before its first\n   use. These\
    \ intermediate results are stored and then used to\n   initialize the IV of H\
    \ each time that a message needs to be\n   authenticated.  This method saves,\
    \ for each authenticated message,\n   the application of the compression function\
    \ of H on two B-byte blocks\n   (i.e., on (K XOR ipad) and (K XOR opad)). Such\
    \ a savings may be\n   significant when authenticating short streams of data.\
    \  We stress\n   that the stored intermediate values need to be treated and protected\n\
    \   the same as secret keys.\n   Choosing to implement HMAC in the above way is\
    \ a decision of the\n   local implementation and has no effect on inter-operability.\n"
- title: 5. Truncated output
  contents:
  - "5. Truncated output\n   A well-known practice with message authentication codes\
    \ is to\n   truncate the output of the MAC and output only part of the bits\n\
    \   (e.g., [MM, ANSI]).  Preneel and van Oorschot [PV] show some\n   analytical\
    \ advantages of truncating the output of hash-based MAC\n   functions. The results\
    \ in this area are not absolute as for the\n   overall security advantages of\
    \ truncation. It has advantages (less\n   information on the hash result available\
    \ to an attacker) and\n   disadvantages (less bits to predict for the attacker).\
    \  Applications\n   of HMAC can choose to truncate the output of HMAC by outputting\
    \ the t\n   leftmost bits of the HMAC computation for some parameter t (namely,\n\
    \   the computation is carried in the normal way as defined in section 2\n   above\
    \ but the end result is truncated to t bits). We recommend that\n   the output\
    \ length t be not less than half the length of the hash\n   output (to match the\
    \ birthday attack bound) and not less than 80 bits\n   (a suitable lower bound\
    \ on the number of bits that need to be\n   predicted by an attacker).  We propose\
    \ denoting a realization of HMAC\n   that uses a hash function H with t bits of\
    \ output as HMAC-H-t. For\n   example, HMAC-SHA1-80 denotes HMAC computed using\
    \ the SHA-1 function\n   and with the output truncated to 80 bits.  (If the parameter\
    \ t is not\n   specified, e.g. HMAC-MD5, then it is assumed that all the bits\
    \ of the\n   hash are output.)\n"
- title: 6. Security
  contents:
  - "6. Security\n   The security of the message authentication mechanism presented\
    \ here\n   depends on cryptographic properties of the hash function H: the\n \
    \  resistance to collision finding (limited to the case where the\n   initial\
    \ value is secret and random, and where the output of the\n   function is not\
    \ explicitly available to the attacker), and the\n   message authentication property\
    \ of the compression function of H when\n   applied to single blocks (in HMAC\
    \ these blocks are partially unknown\n   to an attacker as they contain the result\
    \ of the inner H computation\n   and, in particular, cannot be fully chosen by\
    \ the attacker).\n   These properties, and actually stronger ones, are commonly\
    \ assumed\n   for hash functions of the kind used with HMAC. In particular, a\
    \ hash\n   function for which the above properties do not hold would become\n\
    \   unsuitable for most (probably, all) cryptographic applications,\n   including\
    \ alternative message authentication schemes based on such\n   functions.  (For\
    \ a complete analysis and rationale of the HMAC\n   function the reader is referred\
    \ to [BCK1].)\n   Given the limited confidence gained so far as for the cryptographic\n\
    \   strength of candidate hash functions, it is important to observe the\n   following\
    \ two properties of the HMAC construction and its secure use\n   for message authentication:\n\
    \   1. The construction is independent of the details of the particular\n   hash\
    \ function H in use and then the latter can be replaced by any\n   other secure\
    \ (iterative) cryptographic hash function.\n   2. Message authentication, as opposed\
    \ to encryption, has a\n   \"transient\" effect. A published breaking of a message\
    \ authentication\n   scheme would lead to the replacement of that scheme, but\
    \ would have\n   no adversarial effect on information authenticated in the past.\
    \  This\n   is in sharp contrast with encryption, where information encrypted\n\
    \   today may suffer from exposure in the future if, and when, the\n   encryption\
    \ algorithm is broken.\n   The strongest attack known against HMAC is based on\
    \ the frequency of\n   collisions for the hash function H (\"birthday attack\"\
    ) [PV,BCK2], and\n   is totally impractical for minimally reasonable hash functions.\n\
    \   As an example, if we consider a hash function like MD5 where the\n   output\
    \ length equals L=16 bytes (128 bits) the attacker needs to\n   acquire the correct\
    \ message authentication tags computed (with the\n   _same_ secret key K!) on\
    \ about 2**64 known plaintexts.  This would\n   require the processing of at least\
    \ 2**64 blocks under H, an\n   impossible task in any realistic scenario (for\
    \ a block length of 64\n   bytes this would take 250,000 years in a continuous\
    \ 1Gbps link, and\n   without changing the secret key K during all this time).\
    \  This attack\n   could become realistic only if serious flaws in the collision\n\
    \   behavior of the function H are discovered (e.g.  collisions found\n   after\
    \ 2**30 messages). Such a discovery would determine the immediate\n   replacement\
    \ of the function H (the effects of such failure would be\n   far more severe\
    \ for the traditional uses of H in the context of\n   digital signatures, public\
    \ key certificates, etc.).\n   Note: this attack needs to be strongly contrasted\
    \ with regular\n   collision attacks on cryptographic hash functions where no\
    \ secret key\n   is involved and where 2**64 off-line parallelizable (!) operations\n\
    \   suffice to find collisions.  The latter attack is approaching\n   feasibility\
    \ [VW] while the birthday attack on HMAC is totally\n   impractical.  (In the\
    \ above examples, if one uses a hash function\n   with, say, 160 bit of output\
    \ then 2**64 should be replaced by 2**80.)\n   A correct implementation of the\
    \ above construction, the choice of\n   random (or cryptographically pseudorandom)\
    \ keys, a secure key\n   exchange mechanism, frequent key refreshments, and good\
    \ secrecy\n   protection of keys are all essential ingredients for the security\
    \ of\n   the integrity verification mechanism provided by HMAC.\n"
- title: Appendix -- Sample Code
  contents:
  - "Appendix -- Sample Code\n   For the sake of illustration we provide the following\
    \ sample code for\n   the implementation of HMAC-MD5 as well as some corresponding\
    \ test\n   vectors (the code is based on MD5 code as described in [MD5]).\n"
- title: /*
  contents:
  - '/*

    '
- title: '** Function: hmac_md5'
  contents:
  - '** Function: hmac_md5

    '
- title: '*/'
  contents:
  - '*/

    '
- title: void
  contents:
  - 'void

    '
- title: hmac_md5(text, text_len, key, key_len, digest)
  contents:
  - 'hmac_md5(text, text_len, key, key_len, digest)

    '
- title: unsigned char*  text;                /* pointer to data stream */
  contents:
  - 'unsigned char*  text;                /* pointer to data stream */

    '
- title: int             text_len;            /* length of data stream */
  contents:
  - 'int             text_len;            /* length of data stream */

    '
- title: unsigned char*  key;                 /* pointer to authentication key */
  contents:
  - 'unsigned char*  key;                 /* pointer to authentication key */

    '
- title: int             key_len;             /* length of authentication key */
  contents:
  - 'int             key_len;             /* length of authentication key */

    '
- title: caddr_t         digest;              /* caller digest to be filled in */
  contents:
  - 'caddr_t         digest;              /* caller digest to be filled in */

    '
- title: '{'
  contents:
  - "{\n        MD5_CTX context;\n        unsigned char k_ipad[65];    /* inner padding\
    \ -\n                                      * key XORd with ipad\n            \
    \                          */\n        unsigned char k_opad[65];    /* outer padding\
    \ -\n                                      * key XORd with opad\n            \
    \                          */\n        unsigned char tk[16];\n        int i;\n\
    \        /* if key is longer than 64 bytes reset it to key=MD5(key) */\n     \
    \   if (key_len > 64) {\n                MD5_CTX      tctx;\n                MD5Init(&tctx);\n\
    \                MD5Update(&tctx, key, key_len);\n                MD5Final(tk,\
    \ &tctx);\n                key = tk;\n                key_len = 16;\n        }\n\
    \        /*\n         * the HMAC_MD5 transform looks like:\n         *\n     \
    \    * MD5(K XOR opad, MD5(K XOR ipad, text))\n         *\n         * where K\
    \ is an n byte key\n         * ipad is the byte 0x36 repeated 64 times\n     \
    \    * opad is the byte 0x5c repeated 64 times\n         * and text is the data\
    \ being protected\n         */\n        /* start out by storing key in pads */\n\
    \        bzero( k_ipad, sizeof k_ipad);\n        bzero( k_opad, sizeof k_opad);\n\
    \        bcopy( key, k_ipad, key_len);\n        bcopy( key, k_opad, key_len);\n\
    \        /* XOR key with ipad and opad values */\n        for (i=0; i<64; i++)\
    \ {\n                k_ipad[i] ^= 0x36;\n                k_opad[i] ^= 0x5c;\n\
    \        }\n        /*\n         * perform inner MD5\n         */\n        MD5Init(&context);\
    \                   /* init context for 1st\n                                \
    \              * pass */\n        MD5Update(&context, k_ipad, 64)      /* start\
    \ with inner pad */\n        MD5Update(&context, text, text_len); /* then text\
    \ of datagram */\n        MD5Final(digest, &context);          /* finish up 1st\
    \ pass */\n        /*\n         * perform outer MD5\n         */\n        MD5Init(&context);\
    \                   /* init context for 2nd\n                                \
    \              * pass */\n        MD5Update(&context, k_opad, 64);     /* start\
    \ with outer pad */\n        MD5Update(&context, digest, 16);     /* then results\
    \ of 1st\n                                              * hash */\n        MD5Final(digest,\
    \ &context);          /* finish up 2nd pass */\n"
- title: '}'
  contents:
  - '}

    '
- title: 'Test Vectors (Trailing ''\0'' of a character string not included in test):'
  contents:
  - "Test Vectors (Trailing '\\0' of a character string not included in test):\n \
    \ key =         0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n  key_len =     16 bytes\n\
    \  data =        \"Hi There\"\n  data_len =    8  bytes\n  digest =      0x9294727a3638bb1c13f48ef8158bfc9d\n\
    \  key =         \"Jefe\"\n  data =        \"what do ya want for nothing?\"\n\
    \  data_len =    28 bytes\n  digest =      0x750c783e6ab0b503eaa86e310a5db738\n\
    \  key =         0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n  key_len       16 bytes\n\
    \  data =        0xDDDDDDDDDDDDDDDDDDDD...\n                ..DDDDDDDDDDDDDDDDDDDD...\n\
    \                ..DDDDDDDDDDDDDDDDDDDD...\n                ..DDDDDDDDDDDDDDDDDDDD...\n\
    \                ..DDDDDDDDDDDDDDDDDDDD\n  data_len =    50 bytes\n  digest =\
    \      0x56be34521d144c88dbb8c733f0e8b3f6\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Pau-Chen Cheng, Jeff Kraemer, and Michael Oehler, have provided\n\
    \   useful comments on early drafts, and ran the first interoperability\n   tests\
    \ of this specification. Jeff and Pau-Chen kindly provided the\n   sample code\
    \ and test vectors that appear in the appendix.  Burt\n   Kaliski, Bart Preneel,\
    \ Matt Robshaw, Adi Shamir, and Paul van\n   Oorschot have provided useful comments\
    \ and suggestions during the\n   investigation of the HMAC construction.\n"
- title: References
  contents:
  - "References\n   [ANSI]  ANSI X9.9, \"American National Standard for Financial\n\
    \           Institution Message Authentication (Wholesale),\" American\n     \
    \      Bankers Association, 1981.   Revised 1986.\n   [Atk]   Atkinson, R., \"\
    IP Authentication Header\", RFC 1826, August\n           1995.\n   [BCK1]  M.\
    \ Bellare, R. Canetti, and H. Krawczyk,\n           \"Keyed Hash Functions and\
    \ Message Authentication\",\n           Proceedings of Crypto'96, LNCS 1109, pp.\
    \ 1-15.\n           (http://www.research.ibm.com/security/keyed-md5.html)\n  \
    \ [BCK2]  M. Bellare, R. Canetti, and H. Krawczyk,\n           \"Pseudorandom\
    \ Functions Revisited: The Cascade Construction\",\n           Proceedings of\
    \ FOCS'96.\n   [Dobb]  H. Dobbertin, \"The Status of MD5  After a Recent Attack\"\
    ,\n           RSA Labs' CryptoBytes, Vol. 2 No. 2, Summer 1996.\n           http://www.rsa.com/rsalabs/pubs/cryptobytes.html\n\
    \   [PV]    B. Preneel and P. van Oorschot, \"Building fast MACs from hash\n \
    \          functions\", Advances in Cryptology -- CRYPTO'95 Proceedings,\n   \
    \        Lecture Notes in Computer Science, Springer-Verlag Vol.963,\n       \
    \    1995, pp. 1-14.\n   [MD5]   Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    ,\n           RFC 1321, April 1992.\n   [MM]    Meyer, S. and Matyas, S.M., Cryptography,\
    \ New York Wiley,\n           1982.\n   [RIPEMD] H. Dobbertin, A. Bosselaers,\
    \ and B. Preneel, \"RIPEMD-160: A\n            strengthened version of RIPEMD\"\
    , Fast Software Encryption,\n            LNCS Vol 1039, pp. 71-82.\n         \
    \   ftp://ftp.esat.kuleuven.ac.be/pub/COSIC/bosselae/ripemd/.\n   [SHA]   NIST,\
    \ FIPS PUB 180-1: Secure Hash Standard, April 1995.\n   [Tsu]   G. Tsudik, \"\
    Message authentication with one-way hash\n           functions\", In Proceedings\
    \ of Infocom'92, May 1992.\n           (Also in \"Access Control and Policy Enforcement\
    \ in\n            Internetworks\", Ph.D. Dissertation, Computer Science\n    \
    \        Department, University of Southern California, April 1991.)\n   [VW]\
    \    P. van Oorschot and M. Wiener, \"Parallel Collision\n           Search with\
    \ Applications to Hash Functions and Discrete\n           Logarithms\", Proceedings\
    \ of the 2nd ACM Conf. Computer and\n           Communications Security, Fairfax,\
    \ VA, November 1994.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hugo Krawczyk\n   IBM T.J. Watson Research Center\n  \
    \ P.O.Box 704\n   Yorktown Heights, NY 10598\n   EMail: hugo@watson.ibm.com\n\
    \   Mihir Bellare\n   Dept of Computer Science and Engineering\n   Mail Code 0114\n\
    \   University of California at San Diego\n   9500 Gilman Drive\n   La Jolla,\
    \ CA 92093\n   EMail: mihir@cs.ucsd.edu\n   Ran Canetti\n   IBM T.J. Watson Research\
    \ Center\n   P.O.Box 704\n   Yorktown Heights, NY 10598\n   EMail: canetti@watson.ibm.com\n"
