- contents:
  - '  TCP-Based Media Transport in the Session Description Protocol (SDP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes how to express media transport over TCP
    using\n   the Session Description Protocol (SDP).  It defines the SDP 'TCP'\n
    \  protocol identifier, the SDP 'setup' attribute, which describes the\n   connection
    setup procedure, and the SDP 'connection' attribute, which\n   handles connection
    reestablishment.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Protocol Identifier  . . . . . . . . . . . . . . . . . . .
    . .  3\n   4.  Setup Attribute  . . . . . . . . . . . . . . . . . . . . . . .
    \ 4\n       4.1.  The Setup Attribute in the Offer/Answer Model. . . . . .  4\n
    \  5.  The Connection Attribute . . . . . . . . . . . . . . . . . . .  5\n       5.1.
    \ Offerer Behaviour. . . . . . . . . . . . . . . . . . . .  6\n       5.2.  Answerer
    Behaviour . . . . . . . . . . . . . . . . . . .  7\n   6.  Connection Management
    \ . . . . . . . . . . . . . . . . . . . .  8\n       6.1.  Connection Establishment
    . . . . . . . . . . . . . . . .  8\n       6.2.  Connection Reestablishment .
    . . . . . . . . . . . . . .  8\n       6.3.  Connection Termination . . . . .
    . . . . . . . . . . . .  8\n   7.  Examples . . . . . . . . . . . . . . . . .
    . . . . . . . . . .  9\n       7.1.  Passive/Active . . . . . . . . . . . . .
    . . . . . . . .  9\n       7.2.  Actpass/Passive. . . . . . . . . . . . . . .
    . . . . . .  9\n       7.3.  Existing Connection Reuse. . . . . . . . . . . .
    . . . . 10\n       7.4.  Existing Connection Refusal. . . . . . . . . . . . .
    . . 10\n   8.  Other Connection-Oriented Transport Protocols. . . . . . . . .
    11\n   9.  Security Considerations  . . . . . . . . . . . . . . . . . . . 12\n
    \  10. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 12\n   11.
    Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 12\n   12. References
    . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n       12.1. Normative
    References . . . . . . . . . . . . . . . . . . 13\n       12.2. Informative References
    . . . . . . . . . . . . . . . . . 13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Description Protocol [4] provides a general-purpose\n
    \  format for describing multimedia sessions in announcements or\n   invitations.
    \ SDP uses an entirely textual data format (the US-ASCII\n   subset of UTF-8 [11])
    to maximize portability among transports.  SDP\n   does not define a protocol;
    it defines the syntax to describe a\n   multimedia session with sufficient information
    to participate in that\n   session.  Session descriptions may be sent using arbitrary
    existing\n   application protocols for transport (e.g., SAP [9], SIP [10], RTSP\n
    \  [6], email, HTTP [8], etc.).\n   SDP [4] defines two protocol identifiers:
    RTP/AVP and UDP, both of\n   which represent unreliable, connectionless protocols.
    \ While these\n   transports are appropriate choices for multimedia streams, there
    are\n   applications for which TCP is more appropriate.  This document\n   defines
    a new protocol identifier, 'TCP', to describe TCP connections\n   in SDP.\n   TCP
    introduces two new factors when describing a session: how and\n   when should
    endpoints perform the TCP connection setup procedure.\n   This document defines
    two new attributes to describe TCP connection\n   setups: 'setup' and 'connection'.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\n
    \  RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n   described
    in BCP 14, RFC 2119 [3], and they indicate requirement\n   levels for compliant
    implementations.\n"
  title: 2.  Terminology
- contents:
  - "3.  Protocol Identifier\n   The following is the ABNF for an 'm' line, as specified
    by RFC 2327\n   [4].\n    media-field =         \"m=\" media space port [\"/\"
    integer]\n                          space proto 1*(space fmt) CRLF\n   This document
    defines a new value for the proto field: 'TCP'.\n   The 'TCP' protocol identifier
    is similar to the 'UDP' protocol\n   identifier in that it only describes the
    transport protocol, and not\n   the upper-layer protocol.  An 'm' line that specifies
    'TCP' MUST\n   further qualify the application-layer protocol using an fmt\n   identifier.
    \ Media described using an 'm' line containing the 'TCP'\n   protocol identifier
    are carried using TCP [1].\n"
  title: 3.  Protocol Identifier
- contents:
  - "4.  Setup Attribute\n   The 'setup' attribute indicates which of the end points
    should\n   initiate the TCP connection establishment (i.e., send the initial TCP\n
    \  SYN).  The 'setup' attribute is charset-independent and can be a\n   session-level
    or a media-level attribute.  The following is the ABNF\n   of the 'setup' attribute:\n
    \        setup-attr           =  \"a=setup:\" role\n         role                 =
    \ \"active\" / \"passive\" / \"actpass\"\n                                 / \"holdconn\"\n
    \     'active': The endpoint will initiate an outgoing connection.\n      'passive':
    The endpoint will accept an incoming connection.\n      'actpass': The endpoint
    is willing to accept an incoming\n      connection or to initiate an outgoing
    connection.\n      'holdconn': The endpoint does not want the connection to be\n
    \     established for the time being.\n"
  - contents:
    - "4.1.  The Setup Attribute in the Offer/Answer Model\n   The offer/answer model,
      defined in RFC 3264 [5], provides endpoints\n   with a means to obtain shared
      view of a session.  Some session\n   parameters are negotiated (e.g., codecs
      to use), while others are\n   simply communicated from one endpoint to the other
      (e.g., IP\n   addresses).  The value of the 'setup' attribute falls into the
      first\n   category.  That is, both endpoints negotiate its value using the\n
      \  offer/answer model.\n   The negotiation of the value of the 'setup' attribute
      takes places as\n   follows.  The offerer states which role or roles it is willing
      to\n   perform; and the answerer, taking the offerer's willingness into\n   consideration,
      chooses which roles both endpoints will actually\n   perform during connection
      establishment.  The following are the\n   values that the 'setup' attribute
      can take in an offer/answer\n   exchange:\n            Offer      Answer\n            ________________\n
      \           active     passive / holdconn\n            passive    active / holdconn\n
      \           actpass    active / passive / holdconn\n            holdconn   holdconn\n
      \  The active endpoint SHOULD initiate a connection to the port number\n   on
      the 'm' line of the other endpoint.  The port number on its own\n   'm' line
      is irrelevant, and the opposite endpoint MUST NOT attempt to\n   initiate a
      connection to the port number specified there.\n   Nevertheless, since the 'm'
      line must contain a valid port number,\n   the endpoint using the value 'active'
      SHOULD specify a port number of\n   9 (the discard port) on its 'm' line.  The
      endpoint MUST NOT specify\n   a port number of zero, except to denote an 'm'
      line that has been or\n   is being refused.\n   The passive endpoint SHOULD
      be ready to accept a connection on the\n   port number specified in the 'm'
      line.\n   A value of 'actpass' indicates that the offerer can either initiate
      a\n   connection to the port number on the 'm' line in the answer, or\n   accept
      a connection on the port number specified in the 'm' line in\n   the offer.
      \ That is, the offerer has no preference as to whether it\n   accepts or initiates
      the connection and, so, is letting the answerer\n   choose.\n   A value of 'holdconn'
      indicates that the connection should not be\n   established for the time being.\n
      \  The default value of the setup attribute in an offer/answer exchange\n   is
      'active' in the offer and 'passive' in the answer.\n"
    title: 4.1.  The Setup Attribute in the Offer/Answer Model
  title: 4.  Setup Attribute
- contents:
  - "5.  The Connection Attribute\n   The preceding description of the 'setup' attribute
    is placed in the\n   context of using SDP to initiate a session.  Still, SDP may
    be\n   exchanged between endpoints at various stages of a session to\n   accomplish
    tasks such as terminating a session, redirecting media to\n   a new endpoint,
    or renegotiating the media parameters for a session.\n   After the initial session
    has been established, it may be ambiguous\n   whether a subsequent SDP exchange
    represents a confirmation that the\n   endpoint is to continue using the current
    TCP connection unchanged,\n   or is a request to make a new TCP connection.  The
    media-level\n   'connection' attribute, which is charset-independent, is used
    to\n   disambiguate these two scenarios.  The following is the ABNF of the\n   connection
    attribute:\n         connection-attr        = \"a=connection:\" conn-value\n         conn-value
    \            = \"new\" / \"existing\"\n"
  - contents:
    - "5.1.  Offerer Behaviour\n   Offerers and answerers use the 'connection' attribute
      to decide\n   whether a new transport connection needs to be established or,
      on the\n   other hand, the existing TCP connection should still be used.  When\n
      \  an offerer generates an 'm' line that uses TCP, it SHOULD provide a\n   connection
      attribute for the 'm' line unless the application using\n   the 'm' line has
      other means to deal with connection reestablishment.\n   After the initial offer/answer
      exchange, any of the endpoints can\n   generate a new offer to change some characteristics
      of the session\n   (e.g., the direction attribute).  If such an offerer wants
      to\n   continue using the previously-established transport-layer connection\n
      \  for the 'm' line, the offerer MUST use a connection value of\n   'existing'
      for the 'm' line.  If, on the other hand, the offerer\n   wants to establish
      a new transport-layer connection for the 'm' line,\n   it MUST use a connection
      value of 'new'.\n      Note that, according to the rules in this section, an
      offer that\n      changes the transport address (IP address or port number)
      of an\n      'm' line will have a connection value of 'new'.  Similarly, the\n
      \     'connection' attribute in an initial offer (i.e., no transport\n      connection
      has been established yet) takes the value of 'new'.\n   The 'connection' value
      resulting from an offer/answer exchange is the\n   'connection' value in the
      answer.  If the 'connection' value in the\n   answer is 'new', the end-points
      SHOULD establish a new connection.\n   If the connection value in the answer
      is 'existing', the end-points\n   SHOULD continue using the exiting connection.\n
      \  Taking into consideration the rules in Section 5.2, the following are\n   the
      values that the 'connection' attribute can take in an\n   offer/answer exchange:\n
      \           Offer      Answer\n            ________________\n            new
      \       new\n            existing   existing / new\n   If the connection value
      resulting from an offer/answer exchange is\n   'existing', the end-points continue
      using the existing connection.\n   Consequently, the port numbers, IP addresses,
      and 'setup' attributes\n   negotiated in the offer/answer exchange are ignored
      because there is\n   no need to establish a new connection.\n   The previous
      rule implies that an offerer generating an offer with a\n   connection value
      of 'existing' and a setup value of 'passive' needs\n   to be ready (i.e., needs
      to allocate resources) to receive a\n   connection request from the answerer
      just in case the answerer\n   chooses a connection value of 'new' for the answer.
      \ However, if the\n   answerer uses a connection value of 'existing' in the
      answer, the\n   offerer would need to deallocate the previously allocated resources\n
      \  that were never used because no connection request was received.\n   To avoid
      allocating resources unnecessarily, offerers using a\n   connection value of
      'existing' in their offers may choose to use a\n   setup value of 'holdconn'.
      \ Nevertheless, offerers using this\n   strategy should be aware that if the
      answerer chooses a connection\n   value of 'new', a new offer/answer exchange
      (typically initiated by\n   the previous offerer) with setup value different
      than 'holdconn' will\n   be needed to establish the new connection.  This may,
      of course,\n   cause delays in the application using the TCP connection.\n   The
      default value of the connection attribute in both offers and\n   answers is
      'new'.\n"
    title: 5.1.  Offerer Behaviour
  - contents:
    - "5.2.  Answerer Behaviour\n   The connection value for an 'm' line is negotiated
      using the offer/\n   answer model.  The resulting connection value after an
      offer/answer\n   exchange is the connection value in the answer.  If the connection\n
      \  value in the offer is 'new', the answerer MUST also use a value of\n   'new'
      in the answer.  If the connection value in the offer is\n   'existing', the
      answerer uses a value of 'existing' in the answer if\n   it wishes to continue
      using the existing connection and a value of\n   'new' if it wants a new connection
      to be established.\n      In some scenarios where third party call control [12]
      is used, an\n      endpoint may receive an initial offer with a connection value
      of\n      'existing'.  Following the previous rules, such an answerer would\n
      \     use a connection value of 'new' in the answer.\n   If the connection value
      for an 'm' line resulting from an offer/\n   answer exchange is 'new', the endpoints
      SHOULD establish a new TCP\n   connection as indicated by the 'setup' attribute.
      \ If a previous TCP\n   connection is still up, the endpoints SHOULD close it
      as soon as the\n   offer/answer exchange is completed.  It is up to the application
      to\n   ensure proper data synchronization between the two TCP connections.\n
      \  If the connection value for an 'm' line resulting from an offer/\n   answer
      exchange is 'existing', the endpoints SHOULD continue using\n   the existing
      TCP connection.\n"
    title: 5.2.  Answerer Behaviour
  title: 5.  The Connection Attribute
- contents:
  - "6.  Connection Management\n   This section addresses connection establishment,
    connection\n   reestablishment, and connection termination.\n"
  - contents:
    - "6.1.  Connection Establishment\n   An endpoint that according to an offer/answer
      exchange is supposed to\n   initiate a new TCP connection SHOULD initiate it
      as soon as it is\n   able to, even if the endpoint does not intend to immediately
      begin\n   sending media to the remote endpoint.  This allows media to flow from\n
      \  the remote endpoint if needed.\n      Note that some endpoints need to wait
      for some event to happen\n      before being able to establish the connection.
      \ For example, a\n      wireless terminal may need to set up a radio bearer
      before being\n      able to initiate a TCP connection.\n"
    title: 6.1.  Connection Establishment
  - contents:
    - "6.2.  Connection Reestablishment\n   If an endpoint determines that the TCP
      for an 'm' line has been\n   closed and should be reestablished, it SHOULD perform
      a new offer/\n   answer exchange using a connection value of 'new' for this
      'm' line.\n      Note that the SDP direction attribute (e.g., 'a=sendonly')
      deals\n      with the media sent over the TCP connection, but has no impact
      on\n      the TCP connection itself.\n"
    title: 6.2.  Connection Reestablishment
  - contents:
    - "6.3.  Connection Termination\n   Typically, endpoints do not close the TCP
      connection until the\n   session has expired, been explicitly terminated, or
      a new connection\n   value has been provided for the 'm' line.  Additionally,
      specific\n   applications can describe further scenarios where an end-point
      may\n   close a given TCP connection (e.g., whenever a connection is in the\n
      \  half-close state).  As soon as an end-point notices that it needs to\n   terminate
      a TCP connection, it SHOULD do so.\n   In any case, individual applications
      may provide further\n   considerations on how to achieve a graceful connection
      termination.\n   For example, a file application using TCP to receive a FIN
      from the\n   remote endpoint may need to finish the ongoing transmission of
      a file\n   before sending its own FIN.\n"
    title: 6.3.  Connection Termination
  title: 6.  Connection Management
- contents:
  - "7.  Examples\n   The following examples show the most common usage of the 'setup'\n
    \  attribute combined with TCP-based media descriptions.  For the\n   purpose
    of brevity, the main portion of the session description is\n   omitted in the
    examples, which only show 'm' lines and their\n   attributes (including 'c' lines).\n"
  - contents:
    - "7.1.  Passive/Active\n   An offerer at 192.0.2.2 signals its availability for
      a T.38 fax\n   session at port 54111:\n           m=image 54111 TCP t38\n           c=IN
      IP4 192.0.2.2\n           a=setup:passive\n           a=connection:new\n   An
      answerer at 192.0.2.1 receiving this offer responds with the\n   following answer:\n
      \          m=image 9 TCP t38\n           c=IN IP4 192.0.2.1\n           a=setup:active\n
      \          a=connection:new\n   The endpoint at 192.0.2.1 then initiates the
      TCP connection to port\n   54111 at 192.0.2.2.\n"
    title: 7.1.  Passive/Active
  - contents:
    - "7.2.  Actpass/Passive\n   In another example, an offerer at 192.0.2.2 signals
      its availability\n   for a T.38 fax session at TCP port 54111.  Additionally,
      this offerer\n   is also willing to set up the media stream by initiating the
      TCP\n   connection:\n           m=image 54111 TCP t38\n           c=IN IP4 192.0.2.2\n
      \          a=setup:actpass\n           a=connection:new\n   The endpoint at
      192.0.2.1 responds with the following description:\n           m=image 54321
      TCP t38\n           c=IN IP4 192.0.2.1\n           a=setup:passive\n           a=connection:new\n
      \  This will cause the offerer (at 192.0.2.2) to initiate a connection\n   to
      port 54321 at 192.0.2.1.\n"
    title: 7.2.  Actpass/Passive
  - contents:
    - "7.3.  Existing Connection Reuse\n   Subsequent to the exchange in Section 7.2,
      another offer/answer\n   exchange is initiated in the opposite direction.  The
      endpoint at\n   192.0.2.1 wishes to continue using the existing connection:\n
      \           m=image 54321 TCP t38\n            c=IN IP4 192.0.2.1\n            a=setup:passive\n
      \           a=connection:existing\n   The endpoint at 192.0.2.2 also wishes
      to use the existing connection\n   and responds with the following description:\n
      \           m=image 9 TCP t38\n            c=IN IP4 192.0.2.2\n            a=setup:active\n
      \           a=connection:existing\n   The existing connection from 192.0.2.2
      to 192.0.2.1 will be reused.\n      Note that the endpoint at 192.0.2.2 uses
      'setup:active' in\n      response to the offer of 'setup:passive', and uses
      port 9 because\n      it is active.\n"
    title: 7.3.  Existing Connection Reuse
  - contents:
    - "7.4.  Existing Connection Refusal\n   Subsequent to the exchange in Section
      7.3, another offer/answer\n   exchange is initiated by the endpoint at 192.0.2.2,
      again wishing to\n   reuse the existing connection:\n            m=image 54111
      TCP t38\n            c=IN IP4 192.0.2.2\n            a=setup:passive\n            a=connection:existing\n
      \  However, this time the answerer is unaware of the old connection and\n   thus
      wishes to establish a new one.  (This could be the result of a\n   transfer
      via third-party call control.)  It is unable to act in the\n   'passive' mode
      and thus responds as 'active':\n            m=image 9 TCP t38\n            c=IN
      IP4 192.0.2.3\n            a=setup:active\n            a=connection:new\n   The
      endpoint at 192.0.2.3 then initiates the TCP connection to port\n   54111 at
      192.0.2.2, and the endpoint at 192.0.2.2 closes the old\n   connection.\n      Note
      that the endpoint at 192.0.2.2, while using a connection\n      value of 'existing',
      has used a setup value of 'passive'.  Had it\n      not done this and instead
      used a setup value of 'holdconn'\n      (probably to avoid allocating resources
      as described in\n      Section 5.1), a new offer/answer exchange would have
      been needed\n      in order to establish the new connection.\n"
    title: 7.4.  Existing Connection Refusal
  title: 7.  Examples
- contents:
  - "8.  Other Connection-Oriented Transport Protocols\n   This document specifies
    how to describe TCP-based media streams using\n   SDP.  Still, some of the attributes
    defined here could possibly be\n   used to describe media streams based on other
    connection-oriented\n   transport protocols as well.  This section provides advice
    to authors\n   of specifications of SDP extensions that deal with connection-\n
    \  oriented transport protocols other than TCP.\n   It is recommended that documents
    defining new SDP protocol\n   identifiers that involve extra protocol layers between
    TCP and the\n   media itself (e.g., TLS [7] over TCP) start with the string 'TCP/'\n
    \  (e.g., 'TCP/TLS').\n   The 'setup' and the 'connection' attributes are specified
    in\n   Section 4 and Section 5 respectively.  While both attributes are\n   applicable
    to 'm' lines that use the 'TCP' protocol identifier, they\n   are general enough
    to be reused in 'm' lines with other connection-\n   oriented transport protocols.
    \ Therefore, it is recommended that the\n   'setup' and 'connection' attributes
    are reused, as long as it is\n   possible, for new proto values associated with
    connection-oriented\n   transport protocols.\n   Section 6 deals with TCP connection
    management.  It should be noted\n   that while in TCP both end-points need to
    close a connection, other\n   connection-oriented transport protocols may not
    have the concept of\n   half-close connections.  In such a case, a connection
    would be\n   terminated as soon as one of the end-points closed it, making it\n
    \  unnecessary for the other end-point to perform any further action to\n   terminate
    the connection.  So, specifications dealing with such\n   transport protocols
    may need to specify slightly different procedures\n   regarding connection termination.\n"
  title: 8.  Other Connection-Oriented Transport Protocols
- contents:
  - "9.  Security Considerations\n   See RFC 2327 [4] for security and other considerations
    specific to\n   the Session Description Protocol in general.\n   An attacker may
    attempt to modify the values of the connection and\n   setup attributes in order
    to have endpoints reestablish connections\n   unnecessarily or to keep them from
    establishing a connection.  So, it\n   is strongly RECOMMENDED that integrity
    protection be applied to the\n   SDP session descriptions.  For session descriptions
    carried in SIP\n   [10], S/MIME is the natural choice to provide such end-to-end\n
    \  integrity protection, as described in RFC 3261 [10].  Other\n   applications
    MAY use a different form of integrity protection.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   This document defines two session- and media-level
    SDP attributes:\n   setup and connection.  Their formats are defined in Section
    4 and\n   Section 5, respectively.  These two attributes should be registered\n
    \  by the IANA under \"Session Description Protocol (SDP) Parameters\"\n   under
    \"att-field (both session and media level)\".\n   This document defines a proto
    value: TCP.  Its format is defined in\n   Section 3.  This proto value should
    be registered by the IANA under\n   \"Session Description Protocol (SDP) Parameters\"
    under \"proto\".\n   The SDP specification, RFC2327, states that specifications
    defining\n   new proto values, like the TCP proto value defined in this RFC, must\n
    \  define the rules by which their media format (fmt) namespace is\n   managed.
    \ For the TCP protocol, new formats SHOULD have an associated\n   MIME registration.
    \ Use of an existing MIME subtype for the format is\n   encouraged.  If no MIME
    subtype exists, it is RECOMMENDED that a\n   suitable one is registered through
    the IETF process [2] by production\n   of, or reference to, a standards-track
    RFC that defines the transport\n   protocol for the format.\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgements\n   Jonathan Rosenberg, Rohan Mahy, Anders Kristensen,
    Joerg Ott, Paul\n   Kyzivat, Robert Fairlie-Cuninghame, Colin Perkins, and Christer\n
    \  Holmberg provided valuable insights and contributions.\n"
  title: 11.  Acknowledgements
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [1]  Postel, J., \"Transmission Control Protocol\",
      STD 7, RFC 793,\n        September 1981.\n   [2]  Freed, N., Klensin, J., and
      J. Postel, \"Multipurpose Internet\n        Mail Extensions (MIME) Part Four:
      Registration Procedures\",\n        BCP 13, RFC 2048, November 1996.\n   [3]
      \ Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
      BCP 14, RFC 2119, March 1997.\n   [4]  Handley, M. and V. Jacobson, \"SDP: Session
      Description\n        Protocol\", RFC 2327, April 1998.\n   [5]  Rosenberg, J.
      and H. Schulzrinne, \"An Offer/Answer Model with\n        Session Description
      Protocol (SDP)\", RFC 3264, June 2002.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [6]   Schulzrinne, H., Rao, A., and R. Lanphier,
      \"Real Time Streaming\n         Protocol (RTSP)\", RFC 2326, April 1998.\n   [7]
      \  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n         RFC
      2246, January 1999.\n   [8]   Fielding, R., Gettys, J., Mogul, J., Frystyk,
      H., Masinter, L.,\n         Leach, P., and T. Berners-Lee, \"Hypertext Transfer
      Protocol --\n         HTTP/1.1\", RFC 2616, June 1999.\n   [9]   Handley, M.,
      Perkins, C., and E. Whelan, \"Session Announcement\n         Protocol\", RFC
      2974, October 2000.\n   [10]  Rosenberg, J., Schulzrinne, H., Camarillo, G.,
      Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [11]
      \ Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",\n         STD
      63, RFC 3629, November 2003.\n   [12]  Rosenberg, J., Peterson, J., Schulzrinne,
      H., and G. Camarillo,\n         \"Best Current Practices for Third Party Call
      Control (3pcc) in\n         the Session Initiation Protocol (SIP)\", BCP 85,
      RFC 3725,\n         April 2004.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   David Yon\n   Tactical Software, LLC\n   1750 Elm St.,
    Suite 803\n   Manchester, NH  03104\n   USA\n   EMail: yon-comedia@rfdsoftware.com\n
    \  Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n
    \  EMail: Gonzalo.Camarillo@ericsson.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
