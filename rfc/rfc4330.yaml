- title: __initial_text__
  contents:
  - "             Simple Network Time Protocol (SNTP) Version 4\n                \
    \         for IPv4, IPv6 and OSI\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memorandum describes the Simple Network Time Protocol Version\
    \ 4\n   (SNTPv4), which is a subset of the Network Time Protocol (NTP) used\n\
    \   to synchronize computer clocks in the Internet.  SNTPv4 can be used\n   when\
    \ the ultimate performance of a full NTP implementation based on\n   RFC 1305\
    \ is neither needed nor justified.  When operating with\n   current and previous\
    \ NTP and SNTP versions, SNTPv4 requires no\n   changes to the specifications\
    \ or known implementations, but rather\n   clarifies certain design features that\
    \ allow operation in a simple,\n   stateless remote-procedure call (RPC) mode\
    \ with accuracy and\n   reliability expectations similar to the UDP/TIME protocol\
    \ described\n   in RFC 868.\n   This memorandum obsoletes RFC 1769, which describes\
    \ SNTP Version 3\n   (SNTPv3), and RFC 2030, which describes SNTPv4.  Its purpose\
    \ is to\n   correct certain inconsistencies in the previous documents and to\n\
    \   clarify header formats and protocol operations for NTPv3 (IPv4) and\n   SNTPv4\
    \ (IPv4, IPv6, and OSI), which are also used for SNTP.  A\n   further purpose\
    \ is to provide guidance for home and business client\n   implementations for\
    \ routers and other consumer devices to protect the\n   server population from\
    \ abuse.  A working knowledge of the NTPv3\n   specification, RFC 1305, is not\
    \ required for an implementation of\n   SNTP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Specification of Requirements ..............................5\n  \
    \ 2. Operating Modes and Addressing ..................................5\n   3.\
    \ NTP Timestamp Format ............................................6\n   4. Message\
    \ Format ..................................................8\n   5. SNTP Client\
    \ Operations .........................................13\n   6. SNTP Server Operations\
    \ .........................................16\n   7. Configuration and Management\
    \ ...................................19\n   8. The Kiss-o'-Death Packet .......................................20\n\
    \   9. On Being a Good Network Citizen ................................21\n  \
    \ 10. Best Practices ................................................21\n   11.\
    \ Security Considerations .......................................24\n   12. Acknowledgements\
    \ ..............................................24\n   13. Contributors ..................................................24\n\
    \   14. Informative References ........................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Network Time Protocol Version 3 (NTPv3), specified in\
    \ RFC 1305\n   [MIL92], is widely used to synchronize computer clocks in the global\n\
    \   Internet.  It provides comprehensive mechanisms to access national\n   time\
    \ and frequency dissemination services, organize the NTP subnet of\n   servers\
    \ and clients, and adjust the system clock in each participant.\n   In most places\
    \ of the Internet of today, NTP provides accuracies of\n   1-50 ms, depending\
    \ on the characteristics of the synchronization\n   source and network paths.\n\
    \   RFC 1305 specifies the NTP protocol machine in terms of events,\n   states,\
    \ transition functions and actions, and engineered algorithms\n   to improve the\
    \ timekeeping quality and to mitigate several\n   synchronization sources, some\
    \ of which may be faulty.  To achieve\n   accuracies in the low milliseconds over\
    \ paths spanning major portions\n   of the Internet, these intricate algorithms,\
    \ or their functional\n   equivalents, are necessary.  In many applications, accuracies\
    \ on the\n   order of significant fractions of a second are acceptable.  In simple\n\
    \   home router applications, accuracies of up to a minute may suffice.\n   In\
    \ such cases, simpler protocols, such as the Time Protocol specified\n   in RFC\
    \ 868 [POS83], have been used for this purpose.  These protocols\n   involve an\
    \ RPC exchange where the client requests the time of day and\n   the server returns\
    \ it in seconds past a known reference epoch.\n   NTP is designed for use by clients\
    \ and servers with a wide range of\n   capabilities and over a wide range of network\
    \ jitter and clock\n   frequency wander characteristics.  Many users of NTP in\
    \ the Internet\n   of today use a software distribution available from www.ntp.org.\
    \  The\n   distribution, which includes the full suite of NTP options,\n   mitigation\
    \ algorithms, and security schemes, is a relatively complex,\n   real-time application.\
    \  Although the software has been ported to a\n   wide variety of hardware platforms\
    \ ranging from personal computers to\n   supercomputers, its sheer size and complexity\
    \ is not appropriate for\n   many applications.  Accordingly, it is useful to\
    \ explore alternative\n   strategies using simpler software appropriate for less\
    \ stringent\n   accuracy expectations.\n   This memo describes the Simple Network\
    \ Time Protocol Version 4\n   (SNTPv4), which is a simplified access paradigm\
    \ for servers and\n   clients using current and previous versions of NTP and SNTP.\
    \  The\n   access paradigm is identical to the UDP/TIME Protocol, and, in fact,\n\
    \   it should be easy to adapt a UDP/TIME client implementation, say for\n   a\
    \ personal computer, to operate using SNTP.  Moreover, SNTP is also\n   designed\
    \ to operate in a dedicated server configuration including an\n   integrated radio\
    \ clock.  With careful design and control of the\n   various latencies in the\
    \ system, which is practical in a dedicated\n   design, it is possible to deliver\
    \ time accurate on the order of\n   microseconds.\n   The only significant protocol\
    \ change in SNTPv4 from previous SNTP\n   versions is a modified header interpretation\
    \ to accommodate Internet\n   Protocol Version 6 (IPv6) (RFC 2460) and OSI (RFC\
    \ 1629) addressing.\n   However, SNTPv4 includes certain optional extensions to\
    \ the basic NTP\n   Version 3 (NTPv3) model, including a manycast mode and a public-key-\n\
    \   based authentication scheme designed specifically for broadcast and\n   manycast\
    \ applications.  Although the manycast mode is described in\n   this memo, the\
    \ authentication scheme is described in another RFC to\n   be submitted later.\
    \  Until such time that a definitive NTPv4\n   specification is published, the\
    \ manycast and authentication features\n   should be considered provisional. \
    \ In addition, this memo introduces\n   the kiss-o'-death message, which can be\
    \ used by servers to suppress\n   client requests as circumstances require.\n\
    \   When operating with current and previous versions of NTP and SNTP,\n   SNTPv4\
    \ requires no changes to the protocol or implementations now\n   running or likely\
    \ to be implemented specifically for future NTP or\n   SNTP versions.  The NTP\
    \ and SNTP packet formats are the same, and the\n   arithmetic operations to calculate\
    \ the client time, clock offset, and\n   roundtrip delay are the same.  To an\
    \ NTP or SNTP server, NTP and SNTP\n   clients are indistinguishable; to an NTP\
    \ or SNTP client, NTP and SNTP\n   servers are indistinguishable.  Like NTP servers\
    \ operating in non-\n   symmetric modes, SNTP servers are stateless and can support\
    \ large\n   numbers of clients; however, unlike most NTP clients, SNTP clients\n\
    \   normally operate with only a single server at a time.\n   The full degree\
    \ of reliability ordinarily expected of NTP servers is\n   possible only using\
    \ redundant sources, diverse paths, and the crafted\n   algorithms of a full NTP\
    \ implementation.  It is strongly recommended\n   that SNTP clients be used only\
    \ at the extremities of the\n   synchronization subnet.  SNTP clients should operate\
    \ only at the\n   leaves (highest stratum) of the subnet and in configurations\
    \ where no\n   NTP or SNTP client is dependent on another SNTP client for\n  \
    \ synchronization.  SNTP servers should operate only at the root\n   (stratum\
    \ 1) of the subnet, and then only in configurations where no\n   other source\
    \ of synchronization other than a reliable radio clock or\n   telephone modem\
    \ is available.\n   An important provision in this memo is the interpretation\
    \ of certain\n   NTP header fields that provide for IPv6 [DEE98] and OSI [COL94]\n\
    \   addressing.  The only significant difference between the NTP and\n   SNTPv4\
    \ header formats is the four-octet Reference Identifier field,\n   which is used\
    \ primarily to detect and avoid synchronization loops.\n   In all NTP and SNTP\
    \ versions providing IPv4 addressing, primary\n   servers use a four-character\
    \ ASCII reference clock identifier in this\n   field, whereas secondary servers\
    \ use the 32-bit IPv4 address of the\n   synchronization source.  In SNTPv4 providing\
    \ IPv6 and OSI addressing,\n   primary servers use the same clock identifier,\
    \ but secondary servers\n   use the first 32 bits of the MD5 hash of the IPv6\
    \ or NSAP address of\n   the synchronization source.  A further use of this field\
    \ is when the\n   server sends a kiss-o'-death message, documented later in this\
    \ memo.\n      NTP Version 4 (NTPv4), now in deployment, but not yet the subject\n\
    \      of a standards document, uses the same Reference Identifier field\n   \
    \   as SNTPv4.\n   In the case of OSI, the Connectionless Transport Service (CLTS)\
    \ is\n   used as in [ISO86].  Each SNTP packet is transmitted as the TS-\n   Userdata\
    \ parameter of a T-UNITDATA Request primitive.  Alternately,\n   the header can\
    \ be encapsulated in a Transport Protocol Data Unit\n   (TPDU), which itself is\
    \ transported using UDP, as described in RFC\n   1240 [DOB91].  It is not advised\
    \ that NTP be operated at the upper\n   layers of the OSI stack, such as might\
    \ be inferred from RFC 1698\n   [FUR94], as this could seriously degrade accuracy.\
    \  With the header\n   formats defined in this memo, it is in principle possible\
    \ to\n   interwork between servers and clients of one protocol family and\n  \
    \ another, although the practical difficulties may make this\n   inadvisable.\n\
    \      In the following, indented paragraphs such as this one contain\n      information\
    \ not required by the formal protocol specification, but\n      considered good\
    \ practice in protocol implementations.\n   This memo is organized as follows.\
    \  Section 2 describes how the\n   protocol works, the various modes, and how\
    \ IP addresses and UDP ports\n   are used.  Section 3 describes the NTP timestamp\
    \ format, and Section\n   4 the NTP message format.  Section 5 summarizes SNTP\
    \ client\n   operations, and Section 6 summarizes SNTP server operations.  Section\n\
    \   7 summarizes operation and management issues.  Section 8 describes\n   the\
    \ kiss-o'-death message, newly minted with functions similar to the\n   ICMP Source\
    \ Quench and ICMP Destination Unreachable messages.\n   Section 9 summarizes design\
    \ issues important for good network\n   citizenry and presents an example algorithm\
    \ designed to give good\n   reliability while minimizing network and server resource\
    \ demands.\n"
- title: 1.1.  Specification of Requirements
  contents:
  - "1.1.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [BRA97].\n"
- title: 2.  Operating Modes and Addressing
  contents:
  - "2.  Operating Modes and Addressing\n   Unless excepted in context, a reference\
    \ to broadcast address means\n   IPv4 broadcast address, IPv4 multicast group\
    \ address, or IPv6 address\n   of appropriate scope.  Further information on the\
    \ broadcast/multicast\n   model is in RFC 1112 [DEE89].  Details of address format,\
    \ scoping\n   rules, etc., are beyond the scope of this memo.  SNTPv4 can operate\n\
    \   with either unicast (point to point), broadcast (point to\n   multipoint),\
    \ or manycast (multipoint to point) addressing modes.  A\n   unicast client sends\
    \ a request to a designated server at its unicast\n   address and expects a reply\
    \ from which it can determine the time and,\n   optionally, the roundtrip delay\
    \ and clock offset relative to the\n   server.  A broadcast server periodically\
    \ sends an unsolicited message\n   to a designated broadcast address.  A broadcast\
    \ client listens on\n   this address and ordinarily sends no requests.\n   Manycast\
    \ is an extension of the anycast paradigm described in RFC\n   1546 [PAR93]. \
    \ It is designed for use with a set of cooperating\n   servers whose addresses\
    \ are not known beforehand.  The manycast\n   client sends an ordinary NTP client\
    \ request to a designated broadcast\n   address.  One or more manycast servers\
    \ listen on that address.  Upon\n   receiving a request, a manycast server sends\
    \ an ordinary NTP server\n   reply to the client.  The client then mobilizes an\
    \ association for\n   each server found and continues operation with all of them.\n\
    \   Subsequently, the NTP mitigation algorithms operate to cast out all\n   except\
    \ the best three.\n      Broadcast servers should respond to client unicast requests,\
    \ as\n      well as send unsolicited broadcast messages.  Broadcast clients\n\
    \      may send unicast requests in order to measure the network\n      propagation\
    \ delay between the server and client and then continue\n      operation in listen-only\
    \ mode.  However, broadcast servers may\n      choose not to respond to unicast\
    \ requests, so unicast clients\n      should be prepared to abandon the measurement\
    \ and assume a default\n      value for the delay.\n   The client and server addresses\
    \ are assigned following the usual\n   IPv4, IPv6 or OSI conventions.  For NTP\
    \ multicast, the IANA has\n   reserved the IPv4 group address 224.0.1.1 and the\
    \ IPv6 address ending\n   :101 with appropriate scope.  The NTP broadcast address\
    \ for OSI has\n   yet to be determined.  Notwithstanding the IANA reserved addresses,\n\
    \   other multicast addresses can be used that do not conflict with\n   others\
    \ assigned in scope.  The scoping, routing, and group membership\n   procedures\
    \ are determined by considerations beyond the scope of this\n   memo.\n      It\
    \ is important to adjust the time-to-live (TTL) field in the IP\n      header\
    \ of multicast messages to a reasonable value in order to\n      limit the network\
    \ resources used by this (and any other) multicast\n      service.  Only multicast\
    \ clients in scope will receive multicast\n      server messages.  Only cooperating\
    \ manycast servers in scope will\n      reply to a client request.  The engineering\
    \ principles that\n      determine the proper values to be used are beyond the\
    \ scope of\n      this memo.\n      In the case of SNTP as specified herein, there\
    \ is a very real\n      vulnerability that SNTP broadcast clients can be disrupted\
    \ by\n      misbehaving or hostile SNTP or NTP broadcast servers elsewhere in\n\
    \      the Internet.  It is strongly recommended that access controls\n      and/or\
    \ cryptographic authentication means be provided for\n      additional security\
    \ in such cases.\n      It is intended that IP broadcast addresses will be used\
    \ primarily\n      in IP subnets and LAN segments including a fully functional\
    \ NTP\n      server with a number of dependent SNTP broadcast clients on the\n\
    \      same subnet, and that IP multicast group addresses will be used\n     \
    \ only in cases where the TTL is engineered specifically for each\n      service\
    \ domain.  However, these uses are not integral to the SNTP\n      specification.\n"
- title: 3.  NTP Timestamp Format
  contents:
  - "3.  NTP Timestamp Format\n   SNTP uses the standard NTP timestamp format described\
    \ in RFC 1305 and\n   previous versions of that document.  In conformance with\
    \ standard\n   Internet practice, NTP data are specified as integer or fixed-point\n\
    \   quantities, with bits numbered in big-endian fashion from 0 starting\n   at\
    \ the left or most significant end.  Unless specified otherwise, all\n   quantities\
    \ are unsigned and may occupy the full field width with an\n   implied 0 preceding\
    \ bit 0.\n   Because NTP timestamps are cherished data and, in fact, represent\
    \ the\n   main product of the protocol, a special timestamp format has been\n\
    \   established.  NTP timestamps are represented as a 64-bit unsigned\n   fixed-point\
    \ number, in seconds relative to 0h on 1 January 1900.  The\n   integer part is\
    \ in the first 32 bits, and the fraction part in the\n   last 32 bits.  In the\
    \ fraction part, the non-significant low-order\n   bits are not specified and\
    \ are ordinarily set to 0.\n      It is advisable to fill the non-significant\
    \ low-order bits of the\n      timestamp with a random, unbiased bitstring, both\
    \ to avoid\n      systematic roundoff errors and to provide loop detection and\n\
    \      replay detection (see below).  It is important that the bitstring\n   \
    \   be unpredictable by an intruder.  One way of doing this is to\n      generate\
    \ a random 128-bit bitstring at startup.  After that, each\n      time the system\
    \ clock is read, the string consisting of the\n      timestamp and bitstring is\
    \ hashed with the MD5 algorithm, then the\n      non-significant bits of the timestamp\
    \ are copied from the result.\n   The NTP format allows convenient multiple-precision\
    \ arithmetic and\n   conversion to UDP/TIME message (seconds), but does complicate\
    \ the\n   conversion to ICMP Timestamp message (milliseconds) and Unix time\n\
    \   values (seconds and microseconds or seconds and nanoseconds).  The\n   maximum\
    \ number that can be represented is 4,294,967,295 seconds with\n   a precision\
    \ of about 232 picoseconds, which should be adequate for\n   even the most exotic\
    \ requirements.\n                           1                   2            \
    \       3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Seconds                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  Seconds Fraction (0-padded)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Note that since some time in 1968 (second 2,147,483,648), the most\n   significant\
    \ bit (bit 0 of the integer part) has been set and that the\n   64-bit field will\
    \ overflow some time in 2036 (second 4,294,967,296).\n   There will exist a 232-picosecond\
    \ interval, henceforth ignored, every\n   136 years when the 64-bit field will\
    \ be 0, which by convention is\n   interpreted as an invalid or unavailable timestamp.\n\
    \      As the NTP timestamp format has been in use for over 20 years, it\n   \
    \   is possible that it will be in use 32 years from now, when the\n      seconds\
    \ field overflows.  As it is probably inappropriate to\n      archive NTP timestamps\
    \ before bit 0 was set in 1968, a convenient\n      way to extend the useful life\
    \ of NTP timestamps is the following\n      convention: If bit 0 is set, the UTC\
    \ time is in the range 1968-\n      2036, and UTC time is reckoned from 0h 0m\
    \ 0s UTC on 1 January\n      1900.  If bit 0 is not set, the time is in the range\
    \ 2036-2104 and\n      UTC time is reckoned from 6h 28m 16s UTC on 7 February\
    \ 2036.  Note\n      that when calculating the correspondence, 2000 is a leap\
    \ year, and\n      leap seconds are not included in the reckoning.\n      The\
    \ arithmetic calculations used by NTP to determine the clock\n      offset and\
    \ roundtrip delay require the client time to be within 34\n      years of the\
    \ server time before the client is launched.  As the\n      time since the Unix\
    \ base 1970 is now more than 34 years, means\n      must be available to initialize\
    \ the clock at a date closer to the\n      present, either with a time-of-year\
    \ (TOY) chip or from firmware.\n"
- title: 4.  Message Format
  contents:
  - "4.  Message Format\n   Both NTP and SNTP are clients of the User Datagram Protocol\
    \ (UDP)\n   specified in RFC 768 [POS80].  The structures of the IP and UDP\n\
    \   headers are described in the cited specification documents and will\n   not\
    \ be detailed further here.  The UDP port number assigned by the\n   IANA to NTP\
    \ is 123.  The SNTP client should use this value in the UDP\n   Destination Port\
    \ field for client request messages.  The Source Port\n   field of these messages\
    \ can be any nonzero value chosen for\n   identification or multiplexing purposes.\
    \  The server interchanges\n   these fields for the corresponding reply messages.\n\
    \      This differs from the RFC 2030 specifications, which required both\n  \
    \    the source and destination ports to be 123.  The intent of this\n      change\
    \ is to allow the identification of particular client\n      implementations (which\
    \ are now allowed to use unreserved port\n      numbers, including ones of their\
    \ choosing) and to attain\n      compatibility with Network Address Port Translation\
    \ (NAPT)\n      described in RFC 2663 [SRI99] and RFC 3022 [SRI01].\n   Figure\
    \ 1 is a description of the NTP and SNTP message format, which\n   follows the\
    \ IP and UDP headers in the message.  This format is\n   identical to the NTP\
    \ message format described in RFC 1305, with the\n   exception of the Reference\
    \ Identifier field described below.  For\n   SNTP client messages, most of these\
    \ fields are zero or initialized\n   with pre-specified data.  For completeness,\
    \ the function of each\n   field is briefly summarized below.\n              \
    \             1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9  0  1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |LI | VN  |Mode |    Stratum    |     Poll      |   Precision    |\n  \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \ |                          Root  Delay                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       Root  Dispersion                         |\n  \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \ |                     Reference Identifier                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                                |\n  \
    \    |                    Reference Timestamp (64)                    |\n    \
    \  |                                                                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                                |\n  \
    \    |                    Originate Timestamp (64)                    |\n    \
    \  |                                                                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                                |\n  \
    \    |                     Receive Timestamp (64)                     |\n    \
    \  |                                                                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                                |\n  \
    \    |                     Transmit Timestamp (64)                    |\n    \
    \  |                                                                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 Key Identifier (optional) (32)                 |\n  \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \ |                                                                |\n      |\
    \                                                                |\n      |  \
    \               Message Digest (optional) (128)                |\n      |    \
    \                                                            |\n      |      \
    \                                                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 1.  NTP Packet Header\n   Leap Indicator (LI):\
    \ This is a two-bit code warning of an impending\n   leap second to be inserted/deleted\
    \ in the last minute of the current\n   day.  This field is significant only in\
    \ server messages, where the\n   values are defined as follows:\n      LI    \
    \   Meaning\n      ---------------------------------------------\n      0    \
    \    no warning\n      1        last minute has 61 seconds\n      2        last\
    \ minute has 59 seconds\n      3        alarm condition (clock not synchronized)\n\
    \   On startup, servers set this field to 3 (clock not synchronized), and\n  \
    \ set this field to some other value when synchronized to the primary\n   reference\
    \ clock.  Once set to a value other than 3, the field is\n   never set to that\
    \ value again, even if all synchronization sources\n   become unreachable or defective.\n\
    \   Version Number (VN): This is a three-bit integer indicating the\n   NTP/SNTP\
    \ version number, currently 4.  If necessary to distinguish\n   between IPv4,\
    \ IPv6, and OSI, the encapsulating context must be\n   inspected.\n   Mode: This\
    \ is a three-bit number indicating the protocol mode.  The\n   values are defined\
    \ as follows:\n      Mode     Meaning\n      ------------------------------------\n\
    \      0        reserved\n      1        symmetric active\n      2        symmetric\
    \ passive\n      3        client\n      4        server\n      5        broadcast\n\
    \      6        reserved for NTP control message\n      7        reserved for\
    \ private use\n   In unicast and manycast modes, the client sets this field to\
    \ 3\n   (client) in the request, and the server sets it to 4 (server) in the\n\
    \   reply.  In broadcast mode, the server sets this field to 5\n   (broadcast).\
    \  The other modes are not used by SNTP servers and\n   clients.\n   Stratum:\
    \ This is an eight-bit unsigned integer indicating the\n   stratum.  This field\
    \ is significant only in SNTP server messages,\n   where the values are defined\
    \ as follows:\n      Stratum  Meaning\n      ----------------------------------------------\n\
    \      0        kiss-o'-death message (see below)\n      1        primary reference\
    \ (e.g., synchronized by radio clock)\n      2-15     secondary reference (synchronized\
    \ by NTP or SNTP)\n      16-255   reserved\n   Poll Interval: This is an eight-bit\
    \ unsigned integer used as an\n   exponent of two, where the resulting value is\
    \ the maximum interval\n   between successive messages in seconds.  This field\
    \ is significant\n   only in SNTP server messages, where the values range from\
    \ 4 (16 s) to\n   17 (131,072 s -- about 36 h).\n   Precision: This is an eight-bit\
    \ signed integer used as an exponent of\n   two, where the resulting value is\
    \ the precision of the system clock\n   in seconds.  This field is significant\
    \ only in server messages, where\n   the values range from -6 for mains-frequency\
    \ clocks to -20 for\n   microsecond clocks found in some workstations.\n   Root\
    \ Delay: This is a 32-bit signed fixed-point number indicating the\n   total roundtrip\
    \ delay to the primary reference source, in seconds\n   with the fraction point\
    \ between bits 15 and 16.  Note that this\n   variable can take on both positive\
    \ and negative values, depending on\n   the relative time and frequency offsets.\
    \  This field is significant\n   only in server messages, where the values range\
    \ from negative values\n   of a few milliseconds to positive values of several\
    \ hundred\n   milliseconds.\n      Code       External Reference Source\n    \
    \  ------------------------------------------------------------------\n      LOCL\
    \       uncalibrated local clock\n      CESM       calibrated Cesium clock\n \
    \     RBDM       calibrated Rubidium clock\n      PPS        calibrated quartz\
    \ clock or other pulse-per-second\n                 source\n      IRIG       Inter-Range\
    \ Instrumentation Group\n      ACTS       NIST telephone modem service\n     \
    \ USNO       USNO telephone modem service\n      PTB        PTB (Germany) telephone\
    \ modem service\n      TDF        Allouis (France) Radio 164 kHz\n      DCF  \
    \      Mainflingen (Germany) Radio 77.5 kHz\n      MSF        Rugby (UK) Radio\
    \ 60 kHz\n      WWV        Ft. Collins (US) Radio 2.5, 5, 10, 15, 20 MHz\n   \
    \   WWVB       Boulder (US) Radio 60 kHz\n      WWVH       Kauai Hawaii (US) Radio\
    \ 2.5, 5, 10, 15 MHz\n      CHU        Ottawa (Canada) Radio 3330, 7335, 14670\
    \ kHz\n      LORC       LORAN-C radionavigation system\n      OMEG       OMEGA\
    \ radionavigation system\n      GPS        Global Positioning Service\n      \
    \               Figure 2.  Reference Identifier Codes\n   Root Dispersion: This\
    \ is a 32-bit unsigned fixed-point number\n   indicating the maximum error due\
    \ to the clock frequency tolerance, in\n   seconds with the fraction point between\
    \ bits 15 and 16.  This field\n   is significant only in server messages, where\
    \ the values range from\n   zero to several hundred milliseconds.\n   Reference\
    \ Identifier: This is a 32-bit bitstring identifying the\n   particular reference\
    \ source.  This field is significant only in\n   server messages, where for stratum\
    \ 0 (kiss-o'-death message) and 1\n   (primary server), the value is a four-character\
    \ ASCII string, left\n   justified and zero padded to 32 bits.  For IPv4 secondary\
    \ servers,\n   the value is the 32-bit IPv4 address of the synchronization source.\n\
    \   For IPv6 and OSI secondary servers, the value is the first 32 bits of\n  \
    \ the MD5 hash of the IPv6 or NSAP address of the synchronization\n   source.\n\
    \   Primary (stratum 1) servers set this field to a code identifying the\n   external\
    \ reference source according to Figure 2.  If the external\n   reference is one\
    \ of those listed, the associated code should be used.\n   Codes for sources not\
    \ listed can be contrived, as appropriate.\n      In previous NTP and SNTP secondary\
    \ servers and clients, this field\n      was often used to walk-back the synchronization\
    \ subnet to the root\n      (primary server) for management purposes.  In SNTPv4\
    \ with IPv6 or\n      OSI, this feature is not available, because the addresses\
    \ are\n      longer than 32 bits, and only a hash is available.  However, a\n\
    \      walk-back can be accomplished using the NTP control message and\n     \
    \ the reference identifier field described in RFC 1305.\n   Reference Timestamp:\
    \ This field is the time the system clock was last\n   set or corrected, in 64-bit\
    \ timestamp format.\n   Originate Timestamp: This is the time at which the request\
    \ departed\n   the client for the server, in 64-bit timestamp format.\n   Receive\
    \ Timestamp: This is the time at which the request arrived at\n   the server or\
    \ the reply arrived at the client, in 64-bit timestamp\n   format.\n   Transmit\
    \ Timestamp: This is the time at which the request departed\n   the client or\
    \ the reply departed the server, in 64-bit timestamp\n   format.\n   Authenticator\
    \ (optional): When the NTP authentication scheme is\n   implemented, the Key Identifier\
    \ and Message Digest fields contain the\n   message authentication code (MAC)\
    \ information defined in Appendix C\n   of RFC 1305.\n"
- title: 5.  SNTP Client Operations
  contents:
  - "5.  SNTP Client Operations\n   An SNTP client can operate in unicast, broadcast,\
    \ or manycast modes.\n   In unicast mode, the client sends a request (NTP mode\
    \ 3) to a\n   designated unicast server and expects a reply (NTP mode 4) from\
    \ that\n   server.  In broadcast client mode, it sends no request and waits for\n\
    \   a broadcast (NTP mode 5) from one or more broadcast servers.  In\n   manycast\
    \ mode, the client sends a request (NTP mode 3) to a\n   designated broadcast\
    \ address and expects a reply (NTP mode 4) from\n   one or more manycast servers.\
    \  The client uses the first reply\n   received to establish the particular server\
    \ for subsequent unicast\n   operations.  Later replies from this server (duplicates)\
    \ or any other\n   server are ignored.  Other than the selection of address in\
    \ the\n   request, the operations of manycast and unicast clients are\n   identical.\n\
    \      Client requests are normally sent at intervals depending on the\n     \
    \ frequency tolerance of the client clock and the required accuracy.\n      However,\
    \ under no conditions should requests be sent at less than\n      one minute intervals.\
    \  Further discussion on this point is in\n      Section 9.\n   A unicast or manycast\
    \ client initializes the NTP message header,\n   sends the request to the server,\
    \ and strips the time of day from the\n   Transmit Timestamp field of the reply.\
    \  For this purpose, all the NTP\n   header fields shown above are set to 0, except\
    \ the Mode, VN, and\n   optional Transmit Timestamp fields.\n   NTP and SNTP clients\
    \ set the mode field to 3 (client) for unicast and\n   manycast requests.  They\
    \ set the VN field to any version number that\n   is supported by the server,\
    \ selected by configuration or discovery,\n   and that can interoperate with all\
    \ previous version NTP and SNTP\n   servers.  Servers reply with the same version\
    \ as the request, so the\n   VN field of the request also specifies the VN field\
    \ of the reply.  A\n   prudent SNTP client can specify the earliest acceptable\
    \ version on\n   the expectation that any server of that or a later version will\n\
    \   respond.  NTP Version 3 (RFC 1305) and Version 2 (RFC 1119) servers\n   accept\
    \ all previous versions, including Version 1 (RFC 1059).  Note\n   that Version\
    \ 0 (RFC 959) is no longer supported by current and future\n   NTP and SNTP servers.\n\
    \   Although setting the Transmit Timestamp field in the request to the\n   time\
    \ of day according to the client clock in NTP timestamp format is\n   not necessary\
    \ in a conforming client implementation, it is highly\n   recommended in unicast\
    \ and manycast modes.  This allows a simple\n   calculation to determine the propagation\
    \ delay between the server and\n   client and to align the system clock generally\
    \ within a few tens of\n   milliseconds relative to the server.  In addition,\
    \ this provides a\n   simple method for verifying that the server reply is in\
    \ fact a\n   legitimate response to the specific client request and thereby for\n\
    \   avoiding replays.  In broadcast mode, the client has no information\n   to\
    \ calculate the propagation delay or to determine the validity of\n   the server,\
    \ unless one of the NTP authentication schemes is used.\n   To calculate the roundtrip\
    \ delay d and system clock offset t relative\n   to the server, the client sets\
    \ the Transmit Timestamp field in the\n   request to the time of day according\
    \ to the client clock in NTP\n   timestamp format.  For this purpose, the clock\
    \ need not be\n   synchronized.  The server copies this field to the Originate\n\
    \   Timestamp in the reply and sets the Receive Timestamp and Transmit\n   Timestamp\
    \ fields to the time of day according to the server clock in\n   NTP timestamp\
    \ format.\n   When the server reply is received, the client determines a\n   Destination\
    \ Timestamp variable as the time of arrival according to\n   its clock in NTP\
    \ timestamp format.  The following table summarizes\n   the four timestamps.\n\
    \      Timestamp Name          ID   When Generated\n      ------------------------------------------------------------\n\
    \      Originate Timestamp     T1   time request sent by client\n      Receive\
    \ Timestamp       T2   time request received by server\n      Transmit Timestamp\
    \      T3   time reply sent by server\n      Destination Timestamp   T4   time\
    \ reply received by client\n   The roundtrip delay d and system clock offset t\
    \ are defined as:\n      d = (T4 - T1) - (T3 - T2)     t = ((T2 - T1) + (T3 -\
    \ T4)) / 2.\n   Note that in general both delay and offset are signed quantities\
    \ and\n   can be less than zero; however, a delay less than zero is possible\n\
    \   only in symmetric modes, which SNTP clients are forbidden to use.\n   The\
    \ following table summarizes the required SNTP client operations in\n   unicast,\
    \ manycast, and broadcast modes.  The recommended error checks\n   are shown in\
    \ the Reply and Broadcast columns in the table.  The\n   message should be considered\
    \ valid only if all the fields shown\n   contain values in the respective ranges.\
    \  Whether to believe the\n   message if one or more of the fields marked \"ignore\"\
    \ contain invalid\n   values is at the discretion of the implementation.\n   \
    \   Field Name               Unicast/Manycast            Broadcast\n         \
    \                      Request     Reply\n      ---------------------------------------------------------------\n\
    \      LI                       0           0-3            0-3\n      VN     \
    \                  1-4         copied from    1-4\n                          \
    \                 request\n      Mode                     3           4      \
    \        5\n      Stratum                  0           0-15           0-15\n \
    \     Poll                     0           ignore         ignore\n      Precision\
    \                0           ignore         ignore\n      Root Delay         \
    \      0           ignore         ignore\n      Root Dispersion          0   \
    \        ignore         ignore\n      Reference Identifier     0           ignore\
    \         ignore\n      Reference Timestamp      0           ignore         ignore\n\
    \      Originate Timestamp      0           (see text)     ignore\n      Receive\
    \ Timestamp        0           (see text)     ignore\n      Transmit Timestamp\
    \       (see text)  nonzero        nonzero\n      Authenticator            optional\
    \    optional       optional\n   Although not required in a conforming SNTP client\
    \ implementation, it\n   is wise to consider a suite of sanity checks designed\
    \ to avoid\n   various kinds of abuse that might happen as the result of server\n\
    \   implementation errors or malicious attack.  Following is a list of\n   suggested\
    \ checks.\n   1.  When the IP source and destination addresses are available for\n\
    \       the client request, they should match the interchanged addresses\n   \
    \    in the server reply.\n   2.  When the UDP source and destination ports are\
    \ available for the\n       client request, they should match the interchanged\
    \ ports in the\n       server reply.\n   3.  The Originate Timestamp in the server\
    \ reply should match the\n       Transmit Timestamp used in the client request.\n\
    \   4.  The server reply should be discarded if any of the LI, Stratum,\n    \
    \   or Transmit Timestamp fields is 0 or the Mode field is not 4\n       (unicast)\
    \ or 5 (broadcast).\n   5.  A truly paranoid client can check that the Root Delay\
    \ and Root\n       Dispersion fields are each greater than or equal to 0 and less\n\
    \       than infinity, where infinity is currently a cozy number like one\n  \
    \     second.  This check avoids using a server whose synchronization\n      \
    \ source has expired for a very long time.\n"
- title: 6.  SNTP Server Operations
  contents:
  - "6.  SNTP Server Operations\n   A SNTP server operating with either an NTP or\
    \ SNTP client of the same\n   or previous versions retains no persistent state.\
    \  Because an SNTP\n   server ordinarily does not implement the full suite of\
    \ grooming and\n   mitigation algorithms intended to support redundant servers\
    \ and\n   diverse network paths, it should be operated only in conjunction with\n\
    \   a source of external synchronization, such as a reliable radio clock\n   or\
    \ telephone modem.  In this case it operates as a primary (stratum\n   1) server.\n\
    \   A SNTP server can operate with any unicast, manycast, or broadcast\n   address\
    \ or any combination of these addresses.  A unicast or manycast\n   server receives\
    \ a request (NTP mode 3), modifies certain fields in\n   the NTP header, and sends\
    \ a reply (NTP mode 4), possibly using the\n   same message buffer as the request.\
    \  A manycast server listens on the\n   designated broadcast address, but uses\
    \ its own unicast IP address in\n   the source address field of the reply.  Other\
    \ than the selection of\n   address in the reply, the operations of manycast and\
    \ unicast servers\n   are identical.  Broadcast messages are normally sent at\
    \ intervals\n   from 64 s to 1024 s, depending on the expected frequency tolerance\
    \ of\n   the client clocks and the required accuracy.\n   Unicast and manycast\
    \ servers copy the VN and Poll fields of the\n   request intact to the reply and\
    \ set the Stratum field to 1.\n      Note that SNTP servers normally operate as\
    \ primary (stratum 1)\n      servers.  Although operating at higher strata (up\
    \ to 15) while\n      synchronizing to an external source such as a GPS receiver\
    \ is not\n      forbidden, this is strongly discouraged.\n   If the Mode field\
    \ of the request is 3 (client), the reply is set to 4\n   (server).  If this field\
    \ is set to 1 (symmetric active), the reply is\n   set to 2 (symmetric passive).\
    \  This allows clients configured in\n   either client (NTP mode 3) or symmetric\
    \ active (NTP mode 1) to\n   interoperate successfully, even if configured in\
    \ possibly suboptimal\n   ways.  For any other value in the Mode field, the request\
    \ is\n   discarded.  In broadcast (unsolicited) mode, the VN field is set to\n\
    \   4, the Mode field is set to 5 (broadcast), and the Poll field set to\n   the\
    \ nearest integer base-2 logarithm of the poll interval.\n      Note that it is\
    \ highly desirable that a broadcast server also\n      supports unicast clients.\
    \  This is so a potential broadcast client\n      can calculate the propagation\
    \ delay using a client/server exchange\n      prior to switching to broadcast\
    \ client (listen-only) mode.  By\n      design, a manycast server is also a unicast\
    \ server.  There does\n      not seem to be a great advantage for a server to\
    \ operate as both\n      broadcast and manycast at the same time, although the\
    \ protocol\n      specification does not forbid it.\n   A broadcast or manycast\
    \ server does not send packets if not\n   synchronized to a correctly operating\
    \ reference source.  It may or\n   may not respond to a client request if it is\
    \ not synchronized, but\n   the preferred option is to respond because this allows\
    \ reachability\n   to be determined regardless of synchronization state.  If the\
    \ server\n   has never synchronized to a reference source, the LI field is set\
    \ to\n   3 (unsynchronized).  Once synchronized to a reference source, the LI\n\
    \   field is set to one of the other three values and remains at the last\n  \
    \ value set even if the reference source becomes unreachable or turns\n   faulty.\n\
    \   If the server is synchronized to a reference source, the Stratum\n   field\
    \ is set to 1, and the Reference Identifier field is set to the\n   ASCII source\
    \ identifier shown in Figure 2.  If the server is not\n   synchronized, the Stratum\
    \ field is set to zero, and the Reference\n   Identifier field is set to an ASCII\
    \ error identifier described below.\n   The Precision field is set to reflect\
    \ the maximum reading error of\n   the system clock.  For all practical cases\
    \ it is computed as the\n   negative base-2 logarithm of the number of significant\
    \ bits to the\n   right of the decimal point in the NTP timestamp format.  The\
    \ Root\n   Delay and Root Dispersion fields are set to 0 for a primary server.\n\
    \   The timestamp fields in the server message are set as follows.  If\n   the\
    \ server is unsynchronized or first coming up, all timestamp fields\n   are set\
    \ to zero, with one exception.  If the message is a reply to a\n   previously\
    \ received client request, the Transmit Timestamp field of\n   the request is\
    \ copied unchanged to the Originate Timestamp field of\n   the reply.  It is important\
    \ that this field be copied intact, as an\n   NTP or SNTP client uses it to avoid\
    \ bogus messages.\n   If the server is synchronized, the Reference Timestamp is\
    \ set to the\n   time the last update was received from the reference source.\
    \  The\n   Originate Timestamp field is set as in the unsynchronized case above.\n\
    \   The Transmit Timestamp field is set to the time of day when the\n   message\
    \ is sent.  In broadcast messages the Receive Timestamp field\n   is set to zero\
    \ and copied from the Transmit Timestamp field in other\n   messages.  The following\
    \ table summarizes these actions.\n      Field Name             Unicast/Manycast\
    \             Broadcast\n                             Request     Reply\n    \
    \  ----------------------------------------------------------------\n      LI\
    \                     ignore      as needed       as needed\n      VN        \
    \             1-4         copied from     4\n                                \
    \         request\n      Mode                   3           4               5\n\
    \      Stratum                ignore      1               1\n      Poll      \
    \             ignore      copied from     log2 poll\n                        \
    \                 request         interval\n      Precision              ignore\
    \      -log2 server    -log2 server\n                                        \
    \ significant     significant\n                                         bits \
    \           bits\n      Root Delay             ignore      0               0\n\
    \      Root Dispersion        ignore      0               0\n      Reference Identifier\
    \   ignore      source ident    source ident\n      Reference Timestamp    ignore\
    \      time of last    time of last\n                                        \
    \ source update   source update\n      Originate Timestamp    ignore      copied\
    \ from     0\n                                         transmit\n            \
    \                             timestamp\n      Receive Timestamp      ignore \
    \     time of day     0\n      Transmit Timestamp     (see text)  time of day\
    \     time of day\n      Authenticator          optional    optional        optional\n\
    \   There is some latitude on the part of most clients to forgive invalid\n  \
    \ timestamps, such as might occur when the server is first coming up or\n   during\
    \ periods when the reference source is inoperative.  The most\n   important indicator\
    \ of an unhealthy server is the Stratum field, in\n   which a value of 0 indicates\
    \ an unsynchronized condition.  When this\n   value is displayed, clients should\
    \ discard the server message,\n   regardless of the contents of other fields.\n"
- title: 7.  Configuration and Management
  contents:
  - "7.  Configuration and Management\n   Initial setup for SNTP servers and clients\
    \ can be done using a web\n   client, if available, or a serial port, if not.\
    \  Some folks hoped\n   that in-service management of NTP and SNTPv4 servers and\
    \ clients\n   could be performed using SNMP and a suitable MIB to be published,\
    \ and\n   this has happened in some commercial SNTP servers.  But, the means\n\
    \   that have been used in the last two decades and probably will be used\n  \
    \ in the next is the NTP control and monitoring protocol defined in RFC\n   1305.\
    \  Ordinarily, SNTP servers and clients are expected to operate\n   with little\
    \ or no site-specific configuration, other than specifying\n   the client IP address,\
    \ subnet mask, and gateway.\n   Unicast clients must be provided with one or more\
    \ designated server\n   names or IP addresses.  If more than one server is provided,\
    \ one can\n   be used for active operation and one of the others for backup should\n\
    \   the active one fail or show an error condition.  It is not normally\n   useful\
    \ to use more than one server at a time, as with millions of\n   SNTP-enabled\
    \ devices expected in the near future, such use would\n   represent unnecessary\
    \ drain on network and server resources.\n   Broadcast servers and manycast clients\
    \ must be provided with the TTL\n   and local broadcast or multicast group address.\
    \  Unicast and manycast\n   servers and broadcast clients may be configured with\
    \ a list of\n   address-mask pairs for access control, so that only those clients\
    \ or\n   servers known to be trusted will be accepted.  Multicast servers and\n\
    \   clients must implement the IGMP protocol and be provided with the\n   local\
    \ broadcast or multicast group address as well.  The\n   configuration data for\
    \ cryptographic authentication is beyond the\n   scope of this memo.\n   There\
    \ are several scenarios that provide automatic server discovery\n   and selection\
    \ for SNTP clients with no pre-specified server\n   configuration.  For instance,\
    \ a role server with CNAME such as\n   pool.ntp.org returns a randomized list\
    \ of volunteer secondary server\n   addresses, and the client can select one or\
    \ more as candidates.  For\n   an IP subnet or LAN segment including an NTP or\
    \ SNTP server, SNTP\n   clients can be configured as broadcast clients.  The same\
    \ approach\n   can be used with multicast servers and clients.  In both cases,\n\
    \   provision of an access control list is a good way to ensure that only\n  \
    \ trusted sources can be used to set the system clock.\n   In another scenario\
    \ suitable for an extended network with significant\n   network propagation delays,\
    \ clients can be configured for manycast\n   addresses, both upon initial startup\
    \ and after some period when the\n   currently selected unicast source has not\
    \ been heard.  Following the\n   defined protocol, the client binds to the server\
    \ from which the first\n   reply is received and continues operation in unicast\
    \ mode.\n"
- title: 8.  The Kiss-o'-Death Packet
  contents:
  - "8.  The Kiss-o'-Death Packet\n   In the rambunctious Internet of today, it is\
    \ imperative that some\n   means be available to tell a client to stop making\
    \ requests and to go\n   somewhere else.  A recent experience involved a large\
    \ number of\n   home/office routers all configured to use a particular university\n\
    \   time server.  Under some error conditions, a substantial fraction of\n   these\
    \ routers would send packets at intervals of one second.  The\n   resulting traffic\
    \ spike was dramatic, and extreme measures were\n   required to diagnose the problem\
    \ and to bring it under control.  The\n   conclusion is that clients must respect\
    \ the means available to\n   targeted servers to stop them from sending packets.\n\
    \   According to the NTP specification RFC 1305, if the Stratum field in\n   the\
    \ NTP header is 1, indicating a primary server, the Reference\n   Identifier field\
    \ contains an ASCII string identifying the particular\n   reference clock type.\
    \  However, in RFC 1305 nothing is said about the\n   Reference Identifier field\
    \ if the Stratum field is 0, which is called\n   out as \"unspecified\".  However,\
    \ if the Stratum field is 0, the\n   Reference Identifier field can be used to\
    \ convey messages useful for\n   status reporting and access control.  In NTPv4\
    \ and SNTPv4, packets of\n   this kind are called Kiss-o'-Death (KoD) packets,\
    \ and the ASCII\n   messages they convey are called kiss codes.  The KoD packets\
    \ got\n   their name because an early use was to tell clients to stop sending\n\
    \   packets that violate server access controls.\n   In general, an SNTP client\
    \ should stop sending to a particular server\n   if that server returns a reply\
    \ with a Stratum field of 0, regardless\n   of kiss code, and an alternate server\
    \ is available.  If no alternate\n   server is available, the client should retransmit\
    \ using an\n   exponential-backoff algorithm described in the next section.\n\
    \   The kiss codes can provide useful information for an intelligent\n   client.\
    \  These codes are encoded in four-character ASCII strings left\n   justified\
    \ and zero filled.  The strings are designed for character\n   displays and log\
    \ files.  Usually, only a few of these codes can occur\n   with SNTP clients,\
    \ including DENY, RSTR, and RATE.  Others can occur\n   more rarely, including\
    \ INIT and STEP, when the server is in some\n   special temporary condition. \
    \ Figure 3 shows a list of the kiss codes\n   currently defined.  These are for\
    \ informational purposes only; the\n   list might be modified or extended in the\
    \ future.\n      Code    Meaning\n      --------------------------------------------------------------\n\
    \      ACST    The association belongs to a anycast server\n      AUTH    Server\
    \ authentication failed\n      AUTO    Autokey sequence failed\n      BCST   \
    \ The association belongs to a broadcast server\n      CRYP    Cryptographic authentication\
    \ or identification failed\n      DENY    Access denied by remote server\n   \
    \   DROP    Lost peer in symmetric mode\n      RSTR    Access denied due to local\
    \ policy\n      INIT    The association has not yet synchronized for the first\n\
    \              time\n      MCST    The association belongs to a manycast server\n\
    \      NKEY    No key found.  Either the key was never installed or\n        \
    \      is not trusted\n      RATE    Rate exceeded.  The server has temporarily\
    \ denied access\n              because the client exceeded the rate threshold\n\
    \      RMOT    Somebody is tinkering with the association from a remote\n    \
    \          host running ntpdc.  Not to worry unless some rascal has\n        \
    \      stolen your keys\n      STEP    A step change in system time has occurred,\
    \ but the\n              association has not yet resynchronized\n            \
    \               Figure 3.  Kiss Codes\n"
- title: 9.  On Being a Good Network Citizen
  contents:
  - "9.  On Being a Good Network Citizen\n   SNTP and its big brother NTP have been\
    \ in explosive growth over the\n   last few years, mirroring the growth of the\
    \ Internet.  Just about\n   every Internet appliance has some kind of NTP support,\
    \ including\n   Windows XP, Cisco routers, embedded controllers, and software\
    \ systems\n   of all kinds.  This is the first edition of the SNTP RFC where it\
    \ has\n   become necessary to lay down rules of engagement in the form of\n  \
    \ design criteria for SNTP client implementations.  This is necessary\n   to educate\
    \ software developers regarding the proper use of Internet\n   time server resources\
    \ as the Internet expands and demands on time\n   servers increase, and to prevent\
    \ the recurrence of the sort of\n   problem mentioned above.\n"
- title: 10.  Best Practices
  contents:
  - "10.  Best Practices\n   NTP and SNTP clients can consume considerable network\
    \ and server\n   resources if they are not good network citizens.  There are now\n\
    \   consumer Internet commodity devices numbering in the millions that\n   are\
    \ potential customers of public and private NTP and SNTP servers.\n   Recent experience\
    \ strongly suggests that device designers pay\n   particular attention to minimizing\
    \ resource impacts, especially if\n   large numbers of these devices are deployed.\
    \  The most important\n   design consideration is the interval between client\
    \ requests, called\n   the poll interval.  It is extremely important that the\
    \ design use the\n   maximum poll interval consistent with acceptable accuracy.\n\
    \   1.  A client MUST NOT under any conditions use a poll interval less\n    \
    \   than 15 seconds.\n   2.  A client SHOULD increase the poll interval using\
    \ exponential\n       backoff as performance permits and especially if the server\
    \ does\n       not respond within a reasonable time.\n   3.  A client SHOULD use\
    \ local servers whenever available to avoid\n       unnecessary traffic on backbone\
    \ networks.\n   4.  A client MUST allow the operator to configure the primary\
    \ and/or\n       alternate server names or addresses in addition to or in place\
    \ of\n       a firmware default IP address.\n   5.  If a firmware default server\
    \ IP address is provided, it MUST be a\n       server operated by the manufacturer\
    \ or seller of the device or\n       another server, but only with the operator's\
    \ permission.\n   6.  A client SHOULD use the Domain Name System (DNS) to resolve\
    \ the\n       server IP addresses, so the operator can do effective load\n   \
    \    balancing among a server clique and change IP address binding to\n      \
    \ canonical names.\n   7.  A client SHOULD re-resolve the server IP address at\
    \ periodic\n       intervals, but not at intervals less than the time-to-live\
    \ field\n       in the DNS response.\n   8.  A client SHOULD support the NTP access-refusal\
    \ mechanism so that\n       a server kiss-o'-death reply in response to a client\
    \ request\n       causes the client to cease sending requests to that server and\
    \ to\n       switch to an alternate, if available.\n   The following algorithm\
    \ can be used as a pattern for specific\n   implementations.  It uses the following\
    \ variables:\n   Timer: This is a counter that decrements at a fixed rate.  When\
    \ it\n   reaches zero, a packet is sent, and the timer is initialized with the\n\
    \   timeout for the next packet.\n   Maximum timeout: This is the maximum timeout\
    \ determined from the\n   given oscillator frequency tolerance and the required\
    \ accuracy.\n   Server Name: This is the DNS name of the server.  There may be\
    \ more\n   than one of them, to be selected by some algorithm not considered\n\
    \   here.\n   Server IP Address: This is the IPv4, IPv6, or OSI address of the\n\
    \   server.\n   If the firmware or documentation includes specific server names,\
    \ the\n   names should be those the manufacturer or seller operates as a\n   customer\
    \ convenience or those for which specific permission has been\n   obtained from\
    \ the operator.  A DNS request for a generic server name,\n   such as ntp.mytimeserver.com,\
    \ should result in a random selection of\n   server IP addresses available for\
    \ that purpose.  Each time a DNS\n   request is received, a new randomized list\
    \ is returned.  The client\n   ordinarily uses the first address on the list.\n\
    \      When candidate SNTP or NTP servers are selected, it is imperative\n   \
    \   to respect the server operator's conditions of access.  Lists of\n      public\
    \ servers and their conditions of access are available at\n      www.ntp.org.\
    \  A semi-automatic server discovery scheme using DNS\n      is described at that\
    \ site.  Some ISPs operate public servers,\n      although finding them via their\
    \ help desks can be difficult.\n   A well-behaved client operates as follows (note\
    \ that steps 2-4\n   constitute a synchronization loop):\n   1.  Consider the\
    \ specified frequency tolerance of the system clock\n       oscillator.  Define\
    \ the required accuracy of the system clock,\n       then calculate the maximum\
    \ timeout.  For instance, if the\n       frequency tolerance is 200 parts per\
    \ million (PPM) and the\n       required accuracy is one minute, the maximum timeout\
    \ is about 3.5\n       days.  Use the longest maximum timeout possible given the\
    \ system\n       constraints to minimize time server aggregate load, but never\n\
    \       make it less than 15 minutes.\n   2.  When the client is first coming\
    \ up or after reset, randomize the\n       timeout from one to five minutes. \
    \ This is to minimize shock when\n       3000 PCs are rebooted at the same time\
    \ power is restored after a\n       blackout.  Assume at this time that the IP\
    \ address is unknown and\n       that the system clock is unsynchronized.  Otherwise,\
    \ use the\n       timeout value as calculated in previous loop steps.  Note that\
    \ it\n       may be necessary to refrain from implementing the aforementioned\n\
    \       random delay for some classes of International Computer Security\n   \
    \    Association (ICSA) certification.\n   3.  When the timer reaches zero, if\
    \ the IP address is not known, send\n       a DNS query packet; otherwise, send\
    \ an NTP request packet to that\n       address.  If no reply packet has been\
    \ heard since the last\n       timeout, double the timeout, but do not make it\
    \ greater than the\n       maximum timeout.  If primary and secondary time servers\
    \ have been\n       configured, alternate queries between the primary and secondary\n\
    \       servers when no successful response has been received.\n   4.  If a DNS\
    \ reply packet is received, save the IP address and\n       continue at step 2.\
    \  If a KoD packet is received, remove that\n       time server from the list,\
    \ activate the secondary time server,\n       and continue at step 2.  If a received\
    \ packet fails the sanity\n       checks, drop that packet and also continue at\
    \ step 2.  If a valid\n       NTP packet is received, update the system clock,\
    \ set the timeout\n       to the maximum, and continue at step 2.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Without cryptographic authentication, SNTPv4\
    \ service is vulnerable to\n   disruption by misbehaving or hostile SNTP or NTP\
    \ broadcast servers\n   elsewhere in the Internet.  It is strongly recommended\
    \ that access\n   controls and/or cryptographic authentication means be provided\
    \ for\n   additional security.  This document includes protocol provisions for\n\
    \   adding such security mechanisms, but it does not define the\n   mechanisms\
    \ themselves.  A separate document [MIL03] in preparation\n   will define a cryptographic\
    \ security mechanism for SNTP.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   Jeff Learman was helpful in developing the OSI model\
    \ for this\n   protocol.  Ajit Thyagarajan provided valuable suggestions and\n\
    \   corrections.\n"
- title: 13.  Contributors
  contents:
  - "13.  Contributors\n   D. Plonka\n   J. Montgomery\n"
- title: 14.  Informative References
  contents:
  - "14.  Informative References\n   [BRA97]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n            Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [COL94]  Colella, R., Callon, R., Gardner, E., and Y. Rekhter,\n \
    \           \"Guidelines for OSI NSAP Allocation in the Internet\", RFC\n    \
    \        1629, May 1994.\n   [DEE89]  Deering, S., \"Host extensions for IP multicasting\"\
    , STD 5,\n            RFC 1112, August 1989.\n   [DEE98]  Deering, S. and R. Hinden,\
    \ \"Internet Protocol, Version 6\n            (IPv6) Specification\", RFC 2460,\
    \ December 1998.\n   [DOB91]  Shue, C., Haggerty, W., and K. Dobbins, \"OSI connectionless\n\
    \            transport services on top of UDP: Version 1\", RFC 1240, June\n \
    \           1991.\n   [FUR94]  Furniss, P., \"Octet Sequences for Upper-Layer\
    \ OSI to Support\n            Basic Communications Applications\", RFC 1698, October\
    \ 1994.\n   [ISO86]  International Standards 8602 - Information Processing\n \
    \           Systems - OSI: Connectionless Transport Protocol\n            Specification.\
    \  International Standards Organization,\n            December 1986.\n   [MIL92]\
    \  Mills, D., \"Network Time Protocol (Version 3) Specification,\n           \
    \ Implementation and Analysis\", RFC 1305, March 1992.\n   [MIL03]  Mills, D.,\
    \ \"The Autokey Security Architecture, Protocol and\n            Algorithms\"\
    , http://eecis.udel.edu/~mills/database/reports/\n            stime/stime.pdf,\
    \ August 2003.\n   [PAR93]  Partridge, C., Mendez, T., and W. Milliken, \"Host\
    \ Anycasting\n            Service\", RFC 1546, November 1993.\n   [POS80]  Postel,\
    \ J., \"User Datagram Protocol\", STD 6, RFC 768, August\n            1980.\n\
    \   [POS83]  Postel, J. and K. Harrenstien, \"Time Protocol\", STD 26, RFC\n \
    \           868, May 1983.\n   [SRI99]  Srisuresh, P. and M. Holdrege, \"IP Network\
    \ Address\n            Translator (NAT) Terminology and Considerations\", RFC\
    \ 2663,\n            August 1999.\n   [SRI01]  Srisuresh, P. and K. Egevang, \"\
    Traditional IP Network\n            Address Translator (Traditional NAT)\", RFC\
    \ 3022, January\n            2001.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David L. Mills\n   Electrical and Computer Engineering Department\n\
    \   University of Delaware\n   Newark, DE 19716\n   Phone: (302) 831-8247\n  \
    \ EMail: mills@udel.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
