- title: __initial_text__
  contents:
  - '                 Simple Certificate Enrolment Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Simple Certificate Enrolment Protocol\n\
    \   (SCEP), a PKI protocol that leverages existing technology by using\n   Cryptographic\
    \ Message Syntax (CMS, formerly known as PKCS #7) and\n   PKCS #10 over HTTP.\
    \  SCEP is the evolution of the enrolment protocol\n   sponsored by Cisco Systems,\
    \ which enjoys wide support in both client\n   and server implementations, as\
    \ well as being relied upon by numerous\n   other industry standards that work\
    \ with certificates.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8894.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Conventions Used in This Document\n\
    \   2.  SCEP Overview\n     2.1.  SCEP Entities\n       2.1.1.  Client\n     \
    \  2.1.2.  Certificate Authority\n     2.2.  CA Certificate Distribution\n   \
    \  2.3.  Client Authentication\n     2.4.  Enrolment Authorisation\n     2.5.\
    \  Certificate Enrolment/Renewal\n       2.5.1.  Client State Transitions\n  \
    \   2.6.  Certificate Access\n     2.7.  CRL Access\n     2.8.  Certificate Revocation\n\
    \     2.9.  Mandatory-to-Implement Functionality\n   3.  SCEP Secure Message Objects\n\
    \     3.1.  SCEP Message Object Processing\n     3.2.  SCEP pkiMessage\n     \
    \  3.2.1.  Signed Transaction Attributes\n         3.2.1.1.  transactionID\n \
    \        3.2.1.2.  messageType\n         3.2.1.3.  pkiStatus\n         3.2.1.4.\
    \  failInfo and failInfoText\n         3.2.1.5.  senderNonce and recipientNonce\n\
    \       3.2.2.  SCEP pkcsPKIEnvelope\n     3.3.  SCEP pkiMessage types\n     \
    \  3.3.1.  PKCSReq/RenewalReq\n       3.3.2.  CertRep\n         3.3.2.1.  CertRep\
    \ SUCCESS\n         3.3.2.2.  CertRep FAILURE\n         3.3.2.3.  CertRep PENDING\n\
    \       3.3.3.  CertPoll (GetCertInitial)\n       3.3.4.  GetCert and GetCRL\n\
    \     3.4.  Degenerate certificates-only CMS SignedData\n     3.5.  CA Capabilities\n\
    \       3.5.1.  GetCACaps HTTP Message Format\n       3.5.2.  CA Capabilities\
    \ Response Format\n   4.  SCEP Transactions\n     4.1.  HTTP POST and GET Message\
    \ Formats\n     4.2.  Get CA Certificate\n       4.2.1.  Get CA Certificate Response\
    \ Message Format\n         4.2.1.1.  CA Certificate Response Message Format\n\
    \         4.2.1.2.  CA Certificate Chain Response Message Format\n     4.3.  Certificate\
    \ Enrolment/Renewal\n       4.3.1.  Certificate Enrolment/Renewal Response Message\n\
    \     4.4.  Poll for Client Initial Certificate\n       4.4.1.  Polling Response\
    \ Message Format\n     4.5.  Certificate Access\n       4.5.1.  Certificate Access\
    \ Response Message Format\n     4.6.  CRL Access\n       4.6.1.  CRL Access Response\
    \ Message Format\n     4.7.  Get Next Certificate Authority Certificate\n    \
    \   4.7.1.  Get Next CA Response Message Format\n   5.  SCEP Transaction Examples\n\
    \     5.1.  Successful Transactions\n     5.2.  Transactions with Errors\n   6.\
    \  IANA Considerations\n     6.1.  Registration of the application/x-x509-ca-cert\
    \ Media Type\n     6.2.  Registration of the application/x-x509-ca-ra-cert Media\n\
    \           Type\n     6.3.  Registration of the application/x-x509-next-ca-cert\
    \ Media\n           Type\n     6.4.  Registration of the application/x-pki-message\
    \ Media Type\n   7.  Security Considerations\n     7.1.  General Security\n  \
    \   7.2.  Use of the CA Private Key\n     7.3.  ChallengePassword Shared Secret\
    \ Value\n     7.4.  Lack of Certificate Issue Confirmation\n     7.5.  GetCACaps\
    \ Issues\n     7.6.  Lack of PoP in Renewal Requests\n     7.7.  Traffic Monitoring\n\
    \     7.8.  Unnecessary Cryptography\n     7.9.  Use of SHA-1\n     7.10. Use\
    \ of HTTP\n   8.  References\n     8.1.  Normative References\n     8.2.  Informative\
    \ References\n   Appendix A.  Background Notes\n   Acknowledgements\n   Author's\
    \ Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   X.509 certificates serve as the basis for several standardised\n\
    \   security protocols such as TLS [RFC8446], S/MIME [RFC8551], and IKE/\n   IPsec\
    \ [RFC7296].  When an X.509 certificate is issued, there\n   typically is a need\
    \ for a certificate management protocol to enable a\n   PKI client to request\
    \ or renew a certificate from a Certificate\n   Authority (CA).  This specification\
    \ defines a protocol, the Simple\n   Certificate Enrolment Protocol (SCEP), for\
    \ certificate management and\n   certificate and CRL queries.\n   The SCEP protocol\
    \ supports the following general operations:\n   *  CA public key distribution\n\
    \   *  Certificate enrolment and issue\n   *  Certificate renewal\n   *  Certificate\
    \ query\n   *  CRL query\n   SCEP makes extensive use of CMS [RFC5652] and PKCS\
    \ #10 [RFC2986].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n   This document uses the Augmented\
    \ Backus-Naur Form (ABNF) notation as\n   specified in [RFC5234] for defining\
    \ formal syntax of commands.  Non-\n   terminals not defined in [RFC5234] are\
    \ defined in Section 4.1.\n"
- title: 2.  SCEP Overview
  contents:
  - "2.  SCEP Overview\n   This section provides an overview of the functionality\
    \ of SCEP.\n"
- title: 2.1.  SCEP Entities
  contents:
  - "2.1.  SCEP Entities\n   The entity types defined in SCEP are a client requesting\
    \ a\n   certificate and a Certificate Authority (CA) that issues the\n   certificate.\
    \  These are described in the following sections.\n"
- title: 2.1.1.  Client
  contents:
  - "2.1.1.  Client\n   A client MUST have the following information locally configured:\n\
    \   1.  The CA's fully qualified domain name or IP address.\n   2.  Any identification\
    \ and/or authorisation information required by\n       the CA before a certificate\
    \ will be issued, as described in\n       Section 3.3.1.\n   3.  The identifying\
    \ information that is used for authentication of\n       the CA in Section 4.2.1,\
    \ typically a certificate fingerprint.\n"
- title: 2.1.2.  Certificate Authority
  contents:
  - "2.1.2.  Certificate Authority\n   A SCEP CA is the entity that signs client certificates.\
    \  A CA may\n   enforce policies and apply them to certificate requests, and it\
    \ may\n   reject a request for any reason.\n   Since the client is expected to\
    \ perform signature verification and\n   optionally encryption using the CA certificate,\
    \ the keyUsage\n   extension in the CA certificate MUST indicate that it is valid\
    \ for\n   digitalSignature and keyEncipherment (if the key is to be used for\n\
    \   en/decryption) alongside the usual CA usages of keyCertSign and/or\n   cRLSign.\n"
- title: 2.2.  CA Certificate Distribution
  contents:
  - "2.2.  CA Certificate Distribution\n   If the CA certificate(s) have not previously\
    \ been acquired by the\n   client through some other means, the client MUST retrieve\
    \ them before\n   any PKI operation (Section 3) can be started.  Since no public\
    \ key\n   has yet been exchanged between the client and the CA, the messages\n\
    \   cannot be secured using CMS, and the CA certificate request and\n   response\
    \ data is instead transferred in the clear.\n   If an intermediate CA is in use,\
    \ a certificates-only CMS SignedData\n   message with a certificate chain consisting\
    \ of all CA certificates is\n   returned.  Otherwise, the CA certificate itself\
    \ is returned.\n   The CA certificate MAY be provided out of band to the client.\n\
    \   Alternatively, the CA certificate fingerprint MAY be used to\n   authenticate\
    \ a CA certificate distributed by the GetCACert response\n   (Section 4.2) or\
    \ via HTTP certificate-store access [RFC4387].  The\n   fingerprint is created\
    \ by calculating a SHA-256 hash over the whole\n   CA certificate.  (For legacy\
    \ reasons, a SHA-1 hash may be used by\n   some implementations.)\n   After the\
    \ client gets the CA certificate, it SHOULD authenticate it\n   in some manner\
    \ unless this is deemed unnecessary, for example,\n   because the device is being\
    \ provisioned inside a trusted environment.\n   For example, the client could\
    \ compare the certificate's fingerprint\n   with locally configured, out-of-band\
    \ distributed, identifying\n   information, or by some equivalent means such as\
    \ a direct comparison\n   with a locally stored copy of the certificate.\n   Intermediate\
    \ CA certificates, if any, are signed by a higher-level\n   CA, so there is no\
    \ need to authenticate them against the out-of-band\n   data.  Since intermediate\
    \ CA certificates are rolled over more\n   frequently than long-lived top-level\
    \ CA certificates, clients MUST\n   verify intermediate-level CA certificates\
    \ before use during protocol\n   exchanges in case the intermediate CA certificate\
    \ has expired or\n   otherwise been invalidated.\n   When a CA certificate expires,\
    \ certificates that have been signed by\n   it may no longer be regarded as valid.\
    \  CA key rollover provides a\n   mechanism by which the CA can distribute a new\
    \ CA certificate that\n   will be valid in the future once the current certificate\
    \ has expired.\n   This is done via the GetNextCACert message (Section 4.7).\n"
- title: 2.3.  Client Authentication
  contents:
  - "2.3.  Client Authentication\n   As with every protocol that uses public-key cryptography,\
    \ the\n   association between the public keys used in the protocol and the\n \
    \  identities with which they are associated must be authenticated in a\n   cryptographically\
    \ secure manner.  Communications between the client\n   and the CA are secured\
    \ using SCEP Secure Message Objects as explained\n   in Section 3, which specifies\
    \ how CMS is used to encrypt and sign the\n   data.  In order to perform the signing\
    \ operation, the client uses an\n   appropriate local certificate:\n   1.  If\
    \ the client does not have an appropriate existing certificate,\n       then a\
    \ locally generated self-signed certificate MUST be used.\n       The keyUsage\
    \ extension in the certificate MUST indicate that it\n       is valid for digitalSignature\
    \ and keyEncipherment (if available).\n       The self-signed certificate SHOULD\
    \ use the same subject name and\n       key as in the PKCS #10 request.  In this\
    \ case, the messageType is\n       PKCSReq (see Section 3.2.1.2).\n   2.  If the\
    \ client already has a certificate issued by the SCEP CA,\n       and the CA supports\
    \ renewal (see Section 2.5), that certificate\n       SHOULD be used.  In this\
    \ case, the messageType is RenewalReq (see\n       Section 3.2.1.2).\n   3.  Alternatively,\
    \ if the client has no certificate issued by the\n       SCEP CA but has credentials\
    \ from an alternate CA, then the\n       certificate issued by the alternate CA\
    \ MAY be used in a renewal\n       request as described above.  The SCEP CA's\
    \ policy will determine\n       whether the request can be accepted or not.\n\
    \   Note that although the above text describes several different types\n   of\
    \ operations, for historical reasons, most implementations always\n   apply the\
    \ first one, even if an existing certificate already exists.\n   For this reason,\
    \ support for the first case is mandatory while\n   support for the latter ones\
    \ are optional (see Section 2.9).\n   During the certificate-enrolment process,\
    \ the client MUST use the\n   selected certificate's key when signing the CMS\
    \ envelope (see\n   Section 3).  This certificate will be either the self-signed\
    \ one\n   matching the PKCS #10 request or the CA-issued one used to authorise\n\
    \   a renewal, and it MUST be included in the signedData certificates\n   field\
    \ (possibly as part of a full certificate chain).  If the key\n   being certified\
    \ allows encryption, then the CA's CertResp will use\n   the same certificate's\
    \ public key when encrypting the response.\n   Note that, in the case of renewal\
    \ operations, this means that the\n   request will be signed and authenticated\
    \ with the key in the\n   previously issued certificate rather than the key in\
    \ the PKCS #10\n   request, and the response may similarly be returned encrypted\
    \ with\n   the key in the previously issued certificate.  This has security\n\
    \   implications; see Section 7.6.\n"
- title: 2.4.  Enrolment Authorisation
  contents:
  - "2.4.  Enrolment Authorisation\n   PKCS #10 [RFC2986] specifies a PKCS #9 [RFC2985]\
    \ challengePassword\n   attribute to be sent as part of the enrolment request.\
    \  When\n   utilising the challengePassword, the CA distributes a shared secret\n\
    \   to the client, which will be used to authenticate the request from\n   the\
    \ client.  It is RECOMMENDED that the challengePassword be a one-\n   time authenticator\
    \ value to limit the ability of an attacker who can\n   capture the authenticator\
    \ from the client or CA and reuse it to\n   request further certificates.\n  \
    \ Inclusion of the challengePassword by the SCEP client is RECOMMENDED;\n   however,\
    \ its omission allows for unauthenticated authorisation of\n   enrolment requests\
    \ (which may, however, require manual approval of\n   each certificate issue if\
    \ other security measures to control issue\n   aren't in place; see below).  Inclusion\
    \ is OPTIONAL for renewal\n   requests that are authenticated by being signed\
    \ with an existing\n   certificate.  The CMS envelope protects the privacy of\
    \ the\n   challengePassword.\n   A client that is performing certificate renewal\
    \ as per Section 2.5\n   SHOULD omit the challengePassword but MAY send the originally\n\
    \   distributed shared secret in the challengePassword attribute.  The\n   SCEP\
    \ CA MAY authenticate the request using the challengePassword in\n   addition\
    \ to the previously issued certificate that signs the request.\n   The SCEP CA\
    \ MUST NOT attempt to authenticate a client based on a\n   self-signed certificate\
    \ unless it has been verified through out-of-\n   band means such as a certificate\
    \ fingerprint.\n   To perform the authorisation in manual mode, the client's request\
    \ is\n   placed in the PENDING state until the CA operator authorises or\n   rejects\
    \ it.  Manual authorisation is used when the client has only a\n   self-signed\
    \ certificate that hasn't been previously authenticated by\n   the CA and/or a\
    \ challengePassword is not available.  The SCEP CA MAY\n   either reject unauthorised\
    \ requests or mark them for manual\n   authorisation according to CA policy.\n"
- title: 2.5.  Certificate Enrolment/Renewal
  contents:
  - "2.5.  Certificate Enrolment/Renewal\n   A client starts an enrolment transaction\
    \ (Section 3.3.1) by creating\n   a certificate request using PKCS #10 and sends\
    \ the request to the CA\n   enveloped using CMS (Section 3).\n   If the CA supports\
    \ certificate renewal and the CA policy permits,\n   then a new certificate with\
    \ new validity dates can be issued, even\n   though the old one is still valid.\
    \  To renew an existing certificate,\n   the client uses the RenewalReq message\
    \ (see Section 3.3) and signs it\n   with the existing client certificate.  The\
    \ client SHOULD use a new\n   keypair when requesting a new certificate but MAY\
    \ request a new\n   certificate using the old keypair.\n   If the CA returns a\
    \ CertRep message (Section 3.3.2) with status set\n   to PENDING, the client enters\
    \ into polling mode by periodically\n   sending a CertPoll message (Section 3.3.3)\
    \ to the CA until the CA\n   operator completes the manual authentication (approving\
    \ or denying\n   the request).  The frequency of the polling operation is a CA/client\n\
    \   configuration issue and may range from seconds or minutes when the\n   issue\
    \ process is automatic but not instantaneous, through to hours or\n   days if\
    \ the certificate-issue operation requires manual approval.\n   If polling mode\
    \ is being used, then the client will send a single\n   PKCSReq/RenewalReq message\
    \ (Section 3.3.1), followed by 0 or more\n   CertPoll messages (Section 3.3.3).\
    \  The CA will, in return, send 0 or\n   more CertRep messages (Section 3.3.2)\
    \ with status set to PENDING in\n   response to CertPolls, followed by a single\
    \ CertRep message\n   (Section 3.3.2) with status set to either SUCCESS or FAILURE.\n"
- title: 2.5.1.  Client State Transitions
  contents:
  - "2.5.1.  Client State Transitions\n   The client state transitions during the\
    \ SCEP process are indicated in\n   Figure 1.\n   [CERT-NONEXISTENT] ------> [CERT-REQ-PENDING]\
    \ --------> [CERT-ISSUED]\n         ^            PKCSReq    |           CertRep(SUCCESS)\n\
    \         |          RenewalReq   |\n         CertRep(FAILURE) or\n         Max-time/max-polls\
    \ exceeded\n                     Figure 1: State Transition Diagram\n   The certificate-issue\
    \ process starts at state CERT-NONEXISTENT.\n   Sending a PKCSReq/RenewalReq message\
    \ changes the state to CERT-REQ-\n   PENDING.\n   If the CA returns a CertRep\
    \ message with pkiStatus set to SUCCESS,\n   then the state changes to CERT-ISSUED.\n\
    \   If the CA returns a CertRep message with pkiStatus set to FAILURE or\n   there\
    \ is no response, then the state reverts back to CERT-\n   NONEXISTENT.\n   If\
    \ the CA returns a CertRep message with pkiStatus set to PENDING,\n   then the\
    \ client will keep polling by sending a CertPoll message until\n   either a CertRep\
    \ message with status set to SUCCESS or FAILURE is\n   received, a timeout occurs,\
    \ or the maximum number of polls has been\n   exceeded.\n   Figure 2 shows a successful\
    \ transaction in automatic mode\n       CLIENT                              CA\
    \ SERVER\n   PKCSReq: PKI cert. enrolment message\n   Receive issued certificate.\n\
    \                          Figure 2: Automatic Mode\n   Figure 3 shows a successful\
    \ transaction in manual mode:\n       CLIENT                              CA SERVER\n\
    \   PKCSReq: PKI cert. enrolment message\n   CertPoll: Polling message\n   CertPoll:\
    \ Polling message\n   Receive issued certificate.\n                          \
    \ Figure 3: Manual Mode\n"
- title: 2.6.  Certificate Access
  contents:
  - "2.6.  Certificate Access\n   A certificate query message is defined for clients\
    \ to retrieve a copy\n   of their own certificate from the CA.  It allows clients\
    \ that do not\n   store their certificates locally to obtain a copy when needed.\
    \  This\n   functionality is not intended to provide a general-purpose\n   certificate-access\
    \ service, which may be achieved instead via HTTP\n   certificate-store access\
    \ [RFC4387] or Lightweight Directory Access\n   Protocol (LDAP).\n   To retrieve\
    \ a certificate from the CA, a client sends a request\n   consisting of the certificate's\
    \ issuer name and serial number.  This\n   assumes that the client has saved the\
    \ issuer name and the serial\n   number of the issued certificate from the previous\
    \ enrolment\n   transaction.  The transaction to retrieve a certificate consists\
    \ of\n   one GetCert (Section 3.3.4) message and one CertRep (Section 3.3.2)\n\
    \   message, as shown in Figure 4.\n      CLIENT                             \
    \  CA SERVER\n   GetCert: PKI certificate query message\n   Receive the certificate.\n\
    \                     Figure 4: Retrieving a Certificate\n"
- title: 2.7.  CRL Access
  contents:
  - "2.7.  CRL Access\n   SCEP clients MAY request a CRL via one of three methods:\n\
    \   1.  If the CA supports the CRL Distribution Points (CRLDPs) extension\n  \
    \     [RFC5280] in issued certificates, then the CRL MAY be retrieved\n      \
    \ via the mechanism specified in the CRLDP.\n   2.  If the CA supports HTTP certificate-store\
    \ access [RFC4387], then\n       the CRL MAY be retrieved via the AuthorityInfoAcces\
    \ [RFC5280]\n       location specified in the certificate.\n   3.  Only if the\
    \ CA does not support CRLDPs or HTTP access should a\n       CRL query be composed\
    \ by creating a GetCRL message consisting of\n       the issuer name and serial\
    \ number from the certificate whose\n       revocation status is being queried.\n\
    \   The message is sent to the SCEP CA in the same way as the other SCEP\n   requests.\
    \  The transaction to retrieve a CRL consists of one GetCRL\n   PKI message and\
    \ one CertRep PKI message, which contains only the CRL\n   (no certificates) in\
    \ a degenerate certificates-only CMS SignedData\n   message (Section 3.4), as\
    \ shown in Figure 5.\n          CLIENT                           CA SERVER\n \
    \     GetCRL: PKI CRL query message\n   Receive the CRL\n                    \
    \     Figure 5: Retrieving a CRL\n"
- title: 2.8.  Certificate Revocation
  contents:
  - "2.8.  Certificate Revocation\n   SCEP does not specify a method to request certificate\
    \ revocation.  In\n   order to revoke a certificate, the client must contact the\
    \ CA using a\n   non-SCEP-defined mechanism.\n"
- title: 2.9.  Mandatory-to-Implement Functionality
  contents:
  - "2.9.  Mandatory-to-Implement Functionality\n   At a minimum, all SCEP implementations\
    \ compliant with this\n   specification MUST support GetCACaps (Section 3.5.1),\
    \ GetCACert\n   (Section 4.2), PKCSReq (Section 3.3.1) (and its associated response\n\
    \   messages), communication of binary data via HTTP POST (Section 4.1),\n   and\
    \ the AES128-CBC [AES] and SHA-256 [SHA2] algorithms to secure\n   pkiMessages\
    \ (Section 3.2).\n   For historical reasons, implementations MAY support communications\
    \ of\n   binary data via HTTP GET (Section 4.1), and the triple DES-CBC and\n\
    \   SHA-1 algorithms to secure pkiMessages (Section 3.2).\n   Implementations\
    \ MUST NOT support the obsolete and/or insecure single\n   DES and MD5 algorithms\
    \ used in earlier versions of this\n   specification, since the unsecured nature\
    \ of GetCACaps means that an\n   in-path attacker can trivially roll back the\
    \ encryption used to these\n   insecure algorithms; see Section 7.5.\n"
- title: 3.  SCEP Secure Message Objects
  contents:
  - "3.  SCEP Secure Message Objects\n   CMS is a general enveloping mechanism that\
    \ enables both signed and\n   encrypted transmission of arbitrary data.  SCEP\
    \ messages that require\n   confidentiality use two layers of CMS, as shown using\
    \ ASN.1-like\n   pseudocode in Figure 6.  By applying both enveloping and signing\n\
    \   transformations, the SCEP message is protected both for the integrity\n  \
    \ of its end-to-end transaction information and the confidentiality of\n   its\
    \ information portion.\n   pkiMessage {\n     contentType = signedData { pkcs-7\
    \ 2 },\n     content {\n       digestAlgorithms,\n       encapsulatedContentInfo\
    \ {\n         eContentType = data { pkcs-7 1 },\n         eContent {         \
    \  -- pkcsPKIEnvelope, optional\n           contentType = envelopedData { pkcs-7\
    \ 3 },\n           content {\n             recipientInfo,\n             encryptedContentInfo\
    \ {\n               contentType = data { pkcs-7 1 },\n               contentEncrAlgorithm,\n\
    \               encryptedContent {\n                 messageData  -- Typically\
    \ PKCS #10 request\n                 }\n               }\n             }\n   \
    \        }\n         },\n       certificates,          -- Optional\n       crls,\
    \                  -- Optional\n       signerInfo {\n         signedAttrs {\n\
    \           transactionID,\n           messageType,\n           pkiStatus,\n \
    \          failInfo,          -- Optional\n           senderNonce / recipientNonce,\n\
    \           },\n         signature\n         }\n       }\n     }\n           \
    \                Figure 6: CMS Layering\n   When a particular SCEP message carries\
    \ data, this data is carried in\n   the messageData.  CertRep messages will lack\
    \ any signed content and\n   consist only of a pkcsPKIEnvelope (Section 3.2.2).\n\
    \   The remainder of this document will refer only to \"messageData\", but\n \
    \  it is understood to always be encapsulated in the pkcsPKIEnvelope\n   (Section\
    \ 3.2.2).  The format of the data in the messageData is\n   defined by the messageType\
    \ attribute (see Section 3.2) of the\n   SignedData.  If there is no messageData\
    \ to be transmitted, the entire\n   pkcsPKIEnvelope MUST be omitted.\n   Samples\
    \ of SCEP messages are available through the JSCEP project\n   [JSCEP] in the\
    \ src/samples directory.\n"
- title: 3.1.  SCEP Message Object Processing
  contents:
  - "3.1.  SCEP Message Object Processing\n   Creating a SCEP message consists of\
    \ several stages.  The content to\n   be conveyed (in other words, the messageData)\
    \ is first encrypted, and\n   the encrypted content is then signed.\n   The form\
    \ of encryption to be applied depends on the capabilities of\n   the recipient's\
    \ public key.  If the key is encryption capable (for\n   example, RSA), then the\
    \ messageData is encrypted using the\n   recipient's public key with the CMS KeyTransRecipientInfo\
    \ mechanism.\n   If the key is not encryption capable (for example, DSA or ECDSA),\n\
    \   then the messageData is encrypted using the challengePassword with\n   the\
    \ CMS PasswordRecipientInfo mechanism.\n   Once the messageData has been encrypted,\
    \ it is signed with the\n   sender's public key.  This completes the SCEP message,\
    \ which is then\n   sent to the recipient.\n   Note that some early implementations\
    \ of this specification dealt with\n   keys that were not encryption capable by\
    \ omitting the encryption\n   stage, based on the text in Section 3 that indicated\
    \ that \"the\n   EnvelopedData is omitted\".  This alternative processing mechanism\n\
    \   SHOULD NOT be used since it exposes in cleartext the\n   challengePassword\
    \ used to authorise the certificate issue.\n"
- title: 3.2.  SCEP pkiMessage
  contents:
  - "3.2.  SCEP pkiMessage\n   The basic building block of all secured SCEP messages\
    \ is the SCEP\n   pkiMessage.  It consists of a CMS SignedData content type. \
    \ The\n   following restrictions apply:\n   *  The eContentType in encapsulatedContentInfo\
    \ MUST be data ({pkcs-7\n      1}).\n   *  The signed content, if present (FAILURE\
    \ and PENDING CertRep\n      messages will lack any signed content), MUST be a\
    \ pkcsPKIEnvelope\n      (Section 3.2.2) and MUST match the messageType attribute.\n\
    \   *  The SignerInfo MUST contain a set of authenticatedAttributes\n      (Section\
    \ 3.2.1).\n"
- title: 3.2.1.  Signed Transaction Attributes
  contents:
  - "3.2.1.  Signed Transaction Attributes\n   At a minimum, all messages MUST contain\
    \ the following\n   authenticatedAttributes:\n   *  A transactionID attribute\
    \ (see Section 3.2.1.1).\n   *  A messageType attribute (see Section 3.2.1.2).\n\
    \   *  A fresh senderNonce attribute (see Section 3.2.1.5).  However,\n      note\
    \ the comment about senderNonces and polling in Section 3.3.2\n   *  Any attributes\
    \ required by CMS.\n   If the message is a CertRep, it MUST also include the following\n\
    \   authenticatedAttributes:\n   *  A pkiStatus attribute (see Section 3.2.1.3).\n\
    \   *  failInfo and optional failInfoText attributes (see\n      Section 3.2.1.4)\
    \ if pkiStatus = FAILURE.\n   *  A recipientNonce attribute (see Section 3.2.1.5)\
    \ copied from the\n      senderNonce in the request that this is a response to.\n\
    \   The following transaction attributes are encoded as authenticated\n   attributes\
    \ and carried in the SignerInfo for this SignedData.\n   | Attribute      | Encoding\
    \        | Comment                      |\n   | transactionID  | PrintableString\
    \ | Unique ID for this           |\n   | messageType    | PrintableString | Decimal\
    \ value as a numeric   |\n   | pkiStatus      | PrintableString | Decimal value\
    \ as a numeric   |\n   | failInfo       | PrintableString | Decimal value as a\
    \ numeric   |\n   | failInfoText   | UTF8String      | Descriptive text for the\
    \     |\n   | senderNonce    | OCTET STRING    | Random nonce as a 16-byte   \
    \ |\n   | recipientNonce | OCTET STRING    | Random nonce as a 16-byte    |\n\
    \                         Table 1: SCEP Attributes\n   The OIDs used for these\
    \ attributes are as follows:\n   | Name                 | ASN.1 Definition   \
    \           |\n   | id-VeriSign          | OBJECT_IDENTIFIER ::= {2 16   |\n \
    \  |                      | US(840) 1 VeriSign(113733)}   |\n   | id-pki     \
    \          | OBJECT_IDENTIFIER ::= {id-    |\n   |                      | VeriSign\
    \ pki(1)}              |\n   | id-attributes        | OBJECT_IDENTIFIER ::= {id-pki\
    \ |\n   |                      | attributes(9)}                |\n   | id-transactionID\
    \     | OBJECT_IDENTIFIER ::= {id-    |\n   |                      | attributes\
    \ transactionID(7)}  |\n   | id-messageType       | OBJECT_IDENTIFIER ::= {id-\
    \    |\n   |                      | attributes messageType(2)}    |\n   | id-pkiStatus\
    \         | OBJECT_IDENTIFIER ::= {id-    |\n   |                      | attributes\
    \ pkiStatus(3)}      |\n   | id-failInfo          | OBJECT_IDENTIFIER ::= {id-\
    \    |\n   |                      | attributes failInfo(4)}       |\n   | id-senderNonce\
    \       | OBJECT_IDENTIFIER ::= {id-    |\n   |                      | attributes\
    \ senderNonce(5)}    |\n   | id-recipientNonce    | OBJECT_IDENTIFIER ::= {id-\
    \    |\n   |                      | attributes recipientNonce(6)} |\n   | id-scep\
    \              | OBJECT IDENTIFIER ::= {id-    |\n   |                      |\
    \ pkix 24}                      |\n   | id-scep-failInfoText | OBJECT IDENTIFIER\
    \ ::= {id-    |\n   |                      | scep 1}                       |\n\
    \                 Table 2: SCEP Attribute OIDs\n   The attributes are detailed\
    \ in the following sections.\n"
- title: 3.2.1.1.  transactionID
  contents:
  - "3.2.1.1.  transactionID\n   A PKI operation is a transaction consisting of the\
    \ messages exchanged\n   between a client and the CA.  The transactionID is a\
    \ text string\n   provided by the client when starting a transaction.  The client\
    \ MUST\n   use a unique string as the transaction identifier, encoded as a\n \
    \  PrintableString, which MUST be used for all PKI messages exchanged\n   for\
    \ a given operation, such as a certificate issue.\n   Note that the transactionID\
    \ must be unique, but not necessarily\n   randomly generated.  For example, it\
    \ may be a value assigned by the\n   CA to allow the client to be identified by\
    \ their transactionID, using\n   a value such as the client device's Extended\
    \ Unique Identifier (EUI),\n   Remote Terminal Unit (RTU) ID, or a similar unique\
    \ identifier.  This\n   can be useful when the client doesn't have a preassigned\n\
    \   Distinguished Name through which the CA can identify their request --\n  \
    \ for example, when enrolling Supervisory Control and Data Acquisition\n   (SCADA)\
    \ devices.\n"
- title: 3.2.1.2.  messageType
  contents:
  - "3.2.1.2.  messageType\n   The messageType attribute specifies the type of operation\
    \ performed\n   by the transaction.  This attribute MUST be included in all PKI\n\
    \   messages.  The following message types are defined:\n    | Value | Name  \
    \     | Description                                |\n    | 0     | Reserved \
    \  |                                            |\n    | 3     | CertRep    |\
    \ Response to certificate or CRL request.    |\n    | 17    | RenewalReq | PKCS\
    \ #10 certificate request authenticated |\n    |       |            | with an\
    \ existing certificate.              |\n    | 19    | PKCSReq    | PKCS #10 certificate\
    \ request authenticated |\n    |       |            | with a shared secret.  \
    \                    |\n    | 20    | CertPoll   | Certificate polling in manual\
    \ enrolment.   |\n    | 21    | GetCert    | Retrieve a certificate.         \
    \           |\n    | 22    | GetCRL     | Retrieve a CRL.                    \
    \        |\n                        Table 3: SCEP Message Types\n   Message types\
    \ not defined above MUST be treated as errors unless\n   their use has been negotiated\
    \ through GetCACaps (Section 3.5.1).\n"
- title: 3.2.1.3.  pkiStatus
  contents:
  - "3.2.1.3.  pkiStatus\n   All response messages MUST include transaction status\
    \ information,\n   which is defined as a pkiStatus attribute:\n       | Value\
    \ | Name    | Description                            |\n       | 0     | SUCCESS\
    \ | Request granted.                       |\n       | 2     | FAILURE | Request\
    \ rejected.  In this case, the   |\n       |       |         | failInfo attribute,\
    \ as defined in      |\n       |       |         | Section 3.2.1.4, MUST also\
    \ be present. |\n       | 3     | PENDING | Request pending for manual approval.\
    \   |\n                      Table 4: pkiStatus Attributes\n   PKI status values\
    \ not defined above MUST be treated as errors unless\n   their use has been negotiated\
    \ through GetCACaps (Section 3.5.1).\n"
- title: 3.2.1.4.  failInfo and failInfoText
  contents:
  - "3.2.1.4.  failInfo and failInfoText\n   The failInfo attribute MUST contain one\
    \ of the following failure\n   reasons:\n      | Value | Name            | Description\
    \                      |\n      | 0     | badAlg          | Unrecognised or unsupported\
    \      |\n      | 1     | badMessageCheck | Integrity check (meaning         |\n\
    \      | 2     | badRequest      | Transaction not permitted or     |\n      |\
    \ 3     | badTime         | The signingTime attribute from   |\n      | 4    \
    \ | badCertId       | No certificate could be          |\n                   \
    \    Table 5: failInfo Attributes\n   Failure reasons not defined above MUST be\
    \ treated as errors unless\n   their use has been negotiated through GetCACaps\
    \ (Section 3.5.1).\n   The failInfoText is a free-form UTF-8 text string that\
    \ provides\n   further information in the case of pkiStatus = FAILURE.  In\n \
    \  particular, it may be used to provide details on why a certificate\n   request\
    \ was not granted that go beyond what's provided by the near-\n   universal failInfo\
    \ = badRequest status.  Since this is a free-form\n   text string intended for\
    \ interpretation by humans, implementations\n   SHOULD NOT assume that it has\
    \ any type of machine-processable\n   content.\n"
- title: 3.2.1.5.  senderNonce and recipientNonce
  contents:
  - "3.2.1.5.  senderNonce and recipientNonce\n   The senderNonce and recipientNonce\
    \ attributes are each a 16-byte\n   random number generated for each transaction.\
    \  These are intended to\n   prevent replay attacks.\n   When a sender sends a\
    \ PKI message to a recipient, a fresh senderNonce\n   MUST be included in the\
    \ message.  The recipient MUST copy the\n   senderNonce into the recipientNonce\
    \ of the reply as a proof of\n   liveliness.  The original sender MUST verify\
    \ that the recipientNonce\n   of the reply matches the senderNonce it sent in\
    \ the request.  If the\n   nonce does not match, then the message MUST be rejected.\n\
    \   Note that since SCEP exchanges consist of a single request followed\n   by\
    \ a single response, the use of distinct sender and recipient nonces\n   is redundant,\
    \ since the client sends a nonce in its request and the\n   CA responds with the\
    \ same nonce in its reply.  In effect, there's\n   just a single nonce, identified\
    \ as senderNonce in the client's\n   request and recipientNonce in the CA's reply.\n"
- title: 3.2.2.  SCEP pkcsPKIEnvelope
  contents:
  - "3.2.2.  SCEP pkcsPKIEnvelope\n   The information portion of a SCEP message is\
    \ carried inside an\n   EnvelopedData content type, as defined in CMS, with the\
    \ following\n   restrictions:\n   *  contentType in encryptedContentInfo MUST\
    \ be data ({pkcs-7 1}).\n   *  encryptedContent MUST be the SCEP message being\
    \ transported (see\n      Section 4) and MUST match the messageType authenticated\
    \ Attribute\n      in the pkiMessage.\n"
- title: 3.3.  SCEP pkiMessage types
  contents:
  - "3.3.  SCEP pkiMessage types\n   All of the messages in this section are pkiMessages\
    \ (Section 3.2),\n   where the type of the message MUST be specified in the \"\
    messageType\"\n   authenticated Attribute.  Each section defines a valid message\
    \ type,\n   the corresponding messageData formats, and mandatory authenticated\n\
    \   attributes for that type.\n"
- title: 3.3.1.  PKCSReq/RenewalReq
  contents:
  - "3.3.1.  PKCSReq/RenewalReq\n   The messageData for this type consists of a PKCS\
    \ #10 Certificate\n   Request.  The certificate request MUST contain at least\
    \ the following\n   items:\n   *  The subject Distinguished Name.\n   *  The subject\
    \ public key.\n   *  For a PKCSReq, if authorisation based on a shared secret\
    \ is being\n      used, a challengePassword attribute.\n   In addition, the message\
    \ must contain the authenticatedAttributes\n   specified in Section 3.2.1.\n"
- title: 3.3.2.  CertRep
  contents:
  - "3.3.2.  CertRep\n   The messageData for this type consists of a degenerate certificates-\n\
    \   only CMS SignedData message (Section 3.4).  The exact content\n   required\
    \ for the reply depends on the type of request that this\n   message is a response\
    \ to.  The request types are detailed in Sections\n   3.3.2.1 and 4.  In addition,\
    \ the message must contain the\n   authenticatedAttributes specified in Section\
    \ 3.2.1.\n   Earlier draft versions of this specification required that this\n\
    \   message include a senderNonce alongside the recipientNonce, which was\n  \
    \ to be used to chain to subsequent polling operations.  However, if a\n   single\
    \ message was lost during the potentially extended interval over\n   which polling\
    \ could take place (see Section 5 for an example of\n   this), then if the implementation\
    \ were to enforce this requirement,\n   the overall transaction would fail, even\
    \ though nothing had actually\n   gone wrong.  Because of this issue, implementations\
    \ mostly ignored\n   the requirement to either carry this nonce over to subsequent\
    \ polling\n   messages or verify its presence.  More recent versions of the\n\
    \   specification no longer require the chaining of nonces across polling\n  \
    \ operations.\n"
- title: 3.3.2.1.  CertRep SUCCESS
  contents:
  - "3.3.2.1.  CertRep SUCCESS\n   When the pkiStatus attribute is set to SUCCESS,\
    \ the messageData for\n   this message consists of a degenerate certificates-only\
    \ CMS\n   SignedData message (Section 3.4).  The content of this degenerate\n\
    \   certificates-only SignedData message depends on what the original\n   request\
    \ was, as outlined in Table 6.\n   | Request-type | Reply-contents           \
    \                     |\n   | PKCSReq      | The reply MUST contain at least the\
    \ issued    |\n   |              | certificate in the certificates field of the\
    \  |\n   |              | SignedData.  The reply MAY contain additional |\n  \
    \ |              | certificates, but the issued certificate MUST |\n   |     \
    \         | be the leaf certificate.                      |\n   | RenewalReq \
    \  | Same as PKCSReq                               |\n   | CertPoll     | Same\
    \ as PKCSReq                               |\n   | GetCert      | The reply MUST\
    \ contain at least the requested |\n   |              | certificate in the certificates\
    \ field of the  |\n   |              | SignedData.  The reply MAY contain additional\
    \ |\n   |              | certificates, but the requested certificate   |\n   |\
    \              | MUST be the leaf certificate.                 |\n   | GetCRL\
    \       | The reply MUST contain the CRL in the crls    |\n   |              |\
    \ field of the SignedData.                      |\n                   Table 6:\
    \ CertRep Response Types\n"
- title: 3.3.2.2.  CertRep FAILURE
  contents:
  - "3.3.2.2.  CertRep FAILURE\n   When the pkiStatus attribute is set to FAILURE,\
    \ the reply MUST also\n   contain a failInfo (Section 3.2.1.4) attribute set to\
    \ the appropriate\n   error condition describing the failure.  The reply MAY also\
    \ contain a\n   failInfoText attribute providing extended details on why the\n\
    \   operation failed, typically to expand on the catchall failInfo =\n   badRequest\
    \ status.  The pkcsPKIEnvelope (Section 3.2.2) MUST be\n   omitted.\n"
- title: 3.3.2.3.  CertRep PENDING
  contents:
  - "3.3.2.3.  CertRep PENDING\n   When the pkiStatus attribute is set to PENDING,\
    \ the pkcsPKIEnvelope\n   (Section 3.2.2) MUST be omitted.\n"
- title: 3.3.3.  CertPoll (GetCertInitial)
  contents:
  - "3.3.3.  CertPoll (GetCertInitial)\n   This message is used for certificate polling.\
    \  For unknown reasons,\n   it was referred to as \"GetCertInitial\" in earlier\
    \ draft versions of\n   this specification.  The messageData for this type consists\
    \ of an\n   IssuerAndSubject:\n   issuerAndSubject ::= SEQUENCE {\n       issuer\
    \     Name,\n       subject    Name\n       }\n   The issuer is set to the subjectName\
    \ of the CA (in other words, the\n   intended issuerName of the certificate that's\
    \ being requested).  The\n   subject is set to the subjectName used when requesting\
    \ the\n   certificate.\n   Note that both of these fields are redundant; the CA\
    \ is identified by\n   the recipientInfo in the pkcsPKIEnvelope (or in most cases,\
    \ simply by\n   the server that the message is being sent to), and the client/\n\
    \   transaction being polled is identified by the transactionID.  Both of\n  \
    \ these fields can be processed by the CA without going through the\n   cryptographically\
    \ expensive process of unwrapping and processing the\n   issuerAndSubject.  For\
    \ this reason, implementations SHOULD assume\n   that the polling operation will\
    \ be controlled by the recipientInfo\n   and transactionID rather than the contents\
    \ of the messageData.  In\n   addition, the message must contain the authenticatedAttributes\n\
    \   specified in Section 3.2.1.\n"
- title: 3.3.4.  GetCert and GetCRL
  contents:
  - "3.3.4.  GetCert and GetCRL\n   The messageData for these types consist of an\
    \ IssuerAndSerialNumber,\n   as defined in CMS, that uniquely identifies the certificate\
    \ being\n   requested, either the certificate itself for GetCert or its\n   revocation\
    \ status via a CRL for GetCRL.  In addition, the message\n   must contain the\
    \ authenticatedAttributes specified in Section 3.2.1.\n   These message types,\
    \ while included here for completeness, apply\n   unnecessary cryptography and\
    \ messaging overhead to the simple task of\n   transferring a certificate or CRL\
    \ (see Section 7.8).  Implementations\n   SHOULD prefer HTTP certificate-store\
    \ access [RFC4387] or LDAP over\n   the use of these messages.\n"
- title: 3.4.  Degenerate certificates-only CMS SignedData
  contents:
  - "3.4.  Degenerate certificates-only CMS SignedData\n   CMS includes a degenerate\
    \ case of the SignedData content type in\n   which there are no signers.  The\
    \ use of such a degenerate case is to\n   disseminate certificates and CRLs. \
    \ For SCEP, the content field of\n   the ContentInfo value of a degenerate certificates-only\
    \ SignedData\n   MUST be omitted.  When carrying certificates, the certificates\
    \ are\n   included in the certificates field of the SignedData.  When carrying\n\
    \   a CRL, the CRL is included in the crls field of the SignedData.\n"
- title: 3.5.  CA Capabilities
  contents:
  - "3.5.  CA Capabilities\n   In order to provide support for future enhancements\
    \ to the protocol,\n   CAs MUST implement the GetCACaps message to allow clients\
    \ to query\n   which functionality is available from the CA.\n"
- title: 3.5.1.  GetCACaps HTTP Message Format
  contents:
  - "3.5.1.  GetCACaps HTTP Message Format\n   This message requests capabilities\
    \ from a CA, with the format as\n   described in Section 4.1:\n   \"GET\" SP SCEPPATH\
    \ \"?operation=GetCACaps\" SP HTTP-version CRLF\n"
- title: 3.5.2.  CA Capabilities Response Format
  contents:
  - "3.5.2.  CA Capabilities Response Format\n   The response for a GetCACaps message\
    \ is a list of CA capabilities, in\n   plain text and in any order, separated\
    \ by <CR><LF> or <LF>\n   characters.  This specification defines the following\
    \ keywords\n   (quotation marks are not sent):\n   | Keyword          | Description\
    \                            |\n   | AES              | CA supports the AES128-CBC\
    \ encryption  |\n   |                  | algorithm.                          \
    \   |\n   | DES3             | CA supports the triple DES-CBC         |\n   |\
    \                  | encryption algorithm.                  |\n   | GetNextCACert\
    \    | CA supports the GetNextCACert message. |\n   | POSTPKIOperation | CA supports\
    \ PKIOPeration messages sent |\n   |                  | via HTTP POST.       \
    \                  |\n   | Renewal          | CA supports the Renewal CA operation.\
    \  |\n   | SHA-1            | CA supports the SHA-1 hashing          |\n   | \
    \                 | algorithm.                             |\n   | SHA-256   \
    \       | CA supports the SHA-256 hashing        |\n   |                  | algorithm.\
    \                             |\n   | SHA-512          | CA supports the SHA-512\
    \ hashing        |\n   |                  | algorithm.                       \
    \      |\n   | SCEPStandard     | CA supports all mandatory-to-implement |\n \
    \  |                  | sections of the SCEP standard.  This   |\n   |       \
    \           | keyword implies \"AES\",                 |\n   |               \
    \   | \"POSTPKIOperation\", and \"SHA-256\", as  |\n   |                  | well\
    \ as the provisions of Section 2.9. |\n                Table 7: GetCACaps Response\
    \ Keywords\n   Table 7 lists all of the keywords that are defined in this\n  \
    \ specification.  A CA MAY provide additional keywords advertising\n   further\
    \ capabilities and functionality.  A client MUST be able to\n   accept and ignore\
    \ any unknown keywords that might be sent by a CA.\n   The CA MUST use the text\
    \ case specified here, but clients SHOULD\n   ignore the text case when processing\
    \ this message.  Clients MUST\n   accept the standard HTTP-style text delimited\
    \ by <CR><LF> as well as\n   the text delimited by <LF> specified in an earlier\
    \ draft version of\n   this specification.\n   The client SHOULD use SHA-256 in\
    \ preference to SHA-1 hashing and\n   AES128-CBC in preference to triple DES-CBC\
    \ if they are supported by\n   the CA.  Although the CMS format allows any form\
    \ of AES and SHA-2 to\n   be specified, in the interests of interoperability the\
    \ de facto\n   universal standards of AES128-CBC and SHA-256 SHOULD be used.\n\
    \   Announcing some of these capabilities individually is redundant,\n   since\
    \ they're required as mandatory-to-implement functionality (see\n   Section 2.9)\
    \ whose presence as a whole is signalled by the\n   \"SCEPStandard\" capability.\
    \  However, it may be useful to announce\n   them in order to deal with older\
    \ implementations that would otherwise\n   default to obsolete, insecure algorithms\
    \ and mechanisms.\n   If the CA supports none of the above capabilities, it SHOULD\
    \ return\n   an empty message.  A CA MAY simply return an HTTP error.  A client\n\
    \   that receives an empty message or an HTTP error SHOULD interpret the\n   response\
    \ as if none of the capabilities listed are supported by the\n   CA.\n   Note\
    \ that at least one widely deployed server implementation supports\n   several\
    \ of the above operations but doesn't support the GetCACaps\n   message to indicate\
    \ that it supports them, and it will close the\n   connection if sent a GetCACaps\
    \ message.  This means that the\n   equivalent of GetCACaps must be performed\
    \ through server\n   fingerprinting, which can be done using the ID string \"\
    Microsoft-\n   IIS\".  Newer versions of the same server, if sent a SCEP request\n\
    \   using AES and SHA-2, will respond with an invalid response that can't\n  \
    \ be decrypted, requiring the use of 3DES and SHA-1 in order to obtain\n   a response\
    \ that can be processed, even if AES and/or SHA-2 are\n   allegedly supported.\
    \  In addition, the server will generate CA\n   certificates that only have one,\
    \ but not both, of the keyEncipherment\n   and digitalSignature keyUsage flags\
    \ set, requiring that the client\n   ignore the keyUsage flags in order to use\
    \ the certificates for SCEP.\n   The Content-type of the reply SHOULD be \"text/plain\"\
    .  Clients SHOULD\n   ignore the Content-type, as older implementations of SCEP\
    \ may send\n   various Content-types.\n   Example:\n   GET /cgi-bin/pkiclient.exe?operation=GetCACaps\
    \ HTTP/1.1\n   might return:\n   AES\n   GetNextCACert\n   POSTPKIOperation\n\
    \   SCEPStandard\n   SHA-256\n   This means that the CA supports modern crypto\
    \ algorithms, and the\n   GetNextCACert message allows PKIOperation messages (PKCSReq/\n\
    \   RenewalReq, GetCert, CertPoll, ...) to be sent using HTTP POST and is\n  \
    \ compliant with the final version of the SCEP standard.\n"
- title: 4.  SCEP Transactions
  contents:
  - "4.  SCEP Transactions\n   This section describes the SCEP Transactions and their\
    \ HTTP [RFC7230]\n   transport mechanism.\n   Note that SCEP doesn't follow best\
    \ current practices on usage of\n   HTTP.  In particular, it recommends ignoring\
    \ some media types and\n   hard-codes specific URI paths.  Guidance on the appropriate\n\
    \   application of HTTP in these circumstances may be found in [HTTP].\n"
- title: 4.1.  HTTP POST and GET Message Formats
  contents:
  - "4.1.  HTTP POST and GET Message Formats\n   SCEP uses the HTTP POST and GET methods\
    \ [RFC7230] to exchange\n   information with the CA.  The following defines the\
    \ ABNF syntax of\n   HTTP POST and GET methods sent from a client to a CA:\n \
    \  POSTREQUEST = \"POST\" SP SCEPPATH \"?operation=\" OPERATION\n            \
    \     SP HTTP-version CRLF\n   GETREQUEST = \"GET\" SP SCEPPATH \"?operation=\"\
    \ OPERATION\n                \"&message=\" MESSAGE SP HTTP-version CRLF\n   where:\n\
    \   *  SCEPPATH is the HTTP URL path for accessing the CA.  Clients\n      SHOULD\
    \ set SCEPPATH to the fixed string \"/cgi-bin/pkiclient.exe\"\n      unless directed\
    \ to do otherwise by the CA.\n   *  OPERATION depends on the SCEP transaction\
    \ and is defined in the\n      following sections.\n   *  HTTP-version is the\
    \ HTTP version string, which is \"HTTP/1.1\" for\n      [RFC7230].\n   *  SP and\
    \ CRLF are space and carriage return/linefeed, as defined in\n      [RFC5234].\n\
    \   The CA will typically ignore SCEPPATH, since it's unlikely to be\n   issuing\
    \ certificates via a web server.  Clients SHOULD set SCEPPATH\n   to the fixed\
    \ string \"/cgi-bin/pkiclient.exe\" unless directed to do\n   otherwise by the\
    \ CA.  The CA SHOULD ignore the SCEPPATH unless its\n   precise format is critical\
    \ to the CA's operation.\n   Early SCEP drafts performed all communications via\
    \ GET messages,\n   including non-idempotent ones that should have been sent via\
    \ POST\n   messages; see [HTTP] for details.  This has caused problems because\n\
    \   of the way that the (supposedly) idempotent GET interacts with caches\n  \
    \ and proxies, and because the extremely large GET requests created by\n   encoding\
    \ CMS messages may be truncated in transit.  These issues are\n   typically not\
    \ visible when testing on a LAN, but crop up during\n   deployment over WANs.\
    \  If the remote CA supports POST, the CMS-\n   encoded SCEP messages MUST be\
    \ sent via HTTP POST instead of HTTP GET.\n   This applies to any SCEP message\
    \ except GetCACert, GetNextCACert, and\n   GetCACaps and avoids the need for base64\
    \ and URL encoding that's\n   required for GET messaging.  The client can verify\
    \ that the CA\n   supports SCEP messages via POST by looking for the \"SCEPStandard\"\
    \ or\n   \"POSTPKIOperation\" capability (see Section 3.5.2).\n   If a client\
    \ or CA uses HTTP GET and encounters HTTP-related problems\n   such as messages\
    \ being truncated, seeing errors such as HTTP 414\n   (\"Request-URI too long\"\
    ), or simply having the message not sent/\n   received at all when standard requests\
    \ to the server (for example,\n   via a web browser) work, then this is a symptom\
    \ of the problematic\n   use of HTTP GET.  The solution to this problem is to\
    \ update the\n   implementation to use HTTP POST instead.  In addition, when using\n\
    \   GET, it's recommended to test the implementation from as many\n   different\
    \ network locations as possible to determine whether the use\n   of GET will cause\
    \ problems with communications.\n   When using GET messages to communicate binary\
    \ data, base64 encoding\n   as specified in Section 4 of [RFC4648] MUST be used.\
    \  The\n   base64-encoded data is distinct from \"base64url\" and may contain\
    \ URI\n   reserved characters; thus, it MUST be escaped as specified in\n   [RFC3986]\
    \ in addition to being base64 encoded.  Finally, the encoded\n   data is inserted\
    \ into the MESSAGE portion of the HTTP GET request.\n"
- title: 4.2.  Get CA Certificate
  contents:
  - "4.2.  Get CA Certificate\n   To get the CA certificate(s), the client sends a\
    \ GetCACert message to\n   the CA.  The OPERATION MUST be set to \"GetCACert\"\
    .  There is no\n   request data associated with this message.\n"
- title: 4.2.1.  Get CA Certificate Response Message Format
  contents:
  - "4.2.1.  Get CA Certificate Response Message Format\n   The response for GetCACert\
    \ is different between the case where the CA\n   directly communicates with the\
    \ client during the enrolment and the\n   case where an intermediate CA exists\
    \ and the client communicates with\n   this CA during the enrolment.\n"
- title: 4.2.1.1.  CA Certificate Response Message Format
  contents:
  - "4.2.1.1.  CA Certificate Response Message Format\n   If the CA does not have\
    \ any intermediate CA certificates, the\n   response consists of a single X.509\
    \ CA certificate.  The response\n   will have a Content-Type of \"application/x-x509-ca-cert\"\
    .\n   \"Content-Type: application/x-x509-ca-cert\"\n   <binary X.509>\n"
- title: 4.2.1.2.  CA Certificate Chain Response Message Format
  contents:
  - "4.2.1.2.  CA Certificate Chain Response Message Format\n   If the CA has intermediate\
    \ CA certificates, the response consists of\n   a degenerate certificates-only\
    \ CMS SignedData message (Section 3.4)\n   containing the certificates, with the\
    \ intermediate CA certificate(s)\n   as the leaf certificate(s).  The response\
    \ will have a Content-Type of\n   \"application/x-x509-ca-ra-cert\".  Note that\
    \ this designation is used\n   for historical reasons due to its use in older\
    \ versions of this\n   specification -- no special meaning should be attached\
    \ to the label.\n   \"Content-Type: application/x-x509-ca-ra-cert\"\n   <binary\
    \ CMS>\n"
- title: 4.3.  Certificate Enrolment/Renewal
  contents:
  - "4.3.  Certificate Enrolment/Renewal\n   A PKCSReq/RenewalReq (Section 3.3.1)\
    \ message is used to perform a\n   certificate enrolment or renewal transaction.\
    \  The OPERATION MUST be\n   set to \"PKIOperation\".  Note that when used with\
    \ HTTP POST, the only\n   OPERATION possible is \"PKIOperation\", so many CAs\
    \ don't check this\n   value or even notice its absence.  When implemented using\
    \ HTTP POST,\n   the message is sent with a Content-Type of \"application/x-pki-\n\
    \   message\" and might look as follows:\n   POST /cgi-bin/pkiclient.exe?operation=PKIOperation\
    \ HTTP/1.1\n   Content-Length: <length of data>\n   Content-Type: application/x-pki-message\n\
    \   <binary CMS data>\n   When implemented using HTTP GET, this might look as\
    \ follows:\n   GET /cgi-bin/pkiclient.exe?operation=PKIOperation& \\\n   message=MIAGCSqGSIb3DQEHA6CAMIACAQAxgDCBzAIBADB2MG\
    \ \\\n"
- title: 4.3.1.  Certificate Enrolment/Renewal Response Message
  contents:
  - "4.3.1.  Certificate Enrolment/Renewal Response Message\n   If the request is\
    \ granted, a CertRep SUCCESS message\n   (Section 3.3.2.1) is returned.  If the\
    \ request is rejected, a CertRep\n   FAILURE message (Section 3.3.2.2) is returned.\
    \  If the CA is\n   configured to manually authenticate the client, a CertRep\
    \ PENDING\n   message (Section 3.3.2.3) MAY be returned.  The CA MAY return a\n\
    \   PENDING for other reasons.\n   The response will have a Content-Type of \"\
    application/x-pki-message\".\n   \"Content-Type: application/x-pki-message\"\n\
    \   <binary CertRep message>\n"
- title: 4.4.  Poll for Client Initial Certificate
  contents:
  - "4.4.  Poll for Client Initial Certificate\n   When the client receives a CertRep\
    \ message with pkiStatus set to\n   PENDING, it will enter the polling state by\
    \ periodically sending\n   CertPoll messages to the CA until either the request\
    \ is granted and\n   the certificate is sent back or the request is rejected or\
    \ some\n   preconfigured time limit for polling or maximum number of polls is\n\
    \   exceeded.  The OPERATION MUST be set to \"PKIOperation\".\n   CertPoll messages\
    \ exchanged during the polling period MUST carry the\n   same transactionID attribute\
    \ as the previous PKCSReq/RenewalReq.  A\n   CA receiving a CertPoll for which\
    \ it does not have a matching\n   PKCSReq/RenewalReq MUST reject this request.\n\
    \   Since at this time the certificate has not been issued, the client\n   can\
    \ only use its own subject name (which was contained in the\n   original PKCS#\
    \ 10 sent via PKCSReq/RenewalReq) to identify the polled\n   certificate request\
    \ (but see the note on identification during\n   polling in Section 3.3.3).  In\
    \ theory, there can be multiple\n   outstanding requests from one client (for\
    \ example, if different keys\n   and different key usages were used to request\
    \ multiple certificates),\n   so the transactionID must also be included to disambiguate\
    \ between\n   multiple requests.  In practice, however, the client SHOULD NOT\
    \ have\n   multiple requests outstanding at any one time, since this tends to\n\
    \   confuse some CAs.\n"
- title: 4.4.1.  Polling Response Message Format
  contents:
  - "4.4.1.  Polling Response Message Format\n   The response messages for CertPoll\
    \ are the same as in Section 4.3.1.\n"
- title: 4.5.  Certificate Access
  contents:
  - "4.5.  Certificate Access\n   A client can query an issued certificate from the\
    \ SCEP CA, as long as\n   the client knows the issuer name and the issuer-assigned\
    \ certificate\n   serial number.\n   This transaction consists of one GetCert\
    \ (Section 3.3.4) message sent\n   to the CA by a client and one CertRep (Section\
    \ 3.3.2) message sent\n   back from the CA.  The OPERATION MUST be set to \"PKIOperation\"\
    .\n"
- title: 4.5.1.  Certificate Access Response Message Format
  contents:
  - "4.5.1.  Certificate Access Response Message Format\n   In this case, the CertRep\
    \ from the CA is same as in Section 4.3.1,\n   except that the CA will either\
    \ grant the request (SUCCESS) or reject\n   it (FAILURE).\n"
- title: 4.6.  CRL Access
  contents:
  - "4.6.  CRL Access\n   Clients can request a CRL from the SCEP CA, as described\
    \ in\n   Section 2.7.  The OPERATION MUST be set to \"PKIOperation\".\n"
- title: 4.6.1.  CRL Access Response Message Format
  contents:
  - "4.6.1.  CRL Access Response Message Format\n   The CRL is sent back to the client\
    \ in a CertRep (Section 3.3.2)\n   message.  The information portion of this message\
    \ is a degenerate\n   certificates-only SignedData (Section 3.4) that contains\
    \ only the\n   most recent CRL in the crls field of the SignedData.\n"
- title: 4.7.  Get Next Certificate Authority Certificate
  contents:
  - "4.7.  Get Next Certificate Authority Certificate\n   When a CA certificate is\
    \ about to expire, clients need to retrieve\n   the CA's next CA certificate (i.e.,\
    \ the rollover certificate).  This\n   is done via the GetNextCACert message.\
    \  The OPERATION MUST be set to\n   \"GetNextCACert\".  There is no request data\
    \ associated with this\n   message.\n"
- title: 4.7.1.  Get Next CA Response Message Format
  contents:
  - "4.7.1.  Get Next CA Response Message Format\n   The response consists of a SignedData\
    \ CMS message, signed by the\n   current CA signing key.  Clients MUST validate\
    \ the signature on the\n   message before trusting any of its contents.  The response\
    \ will have\n   a Content-Type of \"application/x-x509-next-ca-cert\".\n   \"\
    Content-Type: application/x-x509-next-ca-cert\"\n   <binary CMS>\n   The content\
    \ of the SignedData message is a degenerate certificates-\n   only SignedData\
    \ message (Section 3.4) containing the new CA\n   certificate(s) to be used when\
    \ the current CA certificate expires.\n"
- title: 5.  SCEP Transaction Examples
  contents:
  - "5.  SCEP Transaction Examples\n   The following section gives several examples\
    \ of client-to-CA\n   transactions.  Client actions are indicated in the left\
    \ column, CA\n   actions are indicated in the right column, and the transactionID\
    \ is\n   given in parentheses.  For ease of reading, small integer values have\n\
    \   been used; in practice, full transaction IDs would be used.  The\n   first\
    \ transaction, for example, would read like this:\n   |  Client Sends PKCSReq\
    \ message with transactionID 1 to the CA.  The\n   |  CA signs the certificate\
    \ and constructs a CertRep Message\n   |  containing the signed certificate with\
    \ a transaction ID 1.  The\n   |  client receives the message and installs the\
    \ certificate locally.\n"
- title: 5.1.  Successful Transactions
  contents:
  - "5.1.  Successful Transactions\n   PKCSReq (1)             ----------> CA issues\
    \ certificate\n   Client installs certificate\n         Figure 7: Successful Enrolment\
    \ Case: Automatic Processing\n   PKCSReq (2)             ----------> Cert request\
    \ goes into queue\n   CertPoll (2)            ----------> Still pending\n   CertPoll\
    \ (2)            ----------> CA issues certificate\n   Client installs certificate\n\
    \    Figure 8: Successful Enrolment Case: Manual Authentication Required\n   GetNextCACert\
    \         ---------->\n   PKCSReq*              ----------> CA issues certificate\
    \ with\n   Client stores certificate\n   for installation when\n   existing certificate\
    \ expires.\n                   Figure 9: CA Certificate Rollover Case\n   * Enveloped\
    \ for the new CA certificate.  The CA will use the envelope\n   to determine which\
    \ key to use to issue the client certificate.\n"
- title: 5.2.  Transactions with Errors
  contents:
  - "5.2.  Transactions with Errors\n   In the case of polled transactions that aren't\
    \ completed\n   automatically, there are two potential options for dealing with\
    \ a\n   transaction that's interrupted due to network or software/hardware\n \
    \  issues.  The first is for the client to preserve its transaction\n   state\
    \ and resume the CertPoll polling when normal service is\n   restored.  The second\
    \ is for the client to begin a new transaction by\n   sending a new PKCSReq/RenewalReq,\
    \ rather than continuing the previous\n   CertPoll.  Both options have their own\
    \ advantages and disadvantages.\n   The CertPoll continuation requires that the\
    \ client maintain its\n   transaction state for the time when it resumes polling.\
    \  This is\n   relatively simple if the problem is a brief network outage, but\
    \ less\n   simple when the problem is a client crash and restart.  In addition,\n\
    \   the CA may treat a lost network connection as the end of a\n   transaction,\
    \ so that a new connection followed by a CertPoll will be\n   treated as an error.\n\
    \   The PKCSReq/RenewalReq continuation doesn't require any state to be\n   maintained,\
    \ since it's a new transaction.  However, it may cause\n   problems on the CA\
    \ side if the certificate was successfully issued\n   but the client never received\
    \ it, since the resumed transaction\n   attempt will appear to be a request for\
    \ a duplicate certificate (see\n   Section 7.4 for more on why this is a problem).\
    \  In this case, the CA\n   may refuse the transaction or require manual intervention\
    \ to remove/\n   revoke the previous certificate before the client can request\
    \ another\n   one.\n   Since the new-transaction resume is more robust in the\
    \ presence of\n   errors and doesn't require special-case handling by either the\
    \ client\n   or CA, clients SHOULD use the new-transaction option in preference\
    \ to\n   the resumed-CertPoll option to recover from errors.\n   Resync Case 1:\
    \ Client resyncs via new PKCSReq (recommended):\n   PKCSReq (3)           ---------->\
    \ Cert request goes into queue\n   CertPoll (3)          ----------> Still pending\n\
    \                           X-------- CertRep(3) PENDING\n   (Network outage)\n\
    \   (Client reconnects)\n   PKCSReq (4)           ---------->\n   etc...\n   \
    \                       Figure 10: Resync Case 1\n   Resync Case 2: Client resyncs\
    \ via resumed CertPoll after a network\n   outage (not recommended; use PKCSReq\
    \ to resync):\n   PKCSReq (5)           ----------> Cert request goes into queue\n\
    \   CertPoll (5)          ----------> Still pending\n                        \
    \   X-------- CertRep(5) PENDING\n   (Network outage)\n   (Client reconnects)\n\
    \   CertPoll (5)          ----------> CA issues certificate\n   Client installs\
    \ certificate\n                          Figure 11: Resync Case 2\n   Resync Case\
    \ 3: Special-case variation of Case 2 where the CertRep\n   SUCCESS rather than\
    \ the CertRep PENDING is lost (recommended):\n   PKCSReq (6)           ---------->\
    \ Cert request goes into queue\n   CertPoll (6)          ----------> Still pending\n\
    \   CertPoll (6)          ----------> CA issues certificate\n                \
    \           X-------- CertRep(6) SUCCESS\n   (Network outage)\n   (Client reconnects)\n\
    \   PKCSReq (7)           ----------> There is already a valid\n   PKCSReq (8)\
    \           ----------> CA issues new certificate\n   Client installs certificate\n\
    \                          Figure 12: Resync Case 3\n   Resync Case 4: Special-case\
    \ variation of Case 1 where the CertRep\n   SUCCESS rather than the CertRep PENDING\
    \ is lost (not recommended; use\n   PKCSReq to resync):\n   PKCSReq (9)      \
    \     ----------> Cert request goes into queue\n   CertPoll (9)          ---------->\
    \ Still pending\n   CertPoll (9)          ----------> CA issues certificate\n\
    \                           X-------- CertRep(9) SIGNED CERT\n   (Network outage)\n\
    \   (Client reconnects)\n   CertPoll (9)          ----------> Certificate already\
    \ issued\n   Client installs certificate\n                          Figure 13:\
    \ Resync Case 4\n   As these examples indicate, resumption from an error via a\
    \ resumed\n   CertPoll is tricky due to the state that needs to be held by both\
    \ the\n   client and/or the CA.  A PKCSReq/RenewalReq resume is the easiest to\n\
    \   implement, since it's stateless and is identical for both polled and\n   nonpolled\
    \ transactions, whereas a CertPoll resume treats the two\n   differently.  (A\
    \ nonpolled transaction is resumed with a PKCSReq/\n   RenewalReq; a polled transaction\
    \ is resumed with a CertPoll.)  For\n   this reason, error recovery SHOULD be\
    \ handled via a new PKCSReq\n   rather than a resumed CertPoll.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   An object identifier for an arc to assign SCEP Attribute\
    \ Identifiers\n   has been assigned in the \"SMI Security for PKIX\" registry\n\
    \   (1.3.6.1.5.5.7).  This object identifer, Simple Certificate\n   Enrollment\
    \ Protocol Attributes, is denoted as id-scep:\n   id-scep OBJECT IDENTIFIER ::=\
    \ { id-pkix 24 }\n   IANA created the \"SMI Security for SCEP Attribute Identifiers\"\
    \n   registry (1.3.6.1.5.5.7.24) with the following entries with\n   references\
    \ to this document:\n   id-scep-failInfoText OBJECT IDENTIFIER ::= { id-scep 1\
    \ }\n   Entries in the registry are assigned according to the \"Specification\n\
    \   Required\" policy defined in [RFC8126].\n   Section 3.2.1.2 describes an \"\
    SCEP Message Type\" registry, and\n   Section 3.5 describes an \"SCEP CA Capabilities\"\
    \ registry; these\n   registries are maintained by IANA and define a number of\
    \ such code-\n   point identifiers.  Entries in the registry are assigned according\
    \ to\n   the \"Specification Required\" policy defined in [RFC8126].\n   The \"\
    SCEP Message Types\" registry has \"Value\", \"Name\", \"Description\",\n   and\
    \ \"Reference\" columns.  The \"Value\" entry is a small positive\n   integer;\
    \ value \"0\" is reserved.\n   The \"SCEP CA Capabilities\" registry has \"Keyword\"\
    , \"Description\", and\n   \"Reference\" columns.  Although implementations SHOULD\
    \ use the \"SCEP\n   CA Capabilities\" registry, SCEP is often employed in situations\
    \ where\n   this isn't possible.  In this case, private-use CA capabilities may\n\
    \   be specified using a unique prefix such as an organisation identifier\n  \
    \ or domain name under the control of the entity that defines the\n   capability.\
    \  For example, the prefix would be \"Example.com-\", and the\n   complete capability\
    \ would be \"Example.com-CapabilityName\".\n   IANA has registered four media\
    \ types as defined in this document:\n   *  application/x-x509-ca-cert\n   * \
    \ application/x-x509-ca-ra-cert\n   *  application/x-x509-next-ca-cert\n   * \
    \ application/x-pki-message\n   Note that these are grandfathered media types\
    \ registered as per\n   Appendix A of [RFC6838].  Templates for registrations\
    \ are specified\n   below.\n"
- title: 6.1.  Registration of the application/x-x509-ca-cert Media Type
  contents:
  - "6.1.  Registration of the application/x-x509-ca-cert Media Type\n   Type name:\
    \  application\n   Subtype name:  x-x509-ca-cert\n   Required parameters:  none\n\
    \   Optional parameters:  none\n   Encoding considerations:  binary\n   Security\
    \ considerations:  This media type contains a certificate; see\n      the Security\
    \ Considerations section of [RFC5280].  There is no\n      executable content.\n\
    \   Interoperability considerations:  This is a grandfathered\n      registration\
    \ of an alias to application/pkix-cert (basically a\n      single DER-encoded\
    \ Certification Authority certificate), which is\n      only used in SCEP.\n \
    \  Published specification:  RFC 8894\n   Applications that use this media type:\
    \  SCEP uses this media type\n      when returning a CA certificate.\n   Fragment\
    \ identifier considerations:  N/A\n   Additional information:\n      Deprecated\
    \ alias names for this type:  N/A\n      Magic number(s):  none\n      File extension(s):\
    \  N/A\n      Macintosh file type code(s):  N/A\n   Person and email address to\
    \ contact for further information:  See the\n      Authors' Addresses section\
    \ of RFC 8894.\n   Intended usage:  LIMITED USE\n   Restrictions on usage:  SCEP\
    \ protocol\n   Author:  See the Authors' Addresses section of RFC 8894\n   Change\
    \ controller:  IETF\n   Provisional registration?  No\n"
- title: 6.2.  Registration of the application/x-x509-ca-ra-cert Media Type
  contents:
  - "6.2.  Registration of the application/x-x509-ca-ra-cert Media Type\n   Type name:\
    \  application\n   Subtype name:  x-x509-ca-ra-cert\n   Required parameters: \
    \ none\n   Optional parameters:  none\n   Encoding considerations:  binary\n \
    \  Security considerations:  This media type consists of a degenerate\n      certificates-only\
    \ CMS SignedData message (Section 3.4) containing\n      the certificates, with\
    \ the intermediate CA certificate(s) as the\n      leaf certificate(s).  There\
    \ is no executable content.\n   Interoperability considerations:  This is a grandfathered\n\
    \      registration that is only used in SCEP.\n   Published specification:  RFC\
    \ 8894\n   Applications that use this media type:  SCEP uses this media type\n\
    \      when returning CA Certificate Chain Response.\n   Fragment identifier considerations:\
    \  N/A\n   Additional information:\n      Deprecated alias names for this type:\
    \  N/A\n      Magic number(s):  none\n      File extension(s):  N/A\n      Macintosh\
    \ file type code(s):  N/A\n   Person and email address to contact for further\
    \ information:  See the\n      Authors' Addresses section of RFC 8894.\n   Intended\
    \ usage:  LIMITED USE\n   Restrictions on usage:  SCEP protocol\n   Author:  See\
    \ the Authors' Addresses section of RFC 8894.\n   Change controller:  IETF\n \
    \  Provisional registration?  no\n"
- title: 6.3.  Registration of the application/x-x509-next-ca-cert Media Type
  contents:
  - "6.3.  Registration of the application/x-x509-next-ca-cert Media Type\n   Type\
    \ name:  application\n   Subtype name:  x-x509-next-ca-cert\n   Required parameters:\
    \  none\n   Optional parameters:  none\n   Encoding considerations:  binary\n\
    \   Security considerations:  This media type consists of a SignedData\n     \
    \ CMS message, signed by the current CA signing key.  There is no\n      executable\
    \ content.\n   Interoperability considerations:  This is a grandfathered\n   \
    \   registration that is only used in SCEP.\n   Published specification:  RFC\
    \ 8894\n   Applications that use this media type:  SCEP uses this media type\n\
    \      when returning a Get Next CA response.\n   Fragment identifier considerations:\
    \  N/A\n   Additional information:\n      Deprecated alias names for this type:\
    \  N/A\n      Magic number(s):  none\n      File extension(s):  N/A\n      Macintosh\
    \ file type code(s):  N/A\n   Person and email address to contact for further\
    \ information:  See the\n      Authors' Addresses section of RFC 8894.\n   Intended\
    \ usage:  LIMITED USE\n   Restrictions on usage:  SCEP protocol\n   Author:  See\
    \ the Authors' Addresses section of RFC 8894.\n   Change controller:  IETF\n \
    \  Provisional registration?  no\n"
- title: 6.4.  Registration of the application/x-pki-message Media Type
  contents:
  - "6.4.  Registration of the application/x-pki-message Media Type\n   Type name:\
    \  application\n   Subtype name:  x-pki-message\n   Required parameters:  none\n\
    \   Optional parameters:  none\n   Encoding considerations:  binary\n   Security\
    \ considerations:  This media type consists of a degenerate\n      certificates-only\
    \ CMS SignedData message.  There is no executable\n      content.\n   Interoperability\
    \ considerations:  This is a grandfathered\n      registration that is only used\
    \ in SCEP.\n   Published specification:  RFC 8894\n   Applications that use this\
    \ media type:  SCEP uses this media type\n      when returning a Certificate Enrolment/Renewal\
    \ Response.\n   Fragment identifier considerations:  N/A\n   Additional information:\n\
    \      Deprecated alias names for this type:  N/A\n      Magic number(s):  none\n\
    \      File extension(s):  N/A\n      Macintosh file type code(s):  N/A\n   Person\
    \ and email address to contact for further information:  See the\n      Authors'\
    \ Addresses section of RFC 8894.\n   Intended usage:  LIMITED USE\n   Restrictions\
    \ on usage:  SCEP protocol\n   Author:  See the Authors' Addresses section of\
    \ RFC 8894.\n   Change controller:  IETF\n   Provisional registration?  no\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security goal of SCEP is that no adversary\
    \ can subvert the public\n   key/identity binding from that intended.  An adversary\
    \ is any entity\n   other than the client and the CA participating in the protocol.\n\
    \   This goal is met through the use of CMS and PKCS #10 encryption and\n   digital\
    \ signatures using authenticated public keys.  The CA's public\n   key is authenticated\
    \ via out-of-band means such as the checking of\n   the CA fingerprint, and the\
    \ SCEP client's public key is authenticated\n   through manual or preshared secret\
    \ authentication.\n"
- title: 7.1.  General Security
  contents:
  - "7.1.  General Security\n   Common key-management considerations such as keeping\
    \ private keys\n   truly private and using adequate lengths for symmetric and\
    \ asymmetric\n   keys must be followed in order to maintain the security of this\n\
    \   protocol.  This is especially true for CA keys which, when\n   compromised,\
    \ compromise the security of all relying parties.\n"
- title: 7.2.  Use of the CA Private Key
  contents:
  - "7.2.  Use of the CA Private Key\n   A CA private key is generally meant for,\
    \ and usually flagged as,\n   being usable for certificate (and CRL) signing exclusively\
    \ rather\n   than data signing or encryption.  The SCEP protocol, however, uses\n\
    \   the CA private key to both sign and optionally encrypt CMS transport\n   messages.\
    \  This is generally considered undesirable, as it widens the\n   possibility\
    \ of an implementation weakness and provides an additional\n   location where\
    \ the private key must be used (and hence is slightly\n   more vulnerable to exposure)\
    \ and where a side-channel attack might be\n   applied.\n"
- title: 7.3.  ChallengePassword Shared Secret Value
  contents:
  - "7.3.  ChallengePassword Shared Secret Value\n   The security measures that should\
    \ be applied to the challengePassword\n   shared secret depend on the manner in\
    \ which SCEP is employed.  In the\n   simplest case, with SCEP used to provision\
    \ devices with certificates\n   in the manufacturing facility, the physical security\
    \ of the facility\n   may be enough to protect the certificate issue process with\
    \ no\n   additional measures explicitly required.  In general, though, the\n \
    \  security of the issue process depends on the security employed around\n   the\
    \ use of the challengePassword shared secret.  While it's not\n   possible to\
    \ enumerate every situation in which SCEP may be utilised,\n   the following security\
    \ measures should be considered.\n   *  The challengePassword, despite its name,\
    \ shouldn't be a\n      conventional password but a high-entropy shared-secret\n\
    \      authentication string.  Using the base64 encoding of a keying\n      value\
    \ generated or exchanged as part of standard device\n      authentication protocols\
    \ like the Extensible Authentication\n      Protocol (EAP) or DNP3 Secure Authentication\
    \ (DNP3-SA) makes for a\n      good challengePassword.  The use of high-entropy\
    \ shared secrets is\n      particularly important when the PasswordRecipientInfo\
    \ option is\n      used to encrypt SCEP messages; see Section 3.1.\n   *  If feasible,\
    \ the challengePassword should be a one-time value used\n      to authenticate\
    \ the issue of a single certificate (subsequent\n      certificate requests will\
    \ be authenticated by being signed with\n      the initial certificate).  If the\
    \ challengePassword is single use,\n      then the arrival of subsequent requests\
    \ using the same\n      challengePassword can then be used to indicate a security\
    \ breach.\n   *  The lifetime of a challengePassword can be limited, so that it\
    \ can\n      be used during initial device provisioning but will have expired\n\
    \      at a later date if an attacker manages to compromise the\n      challengePassword\
    \ value -- for example, by compromising the device\n      that it's stored in.\n\
    \   *  The CA should take appropriate measures to protect the\n      challengePassword.\
    \  Examples of possible measures include:\n      physical security measures; storing\
    \ it as a salted iterated hash\n      or equivalent memory-hard function; storing\
    \ it as a keyed MAC\n      value if it's not being used for encryption; and storing\
    \ it in\n      encrypted form if it is being used for encryption.\n"
- title: 7.4.  Lack of Certificate Issue Confirmation
  contents:
  - "7.4.  Lack of Certificate Issue Confirmation\n   SCEP provides no confirmation\
    \ that the issued certificate was\n   successfully received and processed by the\
    \ client.  This means that\n   if the CertRep message is lost or can't be processed\
    \ by the client,\n   then the CA will consider the certificate successfully issued\
    \ while\n   the client won't.  If this situation is of concern, then the correct\n\
    \   issuance of the certificate will need to be verified by out-of-band\n   means,\
    \ for example, through the client sending a message signed by\n   the newly issued\
    \ certificate to the CA.  This also provides the proof\n   of possession that's\
    \ not present in the case of a renewal operation;\n   see Section 7.6.\n"
- title: 7.5.  GetCACaps Issues
  contents:
  - "7.5.  GetCACaps Issues\n   The GetCACaps response is not authenticated by the\
    \ CA.  This allows\n   an attacker to perform downgrade attacks on the cryptographic\n\
    \   capabilities of the client/CA exchange.  In particular, if the server\n  \
    \ were to support MD5 and single DES, then an in-path attacker could\n   trivially\
    \ roll back the encryption to use these insecure algorithms.\n   By taking advantage\
    \ of the presence of large amounts of static known\n   plaintext in the SCEP messages,\
    \ as of 2017, a DES rainbow table\n   attack can recover most encryption keys\
    \ in under a minute, and MD5\n   chosen-prefix collisions can be calculated for\
    \ a few tens of cents of\n   computing time using tools like HashClash.  It is\
    \ for this reason\n   that this specification makes single DES and MD5 a MUST\
    \ NOT feature.\n   Note that all known servers support at least triple DES and\
    \ SHA-1\n   (regardless of whether \"DES3\" and \"SHA-1\" are indicated in\n \
    \  GetCACaps), so there should never be a reason to fall all the way\n   back\
    \ to single DES and MD5.\n   One simple countermeasure to a GetCACaps downgrade\
    \ attack is for\n   clients that are operating in an environment where on-path\
    \ attacks\n   are possible and that expect the \"SCEPStandard\" capability to\
    \ be\n   indicated by the CA but don't see it in the GetCACaps response to\n \
    \  treat its absence as a security issue, and either discontinue the\n   exchange\
    \ or continue as if \"SCEPStandard\" had been returned.  This\n   requires a certain\
    \ trade-off between compatibility with old servers\n   and security against active\
    \ attacks.\n"
- title: 7.6.  Lack of PoP in Renewal Requests
  contents:
  - "7.6.  Lack of PoP in Renewal Requests\n   Renewal operations (but not standard\
    \ certificate-issue operations)\n   are processed via a previously issued certificate\
    \ and its associated\n   private key, not the key in the PKCS #10 request.  This\
    \ means that a\n   client no longer demonstrates proof of possession (PoP) of\
    \ the\n   private key corresponding to the public key in the PKCS #10 request.\n\
    \   It is therefore possible for a client to recertify an existing key\n   used\
    \ by a third party, so that two or more certificates exist for the\n   same key.\
    \  By switching out the certificate in a signature, an\n   attacker can appear\
    \ to have a piece of data signed by their\n   certificate rather than the original\
    \ signer's certificate.  This, and\n   other, attacks are described in S/MIME\
    \ ESS [RFC2634].\n   Avoiding these types of attacks requires situation-specific\
    \ measures.\n   For example, CMS/SMIME implementations may use the ESSCertID\n\
    \   attribute from S/MIME ESS [RFC2634] or its successor, S/MIME ESSv2\n   [RFC5035],\
    \ to unambiguously identify the signing certificate.\n   However, since other\
    \ mechanisms and protocols that the certificates\n   will be used with typically\
    \ don't defend against this problem, it's\n   unclear whether this is an actual\
    \ issue with SCEP.\n"
- title: 7.7.  Traffic Monitoring
  contents:
  - "7.7.  Traffic Monitoring\n   SCEP messages are signed with certificates that\
    \ may contain\n   identifying information.  If these are sent over the public\
    \ Internet\n   and real identity information (rather than placeholder values or\n\
    \   arbitrary device IDs) is included in the signing certificate data, an\n  \
    \ attacker may be able to monitor the identities of the entities\n   submitting\
    \ the certificate requests.  If this is an issue, then\n   [RFC7258] should be\
    \ consulted for guidance.\n"
- title: 7.8.  Unnecessary Cryptography
  contents:
  - "7.8.  Unnecessary Cryptography\n   Some of the SCEP exchanges use unnecessary\
    \ signing and encryption\n   operations.  In particular, the GetCert and GetCRL\
    \ exchanges are\n   encrypted and signed in both directions.  The information\
    \ requested\n   is public, and thus encrypting the requests is of questionable\
    \ value.\n   In addition, CRLs and certificates sent in responses are already\n\
    \   signed by the CA and can be verified by the recipient without\n   requiring\
    \ additional signing and encryption.  More lightweight means\n   of retrieving\
    \ certificates and CRLs such as HTTP certificate-store\n   access [RFC4387] and\
    \ LDAP are recommended for this reason.\n"
- title: 7.9.  Use of SHA-1
  contents:
  - "7.9.  Use of SHA-1\n   The majority of the large number of devices that use SCEP\
    \ today\n   default to SHA-1, with many supporting only that hash algorithm with\n\
    \   no ability to upgrade to a newer one.  SHA-1 is no longer regarded as\n  \
    \ secure in all situations, but as used in SCEP, it's still safe.\n   There are\
    \ three reasons for this.  The first is that attacking SCEP\n   would require\
    \ creating a fully general SHA-1 collision in close to\n   real time alongside\
    \ breaking AES (more specifically, it would require\n   creating a fully general\
    \ SHA-1 collision for the PKCS #10 request,\n   breaking the AES encryption around\
    \ the PKCS #10 request, and then\n   creating a second SHA-1 collision for the\
    \ signature on the encrypted\n   data), which won't be feasible for a long time.\n\
    \   The second reason is that the signature over the message -- in other\n   words,\
    \ the SHA-1 hash that isn't protected by encryption -- doesn't\n   serve any critical\
    \ cryptographic purpose: The PKCS #10 data itself is\n   authenticated through\
    \ its own signature, protected by encryption, and\n   the overall request is authorised\
    \ by the (encrypted) shared secret.\n   The sole exception to this will be the\
    \ small number of\n   implementations that support the Renewal operation, which\
    \ may be\n   authorised purely through a signature, but presumably any\n   implementation\
    \ recent enough to support Renewal also supports SHA-2.\n   Any legacy implementation\
    \ that supports the historic core SCEP\n   protocol would not be affected.\n \
    \  The third reason is that SCEP uses the same key for encryption and\n   signing,\
    \ so that even if an attacker were able to capture an outgoing\n   renewal request\
    \ that didn't include a shared secret (in other words,\n   one that was only authorised\
    \ through a signature), break the AES\n   encryption, forge the SHA-1 hash in\
    \ real time, and forward the forged\n   request to the CA, they couldn't decrypt\
    \ the returned certificate,\n   which is protected with the same key that was\
    \ used to generate the\n   signature.  While Section 7.8 points out that SCEP\
    \ uses unnecessary\n   cryptography in places, the additional level of security\
    \ provided by\n   the extra crypto makes it immune to any issues with SHA-1.\n\
    \   This doesn't mean that SCEP implementations should continue to use\n   SHA-1\
    \ in perpetuity, merely that there's no need for a panicked\n   switch to SHA-2.\n"
- title: 7.10.  Use of HTTP
  contents:
  - "7.10.  Use of HTTP\n   SCEP is an encrypted, authenticated certificate enrollment\
    \ protocol\n   that uses HTTP as a simple transport mechanism.  Since SCEP messages\n\
    \   are already cryptographically secured, it does not require transport\n   layer\
    \ security.  Where HTTPS is elected, a performance hit may result\n   from the\
    \ TLS overhead, operational problems may result due to the\n   more complex configuration,\
    \ and potential security vulnerability may\n   result due to the addition of an\
    \ entire TLS protocol stack alongside\n   the basic SCEP protocol.\n   In particular,\
    \ experience has shown that the issue of configuring\n   certificates, CAs, and\
    \ trust for both TLS and SCEP often leads to\n   interoperability problems because\
    \ different certificates and trust\n   models are used in each.  Use of HTTPS\
    \ to authenticate the server\n   does not enable omission of the ChallengePassword\
    \ or similar\n   authenticator in the SCEP message on the assumption that using\
    \ HTTPS\n   instead of HTTP will somehow make this insecure usage secure again.\n\
    \   HTTPS is not soy sauce for security and is unnecessary for SCEP,\n   which\
    \ uses cryptographically secured messages and does not require\n   transport layer\
    \ security.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [AES]      Technology, U. N. I. O. S. A., \"The\
    \ Advanced Encryption\n              Standard (AES)\", FIPS 197, DOI 10.6028/NIST.FIPS.197,\n\
    \              November 2001, <https://doi.org/10.6028/NIST.FIPS.197>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2985]  Nystrom,\
    \ M. and B. Kaliski, \"PKCS #9: Selected Object\n              Classes and Attribute\
    \ Types Version 2.0\", RFC 2985,\n              DOI 10.17487/RFC2985, November\
    \ 2000,\n              <https://www.rfc-editor.org/info/rfc2985>.\n   [RFC2986]\
    \  Nystrom, M. and B. Kaliski, \"PKCS #10: Certification\n              Request\
    \ Syntax Specification Version 1.7\", RFC 2986,\n              DOI 10.17487/RFC2986,\
    \ November 2000,\n              <https://www.rfc-editor.org/info/rfc2986>.\n \
    \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n    \
    \          Resource Identifier (URI): Generic Syntax\", STD 66,\n            \
    \  RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <https://www.rfc-editor.org/info/rfc4648>.\n   [RFC5234]  Crocker, D., Ed.\
    \ and P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\"\
    , STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n     \
    \         <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC5280]  Cooper, D.,\
    \ Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk,\
    \ \"Internet X.509 Public Key\n              Infrastructure Certificate and Certificate\
    \ Revocation List\n              (CRL) Profile\", RFC 5280, DOI 10.17487/RFC5280,\
    \ May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n   [RFC5652]\
    \  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n            \
    \  RFC 5652, DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7258]  Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n \
    \             Attack\", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May\n       \
    \       2014, <https://www.rfc-editor.org/info/rfc7258>.\n   [RFC8126]  Cotton,\
    \ M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing an IANA\
    \ Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126,\
    \ June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [SHA2]     Technology, U. N.\
    \ I. O. S. A., \"Secure Hash Standard\n              (SHS)\", FIPS 180-3, October\
    \ 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [HTTP]     Nottingham, M., \"Building Protocols\
    \ with HTTP\", Work in\n              Progress, Internet-Draft, draft-ietf-httpbis-bcp56bis-09,\n\
    \              November 1, 2019, <https://tools.ietf.org/html/draft-ietf-\n  \
    \            httpbis-bcp56bis-09>.\n   [JSCEP]    \"A Java implementation of the\
    \ Simple Certificate Enrolment\n              Protocol\", commit 7410332, January\
    \ 2020,\n              <https://github.com/jscep/jscep>.\n   [RFC2634]  Hoffman,\
    \ P., Ed., \"Enhanced Security Services for S/MIME\",\n              RFC 2634,\
    \ DOI 10.17487/RFC2634, June 1999,\n              <https://www.rfc-editor.org/info/rfc2634>.\n\
    \   [RFC4387]  Gutmann, P., Ed., \"Internet X.509 Public Key\n              Infrastructure\
    \ Operational Protocols: Certificate Store\n              Access via HTTP\", RFC\
    \ 4387, DOI 10.17487/RFC4387, February\n              2006, <https://www.rfc-editor.org/info/rfc4387>.\n\
    \   [RFC5035]  Schaad, J., \"Enhanced Security Services (ESS) Update:\n      \
    \        Adding CertID Algorithm Agility\", RFC 5035,\n              DOI 10.17487/RFC5035,\
    \ August 2007,\n              <https://www.rfc-editor.org/info/rfc5035>.\n   [RFC7296]\
    \  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.\n              Kivinen,\
    \ \"Internet Key Exchange Protocol Version 2\n              (IKEv2)\", STD 79,\
    \ RFC 7296, DOI 10.17487/RFC7296, October\n              2014, <https://www.rfc-editor.org/info/rfc7296>.\n\
    \   [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n  \
    \            <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8551]  Schaad,\
    \ J., Ramsdell, B., and S. Turner, \"Secure/\n              Multipurpose Internet\
    \ Mail Extensions (S/MIME) Version 4.0\n              Message Specification\"\
    , RFC 8551, DOI 10.17487/RFC8551,\n              April 2019, <https://www.rfc-editor.org/info/rfc8551>.\n"
- title: Appendix A.  Background Notes
  contents:
  - "Appendix A.  Background Notes\n   This specification has spent over twenty years\
    \ in the draft stage.\n   Its original goal, provisioning IPsec routers with certificates,\
    \ has\n   long since changed to general device/embedded system/IoT use.  To fit\n\
    \   this role, extra features were bolted on in a haphazard manner\n   through\
    \ the addition of a growing list of appendices and by inserting\n   additional,\
    \ often conflicting, paragraphs in various locations in the\n   body text.  Since\
    \ existing features were never updated as newer ones\n   were added, the specification\
    \ accumulated large amounts of historical\n   baggage over time.  If OpenPGP was\
    \ described as \"a museum of 1990s\n   crypto\", then the SCEP document was its\
    \ graveyard.\n   About five years ago, the specification, which even at that point\
    \ had\n   seen only sporadic reposts of the existing document, was more or less\n\
    \   abandoned by its original sponsors.  Due to its widespread use in\n   large\
    \ segments of the industry, the specification was rebooted in\n   2015, cleaning\
    \ up fifteen years' worth of accumulated cruft, fixing\n   errors, clarifying\
    \ ambiguities, and bringing the algorithms and\n   standards used into the current\
    \ century (prior to the update, the de\n   facto lowest-common-denominator algorithms\
    \ used for interoperability\n   were the insecure forty-year-old single DES and\
    \ broken MD5 hash\n   algorithms).\n   Note that although the text of the current\
    \ specification has changed\n   significantly due to the consolidation of features\
    \ and appendices\n   into the main document, the protocol that it describes is\
    \ identical\n   on the wire to the original (with the unavoidable exception of\
    \ the\n   switch from single DES and MD5 to AES and SHA-2).  The only two\n  \
    \ changes introduced, the \"SCEPStandard\" indicator in GetCACaps and the\n  \
    \ failInfoText attribute, are both optional values and would be ignored\n   by\
    \ older implementations that don't support them, or can be omitted\n   from messages\
    \ if they are found to cause problems.\n   Other changes include:\n   *  Resolved\
    \ contradictions in the text -- for example, a requirement\n      given as a MUST\
    \ in one paragraph and a SHOULD in the next, a MUST\n      NOT in one paragraph\
    \ and a MAY a few paragraphs later, a SHOULD\n      NOT contradicted later by\
    \ a MAY, and so on.\n   *  Merged several later fragmentary addenda placed in\
    \ appendices (for\n      example, the handling of certificate renewal) with the\
    \ body of the\n      text.\n   *  Merged the \"SCEP Transactions\" and \"SCEP\
    \ Transport\" sections,\n      since the latter mostly duplicated (with occasional\n\
    \      inconsistencies) the former.\n   *  Updated the algorithms to ones dating\
    \ from at least this century.\n   *  Did the same for normative references to\
    \ other standards.\n   *  Updated the text to use consistent terminology for the\
    \ client and\n      CA rather than a mixture of client, requester, requesting\
    \ system,\n      end entity, server, certificate authority, certification\n  \
    \    authority, and CA.\n   *  Corrected incorrect references to other standards,\
    \ e.g.,\n      IssuerAndSerial -> IssuerAndSerialNumber.\n   *  Corrected errors\
    \ such as a statement that when both signature and\n      encryption certificates\
    \ existed, the signature certificate was\n      used for encryption.\n   *  Condensed\
    \ redundant discussions of the same topic spread across\n      multiple sections\
    \ into a single location.  For example, the\n      description of intermediate\
    \ CA handling previously existed in\n      three different locations, with slightly\
    \ different requirements in\n      each one.\n   *  Added a description of how\
    \ pkiMessages were processed, which was\n      never made explicit in the original\
    \ specification.  This led to\n      creative interpretations that had security\
    \ problems but were\n      employed anyway due to the lack of specific guidance\
    \ on what to\n      do.\n   *  Relaxed some requirements that didn't serve any\
    \ obvious purpose\n      and that major implementations didn't seem to be enforcing.\
    \  For\n      example, the requirement that the self-signed certificate used\n\
    \      with a request MUST contain a subject name that matched the one in\n  \
    \    the PKCS #10 request was relaxed to a SHOULD, because a number of\n     \
    \ implementations either ignored the issue entirely or at worst\n      performed\
    \ some minor action like creating a log entry, after which\n      they continued\
    \ anyway.\n   *  Removed discussion of the transactionID from the security\n \
    \     considerations, since the instructions there were directly\n      contradicted\
    \ by the discussion of the use of the transactionID in\n      Section 5.\n   *\
    \  Added a requirement that the signed message include the signing\n      certificate(s)\
    \ in the signedData certificates field.  This was\n      implicit in the original\
    \ specification (without it, the message\n      couldn't be verified by the CA)\
    \ and was handled by the fact that\n      most PKCS #7/CMS libraries do this by\
    \ default, but was never\n      explicitly mentioned.\n   *  Clarified sections\
    \ that were unclear or even made no sense -- for\n      example, the requirement\
    \ for a \"hash on the public key\" [sic]\n      encoded as a PrintableString.\n\
    \   *  Renamed \"RA certificates\" to \"intermediate CA certificates\".  The\n\
    \      original document at some point added mention of RA certificates\n    \
    \  without specifying how the client was to determine that an RA was\n      in\
    \ use, how the RA operations were identified in the protocol, or\n      how it\
    \ was used.  It's unclear whether what was meant was a true\n      RA or merely\
    \ an intermediate CA, as opposed to the default\n      practice of having certificates\
    \ issued directly from a single root\n      CA certificate.  This update uses\
    \ the term \"intermediate CA\n      certificates\", since this seems to have been\
    \ the original intent\n      of the text.\n   *  Redid the PKIMessage diagram\
    \ to match what was specified in CMS;\n      the original diagram omitted a number\
    \ of fields and nested data\n      structures, which meant that the diagram didn't\
    \ match either the\n      text or the CMS specification.\n   *  Removed the requirement\
    \ for a CertPoll to contain a\n      recipientNonce, since CertPoll is a client\
    \ message and will never\n      be sent in response to a message containing a\
    \ senderNonce.  See\n      also the note in Section 3.3.2.\n   *  Clarified certificate\
    \ renewal.  This represents a capability that\n      was bolted onto the original\
    \ protocol with (at best) vaguely\n      defined semantics, including a requirement\
    \ by the CA to guess\n      whether a particular request was a renewal or not.\
    \  In response to\n      developer feedback that they either avoided renewal entirely\n\
    \      because of this uncertainty or hard-coded in particular behaviour\n   \
    \   on a per-CA basis, this specification explicitly identifies\n      renewal\
    \ requests as such and provides proper semantics for them.\n   *  Corrected the\
    \ requirement that \"undefined message types are\n      treated as an error\"\
    , since this negates the effect of GetCACaps,\n      which is used to define new\
    \ message types.  In particular,\n      operations such as GetCACaps \"Renewal\"\
    \ would be impossible if\n      enforced as written, because the Renewal operation\
    \ was an\n      undefined message type at the time.\n   *  In line with the above,\
    \ added IANA registries for several entries\n      that had previously been defined\
    \ in an ad hoc manner in different\n      locations in the text.\n   *  Added\
    \ the \"SCEPStandard\" keyword to GetCACaps to indicate that the\n      CA complies\
    \ with the final version of the SCEP standard, since the\n      definition of\
    \ what constitutes SCEP standards compliance has\n      changed significantly\
    \ over the years.\n   *  Added the optional failInfoText attribute to deal with\
    \ the fact\n      that failInfo was incapable of adequately communicating to clients\n\
    \      why a certificate request operation had been rejected.\n   *  Removed the\
    \ discussion in the security considerations of\n      revocation issues, since\
    \ SCEP doesn't support revocation as part\n      of the protocol.\n   *  Clarified\
    \ the use of nonces, which if applied as originally\n      specified would have\
    \ made the use of polling in the presence of a\n      lost message impossible.\n\
    \   *  Removed the discussion of generating a given transactionID by\n      hashing\
    \ the public key, since this implied that there was some\n      special significance\
    \ in the value generated this way.  Since it\n      was neither a MUST nor a MAY,\
    \ it was unsound to imply that servers\n      could rely on the value being generated\
    \ a certain way.  In\n      addition, it wouldn't work if multiple transactions\
    \ as discussed\n      in Section 4.4 were initiated, since the deterministic generation\n\
    \      via hashing would lead to duplicate transactionIDs.\n   *  Added examples\
    \ of SCEP messages to give implementers something to\n      aim for.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The editor would like to thank all of the previous editors,\
    \ authors,\n   and contributors for their work maintaining the document over the\n\
    \   years: Cheryl Madson, Xiaoyi Liu, David McGrew, David Cooper, Andy\n   Nourse,\
    \ Max Pritikin, Jan Vilhuber, and others.  The IETF reviewers\n   provided much\
    \ useful feedback that helped improve the document, and\n   in particular spotted\
    \ a number of things that were present in SCEP\n   through established practice\
    \ rather than by being explicitly\n   described in the text.  Numerous other people\
    \ have contributed during\n   the long life cycle of the document, and all deserve\
    \ thanks.  In\n   addition, several PKCS #7 / CMS libraries contributed to\n \
    \  interoperability by doing the right thing despite what earlier SCEP\n   documents\
    \ required.\n   The authors of earlier draft versions of this document would like\
    \ to\n   thank Peter William of ValiCert, Inc. (formerly of VeriSign, Inc.),\n\
    \   Alex Deacon of VeriSign, Inc., and Christopher Welles of IRE, Inc.\n   for\
    \ their contributions to early versions of this protocol and this\n   document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter Gutmann\n   University of Auckland\n   Department\
    \ of Computer Science\n   Auckland\n"
