- title: __initial_text__
  contents:
  - "            An INVITE-Initiated Dialog Event Package for the\n              \
    \     Session Initiation Protocol (SIP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 01) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a dialog event package for the SIP Events\n\
    \   architecture, along with a data format used in notifications for this\n  \
    \ package.  The dialog package allows users to subscribe to another\n   user and\
    \ to receive notification of the changes in state of INVITE-\n   initiated dialog\
    \ usages in which the subscribed-to user is involved.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      3.8. Subscriber Processing of NOTIFY Requests ..................12\n\
    \      3.9. Handling of Forked Requests ...............................12\n  \
    \    3.10. Rate of Notifications ....................................13\n    \
    \  3.11. State Agents .............................................13\n   4. Dialog\
    \ Information Format ......................................13\n      4.1. Structure\
    \ of Dialog Information ...........................13\n           4.1.1. Dialog\
    \ Element .....................................14\n           4.1.2. State Element\
    \ ......................................15\n           4.1.3. Duration Element\
    \ ...................................15\n           4.1.4. Replaces Element ...................................15\n\
    \           4.1.5. Referred-By Element ................................16\n  \
    \         4.1.6. Local and Remote Elements ..........................16\n    \
    \  4.2. Sample Notification Body ..................................17\n      4.3.\
    \ Constructing Coherent State ...............................18\n      4.4. Schema\
    \ ....................................................19\n   5. Definition of\
    \ New Media Feature Parameters .....................22\n      5.1. The \"sip.byeless\"\
    \ Parameter ...............................22\n      5.2. The \"sip.rendering\"\
    \ parameter .............................23\n   6. Examples .......................................................24\n\
    \      6.1. Basic Example .............................................24\n  \
    \    6.2. Emulating a Shared-Line Phone System ......................26\n    \
    \  6.3. Minimal Dialog Information with Privacy ...................31\n   7. Security\
    \ Considerations ........................................32\n   8. IANA Considerations\
    \ ............................................32\n      8.1. application/dialog-info+xml\
    \ MIME Registration .............33\n      8.2. URN Sub-Namespace Registration\
    \ for\n           urn:ietf:params:xml:ns:dialog-info ........................34\n\
    \      8.3. Schema Registration .......................................34\n  \
    \    8.4. Media Feature Parameter Registration ......................34\n    \
    \       8.4.1. sip.byeless ........................................35\n      \
    \     8.4.2. sip.rendering ......................................35\n   9. Acknowledgements\
    \ ...............................................36\n   10. References ....................................................36\n\
    \      10.1. Normative References .....................................36\n  \
    \    10.2. Informative References ...................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SIP Events framework [1] defines general mechanisms\
    \ for\n   subscription to, and notification of, events within SIP networks.  It\n\
    \   introduces the notion of a package, which is a specific\n   \"instantiation\"\
    \ of the events mechanism for a well-defined set of\n   events.  Packages have\
    \ been defined for user presence [16], watcher\n   information [17], and message\
    \ waiting indicators [18], amongst\n   others.  This document defines an event\
    \ package for INVITE-initiated\n   dialog usages.  Dialogs refer to the SIP relationship\
    \ established\n   between two SIP peers [2].  Dialogs can be created by many methods,\n\
    \   although RFC 3261 defines only one: the INVITE method.  RFC 3265 [1]\n   defines\
    \ the SUBSCRIBE and NOTIFY methods, which also create new\n   dialog usages. \
    \ However, using this package to model state for non-\n   session dialog usages\
    \ is out of the scope of this specification.\n   A variety of applications are\
    \ enabled through knowledge of INVITE\n   dialog usage state.  Some examples include:\n\
    \      Automatic Callback: In this basic Public Switched Telephone\n         Network\
    \ (PSTN) application, user A calls user B but User B is\n         busy.  User\
    \ A would like to get a callback when user B hangs\n         up.  When B hangs\
    \ up, user A's phone rings.  When A picks up,\n         they hear ringing, while\
    \ they are being connected to B.  To\n         implement this with SIP, a mechanism\
    \ is required for A to\n         receive a notification when the dialogs at B\
    \ are complete.\n      Presence-Enabled Conferencing: In this application, user\
    \ A wishes\n         to set up a conference call with users B and C.  Rather than\n\
    \         being scheduled, the call is created automatically when A, B\n     \
    \    and C are all available.  To do this, the server providing the\n        \
    \ application would like to know whether A, B, and C are\n         \"online\"\
    , not idle, and not in a phone call.  Determining\n         whether or not A,\
    \ B, and C are in calls can be done in two\n         ways.  In the first, the\
    \ server acts as a call-stateful proxy\n         for users A, B, and C, and therefore\
    \ knows their call state.\n         This won't always be possible, however, and\
    \ it introduces\n         scalability, reliability, and operational complexities.\
    \  In the\n         second way, the server subscribes to the dialog state of those\n\
    \         users and receives notifications as this state changes.  This\n    \
    \     enables the application to be provided in a distributed way;\n         the\
    \ server need not reside in the same domain as the users.\n      IM Conference\
    \ Alerts: In this application, a user can receive an\n         Instant Message\
    \ (IM) on their phone whenever someone joins a\n         conference that the phone\
    \ is involved in.  The IM alerts are\n         generated by an application separate\
    \ from the conference\n         server.\n   In general, the dialog package allows\
    \ for construction of distributed\n   applications, where the application requires\
    \ information on dialog\n   state but is not co-resident with the end user on\
    \ which that state\n   resides.\n   This document also defines two new callee\
    \ capability [10] feature\n   parameters:\n      o \"sip.byeless\", which indicates\
    \ that a SIP user agent (UA) is not\n         capable of terminating a session\
    \ itself (for example, in some\n         announcement or recording services, or\
    \ in some call centers) in\n         which the UA is no longer interested in participating;\
    \ and\n      o \"sip.rendering\", which positively describes whether the user\n\
    \         agent is rendering any of the media it is receiving.  These\n      \
    \   feature parameters are useful in many of the same applications\n         that\
    \ motivated the dialog package, such as conferencing,\n         presence, and\
    \ the shared-line example described in Section 6.2.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [9] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3.  Dialog Event Package
  contents:
  - "3.  Dialog Event Package\n   This section provides the details for defining a\
    \ SIP Events package,\n   as specified in [1].\n"
- title: 3.1.  Event Package Name
  contents:
  - "3.1.  Event Package Name\n   The name of this event package is \"dialog\".  This\
    \ package name is\n   carried in the Event and Allow-Events header fields, as\
    \ defined in\n   [1].\n"
- title: 3.2.  Event Package Parameters
  contents:
  - "3.2.  Event Package Parameters\n   This package defines four Event Package parameters:\
    \  call-id, to-tag,\n   from-tag, and include-session-description.  If a subscription\
    \ to a\n   specific dialog is requested, the first three of these parameters\n\
    \   MUST be present, to identify the dialog that is being subscribed to.\n   The\
    \ to-tag is matched against the local tag, the from-tag is matched\n   against\
    \ the remote tag, and the call-id is matched against the\n   Call-ID.  The include-session-description\
    \ parameter indicates whether\n   the subscriber would like to receive the session\
    \ descriptions\n   associated with the subscribed dialog usage or usages.\n  \
    \ It is also possible to subscribe to the set of dialogs created as a\n   result\
    \ of a single INVITE sent by a UAC (user agent client).  In that\n   case, the\
    \ call-id and to-tag MUST be present.  The to-tag is matched\n   against the local\
    \ tag and the call-id is matched against the Call-ID.\n   The ABNF for these parameters\
    \ is shown below.  It refers to many\n   constructions from the ABNF of RFC3261,\
    \ such as EQUAL, DQUOTE, and\n   token.\n   call-id     =  \"call-id\" EQUAL (\
    \ token / DQUOTE callid DQUOTE )\n                    ;; NOTE: any DQUOTEs inside\
    \ callid MUST be escaped!\n   from-tag    =  \"from-tag\" EQUAL token\n   to-tag\
    \      =  \"to-tag\" EQUAL token\n   with-sessd  =  \"include-session-description\"\
    \n   If any call-ids contain embedded double-quotes, those double-quotes\n   MUST\
    \ be escaped using the backslash-quoting mechanism.  Note that the\n   call-id\
    \ parameter may need to be expressed as a quoted string.  This\n   is because\
    \ the ABNF for the callid production and the word\n   production, which is used\
    \ by callid (both from RFC 3261 [1]), allow\n   some characters (such as \"@\"\
    , \"[\", and \":\") that are not allowed\n   within a token.\n"
- title: 3.3.  SUBSCRIBE Bodies
  contents:
  - "3.3.  SUBSCRIBE Bodies\n   A SUBSCRIBE request for a dialog package MAY contain\
    \ a body.  This\n   body defines a filter to be applied to the subscription. \
    \ Filter\n   documents are not specified in this document, and at the time of\n\
    \   writing, they are expected to be the subject of future\n   standardization\
    \ activity.\n   A SUBSCRIBE request for a dialog package MAY be sent without a\
    \ body.\n   This implies the default subscription filtering policy.  The default\n\
    \   policy is:\n   o  If the Event header field contained dialog identifiers,\
    \ a\n      notification is generated every time there is a change in the\n   \
    \   state of any matching dialogs for the user identified in the\n      request\
    \ URI of the SUBSCRIBE.\n   o  If there were no dialog identifiers in the Event\
    \ header field, a\n      notification is generated every time there is any change\
    \ in the\n      state of any dialogs for the user identified in the request URI\
    \ of\n      the SUBSCRIBE with the following exceptions.  If the target\n    \
    \  (Contact) URI of a subscriber is equivalent to the remote target\n      URI\
    \ of a specific dialog, then the dialog element for that dialog\n      is suppressed\
    \ for that subscriber.  (The subscriber is already a\n      party in the dialog\
    \ directly, so these notifications are\n      superfluous.)  If no dialogs remain\
    \ after suppressing dialogs, the\n      entire notification to that subscriber\
    \ is suppressed and the\n      version number in the dialog-info element is not\
    \ incremented for\n      that subscriber.  Implicit filtering for one subscriber\
    \ does not\n      affect notifications to other subscribers.\n   o  Notifications\
    \ do not normally contain full state; rather, they\n      only indicate the state\
    \ of the dialog(s) whose state has changed.\n      The exceptions are a NOTIFY\
    \ sent in response to a SUBSCRIBE, and a\n      NOTIFY that contains no dialog\
    \ elements.  These NOTIFYs contain\n      the complete view of dialog state.\n\
    \   o  The notifications contain the identities of the participants in\n     \
    \ the dialog, the target URIs, and the dialog identifiers.  Session\n      descriptions\
    \ are not included unless explicitly requested and\n      explicitly authorized.\n"
- title: 3.4.  Subscription Duration
  contents:
  - "3.4.  Subscription Duration\n   Dialog state changes fairly quickly.  Once established,\
    \ a typical\n   phone call lasts a few minutes (this is different for other session\n\
    \   types, of course).  However, the interval between new calls is\n   typically\
    \ long.  Clients SHOULD specify an explicit duration.\n   There are two distinct\
    \ use cases for dialog state.  The first is when\n   a subscriber is interested\
    \ in the state of a specific dialog or\n   dialogs (and they are authorized to\
    \ find out just the state of those\n   dialogs).  In that case, when the dialogs\
    \ terminate, so too does the\n   subscription.  In these cases, the value of the\
    \ subscription duration\n   is largely irrelevant; it SHOULD be longer than the\
    \ typical duration\n   of a dialog.  We recommend a default duration of two hours,\
    \ which is\n   likely to cover most dialogs.\n   In another case, a subscriber\
    \ is interested in the state of all\n   dialogs for a specific user.  In these\
    \ cases, a shorter interval\n   makes more sense.  The default is one hour for\
    \ these subscriptions.\n"
- title: 3.5.  NOTIFY Bodies
  contents:
  - "3.5.  NOTIFY Bodies\n   As described in RFC 3265 [1], the NOTIFY message will\
    \ contain bodies\n   that describe the state of the subscribed resource.  This\
    \ body is in\n   a format listed in the Accept header field of the SUBSCRIBE,\
    \ or in a\n   package-specific default format if the Accept header field was\n\
    \   omitted from the SUBSCRIBE.\n   In this event package, the body of the notification\
    \ contains a dialog\n   information document.  This document describes the state\
    \ of one or\n   more dialogs associated with the subscribed resource.  All\n \
    \  subscribers and notifiers MUST support the \"application/\n   dialog-info+xml\"\
    \ data format described in Section 4.  The subscribe\n   request MAY contain an\
    \ Accept header field.  If no such header field\n   is present, it has a default\
    \ value of \"application/dialog-info+xml\".\n   If the header field is present,\
    \ it MUST include \"application/\n   dialog-info+xml\", and it MAY include any\
    \ other types capable of\n   representing dialog state.\n   Of course, the notifications\
    \ generated by the server MUST be in one\n   of the formats specified in the Accept\
    \ header field in the SUBSCRIBE\n   request.\n"
- title: 3.6.  Notifier Processing of SUBSCRIBE Requests
  contents:
  - "3.6.  Notifier Processing of SUBSCRIBE Requests\n   The dialog information for\
    \ a user contains sensitive information.\n   Therefore, all subscriptions SHOULD\
    \ be authenticated and then\n   authorized before approval.  All implementors\
    \ of this package MUST\n   support the digest authentication mechanism as a baseline.\
    \  The\n   authorization policy is at the discretion of the administrator, as\n\
    \   always.  However, a few recommendations can be made.\n   It is RECOMMENDED\
    \ that, if the policy of user B is that user A is\n   allowed to call them, dialog\
    \ subscriptions from user A be allowed.\n   However, the information provided\
    \ in the notifications does not\n   contain any dialog identification information,\
    \ merely an indication\n   of whether the user is in at least one call.  Specifically,\
    \ they\n   should not be able to find out any more information than if they sent\n\
    \   an INVITE.  (This concept of a \"virtual\" dialog is discussed more in\n \
    \  Section 3.7.2, and an example of such a notification body is shown\n   below).\n\
    \      <?xml version=\"1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n                   version=\"0\" state=\"full\"\n                   entity=\"\
    sip:alice@example.com\">\n        <dialog id=\"as7d900as8\">\n          <state>confirmed</state>\n\
    \        </dialog>\n      </dialog-info>\n   A user agent that registers with\
    \ the address-of-record X SHOULD\n   authorize subscriptions that come from any\
    \ entity that can\n   authenticate itself as X.  Complete information on the dialog\
    \ state\n   SHOULD be sent in this case.  This authorization behavior allows a\n\
    \   group of devices representing a single user to become aware of each\n   other's\
    \ state.  This is useful for applications such as\n   single-line-extension, also\
    \ known as shared lines.\n      Note that many implementations of \"shared-lines\"\
    \ have a feature\n      that allows details of calls on a shared address-of-record\
    \ to be\n      made private.  This is a completely reasonable authorization\n\
    \      policy that could result in notifications that contain only the id\n  \
    \    attribute of the dialog element and the state element when\n      shared-line\
    \ privacy is requested, and notifications with more\n      complete information\
    \ when shared-line privacy is not requested.\n"
- title: 3.7.  Notifier Generation of NOTIFY Requests
  contents:
  - "3.7.  Notifier Generation of NOTIFY Requests\n   Notifications are generated\
    \ for the dialog package when an INVITE\n   request is sent, when a new dialog\
    \ comes into existence at a UA, or\n   when the state or characteristics of an\
    \ existing dialog changes.\n   Therefore, a model of dialog state is needed in\
    \ order to determine\n   precisely when to send notifications, and what their\
    \ content should\n   be.  The SIP specification has a reasonably well defined\
    \ lifecycle\n   for dialogs.  However, it is not explicitly modelled.  This\n\
    \   specification provides an explicit model of dialog state through a\n   finite\
    \ state machine.\n   It is RECOMMENDED that NOTIFY requests only contain information\
    \ on\n   the dialogs whose state or participation information has changed.\n \
    \  However, if a notifier receives a SUBSCRIBE request, the triggered\n   NOTIFY\
    \ SHOULD contain the state of all dialogs that the subscriber is\n   authorized\
    \ to see.\n"
- title: 3.7.1.  The Dialog State Machine
  contents:
  - "3.7.1.  The Dialog State Machine\n   Modelling of dialog state is complicated\
    \ by two factors.  The first\n   is forking, which can cause a single INVITE to\
    \ generate many dialogs\n   at a UAC.  The second is the differing views of state\
    \ at the UAC\n   (user agent client) and UAS (usage agent server).  We have chosen\
    \ to\n   handle the first issue by extending the dialog finite state machine\n\
    \   (FSM) to include the states between transmission of the INVITE and\n   the\
    \ creation of actual dialogs through receipt of 1xx and 2xx\n   responses.  As\
    \ a result, this specification supports the notion of\n   dialog state for dialogs\
    \ before they are fully instantiated.\n   We have also chosen to use a single\
    \ FSM for both UAC and UAS.\n                +----------+            +----------+\n\
    \                |          | 1xx-notag  |          |\n                |     \
    \     |----------->|          |\n                |  Trying  |            |Proceeding|-----+\n\
    \                |          |---+  +-----|          |     |\n                |\
    \          |   |  |     |          |     |\n                +----------+   | \
    \ |     +----------+     |\n                     |   |     |  |          |   \
    \        |\n                     |   |     |  |          |           |\n     \
    \                +<--C-----C--+          |1xx-tag    |\n                     |\
    \   |     |             |           |\n            cancelled|   |     |      \
    \       V           |\n             rejected|   |     |1xx-tag +----------+  \
    \   |\n                     |   |     +------->|          |     |2xx\n       \
    \              |   |              |          |     |\n                     +<--C--------------|\
    \  Early   |-----C---+ 1xx-tag\n                     |   |   replaced   |    \
    \      |     |   | w/new tag\n                     |   |              |      \
    \    |<----C---+ (new FSM\n                     |   |              +----------+\
    \     |      instance\n                     |   |   2xx             |        \
    \   |      created)\n                     |   +----------------+  |          \
    \ |\n                     |                    |  |2xx        |\n            \
    \         |                    |  |           |\n                     V      \
    \              V  V           |\n                +----------+            +----------+\
    \     |\n                |          |            |          |     |\n        \
    \        |          |            |          |     |\n                |Terminated|<-----------|\
    \ Confirmed|<----+\n                |          |  error     |          |\n   \
    \             |          |  timeout   |          |\n                +----------+\
    \  replaced  +----------+\n                              local-bye   |      ^\n\
    \                              remote-bye  |      |\n                        \
    \                  |      |\n                                          +------+\n\
    \                                           2xx w. new tag\n                 \
    \                           (new FSM instance\n                              \
    \               created)\n                               Figure 3\n   The FSM\
    \ for dialog state is shown in Figure 3.  The FSM is best\n   understood by considering\
    \ the UAC and UAS cases separately.\n   The FSM is created in the Trying state\
    \ when the UAC sends an INVITE\n   request.  Upon receipt of a 1xx without a tag,\
    \ the FSM transitions to\n   the Proceeding state.  Note that there is no actual\
    \ dialog yet, as\n   defined by the SIP specification.  However, there is a \"\
    half-dialog\",\n   in the sense that two of the three components of the dialog\
    \ ID (the\n   call identifier and local tag) are known.  If a 1xx with a tag is\n\
    \   received, the FSM transitions to the Early state.  The full dialog\n   identifier\
    \ is now defined.  Had a 2xx been received, the FSM would\n   have transitioned\
    \ to the Confirmed state.\n   If, after transitioning to the Early or Confirmed\
    \ states, the UAC\n   receives another 1xx or 2xx respectively with a different\
    \ tag,\n   another instance of the FSM is created, initialized into the Early\
    \ or\n   Confirmed state, respectively.  The benefit of this approach is that\n\
    \   there will be a single FSM representing the entire state of the\n   invitation\
    \ and resulting dialog when dealing in the common case of no\n   forking.\n  \
    \ If the UAC sends a CANCEL and then subsequently receives a 487 to its\n   INVITE\
    \ transaction, all FSMs spawned from that INVITE transition to\n   the Terminated\
    \ state with the event \"cancelled\".  If the UAC receives\n   a new invitation\
    \ (with a Replaces [13] header) that replaces the\n   current Early or Confirmed\
    \ dialog, all INVITE transactions spawned\n   from the replaced invitation transition\
    \ to the Terminated state with\n   the event \"replaced\".  If the INVITE transaction\
    \ terminates with a\n   non-2xx response for any other reason, all FSMs spawned\
    \ from that\n   INVITE transition to the Terminated state with the event \"rejected\"\
    .\n   Once in the Confirmed state, the call is active.  It can transition\n  \
    \ to the Terminated state if the UAC sends a BYE or receives a BYE\n   (corresponding\
    \ to the \"local-bye\" and \"remote-bye\" events as\n   appropriate), if a mid-dialog\
    \ request generates a 481 or 408 response\n   (corresponding to the \"error\"\
    \ event), or a mid-dialog request\n   generates no response (corresponding to\
    \ the \"timeout\" event).\n   From the perspective of the UAS, when an INVITE\
    \ is received, the FSM\n   is created in the Trying state.  If it sends a 1xx\
    \ without a tag, the\n   FSM transitions to the Proceeding state.  If a 1xx is\
    \ sent with a\n   tag, the FSM transitions to the Early state, and if a 2xx is\
    \ sent, it\n   transitions to the Confirmed state.  If the UAS receives a CANCEL\n\
    \   request and then generates a 487 response to the INVITE (which can\n   occur\
    \ in the Proceeding and Early states), the FSM transitions to the\n   Terminated\
    \ state with the event \"cancelled\".  If the UAS generates\n   any other non-2xx\
    \ final response to the INVITE request, the FSM\n   transitions to the Terminated\
    \ state with the event \"rejected\".  If\n   the UAS receives a new invitation\
    \ (with a Replaces [13] header field)\n   that replaces the current Confirmed\
    \ dialog, the replaced invitation\n   transitions to the Terminated state with\
    \ the event \"replaced\".  Once\n   in the Confirmed state, the other transitions\
    \ to the Terminated state\n   occur for the same reasons they do in the case of\
    \ UAC.\n      There should never be a transition from the Trying state to the\n\
    \      Terminated state with the event \"cancelled\", since the SIP\n      specification\
    \ prohibits transmission of CANCEL until a provisional\n      response is received.\
    \  However, this transition is defined in the\n      FSM just to unify the transitions\
    \ from Trying, Proceeding, and\n      Early states to the Terminated state.\n"
- title: 3.7.2.  Applying the State Machine
  contents:
  - "3.7.2.  Applying the State Machine\n   The notifier MAY generate a NOTIFY request\
    \ on any event transition of\n   the FSM.  Whether it does or not is policy dependent.\
    \  However, some\n   general guidelines are provided.\n   When the subscriber\
    \ is unauthenticated, or it is authenticated but\n   represents a third party\
    \ with no specific authorization policies, it\n   is RECOMMENDED that subscriptions\
    \ to an individual dialog or to a\n   specific set of dialogs be forbidden.  Only\
    \ subscriptions to all\n   dialogs (i.e., there are no dialog identifiers in the\
    \ Event header\n   field) are permitted.  In that case, actual dialog states across\
    \ all\n   dialogs will not be reported.  Rather, a single \"virtual\" dialog FSM\n\
    \   will be used, and event transitions on that FSM will be reported.\n   If there\
    \ is any dialog at the UA whose state is Confirmed, the\n   virtual FSM is in\
    \ the Confirmed state.  If there are no dialogs at\n   the UA in the Confirmed\
    \ state but there is at least one in the Early\n   state, the virtual FSM is in\
    \ the Early or Confirmed state.  If there\n   are no dialogs in the Confirmed\
    \ or Early states but there is at least\n   one in the Proceeding state, the virtual\
    \ FSM is in the Proceeding,\n   Early, or Confirmed state.  If there are no dialogs\
    \ in the Confirmed,\n   Early, or Proceeding states but there is at least one\
    \ in the Trying\n   state, the virtual FSM is in the Trying, Proceeding, Early\
    \ or\n   Confirmed state.  The choice of state to use depends on whether the\n\
    \   UA wishes to let unknown users know that their phone is ringing, as\n   opposed\
    \ to being in an active call.\n   It is RECOMMENDED that, in the absence of any\
    \ preference, Confirmed\n   is used in all cases as shown in the example in Section\
    \ 3.6.\n   Furthermore, it is RECOMMENDED that the notifications of changes in\n\
    \   the virtual FSM machine not convey any information except the state\n   of\
    \ the FSM and its event transitions - no dialog identifiers (which\n   are ill-defined\
    \ in this model in any case).  The use of this virtual\n   FSM allows minimal\
    \ information to be conveyed.  A subscriber cannot\n   know how many calls are\
    \ in progress, or with whom, just that there\n   exists a call.  This is the same\
    \ information they would receive if\n   they simply sent an INVITE to the user\
    \ instead; a 486 (Busy Here)\n   response would indicate that they are on a call.\n\
    \   When the subscriber is authenticated and has authenticated itself\n   with\
    \ the same address-of-record that the UA itself uses, if no\n   explicit authorization\
    \ policy is defined, it is RECOMMENDED that all\n   state transitions on dialogs\
    \ that have been subscribed to be\n   reported, along with complete dialog IDs.\
    \  This means either all of\n   the dialogs, if no dialog identifiers were present\
    \ in the Event\n   header field, or the specific set of dialogs identified by\
    \ the Event\n   header field parameters.\n   The notifier SHOULD generate a NOTIFY\
    \ request on any change in the\n   characteristics associated with the dialog.\
    \  Since these include\n   Contact URIs, Contact parameters, and session descriptions,\
    \ receipt\n   of re-INVITEs and UPDATE requests [3] that modify this information\n\
    \   MAY trigger notifications.\n"
- title: 3.8.  Subscriber Processing of NOTIFY Requests
  contents:
  - "3.8.  Subscriber Processing of NOTIFY Requests\n   The SIP Events framework expects\
    \ packages to specify how a subscriber\n   processes NOTIFY requests in package-specific\
    \ ways.  In particular, a\n   package should specify how it uses the NOTIFY requests\
    \ to construct a\n   coherent view of the state of the subscribed resource.\n\
    \   Typically, the NOTIFY for the dialog package will contain information\n  \
    \ about only those dialogs whose state has changed.  To construct a\n   coherent\
    \ view of the total state of all dialogs, a subscriber to the\n   dialog package\
    \ will need to combine NOTIFYs received over time.\n   Notifications within this\
    \ package can convey partial information;\n   that is, they can indicate information\
    \ about a subset of the state\n   associated with the subscription.  This means\
    \ that an explicit\n   algorithm needs to be defined in order to construct coherent\
    \ and\n   consistent state.  The details of this mechanism are specific to the\n\
    \   particular document type.  See Section 4.3 for information on\n   constructing\
    \ coherent information from an application/dialog-info+xml\n   document.\n"
- title: 3.9.  Handling of Forked Requests
  contents:
  - "3.9.  Handling of Forked Requests\n   Since dialog state is distributed across\
    \ the UA for a particular\n   user, it is reasonable and useful for a SUBSCRIBE\
    \ request for dialog\n   state to fork and to reach multiple UAs.\n   As a result,\
    \ a forked SUBSCRIBE request for dialog state can install\n   multiple subscriptions.\
    \  Subscribers to this package MUST be prepared\n   to install subscription state\
    \ for each NOTIFY generated as a result\n   of a single SUBSCRIBE.\n"
- title: 3.10.  Rate of Notifications
  contents:
  - "3.10.  Rate of Notifications\n   For reasons of congestion control, it is important\
    \ that the rate of\n   notifications not be excessive.  It is RECOMMENDED that\
    \ the server\n   not generate notifications for a single subscriber faster than\
    \ once\n   every 1 second.\n"
- title: 3.11.  State Agents
  contents:
  - "3.11.  State Agents\n   Dialog state is ideally maintained in the user agents\
    \ in which the\n   dialog resides.  Therefore, the elements that maintain the\
    \ dialog are\n   the ones best suited to handle subscriptions to it.  However,\
    \ in some\n   cases, a network agent may also know the state of the dialogs held\
    \ by\n   a user.  Such state agents MAY be used with this package.\n"
- title: 4.  Dialog Information Format
  contents:
  - "4.  Dialog Information Format\n   Dialog information is an XML document [4] that\
    \ MUST be well-formed\n   and SHOULD be valid.  Dialog information documents MUST\
    \ be based on\n   XML 1.0 and MUST be encoded using UTF-8.  This specification\
    \ makes\n   use of XML namespaces for identifying dialog information documents\n\
    \   and document fragments.  The namespace URI for elements defined by\n   this\
    \ specification is a URN [5], using the namespace identifier\n   'ietf' defined\
    \ by [6] and extended by [7].  This URN is:\n      urn:ietf:params:xml:ns:dialog-info\n\
    \   A dialog information document begins with the root element tag\n   \"dialog-info\"\
    .\n"
- title: 4.1.  Structure of Dialog Information
  contents:
  - "4.1.  Structure of Dialog Information\n   A dialog information document starts\
    \ with a dialog-info element.\n   This element has three mandatory attributes:\n\
    \   o  version: This attribute allows the recipient of dialog information\n  \
    \    documents to properly order them.  Versions start at 0, and\n      increment\
    \ by one for each new document sent to a subscriber.\n      Versions are scoped\
    \ within a subscription.  Versions MUST be\n      representable using a non-negative\
    \ 32 bit integer.\n   o  state: This attribute indicates whether the document\
    \ contains the\n      full dialog information, or whether it contains only information\n\
    \      on those dialogs that have changed since the previous document\n      (partial).\n\
    \   o  entity: This attribute contains a URI that identifies the user\n      whose\
    \ dialog information is reported in the remainder of the\n      document.  This\
    \ user is referred to as the \"observed user\".\n   The dialog-info element has\
    \ a series of zero or more dialog sub-\n   elements.  Each of those represents\
    \ a specific dialog.  An example:\n      <?xml version=\"1.0\"?>\n      <dialog-info\
    \ xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n                   version=\"\
    0\" notify-state=\"full\"\n                   entity=\"sip:alice@example.com\"\
    >\n      </dialog-info>\n"
- title: 4.1.1.  Dialog Element
  contents:
  - "4.1.1.  Dialog Element\n   The dialog element reports information about a specific\
    \ dialog or\n   \"half-dialog\".  It has a single mandatory attribute: id.  The\
    \ id\n   attribute provides a single string that can be used as an identifier\n\
    \   for this dialog or \"half-dialog\".  This is a different identifier\n   than\
    \ the dialog ID defined in RFC 3261 [2], but related to it.\n   For a caller,\
    \ the id is created when an INVITE request is sent.  When\n   a 1xx response with\
    \ a tag, or a 2xx response is received, the dialog\n   is formally created.  The\
    \ id remains unchanged.  However, if an\n   additional 1xx or 2xx is received,\
    \ resulting in the creation of\n   another dialog (and resulting FSM), that dialog\
    \ is allocated a new\n   id.\n   For a callee, the id is created when an INVITE\
    \ outside of an existing\n   dialog is received.  When a 2xx or a 1xx with a tag\
    \ is sent, creating\n   the dialog, the id remains unchanged.\n   The id MUST\
    \ be unique amongst all current dialogs at a UA.\n   There are a number of optional\
    \ attributes that provide identification\n   information about the dialog:\n \
    \     o  call-id: This attribute is a string that represents the call-id\n   \
    \      component of the dialog identifier.  (Note that single and\n         double\
    \ quotes inside a call-id must be escaped using &quote;\n         for \" and &apos;\
    \ for ' .)\n      o  local-tag: This attribute is a string that represents the\n\
    \         local-tag component of the dialog identifier.\n      o  remote-tag:\
    \ This attribute is a string that represents the\n         remote-tag component\
    \ of the dialog identifier.  The remote tag\n         attribute won't be present\
    \ if there is only a \"half-dialog\",\n         resulting from the generation\
    \ of an INVITE for which no final\n         responses or provisional responses\
    \ with tags has been received.\n      o  direction: This attribute is either initiator\
    \ or recipient, and\n         indicates whether the observed user was the initiator\
    \ of the\n         dialog, or the recipient of the INVITE that created it.\n \
    \     <?xml version=\"1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n                   version=\"0\" state=\"partial\"\n                   entity=\"\
    sip:alice@example.com\">\n        <dialog id=\"as7d900as8\" call-id=\"a84b4c76e66710\"\
    \n                local-tag=\"1928301774\" direction=\"initiator\">\n      ...\n\
    \        </dialog>\n      </dialog-info>\n   The sub-elements of the dialog element\
    \ provide additional information\n   about the dialog.  Some of these sub-elements\
    \ provide more detail\n   about the dialog itself, while the local and remote\
    \ sub-elements\n   describe characteristics of the participants involved in the\
    \ dialog.\n   The only mandatory sub-element is the state element.\n"
- title: 4.1.2.  State Element
  contents:
  - "4.1.2.  State Element\n   The \"state\" element indicates the state of the dialog.\
    \  Its value is\n   an enumerated type describing one of the states in the FSM\
    \ above.  It\n   has an optional event attribute that can be used to indicate\
    \ the\n   event that caused any transition into the terminated state, and an\n\
    \   optional code attribute that indicates the response code associated\n   with\
    \ any transition caused by a response to the original INVITE.\n      <state event=\"\
    rejected\" code=\"486\">terminated</state>\n"
- title: 4.1.3.  Duration Element
  contents:
  - "4.1.3.  Duration Element\n   The \"duration\" element contains the amount of\
    \ time, in seconds, since\n   the FSM was created.\n      <duration>145</duration>\n"
- title: 4.1.4.  Replaces Element
  contents:
  - "4.1.4.  Replaces Element\n   The \"replaces\" element is used to correlate a\
    \ new dialog with one it\n   replaced as a result of an invitation with a Replaces\
    \ header field.\n   This element is present in the replacement dialog only (the\
    \ newer\n   dialog) and contains attributes with the call-id, local-tag, and\n\
    \   remote-tag of the replaced dialog.\n      <replaces call-id=\"hg287s98s89\"\
    \n             local-tag=\"6762h7\" remote-tag=\"09278hsb\"/>\n"
- title: 4.1.5.  Referred-By Element
  contents:
  - "4.1.5.  Referred-By Element\n   The \"referred-by\" element is used to correlate\
    \ a new dialog with a\n   REFER [12] request that triggered it.  The element is\
    \ present in a\n   dialog that was triggered by a REFER request that contained\
    \ a\n   Referred-By [11] header field and contains the (optional) display\n  \
    \ name attribute and the Referred-By URI as its value.\n      <referred-by display=\"\
    Bob\">sip:bob@example.com</referred-by>\n"
- title: 4.1.6.  Local and Remote Elements
  contents:
  - "4.1.6.  Local and Remote Elements\n   The \"local\" and \"remote\" elements are\
    \ sub-elements of the dialog\n   element that contain information about the local\
    \ and remote\n   participants, respectively.  They both have a number of optional\n\
    \   sub-elements that indicate the identity conveyed by the participant,\n   the\
    \ target URI, the feature-tags of the target, and the\n   session-description\
    \ of the participant.\n"
- title: 4.1.6.1.  Identity Element
  contents:
  - "4.1.6.1.  Identity Element\n   The \"identity\" element indicates a local or\
    \ remote URI, as defined in\n   [2] as appropriate.  It has an optional attribute,\
    \ display, that\n   contains the display name from the appropriate URI.\n    \
    \  Note that multiple identities (for example a sip: URI and a tel:\n      URI)\
    \ could be included if they all correspond to the participant.\n      To avoid\
    \ repeating identity information in each request, the\n      subscriber can assume\
    \ that the identity URIs are the same as in\n      previous notifications if no\
    \ identity elements are present in the\n      corresponding local or remote element.\
    \  If any identity elements\n      are present in the local or remote part of\
    \ a notification, the new\n      list of identity tags completely supersedes the\
    \ old list in the\n      corresponding part.\n      <identity display=\"Anonymous\"\
    >\n           sip:anonymous@anonymous.invalid</identity>\n"
- title: 4.1.6.2.  Target Element
  contents:
  - "4.1.6.2.  Target Element\n   The \"target\" contains the local or remote target\
    \ URI constructed by\n   the user agent for this dialog, as defined in RFC 3261\
    \ [2] in a \"uri\"\n   attribute.\n   It can contain a list of Contact header\
    \ parameters in param sub-\n   elements (such as those defined in [10]).  The\
    \ param element contains\n   two required attributes, pname and pval.  Boolean\
    \ parameters are\n   represented by the explicit pval values, \"true\" and \"\
    false\" (for\n   example, when a feature parameter is explicitly negated).  Parameters\n\
    \   that have no value at all are represented by the explicit pval value\n   \"\
    true\".   The param element itself has no contents.  To avoid\n   repeating Contact\
    \ information in each request, the subscriber can\n   assume that the target URI\
    \ and parameters are the same as in previous\n   notifications if no target element\
    \ is present in the corresponding\n   local or remote element.  If a target element\
    \ is present in the local\n   or remote part of a notification, the new target\
    \ tag and list of\n   parameter tags completely supersedes the old target and\
    \ parameter\n   list in the corresponding part.  Note that any quoting (including\n\
    \   extra angle-bracket quoting used to quote string values in [10]) or\n   backslash\
    \ escaping MUST be removed before being placed in a pval\n   attribute.  Any remaining\
    \ single quotes, double quotes, and\n   ampersands MUST be properly XML escaped.\n\
    \      <target uri=\"sip:alice@pc33.example.com\">\n        <param pname=\"isfocus\"\
    \ pval=\"true\"/>\n        <param pname=\"class\" pval=\"business\"/>\n      \
    \  <param pname=\"description\" pval=\"Alice's desk &amp; office\"/>\n       \
    \ <param pname=\"sip.rendering\" pval=\"no\"/>\n      </target>\n"
- title: 4.1.6.3.  Session Description Element
  contents:
  - "4.1.6.3.  Session Description Element\n   The session-description element contains\
    \ the session description used\n   by the observed user for its end of the dialog.\
    \  This element should\n   generally NOT be included in the notifications, unless\
    \ it was\n   explicitly requested by the subscriber.  It has a single attribute,\n\
    \   \"type\", which indicates the MIME media type of the session\n   description.\
    \  To avoid repeating session description information in\n   each request, the\
    \ subscriber can assume that the session description\n   is the same as in previous\
    \ notifications if no session description\n   element is present in the corresponding\
    \ local or remote element.\n"
- title: 4.2.  Sample Notification Body
  contents:
  - "4.2.  Sample Notification Body\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n    xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n     version=\"1\" state=\"full\">\n     <dialog id=\"123456\">\n        <state>confirmed</state>\n\
    \        <duration>274</duration>\n        <local>\n          <identity display=\"\
    Alice\">sip:alice@example.com</identity>\n          <target uri=\"sip:alice@pc33.example.com\"\
    >\n            <param pname=\"isfocus\" pval=\"true\"/>\n            <param pname=\"\
    class\" pval=\"personal\"/>\n          </target>\n        </local>\n        <remote>\n\
    \          <identity display=\"Bob\">sip:bob@example.org</identity>\n        \
    \  <target uri=\"sip:bobster@phone21.example.org\"/>\n        </remote>\n    \
    \ </dialog>\n   </dialog-info>\n"
- title: 4.3.  Constructing Coherent State
  contents:
  - "4.3.  Constructing Coherent State\n   The dialog information subscriber maintains\
    \ a table listing the\n   dialogs, with a row for each dialog.  Each row is indexed\
    \ by an ID\n   that is present in the \"id\" attribute of the \"dialog\" element.\
    \  Each\n   row contains the state of that dialog, as conveyed in the document.\n\
    \   The table is also associated with a version number.  The version\n   number\
    \ MUST be initialized with the value of the \"version\" attribute\n   from the\
    \ \"dialog-info\" element in the first document received.  Each\n   time a new\
    \ document is received, the value of the local version\n   number is compared\
    \ to the \"version\" attribute in the new document.\n   If the value in the new\
    \ document is one higher than the local version\n   number, the local version\
    \ number is increased by one and the document\n   is processed.  If the value\
    \ in the document is more than one higher\n   than the local version number, the\
    \ local version number is set to the\n   value in the new document and the document\
    \ is processed.  If the\n   document did not contain full state, the subscriber\
    \ SHOULD generate a\n   refresh request (SUBSCRIBE) to trigger a full state notification.\
    \  If\n   the value in the document is less than the local version, the\n   document\
    \ is discarded without processing.\n   The processing of the dialog information\
    \ document depends on whether\n   it contains full or partial state.  If it contains\
    \ full state,\n   indicated by the value of the \"state\" attribute in the \"\
    dialog-info\"\n   element, the contents of the table are flushed and then repopulated\n\
    \   from the document.  A new row in the table is created for each\n   \"dialog\"\
    \ element.  If the document contains partial state, as\n   indicated by the value\
    \ of the \"state\" attribute in the \"dialog-info\"\n   element, the document\
    \ is used to update the table.  For each \"dialog\"\n   element in the document,\
    \ the subscriber checks to see whether a row\n   exists for that dialog.  This\
    \ check compares the ID in the \"id\"\n   attribute of the \"dialog\" element\
    \ with the ID associated with the\n   row.  If the dialog does not exist in the\
    \ table, a row is added and\n   its state is set to the information from that\
    \ \"dialog\" element.  If\n   the dialog does exist, its state is updated to be\
    \ the information\n   from that \"dialog\" element.  If a row is updated or created,\
    \ such\n   that its state is now terminated, that entry MAY be removed from the\n\
    \   table at any time.\n"
- title: 4.4.  Schema
  contents:
  - "4.4.  Schema\n   The following is the schema for the application/dialog-info+xml\
    \ type:\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <xs:schema\n\
    \        targetNamespace=\"urn:ietf:params:xml:ns:dialog-info\"\n        xmlns:xs=\"\
    http://www.w3.org/2001/XMLSchema\"\n        xmlns:tns=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n        elementFormDefault=\"qualified\"\n        attributeFormDefault=\"unqualified\"\
    >\n        <!-- This import brings in the XML language\n                     \
    \                          attribute xml:lang-->\n        <xs:import namespace=\"\
    http://www.w3.org/XML/1998/namespace\"\n           schemaLocation=\"http://www.w3.org/2001/03/xml.xsd\"\
    />\n        <xs:element name=\"dialog-info\">\n          <xs:complexType>\n  \
    \          <xs:sequence>\n              <xs:element ref=\"tns:dialog\" minOccurs=\"\
    0\"\n                maxOccurs=\"unbounded\"/>\n              <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                 minOccurs=\"0\"  maxOccurs=\"\
    unbounded\"/>\n            </xs:sequence>\n            <xs:attribute name=\"version\"\
    \ type=\"xs:nonNegativeInteger\"\n                 use=\"required\"/>\n      \
    \      <xs:attribute name=\"state\" use=\"required\">\n              <xs:simpleType>\n\
    \                <xs:restriction base=\"xs:string\">\n                  <xs:enumeration\
    \ value=\"full\"/>\n                  <xs:enumeration value=\"partial\"/>\n  \
    \              </xs:restriction>\n              </xs:simpleType>\n           \
    \ </xs:attribute>\n            <xs:attribute name=\"entity\" type=\"xs:anyURI\"\
    \n                                        use=\"required\"/>\n          </xs:complexType>\n\
    \        </xs:element>\n        <xs:element name=\"dialog\">\n          <xs:complexType>\n\
    \            <xs:sequence>\n              <xs:element ref=\"tns:state\" minOccurs=\"\
    1\" maxOccurs=\"1\"/>\n              <xs:element name=\"duration\" type=\"xs:nonNegativeInteger\"\
    \n                minOccurs=\"0\" maxOccurs=\"1\"/>\n              <xs:element\
    \ name=\"replaces\" minOccurs=\"0\" maxOccurs=\"1\">\n                <xs:complexType>\n\
    \                  <xs:attribute name=\"call-id\" type=\"xs:string\"\n       \
    \             use=\"required\"/>\n                  <xs:attribute name=\"local-tag\"\
    \ type=\"xs:string\"\n                    use=\"required\"/>\n               \
    \   <xs:attribute name=\"remote-tag\" type=\"xs:string\"\n                   \
    \ use=\"required\"/>\n                </xs:complexType>\n              </xs:element>\n\
    \              <xs:element name=\"referred-by\" type=\"tns:nameaddr\"\n      \
    \          minOccurs=\"0\" maxOccurs=\"1\"/>\n              <xs:element name=\"\
    route-set\" minOccurs=\"0\" maxOccurs=\"1\">\n                <xs:complexType>\n\
    \                  <xs:sequence>\n                    <xs:element name=\"hop\"\
    \ type=\"xs:string\"\n                        minOccurs=\"1\" maxOccurs=\"unbounded\"\
    />\n                  </xs:sequence>\n                </xs:complexType>\n    \
    \          </xs:element>\n              <xs:element name=\"local\" type=\"tns:participant\"\
    \n                minOccurs=\"0\" maxOccurs=\"1\"/>\n              <xs:element\
    \ name=\"remote\" type=\"tns:participant\"\n                minOccurs=\"0\" maxOccurs=\"\
    1\"/>\n              <xs:any namespace=\"##other\" processContents=\"lax\"\n \
    \               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n            </xs:sequence>\n\
    \            <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\
    \            <xs:attribute name=\"call-id\" type=\"xs:string\"\n             \
    \ use=\"optional\"/>\n            <xs:attribute name=\"local-tag\" type=\"xs:string\"\
    \n              use=\"optional\"/>\n            <xs:attribute name=\"remote-tag\"\
    \ type=\"xs:string\"\n              use=\"optional\"/>\n            <xs:attribute\
    \ name=\"direction\" use=\"optional\">\n              <xs:simpleType>\n      \
    \          <xs:restriction base=\"xs:string\">\n                  <xs:enumeration\
    \ value=\"initiator\"/>\n                  <xs:enumeration value=\"recipient\"\
    />\n                </xs:restriction>\n              </xs:simpleType>\n      \
    \      </xs:attribute>\n          </xs:complexType>\n        </xs:element>\n \
    \       <xs:complexType name=\"participant\">\n          <xs:sequence>\n     \
    \       <xs:element name=\"identity\" type=\"tns:nameaddr\"\n              minOccurs=\"\
    0\" maxOccurs=\"1\"/>\n            <xs:element name=\"target\" minOccurs=\"0\"\
    \ maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n\
    \                  <xs:element name=\"param\" minOccurs=\"0\"\n              \
    \      maxOccurs=\"unbounded\">\n                    <xs:complexType>\n      \
    \                <xs:attribute name=\"pname\" type=\"xs:string\"\n           \
    \             use=\"required\"/>\n                      <xs:attribute name=\"\
    pval\" type=\"xs:string\"\n                        use=\"required\"/>\n      \
    \              </xs:complexType>\n                  </xs:element>\n          \
    \      </xs:sequence>\n                <xs:attribute name=\"uri\" type=\"xs:string\"\
    \n                                           use=\"required\"/>\n            \
    \  </xs:complexType>\n            </xs:element>\n            <xs:element name=\"\
    session-description\" type=\"tns:sessd\"\n              minOccurs=\"0\" maxOccurs=\"\
    1\"/>\n            <xs:element name=\"cseq\" type=\"xs:nonNegativeInteger\"\n\
    \              minOccurs=\"0\" maxOccurs=\"1\"/>\n            <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n              minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n          </xs:sequence>\n        </xs:complexType>\n        <xs:complexType\
    \ name=\"nameaddr\">\n          <xs:simpleContent>\n            <xs:extension\
    \ base=\"xs:anyURI\">\n              <xs:attribute name=\"display-name\" type=\"\
    xs:string\"\n                use=\"optional\"/>\n            </xs:extension>\n\
    \          </xs:simpleContent>\n        </xs:complexType>\n        <xs:complexType\
    \ name=\"sessd\">\n          <xs:simpleContent>\n            <xs:extension base=\"\
    xs:string\">\n              <xs:attribute name=\"type\" type=\"xs:string\"\n \
    \                                         use=\"required\"/>\n            </xs:extension>\n\
    \          </xs:simpleContent>\n        </xs:complexType>\n        <xs:element\
    \ name=\"state\">\n          <xs:complexType>\n            <xs:simpleContent>\n\
    \              <xs:extension base=\"xs:string\">\n                <xs:attribute\
    \ name=\"event\" use=\"optional\">\n                  <xs:simpleType>\n      \
    \              <xs:restriction base=\"xs:string\">\n                      <xs:enumeration\
    \ value=\"cancelled\"/>\n                      <xs:enumeration value=\"rejected\"\
    />\n                      <xs:enumeration value=\"replaced\"/>\n             \
    \         <xs:enumeration value=\"local-bye\"/>\n                      <xs:enumeration\
    \ value=\"remote-bye\"/>\n                      <xs:enumeration value=\"error\"\
    />\n                      <xs:enumeration value=\"timeout\"/>\n              \
    \      </xs:restriction>\n                  </xs:simpleType>\n               \
    \ </xs:attribute>\n                <xs:attribute name=\"code\" use=\"optional\"\
    >\n                  <xs:simpleType>\n                    <xs:restriction base=\"\
    xs:positiveInteger\">\n                      <xs:minInclusive value=\"100\"/>\n\
    \                      <xs:maxInclusive value=\"699\"/>\n                    </xs:restriction>\n\
    \                  </xs:simpleType>\n                </xs:attribute>\n       \
    \       </xs:extension>\n            </xs:simpleContent>\n          </xs:complexType>\n\
    \        </xs:element>\n      </xs:schema>\n"
- title: 5.  Definition of New Media Feature Parameters
  contents:
  - "5.  Definition of New Media Feature Parameters\n   This section defines two new\
    \ media feature parameters that are useful\n   as input to user presence, in conferencing\
    \ applications, and in\n   applications like the shared-line example described\
    \ in Section 6.2.\n   These feature parameters are especially useful in combination\
    \ with\n   the dialog package, as they allow an authorized third party to become\n\
    \   aware of these characteristics.\n"
- title: 5.1.  The "sip.byeless" Parameter
  contents:
  - "5.1.  The \"sip.byeless\" Parameter\n   The \"sip.byeless\" media feature parameter\
    \ is a new boolean parameter,\n   defined in this document, that provides a positive\
    \ indication that\n   the user agent setting the parameter is unable to terminate\
    \ sessions\n   on its own (for example, by sending a BYE request).  For example,\n\
    \   continuous announcement services and certain recording services are\n   unable\
    \ to determine when it would be desirable to terminate a\n   session, and therefore\
    \ they do not have the ability to terminate\n   sessions at all.  Also, many human\
    \ call centers are configured so\n   that they never terminate sessions.  (This\
    \ is to prevent call center\n   agents from accidentally disconnecting the caller).\
    \  (Note that per\n   [10], this parameter name must be preceded by a \"+\" character\
    \ when\n   used in a SIP Contact header field.)\n      Contact: <sip:recording-service@host.example.net>\n\
    \          ;automaton;+sip.byeless\n"
- title: 5.2.  The "sip.rendering" Parameter
  contents:
  - "5.2.  The \"sip.rendering\" Parameter\n   The \"sip.rendering\" media feature\
    \ parameter is a new string\n   parameter, defined in this document, that can\
    \ provide a positive\n   indication whether the user agent setting the parameter\
    \ is currently\n   rendering any of the media it is receiving in the context of\
    \ a\n   specific session.  It MUST only be used in a Contact header field in\n\
    \   a dialog created using the INVITE request.\n   This parameter has three legal\
    \ values: \"yes\", \"no\", and \"unknown\".\n   The value \"yes\" indicates positive\
    \ knowledge that the user agent is\n   rendering at least one of the streams of\
    \ media that it is receiving.\n   The value \"no\" indicates positive knowledge\
    \ that the user agent is\n   rendering none of the media that it is receiving.\
    \  The value\n   \"unknown\" indicates that the user agent does not know whether\
    \ the\n   media associated with the session is being rendered (which may be the\n\
    \   case if the user agent is acting as a 3pcc (Third Party Call Control)\n  \
    \ [19] controller).\n   The \"sip.rendering\" parameter is useful in applications\
    \ such as\n   shared appearances, conference status monitoring, or as an input\
    \ to\n   user presence.\n      Contact: <sip:musak-onhold@host.example.net>\n\
    \        ;automaton;+sip.rendering=\"no\"\n"
- title: 6.  Examples
  contents:
  - '6.  Examples

    '
- title: 6.1.  Basic Example
  contents:
  - "6.1.  Basic Example\n   For example, if a UAC sends an INVITE that looks, in\
    \ part, like:\n      INVITE sip:bob@example.com SIP/2.0\n      Via: SIP/2.0/UDP\
    \ pc33.example.com;branch=z9hG4bKnashds8\n      Max-Forwards: 70\n      To: Bob\
    \ <sip:bob@example.com>\n      From: Alice <sip:alice@example.com>;tag=1928301774\n\
    \      Call-ID: a84b4c76e66710\n      CSeq: 314159 INVITE\n      Contact: <sip:alice@pc33.example.com>\n\
    \      Content-Type: application/sdp\n      Content-Length: 142\n      [SDP not\
    \ shown]\n   The XML document in a notification from Alice might look like:\n\
    \      <?xml version=\"1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n                   version=\"0\"\n                   state=\"full\"\n      \
    \             entity=\"sip:alice@example.com\">\n        <dialog id=\"as7d900as8\"\
    \ call-id=\"a84b4c76e66710\"\n                local-tag=\"1928301774\" direction=\"\
    initiator\">\n          <state>trying</state>\n        </dialog>\n      </dialog-info>\n\
    \   If the following 180 response is received:\n      SIP/2.0 180 Ringing\n  \
    \    Via: SIP/2.0/UDP pc33.example.com;branch=z9hG4bKnashds8\n      To: Bob <sip:bob@example.com>;tag=456887766\n\
    \      From: Alice <sip:alice@example.com>;tag=1928301774\n      Call-ID: a84b4c76e66710\n\
    \      CSeq: 314159 INVITE\n      Contact: <sip:bob@host.example.com>\n   The\
    \ XML document in a notification might look like:\n      <?xml version=\"1.0\"\
    ?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n        \
    \           version=\"1\"\n                   state=\"full\"\n               \
    \    entity=\"sip:alice@example.com\">\n        <dialog id=\"as7d900as8\" call-id=\"\
    a84b4c76e66710\"\n                local-tag=\"1928301774\" remote-tag=\"456887766\"\
    \n                direction=\"initiator\">\n          <state>early</state>\n \
    \       </dialog>\n      </dialog-info>\n   If it receives a second 180 with a\
    \ different tag:\n      SIP/2.0 180 Ringing\n      Via: SIP/2.0/UDP pc33.example.com;branch=z9hG4bKnashds8\n\
    \      To: Bob <sip:bob@example.com>;tag=hh76a\n      From: Alice <sip:alice@example.com>;tag=1928301774\n\
    \      Call-ID: a84b4c76e66710\n      CSeq: 314159 INVITE\n      Contact: <sip:jack@host.example.com>\n\
    \   This results in the creation of a second dialog:\n      <?xml version=\"1.0\"\
    ?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n        \
    \           version=\"2\"\n                   state=\"full\"\n               \
    \    entity=\"sip:alice@example.com\">\n        <dialog id=\"as7d900as8\" call-id=\"\
    a84b4c76e66710\"\n                local-tag=\"1928301774\" remote-tag=\"456887766\"\
    \n                direction=\"initiator\">\n          <state>early</state>\n \
    \       </dialog>\n        <dialog id=\"as7d900as8\" call-id=\"a84b4c76e66710\"\
    \n                local-tag=\"1928301774\" remote-tag=\"hh76a\"\n            \
    \    direction=\"initiator\">\n          <state>early</state>\n        </dialog>\n\
    \      </dialog-info>\n   If a 200 OK response is received on the second dialog,\
    \ the dialog\n   moves to confirmed:\n      <?xml version=\"1.0\"?>\n      <dialog-info\
    \ xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n                   version=\"\
    3\"\n                   state=\"partial\"\n                   entity=\"sip:alice@example.com\"\
    >\n        <dialog id=\"as7d900as8\" call-id=\"a84b4c76e66710\"\n            \
    \    local-tag=\"1928301774\" remote-tag=\"hh76a\"\n                direction=\"\
    initiator\">\n          <state>confirmed</state>\n        </dialog>\n      </dialog-info>\n\
    \   32 seconds later, the other early dialog terminates because no 2xx\n   response\
    \ has been received for it.  This implies that it was\n   successfully cancelled,\
    \ and therefore the following notification is\n   sent:\n      <?xml version=\"\
    1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n   \
    \                version=\"4\"\n                   state=\"partial\"\n       \
    \            entity=\"sip:alice@example.com\">\n        <dialog id=\"as7d900as8\"\
    \ call-id=\"a84b4c76e66710\"\n                local-tag=\"1928301774\" remote-tag=\"\
    hh76a\"\n                direction=\"initiator\">\n          <state event=\"cancelled\"\
    >terminated</state>\n        </dialog>\n      </dialog-info>\n"
- title: 6.2.  Emulating a Shared-Line Phone System
  contents:
  - "6.2.  Emulating a Shared-Line Phone System\n   The following example shows how\
    \ a SIP telephone user agent can\n   provide detailed state information and also\
    \ emulate a shared-line\n   telephone system (the phone \"lies\" about having\
    \ a dialog while it is\n   merely offhook).\n   Idle:\n      <?xml version=\"\
    1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n   \
    \                version=\"0\" state=\"full\"\n                   entity=\"sip:alice@example.com\"\
    >\n      </dialog-info>\n   Seized:\n      <?xml version=\"1.0\"?>\n      <dialog-info\
    \ xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n                   version=\"\
    1\" state=\"partial\"\n                   entity=\"sip:alice@example.com\">\n\
    \        <dialog id=\"as7d900as8\">\n          <state>trying</state>\n       \
    \ </dialog>\n      </dialog-info>\n   Dialing:\n      <?xml version=\"1.0\"?>\n\
    \      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n           \
    \        version=\"2\" state=\"partial\"\n                   entity=\"sip:alice@example.com\"\
    >\n        <dialog id=\"as7d900as8\" call-id=\"a84b4c76e66710\"\n            \
    \    local-tag=\"1928301774\" direction=\"initiator\">\n          <state>trying</state>\n\
    \          <local>\n            <identity display=\"Alice Smith\">\n         \
    \      sip:alice@example.com\n            </identity>\n            <target uri=\"\
    sip:alice@pc33.example.com\"/>\n          </local>\n          <remote>\n     \
    \       <identity>sip:bob@example.net</identity>\n          </remote>\n      \
    \  </dialog>\n      </dialog-info>\n   Ringing:\n      <?xml version=\"1.0\"?>\n\
    \      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n           \
    \        version=\"3\" state=\"partial\"\n                   entity=\"sip:alice@example.com\"\
    >\n        <dialog id=\"as7d900as8\" call-id=\"a84b4c76e66710\"\n            \
    \    local-tag=\"1928301774\"\n                remote-tag=\"07346y131\" direction=\"\
    initiator\">\n          <state code=\"180\">early</state>\n          <remote>\n\
    \            <target uri=\"sip:bobster@host2.example.net\"/>\n          </remote>\n\
    \        </dialog>\n      </dialog-info>\n   Answered (by voicemail):\n      <?xml\
    \ version=\"1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n                   version=\"4\" state=\"partial\"\n                   entity=\"\
    sip:alice@example.com\">\n        <dialog id=\"as7d900as8\" call-id=\"a84b4c76e66710\"\
    \n                local-tag=\"1928301774\"\n                remote-tag=\"07346y131\"\
    \ direction=\"initiator\">\n          <state reason=\"cancelled\">terminated</state>\n\
    \        </dialog>\n        <dialog id=\"zxcvbnm3\" call-id=\"a84b4c76e66710\"\
    \n                local-tag=\"1928301774\"\n                remote-tag=\"8736347\"\
    \ direction=\"initiator\">\n          <state code=\"200\">confirmed</state>\n\
    \          <remote>\n            <target uri=\"sip:bob-is-not-here@vm.example.net\"\
    >\n              <param pname=\"actor\" pval=\"msg-taker\"/>\n              <param\
    \ pname=\"automaton\" pval=\"true\"/>\n              <param pname=\"+sip.byeless\"\
    \ pval=\"true\"/>\n            </target>\n          </remote>\n        </dialog>\n\
    \      </dialog-info>\n   Alice would rather talk to Bob's assistant (Cathy Jones)\
    \ than to\n   Bob's voicemail.  She indicates this preference by pressing a key\n\
    \   (perhaps \"0\" in North America or \"9\" in Europe).  Bob's voicemail\n  \
    \ system then acts on this keypress by transferring [20] Alice's call\n   to Cathy's\
    \ AOR.\n      <?xml version=\"1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\
    \n                   version=\"5\" state=\"partial\"\n                   entity=\"\
    sip:alice@example.com\">\n        <dialog id=\"zxcvbnm3\" call-id=\"a84b4c76e66710\"\
    \n                local-tag=\"1928301774\"\n                remote-tag=\"8736347\"\
    \ direction=\"initiator\">\n          <state reason=\"replaced\">terminated</state>\n\
    \        </dialog>\n        <dialog id=\"sfhjsjk12\" call-id=\"o34oii1\"\n   \
    \             local-tag=\"8903j4\"\n                remote-tag=\"78cjkus\" direction=\"\
    receiver\">\n          <state reason=\"replaced\">confirmed</state>\n        \
    \  <replaces call-id=\"a84b4c76e66710\"\n                local-tag=\"1928301774\"\
    \n                remote-tag=\"8736347\"/>\n          <referred-by>\n        \
    \    sip:bob-is-not-here@vm.example.net\n          </referred-by>\n          <local>\n\
    \            <target uri=\"sip:alice@pc33.example.com\"/>\n              <param\
    \ pname=\"+sip.rendering\" pval=\"yes\"/>\n          </local>\n          <remote>\n\
    \            <identity display=\"Cathy Jones\">\n               sip:cjones@example.net\n\
    \            </identity>\n            <target uri=\"sip:line3@host3.example.net\"\
    >\n              <param pname=\"actor\" pval=\"attendant\"/>\n              <param\
    \ pname=\"automaton\" pval=\"false\"/>\n            </target>\n          </remote>\n\
    \        </dialog>\n      </dialog-info>\n   Alice and Cathy talk, Cathy adds\
    \ Alice to a local conference:\n      <?xml version=\"1.0\"?>\n      <dialog-info\
    \ xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n                   version=\"\
    6\" state=\"partial\"\n                   entity=\"sip:alice@example.com\">\n\
    \        <dialog id=\"sfhjsjk12\" call-id=\"o34oii1\"\n                local-tag=\"\
    8903j4\"\n                remote-tag=\"78cjkus\" direction=\"receiver\">\n   \
    \       <state>confirmed</state>\n          <remote>\n            <target uri=\"\
    sip:confid-34579@host3.example.net\">\n              <param pname=\"isfocus\"\
    \ pval=\"true\"/>\n            </target>\n          </remote>\n        </dialog>\n\
    \      </dialog-info>\n   Alice puts Cathy on hold:\n      <?xml version=\"1.0\"\
    ?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n        \
    \           version=\"7\" state=\"partial\"\n                   entity=\"sip:alice@example.com\"\
    >\n        <dialog id=\"sfhjsjk12\" call-id=\"o34oii1\"\n                local-tag=\"\
    8903j4\"\n                remote-tag=\"78cjkus\" direction=\"receiver\">\n   \
    \       <state>confirmed</state>\n          <local>\n            <target uri=\"\
    sip:alice@pc33.example.com\"/>\n              <param pname=\"+sip.rendering\"\
    \ pval=\"no\"/>\n            </target>\n          </local>\n        </dialog>\n\
    \      </dialog-info>\n   Cathy hangs up:\n      <?xml version=\"1.0\"?>\n   \
    \   <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n              \
    \     version=\"8\" state=\"partial\"\n                   entity=\"sip:alice@example.com\"\
    >\n        <dialog id=\"sfhjsjk12\" call-id=\"o34oii1\"\n                local-tag=\"\
    8903j4\"\n                remote-tag=\"78cjkus\" direction=\"receiver\">\n   \
    \       <state reason=\"remote-bye\">terminated</state>\n        </dialog>\n \
    \       <dialog id=\"08hjh1345\">\n          <state>trying</state>\n        </dialog>\n\
    \      </dialog-info>\n   Alice hangs up:\n      <?xml version=\"1.0\"?>\n   \
    \   <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n              \
    \     version=\"9\" state=\"full\"\n                   entity=\"sip:alice@example.com\"\
    >\n      </dialog-info>\n"
- title: 6.3.  Minimal Dialog Information with Privacy
  contents:
  - "6.3.  Minimal Dialog Information with Privacy\n   The following example shows\
    \ the same user agent providing minimal\n   information to maintain privacy for\
    \ services like automatic callback.\n   Onhook:\n      <?xml version=\"1.0\"?>\n\
    \      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n           \
    \        version=\"0\" state=\"full\"\n                   entity=\"sip:alice@example.com\"\
    >\n      </dialog-info>\n   Offhook:  (implementation/policy choice for Alice\
    \ to transition to\n   this \"state\" when \"seized\", when Trying, when Proceeding,\
    \ or when\n   Confirmed.)\n      <?xml version=\"1.0\"?>\n      <dialog-info xmlns=\"\
    urn:ietf:params:xml:ns:dialog-info\"\n                   version=\"1\" state=\"\
    full\"\n                   entity=\"sip:alice@example.com\">\n        <dialog\
    \ id=\"1\">\n          <state>confirmed</state>\n        </dialog>\n      </dialog-info>\n\
    \   Onhook: (implementation/policy choice for Alice to transition to this\n  \
    \ \"state\" when terminated, or when no longer \"seized\")\n      <?xml version=\"\
    1.0\"?>\n      <dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"\n   \
    \                version=\"2\" state=\"full\"\n                   entity=\"sip:alice@example.com\"\
    >\n      </dialog-info>\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Subscriptions to dialog state can reveal sensitive\
    \ information.  For\n   this reason, Section 3.6 discusses authentication and\
    \ authorization\n   of subscriptions, and provides guidelines on sensible authorization\n\
    \   policies.  All implementations of this package MUST support the\n   digest\
    \ authentication mechanism.\n   Since the data in notifications is sensitive as\
    \ well, end-to-end SIP\n   encryption mechanisms using S/MIME MAY be used to protect\
    \ it.  User\n   agents that implement the dialog package SHOULD also implement\
    \ SIP\n   over TLS [15] and the sips: scheme.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document registers a new MIME type, application/dialog-info+xml;\n\
    \   a new XML namespace; and two new media feature parameters in the SIP\n   tree.\n"
- title: 8.1.  MIME Registration for application/dialog-info+xml Type
  contents:
  - "8.1.  MIME Registration for application/dialog-info+xml Type\n   MIME media type\
    \ name: application\n   MIME subtype name: dialog-info+xml\n   Mandatory parameters:\
    \ none\n   Optional parameters: Same as charset parameter application/xml as\n\
    \      specified in RFC 3023 [8].\n   Encoding considerations: Same as encoding\
    \ considerations of\n      application/xml as specified in RFC 3023 [8].\n   Security\
    \ considerations: See Section 10 of RFC 3023 [8] and Section 7\n      of this\
    \ specification.\n   Interoperability considerations: none.\n   Published specification:\
    \ This document.\n   Applications that use this media type: This document type\
    \ has been\n      used to support SIP applications such as call return and\n \
    \     auto-conference.\n   Additional Information:\n      Magic Number: None\n\
    \      File Extension: .xml\n      Macintosh file type code: \"TEXT\"\n   Personal\
    \ and email address for further information: Jonathan\n      Rosenberg, <jdrosen@jdrosen.net>\n\
    \   Intended usage: COMMON\n   Author/Change controller: The IETF.\n"
- title: 8.2.  URN Sub-Namespace Registration for
  contents:
  - "8.2.  URN Sub-Namespace Registration for\n      urn:ietf:params:xml:ns:dialog-info\n\
    \   This section registers a new XML namespace, per the guidelines in\n   [7].\n\
    \   URI: The URI for this namespace is\n      urn:ietf:params:xml:ns:dialog-info.\n\
    \   Registrant Contact: The IESG, <iesg@ietf.org>\n   XML:\n      BEGIN\n    \
    \  <?xml version=\"1.0\"?>\n      <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic\
    \ 1.0//EN\"\n                \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n      <html xmlns=\"http://www.w3.org/1999/xhtml\">\n      <head>\n       \
    \ <meta http-equiv=\"content-type\"\n           content=\"text/html;charset=iso-8859-1\"\
    />\n        <title>Dialog Information Namespace</title>\n      </head>\n     \
    \ <body>\n        <h1>Namespace for Dialog Information</h1>\n        <h2>urn:ietf:params:xml:ns:dialog-info</h2>\n\
    \        <p>See <a href=\"ftp://ftp.rfc-editor.org/in-notes/rfc4235.txt\">\n \
    \            RFC4235</a>.</p>\n      </body>\n      </html>\n      END\n"
- title: 8.3.  Schema Registration
  contents:
  - "8.3.  Schema Registration\n   This specification registers a schema, per the\
    \ guidelines in [7].\n      URI: urn:ietf:params:xml:schema:dialog-info\n   Registrant\
    \ Contact: The IESG, <iesg@ietf.org>\n      XML: The XML can be found as the sole\
    \ content of Section 4.4.\n"
- title: 8.4.  Media Feature Parameter Registration
  contents:
  - "8.4.  Media Feature Parameter Registration\n   This section registers two new\
    \ media feature tags, per the procedures\n   defined in RFC 2506 [14].  The tags\
    \ are placed into the sip tree,\n   which is defined in [10].\n"
- title: 8.4.1. Media Feature Tag sip.byeless
  contents:
  - "8.4.1. Media Feature Tag sip.byeless\n       Media feature tag name sip.byeless\n\
    \   ASN.1 Identifier 19\n   Summary of the media feature indicated by this tag:\
    \ This feature tag\n   is a boolean flag.  When set it indicates that the device\
    \ is\n   incapable of terminating a session autonomously.\n   Values appropriate\
    \ for use with this feature tag: Boolean.\n   The feature tag is intended primarily\
    \ for use in the following\n   applications, protocols, services, or negotiation\
    \ mechanisms: This\n   feature tag is most useful in a communications application\
    \ for\n   describing the capabilities of an application, such as an\n   announcement\
    \ service, recording service, conference, or call center.\n   Examples of typical\
    \ use: Call centers and media services.\n   Related standards or documents: RFC\
    \ 4235\n   Security Considerations: This media feature tag can be used in ways\n\
    \   that affect application behaviors or may reveal private information.\n   For\
    \ example, a conferencing or other application may decide to\n   terminate a call\
    \ prematurely if this media feature tag is set.\n   Therefore, if an attacker\
    \ can modify the values of this tag, they may\n   be able to affect the behavior\
    \ of applications.  As a result of this,\n   applications that utilize this media\
    \ feature tag SHOULD provide a\n   means for ensuring its integrity.  Similarly,\
    \ this feature tag should\n   only be trusted as valid when it comes from the\
    \ user or user agent\n   described by the tag.  As a result, protocols for conveying\
    \ this\n   feature tag SHOULD provide a mechanism for guaranteeing authenticity.\n"
- title: 8.4.2.  Media Feature Tag sip.rendering
  contents:
  - "8.4.2.  Media Feature Tag sip.rendering\n   Media feature tag name: sip.rendering\n\
    \   ASN.1 Identifier: 20\n   Summary of the media feature indicated by this tag:\
    \ This feature tag\n      contains one of three string values indicating if the\
    \ device is\n      rendering any media from the current session (\"yes\"), none\
    \ of the\n      media from the current session (\"no\"), or if this status is\
    \ not\n      known to the device (\"unknown\").\n   Values appropriate for use\
    \ with this feature tag: String.\n   The feature tag is intended primarily for\
    \ use in the following\n      applications, protocols, services, or negotiation\
    \ mechanisms: This\n      feature tag is most useful in a communications application,\
    \ for\n      describing the state of a device (such as a phone or PDA) during\
    \ a\n      multimedia session.\n   Examples of typical use: Conferencing, telephone\
    \ shared-line\n      emulation, and presence applications.\n   Related standards\
    \ or documents: RFC 4235\n   Security Considerations: This media feature tag can\
    \ be used in ways\n      that affect application behaviors or may reveal private\n\
    \      information.  For example, a conferencing or other application may\n  \
    \    decide to terminate a call prematurely if this media feature tag\n      is\
    \ set to \"no\".  Therefore, if an attacker can modify the values\n      of this\
    \ tag, they may be able to affect the behavior of\n      applications.  As a result\
    \ of this, applications that utilize this\n      media feature tag SHOULD provide\
    \ a means for ensuring its\n      integrity.  Similarly, this feature tag should\
    \ only be trusted as\n      valid when it comes from the user or user agent described\
    \ by the\n      tag.  As a result, protocols for conveying this feature tag SHOULD\n\
    \      provide a mechanism for guaranteeing authenticity.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Sean Olson for his comments.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [1]   Roach, A.B., \"Session Initiation Protocol\
    \ (SIP)-Specific Event\n         Notification\", RFC 3265, June 2002.\n   [2]\
    \   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n         Peterson,\
    \ J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n         Session Initiation\
    \ Protocol\", RFC 3261, June 2002.\n   [3]   Rosenberg, J., \"The Session Initiation\
    \ Protocol (SIP) UPDATE\n         Method\", RFC 3311, October 2002.\n   [4]  \
    \ Paoli, J., Sperberg-McQueen, C., Bray, T., and E. Maler,\n         \"Extensible\
    \ Markup Language (XML) 1.0 (Second Edition)\", W3C\n         FirstEdition REC-xml-20001006,\
    \ October 2000.\n   [5]   Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n   [6]\
    \   Moats, R., \"A URN Namespace for IETF Documents\", RFC 2648,\n         August\
    \ 1999.\n   [7]   Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n\
    \         January 2004.\n   [8]   Murata, M., St. Laurent, S., and D. Kohn, \"\
    XML Media Types\",\n         RFC 3023, January 2001.\n   [9]   Bradner, S., \"\
    Key words for use in RFCs to Indicate Requirement\n         Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [10]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\
    \ \"Indicating\n         User Agent Capabilities in the Session Initiation Protocol\n\
    \         (SIP)\", RFC 3840, August 2004.\n   [11]  Sparks, R., \"The Session\
    \ Initiation Protocol (SIP) Referred-By\n         Mechanism\", RFC 3892, September\
    \ 2004.\n   [12]  Sparks, R., \"The Session Initiation Protocol (SIP) Refer\n\
    \         Method\", RFC 3515, April 2003.\n   [13]  Mahy, R., Biggs, B., and R.\
    \ Dean, \"The Session Initiation\n         Protocol (SIP) \"Replaces\" Header\"\
    , RFC 3891, September 2004.\n   [14]  Holtman, K., Mutz, A., and T. Hardie, \"\
    Media Feature Tag\n         Registration Procedure\", BCP 31, RFC 2506, March\
    \ 1999.\n   [15]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC\n\
    \         2246, January 1999.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [16]  Rosenberg, J., \"A Presence Event Package\
    \ for the Session\n         Initiation Protocol (SIP)\", RFC 3856, August 2004.\n\
    \   [17]  Rosenberg, J., \"A Watcher Information Event Template-Package\n    \
    \     for the Session Initiation Protocol (SIP)\", RFC 3857, August\n        \
    \ 2004.\n   [18]  Mahy, R., \"A Message Summary and Message Waiting Indication\n\
    \         Event Package for the Session Initiation Protocol (SIP)\", RFC\n   \
    \      3842, August 2004.\n   [19]  Rosenberg, J., Peterson, J., Schulzrinne,\
    \ H., and G. Camarillo,\n         \"Best Current Practices for Third Party Call\
    \ Control (3pcc) in\n         the Session Initiation Protocol (SIP)\", BCP 85,\
    \ RFC 3725, April\n         2004.\n   [20]  Sparks, R., \"Session Initiation Protocol\
    \ Call Control -\n         Transfer\", Work in Progress, July 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   Cisco Systems\n   600 Lanidex Plaza\n\
    \   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@cisco.com\n\
    \   URI:   http://www.jdrosen.net\n   Henning Schulzrinne\n   Columbia University\n\
    \   M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY  10027\n   US\n   EMail:\
    \ schulzrinne@cs.columbia.edu\n   URI:   http://www.cs.columbia.edu/~hgs\n   Rohan\
    \ Mahy (editor)\n   SIP Edge LLC\n   EMail: rohan@ekabal.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
