- title: __initial_text__
  contents:
  - '             A Usage for Shared Resources in RELOAD (ShaRe)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a REsource LOcation And Discovery (RELOAD)\n\
    \   Usage for managing shared write access to RELOAD Resources.  Shared\n   Resources\
    \ in RELOAD (ShaRe) form a basic primitive for enabling\n   various coordination\
    \ and notification schemes among distributed\n   peers.  Access in ShaRe is controlled\
    \ by a hierarchical trust\n   delegation scheme maintained within an access list.\
    \  A new\n   USER-CHAIN-ACL access policy allows authorized peers to write a\n\
    \   Shared Resource without owning its corresponding certificate.  This\n   specification\
    \ also adds mechanisms to store Resources with a variable\n   name that is useful\
    \ whenever peer-independent rendezvous processes\n   are required.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8076.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Shared Resources in RELOAD  . . . . . . . . . . . . . .\
    \ . . .   5\n     3.1.  Mechanisms for Isolating Stored Data  . . . . . . . .\
    \ . .   6\n   4.  Access Control List Definition  . . . . . . . . . . . . . .\
    \ .   7\n     4.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .\
    \   7\n     4.2.  Data Structure  . . . . . . . . . . . . . . . . . . . . .  \
    \ 9\n   5.  Extension for Variable Resource Names . . . . . . . . . . . .  10\n\
    \     5.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .  10\n  \
    \   5.2.  Data Structure  . . . . . . . . . . . . . . . . . . . . .  11\n    \
    \ 5.3.  Overlay Configuration Document Extension  . . . . . . . .  12\n   6. \
    \ Access Control to Shared Resources  . . . . . . . . . . . . .  13\n     6.1.\
    \  Granting Write Access . . . . . . . . . . . . . . . . . .  13\n     6.2.  Revoking\
    \ Write Access . . . . . . . . . . . . . . . . . .  14\n     6.3.  Validating\
    \ Write Access through an ACL  . . . . . . . . .  14\n     6.4.  Operations of\
    \ Storing Peers . . . . . . . . . . . . . . .  15\n     6.5.  Operations of Accessing\
    \ Peers . . . . . . . . . . . . . .  16\n     6.6.  USER-CHAIN-ACL Access Policy\
    \  . . . . . . . . . . . . . .  16\n   7.  ACCESS-CONTROL-LIST Kind Definition\
    \ . . . . . . . . . . . . .  17\n   8.  Security Considerations . . . . . . .\
    \ . . . . . . . . . . . .  17\n     8.1.  Resource Exhaustion . . . . . . . .\
    \ . . . . . . . . . . .  17\n     8.2.  Malicious or Misbehaving Storing Peer\
    \ . . . . . . . . . .  18\n     8.3.  Trust Delegation to a Malicious or Misbehaving\
    \ Peer . . .  18\n     8.4.  Privacy Issues  . . . . . . . . . . . . . . . . .\
    \ . . . .  18\n   9.  IANA Considerations . . . . . . . . . . . . . . . . . .\
    \ . . .  19\n     9.1.  Access Control Policy . . . . . . . . . . . . . . . .\
    \ . .  19\n     9.2.  Data Kind-ID  . . . . . . . . . . . . . . . . . . . . .\
    \ .  19\n     9.3.  XML Namespace Registration  . . . . . . . . . . . . . . .\
    \  19\n   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  20\n\
    \     10.1.  Normative References . . . . . . . . . . . . . . . . . .  20\n  \
    \   10.2.  Informative References . . . . . . . . . . . . . . . . .  20\n   Acknowledgments\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  21\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC6940] defines the base protocol for REsource LOcation\
    \ And\n   Discovery (RELOAD), which allows for application-specific extensions\n\
    \   by Usages.  The present document defines such a RELOAD Usage for\n   managing\
    \ shared write access to RELOAD Resources and a mechanism to\n   store Resources\
    \ with variable names.  The Usage for Shared Resources\n   in RELOAD (ShaRe) enables\
    \ overlay users to share their exclusive\n   write access to specific Resource/Kind\
    \ pairs with others.  Shared\n   Resources form a basic primitive for enabling\
    \ various coordination\n   and notification schemes among distributed peers. \
    \ Write permission\n   is controlled by an Access Control List (ACL) Kind that\
    \ maintains a\n   chain of Authorized Peers for a particular Shared Resource.\
    \  A newly\n   defined USER-CHAIN-ACL access control policy enables shared write\n\
    \   access in RELOAD.\n   The Usage for Shared Resources in RELOAD is designed\
    \ for jointly\n   coordinated group applications among distributed peers (e.g.,\
    \ third-\n   party registration, see [RFC7904], or distributed conferencing).\
    \  Of\n   particular interest are rendezvous processes, where a single\n   identifier\
    \ is linked to multiple, dynamic instances of a distributed\n   cooperative service.\
    \  Shared write access is based on a trust\n   delegation mechanism that transfers\
    \ the authorization to write a\n   specific Kind data by storing logical Access\
    \ Control Lists.  An ACL\n   contains the ID of the Kind to be shared and contains\
    \ trust\n   delegations from one authorized to another (previously unauthorized)\n\
    \   user.\n   Shared write access augments the RELOAD security model, which is\n\
    \   based on the restriction that peers are only allowed to write\n   resources\
    \ at a small set of well-defined locations (Resource-IDs) in\n   the overlay.\
    \  Using the standard access control rules in RELOAD,\n   these locations are\
    \ bound to the username or Node-ID in the peer's\n   certificate.  This document\
    \ extends the base policies to enable a\n   controlled write access for multiple\
    \ users to a common Resource-ID.\n   Additionally, this specification defines\
    \ an optional mechanism to\n   store Resources with a variable Resource Name.\
    \  It enables the\n   storage of Resources whose name complies to a specific pattern.\n\
    \   Definition of the pattern is arbitrary, but it must contain the\n   username\
    \ of the Resource creator.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This document uses the terminology and definitions from the RELOAD\n   base\
    \ [RFC6940] and [RFC7890], in particular the RELOAD Usage,\n   Resource, and Kind.\
    \  Additionally, the following terms are used:\n   Shared Resource:  The term\
    \ \"Shared Resource\" in this document defines\n      a RELOAD Resource with its\
    \ associated Kinds that can be written or\n      overwritten by multiple RELOAD\
    \ users following the specifications\n      in this document.\n   Access Control\
    \ List:  The term \"Access Control List\" in this document\n      defines a logical\
    \ list of RELOAD users allowed to write a specific\n      RELOAD Resource/Kind\
    \ pair by following the specifications in this\n      document.  The list items\
    \ are stored as Access Control List Kinds\n      that map trust delegations from\
    \ user A to user B, where A is\n      allowed to write a Shared Resource and the\
    \ Access Control List,\n      while B is a user that obtains write access to specified\
    \ Kinds\n      from A.\n   Resource Owner:  The term \"Resource Owner\" in this\
    \ document defines a\n      RELOAD peer that initially stored a Resource to be\
    \ shared.  The\n      Resource Owner possesses the RELOAD certificate that grants\
    \ write\n      access to a specific Resource/Kind pair using the RELOAD\n    \
    \  certificate-based access control policies.\n   Authorized Peer:  The term \"\
    Authorized Peer\" in this document defines\n      a RELOAD peer that was granted\
    \ write access to a Shared Resource\n      by permission of the Resource Owner\
    \ or another Authorized Peer.\n"
- title: 3.  Shared Resources in RELOAD
  contents:
  - "3.  Shared Resources in RELOAD\n   A RELOAD user that owns a certificate for\
    \ writing at a specific\n   overlay location can maintain one or more RELOAD Kinds\
    \ that are\n   designated for a non-exclusive write access shared with other RELOAD\n\
    \   users.  The mechanism to share those Resource/Kind pairs with a group\n  \
    \ of users consists of two basic steps:\n   1.  Storage of the Resource/Kind pairs\
    \ to be shared.\n   2.  Storage of an Access Control List (ACL) associated with\
    \ those\n       Kinds.\n   ACLs are created by the Resource Owner and contain\
    \ ACL items, each\n   delegating the permission of writing the shared Kind to\
    \ a specific\n   user called the \"Authorized Peer\".  For each shared Kind data,\
    \ its\n   Resource owner stores a root item that initiates an Access Control\n\
    \   List.  Trust delegation to the Authorized Peer can include the right\n   to\
    \ further delegate the write permission, enabling a tree of trust\n   delegations\
    \ with the Resource Owner as trust anchor at its root.\n   The Resource/Kind pair\
    \ to be shared can be any RELOAD Kind that\n   complies to the following specifications:\n\
    \   Isolated Data Storage:  To prevent concurrent writing from race\n      conditions,\
    \ each data item stored within a Shared Resource SHALL\n      be exclusively maintained\
    \ by the RELOAD user who created it.\n      Hence, Usages that allow the storage\
    \ of Shared Resources are\n      REQUIRED to use either the array or dictionary\
    \ data model and\n      apply additional mechanisms for isolating data as described\
    \ in\n      Section 3.1.\n   Access Control Policy:  To ensure write access to\
    \ Shared Resource by\n      Authorized Peers, each Usage MUST use the USER-CHAIN-ACL\
    \ access\n      policy as described in Section 6.6.\n   Resource Name Extension:\
    \  To enable Shared Resources to be stored\n      using a variable resource name,\
    \ this document defines an optional\n      ResourceNameExtension structure.  It\
    \ contains the Resource Name of\n      the Kind data to be stored and allows any\
    \ receiver of a shared\n      data to validate whether the Resource Name hashes\
    \ to the Resource-\n      ID.  The ResourceNameExtension is made optional by configuration.\n\
    \      The ResourceNameExtension field is only present in the Kind data\n    \
    \  structure when configured in the corresponding kind-block of the\n      overlay\
    \ configuration document (for more details, see\n      Section 5.3).  If the configuration\
    \ allows variable resource\n      names, a Kind using the USER-CHAIN-ACL policy\
    \ MUST use the\n      ResourceNameExtension as the initial field within the Kind\
    \ data\n      structure definition.  Otherwise, the Kind data structure does not\n\
    \      contain the ResourceNameExtension structure.\n"
- title: 3.1.  Mechanisms for Isolating Stored Data
  contents:
  - "3.1.  Mechanisms for Isolating Stored Data\n   This section defines mechanisms\
    \ to avoid race conditions while\n   concurrently writing an array or dictionary\
    \ of a Shared Resource.\n   If a dictionary is used in the Shared Resource, the\
    \ dictionary key\n   MUST be the Node-ID of the certificate that will be used\
    \ to sign the\n   stored data.  Thus, data access is bound to the unique ID holder,\
    \ and\n   write concurrency does not occur.\n   If the data model of the Shared\
    \ Resource is an array, each Authorized\n   Peer that chooses to write data SHALL\
    \ obtain its exclusive range of\n   the array indices.  The following algorithm\
    \ will generate an array\n   indexing scheme that avoids collisions:\n   1.  Obtain\
    \ the Node-ID of the certificate that will be used to sign\n       the stored\
    \ data.\n   2.  Take the least significant 24 bits of that Node-ID to prefix the\n\
    \       array index.\n   3.  Append an 8-bit individual index value to those 24\
    \ bits of the\n       Node-ID.\n   The resulting 32-bit long integer MUST be used\
    \ as the index for\n   storing an array entry in a Shared Resource.  The 24 bits\
    \ of the\n   Node-ID serve as a collision-resistant identifier.  The 8-bit\n \
    \  individual index remains under the control of a single Peer and can\n   be\
    \ incremented individually for further array entries.  In total,\n   each Peer\
    \ can generate 256 distinct entries for application-specific\n   use.\n   The\
    \ mechanism to create the array index inherits collision-resistance\n   from the\
    \ overlay hash function in use (e.g., SHA-1).  It is designed\n   to work reliably\
    \ for small sizes of groups as applicable to resource\n   sharing.  In the rare\
    \ event of a collision, the Storing Peer will\n   refuse to (over-)write the requested\
    \ array index and protect indexing\n   integrity as defined in Section 6.1.  A\
    \ Peer could rejoin the overlay\n   with a different Node-ID in such a case.\n"
- title: 4.  Access Control List Definition
  contents:
  - '4.  Access Control List Definition

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   An Access Control List (ACL) is a (self-managed) Shared Resource\
    \ that\n   contains a list of AccessControlListItem structures as defined in\n\
    \   Section 4.2.  Each entry delegates write access for a specific Kind\n   data\
    \ to a single RELOAD user.  An ACL enables the RELOAD user who is\n   authorized\
    \ to write a specific Resource-ID to delegate his exclusive\n   write access to\
    \ a specific Kind to further users of the same RELOAD\n   overlay.  Therefore,\
    \ each Access Control List data structure carries\n   the information about who\
    \ obtains write access, the Kind-ID of the\n   Resource to be shared, and whether\
    \ delegation includes write access\n   to the ACL itself.  The latter condition\
    \ grants the right to delegate\n   write access further for the Authorized Peer.\
    \  Access Control Lists\n   are stored at the same overlay location as the Shared\
    \ Resource and\n   use the RELOAD array data model.  They are initially created\
    \ by the\n   Resource Owner.\n   Figure 1 shows an example of an Access Control\
    \ List.  We omit the\n   res_name_ext field to simplify illustration.  The array\
    \ entry at\n   index 0x123abc01 displays the initial creation of an ACL for a\
    \ Shared\n   Resource of Kind-ID 1234 at the same Resource-ID.  It represents\
    \ the\n   root item of the trust delegation tree for this shared RELOAD Kind.\n\
    \   The root entry MUST contain the username of the Resource owner in the\n  \
    \ \"to_user\" field and can only be written by the owner of the public\n   key\
    \ certificate associated with this Resource-ID.  The\n   allow_delegation (ad)\
    \ flag for a root ACL item is set to 1 by\n   default.  The array index is generated\
    \ by using the mechanism for\n   isolating stored data as described in Section\
    \ 3.1.  Hence, the most\n   significant 24 bits of the array index (0x123abc)\
    \ are the least\n   significant 24 bits of the Node-ID of the Resource Owner.\n\
    \   The array item at index 0x123abc02 represents the first trust\n   delegation\
    \ to an Authorized Peer that is thus permitted to write to\n   the Shared Resource\
    \ of Kind-ID 1234.  Additionally, the Authorized\n   peer Alice is also granted\
    \ write access to the ACL as indicated by\n   the allow_delegation flag (ad) set\
    \ to 1.  This configuration\n   authorizes Alice to store further trust delegations\
    \ to the Shared\n   Resource, i.e., add items to the ACL.  On the contrary, index\n\
    \   0x456def01 illustrates trust delegation for Kind-ID 1234, in which\n   the\
    \ Authorized Peer Bob is not allowed to grant access to further\n   peers (ad\
    \ = 0).  Each Authorized Peer signs its ACL items by using\n   its own signer\
    \ identity along with its own private key.  This allows\n   other peers to validate\
    \ the origin of an ACL item and makes ownership\n   transparent.\n   To manage\
    \ Shared Resource access of multiple Kinds at a single\n   location, the Resource\
    \ Owner can create new ACL entries that refer to\n   another Kind-ID as shown\
    \ in array entry index 0x123abc03.  Note that\n   overwriting existing items in\
    \ an Access Control List with a change in\n   the Kind-ID revokes all trust delegations\
    \ in the corresponding\n   subtree (see Section 6.2).  Authorized Peers are only\
    \ enabled to\n   overwrite existing ACL item they own.  The Resource Owner is\
    \ allowed\n   to overwrite any existing ACL item, but should be aware of its\n\
    \   consequences on the trust delegation chain.\n         +------------------------------------------------------+\n\
    \         |                Access Control List                   |\n         +-----------+------------------------------+-----------+\n\
    \         |  #Index   |       Array Entries          | signed by |\n         +-----------+------------------------------+-----------+\n\
    \         | 123abc01  | to_user:Owner Kind:1234 ad:1 |   Owner   |\n         +-----------+------------------------------+-----------+\n\
    \         | 123abc02  | to_user:Alice Kind:1234 ad:1 |   Owner   |\n         +-----------+------------------------------+-----------+\n\
    \         | 123abc03  | to_user:Owner Kind:4321 ad:1 |   Owner   |\n         +-----------+------------------------------+-----------+\n\
    \         | 123abc04  | to_user:Carol Kind:4321 ad:0 |   Owner   |\n         +-----------+------------------------------+-----------+\n\
    \         |    ...    |           ...                |    ...    |\n         +-----------+------------------------------+-----------+\n\
    \         | 456def01  | to_user:Bob   Kind:1234 ad:0 |   Alice   |\n         +-----------+------------------------------+-----------+\n\
    \         |    ...    |           ...                |    ...    |\n         +-----------+------------------------------+-----------+\n\
    \     Figure 1: Simplified Example of an Access Control List, Including\n    \
    \  Entries for Two Different Kind-IDs and Varying Delegation (AD)\n          \
    \                    Configurations\n   Implementors of ShaRe should be aware\
    \ that the trust delegation in an\n   Access Control List need not be loop free.\
    \  Self-contained circular\n   trust delegation from A to B and B to A are syntactically\
    \ possible,\n   even though not very meaningful.\n"
- title: 4.2.  Data Structure
  contents:
  - "4.2.  Data Structure\n   The Kind data structure for the Access Control List\
    \ is defined as\n   follows:\n   struct {\n        /* res_name_ext is optional,\
    \ see documentation */\n        ResourceNameExtension  res_name_ext;\n       \
    \ opaque                 to_user<0..2^16-1>;\n        KindId                 kind;\n\
    \        Boolean                allow_delegation;\n   } AccessControlListItem;\n\
    \   The AccessControlListItem structure is composed of:\n   res_name_ext:  This\
    \ optional field contains the Resource Name of a\n      ResourceNameExtension\
    \ (see Section 5.2) to be used by a Shared\n      Resource with a variable resource\
    \ name.  This name is used by the\n      storing peer for validating, whether\
    \ a variable resources name\n      matches one of the predefined naming pattern\
    \ from the\n      configuration document for this Kind.  The presence of this\
    \ field\n      is bound to a variable resource name element in the corresponding\n\
    \      kind-block of the configuration document whose \"enable\" attribute\n \
    \     is set to true (see Section 5.3).  Otherwise, if the \"enable\"\n      attribute\
    \ is false, the res_name_ext field SHALL NOT be present in\n      the Kind data\
    \ structure.\n   to_user:  This field contains the username of the RELOAD peer\
    \ that\n      obtains write permission to the Shared Resource.\n   kind:  This\
    \ field contains the Kind-ID of the Shared Resource.\n   allow_delegation:  If\
    \ true, this Boolean flag indicates that the\n      Authorized Peer in the 'to_user'\
    \ field is allowed to add\n      additional entries to the ACL for the specified\
    \ Kind-ID.\n"
- title: 5.  Extension for Variable Resource Names
  contents:
  - '5.  Extension for Variable Resource Names

    '
- title: 5.1.  Overview
  contents:
  - "5.1.  Overview\n   In certain use cases, such as conferencing, it is desirable\
    \ to\n   increase the flexibility of a peer in using Resource Names beyond\n \
    \  those defined by the username or Node-ID fields in its certificate.\n   For\
    \ this purpose, this document presents the concept for variable\n   Resources\
    \ Names that enables providers of RELOAD instances to define\n   relaxed naming\
    \ schemes for overlay Resources.\n   Each RELOAD node uses a certificate to identify\
    \ itself using its\n   username (or Node-ID) while storing data under a specific\
    \ Resource-ID\n   (see Section 7.3 in [RFC6940]).  The specifications in this\
    \ document\n   scheme adhere to this paradigm, but enable a RELOAD peer to store\n\
    \   values of Resource Names that are derived from the username in its\n   certificate.\
    \  This is done by using a Resource Name with a variable\n   substring that still\
    \ matches the username in the certificate using a\n   pattern defined in the overlay\
    \ configuration document.  Thus, despite\n   being variable, an allowable Resource\
    \ Name remains tied to the\n   Owner's certificate.  A sample pattern might be\
    \ formed as follows:\n   Example Pattern:\n   .*-conf-$USER@$DOMAIN\n   When defining\
    \ the pattern, care must be taken to avoid conflicts\n   arising from two usernames\
    \ of which one is a substring of the other.\n   In such cases, the holder of the\
    \ shorter name could threaten to block\n   the resources of the longer-named peer\
    \ by choosing the variable part\n   of a Resource Name to contain the entire longer\
    \ username.  For\n   example, a \"*$USER\" pattern would allow user EVE to define\
    \ a resource\n   with name \"STEVE\" and to block the resource name for user STEVE\n\
    \   through this.  This problem can easily be mitigated by delimiting the\n  \
    \ variable part of the pattern from the username part by some fixed\n   string,\
    \ that by convention is not part of a username (e.g., the\n   \"-conf-\" in the\
    \ above Example).\n"
- title: 5.2.  Data Structure
  contents:
  - "5.2.  Data Structure\n   This section defines the optional ResourceNameExtension\
    \ structure for\n   every Kind that uses the USER-CHAIN-ACL access control policy.\n\
    \   enum { pattern(1), (255)} ResourceNameType;\n   struct {\n     ResourceNameType\
    \ type;\n     uint16           length;\n     select(type) {\n         case pattern:\n\
    \           opaque     resource_name<0..2^16-1>;\n         /* Types can be extended\
    \ */\n     };\n   } ResourceNameExtension;\n   The content of the ResourceNameExtension\
    \ consists of:\n   length:  This field contains the length of the remaining data\n\
    \      structure.  It is only used to allow for further extensions to\n      this\
    \ data structure.\n   The content of the rest of the data structure depends of\
    \ the\n   ResourceNameType.  Currently, the only defined type is \"pattern\".\n\
    \   If the type is \"pattern\", then the following data structure contains\n \
    \  an opaque <0..2^16-1> field containing the Resource Name of the Kind\n   being\
    \ stored.  The type \"pattern\" further indicates that the Resource\n   Name MUST\
    \ match to one of the variable resource name patterns defined\n   for this Kind\
    \ in the configuration document.\n   The ResourceNameType enum and the ResourceNameExtension\
    \ structure can\n   be extended by further Usages to define other naming schemes.\n"
- title: 5.3.  Overlay Configuration Document Extension
  contents:
  - "5.3.  Overlay Configuration Document Extension\n   This section extends the overlay\
    \ configuration document by defining\n   new elements for patterns relating resource\
    \ names to usernames.  It\n   is noteworthy that additional constraints on the\
    \ syntax and semantic\n   of names can apply according to specific Usages.  For\
    \ example,\n   Address of Record (AOR) syntax restrictions apply when using P2PSIP\n\
    \   [RFC7904], while a more general naming is feasible in plain RELOAD.\n   The\
    \ <variable-resource-names> element serves as a container for one\n   or multiple\
    \ <pattern> sub-elements.  It is an additional parameter\n   within the kind-block\
    \ and has a boolean \"enable\" attribute that\n   indicates, if true, that the\
    \ overlay provider allows variable\n   resource names for this Kind.  The default\
    \ value of the \"enable\"\n   attribute is \"false\".  In the absence of a <variable-resource-names>\n\
    \   element for a Kind using the USER-CHAIN-ACL access policy (see\n   Section\
    \ 6.6), implementors MUST assume this default value.\n   A <pattern> element MUST\
    \ be present if the \"enabled\" attribute of its\n   parent element is set to\
    \ true.  Each <pattern> element defines a\n   pattern for constructing extended\
    \ resource names for a single Kind.\n   It is of type xsd:string and interpreted\
    \ as a regular expression\n   according to \"POSIX Extended Regular Expression\"\
    \ (see the\n   specifications in [IEEE-Posix]).  In this regular expression, $USER\n\
    \   and $DOMAIN are used as variables for the corresponding parts of the\n   string\
    \ in the certificate username field (with $USER preceding and\n   $DOMAIN succeeding\
    \ the '@').  Both variables MUST be present in any\n   given pattern definition.\
    \  Furthermore, variable parts in <pattern>\n   elements defined in the overlay\
    \ configuration document MUST remain\n   syntactically separated from the username\
    \ part (e.g., by a dedicated\n   delimiter) to prevent collisions with other names\
    \ of other users.  If\n   no pattern is defined for a Kind, if the \"enable\"\
    \ attribute is false,\n   or if the regular expression does not meet the requirements\
    \ specified\n   in this section, the allowable Resource Names are restricted to\
    \ the\n   username of the signer for Shared Resource.\n   The RELAX NG Grammar\
    \ for the Variable Resource Names Extension reads:\n   # VARIABLE RESOURCE URN\
    \ SUB-NAMESPACE\n   namespace share = \"urn:ietf:params:xml:ns:p2p:config-base:share\"\
    \n   # VARIABLE RESOURCE NAMES ELEMENT\n   kind-parameter &= element share:variable-resource-names\
    \ {\n       attribute enable { xsd:boolean },\n       # PATTERN ELEMENT\n    \
    \   element share:pattern { xsd:string }*\n   }?\n   Whitespace and case processing\
    \ follows the rules of [OASIS.relax_ng]\n   and XML Schema Datatypes [W3C.REC-xmlschema-2-20041028].\n"
- title: 6.  Access Control to Shared Resources
  contents:
  - '6.  Access Control to Shared Resources

    '
- title: 6.1.  Granting Write Access
  contents:
  - "6.1.  Granting Write Access\n   Write access to a Kind that is intended to be\
    \ shared with other\n   RELOAD users can be initiated solely by the Resource Owner.\
    \  A\n   Resource Owner can share RELOAD Kinds by using the following\n   procedure:\n\
    \   o  The Resource Owner stores an ACL root item at the Resource-ID of\n    \
    \  the Shared Resource.  The root item contains the\n      ResourceNameExtension\
    \ field (see Section 5.2), the username of the\n      Resource Owner and Kind-ID\
    \ of the Shared Resource.  The\n      allow_delegation flag is set to 1.  The\
    \ index of array data\n      structure MUST be generated as described in Section\
    \ 3.1.\n   o  Further ACL items for this Kind-ID stored by the Resource Owner\n\
    \      MAY delegate write access to Authorized Peers.  These ACL items\n     \
    \ contain the same resource name extension field, the username of\n      the Authorized\
    \ Peer, and the Kind-ID of the Shared Resource.\n      Optionally, the Resource\
    \ Owner sets the \"ad\" to 1 (the default\n      equals 0) to enable the Authorized\
    \ Peer to further delegate write\n      access.  For each succeeding ACL item,\
    \ the Resource Owner\n      increments its individual index value by one (see\
    \ Section 3.1) so\n      that items can be stored in the numerical order of the\
    \ array index\n      starting with the index of the root item.\n   An Authorized\
    \ Peer with delegation allowance (\"ad\"=1) can extend the\n   access to an existing\
    \ Shared Resource as follows:\n   o  An Authorized Peer can store additional ACL\
    \ items at the Resource-\n      ID of the Shared Resource.  These ACL items contain\
    \ the resource\n      name extension field, the username of the newly Authorized\
    \ Peer,\n      and the Kind-ID of the Shared Resource.  Optionally, the \"ad\"\
    \ flag\n      is set to 1 for allowing the newly Authorized Peer to further\n\
    \      delegate write access.  The array index MUST be generated as\n      described\
    \ in Section 3.1.  Each succeeding ACL item can be stored\n      in the numerical\
    \ order of the array index.\n   A store request by an Authorized Peer that attempts\
    \ to overwrite any\n   ACL item signed by another Peer is unauthorized and causes\
    \ an\n   Error_Forbidden response from the Storing Peer.  Such access\n   conflicts\
    \ could be caused by an array index collision.  However, the\n   probability of\
    \ a collision of two or more identical array indices\n   will be negligibly low\
    \ using the mechanism for isolating stored data\n   (see Section 3.1).\n"
- title: 6.2.  Revoking Write Access
  contents:
  - "6.2.  Revoking Write Access\n   Write permissions are revoked by storing a nonexistent\
    \ value (see\n   [RFC6940], Section 7.2.1) at the corresponding item of the Access\n\
    \   Control List.  Revoking a permission automatically invalidates all\n   delegations\
    \ performed by that user including all subsequent\n   delegations.  This allows\
    \ the invalidation of entire subtrees of the\n   delegations tree with only a\
    \ single operation.  Overwriting the root\n   item with a nonexistent value of\
    \ an Access List invalidates the\n   entire delegations tree.\n   An existing\
    \ ACL item MUST only be overwritten by the user who\n   initially stored the corresponding\
    \ entry, or by the Resource Owner\n   that is allowed to overwrite all ACL items\
    \ for revoking write access.\n   To protect the privacy of the users, the Resource\
    \ Owner SHOULD\n   overwrite all subtrees that have been invalidated.\n"
- title: 6.3.  Validating Write Access through an ACL
  contents:
  - "6.3.  Validating Write Access through an ACL\n   Access Control Lists are used\
    \ to transparently validate authorization\n   of peers for writing a data value\
    \ at a Shared Resource.  Thereby, it\n   is assumed that the validating peer is\
    \ in possession of the complete\n   and most recent ACL for a specific Resource/Kind\
    \ pair.  The\n   corresponding procedure consists of recursively traversing the\
    \ trust\n   delegation tree with strings compared as binary objects.  It proceeds\n\
    \   as follows:\n   1.  Obtain the username of the certificate used for signing\
    \ the data\n       stored at the Shared Resource.  This is the user who requested\n\
    \       the write operation.\n   2.  Validate that an item of the corresponding\
    \ ACL (i.e., for this\n       Resource/Kind pair) contains a \"to_user\" field\
    \ whose value equals\n       the username obtained in step 1.  If the Shared Resource\
    \ under\n       examination is an Access Control List Kind, further validate if\n\
    \       the \"ad\" flag is set to 1.\n   3.  Select the username of the certificate\
    \ that was used to sign the\n       ACL item obtained in the previous step.\n\
    \   4.  Validate that an item of the corresponding ACL contains a\n       \"to_user\"\
    \ field whose value equals the username obtained in step\n       3.  Additionally,\
    \ validate that the \"ad\" flag is set to 1.\n   5.  Repeat steps 3 and 4 until\
    \ the \"to_user\" value is equal to the\n       username of the signer of the\
    \ ACL in the selected item.  This\n       final ACL item is expected to be the\
    \ root item of this ACL, which\n       MUST be further validated by verifying\
    \ that the root item was\n       signed by the owner of the ACL Resource.\n  \
    \ The trust delegation chain is valid if and only if all verification\n   steps\
    \ succeed.  In this case, the creator of the data value of the\n   Shared Resource\
    \ is an Authorized Peer.\n   Note that the ACL validation procedure can be omitted\
    \ whenever the\n   creator of data at a Shared Resource is the Resource Owner\
    \ itself.\n   The latter can be verified by its public key certificate as defined\n\
    \   in Section 6.6.\n"
- title: 6.4.  Operations of Storing Peers
  contents:
  - "6.4.  Operations of Storing Peers\n   Storing peers, at which Shared Resource\
    \ and ACL are physically\n   stored, are responsible for controlling storage attempts\
    \ to a Shared\n   Resource and its corresponding Access Control List.  To assert\
    \ the\n   USER-CHAIN-ACL access policy (see Section 6.6), a storing peer MUST\n\
    \   perform the access validation procedure described in Section 6.3 on\n   any\
    \ incoming store request using the most recent Access Control List\n   for every\
    \ Kind that uses the USER-CHAIN-ACL policy.  It SHALL further\n   ensure that\
    \ only the Resource Owner stores new ACL root items for\n   Shared Resources.\n"
- title: 6.5.  Operations of Accessing Peers
  contents:
  - "6.5.  Operations of Accessing Peers\n   Accessing peers, i.e., peers that fetch\
    \ a Shared Resource, can\n   validate that the originator of a Shared Resource\
    \ was authorized to\n   store data at this Resource-ID by processing the corresponding\
    \ ACL.\n   To enable an accessing peer to perform the access validation\n   procedure\
    \ described in Section 6.3, it first needs to obtain the most\n   recent Access\
    \ Control List in the following way:\n   1.  Send a Stat request to the Resource-ID\
    \ of the Shared Resource to\n       obtain all array indexes of stored ACL Kinds\
    \ (as per [RFC6940],\n       Section 7.4.3.).\n   2.  Fetch all indexes of existing\
    \ ACL items at this Resource-ID by\n       using the array ranges retrieved in\
    \ the Stat request answer.\n   Peers can cache previously fetched Access Control\
    \ Lists up to the\n   maximum lifetime of an individual item.  Since stored values\
    \ could\n   have been modified or invalidated prior to their expiration, an\n\
    \   accessing peer SHOULD use a Stat request to check for updates prior\n   to\
    \ using the data cache.\n"
- title: 6.6.  USER-CHAIN-ACL Access Policy
  contents:
  - "6.6.  USER-CHAIN-ACL Access Policy\n   This document specifies an additional\
    \ access control policy to the\n   RELOAD base document [RFC6940].  The USER-CHAIN-ACL\
    \ policy allows\n   Authorized Peers to write a Shared Resource, even though they\
    \ do not\n   own the corresponding certificate.  Additionally, the USER-CHAIN-ACL\n\
    \   allows the storage of Kinds with a variable resource name that are\n   following\
    \ one of the specified naming patterns.  Hence, on an inbound\n   store request\
    \ on a Kind that uses the USER-CHAIN-ACL access policy,\n   the following rules\
    \ MUST be applied:\n   In the USER-CHAIN-ACL policy, a given value MUST NOT be\
    \ written or\n   overwritten, if neither one of USER-MATCH or USER-NODE-MATCH\n\
    \   (mandatory if the data model is dictionary) access policies of the\n   base\
    \ document [RFC6940] applies.\n   Additionally, the store request MUST be denied\
    \ if the signer's\n   certificate does not contain a username that matches to\
    \ the user and\n   domain portion in one of the variable resource name patterns\
    \ (cf.\n   Section 5) specified in the configuration document or if the hashed\n\
    \   Resource Name does not match the Resource-ID.  The Resource Name of\n   the\
    \ Kind to be stored MUST be taken from the mandatory\n   ResourceNameExtension\
    \ field in the corresponding Kind data structure.\n   If the access rights cannot\
    \ be verified according to the ACL\n   validation procedure described in Section\
    \ 6.3, the store request MUST\n   also be denied.\n   Otherwise, the store request\
    \ can be processed further.\n"
- title: 7.  ACCESS-CONTROL-LIST Kind Definition
  contents:
  - "7.  ACCESS-CONTROL-LIST Kind Definition\n   This section defines the ACCESS-CONTROL-LIST\
    \ Kind previously\n   described in this document.\n   Name:  ACCESS-CONTROL-LIST\n\
    \   Kind IDs:  The Resource Name for ACCESS-CONTROL-LIST Kind-ID is the\n    \
    \  Resource Name of the Kind that will be shared by using the ACCESS-\n      CONTROL-LIST\
    \ Kind.\n   Data Model:  The data model for the ACCESS-CONTROL-LIST Kind-ID is\n\
    \      array.  The array indexes are formed by using the mechanism for\n     \
    \ isolated stored data as described in Section 3.1.\n   Access Control:  USER-CHAIN-ACL\
    \ (see Section 6.6).\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In this section, we discuss security issues that\
    \ are relevant to the\n   usage of Shared Resources in RELOAD [RFC6940].\n"
- title: 8.1.  Resource Exhaustion
  contents:
  - "8.1.  Resource Exhaustion\n   Joining a RELOAD overlay inherently poses a certain\
    \ resource load on\n   a peer, because it has to store and forward data for other\
    \ peers.  In\n   common RELOAD semantics, each Resource-ID and thus position in\
    \ the\n   overlay, may only be written by a limited set of peers -- often even\n\
    \   only a single peer, which limits this burden.  In the case of Shared\n   Resources,\
    \ a single resource may be written by multiple peers who may\n   even write an\
    \ arbitrary number of entries (e.g., delegations in the\n   ACL).  This leads\
    \ to an enhanced use of resources at individual\n   overlay nodes.  The problem\
    \ of resource exhaustion can easily be\n   mitigated for Usages based on the ShaRe-Usage\
    \ by imposing\n   restrictions on size, i.e., <max-size> element for a certain\
    \ Kind in\n   the configuration document.\n"
- title: 8.2.  Malicious or Misbehaving Storing Peer
  contents:
  - "8.2.  Malicious or Misbehaving Storing Peer\n   The RELOAD overlay is designed\
    \ to operate despite the presence of a\n   small set of misbehaving peers.  This\
    \ is not different for Shared\n   Resources since a small set of malicious peers\
    \ does not disrupt the\n   functionality of the overlay in general, but may have\
    \ implications\n   for the peers needing to store or access information at the\
    \ specific\n   locations in the ID space controlled by a malicious peer.  A storing\n\
    \   peer could withhold stored data, which results in a denial of service\n  \
    \ to the group using the specific resource.  But it could not return\n   forged\
    \ data, since the validity of any stored data can be\n   independently verified\
    \ using the attached signatures.\n"
- title: 8.3.  Trust Delegation to a Malicious or Misbehaving Peer
  contents:
  - "8.3.  Trust Delegation to a Malicious or Misbehaving Peer\n   A Resource Owner\
    \ that erroneously delegated write access to a Shared\n   Resource for a misbehaving\
    \ peer enables this malicious member of the\n   overlay to interfere with the\
    \ corresponding group application in\n   several unwanted ways.  Examples of destructive\
    \ interferences range\n   from exhausting shared storage to dedicated application-specific\n\
    \   misuse.  Additionally, a bogus peer that was granted delegation\n   rights\
    \ may authorize further malicious collaborators to writing the\n   Shared Resource.\n\
    \   It is the obligation of the Resource Owner to bind trust delegation\n   to\
    \ apparent trustworthiness.  Additional measures to monitor proper\n   behavior\
    \ may be applied.  In any case, the Resource Owner will be\n   able to revoke\
    \ the trust delegation of an entire tree in a single\n   overwrite operation.\
    \  It further holds the right to overwrite any\n   malicious contributions to\
    \ the shared resource under misuse.\n"
- title: 8.4.  Privacy Issues
  contents:
  - "8.4.  Privacy Issues\n   All data stored in the Shared Resource is readable by\
    \ any node in the\n   overlay; thus, applications requiring privacy need to encrypt\
    \ the\n   data.  The ACL needs to be stored unencrypted; thus, the list members\n\
    \   of a group using a Shared Resource will always be publicly visible.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  Access Control Policy
  contents:
  - "9.1.  Access Control Policy\n   IANA has registered the following entry in the\
    \ \"RELOAD Access Control\n   Policies\" registry (cf. [RFC6940]) to represent\
    \ the USER-CHAIN-ACL\n   Access Control Policy, as described in Section 6.6.\n\
    \                     +-------------------+----------+\n                     |\
    \ Access Policy     |      RFC |\n                     +-------------------+----------+\n\
    \                     | USER-CHAIN-ACL    | RFC 8076 |\n                     +-------------------+----------+\n"
- title: 9.2.  Data Kind-ID
  contents:
  - "9.2.  Data Kind-ID\n   IANA has registered the following code point in the \"\
    RELOAD Data\n   Kind-ID\" registry (cf. [RFC6940]) to represent the ShaRe ACCESS-\n\
    \   CONTROL-LIST kind, as described in Section 7.\n             +----------------------+------------+----------+\n\
    \             | Kind                 |    Kind-ID |      RFC |\n             +----------------------+------------+----------+\n\
    \             | ACCESS-CONTROL-LIST  |        0x4 | RFC 8076 |\n             +----------------------+------------+----------+\n"
- title: 9.3.  XML Namespace Registration
  contents:
  - "9.3.  XML Namespace Registration\n   This document registers the following URI\
    \ for the config XML\n   namespace in the IETF XML registry defined in [RFC3688].\n\
    \   URI:  urn:ietf:params:xml:ns:p2p:config-base:share\n   Registrant Contact:\
    \  The IESG\n   XML:  N/A, the requested URI is an XML namespace\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [IEEE-Posix]\n              \"IEEE Standard for\
    \ Information Technology - Portable\n              Operating System Interface\
    \ (POSIX) - Part 2: Shell and\n              Utilities (Vol.  1)\", IEEE Std 1003.2-1992,\
    \ ISBN\n              1-55937-255-9, DOI 10.1109/IEEESTD.1993.6880751, January\n\
    \              1993, <http://ieeexplore.ieee.org/document/6880751/>.\n   [OASIS.relax_ng]\n\
    \              Clark, J. and M. Murata, \"RELAX NG Specification\",\n        \
    \      December 2001.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n       \
    \       DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC6940]  Jennings, C., Lowekamp, B., Ed., Rescorla, E., Baset, S.,\n   \
    \           and H. Schulzrinne, \"REsource LOcation And Discovery\n          \
    \    (RELOAD) Base Protocol\", RFC 6940, DOI 10.17487/RFC6940,\n             \
    \ January 2014, <http://www.rfc-editor.org/info/rfc6940>.\n   [W3C.REC-xmlschema-2-20041028]\n\
    \              Malhotra, A. and P. Biron, \"XML Schema Part 2: Datatypes\n   \
    \           Second Edition\", World Wide Web Consortium Recommendation\n     \
    \         REC-xmlschema-2-20041028, October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC7890]  Bryan, D., Matthews, P., Shim, E.,\
    \ Willis, D., and S.\n              Dawkins, \"Concepts and Terminology for Peer-to-Peer\
    \ SIP\n              (P2PSIP)\", RFC 7890, DOI 10.17487/RFC7890, June 2016,\n\
    \              <http://www.rfc-editor.org/info/rfc7890>.\n   [RFC7904]  Jennings,\
    \ C., Lowekamp, B., Rescorla, E., Baset, S.,\n              Schulzrinne, H., and\
    \ T. Schmidt, Ed., \"A SIP Usage for\n              REsource LOcation And Discovery\
    \ (RELOAD)\", RFC 7904,\n              DOI 10.17487/RFC7904, October 2016,\n \
    \             <http://www.rfc-editor.org/info/rfc7904>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This work was stimulated by fruitful discussions in the P2PSIP\n\
    \   working group and the SAM research group.  We would like to thank all\n  \
    \ active members for their constructive thoughts and feedback.  In\n   particular,\
    \ the authors would like to thank (in alphabetical order)\n   Emmanuel Baccelli,\
    \ Ben Campbell, Alissa Cooper, Lothar Grimm, Russ\n   Housley, Cullen Jennings,\
    \ Matt Miller, Peter Musgrave, Joerg Ott,\n   Marc Petit-Huguenin, Peter Pogrzeba,\
    \ and Jan Seedorf.  This work was\n   partly funded by the German Federal Ministry\
    \ of Education and\n   Research, projects HAMcast, Mindstone, and SAFEST.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alexander Knauf\n   HAW Hamburg\n   Berliner Tor 7\n \
    \  Hamburg  D-20099\n   Germany\n   Phone: +4940428758067\n   Email: alexanderknauf@gmail.com\n\
    \   Thomas C. Schmidt\n   HAW Hamburg\n   Berliner Tor 7\n   Hamburg  D-20099\n\
    \   Germany\n   Email: t.schmidt@haw-hamburg.de\n   URI:   http://inet.haw-hamburg.de/members/schmidt\n\
    \   Gabriel Hege\n   daviko GmbH\n   Schillerstr. 107\n   Berlin  D-10625\n  \
    \ Germany\n   Phone: +493043004344\n   Email: hege@daviko.com\n   Matthias Waehlisch\n\
    \   link-lab & FU Berlin\n   Hoenower Str. 35\n   Berlin  D-10318\n   Germany\n\
    \   Email: mw@link-lab.net\n   URI:   http://www.inf.fu-berlin.de/~waehl\n"
