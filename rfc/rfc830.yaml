- title: __initial_text__
  contents:
  - "             A Distributed System for Internet Name Service\n               \
    \               Zaw-Sing Su\n      |   This RFC proposes a distributed name service\
    \ for DARPA    |\n      |   Internet.  Its purpose is to focus discussion on the\
    \      |\n      |   subject.  It is hoped that a general consensus will      \
    \ |\n      |   emerge leading eventually to the adoption of standards.   |\n \
    \                            October 1982\n                           SRI International\n\
    \                         333 Ravenswood Avenue\n             A Distributed System\
    \ for Internet Name Service\n                            1   INTRODUCTION\n  \
    \   For many years, the ARPANET Naming Convention \"<user>@<host>\" has\nserved\
    \ its user community for its mail system.  The substring \"<host>\"\nhas been\
    \ used for other user applications such as file transfer (FTP)\nand terminal access\
    \ (Telnet).  With the advent of network\ninterconnection, this naming convention\
    \ needs to be generalized to\naccommodate internetworking.  The Internet Naming\
    \ Convention [1]\ndescribes a hierarchical naming structure for serving Internet\
    \ user\napplications such as SMTP for electronic mail, FTP and Telnet for file\n\
    transfer and terminal access.  It is an integral part of the network\nfacility\
    \ generalization to accommodate internetworking.\n     Realization of Internet\
    \ Naming Convention requires the\nestablishment of both naming authority and name\
    \ service.  In this\ndocument, we propose an architecture for a distributed System\
    \ for\nInternet Name Service (SINS).  We assume the reader's familiarity with\n\
    [1], which describes the Internet Naming Convention.\n     Internet Name Service\
    \ provides a network service for name\nresolution and resource negotiation for\
    \ the establishment of direct\ncommunication between a pair of source and destination\
    \ application\nprocesses.  The source application process is assumed to be in\n\
    possession of the destination name.  In order to establish\ncommunication, the\
    \ source application process requests for name service.\nThe SINS resolves the\
    \ destination name for its network address, and\nprovides negotiation for network\
    \ resources.  Upon completion of\nsuccessful name service, the source application\
    \ process provides the\ndestination address to the transport service for establishing\
    \ direct\ncommunication with the destination application process.\n          \
    \                    2   OVERVIEW\n2.1  System Organization\n     SINS is a distributed\
    \ system for name service.  It logically\nconsists of two parts: the domain name\
    \ service and the application\ninterface (Figure 1).  The domain name service\
    \ is an application\nindependent network service for the resolution of domain\
    \ names.  This\nresolution is provided through the cooperation among a set of\
    \ domain\nname servers (DNSs).  With each domain is associated a DNS.*  The reader\n\
    is referred to [2] for the specification of a domain name server.  As\nnoted in\
    \ [1], a domain is an administrative but not necessarily a\ntopological entity.\
    \  It is represented in the networks by its associated\nDNS.  The resolution of\
    \ a domain name results in the address of its\nassociated DNS.\n     Application\
    \                                   Application\n       Process              \
    \                         Process\n          |                               \
    \              |\n   SINS   |                                             |\n\
    \   -------|---------------------------------------------|-----  Application\n\
    \   |     AIP                                           AIP   |   Interface\n\
    \   |      |                                             |    |  . . . . . . .\n\
    \   |     DNS  - - -  DNS  - - -  DNS  - -  . . .  - -  DNS   |  Domain Name\n\
    \   -----------------------------------------------------------    Service\n \
    \          Figure 1   Separation of Application Interface\n     The application\
    \ interface provides mechanisms for resolution beyond\nthat of destination domain\
    \ and negotiation to ensure resource\navailability and compatibility.  Such negotiation\
    \ is sometimes referred\nto as the \"what-can-you-do-for-me\" negotiation.  The\
    \ application\ninterface isolates domain name service from application dependence.\
    \  It\nthus allows sharing of domain name service among various user\napplications.\n\
    \     The application interface consists of a set of application\ninterface processes\
    \ (AIPs) one for each endpoint domain.  For operation\nefficiency, the AIP is\
    \ assumed to be combined with its associated DNS\nforming an endpoint DNS (Figure\
    \ 2).\n       Application                                   Application\n    \
    \     Process                                       Process\n            |   \
    \                                          |\n     SINS   |                  \
    \                           |\n     -------|---------------------------------------------|-------\n\
    \     |   Endpoint                                      Endpoint  |\n     |  \
    \   DNS  - - -  DNS  - - -  DNS  - -  . . .  - -  DNS     |\n     |          \
    \                                                 |\n     -------------------------------------------------------------\n\
    \    Figure 2  Distribution of Name Service Components Among Domains\n--------------------\n\
    * For reasons such as reliability, more than one DNS per domain may be\nrequired.\
    \  They may be cooperating DNSs or identical for redundancy.  In\neither case,\
    \ without loss of generality we may logically view the\nassociation as one DNS\
    \ per domain.\n2.2  Domain Resolution\n     For name service, the source application\
    \ process presents to its\nlocal AIP the destination name, and the application\
    \ service it requests.\nFor most applications, the application service the source\
    \ application\nprocess requests would be the service it offers.  The destination\
    \ name\nis assumed to be fully qualified of the form:\n\t   <local name>@<domain>.<domain>.\
    \ ... .<domain>\nThe domains named in the concatenation are hierarchically related\
    \ [1].\nThe left-to-right string of simple names in the concatenation proceeds\n\
    from the most specific domain to the most general.  The concatenation of\ntwo\
    \ domains,\n\t\t... .<domain A>.<domain B>. ...\nimplies the one on the left,\
    \ domain A, to be an immediate member (i.e.,\nthe first-generation descendent)\
    \ of the one on the right, domain B.  The\nright-most simple name designates a\
    \ top-level domain, a first-generation\ndescendent of the naming universe.\n \
    \    For domain resolution, the AIP consults the domain name service.  It\npresents\
    \ the co-located DNS with the fully qualified domain\nspecification:\n\t\t<domain>.<domain>.\
    \ ... .<domain>\nThe DNSs participating in a resolution resolve the concatenation\
    \ from\nthe right.  The source endpoint DNS resolves the right-most simple name\n\
    and acts as a hub polling the other DNSs.  It resolves the right-most\nsimple\
    \ name into an address for the DNS of the specified top-level\ndomain, then polls\
    \ that DNS with a request for further resolution.  When\npolled, a DNS resolves\
    \ the next right-most simple domain name.  Upon\nsuccessful resolution, an intermediate\
    \ DNS may have a choice of either\nreturning the resulting address or forwarding\
    \ the request to the next\nDNS for continuing resolution.\nWhen a intermediate\
    \ DNS receives a reply from the next DNS, it must\nrespond to the request it has\
    \ received.  To simplify the domain name\nservice protocol, an intermediate DNS\
    \ is not allowed to act as a hub for\nfurther polling.\n2.3  Application Interface\n\
    \     Addressing for destination endpoint domain is in general not\nsufficient\
    \ for the source application process to establish direct\ncommunication with the\
    \ destination application process.  In order to\nestablish direct communication,\
    \ further addressing may be necessary.\nAddressing beyond destination endpoin\
    \ domain may be necessary when the\naddressing of application process cannot be\
    \ derived from the address of\nthe endpoint domain.  To provide such derivation\
    \ capability permanent\nbinding and universal binding convention, such as TCP\
    \ port number\n     Beyond addressing, negotiation for resource availability and\n\
    compatibility is often found necessary.  The application interface\nprovides a\
    \ \"what-can-you-do-for-me\" negotiation capability between the\nsource and destination\
    \ endpoint domains.  Such negotiation mechanisms\nprovided in this design include\
    \ those for the availability and\ncompatibility of transport service, e.g., TCP\
    \ or UDP, and application\nservice, e.g., SMTP for mail transport.  The availability\
    \ of such\nnegotiation service may allow dynamic binding and variations in system\n\
    design.\n     The application interface offers an integrated service for various\n\
    \"what-can-you-do-for-me\" negotiation capabilities.\n2.4  Example\n     Let us\
    \ assume that a request is made at ISID for remote file\ntransfer using NIFTP\
    \ to SRI-TSC.  The domain name for ISID is\nD.ISI.USC.ARPA,* and TSC.SRI.ARPA\
    \ for SRI-TSC.  The hierarchical\nrelationship between these two domains is as\
    \ depicted in Figure 3 below.\nThe NIFTP process (an application process) at ISID\
    \ forwards the domain\nname TSC.SRI.ARPA\" to the local AIP in domain D for name\
    \ service.  The\nAIP forwards the fully qualified domain name, \"TSC.SRI.ARPA\"\
    , to its co-\nlocated DNS for domain resolution.\n     ARPA, the right-most simple\
    \ name, is assumed to designate a top-\nlevel domain.  The DNS of D recognizes\
    \ this simple name, resolves it\ninto the address of the ARPA domain DNS, and\
    \ forwards the request to\nthat DNS with a pointer pointing to the next domain\
    \ \"SRI\".  The ARPA DNS\nrecognizes \"SRI\" as one of its subdomains, resolves\
    \ the address of the\nsubdomain's DNS.  It has a choice at this point whether\
    \ to return this\naddress to the source endpoint DNS or to forward the request\
    \ to the DNS\nof SRI.\n                                         naming\n     \
    \                                   universe\n                               \
    \       /          \\\n                               --- ARPA (DNS)\n       \
    \                      /       |\n                           /        SRI (DNS)\n\
    \                         /           |  \\\n                       USC (DNS)\
    \        TSC (DNS/AIP)\n                        |                |\n         \
    \               |          [TCP/FTP/RFT]\n                       ISI (DNS)\n \
    \                       |\n                        D (DNS/AIP)\n             \
    \         /   \\\n        [TCP/NIFTP/RFT]   [TCP/FTP/RFT]\n                  \
    \  |\n                  user\n--------------------\n* Domain names used in the\
    \ examples are for illustration purposes only.\nIf it returns the address, the\
    \ source endpoint DNS at D, would continue\npolling by forwarding the request\
    \ to the SRI DNS.  When the DNS of SRI\ndetects TSC as the last domain in the\
    \ concatenation, it resolves the\naddress for the DNS at TSC, and returns it to\
    \ the source DNS at domain\nD.  Upon receiving a successful domain resolution,\
    \ the source DNS returns\nthe obtained address to its associated AIP.\n     Since\
    \ the destination AIP is co-located at this address, the source\nAIP is able to\
    \ forward a request with the service designation\n\"TCP/NIFTP/RFT\" for \"what-can-you-do-for-me\"\
    \ negotiation.  Realizing\nthat within TSC there is no NIFTP but FTP provided\
    \ for remote file\ntransfer, the destination AIP would respond accordingly.  Since\
    \ ISID\nalso offers FTP service, the \"what-can-you-do-for-me\" negotiation may\n\
    conclude successfully.  The user request for file transfer may thus be\nsatisfied.\n\
    \                         3   SYSTEM COMPONENTS\n3.1  Component Processes\n  \
    \   The two basic distributed components of SINS are the endpoint DNS\nand the\
    \ intermediate DNS.  An endpoint DNS is associated with each\nendpoint domain.\
    \  An intermediate DNS is associated with a domain\nwithout any associated application\
    \ process.\n     The intermediate DNS is rather simple.  It has the resolution\n\
    capability for translating simple names of first-generation subdomains\nto addresses\
    \ of their associated DNS.  It also communicates with other\nDNS for domain resolution.\n\
    \     An endpoint DNS consists of an AIP and a source DNS.  The source\nDNS implements\
    \ the polling mechanism which communicates with other DNSs\nas a hub for polling.\
    \  It also has capability for the resolution of top-\nlevel domains.  It responds\
    \ to requests from the local AIP for domain\nresolution (Section 4.2.3).\n   \
    \  The major function of an AIP implements the intellegence of \"what-\ncan-you-do-for-me\"\
    \ negotiations.  A communication module realizes\nnegotiation exchanges between\
    \ the source and destination AIPs (Section\n4.2.2).  As an interface between the\
    \ application processes and the local\nDNS, it must also implement communication\
    \ capabilities for exchanges\nwith the DNS and the application processes.\n3.2\
    \  Databases for Name Resolution\n     There is a database associated with each\
    \ resolution module.  The\ndatabase associated with an endpoint domain contains\
    \ name-to-address\ncorrespondences for the top-level domains, first-generation\
    \ descendents\nof the naming universe.  It facilitates the endpoint DNS resolving\
    \ the\nright-most simple name of a fully-qualified domain specification.\n   \
    \  The database associated with an intermediate domain contains name-\nto-address\
    \ correspondences for the first-generation subdomains of this\ndomain.  Thus,\
    \ the required database contents among the intermediate DNS\ndatabases are disjoint,\
    \ and updates are local.\n     It is also noticed that with the implementation\
    \ of the SINS, there\nis no need for database format standardization.\n3.3  Caching\n\
    \     The component processes and resolution databases constitute the\nbasic System\
    \ for Internet Name Service.  The distributed components are\nrelated according\
    \ to the domain hierarchy.  The databases associated\nwith the endpoint domains\
    \ are all identical.  Containing only name-to-\naddress correspondence for top-level\
    \ domains, the endpoint database\nshould be rather small in size.  The disjoint\
    \ nature of intermediate DNS\ndatabases allows easy local updates.\n     However,\
    \ communications will be very inefficient if the Internet\nname service is called\
    \ for the establishment of every transaction.  A\nstandard solution to aleviate\
    \ such inefficiency is the use of caching.\n     Caching is a mechanism reusing\
    \ previous resolution results.  To\nexpedite establishment of communication, the\
    \ resolution results are\nstored for future reference.  We do not incorporate\
    \ caching as a\nstandard feature of the SINS.  However, we assume the use of caching\
    \ for\nefficient operations at individual implementor's discretion.\n4   INTER-COMPONENT\
    \ COMMUNICATIONS (THE INTERNET NAME SERVICE PROTOCOLS)\n     In this section,\
    \ we present a format specification for\ncorrespondences between various component\
    \ pairs.  For co-located\ncomponents, communication becomes interprocess, and\
    \ the exact format\nless important.  For inter-host communication, the format\
    \ specification\nhere defines a name service protocol.\n     The communicating\
    \ component pairs of concern here are application\nprocess/AIP, AIP/DNS, and AIP/AIP.\
    \  The communications employ\nrequest/response commands.  A single command structure\
    \ is adopted for\nall three pairs; while communications between a particular pair\
    \ may\nemploy a subset of the commands.  Such uniformity allows minimum\nprocessing\
    \ and maximum code sharing for implementation.\n4.1  Command Structure\n     The\
    \ basic command structure begins with two octets indicating\ncommand type and\
    \ the number of items in the command.  They are followed\nby the indicated number\
    \ of items.  The type of an item is indicated in\nits first octet, followed by\
    \ a one-octet content length, and then the\nitem content.  Required presence or\
    \ absence and order of the items for\neach component pair are specified in this\
    \ section.\n\tCommand Type   Number of Items\n\tItem Indicator   Content Length\
    \   Item Content\n          .\n          .\nCommand Type\n     This type coded\
    \ in binary number indicates whether this command is\na request, an affirmative\
    \ response, or some other type of response (see\nAppendix A for the command types\
    \ and their corresponding code).  This\ntype specification implies the presence\
    \ or absence and order of the\nfollowing items.\nNumber of Items\n     This number\
    \ is expressed in binary number.  It specifies the number\nof following items.\
    \  Owing to the possibility of a multiple response,\nthis number may vary for\
    \ a particular command.\nItem Indicator\n     This indicator defines the item\
    \ type.  The possible types include:\nservice, name, address, and comment.  The\
    \ type of an item implies its\ncontent structure.\nContent Length\n     This length\
    \ specification, in binary, indicates the length of the\nfollowing content in\
    \ octets.  The maximum can be specified is 255, thus\nthe maximum length of the\
    \ content.  However, this maximum may also be\nconstrained by the total length\
    \ of the command (Section 4.3).\nItem Content\n     The contents for different\
    \ items are:\n     Service -- Transport protocol/service protocol/service type\n\
    \                (ASCII). (See Appendix A for standard identifiers for\n     \
    \           service specifications.)\n     Name -- Whole or partial name string\
    \ according to Internet Naming\n             Convention [1] (ASCII).\n     Address\
    \ -- The address is presented in binary form.  In this\n                writeup,\
    \ double quotes, \" \", are used around decimal\n                values separated\
    \ by a space to represent octets of the\n                Parsing of the address\
    \ is implied by the specified\n                transport protocol.  In the case\
    \ of TCP, the first\n                four octets gives the 32-bit IP address,\
    \ the 5th octet\n                the IP-specific protocol number, and the 6th\
    \ the TCP or\n                UDP port number for the application service.\n \
    \    Comment -- The item is mostly optional.  Its presence may allow\n       \
    \         an intermediate server passing comment to the end user.\n          \
    \      Error comments explaining resolution failure is an\n                example\
    \ of its use.\n4.2  Command Specification\n     In this section, we define the\
    \ name service commands for the\nvarious communication pairs.\n4.2.1 Application\
    \ Process/AIP Communication\n     From the name service point of view, there is\
    \ no need for\ncommunication between the AIP and an application process at the\n\
    destination.  Thus, here we discuss communications at the originating\ndomain.\n\
    \     An application process initiates a dialogue by making a request for\nname\
    \ service to its local AIP.  It provides the requested application\nservice and\
    \ a destination name for resolution.\nREQUEST\n   Command Type   Number of Items\n\
    \   Service Indicator   Length   Transport Protocol/Service/Service Type\n   Name\
    \ Indicator   Name Length   Name String\nExamples:\n   1  2\n   3 13 TCP/SMTP/mail\n\
    \   1 21 Postel@F.ISI.USC.ARPA\n   1  2\n   3 13 TCP/NIFTP/RFT\n   1 12 TSC.SRI.ARPA\n\
    \     The first example is a resolution request for the name\n\"Postel@F.ISI.USC.ARPA\"\
    .  It is 21 octets in length.  The requested\napplication service is TCP/SMTP/mail.\
    \  The second example is a\nresolution request for application service NIFTP at\
    \ TSC.SRI.ARPA.\nAFFIRMATIVE RESPONSE\n   Command Type   Number of Items\n   Service\
    \ Indicator   Length   Transport Protocol/Service/Service Type\n   Name Indicator\
    \   Name Length    Name String\n   Address Indicator   Address Length   Address\n\
    Examples:\n   2  3\n   3 13 TCP/SMTP/mail\n   1 21 Postel@F.ISI.USC.ARPA\n   2\
    \  6 \"10  2  0 52  6 25\"\n   2  4\n   3 13 TCP/NIFTP/RFT\n   1 12 TSC.SRI.ARPA\n\
    \   2  6 \"10  3  0  2  6 47\"\n   2  6 \"39  0  0  5  6 47\"\n     An affirmative\
    \ response implies that the destination offers the\nrequested service.  The parsing\
    \ of an address is implied by the\nindicated transport protocol.  In the first\
    \ example, the transport\nprotocol is TCP.  Thus, the address is composed of three\
    \ fields: the\ninternet address (\"10 2 0 52\"), the protocol number (\"6\" for\
    \ TCP [3]),\nand the port number (\"25\" for SMTP [3]).  A multiple-address response\
    \ in\nthe second example indicates that TSC is multi-homed via both ARPANET\n\
    (net  10), and SRINET (net  39).  A multiple-resolution response is\npreferred.\
    \  It offers the source a choice.\nNEGATIVE RESPONSE\n   Command Type   Number\
    \ of Items\n   Service Indicator   Length   Transport Protocol/Service/Service\
    \ Type\n   Name Indicator   Name Length   Name String\n   Name Indicator   Name\
    \ Length   Partial Name String\n   [Comment Indicator   Comment Length   Comment]\n\
    \     This indicates difficulty in resolution.  Returned with this\ncommand is\
    \ the left-most portion of the specified name including the\ndifficulty encountered.\
    \  An optional comment item may be included.\nExamples:\n   3  4\n   3 13 TCP/SMTP/mail\n\
    \   1 16 Postel@F.ISI.USC\n   1 16 Postel@F.ISI.USC\n   9 18 Resolution Failure\n\
    \   3  4\n   3 13 TCP/NIFTP/RFT\n   1 13 TSC..SRI.ARPA\n   1  5 TSC..\n   9 17\
    \ Syntactic Anomaly\nIn the first example, the resolution failed because USC is\
    \ not top-level\ndomain.  The syntactic error of adajacent dots in the second\
    \ example is\nobvious.\nINCOMPATIBLE SERVICE\n     This response indicates no\
    \ compatible application and/or transport\nservice is available at the destination.\
    \  For example, the requested\napplication service may be SMTP, while only FTP-mail\
    \ is available at the\ndestination.  Return with this command is the available\
    \ corresponding\navailable service, if any, and its address.  If no service is\
    \ available\nfor that service type, an empty string for service specification\
    \ is\nreturned.\n   Command Type   Number of Items\n   Service Indicator   Length\
    \   Transport Protocol/Service/Service Type\n   Name Indicator   Name Length \
    \  Name String\n   Service Indicator   Length   Transport Protocol/Service/Service\
    \ Type\n   [Address Indicator   Address Length   Address]\nExamples:\n   9  3\n\
    \   3 14 TCP/NIFTP/mail\n   1 21 Postel@F.ISI.USC.ARPA\n   3  0\n   9  5\n   3\
    \ 13 TCP/NIFTP/RFT\n   1 12 TSC.SRI.ARPA\n   3 11 TCP/FTP/RFT\n   2  6 \"10  3\
    \  0  2  6 21\"\n   2  6 \"39  0  0  5  6 21\"\n4.2.2 AIP/AIP Communication\n\
    \     Communication between the AIPs accomplishes the \"what-can-you-do-\nfor-me\"\
    \ negotiation.  Examples in this section correspond to those of\nSection 4.2.1.\n\
    REQUEST\n   Command Type   Number of Items\n   Service Indicator   Length   Transport\
    \ Protocol/Service/Service Type\nExamples:\n   1  1\n   3 13 TCP/SMTP/mail\n \
    \  1  1\n   3 13 TCP/NIFTP/RFT\nAFFIRMATIVE RESPONSE\n   Command Type   Number\
    \ of Items\n   Service Indicator   Length   Transport Protocol/Service/Service\
    \ Type\n   Address Indicator   Address Length   Address\nExamples:\n   2  2\n\
    \   3 13 TCP/SMTP/mail\n   2  6 \"10  2  0 52  6 25\"\n   2  3\n   3 14 TCP/NIFTP/RFT\n\
    \   2  6 \"10  3  0  2  6 47\"\n   2  6 \"39  0  0  5  6 47\"\n     An affirmative\
    \ response implies that the destination offers the\nsame service as that of the\
    \ originator.  A multi-resolution response is\npossible.  The parsing of an address\
    \ is implied by the indicated\ntransport protocol.  In the second example, the\
    \ transport protocol is\nTCP.  Thus, the address is composed of three fields:\
    \ the internet\naddress (10 2 0 52), the protocol number (6 for TCP), and the\
    \ port\nnumber (25 for SMTP).  The returned address(es) is to be relayed to the\n\
    originating application process.\nINCOMPATIBLE SERVICE\n   Command Type   Number\
    \ of Items\n   Service Indicator   Length   Transport Protocol/Service/Service\
    \ Type\n   Service Indicator   Length   Transport Protocol/Service/Service Type\n\
    \   Address Indicator   Address Length   Address\n     This response indicates\
    \ no compatible application and/or transport\nservice available serving the destination.\
    \  For example, SMTP may be the\nrequested application service, while only NIFTP-mail\
    \ is available\nserving the destination.  Return with this command is the available\n\
    service of that type.  If no service available for that service type, a\nempty\
    \ text string is returned.\nExamples:\n   9  2\n   3 14 TCP/NIFTP/mail\n   3 \
    \ 0\n   9  4\n   3 13 TCP/NIFTP/RFT\n   3 11 TCP/FTP/RFT\n   2  6 \"10  3  0 \
    \ 2  6 21\"\n   2  6 \"39  0  0  5  6 21\"\nIn the first example, the destination\
    \ does not offer any kind of mail\nservice.  The second example indicates that\
    \ there is no NIFTP, but FTP\navailable for remote file transfer service at the\
    \ destination.\n4.2.3 AIP/DNS Communication\n     The source AIP presents its\
    \ associated DNS with a fully qualified\ndomain specification for resolution.\
    \  The expected resolution result is\nthe network address for the destination\
    \ endpoint DNS.  We assume no need\nfor communication between the DNS and AIP\
    \ at the destination.\nREQUEST\n   Command Type   Number of Items\n   Name Indicator\
    \   Name Length   Name String\nExamples:\n   1  1\n   1 14 F.ISI.USC.ARPA\n  \
    \ 1  1\nAFFIRMATIVE RESPONSE\n   Command Type   Number of Items\n   Name Indicator\
    \   Name Length    Name String\n   Service Indicator   Service Length   Transport\
    \ Protocol\n   Address Indicator   Address Length   Address\nExamples:\n   2 \
    \ 3\n   1 14 F.ISI.USC.ARPA\n   3  3 UDP\n   2  6 \"10  2  0 52 17 42\"\n   2\
    \  4\n   1  7 TSC.SRI.ARPA\n   3  3 UDP\n   2  6 \"10  3  0  2 17 42\"\n   2 \
    \ 6 \"39  0  0  5 17 42\"\nAn affirmative response returns an address of the destination\
    \ endpoint\nDNS.  This returned address is that of the destination DNS.  The\n\
    destination transport service needs to be indicated for guiding the\nparsing of\
    \ the destination address.\nNEGATIVE RESPONSE\n   Command Type   Number of Items\n\
    \   Name Indicator   Name Length   Name String\n   Name Indicator   Name Length\
    \   Partial Name String\n   [Comment Indicator  Comment Length   Comment]\n  \
    \   This response indicates that the domain name service is unable to\nresolve\
    \ the given destination domain name.  It could be caused by an\nunknown simple\
    \ name, which may result from, for example, misspelling.\nReturned with this command\
    \ is the left-most portion of the specified\nname containing the cause of resolution\
    \ failure.\nExample:\n     1  3\n     1  9 F.ISI.USC\n     1  9 F.ISI.USC\n  \
    \   9 18 Resolution Failure\n4.2.4 DNS/DNS Communication\n     The domain name\
    \ service is an application independent network\nservice.  It provides the resolution\
    \ of domain names.  For the\nspecification of this service the reader is referred\
    \ to [2].\n4.3  Transport Protocol\n     For generality, this specification is\
    \ intentionally transport\nprotocol independent.  Implications for the use of\
    \ TCP and UDP are\nspecifically considered.\n     Typically, for distributed name\
    \ service a server A makes a request\nto a server B, server B may need to in turn\
    \ contact other servers to\ncomplete a resolution.  TCP is a connection-oriented\
    \ protocol.  It\noffers reliable transport, but also imposes certain amount of\
    \ overhead\nfor connection establishment and maintenance.  For most cases, the\
    \ use\nof TCP is not recommended.\n     UDP is a datagram service offering a transport\
    \ capacity per\ndatagram in excess of 500 octets.  Such capacity should suffice\
    \ most\nconceivable commands within this specification.  However, it does impose\n\
    a limit on the total length of a command.  In order to enhance\nreliability, the\
    \ request is incorporated as part of every response\ncommand.\n              \
    \         5   NCP TO TCP TRANSITION\n     The Internet Naming Convention, \"<user>@<domain>.\
    \  ...  . <domain>\"\n[1], is a generalization of \"<user>@<host>\", the ARPANET\
    \ Naming\nConvention.  It is a generalization in the sense that the ARPANET Naming\n\
    Convention can be considered as a partially qualified form of the subset\n\"<user>@<host>.ARPANET\"\
    .  (We assume here ARPANET is a top-level domain\nname.)\n     For the transition\
    \ from NCP to TCP, we may initially treat each\nhost name entry in the current\
    \ host table as a subdomain of the top-\nlevel domain ARPANET.  Thus, initially\
    \ there would be a very flat domain\nstructure.  This structure can be gradually\
    \ changed after the transition\ntoward a hierarchical structure when more and\
    \ more domains and\nsubdomains are defined and name servers installed.  In the\
    \ process of\nthis change, the host table would be gradually converted into\n\
    distributed domain tables (databases).  For the newly created domain\ntables,\
    \ no standard format would be required.  Each individual domain\ntable may have\
    \ its own format suitable to the design of its associated\ndomain name server.\n\
    REFERENCES\n[1]  Su, Z. and J. Postel, \"The Domain Naming Convention for Internet\n\
    User Applications,\"  RFC 819, SRI International (August 1982).\n[2]  Postel,\
    \ J., \"Domains Name Server,\" RFC XXX, USC/Information\nSciences Institute (to\
    \ appear).\n[3]  Postel, J., \"Assigned Numbers,\" RFC 790, USC/Information Sciences\n\
    Institute (September 1981).\n                               Appendix A\n\t\t\t\
    \ CONVENTION ASSIGNMENTS\n     Command Types\n     Request              1\n  \
    \   Affirmative Response 2\n     Negative Response    3\n     Imcompatible Service\
    \ 9\n     INDICATORS\n     Name Indicator       1\n     Address Indicator    2\n\
    \     Service Indicator    3\n     Comment Indicator    9\n     TRANSPORT PROTOCOLS:\
    \  TCP, UDP, NCP\n     SERVICES\n     Service Protocols                  Service\
    \ Type\n     MTP                                mail\n     SMTP              \
    \                 mail\n     FTP    (FTP mail)                  mail\n     NIFTP\
    \  (NIFTP mail)                mail\n     MMDF                               mail\n\
    \     FTP                                RFT (remote file transfer)\n     Telnet\
    \                             RTA (remote terminal access)\n"
