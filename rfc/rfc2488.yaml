- title: __initial_text__
  contents:
  - "                 Enhancing TCP Over Satellite Channels\n                    \
    \   using Standard Mechanisms\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Transmission Control Protocol (TCP) provides reliable delivery\
    \ of\n   data across any network path, including network paths containing\n  \
    \ satellite channels.  While TCP works over satellite channels there\n   are several\
    \ IETF standardized mechanisms that enable TCP to more\n   effectively utilize\
    \ the available capacity of the network path.  This\n   document outlines some\
    \ of these TCP mitigations.  At this time, all\n   mitigations discussed in this\
    \ document are IETF standards track\n   mechanisms (or are compliant with IETF\
    \ standards).\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Satellite channel characteristics may have an effect on\
    \ the way\n   transport protocols, such as the Transmission Control Protocol (TCP)\n\
    \   [Pos81], behave.  When protocols, such as TCP, perform poorly,\n   channel\
    \ utilization is low.  While the performance of a transport\n   protocol is important,\
    \ it is not the only consideration when\n   constructing a network containing\
    \ satellite links.  For example, data\n   link protocol, application protocol,\
    \ router buffer size, queueing\n   discipline and proxy location are some of the\
    \ considerations that\n   must be taken into account.  However, this document\
    \ focuses on\n   improving TCP in the satellite environment and non-TCP considerations\n\
    \   are left for another document.  Finally, there have been many\n   satellite\
    \ mitigations proposed and studied by the research community.\n   While these\
    \ mitigations may prove useful and safe for shared networks\n   in the future,\
    \ this document only considers TCP mechanisms which are\n   currently well understood\
    \ and on the IETF standards track (or are\n   compliant with IETF standards).\n\
    \   This document is divided up as follows: Section 2 provides a brief\n   outline\
    \ of the characteristics of satellite networks.  Section 3\n   outlines two non-TCP\
    \ mechanisms that enable TCP to more effectively\n   utilize the available bandwidth.\
    \  Section 4 outlines the TCP\n   mechanisms defined by the IETF that may benefit\
    \ satellite networks.\n   Finally, Section 5 provides a summary of what modern\
    \ TCP\n   implementations should include to be considered \"satellite friendly\"\
    .\n"
- title: 2.  Satellite Characteristics
  contents:
  - "2.  Satellite Characteristics\n   There is an inherent delay in the delivery\
    \ of a message over a\n   satellite link due to the finite speed of light and\
    \ the altitude of\n   communications satellites.\n   Many communications satellites\
    \ are located at Geostationary Orbit\n   (GSO) with an altitude of approximately\
    \ 36,000 km [Sta94].  At this\n   altitude the orbit period is the same as the\
    \ Earth's rotation period.\n   Therefore, each ground station is always able to\
    \ \"see\" the orbiting\n   satellite at the same position in the sky.  The propagation\
    \ time for\n   a radio signal to travel twice that distance (corresponding to\
    \ a\n   ground station directly below the satellite) is 239.6 milliseconds\n \
    \  (ms) [Mar78].  For ground stations at the edge of the view area of\n   the\
    \ satellite, the distance traveled is 2 x 41,756 km for a total\n   propagation\
    \ delay of 279.0 ms [Mar78].  These delays are for one\n   ground station-to-satellite-to-ground\
    \ station route (or \"hop\").\n   Therefore, the propagation delay for a message\
    \ and the corresponding\n   reply (one round-trip time or RTT) could be at least\
    \ 558 ms.  The RTT\n   is not based solely on satellite propagation time.  The\
    \ RTT will be\n   increased by other factors in the network, such as the transmission\n\
    \   time and propagation time of other links in the network path and\n   queueing\
    \ delay in gateways.  Furthermore, the satellite propagation\n   delay will be\
    \ longer if the link includes multiple hops or if\n   intersatellite links are\
    \ used.  As satellites become more complex and\n   include on-board processing\
    \ of signals, additional delay may be\n   added.\n   Other orbits are possible\
    \ for use by communications satellites\n   including Low Earth Orbit (LEO) [Stu95]\
    \ [Mon98] and Medium Earth\n   Orbit (MEO) [Mar78].  The lower orbits require\
    \ the use of\n   constellations of satellites for constant coverage.  In other\
    \ words,\n   as one satellite leaves the ground station's sight, another satellite\n\
    \   appears on the horizon and the channel is switched to it.  The\n   propagation\
    \ delay to a LEO orbit ranges from several milliseconds\n   when communicating\
    \ with a satellite directly overhead, to as much as\n   80 ms when the satellite\
    \ is on the horizon.  These systems are more\n   likely to use intersatellite\
    \ links and have variable path delay\n   depending on routing through the network.\n\
    \   Satellite channels are dominated by two fundamental characteristics,\n   as\
    \ described below:\n      NOISE - The strength of a radio signal falls in proportion\
    \ to the\n      square of the distance traveled.  For a satellite link the\n \
    \     distance is large and so the signal becomes weak before reaching\n     \
    \ its destination.  This results in a low signal-to-noise ratio.\n      Some frequencies\
    \ are particularly susceptible to atmospheric\n      effects such as rain attenuation.\
    \  For mobile applications,\n      satellite channels are especially susceptible\
    \ to multi-path\n      distortion and shadowing (e.g., blockage by buildings).\
    \  Typical\n      bit error rates (BER) for a satellite link today are on the\
    \ order\n      of 1 error per 10 million bits (1 x 10^-7) or less frequent.\n\
    \      Advanced error control coding (e.g., Reed Solomon) can be added to\n  \
    \    existing satellite services and is currently being used by many\n      services.\
    \  Satellite error performance approaching fiber will\n      become more common\
    \ as advanced error control coding is used in new\n      systems.  However, many\
    \ legacy satellite systems will continue to\n      exhibit higher BER than newer\
    \ satellite systems and terrestrial\n      channels.\n      BANDWIDTH - The radio\
    \ spectrum is a limited natural resource,\n      hence there is a restricted amount\
    \ of bandwidth available to\n      satellite systems which is typically controlled\
    \ by licenses.  This\n      scarcity makes it difficult to trade bandwidth to\
    \ solve other\n      design problems.  Typical carrier frequencies for current,\
    \ point-\n      to-point, commercial, satellite services are 6 GHz (uplink) and\
    \ 4\n      GHz (downlink), also known as C band, and 14/12 GHz (Ku band).  A\n\
    \      new service at 30/20 GHz (Ka band) will be emerging over the next\n   \
    \   few years.  Satellite-based radio repeaters are known as\n      transponders.\
    \  Traditional C band transponder bandwidth is\n      typically 36 MHz to accommodate\
    \ one color television channel (or\n      1200 voice channels).  Ku band transponders\
    \ are typically around\n      50 MHz.  Furthermore, one satellite may carry a\
    \ few dozen\n      transponders.\n   Not only is bandwidth limited by nature,\
    \ but the allocations for\n   commercial communications are limited by international\
    \ agreements so\n   that this scarce resource can be used fairly by many different\n\
    \   applications.\n   Although satellites have certain disadvantages when compared\
    \ to fiber\n   channels (e.g., cannot be easily repaired, rain fades, etc.), they\n\
    \   also have certain advantages over terrestrial links.  First,\n   satellites\
    \ have a natural broadcast capability.  This gives\n   satellites an advantage\
    \ for multicast applications.  Next, satellites\n   can reach geographically remote\
    \ areas or countries that have little\n   terrestrial infrastructure.  A related\
    \ advantage is the ability of\n   satellite links to reach mobile users.\n   Satellite\
    \ channels have several characteristics that differ from most\n   terrestrial\
    \ channels.  These characteristics may degrade the\n   performance of TCP.  These\
    \ characteristics include:\n   Long feedback loop\n      Due to the propagation\
    \ delay of some satellite channels (e.g.,\n      approximately 250 ms over a geosynchronous\
    \ satellite) it may take\n      a long time for a TCP sender to determine whether\
    \ or not a packet\n      has been successfully received at the final destination.\
    \  This\n      delay hurts interactive applications such as telnet, as well as\n\
    \      some of the TCP congestion control algorithms (see section 4).\n   Large\
    \ delay*bandwidth product\n      The delay*bandwidth product (DBP) defines the\
    \ amount of data a\n      protocol should have \"in flight\" (data that has been\
    \ transmitted,\n      but not yet acknowledged) at any one time to fully utilize\
    \ the\n      available channel capacity.  The delay used in this equation is\n\
    \      the RTT and the bandwidth is the capacity of the bottleneck link\n    \
    \  in the network path.  Because the delay in some satellite\n      environments\
    \ is large, TCP will need to keep a large number of\n      packets \"in flight\"\
    \ (that is, sent but not yet acknowledged) .\n   Transmission errors\n      Satellite\
    \ channels exhibit a higher bit-error rate (BER) than\n      typical terrestrial\
    \ networks.  TCP uses all packet drops as\n      signals of network congestion\
    \ and reduces its window size in an\n      attempt to alleviate the congestion.\
    \  In the absence of knowledge\n      about why a packet was dropped (congestion\
    \ or corruption), TCP\n      must assume the drop was due to network congestion\
    \ to avoid\n      congestion collapse [Jac88] [FF98].  Therefore, packets dropped\n\
    \      due to corruption cause TCP to reduce the size of its sliding\n      window,\
    \ even though these packet drops do not signal congestion in\n      the network.\n\
    \   Asymmetric use\n      Due to the expense of the equipment used to send data\
    \ to\n      satellites, asymmetric satellite networks are often constructed.\n\
    \      For example, a host connected to a satellite network will send all\n  \
    \    outgoing traffic over a slow terrestrial link (such as a dialup\n      modem\
    \ channel) and receive incoming traffic via the satellite\n      channel.  Another\
    \ common situation arises when both the incoming\n      and outgoing traffic are\
    \ sent using a satellite link, but the\n      uplink has less available capacity\
    \ than the downlink due to the\n      expense of the transmitter required to provide\
    \ a high bandwidth\n      back channel.  This asymmetry may have an impact on\
    \ TCP\n      performance.\n   Variable Round Trip Times\n      In some satellite\
    \ environments, such as low-Earth orbit (LEO)\n      constellations, the propagation\
    \ delay to and from the satellite\n      varies over time.  Whether or not this\
    \ will have an impact on TCP\n      performance is currently an open question.\n\
    \   Intermittent connectivity\n      In non-GSO satellite orbit configurations,\
    \ TCP connections must be\n      transferred from one satellite to another or\
    \ from one ground\n      station to another from time to time.  This handoff may\
    \ cause\n      packet loss if not properly performed.\n   Most satellite channels\
    \ only exhibit a subset of the above\n   characteristics.  Furthermore, satellite\
    \ networks are not the only\n   environments where the above characteristics are\
    \ found.  However,\n   satellite networks do tend to exhibit more of the above\
    \ problems or\n   the above problems are aggravated in the satellite environment.\
    \  The\n   mechanisms outlined in this document should benefit most networks,\n\
    \   especially those with one or more of the above characteristics (e.g.,\n  \
    \ gigabit networks have large delay*bandwidth products).\n"
- title: 3.  Lower Level Mitigations
  contents:
  - "3.  Lower Level Mitigations\n   It is recommended that those utilizing satellite\
    \ channels in their\n   networks should use the following two non-TCP mechanisms\
    \ which can\n   increase TCP performance.  These mechanisms are Path MTU Discovery\n\
    \   and forward error correction (FEC) and are outlined in the following\n   two\
    \ sections.\n   The data link layer protocol employed over a satellite channel\
    \ can\n   have a large impact on performance of higher layer protocols.  While\n\
    \   beyond the scope of this document, those constructing satellite\n   networks\
    \ should tune these protocols in an appropriate manner to\n   ensure that the\
    \ data link protocol does not limit TCP performance.\n   In particular, data link\
    \ layer protocols often implement a flow\n   control window and retransmission\
    \ mechanisms.  When the link level\n   window size is too small, performance will\
    \ suffer just as when the\n   TCP window size is too small (see section 4.3 for\
    \ a discussion of\n   appropriate window sizes).  The impact that link level\n\
    \   retransmissions have on TCP transfers is not currently well\n   understood.\
    \  The interaction between TCP retransmissions and link\n   level retransmissions\
    \ is a subject for further research.\n"
- title: 3.1 Path MTU Discovery
  contents:
  - "3.1 Path MTU Discovery\n   Path MTU discovery [MD90] is used to determine the\
    \ maximum packet\n   size a connection can use on a given network path without\
    \ being\n   subjected to IP fragmentation.  The sender transmits a packet that\
    \ is\n   the appropriate size for the local network to which it is connected\n\
    \   (e.g., 1500 bytes on an Ethernet) and sets the IP \"don't fragment\"\n   (DF)\
    \ bit.  If the packet is too large to be forwarded without being\n   fragmented\
    \ to a given channel along the network path, the gateway\n   that would normally\
    \ fragment the packet and forward the fragments\n   will instead return an ICMP\
    \ message to the originator of the packet.\n   The ICMP message will indicate\
    \ that the original segment could not be\n   transmitted without being fragmented\
    \ and will also contain the size\n   of the largest packet that can be forwarded\
    \ by the gateway.\n   Additional information from the IESG regarding Path MTU\
    \ discovery is\n   available in [Kno93].\n   Path MTU Discovery allows TCP to\
    \ use the largest possible packet\n   size, without incurring the cost of fragmentation\
    \ and reassembly.\n   Large packets reduce the packet overhead by sending more\
    \ data bytes\n   per overhead byte.  As outlined in section 4, increasing TCP's\n\
    \   congestion window is segment based, rather than byte based and\n   therefore,\
    \ larger segments enable TCP senders to increase the\n   congestion window more\
    \ rapidly, in terms of bytes, than smaller\n   segments.\n   The disadvantage\
    \ of Path MTU Discovery is that it may cause a delay\n   before TCP is able to\
    \ start sending data.  For example, assume a\n   packet is sent with the DF bit\
    \ set and one of the intervening\n   gateways (G1) returns an ICMP message indicating\
    \ that it cannot\n   forward the segment.  At this point, the sending host reduces\
    \ the\n   packet size per the ICMP message returned by G1 and sends another\n\
    \   packet with the DF bit set.  The packet will be forwarded by G1,\n   however\
    \ this does not ensure all subsequent gateways in the network\n   path will be\
    \ able to forward the segment.  If a second gateway (G2)\n   cannot forward the\
    \ segment it will return an ICMP message to the\n   transmitting host and the\
    \ process will be repeated.  Therefore, path\n   MTU discovery can spend a large\
    \ amount of time determining the\n   maximum allowable packet size on the network\
    \ path between the sender\n   and receiver.  Satellite delays can aggravate this\
    \ problem (consider\n   the case when the channel between G1 and G2 is a satellite\
    \ link).\n   However, in practice, Path MTU Discovery does not consume a large\n\
    \   amount of time due to wide support of common MTU values.\n   Additionally,\
    \ caching MTU values may be able to eliminate discovery\n   time in many instances,\
    \ although the exact implementation of this and\n   the aging of cached values\
    \ remains an open problem.\n   The relationship between BER and segment size is\
    \ likely to vary\n   depending on the error characteristics of the given channel.\
    \  This\n   relationship deserves further study, however with the use of good\n\
    \   forward error correction (see section 3.2) larger segments should\n   provide\
    \ better performance, as with any network [MSMO97].  While the\n   exact method\
    \ for choosing the best MTU for a satellite link is\n   outside the scope of this\
    \ document, the use of Path MTU Discovery is\n   recommended to allow TCP to use\
    \ the largest possible MTU over the\n   satellite channel.\n"
- title: 3.2 Forward Error Correction
  contents:
  - "3.2 Forward Error Correction\n   A loss event in TCP is always interpreted as\
    \ an indication of\n   congestion and always causes TCP to reduce its congestion\
    \ window\n   size.  Since the congestion window grows based on returning\n   acknowledgments\
    \ (see section 4), TCP spends a long time recovering\n   from loss when operating\
    \ in satellite networks.  When packet loss is\n   due to corruption, rather than\
    \ congestion, TCP does not need to\n   reduce its congestion window size.  However,\
    \ at the present time\n   detecting corruption loss is a research issue.\n   Therefore,\
    \ for TCP to operate efficiently, the channel\n   characteristics should be such\
    \ that nearly all loss is due to network\n   congestion.  The use of forward error\
    \ correction coding (FEC) on a\n   satellite link should be used to improve the\
    \ bit-error rate (BER) of\n   the satellite channel.  Reducing the BER is not\
    \ always possible in\n   satellite environments.  However, since TCP takes a long\
    \ time to\n   recover from lost packets because the long propagation delay imposed\n\
    \   by a satellite link delays feedback from the receiver [PS97], the\n   link\
    \ should be made as clean as possible to prevent TCP connections\n   from receiving\
    \ false congestion signals.  This document does not make\n   a specific BER recommendation\
    \ for TCP other than it should be as low\n   as possible.\n   FEC should not be\
    \ expected to fix all problems associated with noisy\n   satellite links.  There\
    \ are some situations where FEC cannot be\n   expected to solve the noise problem\
    \ (such as military jamming, deep\n   space missions, noise caused by rain fade,\
    \ etc.).  In addition, link\n   outages can also cause problems in satellite systems\
    \ that do not\n   occur as frequently in terrestrial networks.  Finally, FEC is\
    \ not\n   without cost.  FEC requires additional hardware and uses some of the\n\
    \   available bandwidth.  It can add delay and timing jitter due to the\n   processing\
    \ time of the coder/decoder.\n   Further research is needed into mechanisms that\
    \ allow TCP to\n   differentiate between congestion induced drops and those caused\
    \ by\n   corruption.  Such a mechanism would allow TCP to respond to\n   congestion\
    \ in an appropriate manner, as well as repairing corruption\n   induced loss without\
    \ reducing the transmission rate.  However, in the\n   absence of such a mechanism\
    \ packet loss must be assumed to indicate\n   congestion to preserve network stability.\
    \  Incorrectly interpreting\n   loss as caused by corruption and not reducing\
    \ the transmission rate\n   accordingly can lead to congestive collapse [Jac88]\
    \ [FF98].\n"
- title: 4.  Standard TCP Mechanisms
  contents:
  - "4.  Standard TCP Mechanisms\n   This section outlines TCP mechanisms that may\
    \ be necessary in\n   satellite or hybrid satellite/terrestrial networks to better\
    \ utilize\n   the available capacity of the link.  These mechanisms may also be\n\
    \   needed to fully utilize fast terrestrial channels.  Furthermore,\n   these\
    \ mechanisms do not fundamentally hurt performance in a shared\n   terrestrial\
    \ network.  Each of the following sections outlines one\n   mechanism and why\
    \ that mechanism may be needed.\n"
- title: 4.1 Congestion Control
  contents:
  - "4.1 Congestion Control\n   To avoid generating an inappropriate amount of network\
    \ traffic for\n   the current network conditions, during a connection TCP employs\
    \ four\n   congestion control mechanisms [Jac88] [Jac90] [Ste97].  These\n   algorithms\
    \ are slow start, congestion avoidance, fast retransmit and\n   fast recovery.\
    \  These algorithms are used to adjust the amount of\n   unacknowledged data that\
    \ can be injected into the network and to\n   retransmit segments dropped by the\
    \ network.\n   TCP senders use two state variables to accomplish congestion control.\n\
    \   The first variable is the congestion window (cwnd).  This is an upper\n  \
    \ bound on the amount of data the sender can inject into the network\n   before\
    \ receiving an acknowledgment (ACK).  The value of cwnd is\n   limited to the\
    \ receiver's advertised window.  The congestion window\n   is increased or decreased\
    \ during the transfer based on the inferred\n   amount of congestion present in\
    \ the network.  The second variable is\n   the slow start threshold (ssthresh).\
    \  This variable determines which\n   algorithm is used to increase the value\
    \ of cwnd.  If cwnd is less\n   than ssthresh the slow start algorithm is used\
    \ to increase the value\n   of cwnd.  However, if cwnd is greater than or equal\
    \ to (or just\n   greater than in some TCP implementations) ssthresh the congestion\n\
    \   avoidance algorithm is used.  The initial value of ssthresh is the\n   receiver's\
    \ advertised window size.  Furthermore, the value of\n   ssthresh is set when\
    \ congestion is detected.\n   The four congestion control algorithms are outlined\
    \ below, followed\n   by a brief discussion of the impact of satellite environments\
    \ on\n   these algorithms.\n"
- title: 4.1.1 Slow Start and Congestion Avoidance
  contents:
  - "4.1.1 Slow Start and Congestion Avoidance\n   When a host begins sending data\
    \ on a TCP connection the host has no\n   knowledge of the current state of the\
    \ network between itself and the\n   data receiver.  In order to avoid transmitting\
    \ an inappropriately\n   large burst of traffic, the data sender is required to\
    \ use the slow\n   start algorithm at the beginning of a transfer [Jac88] [Bra89]\n\
    \   [Ste97].  Slow start begins by initializing cwnd to 1 segment\n   (although\
    \ an IETF experimental mechanism would increase the size of\n   the initial window\
    \ to roughly 4 Kbytes [AFP98]) and ssthresh to the\n   receiver's advertised window.\
    \  This forces TCP to transmit one\n   segment and wait for the corresponding\
    \ ACK.  For each ACK that is\n   received during slow start, the value of cwnd\
    \ is increased by 1\n   segment.  For example, after the first ACK is received\
    \ cwnd will be 2\n   segments and the sender will be allowed to transmit 2 data\
    \ packets.\n   This continues until cwnd meets or exceeds ssthresh (or, in some\n\
    \   implementations when cwnd equals ssthresh), or loss is detected.\n   When\
    \ the value of cwnd is greater than or equal to (or equal to in\n   certain implementations)\
    \ ssthresh the congestion avoidance algorithm\n   is used to increase cwnd [Jac88]\
    \ [Bra89] [Ste97].  This algorithm\n   increases the size of cwnd more slowly\
    \ than does slow start.\n   Congestion avoidance is used to slowly probe the network\
    \ for\n   additional capacity.  During congestion avoidance, cwnd is increased\n\
    \   by 1/cwnd for each incoming ACK.  Therefore, if one ACK is received\n   for\
    \ every data segment, cwnd will increase by roughly 1 segment per\n   round-trip\
    \ time (RTT).\n   The slow start and congestion control algorithms can force poor\n\
    \   utilization of the available channel bandwidth when using long-delay\n   satellite\
    \ networks [All97].  For example, transmission begins with\n   the transmission\
    \ of one segment.  After the first segment is\n   transmitted the data sender\
    \ is forced to wait for the corresponding\n   ACK.  When using a GSO satellite\
    \ this leads to an idle time of\n   roughly 500 ms when no useful work is being\
    \ accomplished.  Therefore,\n   slow start takes more real time over GSO satellites\
    \ than on typical\n   terrestrial channels.  This holds for congestion avoidance,\
    \ as well\n   [All97].  This is precisely why Path MTU Discovery is an important\n\
    \   algorithm.  While the number of segments we transmit is determined by\n  \
    \ the congestion control algorithms, the size of these segments is not.\n   Therefore,\
    \ using larger packets will enable TCP to send more data per\n   segment which\
    \ yields better channel utilization.\n"
- title: 4.1.2 Fast Retransmit and Fast Recovery
  contents:
  - "4.1.2 Fast Retransmit and Fast Recovery\n   TCP's default mechanism to detect\
    \ dropped segments is a timeout\n   [Pos81].  In other words, if the sender does\
    \ not receive an ACK for a\n   given packet within the expected amount of time\
    \ the segment will be\n   retransmitted.  The retransmission timeout (RTO) is\
    \ based on\n   observations of the RTT.  In addition to retransmitting a segment\n\
    \   when the RTO expires, TCP also uses the lost segment as an indication\n  \
    \ of congestion in the network.  In response to the congestion, the\n   value\
    \ of ssthresh is set to half of the cwnd and the value of cwnd is\n   then reduced\
    \ to 1 segment.  This triggers the use of the slow start\n   algorithm to increase\
    \ cwnd until the value of cwnd reaches half of\n   its value when congestion was\
    \ detected.  After the slow start phase,\n   the congestion avoidance algorithm\
    \ is used to probe the network for\n   additional capacity.\n   TCP ACKs always\
    \ acknowledge the highest in-order segment that has\n   arrived.  Therefore an\
    \ ACK for segment X also effectively ACKs all\n   segments < X.  Furthermore,\
    \ if a segment arrives out-of-order the ACK\n   triggered will be for the highest\
    \ in-order segment, rather than the\n   segment that just arrived.  For example,\
    \ assume segment 11 has been\n   dropped somewhere in the network and segment\
    \ 12 arrives at the\n   receiver.  The receiver is going to send a duplicate ACK\
    \ covering\n   segment 10 (and all previous segments).\n   The fast retransmit\
    \ algorithm uses these duplicate ACKs to detect\n   lost segments.  If 3 duplicate\
    \ ACKs arrive at the data originator,\n   TCP assumes that a segment has been\
    \ lost and retransmits the missing\n   segment without waiting for the RTO to\
    \ expire.  After a segment is\n   resent using fast retransmit, the fast recovery\
    \ algorithm is used to\n   adjust the congestion window.  First, the value of\
    \ ssthresh is set to\n   half of the value of cwnd.  Next, the value of cwnd is\
    \ halved.\n   Finally, the value of cwnd is artificially increased by 1 segment\
    \ for\n   each duplicate ACK that has arrived.  The artificial inflation can be\n\
    \   done because each duplicate ACK represents 1 segment that has left\n   the\
    \ network.  When the cwnd permits, TCP is able to transmit new\n   data.  This\
    \ allows TCP to keep data flowing through the network at\n   half the rate it\
    \ was when loss was detected.  When an ACK for the\n   retransmitted packet arrives,\
    \ the value of cwnd is reduced back to\n   ssthresh (half the value of cwnd when\
    \ the congestion was detected).\n   Generally, fast retransmit can resend only\
    \ one segment per window of\n   data sent.  When multiple segments are lost in\
    \ a given window of\n   data, one of the segments will be resent using fast retransmit\
    \ and\n   the rest of the dropped segments must usually wait for the RTO to\n\
    \   expire, which causes TCP to revert to slow start.\n   TCP's response to congestion\
    \ differs based on the way the congestion\n   is detected.  If the retransmission\
    \ timer causes a packet to be\n   resent, TCP drops ssthresh to half the current\
    \ cwnd and reduces the\n   value of cwnd to 1 segment (thus triggering slow start).\
    \  However, if\n   a segment is resent via fast retransmit both ssthresh and cwnd\
    \ are\n   set to half the current value of cwnd and congestion avoidance is\n\
    \   used to send new data.  The difference is that when retransmitting\n   due\
    \ to duplicate ACKs, TCP knows that packets are still flowing\n   through the\
    \ network and can therefore infer that the congestion is\n   not that bad.  However,\
    \ when resending a packet due to the expiration\n   of the retransmission timer,\
    \ TCP cannot infer anything about the\n   state of the network and therefore must\
    \ proceed conservatively by\n   sending new data using the slow start algorithm.\n\
    \   Note that the fast retransmit/fast recovery algorithms, as discussed\n   above\
    \ can lead to a phenomenon that allows multiple fast retransmits\n   per window\
    \ of data [Flo94].  This can reduce the size of the\n   congestion window multiple\
    \ times in response to a single \"loss\n   event\".  The problem is particularly\
    \ noticeable in connections that\n   utilize large congestion windows, since these\
    \ connections are able to\n   inject enough new segments into the network during\
    \ recovery to\n   trigger the multiple fast retransmits.  Reducing cwnd multiple\
    \ times\n   for a single loss event may hurt performance [GJKFV98].\n   The best\
    \ way to improve the fast retransmit/fast recovery algorithms\n   is to use a\
    \ selective acknowledgment (SACK) based algorithm for loss\n   recovery.  As discussed\
    \ below, these algorithms are generally able to\n   quickly recover from multiple\
    \ lost segments without needlessly\n   reducing the value of cwnd.  In the absence\
    \ of SACKs, the fast\n   retransmit and fast recovery algorithms should be used.\
    \  Fixing these\n   algorithms to achieve better performance in the face of multiple\
    \ fast\n   retransmissions is beyond the scope of this document.  Therefore, TCP\n\
    \   implementers are advised to implement the current version of fast\n   retransmit/fast\
    \ recovery outlined in RFC 2001 [Ste97] or subsequent\n   versions of RFC 2001.\n"
- title: 4.1.3 Congestion Control in Satellite Environment
  contents:
  - "4.1.3 Congestion Control in Satellite Environment\n   The above algorithms have\
    \ a negative impact on the performance of\n   individual TCP connection's performance\
    \ because the algorithms slowly\n   probe the network for additional capacity,\
    \ which in turn wastes\n   bandwidth.  This is especially true over long-delay\
    \ satellite\n   channels because of the large amount of time required for the\
    \ sender\n   to obtain feedback from the receiver [All97] [AHKO97].  However,\
    \ the\n   algorithms are necessary to prevent congestive collapse in a shared\n\
    \   network [Jac88].  Therefore, the negative impact on a given\n   connection\
    \ is more than offset by the benefit to the entire network.\n"
- title: 4.2 Large TCP Windows
  contents:
  - "4.2 Large TCP Windows\n   The standard maximum TCP window size (65,535 bytes)\
    \ is not adequate\n   to allow a single TCP connection to utilize the entire bandwidth\n\
    \   available on some satellite channels.  TCP throughput is limited by\n   the\
    \ following formula [Pos81]:\n                      throughput = window size /\
    \ RTT\n   Therefore, using the maximum window size of 65,535 bytes and a\n   geosynchronous\
    \ satellite channel RTT of 560 ms [Kru95] the maximum\n   throughput is limited\
    \ to:\n         throughput = 65,535 bytes / 560 ms = 117,027 bytes/second\n  \
    \ Therefore, a single standard TCP connection cannot fully utilize, for\n   example,\
    \ T1 rate (approximately 192,000 bytes/second) GSO satellite\n   channels.  However,\
    \ TCP has been extended to support larger windows\n   [JBB92].  The window scaling\
    \ options outlined in [JBB92] should be\n   used in satellite environments, as\
    \ well as the companion algorithms\n   PAWS (Protection Against Wrapped Sequence\
    \ space) and RTTM (Round-Trip\n   Time Measurements).\n   It should be noted that\
    \ for a satellite link shared among many flows,\n   large windows may not be necessary.\
    \  For instance, two long-lived TCP\n   connections each using a window of 65,535\
    \ bytes, as in the above\n   example, can fully utilize a T1 GSO satellite channel.\n\
    \   Using large windows often requires both client and server\n   applications\
    \ or TCP stacks to be hand tuned (usually by an expert) to\n   utilize large windows.\
    \  Research into operating system mechanisms\n   that are able to adjust the buffer\
    \ capacity as dictated by the\n   current network conditions is currently underway\
    \ [SMM98].  This will\n   allow stock TCP implementations and applications to\
    \ better utilize\n   the capacity provided by the underlying network.\n"
- title: 4.3 Acknowledgment Strategies
  contents:
  - "4.3 Acknowledgment Strategies\n   There are two standard methods that can be\
    \ used by TCP receivers to\n   generated acknowledgments.  The method outlined\
    \ in [Pos81] generates\n   an ACK for each incoming segment.  [Bra89] states that\
    \ hosts SHOULD\n   use \"delayed acknowledgments\".  Using this algorithm, an\
    \ ACK is\n   generated for every second full-sized segment, or if a second full-\n\
    \   size segment does not arrive within a given timeout (which must not\n   exceed\
    \ 500 ms).  The congestion window is increased based on the\n   number of incoming\
    \ ACKs and delayed ACKs reduce the number of ACKs\n   being sent by the receiver.\
    \  Therefore, cwnd growth occurs much more\n   slowly when using delayed ACKs\
    \ compared to the case when the receiver\n   ACKs each incoming segment [All98].\n\
    \   A tempting \"fix\" to the problem caused by delayed ACKs is to simply\n  \
    \ turn the mechanism off and let the receiver ACK each incoming\n   segment. \
    \ However, this is not recommended.  First, [Bra89] says that\n   a TCP receiver\
    \ SHOULD generate delayed ACKs.  And, second, increasing\n   the number of ACKs\
    \ by a factor of two in a shared network may have\n   consequences that are not\
    \ yet understood.  Therefore, disabling\n   delayed ACKs is still a research issue\
    \ and thus, at this time TCP\n   receivers should continue to generate delayed\
    \ ACKs, per [Bra89].\n"
- title: 4.4 Selective Acknowledgments
  contents:
  - "4.4 Selective Acknowledgments\n   Selective acknowledgments (SACKs) [MMFR96]\
    \ allow TCP receivers to\n   inform TCP senders exactly which packets have arrived.\
    \  SACKs allow\n   TCP to recover more quickly from lost segments, as well as\
    \ avoiding\n   needless retransmissions.\n   The fast retransmit algorithm can\
    \ generally only repair one loss per\n   window of data.  When multiple losses\
    \ occur, the sender generally\n   must rely on a timeout to determine which segment\
    \ needs to be\n   retransmitted next.  While waiting for a timeout, the data segments\n\
    \   and their acknowledgments drain from the network.  In the absence of\n   incoming\
    \ ACKs to clock new segments into the network, the sender must\n   use the slow\
    \ start algorithm to restart transmission.  As discussed\n   above, the slow start\
    \ algorithm can be time consuming over satellite\n   channels.  When SACKs are\
    \ employed, the sender is generally able to\n   determine which segments need\
    \ to be retransmitted in the first RTT\n   following loss detection.  This allows\
    \ the sender to continue to\n   transmit segments (retransmissions and new segments,\
    \ if appropriate)\n   at an appropriate rate and therefore sustain the ACK clock.\
    \  This\n   avoids a costly slow start period following multiple lost segments.\n\
    \   Generally SACK is able to retransmit all dropped segments within the\n   first\
    \ RTT following the loss detection.  [MM96] and [FF96] discuss\n   specific congestion\
    \ control algorithms that rely on SACK information\n   to determine which segments\
    \ need to be retransmitted and when it is\n   appropriate to transmit those segments.\
    \  Both these algorithms follow\n   the basic principles of congestion control\
    \ outlined in [Jac88] and\n   reduce the window by half when congestion is detected.\n"
- title: 5.  Mitigation Summary
  contents:
  - "5.  Mitigation Summary\n   Table 1 summarizes the mechanisms that have been discussed\
    \ in this\n   document.  Those mechanisms denoted \"Recommended\" are IETF standards\n\
    \   track mechanisms that are recommended by the authors for use in\n   networks\
    \ containing satellite channels.  Those mechanisms marked\n   \"Required' have\
    \ been defined by the IETF as required for hosts using\n   the shared Internet\
    \ [Bra89].  Along with the section of this document\n   containing the discussion\
    \ of each mechanism, we note where the\n   mechanism needs to be implemented.\
    \  The codes listed in the last\n   column are defined as follows: \"S\" for the\
    \ data sender, \"R\" for the\n   data receiver and \"L\" for the satellite link.\n\
    \    Mechanism                 Use          Section      Where\n   +------------------------+-------------+------------+--------+\n\
    \   | Path-MTU Discovery     | Recommended | 3.1        | S      |\n   | FEC \
    \                   | Recommended | 3.2        | L      |\n   | TCP Congestion\
    \ Control |             |            |        |\n   |   Slow Start           |\
    \ Required    | 4.1.1      | S      |\n   |   Congestion Avoidance | Required\
    \    | 4.1.1      | S      |\n   |   Fast Retransmit      | Recommended | 4.1.2\
    \      | S      |\n   |   Fast Recovery        | Recommended | 4.1.2      | S\
    \      |\n   | TCP Large Windows      |             |            |        |\n\
    \   |   Window Scaling       | Recommended | 4.2        | S,R    |\n   |   PAWS\
    \                 | Recommended | 4.2        | S,R    |\n   |   RTTM         \
    \        | Recommended | 4.2        | S,R    |\n   | TCP SACKs              |\
    \ Recommended | 4.4        | S,R    |\n   +------------------------+-------------+------------+--------+\n\
    \                                Table 1\n   Satellite users should check with\
    \ their TCP vendors (implementors) to\n   ensure the recommended mechanisms are\
    \ supported in their stack in\n   current and/or future versions.  Alternatively,\
    \ the Pittsburgh\n   Supercomputer Center tracks TCP implementations and which\
    \ extensions\n   they support, as well as providing guidance on tuning various\
    \ TCP\n   implementations [PSC].\n   Research into improving the efficiency of\
    \ TCP over satellite channels\n   is ongoing and will be summarized in a planned\
    \ memo along with other\n   considerations, such as satellite network architectures.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The authors believe that the recommendations\
    \ contained in this memo\n   do not alter the security implications of TCP.  However,\
    \ when using a\n   broadcast medium such as satellites links to transfer user\
    \ data\n   and/or network control traffic, one should be aware of the intrinsic\n\
    \   security implications of such technology.\n   Eavesdropping on network links\
    \ is a form of passive attack that, if\n   performed successfully, could reveal\
    \ critical traffic control\n   information that would jeopardize the proper functioning\
    \ of the\n   network.  These attacks could reduce the ability of the network to\n\
    \   provide data transmission services efficiently.  Eavesdroppers could\n   also\
    \ compromise the privacy of user data, especially if end-to-end\n   security mechanisms\
    \ are not in use.  While passive monitoring can\n   occur on any network, the\
    \ wireless broadcast nature of satellite\n   links allows reception of signals\
    \ without physical connection to the\n   network which enables monitoring to be\
    \ conducted without detection.\n   However, it should be noted that the resources\
    \ needed to monitor a\n   satellite link are non-trivial.\n   Data encryption\
    \ at the physical and/or link layers can provide secure\n   communication over\
    \ satellite channels.  However, this still leaves\n   traffic vulnerable to eavesdropping\
    \ on networks before and after\n   traversing the satellite link.  Therefore,\
    \ end-to-end security\n   mechanisms should be considered.  This document does\
    \ not make any\n   recommendations as to which security mechanisms should be employed.\n\
    \   However, those operating and using satellite networks should survey\n   the\
    \ currently available network security mechanisms and choose those\n   that meet\
    \ their security requirements.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document has benefited from comments from the members\
    \ of the TCP\n   Over Satellite Working Group.  In particular, we would like to\
    \ thank\n   Aaron Falk, Matthew Halsey, Hans Kruse, Matt Mathis, Greg Nakanishi,\n\
    \   Vern Paxson, Jeff Semke, Bill Sepmeier and Eric Travis for their\n   useful\
    \ comments about this document.\n"
- title: References
  contents:
  - "References\n   [AFP98]   Allman, M., Floyd, S. and C. Partridge, \"Increasing\
    \ TCP's\n             Initial Window\", RFC 2414, September 1998.\n   [AHKO97]\
    \  Mark Allman, Chris Hayes, Hans Kruse, and Shawn Ostermann.\n             TCP\
    \ Performance Over Satellite Links.  In Proceedings of\n             the 5th International\
    \ Conference on Telecommunication\n             Systems, March 1997.\n   [All97]\
    \   Mark Allman.  Improving TCP Performance Over Satellite\n             Channels.\
    \  Master's thesis, Ohio University, June 1997.\n   [All98]   Mark Allman.  On\
    \ the Generation and Use of TCP\n             Acknowledgments. ACM Computer Communication\
    \ Review, 28(5),\n             October 1998.\n   [Bra89]   Braden, R., \"Requirements\
    \ for Internet Hosts --\n             Communication Layers\", STD 3, RFC 1122,\
    \ October 1989.\n   [FF96]    Kevin Fall and Sally Floyd.  Simulation-based Comparisons\n\
    \             of Tahoe, Reno and SACK TCP.  Computer Communication\n         \
    \    Review, July 1996.\n   [FF98]    Sally Floyd, Kevin Fall.  Promoting the\
    \ Use of End-to-End\n             Congestion Control in the Internet.  Submitted\
    \ to IEEE\n             Transactions on Networking.\n   [Flo94]   S. Floyd, TCP\
    \ and Successive Fast Retransmits. Technical\n             report, October 1994.\n\
    \             ftp://ftp.ee.lbl.gov/papers/fastretrans.ps.\n   [GJKFV98] Rohit\
    \ Goyal, Raj Jain, Shiv Kalyanaraman, Sonia Fahmy,\n             Bobby Vandalore,\
    \ Improving the Performance of TCP over the\n             ATM-UBR service, 1998.\
    \  Sumbitted to Computer\n             Communications.\n   [Jac90]   Van Jacobson.\
    \  Modified TCP Congestion Avoidance Algorithm.\n             Technical Report,\
    \ LBL, April 1990.\n   [JBB92]   Jacobson, V., Braden, R. and D. Borman, \"TCP\
    \ Extensions for\n             High Performance\", RFC 1323, May 1992.\n   [Jac88]\
    \   Van Jacobson.  Congestion Avoidance and Control.  In ACM\n             SIGCOMM,\
    \ 1988.\n   [Kno93]   Knowles, S., \"IESG Advice from Experience with Path MTU\n\
    \             Discovery\", RFC 1435, March 1993.\n   [Mar78]   James Martin. \
    \ Communications Satellite Systems.  Prentice\n             Hall, 1978.\n   [MD90]\
    \    Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191,\n           \
    \  November 1990.\n   [MM96]    Matt Mathis and Jamshid Mahdavi.  Forward Acknowledgment:\n\
    \             Refining TCP Congestion Control.  In ACM SIGCOMM, 1996.\n   [MMFR96]\
    \  Mathis, M., Mahdavi, J., Floyd, S. and A.  Romanow, \"TCP\n             Selective\
    \ Acknowledgment Options\", RFC 2018, October 1996.\n   [Mon98]   M. J. Montpetit.\
    \ TELEDESIC: Enabling The Global Community\n             Interaccess. In Proc.\
    \ of the International Wireless\n             Symposium, May 1998.\n   [MSMO97]\
    \  M. Mathis, J. Semke, J. Mahdavi, T. Ott, \"The Macroscopic\n             Behavior\
    \ of the TCP Congestion Avoidance Algorithm\",\n             Computer Communication\
    \ Review, volume 27, number3, July\n             1997.  available from\n     \
    \        http://www.psc.edu/networking/papers/papers.html.\n   [Pos81]   Postel,\
    \ J., \"Transmission Control Protocol\", STD 7, RFC\n             793, September\
    \ 1981.\n   [PS97]    Craig Partridge and Tim Shepard.  TCP Performance Over\n\
    \             Satellite Links.  IEEE Network, 11(5), September/October\n     \
    \        1997.\n   [PSC]     Jamshid Mahdavi.  Enabling High Performance Data\
    \ Transfers\n             on Hosts.  http://www.psc.edu/networking/perf_tune.html.\n\
    \   [SMM98]   Jeff Semke, Jamshid Mahdavi and Matt Mathis.  Automatic TCP\n  \
    \           Buffer Tuning.  In ACM SIGCOMM, August 1998.  To appear.\n   [Sta94]\
    \   William Stallings.  Data and Computer Communications.\n             MacMillian,\
    \ 4th edition, 1994.\n   [Ste97]   Stevens, W., \"TCP Slow Start, Congestion Avoidance,\
    \ Fast\n             Retransmit, and Fast Recovery Algorithms\", RFC 2001,January\n\
    \             1997.\n   [Stu95]   M. A. Sturza. Architecture of the TELEDESIC\
    \ Satellite\n             System. In Proceedings of the International Mobile\n\
    \             Satellite Conference, 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Allman\n   NASA Lewis Research Center/Sterling Software\n\
    \   21000 Brookpark Rd.  MS 54-2\n   Cleveland, OH  44135\n   Phone: +1 216 433\
    \ 6586\n   EMail: mallman@lerc.nasa.gov\n   http://roland.lerc.nasa.gov/~mallman\n\
    \   Daniel R. Glover\n   NASA Lewis Research Center\n   21000 Brookpark Rd.\n\
    \   Cleveland, OH  44135\n   Phone: +1 216 433 2847\n   EMail: Daniel.R.Glover@lerc.nasa.gov\n\
    \   Luis A. Sanchez\n   BBN Technologies\n   GTE Internetworking\n   10 Moulton\
    \ Street\n   Cambridge, MA  02140\n   USA\n   Phone: +1 617 873 3351\n   EMail:\
    \ lsanchez@ir.bbn.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
