- contents:
  - "             Session Description Protocol Elements for the\n                Forward
    Error Correction (FEC) Framework\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the use of the Session Description Protocol\n
    \  (SDP) to describe the parameters required to signal the Forward Error\n   Correction
    (FEC) Framework Configuration Information between the\n   sender(s) and receiver(s).
    \ This document also provides examples that\n   show the semantics for grouping
    multiple source and repair flows\n   together for the applications that simultaneously
    use multiple\n   instances of the FEC Framework.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6364.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Requirements Notation ...........................................3\n   3.
    Forward Error Correction (FEC) and FEC Framework ................3\n      3.1.
    Forward Error Correction (FEC) .............................3\n      3.2. FEC
    Framework ..............................................4\n      3.3. FEC Framework
    Configuration Information ....................4\n   4. SDP Elements ....................................................5\n
    \     4.1. Transport Protocol Identifiers .............................6\n      4.2.
    Media Stream Grouping ......................................6\n      4.3. Source
    IP Addresses ........................................6\n      4.4. Source Flows
    ...............................................6\n      4.5. Repair Flows ...............................................7\n
    \     4.6. Repair Window ..............................................8\n      4.7.
    Bandwidth Specification ....................................9\n   5. Scenarios
    and Examples .........................................10\n      5.1. Declarative
    Considerations ................................10\n      5.2. Offer/Answer Model
    Considerations .........................10\n   6. SDP Examples ...................................................11\n
    \     6.1. One Source Flow, One Repair Flow, and One FEC Scheme ......11\n      6.2.
    Two Source Flows, One Repair Flow, and One FEC Scheme .....12\n      6.3. Two
    Source Flows, Two Repair Flows, and Two FEC Schemes ...13\n      6.4. One Source
    Flow, Two Repair Flows, and Two FEC Schemes ....14\n   7. Security Considerations
    ........................................15\n   8. IANA Considerations ............................................15\n
    \     8.1. Registration of Transport Protocols .......................15\n      8.2.
    Registration of SDP Attributes ............................16\n   9. Acknowledgments
    ................................................16\n   10. References ....................................................17\n
    \     10.1. Normative References .....................................17\n      10.2.
    Informative References ...................................17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Forward Error Correction (FEC) Framework, described
    in [RFC6363],\n   outlines a general framework for using FEC-based error recovery
    in\n   packet flows carrying media content.  While a continuous signaling\n   between
    the sender(s) and receiver(s) is not required for a Content\n   Delivery Protocol
    (CDP) that uses the FEC Framework, a set of\n   parameters pertaining to the FEC
    Framework has to be initially\n   communicated between the sender(s) and receiver(s).
    \ A signaling\n   protocol (such as the one described in [FECFRAME-CFG-SIGNAL])
    is\n   required to enable such communication, and the parameters need to be\n
    \  appropriately encoded so that they can be carried by the signaling\n   protocol.\n
    \  One format to encode the parameters is the Session Description\n   Protocol
    (SDP) [RFC4566].  SDP provides a simple text-based format\n   for announcements
    and invitations to describe multimedia sessions.\n   These SDP announcements and
    invitations include sufficient\n   information for the sender(s) and receiver(s)
    to participate in the\n   multimedia sessions.  SDP also provides a framework
    for capability\n   negotiation, which can be used to negotiate all, or a subset,
    of the\n   parameters pertaining to the individual sessions.\n   The purpose of
    this document is to introduce the SDP elements that\n   are used by the CDPs using
    the FEC Framework that choose SDP\n   [RFC4566] for their multimedia sessions.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   [RFC2119].\n"
  title: 2.  Requirements Notation
- contents:
  - "3.  Forward Error Correction (FEC) and FEC Framework\n   This section gives a
    brief overview of FEC and the FEC Framework.\n"
  - contents:
    - "3.1.  Forward Error Correction (FEC)\n   Any application that needs reliable
      transmission over an unreliable\n   packet network has to cope with packet losses.
      \ FEC is an effective\n   approach that provides reliable transmission, particularly
      in\n   multicast and broadcast applications where the feedback from the\n   receiver(s)
      is either not available or quite limited.\n   In a nutshell, FEC groups source
      packets into blocks and applies\n   protection to generate a desired number
      of repair packets.  These\n   repair packets can be sent on demand or independently
      of any receiver\n   feedback.  The choice depends on the FEC scheme or the Content\n
      \  Delivery Protocol used by the application, the packet loss\n   characteristics
      of the underlying network, the transport scheme\n   (e.g., unicast, multicast,
      and broadcast), and the application\n   itself.  At the receiver side, lost
      packets can be recovered by\n   erasure decoding provided that a sufficient
      number of source and\n   repair packets have been received.\n"
    title: 3.1.  Forward Error Correction (FEC)
  - contents:
    - "3.2.  FEC Framework\n   The FEC Framework [RFC6363] outlines a general framework
      for using\n   FEC codes in multimedia applications that stream audio, video,
      or\n   other types of multimedia content.  It defines the common components\n
      \  and aspects of Content Delivery Protocols (CDPs).  The FEC Framework\n   also
      defines the requirements for the FEC schemes that need to be\n   used within
      a CDP.  However, the details of the FEC schemes are not\n   specified within
      the FEC Framework.  For example, the FEC Framework\n   defines what configuration
      information has to be known at the sender\n   and receiver(s) at a minimum,
      but the FEC Framework neither specifies\n   how the FEC repair packets are generated
      and used to recover missing\n   source packets, nor dictates how the configuration
      information is\n   communicated between the sender and receiver(s).  These are
      rather\n   specified by the individual FEC schemes or CDPs.\n"
    title: 3.2.  FEC Framework
  - contents:
    - "3.3.  FEC Framework Configuration Information\n   The FEC Framework [RFC6363]
      defines a minimum set of information that\n   has to be communicated between
      the sender and receiver(s) for proper\n   operation of a FEC scheme.  This information
      is called the \"FEC\n   Framework Configuration Information\".  This information
      includes\n   unique identifiers for the source and repair flows that carry the\n
      \  source and repair packets, respectively.  It also specifies how the\n   sender
      applies protection to the source flow(s) and how the repair\n   flow(s) can
      be used to recover lost data.\n   Multiple instances of the FEC Framework can
      simultaneously exist at\n   the sender and the receiver(s) for different source
      flows, for the\n   same source flow, or for various combinations of the source
      flows.\n   Each instance of the FEC Framework provides the following FEC\n   Framework
      Configuration Information:\n   1.  Identification of the repair flows.\n   2.
      \ For each source flow protected by the repair flow(s):\n       A.  Definition
      of the source flow.\n       B.  An integer identifier for this flow definition
      (i.e., tuple).\n           This identifier MUST be unique among all source flows
      that\n           are protected by the same FEC repair flow.  Integer\n           identifiers
      can be allocated starting from zero and\n           increasing by one for each
      flow.  However, any random (but\n           still unique) allocation is also
      possible.  A source flow\n           identifier need not be carried in source
      packets, since\n           source packets are directly associated with a flow
      by virtue\n           of their packet headers.\n   3.  The FEC Encoding ID,
      identifying the FEC scheme.\n   4.  The length of the Explicit Source FEC Payload
      ID (in octets).\n   5.  Zero or more FEC-Scheme-Specific Information (FSSI)
      elements,\n       each consisting of a name and a value where the valid element\n
      \      names and value ranges are defined by the FEC scheme.\n   FSSI includes
      the information that is specific to the FEC scheme used\n   by the CDP.  FSSI
      is used to communicate the information that cannot\n   be adequately represented
      otherwise and is essential for proper FEC\n   encoding and decoding operations.
      \ The motivation behind separating\n   the FSSI required only by the sender
      (which is carried in a Sender-\n   Side FEC-Scheme-Specific Information (SS-FSSI)
      container) from the\n   rest of the FSSI is to provide the receiver or the third-party\n
      \  entities a means of controlling the FEC operations at the sender.\n   Any
      FSSI other than the one solely required by the sender MUST be\n   communicated
      via the FSSI container.\n   The variable-length SS-FSSI and FSSI containers
      transmit the\n   information in textual representation and contain zero or more\n
      \  distinct elements, whose descriptions are provided by the fully\n   specified
      FEC schemes.\n"
    title: 3.3.  FEC Framework Configuration Information
  title: 3.  Forward Error Correction (FEC) and FEC Framework
- contents:
  - "4.  SDP Elements\n   This section defines the SDP elements that MUST be used
    to describe\n   the FEC Framework Configuration Information in multimedia sessions
    by\n   the CDPs that choose SDP [RFC4566] for their multimedia sessions.\n   Example
    SDP descriptions can be found in Section 6.\n"
  - contents:
    - "4.1.  Transport Protocol Identifiers\n   This specification defines a new transport
      protocol identifier for\n   the FEC schemes that take a UDP-formatted input
      stream and append an\n   Explicit Source FEC Payload ID, as described in Section
      5.3 of\n   [RFC6363], to generate a source flow.  This new protocol identifier\n
      \  is called 'FEC/UDP'.  To use input streams that are formatted\n   according
      to another <proto> (as listed in the table for the 'proto'\n   field in the
      \"Session Description Protocol (SDP) Parameters\"\n   registry), the corresponding
      'FEC/<proto>' transport protocol\n   identifier MUST be registered with IANA
      by following the instructions\n   specified in [RFC4566].\n   Note that if a
      FEC scheme does not use the Explicit Source FEC\n   Payload ID as described
      in Section 4.1 of [RFC6363], then the\n   original transport protocol identifier
      MUST be used to support\n   backward compatibility with the receivers that do
      not support FEC\n   at all.\n   This specification also defines another transport
      protocol\n   identifier, 'UDP/FEC', to indicate the FEC repair packet format\n
      \  defined in Section 5.4 of [RFC6363].  For detailed registration\n   information,
      refer to Section 8.1.\n"
    title: 4.1.  Transport Protocol Identifiers
  - contents:
    - "4.2.  Media Stream Grouping\n   In the FEC Framework, the 'group' attribute
      and the FEC grouping\n   semantics defined in [RFC5888] and [RFC5956], respectively,
      are used\n   to associate source and repair flows.\n"
    title: 4.2.  Media Stream Grouping
  - contents:
    - "4.3.  Source IP Addresses\n   The 'source-filter' attribute of SDP (\"a=source-filter\")
      as defined\n   in [RFC4570] is used to express the source addresses or fully\n
      \  qualified domain names in the FEC Framework.\n"
    title: 4.3.  Source IP Addresses
  - contents:
    - "4.4.  Source Flows\n   The FEC Framework allows that multiple source flows
      MAY be grouped\n   and protected together by single or multiple FEC Framework
      instances.\n   For this reason, as described in Section 3.3, individual source
      flows\n   MUST be identified with unique identifiers.  For this purpose, we\n
      \  introduce the attribute 'fec-source-flow'.\n   The syntax for the new attribute
      in ABNF [RFC5234] is as follows:\n        fec-source-flow-line = \"a=fec-source-flow:\"
      SP source-id\n             [\";\" SP tag-length] CRLF\n        source-id = \"id=\"
      src-id\n        src-id = 1*DIGIT ; Represented as 32-bit non-negative\n                         ;
      integers, and leading zeros are ignored\n        tag-length = \"tag-len=\" tlen\n
      \       tlen = %x31-39 *DIGIT\n   The REQUIRED parameter 'id' is used to identify
      the source flow.\n   Parameter 'id' MUST be an integer.\n   The 'tag-len' parameter
      is used to specify the length of the Explicit\n   Source FEC Payload ID field
      (in octets).  In the case that an\n   Explicit Source FEC Payload ID is used,
      the 'tag-len' parameter MUST\n   exist and indicate its length.  Otherwise,
      the 'tag-len' parameter\n   MUST NOT exist.\n"
    title: 4.4.  Source Flows
  - contents:
    - "4.5.  Repair Flows\n   A repair flow MUST contain only repair packets formatted
      as described\n   in [RFC6363] for a single FEC Framework instance; i.e., packets\n
      \  belonging to source flows or other repair flows from a different FEC\n   Framework
      instance cannot be sent within this flow.  We introduce the\n   attribute 'fec-repair-flow'
      to describe the repair flows.\n   The syntax for the new attribute in ABNF is
      as follows (CHAR and CTL\n   are defined in [RFC5234]):\n      fec-repair-flow-line
      = \"a=fec-repair-flow:\" SP fec-encoding-id\n           [\";\" SP flow-preference]\n
      \          [\";\" SP sender-side-scheme-specific]\n           [\";\" SP scheme-specific]
      CRLF\n      fec-encoding-id = \"encoding-id=\" enc-id\n      enc-id = 1*DIGIT
      ; FEC Encoding ID\n      flow-preference = \"preference-lvl=\" preference-level-of-the-flow\n
      \     preference-level-of-the-flow = 1*DIGIT\n      sender-side-scheme-specific
      = \"ss-fssi=\" sender-info\n      sender-info = element *( \",\" element )\n
      \     element     = name \":\" value\n      name        = token\n      token
      \      = 1*<any CHAR except CTLs or separators>\n      value       = *<any CHAR
      except CTLs or separators>\n      separator   = \"(\" / \")\" / \"<\" / \">\"
      / \"@\"\n                     / \",\" / \";\" / \":\" / \"\\\" / DQUOTE\n                     /
      \"/\" / \"[\" / \"]\" / \"?\" / \"=\"\n                     / \"{\" / \"}\"
      / SP / HTAB\n      scheme-specific = \"fssi=\" scheme-info\n      scheme-info
      = element *( \",\" element )\n   The REQUIRED parameter 'encoding-id' is used
      to identify the FEC\n   scheme used to generate this repair flow.  These identifiers
      (in the\n   range of [0 - 255]) are registered by the FEC schemes that use the\n
      \  FEC Framework and are maintained by IANA.\n   The OPTIONAL parameter 'preference-lvl'
      is used to indicate the\n   preferred order for using the repair flows.  The
      exact usage of the\n   parameter 'preference-lvl' and the pertaining rules MAY
      be defined by\n   the FEC scheme or the CDP.  If the parameter 'preference-lvl'
      does\n   not exist, it means that the receiver(s) MAY receive and use the\n
      \  repair flows in any order.  However, if a preference level is\n   assigned
      to the repair flow(s), the receivers are encouraged to\n   follow the specified
      order in receiving and using the repair flow(s).\n   The OPTIONAL parameters
      'ss-fssi' and 'fssi' are containers to convey\n   the FEC-Scheme-Specific Information
      (FSSI) that includes the\n   information that is specific to the FEC scheme
      used by the CDP and is\n   necessary for proper FEC encoding and decoding operations.
      \ The FSSI\n   required only by the sender (the Sender-Side FSSI) MUST be\n
      \  communicated in the container specified by the parameter 'ss-fssi'.\n   Any
      other FSSI MUST be communicated in the container specified by the\n   parameter
      'fssi'.  In both containers, FSSI is transmitted in the\n   form of textual
      representation and MAY contain multiple distinct\n   elements.  If the FEC scheme
      does not require any specific\n   information, the 'ss-fssi' and 'fssi' parameters
      MUST NOT exist.\n"
    title: 4.5.  Repair Flows
  - contents:
    - "4.6.  Repair Window\n   The repair window is the time that spans a FEC block,
      which consists\n   of the source block and the corresponding repair packets.\n
      \  At the sender side, the FEC encoder processes a block of source\n   packets
      and generates a number of repair packets.  Then, both the\n   source and repair
      packets are transmitted within a certain duration\n   not larger than the value
      of the repair window.  The value of the\n   repair window impacts the maximum
      number of source packets that can\n   be included in a FEC block.\n   At the
      receiver side, the FEC decoder should wait at least for the\n   duration of
      the repair window after getting the first packet in a FEC\n   block, to allow
      all the repair packets to arrive.  (The waiting time\n   can be adjusted if
      there are missing packets at the beginning of the\n   FEC block.)  The FEC decoder
      can start decoding the already received\n   packets sooner; however, it SHOULD
      NOT register a FEC decoding\n   failure until it waits at least for the duration
      of the repair\n   window.\n   This document specifies a new attribute to describe
      the size of the\n   repair window in milliseconds and microseconds.\n   The
      syntax for the attribute in ABNF is as follows:\n        repair-window-line
      = \"a=repair-window:\" window-size unit CRLF\n        window-size = %x31-39
      *DIGIT ; Represented as\n                                     ; 32-bit non-negative
      integers\n        unit = \"ms\" / \"us\"\n   <unit> is the unit of time specified
      for the repair window size.  Two\n   units are defined here: 'ms', which stands
      for milliseconds; and\n   'us', which stands for microseconds.\n   The 'a=repair-window'
      attribute is a media-level attribute, since\n   each repair flow MAY have a
      different repair window size.\n   Specifying the repair window size in an absolute
      time value does not\n   necessarily correspond to an integer number of packets
      or exactly\n   match with the clock rate used in RTP (in the case of RTP transport),\n
      \  causing mismatches among subsequent repair windows.  However, in\n   practice,
      this mismatch does not break anything in the FEC decoding\n   process.\n"
    title: 4.6.  Repair Window
  - contents:
    - "4.7.  Bandwidth Specification\n   The bandwidth specification as defined in
      [RFC4566] denotes the\n   proposed bandwidth to be used by the session or media.
      \ The\n   specification of bandwidth is OPTIONAL.\n   In the context of the
      FEC Framework, the bandwidth specification can\n   be used to express the bandwidth
      of the repair flows or the bandwidth\n   of the session.  If included in the
      SDP, it SHALL adhere to the\n   following rules.\n   The session-level bandwidth
      for a FEC Framework instance or the\n   media-level bandwidth for the individual
      repair flows MAY be\n   specified.  In this case, it is RECOMMENDED that the
      Transport\n   Independent Application Specific (TIAS) bandwidth modifier [RFC3890]\n
      \  and the 'a=maxprate' attribute be used, unless the Application-\n   Specific
      (AS) bandwidth modifier [RFC4566] is used.  The use of the\n   AS bandwidth
      modifier is NOT RECOMMENDED, since TIAS allows the\n   calculation of the bitrate
      according to the IP version and transport\n   protocol whereas AS does not.
      \ Thus, in TIAS-based bitrate\n   calculations, the packet size SHALL include
      all headers and payload,\n   excluding the IP and UDP headers.  In AS-based
      bitrate calculations,\n   the packet size SHALL include all headers and payload,
      plus the IP\n   and UDP headers.\n   For the ABNF syntax information of the
      TIAS and AS, refer to\n   [RFC3890] and [RFC4566], respectively.\n"
    title: 4.7.  Bandwidth Specification
  title: 4.  SDP Elements
- contents:
  - "5.  Scenarios and Examples\n   This section discusses the considerations for
    Session Announcement\n   and Offer/Answer Models.\n"
  - contents:
    - "5.1.  Declarative Considerations\n   In multicast-based applications, the FEC
      Framework Configuration\n   Information pertaining to all FEC protection options
      available at the\n   sender MAY be advertised to the receivers as a part of
      a session\n   announcement.  This way, the sender can let the receivers know
      all\n   available options for FEC protection.  Based on their needs, the\n   receivers
      can choose protection provided by one or more FEC Framework\n   instances and
      subscribe to the respective multicast session(s) to\n   receive the repair flow(s).
      \ Unless explicitly required by the CDP,\n   the receivers SHOULD NOT send an
      answer back to the sender specifying\n   their choices, since this can easily
      overwhelm the sender,\n   particularly in large-scale multicast applications.\n"
    title: 5.1.  Declarative Considerations
  - contents:
    - "5.2.  Offer/Answer Model Considerations\n   In unicast-based applications,
      a sender and receiver MAY adopt the\n   Offer/Answer Model [RFC3264] to set
      the FEC Framework Configuration\n   Information.  In this case, the sender offers
      the options available\n   to this particular receiver, and the receiver answers
      back to the\n   sender with its choice(s).\n   Receivers supporting the SDP
      Capability Negotiation Framework\n   [RFC5939] MAY also use this framework to
      negotiate all, or a subset,\n   of the FEC Framework parameters.\n   The backward
      compatibility in the Offer/Answer Model is handled as\n   specified in [RFC5956].\n"
    title: 5.2.  Offer/Answer Model Considerations
  title: 5.  Scenarios and Examples
- contents:
  - "6.  SDP Examples\n   This section provides SDP examples that can be used by the
    FEC\n   Framework.\n   [RFC5888] defines the media stream identification attribute
    ('mid')\n   as a token in ABNF.  In contrast, the identifiers for the source\n
    \  flows are integers and can be allocated starting from zero and\n   increasing
    by one for each flow.  To avoid any ambiguity, using the\n   same values for identifying
    the media streams and source flows is NOT\n   RECOMMENDED, even when 'mid' values
    are integers.\n   In the examples below, random FEC Encoding IDs will be used
    for\n   illustrative purposes.  Artificial content for the SS-FSSI and FSSI\n
    \  will also be provided.\n"
  - contents:
    - "6.1.  One Source Flow, One Repair Flow, and One FEC Scheme\n                 SOURCE
      FLOWS             | INSTANCE #1\n                 S1: Source Flow |--------|
      R1: Repair Flow\n                                          |\n                           Figure
      1: Scenario #1\n   In this example, we have one source video flow (mid:S1) and
      one FEC\n   repair flow (mid:R1).  We form one FEC group with the\n   \"a=group:FEC-FR
      S1 R1\" line.  The source and repair flows are sent to\n   the same port on
      different multicast groups.  The repair window is\n   set to 150 ms.\n        v=0\n
      \       o=ali 1122334455 1122334466 IN IP4 fec.example.com\n        s=FEC Framework
      Examples\n        t=0 0\n        a=group:FEC-FR S1 R1\n        m=video 30000
      RTP/AVP 100\n        c=IN IP4 233.252.0.1/127\n        a=rtpmap:100 MP2T/90000\n
      \       a=fec-source-flow: id=0\n        a=mid:S1\n        m=application 30000
      UDP/FEC\n        c=IN IP4 233.252.0.2/127\n        a=fec-repair-flow: encoding-id=0;
      ss-fssi=n:7,k:5\n        a=repair-window:150ms\n        a=mid:R1\n"
    title: 6.1.  One Source Flow, One Repair Flow, and One FEC Scheme
  - contents:
    - "6.2.  Two Source Flows, One Repair Flow, and One FEC Scheme\n                SOURCE
      FLOWS\n                S2: Source Flow |         | INSTANCE #1\n                                |---------|
      R2: Repair Flow\n                S3: Source Flow |\n                           Figure
      2: Scenario #2\n   In this example, we have two source video flows (mid:S2 and
      mid:S3)\n   and one FEC repair flow (mid:R2) protecting both source flows.  We\n
      \  form one FEC group with the \"a=group:FEC-FR S2 S3 R2\" line.  The\n   source
      and repair flows are sent to the same port on different\n   multicast groups.
      \ The repair window is set to 150500 us.\n        v=0\n        o=ali 1122334455
      1122334466 IN IP4 fec.example.com\n        s=FEC Framework Examples\n        t=0
      0\n        a=group:FEC-FR S2 S3 R2\n        m=video 30000 RTP/AVP 100\n        c=IN
      IP4 233.252.0.1/127\n        a=rtpmap:100 MP2T/90000\n        a=fec-source-flow:
      id=0\n        a=mid:S2\n        m=video 30000 RTP/AVP 101\n        c=IN IP4
      233.252.0.2/127\n        a=rtpmap:101 MP2T/90000\n        a=fec-source-flow:
      id=1\n        a=mid:S3\n        m=application 30000 UDP/FEC\n        c=IN IP4
      233.252.0.3/127\n        a=fec-repair-flow: encoding-id=0; ss-fssi=n:7,k:5\n
      \       a=repair-window:150500us\n        a=mid:R2\n"
    title: 6.2.  Two Source Flows, One Repair Flow, and One FEC Scheme
  - contents:
    - "6.3.  Two Source Flows, Two Repair Flows, and Two FEC Schemes\n                 SOURCE
      FLOWS             | INSTANCE #1\n                 S4: Source Flow |--------|
      R3: Repair Flow\n                 S5: Source Flow |--------| INSTANCE #2\n                                          |
      R4: Repair Flow\n                           Figure 3: Scenario #3\n   In this
      example, we have two source video flows (mid:S4 and mid:S5)\n   and two FEC
      repair flows (mid:R3 and mid:R4).  The source flows\n   mid:S4 and mid:S5 are
      protected by the repair flows mid:R3 and\n   mid:R4, respectively.  We form
      two FEC groups with the\n   \"a=group:FEC-FR S4 R3\" and \"a=group:FEC-FR S5
      R4\" lines.  The source\n   and repair flows are sent to the same port on different
      multicast\n   groups.  The repair window is set to 200 ms and 400 ms for the
      first\n   and second FEC group, respectively.\n        v=0\n        o=ali 1122334455
      1122334466 IN IP4 fec.example.com\n        s=FEC Framework Examples\n        t=0
      0\n        a=group:FEC-FR S4 R3\n        a=group:FEC-FR S5 R4\n        m=video
      30000 RTP/AVP 100\n        c=IN IP4 233.252.0.1/127\n        a=rtpmap:100 MP2T/90000\n
      \       a=fec-source-flow: id=0\n        a=mid:S4\n        m=video 30000 RTP/AVP
      101\n        c=IN IP4 233.252.0.2/127\n        a=rtpmap:101 MP2T/90000\n        a=fec-source-flow:
      id=1\n        a=mid:S5\n        m=application 30000 UDP/FEC\n        c=IN IP4
      233.252.0.3/127\n        a=fec-repair-flow: encoding-id=0; ss-fssi=n:7,k:5\n
      \       a=repair-window:200ms\n        a=mid:R3\n        m=application 30000
      UDP/FEC\n        c=IN IP4 233.252.0.4/127\n        a=fec-repair-flow: encoding-id=0;
      ss-fssi=n:14,k:10\n        a=repair-window:400ms\n        a=mid:R4\n"
    title: 6.3.  Two Source Flows, Two Repair Flows, and Two FEC Schemes
  - contents:
    - "6.4.  One Source Flow, Two Repair Flows, and Two FEC Schemes\n                 SOURCE
      FLOWS             | INSTANCE #1\n                 S6: Source Flow |--------|
      R5: Repair Flow\n                                 |\n                                 |--------|
      INSTANCE #2\n                                          | R6: Repair Flow\n                           Figure
      4: Scenario #4\n   In this example, we have one source video flow (mid:S6) and
      two FEC\n   repair flows (mid:R5 and mid:R6) with different preference levels.\n
      \  The source flow mid:S6 is protected by both of the repair flows.  We\n   form
      two FEC groups with the \"a=group:FEC-FR S6 R5\" and\n   \"a=group:FEC-FR S6
      R6\" lines.  The source and repair flows are sent\n   to the same port on different
      multicast groups.  The repair window is\n   set to 200 ms for both FEC groups.\n
      \    v=0\n     o=ali 1122334455 1122334466 IN IP4 fec.example.com\n     s=FEC
      Framework Examples\n     t=0 0\n     a=group:FEC-FR S6 R5\n     a=group:FEC-FR
      S6 R6\n     m=video 30000 RTP/AVP 100\n     c=IN IP4 233.252.0.1/127\n     a=rtpmap:100
      MP2T/90000\n     a=fec-source-flow: id=0\n     a=mid:S6\n     m=application
      30000 UDP/FEC\n     c=IN IP4 233.252.0.3/127\n     a=fec-repair-flow: encoding-id=0;
      preference-lvl=0; ss-fssi=n:7,k:5\n     a=repair-window:200ms\n     a=mid:R5\n
      \    m=application 30000 UDP/FEC\n     c=IN IP4 233.252.0.4/127\n     a=fec-repair-flow:
      encoding-id=1; preference-lvl=1; ss-fssi=t:3\n     a=repair-window:200ms\n     a=mid:R6\n"
    title: 6.4.  One Source Flow, Two Repair Flows, and Two FEC Schemes
  title: 6.  SDP Examples
- contents:
  - "7.  Security Considerations\n   There is a weak threat if the SDP is modified
    in a way that it shows\n   an incorrect association and/or grouping of the source
    and repair\n   flows.  Such attacks can result in failure of FEC protection and/or\n
    \  mishandling of other media streams.  It is RECOMMENDED that the\n   receiver
    perform an integrity check on SDP to only trust SDP from\n   trusted sources.
    \ The receiver MUST also follow the security\n   considerations of SDP [RFC4566].
    \ For other general security\n   considerations related to SDP, refer to [RFC4566].
    \ For the security\n   considerations related to the use of source address filters
    in SDP,\n   refer to [RFC4570].\n   The security considerations for the FEC Framework
    also apply.  Refer\n   to [RFC6363] for details.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  Registration of Transport Protocols\n   This specification updates the
      \"Session Description Protocol (SDP)\n   Parameters\" registry as defined in
      Section 8.2.2 of [RFC4566].\n   Specifically, it adds the following values to
      the table for the\n   'proto' field.\n      Type            SDP Name             Reference\n
      \     ------          ----------           -----------\n      proto           FEC/UDP
      \             [RFC6364]\n      proto           UDP/FEC              [RFC6364]\n"
    title: 8.1.  Registration of Transport Protocols
  - contents:
    - "8.2.  Registration of SDP Attributes\n   This document registers new attribute
      names in SDP.\n   SDP Attribute (\"att-field\"):\n        Attribute name:     fec-source-flow\n
      \       Long form:          Pointer to FEC Source Flow\n        Type of name:
      \      att-field\n        Type of attribute:  Media level\n        Subject to
      charset: No\n        Purpose:            Provide parameters for a FEC source
      flow\n        Reference:          [RFC6364]\n        Values:             See
      [RFC6364]\n   SDP Attribute (\"att-field\"):\n        Attribute name:     fec-repair-flow\n
      \       Long form:          Pointer to FEC Repair Flow\n        Type of name:
      \      att-field\n        Type of attribute:  Media level\n        Subject to
      charset: No\n        Purpose:            Provide parameters for a FEC repair
      flow\n        Reference:          [RFC6364]\n        Values:             See
      [RFC6364]\n   SDP Attribute (\"att-field\"):\n        Attribute name:     repair-window\n
      \       Long form:          Pointer to FEC Repair Window\n        Type of name:
      \      att-field\n        Type of attribute:  Media level\n        Subject to
      charset: No\n        Purpose:            Indicate the size of the repair window\n
      \       Reference:          [RFC6364]\n        Values:             See [RFC6364]\n"
    title: 8.2.  Registration of SDP Attributes
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgments\n   The author would like to thank the FEC Framework Design
    Team for\n   their inputs, suggestions, and contributions.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC6363]  Watson, M., Begen, A., and V. Roca,
      \"Forward Error\n              Correction (FEC) Framework\", RFC 6363, October
      2011.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4566]
      \ Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, July 2006.\n   [RFC4570]  Quinn, B. and R. Finlayson,
      \"Session Description Protocol\n              (SDP) Source Filters\", RFC 4570,
      July 2006.\n   [RFC5888]  Camarillo, G. and H. Schulzrinne, \"The Session Description\n
      \             Protocol (SDP) Grouping Framework\", RFC 5888, June 2010.\n   [RFC5956]
      \ Begen, A., \"Forward Error Correction Grouping Semantics in\n              the
      Session Description Protocol\", RFC 5956,\n              September 2010.\n   [RFC3890]
      \ Westerlund, M., \"A Transport Independent Bandwidth\n              Modifier
      for the Session Description Protocol (SDP)\",\n              RFC 3890, September
      2004.\n   [RFC5234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n
      \             Syntax Specifications: ABNF\", STD 68, RFC 5234,\n              January
      2008.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n
      \             with Session Description Protocol (SDP)\", RFC 3264,\n              June
      2002.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [FECFRAME-CFG-SIGNAL]\n              Asati,
      R., \"Methods to convey FEC Framework Configuration\n              Information\",
      Work in Progress, September 2011.\n   [RFC5939]  Andreasen, F., \"Session Description
      Protocol (SDP)\n              Capability Negotiation\", RFC 5939, September
      2010.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Author's Address\n   Ali Begen\n   Cisco\n   181 Bay Street\n   Toronto, ON  M5J
    2T3\n   Canada\n   EMail: abegen@cisco.com\n"
  title: Author's Address
