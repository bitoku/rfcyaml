- title: __initial_text__
  contents:
  - '            Requirements for Subscription to YANG Datastores

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides requirements for a service that allows client\n\
    \   applications to subscribe to updates of a YANG datastore.  Based on\n   criteria\
    \ negotiated as part of a subscription, updates will be pushed\n   to targeted\
    \ recipients.  Such a capability eliminates the need for\n   periodic polling\
    \ of YANG datastores by applications and fills a\n   functional gap in existing\
    \ YANG transports (i.e., Network\n   Configuration Protocol (NETCONF) and RESTCONF).\
    \  Such a service can\n   be summarized as a \"pub/sub\" service for YANG datastore\
    \ updates.\n   Beyond a set of basic requirements for the service, various\n \
    \  refinements are addressed.  These refinements include: periodicity of\n   object\
    \ updates, filtering out of objects underneath a requested a\n   subtree, and\
    \ delivery QoS guarantees.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7923.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Business Drivers ................................................3\n  \
    \    2.1. Pub/Sub in the Interface to the Routing System (I2RS) ......4\n    \
    \  2.2. Pub/Sub Variants on Network Elements .......................5\n      2.3.\
    \ Existing Generalized Pub/Sub Implementations ...............6\n   3. Terminology\
    \ .....................................................6\n   4. Requirements ....................................................7\n\
    \      4.1. Assumptions for Subscriber Behavior ........................7\n  \
    \    4.2. Subscription Service Requirements ..........................8\n    \
    \       4.2.1. General .............................................8\n      \
    \     4.2.2. Negotiation .........................................9\n        \
    \   4.2.3. Update Distribution ................................10\n          \
    \ 4.2.4. Transport ..........................................11\n           4.2.5.\
    \ Security Requirements ..............................11\n           4.2.6. Subscription\
    \ QoS ...................................13\n           4.2.7. Filtering ..........................................14\n\
    \           4.2.8. Assurance and Monitoring ...........................15\n  \
    \ 5. Security Considerations ........................................15\n   6.\
    \ References .....................................................16\n      6.1.\
    \ Normative References ......................................16\n      6.2. Informative\
    \ References ....................................16\n   Acknowledgments ...................................................17\n\
    \   Authors' Addresses ................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Applications interacting with YANG datastores require capabilities\n\
    \   beyond the traditional client-server configuration of network\n   elements.\
    \  One class of such applications are service-assurance\n   applications, which\
    \ must maintain a continuous view of operational\n   data and state.  Another\
    \ class of applications are security\n   applications, which must continuously\
    \ track changes made upon network\n   elements to ensure compliance with corporate\
    \ policy.\n   Periodic fetching of data is not an adequate solution for\n   applications\
    \ requiring frequent or prompt updates of remote object\n   state.  Applying polling-based\
    \ solutions here imposes a load on\n   networks, devices, and applications.  Additionally,\
    \ polling solutions\n   are brittle in the face of communication glitches, and\
    \ have\n   limitations in their ability to synchronize and calibrate retrieval\n\
    \   intervals across a network.  These limitations can be addressed by\n   including\
    \ generic object subscription mechanisms within network\n   elements, and allowing\
    \ these mechanisms to be applied in the context\n   of data that is conceptually\
    \ contained in YANG datastores.\n   This document aggregates requirements for\
    \ such subscription from a\n   variety of deployment scenarios.\n"
- title: 2.  Business Drivers
  contents:
  - "2.  Business Drivers\n   For decades, information delivery of current network\
    \ state has been\n   accomplished either by fetching from operations interfaces,\
    \ or via\n   dedicated, customized networking protocols.  With the growth of\n\
    \   centralized orchestration infrastructures, imperative policy\n   distribution,\
    \ and YANG's ascent as the dominant data modeling\n   language for use in programmatic\
    \ interfaces to network elements, this\n   mixture of fetch plus custom networking\
    \ protocols is no longer\n   sufficient.  What is needed is a push mechanism that\
    \ is able to\n   deliver object changes as they happen.\n   These push distribution\
    \ mechanisms will not replace existing\n   networking protocols.  Instead they\
    \ will supplement these protocols,\n   providing different response time, peering,\
    \ scale, and security\n   characteristics.\n   Push solutions will not displace\
    \ all existing operations\n   infrastructure needs.  And SNMP and MIBs will remain\
    \ widely deployed\n   and the de facto choice for many monitoring solutions. \
    \ But some\n   functions could be displaced.  Arguably the biggest shortcoming\
    \ of\n   SNMP for those applications concerns the need to rely on periodic\n \
    \  polling, because it introduces an additional load on the network and\n   devices,\
    \ because it is brittle if polling cycles are missed, and\n   because it is hard\
    \ to synchronize and calibrate across a network.  If\n   applications can only\
    \ use polling type interaction patterns with YANG\n   datastores, similar issues\
    \ can be expected.\n"
- title: 2.1.  Pub/Sub in the Interface to the Routing System (I2RS)
  contents:
  - "2.1.  Pub/Sub in the Interface to the Routing System (I2RS)\n   Various documents\
    \ about the Interface to the Routing System (I2RS)\n   highlight the need to provide\
    \ pub/sub capabilities between network\n   elements.  From [RFC7921], there are\
    \ references throughout the\n   document beginning in Section 6.2.  Some specific\
    \ examples include:\n   o  Section 7.6 of [RFC7921] provides high-level pub/sub\n\
    \      (notification) guidance.\n   o  Section 6.4.2 of [RFC7921] identifies \"\
    subscribing to an\n      information stream of route changes\" and \"receiving\
    \ notifications\n      about peers coming up or going down\".\n   o  Section 6.3\
    \ of [RFC7921] notes that when Local Configuration\n      preempts I2RS, external\
    \ notification might be necessary.\n   In addition, [USECASE] has relevant requirements.\
    \  A small subset\n   includes:\n   o  L-Data-REQ-12: The I2RS interface should\
    \ support user\n      subscriptions to data with the following parameters: push\
    \ of data\n      synchronously or asynchronously via registered subscriptions...\n\
    \   o  L-DATA-REQ-07: The I2RS interface (protocol and instant messages\n    \
    \  (IMs)) should allow a subscriber to select portions of the data\n      model.\n\
    \   o  PI-REQ01: Monitor the available routes installed in the Routing\n     \
    \ Information Base (RIB) of each forwarding device, including near\n      real-time\
    \ notification of route installation and removal.\n   o  BGP-REQ10: The I2RS client\
    \ SHOULD be able to instruct the I2RS\n      agent(s) to notify the I2RS client\
    \ when the BGP processes on an\n      associated routing system observe a route\
    \ change to a specific set\n      of IP Prefixes and associated prefixes.... The\
    \ I2RS agent should\n      be able to notify the client via the publish or subscribe\n\
    \      mechanism.\n   o  IGP-REQ-07: The I2RS interface (protocol and IMs) should\
    \ support a\n      mechanism where the I2RS Clients can subscribe to the I2RS\
    \ Agent's\n      notification of critical node IGP events.\n   o  MPLS-LDP-REQ-03:\
    \ The I2RS Agent notifications should allow an I2RS\n      client to subscribe\
    \ to a stream of state changes regarding the LDP\n      sessions or LDP Label\
    \ Switched Paths (LSPs) from the I2RS Agent.\n   o  L-Data-REQ-01: I2RS must be\
    \ able to collect large data sets from\n      the network with high frequency\
    \ and resolution, and with minimal\n      impact to the device's CPU and memory.\n\
    \   Also, Section 7.4.3 of [RFC7922] includes this pub/sub requirement:\n   o\
    \  I2RS agents MUST support publishing I2RS trace log information to\n      that\
    \ feed as described in [this document].  Subscribers would then\n      receive\
    \ a live stream of I2RS interactions in trace log format and\n      could flexibly\
    \ choose to do a number of things with the log\n      messages.\n"
- title: 2.2.  Pub/Sub Variants on Network Elements
  contents:
  - "2.2.  Pub/Sub Variants on Network Elements\n   This document is intended to cover\
    \ requirements beyond I2RS.  Looking\n   at history, there are many examples of\
    \ switching and routing\n   protocols that have done explicit or implicit pub/sub\
    \ in the past.\n   In addition, new policy notification mechanisms that operate\
    \ on\n   switches and routers are being specified now.  A small subset of\n  \
    \ current and past subscription mechanisms includes:\n   o  Multicast topology\
    \ establishment is accomplished before any\n      content delivery is made to\
    \ endpoints (IGMP, PIM, etc.).\n   o  Secure Automation and Continuous Monitoring\
    \ (SACM) allows\n      subscription into devices, which may then push spontaneous\
    \ changes\n      in their configured hardware and software [SACMREQ].\n   o  In\
    \ MPLS VPNs [RFC6513], a Customer Edge router exchanges PIM\n      control messages\
    \ before Provider Edge (PE) Routing Adjacencies are\n      passed [RFC6513].\n\
    \   o  After OSPF establishes its adjacencies, Link State Advertisement\n    \
    \  will then commence [RFC2328].\n   Worthy of note in the examples above is the\
    \ wide variety of\n   underlying transports.  A generalized pub/sub mechanism,\
    \ therefore\n   should be structured to support alternative transports.  Based\
    \ on\n   current I2RS requirements, NETCONF should be the initially supported\n\
    \   transport due to the need for connection-oriented/unicast\n   communication.\
    \  Eventual support for multicast and broadcast\n   subscription update distribution\
    \ will be needed as well.\n"
- title: 2.3.  Existing Generalized Pub/Sub Implementations
  contents:
  - "2.3.  Existing Generalized Pub/Sub Implementations\n   TIBCO, RSS, Common Object\
    \ Request Broker Architecture (CORBA), and\n   other technologies all show precursor\
    \ pub/sub technologies.  However,\n   there are new needs (described in Section\
    \ 4 below) that these\n   technologies do not serve.  We need a new pub/sub technology.\n\
    \   There are at least two widely deployed generalized pub/sub\n   implementations\
    \ that come close to current needs: Extensible\n   Messaging and Presence Protocol\
    \ (XMPP) [XEP-0060] and Data\n   Distribution Service (DDS) [OMG-DDS].  Both serve\
    \ as proof-points\n   that a highly scalable distributed datastore implementation\n\
    \   connecting millions of edge devices is possible.\n   Because of these proof-points,\
    \ we can be comfortable that the\n   underlying technologies can enable reusable\
    \ generalized YANG object\n   distribution.  Analysis will need to fully dimension\
    \ the speed and\n   scale of such object distribution for various subtree sizes\
    \ and\n   transport types.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\
    \  Although\n   this document is not a protocol specification, the use of this\n\
    \   language clarifies the instructions to protocol designers producing\n   solutions\
    \ that satisfy the requirements set out in this document.\n   A Subscriber makes\
    \ requests for set(s) of YANG object data.\n   A Publisher is responsible for\
    \ distributing subscribed YANG object\n   data per the terms of a subscription.\
    \  In general, a Publisher is the\n   owner of the YANG datastore that is subjected\
    \ to the subscription.\n   A Receiver is the target to which a Publisher pushes\
    \ updates.  In\n   general, the Receiver and Subscriber will be the same entity.\
    \  A\n   Subscription Service provides subscriptions to Subscribers of YANG\n\
    \   data.\n   A Subscription Service interacts with the Publisher of the YANG\
    \ data\n   as needed to provide the data per the terms of the subscription.\n\
    \   A subscription request for one or more YANG subtrees (including\n   single\
    \ leafs) is made by the Subscriber of a Publisher and is\n   targeted to a Receiver.\
    \  A subscription may include constraints that\n   dictate how often or under\
    \ what conditions YANG information updates\n   might be sent.\n   A subscription\
    \ is a contract between a Subscription Service and a\n   Subscriber that stipulates\
    \ the data to be pushed and the associated\n   terms.\n   A datastore is defined\
    \ in [RFC6241].\n   An Update provides object changes that have occurred within\n\
    \   subscribed YANG subtree(s).  An Update must include the current\n   status\
    \ of (data) node instances for which filtering has indicated\n   they have different\
    \ status than previously provided.  An Update may\n   include a bundled set of\
    \ ordered/sequential changes for a given\n   object that have been made since\
    \ the last update.\n   A Filter contains evaluation criteria, which are evaluated\
    \ against\n   YANG object(s) within a subscription.  There are two types of\n\
    \   Filters: Subtree Filters, which identify selected objects/nodes\n   published\
    \ under a target data node, and object element and attribute\n   Filters where\
    \ an object should only be published if it has properties\n   meeting specified\
    \ Filter criteria.\n"
- title: 4.  Requirements
  contents:
  - "4.  Requirements\n   Many of the requirements within this section have been adapted\
    \ from\n   the XMPP [XEP-0060] and DDS [OMG-DDS] requirements specifications.\n"
- title: 4.1.  Assumptions for Subscriber Behavior
  contents:
  - "4.1.  Assumptions for Subscriber Behavior\n   This document provides requirements\
    \ for the Subscription Service.  It\n   does not define all the requirements for\
    \ the Subscriber/Receiver.\n   However in order to frame the desired behavior\
    \ of the Subscription\n   Service, it is important to specify key input constraints.\n\
    \   A Subscriber SHOULD avoid attempting to establish multiple\n   subscriptions\
    \ pertaining to the same information, i.e., referring to\n   the same datastore\
    \ YANG subtrees.\n   A Subscriber MAY provide subscription QoS criteria to the\n\
    \   Subscription Service; if the Subscription Service is unable to meet\n   those\
    \ criteria, the subscription SHOULD NOT be established.\n   When a Subscriber\
    \ and Receiver are the same entity and the transport\n   session is lost/terminated,\
    \ the Subscriber MUST re-establish any\n   subscriptions it previously created\
    \ via signaling over the transport\n   session.  That is, there is no requirement\
    \ for the life span of such\n   signaled subscriptions to extend beyond the life\
    \ span of the\n   transport session.\n   A Subscriber MUST be able to infer when\
    \ a Subscription Service is no\n   longer active and when no more updates are\
    \ being sent.\n   A Subscriber MAY check with a Subscription Service to validate\
    \ the\n   existence and monitored subtrees of a subscription.\n   A Subscriber\
    \ MUST be able to periodically lease and extend the lease\n   of a subscription\
    \ from a Subscription Service.\n"
- title: 4.2.  Subscription Service Requirements
  contents:
  - '4.2.  Subscription Service Requirements

    '
- title: 4.2.1.  General
  contents:
  - "4.2.1.  General\n   A Subscription Service MUST support the ability to create,\
    \ renew,\n   time out, and terminate a subscription.\n   A Subscription Service\
    \ MUST be able to support and independently\n   track multiple subscription requests\
    \ by the same Subscriber.\n   A Subscription Service MUST be able to support an\
    \ add/change/delete\n   of subscriptions to multiple YANG subtrees as part of\
    \ the same\n   subscription request.\n   A Subscription Service MUST support subscriptions\
    \ against operational\n   datastores, configuration datastores, or both.\n   A\
    \ Subscription Service MUST be able support filtering so that the\n   subscribed\
    \ updates under a target node might publish only operational\n   data, only configuration\
    \ data, or both.\n   A subscription MAY include Filters as defined within a subscription\n\
    \   request, therefore the Subscription Service MUST publish only data\n   nodes\
    \ that meet the Filter criteria within a subscription.\n   A Subscription Service\
    \ MUST support the ability to subscribe to\n   periodic updates.  The subscription\
    \ period MUST be configurable as\n   part of the subscription request.\n   A Subscription\
    \ Service SHOULD support the ability to subscribe to\n   updates on-change, i.e.,\
    \ whenever values of subscribed data objects\n   change.\n   For on-change updates,\
    \ the Subscription Service MUST support a\n   dampening period that needs to be\
    \ passed before the first or\n   subsequent on-change updates are sent.  The dampening\
    \ period SHOULD\n   be configurable as part of the subscription request.\n   A\
    \ Subscription Service MUST allow subscriptions to be monitored.\n   Specifically,\
    \ a Subscription Service MUST at a minimum maintain\n   information about which\
    \ subscriptions are being serviced, the terms\n   of those subscriptions (e.g.,\
    \ what data is being subscribed,\n   associated Filters, update policy -- on change,\
    \ periodic), and the\n   overall status of the subscription -- e.g., active or\
    \ suspended.\n   A Subscription Service MUST support the termination of a subscription\n\
    \   when requested by the Subscriber.\n   A Subscription Service SHOULD support\
    \ the ability to suspend and to\n   resume a subscription on request of a client.\n\
    \   A Subscription Service MAY at its discretion revoke or suspend an\n   existing\
    \ subscription.  Reasons may include transitory resource\n   limitation, credential\
    \ expiry, failure to reconfirm a subscription,\n   loss of connectivity with the\
    \ Receiver, operator command-line\n   interface (CLI), and/or others.  When this\
    \ occurs, the Subscription\n   Service MUST notify the Subscriber and update the\
    \ subscription\n   status.\n   A Subscription Service MAY offer the ability to\
    \ modify a subscription\n   Filter.  If such an ability is offered, the service\
    \ MUST provide\n   subscribers with an indication telling at what point the modified\n\
    \   subscription goes into effect.\n"
- title: 4.2.2.  Negotiation
  contents:
  - "4.2.2.  Negotiation\n   A Subscription Service MUST be able to negotiate the\
    \ following terms\n   of a subscription:\n   o  The policy, i.e., whether updates\
    \ are on-change or periodic\n   o  The interval, for periodic publication policy\n\
    \   o  The on-change policy dampening period (if the on-change policy is\n   \
    \   supported)\n   o  Any Filters associated with a subtree subscription\n   A\
    \ Subscription Service SHOULD be able to negotiate QoS criteria for a\n   subscription.\
    \  Examples of subscription QoS criteria may include\n   reliability of the Subscription\
    \ Service, reaction time between a\n   monitored YANG subtree/object change and\
    \ a corresponding notification\n   push, and the Subscription Service's ability\
    \ to support certain\n   levels of object liveliness.\n   In cases where a subscription\
    \ request cannot be fulfilled due to\n   insufficient platform resources, the\
    \ Subscription Service SHOULD\n   include within its decline hints on criteria\
    \ that would have been\n   acceptable when the subscription request was made.\
    \  For example, if\n   periodic updates were requested with update intervals that\
    \ were too\n   short for the specified data set, an alternative acceptable interval\n\
    \   period might be returned from the Publisher.  If on-change updates\n   were\
    \ requested with too aggressive a dampening period, then an\n   acceptable dampening\
    \ period may be returned, or alternatively an\n   indication that only periodic\
    \ updates are supported for the requested\n   object(s).\n"
- title: 4.2.3.  Update Distribution
  contents:
  - "4.2.3.  Update Distribution\n   For on-change updates, the Subscription Service\
    \ MUST only send deltas\n   to the object data for which a change occurred.  (Otherwise\
    \ the\n   subscriber might not know what has actually undergone change.)  The\n\
    \   updates for each object MUST include an indication of whether it was\n   removed,\
    \ added, or changed.\n   When a Subscription Service is not able to send updates\
    \ per its\n   subscription contract, the subscription MUST notify subscribers\
    \ and\n   put the subscription into a state indicating that the subscription\n\
    \   was suspended by the service.  When able to resume service,\n   subscribers\
    \ need to be notified as well.  If unable to resume\n   service, the Subscription\
    \ Service MAY terminate the subscription and\n   notify Subscribers accordingly.\n\
    \   When a subscription with on-change updates is suspended and then\n   resumed,\
    \ the first update SHOULD include updates of any changes that\n   occurred while\
    \ the subscription was suspended, with the current\n   value.  The Subscription\
    \ Service MUST provide a clear indication when\n   this capability is not supported\
    \ (because in this case, a client\n   application may have to synchronize state\
    \ separately).\n   Multiple objects being pushed to a Subscriber, perhaps from\
    \ different\n   subscriptions, SHOULD be bundled together into a single Update.\n\
    \   The sending of an Update MUST NOT be delayed beyond the Push Latency\n   of\
    \ any enclosed object changes.\n   The sending of an Update MUST NOT be delayed\
    \ beyond the dampening\n   period of any enclosed object changes.\n   The sending\
    \ of an Update MUST NOT occur before the dampening period\n   expires for any\
    \ enclosed object changes.\n   A Subscription Service MAY, as an option, support\
    \ a replay capability\n   so that a set of updates generated during a previous\
    \ time internal\n   can be sent to a Receiver.\n"
- title: 4.2.4.  Transport
  contents:
  - "4.2.4.  Transport\n   It is possible for updates coming from a Subscription Service\
    \ to be\n   pushed over different types of transports such as NETCONF, RESTCONF,\n\
    \   and HTTP.  Beyond existing transports, this Subscription Service will\n  \
    \ be applicable for emerging protocols such as those being defined in\n   [USECASE].\
    \  The need for such transport flexibility drives the\n   following requirements:\n\
    \   o  A Subscription Service SHOULD support different transports.\n   o  A Subscription\
    \ Service SHOULD support different encodings of a\n      payload.\n   o  It MUST\
    \ be possible for Receivers to associate the update with a\n      specific subscription.\n\
    \   o  In the case of connection-oriented transport, when a transport\n      connection\
    \ drops, the associated subscription SHOULD be\n      terminated.  It is up the\
    \ Subscriber to request a new\n      subscription.\n"
- title: 4.2.5.  Security Requirements
  contents:
  - "4.2.5.  Security Requirements\n   Some uses of this Subscription Service will\
    \ push privacy-sensitive\n   updates and metadata.  For privacy-sensitive deployments,\n\
    \   subscription information MUST be bound within secure, encrypted\n   transport-layer\
    \ mechanisms.  For example, if NETCONF is used as\n   transport, then [RFC7589]\
    \ would be a valid option to secure the\n   transported information.  The Subscription\
    \ Service can also be used\n   with emerging privacy-sensitive deployment contexts\
    \ as well.  As an\n   example, deployments based on [USECASE] would apply these\n\
    \   requirements in conjunction with those documented within\n   [I2RS-ENV-SEC]\
    \ and [I2RS-PROT-SEC] to secure ephemeral state\n   information being pushed from\
    \ a network element.\n   As part of the subscription establishment, mutual authentication\
    \ MUST\n   be used between the Subscriber and the Subscription Service.\n   Subscribers\
    \ MUST NOT be able to pose as the original Subscription\n   Service.\n   Versioning\
    \ of any subscription protocols MUST be supported so that\n   the capabilities\
    \ and behaviors expected of specific technology\n   implementations can be exposed.\n\
    \   A subscription could be used to attempt to retrieve information to\n   which\
    \ a client has no authorized access.  Therefore, it is important\n   that data\
    \ being pushed based on subscriptions is authorized in the\n   same way that regular\
    \ data retrieval operations are authorized.  Data\n   being pushed to a client\
    \ MUST be filtered accordingly, just like if\n   the data were being retrieved\
    \ on demand.  For Unicast transports, the\n   NETCONF Authorization Control Model\
    \ applies.\n   Additions or changes within a subscribed subtree structure MUST\
    \ be\n   validated against authorization methods before subscription updates,\n\
    \   including new subtree information, are pushed.\n   A loss of authenticated\
    \ access to the target subtree or node SHOULD\n   be communicated to the Subscriber.\n\
    \   For any encrypted information exchanges, commensurate strength\n   security\
    \ mechanisms MUST be available and SHOULD be used.  This\n   includes all stages\
    \ of the subscription and update push process.\n   Subscription requests, including\
    \ requests to create, terminate,\n   suspend, and resume subscriptions MUST be\
    \ properly authorized.\n   When the Subscriber and Receiver are different, the\
    \ Receiver MUST be\n   able to terminate any subscription to it where objects\
    \ are being\n   delivered over a Unicast transport.\n   A Subscription Service\
    \ SHOULD decline a subscription request if it is\n   likely to deplete its resources.\
    \  It is preferable to decline a\n   subscription when originally requested, rather\
    \ than having to\n   terminate it prematurely later.\n   When the Subscriber and\
    \ Receiver are different, and when the\n   underlying transport connection passes\
    \ credentials as part of\n   transport establishment, then potentially pushed\
    \ objects MUST be\n   excluded from a push update if that object doesn't have\
    \ read access\n   visibility for that Receiver.\n"
- title: 4.2.6.  Subscription QoS
  contents:
  - "4.2.6.  Subscription QoS\n   A Subscription Service SHOULD be able to negotiate\
    \ the following\n   subscription QoS parameters with a Subscriber: Dampening,\n\
    \   Reliability, Deadline, and Bundling.\n   A Subscription Service SHOULD be\
    \ able to interpret subscription QoS\n   parameters, and only establish a subscription\
    \ if it is possible to\n   meet the QoS needs of the provided QoS parameters.\n"
- title: 4.2.6.1.  Liveliness
  contents:
  - "4.2.6.1.  Liveliness\n   A Subscription Service MUST be able to respond to requests\
    \ to verify\n   the Liveliness of a subscription.\n   A Subscription Service MUST\
    \ be able to report the currently monitored\n   Nodes of a subscription.\n"
- title: 4.2.6.2.  Dampening
  contents:
  - "4.2.6.2.  Dampening\n   A Subscription Service MUST be able to negotiate the\
    \ minimum time\n   separation since the previous update before transmitting a\
    \ subsequent\n   update for subscription.  (Note: this is intended to confine\
    \ the\n   visibility of volatility into something digestible by the receiver.)\n"
- title: 4.2.6.3.  Reliability
  contents:
  - "4.2.6.3.  Reliability\n   A Subscription Service MAY send Updates over Best Effort\
    \ and Reliable\n   transports.\n"
- title: 4.2.6.4.  Coherence
  contents:
  - "4.2.6.4.  Coherence\n   For a particular subscription, every update to a subscribed\
    \ object\n   MUST be sent to the Receiver in sequential order.\n"
- title: 4.2.6.5.  Presentation
  contents:
  - "4.2.6.5.  Presentation\n   The Subscription Service MAY have the ability to bundle\
    \ a set of\n   discrete object notifications into a single publishable update\
    \ for a\n   subscription.  A bundle MAY include information on different Data\n\
    \   Nodes and/or multiple updates about a single Data Node.\n   For any bundled\
    \ updates, the Subscription Service MUST provide\n   information for a Receiver\
    \ to reconstruct the order and timing of\n   updates.\n"
- title: 4.2.6.6.  Deadline
  contents:
  - "4.2.6.6.  Deadline\n   The Subscription Service MUST be able to push updates\
    \ at a regular\n   cadence that corresponds with the Subscriber's specified start\
    \ and\n   end timestamps.  (Note: the regular cadence can drive one update, a\n\
    \   discrete quantity of updates, or an unbounded set of periodic\n   updates.)\n"
- title: 4.2.6.7.  Push Latency
  contents:
  - "4.2.6.7.  Push Latency\n   The Subscription Service SHOULD be able to delay Updates\
    \ on object\n   push for a configurable period per Subscriber.\n   It MUST be\
    \ possible for an administrative entity to determine the\n   Push latency between\
    \ object change in a monitored subtree and the\n   Subscription Service Push of\
    \ the update transmission.\n"
- title: 4.2.6.8.  Relative Priority
  contents:
  - "4.2.6.8.  Relative Priority\n   The Subscription Service SHOULD support the relative\
    \ prioritization\n   of subscriptions so that the dequeuing and discarding of\
    \ push updates\n   can consider this if there is insufficient bandwidth between\
    \ the\n   Publisher and the Receiver.\n"
- title: 4.2.7.  Filtering
  contents:
  - "4.2.7.  Filtering\n   If no filtering criteria are provided, or if filtering\
    \ criteria are\n   met, updates for a subscribed object MUST be pushed, subject\
    \ to the\n   QoS limits established for the subscription.\n   It MUST be possible\
    \ for the Subscription Service to receive Filter(s)\n   from a Subscriber and\
    \ apply them to the corresponding object(s)\n   within a subscription.\n   It\
    \ MUST be possible to attach one or more Subtree and/or object\n   element and\
    \ attribute Filters to a subscription.  Mandatory Filter\n   types include:\n\
    \   o  For character-based object properties, Filter values that are\n      exactly\
    \ equal to a provided string, not equal to the string, or\n      containing a\
    \ string.\n   o  For numeric object properties, Filter values that are =, !=,\
    \ <,\n      <=, >, or >= a provided number.\n   It SHOULD be possible for Filtering\
    \ criteria to evaluate more than\n   one property of a particular subscribed object\
    \ as well as apply\n   multiple Filters against a single object.\n   It SHOULD\
    \ be possible to establish query match criteria on additional\n   objects to be\
    \ used in conjunction with Filtering criteria on a\n   subscribed object.  (For\
    \ example, if A has changed and B=1, then Push\n   A.)  Query match capability\
    \ may be done on objects within the\n   datastore even if those objects are not\
    \ included within the\n   subscription.  This of course assumes that the subscriber\
    \ has read\n   access to those objects.\n   For on-change subscription updates,\
    \ an object MUST pass a Filter\n   through a Filter if it has changed since the\
    \ previous update.  This\n   includes if the object has changed multiple times\
    \ since the last\n   update, and if the value happens to be the exact same value\
    \ as the\n   last one sent.\n"
- title: 4.2.8.  Assurance and Monitoring
  contents:
  - "4.2.8.  Assurance and Monitoring\n   It MUST be possible to fetch the state of\
    \ a single subscription from\n   a Subscription Service.\n   It MUST be possible\
    \ to fetch the state of all subscriptions of a\n   particular Subscriber.\n  \
    \ It MUST be possible to fetch a list and status of all subscription\n   requests\
    \ over a period of time.  If there is a failure, some failure\n   reasons might\
    \ include:\n   o  Improper security credentials provided to access the target\
    \ node;\n   o  Target node referenced does not exist;\n   o  Subscription type\
    \ requested is not available upon the target node;\n   o  Out of resources, or\
    \ resources not available;\n   o  Incomplete negotiations with the Subscriber.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are no additional security considerations\
    \ beyond the\n   requirements listed in Section 4.2.5.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2328]  Moy, J., \"OSPF Version 2\", STD 54, RFC 2328,\n              DOI\
    \ 10.17487/RFC2328, April 1998,\n              <http://www.rfc-editor.org/info/rfc2328>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6513]  Rosen, E., Ed. and R. Aggarwal, Ed., \"Multicast in MPLS/\n   \
    \           BGP IP VPNs\", RFC 6513, DOI 10.17487/RFC6513, February\n        \
    \      2012, <http://www.rfc-editor.org/info/rfc6513>.\n   [RFC7589]  Badra, M.,\
    \ Luchuk, A., and J. Schoenwaelder, \"Using the\n              NETCONF Protocol\
    \ over Transport Layer Security (TLS) with\n              Mutual X.509 Authentication\"\
    , RFC 7589,\n              DOI 10.17487/RFC7589, June 2015,\n              <http://www.rfc-editor.org/info/rfc7589>.\n\
    \   [RFC7921]  Atlas, A., Halpern, J., Hares, S., Ward, D., and T.\n         \
    \     Nadeau, \"An Architecture for the Interface to the Routing\n           \
    \   System\", RFC 7921, DOI 10.17487/RFC7921, June 2016,\n              <http://www.rfc-editor.org/info/rfc7921>.\n\
    \   [RFC7922]  Clarke, J., Salgueiro, G., and C. Pignataro, \"Interface to\n \
    \             the Routing System (I2RS) Traceability: Framework and\n        \
    \      Information Model\", RFC 7922, DOI 10.17487/RFC7922, June\n           \
    \   2016, <http://www.rfc-editor.org/info/rfc7922>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [I2RS-ENV-SEC]\n              Migault, D., Ed.,\
    \ Halpern, J., and S. Hares, \"I2RS\n              Environment Security Requirements\"\
    , Work in Progress,\n              draft-ietf-i2rs-security-environment-reqs-01,\
    \ April 2016.\n   [I2RS-PROT-SEC]\n              Hares, S., Migault, D., and J.\
    \ Halpern, \"I2RS Security\n              Related Requirements\", Work in Progress,\
    \ draft-ietf-i2rs-\n              protocol-security-requirements-06, May 2016.\n\
    \   [OMG-DDS]  Object Management Group (OMG), \"Data Distribution Service\n  \
    \            for Real-time Systems, Version 1.2\", January 2007,\n           \
    \   <http://www.omg.org/spec/DDS/1.2/>.\n   [SACMREQ]  Nancy, N. and L. Lorenzin,\
    \ \"Security Automation and\n              Continuous Monitoring (SACM) Requirements\"\
    , Work in\n              Progress, draft-ietf-sacm-requirements-13, March 2016.\n\
    \   [USECASE]  Hares, S. and M. Chen, \"Summary of I2RS Use Case\n           \
    \   Requirements\", Work in Progress, draft-ietf-i2rs-usecase-\n             \
    \ reqs-summary-02, March 2016.\n   [XEP-0060] Millard, P., Saint-Andre, P., and\
    \ R. Meijer, \"Publish-\n              Subscribe\", XSF XEP-0060, July 2010,\n\
    \              <http://xmpp.org/extensions/xep-0060.html>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We wish to acknowledge the helpful contributions, comments,\
    \ and\n   suggestions that were received from Ambika Tripathy and Prabhakara\n\
    \   Yellai as well as the helpfulness of related end-to-end system\n   context\
    \ info from Nancy Cam Winget, Ken Beck, and David McGrew.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Voit\n   Cisco Systems\n   Email: evoit@cisco.com\n\
    \   Alexander Clemm\n   Cisco Systems\n   Email: alex@cisco.com\n   Alberto Gonzalez\
    \ Prieto\n   Cisco Systems\n   Email: albertgo@cisco.com\n"
