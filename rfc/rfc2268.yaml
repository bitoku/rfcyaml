- title: __initial_text__
  contents:
  - '            A Description of the RC2(r) Encryption Algorithm

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo is an RSA Laboratories Technical Note.  It is meant\
    \ for\n   informational use by the Internet community.\n   This memo describes\
    \ a conventional (secret-key) block encryption\n   algorithm, called RC2, which\
    \ may be considered as a proposal for a\n   DES replacement. The input and output\
    \ block sizes are 64 bits each.\n   The key size is variable, from one byte up\
    \ to 128 bytes, although the\n   current implementation uses eight bytes.\n  \
    \ The algorithm is designed to be easy to implement on 16-bit\n   microprocessors.\
    \ On an IBM AT, the encryption runs about twice as\n   fast as DES (assuming that\
    \ key expansion has been done).\n"
- title: 1.1 Algorithm description
  contents:
  - "1.1 Algorithm description\n   We use the term \"word\" to denote a 16-bit quantity.\
    \ The symbol + will\n   denote twos-complement addition. The symbol & will denote\
    \ the bitwise\n   \"and\" operation. The term XOR will denote the bitwise \"exclusive-or\"\
    \n   operation. The symbol ~ will denote bitwise complement.  The symbol ^\n \
    \  will denote the exponentiation operation.  The term MOD will denote\n   the\
    \ modulo operation.\n   There are three separate algorithms involved:\n     Key\
    \ expansion. This takes a (variable-length) input key and\n     produces an expanded\
    \ key consisting of 64 words K[0],...,K[63].\n     Encryption. This takes a 64-bit\
    \ input quantity stored in words\n     R[0], ..., R[3] and encrypts it \"in place\"\
    \ (the result is left in\n     R[0], ..., R[3]).\n     Decryption. The inverse\
    \ operation to encryption.\n"
- title: 2. Key expansion
  contents:
  - "2. Key expansion\n   Since we will be dealing with eight-bit byte operations\
    \ as well as\n   16-bit word operations, we will use two alternative notations\n\
    \   for referring to the key buffer:\n        For word operations, we will refer\
    \ to the positions of the\n             buffer as K[0], ..., K[63]; each K[i]\
    \ is a 16-bit word.\n        For byte operations,  we will refer to the key buffer\
    \ as\n             L[0], ..., L[127]; each L[i] is an eight-bit byte.\n   These\
    \ are alternative views of the same data buffer. At all times it\n   will be true\
    \ that\n                       K[i] = L[2*i] + 256*L[2*i+1].\n   (Note that the\
    \ low-order byte of each K word is given before the\n   high-order byte.)\n  \
    \ We will assume that exactly T bytes of key are supplied, for some T\n   in the\
    \ range 1 <= T <= 128. (Our current implementation uses T = 8.)\n   However, regardless\
    \ of T, the algorithm has a maximum effective key\n   length in bits, denoted\
    \ T1. That is, the search space is 2^(8*T), or\n   2^T1, whichever is smaller.\n\
    \   The purpose of the key-expansion algorithm is to modify the key\n   buffer\
    \ so that each bit of the expanded key depends in a complicated\n   way on every\
    \ bit of the supplied input key.\n   The key expansion algorithm begins by placing\
    \ the supplied T-byte key\n   into bytes L[0], ..., L[T-1] of the key buffer.\n\
    \   The key expansion algorithm then computes the effective key length in\n  \
    \ bytes T8 and a mask TM based on the effective key length in bits T1.\n   It\
    \ uses the following operations:\n   T8 = (T1+7)/8;\n   TM = 255 MOD 2^(8 + T1\
    \ - 8*T8);\n   Thus TM has its 8 - (8*T8 - T1) least significant bits set.\n \
    \  For example, with an effective key length of 64 bits, T1 = 64, T8 = 8\n   and\
    \ TM = 0xff.  With an effective key length of 63 bits, T1 = 63, T8\n   = 8 and\
    \ TM = 0x7f.\n   Here PITABLE[0], ..., PITABLE[255] is an array of \"random\"\
    \ bytes\n   based on the digits of PI = 3.14159... . More precisely, the array\n\
    \   PITABLE is a random permutation of the values 0, ..., 255. Here is\n   the\
    \ PITABLE in hexadecimal notation:\n        0  1  2  3  4  5  6  7  8  9  a  b\
    \  c  d  e  f\n   00: d9 78 f9 c4 19 dd b5 ed 28 e9 fd 79 4a a0 d8 9d\n   10:\
    \ c6 7e 37 83 2b 76 53 8e 62 4c 64 88 44 8b fb a2\n   20: 17 9a 59 f5 87 b3 4f\
    \ 13 61 45 6d 8d 09 81 7d 32\n   30: bd 8f 40 eb 86 b7 7b 0b f0 95 21 22 5c 6b\
    \ 4e 82\n   40: 54 d6 65 93 ce 60 b2 1c 73 56 c0 14 a7 8c f1 dc\n   50: 12 75\
    \ ca 1f 3b be e4 d1 42 3d d4 30 a3 3c b6 26\n   60: 6f bf 0e da 46 69 07 57 27\
    \ f2 1d 9b bc 94 43 03\n   70: f8 11 c7 f6 90 ef 3e e7 06 c3 d5 2f c8 66 1e d7\n\
    \   80: 08 e8 ea de 80 52 ee f7 84 aa 72 ac 35 4d 6a 2a\n   90: 96 1a d2 71 5a\
    \ 15 49 74 4b 9f d0 5e 04 18 a4 ec\n   a0: c2 e0 41 6e 0f 51 cb cc 24 91 af 50\
    \ a1 f4 70 39\n   b0: 99 7c 3a 85 23 b8 b4 7a fc 02 36 5b 25 55 97 31\n   c0:\
    \ 2d 5d fa 98 e3 8a 92 ae 05 df 29 10 67 6c ba c9\n   d0: d3 00 e6 cf e1 9e a8\
    \ 2c 63 16 01 3f 58 e2 89 a9\n   e0: 0d 38 34 1b ab 33 ff b0 bb 48 0c 5f b9 b1\
    \ cd 2e\n   f0: c5 f3 db 47 e5 a5 9c 77 0a a6 20 68 fe 7f c1 ad\n   The key expansion\
    \ operation consists of the following two loops and\n   intermediate step:\n \
    \  for i = T, T+1, ..., 127 do\n     L[i] = PITABLE[L[i-1] + L[i-T]];\n   L[128-T8]\
    \ = PITABLE[L[128-T8] & TM];\n   for i = 127-T8, ..., 0 do\n     L[i] = PITABLE[L[i+1]\
    \ XOR L[i+T8]];\n   (In the first loop, the addition of L[i-1] and L[i-T] is performed\n\
    \   modulo 256.)\n   The \"effective key\" consists of the values L[128-T8],...,\
    \ L[127].\n   The intermediate step's bitwise \"and\" operation reduces the search\n\
    \   space for L[128-T8] so that the effective number of key bits is T1.\n   The\
    \ expanded key depends only on the effective key bits, regardless\n   of the supplied\
    \ key K. Since the expanded key is not itself modified\n   during encryption or\
    \ decryption, as a pragmatic matter one can expand\n   the key just once when\
    \ encrypting or decrypting a large block of\n   data.\n"
- title: 3. Encryption algorithm
  contents:
  - "3. Encryption algorithm\n   The encryption operation is defined in terms of primitive\
    \ \"mix\" and\n   \"mash\" operations.\n   Here the expression \"x rol k\" denotes\
    \ the 16-bit word x rotated left\n   by k bits, with the bits shifted out the\
    \ top end entering the bottom\n   end.\n"
- title: 3.1 Mix up R[i]
  contents:
  - "3.1 Mix up R[i]\n   The primitive \"Mix up R[i]\" operation is defined as follows,\
    \ where\n   s[0] is 1, s[1] is 2, s[2] is 3, and s[3] is 5, and where the indices\n\
    \   of the array R are always to be considered \"modulo 4,\" so that R[i-1]\n\
    \   refers to R[3] if i is 0 (these values are\n   \"wrapped around\" so that\
    \ R always has a subscript in the range 0 to 3\n   inclusive):\n   R[i] = R[i]\
    \ + K[j] + (R[i-1] & R[i-2]) + ((~R[i-1]) & R[i-3]);\n   j = j + 1;\n   R[i] =\
    \ R[i] rol s[i];\n   In words: The next key word K[j] is added to R[i], and j\
    \ is advanced.\n   Then R[i-1] is used to create a \"composite\" word which is\
    \ added to\n   R[i]. The composite word is identical with R[i-2] in those positions\n\
    \   where R[i-1] is one, and identical to R[i-3] in those positions where\n  \
    \ R[i-1] is zero. Then R[i] is rotated left by s[i] bits (bits rotated\n   out\
    \ the left end of R[i] are brought back in at the right). Here j is\n   a \"global\"\
    \ variable so that K[j] is always the first key word in the\n   expanded key which\
    \ has not yet been used in a \"mix\" operation.\n"
- title: 3.2 Mixing round
  contents:
  - "3.2 Mixing round\n   A \"mixing round\" consists of the following operations:\n\
    \   Mix up R[0]\n   Mix up R[1]\n   Mix up R[2]\n   Mix up R[3]\n"
- title: 3.3 Mash R[i]
  contents:
  - "3.3 Mash R[i]\n   The primitive \"Mash R[i]\" operation is defined as follows\
    \ (using the\n   previous conventions regarding subscripts for R):\n   R[i] =\
    \ R[i] + K[R[i-1] & 63];\n   In words: R[i] is \"mashed\" by adding to it one\
    \ of the words of the\n   expanded key. The key word to be used is determined\
    \ by looking at the\n   low-order six bits of R[i-1], and using that as an index\
    \ into the key\n   array K.\n"
- title: 3.4 Mashing round
  contents:
  - "3.4 Mashing round\n   A \"mashing round\" consists of:\n   Mash R[0]\n   Mash\
    \ R[1]\n   Mash R[2]\n   Mash R[3]\n"
- title: 3.5 Encryption operation
  contents:
  - "3.5 Encryption operation\n   The entire encryption operation can now be described\
    \ as follows. Here\n   j is a global integer variable which is affected by the\
    \ mixing\n   operations.\n        1. Initialize words R[0], ..., R[3] to contain\
    \ the\n           64-bit input value.\n        2. Expand the key, so that words\
    \ K[0], ..., K[63] become\n           defined.\n        3. Initialize j to zero.\n\
    \        4. Perform five mixing rounds.\n        5. Perform one mashing round.\n\
    \        6. Perform six mixing rounds.\n        7. Perform one mashing round.\n\
    \        8. Perform five mixing rounds.\n   Note that each mixing round uses four\
    \ key words, and that there are\n   16 mixing rounds altogether, so that each\
    \ key word is used exactly\n   once in a mixing round. The mashing rounds will\
    \ refer to up to eight\n   of the key words in a data-dependent manner. (There\
    \ may be\n   repetitions, and the actual set of words referred to will vary from\n\
    \   encryption to encryption.)\n"
- title: 4. Decryption algorithm
  contents:
  - "4. Decryption algorithm\n   The decryption operation is defined in terms of primitive\
    \ operations\n   that undo the \"mix\" and \"mash\" operations of the encryption\n\
    \   algorithm. They are named \"r-mix\" and \"r-mash\" (r- denotes the\n   reverse\
    \ operation).\n   Here the expression \"x ror k\" denotes the 16-bit word x rotated\
    \ right\n   by k bits, with the bits shifted out the bottom end entering the top\n\
    \   end.\n"
- title: 4.1 R-Mix up R[i]
  contents:
  - "4.1 R-Mix up R[i]\n   The primitive \"R-Mix up R[i]\" operation is defined as\
    \ follows, where\n   s[0] is 1, s[1] is 2, s[2] is 3, and s[3] is 5, and where\
    \ the indices\n   of the array R are always to be considered \"modulo 4,\" so\
    \ that R[i-1]\n   refers to R[3] if i is 0 (these values are \"wrapped around\"\
    \ so that R\n   always has a subscript in the range 0 to 3 inclusive):\n   R[i]\
    \ = R[i] ror s[i];\n   R[i] = R[i] - K[j] - (R[i-1] & R[i-2]) - ((~R[i-1]) & R[i-3]);\n\
    \   j = j - 1;\n   In words: R[i] is rotated right by s[i] bits (bits rotated\
    \ out the\n   right end of R[i] are brought back in at the left). Here j is a\n\
    \   \"global\" variable so that K[j] is always the key word with greatest\n  \
    \ index in the expanded key which has not yet been used in a \"r-mix\"\n   operation.\
    \ The key word K[j] is subtracted from R[i], and j is\n   decremented. R[i-1]\
    \ is used to create a \"composite\" word which is\n   subtracted from R[i].  The\
    \ composite word is identical with R[i-2] in\n   those positions where R[i-1]\
    \ is one, and identical to R[i-3] in those\n   positions where R[i-1] is zero.\n"
- title: 4.2 R-Mixing round
  contents:
  - "4.2 R-Mixing round\n   An \"r-mixing round\" consists of the following operations:\n\
    \   R-Mix up R[3]\n   R-Mix up R[2]\n   R-Mix up R[1]\n   R-Mix up R[0]\n"
- title: 4.3 R-Mash R[i]
  contents:
  - "4.3 R-Mash R[i]\n   The primitive \"R-Mash R[i]\" operation is defined as follows\
    \ (using\n   the previous conventions regarding subscripts for R):\n   R[i] =\
    \ R[i] - K[R[i-1] & 63];\n   In words: R[i] is \"r-mashed\" by subtracting from\
    \ it one of the words\n   of the expanded key. The key word to be used is determined\
    \ by looking\n   at the low-order six bits of R[i-1], and using that as an index\
    \ into\n   the key array K.\n"
- title: 4.4 R-Mashing round
  contents:
  - "4.4 R-Mashing round\n   An \"r-mashing round\" consists of:\n   R-Mash R[3]\n\
    \   R-Mash R[2]\n   R-Mash R[1]\n   R-Mash R[0]\n"
- title: 4.5 Decryption operation
  contents:
  - "4.5 Decryption operation\n   The entire decryption operation can now be described\
    \ as follows.\n   Here j is a global integer variable which is affected by the\
    \ mixing\n   operations.\n        1. Initialize words R[0], ..., R[3] to contain\
    \ the 64-bit\n           ciphertext value.\n        2. Expand the key, so that\
    \ words K[0], ..., K[63] become\n           defined.\n        3. Initialize j\
    \ to 63.\n        4. Perform five r-mixing rounds.\n        5. Perform one r-mashing\
    \ round.\n        6. Perform six r-mixing rounds.\n        7. Perform one r-mashing\
    \ round.\n        8. Perform five r-mixing rounds.\n"
- title: 5. Test vectors
  contents:
  - "5. Test vectors\n   Test vectors for encryption with RC2 are provided below.\n\
    \   All quantities are given in hexadecimal notation.\n   Key length (bytes) =\
    \ 8\n   Effective key length (bits) = 63\n   Key = 00000000 00000000\n   Plaintext\
    \ = 00000000 00000000\n   Ciphertext = ebb773f9 93278eff\n   Key length (bytes)\
    \ = 8\n   Effective key length (bits) = 64\n   Key = ffffffff ffffffff\n   Plaintext\
    \ = ffffffff ffffffff\n   Ciphertext = 278b27e4 2e2f0d49\n   Key length (bytes)\
    \ = 8\n   Effective key length (bits) = 64\n   Key = 30000000 00000000\n   Plaintext\
    \ = 10000000 00000001\n   Ciphertext = 30649edf 9be7d2c2\n   Key length (bytes)\
    \ = 1\n   Effective key length (bits) = 64\n   Key = 88\n   Plaintext = 00000000\
    \ 00000000\n   Ciphertext = 61a8a244 adacccf0\n   Key length (bytes) = 7\n   Effective\
    \ key length (bits) = 64\n   Key = 88bca90e 90875a\n   Plaintext = 00000000 00000000\n\
    \   Ciphertext = 6ccf4308 974c267f\n   Key length (bytes) = 16\n   Effective key\
    \ length (bits) = 64\n   Key = 88bca90e 90875a7f 0f79c384 627bafb2\n   Plaintext\
    \ = 00000000 00000000\n   Ciphertext = 1a807d27 2bbe5db1\n   Key length (bytes)\
    \ = 16\n   Effective key length (bits) = 128\n   Key = 88bca90e 90875a7f 0f79c384\
    \ 627bafb2\n   Plaintext = 00000000 00000000\n   Ciphertext = 2269552a b0f85ca6\n\
    \   Key length (bytes) = 33\n   Effective key length (bits) = 129\n   Key = 88bca90e\
    \ 90875a7f 0f79c384 627bafb2 16f80a6f 85920584\n         c42fceb0 be255daf 1e\n\
    \   Plaintext = 00000000 00000000\n   Ciphertext = 5b78d3a4 3dfff1f1\n"
- title: 6. RC2 Algorithm Object Identifier
  contents:
  - "6. RC2 Algorithm Object Identifier\n   The Object Identifier for RC2 in cipher\
    \ block chaining mode is\n   rc2CBC OBJECT IDENTIFIER\n     ::= {iso(1) member-body(2)\
    \ US(840) rsadsi(113549)\n          encryptionAlgorithm(3) 2}\n   RC2-CBC takes\
    \ parameters\n   RC2-CBCParameter ::= CHOICE {\n     iv IV,\n     params SEQUENCE\
    \ {\n       version RC2Version,\n       iv IV\n     }\n   }\n   where\n   IV ::=\
    \ OCTET STRING -- 8 octets\n   RC2Version ::= INTEGER -- 1-1024\n   RC2 in CBC\
    \ mode has two parameters: an 8-byte initialization vector\n   (IV) and a version\
    \ number in the range 1-1024 which specifies in a\n   roundabout manner the number\
    \ of effective key bits to be used for the\n   RC2 encryption/decryption.\n  \
    \ The correspondence between effective key bits and version number is\n   as follows:\n\
    \   1. If the number EKB of effective key bits is in the range 1-255,\n      then\
    \ the version number is given by Table[EKB], where the 256-byte\n      translation\
    \ table Table[] is specified below. Table[] specifies a\n      permutation on\
    \ the numbers 0-255; note that it is not the same\n      table that appears in\
    \ the key expansion phase of RC2.\n   2. If the number EKB of effective key bits\
    \ is in the range\n      256-1024, then the version number is simply EKB.\n  \
    \    The default number of effective key bits for RC2 is 32. If RC2-CBC\n    \
    \  is being performed with 32 effective key bits, the parameters\n      should\
    \ be supplied as a simple IV, rather than as a SEQUENCE\n      containing a version\
    \ and an IV.\n        0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n   00: bd\
    \ 56 ea f2 a2 f1 ac 2a b0 93 d1 9c 1b 33 fd d0\n   10: 30 04 b6 dc 7d df 32 4b\
    \ f7 cb 45 9b 31 bb 21 5a\n   20: 41 9f e1 d9 4a 4d 9e da a0 68 2c c3 27 5f 80\
    \ 36\n   30: 3e ee fb 95 1a fe ce a8 34 a9 13 f0 a6 3f d8 0c\n   40: 78 24 af\
    \ 23 52 c1 67 17 f5 66 90 e7 e8 07 b8 60\n   50: 48 e6 1e 53 f3 92 a4 72 8c 08\
    \ 15 6e 86 00 84 fa\n   60: f4 7f 8a 42 19 f6 db cd 14 8d 50 12 ba 3c 06 4e\n\
    \   70: ec b3 35 11 a1 88 8e 2b 94 99 b7 71 74 d3 e4 bf\n   80: 3a de 96 0e bc\
    \ 0a ed 77 fc 37 6b 03 79 89 62 c6\n   90: d7 c0 d2 7c 6a 8b 22 a3 5b 05 5d 02\
    \ 75 d5 61 e3\n   a0: 18 8f 55 51 ad 1f 0b 5e 85 e5 c2 57 63 ca 3d 6c\n   b0:\
    \ b4 c5 cc 70 b2 91 59 0d 47 20 c8 4f 58 e0 01 e2\n   c0: 16 38 c4 6f 3b 0f 65\
    \ 46 be 7e 2d 7b 82 f9 40 b5\n   d0: 1d 73 f8 eb 26 c7 87 97 25 54 b1 28 aa 98\
    \ 9d a5\n   e0: 64 6d 7a d4 10 81 44 ef 49 d6 ae 2e dd 76 5c 2f\n   f0: a7 1c\
    \ c9 09 69 9a 83 cf 29 39 b9 e9 4c ff 43 ab\n"
- title: A. Intellectual Property Notice
  contents:
  - "A. Intellectual Property Notice\n   RC2 is a registered trademark of RSA Data\
    \ Security, Inc. RSA's\n   copyrighted RC2 software is available under license\
    \ from RSA Data\n   Security, Inc.\n"
- title: B. Author's Address
  contents:
  - "B. Author's Address\n   Ron Rivest\n   RSA Laboratories\n   100 Marine Parkway,\
    \ #500\n   Redwood City, CA  94065  USA\n   Phone: (650) 595-7703\n   EMail: rsa-labs@rsa.com\n"
- title: C.  Full Copyright Statement
  contents:
  - "C.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
