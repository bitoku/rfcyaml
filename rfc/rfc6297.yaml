- title: __initial_text__
  contents:
  - '         A Survey of Lower-than-Best-Effort Transport Protocols

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides a survey of transport protocols that are\n\
    \   designed to have a smaller bandwidth and/or delay impact on standard\n   TCP\
    \ than standard TCP itself when they share a bottleneck with it.\n   Such protocols\
    \ could be used for delay-insensitive \"background\"\n   traffic, as they provide\
    \ what is sometimes called a \"less than\" (or\n   \"lower than\") best-effort\
    \ service.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6297.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Delay-Based Transport Protocols  . . . . . . . . . .\
    \ . . . . .  3\n     2.1.  Accuracy of Delay-Based Congestion Predictors  . .\
    \ . . . .  6\n     2.2.  Potential Issues with Delay-Based Congestion Control\n\
    \           for LBE Transport  . . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 3.  Non-Delay-Based Transport Protocols  . . . . . . . . . . . . .  8\n   4.\
    \  Upper-Layer Approaches . . . . . . . . . . . . . . . . . . . .  8\n     4.1.\
    \  Receiver-Oriented, Flow-Control-Based Approaches . . . . .  9\n   5.  Network-Assisted\
    \ Approaches  . . . . . . . . . . . . . . . . . 10\n   6.  LEDBAT Considerations\
    \  . . . . . . . . . . . . . . . . . . . . 12\n   7.  Acknowledgements . . . .\
    \ . . . . . . . . . . . . . . . . . . . 12\n   8.  Security Considerations  .\
    \ . . . . . . . . . . . . . . . . . . 12\n   9.  Informative References . . .\
    \ . . . . . . . . . . . . . . . . . 12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document presents a brief survey of proposals to attain\
    \ a Less-\n   than-Best-Effort (LBE) service by means of end-host mechanisms.\
    \  We\n   loosely define an LBE service as a service which results in smaller\n\
    \   bandwidth and/or delay impact on standard TCP than standard TCP\n   itself,\
    \ when sharing a bottleneck with it.  We refer to systems that\n   are designed\
    \ to provide this service as LBE systems.  With the\n   exception of TCP Vegas,\
    \ which we present for historical reasons, we\n   exclude systems that have been\
    \ noted to exhibit LBE behavior under\n   some circumstances but were not designed\
    \ for this purpose (e.g.,\n   RAPID [Kon09]).\n   Generally, LBE behavior can\
    \ be achieved by reacting to queue growth\n   earlier than standard TCP would\
    \ or by changing the congestion-\n   avoidance behavior of TCP without utilizing\
    \ any additional implicit\n   feedback.  It is therefore assumed that readers\
    \ are familiar with TCP\n   congestion control [RFC5681].  Some mechanisms achieve\
    \ an LBE\n   behavior without modifying transport-protocol standards (e.g., by\n\
    \   changing the receiver window of standard TCP), whereas others\n   leverage\
    \ network-level mechanisms at the transport layer for LBE\n   purposes.  According\
    \ to this classification, solutions have been\n   categorized in this document\
    \ as delay-based transport protocols, non-\n   delay-based transport protocols,\
    \ upper-layer approaches, and network-\n   assisted approaches.  Some of the schemes\
    \ in the first two categories\n   could be implemented using TCP without changing\
    \ its header format;\n   this would facilitate their deployment in the Internet.\
    \  The schemes\n   in the third category are, by design, supposed to be especially\
    \ easy\n   to deploy because they only describe a way in which existing\n   transport\
    \ protocols are used.  Finally, mechanisms in the last\n   category require changes\
    \ to equipment along the path, which can\n   greatly complicate their deployment.\n\
    \   This document is a product of the Low Extra Delay Background\n   Transport\
    \ (LEDBAT) working group.  It aims at putting the congestion\n   control algorithm\
    \ that the working group has specified [Sha11] in the\n   context of the state\
    \ of the art in LBE transport.  This survey is not\n   exhaustive, as this would\
    \ not be possible or useful; the authors have\n   selected key, well-known, or\
    \ otherwise interesting techniques for\n   inclusion at their discretion.  There\
    \ is also a substantial amount of\n   work that is related to the LBE concept\
    \ but does not present a\n   solution that can be installed in end-hosts or expected\
    \ to work over\n   the Internet (e.g., there is a Diffserv-based, Lower-Effort\
    \ service\n   [RFC3662], and the IETF Congestion Exposure (CONEX) working group\
    \ is\n   developing a mechanism which can incentivize LEDBAT-like\n   applications).\
    \  Such work is outside the scope of this document.\n"
- title: 2.  Delay-Based Transport Protocols
  contents:
  - "2.  Delay-Based Transport Protocols\n   It is wrong to generally equate \"little\
    \ impact on standard TCP\" with\n   \"small sending rate\".  Without Explicit\
    \ Congestion Notification (ECN)\n   support, standard TCP will normally increase\
    \ its congestion window\n   (and effective sending rate) until a queue overflows,\
    \ causing one or\n   more packets to be dropped and the effective rate to be reduced.\
    \  A\n   protocol that stops increasing the rate before this event happens\n \
    \  can, in principle, achieve a better performance than standard TCP.\n   TCP\
    \ Vegas [Bra94] is one of the first protocols that was known to\n   have a smaller\
    \ sending rate than standard TCP when both protocols\n   share a bottleneck [Kur00]\
    \ -- yet, it was designed to achieve more,\n   not less, throughput than standard\
    \ TCP.  Indeed, when TCP Vegas is\n   the only congestion control algorithm used\
    \ by flows going through the\n   bottleneck, its throughput is greater than the\
    \ throughput of standard\n   TCP.  Depending on the bottleneck queue length, TCP\
    \ Vegas itself can\n   be starved by standard TCP flows.  This can be remedied\
    \ to some\n   degree by the Random Early Detection (RED) Active Queue Management\n\
    \   mechanism [RFC2309].  Vegas linearly increases or decreases the\n   sending\
    \ rate, based on the difference between the expected throughput\n   and the actual\
    \ throughput.  The estimation is based on RTT\n   measurements.\n   The congestion-avoidance\
    \ behavior is the protocol's most important\n   feature in terms of historical\
    \ relevance as well as relevance in the\n   context of this document (it has been\
    \ shown that other elements of\n   the protocol can sometimes play a greater role\
    \ for its overall\n   behavior [Hen00]).  In congestion avoidance, once per RTT,\
    \ TCP Vegas\n   calculates the expected throughput as WindowSize / BaseRTT, where\n\
    \   WindowSize is the current congestion window and BaseRTT is the\n   minimum\
    \ of all measured RTTs.  The expected throughput is then\n   compared with the\
    \ actual throughput, measured based on recent\n   acknowledgements.  If the actual\
    \ throughput is smaller than the\n   expected throughput minus a threshold called\
    \ \"beta\", this is taken as\n   a sign of congestion, causing the protocol to\
    \ linearly decrease its\n   rate.  If the actual throughput is greater than the\
    \ expected\n   throughput minus a threshold called \"alpha\" (with alpha < beta),\
    \ this\n   is taken as a sign that the network is underutilized, causing the\n\
    \   protocol to linearly increase its rate.\n   TCP Vegas has been analyzed extensively.\
    \  One of the most prominent\n   properties of TCP Vegas is its fairness between\
    \ multiple flows of the\n   same kind, which does not penalize flows with large\
    \ propagation\n   delays in the same way as standard TCP.  While it was not the\
    \ first\n   protocol that uses delay as a congestion indication, its predecessors\n\
    \   (like CARD [Jai89], Tri-S [Wan91], or DUAL [Wan92]) are not discussed\n  \
    \ here because of the historical \"landmark\" role that TCP Vegas has\n   taken\
    \ in the literature.\n   Delay-based transport protocols that were designed to\
    \ be non-\n   intrusive include TCP Nice [Ven02] and TCP Low Priority (TCP-LP)\n\
    \   [Kuz06].  TCP Nice [Ven02] follows the same basic approach as TCP\n   Vegas\
    \ but improves upon it in some aspects.  Because of its moderate\n   linear-decrease\
    \ congestion response, TCP Vegas can affect standard\n   TCP despite its ability\
    \ to detect congestion early.  TCP Nice removes\n   this issue by halving the\
    \ congestion window (at most once per RTT,\n   like standard TCP) instead of linearly\
    \ reducing it.  To avoid being\n   too conservative, this is only done if a fixed\
    \ predefined fraction of\n   delay-based incipient congestion signals appears\
    \ within one RTT.\n   Otherwise, TCP Nice falls back to the congestion-avoidance\
    \ rules of\n   TCP Vegas if no packet was lost or standard TCP if a packet was\
    \ lost.\n   One more feature of TCP Nice is its ability to support a congestion\n\
    \   window of less than one packet, by clocking out single packets over\n   more\
    \ than one RTT.  With ns-2 simulations and real-life experiments\n   using a Linux\
    \ implementation, the authors of [Ven02] show that TCP\n   Nice achieves its goal\
    \ of efficiently utilizing spare capacity while\n   being non-intrusive to standard\
    \ TCP.\n   Other than TCP Vegas and TCP Nice, TCP-LP [Kuz06] uses only the one-\n\
    \   way delay (OWD) instead of the RTT as an indicator of incipient\n   congestion.\
    \  This is done to avoid reacting to delay fluctuations\n   that are caused by\
    \ reverse cross-traffic.  Using the TCP Timestamps\n   option [RFC1323], the OWD\
    \ is determined as the difference between the\n   receiver's Timestamp value in\
    \ the ACK and the original Timestamp\n   value that the receiver copied into the\
    \ ACK.  While the result of\n   this subtraction can only precisely represent\
    \ the OWD if clocks are\n   synchronized, its absolute value is of no concern\
    \ to TCP-LP, and\n   hence clock synchronization is unnecessary.  Using a constant\n\
    \   smoothing parameter, TCP-LP calculates an Exponentially Weighted\n   Moving\
    \ Average (EWMA) of the measured OWD and checks whether the\n   result exceeds\
    \ a threshold within the range of the minimum and\n   maximum OWD that was seen\
    \ during the connection's lifetime; if it\n   does, this condition is interpreted\
    \ as an \"early congestion\n   indication\".  The minimum and maximum OWD values\
    \ are initialized\n   during the slow-start phase.\n   Regarding its reaction\
    \ to an early congestion indication, TCP-LP\n   tries to strike a middle ground\
    \ between the overly conservative\n   choice of _immediately_ setting the congestion\
    \ window to one packet,\n   and the presumably too aggressive choice of simply\
    \ halving the\n   congestion window like standard TCP; TCP-LP tries to delay the\
    \ former\n   action by an additional RTT, to see if there is persistent congestion\n\
    \   or not.  It does so by halving the window at first in response to an\n   early\
    \ congestion indication, then initializing an \"inference time-out\n   timer\"\
    \ and maintaining the current congestion window until this timer\n   fires.  If\
    \ another early congestion indication appeared during this\n   \"inference phase\"\
    , the window is then set to 1; otherwise, the window\n   is maintained and TCP-LP\
    \ continues to increase it in the standard\n   Additive-Increase fashion.  This\
    \ method ensures that it takes at\n   least two RTTs for a TCP-LP flow to decrease\
    \ its window to 1, and\n   that, like standard TCP, TCP-LP reacts to congestion\
    \ at most once per\n   RTT.\n   Using a simple analytical model, the authors of\
    \ TCP-LP [Kuz06]\n   illustrate the feasibility of a delay-based LBE transport\
    \ by showing\n   that, due to the non-linear relationship between throughput and\
    \ RTT,\n   it is possible to avoid interfering with standard TCP traffic even\n\
    \   when the flows under consideration have a larger RTT than standard\n   TCP\
    \ flows.  With ns-2 simulations and real-life experiments using a\n   Linux implementation,\
    \ the authors of [Kuz06] show that TCP-LP is\n   largely non-intrusive to TCP\
    \ traffic while at the same time enabling\n   it to utilize a large portion of\
    \ the excess network bandwidth, which\n   is fairly shared among competing TCP-LP\
    \ flows.  They also show that\n   using their protocol for bulk data transfers\
    \ greatly reduces file\n   transfer times of competing best-effort web traffic.\n\
    \   Sync-TCP [Wei05] follows a similar approach as TCP-LP, by adapting\n   its\
    \ reaction to congestion according to changes in the OWD.  By\n   comparing the\
    \ estimated (average) forward queuing delay to the\n   maximum observed delay,\
    \ Sync-TCP adapts the Additive-Increase\n   Multiplicative-Decrease (AIMD) parameters\
    \ depending on the trend\n   followed by the average delay over an observation\
    \ window.  Even\n   though the authors of [Wei05] did not explicitly consider\
    \ its use as\n   an LBE protocol, Sync-TCP was designed to react early to incipient\n\
    \   congestion, while grabbing available bandwidth more aggressively than\n  \
    \ a standard TCP in congestion-avoidance mode.\n   Delay-based congestion control\
    \ is also the basis of proposals that\n   aim at adapting TCP's congestion avoidance\
    \ to very high-speed\n   networks.  Some of these proposals, like Compound TCP\
    \ [Tan06] [Sri08]\n   and TCP Illinois [Liu08], are hybrid loss- and delay-based\n\
    \   mechanisms, whereas others (e.g., NewVegas [Dev03], FAST TCP [Wei06],\n  \
    \ or CODE TCP [Cha10]) are variants of Vegas based primarily on delays.\n"
- title: 2.1.  Accuracy of Delay-Based Congestion Predictors
  contents:
  - "2.1.  Accuracy of Delay-Based Congestion Predictors\n   The accuracy of delay-based\
    \ congestion predictors has been the\n   subject of a good deal of research, see,\
    \ e.g., [Bia03], [Mar03],\n   [Pra04], [Rew06], [McC08].  The main result of most\
    \ of these studies\n   is that delays (or, more precisely, round-trip times) are,\
    \ in\n   general, weakly correlated with congestion.  There are several\n   factors\
    \ that may induce such a poor correlation:\n   o  Bottleneck buffer size: in principle,\
    \ a delay-based mechanism\n      could be made \"more than TCP friendly\" _if_\
    \ buffers are \"large\n      enough\", so that RTT fluctuations and/or deviations\
    \ from the\n      minimum RTT can be detected by the end-host with reasonable\n\
    \      accuracy.  Otherwise, it may be hard to distinguish real delay\n      variations\
    \ from measurement noise.\n   o  RTT measurement issues: in principle, RTT samples\
    \ may suffer from\n      poor resolution, due to timers which are too coarse-grained\
    \ with\n      respect to the scale of delay fluctuations.  Also, a flow may\n\
    \      obtain a very noisy estimate of RTTs due to undersampling, under\n    \
    \  some circumstances (e.g., the flow rate is much lower than the\n      link\
    \ bandwidth).  For TCP, other potential sources of measurement\n      noise include\
    \ TCP segmentation offloading (TSO) and the use of\n      delayed ACKs [Hay10].\
    \  A congested reverse path may also result in\n      an erroneous assessment\
    \ of the congestion state of the forward\n      path.  Finally, in the case of\
    \ fast or short-distance links, the\n      majority of the measured delay can\
    \ in fact be due to processing in\n      the involved hosts; typically, this processing\
    \ delay is not of\n      interest, and it can underlie fluctuations that are not\
    \ related to\n      the network at all.\n   o  Level of statistical multiplexing\
    \ and RTT sampling: it may be easy\n      for an individual flow to \"miss\" loss/queue\
    \ overflow events,\n      especially if the number of flows sharing a bottleneck\
    \ buffer is\n      significant.  This is nicely illustrated, e.g., in Figure 1\
    \ of\n      [McC08].\n   o  Impact of wireless links: several mechanisms that\
    \ are typical of\n      wireless links, like link-layer scheduling and error recovery,\
    \ may\n      induce strong delay fluctuations over short timescales [Gur04].\n\
    \   Interestingly, the results of Bhandarkar et al. [Bha07] seem to paint\n  \
    \ a slightly different picture, regarding the accuracy of delay-based\n   congestion\
    \ prediction.  Bhandarkar et al. claim that it is possible\n   to significantly\
    \ improve prediction accuracy by adopting some simple\n   techniques (smoothing\
    \ of RTT samples, increasing the RTT sampling\n   frequency).  Nonetheless, they\
    \ acknowledge that even with such\n   techniques, it is not possible to eradicate\
    \ detection errors.  Their\n   proposed delay-based congestion-avoidance method,\
    \ PERT (Probabilistic\n   Early Response TCP), mitigates the impact of residual\
    \ detection\n   errors by means of a probabilistic response mechanism to congestion-\n\
    \   detection events.\n"
- title: 2.2.  Potential Issues with Delay-Based Congestion Control for LBE
  contents:
  - "2.2.  Potential Issues with Delay-Based Congestion Control for LBE\n      Transport\n\
    \   Whether a delay-based protocol behaves in its intended manner (e.g.,\n   it\
    \ is \"more than TCP friendly\", or it grabs available bandwidth in a\n   very\
    \ aggressive manner) may depend on the accuracy issues listed in\n   Section 2.1.\
    \  Moreover, protocols like Vegas need to keep an estimate\n   of the minimum\
    \ (\"base\") delay; this makes such protocols highly\n   sensitive to eventual\
    \ changes in the end-to-end route during the\n   lifetime of the flow [Mo99].\n\
    \   Regarding the issue of false positives or false negatives with a\n   delay-based\
    \ congestion detector, most studies focus on the loss of\n   throughput coming\
    \ from the erroneous detection of queue build-up and\n   of alleviation of congestion.\
    \  Arguably, for an LBE transport\n   protocol it's better to err on the \"more-than-TCP-friendly\
    \ side\",\n   that is, to always yield to _perceived_ congestion whether it is\n\
    \   \"real\" or not; however, failure to detect congestion (due to one of\n  \
    \ the above accuracy problems) would result in behavior that is not\n   LBE. \
    \ For instance, consider the case in which the bottleneck buffer\n   is small,\
    \ so that the contribution of queueing delay at the\n   bottleneck to the global\
    \ end-to-end delay is small.  In such a case,\n   a flow using a delay-based mechanism\
    \ might end up consuming a good\n   deal of bandwidth with respect to a competing\
    \ standard TCP flow,\n   unless it also incorporates a suitable reaction to loss.\n\
    \   A delay-based mechanism may also suffer from the so-called \"latecomer\n \
    \  advantage\" (or \"latecomer unfairness\") problem.  Consider the case in\n\
    \   which the bottleneck link is already (very) congested.  In such a\n   scenario,\
    \ delay variations may be quite small; hence, it may be very\n   difficult to\
    \ tell an empty queue from a heavily-loaded queue, in\n   terms of delay fluctuation.\
    \  Therefore, a newly-arriving delay-based\n   flow may start sending faster when\
    \ there is already heavy congestion,\n   eventually driving away loss-based flows\
    \ [Sha05] [Car10].\n"
- title: 3.  Non-Delay-Based Transport Protocols
  contents:
  - "3.  Non-Delay-Based Transport Protocols\n   There exist a few transport-layer\
    \ proposals that achieve an LBE\n   service without relying on delay as an indicator\
    \ of congestion.  In\n   the algorithms discussed below, the loss rate of the\
    \ flow determines,\n   either implicitly or explicitly, the sending rate (which\
    \ is adapted\n   so as to obtain a lower share of the available bandwidth than\n\
    \   standard TCP); such mechanisms likely cause more queuing delay and\n   react\
    \ to congestion more slowly than delay-based ones.\n   4CP [Liu07], which stands\
    \ for \"Competitive and Considerate Congestion\n   Control\", is a protocol that\
    \ provides an LBE service by changing the\n   window control rules of standard\
    \ TCP.  A \"virtual window\" is\n   maintained that, during a so-called \"bad\
    \ congestion phase\", is\n   reduced to less than a predefined minimum value of\
    \ the actual\n   congestion window.  The congestion window is only increased again\n\
    \   once the virtual window exceeds this minimum, and in this way the\n   virtual\
    \ window controls the duration during which the sender\n   transmits with a fixed\
    \ minimum rate.  Whether the congestion state is\n   \"bad\" or \"good\" depends\
    \ on whether the loss event rate is above or\n   below a threshold (or target)\
    \ value.  The 4CP congestion-avoidance\n   algorithm allows for setting a target\
    \ average window and avoids\n   starvation of \"background\" flows while bounding\
    \ the impact on\n   \"foreground\" flows.  Its performance was evaluated in ns-2\n\
    \   simulations and in real-life experiments with a kernel-level\n   implementation\
    \ in Microsoft Windows Vista.\n   The MulTFRC [Dam09] protocol is an extension\
    \ of TCP-Friendly Rate\n   Control (TFRC) [RFC5348] for multiple flows.  MulTFRC\
    \ takes the main\n   idea of MulTCP [Cro98] and similar proposals (e.g., [Hac04],\
    \ [Hac08],\n   [Kuo08]) a step further.  A single MulTCP flow tries to emulate\
    \ (and\n   be as friendly as) a number N > 1 of parallel TCP flows.  By\n   supporting\
    \ values of N between 0 and 1, MulTFRC can be used as a\n   mechanism for an LBE\
    \ service.  Since it does not react to delay like\n   the protocols described\
    \ in Section 2 but adjusts its rate like TFRC,\n   MulTFRC can probably be expected\
    \ to be more aggressive than\n   mechanisms such as TCP Nice or TCP-LP.  This\
    \ also means that MulTFRC\n   is less likely to be prone to starvation, as its\
    \ aggressiveness is\n   tunable at a fine granularity, even when N is between\
    \ 0 and 1.\n"
- title: 4.  Upper-Layer Approaches
  contents:
  - "4.  Upper-Layer Approaches\n   The proposals described in this section do not\
    \ require modifying\n   transport-protocol standards.  Most of them can be regarded\
    \ as\n   running \"on top\" of an existing transport, even though they may be\n\
    \   implemented either at the application layer (i.e., in user-level\n   processes),\
    \ or in the kernel of the end-hosts' operating systems.\n   Such \"upper-layer\"\
    \ mechanisms may arguably be easier to deploy than\n   transport-layer approaches,\
    \ since they do not require any changes to\n   the transport itself.\n   A simplistic,\
    \ application-level approach to a background transport\n   service may consist\
    \ in scheduling automated transfers at times when\n   the network is lightly loaded,\
    \ e.g., as described in [Dyk02] for\n   cooperative proxy caching.  An issue with\
    \ such a technique is that it\n   may not necessarily be applicable to applications\
    \ like peer-to-peer\n   file transfer, since the notion of an \"off-peak hour\"\
    \ is not\n   meaningful when end-hosts may be located anywhere in the world.\n\
    \   The so-called Background Intelligent Transfer Service [BITS] is\n   implemented\
    \ in several versions of Microsoft Windows.  BITS uses a\n   system of application-layer\
    \ priority levels for file-transfer jobs,\n   together with monitoring of bandwidth\
    \ usage of the network interface\n   (or, in more recent versions, of the network\
    \ gateway connected to the\n   end-host), so that low-priority transfers at a\
    \ given end-host give\n   way to both high-priority (foreground) transfers and\
    \ traffic from\n   interactive applications at the same host.\n   A different\
    \ approach is taken in [Egg05] -- here, the priority of a\n   flow is reduced\
    \ via a generic idletime scheduling strategy in a\n   host's operating system.\
    \  While results presented in this paper show\n   that the new scheduler can effectively\
    \ shield regular tasks from low-\n   priority ones (e.g., TCP from greedy UDP)\
    \ with only a minor\n   performance impact, it is an underlying assumption that\
    \ all involved\n   end-hosts would use the idletime scheduler.  In other words,\
    \ it is\n   not the focus of this work to protect a standard TCP flow that\n \
    \  originates from any host where the presented scheduling scheme may\n   not\
    \ be implemented.\n"
- title: 4.1.  Receiver-Oriented, Flow-Control-Based Approaches
  contents:
  - "4.1.  Receiver-Oriented, Flow-Control-Based Approaches\n   Some proposals for\
    \ achieving an LBE behavior work by exploiting\n   existing transport-layer features\
    \ -- typically, at the \"receiving\"\n   side.  In particular, TCP's built-in\
    \ flow control can be used as a\n   means to achieve a low-priority transport\
    \ service.\n   The mechanism described in [Spr00] is an example of the above\n\
    \   technique.  Such mechanism controls the bandwidth by letting the\n   receiver\
    \ intelligently manipulate the receiver window of standard\n   TCP.  This is possible\
    \ because the authors assume a client-server\n   setting where the receiver's\
    \ access link is typically the bottleneck.\n   The scheme incorporates a delay-based\
    \ calculation of the expected\n   queue length at the bottleneck, which is quite\
    \ similar to the\n   calculation in the above delay-based protocols, e.g., TCP\
    \ Vegas.\n   Using a Linux implementation, where TCP flows are classified\n  \
    \ according to their application's needs, Spring et al. show in [Spr00]\n   that\
    \ a significant improvement in packet latency can be attained over\n   an unmodified\
    \ system, while maintaining good link utilization.\n   A similar method is employed\
    \ by Mehra et al. [Meh03], where both the\n   advertised receiver window and the\
    \ delay in sending ACK messages are\n   dynamically adapted to attain a given\
    \ rate.  As in [Spr00], Mehra et\n   al. assume that the bottleneck is located\
    \ at the receiver's access\n   link.  However, the latter also propose a bandwidth-sharing\
    \ system,\n   allowing control of the bandwidth allocated to different flows,\
    \ as\n   well as allotment of a minimum rate to some flows.\n   Receiver window\
    \ tuning is also done in [Key04], where choosing the\n   right value for the window\
    \ is phrased as an optimization problem.  On\n   this basis, two algorithms are\
    \ presented, binary search (which is\n   faster than the other one at achieving\
    \ a good operation point but\n   fluctuates) and stochastic optimization (which\
    \ does not fluctuate but\n   converges slower than binary search).  These algorithms\
    \ merely use\n   the previous receiver window and the amount of data received\
    \ during\n   the previous control interval as input.  According to [Key04], the\n\
    \   encouraging simulation results suggest that such an application-level\n  \
    \ mechanism can work almost as well as a transport-layer scheme like\n   TCP-LP.\n\
    \   Another way of dealing with non-interactive flows, like web\n   prefetching,\
    \ is to rate-limit the transfer of such bursty traffic\n   [Cro98b].  Note that\
    \ one of the techniques used in [Cro98b] is,\n   precisely, to have the downloading\
    \ application adapt the TCP receiver\n   window, so as to reduce the data rate\
    \ to the minimum needed (thus\n   disturbing other flows as little as possible\
    \ while respecting a\n   deadline for the transfer of the data).\n"
- title: 5.  Network-Assisted Approaches
  contents:
  - "5.  Network-Assisted Approaches\n   Network-layer mechanisms, like active queue\
    \ management (AQM) and\n   packet scheduling in routers, can be exploited by a\
    \ transport\n   protocol for achieving an LBE service.  Such approaches may result\
    \ in\n   improved protection of non-LBE flows (e.g., when scheduling is used);\n\
    \   besides, approaches using an explicit, AQM-based congestion signaling\n  \
    \ may arguably be more robust than, say, delay-based transports for\n   detecting\
    \ impending congestion.  However, an obvious drawback of any\n   network-assisted\
    \ approach is that, in principle, they need\n   modifications in both end-hosts\
    \ and intermediate network nodes.\n   Harp [Kok04] realizes an LBE service by\
    \ dissipating background\n   traffic to less-utilized paths of the network, based\
    \ on multipath\n   routing and multipath congestion control.  This is achieved\
    \ without\n   changing all routers, by using edge nodes as relays.  According\
    \ to\n   the authors, these edge nodes should be gateways of organizations in\n\
    \   order to align their scheme with usage incentives, but the technical\n   solution\
    \ would also work if Harp was only deployed in end-hosts.  It\n   detects impending\
    \ congestion by looking at delay, similar to TCP Nice\n   [Ven02], and manages\
    \ to improve the utilization and fairness of TCP\n   over pure single-path solutions\
    \ without requiring any changes to the\n   TCP itself.\n   Another technique is\
    \ that used by protocols like Network-Friendly TCP\n   (NF-TCP) [Aru10], where\
    \ a bandwidth-estimation module integrated into\n   the transport protocol allows\
    \ to rapidly take advantage of free\n   capacity.  NF-TCP combines this with an\
    \ early congestion detection\n   based on Explicit Congestion Notification (ECN)\
    \ [RFC3168] and RED\n   [RFC2309]; when congestion starts building up, appropriate\
    \ tuning of\n   a RED queue allows to mark low-priority (i.e., NF-TCP) packets\
    \ with a\n   much higher probability than high-priority (i.e., standard TCP)\n\
    \   packets, so low-priority flows yield up bandwidth before standard TCP\n  \
    \ flows.  NF-TCP could be implemented by adapting the congestion\n   control behavior\
    \ of TCP without requiring to change the protocol on\n   the wire -- with the\
    \ only exception that NF-TCP-capable routers must\n   be able to somehow distinguish\
    \ NF-TCP traffic from other TCP traffic.\n   In [Ven08], Venkataraman et al. propose\
    \ a transport-layer approach to\n   leverage an existing, network-layer LBE service\
    \ based on priority\n   queueing.  Their transport protocol, which they call PLT\
    \ (Priority-\n   Layer Transport), splits a layer-4 connection into two flows,\
    \ a high-\n   priority one and a low-priority one.  The high-priority flow is\
    \ sent\n   over the higher-priority queueing class (in principle, offering a\n\
    \   best-effort service) using an AIMD, TCP-like congestion control\n   mechanism.\
    \  The low-priority flow, which is mapped to the LBE class,\n   uses a non TCP-friendly\
    \ congestion control algorithm.  The goal of\n   PLT is thus to maximize its aggregate\
    \ throughput by exploiting unused\n   capacity in an aggressive way, while protecting\
    \ standard TCP flows\n   carried by the best-effort class.  Similar in spirit,\
    \ [Ott03]\n   proposes simple changes to only the AIMD parameters of TCP for use\n\
    \   over a network-layer LBE service, so that such \"filler\" traffic may\n  \
    \ aggressively consume unused bandwidth.  Note that [Ven08] also\n   considers\
    \ a mechanism for detecting the lack of priority queueing in\n   the network,\
    \ so that the non-TCP friendly flow may be inhibited.  The\n   PLT receiver monitors\
    \ the loss rate of both flows; if the high-\n   priority flow starts seeing losses\
    \ while the low-priority one does\n   not experience 100% loss, this is taken\
    \ as an indication of the\n   absence of strict priority queueing.\n"
- title: 6.  LEDBAT Considerations
  contents:
  - "6.  LEDBAT Considerations\n   The previous sections have shown that there is\
    \ a large amount of work\n   on attaining an LBE service, and that it is quite\
    \ heterogeneous in\n   nature.  The algorithm developed by the LEDBAT working\
    \ group [Sha11]\n   can be classified as a delay-based mechanism; as such, it\
    \ is similar\n   in spirit to the protocols presented in Section 2.  It is, however,\n\
    \   not a protocol -- how it is actually applied to the Internet, i.e.,\n   how\
    \ to use existing or even new transport protocols together with the\n   LEDBAT\
    \ algorithm, is not defined by the LEDBAT working group.  As it\n   heavily relies\
    \ on delay, the discussion in Sections 2.1 and 2.2\n   applies to it.  The performance\
    \ of LEDBAT has been analyzed in\n   comparison with some of the other work presented\
    \ here in several\n   articles, e.g.  [Aru10], [Car10], [Sch10], but these analyses\
    \ have to\n   be examined with care: at the time of writing, LEDBAT was still\
    \ a\n   moving target.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to thank Melissa Chavez, Dragana\
    \ Damjanovic,\n   and Yinxia Zhao for reference pointers, as well as Jari Arkko,\n\
    \   Mayutan Arumaithurai, Elwyn Davies, Wesley Eddy, Stephen Farrell,\n   Mirja\
    \ Kuehlewind, Tina Tsou, and Rolf Winter for their detailed\n   reviews and suggestions.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document introduces no new security considerations.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [Aru10]    Arumaithurai, M., Fu, X., and K. Ramakrishnan,\
    \ \"NF-TCP: A\n              Network Friendly TCP Variant for Background Delay-\n\
    \              Insensitive Applications\", Technical Report No. IFI-TB-\n    \
    \          2010-05, Institute of Computer Science, University of\n           \
    \   Goettingen, Germany, September 2010, <http://\n              www.net.informatik.uni-goettingen.de/publications/1718/\n\
    \              NF-TCP-techreport.pdf>.\n   [BITS]     Microsoft, \"Windows Background\
    \ Intelligent Transfer\n              Service\",\n              <http://msdn.microsoft.com/library/bb968799(VS.85).aspx>.\n\
    \   [Bha07]    Bhandarkar, S., Reddy, A., Zhang, Y., and D. Loguinov,\n      \
    \        \"Emulating AQM from end hosts\", Proceedings of ACM\n              SIGCOMM\
    \ 2007, 2007.\n   [Bia03]    Biaz, S. and N. Vaidya, \"Is the round-trip time\
    \ correlated\n              with the number of packets in flight?\", Proceedings\
    \ of the\n              3rd ACM SIGCOMM conference on Internet measurement (IMC\n\
    \              '03), pages 273-278, 2003.\n   [Bra94]    Brakmo, L., O'Malley,\
    \ S., and L. Peterson, \"TCP Vegas: New\n              techniques for congestion\
    \ detection and avoidance\",\n              Proceedings of SIGCOMM '94, pages\
    \ 24-35, August 1994.\n   [Car10]    Carofiglio, G., Muscariello, L., Rossi, D.,\
    \ and S.\n              Valenti, \"The quest for LEDBAT fairness\", Proceedings\
    \ of\n              IEEE GLOBECOM 2010, December 2010.\n   [Cha10]    Chan, Y.,\
    \ Lin, C., Chan, C., and C. Ho, \"CODE TCP: A\n              competitive delay-based\
    \ TCP\", Computer\n              Communications, 33(9):1013-1029, June 2010.\n\
    \   [Cro98]    Crowcroft, J. and P. Oechslin, \"Differentiated end-to-end\n  \
    \            Internet services using a weighted proportional fair\n          \
    \    sharing TCP\", ACM SIGCOMM Computer Communication\n              Review,\
    \ vol. 28, no. 3, pp. 53-69, July 1998.\n   [Cro98b]   Crovella, M. and P. Barford,\
    \ \"The network effects of\n              prefetching\", Proceedings of IEEE INFOCOM\
    \ 1998,\n              April 1998.\n   [Dam09]    Damjanovic, D. and M. Welzl,\
    \ \"MulTFRC: Providing Weighted\n              Fairness for Multimedia Applications\
    \ (and others too!)\",\n              ACM Computer Communication Review, vol.\
    \ 39, no. 3,\n              July 2009.\n   [Dev03]    De Vendictis, A., Baiocchi,\
    \ A., and M. Bonacci, \"Analysis\n              and enhancement of TCP Vegas congestion\
    \ control in a mixed\n              TCP Vegas and TCP Reno network scenario\"\
    , Performance\n              Evaluation, 53(3-4):225-253, 2003.\n   [Dyk02]  \
    \  Dykes, S. and K. Robbins, \"Limitations and benefits of\n              cooperative\
    \ proxy caching\", IEEE Journal on Selected Areas\n              in Communications,\
    \ 20(7):1290-1304, September 2002.\n   [Egg05]    Eggert, L. and J. Touch, \"\
    Idletime Scheduling with\n              Preemption Intervals\", Proceedings of\
    \ 20th ACM Symposium\n              on Operating Systems Principles, SOSP 2005,\
    \ Brighton,\n              United Kingdom, pp. 249/262, October 2005.\n   [Gur04]\
    \    Gurtov, A. and S. Floyd, \"Modeling wireless links for\n              transport\
    \ protocols\", ACM SIGCOMM Computer Communications\n              Review, 34(2):85-96,\
    \ April 2004.\n   [Hac04]    Hacker, T., Noble, B., and B. Athey, \"Improving\
    \ Throughput\n              and Maintaining Fairness using Parallel TCP\", Proceedings\n\
    \              of IEEE INFOCOM 2004, March 2004.\n   [Hac08]    Hacker, T. and\
    \ P. Smith, \"Stochastic TCP: A Statistical\n              Approach to Congestion\
    \ Avoidance\", Proceedings of\n              PFLDnet 2008, March 2008.\n   [Hay10]\
    \    Hayes, D., \"Timing enhancements to the FreeBSD kernel to\n             \
    \ support delay and rate based TCP mechanisms\", Technical\n              Report\
    \ 100219A, Centre for Advanced Internet\n              Architectures, Swinburne\
    \ University of Technology,\n              February 2010.\n   [Hen00]    Hengartner,\
    \ U., Bolliger, J., and T. Gross, \"TCP Vegas\n              revisited\", Proceedings\
    \ of IEEE INFOCOM 2000, March 2000.\n   [Jai89]    Jain, R., \"A delay-based approach\
    \ for congestion avoidance\n              in interconnected heterogeneous computer\
    \ networks\", ACM\n              Computer Communication Review, 19(5):56-71, October\
    \ 1989.\n   [Key04]    Key, P., Massoulie, L., and B. Wang, \"Emulating Low-\n\
    \              Priority Transport at the Application Layer: a Background\n   \
    \           Transfer Service\", Proceedings of ACM SIGMETRICS 2004,\n        \
    \      January 2004.\n   [Kok04]    Kokku, R., Bohra, A., Ganguly, S., and A.\
    \ Venkataramani,\n              \"A Multipath Background Network Architecture\"\
    , Proceedings\n              of IEEE INFOCOM 2007, May 2007.\n   [Kon09]    Konda,\
    \ V. and J. Kaur, \"RAPID: Shrinking the Congestion-\n              control Timescale\"\
    , Proceedings of IEEE INFOCOM 2009,\n              April 2009.\n   [Kuo08]   \
    \ Kuo, F. and X. Fu, \"Probe-Aided MulTCP: an aggregate\n              congestion\
    \ control mechanism\", ACM SIGCOMM Computer\n              Communication Review,\
    \ vol. 38, no. 1, pp. 17-28,\n              January 2008.\n   [Kur00]    Kurata,\
    \ K., Hasegawa, G., and M. Murata, \"Fairness\n              Comparisons Between\
    \ TCP Reno and TCP Vegas for Future\n              Deployment of TCP Vegas\",\
    \ Proceedings of INET 2000,\n              July 2000.\n   [Kuz06]    Kuzmanovic,\
    \ A. and E. Knightly, \"TCP-LP: low-priority\n              service via end-point\
    \ congestion control\", IEEE/ACM\n              Transactions on Networking (ToN),\
    \  Volume 14, Issue 4, pp.\n              739-752., August 2006,\n           \
    \   <http://www.ece.rice.edu/networks/TCP-LP/>.\n   [Liu07]    Liu, S., Vojnovic,\
    \ M., and D. Gunawardena, \"Competitive\n              and Considerate Congestion\
    \ Control for Bulk Data\n              Transfers\", Proceedings of IWQoS 2007,\
    \ June 2007.\n   [Liu08]    Liu, S., Basar, T., and R. Srikant, \"TCP-Illinois:\
    \ A loss-\n              and delay-based congestion control algorithm for high-\n\
    \              speed networks\", Performance Evaluation, 65(6-7):417-440,\n  \
    \            2008.\n   [Mar03]    Martin, J., Nilsson, A., and I. Rhee, \"Delay-based\n\
    \              congestion avoidance for TCP\", IEEE/ACM Transactions on\n    \
    \          Networking, 11(3):356-369, June 2003.\n   [McC08]    McCullagh, G.\
    \ and D. Leith, \"Delay-based congestion\n              control: Sampling and\
    \ correlation issues revisited\",\n              Technical report, Hamilton Institute,\
    \ 2008.\n   [Meh03]    Mehra, P., Zakhor, A., and C. De Vleeschouwer, \"Receiver-\n\
    \              Driven Bandwidth Sharing for TCP\", Proceedings of IEEE\n     \
    \         INFOCOM 2003, April 2003.\n   [Mo99]     Mo, J., La, R., Anantharam,\
    \ V., and J. Walrand, \"Analysis\n              and Comparison of TCP Reno and\
    \ TCP Vegas\", Proceedings of\n              IEEE INFOCOM 1999, March 1999.\n\
    \   [Ott03]    Ott, B., Warnky, T., and V. Liberatore, \"Congestion\n        \
    \      control for low-priority filler traffic\", SPIE QoS 2003\n            \
    \  (Quality of Service over Next-Generation Internet), In\n              Proc.\
    \ SPIE, Vol. 5245, 154, Monterey (CA), USA, July 2003.\n   [Pra04]    Prasad,\
    \ R., Jain, M., and C. Dovrolis, \"On the\n              effectiveness of delay-based\
    \ congestion avoidance\",\n              Proceedings of PFLDnet, 2004.\n   [RFC1323]\
    \  Jacobson, V., Braden, B., and D. Borman, \"TCP Extensions\n              for\
    \ High Performance\", RFC 1323, May 1992.\n   [RFC2309]  Braden, B., Clark, D.,\
    \ Crowcroft, J., Davie, B., Deering,\n              S., Estrin, D., Floyd, S.,\
    \ Jacobson, V., Minshall, G.,\n              Partridge, C., Peterson, L., Ramakrishnan,\
    \ K., Shenker,\n              S., Wroclawski, J., and L. Zhang, \"Recommendations\
    \ on\n              Queue Management and Congestion Avoidance in the\n       \
    \       Internet\", RFC 2309, April 1998.\n   [RFC3168]  Ramakrishnan, K., Floyd,\
    \ S., and D. Black, \"The Addition\n              of Explicit Congestion Notification\
    \ (ECN) to IP\",\n              RFC 3168, September 2001.\n   [RFC3662]  Bless,\
    \ R., Nichols, K., and K. Wehrle, \"A Lower Effort\n              Per-Domain Behavior\
    \ (PDB) for Differentiated Services\",\n              RFC 3662, December 2003.\n\
    \   [RFC5348]  Floyd, S., Handley, M., Padhye, J., and J. Widmer, \"TCP\n    \
    \          Friendly Rate Control (TFRC): Protocol Specification\",\n         \
    \     RFC 5348, September 2008.\n   [RFC5681]  Allman, M., Paxson, V., and E.\
    \ Blanton, \"TCP Congestion\n              Control\", RFC 5681, September 2009.\n\
    \   [Rew06]    Rewaskar, S., Kaur, J., and D. Smith, \"Why don't delay-\n    \
    \          based congestion estimators work in the real-world?\",\n          \
    \    Technical report TR06-001, University of North Carolina at\n            \
    \  Chapel Hill, Dept. of Computer Science, January 2006.\n   [Sch10]    Schneider,\
    \ J., Wagner, J., Winter, R., and H. Kolbe, \"Out\n              of my Way --\
    \ Evaluating Low Extra Delay Background\n              Transport in an ADSL Access\
    \ Network\", Proceedings of the\n              22nd International Teletraffic\
    \ Congress ITC22, 2010.\n   [Sha05]    Shalunov, S., Dunn, L., Gu, Y., Low, S.,\
    \ Rhee, I., Senger,\n              S., Wydrowski, B., and L. Xu, \"Design Space\
    \ for a Bulk\n              Transport Tool\", Technical Report, Internet2 Transport\n\
    \              Group, May 2005.\n   [Sha11]    Shalunov, S., Hazel, G., Iyengar,\
    \ J., and M. Kuehlewind,\n              \"Low Extra Delay Background Transport\
    \ (LEDBAT)\", Work\n              in Progress, May 2011.\n   [Spr00]    Spring,\
    \ N., Chesire, M., Berryman, M., Sahasranaman, V.,\n              Anderson, T.,\
    \ and B. Bershad, \"Receiver based management\n              of low bandwidth\
    \ access links\", Proceedings of IEEE\n              INFOCOM 2000, pp. 245-254,\
    \ vol. 1, 2000.\n   [Sri08]    Sridharan, M., Tan, K., Bansala, D., and D. Thaler,\n\
    \              \"Compound TCP: A New TCP Congestion Control for High-Speed\n \
    \             and Long Distance Networks\", Work in Progress,\n              November\
    \ 2008.\n   [Tan06]    Tan, K., Song, J., Zhang, Q., and M. Sridharan, \"A\n \
    \             Compound TCP approach for high-speed and long distance\n       \
    \       networks\", Proceedings of IEEE INFOCOM 2006, Barcelona,\n           \
    \   Spain, April 2008.\n   [Ven02]    Venkataramani, A., Kokku, R., and M. Dahlin,\
    \ \"TCP Nice: a\n              mechanism for background transfers\", Proceedings\
    \ of\n              OSDI '02, 2002.\n   [Ven08]    Venkataraman, V., Francis,\
    \ P., Kodialam, M., and T.\n              Lakshman, \"A priority-layered approach\
    \ to transport for\n              high bandwidth-delay product networks\", Proceedings\
    \ of ACM\n              CoNEXT, Madrid, December 2008.\n   [Wan91]    Wang, Z.\
    \ and J. Crowcroft, \"A new congestion control\n              scheme: slow start\
    \ and search (Tri-S)\", ACM Computer\n              Communication Review, 21(1):56-71,\
    \ January 1991.\n   [Wan92]    Wang, Z. and J. Crowcroft, \"Eliminating periodic\
    \ packet\n              losses in the 4.3-Tahoe BSD TCP congestion control\n \
    \             algorithm\", ACM Computer Communication Review, 22(2):9-16,\n  \
    \            January 1992.\n   [Wei05]    Weigle, M., Jeffay, K., and F. Smith,\
    \ \"Delay-based early\n              congestion detection and adaptation in TCP:\
    \ impact on web\n              performance\", Computer Communications, 28(8):837-850,\n\
    \              May 2005.\n   [Wei06]    Wei, D., Jin, C., Low, S., and S. Hegde,\
    \ \"FAST TCP:\n              Motivation, architecture, algorithms, performance\"\
    , IEEE/\n              ACM Transactions on Networking, 14(6):1246-1259,\n    \
    \          December 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael Welzl\n   University of Oslo\n   Department of\
    \ Informatics, PO Box 1080 Blindern\n   N-0316 Oslo\n   Norway\n   Phone: +47\
    \ 22 85 24 20\n   EMail: michawe@ifi.uio.no\n   David Ros\n   Institut Telecom\
    \ / Telecom Bretagne\n   Rue de la Chataigneraie, CS 17607\n   35576 Cesson Sevigne\
    \ cedex\n   France\n   Phone: +33 2 99 12 70 46\n   EMail: david.ros@telecom-bretagne.eu\n"
