- contents:
  - "                Enhanced Security Services (ESS) Update:\n                    Adding
    CertID Algorithm Agility\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   In the original Enhanced Security Services for S/MIME document (RFC\n
    \  2634), a structure for cryptographically linking the certificate to\n   be
    used in validation with the signature was introduced; this\n   structure was hardwired
    to use SHA-1.  This document allows for the\n   structure to have algorithm agility
    and defines a new attribute for\n   this purpose.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n     1.1.  Notation . . . . . . . . . . . . . . . . . . . . .
    . . . .  2\n     1.2.  Updates to RFC 2634  . . . . . . . . . . . . . . . . .
    . .  2\n   2.  Replace Section 5.4 'Signing Certificate Attribute\n       Definitions'
    . . . . . . . . . . . . . . . . . . . . . . . . .  3\n   3.  Insert New Section
    5.4.1 'Signing Certificate Attribute\n       Definition Version 2'  . . . . .
    . . . . . . . . . . . . . . .  4\n   4.  Insert New Section 5.4.1.1 'Certificate
    Identification\n       Version 2' . . . . . . . . . . . . . . . . . . . . . .
    . . . .  5\n   5.  Insert New Section 5.4.2 'Signing Certificate Attribute\n       Definition
    Version 1'  . . . . . . . . . . . . . . . . . . . .  7\n   6.  Insert New Section
    5.4.2.1 'Certificate Identification\n       Version 1' . . . . . . . . . . . .
    . . . . . . . . . . . . . .  8\n   7.  Security Considerations  . . . . . . .
    . . . . . . . . . . . .  9\n   8.  Normative References . . . . . . . . . . .
    . . . . . . . . . . 10\n   Appendix A.  ASN.1 Module  . . . . . . . . . . . .
    . . . . . . . . 11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In the original Enhanced Security Services (ESS) for S/MIME
    document\n   [ESS], a structure for cryptographically linking the certificate
    to\n   be used in validation with the signature was defined.  This\n   structure,
    called ESSCertID, identifies a certificate by its hash.\n   The structure is hardwired
    to use a SHA-1 hash value.  The recent\n   attacks on SHA-1 require that we define
    a new attribute that allows\n   for the use of different algorithms.  This document
    performs that\n   task.\n   This document defines the structure ESSCertIDv2 along
    with a new\n   attribute SigningCertificateV2, which uses the updated structure.\n
    \  This document allows for the structure to have algorithm agility by\n   including
    an algorithm identifier and defines a new signed attribute\n   to use the new
    structure.\n   This document specifies the continued use of ESSCertID to ensure\n
    \  compatibility when SHA-1 is used for certificate disambiguation.\n"
  - contents:
    - "1.1.  Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 1.1.  Notation
  - contents:
    - "1.2.  Updates to RFC 2634\n   This document updates Section 5.4 of RFC 2634.
      \ Once the updates are\n   applied, the revised section will have the following
      structure:\n   5.4  Signing Certificate Attribute Definitions\n   5.4.1  Signing
      Certificate Attribute Definition Version 2\n   5.4.1.1  Certificate Identification
      Version 2\n   5.4.2  Signing Certificate Attribute Definition Version 1\n   5.4.2.1
      \ Certificate Identification Version 1\n   In addition, the ASN.1 module in
      Appendix A is replaced.\n"
    title: 1.2.  Updates to RFC 2634
  title: 1.  Introduction
- contents:
  - "2.  Replace Section 5.4 'Signing Certificate Attribute Definitions'\n   5.4 Signing
    Certificate Attribute Definitions\n   The signing certificate attribute is designed
    to prevent simple\n   substitution and re-issue attacks, and to allow for a restricted
    set\n   of certificates to be used in verifying a signature.\n   Two different
    attributes exist for this due to a flaw in the original\n   design.  The only
    substantial difference between the two attributes\n   is that SigningCertificateV2
    allows for hash algorithm agility, while\n   SigningCertificate forces the use
    of the SHA-1 hash algorithm.  With\n   the recent advances in the ability to create
    hash collisions for\n   SHA-1, it is wise to move forward sooner rather than later.\n
    \  When the SHA-1 hash function is used, the SigningCertificate\n   attribute
    MUST be used.  The SigningCertificateV2 attribute MUST be\n   used if any algorithm
    other than SHA-1 is used and SHOULD NOT be used\n   for SHA-1.  Applications SHOULD
    recognize both attributes as long as\n   they consider SHA-1 able to distinguish
    between two different\n   certificates, (i.e., the possibility of a collision
    is sufficiently\n   low).  If both attributes exist in a single message, they
    are\n   independently evaluated.\n   Four cases exist that need to be taken into
    account when using this\n   attribute for correct processing:\n   1.  Signature
    validates and the hashes match: This is the success\n       case.\n   2.  Signature
    validates and the hashes do not match: In this case,\n       the certificate contained
    the correct public key, but the\n       certificate containing the public key
    is not the one that the\n       signer intended to be used.  In this case the
    application should\n       attempt a search for a different certificate with the
    same public\n       key and for which the hashes match.  If no such certificate
    can\n       be found, this is a failure case.\n   3.  Signature fails validation
    and the hashes match: In this case, it\n       can be assumed that the signature
    has been modified in some\n       fashion.  This is a failure case.\n   4.  Signature
    fails validation and the hashes do not match: In this\n       case, it can be
    either that the signature has been modified, or\n       that the wrong certificate
    has been used.  Applications should\n       attempt a search for a different certificate
    that matches the\n       hash value in the attribute and use the new certificate
    to retry\n       the signature validation.\n"
  title: 2.  Replace Section 5.4 'Signing Certificate Attribute Definitions'
- contents:
  - "3.  Insert New Section 5.4.1 'Signing Certificate Attribute Definition\n    Version
    2'\n   5.4.1 Signing Certificate Attribute Definition Version 2\n   The signing
    certificate attribute is designed to prevent the simple\n   substitution and re-issue
    attacks, and to allow for a restricted set\n   of certificates to be used in verifying
    a signature.\n   SigningCertificateV2 is identified by the OID:\n       id-aa-signingCertificateV2
    OBJECT IDENTIFIER ::= { iso(1)\n           member-body(2) us(840) rsadsi(113549)
    pkcs(1) pkcs9(9)\n           smime(16) id-aa(2) 47 }\n   The attribute has the
    ASN.1 definition:\n       SigningCertificateV2 ::=  SEQUENCE {\n           certs
    \       SEQUENCE OF ESSCertIDv2,\n           policies     SEQUENCE OF PolicyInformation
    OPTIONAL\n       }\n   certs\n      contains the list of certificates that are
    to be used in\n      validating the message.  The first certificate identified
    in the\n      sequence of certificate identifiers MUST be the certificate used\n
    \     to verify the signature.  The encoding of the ESSCertIDv2 for this\n      certificate
    SHOULD include the issuerSerial field.  If other\n      constraints ensure that
    issuerAndSerialNumber will be present in\n      the SignerInfo, the issuerSerial
    field MAY be omitted.  The\n      certificate identified is used during the signature
    verification\n      process.  If the hash of the certificate does not match the\n
    \     certificate used to verify the signature, the signature MUST be\n      considered
    invalid.\n      If more than one certificate is present, subsequent certificates\n
    \     limit the set of certificates that are used during validation.\n      Certificates
    can be either attribute certificates (limiting\n      authorizations) or public
    key certificates (limiting path\n      validation).  The issuerSerial field (in
    the ESSCertIDv2\n      structure) SHOULD be present for these certificates, unless
    the\n      client who is validating the signature is expected to have easy\n      access
    to all the certificates required for validation.  If only\n      the signing certificate
    is present in the sequence, there are no\n      restrictions on the set of certificates
    used in validating the\n      signature.\n   policies\n      contains a sequence
    of policy information terms that identify\n      those certificate policies that
    the signer asserts apply to the\n      certificate, and under which the certificate
    should be relied\n      upon.  This value suggests a policy value to be used in
    the\n      relying party's certification path validation.  The definition of\n
    \     PolicyInformation can be found in [RFC3280].\n   If present, the SigningCertificateV2
    attribute MUST be a signed\n   attribute; it MUST NOT be an unsigned attribute.
    \ CMS defines\n   SignedAttributes as a SET OF Attribute.  A SignerInfo MUST NOT\n
    \  include multiple instances of the SigningCertificateV2 attribute.\n   CMS defines
    the ASN.1 syntax for the signed attributes to include\n   attrValues SET OF AttributeValue.
    \ A SigningCertificateV2 attribute\n   MUST include only a single instance of
    AttributeValue.  There MUST\n   NOT be zero or multiple instances of AttributeValue
    present in the\n   attrValues SET OF AttributeValue.\n"
  title: 3.  Insert New Section 5.4.1 'Signing Certificate Attribute Definition
- contents:
  - "4.  Insert New Section 5.4.1.1 'Certificate Identification Version 2'\n   Insert
    the following text as a new section.\n   5.4.1.1 Certificate Identification Version
    2\n   The best way to identify certificates is an often-discussed issue.\n   The
    ESSCertIDv2 structure supplies two different fields that are used\n   for this
    purpose.\n   The hash of the entire certificate allows for a verifier to check\n
    \  that the certificate used in the verification process was the same\n   certificate
    the signer intended.  Hashes are convenient in that they\n   are frequently used
    by certificate stores as a method of indexing and\n   retrieving certificates
    as well.  The use of the hash is required by\n   this structure since the detection
    of substituted certificates is\n   based on the fact they would map to different
    hash values.\n   The issuer/serial number pair is the method of identification
    of\n   certificates used in [RFC3280].  That document imposes a restriction\n
    \  for certificates that the issuer distinguished name must be present.\n   The
    issuer/serial number pair would therefore normally be sufficient\n   to identify
    the correct signing certificate.  (This assumes the same\n   issuer name is not
    reused from the set of trust anchors.)  The\n   issuer/serial number pair can
    be stored in the sid field of the\n   SignerInfo object.  However, the sid field
    is not covered by the\n   signature.  In the cases where the issuer/serial number
    pair is not\n   used in the sid or the issuer/serial number pair needs to be signed,\n
    \  it SHOULD be placed in the issuerSerial field of the ESSCertIDv2\n   structure.\n
    \  Attribute certificates and additional public key certificates\n   containing
    information do not have an issuer/serial number pair\n   represented anywhere
    in a SignerInfo object.  When an attribute\n   certificate or an additional public
    key certificate is not included\n   in the SignedData object, it becomes much
    more difficult to get the\n   correct set of certificates based only on a hash
    of the certificate.\n   For this reason, these certificates SHOULD be identified
    by the\n   IssuerSerial object.\n   This document defines a certificate identifier
    as:\n        ESSCertIDv2 ::=  SEQUENCE {\n            hashAlgorithm           AlgorithmIdentifier\n
    \                  DEFAULT {algorithm id-sha256},\n            certHash                 Hash,\n
    \           issuerSerial             IssuerSerial OPTIONAL\n        }\n        Hash
    ::= OCTET STRING\n        IssuerSerial ::= SEQUENCE {\n            issuer                   GeneralNames,\n
    \           serialNumber             CertificateSerialNumber\n       }\n   The
    fields of ESSCertIDv2 are defined as follows:\n   hashAlgorithm\n      contains
    the identifier of the algorithm used in computing\n      certHash.\n   certHash\n
    \     is computed over the entire DER-encoded certificate (including the\n      signature)
    using the SHA-1 algorithm.\n   issuerSerial\n      holds the identification of
    the certificate.  The issuerSerial\n      would normally be present unless the
    value can be inferred from\n      other information (e.g., the sid field of the
    SignerInfo object).\n   The fields of IssuerSerial are defined as follows:\n   issuer\n
    \     contains the issuer name of the certificate.  For non-attribute\n      certificates,
    the issuer MUST contain only the issuer name from\n      the certificate encoded
    in the directoryName choice of\n      GeneralNames.  For attribute certificates,
    the issuer MUST contain\n      the issuer name field from the attribute certificate.\n
    \  serialNumber\n      holds the serial number that uniquely identifies the certificate\n
    \     for the issuer.\n"
  title: 4.  Insert New Section 5.4.1.1 'Certificate Identification Version 2'
- contents:
  - "5.  Insert New Section 5.4.2 'Signing Certificate Attribute Definition\n    Version
    1'\n   (Note: This section does not present new material.  This section\n   contains
    the original contents of Section 5.4 in [ESS], which are\n   retained with minor
    changes in this specification to achieve\n   backwards compatibility.)\n   Insert
    the following text as a new section.\n   5.4.2 Signing Certificate Attribute Definition
    Version 1\n   The signing certificate attribute is designed to prevent the simple\n
    \  substitution and re-issue attacks, and to allow for a restricted set\n   of
    certificates to be used in verifying a signature.\n   The definition of SigningCertificate
    is\n       SigningCertificate ::=  SEQUENCE {\n           certs        SEQUENCE
    OF ESSCertID,\n           policies     SEQUENCE OF PolicyInformation OPTIONAL\n
    \      }\n       id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)\n           member-body(2)
    us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n           smime(16) id-aa(2) 12 }\n
    \  The first certificate identified in the sequence of certificate\n   identifiers
    MUST be the certificate used to verify the signature.\n   The encoding of the
    ESSCertID for this certificate SHOULD include the\n   issuerSerial field.  If
    other constraints ensure that\n   issuerAndSerialNumber will be present in the
    SignerInfo, the\n   issuerSerial field MAY be omitted.  The certificate identified
    is\n   used during the signature verification process.  If the hash of the\n   certificate
    does not match the certificate used to verify the\n   signature, the signature
    MUST be considered invalid.\n   If more than one certificate is present in the
    sequence of\n   ESSCertIDs, the certificates after the first one limit the set
    of\n   certificates that are used during validation.  Certificates can be\n   either
    attribute certificates (limiting authorizations) or public key\n   certificates
    (limiting path validation).  The issuerSerial field (in\n   the ESSCertID structure)
    SHOULD be present for these certificates,\n   unless the client who is validating
    the signature is expected to have\n   easy access to all the certificates required
    for validation.  If only\n   the signing certificate is present in the sequence,
    there are no\n   restrictions on the set of certificates used in validating the\n
    \  signature.\n   The sequence of policy information terms identifies those certificate\n
    \  policies that the signer asserts apply to the certificate, and under\n   which
    the certificate should be relied upon.  This value suggests a\n   policy value
    to be used in the relying party's certification path\n   validation.\n   If present,
    the SigningCertificate attribute MUST be a signed\n   attribute; it MUST NOT be
    an unsigned attribute.  Cryptographic\n   Message Syntax (CMS) defines SignedAttributes
    as a SET OF Attribute.\n   A SignerInfo MUST NOT include multiple instances of
    the\n   SigningCertificate attribute.  CMS defines the ASN.1 syntax for the\n
    \  signed attributes to include attrValues SET OF AttributeValue.  A\n   SigningCertificate
    attribute MUST include only a single instance of\n   AttributeValue.  There MUST
    NOT be zero or multiple instances of\n   AttributeValue present in the attrValues
    SET OF AttributeValue.\n"
  title: 5.  Insert New Section 5.4.2 'Signing Certificate Attribute Definition
- contents:
  - "6.  Insert New Section 5.4.2.1 'Certificate Identification Version 1'\n   (Note:
    This section does not present new material.  This section\n   contains the original
    contents of Section 5.4 in [ESS], which are\n   retained with minor changes in
    this specification to achieve\n   backwards compatibility.)\n   Delete old Section
    5.4.1\n   Insert the following as new text\n   5.4.2.1 Certificate Identification
    Version 1\n   Certificates are uniquely identified using the information in the\n
    \  ESSCertID structure.  Discussion can be found in Section 5.4.1.1.\n   This
    document defines a certificate identifier as:\n       ESSCertID ::=  SEQUENCE
    {\n            certHash                 Hash,\n            issuerSerial             IssuerSerial
    OPTIONAL\n       }\n   The fields of ESSCertID are defined as follows:\n   certHash\n
    \     is computed over the entire DER-encoded certificate (including the\n      signature).\n
    \  issuerSerial\n      holds the identification of the certificate.  This field
    would\n      normally be present unless the value can be inferred from other\n
    \     information (e.g., the sid field of the SignerInfo object).\n   The fields
    of IssuerSerial are discussed in Section 5.4.1.1\n"
  title: 6.  Insert New Section 5.4.2.1 'Certificate Identification Version 1'
- contents:
  - "7.  Security Considerations\n   This document is designed to address the security
    issue of a\n   substituted certificate used by the validator.  If a different\n
    \  certificate is used by the validator than the signer, the validator\n   may
    not get the correct result.  An example of this would be that the\n   original
    certificate was revoked and a new certificate with the same\n   public key was
    issued for a different individual.  Since the issuer/\n   serial number field
    is not protected, the attacker could replace this\n   and point to the new certificate
    and validation would be successful.\n   The attributes defined in this document
    are to be placed in locations\n   that are protected by the signature.  This attribute
    does not provide\n   any additional security if placed in an unsigned or un-authenticated\n
    \  location.\n   The attributes defined in this document permit a signer to select
    a\n   hash algorithm to identify a certificate.  A poorly selected hash\n   algorithm
    may provide inadequate protection against certificate\n   substitution or result
    in denial of service for this protection.  By\n   employing the attributes defined
    in this specification with the same\n   hash algorithm used for message signing,
    the sender can ensure that\n   these attributes provide commensurate security.\n
    \  Since recipients must support the hash algorithm to verify the\n   signature,
    selecting the same hash algorithm also increases the\n   likelihood that the hash
    algorithm is supported in the context of\n   certificate identification.  Note
    that an unsupported hash algorithm\n   for certificate identification does not
    preclude validating the\n   message but does deny the message recipient protection
    against\n   certificate substitution.\n   To ensure that legacy implementations
    are provided protection against\n   certificate substitution, clients are permitted
    to include both\n   ESScertID and ESScertIDv2 in the same message.  Since these\n
    \  attributes are generated and evaluated independently, the contents\n   could
    conceivably be in conflict.  Specifically, where a signer has\n   multiple certificates
    containing the same public key, the two\n   attributes could specify different
    signing certificates.  The result\n   of signature processing may vary depending
    on which certificate is\n   used to validate the signature.\n   Recipients that
    attempt to evaluate both attributes may choose to\n   reject such a message.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Normative References\n   [ESS]      Hoffman, P., \"Enhanced Security Services
    for S/MIME\",\n              RFC 2634, June 1999.\n   [RFC2119]  Bradner, S.,
    \"Key words for use in RFCs to Indicate\n              Requirement Levels\", RFC
    2119, BCP 14, March 1997.\n   [RFC3280]  Housley, R., Ford, W., Polk, W., and
    D. Solo, \"Internet\n              X.509 Public Key Infrastructure Certificate
    and\n              Certificate Revocation List (CRL) Profile\", RFC 3280,\n              April
    2002.\n   [RFC3852]  Housley, R., \"Cryptographic Message Syntax (CMS)\",\n              RFC
    3852, July 2004.\n   [UTF8]     Yergeau, F., \"UTF-8, a transformation format
    of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n"
  title: 8.  Normative References
- contents:
  - "Appendix A.  ASN.1 Module\n   Replace the ASN.1 module in RFC 2634 with this
    one.\n"
  - "ExtendedSecurityServices-2006\n      { iso(1) member-body(2) us(840) rsadsi(113549)\n
    \       pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-ess-2006(30) }\n"
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
  - 'BEGIN

    '
  - 'IMPORTS

    '
  - "-- Cryptographic Message Syntax (CMS) [RFC3852]\n    ContentType, IssuerAndSerialNumber,
    SubjectKeyIdentifier\n       FROM CryptographicMessageSyntax2004 { iso(1) member-body(2)\n
    \               us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n                modules(0)
    cms-2004(24)}\n"
  - '-- PKIX Certificate and CRL Profile, Section A.1 Explicity Tagged Module

    '
  - "--  1988 Syntax             [RFC3280]\n    AlgorithmIdentifier, CertificateSerialNumber\n
    \      FROM PKIX1Explicit88 { iso(1) identified-organization(3) dod(6)\n                internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)\n                id-pkix1-explicit(18)
    }\n"
  - '-- PKIX Certificate and CRL Profile, Sec A.2 Implicitly Tagged Module,

    '
  - "--  1988 Syntax             [RFC3280]\n    PolicyInformation, GeneralNames\n
    \         FROM PKIX1Implicit88 {iso(1) identified-organization(3) dod(6)\n                internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)\n                id-pkix1-implicit(19)};\n"
  - '-- Extended Security Services

    '
  - '-- The construct "SEQUENCE SIZE (1..MAX) OF" appears in several ASN.1

    '
  - '-- constructs in this module.  A valid ASN.1 SEQUENCE can have zero or

    '
  - '-- more entries.  The SIZE (1..MAX) construct constrains the SEQUENCE to

    '
  - '-- have at least one entry.  MAX indicates the upper bound is

    '
  - '-- unspecified.  Implementations are free to choose an upper bound that

    '
  - '-- suits their environment.

    '
  - '-- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING

    '
  - '-- The contents are formatted as described in [UTF8]

    '
  - '-- Section 2.7

    '
  - "ReceiptRequest ::= SEQUENCE {\n  signedContentIdentifier ContentIdentifier,\n
    \ receiptsFrom ReceiptsFrom,\n  receiptsTo SEQUENCE SIZE (1..ub-receiptsTo) OF
    GeneralNames\n"
  - '}

    '
  - 'ub-receiptsTo INTEGER ::= 16

    '
  - "id-aa-receiptRequest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 1}\n"
  - 'ContentIdentifier ::= OCTET STRING

    '
  - "id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 7}\n"
  - "ReceiptsFrom ::= CHOICE {\n allOrFirstTier [0] AllOrFirstTier, -- formerly \"allOrNone
    [0]AllOrNone\"\n receiptList [1] SEQUENCE OF GeneralNames\n"
  - '}

    '
  - "AllOrFirstTier ::= INTEGER { -- Formerly AllOrNone\n allReceipts (0),\n firstTierRecipients
    (1)\n"
  - '}

    '
  - '-- Section 2.8

    '
  - "Receipt ::= SEQUENCE {\n  version ESSVersion,\n  contentType ContentType,\n  signedContentIdentifier
    ContentIdentifier,\n  originatorSignatureValue OCTET STRING\n"
  - '}

    '
  - "id-ct-receipt OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n   rsadsi(113549)
    pkcs(1) pkcs-9(9) smime(16) id-ct(1) 1}\n"
  - 'ESSVersion ::= INTEGER  { v1(1) }

    '
  - '-- Section 2.9

    '
  - "ContentHints ::= SEQUENCE {\n  contentDescription UTF8String (SIZE (1..MAX))
    OPTIONAL,\n  contentType ContentType\n"
  - '}

    '
  - "id-aa-contentHint OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549)
    pkcs(1) pkcs-9(9) smime(16) id-aa(2) 4}\n"
  - '-- Section 2.10

    '
  - 'MsgSigDigest ::= OCTET STRING

    '
  - "id-aa-msgSigDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n   us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 5}\n"
  - '-- Section 2.11

    '
  - "ContentReference ::= SEQUENCE {\n  contentType ContentType,\n  signedContentIdentifier
    ContentIdentifier,\n  originatorSignatureValue OCTET STRING\n"
  - '}

    '
  - "id-aa-contentReference   OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 10 }\n"
  - '-- Section 3.2

    '
  - "ESSSecurityLabel ::= SET {\n  security-policy-identifier SecurityPolicyIdentifier,\n
    \ security-classification SecurityClassification OPTIONAL,\n  privacy-mark ESSPrivacyMark
    OPTIONAL,\n  security-categories SecurityCategories OPTIONAL\n"
  - '}

    '
  - "id-aa-securityLabel OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 2}\n"
  - 'SecurityPolicyIdentifier ::= OBJECT IDENTIFIER

    '
  - "SecurityClassification ::= INTEGER {\n  unmarked (0),\n  unclassified (1),\n
    \ restricted (2),\n  confidential (3),\n  secret (4),\n  top-secret (5)\n"
  - '}(0..ub-integer-options)

    '
  - 'ub-integer-options INTEGER ::= 256

    '
  - "ESSPrivacyMark ::= CHOICE {\n    pString      PrintableString (SIZE (1..ub-privacy-mark-length)),\n
    \   utf8String   UTF8String (SIZE (1..MAX))\n"
  - '}

    '
  - 'ub-privacy-mark-length INTEGER ::= 128

    '
  - "SecurityCategories ::= SET SIZE (1..ub-security-categories) OF\n        SecurityCategory\n"
  - 'ub-security-categories INTEGER ::= 64

    '
  - "SecurityCategory ::= SEQUENCE {\n  type  [0] OBJECT IDENTIFIER,\n  value [1]
    ANY DEFINED BY type\n"
  - '}

    '
  - '--Note: The aforementioned SecurityCategory syntax produces identical

    '
  - '--hex encodings as the following SecurityCategory syntax that is

    '
  - '--documented in the X.411 specification:

    '
  - '--

    '
  - '--SecurityCategory ::= SEQUENCE {

    '
  - '--     type  [0]  SECURITY-CATEGORY,

    '
  - '--     value [1]  ANY DEFINED BY type }

    '
  - '--

    '
  - '--SECURITY-CATEGORY MACRO ::=

    '
  - '--BEGIN

    '
  - '--TYPE NOTATION ::= type | empty

    '
  - '--VALUE NOTATION ::= value (VALUE OBJECT IDENTIFIER)

    '
  - '--END

    '
  - '-- Section 3.4

    '
  - 'EquivalentLabels ::= SEQUENCE OF ESSSecurityLabel

    '
  - "id-aa-equivalentLabels OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 9}\n"
  - '-- Section 4.4

    '
  - "MLExpansionHistory ::= SEQUENCE\n      SIZE (1..ub-ml-expansion-history) OF MLData\n"
  - "id-aa-mlExpandHistory OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 3 }\n"
  - "ub-ml-expansion-history INTEGER ::= 64  MLData ::= SEQUENCE {\n  mailListIdentifier
    EntityIdentifier,\n  expansionTime GeneralizedTime,\n  mlReceiptPolicy MLReceiptPolicy
    OPTIONAL\n"
  - '}

    '
  - "EntityIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n
    \ subjectKeyIdentifier SubjectKeyIdentifier\n"
  - '}

    '
  - "MLReceiptPolicy ::= CHOICE {\n  none [0] NULL,\n  insteadOf [1] SEQUENCE SIZE
    (1..MAX) OF GeneralNames,\n  inAdditionTo [2] SEQUENCE SIZE (1..MAX) OF GeneralNames\n"
  - '}

    '
  - '-- Section 5.4

    '
  - "SigningCertificate ::=  SEQUENCE {\n    certs        SEQUENCE OF ESSCertID,\n
    \   policies     SEQUENCE OF PolicyInformation OPTIONAL\n"
  - '}

    '
  - "id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)\n    member-body(2) us(840)
    rsadsi(113549) pkcs(1) pkcs9(9)\n    smime(16) id-aa(2) 12 }\n"
  - "SigningCertificateV2 ::=  SEQUENCE {\n    certs        SEQUENCE OF ESSCertIDv2,\n
    \   policies     SEQUENCE OF PolicyInformation OPTIONAL\n"
  - '}

    '
  - "id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)\n    member-body(2)
    us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n    smime(16) id-aa(2) 47 }\n"
  - "id-sha256  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n    country(16) us(840)
    organization(1) gov(101)\n    csor(3) nistalgorithm(4) hashalgs(2) 1 }\n"
  - "ESSCertIDv2 ::= SEQUENCE {\n     hashAlgorithm           AlgorithmIdentifier\n
    \           DEFAULT {algorithm id-sha256},\n     certHash                Hash,\n
    \    issuerSerial            IssuerSerial OPTIONAL\n"
  - '}

    '
  - "ESSCertID ::=  SEQUENCE {\n     certHash                 Hash,\n     issuerSerial
    \            IssuerSerial OPTIONAL\n"
  - '}

    '
  - "Hash ::= OCTET STRING  IssuerSerial ::= SEQUENCE {\n     issuer                   GeneralNames,\n
    \    serialNumber             CertificateSerialNumber\n"
  - '}

    '
  - 'END

    '
  - '-- of ExtendedSecurityServices-2006

    '
  title: Appendix A.  ASN.1 Module
- contents:
  - "Author's Address\n   Jim Schaad\n   Soaring Hawk Consulting\n   PO Box 675\n
    \  Gold Bar, WA  98251\n   EMail: jimsch@exmsft.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
