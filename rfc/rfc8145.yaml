- title: __initial_text__
  contents:
  - '  Signaling Trust Anchor Knowledge in DNS Security Extensions (DNSSEC)

    '
- title: Abstract
  contents:
  - "Abstract\n   The DNS Security Extensions (DNSSEC) were developed to provide origin\n\
    \   authentication and integrity protection for DNS data by using digital\n  \
    \ signatures.  These digital signatures can be verified by building a\n   chain\
    \ of trust starting from a trust anchor and proceeding down to a\n   particular\
    \ node in the DNS.  This document specifies two different\n   ways for validating\
    \ resolvers to signal to a server which keys are\n   referenced in their chain\
    \ of trust.  The data from such signaling\n   allow zone administrators to monitor\
    \ the progress of rollovers in a\n   DNSSEC-signed zone.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8145.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Design Evolution ...........................................4\n  \
    \ 2. Requirements Terminology ........................................5\n   3.\
    \ Terminology .....................................................5\n   4. Using\
    \ the edns-key-tag Option ...................................5\n      4.1. Option\
    \ Format ..............................................5\n      4.2. Use by Queriers\
    \ ............................................6\n           4.2.1. Stub Resolvers\
    \ ......................................7\n                  4.2.1.1. Validating\
    \ Stub Resolvers ..................7\n                  4.2.1.2. Non-validating\
    \ Stub Resolvers ..............7\n           4.2.2. Recursive Resolvers .................................7\n\
    \                  4.2.2.1. Validating Recursive Resolvers .............7\n  \
    \                4.2.2.2. Non-validating Recursive Resolvers .........8\n    \
    \  4.3. Use by Responders ..........................................8\n   5. Using\
    \ the Key Tag Query .........................................8\n      5.1. Query\
    \ Format ...............................................8\n      5.2. Use by Queriers\
    \ ............................................9\n      5.3. Use by Responders\
    \ ..........................................9\n           5.3.1. Interaction with\
    \ Aggressive Negative Caching ........9\n   6. IANA Considerations ............................................10\n\
    \   7. Security Considerations ........................................10\n  \
    \ 8. Privacy Considerations .........................................11\n   9.\
    \ References .....................................................11\n      9.1.\
    \ Normative References ......................................11\n      9.2. Informative\
    \ References ....................................12\n   Acknowledgments ...................................................13\n\
    \   Authors' Addresses ................................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DNS Security Extensions (DNSSEC) [RFC4033] [RFC4034]\
    \ [RFC4035]\n   were developed to provide origin authentication and integrity\n\
    \   protection for DNS data by using digital signatures.  DNSSEC uses\n   Key\
    \ Tags to efficiently match signatures to the keys from which they\n   are generated.\
    \  The Key Tag is a 16-bit value computed from the RDATA\n   portion of a DNSKEY\
    \ resource record (RR) using a formula not unlike a\n   ones-complement checksum.\
    \  RRSIG RRs contain a Key Tag field whose\n   value is equal to the Key Tag of\
    \ the DNSKEY RR that validates the\n   signature.\n   Likewise, Delegation Signer\
    \ (DS) RRs also contain a Key Tag field\n   whose value is equal to the Key Tag\
    \ of the DNSKEY RR to which it\n   refers.\n   This document specifies how validating\
    \ resolvers can tell a server,\n   in a DNS query, which DNSSEC key(s) they would\
    \ use to validate the\n   server's responses.  It describes two independent methods\
    \ for\n   conveying Key Tag information between clients and servers:\n   1.  placing\
    \ an EDNS option in the OPT RR [RFC6891] that contains the\n       Key Tags (described\
    \ in Section 4)\n   2.  periodically sending special \"Key Tag queries\" to a\
    \ server\n       authoritative for the zone (described in Section 5)\n   Each\
    \ of these new signaling mechanisms is OPTIONAL to implement and\n   use.  These\
    \ mechanisms serve to measure the acceptance and use of new\n   DNSSEC trust anchors\
    \ and key signing keys (KSKs).  This signaling\n   data can be used by zone administrators\
    \ as a gauge to measure the\n   successful deployment of new keys.  This is of\
    \ particular interest\n   for the DNS root zone in the event of key and/or algorithm\
    \ rollovers\n   that rely on [RFC5011] to automatically update a validating DNS\n\
    \   resolver's trust anchor.\n   This document does not introduce new processes\
    \ for rolling keys or\n   updating trust anchors.  Rather, it specifies a means\
    \ by which a DNS\n   query can signal the set of keys that a client uses for DNSSEC\n\
    \   validation.\n"
- title: 1.1.  Design Evolution
  contents:
  - "1.1.  Design Evolution\n   Initially, when the work on this document started,\
    \ it proposed\n   including Key Tag values in a new EDNS(0) option code.  It was\n\
    \   modeled after [RFC6975], which provides DNSSEC algorithm signaling.\n   The\
    \ authors received feedback from participants in the DNSOP Working\n   Group that\
    \ it might be better to convey Key Tags in the QNAME of a\n   separate DNS query,\
    \ rather than as an EDNS(0) option.  Mostly, this\n   is because forwarding (e.g.,\
    \ from stub to recursive to authoritative)\n   could be problematic.  Reasons\
    \ include the following:\n   1.  EDNS(0) is a hop-by-hop protocol.  Unknown option\
    \ codes would not\n       be forwarded by default, as per [RFC6891].\n   2.  Middleboxes\
    \ might block entire queries containing unknown EDNS(0)\n       option codes.\n\
    \   3.  A recursive resolver might need to remember Key Tag values (i.e.,\n  \
    \     keep state) received from its stub clients and then forward them\n     \
    \  at a later opportunity.\n   One advantage of the EDNS(0) option code is that\
    \ it is possible to\n   see that a stub client has a different Key Tag list than\
    \ its\n   forwarder.  In the QNAME-based approach, this is not possible because\n\
    \   queries originated by a stub and a forwarder are indistinguishable.\n   The\
    \ authors feel that this advantage is not sufficient to justify the\n   EDNS(0)\
    \ approach.\n   One downside to the QNAME approach is that it uses a separate\
    \ query,\n   whereas with EDNS(0) the Key Tag values are \"piggybacked\" onto\
    \ an\n   existing DNSKEY query.  For this reason, this document recommends\n \
    \  only sending QNAME-based Key Tag queries for trust anchors, although\n   EDNS-based\
    \ Key Tags can be sent with any DNSKEY query.\n   Another downside to the QNAME-based\
    \ approach is that since the\n   trust anchor zone might not contain labels matching\
    \ the QNAME, these\n   queries could be subject to aggressive negative caching\
    \ features now\n   in development by the Working Group.  This could affect the\
    \ amount of\n   signaling sent by some clients compared to others.\n   A probably\
    \ minor downside to the QNAME-based approach is that it\n   cannot be used with\
    \ extremely long query names if the addition of the\n   prefix would cause the\
    \ name to be longer than 255 octets.\n"
- title: 2.  Requirements Terminology
  contents:
  - "2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   Trust Anchor:  A configured DNSKEY RR or DS RR hash of a\
    \ DNSKEY RR.\n      A validating security-aware resolver uses this public key\
    \ or hash\n      as a starting point for building the authentication chain to\
    \ a\n      signed DNS response.  In general, a validating resolver will have\n\
    \      to obtain the initial values of its trust anchors via some secure\n   \
    \   or trusted means outside the DNS protocol.  Presence of a\n      trust anchor\
    \ also implies that the resolver should expect the zone\n      to which the trust\
    \ anchor points to be signed.  (This paragraph is\n      quoted from Section 2\
    \ of [RFC4033].)\n   Key Tag:  A 16-bit integer that identifies and enables efficient\n\
    \      selection of DNSSEC public keys.  A Key Tag value can be computed\n   \
    \   over the RDATA of a DNSKEY RR.  The Key Tag field in the RRSIG and\n     \
    \ DS records can be used to help select the corresponding DNSKEY RR\n      efficiently\
    \ when more than one candidate DNSKEY RR is available.\n      For most algorithms,\
    \ the Key Tag is a simple 16-bit modular sum of\n      the DNSKEY RDATA.  See\
    \ [RFC4034], Appendix B.\n"
- title: 4.  Using the edns-key-tag Option
  contents:
  - '4.  Using the edns-key-tag Option

    '
- title: 4.1.  Option Format
  contents:
  - "4.1.  Option Format\n   The edns-key-tag option is encoded as follows:\n   0\
    \                       8                      16\n   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   |                  OPTION-CODE                  |\n   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   |                 OPTION-LENGTH                 |\n   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   |                    KEY-TAG                    |\n   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   |                      ...                      /\n   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   where:\n   OPTION-CODE:  The EDNS0 option code assigned to edns-key-tag (14).\n\
    \   OPTION-LENGTH:  The value 2 x number of key-tag values present.\n   KEY-TAG:\
    \  One or more 16-bit Key Tag values ([RFC4034], Appendix B).\n"
- title: 4.2.  Use by Queriers
  contents:
  - "4.2.  Use by Queriers\n   A validating resolver sets the edns-key-tag option\
    \ in the OPT RR when\n   sending a DNSKEY query.  The validating resolver SHOULD\
    \ also set the\n   DNSSEC OK bit (also known as the DO bit) [RFC4035] to indicate\
    \ that\n   it wishes to receive DNSSEC RRs in the response.\n   A DNS client MUST\
    \ NOT include the edns-key-tag option for non-DNSKEY\n   queries.\n   The KEY-TAG\
    \ value(s) included in the edns-key-tag option represents\n   the Key Tag of the\
    \ trust anchor or DNSKEY RR that will be used to\n   validate the expected response.\
    \  When the client sends a DNSKEY\n   query, the edns-key-tag option represents\
    \ the Key Tag(s) of the\n   KSK(s) of the zone for which the server is authoritative.\
    \  A\n   validating resolver learns the Key Tag(s) of the KSK(s) from the\n  \
    \ zone's DS record(s) (found in the parent) or from a trust anchor.\n   A DNS\
    \ client SHOULD include the edns-key-tag option when issuing a\n   DNSKEY query\
    \ for a zone corresponding to a trust anchor.\n   A DNS client MAY include the\
    \ edns-key-tag option when issuing a\n   DNSKEY query for a non-trust anchor zone\
    \ (i.e., Key Tags learned via\n   DS records).  Since some DNSSEC validators implement\
    \ bottom-up\n   validation, a non-trust anchor Key Tags zone might not be known\
    \ at\n   the time of the query.  Such a validator can include the edns-key-tag\n\
    \   option based on previously cached data.\n   A DNS client MUST NOT include\
    \ Key Tag(s) for keys that are not\n   learned via either a trust anchor or DS\
    \ records.\n   Since the edns-key-tag option is only set in the query, if a client\n\
    \   sees these options in the response, no action needs to be taken and\n   the\
    \ client MUST ignore the option values.\n"
- title: 4.2.1.  Stub Resolvers
  contents:
  - "4.2.1.  Stub Resolvers\n   Typically, stub resolvers rely on an upstream recursive\
    \ resolver (or\n   cache) to provide a response.  Optimal setting of the edns-key-tag\n\
    \   option depends on whether the stub resolver elects to perform its own\n  \
    \ validation.\n"
- title: 4.2.1.1.  Validating Stub Resolvers
  contents:
  - "4.2.1.1.  Validating Stub Resolvers\n   A validating stub resolver sets the DNSSEC\
    \ OK bit [RFC4035] to\n   indicate that it wishes to receive additional DNSSEC\
    \ RRs (i.e., RRSIG\n   RRs) in the response.  Such validating resolvers SHOULD\
    \ include the\n   edns-key-tag option in the OPT RR when sending a DNSKEY query.\n"
- title: 4.2.1.2.  Non-validating Stub Resolvers
  contents:
  - "4.2.1.2.  Non-validating Stub Resolvers\n   The edns-key-tag option MUST NOT\
    \ be included by non-validating stub\n   resolvers.\n"
- title: 4.2.2.  Recursive Resolvers
  contents:
  - '4.2.2.  Recursive Resolvers

    '
- title: 4.2.2.1.  Validating Recursive Resolvers
  contents:
  - "4.2.2.1.  Validating Recursive Resolvers\n   A validating recursive resolver\
    \ is, by definition, configured with at\n   least one trust anchor.  Thus, a recursive\
    \ resolver SHOULD include\n   the edns-key-tag option in its DNSKEY queries as\
    \ described above.\n   In addition, the clients of a validating recursive resolver\
    \ might be\n   configured to do their own validation, with their own\n   trust\
    \ anchor(s).  When a validating recursive resolver receives a\n   query that includes\
    \ the edns-key-tag option with a Key Tag list that\n   differs from its own, it\
    \ SHOULD forward both the client's Key Tag\n   list and its own list.  When doing\
    \ so, the recursive resolver SHOULD\n   transmit the two Key Tag lists using separate\
    \ instances of the\n   edns-key-tag option code in the OPT RR.  For example, if\
    \ the\n   recursive resolver's Key Tag list is (19036, 12345) and the\n   stub/client's\
    \ list is (19036, 34567), the recursive resolver\n   would include the edns-key-tag\
    \ option twice: once with values\n   (19036, 12345) and once with values (19036,\
    \ 34567).\n   A validating recursive resolver MAY combine stub/client Key Tag\n\
    \   values from multiple incoming queries into a single outgoing query.\n   It\
    \ is RECOMMENDED that implementations place reasonable limits on the\n   number\
    \ of Key Tags to include in the outgoing edns-key-tag option.\n   If the client\
    \ included the DNSSEC OK and Checking Disabled (CD) bits\n   but did not include\
    \ the edns-key-tag option in the query, the\n   validating recursive resolver\
    \ MAY include the option with its own\n   Key Tag values in full.\n   Validating\
    \ recursive resolvers MUST NOT set the edns-key-tag option\n   in the final response\
    \ to the stub client.\n"
- title: 4.2.2.2.  Non-validating Recursive Resolvers
  contents:
  - "4.2.2.2.  Non-validating Recursive Resolvers\n   Recursive resolvers that do\
    \ not validate responses SHOULD copy the\n   edns-key-tag option seen in received\
    \ queries, as they represent the\n   wishes of the validating downstream resolver\
    \ that issued the original\n   query.\n"
- title: 4.3.  Use by Responders
  contents:
  - "4.3.  Use by Responders\n   An authoritative name server receiving queries with\
    \ the edns-key-tag\n   option MAY log or otherwise collect the Key Tag values\
    \ to provide\n   information to the zone operator.\n   A responder MUST NOT include\
    \ the edns-key-tag option in any DNS\n   response.\n"
- title: 5.  Using the Key Tag Query
  contents:
  - '5.  Using the Key Tag Query

    '
- title: 5.1.  Query Format
  contents:
  - "5.1.  Query Format\n   A Key Tag query consists of a standard DNS query of type\
    \ NULL and of\n   class IN [RFC1035].\n   The first component of the query name\
    \ is the string \"_ta-\" followed\n   by a sorted, hyphen-separated list of hexadecimal-encoded\
    \ Key Tag\n   values.  The zone name corresponding to the trust anchor is appended\n\
    \   to this first component.\n   For example, a validating DNS resolver that has\
    \ a single root zone\n   trust anchor with Key Tag 17476 (decimal) would originate\
    \ a query of\n   the form QTYPE=NULL, QCLASS=IN, QNAME=_ta-4444.\n   Hexadecimal\
    \ values MUST be zero-padded to four hexadecimal digits.\n   For example, if the\
    \ Key Tag is 999 (decimal), it is represented in\n   hexadecimal as 03e7.\n  \
    \ When representing multiple Key Tag values, they MUST be sorted in\n   order\
    \ from smallest to largest.  For example, a validating DNS\n   resolver that has\
    \ three trust anchors for the example.com zone with\n   Key Tags 1589, 43547,\
    \ 31406 (decimal) would originate a query of the\n   form QTYPE=NULL, QCLASS=IN,\
    \ QNAME=_ta-0635-7aae-aa1b.example.com.\n"
- title: 5.2.  Use by Queriers
  contents:
  - "5.2.  Use by Queriers\n   A validating DNS resolver (stub or recursive) SHOULD\
    \ originate a\n   Key Tag query whenever it also originates a DNSKEY query for\
    \ a\n   trust anchor zone.  In other words, the need to issue a DNSKEY query\n\
    \   is also the trigger to issue a Key Tag query.\n   The value(s) included in\
    \ the Key Tag query represents the Key Tag(s)\n   of the trust anchor that will\
    \ be used to validate the expected DNSKEY\n   response.\n   A validating DNS resolver\
    \ SHOULD NOT originate Key Tag queries when\n   also originating DNSKEY queries\
    \ for non-trust anchor zones.\n   A non-validating DNS resolver MUST NOT originate\
    \ Key Tag queries.\n   DNS resolvers with caches SHOULD cache and reuse the response\
    \ to a\n   Key Tag query just as it would any other response.\n"
- title: 5.3.  Use by Responders
  contents:
  - "5.3.  Use by Responders\n   An authoritative name server receiving Key Tag queries\
    \ MAY log or\n   otherwise collect the Key Tag values to provide information to\
    \ the\n   zone operator.\n   An authoritative name server MUST generate an appropriate\
    \ response to\n   the Key Tag query.  A server does not need to have built-in\
    \ logic\n   that determines the response to Key Tag queries: the response code\
    \ is\n   determined by whether the data is in the zone file or covered by\n  \
    \ wildcards.  The zone operator might want to add specific Key Tag\n   records\
    \ to its zone, perhaps with specific TTLs, to affect the\n   frequency of Key\
    \ Tag queries from clients.\n"
- title: 5.3.1.  Interaction with Aggressive Negative Caching
  contents:
  - "5.3.1.  Interaction with Aggressive Negative Caching\n   Aggressive NSEC/NSEC3\
    \ negative caching [NSEC-NSEC3-Usage] may also\n   affect the quality of Key Tag\
    \ signaling.  When the response code for\n   a Key Tag query is NXDOMAIN, DNS\
    \ resolvers that implement aggressive\n   negative caching will send fewer Key\
    \ Tag queries than resolvers that\n   do not implement it.\n   For this reason,\
    \ zone operators might choose to create records\n   corresponding to expected\
    \ Key Tag queries.  During a rollover from\n   Key Tag 1111 (hex) to Key Tag 2222\
    \ (hex), the zone could include the\n   following records:\n   _ta-1111      \
    \  IN   NULL   \\# 0\n   _ta-2222        IN   NULL   \\# 0\n   _ta-1111-2222 \
    \  IN   NULL   \\# 0\n   Recall that when multiple Key Tags are present, the originating\n\
    \   client MUST sort them from smallest to largest in the query name.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has assigned an EDNS0 option code for the edns-key-tag\
    \ option in\n   the \"DNS EDNS0 Option Codes (OPT)\" registry as follows:\n  \
    \            +-------+--------------+----------+-----------+\n              |\
    \ Value | Name         | Status   | Reference |\n              +-------+--------------+----------+-----------+\n\
    \              | 14    | edns-key-tag | Optional | RFC 8145  |\n             \
    \ +-------+--------------+----------+-----------+\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document specifies two ways for a client\
    \ to signal its\n   trust anchor knowledge to a cache or server.  The goal of\
    \ these\n   optional mechanisms is to signal new trust anchor uptake in clients\n\
    \   to allow zone administrators to know when it is possible to complete\n   a\
    \ key rollover in a DNSSEC-signed zone.\n   There is a possibility that an eavesdropper\
    \ or server could infer the\n   validator in use by a client by the Key Tag list\
    \ seen.  This may\n   allow an attacker to find validators using old, possibly\
    \ broken,\n   keys.  It could also be used to identify the validator or to narrow\n\
    \   down the possible validator implementations in use by a client; the\n   validator\
    \ used by the client could have a known vulnerability that\n   could be exploited\
    \ by the attacker.\n   Consumers of data collected from the mechanisms described\
    \ in this\n   document are advised that provided Key Tag values might be \"made\
    \ up\"\n   by some DNS clients with malicious, or at least mischievous,\n   intentions.\
    \  For example, an attacker with sufficient resources might\n   try to generate\
    \ large numbers of queries including only old Key Tag\n   values, with the intention\
    \ of delaying the completion of a key\n   rollover.\n   DNSSEC does not require\
    \ keys in a zone to have unique Key Tags.\n   During a rollover, there is a small\
    \ possibility that an old key and a\n   new key will have identical Key Tag values.\
    \  Zone operators relying\n   on the edns-key-tag mechanism SHOULD take care to\
    \ ensure that new\n   keys have unique Key Tag values.\n"
- title: 8.  Privacy Considerations
  contents:
  - "8.  Privacy Considerations\n   This proposal provides additional, optional \"\
    signaling\" to DNS\n   queries in the form of Key Tag values.  While Key Tag values\n\
    \   themselves are not considered private information, it may be possible\n  \
    \ for an eavesdropper to use Key Tag values as a fingerprinting\n   technique\
    \ to identify particular validating DNS clients.  This may be\n   especially true\
    \ if the validator is configured with trust anchors for\n   zones in addition\
    \ to the root zone.\n   A validating resolver need not transmit the Key Tags in\
    \ every\n   applicable query.  Due to privacy concerns, such a resolver MAY\n\
    \   choose to transmit the Key Tags for a subset of queries (e.g., every\n   25th\
    \ time) or by random chance with a certain probability (e.g., 5%).\n   Implementations\
    \ of this specification MAY be administratively\n   configured to only transmit\
    \ the Key Tags for certain zones.  For\n   example, the software's configuration\
    \ file may specify a list of\n   zones for which the use of the mechanisms described\
    \ here is allowed\n   or denied.  Since the primary motivation for this specification\
    \ is to\n   provide operational measurement data for root zone key rollovers,\
    \ it\n   is RECOMMENDED that implementations at least include the edns-key-tag\n\
    \   option for root zone DNSKEY queries.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names - implementation\
    \ and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4033]  Arends,\
    \ R., Austein, R., Larson, M., Massey, D., and S.\n              Rose, \"DNS Security\
    \ Introduction and Requirements\",\n              RFC 4033, DOI 10.17487/RFC4033,\
    \ March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n   [RFC4034]\
    \  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"Resource Records for the DNS Security Extensions\",\n              RFC 4034,\
    \ DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC6891]  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n  \
    \            for DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891,\
    \ April 2013,\n              <http://www.rfc-editor.org/info/rfc6891>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [NSEC-NSEC3-Usage]\n              Fujiwara,\
    \ K., Kato, A., and W. Kumari, \"Aggressive use of\n              DNSSEC-validated\
    \ Cache\", Work in Progress,\n              draft-ietf-dnsop-nsec-aggressiveuse-09,\
    \ March 2017.\n   [RFC5011]  StJohns, M., \"Automated Updates of DNS Security\
    \ (DNSSEC)\n              Trust Anchors\", STD 74, RFC 5011, DOI 10.17487/RFC5011,\n\
    \              September 2007, <http://www.rfc-editor.org/info/rfc5011>.\n   [RFC6975]\
    \  Crocker, S. and S. Rose, \"Signaling Cryptographic\n              Algorithm\
    \ Understanding in DNS Security Extensions\n              (DNSSEC)\", RFC 6975,\
    \ DOI 10.17487/RFC6975, July 2013,\n              <http://www.rfc-editor.org/info/rfc6975>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document was inspired by and borrows heavily from [RFC6975]\
    \ by\n   Scott Rose and Steve Crocker.  The authors would like to thank Mark\n\
    \   Andrews, Casey Deccio, Burt Kalisky, Bob Harold, Edward Lewis, Tim\n   Wicinski,\
    \ Suzanne Woolf, and other members of the DNSOP Working Group\n   for their input.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Duane Wessels\n   Verisign\n   12061 Bluemont Way\n  \
    \ Reston, VA  20190\n   United States of America\n   Phone: +1 703 948-3200\n\
    \   Email: dwessels@verisign.com\n   URI:   http://verisigninc.com\n   Warren\
    \ Kumari\n   Google\n   1600 Amphitheatre Parkway\n   Mountain View, CA  94043\n\
    \   United States of America\n   Email: warren@kumari.net\n   Paul Hoffman\n \
    \  ICANN\n   Email: paul.hoffman@icann.org\n"
