- title: __initial_text__
  contents:
  - '                   Subscription to YANG Notifications

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a YANG data model and associated mechanisms\n\
    \   enabling subscriber-specific subscriptions to a publisher's event\n   streams.\
    \  Applying these elements allows a subscriber to request and\n   receive a continuous,\
    \ customized feed of publisher-generated\n   information.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8639.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Motivation .................................................4\n  \
    \    1.2. Terminology ................................................4\n    \
    \  1.3. Solution Overview ..........................................6\n      1.4.\
    \ Relationship to RFC 5277 ...................................7\n   2. Solution\
    \ ........................................................8\n      2.1. Event\
    \ Streams ..............................................8\n      2.2. Event Stream\
    \ Filters .......................................9\n      2.3. QoS ........................................................9\n\
    \      2.4. Dynamic Subscriptions .....................................10\n  \
    \    2.5. Configured Subscriptions ..................................19\n    \
    \  2.6. Event Record Delivery .....................................27\n      2.7.\
    \ Subscription State Change Notifications ...................28\n      2.8. Subscription\
    \ Monitoring ...................................33\n      2.9. Support for the\
    \ \"ietf-subscribed-notifications\"\n           YANG Module ...............................................34\n\
    \   3. YANG Data Model Tree Diagrams ..................................34\n  \
    \    3.1. The \"streams\" Container ...................................34\n  \
    \    3.2. The \"filters\" Container ...................................35\n  \
    \    3.3. The \"subscriptions\" Container .............................35\n  \
    \ 4. Event Notification Subscription YANG Module ....................37\n   5.\
    \ IANA Considerations ............................................66\n   6. Implementation\
    \ Considerations ..................................66\n   7. Transport Requirements\
    \ .........................................67\n   8. Security Considerations ........................................68\n\
    \   9. References .....................................................72\n  \
    \    9.1. Normative References ......................................72\n    \
    \  9.2. Informative References ....................................74\n   Appendix\
    \ A. Example Configured Transport Augmentation .............75\n   Acknowledgments\
    \ ...................................................77\n   Authors' Addresses\
    \ ................................................77\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a YANG data model and associated mechanisms\n\
    \   enabling subscriber-specific subscriptions to a publisher's event\n   streams.\
    \  This effectively enables a \"subscribe, then publish\"\n   capability where\
    \ the customized information needs and access\n   permissions of each target receiver\
    \ are understood by the publisher\n   before subscribed event records are marshaled\
    \ and pushed.  The\n   receiver then gets a continuous, customized feed of\n \
    \  publisher-generated information.\n   While the functionality defined in this\
    \ document is transport\n   agnostic, transports like the Network Configuration\
    \ Protocol\n   (NETCONF) [RFC6241] or RESTCONF [RFC8040] can be used to configure\
    \ or\n   dynamically signal subscriptions.  Bindings for subscribed event\n  \
    \ record delivery for NETCONF and RESTCONF are defined in [RFC8640] and\n   [RESTCONF-Notif],\
    \ respectively.\n   The YANG data model defined in this document conforms to the\
    \ Network\n   Management Datastore Architecture defined in [RFC8342].\n"
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   Various limitations to subscriptions as described in [RFC5277]\
    \ were\n   alleviated to some extent by the requirements provided in [RFC7923].\n\
    \   Resolving any remaining issues is the primary motivation for this\n   work.\
    \  Key capabilities supported by this document include:\n   o  multiple subscriptions\
    \ on a single transport session\n   o  support for dynamic and configured subscriptions\n\
    \   o  modification of an existing subscription in progress\n   o  per-subscription\
    \ operational counters\n   o  negotiation of subscription parameters (through\
    \ the use of hints\n      returned as part of declined subscription requests)\n\
    \   o  subscription state change notifications (e.g., publisher-driven\n     \
    \ suspension, parameter modification)\n   o  independence from transport\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   o  Client: Defined in [RFC8342].\n \
    \  o  Configuration: Defined in [RFC8342].\n   o  Configuration datastore: Defined\
    \ in [RFC8342].\n   o  Configured subscription: A subscription installed via\n\
    \      configuration into a configuration datastore.\n   o  Dynamic subscription:\
    \ A subscription created dynamically by a\n      subscriber via a Remote Procedure\
    \ Call (RPC).\n   o  Event: An occurrence of something that may be of interest.\n\
    \      Examples include a configuration change, a fault, a change in\n      status,\
    \ crossing a threshold, or an external input to the system.\n   o  Event occurrence\
    \ time: A timestamp matching the time an\n      originating process identified\
    \ as when an event happened.\n   o  Event record: A set of information detailing\
    \ an event.\n   o  Event stream: A continuous, chronologically ordered set of\
    \ events\n      aggregated under some context.\n   o  Event stream filter: Evaluation\
    \ criteria that may be applied\n      against event records in an event stream.\
    \  Event records pass the\n      filter when specified criteria are met.\n   o\
    \  Notification message: Information intended for a receiver\n      indicating\
    \ that one or more events have occurred.\n   o  Publisher: An entity responsible\
    \ for streaming notification\n      messages per the terms of a subscription.\n\
    \   o  Receiver: A target to which a publisher pushes subscribed event\n     \
    \ records.  For dynamic subscriptions, the receiver and subscriber\n      are\
    \ the same entity.\n   o  Subscriber: A client able to request and negotiate a\
    \ contract for\n      the generation and push of event records from a publisher.\
    \  For\n      dynamic subscriptions, the receiver and subscriber are the same\n\
    \      entity.\n   o  Subscription: A contract with a publisher, stipulating the\n\
    \      information that one or more receivers wish to have pushed from\n     \
    \ the publisher without the need for further solicitation.\n   All YANG tree diagrams\
    \ used in this document follow the notation\n   defined in [RFC8340].\n"
- title: 1.3.  Solution Overview
  contents:
  - "1.3.  Solution Overview\n   This document describes a transport-agnostic mechanism\
    \ for\n   subscribing to and receiving content from an event stream in a\n   publisher.\
    \  This mechanism operates through the use of a\n   subscription.\n   Two types\
    \ of subscriptions are supported:\n   1.  Dynamic subscriptions, where a subscriber\
    \ initiates a\n       subscription negotiation with a publisher via an RPC.  If\
    \ the\n       publisher is able to serve this request, it accepts it and then\n\
    \       starts pushing notification messages back to the subscriber.  If\n   \
    \    the publisher is not able to serve it as requested, then an error\n     \
    \  response is returned.  This response MAY include hints for\n       subscription\
    \ parameters that, had they been present, may have\n       enabled the dynamic\
    \ subscription request to be accepted.\n   2.  Configured subscriptions, which\
    \ allow the management of\n       subscriptions via a configuration so that a\
    \ publisher can send\n       notification messages to a receiver.  Support for\
    \ configured\n       subscriptions is optional, with its availability advertised\
    \ via a\n       YANG feature.\n   Additional characteristics differentiating configured\
    \ from dynamic\n   subscriptions include the following:\n   o  The lifetime of\
    \ a dynamic subscription is bound by the transport\n      session used to establish\
    \ it.  For connection-oriented stateful\n      transports like NETCONF, the loss\
    \ of the transport session will\n      result in the immediate termination of\
    \ any associated dynamic\n      subscriptions.  For connectionless or stateless\
    \ transports like\n      HTTP, a lack of receipt acknowledgment of a sequential\
    \ set of\n      notification messages and/or keep-alives can be used to trigger\
    \ a\n      termination of a dynamic subscription.  Contrast this to the\n    \
    \  lifetime of a configured subscription.  This lifetime is driven by\n      relevant\
    \ configuration being present in the publisher's applied\n      configuration.\
    \  Being tied to configuration operations implies\n      that (1) configured subscriptions\
    \ can be configured to persist\n      across reboots and (2) a configured subscription\
    \ can persist even\n      when its publisher is fully disconnected from any network.\n\
    \   o  Configured subscriptions can be modified by any configuration\n      client\
    \ with write permission on the configuration of the\n      subscription.  Dynamic\
    \ subscriptions can only be modified via an\n      RPC request made by the original\
    \ subscriber or by a change to\n      configuration data referenced by the subscription.\n\
    \   Note that there is no mixing and matching of dynamic and configured\n   operations\
    \ on a single subscription.  Specifically, a configured\n   subscription cannot\
    \ be modified or deleted using RPCs defined in this\n   document.  Similarly,\
    \ a dynamic subscription cannot be directly\n   modified or deleted by configuration\
    \ operations.  It is, however,\n   possible to perform a configuration operation\
    \ that indirectly impacts\n   a dynamic subscription.  By changing the value of\
    \ a preconfigured\n   filter referenced by an existing dynamic subscription, the\
    \ selected\n   event records passed to a receiver might change.\n   Also note\
    \ that transport-specific specifications based on this\n   specification MUST\
    \ detail the lifecycle of dynamic subscriptions as\n   well as the lifecycle of\
    \ configured subscriptions (if supported).\n   A publisher MAY terminate a dynamic\
    \ subscription at any time.\n   Similarly, it MAY decide to temporarily suspend\
    \ the sending of\n   notification messages for any dynamic subscription, or for\
    \ one or\n   more receivers of a configured subscription.  Such termination or\n\
    \   suspension is driven by internal considerations of the publisher.\n"
- title: 1.4.  Relationship to RFC 5277
  contents:
  - "1.4.  Relationship to RFC 5277\n   This document is intended to provide a superset\
    \ of the subscription\n   capabilities initially defined in [RFC5277].  It is\
    \ important to\n   understand what has been reused and what has been replaced,\n\
    \   especially when extending an existing implementation that is based on\n  \
    \ [RFC5277].  Key relationships between these two documents include the\n   following:\n\
    \   o  This document defines a transport-independent capability;\n      [RFC5277]\
    \ is specific to NETCONF.\n   o  For the new operations, the data model defined\
    \ in this document is\n      used instead of the data model defined in Section\
    \ 3.4 of\n      [RFC5277].\n   o  The RPC operations in this document replace\
    \ the operation\n      <create-subscription> as defined in [RFC5277], Section\
    \ 4.\n   o  The <notification> message of [RFC5277], Section 4 is used.\n   o\
    \  The included contents of the \"NETCONF\" event stream are identical\n     \
    \ between this document and [RFC5277].\n   o  A publisher MAY implement both the\
    \ Notification Management Schema\n      and RPCs defined in [RFC5277] and this\
    \ document concurrently.\n   o  Unlike [RFC5277], this document enables a single\
    \ transport session\n      to intermix notification messages and RPCs for different\n\
    \      subscriptions.\n   o  A subscription \"stop-time\" can be specified as\
    \ part of a\n      notification replay.  This supports a capability analogous\
    \ to the\n      <stopTime> parameter of [RFC5277].  However, in this\n      specification,\
    \ a \"stop-time\" parameter can also be applied without\n      replay.\n"
- title: 2.  Solution
  contents:
  - "2.  Solution\n   Per the overview provided in Section 1.3, this section details\
    \ the\n   overall context, state machines, and subsystems that may be assembled\n\
    \   to allow the subscription of events from a publisher.\n"
- title: 2.1.  Event Streams
  contents:
  - "2.1.  Event Streams\n   An event stream is a named entity on a publisher; this\
    \ entity exposes\n   a continuously updating set of YANG-defined event records.\
    \  An event\n   record is an instantiation of a \"notification\" YANG statement.\
    \  If\n   the \"notification\" is defined as a child to a data node, the\n   instantiation\
    \ includes the hierarchy of nodes that identifies the\n   data node in the datastore\
    \ (see Section 7.16.2 of [RFC7950]).  Each\n   event stream is available for subscription.\
    \  Identifying a) how event\n   streams are defined (other than the NETCONF stream),\
    \ b) how event\n   records are defined/generated, and c) how event records are\
    \ assigned\n   to event streams is out of scope for this document.\n   There is\
    \ only one reserved event stream name in this document:\n   \"NETCONF\".  The\
    \ \"NETCONF\" event stream contains all NETCONF event\n   record information supported\
    \ by the publisher, except where an event\n   record has explicitly been excluded\
    \ from the stream.  Beyond the\n   \"NETCONF\" stream, implementations MAY define\
    \ additional event\n   streams.\n   As YANG-defined event records are created\
    \ by a system, they may be\n   assigned to one or more streams.  The event record\
    \ is distributed to\n   a subscription's receiver(s) where (1) a subscription\
    \ includes the\n   identified stream and (2) subscription filtering does not exclude\
    \ the\n   event record from that receiver.\n   Access control permissions may\
    \ be used to silently exclude event\n   records from an event stream for which\
    \ the receiver has no read\n   access.  See [RFC8341], Section 3.4.6 for an example\
    \ of how this\n   might be accomplished.  Note that per Section 2.7 of this document,\n\
    \   subscription state change notifications are never filtered out.\n   If no\
    \ access control permissions are in place for event records on an\n   event stream,\
    \ then a receiver MUST be allowed access to all the event\n   records.  If subscriber\
    \ permissions change during the lifecycle of a\n   subscription and event stream\
    \ access is no longer permitted, then the\n   subscription MUST be terminated.\n\
    \   Event records MUST NOT be delivered to a receiver in a different\n   order\
    \ than the order in which they were placed on an event stream.\n"
- title: 2.2.  Event Stream Filters
  contents:
  - "2.2.  Event Stream Filters\n   This document defines an extensible filtering\
    \ mechanism.  The filter\n   itself is a boolean test that is placed on the content\
    \ of an event\n   record.  A \"false\" filtering result causes the event record\
    \ to be\n   excluded from delivery to a receiver.  A filter never results in\n\
    \   information being stripped from an event record prior to that event\n   record\
    \ being encapsulated in a notification message.  The two\n   optional event stream\
    \ filtering syntaxes supported are [XPATH] and\n   subtree [RFC6241].\n   If no\
    \ event stream filter is provided in a subscription, all event\n   records on\
    \ an event stream are to be sent.\n"
- title: 2.3.  QoS
  contents:
  - "2.3.  QoS\n   This document provides for several Quality of Service (QoS)\n \
    \  parameters.  These parameters indicate the treatment of a\n   subscription\
    \ relative to other traffic between publisher and\n   receiver.  Included are:\n\
    \   o  A \"dscp\" marking to differentiate prioritization of notification\n  \
    \    messages during network transit.\n   o  A \"weighting\" so that bandwidth\
    \ proportional to this weighting can\n      be allocated to this subscription\
    \ relative to other subscriptions.\n   o  A \"dependency\" upon another subscription.\n\
    \   If the publisher supports the \"dscp\" feature, then a subscription\n   with\
    \ a \"dscp\" leaf MUST result in a corresponding Differentiated\n   Services Code\
    \ Point (DSCP) marking [RFC2474] being placed in the IP\n   header of any resulting\
    \ notification messages and subscription state\n   change notifications.  A publisher\
    \ MUST respect the DSCP markings for\n   subscription traffic egressing that publisher.\n\
    \   Different DSCP code points require different transport connections.\n   As\
    \ a result, where TCP is used, a publisher that supports the \"dscp\"\n   feature\
    \ must ensure that a subscription's notification messages are\n   returned in\
    \ a single TCP transport session where all traffic shares\n   the subscription's\
    \ \"dscp\" leaf value.  If this cannot be guaranteed,\n   any \"establish-subscription\"\
    \ RPC request SHOULD be rejected with a\n   \"dscp-unavailable\" error.\n   For\
    \ the \"weighting\" parameter, when concurrently dequeuing\n   notification messages\
    \ from multiple subscriptions to a receiver, the\n   publisher MUST allocate bandwidth\
    \ to each subscription proportional\n   to the weights assigned to those subscriptions.\
    \  \"Weighting\" is an\n   optional capability of the publisher; support for it\
    \ is identified\n   via the \"qos\" feature.\n   If a subscription has the \"\
    dependency\" parameter set, then any\n   buffered notification messages containing\
    \ event records selected by\n   the parent subscription MUST be dequeued prior\
    \ to the notification\n   messages of the dependent subscription.  If notification\
    \ messages\n   have dependencies on each other, the notification message queued\
    \ the\n   longest MUST go first.  If a \"dependency\" included in an RPC\n   references\
    \ a subscription that does not exist or is no longer\n   accessible to that subscriber,\
    \ that \"dependency\" MUST be silently\n   removed.  \"Dependency\" is an optional\
    \ capability of the publisher;\n   support for it is identified via the \"qos\"\
    \ feature.\n   \"Dependency\" and \"weighting\" parameters will only be respected\
    \ and\n   enforced between subscriptions that share the same \"dscp\" leaf value.\n\
    \   There are additional types of publisher capacity overload that this\n   specification\
    \ does not address, as they are out of scope.  For\n   example, the prioritization\
    \ of which subscriptions have precedence\n   when the publisher CPU is overloaded\
    \ is not discussed.  As a result,\n   implementation choices will need to be made\
    \ to address such\n   considerations.\n"
- title: 2.4.  Dynamic Subscriptions
  contents:
  - "2.4.  Dynamic Subscriptions\n   Dynamic subscriptions are managed via protocol\
    \ operations (in the\n   form of RPCs, per [RFC7950], Section 7.14) made against\
    \ targets\n   located in the publisher.  These RPCs have been designed extensibly\n\
    \   so that they may be augmented for subscription targets beyond event\n   streams.\
    \  For examples of such augmentations, see the RPC\n   augmentations in the YANG\
    \ data model provided in [RFC8641].\n"
- title: 2.4.1.  Dynamic Subscription State Machine
  contents:
  - "2.4.1.  Dynamic Subscription State Machine\n   Below is the publisher's state\
    \ machine for a dynamic subscription.\n   Each state is shown in its own box.\
    \  It is important to note that\n   such a subscription doesn't exist at the publisher\
    \ until an\n   \"establish-subscription\" RPC is accepted.  The mere request by\
    \ a\n   subscriber to establish a subscription is not sufficient for that\n  \
    \ subscription to be externally visible.  Start and end states are\n   depicted\
    \ to reflect subscription creation and deletion events.\n                    \
    \  .........\n                      : start :\n                      :.......:\n\
    \                          |\n                 establish-subscription\n      \
    \                    |\n                          |   .-------modify-subscription--------.\n\
    \                          v   v                                  |\n        \
    \            .-----------.                          .-----------.\n         .--------.\
    \ | receiver  |--insufficient CPU, b/w-->| receiver  |\n     modify-       '|\
    \  active   |                          | suspended |\n     subscription   |  \
    \         |<----CPU, b/w sufficient--|           |\n         ---------->'-----------'\
    \                          '-----------'\n                          |        \
    \                              |\n               delete/kill-subscription    \
    \                 delete/kill-\n                          |                  \
    \               subscription\n                          v                    \
    \                  |\n                      .........                        \
    \          |\n                      :  end  :<---------------------------------'\n\
    \                      :.......:\n      Figure 1: Publisher's State Machine for\
    \ a Dynamic Subscription\n   Of interest in this state machine are the following:\n\
    \   o  Successful \"establish-subscription\" or \"modify-subscription\" RPCs\n\
    \      move the subscription to the \"active\" state.\n   o  Failed \"modify-subscription\"\
    \ RPCs will leave the subscription in\n      its previous state, with no visible\
    \ change to any streaming\n      updates.\n   o  A \"delete-subscription\" or\
    \ \"kill-subscription\" RPC will end the\n      subscription, as will reaching\
    \ a \"stop-time\".\n   o  A publisher may choose to suspend a subscription when\
    \ there is not\n      sufficient CPU or bandwidth available to service the subscription.\n\
    \      This is announced to the subscriber via the \"subscription-\n      suspended\"\
    \ subscription state change notification.\n   o  A suspended subscription may\
    \ be modified by the subscriber (for\n      example, in an attempt to use fewer\
    \ resources).  Successful\n      modification returns the subscription to the\
    \ \"active\" state.\n   o  Even without a \"modify-subscription\" request, a publisher\
    \ may\n      return a subscription to the \"active\" state when sufficient\n \
    \     resources are again available.  This is announced to the\n      subscriber\
    \ via the \"subscription-resumed\" subscription state\n      change notification.\n"
- title: 2.4.2.  Establishing a Dynamic Subscription
  contents:
  - "2.4.2.  Establishing a Dynamic Subscription\n   The \"establish-subscription\"\
    \ RPC allows a subscriber to request the\n   creation of a subscription.\n   The\
    \ input parameters of the operation are:\n   o  A \"stream\" name, which identifies\
    \ the targeted event stream\n      against which the subscription is applied.\n\
    \   o  An event stream filter, which may reduce the set of event records\n   \
    \   pushed.\n   o  If the transport used by the RPC supports multiple encodings,\
    \ an\n      optional \"encoding\" for the event records pushed.  If no\n     \
    \ \"encoding\" is included, the encoding of the RPC MUST be used.\n   o  An optional\
    \ \"stop-time\" for the subscription.  If no \"stop-time\"\n      is present,\
    \ notification messages will continue to be sent until\n      the subscription\
    \ is terminated.\n   o  An optional \"replay-start-time\" for the subscription.\
    \  The\n      \"replay-start-time\" MUST be in the past and indicates that the\n\
    \      subscription is requesting a replay of previously generated\n      information\
    \ from the event stream.  For more on replay, see\n      Section 2.4.2.1.  If\
    \ there is no \"replay-start-time\", the\n      subscription starts immediately.\n\
    \   If the publisher can satisfy the \"establish-subscription\" request, it\n\
    \   replies with an identifier for the subscription and then immediately\n   starts\
    \ streaming notification messages.\n   Below is a tree diagram for \"establish-subscription\"\
    .  All objects\n   contained in this tree are described in the YANG module in\
    \ Section 4.\n       +---x establish-subscription\n          +---w input\n   \
    \       |  +---w (target)\n          |  |  +--:(stream)\n          |  |     +---w\
    \ (stream-filter)?\n          |  |     |  +--:(by-reference)\n          |  | \
    \    |  |  +---w stream-filter-name\n          |  |     |  |          stream-filter-ref\n\
    \          |  |     |  +--:(within-subscription)\n          |  |     |     +---w\
    \ (filter-spec)?\n          |  |     |        +--:(stream-subtree-filter)\n  \
    \        |  |     |        |  +---w stream-subtree-filter?   <anydata>\n     \
    \     |  |     |        |          {subtree}?\n          |  |     |        +--:(stream-xpath-filter)\n\
    \          |  |     |           +---w stream-xpath-filter?\n          |  |   \
    \  |                   yang:xpath1.0 {xpath}?\n          |  |     +---w stream\
    \                               stream-ref\n          |  |     +---w replay-start-time?\n\
    \          |  |             yang:date-and-time {replay}?\n          |  +---w stop-time?\n\
    \          |  |       yang:date-and-time\n          |  +---w dscp?           \
    \                           inet:dscp\n          |  |       {dscp}?\n        \
    \  |  +---w weighting?                                 uint8\n          |  | \
    \      {qos}?\n          |  +---w dependency?\n          |  |       subscription-id\
    \ {qos}?\n          |  +---w encoding?                                  encoding\n\
    \          +--ro output\n             +--ro id                            subscription-id\n\
    \             +--ro replay-start-time-revision?   yang:date-and-time\n       \
    \              {replay}?\n            Figure 2: \"establish-subscription\" RPC\
    \ Tree Diagram\n   A publisher MAY reject the \"establish-subscription\" RPC for\
    \ many\n   reasons, as described in Section 2.4.6.  The contents of the\n   resulting\
    \ RPC error response MAY include details on input parameters\n   that, if considered\
    \ in a subsequent \"establish-subscription\" RPC, may\n   result in successful\
    \ subscription establishment.  Any such hints MUST\n   be transported in a yang-data\
    \ \"establish-subscription-stream-error-\n   info\" container included in the\
    \ RPC error response.\n   Below is a tree diagram for \"establish-subscription-stream-error-\n\
    \   info\" RPC yang-data.  All objects contained in this tree are\n   described\
    \ in the YANG module in Section 4.\n       yang-data establish-subscription-stream-error-info\n\
    \         +--ro establish-subscription-stream-error-info\n            +--ro reason?\
    \                   identityref\n            +--ro filter-failure-hint?      string\n\
    \           Figure 3: \"establish-subscription-stream-error-info\"\n         \
    \               RPC yang-data Tree Diagram\n"
- title: 2.4.2.1.  Requesting a Replay of Event Records
  contents:
  - "2.4.2.1.  Requesting a Replay of Event Records\n   Replay provides the ability\
    \ to establish a subscription that is also\n   capable of passing event records\
    \ generated in the recent past.  In\n   other words, as the subscription initializes\
    \ itself, it sends any\n   event records in the target event stream that meet\
    \ the filter\n   criteria that have an event time that is after the \"replay-start-\n\
    \   time\" and also have an event time before the \"stop-time\" should this\n\
    \   \"stop-time\" exist.  The end of these historical event records is\n   identified\
    \ via a \"replay-completed\" subscription state change\n   notification.  Any\
    \ event records generated since the subscription\n   establishment may then follow.\
    \  For a particular subscription, all\n   event records will be delivered in the\
    \ order in which they are placed\n   in the event stream.\n   Replay is an optional\
    \ feature that is dependent on an event stream\n   supporting some form of logging.\
    \  This document puts no restrictions\n   on the size or form of the log, where\
    \ it resides in the publisher, or\n   when event record entries in the log are\
    \ purged.\n   The inclusion of a \"replay-start-time\" in an \"establish-subscription\"\
    \n   RPC indicates a replay request.  If the \"replay-start-time\" contains\n\
    \   a value that is earlier than what a publisher's retained history\n   supports,\
    \ then if the subscription is accepted, the actual\n   publisher's revised start\
    \ time MUST be set in the returned\n   \"replay-start-time-revision\" object.\n\
    \   A \"stop-time\" parameter may be included in a replay subscription.\n   For\
    \ a replay subscription, the \"stop-time\" MAY be earlier than the\n   current\
    \ time but MUST be later than the \"replay-start-time\".\n   If the given \"replay-start-time\"\
    \ is later than the time marked in any\n   event records retained in the replay\
    \ buffer, then the publisher MUST\n   send a \"replay-completed\" notification\
    \ immediately after a successful\n   \"establish-subscription\" RPC response.\n\
    \   If an event stream supports replay, the \"replay-support\" leaf is\n   present\
    \ in the \"/streams/stream\" list entry for the event stream.  An\n   event stream\
    \ that does support replay is not expected to have an\n   unlimited supply of\
    \ saved notifications available to accommodate any\n   given replay request. \
    \ To assess the timeframe available for replay,\n   subscribers can read the leafs\
    \ \"replay-log-creation-time\" and\n   \"replay-log-aged-time\".  See Figure 18\
    \ for the YANG tree and\n   Section 4 for the YANG module describing these elements.\
    \  The actual\n   size of the replay log at any given time is a publisher-specific\n\
    \   matter.  Control parameters for the replay log are outside the scope\n   of\
    \ this document.\n"
- title: 2.4.3.  Modifying a Dynamic Subscription
  contents:
  - "2.4.3.  Modifying a Dynamic Subscription\n   The \"modify-subscription\" operation\
    \ permits changing the terms of an\n   existing dynamic subscription.  Dynamic\
    \ subscriptions can be modified\n   any number of times.  Dynamic subscriptions\
    \ can only be modified via\n   this RPC using a transport session connecting to\
    \ the subscriber.  If\n   the publisher accepts the requested modifications, it\
    \ acknowledges\n   success to the subscriber, then immediately starts sending\
    \ event\n   records based on the new terms.\n   Subscriptions created by configuration\
    \ cannot be modified via this\n   RPC.  However, configuration may be used to\
    \ modify objects referenced\n   by the subscription (such as a referenced filter).\n\
    \   Below is a tree diagram for \"modify-subscription\".  All objects\n   contained\
    \ in this tree are described in the YANG module in Section 4.\n       +---x modify-subscription\n\
    \          +---w input\n             +---w id\n             |       subscription-id\n\
    \             +---w (target)\n             |  +--:(stream)\n             |   \
    \  +---w (stream-filter)?\n             |        +--:(by-reference)\n        \
    \     |        |  +---w stream-filter-name\n             |        |          stream-filter-ref\n\
    \             |        +--:(within-subscription)\n             |           +---w\
    \ (filter-spec)?\n             |              +--:(stream-subtree-filter)\n  \
    \           |              |  +---w stream-subtree-filter?   <anydata>\n     \
    \        |              |          {subtree}?\n             |              +--:(stream-xpath-filter)\n\
    \             |                 +---w stream-xpath-filter?\n             |   \
    \                      yang:xpath1.0 {xpath}?\n             +---w stop-time?\n\
    \                     yang:date-and-time\n             Figure 4: \"modify-subscription\"\
    \ RPC Tree Diagram\n   If the publisher accepts the requested modifications on\
    \ a currently\n   suspended subscription, the subscription will immediately be\
    \ resumed\n   (i.e., the modified subscription is returned to the \"active\" state).\n\
    \   The publisher MAY immediately suspend this newly modified\n   subscription\
    \ through the \"subscription-suspended\" notification before\n   any event records\
    \ are sent.\n   If the publisher rejects the RPC request, the subscription remains\
    \ as\n   it was prior to the request.  That is, the request has no impact\n  \
    \ whatsoever.  Rejection of the RPC for any reason is indicated via an\n   RPC\
    \ error as described in Section 2.4.6.  The contents of such a\n   rejected RPC\
    \ MAY include hints on inputs that (if considered) may\n   result in a successfully\
    \ modified subscription.  These hints MUST be\n   transported in a yang-data \"\
    modify-subscription-stream-error-info\"\n   container inserted into the RPC error\
    \ response.\n   Below is a tree diagram for \"modify-subscription-stream-error-info\"\
    \n   RPC yang-data.  All objects contained in this tree are described in\n   the\
    \ YANG module in Section 4.\n       yang-data modify-subscription-stream-error-info\n\
    \         +--ro modify-subscription-stream-error-info\n            +--ro reason?\
    \                identityref\n            +--ro filter-failure-hint?   string\n\
    \             Figure 5: \"modify-subscription-stream-error-info\"\n          \
    \              RPC yang-data Tree Diagram\n"
- title: 2.4.4.  Deleting a Dynamic Subscription
  contents:
  - "2.4.4.  Deleting a Dynamic Subscription\n   The \"delete-subscription\" operation\
    \ permits canceling an existing\n   subscription.  If the publisher accepts the\
    \ request and the publisher\n   has indicated success, the publisher MUST NOT\
    \ send any more\n   notification messages for this subscription.\n   Below is\
    \ a tree diagram for \"delete-subscription\".  All objects\n   contained in this\
    \ tree are described in the YANG module in Section 4.\n       +---x delete-subscription\n\
    \          +---w input\n             +---w id     subscription-id\n          \
    \   Figure 6: \"delete-subscription\" RPC Tree Diagram\n   Dynamic subscriptions\
    \ can only be deleted via this RPC using a\n   transport session connecting to\
    \ the subscriber.  Configured\n   subscriptions cannot be deleted using RPCs.\n"
- title: 2.4.5.  Killing a Dynamic Subscription
  contents:
  - "2.4.5.  Killing a Dynamic Subscription\n   The \"kill-subscription\" operation\
    \ permits an operator to end a\n   dynamic subscription that is not associated\
    \ with the transport\n   session used for the RPC.  A publisher MUST terminate\
    \ any dynamic\n   subscription identified by the \"id\" parameter in the RPC request,\
    \ if\n   such a subscription exists.\n   Configured subscriptions cannot be killed\
    \ using this RPC.  Instead,\n   configured subscriptions are deleted as part of\
    \ regular configuration\n   operations.  Publishers MUST reject any RPC attempt\
    \ to kill a\n   configured subscription.\n   Below is a tree diagram for \"kill-subscription\"\
    .  All objects\n   contained in this tree are described in the YANG module in\
    \ Section 4.\n       +---x kill-subscription\n          +---w input\n        \
    \     +---w id     subscription-id\n              Figure 7: \"kill-subscription\"\
    \ RPC Tree Diagram\n"
- title: 2.4.6.  RPC Failures
  contents:
  - "2.4.6.  RPC Failures\n   Whenever an RPC is unsuccessful, the publisher returns\
    \ relevant\n   information as part of the RPC error response.  Transport-level\
    \ error\n   processing MUST be done before the RPC error processing described\
    \ in\n   this section.  In all cases, RPC error information returned by the\n\
    \   publisher will use existing transport-layer RPC structures, such as\n   those\
    \ seen with NETCONF (Appendix A of [RFC6241]) or RESTCONF\n   (Section 7.1 of\
    \ [RFC8040]).  These structures MUST be able to encode\n   subscription-specific\
    \ errors identified below and defined in this\n   document's YANG data model.\n\
    \   As a result of this variety, how subscription errors are encoded in\n   an\
    \ RPC error response is transport dependent.  Valid errors that can\n   occur\
    \ for each RPC are as follows:\n      establish-subscription         modify-subscription\n\
    \      ----------------------         ----------------------\n      dscp-unavailable\
    \               filter-unsupported\n      encoding-unsupported           insufficient-resources\n\
    \      filter-unsupported             no-such-subscription\n      insufficient-resources\n\
    \      replay-unsupported\n      delete-subscription            kill-subscription\n\
    \      ----------------------         ----------------------\n      no-such-subscription\
    \           no-such-subscription\n   To see a NETCONF-based example of an error\
    \ response from the list\n   above, see the \"no-such-subscription\" error response\
    \ illustrated in\n   [RFC8640], Figure 10.\n   There is one final set of transport-independent\
    \ RPC error elements\n   included in the YANG data model defined in this document:\
    \ three\n   yang-data structures that enable the publisher to provide to the\n\
    \   receiver any error information that does not fit into existing\n   transport-layer\
    \ RPC structures.  These structures are:\n   1.  \"establish-subscription-stream-error-info\"\
    : This MUST be returned\n       with the leaf \"reason\" populated if an RPC error\
    \ reason has not\n       been placed elsewhere in the transport portion of a failed\n\
    \       \"establish-subscription\" RPC response.  This MUST be sent if\n     \
    \  hints on how to overcome the RPC error are included.\n   2.  \"modify-subscription-stream-error-info\"\
    : This MUST be returned\n       with the leaf \"reason\" populated if an RPC error\
    \ reason has not\n       been placed elsewhere in the transport portion of a failed\n\
    \       \"modify-subscription\" RPC response.  This MUST be sent if hints\n  \
    \     on how to overcome the RPC error are included.\n   3.  \"delete-subscription-error-info\"\
    : This MUST be returned with the\n       leaf \"reason\" populated if an RPC error\
    \ reason has not been\n       placed elsewhere in the transport portion of a failed\n\
    \       \"delete-subscription\" or \"kill-subscription\" RPC response.\n"
- title: 2.5.  Configured Subscriptions
  contents:
  - "2.5.  Configured Subscriptions\n   A configured subscription is a subscription\
    \ installed via\n   configuration.  Configured subscriptions may be modified by\
    \ any\n   configuration client with the proper permissions.  Subscriptions can\n\
    \   be modified or terminated via configuration at any point during their\n  \
    \ lifetime.  Multiple configured subscriptions MUST be supportable over\n   a\
    \ single transport session.\n   Configured subscriptions have several characteristics\
    \ distinguishing\n   them from dynamic subscriptions:\n   o  persistence across\
    \ publisher reboots,\n   o  persistence even when transport is unavailable, and\n\
    \   o  an ability to send notification messages to more than one\n      receiver.\
    \  (Note that receivers are unaware of the existence of\n      any other receivers.)\n\
    \   On the publisher, support for configured subscriptions is optional\n   and\
    \ advertised using the \"configured\" feature.  On a receiver of a\n   configured\
    \ subscription, support for dynamic subscriptions is\n   optional.  However, if\
    \ replaying missed event records is required for\n   a configured subscription,\
    \ support for dynamic subscription is highly\n   recommended.  In this case, a\
    \ separate dynamic subscription can be\n   established to retransmit the missing\
    \ event records.\n   In addition to the subscription parameters available to dynamic\n\
    \   subscriptions as described in Section 2.4.2, the following additional\n  \
    \ parameters are also available to configured subscriptions:\n   o  A \"transport\"\
    , which identifies the transport protocol to use to\n      connect with all subscription\
    \ receivers.\n   o  One or more receivers, each intended as the destination for\
    \ event\n      records.  Note that each individual receiver is identifiable by\n\
    \      its \"name\".\n   o  Optional parameters to identify where traffic should\
    \ egress a\n      publisher:\n      *  A \"source-interface\", which identifies\
    \ the egress interface to\n         use from the publisher.  Publisher support\
    \ for this parameter\n         is optional and advertised using the \"interface-designation\"\
    \n         feature.\n      *  A \"source-address\" address, which identifies the\
    \ IP address to\n         stamp on notification messages destined for the receiver.\n\
    \      *  A \"source-vrf\", which identifies the Virtual Routing and\n       \
    \  Forwarding (VRF) instance on which to reach receivers.  This\n         VRF\
    \ is a network instance as defined in [RFC8529].  Publisher\n         support\
    \ for VRFs is optional and advertised using the\n         \"supports-vrf\" feature.\n\
    \      If none of the above parameters are set, notification messages\n      MUST\
    \ egress the publisher's default interface.\n   A tree diagram that includes these\
    \ parameters is provided in\n   Figure 20 in Section 3.3.  These parameters are\
    \ described in the YANG\n   module in Section 4.\n"
- title: 2.5.1.  Configured Subscription State Machine
  contents:
  - "2.5.1.  Configured Subscription State Machine\n   Below is the state machine\
    \ for a configured subscription on the\n   publisher.  This state machine describes\
    \ the three states (\"valid\",\n   \"invalid\", and \"concluded\") as well as\
    \ the transitions between these\n   states.  Start and end states are depicted\
    \ to reflect configured\n   subscription creation and deletion events.  The creation\
    \ or\n   modification of a configured subscription initiates an evaluation by\n\
    \   the publisher to determine if the subscription is in the\n   \"valid\" state\
    \ or the \"invalid\" state.  The publisher uses its own\n   criteria in making\
    \ this determination.  If in the \"valid\" state, the\n   subscription becomes\
    \ operational.  See (1) in the diagram below.\n .........\n : start :-.\n :.......:\
    \ |\n      create  .---modify-----.----------------------------------.\n     \
    \      |  |              |                                  |\n           V  V\
    \          .-------.         .......         .---------.\n  .----[evaluate]--no--->|invalid|-delete->:\
    \ end :<-delete-|concluded|\n  |                      '-------'         :.....:\
    \         '---------'\n  |-[evaluate]--no-(2).      ^                ^       \
    \          ^\n  |        ^          |      |                |                \
    \ |\n yes       |          '->unsupportable      delete           stop-time\n\
    \  |      modify         (subscription-   (subscription-   (subscription-\n  |\
    \        |             terminated*)     terminated*)      concluded*)\n  |   \
    \     |                 |                |                 |\n (1)       |   \
    \             (3)              (4)               (5)\n  |   .---------------------------------------------------------------.\n\
    \  '-->|                         valid                                 |\n   \
    \   '---------------------------------------------------------------'\n Legend:\n\
    \   Dotted boxes: subscription added or removed via configuration\n   Dashed boxes:\
    \ states for a subscription\n   [evaluate]: decision point on whether the subscription\n\
    \               is supportable\n   (*): resulting subscription state change notification\n\
    \     Figure 8: Publisher's State Machine for a Configured Subscription\n   A\
    \ subscription in the \"valid\" state may move to the \"invalid\" state\n   in\
    \ one of two ways.  First, it may be modified in a way that fails a\n   re-evaluation.\
    \  See (2) in the diagram.  Second, the publisher might\n   determine that the\
    \ subscription is no longer supportable.  This could\n   be because of an unexpected\
    \ but sustained increase in an event\n   stream's event records, degraded CPU\
    \ capacity, a more complex\n   referenced filter, or other subscriptions that\
    \ have usurped\n   resources.  See (3) in the diagram.  No matter the case, a\n\
    \   \"subscription-terminated\" notification is sent to any receivers in\n   the\
    \ \"active\" or \"suspended\" state.  A subscription in the\n   \"valid\" state\
    \ may also transition to the \"concluded\" state via (5) if\n   a configured stop\
    \ time has been reached.  In this case, a\n   \"subscription-concluded\" notification\
    \ is sent to any receivers in the\n   \"active\" or \"suspended\" state.  Finally,\
    \ a subscription may be\n   deleted by configuration (4).\n   When a subscription\
    \ is in the \"valid\" state, a publisher will attempt\n   to connect with all\
    \ receivers of a configured subscription and\n   deliver notification messages.\
    \  Below is the state machine for each\n   receiver of a configured subscription.\
    \  This receiver state machine\n   is fully contained in the state machine of\
    \ the configured\n   subscription and is only relevant when the configured subscription\
    \ is\n   in the \"valid\" state.\n     .-----------------------------------------------------------------.\n\
    \     |                         valid                                   |\n  \
    \   |   .----------.                           .------------.         |\n    \
    \ |   | receiver |---timeout---------------->|  receiver  |         |\n     |\
    \   |connecting|<----------------reset--(c)|disconnected|         |\n     |  \
    \ |          |<-transport                '------------'         |\n     |   '----------'\
    \  loss,reset------------------------------.       |\n     |      (a)        \
    \  |                                     |       |\n     |  subscription-   (b)\
    \                                   (b)      |\n     |  started*    .--------.\
    \                             .---------. |\n     |       '----->|        |(d)-insufficient\
    \ CPU,------->|         | |\n     |              |receiver|    buffer overflow\
    \          |receiver | |\n     | subscription-| active |                     \
    \        |suspended| |\n     |   modified*  |        |<----CPU, b/w sufficient,-(e)|\
    \         | |\n     |        '---->'--------'     subscription-modified*  '---------'\
    \ |\n     '-----------------------------------------------------------------'\n\
    \     Legend:\n       Dashed boxes that include the word \"receiver\" show the\
    \ possible\n       states for an individual receiver of a valid configured\n \
    \      subscription.\n      * indicates a subscription state change notification\n\
    \      Figure 9: Receiver State Machine for a Configured Subscription\n      \
    \                        on a Publisher\n   When a configured subscription first\
    \ moves to the \"valid\" state, the\n   \"state\" leaf of each receiver is initialized\
    \ to the \"connecting\"\n   state.  If transport connectivity is not available\
    \ to any receivers\n   and there are any notification messages to deliver, a transport\n\
    \   session is established (e.g., per [RFC8071]).  Individual receivers\n   are\
    \ moved to the \"active\" state when a \"subscription-started\"\n   subscription\
    \ state change notification is successfully passed to that\n   receiver (a). \
    \ Event records are only sent to active receivers.\n   Receivers of a configured\
    \ subscription remain active on the publisher\n   if both (1) transport connectivity\
    \ to the receiver is active and\n   (2) event records are not being dropped due\
    \ to a publisher's sending\n   capacity being reached.  In addition, a configured\
    \ subscription's\n   receiver MUST be moved to the \"connecting\" state if the\
    \ receiver is\n   reset via the \"reset\" action (b), (c).  For more on the \"\
    reset\"\n   action, see Section 2.5.5.  If transport connectivity cannot be\n\
    \   achieved while in the \"connecting\" state, the receiver MAY be moved\n  \
    \ to the \"disconnected\" state.\n   A configured subscription's receiver MUST\
    \ be moved to the \"suspended\"\n   state if there is transport connectivity between\
    \ the publisher and\n   receiver but (1) delivery of notification messages is\
    \ failing due to\n   a publisher's buffer capacity being reached or (2) notification\n\
    \   messages cannot be generated for that receiver due to insufficient\n   CPU\
    \ (d).  This is indicated to the receiver by the \"subscription-\n   suspended\"\
    \ subscription state change notification.\n   A configured subscription's receiver\
    \ MUST be returned to the \"active\"\n   state from the \"suspended\" state when\
    \ notification messages can be\n   generated, bandwidth is sufficient to handle\
    \ the notification\n   messages, and a receiver has successfully been sent a \"\
    subscription-\n   resumed\" or \"subscription-modified\" subscription state change\n\
    \   notification (e).  The choice as to which of these two subscription\n   state\
    \ change notifications is sent is determined by whether the\n   subscription was\
    \ modified during the period of suspension.\n   Modification of a configured subscription\
    \ is possible at any time.  A\n   \"subscription-modified\" subscription state\
    \ change notification will\n   be sent to all active receivers, immediately followed\
    \ by notification\n   messages conforming to the new parameters.  Suspended receivers\
    \ will\n   also be informed of the modification.  However, this notification\n\
    \   will await the end of the suspension for that receiver (e).\n   The mechanisms\
    \ described above are mirrored in the RPCs and\n   notifications defined in this\
    \ document.  It should be noted that\n   these RPCs and notifications have been\
    \ designed to be extensible and\n   allow subscriptions into targets other than\
    \ event streams.  For\n   instance, the YANG module defined in Section 5 of [RFC8641]\
    \ augments\n   \"/sn:modify-subscription/sn:input/sn:target\".\n"
- title: 2.5.2.  Creating a Configured Subscription
  contents:
  - "2.5.2.  Creating a Configured Subscription\n   Configured subscriptions are established\
    \ using configuration\n   operations against the top-level \"subscriptions\" subtree.\n\
    \   Because there is no explicit association with an existing transport\n   session,\
    \ configuration operations MUST include additional parameters\n   beyond those\
    \ of dynamic subscriptions.  These parameters identify\n   each receiver, how\
    \ to connect with that receiver, and possibly\n   whether the notification messages\
    \ need to come from a specific egress\n   interface on the publisher.  Receiver-specific\
    \ transport connectivity\n   parameters MUST be configured via transport-specific\
    \ augmentations to\n   this specification.  See Section 2.5.7 for details.\n \
    \  After a subscription is successfully established, the publisher\n   immediately\
    \ sends a \"subscription-started\" subscription state change\n   notification\
    \ to each receiver.  It is quite possible that upon\n   configuration, reboot,\
    \ or even steady-state operations, a transport\n   session may not be currently\
    \ available to the receiver.  In this\n   case, when there is something to transport\
    \ for an active\n   subscription, transport-specific \"call home\" operations\
    \ [RFC8071]\n   will be used to establish the connection.  When transport\n  \
    \ connectivity is available, notification messages may then be pushed.\n   With\
    \ active configured subscriptions, it is allowable to buffer event\n   records\
    \ even after a \"subscription-started\" has been sent.  However,\n   if events\
    \ are lost (rather than just delayed) due to replay buffer\n   capacity being\
    \ reached, a new \"subscription-started\" must be sent.\n   This new \"subscription-started\"\
    \ indicates an event record\n   discontinuity.\n   To see an example of subscription\
    \ creation using configuration\n   operations over NETCONF, see Appendix A.\n"
- title: 2.5.3.  Modifying a Configured Subscription
  contents:
  - "2.5.3.  Modifying a Configured Subscription\n   Configured subscriptions can\
    \ be modified using configuration\n   operations against the top-level \"subscriptions\"\
    \ subtree.\n   If the modification involves adding receivers, added receivers\
    \ are\n   placed in the \"connecting\" state.  If a receiver is removed, the\n\
    \   subscription state change notification \"subscription-terminated\" is\n  \
    \ sent to that receiver if that receiver is active or suspended.\n   If the modification\
    \ involves changing the policies for the\n   subscription, the publisher sends\
    \ to currently active receivers a\n   \"subscription-modified\" notification.\
    \  For any suspended receivers, a\n   \"subscription-modified\" notification will\
    \ be delayed until the\n   receiver's subscription has been resumed.  (Note: In\
    \ this case, the\n   \"subscription-modified\" notification informs the receiver\
    \ that the\n   subscription has been resumed, so no additional \"subscription-\n\
    \   resumed\" need be sent.  Also note that if multiple modifications have\n \
    \  occurred during the suspension, only the \"subscription-modified\"\n   notification\
    \ describing the latest one need be sent to the receiver.)\n"
- title: 2.5.4.  Deleting a Configured Subscription
  contents:
  - "2.5.4.  Deleting a Configured Subscription\n   Subscriptions can be deleted through\
    \ configuration against the\n   top-level \"subscriptions\" subtree.\n   Immediately\
    \ after a subscription is successfully deleted, the\n   publisher sends to all\
    \ receivers of that subscription a subscription\n   state change notification\
    \ stating that the subscription has ended\n   (i.e., \"subscription-terminated\"\
    ).\n"
- title: 2.5.5.  Resetting a Configured Subscription's Receiver
  contents:
  - "2.5.5.  Resetting a Configured Subscription's Receiver\n   It is possible that\
    \ a configured subscription to a receiver needs to\n   be reset.  This is accomplished\
    \ via the \"reset\" action in the YANG\n   module at \"/subscriptions/subscription/receivers/receiver/reset\"\
    .\n   This action may be useful in cases where a publisher has timed out\n   trying\
    \ to reach a receiver.  When such a reset occurs, a transport\n   session will\
    \ be initiated if necessary, and a new \"subscription-\n   started\" notification\
    \ will be sent.  This action does not have any\n   effect on transport connectivity\
    \ if the needed connectivity already\n   exists.\n"
- title: 2.5.6.  Replay for a Configured Subscription
  contents:
  - "2.5.6.  Replay for a Configured Subscription\n   It is possible to do replay\
    \ on a configured subscription.  This is\n   supported via the configuration of\
    \ the \"configured-replay\" object on\n   the subscription.  The setting of this\
    \ object enables the streaming\n   of the buffered event records for the subscribed\
    \ event stream.  All\n   buffered event records that have been retained since\
    \ the last\n   publisher restart will be sent to each configured receiver.\n \
    \  Replay of event records created since restart is useful.  It allows\n   event\
    \ records generated before transport connectivity establishment\n   to be passed\
    \ to a receiver.  Setting the restart time as the earliest\n   configured replay\
    \ time precludes the possibility of resending event\n   records that were logged\
    \ prior to publisher restart.  It also ensures\n   that the same records will\
    \ be sent to each configured receiver,\n   regardless of the speed of transport\
    \ connectivity establishment to\n   each receiver.  Finally, by establishing restart\
    \ as the earliest\n   potential time for event records to be included in notification\n\
    \   messages, a well-understood timeframe for replay is defined.\n   As a result,\
    \ when any configured subscription's receivers become\n   active, buffered event\
    \ records will be sent immediately after the\n   \"subscription-started\" notification.\
    \  If the publisher knows the last\n   event record sent to a receiver and the\
    \ publisher has not rebooted,\n   the next event record on the event stream that\
    \ meets filtering\n   criteria will be the leading event record sent.  Otherwise,\
    \ the\n   leading event record will be the first event record meeting filtering\n\
    \   criteria subsequent to the latest of three different times: the\n   \"replay-log-creation-time\"\
    , the \"replay-log-aged-time\", or the most\n   recent publisher boot time.  The\
    \ \"replay-log-creation-time\" and\n   \"replay-log-aged-time\" are discussed\
    \ in Section 2.4.2.1.  The most\n   recent publisher boot time ensures that duplicate\
    \ event records are\n   not replayed from a previous time the publisher was booted.\n\
    \   It is quite possible that a receiver might want to retrieve event\n   records\
    \ from an event stream prior to the latest boot.  If such\n   records exist where\
    \ there is a configured replay, the publisher MUST\n   send the time of the event\
    \ record immediately preceding the\n   \"replay-start-time\" in the \"replay-previous-event-time\"\
    \ leaf.\n   Through the existence of the \"replay-previous-event-time\", the\n\
    \   receiver will know that earlier events prior to reboot exist.  In\n   addition,\
    \ if the subscriber was previously receiving event records\n   with the same subscription\
    \ \"id\", the receiver can determine if there\n   was a time gap where records\
    \ generated on the publisher were not\n   successfully received.  And with this\
    \ information, the receiver may\n   choose to dynamically subscribe to retrieve\
    \ any event records placed\n   in the event stream before the most recent boot\
    \ time.\n   All other replay functionality remains the same as with dynamic\n\
    \   subscriptions as described in Section 2.4.2.1.\n"
- title: 2.5.7.  Transport Connectivity for a Configured Subscription
  contents:
  - "2.5.7.  Transport Connectivity for a Configured Subscription\n   This specification\
    \ is transport independent.  However, supporting a\n   configured subscription\
    \ will often require the establishment of\n   transport connectivity.  And the\
    \ parameters used for this transport\n   connectivity establishment are transport\
    \ specific.  As a result, the\n   YANG module defined in Section 4 is not able\
    \ to directly define and\n   expose these transport parameters.\n   It is necessary\
    \ for an implementation to support the connection\n   establishment process. \
    \ To support this function, the YANG data model\n   defined in this document includes\
    \ a node where transport-specific\n   parameters for a particular receiver may\
    \ be augmented.  This node is\n   \"/subscriptions/subscription/receivers/receiver\"\
    .  By augmenting\n   transport parameters from this node, system developers are\
    \ able to\n   incorporate the YANG objects necessary to support the transport\n\
    \   connectivity establishment process.\n   The result of this is the following\
    \ requirement.  A publisher\n   supporting the feature \"configured\" MUST also\
    \ support at least one\n   YANG data model that augments transport connectivity\
    \ parameters on\n   \"/subscriptions/subscription/receivers/receiver\".  For an\
    \ example of\n   such an augmentation, see Appendix A.\n"
- title: 2.6.  Event Record Delivery
  contents:
  - "2.6.  Event Record Delivery\n   Whether dynamic or configured, once a subscription\
    \ has been set up,\n   the publisher streams event records via notification messages\
    \ per the\n   terms of the subscription.  For dynamic subscriptions, notification\n\
    \   messages are sent over the session used to establish the\n   subscription.\
    \  For configured subscriptions, notification messages\n   are sent over the connections\
    \ specified by the transport and each\n   receiver of a configured subscription.\n\
    \   A notification message is sent to a receiver when an event record is\n   not\
    \ blocked by either the specified filter criteria or receiver\n   permissions.\
    \  This notification message MUST include an <eventTime>\n   object, as shown\
    \ in [RFC5277], Section 4.  This <eventTime> MUST be\n   at the top level of a\
    \ YANG structured event record.\n   The following example of XML [W3C.REC-xml-20081126],\
    \ adapted from\n   Section 4.2.10 of [RFC7950], illustrates a compliant message:\n\
    \      <notification\n             xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n          <eventTime>2007-09-01T10:00:00Z</eventTime>\n          <link-failure\
    \ xmlns=\"https://acme.example.com/system\">\n              <if-name>so-1/2/3.0</if-name>\n\
    \              <if-admin-status>up</if-admin-status>\n              <if-oper-status>down</if-oper-status>\n\
    \          </link-failure>\n      </notification>\n                Figure 10:\
    \ Subscribed Notification Message\n   [RFC5277], Section 2.2.1 states that a notification\
    \ message is to be\n   sent to a subscriber that initiated a <create-subscription>.\
    \  With\n   this document, this statement from [RFC5277] should be more broadly\n\
    \   interpreted to mean that notification messages can also be sent to a\n   subscriber\
    \ that initiated an \"establish-subscription\" or to a\n   configured receiver\
    \ that has been sent a \"subscription-started\".\n   When a dynamic subscription\
    \ has been started or modified with\n   \"establish-subscription\" or \"modify-subscription\"\
    , respectively,\n   event records matching the newly applied filter criteria MUST\
    \ NOT be\n   sent until after the RPC reply has been sent.\n   When a configured\
    \ subscription has been started or modified, event\n   records matching the newly\
    \ applied filter criteria MUST NOT be sent\n   until after the \"subscription-started\"\
    \ or \"subscription-modified\"\n   notification has been sent, respectively.\n"
- title: 2.7.  Subscription State Change Notifications
  contents:
  - "2.7.  Subscription State Change Notifications\n   In addition to sending event\
    \ records to receivers, a publisher MUST\n   also send subscription state change\
    \ notifications when events related\n   to subscription management have occurred.\n\
    \   Subscription state change notifications are unlike other\n   notifications\
    \ in that they are never included in any event stream.\n   Instead, they are inserted\
    \ (as defined in this section) into the\n   sequence of notification messages\
    \ sent to a particular receiver.\n   Subscription state change notifications cannot\
    \ be dropped or filtered\n   out, they cannot be stored in replay buffers, and\
    \ they are delivered\n   only to impacted receivers of a subscription.  The identification\
    \ of\n   subscription state change notifications is easy to separate from\n  \
    \ other notification messages through the use of the YANG extension\n   \"subscription-state-notif\"\
    .  This extension tags a notification as a\n   subscription state change notification.\n\
    \   The complete set of subscription state change notifications is\n   described\
    \ in the following subsections.\n"
- title: 2.7.1.  "subscription-started"
  contents:
  - "2.7.1.  \"subscription-started\"\n   This notification indicates that a configured\
    \ subscription has\n   started, and event records may be sent.  Included in this\n\
    \   subscription state change notification are all the parameters of the\n   subscription,\
    \ except for (1) transport connection information for one\n   or more receivers\
    \ and (2) origin information indicating where\n   notification messages will egress\
    \ the publisher.  Note that if a\n   referenced filter from the \"filters\" container\
    \ has been used in the\n   subscription, the notification still provides the contents\
    \ of that\n   referenced filter under the \"within-subscription\" subtree.\n \
    \  Note that for dynamic subscriptions, no \"subscription-started\"\n   notifications\
    \ are ever sent.\n   Below is a tree diagram for \"subscription-started\".  All\
    \ objects\n   contained in this tree are described in the YANG module in Section\
    \ 4.\n       +---n subscription-started {configured}?\n          +--ro id\n  \
    \        |       subscription-id\n          +--ro (target)\n          |  +--:(stream)\n\
    \          |     +--ro (stream-filter)?\n          |     |  +--:(by-reference)\n\
    \          |     |  |  +--ro stream-filter-name\n          |     |  |        \
    \  stream-filter-ref\n          |     |  +--:(within-subscription)\n         \
    \ |     |     +--ro (filter-spec)?\n          |     |        +--:(stream-subtree-filter)\n\
    \          |     |        |  +--ro stream-subtree-filter?   <anydata>\n      \
    \    |     |        |          {subtree}?\n          |     |        +--:(stream-xpath-filter)\n\
    \          |     |           +--ro stream-xpath-filter?     yang:xpath1.0\n  \
    \        |     |                   {xpath}?\n          |     +--ro stream    \
    \                           stream-ref\n          |     +--ro replay-start-time?\n\
    \          |     |       yang:date-and-time {replay}?\n          |     +--ro replay-previous-event-time?\n\
    \          |             yang:date-and-time {replay}?\n          +--ro stop-time?\n\
    \          |       yang:date-and-time\n          +--ro dscp?                 \
    \                     inet:dscp\n          |       {dscp}?\n          +--ro weighting?\
    \                                 uint8 {qos}?\n          +--ro dependency?\n\
    \          |       subscription-id {qos}?\n          +--ro transport?        \
    \                         transport\n          |       {configured}?\n       \
    \   +--ro encoding?                                  encoding\n          +--ro\
    \ purpose?                                   string\n                  {configured}?\n\
    \        Figure 11: \"subscription-started\" Notification Tree Diagram\n"
- title: 2.7.2.  "subscription-modified"
  contents:
  - "2.7.2.  \"subscription-modified\"\n   This notification indicates that a subscription\
    \ has been modified by\n   configuration operations.  It is delivered directly\
    \ after the last\n   event records processed using the previous subscription parameters,\n\
    \   and before any event records processed after the modification.\n   Below is\
    \ a tree diagram for \"subscription-modified\".  All objects\n   contained in\
    \ this tree are described in the YANG module in Section 4.\n       +---n subscription-modified\n\
    \          +--ro id\n          |       subscription-id\n          +--ro (target)\n\
    \          |  +--:(stream)\n          |     +--ro (stream-filter)?\n         \
    \ |     |  +--:(by-reference)\n          |     |  |  +--ro stream-filter-name\n\
    \          |     |  |          stream-filter-ref\n          |     |  +--:(within-subscription)\n\
    \          |     |     +--ro (filter-spec)?\n          |     |        +--:(stream-subtree-filter)\n\
    \          |     |        |  +--ro stream-subtree-filter?   <anydata>\n      \
    \    |     |        |          {subtree}?\n          |     |        +--:(stream-xpath-filter)\n\
    \          |     |           +--ro stream-xpath-filter?     yang:xpath1.0\n  \
    \        |     |                   {xpath}?\n          |     +--ro stream    \
    \                           stream-ref\n          |     +--ro replay-start-time?\n\
    \          |             yang:date-and-time {replay}?\n          +--ro stop-time?\n\
    \          |       yang:date-and-time\n          +--ro dscp?                 \
    \                     inet:dscp\n          |       {dscp}?\n          +--ro weighting?\
    \                                 uint8 {qos}?\n          +--ro dependency?\n\
    \          |       subscription-id {qos}?\n          +--ro transport?        \
    \                         transport\n          |       {configured}?\n       \
    \   +--ro encoding?                                  encoding\n          +--ro\
    \ purpose?                                   string\n                  {configured}?\n\
    \       Figure 12: \"subscription-modified\" Notification Tree Diagram\n   A publisher\
    \ most often sends this notification directly after the\n   modification of any\
    \ configuration parameters impacting a configured\n   subscription.  But it may\
    \ also be sent at two other times:\n   1.  If a configured subscription has been\
    \ modified during the\n       suspension of a receiver, the notification will\
    \ be delayed until\n       the receiver's suspension is lifted.  In this situation,\
    \ the\n       notification indicates that the subscription has been both\n   \
    \    modified and resumed.\n   2.  A \"subscription-modified\" subscription state\
    \ change notification\n       MUST be sent if the contents of the filter identified\
    \ by the\n       subscription's \"stream-filter-ref\" leaf have changed.  This\
    \ state\n       change notification is to be sent for a filter change impacting\n\
    \       any active receivers of a configured or dynamic subscription.\n"
- title: 2.7.3.  "subscription-terminated"
  contents:
  - "2.7.3.  \"subscription-terminated\"\n   This notification indicates that no further\
    \ event records for this\n   subscription should be expected from the publisher.\
    \  A publisher may\n   terminate the sending of event records to a receiver for\
    \ the\n   following reasons:\n   1.  Configuration that removes a configured subscription,\
    \ or a\n       \"kill-subscription\" RPC that ends a dynamic subscription.  These\n\
    \       are identified via the reason \"no-such-subscription\".\n   2.  A referenced\
    \ filter is no longer accessible.  This reason is\n       identified by the \"\
    filter-unavailable\" identity.\n   3.  The event stream referenced by a subscription\
    \ is no longer\n       accessible by the receiver.  This reason is identified\
    \ by the\n       \"stream-unavailable\" identity.\n   4.  A suspended subscription\
    \ has exceeded some timeout.  This reason\n       is identified by the \"suspension-timeout\"\
    \ identity.\n   Each reason listed above derives from the \"subscription-terminated-\n\
    \   reason\" base identity specified in the YANG data model in this\n   document.\n\
    \   Below is a tree diagram for \"subscription-terminated\".  All objects\n  \
    \ contained in this tree are described in the YANG module in Section 4.\n    \
    \   +---n subscription-terminated\n          +--ro id        subscription-id\n\
    \          +--ro reason    identityref\n      Figure 13: \"subscription-terminated\"\
    \ Notification Tree Diagram\n   Note: This subscription state change notification\
    \ MUST be sent to a\n   dynamic subscription's receiver when the subscription\
    \ ends\n   unexpectedly.  This might happen when a \"kill-subscription\" RPC is\n\
    \   successful or when some other event, not including reaching the\n   subscription's\
    \ \"stop-time\", results in a publisher choosing to end\n   the subscription.\n"
- title: 2.7.4.  "subscription-suspended"
  contents:
  - "2.7.4.  \"subscription-suspended\"\n   This notification indicates that a publisher\
    \ has suspended the\n   sending of event records to a receiver and also indicates\
    \ the\n   possible loss of events.  Suspension happens when capacity\n   constraints\
    \ stop a publisher from serving a valid subscription.  The\n   two conditions\
    \ where this is possible are:\n   1.  \"insufficient-resources\", when a publisher\
    \ is unable to produce\n       the requested event stream of notification messages,\
    \ and\n   2.  \"unsupportable-volume\", when the bandwidth needed to get\n   \
    \    generated notification messages to a receiver exceeds a\n       threshold.\n\
    \   These conditions are encoded in the \"reason\" object.  No further\n   notifications\
    \ will be sent until the subscription resumes or is\n   terminated.\n   Below\
    \ is a tree diagram for \"subscription-suspended\".  All objects\n   contained\
    \ in this tree are described in the YANG module in Section 4.\n       +---n subscription-suspended\n\
    \          +--ro id        subscription-id\n          +--ro reason    identityref\n\
    \       Figure 14: \"subscription-suspended\" Notification Tree Diagram\n"
- title: 2.7.5.  "subscription-resumed"
  contents:
  - "2.7.5.  \"subscription-resumed\"\n   This notification indicates that a previously\
    \ suspended subscription\n   has been resumed under the unmodified terms previously\
    \ in place.\n   Subscribed event records generated after the issuance of this\n\
    \   subscription state change notification may now be sent.\n   Below is a tree\
    \ diagram for \"subscription-resumed\".  All objects\n   contained in this tree\
    \ are described in the YANG module in Section 4.\n       +---n subscription-resumed\n\
    \          +--ro id    subscription-id\n        Figure 15: \"subscription-resumed\"\
    \ Notification Tree Diagram\n"
- title: 2.7.6.  "subscription-completed"
  contents:
  - "2.7.6.  \"subscription-completed\"\n   This notification indicates that a subscription\
    \ that includes a\n   \"stop-time\" has successfully finished passing event records\
    \ upon\n   reaching that time.\n   Below is a tree diagram for \"subscription-completed\"\
    .  All objects\n   contained in this tree are described in the YANG module in\
    \ Section 4.\n       +---n subscription-completed {configured}?\n          +--ro\
    \ id    subscription-id\n       Figure 16: \"subscription-completed\" Notification\
    \ Tree Diagram\n"
- title: 2.7.7.  "replay-completed"
  contents:
  - "2.7.7.  \"replay-completed\"\n   This notification indicates that all of the\
    \ event records prior to\n   the current time have been passed to a receiver.\
    \  It is sent before\n   any notification messages containing an event record\
    \ with a timestamp\n   later than (1) the \"stop-time\" or (2) the subscription's\
    \ start time.\n   If a subscription does not contain a \"stop-time\" or has a\
    \ \"stop-time\"\n   that has not been reached, then after the \"replay-completed\"\
    \n   notification has been sent, additional event records will be sent in\n  \
    \ sequence as they arise naturally on the publisher.\n   Below is a tree diagram\
    \ for \"replay-completed\".  All objects\n   contained in this tree are described\
    \ in the YANG module in Section 4.\n       +---n replay-completed {replay}?\n\
    \          +--ro id    subscription-id\n          Figure 17: \"replay-completed\"\
    \ Notification Tree Diagram\n"
- title: 2.8.  Subscription Monitoring
  contents:
  - "2.8.  Subscription Monitoring\n   In the operational state datastore, the \"\
    subscriptions\" container\n   maintains the state of all dynamic subscriptions\
    \ as well as all\n   configured subscriptions.  Using datastore retrieval operations\n\
    \   [RFC8641] or subscribing to the \"subscriptions\" container\n   (Section 3.3)\
    \ allows the state of subscriptions and their\n   connectivity to receivers to\
    \ be monitored.\n   Each subscription in the operational state datastore is represented\n\
    \   as a list element.  Included in this list are event counters for each\n  \
    \ receiver, the state of each receiver, and the subscription parameters\n   currently\
    \ in effect.  The appearance of the leaf \"configured-\n   subscription-state\"\
    \ indicates that a particular subscription came\n   into being via configuration.\
    \  This leaf also indicates whether the\n   current state of that subscription\
    \ is \"valid\", \"invalid\", or\n   \"concluded\".\n   To understand the flow\
    \ of event records in a subscription, there are\n   two counters available for\
    \ each receiver.  The first counter is\n   \"sent-event-records\", which shows\
    \ the number of events identified for\n   sending to a receiver.  The second counter\
    \ is \"excluded-event-\n   records\", which shows the number of event records\
    \ not sent to a\n   receiver.  \"excluded-event-records\" shows the combined results\
    \ of\n   both access control and per-subscription filtering.  For configured\n\
    \   subscriptions, counters are reset whenever the subscription's state\n   is\
    \ evaluated as \"valid\" (see (1) in Figure 8).\n   Dynamic subscriptions are\
    \ removed from the operational state\n   datastore once they expire (reaching\
    \ \"stop-time\") or when they are\n   terminated.  While many subscription objects\
    \ are shown as\n   configurable, dynamic subscriptions are only included in the\n\
    \   operational state datastore and as a result are not configurable.\n"
- title: 2.9.  Support for the "ietf-subscribed-notifications" YANG Module
  contents:
  - "2.9.  Support for the \"ietf-subscribed-notifications\" YANG Module\n   Publishers\
    \ supporting this document MUST indicate support of the YANG\n   module \"ietf-subscribed-notifications\"\
    \ in the YANG library of the\n   publisher.  In addition, if supported, the optional\
    \ features\n   \"encode-xml\", \"encode-json\", \"configured\", \"supports-vrf\"\
    , \"qos\",\n   \"xpath\", \"subtree\", \"interface-designation\", \"dscp\", and\
    \ \"replay\"\n   MUST be indicated.\n"
- title: 3.  YANG Data Model Tree Diagrams
  contents:
  - "3.  YANG Data Model Tree Diagrams\n   This section contains tree diagrams for\
    \ nodes defined in Section 4.\n   For tree diagrams of subscription state change\
    \ notifications, see\n   Section 2.7.  For the tree diagrams for the RPCs, see\
    \ Section 2.4.\n"
- title: 3.1.  The "streams" Container
  contents:
  - "3.1.  The \"streams\" Container\n   A publisher maintains a list of available\
    \ event streams as\n   operational data.  This list contains both standardized\
    \ and\n   vendor-specific event streams.  This enables subscribers to discover\n\
    \   what streams a publisher supports.\n   Below is a tree diagram for the \"\
    streams\" container.  All objects\n   contained in this tree are described in\
    \ the YANG module in Section 4.\n     +--ro streams\n        +--ro stream* [name]\n\
    \           +--ro name                        string\n           +--ro description\
    \                 string\n           +--ro replay-support?             empty {replay}?\n\
    \           +--ro replay-log-creation-time    yang:date-and-time\n           |\
    \       {replay}?\n           +--ro replay-log-aged-time?       yang:date-and-time\n\
    \                   {replay}?\n                Figure 18: \"streams\" Container\
    \ Tree Diagram\n"
- title: 3.2.  The "filters" Container
  contents:
  - "3.2.  The \"filters\" Container\n   The \"filters\" container maintains a list\
    \ of all subscription filters\n   that persist outside the lifecycle of a single\
    \ subscription.  This\n   enables predefined filters that may be referenced by\
    \ more than one\n   subscription.\n   Below is a tree diagram for the \"filters\"\
    \ container.  All objects\n   contained in this tree are described in the YANG\
    \ module in Section 4.\n     +--rw filters\n        +--rw stream-filter* [name]\n\
    \           +--rw name                           string\n           +--rw (filter-spec)?\n\
    \              +--:(stream-subtree-filter)\n              |  +--rw stream-subtree-filter?\
    \   <anydata> {subtree}?\n              +--:(stream-xpath-filter)\n          \
    \       +--rw stream-xpath-filter?     yang:xpath1.0 {xpath}?\n              \
    \  Figure 19: \"filters\" Container Tree Diagram\n"
- title: 3.3.  The "subscriptions" Container
  contents:
  - "3.3.  The \"subscriptions\" Container\n   The \"subscriptions\" container maintains\
    \ a list of all subscriptions\n   on a publisher, both configured and dynamic.\
    \  It can be used to\n   retrieve information about the subscriptions that a publisher\
    \ is\n   serving.\n   Below is a tree diagram for the \"subscriptions\" container.\
    \  All\n   objects contained in this tree are described in the YANG module in\n\
    \   Section 4.\n     +--rw subscriptions\n        +--rw subscription* [id]\n \
    \          +--rw id\n           |       subscription-id\n           +--rw (target)\n\
    \           |  +--:(stream)\n           |     +--rw (stream-filter)?\n       \
    \    |     |  +--:(by-reference)\n           |     |  |  +--rw stream-filter-name\n\
    \           |     |  |          stream-filter-ref\n           |     |  +--:(within-subscription)\n\
    \           |     |     +--rw (filter-spec)?\n           |     |        +--:(stream-subtree-filter)\n\
    \           |     |        |  +--rw stream-subtree-filter?   <anydata>\n     \
    \      |     |        |          {subtree}?\n           |     |        +--:(stream-xpath-filter)\n\
    \           |     |           +--rw stream-xpath-filter?\n           |     | \
    \                  yang:xpath1.0 {xpath}?\n           |     +--rw stream     \
    \                          stream-ref\n           |     +--ro replay-start-time?\n\
    \           |     |       yang:date-and-time {replay}?\n           |     +--rw\
    \ configured-replay?                   empty\n           |             {configured,replay}?\n\
    \           +--rw stop-time?\n           |       yang:date-and-time\n        \
    \   +--rw dscp?                                      inet:dscp\n           | \
    \      {dscp}?\n           +--rw weighting?                                 uint8\
    \ {qos}?\n           +--rw dependency?\n           |       subscription-id {qos}?\n\
    \           +--rw transport?                                 transport\n     \
    \      |       {configured}?\n           +--rw encoding?                     \
    \             encoding\n           +--rw purpose?                            \
    \       string\n           |       {configured}?\n           +--rw (notification-message-origin)?\
    \ {configured}?\n           |  +--:(interface-originated)\n           |  |  +--rw\
    \ source-interface?\n           |  |          if:interface-ref {interface-designation}?\n\
    \           |  +--:(address-originated)\n           |     +--rw source-vrf?\n\
    \           |     |       -> /ni:network-instances/network-instance/name\n   \
    \        |     |       {supports-vrf}?\n           |     +--rw source-address?\n\
    \           |             inet:ip-address-no-zone\n           +--ro configured-subscription-state?\
    \             enumeration\n           |       {configured}?\n           +--rw\
    \ receivers\n              +--rw receiver* [name]\n                 +--rw name\
    \                      string\n                 +--ro sent-event-records?\n  \
    \               |       yang:zero-based-counter64\n                 +--ro excluded-event-records?\n\
    \                 |       yang:zero-based-counter64\n                 +--ro state\
    \                     enumeration\n                 +---x reset {configured}?\n\
    \                    +--ro output\n                       +--ro time    yang:date-and-time\n\
    \             Figure 20: \"subscriptions\" Container Tree Diagram\n"
- title: 4.  Event Notification Subscription YANG Module
  contents:
  - "4.  Event Notification Subscription YANG Module\n   This module imports typedefs\
    \ from [RFC6991], [RFC8343], [RFC8341],\n   [RFC8529], and [RFC8040].  It references\
    \ [RFC6241], [XPATH] (\"XML\n   Path Language (XPath) Version 1.0\"), [RFC7049],\
    \ [RFC8259], [RFC7950],\n   [RFC7951], and [RFC7540].\n"
- title: <CODE BEGINS> file "ietf-subscribed-notifications@2019-09-09.yang"
  contents:
  - '<CODE BEGINS> file "ietf-subscribed-notifications@2019-09-09.yang"

    '
- title: module ietf-subscribed-notifications {
  contents:
  - "module ietf-subscribed-notifications {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\"\
    ;\n  prefix sn;\n  import ietf-inet-types {\n    prefix inet;\n    reference\n\
    \      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-interfaces {\n\
    \    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface\
    \ Management\";\n  }\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n\
    \      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import\
    \ ietf-network-instance {\n    prefix ni;\n    reference\n      \"RFC 8529: YANG\
    \ Data Model for Network Instances\";\n  }\n  import ietf-restconf {\n    prefix\
    \ rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-types\
    \ {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\"\
    ;\n  }\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\"\
    ;\n  contact\n    \"WG Web:  <https:/datatracker.ietf.org/wg/netconf/>\n     WG\
    \ List: <mailto:netconf@ietf.org>\n     Author:  Alexander Clemm\n           \
    \   <mailto:ludwig@clemm.org>\n     Author:  Eric Voit\n              <mailto:evoit@cisco.com>\n\
    \     Author:  Alberto Gonzalez Prieto\n              <mailto:alberto.gonzalez@microsoft.com>\n\
    \     Author:  Einar Nilsen-Nygaard\n              <mailto:einarnn@cisco.com>\n\
    \     Author:  Ambika Prasad Tripathy\n              <mailto:ambtripa@cisco.com>\"\
    ;\n  description\n    \"This module defines a YANG data model for subscribing\
    \ to event\n     records and receiving matching content in notification messages.\n\
    \     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT',\
    \ 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL'\
    \ in this document are to be interpreted as\n     described in BCP 14 (RFC 2119)\
    \ (RFC 8174) when, and only when,\n     they appear in all capitals, as shown\
    \ here.\n     Copyright (c) 2019 IETF Trust and the persons identified as\n  \
    \   authors of the code.  All rights reserved.\n     Redistribution and use in\
    \ source and binary forms, with or\n     without modification, is permitted pursuant\
    \ to, and subject to\n     the license terms contained in, the Simplified BSD\
    \ License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\
    \     This version of this YANG module is part of RFC 8639; see the\n     RFC\
    \ itself for full legal notices.\";\n  revision 2019-09-09 {\n    description\n\
    \      \"Initial version.\";\n    reference\n      \"RFC 8639: A YANG Data Model\
    \ for Subscriptions to\n                 Event Notifications\";\n  }\n  /*\n \
    \  * FEATURES\n   */\n  feature configured {\n    description\n      \"This feature\
    \ indicates that configuration of subscriptions is\n       supported.\";\n  }\n\
    \  feature dscp {\n    description\n      \"This feature indicates that a publisher\
    \ supports the ability\n       to set the Differentiated Services Code Point (DSCP)\
    \ value in\n       outgoing packets.\";\n  }\n  feature encode-json {\n    description\n\
    \      \"This feature indicates that JSON encoding of notification\n       messages\
    \ is supported.\";\n  }\n  feature encode-xml {\n    description\n      \"This\
    \ feature indicates that XML encoding of notification\n       messages is supported.\"\
    ;\n  }\n  feature interface-designation {\n    description\n      \"This feature\
    \ indicates that a publisher supports sourcing all\n       receiver interactions\
    \ for a configured subscription from a\n       single designated egress interface.\"\
    ;\n  }\n  feature qos {\n    description\n      \"This feature indicates that\
    \ a publisher supports absolute\n       dependencies of one subscription's traffic\
    \ over another\n       as well as weighted bandwidth sharing between subscriptions.\n\
    \       Both of these are Quality of Service (QoS) features that allow\n     \
    \  differentiated treatment of notification messages between a\n       publisher\
    \ and a specific receiver.\";\n  }\n  feature replay {\n    description\n    \
    \  \"This feature indicates that historical event record replay is\n       supported.\
    \  With replay, it is possible for past event records\n       to be streamed in\
    \ chronological order.\";\n  }\n  feature subtree {\n    description\n      \"\
    This feature indicates support for YANG subtree filtering.\";\n    reference\n\
    \      \"RFC 6241: Network Configuration Protocol (NETCONF),\n               \
    \  Section 6\";\n  }\n  feature supports-vrf {\n    description\n      \"This\
    \ feature indicates that a publisher supports VRF\n       configuration for configured\
    \ subscriptions.  VRF support for\n       dynamic subscriptions does not require\
    \ this feature.\";\n    reference\n      \"RFC 8529: YANG Data Model for Network\
    \ Instances,\n                 Section 6\";\n  }\n  feature xpath {\n    description\n\
    \      \"This feature indicates support for XPath filtering.\";\n    reference\n\
    \      \"XML Path Language (XPath) Version 1.0\n       (https://www.w3.org/TR/1999/REC-xpath-19991116)\"\
    ;\n  }\n  /*\n   * EXTENSIONS\n   */\n  extension subscription-state-notification\
    \ {\n    description\n      \"This statement applies only to notifications.  It\
    \ indicates\n       that the notification is a subscription state change\n   \
    \    notification.  Therefore, it does not participate in a regular\n       event\
    \ stream and does not need to be specifically subscribed\n       to in order to\
    \ be received.  This statement can only occur as\n       a substatement of the\
    \ YANG 'notification' statement.  This\n       statement is not for use outside\
    \ of this YANG module.\";\n  }\n  /*\n   * IDENTITIES\n   */\n  /* Identities\
    \ for RPC and notification errors */\n  identity delete-subscription-error {\n\
    \    description\n      \"Base identity for the problem found while attempting\
    \ to\n       fulfill either a 'delete-subscription' RPC request or a\n       'kill-subscription'\
    \ RPC request.\";\n  }\n  identity establish-subscription-error {\n    description\n\
    \      \"Base identity for the problem found while attempting to\n       fulfill\
    \ an 'establish-subscription' RPC request.\";\n  }\n  identity modify-subscription-error\
    \ {\n    description\n      \"Base identity for the problem found while attempting\
    \ to\n       fulfill a 'modify-subscription' RPC request.\";\n  }\n  identity\
    \ subscription-suspended-reason {\n    description\n      \"Base identity for\
    \ the problem condition communicated to a\n       receiver as part of a 'subscription-suspended'\n\
    \       notification.\";\n  }\n  identity subscription-terminated-reason {\n \
    \   description\n      \"Base identity for the problem condition communicated\
    \ to a\n       receiver as part of a 'subscription-terminated'\n       notification.\"\
    ;\n  }\n  identity dscp-unavailable {\n    base establish-subscription-error;\n\
    \    if-feature \"dscp\";\n    description\n      \"The publisher is unable to\
    \ mark notification messages with\n       prioritization information in a way\
    \ that will be respected\n       during network transit.\";\n  }\n  identity encoding-unsupported\
    \ {\n    base establish-subscription-error;\n    description\n      \"Unable to\
    \ encode notification messages in the desired\n       format.\";\n  }\n  identity\
    \ filter-unavailable {\n    base subscription-terminated-reason;\n    description\n\
    \      \"Referenced filter does not exist.  This means a receiver is\n       referencing\
    \ a filter that doesn't exist or to which it\n       does not have access permissions.\"\
    ;\n  }\n  identity filter-unsupported {\n    base establish-subscription-error;\n\
    \    base modify-subscription-error;\n    description\n      \"Cannot parse syntax\
    \ in the filter.  This failure can be from\n       a syntax error or a syntax\
    \ too complex to be processed by the\n       publisher.\";\n  }\n  identity insufficient-resources\
    \ {\n    base establish-subscription-error;\n    base modify-subscription-error;\n\
    \    base subscription-suspended-reason;\n    description\n      \"The publisher\
    \ does not have sufficient resources to support\n       the requested subscription.\
    \  An example might be that\n       allocated CPU is too limited to generate the\
    \ desired set of\n       notification messages.\";\n  }\n  identity no-such-subscription\
    \ {\n    base modify-subscription-error;\n    base delete-subscription-error;\n\
    \    base subscription-terminated-reason;\n    description\n      \"Referenced\
    \ subscription doesn't exist.  This may be as a\n       result of a nonexistent\
    \ subscription ID, an ID that belongs to\n       another subscriber, or an ID\
    \ for a configured subscription.\";\n  }\n  identity replay-unsupported {\n  \
    \  base establish-subscription-error;\n    if-feature \"replay\";\n    description\n\
    \      \"Replay cannot be performed for this subscription.  This means\n     \
    \  the publisher will not provide the requested historic\n       information from\
    \ the event stream via replay to this\n       receiver.\";\n  }\n  identity stream-unavailable\
    \ {\n    base subscription-terminated-reason;\n    description\n      \"Not a\
    \ subscribable event stream.  This means the referenced\n       event stream is\
    \ not available for subscription by the\n       receiver.\";\n  }\n  identity\
    \ suspension-timeout {\n    base subscription-terminated-reason;\n    description\n\
    \      \"Termination of a previously suspended subscription.  The\n       publisher\
    \ has eliminated the subscription, as it exceeded a\n       time limit for suspension.\"\
    ;\n  }\n  identity unsupportable-volume {\n    base subscription-suspended-reason;\n\
    \    description\n      \"The publisher does not have the network bandwidth needed\
    \ to\n       get the volume of generated information intended for a\n       receiver.\"\
    ;\n  }\n  /* Identities for encodings */\n  identity configurable-encoding {\n\
    \    description\n      \"If a transport identity derives from this identity,\
    \ it means\n       that it supports configurable encodings.  An example of a\n\
    \       configurable encoding might be a new identity such as\n       'encode-cbor'.\
    \  Such an identity could use\n       'configurable-encoding' as its base.  This\
    \ would allow a\n       dynamic subscription encoded in JSON (RFC 8259) to request\n\
    \       that notification messages be encoded via the Concise Binary\n       Object\
    \ Representation (CBOR) (RFC 7049).  Further details for\n       any specific\
    \ configurable encoding would be explored in a\n       transport document based\
    \ on this specification.\";\n    reference\n      \"RFC 8259: The JavaScript Object\
    \ Notation (JSON) Data\n                 Interchange Format\n       RFC 7049:\
    \ Concise Binary Object Representation (CBOR)\";\n  }\n  identity encoding {\n\
    \    description\n      \"Base identity to represent data encodings.\";\n  }\n\
    \  identity encode-xml {\n    base encoding;\n    if-feature \"encode-xml\";\n\
    \    description\n      \"Encode data using XML as described in RFC 7950.\";\n\
    \    reference\n      \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n  }\n\
    \  identity encode-json {\n    base encoding;\n    if-feature \"encode-json\"\
    ;\n    description\n      \"Encode data using JSON as described in RFC 7951.\"\
    ;\n    reference\n      \"RFC 7951: JSON Encoding of Data Modeled with YANG\"\
    ;\n  }\n  /* Identities for transports */\n  identity transport {\n    description\n\
    \      \"An identity that represents the underlying mechanism for\n       passing\
    \ notification messages.\";\n  }\n  /*\n   * TYPEDEFs\n   */\n  typedef encoding\
    \ {\n    type identityref {\n      base encoding;\n    }\n    description\n  \
    \    \"Specifies a data encoding, e.g., for a data subscription.\";\n  }\n  typedef\
    \ stream-filter-ref {\n    type leafref {\n      path \"/sn:filters/sn:stream-filter/sn:name\"\
    ;\n    }\n    description\n      \"This type is used to reference an event stream\
    \ filter.\";\n  }\n  typedef stream-ref {\n    type leafref {\n      path \"/sn:streams/sn:stream/sn:name\"\
    ;\n    }\n    description\n      \"This type is used to reference a system-provided\n\
    \       event stream.\";\n  }\n  typedef subscription-id {\n    type uint32;\n\
    \    description\n      \"A type for subscription identifiers.\";\n  }\n  typedef\
    \ transport {\n    type identityref {\n      base transport;\n    }\n    description\n\
    \      \"Specifies the transport used to send notification messages\n       to\
    \ a receiver.\";\n  }\n  /*\n   * GROUPINGS\n   */\n  grouping stream-filter-elements\
    \ {\n    description\n      \"This grouping defines the base for filters applied\
    \ to event\n       streams.\";\n    choice filter-spec {\n      description\n\
    \        \"The content filter specification for this request.\";\n      anydata\
    \ stream-subtree-filter {\n        if-feature \"subtree\";\n        description\n\
    \          \"Event stream evaluation criteria encoded in the syntax of\n     \
    \      a subtree filter as defined in RFC 6241, Section 6.\n           The subtree\
    \ filter is applied to the representation of\n           individual, delineated\
    \ event records as contained in the\n           event stream.\n           If the\
    \ subtree filter returns a non-empty node set, the\n           filter matches\
    \ the event record, and the event record is\n           included in the notification\
    \ message sent to the\n           receivers.\";\n        reference\n         \
    \ \"RFC 6241: Network Configuration Protocol (NETCONF),\n                    \
    \ Section 6\";\n      }\n      leaf stream-xpath-filter {\n        if-feature\
    \ \"xpath\";\n        type yang:xpath1.0;\n        description\n          \"Event\
    \ stream evaluation criteria encoded in the syntax of\n           an XPath 1.0\
    \ expression.\n           The XPath expression is evaluated on the representation\
    \ of\n           individual, delineated event records as contained in\n      \
    \     the event stream.\n           The result of the XPath expression is converted\
    \ to a\n           boolean value using the standard XPath 1.0 rules.  If the\n\
    \           boolean value is 'true', the filter matches the event\n          \
    \ record, and the event record is included in the\n           notification message\
    \ sent to the receivers.\n           The expression is evaluated in the following\
    \ XPath\n           context:\n              o  The set of namespace declarations\
    \ is the set of\n                 prefix and namespace pairs for all YANG modules\n\
    \                 implemented by the server, where the prefix is the\n       \
    \          YANG module name and the namespace is as defined by\n             \
    \    the 'namespace' statement in the YANG module.\n                 If the leaf\
    \ is encoded in XML, all namespace\n                 declarations in scope on\
    \ the 'stream-xpath-filter'\n                 leaf element are added to the set\
    \ of namespace\n                 declarations.  If a prefix found in the XML is\n\
    \                 already present in the set of namespace\n                 declarations,\
    \ the namespace in the XML is used.\n              o  The set of variable bindings\
    \ is empty.\n              o  The function library is comprised of the core\n\
    \                 function library and the XPath functions defined in\n      \
    \           Section 10 in RFC 7950.\n              o  The context node is the\
    \ root node.\";\n        reference\n          \"XML Path Language (XPath) Version\
    \ 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n          \
    \ RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section\
    \ 10\";\n      }\n    }\n  }\n  grouping update-qos {\n    description\n     \
    \ \"This grouping describes QoS information concerning a\n       subscription.\
    \  This information is passed to lower layers\n       for transport prioritization\
    \ and treatment.\";\n    leaf dscp {\n      if-feature \"dscp\";\n      type inet:dscp;\n\
    \      default \"0\";\n      description\n        \"The desired network transport\
    \ priority level.  This is the\n         priority set on notification messages\
    \ encapsulating the\n         results of the subscription.  This transport priority\
    \ is\n         shared for all receivers of a given subscription.\";\n    }\n \
    \   leaf weighting {\n      if-feature \"qos\";\n      type uint8 {\n        range\
    \ \"0 .. 255\";\n      }\n      description\n        \"Relative weighting for\
    \ a subscription.  Larger weights get\n         more resources.  Allows an underlying\
    \ transport layer to\n         perform informed load-balance allocations between\
    \ various\n         subscriptions.\";\n      reference\n        \"RFC 7540: Hypertext\
    \ Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.2\";\n\
    \    }\n    leaf dependency {\n      if-feature \"qos\";\n      type subscription-id;\n\
    \      description\n        \"Provides the 'subscription-id' of a parent subscription.\n\
    \         The parent subscription has absolute precedence should\n         that\
    \ parent have push updates ready to egress the publisher.\n         In other words,\
    \ there should be no streaming of objects from\n         the current subscription\
    \ if the parent has something ready\n         to push.\n         If a dependency\
    \ is asserted via configuration or via an RPC\n         but the referenced 'subscription-id'\
    \ does not exist, the\n         dependency is silently discarded.  If a referenced\n\
    \         subscription is deleted, this dependency is removed.\";\n      reference\n\
    \        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n       \
    \            Section 5.3.1\";\n    }\n  }\n  grouping subscription-policy-modifiable\
    \ {\n    description\n      \"This grouping describes all objects that may be\
    \ changed\n       in a subscription.\";\n    choice target {\n      mandatory\
    \ true;\n      description\n        \"Identifies the source of information against\
    \ which a\n         subscription is being applied as well as specifics on the\n\
    \         subset of information desired from that source.\";\n      case stream\
    \ {\n        choice stream-filter {\n          description\n            \"An event\
    \ stream filter can be applied to a subscription.\n             That filter will\
    \ either come referenced from a global\n             list or be provided in the\
    \ subscription itself.\";\n          case by-reference {\n            description\n\
    \              \"Apply a filter that has been configured separately.\";\n    \
    \        leaf stream-filter-name {\n              type stream-filter-ref;\n  \
    \            mandatory true;\n              description\n                \"References\
    \ an existing event stream filter that is\n                 to be applied to an\
    \ event stream for the\n                 subscription.\";\n            }\n   \
    \       }\n          case within-subscription {\n            description\n   \
    \           \"A local definition allows a filter to have the same\n          \
    \     lifecycle as the subscription.\";\n            uses stream-filter-elements;\n\
    \          }\n        }\n      }\n    }\n    leaf stop-time {\n      type yang:date-and-time;\n\
    \      description\n        \"Identifies a time after which notification messages\
    \ for a\n         subscription should not be sent.  If 'stop-time' is not\n  \
    \       present, the notification messages will continue until the\n         subscription\
    \ is terminated.  If 'replay-start-time' exists,\n         'stop-time' must be\
    \ for a subsequent time.  If\n         'replay-start-time' doesn't exist, 'stop-time',\
    \ when\n         established, must be for a future time.\";\n    }\n  }\n  grouping\
    \ subscription-policy-dynamic {\n    description\n      \"This grouping describes\
    \ the only information concerning a\n       subscription that can be passed over\
    \ the RPCs defined in this\n       data model.\";\n    uses subscription-policy-modifiable\
    \ {\n      augment \"target/stream\" {\n        description\n          \"Adds\
    \ additional objects that can be modified by an RPC.\";\n        leaf stream {\n\
    \          type stream-ref {\n            require-instance false;\n          }\n\
    \          mandatory true;\n          description\n            \"Indicates the\
    \ event stream to be considered for\n             this subscription.\";\n    \
    \    }\n        leaf replay-start-time {\n          if-feature \"replay\";\n \
    \         type yang:date-and-time;\n          config false;\n          description\n\
    \            \"Used to trigger the 'replay' feature for a dynamic\n          \
    \   subscription, where event records that are selected\n             need to\
    \ be at or after the specified starting time.  If\n             'replay-start-time'\
    \ is not present, this is not a replay\n             subscription and event record\
    \ push should start\n             immediately.  It is never valid to specify start\
    \ times\n             that are later than or equal to the current time.\";\n \
    \       }\n      }\n    }\n    uses update-qos;\n  }\n  grouping subscription-policy\
    \ {\n    description\n      \"This grouping describes the full set of policy information\n\
    \       concerning both dynamic and configured subscriptions, with the\n     \
    \  exclusion of both receivers and networking information\n       specific to\
    \ the publisher, such as what interface should be\n       used to transmit notification\
    \ messages.\";\n    uses subscription-policy-dynamic;\n    leaf transport {\n\
    \      if-feature \"configured\";\n      type transport;\n      description\n\
    \        \"For a configured subscription, this leaf specifies the\n         transport\
    \ used to deliver messages destined for all\n         receivers of that subscription.\"\
    ;\n    }\n    leaf encoding {\n      when 'not(../transport) or derived-from(../transport,\n\
    \      \"sn:configurable-encoding\")';\n      type encoding;\n      description\n\
    \        \"The type of encoding for notification messages.  For a\n         dynamic\
    \ subscription, if not included as part of an\n         'establish-subscription'\
    \ RPC, the encoding will be populated\n         with the encoding used by that\
    \ RPC.  For a configured\n         subscription, if not explicitly configured,\
    \ the encoding\n         will be the default encoding for an underlying transport.\"\
    ;\n    }\n    leaf purpose {\n      if-feature \"configured\";\n      type string;\n\
    \      description\n        \"Open text allowing a configuring entity to embed\
    \ the\n         originator or other specifics of this subscription.\";\n    }\n\
    \  }\n  /*\n   * RPCs\n   */\n  rpc establish-subscription {\n    description\n\
    \      \"This RPC allows a subscriber to create (and possibly\n       negotiate)\
    \ a subscription on its own behalf.  If successful,\n       the subscription remains\
    \ in effect for the duration of the\n       subscriber's association with the\
    \ publisher or until the\n       subscription is terminated.  If an error occurs\
    \ or the\n       publisher cannot meet the terms of a subscription, an RPC\n \
    \      error is returned, and the subscription is not created.\n       In that\
    \ case, the RPC reply's 'error-info' MAY include\n       suggested parameter settings\
    \ that would have a higher\n       likelihood of succeeding in a subsequent\n\
    \       'establish-subscription' request.\";\n    input {\n      uses subscription-policy-dynamic;\n\
    \      leaf encoding {\n        type encoding;\n        description\n        \
    \  \"The type of encoding for the subscribed data.  If not\n           included\
    \ as part of the RPC, the encoding MUST be set by\n           the publisher to\
    \ be the encoding used by this RPC.\";\n      }\n    }\n    output {\n      leaf\
    \ id {\n        type subscription-id;\n        mandatory true;\n        description\n\
    \          \"Identifier used for this subscription.\";\n      }\n      leaf replay-start-time-revision\
    \ {\n        if-feature \"replay\";\n        type yang:date-and-time;\n      \
    \  description\n          \"If a replay has been requested, this object represents\n\
    \           the earliest time covered by the event buffer for the\n          \
    \ requested event stream.  The value of this object is the\n           'replay-log-aged-time'\
    \ if it exists.  Otherwise, it is\n           the 'replay-log-creation-time'.\
    \  All buffered event\n           records after this time will be replayed to\
    \ a receiver.\n           This object will only be sent if the starting time has\n\
    \           been revised to be later than the time requested by the\n        \
    \   subscriber.\";\n      }\n    }\n  }\n  rc:yang-data establish-subscription-stream-error-info\
    \ {\n    container establish-subscription-stream-error-info {\n      description\n\
    \        \"If any 'establish-subscription' RPC parameters are\n         unsupportable\
    \ against the event stream, a subscription\n         is not created and the RPC\
    \ error response MUST indicate the\n         reason why the subscription failed\
    \ to be created.  This\n         yang-data MAY be inserted as structured data\
    \ in a\n         subscription's RPC error response to indicate the reason for\n\
    \         the failure.  This yang-data MUST be inserted if hints are\n       \
    \  to be provided back to the subscriber.\";\n      leaf reason {\n        type\
    \ identityref {\n          base establish-subscription-error;\n        }\n   \
    \     description\n          \"Indicates the reason why the subscription has failed\
    \ to\n           be created to a targeted event stream.\";\n      }\n      leaf\
    \ filter-failure-hint {\n        type string;\n        description\n         \
    \ \"Information describing where and/or why a provided\n           filter was\
    \ unsupportable for a subscription.  The\n           syntax and semantics of this\
    \ hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rpc\
    \ modify-subscription {\n    description\n      \"This RPC allows a subscriber\
    \ to modify a dynamic\n       subscription's parameters.  If successful, the changed\n\
    \       subscription parameters remain in effect for the duration of\n       the\
    \ subscription, until the subscription is again modified, or\n       until the\
    \ subscription is terminated.  In the case of an error\n       or an inability\
    \ to meet the modified parameters, the\n       subscription is not modified and\
    \ the original subscription\n       parameters remain in effect.  In that case,\
    \ the RPC error MAY\n       include 'error-info' suggested parameter hints that\
    \ would have\n       a high likelihood of succeeding in a subsequent\n       'modify-subscription'\
    \ request.  A successful\n       'modify-subscription' will return a suspended\
    \ subscription to\n       the 'active' state.\";\n    input {\n      leaf id {\n\
    \        type subscription-id;\n        mandatory true;\n        description\n\
    \          \"Identifier to use for this subscription.\";\n      }\n      uses\
    \ subscription-policy-modifiable;\n    }\n  }\n  rc:yang-data modify-subscription-stream-error-info\
    \ {\n    container modify-subscription-stream-error-info {\n      description\n\
    \        \"This yang-data MAY be provided as part of a subscription's\n      \
    \   RPC error response when there is a failure of a\n         'modify-subscription'\
    \ RPC that has been made against an\n         event stream.  This yang-data MUST\
    \ be used if hints are to\n         be provided back to the subscriber.\";\n \
    \     leaf reason {\n        type identityref {\n          base modify-subscription-error;\n\
    \        }\n        description\n          \"Information in a 'modify-subscription'\
    \ RPC error response\n           that indicates the reason why the subscription\
    \ to an event\n           stream has failed to be modified.\";\n      }\n    \
    \  leaf filter-failure-hint {\n        type string;\n        description\n   \
    \       \"Information describing where and/or why a provided\n           filter\
    \ was unsupportable for a subscription.  The syntax\n           and semantics\
    \ of this hint are\n           implementation specific.\";\n      }\n    }\n \
    \ }\n  rpc delete-subscription {\n    description\n      \"This RPC allows a subscriber\
    \ to delete a subscription that\n       was previously created by that same subscriber\
    \ using the\n       'establish-subscription' RPC.\n       If an error occurs,\
    \ the server replies with an 'rpc-error'\n       where the 'error-info' field\
    \ MAY contain a\n       'delete-subscription-error-info' structure.\";\n    input\
    \ {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n\
    \        description\n          \"Identifier of the subscription that is to be\
    \ deleted.\n           Only subscriptions that were created using\n          \
    \ 'establish-subscription' from the same origin as this RPC\n           can be\
    \ deleted via this RPC.\";\n      }\n    }\n  }\n  rpc kill-subscription {\n \
    \   nacm:default-deny-all;\n    description\n      \"This RPC allows an operator\
    \ to delete a dynamic subscription\n       without restrictions on the originating\
    \ subscriber or\n       underlying transport session.\n       If an error occurs,\
    \ the server replies with an 'rpc-error'\n       where the 'error-info' field\
    \ MAY contain a\n       'delete-subscription-error-info' structure.\";\n    input\
    \ {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n\
    \        description\n          \"Identifier of the subscription that is to be\
    \ deleted.\n           Only subscriptions that were created using\n          \
    \ 'establish-subscription' can be deleted via this RPC.\";\n      }\n    }\n \
    \ }\n  rc:yang-data delete-subscription-error-info {\n    container delete-subscription-error-info\
    \ {\n      description\n        \"If a 'delete-subscription' RPC or a 'kill-subscription'\
    \ RPC\n         fails, the subscription is not deleted and the RPC error\n   \
    \      response MUST indicate the reason for this failure.  This\n         yang-data\
    \ MAY be inserted as structured data in a\n         subscription's RPC error response\
    \ to indicate the reason\n         for the failure.\";\n      leaf reason {\n\
    \        type identityref {\n          base delete-subscription-error;\n     \
    \   }\n        mandatory true;\n        description\n          \"Indicates the\
    \ reason why the subscription has failed to be\n           deleted.\";\n     \
    \ }\n    }\n  }\n  /*\n   * NOTIFICATIONS\n   */\n  notification replay-completed\
    \ {\n    sn:subscription-state-notification;\n    if-feature \"replay\";\n   \
    \ description\n      \"This notification is sent to indicate that all of the replay\n\
    \       notifications have been sent.\";\n    leaf id {\n      type subscription-id;\n\
    \      mandatory true;\n      description\n        \"This references the affected\
    \ subscription.\";\n    }\n  }\n  notification subscription-completed {\n    sn:subscription-state-notification;\n\
    \    if-feature \"configured\";\n    description\n      \"This notification is\
    \ sent to indicate that a subscription has\n       finished passing event records,\
    \ as the 'stop-time' has been\n       reached.\";\n    leaf id {\n      type subscription-id;\n\
    \      mandatory true;\n      description\n        \"This references the gracefully\
    \ completed subscription.\";\n    }\n  }\n  notification subscription-modified\
    \ {\n    sn:subscription-state-notification;\n    description\n      \"This notification\
    \ indicates that a subscription has been\n       modified.  Notification messages\
    \ sent from this point on will\n       conform to the modified terms of the subscription.\
    \  For\n       completeness, this subscription state change notification\n   \
    \    includes both modified and unmodified aspects of a\n       subscription.\"\
    ;\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n\
    \        \"This references the affected subscription.\";\n    }\n    uses subscription-policy\
    \ {\n      refine \"target/stream/stream-filter/within-subscription\" {\n    \
    \    description\n          \"Filter applied to the subscription.  If the\n  \
    \         'stream-filter-name' is populated, the filter in the\n           subscription\
    \ came from the 'filters' container.\n           Otherwise, it is populated in-line\
    \ as part of the\n           subscription.\";\n      }\n    }\n  }\n  notification\
    \ subscription-resumed {\n    sn:subscription-state-notification;\n    description\n\
    \      \"This notification indicates that a subscription that had\n       previously\
    \ been suspended has resumed.  Notifications will\n       once again be sent.\
    \  In addition, a 'subscription-resumed'\n       indicates that no modification\
    \ of parameters has occurred\n       since the last time event records have been\
    \ sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n\
    \      description\n        \"This references the affected subscription.\";\n\
    \    }\n  }\n  notification subscription-started {\n    sn:subscription-state-notification;\n\
    \    if-feature \"configured\";\n    description\n      \"This notification indicates\
    \ that a subscription has started\n       and notifications will now be sent.\"\
    ;\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n\
    \        \"This references the affected subscription.\";\n    }\n    uses subscription-policy\
    \ {\n      refine \"target/stream/replay-start-time\" {\n        description\n\
    \          \"Indicates the time that a replay is using for the\n           streaming\
    \ of buffered event records.  This will be\n           populated with the most\
    \ recent of the following:\n           the event time of the previous event record\
    \ sent to a\n           receiver, the 'replay-log-creation-time', the\n      \
    \     'replay-log-aged-time', or the most recent publisher\n           boot time.\"\
    ;\n      }\n      refine \"target/stream/stream-filter/within-subscription\" {\n\
    \        description\n          \"Filter applied to the subscription.  If the\n\
    \           'stream-filter-name' is populated, the filter in the\n           subscription\
    \ came from the 'filters' container.\n           Otherwise, it is populated in-line\
    \ as part of the\n           subscription.\";\n      }\n      augment \"target/stream\"\
    \ {\n        description\n          \"This augmentation adds additional parameters\
    \ specific to a\n           'subscription-started' notification.\";\n        leaf\
    \ replay-previous-event-time {\n          when '../replay-start-time';\n     \
    \     if-feature \"replay\";\n          type yang:date-and-time;\n          description\n\
    \            \"If there is at least one event in the replay buffer\n         \
    \    prior to 'replay-start-time', this gives the time of\n             the event\
    \ generated immediately prior to the\n             'replay-start-time'.\n    \
    \         If a receiver previously received event records for\n             this\
    \ configured subscription, it can compare this time\n             to the last\
    \ event record previously received.  If the\n             two are not the same\
    \ (perhaps due to a reboot), then a\n             dynamic replay can be initiated\
    \ to acquire any missing\n             event records.\";\n        }\n      }\n\
    \    }\n  }\n  notification subscription-suspended {\n    sn:subscription-state-notification;\n\
    \    description\n      \"This notification indicates that a suspension of the\n\
    \       subscription by the publisher has occurred.  No further\n       notifications\
    \ will be sent until the subscription resumes.\n       This notification shall\
    \ only be sent to receivers of a\n       subscription; it does not constitute\
    \ a general-purpose\n       notification.\";\n    leaf id {\n      type subscription-id;\n\
    \      mandatory true;\n      description\n        \"This references the affected\
    \ subscription.\";\n    }\n    leaf reason {\n      type identityref {\n     \
    \   base subscription-suspended-reason;\n      }\n      mandatory true;\n    \
    \  description\n        \"Identifies the condition that resulted in the suspension.\"\
    ;\n    }\n  }\n  notification subscription-terminated {\n    sn:subscription-state-notification;\n\
    \    description\n      \"This notification indicates that a subscription has\
    \ been\n       terminated.\";\n    leaf id {\n      type subscription-id;\n  \
    \    mandatory true;\n      description\n        \"This references the affected\
    \ subscription.\";\n    }\n    leaf reason {\n      type identityref {\n     \
    \   base subscription-terminated-reason;\n      }\n      mandatory true;\n   \
    \   description\n        \"Identifies the condition that resulted in the termination.\"\
    ;\n    }\n  }\n  /*\n   * DATA NODES\n   */\n  container streams {\n    config\
    \ false;\n    description\n      \"Contains information on the built-in event\
    \ streams provided by\n       the publisher.\";\n    list stream {\n      key\
    \ \"name\";\n      description\n        \"Identifies the built-in event streams\
    \ that are supported by\n         the publisher.\";\n      leaf name {\n     \
    \   type string;\n        description\n          \"A handle for a system-provided\
    \ event stream made up of a\n           sequential set of event records, each\
    \ of which is\n           characterized by its own domain and semantics.\";\n\
    \      }\n      leaf description {\n        type string;\n        description\n\
    \          \"A description of the event stream, including such\n           information\
    \ as the type of event records that are\n           available in this event stream.\"\
    ;\n      }\n      leaf replay-support {\n        if-feature \"replay\";\n    \
    \    type empty;\n        description\n          \"Indicates that event record\
    \ replay is available on this\n           event stream.\";\n      }\n      leaf\
    \ replay-log-creation-time {\n        when '../replay-support';\n        if-feature\
    \ \"replay\";\n        type yang:date-and-time;\n        mandatory true;\n   \
    \     description\n          \"The timestamp of the creation of the log used to\
    \ support\n           the replay function on this event stream.  This time\n \
    \          might be earlier than the earliest available information\n        \
    \   contained in the log.  This object is updated if the log\n           resets\
    \ for some reason.\";\n      }\n      leaf replay-log-aged-time {\n        when\
    \ '../replay-support';\n        if-feature \"replay\";\n        type yang:date-and-time;\n\
    \        description\n          \"The timestamp associated with the last event\
    \ record that\n           has been aged out of the log.  This timestamp identifies\n\
    \           how far back in history this replay log extends, if it\n         \
    \  doesn't extend back to the 'replay-log-creation-time'.\n           This object\
    \ MUST be present if replay is supported and any\n           event records have\
    \ been aged out of the log.\";\n      }\n    }\n  }\n  container filters {\n \
    \   description\n      \"Contains a list of configurable filters that can be applied\
    \ to\n       subscriptions.  This facilitates the reuse of complex filters\n \
    \      once defined.\";\n    list stream-filter {\n      key \"name\";\n     \
    \ description\n        \"A list of preconfigured filters that can be applied to\n\
    \         subscriptions.\";\n      leaf name {\n        type string;\n       \
    \ description\n          \"A name to differentiate between filters.\";\n     \
    \ }\n      uses stream-filter-elements;\n    }\n  }\n  container subscriptions\
    \ {\n    description\n      \"Contains the list of currently active subscriptions,\
    \ i.e.,\n       subscriptions that are currently in effect, used for\n       subscription\
    \ management and monitoring purposes.  This\n       includes subscriptions that\
    \ have been set up via\n       RPC primitives as well as subscriptions that have\
    \ been\n       established via configuration.\";\n    list subscription {\n  \
    \    key \"id\";\n      description\n        \"The identity and specific parameters\
    \ of a subscription.\n         Subscriptions in this list can be created using\
    \ a control\n         channel or RPC or can be established through configuration.\n\
    \         If the 'kill-subscription' RPC or configuration operations\n       \
    \  are used to delete a subscription, a\n         'subscription-terminated' message\
    \ is sent to any active or\n         suspended receivers.\";\n      leaf id {\n\
    \        type subscription-id;\n        description\n          \"Identifier of\
    \ a subscription; unique in a given\n           publisher.\";\n      }\n     \
    \ uses subscription-policy {\n        refine \"target/stream/stream\" {\n    \
    \      description\n            \"Indicates the event stream to be considered\
    \ for this\n             subscription.  If an event stream has been removed\n\
    \             and can no longer be referenced by an active\n             subscription,\
    \ send a 'subscription-terminated'\n             notification with 'stream-unavailable'\
    \ as the reason.\n             If a configured subscription refers to a nonexistent\n\
    \             event stream, move that subscription to the\n             'invalid'\
    \ state.\";\n        }\n        refine \"transport\" {\n          description\n\
    \            \"For a configured subscription, this leaf specifies the\n      \
    \       transport used to deliver messages destined for all\n             receivers\
    \ of that subscription.  This object is\n             mandatory for subscriptions\
    \ in the configuration\n             datastore.  This object (1) is not mandatory\
    \ for dynamic\n             subscriptions in the operational state datastore and\n\
    \             (2) should not be present for other types of dynamic\n         \
    \    subscriptions.\";\n        }\n        augment \"target/stream\" {\n     \
    \     description\n            \"Enables objects to be added to a configured stream\n\
    \             subscription.\";\n          leaf configured-replay {\n         \
    \   if-feature \"configured\";\n            if-feature \"replay\";\n         \
    \   type empty;\n            description\n              \"The presence of this\
    \ leaf indicates that replay for\n               the configured subscription should\
    \ start at the\n               earliest time in the event log or at the publisher\n\
    \               boot time, whichever is later.\";\n          }\n        }\n  \
    \    }\n      choice notification-message-origin {\n        if-feature \"configured\"\
    ;\n        description\n          \"Identifies the egress interface on the publisher\n\
    \           from which notification messages are to be sent.\";\n        case\
    \ interface-originated {\n          description\n            \"When notification\
    \ messages are to egress a specific,\n             designated interface on the\
    \ publisher.\";\n          leaf source-interface {\n            if-feature \"\
    interface-designation\";\n            type if:interface-ref;\n            description\n\
    \              \"References the interface for notification messages.\";\n    \
    \      }\n        }\n        case address-originated {\n          description\n\
    \            \"When notification messages are to depart from a\n             publisher\
    \ using a specific originating address and/or\n             routing context information.\"\
    ;\n          leaf source-vrf {\n            if-feature \"supports-vrf\";\n   \
    \         type leafref {\n              path \"/ni:network-instances/ni:network-instance/ni:name\"\
    ;\n            }\n            description\n              \"VRF from which notification\
    \ messages should egress a\n               publisher.\";\n          }\n      \
    \    leaf source-address {\n            type inet:ip-address-no-zone;\n      \
    \      description\n              \"The source address for the notification messages.\n\
    \               If a source VRF exists but this object doesn't, a\n          \
    \     publisher's default address for that VRF must\n               be used.\"\
    ;\n          }\n        }\n      }\n      leaf configured-subscription-state {\n\
    \        if-feature \"configured\";\n        type enumeration {\n          enum\
    \ valid {\n            value 1;\n            description\n              \"The\
    \ subscription is supportable with its current\n               parameters.\";\n\
    \          }\n          enum invalid {\n            value 2;\n            description\n\
    \              \"The subscription as a whole is unsupportable with its\n     \
    \          current parameters.\";\n          }\n          enum concluded {\n \
    \           value 3;\n            description\n              \"A subscription\
    \ is inactive, as it has hit a\n               stop time.  It no longer has receivers\
    \ in the\n               'active' or 'suspended' state, but the subscription\n\
    \               has not yet been removed from configuration.\";\n          }\n\
    \        }\n        config false;\n        description\n          \"The presence\
    \ of this leaf indicates that the subscription\n           originated from configuration,\
    \ not through a control\n           channel or RPC.  The value indicates the state\
    \ of the\n           subscription as established by the publisher.\";\n      }\n\
    \      container receivers {\n        description\n          \"Set of receivers\
    \ in a subscription.\";\n        list receiver {\n          key \"name\";\n  \
    \        min-elements 1;\n          description\n            \"A host intended\
    \ as a recipient for the notification\n             messages of a subscription.\
    \  For configured\n             subscriptions, transport-specific network parameters\n\
    \             (or a leafref to those parameters) may be augmented to a\n     \
    \        specific receiver in this list.\";\n          leaf name {\n         \
    \   type string;\n            description\n              \"Identifies a unique\
    \ receiver for a subscription.\";\n          }\n          leaf sent-event-records\
    \ {\n            type yang:zero-based-counter64;\n            config false;\n\
    \            description\n              \"The number of event records sent to\
    \ the receiver.  The\n               count is initialized when a dynamic subscription\
    \ is\n               established or when a configured receiver\n             \
    \  transitions to the 'valid' state.\";\n          }\n          leaf excluded-event-records\
    \ {\n            type yang:zero-based-counter64;\n            config false;\n\
    \            description\n              \"The number of event records explicitly\
    \ removed via\n               either an event stream filter or an access control\n\
    \               filter so that they are not passed to a receiver.\n          \
    \     This count is set to zero each time\n               'sent-event-records'\
    \ is initialized.\";\n          }\n          leaf state {\n            type enumeration\
    \ {\n              enum active {\n                value 1;\n                description\n\
    \                  \"The receiver is currently being sent any\n              \
    \     applicable notification messages for the\n                   subscription.\"\
    ;\n              }\n              enum suspended {\n                value 2;\n\
    \                description\n                  \"The receiver state is 'suspended',\
    \ so the\n                   publisher is currently unable to provide\n      \
    \             notification messages for the subscription.\";\n              }\n\
    \              enum connecting {\n                value 3;\n                if-feature\
    \ \"configured\";\n                description\n                  \"A subscription\
    \ has been configured, but a\n                   'subscription-started' subscription\
    \ state change\n                   notification needs to be successfully received\n\
    \                   before notification messages are sent.\n                 \
    \  If the 'reset' action is invoked for a receiver of\n                   an active\
    \ configured subscription, the state\n                   must be moved to 'connecting'.\"\
    ;\n              }\n              enum disconnected {\n                value 4;\n\
    \                if-feature \"configured\";\n                description\n   \
    \               \"A subscription has failed to send a\n                   'subscription-started'\
    \ state change to the\n                   receiver.  Additional connection attempts\
    \ are not\n                   currently being made.\";\n              }\n    \
    \        }\n            config false;\n            mandatory true;\n         \
    \   description\n              \"Specifies the state of a subscription from the\n\
    \               perspective of a particular receiver.  With this\n           \
    \    information, it is possible to determine whether a\n               publisher\
    \ is currently generating notification\n               messages intended for that\
    \ receiver.\";\n          }\n          action reset {\n            if-feature\
    \ \"configured\";\n            description\n              \"Allows the reset of\
    \ this configured subscription's\n               receiver to the 'connecting'\
    \ state.  This enables the\n               connection process to be reinitiated.\"\
    ;\n            output {\n              leaf time {\n                type yang:date-and-time;\n\
    \                mandatory true;\n                description\n              \
    \    \"Time at which a publisher returned the receiver to\n                  \
    \ the 'connecting' state.\";\n              }\n            }\n          }\n  \
    \      }\n      }\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has registered one URI in the \"ns\" subregistry\
    \ of the \"IETF XML\n   Registry\" [RFC3688] maintained at <https://www.iana.org/assignments/\n\
    \   xml-registry>.  The following registration has been made per the\n   format\
    \ in [RFC3688]:\n   URI: urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\n\
    \   Registrant Contact: The NETCONF WG of the IETF.\n   XML: N/A; the requested\
    \ URI is an XML namespace.\n   IANA has registered one YANG module in the \"YANG\
    \ Module Names\"\n   registry [RFC6020] maintained at <https://www.iana.org/assignments/\n\
    \   yang-parameters>.  The following registration has been made per the\n   format\
    \ in [RFC6020]:\n   Name: ietf-subscribed-notifications\n   Namespace: urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\n\
    \   Prefix: sn\n   Reference: RFC 8639\n"
- title: 6.  Implementation Considerations
  contents:
  - "6.  Implementation Considerations\n   To support deployments that include both\
    \ configured and dynamic\n   subscriptions, it is recommended that the subscription\
    \ \"id\" domain be\n   split into static and dynamic halves.  This will eliminate\
    \ the\n   possibility of collisions if the configured subscriptions attempt to\n\
    \   set a \"subscription-id\" that might have already been dynamically\n   allocated.\
    \  A best practice is to use the lower half of the \"id\"\n   object's integer\
    \ space when that \"id\" is assigned by an external\n   entity (such as with a\
    \ configured subscription).  This leaves the\n   upper half of the subscription\
    \ integer space available to be\n   dynamically assigned by the publisher.\n \
    \  If a subscription is unable to marshal a series of filtered event\n   records\
    \ into transmittable notification messages, the receiver should\n   be suspended\
    \ with the reason \"unsupportable-volume\".\n   For configured subscriptions,\
    \ operations are performed against the\n   set of receivers using the subscription\
    \ \"id\" as a handle for that\n   set.  But for streaming updates, subscription\
    \ state change\n   notifications are local to a receiver.  In the case of this\n\
    \   specification, receivers do not get any information from the\n   publisher\
    \ about the existence of other receivers.  But if a network\n   operator wants\
    \ to let the receivers correlate results, it is useful\n   to use the subscription\
    \ \"id\" across the receivers to allow that\n   correlation.  Note that due to\
    \ the possibility of different access\n   control permissions per receiver, each\
    \ receiver may actually get a\n   different set of event records.\n   For configured\
    \ replay subscriptions, the receiver is protected from\n   duplicated events being\
    \ pushed after a publisher is rebooted.\n   However, it is possible that a receiver\
    \ might want to acquire event\n   records that failed to be delivered just prior\
    \ to the reboot.\n   Delivering these event records can be accomplished by leveraging\
    \ the\n   <eventTime> [RFC5277] from the last event record received prior to\n\
    \   the receipt of a \"subscription-started\" subscription state change\n   notification.\
    \  With this <eventTime> and the \"replay-start-time\" from\n   the \"subscription-started\"\
    \ notification, an independent dynamic\n   subscription can be established that\
    \ retrieves any event records that\n   may have been generated but not sent to\
    \ the receiver.\n"
- title: 7.  Transport Requirements
  contents:
  - "7.  Transport Requirements\n   This section provides requirements for any subscribed\
    \ notification\n   transport supporting the solution presented in this document.\n\
    \   The transport selected by the subscriber to reach the publisher MUST\n   be\
    \ able to support multiple \"establish-subscription\" requests made in\n   the\
    \ same transport session.\n   For both configured and dynamic subscriptions, the\
    \ publisher MUST\n   authenticate a receiver via some transport-level mechanism\
    \ before\n   sending any event records that the receiver is authorized to see.\
    \  In\n   addition, the receiver MUST authenticate the publisher at the\n   transport\
    \ level.  The result is mutual authentication between\n   the two.\n   A secure\
    \ transport is highly recommended.  Beyond this, the publisher\n   MUST ensure\
    \ that the receiver has sufficient authorization to perform\n   the function it\
    \ is requesting against the specific subset of content\n   involved.\n   A specification\
    \ for a transport built upon this document may or may\n   not choose to require\
    \ the use of the same logical channel for the\n   RPCs and the event records.\
    \  However, the event records and the\n   subscription state change notifications\
    \ MUST be sent on the same\n   transport session to ensure properly ordered delivery.\n\
    \   A specification for a transport MUST identify any encodings that are\n   supported.\
    \  If a configured subscription's transport allows different\n   encodings, the\
    \ specification MUST identify the default encoding.\n   A subscriber that includes\
    \ a \"dscp\" leaf in an \"establish-\n   subscription\" request will need to understand\
    \ and consider what the\n   corresponding DSCP value represents in the domain\
    \ of the publisher.\n   Additional transport requirements will be dictated by\
    \ the choice of\n   transport used with a subscription.  For an example of such\n\
    \   requirements, see [RFC8640].\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The YANG module specified in this document defines\
    \ a schema for data\n   that is designed to be accessed via network management\
    \ protocols such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF\
    \ layer\n   is the secure transport layer, and the mandatory-to-implement secure\n\
    \   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n  \
    \ is HTTPS, and the mandatory-to-implement secure transport is TLS\n   [RFC5246].\n\
    \   The Network Configuration Access Control Model (NACM) [RFC8341]\n   provides\
    \ the means to restrict access for particular NETCONF or\n   RESTCONF users to\
    \ a preconfigured subset of all available NETCONF or\n   RESTCONF protocol operations\
    \ and content.\n   With configured subscriptions, one or more publishers could\
    \ be used\n   to overwhelm a receiver.  To counter this, notification messages\n\
    \   SHOULD NOT be sent to any receiver that does not support this\n   specification.\
    \  Receivers that do not want notification messages need\n   only terminate or\
    \ refuse any transport sessions from the publisher.\n   When a receiver of a configured\
    \ subscription gets a new\n   \"subscription-started\" message for a known subscription\
    \ where it is\n   already consuming events, it may indicate that an attacker has\
    \ done\n   something that has momentarily disrupted receiver connectivity.  To\n\
    \   acquire events lost during this interval, the receiver SHOULD\n   retrieve\
    \ any event records generated since the last event record was\n   received.  This\
    \ can be accomplished by establishing a separate\n   dynamic replay subscription\
    \ with the same filtering criteria with the\n   publisher, assuming that the publisher\
    \ supports the \"replay\" feature.\n   For dynamic subscriptions, implementations\
    \ need to protect against\n   malicious or buggy subscribers that may send a large\
    \ number of\n   \"establish-subscription\" requests and thereby use up system\n\
    \   resources.  To cover this possibility, operators SHOULD monitor for\n   such\
    \ cases and, if discovered, take remedial action to limit the\n   resources used,\
    \ such as suspending or terminating a subset of the\n   subscriptions or, if the\
    \ underlying transport is session based,\n   terminating the underlying transport\
    \ session.\n   The replay mechanisms described in Sections 2.4.2.1 and 2.5.6 provide\n\
    \   access to historical event records.  By design, the access control\n   model\
    \ that protects these records could enable subscribers to view\n   data to which\
    \ they were not authorized at the time of collection.\n   Using DNS names for\
    \ configured subscription's receiver \"name\" lookups\n   can cause situations\
    \ where the name resolves differently than\n   expected on the publisher, so the\
    \ recipient would be different than\n   expected.\n   An attacker that can cause\
    \ the publisher to use an incorrect time can\n   induce message replay by setting\
    \ the time in the past and can\n   introduce a risk of message loss by setting\
    \ the time in the future.\n   There are a number of data nodes defined in this\
    \ YANG module that are\n   writable/creatable/deletable (i.e., config true, which\
    \ is the\n   default).  These data nodes may be considered sensitive or vulnerable\n\
    \   in some network environments.  Write operations (e.g., edit-config)\n   to\
    \ these data nodes without proper protection can have a negative\n   effect on\
    \ network operations.  These are the subtrees and data nodes\n   and their sensitivity/vulnerability:\n\
    \   Container: \"/filters\"\n   o  \"stream-subtree-filter\": Updating a filter\
    \ could increase the\n      computational complexity of all referencing subscriptions.\n\
    \   o  \"stream-xpath-filter\": Updating a filter could increase the\n      computational\
    \ complexity of all referencing subscriptions.\n   Container: \"/subscriptions\"\
    \n   The following considerations are only relevant for configuration\n   operations\
    \ made upon configured subscriptions:\n   o  \"configured-replay\": Can be used\
    \ to send a large number of event\n      records to a receiver.\n   o  \"dependency\"\
    : Can be used to force important traffic to be queued\n      behind updates that\
    \ are not as important.\n   o  \"dscp\": If unvalidated, can result in the sending\
    \ of traffic with\n      a higher-priority marking than warranted.\n   o  \"id\"\
    : Can overwrite an existing subscription, perhaps one\n      configured by another\
    \ entity.\n   o  \"name\": Adding a new key entry can be used to attempt to send\n\
    \      traffic to an unwilling receiver.\n   o  \"replay-start-time\": Can be\
    \ used to push very large logs, wasting\n      resources.\n   o  \"source-address\"\
    : The configured address might not be able to\n      reach a desired receiver.\n\
    \   o  \"source-interface\": The configured interface might not be able to\n \
    \     reach a desired receiver.\n   o  \"source-vrf\": Can place a subscription\
    \ in a virtual network where\n      receivers are not entitled to view the subscribed\
    \ content.\n   o  \"stop-time\": Could be used to terminate content at an inopportune\n\
    \      time.\n   o  \"stream\": Could set a subscription to an event stream that\
    \ does\n      not contain content permitted for the targeted receivers.\n   o\
    \  \"stream-filter-name\": Could be set to a filter that is not\n      relevant\
    \ to the event stream.\n   o  \"stream-subtree-filter\": A complex filter can\
    \ increase the\n      computational resources for this subscription.\n   o  \"\
    stream-xpath-filter\": A complex filter can increase the\n      computational\
    \ resources for this subscription.\n   o  \"weighting\": Allocating a large weight\
    \ can overwhelm the dequeuing\n      of other subscriptions.\n   Some of the readable\
    \ data nodes in this YANG module may be considered\n   sensitive or vulnerable\
    \ in some network environments.  It is thus\n   important to control read access\
    \ (e.g., via get, get-config, or\n   notification) to these data nodes.  These\
    \ are the subtrees and data\n   nodes and their sensitivity/vulnerability:\n \
    \  Container: \"/streams\"\n   o  \"name\": If access control is not properly\
    \ configured, can expose\n      system internals to those who should not have\
    \ access to this\n      information.\n   o  \"replay-support\": If access control\
    \ is not properly configured,\n      can expose logs to those who should not have\
    \ access.\n   Container: \"/subscriptions\"\n   o  \"excluded-event-records\"\
    : This leaf can provide information about\n      filtered event records.  A network\
    \ operator should have the proper\n      permissions to know about such filtering.\
    \  However, exposing the\n      count of excluded events to a receiver could leak\
    \ information\n      about the presence of access control filters that might be\
    \ in\n      place for that receiver.\n   o  \"subscription\": Different operational\
    \ teams might have a desire to\n      set varying subsets of subscriptions.  Access\
    \ control should be\n      designed to permit read access to just the allowed\
    \ set.\n   Some of the RPC operations in this YANG module may be considered\n\
    \   sensitive or vulnerable in some network environments.  It is thus\n   important\
    \ to control access to these operations.  These are the\n   operations and their\
    \ sensitivity/vulnerability:\n   RPC: all\n   o  If a malicious or buggy subscriber\
    \ sends an unexpectedly large\n      number of RPCs, the result might be an excessive\
    \ use of system\n      resources on the publisher just to determine that these\n\
    \      subscriptions should be declined.  In such a situation,\n      subscription\
    \ interactions MAY be terminated by terminating the\n      transport session.\n\
    \   RPC: \"delete-subscription\"\n   o  No special considerations.\n   RPC: \"\
    establish-subscription\"\n   o  Subscriptions could overload a publisher's resources.\
    \  For this\n      reason, publishers MUST ensure that they have sufficient resources\n\
    \      to fulfill this request; otherwise, they MUST reject the request.\n   RPC:\
    \ \"kill-subscription\"\n   o  The \"kill-subscription\" RPC MUST be secured so\
    \ that only\n      connections with administrative rights are able to invoke\n\
    \      this RPC.\n   RPC: \"modify-subscription\"\n   o  Subscriptions could overload\
    \ a publisher's resources.  For this\n      reason, publishers MUST ensure that\
    \ they have sufficient resources\n      to fulfill this request; otherwise, they\
    \ MUST reject the request.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,\n            \
    \  \"Definition of the Differentiated Services Field (DS\n              Field)\
    \ in the IPv4 and IPv6 Headers\", RFC 2474,\n              DOI 10.17487/RFC2474,\
    \ December 1998,\n              <https://www.rfc-editor.org/info/rfc2474>.\n \
    \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n   \
    \           DOI 10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC5277]\
    \  Chisholm, S. and H. Trevino, \"NETCONF Event\n              Notifications\"\
    , RFC 5277, DOI 10.17487/RFC5277, July 2008,\n              <https://www.rfc-editor.org/info/rfc5277>.\n\
    \   [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n   \
    \           the Network Configuration Protocol (NETCONF)\", RFC 6020,\n      \
    \        DOI 10.17487/RFC6020, October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <https://www.rfc-editor.org/info/rfc6242>.\n   [RFC6991]  Schoenwaelder,\
    \ J., Ed., \"Common YANG Data Types\",\n              RFC 6991, DOI 10.17487/RFC6991,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n    \
    \          RFC 7951, DOI 10.17487/RFC7951, August 2016,\n              <https://www.rfc-editor.org/info/rfc7951>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in\n              RFC 2119 Key Words\", BCP 14, RFC\
    \ 8174,\n              DOI 10.17487/RFC8174, May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8341]  Bierman, A. and M. Bjorklund, \"Network Configuration\n       \
    \       Access Control Model\", STD 91, RFC 8341,\n              DOI 10.17487/RFC8341,\
    \ March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8342]\
    \  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and\
    \ R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\"\
    , RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n\
    \   [RFC8343]  Bjorklund, M., \"A YANG Data Model for Interface\n            \
    \  Management\", RFC 8343, DOI 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n\
    \   [RFC8529]  Berger, L., Hopps, C., Lindem, A., Bogdanovic, D., and X.\n   \
    \           Liu, \"YANG Data Model for Network Instances\", RFC 8529,\n      \
    \        DOI 10.17487/RFC8529, March 2019,\n              <https://www.rfc-editor.org/info/rfc8529>.\n\
    \   [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,\
    \ M., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)\
    \ 1.0 (Fifth\n              Edition)\", World Wide Web Consortium Recommendation\n\
    \              REC-xml-20081126, November 2008,\n              <https://www.w3.org/TR/2008/REC-xml-20081126>.\n\
    \   [XPATH]    Clark, J. and S. DeRose, \"XML Path Language (XPath)\n        \
    \      Version 1.0\", November 1999,\n              <https://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RESTCONF-Notif]\n              Voit, E., Rahman,\
    \ R., Nilsen-Nygaard, E., Clemm, A.,\n              and A. Bierman, \"Dynamic\
    \ subscription to YANG Events\n              and Datastores over RESTCONF\", Work\
    \ in Progress,\n              draft-ietf-netconf-restconf-notif-15, June 2019.\n\
    \   [RFC7049]  Bormann, C. and P. Hoffman, \"Concise Binary Object\n         \
    \     Representation (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n             \
    \ October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n   [RFC7540]  Belshe,\
    \ M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer Protocol\
    \ Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540, May 2015,\n\
    \              <https://www.rfc-editor.org/info/rfc7540>.\n   [RFC7923]  Voit,\
    \ E., Clemm, A., and A. Gonzalez Prieto, \"Requirements\n              for Subscription\
    \ to YANG Datastores\", RFC 7923,\n              DOI 10.17487/RFC7923, June 2016,\n\
    \              <https://www.rfc-editor.org/info/rfc7923>.\n   [RFC8071]  Watsen,\
    \ K., \"NETCONF Call Home and RESTCONF Call Home\",\n              RFC 8071, DOI\
    \ 10.17487/RFC8071, February 2017,\n              <https://www.rfc-editor.org/info/rfc8071>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n \
    \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n    \
    \          BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n            \
    \  <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8640]  Voit, E., Clemm,\
    \ A., Gonzalez Prieto, A., Nilsen-Nygaard,\n              E., and A. Tripathy,\
    \ \"Dynamic Subscription to YANG Events\n              and Datastores over NETCONF\"\
    , RFC 8640,\n              DOI 10.17487/RFC8640, September 2019,\n           \
    \   <https://www.rfc-editor.org/info/rfc8640>.\n   [RFC8641]  Clemm, A. and E.\
    \ Voit, \"Subscription to YANG Notifications\n              for Datastore Updates\"\
    , RFC 8641, DOI 10.17487/RFC8641,\n              September 2019, <https://www.rfc-editor.org/info/rfc8641>.\n"
- title: Appendix A.  Example Configured Transport Augmentation
  contents:
  - "Appendix A.  Example Configured Transport Augmentation\n   This appendix provides\
    \ a non-normative example of how the YANG module\n   defined in Section 4 may\
    \ be enhanced to incorporate the configuration\n   parameters needed to support\
    \ the transport connectivity process.\n   This example is not intended to be a\
    \ complete transport model.  In\n   this example, connectivity via an imaginary\
    \ transport type of \"foo\"\n   is explored.  For more on the overall objectives\
    \ behind configuring\n   transport connectivity for a configured subscription,\
    \ see\n   Section 2.5.7.\n   The YANG module example defined in this appendix\
    \ contains two main\n   elements.  First is a transport identity \"foo\".  This\
    \ transport\n   identity allows a configuration agent to define \"foo\" as the\
    \ selected\n   type of transport for a subscription.  Second is a YANG case\n\
    \   augmentation \"foo\", which is made to the\n   \"/subscriptions/subscription/receivers/receiver\"\
    \ node of Section 4.\n   In this augmentation are the transport configuration\
    \ parameters\n   \"address\" and \"port\", which are necessary to make the connection\
    \ to\n   the receiver.\n   module example-foo-subscribed-notifications {\n   \
    \  yang-version 1.1;\n     namespace\n       \"urn:example:foo-subscribed-notifications\"\
    ;\n     prefix fsn;\n     import ietf-subscribed-notifications {\n       prefix\
    \ sn;\n     }\n     import ietf-inet-types {\n       prefix inet;\n     }\n  \
    \   description\n       \"Defines 'foo' as a supported type of configured transport\
    \ for\n        subscribed event notifications.\";\n     identity foo {\n     \
    \  base sn:transport;\n       description\n         \"Transport type 'foo' is\
    \ available for use as a configured\n          subscription's transport protocol\
    \ for subscribed\n          notifications.\";\n     }\n     augment\n       \"\
    /sn:subscriptions/sn:subscription/sn:receivers/sn:receiver\" {\n       when 'derived-from(../../../transport,\
    \ \"fsn:foo\")';\n       description\n         \"This augmentation makes transport\
    \ parameters specific to 'foo'\n          available for a receiver.\";\n     \
    \  leaf address {\n         type inet:host;\n         mandatory true;\n      \
    \   description\n           \"Specifies the address to use for messages destined\
    \ for a\n            receiver.\";\n       }\n       leaf port {\n         type\
    \ inet:port-number;\n         mandatory true;\n         description\n        \
    \   \"Specifies the port number to use for messages destined for a\n         \
    \   receiver.\";\n       }\n     }\n   }\n                 Figure 21: Example\
    \ Transport Augmentation\n                     for the Fictitious Protocol \"\
    foo\"\n   This example YANG module for transport \"foo\" will not be seen in a\n\
    \   real-world deployment.  For a real-world deployment supporting an\n   actual\
    \ transport technology, a similar YANG module must be defined.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   For their valuable comments, discussions, and feedback, we\
    \ wish to\n   acknowledge Andy Bierman, Tim Jenkins, Martin Bjorklund, Kent Watsen,\n\
    \   Balazs Lengyel, Robert Wilton, Sharon Chisholm, Hector Trevino, Susan\n  \
    \ Hares, Michael Scharf, and Guangying Zheng.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Voit\n   Cisco Systems\n   Email: evoit@cisco.com\n\
    \   Alexander Clemm\n   Futurewei\n   Email: ludwig@clemm.org\n   Alberto Gonzalez\
    \ Prieto\n   Microsoft\n   Email: alberto.gonzalez@microsoft.com\n   Einar Nilsen-Nygaard\n\
    \   Cisco Systems\n   Email: einarnn@cisco.com\n   Ambika Prasad Tripathy\n  \
    \ Cisco Systems\n   Email: ambtripa@cisco.com\n"
