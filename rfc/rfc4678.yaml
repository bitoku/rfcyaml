- title: __initial_text__
  contents:
  - '                  Server/Application State Protocol v1

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   Entities responsible for distributing work across a group of systems\n\
    \   traditionally do not know a great deal about the ability of the\n   applications\
    \ on those systems to complete the work in a satisfactory\n   fashion.  Workload\
    \ management systems traditionally know a great deal\n   about the health of applications,\
    \ but have little control over the\n   rate in which these applications receive\
    \ work.  The\n   Server/Application State Protocol (SASP) provides a mechanism\
    \ for\n   load balancers and workload management systems to communicate better\n\
    \   ways of distributing the existing workload to the group members.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Overview ...................................................3\n  \
    \    1.2. Identities .................................................4\n   2.\
    \ Requirements Notation ...........................................4\n   3. Conventions\
    \ Used in This Document ...............................4\n   4. General Message\
    \ Structure .......................................4\n      4.1. TLV Structure\
    \ ..............................................6\n      4.2. Component Types\
    \ ............................................6\n      4.3. SASP Protocol Header\
    \ .......................................7\n      4.4. Version Negotiation ........................................8\n\
    \   5. Singular Protocol Components ....................................9\n  \
    \    5.1. Member Data Component ......................................9\n    \
    \  5.2. Group Data Component ......................................11\n      5.3.\
    \ Weight Entry Data Component ...............................12\n      5.4. Member\
    \ State Instance Component ...........................14\n   6. Group Protocol\
    \ Components ......................................15\n      6.1. Group of Member\
    \ Data Component ............................15\n      6.2. Group of Weight Data\
    \ Component ............................16\n      6.3. Group of Member State Data\
    \ Components .....................17\n   7. Protocol Messages ..............................................17\n\
    \      7.1. Registration Request and Reply ............................18\n  \
    \         7.1.1. Registration Request ...............................18\n    \
    \       7.1.2. Registration Reply .................................19\n      7.2.\
    \ DeRegistration Request and Reply ..........................20\n           7.2.1.\
    \ DeRegistration Request .............................21\n           7.2.2. DeRegistration\
    \ Reply ...............................22\n      7.3. Get Weights Request and\
    \ Reply .............................23\n           7.3.1. Get Weights Request\
    \ ................................24\n           7.3.2. Get Weights Reply ..................................25\n\
    \      7.4. Send Weights ..............................................26\n  \
    \    7.5. Set Member State Request and Reply ........................27\n    \
    \       7.5.1. Set Member State Request ...........................28\n      \
    \     7.5.2. Set Member State Reply .............................29\n      7.6.\
    \ Set Load Balancer State Request and Reply .................30\n           7.6.1.\
    \ Set LB State Request ...............................30\n           7.6.2. Set\
    \ LB State Reply .................................32\n   8. Example of SASP Message\
    \ Encoding ...............................32\n   9. Protocol Flow ..................................................37\n\
    \      9.1. Normal Protocol Flow ......................................37\n  \
    \    9.2. Behavior in Error Cases ...................................39\n    \
    \  9.3. Example Flow 1: Load Balancer Registration,\n           Getting Weights,\
    \ and Application-Side Quiescing ...........41\n      9.4. Example Flow 2:  Set\
    \ Load Balancer State, Application\n           Registration, and Load Balancer\
    \ Group DeRegistration ......43\n      9.5. Avoiding Single Points of Failure\
    \ .........................44\n   10. Security Considerations .......................................45\n\
    \   11. Normative References ..........................................46\n  \
    \ Appendix A. Acknowledgements ......................................47\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   The Server/Application State Protocol is designed to enable\
    \ load\n   balancers or schedulers (1) to receive traffic weight recommendations\n\
    \   from Workload Managers, (2) to register with Workload Managers\n   members\
    \ of load balancing/scheduling groups, and (3) to enable\n   Workload Managers\
    \ to suggest new load balancing group members to load\n   balancers and schedulers\n\
    \   The figure below shows where the SASP entities are in typical load\n   balancing\
    \ topology.\n                                            ----------\n        \
    \                                    | Group  |\n                            \
    \       -------->|Member 1|<--|\n                                   |        ----------\
    \   |\n                                   |                     |\n     ---------\
    \        ----------   |        ----------   |\n     |Request|<------>|  Load \
    \ |---|        | Group  |   |\n     |Origins|<------>|Balancer|----------->|Member\
    \ 2|<--|\n     ---------        |        |---|        ----------   |\n       \
    \               ----------   |                     |\n                       \
    \   ^        |        ----------   |\n                          |        -------->|\
    \ Group  |   |\n                     SASP |                 |Member 3|<--|\n \
    \                   -------                 ----------   |\n                 \
    \   |                                    |\n                    |      --------------------\
    \          |\n                    |      |     Group        |     SASP |\n   \
    \                 ------>| Workload Manager |<----------\n                   \
    \        --------------------\n                                 Figure 1\n   SASP\
    \ is a binary protocol that facilitates communication from load\n   balancers/schedulers\
    \ to Workload Managers.  The connection between\n   the Group Workload Manager\
    \ (GWM) and the load balancer/scheduler is\n   expected to be a long-running TCP\
    \ connection.  In SASP interactions,\n   the GWM acts as a SASP server waiting\
    \ to receive connections from the\n   other SASP components.  Server port 3860\
    \ has been registered with the\n   IANA for SASP communications.  It is expected\
    \ that all SASP\n   components are configured with the DNS name of the GWM to\
    \ develop\n   this connection.  Security in SASP is handled by transporting binary\n\
    \   messages over Secure Socket Layer/Transport Layer Security (SSL/TLS).\n  \
    \ This document only describes the message format and protocol behavior\n   above\
    \ the connection and security layers.  Connection and security\n   aspects including\
    \ SSL's authentication and encryption will be\n   implementation specific.\n"
- title: 1.2.  Identities
  contents:
  - "1.2.  Identities\n   SASP identifies a load balancer by a UTF-8 string called\
    \ a \"LB UID\".\n   A group of \"equivalent\" servers providing a service is identified\
    \ by\n   a UTF-8 string called a \"Group Name\", which is interpreted in the\n\
    \   context of the LB UID.  A server is identified by its IP address and\n   (optional)\
    \ port and protocol numbers.  A GWM is only identified\n   implicitly as the entity\
    \ on the other end of the TCP connection from\n   a load balancer or group member.\
    \  All of these identifiers are local;\n   there are no globally unique identifiers.\
    \  The LB UID and GroupName\n   fields are unstructured so that components could\
    \ assign values to\n   these fields that are meaningful to an administrator. \
    \ For example,\n   in many cases, a load balancer would use the name an administrator\n\
    \   provided for the serverfarm group as the groupname in a SASP-\n   specified\
    \ group.  Since the naming options in industry load balancers\n   do not carry\
    \ explicit naming restrictions, SASP naming options also\n   carry no naming restrictions.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Conventions Used in This Document
  contents:
  - "3.  Conventions Used in This Document\n   o  Load Balancer - Entity responsible\
    \ for distributing requests\n      amongst the available members.\n   o  Member\
    \ - Machine, process, or application used to service\n      requests.\n   o  Group\
    \ Workload Manager (GWM) - Entity responsible for reporting or\n      managing\
    \ a group of members on multiple machines.\n"
- title: 4.  General Message Structure
  contents:
  - "4.  General Message Structure\n   Any string interpreted by the group workload\
    \ manager is assumed to\n   use UTF8.  Components implementing SASP MUST support\
    \ the printable\n   ASCII subrepertoire of UTF8 (0x20-0x7E).  Components MAY also\
    \ choose\n   to provide support for additional UTF8 character encodings.  It is\n\
    \   recommended that customers using SASP-enabled products configure the\n   string-generating\
    \ components (load balancers and group members) to\n   use the same character\
    \ repertoire.\n   Many of the SASP structures involve the transfer of multi-byte\n\
    \   integer values.  In all cases where multi-byte integer values are\n   used,\
    \ they are considered to be in network-byte order (big-endian).\n   SASP is organized\
    \ into several message components.  For extendibility\n   and ease of processing,\
    \ each message component is described in a TLV\n   (Type, Length, Value) format.\
    \  An illustration of the SASP structure\n   can be found in the example below.\
    \  The first section is the header\n   followed by the message component type.\
    \  As mentioned, the header,\n   message component, and all other components have\
    \ a TLV format.  Each\n   component value contains a variable number of fields,\
    \ some of which\n   refer to upcoming components (explained component descriptions\
    \ are in\n   upcoming sections).  After the first message component, any number\
    \ of\n   additional components may be included (as stipulated in the fields of\n\
    \   the message type).\n   -------------------------------------------------\n\
    \   |            |T| Type (SASP Header Type)        |\n   |    SASP    |----------------------------------|\n\
    \   |   Header   |L| Length of SASP header TLV      |\n   |            |----------------------------------|\n\
    \   |            |V| Header fields                  |\n   |-----------------------------------------------|\n\
    \   |            |T| Type (Message Type)            |\n   |  Message   |----------------------------------|\n\
    \   |    Type    |L| Length of this Message Type TLV|\n   | Component  |----------------------------------|\n\
    \   |            |V| Component fields               |\n   |-----------------------------------------------|\n\
    \   |            |T| Type (Component Type)          |\n   |            |----------------------------------|\n\
    \   |Component-1 |L| Length of this TLV             |\n   |            |----------------------------------|\n\
    \   |            |V| Component fields               |\n   |-----------------------------------------------|\n\
    \   | ...                                           |\n   |-----------------------------------------------|\n\
    \   |            |T| Type (Component Type)          |\n   |            |----------------------------------|\n\
    \   |Component-n |L| Length of this TLV             |\n   |            |----------------------------------|\n\
    \   |            |V| Component fields               |\n   -------------------------------------------------\n\
    \                                 Figure 2\n"
- title: 4.1.  TLV Structure
  contents:
  - "4.1.  TLV Structure\n   An illustration of the TLV format is shown below.  The\
    \ Type is a\n   two-byte field containing a binary value for the component type.\
    \  The\n   Length is a two-byte field containing the size of the TLV in bytes\n\
    \   (including the Type and Length fields).  The Value field is a\n   variable-length\
    \ field that actually contains the data of the\n   component.\n   < xxxx xxxx\
    \ xxxx xxxx, xxxx xxxx xxxx xxxx, xxxx...........xxxx >\n     |-----------------|\
    \  |-----------------|  |-----------------|\n        Type(2 bytes)       Length(2\
    \ bytes)      Value(variable)\n                                 Figure 3\n"
- title: 4.2.  Component Types
  contents:
  - "4.2.  Component Types\n   The TLV structure requires a type value for each protocol\
    \ component.\n   All SASP types are listed in this section.\n      Reserved 0x0000-0x1000\n\
    \      Message Types\n         Registration Request 0x1010\n         Registration\
    \ Reply 0x1015\n         DeRegistration Request 0x1020\n         DeRegistration\
    \ Reply 0x1025\n         Get Weights Request 0x1030\n         Get Weights Reply\
    \ 0x1035\n         Send Weights 0x1040\n         Set Load Balancer State Request\
    \ 0x1050\n         Set Load Balancer State Reply 0x1055\n         Set Member State\
    \ Request 0x1060\n         Set Member State Reply 0x1065\n      Utility Component\
    \ Types\n         SASP Header 0x2010\n      Singular Component Types\n       \
    \  Member Data 0x3010\n         Group Data 0x3011\n         Weight Entry Data\
    \ 0x3012\n         Member State Instance 0x3013\n      Group Component Types\n\
    \         Group of Member Data 0x4010\n         Group of Weight Entry Data 0x4011\n\
    \         Group of Member State Data 0x4012\n      Reserved 0xF000-0xFFFF\n"
- title: 4.3.  SASP Protocol Header
  contents:
  - "4.3.  SASP Protocol Header\n   An illustration of the SASP Header is found in\
    \ the table below.  It\n   is expected that every message will start with the\
    \ SASP Protocol\n   Header component.\n      0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   SASP header type (0x2010)   |       Size of this TLV        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    Version    |                     Message Length\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      |                       Message ID\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      |\n      +-+-+-+-+-+-+-+-+\n                          \
    \       Figure 4\n   o  Version: The version of the protocol used in this message.\n\
    \   o  Message Length: A 4-byte signed integer value representing the\n      total\
    \ length of the SASP message.  It is said to be a signed\n      4-byte value to\
    \ make any Java implementations easier (or any other\n      implementations without\
    \ unsigned values); however, no negative\n      lengths are valid.\n   o  Message\
    \ ID: Each request message is given a 4-byte Message ID by\n      the message\
    \ originator, which is simply returned in the Message ID\n      field of the reply.\
    \  This field is meant to assist the requester\n      in correlating replies to\
    \ the appropriate request when many\n      requests have been sent.  In the Send\
    \ Weights message (the only\n      message transaction that has no reply), this\
    \ field serves no\n      purpose.\n"
- title: 4.4.  Version Negotiation
  contents:
  - "4.4.  Version Negotiation\n   To negotiate the version of the protocol used by\
    \ the entities\n   involved in the connection, the GWM views the version included\
    \ in the\n   load balancer request as the load balancer's proposed version.\n\
    \   If the GWM supports the version proposed by the load balancer, it\n   will\
    \ respond to the connection with the appropriate response code and\n   the load\
    \ balancer's proposed version in the response header.  This\n   proposed version\
    \ should be the version used for all messages in this\n   connection.\n   If the\
    \ GWM does not support the version proposed by the load\n   balancer, the GWM\
    \ will respond with a \"message not understood\"\n   response code and the GWM's\
    \ highest supported SASP version in the\n   version field of the response header.\
    \  This is an indication for the\n   load balancer to come down to GWM's SASP\
    \ version level.\n"
- title: 5.  Singular Protocol Components
  contents:
  - "5.  Singular Protocol Components\n   The most basic of SASP components are singular\
    \ components because\n   they describe a single instance of a member, member resource,\
    \ member\n   weight, or group.  Some of the SASP components reuse other SASP\n\
    \   components.  When this is the case, any component being reused by a\n   base\
    \ component will simply be given immediately following the base\n   component.\
    \  Some examples of this technique are seen and explained in\n   the Weight Entry\
    \ and Member State Instance components.\n"
- title: 5.1.  Member Data Component
  contents:
  - "5.1.  Member Data Component\n   The member data component describes a particular\
    \ member and is\n   referred to by other components.\n      0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Member Data Type (0x3010)   |       Size of this TLV        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Protocol    |             Port              |               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n      |                                                   \
    \            |\n      +                                                      \
    \         +\n      |                                                         \
    \      |\n      +                   IP Address of Member                     \
    \   +\n      |                                                               |\n\
    \      +                                               +-+-+-+-+-+-+-+-+\n   \
    \   |                                               |  Label Length |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   .                                                               .\n      .\
    \                          Label                                .\n      .   \
    \                                                            .\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 5\n   o  Protocol: The assigned number\
    \ of the IP transport layer used in\n      the Protocol Field of the IP header.\
    \  These are defined in\n      [RFC1700]; however, a current list is maintained\
    \ at\n      http://www.iana.org.\n      for example: TCP = 0x06, UDP = 0x11, etc.\n\
    \   o  Port: The port number used for communication to the member.\n      ***\
    \ A value of 0 can be given for the Protocol and Port to signify\n      a system\
    \ level member.  However, 0 shouldn't be perceived as a\n      wildcard for either\
    \ Port or Protocol fields (i.e., a\n      deregistration request that includes\
    \ a MemberData component with a\n      0 for the port doesn't mean deregister\
    \ all applications listening\n      on any port of that IP and protocol).\n  \
    \ o  IP Address: The current format is described by the following 16\n      bytes,\
    \ where IPv4 addresses are represented as \"IPv4-compatible\n      IPv6 addresses\"\
    \ [RFC4291].  In the following example, the x's and\n      zeros represent 4-bit\
    \ hex values.  The x's describe arbitrary hex\n      values.\n         IPv4 Address:\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 xx xx xx xx\n         IPv6 Address: xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx\n   o  Label length: The length, in\
    \ bytes, of the label string to follow.\n   o  Label: A UTF8 string that may be\
    \ set while registering a member.\n      This string is opaque to the GWM and\
    \ is simply included with any\n      correspondence containing the member data\
    \ component.  Note that\n      the size of this label is <= 255 bytes.  Because\
    \ UTF8 character\n      encodings may be up to 6 bytes, care must be exercised\
    \ by the load\n      balancer or member to make sure the UTF8 string it sends\
    \ the GWM\n      is in fact <= 255 bytes.\n"
- title: 5.2.  Group Data Component
  contents:
  - "5.2.  Group Data Component\n   The group data component simply describes a group\
    \ with which to\n   associate other singular components.\n      0            \
    \       1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Group Data Type (0x3011)   |       Size of this TLV        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ LB UID Length |                                               |\n      +-+-+-+-+-+-+-+-+\
    \                                               +\n      .                   \
    \                                            .\n      .                      \
    \       LB UID                            .\n      .                         \
    \                                      .\n      +                            \
    \                   +-+-+-+-+-+-+-+-+\n      |                               \
    \                |Group Name Len |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                          Group Name                           .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 6\n   o  LB UID Length: Length of the\
    \ LB UID to follow (in bytes).\n   o  LB UID: A UTF8 string used as a unique identifier\
    \ and a context\n      for the Group Name (e.g., a UTF8 representation of the\
    \ MAC address\n      of the load balancer or some type of Universally Unique Identifier\n\
    \      (UUID)).  This string is used by the Group Workload Manager to\n      associate\
    \ application registration and deregistration, and to set\n      state messages\
    \ with the correct load balancer.  This unique\n      identifier should not be\
    \ any longer than 64 bytes.\n   o  Group Name Len: Length of the Group Name field\
    \ to follow (in\n      bytes).\n   o  Group Name: A UTF8 string the load balancer\
    \ has chosen to tell the\n      Group Workload Manager that members being registered\
    \ with this\n      Group Name are equivalent in function.  In Get Weight and\n\
    \      DeRegistration messages, the Group Name may be omitted (Group Name\n  \
    \    Length = 0) to indicate all groups from the associated load\n      balancer.\n"
- title: 5.3.  Weight Entry Data Component
  contents:
  - "5.3.  Weight Entry Data Component\n   The Weight Entry Component is used by the\
    \ get and send weight\n   messages to associate a weight with a particular member\
    \ (or Member\n   Data).  It also uses an opaque member state field and a general\n\
    \   member flags field to denote extra information about a member\n   (described\
    \ below).  When the Weight Entry component is used, the\n   Member Data TLV it\
    \ refers to is listed first, immediately followed by\n   the Weight Entry TLV.\n\
    \      0                   1                   2                   3\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Member Data Type (0x3010)   | Size of this Member Data TLV  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                   Member Data Fields                       .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Weight Entry Type (0x3012)  | Size of this Weight Entry TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  State Field  |  Flags Field  |             Weight            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 7\n   o  State Field: This field is used\
    \ by the member to communicate state\n      information to the scheduler.  The\
    \ information placed in this\n      field is opaque to the GWM and will simply\
    \ be forwarded to the\n      scheduler with the member weights.  There are no\
    \ defined values\n      for this field.\n   o  Flags Field: This field has several\
    \ flag values that describe\n      several attributes of the member.\n      A.\
    \  Contact Success Flag (set by the GWM): describes whether the\n          member\
    \ is currently running.  If the contact success flag is\n          off, this member\
    \ should be avoided by the load balancer.\n          +  xxxx xxx1 The GWM has\
    \ located this running system or\n             application.\n          +  xxxx\
    \ xxx0 The GWM has not located this running system or\n             application.\n\
    \      B.  Quiesce Flag (set by the load balancer or Member): used when\n    \
    \      an administrator would like to temporarily remove a member\n          from\
    \ the weight calculation, but not deregister it from the\n          group.  When\
    \ quiesced, the member will still show up in the\n          weights, but the quiesce\
    \ flag will be set, and its weight will\n          be zero.  When the administrator\
    \ returns this member to\n          active, the quiesce flag will be 0, and a\
    \ weight will be\n          provided.  If the quiesce flag is on, this member\
    \ should be\n          avoided by the load balancer.\n          +  xxxx xx1x The\
    \ member is quiesced.\n          +  xxxx xx0x The member is active (not quiesced).\n\
    \      C.  Registration Flag (set by the GWM): stores how the member was\n   \
    \       registered.\n          +  xxxx x1xx This member has been registered by\
    \ the load\n             balancer/scheduler.\n          +  xxxx x0xx This member\
    \ has registered itself.\n      D.  Confident Flag (set by the GWM): describes\
    \ whether the GWM has\n          knowledge of this member's state.  If this flag\
    \ is off for\n          only some of the members in the group while the remaining\n\
    \          members have valid weights, the load balancer should avoid\n      \
    \    sending work to those members with the confident flag off.  If\n        \
    \  the confident flag is off for all valid group members, the\n          load\
    \ balancer should disregard any recommendation from the GWM\n          until the\
    \ confident flag comes back on for at least one\n          member.  In this case\
    \ where all confident flags are off, the\n          load balancer should determine\
    \ the correct distribution of\n          work by other means (perhaps a different\
    \ advisor, previously\n          configured static weights, etc.).\n         \
    \ The goal of the confident flag is to convey to the load\n          balancer\
    \ that it should look to other methods of distribution\n          recommendations\
    \ if the GWM cannot give recommendations for any\n          of the valid group\
    \ members.  If some members of the group have\n          the confident flag on\
    \ but the contact flag off or the quiesced\n          flag on (meaning these members\
    \ should always be avoided) while\n          the remaining members of the group\
    \ have their confident flag\n          off, the load balancer should determine\
    \ the appropriate\n          distribution of work for those members with the confident\
    \ flag\n          off by other means.\n          +  xxxx 1xxx GWM has determined\
    \ it has knowledge of the state\n             of this member.\n          +  xxxx\
    \ 0xxx GWM has no knowledge of the state of this member.\n      E.  Leftmost four\
    \ bits are reserved (0000 xxxx - 1111 xxxx).\n   o  Weight: This field represents\
    \ the GWM's recommendation for the\n      relative amount of work that should\
    \ be sent to this member.  This\n      is a 16-bit field with a possible range\
    \ of 0 to 65536.  Load\n      balancers should be prepared to receive a wide range\
    \ of weight\n      values.  Load balancers with limited maximum weight values\
    \ may\n      restrict the granularity of management by the GWM and in turn\n \
    \     cause less than optimal performance.  Many existing\n      implementations\
    \ have supported a minimum raw weight range from 0\n      to 100.\n"
- title: 5.4.  Member State Instance Component
  contents:
  - "5.4.  Member State Instance Component\n   The Member State Instance Component\
    \ is used by the set member state\n   message to indicate the sender's perceived\
    \ state of the member\n   mentioned.  This component is used to set values that\
    \ will ultimately\n   end up in the WeightEntry component.  When the Member State\
    \ Instance\n   component is used, the Member Data TLV it refers to is listed first,\n\
    \   immediately followed by the Member State Instance TLV.\n      0          \
    \         1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Member Data Type (0x3010)   | Size of this Member Data TLV  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                   Member Data Fields                       .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Member State Instance(0x3013) | Size of Member State Inst TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  State Field  |  Flags Field  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \                                Figure 8\n   o  State Field: This field is used\
    \ by the member to communicate state\n      information to the load balancer or\
    \ scheduler.  There are no\n      defined values for this field.\n   o  Flags\
    \ Field: This field describes attributes of the member.\n      Currently the only\
    \ flag value defined is that of the quiesce flag.\n      The quiesce flag is used\
    \ when an administrator would like to\n      temporarily remove a member from\
    \ the weight calculation, but not\n      deregister it from the group.  When quiesced,\
    \ the member will\n      still show up in the weights, but the quiesce flag will\
    \ be set,\n      and its weight will be zero.  When the administrator returns\
    \ this\n      member to active, the quiesce flag will be 0, and a weight will\
    \ be\n      provided.\n      A.  Quiesce Flag\n          +  xxxx xxx1 The member\
    \ or load balancer setting this state is\n             quiescing this member.\n\
    \          +  xxxx xxx0 The member or load balancer setting this state is\n  \
    \           placing the member in a non-quiesced state.\n      B.  Leftmost seven\
    \ bits are reserved (0000 000x - 1111 111x).\n"
- title: 6.  Group Protocol Components
  contents:
  - "6.  Group Protocol Components\n   Group protocol components each contain a collection\
    \ of related\n   singular components.  In particular, they associate Member Data,\n\
    \   Weight Entry, or Member State Instance components to a particular\n   Group\
    \ Data component.  In these cases, the particular \"Group of x\"\n   component\
    \ will be immediately followed by the Group Data component.\n   The Group Data\
    \ component will be immediately followed by any number\n   of singular components\
    \ the group contains.  In figures listed in this\n   document, a component type\
    \ with an asterisk denotes a component that\n   is repeated a number of times.\n"
- title: 6.1.  Group of Member Data Component
  contents:
  - "6.1.  Group of Member Data Component\n   The \"group of member data\" component\
    \ describes a particular group of\n   members and is used in the registration\
    \ message components.\n      0                   1                   2       \
    \            3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Group of Member Data (0x4010) | Size of GroupOfMemberData TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \        Member Count           |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      .                                   \
    \                            .\n      .                        Group Data TLV\
    \                         .\n      .                                         \
    \                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .               *Array of Member Data Components              .\n      . \
    \                                                              .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 9\n   o  Member Count: The number of\
    \ Member Data Components immediately\n      following the Group Data structure.\n\
    \   o  Array of Member Data Components: There will be as many Member Data\n  \
    \    TLVs as Member Count has specified.  A load balancer/scheduler\n      would\
    \ use these components to pass information that would enable\n      the Group\
    \ Workload Manager to identify the members to associate\n      with this Group\
    \ Name.  The Member Data Component was described in\n      Section 5.1.  In DeRegistration\
    \ messages, the Member Count may be\n      set to 0 to indicate all members of\
    \ a particular group.\n"
- title: 6.2.  Group of Weight Data Component
  contents:
  - "6.2.  Group of Weight Data Component\n   The \"Group of Weight Data\" Component\
    \ is used by the get and send\n   weight messages to create a list of Weight Entry\
    \ Components for a\n   particular group.\n      0                   1        \
    \           2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Group Weight Entry Type(0x4011)| Size of GroupOfWeightEntry TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \     Weight Entry Count        |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      .                                   \
    \                            .\n      .                        Group Data TLV\
    \                         .\n      .                                         \
    \                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .              *Array of Weight Entry Data Components           .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 10\n   o  Weight Entry Count: The number\
    \ of Member Data / Weight Entry\n      combinations to follow the Group Data TLV.\n\
    \   o  Array of Weight Entry Data TLVs: There will be as many [Member\n      Data\
    \ / Weight Entry] TLVs as Weight Entry Count has specified.\n      Each Weight\
    \ Entry component is preceded by its corresponding\n      Member Data component\
    \ as explained in Section 5.3.  This Member\n      Data / Weight Entry data combination\
    \ will repeat to form as many\n      Weight Entry items as the Weight Entry Count\
    \ specifies.\n"
- title: 6.3.  Group of Member State Data Components
  contents:
  - "6.3.  Group of Member State Data Components\n   The \"group of member state data\"\
    \ component describes a particular set\n   of members and their corresponding\
    \ state fields used in the Set\n   Member State messages.\n      0           \
    \        1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Group Weight Entry Type(0x4011)| Size of GroupOfWeightEntry TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Member State Instance Count  |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      .                                   \
    \                            .\n      .                        Group Data TLV\
    \                         .\n      .                                         \
    \                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .            *Array of Member State Data Components             .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 11\n   o  Member State Instance Count:\
    \ The number of Member Data / Member\n      State Instance combinations following\
    \ the Group Data component.\n   o  Array of Member State Data Components: Each\
    \ Member State Instance\n      component is immediately preceded by its corresponding\
    \ Member Data\n      component as explained in Section 5.4.  This Member Data\
    \ / Member\n      State Instance combination will repeat to form as many Member\n\
    \      State items as the Member State Instance Count specifies.\n"
- title: 7.  Protocol Messages
  contents:
  - "7.  Protocol Messages\n   SASP messages are a collection of TLVs (Type, Length,\
    \ and Value\n   components).  The header has no information as to what type of\n\
    \   message it is part of; the purpose-specific information is in the\n   message\
    \ component.  This format could facilitate placing more than\n   one message component\
    \ in a single message; however, this use of\n   multiple message components is\
    \ not supported in every GWM and could\n   produce indeterminate behavior.  Similar\
    \ to the other protocol\n   components, when a message component needs to involve\
    \ other\n   components, the additional components immediately follow the message\n\
    \   component.\n   All SASP requests sent to the GWM will be acknowledged with\
    \ a reply.\n   The reply contains information requested as well as a single-byte\n\
    \   response code describing the success of the request.  SASP defines\n   some\
    \ general response codes in the range of 0x00 - 0x3F that may be\n   used regardless\
    \ of the response message type.  However, some request\n   types may cause specific\
    \ error conditions not covered by the general\n   response codes.  The response\
    \ code range of 0x40 - 0xFF is used for\n   these message-specific response codes.\
    \  Any given SASP response will\n   only contain one response code (depending\
    \ on the error type).  This\n   section explains the format and purpose of specific\
    \ SASP messages.\n"
- title: 7.1.  Registration Request and Reply
  contents:
  - "7.1.  Registration Request and Reply\n   This exchange happens between the load\
    \ balancer/scheduler and the\n   Group Workload Manager as well as between the\
    \ Group Workload Manager\n   and the member to register the members in a group\
    \ specified by Group\n   Name.  Applications are identified with an IP address,\
    \ Protocol, and\n   Port.  Systems are identified only with an IP Address (Port\
    \ = 0x0000\n   and Protocol = 0x00).  All members in a group have equivalent\n\
    \   functionality, so the Group Workload Manager can direct routers, load\n  \
    \ balancers, and schedulers to any member in the group.  Even though\n   registrations\
    \ can come from either the load balancer/scheduler or the\n   actual member, member-initiated\
    \ registrations will only be considered\n   if the Trust flag is set while the\
    \ state of the load\n   balancer/scheduler is set.\n"
- title: 7.1.1.  Registration Request
  contents:
  - "7.1.1.  Registration Request\n      0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Registration Req. Type(0x1010)| Size of Registration Req. TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Flag Field  |   Group of Member Data Count  |               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n      .                                                   \
    \            .\n      .           *Array of Group of Member Data Components  \
    \         .\n      .                                                         \
    \      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   *There will be as many Group of Member Data Components as \"Group of\n   Member\
    \ Data Count\" has specified.\n                                 Figure 12\n  \
    \ o  Flag Field\n      A.  Load Balancer Flag\n          +  xxxx xxx1 The entity\
    \ sending this message is the load\n             balancer.\n          +  xxxx\
    \ xxx0 The entity sending this message is an\n             Application.\n    \
    \  B.  Leftmost seven bits are reserved (0000 000x - 1111 111x).\n   o  Group\
    \ of Member Data Count: The number of \"Group of Member Data\"\n      components\
    \ immediately following the Registration Request\n      component.\n   o  Array\
    \ of Group of Member Data Components: Each \"Group of Member\n      Data\" component\
    \ is immediately followed by Group Data Components\n      and its Member Data\
    \ components (as described in Section 6.1).  In\n      the case where several\
    \ of these \"Group of Member Data\" components\n      may be present, the second\
    \ \"Group of Member Data\" component only\n      appears after all of the internal\
    \ components that are referred to\n      by the first \"Group of Member Data\"\
    \ component are listed.  The\n      format is the same for all subsequent \"Group\
    \ of Member Data\"\n      components in the message.\n"
- title: 7.1.2.  Registration Reply
  contents:
  - "7.1.2.  Registration Reply\n      0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Registration Reply Type(0x1015)| Size of Registration Reply TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Return Code  |\n      +-+-+-+-+-+-+-+-+\n                                 Figure\
    \ 13\n   o  General SASP return codes (0x00 - 0x3F)\n      *  0x00 Successful\n\
    \      *  0x10 Message not understood\n      *  0x11 GWM will not accept this\
    \ message from the sender.  Reasons\n         for this include the following:\n\
    \         a. The message was not sent by a LB and trust flag is off\n        \
    \ b. LB attempted to address members of a different LB in the\n            message\n\
    \         c. Vendor specific criteria for this message type were not met.\n  \
    \ o  Message-Specific return codes (0x40 - 0xFF)\n      *  0x40 Member already\
    \ registered\n      *  0x44 Duplicate Member in Request\n      *  0x45 Invalid\
    \ Group (determined by the GWM)\n      *  0x50 Invalid Group Name Size (size ==\
    \ 0)\n      *  0x51 Invalid LB UID Size (size == 0 or > max)\n      *  0x61 Member\
    \ is registering itself, but LB hasn't yet contacted\n         the GWM.  This\
    \ registration will not be processed.\n   **The Invalid Group error return code\
    \ refers to the LB or member\n   attempting to form a group that the GWM considers\
    \ invalid.  For\n   example, some GWM vendors may not support the registration\
    \ of both\n   System and Application members in the same group.  To determine\
    \ what\n   can cause a GWM to return this error code, the vendor's documentation\n\
    \   must be consulted.\n"
- title: 7.2.  DeRegistration Request and Reply
  contents:
  - "7.2.  DeRegistration Request and Reply\n   This exchange happens between the\
    \ load balancer/scheduler and the\n   Group Workload Manager as well as between\
    \ the Group Workload Manager\n   and the Member to deregister members from a group\
    \ specified by Group\n   Name with the Group Workload Manager.  Even though deregistrations\n\
    \   can come from either the load balancer/scheduler or the actual\n   member,\
    \ member-initiated deregistrations will only be considered if\n   the Trust flag\
    \ is set with a Set LB State message.\n"
- title: 7.2.1.  DeRegistration Request
  contents:
  - "7.2.1.  DeRegistration Request\n      0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |DeRegistration Req.Type(0x1020)|Size of DeRegistration Req. TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Flag Field  |     Reason    |   Group of Member Data Count  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .           *Array of Group of Member Data Components           .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   *There will be as many Group of Member Data Components as \"Group of\n   Member\
    \ Data Count\" has specified.\n                                 Figure 14\n  \
    \ o  Flag Field\n      A.  Load Balancer Flag\n          +  xxxx xxx1 The entity\
    \ sending this message is the load\n             balancer.\n          +  xxxx\
    \ xxx0 The entity sending this message is an\n             Application.\n    \
    \  B.  Leftmost seven bits are reserved (0000 000x - 1111 111x).\n   o  Reason:\
    \ Byte describing the reason for deregistering the group or\n      instance.\n\
    \      A.  SASP-defined Reason Codes (0x00-0x7F)\n          +  0x00 No reason\
    \ given.\n          +  0x01 Learned and Purposeful, i.e., a human has deconfigured\n\
    \             this member from the load balancer configuration.\n          + \
    \ 0x80-0xFF Open for vendor specific deregistration reason\n             codes.\n\
    \   o  Group of Member Data Count: The number of \"Group of Member Data\"\n  \
    \    components immediately following the DeRegistration Request\n      component.\n\
    \   o  Array of Group of Member Data Components: Each \"Group of Member\n    \
    \  Data\" component is immediately followed by Group Data Components\n      and\
    \ its Member Data components (as described in Section 6.1).  In\n      this case,\
    \ where several of these \"Group of Member Data\"\n      components may be present,\
    \ the second \"Group of Member Data\"\n      component only appears after all\
    \ of the internal components that\n      are referred to by the first \"Group\
    \ of Member Data\" component are\n      listed.  The format is the same for all\
    \ subsequent \"Group of\n      Member Data\" components in the message.\n   **\
    \ If Member Count equals zero in the Group of Member Data component,\n   the Group\
    \ Workload Manager will deregister the entire group.\n   ** Recall that the Group\
    \ Data Component contains both a Unique LB\n   Identifier field and a Group Name\
    \ field.  If the Group Data component\n   has no Group Name (GroupData's Group\
    \ Name Length==0), the Group\n   Workload Manager will deregister all groups associated\
    \ with this load\n   balancer.\n"
- title: 7.2.2.  DeRegistration Reply
  contents:
  - "7.2.2.  DeRegistration Reply\n      0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   DeReg. Reply Type(0x1025)   |    Size of DeReg. Reply TLV   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Return Code  |\n      +-+-+-+-+-+-+-+-+\n                                 Figure\
    \ 15\n   o  Return Code: A byte return code indicating the status of action\n\
    \      taken.\n      A.  General SASP return codes (0x00 - 0x3F)\n          +\
    \  0x00 Successful\n          +  0x10 Message not understood\n          +  0x11\
    \ GWM will not accept this message from the sender.\n             Reasons for\
    \ this include the following:\n             a. The message was not sent by a LB\
    \ and trust flag is off\n             b. LB attempted to address members of a\
    \ different LB in the\n                message\n             c. Vendor specific\
    \ criteria for this message type were not\n                met.\n      B.  Message-Specific\
    \ return codes (0x40 - 0xFF)\n          +  0x41 Application or System not registered\n\
    \          +  0x42 Unknown Group Name\n          +  0x43 Unknown LB UID\n    \
    \      +  0x44 Duplicate Member in Request\n          +  0x46 Duplicate Group\
    \ in Request (for remove all\n             members/groups requests)\n        \
    \  +  0x51 Invalid LB UID Size (size == 0 or > max)\n          +  0x61 Member\
    \ is deregistering itself, but LB hasn't yet\n             contacted the GWM.\
    \  This deregistration will not be\n             processed.\n"
- title: 7.3.  Get Weights Request and Reply
  contents:
  - "7.3.  Get Weights Request and Reply\n   This exchange happens between the load\
    \ balancer/scheduler and the\n   Group Workload Manager to get weights for the\
    \ groups specified in the\n   list of GroupData objects.  In the case of application\
    \ load balancing\n   (balancing workloads between applications with the same\n\
    \   functionality), the load balancer would call the Group Workload\n   Manager\
    \ every Interval (parameter returned by the Group Workload\n   Manager below)\
    \ to get an array of weights and associated members\n   (e.g., Application1 20,\
    \ SecondCopyOfApplication 30,\n   ThirdCopyOfApplication 5).  The load balancer\
    \ then uses these weights\n   to determine the fashion in which work will be sent\
    \ to each of the\n   members.  For example, in the case of weighted round robin,\
    \ the load\n   balancer/scheduler would then send a request to Application1, the\n\
    \   next to SecondCopyOfApplication, and the next to\n   ThirdCopyOfApplication.\
    \  After 15 requests, the load\n   balancer/scheduler would only send work to\
    \ Application1 and\n   SecondCopyOfApplication.  After an additional 30 requests,\
    \ the load\n   balancer/scheduler would only send requests to\n   SecondCopyofApplication.\
    \  After another 10 requests, the load\n   balancer/scheduler product would start\
    \ over using the weights of 20,\n   30, and 5 again; or if the Interval number\
    \ of seconds have passed,\n   the load balancer/scheduler would get a new set\
    \ of weights.\n"
- title: 7.3.1.  Get Weights Request
  contents:
  - "7.3.1.  Get Weights Request\n      0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Get Weights Req. Type(0x1030) |  Size of Get Weights Req. TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \        Group Data Count       |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      .                                   \
    \                            .\n      .                   *Array of Group Data\
    \ Components             .\n      .                                          \
    \                     .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   *There will be as many Group Data Components as \"Group Data Count\"\n   has\
    \ specified.\n                                 Figure 16\n   o  Group Data Count:\
    \ The number of \"Group Data\" components\n      immediately following the Get\
    \ Weights Request TLV.\n   o  Array of Group Data Components: This array of Group\
    \ Data\n      Components lists the groups for which the load balancer wants to\n\
    \      get weights.\n   ** If there is no group name in the Group Data structure\
    \ of the Get\n   Weights Request, the load balancer is requesting weights for\
    \ all\n   groups registered for the load balancer.\n"
- title: 7.3.2.  Get Weights Reply
  contents:
  - "7.3.2.  Get Weights Reply\n      0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Get Weights Reply Type(0x1035)| Size of Get Weights Reply TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Return Code  |            Interval           | Group of Weight\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Entry Data Count|                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               +\n      .\
    \                                                               .\n      .   \
    \          *Group of Weight Entry Data Components            .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   * There will be as many Group of Weight Entry Data Components as\n   \"Group\
    \ of Weight Entry Data Count\" has specified.\n                              \
    \   Figure 17\n   o  Return Code: A byte return code indicating the status of\
    \ action\n      taken.\n      A.  General SASP return codes (0x00 - 0x3F)\n  \
    \        +  0x00 Successful\n          +  0x10 Message not understood\n      \
    \    +  0x11 GWM will not accept this message from the sender.\n             Reasons\
    \ for this include the following:\n             a. LB attempted to address members\
    \ of a different LB in the\n                message\n             b. Vendor specific\
    \ criteria for this message type were not\n                met.\n      B.  Message-Specific\
    \ return codes (0x40 - 0xFF)\n          +  0x42 Unknown Group Name\n         \
    \ +  0x43 Unknown LB UID\n          +  0x46 Duplicate Group in Request\n     \
    \     +  0x51 Invalid LB uid Size (size == 0 or > max)\n   o  Interval: These\
    \ two bytes indicate a recommended polling interval\n      for the load balancer\
    \ to use.  The Group Workload Manager is\n      stating that any polling interval\
    \ smaller than the suggested\n      interval would probably retrieve values before\
    \ they have had a\n      chance to change.\n   o  Group of Weight Entry Data Components:\
    \ Each \"Group of Weight Data\"\n      component is immediately followed by Group\
    \ Data Components and its\n      Weight Entry Data components (as described in\
    \ Section 6.2).  In\n      this case, where several \"Group of Weight Data\" components\
    \ may be\n      present, the second \"Group of Weight Data\" component only appears\n\
    \      after all of the internal components that are referred to by the\n    \
    \  first \"Group of Weight Data\" component are listed.  The format is\n     \
    \ the same for all subsequent \"Group of Weight Data\" components in\n      the\
    \ message.\n"
- title: 7.4.  Send Weights
  contents:
  - "7.4.  Send Weights\n   This exchange happens between the Group Workload Manager\
    \ and the load\n   balancer/scheduler to send the new weights for the group specified\
    \ in\n   Group Name.  This message is unique in that it is the only message\n\
    \   exchange initiated by the Group Workload Manager and the only message\n  \
    \ that has no reply.  In the case of application load balancing\n   (balancing\
    \ workloads between applications with the same\n   functionality), the Group Workload\
    \ Manager would message the load\n   balancer at a possibly dynamic interval (chosen\
    \ by the Group Workload\n   Manager) to send an array of weights and associated\
    \ members (e.g.,\n   Application1 20, SecondCopyOfApplication 30, ThirdCopyOfApplication\n\
    \   5).  The load balancer then uses these weights to determine the\n   fashion\
    \ in which work will be sent to each of the members.  For\n   example, in the\
    \ case of weighted round robin, the load\n   balancer/scheduler would then send\
    \ a request to Application1, the\n   next to SecondCopyOfApplication, and the\
    \ next to\n   ThirdCopyOfApplication.  After 15 requests, the load\n   balancer/scheduler\
    \ would only send work to Application1 and\n   SecondCopyOfApplication.  After\
    \ another 30 requests, the load\n   balancer/scheduler would only send requests\
    \ to\n   SecondCopyofApplication.  After an additional 10 requests, the load\n\
    \   balancer/scheduler product would start over using the weights of 20,\n   30,\
    \ and 5 again, if it has not yet received a new set of weights.\n   The Group\
    \ Workload Manager only sends this message if the Push flag\n   has been enabled\
    \ using a Set Load Balancer State message.\n      0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Send Weights Type(0x1040)  |    Size of Send Weights TLV   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Group of Weight Data Count   |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      .                                   \
    \                            .\n      .             *Group of Weight Entry Data\
    \ Components            .\n      .                                           \
    \                    .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   * There will be as many Group of Weight Entry Data Components as\n   \"Group\
    \ of Weight Data Count\" has specified.\n                                 Figure\
    \ 18\n   o  Group of Weight Entry Data Components: Each \"Group of Weight Data\"\
    \n      component is immediately followed by Group Data Components and its\n \
    \     Weight Entry Data components (as described in Section 6.2).  In\n      this\
    \ case, where several \"Group of Weight Data\" components may be\n      present,\
    \ the second \"Group of Weight Data\" component only appears\n      after all\
    \ of the internal components that are referred to by the\n      first \"Group\
    \ of Weight Data\" component are listed.  The format is\n      the same for all\
    \ subsequent \"Group of Weight Data\" components in\n      the message.\n"
- title: 7.5.  Set Member State Request and Reply
  contents:
  - "7.5.  Set Member State Request and Reply\n   This is a special exchange that\
    \ can take place between the load\n   balancer and the Group Workload Manager\
    \ or between the Member and the\n   Group Workload Manager to pass information\
    \ about the state of the\n   member including placing the member in quiesced or\
    \ non-quiesced\n   states.  In particular, the load balancer/scheduler can use\
    \ this\n   message to quiesce a set of members.  Members can also use this\n \
    \  message to quiesce themselves as well as to pass certain state\n   information\
    \ to the load balancer/scheduler that is opaque to the\n   Group Workload Manager.\
    \  This opaque state information is passed to\n   the load balancer/scheduler\
    \ with the weights during get and send\n   weight messages.\n"
- title: 7.5.1.  Set Member State Request
  contents:
  - "7.5.1.  Set Member State Request\n       0                   1              \
    \     2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |SetMemberState Req.Type(0x1060)|Size of SetMemberState Req. TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Flag Field  | Group of MemberStateData Count|               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n      .                                                   \
    \            .\n      .        *Array of Group of Member State Data Components\
    \        .\n      .                                                          \
    \     .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   *There will be as many Group of Member State Data Components as\n   \"Group\
    \ of Member State Data Count\" has specified.\n                              \
    \   Figure 19\n   o  Flag Field\n      A.  Load Balancer Flag\n          +  xxxx\
    \ xxx1 The entity sending this message is the load\n             balancer.\n \
    \         +  xxxx xxx0 The entity sending this message is an\n             Application.\n\
    \      B.  Leftmost seven bits are reserved (0000 000x - 1111 111x).\n   o  Group\
    \ of Member State Data Count: The number of \"Group of Member\n      State Data\"\
    \ components immediately following the Set Member State\n      Request TLV.\n\
    \   o  Array of Group of Member Data Components: Each \"Group of Member\n    \
    \  State Data\" component is immediately followed by Group Data\n      Components\
    \ and its Member State Instance components (as described\n      in Section 6.3).\
    \  In the case where several \"Group of Member State\n      Data\" components\
    \ may be present, the second \"Group of Member State\n      Data\" component only\
    \ appears after all of the internal components\n      that are referred to by\
    \ the first \"Group of Member State Data\"\n      component are listed.  The format\
    \ is the same for all subsequent\n      \"Group of Member State Data\" components\
    \ in the message.\n"
- title: 7.5.2.  Set Member State Reply
  contents:
  - "7.5.2.  Set Member State Reply\n      0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Set Member State Reply(0x1025)|Size of SetMemberStateReply TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Return Code  |\n      +-+-+-+-+-+-+-+-+\n                                 Figure\
    \ 20\n   o  Return Code: A byte return code indicating the status of action\n\
    \      taken.\n      A.  General SASP return codes (0x00 - 0x3F)\n          +\
    \  0x00 Successful\n          +  0x10 Message not understood\n          +  0x11\
    \ GWM will not accept this message from the sender.\n             Reasons for\
    \ this include the following:\n             a. The message was not sent by a LB\
    \ and trust flag is off\n             b. LB attempted to address members of a\
    \ different LB in the\n                message\n             c. Vendor specific\
    \ criteria for this message type were not\n                met.\n      B.  Message-Specific\
    \ return codes (0x40 - 0xFF)\n          +  0x41 Application or System not registered\n\
    \          +  0x42 Unknown Group Name\n          +  0x43 Unknown LB UID\n    \
    \      +  0x44 Duplicate Member in Request\n          +  0x46 Duplicate Group\
    \ in Request\n          +  0x50 Invalid Group Name Size (size == 0)\n        \
    \  +  0x51 Invalid LB UID Size (size == 0 or > than max)\n          +  0x61 Member\
    \ is setting state for itself, but LB hasn't yet\n             contacted the GWM.\
    \  This request will not be processed.\n"
- title: 7.6.  Set Load Balancer State Request and Reply
  contents:
  - "7.6.  Set Load Balancer State Request and Reply\n   This is an exchange that\
    \ can take place between the load balancer and\n   the Group Workload Manager\
    \ to pass information about the state (and\n   partial configuration) of the load\
    \ balancer.\n"
- title: 7.6.1.  Set LB State Request
  contents:
  - "7.6.1.  Set LB State Request\n      0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Set LB State Req. Type (0x1050)| Size of Set LB State Req. TLV |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ LB UID Length |                                               |\n      +-+-+-+-+-+-+-+-+\
    \                                               +\n      .                   \
    \                                            .\n      .                      \
    \       LB UID                            .\n      .                         \
    \                                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    LB Health  |    LB Flags   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                 Figure 21\n   o  LB UID Length: one-byte length\
    \ field describing the size of the\n      following LB UID.\n   o  LB UID: This\
    \ should be the same unique identifier given when\n      registering group members\
    \ for this particular load balancer.\n   o  LB Health: This field gives the load\
    \ balancer a chance to pass in\n      a metric describing its own health or state.\n\
    \         0x00 - 0x7F Least Healthy - Most Healthy\n         0x80 - 0xFF Reserved\n\
    \   o  LB Flags:\n      A.  Push Flag\n          +  xxxx xxx1 The load balancer\
    \ should receive weights through\n             the Send Weights message (GWM pushes\
    \ weights to load\n             balancer).  Even if this flag is set, the GWM\
    \ must still\n             respond accordingly to any Get Weights messages from\
    \ the\n             load balancer.\n          +  xxxx xxx0 The load balancer will\
    \ send a Get Weights message\n             to get the new weights.  This is the\
    \ default behavior.\n             (load balancer pulls weights from GWM).\n  \
    \    B.  Trust Flag\n          +  xxxx xx1x Trust any member-initiated registration,\n\
    \             deregistration, or set state message.  Immediately reflect\n   \
    \          the registration, deregistration, or new state in the\n           \
    \  weights sent.\n          +  xxxx xx0x Do not trust any member-initiated registration,\n\
    \             deregistration, or set state message.  Registration,\n         \
    \    Deregistration, and State Setting of members can only occur\n           \
    \  from the load balancer.  Discard any member-initiated\n             registration,\
    \ deregistration, or set state message.  This\n             is the default behavior.\n\
    \      C.  No Change / No Send Flag\n          +  xxxx x1xx The GWM must not include\
    \ members whose weights\n             and state (i.e., contact and quiesce flags)\
    \ have not\n             changed since they were last sent.\n          +  xxxx\
    \ x0xx The GWM must include the weights of all group\n             members when\
    \ sending the weights to this load balancer\n             (including members whose\
    \ weights and state have not\n             changed).  This is the default behavior.\n\
    \      D.  Leftmost five bits are reserved (0000 0xxx - 1111 1xxx).\n"
- title: 7.6.2.  Set LB State Reply
  contents:
  - "7.6.2.  Set LB State Reply\n      0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                      SASP Header TLV                          .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Set LB State Reply (0x1025) | Size of Set LB State Reply TLV|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Return Code  |\n      +-+-+-+-+-+-+-+-+\n                                 Figure\
    \ 22\n   o  Return Code: A byte return code indicating the status of action\n\
    \      taken.\n      A.  General SASP return codes (0x00 - 0x3F)\n          +\
    \  0x00 Successful\n          +  0x10 Message not understood\n          +  0x11\
    \ GWM will not accept this message from the sender.\n             Reasons for\
    \ this include the following:\n             a. LB attempted to address the state\
    \ of a different LB\n             b. Vendor specific criteria for this message\
    \ type were not\n                met.\n      B.  Message-Specific return codes\
    \ (0x40 - 0xFF)\n          +  0x51 Invalid LB UID Size (size == 0 or > max)\n"
- title: 8.  Example of SASP Message Encoding
  contents:
  - "8.  Example of SASP Message Encoding\n   This section provides an example of\
    \ the actual SASP message encoding.\n   For this example, we will look at a sample\
    \ GetWeights Reply in which\n   two webservers are registered to a serverfarm\
    \ called FARM1.  The IP\n   addresses of the two webservers are 10.10.10.1 and\
    \ 10.10.10.2.\n   Currently the GWM has a weight of 40 for 10.10.10.1 and 20 for\n\
    \   10.10.10.2.  The load balancer has a unique Identifier of \"LB1\" and\n  \
    \ the message example was sent by the GWM in response to a request\n   (MessageID:\
    \ 0x32000000) for FARM1's weights.\n   The TLVs necessary for this message are\
    \ shown in the following list.\n   1.  SASP Header TLV\n   ------------------------------------\n\
    \   | | Field   |  Size   |   Value    |\n   |-----------|---------|------------|\n\
    \   |T| Type    | 2 bytes | 0x2010     |\n   |-----------|---------|------------|\n\
    \   |L| Length  | 2 bytes | 0x000D     |\n   |-----------|---------|------------|\n\
    \   | | Version | 1 byte  | 0x01       |\n   | |---------|---------|------------|\n\
    \   |V| Mesg Len| 4 bytes | 0x0000 006A|\n   | |---------|---------|------------|\n\
    \   | | Mesg ID | 4 bytes | 0x3200 0000|\n   ------------------------------------\n\
    \                                   Figure 23\n   2.  Get Weights Reply TLV\n\
    \   ------------------------------------\n   | | Field   |  Size   |   Value \
    \   |\n   |-----------|---------|------------|\n   |T| Type    | 2 bytes | 0x1035\
    \     |\n   |-----------|---------|------------|\n   |L| Length  | 2 bytes | 0x0009\
    \     |\n   |-----------|---------|------------|\n   | | RetCode | 1 byte  | 0x00\
    \       |\n   | |---------|---------|------------|\n   |V| Interval| 2 bytes |\
    \ 0x0040     |\n   | |---------|---------|------------|\n   | |GWD Count| 2 bytes\
    \ | 0x0001     |\n   ------------------------------------\n   *GWD Count = Group\
    \ of Weight Data Count\n                                   Figure 24\n   3.  Group\
    \ of Weight Data TLV\n   ------------------------------------\n   | | Field  \
    \ |  Size   |   Value    |\n   |-----------|---------|------------|\n   |T| Type\
    \    | 2 bytes | 0x4011     |\n   |-----------|---------|------------|\n   |L|\
    \ Length  | 2 bytes | 0x0006     |\n   |-----------|---------|------------|\n\
    \   |V| WE Count| 2 bytes | 0x0002     |\n   ------------------------------------\n\
    \   *WE Count = Weight Entry Count\n                                   Figure\
    \ 25\n   4.  Group Data TLV\n   ------------------------------------\n   | | Field\
    \   |  Size   |   Value    |\n   |-----------|---------|------------|\n   |T|\
    \ Type    | 2 bytes | 0x3011     |\n   |-----------|---------|------------|\n\
    \   |L| Length  | 2 bytes | 0x000E     |\n   |-----------|---------|------------|\n\
    \   | |LBUID len| 1 byte  | 0x03       |\n   | |---------|---------|------------|\n\
    \   | |  LBUID  | 3 bytes | \"LB1\" or   |\n   | |         |         | 0x4C 42\
    \ 31 |\n   |V|---------|---------|------------|\n   | |GroupName| 1 byte  | 0x05\
    \       |\n   | | Length  |         |            |\n   | |---------|---------|------------|\n\
    \   | |  Group  |         | \"FARM1\" or |\n   | |  Name   | 5 bytes | 0x46 41\
    \ 52 |\n   | |         |         |   4D 31    |\n   ------------------------------------\n\
    \                                   Figure 26\n   5.  Member Data TLV\n   ------------------------------------\n\
    \   | | Field   |  Size   |   Value    |\n   |-----------|---------|------------|\n\
    \   |T| Type    | 2 bytes | 0x3010     |\n   |-----------|---------|------------|\n\
    \   |L| Length  | 2 bytes | 0x0018     |\n   |-----------|---------|------------|\n\
    \   | | Protocol| 1 byte  | 0x06       |\n   | |---------|---------|------------|\n\
    \   | |  Port   | 2 bytes | 0x0050     |\n   | |---------|---------|------------|\n\
    \   |V|   IP    |16 bytes | 0x0000 0000|\n   | | Address |         |   0000 0000|\n\
    \   | |         |         |   0000 0000|\n   | |         |         |   0A0A 0A01|\n\
    \   | |---------|---------|------------|\n   | |Label Len| 1 byte  | 0x00    \
    \   |\n   | |---------|---------|------------|\n   | |  Label  | 0 bytes |   \
    \         |\n   ------------------------------------\n                       \
    \            Figure 27\n   6.  Weight Entry Data TLV\n   ------------------------------------\n\
    \   | | Field   |  Size   |   Value    |\n   |-----------|---------|------------|\n\
    \   |T| Type    | 2 bytes | 0x3012     |\n   |-----------|---------|------------|\n\
    \   |L| Length  | 2 bytes | 0x0008     |\n   |-----------|---------|------------|\n\
    \   | | State   | 1 byte  | 0x00       |\n   | |---------|---------|------------|\n\
    \   |V| Flags   | 1 byte  | 0x0D       |\n   | |---------|---------|------------|\n\
    \   | | Weight  | 2 bytes | 0x0028     |\n   ------------------------------------\n\
    \                                   Figure 28\n   7.  Member Data TLV\n   ------------------------------------\n\
    \   | | Field   |  Size   |   Value    |\n   |-----------|---------|------------|\n\
    \   |T| Type    | 2 bytes | 0x3010     |\n   |-----------|---------|------------|\n\
    \   |L| Length  | 2 bytes | 0x0018     |\n   |-----------|---------|------------|\n\
    \   | | Protocol| 1 byte  | 0x06       |\n   | |---------|---------|------------|\n\
    \   | |  Port   | 2 bytes | 0x0050     |\n   | |---------|---------|------------|\n\
    \   |V|   IP    |16 bytes | 0x0000 0000|\n   | | Address |         |   0000 0000|\n\
    \   | |         |         |   0000 0000|\n   | |         |         |   0A0A 0A02|\n\
    \   | |---------|---------|------------|\n   | |Label Len| 1 byte  | 0x00    \
    \   |\n   | |---------|---------|------------|\n   | |  Label  | 0 bytes |   \
    \         |\n   ------------------------------------\n                       \
    \            Figure 29\n   8.  Weight Entry Data TLV\n   ------------------------------------\n\
    \   | | Field   |  Size   |   Value    |\n   |-----------|---------|------------|\n\
    \   |T| Type    | 2 bytes | 0x3012     |\n   |-----------|---------|------------|\n\
    \   |L| Length  | 2 bytes | 0x0008     |\n   |-----------|---------|------------|\n\
    \   | | State   | 1 byte  | 0x00       |\n   | |---------|---------|------------|\n\
    \   |V| Flags   | 1 byte  | 0x0D       |\n   | |---------|---------|------------|\n\
    \   | | Weight  | 2 bytes | 0x0014     |\n   ------------------------------------\n\
    \                                   Figure 30\n   A hex stream representing this\
    \ same message is below:\n      20 10 00 0D 01 00 00 00 6A 32 00 00 00 10 35 00\
    \ 09 00 00 40\n      00 01 40 11 00 06 00 02 30 11 00 0E 03 4C 42 31 05 46 41\
    \ 52\n      4D 31 30 10 00 18 06 00 50 00 00 00 00 00 00 00 00 00 00 00\n    \
    \  00 0A 0A 0A 01 00 30 12 00 08 00 0D 00 28 30 10 00 18 06 00\n      50 00 00\
    \ 00 00 00 00 00 00 00 00 00 00 0A 0A 0A 02 00 30 12\n      00 08 00 0D 00 14\n\
    \   (106 bytes)\n"
- title: 9.  Protocol Flow
  contents:
  - "9.  Protocol Flow\n   This section describes the expected general flow of the\
    \ SASP\n   messages.\n"
- title: 9.1.  Normal Protocol Flow
  contents:
  - "9.1.  Normal Protocol Flow\n   SASP first starts with a connection from an LB\
    \ to the GWM.  This is\n   expected to be a long-running connection and will be\
    \ used for many\n   messages.  After establishing the connection, the LB either\
    \ registers\n   a group of members or sets a Trust flag to allow the members to\n\
    \   register themselves.  The Trust flag is set using a Set LB State\n   Request\
    \ (both message flows are shown below).\n   Registration from load balancer\n\
    \   ------------  Registration Request  ------------------\n   |          |----------------------->|\
    \                |\n   |   Load   |                        | Group Workload |\n\
    \   | Balancer |  Registration Reply    |     Manager    |\n   |          |<-----------------------|\
    \                |\n   ------------                        ------------------\n\
    \   Set LB State from load balancer\n   ------------  Set LB State Request  ------------------\n\
    \   |          |----------------------->|                |\n   |   Load   |  \
    \                      | Group Workload |\n   | Balancer |  Set LB State Reply\
    \    |     Manager    |\n   |          |<-----------------------|            \
    \    |\n   ------------                        ------------------\n          \
    \                       Figure 31\n   The connection can start with other requests,\
    \ but any other request\n   would likely result in an error (unless this connection\
    \ is a\n   reconnection that has happened a short period of time after the\n \
    \  original connection).  For example, if the load balancer issues a\n   deregistration\
    \ request as its first message, it will receive an error\n   because it has not\
    \ registered any groups.\n   The load balancer always drops all state information\
    \ after a loss of\n   connection and can recover it using a GetWeights message.\
    \  The\n   establishment of a new connection causes the GWM to assume that the\n\
    \   old one is broken.  In this case, the GWM will keep all state for the\n  \
    \ load balancer for a limited time after a detected break.  After the\n   limited\
    \ time has expired, all state for the broken connection will be\n   discarded\
    \ by the GWM.\n   Registration of group members may be done at any time.  A load\n\
    \   balancer can register anywhere from one group with one member to many\n  \
    \ groups of many members.  The member may also register itself if the\n   Trust\
    \ flag has been set and it knows the appropriate load balancer\n   information.\
    \  Registrations will add to groups that already exist,\n   but return errors\
    \ if any of the registered members already exist.\n   In the case of system load\
    \ balancing, the representation of a member\n   is only the member's IP address\
    \ with a 0 used as the value for the\n   port and protocol.  In the case of application\
    \ load balancing, the\n   representation of a member is the member's IP address\
    \ and the\n   Application's port and protocol.\n   Deregistration of group members\
    \ may be done at any time.  A load\n   balancer can deregister anywhere from one\
    \ group with one member to\n   many groups of many members.  The LB may also deregister\
    \ entire\n   groups or deregister all of its groups at once.  The member may also\n\
    \   deregister itself if the Trust flag has been set and it knows the\n   appropriate\
    \ load balancer information.\n   Once members are registered, the GWM will start\
    \ the monitoring and\n   weight computation processes to determine weights to\
    \ be sent back to\n   the load balancer.  At any time the load balancer may issue\
    \ a\n   GetWeights message and ask for the weights for members in a\n   particular\
    \ group.  The LB may also set a flag telling the GWM to send\n   the weights without\
    \ waiting for the GetWeights message.  If this flag\n   is set, the GWM will send\
    \ the weights at an interval it feels is\n   appropriate (the interval could change\
    \ depending on the algorithm\n   used and variance of the weights generated).\n\
    \   At any time the LB or a particular member may quiesce the member\n   through\
    \ the use of a SetMemberState message.  In this case, the\n   member's weight\
    \ will always be zero, and the quiesce flag will be\n   turned on when sending\
    \ its weight.  Members may also use this message\n   to send an opaque state value\
    \ that will also be presented when\n   sending weights.\n   At any time, the load\
    \ balancer may choose to send the GWM a\n   SetLBState request to configure its\
    \ interaction.  The message allows\n   the load balancer to set the Push, Trust,\
    \ and NoChange_NoSend flags.\n   It also allows the load balancer to pass a health\
    \ value to the GWM to\n   be displayed.\n"
- title: 9.2.  Behavior in Error Cases
  contents:
  - "9.2.  Behavior in Error Cases\n   While behaviors in many error conditions will\
    \ be product specific,\n   the following error cases should have the following\
    \ expected\n   behavior.\n   Case:  The protocol is violated in an unrecoverable\
    \ manner by either\n      end of the connection.\n   Behavior:  Either end of\
    \ the connection may choose to disconnect to\n      avoid future message synchronization\
    \ problems.  The state kept\n      when disconnected is vendor specific.\n   Case:\
    \  LB or application attempts to connect to the GWM before the\n      GWM is fully\
    \ up and running.\n   Behavior:  The LB or application should wait at least 20\
    \ seconds to\n      retry the connection.\n   Case:  Members attempt to register\
    \ or deregister themselves before\n      the LB develops the connection with the\
    \ GWM.\n   Behavior:  In this case, the members would receive a reply with an\n\
    \      error code signifying that there is no LB registered with that LB\n   \
    \   UID.\n   Case:  Member registers or deregisters for an LB who has not set\
    \ the\n      Trust flag.\n   Behavior:  GWM will send Member a reply containing\
    \ an error code.\n   Case:  LB asks for weights for a group that doesn't exist.\n\
    \   Behavior:  GWM will send LB a reply containing an error code.\n   Case:  LB\
    \ or Member attempts to register a member that is already\n      registered in\
    \ that group.\n   Behavior:  GWM will send sender a reply containing an error\
    \ code.\n   Case:  LB or Member attempts to deregister a member or group that\n\
    \      doesn't exist.\n   Behavior:  GWM will send sender a reply containing an\
    \ error code.\n   Case:  LB or Member tries to set state for a non-registered\
    \ server.\n   Behavior:  GWM will send sender a reply containing an error code.\n\
    \   Case:  LB tries to Get Weights for an unregistered group.\n   Behavior:  GWM\
    \ will send LB a reply containing an error code.\n"
- title: '9.3.  Example Flow 1: Load Balancer Registration, Getting Weights, and'
  contents:
  - "9.3.  Example Flow 1: Load Balancer Registration, Getting Weights, and\n    \
    \  Application-Side Quiescing\n      Load                 Group Workload\n   \
    \ Balancer                   Manager\n       |                         |\n   \
    \    | 1) Registration Request |\n       |------------------------>|\n       |<------------------------|\n\
    \       |    Registration Reply   |\n       |                         |\n    \
    \   | 2) Set LB State Request |\n       |------------------------>|\n       |<------------------------|\n\
    \       |    Set LB State Reply   |\n       |                         |\n    \
    \   | 3) Get Weights Request  |\n       |------------------------>|\n       |<------------------------|\n\
    \       |    Get Weights Reply    |\n       |                         | 4) Set\
    \ Member State Req. --------\n       |                         |<-------------------------|Member|\n\
    \       |                         |------------------------->|  A   |\n      \
    \ |                         |  Set Member State Reply  --------\n       |    \
    \                     |\n       |                         | 5) Set Member State\
    \ Req. --------\n       |                         |<-------------------------|Member|\n\
    \       |                         |------------------------->|  C   |\n      \
    \ |                         |  Set Member State Reply  --------\n       |    \
    \                     |\n       | 6) Get Weights Request  |\n       |------------------------>|\n\
    \       |<------------------------|\n       |    Get Weights Reply    |\n    \
    \   |                         |\n       |                         | 7) Set Member\
    \ State Req. --------\n       |                         |<-------------------------|Member|\n\
    \       |                         |------------------------->|  C   |\n      \
    \ |                         |  Set Member State Reply  --------\n       |    \
    \                     |\n       | 8) Get Weights Request  |\n       |------------------------>|\n\
    \       |<------------------------|\n       |    Get Weights Reply    |\n    \
    \   |                         |\n                                 Figure 32\n\
    \   1.  The LB registers Members A, B, and C in a group named GRP1.  The\n   \
    \    GWM replies with no error.\n   2.  The LB turns its trust flag on by issuing\
    \ a Set LB State message:\n          LB Health: 0x00 Flags: 0000 0010\n   3. \
    \ The LB sends a Get Weights message for GRP1 and gets the reply:\n          Members\
    \      Opaque State     Flags          Weight\n          --------     ------------\
    \     ---------      ------\n          Member A     0x00             0000 1101\
    \      20\n          Member B     0x00             0000 1101      40\n       \
    \   Member C     0x00             0000 1101       5\n   4.  Member A sends a Set\
    \ Member State message with flags:\n          Members       Opaque State     Flags\n\
    \          --------      ------------     ---------\n          Member A      0x32\
    \             0000 0000\n   5.  Member C sends a Set Member State message to quiesce\
    \ itself with\n       the following flags:\n          Members       Opaque State\
    \     Flags\n          --------      ------------     ---------\n          Member\
    \ C      0x0A             0000 0001\n   6.  The LB sends the Get Weights message\
    \ for GRP1 and receives the\n       following:\n          Members       Opaque\
    \ State     Flags          Weight\n          --------      ------------     ---------\
    \      ------\n          Member A      0x32             0000 1101      20\n  \
    \        Member B      0x00             0000 1101      40\n          Member C\
    \      0x0A             0000 1111       5\n   7.  Member C sends a Set Member\
    \ State message to resume (un-quiesce\n       itself) with the following flags:\n\
    \          Members       Opaque State     Flags\n          --------      ------------\
    \     ---------\n          Member C      0x0A             0000 0000\n   8.  The\
    \ LB sends a Get Weights message for GRP1 and gets the reply:\n          Members\
    \       Opaque State     Flags          Weight\n          --------      ------------\
    \     ---------      ------\n          Member A      0x32             0000 1101\
    \      20\n          Member B      0x00             0000 1101      40\n      \
    \    Member C      0x0A             0000 1101       5\n"
- title: '9.4.  Example Flow 2:  Set Load Balancer State, Application'
  contents:
  - "9.4.  Example Flow 2:  Set Load Balancer State, Application\n      Registration,\
    \ and Load Balancer Group DeRegistration\n      Load                 Group Workload\n\
    \    Balancer                   Manager\n       |                         |\n\
    \       | 1) Set LB State Request |\n       |------------------------>|\n    \
    \   |<------------------------|\n       |    Set LB State Reply   |\n       |\
    \                         |\n       |                         | 2) Registration\
    \ Request  --------\n       |                         |<-------------------------|Member|\n\
    \       |                         |------------------------->|  A   |\n      \
    \ |                         |    Registration Reply    --------\n       |    \
    \                     |\n       |                         | 3) Registration Request\
    \  --------\n       |                         |<-------------------------|Member|\n\
    \       |                         |------------------------->|  B   |\n      \
    \ |                         |    Registration Reply    --------\n       |    \
    \                     |\n       | 4) Send Weights Mesg    |\n       |<------------------------|\n\
    \       |                         |\n       |                         | 5) Registration\
    \ Request  --------\n       |                         |<-------------------------|Member|\n\
    \       |                         |------------------------->|  C   |\n      \
    \ |                         |    Registration Reply    --------\n       |    \
    \                     |\n       | 6) Send Weights Mesg    |\n       |<------------------------|\n\
    \       |                         |\n       |7) Deregistration Request|\n    \
    \   |------------------------>|\n       |<------------------------|\n       |\
    \   Deregistration Reply  |\n       |                         |\n            \
    \                     Figure 39\n   1.  The LB sets its state with the Set LB\
    \ State message and the\n       following parameters.\n          Health: 0x7F\
    \ Flags: 0000 0011\n   2.  Member A registers itself for work in GRP1 using the\
    \ Register\n       message.\n   3.  Member B registers itself for work in GRP1\
    \ using the Register\n       message.\n   4.  The GWM issues a Send Weights message\
    \ to the LB.\n          Members       Opaque State     Flags          Weight\n\
    \          --------      ------------     ---------      ------\n          Member\
    \ A      0x00             0000 1001      20\n          Member B      0x00    \
    \         0000 1001      40\n   5.  Member C registers itself for work in GRP1\
    \ using the Register\n       message.\n   6.  The GWM issues a Send Weights message\
    \ to the LB.\n          Members       Opaque State     Flags          Weight\n\
    \          --------      ------------     ---------      ------\n          Member\
    \ A      0x00             0000 1001      20\n          Member B      0x00    \
    \         0000 1001      40\n          Member C      0x00             0000 1001\
    \       5\n   7.  LB deregisters GRP1 by using the DeRegister message with the\n\
    \       Member Data Count = 0\n"
- title: 9.5.  Avoiding Single Points of Failure
  contents:
  - "9.5.  Avoiding Single Points of Failure\n   o  To avoid having a single point\
    \ of failure at the load balancer, an\n      administrator may choose to have\
    \ multiple load balancers in his or\n      her environment.  SASP provides for\
    \ the GWM to keep track of\n      multiple load balancers through the use of load\
    \ balancer unique\n      identifiers (LB UIDs).\n   o  To avoid having a single\
    \ point of failure at the GWM or enhance\n      the load balancing strategy by\
    \ utilizing the strengths of several\n      different GWMs, an administrator may\
    \ choose to have multiple GWMs\n      in his or her environment.  In this case,\
    \ the load balancer would\n      connect to multiple GWMs and register the same\
    \ groups with\n      corresponding members.  The load balancer may choose to coordinate\n\
    \      the recommendations of each GWM by any method it chooses (e.g.,\n     \
    \ statistical combination such as averaging).  The coordination of\n      weights\
    \ from multiple GWMs is product specific and not addressed\n      in this protocol.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   SASP is a binary stream expected to be transported\
    \ over a TCP\n   connection.  To secure this protocol, it is expected that\n \
    \  implementers of the protocol use a secure mode of transport such as\n   SSL/TLS.\
    \  Discussions around security concerns have been listed\n   below:\n   Security\
    \ Issue:  In insecure environments, if the LB UID becomes\n      known by another\
    \ system, the other system could initiate a\n      connection and send messages\
    \ to the GWM causing the GWM to replace\n      the previous (possibly valid) connection\
    \ for the new (potentially\n      bad) connection.\n   Solution:  This may not\
    \ be a concern if the load balancer and GWM are\n      in protected parts of the\
    \ network.  If the administrator is\n      concerned about this vulnerability,\
    \ she should use SSL or TLS to\n      provide authentication for the connection.\
    \  When using SSL or TLS\n      to secure the connection, the administrator SHOULD\
    \ use both server\n      and client authentication through client and server certificates.\n\
    \      The GWM will trust any certificate that is signed by an authority\n   \
    \   it's been configured to trust.\n   Security Issue:  In insecure environments,\
    \ if the load balancer turns\n      the Trust Flag on, any member or other system\
    \ can send a\n      Registration Message and be included in the serverfarm to\
    \ receive\n      work.  A person with bad intentions and the correct information\n\
    \      could exploit this feature and register his own application to\n      receive\
    \ work.  His counterfeit application could capture valuable\n      data from unsuspecting\
    \ clients as their transactions are sent to\n      his system.\n   Solution: \
    \ This may not be a concern if the GWM and its members are\n      in protected\
    \ parts of the network.  If the administrator is\n      concerned about this vulnerability,\
    \ she should use SSL or TLS to\n      provide authentication for the member connections.\
    \  When using SSL\n      or TLS to authenticate the connection, the administrator\
    \ would\n      need to explicitly install valid certificates on each component\n\
    \      while at the same time establishing the trusted certificates of\n     \
    \ each component.  This would make certain that only those trusted\n      components\
    \ would be permitted to connect to the GWM.\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [RFC1700]  Reynolds, J. and J. Postel, \"Assigned\
    \ Numbers\", STD 2,\n              RFC 1700, October 1994.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC4291]  Hinden, R. and S. Deering, \"IP\
    \ Version 6 Addressing\n              Architecture\", RFC 4291, February 2006.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The author gratefully acknowledges contributions\
    \ by Mark Albert,\n   David McCowan, John Fenton, Derek Huckaby, Dyan Collins,\
    \ and Stefano\n   Testa.  Mark Albert, David McCowan, John Fenton, Derek Huckaby,\
    \ Dyan\n   Collins, and Stefano Testa were supported for this work by Cisco\n\
    \   Systems Inc.\n   The author would also like to thank John Arwe, Dave Bostjancic,\
    \ Brian\n   Carpenter, Donna Dillenberger, Gus Kassimis, and Thomas Narten for\n\
    \   their efforts in the creation and refining of this work.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Alan Bivens\n   IBM T.J. Watson Research Center\n   19 Skyline\
    \ Drive\n   Hawthorne, NY  10532\n   US\n   EMail: jbivens@us.ibm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
