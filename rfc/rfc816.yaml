- title: __initial_text__
  contents:
  - "                      FAULT ISOLATION AND RECOVERY\n                        \
    \     David D. Clark\n                  MIT Laboratory for Computer Science\n\
    \               Computer Systems and Communications Group\n                  \
    \             July, 1982\n     1.  Introduction\n     Occasionally, a network\
    \ or a gateway will go down, and the sequence\nof  hops  which the packet takes\
    \ from source to destination must change.\nFault isolation is that action which\
    \  hosts  and  gateways  collectively\ntake  to  determine  that  something  is\
    \  wrong;  fault  recovery is the\nidentification and selection of an alternative\
    \ route which will serve to\nreconnect the source to the destination.  In fact,\
    \ the gateways  perform\nmost  of  the  functions  of  fault  isolation and recovery.\
    \  There are,\nhowever, a few actions which hosts must take if they wish to  provide\
    \  a\nreasonable  level  of  service.   This document describes the portion of\n\
    fault isolation and recovery which is the responsibility of the host.\n     2.\
    \  What Gateways Do\n     Gateways collectively implement an algorithm which \
    \ identifies  the\nbest  route  between  all pairs of networks.  They do this\
    \ by exchanging\npackets  which  contain  each  gateway's  latest   opinion  \
    \ about   the\noperational status of its neighbor networks and gateways.  Assuming\
    \ that\nhas  failed,  but  one  can assume that once a period of negotiation has\n\
    passed, the gateways are equipped with a consistent and correct model of\nthe\
    \ connectivity of the internet.  At present this period of negotiation\nmay actually\
    \ take several minutes, and many TCP implementations time out\nwithin that period,\
    \ but it is a design goal of  the  eventual  algorithm\nthat  the  gateway  should\
    \  be  able to reconstruct the topology quickly\nenough that a TCP connection\
    \ should be able to survive a failure of  the\nroute.\n     3.  Host Algorithm\
    \ for Fault Recovery\n     Since  the gateways always attempt to have a consistent\
    \ and correct\nmodel of the internetwork topology, the host strategy for fault\
    \ recovery\nis very simple.  Whenever the host feels that  something  is  wrong,\
    \  it\nasks the gateway for advice, and, assuming the advice is forthcoming, it\n\
    believes  the  advice  completely.  The advice will be wrong only during\nthe\
    \ transient  period  of  negotiation,  which  immediately  follows  an\noutage,\
    \ but will otherwise be reliably correct.\n     In  fact,  it  is  never  necessary\
    \  for a host to explicitly ask a\ngateway for advice, because the gateway will\
    \ provide it as  appropriate.\nWhen  a  host  sends  a datagram to some distant\
    \ net, the host should be\nprepared to receive back either  of  two  advisory\
    \  messages  which  the\ngateway  may  send.    The  ICMP  \"redirect\"  message\
    \ indicates that the\ngateway to which the host sent the  datagram  is  not  longer\
    \  the  best\ngateway  to  reach the net in question.  The gateway will have forwarded\n\
    unreachable\"  message  indicates  that  as  a result of an outage, it is\ncurrently\
    \ impossible to reach the addressed net or host in  any  manner.\nOn  receipt\
    \  of  this  message, a host can either abandon the connection\nimmediately without\
    \ any further retransmission, or resend slowly to  see\nif the fault is corrected\
    \ in reasonable time.\n     If  a  host  could assume that these two ICMP messages\
    \ would always\narrive when something was amiss in the network, then no other\
    \ action  on\nthe  part  of the host would be required in order maintain its tables\
    \ in\nan optimal condition.  Unfortunately, there are two circumstances  under\n\
    which  the  messages  will  not  arrive  properly.    First,  during the\ntransient\
    \ following a failure, error messages may  arrive  that  do  not\ncorrectly  represent\
    \  the  state of the world.  Thus, hosts must take an\nisolated error message\
    \ with some scepticism.  (This transient period  is\ndiscussed  more  fully  below.)\
    \    Second,  if the host has been sending\ndatagrams to a particular gateway,\
    \ and that gateway itself crashes, then\nall the other gateways in the internet\
    \ will  reconstruct  the  topology,\nbut  the  gateway  in  question will still\
    \ be down, and therefore cannot\nprovide any advice back to the host.  As long\
    \ as the host  continues  to\ndirect  datagrams at this dead gateway, the datagrams\
    \ will simply vanish\noff the face of the earth, and nothing will come back in\
    \ return.   Hosts\nmust detect this failure.\n     If some gateway many hops away\
    \ fails, this is not of concern to the\nhost, for then the discovery of the failure\
    \ is the responsibility of the\ngateway, the one to which the host is immediately\
    \ sending the datagrams,\nfails.   We thus identify one single task which the\
    \ host must perform as\nits part of fault isolation in the internet:  the  host\
    \  must  use  some\nstrategy  to  detect  that a gateway to which it is sending\
    \ datagrams is\ndead.\n     Let us  assume  for  the  moment  that  the  host\
    \  implements  some\nalgorithm  to  detect  failed  gateways; we will return later\
    \ to discuss\nwhat this algorithm might be.  First, let  us  consider  what  the\
    \  host\nshould  do  when it has determined that a gateway is down. In fact, with\n\
    the exception of one small problem, the action the host should  take  is\nextremely\
    \  simple.    The host should select some other gateway, and try\nsending the\
    \ datagram to it.  Assuming that  gateway  is  up,  this  will\neither  produce\
    \  correct  results, or some ICMP advice.  Since we assume\nthat, ignoring temporary\
    \ periods immediately following  an  outage,  any\ngateway  is capable of giving\
    \ correct advice, once the host has received\nadvice from any gateway, that host\
    \ is in as good a condition as  it  can\nhope to be.\n     There is always the\
    \ unpleasant possibility that when the host tries\na different gateway, that gateway\
    \ too will be down.  Therefore, whatever\nalgorithm  the  host  uses to detect\
    \ a dead gateway must continuously be\napplied, as the host tries every gateway\
    \ in turn that it knows about.\n     The only difficult part of this algorithm\
    \ is to specify  the  means\nby which the host maintains the table of all of the\
    \ gateways to which it\nsupplied  with  such a table.  The reason is that different\
    \ networks may\nprovide very different mechanisms by which this table can be filled\
    \  in.\nFor  example,  if  the  net is a broadcast net, such as an ethernet or\
    \ a\nringnet, every gateway may simply broadcast such a table  from  time  to\n\
    time,  and  the  host  need do nothing but listen to obtain the required\ninformation.\
    \  Alternatively, the network may provide  the  mechanism  of\nlogical  addressing,\
    \  by  which  a whole set of machines can be provided\nwith a single group  address,\
    \  to  which  a  request  can  be  sent  for\nassistance.   Failing those two\
    \ schemes, the host can build up its table\nof neighbor gateways by remembering\
    \ all the gateways from which  it  has\never received a message.  Finally, in\
    \ certain cases, it may be necessary\nfor  this  table,  or  at  least the initial\
    \ entries in the table, to be\nconstructed manually by a manager or operator at\
    \ the  site.    In  cases\nwhere  the  network  in question provides absolutely\
    \ no support for this\nkind of host query, at least some manual intervention will\
    \  be  required\nto  get  started,  so  that  the  host  can  find out about at\
    \ least one\ngateway.\n     4.  Host Algorithms for Fault Isolation\n     We now\
    \ return to the question raised above.  What  strategy  should\nthe  host use\
    \ to detect that it is talking to a dead gateway, so that it\ncan know to switch\
    \ to some other gateway in the list. In fact, there are\nseveral algorithms which\
    \ can be used.   All  are  reasonably  simple  to\nimplement, but they have very\
    \ different implications for the overhead on\nthe  host, the gateway, and the\
    \ network.  Thus, to a certain extent, the\n1.  NETWORK LEVEL DETECTION\n    \
    \ Many  networks,  particularly  the  Arpanet,  perform precisely the\nrequired\
    \ function internal to the network.  If a host sends  a  datagram\nto  a dead\
    \ gateway on the Arpanet, the network will return a \"host dead\"\nmessage, which\
    \ is precisely the information the host needs  to  know  in\norder  to  switch\
    \  to  another  gateway.   Some early implementations of\nInternet on  the  Arpanet\
    \  threw  these  messages  away.    That  is  an\nexceedingly poor idea.\n2. \
    \ CONTINUOUS POLLING\n     The  ICMP  protocol  provides an echo mechanism by\
    \ which a host may\nsolicit a response from a gateway.    A  host  could  simply\
    \  send  this\nmessage  at  a  reasonable  rate, to assure itself continuously\
    \ that the\ngateway was still up.  This works, but, since the message must  be\
    \  sent\nfairly  often  to  detect  a fault in a reasonable time, it can imply\
    \ an\nunbearable overhead on the host itself, the network,  and  the  gateway.\n\
    This  strategy  is  prohibited  except  where  a  specific  analysis has\nindicated\
    \ that the overhead is tolerable.\n3.  TRIGGERED POLLING\n     If the use of polling\
    \ could be restricted to only those times  when\nsomething  seemed  to  be  wrong,\
    \  then  the overhead would be bearable.\nProvided that one can get the proper\
    \  advice  from  one's  higher  level\nsegment  more  than  once,  it  sent  a\
    \  hint down to the IP layer which\ntriggered polling.  This strategy does not\
    \ have excessive overhead,  but\ndoes  have  the problem that the host may be\
    \ somewhat slow to respond to\nan error, since only after polling has started\
    \ will the host be able  to\nconfirm  that  something  has  gone wrong, and by\
    \ then the TCP above may\nhave already timed out.\n     Both forms of polling\
    \ suffer from a minor flaw.  Hosts as  well  as\ngateways respond to ICMP echo\
    \ messages.  Thus, polling cannot be used to\ndetect  the  error  that  a  foreign\
    \  address thought to be a gateway is\nactually a host.  Such a confusion can\
    \ arise if the  physical  addresses\nof machines are rearranged.\n4.  TRIGGERED\
    \ RESELECTION\n     There  is a strategy which makes use of a hint from a higher\
    \ level,\nas did the previous  strategy,  but  which  avoids  polling  altogether.\n\
    Whenever  a  higher  level  complains  that  the  service  seems  to  be\ndefective,\
    \ the Internet layer can pick the next gateway from the list of\navailable gateways,\
    \ and switch to it.  Assuming that this gateway is up,\nno real harm can come\
    \ of this decision, even if it was  wrong,  for  the\nworst that will happen is\
    \ a redirect message which instructs the host to\nreturn to the gateway originally\
    \ being used.  If, on the other hand, the\noriginal  gateway  was indeed down,\
    \ then this immediately provides a new\nroute, so the period of time until recovery\
    \ is  shortened.    This  last\nstrategy  seems  particularly clever, and is probably\
    \ the most generally\nsuitable for those cases where the network itself does not\
    \ provide fault\n     5.  Higher Level Fault Detection\n     The  previous  discussion\
    \  has  concentrated on fault detection and\nrecovery at the IP layer.  This section\
    \ considers what the higher layers\nsuch as TCP should do.\n     TCP has a single\
    \ fault recovery action; it repeatedly retransmits a\nsegment until either it\
    \ gets an acknowledgement or its connection  timer\nexpires.    As discussed above,\
    \ it may use retransmission as an event to\ntrigger a request for fault recovery\
    \ to the IP  layer.    In  the  other\ndirection,  information  may  flow  up\
    \ from IP, reporting such things as\nICMP  Destination  Unreachable  or  error\
    \  messages  from  the  attached\nnetwork.    The  only  subtle  question about\
    \ TCP and faults is what TCP\nshould do when such an error message arrives  or\
    \  its  connection  timer\nexpires.\n     The  TCP  specification discusses the\
    \ timer.  In the description of\nthe open call, the timeout is described as an\
    \ optional  value  that  the\nclient  of  TCP  may  specify; if any segment remains\
    \ unacknowledged for\nthis period, TCP should abort the  connection.    The  default\
    \  for  the\ntimeout  is  30 seconds.  Early TCPs were often implemented with\
    \ a fixed\ntimeout interval, but this  did  not  work  well  in  practice,  as\
    \  the\nfollowing discussion may suggest.\n     Clients  of  TCP can be divided\
    \ into two classes:  those running on\nimmediate behalf of a human, such as  Telnet,\
    \  and  those  supporting  a\nabandon the connection at once, or wait for a long\
    \ time to see if things\nget  better.   Programs do not have this human impatience,\
    \ but also lack\nthe power to make complex decisions based on details of the exact\
    \  error\ncondition.  For them, a simple timeout is reasonable.\n     Based  on\
    \ these considerations, at least two modes of operation are\nneeded in TCP.  One,\
    \  for  programs,  abandons  the  connection  without\nexception  if  the  TCP\
    \  timer  expires.    The other mode, suitable for\npeople, never abandons the\
    \ connection on its own initiative, but reports\nto the layer above when the timer\
    \ expires.  Thus, the human user can see\nerror messages coming from all the relevant\
    \ layers, TCP  and  ICMP,  and\ncan request TCP to abort as appropriate.  This\
    \ second mode requires that\nTCP  be  able to send an asynchronous message up\
    \ to its client to report\nthe timeout, and it requires  that  error  messages\
    \  arriving  at  lower\nlayers similarly flow up through TCP.\n     At  levels\
    \  above TCP, fault detection is also required.  Either of\nthe following can\
    \ happen.  First, the foreign client of  TCP  can  fail,\neven  though TCP is\
    \ still running, so data is still acknowledged and the\ntimer never expires. \
    \ Alternatively, the communication  path  can  fail,\nwithout the TCP timer going\
    \ off, because the local client has no data to\nsend.  Both of these have caused\
    \ trouble.\n     Sending  mail  provides an example of the first case.  When sending\n\
    mail using SMTP, there is an SMTP level acknowledgement that is returned\nwhen\
    \ a piece of mail is successfully  delivered.    Several  early  mail\nunacknowledged\
    \  data)  but  before the mail was acknowledged at the SMTP\nlevel.  This failure\
    \ would cause early mail senders to wait forever  for\nthe  SMTP level acknowledgement.\
    \  The obvious cure was to set a timer at\nthe SMTP level, but the first attempt\
    \ to do this did not work, for there\nwas no simple way to  select  the  timer\
    \  interval.    If  the  interval\nselected  was  short,  it  expired  in normal\
    \ operational when sending a\nlarge file to a slow host.  An interval of many\
    \ minutes  was  needed  to\nprevent  false timeouts, but that meant that failures\
    \ were detected only\nvery slowly.  The current solution in  several  mailers\
    \  is  to  pick  a\ntimeout interval proportional to the size of the message.\n\
    \     Server telnet provides an example of the other kind of failure.  It\ncan\
    \  easily  happen that the communications link can fail while there is\nno traffic\
    \ flowing, perhaps because the user is thinking.    Eventually,\nthe  user will\
    \ attempt to type something, at which time he will discover\nthat the connection\
    \ is dead and abort it.   But  the  host  end  of  the\nconnection,  having  nothing\
    \  to send, will not discover anything wrong,\nand will remain waiting forever.\
    \  In some systems there is no way for  a\nuser  in  a  different  process  to\
    \  destroy or take over such a hanging\nprocess, so there is no way to recover.\n\
    \     One solution to this would be to have the host server telnet  query\nthe\
    \  user  end now and then, to see if it is still up.  (Telnet does not\nhave an\
    \ explicit query  feature,  but  the  host  could  negotiate  some\nunimportant\
    \   option,   which   should   produce   either  agreement  or\ncan  generate\
    \  an unacceptable amount of traffic and system overhead.  A\nsmart server telnet\
    \ would use  this  query  only  when  something  seems\nwrong, perhaps when there\
    \ had been no user activity for some time.\n     In  both  these  cases, the general\
    \ conclusion is that client level\nerror detection is needed, and that the details\
    \  of  the  mechanism  are\nvery dependent on the application.  Application programmers\
    \ must be made\naware  of  the  problem  of  failures,  and  must  understand\
    \ that error\ndetection at the TCP or lower level cannot solve the whole  problem\
    \  for\nthem.\n     6.  Knowing When to Give Up\n     It  is  not  obvious,  when\
    \ error messages such as ICMP Destination\nUnreachable arrive, whether TCP should\
    \  abandon  the  connection.    The\nreason  that  error  messages  are  difficult\
    \  to  interpret is that, as\ndiscussed above, after a failure of a gateway or\
    \  network,  there  is  a\ntransient   period   during   which  the  gateways\
    \  may  have  incorrect\ninformation,  so  that  irrelevant  or  incorrect  error\
    \  messages   may\nsometimes  return.   An isolated ICMP Destination Unreachable\
    \ may arrive\nat a host, for example, if a packet is sent during the period  when\
    \  the\ngateways  are  trying  to find a new route.  To abandon a TCP connection\n\
    based on such a message arriving would be to ignore the valuable feature\nof the\
    \ Internet that for many  internal  failures  it  reconstructs  its\nfunction\
    \ without any disruption of the end points.\nthey  arrive  in response to opening\
    \ a new connection, they probably are\ncaused by opening the connection improperly\
    \  (e.g.,  to  a  non-existent\naddress)  rather  than  by  a  transient  network\
    \ failure.  Second, they\nprovide valuable information, after the TCP timeout\
    \ has occurred, as  to\nthe  probable  cause of the failure.  Finally, certain\
    \ messages, such as\nICMP Parameter Problem, imply a possible  implementation\
    \  problem.    In\ngeneral, error messages give valuable information about what\
    \ went wrong,\nbut  are  not  to  be  taken as absolutely reliable.  A general\
    \ alerting\nmechanism, such as the TCP timeout  discussed  above,  provides  a\
    \  good\nindication  that  whatever  is wrong is a serious condition, but without\n\
    the advisory messages to augment the timer, there  is  no  way  for  the\nclient\
    \  to  know  how  to  respond to the error.  The combination of the\ntimer and\
    \ the advice from the error messages provide a reasonable set of\nfacts for the\
    \ client layer to have.  It is important that error messages\nfrom all layers\
    \ be passed up to  the  client  module  in  a  useful  and\nconsistent way.\n"
