- title: __initial_text__
  contents:
  - '      The Domain Naming Convention for Internet User Applications

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   For many years, the naming convention \"<user>@<host>\"\
    \ has served the\n   ARPANET user community for its mail system, and the substring\n\
    \   \"<host>\" has been used for other applications such as file transfer\n  \
    \ (FTP) and terminal access (Telnet).  With the advent of network\n   interconnection,\
    \ this naming convention needs to be generalized to\n   accommodate internetworking.\
    \  A decision has recently been reached to\n   replace the simple name field,\
    \ \"<host>\", by a composite name field,\n   \"<domain>\" [2].  This note is an\
    \ attempt to clarify this generalized\n   naming convention, the Internet Naming\
    \ Convention, and to explore the\n   implications of its adoption for Internet\
    \ name service and user\n   applications.\n   The following example illustrates\
    \ the changes in naming convention:\n      ARPANET Convention:   Fred@ISIF\n \
    \     Internet Convention:  Fred@F.ISI.ARPA\n   The intent is that the Internet\
    \ names be used to form a\n   tree-structured administrative dependent, rather\
    \ than a strictly\n   topology dependent, hierarchy.  The left-to-right string\
    \ of name\n   components proceeds from the most specific to the most general,\
    \ that\n   is, the root of the tree, the administrative universe, is on the\n\
    \   right.\n   The name service for realizing the Internet naming convention is\n\
    \   assumed to be application independent.  It is not a part of any\n   particular\
    \ application, but rather an independent name service serves\n   different user\
    \ applications.\n"
- title: 2.  The Structural Model
  contents:
  - "2.  The Structural Model\n   The Internet naming convention is based on the domain\
    \ concept.  The\n   name of a domain consists of a concatenation of one or more\
    \ <simple\n   names>.  A domain can be considered as a region of jurisdiction\
    \ for\n   name assignment and of responsibility for name-to-address\n   translation.\
    \  The set of domains forms a hierarchy.\n   Using a graph theory representation,\
    \ this hierarchy may be modeled as\n   a directed graph.  A directed graph consists\
    \ of a set of nodes and a\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ collection of arcs, where arcs are identified by ordered pairs of\n   distinct\
    \ nodes [1].  Each node of the graph represents a domain.  An\n   ordered pair\
    \ (B, A), an arc from B to A, indicates that B is a\n   subdomain of domain A,\
    \ and B is a simple name unique within A.  We\n   will refer to B as a child of\
    \ A, and A a parent of B.  The directed\n   graph that best describes the naming\
    \ hierarchy is called an\n   \"in-tree\", which is a rooted tree with all arcs\
    \ directed towards the\n   root (Figure 1). The root of the tree represents the\
    \ naming universe,\n   ancestor of all domains.  Endpoints (or leaves) of the\
    \ tree are the\n   lowest-level domains.\n                         U\n       \
    \                / | \\\n                     /   |   \\          U -- Naming\
    \ Universe\n                    ^    ^    ^         I -- Intermediate Domain\n\
    \                    |    |    |         E -- Endpoint Domain\n              \
    \      I    E    I\n                  /   \\       |\n                 ^     ^\
    \      ^\n                 |     |      |\n                 E     E      I\n \
    \                           / | \\\n                           ^  ^  ^\n     \
    \                      |  |  |\n                           E  E  E\n         \
    \                       Figure 1\n                 The In-Tree Model for Domain\
    \ Hierarchy\n   The simple name of a child in this model is necessarily unique\
    \ within\n   its parent domain.  Since the simple name of the child's parent is\n\
    \   unique within the child's grandparent domain, the child can be\n   uniquely\
    \ named in its grandparent domain by the concatenation of its\n   simple name\
    \ followed by its parent's simple name.\n      For example, if the simple name\
    \ of a child is \"C1\" then no other\n      child of the same parent may be named\
    \ \"C1\".  Further, if the\n      parent of this child is named \"P1\", then \"\
    P1\" is a unique simple\n      name in the child's grandparent domain.  Thus,\
    \ the concatenation\n      C1.P1 is unique in C1's grandparent domain.\n   Similarly,\
    \ each element of the hierarchy is uniquely named in the\n   universe by its complete\
    \ name, the concatenation of its simple name\n   and those for the domains along\
    \ the trail leading to the naming\n   universe.\n   The hierarchical structure\
    \ of the Internet naming convention supports\n   decentralization of naming authority\
    \ and distribution of name service\n   capability.  We assume a naming authority\
    \ and a name server\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ associated with each domain.  In Sections 5 and 6 respectively the\n   name\
    \ service and the naming authority are discussed.\n   Within an endpoint domain,\
    \ unique names are assigned to <user>\n   representing user mailboxes.  User mailboxes\
    \ may be viewed as\n   children of their respective domains.\n   In reality, anomalies\
    \ may exist violating the in-tree model of naming\n   hierarchy.  Overlapping\
    \ domains imply multiple parentage, i.e., an\n   entity of the naming hierarchy\
    \ being a child of more than one domain.\n   It is conceivable that ISI can be\
    \ a member of the ARPA domain as well\n   as a member of the USC domain (Figure\
    \ 2).  Such a relation\n   constitutes an anomaly to the rule of one-connectivity\
    \ between any\n   two points of a tree.  The common child and the sub-tree below\
    \ it\n   become descendants of both parent domains.\n                        \
    \         U\n                               / | \\\n                         \
    \    /   .   \\\n                           .     .   ARPA\n                 \
    \        .       .     | \\\n                                USC    |   \\\n \
    \                                  \\   |     .\n                            \
    \         \\ |       .\n                                      ISI\n          \
    \                      Figure 2\n                      Anomaly in the In-Tree\
    \ Model\n   Some issues resulting from multiple parentage are addressed in\n \
    \  Appendix B.  The general implications of multiple parentage are a\n   subject\
    \ for further investigation.\n"
- title: 3.  Advantage of Absolute Naming
  contents:
  - "3.  Advantage of Absolute Naming\n   Absolute naming implies that the (complete)\
    \ names are assigned with\n   respect to a universal reference point.  The advantage\
    \ of absolute\n   naming is that a name thus assigned can be universally interpreted\n\
    \   with respect to the universal reference point.  The Internet naming\n   convention\
    \ provides absolute naming with the naming universe as its\n   universal reference\
    \ point.\n   For relative naming, an entity is named depending upon the position\n\
    \   of the naming entity relative to that of the named entity.  A set of\n   hosts\
    \ running the \"unix\" operating system exchange mail using a\n   method called\
    \ \"uucp\".  The naming convention employed by uucp is an\n   example of relative\
    \ naming.  The mail recipient is typically named by\n   a source route identifying\
    \ a chain of locally known hosts linking the\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ sender's host to the recipient's.  A destination name can be, for\n   example,\n\
    \      \"alpha!beta!gamma!john\",\n   where \"alpha\" is presumably known to the\
    \ originating host, \"beta\" is\n   known to \"alpha\", and so on.\n   The uucp\
    \ mail system has demonstrated many of the problems inherent\n   to relative naming.\
    \  When the host names are only locally\n   interpretable, routing optimization\
    \ becomes impossible.  A reply\n   message may have to traverse the reverse route\
    \ to the original sender\n   in order to be forwarded to other parties.\n   Furthermore,\
    \ if a message is forwarded by one of the original\n   recipients or passed on\
    \ as the text of another message, the frame of\n   reference of the relative source\
    \ route can be completely lost.  Such\n   relative naming schemes have severe\
    \ problems for many of the uses\n   that we depend upon in the ARPA Internet community.\n"
- title: 4.  Interoperability
  contents:
  - "4.  Interoperability\n   To allow interoperation with a different naming convention,\
    \ the names\n   assigned by a foreign naming convention need to be accommodated.\n\
    \   Given the autonomous nature of domains, a foreign naming environment\n   may\
    \ be incorporated as a domain anywhere in the hierarchy.  Within\n   the naming\
    \ universe, the name service for a domain is provided within\n   that domain.\
    \  Thus, a foreign naming convention can be independent of\n   the Internet naming\
    \ convention.  What is implied here is that no\n   standard convention for naming\
    \ needs to be imposed to allow\n   interoperations among heterogeneous naming\
    \ environments.\n      For example:\n         There might be a naming convention,\
    \ say, in the FOO world,\n         something like \"<user>%<host>%<area>\".  Communications\
    \ with an\n         entity in that environment can be achieved from the Internet\n\
    \         community by simply appending \".FOO\" on the end of the name in\n \
    \        that foreign convention.\n            John%ISI-Tops20-7%California.FOO\n\
    \      Another example:\n         One way of accommodating the \"uucp world\"\
    \ described in the last\n         section is to declare it as a foreign system.\
    \  Thus, a uucp\n         name\n            \"alpha!beta!gamma!john\"\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \       might be known in the Internet community as\n            \"alpha!beta!gamma!john.UUCP\"\
    .\n      Communicating with a complex subdomain is another case which can\n  \
    \    be treated as interoperation.  A complex subdomain is a domain\n      with\
    \ complex internal naming structure presumably unknown to the\n      outside world\
    \ (or the outside world does not care to be concerned\n      with its complexity).\n\
    \   For the mail system application, the names embedded in the message\n   text\
    \ are often used by the destination for such purpose as to reply\n   to the original\
    \ message.  Thus, the embedded names may need to be\n   converted for the benefit\
    \ of the name server in the destination\n   environment.\n   Conversion of names\
    \ on the boundary between heterogeneous naming\n   environments is a complex subject.\
    \  The following example illustrates\n   some of the involved issues.\n      For\
    \ example:\n         A message is sent from the Internet community to the FOO\n\
    \         environment.  It may bear the \"From\" and \"To\" fields as:\n     \
    \       From: Fred@F.ISI.ARPA\n            To:   John%ISI-Tops20-7%California.FOO\n\
    \         where \"FOO\" is a domain independent of the Internet naming\n     \
    \    environment.  The interface on the boundary of the two\n         environments\
    \ may be represented by a software module.  We may\n         assume this interface\
    \ to be an entity of the Internet community\n         as well as an entity of\
    \ the FOO community.  For the benefit of\n         the FOO environment, the \"\
    From\" and \"To\" fields need to be\n         modified upon the message's arrival\
    \ at the boundary. One may\n         view naming as a separate layer of protocol,\
    \ and treat\n         conversion as a protocol translation.  The matter is\n \
    \        complicated when the message is sent to more than one\n         destination\
    \ within different naming environments; or the\n         message is destined within\
    \ an environment not sharing boundary\n         with the originating naming environment.\n\
    \   While the general subject concerning conversion is beyond the scope\n   of\
    \ this note, a few questions are raised in Appendix D.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: 5.  Name Service
  contents:
  - "5.  Name Service\n   Name service is a network service providing name-to-address\n\
    \   translation.  Such service may be achieved in a number of ways.  For\n   a\
    \ simple networking environment, it can be accomplished with a single\n   central\
    \ database containing name-to-address correspondence for all\n   the pertinent\
    \ network entities, such as hosts.\n   In the case of the old ARPANET host names,\
    \ a central database is\n   duplicated in each individual host.  The originating\
    \ module of an\n   application process would query the local name service (e.g.,\
    \ make a\n   system call) to obtain network address for the destination host.\
    \ With\n   the proliferation of networks and an accelerating increase in the\n\
    \   number of hosts participating in networking, the ever growing size,\n   update\
    \ frequency, and the dissemination of the central database makes\n   this approach\
    \ unmanageable.\n   The hierarchical structure of the Internet naming convention\
    \ supports\n   decentralization of naming authority and distribution of name service\n\
    \   capability.  It readily accommodates growth of the naming universe.\n   It\
    \ allows an arbitrary number of hierarchical layers.  The addition\n   of a new\
    \ domain adds little complexity to an existing Internet\n   system.\n   The name\
    \ service at each domain is assumed to be provided by one or\n   more name servers.\
    \  There are two models for how a name server\n   completes its work, these might\
    \ be called \"iterative\" and\n   \"recursive\".\n      For an iterative name\
    \ server there may be two kinds of responses.\n      The first kind of response\
    \ is a destination address.  The second\n      kind of response is the address\
    \ of another name server.  If the\n      response is a destination address, then\
    \ the query is satisfied. If\n      the response is the address of another name\
    \ server, then the query\n      must be repeated using that name server, and so\
    \ on until a\n      destination address is obtained.\n      For a recursive name\
    \ server there is only one kind of response --\n      a destination address. \
    \ This puts an obligation on the name server\n      to actually make the call\
    \ on another name server if it can't\n      answer the query itself.\n   It is\
    \ noted that looping can be avoided since the names presented for\n   translation\
    \ can only be of finite concatenation.  However, care\n   should be taken in employing\
    \ mechanisms such as a pointer to the next\n   simple name for resolution.\n \
    \  We believe that some name servers will be recursive, but we don't\n   believe\
    \ that all will be.  This means that the caller must be\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ prepared for either type of server.  Further discussion and examples\n   of\
    \ name service is given in Appendix C.\n   The basic name service at each domain\
    \ is the translation of simple\n   names to addresses for all of its children.\
    \  However, if only this\n   basic name service is provided, the use of complete\
    \ (or fully\n   qualified) names would be required.  Such requirement can be\n\
    \   unreasonable in practice.  Thus, we propose the use of partial names\n   in\
    \ the context in which their uniqueness is preserved.  By\n   construction, naming\
    \ uniqueness is preserved within the domain of a\n   common ancestry. Thus, a\
    \ partially qualified name is constructed by\n   omitting from the complete name\
    \ ancestors common to the communicating\n   parties. When a partially qualified\
    \ name leaves its context of\n   uniqueness it must be additionally qualified.\n\
    \   The use of partially qualified names places a requirement on the\n   Internet\
    \ name service.  To satisfy this requirement, the name service\n   at each domain\
    \ must be capable of, in addition to the basic service,\n   resolving simple names\
    \ for all of its ancestors (including itself)\n   and their children.  In Appendix\
    \ B, the required distinction among\n   simple names for such resolution is addressed.\n"
- title: 6.  Naming Authority
  contents:
  - "6.  Naming Authority\n   Associated with each domain there must be a naming authority\
    \ to\n   assign simple names and ensure proper distinction among simple names.\n\
    \   Note that if the use of partially qualified names is allowed in a\n   sub-domain,\
    \ the uniqueness of simple names inside that sub-domain is\n   insufficient to\
    \ avoid ambiguity with names outside the subdomain.\n   Appendix B discusses simple\
    \ name assignment in a sub-domain that\n   would allow the use of partially qualified\
    \ names without ambiguity.\n   Administratively, associated with each domain there\
    \ is a single\n   person (or office) called the registrar.  The registrar of the\
    \ naming\n   universe specifies the top-level set of domains and designates a\n\
    \   registrar for each of these domains.  The registrar for any given\n   domain\
    \ maintains the naming authority for that domain.\n"
- title: 7.  Network-Oriented Applications
  contents:
  - "7.  Network-Oriented Applications\n   For user applications such as file transfer\
    \ and terminal access, the\n   remote host needs to be named.  To be compatible\
    \ with ARPANET naming\n   convention, a host can be treated as an endpoint domain.\n\
    \   Many operating systems or programming language run-time environments\n   provide\
    \ functions or calls (JSYSs, SVCs, UUOs, SYSs, etc.) for\n   standard services\
    \ (e.g., time-of-day, account-of-logged-in-user,\n   convert-number-to-string).\
    \  It is likely to be very helpful if such a\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ function or call is developed for translating a host name to an\n   address.\
    \  Indeed, several systems on the ARPANET already have such\n   facilities for\
    \ translating an ARPANET host name into an ARPANET\n   address based on internal\
    \ tables.\n   We recommend that this provision of a standard function or call\
    \ for\n   translating names to addresses be extended to accept names of\n   Internet\
    \ convention.  This will promote a consistent interface to the\n   users of programs\
    \ involving internetwork activities.  The standard\n   facility for translating\
    \ Internet names to Internet addresses should\n   include all the mechanisms available\
    \ on the host, such as checking a\n   local table or cache of recently checked\
    \ names, or consulting a name\n   server via the Internet.\n"
- title: 8.  Mail Relaying
  contents:
  - "8.  Mail Relaying\n   Relaying is a feature adopted by more and more mail systems.\n\
    \   Relaying facilitates, among other things, interoperations between\n   heterogeneous\
    \ mail systems.  The term \"relay\" is used to describe the\n   situation where\
    \ a message is routed via one or more intermediate\n   points between the sender\
    \ and the recipient.  The mail relays are\n   normally specified explicitly as\
    \ relay points in the instructions for\n   message delivery. Usually, each of\
    \ the intermediate relays assume\n   responsibility for the relayed message [3].\n\
    \      A point should be made on the basic difference between mail\n      relaying\
    \ and the uucp naming system.  The difference is that\n      although mail relaying\
    \ with absolute naming can also be considered\n      as a form of source routing,\
    \ the names of each intermediate points\n      and that of the destination are\
    \ universally interpretable, while\n      the host names along a source route\
    \ of the uucp convention is\n      relative and thus only locally interpretable.\n\
    \   The Internet naming convention explicitly allows interoperations\n   among\
    \ heterogeneous systems.  This implies that the originator of a\n   communication\
    \ may name a destination which resides in a foreign\n   system.  The probability\
    \ is that the destination network address may\n   not be comprehensible to the\
    \ transport system of the originator.\n   Thus, an implicit relaying mechanism\
    \ is called for at the boundary\n   between the domains.  The function of this\
    \ implicit relay is the same\n   as the explicit relay.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: 9.  Implementation
  contents:
  - "9.  Implementation\n   The Actual Domains\n      The initial set of top-level\
    \ names include:\n         ARPA\n            This represents the set of organizations\
    \ involved in the\n            Internet system through the authority of the U.S.\
    \ Defense\n            Advanced Research Projects Agency.  This includes all the\n\
    \            research and development hosts on the ARPANET and hosts on\n    \
    \        many other nets as well.  But note very carefully that the\n        \
    \    top-level domain \"ARPA\" does not map one-to-one with the\n            ARPANET\
    \ -- domains are administrative, not topological.\n   Transition\n      In the\
    \ transition from the ARPANET naming convention to the\n      Internet naming\
    \ convention, a host name may be used as a simple\n      name for an endpoint\
    \ domain.  Thus, if \"USC-ISIF\" is an ARPANET\n      host name, then \"USC-ISIF.ARPA\"\
    \ is the name of an Internet domain.\n"
- title: 10.  Summary
  contents:
  - "10.  Summary\n   A hierarchical naming convention based on the domain concept\
    \ has been\n   adopted by the Internet community.  It is an absolute naming\n\
    \   convention defined along administrative rather than topological\n   boundaries.\
    \  This naming convention is adaptive for interoperations\n   with other naming\
    \ conventions.  Thus, no standard convention needs to\n   be imposed for interoperations\
    \ among heterogeneous naming\n   environments.\n   This Internet naming convention\
    \ allows distributed name service and\n   naming authority functions at each domain.\
    \  We have specified these\n   functions required at each domain.  Also discussed\
    \ are implications\n   on network-oriented applications, mail systems, and administrative\n\
    \   aspects of this convention.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: APPENDIX A
  contents:
  - "APPENDIX A\n   The BNF Specification\n   We present here a rather detailed \"\
    BNF\" definition of the allowed\n   form for a computer mail \"mailbox\" composed\
    \ of a \"local-part\" and a\n   \"domain\" (separated by an at sign).  Clearly,\
    \ the domain can be used\n   separately in other network-oriented applications.\n\
    \   <mailbox> ::= <local-part> \"@\" <domain>\n   <local-part> ::= <string> |\
    \ <quoted-string>\n   <string> ::= <char> | <char> <string>\n   <quoted-string>\
    \ ::=  \"\"\" <qtext> \"\"\"\n   <qtext> ::=  \"\\\" <x> | \"\\\" <x> <qtext>\
    \ | <q> | <q> <qtext>\n   <char> ::= <c> | \"\\\" <x>\n   <domain> ::= <naming-domain>\
    \ | <naming-domain> \".\" <domain>\n   <naming-domain> ::=  <simple-name> | <address>\n\
    \   <simple-name> ::= <a> <ldh-str> <let-dig>\n   <ldh-str> ::= <let-dig-hyp>\
    \ | <let-dig-hyp> <ldh-str>\n   <let-dig> ::= <a> | <d>\n   <let-dig-hyp> ::=\
    \ <a> | <d> | \"-\"\n   <address> :: =  \"#\" <number> | \"[\" <dotnum> \"]\"\n\
    \   <number> ::= <d> | <d> <number>\n   <dotnum> ::= <snum> \".\" <snum> \".\"\
    \ <snum> \".\" <snum>\n   <snum> ::= one, two, or three digits representing a\
    \ decimal integer\n   value in the range 0 through 255\n   <a> ::= any one of\
    \ the 52 alphabetic characters A through Z in upper\n   case and a through z in\
    \ lower case\n   <c> ::= any one of the 128 ASCII characters except <s> or <SP>\n\
    \   <d> ::= any one of the ten digits 0 through 9\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ <q> ::= any one of the 128 ASCII characters except CR, LF, quote (\"),\n   or\
    \ backslash (\\)\n   <x> ::= any one of the 128 ASCII characters (no exceptions)\n\
    \   <s> ::= \"<\", \">\", \"(\", \")\", \"[\", \"]\", \"\\\", \".\", \",\", \"\
    ;\", \":\", \"@\",\n   \"\"\", and the control characters (ASCII codes 0 through\
    \ 31 inclusive\n   and 127)\n   Note that the backslash, \"\\\", is a quote character,\
    \ which is used to\n   indicate that the next character is to be used literally\
    \ (instead of\n   its normal interpretation).  For example, \"Joe\\,Smith\" could\
    \ be used\n   to indicate a single nine character user field with comma being\
    \ the\n   fourth character of the field.\n   The simple names that make up a domain\
    \ may contain both upper and\n   lower case letters (as well as digits and hyphen),\
    \ but these names\n   are not case sensitive.\n   Hosts are generally known by\
    \ names.  Sometimes a host is not known to\n   the translation function and communication\
    \ is blocked.  To bypass\n   this barrier two forms of addresses are also allowed\
    \ for host\n   \"names\". One form is a decimal integer prefixed by a pound sign,\
    \ \"#\".\n   Another form, called \"dotted decimal\", is four small decimal integers\n\
    \   separated by dots and enclosed by brackets, e.g., \"[123.255.37.2]\",\n  \
    \ which indicates a 32-bit ARPA Internet Address in four 8-bit fields.\n   (Of\
    \ course, these numeric address forms are specific to the Internet,\n   other\
    \ forms may have to be provided if this problem arises in other\n   transport\
    \ systems.)\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: APPENDIX B
  contents:
  - "APPENDIX B\n   An Aside on the Assignment of Simple Names\n   In the following\
    \ example, there are two naming hierarchies joining at\n   the naming universe\
    \ 'U'.  One consists of domains (S, R, N, J, P, Q,\n   B, A); and the other (L,\
    \ E, F, G, H, D, C, K, B, A). Domain B is\n   assumed to have multiple parentage\
    \ as shown.\n                                U\n                             \
    \ /   \\\n                            /       \\\n                          J\
    \           L\n                        /               \\\n                  \
    \    N                   E\n                    /   \\               /   \\\n\
    \                  R       P           D       F\n                /          \
    \ \\         | \\      \\\n              S               Q       C  (X)     G\n\
    \                                \\   /   \\          \\\n                   \
    \               B       K          H\n                                /\n    \
    \                          A\n                                Figure 3\n    Illustration\
    \ of Requirements for the Distinction of Simple Names\n   Suppose someone at A\
    \ tries to initiate communication with destination\n   H.  The fully qualified\
    \ destination name would be\n      H.G.F.E.L.U\n   Omitting common ancestors,\
    \ the partially qualified name for the\n   destination would be\n      H.G.F\n\
    \   To permit the case of partially qualified names, name server at A\n   needs\
    \ to resolve the simple name F, i.e., F needs to be distinct from\n   all the\
    \ other simple names in its database.\n   To enable the name server of a domain\
    \ to resolve simple names, a\n   simple name for a child needs to be assigned\
    \ distinct from those of\n   all of its ancestors and their immediate children.\
    \  However, such\n   distinction would not be sufficient to allow simple name\
    \ resolution\n   at lower-level domains because lower-level domains could have\n\
    \   multiple parentage below the level of this domain.\n      In the example above,\
    \ let us assume that a name is to be assigned\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \    to a new domain X by D.  To allow name server at D to resolve\n      simple\
    \ names, the name for X must be distinct from L, E, D, C, F,\n      and J.  However,\
    \ allowing A to resolve simple names, X needs to be\n      also distinct from\
    \ A, B, K, as well as from Q, P, N, and R.\n   The following observations can\
    \ be made.\n      Simple names along parallel trails (distinct trails leading\
    \ from\n      one domain to the naming universe) must be distinct, e.g., N must\n\
    \      be distinct from E for B or A to properly resolve simple names.\n     \
    \ No universal uniqueness of simple names is called for, e.g., the\n      simple\
    \ name S does not have to be distinct from that of E, F, G,\n      H, D, C, K,\
    \ Q, B, or A.\n      The lower the level at which a domain occurs, the more immune\
    \ it\n      is to the requirement of naming uniqueness.\n   To satisfy the required\
    \ distinction of simple names for proper\n   resolution at all levels, a naming\
    \ authority needs to ensure the\n   simple name to be assigned distinct from those\
    \ in the name server\n   databases at the endpoint naming domains within its domain.\
    \  As an\n   example, for D to assign a simple name for X, it would need to\n\
    \   consult databases at A and K.  It is, however, acceptable to have\n   simple\
    \ names under domain A identical with those under K.  Failure of\n   such distinct\
    \ assignment of simple names by naming authority of one\n   domain would jeopardize\
    \ the capability of simple name resolution for\n   entities within the subtree\
    \ under that domain.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: APPENDIX C
  contents:
  - "APPENDIX C\n   Further Discussion of Name Service and Name Servers\n   The name\
    \ service on a system should appear to the programmer of an\n   application program\
    \ simply as a system call or library subroutine.\n   Within that call or subroutine\
    \ there may be several types of methods\n   for resolving the name string into\
    \ an address.\n      First, a local table may be consulted.  This table may be\
    \ a\n      complete table and may be updated frequently, or it may simply be\n\
    \      a cache of the few latest name to address mappings recently\n      determined.\n\
    \      Second, a call may be made to a name server to resolve the string\n   \
    \   into a destination address.\n      Third, a call may be made to a name server\
    \ to resolve the string\n      into a relay address.\n   Whenever a name server\
    \ is called it may be a recursive server or an\n   interactive server.\n     \
    \ If the server is recursive, the caller won't be able to tell if\n      the server\
    \ itself had the information to resolve the query or\n      called another server\
    \ recursively (except perhaps for the time it\n      takes).\n      If the server\
    \ is iterative, the caller must be prepared for either\n      the answer to its\
    \ query, or a response indicating that it should\n      call on a different server.\n\
    \   It should be noted that the main name service discussed in this memo\n   is\
    \ simply a name string to address service.  For some applications\n   there may\
    \ be other services needed.\n      For example, even within the Internet there\
    \ are several procedures\n      or protocols for actually transferring mail. \
    \ One need is to\n      determine which mail procedures a destination host can\
    \ use.\n      Another need is to determine the name of a relay host if the\n \
    \     source and destination hosts do not have a common mail procedure.\n    \
    \  These more specialized services must be specific to each\n      application\
    \ since the answers may be application dependent, but\n      the basic name to\
    \ address translation is application independent.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: APPENDIX D
  contents:
  - "APPENDIX D\n   Further Discussion of Interoperability and Protocol Translations\n\
    \   The translation of protocols from one system to another is often\n   quite\
    \ difficult.  Following are some questions that stem from\n   considering the\
    \ translations of addresses between mail systems:\n      What is the impact of\
    \ different addressing environments (i.e.,\n      environments of different address\
    \ formats)?\n      It is noted that the boundary of naming environment may or\
    \ may not\n      coincide with the boundary of different mail systems. Should\
    \ the\n      conversion of naming be independent of the application system?\n\
    \      The boundary between different addressing environments may or may\n   \
    \   not coincide with that of different naming environments or\n      application\
    \ systems.  Some generic approach appears to be\n      necessary.\n      If the\
    \ conversion of naming is to be independent of the\n      application system,\
    \ some form of interaction appears necessary\n      between the interface module\
    \ of naming conversion with some\n      application level functions, such as the\
    \ parsing and modification\n      of message text.\n      To accommodate encryption,\
    \ conversion may not be desirable at all.\n      What then can be an alternative\
    \ to conversion?\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: GLOSSARY
  contents:
  - "GLOSSARY\n   address\n      An address is a numerical identifier for the topological\
    \ location\n      of the named entity.\n   name\n      A name is an alphanumeric\
    \ identifier associated with the named\n      entity.  For unique identification,\
    \ a name needs to be unique in\n      the context in which the name is used. \
    \ A name can be mapped to an\n      address.\n   complete (fully qualified) name\n\
    \      A complete name is a concatenation of simple names representing\n     \
    \ the hierarchical relation of the named with respect to the naming\n      universe,\
    \ that is it is the concatenation of the simple names of\n      the domain structure\
    \ tree nodes starting with its own name and\n      ending with the top level node\
    \ name.  It is a unique name in the\n      naming universe.\n   partially qualified\
    \ name\n      A partially qualified name is an abbreviation of the complete name\n\
    \      omitting simple names of the common ancestors of the communicating\n  \
    \    parties.\n   simple name\n      A simple name is an alphanumeric identifier\
    \ unique only within its\n      parent domain.\n   domain\n      A domain defines\
    \ a region of jurisdiction for name assignment and\n      of responsibility for\
    \ name-to-address translation.\n   naming universe\n      Naming universe is the\
    \ ancestor of all network entities.\n   naming environment\n      A networking\
    \ environment employing a specific naming convention.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - "RFC 819                                                     August 1982;\n  \
    \ name service\n      Name service is a network service for name-to-address mapping.\n\
    \   name server\n      A name server is a network mechanism (e.g., a process)\
    \ realizing\n      the function of name service.\n   naming authority\n      Naming\
    \ authority is an administrative entity having the authority\n      for assigning\
    \ simple names and responsibility for resolving naming\n      conflict.\n   parallel\
    \ relations\n      A network entity may have one or more hierarchical relations\
    \ with\n      respect to the naming universe.  Such multiple relations are\n \
    \     parallel relations to each other.\n   multiple parentage\n      A network\
    \ entity has multiple parentage when it is assigned a\n      simple name by more\
    \ than one naming domain.\n"
- title: RFC 819                                                     August 1982;
  contents:
  - 'RFC 819                                                     August 1982;

    '
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  F. Harary, \"Graph Theory\", Addison-Wesley, Reading,\n \
    \  Massachusetts, 1969.\n   [2]  J. Postel, \"Computer Mail Meeting Notes\", RFC-805,\n\
    \   USC/Information Sciences Institute, 8 February 1982.\n   [3]  J. Postel, \"\
    Simple Mail Transfer Protocol\", RFC-821,\n   USC/Information Sciences Institute,\
    \ August 1982.\n   [4]  D. Crocker, \"Standard for the Format of ARPA Internet\
    \ Text\n   Messages\", RFC-822, Department of Electrical Engineering, University\n\
    \   of Delaware, August 1982.\n"
