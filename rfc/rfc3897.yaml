- title: __initial_text__
  contents:
  - "             Open Pluggable Edge Services (OPES) Entities\n                 \
    \     and End Points Communication\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo documents tracing and non-blocking (bypass) requirements\n\
    \   for Open Pluggable Edge Services (OPES).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n       1.1.  Terminology  . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   2.  OPES System  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  2\n   3.  Tracing Requirements . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n       3.1.  Traceable entities . . . . . . . . . . . . . . . . .\
    \ . .  3\n       3.2.  System requirements  . . . . . . . . . . . . . . . . .\
    \ .  5\n       3.3.  Processor requirements . . . . . . . . . . . . . . . . .\
    \  5\n       3.4.  Callout server requirements  . . . . . . . . . . . . . .  5\n\
    \   4.  Bypass (Non-blocking feature) Requirements . . . . . . . . . .  6\n  \
    \     4.1.  Bypassable entities  . . . . . . . . . . . . . . . . . .  7\n    \
    \   4.2.  System requirements  . . . . . . . . . . . . . . . . . .  8\n      \
    \ 4.3.  Processor requirements . . . . . . . . . . . . . . . . .  8\n       4.4.\
    \  Callout server requirements  . . . . . . . . . . . . . .  9\n   5.  Protocol\
    \ Binding . . . . . . . . . . . . . . . . . . . . . . .  9\n   6.  Compliance\
    \ Considerations  . . . . . . . . . . . . . . . . . .  9\n   7.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . .  9\n   8.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 10\n       8.1.  Tracing security considerations\
    \  . . . . . . . . . . . . 10\n       8.2.  Bypass security considerations . .\
    \ . . . . . . . . . . . 11\n   9.  References . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 12\n       9.1.  Normative References . . . . . . . . .\
    \ . . . . . . . . . 12\n       9.2.  Informative References . . . . . . . . .\
    \ . . . . . . . . 13\n   10. Acknowledgements . . . . . . . . . . . . . . . .\
    \ . . . . . . . 13\n   11. Author's Address . . . . . . . . . . . . . . . . .\
    \ . . . . . . 13\n   12. Full Copyright Statement . . . . . . . . . . . . . .\
    \ . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Open Pluggable Edge Services (OPES) architecture [1]\
    \ enables\n   cooperative application services (OPES services) between a data\n\
    \   provider, a data consumer, and zero or more OPES processors.  The\n   application\
    \ services under consideration analyze and possibly\n   transform application-level\
    \ messages exchanged between the data\n   provider and the data consumer.\n  \
    \ This work specifies OPES tracing and bypass functionality.  The\n   architecture\
    \ document [1] requires that tracing is supported in-band.\n   This design goal\
    \ limits the type of application protocols that OPES\n   can support.  The details\
    \ of what a trace record can convey are also\n   dependent on the choice of the\
    \ application level protocol.  For these\n   reasons, this work only documents\
    \ requirements for OPES entities that\n   are needed to support traces and bypass\
    \ functionality.  The task of\n   encoding tracing and bypass features is application\
    \ protocol\n   specific.  Separate documents will address HTTP and other protocols.\n\
    \   The architecture does not prevent implementers from developing out-\n   of-band\
    \ protocols and techniques to address tracing and bypass.  Such\n   protocols\
    \ are out of scope of the current work.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119 [2].\n   When used with the normative meanings, these keywords\
    \ will be all\n   uppercase.  Occurrences of these words in lowercase comprise\
    \ normal\n   prose usage, with no normative implications.\n"
- title: 2.  OPES System
  contents:
  - "2.  OPES System\n   This section provides a definition of OPES System.  This\
    \ is needed in\n   order to define what is traceable (or bypassable) in an OPES\
    \ Flow.\n   Definition: An OPES System is a set of all OPES entities authorized\n\
    \   by either the data provider or the data consumer application to\n   process\
    \ a given application message.\n   The nature of the authorization agreement determines\
    \ if authority\n   delegation is transitive (meaning an authorized entity is authorized\n\
    \   to include other entities).\n   If specific authority agreements allow for\
    \ re-delegation, an OPES\n   system can be formed by induction.  In this case,\
    \ an OPES system\n   starts with entities directly authorized by a data provider\
    \ (or a\n   data consumer) application.  The OPES system then includes any OPES\n\
    \   entity authorized by an entity that is already in the OPES system.\n   The\
    \ authority delegation is always viewed in the context of a given\n   application\
    \ message.\n   An OPES System is defined on an application message basis.  Having\
    \ an\n   authority to process a message does not imply being involved in\n   message\
    \ processing.  Thus, some OPES system members may not\n   participate in processing\
    \ of a message.  Similarly, some members may\n   process the same message several\
    \ times.\n   The above definition implies that there can be no more than two OPES\n\
    \   systems [Client-side and server-side OPES systems can process the\n   same\
    \ message at the same time] processing the same message at a given\n   time. \
    \ This is based on the assumption that there is a single data\n   provider and\
    \ a single data consumer as far as a given application\n   message is concerned.\n\
    \   For example, consider a Content Delivery Network (CDN) delivering an\n   image\
    \ on behalf of a busy web site.  OPES processors and services,\n   which the CDN\
    \ uses to adapt and deliver the image, comprise an OPES\n   System.  In a more\
    \ complex example, an OPES System would contain\n   third party OPES entities\
    \ that the CDN engages to perform adaptations\n   (e.g., to adjust image quality).\n"
- title: 3.  Tracing Requirements
  contents:
  - "3.  Tracing Requirements\n   The definition of OPES trace and tracing are given\
    \ next.\n      OPES trace: application message information about OPES entities\n\
    \      that adapted the message.\n      OPES tracing: the process of creating,\
    \ manipulating, or\n      interpreting an OPES trace.\n   Note that the above\
    \ trace definition assumes in-band tracing.  This\n   dependency can be removed\
    \ if desired.  Tracing is performed on per\n   message basis.  Trace format is\
    \ dependent on the application protocol\n   that is being adapted.  A traceable\
    \ entity can appear multiple times\n   in a trace (for example, every time it\
    \ acts on a message).\n"
- title: 3.1.  Traceable entities
  contents:
  - "3.1.  Traceable entities\n   This section focuses on identifying traceable entities\
    \ in an OPES\n   Flow.\n   Tracing information provides an \"end\" with information\
    \ about OPES\n   entities that adapted the data.  There are two distinct uses\
    \ of OPES\n   traces.  First, a trace enables an \"end\" to detect the presence\
    \ of\n   OPES System.  Such \"end\" should be able to see a trace entry, but\n\
    \   does not need to be able to interpret it beyond identification of the\n  \
    \ OPES System and location of certain required OPES-related disclosures\n   (see\
    \ Section 3.2).\n   Second, the OPES System administrator is expected to be able\
    \ to\n   interpret the contents of an OPES trace.  The trace can be relayed to\n\
    \   the administrator by an \"end\" without interpretation, as opaque data\n \
    \  (e.g., a TCP packet or an HTTP message snapshot).  The administrator\n   can\
    \ use the trace information to identify the participating OPES\n   entities. \
    \ The administrator can use the trace to identify the\n   applied adaptation services\
    \ along with other message-specific\n   information.\n   Since the administrators\
    \ of various OPES Systems can have various\n   ways of looking into tracing, they\
    \ require the freedom in what to put\n   in trace records and how to format them.\n\
    \   At the implementation level, for a given trace, an OPES entity\n   involved\
    \ in handling the corresponding application message is\n   traceable or traced\
    \ if information about it appears in that trace.\n   This work does not specify\
    \ any order to that information.  The order\n   of information in a trace can\
    \ be OPES System specific or can be\n   defined by application bindings documents.\n\
    \   OPES entities have different levels of traceability requirements.\n   Specifically,\n\
    \   o  An OPES System MUST add its entry to the trace.\n   o  An OPES processor\
    \ SHOULD add its entry to the trace.\n   o  An OPES service MAY add its entry\
    \ to the trace.\n   o  An OPES entity MAY delegate addition of its trace entry\
    \ to another\n      OPES entity.  For example, an OPES System can have a dedicated\n\
    \      OPES processor for adding System entries; an OPES processor can\n     \
    \ use a callout service to manage all OPES trace manipulations\n      (since such\
    \ manipulations are OPES adaptations).\n   In an OPES context, a good tracing\
    \ approach is similar to a trouble\n   ticket ready for submission to a known\
    \ address.  The address is\n   printed on the ticket.  The trace in itself is\
    \ not necessarily a\n   detailed description of what has happened.  It is the\
    \ responsibility\n   of the operator to decode trace details and to resolve the\
    \ problems.\n"
- title: 3.2  System requirements
  contents:
  - "3.2  System requirements\n   The following requirements document actions when\
    \ forming an OPES\n   System trace entry:\n   o  OPES system MUST include its\
    \ unique identification in its trace\n      entry.  Here, uniqueness scope is\
    \ all OPES Systems that may adapt\n      the message being traced.\n   o  An OPES\
    \ System MUST define its impact on inter- and intra-document\n      reference\
    \ validity.\n   o  An OPES System MUST include information about its privacy policy,\n\
    \      including identity of the party responsible for setting and\n      enforcing\
    \ the policy.\n   o  An OPES System SHOULD include information that identifies,\
    \ to the\n      technical contact, the OPES processors involved in processing\
    \ the\n      message.\n   o  When providing required information, an OPES System\
    \ MAY use a\n      single URI to identify a resource containing several required\n\
    \      items.  For example, an OPES System can point to a single web page\n  \
    \    with a reference to System privacy policy and technical contact\n      information.\n\
    \   This specification does not define the meaning of the terms privacy\n   policy,\
    \ policy enforcement, or reference validity or technical\n   contact and contains\
    \ no requirements regarding encoding, language,\n   format, or any other aspects\
    \ of that information.  For example, a URI\n   used for an OPES System trace entry\
    \ may look like \"http://\n   www.examplecompany.com/opes/?client=example.com\"\
    \ where the identified\n   web page is dynamically generated and contains the\
    \ all OPES System\n   information required above.\n"
- title: 3.3.  Processor requirements
  contents:
  - "3.3.  Processor requirements\n   The following requirements document actions\
    \ when forming an OPES\n   System trace entry:\n   o  OPES processor SHOULD add\
    \ its unique identification to the trace.\n      Here, uniqueness scope is the\
    \ OPES System containing the\n      processor.\n"
- title: 3.4.  Callout server requirements
  contents:
  - "3.4.  Callout server requirements\n   In an OPES system, it is the task of an\
    \ OPES processor to add trace\n   records to application messages.  The OPES System\
    \ administrator\n   decides if and under what conditions callout servers may add\
    \ trace\n   information to application messages.\n"
- title: 4.  Bypass (Non-blocking feature) Requirements
  contents:
  - "4.  Bypass (Non-blocking feature) Requirements\n   IAB recommendation (3.3) [6]\
    \ requires that the OPES architecture does\n   not prevent a data consumer application\
    \ from retrieving non-OPES\n   version of content from a data provider application,\
    \ provided that\n   the non-OPES content exists.  IAB recommendation (3.3) suggests\
    \ that\n   the Non-blocking feature (bypass) be used to bypass faulty OPES\n \
    \  intermediaries (once they have been identified, by some method).\n   In addressing\
    \ IAB consideration (3.3), one need to specify what\n   constitutes non-OPES content.\
    \  In this work the definition of \"non-\n   OPES\" content is provider dependent.\
    \  In some cases, the availability\n   of \"non-OPES\" content can be a function\
    \ of the internal policy of a\n   given organization that has contracted the services\
    \ of an OPES\n   provider.  For example, Company A has as contract with an OPES\n\
    \   provider to perform virus checking on all e-mail attachments.  An\n   employee\
    \ X of Company A can issue a non-blocking request for the\n   virus scanning service.\
    \  The request could be ignored by the OPES\n   provider since it contradicts\
    \ its agreement with Company A.\n   The availability of non-OPES content can be\
    \ a function of content\n   providers (or consumers or both) policy and deployment\
    \ scenarios [5].\n   For this reason, this work does not attempt to define what\
    \ is an OPES\n   content as opposed to non-OPES content.  The meaning of OPES\
    \ versus\n   non-OPES content is assumed to be determined through various\n  \
    \ agreements between the OPES provider, data provider and/or data\n   consumer.\
    \  The agreement determines what OPES services can be\n   bypassed and in what\
    \ order (if applicable).\n   This specification documents bypassing of an OPES\
    \ service or a group\n   of services identified by a URI.  In this context, to\
    \ \"bypass the\n   service\" for a given application message in an OPES Flow means\
    \ to\n   \"not invoke the service\" for that application message.  A bypass URI\n\
    \   that identifies an OPES system (processor) matches all services\n   attached\
    \ to that OPES system (processor).  However, bypassing of OPES\n   processors\
    \ and OPES Systems themselves requires non-OPES mechanisms\n   and is out of this\
    \ specification scope.  A bypass request an\n   instruction to bypass, usually\
    \ embedded in an application message.\n   The current specification does not provide\
    \ for a good mechanism that\n   allow and \"end\" to specify to \"bypass this\
    \ service but only if it is\n   a part of that OPES system\" or \"bypass all services\
    \ of that OPES\n   system but not of this OPES system\".  Furthermore, if an OPES\n\
    \   processor does not know for sure that a bypass URI does not match its\n  \
    \ service, it must bypass that service.\n   If no non-OPES content is available\
    \ without the specified service,\n   the bypass request for that service must\
    \ be ignored.  This design\n   implies that it may not be possible to detect non-OPES\
    \ content\n   existence or to detect violations of bypass rules in the environments\n\
    \   where the tester does not know whether non-OPES content exists.  This\n  \
    \ design assumes that most bypass requests are intended for situations\n   where\
    \ serving undesirable OPES content is better than serving an\n   error message\
    \ that no preferred non-OPES content exists.\n   Bypass feature is to malfunctioning\
    \ OPES services as HTTP \"reload\"\n   request is to malfunctioning HTTP caches.\
    \  The primary purpose of the\n   bypass is to get usable content in the presence\
    \ of service failures\n   and not to provide the content consumer with more information\
    \ on what\n   is going on.  OPES trace should be used for the latter instead.\n\
    \   While this work defines a \"bypass service if possible\" feature, there\n\
    \   are other related bypass features that can be implemented in OPES\n   and/or\
    \ in application protocols being adapted.  For example, a\n   \"bypass service\
    \ or generate an error\" or \"bypass OPES entity or\n   generate an error\". \
    \ Such services would be useful for debugging\n   broken OPES systems and may\
    \ be defined in other OPES specifications.\n   This work concentrates on documenting\
    \ a user-level bypass feature\n   addressing direct IAB concerns.\n"
- title: 4.1.  Bypassable entities
  contents:
  - "4.1.  Bypassable entities\n   In this work, the focus is on developing a bypass\
    \ feature that allows\n   a user to instruct the OPES System to bypass some or\
    \ all of its\n   services.  The collection of OPES services that can be bypassed\
    \ is a\n   function of the agreement of the OPES provider with either (or both)\n\
    \   the content provider or the content consumer applications.  In the\n   general\
    \ case, a bypass request is viewed as a bypass instruction that\n   contains a\
    \ URI that identifies an OPES entity or a group of OPES\n   entities that perform\
    \ a service (or services) to be bypassed.  An\n   instruction may contain more\
    \ than one such URI.  A special wildcard\n   identifier can be used to represent\
    \ all possible URIs.\n   In an OPES Flow, a bypass request is processed by each\
    \ involved OPES\n   processor.  This means that an OPES processor examines the\
    \ bypass\n   instruction and if non-OPES content is available, the processor then\n\
    \   bypasses the indicated services.  The request is then forwarded to\n   the\
    \ next OPES processor in the OPES Flow.  The next OPES processor\n   would then\
    \ handle all bypass requests, regardless of the previous\n   processor actions.\
    \  The processing chain continues throughout the\n   whole processors that are\
    \ involved in the OPES Flow.\n"
- title: 4.2.  System requirements
  contents:
  - "4.2.  System requirements\n   In an OPES System, bypass requests are generally\
    \ client centric\n   (originated by the data consumer application) and go in the\
    \ opposite\n   direction of tracing requests.  This work requires that the bypass\n\
    \   feature be performed in-band as an extension to an application\n   specific\
    \ protocol.  Non-OPES entities should be able to safely ignore\n   these extensions.\
    \  The work does not prevent OPES Systems from\n   developing their own out of\
    \ band protocols.\n   The following requirements apply for bypass feature as related\
    \ to an\n   OPES System (the availability of a non-OPES content is a\n   precondition):\n\
    \   o  An OPES System MUST support a bypass feature.  This means that the\n  \
    \    OPES System bypasses services whose URIs are identified by an OPES\n    \
    \  \"end\".\n   o  An OPES System MUST provide OPES version of the content if\
    \ non-\n      OPES version is not available.\n   In order to facilitate the debugging\
    \ (or data consumer user\n   experience) of the bypass feature in an OPES System,\
    \ it would be\n   beneficial if non-bypassed entities included information related\
    \ to\n   why they ignored the bypass instruction.  It is important to note\n \
    \  that in some cases the tracing facility itself may be broken and the\n   whole\
    \ OPES System (or part) may need to be bypassed through the issue\n   of a bypass\
    \ instruction.\n"
- title: 4.3.  Processor requirements
  contents:
  - "4.3.  Processor requirements\n   Bypass requirements for OPES processors are\
    \ (the availability of a\n   non-OPES content is a precondition):\n   o  OPES\
    \ processor SHOULD be able to interpret and process a bypass\n      instruction.\
    \  This requirement applies to all bypass instructions,\n      including those\
    \ that identify unknown-to-recipient services.\n   o  OPES processors MUST forward\
    \ bypass request to the next\n      application hop provided that the next hop\
    \ speaks application\n      protocol with OPES bypass support.\n   o  OPES processor\
    \ SHOULD be able to bypass it's service(s) execution.\n   OPES processors that\
    \ know how to process and interpret a bypass\n   instruction have the following\
    \ requirements:\n   o  The recipient of a bypass instruction with a URI that does\
    \ not\n      identify any known-to-recipient OPES entity MUST treat that URI as\n\
    \      a wildcard identifier (meaning bypass all applicable services).\n"
- title: 4.4.  Callout server requirements
  contents:
  - "4.4.  Callout server requirements\n   In an OPES system, it is the task of an\
    \ OPES processor to process\n   bypass requests.  The OPES System administrator\
    \ decides if and under\n   what conditions callout servers process bypass requests.\n"
- title: 5.  Protocol Binding
  contents:
  - "5.  Protocol Binding\n   The task of encoding tracing and bypass features is\
    \ application\n   protocol specific.  Separate documents will address HTTP and\
    \ other\n   protocols.  These documents must address the ordering of trace\n \
    \  information as needed.\n"
- title: 6.  Compliance Considerations
  contents:
  - "6.  Compliance Considerations\n   This specification defines compliance for the\
    \ following compliance\n   subjects: OPES System, processors, entities and callout\
    \ servers.\n   A compliance subject is compliant if it satisfies all applicable\n\
    \   \"MUST\" and \"SHOULD\" level requirements.  By definition, to satisfy a\n\
    \   \"MUST\" level requirement means to act as prescribed by the\n   requirement;\
    \ to satisfy a \"SHOULD\" level requirement means to either\n   act as prescribed\
    \ by the requirement or have a reason to act\n   differently.  A requirement is\
    \ applicable to the subject if it\n   instructs (addresses) the subject.\n   Informally,\
    \ compliance with this document means that there are no\n   known \"MUST\" violations,\
    \ and all \"SHOULD\" violations are conscious.\n   In other words, a \"SHOULD\"\
    \ means \"MUST satisfy or MUST have a reason\n   to violate\".  It is expected\
    \ that compliance claims are accompanied\n   by a list of unsupported SHOULDs\
    \ (if any), in an appropriate format,\n   explaining why preferred behavior was\
    \ not chosen.\n   Only normative parts of this specification affect compliance.\n\
    \   Normative parts are: parts explicitly marked using the word\n   \"normative\"\
    , definitions, and phrases containing unquoted capitalized\n   keywords from RFC\
    \ 2119 [2].  Consequently, examples and illustrations\n   are not normative.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This specification contains no IANA considerations.\
    \  Application\n   bindings MAY contain application-specific IANA considerations.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security considerations for OPES are documented\
    \ in [4].  Policy and\n   authorization issues are documented in [3].  It is recommended\
    \ that\n   designers consult these documents before reading this section.\n  \
    \ This document is a requirement document for tracing and bypass\n   feature.\
    \  The requirements that are stated in this document can be\n   used to extend\
    \ an application level protocol to support these\n   features.  As such, the work\
    \ has security precautions.\n"
- title: 8.1.  Tracing security considerations
  contents:
  - "8.1.  Tracing security considerations\n   The tracing facility for OPES architecture\
    \ is implemented as a\n   protocol extension.  Inadequate implementations of the\
    \ tracing\n   facility may defeat safeguards built into the OPES architecture.\
    \  The\n   tracing facility by itself can become a target of malicious attacks\n\
    \   or used to lunch attacks on an OPES System.\n   Threats caused by or against\
    \ the tracing facility can be viewed as\n   threats at the application level in\
    \ an OPES Flow.  In this case, the\n   threats can affect the data consumer and\
    \ the data provider\n   application.\n   Since tracing information is a protocol\
    \ extension, these traces can\n   be injected in the data flow by non-OPES entities.\
    \  In this case,\n   there are risks that non-OPES entities can be compromised\
    \ in a\n   fashion that threat the overall integrity and effectiveness of an\n\
    \   OPES System.  For example, a non-OPES proxy can add fake tracing\n   information\
    \ into a trace.  This can be done in the form of wrong, or\n   unwanted, or non\
    \ existent services.  A non-OPES entity can inject\n   large size traces that\
    \ may cause buffer overflow in a data consumer\n   application.  The same threats\
    \ can arise from compromised OPES\n   entities.  An attacker can control an OPES\
    \ entity and inject wrong,\n   or very large trace information that can overwhelm\
    \ an end or the next\n   OPES entity in an OPES flow.  Similar threats can result\
    \ from bad\n   implementations of the tracing facility in trusted OPES entities.\n\
    \   Compromised tracing information can be used to launch attacks on an\n   OPES\
    \ System that give the impression that unwanted content\n   transformation was\
    \ performed on the data.  This can be achieved by\n   inserting wrong entity (such\
    \ OPES processor) identifiers.  A\n   compromised trace can affect the overall\
    \ message integrity structure.\n   This can affect entities that use message header\
    \ information to\n   perform services such as accounting, load balancing, or reference-\n\
    \   based services.\n   Compromised trace information can be used to launch DoS\
    \ attacks that\n   can overwhelm a data consumer application or an OPES entity\
    \ in an\n   OPES Flow.  Inserting wrong tracing information can complicate the\n\
    \   debugging tasks performed by system administrator during trouble\n   shooting\
    \ of OPES System behavior.\n   As a precaution, OPES entities ought to be capable\
    \ of verifying that\n   the inserted traces are performed by legal OPES entities.\
    \  This can\n   be done as part of the authorization and authentication face.\
    \  Policy\n   can be used to indicate what trace information can be expected from\
    \ a\n   peer entity.  Other application level related security concerns can\n\
    \   be found in [4].\n"
- title: 8.2.  Bypass security considerations
  contents:
  - "8.2.  Bypass security considerations\n   The bypass facility for OPES architecture\
    \ is implemented as a\n   protocol extension.  Inadequate implementations of the\
    \ bypass\n   facility may defeat safeguards built into the OPES architecture.\
    \  The\n   bypass facility by itself can become a target of malicious attacks\
    \ or\n   used to lunch attacks on an OPES System.\n   Threats caused by or against\
    \ the bypass facility can be viewed as\n   threats at the application level in\
    \ an OPES Flow.  In this case, the\n   threats can affect the data consumer and\
    \ the data provider\n   application.\n   There are risks for the OPES System by\
    \ non-OPES entities, whereby,\n   these entities can insert bypass instructions\
    \ into the OPES Flow.\n   The threat can come from compromised non-OPES entities.\
    \  The threat\n   might affect the overall integrity and effectiveness of an OPES\n\
    \   System.  For example, a non-OPES proxy can add bypass instruction to\n   bypass\
    \ legitimate OPES entities.  The attack might result in\n   overwhelming the original\
    \ content provider servers, since the attack\n   essentially bypass any load balancing\
    \ techniques.  In addition, such\n   an attack is also equivalent to a DoS attack,\
    \ whereby, a legitimate\n   data consumer application may not be able to access\
    \ some content from\n   a content provider or its OPES version.\n   Since an OPES\
    \ Flow may include non-OPES entities, it is susceptible\n   to man-in-the-middle\
    \ attacks, whereby an intruder may inject bypass\n   instructions into the data\
    \ path.  These attacks may affect content\n   availability or disturb load balancing\
    \ techniques in the network.\n   The above threats can also arise by compromised\
    \ OPES entities.  An\n   intruder can compromise an OPES entities and then use\
    \ man-in-the-\n   middle techniques to disturb content availability to a data\
    \ consumer\n   application or overload a content provider server (essentially,\
    \ some\n   form of a DoS attack).\n   Attackers can use the bypass instruction\
    \ to affect the overall\n   integrity of the OPES System.  The ability to introduce\
    \ bypass\n   instructions into a data flow may effect the accounting of the OPES\n\
    \   System.  It may also affect the quality of content that is delivered\n   to\
    \ the data consumer applications.  Similar threats can arise from\n   bad implementations\
    \ of the bypass facility.\n   Inconsistent or selective bypass is also a threat.\
    \  Here, one end can\n   try to bypass a subset of OPES entities so that the resulting\
    \ content\n   is malformed and crashes or compromises entities that process that\n\
    \   content (and expect that content to be complete and valid).  Such\n   exceptions\
    \ are often not tested because implementers do not expect a\n   vital service\
    \ to disappear from the processing loop.\n   Other threats can arise from configuring\
    \ access control policies for\n   OPES entities.  It is possible that systems\
    \ implementing access\n   controls via OPES entities may be incorrectly configured\
    \ to honor\n   bypass and, hence, give unauthorized access to intruders.\n   Tap\
    \ bypass can also be a threat.  This is because systems\n   implementing wiretaps\
    \ via OPES entities may be incorrectly configured\n   to honor bypass and, hence,\
    \ ignore (leave undetected) traffic with\n   bypass instructions that should have\
    \ been tapped or logged.  It is\n   also possible for one end to bypass services\
    \ such as virus scanning\n   at the receiving end.  This threat can be used by\
    \ hackers to inject\n   viruses throughout the network.  Following an IETF policy\
    \ on\n   Wiretapping [7], OPES communication model does not consider\n   wiretapping\
    \ requirements.  Nevertheless, the documented threat is\n   real, not obvious,\
    \ and OPES technology users operating in wiretapping\n   or similar logging environments\
    \ should be aware of it.\n   Other application level related security concerns\
    \ can be found in\n   [4].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]  Barbir, A., Penno, R., Chen, R., Hofmann,\
    \ M., and H. Orman, \"An\n        Architecture for Open Pluggable Edge Services\
    \ (OPES)\", RFC 3835,\n        August 2004.\n   [2]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [3]  Barbir, A., Batuner, O., Beck, A., Chan, T., and H. Orman,\n\
    \        \"Policy, Authorization, and Enforcement Requirements of Open\n     \
    \   Pluggable Edge Services (OPES)\", RFC 3838, August 2004.\n   [4]  Barbir,\
    \ A., Batuner, O., Srinivas, B., Hofmann, M., and H.\n        Orman, \"Security\
    \ Threats and Risks for Open Pluggable Edge\n        Services (OPES)\", RFC 3837,\
    \ August 2004.\n"
- title: 9.2  Informative References
  contents:
  - "9.2  Informative References\n   [5]  Barbir A., Burger, E., Chen, R., McHenry,\
    \ S., Orman, H., and R.\n        Penno, \"Open Pluggable Edge Services (OPES)\
    \ Use Cases and\n        Deployment Scenarios\", RFC 3752, April 2004.\n   [6]\
    \  Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n        Considerations\
    \ for Open Pluggable Edge Services\", RFC 3238,\n        January 2002.\n   [7]\
    \  IAB and IESG, \"IETF Policy on Wiretapping\", RFC 2804, May 2000.\n"
- title: 10. Acknowledgements
  contents:
  - "10. Acknowledgements\n   Several people has contributed to this work. Many thanks\
    \ to: Alex\n   Rousskov, Hilarie Orman, Oscar Batuner, Markus Huffman, Martin\n\
    \   Stecher, Marshall Rose and Reinaldo Penno.\n"
- title: 11. Author's Address
  contents:
  - "11. Author's Address\n   Abbie Barbir\n   Nortel Networks\n   3500 Carling Avenue\n\
    \   Nepean, Ontario  K2H 8E9\n   Canada\n   Phone: +1 613 763 5229\n   EMail:\
    \ abbieb@nortelnetworks.com\n"
- title: 12. Full Copyright Statement
  contents:
  - "12. Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n\
    \   This document is subject to the rights, licenses and restrictions\n   contained\
    \ in BCP 78, and except as set forth therein, the authors\n   retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n  \
    \ REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET\
    \ ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING\
    \ BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL\
    \ NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR\
    \ FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
