- title: __initial_text__
  contents:
  - '                        RADIUS Design Guidelines

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides guidelines for the design of attributes used\n\
    \   by the Remote Authentication Dial In User Service (RADIUS) protocol.\n   It\
    \ is expected that these guidelines will prove useful to authors and\n   reviewers\
    \ of future RADIUS attribute specifications, within the IETF\n   as well as other\
    \ Standards Development Organizations (SDOs).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6158.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Requirements Language ......................................4\n    \
    \  1.3. Applicability ..............................................5\n      \
    \     1.3.1. Reviews .............................................5\n   2. Guidelines\
    \ ......................................................6\n      2.1. Data Types\
    \ .................................................8\n      2.2. Vendor Space\
    \ ...............................................9\n      2.3. Service Definitions\
    \ and RADIUS .............................9\n      2.4. Translation of Vendor\
    \ Specifications ......................10\n   3. Rationale ......................................................11\n\
    \      3.1. RADIUS Operational Model ..................................11\n  \
    \    3.2. Data Model Issues .........................................14\n    \
    \       3.2.1. Issues with Definitions of Types ...................15\n      \
    \     3.2.2. Tagging Mechanism ..................................16\n        \
    \   3.2.3. Complex Data Types .................................16\n          \
    \ 3.2.4. Complex Data Type Exceptions .......................18\n      3.3. Vendor\
    \ Space ..............................................19\n           3.3.1. Interoperability\
    \ Considerations ....................20\n           3.3.2. Vendor Allocations\
    \ .................................20\n           3.3.3. SDO Allocations ....................................20\n\
    \      3.4. Polymorphic Attributes ....................................21\n  \
    \ 4. IANA Considerations ............................................22\n   5.\
    \ Security Considerations ........................................22\n      5.1.\
    \ New Data Types and Complex Attributes .....................23\n   6. References\
    \ .....................................................24\n      6.1. Normative\
    \ References ......................................24\n      6.2. Informative\
    \ References ....................................24\n   Appendix A.  Design Guidelines\
    \ Checklist ..........................27\n      A.1. Types Matching the RADIUS\
    \ Data Model ......................27\n         A.1.1. Transport of Basic Data\
    \ Types ........................27\n         A.1.2. Transport of Authentication\
    \ and Security Data ........27\n         A.1.3. Opaque Data Types ....................................27\n\
    \         A.1.4. Pre-existing Data Types ..............................28\n  \
    \    A.2. Improper Data Types .......................................28\n    \
    \     A.2.1. Simple Data Types ....................................28\n      \
    \   A.2.2. More Complex Data Types ..............................29\n      A.3.\
    \ Vendor-Specific Formats ...................................29\n      A.4. Changes\
    \ to the RADIUS Operational Model ...................30\n      A.5. Allocation\
    \ of Attributes ..................................31\n   Appendix B.  Complex\
    \ Attributes ...................................32\n      B.1. CHAP-Password .............................................32\n\
    \      B.2. CHAP-Challenge ............................................32\n  \
    \    B.3. Tunnel-Password ...........................................33\n    \
    \  B.4. ARAP-Password .............................................33\n      B.5.\
    \ ARAP-Features .............................................34\n      B.6. Connect-Info\
    \ ..............................................34\n      B.7. Framed-IPv6-Prefix\
    \ ........................................35\n      B.8. Egress-VLANID .............................................36\n\
    \      B.9. Egress-VLAN-Name ..........................................37\n  \
    \    B.10. Digest-* .................................................37\n   Acknowledgments\
    \ ...................................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides guidelines for the design of Remote\n\
    \   Authentication Dial In User Service (RADIUS) attributes within the\n   IETF\
    \ as well as within other Standards Development Organizations\n   (SDOs).  By\
    \ articulating RADIUS design guidelines, it is hoped that\n   this document will\
    \ encourage the development and publication of high-\n   quality RADIUS attribute\
    \ specifications.\n   However, the advice in this document will not be helpful\
    \ unless it is\n   put to use.  As with \"Guidelines for Authors and Reviewers\
    \ of MIB\n   Documents\" [RFC4181], it is expected that authors will check their\n\
    \   document against the guidelines in this document prior to publication\n  \
    \ or requesting review (such as an \"Expert Review\" described in\n   [RFC3575]).\
    \  Similarly, it is expected that this document will be\n   used by reviewers\
    \ (such as WG participants or the Authentication,\n   Authorization, and Accounting\
    \ (AAA) Doctors [DOCTORS]), resulting in\n   an improvement in the consistency\
    \ of reviews.\n   In order to meet these objectives, this document needs to cover\
    \ not\n   only the science of attribute design but also the art.  Therefore, in\n\
    \   addition to covering the most frequently encountered issues, this\n   document\
    \ explains some of the considerations motivating the\n   guidelines.  These considerations\
    \ include complexity trade-offs that\n   make it difficult to provide \"hard and\
    \ fast\" rules for attribute\n   design.  This document explains those trade-offs\
    \ through reviews of\n   current attribute usage.\n   The rest of the document\
    \ is organized as follows.  Section 1\n   discusses the applicability of the guidelines\
    \ and defines a\n   recommended review process for RADIUS specifications.  Section\
    \ 2\n   defines the design guidelines in terms of what is \"RECOMMENDED\" and\n\
    \   \"NOT RECOMMENDED\".  Section 3 gives a longer explanation of the\n   rationale\
    \ behind the guidelines given in the previous section.\n   Appendix A repeats\
    \ the guidelines in a \"checklist\" format.  Appendix\n   B discusses previously\
    \ defined attributes that do not follow the\n   guidelines.\n   Authors of new\
    \ RADIUS specifications can be compliant with the design\n   guidelines by working\
    \ through the checklists given in Appendix A.\n   Reviewers of RADIUS specifications\
    \ are expected to be familiar with\n   the entire document.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document uses the following terms:\n   Network Access\
    \ Server (NAS)\n      A device that provides an access service for a user to a\
    \ network.\n   RADIUS server\n      A RADIUS authentication, authorization, and\
    \ accounting (AAA)\n      server is an entity that provides one or more AAA services\
    \ to a\n      NAS.\n   Standard space\n      Codes in the RADIUS Attribute Type\
    \ Space that are allocated by\n      IANA and that follow the format defined in\
    \ Section 5 of RFC 2865\n      [RFC2865].\n   Vendor space\n      The contents\
    \ of the Vendor-Specific Attribute (VSA), as defined in\n      [RFC2865], Section\
    \ 5.26.  These attributes provide a unique\n      attribute type space in the\
    \ \"String\" field for each vendor\n      (identified by the Vendor-Type field),\
    \ which they can self-\n      allocate.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.3.  Applicability
  contents:
  - "1.3.  Applicability\n   The advice in this document applies to RADIUS attributes\
    \ used to\n   encode service-provisioning, authentication, or accounting data\
    \ based\n   on the attribute encodings and data formats defined in RFC 2865\n\
    \   [RFC2865], RFC 2866 [RFC2866], and subsequent RADIUS RFCs.\n   Since this\
    \ document represents a Best Current Practice, it does not\n   update or deprecate\
    \ existing standards.  As a result, uses of the\n   terms \"MUST\" and \"MUST\
    \ NOT\" are limited to requirements already\n   present in existing documents.\n\
    \   It is RECOMMENDED that these guidelines be followed for all new\n   RADIUS\
    \ specifications, whether they originate from a vendor, an SDO,\n   or the IETF.\
    \  Doing so will ensure the widest possible applicability\n   and interoperability\
    \ of the specifications, while requiring minimal\n   changes to existing systems.\
    \  In particular, it is expected that\n   RADIUS specifications requesting allocation\
    \ within the standard space\n   will follow these guidelines and will explain\
    \ why this is not\n   possible if they cannot.\n   However, there are situations\
    \ in which vendors or SDOs can choose not\n   to follow these guidelines without\
    \ major consequences.  As noted in\n   Section 5.26 of [RFC2865], Vendor-Specific\
    \ Attributes (VSAs) are\n   \"available to allow vendors to support their own\
    \ extended Attributes\n   not suitable for general usage\".  Where vendors or\
    \ SDOs develop\n   specifications \"not suitable for general usage\", limited\n\
    \   interoperability and inability to use existing implementations may be\n  \
    \ acceptable, and, in these situations, vendors and SDOs MAY choose not\n   to\
    \ conform to these guidelines.\n   Note that the RADEXT WG is currently (as of\
    \ 2011) involved in\n   developing updates to RADIUS.  Those updates will provide\
    \ their own\n   usage guidelines that may modify some of the guidelines defined\
    \ here,\n   such as defining new data types, practices, etc.\n   RADIUS protocol\
    \ changes, or specification of attributes (such as\n   Service-Type), that can,\
    \ in effect, provide new RADIUS commands\n   require greater expertise and deeper\
    \ review, as do changes to the\n   RADIUS operational model.  As a result, such\
    \ changes are outside the\n   scope of this document and MUST NOT be undertaken\
    \ outside the IETF.\n"
- title: 1.3.1.  Reviews
  contents:
  - "1.3.1.  Reviews\n   For specifications utilizing attributes within the standard\
    \ space,\n   conformance with the design guidelines in this document is expected\n\
    \   unless a good case can be made for an exception.  Reviewers SHOULD\n   use\
    \ the design guidelines as a review checklist.\n   While not required, IETF review\
    \ may also be beneficial for\n   specifications utilizing the vendor space.  Experience\
    \ has shown that\n   attributes not originally designed for general usage can\
    \ subsequently\n   garner wide-spread deployment.  An example is the Vendor-Specific\n\
    \   Attributes defined in [RFC2548], which have been widely implemented\n   within\
    \ IEEE 802.11 Access Points.\n   In order to assist in the development of specifications\
    \ conforming to\n   these guidelines, authors can request review by sending an\
    \ email to\n   the AAA Doctors [DOCTORS] or equivalent mailing list.  The IETF\n\
    \   Operations & Management Area Directors will then arrange for the\n   review\
    \ to be completed and posted to the AAA Doctors mailing list\n   [DOCTORS], RADEXT\
    \ WG mailing list, or other IETF mailing lists.\n   Since reviews are handled\
    \ by volunteers, responses are provided on a\n   best-effort basis, with no service-level\
    \ guarantees.  Authors are\n   encouraged to seek review as early as possible,\
    \ so as to avoid\n   potential delays.\n   As reviewers require access to the\
    \ specification, vendors and SDOs\n   are encouraged to make it publicly available.\
    \  Where the RADIUS\n   specification is embedded within a larger document that\
    \ cannot be\n   made public, the RADIUS attribute and value definitions can be\
    \ made\n   available on a public web site or can be published as an\n   Informational\
    \ RFC, as with [RFC4679].\n   The review process requires neither allocation of\
    \ attributes within\n   the standard space nor publication of an RFC.  Requiring\
    \ SDOs or\n   vendors to rehost VSAs into the standard space solely for the purpose\n\
    \   of obtaining review would put pressure on the standard space and may\n   be\
    \ harmful to interoperability since it would create two ways to\n   provision\
    \ the same service.  Rehosting may also require changes to\n   the RADIUS data\
    \ model, which will affect implementations that do not\n   intend to support the\
    \ SDO or vendor specifications.\n   Similarly, vendors are encouraged to make\
    \ their specifications\n   publicly available, for maximum interoperability. \
    \ However, it is not\n   necessary for a vendor to request publication of a VSA\
    \ specification\n   as an RFC.\n"
- title: 2.  Guidelines
  contents:
  - "2.  Guidelines\n   The RADIUS protocol as defined in [RFC2865] and [RFC2866]\
    \ uses\n   elements known as attributes in order to represent authentication,\n\
    \   authorization, and accounting data.\n   Unlike Simple Network Management Protocol\
    \ (SNMP), first defined in\n   [RFC1157] and [RFC1155], RADIUS does not define\
    \ a formal data\n   definition language.  The data type of RADIUS attributes is\
    \ not\n   transported on the wire.  Rather, the data type of a RADIUS attribute\n\
    \   is fixed when an attribute is defined.  Based on the RADIUS attribute\n  \
    \ type code, RADIUS clients and servers can determine the data type\n   based\
    \ on pre-configured entries within a data dictionary.\n   To explain the implications\
    \ of this early RADIUS design decision, we\n   distinguish two kinds of data types,\
    \ namely \"basic\" and \"complex\".\n   Basic data types use one of the existing\
    \ RADIUS data types as defined\n   in Section 2.1, encapsulated in a [RFC2865]\
    \ RADIUS attribute or in a\n   [RFC2865] RADIUS VSA.  All other data formats are\
    \ \"complex types\".\n   RADIUS attributes can be classified into one of three\
    \ broad\n   categories:\n      * Attributes that are of interest to a single vendor,\
    \ e.g., for a\n        product or product line.  Minimal cross-vendor interoperability\n\
    \        is needed.\n        Vendor-Specific Attributes (VSAs) are appropriate\
    \ for use in\n        this situation.  Code-point allocation is managed by the\
    \ vendor\n        with the vendor space defined by their Private Enterprise Number\n\
    \        (PEN), as given in the Vendor-Id field.\n      * Attributes that are\
    \ of interest to an industry segment, where an\n        SDO defines the attributes\
    \ for that industry.  Multi-vendor\n        interoperability within an industry\
    \ segment is expected.\n        Vendor-Specific Attributes (VSAs) MUST be used.\
    \  Code-point\n        allocation is managed by the SDO with the vendor space\
    \ defined\n        by the SDO's PEN rather than the PEN of an individual vendor.\n\
    \      * Attributes that are of broad interest to the Internet community.\n  \
    \      Multi-vendor interoperability is expected.\n        Attributes within the\
    \ standard space are appropriate for this\n        purpose and are allocated via\
    \ IANA as described in [RFC3575].\n        Since the standard space represents\
    \ a finite resource, and is\n        the only attribute space available for use\
    \ by IETF working\n        groups, vendors, and SDOs are encouraged to utilize\
    \ the vendor\n        space rather than request allocation of attributes from\
    \ the\n        standard space.  Usage of attribute type codes reserved for\n \
    \       standard attributes is considered antisocial behavior and is\n       \
    \ strongly discouraged.\n"
- title: 2.1.  Data Types
  contents:
  - "2.1.  Data Types\n   RADIUS defines a limited set of data types, defined as \"\
    basic data\n   types\".  The following data qualifies as \"basic data types\"\
    :\n      * 32-bit unsigned integer in network byte order.\n      * Enumerated\
    \ data types, represented as a 32-bit unsigned integer\n        with a list of\
    \ name to value mappings (e.g., Service-Type).\n      * IPv4 address in network\
    \ byte order.\n      * Time as a 32-bit unsigned value in network byte order and\
    \ in\n        seconds since 00:00:00 UTC, January 1, 1970.\n      * IPv6 address\
    \ in network byte order.\n      * Interface-Id (8-octet string in network byte\
    \ order).\n      * IPv6 prefix.\n      * String (i.e., binary data), totaling\
    \ 253 octets or less in\n        length.  This includes the opaque encapsulation\
    \ of data\n        structures defined outside of RADIUS.  See also Appendix A.1.3\n\
    \        for additional discussion.\n      * UTF-8 text [RFC3629], totaling 253\
    \ octets or less in length.\n   Note that the length limitations for VSAs of type\
    \ String and Text are\n   less than 253 octets, due to the additional overhead\
    \ of the Vendor-\n   Specific encoding.\n   The following data also qualifies\
    \ as \"basic data types\":\n      * Attributes grouped into a logical container\
    \ using the [RFC2868]\n        tagging mechanism.  This approach is NOT RECOMMENDED\
    \ (see\n        Section 3.2.2) but is permissible where the alternatives are\n\
    \        worse.\n      * Attributes requiring the transport of more than 253 octets\
    \ of\n        Text or String data.  This includes the opaque encapsulation of\n\
    \        data structures defined outside of RADIUS, e.g., EAP-Message.\n   All\
    \ other data formats (including nested attributes) are defined to\n   be \"complex\
    \ data types\" and are NOT RECOMMENDED for normal use.\n   Complex data types\
    \ MAY be used in situations where they reduce\n   complexity in non-RADIUS systems\
    \ or where using the basic data types\n   would be awkward (such as where grouping\
    \ would be required in order\n   to link related attributes).  Since there are\
    \ no \"hard and fast\"\n   rules for where complexity is best located, each situation\
    \ has to be\n   decided on a case-by-case basis.  Examples of this trade-off are\n\
    \   discussed in Appendix B.  Where a complex data type is selected, an\n   explanation\
    \ SHOULD be offered as to why this was necessary.\n"
- title: 2.2.  Vendor Space
  contents:
  - "2.2.  Vendor Space\n   The Vendor space is defined to be the contents of the\
    \ Vendor-Specific\n   Attribute ([RFC2865], Section 5.26) where the Vendor-Id\
    \ defines the\n   space for a particular vendor, and the contents of the \"String\"\
    \ field\n   define a unique attribute type space for that vendor.  As discussed\n\
    \   there, it is intended for vendors and SDOs to support their own\n   attributes\
    \ not suitable for general use.\n   While the encoding of attributes within the\
    \ vendor space is under the\n   control of vendors and SDOs, following the guidelines\
    \ described here\n   is advantageous since it enables maximum interoperability\
    \ with\n   minimal changes to existing systems.\n   For example, RADIUS server\
    \ support for new attributes using \"basic\n   data types\" can typically be accomplished\
    \ by editing a RADIUS\n   dictionary, whereas \"complex data types\" typically\
    \ require RADIUS\n   server code changes, which can add complexity and delays\
    \ in\n   implementation.\n   Vendor RADIUS Attribute specifications SHOULD self-allocate\n\
    \   attributes from the vendor space rather than request an allocation\n   from\
    \ within the standard space.\n   VSA encodings that do not follow the [RFC2865],\
    \ Section 5.26 encoding\n   scheme are NOT RECOMMENDED.  Although [RFC2865] does\
    \ not mandate it,\n   implementations commonly assume that the Vendor Id can be\
    \ used as a\n   key to determine the on-the-wire encoding of a VSA.  Vendors\n\
    \   therefore SHOULD NOT use multiple encodings for VSAs that are\n   associated\
    \ with a particular Vendor Id.  A vendor wishing to use\n   multiple VSA encodings\
    \ SHOULD request one Vendor Id for each VSA\n   encoding that they will use.\n"
- title: 2.3.  Service Definitions and RADIUS
  contents:
  - "2.3.  Service Definitions and RADIUS\n   RADIUS specifications define how an\
    \ existing service or protocol can\n   be provisioned using RADIUS, usually via\
    \ the Service-Type Attribute.\n   Therefore, it is expected that a RADIUS attribute\
    \ specification will\n   reference documents defining the protocol or service\
    \ to be\n   provisioned.  Within the IETF, a RADIUS attribute specification\n\
    \   SHOULD NOT be used to define the protocol or service being\n   provisioned.\
    \  New services using RADIUS for provisioning SHOULD be\n   defined elsewhere\
    \ and referenced in the RADIUS specification.\n   New attributes, or new values\
    \ of existing attributes, SHOULD NOT be\n   used to define new RADIUS commands.\
    \  RADIUS attributes are intended\n   to:\n      * authenticate users\n      *\
    \ authorize users (i.e., service provisioning or changes to\n        provisioning)\n\
    \      * account for user activity (i.e., logging of session activity)\n   Requirements\
    \ for allocation of new commands (i.e., the Code field in\n   the packet header)\
    \ and new attributes within the standard space are\n   described in [RFC3575],\
    \ Section 2.1.\n"
- title: 2.4.  Translation of Vendor Specifications
  contents:
  - "2.4.  Translation of Vendor Specifications\n   [RFC2865], Section 5.26 defines\
    \ Vendor-Specific Attributes as\n   follows:\n      This Attribute is available\
    \ to allow vendors to support their own\n      extended Attributes not suitable\
    \ for general usage.  It MUST NOT\n      affect the operation of the RADIUS protocol.\n\
    \      Servers not equipped to interpret the vendor-specific information\n   \
    \   sent by a client MUST ignore it (although it may be reported).\n      Clients\
    \ which do not receive desired vendor-specific information\n      SHOULD make\
    \ an attempt to operate without it, although they may do\n      so (and report\
    \ they are doing so) in a degraded mode.\n   The limitation on changes to the\
    \ RADIUS protocol effectively\n   prohibits VSAs from changing fundamental aspects\
    \ of RADIUS operation,\n   such as modifying RADIUS packet sequences or adding\
    \ new commands.\n   However, the requirement for clients and servers to be able\
    \ to\n   operate in the absence of VSAs has proven to be less of a constraint\n\
    \   since it is still possible for a RADIUS client and server to mutually\n  \
    \ indicate support for VSAs, after which behavior expectations can be\n   reset.\n\
    \   Therefore, RFC 2865 provides considerable latitude for development of\n  \
    \ new attributes within the vendor space, while prohibiting development\n   of\
    \ protocol variants.  This flexibility implies that RADIUS\n   attributes can\
    \ often be developed within the vendor space without\n   loss (and possibly even\
    \ with gain) in functionality.\n   As a result, translation of RADIUS attributes\
    \ developed within the\n   vendor space into the standard space may provide only\
    \ modest\n   benefits, while accelerating the exhaustion of the standard space.\n\
    \   We do not expect that all RADIUS attribute specifications requiring\n   interoperability\
    \ will be developed within the IETF, and allocated\n   from the standard space.\
    \  A more scalable approach is to recognize\n   the flexibility of the vendor\
    \ space, while working toward\n   improvements in the quality and availability\
    \ of RADIUS attribute\n   specifications, regardless of where they are developed.\n\
    \   It is therefore NOT RECOMMENDED that specifications intended solely\n   for\
    \ use by a vendor or SDO be translated into the standard space.\n"
- title: 3.  Rationale
  contents:
  - "3.  Rationale\n   This section outlines the rationale behind the above recommendations.\n"
- title: 3.1.  RADIUS Operational Model
  contents:
  - "3.1.  RADIUS Operational Model\n   The RADIUS operational model includes several\
    \ assumptions:\n      * The RADIUS protocol is stateless.\n      * Provisioning\
    \ of services is not possible within an Access-Reject\n        or Disconnect-Request.\n\
    \      * There is a distinction between authorization checks and user\n      \
    \  authentication.\n      * The protocol provides for authentication and integrity\n\
    \        protection of packets.\n      * The RADIUS protocol is a Request/Response\
    \ protocol.\n      * The protocol defines packet length restrictions.\n   While\
    \ RADIUS server implementations may keep state, the RADIUS\n   protocol is stateless,\
    \ although information may be passed from one\n   protocol transaction to another\
    \ via the State Attribute.  As a\n   result, documents that require stateful protocol\
    \ behavior without use\n   of the State Attribute are inherently incompatible\
    \ with RADIUS as\n   defined in [RFC2865] and MUST be redesigned.  See [RFC5080],\
    \ Section\n   2.1.1 for additional discussion surrounding the use of the State\n\
    \   Attribute.\n   As noted in [RFC5080], Section 2.6, the intent of an Access-Reject\
    \ is\n   to deny access to the requested service.  As a result, RADIUS does\n\
    \   not allow the provisioning of services within an Access-Reject or\n   Disconnect-Request.\
    \  Documents that include provisioning of services\n   within an Access-Reject\
    \ or Disconnect-Request are inherently\n   incompatible with RADIUS and need to\
    \ be redesigned.\n   [RFC5176], Section 3 notes the following:\n      A Disconnect-Request\
    \ MUST contain only NAS and session\n      identification attributes.  If other\
    \ attributes are included in a\n      Disconnect-Request, implementations MUST\
    \ send a Disconnect-NAK; an\n      Error-Cause Attribute with value \"Unsupported\
    \ Attribute\" MAY be\n      included.\n   As a result, documents that include\
    \ provisioning of services within a\n   Disconnect-Request are inherently incompatible\
    \ with RADIUS and need\n   to be redesigned.\n   As noted in [RFC5080], Section\
    \ 2.1.1, a RADIUS Access-Request may not\n   contain user authentication attributes\
    \ or a State Attribute linking\n   the Access-Request to an earlier user authentication.\
    \  Such an\n   Access-Request, known as an authorization check, provides no\n\
    \   assurance that it corresponds to a live user.  RADIUS specifications\n   defining\
    \ attributes containing confidential information (such as\n   Tunnel-Password)\
    \ should be careful to prohibit such attributes from\n   being returned in response\
    \ to an authorization check.  Also,\n   [RFC5080], Section 2.1.1 notes that authentication\
    \ mechanisms need to\n   tie a sequence of Access-Request/Access-Challenge packets\
    \ together\n   into one authentication session.  The State Attribute is RECOMMENDED\n\
    \   for this purpose.\n   While [RFC2865] did not require authentication and integrity\n\
    \   protection of RADIUS Access-Request packets, subsequent\n   authentication\
    \ mechanism specifications, such as RADIUS/EAP [RFC3579]\n   and Digest Authentication\
    \ [RFC5090], have mandated authentication and\n   integrity protection for certain\
    \ RADIUS packets.  [RFC5080], Section\n   2.1.1 makes this behavior RECOMMENDED\
    \ for all Access-Request packets,\n   including Access-Request packets performing\
    \ authorization checks.  It\n   is expected that specifications for new RADIUS\
    \ authentication\n   mechanisms will continue this practice.\n   The RADIUS protocol\
    \ as defined in [RFC2865] is a request-response\n   protocol spoken between RADIUS\
    \ clients and servers.  A single RADIUS\n   request packet ([RFC2865], [RFC2866],\
    \ or [RFC5176]) will solicit in\n   response at most a single response packet,\
    \ sent to the IP address and\n   port of the RADIUS client that originated the\
    \ request.  Changes to\n   this model are likely to require major revisions to\
    \ existing\n   implementations, and this practice is NOT RECOMMENDED.\n   The\
    \ Length field in the RADIUS packet header is defined in [RFC2865]\n   Section\
    \ 3.  It is noted there that the maximum length of a RADIUS\n   packet is 4096\
    \ octets.  As a result, attribute designers SHOULD NOT\n   assume that a RADIUS\
    \ implementation can successfully process RADIUS\n   packets larger than 4096\
    \ octets.\n   Even when packets are less than 4096 octets, they may be larger\
    \ than\n   the Path Maximum Transmission Unit (PMTU).  Any packet larger than\n\
    \   the PMTU will be fragmented, making communications more brittle as\n   firewalls\
    \ and filtering devices often discard fragments.  Transport\n   of fragmented\
    \ UDP packets appears to be a poorly tested code path on\n   network devices.\
    \  Some devices appear to be incapable of transporting\n   fragmented UDP packets,\
    \ making it difficult to deploy RADIUS in a\n   network where those devices are\
    \ deployed.  We RECOMMEND that RADIUS\n   messages be kept as small possible.\n\
    \   If a situation is envisaged where it may be necessary to carry\n   authentication,\
    \ authorization, or accounting data in a packet larger\n   than 4096 octets, then\
    \ one of the following approaches is\n   RECOMMENDED:\n      1.  Utilization of\
    \ a sequence of packets.\n          For RADIUS authentication, a sequence of Access-\n\
    \          Request/Access-Challenge packets would be used.  For this to\n    \
    \      be feasible, attribute designers need to enable inclusion of\n        \
    \  attributes that can consume considerable space within Access-\n          Challenge\
    \ packets.  To maintain compatibility with existing\n          NASes, either the\
    \ use of Access-Challenge packets needs to be\n          permissible (as with\
    \ RADIUS/EAP, defined in [RFC3579]) or\n          support for receipt of an Access-Challenge\
    \ needs to be\n          indicated by the NAS (as in RADIUS Location [RFC5580]).\
    \  Also,\n          the specification needs to clearly describe how attribute\n\
    \          splitting is to be signaled and how attributes included within\n  \
    \        the sequence are to be interpreted, without requiring stateful\n    \
    \      operation.  Unfortunately, previous specifications have not\n         \
    \ always exhibited the required foresight.  For example, even\n          though\
    \ very large filter rules are conceivable, the NAS-\n          Filter-Rule Attribute\
    \ defined in [RFC4849] is not permitted in\n          an Access-Challenge packet,\
    \ nor is a mechanism specified to\n          allow a set of NAS-Filter-Rule Attributes\
    \ to be split across\n          an Access-Request/Access-Challenge sequence.\n\
    \          In the case of RADIUS accounting, transporting large amounts\n    \
    \      of data would require a sequence of Accounting-Request\n          packets.\
    \  This is a non-trivial change to RADIUS, since RADIUS\n          accounting\
    \ clients would need to be modified to split the\n          attribute stream across\
    \ multiple Accounting-Requests, and\n          billing servers would need to be\
    \ modified to reassemble and\n          interpret the attribute stream.\n    \
    \  2.  Utilization of names rather than values.\n          Where an attribute\
    \ relates to a policy that could conceivably\n          be pre-provisioned on\
    \ the NAS, then the name of the pre-\n          provisioned policy can be transmitted\
    \ in an attribute rather\n          than the policy itself, which could be quite\
    \ large.  An\n          example of this is the Filter-Id Attribute defined in\n\
    \          [RFC2865], Section 5.11, which enables a set of pre-\n          provisioned\
    \ filter rules to be referenced by name.\n      3.  Utilization of Packetization\
    \ Layer Path MTU Discovery\n          techniques, as specified in [RFC4821].\n\
    \          As a last resort, where the above techniques cannot be made to\n  \
    \        work, it may be possible to apply the techniques described in\n     \
    \     [RFC4821] to discover the maximum supported RADIUS packet size\n       \
    \   on the path between a RADIUS client and a home server.  While\n          such\
    \ an approach can avoid the complexity of utilization of a\n          sequence\
    \ of packets, dynamic discovery is likely to be time\n          consuming and\
    \ cannot be guaranteed to work with existing\n          RADIUS implementations.\
    \  As a result, this technique is not\n          generally applicable.\n"
- title: 3.2.  Data Model Issues
  contents:
  - "3.2.  Data Model Issues\n   While [RFC2865], Section 5 defines basic data types,\
    \ later\n   specifications did not follow this practice.  This problem has led\n\
    \   implementations to define their own names for data types, resulting\n   in\
    \ non-standard names for those types.\n   In addition, the number of vendors and\
    \ SDOs creating new attributes\n   within the vendor space has grown, and this\
    \ has led to some\n   divergence in approaches to RADIUS attribute design.  For\
    \ example,\n   vendors and SDOs have evolved the data model to support functions\n\
    \   such as new data types along with attribute grouping and attribute\n   fragmentation,\
    \ with different groups taking different approaches.\n   These approaches are\
    \ often incompatible, leading to additional\n   complexity in RADIUS implementations.\n\
    \   In order to avoid repeating old mistakes, this section describes the\n   history\
    \ of the RADIUS data model and attempts to codify existing\n   practices.\n"
- title: 3.2.1.  Issues with Definitions of Types
  contents:
  - "3.2.1.  Issues with Definitions of Types\n   [RFC2865], Section 5 explicitly\
    \ defines five data types: text,\n   string, address, integer, and time.  Both\
    \ the names and\n   interpretations of the types are given.\n   Subsequent RADIUS\
    \ specifications defined attributes by using type\n   names not defined in [RFC2865],\
    \ without defining the new names as\n   done in [RFC2865].  They did not consistently\
    \ indicate the format of\n   the value field using the same conventions as [RFC2865].\
    \  As a\n   result, the data type is ambiguous in some cases and may not be\n\
    \   consistent among different implementations.\n   It is out of the scope of\
    \ this document to resolve all potential\n   ambiguities within existing RADIUS\
    \ specifications.  However, in order\n   to prevent future ambiguities, it is\
    \ RECOMMENDED that future RADIUS\n   attribute specifications explicitly define\
    \ newly created data types\n   at the beginning of the document and indicate clearly\
    \ the data type\n   to be used for each attribute.\n   For example, [RFC3162]\
    \ utilizes, but does not explicitly define, a\n   type that encapsulates an IPv6\
    \ address (Sections 2.1 and 2.4) and\n   another type that encapsulates an IPv6\
    \ prefix (Section 2.3).  The\n   IPv6 address attributes confusingly are referenced\
    \ as type \"Address\"\n   in the document.  This is a similar name as the \"address\"\
    \ type\n   defined in [RFC2865], which was defined to refer solely to IPv4\n \
    \  addresses.\n   While the Framed-Interface-Id Attribute defined in [RFC3162],\
    \ Section\n   2.2 included a value field of 8 octets, the data type was not\n\
    \   explicitly indicated; therefore, there is controversy over whether\n   the\
    \ format of the data was intended to be an 8-octet String or\n   whether a special\
    \ Interface-Id type was intended.\n   Given that attributes encapsulating an IPv6\
    \ address and an IPv6\n   prefix are already in use, it is RECOMMENDED that RADIUS\
    \ server\n   implementations include support for these as basic types, in addition\n\
    \   to the types defined in [RFC2865].  Where the intent is to represent\n   a\
    \ specific IPv6 address, an \"IPv6 address\" type SHOULD be used.\n   Although\
    \ it is possible to use an \"IPv6 Prefix\" type with a prefix\n   length of 128\
    \ to represent an IPv6 address, this usage is NOT\n   RECOMMENDED.  Implementations\
    \ supporting the Framed-Interface-Id\n   Attribute may select a data type of their\
    \ choosing (most likely an\n   8-octet String or a special \"Interface Id\" data\
    \ type).\n   It is worth noting that since RADIUS only supports unsigned integers\n\
    \   of 32 bits, attributes using signed integer data types or unsigned\n   integer\
    \ types of other sizes will require code changes and SHOULD be\n   avoided.\n\
    \   For [RFC2865] RADIUS VSAs, the length limitation of the String and\n   Text\
    \ types is 247 octets instead of 253 octets, due to the additional\n   overhead\
    \ of the Vendor-Specific Attribute.\n"
- title: 3.2.2.  Tagging Mechanism
  contents:
  - "3.2.2.  Tagging Mechanism\n   [RFC2868] defines an attribute grouping mechanism\
    \ based on the use of\n   a one-octet tag value.  Tunnel attributes that refer\
    \ to the same\n   tunnel are grouped together by virtue of using the same tag\
    \ value.\n   This tagging mechanism has some drawbacks.  There are a limited\n\
    \   number of unique tags (31).  The tags are not well suited for use\n   with\
    \ arbitrary binary data values because it is not always possible\n   to tell if\
    \ the first byte after the Length is the tag or the first\n   byte of the untagged\
    \ value (assuming the tag is optional).\n   Other limitations of the tagging mechanism\
    \ are that when integer\n   values are tagged, the value portion is reduced to\
    \ three bytes,\n   meaning only 24-bit numbers can be represented.  The tagging\n\
    \   mechanism does not offer an ability to create nested groups of\n   attributes.\
    \  Some RADIUS implementations treat tagged attributes as\n   having the additional\
    \ data types tagged-string and tagged-integer.\n   These types increase the complexity\
    \ of implementing and managing\n   RADIUS systems.\n   For these reasons, the\
    \ tagging scheme described in RFC 2868 is NOT\n   RECOMMENDED for use as a generic\
    \ grouping mechanism.\n"
- title: 3.2.3.  Complex Data Types
  contents:
  - "3.2.3.  Complex Data Types\n   As described in this section, the creation of\
    \ complex types can lead\n   to interoperability and deployment issues, so they\
    \ need to be\n   introduced with care.  For example, the RADIUS attribute encoding\
    \ is\n   summarized in [RFC2865]:\n    0                   1                 \
    \  2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   |     Type      |    Length     |  Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   However, some standard attributes pack multiple sub-fields into the\n   \"\
    Value\" field, resulting in the creation a non-standard, i.e.,\n   complex, type.\
    \  Separating these sub-fields into different\n   attributes, each with its own\
    \ type and length, would have the\n   following benefits:\n      * When manual\
    \ data entry is required, it is easier for an\n        administrator to enter\
    \ the data as well-known types rather than\n        as complex structures.\n \
    \     * It enables additional error checking by leveraging the parsing\n     \
    \   and validation routines for well-known types.\n      * It simplifies implementations\
    \ by eliminating special-case,\n        attribute-specific parsing.\n   One of\
    \ the fundamental goals of the RADIUS protocol design was to\n   allow RADIUS\
    \ servers to be configured to support new attributes,\n   without requiring server\
    \ code changes.  RADIUS server implementations\n   typically provide support for\
    \ basic data types and define attributes\n   in a data dictionary.  This architecture\
    \ enables a new attribute to\n   be supported by the addition of a dictionary\
    \ entry, without requiring\n   other RADIUS server code changes.\n   Code changes\
    \ can also be required in policy management systems and in\n   the RADIUS server's\
    \ receive path.  These changes are due to\n   limitations in RADIUS server policy\
    \ languages, which commonly provide\n   for limited operations (such as comparisons\
    \ or arithmetic operations)\n   on the existing data types.  Many existing RADIUS\
    \ policy languages\n   typically are not capable of parsing sub-elements or providing\
    \ more\n   sophisticated matching functionality.\n   On the RADIUS client, code\
    \ changes are typically required in order to\n   implement a new attribute.  The\
    \ RADIUS client typically has to\n   compose the attribute dynamically when sending.\
    \  When receiving, a\n   RADIUS client needs to be able to parse the attribute\
    \ and carry out\n   the requested service.  As a result, a detailed understanding\
    \ of the\n   new attribute is required on clients, and data dictionaries are less\n\
    \   useful on clients than on servers.\n   Given these limitations, the introduction\
    \ of new types can require\n   code changes on the RADIUS server, which would\
    \ be unnecessary if\n   basic data types had been used instead.  In addition,\
    \ if \"ad hoc\"\n   types are used, attribute-specific parsing is required, which\
    \ means\n   more complex software to develop and maintain.  More complexity can\n\
    \   lead to more error-prone implementations, interoperability problems,\n   and\
    \ even security vulnerabilities.  These issues can increase costs\n   to network\
    \ administrators as well as reduce reliability and introduce\n   deployment barriers.\n"
- title: 3.2.4.  Complex Data Type Exceptions
  contents:
  - "3.2.4.  Complex Data Type Exceptions\n   As described in Section 2.1, the introduction\
    \ of complex data types\n   is discouraged where viable alternatives are available.\
    \  A potential\n   exception is attributes that inherently require code changes\
    \ on both\n   the client and server.  For example, as described in Appendix B,\n\
    \   complex attributes have been used in situations involving\n   authentication\
    \ and security attributes, which need to be dynamically\n   computed and verified.\
    \  Supporting this functionality requires code\n   changes on both the RADIUS\
    \ client and server, regardless of the\n   attribute format.  As a result, in\
    \ most cases, the use of complex\n   attributes to represent these methods is\
    \ acceptable and does not\n   create additional interoperability or deployment\
    \ issues.\n   Another exception to the recommendation against complex types is\
    \ for\n   types that can be treated as opaque data by the RADIUS server.  For\n\
    \   example, the EAP-Message Attribute, defined in [RFC3579], Section\n   3.1,\
    \ contains a complex data type that is an Extensible\n   Authentication Protocol\
    \ (EAP) packet.  Since these complex types do\n   not need to be parsed by the\
    \ RADIUS server, the issues arising from\n   server limitations do not arise.\
    \  Similarly, since attributes of\n   these complex types can be configured on\
    \ the server using a data type\n   of String, dictionary limitations are also\
    \ not encountered.  Appendix\n   A.1 includes a series of checklists that may\
    \ be used to analyze a\n   design for RECOMMENDED and NOT RECOMMENDED behavior\
    \ in relation to\n   complex types.\n   If the RADIUS Server simply passes the\
    \ contents of an attribute to\n   some non-RADIUS portion of the network, then\
    \ the data is opaque to\n   RADIUS and SHOULD be defined to be of type String.\
    \  A concrete way of\n   judging this requirement is whether or not the attribute\
    \ definition\n   in the RADIUS document contains delineated fields for sub-parts\
    \ of\n   the data.  If those fields need to be delineated in RADIUS, then the\n\
    \   data is not opaque to RADIUS, and it SHOULD be separated into\n   individual\
    \ RADIUS attributes.\n   An examination of existing RADIUS RFCs discloses a number\
    \ of complex\n   attributes that have already been defined.  Appendix B includes\
    \ a\n   listing of complex attributes used within [RFC2865], [RFC2868],\n   [RFC2869],\
    \ [RFC3162], [RFC4818], and [RFC4675].  The discussion of\n   these attributes\
    \ includes reasons why a complex type is acceptable or\n   suggestions for how\
    \ the attribute could have been defined to follow\n   the RADIUS data model.\n\
    \   In other cases, the data in the complex type are described textually\n   in\
    \ a specification.  This is possible because the data types are not\n   sent within\
    \ the attributes but are a matter for endpoint\n   interpretation.  An implementation\
    \ can define additional data types\n   and use these data types today by matching\
    \ them to the attribute's\n   textual definition.\n"
- title: 3.3.  Vendor Space
  contents:
  - "3.3.  Vendor Space\n   The usage model for RADIUS VSAs is described in [RFC2865],\
    \ Section\n   6.2:\n      Note that RADIUS defines a mechanism for Vendor-Specific\n\
    \      extensions (Attribute 26) and the use of that should be encouraged\n  \
    \    instead of allocation of global attribute types, for functions\n      specific\
    \ only to one vendor's implementation of RADIUS, where no\n      interoperability\
    \ is deemed useful.\n   Nevertheless, many new attributes have been defined in\
    \ the vendor\n   space in situations where interoperability is not only useful\
    \ but is\n   required.  For example, SDOs outside the IETF (such as the IEEE 802\n\
    \   and the 3rd Generation Partnership Project (3GPP)) have been assigned\n  \
    \ Vendor-Ids, enabling them to define their own VSA encoding and assign\n   Vendor\
    \ types within their own vendor space, as defined by their\n   unique Vendor-Id.\n\
    \   The use of VSAs by SDOs outside the IETF has gained in popularity for\n  \
    \ several reasons:\n   Efficiency\n      As with SNMP, which defines an \"Enterprise\"\
    \ Object Identifier\n      (OID) space suitable for use by vendors as well as\
    \ other SDOs, the\n      definition of Vendor-Specific Attributes has become a\
    \ common\n      occurrence as part of standards activity outside the IETF.  For\n\
    \      reasons of efficiency, it is easiest if the RADIUS attributes\n      required\
    \ to manage a standard are developed within the same SDO\n      that develops\
    \ the standard itself.  As noted in \"Transferring MIB\n      Work from IETF Bridge\
    \ MIB WG to IEEE 802.1 WG\" [RFC4663], today\n      few vendors are willing to\
    \ simultaneously fund individuals to\n      participate within an SDO to complete\
    \ a standard as well as to\n      participate in the IETF in order to complete\
    \ the associated RADIUS\n      attributes specification.\n   Attribute scarcity\n\
    \      The standard space is limited to 255 unique attributes.  Of these,\n  \
    \    only about half remain available for allocation.  In the vendor\n      space,\
    \ the number of attributes available is a function of the\n      encoding of the\
    \ attribute (the size of the Vendor type field).\n"
- title: 3.3.1.  Interoperability Considerations
  contents:
  - "3.3.1.  Interoperability Considerations\n   Vendors and SDOs are reminded that\
    \ the standard space and the\n   enumerated value space for enumerated attributes\
    \ are reserved for\n   allocation through work published via the IETF, as noted\
    \ in\n   [RFC3575], Section 2.1.  In the past, some vendors and SDOs have\n  \
    \ assigned vendor-specific meaning to \"unused\" values from the standard\n  \
    \ space.  This process results in interoperability issues and is\n   counterproductive.\
    \  Similarly, the vendor-specific enumeration\n   practice discussed in [RFC2882],\
    \ Section 2.2.1 is NOT RECOMMENDED.\n   If it is not possible to follow the IETF\
    \ process, vendors and SDOs\n   SHOULD self-allocate an attribute, which MUST\
    \ be in their own vendor\n   space as defined by their unique Vendor-Id, as discussed\
    \ in Sections\n   3.3.2 and 3.3.3.\n   The design and specification of VSAs for\
    \ multi-vendor usage SHOULD be\n   undertaken with the same level of care as standard\
    \ RADIUS attributes.\n   Specifically, the provisions of this document that apply\
    \ to standard\n   RADIUS attributes also apply to VSAs for multi-vendor usage.\n"
- title: 3.3.2.  Vendor Allocations
  contents:
  - "3.3.2.  Vendor Allocations\n   As noted in [RFC3575], Section 2.1, vendors are\
    \ encouraged to utilize\n   VSAs to define functions \"specific only to one vendor's\n\
    \   implementation of RADIUS, where no interoperability is deemed useful.\n  \
    \ For functions specific only to one vendor's implementation of RADIUS,\n   the\
    \ use of that should be encouraged instead of the allocation of\n   global attribute\
    \ types\".\n   The recommendation for vendors to allocate attributes from a vendor\n\
    \   space rather than via the IETF process is a recognition that vendors\n   desire\
    \ to assert change control over their own RADIUS specifications.\n   This change\
    \ control can be obtained by requesting a PEN from the\n   Internet Assigned Number\
    \ Authority (IANA) for use as a Vendor-Id\n   within a Vendor-Specific Attribute.\
    \  The vendor can then allocate\n   attributes within the vendor space defined\
    \ by that Vendor-Id at their\n   sole discretion.  Similarly, the use of data\
    \ types (complex or\n   otherwise) within that vendor space is solely under the\
    \ discretion of\n   the vendor.\n"
- title: 3.3.3.  SDO Allocations
  contents:
  - "3.3.3.  SDO Allocations\n   Given the expanded utilization of RADIUS, it has\
    \ become apparent that\n   requiring SDOs to accomplish all their RADIUS work\
    \ within the IETF is\n   inherently inefficient and unscalable.  It is therefore\
    \ RECOMMENDED\n   that SDO RADIUS Attribute specifications allocate attributes\
    \ from the\n   vendor space rather than request an allocation from the RADIUS\n\
    \   standard space for attributes matching any of the following criteria:\n  \
    \    * Attributes relying on data types not defined within RADIUS\n      * Attributes\
    \ intended primarily for use within an SDO\n      * Attributes intended primarily\
    \ for use within a group of SDOs\n   Any new RADIUS attributes or values intended\
    \ for interoperable use\n   across a broad spectrum of the Internet community\
    \ SHOULD follow the\n   allocation process defined in [RFC3575].\n   The recommendation\
    \ for SDOs to allocate attributes from a vendor\n   space rather than via the\
    \ IETF process is a recognition that SDOs\n   desire to assert change control\
    \ over their own RADIUS specifications.\n   This change control can be obtained\
    \ by requesting a PEN from the\n   Internet Assigned Number Authority (IANA) for\
    \ use as a Vendor-Id\n   within a Vendor-Specific Attribute.  The SDO can then\
    \ allocate\n   attributes within the vendor space defined by that Vendor-Id at\
    \ their\n   sole discretion.  Similarly, the use of data types (complex or\n \
    \  otherwise) within that vendor space is solely under the discretion of\n   the\
    \ SDO.\n"
- title: 3.4.  Polymorphic Attributes
  contents:
  - "3.4.  Polymorphic Attributes\n   A polymorphic attribute is one whose format\
    \ or meaning is dynamic.\n   For example, rather than using a fixed data format,\
    \ an attribute's\n   format might change based on the contents of another attribute.\
    \  Or,\n   the meaning of an attribute may depend on earlier packets in a\n  \
    \ sequence.\n   RADIUS server dictionary entries are typically static, enabling\
    \ the\n   user to enter the contents of an attribute without support for\n   changing\
    \ the format based on dynamic conditions.  However, this\n   limitation on static\
    \ types does not prevent implementations from\n   implementing policies that return\
    \ different attributes based on the\n   contents of received attributes; this\
    \ is a common feature of existing\n   RADIUS implementations.\n   In general,\
    \ polymorphism is NOT RECOMMENDED.  Polymorphism rarely\n   enables capabilities\
    \ that would not be available through use of\n   multiple attributes.  Polymorphism\
    \ requires code changes in the\n   RADIUS server in situations where attributes\
    \ with fixed formats would\n   not require such changes.  Thus, polymorphism increases\
    \ complexity\n   while decreasing generality, without delivering any corresponding\n\
    \   benefits.\n   Note that changing an attribute's format dynamically is not\
    \ the same\n   thing as using a fixed format and computing the attribute itself\n\
    \   dynamically.  RADIUS authentication attributes, such as User-\n   Password,\
    \ EAP-Message, etc., while being computed dynamically, use a\n   fixed format.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document has no action items for IANA.  However,\
    \ it does provide\n   guidelines for Expert Reviewers appointed as described in\
    \ [RFC3575].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This specification provides guidelines for the\
    \ design of RADIUS\n   attributes used in authentication, authorization, and accounting.\n\
    \   Threats and security issues for this application are described in\n   [RFC3579]\
    \ and [RFC3580]; security issues encountered in roaming are\n   described in [RFC2607].\n\
    \   Obfuscation of RADIUS attributes on a per-attribute basis is\n   necessary\
    \ in some cases.  The current standard mechanism for this is\n   described in\
    \ [RFC2865], Section 5.2 (for obscuring User-Password\n   values) and is based\
    \ on the MD5 algorithm specified in [RFC1321].\n   The MD5 and SHA-1 algorithms\
    \ have recently become a focus of scrutiny\n   and concern in security circles,\
    \ and as a result, the use of these\n   algorithms in new attributes is NOT RECOMMENDED.\
    \  In addition,\n   previous documents referred to this method as generating \"\
    encrypted\"\n   data.  This terminology is no longer accepted within the\n   cryptographic\
    \ community.\n   Where new RADIUS attributes use cryptographic algorithms, algorithm\n\
    \   negotiation SHOULD be supported.  Specification of a mandatory-to-\n   implement\
    \ algorithm is REQUIRED, and it is RECOMMENDED that the\n   mandatory-to-implement\
    \ algorithm be certifiable under FIPS 140\n   [FIPS].\n   Where new RADIUS attributes\
    \ encapsulate complex data types, or\n   transport opaque data, the security considerations\
    \ discussed in\n   Section 5.1 SHOULD be addressed.\n   Message authentication\
    \ in RADIUS is provided largely via the Message-\n   Authenticator attribute.\
    \  See Section 3.2 of [RFC3579] and also\n   Section 2.2.2 of [RFC5080], which\
    \ say that client implementations\n   SHOULD include a Message-Authenticator Attribute\
    \ in every Access-\n   Request.\n   In general, the security of the RADIUS protocol\
    \ is poor.  Robust\n   deployments SHOULD support a secure communications protocol\
    \ such as\n   IPsec.  See Section 4 of [RFC3579] and Section 5 of [RFC3580] for\
    \ a\n   more in-depth explanation of these issues.\n   Implementations not following\
    \ the suggestions outlined in this\n   document may be subject to problems such\
    \ as ambiguous protocol\n   decoding, packet loss leading to loss of billing information,\
    \ and\n   denial-of-service attacks.\n"
- title: 5.1.  New Data Types and Complex Attributes
  contents:
  - "5.1.  New Data Types and Complex Attributes\n   The introduction of complex data\
    \ types brings the potential for the\n   introduction of new security vulnerabilities.\
    \  Experience shows that\n   the common data types have few security vulnerabilities,\
    \ or else that\n   all known issues have been found and fixed.  New data types\
    \ require\n   new code, which may introduce new bugs and therefore new attack\n\
    \   vectors.\n   Some systems permit complex attributes to be defined via a method\n\
    \   that is more capable than traditional RADIUS dictionaries.  These\n   systems\
    \ can reduce the security threat of new types significantly,\n   but they do not\
    \ remove it entirely.\n   RADIUS servers are highly valued targets, as they control\
    \ network\n   access and interact with databases that store usernames and\n  \
    \ passwords.  An extreme outcome of a vulnerability due to a new,\n   complex\
    \ type would be that an attacker is capable of taking complete\n   control over\
    \ the RADIUS server.\n   The use of attributes representing opaque data does not\
    \ reduce this\n   threat.  The threat merely moves from the RADIUS server to the\
    \ system\n   that consumes that opaque data.  The threat is particularly severe\n\
    \   when the opaque data originates from the user and is not validated by\n  \
    \ the NAS.  In those cases, the RADIUS server is potentially exposed to\n   attack\
    \ by malware residing on an unauthenticated host.\n   Any system consuming opaque\
    \ data that originates from a RADIUS system\n   SHOULD be properly isolated from\
    \ that RADIUS system and SHOULD run\n   with minimal privileges.  Any potential\
    \ vulnerabilities in the non-\n   RADIUS system will then have minimal impact\
    \ on the security of the\n   system as a whole.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2865]     Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n\
    \                 \"Remote Authentication Dial In User Service (RADIUS)\",\n \
    \                RFC 2865, June 2000.\n   [RFC3575]     Aboba, B., \"IANA Considerations\
    \ for RADIUS (Remote\n                 Authentication Dial In User Service)\"\
    , RFC 3575, July\n                 2003.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC1155]     Rose, M. and K. McCloghrie, \"\
    Structure and\n                 identification of management information for TCP/IP-\n\
    \                 based internets\", STD 16, RFC 1155, May 1990.\n   [RFC1157]\
    \     Case, J., Fedor, M., Schoffstall, M., and J. Davin,\n                 \"\
    Simple Network Management Protocol (SNMP)\", RFC 1157,\n                 May 1990.\n\
    \   [RFC1321]     Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC\n    \
    \             1321, April 1992.\n   [RFC2548]     Zorn, G., \"Microsoft Vendor-specific\
    \ RADIUS\n                 Attributes\", RFC 2548, March 1999.\n   [RFC2607] \
    \    Aboba, B. and J. Vollbrecht, \"Proxy Chaining and Policy\n              \
    \   Implementation in Roaming\", RFC 2607, June 1999.\n   [RFC2866]     Rigney,\
    \ C., \"RADIUS Accounting\", RFC 2866, June 2000.\n   [RFC2868]     Zorn, G.,\
    \ Leifer, D., Rubens, A., Shriver, J.,\n                 Holdrege, M., and I.\
    \ Goyret, \"RADIUS Attributes for\n                 Tunnel Protocol Support\"\
    , RFC 2868, June 2000.\n   [RFC2869]     Rigney, C., Willats, W., and P. Calhoun,\
    \ \"RADIUS\n                 Extensions\", RFC 2869, June 2000.\n   [RFC2882]\
    \     Mitton, D., \"Network Access Servers Requirements:\n                 Extended\
    \ RADIUS Practices\", RFC 2882, July 2000.\n   [RFC3162]     Aboba, B., Zorn,\
    \ G., and D. Mitton, \"RADIUS and IPv6\",\n                 RFC 3162, August 2001.\n\
    \   [RFC3579]     Aboba, B. and P. Calhoun, \"RADIUS (Remote\n               \
    \  Authentication Dial In User Service) Support For\n                 Extensible\
    \ Authentication Protocol (EAP)\", RFC 3579,\n                 September 2003.\n\
    \   [RFC3580]     Congdon, P., Aboba, B., Smith, A., Zorn, G., and J.\n      \
    \           Roese, \"IEEE 802.1X Remote Authentication Dial In User\n        \
    \         Service (RADIUS) Usage Guidelines\", RFC 3580, September\n         \
    \        2003.\n   [RFC3629]     Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n                 10646\", STD 63, RFC 3629, November 2003.\n   [RFC4181]\
    \     Heard, C., Ed., \"Guidelines for Authors and Reviewers\n               \
    \  of MIB Documents\", BCP 111, RFC 4181, September 2005.\n   [RFC4663]     Harrington,\
    \ D., \"Transferring MIB Work from IETF Bridge\n                 MIB WG to IEEE\
    \ 802.1 WG\", RFC 4663, September 2006.\n   [RFC4675]     Congdon, P., Sanchez,\
    \ M., and B. Aboba, \"RADIUS\n                 Attributes for Virtual LAN and\
    \ Priority Support\", RFC\n                 4675, September 2006.\n   [RFC4679]\
    \     Mammoliti, V., Zorn, G., Arberg, P., and R. Rennison,\n                \
    \ \"DSL Forum Vendor-Specific RADIUS Attributes\", RFC\n                 4679,\
    \ September 2006.\n   [RFC4818]     Salowey, J. and R. Droms, \"RADIUS Delegated-IPv6-Prefix\n\
    \                 Attribute\", RFC 4818, April 2007.\n   [RFC4821]     Mathis,\
    \ M. and J. Heffner, \"Packetization Layer Path\n                 MTU Discovery\"\
    , RFC 4821, March 2007.\n   [RFC4849]     Congdon, P., Sanchez, M., and B. Aboba,\
    \ \"RADIUS Filter\n                 Rule Attribute\", RFC 4849, April 2007.\n\
    \   [RFC5080]     Nelson, D. and A. DeKok, \"Common Remote Authentication\n  \
    \               Dial In User Service (RADIUS) Implementation Issues and\n    \
    \             Suggested Fixes\", RFC 5080, December 2007.\n   [RFC5090]     Sterman,\
    \ B., Sadolevsky, D., Schwartz, D., Williams,\n                 D., and W. Beck,\
    \ \"RADIUS Extension for Digest\n                 Authentication\", RFC 5090,\
    \ February 2008.\n   [RFC5176]     Chiba, M., Dommety, G., Eklund, M., Mitton,\
    \ D., and B.\n                 Aboba, \"Dynamic Authorization Extensions to Remote\n\
    \                 Authentication Dial In User Service (RADIUS)\", RFC\n      \
    \           5176, January 2008.\n   [DOCTORS]     AAA Doctors Mailing List, www.ietf.org/mail-\n\
    \                 archive/web/aaa-doctors.\n   [FIPS]        FIPS 140-3 (DRAFT),\
    \ \"Security Requirements for\n                 Cryptographic Modules\",\n   \
    \              http://csrc.nist.gov/publications/PubsFIPS.html.\n   [IEEE-802.1Q]\
    \ IEEE Standards for Local and Metropolitan Area\n                 Networks: Draft\
    \ Standard for Virtual Bridged Local Area\n                 Networks, P802.1Q-2003,\
    \ January 2003.\n   [RFC5580]     Tschofenig, H., Ed., Adrangi, F., Jones, M.,\
    \ Lior, A.,\n                 and B. Aboba, \"Carrying Location Objects in RADIUS\
    \ and\n                 Diameter\", RFC 5580, August 2009.\n   [AAA-SIP]     Sterman,\
    \ B., Sadolevsky, D., Schwartz, D., Williams,\n                 D., and W. Beck,\
    \ \"RADIUS Extension for Digest\n                 Authentication\", Work in Progress,\
    \ November 2004.\n"
- title: Appendix A.  Design Guidelines Checklist
  contents:
  - "Appendix A.  Design Guidelines Checklist\n   The following text provides guidelines\
    \ for the design of attributes\n   used by the RADIUS protocol.  Specifications\
    \ that follow these\n   guidelines are expected to achieve maximum interoperability\
    \ with\n   minimal changes to existing systems.\n"
- title: A.1. Types Matching the RADIUS Data Model
  contents:
  - 'A.1. Types Matching the RADIUS Data Model

    '
- title: A.1.1. Transport of Basic Data Types
  contents:
  - "A.1.1. Transport of Basic Data Types\n   Does the data fit within the basic data\
    \ types described in Section\n   2.1?  If so, it SHOULD be encapsulated in a [RFC2865]\
    \ format RADIUS\n   attribute or in a [RFC2865] format RADIUS VSA that uses one\
    \ of the\n   existing RADIUS data types.\n"
- title: A.1.2. Transport of Authentication and Security Data
  contents:
  - "A.1.2. Transport of Authentication and Security Data\n   Does the data provide\
    \ authentication and/or security capabilities for\n   the RADIUS protocol as outlined\
    \ below?  If so, use of a complex data\n   type is acceptable under the following\
    \ circumstances:\n      * Complex data types that carry authentication methods\
    \ that RADIUS\n        servers are expected to parse and verify as part of an\n\
    \        authentication process.\n      * Complex data types that carry security\
    \ information intended to\n        increase the security of the RADIUS protocol\
    \ itself.\n   Any data type carrying authentication and/or security data that\
    \ is\n   not meant to be parsed by a RADIUS server is an \"opaque data type\"\
    ,\n   as defined in Section A.1.3.\n"
- title: A.1.3. Opaque Data Types
  contents:
  - "A.1.3. Opaque Data Types\n   Does the attribute encapsulate an existing data\
    \ structure defined\n   outside of the RADIUS specifications?  Can the attribute\
    \ be treated\n   as opaque data by RADIUS servers (including proxies)?  If both\n\
    \   questions can be answered affirmatively, a complex structure MAY be\n   used\
    \ in a RADIUS specification.\n   The specification of the attribute SHOULD define\
    \ the encapsulating\n   attribute to be of type String.  The specification SHOULD\
    \ refer to an\n   external document defining the structure.  The specification\
    \ SHOULD\n   NOT define or describe the structure, for reasons discussed in\n\
    \   Section 3.2.3.\n"
- title: A.1.4. Pre-Existing Data Types
  contents:
  - "A.1.4. Pre-Existing Data Types\n   There is a trade-off in design between reusing\
    \ existing formats for\n   historical compatibility or choosing new formats for\
    \ a \"better\"\n   design.  This trade-off does not always require the \"better\"\
    \ design\n   to be used.  As a result, pre-existing complex data types described\n\
    \   in Appendix B MAY be used.\n"
- title: A.2. Improper Data Types
  contents:
  - "A.2. Improper Data Types\n   This section suggests alternatives to data types\
    \ that do not fall\n   within the \"basic data type\" definition.  Section A.2.1\
    \ describes\n   simple data types, which should be replaced by basic data types.\n\
    \   Section A.2.2 describes more complex data types, which should be\n   replaced\
    \ by multiple attributes using the basic data types.\n"
- title: A.2.1. Simple Data Types
  contents:
  - "A.2.1. Simple Data Types\n   Does the attribute use any of the following data\
    \ types?  If so, the\n   data type SHOULD be replaced with the suggested alternatives,\
    \ or it\n   SHOULD NOT be used at all.\n      * Signed integers of any size.\n\
    \        SHOULD NOT be used.  SHOULD be replaced with one or more\n        unsigned\
    \ integer attributes.  The definition of the attribute\n        can contain information\
    \ that would otherwise go into the sign\n        value of the integer.\n     \
    \ * 8-bit unsigned integers.\n        SHOULD be replaced with 32-bit unsigned\
    \ integer.  There is\n        insufficient justification to save three bytes.\n\
    \      * 16-bit unsigned integers.\n        SHOULD be replaced with 32-bit unsigned\
    \ integer.  There is\n        insufficient justification to save two bytes.\n\
    \      * Unsigned integers of size other than 32 bits.\n        SHOULD be replaced\
    \ by an unsigned integer of 32 bits.  There is\n        insufficient justification\
    \ to define a new size of integer.\n      * Integers of any size in non-network\
    \ byte order.\n        SHOULD be replaced by unsigned integer of 32 bits in network.\n\
    \        There is no reason to transport integers in any format other\n      \
    \  than network byte order.\n      * Multi-field text strings.\n        Each field\
    \ SHOULD be encapsulated in a separate attribute.\n      * Polymorphic attributes.\n\
    \        Multiple attributes, each with a static data type, SHOULD be\n      \
    \  defined instead.\n      * Nested attribute-value pairs (AVPs).\n        Attributes\
    \ should be defined in a flat typespace.\n"
- title: A.2.2. More Complex Data Types
  contents:
  - "A.2.2. More Complex Data Types\n   Does the attribute:\n      * define a complex\
    \ data type not described in Appendix B?\n      * that a RADIUS server and/or\
    \ client is expected to parse,\n        validate, or create the contents of via\
    \ a dynamic computation\n        (i.e., a type that cannot be treated as opaque\
    \ data (Section\n        A.1.3))?\n      * involve functionality that could be\
    \ implemented without code\n        changes on both the client and server (i.e.,\
    \ a type that doesn't\n        require dynamic computation and verification, such\
    \ as those\n        performed for authentication or security attributes)?\n  \
    \ If so, this data type SHOULD be replaced with simpler types, as\n   discussed\
    \ in Appendix A.2.1.  See also Section 2.1 for a discussion\n   of why complex\
    \ types are problematic.\n"
- title: A.3. Vendor-Specific Formats
  contents:
  - "A.3. Vendor-Specific Formats\n   Does the specification contain Vendor-Specific\
    \ Attributes that match\n   any of the following criteria?  If so, the VSA encoding\
    \ should be\n   replaced with the [RFC2865], Section 5.26 encoding or should not\
    \ be\n   used at all.\n      * Vendor types of more than 8 bits.\n        SHOULD\
    \ NOT be used.  Vendor types of 8 bits SHOULD be used\n        instead.\n    \
    \  * Vendor lengths of less than 8 bits (i.e., zero bits).\n        SHOULD NOT\
    \ be used.  Vendor lengths of 8 bits SHOULD be used\n        instead.\n      *\
    \ Vendor lengths of more than 8 bits.\n        SHOULD NOT be used.  Vendor lengths\
    \ of 8 bits SHOULD be used\n        instead.\n      * Vendor-specific contents\
    \ that are not in Type-Length-Value\n        format.\n        SHOULD NOT be used.\
    \  Vendor-Specific Attributes SHOULD be in\n        Type-Length-Value format.\n\
    \   In general, Vendor-Specific Attributes SHOULD follow the encoding\n   suggested\
    \ in Section 5.26 of [RFC2865].  Vendor extensions to non-\n   standard encodings\
    \ are NOT RECOMMENDED as they can negatively affect\n   interoperability.\n"
- title: A.4. Changes to the RADIUS Operational Model
  contents:
  - "A.4. Changes to the RADIUS Operational Model\n   Does the specification change\
    \ the RADIUS operation model as outlined\n   in the list below?  If so, then another\
    \ method of achieving the\n   design objectives SHOULD be used.  Potential problem\
    \ areas include\n   the following:\n      * Defining new commands in RADIUS using\
    \ attributes.\n        The addition of new commands to RADIUS MUST be handled\
    \ via\n        allocation of a new Code and not by the use of an attribute.\n\
    \        This restriction includes new commands created by overloading\n     \
    \   the Service-Type Attribute to define new values that modify the\n        functionality\
    \ of Access-Request packets.\n      * Using RADIUS as a transport protocol for\
    \ data unrelated to\n        authentication, authorization, or accounting.\n \
    \       Using RADIUS to transport authentication methods such as EAP is\n    \
    \    explicitly permitted, even if those methods require the\n        transport\
    \ of relatively large amounts of data.  Transport of\n        opaque data relating\
    \ to AAA is also permitted, as discussed in\n        Section 3.2.3. However, if\
    \ the specification does not relate to\n        AAA, then RADIUS SHOULD NOT be\
    \ used.\n      * Assuming support for packet lengths greater than 4096 octets.\n\
    \        Attribute designers cannot assume that RADIUS implementations\n     \
    \   can successfully handle packets larger than 4096 octets.  If a\n        specification\
    \ could lead to a RADIUS packet larger than 4096\n        octets, then the alternatives\
    \ described in Section 3.3 SHOULD be\n        considered.\n      * Stateless operation.\n\
    \        The RADIUS protocol is stateless, and documents that require\n      \
    \  stateful protocol behavior without the use of the State\n        Attribute\
    \ need to be redesigned.\n      * Provisioning of service in an Access-Reject.\n\
    \        Such provisioning is not permitted, and MUST NOT be used.  If\n     \
    \   limited access needs to be provided, then an Access-Accept with\n        appropriate\
    \ authorizations can be used instead.\n      * Provisioning of service in a Disconnect-Request.\n\
    \        Such provisioning is not permitted and MUST NOT be used.  If\n      \
    \  limited access needs to be provided, then a CoA-Request\n        [RFC5176]\
    \ with appropriate authorizations can be used instead.\n      * Lack of user authentication\
    \ or authorization restrictions.\n        In an authorization check, where there\
    \ is no demonstration of a\n        live user, confidential data cannot be returned.\
    \  Where there is\n        a link to a previous user authentication, the State\
    \ Attribute\n        SHOULD be present.\n      * Lack of per-packet integrity\
    \ and authentication.\n        It is expected that documents will support per-packet\
    \ integrity\n        and authentication.\n      * Modification of RADIUS packet\
    \ sequences.\n        In RADIUS, each request is encapsulated in its own packet\
    \ and\n        elicits a single response that is sent to the requester.  Since\n\
    \        changes to this paradigm are likely to require major\n        modifications\
    \ to RADIUS client and server implementations, they\n        SHOULD be avoided\
    \ if possible.\n   For further details, see Section 3.1.\n"
- title: A.5. Allocation of Attributes
  contents:
  - "A.5. Allocation of Attributes\n   Does the attribute have a limited scope of\
    \ applicability as outlined\n   below?  If so, then the attributes SHOULD be allocated\
    \ from the\n   vendor space rather than requesting allocation from the standard\n\
    \   space.\n      * attributes intended for a vendor to support their own systems\n\
    \        and not suitable for general usage\n      * attributes relying on data\
    \ types not defined within RADIUS\n      * attributes intended primarily for use\
    \ within an SDO\n      * attributes intended primarily for use within a group\
    \ of SDOs\n   Note that the points listed above do not relax the recommendations\n\
    \   discussed in this document.  Instead, they recognize that the RADIUS\n   data\
    \ model has limitations.  In certain situations where\n   interoperability can\
    \ be strongly constrained by the SDO or vendor, an\n   expanded data model MAY\
    \ be used.  It is RECOMMENDED, however, that\n   the RADIUS data model be used,\
    \ even when it is marginally less\n   efficient than alternatives.\n   When attributes\
    \ are used primarily within a group of SDOs, and are\n   not applicable to the\
    \ wider Internet community, we expect that one\n   SDO will be responsible for\
    \ allocation from their own private vendor\n   space.\n"
- title: Appendix B.  Complex Attributes
  contents:
  - "Appendix B.  Complex Attributes\n   This appendix summarizes RADIUS attributes\
    \ with complex data types\n   that are defined in existing RFCs.\n   This appendix\
    \ is published for informational purposes only and\n   reflects the usage of attributes\
    \ with complex data types at the time\n   of the publication of this document.\n"
- title: B.1. CHAP-Password
  contents:
  - "B.1. CHAP-Password\n   [RFC2865], Section 5.3 defines the CHAP-Password Attribute,\
    \ which is\n   sent from the RADIUS client to the RADIUS server in an Access-\n\
    \   Request.  The data type of the CHAP Identifier is not given, only the\n  \
    \ one-octet length:\n    0                   1                   2\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   |     Type      |    Length     |  CHAP Ident   |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Since this is an authentication attribute, code changes are required\n   on\
    \ the RADIUS client and server to support it, regardless of the\n   attribute\
    \ format.  Therefore, this complex data type is acceptable in\n   this situation.\n"
- title: B.2. CHAP-Challenge
  contents:
  - "B.2. CHAP-Challenge\n   [RFC2865], Section 5.40 defines the CHAP-Challenge Attribute,\
    \ which\n   is sent from the RADIUS client to the RADIUS server in an Access-\n\
    \   Request.  While the data type of the CHAP Identifier is given, the\n   text\
    \ also says:\n      If the CHAP challenge value is 16 octets long it MAY be placed\
    \ in\n      the Request Authenticator field instead of using this attribute.\n\
    \   Defining attributes to contain values taken from the RADIUS packet\n   header\
    \ is NOT RECOMMENDED.  Attributes should have values that are\n   packed into\
    \ a RADIUS AVP.\n"
- title: B.3. Tunnel-Password
  contents:
  - "B.3. Tunnel-Password\n   [RFC2868], Section 3.5 defines the Tunnel-Password Attribute,\
    \ which\n   is sent from the RADIUS server to the client in an Access-Accept.\n\
    \   This attribute includes Tag and Salt fields, as well as a String\n   field\
    \ that consists of three logical sub-fields: the Data-Length\n   (required and\
    \ one octet), Password sub-fields (required), and the\n   optional Padding sub-field.\
    \  The attribute appears as follows:\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Tag       |   Salt\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Salt (cont)  |   String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Since\
    \ this is a security attribute, code changes are required on the\n   RADIUS client\
    \ and server to support it, regardless of the attribute\n   format.  However,\
    \ while use of a complex data type is acceptable in\n   this situation, the design\
    \ of the Tunnel-Password Attribute is\n   problematic from a security perspective\
    \ since it uses MD5 as a cipher\n   and provides a password to a NAS, potentially\
    \ without proper\n   authorization.\n"
- title: B.4. ARAP-Password
  contents:
  - "B.4. ARAP-Password\n   [RFC2869], Section 5.4 defines the ARAP-Password Attribute,\
    \ which is\n   sent from the RADIUS client to the server in an Access-Request.\
    \  It\n   contains four 4-octet values instead of having a single Value field:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |             Value1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   |             Value2\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   |             Value3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   |             Value4\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   As with the CHAP-Password Attribute, this is an authentication\n   attribute\
    \ that would have required code changes on the RADIUS client\n   and server, regardless\
    \ of format.\n"
- title: B.5. ARAP-Features
  contents:
  - "B.5. ARAP-Features\n   [RFC2869], Section 5.5 defines the ARAP-Features Attribute,\
    \ which is\n   sent from the RADIUS server to the client in an Access-Accept or\n\
    \   Access-Challenge.  It contains a compound string of two single octet\n   values,\
    \ plus three 4-octet values, which the RADIUS client\n   encapsulates in a feature\
    \ flags packet in the Apple Remote Access\n   Protocol (ARAP):\n   0         \
    \          1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Value1    |    Value2     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Value3                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Value4                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Value5                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Unlike the previous attributes, this attribute contains no encrypted\n   component,\
    \ nor is it directly involved in authentication.  The\n   individual sub-fields\
    \ therefore could have been encapsulated in\n   separate attributes.\n   While\
    \ the contents of this attribute are intended to be placed in an\n   ARAP packet,\
    \ the fields need to be set by the RADIUS server.  Using\n   standard RADIUS data\
    \ types would have simplified RADIUS server\n   implementations and subsequent\
    \ management.  The current form of the\n   attribute requires either the RADIUS\
    \ server implementation or the\n   RADIUS server administrator to understand the\
    \ internals of the ARAP\n   protocol.\n"
- title: B.6. Connect-Info
  contents:
  - "B.6. Connect-Info\n   [RFC2869], Section 5.11 defines the Connect-Info Attribute,\
    \ which is\n   used to indicate the nature of the connection.\n    0         \
    \          1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type\
    \      |    Length     |     Text...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Even though the type is Text, the rest of the description indicates\n   that\
    \ it is a complex attribute:\n      The Text field consists of UTF-8 encoded 10646\
    \ [8] characters.\n      The connection speed SHOULD be included at the beginning\
    \ of the\n      first Connect-Info attribute in the packet.  If the transmit and\n\
    \      receive connection speeds differ, they may both be included in the\n  \
    \    first attribute with the transmit speed first (the speed the NAS\n      modem\
    \ transmits at), a slash (/), the receive speed, then\n      optionally other\
    \ information.\n      For example, \"28800 V42BIS/LAPM\" or \"52000/31200 V90\"\
    \n      More than one Connect-Info attribute may be present in an\n      Accounting-Request\
    \ packet to accommodate expected efforts by ITU\n      to have modems report more\
    \ connection information in a standard\n      format that might exceed 252 octets.\n\
    \   This attribute contains no encrypted component and is not directly\n   involved\
    \ in authentication.  The individual sub-fields could\n   therefore have been\
    \ encapsulated in separate attributes.\n   However, since the definition refers\
    \ to potential standardization\n   activity within ITU, the Connect-Info Attribute\
    \ can also be thought\n   of as opaque data whose definition is provided elsewhere.\
    \  The\n   Connect-Info Attribute could therefore qualify for an exception as\n\
    \   described in Section 3.2.4.\n"
- title: B.7. Framed-IPv6-Prefix
  contents:
  - "B.7. Framed-IPv6-Prefix\n   Section 2.3 of [RFC3162] defines the Framed-IPv6-Prefix\
    \ Attribute,\n   and Section 3 of [RFC4818] reuses this format for the Delegated-\n\
    \   IPv6-Prefix Attribute; these attributes are sent from the RADIUS\n   server\
    \ to the client in an Access-Accept.\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |  Reserved     | Prefix-Length |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                Prefix\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                Prefix\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                Prefix\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                Prefix                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The sub-fields encoded in these attributes are strongly related, and\n   there\
    \ was no previous definition of this data structure that could be\n   referenced.\
    \  Support for this attribute requires code changes on both\n   the client and\
    \ server, due to a new data type being defined.  In this\n   case, it appears\
    \ to be acceptable to encode them in one attribute.\n"
- title: B.8. Egress-VLANID
  contents:
  - "B.8. Egress-VLANID\n   [RFC4675], Section 2.1 defines the Egress-VLANID Attribute,\
    \ which can\n   be sent by a RADIUS client or server.\n    0                 \
    \  1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |            Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Value (cont)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   While it appears superficially to be of type Integer, the Value field\n  \
    \ is actually a packed structure, as follows:\n    0                   1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Tag Indic.   |        Pad            |       VLANID          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The length of the VLANID field is defined by the [IEEE-802.1Q]\n   specification.\
    \  The Tag Indicator field is either 0x31 or 0x32, for\n   compatibility with\
    \ the Egress-VLAN-Name, as discussed below.  The\n   complex structure of Egress-VLANID\
    \ overlaps with that of the base\n   Integer data type, meaning that no code changes\
    \ are required for a\n   RADIUS server to support this attribute.  Code changes\
    \ are required\n   on the NAS, if only to implement the VLAN ID enforcement.\n\
    \   Given the IEEE VLAN requirements and the limited data model of\n   RADIUS,\
    \ the chosen method is likely the best of the possible\n   alternatives.\n"
- title: B.9. Egress-VLAN-Name
  contents:
  - "B.9. Egress-VLAN-Name\n   [RFC4675], Section 2.3 defines the Egress-VLAN-Name\
    \ Attribute, which\n   can be sent by a RADIUS client or server.\n    0      \
    \             1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |   Tag Indic.  |   String...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Tag Indicator is either the character '1' or '2', which in ASCII\n   map\
    \ to the identical values for Tag Indicator in Egress-VLANID above.\n   The complex\
    \ structure of this attribute is acceptable for reasons\n   identical to those\
    \ given for Egress-VLANID.\n"
- title: B.10. Digest-*
  contents:
  - "B.10. Digest-*\n   [RFC5090] attempts to standardize the functionality provided\
    \ by an\n   expired Internet-Draft [AAA-SIP], which improperly uses two\n   attributes\
    \ from the standard space without having been assigned them\n   by IANA.  This\
    \ self-allocation is forbidden, as described in Section\n   2.  In addition, the\
    \ document uses nested attributes, which are\n   discouraged in Section 2.1. \
    \ The updated document uses basic data\n   types and allocates nearly 20 attributes\
    \ in the process.\n   However, the document has seen wide-spread implementation,\
    \ but\n   [RFC5090] has not.  One explanation may be that implementors\n   disagreed\
    \ with the trade-offs made in the updated specification.  It\n   may have been\
    \ better to simply document the existing format and\n   request IANA allocation\
    \ of two attributes.  The resulting design\n   would have used nested attributes\
    \ but may have gained more wide-\n   spread implementation.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We would like to acknowledge David Nelson, Bernard Aboba,\
    \ Emile van\n   Bergen, Barney Wolff, Glen Zorn, Avi Lior, and Hannes Tschofenig\
    \ for\n   contributions to this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alan DeKok (editor)\n   The FreeRADIUS Server Project\n\
    \   http://freeradius.org/\n   EMail: aland@freeradius.org\n   Greg Weber\n  \
    \ Knoxville, TN 37932\n   USA\n   EMail: gdweber@gmail.com\n"
