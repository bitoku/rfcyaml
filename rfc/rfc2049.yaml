- contents:
  - "                 Multipurpose Internet Mail Extensions\n                           (MIME)
    Part Five:\n                   Conformance Criteria and Examples\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   STD 11, RFC 822, defines a message representation protocol specifying\n
    \  considerable detail about US-ASCII message headers, and leaves the\n   message
    content, or message body, as flat US-ASCII text.  This set of\n   documents, collectively
    called the Multipurpose Internet Mail\n   Extensions, or MIME, redefines the format
    of messages to allow for\n    (1)   textual message bodies in character sets other
    than\n          US-ASCII,\n    (2)   an extensible set of different formats for
    non-textual\n          message bodies,\n    (3)   multi-part message bodies, and\n
    \   (4)   textual header information in character sets other than\n          US-ASCII.\n
    \  These documents are based on earlier work documented in RFC 934, STD\n   11,
    and RFC 1049, but extends and revises them.  Because RFC 822 said\n   so little
    about message bodies, these documents are largely\n   orthogonal to (rather than
    a revision of) RFC 822.\n   The initial document in this set, RFC 2045, specifies
    the various\n   headers used to describe the structure of MIME messages. The second\n
    \  document defines the general structure of the MIME media typing\n   system
    and defines an initial set of media types.  The third\n   document, RFC 2047,
    describes extensions to RFC 822 to allow non-US-\n   ASCII text data in Internet
    mail header fields. The fourth document,\n   RFC 2048, specifies various IANA
    registration procedures for MIME-\n   related facilities. This fifth and final
    document describes MIME\n   conformance criteria as well as providing some illustrative
    examples\n   of MIME message formats, acknowledgements, and the bibliography.\n
    \  These documents are revisions of RFCs 1521, 1522, and 1590, which\n   themselves
    were revisions of RFCs 1341 and 1342.  Appendix B of this\n   document describes
    differences and changes from previous versions.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ..........................................
    \   2\n   2. MIME Conformance ......................................    2\n   3.
    Guidelines for Sending Email Data .....................    6\n   4. Canonical
    Encoding Model ..............................    9\n   5. Summary ...............................................
    \  12\n   6. Security Considerations ...............................   12\n   7.
    Authors' Addresses ....................................   12\n   8. Acknowledgements
    ......................................   13\n   A. A Complex Multipart Example
    ...........................   15\n   B. Changes from RFC 1521, 1522, and 1590
    .................   16\n   C. References ............................................
    \  20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The first and second documents in this set define MIME header
    fields\n   and the initial set of MIME media types.  The third document\n   describes
    extensions to RFC822 formats to allow for character sets\n   other than US-ASCII.
    \ This document describes what portions  of MIME\n   must be supported by a conformant
    MIME implementation. It also\n   describes various pitfalls of contemporary messaging
    systems as well\n   as the canonical encoding model MIME is based on.\n"
  title: 1.  Introduction
- contents:
  - "2.  MIME Conformance\n   The mechanisms described in these documents are open-ended.
    \ It is\n   definitely not expected that all implementations will support all\n
    \  available media types, nor that they will all share the same\n   extensions.
    \ In order to promote interoperability, however, it is\n   useful to define the
    concept of \"MIME-conformance\" to define a\n   certain level of implementation
    that allows the useful interworking\n   of messages with content that differs
    from US-ASCII text.  In this\n   section, we specify the requirements for such
    conformance.\n   A mail user agent that is MIME-conformant MUST:\n    (1)   Always
    generate a \"MIME-Version: 1.0\" header field in\n          any message it creates.\n
    \   (2)   Recognize the Content-Transfer-Encoding header field\n          and
    decode all received data encoded by either quoted-\n          printable or base64
    implementations.  The identity\n          transformations 7bit, 8bit, and binary
    must also be\n          recognized.\n          Any non-7bit data that is sent
    without encoding must be\n          properly labelled with a content-transfer-encoding
    of\n          8bit or binary, as appropriate.  If the underlying\n          transport
    does not support 8bit or binary (as SMTP\n          [RFC-821] does not), the sender
    is required to both\n          encode and label data using an appropriate Content-\n
    \         Transfer-Encoding such as quoted-printable or base64.\n    (3)   Must
    treat any unrecognized Content-Transfer-Encoding\n          as if it had a Content-Type
    of \"application/octet-\n          stream\", regardless of whether or not the
    actual\n          Content-Type is recognized.\n    (4)   Recognize and interpret
    the Content-Type header field,\n          and avoid showing users raw data with
    a Content-Type\n          field other than text.  Implementations  must be able\n
    \         to send at least text/plain messages, with the\n          character
    set specified with the charset parameter if\n          it is not US-ASCII.\n    (5)
    \  Ignore any content type parameters whose names they do\n          not recognize.\n
    \   (6)   Explicitly handle the following media type values, to\n          at
    least the following extents:\n          Text:\n            -- Recognize and display
    \"text\" mail with the\n            character set \"US-ASCII.\"\n            --
    Recognize other character sets at least to the\n            extent of being able
    to inform the user about what\n            character set the message uses.\n            --
    Recognize the \"ISO-8859-*\" character sets to the\n            extent of being
    able to display those characters that\n            are common to ISO-8859-* and
    US-ASCII, namely all\n            characters represented by octet values 1-127.\n
    \           -- For unrecognized subtypes in a known character\n            set,
    show or offer to show the user the \"raw\" version\n            of the data after
    conversion of the content from\n            canonical form to local form.\n            --
    Treat material in an unknown character set as if\n            it were \"application/octet-stream\".\n
    \         Image, audio, and video:\n            -- At a minumum provide facilities
    to treat any\n            unrecognized subtypes as if they were\n            \"application/octet-stream\".\n
    \         Application:\n            -- Offer the ability to remove either of the
    quoted-\n            printable or base64 encodings defined in this\n            document
    if they were used and put the resulting\n            information in a user file.\n
    \         Multipart:\n            -- Recognize the mixed subtype.  Display all
    relevant\n            information on the message level and the body part\n            header
    level and then display or offer to display\n            each of the body parts
    individually.\n            -- Recognize the \"alternative\" subtype, and avoid\n
    \           showing the user redundant parts of\n            multipart/alternative
    mail.\n            -- Recognize the \"multipart/digest\" subtype,\n            specifically
    using \"message/rfc822\" rather than\n            \"text/plain\" as the default
    media type for body parts\n            inside \"multipart/digest\" entities.\n
    \           -- Treat any unrecognized subtypes as if they were\n            \"mixed\".\n
    \         Message:\n            -- Recognize and display at least the RFC822 message\n
    \           encapsulation (message/rfc822) in such a way as to\n            preserve
    any recursive structure, that is, displaying\n            or offering to display
    the encapsulated data in\n            accordance with its media type.\n            --
    Treat any unrecognized subtypes as if they were\n            \"application/octet-stream\".\n
    \   (7)   Upon encountering any unrecognized Content-Type field,\n          an
    implementation must treat it as if it had a media\n          type of \"application/octet-stream\"
    with no parameter\n          sub-arguments.  How such data are handled is up to
    an\n          implementation, but likely options for handling such\n          unrecognized
    data include offering the user to write it\n          into a file (decoded from
    its mail transport format) or\n          offering the user to name a program to
    which the\n          decoded data should be passed as input.\n    (8)   Conformant
    user agents are required, if they provide\n          non-standard support for
    non-MIME messages employing\n          character sets other than US-ASCII, to
    do so on\n          received messages only. Conforming user agents must not\n
    \         send non-MIME messages containing anything other than\n          US-ASCII
    text.\n          In particular, the use of non-US-ASCII text in mail\n          messages
    without a MIME-Version field is strongly\n          discouraged as it impedes
    interoperability when sending\n          messages between regions with different
    localization\n          conventions. Conforming user agents MUST include proper\n
    \         MIME labelling when sending anything other than plain\n          text
    in the US-ASCII character set.\n          In addition, non-MIME user agents should
    be upgraded if\n          at all possible to include appropriate MIME header\n
    \         information in the messages they send even if nothing\n          else
    in MIME is supported.  This upgrade will have\n          little, if any, effect
    on non-MIME recipients and will\n          aid MIME in correctly displaying such
    messages.  It\n          also provides a smooth transition path to eventual\n
    \         adoption of other MIME capabilities.\n    (9)   Conforming user agents
    must ensure that any string of\n          non-white-space printable US-ASCII characters
    within a\n          \"*text\" or \"*ctext\" that begins with \"=?\" and ends with\n
    \         \"?=\" be a valid encoded-word.  (\"begins\" means: At the\n          start
    of the field-body or immediately following\n          linear-white-space; \"ends\"
    means: At the end of the\n          field-body or immediately preceding linear-white-\n
    \         space.) In addition, any \"word\" within a \"phrase\" that\n          begins
    with \"=?\" and ends with \"?=\" must be a valid\n          encoded-word.\n    (10)
    \ Conforming user agents must be able to distinguish\n          encoded-words
    from \"text\", \"ctext\", or \"word\"s,\n          according to the rules in section
    4, anytime they\n          appear in appropriate places in message headers.  It\n
    \         must support both the \"B\" and \"Q\" encodings for any\n          character
    set which it supports.  The program must be\n          able to display the unencoded
    text if the character set\n          is \"US-ASCII\".  For the ISO-8859-* character
    sets, the\n          mail reading program must at least be able to display\n          the
    characters which are also in the US-ASCII set.\n   A user agent that meets the
    above conditions is said to be MIME-\n   conformant.  The meaning of this phrase
    is that it is assumed to be\n   \"safe\" to send virtually any kind of properly-marked
    data to users of\n   such mail systems, because such systems will at least be
    able to\n   treat the data as undifferentiated binary, and will not simply splash\n
    \  it onto the screen of unsuspecting users.\n   There is another sense in which
    it is always \"safe\" to send data in a\n   format that is MIME-conformant, which
    is that such data will not\n   break or be broken by any known systems that are
    conformant with RFC\n   821 and RFC 822.  User agents that are MIME-conformant
    have the\n   additional guarantee that the user will not be shown data that were\n
    \  never intended to be viewed as text.\n"
  title: 2.  MIME Conformance
- contents:
  - "3.  Guidelines for Sending Email Data\n   Internet email is not a perfect, homogeneous
    system.  Mail may become\n   corrupted at several stages in its travel to a final
    destination.\n   Specifically, email sent throughout the Internet may travel across\n
    \  many networking technologies. Many networking and mail technologies\n   do
    not support the full functionality possible in the SMTP transport\n   environment.
    \ Mail traversing these systems is likely to be modified\n   in order that it
    can be transported.\n   There exist many widely-deployed non-conformant MTAs in
    the Internet.\n   These MTAs, speaking the SMTP protocol, alter messages on the
    fly to\n   take advantage of the internal data structure of the hosts they are\n
    \  implemented on, or are just plain broken.\n   The following guidelines may
    be useful to anyone devising a data\n   format (media type) that is supposed to
    survive the widest range of\n   networking technologies and known broken MTAs
    unscathed.  Note that\n   anything encoded in the base64 encoding will satisfy
    these rules, but\n   that some well-known mechanisms, notably the UNIX uuencode
    facility,\n   will not.  Note also that anything encoded in the Quoted-Printable\n
    \  encoding will survive most gateways intact, but possibly not some\n   gateways
    to systems that use the EBCDIC character set.\n    (1)   Under some circumstances
    the encoding used for data may\n          change as part of normal gateway or
    user agent\n          operation.  In particular, conversion from base64 to\n          quoted-printable
    and vice versa may be necessary.  This\n          may result in the confusion
    of CRLF sequences with line\n          breaks in text bodies.  As such, the persistence
    of\n          CRLF as something other than a line break must not be\n          relied
    on.\n    (2)   Many systems may elect to represent and store text data\n          using
    local newline conventions.  Local newline\n          conventions may not match
    the RFC822 CRLF convention --\n          systems are known that use plain CR,
    plain LF, CRLF, or\n          counted records.  The result is that isolated CR
    and LF\n          characters are not well tolerated in general; they may\n          be
    lost or converted to delimiters on some systems, and\n          hence must not
    be relied on.\n    (3)   The transmission of NULs (US-ASCII value 0) is\n          problematic
    in Internet mail.  (This is largely the\n          result of NULs being used as
    a termination character by\n          many of the standard runtime library routines
    in the C\n          programming language.) The practice of using NULs as\n          termination
    characters is so entrenched now that\n          messages should not rely on them
    being preserved.\n    (4)   TAB (HT) characters may be misinterpreted or may be\n
    \         automatically converted to variable numbers of spaces.\n          This
    is unavoidable in some environments, notably those\n          not based on the
    US-ASCII character set.  Such\n          conversion is STRONGLY DISCOURAGED, but
    it may occur,\n          and mail formats must not rely on the persistence of\n
    \         TAB (HT) characters.\n    (5)   Lines longer than 76 characters may
    be wrapped or\n          truncated in some environments.  Line wrapping or line\n
    \         truncation imposed by mail transports is STRONGLY\n          DISCOURAGED,
    but unavoidable in some cases.\n          Applications which require long lines
    must somehow\n          differentiate between soft and hard line breaks.  (A\n
    \         simple way to do this is to use the quoted-printable\n          encoding.)\n
    \   (6)   Trailing \"white space\" characters (SPACE, TAB (HT)) on\n          a
    line may be discarded by some transport agents, while\n          other transport
    agents may pad lines with these\n          characters so that all lines in a mail
    file are of\n          equal length.  The persistence of trailing white space,\n
    \         therefore, must not be relied on.\n    (7)   Many mail domains use variations
    on the US-ASCII\n          character set, or use character sets such as EBCDIC\n
    \         which contain most but not all of the US-ASCII\n          characters.
    \ The correct translation of characters not\n          in the \"invariant\" set
    cannot be depended on across\n          character converting gateways.  For example,
    this\n          situation is a problem when sending uuencoded\n          information
    across BITNET, an EBCDIC system.  Similar\n          problems can occur without
    crossing a gateway, since\n          many Internet hosts use character sets other
    than US-\n          ASCII internally.  The definition of Printable Strings\n          in
    X.400 adds further restrictions in certain special\n          cases.  In particular,
    the only characters that are\n          known to be consistent across all gateways
    are the 73\n          characters that correspond to the upper and lower case\n
    \         letters A-Z and a-z, the 10 digits 0-9, and the\n          following
    eleven special characters:\n            \"'\"  (US-ASCII decimal value 39)\n            \"(\"
    \ (US-ASCII decimal value 40)\n            \")\"  (US-ASCII decimal value 41)\n
    \           \"+\"  (US-ASCII decimal value 43)\n            \",\"  (US-ASCII decimal
    value 44)\n            \"-\"  (US-ASCII decimal value 45)\n            \".\"  (US-ASCII
    decimal value 46)\n            \"/\"  (US-ASCII decimal value 47)\n            \":\"
    \ (US-ASCII decimal value 58)\n            \"=\"  (US-ASCII decimal value 61)\n
    \           \"?\"  (US-ASCII decimal value 63)\n          A maximally portable
    mail representation will confine\n          itself to relatively short lines of
    text in which the\n          only meaningful characters are taken from this set
    of\n          73 characters.  The base64 encoding follows this rule.\n    (8)
    \  Some mail transport agents will corrupt data that\n          includes certain
    literal strings.  In particular, a\n          period (\".\") alone on a line is
    known to be corrupted\n          by some (incorrect) SMTP implementations, and
    a line\n          that starts with the five characters \"From \" (the fifth\n
    \         character is a SPACE) are commonly corrupted as well.\n          A careful
    composition agent can prevent these\n          corruptions by encoding the data
    (e.g., in the quoted-\n          printable encoding using \"=46rom \" in place
    of \"From \"\n          at the start of a line, and \"=2E\" in place of \".\"
    alone\n          on a line).\n   Please note that the above list is NOT a list
    of recommended\n   practices for MTAs.  RFC 821 MTAs are prohibited from altering
    the\n   character of white space or wrapping long lines.  These BAD and\n   invalid
    practices are known to occur on established networks, and\n   implementations
    should be robust in dealing with the bad effects they\n   can cause.\n"
  title: 3.  Guidelines for Sending Email Data
- contents:
  - "4.  Canonical Encoding Model\n   There was some confusion, in earlier versions
    of these documents,\n   regarding the model for when email data was to be converted
    to\n   canonical form and encoded, and in particular how this process would\n
    \  affect the treatment of CRLFs, given that the representation of\n   newlines
    varies greatly from system to system.  For this reason, a\n   canonical model
    for encoding is presented below.\n   The process of composing a MIME entity can
    be modeled as being done\n   in a number of steps.  Note that these steps are
    roughly similar to\n   those steps used in PEM [RFC-1421] and are performed for
    each\n   \"innermost level\" body:\n    (1)   Creation of local form.\n          The
    body to be transmitted is created in the system's\n          native format.  The
    native character set is used and,\n          where appropriate, local end of line
    conventions are\n          used as well.  The body may be a UNIX-style text file,\n
    \         or a Sun raster image, or a VMS indexed file, or audio\n          data
    in a system-dependent format stored only in\n          memory, or anything else
    that corresponds to the local\n          model for the representation of some
    form of\n          information.  Fundamentally, the data is created in the\n          \"native\"
    form that corresponds to the type specified by\n          the media type.\n    (2)
    \  Conversion to canonical form.\n          The entire body, including \"out-of-band\"
    information\n          such as record lengths and possibly file attribute\n          information,
    is converted to a universal canonical\n          form.  The specific media type
    of the body as well as\n          its associated attributes dictate the nature
    of the\n          canonical form that is used.  Conversion to the proper\n          canonical
    form may involve character set conversion,\n          transformation of audio
    data, compression, or various\n          other operations specific to the various
    media types.\n          If character set conversion is involved, however, care\n
    \         must be taken to understand the semantics of the media\n          type,
    which may have strong implications for any\n          character set conversion,
    e.g. with regard to\n          syntactically meaningful characters in a text subtype\n
    \         other than \"plain\".\n          For example, in the case of text/plain
    data, the text\n          must be converted to a supported character set and\n
    \         lines must be delimited with CRLF delimiters in\n          accordance
    with RFC 822.  Note that the restriction on\n          line lengths implied by
    RFC 822 is eliminated if the\n          next step employs either quoted-printable
    or base64\n          encoding.\n    (3)   Apply transfer encoding.\n          A
    Content-Transfer-Encoding appropriate for this body\n          is applied.  Note
    that there is no fixed relationship\n          between the media type and the
    transfer encoding.  In\n          particular, it may be appropriate to base the
    choice of\n          base64 or quoted-printable on character frequency\n          counts
    which are specific to a given instance of a\n          body.\n    (4)   Insertion
    into entity.\n          The encoded body is inserted into a MIME entity with\n
    \         appropriate headers. The entity is then inserted into\n          the
    body of a higher-level entity (message or\n          multipart) as needed.\n   Conversion
    from entity form to local form is accomplished by\n   reversing these steps. Note
    that reversal of these steps may produce\n   differing results since there is
    no guarantee that the original and\n   final local forms are the same.\n   It
    is vital to note that these steps are only a model; they are\n   specifically
    NOT a blueprint for how an actual system would be built.\n   In particular, the
    model fails to account for two common designs:\n    (1)   In many cases the conversion
    to a canonical form prior\n          to encoding will be subsumed into the encoder
    itself,\n          which understands local formats directly.  For example,\n          the
    local newline convention for text bodies might be\n          carried through to
    the encoder itself along with\n          knowledge of what that format is.\n    (2)
    \  The output of the encoders may have to pass through one\n          or more
    additional steps prior to being transmitted as\n          a message.  As such,
    the output of the encoder may not\n          be conformant with the formats specified
    by RFC 822.\n          In particular, once again it may be appropriate for the\n
    \         converter's output to be expressed using local newline\n          conventions
    rather than using the standard RFC 822 CRLF\n          delimiters.\n   Other implementation
    variations are conceivable as well.  The vital\n   aspect of this discussion is
    that, in spite of any optimizations,\n   collapsings of required steps, or insertion
    of additional processing,\n   the resulting messages must be consistent with those
    produced by the\n   model described here.  For example, a message with the following\n
    \  header fields:\n     Content-type: text/foo; charset=bar\n     Content-Transfer-Encoding:
    base64\n   must be first represented in the text/foo form, then (if necessary)\n
    \  represented in the \"bar\" character set, and finally transformed via\n   the
    base64 algorithm into a mail-safe form.\n   NOTE: Some confusion has been caused
    by systems that represent\n   messages in a format which uses local newline conventions
    which\n   differ from the RFC822 CRLF convention.  It is important to note that\n
    \  these formats are not canonical RFC822/MIME.  These formats are\n   instead
    *encodings* of RFC822, where CRLF sequences in the canonical\n   representation
    of the message are encoded as the local newline\n   convention.  Note that formats
    which encode CRLF sequences as, for\n   example, LF are not capable of representing
    MIME messages containing\n   binary data which contains LF octets not part of
    CRLF line separation\n   sequences.\n"
  title: 4.  Canonical Encoding Model
- contents:
  - "5.  Summary\n   This document defines what is meant by MIME Conformance. It also\n
    \  details various problems known to exist in the Internet email system\n   and
    how to use MIME to overcome them. Finally, it describes MIME's\n   canonical encoding
    model.\n"
  title: 5.  Summary
- contents:
  - "6.  Security Considerations\n   Security issues are discussed in the second document
    in this set, RFC\n   2046.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Authors' Addresses\n   For more information, the authors of this document
    are best contacted\n   via Internet mail:\n   Ned Freed\n   Innosoft International,
    Inc.\n   1050 East Garvey Avenue South\n   West Covina, CA 91790\n   USA\n   Phone:
    +1 818 919 3600\n   Fax:   +1 818 919 3614\n   EMail: ned@innosoft.com\n   Nathaniel
    S. Borenstein\n   First Virtual Holdings\n   25 Washington Avenue\n   Morristown,
    NJ 07960\n   USA\n   Phone: +1 201 540 8967\n   Fax:   +1 201 993 3032\n   EMail:
    nsb@nsb.fv.com\n   MIME is a result of the work of the Internet Engineering Task
    Force\n   Working Group on RFC 822 Extensions.  The chairman of that group,\n
    \  Greg Vaudreuil, may be reached at:\n   Gregory M. Vaudreuil\n   Octel Network
    Services\n   17080 Dallas Parkway\n   Dallas, TX 75248-1905\n   USA\n   EMail:
    Greg.Vaudreuil@Octel.Com\n"
  title: 7.  Authors' Addresses
- contents:
  - "8.  Acknowledgements\n   This document is the result of the collective effort
    of a large\n   number of people, at several IETF meetings, on the IETF-SMTP and\n
    \  IETF-822 mailing lists, and elsewhere.  Although any enumeration\n   seems
    doomed to suffer from egregious omissions, the following are\n   among the many
    contributors to this effort:\n     Harald Tveit Alvestrand       Marc Andreessen\n
    \    Randall Atkinson              Bob Braden\n     Philippe Brandon              Brian
    Capouch\n     Kevin Carosso                 Uhhyung Choi\n     Peter Clitherow
    \              Dave Collier-Brown\n     Cristian Constantinof         John Coonrod\n
    \    Mark Crispin                  Dave Crocker\n     Stephen Crocker               Terry
    Crowley\n     Walt Daniels                  Jim Davis\n     Frank Dawson                  Axel
    Deininger\n     Hitoshi Doi                   Kevin Donnelly\n     Steve Dorner
    \                 Keith Edwards\n     Chris Eich                    Dana S. Emery\n
    \    Johnny Eriksson               Craig Everhart\n     Patrik Faltstrom              Erik
    E. Fair\n     Roger Fajman                  Alain Fontaine\n     Martin Forssen
    \               James M. Galvin\n     Stephen Gildea                Philip Gladstone\n
    \    Thomas Gordon                 Keld Simonsen\n     Terry Gray                    Phill
    Gross\n     James Hamilton                David Herron\n     Mark Horton                   Bruce
    Howard\n     Bill Janssen                  Olle Jarnefors\n     Risto Kankkunen
    \              Phil Karn\n     Alan Katz                     Tim Kehres\n     Neil
    Katin                    Steve Kille\n     Kyuho Kim                     Anders
    Klemets\n     John Klensin                  Valdis Kletniek\n     Jim Knowles
    \                  Stev Knowles\n     Bob Kummerfeld                Pekka Kytolaakso\n
    \    Stellan Lagerstrom            Vincent Lau\n     Timo Lehtinen                 Donald
    Lindsay\n     Warner Losh                   Carlyn Lowery\n     Laurence Lundblade
    \           Charles Lynn\n     John R. MacMillan             Larry Masinter\n
    \    Rick McGowan                  Michael J. McInerny\n     Leo Mclaughlin                Goli
    Montaser-Kohsari\n     Tom Moore                     John Gardiner Myers\n     Erik
    Naggum                   Mark Needleman\n     Chris Newman                  John
    Noerenberg\n     Mats Ohrman                   Julian Onions\n     Michael Patton
    \               David J. Pepper\n     Erik van der Poel             Blake C. Ramsdell\n
    \    Christer Romson               Luc Rooijakkers\n     Marshall T. Rose              Jonathan
    Rosenberg\n     Guido van Rossum              Jan Rynning\n     Harri Salminen
    \               Michael Sanderson\n     Yutaka Sato                   Markku Savela\n
    \    Richard Alan Schafer          Masahiro Sekiguchi\n     Mark Sherman                  Bob
    Smart\n     Peter Speck                   Henry Spencer\n     Einar Stefferud
    \              Michael Stein\n     Klaus Steinberger             Peter Svanberg\n
    \    James Thompson                Steve Uhler\n     Stuart Vance                  Peter
    Vanderbilt\n     Greg Vaudreuil                Ed Vielmetti\n     Larry W. Virden
    \              Ryan Waldron\n     Rhys Weatherly                Jay Weber\n     Dave
    Wecker                   Wally Wedel\n     Sven-Ove Westberg             Brian
    Wideen\n     John Wobus                    Glenn Wright\n     Rayan Zachariassen
    \           David Zimmerman\n   The authors apologize for any omissions from this
    list, which are\n   certainly unintentional.\n"
  title: 8.  Acknowledgements
- contents:
  - "Appendix A -- A Complex Multipart Example\n   What follows is the outline of
    a complex multipart message.  This\n   message contains five parts that are to
    be displayed serially:  two\n   introductory plain text objects, an embedded multipart
    message, a\n   text/enriched object, and a closing encapsulated text message in
    a\n   non-ASCII character set.  The embedded multipart message itself\n   contains
    two objects to be displayed in parallel, a picture and an\n   audio fragment.\n
    \    MIME-Version: 1.0\n     From: Nathaniel Borenstein <nsb@nsb.fv.com>\n     To:
    Ned Freed <ned@innosoft.com>\n     Date: Fri, 07 Oct 1994 16:15:05 -0700 (PDT)\n
    \    Subject: A multipart example\n     Content-Type: multipart/mixed;\n                   boundary=unique-boundary-1\n
    \    This is the preamble area of a multipart message.\n     Mail readers that
    understand multipart format\n     should ignore this preamble.\n     If you are
    reading this text, you might want to\n     consider changing to a mail reader
    that understands\n     how to properly display multipart messages.\n     --unique-boundary-1\n
    \      ... Some text appears here ...\n     [Note that the blank between the boundary
    and the start\n      of the text in this part means no header fields were\n      given
    and this is text in the US-ASCII character set.\n      It could have been done
    with explicit typing as in the\n      next part.]\n     --unique-boundary-1\n
    \    Content-type: text/plain; charset=US-ASCII\n     This could have been part
    of the previous part, but\n     illustrates explicit versus implicit typing of
    body\n     parts.\n     --unique-boundary-1\n     Content-Type: multipart/parallel;
    boundary=unique-boundary-2\n     --unique-boundary-2\n     Content-Type: audio/basic\n
    \    Content-Transfer-Encoding: base64\n       ... base64-encoded 8000 Hz single-channel\n
    \          mu-law-format audio data goes here ...\n     --unique-boundary-2\n
    \    Content-Type: image/jpeg\n     Content-Transfer-Encoding: base64\n       ...
    base64-encoded image data goes here ...\n     --unique-boundary-2--\n     --unique-boundary-1\n
    \    Content-type: text/enriched\n     This is <bold><italic>enriched.</italic></bold>\n
    \    <smaller>as defined in RFC 1896</smaller>\n     Isn't it\n     <bigger><bigger>cool?</bigger></bigger>\n
    \    --unique-boundary-1\n     Content-Type: message/rfc822\n     From: (mailbox
    in US-ASCII)\n     To: (address in US-ASCII)\n     Subject: (subject in US-ASCII)\n
    \    Content-Type: Text/plain; charset=ISO-8859-1\n     Content-Transfer-Encoding:
    Quoted-printable\n       ... Additional text in ISO-8859-1 goes here ...\n     --unique-boundary-1--\n"
  title: Appendix A -- A Complex Multipart Example
- contents:
  - "Appendix B -- Changes from RFC 1521, 1522, and 1590\n   These documents are a
    revision of RFC 1521, 1522, and 1590.  For the\n   convenience of those familiar
    with the earlier documents, the changes\n   from those documents are summarized
    in this appendix.  For further\n   history, note that Appendix H in RFC 1521 specified
    how that document\n   differed from its predecessor, RFC 1341.\n    (1)   This
    document has been completely reformatted and split\n          into multiple documents.
    \ This was done to improve the\n          quality of the plain text version of
    this document,\n          which is required to be the reference copy.\n    (2)
    \  BNF describing the overall structure of MIME object\n          headers has
    been added. This is a documentation change\n          only -- the underlying syntax
    has not changed in any\n          way.\n    (3)   The specific BNF for the seven
    media types in MIME has\n          been removed.  This BNF was incorrect, incomplete,
    amd\n          inconsistent with the type-indendependent BNF.  And\n          since
    the type-independent BNF already fully specifies\n          the syntax of the
    various MIME headers, the type-\n          specific BNF was, in the final analysis,
    completely\n          unnecessary and caused more problems than it solved.\n    (4)
    \  The more specific \"US-ASCII\" character set name has\n          replaced the
    use of the informal term ASCII in many\n          parts of these documents.\n
    \   (5)   The informal concept of a primary subtype has been\n          removed.\n
    \   (6)   The term \"object\" was being used inconsistently.  The\n          definition
    of this term has been clarified, along with\n          the related terms \"body\",
    \"body part\", and \"entity\",\n          and usage has been corrected where appropriate.\n
    \   (7)   The BNF for the multipart media type has been\n          rearranged
    to make it clear that the CRLF preceeding\n          the boundary marker is actually
    part of the marker\n          itself rather than the preceeding body part.\n    (8)
    \  The prose and BNF describing the multipart media type\n          have been
    changed to make it clear that the body parts\n          within a multipart object
    MUST NOT contain any lines\n          beginning with the boundary parameter string.\n
    \   (9)   In the rules on reassembling \"message/partial\" MIME\n          entities,
    \"Subject\" is added to the list of headers to\n          take from the inner
    message, and the example is\n          modified to clarify this point.\n    (10)
    \ \"Message/partial\" fragmenters are restricted to\n          splitting MIME
    objects only at line boundaries.\n    (11)  In the discussion of the application/postscript
    type,\n          an additional paragraph has been added warning about\n          possible
    interoperability problems caused by embedding\n          of binary data inside
    a PostScript MIME entity.\n    (12)  Added a clarifying note to the basic syntax
    rules for\n          the Content-Type header field to make it clear that the\n
    \         following two forms:\n            Content-type: text/plain; charset=us-ascii
    (comment)\n            Content-type: text/plain; charset=\"us-ascii\"\n          are
    completely equivalent.\n    (13)  The following sentence has been removed from
    the\n          discussion of the MIME-Version header: \"However,\n          conformant
    software is encouraged to check the version\n          number and at least warn
    the user if an unrecognized\n          MIME-version is encountered.\"\n    (14)
    \ A typo was fixed that said \"application/external-body\"\n          instead
    of \"message/external-body\".\n    (15)  The definition of a character set has
    been reorganized\n          to make the requirements clearer.\n    (16)  The definition
    of the \"image/gif\" media type has been\n          moved to a separate document.
    This change was made\n          because of potential conflicts with IETF rules\n
    \         governing the standardization of patented technology.\n    (17)  The
    definitions of \"7bit\" and \"8bit\" have been\n          tightened so that use
    of bare CR, LF can only be used\n          as end-of-line sequences.  The document
    also no longer\n          requires that NUL characters be preserved, which brings\n
    \         MIME into alignment with real-world implementations.\n    (18)  The
    definition of canonical text in MIME has been\n          tightened so that line
    breaks must be represented by a\n          CRLF sequence.  CR and LF characters
    are not allowed\n          outside of this usage.  The definition of quoted-\n
    \         printable encoding has been altered accordingly.\n    (19)  The definition
    of the quoted-printable encoding now\n          includes a number of suggestions
    for how quoted-\n          printable encoders might best handle improperly encoded\n
    \         material.\n    (20)  Prose was added to clarify the use of the \"7bit\",\n
    \         \"8bit\", and \"binary\" transfer-encodings on multipart or\n          message
    entities encapsulating \"8bit\" or \"binary\" data.\n    (21)  In the section
    on MIME Conformance, \"multipart/digest\"\n          support was added to the
    list of requirements for\n          minimal MIME conformance.  Also, the requirement
    for\n          \"message/rfc822\" support were strengthened to clarify\n          the
    importance of recognizing recursive structure.\n    (22)  The various restrictions
    on subtypes of \"message\" are\n          now specified entirely on a subtype
    by subtype basis.\n    (23)  The definition of \"message/rfc822\" was changed
    to\n          indicate that at least one of the \"From\", \"Subject\", or\n          \"Date\"
    headers must be present.\n    (24)  The required handling of unrecognized subtypes
    as\n          \"application/octet-stream\" has been made more explicit\n          in
    both the type definitions sections and the\n          conformance guidelines.\n
    \   (25)  Examples using text/richtext were changed to\n          text/enriched.\n
    \   (26)  The BNF definition of subtype has been changed to make\n          it
    clear that either an IANA registered subtype or a\n          nonstandard \"X-\"
    subtype must be used in a Content-Type\n          header field.\n    (27)  MIME
    media types that are simply registered for use and\n          those that are standardized
    by the IETF are now\n          distinguished in the MIME BNF.\n    (28)  All of
    the various MIME registration procedures have\n          been extensively revised.
    IANA registration procedures\n          for character sets have been moved to
    a separate\n          document that is no included in this set of documents.\n
    \   (29)  The use of escape and shift mechanisms in the US-ASCII\n          and
    ISO-8859-X character sets these documents define\n          have been clarified:
    Such mechanisms should never be\n          used in conjunction with these character
    sets and their\n          effect if they are used is undefined.\n    (30)  The
    definition of the AFS access-type for\n          message/external-body has been
    removed.\n    (31)  The handling of the combination of\n          multipart/alternative
    and message/external-body is now\n          specifically addressed.\n    (32)
    \ Security issues specific to message/external-body are\n          now discussed
    in some detail.\n"
  title: Appendix B -- Changes from RFC 1521, 1522, and 1590
- contents:
  - "Appendix C -- References\n   [ATK]\n        Borenstein, Nathaniel S., Multimedia
    Applications\n        Development with the Andrew Toolkit, Prentice-Hall, 1990.\n
    \  [ISO-2022]\n        International Standard -- Information Processing --\n        Character
    Code Structure and Extension Techniques,\n        ISO/IEC 2022:1994, 4th ed.\n
    \  [ISO-8859]\n        International Standard -- Information Processing -- 8-bit\n
    \       Single-Byte Coded Graphic Character Sets\n        - Part 1: Latin Alphabet
    No. 1, ISO 8859-1:1987, 1st ed.\n        - Part 2: Latin Alphabet No. 2, ISO 8859-2:1987,
    1st ed.\n        - Part 3: Latin Alphabet No. 3, ISO 8859-3:1988, 1st ed.\n        -
    Part 4: Latin Alphabet No. 4, ISO 8859-4:1988, 1st ed.\n        - Part 5: Latin/Cyrillic
    Alphabet, ISO 8859-5:1988, 1st\n        ed.\n        - Part 6: Latin/Arabic Alphabet,
    ISO 8859-6:1987, 1st ed.\n        - Part 7: Latin/Greek Alphabet, ISO 8859-7:1987,
    1st ed.\n        - Part 8: Latin/Hebrew Alphabet, ISO 8859-8:1988, 1st ed.\n        -
    Part 9: Latin Alphabet No. 5, ISO/IEC 8859-9:1989, 1st\n        ed.\n        International
    Standard -- Information Technology -- 8-bit\n        Single-Byte Coded Graphic
    Character Sets\n        - Part 10: Latin Alphabet No. 6, ISO/IEC 8859-10:1992,\n
    \       1st ed.\n   [ISO-646]\n        International Standard -- Information Technology
    -- ISO\n        7-bit Coded Character Set for Information Interchange,\n        ISO
    646:1991, 3rd ed..\n   [JPEG]\n        JPEG Draft Standard ISO 10918-1 CD.\n   [MPEG]\n
    \       Video Coding Draft Standard ISO 11172 CD, ISO\n        IEC/JTC1/SC2/WG11
    (Motion Picture Experts Group), May,\n        1991.\n   [PCM]\n        CCITT,
    Fascicle III.4 - Recommendation G.711, \"Pulse Code\n        Modulation (PCM)
    of Voice Frequencies\", Geneva, 1972.\n   [POSTSCRIPT]\n        Adobe Systems,
    Inc., PostScript Language Reference\n        Manual, Addison-Wesley, 1985.\n   [POSTSCRIPT2]\n
    \       Adobe Systems, Inc., PostScript Language Reference\n        Manual, Addison-Wesley,
    Second Ed., 1990.\n   [RFC-783]\n        Sollins, K.R., \"TFTP Protocol (revision
    2)\", RFC-783,\n        MIT, June 1981.\n   [RFC-821]\n        Postel, J.B., \"Simple
    Mail Transfer Protocol\", STD 10,\n        RFC 821, USC/Information Sciences Institute,
    August 1982.\n   [RFC-822]\n        Crocker, D., \"Standard for the Format of
    ARPA Internet\n        Text Messages\", STD 11, RFC 822, UDEL, August 1982.\n
    \  [RFC-934]\n        Rose, M. and E. Stefferud, \"Proposed Standard for Message\n
    \       Encapsulation\", RFC 934, Delaware and NMA, January 1985.\n   [RFC-959]\n
    \       Postel, J. and J. Reynolds, \"File Transfer Protocol\", STD\n        9,
    RFC 959, USC/Information Sciences Institute, October\n        1985.\n   [RFC-1049]\n
    \       Sirbu, M., \"Content-Type Header Field for Internet\n        Messages\",
    RFC 1049, CMU, March 1988.\n   [RFC-1154]\n        Robinson, D., and R. Ullmann,
    \"Encoding Header Field for\n        Internet Messages\", RFC 1154, Prime Computer,
    Inc., April\n        1990.\n   [RFC-1341]\n        Borenstein, N., and N.  Freed,
    \"MIME (Multipurpose\n        Internet Mail Extensions): Mechanisms for Specifying
    and\n        Describing the Format of Internet Message Bodies\", RFC\n        1341,
    Bellcore, Innosoft, June 1992.\n   [RFC-1342]\n        Moore, K., \"Representation
    of Non-Ascii Text in Internet\n        Message Headers\", RFC 1342, University
    of Tennessee, June\n        1992.\n   [RFC-1344]\n        Borenstein, N., \"Implications
    of MIME for Internet Mail\n        Gateways\", RFC 1344, Bellcore, June 1992.\n
    \  [RFC-1345]\n        Simonsen, K., \"Character Mnemonics & Character Sets\",
    RFC\n        1345, Rationel Almen Planlaegning, June 1992.\n   [RFC-1421]\n        Linn,
    J., \"Privacy Enhancement for Internet Electronic\n        Mail:  Part I -- Message
    Encryption and Authentication\n        Procedures\", RFC 1421, IAB IRTF PSRG,
    IETF PEM WG,\n        February 1993.\n   [RFC-1422]\n        Kent, S., \"Privacy
    Enhancement for Internet Electronic\n        Mail:  Part II -- Certificate-Based
    Key Management\", RFC\n        1422, IAB IRTF PSRG, IETF PEM WG, February 1993.\n
    \  [RFC-1423]\n        Balenson, D., \"Privacy Enhancement for Internet\n        Electronic
    Mail:  Part III -- Algorithms, Modes, and\n        Identifiers\",  IAB IRTF PSRG,
    IETF PEM WG, February 1993.\n   [RFC-1424]\n        Kaliski, B., \"Privacy Enhancement
    for Internet Electronic\n        Mail:  Part IV -- Key Certification and Related\n
    \       Services\", IAB IRTF PSRG, IETF PEM WG, February 1993.\n   [RFC-1521]\n
    \       Borenstein, N., and Freed, N., \"MIME (Multipurpose\n        Internet
    Mail Extensions): Mechanisms for Specifying and\n        Describing the Format
    of Internet Message Bodies\", RFC\n        1521, Bellcore, Innosoft, September,
    1993.\n   [RFC-1522]\n        Moore, K., \"Representation of Non-ASCII Text in
    Internet\n        Message Headers\", RFC 1522, University of Tennessee,\n        September
    1993.\n   [RFC-1524]\n        Borenstein, N., \"A User Agent Configuration Mechanism
    for\n        Multimedia Mail Format Information\", RFC 1524, Bellcore,\n        September
    1993.\n   [RFC-1543]\n        Postel, J., \"Instructions to RFC Authors\", RFC
    1543,\n        USC/Information Sciences Institute, October 1993.\n   [RFC-1556]\n
    \       Nussbacher, H., \"Handling of Bi-directional Texts in\n        MIME\",
    RFC 1556, Israeli Inter-University Computer\n        Center, December 1993.\n
    \  [RFC-1590]\n        Postel, J., \"Media Type Registration Procedure\", RFC\n
    \       1590, USC/Information Sciences Institute, March 1994.\n   [RFC-1602]\n
    \       Internet Architecture Board, Internet Engineering\n        Steering Group,
    Huitema, C., Gross, P., \"The Internet\n        Standards Process -- Revision
    2\", March 1994.\n   [RFC-1652]\n        Klensin, J., (WG Chair), Freed, N., (Editor),
    Rose, M.,\n        Stefferud, E., and Crocker, D., \"SMTP Service Extension\n
    \       for 8bit-MIME transport\", RFC 1652, United Nations\n        University,
    Innosoft, Dover Beach Consulting, Inc.,\n        Network Management Associates,
    Inc., The Branch Office,\n        March 1994.\n   [RFC-1700]\n        Reynolds,
    J. and J. Postel, \"Assigned Numbers\", STD 2,\n        RFC 1700, USC/Information
    Sciences Institute, October\n        1994.\n   [RFC-1741]\n        Faltstrom,
    P., Crocker, D., and Fair, E., \"MIME Content\n        Type for BinHex Encoded
    Files\", December 1994.\n   [RFC-1896]\n        Resnick, P., and A. Walker, \"The
    text/enriched MIME\n        Content-type\", RFC 1896, February, 1996.\n   [RFC-2045]\n
    \       Freed, N., and and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
    (MIME) Part One: Format of Internet Message\n        Bodies\", RFC 2045, Innosoft,
    First Virtual Holdings,\n        November 1996.\n   [RFC-2046]\n        Freed,
    N., and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME)
    Part Two: Media Types\", RFC 2046,\n        Innosoft, First Virtual Holdings,
    November 1996.\n   [RFC-2047]\n        Moore, K., \"Multipurpose Internet Mail
    Extensions (MIME)\n        Part Three: Representation of Non-ASCII Text in Internet\n
    \       Message Headers\", RFC 2047, University of\n        Tennessee, November
    1996.\n   [RFC-2048]\n        Freed, N., Klensin, J., and J. Postel, \"Multipurpose\n
    \       Internet Mail Extensions (MIME) Part Four: MIME\n        Registration
    Procedures\", RFC 2048, Innosoft, MCI,\n        ISI, November 1996.\n   [RFC-2049]\n
    \       Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
    (MIME) Part Five: Conformance Criteria and\n        Examples\", RFC 2049 (this
    document), Innosoft, First\n        Virtual Holdings, November 1996.\n   [US-ASCII]\n
    \       Coded Character Set -- 7-Bit American Standard Code for\n        Information
    Interchange, ANSI X3.4-1986.\n   [X400]\n        Schicker, Pietro, \"Message Handling
    Systems, X.400\",\n        Message Handling Systems and Distributed Applications,
    E.\n        Stefferud, O-j. Jacobsen, and P. Schicker, eds., North-\n        Holland,
    1989, pp. 3-41.\n"
  title: Appendix C -- References
