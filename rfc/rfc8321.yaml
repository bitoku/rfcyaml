- title: __initial_text__
  contents:
  - ' Alternate-Marking Method for Passive and Hybrid Performance Monitoring

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method to perform packet loss, delay,\
    \ and\n   jitter measurements on live traffic.  This method is based on an\n \
    \  Alternate-Marking (coloring) technique.  A report is provided in\n   order\
    \ to explain an example and show the method applicability.  This\n   technology\
    \ can be applied in various situations, as detailed in this\n   document, and\
    \ could be considered Passive or Hybrid depending on the\n   application.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8321.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   5\n   2.  Overview of the Method  . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Detailed Description of the Method  . . . . . . . . . . .\
    \ . .   6\n     3.1.  Packet Loss Measurement . . . . . . . . . . . . . . . .\
    \ .   6\n       3.1.1.  Coloring the Packets  . . . . . . . . . . . . . . . .\
    \  11\n       3.1.2.  Counting the Packets  . . . . . . . . . . . . . . . .  12\n\
    \       3.1.3.  Collecting Data and Calculating Packet Loss . . . . .  13\n  \
    \   3.2.  Timing Aspects  . . . . . . . . . . . . . . . . . . . . .  13\n    \
    \ 3.3.  One-Way Delay Measurement . . . . . . . . . . . . . . . .  15\n      \
    \ 3.3.1.  Single-Marking Methodology  . . . . . . . . . . . . .  15\n       3.3.2.\
    \  Double-Marking Methodology  . . . . . . . . . . . . .  17\n     3.4.  Delay\
    \ Variation Measurement . . . . . . . . . . . . . . .  18\n   4.  Considerations\
    \  . . . . . . . . . . . . . . . . . . . . . . .  18\n     4.1.  Synchronization\
    \ . . . . . . . . . . . . . . . . . . . . .  19\n     4.2.  Data Correlation \
    \ . . . . . . . . . . . . . . . . . . . .  19\n     4.3.  Packet Reordering .\
    \ . . . . . . . . . . . . . . . . . . .  20\n   5.  Applications, Implementation,\
    \ and Deployment  . . . . . . . .  21\n     5.1.  Report on the Operational Experiment\
    \  . . . . . . . . . .  22\n       5.1.1.  Metric Transparency . . . . . . . .\
    \ . . . . . . . . .  24\n   6.  Hybrid Measurement  . . . . . . . . . . . . .\
    \ . . . . . . . .  24\n   7.  Compliance with Guidelines from RFC 6390  . . .\
    \ . . . . . . .  25\n   8.  IANA Considerations . . . . . . . . . . . . . . .\
    \ . . . . . .  27\n   9.  Security Considerations . . . . . . . . . . . . . .\
    \ . . . . .  27\n   10. References  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  28\n     10.1.  Normative References . . . . . . . . . . . . . . .\
    \ . . .  28\n     10.2.  Informative References . . . . . . . . . . . . . . .\
    \ . .  29\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  32\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .\
    \  32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Nowadays, most Service Providers' networks carry traffic\
    \ with\n   contents that are highly sensitive to packet loss [RFC7680], delay\n\
    \   [RFC7679], and jitter [RFC3393].\n   In view of this scenario, Service Providers\
    \ need methodologies and\n   tools to monitor and measure network performance\
    \ with an adequate\n   accuracy, in order to constantly control the quality of\
    \ experience\n   perceived by their customers.  On the other hand, performance\n\
    \   monitoring provides useful information for improving network\n   management\
    \ (e.g., isolation of network problems, troubleshooting,\n   etc.).\n   A lot\
    \ of work related to Operations, Administration, and Maintenance\n   (OAM), which\
    \ also includes performance monitoring techniques, has\n   been done by Standards\
    \ Developing Organizations (SDOs): [RFC7276]\n   provides a good overview of existing\
    \ OAM mechanisms defined in the\n   IETF, ITU-T, and IEEE.  In the IETF, a lot\
    \ of work has been done on\n   fault detection and connectivity verification,\
    \ while a minor effort\n   has been thus far dedicated to performance monitoring.\
    \  The IPPM WG\n   has defined standard metrics to measure network performance;\
    \ however,\n   the methods developed in this WG mainly refer to focus on Active\n\
    \   measurement techniques.  More recently, the MPLS WG has defined\n   mechanisms\
    \ for measuring packet loss, one-way and two-way delay, and\n   delay variation\
    \ in MPLS networks [RFC6374], but their applicability\n   to Passive measurements\
    \ has some limitations, especially for pure\n   connection-less networks.\n  \
    \ The lack of adequate tools to measure packet loss with the desired\n   accuracy\
    \ drove an effort to design a new method for the performance\n   monitoring of\
    \ live traffic, which is easy to implement and deploy.\n   The effort led to the\
    \ method described in this document: basically,\n   it is a Passive performance\
    \ monitoring technique, potentially\n   applicable to any kind of packet-based\
    \ traffic, including Ethernet,\n   IP, and MPLS, both unicast and multicast. \
    \ The method addresses\n   primarily packet loss measurement, but it can be easily\
    \ extended to\n   one-way or two-way delay and delay variation measurements as\
    \ well.\n   The method has been explicitly designed for Passive measurements,\
    \ but\n   it can also be used with Active probes.  Passive measurements are\n\
    \   usually more easily understood by customers and provide much better\n   accuracy,\
    \ especially for packet loss measurements.\n   RFC 7799 [RFC7799] defines Passive\
    \ and Hybrid Methods of Measurement.\n   In particular, Passive Methods of Measurement\
    \ are based solely on\n   observations of an undisturbed and unmodified packet\
    \ stream of\n   interest; Hybrid Methods are Methods of Measurement that use a\n\
    \   combination of Active Methods and Passive Methods.\n   Taking into consideration\
    \ these definitions, the Alternate-Marking\n   Method could be considered Hybrid\
    \ or Passive, depending on the case.\n   In the case where the marking method\
    \ is obtained by changing existing\n   field values of the packets (e.g., the\
    \ Differentiated Services Code\n   Point (DSCP) field), the technique is Hybrid.\
    \  In the case where the\n   marking field is dedicated, reserved, and included\
    \ in the protocol\n   specification, the Alternate-Marking technique can be considered\
    \ as\n   Passive (e.g., Synonymous Flow Label as described in [SFL-FRAMEWORK]\n\
    \   or OAM Marking Bits as described in [PM-MM-BIER]).\n   The advantages of the\
    \ method described in this document are:\n   o  easy implementation: it can be\
    \ implemented by using features\n      already available on major routing platforms,\
    \ as described in\n      Section 5.1, or by applying an optimized implementation\
    \ of the\n      method for both legacy and newest technologies;\n   o  low computational\
    \ effort: the additional load on processing is\n      negligible;\n   o  accurate\
    \ packet loss measurement: single packet loss granularity\n      is achieved with\
    \ a Passive measurement;\n   o  potential applicability to any kind of packet-based\
    \ or frame-based\n      traffic: Ethernet, IP, MPLS, etc., and both unicast and\
    \ multicast;\n   o  robustness: the method can tolerate out-of-order packets,\
    \ and it's\n      not based on \"special\" packets whose loss could have a negative\n\
    \      impact;\n   o  flexibility: all the timestamp formats are allowed, because\
    \ they\n      are managed out of band.  The format (the Network Time Protocol\n\
    \      (NTP) [RFC5905] or the IEEE 1588 Precision Time Protocol (PTP)\n      [IEEE-1588])\
    \ depends on the precision you want; and\n   o  no interoperability issues: the\
    \ features required to experiment\n      and test the method (as described in\
    \ Section 5.1) are available on\n      all current routing platforms.  Both a\
    \ centralized or distributed\n      solution can be used to harvest data from\
    \ the routers.\n   The method doesn't raise any specific need for protocol extension,\n\
    \   but it could be further improved by means of some extension to\n   existing\
    \ protocols.  Specifically, the use of Diffserv bits for\n   coloring the packets\
    \ could not be a viable solution in some cases: a\n   standard method to color\
    \ the packets for this specific application\n   could be beneficial.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  Overview of the Method
  contents:
  - "2.  Overview of the Method\n   In order to perform packet loss measurements on\
    \ a production traffic\n   flow, different approaches exist.  The most intuitive\
    \ one consists in\n   numbering the packets so that each router that receives\
    \ the flow can\n   immediately detect a packet that is missing.  This approach,\
    \ though\n   very simple in theory, is not simple to achieve: it requires the\n\
    \   insertion of a sequence number into each packet, and the devices must\n  \
    \ be able to extract the number and check it in real time.  Such a task\n   can\
    \ be difficult to implement on live traffic: if UDP is used as the\n   transport\
    \ protocol, the sequence number is not available; on the\n   other hand, if a\
    \ higher-layer sequence number (e.g., in the RTP\n   header) is used, extracting\
    \ that information from each packet and\n   processing it in real time could overload\
    \ the device.\n   An alternate approach is to count the number of packets sent\
    \ on one\n   end, count the number of packets received on the other end, and\n\
    \   compare the two values.  This operation is much simpler to implement,\n  \
    \ but it requires the devices performing the measurement to be in sync:\n   in\
    \ order to compare two counters, it is required that they refer\n   exactly to\
    \ the same set of packets.  Since a flow is continuous and\n   cannot be stopped\
    \ when a counter has to be read, it can be difficult\n   to determine exactly\
    \ when to read the counter.  A possible solution\n   to overcome this problem\
    \ is to virtually split the flow in\n   consecutive blocks by periodically inserting\
    \ a delimiter so that each\n   counter refers exactly to the same block of packets.\
    \  The delimiter\n   could be, for example, a special packet inserted artificially\
    \ into\n   the flow.  However, delimiting the flow using specific packets has\n\
    \   some limitations.  First, it requires generating additional packets\n   within\
    \ the flow and requires the equipment to be able to process\n   those packets.\
    \  In addition, the method is vulnerable to out-of-order\n   reception of delimiting\
    \ packets and, to a lesser extent, to their\n   loss.\n   The method proposed\
    \ in this document follows the second approach, but\n   it doesn't use additional\
    \ packets to virtually split the flow in\n   blocks.  Instead, it \"marks\" the\
    \ packets so that the packets\n   belonging to the same block will have the same\
    \ color, whilst\n   consecutive blocks will have different colors.  Each change\
    \ of color\n   represents a sort of auto-synchronization signal that guarantees\
    \ the\n   consistency of measurements taken by different devices along the path\n\
    \   (see also [IP-MULTICAST-PM] and [OPSAWG-P3M], where this technique\n   was\
    \ introduced).\n   Figure 1 represents a very simple network and shows how the\
    \ method\n   can be used to measure packet loss on different network segments:\
    \ by\n   enabling the measurement on several interfaces along the path, it is\n\
    \   possible to perform link monitoring, node monitoring, or end-to-end\n   monitoring.\
    \  The method is flexible enough to measure packet loss on\n   any segment of\
    \ the network and can be used to isolate the faulty\n   element.\n           \
    \                    Traffic Flow\n        ========================================================>\n\
    \          +------+       +------+       +------+       +------+\n      ---<>\
    \  R1  <>-----<>  R2  <>-----<>  R3  <>-----<>  R4  <>---\n          +------+\
    \       +------+       +------+       +------+\n          .              .   \
    \   .              .       .      .\n          .              .      .       \
    \       .       .      .\n          .              <------>              <------->\
    \      .\n          .          Node Packet Loss      Link Packet Loss   .\n  \
    \        .                                                   .\n          <--------------------------------------------------->\n\
    \                           End-to-End Packet Loss\n                     Figure\
    \ 1: Available Measurements\n"
- title: 3.  Detailed Description of the Method
  contents:
  - "3.  Detailed Description of the Method\n   This section describes, in detail,\
    \ how the method operates.  A\n   special emphasis is given to the measurement\
    \ of packet loss, which\n   represents the core application of the method, but\
    \ applicability to\n   delay and jitter measurements is also considered.\n"
- title: 3.1.  Packet Loss Measurement
  contents:
  - "3.1.  Packet Loss Measurement\n   The basic idea is to virtually split traffic\
    \ flows into consecutive\n   blocks: each block represents a measurable entity\
    \ unambiguously\n   recognizable by all network devices along the path.  By counting\
    \ the\n   number of packets in each block and comparing the values measured by\n\
    \   different network devices along the path, it is possible to measure\n   packet\
    \ loss occurred in any single block between any two points.\n   As discussed in\
    \ the previous section, a simple way to create the\n   blocks is to \"color\"\
    \ the traffic (two colors are sufficient), so that\n   packets belonging to different\
    \ consecutive blocks will have different\n   colors.  Whenever the color changes,\
    \ the previous block terminates\n   and the new one begins.  Hence, all the packets\
    \ belonging to the same\n   block will have the same color and packets of different\
    \ consecutive\n   blocks will have different colors.  The number of packets in\
    \ each\n   block depends on the criterion used to create the blocks:\n   o  if\
    \ the color is switched after a fixed number of packets, then\n      each block\
    \ will contain the same number of packets (except for any\n      losses); and\n\
    \   o  if the color is switched according to a fixed timer, then the\n      number\
    \ of packets may be different in each block depending on the\n      packet rate.\n\
    \   The following figure shows how a flow looks like when it is split in\n   traffic\
    \ blocks with colored packets.\n   A: packet with A coloring\n   B: packet with\
    \ B coloring\n            |           |           |           |           |\n\
    \            |           |    Traffic Flow       |           |\n    ------------------------------------------------------------------->\n\
    \     BBBBBBB AAAAAAAAAAA BBBBBBBBBBB AAAAAAAAAAA BBBBBBBBBBB AAAAAAA\n    ------------------------------------------------------------------->\n\
    \       ...  |  Block 5  |  Block 4  |  Block 3  |  Block 2  |  Block 1\n    \
    \        |           |           |           |           |\n                 \
    \       Figure 2: Traffic Coloring\n   Figure 3 shows how the method can be used\
    \ to measure link packet loss\n   between two adjacent nodes.\n   Referring to\
    \ the figure, let's assume we want to monitor the packet\n   loss on the link\
    \ between two routers: router R1 and router R2.\n   According to the method, the\
    \ traffic is colored alternatively with\n   two different colors: A and B.  Whenever\
    \ the color changes, the\n   transition generates a sort of square-wave signal,\
    \ as depicted in the\n   following figure.\n   Color A   ----------+         \
    \  +-----------+           +----------\n                       |           | \
    \          |           |\n   Color B             +-----------+           +-----------+\n\
    \              Block n        ...      Block 3     Block 2     Block 1\n     \
    \       <---------> <---------> <---------> <---------> <--------->\n        \
    \                        Traffic Flow\n            ===========================================================>\n\
    \   Color   ...AAAAAAAAAAA BBBBBBBBBBB AAAAAAAAAAA BBBBBBBBBBB AAAAAAA...\n  \
    \          ===========================================================>\n    \
    \             Figure 3: Computation of Link Packet Loss\n   Traffic coloring can\
    \ be done by R1 itself if the traffic is not\n   already colored.  R1 needs two\
    \ counters, C(A)R1 and C(B)R1, on its\n   egress interface: C(A)R1 counts the\
    \ packets with color A and C(B)R1\n   counts those with color B.  As long as traffic\
    \ is colored as A, only\n   counter C(A)R1 will be incremented, while C(B)R1 is\
    \ not incremented;\n   conversely, when the traffic is colored as B, only C(B)R1\
    \ is\n   incremented.  C(A)R1 and C(B)R1 can be used as reference values to\n\
    \   determine the packet loss from R1 to any other measurement point down\n  \
    \ the path.  Router R2, similarly, will need two counters on its\n   ingress interface,\
    \ C(A)R2 and C(B)R2, to count the packets received\n   on that interface and colored\
    \ with A and B, respectively.  When an A\n   block ends, it is possible to compare\
    \ C(A)R1 and C(A)R2 and calculate\n   the packet loss within the block; similarly,\
    \ when the successive B\n   block terminates, it is possible to compare C(B)R1\
    \ with C(B)R2, and\n   so on, for every successive block.\n   Likewise, by using\
    \ two counters on the R2 egress interface, it is\n   possible to count the packets\
    \ sent out of the R2 interface and use\n   them as reference values to calculate\
    \ the packet loss from R2 to any\n   measurement point down R2.\n   Using a fixed\
    \ timer for color switching offers better control over\n   the method: the (time)\
    \ length of the blocks can be chosen large\n   enough to simplify the collection\
    \ and the comparison of measures\n   taken by different network devices.  It's\
    \ preferable to read the\n   value of the counters not immediately after the color\
    \ switch: some\n   packets could arrive out of order and increment the counter\n\
    \   associated with the previous block (color), so it is worth waiting\n   for\
    \ some time.  A safe choice is to wait L/2 time units (where L is\n   the duration\
    \ for each block) after the color switch, to read the\n   still counter of the\
    \ previous color, so the possibility of reading a\n   running counter instead\
    \ of a still one is minimized.  The drawback is\n   that the longer the duration\
    \ of the block, the less frequent the\n   measurement can be taken.\n   The following\
    \ table shows how the counters can be used to calculate\n   the packet loss between\
    \ R1 and R2.  The first column lists the\n   sequence of traffic blocks, while\
    \ the other columns contain the\n   counters of A-colored packets and B-colored\
    \ packets for R1 and R2.\n   In this example, we assume that the values of the\
    \ counters are reset\n   to zero whenever a block ends and its associated counter\
    \ has been\n   read: with this assumption, the table shows only relative values,\n\
    \   which is the exact number of packets of each color within each block.\n  \
    \ If the values of the counters were not reset, the table would contain\n   cumulative\
    \ values, but the relative values could be determined simply\n   by the difference\
    \ from the value of the previous block of the same\n   color.\n   The color is\
    \ switched on the basis of a fixed timer (not shown in the\n   table), so the\
    \ number of packets in each block is different.\n           +-------+--------+--------+--------+--------+------+\n\
    \           | Block | C(A)R1 | C(B)R1 | C(A)R2 | C(B)R2 | Loss |\n           +-------+--------+--------+--------+--------+------+\n\
    \           | 1     | 375    | 0      | 375    | 0      | 0    |\n           |\
    \ 2     | 0      | 388    | 0      | 388    | 0    |\n           | 3     | 382\
    \    | 0      | 381    | 0      | 1    |\n           | 4     | 0      | 377  \
    \  | 0      | 374    | 3    |\n           | ...   | ...    | ...    | ...    |\
    \ ...    | ...  |\n           | 2n    | 0      | 387    | 0      | 387    | 0\
    \    |\n           | 2n+1  | 379    | 0      | 377    | 0      | 2    |\n    \
    \       +-------+--------+--------+--------+--------+------+\n       Table 1:\
    \ Evaluation of Counters for Packet Loss Measurements\n   During an A block (blocks\
    \ 1, 3, and 2n+1), all the packets are\n   A-colored; therefore, the C(A) counters\
    \ are incremented to the number\n   seen on the interface, while C(B) counters\
    \ are zero.  Conversely,\n   during a B block (blocks 2, 4, and 2n), all the packets\
    \ are\n   B-colored: C(A) counters are zero, while C(B) counters are\n   incremented.\n\
    \   When a block ends (because of color switching), the relative counters\n  \
    \ stop incrementing; it is possible to read them, compare the values\n   measured\
    \ on routers R1 and R2, and calculate the packet loss within\n   that block.\n\
    \   For example, looking at the table above, during the first block\n   (A-colored),\
    \ C(A)R1 and C(A)R2 have the same value (375), which\n   corresponds to the exact\
    \ number of packets of the first block (no\n   loss).  Also, during the second\
    \ block (B-colored), R1 and R2 counters\n   have the same value (388), which corresponds\
    \ to the number of packets\n   of the second block (no loss).  During the third\
    \ and fourth blocks,\n   R1 and R2 counters are different, meaning that some packets\
    \ have been\n   lost: in the example, one single packet (382-381) was lost during\n\
    \   block three, and three packets (377-374) were lost during block four.\n  \
    \ The method applied to R1 and R2 can be extended to any other router\n   and\
    \ applied to more complex networks, as far as the measurement is\n   enabled on\
    \ the path followed by the traffic flow(s) being observed.\n   It's worth mentioning\
    \ two different strategies that can be used when\n   implementing the method:\n\
    \   o  flow-based: the flow-based strategy is used when only a limited\n     \
    \ number of traffic flows need to be monitored.  According to this\n      strategy,\
    \ only a subset of the flows is colored.  Counters for\n      packet loss measurements\
    \ can be instantiated for each single flow,\n      or for the set as a whole,\
    \ depending on the desired granularity.\n      A relevant problem with this approach\
    \ is the necessity to know in\n      advance the path followed by flows that are\
    \ subject to\n      measurement.  Path rerouting and traffic load-balancing increase\n\
    \      the issue complexity, especially for unicast traffic.  The problem\n  \
    \    is easier to solve for multicast traffic, where load-balancing is\n     \
    \ seldom used and static joins are frequently used to force traffic\n      forwarding\
    \ and replication.\n   o  link-based: measurements are performed on all the traffic\
    \ on a\n      link-by-link basis.  The link could be a physical link or a\n  \
    \    logical link.  Counters could be instantiated for the traffic as a\n    \
    \  whole or for each traffic class (in case it is desired to monitor\n      each\
    \ class separately), but in the second case, a couple of\n      counters are needed\
    \ for each class.\n   As mentioned, the flow-based measurement requires the identification\n\
    \   of the flow to be monitored and the discovery of the path followed by\n  \
    \ the selected flow.  It is possible to monitor a single flow or\n   multiple\
    \ flows grouped together, but in this case, measurement is\n   consistent only\
    \ if all the flows in the group follow the same path.\n   Moreover, if a measurement\
    \ is performed by grouping many flows, it is\n   not possible to determine exactly\
    \ which flow was affected by packet\n   loss.  In order to have measures per single\
    \ flow, it is necessary to\n   configure counters for each specific flow.  Once\
    \ the flow(s) to be\n   monitored has been identified, it is necessary to configure\
    \ the\n   monitoring on the proper nodes.  Configuring the monitoring means\n\
    \   configuring the rule to intercept the traffic and configuring the\n   counters\
    \ to count the packets.  To have just an end-to-end\n   monitoring, it is sufficient\
    \ to enable the monitoring on the first-\n   and last-hop routers of the path:\
    \ the mechanism is completely\n   transparent to intermediate nodes and independent\
    \ from the path\n   followed by traffic flows.  On the contrary, to monitor the\
    \ flow on a\n   hop-by-hop basis along its whole path, it is necessary to enable\
    \ the\n   monitoring on every node from the source to the destination.  In case\n\
    \   the exact path followed by the flow is not known a priori (i.e., the\n   flow\
    \ has multiple paths to reach the destination), it is necessary to\n   enable\
    \ the monitoring system on every path: counters on interfaces\n   traversed by\
    \ the flow will report packet count, whereas counters on\n   other interfaces\
    \ will be null.\n"
- title: 3.1.1.  Coloring the Packets
  contents:
  - "3.1.1.  Coloring the Packets\n   The coloring operation is fundamental in order\
    \ to create packet\n   blocks.  This implies choosing where to activate the coloring\
    \ and how\n   to color the packets.\n   In case of flow-based measurements, the\
    \ flow to monitor can be\n   defined by a set of selection rules (e.g., header\
    \ fields) used to\n   match a subset of the packets; in this way, it is possible\
    \ to control\n   the number of involved nodes, the path followed by the packets,\
    \ and\n   the size of the flows.  It is possible, in general, to have multiple\n\
    \   coloring nodes or a single coloring node that is easier to manage and\n  \
    \ doesn't raise any risk of conflict.  Coloring in multiple nodes can\n   be done,\
    \ and the requirement is that the coloring must change\n   periodically between\
    \ the nodes according to the timing considerations\n   in Section 3.2; so every\
    \ node that is designated as a measurement\n   point along the path should be\
    \ able to identify unambiguously the\n   colored packets.  Furthermore, [MULTIPOINT-ALT-MM]\
    \ generalizes the\n   coloring for multipoint-to-multipoint flow.  In addition,\
    \ it can be\n   advantageous to color the flow as close as possible to the source\n\
    \   because it allows an end-to-end measure if a measurement point is\n   enabled\
    \ on the last-hop router as well.\n   For link-based measurements, all traffic\
    \ needs to be colored when\n   transmitted on the link.  If the traffic had already\
    \ been colored,\n   then it has to be re-colored because the color must be consistent\
    \ on\n   the link.  This means that each hop along the path must (re-)color\n\
    \   the traffic; the color is not required to be consistent along\n   different\
    \ links.\n   Traffic coloring can be implemented by setting a specific bit in\
    \ the\n   packet header and changing the value of that bit periodically.  How\n\
    \   to choose the marking field depends on the application and is out of\n   scope\
    \ here.  However, some applications are reported in Section 5.\n"
- title: 3.1.2.  Counting the Packets
  contents:
  - "3.1.2.  Counting the Packets\n   For flow-based measurements, assuming that the\
    \ coloring of the\n   packets is performed only by the source nodes, the nodes\
    \ between\n   source and destination (included) have to count the colored packets\n\
    \   that they receive and forward: this operation can be enabled on every\n  \
    \ router along the path or only on a subset, depending on which network\n   segment\
    \ is being monitored (a single link, a particular metro area,\n   the backbone,\
    \ or the whole path).  Since the color switches\n   periodically between two values,\
    \ two counters (one for each value)\n   are needed: one counter for packets with\
    \ color A and one counter for\n   packets with color B.  For each flow (or group\
    \ of flows) being\n   monitored and for every interface where the monitoring is\
    \ Active, a\n   couple of counters are needed.  For example, in order to separately\n\
    \   monitor three flows on a router with four interfaces involved, 24\n   counters\
    \ are needed (two counters for each of the three flows on each\n   of the four\
    \ interfaces).  Furthermore, [MULTIPOINT-ALT-MM]\n   generalizes the counting\
    \ for multipoint-to-multipoint flow.\n   In case of link-based measurements, the\
    \ behavior is similar except\n   that coloring and counting operations are performed\
    \ on a link-by-link\n   basis at each endpoint of the link.\n   Another important\
    \ aspect to take into consideration is when to read\n   the counters: in order\
    \ to count the exact number of packets of a\n   block, the routers must perform\
    \ this operation when that block has\n   ended; in other words, the counter for\
    \ color A must be read when the\n   current block has color B, in order to be\
    \ sure that the value of the\n   counter is stable.  This task can be accomplished\
    \ in two ways.  The\n   general approach suggests reading the counters periodically,\
    \ many\n   times during a block duration, and comparing these successive\n   readings:\
    \ when the counter stops incrementing, it means that the\n   current block has\
    \ ended, and its value can be elaborated safely.\n   Alternatively, if the coloring\
    \ operation is performed on the basis of\n   a fixed timer, it is possible to\
    \ configure the reading of the\n   counters according to that timer: for example,\
    \ reading the counter\n   for color A every period in the middle of the subsequent\
    \ block with\n   color B is a safe choice.  A sufficient margin should be considered\n\
    \   between the end of a block and the reading of the counter, in order\n   to\
    \ take into account any out-of-order packets.\n"
- title: 3.1.3.  Collecting Data and Calculating Packet Loss
  contents:
  - "3.1.3.  Collecting Data and Calculating Packet Loss\n   The nodes enabled to\
    \ perform performance monitoring collect the value\n   of the counters, but they\
    \ are not able to directly use this\n   information to measure packet loss, because\
    \ they only have their own\n   samples.  For this reason, an external Network\
    \ Management System\n   (NMS) can be used to collect and elaborate data and to\
    \ perform packet\n   loss calculation.  The NMS compares the values of counters\
    \ from\n   different nodes and can calculate if some packets were lost (even a\n\
    \   single packet) and where those packets were lost.\n   The value of the counters\
    \ needs to be transmitted to the NMS as soon\n   as it has been read.  This can\
    \ be accomplished by using SNMP or FTP\n   and can be done in Push Mode or Polling\
    \ Mode.  In the first case,\n   each router periodically sends the information\
    \ to the NMS; in the\n   latter case, it is the NMS that periodically polls routers\
    \ to collect\n   information.  In any case, the NMS has to collect all the relevant\n\
    \   values from all the routers within one cycle of the timer.\n   It would also\
    \ be possible to use a protocol to exchange values of\n   counters between the\
    \ two endpoints in order to let them perform the\n   packet loss calculation for\
    \ each traffic direction.\n   A possible approach for the performance measurement\
    \ (PM) architecture\n   is explained in [COLORING], while [IP-FLOW-REPORT] introduces\
    \ new\n   information elements of IP Flow Information Export (IPFIX) [RFC7011].\n"
- title: 3.2.  Timing Aspects
  contents:
  - "3.2.  Timing Aspects\n   This document introduces two color-switching methods:\
    \ one is based on\n   a fixed number of packets, and the other is based on a fixed\
    \ timer.\n   But the method based on a fixed timer is preferable because it is\n\
    \   more deterministic, and it will be considered in the rest of the\n   document.\n\
    \   In general, clocks in network devices are not accurate and for this\n   reason,\
    \ there is a clock error between the measurement points R1 and\n   R2.  But, to\
    \ implement the methodology, they must be synchronized to\n   the same clock reference\
    \ with an accuracy of +/- L/2 time units,\n   where L is the fixed time duration\
    \ of the block.  So each colored\n   packet can be assigned to the right batch\
    \ by each router.  This is\n   because the minimum time distance between two packets\
    \ of the same\n   color but that belong to different batches is L time units.\n\
    \   In practice, in addition to clock errors, the delay between\n   measurement\
    \ points also affects the implementation of the methodology\n   because each packet\
    \ can be delayed differently, and this can produce\n   out of order at batch boundaries.\
    \  This means that, without\n   considering clock error, we wait L/2 after color\
    \ switching to be sure\n   to take a still counter.\n   In summary, we need to\
    \ take into account two contributions: clock\n   error between network devices\
    \ and the interval we need to wait to\n   avoid packets being out of order because\
    \ of network delay.\n   The following figure explains both issues.\n   ...BBBBBBBBB\
    \ | AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBB...\n                |<======================================>|\n\
    \                |                   L                    |\n   ...=========>|<==================><==================>|<==========...\n\
    \                |       L/2                   L/2        |\n                |<===>|\
    \                            |<===>|\n                   d  |                \
    \            |   d\n                      |<==========================>|\n   \
    \                    available counting interval\n                         Figure\
    \ 4: Timing Aspects\n   It is assumed that all network devices are synchronized\
    \ to a common\n   reference time with an accuracy of +/- A/2.  Thus, the difference\n\
    \   between the clock values of any two network devices is bounded by A.\n   The\
    \ guard band d is given by:\n   d = A + D_max - D_min,\n   where A is the clock\
    \ accuracy, D_max is an upper bound on the network\n   delay between the network\
    \ devices, and D_min is a lower bound on the\n   delay.\n   The available counting\
    \ interval is L - 2d that must be > 0.\n   The condition that must be satisfied\
    \ and is a requirement on the\n   synchronization accuracy is:\n   d < L/2.\n"
- title: 3.3.  One-Way Delay Measurement
  contents:
  - "3.3.  One-Way Delay Measurement\n   The same principle used to measure packet\
    \ loss can be applied also to\n   one-way delay measurement.  There are three\
    \ alternatives, as\n   described hereinafter.\n   Note that, for all the one-way\
    \ delay alternatives described in the\n   next sections, by summing the one-way\
    \ delays of the two directions of\n   a path, it is always possible to measure\
    \ the two-way delay (round-\n   trip \"virtual\" delay).\n"
- title: 3.3.1.  Single-Marking Methodology
  contents:
  - "3.3.1.  Single-Marking Methodology\n   The alternation of colors can be used\
    \ as a time reference to\n   calculate the delay.  Whenever the color changes\
    \ (which means that a\n   new block has started), a network device can store the\
    \ timestamp of\n   the first packet of the new block; that timestamp can be compared\n\
    \   with the timestamp of the same packet on a second router to compute\n   packet\
    \ delay.  When looking at Figure 2, R1 stores the timestamp\n   TS(A1)R1 when\
    \ it sends the first packet of block 1 (A-colored), the\n   timestamp TS(B2)R1\
    \ when it sends the first packet of block 2\n   (B-colored), and so on for every\
    \ other block.  R2 performs the same\n   operation on the receiving side, recording\
    \ TS(A1)R2, TS(B2)R2, and so\n   on.  Since the timestamps refer to specific packets\
    \ (the first packet\n   of each block), we are sure that timestamps compared to\
    \ compute delay\n   refer to the same packets.  By comparing TS(A1)R1 with TS(A1)R2\
    \ (and\n   similarly TS(B2)R1 with TS(B2)R2, and so on), it is possible to\n \
    \  measure the delay between R1 and R2.  In order to have more\n   measurements,\
    \ it is possible to take and store more timestamps,\n   referring to other packets\
    \ within each block.\n   In order to coherently compare timestamps collected on\
    \ different\n   routers, the clocks on the network nodes must be in sync.\n  \
    \ Furthermore, a measurement is valid only if no packet loss occurs and\n   if\
    \ packet misordering can be avoided; otherwise, the first packet of\n   a block\
    \ on R1 could be different from the first packet of the same\n   block on R2 (for\
    \ instance, if that packet is lost between R1 and R2\n   or it arrives after the\
    \ next one).\n   The following table shows how timestamps can be used to calculate\
    \ the\n   delay between R1 and R2.  The first column lists the sequence of\n \
    \  blocks, while other columns contain the timestamp referring to the\n   first\
    \ packet of each block on R1 and R2.  The delay is computed as a\n   difference\
    \ between timestamps.  For the sake of simplicity, all the\n   values are expressed\
    \ in milliseconds.\n      +-------+---------+---------+---------+---------+-------------+\n\
    \      | Block | TS(A)R1 | TS(B)R1 | TS(A)R2 | TS(B)R2 | Delay R1-R2 |\n     \
    \ +-------+---------+---------+---------+---------+-------------+\n      | 1 \
    \    | 12.483  | -       | 15.591  | -       | 3.108       |\n      | 2     |\
    \ -       | 6.263   | -       | 9.288   | 3.025       |\n      | 3     | 27.556\
    \  | -       | 30.512  | -       | 2.956       |\n      |       | -       | 18.113\
    \  | -       | 21.269  | 3.156       |\n      | ...   | ...     | ...     | ...\
    \     | ...     | ...         |\n      | 2n    | 77.463  | -       | 80.501  |\
    \ -       | 3.038       |\n      | 2n+1  | -       | 24.333  | -       | 27.433\
    \  | 3.100       |\n      +-------+---------+---------+---------+---------+-------------+\n\
    \         Table 2: Evaluation of Timestamps for Delay Measurements\n   The first\
    \ row shows timestamps taken on R1 and R2, respectively, and\n   refers to the\
    \ first packet of block 1 (which is A-colored).  Delay\n   can be computed as\
    \ a difference between the timestamp on R2 and the\n   timestamp on R1.  Similarly,\
    \ the second row shows timestamps (in\n   milliseconds) taken on R1 and R2 and\
    \ refers to the first packet of\n   block 2 (which is B-colored).  By comparing\
    \ timestamps taken on\n   different nodes in the network and referring to the\
    \ same packets\n   (identified using the alternation of colors), it is possible\
    \ to\n   measure delay on different network segments.\n   For the sake of simplicity,\
    \ in the above example, a single\n   measurement is provided within a block, taking\
    \ into account only the\n   first packet of each block.  The number of measurements\
    \ can be easily\n   increased by considering multiple packets in the block: for\
    \ instance,\n   a timestamp could be taken every N packets, thus generating multiple\n\
    \   delay measurements.  Taking this to the limit, in principle, the\n   delay\
    \ could be measured for each packet by taking and comparing the\n   corresponding\
    \ timestamps (possible but impractical from an\n   implementation point of view).\n"
- title: 3.3.1.1.  Mean Delay
  contents:
  - "3.3.1.1.  Mean Delay\n   As mentioned before, the method previously exposed for\
    \ measuring the\n   delay is sensitive to out-of-order reception of packets. \
    \ In order to\n   overcome this problem, a different approach has been considered:\
    \ it\n   is based on the concept of mean delay.  The mean delay is calculated\n\
    \   by considering the average arrival time of the packets within a\n   single\
    \ block.  The network device locally stores a timestamp for each\n   packet received\
    \ within a single block: summing all the timestamps and\n   dividing by the total\
    \ number of packets received, the average arrival\n   time for that block of packets\
    \ can be calculated.  By subtracting the\n   average arrival times of two adjacent\
    \ devices, it is possible to\n   calculate the mean delay between those nodes.\
    \  When computing the\n   mean delay, the measurement error could be augmented\
    \ by accumulating\n   the measurement error of a lot of packets.  This method\
    \ is robust to\n   out-of-order packets and also to packet loss (only a small\
    \ error is\n   introduced).  Moreover, it greatly reduces the number of timestamps\n\
    \   (only one per block for each network device) that have to be\n   collected\
    \ by the management system.  On the other hand, it only gives\n   one measure\
    \ for the duration of the block (for instance, 5 minutes),\n   and it doesn't\
    \ give the minimum, maximum, and median delay values\n   [RFC6703].  This limitation\
    \ could be overcome by reducing the\n   duration of the block (for instance, from\
    \ 5 minutes to a few\n   seconds), which implicates a highly optimized implementation\
    \ of the\n   method.\n"
- title: 3.3.2.  Double-Marking Methodology
  contents:
  - "3.3.2.  Double-Marking Methodology\n   The Single-Marking methodology for one-way\
    \ delay measurement is\n   sensitive to out-of-order reception of packets.  The\
    \ first approach\n   to overcome this problem has been described before and is\
    \ based on\n   the concept of mean delay.  But the limitation of mean delay is\
    \ that\n   it doesn't give information about the delay value's distribution for\n\
    \   the duration of the block.  Additionally, it may be useful to have\n   not\
    \ only the mean delay but also the minimum, maximum, and median\n   delay values\
    \ and, in wider terms, to know more about the statistic\n   distribution of delay\
    \ values.  So, in order to have more information\n   about the delay and to overcome\
    \ out-of-order issues, a different\n   approach can be introduced; it is based\
    \ on a Double-Marking\n   methodology.\n   Basically, the idea is to use the first\
    \ marking to create the\n   alternate flow and, within this colored flow, a second\
    \ marking to\n   select the packets for measuring delay/jitter.  The first marking\
    \ is\n   needed for packet loss and mean delay measurement.  The second\n   marking\
    \ creates a new set of marked packets that are fully identified\n   over the network,\
    \ so that a network device can store the timestamps\n   of these packets; these\
    \ timestamps can be compared with the\n   timestamps of the same packets on a\
    \ second router to compute packet\n   delay values for each packet.  The number\
    \ of measurements can be\n   easily increased by changing the frequency of the\
    \ second marking.\n   But the frequency of the second marking must not be too\
    \ high in order\n   to avoid out-of-order issues.  Between packets with the second\n\
    \   marking, there should be a security time gap (e.g., this gap could\n   be,\
    \ at the minimum, the mean network delay calculated with the\n   previous methodology)\
    \ to avoid out-of-order issues and also to have a\n   number of measurement packets\
    \ that are rate independent.  If a\n   second-marking packet is lost, the delay\
    \ measurement for the\n   considered block is corrupted and should be discarded.\n\
    \   Mean delay is calculated on all the packets of a sample and is a\n   simple\
    \ computation to be performed for a Single-Marking Method.  In\n   some cases,\
    \ the mean delay measure is not sufficient to characterize\n   the sample, and\
    \ more statistics of delay extent data are needed,\n   e.g., percentiles, variance,\
    \ and median delay values.  The\n   conventional range (maximum-minimum) should\
    \ be avoided for several\n   reasons, including stability of the maximum delay\
    \ due to the\n   influence by outliers.  RFC 5481 [RFC5481], Section 6.5 highlights\n\
    \   how the 99.9th percentile of delay and delay variation is more\n   helpful\
    \ to performance planners.  To overcome this drawback, the idea\n   is to couple\
    \ the mean delay measure for the entire batch with a\n   Double-Marking Method,\
    \ where a subset of batch packets is selected\n   for extensive delay calculation\
    \ by using a second marking.  In this\n   way, it is possible to perform a detailed\
    \ analysis on these double-\n   marked packets.  Please note that there are classic\
    \ algorithms for\n   median and variance calculation, but they are out of the\
    \ scope of\n   this document.  The comparison between the mean delay for the entire\n\
    \   batch and the mean delay on these double-marked packets gives useful\n   information\
    \ since it is possible to understand if the Double-Marking\n   measurements are\
    \ actually representative of the delay trends.\n"
- title: 3.4.  Delay Variation Measurement
  contents:
  - "3.4.  Delay Variation Measurement\n   Similar to one-way delay measurement (both\
    \ for Single Marking and\n   Double Marking), the method can also be used to measure\
    \ the inter-\n   arrival jitter.  We refer to the definition in RFC 3393 [RFC3393].\n\
    \   The alternation of colors, for a Single-Marking Method, can be used\n   as\
    \ a time reference to measure delay variations.  In case of Double\n   Marking,\
    \ the time reference is given by the second-marked packets.\n   Considering the\
    \ example depicted in Figure 2, R1 stores the timestamp\n   TS(A)R1 whenever it\
    \ sends the first packet of a block, and R2 stores\n   the timestamp TS(B)R2 whenever\
    \ it receives the first packet of a\n   block.  The inter-arrival jitter can be\
    \ easily derived from one-way\n   delay measurement, by evaluating the delay variation\
    \ of consecutive\n   samples.\n   The concept of mean delay can also be applied\
    \ to delay variation, by\n   evaluating the average variation of the interval\
    \ between consecutive\n   packets of the flow from R1 to R2.\n"
- title: 4.  Considerations
  contents:
  - "4.  Considerations\n   This section highlights some considerations about the\
    \ methodology.\n"
- title: 4.1.  Synchronization
  contents:
  - "4.1.  Synchronization\n   The Alternate-Marking technique does not require a\
    \ strong\n   synchronization, especially for packet loss and two-way delay\n \
    \  measurement.  Only one-way delay measurement requires network devices\n   to\
    \ have synchronized clocks.\n   Color switching is the reference for all the network\
    \ devices, and the\n   only requirement to be achieved is that all network devices\
    \ have to\n   recognize the right batch along the path.\n   If the length of the\
    \ measurement period is L time units, then all\n   network devices must be synchronized\
    \ to the same clock reference with\n   an accuracy of +/- L/2 time units (without\
    \ considering network\n   delay).  This level of accuracy guarantees that all\
    \ network devices\n   consistently match the color bit to the correct block. \
    \ For example,\n   if the color is toggled every second (L = 1 second), then clocks\
    \ must\n   be synchronized with an accuracy of +/- 0.5 second to a common time\n\
    \   reference.\n   This synchronization requirement can be satisfied even with\
    \ a\n   relatively inaccurate synchronization method.  This is true for\n   packet\
    \ loss and two-way delay measurement, but not for one-way delay\n   measurement,\
    \ where clock synchronization must be accurate.\n   Therefore, a system that uses\
    \ only packet loss and two-way delay\n   measurement does not require synchronization.\
    \  This is because the\n   value of the clocks of network devices does not affect\
    \ the\n   computation of the two-way delay measurement.\n"
- title: 4.2.  Data Correlation
  contents:
  - "4.2.  Data Correlation\n   Data correlation is the mechanism to compare counters\
    \ and timestamps\n   for packet loss, delay, and delay variation calculation.\
    \  It could be\n   performed in several ways depending on the Alternate-Marking\n\
    \   application and use case.  Some possibilities are to:\n   o  use a centralized\
    \ solution using NMS to correlate data; and\n   o  define a protocol-based distributed\
    \ solution by introducing a new\n      protocol or by extending the existing protocols\
    \ (e.g., see RFC\n      6374 [RFC6374] or the Two-Way Active Measurement Protocol\
    \ (TWAMP)\n      as defined in RFC 5357 [RFC5357] or the One-Way Active Measurement\n\
    \      Protocol (OWAMP) as defined in RFC 4656 [RFC4656]) in order to\n      communicate\
    \ the counters and timestamps between nodes.\n   In the following paragraphs,\
    \ an example data correlation mechanism is\n   explained and could be used independently\
    \ of the adopted solutions.\n   When data is collected on the upstream and downstream\
    \ nodes, e.g.,\n   packet counts for packet loss measurement or timestamps for\
    \ packet\n   delay measurement, and is periodically reported to or pulled by other\n\
    \   nodes or an NMS, a certain data correlation mechanism SHOULD be in\n   use\
    \ to help the nodes or NMS tell whether any two or more packet\n   counts are\
    \ related to the same block of markers or if any two\n   timestamps are related\
    \ to the same marked packet.\n   The Alternate-Marking Method described in this\
    \ document literally\n   splits the packets of the measured flow into different\
    \ measurement\n   blocks; in addition, a Block Number (BN) could be assigned to\
    \ each\n   such measurement block.  The BN is generated each time a node reads\n\
    \   the data (packet counts or timestamps) and is associated with each\n   packet\
    \ count and timestamp reported to or pulled by other nodes or\n   NMSs.  The value\
    \ of a BN could be calculated as the modulo of the\n   local time (when the data\
    \ are read) and the interval of the marking\n   time period.\n   When the nodes\
    \ or NMS see, for example, the same BNs associated with\n   two packet counts\
    \ from an upstream and a downstream node,\n   respectively, it considers that\
    \ these two packet counts correspond to\n   the same block, i.e., these two packet\
    \ counts belong to the same\n   block of markers from the upstream and downstream\
    \ nodes.  The\n   assumption of this BN mechanism is that the measurement nodes\
    \ are\n   time synchronized.  This requires the measurement nodes to have a\n\
    \   certain time synchronization capability (e.g., the Network Time\n   Protocol\
    \ (NTP) [RFC5905] or the IEEE 1588 Precision Time Protocol\n   (PTP) [IEEE-1588]).\
    \  Synchronization aspects are further discussed in\n   Section 4.1.\n"
- title: 4.3.  Packet Reordering
  contents:
  - "4.3.  Packet Reordering\n   Due to ECMP, packet reordering is very common in\
    \ an IP network.  The\n   accuracy of a marking-based PM, especially packet loss\
    \ measurement,\n   may be affected by packet reordering.  Take a look at the following\n\
    \   example:\n   Block   :    1    |    2    |    3    |    4    |    5    |...\n\
    \   --------|---------|---------|---------|---------|---------|---\n   Node R1\
    \ : AAAAAAA | BBBBBBB | AAAAAAA | BBBBBBB | AAAAAAA |...\n   Node R2 : AAAAABB\
    \ | AABBBBA | AAABAAA | BBBBBBA | ABAAABA |...\n                        Figure\
    \ 5: Packet Reordering\n   In Figure 5, the packet stream for Node R1 isn't being\
    \ reordered and\n   can be safely assigned to interval blocks, but the packet\
    \ stream for\n   Node R2 is being reordered; so, looking at the packet with the\
    \ marker\n   of \"B\" in block 3, there is no safe way to tell whether the packet\n\
    \   belongs to block 2 or block 4.\n   In general, there is the need to assign\
    \ packets with the marker of\n   \"B\" or \"A\" to the right interval blocks.\
    \  Most of the packet\n   reordering occurs at the edge of adjacent blocks, and\
    \ they are easy\n   to handle if the interval of each block is sufficiently large.\
    \  Then,\n   it can be assumed that the packets with different markers belong\
    \ to\n   the block that they are closer to.  If the interval is small, it is\n\
    \   difficult and sometimes impossible to determine to which block a\n   packet\
    \ belongs.\n   To choose a proper interval is important, and how to choose a proper\n\
    \   interval is out of the scope of this document.  But an implementation\n  \
    \ SHOULD provide a way to configure the interval and allow a certain\n   degree\
    \ of packet reordering.\n"
- title: 5.  Applications, Implementation, and Deployment
  contents:
  - "5.  Applications, Implementation, and Deployment\n   The methodology described\
    \ in the previous sections can be applied in\n   various situations.  Basically,\
    \ the Alternate-Marking technique could\n   be used in many cases for performance\
    \ measurement.  The only\n   requirement is to select and mark the flow to be\
    \ monitored; in this\n   way, packets are batched by the sender, and each batch\
    \ is alternately\n   marked such that it can be easily recognized by the receiver.\n\
    \   Some recent Alternate-Marking Method applications are listed below:\n   o\
    \  IP Flow Performance Measurement (IPFPM): this application of the\n      marking\
    \ method is described in [COLORING].  As an example, in this\n      document,\
    \ the last reserved bit of the Flag field of the IPv4\n      header is proposed\
    \ to be used for marking, while a solution for\n      IPv6 could be to leverage\
    \ the IPv6 extension header for marking.\n   o  OAM Passive Performance Measurement:\
    \ In [RFC8296], two OAM bits\n      from the Bit Index Explicit Replication (BIER)\
    \ header are reserved\n      for the Passive performance measurement marking method.\n\
    \      [PM-MM-BIER] details the measurement for multicast service over\n     \
    \ the BIER domain.  In addition, the Alternate-Marking Method could\n      also\
    \ be used in a Service Function Chaining (SFC) domain.  Lastly,\n      the application\
    \ of the marking method to Network Virtualization\n      over Layer 3 (NVO3) protocols\
    \ is considered by [NVO3-ENCAPS].\n   o  MPLS Performance Measurement: RFC 6374\
    \ [RFC6374] uses the Loss\n      Measurement (LM) packet as the packet accounting\
    \ demarcation\n      point.  Unfortunately, this gives rise to a number of problems\n\
    \      that may lead to significant packet accounting errors in certain\n    \
    \  situations.  [MPLS-FLOW] discusses the desired capabilities for\n      MPLS\
    \ flow identification in order to perform a better in-band\n      performance\
    \ monitoring of user data packets.  A method of\n      accomplishing identification\
    \ is Synonymous Flow Labels (SFLs)\n      introduced in [SFL-FRAMEWORK], while\
    \ [SYN-FLOW-LABELS] describes\n      performance measurements in RFC 6374 with\
    \ SFL.\n   o  Active Performance Measurement: [ALT-MM-AMP] describes how to\n\
    \      extend the existing Active Measurement Protocol, in order to\n      implement\
    \ the Alternate-Marking methodology.  [ALT-MM-SLA]\n      describes an extension\
    \ to the Cisco SLA Protocol Measurement-Type\n      UDP-Measurement.\n   An example\
    \ of implementation and deployment is explained in the next\n   section, just\
    \ to clarify how the method can work.\n"
- title: 5.1.  Report on the Operational Experiment
  contents:
  - "5.1.  Report on the Operational Experiment\n   The method described in this document,\
    \ also called Packet Network\n   Performance Monitoring (PNPM), has been invented\
    \ and engineered in\n   Telecom Italia.\n   It is important to highlight that\
    \ the general description of the\n   methodology in this document is a consequence\
    \ of the operational\n   experiment.  The fundamental elements of the technique\
    \ have been\n   tested, and the lessons learned from the operational experiment\n\
    \   inspired the formalization of the Alternate-Marking Method as\n   detailed\
    \ in the previous sections.\n   The methodology has been used experimentally in\
    \ Telecom Italia's\n   network and is applied to multicast IPTV channels or other\
    \ specific\n   traffic flows with high QoS requirements (i.e., Mobile Backhauling\n\
    \   traffic realized with a VPN MPLS).\n   This technology has been employed by\
    \ leveraging functions and tools\n   available on IP routers, and it's currently\
    \ being used to monitor\n   packet loss in some portions of Telecom Italia's network.\
    \  The\n   application of this method for delay measurement has also been\n  \
    \ evaluated in Telecom Italia's labs.\n   This section describes how the experiment\
    \ has been executed,\n   particularly, how the features currently available on\
    \ existing\n   routing platforms can be used to apply the method, in order to\
    \ give\n   an example of implementation and deployment.\n   The operational test,\
    \ described herein, uses the flow-based strategy,\n   as defined in Section 3.\
    \  Instead, the link-based strategy could be\n   applied to a physical link or\
    \ a logical link (e.g., an Ethernet VLAN\n   or an MPLS Pseudowire (PW)).\n  \
    \ The implementation of the method leverages the available router\n   functions,\
    \ since the experiment has been done by a Service Provider\n   (as Telecom Italia\
    \ is) on its own network.  So, with current router\n   implementations, only QoS-related\
    \ fields and features offer the\n   required flexibility to set bits in the packet\
    \ header.  In case a\n   Service Provider only uses the three most-significant\
    \ bits of the\n   DSCP field (corresponding to IP Precedence) for QoS classification\n\
    \   and queuing, it is possible to use the two least-significant bits of\n   the\
    \ DSCP field (bit 0 and bit 1) to implement the method without\n   affecting QoS\
    \ policies.  That is the approach used for the\n   experiment.  One of the two\
    \ bits (bit 0) could be used to identify\n   flows subject to traffic monitoring\
    \ (set to 1 if the flow is under\n   monitoring, otherwise, it is set to 0), while\
    \ the second (bit 1) can\n   be used for coloring the traffic (switching between\
    \ values 0 and 1,\n   corresponding to colors A and B) and creating the blocks.\n\
    \   The experiment considers a flow as all the packets sharing the same\n   source\
    \ IP address or the same destination IP address, depending on\n   the direction.\
    \  In practice, once the flow has been defined, traffic\n   coloring using the\
    \ DSCP field can be implemented by configuring an\n   access-list on the router\
    \ output interface.  The access-list\n   intercepts the flow(s) to be monitored\
    \ and applies a policy to them\n   that sets the DSCP field accordingly.  Since\
    \ traffic coloring has to\n   be switched between the two values over time, the\
    \ policy needs to be\n   modified periodically.  An automatic script is used to\
    \ perform this\n   task on the basis of a fixed timer.  The automatic script is\
    \ loaded\n   on board of the router and automatizes the basic operations that\
    \ are\n   needed to realize the methodology.\n   After the traffic is colored\
    \ using the DSCP field, all the routers on\n   the path can perform the counting.\
    \  For this purpose, an access-list\n   that matches specific DSCP values can\
    \ be used to count the packets of\n   the flow(s) being monitored.  The same access-list\
    \ can be installed\n   on all the routers of the path.  In addition, network flow\n\
    \   monitoring, such as provided by IPFIX [RFC7011], can be used to\n   recognize\
    \ timestamps of the first/last packet of a batch in order to\n   enable one of\
    \ the alternatives to measure the delay as detailed in\n   Section 3.3.\n   In\
    \ Telecom Italia's experiment, the timer is set to 5 minutes, so the\n   sequence\
    \ of actions of the script is also executed every 5 minutes.\n   This value has\
    \ shown to be a good compromise between measurement\n   frequency and stability\
    \ of the measurement (i.e., the possibility of\n   collecting all the measures\
    \ referring to the same block).\n   For this experiment, both counters and any\
    \ other data are collected\n   by using the automatic script that sends these\
    \ out to an NMS.  The\n   NMS is responsible for packet loss calculation, performed\
    \ by\n   comparing the values of counters from the routers along the flow\n  \
    \ path(s).  A 5-minute timer for color switching is a safe choice for\n   reading\
    \ the counters and is also coherent with the reporting window\n   of the NMS.\n\
    \   Note that the use of the DSCP field for marking implies that the\n   method\
    \ in this case works reliably only within a single management\n   and operation\
    \ domain.\n   Lastly, the Telecom Italia experiment scales up to 1000 flows\n\
    \   monitored together on a single router, while an implementation on\n   dedicated\
    \ hardware scales more, but it was tested only in labs for\n   now.\n"
- title: 5.1.1.  Metric Transparency
  contents:
  - "5.1.1.  Metric Transparency\n   Since a Service Provider application is described\
    \ here, the method\n   can be applied to end-to-end services supplied to customers.\
    \  So it\n   is important to highlight that the method MUST be transparent outside\n\
    \   the Service Provider domain.\n   In Telecom Italia's implementation, the source\
    \ node colors the\n   packets with a policy that is modified periodically via\
    \ an automatic\n   script in order to alternate the DSCP field of the packets.\
    \  The\n   nodes between source and destination (included) have to use an\n  \
    \ access-list to count the colored packets that they receive and\n   forward.\n\
    \   Moreover, the destination node has an important role: the colored\n   packets\
    \ are intercepted and a policy restores and sets the DSCP field\n   of all the\
    \ packets to the initial value.  In this way, the metric is\n   transparent because\
    \ outside the section of the network under\n   monitoring, the traffic flow is\
    \ unchanged.\n   In such a case, thanks to this restoring technique, network elements\n\
    \   outside the Alternate-Marking monitoring domain (e.g., the two\n   Provider\
    \ Edge nodes of the Mobile Backhauling VPN MPLS) are totally\n   unaware that\
    \ packets were marked.  So this restoring technique makes\n   Alternate Marking\
    \ completely transparent outside its monitoring\n   domain.\n"
- title: 6.  Hybrid Measurement
  contents:
  - "6.  Hybrid Measurement\n   The method has been explicitly designed for Passive\
    \ measurements, but\n   it can also be used with Active measurements.  In order\
    \ to have both\n   end-to-end measurements and intermediate measurements (Hybrid\n\
    \   measurements), two endpoints can exchange artificial traffic flows\n   and\
    \ apply Alternate Marking over these flows.  In the intermediate\n   points, artificial\
    \ traffic is managed in the same way as real traffic\n   and measured as specified\
    \ before.  So the application of the marking\n   method can also simplify the\
    \ Active measurement, as explained in\n   [ALT-MM-AMP].\n"
- title: 7.  Compliance with Guidelines from RFC 6390
  contents:
  - "7.  Compliance with Guidelines from RFC 6390\n   RFC 6390 [RFC6390] defines a\
    \ framework and a process for developing\n   Performance Metrics for protocols\
    \ above and below the IP layer (such\n   as IP-based applications that operate\
    \ over reliable or datagram\n   transport protocols).\n   This document doesn't\
    \ aim to propose a new Performance Metric but\n   rather a new Method of Measurement\
    \ for a few Performance Metrics that\n   have already been standardized.  Nevertheless,\
    \ it's worth applying\n   guidelines from [RFC6390] to the present document, in\
    \ order to\n   provide a more complete and coherent description of the proposed\n\
    \   method.  We used a combination of the Performance Metric Definition\n   template\
    \ defined in Section 5.4 of [RFC6390] and the Dependencies\n   laid out in Section\
    \ 5.5 of that document.\n   o  Metric Name / Metric Description: as already stated,\
    \ this document\n      doesn't propose any new Performance Metrics.  On the contrary,\
    \ it\n      describes a novel method for measuring packet loss [RFC7680].  The\n\
    \      same concept, with small differences, can also be used to measure\n   \
    \   delay [RFC7679] and jitter [RFC3393].  The document mainly\n      describes\
    \ the applicability to packet loss measurement.\n   o  Method of Measurement or\
    \ Calculation: according to the method\n      described in the previous sections,\
    \ the number of packets lost is\n      calculated by subtracting the value of\
    \ the counter on the source\n      node from the value of the counter on the destination\
    \ node.  Both\n      counters must refer to the same color.  The calculation is\n\
    \      performed when the value of the counters is in a steady state.\n      The\
    \ steady state is an intrinsic characteristic of the marking\n      method counters\
    \ because the alternation of color makes the\n      counters associated with each\
    \ color still one at a time for the\n      duration of a marking period.\n   o\
    \  Units of Measurement: the method calculates and reports the exact\n      number\
    \ of packets sent by the source node and not received by the\n      destination\
    \ node.\n   o  Measurement Point(s) with Potential Measurement Domain: the\n \
    \     measurement can be performed between adjacent nodes, on a per-link\n   \
    \   basis, or along a multi-hop path, provided that the traffic under\n      measurement\
    \ follows that path.  In case of a multi-hop path, the\n      measurements can\
    \ be performed both end-to-end and hop-by-hop.\n   o  Measurement Timing: the\
    \ method has a constraint on the frequency\n      of measurements.  This is detailed\
    \ in Section 3.2, where it is\n      specified that the marking period and the\
    \ guard band interval are\n      strictly related each other to avoid out-of-order\
    \ issues.  That is\n      because, in order to perform a measurement, the counter\
    \ must be in\n      a steady state, and this happens when the traffic is being\
    \ colored\n      with the alternate color.  As an example, in the experiment of\
    \ the\n      method, the time interval is set to 5 minutes, while other\n    \
    \  optimized implementations can also use a marking period of a few\n      seconds.\n\
    \   o  Implementation: the experiment of the method uses two encodings of\n  \
    \    the DSCP field to color the packets; this enables the use of\n      policy\
    \ configurations on the router to color the packets and\n      accordingly configure\
    \ the counter for each color.  The path\n      followed by traffic being measured\
    \ should be known in advance in\n      order to configure the counters along the\
    \ path and be able to\n      compare the correct values.\n   o  Verification:\
    \ both in the lab and in the operational network, the\n      methodology has been\
    \ tested and experimented for packet loss and\n      delay measurements by using\
    \ traffic generators together with\n      precision test instruments and network\
    \ emulators.\n   o  Use and Applications: the method can be used to measure packet\n\
    \      loss with high precision on live traffic; moreover, by combining\n    \
    \  end-to-end and per-link measurements, the method is useful to\n      pinpoint\
    \ the single link that is experiencing loss events.\n   o  Reporting Model: the\
    \ value of the counters has to be sent to a\n      centralized management system\
    \ that performs the calculations; such\n      samples must contain a reference\
    \ to the time interval they refer\n      to, so that the management system can\
    \ perform the correct\n      correlation; the samples have to be sent while the\
    \ corresponding\n      counter is in a steady state (within a time interval);\
    \ otherwise,\n      the value of the sample should be stored locally.\n   o  Dependencies:\
    \ the values of the counters have to be correlated to\n      the time interval\
    \ they refer to; moreover, because the experiment\n      of the method is based\
    \ on DSCP values, there are significant\n      dependencies on the usage of the\
    \ DSCP field: it must be possible\n      to rely on unused DSCP values without\
    \ affecting QoS-related\n      configuration and behavior; moreover, the intermediate\
    \ nodes must\n      not change the value of the DSCP field not to alter the\n\
    \      measurement.\n   o  Organization of Results: the Method of Measurement\
    \ produces\n      singletons.\n   o  Parameters: currently, the main parameter\
    \ of the method is the\n      time interval used to alternate the colors and read\
    \ the counters.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document specifies a method to perform measurements\
    \ in the\n   context of a Service Provider's network and has not been developed\
    \ to\n   conduct Internet measurements, so it does not directly affect\n   Internet\
    \ security nor applications that run on the Internet.\n   However, implementation\
    \ of this method must be mindful of security\n   and privacy concerns.\n   There\
    \ are two types of security concerns: potential harm caused by\n   the measurements\
    \ and potential harm to the measurements.\n   o  Harm caused by the measurement:\
    \ the measurements described in this\n      document are Passive, so there are\
    \ no new packets injected into\n      the network causing potential harm to the\
    \ network itself and to\n      data traffic.  Nevertheless, the method implies\
    \ modifications on\n      the fly to a header or encapsulation of the data packets:\
    \ this\n      must be performed in a way that doesn't alter the quality of\n \
    \     service experienced by packets subject to measurements and that\n      preserves\
    \ stability and performance of routers doing the\n      measurements.  One of\
    \ the main security threats in OAM protocols\n      is network reconnaissance;\
    \ an attacker can gather information\n      about the network performance by passively\
    \ eavesdropping on OAM\n      messages.  The advantage of the methods described\
    \ in this document\n      is that the marking bits are the only information that\
    \ is\n      exchanged between the network devices.  Therefore, Passive\n     \
    \ eavesdropping on data-plane traffic does not allow attackers to\n      gain\
    \ information about the network performance.\n   o  Harm to the Measurement: the\
    \ measurements could be harmed by\n      routers altering the marking of the packets\
    \ or by an attacker\n      injecting artificial traffic.  Authentication techniques,\
    \ such as\n      digital signatures, may be used where appropriate to guard against\n\
    \      injected traffic attacks.  Since the measurement itself may be\n      affected\
    \ by routers (or other network devices) along the path of\n      IP packets intentionally\
    \ altering the value of marking bits of\n      packets, as mentioned above, the\
    \ mechanism specified in this\n      document can be applied just in the context\
    \ of a controlled\n      domain; thus, the routers (or other network devices)\
    \ are locally\n      administered and this type of attack can be avoided.  In\
    \ addition,\n      an attacker can't gain information about network performance\
    \ from\n      a single monitoring point; it must use synchronized monitoring\n\
    \      points at multiple points on the path, because they have to do the\n  \
    \    same kind of measurement and aggregation that Service Providers\n      using\
    \ Alternate Marking must do.\n   The privacy concerns of network measurement are\
    \ limited because the\n   method only relies on information contained in the header\
    \ or\n   encapsulation without any release of user data.  Although information\n\
    \   in the header or encapsulation is metadata that can be used to\n   compromise\
    \ the privacy of users, the limited marking technique in\n   this document seems\
    \ unlikely to substantially increase the existing\n   privacy risks from header\
    \ or encapsulation metadata.  It might be\n   theoretically possible to modulate\
    \ the marking to serve as a covert\n   channel, but it would have a very low data\
    \ rate if it is to avoid\n   adversely affecting the measurement systems that\
    \ monitor the marking.\n   Delay attacks are another potential threat in the context\
    \ of this\n   document.  Delay measurement is performed using a specific packet\
    \ in\n   each block, marked by a dedicated color bit.  Therefore, a\n   man-in-the-middle\
    \ attacker can selectively induce synthetic delay\n   only to delay-colored packets,\
    \ causing systematic error in the delay\n   measurements.  As discussed in previous\
    \ sections, the methods\n   described in this document rely on an underlying time\
    \ synchronization\n   protocol.  Thus, by attacking the time protocol, an attacker\
    \ can\n   potentially compromise the integrity of the measurement.  A detailed\n\
    \   discussion about the threats against time protocols and how to\n   mitigate\
    \ them is presented in RFC 7384 [RFC7384].\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [IEEE-1588]\n              IEEE, \"IEEE Standard\
    \ for a Precision Clock Synchronization\n              Protocol for Networked\
    \ Measurement and Control Systems\",\n              IEEE Std 1588-2008.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3393]  Demichelis,\
    \ C. and P. Chimento, \"IP Packet Delay Variation\n              Metric for IP\
    \ Performance Metrics (IPPM)\", RFC 3393,\n              DOI 10.17487/RFC3393,\
    \ November 2002,\n              <https://www.rfc-editor.org/info/rfc3393>.\n \
    \  [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n       \
    \       \"Network Time Protocol Version 4: Protocol and Algorithms\n         \
    \     Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010,\n          \
    \    <https://www.rfc-editor.org/info/rfc5905>.\n   [RFC7679]  Almes, G., Kalidindi,\
    \ S., Zekauskas, M., and A. Morton,\n              Ed., \"A One-Way Delay Metric\
    \ for IP Performance Metrics\n              (IPPM)\", STD 81, RFC 7679, DOI 10.17487/RFC7679,\
    \ January\n              2016, <https://www.rfc-editor.org/info/rfc7679>.\n  \
    \ [RFC7680]  Almes, G., Kalidindi, S., Zekauskas, M., and A. Morton,\n       \
    \       Ed., \"A One-Way Loss Metric for IP Performance Metrics\n            \
    \  (IPPM)\", STD 82, RFC 7680, DOI 10.17487/RFC7680, January\n              2016,\
    \ <https://www.rfc-editor.org/info/rfc7680>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP 14, RFC\
    \ 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [ALT-MM-AMP]\n              Fioccola, G., Clemm,\
    \ A., Bryant, S., Cociglio, M.,\n              Chandramouli, M., and A. Capello,\
    \ \"Alternate Marking\n              Extension to Active Measurement Protocol\"\
    , Work in\n              Progress, draft-fioccola-ippm-alt-mark-active-01, March\n\
    \              2017.\n   [ALT-MM-SLA]\n              Fioccola, G., Clemm, A.,\
    \ Cociglio, M., Chandramouli, M.,\n              and A. Capello, \"Alternate Marking\
    \ Extension to Cisco SLA\n              Protocol RFC6812\", Work in Progress,\
    \ draft-fioccola-ippm-\n              rfc6812-alt-mark-ext-01, March 2016.\n \
    \  [COLORING] Chen, M., Zheng, L., Mirsky, G., Fioccola, G., and T.\n        \
    \      Mizrahi, \"IP Flow Performance Measurement Framework\", Work\n        \
    \      in Progress, draft-chen-ippm-coloring-based-ipfpm-\n              framework-06,\
    \ March 2016.\n   [IP-FLOW-REPORT]\n              Chen, M., Zheng, L., and G.\
    \ Mirsky, \"IP Flow Performance\n              Measurement Report\", Work in Progress,\
    \ draft-chen-ippm-\n              ipfpm-report-01, April 2016.\n   [IP-MULTICAST-PM]\n\
    \              Cociglio, M., Capello, A., Bonda, A., and L. Castaldelli,\n   \
    \           \"A method for IP multicast performance monitoring\", Work\n     \
    \         in Progress, draft-cociglio-mboned-multicast-pm-01,\n              October\
    \ 2010.\n   [MPLS-FLOW]\n              Bryant, S., Pignataro, C., Chen, M., Li,\
    \ Z., and G.\n              Mirsky, \"MPLS Flow Identification Considerations\"\
    , Work in\n              Progress, draft-ietf-mpls-flow-ident-06, December 2017.\n\
    \   [MULTIPOINT-ALT-MM]\n              Fioccola, G., Cociglio, M., Sapio, A.,\
    \ and R. Sisto,\n              \"Multipoint Alternate Marking method for passive\
    \ and\n              hybrid performance monitoring\", Work in Progress,\n    \
    \          draft-fioccola-ippm-multipoint-alt-mark-01, October 2017.\n   [NVO3-ENCAPS]\n\
    \              Boutros, S., Ganga, I., Garg, P., Manur, R., Mizrahi, T.,\n   \
    \           Mozes, D., Nordmark, E., Smith, M., Aldrin, S., and I.\n         \
    \     Bagdonas, \"NVO3 Encapsulation Considerations\", Work in\n             \
    \ Progress, draft-ietf-nvo3-encap-01, October 2017.\n   [OPSAWG-P3M]\n       \
    \       Capello, A., Cociglio, M., Castaldelli, L., and A. Bonda,\n          \
    \    \"A packet based method for passive performance\n              monitoring\"\
    , Work in Progress, draft-tempia-opsawg-p3m-04,\n              February 2014.\n\
    \   [PM-MM-BIER]\n              Mirsky, G., Zheng, L., Chen, M., and G. Fioccola,\n\
    \              \"Performance Measurement (PM) with Marking Method in Bit\n   \
    \           Index Explicit Replication (BIER) Layer\", Work in\n             \
    \ Progress, draft-ietf-bier-pmmm-oam-03, October 2017.\n   [RFC4656]  Shalunov,\
    \ S., Teitelbaum, B., Karp, A., Boote, J., and M.\n              Zekauskas, \"\
    A One-way Active Measurement Protocol\n              (OWAMP)\", RFC 4656, DOI\
    \ 10.17487/RFC4656, September 2006,\n              <https://www.rfc-editor.org/info/rfc4656>.\n\
    \   [RFC5357]  Hedayat, K., Krzanowski, R., Morton, A., Yum, K., and J.\n    \
    \          Babiarz, \"A Two-Way Active Measurement Protocol (TWAMP)\",\n     \
    \         RFC 5357, DOI 10.17487/RFC5357, October 2008,\n              <https://www.rfc-editor.org/info/rfc5357>.\n\
    \   [RFC5481]  Morton, A. and B. Claise, \"Packet Delay Variation\n          \
    \    Applicability Statement\", RFC 5481, DOI 10.17487/RFC5481,\n            \
    \  March 2009, <https://www.rfc-editor.org/info/rfc5481>.\n   [RFC6374]  Frost,\
    \ D. and S. Bryant, \"Packet Loss and Delay\n              Measurement for MPLS\
    \ Networks\", RFC 6374,\n              DOI 10.17487/RFC6374, September 2011,\n\
    \              <https://www.rfc-editor.org/info/rfc6374>.\n   [RFC6390]  Clark,\
    \ A. and B. Claise, \"Guidelines for Considering New\n              Performance\
    \ Metric Development\", BCP 170, RFC 6390,\n              DOI 10.17487/RFC6390,\
    \ October 2011,\n              <https://www.rfc-editor.org/info/rfc6390>.\n  \
    \ [RFC6703]  Morton, A., Ramachandran, G., and G. Maguluri, \"Reporting\n    \
    \          IP Network Performance Metrics: Different Points of View\",\n     \
    \         RFC 6703, DOI 10.17487/RFC6703, August 2012,\n              <https://www.rfc-editor.org/info/rfc6703>.\n\
    \   [RFC7011]  Claise, B., Ed., Trammell, B., Ed., and P. Aitken,\n          \
    \    \"Specification of the IP Flow Information Export (IPFIX)\n             \
    \ Protocol for the Exchange of Flow Information\", STD 77,\n              RFC\
    \ 7011, DOI 10.17487/RFC7011, September 2013,\n              <https://www.rfc-editor.org/info/rfc7011>.\n\
    \   [RFC7276]  Mizrahi, T., Sprecher, N., Bellagamba, E., and Y.\n           \
    \   Weingarten, \"An Overview of Operations, Administration,\n              and\
    \ Maintenance (OAM) Tools\", RFC 7276,\n              DOI 10.17487/RFC7276, June\
    \ 2014,\n              <https://www.rfc-editor.org/info/rfc7276>.\n   [RFC7384]\
    \  Mizrahi, T., \"Security Requirements of Time Protocols in\n              Packet\
    \ Switched Networks\", RFC 7384, DOI 10.17487/RFC7384,\n              October\
    \ 2014, <https://www.rfc-editor.org/info/rfc7384>.\n   [RFC7799]  Morton, A.,\
    \ \"Active and Passive Metrics and Methods (with\n              Hybrid Types In-Between)\"\
    , RFC 7799, DOI 10.17487/RFC7799,\n              May 2016, <https://www.rfc-editor.org/info/rfc7799>.\n\
    \   [RFC8296]  Wijnands, IJ., Ed., Rosen, E., Ed., Dolganow, A.,\n           \
    \   Tantsura, J., Aldrin, S., and I. Meilik, \"Encapsulation\n              for\
    \ Bit Index Explicit Replication (BIER) in MPLS and Non-\n              MPLS Networks\"\
    , RFC 8296, DOI 10.17487/RFC8296, January\n              2018, <https://www.rfc-editor.org/info/rfc8296>.\n\
    \   [SFL-FRAMEWORK]\n              Bryant, S., Chen, M., Li, Z., Swallow, G.,\
    \ Sivabalan, S.,\n              and G. Mirsky, \"Synonymous Flow Label Framework\"\
    , Work in\n              Progress, draft-ietf-mpls-sfl-framework-00, August 2017.\n\
    \   [SYN-FLOW-LABELS]\n              Bryant, S., Chen, M., Li, Z., Swallow, G.,\
    \ Sivabalan, S.,\n              Mirsky, G., and G. Fioccola, \"RFC6374 Synonymous\
    \ Flow\n              Labels\", Work in Progress, draft-ietf-mpls-rfc6374-sfl-01,\n\
    \              December 2017.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The previous IETF specifications describing this technique\
    \ were:\n   [IP-MULTICAST-PM] and [OPSAWG-P3M].\n   The authors would like to\
    \ thank Alberto Tempia Bonda, Domenico\n   Laforgia, Daniele Accetta, and Mario\
    \ Bianchetti for their\n   contribution to the definition and the implementation\
    \ of the method.\n   The authors would also thank Spencer Dawkins, Carlos Pignataro,\
    \ Brian\n   Haberman, and Eric Vyncke for their assistance and their detailed\
    \ and\n   precious reviews.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Giuseppe Fioccola (editor)\n   Telecom Italia\n   Via\
    \ Reiss Romoli, 274\n   Torino  10148\n   Italy\n   Email: giuseppe.fioccola@telecomitalia.it\n\
    \   Alessandro Capello\n   Telecom Italia\n   Via Reiss Romoli, 274\n   Torino\
    \  10148\n   Italy\n   Email: alessandro.capello@telecomitalia.it\n   Mauro Cociglio\n\
    \   Telecom Italia\n   Via Reiss Romoli, 274\n   Torino  10148\n   Italy\n   Email:\
    \ mauro.cociglio@telecomitalia.it\n   Luca Castaldelli\n   Telecom Italia\n  \
    \ Via Reiss Romoli, 274\n   Torino  10148\n   Italy\n   Email: luca.castaldelli@telecomitalia.it\n\
    \   Mach(Guoyi) Chen\n   Huawei Technologies\n   Email: mach.chen@huawei.com\n\
    \   Lianshu Zheng\n   Huawei Technologies\n   Email: vero.zheng@huawei.com\n \
    \  Greg Mirsky\n   ZTE\n   United States of America\n   Email: gregimirsky@gmail.com\n\
    \   Tal Mizrahi\n   Marvell\n   6 Hamada St.\n   Yokneam\n   Israel\n   Email:\
    \ talmi@marvell.com\n"
