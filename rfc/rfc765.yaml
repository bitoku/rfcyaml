- title: __initial_text__
  contents:
  - ''
- title: IEN 149                                                        J. Postel
  contents:
  - "IEN 149                                                        J. Postel\n  \
    \                       FILE TRANSFER PROTOCOL\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   The objectives of FTP are 1) to promote sharing of files (computer\n\
    \   programs and/or data), 2) to encourage indirect or implicit (via\n   programs)\
    \ use of remote computers, 3) to shield a user from\n   variations in file storage\
    \ systems among Hosts, and 4) to transfer\n   data reliably and efficiently. \
    \ FTP, though usable directly by a user\n   at a terminal, is designed mainly\
    \ for use by programs.\n   The attempt in this specification is to satisfy the\
    \ diverse needs of\n   users of maxi-Hosts, mini-Hosts, and TIPs, with a simple,\
    \ and easily\n   implemented protocol design.\n   This paper assumes knowledge\
    \ of the following protocols described in\n   the ARPA Internet Protocol Handbook.\n\
    \      The Transmission Control Protocol\n      The TELNET Protocol\n"
- title: DISCUSSION
  contents:
  - "DISCUSSION\n   In this section, the terminology and the FTP model are discussed.\n\
    \   The terms defined in this section are only those that have special\n   significance\
    \ in FTP.  Some of the terminology is very specific to the\n   FTP model; some\
    \ readers may wish to turn to the section on the FTP\n   model while reviewing\
    \ the terminology.\n   TERMINOLOGY\n      ASCII\n         The ASCII character\
    \ set as defined in the ARPA Internet\n         Protocol Handbook.  In FTP, ASCII\
    \ characters are defined to be\n         the lower half of an eight-bit code set\
    \ (i.e., the most\n         significant bit is zero).\n      access controls\n\
    \         Access controls define users' access privileges to the use of a\n  \
    \       system, and to the files in that system.  Access controls are\n      \
    \   necessary to prevent unauthorized or accidental use of files.\n         It\
    \ is the prerogative of a server-FTP process to invoke access\n         controls.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    byte size\n         There are two byte sizes of interest in FTP:  the logical\
    \ byte\n         size of the file, and the transfer byte size used for the\n \
    \        transmission of the data.  The transfer byte size is always 8\n     \
    \    bits.  The transfer byte size is not necessarily the byte size\n        \
    \ in which data is to be stored in a system, nor the logical byte\n         size\
    \ for interpretation of the structure of the data.\n      data connection\n  \
    \       A simplex connection over which data is transferred, in a\n         specified\
    \ mode and type. The data transferred may be a part of\n         a file, an entire\
    \ file or a number of files.  The path may be\n         between a server-DTP and\
    \ a user-DTP, or between two\n         server-DTPs.\n      data port\n       \
    \  The passive data transfer process \"listens\" on the data port\n         for\
    \ a connection from the active transfer process in order to\n         open the\
    \ data connection.\n      EOF\n         The end-of-file condition that defines\
    \ the end of a file being\n         transferred.\n      EOR\n         The end-of-record\
    \ condition that defines the end of a record\n         being transferred.\n  \
    \    error recovery\n         A procedure that allows a user to recover from certain\
    \ errors\n         such as failure of either Host system or transfer process.\
    \  In\n         FTP, error recovery may involve restarting a file transfer at\
    \ a\n         given checkpoint.\n      FTP commands\n         A set of commands\
    \ that comprise the control information flowing\n         from the user-FTP to\
    \ the server-FTP process.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    file\n         An ordered set of computer data (including programs), of\n\
    \         arbitrary length, uniquely identified by a pathname.\n      mode\n \
    \        The mode in which data is to be transferred via the data\n         connection.\
    \ The mode defines the data format during transfer\n         including EOR and\
    \ EOF.  The transfer modes defined in FTP are\n         described in the Section\
    \ on Transmission Modes.\n      NVT\n         The Network Virtual Terminal as\
    \ defined in the TELNET Protocol.\n      NVFS\n         The Network Virtual File\
    \ System.  A concept which defines a\n         standard network file system with\
    \ standard commands and\n         pathname conventions.  FTP only partially implements\
    \ the NVFS\n         concept at this time.\n      page\n         A file may be\
    \ structured as a set of independent parts called\n         pages.  FTP supports\
    \ the transmission of discontinuous files as\n         independent indexed pages.\n\
    \      pathname\n         Pathname is defined to be the character string which\
    \ must be\n         input to a file system by a user in order to identify a file.\n\
    \         Pathname normally contains device and/or directory names, and\n    \
    \     file name specification.  FTP does not yet specify a standard\n        \
    \ pathname convention.  Each user must follow the file naming\n         conventions\
    \ of the file systems involved in the transfer.\n      record\n         A sequential\
    \ file may be structured as a number of contiguous\n         parts called records.\
    \  Record structures are supported by FTP\n         but a file need not have record\
    \ structure.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    reply\n         A reply is an acknowledgment (positive or negative) sent\
    \ from\n         server to user via the TELNET connections in response to FTP\n\
    \         commands.  The general form of a reply is a completion code\n      \
    \   (including error codes) followed by a text string.  The codes\n         are\
    \ for use by programs and the text is usually intended for\n         human users.\n\
    \      server-DTP\n         The data transfer process, in its normal \"active\"\
    \ state,\n         establishes the data connection with the \"listening\" data\
    \ port,\n         sets up parameters for transfer and storage, and transfers data\n\
    \         on command from its PI.  The DTP can be placed in a \"passive\"\n  \
    \       state to listen for, rather than initiate a, connection on the\n     \
    \    data port.\n      server-FTP process\n         A process or set of processes\
    \ which perform the function of\n         file transfer in cooperation with a\
    \ user-FTP process and,\n         possibly, another server.  The functions consist\
    \ of a protocol\n         interpreter (PI) and a data transfer process (DTP).\n\
    \      server-PI\n         The protocol interpreter \"listens\" on Port L for\
    \ a connection\n         from a user-PI and establishes a TELNET communication\n\
    \         connection.  It receives standard FTP commands from the\n         user-PI,\
    \ sends replies, and governs the server-DTP.\n      TELNET connections\n     \
    \    The full-duplex communication path between a user-PI and a\n         server-PI,\
    \ operating according to the TELNET Protocol.\n      type\n         The data representation\
    \ type used for data transfer and\n         storage.  Type implies certain transformations\
    \ between the time\n         of data storage and data transfer.  The representation\
    \ types\n         defined in FTP are described in the Section on Establishing\n\
    \         Data Connections.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    user\n         A human being or a process on behalf of a human being wishing\n\
    \         to obtain file transfer service.  The human user may interact\n    \
    \     directly with a server-FTP process, but use of a user-FTP\n         process\
    \ is preferred since the protocol design is weighted\n         towards automata.\n\
    \      user-DTP\n         The data transfer process \"listens\" on the data port\
    \ for a\n         connection from a server-FTP process.  If two servers are\n\
    \         transferring data between them, the user-DTP is inactive.\n      user-FTP\
    \ process\n         A set of functions including a protocol interpreter, a data\n\
    \         transfer process and a user interface which together perform\n     \
    \    the function of file transfer in cooperation with one or more\n         server-FTP\
    \ processes.  The user interface allows a local\n         language to be used\
    \ in the command-reply dialogue with the\n         user.\n      user-PI\n    \
    \     The protocol interpreter initiates the TELNET connection from\n        \
    \ its port U to the server-FTP process, initiates FTP commands,\n         and\
    \ governs the user-DTP if that process is part of the file\n         transfer.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ THE FTP MODEL\n      With the above definitions in mind, the following model\
    \ (shown in\n      Figure 1) may be diagrammed for an FTP service.\n         \
    \                                   -------------\n                          \
    \                  |/---------\\|\n                                          \
    \  ||   User  ||    --------\n                                            ||Interface|<--->|\
    \ User |\n                                            |\\----:----/|    --------\n\
    \                  ----------                |     V     |\n                 \
    \ |/------\\|  FTP Commands  |/---------\\|\n                  ||Server|<---------------->|\
    \   User  ||\n                  ||  PI  ||   FTP Replies  ||    PI   ||\n    \
    \              |\\--:---/|                |\\----:----/|\n                  |\
    \   V    |                |     V     |\n      --------    |/------\\|      Data\
    \      |/---------\\|    --------\n      | File |<--->|Server|<---------------->|\
    \  User   |<--->| File |\n      |System|    || DTP  ||   Connection   ||   DTP\
    \   ||    |System|\n      --------    |\\------/|                |\\---------/|\
    \    --------\n                  ----------                -------------\n   \
    \               Server-FTP                   User-FTP\n      NOTES: 1. The data\
    \ connection may be used in either direction.\n             2. The data connection\
    \ need not exist all of the time.\n                      Figure 1  Model for FTP\
    \ Use\n      In the model described in Figure 1, the user-protocol interpreter\n\
    \      initiates the TELNET connection. At the initiation of the user,\n     \
    \ standard FTP commands are generated by the user-PI and transmitted\n      to\
    \ the server process via the TELNET connection.  (The user may\n      establish\
    \ a direct TELNET connection to the server-FTP, from a TIP\n      terminal for\
    \ example, and generate standard FTP commands himself,\n      bypassing the user-FTP\
    \ process.) Standard replies are sent from\n      the server-PI to the user-PI\
    \ over the TELNET connection in\n      response to the commands.\n      The FTP\
    \ commands specify the parameters for the data connection\n      (data port, transfer\
    \ mode, representation type, and structure) and\n      the nature of file system\
    \ operation (store, retrieve, append,\n      delete, etc.).  The user-DTP or its\
    \ designate should \"listen\" on\n      the specified data port, and the server\
    \ initiate the data\n      connection and data transfer in accordance with the\
    \ specified\n      parameters.  It should be noted that the data port need not\
    \ be in\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    the same Host that initiates the FTP commands via the TELNET\n      connection,\
    \ but the user or his user-FTP process must ensure a\n      \"listen\" on the\
    \ specified data port.  It should also be noted that\n      the data connection\
    \ may be used for simultaneous sending and\n      receiving.\n      In another\
    \ situation a user might wish to transfer files between\n      two Hosts, neither\
    \ of which is his local Host. He sets up TELNET\n      connections to the two\
    \ servers and then arranges for a data\n      connection between them.  In this\
    \ manner control information is\n      passed to the user-PI but data is transferred\
    \ between the server\n      data transfer processes.  Following is a model of\
    \ this\n      server-server interaction.\n                    TELNET     ------------\
    \    TELNET\n                    ---------->| User-FTP |<-----------\n       \
    \             |          | User-PI  |           |\n                    |     \
    \     |   \"C\"    |           |\n                    V          ------------\
    \           V\n            --------------                        --------------\n\
    \            | Server-FTP |   Data Connection      | Server-FTP |\n          \
    \  |    \"A\"     |<---------------------->|    \"B\"     |\n            --------------\
    \  Port (A)     Port (B) --------------\n                                 Figure\
    \ 2\n      The protocol requires that the TELNET connections be open while\n \
    \     data transfer is in progress.  It is the responsibility of the\n      user\
    \ to request the closing of the TELNET connections when\n      finished using\
    \ the FTP service, while it is the server who takes\n      the action.  The server\
    \ may abort data transfer if the TELNET\n      connections are closed without\
    \ command.\n"
- title: DATA TRANSFER FUNCTIONS
  contents:
  - "DATA TRANSFER FUNCTIONS\n   Files are transferred only via the data connection.\
    \  The TELNET\n   connection is used for the transfer of commands, which describe\
    \ the\n   functions to be performed, and the replies to these commands (see the\n\
    \   Section on FTP Replies).  Several commands are concerned with the\n   transfer\
    \ of data between Hosts.  These data transfer commands include\n   the MODE command\
    \ which specify how the bits of the data are to be\n   transmitted, and the STRUcture\
    \ and TYPE commands, which are used to\n   define the way in which the data are\
    \ to be represented. The\n   transmission and representation are basically independent\
    \ but\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ \"Stream\" transmission mode is dependent on the file structure\n   attribute\
    \ and if \"Compressed\" transmission mode is used the nature of\n   the filler\
    \ byte depends on the representation type.\n   DATA REPRESENTATION AND STORAGE\n\
    \      Data is transferred from a storage device in the sending Host to a\n  \
    \    storage device in the receiving Host.  Often it is necessary to\n      perform\
    \ certain transformations on the data because data storage\n      representations\
    \ in the two systems are different.  For example,\n      NVT-ASCII has different\
    \ data storage representations in different\n      systems.  PDP-10's generally\
    \ store NVT-ASCII as five 7-bit ASCII\n      characters, left-justified in a 36-bit\
    \ word. 360's store NVT-ASCII\n      as 8-bit EBCDIC codes. Multics stores NVT-ASCII\
    \ as four 9-bit\n      characters in a 36-bit word.  It may be desirable to convert\n\
    \      characters into the standard NVT-ASCII representation when\n      transmitting\
    \ text between dissimilar systems.  The sending and\n      receiving sites would\
    \ have to perform the necessary\n      transformations between the standard representation\
    \ and their\n      internal representations.\n      A different problem in representation\
    \ arises when transmitting\n      binary data (not character codes) between Host\
    \ systems with\n      different word lengths.  It is not always clear how the\
    \ sender\n      should send data, and the receiver store it.  For example, when\n\
    \      transmitting 32-bit bytes from a 32-bit word-length system to a\n     \
    \ 36-bit word-length system, it may be desirable (for reasons of\n      efficiency\
    \ and usefulness) to store the 32-bit bytes\n      right-justified in a 36-bit\
    \ word in the latter system.  In any\n      case, the user should have the option\
    \ of specifying data\n      representation and transformation functions.  It should\
    \ be noted\n      that FTP provides for very limited data type representations.\n\
    \      Transformations desired beyond this limited capability should be\n    \
    \  performed by the user directly.\n      Data representations are handled in\
    \ FTP by a user specifying a\n      representation type.  This type may implicitly\
    \ (as in ASCII or\n      EBCDIC) or explicitly (as in Local byte) define a byte\
    \ size for\n      interpretation which is referred to as the \"logical byte size.\"\
    \n      This has nothing to do with the byte size used for transmission\n    \
    \  over the data connection, called the \"transfer byte size\", and the\n    \
    \  two should not be confused.  For example, NVT-ASCII has a logical\n      byte\
    \ size of 8 bits.  If the type is Local byte, then the TYPE\n      command has\
    \ an obligatory second parameter specifying the logical\n      byte size.  The\
    \ transfer byte size is always 8 bits.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    The types ASCII and EBCDIC also take a second (optional)\n      parameter;\
    \ this is to indicate what kind of vertical format\n      control, if any, is\
    \ associated with a file.  The following data\n      representation types are\
    \ defined in FTP:\n         ASCII Format\n            This is the default type\
    \ and must be accepted by all FTP\n            implementations.  It is intended\
    \ primarily for the transfer\n            of text files, except when both Hosts\
    \ would find the EBCDIC\n            type more convenient.\n            The sender\
    \ converts the data from his internal character\n            representation to\
    \ the standard 8-bit NVT-ASCII\n            representation (see the TELNET specification).\
    \  The receiver\n            will convert the data from the standard form to his\
    \ own\n            internal form.\n            In accordance with the NVT standard,\
    \ the <CRLF> sequence\n            should be used, where necessary, to denote\
    \ the end of a line\n            of text.  (See the discussion of file structure\
    \ at the end\n            of the Section on Data Representation and Storage).\n\
    \            Using the standard NVT-ASCII representation means that data\n   \
    \         must be interpreted as 8-bit bytes.\n            The Format parameter\
    \ for ASCII and EBCDIC types is discussed\n            below.\n         EBCDIC\
    \ Format\n            This type is intended for efficient transfer between Hosts\n\
    \            which use EBCDIC for their internal character\n            representation.\n\
    \            For transmission the data are represented as 8-bit EBCDIC\n     \
    \       characters.  The character code is the only difference\n            between\
    \ the functional specifications of EBCDIC and ASCII\n            types.\n    \
    \        End-of-line (as opposed to end-of-record--see the discussion\n      \
    \      of structure) will probably be rarely used with EBCDIC type\n         \
    \   for purposes of denoting structure, but where it is\n            necessary\
    \ the <NL> character should be used.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    A character file may be transferred to a Host for one of three\n      purposes:\
    \ for printing, for storage and later retrieval, or for\n      processing.  If\
    \ a file is sent for printing, the receiving Host\n      must know how the vertical\
    \ format control is represented.  In the\n      second case, it must be possible\
    \ to store a file at a Host and\n      then retrieve it later in exactly the same\
    \ form.  Finally, it\n      ought to be possible to move a file from one Host\
    \ to another and\n      process the file at the second Host without undue trouble.\
    \  A\n      single ASCII or EBCDIC format does not satisfy all these\n      conditions\
    \ and so these types have a second parameter specifying\n      one of the following\
    \ three formats:\n         Non-print\n            This is the default format to\
    \ be used if the second (format)\n            parameter is omitted.  Non-print\
    \ format must be accepted by\n            all FTP implementations.\n         \
    \   The file need contain no vertical format information.  If it\n           \
    \ is passed to a printer process, this process may assume\n            standard\
    \ values for spacing and margins.\n            Normally, this format will be used\
    \ with files destined for\n            processing or just storage.\n         TELNET\
    \ Format Controls\n            The file contains ASCII/EBCDIC vertical format\
    \ controls\n            (i.e., <CR>, <LF>, <NL>, <VT>, <FF>) which the printer\n\
    \            process will interpret appropriately.  <CRLF>, in exactly\n     \
    \       this sequence, also denotes end-of-line.\n         Carriage Control (ASA)\n\
    \            The file contains ASA (FORTRAN) vertical format control\n       \
    \     characters.  (See RFC 740 Appendix C and Communications of\n           \
    \ the ACM, Vol. 7, No. 10, 606 (Oct. 1964)).  In a line or a\n            record,\
    \ formatted according to the ASA Standard, the first\n            character is\
    \ not to be printed.  Instead it should be used\n            to determine the\
    \ vertical movement of the paper which should\n            take place before the\
    \ rest of the record is printed.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \          The ASA Standard specifies the following control characters:\n    \
    \           Character     Vertical Spacing\n               blank         Move\
    \ paper up one line\n               0             Move paper up two lines\n  \
    \             1             Move paper to top of next page\n               + \
    \            No movement, i.e., overprint\n            Clearly there must be some\
    \ way for a printer process to\n            distinguish the end of the structural\
    \ entity.  If a file has\n            record structure (see below) this is no\
    \ problem; records\n            will be explicitly marked during transfer and\
    \ storage.  If\n            the file has no record structure, the <CRLF> end-of-line\n\
    \            sequence is used to separate printing lines, but these\n        \
    \    format effectors are overridden by the ASA controls.\n         Image\n  \
    \          The data are sent as contiguous bits which, for transfer,\n       \
    \     are packed into the 8-bit transfer bytes.  The receiving\n            site\
    \ must store the data as contiguous bits.  The structure\n            of the storage\
    \ system might necessitate the padding of the\n            file (or of each record,\
    \ for a record-structured file) to\n            some convenient boundary (byte,\
    \ word or block).  This\n            padding, which must be all zeros, may occur\
    \ only at the end\n            of the file (or at the end of each record) and\
    \ there must be\n            a way of identifying the padding bits so that they\
    \ may be\n            stripped off if the file is retrieved.  The padding\n  \
    \          transformation should be well publicized to enable a user to\n    \
    \        process a file at the storage site.\n            Image type is intended\
    \ for the efficient storage and\n            retrieval of files and for the transfer\
    \ of binary data.  It\n            is recommended that this type be accepted by\
    \ all FTP\n            implementations.\n         Local byte Byte size\n     \
    \       The data is transferred in logical bytes of the size\n            specified\
    \ by the obligatory second parameter, Byte size.\n            The value of Byte\
    \ size must be a decimal integer; there is\n            no default value.  The\
    \ logical byte size is not necessarily\n            the same as the transfer byte\
    \ size.  If there is a\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          difference in byte sizes, then the logical bytes should be\n      \
    \      packed contiguously, disregarding transfer byte boundaries\n          \
    \  and with any necessary padding at the end.\n            When the data reaches\
    \ the receiving Host it will be\n            transformed in a manner dependent\
    \ on the logical byte size\n            and the particular Host.  This transformation\
    \ must be\n            invertible (that is an identical file can be retrieved\
    \ if\n            the same parameters are used) and should be well publicized\n\
    \            by the FTP implementors.\n            For example, a user sending\
    \ 36-bit floating-point numbers to\n            a Host with a 32-bit word could\
    \ send his data as Local byte\n            with a logical byte size of 36.  The\
    \ receiving Host would\n            then be expected to store the logical bytes\
    \ so that they\n            could be easily manipulated; in this example putting\
    \ the\n            36-bit logical bytes into 64-bit double words should\n    \
    \        suffice.\n            Another example, a pair of hosts with a 36-bit\
    \ word size may\n            send data to one another in words by using TYPE L\
    \ 36.  The\n            data would be sent in the 8-bit transmission bytes packed\
    \ so\n            that 9 transmission bytes carried two host words.\n      A note\
    \ of caution about parameters:  a file must be stored and\n      retrieved with\
    \ the same parameters if the retrieved version is to\n      be identical to the\
    \ version originally transmitted.  Conversely,\n      FTP implementations must\
    \ return a file identical to the original\n      if the parameters used to store\
    \ and retrieve a file are the same.\n      In addition to different representation\
    \ types, FTP allows the\n      structure of a file to be specified.  Three file\
    \ structures are\n      defined in FTP:\n         file-structure, where there\
    \ is no internal structure and the\n                           file is considered\
    \ to be a continuous\n                           sequence of data bytes,\n   \
    \      record-structure, where the file is made up of sequential\n           \
    \                records,\n         and page-structure, where the file is made\
    \ up of independent\n                           indexed pages.\n      File-structure\
    \ is the default, to be assumed if the STRUcture\n      command has not been used\
    \ but both file and record structures must\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    be accepted for \"text\" files (i.e., files with TYPE ASCII or\n      EBCDIC)\
    \ by all FTP implementations.  The structure of a file will\n      affect both\
    \ the transfer mode of a file (see the Section on\n      Transmission Modes) and\
    \ the interpretation and storage of the\n      file.\n      The \"natural\" structure\
    \ of a file will depend on which Host stores\n      the file.  A source-code file\
    \ will usually be stored on an IBM 360\n      in fixed length records but on a\
    \ PDP-10 as a stream of characters\n      partitioned into lines, for example\
    \ by <CRLF>.  If the transfer of\n      files between such disparate sites is\
    \ to be useful, there must be\n      some way for one site to recognize the other's\
    \ assumptions about\n      the file.\n      With some sites being naturally file-oriented\
    \ and others naturally\n      record-oriented there may be problems if a file\
    \ with one structure\n      is sent to a Host oriented to the other.  If a text\
    \ file is sent\n      with record-structure to a Host which is file oriented,\
    \ then that\n      Host should apply an internal transformation to the file based\
    \ on\n      the record structure.  Obviously this transformation should be\n \
    \     useful but it must also be invertible so that an identical file\n      may\
    \ be retrieved using record structure.\n      In the case of a file being sent\
    \ with file-structure to a\n      record-oriented Host, there exists the question\
    \ of what criteria\n      the Host should use to divide the file into records\
    \ which can be\n      processed locally.  If this division is necessary the FTP\n\
    \      implementation should use the end-of-line sequence, <CRLF> for\n      ASCII,\
    \ or <NL> for EBCDIC text files, as the delimiter.  If an FTP\n      implementation\
    \ adopts this technique, it must be prepared to\n      reverse the transformation\
    \ if the file is retrieved with\n      file-structure.\n      Page Structure\n\
    \         To transmit files that are discontinuous FTP defines a page\n      \
    \   structure.  Files of this type are sometimes know as \"random\n         access\
    \ files\" or even as \"holey files\".  In these files there\n         is sometimes\
    \ other information associated with the file as a\n         whole (e.g., a file\
    \ descriptor), or with a section of the file\n         (e.g., page access controls),\
    \ or both.  In FTP, the sections of\n         the file are called pages.\n   \
    \      To provide for various page sizes and associated information\n        \
    \ each page is sent with a page header.  The page header has the\n         following\
    \ defined fields:\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          Header Length\n               The number of logical bytes in the page\
    \ header including\n               this byte.  The minimum header length is 4.\n\
    \            Page Index\n               The logical page number of this section\
    \ of the file.\n               This is not the transmission sequence number of\
    \ this\n               page, but the index used to identify this page of the\n\
    \               file.\n            Data Length\n               The number of logical\
    \ bytes in the page data.  The\n               minimum data length is 0.\n   \
    \         Page Type\n               The type of page this is.  The following page\
    \ types are\n               defined:\n                  0 = Last Page\n      \
    \               This is used to indicate the end of a paged\n                \
    \     structured transmission.  The header length must be\n                  \
    \   4, and the data length must be 0.\n                  1 = Simple Page\n   \
    \                  This is the normal type for simple paged files with\n     \
    \                no page level associated control information.  The\n        \
    \             header length must be 4.\n                  2 = Descriptor Page\n\
    \                     This type is used to transmit the descriptive\n        \
    \             information for the file as a whole.\n                  3 = Access\
    \ Controled Page\n                     This is type includes an additional header\
    \ field\n                     for paged files with page level access control\n\
    \                     information.  The header length must be 5.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \          Optional Fields\n               Further header fields may be used to\
    \ supply per page\n               control information, for example, per page access\n\
    \               control.\n         All fields are one logical byte in length.\
    \  The logical byte\n         size is specified by the TYPE command.\n   ESTABLISHING\
    \ DATA CONNECTIONS\n      The mechanics of transferring data consists of setting\
    \ up the data\n      connection to the appropriate ports and choosing the parameters\n\
    \      for transfer.  Both the user and the server-DTPs have a default\n     \
    \ data port.  The user-process default data port is the same as the\n      control\
    \ connection port, i.e., U.  The server-process default data\n      port is the\
    \ port adjacent to the control connection port, i.e.,\n      L-1.\n      The transfer\
    \ byte size is 8-bit bytes.  This byte size is relevant\n      only for the actual\
    \ transfer of the data; it has no bearing on\n      representation of the data\
    \ within a Host's file system.\n      The passive data transfer process (this\
    \ may be a user-DTP or a\n      second server-DTP) shall \"listen\" on the data\
    \ port prior to\n      sending a transfer request command.  The FTP request command\n\
    \      determines the direction of the data transfer.  The server, upon\n    \
    \  receiving the transfer request, will initiate the data connection\n      to\
    \ the port.  When the connection is established, the data\n      transfer begins\
    \ between DTP's, and the server-PI sends a\n      confirming reply to the user-PI.\n\
    \      It is possible for the user to specify an alternate data port by\n    \
    \  use of the PORT command.  He might want a file dumped on a TIP\n      line\
    \ printer or retrieved from a third party Host.  In the latter\n      case the\
    \ user-PI sets up TELNET connections with both server-PI's.\n      One server\
    \ is then told (by an FTP command) to \"listen\" for a\n      connection which\
    \ the other will initiate.  The user-PI sends one\n      server-PI a PORT command\
    \ indicating the data port of the other.\n      Finally both are sent the appropriate\
    \ transfer commands.  The\n      exact sequence of commands and replies sent between\
    \ the\n      user-controller and the servers is defined in the Section on FTP\n\
    \      Replies.\n      In general it is the server's responsibility to maintain\
    \ the data\n      connection--to initiate it and to close it.  The exception to\
    \ this\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    is when the user-DTP is sending the data in a transfer mode that\n      requires\
    \ the connection to be closed to indicate EOF.  The server\n      MUST close the\
    \ data connection under the following conditions:\n         1. The server has\
    \ completed sending data in a transfer mode\n            that requires a close\
    \ to indicate EOF.\n         2. The server receives an ABORT command from the\
    \ user.\n         3. The port specification is changed by a command from the\n\
    \            user.\n         4. The TELNET connection is closed legally or otherwise.\n\
    \         5. An irrecoverable error condition occurs.\n      Otherwise the close\
    \ is a server option, the exercise of which he\n      must indicate to the user-process\
    \ by an appropriate reply.\n   TRANSMISSION MODES\n      The next consideration\
    \ in transferring data is choosing the\n      appropriate transmission mode. \
    \ There are three modes: one which\n      formats the data and allows for restart\
    \ procedures; one which also\n      compresses the data for efficient transfer;\
    \ and one which passes\n      the data with little or no processing.  In this\
    \ last case the mode\n      interacts with the structure attribute to determine\
    \ the type of\n      processing.  In the compressed mode the representation type\n\
    \      determines the filler byte.\n      All data transfers must be completed\
    \ with an end-of-file (EOF)\n      which may be explicitly stated or implied by\
    \ the closing of the\n      data connection.  For files with record structure,\
    \ all the\n      end-of-record markers (EOR) are explicit, including the final\
    \ one.\n      For files transmitted in page structure a \"last-page\" page type\
    \ is\n      used.\n      NOTE:  In the rest of this section, byte means \"transfer\
    \ byte\"\n      except where explicitly stated otherwise.\n      For the purpose\
    \ of standardized transfer, the sending Host will\n      translate his internal\
    \ end of line or end of record denotation\n      into the representation prescribed\
    \ by the transfer mode and file\n      structure, and the receiving Host will\
    \ perform the inverse\n      translation to his internal denotation.  An IBM 360\
    \ record count\n      field may not be recognized at another Host, so the end\
    \ of record\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    information may be transferred as a two byte control code in\n      Stream\
    \ mode or as a flagged bit in a Block or Compressed mode\n      descriptor. End\
    \ of line in an ASCII or EBCDIC file with no record\n      structure should be\
    \ indicated by <CRLF> or <NL>, respectively.\n      Since these transformations\
    \ imply extra work for some systems,\n      identical systems transferring non-record\
    \ structured text files\n      might wish to use a binary representation and stream\
    \ mode for the\n      transfer.\n      The following transmission modes are defined\
    \ in FTP:\n         STREAM\n            The data is transmitted as a stream of\
    \ bytes.  There is no\n            restriction on the representation type used;\
    \ record\n            structures are allowed.\n            In a record structured\
    \ file EOR and EOF will each be\n            indicated by a two-byte control code.\
    \  The first byte of the\n            control code will be all ones, the escape\
    \ character.  The\n            second byte will have the low order bit on and\
    \ zeros\n            elsewhere for EOR and the second low order bit on for EOF;\n\
    \            that is, the byte will have value 1 for EOR and value 2 for\n   \
    \         EOF.  EOR and EOF may be indicated together on the last byte\n     \
    \       transmitted by turning both low order bits on, i.e., the\n           \
    \ value 3.  If a byte of all ones was intended to be sent as\n            data,\
    \ it should be repeated in the second byte of the\n            control code.\n\
    \            If the structure is file structure, the EOF is indicated by\n   \
    \         the sending Host closing the data connection and all bytes\n       \
    \     are data bytes.\n         BLOCK\n            The file is transmitted as\
    \ a series of data blocks preceded\n            by one or more header bytes. \
    \ The header bytes contain a\n            count field, and descriptor code.  The\
    \ count field indicates\n            the total length of the data block in bytes,\
    \ thus marking\n            the beginning of the next data block (there are no\
    \ filler\n            bits). The descriptor code defines:  last block in the file\n\
    \            (EOF) last block in the record (EOR), restart marker (see\n     \
    \       the Section on Error Recovery and Restart) or suspect data\n         \
    \   (i.e., the data being transferred is suspected of errors and\n           \
    \ is not reliable).  This last code is NOT intended for error\n            control\
    \ within FTP.  It is motivated by the desire of sites\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          exchanging certain types of data (e.g., seismic or weather\n      \
    \      data) to send and receive all the data despite local errors\n         \
    \   (such as \"magnetic tape read errors\"), but to indicate in\n            the\
    \ transmission that certain portions are suspect).  Record\n            structures\
    \ are allowed in this mode, and any representation\n            type may be used.\n\
    \            The header consists of the three bytes.  Of the 24 bits of\n    \
    \        header information, the 16 low order bits shall represent\n         \
    \   byte count, and the 8 high order bits shall represent\n            descriptor\
    \ codes as shown below.\n            Block Header\n               +----------------+----------------+----------------+\n\
    \               | Descriptor     |    Byte Count                   |\n       \
    \        |         8 bits |                      16 bits    |\n              \
    \ +----------------+----------------+----------------+\n            The descriptor\
    \ codes are indicated by bit flags in the\n            descriptor byte.  Four\
    \ codes have been assigned, where each\n            code number is the decimal\
    \ value of the corresponding bit in\n            the byte.\n               Code\
    \     Meaning\n                128     End of data block is EOR\n            \
    \     64     End of data block is EOF\n                 32     Suspected errors\
    \ in data block\n                 16     Data block is a restart marker\n    \
    \        With this encoding more than one descriptor coded condition\n       \
    \     may exist for a particular block.  As many bits as necessary\n         \
    \   may be flagged.\n            The restart marker is embedded in the data stream\
    \ as an\n            integral number of 8-bit bytes representing printable\n \
    \           characters in the language being used over the TELNET\n          \
    \  connection (e.g., default--NVT-ASCII).  <SP> (Space, in the\n            appropriate\
    \ language) must not be used WITHIN a restart\n            marker.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \          For example, to transmit a six-character marker, the\n            following\
    \ would be sent:\n               +--------+--------+--------+\n              \
    \ |Descrptr|  Byte count     |\n               |code= 16|             = 6 |\n\
    \               +--------+--------+--------+\n               +--------+--------+--------+\n\
    \               | Marker | Marker | Marker |\n               | 8 bits | 8 bits\
    \ | 8 bits |\n               +--------+--------+--------+\n               +--------+--------+--------+\n\
    \               | Marker | Marker | Marker |\n               | 8 bits | 8 bits\
    \ | 8 bits |\n               +--------+--------+--------+\n         COMPRESSED\n\
    \            There are three kinds of information to be sent:  regular\n     \
    \       data, sent in a byte string; compressed data, consisting of\n        \
    \    replications or filler; and control information, sent in a\n            two-byte\
    \ escape sequence.  If n>0 bytes (up to 127) of\n            regular data are\
    \ sent, these n bytes are preceded by a byte\n            with the left-most bit\
    \ set to 0 and the right-most 7 bits\n            containing the number n.\n \
    \           Byte string:\n                1       7                8         \
    \            8\n               +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+\n\
    \               |0|       n     | |    d(1)       | ... |      d(n)     |\n  \
    \             +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+\n    \
    \                                         ^             ^\n                  \
    \                           |---n bytes---|\n                                \
    \                 of data\n               String of n data bytes d(1),..., d(n)\n\
    \               Count n must be positive.\n            To compress a string of\
    \ n replications of the data byte d,\n            the following 2 bytes are sent:\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          Replicated Byte:\n                 2       6               8\n    \
    \           +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+\n               |1 0|     n  \
    \   | |       d       |\n               +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+\n\
    \            A string of n filler bytes can be compressed into a single\n    \
    \        byte, where the filler byte varies with the representation\n        \
    \    type.  If the type is ASCII or EBCDIC the filler byte is\n            <SP>\
    \ (Space, ASCII code 32., EBCDIC code 64).  If the type\n            is Image\
    \ or Local byte the filler is a zero byte.\n            Filler String:\n     \
    \            2       6\n               +-+-+-+-+-+-+-+-+\n               |1 1|\
    \     n     |\n               +-+-+-+-+-+-+-+-+\n            The escape sequence\
    \ is a double byte, the first of which is\n            the escape byte (all zeros)\
    \ and the second of which contains\n            descriptor codes as defined in\
    \ Block mode.  The descriptor\n            codes have the same meaning as in Block\
    \ mode and apply to\n            the succeeding string of bytes.\n           \
    \ Compressed mode is useful for obtaining increased bandwidth\n            on\
    \ very large network transmissions at a little extra CPU\n            cost.  It\
    \ can be most effectively used to reduce the size of\n            printer files\
    \ such as those generated by RJE Hosts.\n   ERROR RECOVERY AND RESTART\n     \
    \ There is no provision for detecting bits lost or scrambled in data\n      transfer;\
    \ this level of error control is handled by the TCP.\n      However, a restart\
    \ procedure is provided to protect users from\n      gross system failures (including\
    \ failures of a Host, an\n      FTP-process, or the underlying network).\n   \
    \   The restart procedure is defined only for the block and compressed\n     \
    \ modes of data transfer.  It requires the sender of data to insert\n      a special\
    \ marker code in the data stream with some marker\n      information.  The marker\
    \ information has meaning only to the\n      sender, but must consist of printable\
    \ characters in the default or\n      negotiated language of the TELNET connection\
    \ (ASCII or EBCDIC).\n      The marker could represent a bit-count, a record-count,\
    \ or any\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    other information by which a system may identify a data\n      checkpoint.\
    \  The receiver of data, if it implements the restart\n      procedure, would\
    \ then mark the corresponding position of this\n      marker in the receiving\
    \ system, and return this information to the\n      user.\n      In the event\
    \ of a system failure, the user can restart the data\n      transfer by identifying\
    \ the marker point with the FTP restart\n      procedure.  The following example\
    \ illustrates the use of the\n      restart procedure.\n      The sender of the\
    \ data inserts an appropriate marker block in the\n      data stream at a convenient\
    \ point.  The receiving Host marks the\n      corresponding data point in its\
    \ file system and conveys the last\n      known sender and receiver marker information\
    \ to the user, either\n      directly or over the TELNET connection in a 110 reply\
    \ (depending\n      on who is the sender).  In the event of a system failure,\
    \ the user\n      or controller process restarts the server at the last server\n\
    \      marker by sending a restart command with server's marker code as\n    \
    \  its argument.  The restart command is transmitted over the TELNET\n      connection\
    \ and is immediately followed by the command (such as\n      RETR, STOR or LIST)\
    \ which was being executed when the system\n      failure occurred.\n"
- title: FILE TRANSFER FUNCTIONS
  contents:
  - "FILE TRANSFER FUNCTIONS\n   The communication channel from the user-PI to the\
    \ server-PI is\n   established by a TCP connection from the user to a standard\
    \ server\n   port.  The user protocol interpreter is responsible for sending FTP\n\
    \   commands and interpreting the replies received; the server-PI\n   interprets\
    \ commands, sends replies and directs its DTP to set up the\n   data connection\
    \ and transfer the data.  If the second party to the\n   data transfer (the passive\
    \ transfer process) is the user-DTP then it\n   is governed through the internal\
    \ protocol of the user-FTP Host; if it\n   is a second server-DTP then it is governed\
    \ by its PI on command from\n   the user-PI.  The FTP replies are discussed in\
    \ the next section.  In\n   the description of a few of the commands in this section\
    \ it is\n   helpful to be explicit about the possible replies.\n   FTP COMMANDS\n\
    \      ACCESS CONTROL COMMANDS\n         The following commands specify access\
    \ control identifiers\n         (command codes are shown in parentheses).\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \       USER NAME (USER)\n            The argument field is a TELNET string identifying\
    \ the user.\n            The user identification is that which is required by\
    \ the\n            server for access to its file system.  This command will\n\
    \            normally be the first command transmitted by the user after\n   \
    \         the TELNET connections are made (some servers may require\n        \
    \    this).  Additional identification information in the form of\n          \
    \  a password and/or an account command may also be required by\n            some\
    \ servers.  Servers may allow a new USER command to be\n            entered at\
    \ any point in order to change the access control\n            and/or accounting\
    \ information.  This has the effect of\n            flushing any user, password,\
    \ and account information already\n            supplied and beginning the login\
    \ sequence again.  All\n            transfer parameters are unchanged and any\
    \ file transfer in\n            progress is completed under the old account.\n\
    \         PASSWORD (PASS)\n            The argument field is a TELNET string identifying\
    \ the user's\n            password.  This command must be immediately preceded\
    \ by the\n            user name command, and, for some sites, completes the user's\n\
    \            identification for access control.  Since password\n            information\
    \ is quite sensitive, it is desirable in general\n            to \"mask\" it or\
    \ suppress typeout.  It appears that the\n            server has no foolproof\
    \ way to achieve this.  It is\n            therefore the responsibility of the\
    \ user-FTP process to hide\n            the sensitive password information.\n\
    \         ACCOUNT (ACCT)\n            The argument field is a TELNET string identifying\
    \ the user's\n            account.  The command is not necessarily related to\
    \ the USER\n            command, as some sites may require an account for login\
    \ and\n            others only for specific access, such as storing files.  In\n\
    \            the latter case the command may arrive at any time.\n           \
    \ There are reply codes to differentiate these cases for the\n            automaton:\
    \ when account information is required for login,\n            the response to\
    \ a successful PASSword command is reply code\n            332.  On the other\
    \ hand, if account information is NOT\n            required for login, the reply\
    \ to a successful PASSword\n            command is 230; and if the account information\
    \ is needed for\n            a command issued later in the dialogue, the server\
    \ should\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \          return a 332 or 532 reply depending on whether he stores\n        \
    \    (pending receipt of the ACCounT command) or discards the\n            command,\
    \ respectively.\n         REINITIALIZE (REIN)\n            This command terminates\
    \ a USER, flushing all I/O and account\n            information, except to allow\
    \ any transfer in progress to be\n            completed.  All parameters are reset\
    \ to the default settings\n            and the TELNET connection is left open.\
    \  This is identical\n            to the state in which a user finds himself immediately\
    \ after\n            the TELNET connection is opened.  A USER command may be\n\
    \            expected to follow.\n         LOGOUT (QUIT)\n            This command\
    \ terminates a USER and if file transfer is not\n            in progress, the\
    \ server closes the TELNET connection.  If\n            file transfer is in progress,\
    \ the connection will remain\n            open for result response and the server\
    \ will then close it.\n            If the user-process is transferring files for\
    \ several USERs\n            but does not wish to close and then reopen connections\
    \ for\n            each, then the REIN command should be used instead of QUIT.\n\
    \            An unexpected close on the TELNET connection will cause the\n   \
    \         server to take the effective action of an abort (ABOR) and a\n     \
    \       logout (QUIT).\n      TRANSFER PARAMETER COMMANDS\n         All data transfer\
    \ parameters have default values, and the\n         commands specifying data transfer\
    \ parameters are required only\n         if the default parameter values are to\
    \ be changed.  The default\n         value is the last specified value, or if\
    \ no value has been\n         specified, the standard default value as stated\
    \ here.  This\n         implies that the server must \"remember\" the applicable\
    \ default\n         values.  The commands may be in any order except that they\
    \ must\n         precede the FTP service request.  The following commands\n  \
    \       specify data transfer parameters.\n         DATA PORT (PORT)\n       \
    \     The argument is a HOST-PORT specification for the data port\n          \
    \  to be used in data connection.  There defaults for both the\n            user\
    \ and server data ports, and under normal circumstances\n            this command\
    \ and its reply are not needed.  If this command\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          is used  the argument is the concatenation of a 32-bit\n          \
    \  internet host address and a 16-bit TCP port address.  This\n            address\
    \ information is broken into 8-bit fields and the\n            value of each field\
    \ is transmitted as a decimal number (in\n            character string representation).\
    \  The fields are separated\n            by commas.  A port command would be:\n\
    \               PORT h1,h2,h3,h4,p1,p2\n            where, h1 is the high order\
    \ 8 bits of the internet host\n            address.\n         PASSIVE (PASV)\n\
    \            This command requests the server-DTP to \"listen\" on a data\n  \
    \          port (which is not its default data port) and to wait for a\n     \
    \       connection rather than initiate one upon receipt of a\n            transfer\
    \ command.  The response to this command includes the\n            host and port\
    \ address this server is listening on.\n         REPRESENTATION TYPE (TYPE)\n\
    \            The argument specifies the representation type as described\n   \
    \         in the Section on Data Representation and Storage.  Several\n      \
    \      types take a second parameter.  The first parameter is\n            denoted\
    \ by a single TELNET character, as is the second\n            Format parameter\
    \ for ASCII and EBCDIC; the second parameter\n            for local byte is a\
    \ decimal integer to indicate Bytesize.\n            The parameters are separated\
    \ by a <SP> (Space, ASCII code\n            32.).\n            The following codes\
    \ are assigned for type:\n                         \\    /\n               A -\
    \ ASCII |    | N - Non-print\n                         |-><-| T - TELNET format\
    \ effectors\n               E - EBCDIC|    | C - Carriage Control (ASA)\n    \
    \                     /    \\\n               I - Image\n               L <byte\
    \ size> - Local byte Byte size\n            The default representation type is\
    \ ASCII Non-print.  If the\n            Format parameter is changed, and later\
    \ just the first\n            argument is changed, Format then returns to the\
    \ Non-print\n            default.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \       FILE STRUCTURE (STRU)\n            The argument is a single TELNET character\
    \ code specifying\n            file structure described in the Section on Data\n\
    \            Representation and Storage.\n            The following codes are\
    \ assigned for structure:\n               F - File (no record structure)\n   \
    \            R - Record structure\n               P - Page structure\n       \
    \     The default structure is File.\n         TRANSFER MODE (MODE)\n        \
    \    The argument is a single TELNET character code specifying\n            the\
    \ data transfer modes described in the Section on\n            Transmission Modes.\n\
    \            The following codes are assigned for transfer modes:\n          \
    \     S - Stream\n               B - Block\n               C - Compressed\n  \
    \          The default transfer mode is Stream.\n      FTP SERVICE COMMANDS\n\
    \         The FTP service commands define the file transfer or the file\n    \
    \     system function requested by the user.  The argument of an FTP\n       \
    \  service command will normally be a pathname.  The syntax of\n         pathnames\
    \ must conform to server site conventions (with\n         standard defaults applicable),\
    \ and the language conventions of\n         the TELNET connection.  The suggested\
    \ default handling is to\n         use the last specified device, directory or\
    \ file name, or the\n         standard default defined for local users.  The commands\
    \ may be\n         in any order except that a \"rename from\" command must be\n\
    \         followed by a \"rename to\" command and the restart command must\n \
    \        be followed by the interrupted service command.  The data, when\n   \
    \      transferred in response to FTP service commands, shall always\n       \
    \  be sent over the data connection, except for certain\n         informative\
    \ replies.  The following commands specify FTP\n         service requests:\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \       RETRIEVE (RETR)\n            This command causes the server-DTP to transfer\
    \ a copy of the\n            file, specified in the pathname, to the server- or\
    \ user-DTP\n            at the other end of the data connection.  The status and\n\
    \            contents of the file at the server site shall be unaffected.\n  \
    \       STORE (STOR)\n            This command causes the server-DTP to accept\
    \ the data\n            transferred via the data connection and to store the data\
    \ as\n            a file at the server site.  If the file specified in the\n \
    \           pathname exists at the server site then its contents shall\n     \
    \       be replaced by the data being transferred.  A new file is\n          \
    \  created at the server site if the file specified in the\n            pathname\
    \ does not already exist.\n         APPEND (with create) (APPE)\n            This\
    \ command causes the server-DTP to accept the data\n            transferred via\
    \ the data connection and to store the data in\n            a file at the server\
    \ site.  If the file specified in the\n            pathname exists at the server\
    \ site, then the data shall be\n            appended to that file; otherwise the\
    \ file specified in the\n            pathname shall be created at the server site.\n\
    \         MAIL FILE (MLFL)\n            The intent of this command is to enable\
    \ a user at the user\n            site to mail data (in form of a file) to another\
    \ user at the\n            server site.  It should be noted that the files to\
    \ be mailed\n            are transmitted via the data connection in ASCII or EBCDIC\n\
    \            type.  (It is the user's responsibility to ensure that the\n    \
    \        type is correct.)  These files should be inserted into the\n        \
    \    destination user's mailbox by the server in accordance with\n           \
    \ serving Host mail conventions.  The mail may be marked as\n            sent\
    \ from the particular user HOST and the user specified by\n            the 'USER'\
    \ command.  The argument field may contain a Host\n            system ident, or\
    \ it may be empty.  If the argument field is\n            empty or blank (one\
    \ or more spaces), then the mail is\n            destined for a printer or other\
    \ designated place for general\n            delivery site mail.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \       MAIL (MAIL)\n            This command allows a user to send mail that\
    \ is NOT in a\n            file over the TELNET connection.  The argument field\
    \ may\n            contain system ident, or it may be empty.  The ident is\n \
    \           defined as above for the MLFL command.  After the 'MAIL'\n       \
    \     command is received, the server is to treat the following\n            lines\
    \ as text of the mail sent by the user.  The mail text\n            is to be terminated\
    \ by a line containing only a single\n            period, that is, the character\
    \ sequence \"CRLF.CRLF\".  It is\n            suggested that a modest volume of\
    \ mail service should be\n            free; i.e., it may be entered before a USER\
    \ command.\n         MAIL SEND TO TERMINAL (MSND)\n            This command is\
    \ like the MAIL command, except that the data\n            is displayed on the\
    \ addressed user's terminal, if such\n            access is currently allowed,\
    \ otherwise an error is returned.\n         MAIL SEND TO TERMINAL OR MAILBOX (MSOM)\n\
    \            This command is like the MAIL command, except that the data\n   \
    \         is displayed on the addressed user's terminal, if such\n           \
    \ access is currently allowed, otherwise the data is placed in\n            the\
    \ user's mailbox.\n         MAIL SEND TO TERMINAL AND MAILBOX (MSAM)\n       \
    \     This command is like the MAIL command, except that the data\n          \
    \  is displayed on the addressed user's terminal, if such\n            access\
    \ is currently allowed, and, in any case, the data is\n            placed in the\
    \ user's mailbox.\n         MAIL RECIPIENT SCHEME QUESTION (MRSQ)\n          \
    \  This FTP command is used to select a scheme for the\n            transmission\
    \ of mail to several users at the same host.  The\n            schemes are to\
    \ list the recipients first, or to send the\n            mail first.\n       \
    \  MAIL RECIPIENT (MRCP)\n            This command is used to identify the individual\
    \ recipients\n            of the mail in the transmission of mail for multiple\
    \ users\n            at one host.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \       ALLOCATE (ALLO)\n            This command may be required by some servers\
    \ to reserve\n            sufficient storage to accommodate the new file to be\n\
    \            transferred.  The argument shall be a decimal integer\n         \
    \   representing the number of bytes (using the logical byte\n            size)\
    \ of storage to be reserved for the file.  For files\n            sent with record\
    \ or page structure a maximum record or page\n            size (in logical bytes)\
    \ might also be necessary; this is\n            indicated by a decimal integer\
    \ in a second argument field of\n            the command.  This second argument\
    \ is optional, but when\n            present should be separated from the first\
    \ by the three\n            TELNET characters <SP> R <SP>.  This command shall\
    \ be\n            followed by a STORe or APPEnd command.  The ALLO command\n \
    \           should be treated as a NOOP (no operation) by those servers\n    \
    \        which do not require that the maximum size of the file be\n         \
    \   declared beforehand, and those servers interested in only\n            the\
    \ maximum record or page size should accept a dummy value\n            in the\
    \ first argument and ignore it.\n         RESTART (REST)\n            The argument\
    \ field represents the server marker at which\n            file transfer is to\
    \ be restarted.  This command does not\n            cause file transfer but \"\
    spaces\" over the file to the\n            specified data checkpoint.  This command\
    \ shall be\n            immediately followed by the appropriate FTP service command\n\
    \            which shall cause file transfer to resume.\n         RENAME FROM\
    \ (RNFR)\n            This command specifies the file which is to be renamed.\n\
    \            This command must be immediately followed by a \"rename to\"\n  \
    \          command specifying the new file pathname.\n         RENAME TO (RNTO)\n\
    \            This command specifies the new pathname of the file\n           \
    \ specified in the immediately preceding \"rename from\"\n            command.\
    \  Together the two commands cause a file to be\n            renamed.\n      \
    \   ABORT (ABOR)\n            This command tells the server to abort the previous\
    \ FTP\n            service command and any associated transfer of data.  The\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \          abort command may require \"special action\", as discussed in\n   \
    \         the Section on FTP Commands, to force recognition by the\n         \
    \   server.  No action is to be taken if the previous command\n            has\
    \ been completed (including data transfer).  The TELNET\n            connection\
    \ is not to be closed by the server, but the data\n            connection must\
    \ be closed.\n            There are two cases for the server upon receipt of this\n\
    \            command: (1) the FTP service command was already completed,\n   \
    \         or (2) the FTP service command is still in progress.\n             \
    \  In the first case, the server closes the data connection\n               (if\
    \ it is open) and responds with a 226 reply, indicating\n               that the\
    \ abort command was successfully processed.\n               In the second case,\
    \ the server aborts the FTP service in\n               progress and closes the\
    \ data connection, returning a 426\n               reply to indicate that the\
    \ service request terminated in\n               abnormally.  The server then sends\
    \ a 226 reply,\n               indicating that the abort command was successfully\n\
    \               processed.\n         DELETE (DELE)\n            This command causes\
    \ the file specified in the pathname to be\n            deleted at the server\
    \ site.  If an extra level of protection\n            is desired (such as the\
    \ query, \"DO you really wish to\n            delete?\"), it should be provided\
    \ by the user-FTP process.\n         CHANGE WORKING DIRECTORY (CWD)\n        \
    \    This command allows the user to work with a different\n            directory\
    \ or dataset for file storage or retrieval without\n            altering his login\
    \ or accounting information.  Transfer\n            parameters are similarly unchanged.\
    \  The argument is a\n            pathname specifying a directory or other system\
    \ dependent\n            file group designator.\n         LIST (LIST)\n      \
    \      This command causes a list to be sent from the server to the\n        \
    \    passive DTP.  If the pathname specifies a directory, the\n            server\
    \ should transfer a list of files in the specified\n            directory.  If\
    \ the pathname specifies a file then the server\n            should send current\
    \ information on the file.  A null\n            argument implies the user's current\
    \ working or default\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          directory.  The data transfer is over the data connection in\n    \
    \        type ASCII or type EBCDIC.  (The user must ensure that the\n        \
    \    TYPE is appropriately ASCII or EBCDIC).\n         NAME-LIST (NLST)\n    \
    \        This command causes a directory listing to be sent from\n           \
    \ server to user site.  The pathname should specify a\n            directory or\
    \ other system-specific file group descriptor; a\n            null argument implies\
    \ the current directory.  The server\n            will return a stream of names\
    \ of files and no other\n            information.  The data will be transferred\
    \ in ASCII or\n            EBCDIC type over the data connection as valid pathname\n\
    \            strings separated by <CRLF> or <NL>.  (Again the user must\n    \
    \        ensure that the TYPE is correct.)\n         SITE PARAMETERS (SITE)\n\
    \            This command is used by the server to provide services\n        \
    \    specific to his system that are essential to file transfer\n            but\
    \ not sufficiently universal to be included as commands in\n            the protocol.\
    \  The nature of these services and the\n            specification of their syntax\
    \ can be stated in a reply to\n            the HELP SITE command.\n         STATUS\
    \ (STAT)\n            This command shall cause a status response to be sent over\n\
    \            the TELNET connection in the form of a reply.  The command\n    \
    \        may be sent during a file transfer (along with the TELNET IP\n      \
    \      and Synch signals--see the Section on FTP Commands) in which\n        \
    \    case the server will respond with the status of the\n            operation\
    \ in progress, or it may be sent between file\n            transfers.  In the\
    \ latter case the command may have an\n            argument field.  If the argument\
    \ is a pathname, the command\n            is analogous to the \"list\" command\
    \ except that data shall be\n            transferred over the TELNET connection.\
    \  If a partial\n            pathname is given, the server may respond with a\
    \ list of\n            file names or attributes associated with that specification.\n\
    \            If no argument is given, the server should return general\n     \
    \       status information about the server FTP process.  This\n            should\
    \ include current values of all transfer parameters and\n            the status\
    \ of connections.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \       HELP (HELP)\n            This command shall cause the server to send helpful\n\
    \            information regarding its implementation status over the\n      \
    \      TELNET connection to the user.  The command may take an\n            argument\
    \ (e.g., any command name) and return more specific\n            information as\
    \ a response.  The reply is type 211 or 214.\n            It is suggested that\
    \ HELP be allowed before entering a USER\n            command. The server may\
    \ use this reply to specify\n            site-dependent parameters, e.g., in response\
    \ to HELP SITE.\n         NOOP (NOOP)\n            This command does not affect\
    \ any parameters or previously\n            entered commands. It specifies no\
    \ action other than that the\n            server send an OK reply.\n      The\
    \ File Transfer Protocol follows the specifications of the\n      TELNET protocol\
    \ for all communications over the TELNET connection.\n      Since, the language\
    \ used for TELNET communication may be a\n      negotiated option, all references\
    \ in the next two sections will be\n      to the \"TELNET language\" and the corresponding\
    \ \"TELNET end of line\n      code\".  Currently one may take these to mean NVT-ASCII\
    \ and <CRLF>.\n      No other specifications of the TELNET protocol will be cited.\n\
    \      FTP commands are \"TELNET strings\" terminated by the \"TELNET end of\n\
    \      line code\".  The command codes themselves are alphabetic\n      characters\
    \ terminated by the character <SP> (Space) if parameters\n      follow and TELNET-EOL\
    \ otherwise.  The command codes and the\n      semantics of commands are described\
    \ in this section; the detailed\n      syntax of commands is specified in the\
    \ Section on Commands, the\n      reply sequences are discussed in the Section\
    \ on Sequencing of\n      Commands and Replies, and scenarios illustrating the\
    \ use of\n      commands are provided in the Section on Typical FTP Scenarios.\n\
    \      FTP commands may be partitioned as those specifying access-control\n  \
    \    identifiers, data transfer parameters, or FTP service requests.\n      Certain\
    \ commands (such as ABOR, STAT, QUIT) may be sent over the\n      TELNET connection\
    \ while a data transfer is in progress.  Some\n      servers may not be able to\
    \ monitor the TELNET and data connections\n      simultaneously, in which case\
    \ some special action will be\n      necessary to get the server's attention.\
    \  The exact form of the\n      \"special action\" is undefined; but the following\
    \ ordered format is\n      tentatively recommended:\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \       1. User system inserts the TELNET \"Interrupt Process\" (IP)\n       \
    \     signal in the TELNET stream.\n         2. User system sends the TELNET \"\
    Synch\" signal\n         3. User system inserts the command (e.g., ABOR) in the\
    \ TELNET\n            stream.\n         4. Server PI,, after receiving \"IP\"\
    , scans the TELNET stream\n            for EXACTLY ONE FTP command.\n      (For\
    \ other servers this may not be necessary but the actions\n      listed above\
    \ should have no unusual effect.)\n   FTP REPLIES\n      Replies to File Transfer\
    \ Protocol commands are devised to ensure\n      the synchronization of requests\
    \ and actions in the process of file\n      transfer, and to guarantee that the\
    \ user process always knows the\n      state of the Server. Every command must\
    \ generate at least one\n      reply, although there may be more than one; in\
    \ the latter case,\n      the multiple replies must be easily distinguished. \
    \ In addition,\n      some commands occur in sequential groups, such as USER,\
    \ PASS and\n      ACCT, or RNFR and RNTO.  The replies show the existence of an\n\
    \      intermediate state if all preceding commands have been successful.\n  \
    \    A failure at any point in the sequence necessitates the repetition\n    \
    \  of the entire sequence from the beginning.\n         The details of the command-reply\
    \ sequence are made explicit in\n         a set of state diagrams below.\n   \
    \   An FTP reply consists of a three digit number (transmitted as\n      three\
    \ alphanumeric characters) followed by some text.  The number\n      is intended\
    \ for use by automata to determine what state to enter\n      next; the text is\
    \ intended for the human user.  It is intended\n      that the three digits contain\
    \ enough encoded information that the\n      user-process (the User-PI) will not\
    \ need to examine the text and\n      may either discard it or pass it on to the\
    \ user, as appropriate.\n      In particular, the text may be server-dependent,\
    \ so there are\n      likely to be varying texts for each reply code.\n      Formally,\
    \ a reply is defined to contain the 3-digit code, followed\n      by Space <SP>,\
    \ followed by one line of text (where some maximum\n      line length has been\
    \ specified), and terminated by the TELNET\n      end-of-line code.  There will\
    \ be cases, however, where the text is\n      longer than a single line.  In these\
    \ cases the complete text must\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    be bracketed so the User-process knows when it may stop reading\n      the\
    \ reply (i.e. stop processing input on the TELNET connection)\n      and go do\
    \ other things.  This requires a special format on the\n      first line to indicate\
    \ that more than one line is coming, and\n      another on the last line to designate\
    \ it as the last.  At least\n      one of these must contain the appropriate reply\
    \ code to indicate\n      the state of the transaction.  To satisfy all factions\
    \ it was\n      decided that both the first and last line codes should be the\n\
    \      same.\n         Thus the format for multi-line replies is that the first\
    \ line\n         will begin with the exact required reply code, followed\n   \
    \      immediately by a Hyphen, \"-\" (also known as Minus), followed by\n   \
    \      text.  The last line will begin with the same code, followed\n        \
    \ immediately by Space <SP>, optionally some text, and the TELNET\n         end-of-line\
    \ code.\n            For example:\n                                123-First line\n\
    \                                Second line\n                               \
    \   234 A line beginning with numbers\n                                123 The\
    \ last line\n         The user-process then simply needs to search for the second\n\
    \         occurrence of the same reply code, followed by <SP> (Space), at\n  \
    \       the beginning of a line, and ignore all intermediary lines.  If\n    \
    \     an intermediary line begins with a 3-digit number, the Server\n        \
    \ must pad the front to avoid confusion.\n            This scheme allows standard\
    \ system routines to be used for\n            reply information (such as for the\
    \ STAT reply), with\n            \"artificial\" first and last lines tacked on.\
    \  In the rare\n            cases where these routines are able to generate three\
    \ digits\n            and a Space at the beginning of any line, the beginning\
    \ of\n            each text line should be offset by some neutral text, like\n\
    \            Space.\n         This scheme assumes that multi-line replies may\
    \ not be nested.\n         We  have found that, in general, nesting of replies\
    \ will not\n         occur, except for random system messages (also called\n \
    \        spontaneous replies) which may interrupt another reply.  System\n   \
    \      messages (i.e. those not processed by the FTP server) will NOT\n      \
    \   carry reply codes and may occur anywhere in the command-reply\n         sequence.\
    \  They may be ignored by the User-process as they are\n         only information\
    \ for the human user.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    The three digits of the reply each have a special significance.\n      This\
    \ is intended to allow a range of very simple to very\n      sophisticated response\
    \ by the user-process.  The first digit\n      denotes whether the response is\
    \ good, bad or incomplete.\n      (Referring to the state diagram) an unsophisticated\
    \ user-process\n      will be able to determine its next action (proceed as planned,\n\
    \      redo, retrench, etc.) by simply examining this first digit.  A\n      user-process\
    \ that wants to know approximately what kind of error\n      occurred (e.g. file\
    \ system error, command syntax error) may\n      examine the second digit, reserving\
    \ the third digit for the finest\n      gradation of information (e.g. RNTO command\
    \ without a preceding\n      RNFR.)\n         There are five values for the first\
    \ digit of the reply code:\n            1yz   Positive Preliminary reply\n   \
    \            The requested action is being initiated; expect another\n       \
    \        reply before proceeding with a new command.  (The\n               user-process\
    \ sending another command before the\n               completion reply would be\
    \ in violation of protocol; but\n               server-FTP processes should queue\
    \ any commands that\n               arrive while a preceding command is in progress.)\
    \  This\n               type of reply can be used to indicate that the command\n\
    \               was accepted and the user-process may now pay attention\n    \
    \           to the data connections, for implementations where\n             \
    \  simultaneous monitoring is difficult.\n            2yz   Positive Completion\
    \ reply\n               The requested action has been successfully completed.\
    \  A\n               new request may be initiated.\n            3yz   Positive\
    \ Intermediate reply\n               The command has been accepted, but the requested\
    \ action\n               is being held in abeyance, pending receipt of further\n\
    \               information.  The user should send another command\n         \
    \      specifying this information.  This reply is used in\n               command\
    \ sequence groups.\n            4yz   Transient Negative Completion reply\n  \
    \             The command was not accepted and the requested action did\n    \
    \           not take place, but the error condition is temporary and\n       \
    \        the action may be requested again.  The user should\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \             return to the beginning of the command sequence, if any.\n     \
    \          It is difficult to assign a meaning to \"transient\",\n           \
    \    particularly when two distinct sites (Server and\n               User-processes)\
    \ have to agree on the interpretation.\n               Each reply in the 4yz category\
    \ might have a slightly\n               different time value, but the intent is\
    \ that the\n               user-process is encouraged to try again.  A rule of\
    \ thumb\n               in determining if a reply fits into the 4yz or the 5yz\n\
    \               (Permanent Negative) category is that replies are 4yz if\n   \
    \            the commands can be repeated without any change in\n            \
    \   command form or in properties of the User or Server (e.g.\n              \
    \ the command is spelled the same with the same arguments\n               used;\
    \ the user does not change his file access or user\n               name; the server\
    \ does not put up a new implementation.)\n            5yz   Permanent Negative\
    \ Completion reply\n               The command was not accepted and the requested\
    \ action did\n               not take place.  The User-process is discouraged\
    \ from\n               repeating the exact request (in the same sequence).  Even\n\
    \               some \"permanent\" error conditions can be corrected, so\n   \
    \            the human user may want to direct his User-process to\n         \
    \      reinitiate the command sequence by direct action at some\n            \
    \   point in the future (e.g. after the spelling has been\n               changed,\
    \ or the user has altered his directory status.)\n         The following function\
    \ groupings are encoded in the second\n         digit:\n            x0z   Syntax\
    \ - These replies refer to syntax errors,\n                  syntactically correct\
    \  commands that don't fit any\n                  functional category, unimplemented\
    \ or superfluous\n                  commands.\n            x1z   Information -\
    \  These are replies to requests for\n                  information, such as status\
    \ or help.\n            x2z   Connections - Replies referring to the TELNET and\
    \ data\n                  connections.\n            x3z   Authentication and accounting\
    \ - Replies for the login\n                  process and accounting procedures.\n\
    \            x4z   Unspecified as yet\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          x5z   File system - These replies indicate the status of the\n    \
    \              Server file system vis-a-vis the requested transfer or\n      \
    \            other file system action.\n         The third digit gives a finer\
    \ gradation of meaning in each of\n         the function categories, specified\
    \ by the second digit.  The\n         list of replies below will illustrate this.\
    \  Note that the text\n         associated with each reply is recommended, rather\
    \ than\n         mandatory, and may even change according to the command with\n\
    \         which it is associated.  The reply codes, on the other hand,\n     \
    \    must strictly follow the specifications in the last section;\n         that\
    \ is, Server implementations should not invent new codes for\n         situations\
    \ that are only slightly different from the ones\n         described here, but\
    \ rather should adapt codes already defined.\n            A command such as TYPE\
    \ or ALLO whose successful execution\n            does not offer the user-process\
    \ any new information will\n            cause a 200 reply to be returned.  If\
    \ the command is not\n            implemented by a particular Server-FTP process\
    \ because it\n            has no relevance to that computer system, for example\
    \ ALLO\n            at a TOPS20 site, a Positive Completion reply is still\n \
    \           desired so that the simple User-process knows it can proceed\n   \
    \         with its course of action.  A 202 reply is used in this case\n     \
    \       with, for example, the reply text:  \"No storage allocation\n        \
    \    necessary.\"  If, on the other hand, the command requests a\n           \
    \ non-site-specific action and is unimplemented, the response\n            is\
    \ 502.  A refinement of that is the 504 reply for a command\n            that\
    \ IS implemented, but that requests an unimplemented\n            parameter.\n\
    \      Reply Codes by Function Groups\n         200 Command okay\n         500\
    \ Syntax error, command unrecognized\n            [This may include errors such\
    \ as command line too long.]\n         501 Syntax error in parameters or arguments\n\
    \         202 Command not implemented, superfluous at this site.\n         502\
    \ Command not implemented\n         503 Bad sequence of commands\n         504\
    \ Command not implemented for that parameter\n         110 Restart marker reply.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \          In this case the text is exact and not left to the\n            particular\
    \ implementation; it must read:\n                 MARK yyyy = mmmm\n         \
    \   where yyyy is User-process data stream marker, and mmmm\n            server's\
    \ equivalent marker.  (note the spaces between\n            markers and \"=\"\
    .)\n         119 Terminal not available, will try mailbox.\n         211 System\
    \ status, or system help reply\n         212 Directory status\n         213 File\
    \ status\n         214 Help message\n            (on how to use the server or\
    \ the meaning of a particular\n            non-standard command.  This reply is\
    \ useful only to the\n            human user.)\n         215 <scheme> is the preferred\
    \ scheme.\n         120 Service ready in nnn minutes\n         220 Service ready\
    \ for new user\n         221 Service closing TELNET connection\n            (logged\
    \ out if appropriate)\n         421 Service not available, closing TELNET connection.\n\
    \            This may be a reply to any command if the service knows it\n    \
    \        must shut down.]\n         125 Data connection already open; transfer\
    \ starting\n         225 Data connection open; no transfer in progress\n     \
    \    425 Can't open data connection\n         226 Closing data connection;\n \
    \           requested file action successful (for example, file transfer\n   \
    \         or file abort.)\n         426 Connection closed; transfer aborted.\n\
    \         227 Entering Passive Mode.  h1,h2,h3,h4,p1,p2\n         230 User logged\
    \ in, proceed\n         530 Not logged in\n         331 User name okay, need password\n\
    \         332 Need account for login\n         532 Need account for storing files\n\
    \         150 File status okay; about to open data connection.\n         151 User\
    \ not local; Will forward to <user>@<host>.\n         152 User Unknown; Mail will\
    \ be forwarded by the operator.\n         250 Requested file action okay, completed.\n\
    \         350 Requested file action pending further information\n         450\
    \ Requested file action not taken:\n            file unavailable (e.g. file busy)\n\
    \         550 Requested action not taken:\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          file unavailable (e.g. file not found, no access)\n         451 Requested\
    \ action aborted: local error in processing\n         551 Requested action aborted:\
    \ page type unknown\n         452 Requested action not taken:\n            insufficient\
    \ storage space in system\n         552 Requested file action aborted:\n     \
    \       exceeded storage allocation (for current directory or\n            dataset)\n\
    \         553 Requested action not taken:\n            file name not allowed\n\
    \         354 Start mail input; end with <CR><LF>.<CR><LF>\n      Numeric Order\
    \ List of Reply Codes\n         110 Restart marker reply.\n            In this\
    \ case the text is exact and not left to the\n            particular implementation;\
    \ it must read:\n                 MARK yyyy = mmmm\n            where yyyy is\
    \ User-process data stream marker, and mmmm\n            server's equivalent marker.\
    \  (note the spaces between\n            markers and \"=\".)\n         119 Terminal\
    \ not available, will try mailbox.\n         120 Service ready in nnn minutes\n\
    \         125 Data connection already open; transfer starting\n         150 File\
    \ status okay; about to open data connection.\n         151 User not local; Will\
    \ forward to <user>@<host>.\n         152 User Unknown; Mail will be forwarded\
    \ by the operator.\n         200 Command okay\n         202 Command not implemented,\
    \ superfluous at this site.\n         211 System status, or system help reply\n\
    \         212 Directory status\n         213 File status\n         214 Help message\n\
    \            (on how to use the server or the meaning of a particular\n      \
    \      non-standard command.  This reply is useful only to the\n            human\
    \ user.)\n         215 <scheme> is the preferred scheme.\n         220 Service\
    \ ready for new user\n         221 Service closing TELNET connection\n       \
    \     (logged out if appropriate)\n         225 Data connection open; no transfer\
    \ in progress\n         226 Closing data connection;\n            requested file\
    \ action successful (for example, file transfer\n            or file abort.)\n\
    \         227 Entering Passive Mode.  h1,h2,h3,h4,p1,p2\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \       230 User logged in, proceed\n         250 Requested file action okay,\
    \ completed.\n         331 User name okay, need password\n         332 Need account\
    \ for login\n         350 Requested file action pending further information\n\
    \         354 Start mail input; end with <CR><LF>.<CR><LF>\n         421 Service\
    \ not available, closing TELNET connection.\n            This may be a reply to\
    \ any command if the service knows it\n            must shut down.]\n        \
    \ 425 Can't open data connection\n         426 Connection closed; transfer aborted.\n\
    \         450 Requested file action not taken:\n            file unavailable (e.g.\
    \ file busy)\n         451 Requested action aborted: local error in processing\n\
    \         452 Requested action not taken:\n            insufficient storage space\
    \ in system\n         500 Syntax error, command unrecognized\n            [This\
    \ may include errors such as command line too long.]\n         501 Syntax error\
    \ in parameters or arguments\n         502 Command not implemented\n         503\
    \ Bad sequence of commands\n         504 Command not implemented for that parameter\n\
    \         530 Not logged in\n         532 Need account for storing files\n   \
    \      550 Requested action not taken:\n            file unavailable (e.g. file\
    \ not found, no access)\n         551 Requested action aborted: page type unknown\n\
    \         552 Requested file action aborted:\n            exceeded storage allocation\
    \ (for current directory or\n            dataset)\n         553 Requested action\
    \ not taken:\n            file name not allowed\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - 'File Transfer Protocol                                           RFC 765

    '
- title: DECLARATIVE SPECIFICATIONS
  contents:
  - "DECLARATIVE SPECIFICATIONS\n   MINIMUM IMPLEMENTATION\n      In order to make\
    \ FTP workable without needless error messages, the\n      following minimum implementation\
    \ is required for all servers:\n         TYPE - ASCII Non-print\n         MODE\
    \ - Stream\n         STRUCTURE - File, Record\n         COMMANDS - USER, QUIT,\
    \ PORT,\n                    TYPE, MODE, STRU,\n                      for the\
    \ default values\n                    RETR, STOR,\n                    NOOP.\n\
    \      The default values for transfer parameters are:\n         TYPE - ASCII\
    \ Non-print\n         MODE - Stream\n         STRU - File\n      All Hosts must\
    \ accept the above as the standard defaults.\n   CONNECTIONS\n      The server\
    \ protocol interpreter shall \"listen\" on Port L.  The\n      user or user protocol\
    \ interpreter shall initiate the full-duplex\n      TELNET connection.  Server-\
    \ and user- processes should follow the\n      conventions of the TELNET protocol\
    \ as specified in the ARPA\n      Internet Protocol Handbook.  Servers are under\
    \ no obligation to\n      provide for editing of command lines and may specify\
    \ that it be\n      done in the user Host.  The TELNET connection shall be closed\
    \ by\n      the server at the user's request after all transfers and replies\n\
    \      are completed.\n      The user-DTP must \"listen\" on the specified data\
    \ port; this may be\n      the default user port (U) or a port specified in the\
    \ PORT command.\n      The server shall initiate the data connection from his\
    \ own default\n      data port (L-1) using the specified user data port.  The\
    \ direction\n      of the transfer and the port used will be determined by the\
    \ FTP\n      service command.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    When data is to be transferred between two servers, A and B (refer\n    \
    \  to Figure 2), the user-PI, C, sets up TELNET connections with both\n      server-PI's.\
    \  One of the servers, say A, is then sent a PASV\n      command telling him to\
    \ \"listen\" on his data port rather than\n      initiate a connection when he\
    \ receives a transfer service command.\n      When the user-PI receives an acknowledgment\
    \ to the PASV command,\n      which includes the identity of the host and port\
    \ being listened\n      on, the user-PI then sends A's port, a, to B in a PORT\
    \ command; a\n      reply is returned.  The user-PI may then send the corresponding\n\
    \      service commands to A and B.  Server B initiates the connection\n     \
    \ and the transfer proceeds.  The command-reply sequence is listed\n      below\
    \ where the messages are vertically synchronous but\n      horizontally asynchronous:\n\
    \         User-PI - Server A                User-PI - Server B\n         ------------------\
    \                ------------------\n         C->A : Connect                 \
    \   C->B : Connect\n         C->A : PASV\n         A->C : 227 Entering Passive\
    \ Mode. A1,A2,A3,A4,a1,a2\n                                           C->B : PORT\
    \ A1,A2,A3,A4,a1,a2\n                                           B->C : 200 Okay\n\
    \         C->A : STOR                       C->B : RETR\n                    B->A\
    \ : Connect to HOST-A, PORT-a\n      The data connection shall be closed by the\
    \ server under the\n      conditions described in the Section on Establishing\
    \ Data\n      Connections.  If the server wishes to close the connection after\
    \ a\n      transfer where it is not required, he should do so immediately\n  \
    \    after the file transfer is completed.  He should not wait until\n      after\
    \ a new transfer command is received because the user-process\n      will have\
    \ already tested the data connection to see if it needs to\n      do a \"listen\"\
    ; (recall that the user must \"listen\" on a closed\n      data port BEFORE sending\
    \ the transfer request).  To prevent a race\n      condition here, the server\
    \ sends a reply (226) after closing the\n      data connection (or if the connection\
    \ is left open, a \"file\n      transfer completed\" reply (250) and the user-PI\
    \ should wait for\n      one of these replies before issuing a new transfer command.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ COMMANDS\n      The commands are TELNET character string transmitted over the\n\
    \      TELNET connections as described in the Section on FTP Commands.\n     \
    \ The command functions and semantics are described in the Section\n      on Access\
    \ Control Commands, Transfer Parameter Commands, FTP\n      Service Commands,\
    \ and Miscellaneous Commands.  The command syntax\n      is specified here.\n\
    \      The commands begin with a command code followed by an argument\n      field.\
    \  The command codes are four or fewer alphabetic characters.\n      Upper and\
    \ lower case alphabetic characters are to be treated\n      identically.  Thus\
    \ any of the following may represent the retrieve\n      command:\n         RETR\
    \    Retr    retr    ReTr    rETr\n      This also applies to any symbols representing\
    \ parameter values,\n      such as A or a for ASCII TYPE.  The command codes and\
    \ the argument\n      fields are separated by one or more spaces.\n      The argument\
    \ field consists of a variable length character string\n      ending with the\
    \ character sequence <CRLF> (Carriage Return,\n      Linefeed) for NVT-ASCII representation;\
    \ for other negotiated\n      languages a different end of line character might\
    \ be used.  It\n      should be noted that the server is to take NO action until\
    \ the end\n      of line code is received.\n      The syntax is specified below\
    \ in NVT-ASCII.  All characters in the\n      argument field are ASCII characters\
    \ including any ASCII\n      represented decimal integers.  Square brackets denote\
    \ an optional\n      argument field.  If the option is not taken, the appropriate\n\
    \      default is implied.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    The following are the FTP commands:\n         USER <SP> <username> <CRLF>\n\
    \         PASS <SP> <password> <CRLF>\n         ACCT <SP> <account information>\
    \ <CRLF>\n         REIN <CRLF>\n         QUIT <CRLF>\n         PORT <SP> <Host-port>\
    \ <CRLF>\n         PASV <CRLF>\n         TYPE <SP> <type code> <CRLF>\n      \
    \   STRU <SP> <structure code> <CRLF>\n         MODE <SP> <mode code> <CRLF>\n\
    \         RETR <SP> <pathname> <CRLF>\n         STOR <SP> <pathname> <CRLF>\n\
    \         APPE <SP> <pathname> <CRLF>\n         MLFL [<SP> <ident>] <CRLF>\n \
    \        MAIL [<SP> <ident>] <CRLF>\n         MSND [<SP> <ident>] <CRLF>\n   \
    \      MSOM [<SP> <ident>] <CRLF>\n         MSAM [<SP> <ident>] <CRLF>\n     \
    \    MRSQ [<SP> <scheme>] <CRLF>\n         MRCP <SP> <ident> <CRLF>\n        \
    \ ALLO <SP> <decimal integer>\n             [<SP> R <SP> <decimal integer>] <CRLF>\n\
    \         REST <SP> <marker> <CRLF>\n         RNFR <SP> <pathname> <CRLF>\n  \
    \       RNTO <SP> <pathname> <CRLF>\n         ABOR <CRLF>\n         DELE <SP>\
    \ <pathname> <CRLF>\n         CWD <SP> <pathname> <CRLF>\n         LIST [<SP>\
    \ <pathname>] <CRLF>\n         NLST [<SP> <pathname>] <CRLF>\n         SITE <SP>\
    \ <string> <CRLF>\n         STAT [<SP> <pathname>] <CRLF>\n         HELP [<SP>\
    \ <string>] <CRLF>\n         NOOP <CRLF>\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    The syntax of the above argument fields (using BNF notation where\n     \
    \ applicable ) is:\n         <username> ::= <string>\n         <password> ::=\
    \ <string>\n         <account information> ::= <string>\n         <string> ::=\
    \ <char> | <char><string>\n         <char> ::= any of the 128 ASCII characters\
    \ except <CR> and <LF>\n         <marker> ::= <pr string>\n         <pr string>\
    \ ::= <pr char> | <pr char><pr string>\n         <pr char> ::= printable characters,\
    \ any\n                       ASCII code 33 through 126\n         <byte size>\
    \ ::= any decimal integer 1 through 255\n         <Host-port> ::= <Host-number>,<Port-number>\n\
    \         <Host-number> ::= <number>,<number>,<number>,<number>\n         <Port-number>\
    \ ::= <number>,<number>\n         <number> ::= any decimal integer 0 through 255\n\
    \         <ident> ::= <string>\n         <scheme> ::= R | T | ?\n         <form\
    \ code> ::= N | T | C\n         <type code> ::= A [<SP> <form code>]\n       \
    \                | E [<SP> <form code>]\n                       | I\n        \
    \               | L <SP> <byte size>\n         <structure code> ::= F | R | P\n\
    \         <mode code> ::= S | B | C\n         <pathname> ::= <string>\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ SEQUENCING OF COMMANDS AND REPLIES\n      The communication between the user\
    \ and server is intended to be an\n      alternating dialogue.  As such, the user\
    \ issues an FTP command and\n      the server responds with a prompt primary reply.\
    \  The user should\n      wait for this initial primary success or failure response\
    \ before\n      sending further commands.\n      Certain commands require a second\
    \ reply for which the user should\n      also wait.  These replies may, for example,\
    \ report on the progress\n      or completion of file transfer or the closing\
    \ of the data\n      connection.  They are secondary replies to file transfer\
    \ commands.\n      One important group of informational replies is the connection\n\
    \      greetings.  Under normal circumstances, a server will send a 220\n    \
    \  reply, \"awaiting input\", when the connection is completed.  The\n      user\
    \ should wait for this greeting message before sending any\n      commands.  If\
    \ the server is unable to accept input right away, he\n      should send a 120\
    \ \"expected delay\" reply immediately and a 220\n      reply when ready.  The\
    \ user will then know not to hang up if there\n      is a delay.\n      The table\
    \ below lists alternative success and failure replies for\n      each command.\
    \  These must be strictly adhered to; a server may\n      substitute text in the\
    \ replies, but the meaning and action implied\n      by the code numbers and by\
    \ the specific command reply sequence\n      cannot be altered.\n      Command-Reply\
    \ Sequences\n         In this section, the command-reply sequence is presented.\
    \  Each\n         command is listed with its possible replies; command groups\
    \ are\n         listed together.  Preliminary replies are listed first (with\n\
    \         their succeeding replies indented and under them), then\n         positive\
    \ and negative completion, and finally intermediary\n         replies with the\
    \ remaining commands from the sequence\n         following.  This listing forms\
    \ the basis for the state\n         diagrams, which will be presented separately.\n\
    \            Connection Establishment\n               120\n                  220\n\
    \               220\n               421\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \          Login\n               USER\n                  230\n               \
    \   530\n                  500, 501, 421\n                  331, 332\n       \
    \        PASS\n                  230\n                  202\n                \
    \  530\n                  500, 501, 503, 421\n                  332\n        \
    \       ACCT\n                  230\n                  202\n                 \
    \ 530\n                  500, 501, 503, 421\n            Logout\n            \
    \   QUIT\n                  221\n                  500\n               REIN\n\
    \                  120\n                     220\n                  220\n    \
    \              421\n                  500, 502\n            Transfer parameters\n\
    \               PORT\n                  200\n                  500, 501, 421,\
    \ 530\n               PASV\n                  227\n                  500, 501,\
    \ 502, 421, 530\n               MODE, TYPE, STRU\n                  200\n    \
    \              500, 501, 504, 421, 530\n            File action commands\n   \
    \            ALLO\n                  200\n                  202\n            \
    \      500, 501, 504, 421, 530\n               REST\n                  500, 501,\
    \ 502, 421, 530\n                  350\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \             STOR\n                  125, 150\n                     (110)\n \
    \                    226, 250\n                     425, 426, 451, 551, 552\n\
    \                  532, 450, 452, 553\n                  500, 501, 421, 530\n\
    \               RETR\n                  125, 150\n                     (110)\n\
    \                     226, 250\n                     425, 426, 451\n         \
    \         450, 550\n                  500, 501, 421, 530\n               LIST,\
    \ NLST\n                  125, 150\n                     226, 250\n          \
    \           425, 426, 451\n                  450\n                  500, 501,\
    \ 502, 421, 530\n               APPE\n                  125, 150\n           \
    \          (110)\n                     226, 250\n                     425, 426,\
    \ 451, 551, 552\n                  532, 450, 550, 452, 553\n                 \
    \ 500, 501, 502, 421, 530\n               MLFL\n                  125, 150, 151,\
    \ 152\n                     226, 250\n                     425, 426, 451, 552\n\
    \                  532, 450, 550, 452, 553\n                  500, 501, 502, 421,\
    \ 530\n               RNFR\n                  450, 550\n                  500,\
    \ 501, 502, 421, 530\n                  350\n               RNTO\n           \
    \       250\n                  532, 553\n                  500, 501, 502, 503,\
    \ 421, 530\n               DELE, CWD\n                  250\n                \
    \  450, 550\n                  500, 501, 502, 421, 530\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \             ABOR\n                  225, 226\n                  500, 501, 502,\
    \ 421\n               MAIL, MSND\n                  151, 152\n               \
    \      354\n                        250\n                        451, 552\n  \
    \                354\n                     250\n                     451, 552\n\
    \                  450, 550, 452, 553\n                  500, 501, 502, 421, 530\n\
    \               MSOM, MSAM\n                  119, 151, 152\n                \
    \     354\n                        250\n                        451, 552\n   \
    \               354\n                     250\n                     451, 552\n\
    \                  450, 550, 452, 553\n                  500, 501, 502, 421, 530\n\
    \               MRSQ\n                  200, 215\n                  500, 501,\
    \ 502, 421, 530\n               MRCP\n                  151, 152\n           \
    \          200\n                  200\n                  450, 550, 452, 553\n\
    \                  500, 501, 502, 503, 421\n            Informational commands\n\
    \               STAT\n                  211, 212, 213\n                  450\n\
    \                  500, 501, 502, 421, 530\n               HELP\n            \
    \      211, 214\n                  500, 501, 502, 421\n            Miscellaneous\
    \ commands\n               SITE\n                  200\n                  202\n\
    \                  500, 501, 530\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \             NOOP\n                  200\n                  500 421\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - 'File Transfer Protocol                                           RFC 765

    '
- title: STATE DIAGRAMS
  contents:
  - "STATE DIAGRAMS\n   Here we present state diagrams for a very simple minded FTP\n\
    \   implementation. Only the first digit of the reply codes is used.\n   There\
    \ is one state diagram for each group of FTP commands or command\n   sequences.\n\
    \   The command groupings were determined by constructing a model for\n   each\
    \ command then collecting together the commands with structurally\n   identical\
    \ models.\n   For each command or command sequence there are three possible\n\
    \   outcomes: success (S), failure (F), and error (E). In the state\n   diagrams\
    \ below we use the symbol B for \"begin\", and the symbol W for\n   \"wait for\
    \ reply\".\n   We first present the diagram that represents the largest group\
    \ of FTP\n   commands:\n                               1,3    +---+\n        \
    \                  ----------->| E |\n                         |            +---+\n\
    \                         |\n      +---+    cmd    +---+    2      +---+\n   \
    \   | B |---------->| W |---------->| S |\n      +---+           +---+       \
    \    +---+\n                         |\n                         |     4,5   \
    \ +---+\n                          ----------->| F |\n                       \
    \               +---+\n      This diagram models the commands:\n         ABOR,\
    \ ALLO, DELE, CWD, HELP, MODE, MRCP, MRSQ, NOOP, PASV,\n         QUIT, SITE, PORT,\
    \ STAT, STRU, TYPE.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ The other large group of commands is represented by a very similar\n   diagram:\n\
    \                               3      +---+\n                          ----------->|\
    \ E |\n                         |            +---+\n                         |\n\
    \      +---+    cmd    +---+    2      +---+\n      | B |---------->| W |---------->|\
    \ S |\n      +---+       --->+---+           +---+\n                 |     | |\n\
    \                 |     | |     4,5    +---+\n                 |  1  |  ----------->|\
    \ F |\n                  -----               +---+\n      This diagram models\
    \ the commands:\n         APPE, LIST, MLFL, NLST, REIN, RETR, STOR.\n   Note that\
    \ this second model could also be used to represent the first\n   group of commands,\
    \ the only difference being that in the first group\n   the 100 series replies\
    \ are unexpected and therefore treated as error,\n   while the second group expects\
    \ (some may require) 100 series replies.\n   The remaining diagrams model command\
    \ sequences, perhaps the simplest\n   of these is the rename sequence:\n     \
    \ +---+   RNFR    +---+    1,2    +---+\n      | B |---------->| W |---------->|\
    \ E |\n      +---+           +---+        -->+---+\n                       | |\
    \        |\n                3      | | 4,5    |\n         --------------  ------\
    \   |\n        |                      |  |   +---+\n        |               ------------->|\
    \ S |\n        |              |   1,3 |  |   +---+\n        |             2| \
    \ --------\n        |              | |     |\n        V              | |     |\n\
    \      +---+   RNTO    +---+ 4,5 ----->+---+\n      |   |---------->| W |---------->|\
    \ F |\n      +---+           +---+           +---+\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ A very similar diagram models the Mail and Send commands:\n                \
    \   ----  1\n                  |    |\n      +---+  cmd   -->+---+     2     +---+\n\
    \      | B |---------->| W |---------->| E |\n      +---+           +---+    \
    \    -->+---+\n                       | |        |\n                3      | |\
    \ 4,5    |\n         --------------  ------   |\n        |                   \
    \   |  |   +---+\n        |               ------------->| S |\n        |     \
    \         |   1,3 |  |   +---+\n        |             2|  --------\n        |\
    \              | |     |\n        V              | |     |\n      +---+   text\
    \    +---+ 4,5 ----->+---+\n      |   |---------->| W |---------->| F |\n    \
    \  +---+           +---+           +---+\n         This diagram models the commands:\n\
    \            MAIL, MSND, MSOM, MSAM.\n      Note that the \"text\" here is a series\
    \ of lines sent from the user\n      to the server with no response expected until\
    \ the last line is\n      sent, recall that the last line must consist only of\
    \ a single\n      period.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ The next diagram is a simple model of the Restart command:\n      +---+   REST\
    \    +---+    1,2    +---+\n      | B |---------->| W |---------->| E |\n    \
    \  +---+           +---+        -->+---+\n                       | |        |\n\
    \                3      | | 4,5    |\n         --------------  ------   |\n  \
    \      |                      |  |   +---+\n        |               ------------->|\
    \ S |\n        |              |   3   |  |   +---+\n        |             2| \
    \ --------\n        |              | |     |\n        V              | |     |\n\
    \      +---+   cmd     +---+ 4,5 ----->+---+\n      |   |---------->| W |---------->|\
    \ F |\n      +---+        -->+---+           +---+\n                  |      |\n\
    \                  |  1   |\n                   ------\n         Where \"cmd\"\
    \ is APPE, STOR, RETR, or MLFL.\n   We note that the above three models are similar,\
    \ in fact the Mail\n   diagram and the Rename diagram are structurally identical.\
    \ The\n   Restart differs from the other two only in the treatment of 100\n  \
    \ series replies at the second stage.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ The most complicated diagram is for the Login sequence:\n                  \
    \          1\n      +---+   USER    +---+------------->+---+\n      | B |---------->|\
    \ W | 2       ---->| E |\n      +---+           +---+------  |  -->+---+\n   \
    \                    | |       | | |\n                     3 | | 4,5   | | |\n\
    \         --------------   -----  | | |\n        |                      | | |\
    \ |\n        |                      | | | |\n        |                 ---------\
    \  |\n        |               1|     | |   |\n        V                |     |\
    \ |   |\n      +---+   PASS    +---+ 2  |  ------>+---+\n      |   |---------->|\
    \ W |------------->| S |\n      +---+           +---+   ---------->+---+\n   \
    \                    | |   | |     |\n                     3 | |4,5| |     |\n\
    \         --------------   --------   |\n        |                    | |  | \
    \ |\n        |                    | |  |  |\n        |                 -----------\n\
    \        |             1,3|   | |  |\n        V                |  2| |  |\n  \
    \    +---+   ACCT    +---+--  |   ----->+---+\n      |   |---------->| W | 4,5\
    \ -------->| F |\n      +---+           +---+------------->+---+\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ Finally we present a generalized diagram that could be used to model\n   the\
    \ command and reply interchange:\n               ------------------------------------\n\
    \              |                                    |\n      Begin   |       \
    \                             |\n        |     V                             \
    \       |\n        |   +---+  cmd   +---+ 2         +---+     |\n         -->|\
    \   |------->|   |---------->|   |     |\n            |   |        | W |     \
    \      | S |-----|\n         -->|   |     -->|   |-----      |   |     |\n   \
    \     |   +---+    |   +---+ 4,5 |     +---+     |\n        |     |      |   \
    \ | |      |               |\n        |     |      |   1| |3     |     +---+ \
    \    |\n        |     |      |    | |      |     |   |     |\n        |     |\
    \       ----  |       ---->| F |-----\n        |     |             |         \
    \   |   |\n        |     |             |            +---+\n         -------------------\n\
    \              |\n              |\n              V\n             End\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - 'File Transfer Protocol                                           RFC 765

    '
- title: TYPICAL FTP SCENARIO
  contents:
  - "TYPICAL FTP SCENARIO\n   User at Host U wanting to transfer files to/from Host\
    \ S:\n   In general the user will communicate to the server via a mediating\n\
    \   user-FTP process.  The following may be a typical scenario.  The\n   user-FTP\
    \ prompts are shown in parentheses, '---->' represents\n   commands from Host\
    \ U to Host S, and '<----' represents replies from\n   Host S to Host U.\n   \
    \   LOCAL COMMANDS BY USER              ACTION INVOLVED\n      ftp (host) multics<CR>\
    \         Connect to Host S, port L,\n                                     establishing\
    \ TELNET connections\n                                     <---- 220 Service ready\
    \ <CRLF>\n      username Doe <CR>              USER Doe<CRLF>---->\n         \
    \                            <---- 331 User name ok,\n                       \
    \                        need password<CRLF>\n      password mumble <CR>     \
    \      PASS mumble<CRLF>---->\n                                     <---- 230\
    \ User logged in.<CRLF>\n      retrieve (local type) ASCII<CR>\n      (local pathname)\
    \ test 1 <CR>   User-FTP opens local file in ASCII.\n      (for.pathname) test.pl1<CR>\
    \    RETR test.pl1<CRLF> ---->\n                                     <---- 150\
    \ File status okay;\n                                           about to open\
    \ data connection\n                                     Server makes data connection\n\
    \                                     to port U\n      <CRLF>\n              \
    \                       <---- 226 Closing data connection,\n                 \
    \                        file transfer successful<CRLF>\n      type Image<CR>\
    \                 TYPE I<CRLF> ---->\n                                     <----\
    \ 200 Command OK<CRLF>\n      store (local type) image<CR>\n      (local pathname)\
    \ file dump<CR> User-FTP opens local file in Image.\n      (for.pathname) >udd>cn>fd<CR>\
    \  STOR >udd>cn>fd<CRLF> ---->\n                                     <---- 450\
    \ Access denied<CRLF>\n      terminate                      QUIT <CRLF> ---->\n\
    \                                     Server closes all\n                    \
    \                 connections.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - 'RFC 765                                           File Transfer Protocol

    '
- title: CONNECTION ESTABLISHMENT
  contents:
  - "CONNECTION ESTABLISHMENT\n   The FTP control connection is established via TCP\
    \ between the user\n   process port U and the server process port L.  This protocol\
    \ is\n   assigned the service port 21 (25 octal), that is L=21.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - 'File Transfer Protocol                                           RFC 765

    '
- title: APPENDIX ON MAIL
  contents:
  - "APPENDIX ON MAIL\n   The basic commands transmitting mail are the MAIL and the\
    \ MLFL\n   commands.  These commands cause the transmitted data to be entered\n\
    \   into the recipients mailbox.\n      MAIL <SP> <recipient name> <CRLF>\n  \
    \       If accepted, returns 354 reply and considers all succeeding\n        \
    \ lines to be the message text, terminated by a line containing\n         only\
    \ a period, upon which a 250 completion reply is returned.\n         Various errors\
    \ are possible.\n      MLFL <SP> <recipient name> <CRLF>\n         If accepted,\
    \ acts like a STOR command, except that the data is\n         considered to be\
    \ the message text.  Various errors are\n         possible.\n   There are two\
    \ possible preliminary replies that a server may use to\n   indicate that it is\
    \ accepting mail for a user whose mailbox is not at\n   that server.\n      151\
    \ User not local; Will forward to <user>@<host>.\n         This reply indicates\
    \ that the server knows the user's mailbox\n         is on another host and will\
    \ take responsibility for forwarding\n         the mail to that host.  For example,\
    \ at BBN (or ISI) there are\n         several host which each have a list of many\
    \ of the users on\n         several of the host.  These hosts then can accept\
    \ mail for any\n         user on their list and forward it to the correct host.\n\
    \      152 User Unknown; Mail will be forwarded by the operator.\n         This\
    \ reply indicates that the host does not recognize the user\n         name, but\
    \ that it will accept the mail and have the operator\n         attempt to deliver\
    \ it.  This is useful if the user name is\n         misspelled, but may be a disservice\
    \ if the mail is really\n         undeliverable.\n   Three FTP commands provide\
    \ for \"sending\" a message to a logged-in\n   user's terminal, as well as variants\
    \ for mailing it normally whether\n   the user is logged in or not.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    MSND -- SeND to terminal.\n         Returns 450 failure reply if the addressee\
    \ is refusing or not\n         logged in.\n      MSOM -- Send to terminal Or Mailbox.\n\
    \         Returns 119 notification reply if terminal is not accessible.\n    \
    \  MSAM -- Send to terminal And Mailbox.\n         Returns 119 notification reply\
    \ if terminal is not accessible.\n   Note that for MSOM and MSAM, it is the mailing\
    \ which determines\n   success, not the sending, although MSOM as implemented\
    \ uses a 119\n   reply (in addition to the normal success/failure code) to indicate\n\
    \   that because the SEND failed, an attempt is being made to mail the\n   message\
    \ instead.  There are no corresponding variants for MLFL, since\n   messages transmitted\
    \ in this way are generally short.\n   There are two FTP commands which allow\
    \ one to mail the text of a\n   message to several recipients simultaneously;\
    \ such message\n   transmission is far more efficient than the practice of sending\
    \ the\n   text again and again for each additional recipient at a site.\n   There\
    \ are two basic ways of sending a single text to several\n   recipients.  In one,\
    \ all recipients are specified first, and then the\n   text is sent; in the other,\
    \ the order is reversed and the text is\n   sent first, followed by the recipients.\
    \  Both schemes are necessary\n   because neither by itself is optimal for all\
    \ systems, as will be\n   explained later.  To select a particular scheme, the\
    \ MRSQ command is\n   used; to specify recipients after a scheme is chosen, MRCP\
    \ commands\n   are given; and to furnish text, the MAIL or MLFL commands are used.\n\
    \   Scheme Selection: MRSQ\n      MRSQ is the means by which a user program can\
    \ test for\n      implementation of MRSQ/MRCP, select a particular scheme, reset\
    \ its\n      state thereof, and even do some rudimentary negotiation.  Its\n \
    \     format is like that of the TYPE command, as follows:\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \       MRSQ [<SP> <scheme>] <CRLF>\n         <scheme> = a single character. \
    \ The following are defined:\n            R  Recipients first.  If not implemented,\
    \ T must be.\n            T  Text first.  If this is not implemented, R must be.\n\
    \            ?  Request for preference.  Must always be implemented.\n       \
    \     No argument means a \"selection\" of none of the schemes (the\n        \
    \    default).\n         Replies:\n            200 OK, we'll use specified scheme.\n\
    \            215 <scheme> This is the scheme I prefer.\n            501 I understand\
    \ MRSQ but can't use that scheme.\n            5xx Command unrecognized or unimplemented.\n\
    \      Three aspects of MRSQ need to be pointed out here.  The first is\n    \
    \  that an MRSQ with no argument must always return a 200 reply and\n      restore\
    \ the default state of having no scheme selected.  Any other\n      reply implies\
    \ that MRSQ and hence MRCP are not understood or\n      cannot be performed correctly.\n\
    \      The second is that the use of \"?\" as a <scheme> asks the FTP\n      server\
    \ to return a 215 reply in which the server specifies a\n      \"preferred\" scheme.\
    \  The format of this reply is simple:\n         215 <SP> <scheme> [<SP> <arbitrary\
    \ text>] <CRLF>\n         Any other reply (e.g. 4xx or 5xx) implies that MRSQ\
    \ and MRCP\n         are not implemented, because \"?\" must always be implemented\
    \ if\n         MRSQ is.\n      The third important thing about MRSQ is that it\
    \ always has the\n      side effect of resetting all schemes to their initial\
    \ state.  This\n      reset must be done no matter what the reply will be - 200,\
    \ 215, or\n      501.  The actions necessary for a reset will be explained when\n\
    \      discussing how each scheme actually works.\n   Message Text Specification:\
    \ MAIL/MLFL\n      Regardless of which scheme (if any) has been selected, a MAIL\
    \ or\n      MLFL with a non-null argument will behave exactly as before; the\n\
    \      MRSQ/MRCP commands have no effect on them.  However, such normal\n    \
    \  MAIL/MLFL commands do have the same side effect as MRSQ; they\n      \"reset\"\
    \ the current scheme to its initial state.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    It is only when the argument is null (e.g. MAIL<CRLF> or\n      MLFL<CRLF>)\
    \ that the particular scheme being used is important,\n      because rather than\
    \ producing an error (as most servers currently\n      do), the server will accept\
    \ message text for this \"null\"\n      specification; what it does with it depends\
    \ on which scheme is in\n      effect, and will be described in \"Scheme Mechanics\"\
    .\n   Recipient specification: MRCP\n      In order to specify recipient names\
    \  (i.e., idents) and receive\n      some acknowledgment (or refusal) for each\
    \ name, the following\n      command is used:\n         MRCP <SP> <ident> <CRLF>\n\
    \         Reply for no scheme:\n            503 No scheme specified yet; use MRSQ.\n\
    \         Replies for scheme T are identical to those for MAIL/MLFL.\n       \
    \  Replies for scheme R (recipients first):\n            200 OK, name stored.\n\
    \            452 Recipient table full, this name not stored.\n            553\
    \ Recipient name rejected.\n            4xx Temporary error, try this name again\
    \ later.\n            5xx Permanent error, report to sender.\n      Note that\
    \ use of this command is an error if no scheme has been\n      selected yet; an\
    \ MRSQ <scheme> must have been given if MRCP is to\n      be used.\n   Scheme\
    \ mechanics: MRSQ R (Recipients first)\n      In the recipients-first scheme,\
    \ MRCP is used to specify names\n      which the FTP server stores in a list or\
    \ table.  Normally the\n      reply for each MRCP will be either a 200 for acceptance,\
    \ or a\n      4xx/5xx code for rejection; all 5xx codes are permanent rejections\n\
    \      (e.g. user not known) which should be reported to the human\n      sender,\
    \ whereas 4xx codes in general connote some temporary error\n      that may be\
    \ rectified later.  None of the 4xx/5xx replies impinge\n      on previous or\
    \ succeeding MRCP commands, except for 452 which\n      indicates that no further\
    \ MRCP's will succeed unless a message is\n      sent to the already stored recipients\
    \ or a reset is done.\n      Sending message text to stored recipients is done\
    \ by giving a MAIL\n      or MLFL command with no argument; that is, just MAIL<CRLF>\
    \ or\n      MLFL<CRLF>.  Transmission of the message text is exactly the same\n\
    \      as for normal MAIL/MLFL; however, a positive acknowledgment at the\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    end of transmission means that the message has been sent to ALL\n      recipients\
    \ that were remembered with MRCP, and a failure code\n      means that it should\
    \ be considered to have failed for ALL of these\n      specified recipients. \
    \ This applies regardless of the actual error\n      code; and whether the reply\
    \ signifies success or failure, all\n      stored recipient names are flushed\
    \ and forgotten - in other words,\n      things are reset to their initial state.\
    \  This purging of the\n      recipient name list must also be done as the \"\
    reset\" side effect\n      of any use of MRSQ.\n      A 452 reply to an MRCP can\
    \ thus be handled by using a MAIL/MLFL to\n      specify the message for currently\
    \ stored recipients, and then\n      sending more MRCP's and another MAIL/MLFL,\
    \ as many times as\n      necessary; for example, if a server only had room for\
    \ 10 names\n      this would result in a 50-recipient message being sent 5 times,\
    \ to\n      10 different recipients each time.\n      If a user attempts to specify\
    \ message text (MAIL/MLFL with no\n      argument) before any successful MRCP's\
    \ have been given, this\n      should be treated exactly as a \"normal\" MAIL/MLFL\
    \ with a null\n      recipient would be; some servers will return an error of\
    \ some\n      type, such as \"550 Null recipient\".\n      See Example 1 for an\
    \ example using MRSQ R.\n   Scheme mechanics: MRSQ T (Text first)\n      In the\
    \ text-first scheme, MAIL/MLFL with no argument is used to\n      specify message\
    \ text, which the server stores away.  Succeeding\n      MRCP's are then treated\
    \ as if they were MAIL/MLFL commands, except\n      that none of the text transfer\
    \ manipulations are done; the stored\n      message text is sent to the specified\
    \ recipient, and a reply code\n      is returned identical to that which an actual\
    \ MAIL/MLFL would\n      invoke. (Note ANY 2xx code indicates success.)\n    \
    \  The stored message text is not forgotten until the next MAIL/MLFL\n      or\
    \ MRSQ, which will either replace it with new text or flush it\n      entirely.\
    \  Any use of MRSQ will reset this scheme by flushing\n      stored text, as will\
    \ any use of MAIL/MLFL with a non-null\n      argument.\n      If an MRCP is seen\
    \ before any message text has been stored, the\n      user in effect is trying\
    \ to send a null message; some servers\n      might allow this, others would return\
    \ an error code.\n      See Example 2 for an example using MRSQ T.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ Why two schemes anyway?\n      Because neither by itself is optimal for all\
    \ systems.  MRSQ R\n      allows more of a \"bulk\" mailing, because everything\
    \ is saved up\n      and then mailed simultaneously; this is very useful for systems\n\
    \      such as ITS where the FTP server does not itself write mail\n      directly,\
    \ but hands it on to a central mailer demon of great\n      power; the more information\
    \ (e.g. recipients) associated with a\n      single \"hand-off\", the more efficiently\
    \ mail can be delivered.\n      By contrast, MRSQ T is geared to FTP servers which\
    \ want to deliver\n      mail directly, in one-by-one incremental fashion.  This\
    \ way they\n      can return an individual success/failure reply code for each\n\
    \      recipient given which may depend on variable file system factors\n    \
    \  such as exceeding disk allocation, mailbox access conflicts, and\n      so\
    \ forth; if they tried to emulate MRSQ R's bulk mailing, they\n      would have\
    \ to ensure that a success reply to the MAIL/MLFL indeed\n      meant that it\
    \ had been delivered to ALL recipients specified - not\n      just some.\n   Notes:\n\
    \      * Because these commands are not required in the minimum\n        implementation\
    \ of FTP, one must be prepared to deal with sites\n        which don't recognize\
    \ either MRSQ or MRCP.  \"MRSQ\" and \"MRSQ ?\"\n        are explicitly designed\
    \ as tests to see whether either scheme is\n        implemented; MRCP is not,\
    \ and a failure return of the\n        \"unimplemented\" variety could be confused\
    \ with \"No scheme\n        selected yet\", or even with \"Recipient unknown\"\
    .  Be safe, be\n        sure, use MRSQ!\n      * There is no way to indicate in\
    \ a positive response to \"MRSQ ?\"\n        that the preferred \"scheme\" for\
    \ a server is that of the default\n        state; i.e. none of the multi-recipient\
    \ schemes.  The rationale\n        is that in this case, it would be pointless\
    \ to implement\n        MRSQ/MRCP at all, and the response would therefore be\
    \ negative.\n      * One reason that the use of MAIL/MLFL is restricted to null\n\
    \        arguments with this multi-recipient extension is the ambiguity\n    \
    \    that would result if a non-null argument were allowed; for\n        example,\
    \ if MRSQ R was in effect and some MRCP's had been given,\n        and a MAIL\
    \ FOO<CRLF> was done, there would be no way to\n        distinguish a failure\
    \ reply for mailbox \"FOO\" from a global\n        failure for all recipients\
    \ specified.  A similar situation\n        exists for MRSQ T; it would not be\
    \ clear whether the text was\n        stored and the mailbox failed, or vice versa,\
    \ or both.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \    * \"Resets\" are done by all MRSQ's and \"normal\" MAIL/MLFL's to\n     \
    \   avoid confusion and overly complicated implementation.  The MRSQ\n       \
    \ command implies a change or uncertainty of status, and the\n        latter commands\
    \ would otherwise have to use some independent\n        mechanisms to avoid clobbering\
    \ the data bases (e.g., message\n        text storage area) used by the T/R schemes.\
    \  However, once a\n        scheme is selected, it remains \"in effect\" just\
    \ as a \"TYPE A\"\n        remains selected.  The recommended way for doing a\
    \ reset,\n        without changing the current selection, is with \"MRSQ ?\".\n\
    \        Remember that \"MRSQ\" alone reverts to the no-scheme state.\n      *\
    \ It is permissible to intersperse other FTP commands among the\n        MRSQ/MRCP/MAIL\
    \ sequences.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ Example 1\n                  Example of MRSQ R (Recipients first)\n      This\
    \ is an example of how MRSQ R is used; first the user must\n      establish that\
    \ the server in fact implements MRSQ:\n         U: MRSQ\n         S: 200 OK, no\
    \ scheme selected.\n      An MRSQ with a null argument always returns a 200 if\
    \ implemented,\n      selecting the \"scheme\" of null, i.e. none of them.  If\
    \ MRSQ were\n      not implemented, a code of 4xx or 5xx would be returned.\n\
    \         U: MRSQ R\n         S: 200 OK, using that scheme\n      All's well;\
    \ now the recipients can be specified.\n         U: MRCP Foo\n         S: 200\
    \ OK\n         U: MRCP Raboof\n         S: 553 Who's that?  No such user here.\n\
    \         U: MRCP bar\n         S: 200 OK\n      Well, two out of three ain't\
    \ bad.  Note that the demise of\n      \"Raboof\" has no effect on the storage\
    \ of \"Foo\" or \"bar\".  Now to\n      furnish the message text, by giving a\
    \ MAIL or MLFL with no\n      argument:\n         U: MAIL\n         S: 354 Type\
    \ mail, ended by <CRLF>.<CRLF>\n         U: Blah blah blah blah....etc etc etc\n\
    \         U: .\n         S: 250 Mail sent.\n      The text has now been sent to\
    \ both \"Foo\" and \"bar\".\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ Example 2\n                     Example of MRSQ T (Text first)\n      Using\
    \ the same message as the previous example:\n         U: MRSQ ?\n         S: 215\
    \ T Text first, please.\n      MRSQ is indeed implemented, and the server says\
    \ that it prefers\n      \"T\", but that needn't stop the user from trying something\
    \ else:\n         U: MRSQ R\n         S: 501 Sorry, I really can't do that.\n\
    \      It's possible that it could have understood \"R\" also, but in\n      general\
    \ it's best to use the \"preferred\" scheme, since the server\n      knows which\
    \ is most efficient for its particular site.  Anyway:\n         U: MRSQ T\n  \
    \       S: 200 OK, using that scheme.\n      Scheme \"T\" is now selected, and\
    \ the text must be sent:\n         U: MAIL\n         S: 354 Type mail, ended by\
    \ <CRLF>.<CRLF>\n         U: Blah blah blah blah....etc etc etc\n         U: .\n\
    \         S: 250 Mail stored.\n      Now recipients can be specified:\n      \
    \   U: MRCP Foo\n         S: 250 Stored mail sent.\n         U: MRCP Raboof\n\
    \         S: 553 Who's that?  No such user here.\n         U: MRCP bar\n     \
    \    S: 250 Stored mail sent.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \    Again, the text has now been sent to both \"Foo\" and \"bar\", and\n    \
    \  still remains stored.  A new message can be sent with another\n      MAIL/MRCP...\
    \ sequence, but the fastidious or paranoid could chose\n      to do:\n       \
    \  U: MRSQ ?\n         S: 215 T Text first, please.\n      Which resets things\
    \ without altering the scheme in effect.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - 'File Transfer Protocol                                           RFC 765

    '
- title: APPENDIX ON PAGE STRUCTURE
  contents:
  - "APPENDIX ON PAGE STRUCTURE\n   The need for FTP to support page structure derives\
    \ principally from\n   the  need to support efficient transmission of files between\
    \ TOPS20\n   systems, particularly the files used by NLS.\n   The file system\
    \ of TOPS20 is based on the concept of pages.  The\n   system level is most efficient\
    \ at manipulating files as pages.\n   System level programs provide an interface\
    \ to the file system so that\n   many applications view files as sequential streams\
    \ of characters.\n   However, a few applications use the underlying page structures\n\
    \   directly, and some of these create holey files.\n   A TOPS20 file is just\
    \ a bunch of words pointed to by a page table.\n   If those words contain CRLF's,\
    \ fine -- but that doesn't mean \"record\"\n   to TOPS20.\n   A TOPS20 disk file\
    \ consists of four things: a pathname, a page table,\n   a (possibly empty) set\
    \ of pages, and a set of attributes.\n   The pathname is specified in the RETR\
    \ or STOR command.  It includes\n   the directory name, file name, file name extension,\
    \ and version\n   number.\n   The page table contains up to 2**18 entries.  Each\
    \ entry may be\n   EMPTY, or may point to a page.  If it is not empty, there are\
    \ also\n   some page-specific access bits; not all pages of a file need have the\n\
    \   same access protection.\n      A page is a contiguous set of 512 words of\
    \ 36 bits each.\n   The attributes of the file, in the File Descriptor Block (FDB),\n\
    \   contain such things as creation time, write time, read time, writer's\n  \
    \ byte-size, end of file pointer, count of reads and writes, backup\n   system\
    \ tape numbers, etc.\n   Note that there is NO requirement that pages in the page\
    \ table be\n   contiguous.  There may be empty page table slots between occupied\n\
    \   ones.  Also, the end of file pointer is simply a number.  There is no\n  \
    \ requirement that it in fact point at the \"last\" datum in the file.\n   Ordinary\
    \ sequential I/O calls in TOPS20 will cause the end of file\n   pointer to be\
    \ left after the last datum written, but other operations\n   may cause it not\
    \ to be so, if a particular programming system so\n   requires.\n"
- title: IEN 149                                                        June 1980
  contents:
  - 'IEN 149                                                        June 1980

    '
- title: RFC 765                                           File Transfer Protocol
  contents:
  - "RFC 765                                           File Transfer Protocol\n  \
    \ In fact both of these special cases, \"holey\" files and\n   end-of-file pointers\
    \ not at the end of the file, occur with NLS data\n   files.\n   The TOPS20 paged\
    \ files can be sent with the FTP transfer parameters:\n   TYPE L 36, STRU P, and\
    \ MODE S (in fact any mode could be used).\n   Each page of information has a\
    \ header.  Each header field, which is a\n   logical byte, is a TOPS20 word, since\
    \ the TYPE is L 36.\n   The header fields are:\n      Word 0: Header Length.\n\
    \         The header length is 5.\n      Word 1: Page Index.\n         If the\
    \ data is a disk file page, this is the number of that\n         page in the file's\
    \ page map.  Empty pages (holes) in the file\n         are simply not sent.  Note\
    \ that a hole is NOT the same as a\n         page of zeros.\n      Word 2: Data\
    \ Length.\n         The number of data words in this page, following the header.\n\
    \         Thus the total length of the transmission unit is the Header\n     \
    \    Length plus the Data Length.\n      Word 3: Page Type.\n         A code for\
    \ what type of chunk this is. A data page is type 3,\n         the FDB page is\
    \ type 2.\n      Word 4: Page Access Control.\n         The access bits associated\
    \ with the page in the file's page\n         map.  (This full word quantity is\
    \ put into AC2 of an SPACS by\n         the program reading from net to disk.)\n\
    \   After the header are Data Length data words.  Data Length is\n   currently\
    \ either 512 for a data page or 21 for an FDB.  Trailing\n   zeros in a disk file\
    \ page may be discarded, making Data Length less\n   than 512 in that case.\n"
- title: June 1980                                                        IEN 149
  contents:
  - 'June 1980                                                        IEN 149

    '
- title: File Transfer Protocol                                           RFC 765
  contents:
  - "File Transfer Protocol                                           RFC 765\n  \
    \ Data transfers are implemented like the layers of an onion: some\n   characters\
    \ are packaged into a line.  Some lines are packaged into a\n   file.  The file\
    \ is broken into other manageable units for\n   transmission.  Those units have\
    \ compression applied to them.  The\n   units may be flagged by restart markers.\
    \  On the other end, the\n   process is reversed.\n"
