- contents:
  - '           The PPP Internet Protocol Control Protocol (IPCP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for
    the Internet\n   community, and requests discussion and suggestions for improvements.\n
    \  Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"
    for the standardization state and status of this protocol.\n   Distribution of
    this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method
    of\n   encapsulating Network Layer protocol information over point-to-point\n
    \  links.  PPP also defines an extensible Link Control Protocol, and\n   proposes
    a family of Network Control Protocols (NCPs) for\n   establishing and configuring
    different network-layer protocols.\n   This document defines the NCP for establishing
    and configuring the\n   Internet Protocol [2] over PPP, and a method to negotiate
    and use Van\n   Jacobson TCP/IP header compression [3] with PPP.\n   This RFC
    is a product of the Point-to-Point Protocol Working Group of\n   the Internet
    Engineering Task Force (IETF).\n"
  title: Abstract
- contents:
  - "Table of Contents\n     1.     Introduction ..........................................
    \   1\n     2.     A PPP Network Control Protocol (NCP) for IP ...........    2\n
    \       2.1       Sending IP Datagrams ............................    2\n     3.
    \    IPCP Configuration Options ............................    4\n        3.1
    \      IP-Addresses ....................................    5\n        3.2       IP-Compression-Protocol
    .........................    6\n        3.3       IP-Address ......................................
    \   8\n     4.     Van Jacobson TCP/IP header compression ................    9\n
    \       4.1       Configuration Option Format .....................    9\n     APPENDICES
    ...................................................   11\n     A.     IPCP Recommended
    Options ..............................   11\n     SECURITY CONSIDERATIONS ......................................
    \  11\n     REFERENCES ...................................................   11\n
    \    ACKNOWLEDGEMENTS .............................................   11\n     CHAIR'S
    ADDRESS ..............................................   12\n     AUTHOR'S ADDRESS
    .............................................   12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   PPP has three main components:\n      1. A method for encapsulating
    datagrams over serial links.\n      2. A Link Control Protocol (LCP) for establishing,
    configuring,\n         and testing the data-link connection.\n      3. A family
    of Network Control Protocols (NCPs) for establishing\n         and configuring
    different network-layer protocols.\n   In order to establish communications over
    a point-to-point link, each\n   end of the PPP link must first send LCP packets
    to configure and test\n   the data link.  After the link has been established
    and optional\n   facilities have been negotiated as needed by the LCP, PPP must
    send\n   NCP packets to choose and configure one or more network-layer\n   protocols.
    \ Once each of the chosen network-layer protocols has been\n   configured, datagrams
    from each network-layer protocol can be sent\n   over the link.\n   The link will
    remain configured for communications until explicit LCP\n   or NCP packets close
    the link down, or until some external event\n   occurs (an inactivity timer expires
    or network administrator\n   intervention).\n"
  title: 1.  Introduction
- contents:
  - "2.  A PPP Network Control Protocol (NCP) for IP\n   The IP Control Protocol (IPCP)
    is responsible for configuring,\n   enabling, and disabling the IP protocol modules
    on both ends of the\n   point-to-point link.  IPCP uses the same packet exchange
    machanism as\n   the Link Control Protocol (LCP).  IPCP packets may not be exchanged\n
    \  until PPP has reached the Network-Layer Protocol phase.  IPCP packets\n   received
    before this phase is reached should be silently discarded.\n   The IP Control
    Protocol is exactly the same as the Link Control\n   Protocol [1] with the following
    exceptions:\n   Data Link Layer Protocol Field\n      Exactly one IPCP packet
    is encapsulated in the Information field\n      of PPP Data Link Layer frames
    where the Protocol field indicates\n      type hex 8021 (IP Control Protocol).\n
    \  Code field\n      Only Codes 1 through 7 (Configure-Request, Configure-Ack,\n
    \     Configure-Nak, Configure-Reject, Terminate-Request, Terminate-Ack\n      and
    Code-Reject) are used.  Other Codes should be treated as\n      unrecognized and
    should result in Code-Rejects.\n   Timeouts\n      IPCP packets may not be exchanged
    until PPP has reached the\n      Network-Layer Protocol phase.  An implementation
    should be\n      prepared to wait for Authentication and Link Quality Determination\n
    \     to finish before timing out waiting for a Configure-Ack or other\n      response.
    \ It is suggested that an implementation give up only\n      after user intervention
    or a configurable amount of time.\n   Configuration Option Types\n      IPCP has
    a distinct set of Configuration Options, which are\n      defined below.\n"
  title: 2.  A PPP Network Control Protocol (NCP) for IP
- contents:
  - "2.1.  Sending IP Datagrams\n   Before any IP packets may be communicated, PPP
    must reach the\n   Network-Layer Protocol phase, and the IP Control Protocol must
    reach\n   the Opened state.\n   Exactly one IP packet is encapsulated in the Information
    field of PPP\n   Data Link Layer frames where the Protocol field indicates type
    hex\n   0021 (Internet Protocol).\n   The maximum length of an IP packet transmitted
    over a PPP link is the\n   same as the maximum length of the Information field
    of a PPP data\n   link layer frame.  Larger IP datagrams must be fragmented as\n
    \  necessary.  If a system wishes to avoid fragmentation and reassembly,\n   it
    should use the TCP Maximum Segment Size option [4], and MTU\n   discovery [5].\n"
  title: 2.1.  Sending IP Datagrams
- contents:
  - '3.  IPCP Configuration Options

    '
  - 'IPCP Configuration Options allow negotiatiation of desirable Internet

    '
  - 'Protocol parameters.  IPCP uses the same Configuration Option format

    '
  - 'defined for LCP [1], with a separate set of Options.

    '
  - 'The most up-to-date values of the IPCP Option Type field are specified

    '
  - 'in the most recent "Assigned Numbers" RFC [6].  Current values are

    '
  - "assigned as follows:\n   1       IP-Addresses\n   2       IP-Compression-Protocol\n
    \  3       IP-Address\n"
  title: 3.  IPCP Configuration Options
- contents:
  - "3.1.  IP-Addresses\n   Description\n      The use of the Configuration Option
    IP-Addresses has been\n      deprecated.  It has been determined through implementation\n
    \     experience that it is difficult to ensure negotiation convergence\n      in
    all cases using this option.  RFC 1172 [7] provides information\n      for implementations
    requiring backwards compatability.  The IP-\n      Address Configuration Option
    replaces this option, and its use is\n      preferred.\n      This option SHOULD
    NOT be sent in a Configure-Request if a\n      Configure-Request has been received
    which includes either an IP-\n      Addresses or IP-Address option.  This option
    MAY be sent if a\n      Configure-Reject is received for the IP-Address option,
    or a\n      Configure-Nak is received with an IP-Addresses option as an\n      appended
    option.\n      Support for this option MAY be removed after the IPCP protocol\n
    \     status advances to Internet Draft Standard.\n"
  title: 3.1.  IP-Addresses
- contents:
  - "3.2.  IP-Compression-Protocol\n   Description\n      This Configuration Option
    provides a way to negotiate the use of a\n      specific compression protocol.
    \ By default, compression is not\n      enabled.\n   A summary of the IP-Compression-Protocol
    Configuration Option format\n   is shown below.  The fields are transmitted from
    left to right.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |     IP-Compression-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Data ...\n   +-+-+-+-+\n   Type\n      2\n   Length\n      >= 4\n   IP-Compression-Protocol\n
    \     The IP-Compression-Protocol field is two octets and indicates the\n      compression
    protocol desired.  Values for this field are always\n      the same as the PPP
    Data Link Layer Protocol field values for that\n      same compression protocol.\n
    \     The most up-to-date values of the IP-Compression-Protocol field\n      are
    specified in the most recent \"Assigned Numbers\" RFC [6].\n      Current values
    are assigned as follows:\n         Value (in hex)          Protocol\n         002d
    \                   Van Jacobson Compressed TCP/IP\n   Data\n      The Data field
    is zero or more octets and contains additional data\n      as determined by the
    particular compression protocol.\n   Default\n      No compression protocol enabled.\n"
  title: 3.2.  IP-Compression-Protocol
- contents:
  - "3.3.  IP-Address\n   Description\n      This Configuration Option provides a
    way to negotiate the IP\n      address to be used on the local end of the link.
    \ It allows the\n      sender of the Configure-Request to state which IP-address
    is\n      desired, or to request that the peer provide the information.  The\n
    \     peer can provide this information by NAKing the option, and\n      returning
    a valid IP-address.\n      If negotiation about the remote IP-address is required,
    and the\n      peer did not provide the option in its Configure-Request, the\n
    \     option SHOULD be appended to a Configure-Nak.  The value of the\n      IP-address
    given must be acceptable as the remote IP-address, or\n      indicate a request
    that the peer provide the information.\n      By default, no IP address is assigned.\n
    \  A summary of the IP-Address Configuration Option format is shown\n   below.
    \ The fields are transmitted from left to right.\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |           IP-Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \          IP-Address (cont)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n
    \     3\n   Length\n      6\n   IP-Address\n      The four octet IP-Address is
    the desired local address of the\n      sender of a Configure-Request.  If all
    four octets are set to\n      zero, it indicates a request that the peer provide
    the IP-Address\n      information.\n   Default\n      No IP address is assigned.\n"
  title: 3.3.  IP-Address
- contents:
  - '4.  Van Jacobson TCP/IP header compression

    '
  - 'Van Jacobson TCP/IP header compression reduces the size of the TCP/IP

    '
  - 'headers to as few as three bytes.  This can be a significant improvement

    '
  - 'on slow serial lines, particularly for interactive traffic.

    '
  - 'The IP-Compression-Protocol Configuration Option is used to indicate the

    '
  - 'ability to receive compressed packets.  Each end of the link must

    '
  - 'separately request this option if bi-directional compression is desired.

    '
  - 'The PPP Protocol field is set to the following values when transmitting

    '
  - "IP packets:\n   Value (in hex)\n   0021      Type IP.  The IP protocol is not
    TCP, or the packet is a\n             fragment, or cannot be compressed.\n   002d
    \     Compressed TCP.  The TCP/IP headers are replaced by the\n             compressed
    header.\n   002f      Uncompressed TCP.  The IP protocol field is replaced by\n
    \            the slot identifier.\n"
  title: 4.  Van Jacobson TCP/IP header compression
- contents:
  - "4.1.  Configuration Option Format\n   A summary of the IP-Compression-Protocol
    Configuration Option format\n   to negotiate Van Jacobson TCP/IP header compression
    is shown below.\n   The fields are transmitted from left to right.\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |     IP-Compression-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |  Max-Slot-Id  | Comp-Slot-Id  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n
    \     2\n   Length\n      6\n   IP-Compression-Protocol\n      002d (hex) for
    Van Jacobson Compressed TCP/IP headers.\n   Max-Slot-Id\n      The Max-Slot-Id
    field is one octet and indicates the maximum slot\n      identifier.  This is
    one less than the actual number of slots; the\n      slot identifier has values
    from zero to Max-Slot-Id.\n         Note: There may be implementations that have
    problems with only\n         one slot (Max-Slot-Id = 0).  See the discussion in
    reference\n         [3].  The example implementation in [3] will only work with
    3\n         through 254 slots.\n   Comp-Slot-Id\n      The Comp-Slot-Id field
    is one octet and indicates whether the slot\n      identifier field may be compressed.\n
    \        0  The slot identifier must not be compressed.  All compressed\n            TCP
    packets must set the C bit in every change mask, and\n            must include
    the slot identifier.\n         1  The slot identifer may be compressed.\n      The
    slot identifier must not be compressed if there is no ability\n      for the PPP
    link level to indicate an error in reception to the\n      decompression module.
    \ Synchronization after errors depends on\n      receiving a packet with the slot
    identifier.  See the discussion\n      in reference [3].\n"
  title: 4.1.  Configuration Option Format
- contents:
  - "A.  IPCP Recommended Options\n   The following Configurations Options are recommended:\n
    \     IP-Compression-Protocol -- with at least 4 slots, usually 16\n      slots.\n
    \     IP-Address -- only on dial-up lines.\n"
  title: A.  IPCP Recommended Options
- contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
  title: Security Considerations
- contents:
  - "References\n   [1]   Simpson, W., \"The Point-to-Point Protocol\", RFC 1331,
    May 1992.\n   [2]   Postel, J., \"Internet Protocol\", RFC 791, USC/Information\n
    \        Sciences Institute, September 1981.\n   [3]   Jacobson, V., \"Compressing
    TCP/IP Headers\", RFC 1144, January\n         1990.\n   [4]   Postel, J., \"The
    TCP Maximum Segment Size Option and Related\n         Topics\", RFC 879, USC/Information
    Sciences Institute, November\n         1983.\n   [5]   Mogul, J., and S. Deering,
    \"Path MTU Discovery\", RFC 1191,\n         November 1990.\n   [6]   Reynolds,
    J., and J. Postel, \"Assigned Numbers\", RFC 1060,\n         USC/Information Sciences
    Institute, March 1990.\n   [7]   Perkins, D., and R. Hobby, \"Point-to-Point Protocol
    (PPP)\n         initial configuration options\", RFC 1172, August 1990.\n"
  title: References
- contents:
  - "Acknowledgments\n   Some of the text in this document is taken from RFCs 1171
    & 1172, by\n   Drew Perkins of Carnegie Mellon University, and by Russ Hobby of
    the\n   University of California at Davis.\n   Information leading to the expanded
    IP-Compression option provided by\n   Van Jacobson at SIGCOMM '90.\n   Bill Simpson
    helped with the document formatting.\n"
  title: Acknowledgments
- contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n
    \     Brian Lloyd\n      Lloyd & Associates\n      3420 Sudbury Road\n      Cameron
    Park, California 95682\n      Phone: (916) 676-1147\n      EMail: brian@ray.lloyd.com\n"
  title: Chair's Address
- contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n      Glenn
    McGregor\n      Merit Network, Inc.\n      1071 Beal Avenue\n      Ann Arbor,
    MI 48109-2103\n      Phone: (313) 763-1203\n      EMail: Glenn.McGregor@Merit.edu\n"
  title: Author's Address
