- title: __initial_text__
  contents:
  - '                       The I-JSON Message Format

    '
- title: Abstract
  contents:
  - "Abstract\n   I-JSON (short for \"Internet JSON\") is a restricted profile of\
    \ JSON\n   designed to maximize interoperability and increase confidence that\n\
    \   software can process it successfully with predictable results.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7493.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n     1.2.  Requirements Language . . . . . . . . . . . . . . .\
    \ . . .   2\n   2.  I-JSON Messages . . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n     2.1.  Encoding and Characters . . . . . . . . . . . . . . . .\
    \ .   3\n     2.2.  Numbers . . . . . . . . . . . . . . . . . . . . . . . . .\
    \   3\n     2.3.  Object Constraints  . . . . . . . . . . . . . . . . . . .  \
    \ 3\n   3.  Software Behavior . . . . . . . . . . . . . . . . . . . . . .   4\n\
    \   4.  Recommendations for Protocol Design . . . . . . . . . . . . .   4\n  \
    \   4.1.  Top-Level Constructs  . . . . . . . . . . . . . . . . . .   4\n    \
    \ 4.2.  Must-Ignore Policy  . . . . . . . . . . . . . . . . . . .   4\n     4.3.\
    \  Time and Date Handling  . . . . . . . . . . . . . . . . .   5\n     4.4.  Binary\
    \ Data . . . . . . . . . . . . . . . . . . . . . . .   5\n   5.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .   5\n   6.  Normative References  . .\
    \ . . . . . . . . . . . . . . . . . .   5\n   Acknowledgements  . . . . . . .\
    \ . . . . . . . . . . . . . . . . .   6\n   Author's Address  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .   6\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RFC 7159 describes the JSON data interchange format, which\
    \ is widely\n   used in Internet protocols.  For historical reasons, that\n  \
    \ specification allows the use of language idioms and text encoding\n   patterns\
    \ that are likely to lead to interoperability problems and\n   software breakage,\
    \ particularly when a program receiving JSON data\n   uses automated software\
    \ to map it into native programming-language\n   structures or database records.\
    \  RFC 7159 describes practices that\n   may be used to avoid these interoperability\
    \ problems.\n   This document specifies I-JSON, short for \"Internet JSON\". \
    \ The unit\n   of definition is the \"I-JSON message\".  I-JSON messages are also\n\
    \   \"JSON texts\" as defined in RFC 7159 but with certain extra\n   constraints\
    \ that enforce the good interoperability practices\n   described in that specification.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The terms \"object\", \"member\", \"array\", \"number\"\
    , \"name\", and \"string\"\n   in this document are to be interpreted as described\
    \ in RFC 7159\n   [RFC7159].\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  I-JSON Messages
  contents:
  - "2.  I-JSON Messages\n   An I-JSON message is a JSON text, as defined by RFC 7159.\n"
- title: 2.1.  Encoding and Characters
  contents:
  - "2.1.  Encoding and Characters\n   I-JSON messages MUST be encoded using UTF-8\
    \ [RFC3629].\n   Object member names, and string values in arrays and object members,\n\
    \   MUST NOT include code points that identify Surrogates or\n   Noncharacters\
    \ as defined by [UNICODE].\n   This applies both to characters encoded directly\
    \ in UTF-8 and to\n   those which are escaped; thus, \"\\uDEAD\" is invalid because\
    \ it is an\n   unpaired surrogate, while \"\\uD800\\uDEAD\" would be legal.\n"
- title: 2.2.  Numbers
  contents:
  - "2.2.  Numbers\n   Software that implements IEEE 754-2008 binary64 (double precision)\n\
    \   numbers [IEEE754] is generally available and widely used.\n   Implementations\
    \ that generate I-JSON messages cannot assume that\n   receiving implementations\
    \ can process numeric values with greater\n   magnitude or precision than provided\
    \ by those numbers.  I-JSON\n   messages SHOULD NOT include numbers that express\
    \ greater magnitude or\n   precision than an IEEE 754 double precision number\
    \ provides, for\n   example, 1E400 or 3.141592653589793238462643383279.\n   An\
    \ I-JSON sender cannot expect a receiver to treat an integer whose\n   absolute\
    \ value is greater than 9007199254740991 (i.e., that is\n   outside the range\
    \ [-(2**53)+1, (2**53)-1]) as an exact value.\n   For applications that require\
    \ the exact interchange of numbers with\n   greater magnitude or precision, it\
    \ is RECOMMENDED to encode them in\n   JSON string values.  This requires that\
    \ the receiving program\n   understand the intended semantic of the value.  An\
    \ example would be\n   64-bit integers, even though modern hardware can deal with\
    \ them,\n   because of the limited scope of JavaScript numbers.\n"
- title: 2.3.  Object Constraints
  contents:
  - "2.3.  Object Constraints\n   Objects in I-JSON messages MUST NOT have members\
    \ with duplicate\n   names.  In this context, \"duplicate\" means that the names,\
    \ after\n   processing any escaped characters, are identical sequences of Unicode\n\
    \   characters.\n   The order of object members in an I-JSON message does not\
    \ change the\n   meaning of an I-JSON message.  A receiving implementation MAY\
    \ treat\n   two I-JSON messages as equivalent if they differ only in the order\
    \ of\n   the object members.\n"
- title: 3.  Software Behavior
  contents:
  - "3.  Software Behavior\n   A major advantage of using I-JSON is that receivers\
    \ can avoid\n   ambiguous semantics in the JSON messages they receive.  This allows\n\
    \   receivers to reject or otherwise disregard messages that do not\n   conform\
    \ to the requirements in this document for I-JSON messages.\n   Protocols that\
    \ use I-JSON messages can be written so that receiving\n   implementations are\
    \ required to reject (or, as in the case of\n   security protocols, not trust)\
    \ messages that do not satisfy the\n   constraints of I-JSON.\n   Designers of\
    \ protocols that use I-JSON messages SHOULD provide a way,\n   in this case, for\
    \ the receiver of the erroneous data to signal the\n   problem to the sender.\n"
- title: 4.  Recommendations for Protocol Design
  contents:
  - "4.  Recommendations for Protocol Design\n   I-JSON is designed for use in Internet\
    \ protocols.  The following\n   recommendations apply to the use of I-JSON in\
    \ such protocols.\n"
- title: 4.1.  Top-Level Constructs
  contents:
  - "4.1.  Top-Level Constructs\n   An I-JSON message can be any JSON value.  However,\
    \ there are software\n   implementations, coded to the older specification [RFC4627],\
    \ which\n   only accept JSON objects or JSON arrays at the top level of JSON\n\
    \   texts.  For maximum interoperability with such implementations,\n   protocol\
    \ designers SHOULD NOT use top-level JSON texts that are\n   neither objects nor\
    \ arrays.\n"
- title: 4.2.  Must-Ignore Policy
  contents:
  - "4.2.  Must-Ignore Policy\n   It is frequently the case that changes to protocols\
    \ are required\n   after they have been put in production.  Protocols that allow\
    \ the\n   introduction of new protocol elements in a way that does not disrupt\n\
    \   the operation of existing software have proven advantageous in\n   practice.\n\
    \   This can be referred to as a \"Must-Ignore\" policy, meaning that when\n \
    \  an implementation encounters a protocol element that it does not\n   recognize,\
    \ it should treat the rest of the protocol transaction as if\n   the new element\
    \ simply did not appear, and in particular, the\n   implementation MUST NOT treat\
    \ this as an error condition.  The\n   converse \"Must-Understand\" policy does\
    \ not tolerate the introduction\n   of new protocol elements, and while this has\
    \ proven necessary in\n   certain protocol designs, in general it has been found\
    \ to be overly\n   restrictive and brittle.\n   A good way to support the use\
    \ of Must-Ignore in I-JSON protocol\n   designs is to require that top-level protocol\
    \ elements must be JSON\n   objects, and to specify that members whose names are\
    \ unrecognized\n   MUST be ignored.\n"
- title: 4.3.  Time and Date Handling
  contents:
  - "4.3.  Time and Date Handling\n   Protocols often contain data items that are\
    \ designed to contain\n   timestamps or time durations.  It is RECOMMENDED that\
    \ all such data\n   items be expressed as string values in ISO 8601 format, as\
    \ specified\n   in [RFC3339], with the additional restrictions that uppercase\
    \ rather\n   than lowercase letters be used, that the timezone be included not\n\
    \   defaulted, and that optional trailing seconds be included even when\n   their\
    \ value is \"00\".  It is also RECOMMENDED that all data items\n   containing\
    \ time durations conform to the \"duration\" production in\n   Appendix A of RFC\
    \ 3339, with the same additional restrictions.\n"
- title: 4.4.  Binary Data
  contents:
  - "4.4.  Binary Data\n   When it is required that an I-JSON protocol element contain\
    \ arbitrary\n   binary data, it is RECOMMENDED that this data be encoded in a\
    \ string\n   value in base64url; see Section 5 of [RFC4648].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   All the security considerations that apply to\
    \ JSON (see RFC 7159)\n   apply to I-JSON.  There are no additional security considerations\n\
    \   specific to I-JSON.\n   Since I-JSON forbids the use of certain JSON idioms\
    \ that can lead to\n   unpredictable behavior in receiving software, it may prove\
    \ a more\n   secure basis for Internet protocols and may be a good choice for\n\
    \   protocol designers with special security needs.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [IEEE754]  IEEE, \"IEEE Standard for Floating-Point\
    \ Arithmetic\", IEEE\n              754-2008, 2008, <http://grouper.ieee.org/groups/754/>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n   \
    \           Timestamps\", RFC 3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3339>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, November 2003,\n              <http://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC4627]  Crockford, D., \"The application/json Media Type for\n        \
    \      JavaScript Object Notation (JSON)\", RFC 4627, July 2006,\n           \
    \   <http://www.rfc-editor.org/info/rfc4627>.\n   [RFC4648]  Josefsson, S., \"\
    The Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648, October\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC7159]\
    \  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n             \
    \ Interchange Format\", RFC 7159, March 2014,\n              <http://www.rfc-editor.org/info/rfc7159>.\n\
    \   [UNICODE]  The Unicode Consortium, \"The Unicode Standard\",\n           \
    \   <http://www.unicode.org/versions/latest/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   I-JSON is entirely dependent on the design of JSON, largely\
    \ due to\n   Douglas Crockford.  The specifics were strongly influenced by the\n\
    \   contributors to the design of RFC 7159 in the IETF JSON Working\n   Group.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tim Bray (editor)\n   Textuality Services\n   EMail: tbray@textuality.com\n\
    \   URI:   https://www.tbray.org/\n"
