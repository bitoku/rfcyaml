- title: __initial_text__
  contents:
  - '                        How to Use Anonymous FTP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides information for the novice Internet user\
    \ about\n   using the File Transfer Protocol (FTP).  It explains what FTP is,\n\
    \   what anonymous FTP is, and what an anonymous FTP archive site is.  It\n  \
    \ shows a sample anonymous FTP session.  It also discusses common ways\n   files\
    \ are packaged for efficient storage and transmission.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is the result of work done in the Internet\
    \ Anonymous\n   FTP Archives (IAFA) working group of the IETF.  Special thanks\
    \ are\n   due to Mark Baushke (Cisco), John Curran (BBN), Aydin Edguer (CWRU),\n\
    \   Rafal Maszkowski (Onsala Space Observatory), Marsha Perrott\n   (PREPnet),\
    \ Bob Peterson (Texas Instruments), Nathan Torkington\n   (Victoria University\
    \ of Wellington), and Stephen Tihor (NYU) for\n   excellent comments and contributions.\n"
- title: What is FTP?
  contents:
  - "What is FTP?\n   FTP refers to the File Transfer Protocol [1], one of the protocols\n\
    \   within the TCP/IP protocol suite used on the Internet.  The File\n   Transfer\
    \ Protocol makes it possible to transfer files from one\n   computer (or host)\
    \ on the Internet to another.  There are many FTP\n   implementations built on\
    \ the specification of the FTP protocol.  A\n   user of an FTP program must log\
    \ in to both hosts in order to transfer\n   a file from one to the other.\n  \
    \ It is common for a user with files on more than one host to use the\n   FTP\
    \ program to transfer files from one host to another.  In this\n   case, the user\
    \ has an account on both hosts involved, so he has\n   passwords for both hosts.\n\
    \   However, Internet users may also take advantage of a wealth of\n   information\
    \ available from archive sites by using a general purpose\n   account called \"\
    anonymous FTP\".\n"
- title: What is an Archive Site?
  contents:
  - "What is an Archive Site?\n   An archive site is a host that acts as a repository\
    \ of information,\n   much like a conventional library.  Information stored on\
    \ these\n   Internet hosts is made available for users to transfer to their local\n\
    \   sites.  Users run software to identify this information and transfer\n   it\
    \ to their own hosts.  Such a transfer is done with a program that\n   implements\
    \ the File Transfer Protocol (FTP).\n"
- title: What is Anonymous FTP?
  contents:
  - "What is Anonymous FTP?\n   Anonymous FTP is a means by which archive sites allow\
    \ general access\n   to their archives of information.  These sites create a special\n\
    \   account called \"anonymous\".  User \"anonymous\" has limited access\n   rights\
    \ to the archive host, as well as some operating restrictions.\n   In fact, the\
    \ only operations allowed are logging in using FTP,\n   listing the contents of\
    \ a limited set of directories, and retrieving\n   files.  Some sites limit the\
    \ contents of a directory listing an\n   anonymous user can see as well.  Note\
    \ that \"anonymous\" users are not\n   usually allowed to transfer files TO the\
    \ archive site, but can only\n   retrieve files from such a site.\n   Traditionally,\
    \ this special anonymous user account accepts any string\n   as a password, although\
    \ it is common to use either the password\n   \"guest\" or one's electronic mail\
    \ (e-mail) address.  Some archive\n   sites now explicitly ask for the user's\
    \ e-mail address and will not\n   allow login with the \"guest\" password.  Providing\
    \ an e-mail address\n   is a courtesy that allows archive site operators to get\
    \ some idea of\n   who is using their services.\n"
- title: What Information Do You Need to Know?
  contents:
  - "What Information Do You Need to Know?\n   To retrieve a specific file, a user\
    \ needs to know what host it is on,\n   and the pathname of the file.  A pathname\
    \ tells the directory (and\n   possibly subdirectories) that house the file, and\
    \ the name of the\n   file.  Often discussions of available files will not specifically\n\
    \   say, \"This file is available for anonymous FTP from X host with Y\n   pathname\"\
    .  However, if a file is publicly announced as available and\n   referred to as\
    \ something like pub/good-stuff on nisc.sri.com, it is a\n   good assumption that\
    \ you can try to transfer it.\n   You may also need to know if your machine uses\
    \ an ASCII, EBCDIC, or\n   other character set to know how likely a transfer of\
    \ binary\n   information will work, or whether such a transfer will require other\n\
    \   keywords, such as is true for TENEX.\n   In the general case, you may assume\
    \ that an ASCII transfer will\n   always do the right thing for plain text files.\
    \  However, more and\n   more information is being stored in various compressed\
    \ formats (which\n   are discussed later in this document), so knowing the binary\n\
    \   characteristics of your machine may be important.\n"
- title: A Sample Session
  contents:
  - "A Sample Session\n   To start an FTP session on a UNIX or VMS host, you type\
    \ \"ftp\" and the\n   host name or host IP address of the machine to which you\
    \ want to\n   connect.  For example, if you wish to access the NASA Network\n\
    \   Applications and Information Center archive site, you would normally\n   execute\
    \ one of the following commands at the UNIX prompt:\n           ftp naic.nasa.gov\n\
    \   or\n           ftp 128.102.128.6\n   Observe that the first form uses the\
    \ fully-qualified domain name and\n   the second uses the Internet address for\
    \ the same host.\n   The following is an example of connecting to the naic.nasa.gov\
    \ host\n   to retrieve STD 9, RFC 959, \"File Transfer Protocol (FTP)\" [1].\n\
    \   Note several things about the session.\n    1. Every response the FTP program\
    \ at the archive site gives\n       is preceded by a number.  These numbers are\
    \ called\n       Reply Codes and are defined in the FTP specification,\n     \
    \  RFC 959.  The text that accompanies these reply codes\n       can vary in different\
    \ FTP implementations, and usually does.\n       Also note that some FTP client\
    \ implementations (e.g., MVS\n       systems) may not echo the reply codes or\
    \ text as\n       transmitted from the remote host.  They may generate their\n\
    \       own status lines or just hide the non-fatal replies\n       from you.\
    \  For the purposes of this document, the more\n       popular UNIX interface\
    \ to the FTP client will be\n       presented.\n    2. The password you type is\
    \ never shown on your screen.\n    3. It is possible to \"browse\" in archives,\
    \ but most often users\n       already know the pathname of the file they want.\
    \  The pathname\n       for RFC 959 on this host is files/rfc/rfc959.txt.  In\
    \ the\n       example, we first connect to the 'files/rfc' directory (cd\n   \
    \    files/rfc), then get the specific file we know we want.  If you\n       do\
    \ not know the name of the file you want, a file called README\n       or something\
    \ similar (00README.1ST, AAREAD.ME, INDEX, etc.) is\n       probably the one to\
    \ retrieve first.\n   atlas.arc.nasa.gov% ftp naic.nasa.gov\n   Connected to naic.nasa.gov.\n\
    \   220 naic.nasa.gov FTP server (Wed May 4 12:15:15 PDT 1994) ready.\n   Name\
    \ (naic.nasa.gov:amarine): anonymous\n   331 Guest login ok, send your complete\
    \ e-mail address as password.\n   Password:\n   230-----------------------------------------------------------------\n\
    \   230-Welcome to the NASA Network Applications and Info Center Archive\n   230-\n\
    \   230-     Access to NAIC's online services is also available through:\n   230-\n\
    \   230-        Gopher         - naic.nasa.gov (port 70)\n   230-    World-Wide-Web\
    \ - http://naic.nasa.gov/naic/naic-home.html\n   230-\n   230-        If you experience\
    \ any problems please send email to\n   230-\n   230-                    naic@nasa.gov\n\
    \   230-\n   230-                 or call +1 (800) 858-9947\n   230-----------------------------------------------------------------\n\
    \   230-\n   230-Please read the file README\n   230-  it was last modified on\
    \ Fri Dec 10 13:06:33 1993 - 165 days ago\n   230 Guest login ok, access restrictions\
    \ apply.\n   ftp> cd files/rfc\n   250-Please read the file README.rfc\n   250-\
    \  it was last modified on Fri Jul 30 16:47:29 1993 - 298 days ago\n   250 CWD\
    \ command successful.\n   ftp> get rfc959.txt\n   200 PORT command successful.\n\
    \   150 Opening ASCII mode data connection for rfc959.txt (147316 bytes).\n  \
    \ 226 Transfer complete.\n   local: rfc959.txt remote: rfc959.txt\n   151249 bytes\
    \ received in 0.9 seconds (1.6e+02 Kbytes/s)\n   ftp> quit\n   221 Goodbye.\n\
    \   atlas.arc.nasa.gov%\n"
- title: Variations
  contents:
  - "Variations\n   The above example is of the FTP program available on UNIX systems.\n\
    \   Other operating systems also make FTP programs available.  The actual\n  \
    \ commands you type may vary somewhat with other programs.  However, in\n   general,\
    \ you will do the following with every FTP program:\n     - Log in to your local\
    \ host, and invoke the FTP program.\n     - Open a connection to the host (using\
    \ either the host name\n       or its IP address)\n     - Once connected to the\
    \ remote host, log in with username\n       \"anonymous\".\n     - Provide either\
    \ the password \"guest\" or whatever the password the\n       site requests.\n\
    \     - Issue whatever FTP commands you require, such as those to\n       change\
    \ directories or to retrieve a file.\n     - When finished, exit the FTP program,\
    \ which will close your\n       connection to the archive host.\n"
- title: Friendly Servers
  contents:
  - "Friendly Servers\n   These days, many sites are using a form of FTP that allows\
    \ them to\n   display several lines of explanatory text that help direct users\n\
    \   through their archive.  The listing of alternative services on\n   naic.nasa.gov\
    \ is an example.  If these effusive servers confuse the\n   client you are using,\
    \ try typing a hyphen ( - ) before your password\n   when you log in.  That should\
    \ disable the verbose mode of the server.\n"
- title: Other FTP Commands
  contents:
  - "Other FTP Commands\n   We have demonstrated some of the commands available with\
    \ FTP\n   programs.  Many others are possible.  For example, once you have\n \
    \  logged in to a remote host:\n     - You may ask the FTP program to display\
    \ a list of available\n       commands, typically by invoking the FTP program\
    \ without\n       arguments and typing \"help\".\n     - You may view the contents\
    \ of the directory to which you are\n       connected.  Type \"dir\" or \"ls\"\
    \ to do so.\n     - You may rename a file by using the \"get\" command's\n   \
    \    optional local file name, which follows the remote file\n       name on the\
    \ command line.  You probably should rename a\n       file when the remote file\
    \ name exceeds your local file\n       system's naming constraints, e.g., if the\
    \ remote file\n       name is too long.  An example of using the \"get\" command\n\
    \       to rename a file when transferring it might be \"get\n       really-long-named-file.txt\
    \ short.txt\".\n     - You may set BINARY mode to transfer executable programs\
    \ or files\n       of data.  Type \"binary\" to do so.  Usually\n       FTP programs\
    \ assume files use only 7 bits per byte, the norm for\n       standard ASCII-encoded\
    \ files.  The BINARY command allows you to\n       transfer files that use the\
    \ full 8 bits per byte without error,\n       but this may have implications on\
    \ how the file is transferred\n       to your local system.\n       If you are\
    \ not sure what format a file is in, you may need to\n       transfer it a second\
    \ time in the other mode (BINARY or ASCII)\n       if your first guess is wrong.\
    \  The extension at the end of the\n       file name may give you a clue.  File\
    \ name extensions are\n       described below.\n       Because some machines store\
    \ text files differently than others,\n       you may have to try your luck if\
    \ you're not sure what format\n       a file is in.  A good guess is to try ASCII\
    \ mode first, if\n       you have grounds to suspect the file is a text file.\
    \  Otherwise,\n       try BINARY mode.  Try TENEX mode as a last resort.\n   \
    \  - You may transfer multiple files at the same time.  To set this\n       mode,\
    \ type \"mget\".  You then supply a file name pattern that\n       the remote\
    \ system understands and it tries to transfer each\n       file in turn.  If your\
    \ local FTP user agent cannot transform\n       the remote file names into legal\
    \ local file names, or if there\n       are some files that must be transferred\
    \ in ASCII mode and others\n       that must be transferred in BINARY mode, you\
    \ may not be able to\n       take advantage of this facility.\n   Full details\
    \ on the commands and options available are in the FTP\n   documentation that\
    \ comes with your system.  You can also type \"help\"\n   at the FTP command prompt\
    \ for a list of command options.\n   A copy of the UNIX version of the FTP documentation\
    \ is available from\n   the online manual.  If your UNIX site has the manuals\
    \ installed, type\n   the following at the UNIX prompt:\n           % man ftp\n"
- title: The Packaging and Naming of Files
  contents:
  - "The Packaging and Naming of Files\n   Several widely used conventions allow for\
    \ efficient storage and\n   transmission of information stored at archive sites.\n\
    \   Information stored on archive sites is often \"transformed\" in three\n  \
    \ common ways.  \"Compressing\" (reducing the size of) the stored\n   information\
    \ makes more space available on the archive, and reduces\n   the amount of data\
    \ actually transferred across the network.\n   \"Bundling\" several files into\
    \ one larger file maintains the internal\n   directory structure of the components,\
    \ and allows users to transfer\n   only one larger object rather than several\
    \ (sometimes hundreds) of\n   smaller files.\n   In addition, binary data is often\
    \ converted into an ASCII format for\n   transmission, a process referred to in\
    \ this document as\n   \"transformation\".  Traditionally, Internet RFC 822-based\
    \ electronic\n   mail and USENET protocols did not allow the transmission of \"\
    binary\"\n   (8-bit) data; therefore, files in binary format had to be transformed\n\
    \   into printable 7-bit ASCII before being transmission.\n   On many systems,\
    \ various file naming conventions are used to help the\n   remote user to determine\
    \ the format of the stored information without\n   first having to retrieve the\
    \ files.  Below we list the more common\n   compression, bundling, and transformation\
    \ conventions used on the\n   Internet.  This list is not intended to be exhaustive.\
    \  In all cases\n   public domain or freely-available implementations of the programs\n\
    \   associated with these mechanisms are available on the network.\n     1) compress/uncompress\n\
    \     Filenames terminating in \".Z\" normally signify files that have been\n\
    \     compressed by the standard UNIX Lempel-Ziv \"compress\" utility.\n     There\
    \ is an equivalent program called \"uncompress\" to reverse the\n     process\
    \ and return the file to its original state.  No bundling\n     mechanism is provided,\
    \ and the resulting files are always in binary\n     format, regardless of the\
    \ original format of the input data.\n     2) atob/btoa\n     Performs a transformation\
    \ of ASCII to binary (atob) and the reverse\n     (btoa) in a standard format.\
    \  Files so transformed often have\n     filenames terminated with \".atob\".\
    \  No bundling or compression\n     mechanisms are used.\n     3) atox/xtoa\n\
    \     A data transformation standard used to convert binary\n     files to transferable\
    \ ASCII format.  Sometimes used in\n     preference to other similar mechanisms\
    \ because it is more\n     space efficient; however, it is not a compression\n\
    \     mechanism per se.  It is just more efficient in the\n     transformation\
    \ from one format to the other.  Filenames of\n     files in this format often\
    \ have the \".atox\" extension.\n     4) uuencode/uudecode\n     Transforms binary\
    \ to ASCII (\"uuencode\") and the reverse\n     (\"uudecode\") transformation\
    \ in a standard manner.\n     Originally used in the UUCP (\"Unix to Unix CoPy\"\
    )\n     mail/USENET system.  No bundling or compression mechanisms\n     are used.\
    \  Naming conventions often add a .uu at the end\n     of the file name.\n   \
    \  5) tar/untar\n     Originally a UNIX based utility for bundling (and\n    \
    \ unbundling) several files and directories into (and from)\n     a single file\
    \ (the acronym stands for \"Tape ARchive\").\n     Standard format provides no\
    \ compression mechanism.  The\n     resulting bundled file is always in binary\
    \ format\n     regardless of whether the constituent files are binary or\n   \
    \  not.  Naming conventions usually hold that the filename of\n     a \"tarfile\"\
    \ contain the sequence \".tar\" or \"-tar\".\n     6) zip/unzip\n     Often used\
    \ in IBM PC environments, these complementary programs\n     provide both bundling\
    \ and compression mechanisms.  The resulting\n     files are always in binary\
    \ format.  Files resulting from the \"zip\"\n     program are by convention terminated\
    \ with the \".zip\" filename\n     extension.\n     7) arc/unarc\n     Often used\
    \ in IBM PC environments, these complementary programs\n     provide both bundling\
    \ and compression mechanisms.  The resulting\n     files are always in binary\
    \ format.  Files stored in this format\n     often have a \".arc\" filename extension.\n\
    \     8) binhex\n     Used in the Apple MacIntosh environment, the binhex\n  \
    \   process provides bundling as well as binary to ASCII data\n     transformations.\
    \  Files in this format by convention have\n     a filename extension of \".hqx\"\
    .\n     9) shar\n     Bourse shell archives package text or binary files into\
    \ a\n     single longer file which, when executed, will create the\n     component\
    \ files.  Because this format is vulnerable to\n     misuse, most users use a\
    \ special tool called unshar to\n     decode these archives.  By convention, files\
    \ in this\n     format have a filename extension of \".shar\".\n     10) VMS_SHARE\n\
    \     DCL archives package text or binary files into a single\n     longer file\
    \ which, when executed, will created the\n     component files.  Because this\
    \ format is vulnerable to\n     misuse, care must be take to examine such an archive\n\
    \     before executing it.  By convention, files in this format\n     have a filename\
    \ extension of \".shar\".\n     11) Multipart shar/vms_share files\n     Sometimes\
    \ these shell archive files are broken into\n     multiple small parts to simplify\
    \ their transfer over other\n     forms of fileservers that share the same archive\
    \ tree.  In\n     such cases, the parts of the files are usually suffixed\n  \
    \   with a part number (e.g., xyz.01 xyz.02 xyz.03 ... or even\n     .01-of-05).\
    \  Collect all the parts, concatenate them on\n     your local system, and then\
    \ apply the procedure listed\n     above for a simple shar or vms_share file to\
    \ the\n     concatenated file you just made.\n     12) zoo\n     The zoo program\
    \ implements compression/decompression and\n     bundling/unbundling in a single\
    \ program.  Utilities\n     supporting the zoo format exist on a wide variety\
    \ of\n     systems, including Unix, MS-DOS, Macintosh, OS/2, Atari\n     ST, and\
    \ VAX VMS.  Files created by the \"zoo\" programs by\n     convention end with\
    \ the \".zoo\" filename extension.  Zoo is\n     a popular distribution format\
    \ due to the availability of\n     free implementations (both source and executable\
    \ code) on\n     a wide variety of operating systems.\n     13) gzip/gunzip\n\
    \     The Free Software Foundation GNU project adopted a variant\n     of the\
    \ zip compression mechanism as a substitute for the\n     compress/uncompress\
    \ commands.  The resulting files are\n     always in binary format.  Files resulting\
    \ from the \"gzip\"\n     program are by convention terminated with the \".z\"\
    \ or\n     \".gz\" filename extensions.  The gunzip program also\n     recognizes\
    \ \".tgz\" and \".taz\" as shorthands for \".tar.z\" or\n     \".tar.Z\".  Also,\
    \ gunzip can recognize and decompress files\n     created by the gzip, zip, compress,\
    \ or pack commands.\n     The GNU project recently began distributing and using\
    \ the\n     gzip/gunzip utilities.  Even more recently they changed\n     the\
    \ default suffix from .z to .gz, in an attempt to (1)\n     reduce confusion with\
    \ .Z, and (2) eliminate a problem with\n     case-insensitive file systems such\
    \ as MS-DOS.  The gzip\n     software is freely redistributable and has been ported\
    \ to\n     most UNIX systems, as well as Amiga, Atari, MSDOS, OS2,\n     and VMS\
    \ systems.\n   In some cases, a series of the above processes are performed to\n\
    \   produce the final file as stored on the archive.  In cases where\n   multiple\
    \ transformation processes have been used, tradition holds\n   that the original\
    \ (base) filename be changed to reflect these\n   processes, and that the associated\
    \ filename extensions be added in\n   the order in which the processes were performed.\
    \  For example, a\n   common procedure is first to bundle the original files and\n\
    \   directories using the \"tar\" process, then to \"compress\" the bundled\n\
    \   file.  Starting with a base file name of \"foobar\", the file name in\n  \
    \ the archive would become \"foobar.tar.Z\".  As this is a binary file,\n   it\
    \ would require a further transformation into printable ASCII by a\n   program\
    \ such as \"uuencode\" in order to be transmitted over\n   traditional email or\
    \ USENET facilities, so it might finally be called\n   \"foobar.tar.Z.uu.\"\n\
    \   Some operating systems can not handle multiple periods; in such cases\n  \
    \ they are often replaced by hyphen ( - ), underscore ( _ ), or by\n   detailed\
    \ instructions in the \"read me\" files in the directories.\n"
- title: Compress and Tar
  contents:
  - "Compress and Tar\n   Here is an example of the use of the \"compress/uncompress\"\
    \ and\n   \"tar/untar\" programs.\n   Suppose \"patch\" is a useful public domain\
    \ program for applying\n   program patches and updates.  You find this file at\
    \ an archive site\n   as \"patch.tar.Z\".  Now you know that the \".Z\" indicates\
    \ that the file\n   was compressed with the UNIX \"compress\" command, and the\
    \ \".tar\"\n   indicates that it was tar'ed using the UNIX \"tar\" tape archive\n\
    \   command.\n   First retrieve the file onto your machine using anonymous FTP.\
    \  To\n   unpack this program, you would first  uncompress it by typing:\n   \
    \   uncompress patch.tar.Z\n   This will uncompress the file, and in the process,\
    \ rename it to\n   \"patch.tar\".  You can then execute the \"tar\" command to\
    \ extract the\n   individual files.\n   In the example of patch.tar, you could\
    \ invoke the command as:\n      %tar xvf patch.tar\n   The files would be extracted\
    \ (that's the 'x' argument to tar) from\n   the file patch.tar (that's the 'f'\
    \ argument).  Because we use the 'v'\n   (for verbose) argument, the name of each\
    \ file is printed as it is\n   extracted.  When tar is complete you should have\
    \ all the files that\n   make up the \"patch\" program in your working directory.\n"
- title: Etiquette
  contents:
  - "Etiquette\n   Not every site that supports FTP permits anonymous tranfers.  It\
    \ is\n   wrong to try to get files from systems that have not advertised the\n\
    \   availability of such a service.\n   Remember that Internet site administrators\
    \ for archive sites have\n   made their systems available out of a sense of community.\
    \  Rarely are\n   they fully compensated for the time and effort it takes to administer\n\
    \   such a site.  There are some things users can do to make their jobs\n   somewhat\
    \ easier, such as checking with local support personnel first\n   if problems\
    \ occur before asking the archive administrator for help.\n   Most archive machines\
    \ perform other functions as well.  Please\n   respect the needs of their primary\
    \ users and restrict your FTP access\n   to non-prime hours (generally between\
    \ 1900 and 0600 hours local time\n   for that site) whenever possible.  It is\
    \ especially important to\n   remember this for sites located on another continent\
    \ or across a\n   significant body of water because most such links are relatively\
    \ slow\n   and heavily loaded.\n   In addition, some sites offering anonymous\
    \ FTP limit the number of\n   concurrent anonymous FTP logins.  If your attempt\
    \ to log onto such a\n   site results in an error message to the effect that too\
    \ many\n   anonymous FTP users are online, you should wait a while before\n  \
    \ attempting another connection rather than retrying immediately.\n   To reduce\
    \ redundant storage, you should find out how to make useful\n   the files you\
    \ fetch using FTP available to your entire organization.\n   If you retrieve and\
    \ test a program that turns out to be useful, you\n   should probably ask your\
    \ administrator to consider making the program\n   generally available, which\
    \ will reduce the redundant effort and disk\n   space resulting from multiple\
    \ individuals installing the same package\n   in their personal directories.\n\
    \   If you find an interesting file or program on an archive site, tell\n   others\
    \ about it.  You should not copy the file or program to your own\n   archive unless\
    \ you are willing to keep your copy current.\n"
- title: References
  contents:
  - "References\n   [1] Postel, J., and J. Reynolds, \"File Transfer Protocol (FTP)\"\
    , STD\n       9, RFC 959, USC/Information Sciences Institute, October 1985.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Deutsch\n   Bunyip Information Systems\n   266 Blvd.\
    \ Neptune\n   Dorval, Quebec, H9S 2L4\n   Canada\n   Phone: (514) 398-3709\n \
    \  EMail: peterd@bunyip.com\n   Alan Emtage\n   Bunyip Information Systems\n \
    \  266 Blvd. Neptune\n   Dorval, Quebec, H9S 2L4\n   Canada\n   Phone: (514) 398-3709\n\
    \   EMail: bajan@bunyip.com\n   April N. Marine\n   NASA NAIC\n   M/S 204-14\n\
    \   Ames Research Center\n   Moffett Field, CA 94035-1000\n   Phone: (415) 604-0762\n\
    \   EMail: amarine@atlas.arc.nasa.gov\n"
