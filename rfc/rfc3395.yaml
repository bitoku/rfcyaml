- title: __initial_text__
  contents:
  - ' Remote Network Monitoring MIB Protocol Identifier Reference Extensions

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines extensions to the Protocol Identifier Reference\n\
    \   document for the identification of application verb information.  It\n   updates\
    \ the Protocol Identifier Reference document but does not\n   obsolete any portion\
    \ of that document.  In particular, it describes\n   the algorithms required to\
    \ identify protocol operations (verbs)\n   within the protocol encapsulations\
    \ managed with MIBs such as the\n   Remote Network Monitoring MIB Version 2, RFC\
    \ 2021.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. The SNMP Network Management Framework ..........................2\n\
    \   2. Overview .......................................................3\n   2.1\
    \ Protocol Identifier Framework .................................3\n   2.2 Protocol\
    \ Identifier Extensions for Application Verbs ..........4\n   2.3 Terms .........................................................4\n\
    \   2.4 Relationship to the RMON-2 MIB ................................5\n   2.5\
    \ Relationship to the RMON MIB Protocol Identifier Reference.....5\n   3. Definitions\
    \ ....................................................5\n   3.1 Verb Identifier\
    \ Macro Format ..................................5\n   3.1.1 Lexical Conventions\
    \ .........................................6\n   3.1.2 Extended Grammar for the\
    \ PI Language ........................6\n   3.1.3 Mapping of the Parent Protocol\
    \ Name .........................7\n   3.1.4 Mapping of the DESCRIPTION Clause\
    \ ...........................7\n   3.1.5 Mapping of the REFERENCE Clause .............................7\n\
    \   3.1.6 Mapping of the Verb List Clause .............................7\n   3.1.6.1\
    \ Mapping of the Verb Name Field ............................8\n   3.1.6.2 Mapping\
    \ of the Verb Enum Field ............................8\n   3.2 Protocol Directory\
    \ Requirements ...............................8\n   3.2.1 Mapping of the Verb\
    \ Layer Numbering Space ...................8\n   3.2.2 Mapping of the ProtocolDirID\
    \ object .........................9\n   3.2.3 Mapping of the ProtocolDirParameters\
    \ object .................9\n   3.2.4 Mapping of the ProtocolDirLocalIndex object\
    \ ................10\n   3.2.5 Mapping of the protocolDirDescr object .....................10\n\
    \   3.2.6 Mapping of the protocolDirType object ......................10\n   3.2.7\
    \ Mapping of the protocolDirAddressMapConfig object ..........10\n   3.2.8 Mapping\
    \ of the protocolDirHostConfig object ................10\n   3.2.9 Mapping of\
    \ the protocolDirMatrixConfig object ..............10\n   3.2.10 Mapping of the\
    \ protocolDirOwner object ....................11\n   3.2.11 Mapping of the protocolDirStatus\
    \ object ...................11\n   4. Implementation Considerations .................................11\n\
    \   4.1 Stateful Protocol Decoding ...................................11\n   4.2\
    \ Packet Capture ...............................................11\n   4.3 RMON-2\
    \ MIB Collections .......................................12\n   5. Intellectual\
    \ Property .........................................12\n   6. Acknowledgements\
    \ ..............................................13\n   7. Normative References\
    \ ..........................................13\n   8. Informative References ........................................14\n\
    \   9. IANA Considerations ...........................................15\n   10.\
    \ Security Considerations ......................................15\n   Appendix\
    \ A: Usage Examples .......................................16\n   A.1 FTP Example\
    \ ..................................................16\n   A.2 POP3 Example .................................................17\n\
    \   A.3 SNMP Example .................................................18\n   A.4\
    \ HTTP Example .................................................18\n   A.5 SMTP\
    \ Example .................................................19\n   Authors' Addresses\
    \ ...............................................20\n   Full Copyright Statement..........................................21\n"
- title: 1.  The SNMP Network Management Framework
  contents:
  - "1.  The SNMP Network Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n      o  An overall architecture, described\
    \ in RFC 2571 [RFC2571].\n      o  Mechanisms for describing and naming objects\
    \ and events for the\n         purpose of management.  The first version of this\
    \ Structure of\n         Management Information (SMI) is called SMIv1 and is described\n\
    \         in STD 16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and\n    \
    \     RFC 1215 [RFC1215].  The second version, called SMIv2, is\n         described\
    \ in STD 58, RFC 2578 [RFC2578], RFC 2579 [RFC2579] and\n         RFC 2580 [RFC2580].\n\
    \      o  Message protocols for transferring management information.  The\n  \
    \       first version of the SNMP message protocol is called SNMPv1 and\n    \
    \     is described in STD 15, RFC 1157 [RFC1157].  A second version\n        \
    \ of the SNMP message protocol, which is not an Internet\n         standards track\
    \ protocol, is called SNMPv2c and is described in\n         RFC 1901 [RFC1901]\
    \ and RFC 1906 [RFC1906].  The third version\n         of the message protocol\
    \ is called SNMPv3 and is described in\n         RFC 1906 [RFC1906], RFC 2572\
    \ [RFC2572] and RFC 2574 [RFC2574].\n      o  Protocol operations for accessing\
    \ management information.  The\n         first set of protocol operations and\
    \ associated PDU formats is\n         described in STD 15, RFC 1157 [RFC1157].\
    \  A second set of\n         protocol operations and associated PDU formats is\
    \ described in\n         RFC 1905 [RFC1905].\n      o  A set of fundamental applications\
    \ is described in RFC 2573\n         [RFC2573].  The view-based access control\
    \ mechanism is\n         described in RFC 2575 [RFC2575].\n   A more detailed\
    \ introduction to the current SNMP Management Framework\n   can be found in RFC\
    \ 2570 [RFC2570].\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB.  Objects in the MIB are\n\
    \   defined using the mechanisms defined in the SMI.\n   This memo does not specify\
    \ a MIB module.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   There is a need for a standardized way of identifying the protocol\n\
    \   operations defined for particular application protocols.  Different\n   protocol\
    \ operations can have very different performance\n   characteristics, and it is\
    \ desirable to collect certain metrics at\n   this level of granularity.  This\
    \ memo defines extensions to the\n   existing protocol identifier structure [RFC2895]\
    \ and is intended to\n   update, not obsolete, the existing protocol identifier\
    \ encoding\n   rules.\n"
- title: 2.1  Protocol Identifier Framework
  contents:
  - "2.1  Protocol Identifier Framework\n   The RMON Protocol Identifier (PI) structure\
    \ [RFC2895] allows for a\n   variable number of layer identifiers.  Each layer\
    \ contributes 4\n   octets to the protocolDirID OCTET STRING and one octet to\
    \ the\n   protocolDirParameters OCTET STRING.  These two MIB objects comprise\n\
    \   the index in the protocolDirTable [RFC2021] and represent a globally\n   unique\
    \ identifier for a particular protocol encapsulation (or set of\n   encapsulations\
    \ if the wild-card base layer is used).\n"
- title: 2.2  Protocol Identifier Extensions for Application Verbs
  contents:
  - "2.2  Protocol Identifier Extensions for Application Verbs\n   The existing RMON\
    \ protocol identifier architecture requires that an\n   application verb be represented\
    \ by one additional protocol layer,\n   appended to the protocol identifier for\
    \ the parent application.\n   Since some application verbs are defined as strings\
    \ which can exceed\n   4 octets in length, an integer mapping must be provided\
    \ for each\n   string.  This memo specifies how the verb layer is structured,\
    \ as\n   well as a verb identifier macro syntax for specification of verb name\n\
    \   to integer mappings.\n"
- title: 2.3  Terms
  contents:
  - "2.3  Terms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   This document uses some terms defined in the RMON Protocol\
    \ Identifier\n   Reference document [RFC2895] and some new terms that need\n \
    \  introduction here.\n   Application Verb\n      Also called simply 'verb'. \
    \ Refers to one of potentially many\n      protocol operations that are defined\
    \ by a particular application\n      protocol.\n      Note that an application\
    \ verb is not equivalent to an application\n      protocol sub-command or opcode\
    \ within a packet containing a PDU\n      for the application.  An application\
    \ verb is a transaction type\n      and may involve several PDU types within the\
    \ application protocol\n      (e.g., SNMP Get-PDU and Response-PDU).  In some\
    \ applications, a\n      verb may encompass protocol operations pertaining to\
    \ more than one\n      protocol entry in the protocol directory (e.g., ftp and\
    \ ftp-data).\n   Connect Verb\n      The special application verb associated with\
    \ connection or session\n      setup and tear-down traffic, and not attributed\
    \ to any other verb\n      for the application.  This verb is assigned the enumeration\
    \ value\n      of zero, and the verb 'connect(0)' is implicitly defined for all\n\
    \      application protocols.\n   Parent Application\n      One of potentially\
    \ many protocol encapsulations which identifies a\n      particular application\
    \ protocol.  This term refers generically to\n      any or all such encapsulations\
    \ for a given set of application\n      verbs.\n   Verb Layer\n      The portion\
    \ of the protocol identifier octet string which\n      identifies the application\
    \ verb.\n   Verb Set\n      The group of verbs enumerated for a particular application\n\
    \      protocol.  The list of verb strings within a particular verb-\n      identifier\
    \ macro invocation is also called the verb set for that\n      verb identifier.\n"
- title: 2.4  Relationship to the RMON-2 MIB
  contents:
  - "2.4  Relationship to the RMON-2 MIB\n   The RMON-2 MIB [RFC2021] contains the\
    \ protocolDirTable MIB objects\n   used to identify all protocol encapsulations\
    \ that can be monitored by\n   a particular RMON agent.\n   This memo describes\
    \ how these MIB objects are mapped by an\n   implementation for entries which\
    \ identify application verbs. This\n   document does not define any new MIB objects\
    \ to identify application\n   verbs.  The applicability of the definitions in\
    \ this document is not\n   limited to the RMON-2 MIB. Other specifications which\
    \ utilize the\n   RMON-2 protocolDirTable and/or the protocol identifier macros\
    \ which\n   it represents can also utilize the application verb macro definitions\n\
    \   contained in this document.\n"
- title: 2.5  Relationship to the RMON MIB Protocol Identifier Reference
  contents:
  - "2.5  Relationship to the RMON MIB Protocol Identifier Reference\n   The RMON\
    \ MIB Protocol Identifier Reference [RFC2895] defines the RMON\n   Protocol Identifier\
    \ Macro Specification Language as well as the\n   encoding rules for the ProtocolDirID\
    \ and protocolDirParameters OCTET\n   STRINGs.  This memo defines extensions to\
    \ the Protocol Identifier\n   Reference for the identification of application\
    \ verb information.  It\n   does not obsolete any portion of the Protocol Identifier\
    \ Reference\n   document.\n"
- title: 3.  Definitions
  contents:
  - '3.  Definitions

    '
- title: 3.1  Verb Identifier Macro Format
  contents:
  - "3.1  Verb Identifier Macro Format\n   The following example is meant to introduce\
    \ the verb-identifier\n   macro.  This macro-like construct is used to represent\
    \ protocol verbs\n   for a specific parent application.\n"
- title: 3.1.1  Lexical Conventions
  contents:
  - "3.1.1  Lexical Conventions\n   The following keyword is added to the PI language:\n\
    \       VERB-IDENTIFIER\n"
- title: 3.1.2  Extended Grammar for the PI Language
  contents:
  - "3.1.2  Extended Grammar for the PI Language\n   The following is the extended\
    \ BNF notation for the grammar with\n   starting symbol <piFile>.  It is for representing\
    \ verb identifier\n   macros.  Note that only the term <piFile> is actually modified\
    \ from\n   the definition in [RFC2895].  The <piDefinition> syntax is not\n  \
    \ reproduced here, since this memo is intended to extend that\n   definition,\
    \ not replace it.\n       -- a file containing one or more\n       -- Protocol\
    \ Identifier (PI) definitions\n       <piFile> = [ <piDefinition> | <piVerbDefinition>\
    \ ]...\n       -- a PI definition\n       <piVerbDefinition> =\n         [<wspace>]\
    \ <parentProtoName> <wspace> \"VERB-IDENTIFIER\"\n               <wspace> \"DESCRIPTION\"\
    \ <wspace> string\n             [ <wspace> \"REFERENCE\" <wspace> string ]\n \
    \            [<wspace>] \"::=\" [<wspace>]\n             \"{\" [<wspace>] <verbList>\
    \ [<wspace>] \"}\" [<wspace>]\n       -- a list of verb identifier string\n  \
    \     <verbList> = <verbId> [ [<wspace>] \",\" [<wspace>] <verbId> ]...\n    \
    \   -- a verb identifier string\n       <verbId> = <verbName> [<wspace>] \"(\"\
    \ [<wspace>]\n                 <verbEnum> [<wspace>] \")\" [<wspace>]\n      \
    \ -- a protocol name\n       <parentProtoName> = <protoName>\n       -- a verb\
    \ name\n       <verbName> = <lcname>\n       -- a verb enumeration\n       <verbEnum>\
    \ = <posNum>\n       -- a positive integer\n       <posNum> = any integer value\
    \ greater than zero and\n                  less than 16,777,216\n       -- <piDefinition>\
    \ syntax is defined in [RFC2895]\n       -- <protoName> syntax is defined in [RFC2895]\n\
    \       -- <wspace> syntax is defined in [RFC2895]\n       -- <lcname> syntax\
    \ is defined in [RFC2895]\n"
- title: 3.1.3  Mapping of the Parent Protocol Name
  contents:
  - "3.1.3  Mapping of the Parent Protocol Name\n   The \"parentProtoName\" value,\
    \ called the \"parent protocol name\",\n   SHOULD be an ASCII string consisting\
    \ of 1 to 64 characters.  (These\n   names are intended to appear in IETF documentation,\
    \ so the use of\n   UTF-8 is not appropriate.)  The encoding rules are exactly\
    \ as\n   specified in section 6.2.4 of [RFC2895] for the mapping of the\n   protocol\
    \ name field.  The value for <parentProtoName> (which is\n   called the \"parent\
    \ protocol name\") MUST be the value of a protocol\n   identifier defined as specified\
    \ for <protoName> in section 3.2.4 of\n   [RFC2895].  The value of <parentProtoName>\
    \ MUST specify a <protoName>\n   defined in the <piFile>.\n   A protocol identifier\
    \ macro SHOULD exist in the <piFile> for at least\n   one encapsulation of the\
    \ parent application protocol if any verb\n   identifier macros referencing that\
    \ parent application are present in\n   the <piFile>.\n"
- title: 3.1.4  Mapping of the DESCRIPTION Clause
  contents:
  - "3.1.4  Mapping of the DESCRIPTION Clause\n   The DESCRIPTION clause provides\
    \ a textual description of the protocol\n   verb set identified by this macro.\
    \  It SHOULD NOT contain details\n   about items covered by the REFERENCE clause.\
    \  The DESCRIPTION clause\n   MUST be present in all verb-identifier macro declarations.\n"
- title: 3.1.5  Mapping of the REFERENCE Clause
  contents:
  - "3.1.5  Mapping of the REFERENCE Clause\n   If a publicly available reference\
    \ document exists for this set of\n   application protocol verbs, it SHOULD be\
    \ listed here.  Typically this\n   will be a URL, otherwise it will be the name\
    \ and address of the\n   controlling body.\n   The REFERENCE clause is optional\
    \ but SHOULD be present if an\n   authoritative reference exists which specifies\
    \ the application\n   protocol verbs defined in the <verbList> section of this\
    \ macro.\n"
- title: 3.1.6  Mapping of the Verb List Clause
  contents:
  - "3.1.6  Mapping of the Verb List Clause\n   The verb list clause MUST be present.\
    \  It is used to identify a list\n   of application verb names and associate a\
    \ numeric constant with each\n   verb name.  At least one verb MUST be specified\
    \ and a maximum of\n   16,777,215 (2^^24 - 1) verbs MAY be specified.  This enumerated\
    \ list\n   SHOULD be densely numbered (i.e., valued from '1' to 'N', where 'N'\n\
    \   is the total number of verbs defined in the macro).\n"
- title: 3.1.6.1  Mapping of the Verb Name Field
  contents:
  - "3.1.6.1  Mapping of the Verb Name Field\n   The <verbName> field is case-sensitive\
    \ and SHOULD be set to the most\n   appropriate string name for each application\
    \ verb.  If such a\n   descriptive string is defined in an authoritative document\
    \ then that\n   string SHOULD be used.  If no such string exists then an appropriate\n\
    \   but arbitrary string should be selected for this value.\n   Verb names MUST\
    \ be unique for a particular parent application.  Note\n   that the special 'connect(0)'\
    \ verb is implicitly defined for each\n   application protocol.  It is possible\
    \ for an explicit definition of\n   this verb (e.g., 'connect(8)' for http) to\
    \ exist for a protocol, as\n   well as the implicit 'connect(0)' verb.\n"
- title: 3.1.6.2  Mapping of the Verb Enum Field
  contents:
  - "3.1.6.2  Mapping of the Verb Enum Field\n   The <verbEnum> field MUST be unique\
    \ for all verbs associated with a\n   particular parent application.  This field\
    \ SHOULD contain a value\n   between '1' and '16,777,215' inclusive.\n"
- title: 3.2  Protocol Directory Requirements
  contents:
  - "3.2  Protocol Directory Requirements\n   This section defines how the protocolDirTable\
    \ should be populated for\n   any application verb identified with a verb-identifier\
    \ macro.\n   An agent MUST implement all applicable protocolDirTable MIB objects\n\
    \   on behalf of each supported application verb.\n"
- title: 3.2.1  Mapping of the Verb Layer Numbering Space
  contents:
  - "3.2.1  Mapping of the Verb Layer Numbering Space\n   The verb layer consists\
    \ of the 4 octets within the protocolDirID\n   INDEX field which identify a particular\
    \ application verb.\n                     Figure 1\n                 Verb Layer\
    \ Format\n                 -----------------\n            protocolDirID string\
    \ fragment\n        ---+--------+--------+--------+--------+\n           | resrvd\
    \ |                          |\n        .. | set to |  verb enumeration value\
    \  |\n           | zero   |   (a)     (b)      (c)   |\n        ---+--------+--------+--------+--------+\
    \ octet\n           |    1   |             3            | count\n   The first\
    \ octet is reserved for future use and MUST be set to zero.\n   The next three\
    \ octets identify the <verbEnum> field used to enumerate\n   the particular application\
    \ verb represented by the <verbName> field.\n   This field is a 24-bit unsigned\
    \ integer, encoded in network byte\n   order.\n   The value zero is reserved to\
    \ identify the special 'connect(0)' verb.\n   This verb enumeration value (i.e.,\
    \ '0' part of 'connect(0)') MUST NOT\n   be redefined in a verb identifier macro\
    \ verb list.  Note that the\n   verb name 'connect' is not reserved and MAY be\
    \ redefined in a verb\n   list.\n"
- title: 3.2.2  Mapping of the ProtocolDirID object
  contents:
  - "3.2.2  Mapping of the ProtocolDirID object\n   The protocolDirID OCTET STRING\
    \ value for a particular application\n   verb is represented by the protocolDirID\
    \ value for the parent\n   application, appended with the verb's layer identifier\
    \ value.\n                        Figure 2\n              ProtocolDirID Format\
    \ for Verbs\n              ------------------------------\n                protocolDirID\
    \ string\n           +--------+--------+--------+--------+\n           |     \
    \   parent            |  verb  |\n           |    protocolDirID         | layer\
    \  |\n           |        string            | value  |\n           +--------+--------+--------+--------+\
    \ octet\n           |   length of parent ID    |   4    | count\n   The protocolDirID\
    \ object is encoded as the protocolDirID value of the\n   parent application,\
    \ followed by four additional octets representing\n   the verb layer.  The verb\
    \ layer value is encoded as [0.a.b.c] where\n   'a' is the high order byte, 'b'\
    \ is the middle order byte, and 'c' is\n   the low order byte of the <verbEnum>\
    \ field for the specific\n   application verb value. A valid PI verb enumeration\
    \ will be encoded\n   in the range \"0.0.0.0\" to \"0.255.255.255\", where the\
    \ special value\n   \"0.0.0.0\" is reserved for the implicitly defined 'connect(0)'\
    \ verb.\n"
- title: 3.2.3  Mapping of the ProtocolDirParameters object
  contents:
  - "3.2.3  Mapping of the ProtocolDirParameters object\n   The protocolDirParameters\
    \ OCTET STRING value for a particular\n   application verb is represented by the\
    \ protocolDirParameters value\n   for the parent application, appended with one\
    \ octet containing the\n   value zero.  Although not actually used, this field\
    \ is included to\n   conform to the encoding rules defined in the Protocol Identifiers\n\
    \   Reference [RFC2895].\n"
- title: 3.2.4  Mapping of the ProtocolDirLocalIndex object
  contents:
  - "3.2.4  Mapping of the ProtocolDirLocalIndex object\n   The agent MUST assign\
    \ an appropriate protocolDirLocalIndex value for\n   each application verb according\
    \ to the encoding rules defined for\n   this object in [RFC2021] and [RFC2895].\n"
- title: 3.2.5  Mapping of the protocolDirDescr object
  contents:
  - "3.2.5  Mapping of the protocolDirDescr object\n   The agent MUST convey the <verbName>\
    \ value for a particular\n   application verb in the protocolDirDescr object.\
    \  This object SHOULD\n   be encoded as the protocolDirDescr value for the parent\
    \ application\n   appended with a 'dot' character, followed by the exact text\
    \ contained\n   in the <verbName> field.\n"
- title: 3.2.6  Mapping of the protocolDirType object
  contents:
  - "3.2.6  Mapping of the protocolDirType object\n   The agent MUST set the protocolDirType\
    \ object for each application\n   verb to the value representing the empty bit\
    \ set ( {} ).\n"
- title: 3.2.7  Mapping of the protocolDirAddressMapConfig object
  contents:
  - "3.2.7  Mapping of the protocolDirAddressMapConfig object\n   The agent MUST set\
    \ the protocolDirAddressMapConfig object for each\n   application verb to the\
    \ value 'notSupported(1)'.\n"
- title: 3.2.8  Mapping of the protocolDirHostConfig object
  contents:
  - "3.2.8  Mapping of the protocolDirHostConfig object\n   The agent MUST set the\
    \ protocolDirHostConfig object for each\n   application verb present in the protocol\
    \ directory according to the\n   monitoring capabilities for each verb.  The agent\
    \ MAY set this object\n   to the same value as configured in the parent application\n\
    \   protocolDirHostConfig object.  The agent MAY choose to transition\n   this\
    \ object from the value 'supportedOn(2)' to 'supportedOff(3)' if\n   the parent\
    \ application protocolDirHostConfig object first transitions\n   from 'supportedOn(2)'\
    \ to 'supportedOff(3)'.\n"
- title: 3.2.9  Mapping of the protocolDirMatrixConfig object
  contents:
  - "3.2.9  Mapping of the protocolDirMatrixConfig object\n   The agent MUST set the\
    \ protocolDirMatrixConfig object for each\n   application verb according to the\
    \ monitoring capabilities for each\n   verb.  The agent MAY set this object to\
    \ the same value as configured\n   in the parent application protocolDirMatrixConfig\
    \ object.  The agent\n   MAY choose to transition this object from the value 'supportedOn(2)'\n\
    \   to 'supportedOff(3)' if the parent application\n   protocolDirMatrixConfig\
    \ object first transitions from\n   'supportedOn(2)' to 'supportedOff(3)'.\n"
- title: 3.2.10  Mapping of the protocolDirOwner object
  contents:
  - "3.2.10  Mapping of the protocolDirOwner object\n   This object is encoded exactly\
    \ the same for application verbs as for\n   other protocolDirTable entries, according\
    \ to the rules specified in\n   the RMON-2 MIB [RFC2021].\n"
- title: 3.2.11  Mapping of the protocolDirStatus object
  contents:
  - "3.2.11  Mapping of the protocolDirStatus object\n   This object is encoded exactly\
    \ the same for application verbs as for\n   other protocolDirTable entries, according\
    \ to the rules specified in\n   RMON-2 MIB [RFC2021].\n"
- title: 4.  Implementation Considerations
  contents:
  - "4.  Implementation Considerations\n   This section discusses the implementation\
    \ implications for agents\n   which support verbs in the protocol directory and\
    \ the RMON\n   collections which utilize the protocol directory.\n"
- title: 4.1  Stateful Protocol Decoding
  contents:
  - "4.1  Stateful Protocol Decoding\n   Implementations of the RMON-2 MIB for application\
    \ layer and network\n   layer protocols typically require little if any state\
    \ to be\n   maintained by the probe.  The probe can generally decide whether to\n\
    \   count a packet and its octets on the packet's own merits, without\n   referencing\
    \ or updating any state information.\n   Implementations of the RMON-2 MIB at\
    \ the verb layer will, for many\n   protocols, need to maintain state information\
    \ in order to correctly\n   classify a packet as \"belonging\" to one verb or\
    \ another.  The\n   examples below illustrate this point.\n   For SNMP over UDP,\
    \ a Response-PDU for an SNMP Get-PDU can't be\n   distinguished from a Response-PDU\
    \ for a Getnext-PDU.  A probe would\n   need to maintain state information in\
    \ order to correlate a Response-\n   PDU from B to A with a previous request from\
    \ A to B.\n   For application protocols carried over a stream-based transport\
    \ such\n   as TCP, the information required to identify an application verb can\n\
    \   span several packets.  A probe would need to follow the transport-\n   layer\
    \ flow in order to correctly parse the application-layer data.\n"
- title: 4.2  Packet Capture
  contents:
  - "4.2  Packet Capture\n   For packet capture based on verb-layer protocol directory\
    \ filtering,\n   the decision to include a packet in the capture buffer may need\
    \ to be\n   deferred until the packet can be conclusively attributed to a\n  \
    \ particular verb.  A probe may need to pre-buffer packets while\n   deciding\
    \ to include or exclude them from capture based on other\n   packets that have\
    \ not yet arrived.\n"
- title: 4.3  RMON-2 MIB Collections
  contents:
  - "4.3  RMON-2 MIB Collections\n   Data collections such as the protocol distribution\
    \ or Application\n   Layer Host Table (alHostTable) require that each packet is\
    \ counted\n   only once, i.e., a given packet is fully classified as a single\n\
    \   protocol encapsulation which resolves to a single leaf entry in the\n   protocol\
    \ directory.  Also, octet counters related to protocol\n   classification are\
    \ incremented by the entire size of packet, not just\n   the octets associated\
    \ with a particular encapsulation layer.\n   It is possible that particular application\
    \ protocols will allow\n   multiple types of verbs to be present in a single packet.\
    \  In this\n   case, the agent MUST choose one verb type, and therefore one protocol\n\
    \   directory entry, in order to properly count such a packet.\n   It is an implementation-specific\
    \ matter as to which verb type an\n   agent selects to identify a packet in the\
    \ event more than one verb\n   type is present in that packet.  Some possible\
    \ choices include:\n      -  the first verb type encountered in the packet\n \
    \     -  the verb type with the most instances in the packet\n      -  the verb\
    \ type using the largest number of octets in the packet\n      -  the most 'interesting'\
    \ verb type in the packet (based on\n         knowledge of that application protocol).\n"
- title: 5.  Intellectual Property
  contents:
  - "5.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This memo is a product of the RMONMIB WG.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC1905] SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K., Rose, M.\n             and S. Waldbusser, \"Protocol Operations for Version\
    \ 2 of\n             the Simple Network Management Protocol (SNMPv2)\", RFC 1905,\n\
    \             January 1996.\n   [RFC1906] SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K., Rose, M.\n             and S.  Waldbusser, \"Transport Mappings for Version\
    \ 2 of\n             the Simple Network Management Protocol (SNMPv2)\", RFC 1906,\n\
    \             January 1996.\n   [RFC2021] Waldbusser, S., \"Remote Network Monitoring\
    \ MIB (RMON-2)\",\n             RFC 2021, January 1997.\n   [RFC2026] Bradner,\
    \ S., \"The Internet Standards Process -- Revision\n             3\", BCP 9, RFC\
    \ 2026, October 1996.\n   [RFC2119] Bradner, S., \"Key words for use in RFCs to\
    \ Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2571] Harrington, D., Presuhn, R. and B. Wijnen, \"An Architecture\n \
    \            for Describing SNMP Management Frameworks\", RFC 2571, April\n  \
    \           1999.\n   [RFC2572] Case, J., Harrington D., Presuhn R. and B. Wijnen,\
    \ \"Message\n             Processing and Dispatching for the Simple Network\n\
    \             Management Protocol (SNMP)\", RFC 2572, April 1999.\n   [RFC2573]\
    \ Levi, D., Meyer, P. and B. Stewart, \"SNMPv3 Applications\",\n             RFC\
    \ 2573, April 1999.\n   [RFC2574] Blumenthal, U. and B. Wijnen, \"User-based Security\
    \ Model\n             (USM) for version 3 of the Simple Network Management\n \
    \            Protocol (SNMPv3)\", RFC 2574, April 1999.\n   [RFC2575] Wijnen,\
    \ B., Presuhn, R. and K. McCloghrie, \"View-based\n             Access Control\
    \ Model (VACM) for the Simple Network\n             Management Protocol (SNMP)\"\
    , RFC 2575, April 1999.\n   [RFC2578] McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J.,\n             Rose, M.  and S. Waldbusser, \"Structure of Management\n\
    \             Information Version 2 (SMIv2)\", STD 58, RFC 2578, April\n     \
    \        1999.\n   [RFC2579] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\
    \ J.,\n             Rose, M.  and S. Waldbusser, \"Textual Conventions for\n \
    \            SMIv2\", STD 58, RFC 2579, April 1999.\n   [RFC2580] McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J.,\n             Rose, M.  and S.\
    \ Waldbusser, \"Conformance Statements for\n             SMIv2\", STD 58, RFC\
    \ 2580, April 1999.\n   [RFC2895] Bierman, A., Bucci, C. and R. Iddon, \"Remote\
    \ Network\n             Monitoring MIB Protocol Identifiers\", RFC 2895, August\n\
    \             2000.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [RFC1155] Rose, M. and K. McCloghrie, \"Structure\
    \ and Identification\n             of Management Information for TCP/IP-based\
    \ Internets\", STD\n             16, RFC 1155, May 1990.\n   [RFC1157] Case, J.,\
    \ Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n             Network Management\
    \ Protocol\", STD 15, RFC 1157, May 1990.\n   [RFC1212] Rose, M. and K. McCloghrie,\
    \ \"Concise MIB Definitions\", STD\n             16, RFC 1212, March 1991.\n \
    \  [RFC1215] Rose, M., \"A Convention for Defining Traps for use with the\n  \
    \           SNMP\", RFC 1215, March 1991.\n   [RFC1901] SNMPv2 Working Group,\
    \ Case, J., McCloghrie, K., Rose, M.\n             and S.  Waldbusser, \"Introduction\
    \ to Community-based\n             SNMPv2\", RFC 1901, January 1996.\n   [RFC2570]\
    \ Case, J., Mundy, R., Partain, D. and B. Stewart,\n             \"Introduction\
    \ to Version 3 of the Internet-standard Network\n             Management Framework\"\
    , RFC 2570, April 1999.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   At this time there are no application protocol verbs\
    \ defined that\n   require IANA registration, similar to the 'ianaAssigned' protocol\n\
    \   identifiers found in RFC 2895.  It is remotely possible that a future\n  \
    \ version of this document will contain application verb definitions\n   which\
    \ require assignment in the 'ianaAssigned' protocol identifier\n   subtree.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This memo defines the structure of a portion\
    \ of the Remote Monitoring\n   MIB framework, but does not define any MIB objects\
    \ or protocol\n   operations.  Instead, it defines algorithms for representing\n\
    \   application protocol verbs in RMON Protocol Identifiers.  It does not\n  \
    \ introduce any new security risks into a managed system.\n   However, if an MIB\
    \ collection is designed which utilizes this type of\n   Protocol Identifier,\
    \ then such a collection may expose which verbs in\n   an application protocol\
    \ are used in a network.  Inclusion of this\n   additional information may require\
    \ more consideration for protection.\n   MIB writers should address such considerations.\n"
- title: 'Appendix A: Usage Examples'
  contents:
  - "Appendix A: Usage Examples\n   The following examples are listed to demonstrate\
    \ how RMON verb\n   identifiers are declared.\n"
- title: A.1  FTP Example
  contents:
  - "A.1  FTP Example\n   This example defines verb enumeration values for the File\
    \ Transfer\n   Protocol as defined in RFC 959 and updated by RFC 2228 and RFC\
    \ 2640.\n   Note that verb name strings specified in the <verbName> field are\
    \ not\n   limited to 4 characters in length. In the FTP protocol, all the\n  \
    \ command names are 4 characters in length and the verb name string\n   should\
    \ match the official command name as closely as possible.\n   ftp VERB-IDENTIFIER\n\
    \       DESCRIPTION\n         \"The set of verbs for FTP is derived from the list\n\
    \          of commands defined for the File Transfer Protocol,\n          which\
    \ are identified by case-insensitive strings.\n          The commands are simply\
    \ listed in the order found\n          in the FTP documentation.\"\n       REFERENCE\n\
    \         \"File Transfer Protocol, RFC 959, Section 4.1;\n          FTP Security\
    \ Extensions, RFC 2228, Section 3;\n          Internationalization of the File\
    \ Transfer Protocol,\n          RFC 2640, Section 4.1.\"\n       ::= {\n     \
    \        user(1),     -- USER NAME\n             pass(2),     -- PASSWORD\n  \
    \           acct(3),     -- ACCOUNT\n             cwd(4),      -- CHANGE WORKING\
    \ DIRECTORY\n             cdup(5),     -- CHANGE TO PARENT DIRECTORY\n       \
    \      smnt(6),     -- STRUCTURE MOUNT\n             rein(7),     -- REINITIALIZE\n\
    \             quit(8),     -- LOGOUT\n             port(9),     -- DATA PORT\n\
    \             pasv(10),    -- PASSIVE\n             type(11),    -- REPRESENTATION\
    \ TYPE\n             stru(12),    -- FILE STRUCTURE\n             mode(13),  \
    \  -- TRANSFER MODE\n             retr(14),    -- RETRIEVE\n             stor(15),\
    \    -- STORE\n             stou(16),    -- STORE UNIQUE\n             appe(17),\
    \    -- APPEND (with create)\n             allo(18),    -- ALLOCATE\n        \
    \     rest(19),    -- RESTART\n             rnfr(20),    -- RENAME FROM\n    \
    \         rnto(21),    -- RENAME TO\n             abor(22),    -- ABORT\n    \
    \         dele(23),    -- DELETE\n             rmd(24),     -- REMOVE DIRECTORY\n\
    \             mkd(25),     -- MAKE DIRECTORY\n             pwd(26),     -- PRINT\
    \ WORKING DIRECTORY\n             list(27),    -- LIST\n             nlst(28),\
    \    -- NAME LIST\n             site(29),    -- SITE PARAMETERS\n            \
    \ syst(30),    -- SYSTEM\n             stat(31),    -- STATUS\n             help(32),\
    \    -- HELP\n             noop(33),    -- NOOP\n             auth(34),    --\
    \ AUTHENTICATION/SECURITY MECHANISM\n             adat(35),    -- AUTHENTICATION/SECURITY\
    \ DATA\n             pbsz(36),    -- PROTECTION BUFFER SIZE\n             prot(37),\
    \    -- DATA CHANNEL PROTECTION LEVEL\n             ccc(38),     -- CLEAR COMMAND\
    \ CHANNEL\n             mic(39),     -- INTEGRITY PROTECTED COMMAND\n        \
    \     conf(40),    -- CONFIDENTIALITY PROTECTED COMMAND\n             enc(41),\
    \     -- PRIVACY PROTECTED COMMAND\n             lang(42)     -- LANGUAGE\n  \
    \    }\n"
- title: A.2  POP3 Example
  contents:
  - "A.2  POP3 Example\n   This example defines verb enumeration values for the Post\
    \ Office\n   Protocol, Version 3, as defined in RFC 1939 and updated by RFC 2449.\n\
    \   pop3 VERB-IDENTIFIER\n       DESCRIPTION\n         \"The set of verbs for\
    \ POP3 is derived from the list\n          of commands defined for the Post Office\
    \ Protocol,\n          which are identified by case-insensitive strings.\n   \
    \       The commands are simply listed in the order found\n          in the POP3\
    \ command summary.\"\n       REFERENCE\n         \"Post Office Protocol, Version\
    \ 3, RFC 1939, Section 9;\n          POP3 Extension Mechanism, RFC 2449, Section\
    \ 5.\"\n       ::= {\n             user(1),\n             pass(2),\n         \
    \    quit(3),\n             stat(4),\n             list(5),\n             retr(6),\n\
    \             dele(7),\n             noop(8),\n             rset(9),\n       \
    \      apop(10),\n             top(11),\n             uidl(12),\n            \
    \ capa(13)\n       }\n"
- title: A.3  SNMP Example
  contents:
  - "A.3  SNMP Example\n   This example defines verb enumeration values for the Simple\
    \ Network\n   Management Protocol, as defined in RFC 1905.\n   snmp VERB-IDENTIFIER\n\
    \       DESCRIPTION\n         \"The set of verbs for SNMP is derived from the\
    \ list\n          of PDU transaction types in the Protocol Operations\n      \
    \    document for SNMPv2.  Note that the 'Response'\n          and 'Report' PDUs\
    \ are not considered verbs, but are\n          classified as belonging to the\
    \ transaction type\n          associated with the request PDU.\"\n       REFERENCE\n\
    \         \"Protocol Operations for Version 2 of the\n          Simple Network\
    \ Management Protocol (SNMPv2),\n          RFC 1905, Section 3.\"\n       ::=\
    \ {\n             get(1),\n             get-next(2),\n             get-bulk(3),\n\
    \             set(4),\n             inform-request(5),\n             trap(6)\n\
    \       }\n"
- title: A.4  HTTP Example
  contents:
  - "A.4  HTTP Example\n   This example defines verb enumeration values for the Hypertext\n\
    \   Transfer Protocol, version 1.1, as defined in RFC 2616.\n   http VERB-IDENTIFIER\n\
    \       DESCRIPTION\n         \"The set of verbs for HTTP is derived from the\
    \ list\n          of methods defined for the Hypertext Transfer Protocol,\n  \
    \        which are identified by case-sensitive strings.\n          The commands\
    \ are simply listed in the order found\n          in the HTTP/1.1 documentation.\
    \  Methods commonly used\n          in HTTP/1.0 are a proper subset of those used\
    \ in HTTP/1.1.\n          Both versions of the protocol are in current use.\"\n\
    \       REFERENCE\n          \"Hypertext Transfer Protocol -- HTTP/1.1, RFC 2616,\n\
    \          Section 9; Hypertext Transfer Protocol -- HTTP/1.0, RFC\n         \
    \ 1945, Section 8.\"\n       ::= {\n             options(1),\n             get(2),\n\
    \             head(3),\n             post(4),\n             put(5),\n        \
    \     delete(6),\n             trace(7),\n             connect(8)  -- reserved\
    \ for future use by HTTP/1.1\n       }\n"
- title: A.5  SMTP Example
  contents:
  - "A.5  SMTP Example\n   This example defines verb enumeration values for the Simple\
    \ Mail\n   Transfer Protocol as defined in RFC 2821.\n   smtp VERB-IDENTIFIER\n\
    \       DESCRIPTION\n       \"The set of verbs for SMTP is derived from the set\
    \ of commands\n        defined for the protocol.  These commands are identified\n\
    \        by case-insensitive strings.  Commands are listed in the\n        order\
    \ found in RFC 2821.  The special \"xcmd\" verb is defined\n        here as a\
    \ catch-all for private-use commands, which must\n        start with the letter\
    \ 'X'.\"\n       REFERENCE\n         \"Simple Mail Transfer Protocol -- RFC 2821,\
    \ sections 4.1.1\n          and 4.1.5.\"\n       ::= {\n             ehlo(1),\
    \  -- Extended HELLO (4.1.1.1)\n             helo(2),  -- HELLO (4.1.1.1)\n  \
    \           mail(3),  -- MAIL (4.1.1.2)\n             rcpt(4),  -- RECIPIENT (4.1.1.3)\n\
    \             data(5),  -- DATA (4.1.1.4)\n             rset(6),  -- RESET (4.1.1.5)\n\
    \             vrfy(7),  -- VERIFY (4.1.1.6)\n             expn(8),  -- EXPAND\
    \ (4.1.1.7)\n             help(9),  -- HELP (4.1.1.8)\n             noop(10),\
    \ -- NOOP (4.1.1.9)\n             quit(11), -- QUIT (4.1.1.10)\n             xcmd(12)\
    \  -- Catch-all for private-use \"X\" commands (4.1.5)\n       }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   Cisco Systems, Inc.\n   170 West Tasman\
    \ Dr\n   San Jose, CA USA 95134\n   Phone: +1 408-527-3711\n   EMail: abierman@cisco.com\n\
    \   Chris Bucci\n   Cisco Systems, Inc.\n   170 West Tasman Dr\n   San Jose, CA\
    \ USA 95134\n   Phone: +1 408-527-5337\n   EMail: cbucci@cisco.com\n   Russell\
    \ Dietz\n   Hifn, Inc.\n   750 University Ave\n   Los Gatos, CA, USA 95032-7695\n\
    \   Phone: +1 408-399-3623\n   EMail: rdietz@hifn.com\n   Albin Warth\n   EMail:\
    \ dahoss@earthlink.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
