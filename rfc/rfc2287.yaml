- title: __initial_text__
  contents:
  - '      Definitions of System-Level Managed Objects for Applications

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   5.2.2 sysApplElmtRunTable and  sysApplElmtPastRunTable\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo defines a portion of the Management Information Base\
    \ (MIB)\n   for use with network management protocols in the Internet community.\n\
    \   In particular, it describes a basic set of managed objects for fault,\n  \
    \ configuration and performance management of applications from a\n   systems\
    \ perspective.  More specifically, the managed objects are\n   restricted to information\
    \ that can be determined from the system\n   itself and which does not require\
    \ special instrumentation within the\n   applications to make the information\
    \ available.\n   This memo does not specify a standard for the Internet community.\n"
- title: 2.  The SNMPv2 Network Management Framework
  contents:
  - "2.  The SNMPv2 Network Management Framework\n   The SNMPv2 Network Management\
    \ Framework consists of the following\n   major components:\n   o    RFC 1902\
    \ Structure of Management Information for Version\n        2 of the Simple Network\
    \ Management Protocol (SNMPv2) [2]\n   o    RFC 1903 Textual Conventions for Version\
    \ 2 of the Simple\n        Network Management Protocol (SNMPv2) [3]\n   o    RFC\
    \ 1904 Conformance Statements for Version 2 of the\n        Simple Network Management\
    \ Protocol (SNMPv2) [4]\n   o    RFC 1905 Protocol Operations for Version 2 of\
    \ the Simple\n        Network Management Protocol (SNMPv2) [5]\n   o    RFC 1906\
    \ Transport Mappings for Version 2 of the Simple\n        Network Management Protocol\
    \ (SNMPv2) [6]\n   o    RFC 1907 Management Information Base for Version 2 of\
    \ the\n        Simple Network Management Protocol (SNMPv2) [7]\n   o    RFC 1908\
    \ Coexistence between Version 1 and Version 2 of\n        the Internet-standard\
    \ Network Management Framework [8]\n   The Framework permits new objects to be\
    \ defined for the purpose of\n   experimentation and evaluation.\n"
- title: 2.1.  Object Definitions
  contents:
  - "2.1.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB. Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1) [1],\n\
    \   defined in the Structure of Management Information (SMI)  (See RFC\n   1902\
    \ [2]). In particular, each object type is named by an OBJECT\n   IDENTIFIER,\
    \ an administratively assigned name. The object type\n   together with an object\
    \ instance serves to uniquely identify a\n   specific instantiation of the object.\
    \ For human convenience, we often\n   use a textual string, termed the object\
    \ descriptor, to refer to the\n   object type.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The primary purpose of computing technologies is the execution\
    \ of\n   application software. These applications, typically specialized\n   collections\
    \ of executables, files, and interprocess communications,\n   exist to solve business,\
    \ scientific or other \"problems\". The\n   configuration, fault detection, performance\
    \ monitoring and control of\n   application software across its life on a host\
    \ computer is of great\n   economic importance. For the purposes of our work,\
    \ we define\n   applications as one or more units of executable code and other\n\
    \   resources, installed on a single host system that a manager may think\n  \
    \ of as a single object for management purposes.\n   The information described\
    \ by the objects in the System Application\n   MIB support configuration, fault,\
    \ and performance management; they\n   represent some of the basic attributes\
    \ of application software from a\n   systems (non-application specific) perspective.\
    \  The information\n   allows for the description of applications as collections\
    \ of\n   executables and files installed and executing on a host computer.\n \
    \  This memo is concerned primarily with, and defines a model for,\n   application\
    \ information resident on a host computer which can be\n   determined from the\
    \ system itself, and not from the individual\n   applications.  This system-level\
    \ view of applications is designed to\n   provide information about software applications\
    \ installed and running\n   on the host system without requiring modifications\
    \ and code additions\n   to the applications themselves.  This approach was taken\
    \ to insure\n   ease and speed of implementation, while allowing room for future\n\
    \   growth.\n"
- title: 4.  Architecture for Application Management
  contents:
  - "4.  Architecture for Application Management\n   In the area of application management\
    \ it is fully acknowledged and\n   even expected that additional MIB modules will\
    \ be defined over time\n   to provide an even greater level of detail regarding\
    \ applications.\n   This MIB module presents the most general case:  a set of\
    \ management\n   objects for providing generic information about applications\
    \ and\n   whose object values can be determined from the computer system itself\n\
    \   without requiring instrumentation within the application.\n   A finer-grained\
    \ level of detail is planned for the future \"appl MIB\"\n   which will be a common\
    \ set of management objects relating to generic\n   applications, but which require\
    \ some type of instrumentation in the\n   application in order to be determined.\
    \  Since the applmib MIB module\n   will provide a finer level of detail, any\
    \ connection to the sysAppl\n   MIB should be made by having references from the\
    \ more detailed appl\n   MIB back to the more generic sysAppl MIB.  Likewise,\
    \ as application-\n   specific MIB modules such as the WWW MIB, etc., are developed\
    \ over\n   time, these more specific MIBs should reference back to the more\n\
    \   generic MIBs.\n   While this MIB module does not attempt to provide every\
    \ detailed\n   piece of information for managing applications, it does provide\
    \ a\n   basic systems-level view of the applications and their components on\n\
    \   a single host system.\n"
- title: 5.  The Structure of the MIB
  contents:
  - "5.  The Structure of the MIB\n   The System Application MIB structure models\
    \ application packages as a\n   whole, and also models the individual elements\
    \ (files and\n   executables) which collectively form an application.  The MIB\
    \ is\n   structured to model information regarding installed application\n   packages\
    \ and the elements which make up each application package. The\n   MIB also models\
    \ activity information on applications (and in turn,\n   their components) that\
    \ are running or have previously run on the host\n   system.  In modeling applications\
    \ and their elements, this MIB module\n   provides the necessary link for associating\
    \ executing processes with\n   the applications of which they are a part.\n  \
    \ The objects are arranged into the following groups:\n       -  System Application\
    \ Installed Group\n              - sysApplInstallPkgTable\n              - sysApplInstallElmtTable\n\
    \       -  System Application Run Group\n              - sysApplRunTable\n   \
    \           - sysApplPastRunTable\n              - sysApplElmtRunTable\n     \
    \         - sysApplElmtPastRunTable\n              - (scalars for restricting\
    \ table sizes)\n       -  System Application Map Group\n              - sysApplMapTable\n\
    \   As can be seen by the arrangement above, for each category, the MIB\n   first\
    \ treats an application package as a whole, and then breaks down\n   the package\
    \ to provide information about each of the elements\n   (executable and non-executable\
    \ files) of the package.\n"
- title: 5.1.  System Application Installed Group
  contents:
  - "5.1.  System Application Installed Group\n   The System Application Installed\
    \ group consists of two tables.\n   Through these two tables, administrators will\
    \ be able to determine\n   which applications have been installed on a system\
    \ and what their\n   constituent components are.  The first table, the\n   sysApplInstallPkgTable,\
    \ lists the application packages installed on a\n   particular host. The second,\
    \ the sysApplInstallElmtTable, provides\n   information regarding the executables\
    \ and non-executable files, or\n   elements, which collectively compose an application.\n\
    \   NOTE: This MIB is intended to work with applications that have been\n   installed\
    \ on a particular host, where \"installed\" means that the\n   existence of the\
    \ application and the association between an\n   application and its component\
    \ files can be discovered without\n   requiring additional instrumentation of\
    \ the application itself.  This\n   may require that certain conventions be used,\
    \ such as using a central\n   software installation mechanism or registry, when\
    \ installing\n   application packages.  For example, many UNIX systems utilize\
    \ a\n   \"pkgadd\" utility to track installed application packages, while many\n\
    \   PC systems utilize a global registry.\n"
- title: 5.2.  System Application Run Group
  contents:
  - "5.2.  System Application Run Group\n   This group models activity information\
    \ for applications that have\n   been invoked and are either currently running,\
    \ or have previously\n   run, on the host system.  Likewise, the individual elements\
    \ of an\n   invoked application are also modeled to show currently running\n \
    \  processes, and processes that have run in the past.  This information\n   is\
    \ modeled using two pairs of tables: a pair of tables for currently\n   running\
    \ applications and past run applications, and a pair of tables\n   for the currently\
    \ running elements and the past run elements.  Seven\n   scalars are also defined\
    \ to control the size of the past run tables.\n"
- title: 5.2.1.  sysApplRunTable and sysApplPastRunTable
  contents:
  - "5.2.1.  sysApplRunTable and sysApplPastRunTable\n   The sysApplRunTable and the\
    \ sysApplPastRunTable make up the first\n   pair of tables.  The sysApplRunTable\
    \ contains the application\n   instances which are currently running on the host.\
    \  Each time an\n   application is invoked, a new entry is created in the sysApplRunTable\n\
    \   to provide information about that particular invocation of the\n   application.\
    \  An entry will remain in this table until the\n   application instance terminates,\
    \ at which time the entry will be\n   deleted from the sysApplRunTable and placed\
    \ in the\n   sysApplPastRunTable.\n   The sysApplPastRunTable maintains a history\
    \ of instances of\n   applications which have previously executed on the host.\
    \  Entries to\n   this table are made when an invoked application from the\n \
    \  sysApplRunTable terminates; the table entry which represents the\n   application\
    \ instance is removed from the SysApplRunTable and a\n   corresponding entry is\
    \ added to the sysApplPastRunTable.\n   Because the sysApplPastRunTable will continuously\
    \ grow as\n   applications are executed and terminate, two scalars are defined\
    \ to\n   control the aging-out of table entries. The value of\n   sysApplPastRunMaxRows\
    \ specifies the maximum number of entries the\n   table may contain, while the\
    \ sysApplPastRunTblTimeLimit specifies the\n   maximum age of the table entries.\
    \  Oldest entries are removed first.\n   It is important to note that the sysApplRunTable\
    \ and\n   sysApplPastRunTable contain entries for each INVOCATION of an\n   application.\
    \ A single application package might be invoked multiple\n   times; each invocation\
    \ is properly recorded by a separate entry in\n   the sysApplRunTable.\n   In\
    \ order to implement this group, the agent must be able to recognize\n   that\
    \ an application has been invoked, and be able to determine when\n   that invocation\
    \ terminates.  This poses a complex problem since a\n   single application invocation\
    \ may involve numerous processes, some of\n   which may be required to remain\
    \ running throughout the duration of\n   the application, others which might come\
    \ and go.  The\n   sysApplInstallElmtRole columnar object in the sysApplInstallElmtTable\n\
    \   is meant to assist in this task by indicating which element is the\n   application's\
    \ primary executable, which elements must be running in\n   order for the application\
    \ to be running, which elements are dependent\n   on required elements, etc. \
    \ See the description of\n   sysApplInstallElmtRole for more details.\n"
- title: 5.2.2.  sysApplElmtRunTable and sysApplElmtPastRunTable
  contents:
  - "5.2.2.  sysApplElmtRunTable and sysApplElmtPastRunTable\n   While the sysApplRunTable\
    \ and sysApplPastRunTable focus on\n   applications as a whole, the sysApplElmtRunTable\
    \ and\n   sysApplElmtPastRunTable provide information regarding an\n   application's\
    \ executable elements, (processes), which are either\n   currently executing or\
    \ have executed in the past.\n   The sysApplElmtRunTable contains an entry for\
    \ every process currently\n   running on the host.  An entry is created in this\
    \ table for each\n   process at the time it is started, and will remain in the\
    \ table until\n   the process terminates.  Note that in order to provide complete\n\
    \   information on the load on the system, this table lists EVERY running\n  \
    \ process, not just those processes that are running as part of an\n   identified\
    \ application.  However, when processes terminate, only\n   information from entries\
    \ corresponding to elements of an identified\n   application are moved to the\
    \ sysApplElmtPastRunTable.\n   The sysApplElmtPastRunTable maintains a history\
    \ of processes which\n   have previously executed on the host as part of an application.\
    \ When\n   a process from the sysApplElmtRunTable terminates, the entry's\n  \
    \ information is moved to this sysApplElmtPastRunTable provided that\n   the process\
    \ was part of an identified application.  If the process\n   cannot be associated\
    \ with any 'parent' application, then it is simply\n   removed from the sysApplElmtRunTable.\
    \  This allows for processes like\n   'ps' or 'grep' to show up in the sysApplElmtRunTable,\
    \ (where they are\n   consuming resources and are thus \"interesting\"), but not\
    \ in the\n   sysApplElmtPastRunTable.\n   Because the sysApplElmtPastRunTable\
    \ will continuously grow as\n   processes are executed and terminate, two scalars\
    \ are defined to\n   control the aging-out of table entries.  The value of\n \
    \  sysApplElmtPastRunMaxRows specifies the maximum number of entries the\n   table\
    \ may contain, while the sysApplElmtPastRunTblTimeLimit specifies\n   the maximum\
    \ age of the table entries.  Oldest entries are removed\n   first.\n"
- title: 5.3.  System Application Map Group
  contents:
  - "5.3.  System Application Map Group\n   The System Application Map group contains\
    \ a single table, the\n   sysApplMapTable, whose sole purpose is to provide a\
    \ backwards mapping\n   for determining the invoked application, installed element,\
    \ and\n   installed application package given a known process identification\n\
    \   number.\n"
- title: 6.  Definitions
  contents:
  - "6.  Definitions\n   SYSAPPL-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n       MODULE-IDENTITY,\
    \ OBJECT-TYPE,\n       Unsigned32, TimeTicks, Counter32, Gauge32\n           FROM\
    \ SNMPv2-SMI\n       DateAndTime, TEXTUAL-CONVENTION\n           FROM SNMPv2-TC\n\
    \       MODULE-COMPLIANCE, OBJECT-GROUP\n           FROM SNMPv2-CONF\n       mib-2\
    \ FROM SNMPv2-SMI;\n   -- System Application MIB\n   sysApplMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9710200000Z\"\n       ORGANIZATION \"IETF Applications\
    \ MIB Working Group\"\n       CONTACT-INFO\n             \"Cheryl Krupczak (Editor,\
    \ WG Advisor)\n              Postal: Empire Technologies, Inc.\n             \
    \ 541 Tenth Street NW\n              Suite 169\n              Atlanta, GA 30318\n\
    \              USA\n              Phone: (770) 384-0184\n              Email:\
    \ cheryl@empiretech.com\n              Jon Saperia (WG Chair)\n              Postal:\
    \  BGS Systems, Inc.\n              One First Avenue\n              Waltham, MA\
    \ 02254-9111\n              USA\n              Phone: (617) 891-0000\n       \
    \       Email: saperia@networks.bgs.com\"\n       DESCRIPTION\n           \"The\
    \ MIB module defines management objects that model\n           applications as\
    \ collections of executables and files\n           installed and executing on\
    \ a host system.  The MIB\n           presents a system-level view of applications;\
    \ i.e.,\n           objects in this MIB are limited to those attributes\n    \
    \       that can typically be obtained from the system itself\n           without\
    \ adding special instrumentation to the applications.\"\n       ::= { mib-2 54\
    \  }\n   sysApplOBJ               OBJECT IDENTIFIER ::= { sysApplMIB 1 }\n   sysApplInstalled\
    \         OBJECT IDENTIFIER ::= { sysApplOBJ 1 }\n   sysApplRun              \
    \ OBJECT IDENTIFIER ::= { sysApplOBJ 2 }\n   sysApplMap               OBJECT IDENTIFIER\
    \ ::= { sysApplOBJ 3 }\n   sysApplNotifications     OBJECT IDENTIFIER ::= { sysApplMIB\
    \ 2 }\n   sysApplConformance       OBJECT IDENTIFIER ::= { sysApplMIB 3 }\n  \
    \ -- Textual Conventions\n   RunState ::= TEXTUAL-CONVENTION\n       STATUS  \
    \    current\n       DESCRIPTION\n           \"This TC describes the current execution\
    \ state of\n           a running application or process.  The possible\n     \
    \      values are:\n             running(1),\n             runnable(2),  - waiting\
    \ for a resource (CPU, etc.)\n             waiting(3),   - waiting for an event\n\
    \             exiting(4),\n             other(5)      - other invalid state\"\n\
    \       SYNTAX      INTEGER {\n                   running (1),\n             \
    \      runnable (2), -- waiting for resource (CPU, etc.)\n                   waiting\
    \ (3),  -- waiting for event\n                   exiting (4),\n              \
    \     other (5)     -- other invalid state\n                   }\n LongUtf8String\
    \ ::= TEXTUAL-CONVENTION\n         DISPLAY-HINT \"1024a\"\n         STATUS  current\n\
    \         DESCRIPTION\n                 \"To facilitate internationalization,\
    \ this TC\n                  represents information taken from the ISO/IEC IS\n\
    \                  10646-1 character set, encoded as an octet string\n       \
    \           using the UTF-8 character encoding scheme described\n            \
    \      in RFC 2044 [10].  For strings in 7-bit US-ASCII,\n                  there\
    \ is no impact since the UTF-8 representation\n                  is identical\
    \ to the US-ASCII encoding.\"\n         SYNTAX  OCTET STRING (SIZE (0..1024))\n\
    \ Utf8String ::= TEXTUAL-CONVENTION\n         DISPLAY-HINT \"255a\"\n        \
    \ STATUS  current\n         DESCRIPTION\n                 \"To facilitate internationalization,\
    \ this TC\n                  represents information taken from the ISO/IEC IS\n\
    \                  10646-1 character set, encoded as an octet string\n       \
    \           using the UTF-8 character encoding scheme described\n            \
    \      in RFC 2044 [10].  For strings in 7-bit US-ASCII,\n                  there\
    \ is no impact since the UTF-8 representation\n                  is identical\
    \ to the US-ASCII encoding.\"\n         SYNTAX  OCTET STRING (SIZE (0..255))\n\
    \   -- sysApplInstalled Group\n   -- This group provides information about application\
    \ packages\n   -- that have been installed on the host computer.  The group\n\
    \   -- contains two tables.  The first, the sysApplInstallPkgTable,\n   -- describes\
    \ the application packages, the second, the\n   -- sysApplInstallElmtTable, describes\
    \ the constituent elements\n   -- (files and executables) which compose an application\
    \ package.\n   --\n   -- In order to appear in this group, an application and\
    \ its\n   -- component files must be discoverable by the system itself,\n   --\
    \ possibly through some type of software installation mechanism\n   -- or registry.\n\
    \   -- sysApplInstallPkgTable\n   -- The system installed application packages\
    \ table provides\n   -- information on the software packages installed on a system.\n\
    \   -- These packages may consist of many different files including\n   -- executable\
    \ and non-executable files.\n   sysApplInstallPkgTable OBJECT-TYPE\n       SYNTAX\
    \      SEQUENCE OF SysApplInstallPkgEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The table listing\
    \ the software application packages\n           installed on a host computer.\
    \ In order to appear in\n           this table, it may be necessary for the application\n\
    \           to be installed using some type of software\n           installation\
    \ mechanism or global registry so that its\n           existence can be detected\
    \ by the agent implementation.\"\n       ::= { sysApplInstalled 1 }\n   sysApplInstallPkgEntry\
    \ OBJECT-TYPE\n       SYNTAX      SysApplInstallPkgEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The logical row\
    \ describing an installed application\n           package.\"\n       INDEX   \
    \ { sysApplInstallPkgIndex }\n       ::= { sysApplInstallPkgTable 1 }\n   SysApplInstallPkgEntry\
    \ ::= SEQUENCE {\n       sysApplInstallPkgIndex               Unsigned32,\n  \
    \     sysApplInstallPkgManufacturer        Utf8String,\n       sysApplInstallPkgProductName\
    \         Utf8String,\n       sysApplInstallPkgVersion             Utf8String,\n\
    \       sysApplInstallPkgSerialNumber        Utf8String,\n       sysApplInstallPkgDate\
    \                DateAndTime,\n       sysApplInstallPkgLocation            LongUtf8String\n\
    \   }\n   sysApplInstallPkgIndex OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"An integer used only for indexing purposes.\n           Generally\
    \ monotonically increasing from 1 as new\n           applications are installed.\n\
    \           The value for each installed application must\n           remain constant\
    \ at least from one re-initialization of\n           the network management entity\
    \ which implements this\n           MIB module to the next re-initialization.\n\
    \           The specific value is meaningful only within a given SNMP\n      \
    \     entity. A sysApplInstallPkgIndex value must not be re-used\n           until\
    \ the next agent entity restart in the event the\n           installed application\
    \ entry is deleted.\"\n       ::= { sysApplInstallPkgEntry 1 }\n   sysApplInstallPkgManufacturer\
    \ OBJECT-TYPE\n       SYNTAX      Utf8String\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The Manufacturer\
    \ of the software application package.\"\n       ::= { sysApplInstallPkgEntry\
    \ 2 }\n   sysApplInstallPkgProductName OBJECT-TYPE\n       SYNTAX      Utf8String\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The name assigned to the software application package\n        \
    \   by the Manufacturer.\"\n       ::= { sysApplInstallPkgEntry 3 }\n   sysApplInstallPkgVersion\
    \ OBJECT-TYPE\n       SYNTAX      Utf8String\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The version number\
    \ assigned to the application package\n           by the manufacturer of the software.\"\
    \n       ::= { sysApplInstallPkgEntry 4 }\n   sysApplInstallPkgSerialNumber OBJECT-TYPE\n\
    \       SYNTAX      Utf8String\n       MAX-ACCESS  read-only\n       STATUS  \
    \    current\n       DESCRIPTION\n           \"The serial number of the software\
    \ assigned by the\n           manufacturer.\"\n       ::= { sysApplInstallPkgEntry\
    \ 5 }\n   sysApplInstallPkgDate OBJECT-TYPE\n       SYNTAX      DateAndTime\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The date and time this software application was installed\n    \
    \       on the host.\"\n       ::= { sysApplInstallPkgEntry 6 }\n   sysApplInstallPkgLocation\
    \ OBJECT-TYPE\n       SYNTAX      LongUtf8String\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The complete path\
    \ name where the application package\n           is installed.  For example, the\
    \ value would be\n           '/opt/MyapplDir' if the application package was installed\n\
    \           in the /opt/MyapplDir directory.\"\n       ::= { sysApplInstallPkgEntry\
    \ 7 }\n   -- sysApplInstallElmtTable\n   -- The table describing the individual\
    \ application package\n   -- elements (files and executables) installed on the\
    \ host computer.\n   sysApplInstallElmtTable OBJECT-TYPE\n       SYNTAX      SEQUENCE\
    \ OF SysApplInstallElmtEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This table details the individual\
    \ application package\n           elements (files and executables) which comprise\
    \ the\n           applications defined in the sysApplInstallPkg Table.\n     \
    \      Each entry in this table has an index to the\n           sysApplInstallPkg\
    \ table to identify the application\n           package of which it is a part.\
    \ As a result, there may\n           be many entries in this table for each instance\
    \ in the\n           sysApplInstallPkg Table.\n           Table entries are indexed\
    \ by sysApplInstallPkgIndex,\n           sysApplInstallElmtIndex to facilitate\
    \ retrieval of\n           all elements associated with a particular installed\n\
    \           application package.\"\n       ::= { sysApplInstalled 2 }\n   sysApplInstallElmtEntry\
    \ OBJECT-TYPE\n       SYNTAX      SysApplInstallElmtEntry\n       MAX-ACCESS \
    \ not-accessible\n       STATUS      current\n       DESCRIPTION\n           \"\
    The logical row describing an element of an installed\n           application.\
    \  The element may be an executable or\n           non-executable file.\"\n  \
    \     INDEX    {sysApplInstallPkgIndex, sysApplInstallElmtIndex}\n       ::= {\
    \ sysApplInstallElmtTable 1 }\n   SysApplInstallElmtEntry ::= SEQUENCE {\n   \
    \    sysApplInstallElmtIndex                 Unsigned32,\n       sysApplInstallElmtName\
    \                  Utf8String,\n       sysApplInstallElmtType                \
    \  INTEGER,\n       sysApplInstallElmtDate                  DateAndTime,\n   \
    \    sysApplInstallElmtPath                  LongUtf8String,\n       sysApplInstallElmtSizeHigh\
    \              Unsigned32,\n       sysApplInstallElmtSizeLow               Unsigned32,\n\
    \       sysApplInstallElmtRole                  BITS,\n       sysApplInstallElmtModifyDate\
    \            DateAndTime,\n       sysApplInstallElmtCurSizeHigh           Unsigned32,\n\
    \       sysApplInstallElmtCurSizeLow            Unsigned32\n   }\n   sysApplInstallElmtIndex\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"An arbitrary integer used for indexing.  The value\n           of this index\
    \ is unique among all rows in this table\n           that exist or have existed\
    \ since the last agent restart.\"\n       ::= { sysApplInstallElmtEntry 1 }\n\
    \   sysApplInstallElmtName OBJECT-TYPE\n       SYNTAX      Utf8String\n      \
    \ MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n    \
    \       \"The name of this element which is contained in the\n           application.\"\
    \n       ::= { sysApplInstallElmtEntry 2 }\n   sysApplInstallElmtType OBJECT-TYPE\n\
    \       SYNTAX      INTEGER {\n                   unknown(1),\n              \
    \     nonexecutable(2),\n                   operatingSystem(3),  -- executable\n\
    \                   deviceDriver(4),     -- executable\n                   application(5)\
    \       -- executable\n                   }\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n           \"The type of element\
    \ that is part of the installed\n           application.\"\n       ::= { sysApplInstallElmtEntry\
    \ 3 }\n   sysApplInstallElmtDate OBJECT-TYPE\n       SYNTAX      DateAndTime\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The date and time that this component was installed on\n       \
    \    the system.\"\n       ::= { sysApplInstallElmtEntry 4 }\n   sysApplInstallElmtPath\
    \ OBJECT-TYPE\n       SYNTAX      LongUtf8String\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The full directory\
    \ path where this element is installed.\n           For example, the value would\
    \ be '/opt/EMPuma/bin' for an\n           element installed in the directory '/opt/EMPuma/bin'.\n\
    \           Most application packages include information about the\n        \
    \   elements contained in the package. In addition, elements\n           are typically\
    \ installed in sub-directories under the\n           package installation directory.\
    \  In cases where the\n           element path names are not included in the package\n\
    \           information itself, the path can usually be determined\n         \
    \  by a simple search of the sub-directories.  If the\n           element is not\
    \ installed in that location and there is\n           no other information available\
    \ to the agent implementation,\n           then the path is unknown and null is\
    \ returned.\"\n       ::= { sysApplInstallElmtEntry 5}\n   sysApplInstallElmtSizeHigh\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The installed file\
    \ size in 2^32 byte blocks. This is\n           the size of the file on disk immediately\
    \ after installation.\n           For example, for a file with a total size of\
    \ 4,294,967,296\n           bytes, this variable would have a value of 1; for\
    \ a file\n           with a total size of 4,294,967,295 bytes this variable\n\
    \           would be 0.\"\n       ::= { sysApplInstallElmtEntry 6 }\n   sysApplInstallElmtSizeLow\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The installed file\
    \ size modulo 2^32 bytes.  This is\n           the size of the file on disk immediately\
    \ after installation.\n           For example, for a file with a total size of\
    \ 4,294,967,296\n           bytes this variable would have a value of 0; for a\
    \ file with\n           a total size of 4,294,967,295 bytes this variable would\
    \ be\n           4,294,967,295.\"\n       ::= { sysApplInstallElmtEntry 7 }\n\
    \   sysApplInstallElmtRole  OBJECT-TYPE\n       SYNTAX      BITS {\n         \
    \          executable(0),\n                      -- An application may have one\
    \ or\n                      -- more executable elements.  The rest of the\n  \
    \                    -- bits have no meaning if the element is not\n         \
    \             -- executable.\n                   exclusive(1),\n             \
    \         -- Only one copy of an exclusive element may be\n                  \
    \    -- running per invocation of the running\n                      -- application.\n\
    \                   primary(2),\n                      -- The primary executable.\
    \  An application can\n                      -- have one, and only one element\
    \ that is designated\n                      -- as the primary executable.  The\
    \ execution of\n                      -- this element constitutes an invocation\
    \ of\n                      -- the application.  This is used by the agent\n \
    \                     -- implementation to determine the initiation of\n     \
    \                 -- an application.  The primary executable must\n          \
    \            -- remain running long enough for the agent\n                   \
    \   -- implementation to detect its presence.\n                   required(3),\n\
    \                      -- An application may have zero or more required\n    \
    \                  -- elements. All required elements must be running\n      \
    \                -- in order for the application to be judged to be\n        \
    \              -- running and healthy.\n                   dependent(4),\n   \
    \                   -- An application may have zero or more\n                \
    \      -- dependent elements. Dependent elements may\n                      --\
    \ not be running unless required elements are.\n                   unknown(5)\n\
    \                      -- Default value for the case when an operator\n      \
    \                -- has not yet assigned one of the other values.\n          \
    \            -- When set, bits 1, 2, 3, and 4 have no meaning.\n             \
    \      }\n       MAX-ACCESS  read-write\n       STATUS      current\n       DESCRIPTION\n\
    \           \"An operator assigned value used in the determination of\n      \
    \     application status. This value is used by the agent to\n           determine\
    \ both the mapping of started processes to the\n           initiation of an application,\
    \ as well as to allow for a\n           determination of application health. The\
    \ default value,\n           unknown(5), is used when an operator has not yet\
    \ assigned\n           one of the other values.  If unknown(5) is set, bits\n\
    \           1 - 4 have no meaning.  The possible values are:\n               \
    \    executable(0),\n                       An application may have one or\n \
    \                      more executable elements.  The rest of the\n          \
    \             bits have no meaning if the element is not\n                   \
    \    executable.\n                   exclusive(1),\n                       Only\
    \ one copy of an exclusive element may be\n                       running per\
    \ invocation of the running\n                       application.\n           \
    \        primary(2),\n                       The primary executable.  An application\
    \ can\n                       have one, and only one element that is designated\n\
    \                       as the primary executable.  The execution of\n       \
    \                this element constitutes an invocation of\n                 \
    \      the application.  This is used by the agent\n                       implementation\
    \ to determine the initiation of\n                       an application.  The\
    \ primary executable must\n                       remain running long enough for\
    \ the agent\n                       implementation to detect its presence.\n \
    \                  required(3),\n                       An application may have\
    \ zero or more required\n                       elements. All required elements\
    \ must be running\n                       in order for the application to be judged\
    \ to be\n                       running and healthy.\n                   dependent(4),\n\
    \                       An application may have zero or more\n               \
    \        dependent elements. Dependent elements may\n                       not\
    \ be running unless required elements are.\n                   unknown(5)\n  \
    \                     Default value for the case when an operator\n          \
    \             has not yet assigned one of the other values.\n                \
    \       When set, bits 1, 2, 3, and 4 have no meaning.\n            sysApplInstallElmtRole\
    \ is used by the agent implementation\n            in determining the initiation\
    \ of an application, the\n            current state of a running application (see\n\
    \            sysApplRunCurrentState), when an application invocation is\n    \
    \        no longer running, and the exit status of a terminated\n            application\
    \ invocation (see sysApplPastRunExitState).\"\n       DEFVAL { { unknown } }\n\
    \       ::= { sysApplInstallElmtEntry 8 }\n   sysApplInstallElmtModifyDate OBJECT-TYPE\n\
    \       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n       STATUS \
    \     current\n       DESCRIPTION\n           \"The date and time that this element\
    \ was last modified.\n           Modification of the sysApplInstallElmtRole columnar\n\
    \           object does NOT constitute a modification of the element\n       \
    \    itself and should not affect the value of this object.\"\n       ::= { sysApplInstallElmtEntry\
    \ 9 }\n   sysApplInstallElmtCurSizeHigh OBJECT-TYPE\n       SYNTAX      Unsigned32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The current file size in 2^32 byte blocks.\n           For example,\
    \ for a file with a total size of 4,294,967,296\n           bytes, this variable\
    \ would have a value of 1; for a file\n           with a total size of 4,294,967,295\
    \ bytes this variable\n           would be 0.\"\n       ::= { sysApplInstallElmtEntry\
    \ 10 }\n   sysApplInstallElmtCurSizeLow OBJECT-TYPE\n       SYNTAX      Unsigned32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The current file size modulo 2^32 bytes.\n           For example,\
    \ for a file with a total size of 4,294,967,296\n           bytes this variable\
    \ would have a value of 0; for a file with\n           a total size of 4,294,967,295\
    \ bytes this variable would be\n           4,294,967,295.\"\n       ::= { sysApplInstallElmtEntry\
    \ 11 }\n   -- sysApplRun Group\n   -- This group models activity information for\
    \ applications\n   -- that have been invoked and are either currently running,\n\
    \   -- or have previously run on the host system.  Likewise,\n   -- the individual\
    \ elements of an invoked application are\n   -- also modeled to show currently\
    \ running processes, and\n   -- processes that have run in the past.\n   -- sysApplRunTable\n\
    \   -- The sysApplRunTable contains the application instances\n   -- which are\
    \ currently running on the host.  Since a single\n   -- application might be invoked\
    \ multiple times, an entry is\n   -- added to this table for each INVOCATION of\
    \ an application.\n   -- The table is indexed by sysApplInstallPkgIndex, sysApplRunIndex\n\
    \   -- to enable managers to easily locate all invocations of\n   -- a particular\
    \ application package.\n   sysApplRunTable OBJECT-TYPE\n       SYNTAX      SEQUENCE\
    \ OF SysApplRunEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The table describes the applications which are\
    \ executing\n           on the host.  Each time an application is invoked,\n \
    \          an entry is created in this table. When an application ends,\n    \
    \       the entry is removed from this table and a corresponding\n           \
    \        entry is created in the SysApplPastRunTable.\n           A new entry\
    \ is created in this table whenever the agent\n           implementation detects\
    \ a new running process that is an\n           installed application element whose\
    \ sysApplInstallElmtRole\n           designates it as being the application's\
    \ primary executable\n           (sysApplInstallElmtRole = primary(2) ).\n   \
    \        The table is indexed by sysApplInstallPkgIndex,\n           sysApplRunIndex\
    \ to enable managers to easily locate all\n           invocations of a particular\
    \ application package.\"\n       ::= { sysApplRun 1 }\n   sysApplRunEntry OBJECT-TYPE\n\
    \       SYNTAX      SysApplRunEntry\n       MAX-ACCESS  not-accessible\n     \
    \  STATUS      current\n       DESCRIPTION\n           \"The logical row describing\
    \ an application which is\n           currently running on this host.\"\n    \
    \   INDEX    { sysApplInstallPkgIndex, sysApplRunIndex }\n       ::= { sysApplRunTable\
    \   1 }\n   SysApplRunEntry ::= SEQUENCE {\n       sysApplRunIndex           \
    \              Unsigned32,\n       sysApplRunStarted                       DateAndTime,\n\
    \       sysApplRunCurrentState                  RunState\n   }\n   sysApplRunIndex\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"Part of the index for this table. An arbitrary\n           integer used only\
    \ for indexing purposes. Generally\n           monotonically increasing from 1\
    \ as new applications are\n           started on the host, it uniquely identifies\
    \ application\n           invocations.\n           The numbering for this index\
    \ increases by 1 for each\n           INVOCATION of an application, regardless\
    \ of which\n           installed application package this entry represents a\n\
    \           running instance of.\n           An example of the indexing for a\
    \ couple of entries is\n           shown below.\n                         :\n\
    \                    sysApplRunStarted.17.14\n                    sysApplRunStarted.17.63\n\
    \                    sysApplRunStarted.18.13\n                         :\n   \
    \        In this example, the agent has observed 12 application\n           invocations\
    \ when the application represented by entry 18\n           in the sysApplInstallPkgTable\
    \ is invoked.  The next\n           invocation detected by the agent is an invocation\
    \ of\n           installed application package 17.  Some time later,\n       \
    \    installed application 17 is invoked a second time.\n           NOTE: this\
    \ index is not intended to reflect a real-time\n           (wall clock time) ordering\
    \ of application invocations;\n           it is merely intended to uniquely identify\
    \ running\n           instances of applications.  Although the\n           sysApplInstallPkgIndex\
    \ is included in the INDEX clause\n           for this table, it serves only to\
    \ ease searching of\n           this table by installed application and does not\n\
    \           contribute to uniquely identifying table entries.\"\n       ::= {\
    \ sysApplRunEntry 1 }\n   sysApplRunStarted OBJECT-TYPE\n       SYNTAX      DateAndTime\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The date and time that the application was started.\"\n       ::=\
    \ { sysApplRunEntry 2 }\n   sysApplRunCurrentState OBJECT-TYPE\n       SYNTAX\
    \      RunState\n       MAX-ACCESS  read-only\n       STATUS      current\n  \
    \     DESCRIPTION\n           \"The current state of the running application instance.\n\
    \           The possible values are running(1), runnable(2) but waiting\n    \
    \       for a resource such as CPU, waiting(3) for an event,\n           exiting(4),\
    \ or other(5). This value is based on an evaluation\n           of the running\
    \ elements of this application instance (see\n           sysApplElmRunState) and\
    \ their Roles as defined by\n           sysApplInstallElmtRole.  An agent implementation\
    \ may\n           detect that an application instance is in the process of\n \
    \          exiting if one or more of its REQUIRED elements are no\n          \
    \ longer running.  Most agent implementations will wait until\n           a second\
    \ internal poll has been completed to give the\n           system time to start\
    \ REQUIRED elements before marking the\n           application instance as exiting.\"\
    \n       ::= { sysApplRunEntry 3 }\n   -- sysApplPastRunTable\n   -- The sysApplPastRunTable\
    \ provides a history of applications\n   -- previously run on the host computer.\
    \ Entries are removed from\n   -- the sysApplRunTable and corresponding entries\
    \ are added to this\n   -- table when an application becomes inactive. Entries\
    \ remain in\n   -- this table until they are aged out when either the table size\n\
    \   -- reaches a maximum as determined by the sysApplPastRunMaxRows,\n   -- or\
    \ when an entry has aged to exceed a time limit as set be\n   -- sysApplPastRunTblTimeLimit.\n\
    \   --\n   -- When aging out entries, the oldest entry, as determined by\n   --\
    \ the value of sysApplPastRunTimeEnded, will be removed first.\n   sysApplPastRunTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SysApplPastRunEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"A history of the applications that have previously run\n           on the\
    \ host computer.  An entry's information is moved to\n           this table from\
    \ the sysApplRunTable when the invoked\n           application represented by\
    \ the entry ceases to be running.\n           An agent implementation can determine\
    \ that an application\n           invocation is no longer running by evaluating\
    \ the running\n           elements of the application instance and their Roles\
    \ as\n           defined by sysApplInstallElmtRole.  Obviously, if there\n   \
    \        are no running elements for the application instance,\n           then\
    \ the application invocation is no longer running.\n           If any one of the\
    \ REQUIRED elements is not running,\n           the application instance may be\
    \ in the process of exiting.\n           Most agent implementations will wait\
    \ until a second internal\n           poll has been completed to give the system\
    \ time to either\n           restart partial failures or to give all elements\
    \ time to\n           exit.  If, after the second poll, there are REQUIRED\n \
    \          elements that are not running, then the application\n           instance\
    \ may be considered by the agent implementation\n           to no longer be running.\n\
    \           Entries remain in the sysApplPastRunTable until they\n           are\
    \ aged out when either the table size reaches a maximum\n           as determined\
    \ by the sysApplPastRunMaxRows, or when an entry\n           has aged to exceed\
    \ a time limit as set by\n           sysApplPastRunTblTimeLimit.\n           Entries\
    \ in this table are indexed by sysApplInstallPkgIndex,\n           sysApplPastRunIndex\
    \ to facilitate retrieval of all past\n           run invocations of a particular\
    \ installed application.\"\n       ::= { sysApplRun 2 }\n   sysApplPastRunEntry\
    \ OBJECT-TYPE\n       SYNTAX      SysApplPastRunEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The logical row\
    \ describing an invocation of an application\n           which was previously\
    \ run and has terminated.  The entry\n           is basically copied from the\
    \ sysApplRunTable when the\n           application instance terminates.  Hence,\
    \ the entry's\n           value for sysApplPastRunIndex is the same as its value\
    \ was\n           for sysApplRunIndex.\"\n       INDEX    { sysApplInstallPkgIndex,\
    \ sysApplPastRunIndex }\n       ::= { sysApplPastRunTable   1 }\n   SysApplPastRunEntry\
    \ ::= SEQUENCE {\n       sysApplPastRunIndex                     Unsigned32,\n\
    \       sysApplPastRunStarted                   DateAndTime,\n       sysApplPastRunExitState\
    \                 INTEGER,\n       sysApplPastRunTimeEnded                 DateAndTime\n\
    \   }\n   sysApplPastRunIndex OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Part of the index for this table. An integer\n           matching\
    \ the value of the removed sysApplRunIndex\n           corresponding to this row.\"\
    \n       ::= { sysApplPastRunEntry 1 }\n   sysApplPastRunStarted OBJECT-TYPE\n\
    \       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n       STATUS \
    \     current\n       DESCRIPTION\n           \"The date and time that the application\
    \ was started.\"\n       ::= { sysApplPastRunEntry 2 }\n   sysApplPastRunExitState\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                   complete (1),\
    \ -- normal exit at sysApplRunTimeEnded\n                   failed (2),   -- abnormal\
    \ exit\n                   other (3)\n                   }\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n         \"The state\
    \ of the application instance when it terminated.\n          This value is based\
    \ on an evaluation of the running elements\n          of an application and their\
    \ Roles as defined by\n          sysApplInstallElmtRole.  An application instance\
    \ is said to\n          have exited in a COMPLETE state and its entry is removed\n\
    \          from the sysApplRunTable and added to the sysApplPastRunTable\n   \
    \       when the agent detects that ALL elements of an application\n         \
    \ invocation are no longer running.  Most agent implementations\n          will\
    \ wait until a second internal poll has been completed to\n          give the\
    \ system time to either restart partial failures or\n          to give all elements\
    \ time to exit.  A failed state occurs if,\n          after the second poll, any\
    \ elements continue to run but\n          one or more of the REQUIRED elements\
    \ are no longer running.\n          All other combinations MUST be defined as\
    \ OTHER.\"\n       ::= { sysApplPastRunEntry 3 }\n   sysApplPastRunTimeEnded OBJECT-TYPE\n\
    \       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n       STATUS \
    \     current\n       DESCRIPTION\n           \"The DateAndTime the application\
    \ instance was determined\n           to be no longer running.\"\n       ::= {\
    \ sysApplPastRunEntry 4 }\n   -- sysApplElmtRunTable\n   -- The sysApplElmtRunTable\
    \ contains an entry for each process that\n   -- is currently running on the host.\
    \  An entry is created in\n   -- this table for each process at the time it is\
    \ started, and will\n   -- remain in the table until the process terminates.\n\
    \   --\n   -- The table is indexed by sysApplElmtRunInstallPkg,\n   -- sysApplElmtRunInvocID,\
    \ and sysApplElmtRunIndex to make it easy\n   -- to locate all running elements\
    \ of a particular invoked application\n   -- which has been installed on the system.\n\
    \   sysApplElmtRunTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SysApplElmtRunEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The table describes the processes which are\n           currently\
    \ executing on the host system. Each entry\n           represents a running process\
    \ and is associated with\n           the invoked application of which that process\
    \ is a part, if\n           possible.  This table contains an entry for every\
    \ process\n           currently running on the system, regardless of whether its\n\
    \           'parent' application can be determined.  So, for example,\n      \
    \     processes like 'ps' and 'grep' will have entries though they\n         \
    \  are not associated with an installed application package.\n           Because\
    \ a running application may involve\n           more than one executable, it is\
    \ possible to have\n           multiple entries in this table for each application.\n\
    \           Entries are removed from this table when the process\n           terminates.\n\
    \           The table is indexed by sysApplElmtRunInstallPkg,\n           sysApplElmtRunInvocID,\
    \ and sysApplElmtRunIndex to\n           facilitate the retrieval of all running\
    \ elements of a\n           particular invoked application which has been installed\
    \ on\n           the system.\"\n       ::= { sysApplRun 3 }\n   sysApplElmtRunEntry\
    \ OBJECT-TYPE\n       SYNTAX      SysApplElmtRunEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The logical row\
    \ describing a process currently\n           running on this host.  When possible,\
    \ the entry is\n           associated with the invoked application of which it\n\
    \           is a part.\"\n       INDEX    { sysApplElmtRunInstallPkg, sysApplElmtRunInvocID,\n\
    \                  sysApplElmtRunIndex }\n       ::= { sysApplElmtRunTable   1\
    \ }\n   SysApplElmtRunEntry ::= SEQUENCE {\n       sysApplElmtRunInstallPkg  \
    \      Unsigned32,\n       sysApplElmtRunInvocID           Unsigned32,\n     \
    \  sysApplElmtRunIndex             Unsigned32,\n       sysApplElmtRunInstallID\
    \         Unsigned32,\n       sysApplElmtRunTimeStarted       DateAndTime,\n \
    \      sysApplElmtRunState             RunState,\n       sysApplElmtRunName  \
    \            LongUtf8String,\n       sysApplElmtRunParameters        Utf8String,\n\
    \       sysApplElmtRunCPU               TimeTicks,\n       sysApplElmtRunMemory\
    \            Gauge32,\n       sysApplElmtRunNumFiles          Gauge32,\n     \
    \  sysApplElmtRunUser              Utf8String\n   }\n   sysApplElmtRunInstallPkg\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"Part of the index for this table, this value\n           identifies the installed\
    \ software package for\n           the application of which this process is a\
    \ part.\n           Provided that the process's 'parent' application can be\n\
    \           determined, the value of this object is the same\n           value\
    \ as the sysApplInstallPkgIndex for the\n           entry in the sysApplInstallPkgTable\
    \ that corresponds\n           to the installed application of which this process\n\
    \           is a part.\n           If, however, the 'parent' application cannot\
    \ be\n           determined, (for example the process is not part\n          \
    \ of a particular installed application), the value\n           for this object\
    \ is then '0', signifying that this\n           process cannot be related back\
    \ to an application,\n           and in turn, an installed software package.\"\
    \n       ::= { sysApplElmtRunEntry 1 }\n   sysApplElmtRunInvocID OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Part of the index\
    \ for this table, this value\n           identifies the invocation of an application\
    \ of which\n           this process is a part.  Provided that the 'parent'\n \
    \          application can be determined, the value of this object\n         \
    \  is the same value as the sysApplRunIndex for the\n           corresponding\
    \ application invocation in the\n           sysApplRunTable.\n           If, however,\
    \ the 'parent' application cannot be\n           determined, the value for this\
    \ object is then '0',\n           signifying that this process cannot be related\
    \ back\n           to an invocation of an application in the\n           sysApplRunTable.\"\
    \n       ::= { sysApplElmtRunEntry 2 }\n   sysApplElmtRunIndex OBJECT-TYPE\n \
    \      SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Part of the index\
    \ for this table.  A unique value\n           for each process running on the\
    \ host.  Wherever\n           possible, this should be the system's native, unique\n\
    \           identification number.\"\n       ::= { sysApplElmtRunEntry 3 }\n \
    \  sysApplElmtRunInstallID OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The index into the sysApplInstallElmtTable. The\n           value\
    \ of this object is the same value as the\n           sysApplInstallElmtIndex\
    \ for the application element\n           of which this entry represents a running\
    \ instance.\n           If this process cannot be associated with an installed\n\
    \           executable, the value should be '0'.\"\n       ::= { sysApplElmtRunEntry\
    \ 4 }\n   sysApplElmtRunTimeStarted OBJECT-TYPE\n       SYNTAX      DateAndTime\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The time the process was started.\"\n       ::= { sysApplElmtRunEntry\
    \ 5 }\n   sysApplElmtRunState OBJECT-TYPE\n       SYNTAX      RunState\n     \
    \  MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n   \
    \        \"The current state of the running process. The\n           possible\
    \ values are running(1), runnable(2) but waiting\n           for a resource such\
    \ as CPU, waiting(3) for an event,\n           exiting(4), or other(5).\"\n  \
    \     ::= { sysApplElmtRunEntry 6 }\n   sysApplElmtRunName OBJECT-TYPE\n     \
    \  SYNTAX      LongUtf8String\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"The full path and filename of the\
    \ process.\n           For example, '/opt/MYYpkg/bin/myyproc' would\n        \
    \   be returned for process 'myyproc' whose execution\n           path is '/opt/MYYpkg/bin/myyproc'.\"\
    \n       ::= { sysApplElmtRunEntry 7 }\n   sysApplElmtRunParameters OBJECT-TYPE\n\
    \       SYNTAX      Utf8String\n       MAX-ACCESS  read-only\n       STATUS  \
    \    current\n       DESCRIPTION\n           \"The starting parameters for the\
    \ process.\"\n   ::= { sysApplElmtRunEntry 8 }\n   sysApplElmtRunCPU OBJECT-TYPE\n\
    \       SYNTAX      TimeTicks\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n            \"The number of centi-seconds of\
    \ the total system's\n            CPU resources consumed by this process.  Note\
    \ that\n            on a multi-processor system, this value may\n            have\
    \ been incremented by more than one centi-second\n            in one centi-second\
    \ of real (wall clock) time.\"\n       ::= { sysApplElmtRunEntry 9 }\n   sysApplElmtRunMemory\
    \ OBJECT-TYPE\n       SYNTAX      Gauge32\n       UNITS       \"Kbytes\"\n   \
    \    MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n \
    \          \"The total amount of real system memory measured in\n           Kbytes\
    \ currently allocated to this process.\"\n       ::= { sysApplElmtRunEntry 10\
    \ }\n   sysApplElmtRunNumFiles OBJECT-TYPE\n       SYNTAX      Gauge32\n     \
    \  MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n   \
    \        \"The number of regular files currently open by the\n           process.\
    \  Transport connections (sockets)\n           should NOT be included in the calculation\
    \ of\n           this value, nor should operating system specific\n          \
    \ special file types.\"\n       ::= { sysApplElmtRunEntry 11 }\n   sysApplElmtRunUser\
    \ OBJECT-TYPE\n       SYNTAX      Utf8String\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The process owner's\
    \ login name (e.g. root).\"\n       ::= { sysApplElmtRunEntry 12 }\n   -- sysApplElmtPastRunTable\n\
    \   -- The sysApplElmtPastRunTable maintains a history of\n   -- processes which\
    \ have previously executed on\n   -- the host as part of an application. Upon\
    \ termination\n   -- of a process, the entry representing the process is removed\
    \ from\n   -- the sysApplElmtRunTable and a corresponding entry is created in\n\
    \   -- this table provided that the process was part of an\n   -- identifiable\
    \ application.  If the process could not be associated\n   -- with an invoked\
    \ application, no corresponding entry is created.\n   -- Hence, whereas the sysApplElmtRunTable\
    \ contains an entry for\n   -- every process currently executing on the system,\
    \ the\n   -- sysApplElmtPastRunTable only contains entries for processes\n   --\
    \ that previously executed as part of an invoked application.\n   --\n   -- Entries\
    \ remain in this table until they are aged out when\n   -- either the number of\
    \ entries in the table reaches a\n   -- maximum as determined by sysApplElmtPastRunMaxRows,\
    \ or\n   -- when an entry has aged to exceed a time limit as set by\n   -- sysApplElmtPastRunTblTimeLimit.\
    \  When aging out entries,\n   -- the oldest entry, as determined by the value\
    \ of\n   -- sysApplElmtPastRunTimeEnded, will be removed first.\n   --\n   --\
    \ The table is indexed by sysApplInstallPkgIndex (from the\n   -- sysApplInstallPkgTable),\
    \ sysApplElmtPastRunInvocID, and\n   -- sysApplElmtPastRunIndex to make it easy\
    \ to locate all\n   -- previously executed processes of a particular invoked application\n\
    \   -- that has been installed on the system.\n   sysApplElmtPastRunTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF SysApplElmtPastRunEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The table describes\
    \ the processes which have previously\n           executed on the host system\
    \ as part of an application.\n           Each entry represents a process which\
    \ has previously\n           executed and is associated with the invoked application\n\
    \           of which it was a part.  Because an invoked application\n        \
    \   may involve more than one executable, it is possible\n           to have multiple\
    \ entries in this table for\n           each application invocation. Entries are\
    \ added\n           to this table when the corresponding process in the\n    \
    \       sysApplElmtRun Table terminates.\n           Entries remain in this table\
    \ until they are aged out when\n           either the number of entries in the\
    \ table reaches a\n           maximum as determined by sysApplElmtPastRunMaxRows,\
    \ or\n           when an entry has aged to exceed a time limit as set by\n   \
    \        sysApplElmtPastRunTblTimeLimit.  When aging out entries,\n          \
    \ the oldest entry, as determined by the value of\n           sysApplElmtPastRunTimeEnded,\
    \ will be removed first.\n           The table is indexed by sysApplInstallPkgIndex\
    \ (from the\n           sysApplInstallPkgTable), sysApplElmtPastRunInvocID,\n\
    \           and sysApplElmtPastRunIndex to make it easy to locate all\n      \
    \     previously executed processes of a particular invoked\n           application\
    \ that has been installed on the system.\"\n       ::= { sysApplRun 4 }\n   sysApplElmtPastRunEntry\
    \ OBJECT-TYPE\n       SYNTAX      SysApplElmtPastRunEntry\n       MAX-ACCESS \
    \ not-accessible\n       STATUS      current\n       DESCRIPTION\n           \"\
    The logical row describing a process which was\n           previously executed\
    \ on this host as part of an\n           installed application.  The entry is\
    \ basically copied\n           from the sysApplElmtRunTable when the process\n\
    \           terminates.  Hence, the entry's value for\n           sysApplElmtPastRunIndex\
    \ is the same as its value\n           was for sysApplElmtRunIndex.  Note carefully:\
    \ only those\n           processes which could be associated with an\n       \
    \    identified application are included in this table.\"\n       INDEX    { sysApplInstallPkgIndex,\
    \ sysApplElmtPastRunInvocID,\n                  sysApplElmtPastRunIndex }\n  \
    \     ::= { sysApplElmtPastRunTable   1 }\n   SysApplElmtPastRunEntry ::= SEQUENCE\
    \ {\n       sysApplElmtPastRunInvocID           Unsigned32,\n       sysApplElmtPastRunIndex\
    \             Unsigned32,\n       sysApplElmtPastRunInstallID         Unsigned32,\n\
    \       sysApplElmtPastRunTimeStarted       DateAndTime,\n       sysApplElmtPastRunTimeEnded\
    \         DateAndTime,\n       sysApplElmtPastRunName              LongUtf8String,\n\
    \       sysApplElmtPastRunParameters        Utf8String,\n       sysApplElmtPastRunCPU\
    \               TimeTicks,\n       sysApplElmtPastRunMemory            Unsigned32,\n\
    \       sysApplElmtPastRunNumFiles          Unsigned32,\n       sysApplElmtPastRunUser\
    \              Utf8String\n   }\n   sysApplElmtPastRunInvocID OBJECT-TYPE\n  \
    \     SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Part of the index\
    \ for this table, this value\n           identifies the invocation of an application\
    \ of which\n           the process represented by this entry was a part.\n   \
    \        The value of this object is the same value as the\n           sysApplRunIndex\
    \ for the corresponding application\n           invocation in the sysApplRunTable.\
    \  If the invoked\n           application as a whole has terminated, it will be\
    \ the\n           same as the sysApplPastRunIndex.\"\n       ::= { sysApplElmtPastRunEntry\
    \ 1 }\n   sysApplElmtPastRunIndex OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Part of the index for this table. An integer\n           assigned\
    \ by the agent equal to the corresponding\n           sysApplElmtRunIndex which\
    \ was removed from the\n           sysApplElmtRunTable and moved to this table\n\
    \           when the element terminated.\n           Note: entries in this table\
    \ are indexed by\n           sysApplElmtPastRunInvocID, sysApplElmtPastRunIndex.\n\
    \           The possibility exists, though unlikely, of a\n           collision\
    \ occurring by a new entry which was run\n           by the same invoked application\
    \ (InvocID), and\n           was assigned the same process identification number\n\
    \           (ElmtRunIndex) as an element which was previously\n           run\
    \ by the same invoked application.\n           Should this situation occur, the\
    \ new entry replaces\n           the old entry.\n           See Section: 'Implementation\
    \ Issues -\n           sysApplElmtPastRunTable Entry Collisions' for the\n   \
    \        conditions that would have to occur in order for a\n           collision\
    \ to occur.\"\n       ::= { sysApplElmtPastRunEntry 2 }\n   sysApplElmtPastRunInstallID\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ index into the installed element table. The\n           value of this object\
    \ is the same value as the\n           sysApplInstallElmtIndex for the application\
    \ element\n           of which this entry represents a previously executed\n \
    \          process.\"\n       ::= { sysApplElmtPastRunEntry 3 }\n   sysApplElmtPastRunTimeStarted\
    \ OBJECT-TYPE\n       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The time the process\
    \ was started.\"\n       ::= { sysApplElmtPastRunEntry 4 }\n   sysApplElmtPastRunTimeEnded\
    \ OBJECT-TYPE\n       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The time the process\
    \ ended.\"\n       ::= { sysApplElmtPastRunEntry 5 }\n   sysApplElmtPastRunName\
    \ OBJECT-TYPE\n       SYNTAX      LongUtf8String\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The full path and\
    \ filename of the process.\n           For example, '/opt/MYYpkg/bin/myyproc'\
    \ would\n           be returned for process 'myyproc' whose execution\n      \
    \     path was '/opt/MYYpkg/bin/myyproc'.\"\n       ::= { sysApplElmtPastRunEntry\
    \ 6 }\n   sysApplElmtPastRunParameters OBJECT-TYPE\n       SYNTAX      Utf8String\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The starting parameters for the process.\"\n       ::= { sysApplElmtPastRunEntry\
    \ 7 }\n   sysApplElmtPastRunCPU OBJECT-TYPE\n       SYNTAX      TimeTicks\n  \
    \     MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \            \"The last known number of centi-seconds of the total\n         \
    \   system's CPU resources consumed by this process.\n            Note that on\
    \ a multi-processor system, this value may\n            increment by more than\
    \ one centi-second in one\n            centi-second of real (wall clock) time.\"\
    \n       ::= { sysApplElmtPastRunEntry 8 }\n   sysApplElmtPastRunMemory OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       UNITS       \"Kbytes\"\
    \n       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The last known total amount of real system memory\n           measured\
    \ in Kbytes allocated to this process before it\n           terminated.\"\n  \
    \     ::= { sysApplElmtPastRunEntry 9 }\n   sysApplElmtPastRunNumFiles OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The last known number\
    \ of files open by the\n           process before it terminated.  Transport\n\
    \           connections (sockets) should NOT be included in\n           the calculation\
    \ of this value.\"\n       ::= { sysApplElmtPastRunEntry 10 }\n   sysApplElmtPastRunUser\
    \ OBJECT-TYPE\n       SYNTAX      Utf8String\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The process owner's\
    \ login name (e.g. root).\"\n       ::= { sysApplElmtPastRunEntry 11 }\n   --\
    \ Additional Scalar objects to control table sizes\n   sysApplPastRunMaxRows OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The maximum number\
    \ of entries allowed in the\n           sysApplPastRunTable.  Once the number\
    \ of rows in\n           the sysApplPastRunTable reaches this value, the\n   \
    \        management subsystem will remove the oldest entry\n           in the\
    \ table to make room for the new entry to be added.\n           Entries will be\
    \ removed on the basis of oldest\n           sysApplPastRunTimeEnded value first.\n\
    \           This object may be used to control the amount of\n           system\
    \ resources that can used for sysApplPastRunTable\n           entries. A conforming\
    \ implementation should attempt\n           to support the default value, however,\
    \ a lesser value\n           may be necessary due to implementation-dependent\
    \ issues\n           and resource availability.\"\n       DEFVAL      { 500 }\n\
    \       ::= { sysApplRun 5 }\n   sysApplPastRunTableRemItems OBJECT-TYPE\n   \
    \    SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"A counter of the number of entries removed from\n\
    \           the sysApplPastRunTable because of table size limitations\n      \
    \     as set in sysApplPastRunMaxRows.  This counter is the\n           number\
    \ of entries the management subsystem has had to\n           remove in order to\
    \ make room for new entries (so as not\n           to exceed the limit set by\
    \ sysApplPastRunMaxRows) since\n           the last initialization of the management\
    \ subsystem.\"\n       ::= { sysApplRun 6 }\n   sysApplPastRunTblTimeLimit OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       UNITS       \"seconds\"\
    \n       MAX-ACCESS  read-write\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The maximum time in seconds which an entry in the\n            sysApplPastRunTable\
    \ may exist before it is removed.\n            Any entry that is older than this\
    \ value will be\n            removed (aged out) from the table.\n            Note\
    \ that an entry may be aged out prior to reaching\n            this time limit\
    \ if it is the oldest entry in the\n            table and must be removed to make\
    \ space for a new\n            entry so as to not exceed sysApplPastRunMaxRows.\"\
    \n       DEFVAL      { 7200 }\n       ::= { sysApplRun 7 }\n   sysApplElemPastRunMaxRows\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS\
    \  read-write\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ maximum number of entries allowed in the\n           sysApplElmtPastRunTable.\
    \  Once the number of rows in\n           the sysApplElmtPastRunTable reaches\
    \ this value,\n           the management subsystem will remove the oldest entry\n\
    \           to make room for the new entry to be added.  Entries\n           will\
    \ be removed on the basis of oldest\n           sysApplElmtPastRunTimeEnded value\
    \ first.\n           This object may be used to control the amount of\n      \
    \     system resources that can used for sysApplElemPastRunTable\n           entries.\
    \ A conforming implementation should attempt\n           to support the default\
    \ value, however, a lesser value\n           may be necessary due to implementation-dependent\
    \ issues\n           and resource availability.\"\n       DEFVAL      { 500 }\n\
    \       ::= { sysApplRun 8 }\n   sysApplElemPastRunTableRemItems OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"A counter of the number of entries\
    \ removed from the\n           sysApplElemPastRunTable because of table size limitations\n\
    \           as set in sysApplElemPastRunMaxRows.  This counter is the\n      \
    \     number of entries the management subsystem has had to\n           remove\
    \ in order to make room for new entries (so as not\n           to exceed the limit\
    \ set by sysApplElemPastRunMaxRows) since\n           the last initialization\
    \ of the management subsystem.\"\n       ::= { sysApplRun 9 }\n   sysApplElemPastRunTblTimeLimit\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       UNITS  \
    \     \"seconds\"\n       MAX-ACCESS  read-write\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The maximum time in seconds which an entry in\
    \ the\n            sysApplElemPastRunTable may exist before it is removed.\n \
    \           Any entry that is older than this value will be\n            removed\
    \ (aged out) from the table.\n            Note that an entry may be aged out prior\
    \ to reaching\n            this time limit if it is the oldest entry in the\n\
    \            table and must be removed to make space for a new\n            entry\
    \ so as to not exceed sysApplElemPastRunMaxRows.\"\n       DEFVAL      { 7200\
    \ }\n       ::= { sysApplRun 10 }\n   sysApplAgentPollInterval  OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       UNITS       \"seconds\"\
    \n       MAX-ACCESS  read-write\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The minimum interval in seconds that the management\n          \
    \ subsystem implementing this MIB will poll the status\n           of the managed\
    \ resources. Because of the non-trivial\n           effort involved in polling\
    \ the managed resources,\n           and because the method for obtaining the\
    \ status of\n           the managed resources is implementation-dependent,\n \
    \          a conformant implementation may chose a lower bound\n           greater\
    \ than 0.\n           A value of 0 indicates that there is no delay\n        \
    \   in the passing of information from the managed\n           resources to the\
    \ agent.\"\n       DEFVAL      { 60 }\n       ::= { sysApplRun 11 }\n   -- sysApplMap\
    \ Group\n   -- This group contains a table, the sysApplMapTable,\n   -- whose\
    \ sole purpose is to provide a 'backwards'\n   -- mapping so that, given a known\
    \ sysApplElmtRunIndex\n   -- (process identification number), the corresponding\
    \ invoked\n   -- application (sysApplRunIndex), installed element\n   -- (sysApplInstallElmtIndex),\
    \ and installed application\n   -- package (sysApplInstallPkgIndex) can be quickly\
    \ determined.\n   --\n   -- The table will contain one entry for each process\n\
    \   -- currently running on the system.\n   --\n   -- A backwards mapping is extremely\
    \ useful since the tables\n   -- in this MIB module are typically indexed with\
    \ the\n   -- installed application package (sysApplInstallPkgIndex)\n   -- as\
    \ the primary key, and on down as required by the\n   -- specific table, with\
    \ the process ID number (sysApplElmtRunIndex)\n   -- being the least significant\
    \ key.\n   --\n   -- It is expected that management applications will use\n  \
    \ -- this mapping table by doing a 'GetNext' operation with\n   -- the known process\
    \ ID number (sysApplElmtRunIndex) as the partial\n   -- instance identifier. \
    \ Assuming that there is an entry for\n   -- the process, the result should return\
    \ a single columnar value,\n   -- the sysApplMapInstallPkgIndex, with the sysApplElmtRunIndex,\n\
    \   -- sysApplRunIndex, and sysApplInstallElmtIndex contained in the\n   -- instance\
    \ identifier for the returned MIB object value.\n   --\n   -- NOTE: if the process\
    \ can not be associated back to an\n   -- invoked application installed on the\
    \ system, then the\n   -- value returned for the columnar value sysApplMapInstallPkgIndex\n\
    \   -- will be '0' and the instance portion of the object-identifier\n   -- will\
    \ be the process ID number (sysApplElmtRunIndex) followed\n   -- by 0.0.\n   sysApplMapTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SysApplMapEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The sole purpose of this table is to provide a\n           'backwards' mapping\
    \ so that, given a known\n           sysApplElmtRunIndex (process identification\
    \ number),\n           the corresponding invoked application (sysApplRunIndex),\n\
    \           installed element (sysApplInstallElmtIndex), and\n           installed\
    \ application package (sysApplInstallPkgIndex)\n           can be quickly determined.\n\
    \           This table will contain one entry for each process\n           that\
    \ is currently executing on the system.\n           It is expected that management\
    \ applications will use\n           this mapping table by doing a 'GetNext' operation\
    \ with\n           the known process ID number (sysApplElmtRunIndex) as the\n\
    \           partial instance identifier.  Assuming that there is an\n        \
    \   entry for the process, the result should return a single\n           columnar\
    \ value, the sysApplMapInstallPkgIndex, with the\n           sysApplElmtRunIndex,\
    \ sysApplRunIndex, and\n           sysApplInstallElmtIndex contained in the instance\
    \ identifier\n           for the returned MIB object value.\n           NOTE:\
    \ if the process can not be associated back to an\n           invoked application\
    \ installed on the system, then the\n           value returned for the columnar\
    \ value\n           sysApplMapInstallPkgIndex will be '0' and the instance\n \
    \          portion of the object-identifier will be the process ID\n         \
    \  number (sysApplElmtRunIndex) followed by 0.0.\"\n       ::= { sysApplMap 1\
    \ }\n   sysApplMapEntry OBJECT-TYPE\n       SYNTAX      SysApplMapEntry\n    \
    \   MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A logical row representing a process currently running\n       \
    \     on the system.  This entry provides the index mapping from\n           \
    \ process identifier, back to the invoked application,\n            installed\
    \ element, and finally, the installed application\n            package.  The entry\
    \ includes only one accessible columnar\n            object, the sysApplMapInstallPkgIndex,\
    \ but the\n            invoked application and installed element can be\n    \
    \        determined from the instance identifier since they form\n           \
    \ part of the index clause.\"\n       INDEX  { sysApplElmtRunIndex, sysApplElmtRunInvocID,\n\
    \                sysApplMapInstallElmtIndex }\n       ::= { sysApplMapTable 1\
    \ }\n   SysApplMapEntry ::= SEQUENCE {\n       sysApplMapInstallElmtIndex    Unsigned32,\n\
    \       sysApplMapInstallPkgIndex     Unsigned32\n   }\n   sysApplMapInstallElmtIndex\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The index into the sysApplInstallElmtTable. The\n           value of this\
    \ object is the same value as the\n           sysApplInstallElmtIndex for the\
    \ application element\n           of which this entry represents a running instance.\n\
    \           If this process cannot be associated to an installed\n           executable,\
    \ the value should be '0'.\"\n       ::= { sysApplMapEntry 1 }\n   sysApplMapInstallPkgIndex\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..'ffffffff'h)\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ value of this object identifies the installed\n           software package for\
    \ the application of which this\n           process is a part.  Provided that\
    \ the process's 'parent'\n           application can be determined, the value\
    \ of this object\n           is the same value as the sysApplInstallPkgIndex for\
    \ the\n           entry in the sysApplInstallPkgTable that corresponds\n     \
    \      to the installed application of which this process\n           is a part.\n\
    \           If, however, the 'parent' application cannot be\n           determined,\
    \ (for example the process is not part\n           of a particular installed application),\
    \ the value\n           for this object is then '0', signifying that this\n  \
    \         process cannot be related back to an application,\n           and in\
    \ turn, an installed software package.\"\n       ::= { sysApplMapEntry 2 }\n \
    \  -- Conformance Macros\n   sysApplMIBCompliances  OBJECT IDENTIFIER ::= { sysApplConformance\
    \ 1 }\n   sysApplMIBGroups       OBJECT IDENTIFIER ::= { sysApplConformance 2\
    \ }\n   sysApplMIBCompliance MODULE-COMPLIANCE\n       STATUS  current\n     \
    \  DESCRIPTION\n           \"Describes the requirements for conformance to\n \
    \          the System Application MIB\"\n       MODULE  -- this module\n     \
    \      MANDATORY-GROUPS { sysApplInstalledGroup,\n                           \
    \   sysApplRunGroup, sysApplMapGroup }\n       ::= { sysApplMIBCompliances 1 }\n\
    \   sysApplInstalledGroup OBJECT-GROUP\n       OBJECTS { sysApplInstallPkgManufacturer,\n\
    \                 sysApplInstallPkgProductName,\n                 sysApplInstallPkgVersion,\n\
    \                 sysApplInstallPkgSerialNumber,\n                 sysApplInstallPkgDate,\n\
    \                 sysApplInstallPkgLocation,\n                 sysApplInstallElmtName,\n\
    \                 sysApplInstallElmtType,\n                 sysApplInstallElmtDate,\n\
    \                 sysApplInstallElmtPath,\n                 sysApplInstallElmtSizeHigh,\n\
    \                 sysApplInstallElmtSizeLow,\n                 sysApplInstallElmtRole,\n\
    \                 sysApplInstallElmtModifyDate,\n                 sysApplInstallElmtCurSizeHigh,\n\
    \                 sysApplInstallElmtCurSizeLow }\n       STATUS  current\n   \
    \    DESCRIPTION\n           \"The system application installed group contains\n\
    \           information about applications and their constituent\n           components\
    \ which have been installed on the host system.\"\n       ::= { sysApplMIBGroups\
    \ 1 }\n   sysApplRunGroup OBJECT-GROUP\n       OBJECTS { sysApplRunStarted,\n\
    \                 sysApplRunCurrentState,\n                 sysApplPastRunStarted,\n\
    \                 sysApplPastRunExitState,\n                 sysApplPastRunTimeEnded,\n\
    \                 sysApplElmtRunInstallID,\n                 sysApplElmtRunTimeStarted,\n\
    \                 sysApplElmtRunState,\n                 sysApplElmtRunName,\n\
    \                 sysApplElmtRunParameters,\n                 sysApplElmtRunCPU,\n\
    \                 sysApplElmtRunMemory,\n                 sysApplElmtRunNumFiles,\n\
    \                 sysApplElmtRunUser,\n                 sysApplElmtPastRunInstallID,\n\
    \                 sysApplElmtPastRunTimeStarted,\n                 sysApplElmtPastRunTimeEnded,\n\
    \                 sysApplElmtPastRunName,\n                 sysApplElmtPastRunParameters,\n\
    \                 sysApplElmtPastRunCPU,\n                 sysApplElmtPastRunMemory,\n\
    \                 sysApplElmtPastRunNumFiles,\n                 sysApplElmtPastRunUser,\n\
    \                 sysApplPastRunMaxRows,\n                 sysApplPastRunTableRemItems,\n\
    \                 sysApplPastRunTblTimeLimit,\n                 sysApplElemPastRunMaxRows,\n\
    \                 sysApplElemPastRunTableRemItems,\n                 sysApplElemPastRunTblTimeLimit,\n\
    \                 sysApplAgentPollInterval }\n       STATUS  current\n       DESCRIPTION\n\
    \           \"The system application run group contains information\n        \
    \   about applications and associated elements which have\n           run or are\
    \ currently running on the host system.\"\n       ::= { sysApplMIBGroups 2 }\n\
    \   sysApplMapGroup OBJECT-GROUP\n       OBJECTS { sysApplMapInstallPkgIndex }\n\
    \       STATUS  current\n       DESCRIPTION\n           \"The Map Group contains\
    \ a single table, sysApplMapTable,\n           that provides a backwards mapping\
    \ for determining the\n           invoked application, installed element, and\
    \ installed\n           application package given a known process identification\n\
    \           number.\"\n   ::= { sysApplMIBGroups 3 }\n   END\n"
- title: 7.  Implementation Issues
  contents:
  - "7.  Implementation Issues\n   This section discusses implementation issues that\
    \ are important for\n   both an agent developer, and a management application\
    \ developer or\n   user to understand with regards to this MIB module.  Although\
    \ this\n   section does not attempt to prescribe a particular implementation\n\
    \   strategy, it does attempt to recognize some of the real world\n   limitations\
    \ that could effect an implementation of this MIB module.\n"
- title: 7.1.  Implementation with Polling Agents
  contents:
  - "7.1.  Implementation with Polling Agents\n   Implementations of the System Application\
    \ MIB on popular operating\n   systems might require some considerable processing\
    \ power to obtain\n   status information from the managed resources.  It might\
    \ also be\n   difficult to determine when an application or a process starts or\n\
    \   finishes. Implementors of this MIB might therefore choose an\n   implementation\
    \ approach where the agent polls the managed resources\n   at regular intervals.\
    \ The information retrieved by every poll is used\n   to update a cached version\
    \ of this MIB maintained inside of the\n   agent. SNMP request are processed based\
    \ on the information found in\n   this MIB cache.\n   A scalar sysApplAgentPollInterval\
    \ is defined to give the manager\n   control over the polling frequency. There\
    \ is a trade- off between the\n   amount of resources consumed during every poll\
    \ to update the MIB\n   cache, and the accuracy of the information provided by\
    \ the System\n   Application MIB agent. A default value of 60 seconds is defined\
    \ to\n   keep the processing overhead low, while providing usable information\n\
    \   for long-lived processes. A manager is expected to adjust this value\n   if\
    \ more accurate information about short-lived applications or\n   processes is\
    \ needed, or if the amount of resources consumed by the\n   agent is too high.\n"
- title: 7.2.  sysApplElmtPastRunTable Entry Collisions
  contents:
  - "7.2.  sysApplElmtPastRunTable Entry Collisions\n   The sysApplElmtPastRunTable\
    \ maintains a history of processes which\n   have previously executed on the host\
    \ as part of an application.\n   Information is moved from the sysApplElmtRunTable\
    \ to this PastRun\n   table when the process represented by the entry terminates.\n\
    \   The sysApplElmtPastRunTable is indexed by the tuple,\n   (sysApplElmtPastRunInvocID,\
    \ sysApplElmtPastRunIndex), where the first\n   part identifies the application\
    \ invocation of which the process was a\n   part, and the second part identifies\
    \ the process itself.\n   Recall that the sysApplElmtRunIndex represents the system's\
    \ unique\n   identification number assigned to a running process and that this\n\
    \   value is mapped to sysApplElmtPastRunIndex when the process\n   terminates\
    \ and the entry's information is moved from the\n   sysApplElmtRunTable to the\
    \ sysApplElmtPastRunTable.  Many systems\n   re-use process ID numbers which are\
    \ no longer assigned to running\n   processes; typically, the process numbers\
    \ wrap and the next available\n   process number is used.\n   It is therefore\
    \ possible for two entries in the sysApplElmtPastRun\n   Table to have the same\
    \ value for sysApplElmtPastRunIndex.  For this\n   reason, entries in the ElmtPastRun\
    \ table are indexed by the tuple\n   sysApplElmtPastRunInvocID, sysApplElmtPastRunIndex\
    \ to reduce the\n   chance of a collision by two past run elements with the same\n\
    \   sysApplElmtPastRunIndex.\n   However, it is still possible, though unlikely,\
    \ for a collision to\n   occur if the following happens:\n   1)   the invoked\
    \ application (identified by InvocID), has an\n        element which runs, terminates,\
    \ and is moved into the\n        sysApplElmtPastRun table (index: InvocID, RunIndex)\n\
    \   2)   the numbers used for the system's process identification\n        numbering\
    \ wrap\n   3)   that same invoked application (same InvocID), has another\n  \
    \      element process run, AND that process is assigned the same\n        identification\
    \ number as one of the processes previously run by\n        that invoked application\
    \ (same RunIndex), and finally,\n   4)   that element process terminates and is\
    \ moved to the\n        sysApplElmtPastRun table prior to the old, duplicate (InvocID,\n\
    \        RunIndex) entry being aged out of the table by settings defined\n   \
    \     for sysApplElmtPastRunMaxRows and\n        sysApplElmtPastRunTblTimeLimit.\n\
    \   In the event that a collision occurs, the new entry will replace the\n   old\
    \ entry.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In order to implement this MIB, an agent must\
    \ make certain management\n   information available about various logical and\
    \ physical entities\n   within a managed system which may be considered sensitive\
    \ in some\n   network environments.\n   Therefore, a network administrator may\
    \ wish to employ instance-level\n   access control, and configure the access mechanism\
    \ (i.e., community\n   strings in SNMPv1 and SNMPv2C), such that certain instances\
    \ within\n   this MIB are excluded from particular MIB views.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document was produced by the Application MIB working\
    \ group.\n   Special acknowledgement is made to:\n     Rick Sturm\n     Enterprise\
    \ Management Professional Services, Inc.\n     sturm@emi-summit.com\n     For\
    \ hosting the working group mailing list, and for his\n     participation in the\
    \ development of the initial draft.\n     Jon Weinstock\n     General Instrument\
    \ Corporation\n     jweinstock@gic.gi.com\n     For his participation in the development\
    \ of the initial drafts\n     and for serving as editor for drafts 1 and 2.\n\
    \     The editor would like to extend special thanks to the\n     following working\
    \ group members for their contributions\n     to this effort.\n     Harald Alvestrand,\
    \ George Best, Ian Hanson, Harrie\n     Hazewinkel, Carl Kalbfleisch, Bobby Krupczak,\
    \ Randy\n     Presuhn, Jon Saperia, Juergen Schoenwaelder\n"
- title: 11.  Author's Address
  contents:
  - "11.  Author's Address\n   Cheryl Krupczak\n   Empire Technologies, Inc.\n   541\
    \ Tenth Street, NW Suite 169\n   Atlanta, GA 30318\n   Phone: 770.384.0184\n \
    \  EMail: cheryl@empiretech.com\n   Jonathan Saperia\n   BGS Systems Inc.\n  \
    \ saperia@networks.bgs.com\n"
- title: 12.  References
  contents:
  - "12.  References\n   [1]  Information processing systems - Open Systems\n    \
    \    Interconnection - Specification of Abstract Syntax\n        Notation One\
    \ (ASN.1), International Organization for\n        Standardization.  International\
    \ Standard 8824, (December,\n        1987).\n   [2]  SNMPv2 Working Group, Case,\
    \ J., McCloghrie, K., Rose, M.,\n        and S. Waldbusser, \"Structure of Management\
    \ Information\n        for Version 2 of the Simple Network Management Protocol\n\
    \        (SNMPv2)\", RFC 1902, January 1996.\n   [3]  SNMPv2 Working Group, Case,\
    \ J., McCloghrie, K., Rose, M.,\n        and S. Waldbusser, \"Textual Conventions\
    \ for Version 2 of\n        the Simple Network Management Protocol (SNMPv2)\"\
    , RFC\n        1903, January 1996.\n   [4]  SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K., Rose, M.,\n        and S. Waldbusser, \"Conformance Statements for Version\
    \ 2\n        of the Simple Network Management Protocol (SNMPv2)\", RFC\n     \
    \   1904, January 1996.\n   [5]  SNMPv2 Working Group, Case, J., McCloghrie, K.,\
    \ Rose, M.,\n        and S. Waldbusser, \"Protocol Operations for Version 2 of\n\
    \        the Simple Network Management Protocol (SNMPv2)\", RFC\n        1905,\
    \ January 1996.\n   [6]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose,\
    \ M.,\n        and S. Waldbusser, \"Transport Mappings for SNMPv2\", RFC\n   \
    \     1906, January 1996.\n   [7]  SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K., Rose, M.,\n        and S. Waldbusser, \"Management Information Base for\n\
    \        Version 2 of the Simple Network Management Protocol\n        (SNMPv2)\"\
    , RFC 1907, January 1996.\n   [8]  SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K., Rose, M.,\n        and S. Waldbusser, \"Coexistence between Version 1 and\n\
    \        Version 2 of the Internet-standard Network Management\n        Framework\"\
    , RFC 1908, January 1996.\n   [9]  Grillo, P., and S. Waldbusser, \"Host Resources\
    \ MIB\", RFC 1514,\n        September 1993.\n   [10] Yergeau, F., \"UTF-8, a transformation\
    \ format of Unicode\n        and ISO 10646\", RFC 2044, October 1996.\n   [11]\
    \ Krupczak, C., and S. Waldbusser, \"Applicability of Host\n        Resources\
    \ MIB to Application Management\", Application MIB\n        working group report,\
    \ October 1995.\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
