- title: __initial_text__
  contents:
  - '                A Framework for Centralized Conferencing

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the framework for Centralized Conferencing.\n\
    \   The framework allows participants using various call signaling\n   protocols,\
    \ such as SIP, H.323, Jabber, Q.931 or ISDN User Part\n   (ISUP), to exchange\
    \ media in a centralized unicast conference.  The\n   Centralized Conferencing\
    \ Framework defines logical entities and\n   naming conventions.  The framework\
    \ also outlines a set of\n   conferencing protocols, which are complementary to\
    \ the call signaling\n   protocols, for building advanced conferencing applications.\
    \  The\n   framework binds all the defined components together for the benefit\n\
    \   of builders of conferencing systems.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Overview . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n   5.  Centralized Conferencing Data  . . . . . . . . . . . . . .\
    \ . . 10\n     5.1.  Conference Information . . . . . . . . . . . . . . . . .\
    \ . 11\n     5.2.  Conference policies  . . . . . . . . . . . . . . . . . . .\
    \ 12\n   6.  Centralized Conferencing Constructs and Identifiers  . . . . . 12\n\
    \     6.1.  Conference Identifier  . . . . . . . . . . . . . . . . . . 13\n  \
    \   6.2.  Conference Object  . . . . . . . . . . . . . . . . . . . . 13\n    \
    \   6.2.1.  Conference Object Identifier . . . . . . . . . . . . . 15\n     6.3.\
    \  Conference User Identifier . . . . . . . . . . . . . . . . 16\n   7.  Conferencing\
    \ System Realization  . . . . . . . . . . . . . . . 17\n     7.1.  Cloning Tree\
    \ . . . . . . . . . . . . . . . . . . . . . . . 17\n     7.2.  Ad Hoc Example\
    \ . . . . . . . . . . . . . . . . . . . . . . 20\n     7.3.  Advanced Example\
    \ . . . . . . . . . . . . . . . . . . . . . 21\n     7.4.  Scheduling a Conference\
    \  . . . . . . . . . . . . . . . . . 23\n   8.  Conferencing Mechanisms  . . .\
    \ . . . . . . . . . . . . . . . . 26\n     8.1.  Call Signaling . . . . . . .\
    \ . . . . . . . . . . . . . . . 26\n     8.2.  Notifications  . . . . . . . .\
    \ . . . . . . . . . . . . . . 26\n     8.3.  Conference Control Protocol  . .\
    \ . . . . . . . . . . . . . 26\n     8.4.  Floor Control  . . . . . . . . . .\
    \ . . . . . . . . . . . . 26\n   9.  Conferencing Scenario Realizations . . .\
    \ . . . . . . . . . . . 28\n     9.1.  Conference Creation  . . . . . . . . .\
    \ . . . . . . . . . . 28\n     9.2.  Participant Manipulations  . . . . . . .\
    \ . . . . . . . . . 30\n     9.3.  Media Manipulations  . . . . . . . . . . .\
    \ . . . . . . . . 32\n     9.4.  Sidebar Manipulations  . . . . . . . . . . .\
    \ . . . . . . . 33\n       9.4.1.  Internal Sidebar . . . . . . . . . . . . .\
    \ . . . . . . 35\n       9.4.2.  External Sidebar . . . . . . . . . . . . . .\
    \ . . . . . 37\n     9.5.  Floor Control Using Sidebars . . . . . . . . . . .\
    \ . . . . 40\n     9.6.  Whispering or Private Messages . . . . . . . . . . .\
    \ . . . 42\n     9.7.  Conference Announcements and Recordings  . . . . . . .\
    \ . . 44\n     9.8.  Monitoring for DTMF  . . . . . . . . . . . . . . . . . .\
    \ . 46\n     9.9.  Observing and Coaching . . . . . . . . . . . . . . . . . .\
    \ 46\n   10. Relationships between SIP and Centralized Conferencing\n       Frameworks\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n   11. Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 50\n     11.1. User Authentication and\
    \ Authorization  . . . . . . . . . . 51\n     11.2. Security and Privacy of Identity\
    \ . . . . . . . . . . . . . 53\n     11.3. Floor Control Server Authentication\
    \  . . . . . . . . . . . 53\n   12. Acknowledgements . . . . . . . . . . . . .\
    \ . . . . . . . . . . 53\n   13. References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 54\n     13.1. Normative References . . . . . . . . . . .\
    \ . . . . . . . . 54\n     13.2. Informative References . . . . . . . . . . .\
    \ . . . . . . . 54\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines the framework for Centralized Conferencing.\n\
    \   The framework allows participants using various call signaling\n   protocols,\
    \ such as SIP, H.323, Jabber, Q.931 or ISUP, to exchange\n   media in a centralized\
    \ unicast conference.  Other than references to\n   general functionality (e.g.,\
    \ establishment and teardown), details of\n   these call signaling protocols are\
    \ outside the scope of this\n   document.\n   The Centralized Conferencing Framework\
    \ defines logical entities and\n   naming conventions.  The framework also outlines\
    \ a set of\n   conferencing protocols, which are complementary to the call signaling\n\
    \   protocols, for building advanced conferencing applications.\n   The Centralized\
    \ Conferencing Framework is compatible with the\n   functional model presented\
    \ in the SIP Conferencing Framework\n   [RFC4353].  Section 10 of this document\
    \ discusses the relationship\n   between the Centralized Conferencing Framework\
    \ and the SIP\n   Conferencing Framework, in the context of the Centralized\n\
    \   Conferencing model presented in this document.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT\n   RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n\
    \   described in BCP 14, [RFC2119] and indicate requirement levels for\n   compliant\
    \ implementations.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   This Centralized Conferencing Framework document generalizes,\
    \ when\n   appropriate, the SIP Conferencing Framework [RFC4353] terminology and\n\
    \   introduces new concepts, as listed below.  Further details and\n   clarification\
    \ of the new terms and concepts are provided in the\n   subsequent sections of\
    \ this document.\n   Active conference:  The term \"active conference\" refers\
    \ to a\n      conference object that has been created and activated via the\n\
    \      allocation of its identifiers (e.g., conference object identifier\n   \
    \   and conference identifier) and the associated focus.  An active\n      conference\
    \ is created based on either a system default conference\n      blueprint or a\
    \ specific conference reservation.\n   Call Signaling protocol:  The call signaling\
    \ protocol is used between\n      a participant and a focus.  In this context,\
    \ the term \"call\" means\n      a channel or session used for media streams.\n\
    \   Conference blueprint:  A conference blueprint is a static conference\n   \
    \   object within a conferencing system, which describes a typical\n      conference\
    \ setting supported by the system.  A conference\n      blueprint is the basis\
    \ for creation of dynamic conference objects.\n      A system may maintain multiple\
    \ blueprints.  Each blueprint is\n      comprised of the initial values and ranges\
    \ for the elements in the\n      object, conformant to the data schemas for the\
    \ conference\n      information.\n   Conference control protocol (CCP):  A conference\
    \ control protocol\n      provides the interface for data manipulation and state\
    \ retrieval\n      for the centralized conferencing data, represented by the\n\
    \      conference object.\n   Conference factory:  A conference factory is a logical\
    \ entity that\n      generates unique URI(s) to identify and represent a conference\n\
    \      focus.\n   Conference identifier (ID):  A conference identifier is a call\n\
    \      signaling protocol-specific URI that identifies a conference focus\n  \
    \    and its associated conference instance.\n   Conference information:  The\
    \ conference information includes\n      definitions for basic conference features,\
    \ such as conference\n      identifiers, membership, signaling, capabilities,\
    \ and media types\n      applicable to a wide range of conferencing applications.\
    \  The\n      conference information also includes the media and application-\n\
    \      specific data for enhanced conferencing features or capabilities,\n   \
    \   such as media mixers.  The conference information is the data type\n     \
    \ (i.e., the XML schema) for a conference object.\n   Conference instance:  A\
    \ conference instance refers to an internal\n      implementation of a specific\
    \ conference, represented as a set of\n      logical conference objects and associated\
    \ identifiers.\n   Conference object:  A conference object represents a conference\
    \ at a\n      certain stage (e.g., description upon conference creation,\n   \
    \   reservation, activation, etc.), which a conferencing system\n      maintains\
    \ in order to describe the system capabilities and to\n      provide access to\
    \ the services available for each object\n      independently.  The conference\
    \ object schema is based on the\n      conference information.\n   Conference\
    \ object identifier (ID):  A conference object identifier is\n      a URI that\
    \ uniquely identifies a conference object and is used by\n      a conference control\
    \ protocol to access and modify the conference\n      information.\n   Conference\
    \ policies:  Conference policies collectively refers to a\n      set of rights,\
    \ permissions, and limitations pertaining to\n      operations being performed\
    \ on a certain conference object.\n   Conference reservation:  A conference reservation\
    \ is a conference\n      object, which is created from either a system default\
    \ or client\n      selected blueprint.\n   Conference state:  The conference state\
    \ reflects the state of a\n      conference instance and is represented using\
    \ a specific, well-\n      defined schema.\n   Conferencing system:  Conferencing\
    \ system refers to a conferencing\n      solution based on the data model discussed\
    \ in this framework\n      document and built using the protocol specifications\
    \ referenced in\n      this framework document.\n   Conference user identifier\
    \ (ID):  A unique identifier for a user\n      within the scope of a conferencing\
    \ system.  A user may have\n      multiple conference user identifiers within\
    \ a conferencing system\n      (e.g., to represent different roles).\n   Floor:\
    \  Floor refers to a set of data or resources associated with a\n      conference\
    \ instance, for which a conference participant, or group\n      of participants,\
    \ is granted temporary access.\n   Floor chair:  A floor chair is a floor control\
    \ protocol compliant\n      client, either a human participant or automated entity,\
    \ who is\n      authorized to manage access to one floor and can grant, deny,\
    \ or\n      revoke access.  The floor chair does not have to be a participant\n\
    \      in the conference instance.\n   Focus:  A focus is a logical entity that\
    \ maintains the call signaling\n      interface with each participating client\
    \ and the conference object\n      representing the active state.  As such, the\
    \ focus acts as an\n      endpoint for each of the supported signaling protocols\
    \ and is\n      responsible for all primary conference membership operations\n\
    \      (e.g., join, leave, update the conference instance) and for media\n   \
    \   negotiation/maintenance between a conference participant and the\n      focus.\n\
    \   Media graph:  The media graph is the logical representation of the\n     \
    \ flow of media for a conference.\n   Media mixer:  A media mixer is the logical\
    \ entity with the capability\n      to combine media inputs of the same type,\
    \ transcode the media, and\n      distribute the result(s) to a single or multiple\
    \ outputs.  In this\n      context, the term \"media\" means any type of data\
    \ being delivered\n      over the network using appropriate transport means, such\
    \ as RTP/\n      RTP Control Protocol (RTCP) (defined in [RFC3550]) or Message\n\
    \      Session Relay Protocol (defined in [RFC4975]).\n   Role:  A role provides\
    \ the context for the set of conference\n      operations that a participant can\
    \ perform.  A default role (e.g.,\n      standard conference participant) will\
    \ always exist, providing a\n      user with a set of basic conference operations.\
    \  Based on system-\n      specific authentication and authorization, a user may\
    \ take on\n      alternate roles, such as conference moderator, allowing access\
    \ to\n      a wider set of conference operations.\n   Sidebar:  A sidebar is a\
    \ separate conference instance that only\n      exists within the context of a\
    \ parent conference instance.  The\n      objective of a sidebar is to be able\
    \ to provide additional or\n      alternate media only to specific participants.\n\
    \   Whisper:  A whisper involves a one-time media input to (a) specific\n    \
    \  participant(s) within a specific conference instance, accomplished\n      using\
    \ a sidebar.  An example of a whisper would be an announcement\n      injected\
    \ only to the conference chair or to a new participant\n      joining a conference.\n"
- title: 4.  Overview
  contents:
  - "4.  Overview\n   A centralized conference is an association of endpoints, called\n\
    \   conference participants, with a central endpoint, called a conference\n  \
    \ focus.  The focus has direct peer relationships with the participants\n   by\
    \ maintaining a separate call signaling interface with each.\n   Consequently,\
    \ in this centralized conferencing model, the call\n   signaling graph is always\
    \ a star.\n   The most basic conference supported in this model would be an ad\
    \ hoc,\n   unmanaged conference, which would not necessarily require any of the\n\
    \   functionality defined within this framework.  For example, it could\n   be\
    \ supported using basic SIP signaling functionality with a\n   participant serving\
    \ as the focus; the SIP Conferencing Framework\n   [RFC4353] together with the\
    \ SIP Call Control Conferencing for User\n   Agents [RFC4579] documents address\
    \ these types of scenarios.\n   In addition to the basic features, however, a\
    \ conferencing system\n   supporting the centralized conferencing model proposed\
    \ in this\n   framework document can offer richer functionality, by including\n\
    \   dedicated conferencing applications with explicitly defined\n   capabilities,\
    \ reserved recurring conferences, along with providing\n   the standard protocols\
    \ for managing and controlling the different\n   attributes of these conferences.\n\
    \   The core requirements for centralized conferencing are outlined in\n   [RFC4245].\
    \  These requirements are applicable for conferencing\n   systems using various\
    \ call signaling protocols, including SIP.\n   Additional conferencing requirements\
    \ are provided in [RFC4376] and\n   [RFC4597].\n   The centralized conferencing\
    \ system proposed by this framework is\n   built around a fundamental concept\
    \ of a conference object.  A\n   conference object provides the data representation\
    \ of a conference\n   during each of the various stages of a conference (e.g.,\
    \ creation,\n   reservation, active, completed, etc.).  A conference object is\n\
    \   accessed via the logical functional elements, with whom a\n   conferencing\
    \ client interfaces, using the various protocols\n   identified in Figure 1. \
    \ The functional elements defined for a\n   conferencing system described by the\
    \ framework are a conference\n   control server, floor control server, any number\
    \ of Foci, and a\n   notification service.  A conference control protocol (CCP)\
    \ provides\n   the interface between a conference and media control client and\
    \ the\n   conference control server.  A floor control protocol (e.g., Binary\n\
    \   Floor Control Protocol (BFCP)) provides the interface between a floor\n  \
    \ control client and the floor control server.  A call signaling\n   protocol\
    \ (e.g., SIP, H.323, Jabber, Q.931, ISUP, etc.) provides the\n   interface between\
    \ a call signaling client and a focus.  A\n   notification protocol (e.g.  SIP\
    \ Notify [RFC3265]) provides the\n   interface between the conferencing client\
    \ and the notification\n   service.\n   A conferencing system can support a subset\
    \ of the conferencing\n   functions depicted in the conferencing system logical\
    \ decomposition\n   in Figure 1 and described in this document.  However, there\
    \ are some\n   essential components that would typically be used by most other\n\
    \   advanced functions, such as the notification service.  For example,\n   the\
    \ notification service is used to correlate information, such as\n   the list\
    \ of participants with their media streams, between the\n   various other components.\n\
    \   ....................................................................\n   .\
    \  Conferencing System                                             .\n   .   \
    \                                                               .\n   .      \
    \  +-----------------------------------------------------+   .\n   .        |\
    \       C o n f e r e n c e   o b j e c t             |   .\n   .      +-+---------------------------------------------------+\
    \ |   .\n   .      |       C o n f e r e n c e   o b j e c t             | | \
    \  .\n   .    +-+---------------------------------------------------+ | |   .\n\
    \   .    |       C o n f e r e n c e   o b j e c t             | | |   .\n   .\
    \    |                                                     | | |   .\n   .   \
    \ |                                                     | |-+   .\n   .    | \
    \                                                    |-+     .\n   .    +-----------------------------------------------------+\
    \       .\n   .              ^                  ^             ^        |     \
    \    .\n   .              |                  |             |        |        \
    \ .\n   .              v                  v             v        v         .\n\
    \   .  +-------------------+ +--------------+ +-------+ +------------+ .\n   .\
    \  | Conference Control| | Floor Control| |Foci   | |Notification| .\n   .  |\
    \ Server            | | Server       | |       | |Service     | .\n   .  +-------------------+\
    \ +--------------+ +-------+ +------------+ .\n   .             ^            \
    \     ^           ^          |           .\n   ..............|.................|...........|..........|............\n\
    \                 |                 |           |          |\n               \
    \  |Conference       |Binary     |Call      |Notification\n                 |Control\
    \          |Floor      |Signaling |Protocol\n                 |Protocol      \
    \   |Control    |Protocol  |\n                 |                 |Protocol   |\
    \          |\n                 |                 |           |          |\n  \
    \ ..............|.................|...........|..........|............\n   . \
    \            V                 V           V          V           .\n   .  +----------------+\
    \  +------------+  +----------+ +------------+ .\n   .  | Conference     |  |\
    \ Floor      |  | Call     | |Notification| .\n   .  | and Media      |  | Control\
    \    |  | Signaling| | Client     | .\n   .  | Control        |  | Client    \
    \ |  | Client   | |            | .\n   .  | Client         |  |            | \
    \ |          | |            | .\n   .  +----------------+  +------------+  +----------+\
    \ +------------+ .\n   .                                                     \
    \             .\n   . Conferencing Client                                    \
    \          .\n   ....................................................................\n\
    \            Figure 1: Conferencing System Logical Decomposition\n   The media\
    \ graph of a conference can be centralized, decentralized, or\n   any combination\
    \ of both and potentially differ per media type.  In\n   the centralized case,\
    \ the media sessions are established between a\n   media mixer controlled by the\
    \ focus and each one of the participants.\n   In the decentralized (i.e., distributed)\
    \ case, the media graph is a\n   multicast or multi-unicast mesh among the participants.\n\
    \   Consequently, the media processing (e.g., mixing) can be controlled\n   either\
    \ by the focus alone or by the participants.  The concepts in\n   this framework\
    \ document clearly map to a centralized media model.\n   The concepts can also\
    \ apply to the decentralized media case; however,\n   the details of such are\
    \ left for future study.\n   Section 5 of this document provides more details\
    \ on the conference\n   object.  Section 6 defines the constructs and identifiers\
    \ that MUST\n   be implemented to manage the conference objects, instances, and\
    \ users\n   associated with a conferencing system.  Section 7 of this document\n\
    \   describes how a conferencing system is logically built using the\n   defined\
    \ high level data model and how the conference objects are\n   maintained.  Section\
    \ 8 describes the fundamental conferencing\n   mechanisms and provides a high\
    \ level overview of the protocols.\n   Section 9 then provides realizations of\
    \ various conferencing\n   scenarios, detailing the manipulation of the conference\
    \ objects using\n   the defined protocols.  Section 10 of this document summarizes\
    \ the\n   relationship between this Centralized Conferencing Framework and the\n\
    \   SIP Conferencing Framework.\n"
- title: 5.  Centralized Conferencing Data
  contents:
  - "5.  Centralized Conferencing Data\n   The centralized conference data is logically\
    \ represented by the\n   conference object.  A conference object is of type 'Conference\n\
    \   information type', as illustrated in Figure 2.  The conference\n   information\
    \ type is extensible.\n   +------------------------------------------------------+\n\
    \   | C o n f e r e n c e   o b j e c t                    |\n   |           \
    \                                           |\n   | +--------------------------------------------------+\
    \ |\n   | |  Conference information type                     | |\n   | |     \
    \                                             | |\n   | | +----------------------------------------------+\
    \ | |\n   | | | Conference description  (times, duration)    | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Membership\
    \ (roles, capacity, names)          | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Signaling\
    \ (protocol, direction, status)      | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Floor\
    \ information                            | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Sidebars,\
    \ Etc.                               | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Mixer\
    \ algorithm, inputs, and outputs         | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Floor\
    \ controls                               | | |\n   | | +----------------------------------------------+\
    \ | |\n   | | +----------------------------------------------+ | |\n   | | | Etc.\
    \                                         | | |\n   | | +----------------------------------------------+\
    \ | |\n   | +--------------------------------------------------+ |\n   +------------------------------------------------------+\n\
    \              Figure 2: Conference Object Type Decomposition\n   In a system\
    \ based on this conferencing framework, the same conference\n   object type is\
    \ used for representation of a conference during\n   different stages of a conference,\
    \ such as expressing conferencing\n   system capabilities, reserving conferencing\
    \ resources, or reflecting\n   the state of ongoing conferences.  Section 7 describes\
    \ the usage\n   semantics of the conference objects.  The exact XML schema of\
    \ the\n   conference object, including the organization of the conference\n  \
    \ information is detailed in a separate document [XCON-COMMON].\n   Along with\
    \ the basic data model, as defined in [XCON-COMMON], the\n   realization of this\
    \ framework requires a policy infrastructure.  The\n   policies required by this\
    \ framework to manage and control access to\n   the data include local, system\
    \ level boundaries associated with\n   specific data elements, such as the membership,\
    \ and the ranges and\n   limitations of other data elements.  Additional policy\
    \ considerations\n   for a system realization based on this data model are discussed\
    \ in\n   Section 5.2.\n"
- title: 5.1.  Conference Information
  contents:
  - "5.1.  Conference Information\n   There is a core set of data in the conference\
    \ information that is\n   utilized in any conference, independent of the specific\
    \ conference\n   media nature (e.g., the mixing algorithms performed, the advanced\n\
    \   floor control applied, etc.).  This core set of data in the\n   conference\
    \ information contains the definitions representing the\n   conference object\
    \ capabilities, membership, roles, call signaling,\n   and media status relevant\
    \ to different stages of the conference life-\n   cycle.  This core set of conference\
    \ information may be represented\n   using the conference-type, as defined in\
    \ the SIP conference event\n   package [RFC4575].  Typically, participants with\
    \ read-only access to\n   the conference information would be interested in this\
    \ core set of\n   conference information only.\n   In order to support more complex\
    \ media manipulations and enhanced\n   conferencing features, the conference information,\
    \ as defined in the\n   data model [XCON-COMMON], contains additional data beyond\
    \ that\n   defined in the SIP conference event package [RFC4575].  The\n   information\
    \ defined in the data model [XCON-COMMON] provides specific\n   media mixing details,\
    \ available floor controls, and other data\n   necessary to support enhanced conferencing\
    \ features.  This\n   information allows authorized clients to manipulate the\
    \ mixer's\n   behavior via the focus, with the resultant distribution of the media\n\
    \   to all or individual participants.  By doing so, a client can change\n   its\
    \ own state and/or the state of other participants in the\n   conference.\n  \
    \ New centralized conferencing specifications can extend the basic\n   conference-type,\
    \ as defined in the data model [XCON-COMMON], and\n   introduce additional data\
    \ elements to be used within the conference\n   information type.\n"
- title: 5.2.  Conference policies
  contents:
  - "5.2.  Conference policies\n   Conference policies collectively refers to a set\
    \ of rights,\n   permissions and limitations pertaining to operations being performed\n\
    \   on a certain conference object.\n   The set of rights describes the read/write\
    \ access privileges for the\n   conference object as a whole.  This access would\
    \ usually be granted\n   and defined in terms of giving the read-only or read/write\
    \ access to\n   clients with certain roles in the conference.  Managing this access\n\
    \   would require a conferencing system to have access to basic policy\n   information\
    \ to make the decisions, but doesn't necessarily require an\n   explicit representation\
    \ in the policy model.  As such, for this\n   framework document, the policies\
    \ represented by the set of rights are\n   reflected in the system realization\
    \ (Section 7).\n   The permissions and limits require explicit policy mechanisms\
    \ and are\n   outside the scope of the data model [XCON-COMMON] and this framework\n\
    \   document.  However, there are some important policy considerations\n   for\
    \ a conferencing system.  A conferencing system associates specific\n   policies\
    \ in the form of permissions and limitations with each user in\n   a conferencing\
    \ system.  The permissions may vary depending upon the\n   role associated with\
    \ a specific conference user identifier.  A\n   conferencing system should provide\
    \ a default user role that only\n   allows participation in a conference through\
    \ the default signaling\n   means.\n   The conference object identifier provides\
    \ access to the data\n   associated with a specific conference.  It is important\
    \ to ensure\n   that elements in the data have individual policy controls to provide\n\
    \   flexibility in defining the various roles and specific data elements\n   that\
    \ may be manipulated by users with specific roles.\n   In addition, the conference\
    \ notification interface allows specific\n   data elements to be sent to users\
    \ that register for such\n   notifications.  It is important that the appropriate\
    \ access control\n   is provided so that only users that are authorized to view\
    \ specific\n   data elements receive the data in the notifications.\n"
- title: 6.  Centralized Conferencing Constructs and Identifiers
  contents:
  - "6.  Centralized Conferencing Constructs and Identifiers\n   This section provides\
    \ details of the identifiers associated with the\n   centralized conferencing\
    \ framework constructs and the identifiers\n   REQUIRED to address and manage\
    \ the clients associated with a\n   conferencing system.  An overview of the allocation,\
    \ characteristics,\n   and functional role of the identifiers is provided.\n"
- title: 6.1.  Conference Identifier
  contents:
  - "6.1.  Conference Identifier\n   The conference identifier (conference ID) is\
    \ a call signaling\n   protocol-specific URI that identifies a specific conference\
    \ focus and\n   its associated conference instance.  A conference factory is one\n\
    \   method for generating a unique conference ID, to identify and address\n  \
    \ a conference focus, using a call signaling interface.  Details on the\n   use\
    \ of a conference factory for SIP signaling can be found in\n   [RFC4579].  The\
    \ conference identifier can also be obtained using the\n   conference control\
    \ protocol or other, including proprietary, out-of-\n   band mechanisms.  To realize\
    \ the centralized conferencing framework\n   in this document, a conferencing\
    \ system is REQUIRED to support SIP as\n   the default call signaling protocol.\
    \  Other call signaling protocols\n   (e.g., ISUP) are OPTIONAL.\n"
- title: 6.2.  Conference Object
  contents:
  - "6.2.  Conference Object\n   A conference object provides the logical representation\
    \ of a\n   conference instance in a certain stage, such as a conference\n   blueprint\
    \ representing a conferencing system's capabilities, the data\n   representing\
    \ a conference reservation, and the conference state\n   during an active conference.\
    \  Each conference object is independently\n   addressable through the conference\
    \ control protocol interface (see\n   Section 8.3).  A conferencing system MUST\
    \ provide a default blueprint\n   representing the basic capabilities provided\
    \ by that specific\n   conferencing system.\n   Figure 3 illustrates the relationships\
    \ between the conference\n   identifier, the focus, and the conference object\
    \ ID within the\n   context of a logical conference instance, with the conference\
    \ object\n   corresponding to an active conference.\n   A conference object representing\
    \ a conference in the active state can\n   have multiple call signaling conference\
    \ identifiers; for example, one\n   for each call signaling protocol supported.\
    \  There is a one-to-one\n   mapping between an active conference object and a\
    \ conference focus.\n   The focus is addressed by explicitly associating unique\
    \ conference\n   IDs for each signaling protocol supported by the active conference\n\
    \   object.\n    ....................................................................\n\
    \    .  Conference Instance                                             .\n  \
    \  .                                                                  .\n    .\
    \                                                                  .\n    .  \
    \      +---------------------------------------------------+     .\n    .    \
    \    |       Conference Object Identifier                |     .\n    .      \
    \  |                                                   |     .\n    .        |\
    \                                                   |     .\n    .        +---------------------------------------------------+\
    \     .\n    .                           ^                            ^      \
    \   .\n    .                           |                            |        \
    \ .\n    .                           v                            |         .\n\
    \    .   ...................................................  |         .\n  \
    \  .   . Focus                                           .  |         .\n    .\
    \   .                                                 .  |         .\n    .  \
    \ .           +----------------------------------+  .  |         .\n    .   .\
    \           |Conference Identifier (Protocol Y)|  .  |         .\n    .   .  \
    \     +------------------------------------+ |  .  |         .\n    .   .    \
    \   |  Conference Identifier (ISUP)      | |  .  |         .\n    .   .   +--------------------------------------+\
    \ |-+  .  |         .\n    .   .   |     Conference Identifier (SIP)      | |^\
    \   .  |         .\n    .   .   |                                      |-+|  \
    \ .  |         .\n    .   .   |                                      |^ |   .\
    \  |         .\n    .   .   +--------------------------------------+| |   .  |\
    \         .\n    .   ............^...............................|.|....  |  \
    \       .\n    .               |                               | |      |    \
    \     .\n    ................|...............................|.|......|..........\n\
    \                    |                               | |      |\n            \
    \        |SIP                            | |      |Conference\n              \
    \      |                          ISUP | |Y     |Control\n                   \
    \ |                               | |      |Protocol\n                    |  \
    \             +---------------+ |      |\n                    |              \
    \ |                 |      |\n                    |               |          \
    \       |      |\n                    v               v                 v    \
    \  v\n         +----------------+  +--------------+  +---------------+\n     \
    \    | Conferencing   |  | Conferencing |  | Conference    |\n         | Client\
    \         |  | Client       |  | Client        |\n         | 1              |\
    \  | 2            |  | X             |\n         +----------------+  +--------------+\
    \  +---------------+\n        Figure 3: Identifier Relationships for an Active\
    \ Conference\n"
- title: 6.2.1.  Conference Object Identifier
  contents:
  - "6.2.1.  Conference Object Identifier\n   In order to make each conference object\
    \ externally accessible, the\n   conferencing system MUST allocate a unique URI\
    \ per distinct\n   conference object in the system.  The conference object identifier\
    \ is\n   defined in [XCON-COMMON].  A conferencing system allocates a\n   conferencing\
    \ object identifier for every conference blueprint, for\n   every conference reservation,\
    \ and for every active conference.  The\n   distribution of the conference object\
    \ identifier depends upon the\n   specific use case and includes a variety of\
    \ mechanisms, such as\n   through the conference control protocol mechanism, the\
    \ data model and\n   conference package, or out-of-band mechanisms such as email.\n\
    \   When a user wishes to create or join a conference and the user does\n   not\
    \ have the conference object identifier for the specific\n   conference, more\
    \ general signaling mechanisms apply.  A user may have\n   a pre-configured conference\
    \ object identifier to access the\n   conferencing system or other signaling protocols\
    \ may be used and the\n   conferencing system maps those to a specific conference\
    \ object\n   identifier.  Once a conference is established, a conference object\n\
    \   identifier is REQUIRED for the user to manipulate any of the\n   conferencing\
    \ data or take advantage of any of the advanced\n   conferencing features.  The\
    \ same notion applies to users joining a\n   conference using other signaling\
    \ protocols.  They are able to\n   initially join a conference using any of the\
    \ other signaling\n   protocols supported by the specific conferencing system,\
    \ but the\n   conference object identifier MUST be used to manipulate any of the\n\
    \   conferencing data or take advantage of any of the advanced\n   conferencing\
    \ features.  As mentioned previously, the mechanism by\n   which the user learns\
    \ of the conference object identifier varies and\n   could be via the conference\
    \ control protocol, using the data model\n   and conference package or entirely\
    \ out of band mechanisms such as\n   email or a web interface.\n   The conference\
    \ object identifier logically maps to other protocol-\n   specific identifiers\
    \ associated with the conference instance, such as\n   the BFCP 'confid'.  The\
    \ mapping of the conference object identifier\n   can be viewed to contain sensitive\
    \ information in many conferencing\n   systems.  The conferencing system must\
    \ ensure that the data is\n   protected, that only authorized users can manipulate\
    \ that information\n   via the conferencing control protocol, and that only the\
    \ appropriate\n   users receive the information through the notification protocol.\
    \  In\n   general, this information would not be expected to be distributed to\n\
    \   the average conference participant.\n"
- title: 6.3.  Conference User Identifier
  contents:
  - "6.3.  Conference User Identifier\n   Each user within a conferencing system MUST\
    \ be allocated a unique\n   conference user identifier.  The conference user identifier\
    \ is\n   defined in [XCON-COMMON].  The conference user identifier is used in\n\
    \   association with the conference object identifier to uniquely\n   identify\
    \ a user within the scope of conferencing system.  There is\n   also a requirement\
    \ for identifying conferencing system users who may\n   not be participating in\
    \ a conference instance.  Examples of these\n   users would be a non-participating\
    \ 'Floor Control Chair' or 'Media\n   Policy Controller'.  The conference user\
    \ identifier is REQUIRED, in\n   conference control protocol requests, to uniquely\
    \ determine who is\n   issuing commands, so that appropriate policies can be applied\
    \ to the\n   requested command.\n   A typical mode for distributing the user identifier\
    \ is out of band\n   during conferencing client configuration; thus, the mechanism\
    \ is\n   outside the scope of the centralized conferencing framework and\n   protocols.\
    \  However, a conferencing system MUST also be capable of\n   allocating and distributing\
    \ a user identifier during the first\n   signaling interaction with the conferencing\
    \ system, such as an\n   initial request for blueprints or adding a new user to\
    \ an existing\n   conference using the conference control protocol.  When a user\
    \ joins\n   a conference using a signaling-specific protocol, such as SIP for\
    \ a\n   dial-in conference, a conference user identifier MUST be assigned if\n\
    \   one is not already associated with that user.  While this conference\n   user\
    \ identifier isn't required for the participant to join the\n   conference, it\
    \ is REQUIRED to be allocated and assigned by the\n   conferencing system such\
    \ that it is available for use for any\n   subsequent conference control protocol\
    \ operations and/or\n   notifications associated with that conference.  For example,\
    \ the\n   conference user identifier would be sent in any notifications that\n\
    \   may be sent to existing participants, such as the moderator, when\n   this\
    \ user joins.\n   The conference user identifier is logically associated with\
    \ the other\n   user identifiers assigned to the conferencing client for other\n\
    \   protocol interfaces, such as an authenticated SIP user.  The mapping\n   of\
    \ the conference user identifier to signaling specific user\n   identifiers requires\
    \ that methods for protecting and securing a\n   user's identity are considered.\
    \  Section 11.1 addresses \"User\n   Authentication and Authorization\" and Section\
    \ 11.2 addresses the\n   \"Security and Privacy of User Identity\".  In addition,\
    \ the\n   conferencing system MUST ensure the appropriate access control around\n\
    \   any internal data structure that maintains this persistent data.\n   This\
    \ information would typically only be available to a conferencing\n   system administrator.\n"
- title: 7.  Conferencing System Realization
  contents:
  - "7.  Conferencing System Realization\n   Implementations based on this centralized\
    \ conferencing framework can\n   range from systems supporting ad hoc conferences,\
    \ with default\n   behavior only, to sophisticated systems with the ability to\
    \ schedule\n   recurring conferences, each with distinct characteristics, being\n\
    \   integrated with external resource reservation tools, and providing\n   snapshots\
    \ of the conference information at any of the stages of the\n   conference life-cycle.\n\
    \   A conference object is the logical representation of a conference\n   instance\
    \ at a certain stage, such as capabilities description upon\n   conference creation,\
    \ reservation, activation, etc., which a\n   conferencing system maintains in\
    \ order to describe the system\n   capabilities and to provide access to the available\
    \ services provided\n   by the conferencing system.  Consequently, this centralized\n\
    \   conferencing framework does not mandate the actual usage of the\n   conference\
    \ object, but rather defines the general cloning tree\n   concept and the mechanisms\
    \ required for its realization, as described\n   in detail in Section 7.1.\n \
    \  Ad hoc and advanced conferencing examples are provided in Section 7.2\n   and\
    \ Section 7.3, with the latter providing additional description of\n   the conference\
    \ object in terms of the stages of a conference, to\n   support scheduled and\
    \ other advanced conference capabilities.  The\n   scheduling of a conference\
    \ based on these concepts and mechanisms is\n   then detailed in Section 7.4\n\
    \   As discussed in Section 5.2, the overall policy in terms of\n   permissions\
    \ and limitations is outside the scope of this framework\n   document.  The policies\
    \ applicable to the conference object as a\n   whole in terms of read/write access\
    \ would require a conferencing\n   system have access to basic policy information\
    \ to make the decisions.\n   In the examples in this section, the policies are\
    \ shown logically\n   associated with the conference objects to emphasize the\
    \ general\n   requirement for policy functionality necessary for the realization\
    \ of\n   this framework.\n"
- title: 7.1.  Cloning Tree
  contents:
  - "7.1.  Cloning Tree\n   The concept defined in this section is a logical representation\
    \ only,\n   as it is reflected through the centralized conferencing mechanisms:\n\
    \   the URIs and the protocols.  Of course, the actual system realization\n  \
    \ can differ from the presented model.  The intent is to illustrate the\n   role\
    \ of the logical elements in providing an interface to the data,\n   based on\
    \ conferencing system and conferencing client actions, and\n   describe the resultant\
    \ protocol implications.\n   Any conference object in a conferencing system is\
    \ created by either\n   being explicitly cloned from an existing parent object\
    \ or being\n   implicitly cloned from a default system conference blueprint. \
    \ A\n   conference blueprint is a static conference object used to describe a\n\
    \   typical conference setting supported by the system.  Each system can\n   maintain\
    \ multiple blueprints, typically each describing a different\n   conferencing\
    \ type using the conference information format.  This\n   document uses the \"\
    cloning\" metaphor instead of the \"inheritance\"\n   metaphor because it more\
    \ closely fits the idea of object replication,\n   rather than a data type re-usage\
    \ and extension concept.\n   The cloning operation needs to specify whether or\
    \ not the link\n   between the parent and child needs to be maintained in the\
    \ system.\n   If no link between the parent and child exists, the objects become\n\
    \   independent and the child is not impacted by any operations on the\n   parent\
    \ object nor subject to any limitations of the parent object.\n   Once the new\
    \ object is created, it can be addressed by a unique\n   conference object URI\
    \ assigned by the system, as described in\n   Section 6.2.1.  By default, the\
    \ newly created object contains all the\n   data existing in the parent object.\
    \  The newly created object can\n   expand the data it contains, within the schema\
    \ types supported by the\n   parent.  It can also restrict the read/write access\
    \ to its objects.\n   However, unless the object is independent, it cannot modify\
    \ the\n   access restrictions imposed by the parent object.\n   Any piece of data\
    \ in the child object can be independently accessed\n   and, by default, can be\
    \ independently modified without affecting the\n   parent data.\n   Unless the\
    \ object is independent, the parent object can enforce a\n   different policy\
    \ by marking certain data elements as \"parent\n   enforceable\".  The values\
    \ of these data elements cannot be changed by\n   directly accessing the child\
    \ object, nor can they be expanded in the\n   child object alone.\n   Figure 4\
    \ illustrates an example of a conference (Parent B), which is\n   created independent\
    \ of its Parent (Parent A).  Parent B creates two\n   child objects, Child 1 and\
    \ Child 2.  Any of the data elements of\n   Parent B can be modified (i.e., there\
    \ are no \"parent enforceable\"\n   data elements), and depending upon the element,\
    \ the changes will be\n   reflected in Child 1 and Child 2 , whereas changes to\
    \ Parent A will\n   not impact the data elements of Parent B.  Any \"parent enforceable\"\
    \n   data elements, as defined by Parent B, cannot be modified in the\n   child\
    \ objects.\n   +---+-----------------------+\n   | p |                       |\n\
    \   | o |   P A R E N T  A      |\n   | l |                       |\n   | i |\
    \   C O N F E R E N C E |\n   | c |                       |\n   | i |   O B J\
    \ E C T         |\n   | e |                       |\n   +-s-+-----------------------+\n\
    \           |\n          \\| /\n           \\/  INDEPENDENT\n           /\\\n\
    \          /| \\\n           V\n   +---+-----------------------+\n   | p |   \
    \                    |\n   | o |   P A R E N T  B      |\n   | l |           \
    \            |\n   | i |   C O N F E R E N C E |\n   | c |                   \
    \    |\n   | i |   O B J E C T         |\n   | e |                       |\n \
    \  +-s-+-----------------------+\n           |    |\n           |    |\n     \
    \      |    ---------------------------\n           |                        \
    \      |\n           V                              V\n   +---+-----------------------+\
    \    +---+-----------------------+\n   | p |                       |    | p |\
    \                       |\n   | o |   C H I L D  1        |    | o |   C H I L\
    \ D  2        |\n   | l |                       |    | l |                   \
    \    |\n   | i |   C O N F E R E N C E |    | i |   C O N F E R E N C E |\n  \
    \ | c |                       |    | c |                       |\n   | i |   O\
    \ B J E C T         |    | i |   O B J E C T         |\n   | e |             \
    \          |    | e |                       |\n   +-s-+-----------------------+\
    \    +-s-+-----------------------+\n                        Figure 4: The Cloning\
    \ Tree\n   Using the defined cloning model and its tools, the following sections\n\
    \   show examples of how different systems based on this framework can be\n  \
    \ realized.\n"
- title: 7.2.  Ad Hoc Example
  contents:
  - "7.2.  Ad Hoc Example\n   Figure 5 illustrates how an ad hoc conference can be\
    \ created and\n   managed in a conferencing system.  A client can create a conference\n\
    \   by establishing a call signaling channel with a conference factory,\n   as\
    \ specified in Section 6.1.  The conference factory can internally\n   select\
    \ one of the system supported conference blueprints based on the\n   requesting\
    \ client privileges and the media lines included in the\n   Session Description\
    \ Protocol (SDP) body.\n   The selected blueprint with its default values is copied\
    \ by the\n   server into a newly created conference object, referred to as an\n\
    \   'Active Conference'.  At this point, the conference object becomes\n   independent\
    \ from its blueprint.  A new conference object identifier,\n   a new conference\
    \ identifier, and a new focus are allocated by the\n   server.\n   During the\
    \ conference lifetime, an authorized client can manipulate\n   the conference\
    \ object, by performing operations such as adding\n   participants, using the\
    \ conference control protocol.\n   +---+-----------------------+\n   | p |   \
    \                    |\n   | o |   System  Default     |\n   | l |           \
    \            |\n   | i |   Conference          |\n   | c |                   \
    \    |\n   | i |   Blueprint           |\n   | e |                       |\n \
    \  +-s-+-----------------------+\n           |\n          \\| /\n           \\\
    /\n           /\\\n          /| \\\n           V\n   +---+-----------------------+\n\
    \   | p |                       |\n   | o |  Active               |\n   | l |\
    \                       |\n   | i |  Conference           |\n   | c |        \
    \               |\n   | i |                       |\n   | e |                \
    \       |\n   +-s-+-----------------------+\n             Figure 5: Conference\
    \ Ad-hoc Creation and Lifetime\n"
- title: 7.3.  Advanced Example
  contents:
  - "7.3.  Advanced Example\n   Figure 6 illustrates how a recurring conference can\
    \ be specified\n   according to system capabilities, scheduled, reserved, and\
    \ managed in\n   a conferencing system.  A client would first query a conferencing\n\
    \   system for its capabilities.  This can be done by requesting a list\n   of\
    \ the conference blueprints the system supports.  Each blueprint\n   contains\
    \ a specific combination of capabilities and limitations of\n   the conference\
    \ server in terms of supported media types (e.g., audio,\n   video, text, or combinations\
    \ of these), participant roles, maximum\n   number of participants of each role,\
    \ availability of floor control,\n   controls available for participants, availability\
    \ and type of\n   sidebars, the definitions and names of media streams, etc.\n\
    \   The selected blueprint with its default values is cloned by the\n   client\
    \ into a newly created conference object, referred to as a\n   conference reservation,\
    \ that specifies the resources needed from the\n   system for this conference\
    \ instance.  At this point, the conference\n   reservation becomes independent\
    \ from its blueprint.  The client can\n   also change the default values, within\
    \ the system ranges, and add\n   additional information, such as the list of participants\
    \ and the\n   conference 'start' time, to the conference reservation.\n   At this\
    \ point, the client can ask the conference server to create new\n   conference\
    \ reservations by attaching the conference reservation to\n   the request.  As\
    \ a result, the server can allocate the needed\n   resources, create the additional\
    \ conference objects for the child\n   conference reservations, and allocate the\
    \ conference object\n   identifiers for all -- the original conference reservation\
    \ and for\n   each child conference reservation.\n   From this point on, any authorized\
    \ client is able to access and\n   modify each of the conference objects independently.\
    \  By default,\n   changes to an individual child conference reservation will\
    \ affect\n   neither the parent conference reservation, from which it was created,\n\
    \   nor its siblings.\n   On the other hand, some of the conference sub-objects,\
    \ such as the\n   maximum number of participants and the participants list, can\
    \ be\n   defined by the system as parent enforceable.  As a result, these\n  \
    \ objects can be modified by accessing the parent conference\n   reservation only.\
    \  The changes to these objects can be applied\n   automatically to each of the\
    \ child reservations, subject to local\n   policy.\n   +---+-----------------------+\n\
    \   | p |                       |\n   | o |   Selected            |\n   | l |\
    \                       |\n   | i |   Conference          |\n   | c |        \
    \               |\n   | i |   Blueprint           |\n   | e |                \
    \       |\n   +-s-+-----------------------+\n           |\n          \\| /\n \
    \          \\/\n           /\\\n          /| \\\n           V\n   +---+-----------------------+\n\
    \   | p |                       |\n   | o | Conference            |\n   | l |\
    \                       |\n   | i | Reservation           |\n   | c |        \
    \               |\n   | i |                       |\n   | e |                \
    \       |\n   +-s-+-----------------------+\n           |  |  |\n           |\
    \  |  |\n           |  |  |\n           |  |  |\n       +---|--|--V-----------------+\n\
    \     +-+---|--V------------------+ |\n   +-+-+---V-------------------+ | |\n\
    \   | p |                       | | |\n   | o | Child Conference      | | |\n\
    \   | l |                       | | |\n   | i | Reservation           | | |\n\
    \   | c |                       | | |\n   | i |                       | |-+\n\
    \   | e |                       |-+\n   +-s-+-----------------------+\n     Figure\
    \ 6: Advanced Conference Definition, Creation, and Lifetime\n   When the time\
    \ comes to schedule the conference reservation, either\n   via the system determination\
    \ that the 'start' time has been reached\n   or via client invocation, an active\
    \ conference is cloned based on the\n   conference reservation.  As in the ad\
    \ hoc example, the active\n   conference is independent from the parent, and changes\
    \ to the\n   conference reservation will not impact the active conference.  Any\n\
    \   desired changes must be targeted towards the active conference.  An\n   example\
    \ of this interaction is shown in Section 9.1.\n"
- title: 7.4.  Scheduling a Conference
  contents:
  - "7.4.  Scheduling a Conference\n   The capability to schedule conferences forms\
    \ an important part of the\n   conferencing system solution.  An individual conference\
    \ reservation\n   typically has a specified 'start' and 'end' time, with the times\n\
    \   being specified relative to a single specified 'fixed' time (e.g.,\n   'start'\
    \ = 09.00 GMT, 'end'= 'start'+2), subject to system\n   considerations.  In most\
    \ advanced conferencing solutions, it is\n   possible to not only schedule an\
    \ individual occurrence of a\n   conference reservation, but also schedule a series\
    \ of related\n   conferences (e.g., a weekly meeting that starts on Thursday at\
    \ 09.00\n   GMT).\n   To be able to achieve such functionality, a conferencing\
    \ system needs\n   to be able to appropriately schedule and maintain conference\n\
    \   reservations that form part of a recurring conference.  The mechanism\n  \
    \ proposed in this document makes use of the \"Internet Calendaring and\n   Scheduling\
    \ Core Object\" specification defined in [RFC2445] in union\n   with the concepts\
    \ introduced in Section 5 for the purpose of\n   achieving advanced conference\
    \ scheduling capability.\n   Figure 7 illustrates a simplified view of a client\
    \ interacting with a\n   conferencing system.  The client is using the conference\
    \ control\n   protocol to add a new conference reservation to the conferencing\n\
    \   system by interfacing with the conference control server.  A CCP\n   request\
    \ contains a valid conference reservation and reference by\n   value to an \"\
    iCal\" object that contains scheduling information about\n   the conference (e.g.,\
    \ 'start' time, 'end' time).\n   +--------------+     +-------Conferencing System-----------------+\n\
    \   | Generic ICAL |     |                                           |\n   | \
    \  Resource   |     |    ..Conference Instance....              |\n   +--------------+\
    \     |    .                       . +-----------+|\n         ^ ^            |\
    \    . +-------------------+ . | Conference||\n         | |            |    .\
    \ |Conference Objects |<--| Control   ||\n         | ----------------->. +-------------------+\
    \ . | Server    ||\n         |              |    .                       . +-----------+|\n\
    \         |              |    .........................       ^      |\n     \
    \    |              |                ^                   |      |\n   +-----|--------------+\
    \                |                   |      |\n   |     v                    \
    \           |                   |      |\n   |  +--------------+             \
    \      |                   |      |\n   |  |   Resource   |<------------------+\
    \                   |      |\n   |  |   Scheduler  |                         \
    \              |      |\n   |  +--------------+                              \
    \         |      |\n   |                                                     \
    \    |      |\n   +---------------------------------------------------------|------+\n\
    \                                                             |\n            \
    \                                                 |\n                        \
    \                                +-Request-+\n                               \
    \                         |         |\n                                      \
    \                  +----+    |\n                                             \
    \           |ICAL|    |\n                                                    \
    \    +----+----+\n                                                           \
    \  |\n                                                             |\n       \
    \                                                      |\n                   \
    \                        Conference Control|\n                               \
    \                Protocol      |\n                                           \
    \                  |\n                                                    +-------------+\n\
    \                                                    | Conferencing|\n       \
    \                                             | Client      |\n              \
    \                                      +-------------+\n                     \
    \  Figure 7: Resource Scheduling\n   A CCP request to create a new conference\
    \ reservation is validated,\n   including the associated iCal object, and the\
    \ resultant conference\n   reservation is created.  The conference reservation\
    \ is uniquely\n   represented within the conferencing system by a conference object\n\
    \   identifier (e.g., xcon:hd87928374), as introduced in Section 6.2.1\n   and\
    \ defined in [XCON-COMMON].  This unique URI is returned to the\n   client and\
    \ can be used to reference the conference reservation, if\n   any future manipulations\
    \ are required (e.g., alter 'start' time),\n   using a CCP request.\n   The previous\
    \ example explains how a client creates a basic conference\n   reservation using\
    \ an iCal reference in association with a conference\n   control protocol.  Figure\
    \ 7 can also be applied when explaining how a\n   series of conferences are scheduled\
    \ in the system.  The description\n   is almost identical with the exception that\
    \ the iCal definition that\n   is included in a CCP request represents a series\
    \ of recurring\n   conference instances (e.g., conference 'start' time, 'end'\
    \ time,\n   occur weekly).  The conferencing system will treat this request the\n\
    \   same as the first example.  The CCP request will be validated, along\n   with\
    \ the associated iCal object, and the conference reservation is\n   created. \
    \ The conference reservation and its conference object ID,\n   created for this\
    \ example, represent the entire series of recurring\n   conference instances rather\
    \ than a single Conference.  If the client\n   uses the conference object ID provided\
    \ and a CCP request to adjust\n   the conference reservation, every conference\
    \ instance in the series\n   will be altered.  This includes all future occurrences,\
    \ such as a\n   conference scheduled as an infinite series, subject to the\n \
    \  limitations of the available calendaring interface.\n   A conferencing system\
    \ that supports the scheduling of a series of\n   conference instances should\
    \ also be able to support manipulation\n   within a specific range of the series.\
    \  A good example is a\n   conference reservation that has been scheduled to occur\
    \ every Monday\n   at 09.00 GMT.  For the next three weeks only, the meeting has\
    \ been\n   altered to occur at 10.00 GMT in an alternative venue.  With Figure\
    \ 7\n   in mind, the client will construct a CCP request whose purpose is to\n\
    \   modify the existing conference reservation for the recurring\n   conference\
    \ instance.  The client will include the conference object\n   ID provided by\
    \ the conferencing system to explicitly reference the\n   conference reservation\
    \ within the conferencing system.  A CCP request\n   will contain all the required\
    \ changes to the conference reservation\n   (e.g., change of venue).\n   The conferencing\
    \ system matches the incoming CCP request to the\n   existing conference reservation\
    \ but identifies that the associated\n   iCal object only refers to a range of\
    \ the existing series.  The\n   conferencing system creates a child, by cloning\
    \ the original\n   conference reservation, to represent the altered conference\
    \ instances\n   within the series.  The cloned child object is not independent\
    \ of the\n   original parent object, thus preventing any potential conflicts in\n\
    \   scheduling (e.g., a change to the whole series ''start' time').  The\n   cloned\
    \ conference reservation, representing the altered series of\n   conference instances,\
    \ has its own associated conference object ID\n   that is returned to the client\
    \ using a CCP response.  This conference\n   object ID is then used by the client\
    \ to make any future alterations\n   on the newly defined sub-series.  This process\
    \ can be repeated any\n   number of times as the newly returned conference object\
    \ ID\n   representing an altered (cloned) series of conference instances, can\n\
    \   itself be manipulated using a CCP request for the newly created\n   conference\
    \ object ID .  This provides a flexible approach to the\n   scheduling of recurring\
    \ conference instances.\n"
- title: 8.  Conferencing Mechanisms
  contents:
  - '8.  Conferencing Mechanisms

    '
- title: 8.1.  Call Signaling
  contents:
  - "8.1.  Call Signaling\n   The focus is the central component of the conference.\
    \  Participants\n   interface with the focus using an appropriate call signaling\
    \ protocol\n   (CSP).  Participants request to establish or join a conference\
    \ using\n   the CSP.  After checking the applicable policies, a focus then either\n\
    \   accepts the request, sends a progress indication related to the\n   status\
    \ of the request (e.g., for a parked call while awaiting\n   moderator approval\
    \ to join), or rejects that request using the call\n   signaling interface.\n\
    \   During an active conference, a conference control protocol can be\n   used\
    \ to affect the conference state.  For example, CCP requests to\n   add and delete\
    \ participants are communicated to the focus and checked\n   against the conference\
    \ policies.  If approved, the participants are\n   added or deleted using the\
    \ call signaling to/from the focus.\n"
- title: 8.2.  Notifications
  contents:
  - "8.2.  Notifications\n   A conferencing system is responsible for implementing\
    \ a conference\n   notification service.  The conference notification service\
    \ provides\n   updates about the conference instance state to authorized parties,\n\
    \   including participants.  A model for notifications using SIP is\n   defined\
    \ in [RFC3265] with the specifics to support conferencing\n   defined in [RFC4575].\n\
    \   The conference user identifier and associated role are used by the\n   conferencing\
    \ system to filter the notifications such that they\n   contain only information\
    \ that is allowed to be sent to that user.\n"
- title: 8.3.  Conference Control Protocol
  contents:
  - "8.3.  Conference Control Protocol\n   The conference control protocol provides\
    \ for data manipulation and\n   state retrieval for the centralized conferencing\
    \ data, represented by\n   the conference object.  The details of the conference\
    \ control\n   protocol are provided in separate documents.\n"
- title: 8.4.  Floor Control
  contents:
  - "8.4.  Floor Control\n   A floor control protocol allows an authorized client\
    \ to manage access\n   to a specific floor and to grant, deny or revoke access\
    \ of other\n   conference users to that floor.  Floor control is not a mandatory\n\
    \   mechanism for a conferencing system implementation, but it provides\n   advanced\
    \ media input control features for conference users.  A\n   mechanism for floor\
    \ control within a conferencing system is defined\n   in the \"Binary Floor Control\
    \ Protocol (BFCP)\" specification\n   [RFC4582].\n   Within this framework, a\
    \ client supporting floor control needs to\n   obtain information for connecting\
    \ to a floor control server to enable\n   it to issue floor requests.  This connection\
    \ information can be\n   retrieved using information provided by mechanisms such\
    \ as\n   negotiation using the SDP [RFC4566] offer/answer [RFC3264] exchange\n\
    \   on the signaling interface with the focus.  Section 11.3 provides a\n   discussion\
    \ of client authentication of a floor control server.\n   As well as the client\
    \ to the floor control server connection\n   information, a client wishing to\
    \ interact with a floor control server\n   requires access to additional information.\
    \  This information\n   associates floor control interactions with the appropriate\
    \ floor\n   instance.  Once a connection has been established and authenticated\n\
    \   (see [RFC4582] for authentication details), a specific floor control\n   message\
    \ requires detailed information to uniquely identify a\n   conference, a user,\
    \ and a floor.\n   The conference is uniquely identified by the conference object\
    \ ID per\n   Section 6.2.1.  This conference object ID must be included in all\n\
    \   floor control messages.  When the SDP model is used as described in\n   [RFC4583],\
    \ this identifier maps to the 'confid' SDP attribute.\n   Each authorized user\
    \ associated with a conference object is uniquely\n   represented by a conference\
    \ user ID per Section 6.3.  This conference\n   user ID must be included in all\
    \ floor control messages.  When using\n   SDP offer/answer exchange to negotiate\
    \ a floor control connection\n   with the focus using the call signaling protocol,\
    \ the unique\n   conference user identifier is contained in the 'userid' SDP\n\
    \   attribute, as defined in [RFC4583].\n   A media session within a conferencing\
    \ system can have any number of\n   floors (0 or more) that are represented by\
    \ the conference identifier.\n   When using SDP offer/answer exchange to negotiate\
    \ a floor control\n   connection with the focus using the call signaling interface,\
    \ the\n   unique conference identifier is contained in the 'floorid' SDP\n   attribute,\
    \ as defined in [RFC4583], e.g., a=floorid:1 m-stream:10 .\n   Each 'floorid'\
    \ attribute, representing a unique floor, has an\n   'm-stream' tag containing\
    \ one or more identifiers.  The identifiers\n   represent individual SDP media\
    \ sessions (as defined using 'm=' from\n   SDP) using the SDP 'Label' attribute,\
    \ as defined in [RFC4574].\n"
- title: 9.  Conferencing Scenario Realizations
  contents:
  - "9.  Conferencing Scenario Realizations\n   This section addresses how advanced\
    \ conferencing scenarios, many of\n   which have been described in [RFC4597],\
    \ are realized using this\n   centralized conferencing framework.  The objective\
    \ of this section is\n   to further illustrate the model, mechanisms, and protocols\
    \ presented\n   in the previous sections and also serves to validate that the\
    \ model,\n   mechanisms, and protocols are sufficient to support advanced\n  \
    \ conferencing scenarios.\n   The scenarios provide a high level primitive view\
    \ of the necessary\n   operations and general logic flow.  The details shown in\
    \ the\n   scenarios are for illustrative purposes only and don't necessarily\n\
    \   reflect the actual structure of the conference control protocol\n   messages\
    \ nor the detailed data, including states, which are defined\n   in separate documents.\
    \  It should be noted that not all entities\n   impacted by the request are shown\
    \ in the diagram (e.g., focus), but\n   rather the emphasis is on the new entities\
    \ introduced by this\n   centralized conferencing framework.\n"
- title: 9.1.  Conference Creation
  contents:
  - "9.1.  Conference Creation\n   There are different ways to create a conference.\
    \  A participant can\n   create a conference using call signaling means only,\
    \ such as SIP\n   detailed in [RFC4579].  For a conferencing client to have more\n\
    \   flexibility in defining the characteristics and capabilities of a\n   conference,\
    \ a conferencing client would implement a conference\n   control protocol client.\
    \  By using a conference control protocol, the\n   client can determine the capabilities\
    \ of a conferencing system and\n   its various resources.\n   Figure 8 provides\
    \ an example of one client \"Alice\" determining the\n   conference blueprints\
    \ available for a particular conferencing system\n   and creating a conference\
    \ based on the desired blueprint.\n                                      +--------------------------------+\n\
    \                                      |   Conferencing System          |\n  \
    \  \"Alice\"                           |                  +------------+|\n  \
    \ +--------+                         |                  |            ||\n   |\
    \        |CCP Request <blueprints> | +-----------+    |            ||\n   | Client\
    \ |-------------------------->|Conference |    |Conference  ||\n   |        |<--------------------------|Control\
    \    |~~~>|Blueprint(s)||\n   +--------+CCP Response<blueprintA, | |Server   \
    \  |    |            ||\n                             ...      | +-----------+\
    \    +------------+|\n                          blueprintZ, |                \
    \                |\n                          confUserID> |                  \
    \              |\n   \"Alice\"                            |\n   +--------+   \
    \                      |                                |\n   |        |CCP Request\
    \ <reserve,    |                  +------------+|\n   |        |     blueprintAConfObjID,|\
    \ +-----------+    |            ||\n   | Client |-------------------------->|Conference\
    \ |    |Conference  ||\n   |        |    confUserID>          | |Control    |~~~>|BlueprintA\
    \  ||\n   |        |<--------------------------|Server     |    |            ||\n\
    \   |        |CCP Response             | |           |    +------------+|\n  \
    \ +--------+  <reservationConfObjID, | |           |          \\|/     |\n   \
    \                       confID>     | |           |          /|\\     |\n    \
    \                                  | |           |           V      |\n      \
    \                                | |           |    +------------+|\n        \
    \                              | |           |~~~>|Conference  ||\n          \
    \                            | |           |    |Reservation ||\n            \
    \                          | +-----------+    +------------+|\n   \"Alice\"  \
    \                          |                         |      |\n   +--------+ \
    \                        |                         |      |\n   |        |CCP\
    \ Request <add,        |                         V      |\n   |        |reservationConfObjID,\
    \    | +-----------+    +------------+|\n   | Client |-------------------------->|Conference\
    \ |    |Active      ||\n   |        |     confID,confUserID>  | |Control    |~~~>|Conference\
    \  ||\n   |        |<--------------------------|Server     |    |            ||\n\
    \   |        |CCP Response             | |           |    +------------+|\n  \
    \ +--------+   <activeConfObjID,     | |           |                  |\n    \
    \             confID>              | +-----------+                  |\n      \
    \                                +--------------------------------+\n        \
    \ Figure 8: Client Creation of Conference Using Blueprints\n   Upon receipt of\
    \ the conference control protocol request for\n   blueprints, the conferencing\
    \ system would first authenticate \"Alice\"\n   (and allocate a conference user\
    \ identifier, if necessary) and then\n   ensure that \"Alice\" has the appropriate\
    \ authority based on system\n   policies to receive any blueprints supported by\
    \ that system.  Any\n   blueprints that \"Alice\" is authorized to use are returned\
    \ in a\n   response, along with the conference user ID.\n   Upon receipt of the\
    \ conference control protocol response containing\n   the blueprints, \"Alice\"\
    \ determines which blueprint to use for the\n   conference to be created.  \"\
    Alice\" creates a conference object based\n   on the blueprint (i.e., clones)\
    \ and modifies applicable fields, such\n   as membership list and 'start' time.\
    \  \"Alice\" then sends a request to\n   the conferencing system to create a conference\
    \ reservation based upon\n   the updated blueprint.\n   Upon receipt of the conference\
    \ control protocol request to \"reserve\"\n   a conference based upon the blueprint\
    \ in the request, the\n   conferencing system ensures that the blueprint received\
    \ is a valid\n   blueprint (i.e., the values of the various field are within range).\n\
    \   The conferencing system determines the appropriate read/write access\n   of\
    \ any users to be added to a conference based on this blueprint\n   (using membership,\
    \ roles, etc.).  The conferencing system uses the\n   received blueprint to clone\
    \ a conference reservation.  The\n   conferencing system also reserves or allocates\
    \ a conference ID to be\n   used for any subsequent protocol requests from any\
    \ of the members of\n   the conference.  The conferencing system maintains the\
    \ mapping\n   between this conference ID and the conference object ID associated\n\
    \   with the reservation through the conference instance.\n   Upon receipt of\
    \ the conference control protocol response to reserve\n   the conference, \"Alice\"\
    \ can now create an active conference using\n   that reservation or create additional\
    \ reservations based upon the\n   existing reservations.  In this example, \"\
    Alice\" has reserved a\n   meetme conference bridge.  Thus, \"Alice\" provides\
    \ the conference\n   information, including the necessary conference ID, to desired\n\
    \   participants.  When the first participant, including \"Alice\",\n   requests\
    \ to be added to the conference, an active conference and\n   focus are created.\
    \  The focus is associated with the conference ID\n   received in the request.\
    \  Any participants that have the authority to\n   manipulate the conference would\
    \ receive the conference object\n   identifier of the active conference object\
    \ in the response.\n"
- title: 9.2.  Participant Manipulations
  contents:
  - "9.2.  Participant Manipulations\n   There are different ways to affect a participant\
    \ state in a\n   conference.  A participant can join and leave the conference\
    \ using\n   call signaling means only, such as SIP.  This kind of operation is\n\
    \   called \"1st party signaling\" and does not affect the state of other\n  \
    \ participants in the conference.\n   Limited operations for controlling other\
    \ conference participants (a\n   so called \"3rd party control\") through the\
    \ focus, using call\n   signaling only, may also be available for some signaling\
    \ protocols.\n   For example, \"Conferencing for SIP User Agents\" [RFC4579] shows\
    \ how\n   SIP with REFER can be used to achieve this functionality.\n   In order\
    \ to perform richer conference control, a user client needs to\n   implement a\
    \ conference control protocol client.  By using a\n   conference control protocol,\
    \ the client can affect its own state, the\n   state of other participants, and\
    \ the state of various resources (such\n   as media mixers) that may indirectly\
    \ affect the state of any of the\n   conference participants.\n   Figure 9 provides\
    \ an example of one client \"Alice\" impacting the\n   state of another client\
    \ \"Bob\".  This example assumes an established\n   conference.  In this example,\
    \ \"Alice\" wants to add \"Bob\" to the\n   conference.\n                    \
    \                  +--------------------------------+\n                      \
    \                |   Conferencing System          |\n    \"Alice\"           \
    \                |                  +---------+--+|\n   +--------+           \
    \              |                  |policies |  ||\n   |        |CCP Request <\
    \            | +-----------+    +---------+  ||\n   | Client |-------------------------->|Conference\
    \ |    | Active     ||\n   |        |  Conference Object ID,  | |Control    |~~~>|Conference\
    \  ||\n   +--------+  Add, \"Bob\" >           | |Server     |    |          \
    \  ||\n                                      | +-----------+    +-------+    ||\n\
    \                                      |                  |\"Alice\"|    ||\n\
    \    \"Carol\"                           |                  '       '    '|\n\
    \   +--------+  NOTIFY <\"Bob\"=\"added\"> |+------------+    '       '    '|\n\
    \   |        |<-------------------------|Notification|<~~~|            ||\n  \
    \ | Client |.          .             ||Service     |    +-------+    ||\n   +--------+--+\
    \          .           ||            |    |\"Bob\"  |    ||\n      |        |<----------------------|\
    \            |    +-------+----+|\n      | Client |NOTIFY <\"Bob\"=\"added\">|+------------+\
    \                  |\n      +--------+                      +--------------------------------+\n\
    \        \"Bob\"\n         Figure 9: Client Manipulation of Conference - Add a\
    \ Party\n   Upon receipt of the conference control protocol request to \"add\"\
    \ a\n   party (\"Bob\") in the specific conference as identified by the\n   conference\
    \ object ID, the conferencing system ensures that \"Alice\"\n   has the appropriate\
    \ authority based on the policies associated with\n   that specific conference\
    \ object to perform the operation.  The\n   conferencing system must also determine\
    \ whether \"Bob\" is already a\n   user of this conferencing system or whether\
    \ he is a new user.\n   If \"Bob\" is a new user for this conferencing system,\
    \ a Conference\n   User Identifier is created for Bob.  Based upon the addressing\n\
    \   information provided for \"Bob\" by \"Alice\", the call signaling to add\n\
    \   \"Bob\" to the conference is instigated through the focus.\n   Once the call\
    \ signaling indicates that \"Bob\" has been successfully\n   added to the specific\
    \ conference, per updates to the state, and\n   depending upon the policies, other\
    \ participants (including \"Bob\") may\n   be notified of the addition of \"Bob\"\
    \ to the conference via the\n   conference notification service.\n"
- title: 9.3.  Media Manipulations
  contents:
  - "9.3.  Media Manipulations\n   There are different ways to manipulate the media\
    \ in a conference.  A\n   participant can change its own media streams by, for\
    \ example, sending\n   re-INVITE with new SDP content using SIP only.  This kind\
    \ of\n   operation is called \"1st party signaling\" and they do not affect the\n\
    \   state of other participants in the conference.\n   In order to perform richer\
    \ conference control, a user client needs to\n   implement a conference control\
    \ protocol client.  By using a\n   conference control protocol, the client can\
    \ manipulate the state of\n   various resources, such as media mixers, which may\
    \ indirectly affect\n   the state of any of the conference participants.\n   Figure\
    \ 10 provides an example of one client \"Alice\" impacting the\n   media state\
    \ of another client \"Bob\".  This example assumes an\n   established conference.\
    \  In this example, the client, \"Alice\" whose\n   Role is \"moderator\" of the\
    \ conference, wants to mute \"Bob\" on a\n   medium-size multi-party conference,\
    \ as his device is not muted (and\n   he's obviously not listening to the call)\
    \ and background noise in his\n   office environment is disruptive to the conference.\n\
    \                                      +--------------------------------+\n  \
    \                                    |   Conferencing System          |\n    \"\
    Alice\"                           |                  +---------+--+|\n   +--------+\
    \                         |                  |policies |  ||\n   |        |CCP\
    \ Request <            | +-----------+    +---------+  ||\n   | Client |-------------------------->|Conference\
    \ |    |Active      ||\n   |        |  Conference Object ID,  | |Control    |~~~>|Conference\
    \  ||\n   +--------+  Mute, \"Bob\" >          | |Server     |    |          \
    \  ||\n                                      | +-----------+    +-------+    ||\n\
    \                                      |                  |\"Alice\"|    ||\n\
    \      \"Carol\"                         |                  '       '    '|\n\
    \   +--------+  NOTIFY <\"Bob\"=mute\">   |+------------+    '       '    '|\n\
    \   |        |<-------------------------|Notification|<~~~|            ||\n  \
    \ | Client |.          .             ||Service     |    +-------+    ||\n   +--------+--+\
    \          .           ||            |    |\"Bob\"  |    ||\n      |        |<----------------------|\
    \            |    +-------+----+|\n      | Client |  NOTIFY <\"Bob\"=mute\">|+------------+\
    \                  |\n      +--------+                      +--------------------------------+\n\
    \          \"Bob\"\n        Figure 10: Client Manipulation of Conference - Mute\
    \ a Party\n   Upon receipt of the conference control protocol request to \"mute\"\
    \ a\n   party (\"Bob\") in the specific conference as identified by the\n   conference\
    \ object ID, the conference server ensures that \"Alice\" has\n   the appropriate\
    \ authority based on the policies associated with that\n   specific conference\
    \ object to perform the operation.  \"Bob's\" status\n   is marked as \"recvonly\"\
    \ and the conference object is updated to\n   reflect that \"Bob's\" media is\
    \ not to be \"mixed\" with the conference\n   media.\n   Depending upon the policies,\
    \ other participants (including \"Bob\") may\n   be notified of this change via\
    \ the conference notification service.\n"
- title: 9.4.  Sidebar Manipulations
  contents:
  - "9.4.  Sidebar Manipulations\n   A sidebar can be viewed as a separate Conference\
    \ instance that only\n   exists within the context of a parent conference instance.\
    \  Although\n   viewed as an independent conference instance, it can not exist\n\
    \   without a parent.  A sidebar is created using the same mechanisms\n   employed\
    \ for a standard conference, as described in Section 7.1.\n   A conference object\
    \ representing a sidebar is created by cloning the\n   parent associated with\
    \ the existing conference and updating any\n   information specific to the sidebar.\
    \  A sidebar conference object is\n   implicitly linked to the parent conference\
    \ object (i.e., it is not an\n   independent object) and is associated with the\
    \ parent conference\n   object identifier, as shown in Figure 11.  A conferencing\
    \ system\n   manages and enforces the parent and appropriate localized\n   restrictions\
    \ on the sidebar conference object (e.g., no members from\n   outside the parent\
    \ conference instance can join, sidebar conference\n   cannot exist if parent\
    \ conference is terminated, etc.).\n                            +--------------+\n\
    \                            |  Conference  |\n                            | \
    \   Object    |\n                            |  Identifier  |\n              \
    \              +--------------+\n                                   |\n      \
    \                             |\n                                   |\n      \
    \       +---------------------+---------------------+\n             |        \
    \             |                     |\n     +-------+-------+     +-------+-------+\
    \     +-------+-------+\n     |    Sidebar    |     |    Sidebar    |     |  \
    \  Sidebar    |\n     |  Conference   |     |  Conference   |     |  Conference\
    \   |\n     |    Object     |     |    Object     |     |    Object     |\n  \
    \   |  Identifier   |     |   Identifier  |     |   Identifier  |\n     +-------+-------+\
    \     +-------+-------+     +---------------+\n                   Figure 11: Conference\
    \ Object Mapping\n   Figure 11 illustrates the relationship between a conference\
    \ object\n   and associated sidebar conference objects within a conferencing\n\
    \   system.  Each sidebar conference object has a unique conference\n   object\
    \ identifier, as described in Section 6.2.1.  The main\n   conference object identifier\
    \ acts as a top level identifier for\n   associated sidebars.\n   A sidebar conference\
    \ object identifier follows many of the concepts\n   outlined in the cloning tree\
    \ model described in Section 7.1.  A\n   sidebar conference object contains a\
    \ subset of members from the\n   original conference object.  Properties of the\
    \ sidebar conference\n   object can be manipulated by a Conference Control Protocol\
    \ using the\n   unique conference object identifier for the sidebar.  It is also\n\
    \   possible for the top level conference object to enforce policy on the\n  \
    \ sidebar object (similar to parent enforceable, as discussed in\n   Section 7.1).\n"
- title: 9.4.1.  Internal Sidebar
  contents:
  - "9.4.1.  Internal Sidebar\n   Figure 12 provides an example of one client \"Alice\"\
    \ involved in\n   active conference with \"Bob\" and \"Carol\".  \"Alice\" wants\
    \ to create a\n   sidebar to have a side discussion with \"Bob\" while still viewing\
    \ the\n   video associated with the main conference.  Alternatively, the audio\n\
    \   from the main conference could be maintained at a reduced volume.\n   \"Alice\"\
    \ initiates the sidebar by sending a request to the\n   conferencing system to\
    \ create a conference reservation based upon the\n   active conference object.\
    \  \"Alice\" and \"Bob\" would remain on the\n   roster of the main conference,\
    \ such that other participants could be\n   aware of their participation in the\
    \ main conference, while an\n   internal-sidebar conference is occurring.\n  \
    \                                    +--------------------------------+\n    \
    \                                  |   Conferencing System          |\n      \
    \                                |                  +---------+--+|\n        \
    \                              |                  |policies |  ||\n          \
    \                            |                  +---------+  ||\n            \
    \                          |                  |Active      ||\n              \
    \                        |                  |Conference  ||\n   \"Alice\"    \
    \                        |                  +-------+    ||\n   +--------+   \
    \                      |                  |\"Alice\"|    ||\n   |        |CCP\
    \ Req <createSidebar,  |                  +-------+    ||\n   |        |     activeConfObjID,\
    \    | +-----------+    |\"Bob\"  |    ||\n   | Client |-------------------------->|Conference\
    \ |    +-------+    ||\n   |        |    confUserID>          | |Control    |~~~>|\"\
    Carol\"|    ||\n   |        |<--------------------------|Server     |    +-------+----+|\n\
    \   |        |CCP Response             | |           |           |      |\n  \
    \ +--------+  <sidebarResvConfObjID, | |           |           |      |\n    \
    \                      confID>     | |           |           V      |\n      \
    \                                | |           |    +---------+--+|\n        \
    \                              | |           |    |policies |  ||\n          \
    \                            | |           |~~~>+---------+  ||\n            \
    \                          | |           |    |            ||\n              \
    \                        | +-----------+    |            ||\n    \"Alice\"   \
    \                        |                  | Sidebar    ||\n   +--------+   \
    \                      |                  | Reservation||\n   |        |CCP Request\
    \ <update,     | +-----------+    |            ||\n   |        |    sidebarResvConfObjID,|\
    \ |           |    |            ||\n   | Client |-------------------------->|\
    \           |~~~>|            ||\n   |        |  confID,confUserID,     | |  \
    \         |    +------------+|\n   |        |  video=parent,          | |    \
    \       |           |      |\n   |        |  audio=sidebar>         | |Conference\
    \ |           |      |\n   |        |                         | |Control    |\
    \           V      |\n   |        |                         | |Server     |  \
    \  +---------+--+|\n   |        |CCP Response             | |           |    |policies\
    \ |  ||\n   |        |    <activeSideConfObjID,| |           |    +---------+\
    \  ||\n   |        |<--------------------------|           |    |Active      ||\n\
    \   +--------+    confID>              | |           |    |Sidebar     ||\n  \
    \                                    | |           |    |Conference  ||\n    \
    \                                  | +-----------+    +-------+    ||\n      \
    \                                |                  |\"Alice\"|    ||\n     \"\
    Bob\"                            |                  |       |    ||\n   +--------+\
    \  NOTIFY <\"Bob\"=added>   |+------------+    +-------+    ||\n   |        |<-------------------------|Notification|<~~~|\
    \       |    ||\n   | Client |                         ||Service     |    |\"\
    Bob\"  |    ||\n   +--------+                         ||            |    +-------+----+|\n\
    \                                      |+------------+                  |\n  \
    \                                    +--------------------------------+\n    \
    \        Figure 12: Client Creation of a Sidebar Conference\n   Upon receipt of\
    \ the conference control protocol request to \"reserve\"\n   a new sidebar conference,\
    \ based upon the active conference received\n   in the request, the conferencing\
    \ system uses the received active\n   conference to clone a conference reservation\
    \ for the sidebar.  As\n   discussed previously, the sidebar reservation is NOT\
    \ independent of\n   the active conference (i.e., parent).  The conferencing system\
    \ also\n   reserves or allocates a conference ID to be used for any subsequent\n\
    \   protocol requests from any of the members of the conference.  The\n   conferencing\
    \ system maintains the mapping between this conference ID\n   and the conference\
    \ object ID associated with the sidebar reservation\n   through the conference\
    \ instance.\n   Upon receipt of the conference control protocol response to reserve\n\
    \   the conference, \"Alice\" can now create an active conference using\n   that\
    \ reservation or create additional reservations based upon the\n   existing reservations.\
    \  In this example, \"Alice\" wants only \"Bob\" to\n   be involved in the sidebar,\
    \ thus she manipulates the membership.\n   \"Alice\" also only wants the video\
    \ from the original conference and\n   wants the audio to be restricted to the\
    \ participants in the sidebar.\n   Alternatively, \"Alice\" could manipulate the\
    \ media values to receive\n   the audio from the main conference at a reduced\
    \ volume.  \"Alice\"\n   sends a conference control protocol request to update\
    \ the information\n   in the reservation and to create an active conference.\n\
    \   Upon receipt of the conference control protocol request to update the\n  \
    \ reservation and to create an active conference for the sidebar, as\n   identified\
    \ by the conference object ID, the conferencing system\n   ensures that \"Alice\"\
    \ has the appropriate authority based on the\n   policies associated with that\
    \ specific conference object to perform\n   the operation.  The conferencing system\
    \ must also validate the\n   updated information in the reservation, ensuring\
    \ that a member like\n   \"Bob\" is already a user of this conferencing system.\n\
    \   Depending upon the policies, the initiator of the request (i.e.,\n   \"Alice\"\
    ) and the participants in the sidebar (i.e., \"Bob\") may be\n   notified of his\
    \ addition to the sidebar via the conference\n   notification service.\n"
- title: 9.4.2.  External Sidebar
  contents:
  - "9.4.2.  External Sidebar\n   Figure 13 provides an example of one client \"Alice\"\
    \ involved in an\n   active conference with \"Bob\", \"Carol\", \"David\", and\
    \ \"Ethel\".  \"Alice\"\n   gets an important text message via a whisper from\
    \ \"Bob\" that a\n   critical customer needs to talk to \"Alice\", \"Bob\", and\
    \ \"Ethel\".\n   \"Alice\" creates a sidebar to have a side discussion with the\
    \ customer\n   \"Fred\" including the participants in the current conference with\
    \ the\n   exception of \"Carol\" and \"David\", who remain in the active\n   conference.\
    \  \"Alice\" initiates the sidebar by sending a request to\n   the conferencing\
    \ system to create a conference reservation based upon\n   the active conference\
    \ object.  \"Alice\", \"Bob\", and \"Ethel\" would\n   remain on the roster of\
    \ the main conference in a hold state.  Whether\n   or not the hold state of these\
    \ participants is visible to other\n   participants depends upon the individual\
    \ and local policy.\n                                      +--------------------------------+\n\
    \                                      |   Conferencing System          |\n  \
    \                                    |                  +---------+--+|\n    \
    \                                  |                  |policies |  ||\n      \
    \                                |                  +---------+  ||\n        \
    \                              |                  |Active      ||\n          \
    \                            |                  |Conference  ||\n   \"Alice\"\
    \                            |                  +-------+    ||\n   +--------+\
    \                         |                  |\"Alice\"|    ||\n   |        |CCP\
    \ Req <createSidebar,  |                  +-------+    ||\n   |        |     activeConfObjID,\
    \    | +-----------+    |\"Bob\"  |    ||\n   | Client |-------------------------->|Conference\
    \ |    +-------+    ||\n   |        |    confUserID>          | |Control    |~~~>|\"\
    Carol\"|    ||\n   |        |<--------------------------|Server     |    +-------+\
    \    ||\n   |        |CCP Response             | |           |    |\"David\"|\
    \    ||\n   +--------+  <sidebarResvConfObjID, | |           |    +-------+  \
    \  ||\n                          confID>     | |           |    |\"Ethel\"|  \
    \  ||\n                                      | |           |    +-------+----+|\n\
    \                                      | |           |           |      |\n  \
    \                                    | |           |           V      |\n    \
    \                                  | |           |    +---------+--+|\n      \
    \                                | |           |    |policies |  ||\n        \
    \                              | |           |~~~>+---------+  ||\n          \
    \                            | +-----------+    |            ||\n    \"Alice\"\
    \                           |                  | Sidebar    ||\n   +--------+\
    \                         |                  | Reservation||\n   |        |CCP\
    \ Request <update,     | +-----------+    |            ||\n   |        |    sidebarResvConfObjID,|\
    \ |           |    |            ||\n   | Client |-------------------------->|\
    \           |~~~>|            ||\n   |        |  confID,confUserID,     | |  \
    \         |    +------------+|\n   |        |  video=sidebar,         | |    \
    \       |           |      |\n   |        |  audio=sidebar>         | |Conference\
    \ |           |      |\n   |        |                         | |Control    |\
    \           V      |\n   |        |                         | |Server     |  \
    \  +---------+--+|\n   |        |CCP Response             | |           |    |policies\
    \ |  ||\n   |        |    <activeSideConfObjID,| |           |    +---------+\
    \  ||\n   |        |<--------------------------|           |    |Active      ||\n\
    \   +--------+    confID>              | |           |    |Sidebar     ||\n  \
    \                                    | |           |    |Conference  ||\n    \
    \                                  | +-----------+    +-------+    ||\n      \
    \                                |                  |\"Alice\"|    ||\n     \"\
    Bob\"                            |                  +-------+    ||\n   +--------+\
    \  NOTIFY <\"Bob\"=added,   |+------------+    |\"Bob\"  |    ||\n   | Client\
    \ |<-------------------------|Notification|<~~~+-------+    ||\n   +--------+\
    \         \"Ethel\"=added,  ||Service     |    |\"Ethel\"|    ||\n           \
    \           \"Fred\"=added,>  ||            |    +-------+    ||\n     \"Ethel\"\
    \                       +---|            |    |\"Fred\" |    ||\n   +--------+\
    \  NOTIFY <\"Bob\"=added,|  |+------------+    +-------+----+|\n   | Client |\
    \ <--------------------+  +--------------------------------+\n   +--------+  \"\
    Ethel\"=added,\"Fred\"=added,>\n             Figure 13: Client Creation of an\
    \ External Sidebar\n   Upon receipt of the conference control protocol request\
    \ to \"reserve\"\n   a new sidebar conference, based upon the active conference\
    \ received\n   in the request, the conferencing system uses the received active\n\
    \   conference to clone a conference reservation for the sidebar.  As\n   discussed\
    \ previously, the sidebar reservation is NOT independent of\n   the active conference\
    \ (i.e., parent).  The conferencing system also\n   reserves or allocates a conference\
    \ ID to be used for any subsequent\n   protocol requests from any of the members\
    \ of the conference.  The\n   conferencing system maintains the mapping between\
    \ this conference ID\n   and the conference object ID associated with the sidebar\
    \ reservation\n   through the conference instance.\n   Upon receipt of the conference\
    \ control protocol response to reserve\n   the conference, \"Alice\" can now create\
    \ an active conference using\n   that reservation or create additional reservations\
    \ based upon the\n   existing reservations.  In this example, \"Alice\" wants\
    \ only \"Bob\" and\n   \"Ethel\", along with the new participant \"Fred\" to be\
    \ involved in the\n   sidebar; thus, she manipulates the membership.  \"Alice\"\
    \ sets the\n   media such that the participants in the sidebar don't receive any\n\
    \   media from the main conference.  \"Alice\" sends a conference control\n  \
    \ protocol request to update the information in the reservation and to\n   create\
    \ an active conference.\n   Upon receipt of the conference control protocol request\
    \ to update the\n   reservation and to create an active conference for the sidebar,\
    \ as\n   identified by the conference object ID, the conferencing system\n   ensures\
    \ that \"Alice\" has the appropriate authority based on the\n   policies associated\
    \ with that specific conference object to perform\n   the operation.  The conferencing\
    \ system must also validate the\n   updated information in the reservation, ensuring\
    \ whether members like\n   \"Fred\" are already a user of this conferencing system\
    \ or whether he\n   is a new user.  Since \"Fred\" is a new user for this conferencing\n\
    \   system, a conference user identifier is created for \"Fred\".  Based\n   upon\
    \ the addressing information provided for \"Fred\" by \"Alice\", the\n   call\
    \ signaling to add \"Fred\" to the conference is instigated through\n   the focus.\n\
    \   Depending upon the policies, the initiator of the request (i.e.,\n   \"Alice\"\
    ) and the participants in the sidebar (i.e., \"Bob\" and\n   \"Ethel\") may be\
    \ notified of his addition to the sidebar via the\n   conference notification\
    \ service.\n"
- title: 9.5.  Floor Control Using Sidebars
  contents:
  - "9.5.  Floor Control Using Sidebars\n   Floor control with sidebars can be used\
    \ to realize conferencing\n   scenarios such as an analyst briefing.  In this\
    \ scenario, the\n   conference call has a panel of speakers who are allowed to\
    \ talk in\n   the main conference.  The other participants are the analysts, who\n\
    \   are not allowed to speak unless they have the floor.  To request\n   access\
    \ to the floor, they have to join a new sidebar with the\n   moderator and ask\
    \ their question.  The moderator can also whisper to\n   each analyst what their\
    \ status/position in the floor control queue,\n   similar to the example in Figure\
    \ 15.\n   Figure 14 provides an example of the configuration involved for this\n\
    \   type of conference.  As in the previous sidebar examples, there is\n   the\
    \ main conference along with a sidebar.  \"Alice\" and \"Bob\" are the\n   main\
    \ participants in the conference, with \"A1\", \"A2\", and \"A3\"\n   representing\
    \ the analysts.  The sidebar remains active throughout the\n   conference, with\
    \ the moderator, \"Carol\", serving as the chair.  As\n   discussed previously,\
    \ the sidebar conference is NOT independent of\n   the active conference (i.e.,\
    \ parent).  The analysts are provided the\n   conference object ID associated\
    \ with the active sidebar when they\n   join the main conference.  The conferencing\
    \ system also allocates a\n   conference ID to be used for any subsequent manipulations\
    \ of the\n   sidebar conference.  The conferencing system maintains the mapping\n\
    \   between this conference ID and the conference object ID associated\n   with\
    \ the active sidebar conference through the conference instance.\n   The analysts\
    \ are permanently muted while in the main conference.  The\n   analysts are moved\
    \ to the sidebar when they wish to speak.  Only one\n   analyst is given the floor\
    \ at a given time.  All participants in the\n   main conference receive audio\
    \ from the sidebar conference, as well as\n   audio provided by the panelists\
    \ in the main conference.\n                                      +--------------------------------+\n\
    \                                      |   Conferencing System          |\n  \
    \                                    |                  +---------+--+|\n    \
    \                                  |                  |policies |  ||\n      \
    \                                |                  +---------+  ||\n        \
    \                              |                  |Active      ||\n          \
    \                            |                  |Conference  ||\n            \
    \                          |                  +-------+    ||\n              \
    \                        |                  |\"Alice\"|    ||\n              \
    \                        |                  +-------+    ||\n                \
    \                      | +-----------+    |\"Bob\"  |    ||\n                \
    \                      | |Conference |    +-------+    ||\n                  \
    \                    | |Control    |~~~>|\"A1\"   |    ||\n                  \
    \                    | |Server     |    +-------+    ||\n                    \
    \                  | |           |    |\"A2\"   |    ||\n                    \
    \                  | |           |    +-------+    ||\n                      \
    \                | |           |    |\"A3\"   |    ||\n                      \
    \                | |           |    +-------+----+|\n                        \
    \              | |           |           |      |\n                          \
    \            | |           |           V      |\n                            \
    \          | |           |    +---------+--+|\n                              \
    \        | |           |    |policies |  ||\n                                \
    \      | |           |~~~>+---------+  ||\n                                  \
    \    | |           |    |Active      ||\n                                    \
    \  | +-----------+    |Sidebar     ||\n     \"A1\"                           \
    \  |                  |Conference  ||\n   +--------+  Floor Request <\"A1\", \
    \  |+------------+    +-------+    ||\n   |        |------------------------->|Floor\
    \ Ctrl  |    |\"Carol\"|    ||\n   |Client  |     activeSideConfObjID,||Server\
    \      |~~~>|       |    ||\n   +--------+     confID    >         ||        \
    \    |    +-------+----+|\n                                      |+------------+\
    \           |      |\n                                      |                \
    \         V      |\n                                      |                  +---------+--+|\n\
    \                                      |                  |policies |  ||\n  \
    \                                    |                  +---------+  ||\n    \
    \                                  |                  |Active      ||\n      \
    \                                |                  |Sidebar     ||\n     \"A1\"\
    \                             |                  |Conference  ||\n   +--------+\
    \ Floor Granted <\"A1\",    |+------------+    +-------+    ||\n   |        |<-------------------------|Floor\
    \ Ctrl  |<~~~|\"Carol\"|    ||\n   | Client |     activeSideConfObjID,||Server\
    \      |    +-------+    ||\n   +--------+     confID    >         ||        \
    \    |    |\"A1\"   |    ||\n                                      |+------------+\
    \    +-------+----+|\n                                      +--------------------------------+\n\
    \                  Figure 14: Floor Control with Sidebars\n   When \"A1\" wishes\
    \ to ask a question, he sends a Floor Request message\n   to the floor control\
    \ server.  Upon receipt of the request, the floor\n   control server notifies\
    \ the moderator, \"Carol\" of the active sidebar\n   conference, who's serving\
    \ as the floor chair.  Note, that this\n   signaling flow is not shown in the\
    \ diagram.  Since no other analysts\n   have yet requested the floor, \"Carol\"\
    \ indicates to the floor control\n   server that \"A1\" may be granted the floor.\n"
- title: 9.6.  Whispering or Private Messages
  contents:
  - "9.6.  Whispering or Private Messages\n   The case of private messages can be\
    \ handled as a sidebar with just\n   two participants, similar to the example\
    \ in Section 9.4.1, but rather\n   than using audio within the sidebar, \"Alice\"\
    \ could add an additional\n   text based media stream to the sidebar.  The other\
    \ context, referred\n   to as whisper, in this document refers to situations involving\
    \ one\n   time media targeted to specific user(s).  An example of a whisper\n\
    \   would be an announcement injected only to the conference chair or to\n   a\
    \ new participant joining a conference.\n   Figure 15 provides an example of one\
    \ user \"Alice\" who's chairing a\n   fixed length conference with \"Bob\" and\
    \ \"Carol\".  The configuration is\n   such that only the chair is providing a\
    \ warning when there are only\n   10 minutes left in the conference.  At that\
    \ time, \"Alice\" is moved\n   into a sidebar created by the conferencing system\
    \ and only \"Alice\"\n   receives the announcement.\n                        \
    \              +--------------------------------+\n                          \
    \            |   Conferencing System          |\n                            \
    \          |                  +---------+--+|\n                              \
    \        |                  |policies |  ||\n                                \
    \      |                  +---------+  ||\n                                  \
    \    |                  |Active      ||\n                                    \
    \  |                  |Conference  ||\n                                      |\
    \                  +-------+    ||\n                                      |  \
    \                |\"Alice\"|    ||\n                                      |  \
    \                +-------+    ||\n                                      | +-----------+\
    \    |\"Bob\"  |    ||\n                                      | |Conference |\
    \    +-------+    ||\n                                      | |Control    |~~~>|\"\
    Carol\"|    ||\n                                      | |Server     |    +-------+----+|\n\
    \                                      | |           |           |      |\n  \
    \                                    | |           |           |      |\n    \
    \                                  | |           |           V      |\n      \
    \                                | |           |    +---------+--+|\n        \
    \                              | |           |    |policies |  ||\n          \
    \                            | |           |~~~>+---------+  ||\n            \
    \                          | |           |    |            ||\n              \
    \                        | +-----------+    |Sidebar     ||\n     \"Alice\"  \
    \                        |                  |Conference  ||\n   +--------+  NOTIFY\
    \ <\"Alice\"=added, |+------------+    +-------+    ||\n   |        |<-------------------------|Notification|\
    \    |       |    ||\n   | Client |     activeSideConfObjID,||Service     |<~~~|\"\
    Alice\"|    ||\n   +--------+     confID    >         ||            |    +-------+----+|\n\
    \                                      |+------------+                  |\n  \
    \                                ~~~Announcement provided to \"Alice\"~~~\n  \
    \                                    | +-----------+                  |\n    \
    \                                  | |Conference |                  |\n      \
    \                                | |Control    |                  |\n        \
    \                              | |Server     |                  |\n          \
    \                            | |           |                  |\n            \
    \                          | |           |    \\---------+--/|\n             \
    \                         | |           |    |\\          /||\n              \
    \                        | |           |~~~>+ \\        / ||\n               \
    \                       | |           |    |  \\      /  ||\n                \
    \                      | +-----------+    |Sid\\bar /   ||\n     \"Alice\"   \
    \                       |                  |Conf\\re/ce  ||\n   +--------+ NOTIFY\
    \ <\"Alice\"=removed,|+------------+    +-----\\/+    ||\n   |        |<-------------------------|Notification|<~~~|\
    \     /\\|    ||\n   | Client |     activeSideConfObjID,||Service     |    |\"\
    Ali/ce\\    ||\n   +--------+     confID    >         ||            |    +---/---+\\\
    ---+|\n                                      |+------------+       /      \\ \
    \  |\n                                      +--------------------------------+\n\
    \                            Figure 15: Whisper\n   When the conferencing system\
    \ determines that there are only 10\n   minutes left in the conference which \"\
    Alice\" is chairing, rather than\n   creating a reservation as was done for the\
    \ sidebar in Section 9.4.1,\n   the conferencing system directly creates an active\
    \ sidebar\n   conference, based on the active conference associated with \"Alice\"\
    .\n   As discussed previously, the sidebar conference is NOT independent of\n\
    \   the active conference (i.e., parent).  The conferencing system also\n   allocates\
    \ a conference ID to be used for any subsequent manipulations\n   of the sidebar\
    \ conference.  The conferencing system maintains the\n   mapping between this\
    \ conference ID and the conference object ID\n   associated with the active sidebar\
    \ conference through the conference\n   instance.\n   Immediately upon creation\
    \ of the active sidebar conference, the\n   announcement media is provided to\
    \ \"Alice\".  Depending upon the\n   policies, \"Alice\" may be notified of her\
    \ addition to the sidebar via\n   the conference notification service.  \"Alice\"\
    \ continues to receive\n   the media from the main conference.\n   Upon completion\
    \ of the announcement, \"Alice\" is removed from the\n   sidebar, and the sidebar\
    \ conference is deleted.  Depending upon the\n   policies, \"Alice\" may be notified\
    \ of her removal from the sidebar via\n   the conference notification service.\n"
- title: 9.7.  Conference Announcements and Recordings
  contents:
  - "9.7.  Conference Announcements and Recordings\n   Each participant can require\
    \ a different type of announcement and/or\n   recording service from the system.\
    \  For example, \"Alice\", the\n   conference chair, could be listening to a roll\
    \ call while \"Bob\" may\n   be using a telephony user interface to create a sidebar.\
    \  Some\n   announcements would apply to all the participants such as \"This\n\
    \   conference will end in 10 minutes\".  Recording is often required to\n   capture\
    \ the names of participants as they join a conference,\n   typically after the\
    \ participant has entered an access code, as\n   discussed in Section 9.8.  These\
    \ recorded names are then announced to\n   all the participants as the new participant\
    \ is added to the active\n   conference.\n   An example of a conferencing recording\
    \ and announcement, along with\n   collecting the dual tone multi-frequency (DTMF),\
    \ within the context\n   of this framework, is shown in Figure 16.\n         \
    \                             +--------------------------------+\n           \
    \                           |   Conferencing System          |\n \"Alice\"   \
    \                           | +-----------+                  |\n"
- title: +--------+                            | |Conference |                  |
  contents:
  - '+--------+                            | |Conference |                  |

    '
- title: '|        |CCP Request <               | |Control    |                  |'
  contents:
  - '|        |CCP Request <               | |Control    |                  |

    '
- title: '| Client |--------------------------->| |Server     |                  |'
  contents:
  - '| Client |--------------------------->| |Server     |                  |

    '
- title: '|        |Bob''s Conference ID,        | |           |                  |'
  contents:
  - '|        |Bob''s Conference ID,        | |           |                  |

    '
- title: +--------+ Join >                     | |           |                  |
  contents:
  - "+--------+ Join >                     | |           |                  |\n  \
    \                                    | |           |                  |\n    \
    \                                  | ~           ~                  |\n      \
    \                           ~~~Announcement provided to \"Alice\"~~~\n       \
    \                           ~~~ Digits collected from  \"Alice\"~~~\n        \
    \                              | ~           ~    +---------+--+|\n          \
    \                            | |           |~~~>|policies |  ||\n            \
    \                          | |           |    +---------+  ||\n              \
    \                        | |           |    |Active      ||\n                \
    \                      | |           |    |Conference  ||\n                  \
    \                    | |           |    +-------+    ||\n                    \
    \                  | |           |    |\"Bob\"  |    ||\n                    \
    \                  | |           |    +-------+    ||\n                      \
    \                | |           |    |\"Carol\"|    ||\n                      \
    \                | |           |    +-------+----+|\n                        \
    \              | ~           ~                  |\n                          \
    \       ~~~Announcement provided to \"Alice\"~~~\n                           \
    \             ~~~ Alice records her name ~~~\n                               \
    \       | ~           ~    +---------+--+|\n                                 \
    \     | |           |    |policies |  ||\n                                   \
    \   | |           |    +---------+  ||\n                                     \
    \ | |           |~~~>|Active      ||\n                                      |\
    \ +-----------+    |Conference  ||\n                                      |  \
    \                +-------+    ||\n                                      |    \
    \              |\"Bob\"  |    ||\n     \"Bob  \"                          |  \
    \                +-------+    ||\n   +--------+  NOTIFY <\"Alice\"=added, |+------------+\
    \    |\"Carol\"|    ||\n   |        |<-------------------------|Notification|\
    \    +-------+    ||\n   | Client |     activeSideConfObjID,||Service     |<~~~|\"\
    Alice\"|    ||\n   +--------+     confID    >         ||            |    +-------+----+|\n\
    \                                      |+------------+                  |\n  \
    \                            ~~~Announcement provided to All Parties~~~\n    \
    \                                  |                                |\n      \
    \                                +--------------------------------+\n        \
    \          Figure 16: Recording and Announcements\n   Upon receipt of the conference\
    \ control protocol request from \"Alice\"\n   to join \"Bob's\" conference, the\
    \ conferencing system maps the\n   identifier received in the request to the conference\
    \ object\n   representing \"Bob's\" active conference.  The conferencing system\n\
    \   determines that a password is required for this specific conference;\n   thus,\
    \ an announcement asking \"Alice\" to enter the password is\n   provided to \"\
    Alice\".  Once \"Alice\" enters the password, it is\n   validated against the\
    \ policies associated with \"Bob's\" active\n   conference.  The conferencing\
    \ system then connects to a server that\n   prompts and records \"Alice\"'s name.\
    \  The conferencing system must\n   also determine whether \"Alice\" is already\
    \ a user of this conferencing\n   system or whether she is a new user.\n   If\
    \ \"Alice\" is a new user for this conferencing system, a conference\n   user\
    \ identifier is created for \"Alice\".  Based upon the addressing\n   information\
    \ provided by \"Alice\", the call signaling to add \"Alice\" to\n   the conference\
    \ is instigated through the focus.\n   Once the call signaling indicates that\
    \ \"Alice\" has been successfully\n   added to the specific conference, per updates\
    \ to the state, and\n   depending upon the policies, other participants (e.g.,\
    \ \"Bob\") are\n   notified of the addition of \"Alice\" to the conference via\
    \ the\n   conference notification service, and an announcement is provided to\n\
    \   all the participants indicating that \"Alice\" has joined the\n   conference.\n"
- title: 9.8.  Monitoring for DTMF
  contents:
  - "9.8.  Monitoring for DTMF\n   The conferencing system also needs the capability\
    \ to monitor for DTMF\n   from each individual participant.  This would typically\
    \ be used to\n   enter the identifier and/or access code for joining a specific\n\
    \   conference.\n   An example of DTMF monitoring, within the context of the framework\n\
    \   elements, is shown in Figure 16.\n"
- title: 9.9.  Observing and Coaching
  contents:
  - "9.9.  Observing and Coaching\n   The capability to observe a conference allows\
    \ a participant with the\n   appropriate authority to listen to the conference,\
    \ typically without\n   being an active participant and often as a hidden participant.\
    \  When\n   such a capability is available on a conferencing system, there is\n\
    \   often an announcement provided to each participant as they join the\n   conference\
    \ indicating the call may be monitored.  This capability is\n   useful in the\
    \ context of conferences, which might be experiencing\n   technical difficulties,\
    \ thus allowing a technician to listen in to\n   evaluate the type of problem.\n\
    \   This capability could also apply to call center applications as it\n   provides\
    \ a mechanism for a supervisor to observe how the agent is\n   handling a particular\
    \ call with a customer.  This scenario can be\n   handled by a supervisor adding\
    \ themselves to the existing active\n   conference, with a listen only audio media\
    \ path.  Whether the agent\n   is aware of when the supervisor joins the call\
    \ should be\n   configurable.\n   Taking the supervisor capability one step further\
    \ introduces a\n   scenario whereby the agent can hear the supervisor, as well\
    \ as the\n   customer.  The customer can still only hear the agent.  This scenario\n\
    \   would involve the creation of a sidebar involving the agent and the\n   supervisor.\
    \  Both the agent and supervisor receive the audio from the\n   main conference.\
    \  When the agent speaks, it is heard by the customer\n   in the main conference.\
    \  When the supervisor speaks, it is heard only\n   by the agent in the sidebar\
    \ conference.\n   An example of observing and coaching is shown in Figure 17.\
    \  In this\n   example, call center agent \"Bob\" is involved in a conference\
    \ with\n   customer \"Carol\".  Since \"Bob\" is a new agent and \"Alice\" sees\
    \ that\n   he has been on the call with \"Carol\" for longer than normal, she\n\
    \   decides to observe the call and coach \"Bob\" as necessary.\n            \
    \                          +--------------------------------+\n              \
    \                        |   Conferencing System          |\n                \
    \                      |                  +---------+--+|\n                  \
    \                    |                  |policies |  ||\n                    \
    \                  |                  +---------+  ||\n                      \
    \                |                  |Active      ||\n                        \
    \              |                  |Conference  ||\n   \"Alice\"              \
    \              |                  |            ||\n   +--------+             \
    \            |                  |            ||\n   |        |CCP Req <createSidebar,\
    \  |                  +-------+    ||\n   |        |     activeConfObjID,    |\
    \ +-----------+    |\"Bob\"  |    ||\n   | Client |-------------------------->|Conference\
    \ |    +-------+    ||\n   |        |    confUserID>          | |Control    |~~~>|\"\
    Carol\"|    ||\n   |        |<--------------------------|Server     |    +-------+----+|\n\
    \   |        |CCP Response             | |           |           |      |\n  \
    \ +--------+  <sidebarResvConfObjID, | |           |           |      |\n    \
    \                      confID>     | |           |           V      |\n      \
    \                                | |           |    +---------+--+|\n        \
    \                              | |           |    |policies |  ||\n          \
    \                            | |           |~~~>+---------+  ||\n            \
    \                          | |           |    |            ||\n              \
    \                        | +-----------+    |            ||\n    \"Alice\"   \
    \                        |                  | Sidebar    ||\n   +--------+   \
    \                      |                  | Reservation||\n   |        |CCP Request\
    \ <update,     | +-----------+    |            ||\n   |        |    sidebarResvConfObjID,|\
    \ |           |    |            ||\n   | Client |-------------------------->|\
    \           |~~~>|            ||\n   |        |  confID,confUserID>     | |  \
    \         |    +------------+|\n   |        |                         | |    \
    \       |           |      |\n   |        |                         | |Conference\
    \ |           |      |\n   |        |                         | |Control    |\
    \           V      |\n   |        |                         | |Server     |  \
    \  +---------+--+|\n   |        |CCP Response             | |           |    |policies\
    \ |  ||\n   |        |    <activeSideConfObjID,| |           |    +---------+\
    \  ||\n   |        |<--------------------------|           |    |Active      ||\n\
    \   +--------+    confID>              | |           |    |Sidebar     ||\n  \
    \                                    | |           |    |Conference  ||\n    \
    \                                  | +-----------+    +-------+    ||\n      \
    \                                |                  |\"Alice\"|    ||\n     \"\
    Bob\"                            |                  |       |    ||\n   +--------+\
    \  NOTIFY <\"Bob\"=added,   |+------------+    +-------+    ||\n   |        |<-------------------------|Notification|<~~~|\
    \       |    ||\n   | Client |       \"chair\"=\"Alice\"   ||Service     |   \
    \ |\"Bob\"  |    ||\n   +--------+                         ||            |   \
    \ +-------+----+|\n                                      |+------------+     \
    \             |\n                                      +--------------------------------+\n\
    \      Figure 17: Supervisor Creating a Sidebar for Observing/Coaching\n   Upon\
    \ receipt of the conference control protocol request from \"Alice\"\n   to \"\
    reserve\" a new sidebar conference, based upon the active\n   conference received\
    \ in the request, the conferencing system uses the\n   received active conference\
    \ to clone a conference reservation for the\n   sidebar.  The conferencing system\
    \ also reserves or allocates a\n   conference ID to be used for any subsequent\
    \ protocol requests from\n   any of the members of the conference.  The conferencing\
    \ system\n   maintains the mapping between this conference ID and the conference\n\
    \   object ID associated with the sidebar reservation through the\n   conference\
    \ instance.\n   Upon receipt of the conference control protocol response to reserve\n\
    \   the conference, \"Alice\" can now create an active conference using\n   that\
    \ reservation or create additional reservations based upon the\n   existing reservations.\
    \  In this example, \"Alice\" wants only \"Bob\" to\n   be involved in the sidebar;\
    \ thus, she manipulates the membership.\n   \"Alice\" also wants the audio to\
    \ be received by herself and \"Bob\" from\n   the original conference, but wants\
    \ any outgoing audio from herself to\n   be restricted to the participants in\
    \ the sidebar, whereas \"Bob's\"\n   outgoing audio should go to the main conference,\
    \ so that both \"Alice\"\n   and the customer \"Carol\" hear the same audio from\
    \ \"Bob\".  \"Alice\"\n   sends a conference control protocol request to update\
    \ the information\n   in the reservation and to create an active conference.\n\
    \   Upon receipt of the conference control protocol request to update the\n  \
    \ reservation and to create an active conference for the sidebar, as\n   identified\
    \ by the conference object ID, the conferencing system\n   ensures that \"Alice\"\
    \ has the appropriate authority based on the\n   policies associated with that\
    \ specific conference object to perform\n   the operation.  Based upon the addressing\
    \ information provided for\n   \"Bob\" by \"Alice\", the call signaling to add\
    \ \"Bob\" to the sidebar with\n   the appropriate media characteristics is instigated\
    \ through the\n   focus.\n   \"Bob\" is notified of his addition to the sidebar\
    \ via the conference\n   notification service; thus, he is aware that \"Alice\"\
    , the supervisor,\n   is available for coaching him through this call.\n"
- title: 10.  Relationships between SIP and Centralized Conferencing Frameworks
  contents:
  - "10.  Relationships between SIP and Centralized Conferencing Frameworks\n   The\
    \ SIP Conferencing Framework [RFC4353] provides an overview of a\n   wide range\
    \ of centralized conferencing solutions known today in the\n   conferencing industry.\
    \  The document introduces a terminology and\n   logical entities in order to\
    \ systemize the overview and to show the\n   common core of many of these systems.\
    \  The logical entities and the\n   listed scenarios in the SIP Conferencing Framework\
    \ are used to\n   illustrate how SIP [RFC3261] can be used as a signaling means\
    \ in\n   these conferencing systems.  The SIP Conferencing Framework does not\n\
    \   define new conference control protocols to be used by the general\n   conferencing\
    \ system.  It uses only basic SIP [RFC3261], the SIP\n   Conferencing for User\
    \ Agents [RFC4579], and the SIP Conference\n   Package [RFC4575] for basic SIP\
    \ conferencing realization.\n   This centralized conferencing framework document\
    \ defines a particular\n   centralized conferencing system and the logical entities\
    \ implementing\n   it.  It also defines a particular data model and refers to\
    \ the set of\n   protocols (beyond call signaling means) to be used among the\
    \ logical\n   entities for implementing advanced conferencing features.  The\n\
    \   purpose of the XCON Working Group and this framework is to achieve\n   interoperability\
    \ between the logical entities from different vendors\n   for controlling different\
    \ aspects of advanced conferencing\n   applications.\n   The logical entities\
    \ defined in the two frameworks are not intended\n   to be mapped one-to-one.\
    \  The two frameworks differ in the\n   interpretation of the internal conferencing\
    \ system decomposition and\n   the corresponding operations.  Nevertheless, the\
    \ basic SIP [RFC3261],\n   the SIP Conferencing for User Agents [RFC4579], and\
    \ the SIP\n   Conference Package [RFC4575] are fully compatible with both framework\n\
    \   documents.  The basis for compatibility is provided by including the\n   basic\
    \ data elements defined in [RFC4575] in the Conference\n   Information Data Model\
    \ for Centralized Conferencing (XCON)\n   [XCON-COMMON].  User agents that only\
    \ support [RFC4579] and do not\n   support the Conferencing Control Protocol are\
    \ still provided basic\n   SIP conferencing, but cannot take advantage of any\
    \ of the advanced\n   features.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   There are a wide variety of potential attacks\
    \ related to\n   conferencing, due to the natural involvement of multiple endpoints\n\
    \   and the many, often user-invoked, capabilities provided by the\n   conferencing\
    \ system.  Examples of attacks include the following: an\n   endpoint attempting\
    \ to listen to conferences in which it is not\n   authorized to participate, an\
    \ endpoint attempting to disconnect or\n   mute other users, and theft of service\
    \ by an endpoint in attempting\n   to create conferences it is not allowed to\
    \ create.\n   There are several issues surrounding security of this conferencing\n\
    \   framework.  One set of issues involves securing the actual protocols\n   and\
    \ the associated authorization mechanisms.  This first set of\n   issues should\
    \ be addressed in the specifications specific to the\n   protocols described in\
    \ Section 8 and policy control.  The protocols\n   used for manipulation and retrieval\
    \ of confidential information need\n   to support a confidentiality and integrity\
    \ mechanism.  Similar\n   requirements apply for the floor control protocols.\
    \  Section 11.3\n   discusses an approach for client authentication of a floor\
    \ control\n   server.  It is RECOMMENDED that all the protocols that interface\
    \ with\n   the conferencing system implement Transport Layer Security (TLS).\n\
    \   There are also security issues associated with the authorization to\n   perform\
    \ actions on the conferencing system to invoke specific\n   capabilities.  Section\
    \ 5.2 discusses the policies associated with the\n   conference object to ensure\
    \ that only authorized entities are able to\n   manipulate the data to access\
    \ the capabilities.  Another set of\n   issues involves the privacy and security\
    \ of the identity of a user in\n   the conference, which is discussed in Section\
    \ 11.2.\n   A final issue is related to Denial of Service (DoS) attacks on the\n\
    \   conferencing system itself.  In order to minimize the potential for\n   DoS\
    \ attacks, it is recommended that conferencing systems require user\n   authentication\
    \ and authorization for any client participating in a\n   conference.  It is recommended\
    \ that the specific signaling and media\n   protocols include mechanisms to minimize\
    \ the potential for DoS.\n"
- title: 11.1.  User Authentication and Authorization
  contents:
  - "11.1.  User Authentication and Authorization\n   Many policy authorization decisions\
    \ are based on the identity of the\n   user or the role that a user may have.\
    \  Conferencing systems\n   typically require authentication of users to validate\
    \ their identity.\n   There are several ways that a user might authenticate its\
    \ identity to\n   the system.  For users joining a conference using one of the\
    \ call\n   signaling protocols, the user authentication mechanisms for the\n \
    \  specific protocol often suffice.  For the case of users joining the\n   conference\
    \ via SIP signaling or using the conference control\n   protocol, TLS is RECOMMENDED.\n\
    \   The conferencing system may also know (e.g., out-of-band mechanisms)\n   about\
    \ specific users and assign passwords to allow these users to be\n   authorized.\
    \  In some cases (e.g., Public Switched Telephone Network\n   (PSTN) users), additional\
    \ authorization may be required to allow the\n   user to participate in the conference.\
    \  This may be in the form of an\n   Interactive Voice Response (IVR) system or\
    \ other means.  The users\n   may also be authorized by knowing a particular conference\
    \ ID and a\n   Personal Identification (PIN) for it.  Sometimes, a PIN is not\n\
    \   required and the conference ID is used as a shared secret.\n   In the cases\
    \ where a user is authorized via multiple mechanisms, it\n   is up to the conferencing\
    \ system to correlate (if desired) the\n   authorization of the call signaling\
    \ interface with other\n   authorization mechanisms.  A conferencing system can\
    \ avoid the\n   problem with multiple mechanisms by restricting the methods by\
    \ which\n   a conference can be joined.  For example, many conferencing systems\n\
    \   that provide a web interface for conferences correlate the PSTN call\n   signaling\
    \ by forcing a dial-out mode for joining the conference.\n   Thus, there is only\
    \ the need for a single PIN or password to join the\n   conference.\n   When a\
    \ conferencing system presents the identity of authorized users,\n   it may choose\
    \ to provide information about the way the identity was\n   proven or verified\
    \ by the system.  A user may also come as a\n   completely unauthenticated user\
    \ into the system -- this fact needs\n   also to be communicated to interested\
    \ parties.\n   When guest users interact with the system, it is often in the context\n\
    \   of a particular conference.  In this case, the user may provide a PIN\n  \
    \ or a password that is specific to the conferences and authorizes the\n   user\
    \ to take on a certain role in that conference.  The guest user\n   can then perform\
    \ actions that are allowed to any user with that role.\n   The term password refers\
    \ to the usual, reasonable sized and hard to\n   predict shared secret.  Today,\
    \ users often have passwords containing\n   up to 30 bits (8-16 characters) of\
    \ entropy.  A PIN is a special\n   password case -- a shared secret that is only\
    \ numeric and often\n   contains a fairly small number of bits (often as few as\
    \ 10 bits or 3\n   digits).  When conferencing systems are used for audio on the\
    \ PSTN,\n   there is often a need to authenticate using a PIN.  Typically, if\
    \ the\n   user fails to provide the correct PIN a few times in a row, the PSTN\n\
    \   call is disconnected.  The rate of making the calls and getting to\n   the\
    \ point to enter a PIN makes it fairly hard to do an exhaustive\n   search of\
    \ the PIN space even for 4 digit PINs.  When using a high\n   speed interface\
    \ to connect to a conferencing system, it is often\n   possible to do thousands\
    \ of attempts per second and the PIN space\n   could quickly be searched.  Because\
    \ of this, it is not appropriate to\n   use PINs for authorization on any of the\
    \ interfaces that provide fast\n   queries or many simultaneous queries.\n   Once\
    \ a user is authenticated and authorized through the various\n   mechanisms available\
    \ on the conferencing system, a conference user\n   identifier is associated with\
    \ any signaling specific user identifiers\n   that may have been used for authentication\
    \ and authorization.  This\n   conference user identifier may be provided to a\
    \ specific user through\n   the conference notification interface and will be\
    \ provided to users\n   that interact with the conferencing system using the conference\n\
    \   control protocol.  This conference user identifier is required for\n   any\
    \ subsequent operations on the conference object.\n"
- title: 11.2.  Security and Privacy of Identity
  contents:
  - "11.2.  Security and Privacy of Identity\n   This conferencing system has an idea\
    \ of the identity of a user, but\n   this does not mean it can reveal this identity\
    \ to other users, due to\n   privacy considerations.  Users can select various\
    \ options for\n   revealing their identity to other users.  A user can be \"hidden\"\
    \ such\n   that other users can not see they are participants in the conference,\n\
    \   \"anonymous\" such that users can see that another user is there, but\n  \
    \ not see the identity of the user, or they can be \"public\" where other\n  \
    \ users can see their identity.  If there are multiple \"anonymous\"\n   users,\
    \ other parties will be able to see them as independent\n   \"anonymous\" parties\
    \ and will be able to tell how many \"anonymous\"\n   parties are in the conference.\
    \  Note, that the visibility to other\n   participants is dependent on their roles.\
    \  For example, users'\n   identity (including \"anonymous\" and \"hidden\") may\
    \ be displayed to the\n   moderator or administrator, subject to a conferencing\
    \ system's local\n   policies.  \"Hidden\" status is often used by automated or\
    \ machine\n   participants of a conference (e.g., call recording) and is also\
    \ used\n   in many call center situations.\n   Since a conferencing system based\
    \ on this framework allocates a\n   unique conference user identifier for each\
    \ user of the conferencing\n   system, it is not necessary to distribute any signaling\
    \ specific user\n   identifier to other users or participants.  Access to any\
    \ signaling\n   specific user identifiers can be controlled by applying the\n\
    \   appropriate access control to the signaling specific user identifiers\n  \
    \ in the data schema.\n"
- title: 11.3.  Floor Control Server Authentication
  contents:
  - "11.3.  Floor Control Server Authentication\n   The floor control protocol contains\
    \ mechanisms that clients can use\n   to authenticate servers, and that servers\
    \ can use to authenticate\n   clients, as described in Section 9 of [RFC4582].\
    \  The precise\n   mechanisms used for such authentication can vary depending\
    \ on the\n   call control protocol used.  Clients using call control protocols\n\
    \   that employ an SDP offer/answer model, such as SIP, use the mechanism\n  \
    \ described in Section 8 of [RFC4583].  Clients using other call\n   control protocols\
    \ make use of the mechanisms described in the BFCP\n   Connection Establishment\
    \ document [RFC5018].\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   This document is a result of architectural discussions\
    \ among IETF\n   XCON Working Group participants.  The authors would like to thank\n\
    \   Henning Schulzrinne for the \"Conference Object Tree\" proposal and\n   general\
    \ feedback, Cullen Jennings for providing input for the\n   \"Security Considerations\"\
    \ section, and Keith Lantz, Dave Morgan,\n   Oscar Novo, Roni Even, Umesh Chandra,\
    \ Avshalom Houri, Sean Olson,\n   Rohan Mahy, Brian Rosen, Pierre Tane, Bob Braudes,\
    \ Gregory Sperounes,\n   and Gonzalo Camarillo for their reviews and constructive\
    \ input.  In\n   addition, the authors would like to thank Scott Brim for his\
    \ gen-art\n   review comments and Kurt Zeilenga for his secdir review comments.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC4566]      Handley, M., Jacobson, V., and\
    \ C. Perkins, \"SDP:\n                  Session Description Protocol\", RFC 4566,\
    \ July 2006.\n   [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n\
    \                  Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n    \
    \              and E. Schooler, \"SIP: Session Initiation Protocol\",\n      \
    \            RFC 3261, June 2002.\n   [RFC3264]      Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer\n                  Model with Session Description Protocol\
    \ (SDP)\",\n                  RFC 3264, June 2002.\n   [RFC3265]      Roach, A.,\
    \ \"Session Initiation Protocol (SIP)-Specific\n                  Event Notification\"\
    , RFC 3265, June 2002.\n   [RFC3550]      Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n                  Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \                  Applications\", STD 64, RFC 3550, July 2003.\n   [RFC2445]\
    \      Dawson, F. and Stenerson, D., \"Internet Calendaring\n                \
    \  and Scheduling Core Object Specification (iCalendar)\",\n                 \
    \ RFC 2445, November 1998.\n   [RFC4245]      Levin, O. and R. Even, \"High-Level\
    \ Requirements for\n                  Tightly Coupled SIP Conferencing\", RFC\
    \ 4245,\n                  November 2005.\n   [RFC4353]      Rosenberg, J., \"\
    A Framework for Conferencing with the\n                  Session Initiation Protocol\
    \ (SIP)\", RFC 4353,\n                  February 2006.\n   [RFC4575]      Rosenberg,\
    \ J., Schulzrinne, H., and O. Levin, \"A\n                  Session Initiation\
    \ Protocol (SIP) Event Package for\n                  Conference State\", RFC\
    \ 4575, August 2006.\n   [RFC4376]      Koskelainen, P., Ott, J., Schulzrinne,\
    \ H., and X. Wu,\n                  \"Requirements for Floor Control Protocols\"\
    , RFC 4376,\n                  February 2006.\n   [RFC4597]      Even, R. and\
    \ N. Ismail, \"Conferencing Scenarios\",\n                  RFC 4597, August 2006.\n\
    \   [RFC4579]      Johnston, A. and O. Levin, \"Session Initiation\n         \
    \         Protocol (SIP) Call Control - Conferencing for User\n              \
    \    Agents\", BCP 119, RFC 4579, August 2006.\n   [RFC4582]      Camarillo, G.,\
    \ Ott, J., and K. Drage, \"The Binary\n                  Floor Control Protocol\
    \ (BFCP)\", RFC 4582,\n                  November 2006.\n   [RFC4574]      Levin,\
    \ O. and G. Camarillo, \"The Session Description\n                  Protocol (SDP)\
    \ Label Attribute\", RFC 4574,\n                  August 2006.\n   [RFC4583] \
    \     Camarillo, G., \"Session Description Protocol (SDP)\n                  Format\
    \ for Binary Floor Control Protocol (BFCP)\n                  Streams\", RFC 4583,\
    \ November 2006.\n   [XCON-COMMON]  Novo, O., Camarillo, G., Morgan, D., and R.\
    \ Even,\n                  \"Conference Information Data Model for Centralized\n\
    \                  Conferencing (XCON)\", Work in Progress, March 2008.\n   [RFC4975]\
    \      Campbell, B., Mahy, R., and C. Jennings, \"The Message\n              \
    \    Session Relay Protocol (MSRP)\", RFC 4975,\n                  September 2007.\n\
    \   [RFC5018]      Camarillo, G., \"Connection Establishment in the Binary\n \
    \                 Floor Control Protocol (BFCP)\", RFC 5018,\n               \
    \   September 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mary Barnes\n   Nortel\n   2201 Lakeside Blvd\n   Richardson,\
    \ TX\n   EMail: mary.barnes@nortel.com\n   Chris Boulton\n   Avaya\n   Building\
    \ 3\n   Wern Fawr Lane\n   St Mellons\n   Cardiff, South Wales  CF3 5EA\n   EMail:\
    \ cboulton@avaya.com\n   Orit Levin\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052\n   EMail: oritl@microsoft.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
