- title: __initial_text__
  contents:
  - '  Cryptographic Algorithms for the TCP Authentication Option (TCP-AO)

    '
- title: Abstract
  contents:
  - "Abstract\n   The TCP Authentication Option (TCP-AO) relies on security algorithms\n\
    \   to provide authentication between two end-points.  There are many\n   such\
    \ algorithms available, and two TCP-AO systems cannot interoperate\n   unless\
    \ they are using the same algorithms.  This document specifies\n   the algorithms\
    \ and attributes that can be used in TCP-AO's current\n   manual keying mechanism\
    \ and provides the interface for future message\n   authentication codes (MACs).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5926.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Requirements ....................................................3\n  \
    \    2.1. Requirements Language ......................................3\n    \
    \  2.2. Algorithm Requirements .....................................3\n      2.3.\
    \ Requirements for Future MAC Algorithms .....................3\n   3. Algorithms\
    \ Specified ............................................4\n      3.1. Key Derivation\
    \ Functions (KDFs) ............................4\n           3.1.1. Concrete KDFs\
    \ .......................................5\n                  3.1.1.1. KDF_HMAC_SHA1\
    \ ..............................6\n                  3.1.1.2. KDF_AES_128_CMAC\
    \ ...........................7\n                  3.1.1.3. Tips for User Interfaces\
    \ Regarding KDFs ....9\n      3.2. MAC Algorithms .............................................9\n\
    \           3.2.1. The Use of HMAC-SHA-1-96 ...........................10\n  \
    \         3.2.2. The Use of AES-128-CMAC-96 .........................11\n   4.\
    \ Security Considerations ........................................11\n   5. IANA\
    \ Considerations ............................................13\n   6. Acknowledgements\
    \ ...............................................13\n   7. References .....................................................14\n\
    \      7.1. Normative References ......................................14\n  \
    \    7.2. Informative References ....................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is a companion to [RFC5925].  Like most modern\
    \ security\n   protocols, TCP-AO allows users to choose which cryptographic\n\
    \   algorithm(s) they want to use to meet their security needs.\n   TCP-AO provides\
    \ cryptographic authentication and message integrity\n   verification between\
    \ two end-points.  In order to accomplish this\n   function, message authentication\
    \ codes (MACs) are used, which then\n   rely on shared keys.  There are various\
    \ ways to create MACs.  The use\n   of hash-based MACs (HMACs) is defined in [RFC2104].\
    \  The use of\n   cipher-based MACs (CMACs) is defined in [NIST-SP800-38B].\n\
    \   This RFC defines the general requirements for MACs used in TCP-AO,\n   both\
    \ for currently specified MACs and for any future specified MACs.\n   It specifies\
    \ two MAC algorithms required in all TCP-AO\n   implementations.  It also specifies\
    \ two key derivation functions\n   (KDFs) used to create the traffic keys used\
    \ by the MACs.  These KDFs\n   are also required by all TCP-AO implementations.\n"
- title: 2.  Requirements
  contents:
  - '2.  Requirements

    '
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   When used in lowercase, these words convey their typical use\
    \ in\n   common language, and they are not to be interpreted as described in\n\
    \   [RFC2119].\n"
- title: 2.2.  Algorithm Requirements
  contents:
  - "2.2.  Algorithm Requirements\n   This is the initial specification of required\
    \ cryptography for\n   TCP-AO, and indicates two MAC algorithms and two KDFs.\
    \  All four\n   components MUST be implemented in order for the implementation\
    \ to be\n   fully compliant with this RFC.\n   The following table indicates the\
    \ required MAC algorithms and KDFs\n   for TCP-AO:\n           Requirement   \
    \   Authentication Algorithm\n           ------------     ------------------------\n\
    \           MUST             HMAC-SHA-1-96 [RFC2104][FIPS-180-3]\n           MUST\
    \             AES-128-CMAC-96 [NIST-SP800-38B][FIPS197]\n           Requirement\
    \      Key Derivation Function (KDF)\n           -------------    ------------------------\n\
    \           MUST             KDF_HMAC_SHA1\n           MUST             KDF_AES_128_CMAC\n\
    \   For an explanation of why two MAC algorithms were mandated, see the\n   Section\
    \ 4.\n"
- title: 2.3.  Requirements for Future MAC Algorithms
  contents:
  - "2.3.  Requirements for Future MAC Algorithms\n   TCP-AO is intended to support\
    \ cryptographic agility.  As a result,\n   this document includes recommendations\
    \ in various places for future\n   MAC and KDF algorithms when used for TCP-AO.\
    \  For future MAC\n   algorithms specifically, they SHOULD protect at least 2**48\
    \ messages\n   with a collision probability of less than one in 10**9.\n"
- title: 3.  Algorithms Specified
  contents:
  - "3.  Algorithms Specified\n   TCP-AO requires two classes of cryptographic algorithms\
    \ used on a\n   particular connection, and refers to this document to define them\n\
    \   both:\n       (1)  Key Derivation Functions (KDFs), which name a pseudorandom\n\
    \            function (PRF) and use a Master_Key and some connection-\n      \
    \      specific input with that PRF to produce Traffic_Keys, the\n           \
    \ keys suitable for authenticating and integrity checking\n            individual\
    \ TCP segments, as described in TCP-AO.\n       (2)  Message Authentication Code\
    \ (MAC) algorithms, which take a\n            key and a message and produce an\
    \ authentication tag that can\n            be used to verify the integrity and\
    \ authenticity of those\n            messages.\n   In TCP-AO, these algorithms\
    \ are always used in pairs.  Each MAC\n   algorithm MUST specify the KDF to be\
    \ used with that MAC algorithm.\n   However, a KDF MAY be used with more than\
    \ one MAC algorithm.\n"
- title: 3.1.  Key Derivation Functions (KDFs)
  contents:
  - "3.1.  Key Derivation Functions (KDFs)\n   TCP-AO's Traffic_Keys are derived using\
    \ KDFs.  The KDFs used in TCP-\n   AO's current manual keying have the following\
    \ interface:\n       Traffic_Key = KDF_alg(Master_Key, Context, Output_Length)\n\
    \   where:\n      - KDF_alg:     the specific pseudorandom function (PRF) that\
    \ is\n                     the basic building block used in constructing the\n\
    \                     given Traffic_Key.\n      - Master_Key:  In TCP-AO's manual\
    \ key mode, this is a key shared\n                     by both peers, entered\
    \ via some interface to their\n                     respective configurations.\
    \  The Master_Key is used\n                     as the seed for the KDF.  We assume\
    \ that this is a\n                     human-readable pre-shared key (PSK); thus,\
    \ we\n                     assume it is of variable length.  Master_Keys\n   \
    \                  SHOULD be random, but might not be (e.g., badly\n         \
    \            chosen by the user).  For interoperability, the\n               \
    \      management interface by which the PSK is configured\n                 \
    \    MUST accept ASCII strings, and SHOULD also allow\n                     for\
    \ the configuration of any arbitrary binary\n                     string in hexadecimal\
    \ form.  Other configuration\n                     methods MAY be supported.\n\
    \      - Context:     A binary string containing information related to\n    \
    \                 the specific connection for this derived keying\n          \
    \           material, as defined in [RFC5925], Section 5.2.\n      - Output_Length:\
    \  The length, in bits, of the key that the KDF\n                        will\
    \ produce.  This length must be the size\n                        required for\
    \ the MAC algorithm that will use the\n                        PRF result as a\
    \ seed.\n   When invoked, a KDF generates a string of length Output_Length bits\n\
    \   based on the Master_Key and context value.  This result may then be\n   used\
    \ as a cryptographic key for any algorithm that takes an\n   Output_Length length\
    \ key.  A KDF MAY specify a maximum Output_Length\n   parameter.\n"
- title: 3.1.1.  Concrete KDFs
  contents:
  - "3.1.1.  Concrete KDFs\n   This document defines two KDF algorithms, each paired\
    \ with a\n   corresponding PRF algorithm as explained below:\n       *  KDF_HMAC_SHA1\
    \  based on PRF-HMAC-SHA1 [RFC2104][FIPS-180-3]\n       *  KDF_AES_128_CMAC  based\
    \ on AES-CMAC-PRF-128\n                            [NIST-SP800-38B][FIPS197]\n\
    \   Both of these KDFs are based on the iteration-mode KDFs specified in\n   [NIST-SP800-108].\
    \  This means that they use an underlying\n   pseudorandom function (PRF) with\
    \ a fixed-length output, 128 bits in\n   the case of the AES-CMAC, and 160 bits\
    \ in the case of HMAC-SHA1.  The\n   KDF generates an arbitrary number of output\
    \ bits by operating the PRF\n   in a \"counter mode\", where each invocation of\
    \ the PRF uses a\n   different input block differentiated by a block counter.\n\
    \   Each input block is constructed as follows:\n        ( i || Label || Context\
    \ || Output_Length )\n      Where\n      - \"||\":      For any X || Y, \"||\"\
    \ represents a concatenation\n                   operation of the binary strings\
    \ X and Y.\n      - i:         A counter, a binary string that is an input to\
    \ each\n                   iteration of the PRF in counter mode.  The counter\n\
    \                   \"i\" is represented in a single octet.  The number of\n \
    \                  iterations will depend on the specific size of the\n      \
    \             Output_Length desired for a given MAC. \"i\" always\n          \
    \         starts = 1.\n      - Label:     A binary string that clearly identifies\
    \ the purpose\n                   of this KDF's derived keying material.  For\
    \ TCP-AO,\n                   we use the ASCII string \"TCP-AO\", where the last\n\
    \                   character is the capital letter \"O\", not to be\n       \
    \            confused with a zero.  While this may seem like\n               \
    \    overkill in this specification since TCP-AO only\n                   describes\
    \ one call to the KDF, it is included in\n                   order to comply with\
    \ FIPS 140 certifications.\n      - Context:   The context argument provided to\
    \ the KDF interface,\n                   as described above in Section 3.1 .\n\
    \      - Output_Length:  The length, in bits, of the key that the KDF\n      \
    \                  will produce.  The Output_length is represented\n         \
    \               within two octets.  This length must be the size\n           \
    \             required for the MAC algorithm that will use the\n             \
    \           PRF result as a seed.\n   The output of multiple PRF invocations is\
    \ simply concatenated.  For\n   the Traffic_Key, values of multiple PRF invocations\
    \ are concatenated\n   and truncated as needed to create a Traffic_Key of the\
    \ desired\n   length.  For instance, if one were using KDF_HMAC_SHA1, which uses\
    \ a\n   160-bit internal PRF to generate 320 bits of data, one would execute\n\
    \   the PRF twice, once with i=1 and once with i=2.  The result would be\n   the\
    \ entire output of the first invocation concatenated with the\n   second invocation.\
    \  For example,\n  Traffic_Key =\n          KDF_alg(Master_Key, 1 || Label ||\
    \ Context || Output_length) ||\n          KDF_alg(Master_Key, 2 || Label || Context\
    \ || Output_length)\n   If the number of bits required is not an exact multiple\
    \ of the output\n   size of the PRF, then the output of the final invocation of\
    \ the PRF\n   is truncated as necessary.\n"
- title: 3.1.1.1.  KDF_HMAC_SHA1
  contents:
  - "3.1.1.1.  KDF_HMAC_SHA1\n   For KDF_HMAC_SHA1:\n   - PRF for KDF_alg:  HMAC-SHA1\
    \ [RFC2104][FIPS-180-3].\n   - Use:       HMAC-SHA1(Key, Input).\n   - Key:  \
    \     Master_Key, configured by user, and passed to the KDF.\n   - Input:    \
    \ ( i || Label || Context || Output_Length)\n   - Output_Length:  160 bits.\n\
    \   - Result:    Traffic_Key, used in the MAC function by TCP-AO.\n"
- title: 3.1.1.2.  KDF_AES_128_CMAC
  contents:
  - "3.1.1.2.  KDF_AES_128_CMAC\n   For KDF_AES_128_CMAC:\n   - PRF for KDF_alg: \
    \ AES-CMAC-PRF-128 [NIST-SP800-38B][FIPS197].\n   - Use:       AES-CMAC(Key, Input).\n\
    \   - Key:       Master_Key (see usage below)\n   - Input:     ( i || Label ||\
    \ Context || Output_Length)\n   - Output_Length:  128 bits.\n   - Result:    Traffic_Key,\
    \ used in the MAC function by TCP-AO\n   The Master_Key in TCP-AO's current manual\
    \ keying mechanism is a\n   shared secret, entered by an administrator.  It is\
    \ passed via an out-\n   of-band mechanism between two devices, and often between\
    \ two\n   organizations.  The shared secret does not have to be 16 octets, and\n\
    \   the length may vary.  However, AES_128_CMAC requires a key of exactly\n  \
    \ 16 octets (128 bits) in length.  We could mandate that\n   implementations force\
    \ administrators to input Master_Keys of exactly\n   128-bit length when using\
    \ AES_128_CMAC, and with sufficient\n   randomness, but this places undue burden\
    \ on the implementors and\n   deployers.  This specification RECOMMENDS that deployers\
    \ use a\n   randomly generated 128-bit string as the Master_Key, but acknowledges\n\
    \   that deployers may not.\n   To handle variable length Master_Keys, we use\
    \ the same mechanism as\n   described in [RFC4615], Section 3.  First, we use\
    \ AES_128_CMAC with a\n   fixed key of all zeros as a \"randomness extractor\"\
    , while using the\n   shared secret Master_Key, MK, as the message input, to produce\
    \ a 128-\n   bit key Derived_Master_Key (K).  Second, we use the result as a key,\n\
    \   and run AES-128_CMAC again, this time using the result K as the Key,\n   and\
    \ the true input block as the Input to yield the Traffic_Key (TK)\n   used in\
    \ the MAC over the message.  The description follows:\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   +                        KDF-AES-128-CMAC                           +\n  \
    \ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   +\
    \                                                                   +\n   + Input\
    \  : MK (Master_Key, the variable-length shared secret)       +\n   +        :\
    \ I (Input, i.e., the input data of the PRF)               +\n   +        : MKlen\
    \ (length of MK in octets)                           +\n   +        : len (length\
    \ of M in octets)                              +\n   + Output : TK (Traffic_Key,\
    \ 128-bit Pseudo-Random Variable)         +\n   +                            \
    \                                       +\n   +-------------------------------------------------------------------+\n\
    \   + Variable: K (128-bit key for AES-CMAC)                            +\n  \
    \ +                                                                   +\n   +\
    \ Step 1.   If MKlen is equal to 16                                 +\n   + Step\
    \ 1a.  then                                                    +\n   +       \
    \        K := MK;                                            +\n   + Step 1b.\
    \  else                                                    +\n   +           \
    \    K := AES-CMAC(0^128, MK, MKlen);                    +\n   + Step 2.   TK\
    \ := AES-CMAC(K, I, len);                              +\n   +           return\
    \ TK;                                              +\n   +                   \
    \                                                +\n   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \                                 Figure 1\n   In step 1, the 128-bit key, K,\
    \ for AES-CMAC is derived as follows:\n   o If the Master_Key, MK, provided by\
    \ the administrator is exactly 128\n   bits, then we use it as is.\n   o If it\
    \ is longer or shorter than 128 bits, then we derive the key K\n   by applying\
    \ the AES-CMAC algorithm using the 128-bit all-zero string\n   as the key and\
    \ MK as the input message.  This step is described in\n   1b.\n   In step 2, we\
    \ apply the AES-CMAC algorithm again, this time using K\n   as the key and I as\
    \ the input message.\n   The output of this algorithm returns TK, the Traffic_Key,\
    \ which is\n   128 bits and is suitable for use in the MAC function on each TCP\n\
    \   segment of the connection.\n"
- title: 3.1.1.3.  Tips for User Interfaces Regarding KDFs
  contents:
  - "3.1.1.3.  Tips for User Interfaces Regarding KDFs\n   This section provides suggested\
    \ representations for the KDFs in\n   implementation user interfaces (UIs).  Following\
    \ these guidelines\n   across common implementations will make interoperability\
    \ easier and\n   simpler for deployers.\n   UIs SHOULD refer to the choice of\
    \ KDF_HMAC_SHA1 as simply \"SHA1\".\n   UIs SHOULD refer to the choice of KDF_AES_128_CMAC\
    \ as simply\n   \"AES128\".\n   The initial IANA registry values reflect these\
    \ two entries.\n   UIs SHOULD use KDF_HMAC_SHA1 as the default selection in TCP-AO\n\
    \   settings.  KDF_HMAC_SHA1 is preferred at this time because it has\n   wide\
    \ support, being present in most implementations in the\n   marketplace.\n"
- title: 3.2.  MAC Algorithms
  contents:
  - "3.2.  MAC Algorithms\n   Each MAC_alg defined for TCP-AO has three fixed elements\
    \ as part of\n   its definition:\n   - KDF_Alg:     Name of the TCP-AO KDF algorithm\
    \ used to generate the\n                  Traffic_Key.\n   - Key_Length:  Length,\
    \ in bits, required for the Traffic_Key used in\n                  this MAC.\n\
    \   - MAC_Length:  The final length of the bits used in the TCP-AO MAC\n     \
    \             field.  This value may be a truncation of the MAC\n            \
    \      function's original output length.\n   MACs computed for TCP-AO have the\
    \ following interface:\n       MAC = MAC_alg(Traffic_Key, Message)\n   where:\n\
    \      - MAC_alg:     MAC Algorithm used.\n      - Traffic_Key: Variable; the\
    \ result of KDF.\n      -  Message     The message to be authenticated, as specified\
    \ in\n                     [RFC5925], Section 5.1.\n   This document specifies\
    \ two MAC algorithm options for generating the\n   MAC as used by TCP-AO:\n  \
    \     *  HMAC-SHA-1-96  based on [RFC2104] and [FIPS-180-3].\n       *  AES-128-CMAC-96\
    \  based on [NIST-SP800-38B][FIPS197]\n   Both provide a high level of security\
    \ and efficiency.  The AES-128-\n   CMAC-96 is potentially more efficient, particularly\
    \ in hardware, but\n   HMAC-SHA-1-96 is more widely used in Internet protocols\
    \ and in most\n   cases could be supported with little or no additional code in\
    \ today's\n   deployed software and devices.\n   An important aspect to note about\
    \ these algorithms' definitions for\n   use in TCP-AO is the fact that the MAC\
    \ outputs are truncated to 96\n   bits.  AES-128-CMAC-96 produces a 128-bit MAC,\
    \ and HMAC SHA-1\n   produces a 160-bit result.  The MAC output is then truncated\
    \ to 96\n   bits to provide a reasonable trade-off between security and message\n\
    \   size, for fitting into the TCP-AO option field.\n"
- title: 3.2.1.  The Use of HMAC-SHA-1-96
  contents:
  - "3.2.1.  The Use of HMAC-SHA-1-96\n   By definition, HMAC [RFC2104] requires a\
    \ cryptographic hash function.\n   SHA1 will be that hash function used for authenticating\
    \ and providing\n   integrity validation on TCP segments with HMAC.\n   The three\
    \ fixed elements for HMAC-SHA-1-96 are:\n   - KDF_Alg:     KDF_HMAC_SHA1.\n  \
    \ - Key_Length:  160 bits.\n   - MAC_Length:  96 bits.\n   For:\n        MAC =\
    \ MAC_alg (Traffic_Key, Message)\n   HMAC-SHA-1-96 for TCP-AO has the following\
    \ values:\n      - MAC_alg:     HMAC-SHA1.\n      - Traffic_Key: Variable; the\
    \ result of the KDF.\n      - Message:     The message to be authenticated, as\
    \ specified in\n                     [RFC5925], Section 5.1.\n"
- title: 3.2.2.  The Use of AES-128-CMAC-96
  contents:
  - "3.2.2.  The Use of AES-128-CMAC-96\n   In the context of TCP-AO, when we say\
    \ \"AES-128-CMAC-96\", we actually\n   define a usage of AES-128 as a cipher-based\
    \ MAC according to\n   [NIST-SP800-38B].\n   The three fixed elements for AES-128-CMAC-96\
    \ are:\n   - KDF_Alg:     KDF_AES_128_CMAC.\n   - Key_Length:  128 bits.\n   -\
    \ MAC_Length:  96 bits.\n   For:\n        MAC = MAC_alg (Traffic_Key, Message)\n\
    \   AES-128-CMAC-96 for TCP-AO has the following values:\n      - MAC_alg:   \
    \  AES-128-CMAC-96.  [NIST-SP800-38B]\n      - Traffic_Key: Variable; the result\
    \ of the KDF.\n      - Message:     The message to be authenticated, as specified\
    \ in\n                     [RFC5925], Section 5.1.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document inherits all of the security considerations\
    \ of the\n   TCP-AO [RFC5925], the AES-CMAC [RFC4493], and the HMAC-SHA-1\n  \
    \ [RFC2104] documents.\n   The security of cryptography-based systems depends\
    \ on both the\n   strength of the cryptographic algorithms chosen and the strength\
    \ of\n   the keys used with those algorithms.  The security also depends on\n\
    \   the engineering of the protocol used by the system to ensure that\n   there\
    \ are no non-cryptographic ways to bypass the security of the\n   overall system.\n\
    \   Care should also be taken to ensure that the selected key is\n   unpredictable,\
    \ avoiding any keys known to be weak for the algorithm\n   in use.  [RFC4086]\
    \ contains helpful information on both key\n   generation techniques and cryptographic\
    \ randomness.\n   Note that in the composition of KDF_AES_128_CMAC, the PRF needs\
    \ a\n   128-bit / 16-byte key as the seed.  However, for convenience to the\n\
    \   administrators/deployers, we did not want to force them to enter a\n   16-byte\
    \ Master_Key.  So we specified the sub-key routine that could\n   handle a variable\
    \ length Master_Key, one that might be less than 16\n   bytes.  This does NOT\
    \ mean that it is safe for administrators to use\n   weak keys.  Administrators\
    \ are encouraged to follow [RFC4086] as\n   listed above.  We simply attempted\
    \ to \"put a fence around\n   foolishness\", as much as possible.\n   This document\
    \ concerns itself with the selection of cryptographic\n   algorithms for the use\
    \ of TCP-AO.  The algorithms identified in this\n   document as \"MUST implement\"\
    \ are not known to be broken at the\n   current time, and cryptographic research\
    \ so far leads us to believe\n   that they will likely remain secure into the\
    \ foreseeable future.\n   Some of the algorithms may be found in the future to\
    \ have properties\n   significantly weaker than those that were believed at the\
    \ time this\n   document was produced.  Expect that new revisions of this document\n\
    \   will be issued from time to time.  Be sure to search for more recent\n   versions\
    \ of this document before implementing.\n   NOTE EXPLAINING WHY TWO MAC ALGORITHMS\
    \ WERE MANDATED:\n   Two MAC algorithms and two corresponding KDFs are mandated\
    \ as a\n   result of discussion in the TCPM WG, and in consultation with the\n\
    \   Security Area Directors.  SHA-1 was selected because it is widely\n   deployed\
    \ and currently has sufficient strength and reasonable\n   computational cost,\
    \ so it is a \"MUST\" for TCP-AO today.  The security\n   strength of SHA-1 HMACs\
    \ should be sufficient for the foreseeable\n   future, especially given that the\
    \ tags are truncated to 96 bits.\n   Recently exposed vulnerabilities in other\
    \ MACs (e.g., MD5 or HMAC\n   MD5) aren't practical on HMAC-SHA-1, but these types\
    \ of analyses are\n   mounting and could potentially pose a concern for HMAC forgery\
    \ if\n   they were significantly improved, over time.  The security issues\n \
    \  driving the migration from SHA-1 to SHA-256 for digital signatures\n   [HMAC-ATTACK]\
    \ do not immediately render SHA-1 weak for this\n   application of SHA-1 in HMAC\
    \ mode.\n   AES-128 CMAC is considered to be a stronger algorithm than SHA-1,\
    \ but\n   may not yet have very wide implementation.  AES-128 CMAC is also a\n\
    \   \"MUST\" to implement, in order to drive vendors toward its use, and to\n\
    \   allow for another MAC option, if SHA-1 were to be compromised.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has created the following registry (http://www.iana.org).\n\
    \   Registry Name: Cryptographic Algorithms for TCP-AO Registration\n   Procedure:\
    \ RFC Publication after Expert Review\n   Initial contents of this registry are:\n\
    \         Algorithm      | Reference\n        ----------------|-----------\n \
    \        SHA1           | [RFC5926]\n         AES128         | [RFC5926]\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Eric \"EKR\" Rescorla, who provided a ton of input and\
    \ feedback,\n   including a somewhat heavy re-write of Section 3.1.x, earning\
    \ him an\n   author slot on the document.\n   Paul Hoffman, from whose [RFC4308]\
    \ I sometimes copied, to quickly\n   create a first version here.\n   Tim Polk,\
    \ whose email summarizing SAAG's guidance to TCPM on the two\n   hash algorithms\
    \ for TCP-AO is largely cut-and-pasted into various\n   sections of this document.\n\
    \   Jeff Schiller, Donald Eastlake, and the IPsec WG, whose [RFC4307] &\n   [RFC4835]\
    \ text was consulted and sometimes used in the Requirements\n   Section 2 of this\
    \ document.\n   (In other words, I was truly only an editor of others' text in\n\
    \   creating this document.)\n   Eric \"EKR\" Rescorla and Brian Weis, who brought\
    \ to clarity the issues\n   with the inputs to PRFs for the KDFs.  EKR was also\
    \ of great\n   assistance in how to structure the text, as well as helping to\
    \ guide\n   good cryptographic decisions.\n   The TCPM working group, who put\
    \ up with all us crypto and routing\n   folks DoS'ing their WG for 2 years, and\
    \ who provided reviews of this\n   document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [FIPS-180-3]  FIPS Publication 180-3, \"Secured\
    \ Hash Standard\",\n                 FIPS 180-3, October 2008.\n   [FIPS197] \
    \    FIPS Publications 197, \"Advanced Encryption Standard\n                 (AES)\"\
    , FIPS 197, November 2001.\n   [NIST-SP800-108]\n                 National Institute\
    \ of Standards and Technology,\n                 \"Recommendation for Key Derivation\
    \ Using Pseudorandom\n                 Functions, NIST SP800-108\", SP 800- 108,\
    \ October 2009.\n   [NIST-SP800-38B]\n                 National Institute of Standards\
    \ and Technology,\n                 \"Recommendation for Block Cipher Modes of\
    \ Operation:\n                 The CMAC Mode for Authentication\", SP 800-38B,\n\
    \                 May 2005.\n   [RFC2104]     Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC:\n                 Keyed-Hashing for Message Authentication\"\
    , RFC 2104,\n                 February 1997.\n   [RFC2119]     Bradner, S., \"\
    Key words for use in RFCs to Indicate\n                 Requirement Levels\",\
    \ BCP 14, RFC 2119, March 1997.\n   [RFC4493]     Song, JH., Poovendran, R., Lee,\
    \ J., and T. Iwata, \"The\n                 AES-CMAC Algorithm\", RFC 4493, June\
    \ 2006.\n   [RFC5925]     Touch, J., Mankin, A., and R. Bonica, \"The TCP\n  \
    \               Authentication Option\", RFC 5925, June 2010.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [HMAC-ATTACK] \"On the Security of HMAC and\
    \ NMAC Based on HAVAL, MD4,\n                 MD5, SHA-0 and SHA-1\", <http://\n\
    \                 www.springerlink.com/content/00w4v62651001303> , 2006,\n   \
    \              <http://eprint.iacr.org/2006/187>.\n   [RFC4086]     Eastlake,\
    \ D., Schiller, J., and S. Crocker, \"Randomness\n                 Requirements\
    \ for Security\", BCP 106, RFC 4086,\n                 June 2005.\n   [RFC4307]\
    \     Schiller, J., \"Cryptographic Algorithms for Use in the\n              \
    \   Internet Key Exchange Version 2 (IKEv2)\", RFC 4307,\n                 December\
    \ 2005.\n   [RFC4308]     Hoffman, P., \"Cryptographic Suites for IPsec\",\n \
    \                RFC 4308, December 2005.\n   [RFC4615]     Song, J., Poovendran,\
    \ R., Lee, J., and T. Iwata, \"The\n                 Advanced Encryption Standard-Cipher-based\
    \ Message\n                 Authentication Code-Pseudo-Random Function-128\n \
    \                (AES-CMAC-PRF-128) Algorithm for the Internet Key\n         \
    \        Exchange Protocol (IKE)\", RFC 4615, August 2006.\n   [RFC4835]     Manral,\
    \ V., \"Cryptographic Algorithm Implementation\n                 Requirements\
    \ for Encapsulating Security Payload (ESP)\n                 and Authentication\
    \ Header (AH)\", RFC 4835, April 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gregory Lebovitz\n   Juniper Networks, Inc.\n   1194 North\
    \ Mathilda Ave.\n   Sunnyvale, CA  94089-1206\n   US\n   Phone:\n   EMail: gregory.ietf@gmail.com\n\
    \   Eric Rescorla\n   RTFM, Inc.\n   2064 Edgewood Drive\n   Palo Alto, CA  94303\n\
    \   US\n   Phone: 650-678-2350\n   EMail: ekr@rtfm.com\n"
