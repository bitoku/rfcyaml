- title: __initial_text__
  contents:
  - "          Extensible Messaging and Presence Protocol (XMPP):\n              \
    \       Instant Messaging and Presence\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes extensions to and applications of the core\n\
    \   features of the Extensible Messaging and Presence Protocol (XMPP)\n   that\
    \ provide the basic instant messaging (IM) and presence\n   functionality defined\
    \ in RFC 2779.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.   Syntax of XML Stanzas  . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.   Session Establishment  . . . . . . . . . . . . . . . .\
    \ . . .  10\n   4.   Exchanging Messages  . . . . . . . . . . . . . . . . . .\
    \ . .  13\n   5.   Exchanging Presence Information  . . . . . . . . . . . . .\
    \ .  16\n   6.   Managing Subscriptions . . . . . . . . . . . . . . . . . . .\
    \  26\n   7.   Roster Management  . . . . . . . . . . . . . . . . . . . . .  27\n\
    \   8.   Integration of Roster Items and Presence Subscriptions . . .  32\n  \
    \ 9.   Subscription States  . . . . . . . . . . . . . . . . . . . .  56\n   10.\
    \  Blocking Communication . . . . . . . . . . . . . . . . . . .  62\n   11.  Server\
    \ Rules for Handling XML Stanzas  . . . . . . . . . . .  85\n   12.  IM and Presence\
    \ Compliance Requirements  . . . . . . . . . .  88\n   13.  Internationalization\
    \ Considerations  . . . . . . . . . . . .  89\n   14.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . .  89\n   15.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . .  90\n   16.  References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  91\n   A.   vCards . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  93\n   B.   XML Schemas. . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  93\n   C.   Differences Between Jabber IM/Presence\
    \ Protocols and XMPP. . 105\n   Contributors . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  106\n   Acknowledgements . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  106\n   Author's Address. . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 106\n   Full Copyright Statement. . . . . . . . . . . . . . .\
    \ . . . . . . 107\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   The Extensible Messaging and Presence Protocol (XMPP) is a\
    \ protocol\n   for streaming XML [XML] elements in order to exchange messages\
    \ and\n   presence information in close to real time.  The core features of\n\
    \   XMPP are defined in Extensible Messaging and Presence Protocol\n   (XMPP):\
    \ Core [XMPP-CORE].  These features -- mainly XML streams, use\n   of TLS and\
    \ SASL, and the <message/>, <presence/>, and <iq/> children\n   of the stream\
    \ root -- provide the building blocks for many types of\n   near-real-time applications,\
    \ which may be layered on top of the core\n   by sending application-specific\
    \ data qualified by particular XML\n   namespaces [XML-NAMES].  This memo describes\
    \ extensions to and\n   applications of the core features of XMPP that provide\
    \ the basic\n   functionality expected of an instant messaging (IM) and presence\n\
    \   application as defined in RFC 2779 [IMP-REQS].\n"
- title: 1.2.  Requirements
  contents:
  - "1.2.  Requirements\n   For the purposes of this memo, the requirements of a basic\
    \ instant\n   messaging and presence application are defined by [IMP-REQS], which\n\
    \   at a high level stipulates that a user must be able to complete the\n   following\
    \ use cases:\n   o  Exchange messages with other users\n   o  Exchange presence\
    \ information with other users\n   o  Manage subscriptions to and from other users\n\
    \   o  Manage items in a contact list (in XMPP this is called a \"roster\")\n\
    \   o  Block communications to or from specific other users\n   Detailed definitions\
    \ of these functionality areas are contained in\n   [IMP-REQS], and the interested\
    \ reader is directed to that document\n   regarding the requirements addressed\
    \ herein.\n   [IMP-REQS] also stipulates that presence services must be separable\n\
    \   from instant messaging services; i.e., it must be possible to use the\n  \
    \ protocol to provide a presence service, an instant messaging service,\n   or\
    \ both.  Although the text of this memo assumes that implementations\n   and deployments\
    \ will want to offer a unified instant messaging and\n   presence service, there\
    \ is no requirement that a service must offer\n   both a presence service and\
    \ an instant messaging service, and the\n   protocol makes it possible to offer\
    \ separate and distinct services\n   for presence and for instant messaging.\n\
    \   Note: While XMPP-based instant messaging and presence meets the\n   requirements\
    \ of [IMP-REQS], it was not designed explicitly with that\n   specification in\
    \ mind, since the base protocol evolved through an\n   open development process\
    \ within the Jabber open-source community\n   before RFC 2779 was written.  Note\
    \ also that although protocols\n   addressing many other functionality areas have\
    \ been defined in the\n   Jabber community, such protocols are not included in\
    \ this memo\n   because they are not required by [IMP-REQS].\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This memo inherits the terminology defined in [XMPP-CORE].\n\
    \   The capitalized key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    ,\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and\n\
    \   \"OPTIONAL\" in this document are to be interpreted as described in BCP\n\
    \   14, RFC 2119 [TERMS].\n"
- title: 2.  Syntax of XML Stanzas
  contents:
  - "2.  Syntax of XML Stanzas\n   The basic semantics and common attributes of XML\
    \ stanzas qualified by\n   the 'jabber:client' and 'jabber:server' namespaces\
    \ are defined in\n   [XMPP-CORE].  However, these namespaces also define various\
    \ child\n   elements, as well as values for the common 'type' attribute, that\
    \ are\n   specific to instant messaging and presence applications.  Thus,\n  \
    \ before addressing particular \"use cases\" for such applications, we\n   here\
    \ further describe the syntax of XML stanzas, thereby\n   supplementing the discussion\
    \ in [XMPP-CORE].\n"
- title: 2.1.  Message Syntax
  contents:
  - "2.1.  Message Syntax\n   Message stanzas qualified by the 'jabber:client' or\
    \ 'jabber:server'\n   namespace are used to \"push\" information to another entity.\
    \  Common\n   uses in instant messaging applications include single messages,\n\
    \   messages sent in the context of a chat conversation, messages sent in\n  \
    \ the context of a multi-user chat room, headlines and other alerts,\n   and errors.\n"
- title: 2.1.1.  Types of Message
  contents:
  - "2.1.1.  Types of Message\n   The 'type' attribute of a message stanza is RECOMMENDED;\
    \ if included,\n   it specifies the conversational context of the message, thus\n\
    \   providing a hint regarding presentation (e.g., in a GUI).  If\n   included,\
    \ the 'type' attribute MUST have one of the following values:\n   o  chat -- The\
    \ message is sent in the context of a one-to-one chat\n      conversation.  A\
    \ compliant client SHOULD present the message in an\n      interface enabling\
    \ one-to-one chat between the two parties,\n      including an appropriate conversation\
    \ history.\n   o  error -- An error has occurred related to a previous message\
    \ sent\n      by the sender (for details regarding stanza error syntax, refer\
    \ to\n      [XMPP-CORE]).  A compliant client SHOULD present an appropriate\n\
    \      interface informing the sender of the nature of the error.\n   o  groupchat\
    \ -- The message is sent in the context of a multi-user\n      chat environment\
    \ (similar to that of [IRC]).  A compliant client\n      SHOULD present the message\
    \ in an interface enabling many-to-many\n      chat between the parties, including\
    \ a roster of parties in the\n      chatroom and an appropriate conversation history.\
    \  Full definition\n      of XMPP-based groupchat protocols is out of scope for\
    \ this memo.\n   o  headline -- The message is probably generated by an automated\n\
    \      service that delivers or broadcasts content (news, sports, market\n   \
    \   information, RSS feeds, etc.).  No reply to the message is\n      expected,\
    \ and a compliant client SHOULD present the message in an\n      interface that\
    \ appropriately differentiates the message from\n      standalone messages, chat\
    \ sessions, or groupchat sessions (e.g.,\n      by not providing the recipient\
    \ with the ability to reply).\n   o  normal -- The message is a single message\
    \ that is sent outside the\n      context of a one-to-one conversation or groupchat,\
    \ and to which it\n      is expected that the recipient will reply.  A compliant\
    \ client\n      SHOULD present the message in an interface enabling the recipient\n\
    \      to reply, but without a conversation history.\n   An IM application SHOULD\
    \ support all of the foregoing message types;\n   if an application receives a\
    \ message with no 'type' attribute or the\n   application does not understand\
    \ the value of the 'type' attribute\n   provided, it MUST consider the message\
    \ to be of type \"normal\" (i.e.,\n   \"normal\" is the default).  The \"error\"\
    \ type MUST be generated only in\n   response to an error related to a message\
    \ received from another\n   entity.\n   Although the 'type' attribute is OPTIONAL,\
    \ it is considered polite to\n   mirror the type in any replies to a message;\
    \ furthermore, some\n   specialized applications (e.g., a multi-user chat service)\
    \ MAY at\n   their discretion enforce the use of a particular message type (e.g.,\n\
    \   type='groupchat').\n"
- title: 2.1.2.  Child Elements
  contents:
  - "2.1.2.  Child Elements\n   As described under extended namespaces (Section 2.4),\
    \ a message\n   stanza MAY contain any properly-namespaced child element.\n  \
    \ In accordance with the default namespace declaration, by default a\n   message\
    \ stanza is qualified by the 'jabber:client' or 'jabber:server'\n   namespace,\
    \ which defines certain allowable children of message\n   stanzas.  If the message\
    \ stanza is of type \"error\", it MUST include\n   an <error/> child; for details,\
    \ see [XMPP-CORE].  Otherwise, the\n   message stanza MAY contain any of the following\
    \ child elements\n   without an explicit namespace declaration:\n   1.  <subject/>\n\
    \   2.  <body/>\n   3.  <thread/>\n"
- title: 2.1.2.1.  Subject
  contents:
  - "2.1.2.1.  Subject\n   The <subject/> element contains human-readable XML character\
    \ data\n   that specifies the topic of the message.  The <subject/> element MUST\n\
    \   NOT possess any attributes, with the exception of the 'xml:lang'\n   attribute.\
    \  Multiple instances of the <subject/> element MAY be\n   included for the purpose\
    \ of providing alternate versions of the same\n   subject, but only if each instance\
    \ possesses an 'xml:lang' attribute\n   with a distinct language value.  The <subject/>\
    \ element MUST NOT\n   contain mixed content (as defined in Section 3.2.2 of [XML]).\n"
- title: 2.1.2.2.  Body
  contents:
  - "2.1.2.2.  Body\n   The <body/> element contains human-readable XML character\
    \ data that\n   specifies the textual contents of the message; this child element\
    \ is\n   normally included but is OPTIONAL.  The <body/> element MUST NOT\n  \
    \ possess any attributes, with the exception of the 'xml:lang'\n   attribute.\
    \  Multiple instances of the <body/> element MAY be included\n   but only if each\
    \ instance possesses an 'xml:lang' attribute with a\n   distinct language value.\
    \  The <body/> element MUST NOT contain mixed\n   content (as defined in Section\
    \ 3.2.2 of [XML]).\n"
- title: 2.1.2.3.  Thread
  contents:
  - "2.1.2.3.  Thread\n   The <thread/> element contains non-human-readable XML character\
    \ data\n   specifying an identifier that is used for tracking a conversation\n\
    \   thread (sometimes referred to as an \"instant messaging session\")\n   between\
    \ two entities.  The value of the <thread/> element is\n   generated by the sender\
    \ and SHOULD be copied back in any replies.  If\n   used, it MUST be unique to\
    \ that conversation thread within the stream\n   and MUST be consistent throughout\
    \ that conversation (a client that\n   receives a message from the same full JID\
    \ but with a different thread\n   ID MUST assume that the message in question\
    \ exists outside the\n   context of the existing conversation thread).  The use\
    \ of the\n   <thread/> element is OPTIONAL and is not used to identify individual\n\
    \   messages, only conversations.  A message stanza MUST NOT contain more\n  \
    \ than one <thread/> element.  The <thread/> element MUST NOT possess\n   any\
    \ attributes.  The value of the <thread/> element MUST be treated\n   as opaque\
    \ by entities; no semantic meaning may be derived from it,\n   and only exact\
    \ comparisons may be made against it.  The <thread/>\n   element MUST NOT contain\
    \ mixed content (as defined in Section 3.2.2\n   of [XML]).\n"
- title: 2.2.  Presence Syntax
  contents:
  - "2.2.  Presence Syntax\n   Presence stanzas are used qualified by the 'jabber:client'\
    \ or\n   'jabber:server' namespace to express an entity's current network\n  \
    \ availability (offline or online, along with various sub-states of the\n   latter\
    \ and optional user-defined descriptive text), and to notify\n   other entities\
    \ of that availability.  Presence stanzas are also used\n   to negotiate and manage\
    \ subscriptions to the presence of other\n   entities.\n"
- title: 2.2.1.  Types of Presence
  contents:
  - "2.2.1.  Types of Presence\n   The 'type' attribute of a presence stanza is OPTIONAL.\
    \  A presence\n   stanza that does not possess a 'type' attribute is used to signal\
    \ to\n   the server that the sender is online and available for communication.\n\
    \   If included, the 'type' attribute specifies a lack of availability, a\n  \
    \ request to manage a subscription to another entity's presence, a\n   request\
    \ for another entity's current presence, or an error related to\n   a previously-sent\
    \ presence stanza.  If included, the 'type' attribute\n   MUST have one of the\
    \ following values:\n   o  unavailable -- Signals that the entity is no longer\
    \ available for\n      communication.\n   o  subscribe -- The sender wishes to\
    \ subscribe to the recipient's\n      presence.\n   o  subscribed -- The sender\
    \ has allowed the recipient to receive\n      their presence.\n   o  unsubscribe\
    \ -- The sender is unsubscribing from another entity's\n      presence.\n   o\
    \  unsubscribed -- The subscription request has been denied or a\n      previously-granted\
    \ subscription has been cancelled.\n   o  probe -- A request for an entity's current\
    \ presence; SHOULD be\n      generated only by a server on behalf of a user.\n\
    \   o  error -- An error has occurred regarding processing or delivery of\n  \
    \    a previously-sent presence stanza.\n   For detailed information regarding\
    \ presence semantics and the\n   subscription model used in the context of XMPP-based\
    \ instant\n   messaging and presence applications, refer to Exchanging Presence\n\
    \   Information (Section 5) and Managing Subscriptions (Section 6).\n"
- title: 2.2.2.  Child Elements
  contents:
  - "2.2.2.  Child Elements\n   As described under extended namespaces (Section 2.4),\
    \ a presence\n   stanza MAY contain any properly-namespaced child element.\n \
    \  In accordance with the default namespace declaration, by default a\n   presence\
    \ stanza is qualified by the 'jabber:client' or\n   'jabber:server' namespace,\
    \ which defines certain allowable children\n   of presence stanzas.  If the presence\
    \ stanza is of type \"error\", it\n   MUST include an <error/> child; for details,\
    \ see [XMPP-CORE].  If the\n   presence stanza possesses no 'type' attribute,\
    \ it MAY contain any of\n   the following child elements (note that the <status/>\
    \ child MAY be\n   sent in a presence stanza of type \"unavailable\" or, for historical\n\
    \   reasons, \"subscribe\"):\n   1.  <show/>\n   2.  <status/>\n   3.  <priority/>\n"
- title: 2.2.2.1.  Show
  contents:
  - "2.2.2.1.  Show\n   The OPTIONAL <show/> element contains non-human-readable XML\n\
    \   character data that specifies the particular availability status of\n   an\
    \ entity or specific resource.  A presence stanza MUST NOT contain\n   more than\
    \ one <show/> element.  The <show/> element MUST NOT possess\n   any attributes.\
    \  If provided, the XML character data value MUST be\n   one of the following\
    \ (additional availability types could be defined\n   through a properly-namespaced\
    \ child element of the presence stanza):\n   o  away -- The entity or resource\
    \ is temporarily away.\n   o  chat -- The entity or resource is actively interested\
    \ in chatting.\n   o  dnd -- The entity or resource is busy (dnd = \"Do Not Disturb\"\
    ).\n   o  xa -- The entity or resource is away for an extended period (xa =\n\
    \      \"eXtended Away\").\n   If no <show/> element is provided, the entity is\
    \ assumed to be online\n   and available.\n"
- title: 2.2.2.2.  Status
  contents:
  - "2.2.2.2.  Status\n   The OPTIONAL <status/> element contains XML character data\
    \ specifying\n   a natural-language description of availability status.  It is\n\
    \   normally used in conjunction with the show element to provide a\n   detailed\
    \ description of an availability state (e.g., \"In a meeting\").\n   The <status/>\
    \ element MUST NOT possess any attributes, with the\n   exception of the 'xml:lang'\
    \ attribute.  Multiple instances of the\n   <status/> element MAY be included\
    \ but only if each instance possesses\n   an 'xml:lang' attribute with a distinct\
    \ language value.\n"
- title: 2.2.2.3.  Priority
  contents:
  - "2.2.2.3.  Priority\n   The OPTIONAL <priority/> element contains non-human-readable\
    \ XML\n   character data that specifies the priority level of the resource. The\n\
    \   value MUST be an integer between -128 and +127.  A presence stanza\n   MUST\
    \ NOT contain more than one <priority/> element.  The <priority/>\n   element\
    \ MUST NOT possess any attributes.  If no priority is provided,\n   a server SHOULD\
    \ consider the priority to be zero.  For information\n   regarding the semantics\
    \ of priority values in stanza routing within\n   instant messaging and presence\
    \ applications, refer to Server Rules\n   for Handling XML Stanzas (Section 11).\n"
- title: 2.3.  IQ Syntax
  contents:
  - "2.3.  IQ Syntax\n   IQ stanzas provide a structured request-response mechanism.\
    \  The\n   basic semantics of that mechanism (e.g., that the 'id' attribute is\n\
    \   REQUIRED) are defined in [XMPP-CORE], whereas the specific semantics\n   required\
    \ to complete particular use cases are defined in all cases by\n   an extended\
    \ namespace (Section 2.4) (note that the 'jabber:client'\n   and 'jabber:server'\
    \ namespaces do not define any children of IQ\n   stanzas other than the common\
    \ <error/>).  This memo defines two such\n   extended namespaces, one for Roster\
    \ Management (Section 7) and the\n   other for Blocking Communication (Section\
    \ 10); however, an IQ stanza\n   MAY contain structured information qualified\
    \ by any extended\n   namespace.\n"
- title: 2.4.  Extended Namespaces
  contents:
  - "2.4.  Extended Namespaces\n   While the three XML stanza kinds defined in the\
    \ \"jabber:client\" or\n   \"jabber:server\" namespace (along with their attributes\
    \ and child\n   elements) provide a basic level of functionality for messaging\
    \ and\n   presence, XMPP uses XML namespaces to extend the stanzas for the\n \
    \  purpose of providing additional functionality.  Thus a message or\n   presence\
    \ stanza MAY contain one or more optional child elements\n   specifying content\
    \ that extends the meaning of the message (e.g., an\n   XHTML-formatted version\
    \ of the message body), and an IQ stanza MAY\n   contain one such child element.\
    \  This child element MAY have any name\n   and MUST possess an 'xmlns' namespace\
    \ declaration (other than\n   \"jabber:client\", \"jabber:server\", or\n   \"\
    http://etherx.jabber.org/streams\") that defines all data contained\n   within\
    \ the child element.\n   Support for any given extended namespace is OPTIONAL\
    \ on the part of\n   any implementation (aside from the extended namespaces defined\n\
    \   herein).  If an entity does not understand such a namespace, the\n   entity's\
    \ expected behavior depends on whether the entity is (1) the\n   recipient or\
    \ (2) an entity that is routing the stanza to the\n   recipient:\n   Recipient:\
    \ If a recipient receives a stanza that contains a child\n      element it does\
    \ not understand, it SHOULD ignore that specific XML\n      data, i.e., it SHOULD\
    \ not process it or present it to a user or\n      associated application (if\
    \ any).  In particular:\n      *  If an entity receives a message or presence\
    \ stanza that\n         contains XML data qualified by a namespace it does not\n\
    \         understand, the portion of the stanza that is in the unknown\n     \
    \    namespace SHOULD be ignored.\n      *  If an entity receives a message stanza\
    \ whose only child element\n         is qualified by a namespace it does not understand,\
    \ it MUST\n         ignore the entire stanza.\n      *  If an entity receives\
    \ an IQ stanza of type \"get\" or \"set\"\n         containing a child element\
    \ qualified by a namespace it does not\n         understand, the entity SHOULD\
    \ return an IQ stanza of type\n         \"error\" with an error condition of <service-unavailable/>.\n\
    \   Router: If a routing entity (usually a server) handles a stanza that\n   \
    \   contains a child element it does not understand, it SHOULD ignore\n      the\
    \ associated XML data by passing it on untouched to the\n      recipient.\n"
- title: 3.  Session Establishment
  contents:
  - "3.  Session Establishment\n   Most instant messaging and presence applications\
    \ based on XMPP are\n   implemented via a client-server architecture that requires\
    \ a client\n   to establish a session on a server in order to engage in the expected\n\
    \   instant messaging and presence activities.  However, there are\n   several\
    \ pre-conditions that MUST be met before a client can establish\n   an instant\
    \ messaging and presence session.  These are:\n   1.  Stream Authentication --\
    \ a client MUST complete stream\n       authentication as documented in [XMPP-CORE]\
    \ before attempting to\n       establish a session or send any XML stanzas.\n\
    \   2.  Resource Binding -- after completing stream authentication, a\n      \
    \ client MUST bind a resource to the stream so that the client's\n       address\
    \ is of the form <user@domain/resource>, after which the\n       entity is now\
    \ said to be a \"connected resource\" in the\n       terminology of [XMPP-CORE].\n\
    \   If a server supports sessions, it MUST include a <session/> element\n   qualified\
    \ by the 'urn:ietf:params:xml:ns:xmpp-session' namespace in\n   the stream features\
    \ it advertises to a client after the completion of\n   stream authentication\
    \ as defined in [XMPP-CORE]:\n   Server advertises session establishment feature\
    \ to client:\n   <stream:stream\n       xmlns='jabber:client'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       id='c2s_345'\n       from='example.com'\n       version='1.0'>\n   <stream:features>\n\
    \     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>\n     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>\n\
    \   </stream:features>\n   Upon being so informed that session establishment is\
    \ required (and\n   after completing resource binding), the client MUST establish\
    \ a\n   session if it desires to engage in instant messaging and presence\n  \
    \ functionality; it completes this step by sending to the server an IQ\n   stanza\
    \ of type \"set\" containing an empty <session/> child element\n   qualified by\
    \ the 'urn:ietf:params:xml:ns:xmpp-session' namespace:\n   Step 1: Client requests\
    \ session with server:\n   <iq to='example.com'\n       type='set'\n       id='sess_1'>\n\
    \     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>\n   </iq>\n   Step\
    \ 2: Server informs client that session has been created:\n   <iq from='example.com'\n\
    \       type='result'\n       id='sess_1'/>\n   Upon establishing a session, a\
    \ connected resource (in the terminology\n   of [XMPP-CORE]) is said to be an\
    \ \"active resource\".\n   Several error conditions are possible.  For example,\
    \ the server may\n   encounter an internal condition that prevents it from creating\
    \ the\n   session, the username or authorization identity may lack permissions\n\
    \   to create a session, or there may already be an active resource\n   associated\
    \ with a resource identifier of the same name.\n   If the server encounters an\
    \ internal condition that prevents it from\n   creating the session, it MUST return\
    \ an error.\n   Step 2 (alt): Server responds with error (internal server error):\n\
    \   <iq from='example.com' type='error' id='sess_1'>\n     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>\n\
    \     <error type='wait'>\n       <internal-server-error\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   If the username or resource is not allowed to create\
    \ a session, the\n   server MUST return an error (e.g., forbidden).\n   Step 2\
    \ (alt): Server responds with error (username or resource not\n   allowed to create\
    \ session):\n   <iq from='example.com' type='error' id='sess_1'>\n     <session\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-session'/>\n     <error type='auth'>\n  \
    \     <forbidden\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n \
    \    </error>\n   </iq>\n   If there is already an active resource of the same\
    \ name, the server\n   MUST either (1) terminate the active resource and allow\
    \ the\n   newly-requested session, or (2) disallow the newly-requested session\n\
    \   and maintain the active resource.  Which of these the server does is\n   up\
    \ to the implementation, although it is RECOMMENDED to implement\n   case #1.\
    \  In case #1, the server SHOULD send a <conflict/> stream\n   error to the active\
    \ resource, terminate the XML stream and underlying\n   TCP connection for the\
    \ active resource, and return a IQ stanza of\n   type \"result\" (indicating success)\
    \ to the newly-requested session. In\n   case #2, the server SHOULD send a <conflict/>\
    \ stanza error to the\n   newly-requested session but maintain the XML stream\
    \ for that\n   connection so that the newly-requested session has an opportunity\
    \ to\n   negotiate a non-conflicting resource identifier before sending\n   another\
    \ request for session establishment.\n   Step 2 (alt): Server informs existing\
    \ active resource of resource\n   conflict (case #1):\n   <stream:error>\n   \
    \  <conflict xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>\n   </stream:error>\n\
    \   </stream:stream>\n   Step 2 (alt): Server informs newly-requested session\
    \ of resource\n   conflict (case #2):\n   <iq from='example.com' type='error'\
    \ id='sess_1'>\n     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>\n\
    \     <error type='cancel'>\n       <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   After establishing a session, a client SHOULD send\
    \ initial presence\n   and request its roster as described below, although these\
    \ actions are\n   OPTIONAL.\n   Note: Before allowing the creation of instant\
    \ messaging and presence\n   sessions, a server MAY require prior account provisioning.\
    \  Possible\n   methods for account provisioning include account creation by a\
    \ server\n   administrator as well as in-band account registration using the\n\
    \   'jabber:iq:register' namespace; the latter method is out of scope for\n  \
    \ this memo, but is documented in [JEP-0077], published by the Jabber\n   Software\
    \ Foundation [JSF].\n"
- title: 4.  Exchanging Messages
  contents:
  - "4.  Exchanging Messages\n   Exchanging messages is a basic use of XMPP and is\
    \ brought about when\n   a user generates a message stanza that is addressed to\
    \ another\n   entity.  As defined under Server Rules for Handling XML Stanzas\n\
    \   (Section 11), the sender's server is responsible for delivering the\n   message\
    \ to the intended recipient (if the recipient is on the same\n   server) or for\
    \ routing the message to the recipient's server (if the\n   recipient is on a\
    \ different server).\n   For information regarding the syntax of message stanzas\
    \ as well as\n   their defined attributes and child elements, refer to Message\
    \ Syntax\n   (Section 2.1).\n"
- title: 4.1.  Specifying an Intended Recipient
  contents:
  - "4.1.  Specifying an Intended Recipient\n   An instant messaging client SHOULD\
    \ specify an intended recipient for\n   a message by providing the JID of an entity\
    \ other than the sender in\n   the 'to' attribute of the <message/> stanza.  If\
    \ the message is being\n   sent in reply to a message previously received from\
    \ an address of the\n   form <user@domain/resource> (e.g., within the context\
    \ of a chat\n   session), the value of the 'to' address SHOULD be of the form\n\
    \   <user@domain/resource> rather than of the form <user@domain> unless\n   the\
    \ sender has knowledge (via presence) that the intended recipient's\n   resource\
    \ is no longer available.  If the message is being sent\n   outside the context\
    \ of any existing chat session or received message,\n   the value of the 'to'\
    \ address SHOULD be of the form <user@domain>\n   rather than of the form <user@domain/resource>.\n"
- title: 4.2.  Specifying a Message Type
  contents:
  - "4.2.  Specifying a Message Type\n   As noted, it is RECOMMENDED for a message\
    \ stanza to possess a 'type'\n   attribute whose value captures the conversational\
    \ context (if any) of\n   the message (see Type (Section 2.1.1)).\n   The following\
    \ example shows a valid value of the 'type' attribute:\n   Example: A message\
    \ of a defined type:\n   <message\n       to='romeo@example.net'\n       from='juliet@example.com/balcony'\n\
    \       type='chat'\n       xml:lang='en'>\n     <body>Wherefore art thou, Romeo?</body>\n\
    \   </message>\n"
- title: 4.3.  Specifying a Message Body
  contents:
  - "4.3.  Specifying a Message Body\n   A message stanza MAY (and often will) contain\
    \ a child <body/> element\n   whose XML character data specifies the primary meaning\
    \ of the message\n   (see Body (Section 2.1.2.2)).\n   Example: A message with\
    \ a body:\n   <message\n       to='romeo@example.net'\n       from='juliet@example.com/balcony'\n\
    \       type='chat'\n       xml:lang='en'>\n     <body>Wherefore art thou, Romeo?</body>\n\
    \     <body xml:lang='cz'>Pro&#x010D;e&#x017D; jsi ty, Romeo?</body>\n   </message>\n"
- title: 4.4.  Specifying a Message Subject
  contents:
  - "4.4.  Specifying a Message Subject\n   A message stanza MAY contain one or more\
    \ child <subject/> elements\n   specifying the topic of the message (see Subject\
    \ (Section 2.1.2.1)).\n   Example: A message with a subject:\n   <message\n  \
    \     to='romeo@example.net'\n       from='juliet@example.com/balcony'\n     \
    \  type='chat'\n       xml:lang='en'>\n     <subject>I implore you!</subject>\n\
    \     <subject\n         xml:lang='cz'>&#x00DA;p&#x011B;nliv&#x011B; prosim!</subject>\n\
    \     <body>Wherefore art thou, Romeo?</body>\n     <body xml:lang='cz'>Pro&#x010D;e&#x017D;\
    \ jsi ty, Romeo?</body>\n   </message>\n"
- title: 4.5.  Specifying a Conversation Thread
  contents:
  - "4.5.  Specifying a Conversation Thread\n   A message stanza MAY contain a child\
    \ <thread/> element specifying the\n   conversation thread in which the message\
    \ is situated, for the purpose\n   of tracking the conversation (see Thread (Section\
    \ 2.1.2.3)).\n   Example: A threaded conversation:\n   <message\n       to='romeo@example.net/orchard'\n\
    \       from='juliet@example.com/balcony'\n       type='chat'\n       xml:lang='en'>\n\
    \     <body>Art thou not Romeo, and a Montague?</body>\n     <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n\
    \   </message>\n   <message\n       to='juliet@example.com/balcony'\n       from='romeo@example.net/orchard'\n\
    \       type='chat'\n       xml:lang='en'>\n     <body>Neither, fair saint, if\
    \ either thee dislike.</body>\n     <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n\
    \   </message>\n   <message\n       to='romeo@example.net/orchard'\n       from='juliet@example.com/balcony'\n\
    \       type='chat'\n       xml:lang='en'>\n     <body>How cam'st thou hither,\
    \ tell me, and wherefore?</body>\n     <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n\
    \   </message>\n"
- title: 5.  Exchanging Presence Information
  contents:
  - "5.  Exchanging Presence Information\n   Exchanging presence information is made\
    \ relatively straightforward\n   within XMPP by using presence stanzas.  However,\
    \ we see here a\n   contrast to the handling of messages: although a client MAY\
    \ send\n   directed presence information to another entity by including a 'to'\n\
    \   address, normally presence notifications (i.e., presence stanzas with\n  \
    \ no 'type' or of type \"unavailable\" and with no 'to' address) are sent\n  \
    \ from a client to its server and then broadcasted by the server to any\n   entities\
    \ that are subscribed to the presence of the sending entity\n   (in the terminology\
    \ of RFC 2778 [IMP-MODEL], these entities are\n   subscribers).  This broadcast\
    \ model does not apply to\n   subscription-related presence stanzas or presence\
    \ stanzas of type\n   \"error\", but to presence notifications only as defined\
    \ above.  (Note:\n   While presence information MAY be provided on a user's behalf\
    \ by an\n   automated service, normally it is provided by the user's client.)\n\
    \   For information regarding the syntax of presence stanzas as well as\n   their\
    \ defined attributes and child elements, refer to [XMPP-CORE].\n"
- title: 5.1.  Client and Server Presence Responsibilities
  contents:
  - '5.1.  Client and Server Presence Responsibilities

    '
- title: 5.1.1.  Initial Presence
  contents:
  - "5.1.1.  Initial Presence\n   After establishing a session, a client SHOULD send\
    \ initial presence\n   to the server in order to signal its availability for communications.\n\
    \   As defined herein, the initial presence stanza (1) MUST possess no\n   'to'\
    \ address (signalling that it is meant to be broadcasted by the\n   server on\
    \ behalf of the client) and (2) MUST possess no 'type'\n   attribute (signalling\
    \ the user's availability).  After sending\n   initial presence, an active resource\
    \ is said to be an \"available\n   resource\".\n   Upon receiving initial presence\
    \ from a client, the user's server MUST\n   do the following if there is not already\
    \ one or more available\n   resources for the user (if there is already one or\
    \ more available\n   resources for the user, the server obviously does not need\
    \ to send\n   the presence probes, since it already possesses the requisite\n\
    \   information):\n   1.  Send presence probes (i.e., presence stanzas whose 'type'\n\
    \       attribute is set to a value of \"probe\") from the full JID (e.g.,\n \
    \      <user@example.com/resource>) of the user to all contacts to which\n   \
    \    the user is subscribed in order to determine if they are\n       available;\
    \ such contacts are those for which a JID is present in\n       the user's roster\
    \ with the 'subscription' attribute set to a\n       value of \"to\" or \"both\"\
    .  (Note: The user's server MUST NOT send\n       presence probes to contacts\
    \ from which the user is blocking\n       inbound presence notifications, as described\
    \ under Blocking\n       Inbound Presence Notifications (Section 10.10).)\n  \
    \ 2.  Broadcast initial presence from the full JID (e.g.,\n       <user@example.com/resource>)\
    \ of the user to all contacts that are\n       subscribed to the user's presence\
    \ information; such contacts are\n       those for which a JID is present in the\
    \ user's roster with the\n       'subscription' attribute set to a value of \"\
    from\" or \"both\".\n       (Note: The user's server MUST NOT broadcast initial\
    \ presence to\n       contacts to which the user is blocking outbound presence\n\
    \       notifications, as described under Blocking Outbound Presence\n       Notifications\
    \ (Section 10.11).)\n   In addition, the user's server MUST broadcast initial\
    \ presence from\n   the user's new available resource to any of the user's existing\n\
    \   available resources (if any).\n   Upon receiving initial presence from the\
    \ user, the contact's server\n   MUST deliver the user's presence stanza to the\
    \ full JIDs\n   (<contact@example.org/resource>) associated with all of the contact's\n\
    \   available resources, but only if the user is in the contact's roster\n   with\
    \ a subscription state of \"to\" or \"both\" and the contact has not\n   blocked\
    \ inbound presence notifications from the user's bare or full\n   JID (as defined\
    \ under Blocking Inbound Presence Notifications\n   (Section 10.10)).\n   If the\
    \ user's server receives a presence stanza of type \"error\" in\n   response to\
    \ the initial presence that it sent to a contact on behalf\n   of the user, it\
    \ SHOULD NOT send further presence updates to that\n   contact (until and unless\
    \ it receives a presence stanza from the\n   contact).\n"
- title: 5.1.2.  Presence Broadcast
  contents:
  - "5.1.2.  Presence Broadcast\n   After sending initial presence, the user MAY update\
    \ its presence\n   information for broadcasting at any time during its session\
    \ by\n   sending a presence stanza with no 'to' address and either no 'type'\n\
    \   attribute or a 'type' attribute with a value of \"unavailable\". (Note:\n\
    \   A user's client SHOULD NOT send a presence update to broadcast\n   information\
    \ that changes independently of the user's presence and\n   availability.)\n \
    \  If the presence stanza lacks a 'type' attribute (i.e., expresses\n   availability),\
    \ the user's server MUST broadcast the full XML of that\n   presence stanza to\
    \ all contacts (1) that are in the user's roster\n   with a subscription type\
    \ of \"from\" or \"both\", (2) to whom the user\n   has not blocked outbound presence\
    \ notifications, and (3) from whom\n   the server has not received a presence\
    \ error during the user's\n   session (as well as to any of the user's other available\
    \ resources).\n   If the presence stanza has a 'type' attribute set to a value\
    \ of\n   \"unavailable\", the user's server MUST broadcast the full XML of that\n\
    \   presence stanza to all entities that fit the above description, as\n   well\
    \ as to any entities to which the user has sent directed available\n   presence\
    \ during the user's session (if the user has not yet sent\n   directed unavailable\
    \ presence to that entity).\n"
- title: 5.1.3.  Presence Probes
  contents:
  - "5.1.3.  Presence Probes\n   Upon receiving a presence probe from the user, the\
    \ contact's server\n   SHOULD reply as follows:\n   1.  If the user is not in\
    \ the contact's roster with a subscription\n       state of \"From\", \"From +\
    \ Pending Out\", or \"Both\" (as defined\n       under Subscription States (Section\
    \ 9)), the contact's server MUST\n       return a presence stanza of type \"error\"\
    \ in response to the\n       presence probe (however, if a server receives a presence\
    \ probe\n       from a subdomain of the server's hostname or another such trusted\n\
    \       service, it MAY provide presence information about the user to\n     \
    \  that entity).  Specifically:\n       *  if the user is in the contact's roster\
    \ with a subscription\n          state of \"None\", \"None + Pending Out\", or\
    \ \"To\" (or is not in\n          the contact's roster at all), the contact's\
    \ server MUST return\n          a <forbidden/> stanza error in response to the\
    \ presence probe.\n       *  if the user is in the contact's roster with a subscription\n\
    \          state of \"None + Pending In\", \"None + Pending Out/In\", or \"To\n\
    \          + Pending In\", the contact's server MUST return a\n          <not-authorized/>\
    \ stanza error in response to the presence\n          probe.\n   2.  Else, if\
    \ the contact is blocking presence notifications to the\n       user's bare JID\
    \ or full JID (using either a default list or\n       active list as defined under\
    \ Blocking Outbound Presence\n       Notifications (Section 10.11)), the server\
    \ MUST NOT reply to the\n       presence probe.\n   3.  Else, if the contact has\
    \ no available resources, the server MUST\n       either (1) reply to the presence\
    \ probe by sending to the user the\n       full XML of the last presence stanza\
    \ of type \"unavailable\"\n       received by the server from the contact, or\
    \ (2) not reply at all.\n   4.  Else, if the contact has at least one available\
    \ resource, the\n       server MUST reply to the presence probe by sending to\
    \ the user\n       the full XML of the last presence stanza with no 'to' attribute\n\
    \       received by the server from each of the contact's available\n       resources\
    \ (again, subject to privacy lists in force for each\n       session).\n"
- title: 5.1.4.  Directed Presence
  contents:
  - "5.1.4.  Directed Presence\n   A user MAY send directed presence to another entity\
    \ (i.e., a presence\n   stanza with a 'to' attribute whose value is the JID of\
    \ the other\n   entity and with either no 'type' attribute or a 'type' attribute\n\
    \   whose value is \"unavailable\").  There are three possible cases:\n   1. \
    \ If the user sends directed presence to a contact that is in the\n       user's\
    \ roster with a subscription type of \"from\" or \"both\" after\n       having\
    \ sent initial presence and before sending unavailable\n       presence broadcast,\
    \ the user's server MUST route or deliver the\n       full XML of that presence\
    \ stanza (subject to privacy lists) but\n       SHOULD NOT otherwise modify the\
    \ contact's status regarding\n       presence broadcast (i.e., it SHOULD include\
    \ the contact's JID in\n       any subsequent presence broadcasts initiated by\
    \ the user).\n   2.  If the user sends directed presence to an entity that is\
    \ not in\n       the user's roster with a subscription type of \"from\" or \"\
    both\"\n       after having sent initial presence and before sending unavailable\n\
    \       presence broadcast, the user's server MUST route or deliver the\n    \
    \   full XML of that presence stanza to the entity but MUST NOT\n       modify\
    \ the contact's status regarding available presence\n       broadcast (i.e., it\
    \ MUST NOT include the entity's JID in any\n       subsequent broadcasts of available\
    \ presence initiated by the\n       user); however, if the available resource\
    \ from which the user\n       sent the directed presence become unavailable, the\
    \ user's server\n       MUST broadcast that unavailable presence to the entity\
    \ (if the\n       user has not yet sent directed unavailable presence to that\n\
    \       entity).\n   3.  If the user sends directed presence without first sending\
    \ initial\n       presence or after having sent unavailable presence broadcast\n\
    \       (i.e., the resource is active but not available), the user's\n       server\
    \ MUST treat the entities to which the user sends directed\n       presence in\
    \ the same way that it treats the entities listed in\n       case #2 above.\n"
- title: 5.1.5.  Unavailable Presence
  contents:
  - "5.1.5.  Unavailable Presence\n   Before ending its session with a server, a client\
    \ SHOULD gracefully\n   become unavailable by sending a final presence stanza\
    \ that possesses\n   no 'to' attribute and that possesses a 'type' attribute whose\
    \ value\n   is \"unavailable\" (optionally, the final presence stanza MAY contain\n\
    \   one or more <status/> elements specifying the reason why the user is\n   no\
    \ longer available).  However, the user's server MUST NOT depend on\n   receiving\
    \ final presence from an available resource, since the\n   resource may become\
    \ unavailable unexpectedly or may be timed out by\n   the server.  If one of the\
    \ user's resources becomes unavailable for\n   any reason (either gracefully or\
    \ ungracefully), the user's server\n   MUST broadcast unavailable presence to\
    \ all contacts (1) that are in\n   the user's roster with a subscription type\
    \ of \"from\" or \"both\", (2)\n   to whom the user has not blocked outbound presence,\
    \ and (3) from whom\n   the server has not received a presence error during the\
    \ user's\n   session; the user's server MUST also send that unavailable presence\n\
    \   stanza to any of the user's other available resources, as well as to\n   any\
    \ entities to which the user has sent directed presence during the\n   user's\
    \ session for that resource (if the user has not yet sent\n   directed unavailable\
    \ presence to that entity).  Any presence stanza\n   with no 'type' attribute\
    \ and no 'to' attribute that is sent after\n   sending directed unavailable presence\
    \ or broadcasted unavailable\n   presence MUST be broadcasted by the server to\
    \ all subscribers.\n"
- title: 5.1.6.  Presence Subscriptions
  contents:
  - "5.1.6.  Presence Subscriptions\n   A subscription request is a presence stanza\
    \ whose 'type' attribute\n   has a value of \"subscribe\".  If the subscription\
    \ request is being\n   sent to an instant messaging contact, the JID supplied\
    \ in the 'to'\n   attribute SHOULD be of the form <contact@example.org> rather\
    \ than\n   <contact@example.org/resource>, since the desired result is normally\n\
    \   for the user to receive presence from all of the contact's resources,\n  \
    \ not merely the particular resource specified in the 'to' attribute.\n   A user's\
    \ server MUST NOT automatically approve subscription requests\n   on the user's\
    \ behalf.  All subscription requests MUST be directed to\n   the user's client,\
    \ specifically to one or more available resources\n   associated with the user.\
    \  If there is no available resource\n   associated with the user when the subscription\
    \ request is received by\n   the user's server, the user's server MUST keep a\
    \ record of the\n   subscription request and deliver the request when the user\
    \ next\n   creates an available resource, until the user either approves or\n\
    \   denies the request.  If there is more than one available resource\n   associated\
    \ with the user when the subscription request is received by\n   the user's server,\
    \ the user's server MUST broadcast that subscription\n   request to all available\
    \ resources in accordance with Server Rules\n   for Handling XML Stanzas (Section\
    \ 11).  (Note: If an active resource\n   has not provided initial presence, the\
    \ server MUST NOT consider it to\n   be available and therefore MUST NOT send\
    \ subscription requests to\n   it.)   However, if the user receives a presence\
    \ stanza of type\n   \"subscribe\" from a contact to whom the user has already\
    \ granted\n   permission to see the user's presence information (e.g., in cases\n\
    \   when the contact is seeking to resynchronize subscription states),\n   the\
    \ user's server SHOULD auto-reply on behalf of the user.  In\n   addition, the\
    \ user's server MAY choose to re-send an unapproved\n   pending subscription request\
    \ to the contact based on an\n   implementation-specific algorithm (e.g., whenever\
    \ a new resource\n   becomes available for the user, or after a certain amount\
    \ of time has\n   elapsed); this helps to recover from transient, silent errors\
    \ that\n   may have occurred in relation to the original subscription request.\n"
- title: 5.2.  Specifying Availability Status
  contents:
  - "5.2.  Specifying Availability Status\n   A client MAY provide further information\
    \ about its availability\n   status by using the <show/> element (see Show (Section\
    \ 2.2.2.1)).\n   Example: Availability status:\n   <presence>\n     <show>dnd</show>\n\
    \   </presence>\n"
- title: 5.3.  Specifying Detailed Status Information
  contents:
  - "5.3.  Specifying Detailed Status Information\n   In conjunction with the <show/>\
    \ element, a client MAY provide\n   detailed status information by using the <status/>\
    \ element (see\n   Status (Section 2.2.2.2)).\n   Example: Detailed status information:\n\
    \   <presence xml:lang='en'>\n     <show>dnd</show>\n     <status>Wooing Juliet</status>\n\
    \     <status xml:lang='cz'>Ja dvo&#x0159;&#x00ED;m Juliet</status>\n   </presence>\n"
- title: 5.4.  Specifying Presence Priority
  contents:
  - "5.4.  Specifying Presence Priority\n   A client MAY provide a priority for its\
    \ resource by using the\n   <priority/> element (see Priority (Section 2.2.2.3)).\n\
    \   Example: Presence priority:\n   <presence xml:lang='en'>\n     <show>dnd</show>\n\
    \     <status>Wooing Juliet</status>\n     <status xml:lang='cz'>Ja dvo&#x0159;&#x00ED;m\
    \ Juliet</status>\n     <priority>1</priority>\n   </presence>\n"
- title: 5.5.  Presence Examples
  contents:
  - "5.5.  Presence Examples\n   The examples in this section illustrate the presence-related\n\
    \   protocols described above.  The user is romeo@example.net, he has an\n   available\
    \ resource whose resource identifier is \"orchard\", and he has\n   the following\
    \ individuals in his roster:\n   o  juliet@example.com (subscription=\"both\"\
    \ and she has two available\n      resources, one whose resource is \"chamber\"\
    \ and another whose\n      resource is \"balcony\")\n   o  benvolio@example.org\
    \ (subscription=\"to\")\n   o  mercutio@example.org (subscription=\"from\")\n\
    \   Example 1: User sends initial presence:\n   <presence/>\n   Example 2: User's\
    \ server sends presence probes to contacts with\n   subscription=\"to\" and subscription=\"\
    both\" on behalf of the user's\n   available resource:\n   <presence\n       type='probe'\n\
    \       from='romeo@example.net/orchard'\n       to='juliet@example.com'/>\n \
    \  <presence\n       type='probe'\n       from='romeo@example.net/orchard'\n \
    \      to='benvolio@example.org'/>\n   Example 3: User's server sends initial\
    \ presence to contacts with\n   subscription=\"from\" and subscription=\"both\"\
    \ on behalf of the user's\n   available resource:\n   <presence\n       from='romeo@example.net/orchard'\n\
    \       to='juliet@example.com'/>\n   <presence\n       from='romeo@example.net/orchard'\n\
    \       to='mercutio@example.org'/>\n   Example 4: Contacts' servers reply to\
    \ presence probe on behalf of all\n   available resources:\n   <presence\n   \
    \    from='juliet@example.com/balcony'\n       to='romeo@example.net/orchard'\n\
    \       xml:lang='en'>\n     <show>away</show>\n     <status>be right back</status>\n\
    \     <priority>0</priority>\n   </presence>\n   <presence\n       from='juliet@example.com/chamber'\n\
    \       to='romeo@example.net/orchard'>\n     <priority>1</priority>\n   </presence>\n\
    \   <presence\n       from='benvolio@example.org/pda'\n       to='romeo@example.net/orchard'\n\
    \       xml:lang='en'>\n     <show>dnd</show>\n     <status>gallivanting</status>\n\
    \   </presence>\n   Example 5: Contacts' servers deliver user's initial presence\
    \ to all\n   available resources or return error to user:\n   <presence\n    \
    \   from='romeo@example.net/orchard'\n       to='juliet@example.com/chamber'/>\n\
    \   <presence\n       from='romeo@example.net/orchard'\n       to='juliet@example.com/balcony'/>\n\
    \   <presence\n       type='error'\n       from='mercutio@example.org'\n     \
    \  to='romeo@example.net/orchard'>\n     <error type='cancel'>\n       <gone xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </presence>\n   Example 6: User sends directed presence to\
    \ another user not in his\n   roster:\n   <presence\n       from='romeo@example.net/orchard'\n\
    \       to='nurse@example.com'\n       xml:lang='en'>\n     <show>dnd</show>\n\
    \     <status>courting Juliet</status>\n     <priority>0</priority>\n   </presence>\n\
    \   Example 7: User sends updated available presence information for\n   broadcasting:\n\
    \   <presence xml:lang='en'>\n     <show>away</show>\n     <status>I shall return!</status>\n\
    \     <priority>1</priority>\n   </presence>\n   Example 8: User's server broadcasts\
    \ updated presence information only\n   to one contact (not those from whom an\
    \ error was received or to whom\n   the user sent directed presence):\n   <presence\n\
    \       from='romeo@example.net/orchard'\n       to='juliet@example.com'\n   \
    \    xml:lang='en'>\n     <show>away</show>\n     <status>I shall return!</status>\n\
    \     <priority>1</priority>\n   </presence>\n   Example 9: Contact's server delivers\
    \ updated presence information to\n   all of the contact's available resources:\n\
    \   [to \"balcony\" resource...]\n   <presence\n       from='romeo@example.net/orchard'\n\
    \       to='juliet@example.com'\n       xml:lang='en'>\n     <show>away</show>\n\
    \     <status>I shall return!</status>\n     <priority>1</priority>\n   </presence>\n\
    \   [to \"chamber\" resource...]\n   <presence\n       from='romeo@example.net/orchard'\n\
    \       to='juliet@example.com'\n       xml:lang='en'>\n     <show>away</show>\n\
    \     <status>I shall return!</status>\n     <priority>1</priority>\n   </presence>\n\
    \   Example 10: One of the contact's resources broadcasts final presence:\n  \
    \ <presence from='juliet@example.com/balcony' type='unavailable'/>\n   Example\
    \ 11: Contact's server sends unavailable presence information\n   to user:\n \
    \  <presence\n       type='unavailable'\n       from='juliet@example.com/balcony'\n\
    \       to='romeo@example.net/orchard'/>\n   Example 12: User sends final presence:\n\
    \   <presence from='romeo@example.net/orchard'\n             type='unavailable'\n\
    \             xml:lang='en'>\n     <status>gone home</status>\n   </presence>\n\
    \   Example 13: User's server broadcasts unavailable presence information\n  \
    \ to contact as well as to the person to whom the user sent directed\n   presence:\n\
    \   <presence\n       type='unavailable'\n       from='romeo@example.net/orchard'\n\
    \       to='juliet@example.com'\n       xml:lang='en'>\n     <status>gone home</status>\n\
    \   </presence>\n   <presence\n       from='romeo@example.net/orchard'\n     \
    \  to='nurse@example.com'\n       xml:lang='en'>\n     <status>gone home</status>\n\
    \   </presence>\n"
- title: 6.  Managing Subscriptions
  contents:
  - "6.  Managing Subscriptions\n   In order to protect the privacy of instant messaging\
    \ users and any\n   other entities, presence and availability information is disclosed\n\
    \   only to other entities that the user has approved.  When a user has\n   agreed\
    \ that another entity may view its presence, the entity is said\n   to have a\
    \ subscription to the user's presence information.  A\n   subscription lasts across\
    \ sessions; indeed, it lasts until the\n   subscriber unsubscribes or the subscribee\
    \ cancels the\n   previously-granted subscription.  Subscriptions are managed\
    \ within\n   XMPP by sending presence stanzas containing specially-defined\n \
    \  attributes.\n   Note: There are important interactions between subscriptions\
    \ and\n   rosters; these are defined under Integration of Roster Items and\n \
    \  Presence Subscriptions (Section 8), and the reader must refer to that\n   section\
    \ for a complete understanding of presence subscriptions.\n"
- title: 6.1.  Requesting a Subscription
  contents:
  - "6.1.  Requesting a Subscription\n   A request to subscribe to another entity's\
    \ presence is made by\n   sending a presence stanza of type \"subscribe\".\n \
    \  Example: Sending a subscription request:\n   <presence to='juliet@example.com'\
    \ type='subscribe'/>\n   For client and server responsibilities regarding presence\n\
    \   subscription requests, refer to Presence Subscriptions (Section\n   5.1.6).\n"
- title: 6.2.  Handling a Subscription Request
  contents:
  - "6.2.  Handling a Subscription Request\n   When a client receives a subscription\
    \ request from another entity, it\n   MUST either approve the request by sending\
    \ a presence stanza of type\n   \"subscribed\" or refuse the request by sending\
    \ a presence stanza of\n   type \"unsubscribed\".\n   Example: Approving a subscription\
    \ request:\n   <presence to='romeo@example.net' type='subscribed'/>\n   Example:\
    \ Refusing a presence subscription request:\n   <presence to='romeo@example.net'\
    \ type='unsubscribed'/>\n"
- title: 6.3.  Cancelling a Subscription from Another Entity
  contents:
  - "6.3.  Cancelling a Subscription from Another Entity\n   If a user would like\
    \ to cancel a previously-granted subscription\n   request, it sends a presence\
    \ stanza of type \"unsubscribed\".\n   Example: Cancelling a previously granted\
    \ subscription request:\n   <presence to='romeo@example.net' type='unsubscribed'/>\n"
- title: 6.4.  Unsubscribing from Another Entity's Presence
  contents:
  - "6.4.  Unsubscribing from Another Entity's Presence\n   If a user would like to\
    \ unsubscribe from the presence of another\n   entity, it sends a presence stanza\
    \ of type \"unsubscribe\".\n   Example: Unsubscribing from an entity's presence:\n\
    \   <presence to='juliet@example.com' type='unsubscribe'/>\n"
- title: 7.  Roster Management
  contents:
  - "7.  Roster Management\n   In XMPP, one's contact list is called a roster, which\
    \ consists of any\n   number of specific roster items, each roster item being\
    \ identified by\n   a unique JID (usually of the form <contact@domain>).  A user's\
    \ roster\n   is stored by the user's server on the user's behalf so that the user\n\
    \   may access roster information from any resource.\n   Note: There are important\
    \ interactions between rosters and\n   subscriptions; these are defined under\
    \ Integration of Roster Items\n   and Presence Subscriptions (Section 8), and\
    \ the reader must refer to\n   that section for a complete understanding of roster\
    \ management.\n"
- title: 7.1.  Syntax and Semantics
  contents:
  - "7.1.  Syntax and Semantics\n   Rosters are managed using IQ stanzas, specifically\
    \ by means of a\n   <query/> child element qualified by the 'jabber:iq:roster'\
    \ namespace.\n   The <query/> element MAY contain one or more <item/> children,\
    \ each\n   describing a unique roster item or \"contact\".\n   The \"key\" or\
    \ unique identifier for each roster item is a JID,\n   encapsulated in the 'jid'\
    \ attribute of the <item/> element (which is\n   REQUIRED).  The value of the\
    \ 'jid' attribute SHOULD be of the form\n   <user@domain> if the item is associated\
    \ with another (human) instant\n   messaging user.\n   The state of the presence\
    \ subscription in relation to a roster item\n   is captured in the 'subscription'\
    \ attribute of the <item/> element.\n   Allowable values for this attribute are:\n\
    \   o  \"none\" -- the user does not have a subscription to the contact's\n  \
    \    presence information, and the contact does not have a subscription\n    \
    \  to the user's presence information\n   o  \"to\" -- the user has a subscription\
    \ to the contact's presence\n      information, but the contact does not have\
    \ a subscription to the\n      user's presence information\n   o  \"from\" --\
    \ the contact has a subscription to the user's presence\n      information, but\
    \ the user does not have a subscription to the\n      contact's presence information\n\
    \   o  \"both\" -- both the user and the contact have subscriptions to each\n\
    \      other's presence information\n   Each <item/> element MAY contain a 'name'\
    \ attribute, which sets the\n   \"nickname\" to be associated with the JID, as\
    \ determined by the user\n   (not the contact).  The value of the 'name' attribute\
    \ is opaque.\n   Each <item/> element MAY contain one or more <group/> child elements,\n\
    \   for use in collecting roster items into various categories.  The XML\n   character\
    \ data of the <group/> element is opaque.\n"
- title: 7.2.  Business Rules
  contents:
  - "7.2.  Business Rules\n   A server MUST ignore any 'to' address on a roster \"\
    set\", and MUST\n   treat any roster \"set\" as applying to the sender.  For added\
    \ safety,\n   a client SHOULD check the \"from\" address of a \"roster push\"\
    \ (incoming\n   IQ of type \"set\" containing a roster item) to ensure that it\
    \ is from\n   a trusted source; specifically, the stanza MUST either have no 'from'\n\
    \   attribute (i.e., implicitly from the server) or have a 'from'\n   attribute\
    \ whose value matches the user's bare JID (of the form\n   <user@domain>) or full\
    \ JID (of the form <user@domain/resource>);\n   otherwise, the client SHOULD ignore\
    \ the \"roster push\".\n"
- title: 7.3.  Retrieving One's Roster on Login
  contents:
  - "7.3.  Retrieving One's Roster on Login\n   Upon connecting to the server and\
    \ becoming an active resource, a\n   client SHOULD request the roster before sending\
    \ initial presence\n   (however, because receiving the roster may not be desirable\
    \ for all\n   resources, e.g., a connection with limited bandwidth, the client's\n\
    \   request for the roster is OPTIONAL).  If an available resource does\n   not\
    \ request the roster during a session, the server MUST NOT send it\n   presence\
    \ subscriptions and associated roster updates.\n   Example: Client requests current\
    \ roster from server:\n   <iq from='juliet@example.com/balcony' type='get' id='roster_1'>\n\
    \     <query xmlns='jabber:iq:roster'/>\n   </iq>\n   Example: Client receives\
    \ roster from server:\n   <iq to='juliet@example.com/balcony' type='result' id='roster_1'>\n\
    \     <query xmlns='jabber:iq:roster'>\n       <item jid='romeo@example.net'\n\
    \             name='Romeo'\n             subscription='both'>\n         <group>Friends</group>\n\
    \       </item>\n       <item jid='mercutio@example.org'\n             name='Mercutio'\n\
    \             subscription='from'>\n         <group>Friends</group>\n       </item>\n\
    \       <item jid='benvolio@example.org'\n             name='Benvolio'\n     \
    \        subscription='both'>\n         <group>Friends</group>\n       </item>\n\
    \     </query>\n   </iq>\n"
- title: 7.4.  Adding a Roster Item
  contents:
  - "7.4.  Adding a Roster Item\n   At any time, a user MAY add an item to his or\
    \ her roster.\n   Example: Client adds a new item:\n   <iq from='juliet@example.com/balcony'\
    \ type='set' id='roster_2'>\n     <query xmlns='jabber:iq:roster'>\n       <item\
    \ jid='nurse@example.com'\n             name='Nurse'>\n         <group>Servants</group>\n\
    \       </item>\n     </query>\n   </iq>\n   The server MUST update the roster\
    \ information in persistent storage,\n   and also push the change out to all of\
    \ the user's available resources\n   that have requested the roster.  This \"\
    roster push\" consists of an IQ\n   stanza of type \"set\" from the server to\
    \ the client and enables all\n   available resources to remain in sync with the\
    \ server-based roster\n   information.\n   Example: Server (1) pushes the updated\
    \ roster information to all\n   available resources that have requested the roster\
    \ and (2) replies\n   with an IQ result to the sending resource:\n   <iq to='juliet@example.com/balcony'\n\
    \       type='set'\n       id='a78b4q6ha463'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item jid='nurse@example.com'\n             name='Nurse'\n           \
    \  subscription='none'>\n         <group>Servants</group>\n       </item>\n  \
    \   </query>\n   </iq>\n   <iq to='juliet@example.com/chamber'\n       type='set'\n\
    \       id='a78b4q6ha464'>\n     <query xmlns='jabber:iq:roster'>\n       <item\
    \ jid='nurse@example.com'\n             name='Nurse'\n             subscription='none'>\n\
    \         <group>Servants</group>\n       </item>\n     </query>\n   </iq>\n \
    \  <iq to='juliet@example.com/balcony' type='result' id='roster_2'/>\n   As required\
    \ by the semantics of the IQ stanza kind as defined in\n   [XMPP-CORE], each resource\
    \ that received the roster push MUST reply\n   with an IQ stanza of type \"result\"\
    \ (or \"error\").\n   Example: Resources reply with an IQ result to the server:\n\
    \   <iq from='juliet@example.com/balcony'\n       to='example.com'\n       type='result'\n\
    \       id='a78b4q6ha463'/>\n   <iq from='juliet@example.com/chamber'\n      \
    \ to='example.com'\n       type='result'\n       id='a78b4q6ha464'/>\n"
- title: 7.5.  Updating a Roster Item
  contents:
  - "7.5.  Updating a Roster Item\n   Updating an existing roster item (e.g., changing\
    \ the group) is done\n   in the same way as adding a new roster item, i.e., by\
    \ sending the\n   roster item in an IQ set to the server.\n   Example: User updates\
    \ roster item (added group):\n   <iq from='juliet@example.com/chamber' type='set'\
    \ id='roster_3'>\n     <query xmlns='jabber:iq:roster'>\n       <item jid='romeo@example.net'\n\
    \             name='Romeo'\n             subscription='both'>\n         <group>Friends</group>\n\
    \         <group>Lovers</group>\n       </item>\n     </query>\n   </iq>\n   As\
    \ with adding a roster item, when updating a roster item the server\n   MUST update\
    \ the roster information in persistent storage, and also\n   initiate a roster\
    \ push to all of the user's available resources that\n   have requested the roster.\n"
- title: 7.6.  Deleting a Roster Item
  contents:
  - "7.6.  Deleting a Roster Item\n   At any time, a user MAY delete an item from\
    \ his or her roster by\n   sending an IQ set to the server and making sure that\
    \ the value of the\n   'subscription' attribute is \"remove\" (a compliant server\
    \ MUST ignore\n   any other values of the 'subscription' attribute when received\
    \ from a\n   client).\n   Example: Client removes an item:\n   <iq from='juliet@example.com/balcony'\
    \ type='set' id='roster_4'>\n     <query xmlns='jabber:iq:roster'>\n       <item\
    \ jid='nurse@example.com' subscription='remove'/>\n     </query>\n   </iq>\n \
    \  As with adding a roster item, when deleting a roster item the server\n   MUST\
    \ update the roster information in persistent storage, initiate a\n   roster push\
    \ to all of the user's available resources that have\n   requested the roster\
    \ (with the 'subscription' attribute set to a\n   value of \"remove\"), and send\
    \ an IQ result to the initiating resource.\n   For further information about the\
    \ implications of this command, see\n   Removing a Roster Item and Cancelling\
    \ All Subscriptions (Section\n   8.6).\n"
- title: 8.  Integration of Roster Items and Presence Subscriptions
  contents:
  - '8.  Integration of Roster Items and Presence Subscriptions

    '
- title: 8.1.  Overview
  contents:
  - "8.1.  Overview\n   Some level of integration between roster items and presence\n\
    \   subscriptions is normally expected by an instant messaging user\n   regarding\
    \ the user's subscriptions to and from other contacts.  This\n   section describes\
    \ the level of integration that MUST be supported\n   within XMPP instant messaging\
    \ applications.\n   There are four primary subscription states:\n   o  None --\
    \ the user does not have a subscription to the contact's\n      presence information,\
    \ and the contact does not have a subscription\n      to the user's presence information\n\
    \   o  To -- the user has a subscription to the contact's presence\n      information,\
    \ but the contact does not have a subscription to the\n      user's presence information\n\
    \   o  From -- the contact has a subscription to the user's presence\n      information,\
    \ but the user does not have a subscription to the\n      contact's presence information\n\
    \   o  Both -- both the user and the contact have subscriptions to each\n    \
    \  other's presence information (i.e., the union of 'from' and 'to')\n   Each\
    \ of these states is reflected in the roster of both the user and\n   the contact,\
    \ thus resulting in durable subscription states.\n   Narrative explanations of\
    \ how these subscription states interact with\n   roster items in order to complete\
    \ certain defined use cases are\n   provided in the following sub-sections.  Full\
    \ details regarding\n   server and client handling of all subscription states\
    \ (including\n   pending states between the primary states listed above) is provided\n\
    \   in Subscription States (Section 9).\n   The server MUST NOT send presence\
    \ subscription requests or roster\n   pushes to unavailable resources, nor to\
    \ available resources that have\n   not requested the roster.\n   The 'from' and\
    \ 'to' addresses are OPTIONAL in roster pushes; if\n   included, their values\
    \ SHOULD be the full JID of the resource for\n   that session.  A client MUST\
    \ acknowledge each roster push with an IQ\n   stanza of type \"result\" (for the\
    \ sake of brevity, these stanzas are\n   not shown in the following examples but\
    \ are required by the IQ\n   semantics defined in [XMPP-CORE]).\n"
- title: 8.2.  User Subscribes to Contact
  contents:
  - "8.2.  User Subscribes to Contact\n   The process by which a user subscribes to\
    \ a contact, including the\n   interaction between roster items and subscription\
    \ states, is\n   described below.\n   1.  In preparation for being able to render\
    \ the contact in the user's\n       client interface and for the server to keep\
    \ track of the\n       subscription, the user's client SHOULD perform a \"roster\
    \ set\" for\n       the new roster item.  This request consists of sending an\
    \ IQ\n       stanza of type='set' containing a <query/> element qualified by\n\
    \       the 'jabber:iq:roster' namespace, which in turn contains an\n       <item/>\
    \ element that defines the new roster item; the <item/>\n       element MUST possess\
    \ a 'jid' attribute, MAY possess a 'name'\n       attribute, MUST NOT possess\
    \ a 'subscription' attribute, and MAY\n       contain one or more <group/> child\
    \ elements:\n   <iq type='set' id='set1'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='contact@example.org'\n           name='MyContact'>\n\
    \         <group>MyBuddies</group>\n       </item>\n     </query>\n   </iq>\n\
    \   2.  As a result, the user's server (1) MUST initiate a roster push\n     \
    \  for the new roster item to all available resources associated\n       with\
    \ this user that have requested the roster, setting the\n       'subscription'\
    \ attribute to a value of \"none\"; and (2) MUST reply\n       to the sending\
    \ resource with an IQ result indicating the success\n       of the roster set:\n\
    \   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n       <item\n   \
    \        jid='contact@example.org'\n           subscription='none'\n         \
    \  name='MyContact'>\n         <group>MyBuddies</group>\n       </item>\n    \
    \ </query>\n   </iq>\n   <iq type='result' id='set1'/>\n   3.  If the user wants\
    \ to request a subscription to the contact's\n       presence information, the\
    \ user's client MUST send a presence\n       stanza of type='subscribe' to the\
    \ contact:\n   <presence to='contact@example.org' type='subscribe'/>\n   4.  As\
    \ a result, the user's server MUST initiate a second roster push\n       to all\
    \ of the user's available resources that have requested the\n       roster, setting\
    \ the contact to the pending sub-state of the\n       'none' subscription state;\
    \ this pending sub-state is denoted by\n       the inclusion of the ask='subscribe'\
    \ attribute in the roster\n       item:\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='contact@example.org'\n           subscription='none'\n\
    \           ask='subscribe'\n           name='MyContact'>\n         <group>MyBuddies</group>\n\
    \       </item>\n     </query>\n   </iq>\n   Note: If the user did not create\
    \ a roster item before sending the\n   subscription request, the server MUST now\
    \ create one on behalf of the\n   user, then send a roster push to all of the\
    \ user's available\n   resources that have requested the roster, absent the 'name'\
    \ attribute\n   and the <group/> child shown above.\n   5.  The user's server\
    \ MUST also stamp the presence stanza of type\n       \"subscribe\" with the user's\
    \ bare JID (i.e., <user@example.com>)\n       as the 'from' address (if the user\
    \ provided a 'from' address set\n       to the user's full JID, the server SHOULD\
    \ remove the resource\n       identifier).  If the contact is served by a different\
    \ host than\n       the user, the user's server MUST route the presence stanza\
    \ to the\n       contact's server for delivery to the contact (this case is\n\
    \       assumed throughout; however, if the contact is served by the same\n  \
    \     host, then the server can simply deliver the presence stanza\n       directly):\n\
    \   <presence\n       from='user@example.com'\n       to='contact@example.org'\n\
    \       type='subscribe'/>\n   Note: If the user's server receives a presence\
    \ stanza of type \"error\"\n   from the contact's server, it MUST deliver the\
    \ error stanza to the\n   user, whose client MAY determine that the error is in\
    \ response to the\n   outgoing presence stanza of type \"subscribe\" it sent previously\n\
    \   (e.g., by tracking an 'id' attribute) and then choose to resend the\n   \"\
    subscribe\" request or revert the roster to its previous state by\n   sending\
    \ a presence stanza of type \"unsubscribe\" to the contact.\n   6.  Upon receiving\
    \ the presence stanza of type \"subscribe\" addressed\n       to the contact,\
    \ the contact's server MUST determine if there is\n       at least one available\
    \ resource from which the contact has\n       requested the roster.  If so, it\
    \ MUST deliver the subscription\n       request to the contact (if not, the contact's\
    \ server MUST store\n       the subscription request offline for delivery when\
    \ this condition\n       is next met; normally this is done by adding a roster\
    \ item for\n       the contact to the user's roster, with a state of \"None +\
    \ Pending\n       In\" as defined under Subscription States (Section 9), however\
    \ a\n       server SHOULD NOT push or deliver roster items in that state to\n\
    \       the contact).  No matter when the subscription request is\n       delivered,\
    \ the contact must decide whether or not to approve it\n       (subject to the\
    \ contact's configured preferences, the contact's\n       client MAY approve or\
    \ refuse the subscription request without\n       presenting it to the contact).\
    \  Here we assume the \"happy path\"\n       that the contact approves the subscription\
    \ request (the alternate\n       flow of declining the subscription request is\
    \ defined in Section\n       8.2.1).  In this case, the contact's client (1) SHOULD\
    \ perform a\n       roster set specifying the desired nickname and group for the\
    \ user\n       (if any); and (2) MUST send a presence stanza of type\n       \"\
    subscribed\" to the user in order to approve the subscription\n       request.\n\
    \   <iq type='set' id='set2'>\n     <query xmlns='jabber:iq:roster'>\n       <item\n\
    \           jid='user@example.com'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence to='user@example.com' type='subscribed'/>\n\
    \   7.  As a result, the contact's server (1) MUST initiate a roster push\n  \
    \     to all available resources associated with the contact that have\n     \
    \  requested the roster, containing a roster item for the user with\n       the\
    \ subscription state set to 'from' (the server MUST send this\n       even if\
    \ the contact did not perform a roster set); (2) MUST\n       return an IQ result\
    \ to the sending resource indicating the\n       success of the roster set; (3)\
    \ MUST route the presence stanza of\n       type \"subscribed\" to the user, first\
    \ stamping the 'from' address\n       as the bare JID (<contact@example.org>)\
    \ of the contact; and (4)\n       MUST send available presence from all of the\
    \ contact's available\n       resources to the user:\n   <iq type='set' to='contact@example.org/resource'>\n\
    \     <query xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='from'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <iq type='result' to='contact@example.org/resource'\
    \ id='set2'/>\n   <presence\n       from='contact@example.org'\n       to='user@example.com'\n\
    \       type='subscribed'/>\n   <presence\n       from='contact@example.org/resource'\n\
    \       to='user@example.com'/>\n   Note: If the contact's server receives a presence\
    \ stanza of type\n   \"error\" from the user's server, it MUST deliver the error\
    \ stanza to\n   the contact, whose client MAY determine that the error is in response\n\
    \   to the outgoing presence stanza of type \"subscribed\" it sent\n   previously\
    \ (e.g., by tracking an 'id' attribute) and then choose to\n   resend the \"subscribed\"\
    \ notification or revert the roster to its\n   previous state by sending a presence\
    \ stanza of type \"unsubscribed\" to\n   the user.\n   8.  Upon receiving the\
    \ presence stanza of type \"subscribed\" addressed\n       to the user, the user's\
    \ server MUST first verify that the contact\n       is in the user's roster with\
    \ either of the following states: (a)\n       subscription='none' and ask='subscribe'\
    \ or (b)\n       subscription='from' and ask='subscribe'.  If the contact is not\n\
    \       in the user's roster with either of those states, the user's\n       server\
    \ MUST silently ignore the presence stanza of type\n       \"subscribed\" (i.e.,\
    \ it MUST NOT route it to the user, modify the\n       user's roster, or generate\
    \ a roster push to the user's available\n       resources).  If the contact is\
    \ in the user's roster with either\n       of those states, the user's server\
    \ (1) MUST deliver the presence\n       stanza of type \"subscribed\" from the\
    \ contact to the user; (2)\n       MUST initiate a roster push to all of the user's\
    \ available\n       resources that have requested the roster, containing an updated\n\
    \       roster item for the contact with the 'subscription' attribute set\n  \
    \     to a value of \"to\"; and (3) MUST deliver the available presence\n    \
    \   stanza received from each of the contact's available resources to\n      \
    \ each of the user's available resources:\n   <presence\n       to='user@example.com'\n\
    \       from='contact@example.org'\n       type='subscribed'/>\n   <iq type='set'>\n\
    \     <query xmlns='jabber:iq:roster'>\n       <item\n           jid='contact@example.org'\n\
    \           subscription='to'\n           name='MyContact'>\n         <group>MyBuddies</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence\n       from='contact@example.org/resource'\n\
    \       to='user@example.com/resource'/>\n   9.  Upon receiving the presence stanza\
    \ of type \"subscribed\", the user\n       SHOULD acknowledge receipt of that\
    \ subscription state\n       notification through either \"affirming\" it by sending\
    \ a presence\n       stanza of type \"subscribe\" to the contact or \"denying\"\
    \ it by\n       sending a presence stanza of type \"unsubscribe\" to the contact;\n\
    \       this step does not necessarily affect the subscription state (see\n  \
    \     Subscription States (Section 9) for details), but instead lets\n       the\
    \ user's server know that it MUST no longer send notification\n       of the subscription\
    \ state change to the user (see Section 9.4).\n   From the perspective of the\
    \ user, there now exists a subscription to\n   the contact's presence information;\
    \ from the perspective of the\n   contact, there now exists a subscription from\
    \ the user.\n"
- title: '8.2.1.  Alternate Flow: Contact Declines Subscription Request'
  contents:
  - "8.2.1.  Alternate Flow: Contact Declines Subscription Request\n   The above activity\
    \ flow represents the \"happy path\" regarding the\n   user's subscription request\
    \ to the contact.  The main alternate flow\n   occurs if the contact refuses the\
    \ user's subscription request, as\n   described below.\n   1.  If the contact\
    \ wants to refuse the request, the contact's client\n       MUST send a presence\
    \ stanza of type \"unsubscribed\" to the user\n       (instead of the presence\
    \ stanza of type \"subscribed\" sent in Step\n       6 of Section 8.2):\n   <presence\
    \ to='user@example.com' type='unsubscribed'/>\n   2.  As a result, the contact's\
    \ server MUST route the presence stanza\n       of type \"unsubscribed\" to the\
    \ user, first stamping the 'from'\n       address as the bare JID (<contact@example.org>)\
    \ of the contact:\n   <presence\n       from='contact@example.org'\n       to='user@example.com'\n\
    \       type='unsubscribed'/>\n   Note: If the contact's server previously added\
    \ the user to the\n   contact's roster for tracking purposes, it MUST remove the\
    \ relevant\n   item at this time.\n   3.  Upon receiving the presence stanza of\
    \ type \"unsubscribed\"\n       addressed to the user, the user's server (1) MUST\
    \ deliver that\n       presence stanza to the user and (2) MUST initiate a roster\
    \ push\n       to all of the user's available resources that have requested the\n\
    \       roster, containing an updated roster item for the contact with\n     \
    \  the 'subscription' attribute set to a value of \"none\" and with no\n     \
    \  'ask' attribute:\n   <presence\n       from='contact@example.org'\n       to='user@example.com'\n\
    \       type='unsubscribed'/>\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='contact@example.org'\n           subscription='none'\n\
    \           name='MyContact'>\n         <group>MyBuddies</group>\n       </item>\n\
    \     </query>\n   </iq>\n   4.  Upon receiving the presence stanza of type \"\
    unsubscribed\", the\n       user SHOULD acknowledge receipt of that subscription\
    \ state\n       notification through either \"affirming\" it by sending a presence\n\
    \       stanza of type \"unsubscribe\" to the contact or \"denying\" it by\n \
    \      sending a presence stanza of type \"subscribe\" to the contact;\n     \
    \  this step does not necessarily affect the subscription state (see\n       Subscription\
    \ States (Section 9) for details), but instead lets\n       the user's server\
    \ know that it MUST no longer send notification\n       of the subscription state\
    \ change to the user (see Section 9.4).\n   As a result of this activity, the\
    \ contact is now in the user's roster\n   with a subscription state of \"none\"\
    , whereas the user is not in the\n   contact's roster at all.\n"
- title: 8.3.  Creating a Mutual Subscription
  contents:
  - "8.3.  Creating a Mutual Subscription\n   The user and contact can build on the\
    \ \"happy path\" described above to\n   create a mutual subscription (i.e., a\
    \ subscription of type \"both\").\n   The process is described below.\n   1. \
    \ If the contact wants to create a mutual subscription, the contact\n       MUST\
    \ send a subscription request to the user (subject to the\n       contact's configured\
    \ preferences, the contact's client MAY send\n       this automatically):\n  \
    \ <presence to='user@example.com' type='subscribe'/>\n   2.  As a result, the\
    \ contact's server (1) MUST initiate a roster push\n       to all available resources\
    \ associated with the contact that have\n       requested the roster, with the\
    \ user still in the 'from'\n       subscription state but with a pending 'to'\
    \ subscription denoted\n       by the inclusion of the ask='subscribe' attribute\
    \ in the roster\n       item; and (2) MUST route the presence stanza of type \"\
    subscribe\"\n       to the user, first stamping the 'from' address as the bare\
    \ JID\n       (<contact@example.org>) of the contact:\n   <iq type='set'>\n  \
    \   <query xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='from'\n           ask='subscribe'\n           name='SomeUser'>\n\
    \         <group>SomeGroup</group>\n       </item>\n     </query>\n   </iq>\n\
    \   <presence\n       from='contact@example.org'\n       to='user@example.com'\n\
    \       type='subscribe'/>\n   Note: If the contact's server receives a presence\
    \ stanza of type\n   \"error\" from the user's server, it MUST deliver the error\
    \ stanza to\n   the contact, whose client MAY determine that the error is in response\n\
    \   to the outgoing presence stanza of type \"subscribe\" it sent\n   previously\
    \ (e.g., by tracking an 'id' attribute) and then choose to\n   resend the \"subscribe\"\
    \ request or revert the roster to its previous\n   state by sending a presence\
    \ stanza of type \"unsubscribe\" to the user.\n   3.  Upon receiving the presence\
    \ stanza of type \"subscribe\" addressed\n       to the user, the user's server\
    \ must determine if there is at\n       least one available resource for which\
    \ the user has requested the\n       roster.  If so, the user's server MUST deliver\
    \ the subscription\n       request to the user (if not, it MUST store the subscription\n\
    \       request offline for delivery when this condition is next met). No\n  \
    \     matter when the subscription request is delivered, the user must\n     \
    \  then decide whether or not to approve it (subject to the user's\n       configured\
    \ preferences, the user's client MAY approve or refuse\n       the subscription\
    \ request without presenting it to the user).\n       Here we assume the \"happy\
    \ path\" that the user approves the\n       subscription request (the alternate\
    \ flow of declining the\n       subscription request is defined in Section 8.3.1).\
    \  In this case,\n       the user's client MUST send a presence stanza of type\n\
    \       \"subscribed\" to the contact in order to approve the subscription\n \
    \      request.\n   <presence to='contact@example.org' type='subscribed'/>\n \
    \  4.  As a result, the user's server (1) MUST initiate a roster push to\n   \
    \    all of the user's available resources that have requested the\n       roster,\
    \ containing a roster item for the contact with the\n       'subscription' attribute\
    \ set to a value of \"both\"; (2) MUST route\n       the presence stanza of type\
    \ \"subscribed\" to the contact, first\n       stamping the 'from' address as\
    \ the bare JID (<user@example.com>)\n       of the user; and (3) MUST send to\
    \ the contact the full XML of the\n       last presence stanza with no 'to' attribute\
    \ received by the\n       server from each of the user's available resources (subject\
    \ to\n       privacy lists in force for each session):\n   <iq type='set'>\n \
    \    <query xmlns='jabber:iq:roster'>\n       <item\n           jid='contact@example.org'\n\
    \           subscription='both'\n           name='MyContact'>\n         <group>MyBuddies</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence\n       from='user@example.com'\n\
    \       to='contact@example.org'\n       type='subscribed'/>\n   <presence\n \
    \      from='user@example.com/resource'\n       to='contact@example.org'/>\n \
    \  Note: If the user's server receives a presence stanza of type \"error\"\n \
    \  from the contact's server, it MUST deliver the error stanza to the\n   user,\
    \ whose client MAY determine that the error is in response to the\n   outgoing\
    \ presence stanza of type \"subscribed\" it sent previously\n   (e.g., by tracking\
    \ an 'id' attribute) and then choose to resend the\n   subscription request or\
    \ revert the roster to its previous state by\n   sending a presence stanza of\
    \ type \"unsubscribed\" to the contact.\n   5.  Upon receiving the presence stanza\
    \ of type \"subscribed\" addressed\n       to the contact, the contact's server\
    \ MUST first verify that the\n       user is in the contact's roster with either\
    \ of the following\n       states: (a) subscription='none' and ask='subscribe'\
    \ or (b)\n       subscription='from' and ask='subscribe'.  If the user is not\
    \ in\n       the contact's roster with either of those states, the contact's\n\
    \       server MUST silently ignore the presence stanza of type\n       \"subscribed\"\
    \ (i.e., it MUST NOT route it to the contact, modify\n       the contact's roster,\
    \ or generate a roster push to the contact's\n       available resources).  If\
    \ the user is in the contact's roster\n       with either of those states, the\
    \ contact's server (1) MUST\n       deliver the presence stanza of type \"subscribed\"\
    \ from the user to\n       the contact; (2) MUST initiate a roster push to all\
    \ available\n       resources associated with the contact that have requested\
    \ the\n       roster, containing an updated roster item for the user with the\n\
    \       'subscription' attribute set to a value of \"both\"; and (3) MUST\n  \
    \     deliver the available presence stanza received from each of the\n      \
    \ user's available resources to each of the contact's available\n       resources:\n\
    \   <presence\n       from='user@example.com'\n       to='contact@example.org'\n\
    \       type='subscribed'/>\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='user@example.com'\n           subscription='both'\n\
    \           name='SomeUser'>\n         <group>SomeGroup</group>\n       </item>\n\
    \     </query>\n   </iq>\n   <presence\n       from='user@example.com/resource'\n\
    \       to='contact@example.org/resource'/>\n   6.  Upon receiving the presence\
    \ stanza of type \"subscribed\", the\n       contact SHOULD acknowledge receipt\
    \ of that subscription state\n       notification through either \"affirming\"\
    \ it by sending a presence\n       stanza of type \"subscribe\" to the user or\
    \ \"denying\" it by sending\n       a presence stanza of type \"unsubscribe\"\
    \ to the user; this step\n       does not necessarily affect the subscription\
    \ state (see\n       Subscription States (Section 9) for details), but instead\
    \ lets\n       the contact's server know that it MUST no longer send\n       notification\
    \ of the subscription state change to the contact (see\n       Section 9.4).\n\
    \   The user and the contact now have a mutual subscription to each\n   other's\
    \ presence -- i.e., the subscription is of type \"both\".\n"
- title: '8.3.1.  Alternate Flow: User Declines Subscription Request'
  contents:
  - "8.3.1.  Alternate Flow: User Declines Subscription Request\n   The above activity\
    \ flow represents the \"happy path\" regarding the\n   contact's subscription\
    \ request to the user.  The main alternate flow\n   occurs if the user refuses\
    \ the contact's subscription request, as\n   described below.\n   1.  If the user\
    \ wants to refuse the request, the user's client MUST\n       send a presence\
    \ stanza of type \"unsubscribed\" to the contact\n       (instead of the presence\
    \ stanza of type \"subscribed\" sent in Step\n       3 of Section 8.3):\n   <presence\
    \ to='contact@example.org' type='unsubscribed'/>\n   2.  As a result, the user's\
    \ server MUST route the presence stanza of\n       type \"unsubscribed\" to the\
    \ contact, first stamping the 'from'\n       address as the bare JID (<user@example.com>)\
    \ of the user:\n   <presence\n       from='user@example.com'\n       to='contact@example.org'\n\
    \       type='unsubscribed'/>\n   3.  Upon receiving the presence stanza of type\
    \ \"unsubscribed\"\n       addressed to the contact, the contact's server (1)\
    \ MUST deliver\n       that presence stanza to the contact; and (2) MUST initiate\
    \ a\n       roster push to all available resources associated with the\n     \
    \  contact that have requested the roster, containing an updated\n       roster\
    \ item for the user with the 'subscription' attribute set to\n       a value of\
    \ \"from\" and with no 'ask' attribute:\n   <presence\n       from='user@example.com'\n\
    \       to='contact@example.org'\n       type='unsubscribed'/>\n   <iq type='set'>\n\
    \     <query xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='from'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   4.  Upon receiving the presence stanza\
    \ of type \"unsubscribed\", the\n       contact SHOULD acknowledge receipt of\
    \ that subscription state\n       notification through either \"affirming\" it\
    \ by sending a presence\n       stanza of type \"unsubscribe\" to the user or\
    \ \"denying\" it by\n       sending a presence stanza of type \"subscribe\" to\
    \ the user; this\n       step does not necessarily affect the subscription state\
    \ (see\n       Subscription States (Section 9) for details), but instead lets\n\
    \       the contact's server know that it MUST no longer send\n       notification\
    \ of the subscription state change to the contact (see\n       Section 9.4).\n\
    \   As a result of this activity, there has been no change in the\n   subscription\
    \ state; i.e., the contact is in the user's roster with a\n   subscription state\
    \ of \"to\" and the user is in the contact's roster\n   with a subscription state\
    \ of \"from\".\n"
- title: 8.4.  Unsubscribing
  contents:
  - "8.4.  Unsubscribing\n   At any time after subscribing to a contact's presence\
    \ information, a\n   user MAY unsubscribe.  While the XML that the user sends\
    \ to make this\n   happen is the same in all instances, the subsequent subscription\n\
    \   state is different depending on the subscription state obtaining when\n  \
    \ the unsubscribe \"command\" is sent.  Both possible scenarios are\n   described\
    \ below.\n"
- title: '8.4.1.  Case #1: Unsubscribing When Subscription is Not Mutual'
  contents:
  - "8.4.1.  Case #1: Unsubscribing When Subscription is Not Mutual\n   In the first\
    \ case, the user has a subscription to the contact's\n   presence information\
    \ but the contact does not have a subscription to\n   the user's presence information\
    \ (i.e., the subscription is not yet\n   mutual).\n   1.  If the user wants to\
    \ unsubscribe from the contact's presence\n       information, the user MUST send\
    \ a presence stanza of type\n       \"unsubscribe\" to the contact:\n   <presence\
    \ to='contact@example.org' type='unsubscribe'/>\n   2.  As a result, the user's\
    \ server (1) MUST send a roster push to all\n       of the user's available resources\
    \ that have requested the roster,\n       containing an updated roster item for\
    \ the contact with the\n       'subscription' attribute set to a value of \"none\"\
    ; and (2) MUST\n       route the presence stanza of type \"unsubscribe\" to the\
    \ contact,\n       first stamping the 'from' address as the bare JID\n       (<user@example.com>)\
    \ of the user:\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n  \
    \     <item\n           jid='contact@example.org'\n           subscription='none'\n\
    \           name='MyContact'>\n         <group>MyBuddies</group>\n       </item>\n\
    \     </query>\n   </iq>\n   <presence\n       from='user@example.com'\n     \
    \  to='contact@example.org'\n       type='unsubscribe'/>\n   3.  Upon receiving\
    \ the presence stanza of type \"unsubscribe\"\n       addressed to the contact,\
    \ the contact's server (1) MUST initiate\n       a roster push to all available\
    \ resources associated with the\n       contact that have requested the roster,\
    \ containing an updated\n       roster item for the user with the 'subscription'\
    \ attribute set to\n       a value of \"none\" (if the contact is unavailable\
    \ or has not\n       requested the roster, the contact's server MUST modify the\
    \ roster\n       item and send that modified item the next time the contact\n\
    \       requests the roster); and (2) MUST deliver the \"unsubscribe\"\n     \
    \  state change notification to the contact:\n   <iq type='set'>\n     <query\
    \ xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='none'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence\n       from='user@example.com'\n\
    \       to='contact@example.org'\n       type='unsubscribe'/>\n   4.  Upon receiving\
    \ the presence stanza of type \"unsubscribe\", the\n       contact SHOULD acknowledge\
    \ receipt of that subscription state\n       notification through either \"affirming\"\
    \ it by sending a presence\n       stanza of type \"unsubscribed\" to the user\
    \ or \"denying\" it by\n       sending a presence stanza of type \"subscribed\"\
    \ to the user; this\n       step does not necessarily affect the subscription\
    \ state (see\n       Subscription States (Section 9) for details), but instead\
    \ lets\n       the contact's server know that it MUST no longer send\n       notification\
    \ of the subscription state change to the contact (see\n       Section 9.4).\n\
    \   5.  The contact's server then (1) MUST send a presence stanza of type\n  \
    \     \"unsubscribed\" to the user; and (2) SHOULD send unavailable\n       presence\
    \ from all of the contact's available resources to the\n       user:\n   <presence\n\
    \       from='contact@example.org'\n       to='user@example.com'\n       type='unsubscribed'/>\n\
    \   <presence\n       from='contact@example.org/resource'\n       to='user@example.com'\n\
    \       type='unavailable'/>\n   6.  When the user's server receives the presence\
    \ stanzas of type\n       \"unsubscribed\" and \"unavailable\", it MUST deliver\
    \ them to the\n       user:\n   <presence\n       from='contact@example.org'\n\
    \       to='user@example.com'\n       type='unsubscribed'/>\n   <presence\n  \
    \     from='contact@example.org/resource'\n       to='user@example.com'\n    \
    \   type='unavailable'/>\n   7.  Upon receiving the presence stanza of type \"\
    unsubscribed\", the\n       user SHOULD acknowledge receipt of that subscription\
    \ state\n       notification through either \"affirming\" it by sending a presence\n\
    \       stanza of type \"unsubscribe\" to the contact or \"denying\" it by\n \
    \      sending a presence stanza of type \"subscribe\" to the contact;\n     \
    \  this step does not necessarily affect the subscription state (see\n       Subscription\
    \ States (Section 9) for details), but instead lets\n       the user's server\
    \ know that it MUST no longer send notification\n       of the subscription state\
    \ change to the user (see Section 9.4).\n"
- title: '8.4.2.  Case #2: Unsubscribing When Subscription is Mutual'
  contents:
  - "8.4.2.  Case #2: Unsubscribing When Subscription is Mutual\n   In the second\
    \ case, the user has a subscription to the contact's\n   presence information\
    \ and the contact also has a subscription to the\n   user's presence information\
    \ (i.e., the subscription is mutual).\n   1.  If the user wants to unsubscribe\
    \ from the contact's presence\n       information, the user MUST send a presence\
    \ stanza of type\n       \"unsubscribe\" to the contact:\n   <presence to='contact@example.org'\
    \ type='unsubscribe'/>\n   2.  As a result, the user's server (1) MUST send a\
    \ roster push to all\n       of the user's available resources that have requested\
    \ the roster,\n       containing an updated roster item for the contact with the\n\
    \       'subscription' attribute set to a value of \"from\"; and (2) MUST\n  \
    \     route the presence stanza of type \"unsubscribe\" to the contact,\n    \
    \   first stamping the 'from' address as the bare JID\n       (<user@example.com>)\
    \ of the user:\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n  \
    \     <item\n           jid='contact@example.org'\n           subscription='from'\n\
    \           name='MyContact'>\n         <group>MyBuddies</group>\n       </item>\n\
    \     </query>\n   </iq>\n   <presence\n       from='user@example.com'\n     \
    \  to='contact@example.org'\n       type='unsubscribe'/>\n   3.  Upon receiving\
    \ the presence stanza of type \"unsubscribe\"\n       addressed to the contact,\
    \ the contact's server (1) MUST initiate\n       a roster push to all available\
    \ resources associated with the\n       contact that have requested the roster,\
    \ containing an updated\n       roster item for the user with the 'subscription'\
    \ attribute set to\n       a value of \"to\" (if the contact is unavailable or\
    \ has not\n       requested the roster, the contact's server MUST modify the roster\n\
    \       item and send that modified item the next time the contact\n       requests\
    \ the roster); and (2) MUST deliver the \"unsubscribe\"\n       state change notification\
    \ to the contact:\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='user@example.com'\n           subscription='to'\n\
    \           name='SomeUser'>\n         <group>SomeGroup</group>\n       </item>\n\
    \     </query>\n   </iq>\n   <presence\n       from='user@example.com'\n     \
    \  to='contact@example.org'\n       type='unsubscribe'/>\n   4.  Upon receiving\
    \ the presence stanza of type \"unsubscribe\", the\n       contact SHOULD acknowledge\
    \ receipt of that subscription state\n       notification through either \"affirming\"\
    \ it by sending a presence\n       stanza of type \"unsubscribed\" to the user\
    \ or \"denying\" it by\n       sending a presence stanza of type \"subscribed\"\
    \ to the user; this\n       step does not necessarily affect the subscription\
    \ state (see\n       Subscription States (Section 9) for details), but instead\
    \ lets\n       the contact's server know that it MUST no longer send\n       notification\
    \ of the subscription state change to the contact (see\n       Section 9.4).\n\
    \   5.  The contact's server then (1) MUST send a presence stanza of type\n  \
    \     \"unsubscribed\" to the user; and (2) SHOULD send unavailable\n       presence\
    \ from all of the contact's available resources to the\n       user:\n   <presence\n\
    \       from='contact@example.org'\n       to='user@example.com'\n       type='unsubscribed'/>\n\
    \   <presence\n       from='contact@example.org/resource'\n       to='user@example.com'\n\
    \       type='unavailable'/>\n   6.  When the user's server receives the presence\
    \ stanzas of type\n       \"unsubscribed\" and \"unavailable\", it MUST deliver\
    \ them to the\n       user:\n   <presence\n       from='contact@example.org'\n\
    \       to='user@example.com'\n       type='unsubscribed'/>\n   <presence\n  \
    \     from='contact@example.org/resource'\n       to='user@example.com'\n    \
    \   type='unavailable'/>\n   7.  Upon receiving the presence stanza of type \"\
    unsubscribed\", the\n       user SHOULD acknowledge receipt of that subscription\
    \ state\n       notification through either \"affirming\" it by sending a presence\n\
    \       stanza of type \"unsubscribe\" to the contact or \"denying\" it by\n \
    \      sending a presence stanza of type \"subscribe\" to the contact;\n     \
    \  this step does not necessarily affect the subscription state (see\n       Subscription\
    \ States (Section 9) for details), but instead lets\n       the user's server\
    \ know that it MUST no longer send notification\n       of the subscription state\
    \ change to the user (see Section 9.4).\n   Note: Obviously this does not result\
    \ in removal of the roster item\n   from the user's roster, and the contact still\
    \ has a subscription to\n   the user's presence information.  In order to both\
    \ completely cancel\n   a mutual subscription and fully remove the roster item\
    \ from the\n   user's roster, the user SHOULD update the roster item with\n  \
    \ subscription='remove' as defined under Removing a Roster Item and\n   Cancelling\
    \ All Subscriptions (Section 8.6).\n"
- title: 8.5.  Cancelling a Subscription
  contents:
  - "8.5.  Cancelling a Subscription\n   At any time after approving a subscription\
    \ request from a user, a\n   contact MAY cancel that subscription.  While the\
    \ XML that the contact\n   sends to make this happen is the same in all instances,\
    \ the\n   subsequent subscription state is different depending on the\n   subscription\
    \ state obtaining when the cancellation was sent.  Both\n   possible scenarios\
    \ are described below.\n"
- title: '8.5.1.  Case #1: Cancelling When Subscription is Not Mutual'
  contents:
  - "8.5.1.  Case #1: Cancelling When Subscription is Not Mutual\n   In the first\
    \ case, the user has a subscription to the contact's\n   presence information\
    \ but the contact does not have a subscription to\n   the user's presence information\
    \ (i.e., the subscription is not yet\n   mutual).\n   1.  If the contact wants\
    \ to cancel the user's subscription, the\n       contact MUST send a presence\
    \ stanza of type \"unsubscribed\" to the\n       user:\n   <presence to='user@example.com'\
    \ type='unsubscribed'/>\n   2.  As a result, the contact's server (1) MUST send\
    \ a roster push to\n       all of the contact's available resources that have\
    \ requested the\n       roster, containing an updated roster item for the user\
    \ with the\n       'subscription' attribute set to a value of \"none\"; (2) MUST\
    \ route\n       the presence stanza of type \"unsubscribed\" to the user, first\n\
    \       stamping the 'from' address as the bare JID\n       (<contact@example.org>)\
    \ of the contact; and (3) SHOULD send\n       unavailable presence from all of\
    \ the contact's available\n       resources to the user:\n   <iq type='set'>\n\
    \     <query xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='none'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence\n       from='contact@example.org'\n\
    \       to='user@example.com'\n       type='unsubscribed'/>\n   <presence\n  \
    \     from='contact@example.org/resource'\n       to='user@example.com'\n    \
    \   type='unavailable'/>\n   3.  Upon receiving the presence stanza of type \"\
    unsubscribed\"\n       addressed to the user, the user's server (1) MUST initiate\
    \ a\n       roster push to all of the user's available resources that have\n \
    \      requested the roster, containing an updated roster item for the\n     \
    \  contact with the 'subscription' attribute set to a value of\n       \"none\"\
    \ (if the user is unavailable or has not requested the\n       roster, the user's\
    \ server MUST modify the roster item and send\n       that modified item the next\
    \ time the user requests the roster);\n       (2) MUST deliver the \"unsubscribed\"\
    \ state change notification to\n       all of the user's available resources;\
    \ and (3) MUST deliver the\n       unavailable presence to all of the user's available\
    \ resources:\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n    \
    \   <item\n           jid='contact@example.org'\n           subscription='none'\n\
    \           name='MyContact'>\n         <group>MyBuddies</group>\n       </item>\n\
    \     </query>\n   </iq>\n   <presence\n       from='contact@example.org'\n  \
    \     to='user@example.com'\n       type='unsubscribed'/>\n   <presence\n    \
    \   from='contact@example.org/resource'\n       to='user@example.com'\n      \
    \ type='unavailable'/>\n   4.  Upon receiving the presence stanza of type \"unsubscribed\"\
    , the\n       user SHOULD acknowledge receipt of that subscription state\n   \
    \    notification through either \"affirming\" it by sending a presence\n    \
    \   stanza of type \"unsubscribe\" to the contact or \"denying\" it by\n     \
    \  sending a presence stanza of type \"subscribe\" to the contact;\n       this\
    \ step does not necessarily affect the subscription state (see\n       Subscription\
    \ States (Section 9) for details), but instead lets\n       the user's server\
    \ know that it MUST no longer send notification\n       of the subscription state\
    \ change to the user (see Section 9.4).\n"
- title: '8.5.2.  Case #2: Cancelling When Subscription is Mutual'
  contents:
  - "8.5.2.  Case #2: Cancelling When Subscription is Mutual\n   In the second case,\
    \ the user has a subscription to the contact's\n   presence information and the\
    \ contact also has a subscription to the\n   user's presence information (i.e.,\
    \ the subscription is mutual).\n   1.  If the contact wants to cancel the user's\
    \ subscription, the\n       contact MUST send a presence stanza of type \"unsubscribed\"\
    \ to the\n       user:\n   <presence to='user@example.com' type='unsubscribed'/>\n\
    \   2.  As a result, the contact's server (1) MUST send a roster push to\n   \
    \    all of the contact's available resources that have requested the\n      \
    \ roster, containing an updated roster item for the user with the\n       'subscription'\
    \ attribute set to a value of \"to\"; (2) MUST route\n       the presence stanza\
    \ of type \"unsubscribed\" to the user, first\n       stamping the 'from' address\
    \ as the bare JID\n       (<contact@example.org>) of the contact; and (3) SHOULD\
    \ send\n       unavailable presence from all of the contact's available\n    \
    \   resources to all of the user's available resources:\n   <iq type='set'>\n\
    \     <query xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='to'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence\n       from='contact@example.org'\n\
    \       to='user@example.com'\n       type='unsubscribed'/>\n   <presence\n  \
    \     from='contact@example.org/resource'\n       to='user@example.com'\n    \
    \   type='unavailable'/>\n   3.  Upon receiving the presence stanza of type \"\
    unsubscribed\"\n       addressed to the user, the user's server (1) MUST initiate\
    \ a\n       roster push to all of the user's available resources that have\n \
    \      requested the roster, containing an updated roster item for the\n     \
    \  contact with the 'subscription' attribute set to a value of\n       \"from\"\
    \ (if the user is unavailable or has not requested the\n       roster, the user's\
    \ server MUST modify the roster item and send\n       that modified item the next\
    \ time the user requests the roster);\n       and (2) MUST deliver the \"unsubscribed\"\
    \ state change notification\n       to all of the user's available resources;\
    \ and (3) MUST deliver\n       the unavailable presence to all of the user's available\n\
    \       resources:\n   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='contact@example.org'\n           subscription='from'\n\
    \           name='MyContact'>\n         <group>MyBuddies</group>\n       </item>\n\
    \     </query>\n   </iq>\n   <presence\n       from='contact@example.org'\n  \
    \     to='user@example.com'\n       type='unsubscribed'/>\n   <presence\n    \
    \   from='contact@example.org/resource'\n       to='user@example.com'\n      \
    \ type='unavailable'/>\n   4.  Upon receiving the presence stanza of type \"unsubscribed\"\
    , the\n       user SHOULD acknowledge receipt of that subscription state\n   \
    \    notification through either \"affirming\" it by sending a presence\n    \
    \   stanza of type \"unsubscribe\" to the contact or \"denying\" it by\n     \
    \  sending a presence stanza of type \"subscribe\" to the contact;\n       this\
    \ step does not necessarily affect the subscription state (see\n       Subscription\
    \ States (Section 9) for details), but instead lets\n       the user's server\
    \ know that it MUST no longer send notification\n       of the subscription state\
    \ change to the user (see Section 9.4).\n   Note: Obviously this does not result\
    \ in removal of the roster item\n   from the contact's roster, and the contact\
    \ still has a subscription\n   to the user's presence information.  In order to\
    \ both completely\n   cancel a mutual subscription and fully remove the roster\
    \ item from\n   the contact's roster, the contact should update the roster item\
    \ with\n   subscription='remove' as defined under Removing a Roster Item and\n\
    \   Cancelling All Subscriptions (Section 8.6).\n"
- title: 8.6.  Removing a Roster Item and Cancelling All Subscriptions
  contents:
  - "8.6.  Removing a Roster Item and Cancelling All Subscriptions\n   Because there\
    \ may be many steps involved in completely removing a\n   roster item and cancelling\
    \ subscriptions in both directions, the\n   roster management protocol includes\
    \ a \"shortcut\" method for doing so.\n   The process may be initiated no matter\
    \ what the current subscription\n   state is by sending a roster set containing\
    \ an item for the contact\n   with the 'subscription' attribute set to a value\
    \ of \"remove\":\n   <iq type='set' id='remove1'>\n     <query xmlns='jabber:iq:roster'>\n\
    \       <item\n           jid='contact@example.org'\n           subscription='remove'/>\n\
    \     </query>\n   </iq>\n   When the user removes a contact from his or her roster\
    \ by setting the\n   'subscription' attribute to a value of \"remove\", the user's\
    \ server\n   (1) MUST automatically cancel any existing presence subscription\n\
    \   between the user and the contact (both 'to' and 'from' as\n   appropriate);\
    \ (2) MUST remove the roster item from the user's roster\n   and inform all of\
    \ the user's available resources that have requested\n   the roster of the roster\
    \ item removal; (3) MUST inform the resource\n   that initiated the removal of\
    \ success; and (4) SHOULD send\n   unavailable presence from all of the user's\
    \ available resources to\n   the contact:\n   <presence\n       from='user@example.com'\n\
    \       to='contact@example.org'\n       type='unsubscribe'/>\n   <presence\n\
    \       from='user@example.com'\n       to='contact@example.org'\n       type='unsubscribed'/>\n\
    \   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n       <item\n   \
    \        jid='contact@example.org'\n           subscription='remove'/>\n     </query>\n\
    \   </iq>\n   <iq type='result' id='remove1'/>\n   <presence\n       from='user@example.com/resource'\n\
    \       to='contact@example.org'\n       type='unavailable'/>\n   Upon receiving\
    \ the presence stanza of type \"unsubscribe\", the\n   contact's server (1) MUST\
    \ initiate a roster push to all available\n   resources associated with the contact\
    \ that have requested the roster,\n   containing an updated roster item for the\
    \ user with the\n   'subscription' attribute set to a value of \"to\" (if the\
    \ contact is\n   unavailable or has not requested the roster, the contact's server\n\
    \   MUST modify the roster item and send that modified item the next time\n  \
    \ the contact requests the roster); and (2) MUST also deliver the\n   \"unsubscribe\"\
    \ state change notification to all of the contact's\n   available resources:\n\
    \   <iq type='set'>\n     <query xmlns='jabber:iq:roster'>\n       <item\n   \
    \        jid='user@example.com'\n           subscription='to'\n           name='SomeUser'>\n\
    \         <group>SomeGroup</group>\n       </item>\n     </query>\n   </iq>\n\
    \   <presence\n       from='user@example.com'\n       to='contact@example.org'\n\
    \       type='unsubscribe'/>\n   Upon receiving the presence stanza of type \"\
    unsubscribed\", the\n   contact's server (1) MUST initiate a roster push to all\
    \ available\n   resources associated with the contact that have requested the\
    \ roster,\n   containing an updated roster item for the user with the\n   'subscription'\
    \ attribute set to a value of \"none\" (if the contact is\n   unavailable or has\
    \ not requested the roster, the contact's server\n   MUST modify the roster item\
    \ and send that modified item the next time\n   the contact requests the roster);\
    \ and (2) MUST also deliver the\n   \"unsubscribe\" state change notification\
    \ to all of the contact's\n   available resources:\n   <iq type='set'>\n     <query\
    \ xmlns='jabber:iq:roster'>\n       <item\n           jid='user@example.com'\n\
    \           subscription='none'\n           name='SomeUser'>\n         <group>SomeGroup</group>\n\
    \       </item>\n     </query>\n   </iq>\n   <presence\n       from='user@example.com'\n\
    \       to='contact@example.org'\n       type='unsubscribed'/>\n   Upon receiving\
    \ the presence stanza of type \"unavailable\" addressed to\n   the contact, the\
    \ contact's server MUST deliver the unavailable\n   presence to all of the user's\
    \ available resources:\n   <presence\n       from='user@example.com/resource'\n\
    \       to='contact@example.org'\n       type='unavailable'/>\n   Note: When the\
    \ user removes the contact from the user's roster, the\n   end state of the contact's\
    \ roster is that the user is still in the\n   contact's roster with a subscription\
    \ state of \"none\"; in order to\n   completely remove the roster item for the\
    \ user, the contact needs to\n   also send a roster removal request.\n"
- title: 9.  Subscription States
  contents:
  - "9.  Subscription States\n   This section provides detailed information about\
    \ subscription states\n   and server handling of subscription-related presence\
    \ stanzas (i.e.,\n   presence stanzas of type \"subscribe\", \"subscribed\", \"\
    unsubscribe\",\n   and \"unsubscribed\").\n"
- title: 9.1.  Defined States
  contents:
  - "9.1.  Defined States\n   There are nine possible subscription states, which are\
    \ described here\n   from the user's (not contact's) perspective:\n   1.  \"None\"\
    \ = contact and user are not subscribed to each other, and\n       neither has\
    \ requested a subscription from the other\n   2.  \"None + Pending Out\" = contact\
    \ and user are not subscribed to\n       each other, and user has sent contact\
    \ a subscription request but\n       contact has not replied yet\n   3.  \"None\
    \ + Pending In\" = contact and user are not subscribed to each\n       other,\
    \ and contact has sent user a subscription request but user\n       has not replied\
    \ yet (note: contact's server SHOULD NOT push or\n       deliver roster items\
    \ in this state, but instead SHOULD wait until\n       contact has approved subscription\
    \ request from user)\n   4.  \"None + Pending Out/In\" = contact and user are\
    \ not subscribed to\n       each other, contact has sent user a subscription request\
    \ but user\n       has not replied yet, and user has sent contact a subscription\n\
    \       request but contact has not replied yet\n   5.  \"To\" = user is subscribed\
    \ to contact (one-way)\n   6.  \"To + Pending In\" = user is subscribed to contact,\
    \ and contact\n       has sent user a subscription request but user has not replied\
    \ yet\n   7.  \"From\" = contact is subscribed to user (one-way)\n   8.  \"From\
    \ + Pending Out\" = contact is subscribed to user, and user\n       has sent contact\
    \ a subscription request but contact has not\n       replied yet\n   9.  \"Both\"\
    \ = user and contact are subscribed to each other (two-way)\n"
- title: 9.2.  Server Handling of Outbound Presence Subscription Stanzas
  contents:
  - "9.2.  Server Handling of Outbound Presence Subscription Stanzas\n   Outbound\
    \ presence subscription stanzas enable the user to manage his\n   or her subscription\
    \ to the contact's presence information (via the\n   \"subscribe\" and \"unsubscribe\"\
    \ types), and to manage the contact's\n   access to the user's presence information\
    \ (via the \"subscribed\" and\n   \"unsubscribed\" types).\n   Because it is possible\
    \ for the user's server and the contact's server\n   to lose synchronization regarding\
    \ subscription states, the user's\n   server MUST without exception route all\
    \ outbound presence stanzas of\n   type \"subscribe\" or \"unsubscribe\" to the\
    \ contact so that the user is\n   able to resynchronize his or her subscription\
    \ to the contact's\n   presence information if needed.\n   The user's server SHOULD\
    \ NOT route a presence stanza of type\n   \"subscribed\" or \"unsubscribed\" to\
    \ the contact if the stanza does not\n   result in a subscription state change\
    \ from the user's perspective,\n   and MUST NOT make a state change.  If the stanza\
    \ results in a\n   subscription state change, the user's server MUST route the\
    \ stanza to\n   the contact and MUST make the appropriate state change.  These\
    \ rules\n   are summarized in the following tables.\n   Table 1: Recommended handling\
    \ of outbound \"subscribed\" stanzas\n   +----------------------------------------------------------------+\n\
    \   |  EXISTING STATE          |  ROUTE?  |  NEW STATE               |\n   +----------------------------------------------------------------+\n\
    \   |  \"None\"                  |  no      |  no state change         |\n   |\
    \  \"None + Pending Out\"    |  no      |  no state change         |\n   |  \"\
    None + Pending In\"     |  yes     |  \"From\"                  |\n   |  \"None\
    \ + Pending Out/In\" |  yes     |  \"From + Pending Out\"    |\n   |  \"To\" \
    \                   |  no      |  no state change         |\n   |  \"To + Pending\
    \ In\"       |  yes     |  \"Both\"                  |\n   |  \"From\"       \
    \           |  no      |  no state change         |\n   |  \"From + Pending Out\"\
    \    |  no      |  no state change         |\n   |  \"Both\"                 \
    \ |  no      |  no state change         |\n   +----------------------------------------------------------------+\n\
    \   Table 2: Recommended handling of outbound \"unsubscribed\" stanzas\n   +----------------------------------------------------------------+\n\
    \   |  EXISTING STATE          |  ROUTE?  |  NEW STATE               |\n   +----------------------------------------------------------------+\n\
    \   |  \"None\"                  |  no      |  no state change         |\n   |\
    \  \"None + Pending Out\"    |  no      |  no state change         |\n   |  \"\
    None + Pending In\"     |  yes     |  \"None\"                  |\n   |  \"None\
    \ + Pending Out/In\" |  yes     |  \"None + Pending Out\"    |\n   |  \"To\" \
    \                   |  no      |  no state change         |\n   |  \"To + Pending\
    \ In\"       |  yes     |  \"To\"                    |\n   |  \"From\"       \
    \           |  yes     |  \"None\"                  |\n   |  \"From + Pending\
    \ Out\"    |  yes     |  \"None + Pending Out\"    |\n   |  \"Both\"         \
    \         |  yes     |  \"To\"                    |\n   +----------------------------------------------------------------+\n"
- title: 9.3.  Server Handling of Inbound Presence Subscription Stanzas
  contents:
  - "9.3.  Server Handling of Inbound Presence Subscription Stanzas\n   Inbound presence\
    \ subscription stanzas request a subscription-related\n   action from the user\
    \ (via the \"subscribe\" type), inform the user of\n   subscription-related actions\
    \ taken by the contact (via the\n   \"unsubscribe\" type), or enable the contact\
    \ to manage the user's\n   access to the contact's presence information (via the\
    \ \"subscribed\"\n   and \"unsubscribed\" types).\n   When the user's server receives\
    \ a subscription request for the user\n   from the contact (i.e., a presence stanza\
    \ of type \"subscribe\"), it\n   MUST deliver that request to the user for approval\
    \ if the user has\n   not already granted the contact access to the user's presence\n\
    \   information and if there is no pending inbound subscription request;\n   however,\
    \ the user's server SHOULD NOT deliver the new request if\n   there is a pending\
    \ inbound subscription request, since the previous\n   subscription request will\
    \ have been recorded.  If the user has\n   already granted the contact access\
    \ to the user's presence\n   information, the user's server SHOULD auto-reply\
    \ to an inbound\n   presence stanza of type \"subscribe\" from the contact by\
    \ sending a\n   presence stanza of type \"subscribed\" to the contact on behalf\
    \ of the\n   user; this rule enables the contact to resynchronize the subscription\n\
    \   state if needed.  These rules are summarized in the following table.\n   Table\
    \ 3: Recommended handling of inbound \"subscribe\" stanzas\n   +------------------------------------------------------------------+\n\
    \   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n   +------------------------------------------------------------------+\n\
    \   |  \"None\"                  |  yes       |  \"None + Pending In\"     |\n\
    \   |  \"None + Pending Out\"    |  yes       |  \"None + Pending Out/In\" |\n\
    \   |  \"None + Pending In\"     |  no        |  no state change         |\n \
    \  |  \"None + Pending Out/In\" |  no        |  no state change         |\n  \
    \ |  \"To\"                    |  yes       |  \"To + Pending In\"       |\n \
    \  |  \"To + Pending In\"       |  no        |  no state change         |\n  \
    \ |  \"From\"                  |  no *      |  no state change         |\n   |\
    \  \"From + Pending Out\"    |  no *      |  no state change         |\n   | \
    \ \"Both\"                  |  no *      |  no state change         |\n   +------------------------------------------------------------------+\n\
    \   * Server SHOULD auto-reply with \"subscribed\" stanza\n   When the user's\
    \ server receives a presence stanza of type\n   \"unsubscribe\" for the user from\
    \ the contact, if the stanza results in\n   a subscription state change from the\
    \ user's perspective then the\n   user's server SHOULD auto-reply by sending a\
    \ presence stanza of type\n   \"unsubscribed\" to the contact on behalf of the\
    \ user, MUST deliver the\n   \"unsubscribe\" stanza to the user, and MUST change\
    \ the state.  If no\n   subscription state change results, the user's server SHOULD\
    \ NOT\n   deliver the stanza and MUST NOT change the state.  These rules are\n\
    \   summarized in the following table.\n   Table 4: Recommended handling of inbound\
    \ \"unsubscribe\" stanzas\n   +------------------------------------------------------------------+\n\
    \   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n   +------------------------------------------------------------------+\n\
    \   |  \"None\"                  |  no        |  no state change         |\n \
    \  |  \"None + Pending Out\"    |  no        |  no state change         |\n  \
    \ |  \"None + Pending In\"     |  yes *     |  \"None\"                  |\n \
    \  |  \"None + Pending Out/In\" |  yes *     |  \"None + Pending Out\"    |\n\
    \   |  \"To\"                    |  no        |  no state change         |\n \
    \  |  \"To + Pending In\"       |  yes *     |  \"To\"                    |\n\
    \   |  \"From\"                  |  yes *     |  \"None\"                  |\n\
    \   |  \"From + Pending Out\"    |  yes *     |  \"None + Pending Out     |\n\
    \   |  \"Both\"                  |  yes *     |  \"To\"                    |\n\
    \   +------------------------------------------------------------------+\n   *\
    \ Server SHOULD auto-reply with \"unsubscribed\" stanza\n   When the user's server\
    \ receives a presence stanza of type\n   \"subscribed\" for the user from the\
    \ contact, it MUST NOT deliver the\n   stanza to the user and MUST NOT change\
    \ the subscription state if\n   there is no pending outbound request for access\
    \ to the contact's\n   presence information.  If there is a pending outbound request\
    \ for\n   access to the contact's presence information and the inbound presence\n\
    \   stanza of type \"subscribed\" results in a subscription state change,\n  \
    \ the user's server MUST deliver the stanza to the user and MUST change\n   the\
    \ subscription state.  If the user already has access to the\n   contact's presence\
    \ information, the inbound presence stanza of type\n   \"subscribed\" does not\
    \ result in a subscription state change;\n   therefore the user's server SHOULD\
    \ NOT deliver the stanza to the user\n   and MUST NOT change the subscription\
    \ state.  These rules are\n   summarized in the following table.\n   Table 5:\
    \ Recommended handling of inbound \"subscribed\" stanzas\n   +------------------------------------------------------------------+\n\
    \   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n   +------------------------------------------------------------------+\n\
    \   |  \"None\"                  |  no        |  no state change         |\n \
    \  |  \"None + Pending Out\"    |  yes       |  \"To\"                    |\n\
    \   |  \"None + Pending In\"     |  no        |  no state change         |\n \
    \  |  \"None + Pending Out/In\" |  yes       |  \"To + Pending In\"       |\n\
    \   |  \"To\"                    |  no        |  no state change         |\n \
    \  |  \"To + Pending In\"       |  no        |  no state change         |\n  \
    \ |  \"From\"                  |  no        |  no state change         |\n   |\
    \  \"From + Pending Out\"    |  yes       |  \"Both\"                  |\n   |\
    \  \"Both\"                  |  no        |  no state change         |\n   +------------------------------------------------------------------+\n\
    \   When the user's server receives a presence stanza of type\n   \"unsubscribed\"\
    \ for the user from the contact, it MUST deliver the\n   stanza to the user and\
    \ MUST change the subscription state if there is\n   a pending outbound request\
    \ for access to the contact's presence\n   information or if the user currently\
    \ has access to the contact's\n   presence information.  Otherwise, the user's\
    \ server SHOULD NOT\n   deliver the stanza and MUST NOT change the subscription\
    \ state.  These\n   rules are summarized in the following table.\n   Table 6:\
    \ Recommended handling of inbound \"unsubscribed\" stanzas\n   +------------------------------------------------------------------+\n\
    \   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n   +------------------------------------------------------------------+\n\
    \   |  \"None\"                  |  no        |  no state change         |\n \
    \  |  \"None + Pending Out\"    |  yes       |  \"None\"                  |\n\
    \   |  \"None + Pending In\"     |  no        |  no state change         |\n \
    \  |  \"None + Pending Out/In\" |  yes       |  \"None + Pending In\"     |\n\
    \   |  \"To\"                    |  yes       |  \"None\"                  |\n\
    \   |  \"To + Pending In\"       |  yes       |  \"None + Pending In\"     |\n\
    \   |  \"From\"                  |  no        |  no state change         |\n \
    \  |  \"From + Pending Out\"    |  yes       |  \"From\"                  |\n\
    \   |  \"Both\"                  |  yes       |  \"From\"                  |\n\
    \   +------------------------------------------------------------------+\n"
- title: 9.4.  Server Delivery and Client Acknowledgement of Subscription
  contents:
  - "9.4.  Server Delivery and Client Acknowledgement of Subscription\n      Requests\
    \ and State Change Notifications\n   When a server receives an inbound presence\
    \ stanza of type \"subscribe\"\n   (i.e., a subscription request) or of type \"\
    subscribed\",\n   \"unsubscribe\", or \"unsubscribed\" (i.e., a subscription state\
    \ change\n   notification), in addition to sending the appropriate roster push\
    \ (or\n   updated roster when the roster is next requested by an available\n \
    \  resource), it MUST deliver the request or notification to the\n   intended\
    \ recipient at least once.  A server MAY require the recipient\n   to acknowledge\
    \ receipt of all state change notifications (and MUST\n   require acknowledgement\
    \ in the case of subscription requests, i.e.,\n   presence stanzas of type \"\
    subscribe\").  In order to require\n   acknowledgement, a server SHOULD send the\
    \ request or notification to\n   the recipient each time the recipient logs in,\
    \ until the recipient\n   acknowledges receipt of the notification by \"affirming\"\
    \ or \"denying\"\n   the notification, as shown in the following table:\n   Table\
    \ 7: Acknowledgement of subscription state change notifications\n   +--------------------------------------------------+\n\
    \   |  STANZA TYPE   |  ACCEPT        |  DENY          |\n   +--------------------------------------------------+\n\
    \   |  subscribe     |  subscribed    |  unsubscribed  |\n   |  subscribed   \
    \ |  subscribe     |  unsubscribe   |\n   |  unsubscribe   |  unsubscribed  |\
    \  subscribed    |\n   |  unsubscribed  |  unsubscribe   |  subscribe     |\n\
    \   +--------------------------------------------------+\n   Obviously, given\
    \ the foregoing subscription state charts, some of the\n   acknowledgement stanzas\
    \ will be routed to the contact and result in\n   subscription state changes,\
    \ while others will not.  However, any such\n   stanzas MUST result in the server's\
    \ no longer sending the\n   subscription state notification to the user.\n   Because\
    \ a user's server MUST automatically generate outbound presence\n   stanzas of\
    \ type \"unsubscribe\" and \"unsubscribed\" upon receiving a\n   roster set with\
    \ the 'subscription' attribute set to a value of\n   \"remove\" (see Removing\
    \ a Roster Item and Cancelling All Subscriptions\n   (Section 8.6)), the server\
    \ MUST treat a roster remove request as\n   equivalent to sending both of those\
    \ presence stanzas for purposes of\n   determining whether to continue sending\
    \ subscription state change\n   notifications of type \"subscribe\" or \"subscribed\"\
    \ to the user.\n"
- title: 10.  Blocking Communication
  contents:
  - "10.  Blocking Communication\n   Most instant messaging systems have found it\
    \ necessary to implement\n   some method for users to block communications from\
    \ particular other\n   users (this is also required by sections 5.1.5, 5.1.15,\
    \ 5.3.2, and\n   5.4.10 of [IMP-REQS]).  In XMPP this is done by managing one's\n\
    \   privacy lists using the 'jabber:iq:privacy' namespace.\n   Server-side privacy\
    \ lists enable successful completion of the\n   following use cases:\n   o  Retrieving\
    \ one's privacy lists.\n   o  Adding, removing, and editing one's privacy lists.\n\
    \   o  Setting, changing, or declining active lists.\n   o  Setting, changing,\
    \ or declining the default list (i.e., the list\n      that is active by default).\n\
    \   o  Allowing or blocking messages based on JID, group, or subscription\n  \
    \    type (or globally).\n   o  Allowing or blocking inbound presence notifications\
    \ based on JID,\n      group, or subscription type (or globally).\n   o  Allowing\
    \ or blocking outbound presence notifications based on JID,\n      group, or subscription\
    \ type (or globally).\n   o  Allowing or blocking IQ stanzas based on JID, group,\
    \ or\n      subscription type (or globally).\n   o  Allowing or blocking all communications\
    \ based on JID, group, or\n      subscription type (or globally).\n   Note: Presence\
    \ notifications do not include presence subscriptions,\n   only presence information\
    \ that is broadcasted to entities that are\n   subscribed to a user's presence\
    \ information.  Thus this includes\n   presence stanzas with no 'type' attribute\
    \ or of type='unavailable'\n   only.\n"
- title: 10.1.  Syntax and Semantics
  contents:
  - "10.1.  Syntax and Semantics\n   A user MAY define one or more privacy lists,\
    \ which are stored by the\n   user's server.  Each <list/> element contains one\
    \ or more rules in\n   the form of <item/> elements, and each <item/> element\
    \ uses\n   attributes to define a privacy rule type, a specific value to which\n\
    \   the rule applies, the relevant action, and the place of the item in\n   the\
    \ processing order.\n   The syntax is as follows:\n   <iq>\n     <query xmlns='jabber:iq:privacy'>\n\
    \       <list name='foo'>\n         <item\n             type='[jid|group|subscription]'\n\
    \             value='bar'\n             action='[allow|deny]'\n             order='unsignedInt'>\n\
    \           [<message/>]\n           [<presence-in/>]\n           [<presence-out/>]\n\
    \           [<iq/>]\n         </item>\n       </list>\n     </query>\n   </iq>\n\
    \   If the type is \"jid\", then the 'value' attribute MUST contain a valid\n\
    \   Jabber ID.  JIDs SHOULD be matched in the following order:\n   1.  <user@domain/resource>\
    \ (only that resource matches)\n   2.  <user@domain> (any resource matches)\n\
    \   3.  <domain/resource> (only that resource matches)\n   4.  <domain> (the domain\
    \ itself matches, as does any user@domain,\n       domain/resource, or address\
    \ containing a subdomain)\n   If the type is \"group\", then the 'value' attribute\
    \ SHOULD contain the\n   name of a group in the user's roster.  (If a client attempts\
    \ to\n   update, create, or delete a list item with a group that is not in the\n\
    \   user's roster, the server SHOULD return to the client an\n   <item-not-found/>\
    \ stanza error.)\n   If the type is \"subscription\", then the 'value' attribute\
    \ MUST be one\n   of \"both\", \"to\", \"from\", or \"none\" as defined under\
    \ Roster Syntax and\n   Semantics (Section 7.1), where \"none\" includes entities\
    \ that are\n   totally unknown to the user and therefore not in the user's roster\
    \ at\n   all.\n   If no 'type' attribute is included, the rule provides the\n\
    \   \"fall-through\" case.\n   The 'action' attribute MUST be included and its\
    \ value MUST be either\n   \"allow\" or \"deny\".\n   The 'order' attribute MUST\
    \ be included and its value MUST be a\n   non-negative integer that is unique\
    \ among all items in the list.  (If\n   a client attempts to create or update\
    \ a list with non-unique order\n   values, the server MUST return to the client\
    \ a <bad-request/> stanza\n   error.)\n   The <item/> element MAY contain one\
    \ or more child elements that\n   enable an entity to specify more granular control\
    \ over which kinds of\n   stanzas are to be blocked (i.e., rather than blocking\
    \ all stanzas).\n   The allowable child elements are:\n   o  <message/> -- blocks\
    \ incoming message stanzas\n   o  <iq/> -- blocks incoming IQ stanzas\n   o  <presence-in/>\
    \ -- blocks incoming presence notifications\n   o  <presence-out/> -- blocks outgoing\
    \ presence notifications\n   Within the 'jabber:iq:privacy' namespace, the <query/>\
    \ child of an IQ\n   stanza of type \"set\" MUST NOT include more than one child\
    \ element\n   (i.e., the stanza MUST contain only one <active/> element, one\n\
    \   <default/> element, or one <list/> element); if a sending entity\n   violates\
    \ this rule, the receiving entity MUST return a <bad-request/>\n   stanza error.\n\
    \   When a client adds or updates a privacy list, the <list/> element\n   SHOULD\
    \ contain at least one <item/> child element; when a client\n   removes a privacy\
    \ list, the <list/> element MUST NOT contain any\n   <item/> child elements.\n\
    \   When a client updates a privacy list, it must include all of the\n   desired\
    \ items (i.e., not a \"delta\").\n"
- title: 10.2.  Business Rules
  contents:
  - "10.2.  Business Rules\n   1.  If there is an active list set for a session, it\
    \ affects only the\n       session(s) for which it is activated, and only for\
    \ the duration\n       of the session(s); the server MUST apply the active list\
    \ only and\n       MUST NOT apply the default list (i.e., there is no \"layering\"\
    \ of\n       lists).\n   2.  The default list applies to the user as a whole,\
    \ and is processed\n       if there is no active list set for the target session/resource\
    \ to\n       which a stanza is addressed, or if there are no current sessions\n\
    \       for the user.\n   3.  If there is no active list set for a session (or\
    \ there are no\n       current sessions for the user), and there is no default\
    \ list,\n       then all stanzas SHOULD BE accepted or appropriately processed\
    \ by\n       the server on behalf of the user in accordance with the Server\n\
    \       Rules for Handling XML Stanzas (Section 11).\n   4.  Privacy lists MUST\
    \ be the first delivery rule applied by a\n       server, superseding (1) the\
    \ routing and delivery rules specified\n       in Server Rules for Handling XML\
    \ Stanzas (Section 11), and (2)\n       the handling of subscription-related presence\
    \ stanzas (and\n       corresponding generation of roster pushes) specified in\n\
    \       Integration of Roster Items and Presence Subscriptions (Section\n    \
    \   8).\n   5.  The order in which privacy list items are processed by the server\n\
    \       is important.  List items MUST be processed in ascending order\n     \
    \  determined by the integer values of the 'order' attribute for\n       each\
    \ <item/>.\n   6.  As soon as a stanza is matched against a privacy list rule,\
    \ the\n       server MUST appropriately handle the stanza in accordance with\n\
    \       the rule and cease processing.\n   7.  If no fall-through item is provided\
    \ in a list, the fall-through\n       action is assumed to be \"allow\".\n   8.\
    \  If a user updates the definition for an active list, subsequent\n       processing\
    \ based on that active list MUST use the updated\n       definition (for all resources\
    \ to which that active list currently\n       applies).\n   9.  If a change to\
    \ the subscription state or roster group of a roster\n       item defined in an\
    \ active or default list occurs during a user's\n       session, subsequent processing\
    \ based on that list MUST take into\n       account the changed state or group\
    \ (for all resources to which\n       that list currently applies).\n   10. When\
    \ the definition for a rule is modified, the server MUST send\n       an IQ stanza\
    \ of type \"set\" to all connected resources, containing\n       a <query/> element\
    \ with only one <list/> child element, where the\n       'name' attribute is set\
    \ to the name of the modified privacy list.\n       These \"privacy list pushes\"\
    \ adhere to the same semantics as the\n       \"roster pushes\" used in roster\
    \ management, except that only the\n       list name itself (not the full list\
    \ definition or the \"delta\") is\n       pushed to the connected resources. \
    \ It is up to the receiving\n       resource to determine whether to retrieve\
    \ the modified list\n       definition, although a connected resource SHOULD do\
    \ so if the\n       list currently applies to it.\n   11. When a resource attempts\
    \ to remove a list or specify a new\n       default list while that list applies\
    \ to a connected resource\n       other than the sending resource, the server\
    \ MUST return a\n       <conflict/> error to the sending resource and MUST NOT\
    \ make the\n       requested change.\n"
- title: 10.3.  Retrieving One's Privacy Lists
  contents:
  - "10.3.  Retrieving One's Privacy Lists\n   Example: Client requests names of privacy\
    \ lists from server:\n   <iq from='romeo@example.net/orchard' type='get' id='getlist1'>\n\
    \     <query xmlns='jabber:iq:privacy'/>\n   </iq>\n   Example: Server sends names\
    \ of privacy lists to client, preceded by\n   active list and default list:\n\
    \   <iq type='result' id='getlist1' to='romeo@example.net/orchard'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <active name='private'/>\n       <default\
    \ name='public'/>\n       <list name='public'/>\n       <list name='private'/>\n\
    \       <list name='special'/>\n     </query>\n   </iq>\n   Example: Client requests\
    \ a privacy list from server:\n   <iq from='romeo@example.net/orchard' type='get'\
    \ id='getlist2'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='public'/>\n\
    \     </query>\n   </iq>\n   Example: Server sends a privacy list to client:\n\
    \   <iq type='result' id='getlist2' to='romeo@example.net/orchard'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <list name='public'>\n         <item type='jid'\n\
    \               value='tybalt@example.com'\n               action='deny'\n   \
    \            order='1'/>\n         <item action='allow' order='2'/>\n       </list>\n\
    \     </query>\n   </iq>\n   Example: Client requests another privacy list from\
    \ server:\n   <iq from='romeo@example.net/orchard' type='get' id='getlist3'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='private'/>\n     </query>\n\
    \   </iq>\n   Example: Server sends another privacy list to client:\n   <iq type='result'\
    \ id='getlist3' to='romeo@example.net/orchard'>\n     <query xmlns='jabber:iq:privacy'>\n\
    \       <list name='private'>\n         <item type='subscription'\n          \
    \     value='both'\n               action='allow'\n               order='10'/>\n\
    \         <item action='deny' order='15'/>\n       </list>\n     </query>\n  \
    \ </iq>\n   Example: Client requests yet another privacy list from server:\n \
    \  <iq from='romeo@example.net/orchard' type='get' id='getlist4'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <list name='special'/>\n     </query>\n \
    \  </iq>\n   Example: Server sends yet another privacy list to client:\n   <iq\
    \ type='result' id='getlist4' to='romeo@example.net/orchard'>\n     <query xmlns='jabber:iq:privacy'>\n\
    \       <list name='special'>\n         <item type='jid'\n               value='juliet@example.com'\n\
    \               action='allow'\n               order='6'/>\n         <item type='jid'\n\
    \               value='benvolio@example.org'\n               action='allow'\n\
    \               order='7'/>\n         <item type='jid'\n               value='mercutio@example.org'\n\
    \               action='allow'\n               order='42'/>\n         <item action='deny'\
    \ order='666'/>\n       </list>\n     </query>\n   </iq>\n   In this example,\
    \ the user has three lists: (1) 'public', which allows\n   communications from\
    \ everyone except one specific entity (this is the\n   default list); (2) 'private',\
    \ which allows communications only with\n   contacts who have a bidirectional\
    \ subscription with the user (this is\n   the active list); and (3) 'special',\
    \ which allows communications only\n   with three specific entities.\n   If the\
    \ user attempts to retrieve a list but a list by that name does\n   not exist,\
    \ the server MUST return an <item-not-found/> stanza error\n   to the user:\n\
    \   Example: Client attempts to retrieve non-existent list:\n   <iq to='romeo@example.net/orchard'\
    \ type='error' id='getlist5'>\n     <query xmlns='jabber:iq:privacy'>\n      \
    \ <list name='The Empty Set'/>\n     </query>\n     <error type='cancel'>\n  \
    \     <item-not-found\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   The user is allowed to retrieve only one list at\
    \ a time.  If the user\n   attempts to retrieve more than one list in the same\
    \ request, the\n   server MUST return a <bad request/> stanza error to the user:\n\
    \   Example: Client attempts to retrieve more than one list:\n   <iq to='romeo@example.net/orchard'\
    \ type='error' id='getlist6'>\n     <query xmlns='jabber:iq:privacy'>\n      \
    \ <list name='public'/>\n       <list name='private'/>\n       <list name='special'/>\n\
    \     </query>\n     <error type='modify'>\n       <bad-request\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n"
- title: 10.4.  Managing Active Lists
  contents:
  - "10.4.  Managing Active Lists\n   In order to set or change the active list currently\
    \ being applied by\n   the server, the user MUST send an IQ stanza of type \"\
    set\" with a\n   <query/> element qualified by the 'jabber:iq:privacy' namespace\
    \ that\n   contains an empty <active/> child element possessing a 'name'\n   attribute\
    \ whose value is set to the desired list name.\n   Example: Client requests change\
    \ of active list:\n   <iq from='romeo@example.net/orchard' type='set' id='active1'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <active name='special'/>\n   \
    \  </query>\n   </iq>\n   The server MUST activate and apply the requested list\
    \ before sending\n   the result back to the client.\n   Example: Server acknowledges\
    \ success of active list change:\n   <iq type='result' id='active1' to='romeo@example.net/orchard'/>\n\
    \   If the user attempts to set an active list but a list by that name\n   does\
    \ not exist, the server MUST return an <item-not-found/> stanza\n   error to the\
    \ user:\n   Example: Client attempts to set a non-existent list as active:\n \
    \  <iq to='romeo@example.net/orchard' type='error' id='active2'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <active name='The Empty Set'/>\n     </query>\n\
    \     <error type='cancel'>\n       <item-not-found\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   In order to decline the use of any active list, the\
    \ connected\n   resource MUST send an empty <active/> element with no 'name'\n\
    \   attribute.\n   Example: Client declines the use of active lists:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='active3'>\n     <query xmlns='jabber:iq:privacy'>\n       <active/>\n\
    \     </query>\n   </iq>\n   Example: Server acknowledges success of declining\
    \ any active list:\n   <iq type='result' id='active3' to='romeo@example.net/orchard'/>\n"
- title: 10.5.  Managing the Default List
  contents:
  - "10.5.  Managing the Default List\n   In order to change its default list (which\
    \ applies to the user as a\n   whole, not only the sending resource), the user\
    \ MUST send an IQ\n   stanza of type \"set\" with a <query/> element qualified\
    \ by the\n   'jabber:iq:privacy' namespace that contains an empty <default/> child\n\
    \   element possessing a 'name' attribute whose value is set to the\n   desired\
    \ list name.\n   Example: User requests change of default list:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='default1'>\n     <query xmlns='jabber:iq:privacy'>\n       <default\
    \ name='special'/>\n     </query>\n   </iq>\n   Example: Server acknowledges success\
    \ of default list change:\n   <iq type='result' id='default1' to='romeo@example.net/orchard'/>\n\
    \   If the user attempts to change which list is the default list but the\n  \
    \ default list is in use by at least one connected resource other than\n   the\
    \ sending resource, the server MUST return a <conflict/> stanza\n   error to the\
    \ sending resource:\n   Example: Client attempts to change the default list but\
    \ that list is\n   in use by another resource:\n   <iq to='romeo@example.net/orchard'\
    \ type='error' id='default1'>\n     <query xmlns='jabber:iq:privacy'>\n      \
    \ <default name='special'/>\n     </query>\n     <error type='cancel'>\n     \
    \  <conflict\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n     </error>\n\
    \   </iq>\n   If the user attempts to set a default list but a list by that name\n\
    \   does not exist, the server MUST return an <item-not-found/> stanza\n   error\
    \ to the user:\n   Example: Client attempts to set a non-existent list as default:\n\
    \   <iq to='romeo@example.net/orchard' type='error' id='default1'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <default name='The Empty Set'/>\n     </query>\n\
    \     <error type='cancel'>\n       <item-not-found\n           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   In order to decline the use of a default list (i.e.,\
    \ to use the\n   domain's stanza routing rules at all times), the user MUST send\
    \ an\n   empty <default/> element with no 'name' attribute.\n   Example: Client\
    \ declines the use of the default list:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='default2'>\n     <query xmlns='jabber:iq:privacy'>\n       <default/>\n\
    \     </query>\n   </iq>\n   Example: Server acknowledges success of declining\
    \ any default list:\n   <iq type='result' id='default2' to='romeo@example.net/orchard'/>\n\
    \   If one connected resource attempts to decline the use of a default\n   list\
    \ for the user as a whole but the default list currently applies\n   to at least\
    \ one other connected resource, the server MUST return a\n   <conflict/> error\
    \ to the sending resource:\n   Example: Client attempts to decline a default list\
    \ but that list is\n   in use by another resource:\n   <iq to='romeo@example.net/orchard'\
    \ type='error' id='default3'>\n     <query xmlns='jabber:iq:privacy'>\n      \
    \ <default/>\n     </query>\n     <error type='cancel'>\n       <conflict\n  \
    \         xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n     </error>\n   </iq>\n"
- title: 10.6.  Editing a Privacy List
  contents:
  - "10.6.  Editing a Privacy List\n   In order to edit a privacy list, the user MUST\
    \ send an IQ stanza of\n   type \"set\" with a <query/> element qualified by the\n\
    \   'jabber:iq:privacy' namespace that contains one <list/> child element\n  \
    \ possessing a 'name' attribute whose value is set to the list name the\n   user\
    \ would like to edit.  The <list/> element MUST contain one or\n   more <item/>\
    \ elements, which specify the user's desired changes to\n   the list by including\
    \ all elements in the list (not the \"delta\").\n   Example: Client edits a privacy\
    \ list:\n   <iq from='romeo@example.net/orchard' type='set' id='edit1'>\n    \
    \ <query xmlns='jabber:iq:privacy'>\n       <list name='public'>\n         <item\
    \ type='jid'\n               value='tybalt@example.com'\n               action='deny'\n\
    \               order='3'/>\n         <item type='jid'\n               value='paris@example.org'\n\
    \               action='deny'\n               order='5'/>\n         <item action='allow'\
    \ order='68'/>\n       </list>\n     </query>\n   </iq>\n   Example: Server acknowledges\
    \ success of list edit:\n   <iq type='result' id='edit1' to='romeo@example.net/orchard'/>\n\
    \   Note: The value of the 'order' attribute for any given item is not\n   fixed.\
    \  Thus in the foregoing example if the user would like to add 4\n   items between\
    \ the \"tybalt@example.com\" item and the\n   \"paris@example.org\" item, the\
    \ user's client MUST renumber the\n   relevant items before submitting the list\
    \ to the server.\n   The server MUST now send a \"privacy list push\" to all connected\n\
    \   resources:\n   Example: Privacy list push on list edit:\n   <iq to='romeo@example.net/orchard'\
    \ type='set' id='push1'>\n     <query xmlns='jabber:iq:privacy'>\n       <list\
    \ name='public'/>\n     </query>\n   </iq>\n   <iq to='romeo@example.net/home'\
    \ type='set' id='push2'>\n     <query xmlns='jabber:iq:privacy'>\n       <list\
    \ name='public'/>\n     </query>\n   </iq>\n   In accordance with the semantics\
    \ of IQ stanzas defined in\n   [XMPP-CORE], each connected resource MUST return\
    \ an IQ result to the\n   server as well:\n   Example: Acknowledging receipt of\
    \ privacy list pushes:\n   <iq from='romeo@example.net/orchard'\n       type='result'\n\
    \       id='push1'/>\n   <iq from='romeo@example.net/home'\n       type='result'\n\
    \       id='push2'/>\n"
- title: 10.7.  Adding a New Privacy List
  contents:
  - "10.7.  Adding a New Privacy List\n   The same protocol used to edit an existing\
    \ list is used to create a\n   new list.  If the list name matches that of an\
    \ existing list, the\n   request to add a new list will overwrite the old one.\
    \  As with list\n   edits, the server MUST also send a \"privacy list push\" to\
    \ all\n   connected resources.\n"
- title: 10.8.  Removing a Privacy List
  contents:
  - "10.8.  Removing a Privacy List\n   In order to remove a privacy list, the user\
    \ MUST send an IQ stanza of\n   type \"set\" with a <query/> element qualified\
    \ by the\n   'jabber:iq:privacy' namespace that contains one empty <list/> child\n\
    \   element possessing a 'name' attribute whose value is set to the list\n   name\
    \ the user would like to remove.\n   Example: Client removes a privacy list:\n\
    \   <iq from='romeo@example.net/orchard' type='set' id='remove1'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <list name='private'/>\n     </query>\n \
    \  </iq>\n   Example: Server acknowledges success of list removal:\n   <iq type='result'\
    \ id='remove1' to='romeo@example.net/orchard'/>\n   If a user attempts to remove\
    \ a list that is currently being applied\n   to at least one resource other than\
    \ the sending resource, the server\n   MUST return a <conflict/> stanza error\
    \ to the user; i.e., the user\n   MUST first set another list to active or default\
    \ before attempting to\n   remove it.  If the user attempts to remove a list but\
    \ a list by that\n   name does not exist, the server MUST return an <item-not-found/>\n\
    \   stanza error to the user.  If the user attempts to remove more than\n   one\
    \ list in the same request, the server MUST return a <bad request/>\n   stanza\
    \ error to the user.\n"
- title: 10.9.  Blocking Messages
  contents:
  - "10.9.  Blocking Messages\n   Server-side privacy lists enable a user to block\
    \ incoming messages\n   from other entities based on the entity's JID, roster\
    \ group, or\n   subscription status (or globally).  The following examples illustrate\n\
    \   the protocol.  (Note: For the sake of brevity, IQ stanzas of type\n   \"result\"\
    \ are not shown in the following examples, nor are \"privacy\n   list pushes\"\
    .)\n   Example: User blocks based on JID:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='msg1'>\n     <query xmlns='jabber:iq:privacy'>\n       <list\
    \ name='message-jid-example'>\n         <item type='jid'\n               value='tybalt@example.com'\n\
    \               action='deny'\n               order='3'>\n           <message/>\n\
    \         </item>\n       </list>\n     </query>\n   </iq>\n   As a result of\
    \ creating and applying the foregoing list, the user\n   will not receive messages\
    \ from the entity with the specified JID.\n   Example: User blocks based on roster\
    \ group:\n   <iq from='romeo@example.net/orchard' type='set' id='msg2'>\n    \
    \ <query xmlns='jabber:iq:privacy'>\n       <list name='message-group-example'>\n\
    \         <item type='group'\n               value='Enemies'\n               action='deny'\n\
    \               order='4'>\n           <message/>\n         </item>\n       </list>\n\
    \     </query>\n   </iq>\n   As a result of creating and applying the foregoing\
    \ list, the user\n   will not receive messages from any entities in the specified\
    \ roster\n   group.\n   Example: User blocks based on subscription type:\n   <iq\
    \ from='romeo@example.net/orchard' type='set' id='msg3'>\n     <query xmlns='jabber:iq:privacy'>\n\
    \       <list name='message-sub-example'>\n         <item type='subscription'\n\
    \               value='none'\n               action='deny'\n               order='5'>\n\
    \           <message/>\n         </item>\n       </list>\n     </query>\n   </iq>\n\
    \   As a result of creating and applying the foregoing list, the user\n   will\
    \ not receive messages from any entities with the specified\n   subscription type.\n\
    \   Example: User blocks globally:\n   <iq from='romeo@example.net/orchard' type='set'\
    \ id='msg4'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='message-global-example'>\n\
    \         <item action='deny' order='6'>\n           <message/>\n         </item>\n\
    \       </list>\n     </query>\n   </iq>\n   As a result of creating and applying\
    \ the foregoing list, the user\n   will not receive messages from any other users.\n"
- title: 10.10.  Blocking Inbound Presence Notifications
  contents:
  - "10.10.  Blocking Inbound Presence Notifications\n   Server-side privacy lists\
    \ enable a user to block incoming presence\n   notifications from other entities\
    \ based on the entity's JID, roster\n   group, or subscription status (or globally).\
    \  The following examples\n   illustrate the protocol.\n   Note: Presence notifications\
    \ do not include presence subscriptions,\n   only presence information that is\
    \ broadcasted to the user because the\n   user is currently subscribed to a contact's\
    \ presence information.\n   Thus this includes presence stanzas with no 'type'\
    \ attribute or of\n   type='unavailable' only.\n   Example: User blocks based\
    \ on JID:\n   <iq from='romeo@example.net/orchard' type='set' id='presin1'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presin-jid-example'>\n\
    \         <item type='jid'\n               value='tybalt@example.com'\n      \
    \         action='deny'\n               order='7'>\n           <presence-in/>\n\
    \         </item>\n       </list>\n     </query>\n   </iq>\n   As a result of\
    \ creating and applying the foregoing list, the user\n   will not receive presence\
    \ notifications from the entity with the\n   specified JID.\n   Example: User\
    \ blocks based on roster group:\n   <iq from='romeo@example.net/orchard' type='set'\
    \ id='presin2'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='presin-group-example'>\n\
    \         <item type='group'\n               value='Enemies'\n               action='deny'\n\
    \               order='8'>\n           <presence-in/>\n         </item>\n    \
    \   </list>\n     </query>\n   </iq>\n   As a result of creating and applying\
    \ the foregoing list, the user\n   will not receive presence notifications from\
    \ any entities in the\n   specified roster group.\n   Example: User blocks based\
    \ on subscription type:\n   <iq from='romeo@example.net/orchard' type='set' id='presin3'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presin-sub-example'>\n\
    \         <item type='subscription'\n               value='to'\n             \
    \  action='deny'\n               order='9'>\n           <presence-in/>\n     \
    \    </item>\n       </list>\n     </query>\n   </iq>\n   As a result of creating\
    \ and applying the foregoing list, the user\n   will not receive presence notifications\
    \ from any entities with the\n   specified subscription type.\n   Example: User\
    \ blocks globally:\n   <iq from='romeo@example.net/orchard' type='set' id='presin4'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presin-global-example'>\n\
    \         <item action='deny' order='11'>\n           <presence-in/>\n       \
    \  </item>\n       </list>\n     </query>\n   </iq>\n   As a result of creating\
    \ and applying the foregoing list, the user\n   will not receive presence notifications\
    \ from any other users.\n"
- title: 10.11.  Blocking Outbound Presence Notifications
  contents:
  - "10.11.  Blocking Outbound Presence Notifications\n   Server-side privacy lists\
    \ enable a user to block outgoing presence\n   notifications to other entities\
    \ based on the entity's JID, roster\n   group, or subscription status (or globally).\
    \  The following examples\n   illustrate the protocol.\n   Note: Presence notifications\
    \ do not include presence subscriptions,\n   only presence information that is\
    \ broadcasted to contacts because\n   those contacts are currently subscribed\
    \ to the user's presence\n   information.  Thus this includes presence stanzas\
    \ with no 'type'\n   attribute or of type='unavailable' only.\n   Example: User\
    \ blocks based on JID:\n   <iq from='romeo@example.net/orchard' type='set' id='presout1'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presout-jid-example'>\n\
    \         <item type='jid'\n               value='tybalt@example.com'\n      \
    \         action='deny'\n               order='13'>\n           <presence-out/>\n\
    \         </item>\n       </list>\n     </query>\n   </iq>\n   As a result of\
    \ creating and applying the foregoing list, the user\n   will not send presence\
    \ notifications to the entity with the specified\n   JID.\n   Example: User blocks\
    \ based on roster group:\n   <iq from='romeo@example.net/orchard' type='set' id='presout2'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presout-group-example'>\n\
    \         <item type='group'\n               value='Enemies'\n               action='deny'\n\
    \               order='15'>\n           <presence-out/>\n         </item>\n  \
    \     </list>\n     </query>\n   </iq>\n   As a result of creating and applying\
    \ the foregoing list, the user\n   will not send presence notifications to any\
    \ entities in the specified\n   roster group.\n   Example: User blocks based on\
    \ subscription type:\n   <iq from='romeo@example.net/orchard' type='set' id='presout3'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presout-sub-example'>\n\
    \         <item type='subscription'\n               value='from'\n           \
    \    action='deny'\n               order='17'>\n           <presence-out/>\n \
    \        </item>\n       </list>\n     </query>\n   </iq>\n   As a result of creating\
    \ and applying the foregoing list, the user\n   will not send presence notifications\
    \ to any entities with the\n   specified subscription type.\n   Example: User\
    \ blocks globally:\n   <iq from='romeo@example.net/orchard' type='set' id='presout4'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='presout-global-example'>\n\
    \         <item action='deny' order='23'>\n           <presence-out/>\n      \
    \   </item>\n       </list>\n     </query>\n   </iq>\n   As a result of creating\
    \ and applying the foregoing list, the user\n   will not send presence notifications\
    \ to any other users.\n"
- title: 10.12.  Blocking IQ Stanzas
  contents:
  - "10.12.  Blocking IQ Stanzas\n   Server-side privacy lists enable a user to block\
    \ incoming IQ stanzas\n   from other entities based on the entity's JID, roster\
    \ group, or\n   subscription status (or globally).  The following examples illustrate\n\
    \   the protocol.\n   Example: User blocks based on JID:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='iq1'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='iq-jid-example'>\n\
    \         <item type='jid'\n               value='tybalt@example.com'\n      \
    \         action='deny'\n               order='29'>\n           <iq/>\n      \
    \   </item>\n       </list>\n     </query>\n   </iq>\n   As a result of creating\
    \ and applying the foregoing list, the user\n   will not receive IQ stanzas from\
    \ the entity with the specified JID.\n   Example: User blocks based on roster\
    \ group:\n   <iq from='romeo@example.net/orchard' type='set' id='iq2'>\n     <query\
    \ xmlns='jabber:iq:privacy'>\n       <list name='iq-group-example'>\n        \
    \ <item type='group'\n               value='Enemies'\n               action='deny'\n\
    \               order='31'>\n           <iq/>\n         </item>\n       </list>\n\
    \     </query>\n   </iq>\n   As a result of creating and applying the foregoing\
    \ list, the user\n   will not receive IQ stanzas from any entities in the specified\
    \ roster\n   group.\n   Example: User blocks based on subscription type:\n   <iq\
    \ from='romeo@example.net/orchard' type='set' id='iq3'>\n     <query xmlns='jabber:iq:privacy'>\n\
    \       <list name='iq-sub-example'>\n         <item type='subscription'\n   \
    \            value='none'\n               action='deny'\n               order='17'>\n\
    \           <iq/>\n         </item>\n       </list>\n     </query>\n   </iq>\n\
    \   As a result of creating and applying the foregoing list, the user\n   will\
    \ not receive IQ stanzas from any entities with the specified\n   subscription\
    \ type.\n   Example: User blocks globally:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='iq4'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='iq-global-example'>\n\
    \         <item action='deny' order='1'>\n           <iq/>\n         </item>\n\
    \       </list>\n     </query>\n   </iq>\n   As a result of creating and applying\
    \ the foregoing list, the user\n   will not receive IQ stanzas from any other\
    \ users.\n"
- title: 10.13.  Blocking All Communication
  contents:
  - "10.13.  Blocking All Communication\n   Server-side privacy lists enable a user\
    \ to block all stanzas from and\n   to other entities based on the entity's JID,\
    \ roster group, or\n   subscription status (or globally).  Note that this includes\n\
    \   subscription-related presence stanzas, which are excluded by Blocking\n  \
    \ Inbound Presence Notifications (Section 10.10).  The following\n   examples\
    \ illustrate the protocol.\n   Example: User blocks based on JID:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='all1'>\n     <query xmlns='jabber:iq:privacy'>\n       <list\
    \ name='all-jid-example'>\n         <item type='jid'\n               value='tybalt@example.com'\n\
    \               action='deny'\n               order='23'/>\n       </list>\n \
    \    </query>\n   </iq>\n   As a result of creating and applying the foregoing\
    \ list, the user\n   will not receive any communications from, nor send any stanzas\
    \ to,\n   the entity with the specified JID.\n   Example: User blocks based on\
    \ roster group:\n   <iq from='romeo@example.net/orchard' type='set' id='all2'>\n\
    \     <query xmlns='jabber:iq:privacy'>\n       <list name='all-group-example'>\n\
    \         <item type='group'\n               value='Enemies'\n               action='deny'\n\
    \               order='13'/>\n       </list>\n     </query>\n   </iq>\n   As a\
    \ result of creating and applying the foregoing list, the user\n   will not receive\
    \ any communications from, nor send any stanzas to,\n   any entities in the specified\
    \ roster group.\n   Example: User blocks based on subscription type:\n   <iq from='romeo@example.net/orchard'\
    \ type='set' id='all3'>\n     <query xmlns='jabber:iq:privacy'>\n       <list\
    \ name='all-sub-example'>\n         <item type='subscription'\n              \
    \ value='none'\n               action='deny'\n               order='11'/>\n  \
    \     </list>\n     </query>\n   </iq>\n   As a result of creating and applying\
    \ the foregoing list, the user\n   will not receive any communications from, nor\
    \ send any stanzas to,\n   any entities with the specified subscription type.\n\
    \   Example: User blocks globally:\n   <iq from='romeo@example.net/orchard' type='set'\
    \ id='all4'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='all-global-example'>\n\
    \         <item action='deny' order='7'/>\n       </list>\n     </query>\n   </iq>\n\
    \   As a result of creating and applying the foregoing list, the user\n   will\
    \ not receive any communications from, nor send any stanzas to,\n   any other\
    \ users.\n"
- title: 10.14.  Blocked Entity Attempts to Communicate with User
  contents:
  - "10.14.  Blocked Entity Attempts to Communicate with User\n   If a blocked entity\
    \ attempts to send message or presence stanzas to\n   the user, the user's server\
    \ SHOULD silently drop the stanza and MUST\n   NOT return an error to the sending\
    \ entity.\n   If a blocked entity attempts to send an IQ stanza of type \"get\"\
    \ or\n   \"set\" to the user, the user's server MUST return to the sending\n \
    \  entity a <service-unavailable/> stanza error, since this is the\n   standard\
    \ error code sent from a client that does not understand the\n   namespace of\
    \ an IQ get or set.  IQ stanzas of other types SHOULD be\n   silently dropped\
    \ by the server.\n   Example: Blocked entity attempts to send IQ get:\n   <iq\
    \ type='get'\n       to='romeo@example.net'\n       from='tybalt@example.com/pda'\n\
    \       id='probing1'>\n     <query xmlns='jabber:iq:version'/>\n   </iq>\n  \
    \ Example: Server returns error to blocked entity:\n   <iq type='error'\n    \
    \   from='romeo@example.net'\n       to='tybalt@example.com/pda'\n       id='probing1'>\n\
    \     <query xmlns='jabber:iq:version'/>\n     <error type='cancel'>\n       <service-unavailable\n\
    \           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n     </error>\n   </iq>\n"
- title: 10.15.  Higher-Level Heuristics
  contents:
  - "10.15.  Higher-Level Heuristics\n   When building a representation of a higher-level\
    \ privacy heuristic, a\n   client SHOULD use the simplest possible representation.\n\
    \   For example, the heuristic \"block all communications with any user\n   not\
    \ in my roster\" could be constructed in any of the following ways:\n   o  allow\
    \ communications from all JIDs in my roster (i.e., listing\n      each JID as\
    \ a separate list item), but block communications with\n      everyone else\n\
    \   o  allow communications from any user who is in one of the groups\n      that\
    \ make up my roster (i.e., listing each group as a separate\n      list item),\
    \ but block communications from everyone else\n   o  allow communications from\
    \ any user with whom I have a subscription\n      of 'both' or 'to' or 'from'\
    \ (i.e., listing each subscription value\n      separately), but block communications\
    \ from everyone else\n   o  block communications from anyone whose subscription\
    \ state is\n      'none'\n   The final representation is the simplest and SHOULD\
    \ be used; here is\n   the XML that would be sent in this case:\n   <iq type='set'\
    \ id='heuristic1'>\n     <query xmlns='jabber:iq:privacy'>\n       <list name='heuristic-example'>\n\
    \         <item type='subscription'\n               value='none'\n           \
    \    action='deny'\n               order='437'/>\n       </list>\n     </query>\n\
    \   </iq>\n"
- title: 11.  Server Rules for Handling XML Stanzas
  contents:
  - "11.  Server Rules for Handling XML Stanzas\n   Basic routing and delivery rules\
    \ for servers are defined in\n   [XMPP-CORE].  This section defines additional\
    \ rules for\n   XMPP-compliant instant messaging and presence servers.\n"
- title: 11.1.  Inbound Stanzas
  contents:
  - "11.1.  Inbound Stanzas\n   If the hostname of the domain identifier portion of\
    \ the JID contained\n   in the 'to' attribute of an inbound stanza matches a hostname\
    \ of the\n   server itself and the JID contained in the 'to' attribute is of the\n\
    \   form <user@example.com> or <user@example.com/resource>, the server\n   MUST\
    \ first apply any privacy lists (Section 10) that are in force,\n   then follow\
    \ the rules defined below:\n   1.  If the JID is of the form <user@domain/resource>\
    \ and an available\n       resource matches the full JID, the recipient's server\
    \ MUST\n       deliver the stanza to that resource.\n   2.  Else if the JID is\
    \ of the form <user@domain> or <user@domain/\n       resource> and the associated\
    \ user account does not exist, the\n       recipient's server (a) SHOULD silently\
    \ ignore the stanza (i.e.,\n       neither deliver it nor return an error) if\
    \ it is a presence\n       stanza, (b) MUST return a <service-unavailable/> stanza\
    \ error to\n       the sender if it is an IQ stanza, and (c) SHOULD return a\n\
    \       <service-unavailable/> stanza error to the sender if it is a\n       message\
    \ stanza.\n   3.  Else if the JID is of the form <user@domain/resource> and no\n\
    \       available resource matches the full JID, the recipient's server\n    \
    \   (a) SHOULD silently ignore the stanza (i.e., neither deliver it\n       nor\
    \ return an error) if it is a presence stanza, (b) MUST return\n       a <service-unavailable/>\
    \ stanza error to the sender if it is an\n       IQ stanza, and (c) SHOULD treat\
    \ the stanza as if it were\n       addressed to <user@domain> if it is a message\
    \ stanza.\n   4.  Else if the JID is of the form <user@domain> and there is at\n\
    \       least one available resource available for the user, the\n       recipient's\
    \ server MUST follow these rules:\n       1.  For message stanzas, the server\
    \ SHOULD deliver the stanza to\n           the highest-priority available resource\
    \ (if the resource did\n           not provide a value for the <priority/> element,\
    \ the server\n           SHOULD consider it to have provided a value of zero).\
    \  If two\n           or more available resources have the same priority, the\n\
    \           server MAY use some other rule (e.g., most recent connect\n      \
    \     time, most recent activity time, or highest availability as\n          \
    \ determined by some hierarchy of <show/> values) to choose\n           between\
    \ them or MAY deliver the message to all such\n           resources.  However,\
    \ the server MUST NOT deliver the stanza\n           to an available resource\
    \ with a negative priority; if the\n           only available resource has a negative\
    \ priority, the server\n           SHOULD handle the message as if there were\
    \ no available\n           resources (defined below).  In addition, the server\
    \ MUST NOT\n           rewrite the 'to' attribute (i.e., it MUST leave it as\n\
    \           <user@domain> rather than change it to <user@domain/\n           resource>).\n\
    \       2.  For presence stanzas other than those of type \"probe\", the\n   \
    \        server MUST deliver the stanza to all available resources;\n        \
    \   for presence probes, the server SHOULD reply based on the\n           rules\
    \ defined in Presence Probes (Section 5.1.3).  In\n           addition, the server\
    \ MUST NOT rewrite the 'to' attribute\n           (i.e., it MUST leave it as <user@domain>\
    \ rather than change\n           it to <user@domain/resource>).\n       3.  For\
    \ IQ stanzas, the server itself MUST reply on behalf of the\n           user with\
    \ either an IQ result or an IQ error, and MUST NOT\n           deliver the IQ\
    \ stanza to any of the available resources.\n           Specifically, if the semantics\
    \ of the qualifying namespace\n           define a reply that the server can provide,\
    \ the server MUST\n           reply to the stanza on behalf of the user; if not,\
    \ the server\n           MUST reply with a <service-unavailable/> stanza error.\n\
    \   5.  Else if the JID is of the form <user@domain> and there are no\n      \
    \ available resources associated with the user, how the stanza is\n       handled\
    \ depends on the stanza type:\n       1.  For presence stanzas of type \"subscribe\"\
    , \"subscribed\",\n           \"unsubscribe\", and \"unsubscribed\", the server\
    \ MUST maintain a\n           record of the stanza and deliver the stanza at least\
    \ once\n           (i.e., when the user next creates an available resource); in\n\
    \           addition, the server MUST continue to deliver presence\n         \
    \  stanzas of type \"subscribe\" until the user either approves or\n         \
    \  denies the subscription request (see also Presence\n           Subscriptions\
    \ (Section 5.1.6)).\n       2.  For all other presence stanzas, the server SHOULD\
    \ silently\n           ignore the stanza by not storing it for later delivery\
    \ or\n           replying to it on behalf of the user.\n       3.  For message\
    \ stanzas, the server MAY choose to store the\n           stanza on behalf of\
    \ the user and deliver it when the user\n           next becomes available, or\
    \ forward the message to the user\n           via some other means (e.g., to the\
    \ user's email account).\n           However, if offline message storage or message\
    \ forwarding is\n           not enabled, the server MUST return to the sender\
    \ a\n           <service-unavailable/> stanza error.  (Note: Offline message\n\
    \           storage and message forwarding are not defined in XMPP, since\n  \
    \         they are strictly a matter of implementation and service\n         \
    \  provisioning.)\n       4.  For IQ stanzas, the server itself MUST reply on\
    \ behalf of the\n           user with either an IQ result or an IQ error.  Specifically,\n\
    \           if the semantics of the qualifying namespace define a reply\n    \
    \       that the server can provide, the server MUST reply to the\n          \
    \ stanza on behalf of the user; if not, the server MUST reply\n           with\
    \ a <service-unavailable/> stanza error.\n"
- title: 11.2.  Outbound Stanzas
  contents:
  - "11.2.  Outbound Stanzas\n   If the hostname of the domain identifier portion\
    \ of the address\n   contained in the 'to' attribute of an outbound stanza matches\
    \ a\n   hostname of the server itself, the server MUST deliver the stanza to\n\
    \   a local entity according the rules for Inbound Stanzas (Section\n   11.1).\n\
    \   If the hostname of the domain identifier portion of the address\n   contained\
    \ in the 'to' attribute of an outbound stanza does not match\n   a hostname of\
    \ the server itself, the server MUST attempt to route the\n   stanza to the foreign\
    \ domain.  The recommended order of actions is as\n   follows:\n   1.  First attempt\
    \ to resolve the foreign hostname using an [SRV]\n       Service of \"xmpp-server\"\
    \ and Proto of \"tcp\", resulting in\n       resource records such as \"_xmpp-server._tcp.example.com.\"\
    , as\n       specified in [XMPP-CORE].\n   2.  If the \"xmpp-server\" address\
    \ record resolution fails, attempt to\n       resolve the \"_im\" or \"_pres\"\
    \ [SRV] Service as specified in\n       [IMP-SRV], using the \"_im\" Service for\
    \ <message/> stanzas and the\n       \"_pres\" Service for <presence/> stanzas\
    \ (it is up to the\n       implementation how to handle <iq/> stanzas).  This\
    \ will result in\n       one or more resolutions of the form \"_im.<proto>.example.com.\"\
    \ or\n       \"_pres.<proto>.example.com.\", where \"<proto>\" would be a label\n\
    \       registered in the Instant Messaging SRV Protocol Label registry\n    \
    \   or the Presence SRV Protocol Label registry: either \"_xmpp\" for\n      \
    \ an XMPP-aware domain or some other IANA-registered label (e.g.,\n       \"_simple\"\
    ) for a non-XMPP-aware domain.\n   3.  If both SRV address record resolutions\
    \ fail, attempt to perform a\n       normal IPv4/IPv6 address record resolution\
    \ to determine the IP\n       address using the \"xmpp-server\" port of 5269 registered\
    \ with the\n       IANA, as specified in [XMPP-CORE].\n   Administrators of server\
    \ deployments are strongly encouraged to keep\n   the _im._xmpp, _pres._xmpp,\
    \ and _xmpp._tcp SRV records properly\n   synchronized, since different implementations\
    \ might perform the \"_im\"\n   and \"_pres\" lookups before the \"xmpp-server\"\
    \ lookup.\n"
- title: 12.  IM and Presence Compliance Requirements
  contents:
  - "12.  IM and Presence Compliance Requirements\n   This section summarizes the\
    \ specific aspects of the Extensible\n   Messaging and Presence Protocol that\
    \ MUST be supported by instant\n   messaging and presence servers and clients\
    \ in order to be considered\n   compliant implementations.  All such applications\
    \ MUST comply with\n   the requirements specified in [XMPP-CORE].  The text in\
    \ this section\n   specifies additional compliance requirements for instant messaging\n\
    \   and presence servers and clients; note well that the requirements\n   described\
    \ here supplement but do not supersede the core requirements.\n   Note also that\
    \ a server or client MAY support only presence or\n   instant messaging, and is\
    \ not required to support both if only a\n   presence service or an instant messaging\
    \ service is desired.\n"
- title: 12.1.  Servers
  contents:
  - "12.1.  Servers\n   In addition to core server compliance requirements, an instant\n\
    \   messaging and presence server MUST additionally support the following\n  \
    \ protocols:\n   o  All server-related instant messaging and presence syntax and\n\
    \      semantics defined in this document, including presence broadcast\n    \
    \  on behalf of clients, presence subscriptions, roster storage and\n      manipulation,\
    \ privacy lists, and IM-specific routing and delivery\n      rules\n"
- title: 12.2.  Clients
  contents:
  - "12.2.  Clients\n   In addition to core client compliance requirements, an instant\n\
    \   messaging and presence client MUST additionally support the following\n  \
    \ protocols:\n   o  Generation and handling of the IM-specific semantics of XML\n\
    \      stanzas as defined by the XML schemas, including the 'type'\n      attribute\
    \ of message and presence stanzas as well as their child\n      elements\n   o\
    \  All client-related instant messaging syntax and semantics defined\n      in\
    \ this document, including presence subscriptions, roster\n      management, and\
    \ privacy lists\n   o  End-to-end object encryption as defined in End-to-End Object\n\
    \      Encryption in the Extensible Messaging and Presence Protocol\n      (XMPP)\
    \ [XMPP-E2E]\n   A client MUST also handle addresses that are encoded as \"im:\"\
    \ URIs as\n   specified in [CPIM], and MAY do so by removing the \"im:\" scheme\
    \ and\n   entrusting address resolution to the server as specified under\n   Outbound\
    \ Stanzas (Section 11.2).\n"
- title: 13.  Internationalization Considerations
  contents:
  - "13.  Internationalization Considerations\n   For internationalization considerations,\
    \ refer to the relevant\n   section of [XMPP-CORE].\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Core security considerations for XMPP are defined\
    \ in the relevant\n   section of [XMPP-CORE].\n   Additional considerations that\
    \ apply only to instant messaging and\n   presence applications of XMPP are defined\
    \ in several places within\n   this memo; specifically:\n   o  When a server processes\
    \ an inbound stanza of any kind whose\n      intended recipient is a user associated\
    \ with one of the server's\n      hostnames, the server MUST first apply any privacy\
    \ lists (Section\n      10) that are in force (see Server Rules for Handling XML\
    \ Stanzas\n      (Section 11)).\n   o  When a server processes an inbound presence\
    \ stanza of type \"probe\"\n      whose intended recipient is a user associated\
    \ with one of the\n      server's hostnames, the server MUST NOT reveal the user's\
    \ presence\n      information if the sender is an entity that is not authorized\
    \ to\n      receive that information as determined by presence subscriptions\n\
    \      (see Client and Server Presence Responsibilities (Section 5.1)).\n   o\
    \  When a server processes an outbound presence stanza with no type\n      or\
    \ of type \"unavailable\", it MUST follow the rules defined under\n      Client\
    \ and Server Presence Responsibilities (Section 5.1) in order\n      to ensure\
    \ that such presence information is not broadcasted to\n      entities that are\
    \ not authorized to know such information.\n   o  When a server generates an error\
    \ stanza in response to receiving a\n      stanza for a user who does not exist,\
    \ the use of the\n      <service-unavailable/> error condition helps protect against\n\
    \      well-known dictionary attacks, since this is the same error\n      condition\
    \ that is returned if, for instance, the namespace of an\n      IQ child element\
    \ is not understood, or if offline message storage\n      or message forwarding\
    \ is not enabled for a domain.\n"
- title: 15.  IANA Considerations
  contents:
  - "15.  IANA Considerations\n   For a number of related IANA considerations, refer\
    \ to the relevant\n   section of [XMPP-CORE].\n"
- title: 15.1.  XML Namespace Name for Session Data
  contents:
  - "15.1.  XML Namespace Name for Session Data\n   A URN sub-namespace for session-related\
    \ data in the Extensible\n   Messaging and Presence Protocol (XMPP) is defined\
    \ as follows.  (This\n   namespace name adheres to the format defined in The IETF\
    \ XML Registry\n   [XML-REG].)\n   URI: urn:ietf:params:xml:ns:xmpp-session\n\
    \   Specification: RFC 3921\n   Description: This is the XML namespace name for\
    \ session-related data\n      in the Extensible Messaging and Presence Protocol\
    \ (XMPP) as\n      defined by RFC 3921.\n   Registrant Contact: IETF, XMPP Working\
    \ Group, <xmppwg@jabber.org>\n"
- title: 15.2.  Instant Messaging SRV Protocol Label Registration
  contents:
  - "15.2.  Instant Messaging SRV Protocol Label Registration\n   Address Resolution\
    \ for Instant Messaging and Presence [IMP-SRV]\n   defines an Instant Messaging\
    \ SRV Protocol Label registry for\n   protocols that can provide services that\
    \ conform to the \"_im\" SRV\n   Service label.  Because XMPP is one such protocol,\
    \ the IANA registers\n   the \"_xmpp\" protocol label in the appropriate registry,\
    \ as follows:\n   Protocol label: _xmpp\n   Specification: RFC 3921\n   Description:\
    \ Instant messaging protocol label for the Extensible\n      Messaging and Presence\
    \ Protocol (XMPP) as defined by RFC 3921.\n   Registrant Contact: IETF, XMPP Working\
    \ Group, <xmppwg@jabber.org>\n"
- title: 15.3.  Presence SRV Protocol Label Registration
  contents:
  - "15.3.  Presence SRV Protocol Label Registration\n   Address Resolution for Instant\
    \ Messaging and Presence [IMP-SRV]\n   defines a Presence SRV Protocol Label registry\
    \ for protocols that can\n   provide services that conform to the \"_pres\" SRV\
    \ Service label.\n   Because XMPP is one such protocol, the IANA registers the\
    \ \"_xmpp\"\n   protocol label in the appropriate registry, as follows:\n   Protocol\
    \ label: _xmpp\n   Specification: RFC 3921\n   Description: Presence protocol\
    \ label for the Extensible Messaging and\n      Presence Protocol (XMPP) as defined\
    \ by RFC 3921.\n   Registrant Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [CPIM]      Peterson, J., \"Common Profile for\
    \ Instant Messaging\n               (CPIM)\", RFC 3860, August 2004.\n   [IMP-REQS]\
    \  Day, M., Aggarwal, S., Mohr, G., and J. Vincent, \"Instant\n              \
    \ Messaging/Presence Protocol Requirements\", RFC 2779,\n               February\
    \ 2000.\n   [IMP-SRV]   Peterson, J., \"Address Resolution for Instant Messaging\n\
    \               and Presence\", RFC 3861, August 2004.\n   [SRV]       Gulbrandsen,\
    \ A., Vixie, P., and L. Esibov, \"A DNS RR for\n               specifying the\
    \ location of services (DNS SRV)\", RFC 2782,\n               February 2000.\n\
    \   [TERMS]     Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [XML]       Bray,\
    \ T., Paoli, J., Sperberg-McQueen, C., and E. Maler,\n               \"Extensible\
    \ Markup Language (XML) 1.0 (2nd ed)\", W3C\n               REC-xml, October 2000,\
    \ <http://www.w3.org/TR/REC-xml>.\n   [XML-NAMES] Bray, T., Hollander, D., and\
    \ A. Layman, \"Namespaces in\n               XML\", W3C REC-xml-names, January\
    \ 1999,\n               <http://www.w3.org/TR/REC-xml-names>.\n   [XMPP-CORE]\
    \ Saint-Andre, P., \"Extensible Messaging and Presence\n               Protocol\
    \ (XMPP): Core\", RFC 3920, October 2004.\n   [XMPP-E2E]  Saint-Andre, P., \"\
    End-to-End Object Encryption in the\n               Extensible Messaging and Presence\
    \ Protocol (XMPP)\", RFC\n               3923, October 2004.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [IMP-MODEL] Day, M., Rosenberg, J., and H.\
    \ Sugano, \"A Model for\n               Presence and Instant Messaging\", RFC\
    \ 2778, February 2000.\n   [IRC]       Oikarinen, J. and D. Reed, \"Internet Relay\
    \ Chat\n               Protocol\", RFC 1459, May 1993.\n   [JEP-0054]  Saint-Andre,\
    \ P., \"vcard-temp\", JSF JEP 0054, March 2003.\n   [JEP-0077]  Saint-Andre, P.,\
    \ \"In-Band Registration\", JSF JEP 0077,\n               August 2004.\n   [JEP-0078]\
    \  Saint-Andre, P., \"Non-SASL Authentication\", JSF JEP 0078,\n             \
    \  July 2004.\n   [JSF]       Jabber Software Foundation, \"Jabber Software Foundation\"\
    ,\n               <http://www.jabber.org/>.\n   [VCARD]     Dawson, F. and T.\
    \ Howes, \"vCard MIME Directory Profile\",\n               RFC 2426, September\
    \ 1998.\n   [XML-REG]   Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n\
    \               January 2004.\n"
- title: Appendix A.  vCards
  contents:
  - "Appendix A.  vCards\n   Sections 3.1.3 and 4.1.4 of [IMP-REQS] require that it\
    \ be possible to\n   retrieve out-of-band contact information for other users\
    \ (e.g.,\n   telephone number or email address).  An XML representation of the\n\
    \   vCard specification defined in RFC 2426 [VCARD] is in common use\n   within\
    \ the Jabber community to provide such information but is out of\n   scope for\
    \ XMPP (documentation of this protocol is contained in\n   [JEP-0054], published\
    \ by the Jabber Software Foundation [JSF]).\n"
- title: Appendix B.  XML Schemas
  contents:
  - "Appendix B.  XML Schemas\n   The following XML schemas are descriptive, not normative.\
    \  For\n   schemas defining the core features of XMPP, refer to [XMPP-CORE].\n"
- title: B.1  jabber:client
  contents:
  - "B.1  jabber:client\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='jabber:client'\n\
    \       xmlns='jabber:client'\n       elementFormDefault='qualified'>\n     <xs:import\
    \ namespace='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n     <xs:element name='message'>\n\
    \        <xs:complexType>\n           <xs:sequence>\n             <xs:choice minOccurs='0'\
    \ maxOccurs='unbounded'>\n               <xs:element ref='subject'/>\n       \
    \        <xs:element ref='body'/>\n               <xs:element ref='thread'/>\n\
    \             </xs:choice>\n             <xs:any     namespace='##other'\n   \
    \                      minOccurs='0'\n                         maxOccurs='unbounded'/>\n\
    \             <xs:element ref='error'\n                         minOccurs='0'/>\n\
    \           </xs:sequence>\n           <xs:attribute name='from'\n           \
    \              type='xs:string'\n                         use='optional'/>\n \
    \          <xs:attribute name='id'\n                         type='xs:NMTOKEN'\n\
    \                         use='optional'/>\n           <xs:attribute name='to'\n\
    \                         type='xs:string'\n                         use='optional'/>\n\
    \           <xs:attribute name='type' use='optional' default='normal'>\n     \
    \        <xs:simpleType>\n               <xs:restriction base='xs:NCName'>\n \
    \                <xs:enumeration value='chat'/>\n                 <xs:enumeration\
    \ value='error'/>\n                 <xs:enumeration value='groupchat'/>\n    \
    \             <xs:enumeration value='headline'/>\n                 <xs:enumeration\
    \ value='normal'/>\n               </xs:restriction>\n             </xs:simpleType>\n\
    \           </xs:attribute>\n           <xs:attribute ref='xml:lang' use='optional'/>\n\
    \        </xs:complexType>\n     </xs:element>\n     <xs:element name='body'>\n\
    \       <xs:complexType>\n         <xs:simpleContent>\n           <xs:extension\
    \ base='xs:string'>\n             <xs:attribute ref='xml:lang' use='optional'/>\n\
    \           </xs:extension>\n         </xs:simpleContent>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='subject'>\n       <xs:complexType>\n\
    \         <xs:simpleContent>\n           <xs:extension base='xs:string'>\n   \
    \          <xs:attribute ref='xml:lang' use='optional'/>\n           </xs:extension>\n\
    \         </xs:simpleContent>\n       </xs:complexType>\n     </xs:element>\n\
    \     <xs:element name='thread' type='xs:NMTOKEN'/>\n     <xs:element name='presence'>\n\
    \       <xs:complexType>\n         <xs:sequence>\n           <xs:choice minOccurs='0'\
    \ maxOccurs='unbounded'>\n             <xs:element ref='show'/>\n            \
    \ <xs:element ref='status'/>\n             <xs:element ref='priority'/>\n    \
    \       </xs:choice>\n           <xs:any     namespace='##other'\n           \
    \            minOccurs='0'\n                       maxOccurs='unbounded'/>\n \
    \          <xs:element ref='error'\n                       minOccurs='0'/>\n \
    \        </xs:sequence>\n         <xs:attribute name='from'\n                \
    \       type='xs:string'\n                       use='optional'/>\n         <xs:attribute\
    \ name='id'\n                       type='xs:NMTOKEN'\n                      \
    \ use='optional'/>\n         <xs:attribute name='to'\n                       type='xs:string'\n\
    \                       use='optional'/>\n         <xs:attribute name='type' use='optional'>\n\
    \           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='error'/>\n               <xs:enumeration\
    \ value='probe'/>\n               <xs:enumeration value='subscribe'/>\n      \
    \         <xs:enumeration value='subscribed'/>\n               <xs:enumeration\
    \ value='unavailable'/>\n               <xs:enumeration value='unsubscribe'/>\n\
    \               <xs:enumeration value='unsubscribed'/>\n             </xs:restriction>\n\
    \           </xs:simpleType>\n         </xs:attribute>\n         <xs:attribute\
    \ ref='xml:lang' use='optional'/>\n       </xs:complexType>\n     </xs:element>\n\
    \     <xs:element name='show'>\n       <xs:simpleType>\n         <xs:restriction\
    \ base='xs:NCName'>\n           <xs:enumeration value='away'/>\n           <xs:enumeration\
    \ value='chat'/>\n           <xs:enumeration value='dnd'/>\n           <xs:enumeration\
    \ value='xa'/>\n         </xs:restriction>\n       </xs:simpleType>\n     </xs:element>\n\
    \     <xs:element name='status'>\n       <xs:complexType>\n         <xs:simpleContent>\n\
    \           <xs:extension base='xs:string'>\n             <xs:attribute ref='xml:lang'\
    \ use='optional'/>\n           </xs:extension>\n         </xs:simpleContent>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:element name='priority'\
    \ type='xs:byte'/>\n     <xs:element name='iq'>\n       <xs:complexType>\n   \
    \      <xs:sequence>\n           <xs:any     namespace='##other'\n           \
    \            minOccurs='0'/>\n           <xs:element ref='error'\n           \
    \            minOccurs='0'/>\n         </xs:sequence>\n         <xs:attribute\
    \ name='from'\n                       type='xs:string'\n                     \
    \  use='optional'/>\n         <xs:attribute name='id'\n                      \
    \ type='xs:NMTOKEN'\n                       use='required'/>\n         <xs:attribute\
    \ name='to'\n                       type='xs:string'\n                       use='optional'/>\n\
    \         <xs:attribute name='type' use='required'>\n           <xs:simpleType>\n\
    \             <xs:restriction base='xs:NCName'>\n               <xs:enumeration\
    \ value='error'/>\n               <xs:enumeration value='get'/>\n            \
    \   <xs:enumeration value='result'/>\n               <xs:enumeration value='set'/>\n\
    \             </xs:restriction>\n           </xs:simpleType>\n         </xs:attribute>\n\
    \         <xs:attribute ref='xml:lang' use='optional'/>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='error'>\n       <xs:complexType>\n\
    \         <xs:sequence  xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas'>\n   \
    \        <xs:group   ref='err:stanzaErrorGroup'/>\n           <xs:element ref='err:text'\n\
    \                       minOccurs='0'/>\n         </xs:sequence>\n         <xs:attribute\
    \ name='code' type='xs:byte' use='optional'/>\n         <xs:attribute name='type'\
    \ use='required'>\n           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='auth'/>\n               <xs:enumeration\
    \ value='cancel'/>\n               <xs:enumeration value='continue'/>\n      \
    \         <xs:enumeration value='modify'/>\n               <xs:enumeration value='wait'/>\n\
    \             </xs:restriction>\n           </xs:simpleType>\n         </xs:attribute>\n\
    \       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n"
- title: B.2  jabber:server
  contents:
  - "B.2  jabber:server\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='jabber:server'\n\
    \       xmlns='jabber:server'\n       elementFormDefault='qualified'>\n     <xs:import\
    \ namespace='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n     <xs:element name='message'>\n\
    \        <xs:complexType>\n           <xs:sequence>\n             <xs:choice minOccurs='0'\
    \ maxOccurs='unbounded'>\n               <xs:element ref='subject'/>\n       \
    \        <xs:element ref='body'/>\n               <xs:element ref='thread'/>\n\
    \             </xs:choice>\n             <xs:any     namespace='##other'\n   \
    \                      minOccurs='0'\n                         maxOccurs='unbounded'/>\n\
    \             <xs:element ref='error'\n                         minOccurs='0'/>\n\
    \           </xs:sequence>\n           <xs:attribute name='from'\n           \
    \              type='xs:string'\n                         use='required'/>\n \
    \          <xs:attribute name='id'\n                         type='xs:NMTOKEN'\n\
    \                         use='optional'/>\n           <xs:attribute name='to'\n\
    \                         type='xs:string'\n                         use='required'/>\n\
    \           <xs:attribute name='type' use='optional' default='normal'>\n     \
    \        <xs:simpleType>\n               <xs:restriction base='xs:NCName'>\n \
    \                <xs:enumeration value='chat'/>\n                 <xs:enumeration\
    \ value='error'/>\n                 <xs:enumeration value='groupchat'/>\n    \
    \             <xs:enumeration value='headline'/>\n                 <xs:enumeration\
    \ value='normal'/>\n               </xs:restriction>\n             </xs:simpleType>\n\
    \           </xs:attribute>\n           <xs:attribute ref='xml:lang' use='optional'/>\n\
    \        </xs:complexType>\n     </xs:element>\n     <xs:element name='body'>\n\
    \       <xs:complexType>\n         <xs:simpleContent>\n           <xs:extension\
    \ base='xs:string'>\n             <xs:attribute ref='xml:lang' use='optional'/>\n\
    \           </xs:extension>\n         </xs:simpleContent>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='subject'>\n       <xs:complexType>\n\
    \         <xs:simpleContent>\n           <xs:extension base='xs:string'>\n   \
    \          <xs:attribute ref='xml:lang' use='optional'/>\n           </xs:extension>\n\
    \         </xs:simpleContent>\n       </xs:complexType>\n     </xs:element>\n\
    \     <xs:element name='thread' type='xs:NMTOKEN'/>\n     <xs:element name='presence'>\n\
    \       <xs:complexType>\n         <xs:sequence>\n           <xs:choice minOccurs='0'\
    \ maxOccurs='unbounded'>\n             <xs:element ref='show'/>\n            \
    \ <xs:element ref='status'/>\n             <xs:element ref='priority'/>\n    \
    \       </xs:choice>\n           <xs:any     namespace='##other'\n           \
    \            minOccurs='0'\n                       maxOccurs='unbounded'/>\n \
    \          <xs:element ref='error'\n                       minOccurs='0'/>\n \
    \        </xs:sequence>\n         <xs:attribute name='from'\n                \
    \       type='xs:string'\n                       use='required'/>\n         <xs:attribute\
    \ name='id'\n                       type='xs:NMTOKEN'\n                      \
    \ use='optional'/>\n         <xs:attribute name='to'\n                       type='xs:string'\n\
    \                       use='required'/>\n         <xs:attribute name='type' use='optional'>\n\
    \           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='error'/>\n               <xs:enumeration\
    \ value='probe'/>\n               <xs:enumeration value='subscribe'/>\n      \
    \         <xs:enumeration value='subscribed'/>\n               <xs:enumeration\
    \ value='unavailable'/>\n               <xs:enumeration value='unsubscribe'/>\n\
    \               <xs:enumeration value='unsubscribed'/>\n             </xs:restriction>\n\
    \           </xs:simpleType>\n         </xs:attribute>\n         <xs:attribute\
    \ ref='xml:lang' use='optional'/>\n       </xs:complexType>\n     </xs:element>\n\
    \     <xs:element name='show'>\n       <xs:simpleType>\n         <xs:restriction\
    \ base='xs:NCName'>\n           <xs:enumeration value='away'/>\n           <xs:enumeration\
    \ value='chat'/>\n           <xs:enumeration value='dnd'/>\n           <xs:enumeration\
    \ value='xa'/>\n         </xs:restriction>\n       </xs:simpleType>\n     </xs:element>\n\
    \     <xs:element name='status'>\n       <xs:complexType>\n         <xs:simpleContent>\n\
    \           <xs:extension base='xs:string'>\n             <xs:attribute ref='xml:lang'\
    \ use='optional'/>\n           </xs:extension>\n         </xs:simpleContent>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:element name='priority'\
    \ type='xs:byte'/>\n     <xs:element name='iq'>\n       <xs:complexType>\n   \
    \      <xs:sequence>\n           <xs:any     namespace='##other'\n           \
    \            minOccurs='0'/>\n           <xs:element ref='error'\n           \
    \            minOccurs='0'/>\n         </xs:sequence>\n         <xs:attribute\
    \ name='from'\n                       type='xs:string'\n                     \
    \  use='required'/>\n         <xs:attribute name='id'\n                      \
    \ type='xs:NMTOKEN'\n                       use='required'/>\n         <xs:attribute\
    \ name='to'\n                       type='xs:string'\n                       use='required'/>\n\
    \         <xs:attribute name='type' use='required'>\n           <xs:simpleType>\n\
    \             <xs:restriction base='xs:NCName'>\n               <xs:enumeration\
    \ value='error'/>\n               <xs:enumeration value='get'/>\n            \
    \   <xs:enumeration value='result'/>\n               <xs:enumeration value='set'/>\n\
    \             </xs:restriction>\n           </xs:simpleType>\n         </xs:attribute>\n\
    \         <xs:attribute ref='xml:lang' use='optional'/>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='error'>\n       <xs:complexType>\n\
    \         <xs:sequence  xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas'>\n   \
    \        <xs:group   ref='err:stanzaErrorGroup'/>\n           <xs:element ref='err:text'\n\
    \                       minOccurs='0'/>\n         </xs:sequence>\n         <xs:attribute\
    \ name='code' type='xs:byte' use='optional'/>\n         <xs:attribute name='type'\
    \ use='required'>\n           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='auth'/>\n               <xs:enumeration\
    \ value='cancel'/>\n               <xs:enumeration value='continue'/>\n      \
    \         <xs:enumeration value='modify'/>\n               <xs:enumeration value='wait'/>\n\
    \             </xs:restriction>\n           </xs:simpleType>\n         </xs:attribute>\n\
    \       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n"
- title: B.3  session
  contents:
  - "B.3  session\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n    \
    \   xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-session'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-session'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='session' type='empty'/>\n     <xs:simpleType name='empty'>\n\
    \       <xs:restriction base='xs:string'>\n         <xs:enumeration value=''/>\n\
    \       </xs:restriction>\n     </xs:simpleType>\n   </xs:schema>\n"
- title: B.4  jabber:iq:privacy
  contents:
  - "B.4  jabber:iq:privacy\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='jabber:iq:privacy'\n\
    \       xmlns='jabber:iq:privacy'\n       elementFormDefault='qualified'>\n  \
    \   <xs:element name='query'>\n       <xs:complexType>\n         <xs:sequence>\n\
    \           <xs:element ref='active'\n                       minOccurs='0'/>\n\
    \           <xs:element ref='default'\n                       minOccurs='0'/>\n\
    \           <xs:element ref='list'\n                       minOccurs='0'\n   \
    \                    maxOccurs='unbounded'/>\n         </xs:sequence>\n      \
    \ </xs:complexType>\n     </xs:element>\n     <xs:element name='active'>\n   \
    \    <xs:complexType>\n         <xs:simpleContent>\n           <xs:extension base='xs:NMTOKEN'>\n\
    \             <xs:attribute name='name'\n                           type='xs:string'\n\
    \                           use='optional'/>\n           </xs:extension>\n   \
    \      </xs:simpleContent>\n       </xs:complexType>\n     </xs:element>\n   \
    \  <xs:element name='default'>\n       <xs:complexType>\n         <xs:simpleContent>\n\
    \           <xs:extension base='xs:NMTOKEN'>\n             <xs:attribute name='name'\n\
    \                           type='xs:string'\n                           use='optional'/>\n\
    \           </xs:extension>\n         </xs:simpleContent>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='list'>\n       <xs:complexType>\n\
    \         <xs:sequence>\n           <xs:element ref='item'\n                 \
    \      minOccurs='0'\n                       maxOccurs='unbounded'/>\n       \
    \  </xs:sequence>\n         <xs:attribute name='name'\n                      \
    \ type='xs:string'\n                       use='required'/>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='item'>\n       <xs:complexType>\n\
    \         <xs:sequence>\n           <xs:element name='iq'\n                  \
    \     minOccurs='0'\n                       type='empty'/>\n           <xs:element\
    \ name='message'\n                       minOccurs='0'\n                     \
    \  type='empty'/>\n           <xs:element name='presence-in'\n               \
    \        minOccurs='0'\n                       type='empty'/>\n           <xs:element\
    \ name='presence-out'\n                       minOccurs='0'\n                \
    \       type='empty'/>\n         </xs:sequence>\n         <xs:attribute name='action'\
    \ use='required'>\n           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='allow'/>\n               <xs:enumeration\
    \ value='deny'/>\n             </xs:restriction>\n           </xs:simpleType>\n\
    \         </xs:attribute>\n         <xs:attribute name='order'\n             \
    \          type='xs:unsignedInt'\n                       use='required'/>\n  \
    \       <xs:attribute name='type' use='optional'>\n           <xs:simpleType>\n\
    \             <xs:restriction base='xs:NCName'>\n               <xs:enumeration\
    \ value='group'/>\n               <xs:enumeration value='jid'/>\n            \
    \   <xs:enumeration value='subscription'/>\n             </xs:restriction>\n \
    \          </xs:simpleType>\n         </xs:attribute>\n         <xs:attribute\
    \ name='value'\n                       type='xs:string'\n                    \
    \   use='optional'/>\n       </xs:complexType>\n     </xs:element>\n     <xs:simpleType\
    \ name='empty'>\n       <xs:restriction base='xs:string'>\n         <xs:enumeration\
    \ value=''/>\n       </xs:restriction>\n     </xs:simpleType>\n   </xs:schema>\n"
- title: B.5  jabber:iq:roster
  contents:
  - "B.5  jabber:iq:roster\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='jabber:iq:roster'\n\
    \       xmlns='jabber:iq:roster'\n       elementFormDefault='qualified'>\n   \
    \  <xs:element name='query'>\n       <xs:complexType>\n         <xs:sequence>\n\
    \           <xs:element ref='item'\n                       minOccurs='0'\n   \
    \                    maxOccurs='unbounded'/>\n         </xs:sequence>\n      \
    \ </xs:complexType>\n     </xs:element>\n     <xs:element name='item'>\n     \
    \  <xs:complexType>\n         <xs:sequence>\n           <xs:element ref='group'\n\
    \                       minOccurs='0'\n                       maxOccurs='unbounded'/>\n\
    \         </xs:sequence>\n         <xs:attribute name='ask' use='optional'>\n\
    \           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='subscribe'/>\n             </xs:restriction>\n\
    \           </xs:simpleType>\n         </xs:attribute>\n         <xs:attribute\
    \ name='jid' type='xs:string' use='required'/>\n         <xs:attribute name='name'\
    \ type='xs:string' use='optional'/>\n         <xs:attribute name='subscription'\
    \ use='optional'>\n           <xs:simpleType>\n             <xs:restriction base='xs:NCName'>\n\
    \               <xs:enumeration value='both'/>\n               <xs:enumeration\
    \ value='from'/>\n               <xs:enumeration value='none'/>\n            \
    \   <xs:enumeration value='remove'/>\n               <xs:enumeration value='to'/>\n\
    \             </xs:restriction>\n           </xs:simpleType>\n         </xs:attribute>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:element name='group' type='xs:string'/>\n\
    \   </xs:schema>\n"
- title: Appendix C.  Differences Between Jabber IM/Presence Protocols and XMPP
  contents:
  - "Appendix C.  Differences Between Jabber IM/Presence Protocols and XMPP\n   This\
    \ section is non-normative.\n   XMPP has been adapted from the protocols originally\
    \ developed in the\n   Jabber open-source community, which can be thought of as\
    \ \"XMPP 0.9\".\n   Because there exists a large installed base of Jabber implementations\n\
    \   and deployments, it may be helpful to specify the key differences\n   between\
    \ the relevant Jabber protocols and XMPP in order to expedite\n   and encourage\
    \ upgrades of those implementations and deployments to\n   XMPP.  This section\
    \ summarizes the differences that relate\n   specifically to instant messaging\
    \ and presence applications, while\n   the corresponding section of [XMPP-CORE]\
    \ summarizes the differences\n   that relate to all XMPP applications.\n"
- title: C.1  Session Establishment
  contents:
  - "C.1  Session Establishment\n   The client-to-server authentication protocol developed\
    \ in the Jabber\n   community assumed that every client is an IM client and therefore\n\
    \   initiated an IM session upon successful authentication and resource\n   binding,\
    \ which are performed simultaneously (documentation of this\n   protocol is contained\
    \ in [JEP-0078], published by the Jabber Software\n   Foundation [JSF]).  XMPP\
    \ maintains a stricter separation between core\n   functionality and IM functionality;\
    \ therefore, an IM session is not\n   created until the client specifically requests\
    \ one using the protocol\n   defined under Session Establishment (Section 3).\n"
- title: C.2  Privacy Lists
  contents:
  - "C.2  Privacy Lists\n   The Jabber community began to define a protocol for communications\n\
    \   blocking (privacy lists) in late 2001, but that effort was deprecated\n  \
    \ once the XMPP Working Group was formed.  Therefore the protocol\n   defined\
    \ under Blocking Communication (Section 10) is the only such\n   protocol defined\
    \ for use in the Jabber community.\n"
- title: Contributors
  contents:
  - "Contributors\n   Most of the core aspects of the Extensible Messaging and Presence\n\
    \   Protocol were developed originally within the Jabber open-source\n   community\
    \ in 1999.  This community was founded by Jeremie Miller, who\n   released source\
    \ code for the initial version of the jabberd server in\n   January 1999.  Major\
    \ early contributors to the base protocol also\n   included Ryan Eatmon, Peter\
    \ Millard, Thomas Muldowney, and Dave\n   Smith.  Work specific to instant messaging\
    \ and presence by the XMPP\n   Working Group has concentrated especially on IM\
    \ session establishment\n   and communication blocking (privacy lists); the session\
    \ establishment\n   protocol was mainly developed by Rob Norris and Joe Hildebrand,\
    \ and\n   the privacy lists protocol was originally contributed by Peter\n   Millard.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks are due to a number of individuals in addition to\
    \ the\n   contributors listed.  Although it is difficult to provide a complete\n\
    \   list, the following individuals were particularly helpful in defining\n  \
    \ the protocols or in commenting on the specifications in this memo:\n   Thomas\
    \ Charron, Richard Dobson, Schuyler Heath, Jonathan Hogg, Craig\n   Kaes, Jacek\
    \ Konieczny, Lisa Dusseault, Alexey Melnikov, Keith\n   Minkler, Julian Missig,\
    \ Pete Resnick, Marshall Rose, Jean-Louis\n   Seguineau, Alexey Shchepin, Iain\
    \ Shigeoka, and David Waite.  Thanks\n   also to members of the XMPP Working Group\
    \ and the IETF community for\n   comments and feedback provided throughout the\
    \ life of this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter Saint-Andre (editor)\n   Jabber Software Foundation\n\
    \   EMail: stpeter@jabber.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
