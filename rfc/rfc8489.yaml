- title: __initial_text__
  contents:
  - '               Session Traversal Utilities for NAT (STUN)

    '
- title: Abstract
  contents:
  - "Abstract\n   Session Traversal Utilities for NAT (STUN) is a protocol that serves\n\
    \   as a tool for other protocols in dealing with NAT traversal.  It can\n   be\
    \ used by an endpoint to determine the IP address and port allocated\n   to it\
    \ by a NAT.  It can also be used to check connectivity between\n   two endpoints\
    \ and as a keep-alive protocol to maintain NAT bindings.\n   STUN works with many\
    \ existing NATs and does not require any special\n   behavior from them.\n   STUN\
    \ is not a NAT traversal solution by itself.  Rather, it is a tool\n   to be used\
    \ in the context of a NAT traversal solution.\n   This document obsoletes RFC\
    \ 5389.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8489.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Overview of Operation ...........................................5\n  \
    \ 3. Terminology .....................................................7\n   4.\
    \ Definitions .....................................................7\n   5. STUN\
    \ Message Structure ..........................................9\n   6. Base Protocol\
    \ Procedures .......................................11\n      6.1. Forming a Request\
    \ or an Indication ........................11\n      6.2. Sending the Request\
    \ or Indication .........................12\n           6.2.1. Sending over UDP\
    \ or DTLS-over-UDP ..................13\n           6.2.2. Sending over TCP or\
    \ TLS-over-TCP ...................14\n           6.2.3. Sending over TLS-over-TCP\
    \ or DTLS-over-UDP .........15\n      6.3. Receiving a STUN Message ..................................16\n\
    \           6.3.1. Processing a Request ...............................17\n  \
    \                6.3.1.1. Forming a Success or Error Response .......17\n    \
    \              6.3.1.2. Sending the Success or Error Response .....18\n      \
    \     6.3.2. Processing an Indication ...........................18\n        \
    \   6.3.3. Processing a Success Response ......................19\n          \
    \ 6.3.4. Processing an Error Response .......................19\n   7. FINGERPRINT\
    \ Mechanism ..........................................20\n   8. DNS Discovery\
    \ of a Server ......................................20\n      8.1. STUN URI Scheme\
    \ Semantics .................................21\n   9. Authentication and Message-Integrity\
    \ Mechanisms ................22\n      9.1. Short-Term Credential Mechanism ...........................23\n\
    \           9.1.1. HMAC Key ...........................................23\n  \
    \         9.1.2. Forming a Request or Indication ....................23\n    \
    \       9.1.3. Receiving a Request or Indication ..................23\n      \
    \     9.1.4. Receiving a Response ...............................25\n        \
    \   9.1.5. Sending Subsequent Requests ........................25\n      9.2.\
    \ Long-Term Credential Mechanism ............................26\n           9.2.1.\
    \ Bid-Down Attack Prevention .........................27\n           9.2.2. HMAC\
    \ Key ...........................................27\n           9.2.3. Forming\
    \ a Request ..................................28\n                  9.2.3.1. First\
    \ Request .............................28\n                  9.2.3.2. Subsequent\
    \ Requests .......................29\n           9.2.4. Receiving a Request ................................29\n\
    \           9.2.5. Receiving a Response ...............................31\n  \
    \ 10. ALTERNATE-SERVER Mechanism ....................................33\n   11.\
    \ Backwards Compatibility with RFC 3489 .........................34\n   12. Basic\
    \ Server Behavior .........................................34\n   13. STUN Usages\
    \ ...................................................35\n   14. STUN Attributes\
    \ ...............................................36\n      14.1. MAPPED-ADDRESS\
    \ ...........................................37\n      14.2. XOR-MAPPED-ADDRESS\
    \ .......................................38\n      14.3. USERNAME .................................................39\n\
    \      14.4. USERHASH .................................................40\n  \
    \    14.5. MESSAGE-INTEGRITY ........................................40\n    \
    \  14.6. MESSAGE-INTEGRITY-SHA256 .................................41\n      14.7.\
    \ FINGERPRINT ..............................................41\n      14.8. ERROR-CODE\
    \ ...............................................42\n      14.9. REALM ....................................................44\n\
    \      14.10. NONCE ...................................................44\n  \
    \    14.11. PASSWORD-ALGORITHMS .....................................44\n    \
    \  14.12. PASSWORD-ALGORITHM ......................................45\n      14.13.\
    \ UNKNOWN-ATTRIBUTES ......................................45\n      14.14. SOFTWARE\
    \ ................................................46\n      14.15. ALTERNATE-SERVER\
    \ ........................................46\n      14.16. ALTERNATE-DOMAIN ........................................46\n\
    \   15. Operational Considerations ....................................47\n  \
    \ 16. Security Considerations .......................................47\n    \
    \  16.1. Attacks against the Protocol .............................47\n      \
    \     16.1.1. Outside Attacks ...................................47\n        \
    \   16.1.2. Inside Attacks ....................................48\n          \
    \ 16.1.3. Bid-Down Attacks ..................................48\n      16.2. Attacks\
    \ Affecting the Usage ..............................50\n           16.2.1. Attack\
    \ I: Distributed DoS (DDoS) against a\n                   Target ............................................51\n\
    \           16.2.2. Attack II: Silencing a Client .....................51\n  \
    \         16.2.3. Attack III: Assuming the Identity of a Client .....52\n    \
    \       16.2.4. Attack IV: Eavesdropping ..........................52\n      16.3.\
    \ Hash Agility Plan ........................................52\n   17. IAB Considerations\
    \ ............................................53\n   18. IANA Considerations ...........................................53\n\
    \      18.1. STUN Security Features Registry ..........................53\n  \
    \    18.2. STUN Methods Registry ....................................54\n    \
    \  18.3. STUN Attributes Registry .................................54\n      \
    \     18.3.1. Updated Attributes ................................55\n        \
    \   18.3.2. New Attributes ....................................55\n      18.4.\
    \ STUN Error Codes Registry ................................56\n      18.5. STUN\
    \ Password Algorithms Registry ........................56\n           18.5.1.\
    \ Password Algorithms ...............................57\n                  18.5.1.1.\
    \ MD5 ......................................57\n                  18.5.1.2. SHA-256\
    \ ..................................57\n      18.6. STUN UDP and TCP Port Numbers\
    \ ............................57\n   19. Changes since RFC 5389 ........................................57\n\
    \   20. References ....................................................58\n  \
    \    20.1. Normative References .....................................58\n    \
    \  20.2. Informative References ...................................61\n   Appendix\
    \ A.  C Snippet to Determine STUN Message Types ............64\n   Appendix B.\
    \  Test Vectors .........................................64\n     B.1.  Sample\
    \ Request with Long-Term Authentication with\n           MESSAGE-INTEGRITY-SHA256\
    \ and USERHASH .....................65\n   Acknowledgements ..................................................66\n\
    \   Contributors ......................................................66\n  \
    \ Authors' Addresses ................................................67\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The protocol defined in this specification, Session Traversal\n\
    \   Utilities for NAT (STUN), provides a tool for dealing with Network\n   Address\
    \ Translators (NATs).  It provides a means for an endpoint to\n   determine the\
    \ IP address and port allocated by a NAT that corresponds\n   to its private IP\
    \ address and port.  It also provides a way for an\n   endpoint to keep a NAT\
    \ binding alive.  With some extensions, the\n   protocol can be used to do connectivity\
    \ checks between two endpoints\n   [RFC8445] or to relay packets between two endpoints\
    \ [RFC5766].\n   In keeping with its tool nature, this specification defines an\n\
    \   extensible packet format, defines operation over several transport\n   protocols,\
    \ and provides for two forms of authentication.\n   STUN is intended to be used\
    \ in the context of one or more NAT\n   traversal solutions.  These solutions\
    \ are known as \"STUN Usages\".\n   Each usage describes how STUN is utilized\
    \ to achieve the NAT\n   traversal solution.  Typically, a usage indicates when\
    \ STUN messages\n   get sent, which optional attributes to include, what server\
    \ is used,\n   and what authentication mechanism is to be used.  Interactive\n\
    \   Connectivity Establishment (ICE) [RFC8445] is one usage of STUN.  SIP\n  \
    \ Outbound [RFC5626] is another usage of STUN.  In some cases, a usage\n   will\
    \ require extensions to STUN.  A STUN extension can be in the form\n   of new\
    \ methods, attributes, or error response codes.  More\n   information on STUN\
    \ Usages can be found in Section 13.\n"
- title: 2.  Overview of Operation
  contents:
  - "2.  Overview of Operation\n   This section is descriptive only.\n           \
    \                /-----\\\n                         // STUN  \\\\\n          \
    \              |   Server  |\n                         \\\\       //\n       \
    \                    \\-----/\n                      +--------------+        \
    \     Public Internet\n      ................|     NAT 2    |.......................\n\
    \                      +--------------+\n                      +--------------+\
    \             Private Network 2\n      ................|     NAT 1    |.......................\n\
    \                      +--------------+\n                           /-----\\\n\
    \                         // STUN  \\\\\n                        |   Client  |\n\
    \                         \\\\       //               Private Network 1\n    \
    \                       \\-----/\n                 Figure 1: One Possible STUN\
    \ Configuration\n   One possible STUN configuration is shown in Figure 1.  In\
    \ this\n   configuration, there are two entities (called STUN agents) that\n \
    \  implement the STUN protocol.  The lower agent in the figure is the\n   client,\
    \ which is connected to private network 1.  This network\n   connects to private\
    \ network 2 through NAT 1.  Private network 2\n   connects to the public Internet\
    \ through NAT 2.  The upper agent in\n   the figure is the server, which resides\
    \ on the public Internet.\n   STUN is a client-server protocol.  It supports two\
    \ types of\n   transactions.  One is a request/response transaction in which a\n\
    \   client sends a request to a server, and the server returns a\n   response.\
    \  The second is an indication transaction in which either\n   agent -- client\
    \ or server -- sends an indication that generates no\n   response.  Both types\
    \ of transactions include a transaction ID, which\n   is a randomly selected 96-bit\
    \ number.  For request/response\n   transactions, this transaction ID allows the\
    \ client to associate the\n   response with the request that generated it; for\
    \ indications, the\n   transaction ID serves as a debugging aid.\n   All STUN\
    \ messages start with a fixed header that includes a method, a\n   class, and\
    \ the transaction ID.  The method indicates which of the\n   various requests\
    \ or indications this is; this specification defines\n   just one method, Binding,\
    \ but other methods are expected to be\n   defined in other documents.  The class\
    \ indicates whether this is a\n   request, a success response, an error response,\
    \ or an indication.\n   Following the fixed header comes zero or more attributes,\
    \ which are\n   Type-Length-Value extensions that convey additional information\
    \ for\n   the specific message.\n   This document defines a single method called\
    \ \"Binding\".  The Binding\n   method can be used either in request/response\
    \ transactions or in\n   indication transactions.  When used in request/response\
    \ transactions,\n   the Binding method can be used to determine the particular\
    \ binding a\n   NAT has allocated to a STUN client.  When used in either request/\n\
    \   response or in indication transactions, the Binding method can also\n   be\
    \ used to keep these bindings alive.\n   In the Binding request/response transaction,\
    \ a Binding request is\n   sent from a STUN client to a STUN server.  When the\
    \ Binding request\n   arrives at the STUN server, it may have passed through one\
    \ or more\n   NATs between the STUN client and the STUN server (in Figure 1, there\n\
    \   are two such NATs).  As the Binding request message passes through a\n   NAT,\
    \ the NAT will modify the source transport address (that is, the\n   source IP\
    \ address and the source port) of the packet.  As a result,\n   the source transport\
    \ address of the request received by the server\n   will be the public IP address\
    \ and port created by the NAT closest to\n   the server.  This is called a \"\
    reflexive transport address\".  The\n   STUN server copies that source transport\
    \ address into an XOR-MAPPED-\n   ADDRESS attribute in the STUN Binding response\
    \ and sends the Binding\n   response back to the STUN client.  As this packet\
    \ passes back through\n   a NAT, the NAT will modify the destination transport\
    \ address in the\n   IP header, but the transport address in the XOR-MAPPED-ADDRESS\n\
    \   attribute within the body of the STUN response will remain untouched.\n  \
    \ In this way, the client can learn its reflexive transport address\n   allocated\
    \ by the outermost NAT with respect to the STUN server.\n   In some usages, STUN\
    \ must be multiplexed with other protocols (e.g.,\n   [RFC8445] and [RFC5626]).\
    \  In these usages, there must be a way to\n   inspect a packet and determine\
    \ if it is a STUN packet or not.  STUN\n   provides three fields in the STUN header\
    \ with fixed values that can\n   be used for this purpose.  If this is not sufficient,\
    \ then STUN\n   packets can also contain a FINGERPRINT value, which can further\
    \ be\n   used to distinguish the packets.\n   STUN defines a set of optional procedures\
    \ that a usage can decide to\n   use, called \"mechanisms\".  These mechanisms\
    \ include DNS discovery, a\n   redirection technique to an alternate server, a\
    \ fingerprint attribute\n   for demultiplexing, and two authentication and message-integrity\n\
    \   exchanges.  The authentication mechanisms revolve around the use of a\n  \
    \ username, password, and message-integrity value.  Two authentication\n   mechanisms,\
    \ the long-term credential mechanism and the short-term\n   credential mechanism,\
    \ are defined in this specification.  Each usage\n   specifies the mechanisms\
    \ allowed with that usage.\n   In the long-term credential mechanism, the client\
    \ and server share a\n   pre-provisioned username and password and perform a digest\
    \ challenge/\n   response exchange inspired by the one defined for HTTP [RFC7616]\
    \ but\n   differing in details.  In the short-term credential mechanism, the\n\
    \   client and the server exchange a username and password through some\n   out-of-band\
    \ method prior to the STUN exchange.  For example, in the\n   ICE usage [RFC8445],\
    \ the two endpoints use out-of-band signaling to\n   exchange a username and password.\
    \  These are used to integrity\n   protect and authenticate the request and response.\
    \  There is no\n   challenge or nonce used.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n   STUN Agent:  A STUN agent is an entity that implements the\
    \ STUN\n      protocol.  The entity can be either a STUN client or a STUN\n  \
    \    server.\n   STUN Client:  A STUN client is an entity that sends STUN requests\
    \ and\n      receives STUN responses and STUN indications.  A STUN client can\n\
    \      also send indications.  In this specification, the terms \"STUN\n     \
    \ client\" and \"client\" are synonymous.\n   STUN Server:  A STUN server is an\
    \ entity that receives STUN requests\n      and STUN indications and that sends\
    \ STUN responses.  A STUN server\n      can also send indications.  In this specification,\
    \ the terms \"STUN\n      server\" and \"server\" are synonymous.\n   Transport\
    \ Address:  The combination of an IP address and port number\n      (such as a\
    \ UDP or TCP port number).\n   Reflexive Transport Address:  A transport address\
    \ learned by a client\n      that identifies that client as seen by another host\
    \ on an IP\n      network, typically a STUN server.  When there is an intervening\n\
    \      NAT between the client and the other host, the reflexive transport\n  \
    \    address represents the mapped address allocated to the client on\n      the\
    \ public side of the NAT.  Reflexive transport addresses are\n      learned from\
    \ the mapped address attribute (MAPPED-ADDRESS or XOR-\n      MAPPED-ADDRESS)\
    \ in STUN responses.\n   Mapped Address:  Same meaning as reflexive address. \
    \ This term is\n      retained only for historic reasons and due to the naming\
    \ of the\n      MAPPED-ADDRESS and XOR-MAPPED-ADDRESS attributes.\n   Long-Term\
    \ Credential:  A username and associated password that\n      represent a shared\
    \ secret between client and server.  Long-term\n      credentials are generally\
    \ granted to the client when a subscriber\n      enrolls in a service and persist\
    \ until the subscriber leaves the\n      service or explicitly changes the credential.\n\
    \   Long-Term Password:  The password from a long-term credential.\n   Short-Term\
    \ Credential:  A temporary username and associated password\n      that represent\
    \ a shared secret between client and server.  Short-\n      term credentials are\
    \ obtained through some kind of protocol\n      mechanism between the client and\
    \ server, preceding the STUN\n      exchange.  A short-term credential has an\
    \ explicit temporal scope,\n      which may be based on a specific amount of time\
    \ (such as 5\n      minutes) or on an event (such as termination of a Session\n\
    \      Initiation Protocol (SIP) [RFC3261] dialog).  The specific scope\n    \
    \  of a short-term credential is defined by the application usage.\n   Short-Term\
    \ Password:  The password component of a short-term\n      credential.\n   STUN\
    \ Indication:  A STUN message that does not receive a response.\n   Attribute:\
    \  The STUN term for a Type-Length-Value (TLV) object that\n      can be added\
    \ to a STUN message.  Attributes are divided into two\n      types: comprehension-required\
    \ and comprehension-optional.  STUN\n      agents can safely ignore comprehension-optional\
    \ attributes they\n      don't understand but cannot successfully process a message\
    \ if it\n      contains comprehension-required attributes that are not\n     \
    \ understood.\n   RTO:  Retransmission TimeOut, which defines the initial period\
    \ of\n      time between transmission of a request and the first retransmit of\n\
    \      that request.\n"
- title: 5.  STUN Message Structure
  contents:
  - "5.  STUN Message Structure\n   STUN messages are encoded in binary using network-oriented\
    \ format\n   (most significant byte or octet first, also commonly known as big-\n\
    \   endian).  The transmission order is described in detail in Appendix B\n  \
    \ of [RFC0791].  Unless otherwise noted, numeric constants are in\n   decimal\
    \ (base 10).\n   All STUN messages comprise a 20-byte header followed by zero\
    \ or more\n   attributes.  The STUN header contains a STUN message type, message\n\
    \   length, magic cookie, and transaction ID.\n      0                   1   \
    \                2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0|     STUN Message Type     |         Message Length        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                       Magic Cookie                          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ |                     Transaction ID (96 bits)                  |\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 2: Format of STUN Message Header\n   The most significant\
    \ 2 bits of every STUN message MUST be zeroes.\n   This can be used to differentiate\
    \ STUN packets from other protocols\n   when STUN is multiplexed with other protocols\
    \ on the same port.\n   The message type defines the message class (request, success\n\
    \   response, error response, or indication) and the message method (the\n   primary\
    \ function) of the STUN message.  Although there are four\n   message classes,\
    \ there are only two types of transactions in STUN:\n   request/response transactions\
    \ (which consist of a request message and\n   a response message) and indication\
    \ transactions (which consist of a\n   single indication message).  Response classes\
    \ are split into error\n   and success responses to aid in quickly processing\
    \ the STUN message.\n   The STUN Message Type field is decomposed further into\
    \ the following\n   structure:\n                       0                 1\n \
    \                      2  3  4 5 6 7 8 9 0 1 2 3 4 5\n                      +--+--+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      |M |M |M|M|M|C|M|M|M|C|M|M|M|M|\n                     \
    \ |11|10|9|8|7|1|6|5|4|0|3|2|1|0|\n                      +--+--+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 3: Format of STUN Message Type Field\n   Here the bits\
    \ in the STUN Message Type field are shown as most\n   significant (M11) through\
    \ least significant (M0).  M11 through M0\n   represent a 12-bit encoding of the\
    \ method.  C1 and C0 represent a\n   2-bit encoding of the class.  A class of\
    \ 0b00 is a request, a class\n   of 0b01 is an indication, a class of 0b10 is\
    \ a success response, and\n   a class of 0b11 is an error response.  This specification\
    \ defines a\n   single method, Binding.  The method and class are orthogonal,\
    \ so that\n   for each method, a request, success response, error response, and\n\
    \   indication are possible for that method.  Extensions defining new\n   methods\
    \ MUST indicate which classes are permitted for that method.\n   For example,\
    \ a Binding request has class=0b00 (request) and\n   method=0b000000000001 (Binding)\
    \ and is encoded into the first 16 bits\n   as 0x0001.  A Binding response has\
    \ class=0b10 (success response) and\n   method=0b000000000001 and is encoded into\
    \ the first 16 bits as\n   0x0101.\n      Note: This unfortunate encoding is due\
    \ to assignment of values in\n      [RFC3489] that did not consider encoding indication\
    \ messages,\n      success responses, and errors responses using bit fields.\n\
    \   The Magic Cookie field MUST contain the fixed value 0x2112A442 in\n   network\
    \ byte order.  In [RFC3489], the 32 bits comprising the Magic\n   Cookie field\
    \ were part of the transaction ID; placing the magic\n   cookie in this location\
    \ allows a server to detect if the client will\n   understand certain attributes\
    \ that were added to STUN by [RFC5389].\n   In addition, it aids in distinguishing\
    \ STUN packets from packets of\n   other protocols when STUN is multiplexed with\
    \ those other protocols\n   on the same port.\n   The transaction ID is a 96-bit\
    \ identifier, used to uniquely identify\n   STUN transactions.  For request/response\
    \ transactions, the\n   transaction ID is chosen by the STUN client for the request\
    \ and\n   echoed by the server in the response.  For indications, it is chosen\n\
    \   by the agent sending the indication.  It primarily serves to\n   correlate\
    \ requests with responses, though it also plays a small role\n   in helping to\
    \ prevent certain types of attacks.  The server also uses\n   the transaction\
    \ ID as a key to identify each transaction uniquely\n   across all clients.  As\
    \ such, the transaction ID MUST be uniformly\n   and randomly chosen from the\
    \ interval 0 .. 2**96-1 and MUST be\n   cryptographically random.  Resends of\
    \ the same request reuse the same\n   transaction ID, but the client MUST choose\
    \ a new transaction ID for\n   new transactions unless the new request is bit-wise\
    \ identical to the\n   previous request and sent from the same transport address\
    \ to the same\n   IP address.  Success and error responses MUST carry the same\n\
    \   transaction ID as their corresponding request.  When an agent is\n   acting\
    \ as a STUN server and STUN client on the same port, the\n   transaction IDs in\
    \ requests sent by the agent have no relationship to\n   the transaction IDs in\
    \ requests received by the agent.\n   The message length MUST contain the size\
    \ of the message in bytes, not\n   including the 20-byte STUN header.  Since all\
    \ STUN attributes are\n   padded to a multiple of 4 bytes, the last 2 bits of\
    \ this field are\n   always zero.  This provides another way to distinguish STUN\
    \ packets\n   from packets of other protocols.\n   Following the STUN fixed portion\
    \ of the header are zero or more\n   attributes.  Each attribute is TLV (Type-Length-Value)\
    \ encoded.\n   Details of the encoding and the attributes themselves are given\
    \ in\n   Section 14.\n"
- title: 6.  Base Protocol Procedures
  contents:
  - "6.  Base Protocol Procedures\n   This section defines the base procedures of\
    \ the STUN protocol.  It\n   describes how messages are formed, how they are sent,\
    \ and how they\n   are processed when they are received.  It also defines the\
    \ detailed\n   processing of the Binding method.  Other sections in this document\n\
    \   describe optional procedures that a usage may elect to use in certain\n  \
    \ situations.  Other documents may define other extensions to STUN, by\n   adding\
    \ new methods, new attributes, or new error response codes.\n"
- title: 6.1.  Forming a Request or an Indication
  contents:
  - "6.1.  Forming a Request or an Indication\n   When formulating a request or indication\
    \ message, the agent MUST\n   follow the rules in Section 5 when creating the\
    \ header.  In addition,\n   the message class MUST be either \"Request\" or \"\
    Indication\" (as\n   appropriate), and the method must be either Binding or some\
    \ method\n   defined in another document.\n   The agent then adds any attributes\
    \ specified by the method or the\n   usage.  For example, some usages may specify\
    \ that the agent use an\n   authentication method (Section 9) or the FINGERPRINT\
    \ attribute\n   (Section 7).\n   If the agent is sending a request, it SHOULD\
    \ add a SOFTWARE attribute\n   to the request.  Agents MAY include a SOFTWARE\
    \ attribute in\n   indications, depending on the method.  Extensions to STUN should\n\
    \   discuss whether SOFTWARE is useful in new indications.  Note that the\n  \
    \ inclusion of a SOFTWARE attribute may have security implications; see\n   Section\
    \ 16.1.2 for details.\n   For the Binding method with no authentication, no attributes\
    \ are\n   required unless the usage specifies otherwise.\n   All STUN messages\
    \ sent over UDP or DTLS-over-UDP [RFC6347] SHOULD be\n   less than the path MTU,\
    \ if known.\n   If the path MTU is unknown for UDP, messages SHOULD be the smaller\
    \ of\n   576 bytes and the first-hop MTU for IPv4 [RFC1122] and 1280 bytes for\n\
    \   IPv6 [RFC8200].  This value corresponds to the overall size of the IP\n  \
    \ packet.  Consequently, for IPv4, the actual STUN message would need\n   to be\
    \ less than 548 bytes (576 minus 20-byte IP header, minus 8-byte\n   UDP header,\
    \ assuming no IP options are used).\n   If the path MTU is unknown for DTLS-over-UDP,\
    \ the rules described in\n   the previous paragraph need to be adjusted to take\
    \ into account the\n   size of the (13-byte) DTLS Record header, the Message Authentication\n\
    \   Code (MAC) size, and the padding size.\n   STUN provides no ability to handle\
    \ the case where the request is\n   smaller than the MTU but the response is larger\
    \ than the MTU.  It is\n   not envisioned that this limitation will be an issue\
    \ for STUN.  The\n   MTU limitation is a SHOULD, not a MUST, to account for cases\
    \ where\n   STUN itself is being used to probe for MTU characteristics [RFC5780].\n\
    \   See also [STUN-PMTUD] for a framework that uses STUN to add Path MTU\n   Discovery\
    \ to protocols that lack such a mechanism.  Outside of this\n   or similar applications,\
    \ the MTU constraint MUST be followed.\n"
- title: 6.2.  Sending the Request or Indication
  contents:
  - "6.2.  Sending the Request or Indication\n   The agent then sends the request\
    \ or indication.  This document\n   specifies how to send STUN messages over UDP,\
    \ TCP, TLS-over-TCP, or\n   DTLS-over-UDP; other transport protocols may be added\
    \ in the future.\n   The STUN Usage must specify which transport protocol is used\
    \ and how\n   the agent determines the IP address and port of the recipient.\n\
    \   Section 8 describes a DNS-based method of determining the IP address\n   and\
    \ port of a server that a usage may elect to use.\n   At any time, a client MAY\
    \ have multiple outstanding STUN requests\n   with the same STUN server (that\
    \ is, multiple transactions in\n   progress, with different transaction IDs).\
    \  Absent other limits to\n   the rate of new transactions (such as those specified\
    \ by ICE for\n   connectivity checks or when STUN is run over TCP), a client SHOULD\n\
    \   limit itself to ten outstanding transactions to the same server.\n"
- title: 6.2.1.  Sending over UDP or DTLS-over-UDP
  contents:
  - "6.2.1.  Sending over UDP or DTLS-over-UDP\n   When running STUN over UDP or STUN\
    \ over DTLS-over-UDP [RFC7350], it\n   is possible that the STUN message might\
    \ be dropped by the network.\n   Reliability of STUN request/response transactions\
    \ is accomplished\n   through retransmissions of the request message by the client\n\
    \   application itself.  STUN indications are not retransmitted; thus,\n   indication\
    \ transactions over UDP or DTLS-over-UDP are not reliable.\n   A client SHOULD\
    \ retransmit a STUN request message starting with an\n   interval of RTO (\"Retransmission\
    \ TimeOut\"), doubling after each\n   retransmission.  The RTO is an estimate\
    \ of the round-trip time (RTT)\n   and is computed as described in [RFC6298],\
    \ with two exceptions.\n   First, the initial value for RTO SHOULD be greater\
    \ than or equal to\n   500 ms.  The exception cases for this \"SHOULD\" are when\
    \ other\n   mechanisms are used to derive congestion thresholds (such as the ones\n\
    \   defined in ICE for fixed-rate streams) or when STUN is used in non-\n   Internet\
    \ environments with known network capacities.  In fixed-line\n   access links,\
    \ a value of 500 ms is RECOMMENDED.  Second, the value of\n   RTO SHOULD NOT be\
    \ rounded up to the nearest second.  Rather, a 1 ms\n   accuracy SHOULD be maintained.\
    \  As with TCP, the usage of Karn's\n   algorithm is RECOMMENDED [KARN87].  When\
    \ applied to STUN, it means\n   that RTT estimates SHOULD NOT be computed from\
    \ STUN transactions that\n   result in the retransmission of a request.\n   The\
    \ value for RTO SHOULD be cached by a client after the completion\n   of the transaction\
    \ and used as the starting value for RTO for the\n   next transaction to the same\
    \ server (based on equality of IP\n   address).  The value SHOULD be considered\
    \ stale and discarded if no\n   transactions have occurred to the same server\
    \ in the last 10 minutes.\n   Retransmissions continue until a response is received\
    \ or until a\n   total of Rc requests have been sent.  Rc SHOULD be configurable\
    \ and\n   SHOULD have a default of 7.  If, after the last request, a duration\n\
    \   equal to Rm times the RTO has passed without a response (providing\n   ample\
    \ time to get a response if only this final request actually\n   succeeds), the\
    \ client SHOULD consider the transaction to have failed.\n   Rm SHOULD be configurable\
    \ and SHOULD have a default of 16.  A STUN\n   transaction over UDP or DTLS-over-UDP\
    \ is also considered failed if\n   there has been a hard ICMP error [RFC1122].\
    \  For example, assuming an\n   RTO of 500 ms, requests would be sent at times\
    \ 0 ms, 500 ms, 1500 ms,\n   3500 ms, 7500 ms, 15500 ms, and 31500 ms.  If the\
    \ client has not\n   received a response after 39500 ms, the client will consider\
    \ the\n   transaction to have timed out.\n"
- title: 6.2.2.  Sending over TCP or TLS-over-TCP
  contents:
  - "6.2.2.  Sending over TCP or TLS-over-TCP\n   For TCP and TLS-over-TCP [RFC8446],\
    \ the client opens a TCP connection\n   to the server.\n   In some usages of STUN,\
    \ STUN is the only protocol over the TCP\n   connection.  In this case, it can\
    \ be sent without the aid of any\n   additional framing or demultiplexing.  In\
    \ other usages, or with other\n   extensions, it may be multiplexed with other\
    \ data over a TCP\n   connection.  In that case, STUN MUST be run on top of some\
    \ kind of\n   framing protocol, specified by the usage or extension, which allows\n\
    \   for the agent to extract complete STUN messages and complete\n   application-layer\
    \ messages.  The STUN service running on the well-\n   known port or ports discovered\
    \ through the DNS procedures in\n   Section 8 is for STUN alone, and not for STUN\
    \ multiplexed with other\n   data.  Consequently, no framing protocols are used\
    \ in connections to\n   those servers.  When additional framing is utilized, the\
    \ usage will\n   specify how the client knows to apply it and what port to connect\
    \ to.\n   For example, in the case of ICE connectivity checks, this information\n\
    \   is learned through out-of-band negotiation between client and server.\n  \
    \ Reliability of STUN over TCP and TLS-over-TCP is handled by TCP\n   itself,\
    \ and there are no retransmissions at the STUN protocol level.\n   However, for\
    \ a request/response transaction, if the client has not\n   received a response\
    \ by Ti seconds after it sent the request message,\n   it considers the transaction\
    \ to have timed out.  Ti SHOULD be\n   configurable and SHOULD have a default\
    \ of 39.5 s.  This value has\n   been chosen to equalize the TCP and UDP timeouts\
    \ for the default\n   initial RTO.\n   In addition, if the client is unable to\
    \ establish the TCP connection,\n   or the TCP connection is reset or fails before\
    \ a response is\n   received, any request/response transaction in progress is\
    \ considered\n   to have failed.\n   The client MAY send multiple transactions\
    \ over a single TCP (or TLS-\n   over-TCP) connection, and it MAY send another\
    \ request before\n   receiving a response to the previous request.  The client\
    \ SHOULD keep\n   the connection open until it:\n   o  has no further STUN requests\
    \ or indications to send over that\n      connection,\n   o  has no plans to use\
    \ any resources (such as a mapped address\n      (MAPPED-ADDRESS or XOR-MAPPED-ADDRESS)\
    \ or relayed address\n      [RFC5766]) that were learned though STUN requests\
    \ sent over that\n      connection,\n   o  if multiplexing other application protocols\
    \ over that port, has\n      finished using those other protocols,\n   o  if using\
    \ that learned port with a remote peer, has established\n      communications\
    \ with that remote peer, as is required by some TCP\n      NAT traversal techniques\
    \ (e.g., [RFC6544]).\n   The details of an eventual keep-alive mechanism are left\
    \ to each STUN\n   Usage.  In any case, if a transaction fails because an idle\
    \ TCP\n   connection doesn't work anymore, the client SHOULD send a RST and try\n\
    \   to open a new TCP connection.\n   At the server end, the server SHOULD keep\
    \ the connection open and let\n   the client close it, unless the server has determined\
    \ that the\n   connection has timed out (for example, due to the client\n   disconnecting\
    \ from the network).  Bindings learned by the client will\n   remain valid in\
    \ intervening NATs only while the connection remains\n   open.  Only the client\
    \ knows how long it needs the binding.  The\n   server SHOULD NOT close a connection\
    \ if a request was received over\n   that connection for which a response was\
    \ not sent.  A server MUST NOT\n   ever open a connection back towards the client\
    \ in order to send a\n   response.  Servers SHOULD follow best practices regarding\
    \ connection\n   management in cases of overload.\n"
- title: 6.2.3.  Sending over TLS-over-TCP or DTLS-over-UDP
  contents:
  - "6.2.3.  Sending over TLS-over-TCP or DTLS-over-UDP\n   When STUN is run by itself\
    \ over TLS-over-TCP or DTLS-over-UDP, the\n   TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\
    \ and\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 ciphersuites MUST be\n   implemented\
    \ (for compatibility with older versions of this protocol),\n   except if deprecated\
    \ by rules of a specific STUN usage.  Other\n   ciphersuites MAY be implemented.\
    \  Note that STUN clients and servers\n   that implement TLS version 1.3 [RFC8446]\
    \ or subsequent versions are\n   also required to implement mandatory ciphersuites\
    \ from those\n   specifications and SHOULD disable usage of deprecated ciphersuites\n\
    \   when they detect support for those specifications.  Perfect Forward\n   Secrecy\
    \ (PFS) ciphersuites MUST be preferred over non-PFS\n   ciphersuites.  Ciphersuites\
    \ with known weaknesses, such as those\n   based on (single) DES and RC4, MUST\
    \ NOT be used.  Implementations\n   MUST disable TLS-level compression.\n   These\
    \ recommendations are just a part of the recommendations in\n   [BCP195] that\
    \ implementations and deployments of a STUN Usage using\n   TLS or DTLS MUST follow.\n\
    \   When it receives the TLS Certificate message, the client MUST verify\n   the\
    \ certificate and inspect the site identified by the certificate.\n   If the certificate\
    \ is invalid or revoked, or if it does not identify\n   the appropriate party,\
    \ the client MUST NOT send the STUN message or\n   otherwise proceed with the\
    \ STUN transaction.  The client MUST verify\n   the identity of the server.  To\
    \ do that, it follows the\n   identification procedures defined in [RFC6125],\
    \ with a certificate\n   containing an identifier of type DNS-ID or CN-ID, optionally\
    \ with a\n   wildcard character as the leftmost label, but not of type SRV-ID\
    \ or\n   URI-ID.\n   When STUN is run multiplexed with other protocols over a\
    \ TLS-over-TCP\n   connection or a DTLS-over-UDP association, the mandatory ciphersuites\n\
    \   and TLS handling procedures operate as defined by those protocols.\n"
- title: 6.3.  Receiving a STUN Message
  contents:
  - "6.3.  Receiving a STUN Message\n   This section specifies the processing of a\
    \ STUN message.  The\n   processing specified here is for STUN messages as defined\
    \ in this\n   specification; additional rules for backwards compatibility are\n\
    \   defined in Section 11.  Those additional procedures are optional, and\n  \
    \ usages can elect to utilize them.  First, a set of processing\n   operations\
    \ is applied that is independent of the class.  This is\n   followed by class-specific\
    \ processing, described in the subsections\n   that follow.\n   When a STUN agent\
    \ receives a STUN message, it first checks that the\n   message obeys the rules\
    \ of Section 5.  It checks that the first two\n   bits are 0, that the Magic Cookie\
    \ field has the correct value, that\n   the message length is sensible, and that\
    \ the method value is a\n   supported method.  It checks that the message class\
    \ is allowed for\n   the particular method.  If the message class is \"Success\
    \ Response\" or\n   \"Error Response\", the agent checks that the transaction\
    \ ID matches a\n   transaction that is still in progress.  If the FINGERPRINT\
    \ extension\n   is being used, the agent checks that the FINGERPRINT attribute\
    \ is\n   present and contains the correct value.  If any errors are detected,\n\
    \   the message is silently discarded.  In the case when STUN is being\n   multiplexed\
    \ with another protocol, an error may indicate that this is\n   not really a STUN\
    \ message; in this case, the agent should try to\n   parse the message as a different\
    \ protocol.\n   The STUN agent then does any checks that are required by a\n \
    \  authentication mechanism that the usage has specified (see\n   Section 9).\n\
    \   Once the authentication checks are done, the STUN agent checks for\n   unknown\
    \ attributes and known-but-unexpected attributes in the\n   message.  Unknown\
    \ comprehension-optional attributes MUST be ignored\n   by the agent.  Known-but-unexpected\
    \ attributes SHOULD be ignored by\n   the agent.  Unknown comprehension-required\
    \ attributes cause\n   processing that depends on the message class and is described\
    \ below.\n   At this point, further processing depends on the message class of\
    \ the\n   request.\n"
- title: 6.3.1.  Processing a Request
  contents:
  - "6.3.1.  Processing a Request\n   If the request contains one or more unknown\
    \ comprehension-required\n   attributes, the server replies with an error response\
    \ with an error\n   code of 420 (Unknown Attribute) and includes an UNKNOWN-ATTRIBUTES\n\
    \   attribute in the response that lists the unknown comprehension-\n   required\
    \ attributes.\n   Otherwise, the server then does any additional checking that\
    \ the\n   method or the specific usage requires.  If all the checks succeed,\n\
    \   the server formulates a success response as described below.\n   When run\
    \ over UDP or DTLS-over-UDP, a request received by the server\n   could be the\
    \ first request of a transaction or could be a\n   retransmission.  The server\
    \ MUST respond to retransmissions such that\n   the following property is preserved:\
    \ if the client receives the\n   response to the retransmission and not the response\
    \ that was sent to\n   the original request, the overall state on the client and\
    \ server is\n   identical to the case where only the response to the original\n\
    \   retransmission is received or where both responses are received (in\n   which\
    \ case the client will use the first).  The easiest way to meet\n   this requirement\
    \ is for the server to remember all transaction IDs\n   received over UDP or DTLS-over-UDP\
    \ and their corresponding responses\n   in the last 40 seconds.  However, this\
    \ requires the server to hold\n   state and is inappropriate for any requests\
    \ that are not\n   authenticated.  Another way is to reprocess the request and\
    \ recompute\n   the response.  The latter technique MUST only be applied to requests\n\
    \   that are idempotent (a request is considered idempotent when the same\n  \
    \ request can be safely repeated without impacting the overall state of\n   the\
    \ system) and result in the same success response for the same\n   request.  The\
    \ Binding method is considered to be idempotent.  Note\n   that there are certain\
    \ rare network events that could cause the\n   reflexive transport address value\
    \ to change, resulting in a different\n   mapped address in different success\
    \ responses.  Extensions to STUN\n   MUST discuss the implications of request\
    \ retransmissions on servers\n   that do not store transaction state.\n"
- title: 6.3.1.1.  Forming a Success or Error Response
  contents:
  - "6.3.1.1.  Forming a Success or Error Response\n   When forming the response (success\
    \ or error), the server follows the\n   rules of Section 6.  The method of the\
    \ response is the same as that\n   of the request, and the message class is either\
    \ \"Success Response\" or\n   \"Error Response\".\n   For an error response, the\
    \ server MUST add an ERROR-CODE attribute\n   containing the error code specified\
    \ in the processing above.  The\n   reason phrase is not fixed but SHOULD be something\
    \ suitable for the\n   error code.  For certain errors, additional attributes\
    \ are added to\n   the message.  These attributes are spelled out in the description\n\
    \   where the error code is specified.  For example, for an error code of\n  \
    \ 420 (Unknown Attribute), the server MUST include an UNKNOWN-\n   ATTRIBUTES\
    \ attribute.  Certain authentication errors also cause\n   attributes to be added\
    \ (see Section 9).  Extensions may define other\n   errors and/or additional attributes\
    \ to add in error cases.\n   If the server authenticated the request using an\
    \ authentication\n   mechanism, then the server SHOULD add the appropriate authentication\n\
    \   attributes to the response (see Section 9).\n   The server also adds any attributes\
    \ required by the specific method\n   or usage.  In addition, the server SHOULD\
    \ add a SOFTWARE attribute to\n   the message.\n   For the Binding method, no\
    \ additional checking is required unless the\n   usage specifies otherwise.  When\
    \ forming the success response, the\n   server adds an XOR-MAPPED-ADDRESS attribute\
    \ to the response; this\n   attribute contains the source transport address of\
    \ the request\n   message.  For UDP or DTLS-over-UDP, this is the source IP address\
    \ and\n   source UDP port of the request message.  For TCP and TLS-over-TCP,\n\
    \   this is the source IP address and source TCP port of the TCP\n   connection\
    \ as seen by the server.\n"
- title: 6.3.1.2.  Sending the Success or Error Response
  contents:
  - "6.3.1.2.  Sending the Success or Error Response\n   The response (success or\
    \ error) is sent over the same transport as\n   the request was received on. \
    \ If the request was received over UDP or\n   DTLS-over-UDP, the destination IP\
    \ address and port of the response\n   are the source IP address and port of the\
    \ received request message,\n   and the source IP address and port of the response\
    \ are equal to the\n   destination IP address and port of the received request\
    \ message.  If\n   the request was received over TCP or TLS-over-TCP, the response\
    \ is\n   sent back on the same TCP connection as the request was received on.\n\
    \   The server is allowed to send responses in a different order than it\n   received\
    \ the requests.\n"
- title: 6.3.2.  Processing an Indication
  contents:
  - "6.3.2.  Processing an Indication\n   If the indication contains unknown comprehension-required\
    \ attributes,\n   the indication is discarded and processing ceases.\n   Otherwise,\
    \ the agent then does any additional checking that the\n   method or the specific\
    \ usage requires.  If all the checks succeed,\n   the agent then processes the\
    \ indication.  No response is generated\n   for an indication.\n   For the Binding\
    \ method, no additional checking or processing is\n   required, unless the usage\
    \ specifies otherwise.  The mere receipt of\n   the message by the agent has refreshed\
    \ the bindings in the\n   intervening NATs.\n   Since indications are not re-transmitted\
    \ over UDP or DTLS-over-UDP\n   (unlike requests), there is no need to handle\
    \ re-transmissions of\n   indications at the sending agent.\n"
- title: 6.3.3.  Processing a Success Response
  contents:
  - "6.3.3.  Processing a Success Response\n   If the success response contains unknown\
    \ comprehension-required\n   attributes, the response is discarded and the transaction\
    \ is\n   considered to have failed.\n   Otherwise, the client then does any additional\
    \ checking that the\n   method or the specific usage requires.  If all the checks\
    \ succeed,\n   the client then processes the success response.\n   For the Binding\
    \ method, the client checks that the XOR-MAPPED-ADDRESS\n   attribute is present\
    \ in the response.  The client checks the address\n   family specified.  If it\
    \ is an unsupported address family, the\n   attribute SHOULD be ignored.  If it\
    \ is an unexpected but supported\n   address family (for example, the Binding\
    \ transaction was sent over\n   IPv4, but the address family specified is IPv6),\
    \ then the client MAY\n   accept and use the value.\n"
- title: 6.3.4.  Processing an Error Response
  contents:
  - "6.3.4.  Processing an Error Response\n   If the error response contains unknown\
    \ comprehension-required\n   attributes, or if the error response does not contain\
    \ an ERROR-CODE\n   attribute, then the transaction is simply considered to have\
    \ failed.\n   Otherwise, the client then does any processing specified by the\n\
    \   authentication mechanism (see Section 9).  This may result in a new\n   transaction\
    \ attempt.\n   The processing at this point depends on the error code, the method,\n\
    \   and the usage; the following are the default rules:\n   o  If the error code\
    \ is 300 through 399, the client SHOULD consider\n      the transaction as failed\
    \ unless the ALTERNATE-SERVER extension\n      (Section 10) is being used.\n \
    \  o  If the error code is 400 through 499, the client declares the\n      transaction\
    \ failed; in the case of 420 (Unknown Attribute), the\n      response should contain\
    \ a UNKNOWN-ATTRIBUTES attribute that gives\n      additional information.\n \
    \  o  If the error code is 500 through 599, the client MAY resend the\n      request;\
    \ clients that do so MUST limit the number of times they do\n      this.  Unless\
    \ a specific error code specifies a different value,\n      the number of retransmissions\
    \ SHOULD be limited to 4.\n   Any other error code causes the client to consider\
    \ the transaction\n   failed.\n"
- title: 7.  FINGERPRINT Mechanism
  contents:
  - "7.  FINGERPRINT Mechanism\n   This section describes an optional mechanism for\
    \ STUN that aids in\n   distinguishing STUN messages from packets of other protocols\
    \ when the\n   two are multiplexed on the same transport address.  This mechanism\
    \ is\n   optional, and a STUN Usage must describe if and when it is used.  The\n\
    \   FINGERPRINT mechanism is not backwards compatible with RFC 3489 and\n   cannot\
    \ be used in environments where such compatibility is required.\n   In some usages,\
    \ STUN messages are multiplexed on the same transport\n   address as other protocols,\
    \ such as the Real-Time Transport Protocol\n   (RTP).  In order to apply the processing\
    \ described in Section 6, STUN\n   messages must first be separated from the application\
    \ packets.\n   Section 5 describes three fixed fields in the STUN header that\
    \ can be\n   used for this purpose.  However, in some cases, these three fixed\n\
    \   fields may not be sufficient.\n   When the FINGERPRINT extension is used,\
    \ an agent includes the\n   FINGERPRINT attribute in messages it sends to another\
    \ agent.\n   Section 14.7 describes the placement and value of this attribute.\n\
    \   When the agent receives what it believes is a STUN message, then, in\n   addition\
    \ to other basic checks, the agent also checks that the\n   message contains a\
    \ FINGERPRINT attribute and that the attribute\n   contains the correct value.\
    \  Section 6.3 describes when in the\n   overall processing of a STUN message\
    \ the FINGERPRINT check is\n   performed.  This additional check helps the agent\
    \ detect messages of\n   other protocols that might otherwise seem to be STUN\
    \ messages.\n"
- title: 8.  DNS Discovery of a Server
  contents:
  - "8.  DNS Discovery of a Server\n   This section describes an optional procedure\
    \ for STUN that allows a\n   client to use DNS to determine the IP address and\
    \ port of a server.\n   A STUN Usage must describe if and when this extension\
    \ is used.  To\n   use this procedure, the client must know a STUN URI [RFC7064];\
    \ the\n   usage must also describe how the client obtains this URI.  Hard-\n \
    \  coding a STUN URI into software is NOT RECOMMENDED in case the domain\n   name\
    \ is lost or needs to change for legal or other reasons.\n   When a client wishes\
    \ to locate a STUN server on the public Internet\n   that accepts Binding request/response\
    \ transactions, the STUN URI\n   scheme is \"stun\".  When it wishes to locate\
    \ a STUN server that\n   accepts Binding request/response transactions over a\
    \ TLS or DTLS\n   session, the URI scheme is \"stuns\".\n   The syntax of the\
    \ \"stun\" and \"stuns\" URIs is defined in Section 3.1\n   of [RFC7064].  STUN\
    \ Usages MAY define additional URI schemes.\n"
- title: 8.1.  STUN URI Scheme Semantics
  contents:
  - "8.1.  STUN URI Scheme Semantics\n   If the <host> part of a \"stun\" URI contains\
    \ an IP address, then this\n   IP address is used directly to contact the server.\
    \  A \"stuns\" URI\n   containing an IP address MUST be rejected.  A future STUN\
    \ extension\n   or usage may relax this requirement, provided it demonstrates\
    \ how to\n   authenticate the STUN server and prevent man-in-the-middle attacks.\n\
    \   If the URI does not contain an IP address, the domain name contained\n   in\
    \ the <host> part is resolved to a transport address using the SRV\n   procedures\
    \ specified in [RFC2782].  The DNS SRV service name is the\n   content of the\
    \ <scheme> part.  The protocol in the SRV lookup is the\n   transport protocol\
    \ the client will run STUN over: \"udp\" for UDP and\n   \"tcp\" for TCP.\n  \
    \ The procedures of RFC 2782 are followed to determine the server to\n   contact.\
    \  RFC 2782 spells out the details of how a set of SRV records\n   is sorted and\
    \ then tried.  However, RFC 2782 only states that the\n   client should \"try\
    \ to connect to the (protocol, address, service)\"\n   without giving any details\
    \ on what happens in the event of failure.\n   When following these procedures,\
    \ if the STUN transaction times out\n   without receipt of a response, the client\
    \ SHOULD retry the request to\n   the next server in the order defined by RFC\
    \ 2782.  Such a retry is\n   only possible for request/response transmissions,\
    \ since indication\n   transactions generate no response or timeout.\n   In addition,\
    \ instead of querying either the A or the AAAA resource\n   records for a domain\
    \ name, a dual-stack IPv4/IPv6 client MUST query\n   both and try the requests\
    \ with all the IP addresses received, as\n   specified in [RFC8305].\n   The default\
    \ port for STUN requests is 3478, for both TCP and UDP.\n   The default port for\
    \ STUN over TLS and STUN over DTLS requests is\n   5349.  Servers can run STUN\
    \ over DTLS on the same port as STUN over\n   UDP if the server software supports\
    \ determining whether the initial\n   message is a DTLS or STUN message.  Servers\
    \ can run STUN over TLS on\n   the same port as STUN over TCP if the server software\
    \ supports\n   determining whether the initial message is a TLS or STUN message.\n\
    \   Administrators of STUN servers SHOULD use these ports in their SRV\n   records\
    \ for UDP and TCP.  In all cases, the port in DNS MUST reflect\n   the one on\
    \ which the server is listening.\n   If no SRV records are found, the client performs\
    \ both an A and AAAA\n   record lookup of the domain name, as described in [RFC8305].\
    \  The\n   result will be a list of IP addresses, each of which can be\n   simultaneously\
    \ contacted at the default port using UDP or TCP,\n   independent of the STUN\
    \ Usage.  For usages that require TLS, the\n   client connects to the IP addresses\
    \ using the default STUN over TLS\n   port.  For usages that require DTLS, the\
    \ client connects to the IP\n   addresses using the default STUN over DTLS port.\n"
- title: 9.  Authentication and Message-Integrity Mechanisms
  contents:
  - "9.  Authentication and Message-Integrity Mechanisms\n   This section defines\
    \ two mechanisms for STUN that a client and server\n   can use to provide authentication\
    \ and message integrity; these two\n   mechanisms are known as the short-term\
    \ credential mechanism and the\n   long-term credential mechanism.  These two\
    \ mechanisms are optional,\n   and each usage must specify if and when these mechanisms\
    \ are used.\n   Consequently, both clients and servers will know which mechanism\
    \ (if\n   any) to follow based on knowledge of which usage applies.  For\n   example,\
    \ a STUN server on the public Internet supporting ICE would\n   have no authentication,\
    \ whereas the STUN server functionality in an\n   agent supporting connectivity\
    \ checks would utilize short-term\n   credentials.  An overview of these two mechanisms\
    \ is given in\n   Section 2.\n   Each mechanism specifies the additional processing\
    \ required to use\n   that mechanism, extending the processing specified in Section\
    \ 6.  The\n   additional processing occurs in three different places: when forming\n\
    \   a message, when receiving a message immediately after the basic\n   checks\
    \ have been performed, and when doing the detailed processing of\n   error responses.\n\
    \   Note that agents MUST ignore all attributes that follow MESSAGE-\n   INTEGRITY,\
    \ with the exception of the MESSAGE-INTEGRITY-SHA256 and\n   FINGERPRINT attributes.\
    \  Similarly, agents MUST ignore all attributes\n   that follow the MESSAGE-INTEGRITY-SHA256\
    \ attribute if the MESSAGE-\n   INTEGRITY attribute is not present, with the exception\
    \ of the\n   FINGERPRINT attribute.\n"
- title: 9.1.  Short-Term Credential Mechanism
  contents:
  - "9.1.  Short-Term Credential Mechanism\n   The short-term credential mechanism\
    \ assumes that, prior to the STUN\n   transaction, the client and server have\
    \ used some other protocol to\n   exchange a credential in the form of a username\
    \ and password.  This\n   credential is time-limited.  The time limit is defined\
    \ by the usage.\n   As an example, in the ICE usage [RFC8445], the two endpoints\
    \ use out-\n   of-band signaling to agree on a username and password, and this\n\
    \   username and password are applicable for the duration of the media\n   session.\n\
    \   This credential is used to form a message-integrity check in each\n   request\
    \ and in many responses.  There is no challenge and response as\n   in the long-term\
    \ mechanism; consequently, replay is limited by virtue\n   of the time-limited\
    \ nature of the credential.\n"
- title: 9.1.1.  HMAC Key
  contents:
  - "9.1.1.  HMAC Key\n   For short-term credentials, the Hash-Based Message Authentication\n\
    \   Code (HMAC) key is defined as follow:\n                       key = OpaqueString(password)\n\
    \   where the OpaqueString profile is defined in [RFC8265].  The encoding\n  \
    \ used is UTF-8 [RFC3629].\n"
- title: 9.1.2.  Forming a Request or Indication
  contents:
  - "9.1.2.  Forming a Request or Indication\n   For a request or indication message,\
    \ the agent MUST include the\n   USERNAME, MESSAGE-INTEGRITY-SHA256, and MESSAGE-INTEGRITY\
    \ attributes\n   in the message unless the agent knows from an external mechanism\n\
    \   which message integrity algorithm is supported by both agents.  In\n   this\
    \ case, either MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-SHA256 MUST\n   be included\
    \ in addition to USERNAME.  The HMAC for the MESSAGE-\n   INTEGRITY attribute\
    \ is computed as described in Section 14.5, and the\n   HMAC for the MESSAGE-INTEGRITY-SHA256\
    \ attributes is computed as\n   described in Section 14.6.  Note that the password\
    \ is never included\n   in the request or indication.\n"
- title: 9.1.3.  Receiving a Request or Indication
  contents:
  - "9.1.3.  Receiving a Request or Indication\n   After the agent has done the basic\
    \ processing of a message, the agent\n   performs the checks listed below in the\
    \ order specified:\n   o  If the message does not contain 1) a MESSAGE-INTEGRITY\
    \ or a\n      MESSAGE-INTEGRITY-SHA256 attribute and 2) a USERNAME attribute:\n\
    \      *  If the message is a request, the server MUST reject the request\n  \
    \       with an error response.  This response MUST use an error code\n      \
    \   of 400 (Bad Request).\n      *  If the message is an indication, the agent\
    \ MUST silently\n         discard the indication.\n   o  If the USERNAME does\
    \ not contain a username value currently valid\n      within the server:\n   \
    \   *  If the message is a request, the server MUST reject the request\n     \
    \    with an error response.  This response MUST use an error code\n         of\
    \ 401 (Unauthenticated).\n      *  If the message is an indication, the agent\
    \ MUST silently\n         discard the indication.\n   o  If the MESSAGE-INTEGRITY-SHA256\
    \ attribute is present, compute the\n      value for the message integrity as\
    \ described in Section 14.6,\n      using the password associated with the username.\
    \  If the MESSAGE-\n      INTEGRITY-SHA256 attribute is not present, then use\
    \ the same\n      password to compute the value for the message integrity as\n\
    \      described in Section 14.5.  If the resulting value does not match\n   \
    \   the contents of the corresponding attribute (MESSAGE-INTEGRITY-\n      SHA256\
    \ or MESSAGE-INTEGRITY):\n      *  If the message is a request, the server MUST\
    \ reject the request\n         with an error response.  This response MUST use\
    \ an error code\n         of 401 (Unauthenticated).\n      *  If the message is\
    \ an indication, the agent MUST silently\n         discard the indication.\n \
    \  If these checks pass, the agent continues to process the request or\n   indication.\
    \  Any response generated by a server to a request that\n   contains a MESSAGE-INTEGRITY-SHA256\
    \ attribute MUST include the\n   MESSAGE-INTEGRITY-SHA256 attribute, computed\
    \ using the password\n   utilized to authenticate the request.  Any response generated\
    \ by a\n   server to a request that contains only a MESSAGE-INTEGRITY attribute\n\
    \   MUST include the MESSAGE-INTEGRITY attribute, computed using the\n   password\
    \ utilized to authenticate the request.  This means that only\n   one of these\
    \ attributes can appear in a response.  The response MUST\n   NOT contain the\
    \ USERNAME attribute.\n   If any of the checks fail, a server MUST NOT include\
    \ a MESSAGE-\n   INTEGRITY-SHA256, MESSAGE-INTEGRITY, or USERNAME attribute in\
    \ the\n   error response.  This is because, in these failure cases, the server\n\
    \   cannot determine the shared secret necessary to compute the MESSAGE-\n   INTEGRITY-SHA256\
    \ or MESSAGE-INTEGRITY attributes.\n"
- title: 9.1.4.  Receiving a Response
  contents:
  - "9.1.4.  Receiving a Response\n   The client looks for the MESSAGE-INTEGRITY or\
    \ the MESSAGE-INTEGRITY-\n   SHA256 attribute in the response.  If present and\
    \ if the client only\n   sent one of the MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-SHA256\n\
    \   attributes in the request (because of the external indication in\n   Section\
    \ 9.1.2 or because this is a subsequent request as defined in\n   Section 9.1.5),\
    \ the algorithm in the response has to match;\n   otherwise, the response MUST\
    \ be discarded.\n   The client then computes the message integrity over the response\
    \ as\n   defined in Section 14.5 for the MESSAGE-INTEGRITY attribute or\n   Section\
    \ 14.6 for the MESSAGE-INTEGRITY-SHA256 attribute, using the\n   same password\
    \ it utilized for the request.  If the resulting value\n   matches the contents\
    \ of the MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-\n   SHA256 attribute, respectively,\
    \ the response is considered\n   authenticated.  If the value does not match,\
    \ or if both MESSAGE-\n   INTEGRITY and MESSAGE-INTEGRITY-SHA256 are absent, the\
    \ processing\n   depends on whether the request was sent over a reliable or an\n\
    \   unreliable transport.\n   If the request was sent over an unreliable transport,\
    \ the response\n   MUST be discarded, as if it had never been received.  This\
    \ means that\n   retransmits, if applicable, will continue.  If all the responses\n\
    \   received are discarded, then instead of signaling a timeout after\n   ending\
    \ the transaction, the layer MUST signal that the integrity\n   protection was\
    \ violated.\n   If the request was sent over a reliable transport, the response\
    \ MUST\n   be discarded, and the layer MUST immediately end the transaction and\n\
    \   signal that the integrity protection was violated.\n"
- title: 9.1.5.  Sending Subsequent Requests
  contents:
  - "9.1.5.  Sending Subsequent Requests\n   A client sending subsequent requests\
    \ to the same server MUST send\n   only the MESSAGE-INTEGRITY-SHA256 or the MESSAGE-INTEGRITY\
    \ attribute\n   that matches the attribute that was received in the response to\
    \ the\n   initial request.  Here, \"same server\" means same IP address and port\n\
    \   number, not just the same URI or SRV lookup result.\n"
- title: 9.2.  Long-Term Credential Mechanism
  contents:
  - "9.2.  Long-Term Credential Mechanism\n   The long-term credential mechanism relies\
    \ on a long-term credential,\n   in the form of a username and password that are\
    \ shared between client\n   and server.  The credential is considered long-term\
    \ since it is\n   assumed that it is provisioned for a user and remains in effect\
    \ until\n   the user is no longer a subscriber of the system or until it is\n\
    \   changed.  This is basically a traditional \"log-in\" username and\n   password\
    \ given to users.\n   Because these usernames and passwords are expected to be\
    \ valid for\n   extended periods of time, replay prevention is provided in the\
    \ form\n   of a digest challenge.  In this mechanism, the client initially sends\n\
    \   a request, without offering any credentials or any integrity checks.\n   The\
    \ server rejects this request, providing the user a realm (used to\n   guide the\
    \ user or agent in selection of a username and password) and\n   a nonce.  The\
    \ nonce provides a limited replay protection.  It is a\n   cookie, selected by\
    \ the server and encoded in such a way as to\n   indicate a duration of validity\
    \ or client identity from which it is\n   valid.  Only the server needs to know\
    \ about the internal structure of\n   the cookie.  The client retries the request,\
    \ this time including its\n   username and the realm and echoing the nonce provided\
    \ by the server.\n   The client also includes one of the message-integrity attributes\n\
    \   defined in this document, which provides an HMAC over the entire\n   request,\
    \ including the nonce.  The server validates the nonce and\n   checks the message\
    \ integrity.  If they match, the request is\n   authenticated.  If the nonce is\
    \ no longer valid, it is considered\n   \"stale\", and the server rejects the\
    \ request, providing a new nonce.\n   In subsequent requests to the same server,\
    \ the client reuses the\n   nonce, username, realm, and password it used previously.\
    \  In this\n   way, subsequent requests are not rejected until the nonce becomes\n\
    \   invalid by the server, in which case the rejection provides a new\n   nonce\
    \ to the client.\n   Note that the long-term credential mechanism cannot be used\
    \ to\n   protect indications, since indications cannot be challenged.  Usages\n\
    \   utilizing indications must either use a short-term credential or omit\n  \
    \ authentication and message integrity for them.\n   To indicate that it supports\
    \ this specification, a server MUST\n   prepend the NONCE attribute value with\
    \ the character string composed\n   of \"obMatJos2\" concatenated with the (4-character)\
    \ base64 [RFC4648]\n   encoding of the 24-bit STUN Security Features as defined\
    \ in\n   Section 18.1.  The 24-bit Security Feature set is encoded as 3 bytes,\n\
    \   with bit 0 as the most significant bit of the first byte and bit 23\n   as\
    \ the least significant bit of the third byte.  If no security\n   features are\
    \ used, then a byte array with all 24 bits set to zero\n   MUST be encoded instead.\
    \  For the remainder of this document, the\n   term \"nonce cookie\" will refer\
    \ to the complete 13-character string\n   prepended to the NONCE attribute value.\n\
    \   Since the long-term credential mechanism is susceptible to offline\n   dictionary\
    \ attacks, deployments SHOULD utilize passwords that are\n   difficult to guess.\
    \  In cases where the credentials are not entered\n   by the user, but are rather\
    \ placed on a client device during device\n   provisioning, the password SHOULD\
    \ have at least 128 bits of\n   randomness.  In cases where the credentials are\
    \ entered by the user,\n   they should follow best current practices around password\
    \ structure.\n"
- title: 9.2.1.  Bid-Down Attack Prevention
  contents:
  - "9.2.1.  Bid-Down Attack Prevention\n   This document introduces two new security\
    \ features that provide the\n   ability to choose the algorithm used for password\
    \ protection as well\n   as the ability to use an anonymous username.  Both of\
    \ these\n   capabilities are optional in order to remain backwards compatible\n\
    \   with previous versions of the STUN protocol.\n   These new capabilities are\
    \ subject to bid-down attacks whereby an\n   attacker in the message path can\
    \ remove these capabilities and force\n   weaker security properties.  To prevent\
    \ these kinds of attacks from\n   going undetected, the nonce is enhanced with\
    \ additional information.\n   The value of the \"nonce cookie\" will vary based\
    \ on the specific STUN\n   Security Feature bits selected.  When this document\
    \ makes reference\n   to the \"nonce cookie\" in a section discussing a specific\
    \ STUN\n   Security Feature it is understood that the corresponding STUN\n   Security\
    \ Feature bit in the \"nonce cookie\" is set to 1.\n   For example, when the PASSWORD-ALGORITHMS\
    \ security feature (defined\n   in Section 9.2.4) is used, the corresponding \"\
    Password algorithms\"\n   bit (defined in Section 18.1) is set to 1 in the \"\
    nonce cookie\".\n"
- title: 9.2.2.  HMAC Key
  contents:
  - "9.2.2.  HMAC Key\n   For long-term credentials that do not use a different algorithm,\
    \ as\n   specified by the PASSWORD-ALGORITHM attribute, the key is 16 bytes:\n\
    \                key = MD5(username \":\" OpaqueString(realm)\n              \
    \    \":\" OpaqueString(password))\n   Where MD5 is defined in [RFC1321] and [RFC6151],\
    \ and the OpaqueString\n   profile is defined in [RFC8265].  The encoding used\
    \ is UTF-8\n   [RFC3629].\n   The 16-byte key is formed by taking the MD5 hash\
    \ of the result of\n   concatenating the following five fields: (1) the username,\
    \ with any\n   quotes and trailing nulls removed, as taken from the USERNAME\n\
    \   attribute (in which case OpaqueString has already been applied); (2)\n   a\
    \ single colon; (3) the realm, with any quotes and trailing nulls\n   removed\
    \ and after processing using OpaqueString; (4) a single colon;\n   and (5) the\
    \ password, with any trailing nulls removed and after\n   processing using OpaqueString.\
    \  For example, if the username is\n   'user', the realm is 'realm', and the password\
    \ is 'pass', then the\n   16-byte HMAC key would be the result of performing an\
    \ MD5 hash on the\n   string 'user:realm:pass', the resulting hash being\n   0x8493fbc53ba582fb4c044c456bdc40eb.\n\
    \   The structure of the key when used with long-term credentials\n   facilitates\
    \ deployment in systems that also utilize SIP [RFC3261].\n   Typically, SIP systems\
    \ utilizing SIP's digest authentication\n   mechanism do not actually store the\
    \ password in the database.\n   Rather, they store a value called \"H(A1)\", which\
    \ is equal to the key\n   defined above.  For example, this mechanism can be used\
    \ with the\n   authentication extensions defined in [RFC5090].\n   When a PASSWORD-ALGORITHM\
    \ is used, the key length and algorithm to\n   use are described in Section 18.5.1.\n"
- title: 9.2.3.  Forming a Request
  contents:
  - "9.2.3.  Forming a Request\n   The first request from the client to the server\
    \ (as identified by\n   hostname if the DNS procedures of Section 8 are used and\
    \ by IP\n   address if not) is handled according to the rules in Section 9.2.3.1.\n\
    \   When the client initiates a subsequent request once a previous\n   request/response\
    \ transaction has completed successfully, it follows\n   the rules in Section\
    \ 9.2.3.2.  Forming a request as a consequence of\n   a 401 (Unauthenticated)\
    \ or 438 (Stale Nonce) error response is\n   covered in Section 9.2.5 and is not\
    \ considered a \"subsequent request\"\n   and thus does not utilize the rules\
    \ described in Section 9.2.3.2.\n   Each of these types of requests have a different\
    \ mandatory\n   attributes.\n"
- title: 9.2.3.1.  First Request
  contents:
  - "9.2.3.1.  First Request\n   If the client has not completed a successful request/response\n\
    \   transaction with the server, it MUST omit the USERNAME, USERHASH,\n   MESSAGE-INTEGRITY,\
    \ MESSAGE-INTEGRITY-SHA256, REALM, NONCE, PASSWORD-\n   ALGORITHMS, and PASSWORD-ALGORITHM\
    \ attributes.  In other words, the\n   first request is sent as if there were\
    \ no authentication or message\n   integrity applied.\n"
- title: 9.2.3.2.  Subsequent Requests
  contents:
  - "9.2.3.2.  Subsequent Requests\n   Once a request/response transaction has completed,\
    \ the client will\n   have been presented a realm and nonce by the server and\
    \ selected a\n   username and password with which it authenticated.  The client\
    \ SHOULD\n   cache the username, password, realm, and nonce for subsequent\n \
    \  communications with the server.  When the client sends a subsequent\n   request,\
    \ it MUST include either the USERNAME or USERHASH, REALM,\n   NONCE, and PASSWORD-ALGORITHM\
    \ attributes with these cached values.\n   It MUST include a MESSAGE-INTEGRITY\
    \ attribute or a MESSAGE-INTEGRITY-\n   SHA256 attribute, computed as described\
    \ in Sections 14.5 and 14.6\n   using the cached password.  The choice between\
    \ the two attributes\n   depends on the attribute received in the response to\
    \ the first\n   request.\n"
- title: 9.2.4.  Receiving a Request
  contents:
  - "9.2.4.  Receiving a Request\n   After the server has done the basic processing\
    \ of a request, it\n   performs the checks listed below in the order specified.\
    \  Note that\n   it is RECOMMENDED that the REALM value be the domain name of\
    \ the\n   provider of the STUN server:\n   o  If the message does not contain\
    \ a MESSAGE-INTEGRITY or MESSAGE-\n      INTEGRITY-SHA256 attribute, the server\
    \ MUST generate an error\n      response with an error code of 401 (Unauthenticated).\
    \  This\n      response MUST include a REALM value.  The response MUST include\
    \ a\n      NONCE, selected by the server.  The server MUST NOT choose the\n  \
    \    same NONCE for two requests unless they have the same source IP\n      address\
    \ and port.  The server MAY support alternate password\n      algorithms, in which\
    \ case it can list them in preferential order\n      in a PASSWORD-ALGORITHMS\
    \ attribute.  If the server adds a\n      PASSWORD-ALGORITHMS attribute, it MUST\
    \ set the STUN Security\n      Feature \"Password algorithms\" bit to 1.  The\
    \ server MAY support\n      anonymous username, in which case it MUST set the\
    \ STUN Security\n      Feature \"Username anonymity\" bit set to 1.  The response\
    \ SHOULD\n      NOT contain a USERNAME, USERHASH, MESSAGE-INTEGRITY, or MESSAGE-\n\
    \      INTEGRITY-SHA256 attribute.\n      Note: Reusing a NONCE for different\
    \ source IP addresses or ports\n      was not explicitly forbidden in [RFC5389].\n\
    \   o  If the message contains a MESSAGE-INTEGRITY or a MESSAGE-\n      INTEGRITY-SHA256\
    \ attribute, but is missing either the USERNAME or\n      USERHASH, REALM, or\
    \ NONCE attribute, the server MUST generate an\n      error response with an error\
    \ code of 400 (Bad Request).  This\n      response SHOULD NOT include a USERNAME,\
    \ USERHASH, NONCE, or REALM\n      attribute.  The response cannot contain a MESSAGE-INTEGRITY\
    \ or\n      MESSAGE-INTEGRITY-SHA256 attribute, as the attributes required to\n\
    \      generate them are missing.\n   o  If the NONCE attribute starts with the\
    \ \"nonce cookie\" with the\n      STUN Security Feature \"Password algorithms\"\
    \ bit set to 1, the\n      server performs these checks in the order specified:\n\
    \      *  If the request contains neither the PASSWORD-ALGORITHMS nor the\n  \
    \       PASSWORD-ALGORITHM algorithm, then the request is processed as\n     \
    \    though PASSWORD-ALGORITHM were MD5.\n      *  Otherwise, unless (1) PASSWORD-ALGORITHM\
    \ and PASSWORD-\n         ALGORITHMS are both present, (2) PASSWORD-ALGORITHMS\
    \ matches\n         the value sent in the response that sent this NONCE, and (3)\n\
    \         PASSWORD-ALGORITHM matches one of the entries in PASSWORD-\n       \
    \  ALGORITHMS, the server MUST generate an error response with an\n         error\
    \ code of 400 (Bad Request).\n   o  If the value of the USERNAME or USERHASH attribute\
    \ is not valid,\n      the server MUST generate an error response with an error\
    \ code of\n      401 (Unauthenticated).  This response MUST include a REALM value.\n\
    \      The response MUST include a NONCE, selected by the server.  The\n     \
    \ response MUST include a PASSWORD-ALGORITHMS attribute.  The\n      response\
    \ SHOULD NOT contain a USERNAME or USERHASH attribute.  The\n      response MAY\
    \ include a MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-\n      SHA256 attribute, using\
    \ the previous key to calculate it.\n   o  If the MESSAGE-INTEGRITY-SHA256 attribute\
    \ is present, compute the\n      value for the message integrity as described\
    \ in Section 14.6,\n      using the password associated with the username.  Otherwise,\
    \ using\n      the same password, compute the value for the MESSAGE-INTEGRITY\n\
    \      attribute as described in Section 14.5.  If the resulting value\n     \
    \ does not match the contents of the MESSAGE-INTEGRITY attribute or\n      the\
    \ MESSAGE-INTEGRITY-SHA256 attribute, the server MUST reject the\n      request\
    \ with an error response.  This response MUST use an error\n      code of 401\
    \ (Unauthenticated).  It MUST include the REALM and\n      NONCE attributes and\
    \ SHOULD NOT include the USERNAME, USERHASH,\n      MESSAGE-INTEGRITY, or MESSAGE-INTEGRITY-SHA256\
    \ attribute.\n   o  If the NONCE is no longer valid, the server MUST generate\
    \ an error\n      response with an error code of 438 (Stale Nonce).  This response\n\
    \      MUST include NONCE, REALM, and PASSWORD-ALGORITHMS attributes and\n   \
    \   SHOULD NOT include the USERNAME and USERHASH attributes.  The\n      NONCE\
    \ attribute value MUST be valid.  The response MAY include a\n      MESSAGE-INTEGRITY\
    \ or MESSAGE-INTEGRITY-SHA256 attribute, using the\n      previous NONCE to calculate\
    \ it.  Servers can revoke nonces in\n      order to provide additional security.\
    \  See Section 5.4 of\n      [RFC7616] for guidelines.\n   If these checks pass,\
    \ the server continues to process the request.\n   Any response generated by the\
    \ server MUST include the MESSAGE-\n   INTEGRITY-SHA256 attribute, computed using\
    \ the username and password\n   utilized to authenticate the request, unless the\
    \ request was\n   processed as though PASSWORD-ALGORITHM was MD5 (because the\
    \ request\n   contained neither PASSWORD-ALGORITHMS nor PASSWORD-ALGORITHM). \
    \ In\n   that case, the MESSAGE-INTEGRITY attribute MUST be used instead of\n\
    \   the MESSAGE-INTEGRITY-SHA256 attribute, and the REALM, NONCE,\n   USERNAME,\
    \ and USERHASH attributes SHOULD NOT be included.\n"
- title: 9.2.5.  Receiving a Response
  contents:
  - "9.2.5.  Receiving a Response\n   If the response is an error response with an\
    \ error code of 401\n   (Unauthenticated) or 438 (Stale Nonce), the client MUST\
    \ test if the\n   NONCE attribute value starts with the \"nonce cookie\".  If\
    \ so and the\n   \"nonce cookie\" has the STUN Security Feature \"Password algorithms\"\
    \n   bit set to 1 but no PASSWORD-ALGORITHMS attribute is present, then\n   the\
    \ client MUST NOT retry the request with a new transaction.\n   If the response\
    \ is an error response with an error code of 401\n   (Unauthenticated), the client\
    \ SHOULD retry the request with a new\n   transaction.  This request MUST contain\
    \ a USERNAME or a USERHASH,\n   determined by the client as the appropriate username\
    \ for the REALM\n   from the error response.  If the \"nonce cookie\" is present\
    \ and has\n   the STUN Security Feature \"Username anonymity\" bit set to 1, then\
    \ the\n   USERHASH attribute MUST be used; else, the USERNAME attribute MUST be\n\
    \   used.  The request MUST contain the REALM, copied from the error\n   response.\
    \  The request MUST contain the NONCE, copied from the error\n   response.  If\
    \ the response contains a PASSWORD-ALGORITHMS attribute,\n   the request MUST\
    \ contain the PASSWORD-ALGORITHMS attribute with the\n   same content.  If the\
    \ response contains a PASSWORD-ALGORITHMS\n   attribute, and this attribute contains\
    \ at least one algorithm that is\n   supported by the client, then the request\
    \ MUST contain a PASSWORD-\n   ALGORITHM attribute with the first algorithm supported\
    \ on the list.\n   If the response contains a PASSWORD-ALGORITHMS attribute, and\
    \ this\n   attribute does not contain any algorithm that is supported by the\n\
    \   client, then the client MUST NOT retry the request with a new\n   transaction.\
    \  The client MUST NOT perform this retry if it is not\n   changing the USERNAME,\
    \ USERHASH, REALM, or its associated password\n   from the previous attempt.\n\
    \   If the response is an error response with an error code of 438 (Stale\n  \
    \ Nonce), the client MUST retry the request, using the new NONCE\n   attribute\
    \ supplied in the 438 (Stale Nonce) response.  This retry\n   MUST also include\
    \ either the USERNAME or USERHASH, the REALM, and\n   either the MESSAGE-INTEGRITY\
    \ or MESSAGE-INTEGRITY-SHA256 attribute.\n   For all other responses, if the NONCE\
    \ attribute starts with the\n   \"nonce cookie\" with the STUN Security Feature\
    \ \"Password algorithms\"\n   bit set to 1 but PASSWORD-ALGORITHMS is not present,\
    \ the response\n   MUST be ignored.\n   If the response is an error response with\
    \ an error code of 400 (Bad\n   Request) and does not contain either the MESSAGE-INTEGRITY\
    \ or\n   MESSAGE-INTEGRITY-SHA256 attribute, then the response MUST be\n   discarded,\
    \ as if it were never received.  This means that\n   retransmits, if applicable,\
    \ will continue.\n      Note: In this case, the 400 response will never reach\
    \ the\n      application, resulting in a timeout.\n   The client looks for the\
    \ MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-\n   SHA256 attribute in the response\
    \ (either success or failure).  If\n   present, the client computes the message\
    \ integrity over the response\n   as defined in Sections 14.5 or 14.6, using the\
    \ same password it\n   utilized for the request.  If the resulting value matches\
    \ the\n   contents of the MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-SHA256\n   attribute,\
    \ the response is considered authenticated.  If the value\n   does not match,\
    \ or if both MESSAGE-INTEGRITY and MESSAGE-INTEGRITY-\n   SHA256 are absent, the\
    \ processing depends on the request being sent\n   over a reliable or an unreliable\
    \ transport.\n   If the request was sent over an unreliable transport, the response\n\
    \   MUST be discarded, as if it had never been received.  This means that\n  \
    \ retransmits, if applicable, will continue.  If all the responses\n   received\
    \ are discarded, then instead of signaling a timeout after\n   ending the transaction,\
    \ the layer MUST signal that the integrity\n   protection was violated.\n   If\
    \ the request was sent over a reliable transport, the response MUST\n   be discarded,\
    \ and the layer MUST immediately end the transaction and\n   signal that the integrity\
    \ protection was violated.\n   If the response contains a PASSWORD-ALGORITHMS\
    \ attribute, all the\n   subsequent requests MUST be authenticated using MESSAGE-INTEGRITY-\n\
    \   SHA256 only.\n"
- title: 10.  ALTERNATE-SERVER Mechanism
  contents:
  - "10.  ALTERNATE-SERVER Mechanism\n   This section describes a mechanism in STUN\
    \ that allows a server to\n   redirect a client to another server.  This extension\
    \ is optional, and\n   a usage must define if and when this extension is used.\
    \  The\n   ALTERNATE-SERVER attribute carries an IP address.\n   A server using\
    \ this extension redirects a client to another server by\n   replying to a request\
    \ message with an error response message with an\n   error code of 300 (Try Alternate).\
    \  The server MUST include at least\n   one ALTERNATE-SERVER attribute in the\
    \ error response, which MUST\n   contain an IP address of the same address family\
    \ as the source IP\n   address of the request message.  The server SHOULD include\
    \ an\n   additional ALTERNATE-SERVER attribute, after the mandatory one, that\n\
    \   contains an IP address of the address family other than the source IP\n  \
    \ address of the request message.  The error response message MAY be\n   authenticated;\
    \ however, there are use cases for ALTERNATE-SERVER\n   where authentication of\
    \ the response is not possible or practical.\n   If the transaction uses TLS or\
    \ DTLS, if the transaction is\n   authenticated by a MESSAGE-INTEGRITY-SHA256\
    \ attribute, and if the\n   server wants to redirect to a server that uses a different\n\
    \   certificate, then it MUST include an ALTERNATE-DOMAIN attribute\n   containing\
    \ the name inside the subjectAltName of that certificate.\n   This series of conditions\
    \ on the MESSAGE-INTEGRITY-SHA256 attribute\n   indicates that the transaction\
    \ is authenticated and that the client\n   implements this specification and therefore\
    \ can process the\n   ALTERNATE-DOMAIN attribute.\n   A client using this extension\
    \ handles a 300 (Try Alternate) error\n   code as follows.  The client looks for\
    \ an ALTERNATE-SERVER attribute\n   in the error response.  If one is found, then\
    \ the client considers\n   the current transaction as failed and reattempts the\
    \ request with the\n   server specified in the attribute, using the same transport\
    \ protocol\n   used for the previous request.  That request, if authenticated,\
    \ MUST\n   utilize the same credentials that the client would have used in the\n\
    \   request to the server that performed the redirection.  If the\n   transport\
    \ protocol uses TLS or DTLS, then the client looks for an\n   ALTERNATE-DOMAIN\
    \ attribute.  If the attribute is found, the domain\n   MUST be used to validate\
    \ the certificate using the recommendations in\n   [RFC6125].  The certificate\
    \ MUST contain an identifier of type DNS-ID\n   or CN-ID (eventually with wildcards)\
    \ but not of type SRV-ID or URI-\n   ID.  If the attribute is not found, the same\
    \ domain that was used for\n   the original request MUST be used to validate the\
    \ certificate.  If\n   the client has been redirected to a server to which it\
    \ has already\n   sent this request within the last five minutes, it MUST ignore\
    \ the\n   redirection and consider the transaction to have failed.  This\n   prevents\
    \ infinite ping-ponging between servers in case of redirection\n   loops.\n"
- title: 11.  Backwards Compatibility with RFC 3489
  contents:
  - "11.  Backwards Compatibility with RFC 3489\n   In addition to the backward compatibility\
    \ already described in\n   Section 12 of [RFC5389], DTLS MUST NOT be used with\
    \ [RFC3489]\n   (referred to as \"classic STUN\").  Any STUN request or indication\n\
    \   without the magic cookie (see Section 6 of [RFC5389]) over DTLS MUST\n   be\
    \ considered invalid: all requests MUST generate a 500 (Server\n   Error) error\
    \ response, and indications MUST be ignored.\n"
- title: 12.  Basic Server Behavior
  contents:
  - "12.  Basic Server Behavior\n   This section defines the behavior of a basic,\
    \ stand-alone STUN\n   server.\n   Historically, \"classic STUN\" [RFC3489] only\
    \ defined the behavior of a\n   server that was providing clients with server\
    \ reflexive transport\n   addresses by receiving and replying to STUN Binding\
    \ requests.\n   [RFC5389] redefined the protocol as an extensible framework, and\
    \ the\n   server functionality became the sole STUN Usage defined in that\n  \
    \ document.  This STUN Usage is also known as \"Basic STUN Server\".\n   The STUN\
    \ server MUST support the Binding method.  It SHOULD NOT\n   utilize the short-term\
    \ or long-term credential mechanism.  This is\n   because the work involved in\
    \ authenticating the request is more than\n   the work in simply processing it.\
    \  It SHOULD NOT utilize the\n   ALTERNATE-SERVER mechanism for the same reason.\
    \  It MUST support UDP\n   and TCP.  It MAY support STUN over TCP/TLS or STUN\
    \ over UDP/DTLS;\n   however, DTLS and TLS provide minimal security benefits in\
    \ this basic\n   mode of operation.  It does not require a keep-alive mechanism\n\
    \   because a TCP or TLS-over-TCP connection is closed after the end of\n   the\
    \ Binding transaction.  It MAY utilize the FINGERPRINT mechanism\n   but MUST\
    \ NOT require it.  Since the stand-alone server only runs\n   STUN, FINGERPRINT\
    \ provides no benefit.  Requiring it would break\n   compatibility with RFC 3489,\
    \ and such compatibility is desirable in a\n   stand-alone server.  Stand-alone\
    \ STUN servers SHOULD support\n   backwards compatibility with clients using [RFC3489],\
    \ as described in\n   Section 11.\n   It is RECOMMENDED that administrators of\
    \ STUN servers provide DNS\n   entries for those servers as described in Section\
    \ 8.  If both A and\n   AAAA resource records are returned, then the client can\n\
    \   simultaneously send STUN Binding requests to the IPv4 and IPv6\n   addresses\
    \ (as specified in [RFC8305]), as the Binding request is\n   idempotent.  Note\
    \ that the MAPPED-ADDRESS or XOR-MAPPED-ADDRESS\n   attributes that are returned\
    \ will not necessarily match the address\n   family of the server address used.\n\
    \   A basic STUN server is not a solution for NAT traversal by itself.\n   However,\
    \ it can be utilized as part of a solution through STUN\n   Usages.  This is discussed\
    \ further in Section 13.\n"
- title: 13.  STUN Usages
  contents:
  - "13.  STUN Usages\n   STUN by itself is not a solution to the NAT traversal problem.\n\
    \   Rather, STUN defines a tool that can be used inside a larger\n   solution.\
    \  The term \"STUN Usage\" is used for any solution that uses\n   STUN as a component.\n\
    \   A STUN Usage defines how STUN is actually utilized -- when to send\n   requests,\
    \ what to do with the responses, and which optional\n   procedures defined here\
    \ (or in an extension to STUN) are to be used.\n   A usage also defines:\n   o\
    \  Which STUN methods are used.\n   o  What transports are used.  If DTLS-over-UDP\
    \ is used, then\n      implementing the denial-of-service countermeasure described\
    \ in\n      Section 4.2.1 of [RFC6347] is mandatory.\n   o  What authentication\
    \ and message-integrity mechanisms are used.\n   o  The considerations around\
    \ manual vs. automatic key derivation for\n      the integrity mechanism, as discussed\
    \ in [RFC4107].\n   o  What mechanisms are used to distinguish STUN messages from\
    \ other\n      messages.  When STUN is run over TCP or TLS-over-TCP, a framing\n\
    \      mechanism may be required.\n   o  How a STUN client determines the IP address\
    \ and port of the STUN\n      server.\n   o  How simultaneous use of IPv4 and\
    \ IPv6 addresses (Happy Eyeballs\n      [RFC8305]) works with non-idempotent transactions\
    \ when both\n      address families are found for the STUN server.\n   o  Whether\
    \ backwards compatibility to RFC 3489 is required.\n   o  What optional attributes\
    \ defined here (such as FINGERPRINT and\n      ALTERNATE-SERVER) or in other extensions\
    \ are required.\n   o  If MESSAGE-INTEGRITY-SHA256 truncation is permitted, and\
    \ the\n      limits permitted for truncation.\n   o  The keep-alive mechanism\
    \ if STUN is run over TCP or TLS-over-TCP.\n   o  If anycast addresses can be\
    \ used for the server in case 1) TCP or\n      TLS-over-TCP or 2) authentication\
    \ is used.\n   In addition, any STUN Usage must consider the security implications\n\
    \   of using STUN in that usage.  A number of attacks against STUN are\n   known\
    \ (see the Security Considerations section in this document), and\n   any usage\
    \ must consider how these attacks can be thwarted or\n   mitigated.\n   Finally,\
    \ a usage must consider whether its usage of STUN is an\n   example of the Unilateral\
    \ Self-Address Fixing approach to NAT\n   traversal and, if so, address the questions\
    \ raised in RFC 3424\n   [RFC3424].\n"
- title: 14.  STUN Attributes
  contents:
  - "14.  STUN Attributes\n   After the STUN header are zero or more attributes. \
    \ Each attribute\n   MUST be TLV encoded, with a 16-bit type, 16-bit length, and\
    \ value.\n   Each STUN attribute MUST end on a 32-bit boundary.  As mentioned\n\
    \   above, all fields in an attribute are transmitted most significant\n   bit\
    \ first.\n      0                   1                   2                   3\n\
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Type                  |            Length             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                       Value (variable)                ....\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 4: Format of STUN Attributes\n   The value in the\
    \ Length field MUST contain the length of the Value\n   part of the attribute,\
    \ prior to padding, measured in bytes.  Since\n   STUN aligns attributes on 32-bit\
    \ boundaries, attributes whose content\n   is not a multiple of 4 bytes are padded\
    \ with 1, 2, or 3 bytes of\n   padding so that its value contains a multiple of\
    \ 4 bytes.  The\n   padding bits MUST be set to zero on sending and MUST be ignored\
    \ by\n   the receiver.\n   Any attribute type MAY appear more than once in a STUN\
    \ message.\n   Unless specified otherwise, the order of appearance is significant:\n\
    \   only the first occurrence needs to be processed by a receiver, and\n   any\
    \ duplicates MAY be ignored by a receiver.\n   To allow future revisions of this\
    \ specification to add new attributes\n   if needed, the attribute space is divided\
    \ into two ranges.\n   Attributes with type values between 0x0000 and 0x7FFF are\n\
    \   comprehension-required attributes, which means that the STUN agent\n   cannot\
    \ successfully process the message unless it understands the\n   attribute.  Attributes\
    \ with type values between 0x8000 and 0xFFFF are\n   comprehension-optional attributes,\
    \ which means that those attributes\n   can be ignored by the STUN agent if it\
    \ does not understand them.\n   The set of STUN attribute types is maintained\
    \ by IANA.  The initial\n   set defined by this specification is found in Section\
    \ 18.3.\n   The rest of this section describes the format of the various\n   attributes\
    \ defined in this specification.\n"
- title: 14.1.  MAPPED-ADDRESS
  contents:
  - "14.1.  MAPPED-ADDRESS\n   The MAPPED-ADDRESS attribute indicates a reflexive\
    \ transport address\n   of the client.  It consists of an 8-bit address family\
    \ and a 16-bit\n   port, followed by a fixed-length value representing the IP\
    \ address.\n   If the address family is IPv4, the address MUST be 32 bits.  If\
    \ the\n   address family is IPv6, the address MUST be 128 bits.  All fields\n\
    \   must be in network byte order.\n   The format of the MAPPED-ADDRESS attribute\
    \ is:\n      0                   1                   2                   3\n \
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 0 0 0 0 0|    Family     |           Port                |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     |      \
    \           Address (32 bits or 128 bits)                 |\n     |          \
    \                                                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 5: Format of MAPPED-ADDRESS Attribute\n   The address family\
    \ can take on the following values:\n   0x01:IPv4\n   0x02:IPv6\n   The first\
    \ 8 bits of the MAPPED-ADDRESS MUST be set to 0 and MUST be\n   ignored by receivers.\
    \  These bits are present for aligning parameters\n   on natural 32-bit boundaries.\n\
    \   This attribute is used only by servers for achieving backwards\n   compatibility\
    \ with [RFC3489] clients.\n"
- title: 14.2.  XOR-MAPPED-ADDRESS
  contents:
  - "14.2.  XOR-MAPPED-ADDRESS\n   The XOR-MAPPED-ADDRESS attribute is identical to\
    \ the MAPPED-ADDRESS\n   attribute, except that the reflexive transport address\
    \ is obfuscated\n   through the XOR function.\n   The format of the XOR-MAPPED-ADDRESS\
    \ is:\n      0                   1                   2                   3\n \
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 0 0 0 0 0|    Family     |         X-Port                |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \              X-Address (Variable)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 6: Format of XOR-MAPPED-ADDRESS Attribute\n   The Family\
    \ field represents the IP address family and is encoded\n   identically to the\
    \ Family field in MAPPED-ADDRESS.\n   X-Port is computed by XOR'ing the mapped\
    \ port with the most\n   significant 16 bits of the magic cookie.  If the IP address\
    \ family is\n   IPv4, X-Address is computed by XOR'ing the mapped IP address with\
    \ the\n   magic cookie.  If the IP address family is IPv6, X-Address is\n   computed\
    \ by XOR'ing the mapped IP address with the concatenation of\n   the magic cookie\
    \ and the 96-bit transaction ID.  In all cases, the\n   XOR operation works on\
    \ its inputs in network byte order (that is, the\n   order they will be encoded\
    \ in the message).\n   The rules for encoding and processing the first 8 bits\
    \ of the\n   attribute's value, the rules for handling multiple occurrences of\
    \ the\n   attribute, and the rules for processing address families are the same\n\
    \   as for MAPPED-ADDRESS.\n   Note: XOR-MAPPED-ADDRESS and MAPPED-ADDRESS differ\
    \ only in their\n   encoding of the transport address.  The former encodes the\
    \ transport\n   address by XOR'ing it with the magic cookie.  The latter encodes\
    \ it\n   directly in binary.  RFC 3489 originally specified only MAPPED-\n   ADDRESS.\
    \  However, deployment experience found that some NATs rewrite\n   the 32-bit\
    \ binary payloads containing the NAT's public IP address,\n   such as STUN's MAPPED-ADDRESS\
    \ attribute, in the well-meaning but\n   misguided attempt to provide a generic\
    \ Application Layer Gateway\n   (ALG) function.  Such behavior interferes with\
    \ the operation of STUN\n   and also causes failure of STUN's message-integrity\
    \ checking.\n"
- title: 14.3.  USERNAME
  contents:
  - "14.3.  USERNAME\n   The USERNAME attribute is used for message integrity.  It\
    \ identifies\n   the username and password combination used in the message-integrity\n\
    \   check.\n   The value of USERNAME is a variable-length value containing the\n\
    \   authentication username.  It MUST contain a UTF-8-encoded [RFC3629]\n   sequence\
    \ of fewer than 509 bytes and MUST have been processed using\n   the OpaqueString\
    \ profile [RFC8265].  A compliant implementation MUST\n   be able to parse a UTF-8-encoded\
    \ sequence of 763 or fewer octets to\n   be compatible with [RFC5389].\n     \
    \ Note: [RFC5389] mistakenly referenced the definition of UTF-8 in\n      [RFC2279].\
    \  [RFC2279] assumed up to 6 octets per characters\n      encoded.  [RFC2279]\
    \ was replaced by [RFC3629], which allows only 4\n      octets per character encoded,\
    \ consistent with changes made in\n      Unicode 2.0 and ISO/IEC 10646.\n    \
    \  Note: This specification uses the OpaqueString profile instead of\n      the\
    \ UsernameCasePreserved profile for username string processing\n      in order\
    \ to improve compatibility with deployed password stores.\n      Many password\
    \ databases used for HTTP and SIP Digest\n      authentication store the MD5 hash\
    \ of username:realm:password\n      instead of storing a plain text password.\
    \  In [RFC3489], STUN\n      authentication was designed to be compatible with\
    \ these existing\n      databases to the extent possible, which like SIP and HTTP\n\
    \      performed no pre-processing of usernames and passwords other than\n   \
    \   prohibiting non-space ASCII control characters.  The next revision\n     \
    \ of the STUN specification, [RFC5389], used the SASLprep [RFC4013]\n      stringprep\
    \ [RFC3454] profile to pre-process usernames and\n      passwords.  SASLprep uses\
    \ Unicode Normalization Form KC\n      (Compatibility Decomposition, followed\
    \ by Canonical Composition)\n      [UAX15] and prohibits various control, space,\
    \ and non-text,\n      deprecated, or inappropriate codepoints.  The PRECIS framework\n\
    \      [RFC8264] obsoletes stringprep.  PRECIS handling of usernames and\n   \
    \   passwords [RFC8265] uses Unicode Normalization Form C (Canonical\n      Decomposition,\
    \ followed by Canonical Composition).  While there\n      are specific cases where\
    \ different username strings under HTTP\n      Digest could be mapped to a single\
    \ STUN username processed with\n      OpaqueString, these cases are extremely\
    \ unlikely and easy to\n      detect and correct.  With a UsernameCasePreserved\
    \ profile, it\n      would be more likely that valid usernames under HTTP Digest\
    \ would\n      not match their processed forms (specifically usernames containing\n\
    \      bidirectional text and compatibility forms).  Operators are free\n    \
    \  to further restrict the allowed codepoints in usernames to avoid\n      problematic\
    \ characters.\n"
- title: 14.4.  USERHASH
  contents:
  - "14.4.  USERHASH\n   The USERHASH attribute is used as a replacement for the USERNAME\n\
    \   attribute when username anonymity is supported.\n   The value of USERHASH\
    \ has a fixed length of 32 bytes.  The username\n   MUST have been processed using\
    \ the OpaqueString profile [RFC8265],\n   and the realm MUST have been processed\
    \ using the OpaqueString profile\n   [RFC8265] before hashing.\n   The following\
    \ is the operation that the client will perform to hash\n   the username:\n  \
    \ userhash = SHA-256(OpaqueString(username) \":\" OpaqueString(realm))\n"
- title: 14.5.  MESSAGE-INTEGRITY
  contents:
  - "14.5.  MESSAGE-INTEGRITY\n   The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1\
    \ [RFC2104] of\n   the STUN message.  The MESSAGE-INTEGRITY attribute can be present\
    \ in\n   any STUN message type.  Since it uses the SHA-1 hash, the HMAC will\n\
    \   be 20 bytes.\n   The key for the HMAC depends on which credential mechanism\
    \ is in use.\n   Section 9.1.1 defines the key for the short-term credential\n\
    \   mechanism, and Section 9.2.2 defines the key for the long-term\n   credential\
    \ mechanism.  Other credential mechanisms MUST define the\n   key that is used\
    \ for the HMAC.\n   The text used as input to HMAC is the STUN message, up to\
    \ and\n   including the attribute preceding the MESSAGE-INTEGRITY attribute.\n\
    \   The Length field of the STUN message header is adjusted to point to\n   the\
    \ end of the MESSAGE-INTEGRITY attribute.  The value of the\n   MESSAGE-INTEGRITY\
    \ attribute is set to a dummy value.\n   Once the computation is performed, the\
    \ value of the MESSAGE-INTEGRITY\n   attribute is filled in, and the value of\
    \ the length in the STUN\n   header is set to its correct value -- the length\
    \ of the entire\n   message.  Similarly, when validating the MESSAGE-INTEGRITY,\
    \ the\n   Length field in the STUN header must be adjusted to point to the end\n\
    \   of the MESSAGE-INTEGRITY attribute prior to calculating the HMAC over\n  \
    \ the STUN message, up to and including the attribute preceding the\n   MESSAGE-INTEGRITY\
    \ attribute.  Such adjustment is necessary when\n   attributes, such as FINGERPRINT\
    \ and MESSAGE-INTEGRITY-SHA256, appear\n   after MESSAGE-INTEGRITY.  See also\
    \ [RFC5769] for examples of such\n   calculations.\n"
- title: 14.6.  MESSAGE-INTEGRITY-SHA256
  contents:
  - "14.6.  MESSAGE-INTEGRITY-SHA256\n   The MESSAGE-INTEGRITY-SHA256 attribute contains\
    \ an HMAC-SHA256\n   [RFC2104] of the STUN message.  The MESSAGE-INTEGRITY-SHA256\n\
    \   attribute can be present in any STUN message type.  The MESSAGE-\n   INTEGRITY-SHA256\
    \ attribute contains an initial portion of the HMAC-\n   SHA-256 [RFC2104] of\
    \ the STUN message.  The value will be at most 32\n   bytes, but it MUST be at\
    \ least 16 bytes and MUST be a multiple of 4\n   bytes.  The value must be the\
    \ full 32 bytes unless the STUN Usage\n   explicitly specifies that truncation\
    \ is allowed.  STUN Usages may\n   specify a minimum length longer than 16 bytes.\n\
    \   The key for the HMAC depends on which credential mechanism is in use.\n  \
    \ Section 9.1.1 defines the key for the short-term credential\n   mechanism, and\
    \ Section 9.2.2 defines the key for the long-term\n   credential mechanism.  Other\
    \ credential mechanism MUST define the key\n   that is used for the HMAC.\n  \
    \ The text used as input to HMAC is the STUN message, up to and\n   including\
    \ the attribute preceding the MESSAGE-INTEGRITY-SHA256\n   attribute.  The Length\
    \ field of the STUN message header is adjusted\n   to point to the end of the\
    \ MESSAGE-INTEGRITY-SHA256 attribute.  The\n   value of the MESSAGE-INTEGRITY-SHA256\
    \ attribute is set to a dummy\n   value.\n   Once the computation is performed,\
    \ the value of the MESSAGE-\n   INTEGRITY-SHA256 attribute is filled in, and the\
    \ value of the length\n   in the STUN header is set to its correct value -- the\
    \ length of the\n   entire message.  Similarly, when validating the MESSAGE-INTEGRITY-\n\
    \   SHA256, the Length field in the STUN header must be adjusted to point\n  \
    \ to the end of the MESSAGE-INTEGRITY-SHA256 attribute prior to\n   calculating\
    \ the HMAC over the STUN message, up to and including the\n   attribute preceding\
    \ the MESSAGE-INTEGRITY-SHA256 attribute.  Such\n   adjustment is necessary when\
    \ attributes, such as FINGERPRINT, appear\n   after MESSAGE-INTEGRITY-SHA256.\
    \  See also Appendix B.1 for examples\n   of such calculations.\n"
- title: 14.7.  FINGERPRINT
  contents:
  - "14.7.  FINGERPRINT\n   The FINGERPRINT attribute MAY be present in all STUN messages.\n\
    \   The value of the attribute is computed as the CRC-32 of the STUN\n   message\
    \ up to (but excluding) the FINGERPRINT attribute itself,\n   XOR'ed with the\
    \ 32-bit value 0x5354554e.  (The XOR operation ensures\n   that the FINGERPRINT\
    \ test will not report a false positive on a\n   packet containing a CRC-32 generated\
    \ by an application protocol.)\n   The 32-bit CRC is the one defined in ITU V.42\
    \ [ITU.V42.2002], which\n   has a generator polynomial of x^32 + x^26 + x^23 +\
    \ x^22 + x^16 + x^12\n   + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1.\
    \  See the sample\n   code for the CRC-32 in Section 8 of [RFC1952].\n   When\
    \ present, the FINGERPRINT attribute MUST be the last attribute in\n   the message\
    \ and thus will appear after MESSAGE-INTEGRITY and MESSAGE-\n   INTEGRITY-SHA256.\n\
    \   The FINGERPRINT attribute can aid in distinguishing STUN packets from\n  \
    \ packets of other protocols.  See Section 7.\n   As with MESSAGE-INTEGRITY and\
    \ MESSAGE-INTEGRITY-SHA256, the CRC used\n   in the FINGERPRINT attribute covers\
    \ the Length field from the STUN\n   message header.  Therefore, prior to computation\
    \ of the CRC, this\n   value must be correct and include the CRC attribute as\
    \ part of the\n   message length.  When using the FINGERPRINT attribute in a message,\n\
    \   the attribute is first placed into the message with a dummy value;\n   then,\
    \ the CRC is computed, and the value of the attribute is updated.\n   If the MESSAGE-INTEGRITY\
    \ or MESSAGE-INTEGRITY-SHA256 attribute is\n   also present, then it must be present\
    \ with the correct message-\n   integrity value before the CRC is computed, since\
    \ the CRC is done\n   over the value of the MESSAGE-INTEGRITY and MESSAGE-INTEGRITY-SHA256\n\
    \   attributes as well.\n"
- title: 14.8.  ERROR-CODE
  contents:
  - "14.8.  ERROR-CODE\n   The ERROR-CODE attribute is used in error response messages.\
    \  It\n   contains a numeric error code value in the range of 300 to 699 plus\
    \ a\n   textual reason phrase encoded in UTF-8 [RFC3629]; it is also\n   consistent\
    \ in its code assignments and semantics with SIP [RFC3261]\n   and HTTP [RFC7231].\
    \  The reason phrase is meant for diagnostic\n   purposes and can be anything\
    \ appropriate for the error code.\n   Recommended reason phrases for the defined\
    \ error codes are included\n   in the IANA registry for error codes.  The reason\
    \ phrase MUST be a\n   UTF-8-encoded [RFC3629] sequence of fewer than 128 characters\
    \ (which\n   can be as long as 509 bytes when encoding them or 763 bytes when\n\
    \   decoding them).\n      0                   1                   2         \
    \          3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |           Reserved, should be 0         |Class|     Number    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    Reason Phrase (variable)                                ..\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 7: Format of ERROR-CODE Attribute\n   To facilitate processing,\
    \ the class of the error code (the hundreds\n   digit) is encoded separately from\
    \ the rest of the code, as shown in\n   Figure 7.\n   The Reserved bits SHOULD\
    \ be 0 and are for alignment on 32-bit\n   boundaries.  Receivers MUST ignore\
    \ these bits.  The Class represents\n   the hundreds digit of the error code.\
    \  The value MUST be between 3\n   and 6.  The Number represents the binary encoding\
    \ of the error code\n   modulo 100, and its value MUST be between 0 and 99.\n\
    \   The following error codes, along with their recommended reason\n   phrases,\
    \ are defined:\n   300  Try Alternate: The client should contact an alternate\
    \ server for\n        this request.  This error response MUST only be sent if\
    \ the\n        request included either a USERNAME or USERHASH attribute and a\n\
    \        valid MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-SHA256 attribute;\n    \
    \    otherwise, it MUST NOT be sent and error code 400 (Bad Request)\n       \
    \ is suggested.  This error response MUST be protected with the\n        MESSAGE-INTEGRITY\
    \ or MESSAGE-INTEGRITY-SHA256 attribute, and\n        receivers MUST validate\
    \ the MESSAGE-INTEGRITY or MESSAGE-\n        INTEGRITY-SHA256 of this response\
    \ before redirecting themselves\n        to an alternate server.\n        Note:\
    \ Failure to generate and validate message integrity for a\n        300 response\
    \ allows an on-path attacker to falsify a 300\n        response thus causing subsequent\
    \ STUN messages to be sent to a\n        victim.\n   400  Bad Request: The request\
    \ was malformed.  The client SHOULD NOT\n        retry the request without modification\
    \ from the previous\n        attempt.  The server may not be able to generate\
    \ a valid\n        MESSAGE-INTEGRITY or MESSAGE-INTEGRITY-SHA256 for this error,\
    \ so\n        the client MUST NOT expect a valid MESSAGE-INTEGRITY or MESSAGE-\n\
    \        INTEGRITY-SHA256 attribute on this response.\n   401  Unauthenticated:\
    \ The request did not contain the correct\n        credentials to proceed.  The\
    \ client should retry the request\n        with proper credentials.\n   420  Unknown\
    \ Attribute: The server received a STUN packet containing\n        a comprehension-required\
    \ attribute that it did not understand.\n        The server MUST put this unknown\
    \ attribute in the UNKNOWN-\n        ATTRIBUTE attribute of its error response.\n\
    \   438  Stale Nonce: The NONCE used by the client was no longer valid.\n    \
    \    The client should retry, using the NONCE provided in the\n        response.\n\
    \   500  Server Error: The server has suffered a temporary error.  The\n     \
    \   client should try again.\n"
- title: 14.9.  REALM
  contents:
  - "14.9.  REALM\n   The REALM attribute may be present in requests and responses.\
    \  It\n   contains text that meets the grammar for \"realm-value\" as described\n\
    \   in [RFC3261] but without the double quotes and their surrounding\n   whitespace.\
    \  That is, it is an unquoted realm-value (and is therefore\n   a sequence of\
    \ qdtext or quoted-pair).  It MUST be a UTF-8-encoded\n   [RFC3629] sequence of\
    \ fewer than 128 characters (which can be as long\n   as 509 bytes when encoding\
    \ them and as long as 763 bytes when\n   decoding them) and MUST have been processed\
    \ using the OpaqueString\n   profile [RFC8265].\n   Presence of the REALM attribute\
    \ in a request indicates that long-term\n   credentials are being used for authentication.\
    \  Presence in certain\n   error responses indicates that the server wishes the\
    \ client to use a\n   long-term credential in that realm for authentication.\n"
- title: 14.10.  NONCE
  contents:
  - "14.10.  NONCE\n   The NONCE attribute may be present in requests and responses.\
    \  It\n   contains a sequence of qdtext or quoted-pair, which are defined in\n\
    \   [RFC3261].  Note that this means that the NONCE attribute will not\n   contain\
    \ the actual surrounding quote characters.  The NONCE attribute\n   MUST be fewer\
    \ than 128 characters (which can be as long as 509 bytes\n   when encoding them\
    \ and a long as 763 bytes when decoding them).  See\n   Section 5.4 of [RFC7616]\
    \ for guidance on selection of nonce values in\n   a server.\n"
- title: 14.11.  PASSWORD-ALGORITHMS
  contents:
  - "14.11.  PASSWORD-ALGORITHMS\n   The PASSWORD-ALGORITHMS attribute may be present\
    \ in requests and\n   responses.  It contains the list of algorithms that the\
    \ server can\n   use to derive the long-term password.\n   The set of known algorithms\
    \ is maintained by IANA.  The initial set\n   defined by this specification is\
    \ found in Section 18.5.\n   The attribute contains a list of algorithm numbers\
    \ and variable\n   length parameters.  The algorithm number is a 16-bit value\
    \ as defined\n   in Section 18.5.  The parameters start with the length (prior\
    \ to\n   padding) of the parameters as a 16-bit value, followed by the\n   parameters\
    \ that are specific to each algorithm.  The parameters are\n   padded to a 32-bit\
    \ boundary, in the same manner as an attribute.\n      0                   1 \
    \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Algorithm 1           | Algorithm 1 Parameters Length |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                  Algorithm 1 Parameters (variable)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Algorithm 2           | Algorithm 2 Parameters Length |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                  Algorithm 2 Parameters (variable)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                             ...\n    \
    \         Figure 8: Format of PASSWORD-ALGORITHMS Attribute\n"
- title: 14.12.  PASSWORD-ALGORITHM
  contents:
  - "14.12.  PASSWORD-ALGORITHM\n   The PASSWORD-ALGORITHM attribute is present only\
    \ in requests.  It\n   contains the algorithm that the server must use to derive\
    \ a key from\n   the long-term password.\n   The set of known algorithms is maintained\
    \ by IANA.  The initial set\n   defined by this specification is found in Section\
    \ 18.5.\n   The attribute contains an algorithm number and variable length\n \
    \  parameters.  The algorithm number is a 16-bit value as defined in\n   Section\
    \ 18.5.  The parameters starts with the length (prior to\n   padding) of the parameters\
    \ as a 16-bit value, followed by the\n   parameters that are specific to the algorithm.\
    \  The parameters are\n   padded to a 32-bit boundary, in the same manner as an\
    \ attribute.\n   Similarly, the padding bits MUST be set to zero on sending and\
    \ MUST\n   be ignored by the receiver.\n      0                   1          \
    \         2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |          Algorithm           |  Algorithm Parameters Length   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                  Algorithm Parameters (variable)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 9: Format of PASSWORD-ALGORITHM Attribute\n"
- title: 14.13.  UNKNOWN-ATTRIBUTES
  contents:
  - "14.13.  UNKNOWN-ATTRIBUTES\n   The UNKNOWN-ATTRIBUTES attribute is present only\
    \ in an error response\n   when the response code in the ERROR-CODE attribute\
    \ is 420 (Unknown\n   Attribute).\n   The attribute contains a list of 16-bit\
    \ values, each of which\n   represents an attribute type that was not understood\
    \ by the server.\n      0                   1                   2            \
    \       3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |      Attribute 1 Type         |       Attribute 2 Type        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    Attribute 3 Type         |       Attribute 4 Type    ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 10: Format of UNKNOWN-ATTRIBUTES Attribute\n      Note: In\
    \ [RFC3489], this field was padded to 32 by duplicating the\n      last attribute.\
    \  In this version of the specification, the normal\n      padding rules for attributes\
    \ are used instead.\n"
- title: 14.14.  SOFTWARE
  contents:
  - "14.14.  SOFTWARE\n   The SOFTWARE attribute contains a textual description of\
    \ the software\n   being used by the agent sending the message.  It is used by\
    \ clients\n   and servers.  Its value SHOULD include manufacturer and version\n\
    \   number.  The attribute has no impact on operation of the protocol and\n  \
    \ serves only as a tool for diagnostic and debugging purposes.  The\n   value\
    \ of SOFTWARE is variable length.  It MUST be a UTF-8-encoded\n   [RFC3629] sequence\
    \ of fewer than 128 characters (which can be as long\n   as 509 when encoding\
    \ them and as long as 763 bytes when decoding\n   them).\n"
- title: 14.15.  ALTERNATE-SERVER
  contents:
  - "14.15.  ALTERNATE-SERVER\n   The alternate server represents an alternate transport\
    \ address\n   identifying a different STUN server that the STUN client should\
    \ try.\n   It is encoded in the same way as MAPPED-ADDRESS and thus refers to\
    \ a\n   single server by IP address.\n"
- title: 14.16.  ALTERNATE-DOMAIN
  contents:
  - "14.16.  ALTERNATE-DOMAIN\n   The alternate domain represents the domain name\
    \ that is used to\n   verify the IP address in the ALTERNATE-SERVER attribute\
    \ when the\n   transport protocol uses TLS or DTLS.\n   The value of ALTERNATE-DOMAIN\
    \ is variable length.  It MUST be a valid\n   DNS name [RFC1123] (including A-labels\
    \ [RFC5890]) of 255 or fewer\n   ASCII characters.\n"
- title: 15.  Operational Considerations
  contents:
  - "15.  Operational Considerations\n   STUN MAY be used with anycast addresses,\
    \ but only with UDP and in\n   STUN Usages where authentication is not used.\n"
- title: 16.  Security Considerations
  contents:
  - "16.  Security Considerations\n   Implementations and deployments of a STUN Usage\
    \ using TLS or DTLS\n   MUST follow the recommendations in [BCP195].\n   Implementations\
    \ and deployments of a STUN Usage using the long-term\n   credential mechanism\
    \ (Section 9.2) MUST follow the recommendations in\n   Section 5 of [RFC7616].\n"
- title: 16.1.  Attacks against the Protocol
  contents:
  - '16.1.  Attacks against the Protocol

    '
- title: 16.1.1.  Outside Attacks
  contents:
  - "16.1.1.  Outside Attacks\n   An attacker can try to modify STUN messages in transit,\
    \ in order to\n   cause a failure in STUN operation.  These attacks are detected\
    \ for\n   both requests and responses through the message-integrity mechanism,\n\
    \   using either a short-term or long-term credential.  Of course, once\n   detected,\
    \ the manipulated packets will be dropped, causing the STUN\n   transaction to\
    \ effectively fail.  This attack is possible only by an\n   on-path attacker.\n\
    \   An attacker that can observe, but not modify, STUN messages in-\n   transit\
    \ (for example, an attacker present on a shared access medium,\n   such as Wi-Fi)\
    \ can see a STUN request and then immediately send a\n   STUN response, typically\
    \ an error response, in order to disrupt STUN\n   processing.  This attack is\
    \ also prevented for messages that utilize\n   MESSAGE-INTEGRITY.  However, some\
    \ error responses, those related to\n   authentication in particular, cannot be\
    \ protected by MESSAGE-\n   INTEGRITY.  When STUN itself is run over a secure\
    \ transport protocol\n   (e.g., TLS), these attacks are completely mitigated.\n\
    \   Depending on the STUN Usage, these attacks may be of minimal\n   consequence\
    \ and thus do not require message integrity to mitigate.\n   For example, when\
    \ STUN is used to a basic STUN server to discover a\n   server reflexive candidate\
    \ for usage with ICE, authentication and\n   message integrity are not required\
    \ since these attacks are detected\n   during the connectivity check phase.  The\
    \ connectivity checks\n   themselves, however, require protection for proper operation\
    \ of ICE\n   overall.  As described in Section 13, STUN Usages describe when\n\
    \   authentication and message integrity are needed.\n   Since STUN uses the HMAC\
    \ of a shared secret for authentication and\n   integrity protection, it is subject\
    \ to offline dictionary attacks.\n   When authentication is utilized, it SHOULD\
    \ be with a strong password\n   that is not readily subject to offline dictionary\
    \ attacks.\n   Protection of the channel itself, using TLS or DTLS, mitigates\
    \ these\n   attacks.\n   STUN supports both MESSAGE-INTEGRITY and MESSAGE-INTEGRITY-SHA256,\n\
    \   which makes STUN subject to bid-down attacks by an on-path attacker.\n   An\
    \ attacker could strip the MESSAGE-INTEGRITY-SHA256 attribute,\n   leaving only\
    \ the MESSAGE-INTEGRITY attribute and thus exploiting a\n   potential vulnerability.\
    \  Protection of the channel itself, using TLS\n   or DTLS, mitigates these attacks.\
    \  Timely removal of the support of\n   MESSAGE-INTEGRITY in a future version\
    \ of STUN is necessary.\n   Note: The use of SHA-256 for password hashing does\
    \ not meet modern\n   standards, which are aimed at slowing down exhaustive password\n\
    \   searches by providing a relatively slow minimum time to compute the\n   hash.\
    \  Although better algorithms such as Argon2 [Argon2] are\n   available, SHA-256\
    \ was chosen for consistency with [RFC7616].\n"
- title: 16.1.2.  Inside Attacks
  contents:
  - "16.1.2.  Inside Attacks\n   A rogue client may try to launch a DoS attack against\
    \ a server by\n   sending it a large number of STUN requests.  Fortunately, STUN\n\
    \   requests can be processed statelessly by a server, making such\n   attacks\
    \ hard to launch effectively.\n   A rogue client may use a STUN server as a reflector,\
    \ sending it\n   requests with a falsified source IP address and port.  In such\
    \ a\n   case, the response would be delivered to that source IP and port.\n  \
    \ There is no amplification of the number of packets with this attack\n   (the\
    \ STUN server sends one packet for each packet sent by the\n   client), though\
    \ there is a small increase in the amount of data,\n   since STUN responses are\
    \ typically larger than requests.  This attack\n   is mitigated by ingress source\
    \ address filtering.\n   Revealing the specific software version of the agent\
    \ through the\n   SOFTWARE attribute might allow them to become more vulnerable\
    \ to\n   attacks against software that is known to contain security holes.\n \
    \  Implementers SHOULD make usage of the SOFTWARE attribute a\n   configurable\
    \ option.\n"
- title: 16.1.3.  Bid-Down Attacks
  contents:
  - "16.1.3.  Bid-Down Attacks\n   This document adds the possibility of selecting\
    \ different algorithms\n   to protect the confidentiality of the passwords stored\
    \ on the server\n   side when using the long-term credential mechanism while still\n\
    \   ensuring compatibility with MD5, which was the algorithm used in\n   [RFC5389].\
    \  This selection works by having the server send to the\n   client the list of\
    \ algorithms supported in a PASSWORD-ALGORITHMS\n   attribute and having the client\
    \ send back a PASSWORD-ALGORITHM\n   attribute containing the algorithm selected.\n\
    \   Because the PASSWORD-ALGORITHMS attribute has to be sent in an\n   unauthenticated\
    \ response, an on-path attacker wanting to exploit an\n   eventual vulnerability\
    \ in MD5 can just strip the PASSWORD-ALGORITHMS\n   attribute from the unprotected\
    \ response, thus making the server\n   subsequently act as if the client was implementing\
    \ the version of\n   this protocol defined in [RFC5389].\n   To protect against\
    \ this attack and other similar bid-down attacks,\n   the nonce is enriched with\
    \ a set of security bits that indicates\n   which security features are in use.\
    \  In the case of the selection of\n   the password algorithm, the matching bit\
    \ is set in the nonce returned\n   by the server in the same response that contains\
    \ the PASSWORD-\n   ALGORITHMS attribute.  Because the nonce used in subsequent\n\
    \   authenticated transactions is verified by the server to be identical\n   to\
    \ what was originally sent, it cannot be modified by an on-path\n   attacker.\
    \  Additionally, the client is mandated to copy the received\n   PASSWORD-ALGORITHMS\
    \ attribute in the next authenticated transaction\n   to that server.\n   An on-path\
    \ attack that removes the PASSWORD-ALGORITHMS will be\n   detected because the\
    \ client will not be able to send it back to the\n   server in the next authenticated\
    \ transaction.  The client will detect\n   that attack because the security bit\
    \ is set but the matching\n   attribute is missing; this will end the session.\
    \  A client using an\n   older version of this protocol will not send the PASSWORD-ALGORITHMS\n\
    \   back but can only use MD5 anyway, so the attack is inconsequential.\n   The\
    \ on-path attack may also try to remove the security bit together\n   with the\
    \ PASSWORD-ALGORITHMS attribute, but the server will discover\n   that when the\
    \ next authenticated transaction contains an invalid\n   nonce.\n   An on-path\
    \ attack that removes some algorithms from the PASSWORD-\n   ALGORITHMS attribute\
    \ will be equally defeated because that attribute\n   will be different from the\
    \ original one when the server verifies it\n   in the subsequent authenticated\
    \ transaction.\n   Note that the bid-down protection mechanism introduced in this\n\
    \   document is inherently limited by the fact that it is not possible to\n  \
    \ detect an attack until the server receives the second request after\n   the\
    \ 401 (Unauthenticated) response.\n   SHA-256 was chosen as the new default for\
    \ password hashing for its\n   compatibility with [RFC7616], but because SHA-256\
    \ (like MD5) is a\n   comparatively fast algorithm, it does little to deter brute-force\n\
    \   attacks.  Specifically, this means that if the user has a weak\n   password,\
    \ an attacker that captures a single exchange can use a\n   brute-force attack\
    \ to learn the user's password and then potentially\n   impersonate the user to\
    \ the server and to other servers where the\n   same password was used.  Note\
    \ that such an attacker can impersonate\n   the user to the server itself without\
    \ any brute-force attack.\n   A stronger (which is to say, slower) algorithm,\
    \ like Argon2 [Argon2],\n   would help both of these cases; however, in the first\
    \ case, it would\n   only help after the database entry for this user is updated\
    \ to\n   exclusively use that stronger mechanism.\n   The bid-down defenses in\
    \ this protocol prevent an attacker from\n   forcing the client and server to\
    \ complete a handshake using weaker\n   algorithms than they jointly support,\
    \ but only if the weakest joint\n   algorithm is strong enough that it cannot\
    \ be compromised by a brute-\n   force attack.  However, this does not defend\
    \ against many attacks on\n   those algorithms; specifically, an on-path attacker\
    \ might perform a\n   bid-down attack on a client that supports both Argon2 [Argon2]\
    \ and\n   SHA-256 for password hashing and use that to collect a MESSAGE-\n  \
    \ INTEGRITY-SHA256 value that it can then use for an offline brute-\n   force\
    \ attack.  This would be detected when the server receives the\n   second request,\
    \ but that does not prevent the attacker from obtaining\n   the MESSAGE-INTEGRITY-SHA256\
    \ value.\n   Similarly, an attack against the USERHASH mechanism will not succeed\n\
    \   in establishing a session as the server will detect that the feature\n   was\
    \ discarded on path, but the client would still have been convinced\n   to send\
    \ its username in the clear in the USERNAME attribute, thus\n   disclosing it\
    \ to the attacker.\n   Finally, when the bid-down protection mechanism is employed\
    \ for a\n   future upgrade of the HMAC algorithm used to protect messages, it\n\
    \   will offer only a limited protection if the current HMAC algorithm is\n  \
    \ already compromised.\n"
- title: 16.2.  Attacks Affecting the Usage
  contents:
  - "16.2.  Attacks Affecting the Usage\n   This section lists attacks that might\
    \ be launched against a usage of\n   STUN.  Each STUN Usage must consider whether\
    \ these attacks are\n   applicable to it and, if so, discuss countermeasures.\n\
    \   Most of the attacks in this section revolve around an attacker\n   modifying\
    \ the reflexive address learned by a STUN client through a\n   Binding request/response\
    \ transaction.  Since the usage of the\n   reflexive address is a function of\
    \ the usage, the applicability and\n   remediation of these attacks are usage-specific.\
    \  In common\n   situations, modification of the reflexive address by an on-path\n\
    \   attacker is easy to do.  Consider, for example, the common situation\n   where\
    \ STUN is run directly over UDP.  In this case, an on-path\n   attacker can modify\
    \ the source IP address of the Binding request\n   before it arrives at the STUN\
    \ server.  The STUN server will then\n   return this IP address in the XOR-MAPPED-ADDRESS\
    \ attribute to the\n   client and send the response back to that (falsified) IP\
    \ address and\n   port.  If the attacker can also intercept this response, it\
    \ can\n   direct it back towards the client.  Protecting against this attack by\n\
    \   using a message-integrity check is impossible, since a message-\n   integrity\
    \ value cannot cover the source IP address and the\n   intervening NAT must be\
    \ able to modify this value.  Instead, one\n   solution to prevent the attacks\
    \ listed below is for the client to\n   verify the reflexive address learned,\
    \ as is done in ICE [RFC8445].\n   Other usages may use other means to prevent\
    \ these attacks.\n"
- title: '16.2.1.  Attack I: Distributed DoS (DDoS) against a Target'
  contents:
  - "16.2.1.  Attack I: Distributed DoS (DDoS) against a Target\n   In this attack,\
    \ the attacker provides one or more clients with the\n   same faked reflexive\
    \ address that points to the intended target.\n   This will trick the STUN clients\
    \ into thinking that their reflexive\n   addresses are equal to that of the target.\
    \  If the clients hand out\n   that reflexive address in order to receive traffic\
    \ on it (for\n   example, in SIP messages), the traffic will instead be sent to\
    \ the\n   target.  This attack can provide substantial amplification,\n   especially\
    \ when used with clients that are using STUN to enable\n   multimedia applications.\
    \  However, it can only be launched against\n   targets for which packets from\
    \ the STUN server to the target pass\n   through the attacker, limiting the cases\
    \ in which it is possible.\n"
- title: '16.2.2.  Attack II: Silencing a Client'
  contents:
  - "16.2.2.  Attack II: Silencing a Client\n   In this attack, the attacker provides\
    \ a STUN client with a faked\n   reflexive address.  The reflexive address it\
    \ provides is a transport\n   address that routes to nowhere.  As a result, the\
    \ client won't\n   receive any of the packets it expects to receive when it hands\
    \ out\n   the reflexive address.  This exploitation is not very interesting for\n\
    \   the attacker.  It impacts a single client, which is frequently not\n   the\
    \ desired target.  Moreover, any attacker that can mount the attack\n   could\
    \ also deny service to the client by other means, such as\n   preventing the client\
    \ from receiving any response from the STUN\n   server, or even a DHCP server.\
    \  As with the attack described in\n   Section 16.2.1, this attack is only possible\
    \ when the attacker is on\n   path for packets sent from the STUN server towards\
    \ this unused IP\n   address.\n"
- title: '16.2.3.  Attack III: Assuming the Identity of a Client'
  contents:
  - "16.2.3.  Attack III: Assuming the Identity of a Client\n   This attack is similar\
    \ to attack II.  However, the faked reflexive\n   address points to the attacker\
    \ itself.  This allows the attacker to\n   receive traffic that was destined for\
    \ the client.\n"
- title: '16.2.4.  Attack IV: Eavesdropping'
  contents:
  - "16.2.4.  Attack IV: Eavesdropping\n   In this attack, the attacker forces the\
    \ client to use a reflexive\n   address that routes to itself.  It then forwards\
    \ any packets it\n   receives to the client.  This attack allows the attacker\
    \ to observe\n   all packets sent to the client.  However, in order to launch\
    \ the\n   attack, the attacker must have already been able to observe packets\n\
    \   from the client to the STUN server.  In most cases (such as when the\n   attack\
    \ is launched from an access network), this means that the\n   attacker could\
    \ already observe packets sent to the client.  This\n   attack is, as a result,\
    \ only useful for observing traffic by\n   attackers on the path from the client\
    \ to the STUN server, but not\n   generally on the path of packets being routed\
    \ towards the client.\n   Note that this attack can be trivially launched by the\
    \ STUN server\n   itself, so users of STUN servers should have the same level\
    \ of trust\n   in the users of STUN servers as any other node that can insert\
    \ itself\n   into the communication flow.\n"
- title: 16.3.  Hash Agility Plan
  contents:
  - "16.3.  Hash Agility Plan\n   This specification uses HMAC-SHA256 for computation\
    \ of the message\n   integrity, sometimes in combination with HMAC-SHA1.  If,\
    \ at a later\n   time, HMAC-SHA256 is found to be compromised, the following remedy\n\
    \   should be applied:\n   o  Both a new message-integrity attribute and a new\
    \ STUN Security\n      Feature bit will be allocated in a Standards Track document.\
    \  The\n      new message-integrity attribute will have its value computed using\n\
    \      a new hash.  The STUN Security Feature bit will be used to\n      simultaneously\
    \ 1) signal to a STUN client using the long-term\n      credential mechanism that\
    \ this server supports this new hash\n      algorithm and 2) prevent bid-down\
    \ attacks on the new message-\n      integrity attribute.\n   o  STUN clients\
    \ and servers using the short-term credential mechanism\n      will need to update\
    \ the external mechanism that they use to signal\n      what message-integrity\
    \ attributes are in use.\n   The bid-down protection mechanism described in this\
    \ document is new\n   and thus cannot currently protect against a bid-down attack\
    \ that\n   lowers the strength of the hash algorithm to HMAC-SHA1.  This is why,\n\
    \   after a transition period, a new document updating this one will\n   assign\
    \ a new STUN Security Feature bit for deprecating HMAC-SHA1.\n   When used, this\
    \ bit will signal that HMAC-SHA1 is deprecated and\n   should no longer be used.\n\
    \   Similarly, if HMAC-SHA256 is found to be compromised, a new userhash\n   attribute\
    \ and a new STUN Security Feature bit will be allocated in a\n   Standards Track\
    \ document.  The new userhash attribute will have its\n   value computed using\
    \ a new hash.  The STUN Security Feature bit will\n   be used to simultaneously\
    \ 1) signal to a STUN client using the long-\n   term credential mechanism that\
    \ this server supports this new hash\n   algorithm for the userhash attribute\
    \ and 2) prevent bid-down attacks\n   on the new userhash attribute.\n"
- title: 17.  IAB Considerations
  contents:
  - "17.  IAB Considerations\n   The IAB has studied the problem of Unilateral Self-Address\
    \ Fixing\n   (UNSAF), which is the general process by which a client attempts\
    \ to\n   determine its address in another realm on the other side of a NAT\n \
    \  through a collaborative protocol reflection mechanism [RFC3424].\n   STUN can\
    \ be used to perform this function using a Binding request/\n   response transaction\
    \ if one agent is behind a NAT and the other is on\n   the public side of the\
    \ NAT.\n   The IAB has suggested that protocols developed for this purpose\n \
    \  document a specific set of considerations.  Because some STUN Usages\n   provide\
    \ UNSAF functions (such as ICE [RFC8445]) and others do not\n   (such as SIP Outbound\
    \ [RFC5626]), answers to these considerations\n   need to be addressed by the\
    \ usages themselves.\n"
- title: 18.  IANA Considerations
  contents:
  - '18.  IANA Considerations

    '
- title: 18.1.  STUN Security Features Registry
  contents:
  - "18.1.  STUN Security Features Registry\n   A STUN Security Feature set defines\
    \ 24 bits as flags.\n   IANA has created a new registry containing the STUN Security\
    \ Features\n   that are protected by the bid-down attack prevention mechanism\n\
    \   described in Section 9.2.1.\n   The initial STUN Security Features are:\n\
    \   Bit 0: Password algorithms\n   Bit 1: Username anonymity\n   Bit 2-23: Unassigned\n\
    \   Bits are assigned starting from the most significant side of the bit\n   set,\
    \ so Bit 0 is the leftmost bit and Bit 23 is the rightmost bit.\n   New Security\
    \ Features are assigned by Standards Action [RFC8126].\n"
- title: 18.2.  STUN Methods Registry
  contents:
  - "18.2.  STUN Methods Registry\n   A STUN method is a hex number in the range 0x000-0x0FF.\
    \  The encoding\n   of a STUN method into a STUN message is described in Section\
    \ 5.\n   STUN methods in the range 0x000-0x07F are assigned by IETF Review\n \
    \  [RFC8126].  STUN methods in the range 0x080-0x0FF are assigned by\n   Expert\
    \ Review [RFC8126].  The responsibility of the expert is to\n   verify that the\
    \ selected codepoint(s) is not in use and that the\n   request is not for an abnormally\
    \ large number of codepoints.\n   Technical review of the extension itself is\
    \ outside the scope of the\n   designated expert responsibility.\n   IANA has\
    \ updated the name for method 0x002 as described below as well\n   as updated\
    \ the reference from RFC 5389 to RFC 8489 for the following\n   STUN methods:\n\
    \   0x000: Reserved\n   0x001: Binding\n   0x002: Reserved; was SharedSecret prior\
    \ to [RFC5389]\n"
- title: 18.3.  STUN Attributes Registry
  contents:
  - "18.3.  STUN Attributes Registry\n   A STUN attribute type is a hex number in\
    \ the range 0x0000-0xFFFF.\n   STUN attribute types in the range 0x0000-0x7FFF\
    \ are considered\n   comprehension-required; STUN attribute types in the range\n\
    \   0x8000-0xFFFF are considered comprehension-optional.  A STUN agent\n   handles\
    \ unknown comprehension-required and comprehension-optional\n   attributes differently.\n\
    \   STUN attribute types in the first half of the comprehension-required\n   range\
    \ (0x0000-0x3FFF) and in the first half of the comprehension-\n   optional range\
    \ (0x8000-0xBFFF) are assigned by IETF Review [RFC8126].\n   STUN attribute types\
    \ in the second half of the comprehension-required\n   range (0x4000-0x7FFF) and\
    \ in the second half of the comprehension-\n   optional range (0xC000-0xFFFF)\
    \ are assigned by Expert Review\n   [RFC8126].  The responsibility of the expert\
    \ is to verify that the\n   selected codepoint(s) are not in use and that the\
    \ request is not for\n   an abnormally large number of codepoints.  Technical\
    \ review of the\n   extension itself is outside the scope of the designated expert\n\
    \   responsibility.\n"
- title: 18.3.1.  Updated Attributes
  contents:
  - "18.3.1.  Updated Attributes\n   IANA has updated the names for attributes 0x0002,\
    \ 0x0004, 0x0005,\n   0x0007, and 0x000B as well as updated the reference from\
    \ RFC 5389 to\n   RFC 8489 for each the following STUN methods.\n   In addition,\
    \ [RFC5389] introduced a mistake in the name of attribute\n   0x0003; [RFC5389]\
    \ called it CHANGE-ADDRESS when it was actually\n   previously called CHANGE-REQUEST.\
    \  Thus, IANA has updated the\n   description for 0x0003 to read \"Reserved; was\
    \ CHANGE-REQUEST prior to\n   [RFC5389]\".\n   Comprehension-required range (0x0000-0x7FFF):\n\
    \   0x0000: Reserved\n   0x0001: MAPPED-ADDRESS\n   0x0002: Reserved; was RESPONSE-ADDRESS\
    \ prior to [RFC5389]\n   0x0003: Reserved; was CHANGE-REQUEST prior to [RFC5389]\n\
    \   0x0004: Reserved; was SOURCE-ADDRESS prior to [RFC5389]\n   0x0005: Reserved;\
    \ was CHANGED-ADDRESS prior to [RFC5389]\n   0x0006: USERNAME\n   0x0007: Reserved;\
    \ was PASSWORD prior to [RFC5389]\n   0x0008: MESSAGE-INTEGRITY\n   0x0009: ERROR-CODE\n\
    \   0x000A: UNKNOWN-ATTRIBUTES\n   0x000B: Reserved; was REFLECTED-FROM prior\
    \ to [RFC5389]\n   0x0014: REALM\n   0x0015: NONCE\n   0x0020: XOR-MAPPED-ADDRESS\n\
    \   Comprehension-optional range (0x8000-0xFFFF)\n   0x8022: SOFTWARE\n   0x8023:\
    \ ALTERNATE-SERVER\n   0x8028: FINGERPRINT\n"
- title: 18.3.2.  New Attributes
  contents:
  - "18.3.2.  New Attributes\n   IANA has added the following attribute to the \"\
    STUN Attributes\"\n   registry:\n   Comprehension-required range (0x0000-0x7FFF):\n\
    \   0x001C: MESSAGE-INTEGRITY-SHA256\n   0x001D: PASSWORD-ALGORITHM\n   0x001E:\
    \ USERHASH\n   Comprehension-optional range (0x8000-0xFFFF)\n   0x8002: PASSWORD-ALGORITHMS\n\
    \   0x8003: ALTERNATE-DOMAIN\n"
- title: 18.4.  STUN Error Codes Registry
  contents:
  - "18.4.  STUN Error Codes Registry\n   A STUN error code is a number in the range\
    \ 0-699.  STUN error codes\n   are accompanied by a textual reason phrase in UTF-8\
    \ [RFC3629] that is\n   intended only for human consumption and can be anything\
    \ appropriate;\n   this document proposes only suggested values.\n   STUN error\
    \ codes are consistent in codepoint assignments and\n   semantics with SIP [RFC3261]\
    \ and HTTP [RFC7231].\n   New STUN error codes are assigned based on IETF Review\
    \ [RFC8126].\n   The specification must carefully consider how clients that do\
    \ not\n   understand this error code will process it before granting the\n   request.\
    \  See the rules in Section 6.3.4.\n   IANA has updated the reference from RFC\
    \ 5389 to RFC 8489 for the\n   error codes defined in Section 14.8.\n   IANA has\
    \ changed the name of the 401 error code from \"Unauthorized\"\n   to \"Unauthenticated\"\
    .\n"
- title: 18.5.  STUN Password Algorithms Registry
  contents:
  - "18.5.  STUN Password Algorithms Registry\n   IANA has created a new registry\
    \ titled \"STUN Password Algorithms\".\n   A password algorithm is a hex number\
    \ in the range 0x0000-0xFFFF.\n   The initial contents of the \"Password Algorithm\"\
    \ registry are as\n   follows:\n   0x0000: Reserved\n   0x0001: MD5\n   0x0002:\
    \ SHA-256\n   0x0003-0xFFFF: Unassigned\n   Password algorithms in the first half\
    \ of the range (0x0000-0x7FFF)\n   are assigned by IETF Review [RFC8126].  Password\
    \ algorithms in the\n   second half of the range (0x8000-0xFFFF) are assigned\
    \ by Expert\n   Review [RFC8126].\n"
- title: 18.5.1.  Password Algorithms
  contents:
  - '18.5.1.  Password Algorithms

    '
- title: 18.5.1.1.  MD5
  contents:
  - "18.5.1.1.  MD5\n   This password algorithm is taken from [RFC1321].\n   The key\
    \ length is 16 bytes, and the parameters value is empty.\n      Note: This algorithm\
    \ MUST only be used for compatibility with\n      legacy systems.\n          \
    \      key = MD5(username \":\" OpaqueString(realm)\n                  \":\" OpaqueString(password))\n"
- title: 18.5.1.2.  SHA-256
  contents:
  - "18.5.1.2.  SHA-256\n   This password algorithm is taken from [RFC7616].\n   The\
    \ key length is 32 bytes, and the parameters value is empty.\n              key\
    \ = SHA-256(username \":\" OpaqueString(realm)\n                \":\" OpaqueString(password))\n"
- title: 18.6.  STUN UDP and TCP Port Numbers
  contents:
  - "18.6.  STUN UDP and TCP Port Numbers\n   IANA has updated the reference from\
    \ RFC 5389 to RFC 8489 for the\n   following ports in the \"Service Name and Transport\
    \ Protocol Port\n   Number Registry\".\n   stun   3478/tcp   Session Traversal\
    \ Utilities for NAT (STUN) port\n   stun   3478/udp   Session Traversal Utilities\
    \ for NAT (STUN) port\n   stuns  5349/tcp   Session Traversal Utilities for NAT\
    \ (STUN) port\n"
- title: 19.  Changes since RFC 5389
  contents:
  - "19.  Changes since RFC 5389\n   This specification obsoletes [RFC5389].  This\
    \ specification differs\n   from RFC 5389 in the following ways:\n   o  Added\
    \ support for DTLS-over-UDP [RFC6347].\n   o  Made clear that the RTO is considered\
    \ stale if there are no\n      transactions with the server.\n   o  Aligned the\
    \ RTO calculation with [RFC6298].\n   o  Updated the ciphersuites for TLS.\n \
    \  o  Added support for STUN URI [RFC7064].\n   o  Added support for SHA256 message\
    \ integrity.\n   o  Updated the Preparation, Enforcement, and Comparison of\n\
    \      Internationalized Strings (PRECIS) support to [RFC8265].\n   o  Added protocol\
    \ and registry to choose the password encryption\n      algorithm.\n   o  Added\
    \ support for anonymous username.\n   o  Added protocol and registry for preventing\
    \ bid-down attacks.\n   o  Specified that sharing a NONCE is no longer permitted.\n\
    \   o  Added the possibility of using a domain name in the alternate\n      server\
    \ mechanism.\n   o  Added more C snippets.\n   o  Added test vector.\n"
- title: 20.  References
  contents:
  - '20.  References

    '
- title: 20.1.  Normative References
  contents:
  - "20.1.  Normative References\n   [ITU.V42.2002]\n              International Telecommunication\
    \ Union, \"Error-correcting\n              procedures for DCEs using asynchronous-to-synchronous\n\
    \              conversion\", ITU-T Recommendation V.42, March 2002.\n   [KARN87]\
    \   Karn, P. and C. Partridge, \"Improving Round-Trip Time\n              Estimates\
    \ in Reliable Transport Protocols\", SIGCOMM '87,\n              Proceedings of\
    \ the ACM workshop on Frontiers in computer\n              communications technology,\
    \ Pages 2-7,\n              DOI 10.1145/55483.55484, August 1987.\n   [RFC0791]\
    \  Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n              DOI 10.17487/RFC0791,\
    \ September 1981,\n              <https://www.rfc-editor.org/info/rfc791>.\n \
    \  [RFC1122]  Braden, R., Ed., \"Requirements for Internet Hosts -\n         \
    \     Communication Layers\", STD 3, RFC 1122,\n              DOI 10.17487/RFC1122,\
    \ October 1989,\n              <https://www.rfc-editor.org/info/rfc1122>.\n  \
    \ [RFC1123]  Braden, R., Ed., \"Requirements for Internet Hosts -\n          \
    \    Application and Support\", STD 3, RFC 1123,\n              DOI 10.17487/RFC1123,\
    \ October 1989,\n              <https://www.rfc-editor.org/info/rfc1123>.\n  \
    \ [RFC1321]  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n   \
    \           DOI 10.17487/RFC1321, April 1992,\n              <https://www.rfc-editor.org/info/rfc1321>.\n\
    \   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n   \
    \           Hashing for Message Authentication\", RFC 2104,\n              DOI\
    \ 10.17487/RFC2104, February 1997,\n              <https://www.rfc-editor.org/info/rfc2104>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2782]\
    \  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying\
    \ the location of services (DNS SRV)\", RFC 2782,\n              DOI 10.17487/RFC2782,\
    \ February 2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n \
    \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n         \
    \     10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n            \
    \  2003, <https://www.rfc-editor.org/info/rfc3629>.\n   [RFC4648]  Josefsson,\
    \ S., \"The Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648,\
    \ DOI 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n\
    \   [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Definitions and Document Framework\",\n             \
    \ RFC 5890, DOI 10.17487/RFC5890, August 2010,\n              <https://www.rfc-editor.org/info/rfc5890>.\n\
    \   [RFC6125]  Saint-Andre, P. and J. Hodges, \"Representation and\n         \
    \     Verification of Domain-Based Application Service Identity\n            \
    \  within Internet Public Key Infrastructure Using X.509\n              (PKIX)\
    \ Certificates in the Context of Transport Layer\n              Security (TLS)\"\
    , RFC 6125, DOI 10.17487/RFC6125, March\n              2011, <https://www.rfc-editor.org/info/rfc6125>.\n\
    \   [RFC6151]  Turner, S. and L. Chen, \"Updated Security Considerations\n   \
    \           for the MD5 Message-Digest and the HMAC-MD5 Algorithms\",\n      \
    \        RFC 6151, DOI 10.17487/RFC6151, March 2011,\n              <https://www.rfc-editor.org/info/rfc6151>.\n\
    \   [RFC6298]  Paxson, V., Allman, M., Chu, J., and M. Sargent,\n            \
    \  \"Computing TCP's Retransmission Timer\", RFC 6298,\n              DOI 10.17487/RFC6298,\
    \ June 2011,\n              <https://www.rfc-editor.org/info/rfc6298>.\n   [RFC6347]\
    \  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security\
    \ Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n              January 2012,\
    \ <https://www.rfc-editor.org/info/rfc6347>.\n   [RFC7064]  Nandakumar, S., Salgueiro,\
    \ G., Jones, P., and M. Petit-\n              Huguenin, \"URI Scheme for the Session\
    \ Traversal Utilities\n              for NAT (STUN) Protocol\", RFC 7064, DOI\
    \ 10.17487/RFC7064,\n              November 2013, <https://www.rfc-editor.org/info/rfc7064>.\n\
    \   [RFC7350]  Petit-Huguenin, M. and G. Salgueiro, \"Datagram Transport\n   \
    \           Layer Security (DTLS) as Transport for Session Traversal\n       \
    \       Utilities for NAT (STUN)\", RFC 7350, DOI 10.17487/RFC7350,\n        \
    \      August 2014, <https://www.rfc-editor.org/info/rfc7350>.\n   [RFC7616] \
    \ Shekh-Yusef, R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n              Digest\
    \ Access Authentication\", RFC 7616,\n              DOI 10.17487/RFC7616, September\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7616>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]  Deering, S. and R.\
    \ Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8265]  Saint-Andre,\
    \ P. and A. Melnikov, \"Preparation,\n              Enforcement, and Comparison\
    \ of Internationalized Strings\n              Representing Usernames and Passwords\"\
    , RFC 8265,\n              DOI 10.17487/RFC8265, October 2017,\n             \
    \ <https://www.rfc-editor.org/info/rfc8265>.\n   [RFC8305]  Schinazi, D. and T.\
    \ Pauly, \"Happy Eyeballs Version 2:\n              Better Connectivity Using\
    \ Concurrency\", RFC 8305,\n              DOI 10.17487/RFC8305, December 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8305>.\n"
- title: 20.2.  Informative References
  contents:
  - "20.2.  Informative References\n   [Argon2]   Biryukov, A., Dinu, D., Khovratovich,\
    \ D., and S.\n              Josefsson, \"The memory-hard Argon2 password hash\
    \ and\n              proof-of-work function\", Work in Progress, draft-irtf-\n\
    \              cfrg-argon2-09, November 2019.\n   [BCP195]   Sheffer, Y., Holz,\
    \ R., and P. Saint-Andre,\n              \"Recommendations for Secure Use of Transport\
    \ Layer\n              Security (TLS) and Datagram Transport Layer Security\n\
    \              (DTLS)\", BCP 195, RFC 7525, May 2015,\n              <https://www.rfc-editor.org/info/bcp195>.\n\
    \   [RFC1952]  Deutsch, P., \"GZIP file format specification version 4.3\",\n\
    \              RFC 1952, DOI 10.17487/RFC1952, May 1996,\n              <https://www.rfc-editor.org/info/rfc1952>.\n\
    \   [RFC2279]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", RFC 2279, DOI 10.17487/RFC2279, January 1998,\n              <https://www.rfc-editor.org/info/rfc2279>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC3424]\
    \  Daigle, L., Ed. and IAB, \"IAB Considerations for\n              UNilateral\
    \ Self-Address Fixing (UNSAF) Across Network\n              Address Translation\"\
    , RFC 3424, DOI 10.17487/RFC3424,\n              November 2002, <https://www.rfc-editor.org/info/rfc3424>.\n\
    \   [RFC3454]  Hoffman, P. and M. Blanchet, \"Preparation of\n              Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n              DOI 10.17487/RFC3454, December\
    \ 2002,\n              <https://www.rfc-editor.org/info/rfc3454>.\n   [RFC3489]\
    \  Rosenberg, J., Weinberger, J., Huitema, C., and R. Mahy,\n              \"\
    STUN - Simple Traversal of User Datagram Protocol (UDP)\n              Through\
    \ Network Address Translators (NATs)\", RFC 3489,\n              DOI 10.17487/RFC3489,\
    \ March 2003,\n              <https://www.rfc-editor.org/info/rfc3489>.\n   [RFC4013]\
    \  Zeilenga, K., \"SASLprep: Stringprep Profile for User Names\n             \
    \ and Passwords\", RFC 4013, DOI 10.17487/RFC4013, February\n              2005,\
    \ <https://www.rfc-editor.org/info/rfc4013>.\n   [RFC4107]  Bellovin, S. and R.\
    \ Housley, \"Guidelines for Cryptographic\n              Key Management\", BCP\
    \ 107, RFC 4107, DOI 10.17487/RFC4107,\n              June 2005, <https://www.rfc-editor.org/info/rfc4107>.\n\
    \   [RFC5090]  Sterman, B., Sadolevsky, D., Schwartz, D., Williams, D.,\n    \
    \          and W. Beck, \"RADIUS Extension for Digest Authentication\",\n    \
    \          RFC 5090, DOI 10.17487/RFC5090, February 2008,\n              <https://www.rfc-editor.org/info/rfc5090>.\n\
    \   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n         \
    \     \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n            \
    \  DOI 10.17487/RFC5389, October 2008,\n              <https://www.rfc-editor.org/info/rfc5389>.\n\
    \   [RFC5626]  Jennings, C., Ed., Mahy, R., Ed., and F. Audet, Ed.,\n        \
    \      \"Managing Client-Initiated Connections in the Session\n              Initiation\
    \ Protocol (SIP)\", RFC 5626,\n              DOI 10.17487/RFC5626, October 2009,\n\
    \              <https://www.rfc-editor.org/info/rfc5626>.\n   [RFC5766]  Mahy,\
    \ R., Matthews, P., and J. Rosenberg, \"Traversal Using\n              Relays\
    \ around NAT (TURN): Relay Extensions to Session\n              Traversal Utilities\
    \ for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766, April 2010,\n\
    \              <https://www.rfc-editor.org/info/rfc5766>.\n   [RFC5769]  Denis-Courmont,\
    \ R., \"Test Vectors for Session Traversal\n              Utilities for NAT (STUN)\"\
    , RFC 5769, DOI 10.17487/RFC5769,\n              April 2010, <https://www.rfc-editor.org/info/rfc5769>.\n\
    \   [RFC5780]  MacDonald, D. and B. Lowekamp, \"NAT Behavior Discovery\n     \
    \         Using Session Traversal Utilities for NAT (STUN)\",\n              RFC\
    \ 5780, DOI 10.17487/RFC5780, May 2010,\n              <https://www.rfc-editor.org/info/rfc5780>.\n\
    \   [RFC6544]  Rosenberg, J., Keranen, A., Lowekamp, B., and A. Roach,\n     \
    \         \"TCP Candidates with Interactive Connectivity\n              Establishment\
    \ (ICE)\", RFC 6544, DOI 10.17487/RFC6544,\n              March 2012, <https://www.rfc-editor.org/info/rfc6544>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8264]  Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n        \
    \      Preparation, Enforcement, and Comparison of\n              Internationalized\
    \ Strings in Application Protocols\",\n              RFC 8264, DOI 10.17487/RFC8264,\
    \ October 2017,\n              <https://www.rfc-editor.org/info/rfc8264>.\n  \
    \ [RFC8445]  Keranen, A., Holmberg, C., and J. Rosenberg, \"Interactive\n    \
    \          Connectivity Establishment (ICE): A Protocol for Network\n        \
    \      Address Translator (NAT) Traversal\", RFC 8445,\n              DOI 10.17487/RFC8445,\
    \ July 2018,\n              <https://www.rfc-editor.org/info/rfc8445>.\n   [RFC8446]\
    \  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n             \
    \ Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n\
    \   [STUN-PMTUD]\n              Petit-Huguenin, M., Salgueiro, G., and F. Garrido,\n\
    \              \"Packetization Layer Path MTU Discovery (PLMTUD) For UDP\n   \
    \           Transports Using Session Traversal Utilities for NAT\n           \
    \   (STUN)\", Work in Progress, draft-ietf-tram-stun-pmtud-15,\n             \
    \ December 2019.\n   [UAX15]    Unicode Standard Annex #15, \"Unicode Normalization\
    \ Forms\",\n              edited by Mark Davis and Ken Whistler.  An integral\
    \ part\n              of The Unicode Standard,\n              <http://unicode.org/reports/tr15/>.\n"
- title: Appendix A.  C Snippet to Determine STUN Message Types
  contents:
  - "Appendix A.  C Snippet to Determine STUN Message Types\n   Given a 16-bit STUN\
    \ message type value in host byte order in msg_type\n   parameter, below are C\
    \ macros to determine the STUN message types:\n   <CODE BEGINS>\n   #define IS_REQUEST(msg_type)\
    \       (((msg_type) & 0x0110) == 0x0000)\n   #define IS_INDICATION(msg_type)\
    \    (((msg_type) & 0x0110) == 0x0010)\n   #define IS_SUCCESS_RESP(msg_type) \
    \ (((msg_type) & 0x0110) == 0x0100)\n   #define IS_ERR_RESP(msg_type)      (((msg_type)\
    \ & 0x0110) == 0x0110)\n   <CODE ENDS>\n   A function to convert method and class\
    \ into a message type:\n   <CODE BEGINS>\n   int type(int method, int cls) {\n\
    \     return (method & 0x1F80) << 2 | (method & 0x0070) << 1\n       | (method\
    \ & 0x000F) | (cls & 0x0002) << 7\n       | (cls & 0x0001) << 4;\n     }\n   <CODE\
    \ ENDS>\n   A function to extract the method from the message type:\n   <CODE\
    \ BEGINS>\n   int method(int type) {\n     return (type & 0x3E00) >> 2 | (type\
    \ & 0x00E0) >> 1\n       | (type & 0x000F);\n     }\n   <CODE ENDS>\n   A function\
    \ to extract the class from the message type:\n   <CODE BEGINS>\n   int cls(int\
    \ type) {\n     return (type & 0x0100) >> 7 | (type & 0x0010) >> 4;\n     }\n\
    \   <CODE ENDS>\n"
- title: Appendix B.  Test Vectors
  contents:
  - "Appendix B.  Test Vectors\n   This section augments the list of test vectors\
    \ defined in [RFC5769]\n   with MESSAGE-INTEGRITY-SHA256.  All the formats and\
    \ definitions\n   listed in Section 2 of [RFC5769] apply here.\n"
- title: B.1.  Sample Request with Long-Term Authentication with MESSAGE-
  contents:
  - "B.1.  Sample Request with Long-Term Authentication with MESSAGE-\n      INTEGRITY-SHA256\
    \ and USERHASH\n   This request uses the following parameters:\n   Username: \"\
    <U+30DE><U+30C8><U+30EA><U+30C3><U+30AF><U+30B9>\" (without\n   quotes) unaffected\
    \ by OpaqueString [RFC8265] processing\n   Password: \"The<U+00AD>M<U+00AA>tr<U+2168>\"\
    \ and \"TheMatrIX\" (without\n   quotes) respectively before and after OpaqueString\
    \ [RFC8265]\n   processing\n   Nonce: \"obMatJos2AAACf//499k954d6OL34oL9FSTvy64sA\"\
    \ (without quotes)\n   Realm: \"example.org\" (without quotes)\n        00 01\
    \ 00 9c      Request type and message length\n        21 12 a4 42      Magic cookie\n\
    \        78 ad 34 33   }\n        c6 ad 72 c0   }  Transaction ID\n        29\
    \ da 41 2e   }\n        00 1e 00 20      USERHASH attribute header\n        4a\
    \ 3c f3 8f   }\n        ef 69 92 bd   }\n        a9 52 c6 78   }\n        04 17\
    \ da 0f   }  Userhash value (32 bytes)\n        24 81 94 15   }\n        56 9e\
    \ 60 b2   }\n        05 c4 6e 41   }\n        40 7f 17 04   }\n        00 15 00\
    \ 29      NONCE attribute header\n        6f 62 4d 61   }\n        74 4a 6f 73\
    \   }\n        32 41 41 41   }\n        43 66 2f 2f   }\n        34 39 39 6b \
    \  }  Nonce value and padding (3 bytes)\n        39 35 34 64   }\n        36 4f\
    \ 4c 33   }\n        34 6f 4c 39   }\n        46 53 54 76   }\n        79 36 34\
    \ 73   }\n        41 00 00 00   }\n        00 14 00 0b      REALM attribute header\n\
    \        65 78 61 6d   }\n        70 6c 65 2e   }  Realm value (11 bytes) and\
    \ padding (1 byte)\n        6f 72 67 00   }\n        00 1c 00 20      MESSAGE-INTEGRITY-SHA256\
    \ attribute header\n        e4 68 6c 8f   }\n        0e de b5 90   }\n       \
    \ 13 e0 70 90   }\n        01 0a 93 ef   }  HMAC-SHA256 value\n        cc bc cc\
    \ 54   }\n        4c 0a 45 d9   }\n        f8 30 aa 6d   }\n        6f 73 5a 01\
    \   }\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Michael Tuexen, Tirumaleswar Reddy, Oleg Moskalenko,\
    \ Simon\n   Perreault, Benjamin Schwartz, Rifaat Shekh-Yusef, Alan Johnston,\n\
    \   Jonathan Lennox, Brandon Williams, Olle Johansson, Martin Thomson,\n   Mihaly\
    \ Meszaros, Tolga Asveren, Noriyuki Torii, Spencer Dawkins, Dale\n   Worley, Matthew\
    \ Miller, Peter Saint-Andre, Julien Elie, Mirja\n   Kuehlewind, Eric Rescorla,\
    \ Ben Campbell, Adam Roach, Alexey Melnikov,\n   and Benjamin Kaduk for the comments,\
    \ suggestions, and questions that\n   helped improve this document.\n   The Acknowledgements\
    \ section of RFC 5389 appeared as follows:\n   The authors would like to thank\
    \ Cedric Aoun, Pete Cordell, Cullen\n   Jennings, Bob Penfield, Xavier Marjou,\
    \ Magnus Westerlund, Miguel\n   Garcia, Bruce Lowekamp, and Chris Sullivan for\
    \ their comments, and\n   Baruch Sterman and Alan Hawrylyshen for initial implementations.\n\
    \   Thanks for Leslie Daigle, Allison Mankin, Eric Rescorla, and Henning\n   Schulzrinne\
    \ for IESG and IAB input on this work.\n"
- title: Contributors
  contents:
  - "Contributors\n   Christian Huitema and Joel Weinberger were original coauthors\
    \ of\n   RFC 3489.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marc Petit-Huguenin\n   Impedance Mismatch\n   Email:\
    \ marc@petit-huguenin.org\n   Gonzalo Salgueiro\n   Cisco\n   7200-12 Kit Creek\
    \ Road\n   Research Triangle Park, NC  27709\n   United States of America\n  \
    \ Email: gsalguei@cisco.com\n   Jonathan Rosenberg\n   Five9\n   Edison, NJ\n\
    \   United States of America\n   Email: jdrosen@jdrosen.net\n   URI:   http://www.jdrosen.net\n\
    \   Dan Wing\n   Citrix Systems, Inc.\n   United States of America\n   Email:\
    \ dwing-ietf@fuggles.com\n   Rohan Mahy\n   Unaffiliated\n   Email: rohan.ietf@gmail.com\n\
    \   Philip Matthews\n   Nokia\n   600 March Road\n   Ottawa, Ontario  K2K 2T6\n\
    \   Canada\n   Phone: 613-784-3139\n   Email: philip_matthews@magma.ca\n"
