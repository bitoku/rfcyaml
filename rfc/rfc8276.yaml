- title: __initial_text__
  contents:
  - '                File System Extended Attributes in NFSv4

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an optional feature extending the NFSv4\n\
    \   protocol.  This feature allows extended attributes (hereinafter also\n   referred\
    \ to as xattrs) to be interrogated and manipulated using NFSv4\n   clients.  Xattrs\
    \ are provided by a file system to associate opaque\n   metadata, not interpreted\
    \ by the file system, with files and\n   directories.  Such support is present\
    \ in many modern local file\n   systems.  New file attributes are provided to\
    \ allow clients to query\n   the server for xattr support, with that support consisting\
    \ of new\n   operations to get and set xattrs on file system objects.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8276.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   2.  Uses of Extended Attributes . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Functional Gaps Due to Lack of NFSv4 Extended Attribute\n\
    \       Support . . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n  \
    \ 4.  File System Support for Extended Attributes . . . . . . . . .   6\n   5.\
    \  Namespaces  . . . . . . . . . . . . . . . . . . . . . . . . .   7\n   6.  Relationship\
    \ with Named Attributes  . . . . . . . . . . . . .   7\n   7.  XDR Description\
    \ . . . . . . . . . . . . . . . . . . . . . . .   8\n     7.1.  Code Components\
    \ Licensing Notice  . . . . . . . . . . . .   9\n     7.2.  XDR for Xattr Extension\
    \ . . . . . . . . . . . . . . . . .  11\n   8.  Protocol Extensions . . . . .\
    \ . . . . . . . . . . . . . . . .  11\n     8.1.  New Definitions . . . . . .\
    \ . . . . . . . . . . . . . . .  11\n     8.2.  New Attribute . . . . . . . .\
    \ . . . . . . . . . . . . . .  12\n       8.2.1.  xattr_support . . . . . . .\
    \ . . . . . . . . . . . . .  12\n     8.3.  New Error Definitions . . . . . .\
    \ . . . . . . . . . . . .  12\n       8.3.1.  NFS4ERR_NOXATTR (Error Code 10095)\
    \  . . . . . . . . .  12\n       8.3.2.  NFS4ERR_XATTR2BIG (Error Code 10096)\
    \  . . . . . . . .  13\n     8.4.  New Operations  . . . . . . . . . . . . . .\
    \ . . . . . . .  13\n       8.4.1.  GETXATTR - Get an Extended Attribute of a\
    \ File  . . .  14\n       8.4.2.  SETXATTR - Set an Extended Attribute of a File\
    \  . . .  15\n       8.4.3.  LISTXATTRS - List Extended Attributes of a File .\
    \ . .  17\n       8.4.4.  REMOVEXATTR - Remove an Extended Attribute of a File\
    \   18\n       8.4.5.  Valid Errors  . . . . . . . . . . . . . . . . . . . . \
    \ 19\n     8.5.  Modifications to Existing Operations  . . . . . . . . . .  21\n\
    \     8.6.  Numeric Values Assigned to Protocol Extensions  . . . . .  22\n  \
    \   8.7.  Caching . . . . . . . . . . . . . . . . . . . . . . . . .  23\n    \
    \ 8.8.  Xattrs and File Locking . . . . . . . . . . . . . . . . .  25\n     8.9.\
    \  pNFS Considerations . . . . . . . . . . . . . . . . . . .  25\n   9.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  25\n   10. IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  25\n   11. References  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  26\n     11.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  26\n     11.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  27\n   Acknowledgments . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  28\n   Authors' Addresses  . . . . . . . .\
    \ . . . . . . . . . . . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Extended attributes, also called xattrs, are a means to\
    \ associate\n   opaque metadata with file system objects, organized as key/value\n\
    \   pairs.  They are especially useful when they add information that is\n   not,\
    \ or cannot be, present in the associated object itself.  User-\n   space applications\
    \ can arbitrarily create, interrogate, and modify\n   the key/value pairs.\n \
    \  Extended attributes are file system agnostic; applications use an\n   interface\
    \ not specific to any file system to manipulate them.\n   Applications are not\
    \ concerned about how the key/value pairs are\n   stored internally within the\
    \ underlying file system.  All major\n   operating systems provide facilities\
    \ to access and modify extended\n   attributes.  Many user-space tools allow xattrs\
    \ to be included\n   together with regular attributes that need to be preserved\
    \ when\n   objects are updated, moved, or copied.\n   Extended attributes have\
    \ not previously been included within the\n   NFSv4 specification.  Some issues\
    \ that need to be addressed in order\n   to be included are that, as with named\
    \ attributes, some aspects of\n   the handling of xattrs are not precisely defined\
    \ and xattrs are not\n   formally documented by any standard such as POSIX [POSIX].\n\
    \   Nevertheless, it appears that xattrs are widely deployed, and their\n   support\
    \ in modern disk-based file systems is nearly universal.\n   There is no current\
    \ specification of how xattrs could be mapped to\n   any existing file attributes\
    \ defined in the NFSv4 protocol [RFC5661]\n   [RFC7530] [RFC7862].  As a result,\
    \ most NFSv4 client implementations\n   ignore application-specified xattrs. \
    \ This state of affairs results\n   in data loss if one copies, over the NFSv4\
    \ protocol, a file with\n   xattrs from one file system to another that also supports\
    \ xattrs.\n   There is thus a need to provide a means by which such data loss\
    \ can\n   be avoided.  This will involve exposing xattrs within the NFSv4\n  \
    \ protocol, despite the lack of completely compatible file system\n   implementations.\n\
    \   This document discusses (in Section 5) the reasons that NFSv4-named\n   attributes,\
    \ as currently standardized in [RFC5661], are unsuitable\n   for representing\
    \ xattrs.  Instead, it describes a separate protocol\n   mechanism to support\
    \ xattrs.  As a consequence, xattrs and named\n   attributes will both be OPTIONAL\
    \ features with servers free to\n   support either, both, or neither.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  Uses of Extended Attributes
  contents:
  - "2.  Uses of Extended Attributes\n   Applications can store tracking information\
    \ in extended attributes.\n   Examples include storing metadata identifying the\
    \ application that\n   created the file, a tag to indicate when the file was last\
    \ verified\n   by a data integrity scrubber, or a tag to hold a checksum/crypto\
    \ hash\n   of the file contents along with the date of that signature.  Xattrs\n\
    \   can also be used for decorations or annotations.  For example, a file\n  \
    \ downloaded from a web server can be tagged with the URL, which can be\n   convenient\
    \ if its source has to be determined in the future.\n   Likewise, an email attachment,\
    \ when saved, can be tagged with the\n   message-id of the email, making it possible\
    \ to trace the original\n   message.\n   Applications may need to behave differently\
    \ when handling files of\n   varying types.  For example, file managers, such\
    \ as GNOMEs, offer\n   unique icons, different click behavior, and special lists\
    \ of\n   operations to perform depending on the file format.  This can be\n  \
    \ achieved by looking at the file extension (Windows), or the type can\n   be\
    \ interpreted by inspecting it (Unix MIME type).  Some file managers\n   generate\
    \ this information on the fly; others generate the information\n   once and then\
    \ cache it.  Those that cache the information tend to put\n   it in a custom database.\
    \  The file manager must work to keep this\n   database in sync with the files,\
    \ which can change without the file\n   manager's knowledge.  A better approach\
    \ is to dispense with the\n   custom database and store such metadata in extended\
    \ attributes.  This\n   is easier to maintain, provides faster access, and is\
    \ readily\n   accessible by applications [Love].\n"
- title: 3.  Functional Gaps Due to Lack of NFSv4 Extended Attribute Support
  contents:
  - "3.  Functional Gaps Due to Lack of NFSv4 Extended Attribute Support\n   In addition\
    \ to the prospect of data loss (discussed in Section 1)\n   that arises from use\
    \ of xattrs on local file systems, application use\n   of xattrs poses further\
    \ difficulties given the current lack of xattr\n   support within NFSv4.  As a\
    \ result, certain applications may not be\n   supported by NFSv4 or may be supported\
    \ in an unsatisfactory way.\n   Some examples are discussed below.\n   Swift,\
    \ the OpenStack distributed object store, uses xattrs to store\n   an object's\
    \ metadata along with all the data together in one file.\n   Swift-on-File [Swift]\
    \ transfers the responsibility of maintaining\n   object durability and availability\
    \ to the underlying file system.  At\n   the time of writing, this requires a\
    \ native file system client to\n   mount the volumes.  Xattr support in NFSv4\
    \ would open up the\n   possibility of storing and consuming data from other storage\
    \ systems\n   and facilitate the migration of data between different backend\n\
    \   storage systems.\n   Baloo, the file indexing and search framework for Key\
    \ Distribution\n   Exchange (KDE), has moved to storing metadata such as tags,\
    \ ratings,\n   and comments in file system xattrs instead of a custom database\
    \ for\n   simplicity.  Starting with KDE Plasma 5.1, NFS is no longer supported\n\
    \   due to its lack of xattr support [KDE].\n"
- title: 4.  File System Support for Extended Attributes
  contents:
  - "4.  File System Support for Extended Attributes\n   Extended attributes are supported\
    \ by most modern file systems.\n   Some of the file systems that support extended\
    \ attributes in Linux\n   are as follows: ext3, ext4, JFS, XFS, and Btrfs.  The\
    \ getfattr and\n   setfattr utilities can be used to retrieve and set xattrs.\
    \  The names\n   of the extended attributes must be prefixed by the name of the\n\
    \   category and a dot; hence, these categories are generally qualified\n   as\
    \ namespaces.  Currently, four namespaces exist: user, trusted,\n   security,\
    \ and system [Linux].  Recommendations on how they should be\n   used have been\
    \ published [freedesktop].\n   FreeBSD supports extended attributes in two universal\
    \ namespaces --\n   user and system -- although individual file systems are allowed\
    \ to\n   implement additional namespaces [FreeBSD].\n   Some file systems have\
    \ facilities that are capable of storing both\n   extended attributes and named\
    \ attributes.  For discussion regarding\n   the relationship between these features,\
    \ see Section 5.  Solaris 9\n   and later provide file \"forks\", logically represented\
    \ as files within\n   a hidden directory that is associated with the target file\
    \ [fsattr].\n   In the New Technology File System (NTFS), extended attributes\
    \ may be\n   stored within \"file streams\" [NTFS].\n   Xattrs can be retrieved\
    \ and set through system calls or shell\n   commands and are generally supported\
    \ by user-space tools that\n   preserve other file attributes.  For example, the\
    \ \"rsync\" remote copy\n   program will correctly preserve user-extended attributes\
    \ between\n   Linux/ext4 and OSX/hfs by stripping off the Linux-specific \"user.\"\
    \n   prefix.\n"
- title: 5.  Namespaces
  contents:
  - "5.  Namespaces\n   Operating systems may define multiple \"namespaces\" in which\
    \ xattrs\n   can be set.  Namespaces are more than organizational classes; the\n\
    \   operating system may enforce different access policies and allow\n   different\
    \ capabilities depending on the namespace.  Linux, for\n   example, defines \"\
    security\", \"system\", \"trusted\", and \"user\"\n   namespaces, the first three\
    \ being specific to Linux [freedesktop].\n   Implementations generally agree on\
    \ the semantics of a \"user\"\n   namespace, which allows applications to store\
    \ arbitrary user\n   attribute data with file system objects.  Access to this\
    \ namespace is\n   controlled via the normal file system attributes.  As such,\
    \ getting\n   and setting xattrs from the user namespace can be considered\n \
    \  interoperable across platforms and vendor implementations.\n   Attributes from\
    \ other namespaces are typically platform specific.\n   This document provides\
    \ support for namespaces related to user-managed\n   metadata only, thus avoiding\
    \ the need to specify the semantics\n   applicable to particular system-interpreted\
    \ xattrs.  The values of\n   xattrs are considered application data just as the\
    \ contents of named\n   attributes, files, and symbolic links are.  Servers have\
    \ a\n   responsibility to store whatever value the client specifies and to\n \
    \  return it on demand.  Xattr keys and values MUST NOT be interpreted\n   by\
    \ the NFS clients and servers, as such behavior would lead to\n   non-interoperable\
    \ implementations.  If there were a need to specify\n   one or more attributes\
    \ that servers need to act upon, the appropriate\n   semantics would be specified\
    \ by adding a new attribute for the\n   purpose as provided for by [RFC5661] and\
    \ [RFC8178].\n"
- title: 6.  Relationship with Named Attributes
  contents:
  - "6.  Relationship with Named Attributes\n   [RFC7530] defines named attributes\
    \ as opaque byte streams that are\n   associated with a directory or file and\
    \ referred to by a string name.\n   Named attributes are intended to be used by\
    \ client applications as a\n   method to associate application-specific data with\
    \ a regular file or\n   directory.  Although this makes xattrs similar in concept\
    \ and use to\n   named attributes, there are important semantic differences.\n\
    \   File systems typically define operations to get and set individual\n   xattrs\
    \ as being atomic, although collectively they may be\n   independent.  Xattrs\
    \ generally have size limits ranging from a few\n   bytes to several kilobytes;\
    \ the maximum supported size is not\n   universally defined and is usually restricted\
    \ by the file system.\n   Similar to Access Control Lists (ACLs), the amount of\
    \ xattr data\n   exchanged between the client and server for get/set operations\
    \ can be\n   considered to fit in a single COMPOUND request, bounded by the\n\
    \   channel's negotiated maximum size for requests.  Named attributes, on\n  \
    \ the other hand, are unbounded data streams and do not impose\n   atomicity requirements.\n\
    \   Individual named attributes are analogous to files and are opened and\n  \
    \ closed just as files are.  Caching of the data for these needs to be\n   handled\
    \ just as data caching is for ordinary files following\n   close-to-open semantics.\
    \  Xattrs, on the other hand, have caching\n   requirements similar to other file\
    \ attributes.\n   Named attributes and xattrs have different semantics and are\
    \ treated\n   by applications as belonging to disjoint namespaces.  As a result,\n\
    \   mapping from one to the other would be, at best, a compromise.\n   Despite\
    \ these differences, the underlying file system structure used\n   to store named\
    \ attributes is generally capable of storing xattrs.\n   However, the converse\
    \ is typically not the case because of the size\n   limits applicable to xattrs.\n\
    \   While it might be possible to write guidance about how a client can\n   use\
    \ the named attribute mechanism to act like xattrs, such as by\n   carving out\
    \ some namespace and specifying locking primitives to\n   enforce atomicity constraints\
    \ on individual get/set operations, such\n   an approach is sufficiently problematic;\
    \ thus, it will not be\n   attempted here.  A client application trying to use\
    \ xattrs through\n   named attributes with a server that supported xattrs directly\
    \ would\n   get a lower level of service and could fail to cooperate on a local\n\
    \   application running on the server unless the server file system\n   defined\
    \ its own interoperability constraints.  File systems that\n   already implement\
    \ xattrs and named attributes natively would need\n   additional guidance such\
    \ as reserving a named attribute namespace\n   specifically for implementation\
    \ purposes.\n"
- title: 7.  XDR Description
  contents:
  - "7.  XDR Description\n   This document contains the External Data Representation\
    \ (XDR)\n   [RFC4506] description of the extended attributes.  The XDR\n   description\
    \ is embedded in this document in a way that makes it\n   simple for the reader\
    \ to extract into a ready-to-compile form.  The\n   reader can feed this document\
    \ into the following shell script to\n   produce the machine-readable XDR description\
    \ of extended attributes:\n   <CODE BEGINS>\n   #! /bin/sh\n   grep '^ *///' $*\
    \ | sed 's?^ */// ??' | sed 's?^ *///$??'\n   <CODE ENDS>\n   That is, if the\
    \ above script is stored in a file called \"extract.sh\",\n   and this document\
    \ is in a file called \"spec.txt\", then the reader can\n   do:\n   sh extract.sh\
    \ < spec.txt > xattr_prot.x\n   The effect of the script is to remove leading\
    \ white space from each\n   line, plus a sentinel sequence of \"///\".\n   The\
    \ initial section of the embedded XDR file header follows.\n   Subsequent XDR\
    \ descriptions, with the sentinel sequence, are embedded\n   throughout the document.\n\
    \   Note that the XDR code contained in this document depends on types\n   from\
    \ the NFSv4.2 nfs4_prot.x file [RFC7863].  This includes both nfs\n   types that\
    \ end with a 4, such as nfs_cookie4, count4, etc., as well\n   as more-generic\
    \ types, such as opaque and bool.\n   To produce a compilable XDR file, the following\
    \ procedure is\n   suggested:\n   o  Extract the file nfs4_prot.x as described\
    \ in [RFC7863].\n   o  Extract xattr_prot.x from this document as described above.\n\
    \   o  Apply any changes required for other extensions to be included\n      together\
    \ with the xattr extension.\n   o  Perform modifications to nfs4_prot.x as described\
    \ by comments\n      within xattr_prot.x.\n   o  Extend the unions nfs_argop4\
    \ and nfs_resop4 to include cases for\n      the new operations defined in this\
    \ document.\n   o  Combine the XDR files for the base NFSv4.2 protocol and all\
    \ needed\n      extensions by either concatenating the relevant XDR files or using\n\
    \      file inclusion.\n"
- title: 7.1.  Code Components Licensing Notice
  contents:
  - "7.1.  Code Components Licensing Notice\n   Both the XDR description and the scripts\
    \ used for extracting the XDR\n   description are Code Components as described\
    \ in \"Legal Provisions\n   Relating to IETF Documents\", Section 4 of [LEGAL].\
    \  These Code\n   Components are licensed according to the terms of that document.\n\
    \      <CODE BEGINS>\n      /// /*\n      ///  * Copyright (c) 2017 IETF Trust\
    \ and the persons identified\n      ///  * as authors of the code.  All rights\
    \ reserved.\n      ///  *\n      ///  * Redistribution and use in source and binary\
    \ forms, with\n      ///  * or without modification, are permitted provided that\
    \ the\n      ///  * following conditions are met:\n      ///  *\n      ///  *\
    \ o Redistributions of source code must retain the above\n      ///  *   copyright\
    \ notice, this list of conditions and the\n      ///  *   following disclaimer.\n\
    \      ///  *\n      ///  * o Redistributions in binary form must reproduce the\
    \ above\n      ///  *   copyright notice, this list of conditions and the\n  \
    \    ///  *   following disclaimer in the documentation and/or other\n      ///\
    \  *   materials provided with the distribution.\n      ///  *\n      ///  * o\
    \ Neither the name of Internet Society, IETF or IETF\n      ///  *   Trust, nor\
    \ the names of specific contributors, may be\n      ///  *   used to endorse or\
    \ promote products derived from this\n      ///  *   software without specific\
    \ prior written permission.\n      ///  *\n      ///  *   THIS SOFTWARE IS PROVIDED\
    \ BY THE COPYRIGHT HOLDERS\n      ///  *   AND CONTRIBUTORS \"AS IS\" AND ANY\
    \ EXPRESS OR IMPLIED\n      ///  *   WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\
    \ THE\n      ///  *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n    \
    \  ///  *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n      ///  *   EVENT\
    \ SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n      ///  *   LIABLE FOR ANY\
    \ DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n      ///  *   EXEMPLARY, OR CONSEQUENTIAL\
    \ DAMAGES (INCLUDING, BUT\n      ///  *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\
    \ GOODS OR\n      ///  *   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\
    \      ///  *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n      /// \
    \ *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n      ///  *   OR TORT\
    \ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n      ///  *   IN ANY WAY OUT OF\
    \ THE USE OF THIS SOFTWARE, EVEN IF\n      ///  *   ADVISED OF THE POSSIBILITY\
    \ OF SUCH DAMAGE.\n      ///  *\n      ///  * This code was derived from RFC 8276.\n\
    \      ///  * Please reproduce this note if possible.\n      ///  */\n      <CODE\
    \ ENDS>\n"
- title: 7.2.  XDR for Xattr Extension
  contents:
  - "7.2.  XDR for Xattr Extension\n     <CODE BEGINS>\n     /// /*\n     ///  * xattr_prot.x\n\
    \     ///  */\n     /// /*\n     ///  * The following includes statements that\
    \ are for example only.\n     ///  * The actual XDR definition files are generated\
    \ separately\n     ///  * and independently and are likely to have a different\
    \ name.\n     ///  * %#include <rpc_prot.x>\n     ///  * %#include <nfsv42.x>\n\
    \     ///  */\n     <CODE ENDS>\n"
- title: 8.  Protocol Extensions
  contents:
  - "8.  Protocol Extensions\n   This section documents extensions to the NFSv4 protocol\
    \ operations to\n   allow xattrs to be queried and modified by clients.  A new\
    \ attribute\n   is added to allow clients to determine if the file system being\n\
    \   accessed provides support for xattrs.  New operations are defined to\n   allow\
    \ xattr keys and values to be queried and set.  In addition, the\n   ACCESS operation\
    \ is extended by adding new mask bits to provide\n   access information relating\
    \ to xattrs.\n   These changes follow applicable guidelines for valid NFSv4 XDR\n\
    \   protocol extension, as specified in [RFC8178], and obey the rules for\n  \
    \ extensions capable of being made without a change in minor version\n   number.\n"
- title: 8.1.  New Definitions
  contents:
  - "8.1.  New Definitions\n      <CODE BEGINS>\n      /// typedef component4    \
    \ xattrkey4;\n      /// typedef opaque         xattrvalue4<>;\n      <CODE ENDS>\n\
    \   Each xattr is a key/value pair.  xattrkey4 is a string denoting the\n   xattr\
    \ key name and an attrvalue4, which is a variable-length string\n   that identifies\
    \ the value of the xattr.  The handling of xattrkey4\n   with regard to internationalization-related\
    \ issues is the same as\n   that for NFSv4 file names and named attribute names,\
    \ as described in\n   [RFC7530].  Any regular file or directory may have a set\
    \ of extended\n   attributes, each consisting of a key and associated value. \
    \ The NFS\n   client or server MUST NOT interpret the contents of xattrkey4 or\n\
    \   xattrvalue4.\n"
- title: 8.2.  New Attribute
  contents:
  - "8.2.  New Attribute\n   The per-fs read-only attribute described below may be\
    \ used to\n   determine if xattrs are supported.  Servers need not support this\n\
    \   attribute, and some NFSv4.2 servers may be unaware of its existence.\n   Before\
    \ interrogating this attribute using GETATTR, a client should\n   determine whether\
    \ it is a supported attribute by interrogating the\n   supported_attrs attribute.\n"
- title: 8.2.1.  xattr_support
  contents:
  - "8.2.1.  xattr_support\n   xattr_support is set to True, if the object's file\
    \ system supports\n   extended attributes.\n   Since xattr_support is not a REQUIRED\
    \ attribute, the server need not\n   support it.  However, a client may reasonably\
    \ assume that a server\n   (or file system) that does not support the xattr_support\
    \ attribute\n   does not provide xattr support, and it acts on that basis.\n \
    \  Note that the protocol does not enforce any limits on the number of\n   keys,\
    \ the length of a key, the size of a value, or the total size of\n   xattrs that\
    \ are allowed for a file.  The server file system MAY\n   impose additional limits.\
    \  In addition, a single xattr key or value\n   exchanged between the client and\
    \ server for get/set operations is\n   limited by the channel's negotiated maximum\
    \ size for requests and\n   responses.\n"
- title: 8.3.  New Error Definitions
  contents:
  - "8.3.  New Error Definitions\n   <CODE BEGINS>\n   /// /* Following lines are\
    \ to be added to enum nfsstat4 */\n   /// /*\n   ///  NFS4ERR_NOXATTR        =\
    \ 10095, /* xattr does not exist    */\n   ///  NFS4ERR_XATTR2BIG      = 10096\
    \  /* xattr value is too big  */\n   /// */\n   <CODE ENDS>\n"
- title: 8.3.1.  NFS4ERR_NOXATTR (Error Code 10095)
  contents:
  - "8.3.1.  NFS4ERR_NOXATTR (Error Code 10095)\n   The specified xattr does not exist\
    \ or the server is unable to\n   retrieve it.\n"
- title: 8.3.2.  NFS4ERR_XATTR2BIG (Error Code 10096)
  contents:
  - "8.3.2.  NFS4ERR_XATTR2BIG (Error Code 10096)\n   The size of the xattr value\
    \ specified as part of a SETXATTR\n   operation, or the collective size of all\
    \ xattrs of the file resulting\n   from the SETXATTR operation, is bigger than\
    \ that supported by the\n   underlying file system.\n"
- title: 8.4.  New Operations
  contents:
  - "8.4.  New Operations\n   Applications need to perform the following operations\
    \ on a given\n   file's extended attributes [Love]:\n   o  Given a file, return\
    \ a list of all of the file's assigned extended\n      attribute keys.\n   o \
    \ Given a file and a key, return the corresponding value.\n   o  Given a file,\
    \ a key, and a value, assign that value to the key.\n   o  Given a file and a\
    \ key, remove that extended attribute from the\n      file.\n   In order to meet\
    \ these requirements, this section introduces four new\n   OPTIONAL operations:\
    \ GETXATTR, SETXATTR, LISTXATTRS and REMOVEXATTR.\n   These operations are to\
    \ query, set, list, and remove xattrs,\n   respectively.  A server MUST support\
    \ all four operations when they\n   are directed to a file system that supports\
    \ the xattr_support\n   attribute and returns TRUE when it is interrogated.  For\
    \ file systems\n   that either do not support the xattr_support attribute or return\n\
    \   FALSE when the xattr_support attribute is interrogated, all of the\n   above\
    \ operations MUST NOT be supported.  GETXATTR allows obtaining\n   the value of\
    \ an xattr key, SETXATTR allows creating or replacing an\n   xattr key with a\
    \ value, LISTXATTRS enumerates all the xattrs names,\n   and REMOVEXATTR allows\
    \ deleting a single xattr.\n   Note that some server implementations may not be\
    \ aware of the\n   existence of these operations, thereby a client cannot always\
    \ expect\n   that issuing one of them will either succeed or return\n   NFS4ERR_NOTSUPP.\
    \  In some cases, NFS4ERR_OP_ILLEGAL may be returned\n   or the request may encounter\
    \ an XDR decode error on the server.  As a\n   result, clients should only issue\
    \ these operations after determining\n   that support is present.\n"
- title: 8.4.1.  GETXATTR - Get an Extended Attribute of a File
  contents:
  - '8.4.1.  GETXATTR - Get an Extended Attribute of a File

    '
- title: 8.4.1.1.  ARGUMENTS
  contents:
  - "8.4.1.1.  ARGUMENTS\n   <CODE BEGINS>\n   /// struct GETXATTR4args {\n   ///\
    \         /* CURRENT_FH: file */\n   ///         xattrkey4     gxa_name;\n   ///\
    \ };\n   <CODE ENDS>\n"
- title: 8.4.1.2.  RESULTS
  contents:
  - "8.4.1.2.  RESULTS\n   <CODE BEGINS>\n   /// union GETXATTR4res switch (nfsstat4\
    \ gxr_status) {\n   ///  case NFS4_OK:\n   ///         xattrvalue4   gxr_value;\n\
    \   ///  default:\n   ///         void;\n   /// };\n   <CODE ENDS>\n"
- title: 8.4.1.3.  DESCRIPTION
  contents:
  - "8.4.1.3.  DESCRIPTION\n   The GETXATTR operation will obtain the value for the\
    \ given extended\n   attribute key for the file system object specified by the\
    \ current\n   filehandle.\n   The server will fetch the xattr value for the key\
    \ that the client\n   requests if xattrs are supported by the server for the target\
    \ file\n   system.  If the server does not support xattrs on the target file\n\
    \   system, then it MUST NOT return a value and MUST return the\n   NFS4ERR_NOTSUPP\
    \ error or another error indicating the request was not\n   understood.  The server\
    \ also MUST return NFS4ERR_NOXATTR if it\n   supports xattrs on the target but\
    \ cannot obtain the requested data.\n   If the xattr value contained in the server\
    \ response is such as to\n   cause the channel's negotiated maximum response size\
    \ to be exceeded,\n   then the server MUST return NFS4ERR_REP_TOO_BIG in gxr_status.\n"
- title: 8.4.1.4.  IMPLEMENTATION
  contents:
  - "8.4.1.4.  IMPLEMENTATION\n   Clients that have cached an xattr may avoid the\
    \ need to do a GETXATTR\n   by determining if the change attribute is the same\
    \ as it was when the\n   xattr was fetched.  If the client does not hold a delegation\
    \ for the\n   file in question, it can obtain the change attribute with a GETATTR\n\
    \   request and compare that change attribute's value to the change\n   attribute\
    \ value fetched when the xattr value was obtained.  This\n   handling is similar\
    \ to how a client would revalidate other file\n   attributes such as ACLs.\n \
    \  When responding to such a GETATTR, the server will, if there is an\n   OPEN_DELEGATE_WRITE\
    \ delegation held by another client for the file in\n   question, either obtain\
    \ the actual current value of these attributes\n   from the client holding the\
    \ delegation by using the CB_GETATTR\n   callback or revoke the delegation.  See\
    \ Section 18.7.4 of [RFC5661]\n   for details.\n"
- title: 8.4.2.  SETXATTR - Set an Extended Attribute of a File
  contents:
  - '8.4.2.  SETXATTR - Set an Extended Attribute of a File

    '
- title: 8.4.2.1.  ARGUMENTS
  contents:
  - "8.4.2.1.  ARGUMENTS\n   <CODE BEGINS>\n   /// enum setxattr_option4 {\n   ///\
    \         SETXATTR4_EITHER      = 0,\n   ///         SETXATTR4_CREATE      = 1,\n\
    \   ///         SETXATTR4_REPLACE     = 2\n   /// };\n   /// struct SETXATTR4args\
    \ {\n   ///         /* CURRENT_FH: file */\n   ///         setxattr_option4 sxa_option;\n\
    \   ///         xattrkey4        sxa_key;\n   ///         xattrvalue4      sxa_value;\n\
    \   /// };\n   <CODE ENDS>\n"
- title: 8.4.2.2.  RESULTS
  contents:
  - "8.4.2.2.  RESULTS\n   <CODE BEGINS>\n   /// union SETXATTR4res switch (nfsstat4\
    \ sxr_status) {\n   ///  case NFS4_OK:\n   ///         change_info4      sxr_info;\n\
    \   ///  default:\n   ///         void;\n   /// };\n   <CODE ENDS>\n"
- title: 8.4.2.3.  DESCRIPTION
  contents:
  - "8.4.2.3.  DESCRIPTION\n   The SETXATTR operation changes one extended attribute\
    \ of a file\n   system object.  The change desired is specified by sxa_option.\n\
    \   SETXATTR4_CREATE is used to associate the given value with the given\n   extended\
    \ attribute key for the file system object specified by the\n   current filehandle.\
    \  The server MUST return NFS4ERR_EXIST if the\n   attribute key already exists.\
    \  SETXATTR4_REPLACE is also used to set\n   an xattr, but the server MUST return\
    \ NFS4ERR_NOXATTR if the attribute\n   key does not exist.  By default (SETXATTR4_EITHER),\
    \ the extended\n   attribute will be created if need be, or its value will be\
    \ replaced\n   if the attribute exists.\n   If the xattr key and value contained\
    \ in the client request are such\n   that the request would exceed the channel's\
    \ negotiated maximum\n   request size, then the server MUST return NFS4ERR_REQ_TOO_BIG\
    \ in\n   sxr_status.  If the server file system imposes additional limits on\n\
    \   the size of the key name or value, it MAY return NFS4ERR_XATTR2BIG.\n   A\
    \ successful SETXATTR MUST change the file time_metadata and change\n   attributes\
    \ if the xattr is created or the value assigned to xattr\n   changes.  However,\
    \ it is not necessary to change these attributes if\n   there has been no actual\
    \ change in the xattr value.  Avoiding\n   attribute change in such situations\
    \ is desirable as it avoids\n   unnecessary cache invalidation.\n   On success,\
    \ the server returns the change_info4 information in\n   sxr_info.  With the atomic\
    \ field of the change_info4 data type, the\n   server will indicate if the before\
    \ and after change attributes were\n   obtained atomically with respect to the\
    \ SETXATTR operation.  This\n   allows the client to determine if its cached xattrs\
    \ are still valid\n   after the operation.  See Section 8.7 for a discussion on\
    \ xattr\n   caching.\n"
- title: 8.4.2.4.  IMPLEMENTATION
  contents:
  - "8.4.2.4.  IMPLEMENTATION\n   If the object whose xattr is being changed has a\
    \ file delegation that\n   is held by a client other than the one doing the SETXATTR,\
    \ the\n   delegation(s) must be recalled, and the operation cannot proceed to\n\
    \   actually change the xattr until each such delegation is returned or\n   revoked.\
    \  In all cases in which delegations are recalled, the server\n   is likely to\
    \ return one or more NFS4ERR_DELAY errors while the\n   delegation(s) remains\
    \ outstanding, although it might not do that if\n   the delegations are returned\
    \ quickly.\n"
- title: 8.4.3.  LISTXATTRS - List Extended Attributes of a File
  contents:
  - '8.4.3.  LISTXATTRS - List Extended Attributes of a File

    '
- title: 8.4.3.1.  ARGUMENTS
  contents:
  - "8.4.3.1.  ARGUMENTS\n   <CODE BEGINS>\n   /// struct LISTXATTRS4args {\n   ///\
    \         /* CURRENT_FH: file */\n   ///         nfs_cookie4    lxa_cookie;\n\
    \   ///         count4         lxa_maxcount;\n   /// };\n   <CODE ENDS>\n"
- title: 8.4.3.2.  RESULTS
  contents:
  - "8.4.3.2.  RESULTS\n   <CODE BEGINS>\n   /// struct LISTXATTRS4resok {\n   ///\
    \         nfs_cookie4    lxr_cookie;\n   ///         xattrkey4      lxr_names<>;\n\
    \   ///         bool           lxr_eof;\n   /// };\n   /// union LISTXATTRS4res\
    \ switch (nfsstat4 lxr_status) {\n   ///  case NFS4_OK:\n   ///         LISTXATTRS4resok\
    \  lxr_value;\n   ///  default:\n   ///         void;\n   /// };\n   <CODE ENDS>\n"
- title: 8.4.3.3.  DESCRIPTION
  contents:
  - "8.4.3.3.  DESCRIPTION\n   The LISTXATTRS operation retrieves a variable number\
    \ of extended\n   attribute keys from the file system object specified by the\
    \ current\n   filehandle, along with information to allow the client to request\n\
    \   additional attribute keys in a subsequent LISTXATTRS.\n   The arguments contain\
    \ a cookie value that represents where the\n   LISTXATTRS should start within\
    \ the list of xattrs.  A value of 0\n   (zero) for lxa_cookie is used to start\
    \ reading at the beginning of\n   the list.  For subsequent LISTXATTRS requests,\
    \ the client specifies a\n   cookie value that is provided by the server on a\
    \ previous LISTXATTRS\n   request.\n   The lxa_maxcount value of the argument\
    \ is the maximum number of bytes\n   for the result.  This maximum size represents\
    \ all of the data being\n   returned within the LISTXATTRS4resok structure and\
    \ includes the XDR\n   overhead.  The server may return less data.  If the server\
    \ is unable\n   to return a single xattr name within the maxcount limit, the error\n\
    \   NFS4ERR_TOOSMALL will be returned to the client.\n   On successful return,\
    \ the server's response will provide a list of\n   extended attribute keys.  The\
    \ \"lxr_eof\" flag has a value of TRUE if\n   there are no more keys for the object.\n\
    \   The cookie value is only meaningful to the server and is used as a\n   \"\
    bookmark\" for the xattr key.  As mentioned, this cookie is used by\n   the client\
    \ for subsequent LISTXATTRS operations so that it may\n   continue listing keys.\
    \  The cookie is similar in concept to a READDIR\n   cookie or the READ offset\
    \ but should not be interpreted as such by\n   the client.\n   On success, the\
    \ current filehandle retains its value.\n"
- title: 8.4.3.4.  IMPLEMENTATION
  contents:
  - "8.4.3.4.  IMPLEMENTATION\n   The handling of a cookie is similar to that of the\
    \ READDIR operation.\n   It should be a rare occurrence that a server is unable\
    \ to continue\n   properly listing xattrs with the provided cookie.  The server\
    \ should\n   make every effort to avoid this condition since the application at\n\
    \   the client may not be able to properly handle this type of failure.\n"
- title: 8.4.4.  REMOVEXATTR - Remove an Extended Attribute of a File
  contents:
  - '8.4.4.  REMOVEXATTR - Remove an Extended Attribute of a File

    '
- title: 8.4.4.1.  ARGUMENTS
  contents:
  - "8.4.4.1.  ARGUMENTS\n   <CODE BEGINS>\n   /// struct REMOVEXATTR4args {\n   ///\
    \         /* CURRENT_FH: file */\n   ///         xattrkey4      rxa_name;\n  \
    \ /// };\n   <CODE ENDS>\n"
- title: 8.4.4.2.  RESULTS
  contents:
  - "8.4.4.2.  RESULTS\n   <CODE BEGINS>\n   /// union REMOVEXATTR4res switch (nfsstat4\
    \ rxr_status) {\n   ///  case NFS4_OK:\n   ///         change_info4      rxr_info;\n\
    \   ///  default:\n   ///         void;\n   /// };\n   <CODE ENDS>\n"
- title: 8.4.4.3.  DESCRIPTION
  contents:
  - "8.4.4.3.  DESCRIPTION\n   The REMOVEXATTR operation deletes one extended attribute\
    \ of a file\n   system object specified by rxa_name.  The server MUST return\n\
    \   NFS4ERR_NOXATTR if the attribute key does not exist.\n   A successful REMOVEXATTR\
    \ MUST change the file time_metadata and\n   change attributes.\n   Similar to\
    \ SETXATTR, the server communicates the value of the change\n   attribute immediately\
    \ prior to, and immediately following, a\n   successful REMOVEXATTR operation\
    \ in rxr_info.  This allows the client\n   to determine if its cached xattrs are\
    \ still valid after the\n   operation.  See Section 8.7 for a discussion on xattr\
    \ caching.\n"
- title: 8.4.4.4.  IMPLEMENTATION
  contents:
  - "8.4.4.4.  IMPLEMENTATION\n   If the object whose xattr is being removed has a\
    \ file delegation that\n   is held by a client other than the one doing the REMOVEXATTR,\
    \ the\n   delegation(s) must be recalled, and the operation cannot proceed to\n\
    \   delete the xattr until each such delegation is returned or revoked.\n   In\
    \ all cases in which delegations are recalled, the server is likely\n   to return\
    \ one or more NFS4ERR_DELAY errors while the delegation(s)\n   remains outstanding,\
    \ although it might not do that if the delegations\n   are returned quickly.\n"
- title: 8.4.5.  Valid Errors
  contents:
  - "8.4.5.  Valid Errors\n   This section contains a table that gives the valid error\
    \ returns for\n   each new protocol operation.  The error code NFS4_OK (indicating\
    \ no\n   error) is not listed but should be understood to be returnable by all\n\
    \   new operations.  The error values for all other operations are\n   defined\
    \ in Section 13.2 of [RFC7530] and Section 11.2 of [RFC7862].\n   +-------------+-----------------------------------------------------+\n\
    \   | Operation   | Errors                                              |\n  \
    \ +-------------+-----------------------------------------------------+\n   |\
    \ GETXATTR    | NFS4ERR_ACCESS, NFS4ERR_BADXDR,                     |\n   |  \
    \           | NFS4ERR_DEADSESSION, NFS4ERR_DELAY,                 |\n   |    \
    \         | NFS4ERR_FHEXPIRED, NFS4ERR_INVAL, NFS4ERR_IO,       |\n   |      \
    \       | NFS4ERR_MOVED, NFS4ERR_NAMETOOLONG,                 |\n   |        \
    \     | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOTSUPP,              |\n   |          \
    \   | NFS4ERR_NOXATTR, NFS4ERR_OP_NOT_IN_SESSION,         |\n   |            \
    \ | NFS4ERR_PERM, NFS4ERR_REP_TOO_BIG,                  |\n   |             |\
    \ NFS4ERR_REP_TOO_BIG_TO_CACHE, NFS4ERR_REQ_TOO_BIG,  |\n   |             | NFS4ERR_RETRY_UNCACHED_REP,\
    \ NFS4ERR_SERVERFAULT,    |\n   |             | NFS4ERR_STALE, NFS4ERR_TOO_MANY_OPS,\
    \                |\n   |             | NFS4ERR_WRONG_TYPE                    \
    \              |\n   | SETXATTR    | NFS4ERR_ACCESS, NFS4ERR_BADCHAR, NFS4ERR_BADXDR,\
    \    |\n   |             | NFS4ERR_DEADSESSION, NFS4ERR_DELAY, NFS4ERR_DQUOT,\
    \  |\n   |             | NFS4ERR_EXIST, NFS4ERR_FHEXPIRED, NFS4ERR_INVAL,    |\n\
    \   |             | NFS4ERR_IO, NFS4ERR_MOVED, NFS4ERR_NAMETOOLONG,     |\n  \
    \ |             | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOSPC,                |\n   |\
    \             | NFS4ERR_NOXATTR, NFS4ERR_OP_NOT_IN_SESSION,         |\n   |  \
    \           | NFS4ERR_PERM, NFS4ERR_REP_TOO_BIG,                  |\n   |    \
    \         | NFS4ERR_REP_TOO_BIG_TO_CACHE, NFS4ERR_REQ_TOO_BIG,  |\n   |      \
    \       | NFS4ERR_RETRY_UNCACHED_REP, NFS4ERR_ROFS,           |\n   |        \
    \     | NFS4ERR_SERVERFAULT, NFS4ERR_STALE,                 |\n   |          \
    \   | NFS4ERR_TOO_MANY_OPS, NFS4ERR_WRONG_TYPE,           |\n   |            \
    \ | NFS4ERR_XATTR2BIG                                   |\n   | LISTXATTRS  |\
    \ NFS4ERR_ACCESS, NFS4ERR_DEADSESSION, NFS4ERR_DELAY, |\n   |             | NFS4ERR_INVAL,\
    \ NFS4ERR_IO, NFS4ERR_MOVED,           |\n   |             | NFS4ERR_NAMETOOLONG,\
    \ NFS4ERR_NOFILEHANDLE,          |\n   |             | NFS4ERR_NOTSUPP, NFS4ERR_NOXATTR,\
    \                   |\n   |             | NFS4ERR_OP_NOT_IN_SESSION, NFS4ERR_PERM,\
    \            |\n   |             | NFS4ERR_REP_TOO_BIG, NFS4ERR_REP_TOO_BIG_TO_CACHE,\
    \  |\n   |             | NFS4ERR_REQ_TOO_BIG, NFS4ERR_RETRY_UNCACHED_REP,    |\n\
    \   |             | NFS4ERR_SERVERFAULT, NFS4ERR_STALE,                 |\n  \
    \ |             | NFS4ERR_TOO_MANY_OPS, NFS4ERR_WRONG_TYPE            |\n   |\
    \ REMOVEXATTR | NFS4ERR_ACCESS, NFS4ERR_BADCHAR, NFS4ERR_BADXDR,    |\n   |  \
    \           | NFS4ERR_DEADSESSION, NFS4ERR_DELAY, NFS4ERR_DQUOT,  |\n   |    \
    \         | NFS4ERR_EXIST, NFS4ERR_INVAL, NFS4ERR_IO,           |\n   |      \
    \       | NFS4ERR_LOCKED, NFS4ERR_MOVED, NFS4ERR_NAMETOOLONG, |\n   |        \
    \     | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOSPC,                |\n   |          \
    \   | NFS4ERR_NOXATTR,, NFS4ERR_OLD_STATEID,              |\n   |            \
    \ | NFS4ERR_OPENMODE, NFS4ERR_OP_NOT_IN_SESSION,        |\n   |             |\
    \ NFS4ERR_PERM, NFS4ERR_RETRY_UNCACHED_REP,           |\n   |             | NFS4ERR_ROFS,\
    \ NFS4ERR_SERVERFAULT, NFS4ERR_STALE,   |\n   |             | NFS4ERR_TOO_MANY_OPS,\
    \ NFS4ERR_WRONG_TYPE            |\n   +-------------+-----------------------------------------------------+\n\
    \            Valid Error Returns for Each New Protocol Operation\n"
- title: 8.5.  Modifications to Existing Operations
  contents:
  - "8.5.  Modifications to Existing Operations\n   In order to provide fine-grained\
    \ access control to query or modify\n   extended attributes, new access rights\
    \ are defined that can be\n   checked to determine if the client is permitted\
    \ to perform the xattr\n   operation.\n   Note that in general, as explained in\
    \ Section 18.1.4 of [RFC5661], a\n   client cannot reliably perform an access\
    \ check with only current file\n   attributes and must verify access with the\
    \ server.\n   This section extends the semantics of the ACCESS operation documented\n\
    \   in Section 18.1 of [RFC5661].  Three new access permissions can be\n   requested:\n\
    \   ACCESS4_XAREAD     Query a file or directory for its xattr value\n       \
    \               given a key.\n   ACCESS4_XAWRITE    Modify xattr keys and/or values\
    \ of a file or\n                      directory.\n   ACCESS4_XALIST     Query\
    \ a file or directory to list its xattr keys.\n   As with the existing access\
    \ permissions, the results of ACCESS are\n   advisory in nature, with no implication\
    \ that such access will be\n   allowed or denied in the future.\n   The rules\
    \ for the client and server follow:\n   o  If the client is sending ACCESS in\
    \ order to determine if the user\n      can read an xattr of the file with GETXATTR,\
    \ the client should set\n      ACCESS4_XAREAD in the request's access field.\n\
    \   o  If the client is sending ACCESS in order to determine if the user\n   \
    \   can modify an xattr of the file with SETXATTR or REMOVEXATTR, the\n      client\
    \ should set ACCESS4_XAWRITE in the request's access field.\n   o  If the client\
    \ is sending ACCESS in order to determine if the user\n      can list the xattr\
    \ keys of the file with LISTXATTRS, the client\n      should set ACCESS4_XALIST\
    \ in the request's access field.\n"
- title: 8.6.  Numeric Values Assigned to Protocol Extensions
  contents:
  - "8.6.  Numeric Values Assigned to Protocol Extensions\n   This section lists the\
    \ numeric values that are assigned new\n   attributes and operations to implement\
    \ the xattr feature.  To avoid\n   inconsistent assignments, these have been checked\
    \ against the most\n   recent protocol version [RFC5661] and the current minor\
    \ version\n   [RFC7862].  Development of interoperable prototypes is possible\
    \ using\n   these values.\n   <CODE BEGINS>\n   /// /*\n   ///  * ACCESS - Check\
    \ Access Rights\n   ///  */\n   /// const ACCESS4_XAREAD    = 0x00000040;\n  \
    \ /// const ACCESS4_XAWRITE   = 0x00000080;\n   /// const ACCESS4_XALIST    =\
    \ 0x00000100;\n   /// /*\n   ///  * New NFSv4 attribute\n   ///  */\n   /// typedef\
    \ bool            fattr4_xattr_support;\n   /// /*\n   ///  * New RECOMMENDED\
    \ Attribute\n   ///  */\n   /// const FATTR4_XATTR_SUPPORT = 82;\n   /// /*\n\
    \   ///  * New NFSv4 operations\n   ///  */\n   /// /* Following lines are to\
    \ be added to enum nfs_opnum4 */\n   /// /*\n   /// OP_GETXATTR              \
    \  = 72,\n   /// OP_SETXATTR                = 73,\n   /// OP_LISTXATTRS      \
    \        = 74,\n   /// OP_REMOVEXATTR             = 75,\n   /// */\n   /// /*\n\
    \   ///  * New cases for Operation arrays\n   ///  */\n   /// /* Following lines\
    \ are to be added to nfs_argop4 */\n   /// /*\n   /// case OP_GETXATTR:      GETXATTR4args\
    \ opgetxattr;\n   /// case OP_SETXATTR:      SETXATTR4args opsetxattr;\n   ///\
    \ case OP_LISTXATTRS:    LISTXATTRS4args oplistxattrs;\n   /// case OP_REMOVEXATTR:\
    \   REMOVEXATTR4args opremovexattr;\n   /// */\n   /// /* Following lines are\
    \ to be added to nfs_resop4 */\n   /// /*\n   /// case OP_GETXATTR:      GETXATTR4res\
    \ opgetxattr;\n   /// case OP_SETXATTR:      SETXATTR4res opsetxattr;\n   ///\
    \ case OP_LISTXATTRS:    LISTXATTRS4res oplistxattrs;\n   /// case OP_REMOVEXATTR:\
    \   REMOVEXATTR4res opremovexattr;\n   /// */\n   <CODE ENDS>\n"
- title: 8.7.  Caching
  contents:
  - "8.7.  Caching\n   The caching behavior for extended attributes is similar to\
    \ other file\n   attributes such as ACLs and is affected by whether or not OPEN\n\
    \   delegation has been granted to a client.\n   Xattrs obtained from, or sent\
    \ to, the server may be cached and\n   clients can use them to avoid subsequent\
    \ GETXATTR requests, provided\n   that the client can ensure that the cached value\
    \ has not been\n   subsequently modified by another client.  Such assurance can\
    \ be based\n   on the client holding a delegation for the file in question or\
    \ the\n   client interrogating the change attribute to make sure that any\n  \
    \ cached value is still valid.  Such caching may be read-only or write-\n   through.\n\
    \   When a delegation is in effect, some operations by a second client to\n  \
    \ a delegated file will cause the server to recall the delegation\n   through\
    \ a callback.  For individual operations, we describe, under\n   IMPLEMENTATION,\
    \ when such operations are required to effect a recall.\n   The result of local\
    \ caching is that the individual xattrs maintained\n   on clients may not be up\
    \ to date.  Changes made in one order on the\n   server may be seen in a different\
    \ order on one client and in a third\n   order on another client.  In order to\
    \ limit problems that may arise\n   due to separate operations to obtain individual\
    \ xattrs and other file\n   attributes, a client should treat xattrs just like\
    \ other file\n   attributes with respect to caching as detailed in Section 10.6\
    \ of\n   [RFC7530].  A client may validate its cached version of an xattr for\n\
    \   a file by fetching the change attribute and assuming that if the\n   change\
    \ attribute has the same value as it did when the attributes\n   were cached,\
    \ then xattrs have not changed.  If the client holds a\n   delegation that ensures\
    \ that the change attribute cannot be modified\n   by another client, it can dispense\
    \ with actual interrogation of the\n   change attribute.\n   When a client is\
    \ changing xattrs of a file, it needs to determine\n   whether there have been\
    \ changes made to the file by other clients.\n   It does this by using the change\
    \ attribute as reported before and\n   after the change operation (SETXATTR or\
    \ REMOVEXATTR) in the\n   associated change_info4 value returned for the operation.\
    \  The server\n   is able to communicate to the client whether the change_info4\
    \ data is\n   provided atomically with respect to the change operation.  If the\n\
    \   change values are provided atomically, the client has a basis for\n   determining,\
    \ given proper care, whether other clients are modifying\n   the file in question.\n\
    \   An effective way to enable the client to make this determination\n   simply\
    \ is for it to serialize all xattr changes made to a specific\n   file.  When\
    \ this is done, and the server provides before and after\n   values of the change\
    \ attribute atomically, the client can simply\n   compare the after value of the\
    \ change attribute from one operation\n   with the before value on the subsequent\
    \ change operation modifying\n   the file.  When these are equal, the client is\
    \ assured that no other\n   client is modifying the file in question.\n   If the\
    \ comparison indicates that the file was updated by another\n   client, the xattr\
    \ cache associated with the modified file is purged\n   from the client.  If the\
    \ comparison indicates no modification, the\n   xattr cache can be updated on\
    \ the client to reflect the file\n   operation, and the associated timeout can\
    \ be extended.  The post-\n   operation change value needs to be saved as the\
    \ basis for future\n   change_info4 comparisons.\n   Xattr caching requires that\
    \ the client revalidate xattr cache data by\n   inspecting the change attribute\
    \ of a file at the point when an xattr\n   was cached.  This requires that the\
    \ server update the change\n   attribute when xattrs are modified.  For a client\
    \ to use the\n   change_info4 information appropriately and correctly, the server\
    \ must\n   report the pre- and post-operation change attribute values\n   atomically.\
    \  When the server is unable to report the before and after\n   values atomically\
    \ with respect to the xattr update operation, the\n   server must indicate that\
    \ fact in the change_info4 return value.\n   When the information is not atomically\
    \ reported, the client should\n   not assume that other clients have not changed\
    \ the xattrs.\n   The protocol does not provide support for write-back caching\
    \ of\n   xattrs.  As such, all modifications to xattrs should be done by\n   requests\
    \ to the server.  The server should perform such updates\n   synchronously.\n"
- title: 8.8.  Xattrs and File Locking
  contents:
  - "8.8.  Xattrs and File Locking\n   Xattr operations, for the most part, function\
    \ independent of\n   operations related to file locking state.  For example, xattrs\
    \ can be\n   interrogated and modified without a corresponding OPEN operation.\n\
    \   The server does not need to check for locks that conflict with xattr\n   access\
    \ or modify operations.  For example, another OPEN specified\n   with OPEN4_SHARE_DENY_READ\
    \ or OPEN4_SHARE_DENY_BOTH does not prevent\n   access to or modification of xattrs.\
    \  Note that the server MUST still\n   verify that the client is allowed to perform\
    \ the xattr operation on\n   the basis of access permissions.\n   However, the\
    \ presence of delegations may dictate how xattr operations\n   interact with the\
    \ state-related logic.  Xattrs cannot be modified\n   when a delegation for the\
    \ corresponding file is held by another\n   client.  On the other hand, xattrs\
    \ can be interrogated despite the\n   holding of a write delegation by another\
    \ client since updates are\n   write-through to the server.\n"
- title: 8.9.  pNFS Considerations
  contents:
  - "8.9.  pNFS Considerations\n   All xattr operations are sent to the metadata server,\
    \ which is\n   responsible for fetching data from and effecting necessary changes\
    \ to\n   persistent storage.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Since xattrs are application data, security issues\
    \ are exactly the\n   same as those relating to the storing of file data and named\n\
    \   attributes.  Clients MUST NOT accord any system-interpreted semantics\n  \
    \ to xattrs, since their use is restricted to user-managed metadata\n   only as\
    \ explained in Section 5.  Extended attributes are various\n   sorts of application\
    \ data, and the fact that the means of reference\n   is slightly different in\
    \ each case should not be considered security\n   relevant.  As such, the additions\
    \ to the NFS protocol for supporting\n   extended attributes do not alter the\
    \ security considerations of the\n   NFSv4 protocol [RFC7530].\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   The addition of xattr support to the NFSv4 protocol\
    \ does not require\n   any actions by IANA.  This document limits xattr names\
    \ to the user\n   namespace, where application developers are allowed to define\
    \ and use\n   attributes as needed.  Unlike named attributes, there is no namespace\n\
    \   identifier associated with xattrs that may require registration.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [LEGAL]    IETF Trust, \"Legal Provisions Relating\
    \ to IETF Documents\",\n              Version 5.0, March 2015, <http://trustee.ietf.org/docs/\n\
    \              IETF-Trust-License-Policy.pdf>.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n           \
    \   <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4506]  Eisler, M., Ed.,\
    \ \"XDR: External Data Representation\n              Standard\", STD 67, RFC 4506,\
    \ DOI 10.17487/RFC4506, May\n              2006, <https://www.rfc-editor.org/info/rfc4506>.\n\
    \   [RFC5661]  Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed.,\n      \
    \        \"Network File System (NFS) Version 4 Minor Version 1\n             \
    \ Protocol\", RFC 5661, DOI 10.17487/RFC5661, January 2010,\n              <https://www.rfc-editor.org/info/rfc5661>.\n\
    \   [RFC7530]  Haynes, T., Ed. and D. Noveck, Ed., \"Network File System\n   \
    \           (NFS) Version 4 Protocol\", RFC 7530, DOI 10.17487/RFC7530,\n    \
    \          March 2015, <https://www.rfc-editor.org/info/rfc7530>.\n   [RFC7862]\
    \  Haynes, T., \"Network File System (NFS) Version 4 Minor\n              Version\
    \ 2 Protocol\", RFC 7862, DOI 10.17487/RFC7862,\n              November 2016,\
    \ <https://www.rfc-editor.org/info/rfc7862>.\n   [RFC7863]  Haynes, T., \"Network\
    \ File System (NFS) Version 4 Minor\n              Version 2 External Data Representation\
    \ Standard (XDR)\n              Description\", RFC 7863, DOI 10.17487/RFC7863,\
    \ November\n              2016, <https://www.rfc-editor.org/info/rfc7863>.\n \
    \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n      \
    \        2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n         \
    \     May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8178]  Noveck,\
    \ D., \"Rules for NFSv4 Extensions and Minor\n              Versions\", RFC 8178,\
    \ DOI 10.17487/RFC8178, July 2017,\n              <https://www.rfc-editor.org/info/rfc8178>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [FreeBSD]  FreeBSD, \"FreeBSD Manual Pages\
    \ - extattr\", FreeBSD System\n              Calls Manual, January 2008, <http://www.freebsd.org/\n\
    \              cgi/man.cgi?query=extattr&sektion=9>.\n   [freedesktop]\n     \
    \         freedesktop, \"Guidelines for extended attributes\", May\n         \
    \     2013, <http://www.freedesktop.org/wiki/\n              CommonExtendedAttributes>.\n\
    \   [fsattr]   Oracle, \"fsattr - extended file attributes\", Man Pages\n    \
    \          Section 5: Standards, Environments, and Macros,\n              <http://docs.oracle.com/cd/E19253-01/816-5175/6mbba7f02>.\n\
    \   [KDE]      Handa, V., \"Extended Attributes Updates\", August 2014,\n    \
    \          <http://vhanda.in/blog/2014/08/\n              extended-attributes-updates/>.\n\
    \   [Linux]    The Linux man-pages project, \"Linux Programmer's Manual:\n   \
    \           xattr(7)\", Linux man pages: Section 7, September 2017,\n        \
    \      <http://man7.org/linux/man-pages/man7/xattr.7.html>.\n   [Love]     Love,\
    \ R., \"Linux System Programming: Talking Directly to\n              the Kernel\
    \ and C Library\", O'Reilly Media, Inc., February\n              2009.\n   [NTFS]\
    \     Microsoft, \"File Streams\", <http://msdn.microsoft.com/en-\n          \
    \    us/library/windows/desktop/aa364404(v=vs.85).aspx>.\n   [POSIX]    The Open\
    \ Group, \"System Interfaces of The Open Group Base\n              Specifications\
    \ Issue 7\", IEEE Std 1003.1, 2016 Edition\n              (HTML Version), ISBN\
    \ 1937218812, September 2016,\n              <http://pubs.opengroup.org/onlinepubs/9699919799/>.\n\
    \   [Swift]    The OpenStack Foundation Wiki, \"Swift-on-File\", July 2015,\n\
    \              <https://wiki.openstack.org/wiki/Swiftonfile>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document has attempted to capture the discussion on\
    \ adding\n   xattrs to the NFSv4 protocol from many participants on the IETF NFSv4\n\
    \   mailing list.  Those who provided valuable input and comments on\n   draft\
    \ versions of this document include: Tom Haynes, Christoph\n   Hellwig, Nico Williams,\
    \ Dave Noveck, Benny Halevy, and Andreas\n   Gruenbacher.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Manoj Naik\n   Nutanix\n   1740 Technology Drive, Suite\
    \ 150\n   San Jose, CA 95110\n   United States of America\n   Email: manoj.naik@nutanix.com\n\
    \   Marc Eshel\n   IBM Almaden\n   650 Harry Road\n   San Jose, CA 95120\n   United\
    \ States of America\n   Phone: +1 408-927-1894\n   Email: eshel@us.ibm.com\n"
