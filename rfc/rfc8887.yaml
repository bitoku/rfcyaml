- contents:
  - '   A JSON Meta Application Protocol (JMAP) Subprotocol for WebSocket

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a binding for the JSON Meta Application\n
    \  Protocol (JMAP) over a WebSocket transport layer.  The WebSocket\n   binding
    for JMAP provides higher performance than the current HTTP\n   binding for JMAP.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8887.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Conventions Used in This Document\n
    \  3.  Discovering Support for JMAP over WebSocket\n   4.  JMAP Subprotocol\n
    \    4.1.  Authentication\n     4.2.  Handshake\n     4.3.  WebSocket Messages\n
    \      4.3.1.  Handling Invalid Data\n       4.3.2.  JMAP Requests\n       4.3.3.
    \ JMAP Responses\n       4.3.4.  JMAP Request-Level Errors\n       4.3.5.  JMAP
    Push Notifications\n     4.4.  Examples\n   5.  Security Considerations\n     5.1.
    \ Connection Confidentiality and Integrity\n     5.2.  Non-browser Clients\n   6.
    \ IANA Considerations\n     6.1.  Registration of the WebSocket JMAP Subprotocol\n
    \  7.  References\n     7.1.  Normative References\n     7.2.  Informative References\n
    \  Acknowledgments\n   Author's Address\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   JMAP [RFC8620] over HTTP [RFC7235] requires that every JMAP
    API\n   request be authenticated.  Depending on the type of authentication\n   used
    by the JMAP client and the configuration of the JMAP server,\n   authentication
    could be an expensive operation both in time and\n   resources.  In such circumstances,
    reauthenticating for every JMAP\n   API request may harm performance.\n   The
    WebSocket [RFC6455] binding for JMAP eliminates this performance\n   hit by authenticating
    just the WebSocket handshake request and having\n   those credentials remain in
    effect for the duration of the WebSocket\n   connection.  This binding supports
    JMAP API requests and responses,\n   with optional support for push notifications.\n
    \  Furthermore, the WebSocket binding for JMAP can optionally compress\n   [RFC7692]
    both JMAP API requests and responses.  Although compression\n   of HTTP responses
    is ubiquitous, compression of HTTP requests has\n   very low, if any, deployment
    and therefore isn't a viable option for\n   JMAP API requests over HTTP.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
    interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,
    they appear in all\n   capitals, as shown here.\n   This document uses the terminology
    defined in the core JMAP\n   specification [RFC8620].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Discovering Support for JMAP over WebSocket\n   The JMAP capabilities object
    is returned as part of the standard JMAP\n   Session object (see Section 2 of
    [RFC8620]).  Servers supporting this\n   specification MUST add a property named\n
    \  \"urn:ietf:params:jmap:websocket\" to the capabilities object.  The\n   value
    of this property is an object that MUST contain the following\n   information
    on server capabilities:\n   *  url: \"String\"\n      The wss-URI (see Section
    3 of [RFC6455]) to use for initiating a\n      JMAP-over-WebSocket handshake (the
    \"WebSocket URL endpoint\"\n      colloquially).\n   *  supportsPush: \"Boolean\"\n
    \     This is true if the server supports push notifications over the\n      WebSocket,
    as described in Section 4.3.5.\n   Example:\n   \"urn:ietf:params:jmap:websocket\":
    {\n     \"url\": \"wss://server.example.com/jmap/ws/\",\n     \"supportsPush\":
    true\n   }\n"
  title: 3.  Discovering Support for JMAP over WebSocket
- contents:
  - "4.  JMAP Subprotocol\n   The term WebSocket subprotocol refers to an application-level\n
    \  protocol layered on top of a WebSocket connection.  This document\n   specifies
    the WebSocket JMAP subprotocol for carrying JMAP API\n   requests, responses,
    and optional push notifications through a\n   WebSocket connection.  Binary data
    is handled per Section 6 of\n   [RFC8620] (via a separate HTTP connection or stream)
    or per a future\n   extension to JMAP or this specification.\n"
  - contents:
    - "4.1.  Authentication\n   A JMAP WebSocket connection is authenticated by presenting
      a user's\n   credentials in the HTTP request [RFC7235] that initiates the\n
      \  WebSocket handshake.  See Section 8.2 of [RFC8620] for\n   recommendations
      regarding the selection of HTTP authentication\n   schemes.\n"
    title: 4.1.  Authentication
  - contents:
    - "4.2.  Handshake\n   The JMAP WebSocket client and JMAP WebSocket server negotiate
      the use\n   of the WebSocket JMAP subprotocol during the WebSocket handshake,\n
      \  either via an HTTP/1.1 Upgrade request (see Section 4 of [RFC6455])\n   or
      an HTTP/2 Extended CONNECT request (see Section 5 of [RFC8441]).\n   The WebSocket
      JMAP subprotocol is also intended to run over future\n   bindings of HTTP (e.g.,
      HTTP/3) provided that there is a defined\n   mechanism for performing a WebSocket
      handshake over that binding.\n   Regardless of the method used for the WebSocket
      handshake, the client\n   MUST first perform a TLS handshake on a JMAP WebSocket
      URL endpoint\n   (Section 3) having the \"wss://\" scheme (WebSocket over TLS)
      in\n   accordance with the requirements of running the particular binding of\n
      \  HTTP over TLS (see [RFC2818] and Section 4.1 of [RFC6455] for\n   HTTP/1.1
      and Section 9.2 of [RFC7540] for HTTP/2).  If the TLS\n   handshake fails, the
      client MUST close the connection.  Otherwise,\n   the client MUST make an authenticated
      HTTP request [RFC7235] on the\n   encrypted connection and MUST include the
      value \"jmap\" in the list of\n   protocols for the \"Sec-WebSocket-Protocol\"
      header field.\n   The reply from the server MUST also contain a corresponding
      \"Sec-\n   WebSocket-Protocol\" header field with a value of \"jmap\" in order
      for\n   a JMAP subprotocol connection to be established.\n   Once the handshake
      has successfully completed, the WebSocket\n   connection is established and
      can be used for JMAP API requests,\n   responses, and optional push notifications.
      \ Other message types MUST\n   NOT be transmitted over this connection.\n   The
      credentials used for authenticating the HTTP request to initiate\n   the handshake
      remain in effect for the duration of the WebSocket\n   connection.  If the authentication
      credentials for the user expire,\n   the server can either treat subsequent
      requests as if they are\n   unauthenticated or close the WebSocket connection.
      \ In the latter\n   case, the server MAY send a Close frame with a status code
      of 1008\n   (Policy Violation), as defined in Section 7.4.1 of [RFC6455].\n"
    title: 4.2.  Handshake
  - contents:
    - "4.3.  WebSocket Messages\n   Data frame messages in the JMAP subprotocol MUST
      be text frames and\n   contain UTF-8 encoded data.  The messages MUST be in
      the form of a\n   single JMAP Request object (see Section 3.3 of [RFC8620]),
      JMAP\n   WebSocketPushEnable object (see Section 4.3.5.2), or JMAP\n   WebSocketPushDisable
      object (see Section 4.3.5.3) when sent from the\n   client to the server, and
      MUST be in the form of a single JMAP\n   Response object, JSON Problem Details
      object, or JMAP StateChange\n   object (see Sections 3.4, 3.6.1, and 7.1 of
      [RFC8620], respectively)\n   when sent from the server to the client.\n   Note
      that fragmented WebSocket messages (split over multiple text\n   frames) MUST
      be coalesced prior to parsing them as JSON objects.\n"
    - contents:
      - "4.3.1.  Handling Invalid Data\n   If a client or server receives a binary
        frame, the endpoint can\n   either ignore the frame or close the WebSocket
        connection.  In the\n   latter case, the endpoint MAY send a Close frame with
        a status code\n   of 1003 (Unsupported Data), as defined in Section 7.4.1
        of [RFC6455].\n   If a client receives a message that is not in the form of
        a JSON\n   Problem Details object, a JMAP Response object, or a JMAP StateChange\n
        \  object, the client can either ignore the message or close the\n   WebSocket
        connection.  In the latter case, the endpoint MAY send a\n   Close frame with
        a status code of 1007 (Invalid frame payload data),\n   as defined in Section
        7.4.1 of [RFC6455].\n   A server MUST return an appropriate JSON Problem Details
        object\n   (Section 4.3.4) for any request-level errors (e.g., an invalid
        JMAP\n   object, an unsupported capability or method call, or exceeding a\n
        \  server request limit).\n"
      title: 4.3.1.  Handling Invalid Data
    - contents:
      - "4.3.2.  JMAP Requests\n   The specification extends the Request object with
        two additional\n   arguments when used over a WebSocket:\n   *  @type: \"String\"\n
        \     This MUST be the string \"Request\".\n   *  id: \"String\" (optional)\n
        \     A client-specified identifier for the request to be echoed back in\n
        \     the response to this request.\n   JMAP over WebSocket allows the server
        to process requests out of\n   order.  The client-specified identifier is
        used as a mechanism for\n   the client to correlate requests and responses.\n
        \  Additionally, the \"maxConcurrentRequests\" limit in the \"capabilities\"\n
        \  object (see Section 2 of [RFC8620]) also applies to requests made on\n
        \  the WebSocket connection.  When using the WebSocket JMAP subprotocol\n
        \  over a binding of HTTP that allows multiplexing of requests (e.g.,\n   HTTP/2),
        this limit applies to the sum of requests made on both the\n   JMAP API endpoint
        and the WebSocket connection.\n"
      title: 4.3.2.  JMAP Requests
    - contents:
      - "4.3.3.  JMAP Responses\n   The specification extends the Response object
        with two additional\n   arguments when used over a WebSocket:\n   *  @type:
        \"String\"\n      This MUST be the string \"Response\".\n   *  requestId:
        \"String\" (optional; MUST be returned if an identifier\n      is included
        in the request)\n      The client-specified identifier in the corresponding
        request.\n"
      title: 4.3.3.  JMAP Responses
    - contents:
      - "4.3.4.  JMAP Request-Level Errors\n   The specification extends the Problem
        Details object for request-\n   level errors (see Section 3.6.1 of [RFC8620])
        with two additional\n   arguments when used over a WebSocket:\n   *  @type:
        \"String\"\n      This MUST be the string \"RequestError\".\n   *  requestId:
        \"String\" (optional; MUST be returned if given in the\n      request)\n      The
        client-specified identifier in the corresponding request.\n"
      title: 4.3.4.  JMAP Request-Level Errors
    - contents:
      - "4.3.5.  JMAP Push Notifications\n   JMAP-over-WebSocket servers that support
        push notifications on the\n   WebSocket will advertise a \"supportsPush\"
        property with a value of\n   true in the \"urn:ietf:params:jmap:websocket\"
        server capabilities\n   object.\n"
      - contents:
        - "4.3.5.1.  Notification Format\n   All push notifications take the form
          of a standard StateChange object\n   (see Section 7.1 of [RFC8620]).\n   The
          specification extends the StateChange object with one additional\n   argument
          when used over a WebSocket:\n   *  pushState: \"String\" (optional)\n      A
          (preferably short) string that encodes the entire server state\n      visible
          to the user (not just the objects returned in this call).\n      The purpose
          of the \"pushState\" token is to allow a client to\n      immediately get
          any changes that occurred while it was\n      disconnected (see Section
          4.3.5.2).  If the server does not\n      support \"pushState\" tokens, the
          client will have to issue a series\n      of \"/changes\" requests (see
          Section 5.2 of [RFC8620]) upon\n      reconnection to update its state to
          match that of the server.\n"
        title: 4.3.5.1.  Notification Format
      - contents:
        - "4.3.5.2.  Enabling Notifications\n   A client enables push notifications
          from the server for the current\n   connection by sending a WebSocketPushEnable
          object to the server.  A\n   WebSocketPushEnable object has the following
          properties:\n   *  @type: \"String\"\n      This MUST be the string \"WebSocketPushEnable\".\n
          \  *  dataTypes: \"String[]|null\"\n      A list of data type names (e.g.,
          \"Mailbox\" or \"Email\") that the\n      client is interested in.  A StateChange
          notification will only be\n      sent if the data for one of these types
          changes.  Other types are\n      omitted from the TypeState object.  If
          null, changes will be\n      pushed for all supported data types.\n   *
          \ pushState: \"String\" (optional)\n      The last \"pushState\" token that
          the client received from the\n      server.  Upon receipt of a \"pushState\"
          token, the server SHOULD\n      immediately send all changes since that
          state token.\n"
        title: 4.3.5.2.  Enabling Notifications
      - contents:
        - "4.3.5.3.  Disabling Notifications\n   A client disables push notifications
          from the server for the current\n   connection by sending a WebSocketPushDisable
          object to the server.  A\n   WebSocketPushDisable object has the following
          property:\n   *  @type: \"String\"\n      This MUST be the string \"WebSocketPushDisable\".\n"
        title: 4.3.5.3.  Disabling Notifications
      title: 4.3.5.  JMAP Push Notifications
    title: 4.3.  WebSocket Messages
  - contents:
    - "4.4.  Examples\n   The following examples show WebSocket JMAP opening handshakes,
      a JMAP\n   Core/echo request and response, and a subsequent closing handshake.\n
      \  The examples assume that the JMAP WebSocket URL endpoint has been\n   advertised
      in the JMAP Session object as having a path of \"/jmap/ws/\"\n   and that TLS
      negotiation has already succeeded.  Note that folding of\n   header fields is
      for editorial purposes only.\n   WebSocket JMAP connection via HTTP/1.1 with
      push notifications for\n   mail [RFC8621] is enabled.  This example assumes
      that the client has\n   cached pushState \"aaa\" from a previous connection.\n
      \  [[ From Client ]]                [[ From Server ]]\n   GET /jmap/ws/ HTTP/1.1\n
      \  Host: server.example.com\n   Upgrade: websocket\n   Connection: Upgrade\n
      \  Authorization: Basic Zm9vOmJhcg==\n   Sec-WebSocket-Key:\n     dGhlIHNhbXBsZSBub25jZQ==\n
      \  Sec-WebSocket-Protocol: jmap\n   Sec-WebSocket-Version: 13\n   Origin: https://www.example.com\n
      \  [WebSocket connection established]\n   WS_DATA\n   {\n     \"@type\": \"WebSocketPushEnable\",\n
      \    \"dataTypes\": [ \"Mailbox\", \"Email\" ],\n     \"pushState\": \"aaa\"\n
      \  }\n   WS_DATA\n   {\n     \"@type\": \"Request\",\n     \"id\": \"R1\",\n
      \    \"using\": [ \"urn:ietf:params:jmap:core\" ],\n     \"methodCalls\": [\n
      \      [\n         \"Core/echo\", {\n           \"hello\": true,\n           \"high\":
      5\n         },\n         \"b3ff\"\n       ]\n     ]\n   }\n   WS_DATA\n   The
      quick brown fox jumps\n    over the lazy dog.\n   [A new email is received]\n
      \  WS_CLOSE\n   [WebSocket connection closed]\n   WebSocket JMAP connection
      on an HTTP/2 stream that also negotiates\n   compression [RFC7692]:\n   [[ From
      Client ]]                [[ From Server ]]\n   HEADERS + END_HEADERS\n   :method
      = CONNECT\n   :protocol = websocket\n   :scheme = https\n   :path = /jmap/ws/\n
      \  :authority = server.example.com\n   origin: https://example.com\n   authorization
      = Basic Zm9vOmJhcg==\n   sec-websocket-protocol = jmap\n   sec-websocket-version
      = 13\n   sec-websocket-extensions =\n     permessage-deflate\n   origin = https://www.example.com\n
      \  [WebSocket connection established]\n   DATA\n   WS_DATA\n   [compressed text]\n
      \  ...\n   DATA + END_STREAM\n   WS_CLOSE\n   [WebSocket connection closed]\n
      \  [HTTP/2 stream closed]\n"
    title: 4.4.  Examples
  title: 4.  JMAP Subprotocol
- contents:
  - "5.  Security Considerations\n   The security considerations for both WebSocket
    (see Section 10 of\n   [RFC6455]) and JMAP (see Section 8 of [RFC8620]) apply
    to the\n   WebSocket JMAP subprotocol.  Specific security considerations are\n
    \  described below.\n"
  - contents:
    - "5.1.  Connection Confidentiality and Integrity\n   To ensure the confidentiality
      and integrity of data sent and received\n   via JMAP over WebSocket, the WebSocket
      connection MUST use TLS 1.2\n   [RFC5246] or later, following the recommendations
      in BCP 195\n   [RFC7525].  Servers SHOULD support TLS 1.3 [RFC8446] or later.\n"
    title: 5.1.  Connection Confidentiality and Integrity
  - contents:
    - "5.2.  Non-browser Clients\n   JMAP over WebSocket can be used by clients both
      running inside and\n   outside of a web browser.  As such, the security considerations
      in\n   Sections 10.2 and 10.1 of [RFC6455] apply to those respective\n   environments.\n"
    title: 5.2.  Non-browser Clients
  title: 5.  Security Considerations
- contents:
  - '6.  IANA Considerations

    '
  - contents:
    - "6.1.  Registration of the WebSocket JMAP Subprotocol\n   Per this specification,
      IANA has registered the following in the\n   \"WebSocket Subprotocol Name Registry\"
      within the \"WebSocket Protocol\n   Registries\".\n   Subprotocol Identifier:
      \ jmap\n   Subprotocol Common Name:  WebSocket Transport for JMAP (JSON Meta\n
      \     Application Protocol)\n   Subprotocol Definition:  RFC 8887\n"
    title: 6.1.  Registration of the WebSocket JMAP Subprotocol
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI
      10.17487/RFC2818, May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6455]
      \ Fette, I. and A. Melnikov, \"The WebSocket Protocol\",\n              RFC
      6455, DOI 10.17487/RFC6455, December 2011,\n              <https://www.rfc-editor.org/info/rfc6455>.\n
      \  [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI
      10.17487/RFC7235, June 2014,\n              <https://www.rfc-editor.org/info/rfc7235>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <https://www.rfc-editor.org/info/rfc7525>.\n   [RFC7540]
      \ Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <https://www.rfc-editor.org/info/rfc7540>.\n   [RFC7692]
      \ Yoshino, T., \"Compression Extensions for WebSocket\",\n              RFC
      7692, DOI 10.17487/RFC7692, December 2015,\n              <https://www.rfc-editor.org/info/rfc7692>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8441]  McManus, P., \"Bootstrapping
      WebSockets with HTTP/2\",\n              RFC 8441, DOI 10.17487/RFC8441, September
      2018,\n              <https://www.rfc-editor.org/info/rfc8441>.\n   [RFC8446]
      \ Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n              Version
      1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n
      \  [RFC8620]  Jenkins, N. and C. Newman, \"The JSON Meta Application\n              Protocol
      (JMAP)\", RFC 8620, DOI 10.17487/RFC8620, July\n              2019, <https://www.rfc-editor.org/info/rfc8620>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC8621]  Jenkins, N. and C. Newman, \"The
      JSON Meta Application\n              Protocol (JMAP) for Mail\", RFC 8621, DOI
      10.17487/RFC8621,\n              August 2019, <https://www.rfc-editor.org/info/rfc8621>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   The author would like to thank the following individuals
    for\n   contributing their ideas and support for writing this specification:\n
    \  Neil Jenkins, Robert Mueller, and Chris Newman.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Kenneth Murchison\n   Fastmail US LLC\n   1429 Walnut Street,
    Suite 1201\n   Philadelphia, PA 19102\n   United States of America\n"
  title: Author's Address
